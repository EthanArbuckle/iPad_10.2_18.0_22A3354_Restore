void WTF::Vector<WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::fill(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  uint64_t v12;
  unsigned int **v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int **v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int **v29;
  unsigned int **v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int **v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v43;
  unsigned int **v44;
  unsigned int *v45;
  unsigned int v46;

  v11 = *(unsigned int *)(a1 + 12);
  if (v11 <= a3)
  {
    v17 = *(unsigned int *)(a1 + 8);
    if (v17 < a3)
    {
      if ((_DWORD)v17)
      {
        if ((_DWORD)v11)
        {
          v18 = *(unsigned int ***)a1;
          v19 = *(_QWORD *)a1 + 8 * v11;
          do
          {
            v20 = *v18;
            *v18 = 0;
            if (v20)
            {
              do
              {
                v21 = __ldaxr(v20);
                v22 = v21 - 1;
              }
              while (__stlxr(v22, v20));
              if (!v22)
              {
                atomic_store(1u, v20);
                WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
              }
            }
            ++v18;
          }
          while (v18 != (unsigned int **)v19);
          *(_DWORD *)(a1 + 12) = 0;
        }
        v24 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
          WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      if (*(unsigned int *)(a1 + 8) < a3)
      {
        if (a3 >> 29)
        {
          __break(0xC471u);
          return;
        }
        v25 = *(_QWORD *)a1;
        v26 = *(unsigned int *)(a1 + 12);
        v27 = WTF::fastMalloc((WTF *)(8 * a3));
        *(_DWORD *)(a1 + 8) = a3;
        *(_QWORD *)a1 = v27;
        if ((_DWORD)v26)
        {
          v28 = (_QWORD *)v27;
          v29 = (unsigned int **)(v25 + 8 * v26);
          v30 = (unsigned int **)v25;
          do
          {
            v31 = *v30;
            *v30 = 0;
            *v28 = v31;
            v32 = *v30;
            *v30 = 0;
            if (v32)
            {
              do
              {
                v33 = __ldaxr(v32);
                v34 = v33 - 1;
              }
              while (__stlxr(v34, v32));
              if (!v34)
              {
                atomic_store(1u, v32);
                WTF::fastFree((unint64_t)v32, a2, a3, a4, a5, a6, a7, a8);
              }
            }
            ++v28;
            ++v30;
          }
          while (v30 != v29);
        }
        if (v25)
        {
          if (*(_QWORD *)a1 == v25)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
        }
      }
    }
    v23 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    v12 = *(_QWORD *)a1 + 8 * v11;
    v13 = (unsigned int **)(*(_QWORD *)a1 + 8 * a3);
    do
    {
      v14 = *v13;
      *v13 = 0;
      if (v14)
      {
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          atomic_store(1u, v14);
          WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      ++v13;
    }
    while (v13 != (unsigned int **)v12);
    *(_DWORD *)(a1 + 12) = a3;
    v23 = a3;
  }
  v35 = *(unsigned int ***)a1;
  if (v23)
  {
    v36 = v23;
    do
    {
      v37 = (unsigned int *)*a2;
      if (*a2)
      {
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 + 1, v37));
      }
      v39 = *v35;
      *v35 = v37;
      if (v39)
      {
        do
        {
          v40 = __ldaxr(v39);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, v39));
        if (!v41)
        {
          atomic_store(1u, v39);
          WTF::fastFree((unint64_t)v39, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      ++v35;
    }
    while (v36-- > 1);
    v35 = *(unsigned int ***)a1;
    v43 = *(unsigned int *)(a1 + 12);
  }
  else
  {
    v43 = 0;
  }
  if (v43 != a3)
  {
    v44 = &v35[v43];
    do
    {
      v45 = (unsigned int *)*a2;
      if (*a2)
      {
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 + 1, v45));
      }
      *v44++ = v45;
    }
    while (v44 != &v35[a3]);
  }
  *(_DWORD *)(a1 + 12) = a3;
}

uint64_t WTF::IndexMap<JSC::B3::Air::BasicBlock *,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::IndexMap<>(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = a2;
  if (a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x19809622CLL);
    }
    v3 = 40 * a2;
    v4 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(a1 + 8) = (v3 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)a1 = v4;
    v5 = *(_DWORD *)(a1 + 12);
    if (v5)
    {
      v6 = v4;
      do
      {
        *(_QWORD *)v6 = v6 + 16;
        *(_DWORD *)(v6 + 8) = 2;
        *(_DWORD *)(v6 + 12) = 0;
        v6 += 40;
      }
      while (v6 != v4 + 40 * v5);
    }
  }
  return a1;
}

int8x16_t *WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_8>(JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_8 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  return JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_8>(JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_8 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(***(int8x16_t ****)(a1 + 16), a2, a3, a5);
}

int8x16_t *JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_8>(JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_8 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(int8x16_t *result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  int v4;
  int v5;
  unsigned int v6;
  unint64_t v8;
  char v9;
  int8x16_t *v10;
  int v11;
  unsigned int v12;
  char v14;
  int v15;
  char v17;
  uint64_t v18;
  unsigned int v19;
  char v21;

  switch(*(_BYTE *)(a2 + 8))
  {
    case 1:
      v11 = *(_DWORD *)(a2 + 16);
      v12 = v11 - 1;
      if (v11 > 0xFFFFFFDF || v12 <= 0x1F)
      {
        if (v11 <= 0)
          v8 = (31 - v11);
        else
          v8 = v12;
        v14 = v8 & 0x7F;
        if ((v8 & 0x7F) >= 0x40)
          goto LABEL_62;
        v8 = 1 << v14;
        if ((result[14].i64[1] & (1 << v14)) != 0)
        {
          if (a3 > 0xB || ((1 << a3) & 0xB30) == 0)
          {
            result[9].i64[1] |= v8;
            if (a4 >= 4 && (v14 & 0x60) == 0x20)
              result[10].i64[0] |= v8;
          }
          if (a3 - 4 <= 6)
          {
            result[10].i64[1] |= v8;
            if (a4 >= 4 && (v14 & 0x60) == 0x20)
              goto LABEL_65;
          }
        }
      }
      return result;
    case 6:
    case 7:
    case 8:
      v4 = *(_DWORD *)(a2 + 16);
      goto LABEL_49;
    case 0xB:
      v15 = *(_DWORD *)(a2 + 16);
      if (v15 <= 0xFFFFFFDF && (v15 - 1) > 0x1F)
        goto LABEL_48;
      if (v15 <= 0)
        v17 = 31 - v15;
      else
        v17 = v15 - 1;
      v8 = v17 & 0x7F;
      if (v8 >= 0x40)
        goto LABEL_62;
      v18 = 1 << v8;
      if ((result[14].i64[1] & (1 << v8)) != 0)
      {
        result[9].i64[1] |= v18;
        if (a3 == 11 && a4 >= 4 && (v8 & 0x60) == 0x20)
          result[10].i64[0] |= v18;
      }
LABEL_48:
      v4 = *(_DWORD *)(a2 + 20);
LABEL_49:
      v19 = v4 - 1;
      if (v4 <= 0xFFFFFFDF && v19 > 0x1F)
        return result;
      if (v4 <= 0)
        v8 = (31 - v4);
      else
        v8 = v19;
      v21 = v8 & 0x7F;
      if ((v8 & 0x7F) >= 0x40)
      {
LABEL_62:
        __break(1u);
      }
      else
      {
        v8 = 1 << v21;
        if ((result[14].i64[1] & (1 << v21)) == 0)
          return result;
        result[9].i64[1] |= v8;
        if (a3 != 11 || a4 < 4 || (v21 & 0x60) != 0x20)
          return result;
      }
      v10 = result + 10;
LABEL_16:
      v10->i64[0] |= v8;
      return result;
    case 0xC:
    case 0xD:
      v5 = *(_DWORD *)(a2 + 16);
      v6 = v5 - 1;
      if (v5 <= 0xFFFFFFDF && v6 > 0x1F)
        return result;
      if (v5 <= 0)
        v8 = (31 - v5);
      else
        v8 = v6;
      v9 = v8 & 0x7F;
      if ((v8 & 0x7F) >= 0x40)
        goto LABEL_62;
      v8 = 1 << v9;
      if ((result[14].i64[1] & (1 << v9)) == 0)
        return result;
      result[9].i64[1] |= v8;
      if (a3 == 11 && a4 >= 4 && (v9 & 0x60) == 0x20)
      {
        result[10] = vorrq_s8(result[10], (int8x16_t)vdupq_n_s64(v8));
LABEL_65:
        v10 = result + 11;
      }
      else
      {
        v10 = (int8x16_t *)((char *)result + 168);
      }
      goto LABEL_16;
    default:
      return result;
  }
}

JSC::B3::Air::Inst *WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_9>::implFunction(JSC::B3::Air::Inst *result, uint64_t a2, unsigned int a3)
{
  JSC::B3::Air::Inst **v4;
  JSC::B3::Air::Inst *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(a2 + 8) == 1)
  {
    v4 = (JSC::B3::Air::Inst **)*((_QWORD *)result + 2);
    v5 = v4[1];
    v6 = *(_DWORD *)(a2 + 16);
    if (a3 > 0xB || ((1 << a3) & 0xFF5) == 0)
    {
      result = *v4;
      if (*((_DWORD *)*v4 + 3))
      {
        result = (JSC::B3::Air::Inst *)JSC::B3::Air::Inst::admitsStack(result, (unint64_t)(a2 - *(_QWORD *)result) >> 5);
        if ((_DWORD)result)
        {
          v7 = -v6;
          if (v6 > 0)
            v7 = v6;
          v8 = 32;
          if (v6 > 0)
            v8 = 16;
          v9 = *(_QWORD *)((char *)v5 + v8);
          if ((~*(unsigned __int8 *)(v9 + 16 * v7 + 8) & 0x7F) == 0)
          {
            *(_QWORD *)a2 = *(_QWORD *)(*(_QWORD *)(v9 + 16 * v7) + 16);
            *(_WORD *)(a2 + 8) = 519;
            *(_QWORD *)(a2 + 12) = 0x1E00000001;
            *(_DWORD *)(a2 + 20) = 0;
            *(_BYTE *)(a2 + 24) = 0;
          }
        }
      }
      else
      {
        __break(0xC471u);
      }
    }
  }
  return result;
}

void WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_10>::implFunction(uint64_t a1, uint64_t a2)
{
  JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_10::operator()(*(JSC::B3::Air::Inst ***)(a1 + 16), a2);
}

void JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_10::operator()(JSC::B3::Air::Inst **a1, uint64_t a2)
{
  unsigned int v3;
  JSC::B3::Air::Inst *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BYTE *v8;
  char v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  int v24;
  __int16 v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  char v38;
  int v39;
  char v40;
  __int16 v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  char v64;
  int v65;
  char v66;
  __int16 v67;
  uint64_t v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  _DWORD *v76;
  _BYTE *v77;
  uint64_t *v78;
  uint64_t v79;
  char v80;
  int v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  int v85;
  char v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  int v90;
  char v91;

  if (*(_BYTE *)(a2 + 8) == 1)
  {
    v3 = *(_DWORD *)(a2 + 16);
    if (v3 <= 0xFFFFFFDF && v3 - 1 >= 0x20)
    {
      if (!*((_DWORD *)*a1 + 3))
      {
        __break(0xC471u);
        goto LABEL_69;
      }
      v4 = a1[1];
      if (!JSC::B3::Air::Inst::admitsStack(*a1, (unint64_t)(a2 - *(_QWORD *)*a1) >> 5))
        return;
      v5 = *(unsigned int *)(a2 + 16);
      if ((int)v5 <= 0)
        v6 = 32;
      else
        v6 = 16;
      if ((int)v5 <= 0)
        v7 = -(int)v5;
      else
        v7 = *(_DWORD *)(a2 + 16);
      v8 = (_BYTE *)(*(_QWORD *)((char *)v4 + v6) + 16 * v7);
      v9 = v8[8];
      if ((v9 & 0x7F) == 0x7F)
        goto LABEL_62;
      v81 = *(_DWORD *)(a2 + 16);
      v80 = v9;
      v10 = *(_QWORD *)(*(_QWORD *)v8 + 16);
      v79 = v10;
      if ((_BYTE)word_1ECF4C286)
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [7],JSC::B3::Air::Tmp,char [3],JSC::Reg,char [10],long,char [2]>(*((_QWORD *)v4 + 1), (JSC::B3::Air::Tmp *)&v81, (JSC::Reg *)&v80, &v79);
      if ((int)v5 >= 1)
      {
        v77 = v8;
        v11 = v7;
        v12 = v6;
        v13 = (_DWORD *)*((_QWORD *)v4 + 1);
        v14 = *(unsigned int *)(*(_QWORD *)v4 + 184);
        v90 = 0;
        v91 = 0;
        v88 = 519;
        v89 = 0x1E00000001;
        v87 = v10;
        if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v87, 90, 259)
          || (v87 = v10 + v14,
              v88 = 519,
              v89 = 0x2000000001,
              v90 = 0,
              v91 = 0,
              JSC::B3::Air::Arg::isValidForm((unsigned int *)&v87, 90, 259)))
        {
          v20 = v87;
          v21 = v88;
          v22 = HIBYTE(v88);
          v24 = v89;
          v23 = BYTE4(v89);
          v25 = v90;
          v6 = v12;
        }
        else
        {
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v13, v10, 30, v15, v16, v17, v18, v19);
          v86 = 0;
          v83 = 523;
          v85 = 31;
          v84 = 0x1E00000001;
          v82 = 0;
          v6 = v12;
          if (!JSC::B3::Air::Arg::isValidForm((unsigned int *)&v82, 90, 259))
          {
            v52 = v13[50];
            v7 = v11;
            if (v52 + 4 > v13[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 14), v47, v48, v15, v16, v17, v18, v19);
              v52 = v13[50];
            }
            v25 = 0;
            v20 = 0;
            *(_DWORD *)(*((_QWORD *)v13 + 7) + v52) = -1961032738;
            v13[50] += 4;
            v21 = 7;
            v22 = 2;
            v24 = 1;
            v23 = 31;
            goto LABEL_20;
          }
          v20 = v82;
          v21 = v83;
          v22 = HIBYTE(v83);
          v24 = v84;
          v23 = BYTE4(v84);
          v25 = v85;
        }
        v7 = v11;
LABEL_20:
        v8 = v77;
        v26 = v9 & 0x7F;
        v27 = *((_QWORD *)v4 + 1);
        if (v21 == 7)
        {
          JSC::MacroAssemblerARM64::store64(v27, v9 & 0x7F, (v23 - 1) | (unint64_t)(v20 << 32), v15, v16, v17, v18, v19);
        }
        else
        {
          HIDWORD(v45) = v24;
          LODWORD(v45) = v24 - 2;
          v44 = v45 >> 1;
          if (v44 > 7)
            v46 = 0;
          else
            v46 = qword_1991505B0[v44];
          JSC::MacroAssemblerARM64::store64(v27, v9 & 0x7F, v46 | ((v25 << 8) - 256) & 0xFF00 | (v23 - 1), v20 | (v22 << 32), v16, v17, v18, v19);
        }
        goto LABEL_60;
      }
      v28 = *(_QWORD *)v4;
      if (HIBYTE(dword_1ECF4C7B0))
      {
        if (HIBYTE(word_1ECF4C79E))
        {
          v76 = (_DWORD *)*((_QWORD *)v4 + 1);
          v78 = (uint64_t *)((char *)v4 + 8);
          v29 = *(_DWORD *)(v28 + 184);
LABEL_25:
          v90 = 0;
          v91 = 0;
          v88 = 519;
          v89 = 0x1E00000001;
          v87 = v10;
          if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v87, 113, 260)
            || (v87 = v10 + v29,
                v88 = 519,
                v89 = 0x2000000001,
                v90 = 0,
                v91 = 0,
                JSC::B3::Air::Arg::isValidForm((unsigned int *)&v87, 113, 260)))
          {
            v35 = v87;
            v36 = v88;
            v37 = HIBYTE(v88);
            v39 = v89;
            v38 = BYTE4(v89);
            v26 = v9 & 0x7F;
            v40 = v9 & 0x7F;
            v41 = v90;
          }
          else
          {
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v76, v10, 30, v30, v31, v32, v33, v34);
            v86 = 0;
            v83 = 523;
            v85 = 31;
            v84 = 0x1E00000001;
            v82 = 0;
            if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v82, 113, 260))
            {
              v35 = v82;
              v36 = v83;
              v37 = HIBYTE(v83);
              v39 = v84;
              v38 = BYTE4(v84);
              v26 = v9 & 0x7F;
              v40 = v9 & 0x7F;
              v41 = v85;
            }
            else
            {
              v55 = v76[50];
              v26 = v9 & 0x7F;
              v40 = v9 & 0x7F;
              if (v55 + 4 > v76[48])
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v53, v54, v30, v31, v32, v33, v34);
                v55 = v76[50];
                v40 = v80 & 0x7F;
              }
              v41 = 0;
              v35 = 0;
              *(_DWORD *)(*((_QWORD *)v76 + 7) + v55) = -1961032738;
              v76[50] += 4;
              v36 = 7;
              v37 = 2;
              v39 = 1;
              v38 = 31;
            }
          }
          v42 = *v78;
          v43 = v40 - 32;
          if (v36 == 7)
          {
            JSC::MacroAssemblerARM64::storeVector(v42, v43, (v38 - 1) | (unint64_t)(v35 << 32), v30, v31, v32, v33, v34);
          }
          else
          {
            HIDWORD(v50) = v39;
            LODWORD(v50) = v39 - 2;
            v49 = v50 >> 1;
            if (v49 > 7)
              v51 = 0;
            else
              v51 = qword_1991505B0[v49];
            JSC::MacroAssemblerARM64::storeVector(v42, v43, v51 | ((v41 << 8) - 256) & 0xFF00 | (v38 - 1), v35 | (v37 << 32), v31, v32, v33, v34);
          }
          goto LABEL_60;
        }
        v76 = (_DWORD *)*((_QWORD *)v4 + 1);
        v78 = (uint64_t *)((char *)v4 + 8);
        v29 = *(_DWORD *)(v28 + 184);
        if (*(_BYTE *)(*(_QWORD *)(v28 + 8) + 212))
          goto LABEL_25;
      }
      else
      {
        v76 = (_DWORD *)*((_QWORD *)v4 + 1);
        v78 = (uint64_t *)((char *)v4 + 8);
        v29 = *(_DWORD *)(v28 + 184);
      }
      v90 = 0;
      v91 = 0;
      v88 = 519;
      v89 = 0x1E00000001;
      v87 = v10;
      if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v87, 108, 259)
        || (v87 = v10 + v29,
            v88 = 519,
            v89 = 0x2000000001,
            v90 = 0,
            v91 = 0,
            JSC::B3::Air::Arg::isValidForm((unsigned int *)&v87, 108, 259)))
      {
        v61 = v87;
        v62 = v88;
        v63 = HIBYTE(v88);
        v65 = v89;
        v64 = BYTE4(v89);
        v26 = v9 & 0x7F;
        v66 = v9 & 0x7F;
        v67 = v90;
      }
      else
      {
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v76, v10, 30, v56, v57, v58, v59, v60);
        v86 = 0;
        v83 = 523;
        v85 = 31;
        v84 = 0x1E00000001;
        v82 = 0;
        if (JSC::B3::Air::Arg::isValidForm((unsigned int *)&v82, 108, 259))
        {
          v61 = v82;
          v62 = v83;
          v63 = HIBYTE(v83);
          v65 = v84;
          v64 = BYTE4(v84);
          v26 = v9 & 0x7F;
          v66 = v9 & 0x7F;
          v67 = v85;
        }
        else
        {
          v75 = v76[50];
          v26 = v9 & 0x7F;
          v66 = v9 & 0x7F;
          if (v75 + 4 > v76[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v73, v74, v56, v57, v58, v59, v60);
            v75 = v76[50];
            v66 = v80 & 0x7F;
          }
          v67 = 0;
          v61 = 0;
          *(_DWORD *)(*((_QWORD *)v76 + 7) + v75) = -1961032738;
          v76[50] += 4;
          v62 = 7;
          v63 = 2;
          v65 = 1;
          v64 = 31;
        }
      }
      v68 = *v78;
      v69 = v66 - 32;
      if (v62 == 7)
      {
        JSC::MacroAssemblerARM64::storeDouble(v68, v69, (v64 - 1) | (unint64_t)(v61 << 32), v56, v57, v58, v59, v60);
      }
      else
      {
        HIDWORD(v71) = v65;
        LODWORD(v71) = v65 - 2;
        v70 = v71 >> 1;
        if (v70 > 7)
          v72 = 0;
        else
          v72 = qword_1991505B0[v70];
        JSC::MacroAssemblerARM64::storeDouble(v68, v69, v72 | ((v67 << 8) - 256) & 0xFF00 | (v64 - 1), v61 | (v63 << 32), v57, v58, v59, v60);
      }
LABEL_60:
      *(_DWORD *)(**((_QWORD **)v4 + 13) + 4 * v26) = 0;
      if ((v9 & 0x40) == 0)
      {
        *(_QWORD *)((char *)v4 + ((v5 >> 28) & 8) + 80) |= 1 << v9;
        *(_BYTE *)(*(_QWORD *)((char *)v4 + v6) + 16 * v7 + 8) = -1;
LABEL_62:
        *(_QWORD *)a2 = *(_QWORD *)(*(_QWORD *)v8 + 16);
        *(_WORD *)(a2 + 8) = 519;
        *(_QWORD *)(a2 + 12) = 0x1E00000001;
        *(_DWORD *)(a2 + 20) = 0;
        *(_BYTE *)(a2 + 24) = 0;
        return;
      }
LABEL_69:
      __break(1u);
    }
  }
}

double WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)::$_11>::implFunction(uint64_t a1, int *a2, unsigned int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  _DWORD *v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD *v26;
  _DWORD *v27;
  int v28;
  _DWORD *v29;
  unsigned int v30;
  _QWORD *v31;

  if (*((_BYTE *)a2 + 8) == 7)
  {
    v4 = *(_QWORD **)(a1 + 16);
    v5 = v4[1];
    if ((a3 > 0xB || ((1 << a3) & 0xB30) == 0)
      && (JSC::B3::Air::Arg::isValidForm((unsigned int *)a2, *(__int16 *)(*v4 + 120), 0) & 1) == 0)
    {
      if (*((_BYTE *)a2 + 8) == 9)
        v12 = a2 + 3;
      else
        v12 = a2;
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(v5 + 8), *v12, 30, v6, v7, v8, v9, v10);
      v20 = *(_QWORD *)(v5 + 8);
      v21 = *((unsigned __int8 *)a2 + 16);
      if (v21 == 32)
        v22 = -1958845442;
      else
        v22 = ((((_BYTE)v21 - 1) & 0x1F) << 16) | 0x8B0003DE;
      v25 = *(_DWORD *)(v20 + 200);
      v23 = (_DWORD *)(v20 + 200);
      v24 = v25;
      v26 = v23 - 36;
      if (v25 + 4 > *(v23 - 2))
      {
        v30 = v22;
        v31 = v23 - 36;
        v29 = v23;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v23 - 36), v13, v14, v15, v16, v17, v18, v19);
        v22 = v30;
        v23 = v29;
        v26 = v31;
        v24 = *v29;
      }
      *(_DWORD *)(*v26 + v24) = v22;
      *v23 += 4;
      *(_QWORD *)a2 = 0;
      *((_WORD *)a2 + 4) = 519;
      *(_QWORD *)&result = 0x1F00000001;
      *(_QWORD *)(a2 + 3) = 0x1F00000001;
      a2[5] = 0;
      *((_BYTE *)a2 + 24) = 0;
      v27 = (_DWORD *)v4[2];
      v28 = (*v27)++;
      if (v28 >= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198096E44);
      }
    }
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::StackAllocatorBase::StackAllocatorBase(uint64_t this, JSC::B3::Air::Code *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = this;
  v3 = *((unsigned int *)a2 + 19);
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 20) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 30))
  {
    v4 = WTF::fastMalloc((WTF *)(4 * v3));
    *(_DWORD *)(v2 + 16) = v3;
    *(_QWORD *)(v2 + 8) = v4;
    if (*(_DWORD *)(v2 + 20))
    {
      v5 = 0;
      do
      {
        *(_DWORD *)(v4 + 4 * v5) = v5;
        ++v5;
      }
      while (v5 < *(unsigned int *)(v2 + 20));
    }
    return v2;
  }
  __break(0xC471u);
  return this;
}

uint64_t WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>::operator[](uint64_t result, unint64_t *a2, int a3)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v3 = *((unsigned __int16 *)a2 + 6);
  v4 = (v3 * a3);
  v5 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    v7 = __clz(__rbit64(v5 >> (v3 * a3))) + v4;
    if (v7 >= 0x3F)
      LODWORD(v7) = 63;
  }
  else
  {
    v6 = 2 * v5;
    v7 = *(_QWORD *)(2 * v5);
    v8 = v4 >> 6;
    if (v4 >> 6 < (v7 + 63) >> 6)
    {
      v9 = *(_QWORD *)(v6 + 8 * v8 + 8);
      if (!v9
        || (v10 = __clz(__rbit64(v9 >> (v3 * a3))) + ((v3 * a3) & 0x3FLL), v10 >= 0x40))
      {
        v11 = (v7 + 63) >> 6;
        if (v8 + 1 == v11)
          goto LABEL_6;
        v12 = v11 - 1;
        v13 = v6 + 16;
        while (1)
        {
          v14 = *(_QWORD *)(v13 + 8 * v8);
          if (v14)
          {
            v10 = __clz(__rbit64(v14));
            if (v10 <= 0x3F)
              break;
          }
          if (v12 == ++v8)
            goto LABEL_6;
        }
        LODWORD(v8) = v8 + 1;
      }
      LODWORD(v7) = v10 + ((_DWORD)v8 << 6);
    }
  }
LABEL_6:
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = v4;
  *(_DWORD *)(result + 12) = v7;
  *(_DWORD *)(result + 16) = v3 * (unsigned __int16)(a3 + 1);
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::addEdge(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (a2 != a3)
  {
    v3 = *(_QWORD *)(result + 24);
    result += 24;
    v4 = *(unsigned __int16 *)(result + 12);
    v5 = a3 + *(unsigned __int16 *)(result + 12) * (unint64_t)a2;
    v6 = 2 * v3 + 8;
    if (v3 >= 0)
      v7 = v6;
    else
      v7 = result;
    v8 = (v5 >> 3) & 0x3FFFFFF8;
    v9 = *(_QWORD *)(v7 + v8);
    v10 = 1 << v5;
    *(_QWORD *)(v7 + v8) = v10 | v9;
    v11 = *(_DWORD *)(result + 8);
    if ((v10 & v9) == 0)
      ++v11;
    v12 = a2 + v4 * (unint64_t)a3;
    if (*(uint64_t *)result >= 0)
      v13 = 2 * *(_QWORD *)result + 8;
    else
      v13 = result;
    v14 = (v12 >> 3) & 0x3FFFFFF8;
    v15 = 1 << v12;
    v16 = *(_QWORD *)(v13 + v14);
    *(_QWORD *)(v13 + v14) = v16 | v15;
    if ((v16 & v15) != 0)
      v17 = v11;
    else
      v17 = v11 + 1;
    *(_DWORD *)(result + 8) = v17;
  }
  return result;
}

uint64_t ***WTF::InterferenceBitVector<unsigned short>::Iterable::iterator::operator++(uint64_t ***result)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = *((_DWORD *)result + 2);
  v2 = (v1 + 1);
  v3 = ***result;
  if ((v3 & 0x8000000000000000) != 0)
  {
    v5 = __clz(__rbit64(v3 >> (v1 + 1))) + v2;
    if (v5 >= 0x3F)
      LODWORD(v5) = 63;
  }
  else
  {
    v4 = 2 * v3;
    v5 = *(_QWORD *)(2 * v3);
    v6 = v5 + 63;
    v7 = v2 >> 6;
    if (v2 >> 6 < (v5 + 63) >> 6)
    {
      v8 = *(_QWORD *)(v4 + 8 * v7 + 8);
      if (!v8 || (v9 = __clz(__rbit64(v8 >> v2)) + (v2 & 0x3F), v9 >= 0x40))
      {
        if (v7 + 1 == v6 >> 6)
          goto LABEL_6;
        v10 = v4 + 16;
        while (1)
        {
          v11 = *(_QWORD *)(v10 + 8 * v7);
          if (v11)
          {
            v9 = __clz(__rbit64(v11));
            if (v9 <= 0x3F)
              break;
          }
          if ((v6 >> 6) - 1 == ++v7)
            goto LABEL_6;
        }
        LODWORD(v7) = v7 + 1;
      }
      LODWORD(v5) = v9 + ((_DWORD)v7 << 6);
    }
  }
LABEL_6:
  *((_DWORD *)result + 2) = v5;
  return result;
}

uint64_t WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 29))
  {
    v5 = (void *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    memcpy(v5, *(const void **)a2, 8 * *(unsigned int *)(a2 + 12));
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Air::Liveness<JSC::B3::Air::StackSlotLivenessAdapter>::Liveness(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t casual;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  unsigned int v48;
  int *v49;
  uint64_t v50;
  int *v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  int *v67;
  uint64_t v68;
  int v69;
  int v70;
  int *v71;
  unint64_t i;
  int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  int **v79;
  unint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int *v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int *v124;
  uint64_t v125;
  uint64_t v126;
  int *v127;
  uint64_t v128;
  int *v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int *v140;
  unsigned int v141;
  uint64_t v142;
  unsigned int v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  int *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int **v151;
  unsigned int **v152;
  _DWORD *v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  int *v158;
  uint64_t v159;
  unint64_t v160;
  int *v161;
  uint64_t v162;
  int *v163;
  WTF *v164;
  WTF *v165;
  BOOL v166;
  WTF *v167;
  int v168;
  int v169;
  int v170;
  _QWORD *v171;
  int v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  WTF *v177;
  WTF *v178;
  uint64_t v181;
  unsigned int v182;
  unint64_t *v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  int *v190;
  uint64_t v191;
  int v192;
  unsigned int *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t StatusReg;
  _DWORD *__src;
  WTF *__srca;
  uint64_t v212;
  _QWORD *v213;
  int v214;
  char v215;
  _QWORD *v216;
  uint64_t *v217;
  _QWORD v218[4];
  double v219;
  WTF *v220;
  uint64_t v221;
  _QWORD v222[2];
  _QWORD v223[3];
  uint64_t v224;
  _QWORD v225[2];

  v3 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)a1 = a2;
  v4 = *(unsigned int *)(a2 + 108);
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1980980F4);
    }
    v6 = (void *)WTF::fastMalloc((WTF *)(16 * v4));
    *(_DWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 8) = v6;
    v7 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v7)
      bzero(v6, 16 * v7);
  }
  v8 = *(unsigned int *)(*(_QWORD *)a1 + 76);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 24) = v3;
  v217 = (uint64_t *)(a1 + 32);
  *(_OWORD *)(a1 + 48) = 0u;
  if ((_DWORD)v8)
  {
    if (v8 >> 30)
    {
      __break(0xC471u);
LABEL_262:
      JUMPOUT(0x198097EFCLL);
    }
    v9 = WTF::fastMalloc((WTF *)(4 * v8));
    *(_DWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 32) = v9;
  }
  *(_DWORD *)(a1 + 44) = v8;
  WTF::IndexMap<JSC::B3::BasicBlock *,WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::IndexMap<>(a1 + 64, *(unsigned int *)(*(_QWORD *)v3 + 108));
  v216 = (_QWORD *)(a1 + 80);
  WTF::IndexMap<JSC::B3::BasicBlock *,WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::IndexMap<>(a1 + 80, *(unsigned int *)(*(_QWORD *)v3 + 108));
  v218[0] = "Air";
  v218[1] = 4;
  v218[2] = "Liveness";
  v218[3] = 9;
  v219 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v187 = mach_absolute_time();
    v189 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v189 != -1)
    {
      v220 = (WTF *)v225;
      v223[0] = &v220;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v223, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v188) = dword_1ECF4400C;
    v219 = (double)(v187 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v188 * 1000000000.0);
  }
  v17 = *(_QWORD **)a1;
  v213 = v5;
  v212 = *(unsigned int *)(*(_QWORD *)a1 + 108);
  if ((_DWORD)v212)
  {
    v18 = 0;
    while (!*(_QWORD *)(v17[12] + 8 * v18))
    {
      if (v212 == ++v18)
        goto LABEL_68;
    }
    if ((_DWORD)v212 != (_DWORD)v18)
    {
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      LODWORD(v19) = v212;
      __src = v17;
      while (1)
      {
        if (v19 <= v18)
        {
          __break(0xC471u);
          JUMPOUT(0x1980980CCLL);
        }
        v214 = v18;
        v20 = *(unsigned int **)(v17[12] + 8 * v18);
        v21 = *v5 + 16 * *v20;
        v22 = v20[5] + 1;
        v23 = *(unsigned int *)(v21 + 12);
        if (v23 < v22)
          break;
        WTF::VectorTypeOperations<JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::Actions>::destruct((_QWORD *)(*(_QWORD *)v21 + (v22 << 6)), (_QWORD *)(*(_QWORD *)v21 + (v23 << 6)), v11, v12, v13, v14, v15, v16);
LABEL_40:
        *(_DWORD *)(v21 + 12) = v22;
        v40 = v20[5];
        v41 = v40 - 1;
        v224 = v40 - 1;
        if ((_DWORD)v40)
        {
          do
          {
            if (v20[5] <= v41)
            {
              __break(0xC471u);
              JUMPOUT(0x1980980B4);
            }
            v42 = *((_QWORD *)v20 + 1) + ((unint64_t)v41 << 7);
            v223[0] = a1;
            v223[1] = v21;
            v223[2] = &v224;
            v225[0] = v223;
            if ((*(__int16 *)(v42 + 120) - 446) <= 5)
            {
              v220 = (WTF *)WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::StackSlot *,JSC::B3::Air::LivenessAdapter<JSC::B3::Air::StackSlotLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::StackSlot *&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::LivenessAdapter<JSC::B3::Air::StackSlotLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::StackSlot *&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
              v221 = (uint64_t)&v220;
              v222[0] = v225;
              JSC::B3::Air::Inst::forEachArgCustom(v42, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::StackSlot *,JSC::B3::Air::LivenessAdapter<JSC::B3::Air::StackSlotLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::StackSlot *&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::LivenessAdapter<JSC::B3::Air::StackSlotLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::StackSlot *&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction, (uint64_t)&v220);
            }
            else
            {
              v43 = *(unsigned int *)(v42 + 12);
              if ((_DWORD)v43)
              {
                v44 = 0;
                v45 = 0;
                v46 = (char *)&JSC::B3::Air::g_formTable
                    + 21 * *(__int16 *)(v42 + 120)
                    + ((unint64_t)((v43 - 1) * v43) >> 1);
                v47 = 32 * v43;
                do
                {
                  if (v45 >= *(unsigned int *)(v42 + 12))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1980980ACLL);
                  }
                  v48 = v46[v45];
                  if ((v48 >> 5) - 1 >= 5)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198098090);
                  }
                  v49 = (int *)(*(_QWORD *)v42 + v44);
                  if (*((_BYTE *)v49 + 8) == 9)
                  {
                    v50 = *(_QWORD *)v49;
                    JSC::B3::Air::LivenessAdapter<JSC::B3::Air::StackSlotLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::StackSlot *&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()((int *)v223, *(_DWORD *)(*(_QWORD *)v49 + 8), v48 & 0xF);
                    if (*((_BYTE *)v49 + 8) == 9)
                      v51 = v49 + 3;
                    else
                      v51 = v49;
                    v52 = *v51;
                    *((_QWORD *)v49 + 2) = 0;
                    *((_BYTE *)v49 + 24) = 0;
                    *(_QWORD *)v49 = v50;
                    v5 = v213;
                    *((_BYTE *)v49 + 8) = 9;
                    *((_BYTE *)v49 + 9) = 2;
                    v49[3] = v52;
                  }
                  ++v45;
                  v44 += 32;
                }
                while (v47 != v44);
              }
            }
            v53 = v224;
            v41 = --v224;
          }
          while (v53);
        }
        v18 = (v214 + 1);
        v17 = __src;
        v19 = __src[27];
        if (v19 > v18)
        {
          while (!*(_QWORD *)(*((_QWORD *)__src + 12) + 8 * v18))
          {
            if (v19 == ++v18)
            {
              LODWORD(v18) = __src[27];
              break;
            }
          }
        }
        if ((_DWORD)v212 == (_DWORD)v18)
          goto LABEL_68;
      }
      v24 = *(unsigned int *)(v21 + 8);
      v25 = *(_QWORD *)v21;
      if (v24 >= v22)
      {
LABEL_36:
        if (v25)
        {
          v36 = *(unsigned int *)(v21 + 12);
          if ((_DWORD)v36 != (_DWORD)v22)
          {
            v37 = v36 << 6;
            v38 = v22 << 6;
            do
            {
              v39 = (_QWORD *)(v25 + v37);
              *v39 = v25 + v37 + 16;
              v39[1] = 4;
              v39[4] = v25 + v37 + 48;
              v39[5] = 4;
              v38 -= 64;
              v25 += 64;
            }
            while (v37 != v38);
          }
        }
        goto LABEL_40;
      }
      v26 = v24 + (v24 >> 2);
      if (v26 >= 0x10)
        v27 = v26 + 1;
      else
        v27 = 16;
      if (v27 <= v22)
        v28 = v20[5] + 1;
      else
        v28 = v27;
      if (v28 >> 26)
      {
        __break(0xC471u);
        JUMPOUT(0x1980980D4);
      }
      v29 = *(_QWORD *)(StatusReg + 752);
      if (!v29)
        goto LABEL_231;
      v30 = ((v28 & 0x3FFFFFFFFLL) << 6) | 0xF;
      if (v30 <= 0x1AF)
      {
        v31 = 92 * v28 + 7;
      }
      else if (v30 >> 5 > 0x138
             || (v31 = *((unsigned int *)&bmalloc_common_primitive_heap_support + 4 * v28 + 626),
                 *(_DWORD *)(v29 + 8052) <= v31))
      {
LABEL_231:
        casual = bmalloc_allocate_casual(v28 << 6, 1);
        goto LABEL_33;
      }
      v32 = v29 + 8 * v31;
      v33 = v32 + 8064;
      *(_BYTE *)(v32 + 8064) = 1;
      v34 = *(unsigned int *)(v32 + 8080);
      if ((_DWORD)v34)
      {
        *(_DWORD *)(v33 + 16) = v34 - *(_DWORD *)(v33 + 20);
        casual = *(_QWORD *)(v33 + 8) - v34;
      }
      else
      {
        v54 = *(_QWORD *)(v33 + 40);
        v55 = *(_QWORD *)(v33 + 24);
        if (!v54)
        {
          if (*(_BYTE *)(v33 + 5) == 6)
          {
            v181 = *(unsigned int *)(v33 + 32);
            v182 = *(_DWORD *)(v33 + 36);
            if (v181 < v182)
            {
              *(_QWORD *)(v33 + 8 * v181 + 56) = 0;
              v183 = (unint64_t *)(v29 + 8128 + 8 * v31 + 8 * v181);
              v184 = v182 - 1 - v181;
              while (v184)
              {
                v55 += 1024;
                v186 = *v183++;
                v185 = v186;
                LODWORD(v181) = v181 + 1;
                --v184;
                if (v186)
                {
                  v54 = __rbit64(v185);
                  *(_DWORD *)(v33 + 32) = v181;
                  *(_QWORD *)(v33 + 24) = v55;
                  goto LABEL_64;
                }
              }
              *(_DWORD *)(v33 + 32) = v182;
            }
          }
          *(_BYTE *)v33 = 0;
          goto LABEL_231;
        }
LABEL_64:
        v56 = __clz(v54);
        *(_QWORD *)(v33 + 40) = v54 & ~(0x8000000000000000 >> v56);
        casual = v55 + 16 * v56;
      }
      *(_BYTE *)v33 = 0;
LABEL_33:
      *(_DWORD *)(v21 + 8) = v28;
      *(_QWORD *)v21 = casual;
      if ((_DWORD)v23)
      {
        v200 = v23 << 6;
        v201 = v25;
        do
        {
          JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::Actions::Actions(casual, v201);
          JSC::B3::Air::LivenessAdapter<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)0,(JSC::B3::Air::Arg::Temperature)0>>::Actions::~Actions(v201, v202, v203, v204, v205, v206, v207, v208);
          casual += 64;
          v201 += 64;
          v200 -= 64;
        }
        while (v200);
        casual = *(_QWORD *)v21;
      }
      if (v25)
      {
        if (casual == v25)
        {
          *(_QWORD *)v21 = 0;
          *(_DWORD *)(v21 + 8) = 0;
        }
        WTF::fastFree(v25, v10, v11, v12, v13, v14, v15, v16);
        v25 = *(_QWORD *)v21;
      }
      else
      {
        v25 = casual;
      }
      goto LABEL_36;
    }
  }
LABEL_68:
  v57 = *(_DWORD *)(**(_QWORD **)(a1 + 24) + 108);
  if (v57)
  {
    do
    {
      --v57;
      v58 = **(_QWORD **)(a1 + 24);
      if (*(_DWORD *)(v58 + 108) <= v57)
      {
        __break(0xC471u);
        JUMPOUT(0x1980980C4);
      }
      v59 = *(unsigned int **)(*(_QWORD *)(v58 + 96) + 8 * v57);
      if (v59)
      {
        v60 = *v59;
        v61 = *v216 + 32 * v60;
        v62 = *(_QWORD *)(*v5 + 16 * v60) + ((unint64_t)v59[5] << 6);
        v63 = *(unsigned int *)(v62 + 12);
        if ((_DWORD)v63)
        {
          v190 = *(int **)v62;
          v191 = 4 * v63;
          do
          {
            v192 = *v190++;
            WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<(JSC::B3::Bank)1,(JSC::B3::Air::Arg::Temperature)0>>::compute(void)::{lambda#1}::operator()(v61, v192);
            v191 -= 4;
          }
          while (v191);
        }
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v64 = *(char **)v61;
        v65 = *(unsigned int *)(v61 + 12);
        if ((_DWORD)v65)
        {
          v66 = &v64[4 * v65];
          v67 = (int *)(v64 + 4);
          v68 = 4 * v65 - 4;
          while (v68)
          {
            v69 = *(v67 - 1);
            v70 = *v67++;
            v68 -= 4;
            if (v69 == v70)
            {
              v71 = v67 - 2;
              if (v68)
              {
                for (i = 0; i != v68; i += 4)
                {
                  v73 = v69;
                  v69 = v67[i / 4];
                  if (v73 != v69)
                  {
                    v71[1] = v69;
                    ++v71;
                  }
                }
              }
              v66 = (char *)(v71 + 1);
              break;
            }
          }
        }
        else
        {
          v66 = *(char **)v61;
        }
        *(_DWORD *)(v61 + 12) = (unint64_t)(v66 - v64) >> 2;
      }
    }
    while (v57);
    v74 = *(unsigned int *)(**(_QWORD **)(a1 + 24) + 108);
    v223[0] = 0x8000000000000000;
    if ((_DWORD)v74)
    {
      v75 = v74 - 1;
      v76 = 0x8000000000000000;
      while (1)
      {
        if (v76 < 0)
          v77 = 63;
        else
          v77 = *(_QWORD *)(2 * v76);
        v10 = (void *)(v75 + 1);
        if (v77 < v75 + 1)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v223, (unint64_t)v10, 0);
          v76 = v223[0];
        }
        v78 = v76 >= 0 ? (_QWORD *)(2 * v76 + 8) : v223;
        *(_QWORD *)((char *)v78 + ((v75 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v75;
        if (!v75)
          break;
        v76 = v223[0];
        --v75;
      }
    }
  }
  else
  {
    v223[0] = 0x8000000000000000;
  }
  v220 = (WTF *)v222;
  v79 = (int **)(a1 + 48);
  v221 = 4;
LABEL_99:
  v80 = *(unsigned int *)(**(_QWORD **)(a1 + 24) + 108);
  if ((_DWORD)v80)
  {
    v215 = 0;
    while (1)
    {
      --v80;
      v81 = **(_QWORD **)(a1 + 24);
      if (*(_DWORD *)(v81 + 108) <= v80)
      {
        __break(0xC471u);
        JUMPOUT(0x1980980BCLL);
      }
      v82 = *(unsigned int **)(*(_QWORD *)(v81 + 96) + 8 * v80);
      if (v82)
      {
        v83 = v223;
        if (v223[0] >= 0)
          v83 = (_QWORD *)(2 * v223[0] + 8);
        v84 = (v80 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v85 = *(_QWORD *)((char *)v83 + v84);
        *(_QWORD *)((char *)v83 + v84) = v85 & ~(1 << v80);
        if ((v85 & (1 << v80)) != 0)
        {
          *(_DWORD *)(a1 + 60) = 0;
          v86 = *(_QWORD *)(a1 + 80) + 32 * *v82;
          v87 = *(unsigned int *)(v86 + 12);
          if ((_DWORD)v87)
          {
            v88 = *(_DWORD **)v86;
            v89 = *v217;
            v90 = 4 * v87;
            do
            {
              v91 = *v88;
              v92 = *(unsigned int *)(v89 + 4 * v91);
              v93 = *(unsigned int *)(a1 + 60);
              if (v93 <= v92 || (*v79)[v92] != (_DWORD)v91)
              {
                LODWORD(v225[0]) = *v88;
                if ((_DWORD)v93 == *(_DWORD *)(a1 + 56))
                {
                  *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * *(unsigned int *)(a1 + 60)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 48, v93 + 1, (unint64_t)v225);
                  v89 = *(_QWORD *)(a1 + 32);
                }
                else
                {
                  (*v79)[v93] = v91;
                }
                ++*(_DWORD *)(a1 + 60);
                *(_DWORD *)(v89 + 4 * v91) = v93;
              }
              ++v88;
              v90 -= 4;
            }
            while (v90);
          }
          v94 = v82[5];
          if ((_DWORD)v94)
          {
            do
            {
              v95 = *v5;
              v96 = *(_QWORD *)(*v5 + 16 * *v82);
              v97 = v96 + ((unint64_t)v94 << 6);
              v98 = *(unsigned int *)(v97 + 44);
              if ((_DWORD)v98)
              {
                v107 = *(unsigned int **)(v97 + 32);
                v108 = *(_QWORD *)(a1 + 32);
                v109 = 4 * v98;
                v110 = *(_DWORD *)(a1 + 60);
                do
                {
                  v111 = *v107;
                  v112 = *(unsigned int *)(v108 + 4 * v111);
                  if (v110 > v112)
                  {
                    v113 = *v79;
                    if ((*v79)[v112] == (_DWORD)v111)
                    {
                      v114 = v113[v110 - 1];
                      v113[v112] = v114;
                      *(_DWORD *)(v108 + 4 * v114) = v112;
                      v110 = *(_DWORD *)(a1 + 60) - 1;
                      *(_DWORD *)(a1 + 60) = v110;
                    }
                  }
                  ++v107;
                  v109 -= 4;
                }
                while (v109);
                v96 = *(_QWORD *)(v95 + 16 * *v82);
              }
              v99 = v96 + ((unint64_t)--v94 << 6);
              v100 = *(unsigned int *)(v99 + 12);
              if ((_DWORD)v100)
              {
                v101 = *(_DWORD **)v99;
                v102 = *v217;
                v103 = 4 * v100;
                do
                {
                  v104 = *v101;
                  v105 = *(unsigned int *)(v102 + 4 * v104);
                  v106 = *(unsigned int *)(a1 + 60);
                  if (v106 <= v105 || (*v79)[v105] != (_DWORD)v104)
                  {
                    LODWORD(v225[0]) = *v101;
                    if ((_DWORD)v106 == *(_DWORD *)(a1 + 56))
                    {
                      *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * *(unsigned int *)(a1 + 60)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 48, v106 + 1, (unint64_t)v225);
                      v102 = *(_QWORD *)(a1 + 32);
                    }
                    else
                    {
                      (*v79)[v106] = v104;
                    }
                    ++*(_DWORD *)(a1 + 60);
                    *(_DWORD *)(v102 + 4 * v104) = v106;
                  }
                  ++v101;
                  v103 -= 4;
                }
                while (v103);
              }
            }
            while (v94);
          }
          v115 = *v82;
          v116 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * v115);
          v117 = *(unsigned int *)(v116 + 44);
          v118 = *(_DWORD *)(a1 + 60);
          if ((_DWORD)v117)
          {
            v193 = *(unsigned int **)(v116 + 32);
            v194 = *v217;
            v195 = 4 * v117;
            do
            {
              v196 = *v193;
              v197 = *(unsigned int *)(v194 + 4 * v196);
              if (v118 > v197)
              {
                v198 = *v79;
                if ((*v79)[v197] == (_DWORD)v196)
                {
                  v199 = v198[v118 - 1];
                  v198[v197] = v199;
                  *(_DWORD *)(v194 + 4 * v199) = v197;
                  v118 = *(_DWORD *)(a1 + 60) - 1;
                  *(_DWORD *)(a1 + 60) = v118;
                }
              }
              ++v193;
              v195 -= 4;
            }
            while (v195);
            v115 = *v82;
          }
          v119 = *(_QWORD *)(a1 + 64) + 32 * v115;
          v120 = *(unsigned int *)(v119 + 12);
          if ((_DWORD)v120 == v118)
          {
            *(_DWORD *)(a1 + 60) = 0;
            goto LABEL_106;
          }
          v121 = *(unsigned int **)v119;
          if ((_DWORD)v120)
          {
            v122 = *v217;
            v123 = 4 * v120;
            v124 = *(unsigned int **)v119;
            do
            {
              v125 = *v124;
              v126 = *(unsigned int *)(v122 + 4 * v125);
              if (v118 > v126)
              {
                v127 = *v79;
                if ((*v79)[v126] == (_DWORD)v125)
                {
                  v128 = v127[v118 - 1];
                  v127[v126] = v128;
                  *(_DWORD *)(v122 + 4 * v128) = v126;
                  v118 = *(_DWORD *)(a1 + 60) - 1;
                  *(_DWORD *)(a1 + 60) = v118;
                }
              }
              ++v124;
              v123 -= 4;
            }
            while (v123);
          }
          if (!v118)
          {
            v5 = v213;
            goto LABEL_106;
          }
          v129 = *v79;
          v130 = *(unsigned int *)(v119 + 12);
          v131 = v130 + v118;
          if (v131 <= *(unsigned int *)(v119 + 8))
          {
            v140 = v121;
            v5 = v213;
          }
          else
          {
            if (v131 < 5)
            {
              v132 = (void *)(v119 + 16);
              *(_QWORD *)v119 = v119 + 16;
              *(_DWORD *)(v119 + 8) = 4;
            }
            else
            {
              if (v131 >> 30)
              {
                __break(0xC471u);
                JUMPOUT(0x1980980E4);
              }
              v132 = (void *)WTF::fastMalloc((WTF *)(4 * v131));
              *(_DWORD *)(v119 + 8) = v131;
              *(_QWORD *)v119 = v132;
            }
            memcpy(v132, v121, 4 * v130);
            v140 = *(unsigned int **)v119;
            v5 = v213;
            if ((unsigned int *)(v119 + 16) != v121 && v121)
            {
              if (v140 == v121)
              {
                *(_QWORD *)v119 = 0;
                *(_DWORD *)(v119 + 8) = 0;
              }
              WTF::fastFree((unint64_t)v121, v133, v134, v135, v136, v137, v138, v139);
              v140 = *(unsigned int **)v119;
            }
          }
          v141 = *(_DWORD *)(v119 + 12);
          v142 = 4 * v118;
          do
          {
            v143 = *v129++;
            v140[v141] = v143;
            v141 = *(_DWORD *)(v119 + 12) + 1;
            *(_DWORD *)(v119 + 12) = v141;
            v142 -= 4;
          }
          while (v142);
          v144 = *(unsigned int *)(a1 + 60);
          v145 = 126 - 2 * __clz(v144);
          if ((_DWORD)v144)
            v146 = v145;
          else
            v146 = 0;
          std::__introsort<std::_ClassicAlgPolicy,WTF::IndexSparseSet<unsigned int,WTF::DefaultIndexSparseSetTraits<unsigned int>,WTF::UnsafeVectorOverflow>::sort(void)::{lambda(unsigned int const&,unsigned int const&)#1} &,unsigned int *,false>(*(unsigned int **)(a1 + 48), (char *)(*(_QWORD *)(a1 + 48) + 4 * v144), (uint64_t)v225, v146, 1);
          if (*(_DWORD *)(a1 + 60))
          {
            v147 = 0;
            v148 = *v79;
            v149 = *v217;
            do
            {
              *(_DWORD *)(v149 + 4 * v148[v147]) = v147;
              ++v147;
            }
            while (v147 < *(unsigned int *)(a1 + 60));
          }
          v150 = v82[21];
          if ((_DWORD)v150)
            break;
        }
      }
LABEL_106:
      if (!v80)
      {
        if ((v215 & 1) == 0)
          goto LABEL_211;
        goto LABEL_99;
      }
    }
    v151 = (unsigned int **)*((_QWORD *)v82 + 9);
    v152 = &v151[v150];
    while (1)
    {
      v153 = *v151;
      v154 = *v216 + 32 * **v151;
      v155 = *(unsigned int *)(v154 + 12);
      if ((_DWORD)v155)
      {
        v156 = *(unsigned int *)(a1 + 60) + v155;
        v157 = HIDWORD(v221);
        if (v156 > HIDWORD(v221) && v156 > v221)
        {
          v174 = v221 + ((unint64_t)v221 >> 2);
          if (v174 >= 0x10)
            v175 = v174 + 1;
          else
            v175 = 16;
          if (v175 <= v156)
            v176 = v156;
          else
            v176 = v175;
          __srca = v220;
          if (v176 < 5)
          {
            v177 = (WTF *)v222;
            v220 = (WTF *)v222;
            LODWORD(v221) = 4;
          }
          else
          {
            if (v176 >> 30)
            {
              __break(0xC471u);
              JUMPOUT(0x1980980ECLL);
            }
            v177 = (WTF *)WTF::fastMalloc((WTF *)(4 * v176));
            LODWORD(v221) = v176;
            v220 = v177;
          }
          memcpy(v177, __srca, 4 * v157);
          v5 = v213;
          if (v222 != (_QWORD *)__srca && __srca)
          {
            if (v220 == __srca)
            {
              v220 = 0;
              LODWORD(v221) = 0;
            }
            WTF::fastFree((unint64_t)__srca, v10, v11, v12, v13, v14, v15, v16);
          }
        }
        HIDWORD(v221) = v156;
        v158 = *(int **)v154;
        v159 = *(unsigned int *)(v154 + 12);
        v160 = *(_QWORD *)v154 + 4 * v159;
        v161 = *(int **)(a1 + 48);
        v162 = *(unsigned int *)(a1 + 60);
        v163 = &v161[v162];
        v164 = v220;
        v166 = (_DWORD)v159 == 0;
        v165 = v220;
        v166 = v166 || (_DWORD)v162 == 0;
        if (!v166)
        {
LABEL_167:
          while (2)
          {
            v167 = v165;
            while (1)
            {
              v168 = *v158;
              v169 = *v161;
              if (*v158 < *v161)
              {
                *(_DWORD *)v167 = v168;
                v165 = (WTF *)((char *)v167 + 4);
                if ((unint64_t)++v158 < v160)
                  goto LABEL_167;
                goto LABEL_176;
              }
              if (v168 == v169)
                break;
              v165 = (WTF *)((char *)v167 + 4);
              *(_DWORD *)v167 = v169;
              ++v161;
              v167 = (WTF *)((char *)v167 + 4);
              if (v161 >= v163)
                goto LABEL_178;
            }
            *(_DWORD *)v167 = v168;
            v165 = (WTF *)((char *)v167 + 4);
            ++v158;
            ++v161;
            if ((unint64_t)v158 < v160 && v161 < v163)
              continue;
            break;
          }
LABEL_176:
          v165 = (WTF *)((char *)v167 + 4);
        }
LABEL_178:
        while ((unint64_t)v158 < v160)
        {
          v170 = *v158++;
          *(_DWORD *)v165 = v170;
          v165 = (WTF *)((char *)v165 + 4);
        }
        while (v161 < v163)
        {
          v172 = *v161++;
          *(_DWORD *)v165 = v172;
          v165 = (WTF *)((char *)v165 + 4);
        }
        HIDWORD(v221) = (unint64_t)(v165 - v164) >> 2;
        v173 = *(unsigned int *)(v154 + 12);
        if (HIDWORD(v221) == v173)
          goto LABEL_184;
        if (HIDWORD(v221) <= v173)
        {
          __break(0xC471u);
          goto LABEL_262;
        }
        WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=(v154, (const void **)&v220, v11, v12, v13, v14, v15, v16);
      }
      else
      {
        WTF::Vector<unsigned int,4ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=<0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>(*v216 + 32 * **v151, (const void **)(a1 + 48), v11, v12, v13, v14, v15, v16);
      }
      v171 = v223;
      if (v223[0] >= 0)
        v171 = (_QWORD *)(2 * v223[0] + 8);
      v215 = 1;
      *(_QWORD *)((char *)v171 + (((unint64_t)*v153 >> 3) & 0x1FFFFFF8)) |= 1 << *v153;
LABEL_184:
      if (++v151 == v152)
        goto LABEL_106;
    }
  }
LABEL_211:
  v178 = v220;
  if (v222 != (_QWORD *)v220 && v220 != 0)
  {
    v220 = 0;
    LODWORD(v221) = 0;
    WTF::fastFree((unint64_t)v178, v10, v11, v12, v13, v14, v15, v16);
  }
  if ((v223[0] & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v223[0], v10, v11, v12, v13, v14, v15, v16);
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v218);
  return a1;
}

int *WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::StackSlot *,JSC::B3::Air::LivenessAdapter<JSC::B3::Air::StackSlotLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::StackSlot *&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::LivenessAdapter<JSC::B3::Air::StackSlotLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::StackSlot *&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(int *result, int *a2, unsigned int a3)
{
  uint64_t v4;
  int *v5;
  int v6;

  if (*((_BYTE *)a2 + 8) == 9)
  {
    v4 = *(_QWORD *)a2;
    result = JSC::B3::Air::LivenessAdapter<JSC::B3::Air::StackSlotLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::StackSlot *&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(**((int ***)result + 2), *(_DWORD *)(*(_QWORD *)a2 + 8), a3);
    if (*((_BYTE *)a2 + 8) == 9)
      v5 = a2 + 3;
    else
      v5 = a2;
    v6 = *v5;
    *((_QWORD *)a2 + 2) = 0;
    *((_BYTE *)a2 + 24) = 0;
    *(_QWORD *)a2 = v4;
    *((_WORD *)a2 + 4) = 521;
    a2[3] = v6;
  }
  return result;
}

int *JSC::B3::Air::LivenessAdapter<JSC::B3::Air::StackSlotLivenessAdapter>::prepareToCompute(void)::{lambda(JSC::B3::Air::StackSlot *&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(int *result, int a2, unsigned int a3)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  int *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int *v22;
  uint64_t v23;
  int v24;
  int v25;

  v4 = result;
  v25 = a2;
  if (a3 > 0xB || ((1 << a3) & 0xF3C) == 0)
  {
    v5 = **((_QWORD **)result + 1) + (**((_QWORD **)result + 2) << 6);
    v6 = *(unsigned int *)(v5 + 12);
    if ((_DWORD)v6)
    {
      v8 = *(int **)v5;
      v9 = *(unsigned int *)(v5 + 12);
      while (1)
      {
        v10 = *v8++;
        if (v10 == a2)
          break;
        if (!--v9)
          goto LABEL_4;
      }
    }
    else
    {
LABEL_4:
      if ((_DWORD)v6 == *(_DWORD *)(v5 + 8))
      {
        result = (int *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, v6 + 1, (unint64_t)&v25);
        v7 = (_DWORD *)(*(_QWORD *)v5 + 4 * *(unsigned int *)(v5 + 12));
        a2 = *result;
      }
      else
      {
        v7 = (_DWORD *)(*(_QWORD *)v5 + 4 * v6);
      }
      *v7 = a2;
      ++*(_DWORD *)(v5 + 12);
    }
  }
  if (a3 - 8 <= 2)
    result = (int *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendIfNotContains<unsigned int>(**((_QWORD **)v4 + 1) + (**((_QWORD **)v4 + 2) << 6) + 32, &v25);
  if (a3 >= 2 && (a3 > 0xB || ((1 << a3) & 0xBF0) == 0))
  {
    v18 = **((_QWORD **)v4 + 1) + (**((_QWORD **)v4 + 2) << 6);
    v19 = v18 + 64;
    v20 = *(unsigned int *)(v18 + 76);
    if ((_DWORD)v20)
    {
      v22 = *(int **)v19;
      v23 = v20;
      while (1)
      {
        v24 = *v22++;
        if (v24 == v25)
          break;
        if (!--v23)
          goto LABEL_27;
      }
    }
    else
    {
LABEL_27:
      if ((_DWORD)v20 == *(_DWORD *)(v19 + 8))
      {
        result = (int *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v19, v20 + 1, (unint64_t)&v25);
        v21 = (int *)(*(_QWORD *)v19 + 4 * *(unsigned int *)(v19 + 12));
      }
      else
      {
        v21 = (int *)(*(_QWORD *)v19 + 4 * v20);
        result = &v25;
      }
      *v21 = *result;
      ++*(_DWORD *)(v19 + 12);
    }
  }
  if ((a3 & 0xFFFFFFFC) == 4)
  {
    v11 = **((_QWORD **)v4 + 1) + (**((_QWORD **)v4 + 2) << 6);
    v12 = v11 + 96;
    v13 = *(unsigned int *)(v11 + 108);
    if ((_DWORD)v13)
    {
      v15 = *(int **)v12;
      v16 = v13;
      while (1)
      {
        v17 = *v15++;
        if (v17 == v25)
          break;
        if (!--v16)
          goto LABEL_17;
      }
    }
    else
    {
LABEL_17:
      if ((_DWORD)v13 == *(_DWORD *)(v12 + 8))
      {
        result = (int *)WTF::Vector<unsigned int,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, v13 + 1, (unint64_t)&v25);
        v14 = (int *)(*(_QWORD *)v12 + 4 * *(unsigned int *)(v12 + 12));
      }
      else
      {
        v14 = (int *)(*(_QWORD *)v12 + 4 * v13);
        result = &v25;
      }
      *v14 = *result;
      ++*(_DWORD *)(v12 + 12);
    }
  }
  return result;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::run(WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t result, _BYTE *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 16);
  if ((a3 - 8) < 3
    || (a3 & 0xFFFFFFFC) == 4
    && (a2[8] != 9
     || *(_BYTE *)(*(_QWORD *)a2 + 4) != 1
     || (v4 = **(_QWORD **)(v3 + 8),
         v5 = *(unsigned int *)(*(_QWORD *)a2 + 8),
         v6 = *(unsigned int *)(*(_QWORD *)(v4 + 32) + 4 * v5),
         *(_DWORD *)(v4 + 60) > v6)
     && *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v6) == (_DWORD)v5))
  {
    **(_BYTE **)v3 = 0;
  }
  return result;
}

BOOL JSC::B3::Air::`anonymous namespace'::StackAllocatorBase::isCoalescableMove(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v1 = word_1ECF4C698;
  if (!(_BYTE)word_1ECF4C698)
    return v1;
  v1 = 0;
  v2 = *((__int16 *)a1 + 60);
  if (v2 > 93)
  {
    v3 = 0;
    if (v2 <= 106)
    {
      if (v2 != 94)
        return v1;
      goto LABEL_5;
    }
    if (v2 != 108)
    {
      if (v2 != 107)
      {
        if (v2 != 113)
          return v1;
        v3 = 2;
      }
      goto LABEL_5;
    }
  }
  else if (v2 != 90)
  {
    return v1;
  }
  v3 = 1;
LABEL_5:
  if (*((_DWORD *)a1 + 3) == 3
    && (v5 = *a1, *(_BYTE *)(*a1 + 8) == 9)
    && *(_BYTE *)(*(_QWORD *)v5 + 4) == 1
    && **(_DWORD **)v5 == dword_1991505F0[v3]
    && *(_BYTE *)(v5 + 40) == 9
    && (v6 = *(_QWORD *)(v5 + 32), *(_BYTE *)(v6 + 4) == 1))
  {
    return *(_DWORD *)v6 == dword_1991505F0[v3];
  }
  else
  {
    return 0;
  }
}

_QWORD *WTF::Vector<JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;

  *(_QWORD *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

unint64_t WTF::Vector<JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
  }
  return v3;
}

void WTF::Vector<JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(_QWORD *)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v14 = 8 * v5;
        v15 = (uint64_t *)v4;
        do
        {
          v16 = *v15++;
          *v6++ = v16;
          v14 -= 8;
        }
        while (v14);
      }
      if (v4)
      {
        if (*(_QWORD *)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachIS4_ZNSA_10forEachDefIS4_ZZNS3_12_GLOBAL__N_127GraphColoringStackAllocatorINS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE3runERKNS_6VectorIPNS3_9StackSlotELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUljE_clEjEUlS5_S6_S7_S8_E_EEvPSA_SU_RKT0_EUlS5_S6_S7_S8_E_EEvSX_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, _BYTE *a2, char a3)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  if ((a3 & 0xFC) == 4 && a2[8] == 9 && *(_BYTE *)(*(_QWORD *)a2 + 4) == 1)
  {
    v3 = ***(uint64_t *****)(result + 16);
    v4 = **v3;
    v5 = *(unsigned int *)(v4 + 60);
    if ((_DWORD)v5)
    {
      v6 = v3[1];
      v7 = *(unsigned int **)(v4 + 48);
      v8 = *(_QWORD *)(*(_QWORD *)v4 + 64);
      v9 = *(unsigned __int16 *)(*(_QWORD *)a2 + 8);
      v10 = 4 * v5;
      do
      {
        v11 = *(unsigned __int16 *)(*(_QWORD *)(v8 + 8 * *v7) + 8);
        if ((_DWORD)v9 != (_DWORD)v11)
        {
          v12 = *((unsigned __int16 *)v6 + 18);
          v13 = v11 + *((unsigned __int16 *)v6 + 18) * (unint64_t)v9;
          v14 = v6[3];
          if (v14 >= 0)
            v15 = 2 * v14 + 8;
          else
            v15 = (uint64_t)(v6 + 3);
          v16 = (v13 >> 3) & 0x3FFFFFF8;
          v17 = *(_QWORD *)(v15 + v16);
          v18 = 1 << v13;
          v19 = (v18 & v17) == 0;
          *(_QWORD *)(v15 + v16) = v18 | v17;
          v20 = *((_DWORD *)v6 + 8);
          if (v19)
            ++v20;
          v21 = v9 + v12 * (unint64_t)v11;
          v22 = v6[3];
          if (v22 >= 0)
            v23 = 2 * v22 + 8;
          else
            v23 = (uint64_t)(v6 + 3);
          result = (v21 >> 3) & 0x3FFFFFF8;
          v24 = 1 << v21;
          v25 = *(_QWORD *)(v23 + result);
          *(_QWORD *)(v23 + result) = v25 | v24;
          if ((v25 & v24) != 0)
            v26 = v20;
          else
            v26 = v20 + 1;
          *((_DWORD *)v6 + 8) = v26;
        }
        ++v7;
        v10 -= 4;
      }
      while (v10);
    }
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachIS4_ZNSA_10forEachDefIS4_ZZNS3_12_GLOBAL__N_127GraphColoringStackAllocatorINS_33UndirectedEdgesDuplicatingAdapterINS_21InterferenceBitVectorItEEEEE3runERKNS_6VectorIPNS3_9StackSlotELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUljE_clEjEUlS5_S6_S7_S8_E_EEvPSA_SU_RKT0_EUlS5_S6_S7_S8_E0_EEvSX_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, _BYTE *a2, int a3)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  if ((a3 - 8) <= 2 && a2[8] == 9 && *(_BYTE *)(*(_QWORD *)a2 + 4) == 1)
  {
    v3 = ***(uint64_t *****)(result + 16);
    v4 = **v3;
    v5 = *(unsigned int *)(v4 + 60);
    if ((_DWORD)v5)
    {
      v6 = v3[1];
      v7 = *(unsigned int **)(v4 + 48);
      v8 = *(_QWORD *)(*(_QWORD *)v4 + 64);
      v9 = *(unsigned __int16 *)(*(_QWORD *)a2 + 8);
      v10 = 4 * v5;
      do
      {
        v11 = *(unsigned __int16 *)(*(_QWORD *)(v8 + 8 * *v7) + 8);
        if ((_DWORD)v9 != (_DWORD)v11)
        {
          v12 = *((unsigned __int16 *)v6 + 18);
          v13 = v11 + *((unsigned __int16 *)v6 + 18) * (unint64_t)v9;
          v14 = v6[3];
          if (v14 >= 0)
            v15 = 2 * v14 + 8;
          else
            v15 = (uint64_t)(v6 + 3);
          v16 = (v13 >> 3) & 0x3FFFFFF8;
          v17 = *(_QWORD *)(v15 + v16);
          v18 = 1 << v13;
          v19 = (v18 & v17) == 0;
          *(_QWORD *)(v15 + v16) = v18 | v17;
          v20 = *((_DWORD *)v6 + 8);
          if (v19)
            ++v20;
          v21 = v9 + v12 * (unint64_t)v11;
          v22 = v6[3];
          if (v22 >= 0)
            v23 = 2 * v22 + 8;
          else
            v23 = (uint64_t)(v6 + 3);
          result = (v21 >> 3) & 0x3FFFFFF8;
          v24 = 1 << v21;
          v25 = *(_QWORD *)(v23 + result);
          *(_QWORD *)(v23 + result) = v25 | v24;
          if ((v25 & v24) != 0)
            v26 = v20;
          else
            v26 = v20 + 1;
          *((_DWORD *)v6 + 8) = v26;
        }
        ++v7;
        v10 -= 4;
      }
      while (v10);
    }
  }
  return result;
}

float *std::__introsort<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::run(WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove &)#1} &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove*,false>(float *result, float *a2, uint64_t a3, char a4)
{
  float *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float *v15;
  unint64_t v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  char v21;
  BOOL v22;

  v6 = result;
LABEL_2:
  v7 = (uint64_t)v6;
LABEL_3:
  v8 = 1 - a3;
  while (2)
  {
    v9 = v8;
    v10 = (uint64_t)a2 - v7;
    v11 = ((uint64_t)a2 - v7) >> 3;
    if (v11 < 2)
      return result;
    v6 = (float *)v7;
    switch(v11)
    {
      case 2uLL:
        if (*(a2 - 1) > *(float *)(v7 + 4))
        {
          v12 = *(_QWORD *)v7;
          goto LABEL_9;
        }
        return result;
      case 3uLL:
        v13 = *(float *)(v7 + 12);
        v14 = *(a2 - 1);
        if (v13 > *(float *)(v7 + 4))
        {
          v12 = *(_QWORD *)v7;
          if (v14 > v13)
          {
LABEL_9:
            *(_QWORD *)v7 = *((_QWORD *)a2 - 1);
          }
          else
          {
            *(_QWORD *)v7 = *(_QWORD *)(v7 + 8);
            *(_QWORD *)(v7 + 8) = v12;
            if (*(a2 - 1) <= *((float *)&v12 + 1))
              return result;
            *(_QWORD *)(v7 + 8) = *((_QWORD *)a2 - 1);
          }
          *((_QWORD *)a2 - 1) = v12;
          return result;
        }
        if (v14 > v13)
        {
          v19 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v19;
          if (*(float *)(v7 + 12) > *(float *)(v7 + 4))
            *(int8x16_t *)v7 = vextq_s8(*(int8x16_t *)v7, *(int8x16_t *)v7, 8uLL);
        }
        return result;
      case 4uLL:
      case 5uLL:
      default:
        if (v10 > 191)
        {
          if (v9 == 1)
          v15 = a2 - 2;
          v16 = v11 >> 1;
          v17 = (float *)(v7 + 8 * (v11 >> 1));
          if ((unint64_t)v10 < 0x401)
          {
          }
          else
          {
            v18 = *(_QWORD *)v7;
            *(_QWORD *)v7 = *(_QWORD *)v17;
            *(_QWORD *)v17 = v18;
          }
          if ((a4 & 1) == 0 && *(float *)(v7 - 4) <= *(float *)(v7 + 4))
          {
            v7 = (uint64_t)result;
            goto LABEL_31;
          }
          if ((v21 & 1) == 0)
            goto LABEL_30;
          v7 = (uint64_t)(v20 + 2);
          if (!(_DWORD)result)
          {
            v8 = v9 + 1;
            if (v22)
              continue;
LABEL_30:
            v7 = (uint64_t)(v20 + 2);
LABEL_31:
            a4 = 0;
            a3 = -v9;
            goto LABEL_3;
          }
          a3 = -v9;
          a2 = v20;
          if (v22)
            return result;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        else
    }
  }
}

float *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::run(WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove &)#1} &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove*,0>(float *a1, float *a2, float *a3, float *a4, uint64_t a5)
{
  float *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(float *)(a5 + 4) > a4[1])
  {
    v11 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v11;
    if (a4[1] > a3[1])
    {
      v12 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v12;
      if (a3[1] > a2[1])
      {
        v13 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v13;
        if (a2[1] > a1[1])
        {
          v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v14;
        }
      }
    }
  }
  return result;
}

uint64_t std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::run(WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove &)#1} &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove*>(uint64_t result, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  float v5;
  float v6;
  int v7;
  uint64_t v8;
  float v9;
  uint64_t v10;

  if ((_DWORD *)result != a2)
  {
    v2 = (_DWORD *)(result + 8);
    if ((_DWORD *)(result + 8) != a2)
    {
      v3 = 0;
      v4 = (_DWORD *)result;
      do
      {
        v5 = *((float *)v4 + 3);
        v6 = *((float *)v4 + 1);
        v4 = v2;
        if (v5 > v6)
        {
          v7 = *v2;
          v8 = v3;
          while (1)
          {
            *(_QWORD *)(result + v8 + 8) = *(_QWORD *)(result + v8);
            if (!v8)
              break;
            v9 = *(float *)(result + v8 - 4);
            v8 -= 8;
            if (v9 >= v5)
            {
              v10 = result + v8 + 8;
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *(_DWORD *)v10 = v7;
          *(float *)(v10 + 4) = v5;
        }
        v2 = v4 + 2;
        v3 += 8;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

_DWORD *std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::run(WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove &)#1} &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove*>(_DWORD *result, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float *v6;
  float v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  float v11;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = -1;
      v5 = 1;
      while (1)
      {
        v6 = (float *)&result[2 * v3];
        v3 = v5;
        v7 = v6[3];
        if (v7 > v6[1])
          break;
LABEL_9:
        v5 = v3 + 1;
        v2 += 2;
        --v4;
        if (v2 == a2)
          return result;
      }
      v8 = *v2;
      v9 = v4;
      v10 = v2;
      while (1)
      {
        *(_QWORD *)v10 = *((_QWORD *)v10 - 1);
        if (!v9)
          break;
        v11 = *((float *)v10 - 3);
        v10 -= 2;
        ++v9;
        if (v11 >= v7)
        {
          *v10 = v8;
          *((float *)v10 + 1) = v7;
          goto LABEL_9;
        }
      }
      __break(1u);
    }
  }
  return result;
}

float *std::__partial_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::run(WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove &)#1} &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove*,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove*>(float *result, float *a2, float *a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  float *v8;
  float *v9;
  float v10;
  float v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  float v16;
  float *v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  float *v38;
  float v39;
  int v40;
  float *v41;

  if (result != a2)
  {
    v3 = (char *)a2 - (char *)result;
    v4 = ((char *)a2 - (char *)result) >> 3;
    if ((char *)a2 - (char *)result >= 9 && (unint64_t)v3 >= 0x10)
    {
      v5 = (unint64_t)(v4 - 2) >> 1;
      v6 = v5;
      do
      {
        if (v5 >= v6)
        {
          v7 = (2 * v6) | 1;
          v8 = &result[2 * v7];
          if (2 * v6 + 2 < v4 && v8[1] > v8[3])
          {
            v8 += 2;
            v7 = 2 * v6 + 2;
          }
          v9 = &result[2 * v6];
          v10 = v9[1];
          if (v8[1] <= v10)
          {
            v11 = *v9;
            do
            {
              v12 = v9;
              v9 = v8;
              *(_QWORD *)v12 = *(_QWORD *)v8;
              if (v5 < v7)
                break;
              v13 = 2 * v7;
              v7 = (2 * v7) | 1;
              v8 = &result[2 * v7];
              v14 = v13 + 2;
              if (v14 < v4 && v8[1] > v8[3])
              {
                v8 += 2;
                v7 = v14;
              }
            }
            while (v8[1] <= v10);
            *v9 = v11;
            v9[1] = v10;
          }
        }
        v15 = v6-- <= 0;
      }
      while (!v15);
    }
    if (a2 != a3)
    {
      if (v3 >= 16)
      {
        v19 = a2;
        do
        {
          if (v19[1] > result[1])
          {
            v20 = *(_QWORD *)v19;
            *(_QWORD *)v19 = *(_QWORD *)result;
            *(_QWORD *)result = v20;
            if (v3 == 16)
            {
              v21 = (uint64_t)(result + 2);
              v22 = 1;
            }
            else
            {
              v23 = result[3];
              v24 = result[5];
              v21 = (uint64_t)(v23 > v24 ? result + 4 : result + 2);
              v22 = v23 > v24 ? 2 : 1;
            }
            if (*(float *)(v21 + 4) <= *((float *)&v20 + 1))
            {
              v25 = result;
              do
              {
                v26 = v25;
                v25 = (_QWORD *)v21;
                *v26 = *(_QWORD *)v21;
                if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v22)
                  break;
                v27 = 2 * v22;
                v22 = (2 * v22) | 1;
                v21 = (uint64_t)&result[2 * v22];
                v28 = v27 + 2;
                if (v28 < v4 && *(float *)(v21 + 4) > *(float *)(v21 + 12))
                {
                  v21 += 8;
                  v22 = v28;
                }
              }
              while (*(float *)(v21 + 4) <= *((float *)&v20 + 1));
              *v25 = v20;
            }
          }
          v19 += 2;
        }
        while (v19 != a3);
      }
      else
      {
        v16 = result[1];
        v17 = a2;
        do
        {
          if (v17[1] > v16)
          {
            v18 = *(_QWORD *)v17;
            *(_QWORD *)v17 = *(_QWORD *)result;
            *(_QWORD *)result = v18;
            v16 = *((float *)&v18 + 1);
          }
          v17 += 2;
        }
        while (v17 != a3);
      }
    }
    if (v3 >= 9)
    {
      v29 = (unint64_t)v3 >> 3;
      do
      {
        v30 = 0;
        v31 = *(_QWORD *)result;
        v32 = result;
        do
        {
          v33 = v32;
          v32 += 2 * v30 + 2;
          v34 = 2 * v30;
          v30 = (2 * v30) | 1;
          v35 = v34 + 2;
          if (v35 < v29 && v32[1] > v32[3])
          {
            v32 += 2;
            v30 = v35;
          }
          *(_QWORD *)v33 = *(_QWORD *)v32;
        }
        while (v30 <= (uint64_t)((unint64_t)(v29 - 2) >> 1));
        a2 -= 2;
        if (v32 == a2)
        {
          *(_QWORD *)v32 = v31;
        }
        else
        {
          *(_QWORD *)v32 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v31;
          v36 = (char *)v32 - (char *)result + 8;
          if (v36 >= 9)
          {
            v37 = (((unint64_t)v36 >> 3) - 2) >> 1;
            v38 = &result[2 * v37];
            v39 = v32[1];
            if (v38[1] > v39)
            {
              v40 = *(_DWORD *)v32;
              do
              {
                v41 = v32;
                v32 = v38;
                *(_QWORD *)v41 = *(_QWORD *)v38;
                if (!v37)
                  break;
                v37 = (v37 - 1) >> 1;
                v38 = &result[2 * v37];
              }
              while (v38[1] > v39);
              *(_DWORD *)v32 = v40;
              v32[1] = v39;
            }
          }
        }
        v15 = v29-- <= 2;
      }
      while (!v15);
    }
  }
  return result;
}

float *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::run(WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove &)#1} &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove*>(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  v4 = a3[1];
  if (v3 <= result[1])
  {
    if (v4 > v3)
    {
      v6 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
      if (a2[1] > result[1])
      {
        v7 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v7;
      }
    }
  }
  else
  {
    v5 = *(_QWORD *)result;
    if (v4 <= v3)
    {
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v5;
      if (a3[1] <= *((float *)&v5 + 1))
        return result;
      *(_QWORD *)a2 = *(_QWORD *)a3;
    }
    else
    {
      *(_QWORD *)result = *(_QWORD *)a3;
    }
    *(_QWORD *)a3 = v5;
  }
  return result;
}

float *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove *,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::run(WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove&,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove&)#1} &>(float *result, float *a2)
{
  int v2;
  float v3;
  float *v4;
  float v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  uint64_t v12;
  float *v13;
  float v14;
  float *v15;
  float v16;

  v2 = *(_DWORD *)result;
  v3 = result[1];
  if (*(a2 - 1) < v3)
  {
    v4 = result + 2;
    while (v4 != a2)
    {
      v5 = v4[1];
      v4 += 2;
      if (v5 < v3)
      {
        v6 = v4 - 2;
        goto LABEL_9;
      }
    }
    goto LABEL_24;
  }
  v7 = result + 2;
  do
  {
    v6 = v7;
    if (v7 >= a2)
      break;
    v8 = v7[1];
    v7 += 2;
  }
  while (v8 >= v3);
LABEL_9:
  v9 = a2;
  if (v6 < a2)
  {
    v10 = a2;
    while (v10 != result)
    {
      v9 = v10 - 2;
      v11 = *(v10 - 1);
      v10 -= 2;
      if (v11 >= v3)
        goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_13:
  if (v6 < v9)
  {
LABEL_14:
    v12 = *(_QWORD *)v6;
    *(_QWORD *)v6 = *(_QWORD *)v9;
    v13 = v6 + 2;
    *(_QWORD *)v9 = v12;
    while (v13 != a2)
    {
      v14 = v13[1];
      v13 += 2;
      if (v14 < v3)
      {
        v6 = v13 - 2;
        while (v9 != result)
        {
          v15 = v9 - 2;
          v16 = *(v9 - 1);
          v9 -= 2;
          if (v16 >= v3)
          {
            v9 = v15;
            if (v6 < v15)
              goto LABEL_14;
            goto LABEL_21;
          }
        }
        break;
      }
    }
LABEL_24:
    __break(1u);
    return result;
  }
LABEL_21:
  if (v6 - 2 != result)
    *(_QWORD *)result = *((_QWORD *)v6 - 1);
  *((_DWORD *)v6 - 2) = v2;
  *(v6 - 1) = v3;
  return v6;
}

float *std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove *,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::run(WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove&,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove&)#1} &>(float *result, float *a2)
{
  uint64_t v2;
  int v3;
  float v4;
  float v5;
  float *v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float v11;
  float *v12;
  float *v13;
  uint64_t v14;
  float *v15;
  float v16;
  float *v17;
  float v18;

  v2 = 0;
  v3 = *(_DWORD *)result;
  v4 = result[1];
  do
  {
    if (&result[v2 + 2] == a2)
      goto LABEL_26;
    v5 = result[v2 + 3];
    v2 += 2;
  }
  while (v5 > v4);
  v6 = &result[v2];
  if (v2 != 2)
  {
    v7 = a2;
    while (v7 != result)
    {
      v8 = v7 - 2;
      v9 = *(v7 - 1);
      v7 -= 2;
      if (v9 > v4)
        goto LABEL_14;
    }
    goto LABEL_26;
  }
  v10 = a2;
  while (v6 < v10)
  {
    v8 = v10 - 2;
    v11 = *(v10 - 1);
    v10 -= 2;
    if (v11 > v4)
      goto LABEL_14;
  }
  v8 = v10;
LABEL_14:
  v12 = v6;
  if (v6 < v8)
  {
    v13 = v8;
LABEL_16:
    v14 = *(_QWORD *)v12;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v15 = v12 + 2;
    *(_QWORD *)v13 = v14;
    while (v15 != a2)
    {
      v16 = v15[1];
      v15 += 2;
      if (v16 <= v4)
      {
        v12 = v15 - 2;
        while (v13 != result)
        {
          v17 = v13 - 2;
          v18 = *(v13 - 1);
          v13 -= 2;
          if (v18 > v4)
          {
            v13 = v17;
            if (v12 < v17)
              goto LABEL_16;
            goto LABEL_23;
          }
        }
        break;
      }
    }
LABEL_26:
    __break(1u);
    return result;
  }
LABEL_23:
  if (v12 - 2 != result)
    *(_QWORD *)result = *((_QWORD *)v12 - 1);
  *((_DWORD *)v12 - 2) = v3;
  *(v12 - 1) = v4;
  return v12 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::run(WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove &)#1} &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  float v26;
  int v27;
  uint64_t v28;
  float v29;
  uint64_t v30;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 4) > *(float *)(a1 + 4))
      {
        v6 = *(_QWORD *)a1;
        goto LABEL_6;
      }
      return result;
    case 3:
      v7 = *(float *)(a1 + 12);
      v8 = *(float *)(a2 - 4);
      if (v7 <= *(float *)(a1 + 4))
      {
        if (v8 > v7)
        {
          v18 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v18;
          if (*(float *)(a1 + 12) > *(float *)(a1 + 4))
            *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
        }
      }
      else
      {
        v6 = *(_QWORD *)a1;
        if (v8 > v7)
        {
LABEL_6:
          *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
LABEL_7:
          *(_QWORD *)(a2 - 8) = v6;
          return result;
        }
        *(_QWORD *)a1 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v6;
        if (*(float *)(a2 - 4) > *((float *)&v6 + 1))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
          goto LABEL_7;
        }
      }
      return result;
    case 4:
      return 1;
    case 5:
      if (*(float *)(a2 - 4) > *(float *)(a1 + 28))
      {
        v13 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v13;
        if (*(float *)(a1 + 28) > *(float *)(a1 + 20))
        {
          v15 = *(_QWORD *)(a1 + 16);
          v14 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 16) = v14;
          *(_QWORD *)(a1 + 24) = v15;
          if (*(float *)(a1 + 12) < *((float *)&v14 + 1))
          {
            v16 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v14;
            *(_QWORD *)(a1 + 16) = v16;
            if (*(float *)(a1 + 4) < *((float *)&v14 + 1))
            {
              v17 = *(_QWORD *)a1;
              *(_QWORD *)a1 = v14;
              *(_QWORD *)(a1 + 8) = v17;
            }
          }
        }
      }
      return 1;
    default:
      v9 = *(float *)(a1 + 12);
      v10 = *(float *)(a1 + 4);
      v11 = *(float *)(a1 + 20);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          v20 = *(_QWORD *)(a1 + 8);
          v19 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 8) = v19;
          *(_QWORD *)(a1 + 16) = v20;
          if (v10 < *((float *)&v19 + 1))
          {
            v21 = *(_QWORD *)a1;
            *(_QWORD *)a1 = v19;
            *(_QWORD *)(a1 + 8) = v21;
          }
        }
      }
      else
      {
        v12 = *(_QWORD *)a1;
        if (v11 <= v9)
        {
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v12;
          if (v11 <= *((float *)&v12 + 1))
            goto LABEL_28;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
        }
        else
        {
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 16);
        }
        *(_QWORD *)(a1 + 16) = v12;
      }
LABEL_28:
      v22 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v23 = 0;
      v24 = 0;
      v25 = a1 + 16;
      while (1)
      {
        v26 = *(float *)(v22 + 4);
        if (v26 > *(float *)(v25 + 4))
        {
          v27 = *(_DWORD *)v22;
          v28 = v23;
          while (1)
          {
            *(_QWORD *)(a1 + v28 + 24) = *(_QWORD *)(a1 + v28 + 16);
            if (v28 == -16)
              break;
            v29 = *(float *)(a1 + v28 + 12);
            v28 -= 8;
            if (v29 >= v26)
            {
              v30 = a1 + v28 + 24;
              goto LABEL_36;
            }
          }
          v30 = a1;
LABEL_36:
          *(_DWORD *)v30 = v27;
          *(float *)(v30 + 4) = v26;
          if (++v24 == 8)
            return v22 + 8 == a2;
        }
        v25 = v22;
        v23 += 8;
        v22 += 8;
        if (v22 == a2)
          return 1;
      }
  }
}

float *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::run(WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove &)#1} &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::CoalescableMove*>(float *result, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  v5 = a3[1];
  if (v4 <= result[1])
  {
    if (v5 > v4)
    {
      v6 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
      if (a2[1] <= result[1])
        goto LABEL_7;
      v7 = *(_QWORD *)result;
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v7;
      v5 = a3[1];
    }
  }
  else
  {
    v6 = *(_QWORD *)result;
    if (v5 > v4)
    {
      *(_QWORD *)result = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
LABEL_7:
      v5 = *((float *)&v6 + 1);
      goto LABEL_10;
    }
    *(_QWORD *)result = *(_QWORD *)a2;
    *(_QWORD *)a2 = v6;
    v5 = a3[1];
    if (v5 > *((float *)&v6 + 1))
    {
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
      v5 = *((float *)&v6 + 1);
    }
  }
LABEL_10:
  if (a4[1] > v5)
  {
    v8 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v8;
    if (a3[1] > a2[1])
    {
      v9 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v9;
      if (a2[1] > result[1])
      {
        v10 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v10;
      }
    }
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::GraphColoringStackAllocator(uint64_t a1, JSC::B3::Air::Code *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v3 + 56) = 0;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  WTF::Vector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(v3 + 24, *(unsigned int *)(*(_QWORD *)a1 + 76), v4, v5, v6, v7, v8, v9);
  return a1;
}

uint64_t JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::run(WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(unsigned int)#1}::operator()(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  __int16 v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _WORD *v43;
  unsigned int v44;
  unsigned int v45;
  _WORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  _DWORD *v56;
  int v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _WORD *v61;
  unsigned int v62;
  unsigned int v63;
  _WORD *v64;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned __int16 *v93;
  int v94;
  unsigned __int16 *v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  int v106;
  BOOL v107;
  int v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned __int16 *v114;
  int v115;
  unsigned __int16 *v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  unint64_t v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unsigned int *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int *v148;
  uint64_t v149;
  unsigned int *v150;
  unsigned int *v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int *v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int *v157;
  uint64_t v158;
  unsigned int *v159;
  WTF::BitVector *v160;
  uint64_t v161;
  unsigned int *v162;
  WTF::BitVector *v163;
  uint64_t v164;
  unsigned int *v165;
  WTF::BitVector *v166;
  uint64_t v167;
  unsigned int *v168;
  uint64_t v169;
  unsigned int *v170;
  uint64_t v171;
  unsigned int *v172;
  uint64_t v173;
  unsigned int *v174;
  uint64_t v175;
  unsigned int *v176;
  uint64_t **v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t **v181;
  uint64_t ***v182;
  void *v183;
  void **v184;
  uint64_t **v185;

  v8 = (uint64_t **)result;
  v9 = *(_QWORD *)(result + 16);
  v10 = **(_QWORD **)(result + 8);
  v11 = *(_DWORD *)(v10 + 20);
  if (v11 <= a2)
    v12 = 0;
  else
    v12 = *(_QWORD *)(v10 + 8) + ((unint64_t)a2 << 7);
  v13 = a2 + 1;
  if (v11 <= v13)
    v14 = 0;
  else
    v14 = *(_QWORD *)(v10 + 8) + (v13 << 7);
  if (!v12)
    goto LABEL_176;
  if ((_DWORD)result)
  {
    v26 = *(_DWORD *)(v12 + 12);
    if (v26 == 1)
    {
      __break(0xC471u);
      JUMPOUT(0x19809A57CLL);
    }
    if (!v26)
    {
      __break(0xC471u);
LABEL_223:
      JUMPOUT(0x19809A414);
    }
    v27 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 32) + 8);
    v28 = *(double *)(*v8[1] + 104);
    LOWORD(v179) = *(_DWORD *)(**(_QWORD **)v12 + 8);
    WORD1(v179) = v27;
    *(float *)&v28 = v28;
    HIDWORD(v179) = LODWORD(v28);
    v29 = *(unsigned int *)(v9 + 60);
    v178 = v14;
    if ((_DWORD)v29 == *(_DWORD *)(v9 + 56))
    {
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v29) = v179;
      ++*(_DWORD *)(v9 + 60);
    }
    v177 = v8;
    v30 = **v8;
    v31 = *(unsigned int *)(v30 + 60);
    if ((_DWORD)v31)
    {
      v32 = *(unsigned int **)(v30 + 48);
      v33 = &v32[v31];
      result = 0xFFFFLL;
      a4 = 65534;
      a5 = 1;
      a6 = 8;
      while (1)
      {
        v34 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v30 + 64) + 8 * *v32) + 8);
        if (v34 == (unsigned __int16)v179)
          goto LABEL_61;
        v35 = WORD1(v179);
        if (WORD1(v179) == (unsigned __int16)v34)
          goto LABEL_61;
        if (*(_DWORD *)(v9 + 36) <= WORD1(v179))
        {
          __break(0xC471u);
          JUMPOUT(0x19809A55CLL);
        }
        v36 = *(_QWORD *)(v9 + 24);
        v37 = v36 + 16 * WORD1(v179);
        LOWORD(v182) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v30 + 64) + 8 * *v32) + 8);
        v39 = (_DWORD *)(v37 + 8);
        v38 = *(_DWORD *)(v37 + 8);
        if (v38 == -1)
          break;
        if (v38)
        {
          v40 = (unsigned __int16)v34;
          v41 = v36 + 16 * WORD1(v179);
          v44 = *(unsigned __int16 *)(v41 + 12);
          v43 = (_WORD *)(v41 + 12);
          v42 = v44;
          v46 = v43 + 1;
          v45 = (unsigned __int16)v43[1];
          if (v44 > (unsigned __int16)v34 || v45 < (unsigned __int16)v34)
          {
            *v39 = v38 + 1;
            if ((v34 & 0xFFC0u) >= v42)
              v72 = v42;
            else
              v72 = (unsigned __int16)v34 & 0xFFC0;
            if (v45 <= (unsigned __int16)v34)
              v73 = (unsigned __int16)v34;
            else
              v73 = v45;
            v74 = v73 - v72;
            if (v73 < (int)v72)
              v74 = v73 - v72 + 7;
            if ((v38 + 1) > 8)
              v75 = v38 + 1;
            else
              v75 = 8;
            if (12 * v75 < (v74 >> 3))
            {
              v175 = v30;
              v157 = v33;
              WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToHashSet(v37);
              WTF::HashSet<unsigned short,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTableTraits>::add((uint64_t)&v183, (uint64_t *)v37, &v182);
              a6 = 8;
              a5 = 1;
              a4 = 65534;
              result = 0xFFFFLL;
              v33 = v157;
              v30 = v175;
              *v43 = v72;
              *v46 = v73;
LABEL_128:
              v53 = 1;
              goto LABEL_46;
            }
            if (v42 > (unsigned __int16)v34)
            {
              v140 = (int)v42 - (int)v72;
              if ((v140 & 0x3F) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19809A434);
              }
              v176 = v33;
              v141 = v30;
              if ((*(_QWORD *)v37 & 0x8000000000000000) != 0)
                v142 = 63;
              else
                v142 = *(_QWORD *)(2 * *(_QWORD *)v37);
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v37, v142 + v140, v140 >> 6);
              *v43 = v72;
              v42 = v72;
              v30 = v141;
              v33 = v176;
              result = 0xFFFFLL;
              a4 = 65534;
              a5 = 1;
              a6 = 8;
            }
            v76 = *(_QWORD *)v37;
            if ((*(_QWORD *)v37 & 0x8000000000000000) != 0)
              v77 = 63;
            else
              v77 = *(_QWORD *)(2 * v76);
            v78 = v40 - v42;
            v15 = v40 - v42 + 1;
            if (v77 < v15)
            {
              v147 = v30;
              v148 = v33;
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v37, v15, 0);
              a6 = 8;
              a5 = 1;
              a4 = 65534;
              result = 0xFFFFLL;
              v33 = v148;
              v30 = v147;
              v76 = *(_QWORD *)v37;
            }
            v79 = 2 * v76 + 8;
            if (v76 < 0)
              v79 = v37;
            *(_QWORD *)(v79 + ((v78 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v78;
            *v46 = v73;
            v53 = 1;
          }
          else
          {
            v47 = (unsigned __int16)v34 - v42;
            if (*(uint64_t *)v37 >= 0)
              v48 = 2 * *(_QWORD *)v37 + 8;
            else
              v48 = v37;
            v49 = (v47 >> 3) & 0x1FFFFFFFFFFFFFF8;
            v50 = 1 << v47;
            v51 = *(_QWORD *)(v48 + v49);
            v52 = (v51 & (1 << v47)) == 0;
            v53 = v52;
            *(_QWORD *)(v48 + v49) = v51 | v50;
            if (v52)
              ++v38;
            *v39 = v38;
          }
        }
        else
        {
          v129 = v36 + 16 * WORD1(v179);
          *(_WORD *)(v129 + 12) = v34 & 0xFFC0;
          *(_WORD *)(v129 + 14) = v34;
          *v39 = 1;
          v130 = *(_QWORD *)v37;
          if ((*(_QWORD *)v37 & 0x8000000000000000) != 0)
            v131 = 63;
          else
            v131 = *(_QWORD *)(2 * v130);
          LODWORD(v40) = (unsigned __int16)v34;
          v132 = (unsigned __int16)v34 - (unint64_t)((unsigned __int16)v34 & 0xFFC0);
          v15 = v132 + 1;
          if (v131 < v132 + 1)
          {
            v166 = (WTF::BitVector *)(v36 + 16 * v35);
            v167 = v30;
            v168 = v33;
            WTF::BitVector::resizeOutOfLine(v166, v15, 0);
            a6 = 8;
            a5 = 1;
            a4 = 65534;
            result = 0xFFFFLL;
            v33 = v168;
            v30 = v167;
            v130 = *(_QWORD *)v37;
          }
          v133 = 2 * v130 + 8;
          if (v130 < 0)
            v133 = v37;
          v53 = 1;
          *(_QWORD *)(v133 + ((v132 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
        }
LABEL_46:
        v54 = *(_DWORD *)(v9 + 36);
        *(_DWORD *)(v9 + 40) += v53;
        if (v54 <= v40)
        {
          __break(0xC471u);
          JUMPOUT(0x19809A564);
        }
        v55 = *(_QWORD *)(v9 + 24);
        v56 = (_DWORD *)(v55 + 16 * v40);
        LOWORD(v182) = v35;
        v58 = v56 + 2;
        v57 = v56[2];
        if (v57 == -1)
        {
          v109 = *(_QWORD *)v56;
          if (*(_QWORD *)v56)
            goto LABEL_130;
          v173 = v30;
          v174 = v33;
          WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand((uint64_t *)(v55 + 16 * v40), 0);
          a6 = 8;
          a5 = 1;
          a4 = 65534;
          result = 0xFFFFLL;
          v33 = v174;
          v30 = v173;
          v109 = *(_QWORD *)v56;
          if (*(_QWORD *)v56)
LABEL_130:
            v110 = *(_DWORD *)(v109 - 8);
          else
            v110 = 0;
          v111 = 9 * ((~((_DWORD)v35 << 15) + v35) ^ ((~((_DWORD)v35 << 15) + v35) >> 10));
          v112 = (v111 ^ (v111 >> 6)) + ~((v111 ^ (v111 >> 6)) << 11);
          v113 = v110 & (v112 ^ HIWORD(v112));
          v114 = (unsigned __int16 *)(v109 + 2 * v113);
          v115 = *v114;
          if (v115 != 0xFFFF)
          {
            v116 = 0;
            v117 = 1;
            do
            {
              if ((_DWORD)v35 == (unsigned __int16)v115)
              {
                v71 = 0;
                goto LABEL_60;
              }
              if ((unsigned __int16)v115 == 65534)
                v116 = v114;
              v113 = (v113 + v117) & v110;
              v114 = (unsigned __int16 *)(v109 + 2 * v113);
              v115 = *v114;
              ++v117;
            }
            while (v115 != 0xFFFF);
            if (v116)
            {
              *v116 = -1;
              --*(_DWORD *)(*(_QWORD *)v56 - 16);
              LOWORD(v35) = (_WORD)v182;
              v114 = v116;
            }
          }
          *v114 = v35;
          v118 = *(_QWORD *)v56;
          if (*(_QWORD *)v56)
            v119 = *(_DWORD *)(v118 - 12) + 1;
          else
            v119 = 1;
          *(_DWORD *)(v118 - 12) = v119;
          v120 = *(_QWORD *)v56;
          if (*(_QWORD *)v56)
            v121 = *(_DWORD *)(v120 - 12);
          else
            v121 = 0;
          v122 = (*(_DWORD *)(v120 - 16) + v121);
          v123 = *(unsigned int *)(v120 - 4);
          if (v123 > 0x400)
          {
            if (v123 > 2 * v122)
              goto LABEL_145;
          }
          else
          {
            if (3 * v123 > 4 * v122)
            {
LABEL_145:
              v124 = (unsigned __int16)v182;
              v125 = (unsigned __int16)v182 & 0xFFC0;
              v126 = v55 + 16 * v40;
              if (v125 >= *(unsigned __int16 *)(v126 + 12))
                v125 = *(unsigned __int16 *)(v126 + 12);
              *(_WORD *)(v126 + 12) = v125;
              if (*(unsigned __int16 *)(v126 + 14) > v124)
                v124 = *(unsigned __int16 *)(v126 + 14);
              *(_WORD *)(v126 + 14) = v124;
              if (v120)
              {
                v127 = *(_DWORD *)(v120 - 4);
                v107 = __OFSUB__(v124, v125);
                v128 = v124 - v125;
                if (v128 < 0 != v107)
                  v128 += 7;
                if (2 * (v128 >> 3) < (2 * v127))
                {
                  v163 = (WTF::BitVector *)(v55 + 16 * v40);
                  v164 = v30;
                  v165 = v33;
                  WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToBitVector(v163, v15, (uint64_t)v114, 65534, 1, 8, a7, a8);
                  a6 = 8;
                  a5 = 1;
                  a4 = 65534;
                  result = 0xFFFFLL;
                  v33 = v165;
                  v30 = v164;
                }
              }
              goto LABEL_154;
            }
            if (!(_DWORD)v123)
            {
              v154 = v33;
              v155 = v30;
              v156 = 8;
LABEL_203:
              WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash((uint64_t *)(v55 + 16 * v40), v156, v114);
              v120 = *(_QWORD *)v56;
              v30 = v155;
              v33 = v154;
              result = 0xFFFFLL;
              a4 = 65534;
              a5 = 1;
              a6 = 8;
              goto LABEL_145;
            }
          }
          v154 = v33;
          v155 = v30;
          v156 = (_DWORD)v123 << (6 * *(_DWORD *)(v120 - 12) >= (2 * v123));
          goto LABEL_203;
        }
        if (!v57)
        {
          v134 = (unsigned __int16)v35 & 0xFFC0;
          v135 = v55 + 16 * v40;
          *(_WORD *)(v135 + 12) = v35 & 0xFFC0;
          *(_WORD *)(v135 + 14) = v35;
          *v58 = 1;
          v136 = *(_QWORD *)v56;
          if ((*(_QWORD *)v56 & 0x8000000000000000) != 0)
            v137 = 63;
          else
            v137 = *(_QWORD *)(2 * v136);
          v138 = v35 - v134;
          v15 = v35 - v134 + 1;
          if (v137 < v15)
          {
            v169 = v30;
            v170 = v33;
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v56, v15, 0);
            a6 = 8;
            a5 = 1;
            a4 = 65534;
            result = 0xFFFFLL;
            v33 = v170;
            v30 = v169;
            v136 = *(_QWORD *)v56;
          }
          v139 = 2 * v136 + 8;
          if (v136 < 0)
            v139 = (uint64_t)v56;
          v71 = 1;
          *(_QWORD *)(v139 + ((v138 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
          goto LABEL_60;
        }
        v59 = v55 + 16 * v40;
        v62 = *(unsigned __int16 *)(v59 + 12);
        v61 = (_WORD *)(v59 + 12);
        v60 = v62;
        v64 = v61 + 1;
        v63 = (unsigned __int16)v61[1];
        if (v62 <= v35 && v63 >= v35)
        {
          v66 = v35 - v60;
          if (*(uint64_t *)v56 >= 0)
            v67 = 2 * *(_QWORD *)v56 + 8;
          else
            v67 = (uint64_t)v56;
          v68 = (v66 >> 3) & 0x1FFFFFFFFFFFFFF8;
          v69 = 1 << v66;
          v70 = *(_QWORD *)(v67 + v68);
          v52 = (v70 & (1 << v66)) == 0;
          v71 = v52;
          *(_QWORD *)(v67 + v68) = v70 | v69;
          if (v52)
            ++v57;
          *v58 = v57;
          goto LABEL_60;
        }
        *v58 = v57 + 1;
        if (((unsigned __int16)v35 & 0xFFC0u) >= v60)
          v80 = v60;
        else
          v80 = (unsigned __int16)v35 & 0xFFC0;
        if (v63 <= v35)
          v81 = v35;
        else
          v81 = v63;
        v82 = v81 - v80;
        if (v81 < (int)v80)
          v82 = v81 - v80 + 7;
        if ((v57 + 1) > 8)
          v83 = v57 + 1;
        else
          v83 = 8;
        if (12 * v83 >= (v82 >> 3))
        {
          if (v60 > v35)
          {
            v143 = (int)v60 - (int)v80;
            if ((v143 & 0x3F) != 0)
            {
              __break(0xC471u);
              goto LABEL_223;
            }
            v144 = v33;
            v145 = v30;
            if ((*(_QWORD *)v56 & 0x8000000000000000) != 0)
              v146 = 63;
            else
              v146 = *(_QWORD *)(2 * *(_QWORD *)v56);
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v56, v146 + v143, v143 >> 6);
            *v61 = v80;
            v60 = v80;
            v30 = v145;
            v33 = v144;
            result = 0xFFFFLL;
            a4 = 65534;
            a5 = 1;
            a6 = 8;
          }
          v84 = *(_QWORD *)v56;
          if ((*(_QWORD *)v56 & 0x8000000000000000) != 0)
            v85 = 63;
          else
            v85 = *(_QWORD *)(2 * v84);
          v86 = v35 - v60;
          v15 = v35 - v60 + 1;
          if (v85 < v15)
          {
            v149 = v30;
            v150 = v33;
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v56, v15, 0);
            a6 = 8;
            a5 = 1;
            a4 = 65534;
            result = 0xFFFFLL;
            v33 = v150;
            v30 = v149;
            v84 = *(_QWORD *)v56;
          }
          v87 = 2 * v84 + 8;
          if (v84 < 0)
            v87 = (uint64_t)v56;
          *(_QWORD *)(v87 + ((v86 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v86;
          *v64 = v81;
          v71 = 1;
          goto LABEL_60;
        }
        v158 = v30;
        v159 = v33;
        WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToHashSet((uint64_t)v56);
        WTF::HashSet<unsigned short,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTableTraits>::add((uint64_t)&v183, (uint64_t *)v56, &v182);
        a6 = 8;
        a5 = 1;
        a4 = 65534;
        result = 0xFFFFLL;
        v33 = v159;
        v30 = v158;
        *v61 = v80;
        *v64 = v81;
LABEL_154:
        v71 = 1;
LABEL_60:
        *(_DWORD *)(v9 + 40) += v71;
LABEL_61:
        if (++v32 == v33)
          goto LABEL_175;
      }
      v88 = *(_QWORD *)v37;
      if (*(_QWORD *)v37)
        goto LABEL_104;
      v171 = v30;
      v172 = v33;
      WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand((uint64_t *)(v36 + 16 * WORD1(v179)), 0);
      a6 = 8;
      a5 = 1;
      a4 = 65534;
      result = 0xFFFFLL;
      v33 = v172;
      v30 = v171;
      v88 = *(_QWORD *)v37;
      if (*(_QWORD *)v37)
LABEL_104:
        v89 = *(_DWORD *)(v88 - 8);
      else
        v89 = 0;
      LODWORD(v40) = (unsigned __int16)v34;
      v90 = 9
          * ((~((_DWORD)v40 << 15) + (unsigned __int16)v34) ^ ((~((_DWORD)v40 << 15)
                                                              + (unsigned __int16)v34) >> 10));
      v91 = (v90 ^ (v90 >> 6)) + ~((v90 ^ (v90 >> 6)) << 11);
      v92 = v89 & (v91 ^ HIWORD(v91));
      v93 = (unsigned __int16 *)(v88 + 2 * v92);
      v94 = *v93;
      if (v94 != 0xFFFF)
      {
        v95 = 0;
        v96 = 1;
        do
        {
          if ((unsigned __int16)v94 == (unsigned __int16)v34)
          {
            v53 = 0;
            goto LABEL_46;
          }
          if ((unsigned __int16)v94 == 65534)
            v95 = v93;
          v92 = (v92 + v96) & v89;
          v93 = (unsigned __int16 *)(v88 + 2 * v92);
          v94 = *v93;
          ++v96;
        }
        while (v94 != 0xFFFF);
        if (v95)
        {
          *v95 = -1;
          --*(_DWORD *)(*(_QWORD *)v37 - 16);
          LOWORD(v34) = (_WORD)v182;
          v93 = v95;
        }
      }
      *v93 = v34;
      v97 = *(_QWORD *)v37;
      if (*(_QWORD *)v37)
        v98 = *(_DWORD *)(v97 - 12) + 1;
      else
        v98 = 1;
      *(_DWORD *)(v97 - 12) = v98;
      v99 = *(_QWORD *)v37;
      if (*(_QWORD *)v37)
        v100 = *(_DWORD *)(v99 - 12);
      else
        v100 = 0;
      v101 = (*(_DWORD *)(v99 - 16) + v100);
      v102 = *(unsigned int *)(v99 - 4);
      if (v102 > 0x400)
      {
        if (v102 > 2 * v101)
          goto LABEL_119;
      }
      else
      {
        if (3 * v102 > 4 * v101)
        {
LABEL_119:
          v103 = (unsigned __int16)v182;
          v104 = (unsigned __int16)v182 & 0xFFC0;
          v105 = v36 + 16 * v35;
          if (v104 >= *(unsigned __int16 *)(v105 + 12))
            v104 = *(unsigned __int16 *)(v105 + 12);
          *(_WORD *)(v105 + 12) = v104;
          if (*(unsigned __int16 *)(v105 + 14) > v103)
            v103 = *(unsigned __int16 *)(v105 + 14);
          *(_WORD *)(v105 + 14) = v103;
          if (v99)
          {
            v106 = *(_DWORD *)(v99 - 4);
            v107 = __OFSUB__(v103, v104);
            v108 = v103 - v104;
            if (v108 < 0 != v107)
              v108 += 7;
            if (2 * (v108 >> 3) < (2 * v106))
            {
              v160 = (WTF::BitVector *)(v36 + 16 * v35);
              v161 = v30;
              v162 = v33;
              WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToBitVector(v160, v15, (uint64_t)v93, 65534, 1, 8, a7, a8);
              a6 = 8;
              a5 = 1;
              a4 = 65534;
              result = 0xFFFFLL;
              v33 = v162;
              v30 = v161;
            }
          }
          goto LABEL_128;
        }
        if (!(_DWORD)v102)
        {
          v151 = v33;
          v152 = v30;
          v153 = 8;
LABEL_201:
          WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash((uint64_t *)(v36 + 16 * v35), v153, v93);
          v99 = *(_QWORD *)v37;
          v30 = v152;
          v33 = v151;
          result = 0xFFFFLL;
          a4 = 65534;
          a5 = 1;
          a6 = 8;
          goto LABEL_119;
        }
      }
      v151 = v33;
      v152 = v30;
      v153 = (_DWORD)v102 << (6 * *(_DWORD *)(v99 - 12) >= (2 * v102));
      goto LABEL_201;
    }
LABEL_175:
    v8 = v177;
    v14 = v178;
LABEL_176:
    v179 = *v8;
    v180 = v9;
    goto LABEL_15;
  }
  v179 = *v8;
  v180 = v9;
  v181 = &v179;
  v182 = &v181;
  if ((*(__int16 *)(v12 + 120) - 446) <= 5)
  {
    v183 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachIS4_ZNSA_10forEachDefIS4_ZZNS3_12_GLOBAL__N_127GraphColoringStackAllocatorINS_33UndirectedEdgesDuplicatingAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE3runERKNS_6VectorIPNS3_9StackSlotELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUljE_clEjEUlS5_S6_S7_S8_E_EEvPSA_SW_RKT0_EUlS5_S6_S7_S8_E_EEvSZ_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
    v184 = &v183;
    v185 = (uint64_t **)&v182;
    result = JSC::B3::Air::Inst::forEachArgCustom(v12, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachIS4_ZNSA_10forEachDefIS4_ZZNS3_12_GLOBAL__N_127GraphColoringStackAllocatorINS_33UndirectedEdgesDuplicatingAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE3runERKNS_6VectorIPNS3_9StackSlotELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUljE_clEjEUlS5_S6_S7_S8_E_EEvPSA_SW_RKT0_EUlS5_S6_S7_S8_E_EEvSZ_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v183);
  }
  else
  {
    v16 = *(unsigned int *)(v12 + 12);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = (char *)&JSC::B3::Air::g_formTable
          + 21 * *(__int16 *)(v12 + 120)
          + ((unint64_t)((v16 - 1) * v16) >> 1);
      v19 = 8;
      do
      {
        if (v17 >= *(unsigned int *)(v12 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x19809A574);
        }
        v20 = v18[v17];
        if ((v20 >> 5) - 1 >= 5)
        {
          __break(0xC471u);
          JUMPOUT(0x19809A554);
        }
        if ((v20 & 0xC) == 4)
        ++v17;
        v19 += 32;
      }
      while (v16 != v17);
    }
  }
LABEL_15:
  if (v14)
  {
    v181 = &v179;
    v182 = &v181;
    if ((*(__int16 *)(v14 + 120) - 446) <= 5)
    {
      v183 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachIS4_ZNSA_10forEachDefIS4_ZZNS3_12_GLOBAL__N_127GraphColoringStackAllocatorINS_33UndirectedEdgesDuplicatingAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE3runERKNS_6VectorIPNS3_9StackSlotELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUljE_clEjEUlS5_S6_S7_S8_E_EEvPSA_SW_RKT0_EUlS5_S6_S7_S8_E0_EEvSZ_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v184 = &v183;
      v185 = (uint64_t **)&v182;
      return JSC::B3::Air::Inst::forEachArgCustom(v14, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachIS4_ZNSA_10forEachDefIS4_ZZNS3_12_GLOBAL__N_127GraphColoringStackAllocatorINS_33UndirectedEdgesDuplicatingAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE3runERKNS_6VectorIPNS3_9StackSlotELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUljE_clEjEUlS5_S6_S7_S8_E_EEvPSA_SW_RKT0_EUlS5_S6_S7_S8_E0_EEvSZ_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v183);
    }
    else
    {
      v21 = *(unsigned int *)(v14 + 12);
      if ((_DWORD)v21)
      {
        v22 = 0;
        v23 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *(__int16 *)(v14 + 120)
            + ((unint64_t)((v21 - 1) * v21) >> 1);
        v24 = 8;
        do
        {
          if (v22 >= *(unsigned int *)(v14 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x19809A56CLL);
          }
          v25 = v23[v22];
          if ((v25 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x19809A534);
          }
          if ((v25 & 0xF) - 8 <= 2)
          ++v22;
          v24 += 32;
        }
        while (v21 != v22);
      }
    }
  }
  return result;
}

float *std::sort[abi:sn180100]<JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::CoalescableMove *,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::run(WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::CoalescableMove&,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::CoalescableMove&)#1}>(float *a1, float *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = 126 - 2 * __clz(((char *)a2 - (char *)a1) >> 3);
  if (a2 == a1)
    v3 = 0;
  else
    v3 = v2;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::run(WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t result, _BYTE *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 16);
  if ((a3 - 8) < 3
    || (a3 & 0xFFFFFFFC) == 4
    && (a2[8] != 9
     || *(_BYTE *)(*(_QWORD *)a2 + 4) != 1
     || (v4 = **(_QWORD **)(v3 + 8),
         v5 = *(unsigned int *)(*(_QWORD *)a2 + 8),
         v6 = *(unsigned int *)(*(_QWORD *)(v4 + 32) + 4 * v5),
         *(_DWORD *)(v4 + 60) > v6)
     && *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v6) == (_DWORD)v5))
  {
    **(_BYTE **)v3 = 0;
  }
  return result;
}

_QWORD *WTF::Vector<JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::CoalescableMove,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::CoalescableMove&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;

  *(_QWORD *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

unint64_t WTF::Vector<JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::CoalescableMove,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
  }
  return v3;
}

void WTF::Vector<JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::CoalescableMove,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(_QWORD *)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v14 = 8 * v5;
        v15 = (uint64_t *)v4;
        do
        {
          v16 = *v15++;
          *v6++ = v16;
          v14 -= 8;
        }
        while (v14);
      }
      if (v4)
      {
        if (*(_QWORD *)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachIS4_ZNSA_10forEachDefIS4_ZZNS3_12_GLOBAL__N_127GraphColoringStackAllocatorINS_33UndirectedEdgesDuplicatingAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE3runERKNS_6VectorIPNS3_9StackSlotELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUljE_clEjEUlS5_S6_S7_S8_E_EEvPSA_SW_RKT0_EUlS5_S6_S7_S8_E_EEvSZ_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a3 & 0xFC) == 4)
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::run(WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(unsigned int)#1}::operator() const(unsigned int)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t result, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unsigned int v25;
  unsigned int v26;
  _WORD *v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _WORD *v43;
  unsigned int v44;
  unsigned int v45;
  _WORD *v46;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned __int16 *v75;
  int v76;
  unsigned __int16 *v77;
  int v78;
  unsigned __int16 v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned __int16 *v85;
  int v86;
  unsigned __int16 *v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  int v98;
  BOOL v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int *v133;
  uint64_t v134;
  unint64_t v135;
  unsigned int v136;
  unsigned int *v137;
  uint64_t v138;
  unint64_t v139;
  unsigned int v140;
  unsigned int *v141;
  unint64_t v142;
  uint64_t v143;
  unsigned int *v144;
  unint64_t v145;
  uint64_t v146;
  unsigned int *v147;
  unint64_t v148;
  uint64_t v149;
  unsigned int *v150;
  WTF::BitVector *v151;
  unint64_t v152;
  uint64_t v153;
  unsigned int *v154;
  unint64_t v155;
  uint64_t v156;
  unsigned int *v157;
  unint64_t v158;
  uint64_t v159;
  unsigned int *v160;
  unint64_t v161;
  uint64_t v162;
  unsigned int *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unsigned int *v168;
  unsigned int *v169;
  unsigned int *v170;
  _BYTE v171[30];
  unsigned __int16 v172;

  if (a3 == 9)
  {
    v8 = a2;
    if (*(_BYTE *)(a2 + 4) == 1)
    {
      v9 = **(_QWORD **)result;
      v10 = *(unsigned int *)(v9 + 60);
      if ((_DWORD)v10)
      {
        v11 = *(unsigned int **)(v9 + 48);
        v12 = &v11[v10];
        v13 = *(_QWORD *)(result + 8);
        result = 0xFFFFLL;
        while (1)
        {
          v14 = *(_DWORD *)(v8 + 8);
          v15 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 64) + 8 * *v11) + 8);
          if ((unsigned __int16)v14 != (unsigned __int16)v15)
            break;
LABEL_36:
          if (++v11 == v12)
            return result;
        }
        v16 = (unsigned __int16)v14;
        if (*(_DWORD *)(v13 + 36) <= (unsigned __int16)v14)
        {
          __break(0xC471u);
          JUMPOUT(0x19809B354);
        }
        v17 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 64) + 8 * *v11) + 8);
        v18 = *(_QWORD *)(v13 + 24);
        v19 = (_DWORD *)(v18 + 16 * (unsigned __int16)v14);
        v172 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 64) + 8 * *v11) + 8);
        v21 = v19 + 2;
        v20 = v19[2];
        if (v20 != -1)
        {
          if (!v20)
          {
            v112 = v18 + 16 * v16;
            *(_WORD *)(v112 + 12) = v15 & 0xFFC0;
            *(_WORD *)(v112 + 14) = v15;
            *v21 = 1;
            v113 = *(_QWORD *)v19;
            if ((*(_QWORD *)v19 & 0x8000000000000000) != 0)
              v114 = 63;
            else
              v114 = *(_QWORD *)(2 * v113);
            v115 = v17 - ((unsigned __int16)v17 & 0xFFC0);
            a2 = v115 + 1;
            if (v114 < v115 + 1)
            {
              v151 = (WTF::BitVector *)(v18 + 16 * v16);
              v152 = v8;
              v153 = v9;
              v154 = v12;
              WTF::BitVector::resizeOutOfLine(v151, a2, 0);
              result = 0xFFFFLL;
              v12 = v154;
              v9 = v153;
              v8 = v152;
              v113 = *(_QWORD *)v19;
            }
            v116 = 2 * v113 + 8;
            if (v113 < 0)
              v116 = (uint64_t)v19;
            v35 = 1;
            *(_QWORD *)(v116 + ((v115 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
            goto LABEL_21;
          }
          v22 = v18 + 16 * v16;
          v25 = *(unsigned __int16 *)(v22 + 12);
          v24 = (_WORD *)(v22 + 12);
          v23 = v25;
          v27 = v24 + 1;
          v26 = (unsigned __int16)v24[1];
          if (v25 <= v17 && v26 >= v17)
          {
            v29 = v17 - v23;
            if (*(uint64_t *)v19 >= 0)
              v30 = 2 * *(_QWORD *)v19 + 8;
            else
              v30 = (uint64_t)v19;
            v31 = (v29 >> 3) & 0x1FFFFFFFFFFFFFF8;
            v32 = 1 << v29;
            v33 = *(_QWORD *)(v30 + v31);
            v34 = (v33 & (1 << v29)) == 0;
            v35 = v34;
            *(_QWORD *)(v30 + v31) = v33 | v32;
            if (v34)
              ++v20;
            *v21 = v20;
            goto LABEL_21;
          }
          *v21 = v20 + 1;
          if (((unsigned __int16)v17 & 0xFFC0u) >= v23)
            v54 = v23;
          else
            v54 = (unsigned __int16)v17 & 0xFFC0;
          if (v26 <= v17)
            v55 = v17;
          else
            v55 = v26;
          v56 = v55 - v54;
          if (v55 < (int)v54)
            v56 = v55 - v54 + 7;
          if ((v20 + 1) > 8)
            v57 = v20 + 1;
          else
            v57 = 8;
          if (12 * v57 >= (v56 >> 3))
          {
            if (v23 > v17)
            {
              v122 = (int)v23 - (int)v54;
              if ((v122 & 0x3F) != 0)
              {
LABEL_186:
                __break(0xC471u);
                JUMPOUT(0x19809B234);
              }
              v164 = v9;
              v166 = v8;
              v168 = v12;
              if ((*(_QWORD *)v19 & 0x8000000000000000) != 0)
                v123 = 63;
              else
                v123 = *(_QWORD *)(2 * *(_QWORD *)v19);
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v19, v123 + v122, v122 >> 6);
              *v24 = v54;
              v23 = v54;
              v9 = v164;
              v8 = v166;
              v12 = v168;
              result = 0xFFFFLL;
            }
            v58 = *(_QWORD *)v19;
            if ((*(_QWORD *)v19 & 0x8000000000000000) != 0)
              v59 = 63;
            else
              v59 = *(_QWORD *)(2 * v58);
            v60 = v17 - v23;
            a2 = v60 + 1;
            if (v59 < v60 + 1)
            {
              v128 = v8;
              v129 = v9;
              v170 = v12;
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v19, a2, 0);
              result = 0xFFFFLL;
              v12 = v170;
              v9 = v129;
              v8 = v128;
              v58 = *(_QWORD *)v19;
            }
            v61 = 2 * v58 + 8;
            if (v58 < 0)
              v61 = (uint64_t)v19;
            *(_QWORD *)(v61 + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v60;
            *v27 = v55;
            v35 = 1;
LABEL_21:
            v36 = *(_DWORD *)(v13 + 36);
            *(_DWORD *)(v13 + 40) += v35;
            if (v36 <= v17)
              goto LABEL_186;
            v37 = *(_QWORD *)(v13 + 24);
            v38 = (_DWORD *)(v37 + 16 * v17);
            v172 = v16;
            v40 = v38 + 2;
            v39 = v38[2];
            if (v39 != -1)
            {
              if (!v39)
              {
                v117 = v37 + 16 * v17;
                *(_WORD *)(v117 + 12) = v16 & 0xFFC0;
                *(_WORD *)(v117 + 14) = v16;
                *v40 = 1;
                v118 = *(_QWORD *)v38;
                if ((*(_QWORD *)v38 & 0x8000000000000000) != 0)
                  v119 = 63;
                else
                  v119 = *(_QWORD *)(2 * v118);
                v120 = v16 - ((unsigned __int16)v16 & 0xFFC0);
                a2 = v120 + 1;
                if (v119 < v120 + 1)
                {
                  v155 = v8;
                  v156 = v9;
                  v157 = v12;
                  WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(v37 + 16 * v17), a2, 0);
                  result = 0xFFFFLL;
                  v12 = v157;
                  v9 = v156;
                  v8 = v155;
                  v118 = *(_QWORD *)v38;
                }
                v121 = 2 * v118 + 8;
                if (v118 < 0)
                  v121 = v37 + 16 * v17;
                v53 = 1;
                *(_QWORD *)(v121 + ((v120 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
                goto LABEL_35;
              }
              v41 = v37 + 16 * v17;
              v44 = *(unsigned __int16 *)(v41 + 12);
              v43 = (_WORD *)(v41 + 12);
              v42 = v44;
              v46 = v43 + 1;
              v45 = (unsigned __int16)v43[1];
              if (v44 <= v16 && v45 >= v16)
              {
                v48 = v16 - v42;
                if (*(uint64_t *)v38 >= 0)
                  v49 = 2 * *(_QWORD *)v38 + 8;
                else
                  v49 = v37 + 16 * v17;
                v50 = (v48 >> 3) & 0x1FFFFFFFFFFFFFF8;
                v51 = 1 << v48;
                v52 = *(_QWORD *)(v49 + v50);
                v34 = (v52 & (1 << v48)) == 0;
                v53 = v34;
                *(_QWORD *)(v49 + v50) = v52 | v51;
                if (v34)
                  ++v39;
                *v40 = v39;
                goto LABEL_35;
              }
              *v40 = v39 + 1;
              if (((unsigned __int16)v16 & 0xFFC0u) >= v42)
                v62 = v42;
              else
                v62 = (unsigned __int16)v16 & 0xFFC0;
              if (v45 <= v16)
                v63 = v16;
              else
                v63 = v45;
              v64 = v63 - v62;
              if (v63 < (int)v62)
                v64 = v63 - v62 + 7;
              if ((v39 + 1) > 8)
                v65 = v39 + 1;
              else
                v65 = 8;
              if (12 * v65 >= (v64 >> 3))
              {
                if (v42 > v16)
                {
                  v124 = (int)v42 - (int)v62;
                  if ((v124 & 0x3F) != 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19809B254);
                  }
                  v169 = v12;
                  v125 = v9;
                  v126 = v8;
                  if ((*(_QWORD *)v38 & 0x8000000000000000) != 0)
                    v127 = 63;
                  else
                    v127 = *(_QWORD *)(2 * *(_QWORD *)v38);
                  WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v38, v127 + v124, v124 >> 6);
                  *v43 = v62;
                  v42 = v62;
                  v8 = v126;
                  v9 = v125;
                  v12 = v169;
                  result = 0xFFFFLL;
                }
                v66 = *(_QWORD *)v38;
                if ((*(_QWORD *)v38 & 0x8000000000000000) != 0)
                  v67 = 63;
                else
                  v67 = *(_QWORD *)(2 * v66);
                v68 = v16 - v42;
                a2 = v16 - v42 + 1;
                if (v67 < a2)
                {
                  v130 = v8;
                  v131 = v9;
                  v132 = v12;
                  WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v38, a2, 0);
                  result = 0xFFFFLL;
                  v12 = v132;
                  v9 = v131;
                  v8 = v130;
                  v66 = *(_QWORD *)v38;
                }
                v69 = 2 * v66 + 8;
                if (v66 < 0)
                  v69 = (uint64_t)v38;
                *(_QWORD *)(v69 + ((v68 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v68;
                *v46 = v63;
                v53 = 1;
                goto LABEL_35;
              }
              v142 = v8;
              v143 = v9;
              v144 = v12;
              WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToHashSet((uint64_t)v38);
              WTF::HashSet<unsigned short,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTableTraits>::add((uint64_t)v171, (uint64_t *)v38, &v172);
              result = 0xFFFFLL;
              v12 = v144;
              v9 = v143;
              v8 = v142;
              *v43 = v62;
              *v46 = v63;
LABEL_113:
              v53 = 1;
LABEL_35:
              *(_DWORD *)(v13 + 40) += v53;
              goto LABEL_36;
            }
            v80 = *(_QWORD *)v38;
            if (*(_QWORD *)v38)
              goto LABEL_89;
            v161 = v8;
            v162 = v9;
            v163 = v12;
            WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand((uint64_t *)(v37 + 16 * v17), 0);
            result = 0xFFFFLL;
            v12 = v163;
            v9 = v162;
            v8 = v161;
            v80 = *(_QWORD *)v38;
            if (*(_QWORD *)v38)
LABEL_89:
              v81 = *(_DWORD *)(v80 - 8);
            else
              v81 = 0;
            v82 = 9 * ((v16 + ~((_DWORD)v16 << 15)) ^ ((v16 + ~((_DWORD)v16 << 15)) >> 10));
            v83 = (v82 ^ (v82 >> 6)) + ~((v82 ^ (v82 >> 6)) << 11);
            v84 = v81 & (v83 ^ HIWORD(v83));
            v85 = (unsigned __int16 *)(v80 + 2 * v84);
            v86 = *v85;
            if (v86 != 0xFFFF)
            {
              v87 = 0;
              v88 = 1;
              do
              {
                if ((_DWORD)v16 == (unsigned __int16)v86)
                {
                  v53 = 0;
                  goto LABEL_35;
                }
                if ((unsigned __int16)v86 == 65534)
                  v87 = v85;
                v84 = (v84 + v88) & v81;
                v85 = (unsigned __int16 *)(v80 + 2 * v84);
                v86 = *v85;
                ++v88;
              }
              while (v86 != 0xFFFF);
              if (v87)
              {
                *v87 = -1;
                --*(_DWORD *)(*(_QWORD *)v38 - 16);
                LOWORD(v16) = v172;
                v85 = v87;
              }
            }
            *v85 = v16;
            v89 = *(_QWORD *)v38;
            if (*(_QWORD *)v38)
              v90 = *(_DWORD *)(v89 - 12) + 1;
            else
              v90 = 1;
            *(_DWORD *)(v89 - 12) = v90;
            v91 = *(_QWORD *)v38;
            if (*(_QWORD *)v38)
              v92 = *(_DWORD *)(v91 - 12);
            else
              v92 = 0;
            v93 = (*(_DWORD *)(v91 - 16) + v92);
            v94 = *(unsigned int *)(v91 - 4);
            if (v94 > 0x400)
            {
              if (v94 > 2 * v93)
                goto LABEL_104;
            }
            else
            {
              if (3 * v94 > 4 * v93)
              {
LABEL_104:
                v95 = v172;
                v96 = v172 & 0xFFC0;
                v97 = v37 + 16 * v17;
                if (v96 >= *(unsigned __int16 *)(v97 + 12))
                  v96 = *(unsigned __int16 *)(v97 + 12);
                *(_WORD *)(v97 + 12) = v96;
                if (*(unsigned __int16 *)(v97 + 14) > v95)
                  v95 = *(unsigned __int16 *)(v97 + 14);
                *(_WORD *)(v97 + 14) = v95;
                if (v91)
                {
                  v98 = *(_DWORD *)(v91 - 4);
                  v99 = __OFSUB__(v95, v96);
                  v100 = v95 - v96;
                  if (v100 < 0 != v99)
                    v100 += 7;
                  if (2 * (v100 >> 3) < (2 * v98))
                  {
                    v148 = v8;
                    v149 = v9;
                    v150 = v12;
                    WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToBitVector((WTF::BitVector *)(v37 + 16 * v17), a2, (uint64_t)v85, 0xFFFFFFFFLL, 65534, 1, 8, a8);
                    result = 0xFFFFLL;
                    v12 = v150;
                    v9 = v149;
                    v8 = v148;
                  }
                }
                goto LABEL_113;
              }
              if (!(_DWORD)v94)
              {
                v137 = v12;
                v138 = v9;
                v139 = v8;
                v140 = 8;
LABEL_174:
                WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash((uint64_t *)(v37 + 16 * v17), v140, v85);
                v91 = *(_QWORD *)v38;
                v8 = v139;
                v9 = v138;
                v12 = v137;
                result = 0xFFFFLL;
                goto LABEL_104;
              }
            }
            v137 = v12;
            v138 = v9;
            v139 = v8;
            v140 = (_DWORD)v94 << (6 * *(_DWORD *)(v91 - 12) >= (2 * v94));
            goto LABEL_174;
          }
          v165 = v9;
          v167 = v8;
          v141 = v12;
          WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToHashSet((uint64_t)v19);
          WTF::HashSet<unsigned short,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::HashTableTraits>::add((uint64_t)v171, (uint64_t *)v19, &v172);
          result = 0xFFFFLL;
          v12 = v141;
          v9 = v165;
          v8 = v167;
          *v24 = v54;
          *v27 = v55;
LABEL_134:
          v35 = 1;
          goto LABEL_21;
        }
        v70 = *(_QWORD *)v19;
        if (*(_QWORD *)v19)
          goto LABEL_79;
        v158 = v8;
        v159 = v9;
        v160 = v12;
        WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::expand((uint64_t *)(v18 + 16 * v16), 0);
        result = 0xFFFFLL;
        v12 = v160;
        v9 = v159;
        v8 = v158;
        v70 = *(_QWORD *)v19;
        if (*(_QWORD *)v19)
LABEL_79:
          v71 = *(_DWORD *)(v70 - 8);
        else
          v71 = 0;
        v72 = 9 * ((v17 + ~((_DWORD)v17 << 15)) ^ ((v17 + ~((_DWORD)v17 << 15)) >> 10));
        v73 = (v72 ^ (v72 >> 6)) + ~((v72 ^ (v72 >> 6)) << 11);
        v74 = v71 & (v73 ^ HIWORD(v73));
        v75 = (unsigned __int16 *)(v70 + 2 * v74);
        v76 = *v75;
        if (v76 == 0xFFFF)
        {
          v79 = v17;
        }
        else
        {
          v77 = 0;
          v78 = 1;
          do
          {
            if ((_DWORD)v17 == (unsigned __int16)v76)
            {
              v35 = 0;
              goto LABEL_21;
            }
            if ((unsigned __int16)v76 == 65534)
              v77 = v75;
            v74 = (v74 + v78) & v71;
            v75 = (unsigned __int16 *)(v70 + 2 * v74);
            v76 = *v75;
            ++v78;
          }
          while (v76 != 0xFFFF);
          v79 = v17;
          if (v77)
          {
            *v77 = -1;
            --*(_DWORD *)(*(_QWORD *)v19 - 16);
            v79 = v172;
            v75 = v77;
          }
        }
        *v75 = v79;
        v101 = *(_QWORD *)v19;
        if (*(_QWORD *)v19)
          v102 = *(_DWORD *)(v101 - 12) + 1;
        else
          v102 = 1;
        *(_DWORD *)(v101 - 12) = v102;
        v103 = *(_QWORD *)v19;
        if (*(_QWORD *)v19)
          v104 = *(_DWORD *)(v103 - 12);
        else
          v104 = 0;
        v105 = (*(_DWORD *)(v103 - 16) + v104);
        v106 = *(unsigned int *)(v103 - 4);
        if (v106 > 0x400)
        {
          if (v106 > 2 * v105)
            goto LABEL_125;
        }
        else
        {
          if (3 * v106 > 4 * v105)
          {
LABEL_125:
            v107 = v172;
            v108 = v172 & 0xFFC0;
            v109 = v18 + 16 * v16;
            if (v108 >= *(unsigned __int16 *)(v109 + 12))
              v108 = *(unsigned __int16 *)(v109 + 12);
            *(_WORD *)(v109 + 12) = v108;
            if (*(unsigned __int16 *)(v109 + 14) > v107)
              v107 = *(unsigned __int16 *)(v109 + 14);
            *(_WORD *)(v109 + 14) = v107;
            if (v103)
            {
              v110 = *(_DWORD *)(v103 - 4);
              v99 = __OFSUB__(v107, v108);
              v111 = v107 - v108;
              if (v111 < 0 != v99)
                v111 += 7;
              if (2 * (v111 >> 3) < (2 * v110))
              {
                v145 = v8;
                v146 = v9;
                v147 = v12;
                WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::transitionToBitVector((WTF::BitVector *)(v18 + 16 * v16), a2, (uint64_t)v75, 0xFFFFFFFFLL, 65534, 1, 8, a8);
                result = 0xFFFFLL;
                v12 = v147;
                v9 = v146;
                v8 = v145;
              }
            }
            goto LABEL_134;
          }
          if (!(_DWORD)v106)
          {
            v133 = v12;
            v134 = v9;
            v135 = v8;
            v136 = 8;
LABEL_172:
            WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>::rehash((uint64_t *)(v18 + 16 * v16), v136, v75);
            v103 = *(_QWORD *)v19;
            v8 = v135;
            v9 = v134;
            v12 = v133;
            result = 0xFFFFLL;
            goto LABEL_125;
          }
        }
        v133 = v12;
        v134 = v9;
        v135 = v8;
        v136 = (_DWORD)v106 << (6 * *(_DWORD *)(v103 - 12) >= (2 * v106));
        goto LABEL_172;
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachIS4_ZNSA_10forEachDefIS4_ZZNS3_12_GLOBAL__N_127GraphColoringStackAllocatorINS_33UndirectedEdgesDuplicatingAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetItEEtEEEEE3runERKNS_6VectorIPNS3_9StackSlotELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUljE_clEjEUlS5_S6_S7_S8_E_EEvPSA_SW_RKT0_EUlS5_S6_S7_S8_E0_EEvSZ_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a3 - 8) <= 2)
  return result;
}

float *std::__introsort<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::run(WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::CoalescableMove &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::CoalescableMove &)#1} &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::CoalescableMove*,false>(float *result, float *a2, uint64_t a3, char a4)
{
  float *v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  unint64_t v13;
  float *v14;
  uint64_t v15;
  float *v16;
  char v17;
  BOOL v18;
  uint64_t v19;

  v6 = result;
LABEL_2:
  v7 = v6;
LABEL_3:
  v8 = 1 - a3;
  while (2)
  {
    v6 = v7;
    v9 = v8;
    v10 = (char *)a2 - (char *)v7;
    v11 = ((char *)a2 - (char *)v7) >> 3;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(a2 - 1) > v7[1])
        {
          v19 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v19;
        }
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
      default:
        if (v10 > 191)
        {
          if (v9 == 1)
          v12 = a2 - 2;
          v13 = v11 >> 1;
          v14 = &v7[2 * (v11 >> 1)];
          if ((unint64_t)v10 < 0x401)
          {
          }
          else
          {
            v15 = *(_QWORD *)v7;
            *(_QWORD *)v7 = *(_QWORD *)v14;
            *(_QWORD *)v14 = v15;
          }
          if ((a4 & 1) == 0 && *(v7 - 1) <= v7[1])
          {
            v7 = result;
            goto LABEL_15;
          }
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v7 = v16 + 2;
          if (!(_DWORD)result)
          {
            v8 = v9 + 1;
            if (v18)
              continue;
LABEL_14:
            v7 = v16 + 2;
LABEL_15:
            a4 = 0;
            a3 = -v9;
            goto LABEL_3;
          }
          a3 = -v9;
          a2 = v16;
          if (v18)
            return result;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        else
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::run(WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::CoalescableMove &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::CoalescableMove &)#1} &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>,unsigned short>>>::CoalescableMove*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  float v26;
  int v27;
  uint64_t v28;
  float v29;
  uint64_t v30;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 4) > *(float *)(a1 + 4))
      {
        v6 = *(_QWORD *)a1;
        goto LABEL_6;
      }
      return result;
    case 3:
      v7 = *(float *)(a1 + 12);
      v8 = *(float *)(a2 - 4);
      if (v7 <= *(float *)(a1 + 4))
      {
        if (v8 > v7)
        {
          v18 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v18;
          if (*(float *)(a1 + 12) > *(float *)(a1 + 4))
            *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
        }
      }
      else
      {
        v6 = *(_QWORD *)a1;
        if (v8 > v7)
        {
LABEL_6:
          *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
LABEL_7:
          *(_QWORD *)(a2 - 8) = v6;
          return result;
        }
        *(_QWORD *)a1 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v6;
        if (*(float *)(a2 - 4) > *((float *)&v6 + 1))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
          goto LABEL_7;
        }
      }
      return result;
    case 4:
      return 1;
    case 5:
      if (*(float *)(a2 - 4) > *(float *)(a1 + 28))
      {
        v13 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v13;
        if (*(float *)(a1 + 28) > *(float *)(a1 + 20))
        {
          v15 = *(_QWORD *)(a1 + 16);
          v14 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 16) = v14;
          *(_QWORD *)(a1 + 24) = v15;
          if (*(float *)(a1 + 12) < *((float *)&v14 + 1))
          {
            v16 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v14;
            *(_QWORD *)(a1 + 16) = v16;
            if (*(float *)(a1 + 4) < *((float *)&v14 + 1))
            {
              v17 = *(_QWORD *)a1;
              *(_QWORD *)a1 = v14;
              *(_QWORD *)(a1 + 8) = v17;
            }
          }
        }
      }
      return 1;
    default:
      v9 = *(float *)(a1 + 12);
      v10 = *(float *)(a1 + 4);
      v11 = *(float *)(a1 + 20);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          v20 = *(_QWORD *)(a1 + 8);
          v19 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 8) = v19;
          *(_QWORD *)(a1 + 16) = v20;
          if (v10 < *((float *)&v19 + 1))
          {
            v21 = *(_QWORD *)a1;
            *(_QWORD *)a1 = v19;
            *(_QWORD *)(a1 + 8) = v21;
          }
        }
      }
      else
      {
        v12 = *(_QWORD *)a1;
        if (v11 <= v9)
        {
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v12;
          if (v11 <= *((float *)&v12 + 1))
            goto LABEL_28;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
        }
        else
        {
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 16);
        }
        *(_QWORD *)(a1 + 16) = v12;
      }
LABEL_28:
      v22 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v23 = 0;
      v24 = 0;
      v25 = a1 + 16;
      while (1)
      {
        v26 = *(float *)(v22 + 4);
        if (v26 > *(float *)(v25 + 4))
        {
          v27 = *(_DWORD *)v22;
          v28 = v23;
          while (1)
          {
            *(_QWORD *)(a1 + v28 + 24) = *(_QWORD *)(a1 + v28 + 16);
            if (v28 == -16)
              break;
            v29 = *(float *)(a1 + v28 + 12);
            v28 -= 8;
            if (v29 >= v26)
            {
              v30 = a1 + v28 + 24;
              goto LABEL_36;
            }
          }
          v30 = a1;
LABEL_36:
          *(_DWORD *)v30 = v27;
          *(float *)(v30 + 4) = v26;
          if (++v24 == 8)
            return v22 + 8 == a2;
        }
        v25 = v22;
        v23 += 8;
        v22 += 8;
        if (v22 == a2)
          return 1;
      }
  }
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::BitVector::iterator,std::__variant_detail::_Trait::HashTableConstIteratorAdapter<std::__variant_detail::_Trait::HashTable<unsigned short,unsigned short,std::__variant_detail::_Trait::IdentityExtractor,std::__variant_detail::_Trait::IntHash<unsigned short>,std::__variant_detail::_Trait::UnsignedWithZeroKeyHashTraits<unsigned short>,std::__variant_detail::_Trait::UnsignedWithZeroKeyHashTraits>,unsigned short>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::BitVector::iterator,std::__variant_detail::_Trait::HashTableConstIteratorAdapter<std::__variant_detail::_Trait::HashTable<unsigned short,unsigned short,std::__variant_detail::_Trait::IdentityExtractor,std::__variant_detail::_Trait::IntHash<unsigned short>,std::__variant_detail::_Trait::UnsignedWithZeroKeyHashTraits<unsigned short>,std::__variant_detail::_Trait::UnsignedWithZeroKeyHashTraits>,unsigned short>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + 8) == *(_QWORD *)(a3 + 8);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::BitVector::iterator,std::__variant_detail::_Trait::HashTableConstIteratorAdapter<std::__variant_detail::_Trait::HashTable<unsigned short,unsigned short,std::__variant_detail::_Trait::IdentityExtractor,std::__variant_detail::_Trait::IntHash<unsigned short>,std::__variant_detail::_Trait::UnsignedWithZeroKeyHashTraits<unsigned short>,std::__variant_detail::_Trait::UnsignedWithZeroKeyHashTraits>,unsigned short>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::BitVector::iterator,std::__variant_detail::_Trait::HashTableConstIteratorAdapter<std::__variant_detail::_Trait::HashTable<unsigned short,unsigned short,std::__variant_detail::_Trait::IdentityExtractor,std::__variant_detail::_Trait::IntHash<unsigned short>,std::__variant_detail::_Trait::UnsignedWithZeroKeyHashTraits<unsigned short>,std::__variant_detail::_Trait::UnsignedWithZeroKeyHashTraits>,unsigned short>> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::iterator::operator*(void)::{lambda(WTF::BitVector::iterator const&)#1},WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::iterator::operator*(void)::{lambda(WTF::HashTableConstIteratorAdapter<WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>,unsigned short> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::BitVector::iterator,WTF::HashTableConstIteratorAdapter<WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>,unsigned short>> const&>(uint64_t a1, uint64_t a2)
{
  return (unsigned __int16)(*(_WORD *)(**(_QWORD **)a1 + 24) + *(_WORD *)(a2 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::iterator::operator*(void)::{lambda(WTF::BitVector::iterator const&)#1},WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::iterator::operator*(void)::{lambda(WTF::HashTableConstIteratorAdapter<WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>,unsigned short> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::BitVector::iterator,WTF::HashTableConstIteratorAdapter<WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>,unsigned short>> const&>(uint64_t a1, unsigned __int16 **a2)
{
  return **a2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::iterator::operator++(void)::{lambda(WTF::BitVector::iterator &)#1},WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::iterator::operator++(void)::{lambda(WTF::HashTableConstIteratorAdapter<WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>,unsigned short> &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::BitVector::iterator,WTF::HashTableConstIteratorAdapter<WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>,unsigned short>> &>(uint64_t a1, unint64_t **a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v2 = (unint64_t)a2[1] + 1;
  v3 = **a2;
  if ((v3 & 0x8000000000000000) != 0)
  {
    v5 = __clz(__rbit64(v3 >> v2)) + v2;
    if (v5 >= 0x3F)
      v5 = 63;
  }
  else
  {
    v4 = 2 * v3;
    v5 = *(_QWORD *)(2 * v3);
    v6 = v5 + 63;
    v7 = v2 >> 6;
    if (v2 >> 6 < (v5 + 63) >> 6)
    {
      v8 = *(_QWORD *)(v4 + 8 * v7 + 8);
      if (!v8 || (v9 = __clz(__rbit64(v8 >> v2)) + (v2 & 0x3F), v9 >= 0x40))
      {
        if (v7 + 1 == v6 >> 6)
          goto LABEL_6;
        v10 = v4 + 16;
        while (1)
        {
          v11 = *(_QWORD *)(v10 + 8 * v7);
          if (v11)
          {
            v9 = __clz(__rbit64(v11));
            if (v9 <= 0x3F)
              break;
          }
          if ((v6 >> 6) - 1 == ++v7)
            goto LABEL_6;
        }
        ++v7;
      }
      v5 = v9 + (v7 << 6);
    }
  }
LABEL_6:
  a2[1] = (unint64_t *)v5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::iterator::operator++(void)::{lambda(WTF::BitVector::iterator &)#1},WTF::LikelyDenseUnsignedIntegerSet<unsigned short>::iterator::operator++(void)::{lambda(WTF::HashTableConstIteratorAdapter<WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>,unsigned short> &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::BitVector::iterator,WTF::HashTableConstIteratorAdapter<WTF::HashTable<unsigned short,unsigned short,WTF::IdentityExtractor,WTF::IntHash<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>,WTF::UnsignedWithZeroKeyHashTraits<unsigned short>>,unsigned short>> &>(uint64_t a1, unsigned __int16 **a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;

  v2 = a2[1];
  v3 = *a2 + 1;
  for (*a2 = v3; v3 != v2; *a2 = v3)
  {
    if (*v3 < 0xFFFEu)
      break;
    ++v3;
  }
}

uint64_t JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::run(WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(unsigned int)#1}::operator()(uint64_t result, unsigned int a2)
{
  uint64_t **v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned __int8 v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned __int8 v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned __int8 v49;
  unsigned int v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t ***v59;
  void *v60;
  void **v61;
  uint64_t ****v62;

  v2 = (uint64_t **)result;
  v3 = **(_QWORD **)(result + 8);
  v4 = *(_DWORD *)(v3 + 20);
  if (v4 <= a2)
    v5 = 0;
  else
    v5 = *(_QWORD *)(v3 + 8) + ((unint64_t)a2 << 7);
  v6 = *(_QWORD *)(result + 16);
  v7 = a2 + 1;
  if (v4 <= v7)
  {
    v8 = 0;
    if (!v5)
      goto LABEL_42;
  }
  else
  {
    v8 = *(_QWORD *)(v3 + 8) + (v7 << 7);
    if (!v5)
      goto LABEL_42;
  }
  if (!(_DWORD)result)
  {
    v51 = v8;
    v56 = *v2;
    v57 = v6;
    v58 = &v56;
    v59 = &v58;
    if ((*(__int16 *)(v5 + 120) - 446) > 5)
    {
      v54 = *(unsigned int *)(v5 + 12);
      if ((_DWORD)v54)
      {
        v17 = 0;
        v52 = (char *)&JSC::B3::Air::g_formTable
            + 21 * *(__int16 *)(v5 + 120)
            + ((unint64_t)((v54 - 1) * v54) >> 1);
        do
        {
          if (v17 >= *(unsigned int *)(v5 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x19809BFE4);
          }
          v18 = v52[v17];
          if ((v18 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x19809BFB4);
          }
          if ((v18 & 0xC) == 4)
          {
            v19 = (_BYTE *)(*(_QWORD *)v5 + 32 * v17);
            if (v19[8] == 9)
            {
              v20 = *(_QWORD *)v19;
              if (*(_BYTE *)(*(_QWORD *)v19 + 4) == 1)
              {
                v21 = **v58;
                v22 = *(unsigned int *)(v21 + 60);
                if ((_DWORD)v22)
                {
                  v23 = v58[1];
                  v24 = *(unsigned int **)(v21 + 48);
                  v25 = 4 * v22;
                  do
                  {
                    v26 = *(_DWORD *)(v20 + 8);
                    v27 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v21 + 64) + 8 * *v24) + 8);
                    if (v26 != v27)
                    {
                      if (*((_DWORD *)v23 + 9) <= v26)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19809BFD4);
                      }
                      v28 = WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(v23[3] + 24 * v26), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v21 + 64) + 8 * *v24) + 8));
                      v29 = *((_DWORD *)v23 + 9);
                      *((_DWORD *)v23 + 10) += v28;
                      if (v29 <= v27)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19809BFDCLL);
                      }
                      result = WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(v23[3] + 24 * v27), v26);
                      *((_DWORD *)v23 + 10) += result;
                    }
                    ++v24;
                    v25 -= 4;
                  }
                  while (v25);
                }
              }
            }
          }
          ++v17;
        }
        while (v17 != v54);
      }
    }
    else
    {
      v60 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachIS4_ZNSA_10forEachDefIS4_ZZNS3_12_GLOBAL__N_127GraphColoringStackAllocatorINS_33UndirectedEdgesDuplicatingAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE3runERKNS_6VectorIPNS3_9StackSlotELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUljE_clEjEUlS5_S6_S7_S8_E_EEvPSA_SW_RKT0_EUlS5_S6_S7_S8_E_EEvSZ_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      v61 = &v60;
      v62 = &v59;
      result = JSC::B3::Air::Inst::forEachArgCustom(v5, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachIS4_ZNSA_10forEachDefIS4_ZZNS3_12_GLOBAL__N_127GraphColoringStackAllocatorINS_33UndirectedEdgesDuplicatingAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE3runERKNS_6VectorIPNS3_9StackSlotELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUljE_clEjEUlS5_S6_S7_S8_E_EEvPSA_SW_RKT0_EUlS5_S6_S7_S8_E_EEvSZ_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v60);
    }
    v8 = v51;
    if (!v51)
      return result;
    goto LABEL_43;
  }
  v9 = *(_DWORD *)(v5 + 12);
  if (v9 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19809BFFCLL);
  }
  if (!v9)
  {
    __break(0xC471u);
    goto LABEL_73;
  }
  v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 32) + 8);
  v11 = *(double *)(*v2[1] + 104);
  LODWORD(v60) = *(_DWORD *)(**(_QWORD **)v5 + 8);
  HIDWORD(v60) = v10;
  *(float *)&v11 = v11;
  LODWORD(v61) = LODWORD(v11);
  result = v6 + 48;
  v12 = *(unsigned int *)(v6 + 60);
  v13 = v8;
  if ((_DWORD)v12 == *(_DWORD *)(v6 + 56))
  {
    result = WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v12 + 1, (unint64_t)&v60);
    v14 = *(_QWORD *)(v6 + 48) + 12 * *(unsigned int *)(v6 + 60);
    v15 = *(void **)result;
    v16 = *(_DWORD *)(result + 8);
  }
  else
  {
    v14 = *(_QWORD *)result + 12 * v12;
    v15 = v60;
    v16 = (int)v61;
  }
  *(_DWORD *)(v14 + 8) = v16;
  *(_QWORD *)v14 = v15;
  ++*(_DWORD *)(v6 + 60);
  v30 = **v2;
  v31 = *(unsigned int *)(v30 + 60);
  if ((_DWORD)v31)
  {
    v32 = *(unsigned int **)(v30 + 48);
    v33 = 4 * v31;
    do
    {
      v34 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v30 + 64) + 8 * *v32) + 8);
      if (v34 != (_DWORD)v60)
      {
        v35 = HIDWORD(v60);
        if (HIDWORD(v60) != v34)
        {
          if (*(_DWORD *)(v6 + 36) <= HIDWORD(v60))
          {
            __break(0xC471u);
            JUMPOUT(0x19809BFECLL);
          }
          v36 = WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(*(_QWORD *)(v6 + 24) + 24 * HIDWORD(v60)), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v30 + 64) + 8 * *v32) + 8));
          v37 = *(_DWORD *)(v6 + 36);
          *(_DWORD *)(v6 + 40) += v36;
          if (v37 <= v34)
          {
            __break(0xC471u);
            JUMPOUT(0x19809BFF4);
          }
          result = WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(*(_QWORD *)(v6 + 24) + 24 * v34), v35);
          *(_DWORD *)(v6 + 40) += result;
        }
      }
      ++v32;
      v33 -= 4;
    }
    while (v33);
  }
  v8 = v13;
LABEL_42:
  v56 = *v2;
  v57 = v6;
  if (!v8)
    return result;
LABEL_43:
  v58 = &v56;
  v59 = &v58;
  if ((*(__int16 *)(v8 + 120) - 446) <= 5)
  {
    v60 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachIS4_ZNSA_10forEachDefIS4_ZZNS3_12_GLOBAL__N_127GraphColoringStackAllocatorINS_33UndirectedEdgesDuplicatingAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE3runERKNS_6VectorIPNS3_9StackSlotELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUljE_clEjEUlS5_S6_S7_S8_E_EEvPSA_SW_RKT0_EUlS5_S6_S7_S8_E0_EEvSZ_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
    v61 = &v60;
    v62 = &v59;
    return JSC::B3::Air::Inst::forEachArgCustom(v8, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachIS4_ZNSA_10forEachDefIS4_ZZNS3_12_GLOBAL__N_127GraphColoringStackAllocatorINS_33UndirectedEdgesDuplicatingAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE3runERKNS_6VectorIPNS3_9StackSlotELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUljE_clEjEUlS5_S6_S7_S8_E_EEvPSA_SW_RKT0_EUlS5_S6_S7_S8_E0_EEvSZ_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v60);
  }
  v55 = *(unsigned int *)(v8 + 12);
  if ((_DWORD)v55)
  {
    v38 = 0;
    v53 = (char *)&JSC::B3::Air::g_formTable + 21 * *(__int16 *)(v8 + 120) + ((unint64_t)((v55 - 1) * v55) >> 1);
    while (1)
    {
      if (v38 >= *(unsigned int *)(v8 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x19809BFCCLL);
      }
      v39 = v53[v38];
      if ((v39 >> 5) - 1 >= 5)
        break;
      if ((v39 & 0xF) - 8 <= 2)
      {
        v40 = (_BYTE *)(*(_QWORD *)v8 + 32 * v38);
        if (v40[8] == 9)
        {
          v41 = *(_QWORD *)v40;
          if (*(_BYTE *)(*(_QWORD *)v40 + 4) == 1)
          {
            v42 = **v58;
            v43 = *(unsigned int *)(v42 + 60);
            if ((_DWORD)v43)
            {
              v44 = v58[1];
              v45 = *(unsigned int **)(v42 + 48);
              v46 = 4 * v43;
              do
              {
                v47 = *(_DWORD *)(v41 + 8);
                v48 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v42 + 64) + 8 * *v45) + 8);
                if (v47 != v48)
                {
                  if (*((_DWORD *)v44 + 9) <= v47)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19809BFBCLL);
                  }
                  v49 = WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(v44[3] + 24 * v47), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v42 + 64) + 8 * *v45) + 8));
                  v50 = *((_DWORD *)v44 + 9);
                  *((_DWORD *)v44 + 10) += v49;
                  if (v50 <= v48)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19809BFC4);
                  }
                  result = WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(v44[3] + 24 * v48), v47);
                  *((_DWORD *)v44 + 10) += result;
                }
                ++v45;
                v46 -= 4;
              }
              while (v46);
            }
          }
        }
      }
      if (++v38 == v55)
        return result;
    }
    __break(0xC471u);
LABEL_73:
    JUMPOUT(0x19809BF94);
  }
  return result;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::run(WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t result, _BYTE *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 16);
  if ((a3 - 8) < 3
    || (a3 & 0xFFFFFFFC) == 4
    && (a2[8] != 9
     || *(_BYTE *)(*(_QWORD *)a2 + 4) != 1
     || (v4 = **(_QWORD **)(v3 + 8),
         v5 = *(unsigned int *)(*(_QWORD *)a2 + 8),
         v6 = *(unsigned int *)(*(_QWORD *)(v4 + 32) + 4 * v5),
         *(_DWORD *)(v4 + 60) > v6)
     && *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v6) == (_DWORD)v5))
  {
    **(_BYTE **)v3 = 0;
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachIS4_ZNSA_10forEachDefIS4_ZZNS3_12_GLOBAL__N_127GraphColoringStackAllocatorINS_33UndirectedEdgesDuplicatingAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE3runERKNS_6VectorIPNS3_9StackSlotELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUljE_clEjEUlS5_S6_S7_S8_E_EEvPSA_SW_RKT0_EUlS5_S6_S7_S8_E_EEvSZ_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, _BYTE *a2, char a3)
{
  uint64_t v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 v12;
  unsigned int v13;

  if ((a3 & 0xFC) == 4 && a2[8] == 9)
  {
    v3 = *(_QWORD *)a2;
    if (*(_BYTE *)(*(_QWORD *)a2 + 4) == 1)
    {
      v4 = ***(uint64_t *****)(result + 16);
      v5 = **v4;
      v6 = *(unsigned int *)(v5 + 60);
      if ((_DWORD)v6)
      {
        v7 = v4[1];
        v8 = *(unsigned int **)(v5 + 48);
        v9 = 4 * v6;
        do
        {
          v10 = *(_DWORD *)(v3 + 8);
          v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 64) + 8 * *v8) + 8);
          if (v10 != v11)
          {
            if (*((_DWORD *)v7 + 9) <= v10
              || (v12 = WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(v7[3] + 24 * v10), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 64) + 8 * *v8) + 8)), v13 = *((_DWORD *)v7 + 9), *((_DWORD *)v7 + 10) += v12, v13 <= v11))
            {
              __break(0xC471u);
              JUMPOUT(0x19809C17CLL);
            }
            result = WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(v7[3] + 24 * v11), v10);
            *((_DWORD *)v7 + 10) += result;
          }
          ++v8;
          v9 -= 4;
        }
        while (v9);
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachIS4_ZNSA_10forEachDefIS4_ZZNS3_12_GLOBAL__N_127GraphColoringStackAllocatorINS_33UndirectedEdgesDuplicatingAdapterINS_18InterferenceVectorINS_29LikelyDenseUnsignedIntegerSetIjEEjEEEEE3runERKNS_6VectorIPNS3_9StackSlotELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUljE_clEjEUlS5_S6_S7_S8_E_EEvPSA_SW_RKT0_EUlS5_S6_S7_S8_E0_EEvSZ_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, _BYTE *a2, int a3)
{
  uint64_t v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 v12;
  unsigned int v13;

  if ((a3 - 8) <= 2 && a2[8] == 9)
  {
    v3 = *(_QWORD *)a2;
    if (*(_BYTE *)(*(_QWORD *)a2 + 4) == 1)
    {
      v4 = ***(uint64_t *****)(result + 16);
      v5 = **v4;
      v6 = *(unsigned int *)(v5 + 60);
      if ((_DWORD)v6)
      {
        v7 = v4[1];
        v8 = *(unsigned int **)(v5 + 48);
        v9 = 4 * v6;
        do
        {
          v10 = *(_DWORD *)(v3 + 8);
          v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 64) + 8 * *v8) + 8);
          if (v10 != v11)
          {
            if (*((_DWORD *)v7 + 9) <= v10
              || (v12 = WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(v7[3] + 24 * v10), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 64) + 8 * *v8) + 8)), v13 = *((_DWORD *)v7 + 9), *((_DWORD *)v7 + 10) += v12, v13 <= v11))
            {
              __break(0xC471u);
              JUMPOUT(0x19809C288);
            }
            result = WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::add((WTF::BitVector *)(v7[3] + 24 * v11), v10);
            *((_DWORD *)v7 + 10) += result;
          }
          ++v8;
          v9 -= 4;
        }
        while (v9);
      }
    }
  }
  return result;
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::run(WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::CoalescableMove &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::CoalescableMove &)#1} &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::CoalescableMove*,false>(uint64_t *result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  float v30;
  float v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  float v48;
  float v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  float v61;
  float v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  float v71;
  unint64_t v72;
  float v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  float v77;
  unint64_t v78;
  float v79;
  uint64_t v80;
  BOOL v81;
  unint64_t v82;
  float v83;
  float v84;
  unint64_t v85;
  unint64_t v86;
  float v87;
  uint64_t v88;
  unint64_t v89;
  float v90;
  unint64_t v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  float v95;
  float v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  BOOL v109;
  uint64_t v110;
  unint64_t v111;
  float v112;
  float v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int64_t v118;
  int64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  float v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  BOOL v129;
  int64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  int64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  float v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  float v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  float v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;

  v7 = (uint64_t)result;
LABEL_2:
  v8 = (uint64_t *)(a2 - 12);
  v9 = (uint64_t *)(a2 - 24);
  v10 = (uint64_t *)(a2 - 36);
  v11 = v7;
  while (2)
  {
    v7 = v11;
    v12 = a2 - v11;
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v11) >> 2);
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(float *)(a2 - 4) > *(float *)(v11 + 8))
        {
          v207 = *(_DWORD *)(v11 + 8);
          v182 = *(_QWORD *)v11;
          v94 = *(_QWORD *)(a2 - 12);
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(a2 - 4);
          *(_QWORD *)v11 = v94;
          *(_DWORD *)(a2 - 4) = v207;
          *(_QWORD *)(a2 - 12) = v182;
        }
        return result;
      case 3:
        v66 = v11 + 12;
        v95 = *(float *)(v11 + 20);
        v96 = *(float *)(a2 - 4);
        if (v95 <= *(float *)(v11 + 8))
        {
          if (v96 > v95)
          {
            v145 = *(_QWORD *)v66;
            v146 = *(_DWORD *)(v11 + 20);
            v147 = *(_DWORD *)(a2 - 4);
            *(_QWORD *)v66 = *v8;
            *(_DWORD *)(v11 + 20) = v147;
            *(_DWORD *)(a2 - 4) = v146;
            *v8 = v145;
            if (*(float *)(v11 + 20) > *(float *)(v11 + 8))
            {
              v211 = *(_DWORD *)(v11 + 8);
              v186 = *(_QWORD *)v11;
              *(_QWORD *)v11 = *(_QWORD *)v66;
              *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 20);
              *(_QWORD *)v66 = v186;
              *(_DWORD *)(v11 + 20) = v211;
            }
          }
        }
        else
        {
          if (v96 <= v95)
            goto LABEL_180;
          v208 = *(_DWORD *)(v11 + 8);
          v183 = *(_QWORD *)v11;
          v97 = *v8;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(a2 - 4);
          *(_QWORD *)v11 = v97;
          *(_DWORD *)(a2 - 4) = v208;
          *v8 = v183;
        }
        return result;
      case 4:
      case 5:
        v98 = (uint64_t *)(v11 + 12);
        v99 = (uint64_t *)(v11 + 24);
        v100 = (uint64_t *)(v11 + 36);
        if (*(float *)(a2 - 4) > *(float *)(v11 + 44))
        {
          v101 = *v100;
          v102 = *(_DWORD *)(v11 + 44);
          v103 = *(_DWORD *)(a2 - 4);
          *v100 = *(_QWORD *)(a2 - 12);
          *(_DWORD *)(v11 + 44) = v103;
          *(_DWORD *)(a2 - 4) = v102;
          *(_QWORD *)(a2 - 12) = v101;
          if (*(float *)(v11 + 44) > *(float *)(v11 + 32))
          {
            v104 = *(_DWORD *)(v11 + 32);
            v105 = *v99;
            *v99 = *v100;
            *(_DWORD *)(v11 + 32) = *(_DWORD *)(v11 + 44);
            *v100 = v105;
            *(_DWORD *)(v11 + 44) = v104;
            if (*(float *)(v11 + 32) > *(float *)(v11 + 20))
            {
              v106 = *(_DWORD *)(v11 + 20);
              v107 = *v98;
              *v98 = *v99;
              *(_DWORD *)(v11 + 20) = *(_DWORD *)(v11 + 32);
              *v99 = v107;
              *(_DWORD *)(v11 + 32) = v106;
              if (*(float *)(v11 + 20) > *(float *)(v11 + 8))
              {
                v209 = *(_DWORD *)(v11 + 8);
                v184 = *(_QWORD *)v11;
                *(_QWORD *)v11 = *v98;
                *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 20);
                *v98 = v184;
                *(_DWORD *)(v11 + 20) = v209;
              }
            }
          }
        }
        return result;
      default:
        if (v12 > 287)
        {
          if (!a3)
          {
            if (v11 != a2)
            {
              v118 = (unint64_t)(v13 - 2) >> 1;
              v119 = v118;
              do
              {
                if (v118 >= v119)
                {
                  v120 = (2 * v119) | 1;
                  v121 = v11 + 12 * v120;
                  if (2 * v119 + 2 < v13 && *(float *)(v121 + 8) > *(float *)(v121 + 20))
                  {
                    v121 += 12;
                    v120 = 2 * v119 + 2;
                  }
                  v122 = v11 + 12 * v119;
                  v123 = *(float *)(v122 + 8);
                  if (*(float *)(v121 + 8) <= v123)
                  {
                    v124 = *(_QWORD *)v122;
                    do
                    {
                      v125 = v122;
                      v122 = v121;
                      v126 = *(_QWORD *)v121;
                      result = (uint64_t *)*(unsigned int *)(v122 + 8);
                      *(_DWORD *)(v125 + 8) = (_DWORD)result;
                      *(_QWORD *)v125 = v126;
                      if (v118 < v120)
                        break;
                      v127 = 2 * v120;
                      v120 = (2 * v120) | 1;
                      v121 = v11 + 12 * v120;
                      v128 = v127 + 2;
                      if (v128 < v13 && *(float *)(v121 + 8) > *(float *)(v121 + 20))
                      {
                        v121 += 12;
                        v120 = v128;
                      }
                    }
                    while (*(float *)(v121 + 8) <= v123);
                    *(_QWORD *)v122 = v124;
                    *(float *)(v122 + 8) = v123;
                  }
                }
                v129 = v119-- <= 0;
              }
              while (!v129);
              v130 = v12 / 0xCuLL;
              do
              {
                v131 = 0;
                v210 = *(_DWORD *)(v11 + 8);
                v185 = *(_QWORD *)v11;
                v132 = v11;
                do
                {
                  v133 = v132;
                  v132 += 12 * v131 + 12;
                  v134 = 2 * v131;
                  v131 = (2 * v131) | 1;
                  v135 = v134 + 2;
                  if (v135 < v130 && *(float *)(v132 + 8) > *(float *)(v132 + 20))
                  {
                    v132 += 12;
                    v131 = v135;
                  }
                  v136 = *(_QWORD *)v132;
                  *(_DWORD *)(v133 + 8) = *(_DWORD *)(v132 + 8);
                  *(_QWORD *)v133 = v136;
                }
                while (v131 <= (uint64_t)((unint64_t)(v130 - 2) >> 1));
                a2 -= 12;
                if (v132 == a2)
                {
                  *(_DWORD *)(v132 + 8) = v210;
                  *(_QWORD *)v132 = v185;
                }
                else
                {
                  v137 = *(_QWORD *)a2;
                  *(_DWORD *)(v132 + 8) = *(_DWORD *)(a2 + 8);
                  *(_QWORD *)v132 = v137;
                  *(_DWORD *)(a2 + 8) = v210;
                  *(_QWORD *)a2 = v185;
                  v138 = v132 - v11 + 12;
                  if (v138 >= 13)
                  {
                    v139 = (v138 / 0xCuLL - 2) >> 1;
                    v140 = v11 + 12 * v139;
                    v141 = *(float *)(v132 + 8);
                    if (*(float *)(v140 + 8) > v141)
                    {
                      v142 = *(_QWORD *)v132;
                      do
                      {
                        v143 = v132;
                        v132 = v140;
                        v144 = *(_QWORD *)v140;
                        *(_DWORD *)(v143 + 8) = *(_DWORD *)(v132 + 8);
                        *(_QWORD *)v143 = v144;
                        if (!v139)
                          break;
                        v139 = (v139 - 1) >> 1;
                        v140 = v11 + 12 * v139;
                      }
                      while (*(float *)(v140 + 8) > v141);
                      *(_QWORD *)v132 = v142;
                      *(float *)(v132 + 8) = v141;
                    }
                  }
                }
                v129 = v130-- <= 2;
              }
              while (!v129);
            }
            return result;
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = v11 + 12 * ((unint64_t)v13 >> 1);
          v16 = *(float *)(a2 - 4);
          if ((unint64_t)v12 >= 0x601)
          {
            v17 = *(float *)(v15 + 8);
            if (v17 <= *(float *)(v11 + 8))
            {
              if (v16 > v17)
              {
                v190 = *(_DWORD *)(v15 + 8);
                v165 = *(_QWORD *)v15;
                v21 = *v8;
                *(_DWORD *)(v15 + 8) = *(_DWORD *)(a2 - 4);
                *(_QWORD *)v15 = v21;
                *(_DWORD *)(a2 - 4) = v190;
                *v8 = v165;
                if (*(float *)(v15 + 8) > *(float *)(v11 + 8))
                {
                  v191 = *(_DWORD *)(v11 + 8);
                  v166 = *(_QWORD *)v11;
                  v22 = *(_QWORD *)v15;
                  *(_DWORD *)(v11 + 8) = *(_DWORD *)(v15 + 8);
                  *(_QWORD *)v11 = v22;
                  *(_DWORD *)(v15 + 8) = v191;
                  *(_QWORD *)v15 = v166;
                }
              }
            }
            else
            {
              if (v16 <= v17)
              {
                v194 = *(_DWORD *)(v11 + 8);
                v169 = *(_QWORD *)v11;
                v25 = *(_QWORD *)v15;
                *(_DWORD *)(v11 + 8) = *(_DWORD *)(v15 + 8);
                *(_QWORD *)v11 = v25;
                *(_DWORD *)(v15 + 8) = v194;
                *(_QWORD *)v15 = v169;
                if (*(float *)(a2 - 4) <= *(float *)(v15 + 8))
                  goto LABEL_22;
                v188 = *(_DWORD *)(v15 + 8);
                v163 = *(_QWORD *)v15;
                v26 = *v8;
                *(_DWORD *)(v15 + 8) = *(_DWORD *)(a2 - 4);
                *(_QWORD *)v15 = v26;
              }
              else
              {
                v188 = *(_DWORD *)(v11 + 8);
                v163 = *(_QWORD *)v11;
                v18 = *v8;
                *(_DWORD *)(v11 + 8) = *(_DWORD *)(a2 - 4);
                *(_QWORD *)v11 = v18;
              }
              *(_DWORD *)(a2 - 4) = v188;
              *v8 = v163;
            }
LABEL_22:
            v27 = (uint64_t *)(v11 + 12);
            v28 = v11 + 12 * v14;
            v29 = v28 - 12;
            v30 = *(float *)(v28 - 4);
            v31 = *(float *)(a2 - 16);
            if (v30 <= *(float *)(v11 + 20))
            {
              if (v31 > v30)
              {
                v195 = *(_DWORD *)(v28 - 4);
                v170 = *(_QWORD *)v29;
                v35 = *v9;
                *(_DWORD *)(v29 + 8) = *(_DWORD *)(a2 - 16);
                *(_QWORD *)v29 = v35;
                *(_DWORD *)(a2 - 16) = v195;
                *v9 = v170;
                if (*(float *)(v29 + 8) > *(float *)(v11 + 20))
                {
                  v36 = *v27;
                  v37 = *(_DWORD *)(v11 + 20);
                  v38 = *(_DWORD *)(v29 + 8);
                  *v27 = *(_QWORD *)v29;
                  *(_DWORD *)(v11 + 20) = v38;
                  *(_DWORD *)(v29 + 8) = v37;
                  *(_QWORD *)v29 = v36;
                }
              }
            }
            else if (v31 <= v30)
            {
              v41 = *v27;
              v42 = *(_DWORD *)(v11 + 20);
              v43 = *(_DWORD *)(v29 + 8);
              *v27 = *(_QWORD *)v29;
              *(_DWORD *)(v11 + 20) = v43;
              *(_DWORD *)(v29 + 8) = v42;
              *(_QWORD *)v29 = v41;
              if (*(float *)(a2 - 16) > *(float *)(v29 + 8))
              {
                v197 = *(_DWORD *)(v29 + 8);
                v172 = *(_QWORD *)v29;
                v44 = *v9;
                *(_DWORD *)(v29 + 8) = *(_DWORD *)(a2 - 16);
                *(_QWORD *)v29 = v44;
                *(_DWORD *)(a2 - 16) = v197;
                *v9 = v172;
              }
            }
            else
            {
              v32 = *v27;
              v33 = *(_DWORD *)(v11 + 20);
              v34 = *(_DWORD *)(a2 - 16);
              *v27 = *v9;
              *(_DWORD *)(v11 + 20) = v34;
              *(_DWORD *)(a2 - 16) = v33;
              *v9 = v32;
            }
            v45 = (uint64_t *)(v11 + 24);
            v46 = v11 + 12 * v14;
            v47 = v46 + 12;
            v48 = *(float *)(v46 + 20);
            v49 = *(float *)(a2 - 28);
            if (v48 <= *(float *)(v11 + 32))
            {
              if (v49 > v48)
              {
                v198 = *(_DWORD *)(v46 + 20);
                v173 = *(_QWORD *)v47;
                v53 = *v10;
                *(_DWORD *)(v47 + 8) = *(_DWORD *)(a2 - 28);
                *(_QWORD *)v47 = v53;
                *(_DWORD *)(a2 - 28) = v198;
                *v10 = v173;
                if (*(float *)(v47 + 8) > *(float *)(v11 + 32))
                {
                  v54 = *v45;
                  v55 = *(_DWORD *)(v11 + 32);
                  v56 = *(_DWORD *)(v47 + 8);
                  *v45 = *(_QWORD *)v47;
                  *(_DWORD *)(v11 + 32) = v56;
                  *(_DWORD *)(v47 + 8) = v55;
                  *(_QWORD *)v47 = v54;
                }
              }
            }
            else if (v49 <= v48)
            {
              v57 = *v45;
              v58 = *(_DWORD *)(v11 + 32);
              v59 = *(_DWORD *)(v47 + 8);
              *v45 = *(_QWORD *)v47;
              *(_DWORD *)(v11 + 32) = v59;
              *(_DWORD *)(v47 + 8) = v58;
              *(_QWORD *)v47 = v57;
              if (*(float *)(a2 - 28) > *(float *)(v47 + 8))
              {
                v199 = *(_DWORD *)(v47 + 8);
                v174 = *(_QWORD *)v47;
                v60 = *v10;
                *(_DWORD *)(v47 + 8) = *(_DWORD *)(a2 - 28);
                *(_QWORD *)v47 = v60;
                *(_DWORD *)(a2 - 28) = v199;
                *v10 = v174;
              }
            }
            else
            {
              v50 = *v45;
              v51 = *(_DWORD *)(v11 + 32);
              v52 = *(_DWORD *)(a2 - 28);
              *v45 = *v10;
              *(_DWORD *)(v11 + 32) = v52;
              *(_DWORD *)(a2 - 28) = v51;
              *v10 = v50;
            }
            v61 = *(float *)(v15 + 8);
            v62 = *(float *)(v47 + 8);
            if (v61 <= *(float *)(v29 + 8))
            {
              if (v62 > v61)
              {
                v201 = *(_DWORD *)(v15 + 8);
                v176 = *(_QWORD *)v15;
                *(_QWORD *)v15 = *(_QWORD *)v47;
                *(_DWORD *)(v15 + 8) = *(_DWORD *)(v47 + 8);
                *(_DWORD *)(v47 + 8) = v201;
                *(_QWORD *)v47 = v176;
                if (*(float *)(v15 + 8) > *(float *)(v29 + 8))
                {
                  v202 = *(_DWORD *)(v29 + 8);
                  v177 = *(_QWORD *)v29;
                  *(_QWORD *)v29 = *(_QWORD *)v15;
                  *(_DWORD *)(v29 + 8) = *(_DWORD *)(v15 + 8);
                  *(_DWORD *)(v15 + 8) = v202;
                  *(_QWORD *)v15 = v177;
                }
              }
              goto LABEL_50;
            }
            if (v62 <= v61)
            {
              v203 = *(_DWORD *)(v29 + 8);
              v178 = *(_QWORD *)v29;
              *(_QWORD *)v29 = *(_QWORD *)v15;
              *(_DWORD *)(v29 + 8) = *(_DWORD *)(v15 + 8);
              *(_DWORD *)(v15 + 8) = v203;
              *(_QWORD *)v15 = v178;
              if (*(float *)(v47 + 8) <= *(float *)(v15 + 8))
              {
LABEL_50:
                v204 = *(_DWORD *)(v11 + 8);
                v179 = *(_QWORD *)v11;
                v63 = *(_QWORD *)v15;
                *(_DWORD *)(v11 + 8) = *(_DWORD *)(v15 + 8);
                *(_QWORD *)v11 = v63;
                *(_DWORD *)(v15 + 8) = v204;
                *(_QWORD *)v15 = v179;
                goto LABEL_51;
              }
              v200 = *(_DWORD *)(v15 + 8);
              v175 = *(_QWORD *)v15;
              *(_QWORD *)v15 = *(_QWORD *)v47;
              *(_DWORD *)(v15 + 8) = *(_DWORD *)(v47 + 8);
            }
            else
            {
              v200 = *(_DWORD *)(v29 + 8);
              v175 = *(_QWORD *)v29;
              *(_QWORD *)v29 = *(_QWORD *)v47;
              *(_DWORD *)(v29 + 8) = *(_DWORD *)(v47 + 8);
            }
            *(_DWORD *)(v47 + 8) = v200;
            *(_QWORD *)v47 = v175;
            goto LABEL_50;
          }
          v19 = *(float *)(v11 + 8);
          if (v19 <= *(float *)(v15 + 8))
          {
            if (v16 > v19)
            {
              v192 = *(_DWORD *)(v11 + 8);
              v167 = *(_QWORD *)v11;
              v23 = *v8;
              *(_DWORD *)(v11 + 8) = *(_DWORD *)(a2 - 4);
              *(_QWORD *)v11 = v23;
              *(_DWORD *)(a2 - 4) = v192;
              *v8 = v167;
              if (*(float *)(v11 + 8) > *(float *)(v15 + 8))
              {
                v193 = *(_DWORD *)(v15 + 8);
                v168 = *(_QWORD *)v15;
                v24 = *(_QWORD *)v11;
                *(_DWORD *)(v15 + 8) = *(_DWORD *)(v11 + 8);
                *(_QWORD *)v15 = v24;
                *(_DWORD *)(v11 + 8) = v193;
                *(_QWORD *)v11 = v168;
              }
            }
          }
          else
          {
            if (v16 <= v19)
            {
              v196 = *(_DWORD *)(v15 + 8);
              v171 = *(_QWORD *)v15;
              v39 = *(_QWORD *)v11;
              *(_DWORD *)(v15 + 8) = *(_DWORD *)(v11 + 8);
              *(_QWORD *)v15 = v39;
              *(_DWORD *)(v11 + 8) = v196;
              *(_QWORD *)v11 = v171;
              if (*(float *)(a2 - 4) <= *(float *)(v11 + 8))
                goto LABEL_51;
              v189 = *(_DWORD *)(v11 + 8);
              v164 = *(_QWORD *)v11;
              v40 = *v8;
              *(_DWORD *)(v11 + 8) = *(_DWORD *)(a2 - 4);
              *(_QWORD *)v11 = v40;
            }
            else
            {
              v189 = *(_DWORD *)(v15 + 8);
              v164 = *(_QWORD *)v15;
              v20 = *v8;
              *(_DWORD *)(v15 + 8) = *(_DWORD *)(a2 - 4);
              *(_QWORD *)v15 = v20;
            }
            *(_DWORD *)(a2 - 4) = v189;
            *v8 = v164;
          }
LABEL_51:
          --a3;
          if ((a4 & 1) == 0)
          {
            v64 = *(float *)(v11 + 8);
            if (*(float *)(v11 - 4) > v64)
              goto LABEL_54;
            v66 = *(_QWORD *)v11;
            v82 = v11 + 12;
            if (v64 <= *(float *)(a2 - 4))
            {
              do
              {
                v11 = v82;
                if (v82 >= a2)
                  break;
                v84 = *(float *)(v82 + 8);
                v82 += 12;
              }
              while (v64 <= v84);
            }
            else
            {
              do
              {
                if (v82 == a2)
                  goto LABEL_179;
                v83 = *(float *)(v82 + 8);
                v82 += 12;
              }
              while (v64 <= v83);
              v11 = v82 - 12;
            }
            v85 = a2;
            if (v11 < a2)
            {
              v86 = a2;
              while (v86 != v7)
              {
                v85 = v86 - 12;
                v87 = *(float *)(v86 - 4);
                v86 -= 12;
                if (v64 <= v87)
                  goto LABEL_91;
              }
              goto LABEL_179;
            }
LABEL_91:
            if (v11 < v85)
            {
              do
              {
                v206 = *(_DWORD *)(v11 + 8);
                v181 = *(_QWORD *)v11;
                v88 = *(_QWORD *)v85;
                *(_DWORD *)(v11 + 8) = *(_DWORD *)(v85 + 8);
                *(_QWORD *)v11 = v88;
                *(_DWORD *)(v85 + 8) = v206;
                *(_QWORD *)v85 = v181;
                v89 = v11 + 12;
                do
                {
                  if (v89 == a2)
                    goto LABEL_179;
                  v90 = *(float *)(v89 + 8);
                  v89 += 12;
                }
                while (v64 <= v90);
                v11 = v89 - 12;
                do
                {
                  if (v85 == v7)
                    goto LABEL_179;
                  v91 = v85 - 12;
                  v92 = *(float *)(v85 - 4);
                  v85 -= 12;
                }
                while (v64 > v92);
                v85 = v91;
              }
              while (v11 < v91);
            }
            if (v11 - 12 != v7)
            {
              v93 = *(_QWORD *)(v11 - 12);
              *(_DWORD *)(v7 + 8) = *(_DWORD *)(v11 - 4);
              *(_QWORD *)v7 = v93;
            }
            a4 = 0;
            *(_QWORD *)(v11 - 12) = v66;
            *(float *)(v11 - 4) = v64;
            continue;
          }
          v64 = *(float *)(v11 + 8);
LABEL_54:
          v65 = 0;
          v66 = *(_QWORD *)v11;
          do
          {
            if (v11 + v65 + 12 == a2)
              goto LABEL_179;
            v67 = *(float *)(v11 + v65 + 20);
            v65 += 12;
          }
          while (v67 > v64);
          v68 = v11 + v65;
          v69 = a2;
          if (v65 != 12)
          {
            while (v69 != v11)
            {
              v70 = v69 - 12;
              v71 = *(float *)(v69 - 4);
              v69 -= 12;
              if (v71 > v64)
                goto LABEL_66;
            }
            goto LABEL_179;
          }
          v72 = a2;
          while (v68 < v72)
          {
            v70 = v72 - 12;
            v73 = *(float *)(v72 - 4);
            v72 -= 12;
            if (v73 > v64)
              goto LABEL_66;
          }
          v70 = v72;
LABEL_66:
          v11 = v68;
          if (v68 < v70)
          {
            v74 = v70;
            do
            {
              v205 = *(_DWORD *)(v11 + 8);
              v180 = *(_QWORD *)v11;
              v75 = *(_QWORD *)v74;
              *(_DWORD *)(v11 + 8) = *(_DWORD *)(v74 + 8);
              *(_QWORD *)v11 = v75;
              *(_DWORD *)(v74 + 8) = v205;
              *(_QWORD *)v74 = v180;
              v76 = v11 + 12;
              do
              {
                if (v76 == a2)
                  goto LABEL_179;
                v77 = *(float *)(v76 + 8);
                v76 += 12;
              }
              while (v77 > v64);
              v11 = v76 - 12;
              do
              {
                if (v74 == v7)
                  goto LABEL_179;
                v78 = v74 - 12;
                v79 = *(float *)(v74 - 4);
                v74 -= 12;
              }
              while (v79 <= v64);
              v74 = v78;
            }
            while (v11 < v78);
          }
          if (v11 - 12 != v7)
          {
            v80 = *(_QWORD *)(v11 - 12);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v11 - 4);
            *(_QWORD *)v7 = v80;
          }
          *(_QWORD *)(v11 - 12) = v66;
          *(float *)(v11 - 4) = v64;
          if (v68 < v70)
            goto LABEL_80;
          if (!(_DWORD)result)
          {
            if (v81)
              continue;
LABEL_80:
            a4 = 0;
            continue;
          }
          a2 = v11 - 12;
          if (v81)
            return result;
          goto LABEL_2;
        }
        v66 = v11 + 12;
        v109 = v11 == a2 || v66 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v109)
          {
            v110 = 0;
            v111 = v11;
            do
            {
              v112 = *(float *)(v111 + 20);
              v113 = *(float *)(v111 + 8);
              v111 = v66;
              if (v112 > v113)
              {
                v114 = *(_QWORD *)v66;
                v115 = v110;
                while (1)
                {
                  v116 = v11 + v115;
                  *(_QWORD *)(v116 + 12) = *(_QWORD *)(v11 + v115);
                  *(_DWORD *)(v116 + 20) = *(_DWORD *)(v11 + v115 + 8);
                  if (!v115)
                    break;
                  v115 -= 12;
                  if (v112 <= *(float *)(v116 - 4))
                  {
                    v117 = v11 + v115 + 12;
                    goto LABEL_131;
                  }
                }
                v117 = v11;
LABEL_131:
                *(_QWORD *)v117 = v114;
                *(float *)(v117 + 8) = v112;
              }
              v66 = v111 + 12;
              v110 += 12;
            }
            while (v111 + 12 != a2);
          }
        }
        else if (!v109)
        {
          v148 = 0;
          v149 = -2;
          v150 = 1;
          while (1)
          {
            v151 = v11 + 12 * v148;
            v148 = v150;
            v152 = *(float *)(v151 + 20);
            if (v152 > *(float *)(v151 + 8))
              break;
LABEL_177:
            v150 = v148 + 1;
            v66 += 12;
            --v149;
            if (v66 == a2)
              return result;
          }
          v153 = *(_QWORD *)v66;
          v154 = v149;
          v155 = v66;
          v156 = v66;
          while (1)
          {
            v157 = *(_QWORD *)(v156 - 12);
            v156 -= 12;
            *(_QWORD *)v155 = v157;
            *(_DWORD *)(v155 + 8) = *(_DWORD *)(v155 - 4);
            if (__CFADD__(v154++, 1))
              break;
            v159 = *(float *)(v155 - 16);
            v155 = v156;
            if (v152 <= v159)
            {
              *(_QWORD *)v156 = v153;
              *(float *)(v156 + 8) = v152;
              goto LABEL_177;
            }
          }
LABEL_179:
          __break(1u);
LABEL_180:
          v212 = *(_DWORD *)(v7 + 8);
          v187 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v66;
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v66 + 8);
          *(_QWORD *)v66 = v187;
          *(_DWORD *)(v66 + 8) = v212;
          if (*(float *)(a2 - 4) > *(float *)(v7 + 20))
          {
            v160 = *(_QWORD *)v66;
            v161 = *(_DWORD *)(v66 + 8);
            v162 = *(_DWORD *)(a2 - 4);
            *(_QWORD *)v66 = *v8;
            *(_DWORD *)(v66 + 8) = v162;
            *(_DWORD *)(a2 - 4) = v161;
            *v8 = v160;
          }
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::run(WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::CoalescableMove &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::CoalescableMove &)#1} &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::CoalescableMove*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  float v11;
  float v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  float v18;
  float v19;
  float v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 4) > *(float *)(a1 + 8))
      {
        v6 = *(_DWORD *)(a1 + 8);
        v7 = *(_QWORD *)a1;
        v8 = *(_DWORD *)(a2 - 4);
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 12);
        *(_DWORD *)(a1 + 8) = v8;
        *(_QWORD *)(a2 - 12) = v7;
        *(_DWORD *)(a2 - 4) = v6;
      }
      return result;
    case 3uLL:
      v9 = (uint64_t *)(a1 + 12);
      v10 = (uint64_t *)(a2 - 12);
      v11 = *(float *)(a1 + 20);
      v12 = *(float *)(a2 - 4);
      if (v11 <= *(float *)(a1 + 8))
      {
        if (v12 > v11)
        {
          v35 = *(_DWORD *)(a1 + 20);
          v36 = *v9;
          v37 = *(_DWORD *)(a2 - 4);
          *v9 = *v10;
          *(_DWORD *)(a1 + 20) = v37;
          *v10 = v36;
          *(_DWORD *)(a2 - 4) = v35;
          if (*(float *)(a1 + 20) > *(float *)(a1 + 8))
          {
            v38 = *(_DWORD *)(a1 + 8);
            v39 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *v9;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
            *v9 = v39;
            *(_DWORD *)(a1 + 20) = v38;
          }
        }
      }
      else if (v12 <= v11)
      {
        v44 = *(_DWORD *)(a1 + 8);
        v45 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v9;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
        *v9 = v45;
        *(_DWORD *)(a1 + 20) = v44;
        if (*(float *)(a2 - 4) > *(float *)(a1 + 20))
        {
          v46 = *(_DWORD *)(a1 + 20);
          v47 = *v9;
          v48 = *(_DWORD *)(a2 - 4);
          *v9 = *v10;
          *(_DWORD *)(a1 + 20) = v48;
          *v10 = v47;
          *(_DWORD *)(a2 - 4) = v46;
        }
      }
      else
      {
        v13 = *(_DWORD *)(a1 + 8);
        v14 = *(_QWORD *)a1;
        v15 = *(_DWORD *)(a2 - 4);
        *(_QWORD *)a1 = *v10;
        *(_DWORD *)(a1 + 8) = v15;
        *v10 = v14;
        *(_DWORD *)(a2 - 4) = v13;
      }
      return result;
    case 4uLL:
      return 1;
    case 5uLL:
      v23 = (uint64_t *)(a1 + 12);
      v24 = (uint64_t *)(a1 + 24);
      v25 = (uint64_t *)(a1 + 36);
      if (*(float *)(a2 - 4) > *(float *)(a1 + 44))
      {
        v26 = *(_DWORD *)(a1 + 44);
        v27 = *v25;
        v28 = *(_DWORD *)(a2 - 4);
        *v25 = *(_QWORD *)(a2 - 12);
        *(_DWORD *)(a1 + 44) = v28;
        *(_QWORD *)(a2 - 12) = v27;
        *(_DWORD *)(a2 - 4) = v26;
        if (*(float *)(a1 + 44) > *(float *)(a1 + 32))
        {
          v29 = *(_DWORD *)(a1 + 32);
          v30 = *v24;
          *v24 = *v25;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 44);
          *v25 = v30;
          *(_DWORD *)(a1 + 44) = v29;
          if (*(float *)(a1 + 32) > *(float *)(a1 + 20))
          {
            v31 = *(_DWORD *)(a1 + 20);
            v32 = *v23;
            *v23 = *v24;
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
            *v24 = v32;
            *(_DWORD *)(a1 + 32) = v31;
            if (*(float *)(a1 + 20) > *(float *)(a1 + 8))
            {
              v33 = *(_DWORD *)(a1 + 8);
              v34 = *(_QWORD *)a1;
              *(_QWORD *)a1 = *v23;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
              *v23 = v34;
              *(_DWORD *)(a1 + 20) = v33;
            }
          }
        }
      }
      return 1;
    default:
      v16 = a1 + 24;
      v17 = (uint64_t *)(a1 + 12);
      v18 = *(float *)(a1 + 20);
      v19 = *(float *)(a1 + 8);
      v20 = *(float *)(a1 + 32);
      if (v18 <= v19)
      {
        if (v20 > v18)
        {
          v40 = *(_DWORD *)(a1 + 20);
          v41 = *v17;
          *v17 = *(_QWORD *)v16;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
          *(_QWORD *)v16 = v41;
          *(_DWORD *)(a1 + 32) = v40;
          if (*(float *)(a1 + 20) > v19)
          {
            v42 = *(_DWORD *)(a1 + 8);
            v43 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *v17;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
            *v17 = v43;
            *(_DWORD *)(a1 + 20) = v42;
          }
        }
      }
      else if (v20 <= v18)
      {
        v49 = *(_DWORD *)(a1 + 8);
        v50 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v17;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
        *v17 = v50;
        *(_DWORD *)(a1 + 20) = v49;
        if (v20 > *(float *)(a1 + 20))
        {
          v51 = *(_DWORD *)(a1 + 20);
          v52 = *v17;
          *v17 = *(_QWORD *)v16;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
          *(_QWORD *)v16 = v52;
          *(_DWORD *)(a1 + 32) = v51;
        }
      }
      else
      {
        v21 = *(_DWORD *)(a1 + 8);
        v22 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)v16;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 32);
        *(_QWORD *)v16 = v22;
        *(_DWORD *)(a1 + 32) = v21;
      }
      v53 = a1 + 36;
      if (a1 + 36 == a2)
        return 1;
      v54 = 0;
      v55 = 0;
      break;
  }
  while (1)
  {
    v56 = *(float *)(v53 + 8);
    if (v56 > *(float *)(v16 + 8))
    {
      v57 = *(_QWORD *)v53;
      v58 = v54;
      while (1)
      {
        v59 = a1 + v58;
        *(_QWORD *)(v59 + 36) = *(_QWORD *)(a1 + v58 + 24);
        *(_DWORD *)(v59 + 44) = *(_DWORD *)(a1 + v58 + 32);
        if (v58 == -24)
          break;
        v58 -= 12;
        if (v56 <= *(float *)(v59 + 20))
        {
          v60 = a1 + v58 + 36;
          goto LABEL_34;
        }
      }
      v60 = a1;
LABEL_34:
      *(_QWORD *)v60 = v57;
      *(float *)(v60 + 8) = v56;
      if (++v55 == 8)
        return v53 + 12 == a2;
    }
    v16 = v53;
    v54 += 12;
    v53 += 12;
    if (v53 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::run(WTF::Vector<JSC::B3::Air::StackSlot *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::CoalescableMove &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::CoalescableMove &)#1} &,JSC::B3::Air::`anonymous namespace'::GraphColoringStackAllocator<WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>,unsigned int>>>::CoalescableMove*>(uint64_t *result, float *a2, float *a3, uint64_t *a4)
{
  float v4;
  float v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;

  v4 = a2[2];
  v5 = a3[2];
  if (v4 <= *((float *)result + 2))
  {
    if (v5 > v4)
    {
      v9 = *((_DWORD *)a2 + 2);
      v10 = *(_QWORD *)a2;
      v11 = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *((_DWORD *)a2 + 2) = v11;
      *(_QWORD *)a3 = v10;
      *((_DWORD *)a3 + 2) = v9;
      if (a2[2] > *((float *)result + 2))
      {
        v12 = *((_DWORD *)result + 2);
        v13 = *result;
        v14 = *((_DWORD *)a2 + 2);
        *result = *(_QWORD *)a2;
        *((_DWORD *)result + 2) = v14;
        *(_QWORD *)a2 = v13;
        *((_DWORD *)a2 + 2) = v12;
      }
    }
  }
  else
  {
    if (v5 > v4)
    {
      v6 = *((_DWORD *)result + 2);
      v7 = *result;
      v8 = *((_DWORD *)a3 + 2);
      *result = *(_QWORD *)a3;
      *((_DWORD *)result + 2) = v8;
LABEL_9:
      *(_QWORD *)a3 = v7;
      *((_DWORD *)a3 + 2) = v6;
      goto LABEL_10;
    }
    v15 = *((_DWORD *)result + 2);
    v16 = *result;
    v17 = *((_DWORD *)a2 + 2);
    *result = *(_QWORD *)a2;
    *((_DWORD *)result + 2) = v17;
    *(_QWORD *)a2 = v16;
    *((_DWORD *)a2 + 2) = v15;
    if (a3[2] > a2[2])
    {
      v6 = *((_DWORD *)a2 + 2);
      v7 = *(_QWORD *)a2;
      v18 = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *((_DWORD *)a2 + 2) = v18;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*((float *)a4 + 2) > a3[2])
  {
    v19 = *((_DWORD *)a3 + 2);
    v20 = *(_QWORD *)a3;
    v21 = *((_DWORD *)a4 + 2);
    *(_QWORD *)a3 = *a4;
    *((_DWORD *)a3 + 2) = v21;
    *a4 = v20;
    *((_DWORD *)a4 + 2) = v19;
    if (a3[2] > a2[2])
    {
      v22 = *((_DWORD *)a2 + 2);
      v23 = *(_QWORD *)a2;
      v24 = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *((_DWORD *)a2 + 2) = v24;
      *(_QWORD *)a3 = v23;
      *((_DWORD *)a3 + 2) = v22;
      if (a2[2] > *((float *)result + 2))
      {
        v25 = *((_DWORD *)result + 2);
        v26 = *result;
        v27 = *((_DWORD *)a2 + 2);
        *result = *(_QWORD *)a2;
        *((_DWORD *)result + 2) = v27;
        *(_QWORD *)a2 = v26;
        *((_DWORD *)a2 + 2) = v25;
      }
    }
  }
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::BitVector::iterator,std::__variant_detail::_Trait::HashTableConstIteratorAdapter<std::__variant_detail::_Trait::HashTable<unsigned int,unsigned int,std::__variant_detail::_Trait::IdentityExtractor,std::__variant_detail::_Trait::IntHash<unsigned int>,std::__variant_detail::_Trait::UnsignedWithZeroKeyHashTraits<unsigned int>,std::__variant_detail::_Trait::UnsignedWithZeroKeyHashTraits>,unsigned int>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::BitVector::iterator,std::__variant_detail::_Trait::HashTableConstIteratorAdapter<std::__variant_detail::_Trait::HashTable<unsigned int,unsigned int,std::__variant_detail::_Trait::IdentityExtractor,std::__variant_detail::_Trait::IntHash<unsigned int>,std::__variant_detail::_Trait::UnsignedWithZeroKeyHashTraits<unsigned int>,std::__variant_detail::_Trait::UnsignedWithZeroKeyHashTraits>,unsigned int>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + 8) == *(_QWORD *)(a3 + 8);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::BitVector::iterator,std::__variant_detail::_Trait::HashTableConstIteratorAdapter<std::__variant_detail::_Trait::HashTable<unsigned int,unsigned int,std::__variant_detail::_Trait::IdentityExtractor,std::__variant_detail::_Trait::IntHash<unsigned int>,std::__variant_detail::_Trait::UnsignedWithZeroKeyHashTraits<unsigned int>,std::__variant_detail::_Trait::UnsignedWithZeroKeyHashTraits>,unsigned int>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::BitVector::iterator,std::__variant_detail::_Trait::HashTableConstIteratorAdapter<std::__variant_detail::_Trait::HashTable<unsigned int,unsigned int,std::__variant_detail::_Trait::IdentityExtractor,std::__variant_detail::_Trait::IntHash<unsigned int>,std::__variant_detail::_Trait::UnsignedWithZeroKeyHashTraits<unsigned int>,std::__variant_detail::_Trait::UnsignedWithZeroKeyHashTraits>,unsigned int>> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::iterator::operator*(void)::{lambda(WTF::BitVector::iterator const&)#1},WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::iterator::operator*(void)::{lambda(WTF::HashTableConstIteratorAdapter<WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>,unsigned int> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::BitVector::iterator,WTF::HashTableConstIteratorAdapter<WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>,unsigned int>> const&>(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(**(_QWORD **)a1 + 24) + *(_DWORD *)(a2 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::iterator::operator*(void)::{lambda(WTF::BitVector::iterator const&)#1},WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::iterator::operator*(void)::{lambda(WTF::HashTableConstIteratorAdapter<WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>,unsigned int> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::BitVector::iterator,WTF::HashTableConstIteratorAdapter<WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>,unsigned int>> const&>(uint64_t a1, unsigned int **a2)
{
  return **a2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::iterator::operator++(void)::{lambda(WTF::BitVector::iterator &)#1},WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::iterator::operator++(void)::{lambda(WTF::HashTableConstIteratorAdapter<WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>,unsigned int> &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::BitVector::iterator,WTF::HashTableConstIteratorAdapter<WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>,unsigned int>> &>(uint64_t a1, unint64_t **a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v2 = (unint64_t)a2[1] + 1;
  v3 = **a2;
  if ((v3 & 0x8000000000000000) != 0)
  {
    v5 = __clz(__rbit64(v3 >> v2)) + v2;
    if (v5 >= 0x3F)
      v5 = 63;
  }
  else
  {
    v4 = 2 * v3;
    v5 = *(_QWORD *)(2 * v3);
    v6 = v5 + 63;
    v7 = v2 >> 6;
    if (v2 >> 6 < (v5 + 63) >> 6)
    {
      v8 = *(_QWORD *)(v4 + 8 * v7 + 8);
      if (!v8 || (v9 = __clz(__rbit64(v8 >> v2)) + (v2 & 0x3F), v9 >= 0x40))
      {
        if (v7 + 1 == v6 >> 6)
          goto LABEL_6;
        v10 = v4 + 16;
        while (1)
        {
          v11 = *(_QWORD *)(v10 + 8 * v7);
          if (v11)
          {
            v9 = __clz(__rbit64(v11));
            if (v9 <= 0x3F)
              break;
          }
          if ((v6 >> 6) - 1 == ++v7)
            goto LABEL_6;
        }
        ++v7;
      }
      v5 = v9 + (v7 << 6);
    }
  }
LABEL_6:
  a2[1] = (unint64_t *)v5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::iterator::operator++(void)::{lambda(WTF::BitVector::iterator &)#1},WTF::LikelyDenseUnsignedIntegerSet<unsigned int>::iterator::operator++(void)::{lambda(WTF::HashTableConstIteratorAdapter<WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>,unsigned int> &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::BitVector::iterator,WTF::HashTableConstIteratorAdapter<WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>,unsigned int>> &>(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;

  v3 = *(_DWORD **)a2;
  v2 = *(_DWORD **)(a2 + 8);
  do
    *(_QWORD *)a2 = ++v3;
  while (v3 != v2 && *v3 >= 0xFFFFFFFE);
}

uint64_t WTF::PrintStream::atomically<void WTF::PrintStream::print<char const*,char [17],WTF::PointerListDump<WTF::Vector<JSC::B3::Air::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,char [2]>(char const*,char [17],WTF::PointerListDump<WTF::Vector<JSC::B3::Air::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,char [2] const&)::{lambda(WTF::PrintStream&)#1}>(uint64_t a1, uint64_t a2)
{
  WTF::PrintStream *v4;
  const char *v5;
  const char *v6;
  uint64_t ***v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = *(const char **)(a2 + 8);
  v7 = *(uint64_t ****)(a2 + 16);
  v6 = *(const char **)(a2 + 24);
  WTF::PrintStream::printf(v4, "%s", **(const char ***)a2);
  WTF::PrintStream::printf(v4, "%s", v5);
  if (*((_DWORD *)*v7 + 3))
  {
    v8 = **v7;
    do
    {
      v9 = *v8++;
      v12 = v9;
      v10 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
      WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::PointerDump<JSC::B3::Air::BasicBlock>>(v10, (uint64_t)(v7 + 1), &v12);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
    }
    while (v8 != &(**v7)[*((unsigned int *)*v7 + 3)]);
  }
  WTF::PrintStream::printf(v4, "%s", v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::PointerDump<JSC::B3::Air::BasicBlock>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  float v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  WTF::PrintStream *v19;
  WTF::PrintStream *v20;
  uint64_t v22;
  int v23;
  char v24;

  if (*(_BYTE *)(a2 + 32))
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v7 = *(char **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    if (v7)
    {
      v11 = v8 - 1;
      if (!v8)
        v11 = 0;
      WTF::StringImpl::utf8ForCharacters(v7, v11, (uint64_t)&v22, v10);
    }
    else
    {
      WTF::CString::CString(&v22, &str_25, 0);
      v23 = 0;
    }
    WTF::printExpectedCStringHelper(v9, "StringView", &v22);
    if (v23 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v24, &v22);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  else
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v13 = *(char **)(a2 + 16);
    v14 = *(_QWORD *)(a2 + 24);
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    if (v13)
    {
      v17 = v14 - 1;
      if (!v14)
        v17 = 0;
      WTF::StringImpl::utf8ForCharacters(v13, v17, (uint64_t)&v22, v16);
    }
    else
    {
      WTF::CString::CString(&v22, &str_25, 0);
      v23 = 0;
    }
    WTF::printExpectedCStringHelper(v15, "StringView", &v22);
    if (v23 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v24, &v22);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    *(_BYTE *)(a2 + 32) = 1;
  }
  v18 = *a3;
  v19 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v20 = v19;
  if (v18)
  {
    WTF::PrintStream::printf(v19, "%s", "#");
    WTF::PrintStream::printf(v20, "%u");
  }
  else
  {
    WTF::PrintStream::printf(v19, "%s");
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t ***WTF::ListDump<WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(uint64_t ***result, uint64_t a2)
{
  uint64_t ***v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  char *v10;
  uint64_t **v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  char *v15;
  uint64_t **v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  char v22;

  if (*((_DWORD *)*result + 3))
  {
    v3 = result;
    v4 = **result;
    do
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      v6 = *((unsigned __int8 *)v3 + 40);
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      v8 = v7;
      v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32);
      if (v6)
      {
        v10 = (char *)v3[1];
        v11 = v3[2];
        v12 = (WTF::PrintStream *)v9(v7);
        if (v10)
        {
          v14 = (_DWORD)v11 - 1;
          if (!v11)
            v14 = 0;
          WTF::StringImpl::utf8ForCharacters(v10, v14, (uint64_t)&v20, v13);
        }
        else
        {
          WTF::CString::CString(&v20, &str_25, 0);
          v21 = 0;
        }
        WTF::printExpectedCStringHelper(v12, "StringView", &v20);
        if (v21 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v21])(&v22, &v20);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      else
      {
        v15 = (char *)v3[3];
        v16 = v3[4];
        v17 = (WTF::PrintStream *)v9(v7);
        if (v15)
        {
          v19 = (_DWORD)v16 - 1;
          if (!v16)
            v19 = 0;
          WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v20, v18);
        }
        else
        {
          WTF::CString::CString(&v20, &str_25, 0);
          v21 = 0;
        }
        WTF::printExpectedCStringHelper(v17, "StringView", &v20);
        if (v21 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v21])(&v22, &v20);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        *((_BYTE *)v3 + 40) = 1;
      }
      JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>::dump(v4, v5);
      result = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      v4 += 2;
    }
    while (v4 != &(**v3)[2 * *((unsigned int *)*v3 + 3)]);
  }
  return result;
}

uint64_t JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>::dump(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  WTF::PrintStream *v11;
  uint64_t result;

  v4 = *((unsigned __int8 *)a1 + 8);
  if (*((_BYTE *)a1 + 8))
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    if (v4 != 1)
    {
      result = 47;
      __break(0xC471u);
      return result;
    }
    v6 = (WTF::PrintStream *)v5;
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    WTF::PrintStream::printf(v7, "%s", "Rare");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    WTF::PrintStream::printf(v6, "%s", ":");
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  }
  v8 = *a1;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  v11 = v10;
  if (v8)
  {
    WTF::PrintStream::printf(v10, "%s", "#");
    WTF::PrintStream::printf(v11, "%u");
  }
  else
  {
    WTF::PrintStream::printf(v10, "%s");
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::B3::Air::CCallSpecial::forEachArg(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  unsigned __int8 v13;
  BOOL v14;

  if (*(_DWORD *)(a2 + 12) <= 1u)
  {
    __break(0xC471u);
    JUMPOUT(0x19809E150);
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), *(_QWORD *)a2 + 32, 0, 0, 3);
  if (*(_DWORD *)(a2 + 12) <= 2u
    || ((*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), *(_QWORD *)a2 + 64, 4, 0, 3), *(_DWORD *)(a2 + 12) < 4u)|| ((*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), *(_QWORD *)a2 + 96, 4, 0, 3), *(_DWORD *)(a2 + 12) <= 4u))
  {
    __break(0xC471u);
    JUMPOUT(0x19809E148);
  }
  if (*(_BYTE *)(a1 + 40))
    v6 = 4;
  else
    v6 = 3;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))a3)(*(_QWORD *)(a3 + 8), *(_QWORD *)a2 + 128, 4, 1, v6);
  if (*(_DWORD *)(a2 + 12) >= 6u)
  {
    v8 = 0;
    v9 = 5;
    do
    {
      v10 = *(_QWORD *)a2 + v8;
      v11 = *(char *)(v10 + 168);
      if (v11 == 1)
      {
        v12 = *(_DWORD *)(*(_QWORD *)a2 + v8 + 176) < 1;
      }
      else
      {
        if (*(_BYTE *)(v10 + 168))
          v14 = v11 == 21;
        else
          v14 = 1;
        v12 = v14;
      }
      v13 = 3;
      if (*(_BYTE *)(a1 + 40))
      {
        if (v12)
          v13 = 4;
        else
          v13 = 3;
      }
      result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _BOOL8, _QWORD))a3)(*(_QWORD *)(a3 + 8), v10 + 160, 0, v12, v13);
      ++v9;
      v8 += 32;
    }
    while (v9 < *(unsigned int *)(a2 + 12));
  }
  return result;
}

BOOL JSC::B3::Air::CCallSpecial::isValid(uint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  unsigned int v8;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;

  v2 = a2[3];
  if (v2 < 5)
    return 0;
  v3 = *(_QWORD *)a2;
  v4 = *(char *)(*(_QWORD *)a2 + 40);
  if (v4 == 1)
  {
    if (*(int *)(v3 + 48) < 1)
      return 0;
  }
  else
  {
    v12 = v4 > 0xA;
    v6 = (1 << v4) & 0x788;
    if (v12 || v6 == 0)
      return 0;
  }
  if (*(_QWORD *)(v3 + 64)
    || *(_BYTE *)(v3 + 72) != 1
    || *(_DWORD *)(v3 + 80) != 1
    || *(_DWORD *)(v3 + 84)
    || *(_DWORD *)(v3 + 76) != 1
    || *(_QWORD *)(v3 + 96)
    || *(_BYTE *)(v3 + 104) != 1
    || *(_DWORD *)(v3 + 112) != 2
    || *(_DWORD *)(v3 + 116)
    || *(_DWORD *)(v3 + 108) != 1
    || *(_QWORD *)(v3 + 128)
    || *(_BYTE *)(v3 + 136) != 1
    || *(_DWORD *)(v3 + 144) != -1
    || *(_DWORD *)(v3 + 148)
    || *(_DWORD *)(v3 + 140) != 1)
  {
    return 0;
  }
  if (v2 < 6)
    return 1;
  if (*(_BYTE *)(v3 + 168) != 1)
    return 0;
  v8 = *(_DWORD *)(v3 + 176);
  if (v8 <= 0xFFFFFFDF && v8 - 1 > 0x1F)
    return 0;
  v5 = 0;
  v10 = v3 + 180;
  v11 = 6;
  do
  {
    if (v8 == 9 && !*(_QWORD *)(v10 - 20) && !*(_DWORD *)v10 && *(_DWORD *)(v10 - 8) == 1)
      break;
    v5 = v11 >= v2;
    if (v2 == v11 || *(_BYTE *)(v10 + 20) != 1)
      break;
    v8 = *(_DWORD *)(v10 + 28);
    v10 += 32;
    ++v11;
    v12 = v8 <= 0xFFFFFFDF && v8 - 1 > 0x1F;
  }
  while (!v12);
  return v5;
}

uint64_t JSC::B3::Air::CCallSpecial::admitsStack()
{
  return 0;
}

uint64_t JSC::B3::Air::CCallSpecial::admitsExtendedOffsetAddr()
{
  return 0;
}

double JSC::B3::Air::CCallSpecial::generate@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  double result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::AssemblerBuffer *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1[3] <= 1u)
  {
    __break(0xC471u);
    JUMPOUT(0x19809E49CLL);
  }
  v10 = *(_QWORD *)a1;
  v11 = *(char *)(*(_QWORD *)a1 + 40);
  if (v11 == 1)
  {
    v12 = *(_DWORD *)(v10 + 48);
    *(_DWORD *)(a2 + 208) = 0;
    v13 = (32 * (_WORD)v12 + 992) & 0x3E0 | 0xD63F0000;
    v14 = *(_DWORD *)(a2 + 200);
    if (v14 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)a1, a2, a3, a4, a5, a6, a7);
      v14 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v14) = v13;
    *(_DWORD *)(a2 + 200) += 4;
  }
  else
  {
    if ((v11 - 7) < 2)
    {
      if (*(_BYTE *)(*(_QWORD *)a1 + 40) == 6)
        v24 = 0;
      else
        v24 = *(_QWORD *)(v10 + 32) << 32;
      if (!*(_BYTE *)(a2 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x19809E494);
      }
      v25 = v24 | (*(_DWORD *)(v10 + 48) - 1);
      *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
      JSC::MacroAssemblerARM64::load64(a2, v25, *(char *)(a2 + 272), a3, a4, a5, a6, a7);
      *(_DWORD *)(a2 + 208) = 0;
      v22 = (JSC::AssemblerBuffer *)(a2 + 56);
      v23 = 3594453504;
    }
    else
    {
      if ((v11 - 2) > 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19809E474);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(v10 + 32), 8, a3, a4, a5, a6, a7);
      *(_DWORD *)(a2 + 208) = 0;
      v22 = (JSC::AssemblerBuffer *)(a2 + 56);
      v23 = 3594453248;
    }
    JSC::AssemblerBuffer::putInt(v22, v23, v16, v17, v18, v19, v20, v21);
  }
  *(_QWORD *)a8 = 0xFFFFFFFFLL;
  *(_QWORD *)&result = 4278193985;
  *(_DWORD *)(a8 + 8) = -16773311;
  return result;
}

uint64_t JSC::B3::Air::CCallSpecial::extraEarlyClobberedRegs()
{
  return 0;
}

uint64_t JSC::B3::Air::CCallSpecial::extraClobberedRegs(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t JSC::B3::Air::CCallSpecial::dumpImpl(JSC::B3::Air::CCallSpecial *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v3;

  v3 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v3, "%s", "CCall");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::B3::Air::CCallSpecial::deepDumpImpl(JSC::B3::Air::CCallSpecial *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v3;

  v3 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v3, "%s", "function call that uses the C calling convention.");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void JSC::B3::Air::computeCCallingConvention(JSC::B3::Air *this@<X0>, JSC::B3::Air::Code *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  _OWORD *v22;
  __int128 v23;
  int v24;
  __int128 v25;
  __int128 v26;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  LODWORD(v25) = 9;
  WTF::Vector<JSC::B3::Air::Arg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>(a3, (unsigned int *)&v25);
  if (*((_DWORD *)a2 + 19) >= 2u)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 1;
    while (1)
    {
      v11 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 8) + 8 * v10) + 16);
      if (v11 >= 0x80000000)
        v11 = 0x80000000;
      if (v11 - 3 < 3)
        break;
      if (!v11)
      {
        if (v9 >= 8)
        {
          v20 = 0;
LABEL_42:
          v21 = 1;
LABEL_30:
          v24 = v21;
          switch(v11)
          {
            case 1u:
            case 3u:
              v7 = (v7 + 3) & 0xFFFFFFFC;
              if ((v20 & 1) != 0)
                goto LABEL_26;
              break;
            case 2u:
            case 4u:
              v7 = (v7 + 7) & 0xFFFFFFF8;
              if ((v20 & 1) != 0)
                goto LABEL_26;
              break;
            case 5u:
              v7 = (v7 + 15) & 0xFFFFFFF0;
              if ((v20 & 1) != 0)
                goto LABEL_26;
              break;
            default:
              v7 = 0;
              if (v20)
                goto LABEL_26;
              break;
          }
        }
        goto LABEL_11;
      }
      if (v11 == 0x80000000)
      {
        __break(0xC471u);
        JUMPOUT(0x19809E828);
      }
      if (v9 >= 8)
      {
        v20 = 1;
        v21 = 4;
        switch(v11)
        {
          case 1u:
          case 3u:
            goto LABEL_30;
          case 2u:
          case 4u:
            v21 = 8;
            goto LABEL_30;
          case 5u:
            goto LABEL_46;
          default:
            goto LABEL_42;
        }
      }
      LODWORD(v25) = ++v9;
      v12 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v12 == *(_DWORD *)(a3 + 8))
      {
        v14 = a3;
LABEL_14:
        WTF::Vector<JSC::B3::Air::Arg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>(v14, (unsigned int *)&v25);
        goto LABEL_11;
      }
      v13 = *(_QWORD *)a3 + 32 * v12;
      *(_QWORD *)v13 = 0;
      *(_WORD *)(v13 + 8) = 513;
      *(_DWORD *)(v13 + 12) = 1;
      *(_DWORD *)(v13 + 16) = v9;
      *(_DWORD *)(v13 + 20) = 0;
      *(_BYTE *)(v13 + 24) = 0;
      *(_DWORD *)(a3 + 12) = v12 + 1;
LABEL_11:
      if (++v10 >= (unint64_t)*((unsigned int *)a2 + 19))
        goto LABEL_16;
    }
    if (v8 > 7)
    {
      switch(v11)
      {
        case 4u:
          v7 = (v7 + 7) & 0xFFFFFFF8;
          v18 = 8;
          break;
        case 3u:
          v7 = (v7 + 3) & 0xFFFFFFFC;
          v18 = 4;
          break;
        case 5u:
LABEL_46:
          v7 = (v7 + 15) & 0xFFFFFFF0;
          v18 = 16;
          break;
        default:
          v7 = 0;
          v18 = 1;
          break;
      }
      v24 = v18;
LABEL_26:
      HIDWORD(v25) = 1;
      *(_QWORD *)&v26 = 0;
      BYTE8(v26) = 0;
      WORD4(v25) = 522;
      *(_QWORD *)&v25 = v7;
      v19 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v19 == *(_DWORD *)(a3 + 8))
      {
        WTF::Vector<JSC::B3::Air::Arg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Arg>(a3, (unint64_t)&v25);
      }
      else
      {
        v22 = (_OWORD *)(*(_QWORD *)a3 + 32 * v19);
        v23 = v26;
        *v22 = v25;
        v22[1] = v23;
        *(_DWORD *)(a3 + 12) = v19 + 1;
      }
      v7 += v24;
      goto LABEL_11;
    }
    LODWORD(v25) = ~v8;
    v16 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v16 != *(_DWORD *)(a3 + 8))
    {
      v17 = *(_QWORD *)a3 + 32 * v16;
      *(_QWORD *)v17 = 0;
      *(_WORD *)(v17 + 8) = 513;
      *(_DWORD *)(v17 + 12) = 1;
      *(_DWORD *)(v17 + 16) = ~v8;
      *(_DWORD *)(v17 + 20) = 0;
      *(_BYTE *)(v17 + 24) = 0;
      *(_DWORD *)(a3 + 12) = v16 + 1;
      ++v8;
      goto LABEL_11;
    }
    v14 = a3;
    ++v8;
    goto LABEL_14;
  }
  v7 = 0;
LABEL_16:
  v15 = (v7 + 15) & 0xFFFFFFF0;
  if (*((_DWORD *)this + 47) > v15)
    v15 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = v15;
}

uint64_t JSC::B3::Air::buildCCall@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];

  v12 = *(_QWORD *)(result + 168);
  if (!v12)
  {
    v32 = result;
    if (HIBYTE(dword_1ECF4C7B0))
    {
      if (HIBYTE(word_1ECF4C79E))
        v33 = 1;
      else
        v33 = *(_BYTE *)(*(_QWORD *)(result + 8) + 212) != 0;
    }
    else
    {
      v33 = 0;
    }
    v34 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v34 + 8) = -1;
    *(_QWORD *)v34 = off_1E357FB30;
    *(_QWORD *)(v34 + 24) = 0;
    *(_QWORD *)(v34 + 32) = 0;
    *(_QWORD *)(v34 + 16) = 0;
    *(_BYTE *)(v34 + 40) = v33;
    if (v33)
    {
      v37 = v34;
      v36 = JSC::RegisterSetBuilder::allRegisters((JSC::RegisterSetBuilder *)v34);
      v34 = v37;
    }
    else
    {
      v35 = 0;
      v36 = -1;
    }
    *(_QWORD *)(v34 + 24) = v36 & 0xFFFF00FE0003FFFCLL;
    *(_QWORD *)(v34 + 32) = v35 & 0xFFFFFFFEFFFFFFFCLL;
    *(_QWORD *)(v34 + 16) = v32;
    *(_QWORD *)&v38[0] = v34;
    v12 = JSC::B3::SparseCollection<JSC::B3::Air::Special>::add(v32 + 112, (uint64_t *)v38);
    result = *(_QWORD *)&v38[0];
    *(_QWORD *)&v38[0] = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *(_QWORD *)(v32 + 168) = v12;
  }
  *(_BYTE *)(a9 + 40) = 0;
  *(_QWORD *)(a9 + 32) = 0;
  *(_QWORD *)(a9 + 16) = v12;
  *(_QWORD *)a9 = a9 + 16;
  *(_WORD *)(a9 + 24) = 530;
  *(_DWORD *)(a9 + 28) = 1;
  *(_QWORD *)(a9 + 8) = 0x100000003;
  *(_QWORD *)(a9 + 112) = a2;
  *(_DWORD *)(a9 + 120) = 448;
  if (*(_DWORD *)(a3 + 12))
  {
    v13 = *(_OWORD *)(*(_QWORD *)a3 + 16);
    *(_OWORD *)(a9 + 48) = *(_OWORD *)*(_QWORD *)a3;
    *(_OWORD *)(a9 + 64) = v13;
    *(_QWORD *)(a9 + 80) = 0;
    *(_WORD *)(a9 + 88) = 513;
    *(_QWORD *)(a9 + 92) = 0x100000001;
    *(_DWORD *)(a9 + 100) = 0;
    *(_BYTE *)(a9 + 104) = 0;
    *(_DWORD *)(a9 + 12) = 3;
    LODWORD(v38[0]) = 2;
    result = WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>(a9, (unsigned int *)v38, a3, a4, a5, a6, a7, a8);
    v21 = *(_DWORD *)(a9 + 8);
    v20 = *(unsigned int *)(a9 + 12);
    LODWORD(v38[0]) = -1;
    if ((_DWORD)v20 == v21)
    {
      result = WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>(a9, (unsigned int *)v38, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      v22 = *(_QWORD *)a9 + 32 * v20;
      *(_QWORD *)v22 = 0;
      *(_WORD *)(v22 + 8) = 513;
      *(_QWORD *)(v22 + 12) = 0xFFFFFFFF00000001;
      *(_DWORD *)(v22 + 20) = 0;
      *(_BYTE *)(v22 + 24) = 0;
      ++*(_DWORD *)(a9 + 12);
    }
    v23 = *(unsigned int *)(a3 + 12);
    if (v23 >= 2)
    {
      v24 = 1;
      v25 = 32;
      do
      {
        v26 = (_OWORD *)(*(_QWORD *)a3 + v25);
        v27 = v26[1];
        v38[0] = *v26;
        v38[1] = v27;
        if (BYTE8(v38[0]) == 1)
        {
          v28 = *(unsigned int *)(a9 + 12);
          if ((_DWORD)v28 == *(_DWORD *)(a9 + 8))
          {
            result = WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, (void *)(v28 + 1), (unint64_t)v38, v15, v16, v17, v18, v19);
            v29 = (_OWORD *)(*(_QWORD *)a9 + 32 * *(unsigned int *)(a9 + 12));
            v30 = *(_OWORD *)result;
            v31 = *(_OWORD *)(result + 16);
          }
          else
          {
            v29 = (_OWORD *)(*(_QWORD *)a9 + 32 * v28);
            v30 = *v26;
            v31 = v26[1];
          }
          *v29 = v30;
          v29[1] = v31;
          ++*(_DWORD *)(a9 + 12);
          v23 = *(unsigned int *)(a3 + 12);
        }
        ++v24;
        v25 += 32;
      }
      while (v24 < v23);
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

JSC::B3::Air::Code *JSC::B3::Air::Code::Code(JSC::B3::Air::Code *this, JSC::B3::Procedure *a2)
{
  _QWORD *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  _BYTE v21[32];

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v3 = this;
  *((_QWORD *)this + 18) = v3;
  *((_QWORD *)this + 19) = 0x200000000;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 20) = -1;
  *((_QWORD *)this + 21) = 0;
  *((_DWORD *)this + 48) = dword_1ECF4C420;
  *((_BYTE *)this + 196) = 0;
  v4 = 1;
  if (!byte_1ECF4C327)
    v4 = BYTE2(dword_1ECF4C28A) != 0;
  *((_BYTE *)this + 197) = v4;
  *((_BYTE *)this + 198) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = (char *)this + 288;
  *((_QWORD *)this + 35) = 1;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = "initial";
  *((_QWORD *)this + 39) = 0;
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)v5 = off_1E357FBC0;
  *(_QWORD *)(v5 + 16) = JSC::B3::Air::defaultPrologueGenerator;
  *((_QWORD *)this + 40) = v5;
  v21[0] = 0;
  v21[24] = 0;
  if (byte_1ECF4C690)
    _ZNSt3__18optionalIN3WTF10WeakRandomEE7emplaceB8sn180100IJEvEERS2_DpOT_((uint64_t)v21, v6, v7, v8, v9, v10, v11, v12);
  v20[0] = v21;
  v20[1] = this;
  JSC::B3::Air::Code::Code(JSC::B3::Procedure &)::$_0::operator()(v20, 0, v7, v8, v9, v10, v11, v12);
  JSC::B3::Air::Code::Code(JSC::B3::Procedure &)::$_0::operator()(v20, 1, v13, v14, v15, v16, v17, v18);
  *((_QWORD *)this + 7) |= 0x20000000uLL;
  return this;
}

void JSC::B3::Air::defaultPrologueGenerator(JSC::B3::Air *this, JSC::CCallHelpers *a2, JSC::B3::Air::Code *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int *v36;
  _QWORD v37[2];

  v10 = (JSC::B3::Air *)((char *)this + 56);
  v11 = *((_DWORD *)this + 50);
  if (v11 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::B3::Air *)((char *)this + 56), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v11 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v11) = -1447068675;
  v12 = *((_DWORD *)this + 50);
  v13 = v12 + 4;
  *((_DWORD *)this + 50) = v12 + 4;
  if ((v12 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v13 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v13) = -1862269955;
  *((_DWORD *)this + 50) += 4;
  v14 = *((_BYTE *)this + 212);
  if (!v14)
    *((_DWORD *)this + 52) = 0;
  *((_BYTE *)this + 212) = 1;
  v15 = *((unsigned int *)a2 + 46);
  if ((_DWORD)v15)
    JSC::MacroAssemblerARM64::sub64((uint64_t)this, 31, v15, 31, a5, a6, a7, a8);
  v16 = (unsigned int *)*((_QWORD *)a2 + 25);
  if (v16)
  {
    v33 = *v16;
    v36 = v16 + 2;
    v34 = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v33 + 8));
    v17 = v34;
    *v34 = v33;
    if ((_DWORD)v33)
    {
      v35 = 0;
      do
      {
        *(_QWORD *)&v34[v35 + 2] = *(_QWORD *)&v36[v35];
        v35 += 2;
      }
      while (2 * v33 != v35);
    }
  }
  else
  {
    v17 = 0;
  }
  v18 = *((_QWORD *)a2 + 26);
  v37[0] = v17;
  v37[1] = v18;
  v19 = (unsigned int *)*((_QWORD *)a2 + 29);
  if (v19)
  {
    v20 = v17 ? (uint64_t *)(v17 + 2) : 0;
    v21 = v17 ? (uint64_t)&v17[2 * *v17 + 2] : 0;
    if (v20 != (uint64_t *)v21)
    {
      v22 = (*((_QWORD *)v19 + 2) + *v19) << 6;
      do
      {
        v23 = *v20;
        v24 = *v20 & 0x7F | 0x80;
        if ((*v20 & 0x60) == 0x20)
        {
          v25 = 128;
        }
        else
        {
          v24 = *v20;
          v25 = 0;
        }
        if ((v23 & 0x80) == 0)
        {
          v24 = *v20;
          v25 = 0;
        }
        *v20++ = ((v23 & 0xFFFFFFFFFFFFFF00) + v22) & 0xFFFFFFFFFFFFFF00 | v24 & 0x7F | v25;
      }
      while (v20 != (uint64_t *)v21);
      v17 = (unsigned int *)v37[0];
    }
  }
  JSC::AssemblyHelpers::emitSave(this, (const JSC::RegisterAtOffsetList *)v37, v15, a4, a5, a6, a7, a8);
  if (v17)
    WTF::fastFree((unint64_t)v17, v26, v27, v28, v29, v30, v31, v32);
  *((_BYTE *)this + 212) = v14;
}

uint64_t _ZNSt3__18optionalIN3WTF10WeakRandomEE7emplaceB8sn180100IJEvEERS2_DpOT_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unint64_t v10;

  if (*(_BYTE *)(a1 + 24))
    *(_BYTE *)(a1 + 24) = 0;
  v9 = WTF::cryptographicallyRandomNumber<unsigned int>(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)a1 = v9;
  if (v9)
    v10 = v9;
  else
    v10 = 1;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = ((v10 >> 26) | (v10 << 23)) ^ ((v10 ^ (v10 << 23)) >> 17);
  *(_BYTE *)(a1 + 24) = 1;
  return a1;
}

void JSC::B3::Air::Code::~Code(JSC::B3::Air::Code *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  JSC::B3::Air::Code *v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  JSC::B3::Air::GenerateAndAllocateRegisters *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int **v53;
  unsigned int **v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;

  v9 = (unsigned int *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
    {
      *(_QWORD *)(v13 + 8) = 0;
      *(_DWORD *)(v13 + 16) = 0;
      WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
    }
    if (*(_QWORD *)v13)
      WTF::fastFree(*(_QWORD *)v13 - 16, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = (unsigned int *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
    }
  }
  v19 = *((unsigned int *)this + 71);
  if ((_DWORD)v19)
  {
    v53 = (unsigned int **)*((_QWORD *)this + 34);
    v54 = &v53[v19];
    do
    {
      v55 = *v53;
      *v53 = 0;
      if (v55)
      {
        v56 = v55 + 2;
        do
        {
          v57 = __ldaxr(v56);
          v58 = v57 - 1;
        }
        while (__stlxr(v58, v56));
        if (!v58)
        {
          atomic_store(1u, v55 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v55 + 8))(v55);
        }
      }
      ++v53;
    }
    while (v53 != v54);
  }
  v20 = (JSC::B3::Air::Code *)*((_QWORD *)this + 34);
  if ((JSC::B3::Air::Code *)((char *)this + 288) != v20 && v20 != 0)
  {
    *((_QWORD *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
  }
  v22 = *((_QWORD *)this + 32);
  if (v22)
  {
    *((_QWORD *)this + 32) = 0;
    *((_DWORD *)this + 66) = 0;
    WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
  }
  v23 = *((_QWORD *)this + 30);
  if (v23)
  {
    *((_QWORD *)this + 30) = 0;
    *((_DWORD *)this + 62) = 0;
    WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
  }
  v24 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v24)
    WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
  if (*((_DWORD *)this + 39) != 2)
    WTF::fastFree(*((_QWORD *)this + 20), a2, a3, a4, a5, a6, a7, a8);
  v25 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v25)
    WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
  v26 = *((_QWORD *)this + 16);
  if (v26)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v26, a2, a3, a4, a5, a6, a7, a8);
  }
  v27 = *((unsigned int *)this + 31);
  if ((_DWORD)v27)
  {
    v28 = (uint64_t *)*((_QWORD *)this + 14);
    v29 = 8 * v27;
    do
    {
      v30 = *v28;
      *v28 = 0;
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      ++v28;
      v29 -= 8;
    }
    while (v29);
  }
  v31 = *((_QWORD *)this + 14);
  if (v31)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
  }
  v32 = *((unsigned int *)this + 27);
  if ((_DWORD)v32)
  {
    v33 = (void **)*((_QWORD *)this + 12);
    v34 = 8 * v32;
    do
    {
      a2 = *v33;
      *v33 = 0;
      if (a2)
        std::default_delete<JSC::B3::Air::BasicBlock>::operator()[abi:sn180100]((int)v33, (WTF *)a2, a3, a4, a5, a6, a7, a8);
      ++v33;
      v34 -= 8;
    }
    while (v34);
  }
  v35 = *((_QWORD *)this + 12);
  if (v35)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v35, a2, a3, a4, a5, a6, a7, a8);
  }
  v36 = *((_QWORD *)this + 10);
  if (v36)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v36, a2, a3, a4, a5, a6, a7, a8);
  }
  v37 = *((unsigned int *)this + 19);
  if ((_DWORD)v37)
  {
    v38 = (unint64_t *)*((_QWORD *)this + 8);
    v39 = 8 * v37;
    do
    {
      v40 = *v38;
      *v38 = 0;
      if (v40)
        WTF::fastFree(v40, a2, a3, a4, a5, a6, a7, a8);
      ++v38;
      v39 -= 8;
    }
    while (v39);
  }
  v41 = *((_QWORD *)this + 8);
  if (v41)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v41, a2, a3, a4, a5, a6, a7, a8);
  }
  v42 = *((_QWORD *)this + 4);
  if (v42)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v42, a2, a3, a4, a5, a6, a7, a8);
  }
  v43 = *((_QWORD *)this + 2);
  if (v43)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v43, a2, a3, a4, a5, a6, a7, a8);
  }
  v44 = *(JSC::B3::Air::GenerateAndAllocateRegisters **)this;
  *(_QWORD *)this = 0;
  if (v44)
  {
    JSC::B3::Air::GenerateAndAllocateRegisters::~GenerateAndAllocateRegisters(v44, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
  }
}

void JSC::B3::Air::Code::emitEpilogue(JSC::B3::Air::Code *this, JSC::CCallHelpers *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Air::Code *v9;
  char v10;
  unsigned int *v11;
  WTF *v12;
  WTF *v13;
  unsigned int *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  WTF *v38[2];

  if (*((_DWORD *)this + 46))
  {
    v9 = this;
    v10 = *((_BYTE *)a2 + 212);
    if (!v10)
      *((_DWORD *)a2 + 52) = 0;
    *((_BYTE *)a2 + 212) = 1;
    v11 = (unsigned int *)*((_QWORD *)this + 25);
    if (v11)
    {
      v33 = *v11;
      v36 = v11 + 2;
      v34 = 8 * *v11;
      v12 = (WTF *)WTF::fastMalloc((WTF *)(v34 + 8));
      *(_DWORD *)v12 = v33;
      if (v33)
      {
        v35 = 0;
        do
        {
          *(_QWORD *)((char *)v12 + v35 + 8) = *(_QWORD *)&v36[v35 / 4];
          v35 += 8;
        }
        while (v34 != v35);
      }
      v9 = this;
    }
    else
    {
      v12 = 0;
    }
    v13 = (WTF *)*((_QWORD *)v9 + 26);
    v38[0] = v12;
    v38[1] = v13;
    v14 = (unsigned int *)*((_QWORD *)v9 + 29);
    if (v14)
    {
      v15 = v12 ? (uint64_t *)((char *)v12 + 8) : 0;
      v16 = v12 ? (uint64_t)v12 + 8 * *(unsigned int *)v12 + 8 : 0;
      if (v15 != (uint64_t *)v16)
      {
        v17 = (*((_QWORD *)v14 + 2) + *v14) << 6;
        do
        {
          v18 = *v15;
          v19 = *v15 & 0x7F | 0x80;
          if ((*v15 & 0x60) == 0x20)
          {
            v20 = 128;
          }
          else
          {
            v19 = *v15;
            v20 = 0;
          }
          if ((v18 & 0x80) == 0)
          {
            v19 = *v15;
            v20 = 0;
          }
          *v15++ = ((v18 & 0xFFFFFFFFFFFFFF00) + v17) & 0xFFFFFFFFFFFFFF00 | v19 & 0x7F | v20;
        }
        while (v15 != (uint64_t *)v16);
      }
    }
    JSC::AssemblyHelpers::emitRestore(a2, (_DWORD **)v38, 29, a4, a5, a6, a7, a8);
    v28 = v38[0];
    v38[0] = 0;
    if (v28)
      WTF::fastFree((unint64_t)v28, v21, v22, v23, v24, v25, v26, v27);
    v29 = *((_DWORD *)a2 + 50);
    if (v29 + 4 > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), (uint64_t)v21, v22, v23, v24, v25, v26, v27);
      v29 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v29) = -1862270017;
    v30 = *((_DWORD *)a2 + 50);
    v31 = v30 + 4;
    *((_DWORD *)a2 + 50) = v30 + 4;
    if ((v30 + 8) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), (uint64_t)v21, v22, v23, v24, v25, v26, v27);
      v31 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v31) = -1463714819;
    v32 = *((_DWORD *)a2 + 50) + 4;
    *((_DWORD *)a2 + 50) = v32;
    *((_BYTE *)a2 + 212) = v10;
  }
  else
  {
    JSC::AssemblyHelpers::emitFunctionEpilogueWithEmptyFrame(a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v32 = *((_DWORD *)a2 + 50);
  }
  if (v32 + 4 > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), (uint64_t)v21, v22, v23, v24, v25, v26, v27);
    v32 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v32) = -698416192;
  *((_DWORD *)a2 + 50) += 4;
}

_DWORD *JSC::B3::Air::Code::calleeSaveRegisterAtOffsetList@<X0>(JSC::B3::Air::Code *this@<X0>, _QWORD *a2@<X8>)
{
  JSC::B3::Air::Code *v2;
  unsigned int *v3;
  _DWORD *result;
  uint64_t v5;
  unsigned int *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  _QWORD *v17;

  v2 = this;
  v3 = (unsigned int *)*((_QWORD *)this + 25);
  if (v3)
  {
    v17 = a2;
    v13 = *v3;
    v15 = v3 + 2;
    result = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v13 + 8));
    *result = v13;
    if ((_DWORD)v13)
    {
      v14 = 0;
      do
      {
        *(_QWORD *)&result[v14 + 2] = *(_QWORD *)&v15[v14];
        v14 += 2;
      }
      while (2 * v13 != v14);
    }
    v2 = this;
    a2 = v17;
  }
  else
  {
    result = 0;
  }
  v5 = *((_QWORD *)v2 + 26);
  *a2 = result;
  a2[1] = v5;
  v6 = (unsigned int *)*((_QWORD *)v2 + 29);
  if (v6)
  {
    v7 = result ? (uint64_t *)(result + 2) : 0;
    v8 = result ? (uint64_t)&result[2 * *result + 2] : 0;
    if (v7 != (uint64_t *)v8)
    {
      v9 = (*((_QWORD *)v6 + 2) + *v6) << 6;
      do
      {
        v10 = *v7;
        v11 = *v7 & 0x7F | 0x80;
        if ((*v7 & 0x60) == 0x20)
        {
          v12 = 128;
        }
        else
        {
          v11 = *v7;
          v12 = 0;
        }
        if ((v10 & 0x80) == 0)
        {
          v11 = *v7;
          v12 = 0;
        }
        *v7++ = ((v10 & 0xFFFFFFFFFFFFFF00) + v9) & 0xFFFFFFFFFFFFFF00 | v11 & 0x7F | v12;
      }
      while (v7 != (uint64_t *)v8);
    }
  }
  return result;
}

void JSC::AssemblyHelpers::emitFunctionEpilogueWithEmptyFrame(JSC::AssemblyHelpers *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;

  v9 = *((_DWORD *)this + 50);
  if (v9 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblyHelpers *)((char *)this + 56), a2, a3, a4, a5, a6, a7, a8);
    v9 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v9) = -1463714819;
  *((_DWORD *)this + 50) += 4;
}

uint64_t JSC::B3::Air::Code::needsUsedRegisters(JSC::B3::Air::Code *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 1) + 208);
}

uint64_t JSC::B3::Air::Code::addBlock(JSC::B3::Air::Code *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;

  v10 = WTF::fastMalloc((WTF *)0x70);
  v11 = (uint64_t *)((char *)this + 96);
  *(_DWORD *)v10 = *((_DWORD *)this + 27);
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = v10 + 40;
  *(_QWORD *)(v10 + 32) = 2;
  *(_QWORD *)(v10 + 72) = v10 + 88;
  *(_QWORD *)(v10 + 80) = 2;
  *(double *)(v10 + 104) = a2;
  v19 = (WTF *)v10;
  v12 = *((unsigned int *)this + 27);
  if ((_DWORD)v12 == *((_DWORD *)this + 26))
  {
    v16 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11, v12 + 1, (unint64_t)&v19);
    v12 = *((unsigned int *)this + 27);
    v17 = *((_QWORD *)this + 12);
    v18 = *v16;
    *v16 = 0;
    *(_QWORD *)(v17 + 8 * v12) = v18;
  }
  else
  {
    v13 = *v11;
    v19 = 0;
    *(_QWORD *)(v13 + 8 * v12) = v10;
  }
  *((_DWORD *)this + 27) = v12 + 1;
  v14 = v19;
  v19 = 0;
  if (v14)
    std::default_delete<JSC::B3::Air::BasicBlock>::operator()[abi:sn180100]((int)&v19, v14, v4, v5, v6, v7, v8, v9);
  return v10;
}

unsigned int *JSC::B3::Air::Code::addStackSlot(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  WTF *v15;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  WTF *v22;

  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v6 = a2;
  *(_BYTE *)(v6 + 4) = a3;
  *(_DWORD *)(v6 + 8) = -1;
  *(_QWORD *)(v6 + 16) = 0;
  if (HIDWORD(a2))
  {
    __break(0xC471u);
    JUMPOUT(0x19809F6D8);
  }
  v22 = (WTF *)v6;
  v14 = (unsigned int *)JSC::B3::SparseCollection<JSC::B3::Air::Special>::add(a1 + 64, (uint64_t *)&v22);
  v15 = v22;
  v22 = 0;
  if (v15)
    WTF::fastFree((unint64_t)v15, v7, v8, v9, v10, v11, v12, v13);
  if (*(_BYTE *)(a1 + 196))
  {
    v17 = *v14;
    v18 = 4;
    if (*v14 > 4)
      v18 = 8;
    v19 = v17 >= 2;
    if (v17 == 2)
      v20 = 2;
    else
      v20 = v18;
    if (!v19)
      v20 = 1;
    v21 = (a2 + v20 - 1 + *(_DWORD *)(a1 + 184)) & -v20;
    JSC::B3::Air::StackSlot::setOffsetFromFP((uint64_t)v14, -(uint64_t)v21);
    *(_DWORD *)(a1 + 184) = (v21 + 15) & 0xFFFFFFF0;
  }
  return v14;
}

uint64_t JSC::B3::Air::Code::addSpecial(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)(*a2 + 16) = a1;
  v2 = *a2;
  *a2 = 0;
  v6 = v2;
  v3 = JSC::B3::SparseCollection<JSC::B3::Air::Special>::add(a1 + 112, &v6);
  v4 = v6;
  v6 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return v3;
}

uint64_t JSC::B3::SparseCollection<JSC::B3::Air::Special>::add(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = result;
  v4 = *a2;
  v5 = *(unsigned int *)(result + 28);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * v5 - 8);
    *(_DWORD *)(result + 28) = v5 - 1;
    v7 = *(_QWORD **)result;
    goto LABEL_4;
  }
  v6 = *(unsigned int *)(result + 12);
  if ((_DWORD)v6 != *(_DWORD *)(result + 8))
  {
    v7 = *(_QWORD **)result;
    *(_QWORD *)(*(_QWORD *)result + 8 * v6) = 0;
    *(_DWORD *)(result + 12) = v6 + 1;
LABEL_4:
    v8 = *a2;
    *(_DWORD *)(v8 + 8) = v6;
    *a2 = 0;
    v7[v6] = v8;
    return v4;
  }
  v9 = v6 + (v6 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v6 + 1)
    v11 = v6 + 1;
  else
    v11 = v10;
  if (!(v11 >> 29))
  {
    v12 = *(_QWORD **)result;
    v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *(_DWORD *)(v3 + 8) = v11;
    *(_QWORD *)v3 = v13;
    memcpy(v13, v12, 8 * v6);
    if (v12)
    {
      if (*(_QWORD **)v3 == v12)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v12, v14, v15, v16, v17, v18, v19, v20);
    }
    v21 = *(unsigned int *)(v3 + 12);
    v7 = *(_QWORD **)v3;
    *(_QWORD *)(*(_QWORD *)v3 + 8 * v21) = 0;
    *(_DWORD *)(v3 + 12) = v21 + 1;
    goto LABEL_4;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Air::Code::entrypointIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *i;
  uint64_t v5;
  uint64_t result;

  v2 = *(unsigned int *)(a1 + 252);
  if ((_DWORD)v2)
  {
    v3 = 0;
    for (i = *(_QWORD **)(a1 + 240); *i != a2; i += 2)
    {
      if (v2 == ++v3)
      {
        v5 = 0;
        LODWORD(v3) = 0;
        return v5 | v3;
      }
    }
    v5 = 0x100000000;
    return v5 | v3;
  }
  else
  {
    result = 230;
    __break(0xC471u);
  }
  return result;
}

void JSC::B3::Air::Code::resetReachability(JSC::B3::Air::Code *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  unsigned int v15;
  uint64_t v16;
  WTF **v17;
  WTF **v18;
  WTF *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v9 = *((unsigned int *)this + 27);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = (uint64_t *)*((_QWORD *)this + 12);
    v12 = 8 * v9;
    do
    {
      v13 = v11[v10 / 8];
      if (v13)
        *(_DWORD *)(v13 + 84) = 0;
      v10 += 8;
    }
    while (v12 != v10);
    v14 = (uint64_t **)((char *)this + 240);
    v15 = *((_DWORD *)this + 63);
    if (!v15)
    {
      JSC::B3::updatePredecessorsAfter<JSC::B3::Air::BasicBlock>(*v11, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_8;
    }
  }
  else
  {
    v15 = *((_DWORD *)this + 63);
    if (!v15)
    {
      __break(0xC471u);
      return;
    }
    v14 = (uint64_t **)((char *)this + 240);
  }
  v21 = *v14;
  v22 = 16 * v15;
  do
  {
    v23 = *v21;
    v21 += 2;
    JSC::B3::updatePredecessorsAfter<JSC::B3::Air::BasicBlock>(v23, a2, a3, a4, a5, a6, a7, a8);
    v22 -= 16;
  }
  while (v22);
LABEL_8:
  v16 = *((unsigned int *)this + 27);
  if ((_DWORD)v16)
  {
    v17 = (WTF **)*((_QWORD *)this + 12);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17 && *(_DWORD *)v19 && !*((_DWORD *)v19 + 21))
      {
        v20 = *((unsigned int *)this + 63);
        if ((_DWORD)v20)
        {
          v24 = *v14;
          v25 = 16 * v20;
          while ((WTF *)*v24 != v19)
          {
            v24 += 2;
            v25 -= 16;
            if (!v25)
              goto LABEL_16;
          }
        }
        else
        {
LABEL_16:
          *v17 = 0;
          std::default_delete<JSC::B3::Air::BasicBlock>::operator()[abi:sn180100]((int)v17, v19, a3, a4, a5, a6, a7, a8);
        }
      }
      ++v17;
    }
    while (v17 != v18);
  }
}

void JSC::B3::updatePredecessorsAfter<JSC::B3::Air::BasicBlock>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  WTF *v22;
  uint64_t v24;
  WTF *v25;
  int v26;
  unsigned int v27;
  _QWORD v28[16];
  uint64_t v29;

  v25 = (WTF *)v28;
  v26 = 16;
  v28[0] = a1;
  v8 = 1;
  while (1)
  {
    v9 = *((_QWORD *)v25 + --v8);
    v27 = v8;
    v10 = *(unsigned int *)(v9 + 36);
    if ((_DWORD)v10)
      break;
LABEL_15:
    if (!v8)
    {
      v22 = v25;
      if (v28 != (_QWORD *)v25 && v25 != 0)
      {
        v25 = 0;
        v26 = 0;
        WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
      }
      return;
    }
  }
  v11 = 0;
  while (1)
  {
    v24 = 0;
    if (v11 >= *(unsigned int *)(v9 + 36))
      break;
    v24 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 16 * v11);
    v12 = v24;
    v29 = v9;
    v13 = (_QWORD *)(v24 + 72);
    v14 = *(unsigned int *)(v24 + 84);
    if ((_DWORD)v14)
    {
      v15 = (_QWORD *)*v13;
      v16 = *(unsigned int *)(v24 + 84);
      while (*v15 != v9)
      {
        ++v15;
        if (!--v16)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      if ((_DWORD)v14 == *(_DWORD *)(v24 + 80))
      {
        v20 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v14 + 1, (unint64_t)&v29);
        v14 = *(unsigned int *)(v12 + 84);
        *(_QWORD *)(*(_QWORD *)(v12 + 72) + 8 * v14) = *v20;
        v8 = v27;
      }
      else
      {
        *(_QWORD *)(*v13 + 8 * v14) = v9;
      }
      *(_DWORD *)(v12 + 84) = v14 + 1;
      v17 = v8;
      if (v8 == v26)
      {
        v21 = (uint64_t *)WTF::Vector<JSC::B3::Air::BasicBlock *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v25, v8 + 1, (unint64_t)&v24);
        v17 = v27;
        v8 = v27 + 1;
        v18 = v25;
        v19 = *v21;
      }
      else
      {
        ++v8;
        v19 = v24;
        v18 = v25;
      }
      *((_QWORD *)v18 + v17) = v19;
      v27 = v8;
    }
    if (++v11 == v10)
      goto LABEL_15;
  }
  __break(0xC471u);
}

void JSC::B3::Air::Code::dump(JSC::B3::Air::Code *this, WTF::PrintStream *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::PrintStream *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t ***v21;
  WTF::PrintStream *v22;
  WTF::PrintStream *v23;
  WTF::PrintStream *v24;
  WTF::PrintStream *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::PrintStream *v28;
  uint64_t v29;
  WTF::PrintStream *v30;
  uint64_t v31;
  uint64_t v32;
  JSC::B3::Air::Special *v33;
  WTF::PrintStream *v34;
  WTF::PrintStream *v35;
  uint64_t v36;
  const char *v37;
  WTF::PrintStream *v38;
  WTF::PrintStream *v39;
  unsigned int *v40;
  WTF *v41;
  WTF *v42;
  unsigned int *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::PrintStream *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t *v53;
  uint64_t v54;
  _DWORD *v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  WTF *v59[2];
  WTF **v60;
  _QWORD v61[4];
  char v62;

  if (*((_DWORD *)this + 63))
  {
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v10, "%s", "Air ");
    WTF::PrintStream::printf(v10, "%s", "Entrypoints: ");
    if (*((_DWORD *)this + 63))
    {
      v11 = 0;
      v12 = (uint64_t *)*((_QWORD *)this + 30);
      do
      {
        v13 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
        v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
        if (v11)
        {
          WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v60, v16);
          WTF::printExpectedCStringHelper(v15, "StringView", &v60);
          if (LODWORD(v61[0]) != -1)
            ((void (*)(WTF **, WTF ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[LODWORD(v61[0])])(v59, &v60);
        }
        else
        {
          WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v60, v16);
          WTF::printExpectedCStringHelper(v15, "StringView", &v60);
          if (LODWORD(v61[0]) != -1)
            ((void (*)(WTF **, WTF ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[LODWORD(v61[0])])(v59, &v60);
          v11 = 1;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
        JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>::dump(v12, v13);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
        v12 += 2;
      }
      while (v12 != (uint64_t *)(*((_QWORD *)this + 30) + 16 * *((unsigned int *)this + 63)));
    }
    WTF::PrintStream::printf(v10, "%s", "\n");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v17 = *((unsigned int *)this + 27);
  if (!(_DWORD)v17)
    goto LABEL_29;
  v18 = 0;
  while (!*(_QWORD *)(*((_QWORD *)this + 12) + 8 * v18))
  {
    if (v17 == ++v18)
      goto LABEL_29;
  }
  if ((_DWORD)v17 == (_DWORD)v18)
  {
LABEL_29:
    if (*((_DWORD *)this + 19))
    {
      v25 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v25, "%s", "Air ");
      WTF::PrintStream::printf(v25, "%s", "Stack slots:\n");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v26 = *((unsigned int *)this + 19);
      if ((_DWORD)v26)
      {
        v27 = 0;
        while (!*(_QWORD *)(*((_QWORD *)this + 8) + 8 * v27))
        {
          if (v26 == ++v27)
            goto LABEL_41;
        }
        while ((_DWORD)v26 != (_DWORD)v27)
        {
          v60 = *(WTF ***)(*((_QWORD *)this + 8) + 8 * v27);
          v59[0] = (WTF *)v60;
          v28 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v28, "%s", "Air ");
          WTF::PrintStream::printf(v28, "%s", "    ");
          WTF::PrintStream::printImpl<WTF::PointerDump<JSC::B3::Air::StackSlot>,char [3],JSC::B3::Air::DeepStackSlotDump,char [2]>(v28, (uint64_t)&v60, ": ", (uint64_t *)v59, "\n");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          v27 = (v27 + 1);
          v29 = *((unsigned int *)this + 19);
          if (v29 > v27)
          {
            while (!*(_QWORD *)(*((_QWORD *)this + 8) + 8 * v27))
            {
              if (v29 == ++v27)
              {
                LODWORD(v27) = *((_DWORD *)this + 19);
                break;
              }
            }
          }
        }
      }
    }
LABEL_41:
    if (*((_DWORD *)this + 31))
    {
      v30 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v30, "%s", "Air ");
      WTF::PrintStream::printf(v30, "%s", "Specials:\n");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v31 = *((unsigned int *)this + 31);
      if ((_DWORD)v31)
      {
        v32 = 0;
        while (!*(_QWORD *)(*((_QWORD *)this + 14) + 8 * v32))
        {
          if (v31 == ++v32)
            goto LABEL_56;
        }
        while ((_DWORD)v31 != (_DWORD)v32)
        {
          v33 = *(JSC::B3::Air::Special **)(*((_QWORD *)this + 14) + 8 * v32);
          v34 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v34, "%s", "Air ");
          WTF::PrintStream::printf(v34, "%s", "    ");
          if (v33)
          {
            JSC::B3::Air::Special::deepDump(v33, v34);
          }
          else
          {
            v35 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v34 + 32))(v34);
            WTF::PrintStream::printf(v35, "%s", "<null>");
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v34 + 40))(v34);
          }
          WTF::PrintStream::printf(v34, "%s", "\n");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          v32 = (v32 + 1);
          v36 = *((unsigned int *)this + 31);
          if (v36 > v32)
          {
            while (!*(_QWORD *)(*((_QWORD *)this + 14) + 8 * v32))
            {
              if (v36 == ++v32)
              {
                LODWORD(v32) = *((_DWORD *)this + 31);
                break;
              }
            }
          }
        }
      }
    }
LABEL_56:
    if (*((_DWORD *)this + 46))
    {
      if (*((_BYTE *)this + 196))
        v37 = " (Allocated)";
      else
        v37 = "";
    }
    else
    {
      if (!*((_BYTE *)this + 196))
        goto LABEL_63;
      v37 = " (Allocated)";
    }
    v38 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v38, "%s", "Air ");
    WTF::PrintStream::printf(v38, "%s", "Frame size: ");
    WTF::PrintStream::printf(v38, "%u", *((_DWORD *)this + 46));
    WTF::PrintStream::printf(v38, "%s", v37);
    WTF::PrintStream::printf(v38, "%s", "\n");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
LABEL_63:
    if (*((_DWORD *)this + 47))
    {
      v39 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v39, "%s", "Air ");
      WTF::PrintStream::printf(v39, "%s", "Call arg area size: ");
      WTF::PrintStream::printf(v39, "%u", *((_DWORD *)this + 47));
      WTF::PrintStream::printf(v39, "%s", "\n");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    }
    v40 = (unsigned int *)*((_QWORD *)this + 25);
    if (v40)
    {
      v56 = *v40;
      v55 = v40 + 2;
      v57 = 8 * v56;
      v41 = (WTF *)WTF::fastMalloc((WTF *)(v57 + 8));
      *(_DWORD *)v41 = v56;
      if (v56)
      {
        v58 = 0;
        do
        {
          *(_QWORD *)((char *)v41 + v58 + 8) = *(_QWORD *)&v55[v58 / 4];
          v58 += 8;
        }
        while (v57 != v58);
      }
    }
    else
    {
      v41 = 0;
    }
    v42 = (WTF *)*((_QWORD *)this + 26);
    v59[0] = v41;
    v59[1] = v42;
    v43 = (unsigned int *)*((_QWORD *)this + 29);
    if (v43)
    {
      v44 = v41 ? (uint64_t *)((char *)v41 + 8) : 0;
      v45 = v41 ? (uint64_t)v41 + 8 * *(unsigned int *)v41 + 8 : 0;
      if (v44 != (uint64_t *)v45)
      {
        v46 = (*((_QWORD *)v43 + 2) + *v43) << 6;
        do
        {
          v47 = *v44;
          v48 = *v44 & 0x7F | 0x80;
          if ((*v44 & 0x60) == 0x20)
          {
            v49 = 128;
          }
          else
          {
            v48 = *v44;
            v49 = 0;
          }
          if ((v47 & 0x80) == 0)
          {
            v48 = *v44;
            v49 = 0;
          }
          *v44++ = ((v47 & 0xFFFFFFFFFFFFFF00) + v46) & 0xFFFFFFFFFFFFFF00 | v48 & 0x7F | v49;
        }
        while (v44 != (uint64_t *)v45);
        v41 = v59[0];
      }
    }
    if (!v41)
      return;
    if (*(_DWORD *)v41)
    {
      v50 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v50, "%s", "Air ");
      WTF::PrintStream::printf(v50, "%s", "Callee saves: ");
      v60 = v59;
      v61[0] = ", ";
      v61[1] = 3;
      v61[2] = &str_107_1;
      v61[3] = 1;
      v62 = 0;
      v51 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v50 + 32))(v50);
      v52 = v59[0];
      if (v59[0])
        v53 = (uint64_t *)((char *)v59[0] + 8);
      else
        v53 = 0;
      if (v59[0])
LABEL_88:
        v52 = (WTF *)((char *)v52 + 8 * *(unsigned int *)v52 + 8);
      while (v53 != (uint64_t *)v52)
      {
        v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 32))(v51);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,JSC::RegisterAtOffset>(v54, (uint64_t)v61, v53);
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 40))(v51);
        ++v53;
        v52 = *v60;
        if (*v60)
          goto LABEL_88;
      }
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v50 + 40))(v50);
      WTF::PrintStream::printf(v50, "%s", "\n");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v41 = v59[0];
      v59[0] = 0;
      if (!v41)
        return;
    }
    else
    {
      v59[0] = 0;
    }
    WTF::fastFree((unint64_t)v41, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v19 = v18;
  v20 = *((unsigned int *)this + 27);
  while (v20 > v19)
  {
    v21 = *(uint64_t ****)(*((_QWORD *)this + 12) + 8 * v19);
    v22 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v23 = v22;
    if (v21)
    {
      JSC::B3::Air::BasicBlock::deepDump(v21, v22);
    }
    else
    {
      v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v22 + 32))(v22);
      WTF::PrintStream::printf(v24, "%s", "<null>");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v23 + 40))(v23);
    }
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    ++v19;
    v20 = *((unsigned int *)this + 27);
    if (v20 > v19)
    {
      while (!*(_QWORD *)(*((_QWORD *)this + 12) + 8 * v19))
      {
        if (v20 == ++v19)
        {
          v19 = *((unsigned int *)this + 27);
          goto LABEL_28;
        }
      }
      v19 = v19;
    }
LABEL_28:
    if (v17 == v19)
      goto LABEL_29;
  }
  __break(0xC471u);
}

uint64_t JSC::B3::Air::Code::findFirstBlockIndex(JSC::B3::Air::Code *this, uint64_t a2)
{
  uint64_t v2;

  v2 = *((unsigned int *)this + 27);
  if (v2 > a2)
  {
    a2 = a2;
    while (!*(_QWORD *)(*((_QWORD *)this + 12) + 8 * a2))
    {
      if (v2 == ++a2)
        return *((unsigned int *)this + 27);
    }
  }
  return a2;
}

void JSC::B3::Air::Code::setNumEntrypoints(JSC::B3::Air::Code *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int **v14;
  unsigned int **v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int **v18;
  unsigned int **v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  JSC::B3::Air::Code *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int **v29;
  int v30;
  unsigned int v31;
  uint64_t v32;

  v8 = (int)a2;
  v10 = a2;
  v11 = (unsigned int *)*((_QWORD *)this + 40);
  v12 = v11 + 2;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v29 = (unsigned int **)&v32;
  v30 = 1;
  v31 = a2;
  if (a2 >= 2)
  {
    if (a2 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v14 = (unsigned int **)WTF::fastMalloc((WTF *)(8 * a2));
    v30 = v8;
    v29 = v14;
    v10 = v31;
    v8 = v31;
  }
  else
  {
    v14 = (unsigned int **)&v32;
  }
  if (v8)
  {
    v15 = &v14[v10];
    do
    {
      do
        v16 = __ldaxr(v12);
      while (__stlxr(v16 + 1, v12));
      *v14++ = v11;
    }
    while (v14 != v15);
  }
  v17 = *((unsigned int *)this + 71);
  if ((_DWORD)v17)
  {
    v18 = (unsigned int **)*((_QWORD *)this + 34);
    v19 = &v18[v17];
    do
    {
      v20 = *v18;
      *v18 = 0;
      if (v20)
      {
        v21 = v20 + 2;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v20 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
        }
      }
      ++v18;
    }
    while (v18 != v19);
  }
  v24 = (JSC::B3::Air::Code *)*((_QWORD *)this + 34);
  if (v24 != (JSC::B3::Air::Code *)((char *)this + 288))
  {
    if (v24)
    {
      *((_QWORD *)this + 34) = 0;
      *((_DWORD *)this + 70) = 0;
      WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
    }
    *((_QWORD *)this + 34) = (char *)this + 288;
  }
  if (v29 == (unsigned int **)&v32)
  {
    v25 = v31;
    memcpy((char *)this + 288, &v32, 8 * v31);
    v26 = v30;
  }
  else
  {
    *((_QWORD *)this + 34) = v29;
    v26 = v30;
    v25 = v31;
  }
  *((_DWORD *)this + 70) = v26;
  *((_DWORD *)this + 71) = v25;
  if (v11)
  {
    do
    {
      v27 = __ldaxr(v12);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v12));
    if (!v28)
    {
      atomic_store(1u, v11 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
}

uint64_t JSC::B3::Air::PatchCustom::isValidForm(JSC::B3::Air::PatchCustom *this, JSC::B3::Air::Inst *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD v10[3];
  char v11;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD *v14;
  _QWORD v15[3];

  if (!*((_DWORD *)this + 3) || *(_BYTE *)(*(_QWORD *)this + 8) != 18)
    return 0;
  result = (*(uint64_t (**)(_QWORD, JSC::B3::Air::PatchCustom *))(***(_QWORD ***)this + 24))(**(_QWORD **)this, this);
  if ((_DWORD)result)
  {
    if (!*((_DWORD *)this + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x1980A08C8);
    }
    v13[0] = (*(uint64_t (**)(_QWORD, JSC::B3::Air::PatchCustom *))(***(_QWORD ***)this + 72))(**(_QWORD **)this, this);
    v13[1] = 0;
    if (*((_DWORD *)this + 3))
    {
      v12[0] = (*(uint64_t (**)(_QWORD, JSC::B3::Air::PatchCustom *))(***(_QWORD ***)this + 80))(**(_QWORD **)this, this);
      v12[1] = 0;
      v11 = 1;
      v10[0] = &v11;
      v10[1] = v12;
      v10[2] = v13;
      v14 = v10;
      if ((*((__int16 *)this + 60) - 446) <= 5)
      {
        v15[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::PatchCustom::isValidForm(JSC::B3::Air::Inst&)::$_0>(JSC::B3::Air::PatchCustom::isValidForm(JSC::B3::Air::Inst&)::$_0 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
        v15[1] = v15;
        v15[2] = &v14;
        JSC::B3::Air::Inst::forEachArgCustom((uint64_t)this, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::PatchCustom::isValidForm(JSC::B3::Air::Inst&)::$_0>(JSC::B3::Air::PatchCustom::isValidForm(JSC::B3::Air::Inst&)::$_0 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction, (uint64_t)v15);
        return v11 != 0;
      }
      v4 = *((unsigned int *)this + 3);
      if (!(_DWORD)v4)
        return v11 != 0;
      v5 = 0;
      v6 = 0;
      v7 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
         + 21 * *((__int16 *)this + 60)
         + ((unint64_t)((v4 - 1) * v4) >> 1);
      v8 = 32 * v4;
      while (1)
      {
        if (v6 >= *((unsigned int *)this + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x1980A08C0);
        }
        v9 = *v7;
        if ((v9 >> 5) - 1 >= 5)
          break;
        JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::PatchCustom::isValidForm(JSC::B3::Air::Inst&)::$_0>(JSC::B3::Air::PatchCustom::isValidForm(JSC::B3::Air::Inst&)::$_0 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()((uint64_t)v10, *(_QWORD *)this + v5, v9 & 0xF);
        ++v6;
        ++v7;
        v5 += 32;
        if (v8 == v5)
          return v11 != 0;
      }
      __break(0xC471u);
    }
    else
    {
      __break(0xC471u);
    }
    JUMPOUT(0x1980A08B8);
  }
  return result;
}

uint64_t JSC::B3::Air::CCallCustom::isValidForm(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t i;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _DWORD *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  int *v40;
  unint64_t v41;
  int v42;
  BOOL v43;
  _DWORD *v45;
  unint64_t v46;
  unsigned int v47;
  BOOL v48;
  int v49;

  result = 0;
  v3 = a1[14];
  if (!v3 || (*(_WORD *)(v3 + 12) & 0xFFF) != 0x52)
    return result;
  v4 = *((unsigned int *)a1 + 3);
  if (!(_DWORD)v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1980A0D70);
  }
  v5 = *a1;
  if (*(_BYTE *)(v5 + 8) != 18)
    return 0;
  v6 = *(_DWORD *)(v3 + 16);
  if (v6 >= 0x80000000)
    v7 = 0x80000000;
  else
    v7 = v6;
  v8 = 1;
  if ((_DWORD)v7 == 2)
    v8 = 1;
  if ((_DWORD)v7 == 0x80000000)
    v8 = 2;
  v9 = v7 != 0;
  if ((_DWORD)v7)
    v10 = v8;
  else
    v10 = v7;
  v11 = v10 + 1;
  v12 = *(_QWORD *)(v3 + 64);
  v13 = *(unsigned int *)(v3 + 76);
  if ((_DWORD)v13)
  {
    v14 = 8 * v13;
    v15 = v12;
    do
    {
      LODWORD(v16) = *(_DWORD *)(*(_QWORD *)v15 + 16);
      if (v16 >= 0x80000000)
        v16 = 0x80000000;
      else
        v16 = v16;
      if ((_DWORD)v16 == 2)
        goto LABEL_21;
      if ((_DWORD)v16 == 0x80000000)
      {
LABEL_139:
        __break(0xC471u);
        JUMPOUT(0x1980A0D38);
      }
      if ((_DWORD)v16)
LABEL_21:
        v16 = 1;
      v11 += v16;
      v15 += 8;
      v14 -= 8;
    }
    while (v14);
  }
  if (v11 != v4)
    return 0;
  v17 = (v4 - 1);
  if ((_DWORD)v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1980A0D78);
  }
  v18 = (_DWORD *)(v5 + 32 * v17 + 16);
  do
  {
    if (v17 >= v4)
    {
      __break(0xC471u);
      JUMPOUT(0x1980A0D60);
    }
    v19 = *((char *)v18 - 8);
    if (v19 != 1 && (v19 - 8) >= 3)
    {
      if (v19 == 7)
      {
        if (*v18 != 30 && *v18 != 32)
          return 0;
      }
      else if ((v19 - 2) > 3)
      {
        return 0;
      }
    }
    v18 -= 8;
    --v17;
  }
  while ((_DWORD)v17);
  v20 = *(char *)(v5 + 40);
  if (v20 == 1)
  {
    if (*(int *)(v5 + 48) >= 1)
      goto LABEL_40;
    return 0;
  }
  result = 0;
  if (!*(_BYTE *)(v5 + 40) || v20 == 21)
    return result;
LABEL_40:
  if (v9)
  {
    if (v10 <= 1)
      v10 = 1;
    if ((v6 & 0x80000000) != 0)
    {
      v28 = 0;
      v29 = v6 & 0x7FFFFFFF;
      if (v4 <= 2)
        v30 = 2;
      else
        v30 = v4;
      v31 = (v30 - 2);
      v32 = (_DWORD *)(v5 + 80);
      while (v31 != v28)
      {
        v33 = *((char *)v32 - 8);
        if (v33 - 2 < 4)
          return 0;
        v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
        if (v29 >= *(_DWORD *)(v34 + 44))
        {
          __break(0xC471u);
          JUMPOUT(0x1980A0D88);
        }
        v35 = *(_QWORD *)(v34 + 32) + 16 * v29;
        if (*(_DWORD *)(v35 + 12) <= v28)
          goto LABEL_139;
        v36 = *(_DWORD *)(*(_QWORD *)v35 + 4 * v28);
        if (v36 >= 0x80000000)
          v36 = 0x80000000;
        if (v36 - 3 < 3)
        {
          if (v33 == 1)
          {
            if ((*v32 & 0x80000000) == 0)
              return 0;
          }
          else
          {
            result = 0;
            if (v33 > 0xD || ((1 << v33) & 0x3FC8) == 0)
              return result;
          }
        }
        else if (v33 == 1)
        {
          if ((int)*v32 <= 0)
            return 0;
        }
        else
        {
          result = 0;
          if (!*((_BYTE *)v32 - 8) || v33 == 21)
            return result;
        }
        ++v28;
        v32 += 8;
        if (v10 == v28)
          goto LABEL_73;
      }
    }
    else
    {
      v37 = v6 - 3;
      if (v4 <= 2)
        v38 = 2;
      else
        v38 = v4;
      v39 = (v38 - 2);
      if (v37 < 3)
      {
        v45 = (_DWORD *)(v5 + 80);
        v46 = v10;
        do
        {
          if (!v39)
            goto LABEL_137;
          v47 = *((char *)v45 - 8);
          if (v47 - 2 < 4)
            return 0;
          if (v47 == 1)
          {
            if ((*v45 & 0x80000000) == 0)
              return 0;
          }
          else
          {
            v48 = v47 > 0xD;
            v49 = (1 << v47) & 0x3FC8;
            if (v48 || v49 == 0)
              return 0;
          }
          v45 += 8;
          --v39;
          --v46;
        }
        while (v46);
LABEL_73:
        v21 = v10 + 2;
        goto LABEL_42;
      }
      v40 = (int *)(v5 + 80);
      v41 = v10;
      while (v39)
      {
        v42 = *((char *)v40 - 8);
        if ((v42 - 2) < 4)
          return 0;
        if (v42 == 1)
        {
          if (*v40 < 1)
            return 0;
        }
        else
        {
          result = 0;
          if (!*((_BYTE *)v40 - 8) || v42 == 21)
            return result;
        }
        v40 += 8;
        --v39;
        if (!--v41)
          goto LABEL_73;
      }
    }
LABEL_137:
    __break(0xC471u);
    JUMPOUT(0x1980A0D80);
  }
  v21 = 2;
LABEL_42:
  if (v13 >= 2)
  {
    v22 = v12 + 8;
    for (i = v13 - 1; i; --i)
    {
      if (*(_DWORD *)(*(_QWORD *)v22 + 16) >= 0x80000000)
        v24 = 0x80000000;
      else
        v24 = *(_DWORD *)(*(_QWORD *)v22 + 16);
      if (v24)
      {
        if (v24 == 0x80000000)
        {
          __break(0xC471u);
          JUMPOUT(0x1980A0D58);
        }
        if (v4 <= v21)
        {
          __break(0xC471u);
          JUMPOUT(0x1980A0D68);
        }
        v25 = v21++;
        v26 = v24 - 3;
        v27 = *(char *)(v5 + 32 * v25 + 8);
        if (v26 < 3)
        {
          if (v27 == 1)
          {
            if ((*(_DWORD *)(v5 + 32 * v25 + 16) & 0x80000000) == 0)
              return 0;
          }
          else if (v27 > 0xD || ((1 << v27) & 0x3FC8) == 0)
          {
            return 0;
          }
        }
        else if (v27 == 1)
        {
          if (*(int *)(v5 + 32 * v25 + 16) <= 0)
            return 0;
        }
        else
        {
          if (*(_BYTE *)(v5 + 32 * v25 + 8))
            v43 = v27 == 21;
          else
            v43 = 1;
          if (v43)
            return 0;
        }
      }
      v22 += 8;
    }
  }
  return 1;
}

void JSC::B3::Air::CCallCustom::generate(JSC::B3::Air::Arg **a1)
{
  WTF::dataLog<char [26],JSC::B3::Air::Inst,char [2]>(a1);
  __break(0xC471u);
}

uint64_t WTF::dataLog<char [26],JSC::B3::Air::Inst,char [2]>(JSC::B3::Air::Arg **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  JSC::B3::Air::Kind *v5;
  WTF::PrintStream *v6;
  char v8;
  JSC::B3::Air::Arg ***v9;
  JSC::B3::Air::Arg **v10[5];
  char v11;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10[0] = (JSC::B3::Air::Arg **)&v8;
    v9 = v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "FATAL: Unlowered C call: ");
  v5 = (JSC::B3::Air::Kind *)(a1 + 15);
  v10[0] = a1;
  v10[1] = (JSC::B3::Air::Arg **)", ";
  v10[2] = (JSC::B3::Air::Arg **)3;
  v10[3] = (JSC::B3::Air::Arg **)&str_477;
  v10[4] = (JSC::B3::Air::Arg **)1;
  v11 = 0;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  JSC::B3::Air::Kind::dump(v5, v6);
  WTF::PrintStream::printf(v6, "%s", " ");
  WTF::ListDump<WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(v10, (uint64_t)v6);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::B3::Air::ShuffleCustom::isValidForm(uint64_t this, JSC::B3::Air::Inst *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int j;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  BOOL v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  BOOL v52;
  char v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int k;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  BOOL v63;
  uint64_t v64;
  int v65;
  BOOL v66;
  BOOL v67;
  BOOL v68;
  _BYTE v69[24];
  uint64_t v70;
  __int128 v71;
  __int128 v72;

  v8 = *(unsigned int *)(this + 12);
  if (0xAAAAAAAAAAAAAAABLL * v8 > 0x5555555555555555)
    return 0;
  v70 = 0;
  v9 = 1;
  if (!v8)
    return v9;
  v10 = this;
  v11 = 0;
  v12 = 0;
  while (1)
  {
    v13 = *(_QWORD *)v10;
    v14 = (__int128 *)(*(_QWORD *)v10 + v11);
    v15 = v14[1];
    v71 = *v14;
    v72 = v15;
    if ((_DWORD)v12 == 3 * (v12 / 3))
      break;
    if (v12 % 3 != 2)
    {
      this = WTF::HashTable<JSC::B3::Air::Arg,JSC::B3::Air::Arg,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>>::add((uint64_t)v69, &v70, &v71);
      if (!v69[16])
        goto LABEL_118;
      goto LABEL_17;
    }
    if (BYTE8(v71) != 19)
      goto LABEL_118;
LABEL_20:
    ++v12;
    v11 += 32;
    if (v12 >= v8)
    {
      v9 = 1;
      if (!v8)
      {
LABEL_119:
        if (v70)
          WTF::fastFree(v70 - 16, a2, a3, a4, a5, a6, a7, a8);
        return v9;
      }
      v18 = *(_QWORD *)v10;
      v19 = v18 + 32 * v8;
      v20 = v70;
LABEL_32:
      v21 = *(char *)(v18 + 8);
      if (v21 - 6 > 7 || v21 > 0xD)
        goto LABEL_116;
      if (((1 << v21) & 0x31C0) != 0)
      {
        v23 = *(_DWORD *)(v18 + 16);
        *(_QWORD *)&v71 = 0;
        WORD4(v71) = 513;
        HIDWORD(v71) = 1;
        *(_QWORD *)&v72 = v23;
        BYTE8(v72) = 0;
        if (v20)
        {
          v24 = *(_DWORD *)(v20 - 8);
          v25 = WTF::IdentityHashTranslator<WTF::HashTraits<JSC::B3::Air::Arg>,WTF::DefaultHash<JSC::B3::Air::Arg>>::hash<JSC::B3::Air::Arg>((int32x2_t *)&v71);
          for (i = 0; ; v25 = i + v27)
          {
            v27 = v25 & v24;
            v28 = v20 + 32 * v27;
            v29 = *(_QWORD *)v28;
            v30 = *(unsigned __int8 *)(v28 + 8);
            v31 = *(_DWORD *)(v28 + 16);
            if (*(_QWORD *)v28)
              v32 = 0;
            else
              v32 = v30 == 1;
            if (v32)
            {
              if (v31 == v23)
              {
                v33 = v20 + 32 * v27;
                if (!*(_DWORD *)(v33 + 20) && *(_DWORD *)(v33 + 12) == 1)
                  goto LABEL_118;
                v30 = 1;
                v31 = v23;
              }
              else
              {
                v30 = 1;
              }
            }
            v34 = *(_DWORD *)(v28 + 20);
            v35 = !v29 && v30 == 0;
            v36 = v35 && v31 == 0;
            v37 = v36 && v34 == 0;
            if (v37 && *(_DWORD *)(v20 + 32 * v27 + 12) == 1)
              break;
            ++i;
          }
        }
        goto LABEL_116;
      }
      if (v21 != 11)
        goto LABEL_116;
      v38 = *(_DWORD *)(v18 + 16);
      *(_QWORD *)&v71 = 0;
      WORD4(v71) = 513;
      HIDWORD(v71) = 1;
      *(_QWORD *)&v72 = v38;
      BYTE8(v72) = 0;
      if (!v20)
      {
LABEL_88:
        v53 = 0;
        goto LABEL_90;
      }
      v39 = *(_DWORD *)(v20 - 8);
      v40 = WTF::IdentityHashTranslator<WTF::HashTraits<JSC::B3::Air::Arg>,WTF::DefaultHash<JSC::B3::Air::Arg>>::hash<JSC::B3::Air::Arg>((int32x2_t *)&v71);
      for (j = 0; ; v40 = j + v42)
      {
        v42 = v40 & v39;
        v43 = v20 + 32 * v42;
        v44 = *(_QWORD *)v43;
        v45 = *(unsigned __int8 *)(v43 + 8);
        v46 = *(_DWORD *)(v43 + 16);
        if (*(_QWORD *)v43)
          v47 = 0;
        else
          v47 = v45 == 1;
        if (v47)
        {
          if (v46 == v38)
          {
            v48 = v20 + 32 * v42;
            if (!*(_DWORD *)(v48 + 20) && *(_DWORD *)(v48 + 12) == 1)
            {
              v53 = 1;
LABEL_90:
              v54 = *(_DWORD *)(v18 + 20);
              *(_QWORD *)&v71 = 0;
              WORD4(v71) = 513;
              HIDWORD(v71) = 1;
              *(_QWORD *)&v72 = v54;
              BYTE8(v72) = 0;
              if (v20)
              {
                v55 = *(_DWORD *)(v20 - 8);
                v56 = WTF::IdentityHashTranslator<WTF::HashTraits<JSC::B3::Air::Arg>,WTF::DefaultHash<JSC::B3::Air::Arg>>::hash<JSC::B3::Air::Arg>((int32x2_t *)&v71);
                for (k = 0; ; v56 = k + v58)
                {
                  v58 = v56 & v55;
                  v59 = v20 + 32 * v58;
                  v60 = *(_QWORD *)v59;
                  v61 = *(unsigned __int8 *)(v59 + 8);
                  v62 = *(_DWORD *)(v59 + 16);
                  if (*(_QWORD *)v59)
                    v63 = 0;
                  else
                    v63 = v61 == 1;
                  if (v63)
                  {
                    if (v62 == v54)
                    {
                      v64 = v20 + 32 * v58;
                      if (!*(_DWORD *)(v64 + 20) && *(_DWORD *)(v64 + 12) == 1)
                        goto LABEL_118;
                      v61 = 1;
                      v62 = v54;
                    }
                    else
                    {
                      v61 = 1;
                    }
                  }
                  v65 = *(_DWORD *)(v59 + 20);
                  v66 = !v60 && v61 == 0;
                  v67 = v66 && v62 == 0;
                  v68 = v67 && v65 == 0;
                  if (v68 && *(_DWORD *)(v20 + 32 * v58 + 12) == 1)
                    break;
                  ++k;
                }
              }
              if ((v53 & 1) != 0)
                goto LABEL_118;
LABEL_116:
              v18 += 32;
              if (v18 == v19)
              {
                v9 = 1;
                goto LABEL_119;
              }
              goto LABEL_32;
            }
            v45 = 1;
            v46 = v38;
          }
          else
          {
            v45 = 1;
          }
        }
        v49 = *(_DWORD *)(v43 + 20);
        if (v44)
          v50 = 0;
        else
          v50 = v45 == 0;
        v52 = v50 && v46 == 0 && v49 == 0;
        if (v52 && *(_DWORD *)(v20 + 32 * v42 + 12) == 1)
          goto LABEL_88;
        ++j;
      }
    }
  }
  if ((SBYTE8(v71) - 2) < 4)
    goto LABEL_20;
  if (v12 + 1 < v8)
  {
    v16 = v13 + v11;
    if (SBYTE8(v71) <= 0x12)
    {
      this = v16 + 32;
      if (((1 << SBYTE8(v71)) & 0x40034) != 0)
      {
        v17 = 0;
LABEL_14:
        this = JSC::B3::Air::Arg::isBank(this, v17, v16);
        if ((this & 1) == 0)
          goto LABEL_118;
LABEL_17:
        if (SBYTE8(v71) != 1 && (SBYTE8(v71) - 6) > 7)
        {
LABEL_118:
          v9 = 0;
          goto LABEL_119;
        }
        v8 = *(unsigned int *)(v10 + 12);
        goto LABEL_20;
      }
      if (SBYTE8(v71) == 1)
      {
        LODWORD(v16) = v72;
        v17 = (int)v72 < 1;
        goto LABEL_14;
      }
    }
    LODWORD(v16) = *(char *)(v16 + 40);
    if (v16 > 0x12)
      goto LABEL_17;
    if (((1 << v16) & 0x40034) != 0)
    {
      v17 = 0;
    }
    else
    {
      if ((_DWORD)v16 != 1)
        goto LABEL_17;
      LODWORD(v16) = *(_DWORD *)(v13 + v11 + 48);
      v17 = (int)v16 < 1;
    }
    this = (uint64_t)&v71;
    goto LABEL_14;
  }
  __break(0xC471u);
  return this;
}

void JSC::B3::Air::ShuffleCustom::generate(JSC::B3::Air::Arg **a1)
{
  WTF::dataLog<char [27],JSC::B3::Air::Inst,char [2]>(a1);
  __break(0xC471u);
}

uint64_t WTF::dataLog<char [27],JSC::B3::Air::Inst,char [2]>(JSC::B3::Air::Arg **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  JSC::B3::Air::Kind *v5;
  WTF::PrintStream *v6;
  char v8;
  JSC::B3::Air::Arg ***v9;
  JSC::B3::Air::Arg **v10[5];
  char v11;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10[0] = (JSC::B3::Air::Arg **)&v8;
    v9 = v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "FATAL: Unlowered shuffle: ");
  v5 = (JSC::B3::Air::Kind *)(a1 + 15);
  v10[0] = a1;
  v10[1] = (JSC::B3::Air::Arg **)", ";
  v10[2] = (JSC::B3::Air::Arg **)3;
  v10[3] = (JSC::B3::Air::Arg **)&str_477;
  v10[4] = (JSC::B3::Air::Arg **)1;
  v11 = 0;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  JSC::B3::Air::Kind::dump(v5, v6);
  WTF::PrintStream::printf(v6, "%s", " ");
  WTF::ListDump<WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(v10, (uint64_t)v6);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

BOOL JSC::B3::Air::WasmBoundsCheckCustom::isValidForm(_DWORD *a1)
{
  int v1;
  int v3;

  if (a1[3] != 2)
    return 0;
  v1 = *(char *)(*(_QWORD *)a1 + 8);
  if (v1 != 1 && (v1 - 2) > 3)
    return 0;
  v3 = *(char *)(*(_QWORD *)a1 + 40);
  return v3 == 1 || (v3 - 2) < 4;
}

double JSC::B3::Air::WasmBoundsCheckCustom::generate@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  int v6;
  _OWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  double result;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  int v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  _BYTE v48[32];
  int v49;
  _BYTE v50[35];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if ((*(_WORD *)(*(_QWORD *)(a1 + 112) + 12) & 0xFFF) == 0x59)
    v5 = *(_QWORD *)(a1 + 112);
  else
    v5 = 0;
  v6 = *(_DWORD *)(a1 + 12);
  if (v6 == 1)
  {
    __break(0xC471u);
    goto LABEL_27;
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1980A1758);
  }
  v8 = *(_OWORD **)a1;
  *(_OWORD *)&v50[3] = *(_OWORD *)*(_QWORD *)a1;
  *(_OWORD *)&v50[12] = *(_OWORD *)((char *)v8 + 9);
  *(_OWORD *)v48 = v8[2];
  *(_OWORD *)&v48[9] = *(_OWORD *)((char *)v8 + 41);
  v35 = (WTF *)&v37;
  v37 = 2;
  v38 = 526;
  v39 = 1;
  v40 = 0;
  v41 = 0;
  v42 = *(_OWORD *)&v50[3];
  v43 = *(_OWORD *)&v50[19];
  v44 = *(_OWORD *)v48;
  v45 = *(_OWORD *)&v48[16];
  v36 = 0x300000003;
  v46 = v5;
  v47 = 292;
  JSC::B3::Air::Inst::generate((uint64_t *)&v49, (int)&v35, a2);
  v16 = v35;
  if (&v37 != (uint64_t *)v35 && v35)
  {
    v35 = 0;
    LODWORD(v36) = 0;
    WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
  }
  v17 = v49;
  v18 = *(_QWORD *)v50;
  v19 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v19 + 8) = 1;
  *(_QWORD *)v19 = off_1E357FBE8;
  *(_DWORD *)(v19 + 16) = v17;
  *(_QWORD *)(v19 + 20) = v18;
  *(_QWORD *)(v19 + 32) = v5;
  v20 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v20 != *(_DWORD *)(a3 + 8))
  {
    v21 = (uint64_t *)(*(_QWORD *)a3 + 8 * v20);
    goto LABEL_11;
  }
  v23 = v20 + (v20 >> 2);
  if (v23 >= 0x10)
    v24 = v23 + 1;
  else
    v24 = 16;
  if (v24 <= v20 + 1)
    v25 = v20 + 1;
  else
    v25 = v24;
  if (v25 >> 29)
  {
    __break(0xC471u);
LABEL_27:
    JUMPOUT(0x1980A1750);
  }
  v26 = *(const void **)a3;
  v27 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
  *(_DWORD *)(a3 + 8) = v25;
  *(_QWORD *)a3 = v27;
  memcpy(v27, v26, 8 * v20);
  if (v26)
  {
    if (*(const void **)a3 == v26)
    {
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v26, v28, v29, v30, v31, v32, v33, v34);
  }
  v20 = *(unsigned int *)(a3 + 12);
  v21 = (uint64_t *)(*(_QWORD *)a3 + 8 * v20);
LABEL_11:
  *v21 = v19;
  *(_DWORD *)(a3 + 12) = v20 + 1;
  *(_QWORD *)a4 = 0xFFFFFFFFLL;
  *(_QWORD *)&result = 4278193985;
  *(_DWORD *)(a4 + 8) = -16773311;
  return result;
}

uint64_t JSC::B3::Air::Disassembler::startEntrypoint(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 200);
  return result;
}

uint64_t JSC::B3::Air::Disassembler::endEntrypoint(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 200);
  return result;
}

uint64_t JSC::B3::Air::Disassembler::startLatePath(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 200);
  return result;
}

uint64_t JSC::B3::Air::Disassembler::endLatePath(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 200);
  return result;
}

_QWORD *JSC::B3::Air::Disassembler::startBlock(JSC::B3::Air::Disassembler *this, JSC::B3::Air::BasicBlock *a2, JSC::CCallHelpers *a3)
{
  _QWORD *result;
  uint64_t v5;
  JSC::B3::Air::BasicBlock *v6;

  v6 = a2;
  result = (_QWORD *)((char *)this + 8);
  v5 = *((unsigned int *)this + 5);
  if ((_DWORD)v5 == *((_DWORD *)this + 4))
  {
    result = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v5 + 1, (unint64_t)&v6);
    v5 = *((unsigned int *)this + 5);
    *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v5) = *result;
  }
  else
  {
    *(_QWORD *)(*result + 8 * v5) = a2;
  }
  *((_DWORD *)this + 5) = v5 + 1;
  return result;
}

uint64_t JSC::B3::Air::Disassembler::addInst(uint64_t *a1, uint64_t a2, _DWORD *a3, int *a4)
{
  int v4;
  uint64_t result;
  _DWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v8 = a2;
  v4 = *a4;
  v6[0] = *a3;
  v6[1] = v4;
  result = (uint64_t)WTF::HashMap<JSC::B3::Air::Inst *,std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::DefaultHash<JSC::B3::Air::Inst *>,WTF::HashTraits<JSC::B3::Air::Inst *>,WTF::HashTraits<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>>,WTF::HashTableTraits>::add<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>>(a1, &v8, v6, (uint64_t)v7);
  if (!v7[16])
  {
    result = 72;
    __break(0xC471u);
  }
  return result;
}

uint64_t *WTF::HashMap<JSC::B3::Air::Inst *,std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::DefaultHash<JSC::B3::Air::Inst *>,WTF::HashTraits<JSC::B3::Air::Inst *>,WTF::HashTraits<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>>,WTF::HashTableTraits>::add<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<JSC::B3::Air::Inst *,WTF::KeyValuePair<JSC::B3::Air::Inst *,std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Inst *,std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>>>,WTF::DefaultHash<JSC::B3::Air::Inst *>,WTF::HashMap<JSC::B3::Air::Inst *,std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::DefaultHash<JSC::B3::Air::Inst *>,WTF::HashTraits<JSC::B3::Air::Inst *>,WTF::HashTraits<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Inst *>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v8 - 4);
        v28 = 0;
        v29 = v8 + 16 * v22;
        goto LABEL_32;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = -1;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  *((_DWORD *)v16 + 2) = *a3;
  *((_DWORD *)v16 + 3) = a3[1];
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_23;
  }
  else if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v27 = 8;
LABEL_28:
      result = (uint64_t *)WTF::HashTable<JSC::B3::Air::Inst *,WTF::KeyValuePair<JSC::B3::Air::Inst *,std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Inst *,std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>>>,WTF::DefaultHash<JSC::B3::Air::Inst *>,WTF::HashMap<JSC::B3::Air::Inst *,std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::DefaultHash<JSC::B3::Air::Inst *>,WTF::HashTraits<JSC::B3::Air::Inst *>,WTF::HashTraits<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Inst *>>::rehash(v6, v27, v16);
      v16 = result;
      v23 = *v6;
      if (*v6)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
      goto LABEL_31;
    }
LABEL_23:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
    goto LABEL_28;
  }
LABEL_31:
  v29 = v23 + 16 * v26;
  v28 = 1;
LABEL_32:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

uint64_t JSC::B3::Air::Disassembler::dump(uint64_t *a1, uint64_t a2, WTF::PrintStream *a3, _QWORD *a4, const char *a5, const char *a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  JSC::B3::Air::BasicBlock **v12;
  JSC::B3::Air::BasicBlock *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t **v17;
  WTF::PrintStream *v18;
  WTF::PrintStream *v19;
  WTF::PrintStream *v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t **v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  WTF::PrintStream *v41;
  JSC::B3::Air::BasicBlock **v42;
  uint64_t v43;
  WTF::PrintStream *v44;
  uint64_t result;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  WTF::PrintStream *v51;
  JSC::B3::Air::BasicBlock **v52;
  JSC::B3::Air::BasicBlock **v54;
  _QWORD v57[5];
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t **v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  char v66;

  v59 = a4[23];
  v60 = a6;
  v9 = v59 + a4[1];
  v57[4] = a3;
  v58 = v9;
  v57[0] = a4;
  v57[1] = &v59;
  v57[2] = &v58;
  v57[3] = &v60;
  v10 = *((unsigned int *)a1 + 5);
  if ((_DWORD)v10)
  {
    v12 = (JSC::B3::Air::BasicBlock **)a1[1];
    v52 = &v12[v10];
    while (1)
    {
      v13 = *v12;
      JSC::B3::Air::BasicBlock::dumpHeader(*v12, a3);
      v14 = *(unsigned int *)(a2 + 252);
      v54 = v12;
      if ((_DWORD)v14)
        break;
      if (!*(_DWORD *)v13)
        goto LABEL_5;
LABEL_6:
      v15 = *((unsigned int *)v13 + 5);
      if ((_DWORD)v15)
      {
        v16 = (uint64_t **)*((_QWORD *)v13 + 1);
        v17 = &v16[16 * v15];
        do
        {
          (*(void (**)(_QWORD, uint64_t **))a7)(*(_QWORD *)(a7 + 8), v16);
          v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
          WTF::PrintStream::printf(v18, "%s", a5);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
          v61 = v16;
          v62 = ", ";
          v63 = 3;
          v64 = &str_477;
          v65 = 1;
          v66 = 0;
          v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
          JSC::B3::Air::Kind::dump((JSC::B3::Air::Kind *)(v16 + 15), v19);
          WTF::PrintStream::printf(v19, "%s", " ");
          WTF::ListDump<WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump((JSC::B3::Air::Arg ***)&v61, (uint64_t)v19);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
          v20 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
          WTF::PrintStream::printf(v20, "%s", "\n");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
          v21 = *a1;
          if (!*a1)
            goto LABEL_16;
          v22 = *(_DWORD *)(v21 - 8);
          v23 = ((unint64_t)v16 + ~((_QWORD)v16 << 32)) ^ (((unint64_t)v16 + ~((_QWORD)v16 << 32)) >> 22);
          v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
          v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
          v26 = v22 & ((v25 >> 31) ^ v25);
          v27 = *(uint64_t ***)(v21 + 16 * v26);
          if (v27 != v16)
          {
            v28 = 1;
            while (v27)
            {
              v26 = ((_DWORD)v26 + v28) & v22;
              v27 = *(uint64_t ***)(v21 + 16 * v26);
              ++v28;
              if (v27 == v16)
                goto LABEL_15;
            }
            v26 = *(unsigned int *)(v21 - 4);
          }
LABEL_15:
          if (v26 != *(_DWORD *)(v21 - 4))
          {
            v30 = v21 + 16 * v26;
            v31 = *(_DWORD *)(v30 + 8);
            if (v31 == -1)
            {
              __break(0xC471u);
              JUMPOUT(0x1980A200CLL);
            }
            v32 = *(_DWORD *)(v30 + 12);
            if (v32 == -1)
            {
              __break(0xC471u);
              JUMPOUT(0x1980A202CLL);
            }
            if (v31 < 4)
              v33 = 0;
            else
              v33 = *(_DWORD *)((v31 & 0xFFFFFFFC) + a4[3] - 4);
            v34 = (v31 - v33);
            v35 = a4[23];
            v36 = (uint64_t **)(v34 + v35);
            if (v35 > (unint64_t)v36 || (v37 = v35 + a4[1], v37 < (unint64_t)v36))
            {
              __break(0xC471u);
              JUMPOUT(0x1980A1FCCLL);
            }
            v61 = v36;
            if (v32 < 4)
              v38 = 0;
            else
              v38 = *(_DWORD *)((v32 & 0xFFFFFFFC) + a4[3] - 4);
            v39 = (v32 - v38) + v35;
            if (v35 > v39 || v37 < v39)
            {
              __break(0xC471u);
              JUMPOUT(0x1980A1FECLL);
            }
            if (v39 < (unint64_t)v36)
            {
              __break(0xC471u);
              JUMPOUT(0x1980A204CLL);
            }
            JSC::tryToDisassemble((unint64_t *)&v61, v39 - (_QWORD)v36, v59, v58, v60, a3);
          }
          else
          {
LABEL_16:
            v29 = *((unsigned int *)v13 + 5);
            if (!(_DWORD)v29 || v16 != (uint64_t **)(*((_QWORD *)v13 + 1) + (v29 << 7) - 128))
            {
              __break(0xC471u);
              JUMPOUT(0x1980A1FACLL);
            }
          }
          v16 += 16;
        }
        while (v16 != v17);
      }
      if (*((_DWORD *)v13 + 9))
      {
        v61 = (uint64_t **)((char *)v13 + 24);
        v62 = ", ";
        v63 = 3;
        v64 = &str_106;
        v65 = 1;
        v66 = 0;
        v41 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
        WTF::PrintStream::printf(v41, "%s", "Air ");
        WTF::PrintStream::printf(v41, "%s", "  Successors: ");
        WTF::ListDump<WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(&v61, (uint64_t)v41);
        WTF::PrintStream::printf(v41, "%s", "\n");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
      }
      v12 = v54 + 1;
      if (v54 + 1 == v52)
        goto LABEL_46;
    }
    v42 = *(JSC::B3::Air::BasicBlock ***)(a2 + 240);
    v43 = 16 * v14;
    while (*v42 != v13)
    {
      v42 += 2;
      v43 -= 16;
      if (!v43)
        goto LABEL_6;
    }
LABEL_5:
    JSC::B3::Air::Disassembler::dump(JSC::B3::Air::Code &,WTF::PrintStream &,JSC::LinkBuffer &,char const*,char const*,WTF::ScopedLambda<void ()(JSC::B3::Air::Inst &)> const&)::$_0::operator()((uint64_t)v57, *((_DWORD *)a1 + 6), *((_DWORD *)a1 + 7));
    goto LABEL_6;
  }
LABEL_46:
  v44 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
  WTF::PrintStream::printf(v44, "%s", "Air ");
  WTF::PrintStream::printf(v44, "%s", "# Late paths\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
  result = JSC::B3::Air::Disassembler::dump(JSC::B3::Air::Code &,WTF::PrintStream &,JSC::LinkBuffer &,char const*,char const*,WTF::ScopedLambda<void ()(JSC::B3::Air::Inst &)> const&)::$_0::operator()((uint64_t)v57, *((_DWORD *)a1 + 8), *((_DWORD *)a1 + 9));
  v46 = *((_DWORD *)a1 + 9);
  if (v46 < 4)
    v47 = 0;
  else
    v47 = *(_DWORD *)((v46 & 0xFFFFFFFC) + a4[3] - 4);
  v48 = (v46 - v47);
  v49 = a4[23];
  if (v49 > v48 + v49 || (v50 = a4[1], v49 + v50 < v48 + v49))
  {
    __break(0xC471u);
    JUMPOUT(0x1980A2074);
  }
  v61 = (uint64_t **)(v48 + v49);
  if (v50 > v48)
  {
    v51 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
    WTF::PrintStream::printf(v51, "%s", "Air ");
    WTF::PrintStream::printf(v51, "%s", "# Remaining\n");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
    return JSC::tryToDisassemble((unint64_t *)&v61, a4[1] - v48, v59, v58, v60, a3);
  }
  return result;
}

uint64_t JSC::B3::Air::Disassembler::dump(JSC::B3::Air::Code &,WTF::PrintStream &,JSC::LinkBuffer &,char const*,char const*,WTF::ScopedLambda<void ()(JSC::B3::Air::Inst &)> const&)::$_0::operator()(uint64_t a1, int a2, int a3)
{
  _QWORD *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v12;

  if (a2 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x1980A21A8);
  }
  if (a3 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x1980A21C8);
  }
  v3 = *(_QWORD **)a1;
  if (a2 < 4)
    v4 = 0;
  else
    v4 = *(_DWORD *)((a2 & 0xFFFFFFFC) + v3[3] - 4);
  v5 = v3[23];
  v6 = (a2 - v4) + v5;
  if (v5 > v6)
    goto LABEL_21;
  v7 = v5 + v3[1];
  if (v7 < v6)
    goto LABEL_21;
  v12 = v6;
  v8 = a3 < 4 ? 0 : *(_DWORD *)((a3 & 0xFFFFFFFC) + v3[3] - 4);
  v9 = (a3 - v8) + v5;
  if (v5 > v9 || v7 < v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1980A2188);
  }
  if (v9 < v6)
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x1980A2168);
  }
  return JSC::tryToDisassemble(&v12, v9 - v6, **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 16), **(const char ***)(a1 + 24), *(WTF::PrintStream **)(a1 + 32));
}

BOOL JSC::B3::Air::eliminateDeadCode(WTF **this, JSC::B3::Air::Code *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF **v8;
  unsigned int *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD **v22;
  int v23;
  unsigned __int16 *v24;
  int v25;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  _DWORD *v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  BOOL v39;
  char v40;
  unsigned int v41;
  int v42;
  int v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  int64x2_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int64x2_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  __int8 *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  __int8 *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unsigned int v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  int v100;
  JSC::B3::Air::Inst **v101;
  int v102;
  JSC::B3::Air::Inst **v103;
  int v104;
  WTF *v105;
  WTF *v106;
  WTF *v107;
  int v108;
  JSC::B3::Air::Inst **v109;
  WTF *v110;
  WTF **v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int *v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  unsigned int *v122;
  unsigned int *v123;
  __int16 v124;
  int v125;
  unsigned int v126;
  char v127;
  unsigned int *v128;
  unsigned int *v129;
  unsigned int *v130;
  unsigned int *v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unsigned int *v136;
  __int128 v137;
  unsigned int v138;
  uint64_t v139;
  unint64_t v140;
  unsigned int v141;
  uint64_t v142;
  unsigned __int8 *v143;
  _DWORD *v144;
  uint64_t v145;
  unint64_t v146;
  BOOL v147;
  char v148;
  unsigned int v149;
  int v150;
  int v152;
  unint64_t v153;
  uint64_t *v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  uint64_t *v171;
  WTF *v172;
  JSC::B3::Air *v173;
  WTF *v174;
  uint64_t v176;
  unint64_t v177;
  JSC::B3::Air::Code *v179;
  unsigned int v180;
  int v181;
  int v182;
  WTF **v183;
  _QWORD **v184;
  int v185;
  WTF *v186;
  uint64_t v187;
  _QWORD v188[4];
  uint64_t **v189;
  _QWORD v190[2];
  char v191;
  unint64_t v192;
  int64x2_t v193;
  _QWORD v194[3];
  uint64_t v195;
  WTF *v196;
  char *v197;
  uint64_t **v198;
  char v199;
  uint64_t (*v200)(uint64_t, unsigned int *, int);
  uint64_t (**v201)(uint64_t, unsigned int *, int);
  char **v202;
  uint64_t (*v203)(uint64_t, unsigned int *, int);
  uint64_t (**v204)(uint64_t, unsigned int *, int);
  uint64_t (*v205)(uint64_t, unsigned int *, int);
  uint64_t (**v206)(uint64_t, unsigned int *, int);

  v8 = this;
  JSC::B3::Air::PhaseScope::PhaseScope((uint64_t)v194, this, (uint64_t)"eliminateDeadCode", 18, a5, a6, a7, a8);
  v193 = vdupq_n_s64(0x8000000000000000);
  v192 = 0x8000000000000000;
  v191 = 0;
  v190[0] = &v193;
  v190[1] = &v192;
  v188[3] = &v193;
  v189 = (uint64_t **)v190;
  v188[0] = &v189;
  v188[1] = &v191;
  v188[2] = &v192;
  v186 = 0;
  v187 = 0;
  v16 = *((unsigned int *)v8 + 27);
  v183 = v8;
  if ((_DWORD)v16)
  {
    v17 = 0;
    while (1)
    {
      v18 = *((_QWORD *)v8[12] + v17);
      if (v18)
        break;
      if (v16 == ++v17)
        goto LABEL_140;
    }
    if ((_DWORD)v16 != (_DWORD)v17)
    {
      v19 = *((_DWORD *)v8 + 27);
      v180 = v19;
      while (1)
      {
        if (v19 <= v17)
        {
          __break(0xC471u);
          JUMPOUT(0x1980A32E8);
        }
        v20 = *((_QWORD *)v8[12] + v17);
        v21 = *(unsigned int *)(v20 + 20);
        if ((_DWORD)v21)
          break;
LABEL_122:
        v17 = (v17 + 1);
        if (v19 > v17)
        {
          while (!*((_QWORD *)v8[12] + v17))
          {
            if (v19 == ++v17)
            {
              LODWORD(v17) = v19;
              break;
            }
          }
        }
        if ((_DWORD)v16 == (_DWORD)v17)
        {
          LODWORD(v18) = HIDWORD(v187);
          goto LABEL_140;
        }
      }
      v22 = *(_QWORD ***)(v20 + 8);
      v184 = &v22[16 * v21];
      while (1)
      {
        if ((*((_BYTE *)v22 + 122) & 1) == 0)
        {
          v24 = (unsigned __int16 *)(v22 + 15);
          v23 = *((__int16 *)v22 + 60);
          v25 = *((unsigned __int16 *)v22 + 60);
          switch(*((_WORD *)v22 + 60))
          {
            case 0xCE:
            case 0xCF:
            case 0xD0:
            case 0xD1:
            case 0xD2:
            case 0xD3:
            case 0xD4:
            case 0xD5:
            case 0xD6:
            case 0xD7:
            case 0xD8:
            case 0xD9:
            case 0xDA:
            case 0xDB:
            case 0xDC:
            case 0xDD:
            case 0xDE:
            case 0xDF:
            case 0xE0:
            case 0xE1:
            case 0xE2:
            case 0xE3:
            case 0xE4:
            case 0xE5:
            case 0xE6:
            case 0xE7:
            case 0xE8:
            case 0xE9:
            case 0xEA:
            case 0xEB:
            case 0xEC:
            case 0xED:
            case 0xEE:
            case 0xEF:
            case 0xF0:
            case 0xF1:
            case 0xF2:
            case 0xF3:
            case 0xF4:
            case 0xF5:
            case 0xF6:
            case 0xF7:
            case 0xF8:
            case 0xF9:
            case 0xFA:
            case 0xFB:
            case 0xFC:
            case 0xFD:
            case 0xFE:
            case 0xFF:
            case 0x100:
            case 0x101:
            case 0x102:
            case 0x103:
            case 0x104:
            case 0x105:
            case 0x106:
            case 0x107:
            case 0x108:
            case 0x109:
            case 0x10A:
            case 0x10B:
            case 0x10E:
            case 0x10F:
            case 0x110:
            case 0x111:
            case 0x112:
            case 0x113:
            case 0x114:
            case 0x115:
            case 0x116:
            case 0x117:
            case 0x118:
            case 0x119:
            case 0x122:
            case 0x123:
            case 0x124:
            case 0x125:
            case 0x126:
            case 0x127:
            case 0x128:
            case 0x129:
            case 0x12A:
            case 0x12B:
            case 0x12C:
            case 0x12D:
            case 0x12E:
            case 0x12F:
            case 0x130:
            case 0x131:
            case 0x132:
            case 0x133:
            case 0x134:
            case 0x135:
            case 0x146:
            case 0x147:
            case 0x148:
            case 0x149:
            case 0x14A:
            case 0x14B:
            case 0x14C:
            case 0x14D:
            case 0x14E:
            case 0x1BD:
            case 0x1BE:
            case 0x1C1:
            case 0x1C2:
            case 0x1C3:
              goto LABEL_25;
            case 0x10C:
            case 0x10D:
            case 0x11A:
            case 0x11B:
            case 0x11C:
            case 0x11D:
            case 0x11E:
            case 0x11F:
            case 0x120:
            case 0x121:
            case 0x136:
            case 0x137:
            case 0x138:
            case 0x139:
            case 0x13A:
            case 0x13B:
            case 0x13C:
            case 0x13D:
            case 0x13E:
            case 0x13F:
            case 0x140:
            case 0x141:
            case 0x142:
            case 0x143:
            case 0x144:
            case 0x145:
            case 0x14F:
            case 0x150:
            case 0x151:
            case 0x152:
            case 0x153:
            case 0x154:
            case 0x155:
            case 0x156:
            case 0x157:
            case 0x158:
            case 0x159:
            case 0x15A:
            case 0x15B:
            case 0x15C:
            case 0x15D:
            case 0x15E:
            case 0x15F:
            case 0x160:
            case 0x161:
            case 0x162:
            case 0x163:
            case 0x164:
            case 0x165:
            case 0x166:
            case 0x167:
            case 0x168:
            case 0x169:
            case 0x16A:
            case 0x16B:
            case 0x16C:
            case 0x16D:
            case 0x16E:
            case 0x16F:
            case 0x170:
            case 0x171:
            case 0x172:
            case 0x173:
            case 0x174:
            case 0x175:
            case 0x176:
            case 0x177:
            case 0x178:
            case 0x179:
            case 0x17A:
            case 0x17B:
            case 0x17C:
            case 0x17D:
            case 0x17E:
            case 0x17F:
            case 0x180:
            case 0x181:
            case 0x182:
            case 0x183:
            case 0x184:
            case 0x185:
            case 0x186:
            case 0x187:
            case 0x188:
            case 0x189:
            case 0x18A:
            case 0x18B:
            case 0x18C:
            case 0x18D:
            case 0x18E:
            case 0x18F:
            case 0x190:
            case 0x191:
            case 0x192:
            case 0x193:
            case 0x194:
            case 0x195:
            case 0x196:
            case 0x197:
            case 0x198:
            case 0x199:
            case 0x19A:
            case 0x19B:
            case 0x19C:
            case 0x19D:
            case 0x19E:
            case 0x19F:
            case 0x1A0:
            case 0x1A1:
            case 0x1A2:
            case 0x1A3:
            case 0x1A4:
            case 0x1A5:
            case 0x1A6:
            case 0x1A7:
            case 0x1A8:
            case 0x1A9:
            case 0x1AA:
            case 0x1AB:
            case 0x1AC:
            case 0x1AD:
            case 0x1AE:
            case 0x1AF:
            case 0x1B0:
            case 0x1B1:
            case 0x1B2:
            case 0x1B3:
            case 0x1B4:
            case 0x1B5:
            case 0x1B6:
            case 0x1B7:
            case 0x1B8:
            case 0x1B9:
            case 0x1BA:
            case 0x1BB:
            case 0x1BC:
            case 0x1BF:
              break;
            case 0x1C0:
              if (!*((_DWORD *)v22 + 3))
              {
                __break(0xC471u);
                JUMPOUT(0x1980A32D8);
              }
              if (((*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**v22 + 96))(**v22, v22) & 1) != 0)
                goto LABEL_25;
              v23 = (__int16)*v24;
              v25 = *v24;
              break;
            default:
              if ((v23 - 123) <= 0x12 && ((1 << (v23 - 123)) & 0x7FD55) != 0)
                goto LABEL_25;
              break;
          }
          v199 = 0;
          v197 = &v199;
          v198 = v189;
          if ((v23 - 446) > 5)
          {
            v31 = *((unsigned int *)v22 + 3);
            if (!(_DWORD)v31)
            {
LABEL_29:
              v200 = (uint64_t (*)(uint64_t, unsigned int *, int))v22;
              v34 = HIDWORD(v187);
              if (HIDWORD(v187) == (_DWORD)v187)
              {
                v87 = (_QWORD *)WTF::Vector<std::unique_ptr<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v186, HIDWORD(v187) + 1, (unint64_t)&v200);
                v34 = HIDWORD(v187);
                *((_QWORD *)v186 + HIDWORD(v187)) = *v87;
              }
              else
              {
                *((_QWORD *)v186 + HIDWORD(v187)) = v22;
              }
              HIDWORD(v187) = v34 + 1;
              goto LABEL_32;
            }
            v27 = 0;
            v32 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
                + 21 * (__int16)v25
                + ((unint64_t)((v31 - 1) * v31) >> 1);
            v33 = *v22 + 2;
            while (2)
            {
              v41 = *v32++;
              v40 = v41;
              if ((v41 >> 5) - 1 >= 5)
              {
                __break(0xC471u);
                JUMPOUT(0x1980A3240);
              }
              v42 = v40 & 0xF;
              if (v42 == 10 || (v42 - 4) > 6)
                goto LABEL_40;
              v44 = *((char *)v33 - 8);
              if (v44 == 9)
              {
                v50 = *((_QWORD *)v33 - 2);
                if (*(_BYTE *)(v50 + 4))
                {
                  v51 = v189[1];
                  v52 = (unint64_t *)(2 * *v51);
                  if (*v51 < 0)
                    v53 = 63;
                  else
                    v53 = *v52;
                  v54 = *(unsigned int *)(v50 + 8);
                  if (v53 <= v54)
                    goto LABEL_68;
                  v55 = (uint64_t *)(v52 + 1);
                  if (*v51 >= 0)
                    v51 = v55;
                  v49 = *(uint64_t *)((char *)v51 + ((v54 >> 3) & 0x1FFFFFF8));
                  v48 = 1 << v54;
                  goto LABEL_65;
                }
              }
              else if (v44 == 1)
              {
                v39 = 1;
                v36 = *v33;
                if (v36 > 0xFFFFFFDF || (v36 - 1) < 0x20)
                  goto LABEL_39;
                v38 = *v189;
                if ((int)v36 >= 1)
                {
                  v45 = (unint64_t *)(2 * *v38);
                  if (*v38 < 0)
                    v46 = 63;
                  else
                    v46 = *v45;
                  if (v46 > v36)
                  {
                    v47 = (uint64_t *)(v45 + 1);
                    if (*v38 >= 0)
                      v38 = v47;
                    LODWORD(v35) = *v33;
                    goto LABEL_57;
                  }
LABEL_68:
                  v39 = 0;
LABEL_39:
                  v27 |= v39;
                  v199 = v27;
LABEL_40:
                  v33 += 8;
                  if (!--v31)
                    goto LABEL_24;
                  continue;
                }
                if (!(_DWORD)v36)
                  goto LABEL_68;
                v57 = v38[1];
                ++v38;
                v56 = v57;
                v58 = (_QWORD *)(2 * v57);
                v94 = v57 < 0 ? 63 : *v58;
                v35 = -(uint64_t)v36;
                v36 = -(int)v36;
                if (v94 <= v36)
                  goto LABEL_68;
                v37 = v58 + 1;
                if (v56 >= 0)
                  v38 = v37;
LABEL_57:
                v48 = *(uint64_t *)((char *)v38 + ((v36 >> 3) & 0x1FFFFFF8));
                v49 = 1 << v35;
LABEL_65:
                v39 = (v49 & v48) != 0;
                goto LABEL_39;
              }
              break;
            }
            v39 = 1;
            goto LABEL_39;
          }
          v200 = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::eliminateDeadCode(JSC::B3::Air::Code &)::$_1::operator() const(JSC::B3::Air::Inst &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
          v201 = &v200;
          v202 = &v197;
          v203 = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::eliminateDeadCode(JSC::B3::Air::Code &)::$_1::operator() const(JSC::B3::Air::Inst &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
          v204 = &v200;
          if (v25 == 448)
          {
            v205 = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::eliminateDeadCode(JSC::B3::Air::Code &)::$_1::operator() const(JSC::B3::Air::Inst &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
            v206 = &v200;
            if (!*((_DWORD *)v22 + 3))
            {
              __break(0xC471u);
              JUMPOUT(0x1980A32E0);
            }
            (*(void (**)(_QWORD, _QWORD **, uint64_t (**)(uint64_t, unsigned int *, int)))(*(_QWORD *)**v22 + 16))(**v22, v22, &v205);
          }
          else
          {
            switch((__int16)v25)
            {
              case 446:
                break;
              case 447:
                JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v22, (uint64_t)&v203);
                break;
              case 449:
                JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v22, (uint64_t)&v203);
                break;
              case 450:
                v205 = (uint64_t (*)(uint64_t, unsigned int *, int))&v203;
                JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>((uint64_t)v22, (uint64_t)&v205);
                break;
              case 451:
                JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v22, (uint64_t)&v203);
                break;
              default:
                WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", (JSC::B3::Air::Kind *)(v22 + 15), "\n");
                __break(0xC471u);
                JUMPOUT(0x1980A32C0);
            }
          }
          v27 = v199;
LABEL_24:
          if (!v27)
            goto LABEL_29;
        }
LABEL_25:
        v28 = *((unsigned int *)v22 + 3);
        if ((_DWORD)v28)
        {
          v29 = 32 * v28;
          v30 = (unsigned int *)(*v22 + 2);
          do
          {
            v64 = *((unsigned __int8 *)v30 - 8);
            if (v64 == 9)
            {
              v65 = *((_QWORD *)v30 - 2);
              if (!*(_BYTE *)(v65 + 4))
                goto LABEL_79;
              v66 = v192;
              if ((v192 & 0x8000000000000000) != 0)
                v67 = 63;
              else
                v67 = *(_QWORD *)(2 * v192);
              v68 = *(unsigned int *)(v65 + 8);
              if (v67 <= v68)
              {
                WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v192, v68 + 1, 0);
                v66 = v192;
                LOBYTE(v64) = *((_BYTE *)v30 - 8);
              }
              else
              {
                LOBYTE(v64) = 9;
              }
              if (v66 >= 0)
                v69 = (unint64_t *)(2 * v66 + 8);
              else
                v69 = &v192;
              v70 = (v68 >> 3) & 0x1FFFFFF8;
              v71 = *(unint64_t *)((char *)v69 + v70);
              *(unint64_t *)((char *)v69 + v70) = v71 | (1 << v68);
              v191 |= (v71 & (1 << v68)) == 0;
            }
            if ((char)v64 <= 0xD)
            {
              if (((1 << v64) & 0x31C2) == 0)
              {
                if ((char)v64 != 11)
                  goto LABEL_79;
                v73 = *v30;
                if (v73 <= 0xFFFFFFDF && (v73 - 1) >= 0x20)
                {
                  if ((int)v73 < 1)
                  {
                    v88 = v193.i64[1];
                    if (v193.i64[1] < 0)
                      v89 = 63;
                    else
                      v89 = *(_QWORD *)(2 * v193.i64[1]);
                    v90 = -(uint64_t)v73;
                    if (v89 <= v90)
                    {
                      WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v193.u64[1], v90 + 1, 0);
                      v88 = v193.i64[1];
                    }
                    v91 = (__int8 *)(2 * v88 + 8);
                    if (v88 < 0)
                      v91 = &v193.i8[8];
                    v92 = ((unint64_t)v90 >> 3) & 0x1FFFFFF8;
                    v93 = *(_QWORD *)&v91[v92];
                    v79 = v93 & (1 << v90);
                    *(_QWORD *)&v91[v92] = v93 | (1 << v90);
                  }
                  else
                  {
                    v74 = v193.i64[0];
                    if (v193.i64[0] < 0)
                      v75 = 63;
                    else
                      v75 = *(_QWORD *)(2 * v193.i64[0]);
                    if (v75 <= v73)
                    {
                      WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v193, v73 + 1, 0);
                      v74 = v193.i64[0];
                    }
                    v76 = (int64x2_t *)(2 * v74 + 8);
                    if (v74 < 0)
                      v76 = &v193;
                    v77 = (v73 >> 3) & 0x1FFFFFF8;
                    v78 = *(uint64_t *)((char *)v76->i64 + v77);
                    v79 = v78 & (1 << v73);
                    *(uint64_t *)((char *)v76->i64 + v77) = v78 | (1 << v73);
                  }
                  v191 |= v79 == 0;
                }
                v72 = v30[1];
                if (v72 > 0xFFFFFFDF)
                  goto LABEL_79;
LABEL_93:
                if ((v72 - 1) >= 0x20)
                {
                  if ((int)v72 < 1)
                  {
                    v80 = v193.i64[1];
                    if (v193.i64[1] < 0)
                      v81 = 63;
                    else
                      v81 = *(_QWORD *)(2 * v193.i64[1]);
                    v82 = -(uint64_t)v72;
                    if (v81 <= v82)
                    {
                      WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v193.u64[1], v82 + 1, 0);
                      v80 = v193.i64[1];
                    }
                    v83 = (__int8 *)(2 * v80 + 8);
                    if (v80 < 0)
                      v83 = &v193.i8[8];
                    v84 = ((unint64_t)v82 >> 3) & 0x1FFFFFF8;
                    v85 = *(_QWORD *)&v83[v84];
                    v63 = v85 & (1 << v82);
                    *(_QWORD *)&v83[v84] = v85 | (1 << v82);
                  }
                  else
                  {
                    v86 = v193.i64[0];
                    if (v193.i64[0] < 0)
                      v59 = 63;
                    else
                      v59 = *(_QWORD *)(2 * v193.i64[0]);
                    if (v59 <= v72)
                    {
                      WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v193, v72 + 1, 0);
                      v86 = v193.i64[0];
                    }
                    v60 = (int64x2_t *)(2 * v86 + 8);
                    if (v86 < 0)
                      v60 = &v193;
                    v61 = (v72 >> 3) & 0x1FFFFFF8;
                    v62 = *(uint64_t *)((char *)v60->i64 + v61);
                    v63 = v62 & (1 << v72);
                    *(uint64_t *)((char *)v60->i64 + v61) = v62 | (1 << v72);
                  }
                  v191 |= v63 == 0;
                }
                goto LABEL_79;
              }
              v72 = *v30;
              if (v72 <= 0xFFFFFFDF)
                goto LABEL_93;
            }
LABEL_79:
            v30 += 8;
            v29 -= 32;
          }
          while (v29);
        }
LABEL_32:
        v22 += 16;
        if (v22 == v184)
        {
          v8 = v183;
          v19 = *((_DWORD *)v183 + 27);
          LODWORD(v16) = v180;
          goto LABEL_122;
        }
      }
    }
  }
  LODWORD(v18) = 0;
  do
  {
LABEL_140:
    v191 = 0;
    if (!(_DWORD)v18)
      break;
    v95 = v18 - 1;
    v96 = 8 * (v18 - 1);
    do
    {
      if (HIDWORD(v187) <= v95)
      {
        __break(0xC471u);
        JUMPOUT(0x1980A32F8);
      }
      if (JSC::B3::Air::eliminateDeadCode(JSC::B3::Air::Code &)::$_2::operator()((uint64_t)v188, *(JSC::B3::Air::Inst **)((char *)v186 + v96)))
      {
        v97 = HIDWORD(v187);
        if (!HIDWORD(v187))
        {
          __break(0xC471u);
          JUMPOUT(0x1980A3308);
        }
        if (HIDWORD(v187) <= v95)
        {
          __break(0xC471u);
          JUMPOUT(0x1980A3310);
        }
        *(_QWORD *)((char *)v186 + v96) = *((_QWORD *)v186 + HIDWORD(v187) - 1);
        HIDWORD(v187) = v97 - 1;
        v191 = 1;
      }
      v96 -= 8;
      --v95;
    }
    while (v95 != -1);
    if (!v191)
      break;
    v191 = 0;
    if (!HIDWORD(v187))
      break;
    v98 = HIDWORD(v187) - 1;
    v99 = 8 * (HIDWORD(v187) - 1);
    do
    {
      if (HIDWORD(v187) <= v98)
      {
        __break(0xC471u);
        JUMPOUT(0x1980A3300);
      }
      if (JSC::B3::Air::eliminateDeadCode(JSC::B3::Air::Code &)::$_2::operator()((uint64_t)v188, *(JSC::B3::Air::Inst **)((char *)v186 + v99)))
      {
        v100 = HIDWORD(v187);
        if (!HIDWORD(v187))
        {
          __break(0xC471u);
          JUMPOUT(0x1980A3318);
        }
        if (HIDWORD(v187) <= v98)
        {
          __break(0xC471u);
          JUMPOUT(0x1980A3320);
        }
        *(_QWORD *)((char *)v186 + v99) = *((_QWORD *)v186 + HIDWORD(v187) - 1);
        HIDWORD(v187) = v100 - 1;
        v191 = 1;
      }
      v99 -= 8;
      --v98;
    }
    while (v98 != -1);
    if (!v191)
      break;
    v191 = 0;
    v101 = (JSC::B3::Air::Inst **)v186;
    v102 = HIDWORD(v187);
    v103 = (JSC::B3::Air::Inst **)((char *)v186 + 8 * HIDWORD(v187));
    v104 = 0;
    if (HIDWORD(v187))
    {
      v105 = v186;
      v106 = (WTF *)((char *)v186 + 8 * HIDWORD(v187));
      v107 = v106;
      do
      {
        v108 = JSC::B3::Air::eliminateDeadCode(JSC::B3::Air::Code &)::$_2::operator()((uint64_t)v188, *v101);
        v191 |= v108;
        if (v108)
        {
          v109 = v101;
          if (v107 != (WTF *)((char *)v186 + 8 * HIDWORD(v187)))
          {
            if (v101 == (JSC::B3::Air::Inst **)v106)
            {
              v109 = (JSC::B3::Air::Inst **)v107;
            }
            else
            {
              memmove(v107, v106, v105 - v106);
              v109 = (JSC::B3::Air::Inst **)((char *)v107 + v105 - v106);
            }
          }
          v106 = (WTF *)(v101 + 1);
          ++v104;
          v107 = (WTF *)v109;
        }
        ++v101;
        v105 = (WTF *)((char *)v105 + 8);
      }
      while (v101 < v103);
      v101 = (JSC::B3::Air::Inst **)v186;
      v102 = HIDWORD(v187);
      v103 = (JSC::B3::Air::Inst **)v107;
    }
    else
    {
      v106 = v186;
    }
    v110 = (WTF *)&v101[v102];
    if (v106 != v110)
    {
      memmove(v103, v106, v110 - v106);
      v102 = HIDWORD(v187);
    }
    LODWORD(v18) = v102 - v104;
    HIDWORD(v187) = v18;
  }
  while (v191);
  v111 = v183;
  v112 = *((unsigned int *)v183 + 27);
  if ((_DWORD)v112)
  {
    v113 = 0;
    while (!*((_QWORD *)v183[12] + v113))
    {
      v114 = 0;
      if (v112 == ++v113)
        goto LABEL_268;
    }
    if ((_DWORD)v112 != (_DWORD)v113)
    {
      v114 = 0;
      LODWORD(v115) = *((_DWORD *)v183 + 27);
      LODWORD(v116) = v113;
      v181 = v115;
      while (1)
      {
        if (v115 <= v116)
        {
          __break(0xC471u);
          JUMPOUT(0x1980A32F0);
        }
        v185 = v116;
        v117 = *((_QWORD *)v111[12] + v116);
        v118 = *(unsigned int **)(v117 + 8);
        v119 = *(unsigned int *)(v117 + 20);
        v120 = (unint64_t)&v118[32 * v119];
        if (!(_DWORD)v119)
        {
          v121 = 0;
          v122 = &v118[32 * v119];
          goto LABEL_257;
        }
        v182 = v114;
        v121 = 0;
        v122 = &v118[32 * v119];
        v123 = v122;
        while (2)
        {
          if ((*((_BYTE *)v118 + 122) & 1) != 0)
            goto LABEL_182;
          v124 = *((_WORD *)v118 + 60);
          switch(v124)
          {
            case 123:
            case 125:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 238:
            case 239:
            case 240:
            case 241:
            case 242:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
            case 250:
            case 251:
            case 252:
            case 253:
            case 254:
            case 255:
            case 256:
            case 257:
            case 258:
            case 259:
            case 260:
            case 261:
            case 262:
            case 263:
            case 264:
            case 265:
            case 266:
            case 267:
            case 270:
            case 271:
            case 272:
            case 273:
            case 274:
            case 275:
            case 276:
            case 277:
            case 278:
            case 279:
            case 280:
            case 281:
            case 290:
            case 291:
            case 292:
            case 293:
            case 294:
            case 295:
            case 296:
            case 297:
            case 298:
            case 299:
            case 300:
            case 301:
            case 302:
            case 303:
            case 304:
            case 305:
            case 306:
            case 307:
            case 308:
            case 309:
            case 326:
            case 327:
            case 328:
            case 329:
            case 330:
            case 331:
            case 332:
            case 333:
            case 334:
            case 445:
            case 446:
            case 449:
            case 450:
            case 451:
              goto LABEL_182;
            case 448:
              if (!v118[3])
              {
                __break(0xC471u);
                JUMPOUT(0x1980A32D0);
              }
              if (((*(uint64_t (**)(_QWORD, unsigned int *))(***(_QWORD ***)v118 + 96))(**(_QWORD **)v118, v118) & 1) == 0)
              {
                v124 = *((_WORD *)v118 + 60);
                goto LABEL_185;
              }
              goto LABEL_182;
            default:
LABEL_185:
              v199 = 0;
              v197 = &v199;
              v198 = v189;
              v125 = v124;
              v126 = v124 - 446;
              if (v126 > 5)
              {
                v142 = v118[3];
                if (!(_DWORD)v142)
                {
LABEL_191:
                  v128 = v118;
                  if (v123 != (unsigned int *)(*(_QWORD *)(v117 + 8)
                                              + ((unint64_t)*(unsigned int *)(v117 + 20) << 7)))
                  {
                    if (v122 == v118)
                    {
                      v128 = v123;
                    }
                    else
                    {
                      if (v122 <= v123)
                      {
                        v176 = 0;
                        v145 = ((char *)v118 - (char *)v122) >> 7;
                        do
                        {
                          JSC::B3::Air::Inst::Inst((uint64_t)v123 + (((char *)v118 - (char *)v122) & 0xFFFFFFFFFFFFFF80) + v176 * 4 - 128, (uint64_t)&v118[v176 - 32]);
                          v177 = *(_QWORD *)&v118[v176 - 32];
                          if (&v118[v176 - 28] != (unsigned int *)v177 && v177 != 0)
                          {
                            *(_QWORD *)&v118[v176 - 32] = 0;
                            v118[v176 - 30] = 0;
                            WTF::fastFree(v177, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
                          }
                          v176 -= 32;
                        }
                        while (&v118[v176] != v122);
                      }
                      else
                      {
                        v129 = v123;
                        v130 = v122;
                        do
                        {
                          *(_QWORD *)v129 = v129 + 4;
                          *((_QWORD *)v129 + 1) = 3;
                          v131 = v130 + 4;
                          v132 = *(_QWORD *)v130;
                          if (*(unsigned int **)v130 == v130 + 4)
                          {
                            v133 = v130[3];
                            if ((_DWORD)v133)
                            {
                              v134 = 0;
                              v135 = 32 * v133;
                              do
                              {
                                v136 = &v129[v134 / 4];
                                v137 = *(_OWORD *)(v132 + v134 + 16);
                                *((_OWORD *)v136 + 1) = *(_OWORD *)(v132 + v134);
                                *((_OWORD *)v136 + 2) = v137;
                                v134 += 32;
                              }
                              while (v135 != v134);
                            }
                          }
                          else
                          {
                            *(_QWORD *)v130 = v131;
                            *(_QWORD *)v129 = v132;
                            v141 = v130[2];
                            v130[2] = 3;
                            v129[2] = v141;
                          }
                          v138 = v130[3];
                          v130[3] = 0;
                          v129[3] = v138;
                          v139 = *((_QWORD *)v130 + 14);
                          *(unsigned int *)((char *)v129 + 119) = *(unsigned int *)((char *)v130 + 119);
                          *((_QWORD *)v129 + 14) = v139;
                          v140 = *(_QWORD *)v130;
                          if (v131 != *(unsigned int **)v130 && v140)
                          {
                            *(_QWORD *)v130 = 0;
                            v130[2] = 0;
                            WTF::fastFree(v140, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
                          }
                          v129 += 32;
                          v130 += 32;
                        }
                        while (v130 != v118);
                        v145 = ((char *)v118 - (char *)v122) >> 7;
                      }
                      v128 = &v123[32 * v145];
                    }
                  }
                  v146 = *(_QWORD *)v118;
                  if (v118 + 4 != *(unsigned int **)v118 && v146)
                  {
                    *(_QWORD *)v118 = 0;
                    v118[2] = 0;
                    WTF::fastFree(v146, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
                  }
                  v122 = v118 + 32;
                  ++v121;
                  v123 = v128;
                  goto LABEL_182;
                }
                v127 = 0;
                v143 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
                     + 21 * v125
                     + ((unint64_t)((v142 - 1) * v142) >> 1);
                v144 = (_DWORD *)(*(_QWORD *)v118 + 16);
                while (2)
                {
                  v149 = *v143++;
                  v148 = v149;
                  if ((v149 >> 5) - 1 >= 5)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1980A31B8);
                  }
                  v150 = v148 & 0xF;
                  if (v150 == 10 || (v150 - 4) > 6)
                    goto LABEL_219;
                  v152 = *((char *)v144 - 8);
                  if (v152 == 9)
                  {
                    v161 = *((_QWORD *)v144 - 2);
                    if (*(_BYTE *)(v161 + 4))
                    {
                      v162 = v189[1];
                      v163 = (unint64_t *)(2 * *v162);
                      if (*v162 < 0)
                        v164 = 63;
                      else
                        v164 = *v163;
                      v165 = *(unsigned int *)(v161 + 8);
                      if (v164 <= v165)
                        goto LABEL_247;
                      v166 = (uint64_t *)(v163 + 1);
                      if (*v162 >= 0)
                        v162 = v166;
                      v160 = *(uint64_t *)((char *)v162 + ((v165 >> 3) & 0x1FFFFFF8));
                      v159 = 1 << v165;
                      goto LABEL_244;
                    }
                  }
                  else if (v152 == 1)
                  {
                    v147 = 1;
                    v153 = *v144;
                    if (v153 > 0xFFFFFFDF || (v153 - 1) < 0x20)
                      goto LABEL_218;
                    v154 = *v189;
                    if ((int)v153 >= 1)
                    {
                      v155 = (unint64_t *)(2 * *v154);
                      if (*v154 < 0)
                        v156 = 63;
                      else
                        v156 = *v155;
                      if (v156 > v153)
                      {
                        v157 = (uint64_t *)(v155 + 1);
                        if (*v154 >= 0)
                          v154 = v157;
                        LODWORD(v158) = *v144;
                        goto LABEL_236;
                      }
LABEL_247:
                      v147 = 0;
LABEL_218:
                      v127 |= v147;
                      v199 = v127;
LABEL_219:
                      v144 += 8;
                      if (!--v142)
                        goto LABEL_190;
                      continue;
                    }
                    if (!(_DWORD)v153)
                      goto LABEL_247;
                    v168 = v154[1];
                    ++v154;
                    v167 = v168;
                    v169 = (_QWORD *)(2 * v168);
                    v170 = v168 < 0 ? 63 : *v169;
                    v158 = -(uint64_t)v153;
                    v153 = -(int)v153;
                    if (v170 <= v153)
                      goto LABEL_247;
                    v171 = v169 + 1;
                    if (v167 >= 0)
                      v154 = v171;
LABEL_236:
                    v159 = *(uint64_t *)((char *)v154 + ((v153 >> 3) & 0x1FFFFFF8));
                    v160 = 1 << v158;
LABEL_244:
                    v147 = (v160 & v159) != 0;
                    goto LABEL_218;
                  }
                  break;
                }
                v147 = 1;
                goto LABEL_218;
              }
              v200 = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::eliminateDeadCode(JSC::B3::Air::Code &)::$_1::operator() const(JSC::B3::Air::Inst &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
              v201 = &v200;
              v202 = &v197;
              v203 = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::eliminateDeadCode(JSC::B3::Air::Code &)::$_1::operator() const(JSC::B3::Air::Inst &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
              v204 = &v200;
              if (v125 == 448)
              {
                v205 = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::eliminateDeadCode(JSC::B3::Air::Code &)::$_1::operator() const(JSC::B3::Air::Inst &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
                v206 = &v200;
                if (!v118[3])
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980A32C8);
                }
                (*(void (**)(_QWORD, unsigned int *, uint64_t (**)(uint64_t, unsigned int *, int)))(***(_QWORD ***)v118 + 16))(**(_QWORD **)v118, v118, &v205);
              }
              else
              {
                switch(v126)
                {
                  case 0u:
                    break;
                  case 1u:
                    JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v118, (uint64_t)&v203);
                    break;
                  case 3u:
                    JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v118, (uint64_t)&v203);
                    break;
                  case 4u:
                    v205 = (uint64_t (*)(uint64_t, unsigned int *, int))&v203;
                    JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>((uint64_t)v118, (uint64_t)&v205);
                    break;
                  case 5u:
                    JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v118, (uint64_t)&v203);
                    break;
                  default:
                    WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", (JSC::B3::Air::Kind *)(v118 + 30), "\n");
                    __break(0xC471u);
                    JUMPOUT(0x1980A3220);
                }
              }
              v127 = v199;
LABEL_190:
              if (!v127)
                goto LABEL_191;
LABEL_182:
              v118 += 32;
              if ((unint64_t)v118 < v120)
                continue;
              v118 = *(unsigned int **)(v117 + 8);
              LODWORD(v119) = *(_DWORD *)(v117 + 20);
              v120 = (unint64_t)v123;
              v111 = v183;
              v114 = v182;
              LODWORD(v112) = v181;
LABEL_257:
              v9 = &v118[32 * (unint64_t)v119];
              if (v122 != v9)
              {
                WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v122, v9, v120, v11, v12, v13, v14, v15);
                LODWORD(v119) = *(_DWORD *)(v117 + 20);
              }
              *(_DWORD *)(v117 + 20) = v119 - v121;
              v116 = (v185 + 1);
              v115 = *((unsigned int *)v111 + 27);
              if (v115 > v116)
              {
                while (!*((_QWORD *)v111[12] + v116))
                {
                  if (v115 == ++v116)
                  {
                    LODWORD(v116) = *((_DWORD *)v111 + 27);
                    break;
                  }
                }
              }
              v114 += v121;
              if ((_DWORD)v112 == (_DWORD)v116)
                goto LABEL_268;
              break;
          }
          break;
        }
      }
    }
  }
  v114 = 0;
LABEL_268:
  v172 = v186;
  if (v186)
  {
    v186 = 0;
    LODWORD(v187) = 0;
    WTF::fastFree((unint64_t)v172, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
  }
  if ((v192 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v192, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
  if ((v193.i64[1] & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v193.i64[1], v9, (uint64_t)v10, v11, v12, v13, v14, v15);
  if ((v193.i64[0] & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v193.i64[0], v9, (uint64_t)v10, v11, v12, v13, v14, v15);
  v173 = (JSC::B3::Air *)v194[0];
  *(_QWORD *)(v194[0] + 304) = v194[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v196)
      v179 = (WTF *)((char *)v196 + 16);
    else
      v179 = 0;
    JSC::B3::Air::validate(v173, v179, v10, v11, v12, v13, v14, v15);
  }
  v174 = v196;
  v196 = 0;
  if (v174)
  {
    if (*(_DWORD *)v174 == 1)
      WTF::fastFree((unint64_t)v174, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
    else
      --*(_DWORD *)v174;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v195);
  return v114 != 0;
}

uint64_t JSC::B3::Air::eliminateDeadCode(JSC::B3::Air::Code &)::$_2::operator()(uint64_t a1, JSC::B3::Air::Inst *this)
{
  uint64_t ***v4;
  uint64_t **v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *i;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::BitVector *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _DWORD *v42;
  char v43;
  unsigned int v44;
  int v45;
  int v47;
  BOOL v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t *v67;
  uint64_t result;
  _QWORD v69[2];
  char v70;
  _QWORD v71[3];

  v4 = *(uint64_t ****)a1;
  if ((JSC::B3::Air::Inst::hasNonArgEffects(this) & 1) != 0)
  {
LABEL_5:
    v7 = *((unsigned int *)this + 3);
    v8 = 1;
    if (!(_DWORD)v7)
      return v8;
    v9 = 32 * v7;
    for (i = (unsigned int *)(*(_QWORD *)this + 16); ; i += 8)
    {
      v11 = *((unsigned __int8 *)i - 8);
      if (v11 == 9)
      {
        v12 = *((_QWORD *)i - 2);
        if (!*(_BYTE *)(v12 + 4))
          goto LABEL_40;
        v13 = *(uint64_t **)(a1 + 16);
        v14 = *v13;
        if (*v13 < 0)
          v15 = 63;
        else
          v15 = *(_QWORD *)(2 * v14);
        v17 = *(unsigned int *)(v12 + 8);
        if (v15 <= v17)
        {
          WTF::BitVector::resizeOutOfLine(*(WTF::BitVector **)(a1 + 16), v17 + 1, 0);
          v14 = *v13;
          LOBYTE(v11) = *((_BYTE *)i - 8);
        }
        else
        {
          LOBYTE(v11) = 9;
        }
        if (v14 >= 0)
          v18 = 2 * v14 + 8;
        else
          v18 = (uint64_t)v13;
        v19 = (v17 >> 3) & 0x1FFFFFF8;
        v20 = *(_QWORD *)(v18 + v19);
        *(_QWORD *)(v18 + v19) = v20 | (1 << v17);
        v16 = *(_BYTE **)(a1 + 8);
        *v16 |= (v20 & (1 << v17)) == 0;
      }
      else
      {
        v16 = *(_BYTE **)(a1 + 8);
      }
      if ((char)v11 <= 0xD)
      {
        v21 = *(uint64_t **)(a1 + 24);
        if (((1 << v11) & 0x31C2) != 0)
        {
          v22 = *i;
LABEL_22:
          if (v22 <= 0xFFFFFFDF && (v22 - 1) >= 0x20)
          {
            if ((int)v22 < 1)
            {
              v36 = v21[1];
              v35 = (WTF::BitVector *)(v21 + 1);
              v34 = v36;
              if (v36 < 0)
                v37 = 63;
              else
                v37 = *(_QWORD *)(2 * v34);
              v22 = -(uint64_t)v22;
              if (v37 <= v22)
              {
                WTF::BitVector::resizeOutOfLine(v35, v22 + 1, 0);
                v34 = *(_QWORD *)v35;
              }
              v28 = 2 * v34 + 8;
              if (v34 < 0)
                v28 = (uint64_t)v35;
              v29 = (unint64_t)v22 >> 3;
            }
            else
            {
              v23 = *v21;
              if (*v21 < 0)
                v24 = 63;
              else
                v24 = *(_QWORD *)(2 * v23);
              if (v24 <= v22)
              {
                WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v21, v22 + 1, 0);
                v23 = *v21;
              }
              v28 = 2 * v23 + 8;
              if (v23 < 0)
                v28 = (uint64_t)v21;
              v29 = v22 >> 3;
            }
            v30 = *(_QWORD *)(v28 + (v29 & 0x1FFFFFF8));
            *(_QWORD *)(v28 + (v29 & 0x1FFFFFF8)) = v30 | (1 << v22);
            *v16 |= (v30 & (1 << v22)) == 0;
          }
          goto LABEL_40;
        }
        if ((char)v11 == 11)
        {
          v25 = *i;
          if (v25 <= 0xFFFFFFDF && (v25 - 1) >= 0x20)
          {
            if ((int)v25 < 1)
            {
              v38 = v21[1];
              if (v38 < 0)
                v39 = 63;
              else
                v39 = *(_QWORD *)(2 * v38);
              v25 = -(uint64_t)v25;
              if (v39 <= v25)
              {
                WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(v21 + 1), v25 + 1, 0);
                v38 = v21[1];
              }
              v31 = 2 * v38 + 8;
              if (v38 < 0)
                v31 = (uint64_t)(v21 + 1);
              v32 = (unint64_t)v25 >> 3;
            }
            else
            {
              v26 = *v21;
              if (*v21 < 0)
                v27 = 63;
              else
                v27 = *(_QWORD *)(2 * v26);
              if (v27 <= v25)
              {
                WTF::BitVector::resizeOutOfLine(*(WTF::BitVector **)(a1 + 24), v25 + 1, 0);
                v26 = *v21;
              }
              v31 = 2 * v26 + 8;
              if (v26 < 0)
                v31 = (uint64_t)v21;
              v32 = v25 >> 3;
            }
            v33 = *(_QWORD *)(v31 + (v32 & 0x1FFFFFF8));
            *(_QWORD *)(v31 + (v32 & 0x1FFFFFF8)) = v33 | (1 << v25);
            *v16 |= (v33 & (1 << v25)) == 0;
          }
          v22 = i[1];
          goto LABEL_22;
        }
      }
LABEL_40:
      v9 -= 32;
      if (!v9)
        return 1;
    }
  }
  v70 = 0;
  v69[0] = &v70;
  v5 = *v4;
  v69[1] = *v4;
  if ((*((__int16 *)this + 60) - 446) > 5)
  {
    v40 = *((unsigned int *)this + 3);
    if (!(_DWORD)v40)
      return 0;
    v6 = 0;
    v41 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
        + 21 * *((__int16 *)this + 60)
        + ((unint64_t)((v40 - 1) * v40) >> 1);
    v42 = (_DWORD *)(*(_QWORD *)this + 16);
    while (1)
    {
      v44 = *v41++;
      v43 = v44;
      if ((v44 >> 5) - 1 >= 5)
      {
        result = 87;
        __break(0xC471u);
        return result;
      }
      v45 = v43 & 0xF;
      if (v45 != 10 && (v45 - 4) <= 6)
        break;
LABEL_98:
      v42 += 8;
      if (!--v40)
        goto LABEL_4;
    }
    v47 = *((char *)v42 - 8);
    if (v47 == 9)
    {
      v53 = *((_QWORD *)v42 - 2);
      if (*(_BYTE *)(v53 + 4))
      {
        v54 = v5[1];
        v55 = (unint64_t *)(2 * *v54);
        if (*v54 < 0)
          v56 = 63;
        else
          v56 = *v55;
        v57 = *(unsigned int *)(v53 + 8);
        if (v56 > v57)
        {
          v58 = (uint64_t *)(v55 + 1);
          if (*v54 >= 0)
            v54 = v58;
          v59 = *(uint64_t *)((char *)v54 + ((v57 >> 3) & 0x1FFFFFF8));
          v60 = 1 << v57;
          goto LABEL_96;
        }
        goto LABEL_108;
      }
    }
    else if (v47 == 1)
    {
      v48 = 1;
      v49 = *v42;
      if (v49 > 0xFFFFFFDF || (v49 - 1) < 0x20)
        goto LABEL_97;
      v50 = *v5;
      if ((int)v49 < 1)
      {
        if ((_DWORD)v49)
        {
          v64 = v50[1];
          ++v50;
          v63 = v64;
          v65 = (_QWORD *)(2 * v64);
          v66 = v64 < 0 ? 63 : *v65;
          v62 = -(uint64_t)v49;
          v49 = -(int)v49;
          if (v66 > v49)
          {
            v67 = v65 + 1;
            if (v63 >= 0)
              v50 = v67;
            goto LABEL_95;
          }
        }
      }
      else
      {
        v51 = (unint64_t *)(2 * *v50);
        if (*v50 < 0)
          v52 = 63;
        else
          v52 = *v51;
        if (v52 > v49)
        {
          v61 = (uint64_t *)(v51 + 1);
          if (*v50 >= 0)
            v50 = v61;
          LODWORD(v62) = *v42;
LABEL_95:
          v60 = *(uint64_t *)((char *)v50 + ((v49 >> 3) & 0x1FFFFFF8));
          v59 = 1 << v62;
LABEL_96:
          v48 = (v59 & v60) != 0;
          goto LABEL_97;
        }
      }
LABEL_108:
      v48 = 0;
      goto LABEL_97;
    }
    v48 = 1;
LABEL_97:
    v6 |= v48;
    v70 = v6;
    goto LABEL_98;
  }
  v71[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::eliminateDeadCode(JSC::B3::Air::Code &)::$_1::operator() const(JSC::B3::Air::Inst &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
  v71[1] = v71;
  v71[2] = v69;
  JSC::B3::Air::Inst::forEachArgCustom((uint64_t)this, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::eliminateDeadCode(JSC::B3::Air::Code &)::$_1::operator() const(JSC::B3::Air::Inst &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction, (uint64_t)v71);
  v6 = v70;
LABEL_4:
  if (v6)
    goto LABEL_5;
  return 0;
}

uint64_t JSC::B3::Air::ShufflePair::bank(JSC::B3::Air::ShufflePair *this)
{
  int v1;
  int v2;
  BOOL v4;

  v1 = *((char *)this + 8);
  if ((v1 - 6) <= 7
    && (*((char *)this + 40) - 6) <= 7
    && *((unsigned __int8 *)this + 64) > 3u)
  {
    return 1;
  }
  if (v1 == 1)
  {
    if (*((int *)this + 4) < 1)
      return 1;
  }
  else
  {
    if (*((_BYTE *)this + 8))
      v4 = v1 == 21;
    else
      v4 = 1;
    if (v4)
      return 1;
  }
  v2 = *((char *)this + 40);
  if (v2 == 1)
  {
    if (*((int *)this + 12) > 0)
      return 0;
  }
  else if (*((_BYTE *)this + 40) && v2 != 21)
  {
    return 0;
  }
  return 1;
}

void JSC::B3::Air::ShufflePair::insts(JSC::B3::Air::ShufflePair *this@<X0>, JSC::B3::Air::Code *a2@<X1>, JSC::B3::Value *a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  _OWORD *v10;
  unsigned int v11;
  int v12;
  __int16 v13;
  __int16 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  BOOL v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD *v28;
  __int128 v29;
  int v30;
  unsigned int v31;
  BOOL v32;
  int v35;
  unsigned __int16 v36;
  int v37;
  int v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  int v48;
  int v49;
  _BYTE v52[32];
  _BYTE v53[32];
  _BYTE v54[32];
  _BYTE v55[32];
  WTF *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int16 v63;
  int v64;
  int v65;
  int v66;
  char v67;
  _BYTE v68[12];
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  int v73;
  _DWORD v74[2];
  char v75;
  __int128 v76;
  __int128 v77;
  _BYTE v78[12];
  _BYTE v79[64];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v4 = *((char *)this + 8);
  v5 = v4 - 6;
  if ((v4 - 6) <= 7 && (*((char *)this + 40) - 6) <= 7)
  {
    v35 = JSC::B3::Air::ShufflePair::bank(this);
    v36 = JSC::B3::Air::moveFor(v35, *((unsigned __int8 *)this + 64));
    *(_OWORD *)v55 = *(_OWORD *)this;
    *(_OWORD *)&v55[16] = *((_OWORD *)this + 1);
    *(_OWORD *)v54 = *((_OWORD *)this + 2);
    *(_OWORD *)&v54[16] = *((_OWORD *)this + 3);
    if (JSC::B3::Air::ShufflePair::bank(this))
    {
      v49 = *((_DWORD *)a2 + 45);
      *((_DWORD *)a2 + 45) = v49 + 1;
      v38 = -33 - v49;
    }
    else
    {
      v37 = *((_DWORD *)a2 + 44);
      *((_DWORD *)a2 + 44) = v37 + 1;
      v38 = v37 + 33;
    }
    *(_OWORD *)&v79[9] = *(_OWORD *)&v55[9];
    *(_OWORD *)&v79[41] = *(_OWORD *)&v54[9];
    *(_OWORD *)v79 = *(_OWORD *)v55;
    *(_OWORD *)&v79[32] = *(_OWORD *)v54;
    v56 = (WTF *)&v58;
    v58 = *(_OWORD *)v55;
    v59 = *(_OWORD *)&v79[16];
    v60 = *(_OWORD *)v54;
    v61 = *(_OWORD *)&v79[48];
    v62 = 0;
    v63 = 513;
    v64 = 1;
    v65 = v38;
    v66 = 0;
    v67 = 0;
    v57 = 0x300000003;
    *(_QWORD *)v68 = a3;
    *(_DWORD *)&v68[8] = v36;
    WTF::Vector<JSC::B3::Air::Inst,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)a4, (uint64_t)&v56, 1uLL);
    v46 = v56;
    if (&v58 != (__int128 *)v56 && v56)
    {
      v56 = 0;
      LODWORD(v57) = 0;
      WTF::fastFree((unint64_t)v46, v39, v40, v41, v42, v43, v44, v45);
    }
    return;
  }
  if (v4 == 1)
  {
    if (*((int *)this + 4) < 1)
      goto LABEL_70;
  }
  else
  {
    if (*((_BYTE *)this + 8))
      v32 = v4 == 21;
    else
      v32 = 1;
    if (v32)
      goto LABEL_70;
  }
  v6 = *((char *)this + 40);
  if (v6 != 1)
  {
    if (*((_BYTE *)this + 40) && v6 != 21)
      goto LABEL_6;
LABEL_70:
    v7 = 107;
    v8 = 108;
    goto LABEL_7;
  }
  if (*((int *)this + 12) <= 0)
    goto LABEL_70;
LABEL_6:
  v7 = 94;
  v8 = 90;
LABEL_7:
  v9 = *((unsigned __int8 *)this + 64);
  if (v9 == 3 || (v8 = v7, v9 == 2))
  {
    v10 = (_OWORD *)((char *)this + 32);
    v11 = *((char *)this + 40);
    v12 = *((unsigned __int8 *)this + 40);
    switch(v8)
    {
      case 'Z':
        switch(*((_BYTE *)this + 8))
        {
          case 1:
            goto LABEL_21;
          case 2:
          case 3:
            if (v12 != 1)
              goto LABEL_36;
            goto LABEL_12;
          case 7:
          case 9:
          case 0xA:
          case 0xB:
            goto LABEL_10;
          case 0x14:
            if (v11 != 7 && (v11 > 0xB || ((1 << v11) & 0xE02) == 0))
              goto LABEL_36;
            goto LABEL_12;
          default:
            goto LABEL_32;
        }
      case ']':
      case '_':
        switch(v4)
        {
          case 12:
            goto LABEL_10;
          case 1:
            if ((v12 & 0xFE) == 0xC)
              goto LABEL_12;
            goto LABEL_34;
          case 13:
LABEL_10:
            if (v12 == 1)
            {
              v12 = 1;
              goto LABEL_12;
            }
            break;
          default:
LABEL_32:
            if (v5 > 7)
              goto LABEL_33;
            break;
        }
        if (((char)v12 - 6) <= 7 && v9 > 3)
          goto LABEL_119;
LABEL_33:
        if (v4 == 1)
          goto LABEL_34;
        if (*((_BYTE *)this + 8) && v4 != 21)
          goto LABEL_36;
        break;
      case '^':
        switch(*((_BYTE *)this + 8))
        {
          case 1:
            if (v11 == 1)
              goto LABEL_12;
            if (v11 > 0xB)
              goto LABEL_34;
            v18 = ((1 << v11) & 0xE80) == 0;
            break;
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 8:
            goto LABEL_32;
          case 7:
          case 9:
          case 0xA:
          case 0xB:
            goto LABEL_10;
          default:
            if (v4 != 20)
              goto LABEL_32;
            if (v11 - 9 >= 3 && v11 != 7 && v11 != 1)
              goto LABEL_36;
            goto LABEL_12;
        }
        goto LABEL_28;
      case 'h':
      case 'i':
      case 'j':
        if (v4 != 1)
          goto LABEL_32;
        if (v12 != 1)
          goto LABEL_35;
        goto LABEL_12;
      case 'k':
        switch(*((_BYTE *)this + 8))
        {
          case 1:
            if (v11 > 0xB)
              goto LABEL_34;
            v18 = ((1 << v11) & 0xE82) == 0;
            break;
          case 7:
          case 9:
          case 0xA:
          case 0xB:
            goto LABEL_10;
          default:
            goto LABEL_32;
        }
        goto LABEL_28;
      case 'l':
        switch(*((_BYTE *)this + 8))
        {
          case 1:
LABEL_21:
            if (v11 > 0xB || ((1 << v11) & 0xE82) == 0)
              goto LABEL_34;
            goto LABEL_12;
          case 7:
          case 9:
          case 0xA:
          case 0xB:
            goto LABEL_10;
          default:
            goto LABEL_32;
        }
      default:
        goto LABEL_32;
    }
    goto LABEL_119;
  }
  if (v9 != 4)
  {
    __break(0xC471u);
    JUMPOUT(0x1980A49D0);
  }
  v10 = (_OWORD *)((char *)this + 32);
  v31 = *((char *)this + 40);
  v12 = *((unsigned __int8 *)this + 40);
  switch(*((_BYTE *)this + 8))
  {
    case 1:
      if (v31 > 0xB)
        goto LABEL_34;
      v18 = ((1 << v31) & 0xE82) == 0;
      break;
    case 7:
    case 9:
    case 0xA:
    case 0xB:
      goto LABEL_10;
    default:
      goto LABEL_32;
  }
LABEL_28:
  if (v18)
  {
LABEL_34:
    if (v4 == 1)
    {
LABEL_35:
      if (*((int *)this + 4) >= 1)
      {
LABEL_36:
        if (v12 == 1)
        {
          if (*((int *)this + 12) >= 1)
          {
LABEL_38:
            v19 = *((_DWORD *)a2 + 44);
            *((_DWORD *)a2 + 44) = v19 + 1;
            v20 = v19 + 33;
LABEL_39:
            v21 = *(_QWORD *)this;
            *(_QWORD *)&v59 = 0;
            BYTE8(v59) = 0;
            v56 = (WTF *)&v58;
            *(_QWORD *)&v58 = v21;
            WORD4(v58) = 515;
            HIDWORD(v58) = 1;
            *(_QWORD *)&v60 = 0;
            WORD4(v60) = 513;
            HIDWORD(v60) = 1;
            *(_QWORD *)&v61 = v20;
            BYTE8(v61) = 0;
            v57 = 0x200000003;
            *(_QWORD *)v68 = a3;
            *(_DWORD *)&v68[8] = 90;
            if (v5 <= 7 && ((char)v12 - 6) <= 7 && v9 > 3)
            {
LABEL_53:
              v23 = 113;
LABEL_46:
              v24 = 0;
              *(_OWORD *)v52 = *v10;
              v25 = *v10;
              *(_OWORD *)&v52[16] = v10[1];
              *(_OWORD *)&v79[16] = *(_OWORD *)&v52[9];
              *(_OWORD *)&v79[7] = v25;
              v69 = &v71;
              v71 = 0;
              v72 = 513;
              v73 = 1;
              v74[0] = v20;
              v74[1] = 0;
              v75 = 0;
              v76 = v25;
              v77 = *(_OWORD *)&v79[23];
              v70 = 0x200000003;
              *(_QWORD *)v78 = a3;
              *(_DWORD *)&v78[8] = v23;
              *(_QWORD *)(a4 + 16) = a4 + 32;
              *(_QWORD *)a4 = a4 + 16;
              *(_QWORD *)(a4 + 24) = 0x200000003;
              v26 = v59;
              *(_OWORD *)(a4 + 32) = v58;
              *(_OWORD *)(a4 + 48) = v26;
              v27 = v61;
              *(_OWORD *)(a4 + 64) = v60;
              *(_OWORD *)(a4 + 80) = v27;
              *(_QWORD *)(a4 + 128) = *(_QWORD *)v68;
              *(_DWORD *)(a4 + 135) = *(_DWORD *)&v68[7];
              *(_QWORD *)(a4 + 8) = 0x100000002;
              *(_QWORD *)(a4 + 144) = a4 + 160;
              *(_QWORD *)(a4 + 152) = 0x200000003;
              do
              {
                v28 = (_OWORD *)(a4 + 160 + v24 * 4);
                v29 = *(_OWORD *)&v74[v24];
                *v28 = *(_OWORD *)((char *)&v71 + v24 * 4);
                v28[1] = v29;
                v24 += 8;
              }
              while (v24 != 16);
              v30 = *(_DWORD *)(a4 + 12);
              *(_QWORD *)(a4 + 256) = *(_QWORD *)v78;
              *(_DWORD *)(a4 + 263) = *(_DWORD *)&v78[7];
              *(_DWORD *)(a4 + 12) = v30 + 1;
              return;
            }
            if (v4 == 1)
            {
              if (*((int *)this + 4) < 1)
                goto LABEL_91;
            }
            else if (!v4 || v4 == 21)
            {
              goto LABEL_91;
            }
            if (v12 == 1)
            {
              if (*((int *)this + 12) > 0)
              {
LABEL_44:
                v22 = 94;
                v23 = 90;
LABEL_45:
                if (v9 == 3)
                  goto LABEL_46;
                v23 = v22;
                if (v9 == 2)
                  goto LABEL_46;
                goto LABEL_53;
              }
            }
            else if ((_BYTE)v12 && (char)v12 != 21)
            {
              goto LABEL_44;
            }
LABEL_91:
            v22 = 107;
            v23 = 108;
            goto LABEL_45;
          }
          v12 = 1;
        }
        else if ((_BYTE)v12 && (char)v12 != 21)
        {
          goto LABEL_38;
        }
      }
    }
LABEL_119:
    v48 = *((_DWORD *)a2 + 45);
    *((_DWORD *)a2 + 45) = v48 + 1;
    v20 = -33 - v48;
    goto LABEL_39;
  }
LABEL_12:
  if (v4 != 1 || *((int *)this + 4) >= 1)
  {
    if (v12 == 1)
    {
      if (*((int *)this + 12) > 0)
      {
LABEL_16:
        v13 = 94;
        v14 = 90;
        goto LABEL_17;
      }
    }
    else if ((_BYTE)v12 && (char)v12 != 21)
    {
      goto LABEL_16;
    }
  }
  v13 = 107;
  v14 = 108;
LABEL_17:
  if (v9 != 3)
  {
    v14 = v13;
    if (v9 != 2)
      v14 = 113;
  }
  *(_OWORD *)v53 = *v10;
  v15 = *v10;
  *(_OWORD *)&v53[16] = v10[1];
  *(_OWORD *)&v79[9] = *(_OWORD *)((char *)this + 9);
  *(_OWORD *)&v79[41] = *(_OWORD *)&v53[9];
  *(_OWORD *)v79 = *(_OWORD *)this;
  *(_OWORD *)&v79[32] = v15;
  v58 = *(_OWORD *)v79;
  v59 = *(_OWORD *)&v79[16];
  v60 = v15;
  v61 = *(_OWORD *)&v79[48];
  *(_QWORD *)(a4 + 16) = a4 + 32;
  *(_QWORD *)a4 = a4 + 16;
  *(_QWORD *)(a4 + 24) = 0x200000003;
  v16 = v59;
  *(_OWORD *)(a4 + 32) = v58;
  *(_OWORD *)(a4 + 48) = v16;
  v17 = v61;
  *(_OWORD *)(a4 + 64) = v60;
  *(_OWORD *)(a4 + 80) = v17;
  *(_QWORD *)(a4 + 128) = a3;
  *(_BYTE *)(a4 + 138) = 0;
  *(_WORD *)(a4 + 136) = v14;
  *(_QWORD *)(a4 + 8) = 0x100000002;
}

uint64_t JSC::B3::Air::moveFor(int a1, int a2)
{
  BOOL v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t result;

  switch(a2)
  {
    case 3:
      v2 = a1 == 0;
      v3 = 108;
      v4 = 90;
      goto LABEL_3;
    case 2:
      v2 = a1 == 0;
      v3 = 107;
      v4 = 94;
LABEL_3:
      if (v2)
        return v4;
      else
        return v3;
    case 4:
      return 113;
  }
  result = 53;
  __break(0xC471u);
  return result;
}

uint64_t *WTF::Vector<JSC::B3::Air::Inst,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;

  *a1 = (uint64_t)(a1 + 2);
  a1[1] = 2;
  if (a3 >= 3)
  {
    if (a3 >> 25)
    {
LABEL_16:
      __break(0xC471u);
      JUMPOUT(0x1980A4DCCLL);
    }
    v20 = a3;
    v21 = WTF::fastMalloc((WTF *)(a3 << 7));
    a3 = v20;
    *((_DWORD *)a1 + 2) = v20;
    *a1 = v21;
    v5 = *((_DWORD *)a1 + 3);
  }
  else
  {
    if (!a3)
      return a1;
    v5 = 0;
  }
  v6 = a2 + (a3 << 7);
  do
  {
    v7 = *a1;
    v8 = v5;
    v9 = *a1 + ((unint64_t)v5 << 7);
    v10 = *(unsigned int *)(a2 + 12);
    v11 = (_OWORD *)(v9 + 16);
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 3;
    *(_DWORD *)(v9 + 12) = v10;
    if (v10 >= 4)
    {
      if (v10 >> 27)
        goto LABEL_16;
      v11 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v10));
      *(_DWORD *)(v9 + 8) = v10;
      *(_QWORD *)v9 = v11;
    }
    v12 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v12)
    {
      v13 = *(__int128 **)a2;
      v14 = 32 * v12;
      do
      {
        v15 = *v13;
        v16 = v13[1];
        v13 += 2;
        *v11 = v15;
        v11[1] = v16;
        v11 += 2;
        v14 -= 32;
      }
      while (v14);
    }
    v17 = v7 + (v8 << 7);
    v18 = *(_QWORD *)(a2 + 112);
    *(_DWORD *)(v17 + 119) = *(_DWORD *)(a2 + 119);
    *(_QWORD *)(v17 + 112) = v18;
    v5 = *((_DWORD *)a1 + 3) + 1;
    *((_DWORD *)a1 + 3) = v5;
    a2 += 128;
  }
  while (a2 != v6);
  return a1;
}

uint64_t JSC::B3::Air::Inst::append<JSC::B3::Air::Arg,JSC::B3::Air::Arg>(uint64_t result, __int128 *a2, _OWORD *a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[2];
  _OWORD v29[2];

  v10 = result;
  v11 = *(unsigned int *)(result + 12);
  if ((_DWORD)v11 == *(_DWORD *)(result + 8))
  {
    result = WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v11 + 1), (unint64_t)a2, (uint64_t)a4, a5, a6, a7, a8);
    v12 = (_OWORD *)(*(_QWORD *)v10 + 32 * *(unsigned int *)(v10 + 12));
    v13 = *(_OWORD *)result;
    v14 = *(_OWORD *)(result + 16);
  }
  else
  {
    v12 = (_OWORD *)(*(_QWORD *)result + 32 * v11);
    v13 = *a2;
    v14 = a2[1];
  }
  *v12 = v13;
  v12[1] = v14;
  v15 = *(_DWORD *)(v10 + 8);
  v16 = (*(_DWORD *)(v10 + 12) + 1);
  *(_DWORD *)(v10 + 12) = v16;
  v17 = a3[1];
  v28[0] = *a3;
  v28[1] = v17;
  v26 = *a4;
  v27 = a4[1];
  if ((_DWORD)v16 == v15)
  {
    result = WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (void *)(v16 + 1), (unint64_t)v28, (uint64_t)a4, a5, a6, a7, a8);
    v18 = (_OWORD *)(*(_QWORD *)v10 + 32 * *(unsigned int *)(v10 + 12));
    v19 = *(_OWORD *)result;
    v20 = *(_OWORD *)(result + 16);
  }
  else
  {
    v18 = (_OWORD *)(*(_QWORD *)v10 + 32 * v16);
    v19 = *a3;
    v20 = a3[1];
  }
  *v18 = v19;
  v18[1] = v20;
  v21 = *(_DWORD *)(v10 + 8);
  v22 = (*(_DWORD *)(v10 + 12) + 1);
  *(_DWORD *)(v10 + 12) = v22;
  v29[0] = v26;
  v29[1] = v27;
  if ((_DWORD)v22 == v21)
  {
    result = WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (void *)(v22 + 1), (unint64_t)v29, (uint64_t)a4, a5, a6, a7, a8);
    v23 = (_OWORD *)(*(_QWORD *)v10 + 32 * *(unsigned int *)(v10 + 12));
    v24 = *(_OWORD *)result;
    v25 = *(_OWORD *)(result + 16);
  }
  else
  {
    v23 = (_OWORD *)(*(_QWORD *)v10 + 32 * v22);
    v24 = v26;
    v25 = v27;
  }
  *v23 = v24;
  v23[1] = v25;
  ++*(_DWORD *)(v10 + 12);
  return result;
}

void JSC::B3::Air::emitShuffle(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;
  unint64_t v9;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  _BOOL4 v49;
  int v50;
  int v51;
  BOOL v52;
  __int128 v55;
  _OWORD *v56;
  __int128 v57;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  int32x2_t v61;
  int v62;
  unint64_t v63;
  __int32 v64;
  uint64_t v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int8x8_t v71;
  int8x8_t v72;
  int32x2_t v73;
  int8x8_t v74;
  int8x8_t v75;
  unsigned int v76;
  int i;
  int v78;
  uint64_t v79;
  BOOL v81;
  BOOL v83;
  unsigned int v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  char *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  _OWORD *v98;
  __int128 v99;
  char *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  __int128 *v109;
  unint64_t v110;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  BOOL v117;
  unint64_t v118;
  __int16 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  _BOOL4 v126;
  int v127;
  int v128;
  BOOL v129;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  BOOL v149;
  _BOOL4 v150;
  int v151;
  int v152;
  BOOL v153;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  BOOL v160;
  _BOOL4 v161;
  int v162;
  int v163;
  BOOL v164;
  unsigned int v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  BOOL v172;
  _BOOL4 v173;
  int v174;
  int v175;
  BOOL v176;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unsigned int v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _OWORD *v199;
  uint64_t v200;
  __int128 *v201;
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  BOOL v221;
  BOOL v223;
  unint64_t v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  int v233;
  unsigned int v234;
  uint64_t v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  _BOOL4 v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  char *v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  __int128 v253;
  __int128 v254;
  unint64_t v255;
  uint64_t v256;
  int v257;
  char *v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  unsigned int v262;
  uint64_t v263;
  unsigned int *v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int v267;
  WTF *v268;
  WTF *v269;
  uint64_t v270;
  unsigned int *v271;
  unint64_t v272;
  unint64_t v273;
  unsigned int *v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  char v281;
  uint64_t v282;
  char *v283;
  unsigned int v284;
  char *v285;
  uint64_t v286;
  int v287;
  unsigned int v288;
  uint64_t v289;
  _DWORD *v290;
  unsigned int v291;
  unsigned int v292;
  int v293;
  int v294;
  _BOOL4 v295;
  uint64_t v296;
  unsigned int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unsigned int v304;
  uint64_t v305;
  char v306;
  char v307;
  int v308;
  int v309;
  unsigned int v310;
  unsigned int v311;
  char v312;
  unsigned int v313;
  uint64_t v314;
  char v315;
  __int128 v316;
  uint64_t v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char v328;
  __int128 v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  char v333;
  int v334;
  uint64_t v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  uint64_t v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  WTF *v343;
  WTF *v344;
  unint64_t v345;
  unsigned int *v346;
  unint64_t v347;
  unsigned int v348;
  char v349;
  char v350;
  char v351;
  unsigned int *v352;
  int v353;
  unint64_t v354;
  uint64_t v355;
  unsigned int v356;
  unint64_t v357;
  _BYTE v358[7];
  uint64_t v359[2];
  __int16 v360;
  WTF *v361[2];
  __int128 v362;
  __int128 v363;
  __int128 v364;
  uint64_t v365;
  _BYTE *v366;
  WTF *v367[2];
  WTF *v368[2];
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  _BYTE v373[32];
  __int128 v374;
  __int128 v375;
  char v376;
  __int128 v377;
  __int128 v378;
  __int128 *v379;
  uint64_t v380;
  unsigned int *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  _BYTE v385[17];

  v8 = (WTF *)a4;
  v9 = a2;
  v385[0] = a5;
  v384 = a6;
  v11 = *(_QWORD *)a3;
  v12 = *(_DWORD *)(a3 + 12);
  v13 = *(_QWORD *)a3 + 72 * v12;
  if (v12)
  {
    v12 = 0;
    v14 = v13;
    v15 = v13;
    do
    {
      if (*(_QWORD *)v11 == *(_QWORD *)(v11 + 32)
        && *(unsigned __int8 *)(v11 + 8) == *(unsigned __int8 *)(v11 + 40)
        && *(_DWORD *)(v11 + 16) == *(_DWORD *)(v11 + 48)
        && *(_DWORD *)(v11 + 20) == *(_DWORD *)(v11 + 52)
        && *(_DWORD *)(v11 + 12) == *(_DWORD *)(v11 + 44))
      {
        v16 = v11;
        if (v15 != *(_QWORD *)a3 + 72 * *(unsigned int *)(a3 + 12))
        {
          if (v14 == v11)
          {
            v16 = v15;
          }
          else
          {
            if (v14 <= v15)
            {
              v335 = 0;
              v22 = (uint64_t)(v11 - v14) / 72;
              do
              {
                a2 = v15 + 72 * v22 - 72 + v335;
                *(_OWORD *)a2 = *(_OWORD *)(v11 + v335 - 72);
                v336 = *(_OWORD *)(v11 + v335 - 56);
                v337 = *(_OWORD *)(v11 + v335 - 40);
                v338 = *(_OWORD *)(v11 + v335 - 24);
                *(_QWORD *)(a2 + 64) = *(_QWORD *)(v11 + v335 - 8);
                *(_OWORD *)(a2 + 32) = v337;
                *(_OWORD *)(a2 + 48) = v338;
                *(_OWORD *)(a2 + 16) = v336;
                v335 -= 72;
              }
              while (v11 + v335 != v14);
            }
            else
            {
              v17 = v15;
              v18 = v14;
              do
              {
                *(_OWORD *)v17 = *(_OWORD *)v18;
                v19 = *(_OWORD *)(v18 + 16);
                v20 = *(_OWORD *)(v18 + 32);
                v21 = *(_OWORD *)(v18 + 48);
                *(_QWORD *)(v17 + 64) = *(_QWORD *)(v18 + 64);
                *(_OWORD *)(v17 + 32) = v20;
                *(_OWORD *)(v17 + 48) = v21;
                *(_OWORD *)(v17 + 16) = v19;
                v17 += 72;
                v18 += 72;
              }
              while (v18 != v11);
              v22 = 0x8E38E38E38E38E39 * ((uint64_t)(v11 - v14) >> 3);
            }
            v16 = v15 + 72 * v22;
          }
        }
        v14 = v11 + 72;
        ++v12;
        v15 = v16;
      }
      v11 += 72;
    }
    while (v11 < v13);
    v11 = *(_QWORD *)a3;
    v23 = *(_DWORD *)(a3 + 12);
    v13 = v15;
  }
  else
  {
    v23 = 0;
    v14 = *(_QWORD *)a3;
  }
  v24 = v11 + 72 * v23;
  if (v14 != v24)
  {
    if (v14 <= v13)
    {
      v339 = v13 + 72 * ((uint64_t)(v24 - v14) / 72) - 72;
      do
      {
        *(_OWORD *)v339 = *(_OWORD *)(v24 - 72);
        v340 = *(_OWORD *)(v24 - 56);
        v341 = *(_OWORD *)(v24 - 40);
        v342 = *(_OWORD *)(v24 - 24);
        *(_QWORD *)(v339 + 64) = *(_QWORD *)(v24 - 8);
        *(_OWORD *)(v339 + 32) = v341;
        *(_OWORD *)(v339 + 48) = v342;
        *(_OWORD *)(v339 + 16) = v340;
        v339 -= 72;
        v24 -= 72;
      }
      while (v24 != v14);
    }
    else
    {
      do
      {
        *(_OWORD *)v13 = *(_OWORD *)v14;
        v25 = *(_OWORD *)(v14 + 16);
        v26 = *(_OWORD *)(v14 + 32);
        v27 = *(_OWORD *)(v14 + 48);
        *(_QWORD *)(v13 + 64) = *(_QWORD *)(v14 + 64);
        *(_OWORD *)(v13 + 32) = v26;
        *(_OWORD *)(v13 + 48) = v27;
        *(_OWORD *)(v13 + 16) = v25;
        v13 += 72;
        v14 += 72;
      }
      while (v14 != v24);
    }
  }
  v28 = *(_DWORD *)(a3 + 12);
  v382 = 0;
  v383 = 0;
  v381 = 0;
  v359[0] = 0;
  v29 = v28 - v12;
  *(_DWORD *)(a3 + 12) = v29;
  v354 = v9;
  v355 = a4;
  if ((_DWORD)v29)
  {
    v30 = *(_QWORD *)a3;
    v31 = 72 * v29;
    do
    {
      v361[0] = 0;
      v361[1] = 0;
      WTF::HashMap<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v373, v359, (__int128 *)v30, (uint64_t *)v361);
      v32 = *(_QWORD *)v373;
      v33 = (_QWORD *)(*(_QWORD *)v373 + 32);
      v34 = *(unsigned int *)(*(_QWORD *)v373 + 44);
      if ((_DWORD)v34 == *(_DWORD *)(*(_QWORD *)v373 + 40))
      {
        v35 = WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v33, v34 + 1, v30);
        v36 = *(_QWORD *)(v32 + 32) + 72 * *(unsigned int *)(v32 + 44);
        *(_OWORD *)v36 = *(_OWORD *)v35;
        v38 = *(_OWORD *)(v35 + 32);
        v37 = *(_OWORD *)(v35 + 48);
        v39 = *(_OWORD *)(v35 + 16);
        *(_QWORD *)(v36 + 64) = *(_QWORD *)(v35 + 64);
        *(_OWORD *)(v36 + 32) = v38;
        *(_OWORD *)(v36 + 48) = v37;
        *(_OWORD *)(v36 + 16) = v39;
      }
      else
      {
        v40 = *v33 + 72 * v34;
        *(_OWORD *)v40 = *(_OWORD *)v30;
        v41 = *(_OWORD *)(v30 + 16);
        v42 = *(_OWORD *)(v30 + 32);
        v43 = *(_OWORD *)(v30 + 48);
        *(_QWORD *)(v40 + 64) = *(_QWORD *)(v30 + 64);
        *(_OWORD *)(v40 + 32) = v42;
        *(_OWORD *)(v40 + 48) = v43;
        *(_OWORD *)(v40 + 16) = v41;
      }
      ++*(_DWORD *)(v32 + 44);
      if (v361[0])
        WTF::fastFree((unint64_t)v361[0], (void *)a2, a3, a4, a5, a6, a7, a8);
      v30 += 72;
      v31 -= 72;
    }
    while (v31);
    v44 = v359[0];
    v379 = 0;
    v380 = 0;
    if (v359[0])
    {
      v356 = 0;
      v352 = 0;
      while (1)
      {
        if (!*(_DWORD *)(v44 - 12))
        {
LABEL_139:
          v112 = (unint64_t)v379;
          v9 = v354;
          if (v379)
          {
            v379 = 0;
            LODWORD(v380) = 0;
            WTF::fastFree(v112, (void *)a2, a3, a4, a5, a6, a7, a8);
          }
          if (v44)
          {
            v113 = *(unsigned int *)(v44 - 4);
            if ((_DWORD)v113)
            {
              v114 = v44 + 20;
              do
              {
                if (*(_QWORD *)(v114 - 20))
                  v115 = 0;
                else
                  v115 = *(_BYTE *)(v114 - 12) == 0;
                v117 = v115 && *(_DWORD *)(v114 - 4) == 0x7FFFFFFF && *(_DWORD *)v114 == 0;
                if (!v117 || *(_DWORD *)(v114 - 8) != 1)
                {
                  v118 = *(_QWORD *)(v114 + 12);
                  if (v118)
                  {
                    *(_QWORD *)(v114 + 12) = 0;
                    *(_DWORD *)(v114 + 20) = 0;
                    WTF::fastFree(v118, (void *)a2, a3, a4, a5, a6, a7, a8);
                  }
                }
                v114 += 48;
                --v113;
              }
              while (v113);
            }
            WTF::fastFree(v44 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
          }
          goto LABEL_160;
        }
        v45 = *(unsigned int *)(v44 - 4);
        if ((_DWORD)v45)
        {
          v46 = v44 + 48 * v45;
          v47 = 48 * v45;
          while (1)
          {
            v48 = !*(_QWORD *)v44 && *(_BYTE *)(v44 + 8) == 0;
            v49 = v48;
            v51 = *(_DWORD *)(v44 + 16);
            v50 = *(_DWORD *)(v44 + 20);
            v52 = v49 && v51 == 0;
            if (!v52 || v50 != 0)
            {
              if (v51 != 0x7FFFFFFF)
                v49 = 0;
              if (!v49 || v50 != 0)
                break;
            }
            if (*(_DWORD *)(v44 + 12) != 1)
              break;
            v44 += 48;
            v47 -= 48;
            if (!v47)
            {
              v44 = v46;
              break;
            }
          }
        }
        v55 = *(_OWORD *)(v44 + 16);
        v377 = *(_OWORD *)v44;
        v378 = v55;
        *(_QWORD *)v373 = 0;
        *(_QWORD *)&v373[8] = &v373[24];
        *(_QWORD *)&v373[16] = 16;
        v371 = v377;
        v372 = v55;
        WTF::HashTable<JSC::B3::Air::Arg,JSC::B3::Air::Arg,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>>::add((uint64_t)v361, (uint64_t *)v373, &v371);
        if ((_BYTE)v362)
        {
          if (*(_DWORD *)&v373[20] == *(_DWORD *)&v373[16])
          {
            WTF::Vector<JSC::B3::Air::Arg,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Arg&>((uint64_t)&v373[8], (unint64_t)&v371, a3, a4, a5, a6, a7, a8);
          }
          else
          {
            v56 = (_OWORD *)(*(_QWORD *)&v373[8] + 32 * *(unsigned int *)&v373[20]);
            v57 = v372;
            *v56 = v371;
            v56[1] = v57;
            ++*(_DWORD *)&v373[20];
          }
        }
        while (1)
        {
          if (*(_DWORD *)&v373[20])
          {
            v58 = *(_QWORD *)&v373[8] + 32 * *(unsigned int *)&v373[20];
            *(_OWORD *)v361 = *(_OWORD *)(v58 - 32);
            v362 = *(_OWORD *)(v58 - 16);
            --*(_DWORD *)&v373[20];
            v59 = v361[0];
            v60 = LOBYTE(v361[1]);
            v61 = (int32x2_t)v362;
            v62 = HIDWORD(v361[1]);
          }
          else
          {
            v60 = 0;
            v59 = 0;
            v361[0] = 0;
            LOWORD(v361[1]) = 512;
            v62 = 1;
            HIDWORD(v361[1]) = 1;
            *(_QWORD *)&v362 = 0;
            v61 = 0;
            BYTE8(v362) = 0;
          }
          v63 = v61.u32[0];
          v64 = v61.i32[1];
          if (!v59 && !(_DWORD)v60 && !v61.i32[0] && !v61.i32[1] && v62 == 1)
            break;
          v66 = v359[0];
          if (!v359[0])
            goto LABEL_109;
          v67 = 0;
          v68 = ((unint64_t)v59 + ~((_QWORD)v59 << 32)) ^ (((unint64_t)v59 + ~((_QWORD)v59 << 32)) >> 22);
          v69 = 9 * ((v68 + ~(v68 << 13)) ^ ((v68 + ~(v68 << 13)) >> 8));
          v70 = (v69 ^ (v69 >> 15)) + ~((v69 ^ (v69 >> 15)) << 27);
          v71 = (int8x8_t)vadd_s32(v61, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v61, 0xFuLL)));
          v72 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v71, 0xAuLL), v71), (int32x2_t)0x900000009);
          v73 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v72, 6uLL), v72);
          v74 = (int8x8_t)vadd_s32(v73, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v73, 0xBuLL)));
          v75 = veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v74, 0x10uLL), v74);
          v76 = *(_DWORD *)(v359[0] - 8);
          for (i = v62 + (char)v60 + v75.i32[0] + ((v70 >> 31) ^ v70) + v75.i32[1]; ; i = ++v67 + v78)
          {
            v78 = i & v76;
            v79 = v359[0] + 48 * (i & v76);
            a3 = *(unsigned __int8 *)(v79 + 8);
            a2 = *(unsigned int *)(v79 + 16);
            if (*(WTF **)v79 == v59 && (_DWORD)a3 == (_DWORD)v60)
            {
              a3 = v60;
              if ((_DWORD)a2 == (_DWORD)v63)
              {
                a2 = v63;
                a3 = v60;
                if (*(_DWORD *)(v79 + 20) == v64)
                {
                  a4 = *(unsigned int *)(v79 + 12);
                  a2 = v63;
                  a3 = v60;
                  if ((_DWORD)a4 == v62)
                    break;
                }
              }
            }
            a4 = *(unsigned int *)(v79 + 20);
            if (*(_QWORD *)v79)
              v81 = 0;
            else
              v81 = (_DWORD)a3 == 0;
            v83 = v81 && (_DWORD)a2 == 0 && (_DWORD)a4 == 0;
            if (v83 && *(_DWORD *)(v79 + 12) == 1)
            {
              v84 = *(_DWORD *)(v359[0] - 4);
              v79 = v359[0] + 48 * v84;
              goto LABEL_94;
            }
          }
          v84 = *(_DWORD *)(v359[0] - 4);
LABEL_94:
          if (v79 == v359[0] + 48 * v84)
          {
LABEL_109:
            v104 = v383;
            if (v383)
            {
              v105 = WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::B3::Air::Arg>>,JSC::B3::Air::Arg>(v383, (int32x2_t *)v361);
              v85 = 0;
              if (v105)
              {
                v106 = 0;
                if (v105 != v104 + 48 * *(unsigned int *)(v104 - 4))
                {
                  v85 = *(_QWORD *)(v105 + 32);
                  v106 = *(unsigned int *)(v105 + 44);
                  *(_QWORD *)(v105 + 32) = 0;
                  *(_QWORD *)(v105 + 40) = 0;
                  if (v104 + 48 * *(unsigned int *)(v104 - 4) != v105)
                  {
                    *(_QWORD *)v105 = 0;
                    *(_WORD *)(v105 + 8) = 512;
                    *(_QWORD *)(v105 + 12) = 0x7FFFFFFF00000001;
                    *(_DWORD *)(v105 + 20) = 0;
                    *(_BYTE *)(v105 + 24) = 0;
                    v233 = *(_DWORD *)(v104 - 12) - 1;
                    ++*(_DWORD *)(v104 - 16);
                    *(_DWORD *)(v104 - 12) = v233;
                    v234 = *(_DWORD *)(v104 - 4);
                    if (6 * v233 < v234 && v234 >= 9)
                      WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::rehash(&v383, v234 >> 1, 0);
                  }
                }
              }
              else
              {
                v106 = 0;
              }
            }
            else
            {
              v85 = 0;
              v106 = 0;
            }
            a2 = HIDWORD(v380) + v106;
            if (a2 > v380)
              WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v379, a2);
            if (v106)
            {
              v225 = HIDWORD(v380);
              v226 = (uint64_t)v379;
              v227 = 72 * v106;
              v228 = v85;
              do
              {
                v229 = v226 + 72 * v225;
                *(_OWORD *)v229 = *(_OWORD *)v228;
                v230 = *(_OWORD *)(v228 + 16);
                v231 = *(_OWORD *)(v228 + 32);
                v232 = *(_OWORD *)(v228 + 48);
                *(_QWORD *)(v229 + 64) = *(_QWORD *)(v228 + 64);
                *(_OWORD *)(v229 + 32) = v231;
                *(_OWORD *)(v229 + 48) = v232;
                *(_OWORD *)(v229 + 16) = v230;
                ++v225;
                v228 += 72;
                v227 -= 72;
              }
              while (v227);
              HIDWORD(v380) = v225;
            }
          }
          else
          {
            v85 = *(_QWORD *)(v79 + 32);
            v86 = *(unsigned int *)(v79 + 44);
            *(_QWORD *)(v79 + 32) = 0;
            *(_QWORD *)(v79 + 40) = 0;
            if (v66 + 48 * *(unsigned int *)(v66 - 4) != v79)
            {
              *(_QWORD *)v79 = 0;
              *(_WORD *)(v79 + 8) = 512;
              *(_QWORD *)(v79 + 12) = 0x7FFFFFFF00000001;
              *(_DWORD *)(v79 + 20) = 0;
              *(_BYTE *)(v79 + 24) = 0;
              v87 = *(_DWORD *)(v66 - 12) - 1;
              ++*(_DWORD *)(v66 - 16);
              *(_DWORD *)(v66 - 12) = v87;
              v88 = *(_DWORD *)(v66 - 4);
              if (6 * v87 < v88 && v88 >= 9)
                WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::rehash(v359, v88 >> 1, 0);
            }
            if ((_DWORD)v86)
            {
              v89 = 72 * v86;
              v90 = v85;
              do
              {
                v91 = HIDWORD(v380);
                if (HIDWORD(v380) == (_DWORD)v380)
                {
                  v92 = WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v379, HIDWORD(v380) + 1, v90);
                  v91 = HIDWORD(v380);
                  v93 = (char *)v379 + 72 * HIDWORD(v380);
                  *(_OWORD *)v93 = *(_OWORD *)v92;
                  v95 = *(_OWORD *)(v92 + 32);
                  v94 = *(_OWORD *)(v92 + 48);
                  v96 = *(_OWORD *)(v92 + 16);
                  *((_QWORD *)v93 + 8) = *(_QWORD *)(v92 + 64);
                  *((_OWORD *)v93 + 2) = v95;
                  *((_OWORD *)v93 + 3) = v94;
                  *((_OWORD *)v93 + 1) = v96;
                }
                else
                {
                  v100 = (char *)v379 + 72 * HIDWORD(v380);
                  v102 = *(_OWORD *)(v90 + 32);
                  v101 = *(_OWORD *)(v90 + 48);
                  v103 = *(_OWORD *)(v90 + 16);
                  *((_QWORD *)v100 + 8) = *(_QWORD *)(v90 + 64);
                  *((_OWORD *)v100 + 2) = v102;
                  *((_OWORD *)v100 + 3) = v101;
                  *((_OWORD *)v100 + 1) = v103;
                  *(_OWORD *)v100 = *(_OWORD *)v90;
                }
                HIDWORD(v380) = v91 + 1;
                v97 = *(_OWORD *)(v90 + 48);
                v369 = *(_OWORD *)(v90 + 32);
                v370 = v97;
                WTF::HashTable<JSC::B3::Air::Arg,JSC::B3::Air::Arg,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>>::add((uint64_t)v367, (uint64_t *)v373, &v369);
                if (LOBYTE(v368[0]))
                {
                  if (*(_DWORD *)&v373[20] == *(_DWORD *)&v373[16])
                  {
                    WTF::Vector<JSC::B3::Air::Arg,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Arg&>((uint64_t)&v373[8], (unint64_t)&v369, a3, a4, a5, a6, a7, a8);
                  }
                  else
                  {
                    v98 = (_OWORD *)(*(_QWORD *)&v373[8] + 32 * *(unsigned int *)&v373[20]);
                    v99 = v370;
                    *v98 = v369;
                    v98[1] = v99;
                    ++*(_DWORD *)&v373[20];
                  }
                }
                v90 += 72;
                v89 -= 72;
              }
              while (v89);
            }
          }
          if (v85)
            WTF::fastFree(v85, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
        v107 = HIDWORD(v380);
        if (HIDWORD(v380))
          break;
LABEL_128:
        WTF::HashMap<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v361, &v383, &v377, (uint64_t *)&v379);
LABEL_129:
        v110 = *(_QWORD *)&v373[8];
        if (&v373[24] != *(_BYTE **)&v373[8] && *(_QWORD *)&v373[8] != 0)
        {
          *(_QWORD *)&v373[8] = 0;
          *(_DWORD *)&v373[16] = 0;
          WTF::fastFree(v110, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
        if (*(_QWORD *)v373)
          WTF::fastFree(*(_QWORD *)v373 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
        v44 = v359[0];
        if (!v359[0])
          goto LABEL_139;
      }
      v108 = 0;
      v109 = v379;
      while (*(_QWORD *)((char *)v379 + v108 + 32) != (_QWORD)v377
           || *((unsigned __int8 *)v379 + v108 + 40) != BYTE8(v377)
           || *(_QWORD *)((char *)v379 + v108 + 48) != (_QWORD)v378
           || *(_DWORD *)((char *)v379 + v108 + 44) != HIDWORD(v377))
      {
        v108 += 72;
        if (72 * HIDWORD(v380) == v108)
          goto LABEL_128;
      }
      *(_OWORD *)v367 = 0u;
      *(_OWORD *)v368 = 0u;
      v235 = HIDWORD(v380) - 1;
      if (*((_QWORD *)v379 + 9 * v235 + 4) == (_QWORD)v377
        && *((unsigned __int8 *)v379 + 72 * v235 + 40) == BYTE8(v377)
        && *((_QWORD *)v379 + 9 * v235 + 6) == (_QWORD)v378
        && *((_DWORD *)v379 + 18 * v235 + 11) == HIDWORD(v377))
      {
        v236 = HIDWORD(v380) - 1;
        if (HIDWORD(v380) == 1)
          goto LABEL_400;
        v237 = 72 * (HIDWORD(v380) - 2);
        v238 = 72 * v236;
        v239 = 1;
        v240 = (uint64_t)v379;
        do
        {
          v241 = *(_QWORD *)(v240 + v237 + 32) == *(_QWORD *)(v240 + v238)
              && *(unsigned __int8 *)(v240 + v237 + 40) == *(unsigned __int8 *)(v240 + v238 + 8)
              && *(_DWORD *)(v240 + v237 + 48) == *(_DWORD *)(v240 + v238 + 16)
              && *(_DWORD *)(v240 + v237 + 52) == *(_DWORD *)(v240 + v238 + 20)
              && *(_DWORD *)(v240 + v237 + 44) == *(_DWORD *)(v240 + v238 + 12);
          v240 -= 72;
          v239 &= v241;
          --v236;
        }
        while (v236);
        if (v239)
        {
LABEL_400:
          v242 = v380;
          v379 = 0;
          v380 = 0;
          v367[0] = (WTF *)v109;
          v367[1] = (WTF *)__PAIR64__(v107, v242);
LABEL_422:
          v262 = v356;
          if (v356 == (_DWORD)v382)
          {
            v262 = HIDWORD(v382);
            v352 = v381;
            v264 = &v381[8 * HIDWORD(v382)];
            *(_QWORD *)v264 = 0;
            *((_QWORD *)v264 + 1) = 0;
            v265 = *(_QWORD *)v263;
            *(_QWORD *)v263 = 0;
            *(_QWORD *)v264 = v265;
            LODWORD(v265) = *(_DWORD *)(v263 + 8);
            *(_DWORD *)(v263 + 8) = 0;
            v264[2] = v265;
            LODWORD(v265) = *(_DWORD *)(v263 + 12);
            *(_DWORD *)(v263 + 12) = 0;
            v264[3] = v265;
            *((_QWORD *)v264 + 2) = 0;
            *((_QWORD *)v264 + 3) = 0;
            v266 = *(_QWORD *)(v263 + 16);
            *(_QWORD *)(v263 + 16) = 0;
            *((_QWORD *)v264 + 2) = v266;
            LODWORD(v266) = *(_DWORD *)(v263 + 24);
            *(_DWORD *)(v263 + 24) = 0;
            v264[6] = v266;
            v267 = *(_DWORD *)(v263 + 28);
            *(_DWORD *)(v263 + 28) = 0;
          }
          else
          {
            v264 = &v352[8 * v356];
            *(_QWORD *)v264 = 0;
            *((_QWORD *)v264 + 1) = 0;
            v343 = v367[0];
            v367[0] = 0;
            *(_QWORD *)v264 = v343;
            LODWORD(v343) = v367[1];
            LODWORD(v367[1]) = 0;
            v264[2] = v343;
            LODWORD(v343) = HIDWORD(v367[1]);
            HIDWORD(v367[1]) = 0;
            v264[3] = v343;
            *((_QWORD *)v264 + 2) = 0;
            *((_QWORD *)v264 + 3) = 0;
            v344 = v368[0];
            v368[0] = 0;
            *((_QWORD *)v264 + 2) = v344;
            LODWORD(v344) = v368[1];
            LODWORD(v368[1]) = 0;
            v264[6] = v344;
            v267 = HIDWORD(v368[1]);
            HIDWORD(v368[1]) = 0;
          }
          v264[7] = v267;
          v356 = v262 + 1;
          HIDWORD(v382) = v262 + 1;
          HIDWORD(v380) = 0;
          v268 = v368[0];
          if (v368[0])
          {
            v368[0] = 0;
            LODWORD(v368[1]) = 0;
            WTF::fastFree((unint64_t)v268, (void *)a2, a3, a4, a5, a6, a7, a8);
          }
          v269 = v367[0];
          if (v367[0])
          {
            v367[0] = 0;
            LODWORD(v367[1]) = 0;
            WTF::fastFree((unint64_t)v269, (void *)a2, a3, a4, a5, a6, a7, a8);
          }
          goto LABEL_129;
        }
      }
      v366 = 0;
      v243 = 72 * HIDWORD(v380);
      do
      {
        WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::add<JSC::B3::Air::ShufflePair const&>((uint64_t)v361, (uint64_t *)&v366, v109 + 2, (uint64_t)v109);
        v109 = (__int128 *)((char *)v109 + 72);
        v243 -= 72;
      }
      while (v243);
      v244 = WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::find<WTF::IdentityHashTranslator<WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::B3::Air::Arg>>,JSC::B3::Air::Arg>((uint64_t)v366, (int32x2_t *)&v377);
      WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::take((uint64_t *)v361, (uint64_t *)&v366, v244);
      while (1)
      {
        if (HIDWORD(v367[1]) == LODWORD(v367[1]))
        {
          WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::ShufflePair&>((uint64_t)v367, (unint64_t)v361);
        }
        else
        {
          v245 = HIDWORD(v367[1]) + 1;
          v246 = (char *)v367[0] + 72 * HIDWORD(v367[1]);
          *(_OWORD *)v246 = *(_OWORD *)v361;
          v248 = v363;
          v247 = v364;
          v249 = v362;
          *((_QWORD *)v246 + 8) = v365;
          *((_OWORD *)v246 + 2) = v248;
          *((_OWORD *)v246 + 3) = v247;
          *((_OWORD *)v246 + 1) = v249;
          HIDWORD(v367[1]) = v245;
        }
        v250 = (uint64_t)v366;
        v251 = WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::find<WTF::IdentityHashTranslator<WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::B3::Air::Arg>>,JSC::B3::Air::Arg>((uint64_t)v366, (int32x2_t *)v361);
        v252 = v250 ? v250 + 104 * *(unsigned int *)(v250 - 4) : 0;
        if (v252 == v251)
          break;
        v253 = *(_OWORD *)(v251 + 48);
        v254 = *(_OWORD *)(v251 + 80);
        v363 = *(_OWORD *)(v251 + 64);
        v364 = v254;
        LOBYTE(v365) = *(_BYTE *)(v251 + 96);
        *(_OWORD *)v361 = *(_OWORD *)(v251 + 32);
        v362 = v253;
        WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::remove((uint64_t *)&v366, v251);
      }
      WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reverse((uint64_t)v367);
      if (HIDWORD(v380))
      {
        if (!v250)
        {
LABEL_421:
          v8 = (WTF *)v355;
          goto LABEL_422;
        }
        v255 = (unint64_t)v379;
        v256 = 72 * HIDWORD(v380);
        do
        {
          if (WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::B3::Air::Arg>>,JSC::B3::Air::Arg>(v250, (int32x2_t *)(v255 + 32)))
          {
            if (HIDWORD(v368[1]) == LODWORD(v368[1]))
            {
              WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::ShufflePair const&>((uint64_t)v368, v255);
            }
            else
            {
              v257 = HIDWORD(v368[1]) + 1;
              v258 = (char *)v368[0] + 72 * HIDWORD(v368[1]);
              *(_OWORD *)v258 = *(_OWORD *)v255;
              v260 = *(_OWORD *)(v255 + 32);
              v259 = *(_OWORD *)(v255 + 48);
              v261 = *(_OWORD *)(v255 + 16);
              *((_QWORD *)v258 + 8) = *(_QWORD *)(v255 + 64);
              *((_OWORD *)v258 + 2) = v260;
              *((_OWORD *)v258 + 3) = v259;
              *((_OWORD *)v258 + 1) = v261;
              HIDWORD(v368[1]) = v257;
            }
          }
          v255 += 72;
          v256 -= 72;
        }
        while (v256);
      }
      if (v250)
        WTF::fastFree(v250 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_421;
    }
  }
LABEL_160:
  v366 = v385;
  if (HIBYTE(dword_1ECF4C7B0) && (HIBYTE(word_1ECF4C79E) || *(_BYTE *)(*(_QWORD *)(v9 + 8) + 212)) && v385[0] == 1)
  {
    v119 = 113;
  }
  else if (v385[0])
  {
    v119 = 108;
  }
  else
  {
    v119 = 90;
  }
  v360 = v119;
  v379 = 0;
  v380 = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)&v377 = v8;
  *((_QWORD *)&v377 + 1) = a1;
  *(_QWORD *)&v378 = &v360;
  *((_QWORD *)&v378 + 1) = &v384;
  v367[0] = v8;
  v367[1] = (WTF *)a1;
  v368[0] = (WTF *)&v360;
  v368[1] = (WTF *)&v384;
  v361[0] = (WTF *)&v366;
  v361[1] = (WTF *)&v377;
  *(_QWORD *)&v362 = v9;
  *((_QWORD *)&v362 + 1) = v385;
  *(_QWORD *)&v363 = a1;
  *((_QWORD *)&v363 + 1) = &v384;
  *(_QWORD *)&v364 = v367;
  v359[0] = (uint64_t)v361;
  v359[1] = (uint64_t)v8;
  v120 = v383;
  if (!v383)
  {
    v123 = 0;
    LODWORD(v121) = 0;
LABEL_195:
    v122 = v383 + 48 * v121;
    goto LABEL_196;
  }
  v121 = *(unsigned int *)(v383 - 4);
  v122 = v383 + 48 * v121;
  if (!*(_DWORD *)(v383 - 12))
  {
    v123 = v383 + 48 * v121;
    goto LABEL_195;
  }
  v123 = v383;
  if ((_DWORD)v121)
  {
    v124 = 48 * v121;
    v123 = v383;
    while (1)
    {
      v125 = !*(_QWORD *)v123 && *(_BYTE *)(v123 + 8) == 0;
      v126 = v125;
      v128 = *(_DWORD *)(v123 + 16);
      v127 = *(_DWORD *)(v123 + 20);
      v129 = v126 && v128 == 0;
      if (!v129 || v127 != 0)
      {
        if (v128 != 0x7FFFFFFF)
          v126 = 0;
        if (!v126 || v127 != 0)
          break;
      }
      if (*(_DWORD *)(v123 + 12) != 1)
        break;
      v123 += 48;
      v124 -= 48;
      if (!v124)
      {
        v123 = v122;
        break;
      }
    }
  }
LABEL_196:
  if (v383)
    v132 = v383 + 48 * *(unsigned int *)(v383 - 4);
  else
    v132 = 0;
  v357 = a1;
  v133 = 0;
  v134 = 0;
  if (v132 != v123)
  {
    while (1)
    {
      v135 = *(_DWORD *)(v123 + 44);
      if (!v135)
      {
        __break(0xC471u);
        JUMPOUT(0x1980A69C4);
      }
      if (*(_BYTE *)(*(_QWORD *)(v123 + 32) + 72 * v135 - 32) != 1)
        goto LABEL_211;
      v136 = v133;
      v137 = v135 - 1;
      v138 = 72 * (v135 - 1);
      do
      {
        if (*(_DWORD *)(v123 + 44) <= v137)
        {
          __break(0xC471u);
          JUMPOUT(0x1980A69B4);
        }
        JSC::B3::Air::emitShuffle(JSC::B3::Air::Code &,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::array<JSC::B3::Air::Arg,2ul>,JSC::B3::Bank,JSC::B3::Value *)::$_5::operator()((unsigned __int8 ***)v361, (unsigned __int8 *)(*(_QWORD *)(v123 + 32) + v138), 0, a4, a5, a6, a7, a8);
        v138 -= 72;
        --v137;
      }
      while (v137 != -1);
      v139 = *(_DWORD *)(v123 + 44);
      if (!v139)
      {
        __break(0xC471u);
        JUMPOUT(0x1980A69F4);
      }
      v140 = *(_QWORD *)(v123 + 32) + 72 * v139;
      v141 = *(_QWORD *)(v140 - 40);
      v142 = *(unsigned __int8 *)(v140 - 32);
      *(_OWORD *)v373 = *(_OWORD *)(v140 - 31);
      *(_QWORD *)&v373[15] = *(_QWORD *)(v140 - 16);
      v133 = v136;
      a1 = v357;
      if (v142 != 1)
        goto LABEL_211;
      if (*(_BYTE *)(v355 + 8) != 1)
        break;
      if (*(_BYTE *)(v355 + 40) != 1)
      {
        v143 = 1;
LABEL_210:
        v144 = v355 + 32 * v143;
        *(_QWORD *)v144 = v141;
        *(_BYTE *)(v144 + 8) = 1;
        *(_OWORD *)(v144 + 9) = *(_OWORD *)v373;
      }
LABEL_211:
      if (v134 == (_DWORD)v380)
      {
        v146 = WTF::Vector<WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v379, v134 + 1, a1);
        v133 = (uint64_t)v379;
        v145 = (uint64_t)&v379[HIDWORD(v380)];
      }
      else
      {
        v145 = v133 + 16 * v134;
        v146 = a1;
      }
      *(_QWORD *)v145 = 0;
      *(_QWORD *)(v145 + 8) = 0;
      v147 = *(_QWORD *)v146;
      *(_QWORD *)v146 = 0;
      *(_QWORD *)v145 = v147;
      LODWORD(v147) = *(_DWORD *)(v146 + 8);
      *(_DWORD *)(v146 + 8) = 0;
      *(_DWORD *)(v145 + 8) = v147;
      LODWORD(v147) = *(_DWORD *)(v146 + 12);
      *(_DWORD *)(v146 + 12) = 0;
      *(_DWORD *)(v145 + 12) = v147;
      v134 = ++HIDWORD(v380);
      v148 = v123 + 48;
      v123 = v122;
      if (v148 != v122)
      {
        v123 = v148;
        while (1)
        {
          v149 = !*(_QWORD *)v123 && *(_BYTE *)(v123 + 8) == 0;
          v150 = v149;
          v152 = *(_DWORD *)(v123 + 16);
          v151 = *(_DWORD *)(v123 + 20);
          v153 = v150 && v152 == 0;
          if (!v153 || v151 != 0)
          {
            if (v152 != 0x7FFFFFFF)
              v150 = 0;
            if (!v150 || v151 != 0)
              break;
          }
          if (*(_DWORD *)(v123 + 12) != 1)
            break;
          v123 += 48;
          if (v123 == v122)
          {
            v123 = v122;
            break;
          }
        }
      }
      if (v123 == v132)
        goto LABEL_241;
    }
    v143 = 0;
    goto LABEL_210;
  }
LABEL_241:
  if (!v120)
  {
    v158 = 0;
    LODWORD(v156) = 0;
LABEL_270:
    v157 = v120 + 48 * v156;
    goto LABEL_271;
  }
  v156 = *(unsigned int *)(v120 - 4);
  v157 = v120 + 48 * v156;
  if (!*(_DWORD *)(v120 - 12))
  {
    v158 = v120 + 48 * v156;
    goto LABEL_270;
  }
  v158 = v120;
  if ((_DWORD)v156)
  {
    v159 = 48 * v156;
    v158 = v120;
    while (1)
    {
      v160 = !*(_QWORD *)v158 && *(_BYTE *)(v158 + 8) == 0;
      v161 = v160;
      v163 = *(_DWORD *)(v158 + 16);
      v162 = *(_DWORD *)(v158 + 20);
      v164 = v161 && v163 == 0;
      if (!v164 || v162 != 0)
      {
        if (v163 != 0x7FFFFFFF)
          v161 = 0;
        if (!v161 || v162 != 0)
          break;
      }
      if (*(_DWORD *)(v158 + 12) != 1)
        break;
      v158 += 48;
      v159 -= 48;
      if (!v159)
      {
        v158 = v157;
        break;
      }
    }
  }
LABEL_271:
  if (v120)
    v120 += 48 * *(unsigned int *)(v120 - 4);
  while (v158 != v120)
  {
    v167 = *(_DWORD *)(v158 + 44);
    if (!v167)
    {
      __break(0xC471u);
      JUMPOUT(0x1980A69CCLL);
    }
    if (*(_BYTE *)(*(_QWORD *)(v158 + 32) + 72 * v167 - 32) == 1)
      goto LABEL_276;
    v179 = v133;
    v180 = v167 - 1;
    v181 = 72 * (v167 - 1);
    do
    {
      if (*(_DWORD *)(v158 + 44) <= v180)
      {
        __break(0xC471u);
        JUMPOUT(0x1980A69BCLL);
      }
      JSC::B3::Air::emitShuffle(JSC::B3::Air::Code &,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::array<JSC::B3::Air::Arg,2ul>,JSC::B3::Bank,JSC::B3::Value *)::$_5::operator()((unsigned __int8 ***)v361, (unsigned __int8 *)(*(_QWORD *)(v158 + 32) + v181), 0, a4, a5, a6, a7, a8);
      v181 -= 72;
      --v180;
    }
    while (v180 != -1);
    v182 = *(_DWORD *)(v158 + 44);
    if (!v182)
    {
      __break(0xC471u);
      JUMPOUT(0x1980A69FCLL);
    }
    v183 = *(_QWORD *)(v158 + 32) + 72 * v182;
    v184 = *(_QWORD *)(v183 - 40);
    v185 = *(unsigned __int8 *)(v183 - 32);
    *(_OWORD *)v373 = *(_OWORD *)(v183 - 31);
    *(_QWORD *)&v373[15] = *(_QWORD *)(v183 - 16);
    v133 = v179;
    a1 = v357;
    if (v185 != 1)
      goto LABEL_276;
    if (*(_BYTE *)(v355 + 8) == 1)
    {
      if (*(_BYTE *)(v355 + 40) == 1)
        goto LABEL_276;
      v186 = 1;
    }
    else
    {
      v186 = 0;
    }
    v187 = v355 + 32 * v186;
    *(_QWORD *)v187 = v184;
    *(_BYTE *)(v187 + 8) = 1;
    *(_OWORD *)(v187 + 9) = *(_OWORD *)v373;
LABEL_276:
    if (v134 == (_DWORD)v380)
    {
      v169 = WTF::Vector<WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v379, v134 + 1, a1);
      v133 = (uint64_t)v379;
      v168 = (uint64_t)&v379[HIDWORD(v380)];
    }
    else
    {
      v168 = v133 + 16 * v134;
      v169 = a1;
    }
    *(_QWORD *)v168 = 0;
    *(_QWORD *)(v168 + 8) = 0;
    v170 = *(_QWORD *)v169;
    *(_QWORD *)v169 = 0;
    *(_QWORD *)v168 = v170;
    LODWORD(v170) = *(_DWORD *)(v169 + 8);
    *(_DWORD *)(v169 + 8) = 0;
    *(_DWORD *)(v168 + 8) = v170;
    LODWORD(v170) = *(_DWORD *)(v169 + 12);
    *(_DWORD *)(v169 + 12) = 0;
    *(_DWORD *)(v168 + 12) = v170;
    v134 = ++HIDWORD(v380);
    v171 = v158 + 48;
    v158 = v157;
    if (v171 != v157)
    {
      v158 = v171;
      while (1)
      {
        v172 = !*(_QWORD *)v158 && *(_BYTE *)(v158 + 8) == 0;
        v173 = v172;
        v175 = *(_DWORD *)(v158 + 16);
        v174 = *(_DWORD *)(v158 + 20);
        v176 = v173 && v175 == 0;
        if (!v176 || v174 != 0)
        {
          if (v175 != 0x7FFFFFFF)
            v173 = 0;
          if (!v173 || v174 != 0)
            break;
        }
        if (*(_DWORD *)(v158 + 12) != 1)
          break;
        v158 += 48;
        if (v158 == v157)
        {
          v158 = v157;
          break;
        }
      }
    }
  }
  if (HIDWORD(v382))
  {
    v274 = v381;
    v275 = v354 + 32;
    v276 = v354 + 16;
    v345 = v354 + 32;
    v346 = &v381[8 * HIDWORD(v382)];
    v347 = v354 + 16;
    while (1)
    {
      if (v274[7])
        JSC::B3::Air::emitShuffle(JSC::B3::Air::Code &,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::array<JSC::B3::Air::Arg,2ul>,JSC::B3::Bank,JSC::B3::Value *)::$_6::operator()((uint64_t)v359, (uint64_t)(v274 + 4), a3, a4, a5, a6, a7, a8);
      v277 = v275;
      if (!v385[0])
      {
        v278 = v274[3];
        v277 = v276;
        if ((_DWORD)v278)
        {
          v279 = 72 * v278;
          v280 = (char *)(*(_QWORD *)v274 + 64);
          do
          {
            v281 = *v280;
            v280 += 72;
            if ((v281 & 0xFE) != 2)
              goto LABEL_522;
            v279 -= 72;
          }
          while (v279);
          v277 = v276;
        }
      }
      v282 = *(unsigned int *)(v277 + 12);
      if (!(_DWORD)v282)
        goto LABEL_474;
      v283 = *(char **)v277;
      v284 = v274[3];
      if (v284)
        break;
      v333 = *v283;
      v334 = v333 & 0x7F;
      if (v334 == 127)
        goto LABEL_474;
      if ((v333 & 0x60) != 0)
        v288 = 31 - v334;
      else
        v288 = v334 + 1;
LABEL_475:
      v298 = JSC::B3::Air::emitShuffle(JSC::B3::Air::Code &,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::array<JSC::B3::Air::Arg,2ul>,JSC::B3::Bank,JSC::B3::Value *)::$_3::operator()((uint64_t)&v377, 0, v288, a4, a5, a6, a7, a8);
      v304 = v298;
      if (v298)
      {
        v312 = 0;
        v311 = 0;
        v305 = 0;
        v309 = 1;
        v307 = 2;
        v310 = v298;
        v306 = 1;
        v308 = v354;
      }
      else
      {
        v305 = *(_QWORD *)v355;
        v306 = *(_BYTE *)(v355 + 8);
        v307 = *(_BYTE *)(v355 + 9);
        v308 = *(unsigned __int16 *)(v355 + 10);
        v309 = *(_DWORD *)(v355 + 12);
        v310 = *(_DWORD *)(v355 + 16);
        v311 = *(_DWORD *)(v355 + 20);
        v312 = *(_BYTE *)(v355 + 24);
        *(_DWORD *)v358 = *(_DWORD *)(v355 + 25);
        *(_DWORD *)&v358[3] = *(_DWORD *)(v355 + 28);
      }
      v313 = v274[3];
      if (!v313)
      {
        __break(0xC471u);
        JUMPOUT(0x1980A6A04);
      }
      v314 = *(_QWORD *)v274 + 72 * v313;
      v315 = *(_BYTE *)(*(_QWORD *)v274 + 64);
      v316 = *(_OWORD *)(v314 - 24);
      *(_OWORD *)v373 = *(_OWORD *)(v314 - 40);
      *(_OWORD *)&v373[16] = v316;
      v317 = v305;
      *(_QWORD *)&v374 = v305;
      v348 = v310;
      v349 = v306;
      BYTE8(v374) = v306;
      v350 = v312;
      v351 = v307;
      BYTE9(v374) = v307;
      LODWORD(v354) = v308;
      WORD5(v374) = v308;
      v353 = v309;
      HIDWORD(v374) = v309;
      *(_QWORD *)&v375 = __PAIR64__(v311, v310);
      v318 = v311;
      BYTE8(v375) = v312;
      *(_DWORD *)((char *)&v375 + 9) = *(_DWORD *)v358;
      HIDWORD(v375) = *(_DWORD *)&v358[3];
      v376 = v315;
      JSC::B3::Air::emitShuffle(JSC::B3::Air::Code &,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::array<JSC::B3::Air::Arg,2ul>,JSC::B3::Bank,JSC::B3::Value *)::$_5::operator()((unsigned __int8 ***)v361, v373, (void *)1, v299, v300, v301, v302, v303);
      v324 = v274[3];
      if (v324 >= 2)
      {
        v325 = v133;
        v326 = 72 * (v324 - 1);
        do
        {
          if (v274[3] <= --v324)
          {
            __break(0xC471u);
            JUMPOUT(0x1980A6A0CLL);
          }
          JSC::B3::Air::emitShuffle(JSC::B3::Air::Code &,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::array<JSC::B3::Air::Arg,2ul>,JSC::B3::Bank,JSC::B3::Value *)::$_5::operator()((unsigned __int8 ***)v361, (unsigned __int8 *)(*(_QWORD *)v274 + v326), (void *)1, v319, v320, v321, v322, v323);
          v326 -= 72;
        }
        while (v324 > 1);
        v324 = v274[3];
        v133 = v325;
        a1 = v357;
      }
      if (!v324)
      {
LABEL_522:
        __break(0xC471u);
        JUMPOUT(0x1980A6968);
      }
      v327 = *(_QWORD *)v274;
      v328 = *(_BYTE *)(*(_QWORD *)v274 + 64);
      *(_QWORD *)v373 = v317;
      v373[8] = v349;
      v373[9] = v351;
      *(_WORD *)&v373[10] = v354;
      *(_DWORD *)&v373[12] = v353;
      *(_DWORD *)&v373[16] = v348;
      *(_DWORD *)&v373[20] = v318;
      v373[24] = v350;
      *(_DWORD *)&v373[25] = *(_DWORD *)v358;
      *(_DWORD *)&v373[28] = *(_DWORD *)&v358[3];
      v329 = *(_OWORD *)(v327 + 48);
      v374 = *(_OWORD *)(v327 + 32);
      v375 = v329;
      v376 = v328;
      JSC::B3::Air::emitShuffle(JSC::B3::Air::Code &,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::array<JSC::B3::Air::Arg,2ul>,JSC::B3::Bank,JSC::B3::Value *)::$_5::operator()((unsigned __int8 ***)v361, v373, (void *)1, v319, v320, v321, v322, v323);
      if (v304)
        JSC::B3::Air::emitShuffle(JSC::B3::Air::Code &,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::array<JSC::B3::Air::Arg,2ul>,JSC::B3::Bank,JSC::B3::Value *)::$_4::operator()((uint64_t *)v367, 0, v304, a4, a5, a6, a7, a8);
      v275 = v345;
      if (v134 == (_DWORD)v380)
      {
        v331 = WTF::Vector<WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v379, v134 + 1, a1);
        v133 = (uint64_t)v379;
        v330 = (uint64_t)&v379[HIDWORD(v380)];
      }
      else
      {
        v330 = v133 + 16 * v134;
        v331 = a1;
      }
      *(_QWORD *)v330 = 0;
      *(_QWORD *)(v330 + 8) = 0;
      v332 = *(_QWORD *)v331;
      *(_QWORD *)v331 = 0;
      *(_QWORD *)v330 = v332;
      LODWORD(v332) = *(_DWORD *)(v331 + 8);
      *(_DWORD *)(v331 + 8) = 0;
      *(_DWORD *)(v330 + 8) = v332;
      LODWORD(v332) = *(_DWORD *)(v331 + 12);
      *(_DWORD *)(v331 + 12) = 0;
      *(_DWORD *)(v330 + 12) = v332;
      v134 = ++HIDWORD(v380);
      v274 += 8;
      v276 = v347;
      if (v274 == v346)
        goto LABEL_317;
    }
    v285 = &v283[v282];
    v286 = 72 * v284 - 72;
    do
    {
      v287 = *v283 & 0x7F;
      if (v287 == 127)
      {
        v288 = 0;
      }
      else if ((*v283 & 0x60) != 0)
      {
        v288 = (char)(31 - v287);
      }
      else
      {
        v288 = v287 + 1;
      }
      v289 = v286;
      v290 = (_DWORD *)(*(_QWORD *)v274 + 52);
      do
      {
        v291 = *((char *)v290 - 44);
        v292 = *((char *)v290 - 12);
        v293 = *(v290 - 1);
        if (v291 <= 0xD)
        {
          v294 = *(v290 - 9);
          if (((1 << v291) & 0x31C2) != 0)
          {
            if (v294 == v288)
              goto LABEL_473;
          }
          else if (v291 == 11 && (*(v290 - 8) == v288 || v294 == v288))
          {
            goto LABEL_473;
          }
        }
        v295 = 0;
        if (v292 <= 0xD)
        {
          if (((1 << v292) & 0x31C2) != 0)
          {
            if (v293 == v288)
              goto LABEL_473;
            v295 = 0;
          }
          else if (v292 == 11)
          {
            v295 = v293 == v288;
            if (*v290 == v288)
              goto LABEL_473;
          }
        }
        if (v295)
          break;
        v290 += 18;
        v296 = v289;
        v289 -= 72;
      }
      while (v296);
      if (!v295)
        goto LABEL_475;
LABEL_473:
      ++v283;
    }
    while (v283 != v285);
LABEL_474:
    v288 = 0;
    goto LABEL_475;
  }
LABEL_317:
  if (v134)
  {
    v188 = (unint64_t)v379;
    v189 = v134;
    do
    {
      v190 = v188 + 16 * --v189;
      v191 = *(unsigned int *)(v190 + 12);
      if ((_DWORD)v191)
      {
        v192 = *(_QWORD *)v190;
        v194 = *(unsigned int *)(a1 + 8);
        v193 = *(unsigned int *)(a1 + 12);
        v195 = v193 + v191;
        if (v193 + v191 > v194)
        {
          v206 = v194 + (v194 >> 2);
          v207 = v206 >= 0x10 ? v206 + 1 : 16;
          v208 = v207 <= v195 ? v195 : v207;
          WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v208);
          v193 = *(unsigned int *)(a1 + 12);
          if (v195 < v193)
          {
            __break(0xC471u);
            JUMPOUT(0x1980A69ECLL);
          }
        }
        v196 = *(_QWORD *)a1 + (v193 << 7);
        v197 = v192 + (v191 << 7);
        do
        {
          v198 = *(unsigned int *)(v192 + 12);
          v199 = (_OWORD *)(v196 + 16);
          *(_QWORD *)v196 = v196 + 16;
          *(_DWORD *)(v196 + 8) = 3;
          *(_DWORD *)(v196 + 12) = v198;
          if (v198 >= 4)
          {
            if (v198 >> 27)
            {
              __break(0xC471u);
              JUMPOUT(0x1980A69D4);
            }
            v199 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v198));
            *(_DWORD *)(v196 + 8) = v198;
            *(_QWORD *)v196 = v199;
          }
          v200 = *(unsigned int *)(v192 + 12);
          if ((_DWORD)v200)
          {
            v201 = *(__int128 **)v192;
            v202 = 32 * v200;
            do
            {
              v203 = *v201;
              v204 = v201[1];
              v201 += 2;
              *v199 = v203;
              v199[1] = v204;
              v199 += 2;
              v202 -= 32;
            }
            while (v202);
          }
          v205 = *(_QWORD *)(v192 + 112);
          *(_DWORD *)(v196 + 119) = *(_DWORD *)(v192 + 119);
          *(_QWORD *)(v196 + 112) = v205;
          v196 += 128;
          v192 += 128;
        }
        while (v192 != v197);
        *(_DWORD *)(a1 + 12) = v195;
      }
    }
    while (v189);
    v209 = v188 + 16 * v134;
    v210 = v188;
    do
    {
      v211 = *(unsigned int *)(v210 + 12);
      v212 = *(_QWORD *)v210;
      if ((_DWORD)v211)
      {
        v213 = v211 << 7;
        v214 = v212 + 16;
        do
        {
          v215 = *(_QWORD *)(v214 - 16);
          if (v214 != v215 && v215 != 0)
          {
            *(_QWORD *)(v214 - 16) = 0;
            *(_DWORD *)(v214 - 8) = 0;
            WTF::fastFree(v215, (void *)a2, a3, a4, a5, a6, a7, a8);
          }
          v214 += 128;
          v213 -= 128;
        }
        while (v213);
        v212 = *(_QWORD *)v210;
      }
      if (v212)
      {
        *(_QWORD *)v210 = 0;
        *(_DWORD *)(v210 + 8) = 0;
        WTF::fastFree(v212, (void *)a2, a3, a4, a5, a6, a7, a8);
      }
      v210 += 16;
    }
    while (v210 != v209);
  }
  else
  {
    v188 = (unint64_t)v379;
  }
  if (v188)
    WTF::fastFree(v188, (void *)a2, a3, a4, a5, a6, a7, a8);
  v217 = (unint64_t)v381;
  if (HIDWORD(v382))
  {
    v270 = 32 * HIDWORD(v382);
    v271 = v381 + 4;
    do
    {
      v272 = *(_QWORD *)v271;
      if (*(_QWORD *)v271)
      {
        *(_QWORD *)v271 = 0;
        v271[2] = 0;
        WTF::fastFree(v272, (void *)a2, a3, a4, a5, a6, a7, a8);
      }
      v273 = *((_QWORD *)v271 - 2);
      if (v273)
      {
        *((_QWORD *)v271 - 2) = 0;
        *(v271 - 2) = 0;
        WTF::fastFree(v273, (void *)a2, a3, a4, a5, a6, a7, a8);
      }
      v271 += 8;
      v270 -= 32;
    }
    while (v270);
  }
  if (v217)
    WTF::fastFree(v217, (void *)a2, a3, a4, a5, a6, a7, a8);
  v218 = v383;
  if (v383)
  {
    v219 = *(unsigned int *)(v383 - 4);
    if ((_DWORD)v219)
    {
      v220 = v383 + 20;
      do
      {
        if (*(_QWORD *)(v220 - 20))
          v221 = 0;
        else
          v221 = *(_BYTE *)(v220 - 12) == 0;
        v223 = v221 && *(_DWORD *)(v220 - 4) == 0x7FFFFFFF && *(_DWORD *)v220 == 0;
        if (!v223 || *(_DWORD *)(v220 - 8) != 1)
        {
          v224 = *(_QWORD *)(v220 + 12);
          if (v224)
          {
            *(_QWORD *)(v220 + 12) = 0;
            *(_DWORD *)(v220 + 20) = 0;
            WTF::fastFree(v224, (void *)a2, a3, a4, a5, a6, a7, a8);
          }
        }
        v220 += 48;
        --v219;
      }
      while (v219);
    }
    WTF::fastFree(v218 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
}

void WTF::HashMap<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t *a4)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  int8x8_t v17;
  int8x8_t v18;
  int32x2_t v19;
  int8x8_t v20;
  int8x8_t v21;
  __int32 v22;
  int i;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  unsigned int v53;
  __int128 v54;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *(_QWORD *)a3 + ~(*(_QWORD *)a3 << 32);
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = ((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27));
  v16 = *((_DWORD *)a3 + 3);
  v17 = (int8x8_t)vadd_s32((int32x2_t)a3[1], (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32((int32x2_t)a3[1], 0xFuLL)));
  v18 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v17, 0xAuLL), v17), (int32x2_t)0x900000009);
  v19 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v18, 6uLL), v18);
  v20 = (int8x8_t)vadd_s32(v19, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v19, 0xBuLL)));
  v21 = veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v20, 0x10uLL), v20);
  v22 = v16 + *((char *)a3 + 8) + v21.i32[0] + v15 + v21.i32[1];
  for (i = 1; ; ++i)
  {
    v24 = v22 & v10;
    v25 = v8 + 48 * v24;
    v26 = *(_QWORD *)v25;
    v27 = *(unsigned __int8 *)(v25 + 8);
    if (*(_QWORD *)v25)
      v28 = 0;
    else
      v28 = (_DWORD)v27 == 0;
    v29 = v28;
    v31 = *(unsigned int *)(v25 + 16);
    v30 = *(unsigned int *)(v25 + 20);
    v33 = (_DWORD)v29 == 1 && (_DWORD)v31 == 0 && (_DWORD)v30 == 0;
    if (v33 && *(_DWORD *)(v25 + 12) == 1)
    {
      if (v11)
      {
        *(_QWORD *)v11 = 0;
        *(_WORD *)(v11 + 8) = 512;
        *(_DWORD *)(v11 + 12) = 1;
        *(_QWORD *)(v11 + 16) = 0;
        *(_BYTE *)(v11 + 24) = 0;
        *(_QWORD *)(v11 + 32) = 0;
        v40 = (_QWORD *)(v11 + 32);
        *(_QWORD *)(v11 + 40) = 0;
        --*(_DWORD *)(*a2 - 16);
        v54 = *a3;
        *(_OWORD *)(v11 + 9) = *(__int128 *)((char *)a3 + 9);
        *(_OWORD *)v11 = v54;
      }
      else
      {
        v38 = v8 + 48 * v24;
        v41 = *(_QWORD *)(v38 + 32);
        v40 = (_QWORD *)(v38 + 32);
        v39 = v41;
        v42 = *(__int128 *)((char *)a3 + 9);
        *(_OWORD *)v25 = *a3;
        *(_OWORD *)(v25 + 9) = v42;
        if (v41)
        {
          *v40 = 0;
          *(_DWORD *)(v8 + 48 * v24 + 40) = 0;
          WTF::fastFree(v39, (void *)0x7FFFFFFF, 0, v29, v30, v31, v26, v27);
        }
        v11 = v25;
      }
      v43 = *a4;
      *a4 = 0;
      *v40 = v43;
      LODWORD(v43) = *((_DWORD *)a4 + 2);
      *((_DWORD *)a4 + 2) = 0;
      *(_DWORD *)(v11 + 40) = v43;
      LODWORD(v43) = *((_DWORD *)a4 + 3);
      *((_DWORD *)a4 + 3) = 0;
      *(_DWORD *)(v11 + 44) = v43;
      v44 = *a2;
      if (*a2)
        v45 = *(_DWORD *)(v44 - 12) + 1;
      else
        v45 = 1;
      *(_DWORD *)(v44 - 12) = v45;
      v46 = *a2;
      if (*a2)
        v47 = *(_DWORD *)(v46 - 12);
      else
        v47 = 0;
      v48 = (*(_DWORD *)(v46 - 16) + v47);
      v49 = *(unsigned int *)(v46 - 4);
      if (v49 > 0x400)
      {
        if (v49 > 2 * v48)
          goto LABEL_50;
      }
      else
      {
        if (3 * v49 > 4 * v48)
        {
LABEL_50:
          v50 = v46 + 48 * v49;
          v51 = 1;
          v25 = v11;
          goto LABEL_51;
        }
        if (!(_DWORD)v49)
        {
          v52 = 8;
          goto LABEL_58;
        }
      }
      v52 = (_DWORD)v49 << (6 * *(_DWORD *)(v46 - 12) >= (2 * v49));
LABEL_58:
      v11 = WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::rehash(a2, v52, (int32x2_t *)v11);
      v46 = *a2;
      if (*a2)
        LODWORD(v49) = *(_DWORD *)(v46 - 4);
      else
        LODWORD(v49) = 0;
      goto LABEL_50;
    }
    v34 = v26 == *(_QWORD *)a3 && (_DWORD)v27 == *((unsigned __int8 *)a3 + 8);
    v35 = v34 && (_DWORD)v31 == *((_QWORD *)a3 + 2);
    v36 = v35 && (_DWORD)v30 == HIDWORD(*((_QWORD *)a3 + 2));
    if (v36 && *(_DWORD *)(v25 + 12) == v16)
      break;
    if ((_DWORD)v31 != 0x7FFFFFFF)
      LODWORD(v29) = 0;
    if ((_DWORD)v29 == 1 && (_DWORD)v30 == 0 && *(_DWORD *)(v25 + 12) == 1)
      v11 = v8 + 48 * v24;
    v22 = i + v24;
  }
  if ((v9 & 1) != 0)
    v53 = 0;
  else
    v53 = *(_DWORD *)(v8 - 4);
  v51 = 0;
  v50 = v8 + 48 * v53;
LABEL_51:
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v50;
  *(_BYTE *)(a1 + 16) = v51;
}

uint64_t WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::add<JSC::B3::Air::ShufflePair const&>(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  const JSC::B3::Air::Arg *v9;
  uint64_t v10;
  int i;
  int v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v38;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(unsigned int *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::IdentityHashTranslator<WTF::HashTraits<JSC::B3::Air::Arg>,WTF::DefaultHash<JSC::B3::Air::Arg>>::hash<JSC::B3::Air::Arg>((int32x2_t *)a3);
  v10 = 0;
  for (i = 1; ; ++i)
  {
    v12 = result & v7;
    v13 = v6 + 104 * (result & v7);
    if (*(_QWORD *)v13)
      v14 = 0;
    else
      v14 = *(_BYTE *)(v13 + 8) == 0;
    v15 = v14;
    v17 = *(_DWORD *)(v13 + 16);
    v16 = *(_DWORD *)(v13 + 20);
    v19 = v15 == 1 && v17 == 0 && v16 == 0;
    if (v19 && *(_DWORD *)(v13 + 12) == 1)
    {
      if (v10)
      {
        v13 = v10;
        result = WTF::KeyValuePairHashTraits<WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>>::constructEmptyValue<WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits>(v10);
        --*(_DWORD *)(*a2 - 16);
      }
      v24 = *a3;
      *(_OWORD *)(v13 + 9) = *(__int128 *)((char *)a3 + 9);
      *(_OWORD *)v13 = v24;
      v26 = *(_OWORD *)(a4 + 32);
      v25 = *(_OWORD *)(a4 + 48);
      v27 = *(_OWORD *)(a4 + 16);
      *(_BYTE *)(v13 + 96) = *(_BYTE *)(a4 + 64);
      *(_OWORD *)(v13 + 64) = v26;
      *(_OWORD *)(v13 + 80) = v25;
      *(_OWORD *)(v13 + 48) = v27;
      *(_OWORD *)(v13 + 32) = *(_OWORD *)a4;
      v28 = *a2;
      v29 = a1;
      if (*a2)
        v30 = *(_DWORD *)(v28 - 12) + 1;
      else
        v30 = 1;
      *(_DWORD *)(v28 - 12) = v30;
      v31 = *a2;
      if (*a2)
        v32 = *(_DWORD *)(v31 - 12);
      else
        v32 = 0;
      v33 = (*(_DWORD *)(v31 - 16) + v32);
      v34 = *(unsigned int *)(v31 - 4);
      if (v34 > 0x400)
      {
        if (v34 > 2 * v33)
          goto LABEL_40;
      }
      else if (3 * v34 > 4 * v33)
      {
LABEL_40:
        v35 = v31 + 104 * v34;
        v36 = 1;
        goto LABEL_41;
      }
      result = WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::expand(a2, (int32x2_t *)v13);
      v13 = result;
      v31 = *a2;
      if (*a2)
        LODWORD(v34) = *(_DWORD *)(v31 - 4);
      else
        LODWORD(v34) = 0;
      goto LABEL_40;
    }
    v38 = a4;
    v20 = v7;
    v21 = v10;
    result = JSC::B3::Air::ArgHash::equal((JSC::B3::Air::ArgHash *)v13, (const JSC::B3::Air::Arg *)a3, v9);
    if ((_DWORD)result)
      break;
    if (v17 == 0x7FFFFFFF)
      v22 = v15;
    else
      v22 = 0;
    if (v22 == 1 && v16 == 0)
    {
      if (*(_DWORD *)(v13 + 12) == 1)
        v10 = v13;
      else
        v10 = v21;
    }
    else
    {
      v10 = v21;
    }
    result = (i + v12);
    v7 = v20;
    a4 = v38;
  }
  v36 = 0;
  v35 = v6 + 104 * *(unsigned int *)(v6 - 4);
  v29 = a1;
LABEL_41:
  *(_QWORD *)v29 = v13;
  *(_QWORD *)(v29 + 8) = v35;
  *(_BYTE *)(v29 + 16) = v36;
  return result;
}

uint64_t *WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::remove(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  if (*result)
  {
    v2 = *result + 104 * *(unsigned int *)(*result - 4);
    if (v2 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v2 = 0;
  }
  if (v2 != a2)
    return WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::remove(result, a2);
  return result;
}

__n128 WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reverse(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __n128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  LODWORD(v1) = *(_DWORD *)(a1 + 12);
  if (v1 >= 2)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    do
    {
      if (v4 >= v1 || (v5 = v1, v6 = v3 + (v1 - 1), v6 >= v5))
      {
        __break(0xC471u);
        JUMPOUT(0x1980A7074);
      }
      v7 = *(_QWORD *)a1 + v2;
      v8 = *(_QWORD *)a1 + 72 * v6;
      v15 = *(_OWORD *)(v7 + 32);
      v16 = *(_OWORD *)(v7 + 48);
      v17 = *(_QWORD *)(v7 + 64);
      v13 = *(__n128 *)v7;
      v14 = *(_OWORD *)(v7 + 16);
      *(_OWORD *)v7 = *(_OWORD *)v8;
      v10 = *(_OWORD *)(v8 + 32);
      v9 = *(_OWORD *)(v8 + 48);
      v11 = *(_OWORD *)(v8 + 16);
      *(_BYTE *)(v7 + 64) = *(_BYTE *)(v8 + 64);
      *(_OWORD *)(v7 + 32) = v10;
      *(_OWORD *)(v7 + 48) = v9;
      *(_OWORD *)(v7 + 16) = v11;
      *(_BYTE *)(v8 + 64) = v17;
      *(_OWORD *)(v8 + 32) = v15;
      *(_OWORD *)(v8 + 48) = v16;
      result = v13;
      *(__n128 *)v8 = v13;
      *(_OWORD *)(v8 + 16) = v14;
      ++v4;
      v1 = *(unsigned int *)(a1 + 12);
      --v3;
      v2 += 72;
    }
    while (v4 < v1 >> 1);
  }
  return result;
}

void JSC::B3::Air::`anonymous namespace'::Rotate::~Rotate(JSC::B3::Air::_anonymous_namespace_::Rotate *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;

  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
}

__n128 JSC::B3::Air::emitShuffle(JSC::B3::Air::Code &,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::array<JSC::B3::Air::Arg,2ul>,JSC::B3::Bank,JSC::B3::Value *)::$_6::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __n128 result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[23];

  v8 = *(_DWORD *)(a2 + 12);
  if (!v8)
    goto LABEL_13;
  v11 = v8 - 1;
  v12 = 72 * (v8 - 1);
  do
  {
    if (*(_DWORD *)(a2 + 12) <= v11)
      goto LABEL_13;
    JSC::B3::Air::emitShuffle(JSC::B3::Air::Code &,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::array<JSC::B3::Air::Arg,2ul>,JSC::B3::Bank,JSC::B3::Value *)::$_5::operator()(*(unsigned __int8 ****)a1, (unsigned __int8 *)(*(_QWORD *)a2 + v12), 0, a4, a5, a6, a7, a8);
    v12 -= 72;
    --v11;
  }
  while (v11 != -1);
  v13 = *(_DWORD *)(a2 + 12);
  if (!v13)
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x1980A71BCLL);
  }
  v14 = *(_QWORD *)a2 + 72 * v13;
  v15 = *(_QWORD *)(v14 - 40);
  result = *(__n128 *)(v14 - 31);
  *(__n128 *)v20 = result;
  *(_QWORD *)&v20[15] = *(_QWORD *)(v14 - 16);
  if (*(_BYTE *)(v14 - 32) == 1)
  {
    v17 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v17 + 8) == 1)
    {
      if (*(_BYTE *)(v17 + 40) == 1)
        return result;
      v18 = 1;
    }
    else
    {
      v18 = 0;
    }
    v19 = v17 + 32 * v18;
    *(_QWORD *)v19 = v15;
    *(_BYTE *)(v19 + 8) = 1;
    result = *(__n128 *)v20;
    *(_OWORD *)(v19 + 9) = *(_OWORD *)v20;
  }
  return result;
}

uint64_t JSC::B3::Air::emitShuffle(JSC::B3::Air::Code &,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::array<JSC::B3::Air::Arg,2ul>,JSC::B3::Bank,JSC::B3::Value *)::$_3::operator()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  WTF *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  int v40;
  int v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  int v46;
  int v47;
  int v48;
  char v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[12];
  _OWORD v53[2];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)a1 + 32 * a2;
  if (*(_BYTE *)(v8 + 8) == 1)
    return *(unsigned int *)(v8 + 16);
  v9 = a3;
  if ((_DWORD)a3)
  {
    v10 = *(_QWORD *)(a1 + 8);
    v11 = **(unsigned __int16 **)(a1 + 16);
    v12 = **(_QWORD **)(a1 + 24);
    v53[0] = *(_OWORD *)v8;
    *(_OWORD *)((char *)v53 + 9) = *(_OWORD *)(v8 + 9);
    v42 = (WTF *)&v44;
    v44 = 0;
    v45 = 513;
    v46 = 1;
    v47 = a3;
    v48 = 0;
    v49 = 0;
    v50 = v53[0];
    v51 = v53[1];
    v43 = 0x200000003;
    *(_QWORD *)v52 = v12;
    *(_DWORD *)&v52[8] = v11;
    v13 = *(unsigned int *)(v10 + 12);
    if ((_DWORD)v13 == *(_DWORD *)(v10 + 8))
    {
      v25 = WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v13 + 1, (unint64_t)&v42);
      v26 = *(unsigned int *)(v10 + 12);
      v27 = *(_QWORD *)v10;
      v28 = *(_QWORD *)v10 + (v26 << 7);
      v29 = (_OWORD *)(v28 + 16);
      *(_QWORD *)v28 = v28 + 16;
      *(_QWORD *)(v28 + 8) = 3;
      v30 = *(__int128 **)v25;
      if (*(_QWORD *)v25 == v25 + 16)
      {
        v31 = *(unsigned int *)(v25 + 12);
        if ((_DWORD)v31)
        {
          v32 = 32 * v31;
          do
          {
            v33 = *v30;
            v34 = v30[1];
            v30 += 2;
            *v29 = v33;
            v29[1] = v34;
            v29 += 2;
            v32 -= 32;
          }
          while (v32);
        }
      }
      else
      {
        *(_QWORD *)v25 = v25 + 16;
        *(_QWORD *)v28 = v30;
        v41 = *(_DWORD *)(v25 + 8);
        *(_DWORD *)(v25 + 8) = 3;
        *(_DWORD *)(v28 + 8) = v41;
      }
      v35 = *(_DWORD *)(v25 + 12);
      *(_DWORD *)(v25 + 12) = 0;
      *(_DWORD *)(v28 + 12) = v35;
      v36 = v27 + (v26 << 7);
      v37 = *(_QWORD *)(v25 + 112);
      *(_DWORD *)(v36 + 119) = *(_DWORD *)(v25 + 119);
      *(_QWORD *)(v36 + 112) = v37;
    }
    else
    {
      v14 = *(_QWORD *)v10;
      v15 = *(_QWORD *)v10 + (v13 << 7);
      v16 = (_OWORD *)(v15 + 16);
      *(_QWORD *)v15 = v15 + 16;
      *(_QWORD *)(v15 + 8) = 3;
      v17 = v42;
      if (v42 == (WTF *)&v44)
      {
        if (HIDWORD(v43))
        {
          v18 = 32 * HIDWORD(v43);
          v19 = (__int128 *)&v44;
          do
          {
            v20 = *v19;
            v21 = v19[1];
            v19 += 2;
            *v16 = v20;
            v16[1] = v21;
            v16 += 2;
            v18 -= 32;
          }
          while (v18);
        }
      }
      else
      {
        v42 = (WTF *)&v44;
        *(_QWORD *)v15 = v17;
        v40 = v43;
        LODWORD(v43) = 3;
        *(_DWORD *)(v15 + 8) = v40;
      }
      v22 = HIDWORD(v43);
      HIDWORD(v43) = 0;
      *(_DWORD *)(v15 + 12) = v22;
      v23 = v14 + (v13 << 7);
      v24 = *(_QWORD *)v52;
      *(_DWORD *)(v23 + 119) = *(_DWORD *)&v52[7];
      *(_QWORD *)(v23 + 112) = v24;
    }
    ++*(_DWORD *)(v10 + 12);
    v38 = v42;
    if (&v44 != (uint64_t *)v42 && v42)
    {
      v42 = 0;
      LODWORD(v43) = 0;
      WTF::fastFree((unint64_t)v38, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v9;
}

void JSC::B3::Air::emitShuffle(JSC::B3::Air::Code &,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::array<JSC::B3::Air::Arg,2ul>,JSC::B3::Bank,JSC::B3::Value *)::$_4::operator()(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  WTF *v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  int v40;
  int v41;
  WTF *v42;
  uint64_t v43;
  _OWORD v44[2];
  uint64_t v45;
  __int16 v46;
  int v47;
  int v48;
  int v49;
  char v50;
  _BYTE v51[12];
  _BYTE v52[32];

  v8 = *a1;
  v9 = *a1 + 32 * a2;
  if (*(_QWORD *)v9
    || *(_BYTE *)(v9 + 8) != 1
    || (v10 = v8 + 32 * a2, *(_DWORD *)(v10 + 16) != (_DWORD)a3)
    || *(_DWORD *)(v10 + 20)
    || *(_DWORD *)(v8 + 32 * a2 + 12) != 1)
  {
    v11 = a1[1];
    v12 = *(unsigned __int16 *)a1[2];
    v13 = *(_QWORD *)a1[3];
    *(_OWORD *)v52 = *(_OWORD *)v9;
    *(_OWORD *)&v52[9] = *(_OWORD *)(v9 + 9);
    v42 = (WTF *)v44;
    v44[0] = *(_OWORD *)v52;
    v44[1] = *(_OWORD *)&v52[16];
    v45 = 0;
    v46 = 513;
    v47 = 1;
    v48 = a3;
    v49 = 0;
    v50 = 0;
    v43 = 0x200000003;
    *(_QWORD *)v51 = v13;
    *(_DWORD *)&v51[8] = v12;
    v14 = *(unsigned int *)(v11 + 12);
    if ((_DWORD)v14 == *(_DWORD *)(v11 + 8))
    {
      v26 = WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, v14 + 1, (unint64_t)&v42);
      v27 = *(unsigned int *)(v11 + 12);
      v28 = *(_QWORD *)v11;
      v29 = *(_QWORD *)v11 + (v27 << 7);
      v30 = (_OWORD *)(v29 + 16);
      *(_QWORD *)v29 = v29 + 16;
      *(_QWORD *)(v29 + 8) = 3;
      v31 = *(__int128 **)v26;
      if (*(_QWORD *)v26 == v26 + 16)
      {
        v32 = *(unsigned int *)(v26 + 12);
        if ((_DWORD)v32)
        {
          v33 = 32 * v32;
          do
          {
            v34 = *v31;
            v35 = v31[1];
            v31 += 2;
            *v30 = v34;
            v30[1] = v35;
            v30 += 2;
            v33 -= 32;
          }
          while (v33);
        }
      }
      else
      {
        *(_QWORD *)v26 = v26 + 16;
        *(_QWORD *)v29 = v31;
        v41 = *(_DWORD *)(v26 + 8);
        *(_DWORD *)(v26 + 8) = 3;
        *(_DWORD *)(v29 + 8) = v41;
      }
      v36 = *(_DWORD *)(v26 + 12);
      *(_DWORD *)(v26 + 12) = 0;
      *(_DWORD *)(v29 + 12) = v36;
      v37 = v28 + (v27 << 7);
      v38 = *(_QWORD *)(v26 + 112);
      *(_DWORD *)(v37 + 119) = *(_DWORD *)(v26 + 119);
      *(_QWORD *)(v37 + 112) = v38;
    }
    else
    {
      v15 = *(_QWORD *)v11;
      v16 = *(_QWORD *)v11 + (v14 << 7);
      v17 = (_OWORD *)(v16 + 16);
      *(_QWORD *)v16 = v16 + 16;
      *(_QWORD *)(v16 + 8) = 3;
      v18 = v42;
      if (v42 == (WTF *)v44)
      {
        if (HIDWORD(v43))
        {
          v19 = 32 * HIDWORD(v43);
          v20 = v44;
          do
          {
            v21 = *v20;
            v22 = v20[1];
            v20 += 2;
            *v17 = v21;
            v17[1] = v22;
            v17 += 2;
            v19 -= 32;
          }
          while (v19);
        }
      }
      else
      {
        v42 = (WTF *)v44;
        *(_QWORD *)v16 = v18;
        v40 = v43;
        LODWORD(v43) = 3;
        *(_DWORD *)(v16 + 8) = v40;
      }
      v23 = HIDWORD(v43);
      HIDWORD(v43) = 0;
      *(_DWORD *)(v16 + 12) = v23;
      v24 = v15 + (v14 << 7);
      v25 = *(_QWORD *)v51;
      *(_DWORD *)(v24 + 119) = *(_DWORD *)&v51[7];
      *(_QWORD *)(v24 + 112) = v25;
    }
    ++*(_DWORD *)(v11 + 12);
    v39 = v42;
    if (v44 != (_OWORD *)v42)
    {
      if (v42)
      {
        v42 = 0;
        LODWORD(v43) = 0;
        WTF::fastFree((unint64_t)v39, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
}

void JSC::B3::Air::emitShuffle(JSC::B3::Air::Code &,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::array<JSC::B3::Air::Arg,2ul>,JSC::B3::Bank,JSC::B3::Value *)::$_5::operator()(unsigned __int8 ***a1, unsigned __int8 *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  int v19;
  _OWORD *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  WTF *v34;
  uint64_t v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned __int8 **v59;
  uint64_t v60;
  unsigned __int8 **v61;
  uint64_t v62;
  unsigned __int8 *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  unsigned __int16 v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  BOOL v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD *v92;
  WTF *v93;
  uint64_t v94;
  __int128 *v95;
  __int128 v96;
  __int128 v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD *v102;
  __int128 *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  _OWORD *v111;
  uint64_t v112;
  __int128 *v113;
  __int128 v114;
  __int128 v115;
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  _OWORD *v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  WTF *v129;
  uint64_t v130;
  int v131;
  int v132;
  BOOL v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _OWORD *v140;
  WTF *v141;
  uint64_t v142;
  __int128 *v143;
  __int128 v144;
  __int128 v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _OWORD *v153;
  __int128 *v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  WTF *v162;
  int v163;
  int v164;
  unsigned int v165;
  WTF *v166;
  uint64_t v167;
  _BYTE v168[32];
  __int128 v169;
  __int128 v170;
  _BYTE v171[12];
  _BYTE v172[64];
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  v11 = a2[64];
  v12 = ***a1;
  if (v11 == 3)
  {
    v13 = v12 == 0;
    v14 = 108;
    v15 = 90;
LABEL_3:
    if (v13)
      v16 = v15;
    else
      v16 = v14;
    v18 = (char *)(a2 + 8);
    v17 = (char)a2[8];
    v19 = a2[8];
    v20 = a2 + 32;
    v21 = (char)a2[40];
    v22 = a2[40];
    v23 = v16;
    switch(v16)
    {
      case 'Z':
        v23 = 90;
        switch(a2[8])
        {
          case 1u:
            goto LABEL_11;
          case 2u:
          case 3u:
          case 7u:
          case 9u:
          case 0xAu:
          case 0xBu:
            goto LABEL_36;
          case 0x14u:
            if (v21 == 7)
              goto LABEL_37;
            if (v21 > 0xB)
              goto LABEL_54;
            v24 = 1 << v21;
            v25 = 3586;
            break;
          default:
            goto LABEL_54;
        }
        goto LABEL_13;
      case '[':
        v23 = 91;
        break;
      case '\\':
        v23 = 92;
        break;
      case ']':
        switch(v17)
        {
          case 12:
            goto LABEL_8;
          case 1:
            if ((v22 & 0xFE) == 0xC)
              goto LABEL_37;
            break;
          case 13:
LABEL_8:
            if (v22 == 1)
              goto LABEL_37;
            break;
        }
        v23 = 93;
        break;
      case '^':
        v23 = 94;
        switch(a2[8])
        {
          case 1u:
            if (v21 == 1)
              goto LABEL_37;
            if (v21 > 0xB)
              goto LABEL_54;
            v24 = 1 << v21;
            v25 = 3712;
            break;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
          case 8u:
            goto LABEL_54;
          case 7u:
          case 9u:
          case 0xAu:
          case 0xBu:
            goto LABEL_36;
          default:
            if (v17 != 20 || v21 - 9 >= 3 && v21 != 7 && v21 != 1)
              goto LABEL_54;
            goto LABEL_37;
        }
        goto LABEL_13;
      case '_':
        switch(v17)
        {
          case 12:
            goto LABEL_16;
          case 1:
            if ((v22 & 0xFE) == 0xC)
              goto LABEL_37;
            break;
          case 13:
LABEL_16:
            if (v22 == 1)
              goto LABEL_37;
            break;
        }
        v23 = 95;
        break;
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
        break;
      case 'h':
        v23 = 104;
        goto LABEL_35;
      case 'i':
        v23 = 105;
        goto LABEL_35;
      case 'j':
        v23 = 106;
LABEL_35:
        if (v19 == 1)
          goto LABEL_36;
        break;
      case 'k':
        v23 = 107;
        switch(a2[8])
        {
          case 1u:
            goto LABEL_11;
          case 7u:
          case 9u:
          case 0xAu:
          case 0xBu:
            goto LABEL_36;
          default:
            goto LABEL_54;
        }
      case 'l':
        v23 = 108;
        switch(a2[8])
        {
          case 1u:
LABEL_11:
            if (v21 > 0xB)
              goto LABEL_54;
            v24 = 1 << v21;
            v25 = 3714;
            break;
          case 7u:
          case 9u:
          case 0xAu:
          case 0xBu:
            goto LABEL_36;
          default:
            goto LABEL_54;
        }
        goto LABEL_13;
      default:
        v23 = v16;
        break;
    }
LABEL_54:
    v58 = (uint64_t)a1[1];
    v59 = a1[2];
    v60 = 2;
    if (*(_BYTE *)a1[3])
    {
      v60 = 4;
      v61 = v59 + 4;
    }
    else
    {
      v61 = v59 + 2;
    }
    v62 = *((unsigned int *)v61 + 3);
    if ((_DWORD)v62)
    {
      v63 = v59[v60];
      v64 = *((_DWORD *)a2 + 4);
      v65 = *((_DWORD *)a2 + 5);
      v22 = (char)v22;
      v67 = *((_DWORD *)a2 + 12);
      v66 = *((_DWORD *)a2 + 13);
      while (1)
      {
        a4 = *v63 & 0x7F;
        a5 = (char)(31 - (*v63 & 0x7F));
        if ((*v63 & 0x60) != 0)
          v68 = (char)(31 - (*v63 & 0x7F));
        else
          v68 = a4 + 1;
        if ((_DWORD)a4 == 127)
          v68 = 0;
        if ((char)v19 <= 0xD)
        {
          a4 = (1 << v19);
          if ((a4 & 0x31C2) != 0)
            goto LABEL_66;
          if ((char)v19 == 11)
            break;
        }
LABEL_67:
        if (v22 > 0xD)
          goto LABEL_79;
        a4 = (1 << v22);
        if ((a4 & 0x31C2) != 0)
          goto LABEL_69;
        if (v22 != 11)
          goto LABEL_79;
        if (v66 != v68)
        {
LABEL_69:
          if (v67 != v68)
            goto LABEL_79;
        }
LABEL_70:
        ++v63;
        if (!--v62)
          goto LABEL_78;
      }
      if (v65 == v68)
        goto LABEL_70;
LABEL_66:
      if (v64 == v68)
        goto LABEL_70;
      goto LABEL_67;
    }
LABEL_78:
    v68 = 0;
LABEL_79:
    v69 = JSC::B3::Air::emitShuffle(JSC::B3::Air::Code &,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::array<JSC::B3::Air::Arg,2ul>,JSC::B3::Bank,JSC::B3::Value *)::$_3::operator()(v58, a3, v68, a4, a5, a6, a7, a8);
    if (!v69)
    {
      __break(0xC471u);
      JUMPOUT(0x1980A8110);
    }
    v77 = v69;
    v78 = *v18;
    switch(v23)
    {
      case 'Z':
        if (v78 - 1 < 3)
          goto LABEL_90;
        if (v78 > 0x14)
          goto LABEL_108;
        v79 = 1 << v78;
        v80 = 3712;
        goto LABEL_88;
      case ']':
      case '_':
        if ((v78 & 0xFFFFFFFE) != 0xC)
          goto LABEL_108;
        goto LABEL_90;
      case '^':
        if (v78 > 0x14)
          goto LABEL_108;
        v79 = 1 << v78;
        v80 = 3714;
LABEL_88:
        v81 = v80 | 0x100000;
        break;
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
        if (v78 != 1)
          goto LABEL_108;
        goto LABEL_90;
      case 'k':
      case 'l':
      case 'q':
        if (v78 > 0xB)
          goto LABEL_108;
        v79 = 1 << v78;
        v81 = 3714;
        break;
      default:
        goto LABEL_108;
    }
    if ((v79 & v81) == 0)
    {
LABEL_108:
      v82 = (uint64_t)a1[4];
      v109 = (uint64_t)*a1[5];
      v110 = *(_QWORD *)a2;
      *(_QWORD *)&v168[16] = 0;
      v168[24] = 0;
      v166 = (WTF *)v168;
      *(_QWORD *)v168 = v110;
      *(_WORD *)&v168[8] = 515;
      *(_DWORD *)&v168[12] = 1;
      *(_QWORD *)&v169 = 0;
      WORD4(v169) = 513;
      HIDWORD(v169) = 1;
      *(_QWORD *)&v170 = v69;
      BYTE8(v170) = 0;
      v167 = 0x200000003;
      *(_QWORD *)v171 = v109;
      *(_DWORD *)&v171[8] = 90;
      v89 = *(unsigned int *)(v82 + 12);
      if ((_DWORD)v89 != *(_DWORD *)(v82 + 8))
      {
        v90 = *(_QWORD *)v82;
        v91 = *(_QWORD *)v82 + (v89 << 7);
        v111 = (_OWORD *)(v91 + 16);
        *(_QWORD *)v91 = v91 + 16;
        *(_QWORD *)(v91 + 8) = 3;
        v93 = v166;
        if (v166 == (WTF *)v168)
        {
          if (HIDWORD(v167))
          {
            v112 = 32 * HIDWORD(v167);
            v113 = (__int128 *)v168;
            do
            {
              v114 = *v113;
              v115 = v113[1];
              v113 += 2;
              *v111 = v114;
              v111[1] = v115;
              v111 += 2;
              v112 -= 32;
            }
            while (v112);
          }
          goto LABEL_115;
        }
        goto LABEL_114;
      }
      v98 = WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v82, v89 + 1, (unint64_t)&v166);
      v99 = *(unsigned int *)(v82 + 12);
      v100 = *(_QWORD *)v82;
      v101 = *(_QWORD *)v82 + (v99 << 7);
      v120 = (_OWORD *)(v101 + 16);
      *(_QWORD *)v101 = v101 + 16;
      *(_QWORD *)(v101 + 8) = 3;
      v104 = v98 + 16;
      v103 = *(__int128 **)v98;
      if (*(_QWORD *)v98 == v98 + 16)
      {
        v121 = *(unsigned int *)(v98 + 12);
        if ((_DWORD)v121)
        {
          v122 = 32 * v121;
          do
          {
            v123 = *v103;
            v124 = v103[1];
            v103 += 2;
            *v120 = v123;
            v120[1] = v124;
            v120 += 2;
            v122 -= 32;
          }
          while (v122);
        }
        goto LABEL_122;
      }
      goto LABEL_121;
    }
LABEL_90:
    v82 = (uint64_t)a1[4];
    v83 = a2[64];
    v84 = ***a1;
    switch(v83)
    {
      case 3:
        v85 = v84 == 0;
        v86 = 108;
        v87 = 90;
        break;
      case 2:
        v85 = v84 == 0;
        v86 = 107;
        v87 = 94;
        break;
      case 4:
        v86 = 113;
LABEL_94:
        v88 = (uint64_t)*a1[5];
        *(_OWORD *)v168 = *(_OWORD *)a2;
        *(_OWORD *)&v168[9] = *(_OWORD *)(a2 + 9);
        v166 = (WTF *)v168;
        *(_QWORD *)&v169 = 0;
        WORD4(v169) = 513;
        HIDWORD(v169) = 1;
        *(_QWORD *)&v170 = v69;
        BYTE8(v170) = 0;
        v167 = 0x200000003;
        *(_QWORD *)v171 = v88;
        *(_DWORD *)&v171[8] = v86;
        v89 = *(unsigned int *)(v82 + 12);
        if ((_DWORD)v89 != *(_DWORD *)(v82 + 8))
        {
          v90 = *(_QWORD *)v82;
          v91 = *(_QWORD *)v82 + (v89 << 7);
          v92 = (_OWORD *)(v91 + 16);
          *(_QWORD *)v91 = v91 + 16;
          *(_QWORD *)(v91 + 8) = 3;
          v93 = v166;
          if (v166 == (WTF *)v168)
          {
            if (HIDWORD(v167))
            {
              v94 = 32 * HIDWORD(v167);
              v95 = (__int128 *)v168;
              do
              {
                v96 = *v95;
                v97 = v95[1];
                v95 += 2;
                *v92 = v96;
                v92[1] = v97;
                v92 += 2;
                v94 -= 32;
              }
              while (v94);
            }
            goto LABEL_115;
          }
LABEL_114:
          v166 = (WTF *)v168;
          *(_QWORD *)v91 = v93;
          v116 = v167;
          LODWORD(v167) = 3;
          *(_DWORD *)(v91 + 8) = v116;
LABEL_115:
          v117 = HIDWORD(v167);
          HIDWORD(v167) = 0;
          *(_DWORD *)(v91 + 12) = v117;
          v118 = v90 + (v89 << 7);
          v119 = *(_QWORD *)v171;
          *(_DWORD *)(v118 + 119) = *(_DWORD *)&v171[7];
          *(_QWORD *)(v118 + 112) = v119;
LABEL_123:
          ++*(_DWORD *)(v82 + 12);
          v129 = v166;
          if (v168 != (_BYTE *)v166 && v166)
          {
            v166 = 0;
            LODWORD(v167) = 0;
            WTF::fastFree((unint64_t)v129, v70, v71, v72, v73, v74, v75, v76);
          }
          v130 = (uint64_t)a1[4];
          v131 = a2[64];
          v132 = ***a1;
          switch(v131)
          {
            case 3:
              v133 = v132 == 0;
              v134 = 108;
              v135 = 90;
              break;
            case 2:
              v133 = v132 == 0;
              v134 = 107;
              v135 = 94;
              break;
            case 4:
              v134 = 113;
              goto LABEL_130;
            default:
              __break(0xC471u);
              JUMPOUT(0x1980A8260);
          }
          if (v133)
            v134 = v135;
LABEL_130:
          v136 = (uint64_t)*a1[5];
          *(_OWORD *)&v172[16] = *(_OWORD *)((char *)v20 + 9);
          *(_OWORD *)&v172[7] = *v20;
          v166 = (WTF *)v168;
          *(_QWORD *)v168 = 0;
          *(_WORD *)&v168[8] = 513;
          *(_DWORD *)&v168[12] = 1;
          *(_QWORD *)&v168[16] = v77;
          v168[24] = 0;
          v169 = *(_OWORD *)&v172[7];
          v170 = *(_OWORD *)&v172[23];
          v167 = 0x200000003;
          *(_QWORD *)v171 = v136;
          *(_DWORD *)&v171[8] = v134;
          v137 = *(unsigned int *)(v130 + 12);
          if ((_DWORD)v137 == *(_DWORD *)(v130 + 8))
          {
            v149 = WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v130, v137 + 1, (unint64_t)&v166);
            v150 = *(unsigned int *)(v130 + 12);
            v151 = *(_QWORD *)v130;
            v152 = *(_QWORD *)v130 + (v150 << 7);
            v153 = (_OWORD *)(v152 + 16);
            *(_QWORD *)v152 = v152 + 16;
            *(_QWORD *)(v152 + 8) = 3;
            v154 = *(__int128 **)v149;
            if (*(_QWORD *)v149 == v149 + 16)
            {
              v155 = *(unsigned int *)(v149 + 12);
              if ((_DWORD)v155)
              {
                v156 = 32 * v155;
                do
                {
                  v157 = *v154;
                  v158 = v154[1];
                  v154 += 2;
                  *v153 = v157;
                  v153[1] = v158;
                  v153 += 2;
                  v156 -= 32;
                }
                while (v156);
              }
            }
            else
            {
              *(_QWORD *)v149 = v149 + 16;
              *(_QWORD *)v152 = v154;
              v164 = *(_DWORD *)(v149 + 8);
              *(_DWORD *)(v149 + 8) = 3;
              *(_DWORD *)(v152 + 8) = v164;
            }
            v159 = *(_DWORD *)(v149 + 12);
            *(_DWORD *)(v149 + 12) = 0;
            *(_DWORD *)(v152 + 12) = v159;
            v160 = v151 + (v150 << 7);
            v161 = *(_QWORD *)(v149 + 112);
            *(_DWORD *)(v160 + 119) = *(_DWORD *)(v149 + 119);
            *(_QWORD *)(v160 + 112) = v161;
          }
          else
          {
            v138 = *(_QWORD *)v130;
            v139 = *(_QWORD *)v130 + (v137 << 7);
            v140 = (_OWORD *)(v139 + 16);
            *(_QWORD *)v139 = v139 + 16;
            *(_QWORD *)(v139 + 8) = 3;
            v141 = v166;
            if (v166 == (WTF *)v168)
            {
              if (HIDWORD(v167))
              {
                v142 = 32 * HIDWORD(v167);
                v143 = (__int128 *)v168;
                do
                {
                  v144 = *v143;
                  v145 = v143[1];
                  v143 += 2;
                  *v140 = v144;
                  v140[1] = v145;
                  v140 += 2;
                  v142 -= 32;
                }
                while (v142);
              }
            }
            else
            {
              v166 = (WTF *)v168;
              *(_QWORD *)v139 = v141;
              v163 = v167;
              LODWORD(v167) = 3;
              *(_DWORD *)(v139 + 8) = v163;
            }
            v146 = HIDWORD(v167);
            HIDWORD(v167) = 0;
            *(_DWORD *)(v139 + 12) = v146;
            v147 = v138 + (v137 << 7);
            v148 = *(_QWORD *)v171;
            *(_DWORD *)(v147 + 119) = *(_DWORD *)&v171[7];
            *(_QWORD *)(v147 + 112) = v148;
          }
          ++*(_DWORD *)(v130 + 12);
          v162 = v166;
          if (v168 != (_BYTE *)v166)
          {
            if (v166)
            {
              v166 = 0;
              LODWORD(v167) = 0;
              WTF::fastFree((unint64_t)v162, v70, v71, v72, v73, v74, v75, v76);
            }
          }
          JSC::B3::Air::emitShuffle(JSC::B3::Air::Code &,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::array<JSC::B3::Air::Arg,2ul>,JSC::B3::Bank,JSC::B3::Value *)::$_4::operator()((uint64_t *)a1[6], a3, v77, v72, v73, v74, v75, v76);
          return;
        }
        v98 = WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v82, v89 + 1, (unint64_t)&v166);
        v99 = *(unsigned int *)(v82 + 12);
        v100 = *(_QWORD *)v82;
        v101 = *(_QWORD *)v82 + (v99 << 7);
        v102 = (_OWORD *)(v101 + 16);
        *(_QWORD *)v101 = v101 + 16;
        *(_QWORD *)(v101 + 8) = 3;
        v104 = v98 + 16;
        v103 = *(__int128 **)v98;
        if (*(_QWORD *)v98 == v98 + 16)
        {
          v105 = *(unsigned int *)(v98 + 12);
          if ((_DWORD)v105)
          {
            v106 = 32 * v105;
            do
            {
              v107 = *v103;
              v108 = v103[1];
              v103 += 2;
              *v102 = v107;
              v102[1] = v108;
              v102 += 2;
              v106 -= 32;
            }
            while (v106);
          }
          goto LABEL_122;
        }
LABEL_121:
        *(_QWORD *)v98 = v104;
        *(_QWORD *)v101 = v103;
        v125 = *(_DWORD *)(v98 + 8);
        *(_DWORD *)(v98 + 8) = 3;
        *(_DWORD *)(v101 + 8) = v125;
LABEL_122:
        v126 = *(_DWORD *)(v98 + 12);
        *(_DWORD *)(v98 + 12) = 0;
        *(_DWORD *)(v101 + 12) = v126;
        v127 = v100 + (v99 << 7);
        v128 = *(_QWORD *)(v98 + 112);
        *(_DWORD *)(v127 + 119) = *(_DWORD *)(v98 + 119);
        *(_QWORD *)(v127 + 112) = v128;
        goto LABEL_123;
      default:
        __break(0xC471u);
        JUMPOUT(0x1980A8280);
    }
    if (v85)
      v86 = v87;
    goto LABEL_94;
  }
  if (v11 == 2)
  {
    v13 = v12 == 0;
    v14 = 107;
    v15 = 94;
    goto LABEL_3;
  }
  if (v11 != 4)
  {
    __break(0xC471u);
    JUMPOUT(0x1980A81B0);
  }
  v18 = (char *)(a2 + 8);
  LOBYTE(v19) = a2[8];
  v20 = a2 + 32;
  v165 = (char)a2[40];
  v22 = a2[40];
  v23 = 113;
  switch((char)v19)
  {
    case 1:
      if (v165 > 0xB)
        goto LABEL_54;
      v24 = 1 << v165;
      v25 = 3714;
      v16 = 113;
LABEL_13:
      if ((v24 & v25) == 0)
        goto LABEL_54;
      break;
    case 7:
    case 9:
    case 10:
    case 11:
      v16 = 113;
LABEL_36:
      if (v22 != 1)
        goto LABEL_54;
      break;
    default:
      goto LABEL_54;
  }
LABEL_37:
  v26 = (uint64_t)a1[4];
  v27 = (uint64_t)*a1[5];
  *(_OWORD *)&v172[9] = *(_OWORD *)(a2 + 9);
  v28 = *(_OWORD *)a2;
  *(_OWORD *)&v172[41] = *(_OWORD *)((char *)v20 + 9);
  v29 = *v20;
  *(_OWORD *)v172 = v28;
  *(_OWORD *)&v172[32] = v29;
  v166 = (WTF *)v168;
  *(_OWORD *)v168 = v28;
  *(_OWORD *)&v168[16] = *(_OWORD *)&v172[16];
  v169 = v29;
  v170 = *(_OWORD *)&v172[48];
  v167 = 0x200000003;
  *(_QWORD *)v171 = v27;
  *(_DWORD *)&v171[8] = v16;
  v30 = *(unsigned int *)(v26 + 12);
  if ((_DWORD)v30 == *(_DWORD *)(v26 + 8))
  {
    v42 = WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26, v30 + 1, (unint64_t)&v166);
    v43 = *(unsigned int *)(v26 + 12);
    v44 = *(_QWORD *)v26;
    v45 = *(_QWORD *)v26 + (v43 << 7);
    v46 = (_OWORD *)(v45 + 16);
    *(_QWORD *)v45 = v45 + 16;
    *(_QWORD *)(v45 + 8) = 3;
    v47 = *(__int128 **)v42;
    if (*(_QWORD *)v42 == v42 + 16)
    {
      v48 = *(unsigned int *)(v42 + 12);
      if ((_DWORD)v48)
      {
        v49 = 32 * v48;
        do
        {
          v50 = *v47;
          v51 = v47[1];
          v47 += 2;
          *v46 = v50;
          v46[1] = v51;
          v46 += 2;
          v49 -= 32;
        }
        while (v49);
      }
    }
    else
    {
      *(_QWORD *)v42 = v42 + 16;
      *(_QWORD *)v45 = v47;
      v57 = *(_DWORD *)(v42 + 8);
      *(_DWORD *)(v42 + 8) = 3;
      *(_DWORD *)(v45 + 8) = v57;
    }
    v52 = *(_DWORD *)(v42 + 12);
    *(_DWORD *)(v42 + 12) = 0;
    *(_DWORD *)(v45 + 12) = v52;
    v53 = v44 + (v43 << 7);
    v54 = *(_QWORD *)(v42 + 112);
    *(_DWORD *)(v53 + 119) = *(_DWORD *)(v42 + 119);
    *(_QWORD *)(v53 + 112) = v54;
  }
  else
  {
    v31 = *(_QWORD *)v26;
    v32 = *(_QWORD *)v26 + (v30 << 7);
    v33 = (_OWORD *)(v32 + 16);
    *(_QWORD *)v32 = v32 + 16;
    *(_QWORD *)(v32 + 8) = 3;
    v34 = v166;
    if (v166 == (WTF *)v168)
    {
      if (HIDWORD(v167))
      {
        v35 = 32 * HIDWORD(v167);
        v36 = (__int128 *)v168;
        do
        {
          v37 = *v36;
          v38 = v36[1];
          v36 += 2;
          *v33 = v37;
          v33[1] = v38;
          v33 += 2;
          v35 -= 32;
        }
        while (v35);
      }
    }
    else
    {
      v166 = (WTF *)v168;
      *(_QWORD *)v32 = v34;
      v56 = v167;
      LODWORD(v167) = 3;
      *(_DWORD *)(v32 + 8) = v56;
    }
    v39 = HIDWORD(v167);
    HIDWORD(v167) = 0;
    *(_DWORD *)(v32 + 12) = v39;
    v40 = v31 + (v30 << 7);
    v41 = *(_QWORD *)v171;
    *(_DWORD *)(v40 + 119) = *(_DWORD *)&v171[7];
    *(_QWORD *)(v40 + 112) = v41;
  }
  ++*(_DWORD *)(v26 + 12);
  v55 = v166;
  if (v168 != (_BYTE *)v166 && v166)
  {
    v166 = 0;
    LODWORD(v167) = 0;
    WTF::fastFree((unint64_t)v55, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
}

void JSC::B3::Air::emitShuffle(unint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t *v18;
  int v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  _OWORD *v52;
  __int128 *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  __int128 v62;
  __int128 v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  _OWORD *v82;
  __int128 *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  int v109;
  unint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  BOOL v114;
  _OWORD v115[4];
  WTF *v116;
  unsigned int v117;
  int v118;
  _OWORD v119[4];
  WTF *v120;
  uint64_t v121;
  unint64_t v122;
  int v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;

  v127 = 0;
  v128 = 0;
  v125 = 0;
  v126 = 0;
  v13 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v13)
  {
    *(_QWORD *)a8 = 0;
    *(_QWORD *)(a8 + 8) = 0;
    v120 = 0;
    v121 = 0;
    goto LABEL_23;
  }
  v14 = *(_QWORD *)a2;
  v15 = 72 * v13;
  do
  {
    v16 = *(char *)(v14 + 8);
    if ((v16 - 6) <= 7
      && (*(char *)(v14 + 40) - 6) <= 7
      && *(unsigned __int8 *)(v14 + 64) > 3u)
    {
LABEL_16:
      if (HIDWORD(v126) == (_DWORD)v126)
      {
        v18 = &v125;
        goto LABEL_10;
      }
      v109 = HIDWORD(v126) + 1;
      v110 = v125 + 72 * HIDWORD(v126);
      *(_OWORD *)v110 = *(_OWORD *)v14;
      v112 = *(_OWORD *)(v14 + 32);
      v111 = *(_OWORD *)(v14 + 48);
      v113 = *(_OWORD *)(v14 + 16);
      *(_QWORD *)(v110 + 64) = *(_QWORD *)(v14 + 64);
      *(_OWORD *)(v110 + 32) = v112;
      *(_OWORD *)(v110 + 48) = v111;
      *(_OWORD *)(v110 + 16) = v113;
      HIDWORD(v126) = v109;
      goto LABEL_11;
    }
    if (v16 == 1)
    {
      if (*(int *)(v14 + 16) < 1)
        goto LABEL_16;
    }
    else
    {
      if (*(_BYTE *)(v14 + 8))
        v114 = v16 == 21;
      else
        v114 = 1;
      if (v114)
        goto LABEL_16;
    }
    v17 = *(char *)(v14 + 40);
    if (v17 == 1)
    {
      if (*(int *)(v14 + 48) < 1)
        goto LABEL_16;
    }
    else if (!*(_BYTE *)(v14 + 40) || v17 == 21)
    {
      goto LABEL_16;
    }
    if (HIDWORD(v128) == (_DWORD)v128)
    {
      v18 = &v127;
LABEL_10:
      WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::ShufflePair const&>((uint64_t)v18, v14);
      goto LABEL_11;
    }
    v19 = HIDWORD(v128) + 1;
    v20 = v127 + 72 * HIDWORD(v128);
    *(_OWORD *)v20 = *(_OWORD *)v14;
    v22 = *(_OWORD *)(v14 + 32);
    v21 = *(_OWORD *)(v14 + 48);
    v23 = *(_OWORD *)(v14 + 16);
    *(_QWORD *)(v20 + 64) = *(_QWORD *)(v14 + 64);
    *(_OWORD *)(v20 + 32) = v22;
    *(_OWORD *)(v20 + 48) = v21;
    *(_OWORD *)(v20 + 16) = v23;
    HIDWORD(v128) = v19;
LABEL_11:
    v14 += 72;
    v15 -= 72;
  }
  while (v15);
  v24 = HIDWORD(v128);
  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  v120 = 0;
  LODWORD(v121) = 0;
  HIDWORD(v121) = v24;
  if (!(_DWORD)v24)
    goto LABEL_23;
  if (v24 >= 0x38E38E4)
  {
    __break(0xC471u);
    goto LABEL_109;
  }
  v25 = 72 * v24;
  v26 = WTF::fastMalloc((WTF *)(72 * v24));
  LODWORD(v121) = (v25 & 0xFFFFFFF8) / 0x48;
  v120 = (WTF *)v26;
  if (HIDWORD(v128))
  {
    v27 = v127;
    v28 = 72 * HIDWORD(v128);
    do
    {
      *(_OWORD *)v26 = *(_OWORD *)v27;
      v29 = *(_OWORD *)(v27 + 16);
      v30 = *(_OWORD *)(v27 + 32);
      v31 = *(_OWORD *)(v27 + 48);
      *(_QWORD *)(v26 + 64) = *(_QWORD *)(v27 + 64);
      *(_OWORD *)(v26 + 32) = v30;
      *(_OWORD *)(v26 + 48) = v31;
      *(_OWORD *)(v26 + 16) = v29;
      v26 += 72;
      v27 += 72;
      v28 -= 72;
    }
    while (v28);
  }
LABEL_23:
  v32 = a3[1];
  v119[0] = *a3;
  v119[1] = v32;
  v33 = a3[3];
  v119[2] = a3[2];
  v119[3] = v33;
  JSC::B3::Air::emitShuffle((unint64_t)&v122, a1, (uint64_t)&v120, (uint64_t)v119, 0, a5, a6, a7);
  v41 = v124;
  v42 = *(unsigned int *)(a8 + 8);
  v43 = v124 + (unint64_t)*(unsigned int *)(a8 + 12);
  if (v43 > v42)
  {
    v44 = v42 + (v42 >> 2);
    if (v44 >= 0x10)
      v45 = v44 + 1;
    else
      v45 = 16;
    if (v45 <= v43)
      v46 = v124 + (unint64_t)*(unsigned int *)(a8 + 12);
    else
      v46 = v45;
    WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a8, v46);
    v41 = v124;
  }
  v47 = v122;
  if ((_DWORD)v41)
  {
    v48 = v122 + (v41 << 7);
    v49 = *(_DWORD *)(a8 + 12);
    do
    {
      v50 = *(_QWORD *)a8;
      v51 = *(_QWORD *)a8 + ((unint64_t)v49 << 7);
      v52 = (_OWORD *)(v51 + 16);
      *(_QWORD *)v51 = v51 + 16;
      *(_QWORD *)(v51 + 8) = 3;
      v53 = *(__int128 **)v47;
      if (*(_QWORD *)v47 == v47 + 16)
      {
        v54 = *(unsigned int *)(v47 + 12);
        if ((_DWORD)v54)
        {
          v55 = 32 * v54;
          do
          {
            v56 = *v53;
            v57 = v53[1];
            v53 += 2;
            *v52 = v56;
            v52[1] = v57;
            v52 += 2;
            v55 -= 32;
          }
          while (v55);
        }
      }
      else
      {
        *(_QWORD *)v47 = v47 + 16;
        *(_QWORD *)v51 = v53;
        v61 = *(_DWORD *)(v47 + 8);
        *(_DWORD *)(v47 + 8) = 3;
        *(_DWORD *)(v51 + 8) = v61;
      }
      v58 = *(_DWORD *)(v47 + 12);
      *(_DWORD *)(v47 + 12) = 0;
      *(_DWORD *)(v51 + 12) = v58;
      v59 = v50 + ((unint64_t)v49 << 7);
      v60 = *(_QWORD *)(v47 + 112);
      *(_DWORD *)(v59 + 119) = *(_DWORD *)(v47 + 119);
      *(_QWORD *)(v59 + 112) = v60;
      v49 = *(_DWORD *)(a8 + 12) + 1;
      *(_DWORD *)(a8 + 12) = v49;
      v47 += 128;
    }
    while (v47 != v48);
    v47 = v122;
    if (v124)
    {
      v101 = (unint64_t)v124 << 7;
      v102 = v122 + 16;
      do
      {
        v103 = *(_QWORD *)(v102 - 16);
        if (v102 != v103 && v103 != 0)
        {
          *(_QWORD *)(v102 - 16) = 0;
          *(_DWORD *)(v102 - 8) = 0;
          WTF::fastFree(v103, v34, v35, v36, v37, v38, v39, v40);
        }
        v102 += 128;
        v101 -= 128;
      }
      while (v101);
      v47 = v122;
    }
  }
  if (v47)
  {
    v122 = 0;
    v123 = 0;
    WTF::fastFree(v47, v34, v35, v36, v37, v38, v39, v40);
  }
  if (v120)
    WTF::fastFree((unint64_t)v120, v34, v35, v36, v37, v38, v39, v40);
  v116 = 0;
  v117 = 0;
  v118 = HIDWORD(v126);
  if (HIDWORD(v126))
  {
    if (HIDWORD(v126) < 0x38E38E4)
    {
      v94 = 72 * HIDWORD(v126);
      v95 = WTF::fastMalloc((WTF *)(72 * HIDWORD(v126)));
      v117 = (v94 & 0xFFFFFFF8) / 0x48;
      v116 = (WTF *)v95;
      if (HIDWORD(v126))
      {
        v96 = v125;
        v97 = 72 * HIDWORD(v126);
        do
        {
          *(_OWORD *)v95 = *(_OWORD *)v96;
          v98 = *(_OWORD *)(v96 + 16);
          v99 = *(_OWORD *)(v96 + 32);
          v100 = *(_OWORD *)(v96 + 48);
          *(_QWORD *)(v95 + 64) = *(_QWORD *)(v96 + 64);
          *(_OWORD *)(v95 + 32) = v99;
          *(_OWORD *)(v95 + 48) = v100;
          *(_OWORD *)(v95 + 16) = v98;
          v95 += 72;
          v96 += 72;
          v97 -= 72;
        }
        while (v97);
      }
      goto LABEL_46;
    }
    __break(0xC471u);
LABEL_109:
    JUMPOUT(0x1980A8A44);
  }
LABEL_46:
  v62 = a4[1];
  v115[0] = *a4;
  v115[1] = v62;
  v63 = a4[3];
  v115[2] = a4[2];
  v115[3] = v63;
  JSC::B3::Air::emitShuffle((unint64_t)&v122, a1, (uint64_t)&v116, (uint64_t)v115, 1, a5, v39, v40);
  v71 = v124;
  v72 = *(unsigned int *)(a8 + 8);
  v73 = v124 + (unint64_t)*(unsigned int *)(a8 + 12);
  if (v73 > v72)
  {
    v74 = v72 + (v72 >> 2);
    if (v74 >= 0x10)
      v75 = v74 + 1;
    else
      v75 = 16;
    if (v75 <= v73)
      v76 = v124 + (unint64_t)*(unsigned int *)(a8 + 12);
    else
      v76 = v75;
    WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a8, v76);
    v71 = v124;
  }
  v77 = v122;
  if ((_DWORD)v71)
  {
    v78 = v122 + (v71 << 7);
    v79 = *(_DWORD *)(a8 + 12);
    do
    {
      v80 = *(_QWORD *)a8;
      v81 = *(_QWORD *)a8 + ((unint64_t)v79 << 7);
      v82 = (_OWORD *)(v81 + 16);
      *(_QWORD *)v81 = v81 + 16;
      *(_QWORD *)(v81 + 8) = 3;
      v83 = *(__int128 **)v77;
      if (*(_QWORD *)v77 == v77 + 16)
      {
        v84 = *(unsigned int *)(v77 + 12);
        if ((_DWORD)v84)
        {
          v85 = 32 * v84;
          do
          {
            v86 = *v83;
            v87 = v83[1];
            v83 += 2;
            *v82 = v86;
            v82[1] = v87;
            v82 += 2;
            v85 -= 32;
          }
          while (v85);
        }
      }
      else
      {
        *(_QWORD *)v77 = v77 + 16;
        *(_QWORD *)v81 = v83;
        v91 = *(_DWORD *)(v77 + 8);
        *(_DWORD *)(v77 + 8) = 3;
        *(_DWORD *)(v81 + 8) = v91;
      }
      v88 = *(_DWORD *)(v77 + 12);
      *(_DWORD *)(v77 + 12) = 0;
      *(_DWORD *)(v81 + 12) = v88;
      v89 = v80 + ((unint64_t)v79 << 7);
      v90 = *(_QWORD *)(v77 + 112);
      *(_DWORD *)(v89 + 119) = *(_DWORD *)(v77 + 119);
      *(_QWORD *)(v89 + 112) = v90;
      v79 = *(_DWORD *)(a8 + 12) + 1;
      *(_DWORD *)(a8 + 12) = v79;
      v77 += 128;
    }
    while (v77 != v78);
    v77 = v122;
    if (v124)
    {
      v105 = (unint64_t)v124 << 7;
      v106 = v122 + 16;
      do
      {
        v107 = *(_QWORD *)(v106 - 16);
        if (v106 != v107 && v107 != 0)
        {
          *(_QWORD *)(v106 - 16) = 0;
          *(_DWORD *)(v106 - 8) = 0;
          WTF::fastFree(v107, v64, v65, v66, v67, v68, v69, v70);
        }
        v106 += 128;
        v105 -= 128;
      }
      while (v105);
      v77 = v122;
    }
  }
  if (v77)
  {
    v122 = 0;
    v123 = 0;
    WTF::fastFree(v77, v64, v65, v66, v67, v68, v69, v70);
  }
  if (v116)
    WTF::fastFree((unint64_t)v116, v64, v65, v66, v67, v68, v69, v70);
  v92 = v125;
  if (v125)
  {
    v125 = 0;
    LODWORD(v126) = 0;
    WTF::fastFree(v92, v64, v65, v66, v67, v68, v69, v70);
  }
  v93 = v127;
  if (v127)
  {
    v127 = 0;
    LODWORD(v128) = 0;
    WTF::fastFree(v93, v64, v65, v66, v67, v68, v69, v70);
  }
}

__n128 WTF::Vector<JSC::B3::Air::Arg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Arg>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  _OWORD *v4;
  __n128 result;
  __int128 v6;

  v3 = WTF::Vector<JSC::B3::Air::Arg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (_OWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
  result = *(__n128 *)v3;
  v6 = *(_OWORD *)(v3 + 16);
  *v4 = *(_OWORD *)v3;
  v4[1] = v6;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::B3::Air::Arg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<JSC::B3::Air::Arg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<JSC::B3::Air::Arg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<JSC::B3::Air::Arg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = 32 * v8;
        v18 = (__int128 *)v7;
        do
        {
          v19 = *v18;
          v20 = v18[1];
          v18 += 2;
          *v9 = v19;
          v9[1] = v20;
          v9 += 2;
          v17 -= 32;
        }
        while (v17);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void JSC::B3::Air::GenerateAndAllocateRegisters::~GenerateAndAllocateRegisters(JSC::B3::Air::GenerateAndAllocateRegisters *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v9 = *((_QWORD *)this + 32);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      v11 = (_QWORD *)*((_QWORD *)this + 32);
      do
      {
        if (*v11 != -1)
        {
          v12 = v11[3];
          if (v12)
            WTF::fastFree(v12 - 16, a2, a3, a4, a5, a6, a7, a8);
        }
        v11 += 4;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v13)
  {
    v14 = WTF::Liveness<JSC::B3::Air::UnifiedTmpLivenessAdapter>::~Liveness(v13, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  v22 = *((_QWORD *)this + 18);
  if (v22)
  {
    v23 = *(unsigned int *)(v22 - 4);
    if ((_DWORD)v23)
    {
      v24 = v22 + 24;
      do
      {
        if (*(_QWORD *)(v24 - 24) != -1)
        {
          v25 = *(_QWORD *)(v24 - 16);
          if (v24 != v25 && v25 != 0)
          {
            *(_QWORD *)(v24 - 16) = 0;
            *(_DWORD *)(v24 - 8) = 0;
            WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        v24 += 32;
        --v23;
      }
      while (v23);
    }
    WTF::fastFree(v22 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v27 = *((_QWORD *)this + 16);
  if (v27)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v27, a2, a3, a4, a5, a6, a7, a8);
  }
  v28 = *((_QWORD *)this + 14);
  if (v28)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
  }
  v29 = *((_QWORD *)this + 8);
  if (v29)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
  }
  v30 = *((_QWORD *)this + 6);
  if (v30)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v30, a2, a3, a4, a5, a6, a7, a8);
  }
  v31 = *((_QWORD *)this + 4);
  if (v31)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
  }
  v32 = *((_QWORD *)this + 2);
  if (v32)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::eliminateDeadCode(JSC::B3::Air::Code &)::$_1::operator() const(JSC::B3::Air::Inst &)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t result, unsigned int *a2, int a3)
{
  uint64_t v3;
  uint64_t **v4;
  int v5;
  BOOL v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t *v23;

  if (a3 != 10 && (a3 - 4) <= 6)
  {
    v3 = *(_QWORD *)(result + 16);
    v4 = *(uint64_t ***)(v3 + 8);
    v5 = *((char *)a2 + 8);
    if (v5 == 9)
    {
      if (*(_BYTE *)(*(_QWORD *)a2 + 4))
      {
        v11 = v4[1];
        v12 = *(unsigned int *)(*(_QWORD *)a2 + 8);
        v13 = (unint64_t *)(2 * *v11);
        if (*v11 < 0)
          v14 = 63;
        else
          v14 = *v13;
        if (v14 > v12)
        {
          v15 = (uint64_t *)(v13 + 1);
          if (*v11 >= 0)
            v11 = v15;
          v16 = *(uint64_t *)((char *)v11 + ((v12 >> 3) & 0x1FFFFFF8));
          v17 = 1 << v12;
          goto LABEL_26;
        }
        goto LABEL_37;
      }
    }
    else if (v5 == 1)
    {
      v6 = 1;
      v7 = a2[4];
      if (v7 > 0xFFFFFFDF || (v7 - 1) < 0x20)
        goto LABEL_27;
      v8 = *v4;
      if ((int)v7 < 1)
      {
        if ((_DWORD)v7)
        {
          v19 = v8 + 1;
          v20 = -(uint64_t)v7;
          v7 = -(int)v7;
          v21 = (_QWORD *)(2 * *v19);
          v22 = *v19 < 0 ? 63 : *v21;
          if (v22 > v7)
          {
            v23 = v21 + 1;
            if (*v19 >= 0)
              v19 = v23;
            goto LABEL_25;
          }
        }
      }
      else
      {
        v9 = (unint64_t *)(2 * *v8);
        if (*v8 < 0)
          v10 = 63;
        else
          v10 = *v9;
        if (v10 > v7)
        {
          v18 = (uint64_t *)(v9 + 1);
          if (*v8 >= 0)
            v19 = v18;
          else
            v19 = v8;
          LODWORD(v20) = a2[4];
LABEL_25:
          v17 = *(uint64_t *)((char *)v19 + ((v7 >> 3) & 0x1FFFFFF8));
          v16 = 1 << v20;
LABEL_26:
          v6 = (v16 & v17) != 0;
          goto LABEL_27;
        }
      }
LABEL_37:
      v6 = 0;
      goto LABEL_27;
    }
    v6 = 1;
LABEL_27:
    **(_BYTE **)v3 |= v6;
  }
  return result;
}

unint64_t WTF::Vector<WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v8 = a3 - v4;
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v8;
  }
  else
  {
    v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    WTF::Vector<WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(_QWORD *)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v14 = v6;
        v15 = v4 + 16 * v5;
        v16 = v4;
        do
        {
          *(_QWORD *)v14 = 0;
          *(_QWORD *)(v14 + 8) = 0;
          v17 = *(_QWORD *)v16;
          *(_QWORD *)v16 = 0;
          *(_QWORD *)v14 = v17;
          LODWORD(v17) = *(_DWORD *)(v16 + 8);
          *(_DWORD *)(v16 + 8) = 0;
          *(_DWORD *)(v14 + 8) = v17;
          LODWORD(v17) = *(_DWORD *)(v16 + 12);
          *(_DWORD *)(v16 + 12) = 0;
          *(_DWORD *)(v14 + 12) = v17;
          v18 = *(unsigned int *)(v16 + 12);
          v19 = *(_QWORD *)v16;
          if ((_DWORD)v18)
          {
            v20 = v18 << 7;
            v21 = v19 + 16;
            do
            {
              v22 = *(_QWORD *)(v21 - 16);
              if (v21 != v22 && v22 != 0)
              {
                *(_QWORD *)(v21 - 16) = 0;
                *(_DWORD *)(v21 - 8) = 0;
                WTF::fastFree(v22, v7, v8, v9, v10, v11, v12, v13);
              }
              v21 += 128;
              v20 -= 128;
            }
            while (v20);
            v19 = *(_QWORD *)v16;
          }
          if (v19)
          {
            *(_QWORD *)v16 = 0;
            *(_DWORD *)(v16 + 8) = 0;
            WTF::fastFree(v19, v7, v8, v9, v10, v11, v12, v13);
          }
          v14 += 16;
          v16 += 16;
        }
        while (v16 != v15);
      }
      if (v4)
      {
        if (*(_QWORD *)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

uint64_t WTF::Vector<std::unique_ptr<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 29))
  {
    v6 = result;
    v7 = *(const void **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    memcpy(v9, v7, 8 * v8);
    if (v7)
    {
      if (*(const void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::B3::Air::Arg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>(uint64_t a1, unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unsigned int v23;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  v9 = *(_QWORD *)a1;
  if (v8 <= v4)
  {
LABEL_17:
    v22 = v9 + 32 * *(unsigned int *)(a1 + 12);
    v23 = *a2;
    *(_QWORD *)v22 = 0;
    *(_WORD *)(v22 + 8) = 513;
    *(_DWORD *)(v22 + 12) = 1;
    *(_QWORD *)(v22 + 16) = v23;
    *(_BYTE *)(v22 + 24) = 0;
    ++*(_DWORD *)(a1 + 12);
    return;
  }
  if (!(v8 >> 27))
  {
    v10 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v8));
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v10;
    if ((_DWORD)v5)
    {
      v18 = 32 * v5;
      v19 = (__int128 *)v9;
      do
      {
        v20 = *v19;
        v21 = v19[1];
        v19 += 2;
        *v10 = v20;
        v10[1] = v21;
        v10 += 2;
        v18 -= 32;
      }
      while (v18);
      v10 = *(_OWORD **)a1;
    }
    if (v9)
    {
      if (v10 == (_OWORD *)v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v9, v11, v12, v13, v14, v15, v16, v17);
      v9 = *(_QWORD *)a1;
    }
    else
    {
      v9 = (unint64_t)v10;
    }
    goto LABEL_17;
  }
  __break(0xC471u);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::Code &),void (*)(JSC::CCallHelpers &,JSC::B3::Air::Code &)>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 16))(a2, a3);
}

void JSC::B3::Air::Code::Code(JSC::B3::Procedure &)::$_0::operator()(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  WTF *v15;
  char v16;
  char v17;
  unint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  char *v34;
  char v35;
  char v36;
  WTF *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  WTF *v44;
  char *v45;
  char v46;
  char *v47;
  char v48;
  const void **v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  WTF *v60;
  WTF *v61;
  WTF *v62;
  WTF *v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  int *v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  WTF *v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  WTF *v79;
  uint64_t v80;
  WTF *v81;
  uint64_t v82;

  v10 = a1[1];
  v81 = 0;
  v82 = 0;
  v79 = 0;
  v80 = 0;
  v77 = 0;
  v78 = 0;
  v11 = 0xFFFFFFFF00000000;
  if (a2)
    v12 = 0xFFFFFFFF00000000;
  else
    v12 = 0;
  if (!a2)
    v11 = 536608767;
  v13 = v11 | v12;
  if (v11 | v12)
  {
    v14 = 0xFF003FF80000;
    v15 = (WTF *)((char *)&v80 + 4);
    goto LABEL_8;
  }
  v14 = 0;
  LODWORD(v21) = 0;
  v75 = 0;
  v76 = 0;
  while (1)
  {
    v24 = HIDWORD(v80);
    if (HIDWORD(v80))
    {
      v25 = v79;
      v8 = v21;
      v26 = HIDWORD(v80) + (unint64_t)v21;
      if (v26 > v14)
      {
        v27 = v14 + (v14 >> 2);
        if (v27 >= 0x10)
          v28 = v27 + 1;
        else
          v28 = 16;
        if (v28 <= v26)
          v29 = HIDWORD(v80) + (unint64_t)v21;
        else
          v29 = v28;
        if (HIDWORD(v29))
          goto LABEL_106;
        v30 = (WTF *)WTF::fastMalloc((WTF *)v29);
        v14 = (unint64_t)v30;
        LODWORD(v76) = v29;
        v75 = v30;
        if ((_DWORD)v21)
        {
          v32 = v21;
          v33 = v30;
          v34 = (char *)v13;
          do
          {
            v35 = *v34++;
            *(_BYTE *)v33 = v35;
            v33 = (WTF *)((char *)v33 + 1);
            --v32;
          }
          while (v32);
        }
        if (v13)
        {
          if (v30 == (WTF *)v13)
          {
            v14 = 0;
            v75 = 0;
            LODWORD(v76) = 0;
          }
          WTF::fastFree(v13, v31, a3, a4, a5, a6, a7, a8);
        }
        v13 = v14;
      }
      do
      {
        v36 = *(_BYTE *)v25;
        v25 = (WTF *)((char *)v25 + 1);
        *(_BYTE *)(v13 + v8++) = v36;
        --v24;
      }
      while (v24);
      HIDWORD(v76) = v26;
      LODWORD(v21) = v26;
    }
    v15 = (WTF *)HIDWORD(v78);
    if (HIDWORD(v78))
    {
      v37 = v77;
      v8 = v21;
      v38 = HIDWORD(v78) + (unint64_t)v21;
      if (v38 > v76)
      {
        v39 = v76 + ((unint64_t)v76 >> 2);
        if (v39 >= 0x10)
          v40 = v39 + 1;
        else
          v40 = 16;
        if (v40 <= v38)
          v14 = HIDWORD(v78) + (unint64_t)v21;
        else
          v14 = v40;
        if (HIDWORD(v14))
        {
          __break(0xC471u);
          JUMPOUT(0x1980A96F4);
        }
        v41 = (WTF *)WTF::fastMalloc((WTF *)v14);
        LODWORD(v76) = v14;
        v75 = v41;
        if ((_DWORD)v21)
        {
          v43 = v21;
          v44 = v41;
          v45 = (char *)v13;
          do
          {
            v46 = *v45++;
            *(_BYTE *)v44 = v46;
            v44 = (WTF *)((char *)v44 + 1);
            --v43;
          }
          while (v43);
        }
        if (v13)
        {
          if (v41 == (WTF *)v13)
          {
            v75 = 0;
            LODWORD(v76) = 0;
          }
          WTF::fastFree(v13, v42, a3, a4, a5, a6, a7, a8);
          v8 = HIDWORD(v76);
          if (v38 < HIDWORD(v76))
          {
LABEL_106:
            __break(0xC471u);
            JUMPOUT(0x1980A96ECLL);
          }
        }
      }
      v47 = (char *)v75 + v8;
      do
      {
        v48 = *(_BYTE *)v37;
        v37 = (WTF *)((char *)v37 + 1);
        *v47++ = v48;
        v15 = (WTF *)((char *)v15 - 1);
      }
      while (v15);
      HIDWORD(v76) = v38;
    }
    if (byte_1ECF4C690)
    {
      v64 = dword_1ECF4C694;
      if (dword_1ECF4C694)
      {
        v72 = dword_1ECF4C694;
      }
      else
      {
        v65 = *a1;
        v18 = *(unsigned __int8 *)(*a1 + 24);
        if (!*(_BYTE *)(*a1 + 24))
          goto LABEL_102;
        v66 = *(_QWORD *)(v65 + 16);
        v67 = *(_QWORD *)(v65 + 8) ^ (*(_QWORD *)(v65 + 8) << 23);
        v68 = (v66 >> 26) ^ (v67 >> 17) ^ v66 ^ v67;
        *(_QWORD *)(v65 + 8) = v66;
        *(_QWORD *)(v65 + 16) = v68;
        v64 = v68 + v66;
        v72 = v68 + v66;
        if (!((_DWORD)v68 + (_DWORD)v66))
          v64 = 1;
      }
      v73 = v64;
      v74 = (((unint64_t)v64 >> 26) | ((unint64_t)v64 << 23)) ^ ((v64 ^ ((unint64_t)v64 << 23)) >> 17);
      v71 = &v72;
      WTF::shuffleVector<WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::B3::Air::Code::Code(JSC::B3::Procedure &)::$_0::operator() const(JSC::B3::Bank)::{lambda#1}>((uint64_t *)&v75, (uint64_t *)&v71);
    }
    v49 = (const void **)(a2 ? v10 + 32 : v10 + 16);
    WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v49, (const void **)&v75, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)(v10 + 48) = 0;
    v18 = *(unsigned int *)(v10 + 28);
    if (!(_DWORD)v18)
      break;
    v57 = 0;
    v58 = *(_BYTE **)(v10 + 16);
    while ((*v58 & 0x40) == 0)
    {
      v57 |= 1 << *v58;
      *(_QWORD *)(v10 + 48) = v57;
      ++v58;
      if (!--v18)
        goto LABEL_76;
    }
LABEL_102:
    __break(1u);
LABEL_103:
    v69 = (_BYTE *)WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v77, (WTF *)(v18 + 1), (unint64_t)&v72);
    *((_BYTE *)v77 + HIDWORD(v78)) = *v69;
LABEL_20:
    ++*(_DWORD *)v8;
    while (1)
    {
      v13 &= v13 - 1;
      if (!v13)
        break;
LABEL_8:
      v16 = __clz(__rbit64(v13));
      v17 = v16 | 0x80;
      LOBYTE(v72) = v16 | 0x80;
      if (((v14 >> v16) & 1) == 0)
      {
        if (HIDWORD(v82) == (_DWORD)v82)
        {
          v19 = (_BYTE *)WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v81, (WTF *)(HIDWORD(v82) + 1), (unint64_t)&v72);
          *((_BYTE *)v81 + HIDWORD(v82)) = *v19;
        }
        else
        {
          *((_BYTE *)v81 + HIDWORD(v82)) = v17;
        }
        ++HIDWORD(v82);
        v17 = v72;
      }
      v18 = v17 & 0x7F;
      if ((v17 & 0x60) == 0x20)
      {
        if (v18 >= 0x40)
          goto LABEL_102;
        if (((v14 >> v18) & 1) != 0)
        {
          v8 = (unint64_t)&v78 + 4;
          v18 = HIDWORD(v78);
          if (HIDWORD(v78) == (_DWORD)v78)
            goto LABEL_103;
          *((_BYTE *)v77 + HIDWORD(v78)) = v17;
          goto LABEL_20;
        }
      }
      else
      {
        if (v18 >= 0x40)
          goto LABEL_102;
        if (((v14 >> v18) & 1) != 0)
        {
          if (HIDWORD(v80) == (_DWORD)v80)
          {
            v20 = (_BYTE *)WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v79, (WTF *)(HIDWORD(v80) + 1), (unint64_t)&v72);
            *((_BYTE *)v79 + HIDWORD(v80)) = *v20;
          }
          else
          {
            *((_BYTE *)v79 + HIDWORD(v80)) = v17;
          }
          v8 = (unint64_t)v15;
          goto LABEL_20;
        }
      }
    }
    v8 = (unint64_t)v81;
    v21 = HIDWORD(v82);
    v75 = 0;
    v76 = 0;
    if (HIDWORD(v82))
    {
      if (HIDWORD(v82) <= 0x10uLL)
        v14 = 16;
      else
        v14 = HIDWORD(v82);
      v22 = (WTF *)WTF::fastMalloc((WTF *)v14);
      v13 = (unint64_t)v22;
      v23 = 0;
      LODWORD(v76) = v14;
      v75 = v22;
      do
      {
        *((_BYTE *)v22 + v23) = *(_BYTE *)(v8 + v23);
        ++v23;
      }
      while (v21 != v23);
      HIDWORD(v76) = v21;
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
  }
  v57 = 0;
LABEL_76:
  v18 = *(unsigned int *)(v10 + 44);
  if ((_DWORD)v18)
  {
    v59 = *(_BYTE **)(v10 + 32);
    while ((*v59 & 0x40) == 0)
    {
      v57 |= 1 << *v59;
      *(_QWORD *)(v10 + 48) = v57;
      ++v59;
      if (!--v18)
        goto LABEL_80;
    }
    goto LABEL_102;
  }
LABEL_80:
  v60 = v75;
  if (v75)
  {
    v75 = 0;
    LODWORD(v76) = 0;
    WTF::fastFree((unint64_t)v60, v50, v51, v52, v53, v54, v55, v56);
  }
  v61 = v77;
  if (v77)
  {
    v77 = 0;
    LODWORD(v78) = 0;
    WTF::fastFree((unint64_t)v61, v50, v51, v52, v53, v54, v55, v56);
  }
  v62 = v79;
  if (v79)
  {
    v79 = 0;
    LODWORD(v80) = 0;
    WTF::fastFree((unint64_t)v62, v50, v51, v52, v53, v54, v55, v56);
  }
  v63 = v81;
  if (v81)
  {
    v81 = 0;
    LODWORD(v82) = 0;
    WTF::fastFree((unint64_t)v63, v50, v51, v52, v53, v54, v55, v56);
  }
}

uint64_t *WTF::shuffleVector<WTF::Vector<JSC::Reg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::B3::Air::Code::Code(JSC::B3::Procedure &)::$_0::operator() const(JSC::B3::Bank)::{lambda(unsigned int)#1}>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  v2 = *((unsigned int *)result + 3);
  if (v2 >= 2)
  {
    v3 = 0;
    v4 = 1;
    do
    {
      v5 = *((unsigned int *)result + 3);
      if (v3 >= v5)
        goto LABEL_12;
      v6 = v4;
      v7 = *result;
      if ((v2 - v3) >= 2)
      {
        v9 = *a2;
        v11 = *(_QWORD *)(*a2 + 8);
        v10 = *(_QWORD *)(*a2 + 16);
        do
        {
          v12 = v11 ^ (v11 << 23);
          v11 = v10;
          v10 ^= (v10 >> 26) ^ (v12 >> 17) ^ v12;
        }
        while (0x100000000uLL / (v2 - v3) * (v2 - v3) <= (v10 + v11));
        *(_QWORD *)(v9 + 8) = v11;
        *(_QWORD *)(v9 + 16) = v10;
        v8 = (v10 + v11)
           - ((int)v10 + (int)v11) / (v2 - v3) * (unint64_t)(v2 - v3);
      }
      else
      {
        v8 = 0;
      }
      v13 = v3 + v8;
      if (v13 >= v5)
      {
LABEL_12:
        __break(0xC471u);
        JUMPOUT(0x1980A97BCLL);
      }
      v14 = *(_BYTE *)(v7 + v3);
      *(_BYTE *)(v7 + v3) = *(_BYTE *)(v7 + v13);
      *(_BYTE *)(v7 + v13) = v14;
      v4 = v6 + 1;
      v3 = v6;
    }
    while (v6 + 1 != v2);
  }
  return result;
}

uint64_t WTF::Vector<std::unique_ptr<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<std::unique_ptr<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 8 * v10);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::SmallSet<JSC::B3::Air::Tmp,JSC::B3::Air::TmpHash,2u>::grow(uint64_t a1, unsigned int a2)
{
  size_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  BOOL v26;

  v4 = 4 * a2;
  v5 = *(unsigned int *)(a1 + 4);
  v6 = (unint64_t *)(a1 + 8);
  v7 = a1 + 8;
  if ((_DWORD)v5 != 2)
    v7 = *v6;
  v8 = (void *)WTF::fastMalloc((WTF *)(4 * a2));
  memset(v8, 255, v4);
  *(_DWORD *)(a1 + 4) = a2;
  if (!(_DWORD)v5)
    goto LABEL_19;
  for (i = 0; i != v5; ++i)
  {
    v17 = *(_DWORD *)(v7 + 4 * i);
    if (v17)
    {
      v18 = 9 * ((v17 + ~(v17 << 15)) ^ ((v17 + ~(v17 << 15)) >> 10));
      v19 = (v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11);
      v20 = *(_DWORD *)(a1 + 4) - 1;
      v21 = v20 & (v19 ^ HIWORD(v19));
      v22 = *((_DWORD *)v8 + v21);
      if (v22)
        v23 = v22 == v17;
      else
        v23 = 1;
      if (!v23)
      {
        v24 = 1;
        do
        {
          v21 = ((_DWORD)v21 + v24) & v20;
          v25 = *((_DWORD *)v8 + v21);
          ++v24;
          if (v25)
            v26 = v25 == v17;
          else
            v26 = 1;
        }
        while (!v26);
      }
      *((_DWORD *)v8 + v21) = v17;
    }
  }
  if ((_DWORD)v5 != 2)
LABEL_19:
    WTF::fastFree(v7, v9, v10, v11, v12, v13, v14, v15);
  *v6 = (unint64_t)v8;
}

uint64_t WTF::SmallSet<JSC::B3::Air::Tmp,JSC::B3::Air::TmpHash,2u>::bucket(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  BOOL v11;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
  v5 = *(_DWORD *)(a1 + 4) - 1;
  v6 = v5 & (v4 ^ HIWORD(v4));
  v7 = *(_DWORD *)(v2 + 4 * v6);
  if (v7)
    v8 = v7 == a2;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = 1;
    do
    {
      v6 = ((_DWORD)v6 + v9) & v5;
      v10 = *(_DWORD *)(v2 + 4 * v6);
      ++v9;
      if (v10)
        v11 = v10 == a2;
      else
        v11 = 1;
    }
    while (!v11);
  }
  return v2 + 4 * v6;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::PatchCustom::isValidForm(JSC::B3::Air::Inst&)::$_0>(JSC::B3::Air::PatchCustom::isValidForm(JSC::B3::Air::Inst&)::$_0 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::PatchCustom::isValidForm(JSC::B3::Air::Inst&)::$_0>(JSC::B3::Air::PatchCustom::isValidForm(JSC::B3::Air::Inst&)::$_0 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(**(_QWORD **)(a1 + 16), a2, a3);
}

uint64_t JSC::B3::Air::Inst::forEachTmp<JSC::B3::Air::PatchCustom::isValidForm(JSC::B3::Air::Inst&)::$_0>(JSC::B3::Air::PatchCustom::isValidForm(JSC::B3::Air::Inst&)::$_0 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t result, uint64_t a2, unsigned int a3)
{
  int v3;
  int v5;
  unsigned int v7;
  _QWORD **v8;
  int v9;
  char v11;
  unsigned int v12;
  BOOL v14;
  BOOL v17;

  switch(*(_BYTE *)(a2 + 8))
  {
    case 1:
      v5 = *(_DWORD *)(a2 + 16);
      v3 = v5 - 1;
      if (v5 > 0xFFFFFFDF || v3 <= 0x1F)
      {
        if ((a3 & 0xFFFFFFFC) == 4 || a3 >= 2 && (a3 > 0xB || ((1 << a3) & 0xBF0) == 0))
        {
          if (v5 <= 0)
            LOBYTE(v3) = 31 - v5;
          goto LABEL_17;
        }
        if (v5 <= 0)
          LOBYTE(v3) = 31 - v5;
        goto LABEL_42;
      }
      return result;
    case 6:
    case 7:
    case 8:
      v3 = *(_DWORD *)(a2 + 16);
      goto LABEL_35;
    case 0xB:
      v9 = *(_DWORD *)(a2 + 16);
      if (v9 <= 0xFFFFFFDF && (v9 - 1) > 0x1F)
        goto LABEL_34;
      if (v9 <= 0)
        v11 = 31 - v9;
      else
        v11 = v9 - 1;
      v12 = v11 & 0x7F;
      if (v12 >= 0x40)
        goto LABEL_58;
      v14 = ((**(_QWORD **)(result + 16) >> v12) & 1) == 0 && **(_BYTE **)result != 0;
      **(_BYTE **)result = v14;
LABEL_34:
      v3 = *(_DWORD *)(a2 + 20);
LABEL_35:
      if (v3 <= 0xFFFFFFDF && (v3 - 1) > 0x1F)
        return result;
      if (v3 <= 0)
        LOBYTE(v3) = 31 - v3;
      else
        LOBYTE(v3) = v3 - 1;
LABEL_42:
      v7 = v3 & 0x7F;
      if (v7 >= 0x40)
      {
LABEL_58:
        __break(1u);
      }
      else
      {
        v8 = (_QWORD **)(result + 16);
LABEL_44:
        v17 = ((**v8 >> v7) & 1) == 0 && **(_BYTE **)result != 0;
        **(_BYTE **)result = v17;
      }
      return result;
    case 0xC:
    case 0xD:
      v3 = *(_DWORD *)(a2 + 16);
      if (v3 <= 0xFFFFFFDF && (v3 - 1) > 0x1F)
        return result;
      if (v3 <= 0)
        LOBYTE(v3) = 31 - v3;
      else
        LOBYTE(v3) = v3 - 1;
LABEL_17:
      v7 = v3 & 0x7F;
      if (v7 >= 0x40)
        goto LABEL_58;
      v8 = (_QWORD **)(result + 8);
      goto LABEL_44;
    default:
      return result;
  }
}

uint64_t WTF::HashTable<JSC::B3::Air::Arg,JSC::B3::Air::Arg,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>>::add(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int8x8_t v15;
  int8x8_t v16;
  int32x2_t v17;
  int8x8_t v18;
  int8x8_t v19;
  __int32 v20;
  int v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  __int128 v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::B3::Air::Arg,JSC::B3::Air::Arg,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *(_QWORD *)a3 + ~(*(_QWORD *)a3 << 32);
  v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
  v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
  v13 = ((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~((_DWORD)v12 << 27));
  v14 = *((_DWORD *)a3 + 3);
  v15 = (int8x8_t)vadd_s32((int32x2_t)a3[1], (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32((int32x2_t)a3[1], 0xFuLL)));
  v16 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v15, 0xAuLL), v15), (int32x2_t)0x900000009);
  v17 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v16, 6uLL), v16);
  v18 = (int8x8_t)vadd_s32(v17, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v17, 0xBuLL)));
  v19 = veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v18, 0x10uLL), v18);
  v20 = v14 + *((char *)a3 + 8) + v19.i32[0] + v13 + v19.i32[1];
  v21 = 1;
  result = 0x7FFFFFFFLL;
  while (1)
  {
    v23 = v20 & v8;
    v24 = v6 + 32 * v23;
    v25 = *(unsigned __int8 *)(v24 + 8);
    if (*(_QWORD *)v24)
      v26 = 0;
    else
      v26 = v25 == 0;
    v27 = v26;
    v29 = *(_DWORD *)(v24 + 16);
    v28 = *(_DWORD *)(v24 + 20);
    v31 = v27 == 1 && v29 == 0 && v28 == 0;
    if (v31 && *(_DWORD *)(v24 + 12) == 1)
    {
      if (v9)
      {
        *(_QWORD *)v9 = 0;
        *(_WORD *)(v9 + 8) = 512;
        *(_DWORD *)(v9 + 12) = 1;
        *(_QWORD *)(v9 + 16) = 0;
        *(_BYTE *)(v9 + 24) = 0;
        --*(_DWORD *)(*a2 - 16);
        v24 = v9;
      }
      v36 = *a3;
      *(_OWORD *)(v24 + 9) = *(__int128 *)((char *)a3 + 9);
      *(_OWORD *)v24 = v36;
      v37 = *a2;
      if (*a2)
        v38 = *(_DWORD *)(v37 - 12) + 1;
      else
        v38 = 1;
      *(_DWORD *)(v37 - 12) = v38;
      v39 = *a2;
      if (*a2)
        v40 = *(_DWORD *)(v39 - 12);
      else
        v40 = 0;
      v41 = (*(_DWORD *)(v39 - 16) + v40);
      v42 = *(unsigned int *)(v39 - 4);
      if (v42 > 0x400)
      {
        if (v42 > 2 * v41)
          goto LABEL_49;
      }
      else
      {
        if (3 * v42 > 4 * v41)
        {
LABEL_49:
          v43 = v39 + 32 * v42;
          v44 = 1;
          goto LABEL_50;
        }
        if (!(_DWORD)v42)
        {
          v45 = 8;
LABEL_61:
          result = (uint64_t)WTF::HashTable<JSC::B3::Air::Arg,JSC::B3::Air::Arg,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>>::rehash(a2, v45, (int32x2_t *)v24);
          v24 = result;
          v39 = *a2;
          if (*a2)
            v42 = *(unsigned int *)(v39 - 4);
          else
            v42 = 0;
          goto LABEL_49;
        }
      }
      v45 = (_DWORD)v42 << (6 * *(_DWORD *)(v39 - 12) >= (2 * v42));
      goto LABEL_61;
    }
    v32 = *(_QWORD *)v24 == *(_QWORD *)a3 && v25 == *((unsigned __int8 *)a3 + 8);
    v33 = v32 && v29 == *((_QWORD *)a3 + 2);
    v34 = v33 && v28 == HIDWORD(*((_QWORD *)a3 + 2));
    if (v34 && *(_DWORD *)(v6 + 32 * v23 + 12) == v14)
      break;
    if (v29 != 0x7FFFFFFF)
      v27 = 0;
    if (v27 == 1 && v28 == 0 && *(_DWORD *)(v6 + 32 * v23 + 12) == 1)
      v9 = v6 + 32 * v23;
    v20 = v21 + v23;
    ++v21;
  }
  if ((v7 & 1) != 0)
    v46 = 0;
  else
    v46 = *(unsigned int *)(v6 - 4);
  v44 = 0;
  v43 = v6 + 32 * v46;
LABEL_50:
  *(_QWORD *)a1 = v24;
  *(_QWORD *)(a1 + 8) = v43;
  *(_BYTE *)(a1 + 16) = v44;
  return result;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashTraits<JSC::B3::Air::Arg>,WTF::DefaultHash<JSC::B3::Air::Arg>>::hash<JSC::B3::Air::Arg>(int32x2_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  int8x8_t v4;
  int8x8_t v5;
  int32x2_t v6;
  int8x8_t v7;
  int8x8_t v8;

  v1 = *(_QWORD *)a1 + ~(*(_QWORD *)a1 << 32);
  v2 = (v1 ^ (v1 >> 22)) + ~((v1 ^ (v1 >> 22)) << 13);
  v3 = (9 * (v2 ^ (v2 >> 8))) ^ ((9 * (v2 ^ (v2 >> 8))) >> 15);
  v4 = (int8x8_t)vadd_s32(a1[2], (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(a1[2], 0xFuLL)));
  v5 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v4, 0xAuLL), v4), (int32x2_t)0x900000009);
  v6 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v5, 6uLL), v5);
  v7 = (int8x8_t)vadd_s32(v6, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v6, 0xBuLL)));
  v8 = veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v7, 0x10uLL), v7);
  return a1[1].i32[1]
       + a1[1].i8[0]
       + v8.i32[0]
       + (((v3 + ~(v3 << 27)) >> 31) ^ ((_DWORD)v3 + ~((_DWORD)v3 << 27)))
       + v8.i32[1];
}

_OWORD *WTF::HashTable<JSC::B3::Air::Arg,JSC::B3::Air::Arg,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>>::rehash(uint64_t *a1, unsigned int a2, int32x2_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *result;
  uint64_t v21;
  int32x2_t *v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  __int32 v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int8x8_t v38;
  int8x8_t v39;
  int32x2_t v40;
  int8x8_t v41;
  int8x8_t v42;
  int i;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  _OWORD *v49;
  __int128 v50;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = a2;
  v10 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v18 = v10 + 32;
    do
    {
      *(_QWORD *)(v18 - 16) = 0;
      *(_WORD *)(v18 - 8) = 512;
      *(_DWORD *)(v18 - 4) = 1;
      *(_QWORD *)v18 = 0;
      *(_BYTE *)(v18 + 8) = 0;
      v18 += 32;
      --v9;
    }
    while (v9);
  }
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v21 = 0;
    v19 = 0;
    while (1)
    {
      v22 = (int32x2_t *)(v6 + 32 * v21);
      v23 = v22[1].i8[0];
      if (*v22)
        v24 = 0;
      else
        v24 = v23 == 0;
      v25 = v24;
      v26 = (int)v22[2];
      v27 = HIDWORD(*(_QWORD *)&v22[2]);
      if (v25 == 1 && v26 == 0x7FFFFFFF && v27 == 0)
      {
        v31 = v22[1].i32[1];
      }
      else
      {
        if (v26)
          v25 = 0;
        if (v25 != 1 || v27 != 0)
        {
LABEL_34:
          v32 = *a1;
          if (*a1)
            v33 = *(_DWORD *)(v32 - 8);
          else
            v33 = 0;
          v34 = 0;
          v35 = (*(_QWORD *)v22 + ~(*(_QWORD *)v22 << 32)) ^ ((unint64_t)(*(_QWORD *)v22 + ~(*(_QWORD *)v22 << 32)) >> 22);
          v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
          v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
          v38 = (int8x8_t)vadd_s32(v22[2], (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v22[2], 0xFuLL)));
          v39 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v38, 0xAuLL), v38), (int32x2_t)0x900000009);
          v40 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v39, 6uLL), v39);
          v41 = (int8x8_t)vadd_s32(v40, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v40, 0xBuLL)));
          v42 = veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v41, 0x10uLL), v41);
          for (i = v23 + *(_DWORD *)(v6 + 32 * v21 + 12) + ((v37 >> 31) ^ v37) + v42.i32[0] + v42.i32[1]; ; i = v34 + v44)
          {
            v44 = i & v33;
            v45 = v32 + 32 * v44;
            v11 = (void *)*(unsigned int *)(v45 + 16);
            v12 = *(unsigned int *)(v45 + 20);
            v46 = !*(_QWORD *)v45 && *(_BYTE *)(v45 + 8) == 0;
            v47 = v46 && (_DWORD)v11 == 0;
            v48 = v47 && (_DWORD)v12 == 0;
            if (v48 && *(_DWORD *)(v45 + 12) == 1)
              break;
            ++v34;
          }
          v49 = (_OWORD *)(v32 + 32 * v44);
          v50 = *(_OWORD *)v22[2].i8;
          *v49 = *(_OWORD *)v22->i8;
          v49[1] = v50;
          if (v22 == a3)
            v19 = v49;
          goto LABEL_52;
        }
        v31 = *(_DWORD *)(v6 + 32 * v21 + 12);
      }
      if (v31 != 1)
        goto LABEL_34;
LABEL_52:
      if (++v21 == v7)
        goto LABEL_53;
    }
  }
  v19 = 0;
  result = 0;
  if (v6)
  {
LABEL_53:
    WTF::fastFree(v6 - 16, v11, v12, v13, v14, v15, v16, v17);
    return v19;
  }
  return result;
}

BOOL JSC::B3::Air::ArgHash::equal(JSC::B3::Air::ArgHash *this, const JSC::B3::Air::Arg *a2, const JSC::B3::Air::Arg *a3)
{
  return *(_QWORD *)this == *(_QWORD *)a2
      && *((unsigned __int8 *)this + 8) == *((unsigned __int8 *)a2 + 8)
      && *((_DWORD *)this + 4) == *((_DWORD *)a2 + 4)
      && *((_DWORD *)this + 5) == *((_DWORD *)a2 + 5)
      && *((_DWORD *)this + 3) == *((_DWORD *)a2 + 3);
}

unsigned int *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),JSC::B3::Air::WasmBoundsCheckCustom::generate(JSC::B3::Air::Inst &,JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)::$_0>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *result;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  BOOL v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;

  result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_DWORD *)(v12 + 44);
  if (v13 == 1)
  {
    v14 = *(unsigned int **)(*(_QWORD *)(a3 + 48) + 296);
    if (v14)
    {
      v20 = v14 + 2;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
    }
    v22 = v14 + 2;
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, a2, 0xFFFFFFFFLL);
    do
    {
      v23 = __ldaxr(v22);
      v19 = --v23 == 0;
    }
    while (__stlxr(v23, v22));
  }
  else
  {
    if (v13)
      return result;
    v14 = *(unsigned int **)(*(_QWORD *)(a3 + 48) + 296);
    if (v14)
    {
      v15 = v14 + 2;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
      v12 = *(_QWORD *)(a1 + 32);
    }
    v17 = v14 + 2;
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t, _QWORD))(*(_QWORD *)v14 + 16))(v14, a2, *(char *)(v12 + 48));
    do
    {
      v18 = __ldaxr(v17);
      v19 = --v18 == 0;
    }
    while (__stlxr(v18, v17));
  }
  if (v19)
  {
    atomic_store(1u, v14 + 2);
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
  }
  return result;
}

uint64_t WTF::HashTable<JSC::B3::Air::Inst *,WTF::KeyValuePair<JSC::B3::Air::Inst *,std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Inst *,std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>>>,WTF::DefaultHash<JSC::B3::Air::Inst *>,WTF::HashMap<JSC::B3::Air::Inst *,std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::DefaultHash<JSC::B3::Air::Inst *>,WTF::HashTraits<JSC::B3::Air::Inst *>,WTF::HashTraits<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Inst *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v9 + 24);
    do
    {
      *(v18 - 1) = 0;
      *v18 = -1;
      v18 += 2;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (uint64_t *)(v6 + 16 * v19);
      v22 = *v21;
      if ((unint64_t)(*v21 + 1) >= 2)
      {
        v23 = *a1;
        if (*a1)
          v24 = *(_DWORD *)(v23 - 8);
        else
          v24 = 0;
        v25 = (~(v22 << 32) + v22) ^ ((unint64_t)(~(v22 << 32) + v22) >> 22);
        v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
        v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
        v28 = v24 & ((v27 >> 31) ^ v27);
        v29 = 1;
        do
        {
          v30 = v28;
          v31 = *(_QWORD *)(v23 + 16 * v28);
          v28 = (v28 + v29++) & v24;
        }
        while (v31);
        v32 = v23 + 16 * v30;
        *(_QWORD *)v32 = v22;
        v33 = v6 + 16 * v19;
        *(_DWORD *)(v32 + 8) = *(_DWORD *)(v33 + 8);
        *(_DWORD *)(v32 + 12) = *(_DWORD *)(v33 + 12);
        if (v21 == a3)
          v20 = v32;
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

uint64_t WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::rehash(uint64_t *a1, unsigned int a2, int32x2_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int32x2_t *v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  int v26;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int8x8_t v42;
  int8x8_t v43;
  int32x2_t v44;
  int8x8_t v45;
  int8x8_t v46;
  int i;
  unsigned int v48;
  uint64_t v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t result;
  uint64_t v69;
  uint64_t v70;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    v16 = v8 + 24;
    v17 = a2;
    do
    {
      *(_QWORD *)(v16 - 8) = 0;
      *(_WORD *)v16 = 512;
      *(_DWORD *)(v16 + 4) = 1;
      *(_QWORD *)(v16 + 8) = 0;
      *(_BYTE *)(v16 + 16) = 0;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0;
      v16 += 48;
      --v17;
    }
    while (v17);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v18 = 0;
    v19 = 0;
    v20 = v6;
    while (1)
    {
      v21 = (int32x2_t *)(v5 + 48 * v18);
      v22 = v21[1].i8[0];
      if (*v21)
        v23 = 0;
      else
        v23 = v22 == 0;
      v24 = v23;
      v25 = (int)v21[2];
      v26 = HIDWORD(*(_QWORD *)&v21[2]);
      if (v24 == 1 && v25 == 0x7FFFFFFF && v26 == 0)
      {
        if (v21[1].i32[1] != 1)
          goto LABEL_32;
      }
      else
      {
        if (v25)
          v24 = 0;
        v29 = v24 == 1 && v26 == 0;
        if (!v29 || v21[1].i32[1] != 1)
        {
LABEL_32:
          v36 = *a1;
          if (*a1)
            v37 = *(_DWORD *)(v36 - 8);
          else
            v37 = 0;
          v38 = 0;
          v39 = (*(_QWORD *)v21 + ~(*(_QWORD *)v21 << 32)) ^ ((unint64_t)(*(_QWORD *)v21 + ~(*(_QWORD *)v21 << 32)) >> 22);
          v40 = 9 * ((v39 + ~(v39 << 13)) ^ ((v39 + ~(v39 << 13)) >> 8));
          v41 = (v40 ^ (v40 >> 15)) + ~((v40 ^ (v40 >> 15)) << 27);
          v42 = (int8x8_t)vadd_s32(v21[2], (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v21[2], 0xFuLL)));
          v43 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v42, 0xAuLL), v42), (int32x2_t)0x900000009);
          v44 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v43, 6uLL), v43);
          v45 = (int8x8_t)vadd_s32(v44, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v44, 0xBuLL)));
          v46 = veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v45, 0x10uLL), v45);
          for (i = v46.i32[0] + v22 + ((v41 >> 31) ^ v41) + v21[1].i32[1] + v46.i32[1]; ; i = v38 + v48)
          {
            v48 = i & v37;
            v49 = v36 + 48 * (i & v37);
            v50 = !*(_QWORD *)v49 && *(_BYTE *)(v49 + 8) == 0;
            v51 = v50 && *(_DWORD *)(v49 + 16) == 0;
            v52 = v51 && *(_DWORD *)(v49 + 20) == 0;
            if (v52 && *(_DWORD *)(v49 + 12) == 1)
              break;
            ++v38;
          }
          v53 = v36 + 48 * v48;
          v56 = *(_QWORD *)(v53 + 32);
          v55 = (_QWORD *)(v53 + 32);
          v54 = v56;
          if (v56)
          {
            *v55 = 0;
            *(_DWORD *)(v36 + 48 * v48 + 40) = 0;
            v65 = v19;
            v70 = v20;
            WTF::fastFree(v54, v9, v10, v11, v12, v13, v14, v15);
            v20 = v70;
            v19 = v65;
          }
          v57 = *(_OWORD *)v21[2].i8;
          *(_OWORD *)v49 = *(_OWORD *)v21->i8;
          *(_OWORD *)(v49 + 16) = v57;
          v58 = v5 + 48 * v18;
          *v55 = 0;
          v55[1] = 0;
          v60 = *(_QWORD *)(v58 + 32);
          v59 = v58 + 32;
          *(_QWORD *)v59 = 0;
          *v55 = v60;
          v61 = *(_DWORD *)(v59 + 8);
          *(_DWORD *)(v59 + 8) = 0;
          v62 = v36 + 48 * v48;
          *(_DWORD *)(v62 + 40) = v61;
          v63 = *(_DWORD *)(v59 + 12);
          *(_DWORD *)(v59 + 12) = 0;
          *(_DWORD *)(v62 + 44) = v63;
          v64 = *(_QWORD *)v59;
          if (*(_QWORD *)v59)
          {
            *(_QWORD *)v59 = 0;
            *(_DWORD *)(v59 + 8) = 0;
            v66 = v19;
            v67 = v20;
            WTF::fastFree(v64, v9, v10, v11, v12, v13, v14, v15);
            v20 = v67;
            v19 = v66;
          }
          if (v21 == a3)
            v19 = v49;
          goto LABEL_54;
        }
        v30 = v5 + 48 * v18;
        v33 = *(_QWORD *)(v30 + 32);
        v32 = (_QWORD *)(v30 + 32);
        v31 = v33;
        if (v33)
        {
          *v32 = 0;
          *(_DWORD *)(v5 + 48 * v18 + 40) = 0;
          v34 = v19;
          v35 = v20;
          WTF::fastFree(v31, v9, v10, v11, v12, v13, v14, v15);
          v20 = v35;
          v19 = v34;
        }
      }
LABEL_54:
      if (++v18 == v20)
        goto LABEL_57;
    }
  }
  v19 = 0;
  result = 0;
  if (v5)
  {
LABEL_57:
    v69 = v19;
    WTF::fastFree(v5 - 16, v9, v10, v11, v12, v13, v14, v15);
    return v69;
  }
  return result;
}

__n128 WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::ShufflePair const&>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v3 = WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 12);
  *(_OWORD *)v4 = *(_OWORD *)v3;
  v6 = *(_OWORD *)(v3 + 32);
  result = *(__n128 *)(v3 + 48);
  v7 = *(_OWORD *)(v3 + 16);
  *(_QWORD *)(v4 + 64) = *(_QWORD *)(v3 + 64);
  *(_OWORD *)(v4 + 32) = v6;
  *(__n128 *)(v4 + 48) = result;
  *(_OWORD *)(v4 + 16) = v7;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 72 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0x38E38E4)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 72 * v8;
    v11 = WTF::fastMalloc((WTF *)(72 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x48;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v9)
    {
      v19 = 72 * v9;
      v20 = v5;
      do
      {
        *(_OWORD *)v11 = *(_OWORD *)v20;
        v21 = *(_OWORD *)(v20 + 16);
        v22 = *(_OWORD *)(v20 + 32);
        v23 = *(_OWORD *)(v20 + 48);
        *(_QWORD *)(v11 + 64) = *(_QWORD *)(v20 + 64);
        *(_OWORD *)(v11 + 32) = v22;
        *(_OWORD *)(v11 + 48) = v23;
        *(_OWORD *)(v11 + 16) = v21;
        v11 += 72;
        v20 += 72;
        v19 -= 72;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 <= v2)
    return 1;
  if (v4 < 0x38E38E4)
  {
    v5 = result;
    v6 = *(_QWORD *)result;
    v7 = *(unsigned int *)(result + 12);
    v8 = 72 * v4;
    v9 = WTF::fastMalloc((WTF *)(72 * v4));
    *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF8) / 0x48;
    *(_QWORD *)v5 = v9;
    if ((_DWORD)v7)
    {
      v17 = 72 * v7;
      v18 = v6;
      do
      {
        *(_OWORD *)v9 = *(_OWORD *)v18;
        v19 = *(_OWORD *)(v18 + 16);
        v20 = *(_OWORD *)(v18 + 32);
        v21 = *(_OWORD *)(v18 + 48);
        *(_QWORD *)(v9 + 64) = *(_QWORD *)(v18 + 64);
        *(_OWORD *)(v9 + 32) = v20;
        *(_OWORD *)(v9 + 48) = v21;
        *(_OWORD *)(v9 + 16) = v19;
        v9 += 72;
        v18 += 72;
        v17 -= 72;
      }
      while (v17);
    }
    if (v6)
    {
      if (*(_QWORD *)v5 == v6)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

__n128 WTF::Vector<JSC::B3::Air::Arg,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Arg&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _OWORD *v10;
  __n128 result;
  __int128 v12;

  v9 = WTF::Vector<JSC::B3::Air::Arg,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  v10 = (_OWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
  result = *(__n128 *)v9;
  v12 = *(_OWORD *)(v9 + 16);
  *v10 = *(_OWORD *)v9;
  v10[1] = v12;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::B3::Air::Arg,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 32 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
        return *(_QWORD *)a1 + 32 * ((uint64_t)(v8 - v10) >> 5);
      if (v15 < 0x11)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
        goto LABEL_33;
      }
      if (!(v15 >> 27))
      {
        v16 = WTF::fastMalloc((WTF *)(32 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_33:
        v27 = 0;
        do
        {
          v28 = (_OWORD *)(v16 + v27);
          v29 = *(_OWORD *)(v10 + v27 + 16);
          *v28 = *(_OWORD *)(v10 + v27);
          v28[1] = v29;
          v27 += 32;
        }
        while (32 * v11 != v27);
        if (a1 + 16 != v10 && v10)
        {
          if (*(_QWORD *)a1 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
        }
        return *(_QWORD *)a1 + 32 * ((uint64_t)(v8 - v10) >> 5);
      }
LABEL_42:
      __break(0xC471u);
      JUMPOUT(0x1980AAC38);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v20 = (unint64_t)a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (v20 < 0x11)
    {
      v22 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    else
    {
      if (v20 >> 27)
        goto LABEL_42;
      v22 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v20));
      *(_DWORD *)(a1 + 8) = v20;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    v23 = 32 * v21;
    v24 = (__int128 *)v10;
    do
    {
      v25 = *v24;
      v26 = v24[1];
      v24 += 2;
      *v22 = v25;
      v22[1] = v26;
      v22 += 2;
      v23 -= 32;
    }
    while (v23);
LABEL_27:
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

uint64_t WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<JSC::B3::Air::Arg,WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::B3::Air::Arg>>,JSC::B3::Air::Arg>(uint64_t a1, int32x2_t *a2)
{
  int v2;
  int32x2_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  __int32 v8;
  int32x2_t v9;
  int8x8_t v10;
  int8x8_t v11;
  int32x2_t v12;
  int8x8_t v13;
  int8x8_t v14;
  unsigned int v15;
  int v16;
  __int32 i;
  int v18;
  uint64_t v19;
  int v20;
  __int32 v21;
  BOOL v23;
  BOOL v24;
  BOOL v25;

  if (a1)
  {
    v2 = 0;
    v3 = *a2;
    v4 = *(_QWORD *)a2 + ~(*(_QWORD *)a2 << 32);
    v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
    v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
    v7 = ((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27));
    v8 = a2[1].i32[1];
    v9 = a2[2];
    v10 = (int8x8_t)vadd_s32(v9, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v9, 0xFuLL)));
    v11 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v10, 0xAuLL), v10), (int32x2_t)0x900000009);
    v12 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v11, 6uLL), v11);
    v13 = (int8x8_t)vadd_s32(v12, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v12, 0xBuLL)));
    v14 = veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v13, 0x10uLL), v13);
    v15 = *(_DWORD *)(a1 - 8);
    v16 = a2[1].u8[0];
    for (i = v8 + a2[1].i8[0] + v14.i32[0] + v7 + v14.i32[1]; ; i = v2 + v18)
    {
      v18 = i & v15;
      v19 = a1 + 48 * (i & v15);
      v20 = *(unsigned __int8 *)(v19 + 8);
      v21 = *(_DWORD *)(v19 + 16);
      if (*(_QWORD *)v19 == *(_QWORD *)&v3 && v20 == v16)
      {
        v20 = v16;
        if (v21 == v9.i32[0])
        {
          if (*(_DWORD *)(v19 + 20) == v9.i32[1])
          {
            v21 = v9.i32[0];
            v20 = v16;
            if (*(_DWORD *)(v19 + 12) == v8)
              return v19;
          }
          else
          {
            v21 = v9.i32[0];
            v20 = v16;
          }
        }
      }
      v23 = !*(_QWORD *)v19 && v20 == 0;
      v24 = v23 && v21 == 0;
      v25 = v24 && *(_DWORD *)(v19 + 20) == 0;
      if (v25 && *(_DWORD *)(v19 + 12) == 1)
        break;
      ++v2;
    }
  }
  return 0;
}

uint64_t WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::expand(uint64_t *a1, int32x2_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::rehash(uint64_t *a1, unsigned int a2, int32x2_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t Table;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  int32x2_t *v19;
  BOOL v20;
  int v21;
  __int32 v22;
  __int32 v23;
  uint64_t v27;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v17 = 0;
  if ((_DWORD)v7)
  {
    v19 = (int32x2_t *)v6;
    v7 = v7;
    do
    {
      if (*v19)
        v20 = 0;
      else
        v20 = v19[1].i8[0] == 0;
      v21 = v20;
      v23 = v19[2].i32[0];
      v22 = v19[2].i32[1];
      if (v21 != 1 || v23 != 0x7FFFFFFF || v22 != 0)
      {
        if (v23)
          v21 = 0;
        if (v21 != 1 || v22 != 0)
          goto LABEL_28;
      }
      if (v19[1].i32[1] != 1)
      {
LABEL_28:
        WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::reinsert(*a1, v19);
        if (v19 == a3)
          v17 = v27;
      }
      v19 += 13;
      --v7;
    }
    while (v7);
    goto LABEL_31;
  }
  result = 0;
  if (v6)
  {
LABEL_31:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v17;
  }
  return result;
}

uint64_t WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = WTF::fastMalloc((WTF *)(104 * a1 + 16));
  v3 = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = v2 + 16;
    do
    {
      WTF::KeyValuePairHashTraits<WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>>::constructEmptyValue<WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits>(v5);
      v5 += 104;
      --v4;
    }
    while (v4);
  }
  return v3;
}

__n128 WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::reinsert(uint64_t a1, int32x2_t *a2)
{
  unsigned int v4;
  int v5;
  int i;
  int v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = WTF::IdentityHashTranslator<WTF::HashTraits<JSC::B3::Air::Arg>,WTF::DefaultHash<JSC::B3::Air::Arg>>::hash<JSC::B3::Air::Arg>(a2);
  for (i = 0; ; v5 = i + v7)
  {
    v7 = v5 & v4;
    v8 = a1 + 104 * (v5 & v4);
    v9 = !*(_QWORD *)v8 && *(_BYTE *)(v8 + 8) == 0;
    v10 = v9 && *(_DWORD *)(v8 + 16) == 0;
    v11 = v10 && *(_DWORD *)(v8 + 20) == 0;
    if (v11 && *(_DWORD *)(v8 + 12) == 1)
      break;
    ++i;
  }
  v12 = *(_OWORD *)a2->i8;
  v13 = *(_OWORD *)a2[4].i8;
  *(_OWORD *)(v8 + 16) = *(_OWORD *)a2[2].i8;
  *(_OWORD *)(v8 + 32) = v13;
  *(_OWORD *)v8 = v12;
  result = *(__n128 *)a2[6].i8;
  v15 = *(_OWORD *)a2[8].i8;
  v16 = *(_OWORD *)a2[10].i8;
  *(int32x2_t *)(v8 + 96) = a2[12];
  *(_OWORD *)(v8 + 64) = v15;
  *(_OWORD *)(v8 + 80) = v16;
  *(__n128 *)(v8 + 48) = result;
  return result;
}

uint64_t WTF::KeyValuePairHashTraits<WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>>::constructEmptyValue<WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits>(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_WORD *)(result + 8) = 512;
  *(_DWORD *)(result + 12) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_WORD *)(result + 40) = 512;
  *(_DWORD *)(result + 44) = 1;
  *(_QWORD *)(result + 48) = 0;
  *(_BYTE *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_WORD *)(result + 72) = 512;
  *(_DWORD *)(result + 76) = 1;
  *(_QWORD *)(result + 80) = 0;
  *(_BYTE *)(result + 88) = 0;
  *(_BYTE *)(result + 96) = 0;
  return result;
}

uint64_t *WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::take(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v3 = *a2;
  if (*a2)
    v3 += 104 * *(unsigned int *)(v3 - 4);
  if (v3 == a3)
  {
    *((_BYTE *)result + 24) = 0;
    result[2] = 0;
    result[6] = 0;
    *((_BYTE *)result + 56) = 0;
    *result = 0;
    *((_WORD *)result + 4) = 512;
    *((_DWORD *)result + 3) = 1;
    result[4] = 0;
    *((_WORD *)result + 20) = 512;
    *((_DWORD *)result + 11) = 1;
    *((_BYTE *)result + 64) = 0;
  }
  else
  {
    v4 = *(_OWORD *)(a3 + 80);
    *((_OWORD *)result + 2) = *(_OWORD *)(a3 + 64);
    *((_OWORD *)result + 3) = v4;
    result[8] = *(_QWORD *)(a3 + 96);
    v5 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)result = *(_OWORD *)(a3 + 32);
    *((_OWORD *)result + 1) = v5;
    return WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::remove(a2, a3);
  }
  return result;
}

uint64_t WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::ShufflePair&>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 12);
  *(_OWORD *)v4 = *(_OWORD *)v3;
  v6 = *(_OWORD *)(v3 + 32);
  v5 = *(_OWORD *)(v3 + 48);
  v7 = *(_OWORD *)(v3 + 16);
  *(_QWORD *)(v4 + 64) = *(_QWORD *)(v3 + 64);
  *(_OWORD *)(v4 + 32) = v6;
  *(_OWORD *)(v4 + 48) = v5;
  *(_OWORD *)(v4 + 16) = v7;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::find<WTF::IdentityHashTranslator<WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::B3::Air::Arg>>,JSC::B3::Air::Arg>(uint64_t result, int32x2_t *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = result;
    result = WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::B3::Air::Arg>>,JSC::B3::Air::Arg>(result, a2);
    if (!result)
      return v2 + 104 * *(unsigned int *)(v2 - 4);
  }
  return result;
}

uint64_t WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::B3::Air::Arg>>,JSC::B3::Air::Arg>(uint64_t result, int32x2_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int i;
  int v7;
  int v8;
  __int32 v9;
  BOOL v11;
  BOOL v13;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v5 = WTF::IdentityHashTranslator<WTF::HashTraits<JSC::B3::Air::Arg>,WTF::DefaultHash<JSC::B3::Air::Arg>>::hash<JSC::B3::Air::Arg>(a2);
    for (i = 0; ; v5 = i + v7)
    {
      v7 = v5 & v4;
      result = v3 + 104 * (v5 & v4);
      v8 = *(unsigned __int8 *)(result + 8);
      v9 = *(_DWORD *)(result + 16);
      if (*(_QWORD *)result == *a2 && v8 == a2[1].u8[0])
      {
        v8 = a2[1].u8[0];
        if (v9 == a2[2].i32[0])
        {
          v9 = a2[2].i32[0];
          v8 = a2[1].u8[0];
          if (*(_DWORD *)(result + 20) == a2[2].i32[1])
          {
            v9 = a2[2].i32[0];
            v8 = a2[1].u8[0];
            if (*(_DWORD *)(result + 12) == a2[1].i32[1])
              break;
          }
        }
      }
      if (*(_QWORD *)result)
        v11 = 0;
      else
        v11 = v8 == 0;
      v13 = v11 && v9 == 0 && *(_DWORD *)(result + 20) == 0;
      if (v13 && *(_DWORD *)(result + 12) == 1)
        return 0;
      ++i;
    }
  }
  return result;
}

uint64_t *WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::remove(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)a2 = 0;
  *(_WORD *)(a2 + 8) = 512;
  *(_QWORD *)(a2 + 12) = 0x7FFFFFFF00000001;
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return (uint64_t *)WTF::HashTable<JSC::B3::Air::Arg,WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair>>,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashMap<JSC::B3::Air::Arg,JSC::B3::Air::ShufflePair,WTF::DefaultHash<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::Arg>,WTF::HashTraits<JSC::B3::Air::ShufflePair>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Arg>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::Rotate::Rotate(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 8) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 12) = v2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  v3 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(result + 16) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  *(_DWORD *)(result + 24) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  *(_DWORD *)(result + 28) = v3;
  return result;
}

uint64_t WTF::Vector<JSC::B3::Air::`anonymous namespace'::Rotate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 32 * *(unsigned int *)(result + 12) > a3)
  {
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 27))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = WTF::fastMalloc((WTF *)(32 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = v11;
      v20 = 32 * v10;
      v21 = (uint64_t *)v5;
      do
      {
        v19 += 32;
        v21 += 4;
        v20 -= 32;
      }
      while (v20);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::B3::Air::`anonymous namespace'::Rotate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = WTF::fastMalloc((WTF *)(32 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = v9;
        v18 = 32 * v8;
        v19 = (uint64_t *)v7;
        do
        {
          v17 += 32;
          v19 += 4;
          v18 -= 32;
        }
        while (v18);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void JSC::B3::Air::fixSpillsAfterTerminals(JSC::B3::Air *this, JSC::B3::Air::Code *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  int isTerminal;
  WTF *v23;
  _BYTE *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  JSC::B3::Air::Code **v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  const JSC::B3::Air::Inst *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  const JSC::B3::Air::Inst *v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  WTF *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  _QWORD *v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  _QWORD v80[13];
  int v81;
  unint64_t v82;
  const JSC::B3::Air::Inst *v83;
  uint64_t v84;
  uint64_t v85;
  JSC::B3::Air *v86;
  WTF *v87;
  uint64_t v88;
  _BYTE v89[1088];
  uint64_t *v90;
  _BYTE *v91;
  uint64_t v92;
  _BYTE v93[136];

  v8 = (_QWORD *)((char *)this + 96);
  v90 = (uint64_t *)((char *)this + 96);
  v91 = v93;
  v92 = 8;
  v86 = this;
  v87 = (WTF *)v89;
  v88 = 8;
  v9 = *((unsigned int *)this + 27);
  if (!(_DWORD)v9)
    goto LABEL_45;
  v11 = 0;
  while (!*(_QWORD *)(*v8 + 8 * v11))
  {
    if (v9 == ++v11)
      goto LABEL_20;
  }
  if ((_DWORD)v9 != (_DWORD)v11)
  {
    LODWORD(v12) = *((_DWORD *)this + 27);
    LODWORD(v13) = v11;
    do
    {
      if (v12 <= v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1980AB76CLL);
      }
      v14 = *(_QWORD *)(*v8 + 8 * v13);
      v15 = (_QWORD *)(v14 + 8);
      v16 = *(_DWORD *)(v14 + 20);
      v17 = ((unint64_t)v16 << 7) - 128;
      v18 = v16;
      while (1)
      {
        v19 = v18;
        v20 = v16;
        v21 = *(unsigned int *)(v14 + 20);
        if (!v18)
          break;
        --v18;
        if (v19 - 1 >= v21)
        {
          __break(0xC471u);
          JUMPOUT(0x1980AB774);
        }
        isTerminal = JSC::B3::Air::Inst::isTerminal((JSC::B3::Air::Inst *)(*v15 + v17));
        v17 -= 128;
        v16 = v20 - 1;
        if (isTerminal)
        {
          v21 = *(unsigned int *)(v14 + 20);
          break;
        }
      }
      if ((_DWORD)v21 != (_DWORD)v19)
      {
        v83 = (const JSC::B3::Air::Inst *)&v85;
        v84 = 1;
        if (v21 <= v19)
          goto LABEL_75;
        v76 = v8;
        v77 = v9;
        v43 = v19;
        v44 = (unint64_t)v20 << 7;
        v45 = v19;
        do
        {
          v46 = (const JSC::B3::Air::Inst *)(*v15 + v44);
          if (HIDWORD(v84) == (_DWORD)v84)
          {
            WTF::Vector<JSC::B3::Air::Inst,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst&>((uint64_t)&v83, (unint64_t)v46, a3, a4, a5, a6, a7, a8);
          }
          else
          {
            JSC::B3::Air::Inst::Inst((const JSC::B3::Air::Inst *)((char *)v83 + 128 * (unint64_t)HIDWORD(v84)), v46);
            ++HIDWORD(v84);
          }
          ++v45;
          v44 += 128;
        }
        while (v45 < *(unsigned int *)(v14 + 20));
        if (!HIDWORD(v84))
        {
LABEL_75:
          __break(0xC471u);
          JUMPOUT(0x1980AB6D0);
        }
        v47 = *(unsigned int *)(v14 + 36);
        if ((_DWORD)v47)
        {
          v57 = *(unint64_t **)(v14 + 24);
          v58 = &v57[2 * v47];
          do
          {
            v59 = *v57;
            v82 = v59;
            if (*(_DWORD *)(v59 + 84) == 1)
            {
              JSC::B3::Air::InsertionSet::insertInsts<WTF::Vector<JSC::B3::Air::Inst,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v86, (uint64_t)v83, HIDWORD(v84), a4, a5, a6, a7, a8);
              JSC::B3::Air::InsertionSet::execute((JSC::B3::Air::InsertionSet *)&v86, (JSC::B3::Air::BasicBlock *)v59, v60, v61, v62, v63, v64, v65);
            }
            else
            {
              v66 = JSC::B3::GenericBlockInsertionSet<JSC::B3::Air::BasicBlock>::insert((uint64_t)&v90, *(_DWORD *)v59, *(double *)(v59 + 104));
              if (!HIDWORD(v84))
                goto LABEL_75;
              v67 = v66;
              v68 = v83;
              v69 = (unint64_t)HIDWORD(v84) << 7;
              do
              {
                JSC::B3::Air::BasicBlock::appendInst<JSC::B3::Air::Inst const&>(v67, v68);
                v68 = (const JSC::B3::Air::Inst *)((char *)v68 + 128);
                v69 -= 128;
              }
              while (v69);
              if (!HIDWORD(v84))
                goto LABEL_75;
              v70 = *((_QWORD *)v83 + 16 * (unint64_t)HIDWORD(v84) - 2);
              v78 = (WTF *)v80;
              v75 &= 0xFFFFFFFC;
              v79 = 3;
              v80[12] = v70;
              v81 = (v75 << 16) | 0x149;
              JSC::B3::Air::BasicBlock::appendInst<JSC::B3::Air::Inst>(v67, (unint64_t)&v78);
              v72 = v78;
              if (v80 != (_QWORD *)v78 && v78)
              {
                v78 = 0;
                LODWORD(v79) = 0;
                WTF::fastFree((unint64_t)v72, v71, a3, a4, a5, a6, a7, a8);
              }
              v73 = *(unsigned int *)(v67 + 36);
              if ((_DWORD)v73 == *(_DWORD *)(v67 + 32))
              {
                WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::BasicBlock*&>(v67 + 24, &v82, a3, a4, a5, a6, a7, a8);
              }
              else
              {
                v74 = *(_QWORD *)(v67 + 24) + 16 * v73;
                *(_QWORD *)v74 = v59;
                *(_BYTE *)(v74 + 8) = 0;
                *(_DWORD *)(v67 + 36) = v73 + 1;
              }
              *v57 = v67;
            }
            v57 += 2;
          }
          while (v57 != v58);
        }
        WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((uint64_t)v15, v43, a3, a4, a5, a6, a7, a8);
        WTF::Vector<JSC::B3::Air::Inst,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v83, v48, v49, v50, v51, v52, v53, v54);
        v8 = v76;
        v9 = v77;
      }
      v13 = (v13 + 1);
      v12 = *((unsigned int *)this + 27);
      if (v12 > v13)
      {
        while (!*(_QWORD *)(*v8 + 8 * v13))
        {
          if (v12 == ++v13)
          {
            LODWORD(v13) = *((_DWORD *)this + 27);
            break;
          }
        }
      }
    }
    while ((_DWORD)v9 != (_DWORD)v13);
    if (HIDWORD(v92))
    {
      WTF::bubbleSort<WTF::Insertion<std::unique_ptr<JSC::B3::Air::BasicBlock>> *>((uint64_t)v91, (uint64_t)&v91[16 * HIDWORD(v92)]);
      WTF::executeInsertions<WTF::Vector<std::unique_ptr<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::Air::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v90, (unsigned int *)&v91, v27, v28, v29, v30, v31, v32);
      WTF::Vector<std::unique_ptr<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<JSC::B3::GenericBlockInsertionSet<JSC::B3::Air::BasicBlock>::execute(void)::{lambda(std::unique_ptr<JSC::B3::Air::BasicBlock>&)#1}>(v90, (uint64_t)&v83, 0);
      v40 = *((unsigned int *)v90 + 3);
      if ((_DWORD)v40)
      {
        v55 = 0;
        v56 = *v90;
        do
        {
          **(_DWORD **)(v56 + 8 * v55) = v55;
          ++v55;
        }
        while (v40 != v55);
      }
      JSC::B3::Air::Code::resetReachability(this, v33, v34, v35, v36, v37, v38, v39);
    }
  }
LABEL_20:
  v23 = v87;
  if (HIDWORD(v88))
  {
    WTF::VectorTypeOperations<WTF::Insertion<JSC::B3::Air::Inst>>::destruct((char *)v87, (char *)v87 + 136 * HIDWORD(v88), a3, a4, a5, a6, a7, a8);
LABEL_45:
    v23 = v87;
  }
  if (v89 != (_BYTE *)v23 && v23 != 0)
  {
    v87 = 0;
    LODWORD(v88) = 0;
    WTF::fastFree((unint64_t)v23, a2, a3, a4, a5, a6, a7, a8);
  }
  v25 = v91;
  if (HIDWORD(v92))
  {
    v41 = 16 * HIDWORD(v92);
    v42 = (JSC::B3::Air::Code **)(v91 + 8);
    do
    {
      a2 = *v42;
      *v42 = 0;
      if (a2)
        std::default_delete<JSC::B3::Air::BasicBlock>::operator()[abi:sn180100]((int)v42, a2, a3, a4, a5, a6, a7, a8);
      v42 += 2;
      v41 -= 16;
    }
    while (v41);
    v25 = v91;
  }
  if (v93 != v25 && v25 != 0)
  {
    v91 = 0;
    LODWORD(v92) = 0;
    WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::B3::Air::Inst::isTerminal(JSC::B3::Air::Inst *this)
{
  int v2;
  uint64_t result;

  v2 = *((__int16 *)this + 60);
  result = 1;
  if ((v2 - 290) > 0x2C || ((1 << (v2 - 34)) & 0x1F80000FFFFFLL) == 0)
  {
    switch(v2)
    {
      case 445:
      case 446:
        return result;
      case 447:
      case 449:
      case 450:
      case 451:
        result = 0;
        break;
      case 448:
        if (!*((_DWORD *)this + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x1980AB9E4);
        }
        result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)this + 88))(**(_QWORD **)this);
        break;
      default:
        result = (v2 - 210) < 4;
        break;
    }
  }
  return result;
}

void JSC::B3::Air::InsertionSet::insertInsts<WTF::Vector<JSC::B3::Air::Inst,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  WTF *v18;
  uint64_t v20;
  WTF *v21;
  int v22;
  int v23;
  _BYTE v24[96];
  _QWORD v25[2];

  if ((_DWORD)a3)
  {
    v8 = a2;
    v10 = a2 + ((unint64_t)a3 << 7);
    while (1)
    {
      v11 = *(unsigned int *)(v8 + 12);
      v20 = 0;
      v21 = (WTF *)v24;
      v22 = 3;
      v23 = v11;
      if (v11 < 4)
        break;
      if (v11 >> 27)
      {
        __break(0xC471u);
        return;
      }
      v12 = (WTF *)WTF::fastMalloc((WTF *)(32 * v11));
      v22 = v11;
      v21 = v12;
      v11 = *(unsigned int *)(v8 + 12);
      if ((_DWORD)v11)
        goto LABEL_5;
LABEL_7:
      v25[0] = *(_QWORD *)(v8 + 112);
      *(_DWORD *)((char *)v25 + 7) = *(_DWORD *)(v8 + 119);
      JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(a1, (unint64_t)&v20, a3, a4, a5, a6, a7, a8);
      v18 = v21;
      if (v24 != (_BYTE *)v21 && v21 != 0)
      {
        v21 = 0;
        v22 = 0;
        WTF::fastFree((unint64_t)v18, v17, a3, a4, a5, a6, a7, a8);
      }
      v8 += 128;
      if (v8 == v10)
        return;
    }
    v12 = (WTF *)v24;
    if (!(_DWORD)v11)
      goto LABEL_7;
LABEL_5:
    v13 = *(__int128 **)v8;
    v14 = 32 * v11;
    do
    {
      v15 = *v13;
      v16 = v13[1];
      v13 += 2;
      *(_OWORD *)v12 = v15;
      *((_OWORD *)v12 + 1) = v16;
      v12 = (WTF *)((char *)v12 + 32);
      v14 -= 32;
    }
    while (v14);
    goto LABEL_7;
  }
}

void JSC::B3::Air::InsertionSet::execute(JSC::B3::Air::InsertionSet *this, JSC::B3::Air::BasicBlock *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Air::BasicBlock *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _OWORD *v51;
  __int128 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  char v73;
  unint64_t v74;
  uint64_t *v75;
  _QWORD *v76;

  v8 = a2;
  v10 = *((_QWORD *)this + 1);
  v11 = v10 + 136 * *((unsigned int *)this + 5);
  v12 = (uint64_t *)(v10 + 136);
  do
  {
    v13 = 0xF0F0F0F0F0F0F0F1 * ((v11 - v10) >> 3);
    if (v13 < 2)
      break;
    v15 = 0;
    while (2)
    {
      v16 = 136 * v13;
      while (1)
      {
        --v13;
        a2 = (JSC::B3::Air::BasicBlock *)(v10 + v16 - 272);
        if (*(_QWORD *)(v10 + v16 - 136) < *(_QWORD *)a2)
          break;
        v16 -= 136;
        if (v13 <= 1)
        {
          if ((v15 & 1) == 0)
            goto LABEL_3;
          goto LABEL_64;
        }
      }
      std::swap[abi:sn180100]<WTF::Insertion<JSC::B3::Air::Inst>>((uint64_t *)(v10 + v16 - 136), (uint64_t *)a2, a3, a4, a5, a6, a7, a8);
      v15 = 1;
      if (v13 > 1)
        continue;
      break;
    }
LABEL_64:
    v10 += 136;
    v72 = 0xF0F0F0F0F0F0F0F1 * ((v11 - v10) >> 3);
    if (v72 < 2)
      break;
    v73 = 0;
    v74 = v72 - 1;
    v75 = v12;
    do
    {
      if (v75[17] < (unint64_t)*v75)
      {
        std::swap[abi:sn180100]<WTF::Insertion<JSC::B3::Air::Inst>>(v75 + 17, v75, a3, a4, a5, a6, a7, a8);
        v73 = 1;
      }
      v75 += 17;
      --v74;
    }
    while (v74);
    v11 -= 136;
    v12 += 17;
  }
  while ((v73 & 1) != 0);
LABEL_3:
  v14 = *((unsigned int *)this + 5);
  if ((_DWORD)v14)
  {
    v17 = (_QWORD *)((char *)v8 + 8);
    v18 = *((unsigned int *)v8 + 4);
    v19 = *((unsigned int *)v8 + 5) + v14;
    if (v19 > v18)
    {
      v68 = v18 + (v18 >> 2);
      if (v68 >= 0x10)
        v69 = v68 + 1;
      else
        v69 = 16;
      if (v69 <= v19)
        v70 = *((unsigned int *)v8 + 5) + v14;
      else
        v70 = v69;
      WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v8 + 8, v70);
      v17 = (_QWORD *)((char *)v8 + 8);
    }
    v20 = *v17;
    if (*v17)
    {
      v21 = *((unsigned int *)v8 + 5);
      if (v19 != v21)
      {
        v22 = v21 << 7;
        v23 = v19 << 7;
        do
        {
          v24 = v20 + v22;
          *(_QWORD *)v24 = v20 + v22 + 16;
          *(_QWORD *)(v24 + 8) = 3;
          *(_QWORD *)(v24 + 112) = 0;
          *(_WORD *)(v24 + 120) = 0;
          *(_BYTE *)(v24 + 122) = *(_BYTE *)(v20 + v22 + 122) & 0xFC;
          v23 -= 128;
          v20 += 128;
        }
        while (v22 != v23);
      }
    }
    *((_DWORD *)v8 + 5) = v19;
    v25 = v19;
    do
    {
      v26 = v14 - 1;
      v27 = *((unsigned int *)this + 5);
      if (v14 - 1 >= v27)
      {
        __break(0xC471u);
        JUMPOUT(0x1980ABF3CLL);
      }
      v28 = *(_QWORD *)(*((_QWORD *)this + 1) + 136 * v26) + v26;
      v29 = v25 - 1;
      if (v25 - 1 > v28)
      {
        do
        {
          v30 = v29 - v14;
          v31 = *((unsigned int *)v8 + 5);
          if (v29 - v14 >= v31)
            goto LABEL_75;
          if (v29 >= v31)
          {
            __break(0xC471u);
            JUMPOUT(0x1980ABF34);
          }
          v32 = *v17;
          v33 = *v17 + (v29 << 7);
          v35 = (_OWORD *)(v33 + 16);
          v34 = *(_QWORD *)v33;
          if (*(_QWORD *)v33 != v33 + 16)
          {
            if (v34)
            {
              *(_QWORD *)v33 = 0;
              *(_DWORD *)(v33 + 8) = 0;
              v76 = v17;
              WTF::fastFree(v34, a2, a3, a4, a5, a6, a7, a8);
              v17 = v76;
            }
            *(_QWORD *)v33 = v35;
          }
          v36 = v32 + (v30 << 7);
          v37 = *(__int128 **)v36;
          if (*(_QWORD *)v36 == v36 + 16)
          {
            v38 = *(unsigned int *)(v36 + 12);
            if ((_DWORD)v38)
            {
              v39 = 32 * v38;
              do
              {
                v40 = *v37;
                v41 = v37[1];
                v37 += 2;
                *v35 = v40;
                v35[1] = v41;
                v35 += 2;
                v39 -= 32;
              }
              while (v39);
            }
            v42 = *(_DWORD *)(v36 + 8);
          }
          else
          {
            *(_QWORD *)v36 = v36 + 16;
            *(_QWORD *)v33 = v37;
            v42 = *(_DWORD *)(v36 + 8);
            *(_DWORD *)(v36 + 8) = 3;
          }
          v43 = *(_DWORD *)(v36 + 12);
          *(_DWORD *)(v36 + 12) = 0;
          *(_DWORD *)(v33 + 8) = v42;
          *(_DWORD *)(v33 + 12) = v43;
          v44 = v32 + (v29 << 7);
          v45 = v32 + (v30 << 7);
          v46 = *(_DWORD *)(v45 + 119);
          *(_QWORD *)(v44 + 112) = *(_QWORD *)(v45 + 112);
          *(_DWORD *)(v44 + 119) = v46;
          --v29;
        }
        while (v29 > v28);
        v27 = *((unsigned int *)this + 5);
      }
      if (v26 >= v27)
      {
        __break(0xC471u);
        JUMPOUT(0x1980ABF44);
      }
      if (v28 >= *((unsigned int *)v8 + 5))
      {
LABEL_75:
        __break(0xC471u);
        JUMPOUT(0x1980ABF2CLL);
      }
      v47 = *((_QWORD *)this + 1);
      v48 = *v17;
      v49 = *v17 + (v28 << 7);
      v51 = (_OWORD *)(v49 + 16);
      v50 = *(_QWORD *)v49;
      if (*(_QWORD *)v49 != v49 + 16)
      {
        if (v50)
        {
          *(_QWORD *)v49 = 0;
          *(_DWORD *)(v49 + 8) = 0;
          v71 = v17;
          WTF::fastFree(v50, a2, a3, a4, a5, a6, a7, a8);
          v17 = v71;
        }
        *(_QWORD *)v49 = v51;
      }
      v53 = v47 + 136 * v26 + 24;
      v52 = *(__int128 **)(v47 + 136 * v26 + 8);
      if (v52 == (__int128 *)v53)
      {
        v54 = *(unsigned int *)(v47 + 136 * v26 + 20);
        if ((_DWORD)v54)
        {
          v55 = 32 * v54;
          do
          {
            v56 = *v52;
            v57 = v52[1];
            v52 += 2;
            *v51 = v56;
            v51[1] = v57;
            v51 += 2;
            v55 -= 32;
          }
          while (v55);
        }
        v58 = *(_DWORD *)(v47 + 136 * v26 + 16);
      }
      else
      {
        *(_QWORD *)(v47 + 136 * v26 + 8) = v53;
        *(_QWORD *)v49 = v52;
        v58 = *(_DWORD *)(v47 + 136 * v26 + 16);
        *(_DWORD *)(v47 + 136 * v26 + 16) = 3;
      }
      *(_DWORD *)(v49 + 8) = v58;
      v59 = *(_DWORD *)(v47 + 136 * v26 + 20);
      *(_DWORD *)(v47 + 136 * v26 + 20) = 0;
      *(_DWORD *)(v49 + 12) = v59;
      v60 = v48 + (v28 << 7);
      v61 = v47 + 136 * v26;
      v62 = *(_QWORD *)(v61 + 120);
      *(_DWORD *)(v60 + 119) = *(_DWORD *)(v61 + 127);
      *(_QWORD *)(v60 + 112) = v62;
      v14 = v26;
      v25 = v28;
    }
    while (v26);
    v63 = *((unsigned int *)this + 5);
    if ((_DWORD)v63)
    {
      v64 = 136 * v63;
      v65 = *((_QWORD *)this + 1) + 24;
      do
      {
        v66 = *(_QWORD *)(v65 - 16);
        if (v65 != v66 && v66 != 0)
        {
          *(_QWORD *)(v65 - 16) = 0;
          *(_DWORD *)(v65 - 8) = 0;
          WTF::fastFree(v66, a2, a3, a4, a5, a6, a7, a8);
        }
        v65 += 136;
        v64 -= 136;
      }
      while (v64);
    }
    *((_DWORD *)this + 5) = 0;
  }
}

unint64_t JSC::B3::Air::BasicBlock::appendInst<JSC::B3::Air::Inst const&>(uint64_t a1, const JSC::B3::Air::Inst *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t result;
  unsigned int v6;

  v3 = (_QWORD *)(a1 + 8);
  v4 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 16))
  {
    result = WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst const&>(a1 + 8, (unint64_t)a2);
    v6 = *(_DWORD *)(a1 + 20);
  }
  else
  {
    result = (unint64_t)JSC::B3::Air::Inst::Inst((JSC::B3::Air::Inst *)(*(_QWORD *)(a1 + 8) + (v4 << 7)), a2);
    v6 = *(_DWORD *)(a1 + 20) + 1;
    *(_DWORD *)(a1 + 20) = v6;
  }
  if (v6)
    return *v3 + ((unint64_t)v6 << 7) - 128;
  __break(0xC471u);
  return result;
}

unint64_t JSC::B3::Air::BasicBlock::appendInst<JSC::B3::Air::Inst>(unint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  int v25;

  v2 = a2;
  v3 = result;
  v4 = (uint64_t *)(result + 8);
  v5 = *(unsigned int *)(result + 20);
  if ((_DWORD)v5 != *(_DWORD *)(result + 16))
  {
    v6 = *v4;
    v7 = *v4 + (v5 << 7);
    v8 = (_OWORD *)(v7 + 16);
    *(_QWORD *)v7 = v7 + 16;
    *(_QWORD *)(v7 + 8) = 3;
    v10 = a2 + 16;
    v9 = *(__int128 **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v11 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v11)
      {
        v12 = 32 * v11;
        do
        {
          v13 = *v9;
          v14 = v9[1];
          v9 += 2;
          *v8 = v13;
          v8[1] = v14;
          v8 += 2;
          v12 -= 32;
        }
        while (v12);
      }
      goto LABEL_6;
    }
LABEL_13:
    *(_QWORD *)v2 = v10;
    *(_QWORD *)v7 = v9;
    v25 = *(_DWORD *)(v2 + 8);
    *(_DWORD *)(v2 + 8) = 3;
    *(_DWORD *)(v7 + 8) = v25;
    goto LABEL_6;
  }
  result = WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result + 8, v5 + 1, a2);
  v2 = result;
  v5 = *(unsigned int *)(v3 + 20);
  v6 = *(_QWORD *)(v3 + 8);
  v7 = v6 + (v5 << 7);
  v20 = (_OWORD *)(v7 + 16);
  *(_QWORD *)v7 = v7 + 16;
  *(_QWORD *)(v7 + 8) = 3;
  v10 = result + 16;
  v9 = *(__int128 **)result;
  if (*(_QWORD *)result != result + 16)
    goto LABEL_13;
  v21 = *(unsigned int *)(result + 12);
  if ((_DWORD)v21)
  {
    v22 = 32 * v21;
    do
    {
      v23 = *v9;
      v24 = v9[1];
      v9 += 2;
      *v20 = v23;
      v20[1] = v24;
      v20 += 2;
      v22 -= 32;
    }
    while (v22);
  }
LABEL_6:
  v15 = *(_DWORD *)(v2 + 12);
  *(_DWORD *)(v2 + 12) = 0;
  *(_DWORD *)(v7 + 12) = v15;
  v16 = v6 + (v5 << 7) + 112;
  v17 = *(_QWORD *)(v2 + 112);
  *(_DWORD *)(v16 + 7) = *(_DWORD *)(v2 + 119);
  *(_QWORD *)v16 = v17;
  LODWORD(v16) = *(_DWORD *)(v3 + 20);
  v18 = __CFADD__((_DWORD)v16, 1);
  v19 = (v16 + 1);
  *(_DWORD *)(v3 + 20) = v19;
  if (!v18)
    return *v4 + (v19 << 7) - 128;
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::B3::Air::Inst,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v9 = *(unsigned int *)(a1 + 12);
  v10 = *(_QWORD *)a1;
  if ((_DWORD)v9)
  {
    v11 = v9 << 7;
    v12 = v10 + 16;
    do
    {
      v13 = *(_QWORD *)(v12 - 16);
      if (v12 != v13 && v13 != 0)
      {
        *(_QWORD *)(v12 - 16) = 0;
        *(_DWORD *)(v12 - 8) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      v12 += 128;
      v11 -= 128;
    }
    while (v11);
    v10 = *(_QWORD *)a1;
  }
  if (a1 + 16 != v10 && v10 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void JSC::B3::Air::prepareForGeneration(JSC::B3::Air *this, JSC::B3::Air::Code *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v9;
  JSC::B3::Air::Code *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::B3::Air::Code *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::B3::Air::Code *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::B3::Air::Code *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  int64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unsigned int *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t j;
  unint64_t v68;
  WTF *v69;
  const void **v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  WTF *v79;
  WTF *v80;
  char *v81;
  char *v82;
  char *v83;
  BOOL v85;
  char *v86;
  char *v87;
  __int128 v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  unint64_t v93;
  char *v94;
  unint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  BOOL v103;
  char *v104;
  char *v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  BOOL v110;
  char *v111;
  unint64_t v112;
  char *v113;
  unint64_t v114;
  _DWORD *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  __int128 v121;
  WTF *v122;
  WTF *v123;
  char *v124;
  WTF *v125;
  BOOL v126;
  int v128;
  char *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  WTF **v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int *v151;
  uint64_t *v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int *v156;
  __int16 *v157;
  int v158;
  unint64_t v159;
  unsigned int *v160;
  int v161;
  int v162;
  int v164;
  uint64_t *v165;
  uint64_t v166;
  WTF *v167;
  uint64_t v168;
  unsigned int *v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  unsigned int v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  _BYTE *v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  BOOL v187;
  uint64_t v188;
  char *v189;
  int v190;
  char v191;
  int v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  int v199;
  int v200;
  unsigned int *v201;
  int v202;
  unsigned int *v203;
  WTF *v204;
  unsigned int *v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  int v209;
  int v210;
  unsigned __int8 v212;
  uint64_t v213;
  _QWORD *v214;
  char v216;
  int v217;
  int v218;
  _BYTE *v220;
  uint64_t v221;
  uint64_t v222;
  _BOOL4 v224;
  uint64_t v225;
  char v226;
  _QWORD *v227;
  _BYTE *v228;
  uint64_t v229;
  uint64_t v231;
  char v232;
  _QWORD *v233;
  int *v234;
  uint64_t v235;
  uint64_t v236;
  __int16 v237;
  int v238;
  uint64_t v239;
  int v240;
  uint64_t v242;
  int v243;
  uint64_t v245;
  unsigned __int8 v246;
  uint64_t v247;
  uint64_t v248;
  unsigned __int8 v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  char *v254;
  unsigned int v255;
  uint64_t v256;
  JSC::B3::Air::Inst *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unsigned __int8 v264;
  int v265;
  int v266;
  uint64_t v267;
  unsigned __int8 v268;
  unsigned __int8 v269;
  uint64_t v270;
  uint64_t v271;
  _QWORD *v272;
  char v274;
  __int128 *v275;
  WTF *v276;
  uint64_t v277;
  uint64_t v278;
  unsigned __int8 v279;
  uint64_t v280;
  _BYTE *v281;
  uint64_t v282;
  int v283;
  int v284;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  char v290;
  uint64_t v291;
  _BYTE *v292;
  WTF *v293;
  WTF *v294;
  WTF *v295;
  WTF *v296;
  uint64_t v297;
  char *v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  JSC::B3::Air *v302;
  WTF *v303;
  JSC::B3::Air::Code *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  JSC::B3::Air::Code *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  JSC::B3::Air::Code *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  JSC::B3::Air::Code *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  JSC::B3::Air::Code *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  JSC::B3::Air::Code *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  JSC::B3::Air::Code *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  char *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  int v360;
  char v362;
  int v363;
  char v365;
  int v366;
  char v368;
  char v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t v372;
  JSC::B3::Air::Code *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  JSC::B3::Air::Code *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  WTF *v387;
  char *v388;
  JSC::B3::Air::Code *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  JSC::B3::Air::Code *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  JSC::B3::Air::Code *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  char *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  JSC::B3::Air::GenerateAndAllocateRegisters *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  void *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  JSC::B3::Air::Code *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  int v437;
  int v438;
  unsigned __int8 v440;
  uint64_t v441;
  _QWORD *v442;
  _BOOL4 v444;
  char v445;
  char *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  _QWORD *v450;
  char v452;
  JSC::B3::Air::Code *v453;
  char *v454;
  uint64_t v455;
  _QWORD *v456;
  char v458;
  uint64_t v459;
  __int128 v460;
  __int128 v461;
  JSC::B3::Air *v462;
  WTF **v463;
  uint64_t v464;
  int v465;
  char v466;
  int v467;
  _QWORD v468[4];
  double v469;
  WTF **v470;
  WTF *v471;
  int v472;
  unsigned int v473;
  WTF *v474[2];
  WTF *v475[2];
  WTF *v476[2];
  uint64_t v477;
  uint64_t v478;
  unsigned int *v479;
  unsigned int i;
  _QWORD v481[3];
  uint64_t v482;
  WTF *v483;
  _QWORD v484[2];
  WTF ***v485;
  char *v486;
  char v487;
  WTF *Registers;
  uint64_t v489;
  _QWORD v490[14];
  unsigned __int8 v491;
  _BYTE v492[32];

  v468[0] = "Total Air";
  v468[1] = 10;
  v468[2] = "prepareForGeneration";
  v468[3] = 21;
  v469 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v370 = mach_absolute_time();
    v372 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v372 != -1)
    {
      Registers = (WTF *)v481;
      v470 = &Registers;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v470, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v371) = dword_1ECF4400C;
    v469 = (double)(v370 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v371 * 1000000000.0);
  }
  if (*(unsigned __int8 *)(*((_QWORD *)this + 1) + 211) | qword_1ECF4C32A | byte_1ECF4C323 | BYTE1(qword_1ECF4C32A))
    v9 = byte_1ECF4C323 == 0;
  else
    v9 = 0;
  if (v9 && !byte_1ECF4C327)
  {
    WTF::dataLog<char const*,char [14]>();
    WTF::dataLog<JSC::B3::Air::Code>(this);
  }
  JSC::B3::Air::Code::resetReachability(this, a2, a3, a4, a5, a6, a7, a8);
  if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
    JSC::B3::Air::validate(this, 0, v11, v12, v13, v14, v15, v16);
  if (*((_DWORD *)this + 48))
  {
    JSC::B3::Air::simplifyCFG((WTF **)this, v10, (uint64_t)v11, v12, v13, v14, v15, v16);
    JSC::B3::Air::lowerMacros((WTF **)this, v17, v18, v19, v20, v21, v22, v23);
    JSC::B3::Air::eliminateDeadCode((WTF **)this, v24, v25, v26, v27, v28, v29, v30);
    if (HIBYTE(dword_1ECF4C7B0) && (HIBYTE(word_1ECF4C79E) || *(_BYTE *)(*((_QWORD *)this + 1) + 212))
      || *((_DWORD *)this + 48) != 1 && *((_DWORD *)this + 45) + *((_DWORD *)this + 44) <= qword_1ECF4C688)
    {
      JSC::B3::Air::allocateRegistersByGraphColoring((WTF **)this, v31, v32, v33, v34, v35, v36, v37);
      if (HIBYTE(word_1ECF4C698))
      {
        WTF::dataLog<char [16]>("Register pressure after register allocation:\n");
        JSC::B3::Air::logRegisterPressure(this, v430, v431, v432, v433, v434, v435, v436);
      }
      JSC::B3::Air::PhaseScope::PhaseScope((uint64_t)v481, (WTF **)this, (uint64_t)"fixObviousSpills", 17, v38, v39, v40, v41);
      v48 = *((unsigned int *)this + 27);
      v471 = 0;
      v472 = 0;
      v470 = (WTF **)this;
      v473 = v48;
      if ((_DWORD)v48)
      {
        if (v48 >= 0x5555556)
        {
          __break(0xC471u);
          JUMPOUT(0x1980AE260);
        }
        v49 = (WTF *)WTF::fastMalloc((WTF *)(48 * v48));
        v472 = v48;
        v471 = v49;
        if (v473)
          bzero(v49, 48 * ((48 * (unint64_t)v473 - 48) / 0x30) + 48);
      }
      *(_OWORD *)v476 = 0u;
      *(_OWORD *)v475 = 0u;
      *(_OWORD *)v474 = 0u;
      v50 = *((unsigned int *)this + 27);
      v477 = 0x8000000000000000;
      if (v50 > 0x3F)
      {
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v477, v50, 0);
        v50 = *((unsigned int *)this + 27);
        v478 = 0x8000000000000000;
        if (v50 >= 0x40)
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v478, v50, 0);
      }
      else
      {
        v478 = 0x8000000000000000;
      }
      v479 = 0;
      i = 0;
      if (v477 >= 0)
        v51 = (uint64_t *)(2 * v477 + 8);
      else
        v51 = &v477;
      *v51 |= 1uLL;
      if (v478 >= 0)
        v52 = (uint64_t *)(2 * v478 + 8);
      else
        v52 = &v478;
      *v52 |= 1uLL;
      v53 = v478;
      v462 = this;
      while (1)
      {
        if (v53 < 0)
        {
          v144 = __clz(__rbit64(v53));
          if (v144 >= 0x3F)
            v57 = 63;
          else
            v57 = v144;
          v464 = 63;
          goto LABEL_35;
        }
        v464 = *(_QWORD *)(2 * v53);
        if ((unint64_t)(v464 + 63) < 0x40)
          goto LABEL_210;
        v54 = *(_QWORD *)(2 * v53 + 8);
        if (!v54)
          break;
        v55 = __clz(__rbit64(v54));
        if (v55 >= 0x40)
          break;
        v56 = 0;
LABEL_34:
        v57 = v55 + (v56 << 6);
LABEL_35:
        if (v57 == v464)
          goto LABEL_210;
        v466 = 0;
        do
        {
          if (v53 >= 0)
            v58 = (uint64_t *)(2 * v53 + 8);
          else
            v58 = &v478;
          v58[v57 >> 6] &= ~(1 << v57);
          if (*((_DWORD *)v470 + 27) <= v57)
          {
            __break(0xC471u);
            JUMPOUT(0x1980AE190);
          }
          v59 = (unsigned int *)*((_QWORD *)v470[12] + v57);
          v479 = v59;
          for (i = 0; i < v59[5]; ++i)
          v60 = 126 - 2 * __clz(HIDWORD(v474[1]));
          if (HIDWORD(v474[1]))
            v61 = v60;
          else
            v61 = 0;
          v62 = 126 - 2 * __clz(HIDWORD(v475[1]));
          if (HIDWORD(v475[1]))
            v63 = v62;
          else
            v63 = 0;
          v64 = 126 - 2 * __clz(HIDWORD(v476[1]));
          if (HIDWORD(v476[1]))
            v65 = v64;
          else
            v65 = 0;
          v66 = v59[9];
          if (!(_DWORD)v66)
            goto LABEL_158;
          for (j = 0; j != v66; ++j)
          {
            if (j >= v59[9])
            {
              __break(0xC471u);
              JUMPOUT(0x1980AE188);
            }
            v68 = **(unsigned int **)(*((_QWORD *)v59 + 3) + 16 * j);
            v69 = v471;
            v70 = (const void **)((char *)v471 + 48 * v68);
            if (v477 >= 0)
              v71 = (uint64_t *)(2 * v477 + 8);
            else
              v71 = &v477;
            v72 = v68 >> 6;
            v73 = 1 << v68;
            if ((v71[v68 >> 6] & (1 << v68)) == 0)
            {
              if (v477 >= 0)
                v74 = (uint64_t *)(2 * v477 + 8);
              else
                v74 = &v477;
              v74[v72] |= v73;
              goto LABEL_63;
            }
            v76 = (char *)*v70;
            v77 = *((unsigned int *)v70 + 3);
            v78 = (char *)*v70 + 16 * v77;
            if ((_DWORD)v77)
            {
              LODWORD(v77) = 0;
              v79 = v474[0];
              v80 = (WTF *)((char *)v474[0] + 16 * HIDWORD(v474[1]));
              v81 = v78;
              v82 = v78;
              do
              {
                v50 = (unint64_t)v80;
                if (v79 == v80)
                  goto LABEL_86;
                v42 = *v76 & 0x7F;
                v83 = (char *)*((_QWORD *)v76 + 1);
                while (1)
                {
                  v44 = *(unsigned __int8 *)v79;
                  v43 = (char *)(v44 & 0x7F);
                  if (v43 >= v42)
                  {
                    v43 = (char *)*((_QWORD *)v79 + 1);
                    v44 = (v44 ^ *v76) & 0x7F;
                    if ((_DWORD)v44 || (uint64_t)v43 >= (uint64_t)v83)
                      break;
                  }
                  v79 = (WTF *)((char *)v79 + 16);
                  if (v79 == v80)
                  {
                    v50 = (unint64_t)v80;
                    goto LABEL_86;
                  }
                }
                v50 = (unint64_t)v80;
                if (v79 == v80 || (!(_DWORD)v44 ? (v85 = v83 == v43) : (v85 = 0), v50 = (unint64_t)v79, !v85))
                {
LABEL_86:
                  v86 = v76;
                  if (v82 != (char *)*v70 + 16 * *((unsigned int *)v70 + 3))
                  {
                    if (v81 == v76)
                    {
                      v86 = v82;
                    }
                    else
                    {
                      if (v81 <= v82)
                      {
                        v447 = 0;
                        v135 = (v76 - v81) >> 4;
                        v42 = (uint64_t)&v82[((v76 - v81) & 0xFFFFFFFFFFFFFFF0) - 16];
                        do
                        {
                          *(_OWORD *)(v42 + v447) = *(_OWORD *)&v76[v447 - 16];
                          v447 -= 16;
                          v43 = &v76[v447];
                        }
                        while (&v76[v447] != v81);
                      }
                      else
                      {
                        v89 = v82;
                        v87 = v81;
                        do
                        {
                          v88 = *(_OWORD *)v87;
                          v87 += 16;
                          *(_OWORD *)v89 = v88;
                          v89 += 16;
                        }
                        while (v87 != v76);
                        v135 = (v76 - v81) >> 4;
                      }
                      v86 = &v82[16 * v135];
                    }
                  }
                  v81 = v76 + 16;
                  LODWORD(v77) = v77 + 1;
                  v82 = v86;
                  v79 = (WTF *)v50;
                }
                v76 += 16;
              }
              while (v76 < v78);
              v76 = (char *)*v70;
              v90 = *((unsigned int *)v70 + 3);
              v78 = v82;
            }
            else
            {
              v90 = 0;
              v81 = (char *)*v70 + 16 * v77;
            }
            v91 = &v76[16 * v90];
            if (v81 != v91)
            {
              if (v81 > v78)
              {
                do
                {
                  v121 = *(_OWORD *)v81;
                  v81 += 16;
                  *(_OWORD *)v78 = v121;
                  v78 += 16;
                }
                while (v81 != v91);
              }
              else
              {
                v446 = &v78[((v91 - v81) & 0xFFFFFFFFFFFFFFF0) - 16];
                do
                {
                  *(_OWORD *)v446 = *((_OWORD *)v91 - 1);
                  v446 -= 16;
                  v91 -= 16;
                }
                while (v91 != v81);
              }
            }
            *((_DWORD *)v70 + 3) -= v77;
            v92 = (char *)v69 + 48 * v68;
            v95 = *((_QWORD *)v92 + 2);
            v94 = v92 + 16;
            v93 = v95;
            v96 = v94 + 12;
            v97 = *((unsigned int *)v94 + 3);
            v98 = (char *)(v95 + 16 * v97);
            if ((_DWORD)v97)
            {
              LODWORD(v97) = 0;
              v42 = (uint64_t)v475[0];
              v99 = (char *)v475[0] + 16 * HIDWORD(v475[1]);
              v100 = v98;
              v101 = v98;
              do
              {
                v50 = (unint64_t)v99;
                if ((char *)v42 == v99)
                  goto LABEL_112;
                v43 = *(char **)v93;
                v44 = *(_QWORD *)(v93 + 8);
                while (1)
                {
                  v45 = *(_QWORD *)v42;
                  if (*(_QWORD *)v42 >= (unint64_t)v43)
                  {
                    v46 = *(_QWORD *)(v42 + 8);
                    if (*(char **)v42 != v43 || v46 >= v44)
                      break;
                  }
                  v42 += 16;
                  if ((char *)v42 == v99)
                  {
                    v50 = (unint64_t)v99;
                    goto LABEL_112;
                  }
                }
                v50 = (unint64_t)v99;
                if ((char *)v42 == v99 || (v43 == (char *)v45 ? (v103 = v44 == v46) : (v103 = 0), v50 = v42, !v103))
                {
LABEL_112:
                  v43 = (char *)(*(_QWORD *)v94 + 16 * *v96);
                  v104 = (char *)v93;
                  if (v101 != v43)
                  {
                    if (v100 == (char *)v93)
                    {
                      v104 = v101;
                    }
                    else
                    {
                      if (v100 <= v101)
                      {
                        v43 = 0;
                        v107 = (uint64_t)(v93 - (_QWORD)v100) >> 4;
                        v44 = (uint64_t)&v101[((v93 - (_QWORD)v100) & 0xFFFFFFFFFFFFFFF0) - 16];
                        do
                        {
                          *(_OWORD *)&v43[v44] = *(_OWORD *)&v43[v93 - 16];
                          v43 -= 16;
                          v45 = (uint64_t)&v43[v93];
                        }
                        while (&v43[v93] != v100);
                      }
                      else
                      {
                        v105 = v101;
                        v43 = v100;
                        do
                        {
                          v106 = *(_OWORD *)v43;
                          v43 += 16;
                          *(_OWORD *)v105 = v106;
                          v105 += 16;
                        }
                        while (v43 != (char *)v93);
                        v107 = (uint64_t)(v93 - (_QWORD)v100) >> 4;
                      }
                      v104 = &v101[16 * v107];
                    }
                  }
                  v100 = (char *)(v93 + 16);
                  LODWORD(v97) = v97 + 1;
                  v101 = v104;
                  v42 = v50;
                }
                v93 += 16;
              }
              while (v93 < (unint64_t)v98);
              v93 = *(_QWORD *)v94;
              v108 = *v96;
              v98 = v101;
            }
            else
            {
              v108 = 0;
              v100 = v98;
            }
            v109 = (char *)(v93 + 16 * v108);
            if (v100 != v109)
            {
              if (v100 <= v98)
              {
                v388 = &v98[((v109 - v100) & 0xFFFFFFFFFFFFFFF0) - 16];
                do
                {
                  *(_OWORD *)v388 = *((_OWORD *)v109 - 1);
                  v388 -= 16;
                  v109 -= 16;
                }
                while (v109 != v100);
              }
              else
              {
                do
                {
                  v139 = *(_OWORD *)v100;
                  v100 += 16;
                  *(_OWORD *)v98 = v139;
                  v98 += 16;
                }
                while (v100 != v109);
              }
            }
            *v96 -= v97;
            v110 = (v97 | v77) != 0;
            v111 = (char *)v69 + 48 * v68;
            v114 = *((_QWORD *)v111 + 4);
            v113 = v111 + 32;
            v112 = v114;
            v115 = v113 + 12;
            v116 = *((unsigned int *)v113 + 3);
            v117 = (char *)(v114 + 16 * v116);
            if (!(_DWORD)v116)
            {
              v118 = 0;
              v119 = v117;
              goto LABEL_126;
            }
            LODWORD(v116) = 0;
            v122 = v476[0];
            v123 = (WTF *)((char *)v476[0] + 16 * HIDWORD(v476[1]));
            v119 = v117;
            v124 = v117;
            do
            {
              v125 = v123;
              if (v122 == v123)
                goto LABEL_153;
              v50 = *(_QWORD *)v112;
              v42 = *(unsigned __int8 *)(v112 + 8);
              while (1)
              {
                v43 = *(char **)v122;
                if (*(_QWORD *)v122 >= v50)
                {
                  v44 = *((unsigned __int8 *)v122 + 8);
                  v45 = v44 & 0x7F;
                  v126 = v43 != (char *)v50 || v45 >= (v42 & 0x7Fu);
                  if (v126)
                    break;
                }
                v122 = (WTF *)((char *)v122 + 16);
                if (v122 == v123)
                {
                  v125 = v123;
                  goto LABEL_153;
                }
              }
              v125 = v123;
              if (v122 == v123)
                goto LABEL_153;
              if (v43 != (char *)v50 || ((v44 ^ v42) & 0x7F) != 0)
              {
                v125 = v122;
LABEL_153:
                v50 = *(_QWORD *)v113 + 16 * *v115;
                v129 = (char *)v112;
                if (v124 != (char *)v50)
                {
                  if (v119 == (char *)v112)
                  {
                    v129 = v124;
                  }
                  else
                  {
                    if (v119 <= v124)
                    {
                      v50 = 0;
                      v145 = (uint64_t)(v112 - (_QWORD)v119) >> 4;
                      v42 = (uint64_t)&v124[((v112 - (_QWORD)v119) & 0xFFFFFFFFFFFFFFF0) - 16];
                      do
                      {
                        *(_OWORD *)(v42 + v50) = *(_OWORD *)(v112 + v50 - 16);
                        v50 -= 16;
                        v43 = (char *)(v112 + v50);
                      }
                      while ((char *)(v112 + v50) != v119);
                    }
                    else
                    {
                      v141 = v124;
                      v50 = (unint64_t)v119;
                      do
                      {
                        v140 = *(_OWORD *)v50;
                        v50 += 16;
                        *(_OWORD *)v141 = v140;
                        v141 += 16;
                      }
                      while (v50 != v112);
                      v145 = (uint64_t)(v112 - (_QWORD)v119) >> 4;
                    }
                    v129 = &v124[16 * v145];
                  }
                }
                v119 = (char *)(v112 + 16);
                LODWORD(v116) = v116 + 1;
                v124 = v129;
                goto LABEL_151;
              }
              v128 = *(unsigned __int8 *)(v112 + 9);
              if (v128 != 2)
              {
                v50 = *((unsigned __int8 *)v122 + 9);
                if (v128 != (_DWORD)v50)
                {
                  *(_BYTE *)(v112 + 9) = 2;
                  v110 = 1;
                }
              }
              v125 = v122;
LABEL_151:
              v112 += 16;
              v122 = v125;
            }
            while (v112 < (unint64_t)v117);
            v112 = *(_QWORD *)v113;
            v118 = *v115;
            v117 = v124;
LABEL_126:
            v120 = (char *)(v112 + 16 * v118);
            if (v119 != v120)
            {
              if (v119 > v117)
              {
                do
                {
                  v138 = *(_OWORD *)v119;
                  v119 += 16;
                  *(_OWORD *)v117 = v138;
                  v117 += 16;
                }
                while (v119 != v120);
              }
              else
              {
                v454 = &v117[((v120 - v119) & 0xFFFFFFFFFFFFFFF0) - 16];
                do
                {
                  *(_OWORD *)v454 = *((_OWORD *)v120 - 1);
                  v454 -= 16;
                  v120 -= 16;
                }
                while (v120 != v119);
              }
            }
            *v115 -= v116;
            if (v110 || (_DWORD)v116 != 0)
            {
LABEL_63:
              if (v478 >= 0)
                v75 = (uint64_t *)(2 * v478 + 8);
              else
                v75 = &v478;
              v75[v72] |= v73;
              v466 = 1;
            }
          }
LABEL_158:
          v130 = v57 + 1;
          v53 = v478;
          if (v478 < 0)
          {
            v137 = __clz(__rbit64((unint64_t)v478 >> v130)) + v130;
            if (v137 >= 0x3F)
              v57 = 63;
            else
              v57 = v137;
          }
          else
          {
            v57 = *(_QWORD *)(2 * v478);
            v131 = v57 + 63;
            v132 = v130 >> 6;
            if (v130 >> 6 < (unint64_t)(v57 + 63) >> 6)
            {
              v133 = *(_QWORD *)(2 * v478 + 8 * v132 + 8);
              if (v133)
              {
                v134 = __clz(__rbit64(v133 >> v130)) + (v130 & 0x3F);
                if (v134 < 0x40)
                  goto LABEL_162;
              }
              if (v132 + 1 != v131 >> 6)
              {
                while (1)
                {
                  v136 = *(_QWORD *)(2 * v478 + 0x10 + 8 * v132);
                  if (v136)
                  {
                    v134 = __clz(__rbit64(v136));
                    if (v134 <= 0x3F)
                      break;
                  }
                  if ((v131 >> 6) - 1 == ++v132)
                    goto LABEL_163;
                }
                ++v132;
LABEL_162:
                v57 = v134 + (v132 << 6);
              }
            }
          }
LABEL_163:
          ;
        }
        while (v57 != v464);
        if ((v466 & 1) == 0)
          goto LABEL_210;
      }
      if ((unint64_t)(v464 + 63) >> 6 != 1)
      {
        v142 = 0;
        while (1)
        {
          v143 = *(_QWORD *)(2 * v53 + 0x10 + 8 * v142);
          if (v143)
          {
            v55 = __clz(__rbit64(v143));
            if (v55 <= 0x3F)
              break;
          }
          if (((unint64_t)(v464 + 63) >> 6) - 1 == ++v142)
            goto LABEL_210;
        }
        v56 = v142 + 1;
        goto LABEL_34;
      }
LABEL_210:
      v146 = v470;
      v147 = *((unsigned int *)v470 + 27);
      if (!(_DWORD)v147)
        goto LABEL_543;
      v148 = 0;
      while (!*((_QWORD *)v470[12] + v148))
      {
        if (v147 == ++v148)
        {
LABEL_543:
          if ((v53 & 0x8000000000000000) == 0)
            WTF::fastFree(2 * v53, (void *)v50, v42, (uint64_t)v43, v44, v45, v46, v47);
          if ((v477 & 0x8000000000000000) == 0)
            WTF::fastFree(2 * v477, (void *)v50, v42, (uint64_t)v43, v44, v45, v46, v47);
          v293 = v476[0];
          if (v476[0])
          {
            v476[0] = 0;
            LODWORD(v476[1]) = 0;
            WTF::fastFree((unint64_t)v293, (void *)v50, v42, (uint64_t)v43, v44, v45, v46, v47);
          }
          v294 = v475[0];
          this = v462;
          if (v475[0])
          {
            v475[0] = 0;
            LODWORD(v475[1]) = 0;
            WTF::fastFree((unint64_t)v294, (void *)v50, v42, (uint64_t)v43, v44, v45, v46, v47);
          }
          v295 = v474[0];
          if (v474[0])
          {
            v474[0] = 0;
            LODWORD(v474[1]) = 0;
            WTF::fastFree((unint64_t)v295, (void *)v50, v42, (uint64_t)v43, v44, v45, v46, v47);
          }
          v296 = v471;
          if (v473)
          {
            v297 = 48 * v473;
            v298 = (char *)v471 + 24;
            do
            {
              v299 = *((_QWORD *)v298 + 1);
              if (v299)
              {
                *((_QWORD *)v298 + 1) = 0;
                *((_DWORD *)v298 + 4) = 0;
                WTF::fastFree(v299, (void *)v50, v42, (uint64_t)v43, v44, v45, v46, v47);
              }
              v300 = *((_QWORD *)v298 - 1);
              if (v300)
              {
                *((_QWORD *)v298 - 1) = 0;
                *(_DWORD *)v298 = 0;
                WTF::fastFree(v300, (void *)v50, v42, (uint64_t)v43, v44, v45, v46, v47);
              }
              v301 = *((_QWORD *)v298 - 3);
              if (v301)
              {
                *((_QWORD *)v298 - 3) = 0;
                *((_DWORD *)v298 - 4) = 0;
                WTF::fastFree(v301, (void *)v50, v42, (uint64_t)v43, v44, v45, v46, v47);
              }
              v298 += 48;
              v297 -= 48;
            }
            while (v297);
            v296 = v471;
          }
          if (v296)
          {
            v471 = 0;
            v472 = 0;
            WTF::fastFree((unint64_t)v296, (void *)v50, v42, (uint64_t)v43, v44, v45, v46, v47);
          }
          v302 = (JSC::B3::Air *)v481[0];
          *(_QWORD *)(v481[0] + 304) = v481[1];
          if (HIBYTE(qword_1ECF4C32A))
          {
            if (v483)
              v453 = (WTF *)((char *)v483 + 16);
            else
              v453 = 0;
            JSC::B3::Air::validate(v302, v453, (char *)v42, (uint64_t)v43, v44, v45, v46, v47);
          }
          v303 = v483;
          v483 = 0;
          if (v303)
          {
            if (*(_DWORD *)v303 == 1)
              WTF::fastFree((unint64_t)v303, (void *)v50, v42, (uint64_t)v43, v44, v45, v46, v47);
            else
              --*(_DWORD *)v303;
          }
          JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v482);
          JSC::B3::Air::lowerAfterRegAlloc((WTF **)v462, v304, v305, v306, v307, v308, v309, v310);
          JSC::B3::Air::allocateStackByGraphColoring((WTF **)v462, v311, v312, v313, v314, v315, v316, v317);
          goto LABEL_570;
        }
      }
      if ((_DWORD)v147 == (_DWORD)v148)
        goto LABEL_543;
      LODWORD(v149) = *((_DWORD *)v470 + 27);
      LODWORD(v150) = v148;
      v463 = v470;
      v465 = v149;
      while (1)
      {
        if (v149 <= v150)
        {
          __break(0xC471u);
          JUMPOUT(0x1980AE198);
        }
        v151 = (unsigned int *)*((_QWORD *)v146[12] + v150);
        v479 = v151;
        v152 = &v477;
        if (v477 >= 0)
          v152 = (uint64_t *)(2 * v477 + 8);
        if (((*(unint64_t *)((char *)v152 + (((unint64_t)*v151 >> 3) & 0x1FFFFFF8)) >> *v151) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1980ADCC8);
        }
        v467 = v150;
        i = 0;
        if (v151[5])
          break;
LABEL_401:
        v150 = (v467 + 1);
        v146 = v463;
        v149 = *((unsigned int *)v463 + 27);
        if (v149 <= v150)
        {
          v238 = v465;
        }
        else
        {
          v238 = v465;
          while (!*((_QWORD *)v463[12] + v150))
          {
            if (v149 == ++v150)
            {
              LODWORD(v150) = *((_DWORD *)v463 + 27);
              break;
            }
          }
        }
        if (v238 == (_DWORD)v150)
        {
          v53 = v478;
          goto LABEL_543;
        }
      }
      v153 = 0;
      while (2)
      {
        if (v479[5] <= v153)
        {
          __break(0xC471u);
          JUMPOUT(0x1980AE180);
        }
        v154 = v153;
        v155 = *((_QWORD *)v479 + 1);
        v156 = (unsigned int *)(v155 + ((unint64_t)v153 << 7));
        v491 = 1;
        v157 = (__int16 *)(v156 + 30);
        v158 = *((__int16 *)v156 + 60);
        if (v158 <= 93)
        {
          if (v158 == 90)
          {
            v159 = v156[3];
            if (!(_DWORD)v159)
            {
              __break(0xC471u);
              JUMPOUT(0x1980AE220);
            }
            v160 = *(unsigned int **)v156;
            if ((*(char *)(*(_QWORD *)v156 + 8) - 2) > 3)
            {
              v161 = *(unsigned __int8 *)(*(_QWORD *)v156 + 8);
              if (v161 == 1)
              {
                v162 = v160[4];
                if (v162 > 0xFFFFFFDF || (v162 - 1) <= 0x1F)
                {
                  if (v159 <= 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1980AE1A0);
                  }
                  if (*((_BYTE *)v160 + 40) == 9)
                  {
                    v248 = *((_QWORD *)v160 + 4);
                    if (*(_BYTE *)(v248 + 4) == 1)
                    {
                      if (v162 <= 0)
                        v249 = 31 - v162;
                      else
                        v249 = v162 + 127;
                      if (!HIDWORD(v474[1]))
                        goto LABEL_509;
                      v207 = (_QWORD *)((char *)v474[0] + 8);
                      v208 = 16 * HIDWORD(v474[1]);
                      while (((*((_BYTE *)v207 - 8) ^ v249) & 0x7F) != 0)
                      {
                        v207 += 2;
                        v208 -= 16;
                        if (!v208)
                          goto LABEL_509;
                      }
                      if (HIDWORD(v475[1]))
                      {
                        v282 = *v207;
                        v231 = HIDWORD(v475[1]) - 1;
                        v233 = (_QWORD *)((char *)v475[0] + 8);
                        do
                        {
                          v224 = *(v233 - 1) != v248 || *v233 != v282;
                          v126 = v231-- != 0;
                          v232 = v126;
                          if (!v224)
                            break;
                          v233 += 2;
                        }
                        while ((v232 & 1) != 0);
                      }
                      else
                      {
LABEL_509:
                        v224 = 1;
                      }
                      v229 = HIDWORD(v476[1]);
                      if (HIDWORD(v476[1]))
                      {
                        v228 = (char *)v476[0] + 9;
                        while (*(_QWORD *)(v228 - 9) != v248 || ((*(v228 - 1) ^ v249) & 0x7F) != 0 || *v228)
                        {
                          v228 += 16;
                          if (!--v229)
                            goto LABEL_354;
                        }
                        goto LABEL_743;
                      }
LABEL_354:
                      v164 = 1;
LABEL_355:
                      if (!v224)
                        v164 = 0;
LABEL_357:
                      v491 = v164;
LABEL_235:
                      if (!v164)
                      {
                        v275 = (__int128 *)v490;
                        Registers = (WTF *)v490;
                        v489 = 3;
                        memset(&v490[12], 0, 11);
                        v276 = (WTF *)(v156 + 4);
                        if (v160 == v156 + 4)
                          goto LABEL_495;
                        if (!v160)
                        {
                          v164 = 0;
                          goto LABEL_634;
                        }
                        *(_QWORD *)v156 = 0;
                        v156[2] = 0;
                        WTF::fastFree((unint64_t)v160, (void *)v50, v42, (uint64_t)v43, v44, v45, v46, v47);
                        v387 = Registers;
                        *(_QWORD *)v156 = v276;
                        v164 = HIDWORD(v489);
                        if (v387 == (WTF *)v490)
                        {
                          if (HIDWORD(v489))
                          {
                            v459 = 32 * HIDWORD(v489);
                            do
                            {
                              v460 = *v275;
                              v461 = v275[1];
                              v275 += 2;
                              *(_OWORD *)v276 = v460;
                              *((_OWORD *)v276 + 1) = v461;
                              v276 = (WTF *)((char *)v276 + 32);
                              v459 -= 32;
                            }
                            while (v459);
                          }
                        }
                        else
                        {
                          v276 = v387;
LABEL_634:
                          *(_QWORD *)v156 = v276;
                        }
LABEL_495:
                        v156[2] = v489;
                        v156[3] = v164;
                        v277 = v155 + (v154 << 7);
                        v278 = v490[12];
                        *(_DWORD *)(v277 + 119) = *(_DWORD *)((char *)&v490[12] + 7);
                        *(_QWORD *)(v277 + 112) = v278;
LABEL_308:
                        v153 = i + 1;
                        i = v153;
                        if (v153 >= v151[5])
                          goto LABEL_401;
                        continue;
                      }
LABEL_244:
                      if ((unsigned __int16)v158 != 90)
                        goto LABEL_245;
                      if (!v159)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1980AE228);
                      }
                      v189 = *(char **)v156;
                      if (*(_BYTE *)(*(_QWORD *)v156 + 8) != 3)
                        goto LABEL_245;
                      if (v159 <= 1)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1980AE1A8);
                      }
                      if (v189[40] != 1
                        || (v190 = *((_DWORD *)v189 + 12), v190 <= 0xFFFFFFDF)
                        && (v190 - 1) > 0x1F)
                      {
LABEL_245:
                        Registers = (WTF *)v490;
                        v167 = (WTF *)v490;
                        LODWORD(v489) = 3;
                        HIDWORD(v489) = v159;
                        if (v159 >= 4)
                        {
                          if (v159 >> 27)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1980AE1B0);
                          }
                          v167 = (WTF *)WTF::fastMalloc((WTF *)(32 * v159));
                          LODWORD(v489) = v159;
                          Registers = v167;
                        }
                        v168 = v156[3];
                        if ((_DWORD)v168)
                        {
                          v169 = *(unsigned int **)v156;
                          v170 = 32 * v168;
                          do
                          {
                            v171 = *(_OWORD *)v169;
                            v172 = *((_OWORD *)v169 + 1);
                            v169 += 8;
                            *(_OWORD *)v167 = v171;
                            *((_OWORD *)v167 + 1) = v172;
                            v167 = (WTF *)((char *)v167 + 32);
                            v170 -= 32;
                          }
                          while (v170);
                        }
                        v173 = v155 + (v154 << 7);
                        v174 = *(_QWORD *)(v173 + 112);
                        *(_DWORD *)((char *)&v490[12] + 7) = *(_DWORD *)(v173 + 119);
                        v490[12] = v174;
                        v487 = 0;
                        v485 = &v470;
                        v486 = &v487;
                        if ((*v157 - 446) <= 5)
                        {
                          *(_QWORD *)&v492[8] = v492;
                          *(_QWORD *)&v492[16] = &v485;
                        }
                        else
                        {
                          v175 = v156[3];
                          if ((_DWORD)v175)
                          {
                            v176 = 0;
                            v177 = (char *)&JSC::B3::Air::g_formTable
                                 + 21 * *v157
                                 + ((unint64_t)((v175 - 1) * v175) >> 1);
                            while (1)
                            {
                              if (v176 >= v156[3])
                              {
                                __break(0xC471u);
                                JUMPOUT(0x1980AE178);
                              }
                              v178 = v177[v176];
                              v179 = (v178 >> 5) - 1;
                              if (v179 >= 5)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x1980ADE0CLL);
                              }
                              v180 = *(_QWORD *)v156 + 32 * v176;
                              if (*(_BYTE *)(v180 + 8) != 9)
                                goto LABEL_255;
                              v185 = *(_QWORD *)v180;
                              if (*(_BYTE *)(*(_QWORD *)v180 + 4) != 1)
                                goto LABEL_255;
                              v186 = v178 & 0xF;
                              v187 = v186 > 0xB || ((1 << v186) & 0xF3C) == 0;
                              if (!v187 || v186 - 4 < 7)
                                goto LABEL_255;
                              v188 = *((unsigned int *)v485 + 17);
                              if ((_DWORD)v188)
                                break;
LABEL_358:
                              v222 = *((unsigned int *)v485 + 13);
                              if ((_DWORD)v222)
                              {
                                v181 = (uint64_t *)(v485[5] + 1);
                                v182 = 16 * v222;
                                while (*(v181 - 1) != v185)
                                {
                                  v181 += 2;
                                  v182 -= 16;
                                  if (!v182)
                                    goto LABEL_255;
                                }
                                v236 = *v181;
                                if ((unint64_t)(*v181 + 4095) >= 0x1FFF
                                  && ((v236 & 0xFFF) != 0
                                   || (unint64_t)v236 >> 24
                                   && v236 >> 12 != 0
                                   && (unint64_t)(v236 >> 12) < 0xFFFFFFFFFFFFF001))
                                {
                                  *(_BYTE *)(v180 + 24) = 0;
                                  *(_QWORD *)(v180 + 16) = 0;
                                  *(_QWORD *)v180 = v236;
                                  v237 = 515;
                                }
                                else
                                {
                                  *(_BYTE *)(v180 + 24) = 0;
                                  *(_QWORD *)(v180 + 16) = 0;
                                  *(_QWORD *)v180 = v236;
                                  v237 = 514;
                                }
                                *(_WORD *)(v180 + 8) = v237;
                                *(_DWORD *)(v180 + 12) = 1;
LABEL_397:
                                *v486 = 1;
                              }
LABEL_255:
                              if (++v176 == v175)
                                goto LABEL_304;
                            }
                            v183 = v485[7] + 1;
                            v184 = 16 * v188;
                            while (*((_QWORD *)v183 - 1) != v185)
                            {
                              v183 += 16;
                              v184 -= 16;
                              if (!v184)
                                goto LABEL_358;
                            }
                            if (v179 == 3)
                            {
                              if (v183[1])
                                goto LABEL_255;
                            }
                            else if (v179 != 2)
                            {
                              goto LABEL_255;
                            }
                            v265 = *v183 & 0x7F;
                            if ((*v183 & 0x60) != 0)
                              v266 = (char)(31 - (*v183 & 0x7F));
                            else
                              v266 = v265 + 1;
                            *(_QWORD *)v180 = 0;
                            *(_WORD *)(v180 + 8) = 513;
                            if (v265 == 127)
                              v266 = 0;
                            *(_DWORD *)(v180 + 12) = 1;
                            *(_DWORD *)(v180 + 16) = v266;
                            *(_DWORD *)(v180 + 20) = 0;
                            *(_BYTE *)(v180 + 24) = 0;
                            goto LABEL_397;
                          }
                        }
LABEL_304:
                        if (v487
                          && (JSC::B3::Air::Inst::isValidForm((JSC::B3::Air::Inst *)v156, (JSC::B3::Air::Inst *)v50, v42, (uint64_t)v43, v44, v45, v46, v47) & 1) == 0)
                        {
                          JSC::B3::Air::Inst::operator=((const void **)v156, (const void **)&Registers, v42, (uint64_t)v43, v44, v45, v46, v47);
                          v484[0] = &v485;
                          v484[1] = v156;
                          v250 = *v157;
                          if ((v250 - 446) <= 5)
                          {
                            *(_QWORD *)&v492[8] = v492;
                            *(_QWORD *)&v492[16] = v484;
                          }
                          else
                          {
                            v251 = v156[3];
                            if ((_DWORD)v251)
                            {
                              v252 = 0;
                              v253 = 0;
                              v254 = (char *)&JSC::B3::Air::g_formTable
                                   + 21 * v250
                                   + ((unint64_t)((v251 - 1) * v251) >> 1);
                              do
                              {
                                if (v253 >= v156[3])
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1980AE218);
                                }
                                v255 = v254[v253];
                                if ((v255 >> 5) - 1 >= 5)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1980AE138);
                                }
                                v256 = *(_QWORD *)v156 + v252;
                                *(_OWORD *)v492 = *(_OWORD *)v256;
                                *(_OWORD *)&v492[16] = *(_OWORD *)(v256 + 16);
                                if ((JSC::B3::Air::Inst::isValidForm((JSC::B3::Air::Inst *)v156, v257, v258, v259, v260, v261, v262, v263) & 1) == 0)
                                {
                                  *(_OWORD *)v256 = *(_OWORD *)v492;
                                  *(_OWORD *)(v256 + 9) = *(_OWORD *)&v492[9];
                                }
                                ++v253;
                                v252 += 32;
                              }
                              while (v251 != v253);
                            }
                          }
                        }
                        v204 = Registers;
                        if (v490 != (_QWORD *)Registers && Registers)
                        {
                          Registers = 0;
                          LODWORD(v489) = 0;
                          WTF::fastFree((unint64_t)v204, (void *)v50, v42, (uint64_t)v43, v44, v45, v46, v47);
                        }
                        goto LABEL_308;
                      }
                      if (v190 <= 0)
                        v191 = 31 - v190;
                      else
                        v191 = v190 + 127;
                      if (!HIDWORD(v474[1]))
                        goto LABEL_308;
                      v192 = v191 & 0x7F;
                      v193 = (_QWORD *)((char *)v474[0] + 8);
                      v194 = 16 * HIDWORD(v474[1]);
                      while (1)
                      {
                        v195 = *(_QWORD *)v189 - *v193;
                        if ((unint64_t)(v195 + 4095) < 0x1FFF
                          || (v195 & 0xFFF) == 0
                          && (!((unint64_t)v195 >> 24)
                           || v195 >> 12 == 0
                           || (unint64_t)(v195 >> 12) >= 0xFFFFFFFFFFFFF001))
                        {
                          break;
                        }
                        v193 += 2;
                        v194 -= 16;
                        if (!v194)
                          goto LABEL_308;
                      }
                      *v157 = 6;
                      *((_BYTE *)v156 + 122) = 0;
                      if (v159 <= 2)
                      {
                        if (v156[2] <= 2)
                        {
                          WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v156, (void *)3, v42, (uint64_t)v43, v44, v45, v46, v47);
                          v189 = *(char **)v156;
                          v196 = v156[3];
                          if ((_DWORD)v196 == 3)
                            goto LABEL_294;
                        }
                        else
                        {
                          v196 = 2;
                        }
                        v197 = 32 * v196;
                        do
                        {
                          v198 = &v189[v197];
                          *(_QWORD *)v198 = 0;
                          *((_WORD *)v198 + 4) = 512;
                          *((_DWORD *)v198 + 3) = 1;
                          *((_QWORD *)v198 + 2) = 0;
                          v197 += 32;
                          v198[24] = 0;
                        }
                        while (v197 != 96);
                        v189 = *(char **)v156;
                      }
LABEL_294:
                      v156[3] = 3;
                      *(_QWORD *)v189 = v195;
                      *((_WORD *)v189 + 4) = 514;
                      *((_DWORD *)v189 + 3) = 1;
                      *((_QWORD *)v189 + 2) = 0;
                      v189[24] = 0;
                      v199 = *(_BYTE *)(v193 - 1) & 0x7F;
                      if (v199 == 127)
                      {
                        v200 = 0;
                      }
                      else if ((*(_BYTE *)(v193 - 1) & 0x60) != 0)
                      {
                        v200 = (char)(31 - v199);
                      }
                      else
                      {
                        v200 = v199 + 1;
                      }
                      if (v156[3] <= 1)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1980AE230);
                      }
                      v201 = *(unsigned int **)v156;
                      *((_QWORD *)v201 + 4) = 0;
                      *((_WORD *)v201 + 20) = 513;
                      v201[11] = 1;
                      v201[12] = v200;
                      v201[13] = 0;
                      *((_BYTE *)v201 + 56) = 0;
                      if (v192 == 127)
                      {
                        v202 = 0;
                      }
                      else if ((v191 & 0x60) != 0)
                      {
                        v202 = (char)(31 - v192);
                      }
                      else
                      {
                        v202 = v192 + 1;
                      }
                      if (v156[3] <= 2)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1980AE238);
                      }
                      v203 = *(unsigned int **)v156;
                      *((_QWORD *)v203 + 8) = 0;
                      *((_WORD *)v203 + 36) = 513;
                      v203[19] = 1;
                      v203[20] = v202;
                      v203[21] = 0;
                      *((_BYTE *)v203 + 88) = 0;
                      goto LABEL_308;
                    }
                  }
                }
                goto LABEL_234;
              }
              if (v161 != 9)
                goto LABEL_234;
              v239 = *(_QWORD *)v160;
              if (*(_BYTE *)(*(_QWORD *)v160 + 4) != 1)
                goto LABEL_234;
              if (v159 <= 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1980AE1D0);
              }
              if (*((_BYTE *)v160 + 40) != 1)
                goto LABEL_234;
              v240 = v160[12];
              if (v240 <= 0xFFFFFFDF && (v240 - 1) > 0x1F)
                goto LABEL_234;
              if (!HIDWORD(v475[1]))
                goto LABEL_450;
              v165 = (uint64_t *)((char *)v475[0] + 8);
              v166 = 16 * HIDWORD(v475[1]);
              while (*(v165 - 1) != v239)
              {
                v165 += 2;
                v166 -= 16;
                if (!v166)
                  goto LABEL_450;
              }
              v246 = v240 + 127;
              if (v240 <= 0)
                v246 = 31 - v240;
              if (HIDWORD(v474[1]))
              {
                v247 = *v165;
                v225 = HIDWORD(v474[1]) - 1;
                v227 = (_QWORD *)((char *)v474[0] + 8);
                do
                {
                  v224 = ((*((_BYTE *)v227 - 8) ^ v246) & 0x7F) != 0 || *v227 != v247;
                  v126 = v225-- != 0;
                  v226 = v126;
                  if (!v224)
                    break;
                  v227 += 2;
                }
                while ((v226 & 1) != 0);
              }
              else
              {
LABEL_450:
                v224 = 1;
              }
              if (v240 <= 0)
                v264 = 31 - v240;
              else
                v264 = v240 + 127;
              v221 = HIDWORD(v476[1]);
              if (!HIDWORD(v476[1]))
                goto LABEL_354;
              v220 = (char *)v476[0] + 9;
              while (*(_QWORD *)(v220 - 9) != v239 || ((*(v220 - 1) ^ v264) & 0x7F) != 0 || *v220)
              {
                v220 += 16;
                if (!--v221)
                  goto LABEL_354;
              }
LABEL_743:
              v164 = 0;
              goto LABEL_355;
            }
            if (v159 <= 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1980AE1B8);
            }
            v209 = *((unsigned __int8 *)v160 + 40);
            if (v209 == 1)
            {
              v210 = v160[12];
              if (v210 <= 0xFFFFFFDF && (v210 - 1) > 0x1F)
                goto LABEL_234;
              v212 = v210 + 127;
              if (v210 <= 0)
                v212 = 31 - v210;
              if (HIDWORD(v474[1]))
              {
                v213 = HIDWORD(v474[1]) - 1;
                v214 = (_QWORD *)((char *)v474[0] + 8);
                do
                {
                  v164 = ((*((_BYTE *)v214 - 8) ^ v212) & 0x7F) != 0 || *v214 != *(_QWORD *)v160;
                  v126 = v213-- != 0;
                  v216 = v126;
                  if (v164 != 1)
                    break;
                  v214 += 2;
                }
                while ((v216 & 1) != 0);
                goto LABEL_357;
              }
            }
            else
            {
              if (v209 != 9)
                goto LABEL_234;
              v245 = *((_QWORD *)v160 + 4);
              if (*(_BYTE *)(v245 + 4) != 1)
                goto LABEL_234;
              if (HIDWORD(v475[1]))
              {
                v455 = HIDWORD(v475[1]) - 1;
                v456 = (_QWORD *)((char *)v475[0] + 8);
                do
                {
                  v164 = *(v456 - 1) != v245 || *v456 != *(_QWORD *)v160;
                  v126 = v455-- != 0;
                  v458 = v126;
                  if (v164 != 1)
                    break;
                  v456 += 2;
                }
                while ((v458 & 1) != 0);
                goto LABEL_357;
              }
            }
            goto LABEL_427;
          }
LABEL_243:
          v159 = v156[3];
          goto LABEL_244;
        }
        break;
      }
      switch(v158)
      {
        case '^':
          v159 = v156[3];
          if (!(_DWORD)v159)
          {
            __break(0xC471u);
            JUMPOUT(0x1980AE1C0);
          }
          v160 = *(unsigned int **)v156;
          if ((*(char *)(*(_QWORD *)v156 + 8) - 2) > 3)
          {
            v217 = *(unsigned __int8 *)(*(_QWORD *)v156 + 8);
            if (v217 == 1)
            {
              v218 = v160[4];
              if (v218 <= 0xFFFFFFDF && (v218 - 1) > 0x1F)
                goto LABEL_234;
              if (v159 <= 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1980AE1C8);
              }
              if (*((_BYTE *)v160 + 40) != 9)
                goto LABEL_234;
              v267 = *((_QWORD *)v160 + 4);
              if (*(_BYTE *)(v267 + 4) != 1)
                goto LABEL_234;
              if (v218 <= 0)
                v268 = 31 - v218;
              else
                v268 = v218 + 127;
              if (!HIDWORD(v474[1]))
                goto LABEL_535;
              v234 = (int *)((char *)v474[0] + 8);
              v235 = 16 * HIDWORD(v474[1]);
              while (((*((_BYTE *)v234 - 8) ^ v268) & 0x7F) != 0)
              {
                v234 += 4;
                v235 -= 16;
                if (!v235)
                  goto LABEL_535;
              }
              if (HIDWORD(v475[1]))
              {
                v286 = *v234;
                v287 = HIDWORD(v475[1]) - 1;
                v288 = (_QWORD *)((char *)v475[0] + 8);
                do
                {
                  v224 = *(v288 - 1) != v267 || *v288 != v286;
                  v126 = v287-- != 0;
                  v290 = v126;
                  if (!v224)
                    break;
                  v288 += 2;
                }
                while ((v290 & 1) != 0);
              }
              else
              {
LABEL_535:
                v224 = 1;
              }
              v291 = HIDWORD(v476[1]);
              if (!HIDWORD(v476[1]))
                goto LABEL_354;
              v292 = (char *)v476[0] + 9;
              while (*(_QWORD *)(v292 - 9) != v267 || ((*(v292 - 1) ^ v268) & 0x7F) != 0 || *v292 != 2)
              {
                v292 += 16;
                if (!--v291)
                  goto LABEL_354;
              }
            }
            else
            {
              if (v217 != 9)
                goto LABEL_234;
              v242 = *(_QWORD *)v160;
              if (*(_BYTE *)(*(_QWORD *)v160 + 4) != 1)
                goto LABEL_234;
              if (v159 <= 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1980AE1D8);
              }
              if (*((_BYTE *)v160 + 40) != 1)
                goto LABEL_234;
              v243 = v160[12];
              if (v243 <= 0xFFFFFFDF && (v243 - 1) > 0x1F)
                goto LABEL_234;
              if (!HIDWORD(v475[1]))
                goto LABEL_496;
              v205 = (unsigned int *)((char *)v475[0] + 8);
              v206 = 16 * HIDWORD(v475[1]);
              while (*((_QWORD *)v205 - 1) != v242)
              {
                v205 += 4;
                v206 -= 16;
                if (!v206)
                  goto LABEL_496;
              }
              v269 = v243 + 127;
              if (v243 <= 0)
                v269 = 31 - v243;
              if (HIDWORD(v474[1]))
              {
                v270 = *v205;
                v271 = HIDWORD(v474[1]) - 1;
                v272 = (_QWORD *)((char *)v474[0] + 8);
                do
                {
                  v224 = ((*((_BYTE *)v272 - 8) ^ v269) & 0x7F) != 0 || *v272 != v270;
                  v126 = v271-- != 0;
                  v274 = v126;
                  if (!v224)
                    break;
                  v272 += 2;
                }
                while ((v274 & 1) != 0);
              }
              else
              {
LABEL_496:
                v224 = 1;
              }
              if (v243 <= 0)
                v279 = 31 - v243;
              else
                v279 = v243 + 127;
              v280 = HIDWORD(v476[1]);
              if (!HIDWORD(v476[1]))
                goto LABEL_354;
              v281 = (char *)v476[0] + 9;
              while (*(_QWORD *)(v281 - 9) != v242 || ((*(v281 - 1) ^ v279) & 0x7F) != 0 || *v281 != 1)
              {
                v281 += 16;
                if (!--v280)
                  goto LABEL_354;
              }
            }
            goto LABEL_743;
          }
          if (v159 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980AE210);
          }
          v437 = *((unsigned __int8 *)v160 + 40);
          if (v437 == 1)
          {
            v438 = v160[12];
            if (v438 > 0xFFFFFFDF || (v438 - 1) <= 0x1F)
            {
              if (v438 <= 0)
                v440 = 31 - v438;
              else
                v440 = v438 + 127;
              if (HIDWORD(v474[1]))
              {
                v441 = HIDWORD(v474[1]) - 1;
                v442 = (_QWORD *)((char *)v474[0] + 8);
                do
                {
                  v444 = ((*((_BYTE *)v442 - 8) ^ v440) & 0x7F) != 0 || *v442 != *v160;
                  v126 = v441-- != 0;
                  v445 = v126;
                  if (!v444)
                    break;
                  v442 += 2;
                }
                while ((v445 & 1) != 0);
              }
              else
              {
                LOBYTE(v444) = 1;
              }
              v491 = v444;
            }
            goto LABEL_234;
          }
          if (v437 != 9 || (v448 = *((_QWORD *)v160 + 4), *(_BYTE *)(v448 + 4) != 1))
          {
LABEL_234:
            v164 = v491;
            goto LABEL_235;
          }
          if (HIDWORD(v475[1]))
          {
            v449 = HIDWORD(v475[1]) - 1;
            v450 = (_QWORD *)((char *)v475[0] + 8);
            do
            {
              v164 = *(v450 - 1) != v448 || *v450 != *v160;
              v126 = v449-- != 0;
              v452 = v126;
              if (v164 != 1)
                break;
              v450 += 2;
            }
            while ((v452 & 1) != 0);
            goto LABEL_357;
          }
LABEL_427:
          v164 = 1;
          goto LABEL_357;
        case 'l':
          v159 = v156[3];
          if (!(_DWORD)v159)
          {
            __break(0xC471u);
            JUMPOUT(0x1980AE1E0);
          }
          v160 = *(unsigned int **)v156;
          v283 = *(unsigned __int8 *)(*(_QWORD *)v156 + 8);
          if (v283 == 1)
          {
            v284 = v160[4];
            if (v284 <= 0xFFFFFFDF && (v284 - 1) > 0x1F)
              goto LABEL_234;
            if (v159 <= 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1980AE1E8);
            }
            if (*((_BYTE *)v160 + 40) != 9 || *(_BYTE *)(*((_QWORD *)v160 + 4) + 4) != 1)
              goto LABEL_234;
            if (v284 <= 0)
              v369 = 31 - v284;
            else
              v369 = v284 - 1;
            Registers = (WTF *)*((_QWORD *)v160 + 4);
            LOBYTE(v489) = v369 & 0x7F;
          }
          else
          {
            if (v283 != 9 || *(_BYTE *)(*(_QWORD *)v160 + 4) != 1)
              goto LABEL_234;
            if (v159 <= 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1980AE200);
            }
            if (*((_BYTE *)v160 + 40) != 1)
              goto LABEL_234;
            v363 = v160[12];
            if (v363 <= 0xFFFFFFDF && (v363 - 1) > 0x1F)
              goto LABEL_234;
            if (v363 <= 0)
              v365 = 31 - v363;
            else
              v365 = v363 - 1;
            Registers = *(WTF **)v160;
            LOBYTE(v489) = v365 & 0x7F;
          }
          BYTE1(v489) = 0;
          break;
        case 'k':
          v159 = v156[3];
          if (!(_DWORD)v159)
          {
            __break(0xC471u);
            JUMPOUT(0x1980AE1F0);
          }
          v160 = *(unsigned int **)v156;
          v359 = *(unsigned __int8 *)(*(_QWORD *)v156 + 8);
          if (v359 == 1)
          {
            v360 = v160[4];
            if (v360 <= 0xFFFFFFDF && (v360 - 1) > 0x1F)
              goto LABEL_234;
            if (v159 <= 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1980AE1F8);
            }
            if (*((_BYTE *)v160 + 40) != 9 || *(_BYTE *)(*((_QWORD *)v160 + 4) + 4) != 1)
              goto LABEL_234;
            if (v360 <= 0)
              v362 = 31 - v360;
            else
              v362 = v360 - 1;
            Registers = (WTF *)*((_QWORD *)v160 + 4);
            LOBYTE(v489) = v362 & 0x7F;
          }
          else
          {
            if (v359 != 9 || *(_BYTE *)(*(_QWORD *)v160 + 4) != 1)
              goto LABEL_234;
            if (v159 <= 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1980AE208);
            }
            if (*((_BYTE *)v160 + 40) != 1)
              goto LABEL_234;
            v366 = v160[12];
            if (v366 <= 0xFFFFFFDF && (v366 - 1) > 0x1F)
              goto LABEL_234;
            if (v366 <= 0)
              v368 = 31 - v366;
            else
              v368 = v366 - 1;
            Registers = *(WTF **)v160;
            LOBYTE(v489) = v368 & 0x7F;
          }
          BYTE1(v489) = 2;
          break;
        default:
          goto LABEL_243;
      }
      _ZZN3JSC2B33Air12_GLOBAL__N_116FixObviousSpills7fixInstEvENKUlRKT_E_clINS3_7RegSlotEEEDaS6_((uint64_t)v476[0], HIDWORD(v476[1]), (char *)&v491, (uint64_t)&Registers);
      goto LABEL_234;
    }
    JSC::B3::Air::allocateRegistersAndStackByLinearScan(this, v31, v32, v33, v34, v35, v36, v37);
    if (HIBYTE(word_1ECF4C698))
    {
      WTF::dataLog<char [16]>("Register pressure after register allocation:\n");
      JSC::B3::Air::logRegisterPressure(this, v380, v381, v382, v383, v384, v385, v386);
    }
    JSC::B3::Air::lowerAfterRegAlloc((WTF **)this, v373, v374, v375, v376, v377, v378, v379);
LABEL_570:
    JSC::B3::Air::lowerStackArgs((WTF **)this, v318, v319, v320, v321, v322, v323, v324);
    JSC::B3::Air::simplifyCFG((WTF **)this, v325, v326, v327, v328, v329, v330, v331);
    if (*((_DWORD *)this + 48) > 1u || JSC::B3::Air::Code::needsUsedRegisters(this))
      JSC::B3::Air::reportUsedRegisters((WTF **)this, v332, v333, v334, v335, v336, v337, v338);
    JSC::B3::Air::lowerEntrySwitch((WTF **)this, v332, v333, v334, v335, v336, v337, v338);
    JSC::B3::Air::simplifyCFG((WTF **)this, v339, v340, v341, v342, v343, v344, v345);
    if (byte_1ECF4C6A6)
      JSC::B3::Air::optimizePairedLoadStore((WTF **)this, v346, v347, v348, v349, v350, v351, v352);
    JSC::B3::Air::optimizeBlockOrder((WTF **)this, v346, v347, v348, v349, v350, v351, v352);
    if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
      JSC::B3::Air::validate(this, 0, v353, v354, v355, v356, v357, v358);
    if (*(_BYTE *)(*((_QWORD *)this + 1) + 211)
      || (_BYTE)qword_1ECF4C32A
      || __PAIR16__(BYTE1(qword_1ECF4C32A), 0) != byte_1ECF4C323
      || byte_1ECF4C327)
    {
      Registers = (WTF *)*((_QWORD *)this + 38);
      WTF::dataLog<char [11],char const*,char [22]>((const char **)&Registers);
      WTF::dataLog<JSC::B3::Air::Code>(this);
    }
  }
  else
  {
    JSC::B3::Air::lowerMacros((WTF **)this, v10, (uint64_t)v11, v12, v13, v14, v15, v16);
    JSC::B3::Air::lowerAfterRegAlloc((WTF **)this, v389, v390, v391, v392, v393, v394, v395);
    JSC::B3::Air::lowerEntrySwitch((WTF **)this, v396, v397, v398, v399, v400, v401, v402);
    JSC::B3::Air::optimizeBlockOrder((WTF **)this, v403, v404, v405, v406, v407, v408, v409);
    if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
      JSC::B3::Air::validate(this, 0, v410, v411, v412, v413, v414, v415);
    if (*(_BYTE *)(*((_QWORD *)this + 1) + 211)
      || (_BYTE)qword_1ECF4C32A
      || __PAIR16__(BYTE1(qword_1ECF4C32A), 0) != byte_1ECF4C323
      || byte_1ECF4C327)
    {
      Registers = (WTF *)*((_QWORD *)this + 38);
      WTF::dataLog<char [11],char const*,char [22]>((const char **)&Registers);
      WTF::dataLog<JSC::B3::Air::Code>(this);
    }
    v416 = (JSC::B3::Air::GenerateAndAllocateRegisters *)WTF::fastMalloc((WTF *)0x108);
    Registers = JSC::B3::Air::GenerateAndAllocateRegisters::GenerateAndAllocateRegisters(v416, this);
    std::unique_ptr<JSC::B3::Air::GenerateAndAllocateRegisters>::operator=[abi:sn180100]((JSC::B3::Air::GenerateAndAllocateRegisters **)this, &Registers, v417, v418, v419, v420, v421, v422);
    std::unique_ptr<JSC::B3::Air::GenerateAndAllocateRegisters>::~unique_ptr[abi:sn180100](&Registers, v423, v424, v425, v426, v427, v428, v429);
    JSC::B3::Air::GenerateAndAllocateRegisters::prepareForGeneration(*(JSC::B3::Air::GenerateAndAllocateRegisters **)this);
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v468);
}

uint64_t WTF::dataLog<char const*,char [14]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "Air ");
  WTF::PrintStream::printf(v2, "%s", "Initial air:\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [11],char const*,char [22]>(const char **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Air after ");
  WTF::PrintStream::printf(v4, "%s", *a1);
  WTF::PrintStream::printf(v4, "%s", ", before generation:\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

JSC::B3::Air::GenerateAndAllocateRegisters **std::unique_ptr<JSC::B3::Air::GenerateAndAllocateRegisters>::operator=[abi:sn180100](JSC::B3::Air::GenerateAndAllocateRegisters **a1, JSC::B3::Air::GenerateAndAllocateRegisters **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Air::GenerateAndAllocateRegisters *v9;
  JSC::B3::Air::GenerateAndAllocateRegisters *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    JSC::B3::Air::GenerateAndAllocateRegisters::~GenerateAndAllocateRegisters(v10, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  return a1;
}

JSC::B3::Air::GenerateAndAllocateRegisters **std::unique_ptr<JSC::B3::Air::GenerateAndAllocateRegisters>::~unique_ptr[abi:sn180100](JSC::B3::Air::GenerateAndAllocateRegisters **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Air::GenerateAndAllocateRegisters *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    JSC::B3::Air::GenerateAndAllocateRegisters::~GenerateAndAllocateRegisters(v9, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  return a1;
}

void JSC::B3::Air::generate(JSC::B3::Air::GenerateAndAllocateRegisters **this, JSC::B3::Air::Code *a2, JSC::CCallHelpers *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Air *v9;
  int v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  JSC::B3::Air::Disassembler *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  JSC::B3::Air::BasicBlock *v52;
  char *v53;
  uint64_t v54;
  unint64_t i;
  uint64_t v56;
  unsigned int *v57;
  __int16 v58;
  unsigned __int8 *v59;
  uint64_t v60;
  int v61;
  _BYTE *v62;
  char v63;
  __int16 v64;
  char v65;
  __int16 v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  char v70;
  __int16 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int **v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int8x8_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  _DWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int *v133;
  unsigned int *v134;
  int j;
  unsigned int v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  _DWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  unsigned int *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  _DWORD *v150;
  _QWORD *v151;
  int *v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  WTF *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  int k;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  WTF *v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  WTF *v174;
  uint64_t v175;
  char *v176;
  unint64_t v177;
  unsigned int **v179;
  unsigned int **v180;
  unsigned int *v181;
  unsigned int v182;
  unsigned int v183;
  WTF *v184;
  WTF *v185;
  WTF *v186;
  unsigned int *v187;
  unsigned int *v188;
  unsigned int v189;
  unsigned int v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  JSC::AssemblerBuffer *v201;
  int v202;
  uint64_t v203;
  JSC::B3::Air *v204;
  uint64_t v205;
  int v206;
  _QWORD *v207;
  uint64_t *v208;
  int v209;
  uint64_t v210;
  unsigned int v211;
  uint64_t v212;
  unsigned int v213;
  uint64_t v214;
  int v215;
  int v216;
  unsigned int v217;
  uint64_t v218;
  int v219;
  int v220;
  int v221;
  int v222;
  _QWORD v223[3];
  WTF *v224;
  int v225;
  unsigned int v226;
  WTF *v227[2];
  WTF *v228[2];
  JSC::B3::Air::BasicBlock *v229;
  int v230;
  JSC::B3::Air *v231;
  _QWORD v232[4];
  double v233;
  int v234;
  __int128 v235;
  uint64_t v236;

  v9 = (JSC::B3::Air *)this;
  if (*((_DWORD *)this + 48))
  {
    v232[0] = "Air";
    v232[1] = 4;
    v232[2] = "generateWithAlreadyAllocatedRegisters";
    v232[3] = 38;
    v233 = 0.0;
    if (byte_1ECF4C67A | byte_1ECF4C33D)
    {
      v191 = mach_absolute_time();
      v193 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
      if (v193 != -1)
      {
        v227[0] = (WTF *)v223;
        *(_QWORD *)&v235 = v227;
        std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v235, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
      }
      LODWORD(v192) = dword_1ECF4400C;
      v233 = (double)(v191 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v192 * 1000000000.0);
    }
    v10 = *((unsigned __int8 *)a2 + 212);
    *((_BYTE *)a2 + 212) = 0;
    v229 = 0;
    *(_OWORD *)v227 = 0u;
    *(_OWORD *)v228 = 0u;
    v230 = -1;
    v231 = v9;
    v11 = *((unsigned int *)v9 + 27);
    *(_QWORD *)&v235 = 0;
    WTF::Vector<WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::fill((uint64_t)v228, &v235, v11, a4, a5, a6, a7, a8);
    v19 = (unsigned int *)v235;
    *(_QWORD *)&v235 = 0;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((unint64_t)v19, v12, v13, v14, v15, v16, v17, v18);
      }
    }
    v22 = *((unsigned int *)v9 + 27);
    v202 = v10;
    if ((_DWORD)v22)
    {
      v23 = 0;
      while (!*(_QWORD *)(*((_QWORD *)v9 + 12) + 8 * v23))
      {
        if (v22 == ++v23)
          goto LABEL_145;
      }
      if ((_DWORD)v22 == (_DWORD)v23)
      {
LABEL_145:
        v25 = *((unsigned int *)v9 + 27);
        goto LABEL_25;
      }
      v24 = v23;
      v25 = *((unsigned int *)v9 + 27);
      do
      {
        if (v25 <= v24)
        {
          __break(0xC471u);
          JUMPOUT(0x1980AF628);
        }
        v26 = *(unsigned int **)(*((_QWORD *)v9 + 12) + 8 * v24);
        v34 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        *v34 = 0xFFFFFFFF00000001;
        v35 = *v26;
        v36 = (unsigned int *)*((_QWORD *)v228[0] + v35);
        *((_QWORD *)v228[0] + v35) = v34;
        if (v36)
        {
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            atomic_store(1u, v36);
            WTF::fastFree((unint64_t)v36, v27, v28, v29, v30, v31, v32, v33);
          }
        }
        ++v24;
        v25 = *((unsigned int *)v9 + 27);
        if (v25 > v24)
        {
          do
          {
            if (*(_QWORD *)(*((_QWORD *)v9 + 12) + 8 * v24))
            {
              v24 = v24;
              goto LABEL_20;
            }
            ++v24;
          }
          while (v25 != v24);
          v24 = *((unsigned int *)v9 + 27);
        }
LABEL_20:
        ;
      }
      while (v22 != v24);
    }
    else
    {
      v25 = 0;
    }
LABEL_25:
    WTF::IndexMap<JSC::B3::Air::BasicBlock *,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::IndexMap<>((uint64_t)&v224, v25);
    v47 = *((_QWORD *)v9 + 1);
    v223[0] = v9;
    v223[1] = v47 + 184;
    v207 = (_QWORD *)(v47 + 184);
    v223[2] = a2;
    v48 = (JSC::B3::Air::Disassembler *)*((_QWORD *)v9 + 39);
    v205 = *((unsigned int *)v9 + 27);
    if ((_DWORD)v205)
    {
      v49 = 0;
      while (!*(_QWORD *)(*((_QWORD *)v9 + 12) + 8 * v49))
      {
        if (v205 == ++v49)
          goto LABEL_147;
      }
      if ((_DWORD)v205 != (_DWORD)v49)
      {
        v201 = (JSC::B3::Air::Code *)((char *)a2 + 56);
        LODWORD(v50) = *((_DWORD *)v9 + 27);
        LODWORD(v51) = v49;
        v203 = v47;
        v204 = v9;
        v208 = (uint64_t *)*((_QWORD *)v9 + 39);
        while (1)
        {
          if (v50 <= v51)
          {
            __break(0xC471u);
            JUMPOUT(0x1980AF630);
          }
          v206 = v51;
          v52 = *(JSC::B3::Air::BasicBlock **)(*((_QWORD *)v9 + 12) + 8 * v51);
          v229 = v52;
          v230 = -1;
          v53 = (char *)v224 + 40 * *(unsigned int *)v52;
          v54 = *((unsigned int *)v53 + 3);
          if ((_DWORD)v54)
          {
            for (i = 0; i != v54; ++i)
            {
              if (i >= *((unsigned int *)v53 + 3))
              {
                __break(0xC471u);
                JUMPOUT(0x1980AF608);
              }
              v56 = *(_QWORD *)v53;
              v57 = (unsigned int *)(*(_QWORD *)v53 + 12 * i);
              *((_DWORD *)a2 + 52) = 0;
              v59 = (unsigned __int8 *)(v57 + 2);
              v58 = *((unsigned __int8 *)v57 + 8);
              switch(*((_BYTE *)v57 + 8))
              {
                case 0x83:
                case 0x87:
                  v60 = *v57;
                  v61 = *((_DWORD *)a2 + 50);
                  if (v61 < *((_DWORD *)a2 + 13))
                  {
                    do
                    {
                      if ((v61 + 4) > *((_DWORD *)a2 + 48))
                      {
                        JSC::AssemblerBuffer::outOfLineGrow(v201, (uint64_t)v39, v40, v41, v42, v43, v44, v45);
                        v61 = *((_DWORD *)a2 + 50);
                      }
                      *(_DWORD *)(*((_QWORD *)a2 + 7) + v61) = -721215457;
                      v61 = *((_DWORD *)a2 + 50) + 4;
                      *((_DWORD *)a2 + 50) = v61;
                    }
                    while (v61 < *((_DWORD *)a2 + 13));
                    v58 = *v59;
                  }
                  v62 = (_BYTE *)(v56 + 12 * i);
                  v63 = v62[9];
                  v64 = v62[10];
                  v65 = v62[11];
                  *(_QWORD *)&v235 = v60;
                  *((_QWORD *)&v235 + 1) = v61;
                  BYTE3(v236) = v63 & 0xF;
                  *(_WORD *)((char *)&v236 + 1) = v58;
                  v66 = v64 << 6;
                  goto LABEL_39;
                case 0x84:
                case 0x88:
                  v67 = *v57;
                  v68 = *((_DWORD *)a2 + 50);
                  if (v68 < *((_DWORD *)a2 + 13))
                  {
                    do
                    {
                      if ((v68 + 4) > *((_DWORD *)a2 + 48))
                      {
                        JSC::AssemblerBuffer::outOfLineGrow(v201, (uint64_t)v39, v40, v41, v42, v43, v44, v45);
                        v68 = *((_DWORD *)a2 + 50);
                      }
                      *(_DWORD *)(*((_QWORD *)a2 + 7) + v68) = -721215457;
                      v68 = *((_DWORD *)a2 + 50) + 4;
                      *((_DWORD *)a2 + 50) = v68;
                    }
                    while (v68 < *((_DWORD *)a2 + 13));
                    v58 = *v59;
                  }
                  v69 = v56 + 12 * i;
                  v70 = *(_BYTE *)(v69 + 9);
                  v71 = *(_WORD *)(v69 + 4);
                  v65 = *(_BYTE *)(v69 + 11);
                  *(_QWORD *)&v235 = v67;
                  *((_QWORD *)&v235 + 1) = v68;
                  BYTE3(v236) = v70 & 0xF;
                  *(_WORD *)((char *)&v236 + 1) = v58;
                  v66 = v71 & 0x3F;
LABEL_39:
                  WORD2(v236) = v66;
                  LOBYTE(v236) = v65;
                  break;
                default:
                  v75 = *v57;
                  v76 = *((_DWORD *)a2 + 50);
                  if (v76 < *((_DWORD *)a2 + 13))
                  {
                    do
                    {
                      if ((v76 + 4) > *((_DWORD *)a2 + 48))
                      {
                        JSC::AssemblerBuffer::outOfLineGrow(v201, (uint64_t)v39, v40, v41, v42, v43, v44, v45);
                        v76 = *((_DWORD *)a2 + 50);
                      }
                      *(_DWORD *)(*((_QWORD *)a2 + 7) + v76) = -721215457;
                      v76 = *((_DWORD *)a2 + 50) + 4;
                      *((_DWORD *)a2 + 50) = v76;
                    }
                    while (v76 < *((_DWORD *)a2 + 13));
                    v58 = *v59;
                  }
                  v77 = *(_BYTE *)(v56 + 12 * i + 9);
                  LOBYTE(v236) = -1;
                  *(_QWORD *)&v235 = v75;
                  *((_QWORD *)&v235 + 1) = v76;
                  BYTE3(v236) = v77 & 0xF;
                  *(_WORD *)((char *)&v236 + 1) = v58;
                  WORD2(v236) = 0;
                  break;
              }
              v72 = *((unsigned int *)a2 + 11);
              if ((_DWORD)v72 == *((_DWORD *)a2 + 10))
              {
                v78 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 32, v72 + 1, (unint64_t)&v235, v41, v42, v43, v44, v45);
                v73 = *((_QWORD *)a2 + 4) + 24 * *((unsigned int *)a2 + 11);
                *(_QWORD *)v73 = 0;
                *(_QWORD *)(v73 + 8) = 0;
                *(_BYTE *)(v73 + 16) = -1;
                v79 = (((*(unsigned __int8 *)(v73 + 19) >> 4) & 0xF) << 20) | 0xF0041;
                *(_WORD *)(v73 + 17) = 65;
                *(_BYTE *)(v73 + 19) = BYTE2(v79);
                *(_WORD *)(v73 + 20) &= 0xFC00u;
                v46 = *(_OWORD *)v78;
                v74 = *(_QWORD *)(v78 + 16);
              }
              else
              {
                v73 = *((_QWORD *)a2 + 4) + 24 * v72;
                v46 = v235;
                v74 = v236;
              }
              *(_QWORD *)(v73 + 16) = v74;
              *(_OWORD *)v73 = v46;
              ++*((_DWORD *)a2 + 11);
            }
          }
          v80 = *((_DWORD *)a2 + 50);
          if (v80 < *((_DWORD *)a2 + 13))
          {
            v47 = v203;
            v9 = v204;
            v48 = (JSC::B3::Air::Disassembler *)v208;
            do
            {
              if ((v80 + 4) > *((_DWORD *)a2 + 48))
              {
                *(_QWORD *)&v46 = JSC::AssemblerBuffer::outOfLineGrow(v201, (uint64_t)v39, v40, v41, v42, v43, v44, v45).n128_u64[0];
                v80 = *((_DWORD *)a2 + 50);
              }
              *(_DWORD *)(*((_QWORD *)a2 + 7) + v80) = -721215457;
              v80 = *((_DWORD *)a2 + 50) + 4;
              *((_DWORD *)a2 + 50) = v80;
            }
            while (v80 < *((_DWORD *)a2 + 13));
          }
          else
          {
            v47 = v203;
            v9 = v204;
            v48 = (JSC::B3::Air::Disassembler *)v208;
          }
          *((_DWORD *)a2 + 52) = 0;
          *(_DWORD *)(*((_QWORD *)v228[0] + *(unsigned int *)v52) + 4) = v80;
          if (v48)
          {
            JSC::B3::Air::Disassembler::startBlock(v48, v52, a2);
            v194 = JSC::B3::Air::Code::entrypointIndex((uint64_t)v9, (uint64_t)v52);
            if ((v194 & 0xFF00000000) != 0)
            {
              v195 = v194;
              JSC::B3::Air::Disassembler::startEntrypoint((uint64_t)v48, (uint64_t)a2);
              if (*((_DWORD *)v9 + 71) <= v195)
              {
                __break(0xC471u);
                JUMPOUT(0x1980AF680);
              }
              v9 = v204;
              v196 = *(_QWORD *)(*((_QWORD *)v204 + 34) + 8 * v195);
              (*(void (**)(uint64_t, JSC::B3::Air::Code *, JSC::B3::Air *))(*(_QWORD *)v196 + 16))(v196, a2, v204);
              v48 = (JSC::B3::Air::Disassembler *)v208;
              JSC::B3::Air::Disassembler::endEntrypoint((uint64_t)v208, (uint64_t)a2);
              v47 = v203;
            }
          }
          else
          {
            v81 = *((unsigned int *)v9 + 63);
            if (!(_DWORD)v81)
            {
              __break(0xC471u);
              JUMPOUT(0x1980AF318);
            }
            v82 = 0;
            v83 = (unsigned int **)*((_QWORD *)v9 + 30);
            while (*v83 != (unsigned int *)v52)
            {
              ++v82;
              v83 += 2;
              if (v81 == v82)
                goto LABEL_54;
            }
            if (*((_DWORD *)v9 + 71) <= v82)
            {
              __break(0xC471u);
              JUMPOUT(0x1980AF678);
            }
            v145 = *(_QWORD *)(*((_QWORD *)v9 + 34) + 8 * v82);
            (*(void (**)(uint64_t, JSC::B3::Air::Code *, JSC::B3::Air *))(*(_QWORD *)v145 + 16))(v145, a2, v9);
          }
LABEL_54:
          v84 = *((_DWORD *)v52 + 5);
          if (v84 != 1)
          {
            v85 = 0;
            v86 = 0;
            while (1)
            {
              v230 = v86;
              if (v86 >= v84)
              {
                __break(0xC471u);
                JUMPOUT(0x1980AF620);
              }
              v87 = *((_QWORD *)v52 + 1) + v85;
              if (!*((_BYTE *)v9 + 197))
                goto LABEL_64;
              v88 = *(_QWORD *)(v87 + 112);
              v89 = *((_DWORD *)a2 + 50);
              if (v88)
              {
                v90 = *(_QWORD *)(v88 + 24);
                v91 = *(unsigned int *)(v47 + 196);
                if ((_DWORD)v91 && *(_DWORD *)(*v207 + 16 * v91 - 16) == v89)
                  goto LABEL_64;
                LODWORD(v235) = *((_DWORD *)a2 + 50);
                *((_QWORD *)&v235 + 1) = v90;
                if ((_DWORD)v91 != *(_DWORD *)(v47 + 192))
                {
                  v96 = *v207 + 16 * v91;
                  *(_DWORD *)v96 = v89;
                  *(_QWORD *)(v96 + 8) = v90;
                  goto LABEL_63;
                }
              }
              else
              {
                v91 = *(unsigned int *)(v47 + 196);
                if ((_DWORD)v91 && *(_DWORD *)(*v207 + 16 * v91 - 16) == v89)
                  goto LABEL_64;
                LODWORD(v235) = *((_DWORD *)a2 + 50);
                *((_QWORD *)&v235 + 1) = 0;
                if ((_DWORD)v91 != *(_DWORD *)(v47 + 192))
                {
                  v95 = *v207 + 16 * v91;
                  *(_DWORD *)v95 = v89;
                  *(_QWORD *)(v95 + 8) = 0;
                  goto LABEL_63;
                }
              }
              v92 = WTF::Vector<JSC::B3::PCToOriginMap::OriginRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v207, v91 + 1, (unint64_t)&v235);
              v91 = *(unsigned int *)(v47 + 196);
              v93 = *(_QWORD *)(v47 + 184) + 16 * v91;
              *(_DWORD *)v93 = *(_DWORD *)v92;
              *(_QWORD *)(v93 + 8) = *(_QWORD *)(v92 + 8);
LABEL_63:
              *(_DWORD *)(v47 + 196) = v91 + 1;
LABEL_64:
              v94 = *((_DWORD *)a2 + 50);
              *(int8x8_t *)&v46 = JSC::B3::Air::Inst::generate((uint64_t *)&v235, (int **)v87, (uint64_t)a2, (uint64_t)v227, v42, v43, v44, v45, *(int8x8_t *)&v46);
              if (v208)
              {
                v221 = *((_DWORD *)a2 + 50);
                v222 = v94;
                JSC::B3::Air::Disassembler::addInst(v208, v87, &v222, &v221);
              }
              ++v86;
              v84 = *((_DWORD *)v52 + 5);
              v85 += 128;
              if (v86 >= v84 - 1)
              {
                v230 = v84 - 1;
                v48 = (JSC::B3::Air::Disassembler *)v208;
                if (!v84)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980AF648);
                }
                goto LABEL_74;
              }
            }
          }
          v230 = 0;
LABEL_74:
          v97 = *((_QWORD *)v52 + 1) + ((v84 - 1) << 7);
          if (*(_WORD *)(v97 + 120) != 329)
            break;
          if (!*((_DWORD *)v52 + 9))
          {
            __break(0xC471u);
            JUMPOUT(0x1980AF658);
          }
          v122 = (*(_DWORD *)v52 + 1);
          v123 = *((unsigned int *)v9 + 27);
          if (v123 > v122)
          {
            while (1)
            {
              v124 = *(_QWORD *)(*((_QWORD *)v9 + 12) + 8 * v122);
              if (v124)
                break;
              if (v123 == ++v122)
                goto LABEL_99;
            }
          }
          v124 = v122 >= v123
               ? 0
               : *(_QWORD *)(*((_QWORD *)v9 + 12) + 8 * v122);
LABEL_99:
          if (**((_QWORD **)v52 + 3) != v124)
            break;
LABEL_90:
          v51 = (v206 + 1);
          v50 = *((unsigned int *)v9 + 27);
          if (v50 > v51)
          {
            while (!*(_QWORD *)(*((_QWORD *)v9 + 12) + 8 * v51))
            {
              if (v50 == ++v51)
              {
                LODWORD(v51) = *((_DWORD *)v9 + 27);
                break;
              }
            }
          }
          if ((_DWORD)v205 == (_DWORD)v51)
            goto LABEL_147;
        }
        JSC::B3::Air::generateWithAlreadyAllocatedRegisters(JSC::B3::Air::Code &,JSC::CCallHelpers &)::$_1::operator()(v223, *(_QWORD *)(v97 + 112));
        v105 = *((unsigned int *)v52 + 5);
        if (!(_DWORD)v105)
        {
          __break(0xC471u);
          JUMPOUT(0x1980AF638);
        }
        v106 = *((_QWORD *)v52 + 1) + ((v105 - 1) << 7);
        v107 = *((_DWORD *)a2 + 50);
        if ((*(__int16 *)(v106 + 120) - 330) <= 4)
        {
          JSC::B3::Air::Code::emitEpilogue(v9, a2, v98, v99, v100, v101, v102, v103);
          v139 = *((unsigned int *)v52 + 5);
          if (!(_DWORD)v139)
          {
            __break(0xC471u);
            JUMPOUT(0x1980AF670);
          }
          JSC::B3::Air::generateWithAlreadyAllocatedRegisters(JSC::B3::Air::Code &,JSC::CCallHelpers &)::$_1::operator()(v223, *(_QWORD *)(*((_QWORD *)v52 + 1) + (v139 << 7) - 16));
          if (v48)
          {
            v199 = *((unsigned int *)v52 + 5);
            if (!(_DWORD)v199)
            {
              __break(0xC471u);
              JUMPOUT(0x1980AF690);
            }
            v200 = *((_QWORD *)v52 + 1) + (v199 << 7) - 128;
            v219 = *((_DWORD *)a2 + 50);
            v220 = v107;
            JSC::B3::Air::Disassembler::addInst((uint64_t *)v48, v200, &v220, &v219);
          }
          goto LABEL_90;
        }
        JSC::B3::Air::Inst::generate((uint64_t *)&v217, (int **)v106, (uint64_t)a2, (uint64_t)v227, v100, v101, v102, v103, v104);
        if (v48)
        {
          v197 = *((unsigned int *)v52 + 5);
          if (!(_DWORD)v197)
          {
            __break(0xC471u);
            JUMPOUT(0x1980AF688);
          }
          v198 = *((_QWORD *)v52 + 1) + (v197 << 7) - 128;
          v215 = *((_DWORD *)a2 + 50);
          v216 = v107;
          JSC::B3::Air::Disassembler::addInst((uint64_t *)v48, v198, &v216, &v215);
        }
        if (v217 == -1)
        {
LABEL_88:
          v121 = *((unsigned int *)v52 + 5);
          if (!(_DWORD)v121)
          {
            __break(0xC471u);
            JUMPOUT(0x1980AF640);
          }
          JSC::B3::Air::generateWithAlreadyAllocatedRegisters(JSC::B3::Air::Code &,JSC::CCallHelpers &)::$_1::operator()(v223, *(_QWORD *)(*((_QWORD *)v52 + 1) + (v121 << 7) - 16));
          goto LABEL_90;
        }
        v115 = *((_DWORD *)v52 + 9);
        if (v115 == 2)
        {
          v211 = v217;
          v116 = v218;
          v212 = v218;
          v117 = ***((unsigned int ***)v52 + 3);
          if (*(_DWORD *)(*((_QWORD *)v228[0] + v117) + 4) == -1)
          {
            v125 = (char *)v224 + 40 * v117;
            LODWORD(v235) = v217;
            *(_QWORD *)((char *)&v235 + 4) = v218;
            v126 = *((unsigned int *)v125 + 3);
            if ((_DWORD)v126 == *((_DWORD *)v125 + 2))
            {
              v127 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v125, (void *)(v126 + 1), (unint64_t)&v235, v110, v111, v112, v113, v114);
              v128 = (_DWORD *)(*(_QWORD *)v125 + 12 * *((unsigned int *)v125 + 3));
              *v128 = *(_DWORD *)v127;
              v129 = v128 + 1;
              v116 = *(_QWORD *)(v127 + 4);
            }
            else
            {
              v134 = (unsigned int *)(*(_QWORD *)v125 + 12 * v126);
              *v134 = v217;
              v129 = v134 + 1;
            }
            *v129 = v116;
            ++*((_DWORD *)v125 + 3);
          }
          else
          {
            LODWORD(v235) = *(_DWORD *)(*((_QWORD *)v228[0] + v117) + 4);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(&v211, (unsigned int *)&v235, (uint64_t)a2, v110, v111, v112, v113, v114);
          }
          if (*((_DWORD *)v52 + 9) <= 1u)
          {
            __break(0xC471u);
            JUMPOUT(0x1980AF650);
          }
          v118 = (*(_DWORD *)v52 + 1);
          v119 = *((unsigned int *)v9 + 27);
          if (v119 > v118)
          {
            while (1)
            {
              v120 = *(_QWORD *)(*((_QWORD *)v9 + 12) + 8 * v118);
              if (v120)
                break;
              if (v119 == ++v118)
                goto LABEL_87;
            }
          }
          if (v118 >= v119)
            v120 = 0;
          else
            v120 = *(_QWORD *)(*((_QWORD *)v9 + 12) + 8 * v118);
LABEL_87:
          if (*(_QWORD *)(*((_QWORD *)v52 + 3) + 16) == v120)
            goto LABEL_88;
          for (j = *((_DWORD *)a2 + 50); j < *((_DWORD *)a2 + 13); *((_DWORD *)a2 + 50) = j)
          {
            if ((j + 4) > *((_DWORD *)a2 + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v201, v108, v109, v110, v111, v112, v113, v114);
              j = *((_DWORD *)a2 + 50);
            }
            *(_DWORD *)(*((_QWORD *)a2 + 7) + j) = -721215457;
            j = *((_DWORD *)a2 + 50) + 4;
          }
          v136 = j;
          if ((j + 4) > *((_DWORD *)a2 + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v201, v108, v109, v110, v111, v112, v113, v114);
            v136 = *((_DWORD *)a2 + 50);
          }
          *(_DWORD *)(*((_QWORD *)a2 + 7) + v136) = 335544320;
          *((_DWORD *)a2 + 50) += 4;
          if (*((_BYTE *)a2 + 328))
            v137 = 69;
          else
            v137 = 65;
          v209 = j;
          LODWORD(v210) = 0;
          BYTE4(v210) = v137;
          *(_WORD *)((char *)&v210 + 5) = 15;
          HIBYTE(v210) = -1;
          if (*((_DWORD *)v52 + 9) <= 1u)
          {
            __break(0xC471u);
            JUMPOUT(0x1980AF668);
          }
          v138 = **(unsigned int **)(*((_QWORD *)v52 + 3) + 16);
          if (*(_DWORD *)(*((_QWORD *)v228[0] + v138) + 4) != -1)
          {
            LODWORD(v235) = *(_DWORD *)(*((_QWORD *)v228[0] + v138) + 4);
            v132 = (unsigned int *)&v209;
            v133 = (unsigned int *)&v235;
            goto LABEL_107;
          }
          LODWORD(v235) = j;
          v147 = v210;
          *(_QWORD *)((char *)&v235 + 4) = v210;
          if (j == -1)
            goto LABEL_88;
          v140 = (char *)v224 + 40 * v138;
          v148 = *((unsigned int *)v140 + 3);
          if ((_DWORD)v148 == *((_DWORD *)v140 + 2))
          {
            v149 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v140, (void *)(v148 + 1), (unint64_t)&v235, v110, v111, v112, v113, v114);
            v150 = (_DWORD *)(*(_QWORD *)v140 + 12 * *((unsigned int *)v140 + 3));
            *v150 = *(_DWORD *)v149;
            v151 = v150 + 1;
            v147 = *(_QWORD *)(v149 + 4);
          }
          else
          {
            v152 = (int *)(*(_QWORD *)v140 + 12 * v148);
            *v152 = j;
            v151 = v152 + 1;
          }
          *v151 = v147;
        }
        else
        {
          if (v115 != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980AF5DCLL);
          }
          v213 = v217;
          v130 = v218;
          v214 = v218;
          v131 = ***((unsigned int ***)v52 + 3);
          if (*(_DWORD *)(*((_QWORD *)v228[0] + v131) + 4) != -1)
          {
            v234 = *(_DWORD *)(*((_QWORD *)v228[0] + v131) + 4);
            v132 = &v213;
            v133 = (unsigned int *)&v234;
LABEL_107:
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v132, v133, (uint64_t)a2, v110, v111, v112, v113, v114);
            goto LABEL_88;
          }
          v140 = (char *)v224 + 40 * v131;
          LODWORD(v235) = v217;
          *(_QWORD *)((char *)&v235 + 4) = v218;
          v141 = *((unsigned int *)v140 + 3);
          if ((_DWORD)v141 == *((_DWORD *)v140 + 2))
          {
            v142 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v140, (void *)(v141 + 1), (unint64_t)&v235, v110, v111, v112, v113, v114);
            v143 = (_DWORD *)(*(_QWORD *)v140 + 12 * *((unsigned int *)v140 + 3));
            *v143 = *(_DWORD *)v142;
            v144 = v143 + 1;
            v130 = *(_QWORD *)(v142 + 4);
          }
          else
          {
            v146 = (unsigned int *)(*(_QWORD *)v140 + 12 * v141);
            *v146 = v217;
            v144 = v146 + 1;
          }
          *v144 = v130;
        }
        ++*((_DWORD *)v140 + 3);
        goto LABEL_88;
      }
    }
LABEL_147:
    v229 = 0;
    v230 = -1;
    v153 = *((unsigned int *)v9 + 63);
    if ((_DWORD)v153)
    {
      if (v153 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x1980AF698);
      }
      v154 = (void *)WTF::fastMalloc((WTF *)(4 * v153));
      memset(v154, 255, 4 * v153);
      v155 = *((unsigned int *)v9 + 63);
      if ((_DWORD)v155)
      {
        if ((int)v155 - 1 >= v153)
        {
          __break(0xC471u);
          JUMPOUT(0x1980AF6A0);
        }
        v156 = v228[0];
        v157 = *((_QWORD *)v9 + 30);
        v158 = v155 - 1;
        do
        {
          v159 = v158;
          *((_DWORD *)v154 + v158) = *(_DWORD *)(*((_QWORD *)v156
                                                               + **(unsigned int **)(v157 + 16 * v158))
                                                             + 4);
          --v158;
        }
        while (v159);
      }
    }
    else
    {
      v154 = 0;
    }
    v160 = *((_QWORD *)v9 + 32);
    if (v160)
    {
      *((_QWORD *)v9 + 32) = 0;
      *((_DWORD *)v9 + 66) = 0;
      WTF::fastFree(v160, v39, v40, v41, v42, v43, v44, v45);
    }
    *((_QWORD *)v9 + 32) = v154;
    *((_DWORD *)v9 + 66) = v153;
    *((_DWORD *)v9 + 67) = v153;
    if ((_DWORD)v153 != *((_DWORD *)v9 + 71))
    {
      __break(0xC471u);
      JUMPOUT(0x1980AF438);
    }
    for (k = *((_DWORD *)a2 + 50); k < *((_DWORD *)a2 + 13); *((_DWORD *)a2 + 50) = k)
    {
      if ((k + 4) > *((_DWORD *)a2 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::B3::Air::Code *)((char *)a2 + 56), (uint64_t)v39, v40, v41, v42, v43, v44, v45);
        k = *((_DWORD *)a2 + 50);
      }
      *(_DWORD *)(*((_QWORD *)a2 + 7) + k) = -721215457;
      k = *((_DWORD *)a2 + 50) + 4;
    }
    *((_DWORD *)a2 + 52) = 0;
    v162 = *(unsigned int *)(v47 + 196);
    if (!(_DWORD)v162 || *(_DWORD *)(*v207 + 16 * v162 - 16) != k)
    {
      LODWORD(v235) = k;
      *((_QWORD *)&v235 + 1) = 0;
      if ((_DWORD)v162 == *(_DWORD *)(v47 + 192))
      {
        v163 = WTF::Vector<JSC::B3::PCToOriginMap::OriginRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v207, v162 + 1, (unint64_t)&v235);
        v162 = *(unsigned int *)(v47 + 196);
        v164 = *(_QWORD *)(v47 + 184) + 16 * v162;
        *(_DWORD *)v164 = *(_DWORD *)v163;
        *(_QWORD *)(v164 + 8) = *(_QWORD *)(v163 + 8);
      }
      else
      {
        v165 = *v207 + 16 * v162;
        *(_DWORD *)v165 = k;
        *(_QWORD *)(v165 + 8) = 0;
      }
      *(_DWORD *)(v47 + 196) = v162 + 1;
    }
    if (v48)
      JSC::B3::Air::Disassembler::startLatePath((uint64_t)v48, (uint64_t)a2);
    if (HIDWORD(v227[1]))
    {
      v166 = v227[0];
      v167 = 8 * HIDWORD(v227[1]);
      do
      {
        v168 = *(_QWORD *)v166;
        v166 = (WTF *)((char *)v166 + 8);
        (*(void (**)(uint64_t, JSC::B3::Air::Code *, WTF **))(*(_QWORD *)v168 + 16))(v168, a2, v227);
        v167 -= 8;
      }
      while (v167);
    }
    if (v48)
      JSC::B3::Air::Disassembler::endLatePath((uint64_t)v48, (uint64_t)a2);
    v169 = *((_DWORD *)a2 + 50);
    v170 = *(unsigned int *)(v47 + 196);
    if (!(_DWORD)v170 || *(_DWORD *)(*v207 + 16 * v170 - 16) != v169)
    {
      LODWORD(v235) = *((_DWORD *)a2 + 50);
      *((_QWORD *)&v235 + 1) = 0;
      if ((_DWORD)v170 == *(_DWORD *)(v47 + 192))
      {
        v171 = WTF::Vector<JSC::B3::PCToOriginMap::OriginRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v207, v170 + 1, (unint64_t)&v235);
        v170 = *(unsigned int *)(v47 + 196);
        v172 = *(_QWORD *)(v47 + 184) + 16 * v170;
        *(_DWORD *)v172 = *(_DWORD *)v171;
        *(_QWORD *)(v172 + 8) = *(_QWORD *)(v171 + 8);
      }
      else
      {
        v173 = *v207 + 16 * v170;
        *(_DWORD *)v173 = v169;
        *(_QWORD *)(v173 + 8) = 0;
      }
      *(_DWORD *)(v47 + 196) = v170 + 1;
    }
    v174 = v224;
    if (v226)
    {
      v175 = 40 * v226;
      v176 = (char *)v224 + 16;
      do
      {
        v177 = *((_QWORD *)v176 - 2);
        if (v176 != (char *)v177 && v177 != 0)
        {
          *((_QWORD *)v176 - 2) = 0;
          *((_DWORD *)v176 - 2) = 0;
          WTF::fastFree(v177, v39, v40, v41, v42, v43, v44, v45);
        }
        v176 += 40;
        v175 -= 40;
      }
      while (v175);
      v174 = v224;
    }
    if (v174)
    {
      v224 = 0;
      v225 = 0;
      WTF::fastFree((unint64_t)v174, v39, v40, v41, v42, v43, v44, v45);
    }
    if (HIDWORD(v228[1]))
    {
      v179 = (unsigned int **)v228[0];
      v180 = (unsigned int **)((char *)v228[0] + 8 * HIDWORD(v228[1]));
      do
      {
        v181 = *v179;
        *v179 = 0;
        if (v181)
        {
          do
          {
            v182 = __ldaxr(v181);
            v183 = v182 - 1;
          }
          while (__stlxr(v183, v181));
          if (!v183)
          {
            atomic_store(1u, v181);
            WTF::fastFree((unint64_t)v181, v39, v40, v41, v42, v43, v44, v45);
          }
        }
        ++v179;
      }
      while (v179 != v180);
    }
    v184 = v228[0];
    if (v228[0])
    {
      v228[0] = 0;
      LODWORD(v228[1]) = 0;
      WTF::fastFree((unint64_t)v184, v39, v40, v41, v42, v43, v44, v45);
    }
    v185 = v227[0];
    if (HIDWORD(v227[1]))
    {
      v186 = (WTF *)((char *)v227[0] + 8 * HIDWORD(v227[1]));
      do
      {
        v187 = *(unsigned int **)v185;
        *(_QWORD *)v185 = 0;
        if (v187)
        {
          v188 = v187 + 2;
          do
          {
            v189 = __ldaxr(v188);
            v190 = v189 - 1;
          }
          while (__stlxr(v190, v188));
          if (!v190)
          {
            atomic_store(1u, v187 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v187 + 8))(v187);
          }
        }
        v185 = (WTF *)((char *)v185 + 8);
      }
      while (v185 != v186);
      v185 = v227[0];
    }
    if (v185)
    {
      v227[0] = 0;
      LODWORD(v227[1]) = 0;
      WTF::fastFree((unint64_t)v185, v39, v40, v41, v42, v43, v44, v45);
    }
    if (v202)
      *((_DWORD *)a2 + 52) = 0;
    *((_BYTE *)a2 + 212) = v202;
    JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v232);
  }
  else
  {
    JSC::B3::Air::GenerateAndAllocateRegisters::generate(*this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::B3::Air::Inst::forEachArgCustom(uint64_t result, void (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t), uint64_t a3)
{
  _DWORD *v3;
  _QWORD v4[2];
  _QWORD v5[2];

  v3 = (_DWORD *)result;
  v4[0] = a2;
  v4[1] = a3;
  if (*(_WORD *)(result + 120) == 448)
  {
    v5[0] = a2;
    v5[1] = a3;
    if (!*(_DWORD *)(result + 12))
    {
      __break(0xC471u);
      JUMPOUT(0x1980AF984);
    }
    a2(a3, *(_QWORD *)result, 0, 0, 3);
    if (!v3[3])
    {
      __break(0xC471u);
      JUMPOUT(0x1980AF98CLL);
    }
    return (*(uint64_t (**)(_QWORD, _DWORD *, _QWORD *))(***(_QWORD ***)v3 + 16))(**(_QWORD **)v3, v3, v5);
  }
  else
  {
    switch(*(_WORD *)(result + 120))
    {
      case 0x1BE:
        return result;
      case 0x1BF:
        result = JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(result, (uint64_t)v4);
        break;
      case 0x1C1:
        result = JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(result, (uint64_t)v4);
        break;
      case 0x1C2:
        v5[0] = v4;
        result = JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(result, (uint64_t)v5);
        break;
      case 0x1C3:
        result = JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(result, (uint64_t)v4);
        break;
      default:
        WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", (JSC::B3::Air::Kind *)(result + 120), "\n");
        __break(0xC471u);
        JUMPOUT(0x1980AF97CLL);
    }
  }
  return result;
}

uint64_t JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  _BOOL4 v19;
  BOOL v20;
  uint64_t v21;
  _BOOL8 v22;

  v2 = 3 * (*(_DWORD *)(result + 12) / 3u);
  if (v2)
  {
    v4 = result;
    v5 = 0;
    v6 = 0;
    v7 = v2;
    do
    {
      v8 = *(unsigned int *)(v4 + 12);
      if (v6 >= v8)
        goto LABEL_27;
      v9 = v6 + 1;
      if (v9 >= v8)
      {
        __break(0xC471u);
        JUMPOUT(0x1980AFB50);
      }
      v10 = v9 + 1;
      if (v9 + 1 >= v8)
      {
LABEL_27:
        __break(0xC471u);
        JUMPOUT(0x1980AFB48);
      }
      v11 = *(_QWORD *)v4;
      v12 = *(_QWORD *)v4 + v5;
      v15 = *(_QWORD *)(v12 + 64);
      v14 = v12 + 64;
      v13 = v15;
      if (v15 > 8)
        v16 = 4;
      else
        v16 = byte_199152B78[v13];
      v17 = *(char *)(*(_QWORD *)v4 + v5 + 8);
      if (v17 == 1)
      {
        if (*(int *)(v11 + v5 + 16) < 1)
          goto LABEL_22;
      }
      else
      {
        if (*(_BYTE *)(*(_QWORD *)v4 + v5 + 8))
          v20 = v17 == 21;
        else
          v20 = 1;
        if (v20)
        {
LABEL_22:
          v19 = 0;
          goto LABEL_23;
        }
      }
      v18 = *(char *)(v11 + v5 + 40);
      if (v18 == 1)
      {
        v19 = *(_DWORD *)(v11 + v5 + 48) > 0;
      }
      else
      {
        if (!*(_BYTE *)(v11 + v5 + 40) || v18 == 21)
          goto LABEL_22;
        v19 = 1;
      }
LABEL_23:
      v21 = v11 + v5 + 32;
      v22 = !v19;
      (*(void (**)(_QWORD))a2)(*(_QWORD *)(a2 + 8));
      (*(void (**)(_QWORD, uint64_t, uint64_t, _BOOL8, uint64_t))a2)(*(_QWORD *)(a2 + 8), v21, 4, v22, v16);
      result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))a2)(*(_QWORD *)(a2 + 8), v14, 0, 0, 0);
      v5 += 96;
      v6 = v10 + 1;
    }
    while (v10 + 1 < v7);
  }
  return result;
}

uint64_t JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;

  if ((*(_WORD *)(*(_QWORD *)(a1 + 112) + 12) & 0xFFF) == 0x52)
    v2 = *(_QWORD *)(a1 + 112);
  else
    v2 = 0;
  v3 = *(_DWORD *)(a1 + 12);
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1980AFDDCLL);
  }
  if (v3 == 1)
  {
LABEL_50:
    __break(0xC471u);
    JUMPOUT(0x1980AFDB4);
  }
  v6 = *(_QWORD *)(**(_QWORD **)a1 + 16);
  result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t))a2)(*(_QWORD *)(a2 + 8), *(_QWORD *)a1 + 32, 0, 0, 3);
  v8 = *(_DWORD *)(v2 + 16);
  if (v8 >= 0x80000000)
    v8 = 0x80000000;
  if (v8)
  {
    if (v8 == 0x80000000)
      v10 = 2;
    else
      v10 = 1;
    v11 = 0;
    v12 = 64;
    do
    {
      v13 = *(_DWORD *)(v2 + 16);
      if ((v13 & 0x80000000) != 0)
      {
        v14 = *(_QWORD *)(v6 + 8);
        v15 = v13 & 0x7FFFFFFF;
        if (v15 >= *(_DWORD *)(v14 + 44))
        {
          __break(0xC471u);
          JUMPOUT(0x1980AFDCCLL);
        }
        v16 = *(_QWORD *)(v14 + 32) + 16 * v15;
        if (*(_DWORD *)(v16 + 12) <= v11)
        {
          __break(0xC471u);
          JUMPOUT(0x1980AFDD4);
        }
        v13 = *(_DWORD *)(*(_QWORD *)v16 + 4 * v11);
      }
      v17 = v11 + 2;
      if (v11 + 2 >= (unint64_t)*(unsigned int *)(a1 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x1980AFDC4);
      }
      if (v13 >= 0x80000000)
        v13 = 0x80000000;
      v18 = 0x40302030200uLL >> (8 * v13);
      if (v13 >= 6)
        LOBYTE(v18) = 0;
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, BOOL, _QWORD))a2)(*(_QWORD *)(a2 + 8), *(_QWORD *)a1 + v12, 4, v13 - 3 < 3, v18);
      ++v11;
      v12 += 32;
    }
    while (v17 - 1 != v10);
    v9 = v11 + 2;
  }
  else
  {
    v9 = 2;
  }
  if (*(_DWORD *)(v2 + 76) >= 2u)
  {
    v19 = 1;
    do
    {
      v20 = 0;
      v21 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8 * v19);
      v22 = v9;
      for (i = 32 * v9; ; i += 32)
      {
        LODWORD(v24) = *(_DWORD *)(v21 + 16);
        v24 = v24 >= 0x80000000 ? 0x80000000 : v24;
        if ((_DWORD)v24 == 2)
        {
          v25 = 1;
        }
        else
        {
          if ((_DWORD)v24 == 0x80000000)
            goto LABEL_50;
          v25 = 1;
          if (!(_DWORD)v24)
            v25 = v24;
        }
        if (v20 >= v25)
          break;
        if (v22 + v20 >= *(unsigned int *)(a1 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x1980AFDBCLL);
        }
        v26 = 0x40302030200uLL >> (8 * v24);
        if (v24 >= 6)
          LOBYTE(v26) = 0;
        result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, BOOL, _QWORD))a2)(*(_QWORD *)(a2 + 8), *(_QWORD *)a1 + i, 0, (v24 - 3) < 3, v26);
        ++v20;
      }
      ++v19;
      v9 = v22 + v20;
    }
    while (v19 < *(unsigned int *)(v2 + 76));
  }
  return result;
}

uint64_t JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a1 + 12)
    || ((*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))a2)(*(_QWORD *)(a2 + 8), *(_QWORD *)a1, 0, 0, 3), *(_DWORD *)(a1 + 12) <= 1u))
  {
    __break(0xC471u);
    JUMPOUT(0x1980AFE50);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t))a2)(*(_QWORD *)(a2 + 8), *(_QWORD *)a1 + 32, 0, 0, 3);
}

uint64_t WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>(const char *a1, JSC::B3::Air::Kind *a2, const char *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", a1);
  JSC::B3::Air::Kind::dump(a2, v8);
  WTF::PrintStream::printf(v8, "%s", a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t JSC::B3::Air::Inst::isValidForm(JSC::B3::Air::Inst *this, JSC::B3::Air::Inst *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int *v10;
  int v11;
  signed int v12;
  uint64_t result;
  int v14;
  int v15;
  int v16;
  int v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL4 v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  int v28;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  int v48;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  BOOL v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  BOOL v65;
  int v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  int v73;
  unsigned int v74;
  unsigned int v75;
  BOOL v77;
  int v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  int v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v113;
  unsigned int v114;
  int v115;
  uint64_t v116;
  unsigned int v117;
  int v118;
  int v119;
  int v121;
  uint64_t v122;
  unsigned int v123;
  int v124;
  int v125;
  uint64_t v126;
  unsigned int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  unsigned int v132;
  uint64_t v133;
  unsigned int v134;
  int v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  int v139;
  int v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  int v145;
  int v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  int v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  unsigned int v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  unsigned int v179;
  int v180;
  int v181;
  int v182;
  unsigned int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  uint64_t v188;
  int v189;
  int v190;
  int v191;
  int v192;
  unsigned int v193;
  int v194;
  int v196;
  int v197;
  int v198;
  uint64_t v199;
  int v200;
  int v201;
  unsigned int v203;
  int v204;
  int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v211;
  int v212;
  unsigned int v214;
  int v215;
  uint64_t v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  uint64_t v222;

  switch(*((_WORD *)this + 60))
  {
    case 0:
    case 0x1BD:
      return !*((_DWORD *)this + 3);
    case 1:
      v180 = *((_DWORD *)this + 3);
      if (v180 == 2)
        goto LABEL_1571;
      if (v180 != 3)
        return 0;
      v23 = *(unsigned int **)this;
      v181 = *(char *)(*(_QWORD *)this + 8);
      if (v181 == 1)
        goto LABEL_205;
      if (v181 != 2 || *((_BYTE *)v23 + 40) != 1 || *((_BYTE *)v23 + 72) != 1)
        return 0;
      v85 = *(_QWORD *)v23;
      if ((unint64_t)(*(_QWORD *)v23 + 4095) < 0x1FFF)
        goto LABEL_209;
      if ((v85 & 0xFFF) == 0)
        goto LABEL_1615;
      return 0;
    case 2:
      if (*((_DWORD *)this + 3) == 3)
      {
        v79 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v79 + 40) == 1
          && *(_BYTE *)(v79 + 72) == 1
          && *(int *)(v79 + 16) >= 1
          && *(int *)(v79 + 48) >= 1
          && *(int *)(v79 + 80) >= 1)
        {
          return JSC::B3::Air::isAddZeroExtend64Valid(v79, (const JSC::B3::Air::Inst *)3);
        }
      }
      return 0;
    case 3:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v79 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v79 + 40) != 1
        || *(_BYTE *)(v79 + 72) != 1
        || *(int *)(v79 + 16) < 1
        || *(int *)(v79 + 48) < 1
        || *(int *)(v79 + 80) < 1)
      {
        return 0;
      }
      return JSC::B3::Air::isAddZeroExtend64Valid(v79, (const JSC::B3::Air::Inst *)3);
    case 6:
      v83 = *((_DWORD *)this + 3);
      if (v83 != 3)
        goto LABEL_1570;
      v23 = *(unsigned int **)this;
      v84 = *(char *)(*(_QWORD *)this + 8);
      if (v84 == 1)
        goto LABEL_205;
      if (v84 != 2 || *((_BYTE *)v23 + 40) != 1 || *((_BYTE *)v23 + 72) != 1)
        return 0;
      v85 = *(_QWORD *)v23;
      if ((unint64_t)(*(_QWORD *)v23 + 4095) < 0x1FFF)
        goto LABEL_209;
      if ((v85 & 0xFFF) != 0)
        return 0;
LABEL_1615:
      if (!((unint64_t)v85 >> 24) || (unint64_t)((v85 >> 12) + 4095) <= 0xFFF)
        goto LABEL_209;
      return 0;
    case 7:
    case 8:
    case 0xB:
    case 0xC:
      if (*((_DWORD *)this + 3) == 3)
      {
        v39 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v39 + 40) == 1
          && *(_BYTE *)(v39 + 72) == 1
          && (*(_DWORD *)(v39 + 16) & 0x80000000) != 0
          && (*(_DWORD *)(v39 + 48) & 0x80000000) != 0)
        {
          goto LABEL_94;
        }
      }
      return 0;
    case 9:
      v83 = *((_DWORD *)this + 3);
      if (v83 != 3)
        goto LABEL_1570;
      v23 = *(unsigned int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1)
        return 0;
      v46 = *((char *)v23 + 40);
      if (v46 != 2)
        goto LABEL_206;
      if (*((_BYTE *)v23 + 72) != 1 || (int)v23[4] < 1)
        return 0;
      goto LABEL_1749;
    case 0xA:
      v83 = *((_DWORD *)this + 3);
      if (v83 == 3)
      {
        v23 = *(unsigned int **)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) != 1)
          return 0;
        v46 = *((char *)v23 + 40);
        if (v46 != 2)
        {
LABEL_206:
          if (v46 == 1 && *((_BYTE *)v23 + 72) == 1 && (int)v23[4] >= 1)
          {
LABEL_209:
            if ((int)v23[12] >= 1)
              goto LABEL_31;
          }
          return 0;
        }
        if (*((_BYTE *)v23 + 72) != 1 || (int)v23[4] < 1)
          return 0;
LABEL_1749:
        v199 = *((_QWORD *)v23 + 4);
        if ((unint64_t)(v199 + 4095) >= 0x1FFF
          && ((v199 & 0xFFF) != 0 || (unint64_t)v199 >> 24 && (unint64_t)((v199 >> 12) + 4095) > 0xFFF))
        {
          return 0;
        }
        goto LABEL_31;
      }
LABEL_1570:
      if (v83 != 2)
        return 0;
LABEL_1571:
      v10 = *(int **)this;
      v69 = *(char *)(*(_QWORD *)this + 8);
      if (v69 != 2)
      {
LABEL_1572:
        if (v69 == 1 && *((_BYTE *)v10 + 40) == 1 && v10[4] >= 1)
          goto LABEL_5;
        return 0;
      }
      if (*((_BYTE *)v10 + 40) != 1)
        return 0;
      v188 = *(_QWORD *)v10;
      if ((unint64_t)(*(_QWORD *)v10 + 4095) >= 0x1FFF
        && ((v188 & 0xFFF) != 0 || (unint64_t)v188 >> 24 && (unint64_t)((v188 >> 12) + 4095) > 0xFFF))
      {
        return 0;
      }
      goto LABEL_5;
    case 0xD:
    case 0xE:
      if (*((_DWORD *)this + 3) == 1)
      {
        v10 = *(int **)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1)
          goto LABEL_146;
      }
      return 0;
    case 0xF:
    case 0x10:
      if (*((_DWORD *)this + 3) == 2)
      {
        v10 = *(int **)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1 && *((_BYTE *)v10 + 40) == 1 && v10[4] < 0)
          goto LABEL_140;
      }
      return 0;
    case 0x11:
    case 0x13:
      v68 = *((_DWORD *)this + 3);
      if (v68 == 3)
        goto LABEL_204;
      if (v68 != 2)
        return 0;
      v10 = *(int **)this;
      v69 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
      goto LABEL_1572;
    case 0x14:
      if (*((_DWORD *)this + 3) != 4)
        return 0;
      v86 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v86 + 40) != 1
        || *(_BYTE *)(v86 + 72) != 1
        || *(_BYTE *)(v86 + 104) != 1
        || *(int *)(v86 + 16) < 1)
      {
        return 0;
      }
      goto LABEL_1648;
    case 0x15:
      if (*((_DWORD *)this + 3) != 4)
        return 0;
      v86 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v86 + 40) != 1
        || *(_BYTE *)(v86 + 72) != 1
        || *(_BYTE *)(v86 + 104) != 1
        || *(int *)(v86 + 16) < 1)
      {
        return 0;
      }
      goto LABEL_1648;
    case 0x16:
      if (*((_DWORD *)this + 3) != 4)
        return 0;
      v86 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v86 + 40) != 1
        || *(_BYTE *)(v86 + 72) != 1
        || *(_BYTE *)(v86 + 104) != 1
        || *(int *)(v86 + 16) < 1)
      {
        return 0;
      }
      goto LABEL_1648;
    case 0x17:
      if (*((_DWORD *)this + 3) != 4)
        return 0;
      v86 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v86 + 40) != 1
        || *(_BYTE *)(v86 + 72) != 1
        || *(_BYTE *)(v86 + 104) != 1
        || *(int *)(v86 + 16) < 1)
      {
        return 0;
      }
      goto LABEL_1648;
    case 0x18:
      if (*((_DWORD *)this + 3) != 4)
        return 0;
      v86 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v86 + 40) != 1
        || *(_BYTE *)(v86 + 72) != 1
        || *(_BYTE *)(v86 + 104) != 1
        || *(int *)(v86 + 16) < 1)
      {
        return 0;
      }
      goto LABEL_1648;
    case 0x19:
      if (*((_DWORD *)this + 3) != 4)
        return 0;
      v86 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v86 + 40) != 1
        || *(_BYTE *)(v86 + 72) != 1
        || *(_BYTE *)(v86 + 104) != 1
        || *(int *)(v86 + 16) < 1)
      {
        return 0;
      }
      goto LABEL_1648;
    case 0x1A:
      if (*((_DWORD *)this + 3) != 4)
        return 0;
      v86 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v86 + 40) != 1
        || *(_BYTE *)(v86 + 72) != 1
        || *(_BYTE *)(v86 + 104) != 1
        || *(int *)(v86 + 16) < 1)
      {
        return 0;
      }
      goto LABEL_1648;
    case 0x1B:
      if (*((_DWORD *)this + 3) != 4)
        return 0;
      v86 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v86 + 40) != 1
        || *(_BYTE *)(v86 + 72) != 1
        || *(_BYTE *)(v86 + 104) != 1
        || *(int *)(v86 + 16) < 1)
      {
        return 0;
      }
LABEL_1648:
      if (*(int *)(v86 + 48) >= 1 && *(int *)(v86 + 80) >= 1)
        goto LABEL_1650;
      return 0;
    case 0x1C:
    case 0x1D:
    case 0x1E:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
LABEL_204:
      v23 = *(unsigned int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1)
        return 0;
LABEL_205:
      v46 = *((unsigned __int8 *)v23 + 40);
      goto LABEL_206;
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v23 = *(unsigned int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *((_BYTE *)v23 + 40) != 1
        || *((_BYTE *)v23 + 72) != 1
        || (int)v23[4] < 1
        || (int)v23[12] < 1)
      {
        return 0;
      }
      goto LABEL_31;
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
      if (*((_DWORD *)this + 3) == 3)
      {
        v39 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v39 + 40) == 1
          && *(_BYTE *)(v39 + 72) == 1
          && (*(_DWORD *)(v39 + 16) & 0x80000000) != 0
          && (*(_DWORD *)(v39 + 48) & 0x80000000) != 0)
        {
          goto LABEL_94;
        }
      }
      return 0;
    case 0x30:
    case 0x31:
      if (*((_DWORD *)this + 3) != 2)
        return 0;
      v10 = *(int **)this;
      v65 = *(char *)(*(_QWORD *)this + 8) > 0xA
         || ((1 << *(_BYTE *)(*(_QWORD *)this + 8)) & 0x680) == 0;
      if (v65
        || *((_BYTE *)v10 + 40) != 1
        || *(_BYTE *)(*(_QWORD *)this + 8) == 9 && *(_BYTE *)(*(_QWORD *)v10 + 4) == 1)
      {
        return 0;
      }
      goto LABEL_5;
    case 0x32:
      v178 = *((_DWORD *)this + 3);
      if (v178 == 2)
        goto LABEL_77;
      if (v178 != 3)
        return 0;
      v23 = *(unsigned int **)this;
      v78 = *(char *)(*(_QWORD *)this + 8);
      if (v78 != 4)
        goto LABEL_385;
      if (*((_BYTE *)v23 + 40) != 1
        || *((_BYTE *)v23 + 72) != 1
        || JSC::ARM64LogicalImmediate::create32((JSC::ARM64LogicalImmediate *)*v23) == -1)
      {
        return 0;
      }
      v179 = *((_DWORD *)this + 3);
      if (v179 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B507CLL);
      }
      v82 = *(_QWORD *)this;
      if (*(int *)(*(_QWORD *)this + 48) < 1)
        return 0;
      if (v179 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4468);
      }
      goto LABEL_1775;
    case 0x33:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v23 = *(unsigned int **)this;
      v78 = *(char *)(*(_QWORD *)this + 8);
      if (v78 != 5)
        goto LABEL_385;
      if (*((_BYTE *)v23 + 40) != 1
        || *((_BYTE *)v23 + 72) != 1
        || JSC::ARM64LogicalImmediate::create64(*(_QWORD *)v23) == -1)
      {
        return 0;
      }
      v203 = *((_DWORD *)this + 3);
      if (v203 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4F9CLL);
      }
      v82 = *(_QWORD *)this;
      if (*(int *)(*(_QWORD *)this + 48) < 1)
        return 0;
      if (v203 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B508CLL);
      }
      goto LABEL_1775;
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      goto LABEL_273;
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x3F:
    case 0x40:
    case 0x41:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v23 = *(unsigned int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1)
        return 0;
      v38 = *((char *)v23 + 40);
      if (v38 != 2)
        goto LABEL_115;
      if (*((_BYTE *)v23 + 72) != 1 || (int)v23[4] < 1)
        return 0;
      goto LABEL_198;
    case 0x44:
      v131 = *((_DWORD *)this + 3);
      if (v131 == 2)
        goto LABEL_77;
      if (v131 != 3)
        return 0;
      v23 = *(unsigned int **)this;
      v78 = *(char *)(*(_QWORD *)this + 8);
      if (v78 != 4)
        goto LABEL_385;
      if (*((_BYTE *)v23 + 40) != 1
        || *((_BYTE *)v23 + 72) != 1
        || JSC::ARM64LogicalImmediate::create32((JSC::ARM64LogicalImmediate *)*v23) == -1)
      {
        return 0;
      }
      v132 = *((_DWORD *)this + 3);
      if (v132 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B506CLL);
      }
      v82 = *(_QWORD *)this;
      if (*(int *)(*(_QWORD *)this + 48) < 1)
        return 0;
      if (v132 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B2BFCLL);
      }
      goto LABEL_1775;
    case 0x45:
      v182 = *((_DWORD *)this + 3);
      if (v182 == 2)
        goto LABEL_77;
      if (v182 != 3)
        return 0;
      v23 = *(unsigned int **)this;
      v78 = *(char *)(*(_QWORD *)this + 8);
      if (v78 != 5)
        goto LABEL_385;
      if (*((_BYTE *)v23 + 40) != 1
        || *((_BYTE *)v23 + 72) != 1
        || JSC::ARM64LogicalImmediate::create64(*(_QWORD *)v23) == -1)
      {
        return 0;
      }
      v183 = *((_DWORD *)this + 3);
      if (v183 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5084);
      }
      v82 = *(_QWORD *)this;
      if (*(int *)(*(_QWORD *)this + 48) < 1)
        return 0;
      if (v183 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B455CLL);
      }
      goto LABEL_1775;
    case 0x46:
      v80 = *((_DWORD *)this + 3);
      if (v80 == 2)
        goto LABEL_77;
      if (v80 != 3)
        return 0;
      v23 = *(unsigned int **)this;
      v78 = *(char *)(*(_QWORD *)this + 8);
      if (v78 != 4)
        goto LABEL_385;
      if (*((_BYTE *)v23 + 40) != 1
        || *((_BYTE *)v23 + 72) != 1
        || JSC::ARM64LogicalImmediate::create32((JSC::ARM64LogicalImmediate *)*v23) == -1)
      {
        return 0;
      }
      v81 = *((_DWORD *)this + 3);
      if (v81 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5064);
      }
      v82 = *(_QWORD *)this;
      if (*(int *)(*(_QWORD *)this + 48) < 1)
        return 0;
      if (v81 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B100CLL);
      }
      goto LABEL_1775;
    case 0x47:
      v140 = *((_DWORD *)this + 3);
      if (v140 == 2)
        goto LABEL_77;
      if (v140 != 3)
        return 0;
      v23 = *(unsigned int **)this;
      v78 = *(char *)(*(_QWORD *)this + 8);
      if (v78 != 5)
      {
LABEL_385:
        if (v78 == 1)
        {
LABEL_114:
          v38 = *((unsigned __int8 *)v23 + 40);
LABEL_115:
          if (v38 == 1 && *((_BYTE *)v23 + 72) == 1)
          {
LABEL_132:
            if ((int)v23[4] >= 1)
              goto LABEL_50;
          }
        }
        return 0;
      }
      if (*((_BYTE *)v23 + 40) != 1
        || *((_BYTE *)v23 + 72) != 1
        || JSC::ARM64LogicalImmediate::create64(*(_QWORD *)v23) == -1)
      {
        return 0;
      }
      v141 = *((_DWORD *)this + 3);
      if (v141 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5074);
      }
      v82 = *(_QWORD *)this;
      if (*(int *)(*(_QWORD *)this + 48) < 1)
        return 0;
      if (v141 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B3238);
      }
LABEL_1775:
      v12 = *(_DWORD *)(v82 + 80);
      return v12 > 0;
    case 0x48:
    case 0x49:
    case 0x56:
    case 0x57:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x98:
    case 0x99:
      if (*((_DWORD *)this + 3) != 2)
        return 0;
LABEL_77:
      v10 = *(int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) == 1)
        goto LABEL_126;
      return 0;
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x58:
    case 0x59:
      if (*((_DWORD *)this + 3) == 2)
      {
        v10 = *(int **)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1 && *((_BYTE *)v10 + 40) == 1)
          goto LABEL_139;
      }
      return 0;
    case 0x52:
    case 0x53:
    case 0x54:
    case 0x55:
      if (*((_DWORD *)this + 3) != 2)
        return 0;
      v10 = *(int **)this;
      v42 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
      goto LABEL_185;
    case 0x5A:
      v9 = *((_DWORD *)this + 3);
      if (v9 == 2)
      {
        v10 = *(int **)this;
        v11 = *(char *)(*(_QWORD *)this + 8);
        if (v11 != 3)
        {
          switch(*(_BYTE *)(*(_QWORD *)this + 8))
          {
            case 1:
              v31 = *((char *)v10 + 40);
              if (v31 == 1)
                goto LABEL_44;
              if ((v31 - 9) < 2 || v31 == 7)
                goto LABEL_146;
              if (v31 == 11 && v10[4] >= 1)
                goto LABEL_364;
              return 0;
            case 2:
              if (*((_BYTE *)v10 + 40) != 1)
                return 0;
              v30 = *(_QWORD *)v10;
              if ((unint64_t)(*(_QWORD *)v10 + 4095) >= 0x1FFF
                && ((v30 & 0xFFF) != 0 || (unint64_t)v30 >> 24 && (unint64_t)((v30 >> 12) + 4095) > 0xFFF))
              {
                return 0;
              }
              goto LABEL_5;
            case 3:
            case 4:
            case 5:
            case 6:
            case 8:
              return 0;
            case 7:
            case 9:
            case 0xA:
              goto LABEL_4;
            case 0xB:
              if (*((_BYTE *)v10 + 40) == 1)
                goto LABEL_1652;
              return 0;
            default:
              if (v11 != 20)
                return 0;
              LOBYTE(v31) = *((_BYTE *)v10 + 40);
              result = 1;
              switch((char)v31)
              {
                case 1:
                  goto LABEL_5;
                case 7:
                case 9:
                case 10:
                  return result;
                case 11:
                  goto LABEL_364;
                default:
                  return 0;
              }
              return result;
          }
        }
        goto LABEL_4;
      }
      if (v9 != 3)
        return 0;
      v23 = *(unsigned int **)this;
      v24 = *(char *)(*(_QWORD *)this + 8);
      v25 = v24 > 0xA;
      v26 = (1 << v24) & 0x680;
      if (v25 || v26 == 0)
        return 0;
      v28 = *((char *)v23 + 40);
      if ((v28 - 9) >= 2 && v28 != 7)
        return 0;
LABEL_30:
      if (*((_BYTE *)v23 + 72) != 1)
        return 0;
      goto LABEL_31;
    case 0x5D:
    case 0x5F:
      if (*((_DWORD *)this + 3) != 2)
        return 0;
      v10 = *(int **)this;
      v66 = *(char *)(*(_QWORD *)this + 8);
      if (v66 == 1)
      {
        v200 = *((char *)v10 + 40);
        if ((v200 == 13 || v200 == 12) && v10[4] >= 1)
        {
          if (*((_BYTE *)v10 + 40) == 9)
            v201 = v10[11];
          else
            v201 = v10[8];
          return (v201 + 256) < 0x200;
        }
      }
      else if ((v66 == 13 || v66 == 12) && *((_BYTE *)v10 + 40) == 1)
      {
        v67 = *(_BYTE *)(*(_QWORD *)this + 8) == 9 ? v10[3] : *v10;
        if ((v67 + 256) <= 0x1FF)
          goto LABEL_5;
      }
      return 0;
    case 0x5E:
      v14 = *((_DWORD *)this + 3);
      if (v14 == 2)
      {
        v10 = *(int **)this;
        v15 = *(char *)(*(_QWORD *)this + 8);
        switch(*(_BYTE *)(*(_QWORD *)this + 8))
        {
          case 1:
            v16 = *((char *)v10 + 40);
            if (v16 == 1)
              goto LABEL_44;
            if ((v16 - 9) < 2 || v16 == 7)
              goto LABEL_146;
            if (v16 == 11 && v10[4] >= 1)
              goto LABEL_17;
            return 0;
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 8:
            return 0;
          case 7:
          case 9:
          case 0xA:
            goto LABEL_4;
          case 0xB:
            if (*((_BYTE *)v10 + 40) == 1)
              goto LABEL_1661;
            return 0;
          default:
            if (v15 != 20)
              return 0;
            LOBYTE(v16) = *((_BYTE *)v10 + 40);
            result = 1;
            switch((char)v16)
            {
              case 1:
                goto LABEL_5;
              case 7:
              case 9:
              case 10:
                return result;
              case 11:
                goto LABEL_17;
              default:
                return 0;
            }
            return result;
        }
      }
      if (v14 == 3)
      {
        v23 = *(unsigned int **)this;
        v70 = *(char *)(*(_QWORD *)this + 8);
        if (v70 <= 0xA
          && ((1 << v70) & 0x680) != 0
          && *((char *)v23 + 40) <= 0xA
          && ((1 << *((_BYTE *)v23 + 40)) & 0x680) != 0)
        {
          goto LABEL_30;
        }
      }
      return 0;
    case 0x60:
    case 0x61:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v23 = *(unsigned int **)this;
      v58 = *(char *)(*(_QWORD *)this + 8);
      v25 = v58 > 0xA;
      v59 = (1 << v58) & 0x680;
      v60 = v25 || v59 == 0;
      if (v60 || *((_BYTE *)v23 + 40) != 1 || *((_BYTE *)v23 + 72) != 1)
        return 0;
      goto LABEL_50;
    case 0x62:
    case 0x63:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v10 = *(int **)this;
      v50 = *(char *)(*(_QWORD *)this + 8);
      if (v50 != 20)
      {
        if (v50 != 1)
          return 0;
        v51 = *((char *)v10 + 40);
        if (v51 != 20)
        {
          if (v51 == 1)
          {
            v52 = *((char *)v10 + 72);
            v25 = v52 > 0xA;
            v53 = (1 << v52) & 0x680;
            if (!v25 && v53 != 0)
            {
LABEL_44:
              if (v10[4] >= 1)
                goto LABEL_5;
            }
          }
          return 0;
        }
        v211 = *((char *)v10 + 72);
        v25 = v211 > 0xA;
        v212 = (1 << v211) & 0x680;
        if (v25 || v212 == 0)
          return 0;
        goto LABEL_146;
      }
      v192 = *((char *)v10 + 40);
      if (v192 == 20)
      {
        v214 = *((unsigned __int8 *)v10 + 72);
        if (v214 >= 0xB)
          return 0;
        return (0x680u >> v214) & 1;
      }
      if (v192 != 1)
        return 0;
      v193 = *((char *)v10 + 72);
      v25 = v193 > 0xA;
      v194 = (1 << v193) & 0x680;
      if (v25 || v194 == 0)
        return 0;
      goto LABEL_5;
    case 0x6B:
      v124 = *((_DWORD *)this + 3);
      if (v124 == 3)
        goto LABEL_373;
      if (v124 == 2)
      {
        v10 = *(int **)this;
        LOBYTE(v42) = *(_BYTE *)(*(_QWORD *)this + 8);
        switch((char)v42)
        {
          case 1:
            LOBYTE(v16) = *((_BYTE *)v10 + 40);
            switch((char)v16)
            {
              case 1:
                goto LABEL_139;
              case 7:
              case 9:
              case 10:
                goto LABEL_213;
              case 11:
                if ((v10[4] & 0x80000000) == 0)
                  return 0;
LABEL_17:
                v18 = v16;
                v19 = v10[11];
                v20 = v19;
                if (v18 != 9)
                  v20 = v10[8];
                v21 = v19 < 9;
                v22 = 18;
                break;
              default:
                return 0;
            }
            goto LABEL_367;
          case 7:
          case 9:
          case 10:
            goto LABEL_705;
          case 11:
            if (*((_BYTE *)v10 + 40) == 1)
              goto LABEL_497;
            return 0;
          default:
            return 0;
        }
      }
      return 0;
    case 0x6C:
      v41 = *((_DWORD *)this + 3);
      if (v41 == 2)
      {
        v10 = *(int **)this;
        LOBYTE(v42) = *(_BYTE *)(*(_QWORD *)this + 8);
        switch((char)v42)
        {
          case 1:
            LOBYTE(v31) = *((_BYTE *)v10 + 40);
            switch((char)v31)
            {
              case 1:
                goto LABEL_139;
              case 7:
              case 9:
              case 10:
                goto LABEL_213;
              case 11:
                if ((v10[4] & 0x80000000) == 0)
                  return 0;
LABEL_364:
                v73 = v31;
                v19 = v10[11];
                v20 = v19;
                if (v73 != 9)
                  v20 = v10[8];
                v21 = v19 < 9;
                v22 = 258;
                break;
              default:
                return 0;
            }
            goto LABEL_367;
          case 7:
          case 9:
          case 10:
            goto LABEL_705;
          case 11:
            if (*((_BYTE *)v10 + 40) == 1)
              goto LABEL_1675;
            return 0;
          default:
            return 0;
        }
      }
      if (v41 != 3)
        return 0;
LABEL_373:
      v39 = *(_QWORD *)this;
      v75 = *(char *)(*(_QWORD *)this + 8);
      if (v75 > 0xA || ((1 << v75) & 0x680) == 0)
        return 0;
      v77 = *(char *)(v39 + 40) > 0xA || ((1 << *(_BYTE *)(v39 + 40)) & 0x680) == 0;
      if (v77 || *(_BYTE *)(v39 + 72) != 1)
        return 0;
      goto LABEL_94;
    case 0x6D:
    case 0x6E:
      if (*((_DWORD *)this + 3) == 3)
      {
        v39 = *(_QWORD *)this;
        v47 = *(char *)(*(_QWORD *)this + 8);
        v25 = v47 > 0xA;
        v48 = (1 << v47) & 0x680;
        if (!v25 && v48 != 0)
          goto LABEL_241;
      }
      return 0;
    case 0x6F:
    case 0x70:
      if (*((_DWORD *)this + 3) == 3)
      {
        v10 = *(int **)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1 && *((_BYTE *)v10 + 40) == 1)
        {
          v62 = *((char *)v10 + 72);
          v25 = v62 > 0xA;
          v63 = (1 << v62) & 0x680;
          if (!v25 && v63 != 0)
            goto LABEL_139;
        }
      }
      return 0;
    case 0x71:
      if (*((_DWORD *)this + 3) == 2)
      {
        v10 = *(int **)this;
        switch(*(_BYTE *)(*(_QWORD *)this + 8))
        {
          case 1:
            LOBYTE(v119) = *((_BYTE *)v10 + 40);
            switch((char)v119)
            {
              case 1:
                goto LABEL_139;
              case 7:
              case 9:
              case 10:
                goto LABEL_213;
              case 11:
                if (v10[4] < 0)
                  goto LABEL_1787;
                return 0;
              default:
                return 0;
            }
          case 7:
          case 9:
          case 0xA:
            goto LABEL_705;
          case 0xB:
            if (*((_BYTE *)v10 + 40) != 1)
              return 0;
            v215 = v10[3];
            if (*(_BYTE *)(*(_QWORD *)this + 8) != 9)
              v215 = *v10;
            if (v10[3] != 1 || v215 != 0)
              return 0;
            goto LABEL_140;
          default:
            return 0;
        }
      }
      return 0;
    case 0x72:
    case 0x73:
      if (*((_DWORD *)this + 3) == 1)
      {
        v10 = *(int **)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1)
          goto LABEL_213;
      }
      return 0;
    case 0x74:
      if (*((_DWORD *)this + 3) != 2)
        return 0;
      v10 = *(int **)this;
      v42 = *(char *)(*(_QWORD *)this + 8);
      if (v42 != 11)
        goto LABEL_185;
      if (*((_BYTE *)v10 + 40) != 1)
        return 0;
LABEL_1675:
      v189 = v42;
      v190 = v10[3];
      if (v189 != 9)
        v190 = *v10;
      v95 = v10[3] - 1;
      if (v95 > 7)
        return 0;
      result = 0;
      if (((0x8Bu >> v95) & 1) == 0 || v190)
        return result;
      v96 = 245;
      goto LABEL_1681;
    case 0x76:
      if (*((_DWORD *)this + 3) != 2)
        return 0;
      v10 = *(int **)this;
      v42 = *(char *)(*(_QWORD *)this + 8);
      if (v42 != 11)
      {
LABEL_185:
        if (v42 == 1)
        {
LABEL_186:
          if (*((_BYTE *)v10 + 40) == 1)
          {
LABEL_187:
            if (v10[4] >= 1)
            {
LABEL_140:
              v40 = v10[12];
              return v40 >> 31;
            }
          }
        }
        return 0;
      }
      if (*((_BYTE *)v10 + 40) != 1)
        return 0;
LABEL_497:
      v93 = v42;
      v94 = v10[3];
      if (v93 != 9)
        v94 = *v10;
      v95 = v10[3] - 1;
      if (v95 > 7)
        return 0;
      result = 0;
      if (((0x8Bu >> v95) & 1) != 0 && !v94)
      {
        v96 = 125;
LABEL_1681:
        if (((v96 >> v95) & 1) != 0)
          goto LABEL_140;
      }
      return result;
    case 0x77:
      if (*((_DWORD *)this + 3) != 2)
        return 0;
      v10 = *(int **)this;
      LOBYTE(v11) = *(_BYTE *)(*(_QWORD *)this + 8);
      switch((char)v11)
      {
        case 1:
          goto LABEL_233;
        case 7:
        case 9:
        case 10:
          goto LABEL_4;
        case 11:
          if (*((_BYTE *)v10 + 40) != 1)
            return 0;
LABEL_1652:
          v184 = v11;
          v185 = v10[3];
          if (v184 != 9)
            v185 = *v10;
          v152 = v10[3] - 1;
          if (v152 > 7)
            return 0;
          result = 0;
          if (((0x8Bu >> v152) & 1) == 0 || v185)
            return result;
          v153 = 245;
          break;
        default:
          return 0;
      }
      goto LABEL_1658;
    case 0x79:
      if (*((_DWORD *)this + 3) != 2)
        return 0;
      v10 = *(int **)this;
      LOBYTE(v15) = *(_BYTE *)(*(_QWORD *)this + 8);
      switch((char)v15)
      {
        case 1:
          goto LABEL_233;
        case 7:
        case 9:
        case 10:
          goto LABEL_4;
        case 11:
          if (*((_BYTE *)v10 + 40) != 1)
            return 0;
LABEL_1661:
          v186 = v15;
          v187 = v10[3];
          if (v186 != 9)
            v187 = *v10;
          v152 = v10[3] - 1;
          if (v152 > 7)
            return 0;
          result = 0;
          if (((0x8Bu >> v152) & 1) == 0 || v187)
            return result;
          v153 = 125;
          break;
        default:
          return 0;
      }
      goto LABEL_1658;
    case 0x7A:
      if (*((_DWORD *)this + 3) == 2)
        goto LABEL_1531;
      return 0;
    case 0x7B:
    case 0x7F:
    case 0x81:
    case 0x83:
    case 0x86:
    case 0x88:
      if (*((_DWORD *)this + 3) != 2)
        return 0;
      v10 = *(int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 6)
        return 0;
      goto LABEL_126;
    case 0x7C:
      if (*((_DWORD *)this + 3) != 2)
        return 0;
      v10 = *(int **)this;
      v118 = *(char *)(*(_QWORD *)this + 8);
      if (v118 == 20)
      {
        v119 = *((char *)v10 + 40);
        if ((v119 - 9) < 2 || v119 == 7)
          return 1;
        if (v119 != 11)
          return 0;
        goto LABEL_1787;
      }
      if (v118 != 1)
        return 0;
      v119 = *((char *)v10 + 40);
      if ((v119 - 9) >= 2 && v119 != 7)
      {
        if (v119 != 11 || v10[4] < 1)
          return 0;
LABEL_1787:
        v207 = v119;
        v208 = v10[11];
        v209 = v208;
        if (v207 != 9)
          v209 = v10[8];
        return v208 < 9 && (v208 & 0x1FF) == 1 && v209 == 0;
      }
      goto LABEL_146;
    case 0x7D:
    case 0x85:
    case 0x87:
    case 0x89:
      if (*((_DWORD *)this + 3) != 2)
        return 0;
      v10 = *(int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1 || *((_BYTE *)v10 + 40) != 6)
        return 0;
      goto LABEL_44;
    case 0x7E:
      if (*((_DWORD *)this + 3) != 2)
        return 0;
LABEL_1531:
      v10 = *(int **)this;
      v151 = *(char *)(*(_QWORD *)this + 8);
      if ((v151 - 9) < 2)
        goto LABEL_4;
      if (v151 != 11)
        goto LABEL_1533;
      if (*((_BYTE *)v10 + 40) != 1)
        return 0;
      if (v10[3] != 1 || *v10 != 0)
        return 0;
      goto LABEL_5;
    case 0x80:
      if (*((_DWORD *)this + 3) == 2)
        goto LABEL_1339;
      return 0;
    case 0x82:
      if (*((_DWORD *)this + 3) != 2)
        return 0;
LABEL_1339:
      v10 = *(int **)this;
      v151 = *(char *)(*(_QWORD *)this + 8);
      if ((v151 - 9) < 2)
        goto LABEL_4;
      if (v151 == 11)
      {
        if (*((_BYTE *)v10 + 40) != 1)
          return 0;
        v152 = v10[3] - 1;
        if (v152 > 7)
          return 0;
        result = 0;
        if (((0x8Bu >> v152) & 1) == 0 || *v10)
          return result;
        v153 = 119;
LABEL_1658:
        if (((v153 >> v152) & 1) == 0)
          return result;
      }
      else
      {
LABEL_1533:
        if (v151 != 7)
          return 0;
LABEL_4:
        if (*((_BYTE *)v10 + 40) != 1)
          return 0;
      }
LABEL_5:
      v12 = v10[12];
      return v12 > 0;
    case 0x84:
      if (*((_DWORD *)this + 3) != 2)
        return 0;
      v10 = *(int **)this;
      v110 = *(char *)(*(_QWORD *)this + 8);
      if (v110 == 20)
      {
        v204 = *((char *)v10 + 40);
        if ((v204 - 9) < 2 || v204 == 7)
          return 1;
        if (v204 != 11)
          return 0;
LABEL_1781:
        v19 = v10[11];
        v20 = v10[8];
        v21 = v19 < 9;
        v22 = 6;
LABEL_367:
        v74 = v21 & (v22 >> v19);
        if (v20)
          return 0;
        else
          return v74;
      }
      if (v110 != 1)
        return 0;
      v111 = *((char *)v10 + 40);
      if ((v111 - 9) >= 2 && v111 != 7)
      {
        if (v111 != 11 || v10[4] < 1)
          return 0;
        goto LABEL_1781;
      }
LABEL_146:
      v12 = v10[4];
      return v12 > 0;
    case 0x8E:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 2
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1551;
        }
      }
      return 0;
    case 0x8F:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 2
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1551;
        }
      }
      return 0;
    case 0x90:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 2
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1551;
        }
      }
      return 0;
    case 0x91:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 2
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1551;
        }
      }
      return 0;
    case 0x92:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 2
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1551;
        }
      }
      return 0;
    case 0x93:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 2
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1551;
        }
      }
      return 0;
    case 0x94:
    case 0x95:
      if (*((_DWORD *)this + 3) == 3)
      {
        v23 = *(unsigned int **)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 2 && *((_BYTE *)v23 + 40) == 2 && *((_BYTE *)v23 + 72) == 1)
        {
          v55 = *(_QWORD *)v23;
          if ((unint64_t)(*(_QWORD *)v23 + 4095) < 0x1FFF
            || (v55 & 0xFFF) == 0 && (!((unint64_t)v55 >> 24) || (unint64_t)((v55 >> 12) + 4095) <= 0xFFF))
          {
            goto LABEL_198;
          }
        }
      }
      return 0;
    case 0x96:
    case 0x97:
    case 0x9A:
    case 0x9B:
    case 0x9C:
    case 0x9D:
      if (*((_DWORD *)this + 3) == 3)
      {
        v23 = *(unsigned int **)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1)
          goto LABEL_114;
      }
      return 0;
    case 0x9E:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0x9F:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xA0:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xA1:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xA2:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xA3:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xA4:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 2
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1551;
        }
      }
      return 0;
    case 0xA5:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 2
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1551;
        }
      }
      return 0;
    case 0xA6:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 2
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1551;
        }
      }
      return 0;
    case 0xA7:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 2
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1551;
        }
      }
      return 0;
    case 0xA8:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 2
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1551;
        }
      }
      return 0;
    case 0xA9:
      if (*((_DWORD *)this + 3) != 4)
        return 0;
      v86 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v86 + 40) != 2
        || *(_BYTE *)(v86 + 72) != 2
        || *(_BYTE *)(v86 + 104) != 1)
      {
        return 0;
      }
LABEL_1551:
      if (*(int *)(v86 + 16) >= 1)
      {
        v176 = *(_QWORD *)(v86 + 32);
        if ((unint64_t)(v176 + 4095) < 0x1FFF
          || (v176 & 0xFFF) == 0
          && (!((unint64_t)v176 >> 24) || (unint64_t)((v176 >> 12) + 4095) <= 0xFFF))
        {
          goto LABEL_1564;
        }
      }
      return 0;
    case 0xAA:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xAB:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xAC:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xAD:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xAE:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xAF:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xB0:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xB1:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xB2:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xB3:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xB4:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xB5:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xB6:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xB7:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xB8:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xB9:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xBA:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xBB:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xBC:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xBD:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xBE:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xBF:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xC0:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xC1:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xC2:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xC3:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xC4:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xC5:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xC6:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xC7:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xC8:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v86 + 40) == 1
          && *(_BYTE *)(v86 + 72) == 2
          && *(_BYTE *)(v86 + 104) == 1)
        {
          goto LABEL_1562;
        }
      }
      return 0;
    case 0xC9:
      if (*((_DWORD *)this + 3) != 4)
        return 0;
      v86 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v86 + 40) != 1
        || *(_BYTE *)(v86 + 72) != 2
        || *(_BYTE *)(v86 + 104) != 1)
      {
        return 0;
      }
LABEL_1562:
      if (*(int *)(v86 + 16) >= 1)
        goto LABEL_1563;
      return 0;
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
      if (*((_DWORD *)this + 3) == 3)
      {
        v39 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1 && *(_BYTE *)(v39 + 40) == 1)
          goto LABEL_275;
      }
      return 0;
    case 0xCE:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v91 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v91 + 40) != 1
        || *(_BYTE *)(v91 + 72) != 6
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v92 = *((_DWORD *)this + 3);
      if (!v92)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4EECLL);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v92 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4FB4);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v92 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B13ECLL);
      }
      goto LABEL_31;
    case 0xCF:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v89 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v89 + 40) != 1
        || *(_BYTE *)(v89 + 72) != 6
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v90 = *((_DWORD *)this + 3);
      if (!v90)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4EE4);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v90 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4FACLL);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v90 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B12C0);
      }
      goto LABEL_31;
    case 0xD0:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v87 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v87 + 40) != 1
        || *(_BYTE *)(v87 + 72) != 6
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v88 = *((_DWORD *)this + 3);
      if (!v88)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4EDCLL);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v88 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4FA4);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v88 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B11C4);
      }
      goto LABEL_31;
    case 0xD1:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v174 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v174 + 40) != 1
        || *(_BYTE *)(v174 + 72) != 6
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v175 = *((_DWORD *)this + 3);
      if (!v175)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4F94);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v175 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B505CLL);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v175 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B41A4);
      }
      goto LABEL_31;
    case 0xF2:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v172 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v172 + 40) != 6
        || *(_BYTE *)(v172 + 72) != 1
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v173 = *((_DWORD *)this + 3);
      if (!v173)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4F8CLL);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v173 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5054);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v173 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B402CLL);
      }
      goto LABEL_31;
    case 0xF3:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v168 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v168 + 40) != 6
        || *(_BYTE *)(v168 + 72) != 1
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v169 = *((_DWORD *)this + 3);
      if (!v169)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4F7CLL);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v169 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5044);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v169 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B3EF8);
      }
      goto LABEL_31;
    case 0xF4:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v166 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v166 + 40) != 6
        || *(_BYTE *)(v166 + 72) != 1
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v167 = *((_DWORD *)this + 3);
      if (!v167)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4F74);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v167 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B503CLL);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v167 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B3E80);
      }
      goto LABEL_31;
    case 0xF5:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v164 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v164 + 40) != 6
        || *(_BYTE *)(v164 + 72) != 1
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v165 = *((_DWORD *)this + 3);
      if (!v165)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4F6CLL);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v165 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5034);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v165 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B3D70);
      }
      goto LABEL_31;
    case 0xF6:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v160 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v160 + 40) != 6
        || *(_BYTE *)(v160 + 72) != 1
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v161 = *((_DWORD *)this + 3);
      if (!v161)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4F5CLL);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v161 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5024);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v161 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B3BE4);
      }
      goto LABEL_31;
    case 0xF7:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v158 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v158 + 40) != 6
        || *(_BYTE *)(v158 + 72) != 1
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v159 = *((_DWORD *)this + 3);
      if (!v159)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4F54);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v159 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B501CLL);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v159 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B3B6CLL);
      }
      goto LABEL_31;
    case 0xF8:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v155 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v155 + 40) != 6
        || *(_BYTE *)(v155 + 72) != 1
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v156 = *((_DWORD *)this + 3);
      if (!v156)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4F4CLL);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v156 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5014);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v156 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B3A0CLL);
      }
      goto LABEL_31;
    case 0xF9:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v149 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v149 + 40) != 6
        || *(_BYTE *)(v149 + 72) != 1
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v150 = *((_DWORD *)this + 3);
      if (!v150)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4F44);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v150 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B500CLL);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v150 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B3898);
      }
      goto LABEL_31;
    case 0xFA:
    case 0xFB:
      if (*((_DWORD *)this + 3) == 2)
        goto LABEL_125;
      return 0;
    case 0xFC:
    case 0xFD:
    case 0x100:
    case 0x101:
    case 0x104:
    case 0x105:
      if (*((_DWORD *)this + 3) == 3)
      {
        v23 = *(unsigned int **)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1 && *((_BYTE *)v23 + 40) == 6)
          goto LABEL_131;
      }
      return 0;
    case 0xFE:
    case 0xFF:
    case 0x102:
    case 0x103:
    case 0x107:
    case 0x108:
      if (*((_DWORD *)this + 3) != 2)
        return 0;
LABEL_125:
      v10 = *(int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) == 6)
        goto LABEL_126;
      return 0;
    case 0x10A:
      if (*((_DWORD *)this + 3) == 3)
      {
        v23 = *(unsigned int **)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1)
          goto LABEL_475;
      }
      return 0;
    case 0x10B:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v23 = *(unsigned int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1)
        return 0;
LABEL_475:
      if (*((_BYTE *)v23 + 40) != 6)
        return 0;
LABEL_131:
      if (*((_BYTE *)v23 + 72) == 1)
        goto LABEL_132;
      return 0;
    case 0x10C:
    case 0x10D:
      if (*((_DWORD *)this + 3) != 2)
        return 0;
      v10 = *(int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1)
        return 0;
LABEL_126:
      if (*((_BYTE *)v10 + 40) != 1)
        return 0;
      goto LABEL_44;
    case 0x10E:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v102 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v102 + 40) != 6
        || *(_BYTE *)(v102 + 72) != 1
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v103 = *((_DWORD *)this + 3);
      if (!v103)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4EF4);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v103 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4FBCLL);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v103 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B18BCLL);
      }
      goto LABEL_31;
    case 0x10F:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v105 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v105 + 40) != 6
        || *(_BYTE *)(v105 + 72) != 1
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v106 = *((_DWORD *)this + 3);
      if (!v106)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4EFCLL);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v106 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4FC4);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v106 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B1B94);
      }
      goto LABEL_31;
    case 0x110:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v113 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v113 + 40) != 6
        || *(_BYTE *)(v113 + 72) != 1
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v114 = *((_DWORD *)this + 3);
      if (!v114)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4F04);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v114 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4FCCLL);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v114 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B1F04);
      }
      goto LABEL_31;
    case 0x111:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v116 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v116 + 40) != 6
        || *(_BYTE *)(v116 + 72) != 1
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v117 = *((_DWORD *)this + 3);
      if (!v117)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4F0CLL);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v117 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4FD4);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v117 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B21A8);
      }
      goto LABEL_31;
    case 0x112:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v122 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v122 + 40) != 6
        || *(_BYTE *)(v122 + 72) != 1
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v123 = *((_DWORD *)this + 3);
      if (!v123)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4F14);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v123 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4FDCLL);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v123 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B255CLL);
      }
      goto LABEL_31;
    case 0x113:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v126 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v126 + 40) != 6
        || *(_BYTE *)(v126 + 72) != 1
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v127 = *((_DWORD *)this + 3);
      if (!v127)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4F1CLL);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v127 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4FE4);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v127 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B2880);
      }
      goto LABEL_31;
    case 0x114:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v133 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v133 + 40) != 6
        || *(_BYTE *)(v133 + 72) != 1
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v134 = *((_DWORD *)this + 3);
      if (!v134)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4F24);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v134 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4FECLL);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v134 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B2C74);
      }
      goto LABEL_31;
    case 0x115:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v136 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v136 + 40) != 6
        || *(_BYTE *)(v136 + 72) != 1
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v137 = *((_DWORD *)this + 3);
      if (!v137)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4F2CLL);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v137 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4FF4);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v137 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B2F14);
      }
      goto LABEL_31;
    case 0x116:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v143 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v143 + 40) != 6
        || *(_BYTE *)(v143 + 72) != 1
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v144 = *((_DWORD *)this + 3);
      if (!v144)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4F34);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v144 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4FFCLL);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v144 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B33B4);
      }
      goto LABEL_31;
    case 0x117:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v147 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v147 + 40) != 6
        || *(_BYTE *)(v147 + 72) != 1
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v148 = *((_DWORD *)this + 3);
      if (!v148)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4F3CLL);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v148 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5004);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v148 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B35F0);
      }
      goto LABEL_31;
    case 0x118:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v162 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v162 + 40) != 6
        || *(_BYTE *)(v162 + 72) != 1
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v163 = *((_DWORD *)this + 3);
      if (!v163)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4F64);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v163 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B502CLL);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v163 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B3C94);
      }
      goto LABEL_31;
    case 0x119:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v170 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v170 + 40) != 6
        || *(_BYTE *)(v170 + 72) != 1
        || !JSC::isARM64_LSE(this))
      {
        return 0;
      }
      v171 = *((_DWORD *)this + 3);
      if (!v171)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B4F84);
      }
      v23 = *(unsigned int **)this;
      if (*(int *)(*(_QWORD *)this + 16) < 1)
        return 0;
      if (v171 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B504CLL);
      }
      if ((int)v23[12] < 1)
        return 0;
      if (v171 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B3F70);
      }
      goto LABEL_31;
    case 0x11A:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 14)
          goto LABEL_505;
      }
      return 0;
    case 0x11B:
      if (*((_DWORD *)this + 3) != 4)
        return 0;
      v86 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 14)
        return 0;
LABEL_505:
      if (*(_BYTE *)(v86 + 40) != 1)
        return 0;
      v97 = *(char *)(v86 + 72);
      if (v97 != 2)
        goto LABEL_1229;
      if (*(_BYTE *)(v86 + 104) != 1)
        return 0;
LABEL_1563:
      if (*(int *)(v86 + 48) < 1)
        return 0;
LABEL_1564:
      v177 = *(_QWORD *)(v86 + 64);
      if ((unint64_t)(v177 + 4095) < 0x1FFF
        || (v177 & 0xFFF) == 0 && (!((unint64_t)v177 >> 24) || (unint64_t)((v177 >> 12) + 4095) <= 0xFFF))
      {
        goto LABEL_1650;
      }
      return 0;
    case 0x11C:
      if (*((_DWORD *)this + 3) != 4)
        return 0;
      v86 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 15 || *(_BYTE *)(v86 + 40) != 1)
        return 0;
      v97 = *(char *)(v86 + 72);
      if (v97 != 4)
        goto LABEL_1229;
      if (*(_BYTE *)(v86 + 104) != 1
        || *(int *)(v86 + 48) < 1
        || JSC::ARM64LogicalImmediate::create32((JSC::ARM64LogicalImmediate *)*(unsigned int *)(v86 + 64)) == -1)
      {
        return 0;
      }
      if (*((_DWORD *)this + 3) <= 3u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5094);
      }
      v86 = *(_QWORD *)this;
      goto LABEL_1650;
    case 0x11D:
      if (*((_DWORD *)this + 3) != 4)
        return 0;
      v86 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 15 || *(_BYTE *)(v86 + 40) != 1)
        return 0;
      goto LABEL_1228;
    case 0x11E:
      if (*((_DWORD *)this + 3) == 4)
        goto LABEL_950;
      return 0;
    case 0x11F:
      if (*((_DWORD *)this + 3) != 4)
        return 0;
LABEL_950:
      v86 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) == 16
        && *(_BYTE *)(v86 + 40) == 1
        && *(_BYTE *)(v86 + 72) == 1
        && *(_BYTE *)(v86 + 104) == 1
        && (*(_DWORD *)(v86 + 48) & 0x80000000) != 0
        && (*(_DWORD *)(v86 + 80) & 0x80000000) != 0)
      {
        goto LABEL_1650;
      }
      return 0;
    case 0x120:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v23 = *(unsigned int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 16)
        return 0;
      goto LABEL_1192;
    case 0x121:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v23 = *(unsigned int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 16)
        return 0;
LABEL_1192:
      if (*((_BYTE *)v23 + 40) != 1 || *((_BYTE *)v23 + 72) != 1)
        return 0;
      goto LABEL_1203;
    case 0x123:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v23 = *(unsigned int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 14)
        return 0;
      goto LABEL_57;
    case 0x124:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v23 = *(unsigned int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 14)
        return 0;
LABEL_57:
      if (*((_BYTE *)v23 + 40) != 1)
        return 0;
      v33 = *((char *)v23 + 72);
      if (v33 == 1)
        goto LABEL_50;
      if (v33 == 2)
        goto LABEL_60;
      return 0;
    case 0x126:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v23 = *(unsigned int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 15 || *((_BYTE *)v23 + 40) != 1)
        return 0;
      v37 = *((char *)v23 + 72);
      if (v37 != 4)
        goto LABEL_74;
      if ((int)v23[12] < 1)
        return 0;
      v35 = JSC::ARM64LogicalImmediate::create32((JSC::ARM64LogicalImmediate *)v23[16]);
      return v35 != -1;
    case 0x127:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v23 = *(unsigned int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 15 || *((_BYTE *)v23 + 40) != 1)
        return 0;
      v32 = *((char *)v23 + 72);
      if (v32 == 1)
        goto LABEL_50;
      if (v32 != 5 || (int)v23[12] < 1)
        return 0;
      v35 = JSC::ARM64LogicalImmediate::create64(*((_QWORD *)v23 + 8));
      return v35 != -1;
    case 0x12A:
      if (*((_DWORD *)this + 3) == 3)
        goto LABEL_90;
      return 0;
    case 0x12B:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
LABEL_90:
      v39 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) == 16 && *(_BYTE *)(v39 + 40) == 1)
        goto LABEL_92;
      return 0;
    case 0x12C:
    case 0x12D:
      if (*((_DWORD *)this + 3) != 2)
        return 0;
      v10 = *(int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 16)
        return 0;
LABEL_705:
      if (*((_BYTE *)v10 + 40) != 1)
        return 0;
      goto LABEL_140;
    case 0x12E:
      v145 = *((_DWORD *)this + 3);
      if (v145 != 3)
      {
        if (v145 != 4)
          return 0;
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) != 15)
          return 0;
        goto LABEL_1227;
      }
      v23 = *(unsigned int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 15)
        return 0;
      v198 = *((char *)v23 + 40);
      if (v198 == 2)
        goto LABEL_197;
      if (v198 == 1)
        goto LABEL_73;
      return 0;
    case 0x12F:
      v128 = *((_DWORD *)this + 3);
      if (v128 == 3)
      {
        v23 = *(unsigned int **)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) != 15)
          return 0;
LABEL_72:
        v36 = *((char *)v23 + 40);
        if (v36 == 1)
        {
LABEL_73:
          v37 = *((unsigned __int8 *)v23 + 72);
LABEL_74:
          if (v37 != 1)
            return 0;
LABEL_50:
          if ((int)v23[12] < 1)
            return 0;
        }
        else
        {
          if (v36 != 2)
            return 0;
LABEL_197:
          if (*((_BYTE *)v23 + 72) != 1)
            return 0;
LABEL_198:
          v45 = *((_QWORD *)v23 + 4);
          if ((unint64_t)(v45 + 4095) >= 0x1FFF
            && ((v45 & 0xFFF) != 0 || (unint64_t)v45 >> 24 && (unint64_t)((v45 >> 12) + 4095) > 0xFFF))
          {
            return 0;
          }
        }
LABEL_31:
        v12 = v23[20];
        return v12 > 0;
      }
      if (v128 != 4)
        return 0;
      v86 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 15)
        return 0;
LABEL_1227:
      if (*(_BYTE *)(v86 + 40) == 1)
      {
LABEL_1228:
        v97 = *(unsigned __int8 *)(v86 + 72);
LABEL_1229:
        if (v97 != 1 || *(_BYTE *)(v86 + 104) != 1 || *(int *)(v86 + 48) < 1)
          return 0;
LABEL_1232:
        if (*(int *)(v86 + 80) >= 1)
        {
LABEL_1650:
          v12 = *(_DWORD *)(v86 + 112);
          return v12 > 0;
        }
      }
      return 0;
    case 0x130:
      if (*((_DWORD *)this + 3) == 4)
      {
        v86 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 15)
          goto LABEL_1227;
      }
      return 0;
    case 0x131:
      if (*((_DWORD *)this + 3) == 5)
      {
        v98 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 15 && *(_BYTE *)(v98 + 40) == 1)
          goto LABEL_1004;
      }
      return 0;
    case 0x132:
      if (*((_DWORD *)this + 3) == 3)
      {
        v23 = *(unsigned int **)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 15)
          goto LABEL_72;
      }
      return 0;
    case 0x133:
      if (*((_DWORD *)this + 3) == 3)
      {
        v23 = *(unsigned int **)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 15)
          goto LABEL_72;
      }
      return 0;
    case 0x134:
    case 0x135:
      if (*((_DWORD *)this + 3) != 2)
        return 0;
      v10 = *(int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 15)
        return 0;
      goto LABEL_4;
    case 0x136:
      v129 = *((_DWORD *)this + 3);
      if (v129 != 6)
      {
        if (v129 != 5)
          return 0;
        v98 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) != 14 || *(_BYTE *)(v98 + 40) != 1)
          return 0;
        goto LABEL_1004;
      }
      v101 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 14 || *(_BYTE *)(v101 + 40) != 1)
        return 0;
      v197 = *(char *)(v101 + 72);
      if (v197 == 2)
        goto LABEL_1818;
      if (v197 != 1)
        return 0;
      goto LABEL_1714;
    case 0x137:
      v121 = *((_DWORD *)this + 3);
      if (v121 != 6)
      {
        if (v121 != 5)
          return 0;
        v98 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) != 14 || *(_BYTE *)(v98 + 40) != 1)
          return 0;
        goto LABEL_1004;
      }
      v101 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 14 || *(_BYTE *)(v101 + 40) != 1)
        return 0;
      v196 = *(char *)(v101 + 72);
      if (v196 != 2)
      {
        if (v196 == 1)
          goto LABEL_1714;
        return 0;
      }
LABEL_1818:
      if (*(_BYTE *)(v101 + 104) != 1)
        return 0;
      if (*(_BYTE *)(v101 + 136) != 1)
        return 0;
      if (*(_BYTE *)(v101 + 168) != 1)
        return 0;
      if (*(int *)(v101 + 48) < 1)
        return 0;
      v217 = *(_QWORD *)(v101 + 64);
      if ((unint64_t)(v217 + 4095) >= 0x1FFF
        && ((v217 & 0xFFF) != 0 || (unint64_t)v217 >> 24 && (unint64_t)((v217 >> 12) + 4095) > 0xFFF))
      {
        return 0;
      }
      goto LABEL_1719;
    case 0x138:
      v115 = *((_DWORD *)this + 3);
      if (v115 != 6)
      {
        if (v115 != 5)
          return 0;
        v98 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) != 15 || *(_BYTE *)(v98 + 40) != 1)
          return 0;
        goto LABEL_1004;
      }
      v101 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 15 || *(_BYTE *)(v101 + 40) != 1)
        return 0;
      v191 = *(char *)(v101 + 72);
      if (v191 == 4)
      {
        if (*(_BYTE *)(v101 + 104) == 1
          && *(_BYTE *)(v101 + 136) == 1
          && *(_BYTE *)(v101 + 168) == 1
          && *(int *)(v101 + 48) >= 1
          && JSC::ARM64LogicalImmediate::create32((JSC::ARM64LogicalImmediate *)*(unsigned int *)(v101 + 64)) != -1)
        {
          v221 = *((_DWORD *)this + 3);
          if (v221 <= 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1980B50A4);
          }
          v222 = *(_QWORD *)this;
          if (*(int *)(*(_QWORD *)this + 112) >= 1)
          {
            if (v221 <= 4)
            {
              __break(0xC471u);
              JUMPOUT(0x1980B50ACLL);
            }
            if (*(int *)(v222 + 144) >= 1)
            {
              if (v221 <= 5)
              {
                __break(0xC471u);
                JUMPOUT(0x1980B50BCLL);
              }
              v12 = *(_DWORD *)(v222 + 176);
              return v12 > 0;
            }
          }
        }
      }
      else if (v191 == 1)
      {
        goto LABEL_1714;
      }
      return 0;
    case 0x139:
      v104 = *((_DWORD *)this + 3);
      if (v104 != 6)
      {
        if (v104 != 5)
          return 0;
        v98 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) != 15 || *(_BYTE *)(v98 + 40) != 1)
          return 0;
LABEL_1004:
        if (*(_BYTE *)(v98 + 72) != 1
          || *(_BYTE *)(v98 + 104) != 1
          || *(_BYTE *)(v98 + 136) != 1
          || *(int *)(v98 + 48) < 1)
        {
          return 0;
        }
        goto LABEL_1008;
      }
      v101 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 15 || *(_BYTE *)(v101 + 40) != 1 || *(_BYTE *)(v101 + 72) != 1)
        return 0;
LABEL_1714:
      if (*(_BYTE *)(v101 + 104) != 1
        || *(_BYTE *)(v101 + 136) != 1
        || *(_BYTE *)(v101 + 168) != 1
        || *(int *)(v101 + 48) < 1
        || *(int *)(v101 + 80) < 1)
      {
        return 0;
      }
      goto LABEL_1719;
    case 0x13A:
      v100 = *((_DWORD *)this + 3);
      if (v100 != 5)
      {
        if (v100 != 6)
          return 0;
        v101 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) != 16 || *(_BYTE *)(v101 + 40) != 1 || *(_BYTE *)(v101 + 72) != 1)
          return 0;
        goto LABEL_1257;
      }
      v98 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 16 || *(_BYTE *)(v98 + 40) != 1)
        return 0;
      goto LABEL_1733;
    case 0x13B:
      v157 = *((_DWORD *)this + 3);
      if (v157 != 4)
      {
        if (v157 != 5)
          return 0;
        v98 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) != 16 || *(_BYTE *)(v98 + 40) != 1)
          return 0;
        goto LABEL_1385;
      }
      v86 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 16
        || *(_BYTE *)(v86 + 40) != 1
        || *(_BYTE *)(v86 + 72) != 1
        || *(_BYTE *)(v86 + 104) != 1)
      {
        return 0;
      }
      goto LABEL_1743;
    case 0x13C:
      v146 = *((_DWORD *)this + 3);
      if (v146 != 5)
      {
        if (v146 == 6)
        {
          v101 = *(_QWORD *)this;
          if (*(_BYTE *)(*(_QWORD *)this + 8) == 16 && *(_BYTE *)(v101 + 40) == 1 && *(_BYTE *)(v101 + 72) == 1)
          {
LABEL_1257:
            if (*(_BYTE *)(v101 + 104) == 1
              && *(_BYTE *)(v101 + 136) == 1
              && *(_BYTE *)(v101 + 168) == 1
              && (*(_DWORD *)(v101 + 48) & 0x80000000) != 0
              && (*(_DWORD *)(v101 + 80) & 0x80000000) != 0)
            {
LABEL_1719:
              if (*(int *)(v101 + 112) >= 1 && *(int *)(v101 + 144) >= 1)
              {
                v12 = *(_DWORD *)(v101 + 176);
                return v12 > 0;
              }
            }
          }
        }
        return 0;
      }
      v98 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 16 || *(_BYTE *)(v98 + 40) != 1)
        return 0;
LABEL_1733:
      if (*(_BYTE *)(v98 + 72) != 1
        || *(_BYTE *)(v98 + 104) != 1
        || *(_BYTE *)(v98 + 136) != 1
        || (*(_DWORD *)(v98 + 48) & 0x80000000) == 0
        || (*(_DWORD *)(v98 + 80) & 0x80000000) == 0)
      {
        return 0;
      }
      goto LABEL_1009;
    case 0x13D:
      v139 = *((_DWORD *)this + 3);
      if (v139 != 4)
      {
        if (v139 == 5)
        {
          v98 = *(_QWORD *)this;
          if (*(_BYTE *)(*(_QWORD *)this + 8) == 16 && *(_BYTE *)(v98 + 40) == 1)
          {
LABEL_1385:
            if (*(_BYTE *)(v98 + 72) == 1
              && *(_BYTE *)(v98 + 104) == 1
              && *(_BYTE *)(v98 + 136) == 1
              && (*(_DWORD *)(v98 + 48) & 0x80000000) != 0)
            {
LABEL_1008:
              if (*(int *)(v98 + 80) < 1)
                return 0;
LABEL_1009:
              if (*(int *)(v98 + 112) >= 1)
              {
                v12 = *(_DWORD *)(v98 + 144);
                return v12 > 0;
              }
            }
          }
        }
        return 0;
      }
      v86 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 16
        || *(_BYTE *)(v86 + 40) != 1
        || *(_BYTE *)(v86 + 72) != 1
        || *(_BYTE *)(v86 + 104) != 1)
      {
        return 0;
      }
LABEL_1743:
      if ((*(_DWORD *)(v86 + 48) & 0x80000000) == 0)
        return 0;
      goto LABEL_1232;
    case 0x13E:
      if (*((_DWORD *)this + 3) != 6)
        return 0;
      v56 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 14 || *(_BYTE *)(v56 + 40) != 1)
        return 0;
      v135 = *(char *)(v56 + 72);
      if (v135 != 2)
      {
        if (v135 == 1 && *(_BYTE *)(v56 + 104) == 1 && *(_BYTE *)(v56 + 136) == 1)
          goto LABEL_1024;
        return 0;
      }
      if (*(_BYTE *)(v56 + 104) != 1 || *(_BYTE *)(v56 + 136) != 1)
        return 0;
      goto LABEL_1846;
    case 0x13F:
      if (*((_DWORD *)this + 3) != 6)
        return 0;
      v56 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 14 || *(_BYTE *)(v56 + 40) != 1)
        return 0;
      v130 = *(char *)(v56 + 72);
      if (v130 != 2)
      {
        if (v130 != 1 || *(_BYTE *)(v56 + 104) != 1)
          return 0;
        goto LABEL_1023;
      }
      if (*(_BYTE *)(v56 + 104) != 1 || *(_BYTE *)(v56 + 136) != 1)
        return 0;
LABEL_1846:
      if (*(_BYTE *)(v56 + 168) != 1)
        return 0;
      if (*(int *)(v56 + 48) < 1)
        return 0;
      v220 = *(_QWORD *)(v56 + 64);
      if ((unint64_t)(v220 + 4095) >= 0x1FFF
        && ((v220 & 0xFFF) != 0 || (unint64_t)v220 >> 24 && (unint64_t)((v220 >> 12) + 4095) > 0xFFF))
      {
        return 0;
      }
      goto LABEL_1027;
    case 0x140:
      if (*((_DWORD *)this + 3) != 6)
        return 0;
      v56 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 15 || *(_BYTE *)(v56 + 40) != 1)
        return 0;
      v125 = *(char *)(v56 + 72);
      if (v125 != 4)
      {
        if (v125 != 1 || *(_BYTE *)(v56 + 104) != 1)
          return 0;
LABEL_1023:
        if (*(_BYTE *)(v56 + 136) == 1)
        {
LABEL_1024:
          if (*(_BYTE *)(v56 + 168) != 1 || *(int *)(v56 + 48) < 1 || *(int *)(v56 + 80) < 1)
            return 0;
LABEL_1027:
          if ((*(_DWORD *)(v56 + 112) & 0x80000000) != 0 && (*(_DWORD *)(v56 + 144) & 0x80000000) != 0)
          {
            v40 = *(_DWORD *)(v56 + 176);
            return v40 >> 31;
          }
        }
        return 0;
      }
      if (*(_BYTE *)(v56 + 104) != 1
        || *(_BYTE *)(v56 + 136) != 1
        || *(_BYTE *)(v56 + 168) != 1
        || *(int *)(v56 + 48) < 1
        || JSC::ARM64LogicalImmediate::create32((JSC::ARM64LogicalImmediate *)*(unsigned int *)(v56 + 64)) == -1)
      {
        return 0;
      }
      v218 = *((_DWORD *)this + 3);
      if (v218 <= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B509CLL);
      }
      v219 = *(_QWORD *)this;
      if ((*(_DWORD *)(*(_QWORD *)this + 112) & 0x80000000) == 0)
        return 0;
      if (v218 <= 4)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B50B4);
      }
      if ((*(_DWORD *)(v219 + 144) & 0x80000000) == 0)
        return 0;
      if (v218 <= 5)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B50C4);
      }
      v40 = *(_DWORD *)(v219 + 176);
      return v40 >> 31;
    case 0x141:
      if (*((_DWORD *)this + 3) == 6)
      {
        v56 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 15
          && *(_BYTE *)(v56 + 40) == 1
          && *(_BYTE *)(v56 + 72) == 1
          && *(_BYTE *)(v56 + 104) == 1)
        {
          goto LABEL_1023;
        }
      }
      return 0;
    case 0x142:
      if (*((_DWORD *)this + 3) == 6)
      {
        v56 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 16
          && *(_BYTE *)(v56 + 40) == 1
          && *(_BYTE *)(v56 + 72) == 1
          && *(_BYTE *)(v56 + 104) == 1)
        {
          goto LABEL_822;
        }
      }
      return 0;
    case 0x143:
      if (*((_DWORD *)this + 3) == 5)
      {
        v99 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 16 && *(_BYTE *)(v99 + 40) == 1 && *(_BYTE *)(v99 + 72) == 1)
          goto LABEL_774;
      }
      return 0;
    case 0x144:
      if (*((_DWORD *)this + 3) != 6)
        return 0;
      v56 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 16
        || *(_BYTE *)(v56 + 40) != 1
        || *(_BYTE *)(v56 + 72) != 1
        || *(_BYTE *)(v56 + 104) != 1)
      {
        return 0;
      }
LABEL_822:
      if (*(_BYTE *)(v56 + 136) == 1 && *(_BYTE *)(v56 + 168) == 1)
        goto LABEL_824;
      return 0;
    case 0x145:
      if (*((_DWORD *)this + 3) != 5)
        return 0;
      v99 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 16 || *(_BYTE *)(v99 + 40) != 1 || *(_BYTE *)(v99 + 72) != 1)
        return 0;
LABEL_774:
      if (*(_BYTE *)(v99 + 104) != 1 || *(_BYTE *)(v99 + 136) != 1)
        return 0;
      goto LABEL_1290;
    case 0x146:
    case 0x147:
    case 0x148:
    case 0x149:
    case 0x14A:
      return !*((_DWORD *)this + 3);
    case 0x14B:
    case 0x14C:
      if (*((_DWORD *)this + 3) != 1)
        return 0;
      v10 = *(int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1)
        return 0;
      goto LABEL_146;
    case 0x14D:
    case 0x14E:
    case 0x17C:
      if (*((_DWORD *)this + 3) != 1)
        return 0;
      v10 = *(int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1)
        return 0;
LABEL_213:
      v40 = v10[4];
      return v40 >> 31;
    case 0x14F:
      if (*((_DWORD *)this + 3) == 3)
      {
        v39 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 2)
          goto LABEL_685;
      }
      return 0;
    case 0x150:
      if (*((_DWORD *)this + 3) == 3)
      {
        v39 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 2)
          goto LABEL_685;
      }
      return 0;
    case 0x151:
      if (*((_DWORD *)this + 3) == 3)
      {
        v39 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 2)
          goto LABEL_685;
      }
      return 0;
    case 0x152:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v39 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 2)
        return 0;
LABEL_685:
      if (*(_BYTE *)(v39 + 40) != 1)
        return 0;
      if (*(_BYTE *)(v39 + 72) != 1)
        return 0;
      v109 = *(_QWORD *)v39;
      if ((unint64_t)(*(_QWORD *)v39 + 4095) >= 0x1FFF
        && ((v109 & 0xFFF) != 0 || (unint64_t)v109 >> 24 && (unint64_t)((v109 >> 12) + 4095) > 0xFFF))
      {
        return 0;
      }
      if (*(int *)(v39 + 48) < 1)
        return 0;
      goto LABEL_94;
    case 0x153:
      if (*((_DWORD *)this + 3) == 3)
      {
        v39 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 2)
          goto LABEL_1414;
      }
      return 0;
    case 0x154:
      if (*((_DWORD *)this + 3) == 3)
      {
        v39 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 2)
          goto LABEL_1414;
      }
      return 0;
    case 0x155:
      if (*((_DWORD *)this + 3) == 3)
      {
        v23 = *(unsigned int **)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 2)
          goto LABEL_1197;
      }
      return 0;
    case 0x156:
      if (*((_DWORD *)this + 3) == 3)
      {
        v23 = *(unsigned int **)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 2)
          goto LABEL_1197;
      }
      return 0;
    case 0x157:
      if (*((_DWORD *)this + 3) == 3)
      {
        v23 = *(unsigned int **)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 2)
          goto LABEL_1197;
      }
      return 0;
    case 0x158:
      if (*((_DWORD *)this + 3) == 3)
      {
        v23 = *(unsigned int **)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 2)
          goto LABEL_1197;
      }
      return 0;
    case 0x159:
      if (*((_DWORD *)this + 3) == 3)
      {
        v23 = *(unsigned int **)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 2)
          goto LABEL_1197;
      }
      return 0;
    case 0x15A:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v23 = *(unsigned int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 2)
        return 0;
LABEL_1197:
      if (*((_BYTE *)v23 + 40) == 1 && *((_BYTE *)v23 + 72) == 1)
      {
        v142 = *(_QWORD *)v23;
        if ((unint64_t)(*(_QWORD *)v23 + 4095) < 0x1FFF
          || (v142 & 0xFFF) == 0
          && (!((unint64_t)v142 >> 24) || (unint64_t)((v142 >> 12) + 4095) <= 0xFFF))
        {
          goto LABEL_1203;
        }
      }
      return 0;
    case 0x15B:
      if (*((_DWORD *)this + 3) == 3)
      {
        v39 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 2)
          goto LABEL_1414;
      }
      return 0;
    case 0x15C:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v39 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 2)
        return 0;
LABEL_1414:
      if (*(_BYTE *)(v39 + 40) == 1 && *(_BYTE *)(v39 + 72) == 1)
        goto LABEL_308;
      return 0;
    case 0x15D:
      if (*((_DWORD *)this + 3) == 2)
        goto LABEL_907;
      return 0;
    case 0x15E:
      if (*((_DWORD *)this + 3) == 2)
        goto LABEL_907;
      return 0;
    case 0x15F:
      if (*((_DWORD *)this + 3) == 2)
        goto LABEL_907;
      return 0;
    case 0x160:
      if (*((_DWORD *)this + 3) != 2)
        return 0;
LABEL_907:
      v10 = *(int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) == 1 && *((_BYTE *)v10 + 40) == 1)
        goto LABEL_187;
      return 0;
    case 0x161:
      if (*((_DWORD *)this + 3) == 2)
        goto LABEL_1160;
      return 0;
    case 0x162:
      if (*((_DWORD *)this + 3) != 2)
        return 0;
LABEL_1160:
      v10 = *(int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1 || *((_BYTE *)v10 + 40) != 1)
        return 0;
LABEL_139:
      if (v10[4] < 0)
        goto LABEL_140;
      return 0;
    case 0x164:
      if (*((_DWORD *)this + 3) == 5)
      {
        v99 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 16 && *(_BYTE *)(v99 + 40) == 21 && *(_BYTE *)(v99 + 72) == 1)
          goto LABEL_1281;
      }
      return 0;
    case 0x165:
      if (*((_DWORD *)this + 3) != 5)
        return 0;
      v99 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 14 || *(_BYTE *)(v99 + 40) != 21 || *(_BYTE *)(v99 + 72) != 1)
        return 0;
LABEL_1281:
      if (*(_BYTE *)(v99 + 104) != 1 || *(_BYTE *)(v99 + 136) != 1)
        return 0;
      goto LABEL_1291;
    case 0x166:
      if (*((_DWORD *)this + 3) == 4)
      {
        v57 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 14
          && *(_BYTE *)(v57 + 40) == 21
          && *(_BYTE *)(v57 + 72) == 1
          && *(_BYTE *)(v57 + 104) == 1)
        {
          goto LABEL_1211;
        }
      }
      return 0;
    case 0x167:
      if (*((_DWORD *)this + 3) == 3)
      {
        v39 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 21)
          goto LABEL_981;
      }
      return 0;
    case 0x168:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v39 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 21)
        return 0;
LABEL_981:
      if (*(_BYTE *)(v39 + 40) != 1 || *(_BYTE *)(v39 + 72) != 1)
        return 0;
      goto LABEL_93;
    case 0x169:
      if (*((_DWORD *)this + 3) == 4)
      {
        v57 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 21 && *(_BYTE *)(v57 + 40) == 1)
          goto LABEL_1297;
      }
      return 0;
    case 0x16A:
      if (*((_DWORD *)this + 3) == 4)
      {
        v57 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 21 && *(_BYTE *)(v57 + 40) == 1)
          goto LABEL_1297;
      }
      return 0;
    case 0x16B:
      if (*((_DWORD *)this + 3) != 4)
        return 0;
      v57 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 21 || *(_BYTE *)(v57 + 40) != 1)
        return 0;
LABEL_1297:
      if (*(_BYTE *)(v57 + 72) == 1 && *(_BYTE *)(v57 + 104) == 1)
        goto LABEL_1210;
      return 0;
    case 0x16C:
      if (*((_DWORD *)this + 3) == 4)
      {
        v57 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 21 && *(_BYTE *)(v57 + 40) == 1 && *(_BYTE *)(v57 + 72) == 1)
          goto LABEL_1209;
      }
      return 0;
    case 0x16D:
      if (*((_DWORD *)this + 3) == 4)
      {
        v57 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 21 && *(_BYTE *)(v57 + 40) == 1 && *(_BYTE *)(v57 + 72) == 1)
          goto LABEL_1209;
      }
      return 0;
    case 0x16E:
      if (*((_DWORD *)this + 3) == 4)
      {
        v57 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1 && *(_BYTE *)(v57 + 40) == 1 && *(_BYTE *)(v57 + 72) == 2)
          goto LABEL_1350;
      }
      return 0;
    case 0x16F:
      if (*((_DWORD *)this + 3) != 4)
        return 0;
      v57 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1 || *(_BYTE *)(v57 + 40) != 1 || *(_BYTE *)(v57 + 72) != 2)
        return 0;
LABEL_1350:
      if (*(_BYTE *)(v57 + 104) == 1 && (*(_DWORD *)(v57 + 16) & 0x80000000) != 0)
        goto LABEL_1352;
      return 0;
    case 0x170:
      if (*((_DWORD *)this + 3) == 4)
      {
        v57 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 21 && *(_BYTE *)(v57 + 40) == 1 && *(_BYTE *)(v57 + 72) == 1)
          goto LABEL_1209;
      }
      return 0;
    case 0x171:
      if (*((_DWORD *)this + 3) == 4)
      {
        v57 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 21 && *(_BYTE *)(v57 + 40) == 1 && *(_BYTE *)(v57 + 72) == 1)
          goto LABEL_1209;
      }
      return 0;
    case 0x172:
      if (*((_DWORD *)this + 3) == 4)
      {
        v57 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 21 && *(_BYTE *)(v57 + 40) == 1 && *(_BYTE *)(v57 + 72) == 1)
          goto LABEL_1209;
      }
      return 0;
    case 0x173:
      if (*((_DWORD *)this + 3) == 5)
      {
        v99 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 21
          && *(_BYTE *)(v99 + 40) == 1
          && *(_BYTE *)(v99 + 72) == 1
          && *(_BYTE *)(v99 + 104) == 1)
        {
          goto LABEL_1289;
        }
      }
      return 0;
    case 0x174:
      if (*((_DWORD *)this + 3) == 5)
      {
        v99 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 21
          && *(_BYTE *)(v99 + 40) == 1
          && *(_BYTE *)(v99 + 72) == 1
          && *(_BYTE *)(v99 + 104) == 1)
        {
          goto LABEL_1289;
        }
      }
      return 0;
    case 0x175:
      if (*((_DWORD *)this + 3) != 5)
        return 0;
      v99 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 21
        || *(_BYTE *)(v99 + 40) != 1
        || *(_BYTE *)(v99 + 72) != 1
        || *(_BYTE *)(v99 + 104) != 1)
      {
        return 0;
      }
LABEL_1289:
      if (*(_BYTE *)(v99 + 136) != 1)
        return 0;
LABEL_1290:
      if ((*(_DWORD *)(v99 + 48) & 0x80000000) != 0)
        goto LABEL_1291;
      return 0;
    case 0x176:
      if (*((_DWORD *)this + 3) == 3)
      {
        v39 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1 && *(_BYTE *)(v39 + 40) == 1 && *(_BYTE *)(v39 + 72) == 1)
          goto LABEL_276;
      }
      return 0;
    case 0x177:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v39 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 21 || *(_BYTE *)(v39 + 40) != 1 || *(_BYTE *)(v39 + 72) != 1)
        return 0;
      goto LABEL_93;
    case 0x178:
      if (*((_DWORD *)this + 3) == 4)
      {
        v57 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 21 && *(_BYTE *)(v57 + 40) == 1 && *(_BYTE *)(v57 + 72) == 1)
          goto LABEL_1209;
      }
      return 0;
    case 0x179:
      if (*((_DWORD *)this + 3) == 4)
      {
        v57 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 21 && *(_BYTE *)(v57 + 40) == 1 && *(_BYTE *)(v57 + 72) == 1)
          goto LABEL_1209;
      }
      return 0;
    case 0x17A:
      if (*((_DWORD *)this + 3) == 4)
      {
        v57 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 21 && *(_BYTE *)(v57 + 40) == 1 && *(_BYTE *)(v57 + 72) == 1)
          goto LABEL_1209;
      }
      return 0;
    case 0x17B:
      if (*((_DWORD *)this + 3) != 4)
        return 0;
      v57 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 21 || *(_BYTE *)(v57 + 40) != 1 || *(_BYTE *)(v57 + 72) != 1)
        return 0;
LABEL_1209:
      if (*(_BYTE *)(v57 + 104) == 1)
        goto LABEL_1210;
      return 0;
    case 0x17D:
      if (*((_DWORD *)this + 3) == 4)
        goto LABEL_1451;
      return 0;
    case 0x180:
      if (*((_DWORD *)this + 3) != 4)
        return 0;
LABEL_1451:
      v57 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 21
        || *(_BYTE *)(v57 + 40) != 1
        || *(_BYTE *)(v57 + 72) != 1
        || *(_BYTE *)(v57 + 104) != 1)
      {
        return 0;
      }
      goto LABEL_1210;
    case 0x183:
      if (*((_DWORD *)this + 3) != 4)
        return 0;
      v57 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 21
        || *(_BYTE *)(v57 + 40) != 1
        || *(_BYTE *)(v57 + 72) != 2
        || *(_BYTE *)(v57 + 104) != 1)
      {
        return 0;
      }
LABEL_1352:
      if ((*(_DWORD *)(v57 + 48) & 0x80000000) != 0)
      {
        v154 = *(_QWORD *)(v57 + 64);
        if ((unint64_t)(v154 + 4095) < 0x1FFF
          || (v154 & 0xFFF) == 0
          && (!((unint64_t)v154 >> 24) || (unint64_t)((v154 >> 12) + 4095) <= 0xFFF))
        {
          goto LABEL_1212;
        }
      }
      return 0;
    case 0x184:
    case 0x19A:
    case 0x19B:
    case 0x19C:
    case 0x19D:
    case 0x1AD:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v39 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 21)
        return 0;
      goto LABEL_241;
    case 0x185:
    case 0x186:
      if (*((_DWORD *)this + 3) == 4)
        goto LABEL_289;
      return 0;
    case 0x187:
      if (*((_DWORD *)this + 3) != 5)
        return 0;
      v99 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 21)
        return 0;
      if (*(_BYTE *)(v99 + 40) != 2)
        return 0;
      if (*(_BYTE *)(v99 + 72) != 1)
        return 0;
      if (*(_BYTE *)(v99 + 104) != 1)
        return 0;
      if (*(_BYTE *)(v99 + 136) != 1)
        return 0;
      v138 = *(_QWORD *)(v99 + 32);
      if ((unint64_t)(v138 + 4095) >= 0x1FFF
        && ((v138 & 0xFFF) != 0 || (unint64_t)v138 >> 24 && (unint64_t)((v138 >> 12) + 4095) > 0xFFF))
      {
        return 0;
      }
LABEL_1291:
      if ((*(_DWORD *)(v99 + 80) & 0x80000000) == 0 || (*(_DWORD *)(v99 + 112) & 0x80000000) == 0)
        return 0;
      v40 = *(_DWORD *)(v99 + 144);
      return v40 >> 31;
    case 0x188:
    case 0x18A:
    case 0x18B:
    case 0x193:
    case 0x195:
    case 0x198:
    case 0x199:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v39 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 21)
        return 0;
LABEL_241:
      if (*(_BYTE *)(v39 + 40) == 1 && *(_BYTE *)(v39 + 72) == 1)
        goto LABEL_93;
      return 0;
    case 0x18C:
      if (*((_DWORD *)this + 3) == 3)
        goto LABEL_1307;
      return 0;
    case 0x18D:
      if (*((_DWORD *)this + 3) == 3)
        goto LABEL_1307;
      return 0;
    case 0x18E:
      if (*((_DWORD *)this + 3) == 3)
        goto LABEL_1307;
      return 0;
    case 0x18F:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
LABEL_1307:
      v39 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 21 || *(_BYTE *)(v39 + 40) != 1)
        return 0;
LABEL_92:
      if (*(_BYTE *)(v39 + 72) == 1)
        goto LABEL_93;
      return 0;
    case 0x19E:
    case 0x19F:
    case 0x1A0:
    case 0x1A1:
      if (*((_DWORD *)this + 3) != 2)
        return 0;
      v10 = *(int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 6)
        return 0;
      goto LABEL_186;
    case 0x1A2:
    case 0x1A3:
    case 0x1A4:
    case 0x1A5:
      if (*((_DWORD *)this + 3) == 3)
      {
        v39 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 6
          && *(_BYTE *)(v39 + 40) == 2
          && *(_BYTE *)(v39 + 72) == 1
          && *(int *)(v39 + 16) >= 1)
        {
          v44 = *(_QWORD *)(v39 + 32);
          if ((unint64_t)(v44 + 4095) < 0x1FFF
            || (v44 & 0xFFF) == 0 && (!((unint64_t)v44 >> 24) || (unint64_t)((v44 >> 12) + 4095) <= 0xFFF))
          {
            goto LABEL_94;
          }
        }
      }
      return 0;
    case 0x1A6:
    case 0x1A7:
    case 0x1A8:
    case 0x1A9:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v23 = *(unsigned int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *((_BYTE *)v23 + 40) != 6
        || *((_BYTE *)v23 + 72) != 2
        || (v23[4] & 0x80000000) == 0)
      {
        return 0;
      }
LABEL_60:
      if ((int)v23[12] >= 1)
      {
        v34 = *((_QWORD *)v23 + 8);
        if ((unint64_t)(v34 + 4095) < 0x1FFF
          || (v34 & 0xFFF) == 0 && (!((unint64_t)v34 >> 24) || (unint64_t)((v34 >> 12) + 4095) <= 0xFFF))
        {
          return 1;
        }
      }
      return 0;
    case 0x1AA:
      if (*((_DWORD *)this + 3) != 2)
        return 0;
      v10 = *(int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1)
        return 0;
LABEL_233:
      if (*((_BYTE *)v10 + 40) != 1 || (v10[4] & 0x80000000) == 0)
        return 0;
      goto LABEL_5;
    case 0x1AB:
    case 0x1AC:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v23 = *(unsigned int **)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 21 || *((_BYTE *)v23 + 40) != 1 || *((_BYTE *)v23 + 72) != 1)
        return 0;
LABEL_1203:
      if ((v23[12] & 0x80000000) != 0)
        goto LABEL_31;
      return 0;
    case 0x1AF:
    case 0x1B0:
      if (*((_DWORD *)this + 3) != 4)
        return 0;
LABEL_289:
      v57 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 21
        || *(_BYTE *)(v57 + 40) != 1
        || *(_BYTE *)(v57 + 72) != 1
        || *(_BYTE *)(v57 + 104) != 1)
      {
        return 0;
      }
LABEL_1210:
      if ((*(_DWORD *)(v57 + 48) & 0x80000000) == 0)
        return 0;
LABEL_1211:
      if ((*(_DWORD *)(v57 + 80) & 0x80000000) == 0)
        return 0;
LABEL_1212:
      v40 = *(_DWORD *)(v57 + 112);
      return v40 >> 31;
    case 0x1B1:
    case 0x1B3:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
LABEL_273:
      v39 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1 || *(_BYTE *)(v39 + 40) != 1)
        return 0;
LABEL_275:
      if (*(_BYTE *)(v39 + 72) != 1)
        return 0;
LABEL_276:
      if ((*(_DWORD *)(v39 + 16) & 0x80000000) != 0)
        goto LABEL_93;
      return 0;
    case 0x1B2:
      if (*((_DWORD *)this + 3) == 4)
      {
        v57 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 1
          && *(_BYTE *)(v57 + 40) == 1
          && *(_BYTE *)(v57 + 72) == 1
          && *(_BYTE *)(v57 + 104) == 1
          && (*(_DWORD *)(v57 + 16) & 0x80000000) != 0)
        {
          goto LABEL_1210;
        }
      }
      return 0;
    case 0x1B4:
      if (*((_DWORD *)this + 3) != 4)
        return 0;
      v107 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 1
        || *(_BYTE *)(v107 + 40) != 1
        || *(_BYTE *)(v107 + 72) != 1
        || *(_BYTE *)(v107 + 104) != 1
        || (*(_DWORD *)(v107 + 16) & 0x80000000) == 0
        || (*(_DWORD *)(v107 + 48) & 0x80000000) == 0
        || (*(_DWORD *)(v107 + 80) & 0x80000000) == 0
        || (*(_DWORD *)(v107 + 112) & 0x80000000) == 0)
      {
        return 0;
      }
      return (char)~*(_BYTE *)(v107 + 16) + 1 == (char)~*(_BYTE *)(v107 + 48);
    case 0x1B5:
    case 0x1B6:
      if (*((_DWORD *)this + 3) != 6)
        return 0;
      v56 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 21
        || *(_BYTE *)(v56 + 40) != 1
        || *(_BYTE *)(v56 + 72) != 1
        || *(_BYTE *)(v56 + 104) != 1
        || *(_BYTE *)(v56 + 136) != 1
        || *(_BYTE *)(v56 + 168) != 1)
      {
        return 0;
      }
LABEL_824:
      if ((*(_DWORD *)(v56 + 48) & 0x80000000) != 0 && (*(_DWORD *)(v56 + 80) & 0x80000000) != 0)
        goto LABEL_1027;
      return 0;
    case 0x1B7:
    case 0x1B8:
    case 0x1B9:
      if (*((_DWORD *)this + 3) == 3)
      {
        v39 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 2)
          goto LABEL_306;
      }
      return 0;
    case 0x1BA:
    case 0x1BB:
      if (*((_DWORD *)this + 3) != 3)
        return 0;
      v39 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 8) != 2)
        return 0;
LABEL_306:
      if (*(_BYTE *)(v39 + 40) != 1 || *(_BYTE *)(v39 + 72) != 1)
        return 0;
LABEL_308:
      v61 = *(_QWORD *)v39;
      if ((unint64_t)(*(_QWORD *)v39 + 4095) >= 0x1FFF
        && ((v61 & 0xFFF) != 0 || (unint64_t)v61 >> 24 && (unint64_t)((v61 >> 12) + 4095) > 0xFFF))
      {
        return 0;
      }
LABEL_93:
      if ((*(_DWORD *)(v39 + 48) & 0x80000000) == 0)
        return 0;
LABEL_94:
      v40 = *(_DWORD *)(v39 + 80);
      return v40 >> 31;
    case 0x1BC:
      if (*((_DWORD *)this + 3) == 3)
      {
        v39 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 2 && *(_BYTE *)(v39 + 40) == 1 && *(_BYTE *)(v39 + 72) == 1)
          goto LABEL_308;
      }
      return 0;
    case 0x1BE:
      return *((_DWORD *)this + 3) == 0;
    case 0x1BF:
      return JSC::B3::Air::ShuffleCustom::isValidForm((uint64_t)this, a2, a3, a4, a5, a6, a7, a8);
    case 0x1C0:
      return JSC::B3::Air::PatchCustom::isValidForm(this, a2);
    case 0x1C1:
    case 0x1C2:
      return JSC::B3::Air::CCallCustom::isValidForm((uint64_t *)this);
    case 0x1C3:
      return JSC::B3::Air::WasmBoundsCheckCustom::isValidForm(this);
    default:
      return 0;
  }
}

BOOL JSC::B3::Air::isAddZeroExtend64Valid(_BOOL8 this, const JSC::B3::Air::Inst *a2)
{
  if (a2 <= 1)
    __break(0xC471u);
  else
    return *(_QWORD *)(this + 32)
        || *(_BYTE *)(this + 40) != 1
        || *(_DWORD *)(this + 48) != 32
        || *(_DWORD *)(this + 52)
        || *(_DWORD *)(this + 44) != 1;
  return this;
}

uint64_t JSC::B3::Air::Inst::admitsStack(JSC::B3::Air::Inst *this, unsigned int a2)
{
  int v2;
  uint64_t result;
  int v6;
  int v7;
  unsigned int v9;
  unsigned int v11;
  unsigned int v13;
  int v15;
  unsigned int v16;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v22;
  int v24;
  unsigned int v25;
  unsigned int v26;
  char *v27;
  int v28;
  unsigned int v29;
  char *v30;
  int v31;
  unsigned int v32;
  _BYTE *v33;
  unsigned int v34;
  char *v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  _BYTE *v45;
  unsigned int v46;
  _BYTE *v47;

  v2 = *((__int16 *)this + 60) - 1;
  result = 0;
  switch(v2)
  {
    case 3:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B608CLL);
      }
      return 0;
    case 4:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B60A8);
      }
      return 0;
    case 75:
      if (!a2 && *((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5ED4);
      }
      return 0;
    case 76:
      if (!a2 && *((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B60E8);
      }
      return 0;
    case 77:
      if (!a2 && *((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5F74);
      }
      return 0;
    case 78:
      if (!a2 && *((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B6140);
      }
      return 0;
    case 79:
      if (!a2 && *((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5E94);
      }
      return 0;
    case 80:
      if (!a2 && *((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B61A0);
      }
      return 0;
    case 81:
      if (!a2 && *((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5C98);
      }
      return 0;
    case 82:
      if (!a2 && *((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5EB4);
      }
      return 0;
    case 83:
      if (!a2 && *((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5EF4);
      }
      return 0;
    case 84:
      if (!a2 && *((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5FCCLL);
      }
      return 0;
    case 85:
      if (!a2 && *((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B6160);
      }
      return 0;
    case 86:
      if (!a2 && *((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B6180);
      }
      return 0;
    case 87:
      if (!a2 && *((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5E00);
      }
      return 0;
    case 88:
      if (!a2 && *((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5D00);
      }
      return 0;
    case 89:
    case 93:
      if (a2 != 1)
        goto LABEL_59;
      v6 = *((_DWORD *)this + 3);
      if (v6 == 2)
        goto LABEL_7;
      return v6 == 3;
    case 90:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B6104);
      }
      return 0;
    case 91:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B6120);
      }
      return 0;
    case 95:
    case 96:
    case 108:
    case 109:
      if (a2 >= 3)
        return 0;
      return (a2 & 7) == 0;
    case 97:
    case 98:
    case 110:
    case 111:
      if (a2 >= 3)
        return 0;
      return (a2 & 7) == 2;
    case 102:
      if (!a2 && *((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5D20);
      }
      return 0;
    case 103:
      if (!a2 && *((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5F94);
      }
      return 0;
    case 104:
      if (!a2 && *((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5D38);
      }
      return 0;
    case 105:
      if (!a2 && *((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5F34);
      }
      return 0;
    case 106:
    case 107:
      if (a2 == 1)
      {
        v6 = *((_DWORD *)this + 3);
        if (v6 == 2)
          goto LABEL_58;
      }
      else
      {
LABEL_59:
        if (a2)
          return 0;
        v6 = *((_DWORD *)this + 3);
        if (v6 == 2)
          goto LABEL_61;
      }
      return v6 == 3;
    case 112:
      if (a2 == 1)
      {
        if (!*((_DWORD *)this + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x1980B6880);
        }
LABEL_58:
        v18 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
      }
      else
      {
        if (a2)
          return 0;
        if (*((_DWORD *)this + 3) <= 1u)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B60C8);
        }
LABEL_61:
        v18 = *(unsigned __int8 *)(*(_QWORD *)this + 40);
      }
      return v18 == 1;
    case 117:
      if (!a2 && *((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5F54);
      }
      return 0;
    case 118:
      if (a2 - 1 < 2 || a2 || *((_DWORD *)this + 3) != 2)
        return 0;
      goto LABEL_61;
    case 120:
      if (a2)
        return 0;
      if (*((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B6740);
      }
      goto LABEL_61;
    case 121:
      if (a2)
        return 0;
      if (*((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5BD0);
      }
      goto LABEL_61;
    case 123:
      if (a2 != 1)
        return 0;
      if (!*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5D5CLL);
      }
      goto LABEL_7;
    case 125:
      if (a2)
        return 0;
      if (*((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5E20);
      }
      goto LABEL_61;
    case 127:
      if (a2)
        return 0;
      if (*((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5CD8);
      }
      goto LABEL_61;
    case 129:
      if (a2)
        return 0;
      if (*((_DWORD *)this + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5F14);
      }
      goto LABEL_61;
    case 131:
      if (a2 != 1)
        return 0;
      if (!*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5E74);
      }
LABEL_7:
      v7 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
      return v7 == 1 || v7 == 20;
    case 137:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B67DCLL);
      }
      return 0;
    case 138:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B67F8);
      }
      return 0;
    case 139:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B6814);
      }
      return 0;
    case 140:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B6830);
      }
      return 0;
    case 209:
      if (a2 == 3)
      {
        v37 = *((_DWORD *)this + 3);
        if (!v37)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B6A70);
        }
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 17)
        {
          if (v37 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980B6AC0);
          }
          if (v37 == 2 && *(_BYTE *)(*(_QWORD *)this + 40) == 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980B6418);
          }
        }
      }
      return 0;
    case 210:
      if (a2 == 3)
      {
        v38 = *((_DWORD *)this + 3);
        if (!v38)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B6A78);
        }
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 17)
        {
          if (v38 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980B6AC8);
          }
          if (v38 == 2 && *(_BYTE *)(*(_QWORD *)this + 40) == 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980B6460);
          }
        }
      }
      return 0;
    case 211:
      if (a2 == 3)
      {
        v39 = *((_DWORD *)this + 3);
        if (!v39)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B6A80);
        }
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 17)
        {
          if (v39 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980B6AD0);
          }
          if (v39 == 2 && *(_BYTE *)(*(_QWORD *)this + 40) == 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980B64A8);
          }
        }
      }
      return 0;
    case 212:
      if (a2 == 3)
      {
        v40 = *((_DWORD *)this + 3);
        if (!v40)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B6A88);
        }
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 17)
        {
          if (v40 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980B6AD8);
          }
          if (v40 == 2 && *(_BYTE *)(*(_QWORD *)this + 40) == 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980B64F0);
          }
        }
      }
      return 0;
    case 213:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B650CLL);
      }
      return 0;
    case 214:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B6528);
      }
      return 0;
    case 215:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B6544);
      }
      return 0;
    case 216:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B6560);
      }
      return 0;
    case 217:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B657CLL);
      }
      return 0;
    case 218:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B6598);
      }
      return 0;
    case 219:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B65B4);
      }
      return 0;
    case 220:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B65D0);
      }
      return 0;
    case 221:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B65ECLL);
      }
      return 0;
    case 222:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B6608);
      }
      return 0;
    case 223:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B6624);
      }
      return 0;
    case 224:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B6640);
      }
      return 0;
    case 225:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B665CLL);
      }
      return 0;
    case 226:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B6678);
      }
      return 0;
    case 227:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B6694);
      }
      return 0;
    case 228:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B66B0);
      }
      return 0;
    case 229:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B66CCLL);
      }
      return 0;
    case 230:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B66E8);
      }
      return 0;
    case 231:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B6704);
      }
      return 0;
    case 232:
      if (a2 == 1 && !*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B6720);
      }
      return 0;
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 301:
    case 302:
    case 445:
    case 450:
      return result;
    case 283:
      result = 0;
      if (a2 - 2 < 2)
        return result;
      if (a2 != 1)
        goto LABEL_157;
      v22 = *((_DWORD *)this + 3);
      if (!v22)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B6A40);
      }
      if (*(_BYTE *)(*(_QWORD *)this + 8) == 15)
      {
        if (v22 <= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B6A48);
        }
        if (*(_BYTE *)(*(_QWORD *)this + 72) == 2 && v22 <= 3)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B5DD8);
        }
      }
      return 0;
    case 289:
      result = 0;
      if (!a2 || a2 == 2)
        return result;
      if (a2 == 1)
      {
        v25 = *((_DWORD *)this + 3);
        if (!v25)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B6A50);
        }
        if (v25 <= 2 && *(_BYTE *)(*(_QWORD *)this + 8) == 14)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B6070);
        }
      }
      return 0;
    case 290:
      if (a2 == 1)
      {
        v9 = *((_DWORD *)this + 3);
        if (!v9)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B6A00);
        }
        if (v9 <= 2 && *(_BYTE *)(*(_QWORD *)this + 8) == 14)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B5AE0);
        }
      }
      else if (a2 == 2)
      {
        v15 = *((_DWORD *)this + 3);
        if (!v15)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B6A10);
        }
        if (v15 == 1 && *(_BYTE *)(*(_QWORD *)this + 8) == 14)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B5B68);
        }
      }
      return 0;
    case 291:
      if (a2 == 1)
      {
        v13 = *((_DWORD *)this + 3);
        if (!v13)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B6A18);
        }
        if (v13 <= 2 && *(_BYTE *)(*(_QWORD *)this + 8) == 14)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B5B38);
        }
      }
      else if (a2 == 2)
      {
        v19 = *((_DWORD *)this + 3);
        if (!v19)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B6A28);
        }
        if (v19 == 1 && *(_BYTE *)(*(_QWORD *)this + 8) == 14)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B5C64);
        }
      }
      return 0;
    case 292:
      result = 0;
      if (!a2 || a2 == 2)
        return result;
      if (a2 == 1)
      {
        v43 = *((_DWORD *)this + 3);
        if (!v43)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B6A68);
        }
        if (v43 <= 2 && *(_BYTE *)(*(_QWORD *)this + 8) == 15)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B6870);
        }
      }
      return 0;
    case 293:
      if (a2 != 1)
        goto LABEL_51;
      v16 = *((_DWORD *)this + 3);
      if (!v16)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B6A20);
      }
      if (v16 <= 2 && *(_BYTE *)(*(_QWORD *)this + 8) == 15)
      {
        __break(0xC471u);
        JUMPOUT(0x1980B5B94);
      }
      return 0;
    case 294:
      if (a2 == 1)
      {
        v11 = *((_DWORD *)this + 3);
        if (!v11)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B6A08);
        }
        if (v11 <= 2 && *(_BYTE *)(*(_QWORD *)this + 8) == 15)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B5B0CLL);
        }
        return 0;
      }
LABEL_51:
      result = 0;
      if (a2 == 2)
        return result;
LABEL_157:
      if (a2)
        return 0;
      return result;
    case 295:
      result = 0;
      if (!a2 || a2 == 2)
        return result;
      if (a2 == 1)
      {
        v41 = *((_DWORD *)this + 3);
        if (!v41)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B6A58);
        }
        if (v41 <= 2 && *(_BYTE *)(*(_QWORD *)this + 8) == 15)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B6780);
        }
      }
      return 0;
    case 296:
      result = 0;
      if (!a2 || a2 == 2)
        return result;
      if (a2 == 1)
      {
        v42 = *((_DWORD *)this + 3);
        if (!v42)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B6A60);
        }
        if (v42 <= 2 && *(_BYTE *)(*(_QWORD *)this + 8) == 15)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B67C0);
        }
      }
      return 0;
    case 305:
      if (a2 == 1)
      {
        v20 = *((_DWORD *)this + 3);
        if (!v20)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B6A30);
        }
        if (v20 <= 2 && *(_BYTE *)(*(_QWORD *)this + 8) == 15)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B5D88);
        }
      }
      else if (a2 == 2)
      {
        v24 = *((_DWORD *)this + 3);
        if (!v24)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B6A38);
        }
        if (v24 == 1 && *(_BYTE *)(*(_QWORD *)this + 8) == 15)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B5E50);
        }
      }
      return 0;
    case 317:
      result = 0;
      switch(a2)
      {
        case 0u:
        case 3u:
        case 4u:
        case 5u:
          return result;
        case 1u:
          v26 = *((_DWORD *)this + 3);
          if (!v26)
          {
            __break(0xC471u);
            JUMPOUT(0x1980B6A90);
          }
          v27 = *(char **)this;
          if (*(_BYTE *)(*(_QWORD *)this + 8) == 14)
          {
            if (v26 <= 2)
            {
              __break(0xC471u);
              JUMPOUT(0x1980B6AE0);
            }
            v28 = v27[72];
            if (v28 == 1)
            {
              if (v26 <= 3)
              {
                __break(0xC471u);
                JUMPOUT(0x1980B6B40);
              }
              if (v27[104] == 1)
              {
                if (v26 <= 4)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980B6B88);
                }
                if (v26 == 5 && v27[136] == 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980B6980);
                }
              }
            }
            else if (v28 == 2)
            {
              if (v26 <= 3)
              {
                __break(0xC471u);
                JUMPOUT(0x1980B6B28);
              }
              if (v27[104] == 1)
              {
                if (v26 <= 4)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980B6B70);
                }
                if (v26 == 5 && v27[136] == 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980B6234);
                }
              }
            }
          }
          return 0;
        case 2u:
          v44 = *((_DWORD *)this + 3);
          if (!v44)
          {
            __break(0xC471u);
            JUMPOUT(0x1980B6AB0);
          }
          v45 = *(_BYTE **)this;
          if (*(_BYTE *)(*(_QWORD *)this + 8) == 14)
          {
            if (v44 <= 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1980B6B00);
            }
            if (v45[40] == 1)
            {
              if (v44 <= 3)
              {
                __break(0xC471u);
                JUMPOUT(0x1980B6B18);
              }
              if (v45[104] == 1)
              {
                if (v44 <= 4)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980B6B60);
                }
                if (v44 == 5 && v45[136] == 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980B68E4);
                }
              }
            }
          }
          return 0;
        default:
          return 0;
      }
      return result;
    case 318:
      result = 0;
      switch(a2)
      {
        case 0u:
        case 3u:
        case 4u:
        case 5u:
          return result;
        case 1u:
          v29 = *((_DWORD *)this + 3);
          if (!v29)
          {
            __break(0xC471u);
            JUMPOUT(0x1980B6A98);
          }
          v30 = *(char **)this;
          if (*(_BYTE *)(*(_QWORD *)this + 8) == 14)
          {
            if (v29 <= 2)
            {
              __break(0xC471u);
              JUMPOUT(0x1980B6AE8);
            }
            v31 = v30[72];
            if (v31 == 2)
            {
              if (v29 <= 3)
              {
                __break(0xC471u);
                JUMPOUT(0x1980B6B48);
              }
              if (v30[104] == 1)
              {
                if (v29 <= 4)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980B6B90);
                }
                if (v29 == 5 && v30[136] == 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980B69B8);
                }
              }
            }
            else if (v31 == 1)
            {
              if (v29 <= 3)
              {
                __break(0xC471u);
                JUMPOUT(0x1980B6B30);
              }
              if (v30[104] == 1)
              {
                if (v29 <= 4)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980B6B78);
                }
                if (v29 == 5 && v30[136] == 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980B62C8);
                }
              }
            }
          }
          return 0;
        case 2u:
          v46 = *((_DWORD *)this + 3);
          if (!v46)
          {
            __break(0xC471u);
            JUMPOUT(0x1980B6AB8);
          }
          v47 = *(_BYTE **)this;
          if (*(_BYTE *)(*(_QWORD *)this + 8) == 14)
          {
            if (v46 <= 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1980B6B08);
            }
            if (v47[40] == 1)
            {
              if (v46 <= 3)
              {
                __break(0xC471u);
                JUMPOUT(0x1980B6B20);
              }
              if (v47[104] == 1)
              {
                if (v46 <= 4)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980B6B68);
                }
                if (v46 == 5 && v47[136] == 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980B6948);
                }
              }
            }
          }
          return 0;
        default:
          return 0;
      }
      return result;
    case 319:
      result = 0;
      if (a2 - 2 < 4 || !a2)
        return result;
      if (a2 == 1)
      {
        v32 = *((_DWORD *)this + 3);
        if (!v32)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B6AA0);
        }
        v33 = *(_BYTE **)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 15)
        {
          if (v32 <= 2)
          {
            __break(0xC471u);
            JUMPOUT(0x1980B6AF0);
          }
          if (v33[72] == 2)
          {
            if (v32 <= 3)
            {
              __break(0xC471u);
              JUMPOUT(0x1980B6B10);
            }
            if (v33[104] == 1)
            {
              if (v32 <= 4)
              {
                __break(0xC471u);
                JUMPOUT(0x1980B6B58);
              }
              if (v32 == 5 && v33[136] == 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1980B6348);
              }
            }
          }
        }
      }
      return 0;
    case 320:
      result = 0;
      if (a2 - 2 < 4 || !a2)
        return result;
      if (a2 == 1)
      {
        v34 = *((_DWORD *)this + 3);
        if (!v34)
        {
          __break(0xC471u);
          JUMPOUT(0x1980B6AA8);
        }
        v35 = *(char **)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 15)
        {
          if (v34 <= 2)
          {
            __break(0xC471u);
            JUMPOUT(0x1980B6AF8);
          }
          v36 = v35[72];
          if (v36 == 1)
          {
            if (v34 <= 3)
            {
              __break(0xC471u);
              JUMPOUT(0x1980B6B50);
            }
            if (v35[104] == 1)
            {
              if (v34 <= 4)
              {
                __break(0xC471u);
                JUMPOUT(0x1980B6B98);
              }
              if (v34 == 5 && v35[136] == 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1980B69F0);
              }
            }
          }
          else if (v36 == 2)
          {
            if (v34 <= 3)
            {
              __break(0xC471u);
              JUMPOUT(0x1980B6B38);
            }
            if (v35[104] == 1)
            {
              if (v34 <= 4)
              {
                __break(0xC471u);
                JUMPOUT(0x1980B6B80);
              }
              if (v34 == 5 && v35[136] == 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1980B63D0);
              }
            }
          }
        }
      }
      return 0;
    case 446:
      return a2 % 3 < 2;
    case 447:
      if (!a2)
        return 0;
      if (!*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B69F8);
      }
      return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)this + 32))(**(_QWORD **)this);
    case 448:
    case 449:
      return 1;
    default:
      return 0;
  }
}

uint64_t JSC::B3::Air::Inst::hasNonArgNonControlEffects(JSC::B3::Air::Inst *this)
{
  int v2;
  uint64_t result;

  if ((*((_BYTE *)this + 122) & 1) != 0)
    return 1;
  v2 = *((__int16 *)this + 60);
  result = 1;
  switch(v2)
  {
    case 446:
    case 447:
LABEL_4:
      result = 0;
      break;
    case 448:
      if (!*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B7364);
      }
      result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)this + 104))(**(_QWORD **)this);
      break;
    case 449:
    case 450:
    case 451:
      return result;
    default:
      switch(v2)
      {
        case 123:
        case 125:
        case 127:
        case 129:
        case 131:
        case 133:
        case 134:
        case 135:
        case 136:
        case 137:
        case 138:
        case 139:
        case 140:
        case 141:
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 217:
        case 218:
        case 219:
        case 220:
        case 221:
        case 222:
        case 223:
        case 224:
        case 225:
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 236:
        case 237:
        case 238:
        case 239:
        case 240:
        case 241:
        case 242:
        case 243:
        case 244:
        case 245:
        case 246:
        case 247:
        case 248:
        case 249:
        case 250:
        case 251:
        case 252:
        case 253:
        case 254:
        case 255:
        case 256:
        case 257:
        case 258:
        case 259:
        case 260:
        case 261:
        case 262:
        case 263:
        case 264:
        case 265:
        case 266:
        case 267:
        case 270:
        case 271:
        case 272:
        case 273:
        case 274:
        case 275:
        case 276:
        case 277:
        case 278:
        case 279:
        case 280:
        case 281:
        case 326:
        case 327:
        case 328:
          return result;
        default:
          goto LABEL_4;
      }
  }
  return result;
}

uint64_t JSC::B3::Air::Inst::hasNonArgEffects(JSC::B3::Air::Inst *this)
{
  int v2;
  uint64_t result;

  if ((*((_BYTE *)this + 122) & 1) != 0)
    return 1;
  v2 = *((__int16 *)this + 60) - 123;
  result = 1;
  switch(v2)
  {
    case 0:
    case 2:
    case 4:
    case 6:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 322:
    case 323:
    case 326:
    case 327:
    case 328:
      return result;
    case 325:
      if (!*((_DWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980B7720);
      }
      result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)this + 96))(**(_QWORD **)this);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

int8x8_t JSC::B3::Air::Inst::generate@<D0>(uint64_t *__return_ptr a1@<X8>, int **a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int8x8_t result@<D0>)
{
  uint64_t v10;
  int v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  JSC::B3::Air::Arg *v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  char v35;
  char v36;
  int v37;
  unsigned int v38;
  unsigned int *v39;
  _QWORD *v40;
  unsigned int v41;
  JSC::B3::Air::Arg *v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int i;
  unsigned int v52;
  unsigned int v53;
  JSC::B3::Air::Arg *v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  JSC::B3::Air::Arg *v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  JSC::B3::Air::Arg *v62;
  int v63;
  int v64;
  int *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  int *v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  int v85;
  int *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  int v93;
  char v94;
  int v96;
  int v97;
  int *v98;
  int v99;
  int v100;
  uint64_t v101;
  int v102;
  int v103;
  unsigned __int16 v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int *v117;
  int v118;
  int v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  uint64_t v125;
  int v126;
  int v127;
  unsigned int v128;
  int v129;
  int v130;
  JSC::B3::Air::Arg *v131;
  int v132;
  uint64_t v133;
  unsigned int v134;
  int *v135;
  int v136;
  int v137;
  unsigned int v138;
  int v139;
  unsigned int v140;
  int v141;
  int *v142;
  int v143;
  int v144;
  int v145;
  int *v146;
  int v147;
  uint64_t v148;
  char v149;
  int v150;
  uint64_t v151;
  unsigned int v152;
  unint64_t v153;
  uint64_t v154;
  unsigned int v155;
  unint64_t v156;
  uint64_t v157;
  JSC::B3::Air::Arg *v158;
  uint64_t v159;
  int v160;
  int *v161;
  int v162;
  char v163;
  int v164;
  char v165;
  int v167;
  int v168;
  unsigned int v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  JSC::B3::Air::Arg *v175;
  int v176;
  unsigned int v177;
  JSC::B3::Air::Arg *v178;
  int v179;
  unsigned int v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  int *v185;
  int v186;
  unsigned int v187;
  char v188;
  unsigned int v189;
  char v190;
  int v191;
  int v193;
  int v194;
  unsigned int v195;
  unsigned int *v196;
  _QWORD *v197;
  int *v198;
  int v199;
  uint64_t v200;
  int *v201;
  int v202;
  int v203;
  int v204;
  int v205;
  unsigned __int16 v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int v211;
  unint64_t v212;
  uint64_t v213;
  int v214;
  int *v215;
  int v216;
  unsigned int v217;
  JSC::B3::Air::Arg *v218;
  unsigned int v219;
  unsigned int v220;
  unint64_t v221;
  uint64_t v222;
  int v223;
  JSC::B3::Air::Arg *v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  unsigned int v234;
  char v235;
  int v236;
  unsigned int v237;
  unsigned int v238;
  int *v239;
  int v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _DWORD *v246;
  unsigned int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  unsigned int v252;
  unsigned int v253;
  int v254;
  int v255;
  int *v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int *v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int *v270;
  int v271;
  char v272;
  char v273;
  int v274;
  int v276;
  int v277;
  uint64_t v278;
  char v279;
  int v280;
  JSC::B3::Air::Arg *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  int *v288;
  unsigned int v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  char v294;
  uint64_t v295;
  JSC::B3::Air::Arg *v296;
  int v297;
  int v298;
  int v299;
  unsigned int v300;
  JSC::B3::Air::Arg *v301;
  int v302;
  unsigned int v303;
  unsigned int v304;
  int v305;
  int *v306;
  int v307;
  int v308;
  int v309;
  int v310;
  char v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  unsigned int v317;
  char v318;
  int v319;
  unsigned int v320;
  int *v321;
  int v322;
  int v323;
  int v324;
  unsigned int v325;
  char v326;
  unsigned int v327;
  int v328;
  int v329;
  int v330;
  unsigned int v331;
  int v332;
  int v333;
  int v334;
  int *v335;
  int v336;
  int v337;
  char v338;
  int v339;
  unint64_t v341;
  unint64_t v342;
  char v343;
  uint64_t v344;
  unsigned int v345;
  JSC::B3::Air::Arg *v346;
  int v347;
  unsigned int v348;
  unsigned int v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unsigned int v356;
  unsigned int v357;
  int v358;
  int v359;
  JSC::B3::Air::Arg *v360;
  int v361;
  int v362;
  int v363;
  int v364;
  int v365;
  int v366;
  unsigned int v367;
  int *v368;
  int v369;
  int v370;
  int *v371;
  int v372;
  int v373;
  int v374;
  int v375;
  unsigned int v376;
  int v377;
  int v378;
  int v379;
  int v380;
  int v381;
  int v382;
  int v383;
  int v384;
  int v385;
  unsigned int v386;
  char v387;
  char v388;
  int v389;
  int v390;
  int v392;
  int v393;
  uint64_t v394;
  int *v395;
  int v396;
  int *v397;
  int v398;
  int v399;
  int v400;
  int v401;
  char v402;
  unsigned int v403;
  int v405;
  int v406;
  int v407;
  int v408;
  JSC::B3::Air::Arg *v409;
  int v410;
  int v411;
  unsigned int v412;
  unint64_t v413;
  uint64_t v414;
  unsigned int v415;
  int *v416;
  unsigned int v417;
  JSC::B3::Air::Arg *v418;
  int v419;
  unsigned int v420;
  unint64_t v421;
  uint64_t v422;
  unsigned int v423;
  int *v424;
  int v425;
  unsigned int v426;
  unint64_t v427;
  uint64_t v428;
  unsigned int v429;
  int v430;
  int v431;
  int v432;
  int v433;
  unsigned __int8 *v434;
  int v435;
  int v436;
  char v437;
  int v438;
  int v439;
  unsigned int v440;
  JSC::B3::Air::Arg *v441;
  int v442;
  uint64_t v443;
  int v444;
  int v445;
  int v446;
  int v447;
  int *v448;
  int v449;
  unsigned int v450;
  unsigned int v451;
  int v452;
  unint64_t v453;
  unint64_t v454;
  uint64_t v455;
  uint64_t v456;
  int v457;
  uint64_t v458;
  int v459;
  int v460;
  char v461;
  char v462;
  char v463;
  unsigned int v464;
  unsigned int v465;
  JSC::B3::Air::Arg *v466;
  int v467;
  unsigned int v468;
  unsigned int v469;
  unint64_t v470;
  uint64_t v471;
  unsigned int v472;
  unint64_t v474;
  unint64_t v475;
  char v476;
  uint64_t v477;
  unsigned int v478;
  int *v479;
  int v480;
  int v481;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  unsigned int v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t v491;
  int v492;
  int v493;
  int v494;
  unsigned int v495;
  JSC::B3::Air::Arg *v496;
  int v497;
  int v498;
  int v499;
  int v500;
  unsigned int v501;
  char v502;
  int v503;
  uint64_t v504;
  unsigned int v505;
  int v506;
  int v507;
  int v508;
  int v509;
  unsigned int v510;
  uint64_t v511;
  char v512;
  char v513;
  unsigned int v514;
  unint64_t v515;
  uint64_t v516;
  unsigned int v517;
  uint64_t v518;
  int v519;
  int v520;
  char v521;
  char v522;
  char v523;
  unsigned int v524;
  unsigned int v525;
  int v526;
  int v527;
  int v528;
  int v529;
  int v530;
  int v531;
  int v532;
  int v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  int v541;
  int v542;
  int v543;
  int v544;
  int v545;
  int v546;
  unsigned int v547;
  unsigned int v548;
  char v549;
  int v550;
  int *v551;
  int v552;
  int v553;
  int v554;
  int v555;
  unsigned int v556;
  int v557;
  uint64_t v558;
  unsigned __int8 v559;
  int v560;
  unsigned int v561;
  int v562;
  unsigned int v563;
  unsigned int v564;
  int v565;
  unsigned int v566;
  unsigned int v567;
  unsigned int v568;
  int v569;
  unsigned int v570;
  char v571;
  uint64_t v572;
  unsigned int v573;
  int v574;
  int v575;
  int v576;
  int v577;
  int v578;
  int v579;
  int v580;
  int v581;
  unint64_t v582;
  unint64_t v583;
  uint64_t v584;
  uint64_t v585;
  unsigned int v586;
  int v587;
  int v588;
  int v589;
  int v590;
  int v591;
  int v592;
  unsigned int v593;
  JSC::B3::Air::Arg *v594;
  unsigned int v595;
  unsigned int v596;
  unint64_t v597;
  uint64_t v598;
  unint64_t v599;
  unint64_t v600;
  char v601;
  uint64_t v602;
  unsigned int v603;
  int v604;
  unsigned int v605;
  unsigned int v606;
  unsigned int v607;
  unsigned int v608;
  uint64_t v609;
  unint64_t v610;
  unsigned int v611;
  int v612;
  int v613;
  uint64_t v614;
  unsigned int v615;
  int v616;
  unsigned int v617;
  int *v618;
  int v619;
  JSC::B3::Air::Arg *v620;
  unsigned int v621;
  unint64_t v622;
  unsigned int v623;
  unsigned int v624;
  uint64_t v625;
  char v626;
  char v627;
  int v628;
  JSC::B3::Air::Arg *v629;
  int v630;
  uint64_t v631;
  unsigned int v632;
  int *v633;
  int v634;
  int v635;
  int v636;
  int v637;
  int v638;
  int *v639;
  int v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  unsigned int v645;
  unsigned int v646;
  JSC::B3::Air::Arg *v647;
  int v648;
  unsigned int v649;
  unsigned int v650;
  int v651;
  int v652;
  unsigned int v653;
  int v654;
  unsigned int v655;
  unsigned int v656;
  uint64_t v657;
  unsigned int v658;
  unsigned int v659;
  JSC::B3::Air::Arg *v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  int *v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  unsigned int v677;
  unsigned int v678;
  unsigned int v679;
  JSC::B3::Air::Arg *v680;
  int v681;
  uint64_t v682;
  unsigned int v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  unsigned int v690;
  int v691;
  char v692;
  unsigned __int8 v693;
  int *v694;
  int v695;
  int v696;
  unsigned int v697;
  unsigned int v698;
  unsigned int v699;
  int *v700;
  unsigned int v701;
  unint64_t v702;
  unsigned int v705;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  int *v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v724;
  unsigned int v725;
  unsigned int v726;
  unsigned int v727;
  unsigned int v728;
  int v729;
  unsigned int v730;
  int *v731;
  int v732;
  int v733;
  uint64_t v734;
  uint64_t v735;
  unsigned int v736;
  int *v737;
  int v738;
  int v739;
  uint64_t v740;
  unsigned int v741;
  int v742;
  int v743;
  int *v744;
  int *v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  int *v751;
  int *v752;
  int *v753;
  int *v754;
  JSC::B3::Air::Arg *v755;
  int v756;
  uint64_t v757;
  int *v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  JSC::B3::Air::Arg *v765;
  char v767;
  unsigned int v768;
  uint64_t v769;
  int *v770;
  unsigned int v772;
  unsigned int v773;
  unsigned int v774;
  int v775;
  int *v776;
  int v777;
  int *v778;
  int v779;
  unsigned int v780;
  unsigned int v781;
  unsigned int v782;
  unsigned int v783;
  unsigned int v784;
  unsigned int v785;
  unsigned int v786;
  unsigned int v787;
  unsigned int v788;
  unsigned int v789;
  unsigned int v790;
  unsigned int v791;
  unsigned int v792;
  int v793;
  JSC::B3::Air::Arg *v794;
  uint64_t v795;
  unsigned int v796;
  unsigned int v797;
  JSC::B3::Air::Arg *v798;
  uint64_t v799;
  unsigned int v800;
  int v801;
  unsigned int v802;
  int v803;
  unsigned int v804;
  unsigned int v805;
  unsigned int v806;
  unsigned int v807;
  unsigned int v808;
  JSC::B3::Air::Arg *v809;
  uint64_t v810;
  unsigned int v811;
  JSC::B3::Air::Arg *v812;
  int v813;
  uint64_t v814;
  unsigned int v815;
  unsigned int v816;
  unsigned int v817;
  unsigned int v818;
  JSC::B3::Air::Arg *v819;
  uint64_t v820;
  unsigned int v821;
  unsigned int v822;
  unsigned int v823;
  unsigned int v824;
  unsigned int v825;
  unsigned int v826;
  JSC::B3::Air::Arg *v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  unsigned int v833;
  JSC::B3::Air::Arg *v834;
  uint64_t v835;
  unsigned int v836;
  int v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  unsigned int v842;
  JSC::B3::Air::Arg *v843;
  uint64_t v844;
  unsigned int v845;
  unsigned int v846;
  JSC::B3::Air::Arg *v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  unsigned int v853;
  JSC::B3::Air::Arg *v854;
  uint64_t v855;
  unsigned int v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  unsigned int v861;
  JSC::B3::Air::Arg *v862;
  uint64_t v863;
  unsigned int v864;
  unsigned int v865;
  unsigned int v866;
  JSC::B3::Air::Arg *v867;
  uint64_t v868;
  unsigned int v869;
  unsigned int v870;
  unsigned int v871;
  unsigned int v872;
  unsigned int v873;
  unsigned int v874;
  JSC::B3::Air::Arg *v875;
  uint64_t v876;
  unsigned int v877;
  unsigned int v878;
  unsigned int v879;
  unsigned int v880;
  unsigned int v881;
  unsigned int v882;
  unsigned int v883;
  int v884;
  int v886;
  unsigned int v887;
  unsigned int v888;
  unsigned int v889;
  unsigned int v890;
  int v891;
  unsigned int v893;
  unsigned int v894;
  unsigned int v895;
  int v896;
  unsigned int v898;
  unsigned int v899;
  unsigned int v900;
  int v901;
  unsigned int v903;
  unsigned int v904;
  unsigned int v905;
  unsigned int v906;
  int v907;
  unsigned int v909;
  unsigned int v910;
  unsigned int v911;
  int v912;
  unsigned int v914;
  unsigned int v915;
  unsigned int v916;
  unsigned int v917;
  unsigned int v918;
  int v919;
  unsigned int v921;
  unsigned int v922;
  unsigned int v923;
  int v924;
  unsigned int v926;
  unsigned int v927;
  unsigned int v928;
  int v929;
  unsigned int v931;
  unsigned int v932;
  unsigned int v933;
  unsigned int v934;
  unsigned int v935;
  int v936;
  unsigned int v938;
  unsigned int v939;
  unsigned int v940;
  int v941;
  unsigned int v943;
  unsigned int v944;
  unsigned int v945;
  int v946;
  unsigned int v948;
  unsigned int v949;
  JSC::B3::Air::Arg *v950;
  uint64_t v951;
  unsigned int v952;
  unsigned int v953;
  int v954;
  unsigned int v956;
  unsigned int v957;
  int v958;
  unsigned int v960;
  unsigned int v961;
  unsigned int v962;
  int v963;
  unsigned int v965;
  unsigned int v966;
  int v967;
  unsigned int v969;
  unsigned int v970;
  int v971;
  unsigned int v973;
  unsigned int v974;
  int v975;
  unsigned int v977;
  unsigned int v979;
  unsigned int v980;
  unsigned int v981;
  int v982;
  unsigned int v984;
  unsigned int v986;
  unsigned int v987;
  int v988;
  int v990;
  unsigned int v991;
  unsigned int v992;
  unsigned int v993;
  unsigned int v994;
  unsigned int v995;
  int v996;
  int v997;
  unsigned int v998;
  unsigned int v999;
  unsigned int v1000;
  unsigned int v1001;
  unsigned int v1002;
  JSC::B3::Air::Arg *v1003;
  unsigned int v1004;
  int v1005;
  unsigned int v1006;
  JSC::B3::Air::Arg *v1007;
  uint64_t v1008;
  unsigned int v1009;
  unsigned int v1010;
  unsigned int v1011;
  unsigned int v1012;
  JSC::B3::Air::Arg *v1013;
  unsigned int v1014;
  int v1015;
  unsigned int v1016;
  unsigned int v1017;
  unsigned int v1018;
  unsigned int v1019;
  int v1020;
  unsigned int v1021;
  JSC::B3::Air::Arg *v1022;
  int v1023;
  unsigned int v1024;
  unsigned int v1025;
  unsigned int v1026;
  unsigned int v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  unsigned int v1032;
  JSC::B3::Air::Arg *v1033;
  uint64_t v1034;
  unsigned int v1035;
  unsigned int v1036;
  JSC::B3::Air::Arg *v1037;
  unsigned int v1038;
  int v1039;
  unsigned int v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  unsigned int v1045;
  JSC::B3::Air::Arg *v1046;
  uint64_t v1047;
  JSC::B3::Air::Arg *v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  unsigned int v1054;
  JSC::B3::Air::Arg *v1055;
  uint64_t v1056;
  unsigned int v1057;
  int v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  unsigned int v1063;
  JSC::B3::Air::Arg *v1064;
  uint64_t v1065;
  unsigned int v1066;
  unsigned int v1067;
  JSC::B3::Air::Arg *v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  unsigned int v1074;
  JSC::B3::Air::Arg *v1075;
  uint64_t v1076;
  unsigned int v1077;
  int v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  unsigned int v1083;
  JSC::B3::Air::Arg *v1084;
  uint64_t v1085;
  unsigned int v1086;
  unsigned int v1087;
  JSC::B3::Air::Arg *v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  unsigned int v1094;
  JSC::B3::Air::Arg *v1095;
  uint64_t v1096;
  unsigned int v1097;
  int v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  unsigned int v1103;
  JSC::B3::Air::Arg *v1104;
  uint64_t v1105;
  unsigned int v1106;
  JSC::B3::Air::Arg *v1107;
  uint64_t v1108;
  unsigned int v1109;
  JSC::B3::Air::Arg *v1110;
  uint64_t v1111;
  unsigned int v1112;
  int v1113;
  unsigned int v1114;
  JSC::B3::Air::Arg *v1115;
  uint64_t v1116;
  unsigned int v1117;
  unsigned int v1118;
  JSC::B3::Air::Arg *v1119;
  uint64_t v1120;
  unsigned int v1121;
  JSC::B3::Air::Arg *v1122;
  uint64_t v1123;
  unsigned int v1124;
  JSC::B3::Air::Arg *v1125;
  uint64_t v1126;
  unsigned int v1127;
  unsigned int v1128;
  unsigned int v1129;
  JSC::B3::Air::Arg *v1130;
  uint64_t v1131;
  unsigned int v1132;
  JSC::B3::Air::Arg *v1133;
  uint64_t v1134;
  unsigned int v1135;
  JSC::B3::Air::Arg *v1136;
  uint64_t v1137;
  unsigned int v1138;
  JSC::B3::Air::Arg *v1139;
  uint64_t v1140;
  unsigned int v1141;
  int *v1142;
  uint64_t v1143;
  unsigned int v1144;
  int *v1145;
  uint64_t v1146;
  unsigned int v1147;
  JSC::B3::Air::Arg *v1148;
  uint64_t v1149;
  unsigned int v1150;
  JSC::B3::Air::Arg *v1151;
  uint64_t v1152;
  unsigned int v1153;
  int *v1154;
  uint64_t v1155;
  unsigned int v1156;
  JSC::B3::Air::Arg *v1157;
  uint64_t v1158;
  unsigned int v1159;
  int *v1160;
  uint64_t v1161;
  unsigned int v1162;
  int *v1163;
  uint64_t v1164;
  unsigned int v1165;
  JSC::B3::Air::Arg *v1166;
  uint64_t v1167;
  unsigned int v1168;
  int *v1169;
  uint64_t v1170;
  unsigned int v1171;
  int *v1172;
  uint64_t v1173;
  unsigned int v1174;
  JSC::B3::Air::Arg *v1175;
  uint64_t v1176;
  unsigned int v1177;
  JSC::B3::Air::Arg *v1178;
  uint64_t v1179;
  int v1180;
  JSC::B3::Air::Arg *v1181;
  uint64_t v1182;
  unsigned int v1183;
  JSC::B3::Air::Arg *v1184;
  uint64_t v1185;
  unsigned int v1186;
  JSC::B3::Air::Arg *v1187;
  uint64_t v1188;
  unsigned int v1189;
  JSC::B3::Air::Arg *v1190;
  uint64_t v1191;
  int v1192;
  JSC::B3::Air::Arg *v1193;
  uint64_t v1194;
  unsigned int v1195;
  JSC::B3::Air::Arg *v1196;
  uint64_t v1197;
  unsigned int v1198;
  JSC::B3::Air::Arg *v1199;
  uint64_t v1200;
  unsigned int v1201;
  JSC::B3::Air::Arg *v1202;
  uint64_t v1203;
  int v1204;
  JSC::B3::Air::Arg *v1205;
  uint64_t v1206;
  unsigned int v1207;
  JSC::B3::Air::Arg *v1208;
  uint64_t v1209;
  int v1210;
  int v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  unsigned int v1216;
  JSC::B3::Air::Arg *v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  unsigned int v1223;
  JSC::B3::Air::Arg *v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  unsigned int v1230;
  JSC::B3::Air::Arg *v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  unsigned int v1237;
  JSC::B3::Air::Arg *v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  unsigned int v1244;
  JSC::B3::Air::Arg *v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  unsigned int v1251;
  JSC::B3::Air::Arg *v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  unsigned int v1258;
  JSC::B3::Air::Arg *v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  unsigned int v1265;
  JSC::B3::Air::Arg *v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  unsigned int v1272;
  JSC::B3::Air::Arg *v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  unsigned int v1279;
  JSC::B3::Air::Arg *v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  unsigned int v1286;
  JSC::B3::Air::Arg *v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  unsigned int v1293;
  JSC::B3::Air::Arg *v1294;
  uint64_t v1295;
  unsigned int v1296;
  unsigned int v1297;
  unsigned int v1298;
  int v1299;
  unsigned int v1301;
  int v1302;
  unsigned int v1304;
  int *v1305;
  int v1306;
  unsigned int v1308;
  int *v1309;
  int v1310;
  unsigned int v1312;
  unsigned int v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  unsigned int v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  char v1341;
  char v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  int v1346;
  int v1347;
  char v1348;
  unsigned int v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  JSC::B3::Air::Arg *v1353;
  uint64_t v1354;
  unint64_t v1355;
  unint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  char v1360;
  unsigned int v1361;
  uint64_t v1362;
  int v1363;
  char v1364;
  unint64_t v1365;
  unint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  int v1377;
  int v1378;
  int v1379;
  int v1380;
  int v1381;
  char v1382;
  char v1383;
  char v1384;
  char v1385;
  char v1386;
  unsigned int v1387;
  int v1388;
  __int128 v1389;
  char *v1390;
  char v1391;
  char v1392;

  v10 = a4;
  switch(*((_WORD *)a2 + 60))
  {
    case 0:
      JSC::MacroAssemblerARM64::nop((JSC::MacroAssemblerARM64 *)a3, a3, a4, a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 1:
      v85 = *((_DWORD *)a2 + 3);
      if (v85 == 3)
      {
        v86 = *a2;
        v87 = *((char *)*a2 + 8);
        if (v87 == 2)
        {
          v88 = *v86;
          v89 = (char)(*((_BYTE *)v86 + 48) - 1);
          v90 = (char)(*((_BYTE *)v86 + 80) - 1);
          v91 = a3;
LABEL_100:
          JSC::MacroAssemblerARM64::add32(v91, v88, v89, v90, a5, a6, a7, a8);
          goto LABEL_24;
        }
        if (v87 == 1)
        {
          v163 = *((_BYTE *)v86 + 16) - 1;
          v164 = *((unsigned __int8 *)v86 + 48) - 1;
          v165 = *((_BYTE *)v86 + 80) - 1;
          if (v164 == 31)
          {
            LOBYTE(v164) = v163;
            v163 = 31;
          }
          else if (v163 != 31 && v165 != 31)
          {
            v167 = (unsigned __int16)(32 * (v163 & 0x1F)) | ((v164 & 0x1F) << 16) | v165 & 0x1F;
            v168 = 184549376;
LABEL_203:
            v106 = v167 | v168;
            goto LABEL_204;
          }
          v1379 = v165 | (32 * v163) | ((v164 & 0x1F) << 16);
          v1380 = 186671104;
          goto LABEL_2677;
        }
LABEL_1006:
        __break(0xC471u);
        JUMPOUT(0x1980BC1A4);
      }
      if (v85 != 2)
        goto LABEL_1006;
      v434 = (unsigned __int8 *)*a2;
      v435 = *((char *)*a2 + 8);
      if (v435 != 1)
      {
        if (v435 == 2 && v434[40] == 1)
        {
          v88 = *(unsigned int *)v434;
          v89 = (char)(v434[48] - 1);
          v91 = a3;
          v90 = v89;
          goto LABEL_100;
        }
        goto LABEL_1006;
      }
      if (v434[40] != 1)
        goto LABEL_1006;
      v436 = v434[16] - 1;
      v437 = v434[48] - 1;
      if (v436 == 31)
      {
        v614 = v437 | ((v437 & 0x1F) << 16) | 0xB2063E0u;
      }
      else
      {
        v438 = (v436 & 0x1F) << 16;
        if (v437 != 31)
        {
          v439 = v437 & 0x1F;
          v167 = v438 | (32 * v439);
          v168 = v439 | 0xB000000;
          goto LABEL_203;
        }
        v614 = v438 | 0xB2063FFu;
      }
      goto LABEL_772;
    case 2:
      v331 = *((_DWORD *)a2 + 3);
      if (!v331)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C33D4);
      }
      if (v331 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C33DCLL);
      }
      if (v331 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C33E4);
      }
      v332 = (*a2)[4];
      v333 = (*a2)[12];
      v334 = (*a2)[20];
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v122 = ((v333 << 16) + 2031616) & 0x1F0000 | (((v332 << 24) - 0x1000000) >> 19);
      v138 = (char)(v334 - 1) | 0x8B000000;
      v139 = 2113536;
      goto LABEL_170;
    case 3:
      v1297 = *((_DWORD *)a2 + 3);
      if (!v1297)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4FC4);
      }
      if (v1297 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4FCCLL);
      }
      if (v1297 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C5004);
      }
      JSC::MacroAssemblerARM64::addSignExtend64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 4:
      v1298 = *((_DWORD *)a2 + 3);
      if (!v1298)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4FD4);
      }
      v1299 = *((char *)*a2 + 8);
      if (v1299 == 1)
      {
        if (v1298 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C2994);
        }
      }
      else if (v1299 == 2 && v1298 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C2180);
      }
      goto LABEL_1006;
    case 5:
      v1301 = *((_DWORD *)a2 + 3);
      if (!v1301)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4FDCLL);
      }
      v1302 = *((char *)*a2 + 8);
      if (v1302 == 1)
      {
        if (v1301 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C29A4);
        }
      }
      else if (v1302 == 2 && v1301 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C21ACLL);
      }
      goto LABEL_1006;
    case 6:
      v64 = *((_DWORD *)a2 + 3);
      if (v64 != 3)
      {
        if (v64 != 2)
          goto LABEL_1006;
        v731 = *a2;
        v732 = *((char *)*a2 + 8);
        if (v732 != 2)
        {
          if (v732 == 1 && *((_BYTE *)v731 + 40) == 1)
          {
            JSC::MacroAssemblerARM64::add64((_DWORD *)a3, (char)(*((_BYTE *)v731 + 16) - 1), (char)(*((_BYTE *)v731 + 48) - 1), a4, a5, a6, a7, a8);
            goto LABEL_24;
          }
          goto LABEL_1006;
        }
        if (*((_BYTE *)v731 + 40) != 1)
          goto LABEL_1006;
        v67 = *v731;
        v68 = (char)(*((_BYTE *)v731 + 48) - 1);
        v70 = a3;
        v69 = v68;
        goto LABEL_80;
      }
      v65 = *a2;
      v66 = *((char *)*a2 + 8);
      if (v66 == 2)
      {
        v67 = *v65;
        v68 = (char)(*((_BYTE *)v65 + 48) - 1);
        v69 = (char)(*((_BYTE *)v65 + 80) - 1);
        v70 = a3;
LABEL_80:
        JSC::MacroAssemblerARM64::add64(v70, v67, v68, v69, a5, a6, a7, a8);
        goto LABEL_24;
      }
      if (v66 != 1)
        goto LABEL_1006;
      v92 = *((_BYTE *)v65 + 16) - 1;
      v93 = *((unsigned __int8 *)v65 + 48) - 1;
      v94 = *((_BYTE *)v65 + 80) - 1;
      if (v93 == 31)
      {
        LOBYTE(v93) = v92;
        v92 = 31;
      }
      else if (v92 != 31 && v94 != 31)
      {
        v37 = (unsigned __int16)(32 * (v92 & 0x1F)) | ((v93 & 0x1F) << 16) | v94 & 0x1F | 0x8B000000;
        goto LABEL_37;
      }
      v37 = v94 | (32 * v92) | ((v93 & 0x1F) << 16) | 0x8B206000;
      goto LABEL_37;
    case 7:
      if (*((_DWORD *)a2 + 3) != 3)
        goto LABEL_1006;
      v265 = *a2;
      if (*((_BYTE *)*a2 + 8) != 1 || *((_BYTE *)v265 + 40) != 1)
        goto LABEL_1006;
      v266 = ~v265[4];
      v267 = ~v265[12];
      v268 = ~v265[20];
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v140 = (32 * (char)v266) | ((char)v267 << 16) | (char)v268 | 0x1E602000 | 0x800;
      goto LABEL_172;
    case 8:
      if (*((_DWORD *)a2 + 3) != 3)
        goto LABEL_1006;
      v744 = *a2;
      if (*((_BYTE *)*a2 + 8) != 1 || *((_BYTE *)v744 + 40) != 1)
        goto LABEL_1006;
      v651 = (32 * (char)~*((_BYTE *)v744 + 16)) | ((char)~*((_BYTE *)v744 + 48) << 16);
      v652 = (char)~*((_BYTE *)v744 + 80) | 0x1E200800;
      goto LABEL_845;
    case 9:
      v110 = *((_DWORD *)a2 + 3);
      if (v110 == 2)
      {
        v111 = *a2;
        v112 = *((char *)*a2 + 8);
        if (v112 == 2)
        {
          if (*((_BYTE *)v111 + 40) != 1)
            goto LABEL_1006;
          v113 = *v111;
          v114 = (char)(*((_BYTE *)v111 + 48) - 1);
          v115 = a3;
          v116 = v114;
LABEL_147:
          JSC::MacroAssemblerARM64::sub32(v115, v114, v113, v116, a5, a6, a7, a8);
          goto LABEL_24;
        }
        if (v112 != 1 || *((_BYTE *)v111 + 40) != 1)
          goto LABEL_1006;
        v381 = *((unsigned __int8 *)v111 + 48) - 1;
        v382 = ((v111[4] << 16) + 2031616) & 0x1F0000;
        if (v381 == 31)
        {
          v37 = v382 | 0x4B2063FF;
        }
        else
        {
          v383 = v381 & 0x1F;
          v384 = v382 | (32 * v383);
          v385 = v383 | 0x4B000000;
LABEL_701:
          v37 = v384 | v385;
        }
LABEL_37:
        v39 = (unsigned int *)(a3 + 200);
        v38 = *(_DWORD *)(a3 + 200);
        v40 = (_QWORD *)(a3 + 56);
        if (v38 + 4 > *(_DWORD *)(a3 + 192))
        {
          result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
          v38 = *v39;
        }
        *(_DWORD *)(*v40 + v38) = v37;
        *v39 += 4;
        goto LABEL_24;
      }
      if (v110 != 3)
        goto LABEL_1006;
      v335 = *a2;
      v336 = *((char *)*a2 + 40);
      if (v336 != 1)
      {
        if (v336 != 2)
          goto LABEL_1006;
        v113 = v335[8];
        v114 = (char)(*((_BYTE *)v335 + 16) - 1);
        v116 = (char)(*((_BYTE *)v335 + 80) - 1);
        v115 = a3;
        goto LABEL_147;
      }
      v337 = *((unsigned __int8 *)v335 + 16) - 1;
      v338 = *((_BYTE *)v335 + 80) - 1;
      v339 = ((v335[12] << 16) + 2031616) & 0x1F0000;
      if (v337 != 31 && v338 != 31)
      {
        v1379 = v338 & 0x1F | (32 * (v337 & 0x1F)) | v339;
        v1380 = 1258291200;
LABEL_2677:
        v614 = v1379 | v1380;
        goto LABEL_772;
      }
      v103 = v338 | (32 * (char)v337) | v339;
      v105 = 1260412928;
      goto LABEL_140;
    case 0xA:
      v269 = *((_DWORD *)a2 + 3);
      if (v269 == 3)
      {
        v270 = *a2;
        v271 = *((char *)*a2 + 40);
        if (v271 == 1)
        {
          v272 = *((_BYTE *)v270 + 16) - 1;
          v273 = *((_BYTE *)v270 + 48) - 1;
          v274 = *((unsigned __int8 *)v270 + 80) - 1;
          if (v274 == 31 || v272 == 31)
          {
            v167 = (char)v274 | (32 * v272) | ((v273 & 0x1F) << 16);
            v168 = -887070720;
            goto LABEL_203;
          }
          v1377 = (unsigned __int16)(32 * (v272 & 0x1F)) | ((v273 & 0x1F) << 16) | v274 & 0x1F;
          v1378 = -889192448;
LABEL_867:
          v614 = v1377 | v1378;
LABEL_772:
          JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a3 + 56), v614, a4, v10, a5, a6, a7, a8);
          goto LABEL_24;
        }
        if (v271 != 2)
          goto LABEL_1006;
        v641 = v270[8];
        v642 = (char)(*((_BYTE *)v270 + 16) - 1);
        v644 = (char)(*((_BYTE *)v270 + 80) - 1);
        v643 = a3;
      }
      else
      {
        if (v269 != 2)
          goto LABEL_1006;
        v639 = *a2;
        v640 = *((char *)*a2 + 8);
        if (v640 != 2)
        {
          if (v640 == 1 && *((_BYTE *)v639 + 40) == 1)
          {
            JSC::MacroAssemblerARM64::sub64((_DWORD *)a3, (char)(*((_BYTE *)v639 + 16) - 1), (char)(*((_BYTE *)v639 + 48) - 1), a4, a5, a6, a7, a8);
            goto LABEL_24;
          }
          goto LABEL_1006;
        }
        if (*((_BYTE *)v639 + 40) != 1)
          goto LABEL_1006;
        v641 = *v639;
        v642 = (char)(*((_BYTE *)v639 + 48) - 1);
        v643 = a3;
        v644 = v642;
      }
      JSC::MacroAssemblerARM64::sub64(v643, v642, v641, v644, a5, a6, a7, a8);
      goto LABEL_24;
    case 0xB:
      if (*((_DWORD *)a2 + 3) != 3)
        goto LABEL_1006;
      v306 = *a2;
      if (*((_BYTE *)*a2 + 40) != 1)
        goto LABEL_1006;
      v307 = ~v306[4];
      v308 = ~v306[12];
      v309 = ~v306[20];
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v205 = (char)v309;
      v122 = (32 * (char)v307) | ((char)v308 << 16);
      v206 = 14336;
      goto LABEL_249;
    case 0xC:
      if (*((_DWORD *)a2 + 3) != 3 || *((_BYTE *)*a2 + 40) != 1)
        goto LABEL_1006;
      v614 = (32 * (char)~*((_BYTE *)*a2 + 16)) | ((char)~*((_BYTE *)*a2 + 48) << 16) | (char)~*((_BYTE *)*a2 + 80) | 0x1E200800 | 0x3000u;
      goto LABEL_772;
    case 0xD:
      if (!*((_DWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3784);
      }
      if (*((_BYTE *)*a2 + 8) != 1)
        goto LABEL_1006;
      JSC::MacroAssemblerARM64::neg32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), a4, a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0xE:
      if (!*((_DWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3A9CLL);
      }
      if (*((_BYTE *)*a2 + 8) != 1)
        goto LABEL_1006;
      JSC::MacroAssemblerARM64::neg64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), a4, a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0xF:
      v604 = *((_DWORD *)a2 + 3);
      if (v604 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C368CLL);
      }
      if (!v604)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3694);
      }
      JSC::MacroAssemblerARM64::negateDouble((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x10:
      v997 = *((_DWORD *)a2 + 3);
      if (v997 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4644);
      }
      if (!v997)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C464CLL);
      }
      JSC::MacroAssemblerARM64::negateFloat((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x11:
      v550 = *((_DWORD *)a2 + 3);
      if (v550 != 3)
      {
        if (v550 == 2 && *((_BYTE *)*a2 + 8) == 1)
        {
          JSC::MacroAssemblerARM64::mul32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), a4, a5, a6, a7, a8);
          goto LABEL_24;
        }
        goto LABEL_1006;
      }
      v551 = *a2;
      if (*((_BYTE *)*a2 + 8) != 1 || *((_BYTE *)v551 + 40) != 1)
        goto LABEL_1006;
      v552 = v551[4];
      v553 = v551[12];
      v554 = v551[20] + 31;
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v122 = ((v553 << 16) + 2031616) & 0x1F0000 | (32 * (_WORD)v552 + 992) & 0x3E0 | v554 & 0x1F;
      v123 = 453016576;
      goto LABEL_171;
    case 0x13:
      v578 = *((_DWORD *)a2 + 3);
      if (v578 != 3)
      {
        if (v578 == 2)
        {
          JSC::MacroAssemblerARM64::mul64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), a4, a5, a6, a7, a8);
          goto LABEL_24;
        }
        goto LABEL_1006;
      }
      v579 = (*a2)[4];
      v580 = (*a2)[12];
      v581 = (*a2)[20] + 31;
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v122 = ((v580 << 16) + 2031616) & 0x1F0000 | (32 * (_WORD)v579 + 992) & 0x3E0 | v581 & 0x1F;
      v123 = -1694467072;
      goto LABEL_171;
    case 0x14:
      v653 = *((_DWORD *)a2 + 3);
      if (!v653)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C382CLL);
      }
      if (v653 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3834);
      }
      if (v653 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3844);
      }
      if (v653 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C383CLL);
      }
      JSC::MacroAssemblerARM64::multiplyAdd32(a3, *((_BYTE *)*a2 + 16) - 1, (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0x15:
      v772 = *((_DWORD *)a2 + 3);
      if (!v772)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3AECLL);
      }
      if (v772 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3AF4);
      }
      if (v772 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3BDCLL);
      }
      if (v772 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3AFCLL);
      }
      JSC::MacroAssemblerARM64::multiplyAdd64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0x16:
      v773 = *((_DWORD *)a2 + 3);
      if (!v773)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3B04);
      }
      if (v773 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3B0CLL);
      }
      if (v773 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3BE4);
      }
      if (v773 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3B14);
      }
      JSC::MacroAssemblerARM64::multiplyAddSignExtend32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0x17:
      v774 = *((_DWORD *)a2 + 3);
      if (!v774)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3B1CLL);
      }
      if (v774 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3B24);
      }
      if (v774 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3BECLL);
      }
      if (v774 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3B2CLL);
      }
      JSC::MacroAssemblerARM64::multiplyAddZeroExtend32(a3, *((_BYTE *)*a2 + 16) - 1, (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0x18:
      v607 = *((_DWORD *)a2 + 3);
      if (!v607)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C36D4);
      }
      if (v607 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C36DCLL);
      }
      if (v607 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C36ECLL);
      }
      if (v607 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C36E4);
      }
      JSC::MacroAssemblerARM64::multiplySub32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0x19:
      v728 = *((_DWORD *)a2 + 3);
      if (!v728)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3A34);
      }
      if (v728 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3A3CLL);
      }
      if (v728 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3A6CLL);
      }
      if (v728 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3A44);
      }
      JSC::MacroAssemblerARM64::multiplySub64(a3, *((_BYTE *)*a2 + 16) - 1, (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0x1A:
      v781 = *((_DWORD *)a2 + 3);
      if (!v781)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3B4CLL);
      }
      if (v781 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3B54);
      }
      if (v781 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3BFCLL);
      }
      if (v781 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3B5CLL);
      }
      JSC::MacroAssemblerARM64::multiplySubSignExtend32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0x1B:
      v782 = *((_DWORD *)a2 + 3);
      if (!v782)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3B64);
      }
      if (v782 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3B6CLL);
      }
      if (v782 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3C04);
      }
      if (v782 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3B74);
      }
      JSC::MacroAssemblerARM64::multiplySubZeroExtend32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0x1C:
      v783 = *((_DWORD *)a2 + 3);
      if (!v783)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3B7CLL);
      }
      if (v783 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3B84);
      }
      if (v783 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3C0CLL);
      }
      JSC::MacroAssemblerARM64::multiplyNeg32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x1D:
      v784 = *((_DWORD *)a2 + 3);
      if (!v784)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3B8CLL);
      }
      if (v784 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3B94);
      }
      if (v784 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3C14);
      }
      JSC::MacroAssemblerARM64::multiplyNeg64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x1E:
      v785 = *((_DWORD *)a2 + 3);
      if (!v785)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3B9CLL);
      }
      if (v785 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3BA4);
      }
      if (v785 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3C1CLL);
      }
      JSC::MacroAssemblerARM64::multiplyNegSignExtend32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x1F:
      v786 = *((_DWORD *)a2 + 3);
      if (!v786)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3BACLL);
      }
      if (v786 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3BB4);
      }
      if (v786 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3C24);
      }
      JSC::MacroAssemblerARM64::multiplyNegZeroExtend32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x20:
      v787 = *((_DWORD *)a2 + 3);
      if (!v787)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3BBCLL);
      }
      if (v787 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3BC4);
      }
      if (v787 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3C2CLL);
      }
      JSC::MacroAssemblerARM64::multiplySignExtend32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x21:
      v788 = *((_DWORD *)a2 + 3);
      if (!v788)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3BCCLL);
      }
      if (v788 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3BD4);
      }
      if (v788 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3C34);
      }
      JSC::MacroAssemblerARM64::multiplyZeroExtend32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x22:
      v659 = *((_DWORD *)a2 + 3);
      if (!v659)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C38ACLL);
      }
      if (v659 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C38B4);
      }
      if (v659 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C38BCLL);
      }
      v614 = (((*a2)[12] << 16) + 2031616) & 0x1F0000 | (32 * (*a2)[4] + 992) & 0x3E0 | ((*a2)[20] - 1) & 0x1F | 0x1AC00C00u;
      goto LABEL_772;
    case 0x23:
      v656 = *((_DWORD *)a2 + 3);
      if (!v656)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C388CLL);
      }
      if (v656 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3894);
      }
      if (v656 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C389CLL);
      }
      v1377 = (((*a2)[12] << 16) + 2031616) & 0x1F0000 | (32 * (*a2)[4] + 992) & 0x3E0 | ((*a2)[20] - 1) & 0x1F;
      v1378 = 448792576;
      goto LABEL_867;
    case 0x24:
      v792 = *((_DWORD *)a2 + 3);
      if (!v792)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3C74);
      }
      if (v792 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3C7CLL);
      }
      if (v792 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4204);
      }
      JSC::MacroAssemblerARM64::div64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x25:
      v730 = *((_DWORD *)a2 + 3);
      if (!v730)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3A84);
      }
      if (v730 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3A8CLL);
      }
      if (v730 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3A94);
      }
      v1377 = (((*a2)[12] << 16) + 2031616) & 0x1F0000 | (32 * (*a2)[4] + 992) & 0x3E0 | ((*a2)[20] - 1) & 0x1F;
      v1378 = -1698691072;
      goto LABEL_867;
    case 0x26:
      if (*((_DWORD *)a2 + 3) != 3)
        goto LABEL_1006;
      v201 = *a2;
      if (*((_BYTE *)*a2 + 8) != 1 || *((_BYTE *)v201 + 40) != 1)
        goto LABEL_1006;
      v202 = ~v201[4];
      v203 = ~v201[12];
      v204 = ~v201[20];
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v205 = (char)v204;
      v122 = (32 * (char)v202) | ((char)v203 << 16);
      v206 = 2048;
LABEL_249:
      v123 = v205 | v206 | 0x1E600000;
      goto LABEL_171;
    case 0x27:
      if (*((_DWORD *)a2 + 3) != 3)
        goto LABEL_1006;
      v694 = *a2;
      if (*((_BYTE *)*a2 + 8) != 1 || *((_BYTE *)v694 + 40) != 1)
        goto LABEL_1006;
      v695 = ~v694[4];
      v696 = ~v694[12];
      v635 = (char)~*((_BYTE *)v694 + 80);
      v634 = (32 * (char)v695) | ((char)v696 << 16);
      v636 = 505415680;
      goto LABEL_810;
    case 0x28:
      if (*((_DWORD *)a2 + 3) != 3)
        goto LABEL_1006;
      v444 = ~(*a2)[4];
      v445 = ~(*a2)[12];
      v446 = ~(*a2)[20];
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v140 = (32 * (char)v444) | ((char)v445 << 16) | (char)v446 | 0x1E600800 | 0x1000;
      goto LABEL_172;
    case 0x29:
      if (*((_DWORD *)a2 + 3) != 3)
        goto LABEL_1006;
      JSC::MacroAssemblerARM64::divFloat((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x30:
      v1304 = *((_DWORD *)a2 + 3);
      if (!v1304)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4FE4);
      }
      v1305 = *a2;
      v1306 = *((char *)*a2 + 8);
      if ((v1306 - 9) >= 2 && v1306 != 7)
        goto LABEL_1006;
      if (*((_BYTE *)*a2 + 8) == 6)
        v88 = 0;
      else
        v88 = *v1305;
      if (v1304 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C500CLL);
      }
      v89 = (char)(*((_BYTE *)v1305 + 16) - 1);
      v90 = (char)(*((_BYTE *)v1305 + 48) - 1);
      v91 = a3;
      goto LABEL_100;
    case 0x31:
      v1308 = *((_DWORD *)a2 + 3);
      if (!v1308)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4FECLL);
      }
      v1309 = *a2;
      v1310 = *((char *)*a2 + 8);
      if ((v1310 - 9) >= 2 && v1310 != 7)
        goto LABEL_1006;
      if (*((_BYTE *)*a2 + 8) == 6)
        v67 = 0;
      else
        v67 = *v1309;
      if (v1308 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C5014);
      }
      v68 = (char)(*((_BYTE *)v1309 + 16) - 1);
      v69 = (char)(*((_BYTE *)v1309 + 48) - 1);
      v70 = a3;
      goto LABEL_80;
    case 0x32:
      v145 = *((_DWORD *)a2 + 3);
      if (v145 != 3)
      {
        if (v145 == 2)
        {
          v751 = *a2;
          if (*((_BYTE *)*a2 + 8) == 1 && *((_BYTE *)v751 + 40) == 1)
          {
            JSC::MacroAssemblerARM64::and32((_DWORD *)a3, (char)(*((_BYTE *)v751 + 16) - 1), (char)(*((_BYTE *)v751 + 48) - 1), a4, a5, a6, a7, a8);
            goto LABEL_24;
          }
        }
        goto LABEL_1006;
      }
      v146 = *a2;
      v147 = *((char *)*a2 + 8);
      if (v147 == 4)
      {
        v148 = *v146;
        v149 = *((_BYTE *)v146 + 48) - 1;
        v150 = (char)(*((_BYTE *)v146 + 80) - 1);
        v151 = a3;
LABEL_182:
        JSC::MacroAssemblerARM64::and32(v151, (JSC::ARM64LogicalImmediate *)v148, v149, v150);
        goto LABEL_24;
      }
      if (v147 != 1 || *((_BYTE *)v146 + 40) != 1)
        goto LABEL_1006;
      v303 = v146[4];
      v304 = v146[12];
      v305 = v146[20] + 31;
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v122 = ((v304 << 16) + 2031616) & 0x1F0000 | (32 * (_WORD)v303 + 992) & 0x3E0 | v305 & 0x1F;
      v123 = 167772160;
      goto LABEL_171;
    case 0x33:
      if (*((_DWORD *)a2 + 3) != 3)
        goto LABEL_1006;
      v98 = *a2;
      v99 = *((char *)*a2 + 8);
      if (v99 == 5)
      {
        JSC::MacroAssemblerARM64::and64(a3, *(JSC::ARM64LogicalImmediate **)v98, *((_BYTE *)v98 + 48) - 1, (char)(*((_BYTE *)v98 + 80) - 1));
        goto LABEL_24;
      }
      if (v99 != 1)
        goto LABEL_1006;
      v364 = v98[4];
      v365 = v98[12];
      v366 = v98[20] + 31;
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v122 = ((v365 << 16) + 2031616) & 0x1F0000 | (32 * (_WORD)v364 + 992) & 0x3E0 | v366 & 0x1F;
      v123 = -1979711488;
      goto LABEL_171;
    case 0x34:
      if (*((_DWORD *)a2 + 3) == 3)
        goto LABEL_831;
      goto LABEL_1006;
    case 0x35:
      if (*((_DWORD *)a2 + 3) != 3)
        goto LABEL_1006;
LABEL_831:
      JSC::MacroAssemblerARM64::andDouble((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x36:
      if (*((_DWORD *)a2 + 3) == 3)
        goto LABEL_852;
      goto LABEL_1006;
    case 0x37:
      if (*((_DWORD *)a2 + 3) != 3)
        goto LABEL_1006;
LABEL_852:
      JSC::MacroAssemblerARM64::orDouble((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x3A:
      if (*((_DWORD *)a2 + 3) != 3)
        goto LABEL_1006;
      v371 = *a2;
      v372 = *((char *)*a2 + 40);
      if (v372 == 2)
      {
        v373 = v371[4];
        v374 = v371[8];
        v375 = v371[20] + 31;
        v121 = *(_DWORD *)(a3 + 200);
        if (v121 + 4 > *(_DWORD *)(a3 + 192))
        {
          result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
          v121 = *(_DWORD *)(a3 + 200);
        }
        v140 = ((-65536 * v374) & 0x1F0000 | (32 * (_WORD)v373 + 992) & 0x3E0 | ((v374 & 0x1F) << 10) | v375 & 0x1F) ^ 0x53007C00;
      }
      else
      {
        if (v372 != 1)
          goto LABEL_1006;
        v492 = v371[4];
        v493 = v371[12];
        v494 = v371[20] + 31;
        v121 = *(_DWORD *)(a3 + 200);
        if (v121 + 4 > *(_DWORD *)(a3 + 192))
        {
          result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
          v121 = *(_DWORD *)(a3 + 200);
        }
        v122 = ((v493 << 16) + 2031616) & 0x1F0000 | (32 * (_WORD)v492 + 992) & 0x3E0 | v494 & 0x1F;
        v123 = 448798720;
LABEL_171:
        v140 = v122 | v123;
      }
LABEL_172:
      *(_DWORD *)(*(_QWORD *)(a3 + 56) + v121) = v140;
LABEL_96:
      *(_DWORD *)(a3 + 200) += 4;
      goto LABEL_24;
    case 0x3B:
      if (*((_DWORD *)a2 + 3) != 3)
        goto LABEL_1006;
      v198 = *a2;
      v199 = *((char *)*a2 + 40);
      if (v199 == 2)
      {
        JSC::MacroAssemblerARM64::lshift64((_DWORD *)a3, (char)(*((_BYTE *)v198 + 16) - 1), v198[8], (char)(*((_BYTE *)v198 + 80) - 1), a5, a6, a7, a8);
        goto LABEL_24;
      }
      if (v199 == 1)
      {
        JSC::MacroAssemblerARM64::lshift64((_DWORD *)a3, (char)(*((_BYTE *)v198 + 16) - 1), (char)(*((_BYTE *)v198 + 48) - 1), (char)(*((_BYTE *)v198 + 80) - 1), a5, a6, a7, a8);
        goto LABEL_24;
      }
      goto LABEL_1006;
    case 0x3C:
      if (*((_DWORD *)a2 + 3) != 3)
        goto LABEL_1006;
      v256 = *a2;
      v257 = *((char *)*a2 + 40);
      if (v257 != 2)
      {
        if (v257 == 1)
        {
          JSC::MacroAssemblerARM64::rshift32((_DWORD *)a3, (char)(*((_BYTE *)v256 + 16) - 1), (char)(*((_BYTE *)v256 + 48) - 1), (char)(*((_BYTE *)v256 + 80) - 1), a5, a6, a7, a8);
          goto LABEL_24;
        }
        goto LABEL_1006;
      }
      v258 = v256[4];
      v259 = v256[8];
      v260 = v256[20] + 31;
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v261 = (32 * (_WORD)v258 + 992) & 0x3E0 | ((v259 & 0x1F) << 16) | v260 & 0x1F;
      v262 = 318774272;
LABEL_296:
      v140 = v261 | v262 | 0x6000;
      goto LABEL_172;
    case 0x3D:
      if (*((_DWORD *)a2 + 3) != 3)
        goto LABEL_1006;
      v618 = *a2;
      v619 = *((char *)*a2 + 40);
      if (v619 == 2)
      {
        JSC::MacroAssemblerARM64::rshift64((_DWORD *)a3, (char)(*((_BYTE *)v618 + 16) - 1), v618[8], (char)(*((_BYTE *)v618 + 80) - 1), a5, a6, a7, a8);
        goto LABEL_24;
      }
      if (v619 == 1)
      {
        JSC::MacroAssemblerARM64::rshift64((_DWORD *)a3, (char)(*((_BYTE *)v618 + 16) - 1), (char)(*((_BYTE *)v618 + 48) - 1), (char)(*((_BYTE *)v618 + 80) - 1), a5, a6, a7, a8);
        goto LABEL_24;
      }
      goto LABEL_1006;
    case 0x3E:
      if (*((_DWORD *)a2 + 3) != 3)
        goto LABEL_1006;
      v397 = *a2;
      v398 = *((char *)*a2 + 40);
      if (v398 != 2)
      {
        if (v398 == 1)
        {
          JSC::MacroAssemblerARM64::urshift32((_DWORD *)a3, (char)(*((_BYTE *)v397 + 16) - 1), (char)(*((_BYTE *)v397 + 48) - 1), (char)(*((_BYTE *)v397 + 80) - 1), a5, a6, a7, a8);
          goto LABEL_24;
        }
        goto LABEL_1006;
      }
      v399 = v397[4];
      v400 = v397[8];
      v401 = v397[20] + 31;
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v122 = (32 * (_WORD)v399 + 992) & 0x3E0 | ((v400 & 0x1F) << 16) | v401 & 0x1F;
      v123 = 1392540672;
      goto LABEL_171;
    case 0x3F:
      if (*((_DWORD *)a2 + 3) != 3)
        goto LABEL_1006;
      v395 = *a2;
      v396 = *((char *)*a2 + 40);
      if (v396 == 2)
      {
        JSC::MacroAssemblerARM64::urshift64((_DWORD *)a3, (char)(*((_BYTE *)v395 + 16) - 1), v395[8], (char)(*((_BYTE *)v395 + 80) - 1), a5, a6, a7, a8);
        goto LABEL_24;
      }
      if (v396 == 1)
      {
        JSC::MacroAssemblerARM64::urshift64((_DWORD *)a3, (char)(*((_BYTE *)v395 + 16) - 1), (char)(*((_BYTE *)v395 + 48) - 1), (char)(*((_BYTE *)v395 + 80) - 1), a5, a6, a7, a8);
        goto LABEL_24;
      }
      goto LABEL_1006;
    case 0x40:
      if (*((_DWORD *)a2 + 3) != 3)
        goto LABEL_1006;
      v776 = *a2;
      v777 = *((char *)*a2 + 40);
      if (v777 == 2)
      {
        JSC::MacroAssemblerARM64::rotateRight32((_DWORD *)a3, (char)(*((_BYTE *)v776 + 16) - 1), v776[8], (char)(*((_BYTE *)v776 + 80) - 1), a5, a6, a7, a8);
        goto LABEL_24;
      }
      if (v777 != 1)
        goto LABEL_1006;
      JSC::MacroAssemblerARM64::rotateRight32((_DWORD *)a3, (char)(*((_BYTE *)v776 + 16) - 1), (char)(*((_BYTE *)v776 + 48) - 1), (char)(*((_BYTE *)v776 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x41:
      if (*((_DWORD *)a2 + 3) != 3)
        goto LABEL_1006;
      v778 = *a2;
      v779 = *((char *)*a2 + 40);
      if (v779 == 2)
      {
        JSC::MacroAssemblerARM64::rotateRight64((_DWORD *)a3, (char)(*((_BYTE *)v778 + 16) - 1), v778[8], (char)(*((_BYTE *)v778 + 80) - 1), a5, a6, a7, a8);
        goto LABEL_24;
      }
      if (v779 != 1)
        goto LABEL_1006;
      JSC::MacroAssemblerARM64::rotateRight64((_DWORD *)a3, (char)(*((_BYTE *)v778 + 16) - 1), (char)(*((_BYTE *)v778 + 48) - 1), (char)(*((_BYTE *)v778 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x42:
      if (!*((_DWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980BD338);
      }
      goto LABEL_1006;
    case 0x43:
      if (!*((_DWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980BD348);
      }
      goto LABEL_1006;
    case 0x44:
      v214 = *((_DWORD *)a2 + 3);
      if (v214 != 3)
      {
        if (v214 == 2)
        {
          v754 = *a2;
          if (*((_BYTE *)*a2 + 8) == 1 && *((_BYTE *)v754 + 40) == 1)
          {
            JSC::MacroAssemblerARM64::or32((_DWORD *)a3, (char)(*((_BYTE *)v754 + 16) - 1), (char)(*((_BYTE *)v754 + 48) - 1), a4, a5, a6, a7, a8);
            goto LABEL_24;
          }
        }
        goto LABEL_1006;
      }
      v215 = *a2;
      v216 = *((char *)*a2 + 8);
      if (v216 == 4)
      {
        JSC::MacroAssemblerARM64::or32(a3, (JSC::ARM64LogicalImmediate *)*v215, *((_BYTE *)v215 + 48) - 1, (char)(*((_BYTE *)v215 + 80) - 1));
        goto LABEL_24;
      }
      if (v216 != 1 || *((_BYTE *)v215 + 40) != 1)
        goto LABEL_1006;
      v356 = v215[4];
      v357 = v215[12];
      v358 = v215[20] + 31;
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v122 = ((v357 << 16) + 2031616) & 0x1F0000 | (32 * (_WORD)v356 + 992) & 0x3E0 | v358 & 0x1F;
      v123 = 704643072;
      goto LABEL_171;
    case 0x45:
      v184 = *((_DWORD *)a2 + 3);
      if (v184 != 3)
      {
        if (v184 == 2)
        {
          v753 = *a2;
          if (*((_BYTE *)*a2 + 8) == 1 && *((_BYTE *)v753 + 40) == 1)
          {
            JSC::MacroAssemblerARM64::or64((_DWORD *)a3, (char)(*((_BYTE *)v753 + 16) - 1), (char)(*((_BYTE *)v753 + 48) - 1), a4, a5, a6, a7, a8);
            goto LABEL_24;
          }
        }
        goto LABEL_1006;
      }
      v185 = *a2;
      v186 = *((char *)*a2 + 8);
      if (v186 == 5)
      {
        JSC::MacroAssemblerARM64::or64(a3, *(JSC::ARM64LogicalImmediate **)v185, *((_BYTE *)v185 + 48) - 1, (char)(*((_BYTE *)v185 + 80) - 1));
        goto LABEL_24;
      }
      if (v186 != 1)
        goto LABEL_1006;
      v328 = v185[4];
      v329 = v185[12];
      v330 = v185[20] + 31;
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v122 = ((v329 << 16) + 2031616) & 0x1F0000 | (32 * (_WORD)v328 + 992) & 0x3E0 | v330 & 0x1F;
      v123 = -1442840576;
      goto LABEL_171;
    case 0x46:
      v447 = *((_DWORD *)a2 + 3);
      if (v447 != 3)
      {
        if (v447 == 2)
        {
          v770 = *a2;
          if (*((_BYTE *)*a2 + 8) == 1 && *((_BYTE *)v770 + 40) == 1)
          {
            JSC::MacroAssemblerARM64::xor32((_DWORD *)a3, (char)(*((_BYTE *)v770 + 16) - 1), (char)(*((_BYTE *)v770 + 48) - 1), a4, a5, a6, a7, a8);
            goto LABEL_24;
          }
        }
        goto LABEL_1006;
      }
      v448 = *a2;
      v449 = *((char *)*a2 + 8);
      if (v449 != 1)
      {
        if (v449 == 4)
        {
          JSC::MacroAssemblerARM64::xor32(a3, (JSC::ARM64LogicalImmediate *)*v448, (char)(*((_BYTE *)v448 + 48) - 1), (char)(*((_BYTE *)v448 + 80) - 1), a5, a6, a7, a8);
          goto LABEL_24;
        }
        goto LABEL_1006;
      }
      if (*((_BYTE *)v448 + 40) != 1)
        goto LABEL_1006;
      v450 = v448[4];
      v451 = v448[12];
      v452 = v448[20] + 31;
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v122 = ((v451 << 16) + 2031616) & 0x1F0000 | (32 * (_WORD)v450 + 992) & 0x3E0 | v452 & 0x1F;
      v123 = 1241513984;
      goto LABEL_171;
    case 0x47:
      v160 = *((_DWORD *)a2 + 3);
      if (v160 == 3)
      {
        v161 = *a2;
        v162 = *((char *)*a2 + 8);
        if (v162 == 5)
        {
          JSC::MacroAssemblerARM64::xor64(a3, *(JSC::ARM64LogicalImmediate **)v161, (char)(*((_BYTE *)v161 + 48) - 1), (char)(*((_BYTE *)v161 + 80) - 1), a5, a6, a7, a8);
          goto LABEL_24;
        }
        if (v162 == 1)
        {
          JSC::MacroAssemblerARM64::xor64((_DWORD *)a3, (char)(*((_BYTE *)v161 + 16) - 1), (char)(*((_BYTE *)v161 + 48) - 1), (char)(*((_BYTE *)v161 + 80) - 1), a5, a6, a7, a8);
          goto LABEL_24;
        }
      }
      else if (v160 == 2)
      {
        v752 = *a2;
        if (*((_BYTE *)*a2 + 8) == 1 && *((_BYTE *)v752 + 40) == 1)
        {
          JSC::MacroAssemblerARM64::xor64((_DWORD *)a3, (char)(*((_BYTE *)v752 + 16) - 1), (char)(*((_BYTE *)v752 + 48) - 1), a4, a5, a6, a7, a8);
          goto LABEL_24;
        }
      }
      goto LABEL_1006;
    case 0x48:
      if (*((_DWORD *)a2 + 3) != 2)
        goto LABEL_1006;
      v591 = (*a2)[4];
      v592 = (*a2)[12] + 31;
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v122 = ((v591 << 16) + 2031616) & 0x1F0000 | v592 & 0x1F;
      v123 = 706741216;
      goto LABEL_171;
    case 0x49:
      if (*((_DWORD *)a2 + 3) != 2)
        goto LABEL_1006;
      v276 = (*a2)[4];
      v277 = (*a2)[12] + 31;
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v122 = ((v276 << 16) + 2031616) & 0x1F0000 | v277 & 0x1F;
      v123 = -1440742432;
      goto LABEL_171;
    case 0x4A:
      v654 = *((_DWORD *)a2 + 3);
      if (v654 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C384CLL);
      }
      if (!v654)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3854);
      }
      JSC::MacroAssemblerARM64::absDouble((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x4B:
      v775 = *((_DWORD *)a2 + 3);
      if (v775 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3B34);
      }
      if (!v775)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3B3CLL);
      }
      JSC::MacroAssemblerARM64::absFloat((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x4C:
      v617 = *((_DWORD *)a2 + 3);
      if (!v617)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3754);
      }
      if (*((_BYTE *)*a2 + 8) != 1)
        goto LABEL_1006;
      if (v617 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C377CLL);
      }
      JSC::MacroAssemblerARM64::ceilDouble((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x4D:
      v780 = *((_DWORD *)a2 + 3);
      if (!v780)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3B44);
      }
      if (*((_BYTE *)*a2 + 8) != 1)
        goto LABEL_1006;
      if (v780 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3BF4);
      }
      JSC::MacroAssemblerARM64::ceilFloat((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x4E:
      v658 = *((_DWORD *)a2 + 3);
      if (!v658)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C38A4);
      }
      if (*((_BYTE *)*a2 + 8) != 1)
        goto LABEL_1006;
      if (v658 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C38C4);
      }
      JSC::MacroAssemblerARM64::floorDouble((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x4F:
      v789 = *((_DWORD *)a2 + 3);
      if (!v789)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3C3CLL);
      }
      if (*((_BYTE *)*a2 + 8) != 1)
        goto LABEL_1006;
      if (v789 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C41ECLL);
      }
      JSC::MacroAssemblerARM64::floorFloat((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x50:
      v603 = *((_DWORD *)a2 + 3);
      if (!v603)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3684);
      }
      if (*((_BYTE *)*a2 + 8) != 1)
        goto LABEL_1006;
      if (v603 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C36A4);
      }
      JSC::MacroAssemblerARM64::sqrtDouble((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x51:
      v807 = *((_DWORD *)a2 + 3);
      if (!v807)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3D44);
      }
      if (*((_BYTE *)*a2 + 8) != 1)
        goto LABEL_1006;
      if (v807 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4244);
      }
      JSC::MacroAssemblerARM64::sqrtFloat((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x52:
      v134 = *((_DWORD *)a2 + 3);
      if (!v134)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C32CCLL);
      }
      v135 = *a2;
      if (*((_BYTE *)*a2 + 8) != 1)
        goto LABEL_1006;
      if (v134 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C32D4);
      }
      v136 = v135[4];
      v137 = ~v135[12];
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v122 = (32 * (_WORD)v136 + 992) & 0x3E0;
      v138 = (char)v137;
      v139 = 509739008;
      goto LABEL_170;
    case 0x53:
      v605 = *((_DWORD *)a2 + 3);
      if (!v605)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C369CLL);
      }
      if (*((_BYTE *)*a2 + 8) != 1)
        goto LABEL_1006;
      if (v605 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C36CCLL);
      }
      JSC::MacroAssemblerARM64::convertInt64ToDouble((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)~*((_BYTE *)*a2 + 48), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x54:
      v632 = *((_DWORD *)a2 + 3);
      if (!v632)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C37ACLL);
      }
      v633 = *a2;
      if (*((_BYTE *)*a2 + 8) != 1)
        goto LABEL_1006;
      if (v632 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C37C4);
      }
      v634 = (32 * (unsigned __int16)v633[4] + 992) & 0x3E0;
      v635 = (char)~*((_BYTE *)v633 + 48);
      v636 = 505544704;
      goto LABEL_810;
    case 0x55:
      v699 = *((_DWORD *)a2 + 3);
      if (!v699)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3984);
      }
      v700 = *a2;
      if (*((_BYTE *)*a2 + 8) != 1)
        goto LABEL_1006;
      if (v699 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C39E4);
      }
      v634 = (32 * (unsigned __int16)v700[4] + 992) & 0x3E0;
      v635 = (char)~*((_BYTE *)v700 + 48);
      v636 = -1641938944;
LABEL_810:
      v637 = v635 | v636;
      goto LABEL_811;
    case 0x56:
      v1312 = *((_DWORD *)a2 + 3);
      if (!v1312)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4FF4);
      }
      if (*((_BYTE *)*a2 + 8) != 1)
        goto LABEL_1006;
      if (v1312 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C501CLL);
      }
      JSC::MacroAssemblerARM64::countLeadingZeros32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x57:
      v1313 = *((_DWORD *)a2 + 3);
      if (!v1313)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4FFCLL);
      }
      if (*((_BYTE *)*a2 + 8) != 1)
        goto LABEL_1006;
      if (v1313 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C5024);
      }
      JSC::MacroAssemblerARM64::countLeadingZeros64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x58:
      v478 = *((_DWORD *)a2 + 3);
      if (!v478)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3544);
      }
      v479 = *a2;
      if (*((_BYTE *)*a2 + 8) != 1)
        goto LABEL_1006;
      if (v478 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C354CLL);
      }
      v480 = ~v479[4];
      v481 = ~v479[12];
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v122 = (char)v481 | (32 * (char)v480);
      v123 = 509755392;
      goto LABEL_171;
    case 0x59:
      v367 = *((_DWORD *)a2 + 3);
      if (!v367)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3418);
      }
      v368 = *a2;
      if (*((_BYTE *)*a2 + 8) != 1)
        goto LABEL_1006;
      if (v367 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3420);
      }
      v369 = ~v368[4];
      v370 = ~v368[12];
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v122 = (char)v370 | (32 * (char)v369);
      v123 = 505593856;
      goto LABEL_171;
    case 0x5A:
      v13 = *((_DWORD *)a2 + 3);
      if (v13 != 2)
      {
        if (v13 != 3)
          goto LABEL_1006;
        v666 = *a2;
        if (*((_BYTE *)*a2 + 8) == 6)
          v667 = 0;
        else
          v667 = *(_QWORD *)v666 << 32;
        v668 = v667 | (v666[4] - 1);
        if (*((_BYTE *)v666 + 40) == 6)
          v669 = 0;
        else
          v669 = *((_QWORD *)v666 + 4) << 32;
        v670 = v669 | (v666[12] - 1);
        v671 = (char)(*((_BYTE *)v666 + 80) - 1);
        JSC::MacroAssemblerARM64::load64(a3, v668, v671, a4, a5, a6, a7, a8);
        v18 = a3;
        v17 = v671;
        v16 = v670;
        goto LABEL_9;
      }
      v14 = *a2;
      switch(*((_BYTE *)*a2 + 8))
      {
        case 1:
          switch(*((_BYTE *)v14 + 40))
          {
            case 1:
              v33 = *((unsigned __int8 *)v14 + 16);
              v34 = *((unsigned __int8 *)v14 + 48);
              if (v33 == v34)
                goto LABEL_24;
              v35 = v33 - 1;
              v36 = v34 - 1;
              if (v35 == 63)
              {
                if (v36 != 31)
                  goto LABEL_114;
              }
              else if (v35 != 31 && v36 != 31)
              {
                v37 = v36 & 0x1F | ((v35 & 0x1F) << 16) | 0xAA0003E0;
                goto LABEL_37;
              }
              v384 = v36 | (32 * v35);
              v385 = -1862270976;
              break;
            case 7:
            case 9:
            case 0xA:
              if (*((_BYTE *)v14 + 40) == 6)
                v15 = 0;
              else
                v15 = *((_QWORD *)v14 + 4) << 32;
              v16 = v15 | (v14[12] - 1);
              v17 = (char)(*((_BYTE *)v14 + 16) - 1);
              goto LABEL_8;
            case 0xB:
              HIDWORD(v212) = v14[11];
              LODWORD(v212) = HIDWORD(v212) - 2;
              v211 = v212 >> 1;
              if (v211 > 7)
                v213 = 0;
              else
                v213 = qword_199152B88[v211];
              v341 = v213 | (((unsigned __int16)v14[13] << 8) - 256) & 0xFF00 | (v14[12] - 1);
              v342 = v14[8] | ((unint64_t)*((unsigned __int8 *)v14 + 41) << 32);
              v343 = *((_BYTE *)v14 + 16) - 1;
              v344 = a3;
              goto LABEL_398;
            default:
              goto LABEL_1006;
          }
          goto LABEL_701;
        case 2:
          if (*((_BYTE *)v14 + 40) != 1)
            goto LABEL_1006;
          v27 = *v14;
LABEL_23:
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a3, v27, (char)(*((_BYTE *)v14 + 48) - 1), a4, a5, a6, a7, a8);
          goto LABEL_24;
        case 3:
          v27 = *(_QWORD *)v14;
          goto LABEL_23;
        case 7:
        case 9:
        case 0xA:
          if (*((_BYTE *)*a2 + 8) == 6)
            v19 = 0;
          else
            v19 = *(_QWORD *)v14 << 32;
          v20 = v19 | (v14[4] - 1);
          v21 = *((_BYTE *)v14 + 48);
          goto LABEL_15;
        case 0xB:
          HIDWORD(v108) = v14[3];
          LODWORD(v108) = HIDWORD(v108) - 2;
          v107 = v108 >> 1;
          if (v107 > 7)
            v109 = 0;
          else
            v109 = qword_199152B88[v107];
          v170 = v109 | (((unsigned __int16)v14[5] << 8) - 256) & 0xFF00 | (v14[4] - 1);
          v171 = *v14 | ((unint64_t)*((unsigned __int8 *)v14 + 9) << 32);
          v172 = (char)(*((_BYTE *)v14 + 48) - 1);
          v173 = a3;
          goto LABEL_209;
        case 0x14:
          v96 = *((char *)v14 + 40);
          if (v96 == 1)
          {
            v97 = v14[12];
            if (v97 == 64)
              goto LABEL_24;
            if (v97 == 32)
            {
              v37 = -1862268929;
            }
            else
            {
              v36 = v97 - 1;
LABEL_114:
              v37 = v36 & 0x1F | 0xD2800000;
            }
            goto LABEL_37;
          }
          v158 = (JSC::B3::Air::Arg *)(v14 + 8);
          if (v96 != 7)
          {
            if (v96 == 11)
            {
              v341 = JSC::B3::Air::Arg::asBaseIndex(v158);
              v342 = v610;
              v344 = a3;
              v343 = 63;
LABEL_398:
              JSC::MacroAssemblerARM64::store64(v344, v343, v341, v342, a5, a6, a7, a8);
              goto LABEL_24;
            }
            if ((v96 - 9) >= 2)
              goto LABEL_1006;
          }
          if (*((_BYTE *)v14 + 40) == 6)
            v159 = 0;
          else
            v159 = *(_QWORD *)v158 << 32;
          v16 = v159 | (v14[12] - 1);
          break;
        default:
          goto LABEL_1006;
      }
      goto LABEL_192;
    case 0x5B:
      if (*((_DWORD *)a2 + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BDAD4);
      }
      goto LABEL_1006;
    case 0x5C:
      if (*((_DWORD *)a2 + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BDAE8);
      }
      goto LABEL_1006;
    case 0x5D:
      v736 = *((_DWORD *)a2 + 3);
      if (!v736)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3AA4);
      }
      v737 = *a2;
      v738 = *((char *)*a2 + 8);
      v739 = *((unsigned __int8 *)*a2 + 8);
      switch(v738)
      {
        case 12:
          if (v739 == 9)
            v1343 = v737[3];
          else
            v1343 = *v737;
          if (v736 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C505CLL);
          }
          JSC::MacroAssemblerARM64::load64((_DWORD *)a3, (v737[4] - 1) | (unint64_t)(v1343 << 32), (char)(*((_BYTE *)v737 + 48) - 1), a4, a5, a6, a7, a8);
          goto LABEL_24;
        case 1:
          if (v736 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C512CLL);
          }
          v1346 = *((char *)v737 + 40);
          v1347 = *((unsigned __int8 *)v737 + 40);
          if (v1346 == 13)
          {
            v1360 = *((_BYTE *)v737 + 16) - 1;
            v1361 = v737[12];
            if (v1347 == 9)
              v1362 = v737[11];
            else
              v1362 = v737[8];
            JSC::MacroAssemblerARM64::store64((_DWORD *)a3, v1360, (v1361 - 1) | (unint64_t)(v1362 << 32), a4, a5, a6, a7, a8);
            goto LABEL_24;
          }
          if (v1346 == 12)
          {
            v1348 = *((_BYTE *)v737 + 16) - 1;
            v1349 = v737[12];
            if (v1347 == 9)
              v1350 = v737[11];
            else
              v1350 = v737[8];
            JSC::MacroAssemblerARM64::store64((_DWORD *)a3, v1348, (v1349 - 1) | (unint64_t)(v1350 << 32), a4, a5, a6, a7, a8);
            goto LABEL_24;
          }
          break;
        case 13:
          if (v739 == 9)
            v740 = v737[3];
          else
            v740 = *v737;
          if (v736 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C5124);
          }
          JSC::MacroAssemblerARM64::load64((_DWORD *)a3, (v737[4] - 1) | (unint64_t)(v740 << 32), (char)(*((_BYTE *)v737 + 48) - 1), a4, a5, a6, a7, a8);
          goto LABEL_24;
      }
      goto LABEL_1006;
    case 0x5E:
      v22 = *((_DWORD *)a2 + 3);
      if (v22 != 2)
      {
        if (v22 != 3)
          goto LABEL_1006;
        v717 = *a2;
        if (*((_BYTE *)*a2 + 8) == 6)
          v718 = 0;
        else
          v718 = *(_QWORD *)v717 << 32;
        v719 = v718 | (v717[4] - 1);
        if (*((_BYTE *)v717 + 40) == 6)
          v720 = 0;
        else
          v720 = *((_QWORD *)v717 + 4) << 32;
        v721 = v720 | (v717[12] - 1);
        v722 = (char)(*((_BYTE *)v717 + 80) - 1);
        JSC::MacroAssemblerARM64::load32(a3, v719, v722, a4, a5, a6, a7, a8);
        v50 = a3;
        v49 = v722;
        v48 = v721;
        goto LABEL_50;
      }
      v23 = *a2;
      switch(*((_BYTE *)*a2 + 8))
      {
        case 1:
          v46 = *((char *)v23 + 40);
          if (v46 == 7)
            goto LABEL_47;
          if (v46 != 1)
          {
            if (v46 == 11)
            {
              HIDWORD(v181) = v23[11];
              LODWORD(v181) = HIDWORD(v181) - 2;
              v180 = v181 >> 1;
              if (v180 > 7)
                v182 = 0;
              else
                v182 = qword_199152B88[v180];
              v292 = v182 | (((unsigned __int16)v23[13] << 8) - 256) & 0xFF00 | (v23[12] - 1);
              v293 = v23[8] | ((unint64_t)*((unsigned __int8 *)v23 + 41) << 32);
              v294 = *((_BYTE *)v23 + 16) - 1;
              v295 = a3;
LABEL_338:
              JSC::MacroAssemblerARM64::store32(v295, v294, v292, v293, a5, a6, a7, a8);
              goto LABEL_24;
            }
            if ((v46 - 9) >= 2)
              goto LABEL_1006;
LABEL_47:
            if (*((_BYTE *)v23 + 40) == 6)
              v47 = 0;
            else
              v47 = *((_QWORD *)v23 + 4) << 32;
            v48 = v47 | (v23[12] - 1);
            v49 = (char)(*((_BYTE *)v23 + 16) - 1);
            v50 = a3;
LABEL_50:
            JSC::MacroAssemblerARM64::store32(v50, v49, v48, v10, a5, a6, a7, a8);
            goto LABEL_24;
          }
          JSC::MacroAssemblerARM64::and64(a3, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *((_BYTE *)v23 + 16) - 1, (char)(*((_BYTE *)v23 + 48) - 1));
          *(_DWORD *)a1 = -1;
LABEL_25:
          v28 = 0xFF000F4100000000;
LABEL_26:
          *(uint64_t *)((char *)a1 + 4) = v28;
          return result;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
          goto LABEL_1006;
        case 7:
        case 9:
        case 0xA:
          if (*((_BYTE *)*a2 + 8) == 6)
            v24 = 0;
          else
            v24 = *(_QWORD *)v23 << 32;
          v25 = v24 | (v23[4] - 1);
          v26 = *((_BYTE *)v23 + 48);
          goto LABEL_21;
        case 0xB:
          HIDWORD(v153) = v23[3];
          LODWORD(v153) = HIDWORD(v153) - 2;
          v152 = v153 >> 1;
          if (v152 > 7)
            v154 = 0;
          else
            v154 = qword_199152B88[v152];
          v207 = v154 | (((unsigned __int16)v23[5] << 8) - 256) & 0xFF00 | (v23[4] - 1);
          v208 = *v23 | ((unint64_t)*((unsigned __int8 *)v23 + 9) << 32);
          v209 = (char)(*((_BYTE *)v23 + 48) - 1);
          v210 = a3;
          goto LABEL_252;
        default:
          if (*((_BYTE *)*a2 + 8) != 20)
            goto LABEL_1006;
          v411 = *((char *)v23 + 40);
          if (v411 == 11)
          {
            HIDWORD(v413) = v23[11];
            LODWORD(v413) = HIDWORD(v413) - 2;
            v412 = v413 >> 1;
            if (v412 > 7)
              v414 = 0;
            else
              v414 = qword_199152B88[v412];
            v292 = v414 | (((unsigned __int16)v23[13] << 8) - 256) & 0xFF00 | (v23[12] - 1);
            v293 = v23[8] | ((unint64_t)*((unsigned __int8 *)v23 + 41) << 32);
            v295 = a3;
            v294 = 63;
            goto LABEL_338;
          }
          if (v411 != 7 && (v411 - 9) >= 2)
          {
            if (v411 == 1)
            {
              JSC::MacroAssemblerARM64::move((_DWORD *)a3, 63, (char)(*((_BYTE *)v23 + 48) - 1), a4, a5, a6, a7, a8);
              goto LABEL_24;
            }
            goto LABEL_1006;
          }
          if (*((_BYTE *)v23 + 40) == 6)
            v572 = 0;
          else
            v572 = *((_QWORD *)v23 + 4) << 32;
          v48 = v572 | (v23[12] - 1);
          v50 = a3;
          v49 = 63;
          goto LABEL_50;
      }
    case 0x5F:
      v320 = *((_DWORD *)a2 + 3);
      if (!v320)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C33C4);
      }
      v321 = *a2;
      v322 = *((char *)*a2 + 8);
      if (v322 != 1)
      {
        v733 = *((unsigned __int8 *)*a2 + 8);
        if (v322 == 13)
        {
          if (v733 == 9)
            v1314 = v321[3];
          else
            v1314 = *v321;
          if (v320 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C5044);
          }
          JSC::MacroAssemblerARM64::load32((_DWORD *)a3, (v321[4] - 1) | (unint64_t)(v1314 << 32), (char)(*((_BYTE *)v321 + 48) - 1), a4, a5, a6, a7, a8);
          goto LABEL_24;
        }
        if (v322 == 12)
        {
          if (v733 == 9)
            v734 = v321[3];
          else
            v734 = *v321;
          if (v320 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C503CLL);
          }
          JSC::MacroAssemblerARM64::load32((_DWORD *)a3, (v321[4] - 1) | (unint64_t)(v734 << 32), (char)(*((_BYTE *)v321 + 48) - 1), a4, a5, a6, a7, a8);
          goto LABEL_24;
        }
        goto LABEL_1006;
      }
      if (v320 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C33CCLL);
      }
      v323 = *((char *)v321 + 40);
      v324 = *((unsigned __int8 *)v321 + 40);
      if (v323 != 13)
      {
        if (v323 == 12)
        {
          v767 = *((_BYTE *)v321 + 16) - 1;
          v768 = v321[12];
          if (v324 == 9)
            v769 = v321[11];
          else
            v769 = v321[8];
          JSC::MacroAssemblerARM64::store32((_DWORD *)a3, v767, (v768 - 1) | (unint64_t)(v769 << 32), a4, a5, a6, a7, a8);
          goto LABEL_24;
        }
        goto LABEL_1006;
      }
      if (v324 == 9)
        v325 = v321[11];
      else
        v325 = v321[8];
      v326 = v321[4] + 31;
      v327 = v321[12];
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v140 = ((int)((v327 << 24) - 0x1000000) >> 19) & 0xFFFFFFE0 | v326 & 0x1F | ((v325 & 0x1FF) << 12) | 0xB8000400;
      goto LABEL_172;
    case 0x60:
      v1159 = *((_DWORD *)a2 + 3);
      if (!v1159)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4A34);
      }
      v1160 = *a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v1161 = 0;
      else
        v1161 = *v1160;
      if (v1159 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4EF4);
      }
      if (v1159 == 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4A3CLL);
      }
      JSC::MacroAssemblerARM64::loadPair32((_DWORD *)a3, (char)(v1160[4] - 1), v1161, (char)(*((_BYTE *)v1160 + 48) - 1), (char)(*((_BYTE *)v1160 + 80) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0x61:
      v1168 = *((_DWORD *)a2 + 3);
      if (!v1168)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4A5CLL);
      }
      v1169 = *a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v1170 = 0;
      else
        v1170 = *v1169;
      if (v1168 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4F0CLL);
      }
      if (v1168 == 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4A64);
      }
      JSC::MacroAssemblerARM64::loadPair64((_DWORD *)a3, (char)(v1169[4] - 1), v1170, (char)(*((_BYTE *)v1169 + 48) - 1), (char)(*((_BYTE *)v1169 + 80) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0x62:
      v238 = *((_DWORD *)a2 + 3);
      if (!v238)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C333CLL);
      }
      v239 = *a2;
      v240 = *((char *)*a2 + 8);
      if (v240 == 1)
      {
        if (v238 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C3344);
        }
        v241 = *((char *)v239 + 40);
        if (v241 == 1)
        {
          if (v238 <= 2)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C334CLL);
          }
          if (*((_BYTE *)v239 + 72) == 6)
            v242 = 0;
          else
            v242 = *((_QWORD *)v239 + 8) << 32;
          v243 = v242 | (v239[20] - 1);
          v244 = (char)(*((_BYTE *)v239 + 16) - 1);
          v245 = (char)(*((_BYTE *)v239 + 48) - 1);
          v246 = (_DWORD *)a3;
          goto LABEL_281;
        }
        if (v241 != 20)
          goto LABEL_1006;
        if (v238 <= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C5034);
        }
        if (*((_BYTE *)v239 + 72) == 6)
          v764 = 0;
        else
          v764 = *((_QWORD *)v239 + 8) << 32;
        v243 = v764 | (v239[20] - 1);
        v244 = (char)(*((_BYTE *)v239 + 16) - 1);
        v246 = (_DWORD *)a3;
      }
      else
      {
        if (v240 != 20)
          goto LABEL_1006;
        if (v238 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C502CLL);
        }
        v756 = *((char *)v239 + 40);
        if (v756 != 20)
        {
          if (v756 != 1)
            goto LABEL_1006;
          if (v238 <= 2)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C5114);
          }
          if (*((_BYTE *)v239 + 72) == 6)
            v757 = 0;
          else
            v757 = *((_QWORD *)v239 + 8) << 32;
          v243 = v757 | (v239[20] - 1);
          v245 = (char)(*((_BYTE *)v239 + 48) - 1);
          v246 = (_DWORD *)a3;
          v244 = 63;
LABEL_281:
          JSC::MacroAssemblerARM64::storePair32(v246, v244, v245, v243, a5, a6, a7, a8);
          goto LABEL_24;
        }
        if (v238 <= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C511CLL);
        }
        if (*((_BYTE *)v239 + 72) == 6)
          v1345 = 0;
        else
          v1345 = *((_QWORD *)v239 + 8) << 32;
        v243 = v1345 | (v239[20] - 1);
        v246 = (_DWORD *)a3;
        v244 = 63;
      }
      v245 = 63;
      goto LABEL_281;
    case 0x63:
      v71 = *((_DWORD *)a2 + 3);
      if (!v71)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C2FACLL);
      }
      v72 = *a2;
      v73 = *((char *)*a2 + 8);
      if (v73 == 1)
      {
        if (v71 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C2FCCLL);
        }
        v74 = *((char *)v72 + 40);
        if (v74 == 1)
        {
          if (v71 <= 2)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C2FD4);
          }
          if (*((_BYTE *)v72 + 72) == 6)
            v75 = 0;
          else
            v75 = *((_QWORD *)v72 + 8) << 32;
          v76 = v75 | (v72[20] - 1);
          v77 = (char)(*((_BYTE *)v72 + 16) - 1);
          v78 = (char)(*((_BYTE *)v72 + 48) - 1);
          v79 = (_DWORD *)a3;
        }
        else
        {
          if (v74 != 20)
            goto LABEL_1006;
          if (v71 <= 2)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C3714);
          }
          if (*((_BYTE *)v72 + 72) == 6)
            v609 = 0;
          else
            v609 = *((_QWORD *)v72 + 8) << 32;
          v76 = v609 | (v72[20] - 1);
          v77 = (char)(*((_BYTE *)v72 + 16) - 1);
          v79 = (_DWORD *)a3;
          v78 = 63;
        }
        JSC::MacroAssemblerARM64::storePair64(v79, v77, v78, v76, a5, a6, a7, a8);
LABEL_24:
        *(_DWORD *)a1 = -1;
        goto LABEL_25;
      }
      if (v73 != 20)
        goto LABEL_1006;
      if (v71 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C32ACLL);
      }
      v100 = *((char *)v72 + 40);
      if (v100 == 20)
      {
        if (v71 <= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C32DCLL);
        }
        if (*((_BYTE *)v72 + 72) == 6)
          v101 = 0;
        else
          v101 = *((_QWORD *)v72 + 8) << 32;
        v102 = v72[20] + 255;
        if ((v101 & 0x700000000) == 0 && (v101 >> 35) + 64 <= 0x7F)
        {
          v103 = (((v101 >> 35) & 0x7F) << 15) | (32 * (char)v102);
          v104 = 31775;
LABEL_139:
          v105 = v104 | 0xA9000000;
LABEL_140:
          v106 = v103 | v105;
LABEL_204:
          v169 = *(_DWORD *)(a3 + 200);
          if (v169 + 4 > *(_DWORD *)(a3 + 192))
          {
            result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
            v169 = *(_DWORD *)(a3 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a3 + 56) + v169) = v106;
          goto LABEL_96;
        }
        v183 = v102;
        JSC::MacroAssemblerARM64::store64(a3, 63, v101 | v102, a4, a5, a6, a7, a8);
        v16 = (v101 + 0x800000000) | v183;
LABEL_192:
        v18 = a3;
        v17 = 63;
      }
      else
      {
        if (v100 != 1)
          goto LABEL_1006;
        if (v71 <= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C33ACLL);
        }
        if (*((_BYTE *)v72 + 72) == 6)
          v278 = 0;
        else
          v278 = *((_QWORD *)v72 + 8) << 32;
        v279 = *((_BYTE *)v72 + 48) - 1;
        v280 = v72[20] + 255;
        if ((v278 & 0x700000000) == 0 && (v278 >> 35) + 64 <= 0x7F)
        {
          v103 = ((v279 & 0x1F) << 10) & 0x7FFF | (((v278 >> 35) & 0x7F) << 15) | (32 * (char)v280);
          v104 = 31;
          goto LABEL_139;
        }
        v394 = v280;
        JSC::MacroAssemblerARM64::store64(a3, 63, v278 | v280, a4, a5, a6, a7, a8);
        v16 = (v278 + 0x800000000) | v394;
        v17 = v279;
LABEL_8:
        v18 = a3;
      }
LABEL_9:
      JSC::MacroAssemblerARM64::store64(v18, v17, v16, v10, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x64:
      v743 = *((_DWORD *)a2 + 3);
      if (v743 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3AD4);
      }
      if (!v743)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3ADCLL);
      }
      v634 = (32 * *((_WORD *)*a2 + 8) + 992) & 0x3E0 | ((*a2)[12] - 1) & 0x1F;
      v637 = -1824515072;
      goto LABEL_811;
    case 0x65:
      v729 = *((_DWORD *)a2 + 3);
      if (v729 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3A74);
      }
      if (!v729)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3A7CLL);
      }
      v651 = (32 * *((_WORD *)*a2 + 8) + 992) & 0x3E0 | ((*a2)[12] - 1) & 0x1F;
      v652 = -1824515072;
      goto LABEL_845;
    case 0x66:
      v405 = *((_DWORD *)a2 + 3);
      if (!v405)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C34ACLL);
      }
      if (v405 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C34B4);
      }
      v406 = (*a2)[4];
      v407 = (*a2)[12] + 31;
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v261 = (32 * (_WORD)v406 + 992) & 0x3E0 | v407 & 0x1F;
      v262 = -1824515072;
      goto LABEL_296;
    case 0x67:
      v415 = *((_DWORD *)a2 + 3);
      if (!v415)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C34BCLL);
      }
      v416 = *a2;
      if (*((_BYTE *)*a2 + 8) != 1)
        goto LABEL_1006;
      if (v415 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C34C4);
      }
      v149 = *((_BYTE *)v416 + 16) - 1;
      v150 = (char)(*((_BYTE *)v416 + 48) - 1);
      v151 = a3;
      v148 = 255;
      goto LABEL_182;
    case 0x68:
      v678 = *((_DWORD *)a2 + 3);
      if (!v678)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C38ECLL);
      }
      if (*((_BYTE *)*a2 + 8) != 1)
        goto LABEL_1006;
      if (v678 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C393CLL);
      }
      v634 = (32 * (unsigned __int16)(*a2)[4] + 992) & 0x3E0 | ((*a2)[12] - 1) & 0x1F;
      v637 = 318774272;
LABEL_811:
      v614 = v634 | v637;
      goto LABEL_772;
    case 0x69:
      v423 = *((_DWORD *)a2 + 3);
      if (!v423)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C34D4);
      }
      v424 = *a2;
      if (*((_BYTE *)*a2 + 8) != 1)
        goto LABEL_1006;
      if (v423 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C34DCLL);
      }
      v149 = *((_BYTE *)v424 + 16) - 1;
      v150 = (char)(*((_BYTE *)v424 + 48) - 1);
      v151 = a3;
      v148 = 0xFFFFLL;
      goto LABEL_182;
    case 0x6A:
      v650 = *((_DWORD *)a2 + 3);
      if (!v650)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C381CLL);
      }
      if (*((_BYTE *)*a2 + 8) != 1)
        goto LABEL_1006;
      if (v650 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3864);
      }
      v651 = (32 * (unsigned __int16)(*a2)[4] + 992) & 0x3E0 | ((*a2)[12] - 1) & 0x1F;
      v652 = 318774272;
LABEL_845:
      v614 = v651 | v652 | 0x2000u;
      goto LABEL_772;
    case 0x6B:
      v287 = *((_DWORD *)a2 + 3);
      if (v287 == 2)
      {
        v288 = *a2;
        switch(*((_BYTE *)*a2 + 8))
        {
          case 1:
            v425 = *((char *)v288 + 40);
            if (v425 == 11)
            {
              HIDWORD(v427) = v288[11];
              LODWORD(v427) = HIDWORD(v427) - 2;
              v426 = v427 >> 1;
              if (v426 > 7)
                v428 = 0;
              else
                v428 = qword_199152B88[v426];
              JSC::MacroAssemblerARM64::storeFloat(a3, (char)~*((_BYTE *)v288 + 16), v428 | (((unsigned __int16)v288[13] << 8) - 256) & 0xFF00 | (v288[12] - 1), v288[8] | ((unint64_t)*((unsigned __int8 *)v288 + 41) << 32), a5, a6, a7, a8);
              goto LABEL_24;
            }
            if (v425 == 1)
            {
              JSC::MacroAssemblerARM64::moveDouble((_DWORD *)a3, (char)~*((_BYTE *)v288 + 16), (char)~*((_BYTE *)v288 + 48), a4, a5, a6, a7, a8);
              goto LABEL_24;
            }
            if (v425 != 7 && (v425 - 9) >= 2)
              goto LABEL_1006;
            if (*((_BYTE *)v288 + 40) == 6)
              v684 = 0;
            else
              v684 = *((_QWORD *)v288 + 4) << 32;
            v685 = v684 | (v288[12] - 1);
            v686 = (char)~*((_BYTE *)v288 + 16);
            v687 = a3;
            break;
          case 7:
          case 9:
          case 0xA:
            if (*((_BYTE *)*a2 + 8) == 6)
              v657 = 0;
            else
              v657 = *(_QWORD *)v288 << 32;
            JSC::MacroAssemblerARM64::loadFloat(a3, v657 | (v288[4] - 1), (char)~*((_BYTE *)v288 + 48), a4, a5, a6, a7, a8);
            goto LABEL_24;
          case 0xB:
            HIDWORD(v290) = v288[3];
            LODWORD(v290) = HIDWORD(v290) - 2;
            v289 = v290 >> 1;
            if (v289 > 7)
              v291 = 0;
            else
              v291 = qword_199152B88[v289];
            v453 = v291 | (((unsigned __int16)v288[5] << 8) - 256) & 0xFF00 | (v288[4] - 1);
            v454 = *v288 | ((unint64_t)*((unsigned __int8 *)v288 + 9) << 32);
            v455 = (char)~*((_BYTE *)v288 + 48);
            v456 = a3;
            goto LABEL_538;
          default:
            goto LABEL_1006;
        }
      }
      else
      {
        if (v287 != 3)
          goto LABEL_1006;
        v758 = *a2;
        if (*((_BYTE *)*a2 + 8) == 6)
          v759 = 0;
        else
          v759 = *(_QWORD *)v758 << 32;
        v760 = v759 | (v758[4] - 1);
        if (*((_BYTE *)v758 + 40) == 6)
          v761 = 0;
        else
          v761 = *((_QWORD *)v758 + 4) << 32;
        v762 = v761 | (v758[12] - 1);
        v763 = (char)~*((_BYTE *)v758 + 80);
        JSC::MacroAssemblerARM64::loadFloat(a3, v760, v763, a4, a5, a6, a7, a8);
        v687 = a3;
        v686 = v763;
        v685 = v762;
      }
      JSC::MacroAssemblerARM64::storeFloat(v687, v686, v685, v10, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x6C:
      v141 = *((_DWORD *)a2 + 3);
      if (v141 == 2)
      {
        v142 = *a2;
        switch(*((_BYTE *)*a2 + 8))
        {
          case 1:
            switch(*((_BYTE *)v142 + 40))
            {
              case 1:
                v143 = ~v142[4];
                v144 = ~v142[12];
                v121 = *(_DWORD *)(a3 + 200);
                if (v121 + 4 > *(_DWORD *)(a3 + 192))
                {
                  result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
                  v121 = *(_DWORD *)(a3 + 200);
                }
                v122 = (char)v144 | (32 * (char)v143);
                v123 = 509624320;
                goto LABEL_171;
              case 7:
              case 9:
              case 0xA:
                if (*((_BYTE *)v142 + 40) == 6)
                  v352 = 0;
                else
                  v352 = *((_QWORD *)v142 + 4) << 32;
                v353 = v352 | (v142[12] - 1);
                v354 = (char)~*((_BYTE *)v142 + 16);
                v355 = a3;
                goto LABEL_408;
              case 0xB:
                HIDWORD(v515) = v142[11];
                LODWORD(v515) = HIDWORD(v515) - 2;
                v514 = v515 >> 1;
                if (v514 > 7)
                  v516 = 0;
                else
                  v516 = qword_199152B88[v514];
                JSC::MacroAssemblerARM64::storeDouble(a3, (char)~*((_BYTE *)v142 + 16), v516 | (((unsigned __int16)v142[13] << 8) - 256) & 0xFF00 | (v142[12] - 1), v142[8] | ((unint64_t)*((unsigned __int8 *)v142 + 41) << 32), a5, a6, a7, a8);
                goto LABEL_24;
              default:
                goto LABEL_1006;
            }
          case 7:
          case 9:
          case 0xA:
            if (*((_BYTE *)*a2 + 8) == 6)
              v200 = 0;
            else
              v200 = *(_QWORD *)v142 << 32;
            JSC::MacroAssemblerARM64::loadDouble(a3, v200 | (v142[4] - 1), (char)~*((_BYTE *)v142 + 48), a4, a5, a6, a7, a8);
            goto LABEL_24;
          case 0xB:
            HIDWORD(v488) = v142[3];
            LODWORD(v488) = HIDWORD(v488) - 2;
            v487 = v488 >> 1;
            if (v487 > 7)
              v489 = 0;
            else
              v489 = qword_199152B88[v487];
            v582 = v489 | (((unsigned __int16)v142[5] << 8) - 256) & 0xFF00 | (v142[4] - 1);
            v583 = *v142 | ((unint64_t)*((unsigned __int8 *)v142 + 9) << 32);
            v584 = (char)~*((_BYTE *)v142 + 48);
            v585 = a3;
            goto LABEL_708;
          default:
            goto LABEL_1006;
        }
      }
      if (v141 != 3)
        goto LABEL_1006;
      v745 = *a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v746 = 0;
      else
        v746 = *(_QWORD *)v745 << 32;
      v747 = v746 | (v745[4] - 1);
      if (*((_BYTE *)v745 + 40) == 6)
        v748 = 0;
      else
        v748 = *((_QWORD *)v745 + 4) << 32;
      v749 = v748 | (v745[12] - 1);
      v750 = (char)~*((_BYTE *)v745 + 80);
      JSC::MacroAssemblerARM64::loadDouble(a3, v747, v750, a4, a5, a6, a7, a8);
      v355 = a3;
      v354 = v750;
      v353 = v749;
LABEL_408:
      JSC::MacroAssemblerARM64::storeDouble(v355, v354, v353, v10, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x6D:
      v1141 = *((_DWORD *)a2 + 3);
      if (!v1141)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C49E4);
      }
      v1142 = *a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v1143 = 0;
      else
        v1143 = *(_QWORD *)v1142 << 32;
      if (v1141 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4ECCLL);
      }
      if (v1141 == 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C49ECLL);
      }
      JSC::MacroAssemblerARM64::loadPairFloat((_DWORD *)a3, v1143 | (v1142[4] - 1), (char)~*((_BYTE *)v1142 + 48), (char)~*((_BYTE *)v1142 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x6E:
      v1144 = *((_DWORD *)a2 + 3);
      if (!v1144)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C49F4);
      }
      v1145 = *a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v1146 = 0;
      else
        v1146 = *(_QWORD *)v1145 << 32;
      if (v1144 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4ED4);
      }
      if (v1144 == 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C49FCLL);
      }
      JSC::MacroAssemblerARM64::loadPairDouble((_DWORD *)a3, v1146 | (v1145[4] - 1), (char)~*((_BYTE *)v1145 + 48), (char)~*((_BYTE *)v1145 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x6F:
      v1153 = *((_DWORD *)a2 + 3);
      if (!v1153)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4A1CLL);
      }
      if (v1153 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4A24);
      }
      if (v1153 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4EE4);
      }
      v1154 = *a2;
      if (*((_BYTE *)*a2 + 72) == 6)
        v1155 = 0;
      else
        v1155 = *((_QWORD *)v1154 + 8) << 32;
      JSC::MacroAssemblerARM64::storePairFloat((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), v1155 | (v1154[20] - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x70:
      v1162 = *((_DWORD *)a2 + 3);
      if (!v1162)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4A44);
      }
      if (v1162 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4A4CLL);
      }
      if (v1162 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4EFCLL);
      }
      v1163 = *a2;
      if (*((_BYTE *)*a2 + 72) == 6)
        v1164 = 0;
      else
        v1164 = *((_QWORD *)v1163 + 8) << 32;
      JSC::MacroAssemblerARM64::storePairDouble((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), v1164 | (v1163[20] - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x71:
      v1171 = *((_DWORD *)a2 + 3);
      if (v1171)
      {
        v1172 = *a2;
        switch(*((_BYTE *)*a2 + 8))
        {
          case 1:
            if (v1171 > 1)
            {
              v1353 = (JSC::B3::Air::Arg *)(v1172 + 8);
              switch(*((_BYTE *)v1172 + 40))
              {
                case 1:
                  JSC::MacroAssemblerARM64::moveVector((_DWORD *)a3, (char)~*((_BYTE *)v1172 + 16), (char)~*((_BYTE *)v1172 + 48), a4, a5, a6, a7, a8);
                  goto LABEL_24;
                case 7:
                case 9:
                case 0xA:
                  if (*((_BYTE *)v1172 + 40) == 6)
                    v1354 = 0;
                  else
                    v1354 = *(_QWORD *)v1353 << 32;
                  JSC::MacroAssemblerARM64::storeVector(a3, (char)~*((_BYTE *)v1172 + 16), v1354 | (v1172[12] - 1), a4, a5, a6, a7, a8);
                  goto LABEL_24;
                case 0xB:
                  v1364 = ~*((_BYTE *)v1172 + 16);
                  v1365 = JSC::B3::Air::Arg::asBaseIndex(v1353);
                  JSC::MacroAssemblerARM64::storeVector(a3, v1364, v1365, v1366, v1367, v1368, v1369, v1370);
                  goto LABEL_24;
                default:
                  goto LABEL_1006;
              }
            }
            __break(0xC471u);
            JUMPOUT(0x1980C5144);
          case 7:
          case 9:
          case 0xA:
            if (*((_BYTE *)*a2 + 8) == 6)
              v1173 = 0;
            else
              v1173 = *(_QWORD *)v1172 << 32;
            if (v1171 <= 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1980C506CLL);
            }
            JSC::MacroAssemblerARM64::loadVector(a3, v1173 | (v1172[4] - 1), (char)~*((_BYTE *)v1172 + 48), a4, a5, a6, a7, a8);
            goto LABEL_24;
          case 0xB:
            if (v1171 <= 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1980C514CLL);
            }
            v1355 = JSC::B3::Air::Arg::asBaseIndex((JSC::B3::Air::Arg *)v1172);
            JSC::MacroAssemblerARM64::loadVector(a3, v1355, v1356, (char)~*((_BYTE *)v1172 + 48), v1356, v1357, v1358, v1359);
            goto LABEL_24;
          default:
            goto LABEL_1006;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x1980C4A6CLL);
    case 0x72:
      if (!*((_DWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3614);
      }
      v555 = ~(*a2)[4];
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v122 = (char)v555;
      v123 = 1862329344;
      goto LABEL_171;
    case 0x73:
      if (!*((_DWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980C47BCLL);
      }
      goto LABEL_2105;
    case 0x74:
      if (*((_DWORD *)a2 + 3) != 2)
        goto LABEL_1006;
      v117 = *a2;
      v118 = *((char *)*a2 + 8);
      if (v118 != 1)
      {
        if (v118 == 11)
        {
          v710 = JSC::B3::Air::Arg::asBaseIndex((JSC::B3::Air::Arg *)*a2);
          a5 = v711;
          v584 = (char)~*((_BYTE *)v117 + 48);
          v585 = a3;
          v582 = v710;
          v583 = a5;
LABEL_708:
          JSC::MacroAssemblerARM64::loadDouble(v585, v582, v583, v584, a5, a6, a7, a8);
          goto LABEL_24;
        }
        goto LABEL_1006;
      }
      v119 = v117[4];
      v120 = ~v117[12];
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v122 = (32 * (_WORD)v119 + 992) & 0x3E0 | (char)v120 | 0x9E220000;
      v123 = 4521984;
      goto LABEL_171;
    case 0x76:
      v646 = *((_DWORD *)a2 + 3);
      if (!v646)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C37FCLL);
      }
      v647 = (JSC::B3::Air::Arg *)*a2;
      v648 = *((char *)*a2 + 8);
      if (v648 == 1)
      {
        if (v646 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C385CLL);
        }
        JSC::MacroAssemblerARM64::move32ToFloat((_DWORD *)a3, (char)(*((_BYTE *)v647 + 16) - 1), (char)~*((_BYTE *)v647 + 48), a4, a5, a6, a7, a8);
        goto LABEL_24;
      }
      if (v648 == 11)
      {
        if (v646 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C5054);
        }
        v715 = JSC::B3::Air::Arg::asBaseIndex((JSC::B3::Air::Arg *)*a2);
        a5 = v716;
        v455 = (char)~*((_BYTE *)v647 + 48);
        v456 = a3;
        v453 = v715;
        v454 = a5;
LABEL_538:
        JSC::MacroAssemblerARM64::loadFloat(v456, v453, v454, v455, a5, a6, a7, a8);
        goto LABEL_24;
      }
      goto LABEL_1006;
    case 0x77:
      if (*((_DWORD *)a2 + 3) != 2)
        goto LABEL_1006;
      v296 = (JSC::B3::Air::Arg *)*a2;
      v297 = *((char *)*a2 + 8);
      if (v297 != 1)
      {
        if (v297 == 7)
          goto LABEL_1091;
        if (v297 == 11)
        {
          v688 = JSC::B3::Air::Arg::asBaseIndex((JSC::B3::Air::Arg *)*a2);
          a5 = v689;
          v172 = (char)(*((_BYTE *)v296 + 48) - 1);
          v173 = a3;
          v170 = v688;
          v171 = a5;
LABEL_209:
          JSC::MacroAssemblerARM64::load64(v173, v170, v171, v172, a5, a6, a7, a8);
          goto LABEL_24;
        }
        if ((v297 - 9) < 2)
        {
LABEL_1091:
          if (*((_BYTE *)*a2 + 8) == 6)
            v735 = 0;
          else
            v735 = *(_QWORD *)v296 << 32;
          v20 = v735 | (*((_DWORD *)v296 + 4) - 1);
          v21 = *((_BYTE *)v296 + 48);
LABEL_15:
          JSC::MacroAssemblerARM64::load64(a3, v20, (char)(v21 - 1), a4, a5, a6, a7, a8);
          goto LABEL_24;
        }
        goto LABEL_1006;
      }
      v298 = ~*((_DWORD *)v296 + 4);
      v299 = *((_DWORD *)v296 + 12) + 31;
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v122 = (32 * (char)v298) | v299 & 0x1F;
      v138 = -1641938944;
      v139 = 4456448;
LABEL_170:
      v123 = v138 | v139;
      goto LABEL_171;
    case 0x79:
      v1150 = *((_DWORD *)a2 + 3);
      if (v1150)
      {
        v1151 = (JSC::B3::Air::Arg *)*a2;
        switch(*((_BYTE *)*a2 + 8))
        {
          case 1:
            if (v1150 <= 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1980C5134);
            }
            JSC::MacroAssemblerARM64::moveFloatTo32((_DWORD *)a3, (char)~*((_BYTE *)v1151 + 16), (char)(*((_BYTE *)v1151 + 48) - 1), a4, a5, a6, a7, a8);
            goto LABEL_24;
          case 7:
          case 9:
          case 0xA:
            if (*((_BYTE *)*a2 + 8) == 6)
              v1152 = 0;
            else
              v1152 = *(_QWORD *)v1151 << 32;
            if (v1150 <= 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1980C5064);
            }
            v25 = v1152 | (*((_DWORD *)v1151 + 4) - 1);
            v26 = *((_BYTE *)v1151 + 48);
LABEL_21:
            JSC::MacroAssemblerARM64::load32(a3, v25, (char)(v26 - 1), a4, a5, a6, a7, a8);
            goto LABEL_24;
          case 0xB:
            if (v1150 <= 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1980C513CLL);
            }
            v1351 = JSC::B3::Air::Arg::asBaseIndex(v1151);
            a5 = v1352;
            v209 = (char)(*((_BYTE *)v1151 + 48) - 1);
            v210 = a3;
            v207 = v1351;
            v208 = a5;
LABEL_252:
            JSC::MacroAssemblerARM64::load32(v210, v207, v208, v209, a5, a6, a7, a8);
            goto LABEL_24;
          default:
            goto LABEL_1006;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x1980C4A14);
    case 0x7A:
      v53 = *((_DWORD *)a2 + 3);
      if (!v53)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C2F64);
      }
      v54 = (JSC::B3::Air::Arg *)*a2;
      v55 = *((char *)*a2 + 8);
      if (v55 == 7)
        goto LABEL_59;
      if (v55 == 11)
      {
        HIDWORD(v156) = *((_DWORD *)v54 + 3);
        LODWORD(v156) = HIDWORD(v156) - 2;
        v155 = v156 >> 1;
        if (v155 > 7)
          v157 = 0;
        else
          v157 = qword_199152B88[v155];
        if (v53 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C3304);
        }
        JSC::MacroAssemblerARM64::load8(a3, v157 | ((*((_WORD *)v54 + 10) << 8) - 256) & 0xFF00 | (*((_DWORD *)v54 + 4) - 1), *(unsigned int *)v54 | ((unint64_t)*((unsigned __int8 *)v54 + 9) << 32), (char)(*((_BYTE *)v54 + 48) - 1), a5, a6, a7, a8);
        goto LABEL_24;
      }
      if ((v55 - 9) > 1)
        goto LABEL_1006;
LABEL_59:
      if (*((_BYTE *)*a2 + 8) == 6)
        v56 = 0;
      else
        v56 = *(_QWORD *)v54 << 32;
      if (v53 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C2F6CLL);
      }
      JSC::MacroAssemblerARM64::load8(a3, v56 | (*((_DWORD *)v54 + 4) - 1), (char)(*((_BYTE *)v54 + 48) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x7B:
      v797 = *((_DWORD *)a2 + 3);
      if (!v797)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3CACLL);
      }
      v798 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v799 = 0;
      else
        v799 = *(_QWORD *)v798 << 32;
      if (v797 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4214);
      }
      JSC::MacroAssemblerARM64::loadAcq8(a3, v799 | (*((_DWORD *)v798 + 4) - 1), (char)(*((_BYTE *)v798 + 48) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x7C:
      v345 = *((_DWORD *)a2 + 3);
      if (!v345)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3408);
      }
      v346 = (JSC::B3::Air::Arg *)*a2;
      v347 = *((char *)*a2 + 8);
      if (v347 == 1)
      {
        if (v345 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C3410);
        }
        v348 = *((char *)v346 + 40);
        if (v348 == 11)
        {
          HIDWORD(v350) = *((_DWORD *)v346 + 11);
          LODWORD(v350) = HIDWORD(v350) - 2;
          v349 = v350 >> 1;
          if (v349 > 7)
            v351 = 0;
          else
            v351 = qword_199152B88[v349];
          v474 = v351 | (((unsigned __int16)*((_DWORD *)v346 + 13) << 8) - 256) & 0xFF00 | (*((_DWORD *)v346 + 12) - 1);
          v475 = *((unsigned int *)v346 + 8) | ((unint64_t)*((unsigned __int8 *)v346 + 41) << 32);
          v476 = *((_BYTE *)v346 + 16) - 1;
          v477 = a3;
          goto LABEL_560;
        }
        if (v348 > 0xA || ((1 << v348) & 0x680) == 0)
          goto LABEL_1006;
        if (*((_BYTE *)v346 + 40) == 6)
          v483 = 0;
        else
          v483 = *((_QWORD *)v346 + 4) << 32;
        v484 = v483 | (*((_DWORD *)v346 + 12) - 1);
        v485 = (char)(*((_BYTE *)v346 + 16) - 1);
        v486 = a3;
      }
      else
      {
        if (v347 != 20)
        {
          if (v347 == 2 && v345 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980BCEA0);
          }
          goto LABEL_1006;
        }
        if (v345 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C3934);
        }
        v680 = (JSC::B3::Air::Arg *)((char *)v346 + 32);
        v681 = *((char *)v346 + 40);
        if (v681 == 11)
        {
          v474 = JSC::B3::Air::Arg::asBaseIndex(v680);
          v475 = v702;
          v477 = a3;
          v476 = 63;
LABEL_560:
          JSC::MacroAssemblerARM64::store8(v477, v476, v474, v475, a5, a6, a7, a8);
          goto LABEL_24;
        }
        if (v681 != 7 && (v681 - 9) > 1)
          goto LABEL_1006;
        if (*((_BYTE *)v346 + 40) == 6)
          v682 = 0;
        else
          v682 = *(_QWORD *)v680 << 32;
        v484 = v682 | (*((_DWORD *)v346 + 12) - 1);
        v486 = a3;
        v485 = 63;
      }
      JSC::MacroAssemblerARM64::store8(v486, v485, v484, v10, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x7D:
      v793 = *((_DWORD *)a2 + 3);
      if (!v793)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3C84);
      }
      if (v793 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3C8CLL);
      }
      v794 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v795 = 0;
      else
        v795 = *((_QWORD *)v794 + 4) << 32;
      JSC::MacroAssemblerARM64::storeRel8(a3, (char)(*((_BYTE *)*a2 + 16) - 1), v795 | (*((_DWORD *)v794 + 12) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x7E:
      v417 = *((_DWORD *)a2 + 3);
      if (!v417)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C34CCLL);
      }
      v418 = (JSC::B3::Air::Arg *)*a2;
      v419 = *((char *)*a2 + 8);
      if (v419 == 11)
      {
        HIDWORD(v421) = *((_DWORD *)v418 + 3);
        LODWORD(v421) = HIDWORD(v421) - 2;
        v420 = v421 >> 1;
        if (v420 > 7)
          v422 = 0;
        else
          v422 = qword_199152B88[v420];
        if (v417 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C353CLL);
        }
        JSC::MacroAssemblerARM64::load8SignedExtendTo32(a3, v422 | ((*((_WORD *)v418 + 10) << 8) - 256) & 0xFF00 | (*((_DWORD *)v418 + 4)- 1), *(unsigned int *)v418 | ((unint64_t)*((unsigned __int8 *)v418 + 9) << 32), (char)(*((_BYTE *)v418 + 48) - 1), a5, a6, a7, a8);
        goto LABEL_24;
      }
      if (v419 == 7 || (v419 - 9) <= 1)
      {
        if (*((_BYTE *)*a2 + 8) == 6)
          v504 = 0;
        else
          v504 = *(_QWORD *)v418 << 32;
        if (v417 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C356CLL);
        }
        JSC::MacroAssemblerARM64::load8SignedExtendTo32(a3, v504 | (*((_DWORD *)v418 + 4) - 1), (char)(*((_BYTE *)v418 + 48) - 1), a4, a5, a6, a7, a8);
        goto LABEL_24;
      }
      goto LABEL_1006;
    case 0x7F:
      v949 = *((_DWORD *)a2 + 3);
      if (!v949)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C44E4);
      }
      v950 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v951 = 0;
      else
        v951 = *(_QWORD *)v950 << 32;
      if (v949 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4C4CLL);
      }
      JSC::MacroAssemblerARM64::loadAcq8SignedExtendTo32(a3, v951 | (*((_DWORD *)v950 + 4) - 1), (char)(*((_BYTE *)v950 + 48) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x80:
      v217 = *((_DWORD *)a2 + 3);
      if (!v217)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3334);
      }
      v218 = (JSC::B3::Air::Arg *)*a2;
      v219 = *((char *)*a2 + 8);
      if (v219 == 11)
      {
        HIDWORD(v221) = *((_DWORD *)v218 + 3);
        LODWORD(v221) = HIDWORD(v221) - 2;
        v220 = v221 >> 1;
        if (v220 > 7)
          v222 = 0;
        else
          v222 = qword_199152B88[v220];
        if (v217 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C3374);
        }
        JSC::MacroAssemblerARM64::load16(a3, v222 | ((*((_WORD *)v218 + 10) << 8) - 256) & 0xFF00 | (*((_DWORD *)v218 + 4)- 1), *(unsigned int *)v218 | ((unint64_t)*((unsigned __int8 *)v218 + 9) << 32), (char)(*((_BYTE *)v218 + 48) - 1), a5, a6, a7, a8);
        goto LABEL_24;
      }
      if (v219 <= 0xA && ((1 << v219) & 0x680) != 0)
      {
        if (*((_BYTE *)*a2 + 8) == 6)
          v491 = 0;
        else
          v491 = *(_QWORD *)v218 << 32;
        if (v217 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C355CLL);
        }
        JSC::MacroAssemblerARM64::load16(a3, v491 | (*((_DWORD *)v218 + 4) - 1), (char)(*((_BYTE *)v218 + 48) - 1), a4, a5, a6, a7, a8);
        goto LABEL_24;
      }
      goto LABEL_1006;
    case 0x81:
      v1177 = *((_DWORD *)a2 + 3);
      if (!v1177)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4A84);
      }
      v1178 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v1179 = 0;
      else
        v1179 = *(_QWORD *)v1178 << 32;
      if (v1177 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4F1CLL);
      }
      JSC::MacroAssemblerARM64::loadAcq16(a3, v1179 | (*((_DWORD *)v1178 + 4) - 1), (char)(*((_BYTE *)v1178 + 48) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x82:
      v593 = *((_DWORD *)a2 + 3);
      if (!v593)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3674);
      }
      v594 = (JSC::B3::Air::Arg *)*a2;
      v595 = *((char *)*a2 + 8);
      if (v595 == 11)
      {
        HIDWORD(v597) = *((_DWORD *)v594 + 3);
        LODWORD(v597) = HIDWORD(v597) - 2;
        v596 = v597 >> 1;
        if (v596 > 7)
          v598 = 0;
        else
          v598 = qword_199152B88[v596];
        if (v593 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C367CLL);
        }
        JSC::MacroAssemblerARM64::load16SignedExtendTo32(a3, v598 | ((*((_WORD *)v594 + 10) << 8) - 256) & 0xFF00 | (*((_DWORD *)v594 + 4)- 1), *(unsigned int *)v594 | ((unint64_t)*((unsigned __int8 *)v594 + 9) << 32), (char)(*((_BYTE *)v594 + 48) - 1), a5, a6, a7, a8);
        goto LABEL_24;
      }
      if (v595 <= 0xA && ((1 << v595) & 0x680) != 0)
      {
        if (*((_BYTE *)*a2 + 8) == 6)
          v714 = 0;
        else
          v714 = *(_QWORD *)v594 << 32;
        if (v593 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C39DCLL);
        }
        JSC::MacroAssemblerARM64::load16SignedExtendTo32(a3, v714 | (*((_DWORD *)v594 + 4) - 1), (char)(*((_BYTE *)v594 + 48) - 1), a4, a5, a6, a7, a8);
        goto LABEL_24;
      }
      goto LABEL_1006;
    case 0x83:
      v1006 = *((_DWORD *)a2 + 3);
      if (!v1006)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C46ACLL);
      }
      v1007 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v1008 = 0;
      else
        v1008 = *(_QWORD *)v1007 << 32;
      if (v1006 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4D24);
      }
      JSC::MacroAssemblerARM64::loadAcq16SignedExtendTo32(a3, v1008 | (*((_DWORD *)v1007 + 4) - 1), (char)(*((_BYTE *)v1007 + 48) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x84:
      v465 = *((_DWORD *)a2 + 3);
      if (!v465)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3514);
      }
      v466 = (JSC::B3::Air::Arg *)*a2;
      v467 = *((char *)*a2 + 8);
      if (v467 == 1)
      {
        if (v465 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C3554);
        }
        v468 = *((char *)v466 + 40);
        if (v468 == 11)
        {
          HIDWORD(v470) = *((_DWORD *)v466 + 11);
          LODWORD(v470) = HIDWORD(v470) - 2;
          v469 = v470 >> 1;
          if (v469 > 7)
            v471 = 0;
          else
            v471 = qword_199152B88[v469];
          v599 = v471 | (((unsigned __int16)*((_DWORD *)v466 + 13) << 8) - 256) & 0xFF00 | (*((_DWORD *)v466 + 12) - 1);
          v600 = *((unsigned int *)v466 + 8) | ((unint64_t)*((unsigned __int8 *)v466 + 41) << 32);
          v601 = *((_BYTE *)v466 + 16) - 1;
          v602 = a3;
          goto LABEL_726;
        }
        if (v468 > 0xA || ((1 << v468) & 0x680) == 0)
          goto LABEL_1006;
        if (*((_BYTE *)v466 + 40) == 6)
          v673 = 0;
        else
          v673 = *((_QWORD *)v466 + 4) << 32;
        v674 = v673 | (*((_DWORD *)v466 + 12) - 1);
        v675 = (char)(*((_BYTE *)v466 + 16) - 1);
        v676 = a3;
      }
      else
      {
        if (v467 != 20)
        {
          if (v467 == 2 && v465 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980BD034);
          }
          goto LABEL_1006;
        }
        if (v465 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C3774);
        }
        v620 = (JSC::B3::Air::Arg *)((char *)v466 + 32);
        v621 = *((char *)v466 + 40);
        if (v621 == 11)
        {
          v599 = JSC::B3::Air::Arg::asBaseIndex(v620);
          v600 = v622;
          v602 = a3;
          v601 = 63;
LABEL_726:
          JSC::MacroAssemblerARM64::store16(v602, v601, v599, v600, a5, a6, a7, a8);
          goto LABEL_24;
        }
        if (v621 > 0xA || ((1 << v621) & 0x680) == 0)
          goto LABEL_1006;
        if (*((_BYTE *)v466 + 40) == 6)
          v724 = 0;
        else
          v724 = *(_QWORD *)v620 << 32;
        v674 = v724 | (*((_DWORD *)v466 + 12) - 1);
        v676 = a3;
        v675 = 63;
      }
      JSC::MacroAssemblerARM64::store16(v676, v675, v674, v10, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x85:
      v1180 = *((_DWORD *)a2 + 3);
      if (!v1180)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4A8CLL);
      }
      if (v1180 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4A94);
      }
      v1181 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1182 = 0;
      else
        v1182 = *((_QWORD *)v1181 + 4) << 32;
      JSC::MacroAssemblerARM64::storeRel16(a3, (char)(*((_BYTE *)*a2 + 16) - 1), v1182 | (*((_DWORD *)v1181 + 12) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x86:
      v1186 = *((_DWORD *)a2 + 3);
      if (!v1186)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4AACLL);
      }
      v1187 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v1188 = 0;
      else
        v1188 = *(_QWORD *)v1187 << 32;
      if (v1186 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4F2CLL);
      }
      JSC::MacroAssemblerARM64::loadAcq32(a3, v1188 | (*((_DWORD *)v1187 + 4) - 1), (char)(*((_BYTE *)v1187 + 48) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x87:
      v1192 = *((_DWORD *)a2 + 3);
      if (!v1192)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4ABCLL);
      }
      if (v1192 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4AC4);
      }
      v1193 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1194 = 0;
      else
        v1194 = *((_QWORD *)v1193 + 4) << 32;
      JSC::MacroAssemblerARM64::storeRel32(a3, (char)(*((_BYTE *)*a2 + 16) - 1), v1194 | (*((_DWORD *)v1193 + 12) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x88:
      v1198 = *((_DWORD *)a2 + 3);
      if (!v1198)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4AD4);
      }
      v1199 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v1200 = 0;
      else
        v1200 = *(_QWORD *)v1199 << 32;
      if (v1198 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4F44);
      }
      JSC::MacroAssemblerARM64::loadAcq64(a3, v1200 | (*((_DWORD *)v1199 + 4) - 1), (char)(*((_BYTE *)v1199 + 48) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x89:
      v1204 = *((_DWORD *)a2 + 3);
      if (!v1204)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4AECLL);
      }
      if (v1204 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4AF4);
      }
      v1205 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1206 = 0;
      else
        v1206 = *((_QWORD *)v1205 + 4) << 32;
      JSC::MacroAssemblerARM64::storeRel64(a3, (char)(*((_BYTE *)*a2 + 16) - 1), v1206 | (*((_DWORD *)v1205 + 12) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x8A:
      if (*((_DWORD *)a2 + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C1AF4);
      }
      goto LABEL_1006;
    case 0x8B:
      if (*((_DWORD *)a2 + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C1B40);
      }
      goto LABEL_1006;
    case 0x8C:
      if (*((_DWORD *)a2 + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C1B8CLL);
      }
      goto LABEL_1006;
    case 0x8D:
      if (*((_DWORD *)a2 + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C1C0CLL);
      }
      goto LABEL_1006;
    case 0x8E:
      v573 = *((_DWORD *)a2 + 3);
      if (!v573)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3634);
      }
      if (v573 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C363CLL);
      }
      if (v573 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C364CLL);
      }
      if (v573 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3644);
      }
      v574 = (*a2)[4];
      v575 = (*a2)[8];
      v576 = (*a2)[16];
      v577 = (*a2)[28] + 31;
      v252 = *(_DWORD *)(a3 + 200);
      if (v252 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v252 = *(_DWORD *)(a3 + 200);
      }
      v253 = (32 * (_WORD)v574 + 992) & 0x3E0 | (v575 << 16) | (((v576 + v575) << 10) - 1024) & 0xFFFFFFE0 | v577 & 0x1F;
      v254 = 1392508928;
      goto LABEL_289;
    case 0x8F:
      v701 = *((_DWORD *)a2 + 3);
      if (!v701)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C398CLL);
      }
      if (v701 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3994);
      }
      if (v701 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C39A4);
      }
      if (v701 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C399CLL);
      }
      JSC::MacroAssemblerARM64::extractUnsignedBitfield64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (*a2)[8], (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0x90:
      v606 = *((_DWORD *)a2 + 3);
      if (!v606)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C36ACLL);
      }
      if (v606 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C36B4);
      }
      if (v606 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C36C4);
      }
      if (v606 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C36BCLL);
      }
      JSC::MacroAssemblerARM64::insertUnsignedBitfieldInZero32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (*a2)[8], (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0x91:
      v993 = *((_DWORD *)a2 + 3);
      if (!v993)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4604);
      }
      if (v993 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C460CLL);
      }
      if (v993 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4CC4);
      }
      if (v993 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4614);
      }
      JSC::MacroAssemblerARM64::insertUnsignedBitfieldInZero64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (*a2)[8], (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0x92:
      v705 = *((_DWORD *)a2 + 3);
      if (!v705)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C39B4);
      }
      if (v705 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C39BCLL);
      }
      if (v705 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C39CCLL);
      }
      if (v705 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C39C4);
      }
      JSC::MacroAssemblerARM64::insertBitField32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (*a2)[8], (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0x93:
      v1018 = *((_DWORD *)a2 + 3);
      if (!v1018)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4714);
      }
      if (v1018 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C471CLL);
      }
      if (v1018 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4D6CLL);
      }
      if (v1018 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4724);
      }
      JSC::MacroAssemblerARM64::insertBitField64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (*a2)[8], (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0x94:
      v1024 = *((_DWORD *)a2 + 3);
      if (!v1024)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C474CLL);
      }
      if (v1024 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4754);
      }
      if (v1024 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4D8CLL);
      }
      JSC::MacroAssemblerARM64::clearBitField32((_DWORD *)a3, **a2, (*a2)[8], (char)(*((_BYTE *)*a2 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x95:
      v1027 = *((_DWORD *)a2 + 3);
      if (!v1027)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4784);
      }
      if (v1027 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C478CLL);
      }
      if (v1027 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4DA4);
      }
      JSC::MacroAssemblerARM64::clearBitField64((_DWORD *)a3, **a2, (*a2)[8], (char)(*((_BYTE *)*a2 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x96:
      v611 = *((_DWORD *)a2 + 3);
      if (!v611)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C371CLL);
      }
      if (v611 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3724);
      }
      if (v611 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C372CLL);
      }
      v612 = (((*a2)[12] << 16) + 2031616) & 0x1F0000 | (32 * (*a2)[4] + 992) & 0x3E0 | ((*a2)[20] - 1) & 0x1F;
      v613 = 169869312;
      goto LABEL_771;
    case 0x97:
      v800 = *((_DWORD *)a2 + 3);
      if (!v800)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3CB4);
      }
      if (v800 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3CBCLL);
      }
      if (v800 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C421CLL);
      }
      JSC::MacroAssemblerARM64::clearBitsWithMask64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x98:
      v801 = *((_DWORD *)a2 + 3);
      if (v801 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3CC4);
      }
      if (!v801)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3CCCLL);
      }
      JSC::MacroAssemblerARM64::reverseBits64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x99:
      v803 = *((_DWORD *)a2 + 3);
      if (v803 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3CECLL);
      }
      if (!v803)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3CF4);
      }
      JSC::MacroAssemblerARM64::reverseBits32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x9A:
      v677 = *((_DWORD *)a2 + 3);
      if (!v677)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C38CCLL);
      }
      if (v677 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C38D4);
      }
      if (v677 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C38DCLL);
      }
      v612 = (((*a2)[12] << 16) + 2031616) & 0x1F0000 | (32 * (*a2)[4] + 992) & 0x3E0 | ((*a2)[20] - 1) & 0x1F;
      v613 = 706740224;
LABEL_771:
      v614 = v612 | v613;
      goto LABEL_772;
    case 0x9B:
      v864 = *((_DWORD *)a2 + 3);
      if (!v864)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3ECCLL);
      }
      if (v864 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3ED4);
      }
      if (v864 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C42ECLL);
      }
      JSC::MacroAssemblerARM64::orNot64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x9C:
      v870 = *((_DWORD *)a2 + 3);
      if (!v870)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3F14);
      }
      if (v870 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3F1CLL);
      }
      if (v870 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4314);
      }
      JSC::MacroAssemblerARM64::xorNot32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x9D:
      v872 = *((_DWORD *)a2 + 3);
      if (!v872)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3F3CLL);
      }
      if (v872 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3F44);
      }
      if (v872 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4324);
      }
      JSC::MacroAssemblerARM64::xorNot64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x9E:
      v877 = *((_DWORD *)a2 + 3);
      if (!v877)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3F6CLL);
      }
      if (v877 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3F74);
      }
      if (v877 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C433CLL);
      }
      if (v877 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3F7CLL);
      }
      JSC::MacroAssemblerARM64::xorNotLeftShift32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0x9F:
      v880 = *((_DWORD *)a2 + 3);
      if (!v880)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3FACLL);
      }
      if (v880 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3FB4);
      }
      if (v880 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4354);
      }
      if (v880 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3FBCLL);
      }
      JSC::MacroAssemblerARM64::xorNotRightShift32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xA0:
      v882 = *((_DWORD *)a2 + 3);
      if (!v882)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3FD4);
      }
      if (v882 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3FDCLL);
      }
      if (v882 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4364);
      }
      if (v882 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3FE4);
      }
      JSC::MacroAssemblerARM64::xorNotUnsignedRightShift32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xA1:
      v888 = *((_DWORD *)a2 + 3);
      if (!v888)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4014);
      }
      if (v888 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C401CLL);
      }
      if (v888 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4374);
      }
      if (v888 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4024);
      }
      JSC::MacroAssemblerARM64::xorNotLeftShift64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xA2:
      v894 = *((_DWORD *)a2 + 3);
      if (!v894)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C405CLL);
      }
      if (v894 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4064);
      }
      if (v894 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C438CLL);
      }
      if (v894 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C406CLL);
      }
      JSC::MacroAssemblerARM64::xorNotRightShift64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xA3:
      v899 = *((_DWORD *)a2 + 3);
      if (!v899)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C408CLL);
      }
      if (v899 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4094);
      }
      if (v899 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C439CLL);
      }
      if (v899 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C409CLL);
      }
      JSC::MacroAssemblerARM64::xorNotUnsignedRightShift64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xA4:
      v905 = *((_DWORD *)a2 + 3);
      if (!v905)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C40D4);
      }
      if (v905 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C40DCLL);
      }
      if (v905 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C43B4);
      }
      if (v905 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C40E4);
      }
      JSC::MacroAssemblerARM64::extractInsertBitfieldAtLowEnd32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (*a2)[8], (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xA5:
      v910 = *((_DWORD *)a2 + 3);
      if (!v910)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4104);
      }
      if (v910 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C410CLL);
      }
      if (v910 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C43C4);
      }
      if (v910 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4114);
      }
      JSC::MacroAssemblerARM64::extractInsertBitfieldAtLowEnd64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (*a2)[8], (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xA6:
      v916 = *((_DWORD *)a2 + 3);
      if (!v916)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4154);
      }
      if (v916 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C415CLL);
      }
      if (v916 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C43DCLL);
      }
      if (v916 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4164);
      }
      JSC::MacroAssemblerARM64::insertSignedBitfieldInZero32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (*a2)[8], (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xA7:
      v922 = *((_DWORD *)a2 + 3);
      if (!v922)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4194);
      }
      if (v922 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C419CLL);
      }
      if (v922 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C43F4);
      }
      if (v922 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C41A4);
      }
      JSC::MacroAssemblerARM64::insertSignedBitfieldInZero64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (*a2)[8], (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xA8:
      v927 = *((_DWORD *)a2 + 3);
      if (!v927)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C41CCLL);
      }
      if (v927 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C41D4);
      }
      if (v927 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4404);
      }
      if (v927 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C41DCLL);
      }
      JSC::MacroAssemblerARM64::extractSignedBitfield32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (*a2)[8], (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xA9:
      v933 = *((_DWORD *)a2 + 3);
      if (!v933)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4434);
      }
      if (v933 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C443CLL);
      }
      if (v933 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4C14);
      }
      if (v933 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4444);
      }
      JSC::MacroAssemblerARM64::extractSignedBitfield64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (*a2)[8], (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xAA:
      v939 = *((_DWORD *)a2 + 3);
      if (!v939)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C447CLL);
      }
      if (v939 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4484);
      }
      if (v939 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4C2CLL);
      }
      if (v939 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C448CLL);
      }
      JSC::MacroAssemblerARM64::extractRegister32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xAB:
      v943 = *((_DWORD *)a2 + 3);
      if (!v943)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C449CLL);
      }
      if (v943 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C44A4);
      }
      if (v943 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4C34);
      }
      if (v943 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C44ACLL);
      }
      JSC::MacroAssemblerARM64::extractRegister64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xAC:
      v386 = *((_DWORD *)a2 + 3);
      if (!v386)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3448);
      }
      if (v386 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3450);
      }
      if (v386 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3460);
      }
      if (v386 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3458);
      }
      v387 = *((_BYTE *)*a2 + 16) - 1;
      v388 = *((_BYTE *)*a2 + 112) - 1;
      v389 = (((*a2)[12] << 16) + 2031616) & 0x1F0000;
      v390 = (*a2)[16] << 10;
      if (v387 == 31 || (*((_BYTE *)*a2 + 112) - 1) == 31)
        goto LABEL_2707;
      v392 = (unsigned __int16)(*((_WORD *)*a2 + 32) << 10) | (32 * (v387 & 0x1F)) | v388 & 0x1F | v389;
      v393 = 184549376;
      goto LABEL_457;
    case 0xAD:
      v472 = *((_DWORD *)a2 + 3);
      if (!v472)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C351CLL);
      }
      if (v472 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3524);
      }
      if (v472 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3534);
      }
      if (v472 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C352CLL);
      }
      v387 = *((_BYTE *)*a2 + 16) - 1;
      v388 = *((_BYTE *)*a2 + 112) - 1;
      v389 = (((*a2)[12] << 16) + 2031616) & 0x1F0000;
      v390 = (*a2)[16] << 10;
      if (v387 == 31 || (*((_BYTE *)*a2 + 112) - 1) == 31)
        goto LABEL_2707;
      v392 = (unsigned __int16)(*((_WORD *)*a2 + 32) << 10) | (32 * (v387 & 0x1F)) | v388 & 0x1F | v389;
      v393 = 192937984;
      goto LABEL_457;
    case 0xAE:
      v403 = *((_DWORD *)a2 + 3);
      if (!v403)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C348CLL);
      }
      if (v403 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3494);
      }
      if (v403 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C34A4);
      }
      if (v403 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C349CLL);
      }
      v387 = *((_BYTE *)*a2 + 16) - 1;
      v388 = *((_BYTE *)*a2 + 112) - 1;
      v389 = (((*a2)[12] << 16) + 2031616) & 0x1F0000;
      v390 = (*a2)[16] << 10;
      if (v387 == 31 || (*((_BYTE *)*a2 + 112) - 1) == 31)
      {
LABEL_2707:
        v392 = v390 & 0x1C00 | (32 * v387) | v388;
        v393 = v389 | 0xB206000;
      }
      else
      {
        v392 = (unsigned __int16)(*((_WORD *)*a2 + 32) << 10) | (32 * (v387 & 0x1F)) | v388 & 0x1F | v389;
        v393 = 188743680;
      }
LABEL_457:
      v194 = v392 | v393;
      goto LABEL_234;
    case 0xAF:
      v187 = *((_DWORD *)a2 + 3);
      if (!v187)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3314);
      }
      if (v187 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C331CLL);
      }
      if (v187 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C332CLL);
      }
      if (v187 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3324);
      }
      v188 = *((_BYTE *)*a2 + 16) - 1;
      v189 = -1962934272;
      v190 = *((_BYTE *)*a2 + 112) - 1;
      v191 = (((*a2)[12] << 16) + 2031616) & 0x1F0000;
      if (v188 == 31 || (*((_BYTE *)*a2 + 112) - 1) == 31)
      {
        v193 = (*((_WORD *)*a2 + 32) << 10) & 0x1C00 | (32 * v188) | v190;
        v189 = v191 | 0x8B206000;
      }
      else
      {
        v193 = (unsigned __int16)(*((_WORD *)*a2 + 32) << 10) | (32 * (v188 & 0x1F)) | v190 & 0x1F | v191;
      }
      v194 = v193 | v189;
LABEL_234:
      v196 = (unsigned int *)(a3 + 200);
      v195 = *(_DWORD *)(a3 + 200);
      v197 = (_QWORD *)(a3 + 56);
      if (v195 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v195 = *v196;
      }
      *(_DWORD *)(*v197 + v195) = v194;
      *v196 += 4;
      goto LABEL_24;
    case 0xB0:
      v790 = *((_DWORD *)a2 + 3);
      if (!v790)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3C44);
      }
      if (v790 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3C4CLL);
      }
      if (v790 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C41F4);
      }
      if (v790 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3C54);
      }
      JSC::MacroAssemblerARM64::addRightShift64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xB1:
      v791 = *((_DWORD *)a2 + 3);
      if (!v791)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3C5CLL);
      }
      if (v791 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3C64);
      }
      if (v791 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C41FCLL);
      }
      if (v791 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3C6CLL);
      }
      JSC::MacroAssemblerARM64::addUnsignedRightShift64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xB2:
      v697 = *((_DWORD *)a2 + 3);
      if (!v697)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C395CLL);
      }
      if (v697 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3964);
      }
      if (v697 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3974);
      }
      if (v697 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C396CLL);
      }
      JSC::MacroAssemblerARM64::subLeftShift32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xB3:
      v796 = *((_DWORD *)a2 + 3);
      if (!v796)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3C94);
      }
      if (v796 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3C9CLL);
      }
      if (v796 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C420CLL);
      }
      if (v796 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3CA4);
      }
      JSC::MacroAssemblerARM64::subRightShift32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xB4:
      v683 = *((_DWORD *)a2 + 3);
      if (!v683)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3914);
      }
      if (v683 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C391CLL);
      }
      if (v683 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C392CLL);
      }
      if (v683 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3924);
      }
      JSC::MacroAssemblerARM64::subUnsignedRightShift32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xB5:
      v804 = *((_DWORD *)a2 + 3);
      if (!v804)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3CFCLL);
      }
      if (v804 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3D04);
      }
      if (v804 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C422CLL);
      }
      if (v804 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3D0CLL);
      }
      JSC::MacroAssemblerARM64::subLeftShift64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xB6:
      v805 = *((_DWORD *)a2 + 3);
      if (!v805)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3D14);
      }
      if (v805 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3D1CLL);
      }
      if (v805 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4234);
      }
      if (v805 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3D24);
      }
      JSC::MacroAssemblerARM64::subRightShift64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xB7:
      v806 = *((_DWORD *)a2 + 3);
      if (!v806)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3D2CLL);
      }
      if (v806 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3D34);
      }
      if (v806 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C423CLL);
      }
      if (v806 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3D3CLL);
      }
      JSC::MacroAssemblerARM64::subUnsignedRightShift64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xB8:
      v725 = *((_DWORD *)a2 + 3);
      if (!v725)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C39ECLL);
      }
      if (v725 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C39F4);
      }
      if (v725 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3A4CLL);
      }
      if (v725 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C39FCLL);
      }
      JSC::MacroAssemblerARM64::andLeftShift32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xB9:
      v649 = *((_DWORD *)a2 + 3);
      if (!v649)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3804);
      }
      if (v649 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C380CLL);
      }
      if (v649 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3824);
      }
      if (v649 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3814);
      }
      JSC::MacroAssemblerARM64::andRightShift32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xBA:
      v608 = *((_DWORD *)a2 + 3);
      if (!v608)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C36F4);
      }
      if (v608 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C36FCLL);
      }
      if (v608 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C370CLL);
      }
      if (v608 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3704);
      }
      JSC::MacroAssemblerARM64::andUnsignedRightShift32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xBB:
      v802 = *((_DWORD *)a2 + 3);
      if (!v802)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3CD4);
      }
      if (v802 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3CDCLL);
      }
      if (v802 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4224);
      }
      if (v802 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3CE4);
      }
      JSC::MacroAssemblerARM64::andLeftShift64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xBC:
      v679 = *((_DWORD *)a2 + 3);
      if (!v679)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C38F4);
      }
      if (v679 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C38FCLL);
      }
      if (v679 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C390CLL);
      }
      if (v679 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3904);
      }
      JSC::MacroAssemblerARM64::andRightShift64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xBD:
      v825 = *((_DWORD *)a2 + 3);
      if (!v825)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3DF4);
      }
      if (v825 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3DFCLL);
      }
      if (v825 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C429CLL);
      }
      if (v825 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3E04);
      }
      JSC::MacroAssemblerARM64::andUnsignedRightShift64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xBE:
      v505 = *((_DWORD *)a2 + 3);
      if (!v505)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C357CLL);
      }
      if (v505 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3584);
      }
      if (v505 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3594);
      }
      if (v505 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C358CLL);
      }
      v506 = (*a2)[4];
      v507 = (*a2)[12];
      v508 = (*a2)[16];
      v509 = (*a2)[28] + 31;
      v252 = *(_DWORD *)(a3 + 200);
      if (v252 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v252 = *(_DWORD *)(a3 + 200);
      }
      v253 = ((v507 << 16) + 2031616) & 0x1F0000 | (32 * (_WORD)v506 + 992) & 0x3E0 | ((v508 & 0x3F) << 10) | v509 & 0x1F;
      v254 = 1241513984;
      goto LABEL_289;
    case 0xBF:
      v741 = *((_DWORD *)a2 + 3);
      if (!v741)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3AACLL);
      }
      if (v741 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3AB4);
      }
      if (v741 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3AE4);
      }
      if (v741 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3ABCLL);
      }
      JSC::MacroAssemblerARM64::xorRightShift32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xC0:
      v525 = *((_DWORD *)a2 + 3);
      if (!v525)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C35F4);
      }
      if (v525 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C35FCLL);
      }
      if (v525 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C360CLL);
      }
      if (v525 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3604);
      }
      v526 = (*a2)[4];
      v527 = (*a2)[12];
      v528 = (*a2)[16];
      v529 = (*a2)[28] + 31;
      v252 = *(_DWORD *)(a3 + 200);
      if (v252 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v252 = *(_DWORD *)(a3 + 200);
      }
      v253 = ((v527 << 16) + 2031616) & 0x1F0000 | (32 * (_WORD)v526 + 992) & 0x3E0 | ((v528 & 0x3F) << 10) | v529 & 0x1F;
      v254 = 1245708288;
      goto LABEL_289;
    case 0xC1:
      v727 = *((_DWORD *)a2 + 3);
      if (!v727)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3A1CLL);
      }
      if (v727 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3A24);
      }
      if (v727 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3A64);
      }
      if (v727 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3A2CLL);
      }
      JSC::MacroAssemblerARM64::xorLeftShift64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xC2:
      v1296 = *((_DWORD *)a2 + 3);
      if (!v1296)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4BECLL);
      }
      if (v1296 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4BF4);
      }
      if (v1296 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4FBCLL);
      }
      if (v1296 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4BFCLL);
      }
      JSC::MacroAssemblerARM64::xorRightShift64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xC3:
      v247 = *((_DWORD *)a2 + 3);
      if (!v247)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3354);
      }
      if (v247 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C335CLL);
      }
      if (v247 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C336CLL);
      }
      if (v247 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3364);
      }
      v248 = (*a2)[4];
      v249 = (*a2)[12];
      v250 = (*a2)[16];
      v251 = (*a2)[28] + 31;
      v252 = *(_DWORD *)(a3 + 200);
      if (v252 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v252 = *(_DWORD *)(a3 + 200);
      }
      v253 = ((v249 << 16) + 2031616) & 0x1F0000 | (32 * (_WORD)v248 + 992) & 0x3E0 | ((v250 & 0x3F) << 10) | v251 & 0x1F;
      v254 = -901775360;
      goto LABEL_289;
    case 0xC4:
      v429 = *((_DWORD *)a2 + 3);
      if (!v429)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C34E4);
      }
      if (v429 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C34ECLL);
      }
      if (v429 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C34FCLL);
      }
      if (v429 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C34F4);
      }
      v430 = (*a2)[4];
      v431 = (*a2)[12];
      v432 = (*a2)[16];
      v433 = (*a2)[28] + 31;
      v252 = *(_DWORD *)(a3 + 200);
      if (v252 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v252 = *(_DWORD *)(a3 + 200);
      }
      v253 = ((v431 << 16) + 2031616) & 0x1F0000 | (32 * (_WORD)v430 + 992) & 0x3E0 | ((v432 & 0x3F) << 10) | v433 & 0x1F;
      v254 = 704643072;
      goto LABEL_289;
    case 0xC5:
      v615 = *((_DWORD *)a2 + 3);
      if (!v615)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3734);
      }
      if (v615 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C373CLL);
      }
      if (v615 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C374CLL);
      }
      if (v615 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3744);
      }
      JSC::MacroAssemblerARM64::orRightShift32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xC6:
      v655 = *((_DWORD *)a2 + 3);
      if (!v655)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C386CLL);
      }
      if (v655 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3874);
      }
      if (v655 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3884);
      }
      if (v655 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C387CLL);
      }
      JSC::MacroAssemblerARM64::orUnsignedRightShift32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xC7:
      v376 = *((_DWORD *)a2 + 3);
      if (!v376)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3428);
      }
      if (v376 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3430);
      }
      if (v376 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3440);
      }
      if (v376 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3438);
      }
      v377 = (*a2)[4];
      v378 = (*a2)[12];
      v379 = (*a2)[16];
      v380 = (*a2)[28] + 31;
      v252 = *(_DWORD *)(a3 + 200);
      if (v252 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v252 = *(_DWORD *)(a3 + 200);
      }
      v253 = ((v378 << 16) + 2031616) & 0x1F0000 | (32 * (_WORD)v377 + 992) & 0x3E0 | ((v379 & 0x3F) << 10) | v380 & 0x1F;
      v254 = -1442840576;
      goto LABEL_289;
    case 0xC8:
      v914 = *((_DWORD *)a2 + 3);
      if (!v914)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4124);
      }
      if (v914 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C412CLL);
      }
      if (v914 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C43CCLL);
      }
      if (v914 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4134);
      }
      JSC::MacroAssemblerARM64::orRightShift64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), (*a2)[16], (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0xC9:
      v586 = *((_DWORD *)a2 + 3);
      if (!v586)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3654);
      }
      if (v586 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C365CLL);
      }
      if (v586 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C366CLL);
      }
      if (v586 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3664);
      }
      v587 = (*a2)[4];
      v588 = (*a2)[12];
      v589 = (*a2)[16];
      v590 = (*a2)[28] + 31;
      v252 = *(_DWORD *)(a3 + 200);
      if (v252 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v252 = *(_DWORD *)(a3 + 200);
      }
      v253 = ((v588 << 16) + 2031616) & 0x1F0000 | (32 * (_WORD)v587 + 992) & 0x3E0 | ((v589 & 0x3F) << 10) | v590 & 0x1F;
      v254 = -1438646272;
LABEL_289:
      v255 = v253 | v254;
      goto LABEL_290;
    case 0xCA:
      v815 = *((_DWORD *)a2 + 3);
      if (!v815)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3D64);
      }
      if (v815 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3D6CLL);
      }
      if (v815 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C425CLL);
      }
      JSC::MacroAssemblerARM64::floatMax((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0xCB:
      v817 = *((_DWORD *)a2 + 3);
      if (!v817)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3D84);
      }
      if (v817 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3D8CLL);
      }
      if (v817 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C426CLL);
      }
      JSC::MacroAssemblerARM64::floatMin((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0xCC:
      v821 = *((_DWORD *)a2 + 3);
      if (!v821)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3DACLL);
      }
      if (v821 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3DB4);
      }
      if (v821 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C427CLL);
      }
      JSC::MacroAssemblerARM64::doubleMax((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0xCD:
      v824 = *((_DWORD *)a2 + 3);
      if (!v824)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3DE4);
      }
      if (v824 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3DECLL);
      }
      if (v824 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4294);
      }
      JSC::MacroAssemblerARM64::doubleMin((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0xCE:
      if (*((_DWORD *)a2 + 3) != 3 || *((_BYTE *)*a2 + 72) != 6 || !JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v833 = *((_DWORD *)a2 + 3);
      if (!v833)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3E24);
      }
      if (v833 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3E2CLL);
      }
      if (v833 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C42ACLL);
      }
      v834 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 72) == 6)
        v835 = 0;
      else
        v835 = *((_QWORD *)v834 + 8) << 32;
      JSC::MacroAssemblerARM64::atomicStrongCAS8(a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), v835 | (*((_DWORD *)v834 + 20) - 1), v829, v830, v831, v832);
      goto LABEL_24;
    case 0xCF:
      if (*((_DWORD *)a2 + 3) != 3 || *((_BYTE *)*a2 + 72) != 6 || !JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v842 = *((_DWORD *)a2 + 3);
      if (!v842)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3E54);
      }
      if (v842 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3E5CLL);
      }
      if (v842 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C42BCLL);
      }
      v843 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 72) == 6)
        v844 = 0;
      else
        v844 = *((_QWORD *)v843 + 8) << 32;
      JSC::MacroAssemblerARM64::atomicStrongCAS16(a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), v844 | (*((_DWORD *)v843 + 20) - 1), v838, v839, v840, v841);
      goto LABEL_24;
    case 0xD0:
      if (*((_DWORD *)a2 + 3) != 3 || *((_BYTE *)*a2 + 72) != 6 || !JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v853 = *((_DWORD *)a2 + 3);
      if (!v853)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3E94);
      }
      if (v853 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3E9CLL);
      }
      if (v853 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C42D4);
      }
      v854 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 72) == 6)
        v855 = 0;
      else
        v855 = *((_QWORD *)v854 + 8) << 32;
      JSC::MacroAssemblerARM64::atomicStrongCAS32(a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), v855 | (*((_DWORD *)v854 + 20) - 1), v849, v850, v851, v852);
      goto LABEL_24;
    case 0xD1:
      if (*((_DWORD *)a2 + 3) != 3 || *((_BYTE *)*a2 + 72) != 6 || !JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v861 = *((_DWORD *)a2 + 3);
      if (!v861)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3EBCLL);
      }
      if (v861 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3EC4);
      }
      if (v861 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C42E4);
      }
      v862 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 72) == 6)
        v863 = 0;
      else
        v863 = *((_QWORD *)v862 + 8) << 32;
      JSC::MacroAssemblerARM64::atomicStrongCAS64(a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), v863 | (*((_DWORD *)v862 + 20) - 1), v857, v858, v859, v860);
      goto LABEL_24;
    case 0xD2:
      if (*((_DWORD *)a2 + 3) <= 3u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BE440);
      }
      goto LABEL_1006;
    case 0xD3:
      if (*((_DWORD *)a2 + 3) <= 3u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BE534);
      }
      goto LABEL_1006;
    case 0xD4:
      if (*((_DWORD *)a2 + 3) <= 3u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BE5D8);
      }
      goto LABEL_1006;
    case 0xD5:
      if (*((_DWORD *)a2 + 3) <= 3u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BE734);
      }
      goto LABEL_1006;
    case 0xD6:
      v883 = *((_DWORD *)a2 + 3);
      if (!v883)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3FECLL);
      }
      v884 = *((char *)*a2 + 8);
      if (v884 == 1)
      {
        if (v883 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C2854);
        }
      }
      else if (v884 == 2 && v883 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BE854);
      }
      goto LABEL_1006;
    case 0xD7:
      v890 = *((_DWORD *)a2 + 3);
      if (!v890)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4044);
      }
      v891 = *((char *)*a2 + 8);
      if (v891 == 1)
      {
        if (v890 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C2864);
        }
      }
      else if (v891 == 2 && v890 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BE99CLL);
      }
      goto LABEL_1006;
    case 0xD8:
      v895 = *((_DWORD *)a2 + 3);
      if (!v895)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4074);
      }
      v896 = *((char *)*a2 + 8);
      if (v896 == 1)
      {
        if (v895 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C2874);
        }
      }
      else if (v896 == 2 && v895 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BEA64);
      }
      goto LABEL_1006;
    case 0xD9:
      v900 = *((_DWORD *)a2 + 3);
      if (!v900)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C40A4);
      }
      v901 = *((char *)*a2 + 8);
      if (v901 == 1)
      {
        if (v900 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C2884);
        }
      }
      else if (v901 == 2 && v900 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BEB50);
      }
      goto LABEL_1006;
    case 0xDA:
      v906 = *((_DWORD *)a2 + 3);
      if (!v906)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C40ECLL);
      }
      v907 = *((char *)*a2 + 8);
      if (v907 == 1)
      {
        if (v906 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C2894);
        }
      }
      else if (v907 == 2 && v906 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BEC68);
      }
      goto LABEL_1006;
    case 0xDB:
      v911 = *((_DWORD *)a2 + 3);
      if (!v911)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C411CLL);
      }
      v912 = *((char *)*a2 + 8);
      if (v912 == 1)
      {
        if (v911 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C28A4);
        }
      }
      else if (v912 == 2 && v911 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BED4CLL);
      }
      goto LABEL_1006;
    case 0xDC:
      v918 = *((_DWORD *)a2 + 3);
      if (!v918)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C417CLL);
      }
      v919 = *((char *)*a2 + 8);
      if (v919 == 1)
      {
        if (v918 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C28B4);
        }
      }
      else if (v919 == 2 && v918 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BEEBCLL);
      }
      goto LABEL_1006;
    case 0xDD:
      v923 = *((_DWORD *)a2 + 3);
      if (!v923)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C41ACLL);
      }
      v924 = *((char *)*a2 + 8);
      if (v924 == 1)
      {
        if (v923 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C28C4);
        }
      }
      else if (v924 == 2 && v923 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BEFACLL);
      }
      goto LABEL_1006;
    case 0xDE:
      v928 = *((_DWORD *)a2 + 3);
      if (!v928)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C41E4);
      }
      v929 = *((char *)*a2 + 8);
      if (v929 == 1)
      {
        if (v928 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C28D4);
        }
      }
      else if (v929 == 2 && v928 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BF080);
      }
      goto LABEL_1006;
    case 0xDF:
      v935 = *((_DWORD *)a2 + 3);
      if (!v935)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C445CLL);
      }
      v936 = *((char *)*a2 + 8);
      if (v936 == 1)
      {
        if (v935 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C28E4);
        }
      }
      else if (v936 == 2 && v935 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BF1F4);
      }
      goto LABEL_1006;
    case 0xE0:
      v940 = *((_DWORD *)a2 + 3);
      if (!v940)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4494);
      }
      v941 = *((char *)*a2 + 8);
      if (v941 == 1)
      {
        if (v940 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C28F4);
        }
      }
      else if (v941 == 2 && v940 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BF2D0);
      }
      goto LABEL_1006;
    case 0xE1:
      v945 = *((_DWORD *)a2 + 3);
      if (!v945)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C44CCLL);
      }
      v946 = *((char *)*a2 + 8);
      if (v946 == 1)
      {
        if (v945 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C2904);
        }
      }
      else if (v946 == 2 && v945 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BF3E4);
      }
      goto LABEL_1006;
    case 0xE2:
      v953 = *((_DWORD *)a2 + 3);
      if (!v953)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4504);
      }
      v954 = *((char *)*a2 + 8);
      if (v954 == 1)
      {
        if (v953 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C2914);
        }
      }
      else if (v954 == 2 && v953 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BF55CLL);
      }
      goto LABEL_1006;
    case 0xE3:
      v957 = *((_DWORD *)a2 + 3);
      if (!v957)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C451CLL);
      }
      v958 = *((char *)*a2 + 8);
      if (v958 == 1)
      {
        if (v957 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C2924);
        }
      }
      else if (v958 == 2 && v957 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BF5CCLL);
      }
      goto LABEL_1006;
    case 0xE4:
      v962 = *((_DWORD *)a2 + 3);
      if (!v962)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C454CLL);
      }
      v963 = *((char *)*a2 + 8);
      if (v963 == 1)
      {
        if (v962 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C2934);
        }
      }
      else if (v963 == 2 && v962 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BF700);
      }
      goto LABEL_1006;
    case 0xE5:
      v966 = *((_DWORD *)a2 + 3);
      if (!v966)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4564);
      }
      v967 = *((char *)*a2 + 8);
      if (v967 == 1)
      {
        if (v966 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C2944);
        }
      }
      else if (v967 == 2 && v966 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BF770);
      }
      goto LABEL_1006;
    case 0xE6:
      v970 = *((_DWORD *)a2 + 3);
      if (!v970)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C457CLL);
      }
      v971 = *((char *)*a2 + 8);
      if (v971 == 1)
      {
        if (v970 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C2954);
        }
      }
      else if (v971 == 2 && v970 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BF824);
      }
      goto LABEL_1006;
    case 0xE7:
      v974 = *((_DWORD *)a2 + 3);
      if (!v974)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4594);
      }
      v975 = *((char *)*a2 + 8);
      if (v975 == 1)
      {
        if (v974 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C2964);
        }
      }
      else if (v975 == 2 && v974 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BF8E4);
      }
      goto LABEL_1006;
    case 0xE8:
      v981 = *((_DWORD *)a2 + 3);
      if (!v981)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C45BCLL);
      }
      v982 = *((char *)*a2 + 8);
      if (v982 == 1)
      {
        if (v981 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C2974);
        }
      }
      else if (v982 == 2 && v981 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BF9C0);
      }
      goto LABEL_1006;
    case 0xE9:
      v987 = *((_DWORD *)a2 + 3);
      if (!v987)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C45D4);
      }
      v988 = *((char *)*a2 + 8);
      if (v988 == 1)
      {
        if (v987 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C2984);
        }
      }
      else if (v988 == 2 && v987 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BFAA8);
      }
      goto LABEL_1006;
    case 0xEA:
      if (!*((_DWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980BFC08);
      }
      goto LABEL_1006;
    case 0xEB:
      if (!*((_DWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980BFC84);
      }
      goto LABEL_1006;
    case 0xEC:
      if (!*((_DWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980BFE90);
      }
      goto LABEL_1006;
    case 0xED:
      if (!*((_DWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980BFFD8);
      }
      goto LABEL_1006;
    case 0xEE:
      if (!*((_DWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980C00ACLL);
      }
      goto LABEL_1006;
    case 0xEF:
      if (!*((_DWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980C01D4);
      }
      goto LABEL_1006;
    case 0xF0:
      if (!*((_DWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980C0274);
      }
      goto LABEL_1006;
    case 0xF1:
      if (!*((_DWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980C0424);
      }
      goto LABEL_1006;
    case 0xF2:
      if (*((_DWORD *)a2 + 3) != 3 || !JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v1032 = *((_DWORD *)a2 + 3);
      if (!v1032)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4794);
      }
      if (v1032 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C479CLL);
      }
      v1033 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1034 = 0;
      else
        v1034 = *((_QWORD *)v1033 + 4) << 32;
      if (v1032 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4DACLL);
      }
      JSC::MacroAssemblerARM64::atomicXchgAdd8(a3, (char)(*((_BYTE *)v1033 + 16) - 1), v1034 | (*((_DWORD *)v1033 + 12) - 1), (char)(*((_BYTE *)v1033 + 80) - 1), v1028, v1029, v1030, v1031);
      goto LABEL_24;
    case 0xF3:
      if (*((_DWORD *)a2 + 3) != 3 || !JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v1045 = *((_DWORD *)a2 + 3);
      if (!v1045)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C47ECLL);
      }
      if (v1045 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C47F4);
      }
      v1046 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1047 = 0;
      else
        v1047 = *((_QWORD *)v1046 + 4) << 32;
      if (v1045 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4DE4);
      }
      JSC::MacroAssemblerARM64::atomicXchgAdd16(a3, (char)(*((_BYTE *)v1046 + 16) - 1), v1047 | (*((_DWORD *)v1046 + 12) - 1), (char)(*((_BYTE *)v1046 + 80) - 1), v1041, v1042, v1043, v1044);
      goto LABEL_24;
    case 0xF4:
      if (*((_DWORD *)a2 + 3) != 3 || !JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v1054 = *((_DWORD *)a2 + 3);
      if (!v1054)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C47FCLL);
      }
      if (v1054 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4804);
      }
      v1055 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1056 = 0;
      else
        v1056 = *((_QWORD *)v1055 + 4) << 32;
      if (v1054 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4DECLL);
      }
      JSC::MacroAssemblerARM64::atomicXchgAdd32(a3, (char)(*((_BYTE *)v1055 + 16) - 1), v1056 | (*((_DWORD *)v1055 + 12) - 1), (char)(*((_BYTE *)v1055 + 80) - 1), v1050, v1051, v1052, v1053);
      goto LABEL_24;
    case 0xF5:
      if (*((_DWORD *)a2 + 3) != 3 || !JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v1063 = *((_DWORD *)a2 + 3);
      if (!v1063)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C482CLL);
      }
      if (v1063 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4834);
      }
      v1064 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1065 = 0;
      else
        v1065 = *((_QWORD *)v1064 + 4) << 32;
      if (v1063 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4DFCLL);
      }
      JSC::MacroAssemblerARM64::atomicXchgAdd64(a3, (char)(*((_BYTE *)v1064 + 16) - 1), v1065 | (*((_DWORD *)v1064 + 12) - 1), (char)(*((_BYTE *)v1064 + 80) - 1), v1059, v1060, v1061, v1062);
      goto LABEL_24;
    case 0xF6:
      if (*((_DWORD *)a2 + 3) != 3 || !JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v1074 = *((_DWORD *)a2 + 3);
      if (!v1074)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C485CLL);
      }
      if (v1074 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4864);
      }
      v1075 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1076 = 0;
      else
        v1076 = *((_QWORD *)v1075 + 4) << 32;
      if (v1074 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4E14);
      }
      JSC::MacroAssemblerARM64::atomicXchg8(a3, (char)(*((_BYTE *)v1075 + 16) - 1), v1076 | (*((_DWORD *)v1075 + 12) - 1), (char)(*((_BYTE *)v1075 + 80) - 1), v1070, v1071, v1072, v1073);
      goto LABEL_24;
    case 0xF7:
      if (*((_DWORD *)a2 + 3) != 3 || !JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v1083 = *((_DWORD *)a2 + 3);
      if (!v1083)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C488CLL);
      }
      if (v1083 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4894);
      }
      v1084 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1085 = 0;
      else
        v1085 = *((_QWORD *)v1084 + 4) << 32;
      if (v1083 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4E24);
      }
      JSC::MacroAssemblerARM64::atomicXchg16(a3, (char)(*((_BYTE *)v1084 + 16) - 1), v1085 | (*((_DWORD *)v1084 + 12) - 1), (char)(*((_BYTE *)v1084 + 80) - 1), v1079, v1080, v1081, v1082);
      goto LABEL_24;
    case 0xF8:
      if (*((_DWORD *)a2 + 3) != 3 || !JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v1094 = *((_DWORD *)a2 + 3);
      if (!v1094)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C48BCLL);
      }
      if (v1094 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C48C4);
      }
      v1095 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1096 = 0;
      else
        v1096 = *((_QWORD *)v1095 + 4) << 32;
      if (v1094 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4E3CLL);
      }
      JSC::MacroAssemblerARM64::atomicXchg32(a3, (char)(*((_BYTE *)v1095 + 16) - 1), v1096 | (*((_DWORD *)v1095 + 12) - 1), (char)(*((_BYTE *)v1095 + 80) - 1), v1090, v1091, v1092, v1093);
      goto LABEL_24;
    case 0xF9:
      if (*((_DWORD *)a2 + 3) != 3 || !JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v1103 = *((_DWORD *)a2 + 3);
      if (!v1103)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C48ECLL);
      }
      if (v1103 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C48F4);
      }
      v1104 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1105 = 0;
      else
        v1105 = *((_QWORD *)v1104 + 4) << 32;
      if (v1103 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4E4CLL);
      }
      JSC::MacroAssemblerARM64::atomicXchg64(a3, (char)(*((_BYTE *)v1104 + 16) - 1), v1105 | (*((_DWORD *)v1104 + 12) - 1), (char)(*((_BYTE *)v1104 + 80) - 1), v1099, v1100, v1101, v1102);
      goto LABEL_24;
    case 0xFA:
      v1106 = *((_DWORD *)a2 + 3);
      if (!v1106)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4904);
      }
      v1107 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v1108 = 0;
      else
        v1108 = *(_QWORD *)v1107 << 32;
      if (v1106 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4E54);
      }
      JSC::MacroAssemblerARM64::loadLink8(a3, v1108 | (*((_DWORD *)v1107 + 4) - 1), (char)(*((_BYTE *)v1107 + 48) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0xFB:
      v1114 = *((_DWORD *)a2 + 3);
      if (!v1114)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4934);
      }
      v1115 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v1116 = 0;
      else
        v1116 = *(_QWORD *)v1115 << 32;
      if (v1114 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4E6CLL);
      }
      JSC::MacroAssemblerARM64::loadLinkAcq8(a3, v1116 | (*((_DWORD *)v1115 + 4) - 1), (char)(*((_BYTE *)v1115 + 48) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0xFC:
      v1118 = *((_DWORD *)a2 + 3);
      if (!v1118)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4954);
      }
      if (v1118 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C495CLL);
      }
      v1119 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1120 = 0;
      else
        v1120 = *((_QWORD *)v1119 + 4) << 32;
      if (v1118 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4E7CLL);
      }
      JSC::MacroAssemblerARM64::storeCond8(a3, (char)(*((_BYTE *)v1119 + 16) - 1), v1120 | (*((_DWORD *)v1119 + 12) - 1), (char)(*((_BYTE *)v1119 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0xFD:
      v1124 = *((_DWORD *)a2 + 3);
      if (!v1124)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4974);
      }
      if (v1124 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C497CLL);
      }
      v1125 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1126 = 0;
      else
        v1126 = *((_QWORD *)v1125 + 4) << 32;
      if (v1124 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4E8CLL);
      }
      JSC::MacroAssemblerARM64::storeCondRel8(a3, (char)(*((_BYTE *)v1125 + 16) - 1), v1126 | (*((_DWORD *)v1125 + 12) - 1), (char)(*((_BYTE *)v1125 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0xFE:
      v1129 = *((_DWORD *)a2 + 3);
      if (!v1129)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C49B4);
      }
      v1130 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v1131 = 0;
      else
        v1131 = *(_QWORD *)v1130 << 32;
      if (v1129 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4EACLL);
      }
      JSC::MacroAssemblerARM64::loadLink16(a3, v1131 | (*((_DWORD *)v1130 + 4) - 1), (char)(*((_BYTE *)v1130 + 48) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0xFF:
      v1135 = *((_DWORD *)a2 + 3);
      if (!v1135)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C49CCLL);
      }
      v1136 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v1137 = 0;
      else
        v1137 = *(_QWORD *)v1136 << 32;
      if (v1135 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4EBCLL);
      }
      JSC::MacroAssemblerARM64::loadLinkAcq16(a3, v1137 | (*((_DWORD *)v1136 + 4) - 1), (char)(*((_BYTE *)v1136 + 48) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x100:
      v1138 = *((_DWORD *)a2 + 3);
      if (!v1138)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C49D4);
      }
      if (v1138 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C49DCLL);
      }
      v1139 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1140 = 0;
      else
        v1140 = *((_QWORD *)v1139 + 4) << 32;
      if (v1138 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4EC4);
      }
      JSC::MacroAssemblerARM64::storeCond16(a3, (char)(*((_BYTE *)v1139 + 16) - 1), v1140 | (*((_DWORD *)v1139 + 12) - 1), (char)(*((_BYTE *)v1139 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x101:
      v1147 = *((_DWORD *)a2 + 3);
      if (!v1147)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4A04);
      }
      if (v1147 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4A0CLL);
      }
      v1148 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1149 = 0;
      else
        v1149 = *((_QWORD *)v1148 + 4) << 32;
      if (v1147 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4EDCLL);
      }
      JSC::MacroAssemblerARM64::storeCondRel16(a3, (char)(*((_BYTE *)v1148 + 16) - 1), v1149 | (*((_DWORD *)v1148 + 12) - 1), (char)(*((_BYTE *)v1148 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x102:
      v1156 = *((_DWORD *)a2 + 3);
      if (!v1156)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4A2CLL);
      }
      v1157 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v1158 = 0;
      else
        v1158 = *(_QWORD *)v1157 << 32;
      if (v1156 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4EECLL);
      }
      JSC::MacroAssemblerARM64::loadLink32(a3, v1158 | (*((_DWORD *)v1157 + 4) - 1), (char)(*((_BYTE *)v1157 + 48) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x103:
      v1165 = *((_DWORD *)a2 + 3);
      if (!v1165)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4A54);
      }
      v1166 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v1167 = 0;
      else
        v1167 = *(_QWORD *)v1166 << 32;
      if (v1165 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4F04);
      }
      JSC::MacroAssemblerARM64::loadLinkAcq32(a3, v1167 | (*((_DWORD *)v1166 + 4) - 1), (char)(*((_BYTE *)v1166 + 48) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x104:
      v1174 = *((_DWORD *)a2 + 3);
      if (!v1174)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4A74);
      }
      if (v1174 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4A7CLL);
      }
      v1175 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1176 = 0;
      else
        v1176 = *((_QWORD *)v1175 + 4) << 32;
      if (v1174 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4F14);
      }
      JSC::MacroAssemblerARM64::storeCond32(a3, (char)(*((_BYTE *)v1175 + 16) - 1), v1176 | (*((_DWORD *)v1175 + 12) - 1), (char)(*((_BYTE *)v1175 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x105:
      v1183 = *((_DWORD *)a2 + 3);
      if (!v1183)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4A9CLL);
      }
      if (v1183 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4AA4);
      }
      v1184 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1185 = 0;
      else
        v1185 = *((_QWORD *)v1184 + 4) << 32;
      if (v1183 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4F24);
      }
      JSC::MacroAssemblerARM64::storeCondRel32(a3, (char)(*((_BYTE *)v1184 + 16) - 1), v1185 | (*((_DWORD *)v1184 + 12) - 1), (char)(*((_BYTE *)v1184 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x107:
      v1189 = *((_DWORD *)a2 + 3);
      if (!v1189)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4AB4);
      }
      v1190 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v1191 = 0;
      else
        v1191 = *(_QWORD *)v1190 << 32;
      if (v1189 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4F34);
      }
      JSC::MacroAssemblerARM64::loadLink64(a3, v1191 | (*((_DWORD *)v1190 + 4) - 1), (char)(*((_BYTE *)v1190 + 48) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x108:
      v1195 = *((_DWORD *)a2 + 3);
      if (!v1195)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4ACCLL);
      }
      v1196 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v1197 = 0;
      else
        v1197 = *(_QWORD *)v1196 << 32;
      if (v1195 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4F3CLL);
      }
      JSC::MacroAssemblerARM64::loadLinkAcq64(a3, v1197 | (*((_DWORD *)v1196 + 4) - 1), (char)(*((_BYTE *)v1196 + 48) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x10A:
      v1201 = *((_DWORD *)a2 + 3);
      if (!v1201)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4ADCLL);
      }
      if (v1201 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4AE4);
      }
      v1202 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1203 = 0;
      else
        v1203 = *((_QWORD *)v1202 + 4) << 32;
      if (v1201 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4F4CLL);
      }
      JSC::MacroAssemblerARM64::storeCond64(a3, (char)(*((_BYTE *)v1202 + 16) - 1), v1203 | (*((_DWORD *)v1202 + 12) - 1), (char)(*((_BYTE *)v1202 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x10B:
      v1207 = *((_DWORD *)a2 + 3);
      if (!v1207)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4AFCLL);
      }
      if (v1207 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4B04);
      }
      v1208 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1209 = 0;
      else
        v1209 = *((_QWORD *)v1208 + 4) << 32;
      if (v1207 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4F54);
      }
      JSC::MacroAssemblerARM64::storeCondRel64(a3, (char)(*((_BYTE *)v1208 + 16) - 1), v1209 | (*((_DWORD *)v1208 + 12) - 1), (char)(*((_BYTE *)v1208 + 80) - 1), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x10C:
      v1210 = *((_DWORD *)a2 + 3);
      if (v1210 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4B0CLL);
      }
      if (!v1210)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4B14);
      }
      JSC::MacroAssemblerARM64::depend32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x10D:
      v1211 = *((_DWORD *)a2 + 3);
      if (v1211 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4B1CLL);
      }
      if (!v1211)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4B24);
      }
      JSC::MacroAssemblerARM64::depend64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)(*((_BYTE *)*a2 + 48) - 1), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x10E:
      if (!JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v1216 = *((_DWORD *)a2 + 3);
      if (!v1216)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4B2CLL);
      }
      if (v1216 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4B34);
      }
      v1217 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1218 = 0;
      else
        v1218 = *((_QWORD *)v1217 + 4) << 32;
      if (v1216 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4F5CLL);
      }
      JSC::MacroAssemblerARM64::atomicXchgOr8(a3, (char)(*((_BYTE *)v1217 + 16) - 1), v1218 | (*((_DWORD *)v1217 + 12) - 1), (char)(*((_BYTE *)v1217 + 80) - 1), v1212, v1213, v1214, v1215);
      goto LABEL_24;
    case 0x10F:
      if (!JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v1223 = *((_DWORD *)a2 + 3);
      if (!v1223)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4B3CLL);
      }
      if (v1223 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4B44);
      }
      v1224 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1225 = 0;
      else
        v1225 = *((_QWORD *)v1224 + 4) << 32;
      if (v1223 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4F64);
      }
      JSC::MacroAssemblerARM64::atomicXchgOr16(a3, (char)(*((_BYTE *)v1224 + 16) - 1), v1225 | (*((_DWORD *)v1224 + 12) - 1), (char)(*((_BYTE *)v1224 + 80) - 1), v1219, v1220, v1221, v1222);
      goto LABEL_24;
    case 0x110:
      if (!JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v1230 = *((_DWORD *)a2 + 3);
      if (!v1230)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4B4CLL);
      }
      if (v1230 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4B54);
      }
      v1231 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1232 = 0;
      else
        v1232 = *((_QWORD *)v1231 + 4) << 32;
      if (v1230 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4F6CLL);
      }
      JSC::MacroAssemblerARM64::atomicXchgOr32(a3, (char)(*((_BYTE *)v1231 + 16) - 1), v1232 | (*((_DWORD *)v1231 + 12) - 1), (char)(*((_BYTE *)v1231 + 80) - 1), v1226, v1227, v1228, v1229);
      goto LABEL_24;
    case 0x111:
      if (!JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v1237 = *((_DWORD *)a2 + 3);
      if (!v1237)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4B5CLL);
      }
      if (v1237 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4B64);
      }
      v1238 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1239 = 0;
      else
        v1239 = *((_QWORD *)v1238 + 4) << 32;
      if (v1237 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4F74);
      }
      JSC::MacroAssemblerARM64::atomicXchgOr64(a3, (char)(*((_BYTE *)v1238 + 16) - 1), v1239 | (*((_DWORD *)v1238 + 12) - 1), (char)(*((_BYTE *)v1238 + 80) - 1), v1233, v1234, v1235, v1236);
      goto LABEL_24;
    case 0x112:
      if (!JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v1244 = *((_DWORD *)a2 + 3);
      if (!v1244)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4B6CLL);
      }
      if (v1244 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4B74);
      }
      v1245 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1246 = 0;
      else
        v1246 = *((_QWORD *)v1245 + 4) << 32;
      if (v1244 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4F7CLL);
      }
      JSC::MacroAssemblerARM64::atomicXchgClear8(a3, (char)(*((_BYTE *)v1245 + 16) - 1), v1246 | (*((_DWORD *)v1245 + 12) - 1), (char)(*((_BYTE *)v1245 + 80) - 1), v1240, v1241, v1242, v1243);
      goto LABEL_24;
    case 0x113:
      if (!JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v1251 = *((_DWORD *)a2 + 3);
      if (!v1251)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4B7CLL);
      }
      if (v1251 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4B84);
      }
      v1252 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1253 = 0;
      else
        v1253 = *((_QWORD *)v1252 + 4) << 32;
      if (v1251 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4F84);
      }
      JSC::MacroAssemblerARM64::atomicXchgClear16(a3, (char)(*((_BYTE *)v1252 + 16) - 1), v1253 | (*((_DWORD *)v1252 + 12) - 1), (char)(*((_BYTE *)v1252 + 80) - 1), v1247, v1248, v1249, v1250);
      goto LABEL_24;
    case 0x114:
      if (!JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v1258 = *((_DWORD *)a2 + 3);
      if (!v1258)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4B8CLL);
      }
      if (v1258 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4B94);
      }
      v1259 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1260 = 0;
      else
        v1260 = *((_QWORD *)v1259 + 4) << 32;
      if (v1258 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4F8CLL);
      }
      JSC::MacroAssemblerARM64::atomicXchgClear32(a3, (char)(*((_BYTE *)v1259 + 16) - 1), v1260 | (*((_DWORD *)v1259 + 12) - 1), (char)(*((_BYTE *)v1259 + 80) - 1), v1254, v1255, v1256, v1257);
      goto LABEL_24;
    case 0x115:
      if (!JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v1265 = *((_DWORD *)a2 + 3);
      if (!v1265)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4B9CLL);
      }
      if (v1265 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4BA4);
      }
      v1266 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1267 = 0;
      else
        v1267 = *((_QWORD *)v1266 + 4) << 32;
      if (v1265 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4F94);
      }
      JSC::MacroAssemblerARM64::atomicXchgClear64(a3, (char)(*((_BYTE *)v1266 + 16) - 1), v1267 | (*((_DWORD *)v1266 + 12) - 1), (char)(*((_BYTE *)v1266 + 80) - 1), v1261, v1262, v1263, v1264);
      goto LABEL_24;
    case 0x116:
      if (!JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v1272 = *((_DWORD *)a2 + 3);
      if (!v1272)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4BACLL);
      }
      if (v1272 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4BB4);
      }
      v1273 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1274 = 0;
      else
        v1274 = *((_QWORD *)v1273 + 4) << 32;
      if (v1272 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4F9CLL);
      }
      JSC::MacroAssemblerARM64::atomicXchgXor8(a3, (char)(*((_BYTE *)v1273 + 16) - 1), v1274 | (*((_DWORD *)v1273 + 12) - 1), (char)(*((_BYTE *)v1273 + 80) - 1), v1268, v1269, v1270, v1271);
      goto LABEL_24;
    case 0x117:
      if (!JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v1279 = *((_DWORD *)a2 + 3);
      if (!v1279)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4BBCLL);
      }
      if (v1279 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4BC4);
      }
      v1280 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1281 = 0;
      else
        v1281 = *((_QWORD *)v1280 + 4) << 32;
      if (v1279 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4FA4);
      }
      JSC::MacroAssemblerARM64::atomicXchgXor16(a3, (char)(*((_BYTE *)v1280 + 16) - 1), v1281 | (*((_DWORD *)v1280 + 12) - 1), (char)(*((_BYTE *)v1280 + 80) - 1), v1275, v1276, v1277, v1278);
      goto LABEL_24;
    case 0x118:
      if (!JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v1286 = *((_DWORD *)a2 + 3);
      if (!v1286)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4BCCLL);
      }
      if (v1286 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4BD4);
      }
      v1287 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1288 = 0;
      else
        v1288 = *((_QWORD *)v1287 + 4) << 32;
      if (v1286 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4FACLL);
      }
      JSC::MacroAssemblerARM64::atomicXchgXor32(a3, (char)(*((_BYTE *)v1287 + 16) - 1), v1288 | (*((_DWORD *)v1287 + 12) - 1), (char)(*((_BYTE *)v1287 + 80) - 1), v1282, v1283, v1284, v1285);
      goto LABEL_24;
    case 0x119:
      if (!JSC::isARM64_LSE((JSC *)a2))
        goto LABEL_1006;
      v1293 = *((_DWORD *)a2 + 3);
      if (!v1293)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4BDCLL);
      }
      if (v1293 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4BE4);
      }
      v1294 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v1295 = 0;
      else
        v1295 = *((_QWORD *)v1294 + 4) << 32;
      if (v1293 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4FB4);
      }
      JSC::MacroAssemblerARM64::atomicXchgXor64(a3, (char)(*((_BYTE *)v1294 + 16) - 1), v1295 | (*((_DWORD *)v1294 + 12) - 1), (char)(*((_BYTE *)v1294 + 80) - 1), v1289, v1290, v1291, v1292);
      goto LABEL_24;
    case 0x11A:
      v300 = *((_DWORD *)a2 + 3);
      if (v300 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C33B4);
      }
      v301 = (JSC::B3::Air::Arg *)*a2;
      v302 = *((char *)*a2 + 72);
      if (v302 == 2)
      {
        if (v300 <= 3)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C3468);
        }
        JSC::MacroAssemblerARM64::compare32(a3, *(unsigned int *)v301, (char)(*((_BYTE *)v301 + 48) - 1), *((unsigned int *)v301 + 16), (char)(*((_BYTE *)v301 + 112) - 1), a6, a7, a8);
        goto LABEL_24;
      }
      if (v302 != 1)
        goto LABEL_1006;
      if (v300 <= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3470);
      }
      v310 = *(_DWORD *)v301;
      v402 = *((_BYTE *)v301 + 48) - 1;
      v312 = *((_DWORD *)v301 + 28);
      v314 = ((*((_DWORD *)v301 + 20) << 16) + 2031616) & 0x1F0000;
      if (v402 == 31)
      {
        v315 = 1797284863;
        goto LABEL_362;
      }
      v313 = v314 | (32 * (v402 & 0x1F));
      v1363 = 1795162143;
      goto LABEL_2703;
    case 0x11B:
      v177 = *((_DWORD *)a2 + 3);
      if (v177 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C330CLL);
      }
      v178 = (JSC::B3::Air::Arg *)*a2;
      v179 = *((char *)*a2 + 72);
      if (v179 == 2)
      {
        if (v177 <= 3)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C338CLL);
        }
        JSC::MacroAssemblerARM64::compare64(a3, *(unsigned int *)v178, (char)(*((_BYTE *)v178 + 48) - 1), *((unsigned int *)v178 + 16), (char)(*((_BYTE *)v178 + 112) - 1), a6, a7, a8);
        goto LABEL_24;
      }
      if (v179 != 1)
        goto LABEL_1006;
      if (v177 <= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C33BCLL);
      }
      v310 = *(_DWORD *)v178;
      v311 = *((_BYTE *)v178 + 48) - 1;
      v312 = *((_DWORD *)v178 + 28);
      v313 = ((*((_DWORD *)v178 + 20) << 16) + 2031616) & 0x1F0000;
      if (v311 != 31)
      {
        v314 = v313 | (32 * (v311 & 0x1F));
        v315 = -352321505;
LABEL_362:
        v316 = v314 | v315;
        v317 = *(_DWORD *)(a3 + 200);
        if (v317 + 4 > *(_DWORD *)(a3 + 192))
        {
          result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
          v317 = *(_DWORD *)(a3 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a3 + 56) + v317) = v316;
        v252 = *(_DWORD *)(a3 + 200) + 4;
        *(_DWORD *)(a3 + 200) = v252;
        goto LABEL_365;
      }
      v1363 = -350198785;
LABEL_2703:
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a3 + 56), v313 | v1363, a4, a4, a5, a6, a7, a8);
      v252 = *(_DWORD *)(a3 + 200);
LABEL_365:
      v318 = v312 + 31;
      if (v252 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, v10, a5, a6, a7, a8).n128_u64[0];
        v252 = *(_DWORD *)(a3 + 200);
      }
      v319 = v318 & 0x1F | ((v310 & 0xF) << 12);
LABEL_368:
      v255 = v319 ^ 0x1A9F17E0;
LABEL_290:
      *(_DWORD *)(*(_QWORD *)(a3 + 56) + v252) = v255;
      *(_DWORD *)(a3 + 200) += 4;
      goto LABEL_24;
    case 0x11C:
      v495 = *((_DWORD *)a2 + 3);
      if (v495 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3564);
      }
      v496 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) != 1)
        goto LABEL_1006;
      if (v495 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3574);
      }
      v497 = *((char *)v496 + 72);
      if (v497 != 1)
      {
        if (v497 == 4)
        {
          if (v495 <= 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C38E4);
          }
          JSC::MacroAssemblerARM64::test32((_DWORD *)a3, *(_DWORD *)v496, (char)(*((_BYTE *)v496 + 48) - 1), *((unsigned int *)v496 + 16), (char)(*((_BYTE *)v496 + 112) - 1), a6, a7, a8);
          goto LABEL_24;
        }
        goto LABEL_1006;
      }
      if (v495 <= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C35BCLL);
      }
      v498 = *(_DWORD *)v496;
      v499 = *((_DWORD *)v496 + 28);
      v500 = ((*((_DWORD *)v496 + 20) << 16) + 2031616) & 0x1F0000 | (32 * (unsigned __int16)*((_DWORD *)v496 + 12) + 992) & 0x3E0 | 0x6A00001F;
      v501 = *(_DWORD *)(a3 + 200);
      if (v501 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v501 = *(_DWORD *)(a3 + 200);
      }
      v502 = v499 + 31;
      *(_DWORD *)(*(_QWORD *)(a3 + 56) + v501) = v500;
      v503 = *(_DWORD *)(a3 + 200);
      v252 = v503 + 4;
      *(_DWORD *)(a3 + 200) = v503 + 4;
      if ((v503 + 8) > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, v10, a5, a6, a7, a8).n128_u64[0];
        v252 = *(_DWORD *)(a3 + 200);
      }
      v319 = v502 & 0x1F | ((v498 & 0xF) << 12);
      goto LABEL_368;
    case 0x11D:
      v698 = *((_DWORD *)a2 + 3);
      if (v698 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C397CLL);
      }
      if (*((_BYTE *)*a2 + 72) != 1)
        goto LABEL_1006;
      if (v698 <= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C39ACLL);
      }
      JSC::MacroAssemblerARM64::test64((_DWORD *)a3, **a2, (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
      goto LABEL_24;
    case 0x11E:
      v510 = *((_DWORD *)a2 + 3);
      if (!v510)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C359CLL);
      }
      if (v510 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C35A4);
      }
      if (v510 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C35B4);
      }
      if (v510 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C35ACLL);
      }
      v511 = **a2;
      v512 = ~*((_BYTE *)*a2 + 80);
      v513 = *((_BYTE *)*a2 + 112) - 1;
      v1392 = ~*((_BYTE *)*a2 + 48);
      v1391 = v512;
      *(_QWORD *)&v1389 = a3;
      *((_QWORD *)&v1389 + 1) = &v1392;
      v1390 = &v1391;
      JSC::MacroAssemblerARM64::floatingPointCompare<JSC::MacroAssemblerARM64::compareDouble(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}>(a3, v511, v513, (char **)&v1389, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x11F:
      v624 = *((_DWORD *)a2 + 3);
      if (!v624)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C378CLL);
      }
      if (v624 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3794);
      }
      if (v624 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C37A4);
      }
      if (v624 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C379CLL);
      }
      v625 = **a2;
      v626 = ~*((_BYTE *)*a2 + 80);
      v627 = *((_BYTE *)*a2 + 112) - 1;
      v1392 = ~*((_BYTE *)*a2 + 48);
      v1391 = v626;
      *(_QWORD *)&v1389 = a3;
      *((_QWORD *)&v1389 + 1) = &v1392;
      v1390 = &v1391;
      JSC::MacroAssemblerARM64::floatingPointCompare<JSC::MacroAssemblerARM64::compareFloat(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}>(a3, v625, v627, (char **)&v1389, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x120:
      v556 = *((_DWORD *)a2 + 3);
      if (!v556)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C361CLL);
      }
      if (v556 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3624);
      }
      if (v556 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C362CLL);
      }
      v557 = **a2;
      v558 = ~*((unsigned __int8 *)*a2 + 48);
      if (v557 == 6)
      {
        v559 = *((_BYTE *)*a2 + 80) - 1;
        v560 = (char)v559 | 0x320003E0;
        v561 = *(_DWORD *)(a3 + 200);
        if (v561 + 4 > *(_DWORD *)(a3 + 192))
        {
          v1388 = (char)(*((_BYTE *)*a2 + 80) - 1) | 0x320003E0;
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8);
          v560 = v1388;
          v561 = *(_DWORD *)(a3 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a3 + 56) + v561) = v560;
        v562 = *(_DWORD *)(a3 + 200);
        v563 = v562 + 4;
        *(_DWORD *)(a3 + 200) = v562 + 4;
        if ((v562 + 8) > *(_DWORD *)(a3 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, v10, a5, a6, a7, a8);
          v563 = *(_DWORD *)(a3 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a3 + 56) + v563) = (32 * (char)v558) | 0x1E602008;
        v564 = *(_DWORD *)(a3 + 200) + 4;
        *(_DWORD *)(a3 + 200) = v564;
        if (*(_BYTE *)(a3 + 328))
        {
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a3, a3, a4, v10, a5, a6, a7, a8);
          v564 = *(_DWORD *)(a3 + 200);
        }
        if (v564 + 4 > *(_DWORD *)(a3 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, v10, a5, a6, a7, a8);
          v564 = *(_DWORD *)(a3 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a3 + 56) + v564) = 1409286150;
        v565 = *(_DWORD *)(a3 + 200);
        v566 = v565 + 4;
        *(_DWORD *)(a3 + 200) = v565 + 4;
        v567 = v565 + 8;
        v568 = v565 + 4;
        if (v567 > *(_DWORD *)(a3 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, v10, a5, a6, a7, a8);
          v568 = *(_DWORD *)(a3 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a3 + 56) + v568) = -721215457;
        v569 = *(_DWORD *)(a3 + 200);
        v570 = v569 + 4;
        *(_DWORD *)(a3 + 200) = v569 + 4;
        if (*(_BYTE *)(a3 + 328))
          v571 = -122;
        else
          v571 = -126;
        *(_QWORD *)&v1389 = v566;
        BYTE8(v1389) = v571;
        *(_WORD *)((char *)&v1389 + 9) = 6;
        BYTE11(v1389) = -1;
        if ((v569 + 8) > *(_DWORD *)(a3 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, v10, a5, a6, a7, a8);
          v570 = *(_DWORD *)(a3 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a3 + 56) + v570) = v559 | 0x1A9F17E0;
        *(_DWORD *)(a3 + 200) += 4;
      }
      else
      {
        v693 = *((_BYTE *)*a2 + 80) - 1;
        if (v557 != 7)
        {
          JSC::MacroAssemblerARM64::compareDoubleWithZero(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}::operator()((_DWORD *)a3, v558, a4, a4, a5, a6, a7, a8);
          v614 = (v693 & 0x1F | ((v557 & 0xF) << 12)) ^ 0x1A9F17E0u;
          goto LABEL_772;
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a3, 0, (char)(*((_BYTE *)*a2 + 80) - 1), a4, a5, a6, a7, a8);
        JSC::MacroAssemblerARM64::compareDoubleWithZero(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}::operator()((_DWORD *)a3, v558, v1315, v1316, v1317, v1318, v1319, v1320);
        if (*(_BYTE *)(a3 + 328))
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a3, v1321, v1322, v1323, v1324, v1325, v1326, v1327);
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a3 + 56), 1409286150, v1322, v1323, v1324, v1325, v1326, v1327);
        v1328 = *(_DWORD *)(a3 + 200);
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a3 + 56), 3573751839, v1329, v1330, v1331, v1332, v1333, v1334);
        if (*(_BYTE *)(a3 + 328))
          v1341 = -122;
        else
          v1341 = -126;
        *(_QWORD *)&v1389 = v1328;
        BYTE8(v1389) = v1341;
        *(_WORD *)((char *)&v1389 + 9) = 6;
        BYTE11(v1389) = -1;
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a3 + 56), v693 | 0x1A9F07E0u, v1335, v1336, v1337, v1338, v1339, v1340);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v1389, a3, a4, v10, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x121:
      v690 = *((_DWORD *)a2 + 3);
      if (!v690)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3944);
      }
      if (v690 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C394CLL);
      }
      if (v690 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3954);
      }
      v691 = **a2;
      v692 = *((_BYTE *)*a2 + 80) - 1;
      LOBYTE(v1389) = ~*((_BYTE *)*a2 + 48);
      JSC::MacroAssemblerARM64::floatingPointCompare<JSC::MacroAssemblerARM64::compareFloatWithZero(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}>(a3, v691, v692, a3, (char *)&v1389, a6, a7, a8);
      goto LABEL_24;
    case 0x122:
      if (*((_DWORD *)a2 + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BDA7CLL);
      }
      goto LABEL_1006;
    case 0x123:
      v29 = *((_DWORD *)a2 + 3);
      if (v29 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C2F3CLL);
      }
      v30 = (JSC::B3::Air::Arg *)*a2;
      v31 = *((char *)*a2 + 40);
      if (v31 != 1)
      {
        if (v31 <= 0xA && ((1 << v31) & 0x680) != 0 && v29 <= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1980BC164);
        }
        goto LABEL_1006;
      }
      if (v29 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C2F44);
      }
      v32 = *((char *)v30 + 72);
      if (v32 == 1)
      {
        JSC::MacroAssemblerARM64::branch32(a3, *(unsigned int *)v30, (char)(*((_BYTE *)v30 + 48) - 1), (char)(*((_BYTE *)v30 + 80) - 1), a5, a6, a7, a8, (uint64_t)&v1389);
      }
      else
      {
        if (v32 != 2)
          goto LABEL_1006;
        JSC::MacroAssemblerARM64::branch32(a3, *(unsigned int *)v30, (char)(*((_BYTE *)v30 + 48) - 1), *((unsigned int *)v30 + 16), a5, a6, a7, a8, (uint64_t)&v1389);
      }
      goto LABEL_45;
    case 0x124:
      v57 = *((_DWORD *)a2 + 3);
      if (v57 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C2F74);
      }
      v58 = (JSC::B3::Air::Arg *)*a2;
      v59 = *((char *)*a2 + 40);
      if (v59 != 1)
      {
        if (v59 <= 0xA && ((1 << v59) & 0x680) != 0 && v57 <= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C39D4);
        }
        goto LABEL_1006;
      }
      if (v57 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C2F7CLL);
      }
      v60 = *((char *)v58 + 72);
      if (v60 == 1)
      {
        JSC::MacroAssemblerARM64::branch64(a3, *(unsigned int *)v58, (char)(*((_BYTE *)v58 + 48) - 1), (char)(*((_BYTE *)v58 + 80) - 1), a5, a6, a7, a8, (uint64_t)&v1389);
      }
      else
      {
        if (v60 != 2)
          goto LABEL_1006;
        JSC::MacroAssemblerARM64::branch64(a3, *(unsigned int *)v58, (char)(*((_BYTE *)v58 + 48) - 1), *((unsigned int *)v58 + 16), a5, a6, a7, a8, (uint64_t)&v1389);
      }
      goto LABEL_45;
    case 0x125:
      if (*((_DWORD *)a2 + 3) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C0834);
      }
      goto LABEL_1006;
    case 0x126:
      v61 = *((_DWORD *)a2 + 3);
      if (v61 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C2F94);
      }
      v62 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) != 1)
        goto LABEL_1006;
      if (v61 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C2F9CLL);
      }
      v63 = *((char *)v62 + 72);
      if (v63 == 1)
      {
        JSC::MacroAssemblerARM64::branchTest32(a3, *(unsigned int *)v62, (char)(*((_BYTE *)v62 + 48) - 1), (char)(*((_BYTE *)v62 + 80) - 1), a5, a6, a7, a8, (uint64_t)&v1389);
      }
      else
      {
        if (v63 != 4)
          goto LABEL_1006;
        JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)*((unsigned int *)v62 + 16), a3, *(unsigned int *)v62, (char)(*((_BYTE *)v62 + 48) - 1), a5, a6, a7, a8, (uint64_t)&v1389, result);
      }
      goto LABEL_45;
    case 0x127:
      v41 = *((_DWORD *)a2 + 3);
      if (v41 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C2F54);
      }
      v42 = (JSC::B3::Air::Arg *)*a2;
      v43 = *((char *)*a2 + 40);
      if (v43 != 1)
      {
        if (v43 <= 0xA && ((1 << v43) & 0x680) != 0 && v41 <= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1980BC0ECLL);
        }
        goto LABEL_1006;
      }
      if (v41 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C2F5CLL);
      }
      v44 = *((char *)v42 + 72);
      if (v44 == 1)
      {
        JSC::MacroAssemblerARM64::branchTest64(a3, *(unsigned int *)v42, (char)(*((_BYTE *)v42 + 48) - 1), (char)(*((_BYTE *)v42 + 80) - 1), a5, a6, a7, a8, (uint64_t)&v1389);
      }
      else
      {
        if (v44 != 5)
          goto LABEL_1006;
        JSC::MacroAssemblerARM64::branchTest64(*((JSC::ARM64LogicalImmediate **)v42 + 8), a3, *(unsigned int *)v42, (char)(*((_BYTE *)v42 + 48) - 1), a5, a6, a7, a8, (uint64_t)&v1389);
      }
      goto LABEL_45;
    case 0x128:
      v977 = *((_DWORD *)a2 + 3);
      if (v977 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4C8CLL);
      }
      if (v977 == 2 && *((_BYTE *)*a2 + 40) == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BF90CLL);
      }
      goto LABEL_1006;
    case 0x129:
      v984 = *((_DWORD *)a2 + 3);
      if (v984 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4CA4);
      }
      if (v984 == 2 && *((_BYTE *)*a2 + 40) == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BFA38);
      }
      goto LABEL_1006;
    case 0x12A:
      v124 = *((_DWORD *)a2 + 3);
      if (!v124)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C32B4);
      }
      if (v124 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C32BCLL);
      }
      if (v124 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C32C4);
      }
      v125 = **a2;
      v126 = ~(*a2)[12];
      v127 = ~(*a2)[20];
      v128 = *(_DWORD *)(a3 + 200);
      if (v128 + 4 > *(_DWORD *)(a3 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8);
        v128 = *(_DWORD *)(a3 + 200);
      }
      v129 = (32 * (char)v126) | ((char)v127 << 16) | 0x1E602000;
      goto LABEL_159;
    case 0x12B:
      v623 = *((_DWORD *)a2 + 3);
      if (!v623)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C375CLL);
      }
      if (v623 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3764);
      }
      if (v623 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C376CLL);
      }
      JSC::MacroAssemblerARM64::branchFloat((_DWORD *)a3, **a2, (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8, (uint64_t)&v1389);
      goto LABEL_45;
    case 0x12C:
      v263 = *((_DWORD *)a2 + 3);
      if (!v263)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C337CLL);
      }
      if (v263 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3384);
      }
      v125 = **a2;
      v264 = ~(*a2)[12];
      v128 = *(_DWORD *)(a3 + 200);
      if (v128 + 4 > *(_DWORD *)(a3 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8);
        v128 = *(_DWORD *)(a3 + 200);
      }
      v129 = (32 * (char)v264) | 0x1E602008;
LABEL_159:
      *(_DWORD *)(*(_QWORD *)(a3 + 56) + v128) = v129;
      *(_DWORD *)(a3 + 200) += 4;
      JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(a3, v125, a4, v10, a5, a6, a7, a8, (uint64_t)&v1389);
      goto LABEL_45;
    case 0x12D:
      v638 = *((_DWORD *)a2 + 3);
      if (v638 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C37B4);
      }
      if (!v638)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C37BCLL);
      }
      JSC::MacroAssemblerARM64::branchFloatWithZero((uint64_t)&v1389, a3, **a2, (char)~*((_BYTE *)*a2 + 48), a5, a6, a7, a8);
      goto LABEL_45;
    case 0x12E:
      v130 = *((_DWORD *)a2 + 3);
      if (v130 == 3)
      {
        v131 = (JSC::B3::Air::Arg *)*a2;
        v132 = *((char *)*a2 + 40);
        if (v132 == 2)
        {
          if (*((_BYTE *)v131 + 72) != 1)
            goto LABEL_1006;
          v133 = (char)(*((_BYTE *)v131 + 80) - 1);
          JSC::MacroAssemblerARM64::branchAdd32(a3, *(unsigned int *)v131, v133, *((unsigned int *)v131 + 8), v133, a6, a7, a8, (uint64_t)&v1389);
LABEL_45:
          v45 = *(_QWORD *)((char *)&v1389 + 4);
          *(_DWORD *)a1 = v1389;
          *(uint64_t *)((char *)a1 + 4) = v45;
          return result;
        }
        if (v132 != 1 || *((_BYTE *)v131 + 72) != 1)
          goto LABEL_1006;
        v282 = *(unsigned int *)v131;
        v284 = (char)(*((_BYTE *)v131 + 48) - 1);
        v283 = (char)(*((_BYTE *)v131 + 80) - 1);
        v286 = a3;
        v285 = v283;
      }
      else
      {
        if (v130 != 4)
          goto LABEL_1006;
        v281 = (JSC::B3::Air::Arg *)*a2;
        if (*((_BYTE *)*a2 + 40) != 1 || *((_BYTE *)v281 + 72) != 1)
          goto LABEL_1006;
        v282 = *(unsigned int *)v281;
        v283 = (char)(*((_BYTE *)v281 + 48) - 1);
        v284 = (char)(*((_BYTE *)v281 + 80) - 1);
        v285 = (char)(*((_BYTE *)v281 + 112) - 1);
        v286 = a3;
      }
      JSC::MacroAssemblerARM64::branchAdd32(v286, v282, v283, v284, v285, a6, a7, a8, (uint64_t)&v1389);
      goto LABEL_45;
    case 0x12F:
      v628 = *((_DWORD *)a2 + 3);
      if (v628 == 3)
      {
        v629 = (JSC::B3::Air::Arg *)*a2;
        v630 = *((char *)*a2 + 40);
        if (v630 == 2)
        {
          v631 = (char)(*((_BYTE *)v629 + 80) - 1);
          JSC::MacroAssemblerARM64::branchAdd64((uint64_t)&v1389, a3, *(unsigned int *)v629, v631, *((unsigned int *)v629 + 8), v631, a7, a8);
          goto LABEL_45;
        }
        if (v630 != 1)
          goto LABEL_1006;
        v661 = *(unsigned int *)v629;
        v663 = (char)(*((_BYTE *)v629 + 48) - 1);
        v662 = (char)(*((_BYTE *)v629 + 80) - 1);
        v665 = a3;
        v664 = v662;
      }
      else
      {
        if (v628 != 4)
          goto LABEL_1006;
        v660 = (JSC::B3::Air::Arg *)*a2;
        if (*((_BYTE *)*a2 + 40) != 1 || *((_BYTE *)v660 + 72) != 1)
          goto LABEL_1006;
        v661 = *(unsigned int *)v660;
        v662 = (char)(*((_BYTE *)v660 + 48) - 1);
        v663 = (char)(*((_BYTE *)v660 + 80) - 1);
        v664 = (char)(*((_BYTE *)v660 + 112) - 1);
        v665 = a3;
      }
      JSC::MacroAssemblerARM64::branchAdd64(v665, v661, v662, v663, v664, a6, a7, a8, (uint64_t)&v1389);
      goto LABEL_45;
    case 0x130:
      if (*((_DWORD *)a2 + 3) != 4 || *((_BYTE *)*a2 + 72) != 1)
        goto LABEL_1006;
      JSC::MacroAssemblerARM64::branchMul32(a3, **a2, (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8, (uint64_t)&v1389);
      goto LABEL_45;
    case 0x131:
      if (*((_DWORD *)a2 + 3) != 5)
        goto LABEL_1006;
      JSC::MacroAssemblerARM64::branchMul64(a3, **a2, (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), (char)(*((_BYTE *)*a2 + 112) - 1), (char)(*((_BYTE *)*a2 + 144) - 1), a7, a8, (uint64_t)&v1389);
      goto LABEL_45;
    case 0x132:
      v440 = *((_DWORD *)a2 + 3);
      if (v440 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3504);
      }
      v441 = (JSC::B3::Air::Arg *)*a2;
      v442 = *((char *)*a2 + 40);
      if (v442 == 1)
      {
        if (v440 <= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C350CLL);
        }
        if (*((_BYTE *)v441 + 72) != 1)
          goto LABEL_1006;
        v443 = (char)(*((_BYTE *)v441 + 80) - 1);
        JSC::MacroAssemblerARM64::branchSub32(a3, *(unsigned int *)v441, v443, (char)(*((_BYTE *)v441 + 48) - 1), v443, a6, a7, a8, (uint64_t)&v1389);
      }
      else
      {
        if (v442 != 2)
          goto LABEL_1006;
        if (v440 <= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C504CLL);
        }
        if (*((_BYTE *)v441 + 72) != 1)
          goto LABEL_1006;
        v712 = (char)(*((_BYTE *)v441 + 80) - 1);
        JSC::MacroAssemblerARM64::branchSub32(a3, *(unsigned int *)v441, v712, *((unsigned int *)v441 + 8), v712, a6, a7, a8, (uint64_t)&v1389);
      }
      goto LABEL_45;
    case 0x133:
      v811 = *((_DWORD *)a2 + 3);
      if (v811 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4254);
      }
      v812 = (JSC::B3::Air::Arg *)*a2;
      v813 = *((char *)*a2 + 40);
      if (v813 == 1)
      {
        if (v811 <= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C5094);
        }
        v1344 = (char)(*((_BYTE *)v812 + 80) - 1);
        JSC::MacroAssemblerARM64::branchSub64(a3, *(_DWORD *)v812, v1344, (char)(*((_BYTE *)v812 + 48) - 1), v1344, a6, a7, a8, (uint64_t)&v1389);
      }
      else
      {
        if (v813 != 2)
          goto LABEL_1006;
        if (v811 <= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C5074);
        }
        v814 = (char)(*((_BYTE *)v812 + 80) - 1);
        JSC::MacroAssemblerARM64::branchSub64(a3, *(unsigned int *)v812, v814, *((unsigned int *)v812 + 8), v814, a6, a7, a8, (uint64_t)&v1389);
      }
      goto LABEL_45;
    case 0x134:
      v742 = *((_DWORD *)a2 + 3);
      if (v742 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3AC4);
      }
      if (!v742)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3ACCLL);
      }
      JSC::MacroAssemblerARM64::branchNeg32(a3, **a2, (char)(*((_BYTE *)*a2 + 48) - 1), a4, a5, a6, a7, a8, (uint64_t)&v1389);
      goto LABEL_45;
    case 0x135:
      v837 = *((_DWORD *)a2 + 3);
      if (v837 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3E44);
      }
      if (!v837)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3E4CLL);
      }
      JSC::MacroAssemblerARM64::branchNeg64(a3, **a2, (char)(*((_BYTE *)*a2 + 48) - 1), a4, a5, a6, a7, a8, (uint64_t)&v1389);
      goto LABEL_45;
    case 0x136:
      v174 = *((_DWORD *)a2 + 3);
      if (v174 == 6)
      {
        v175 = (JSC::B3::Air::Arg *)*a2;
        v176 = *((char *)*a2 + 72);
        if (v176 == 2)
        {
          JSC::MacroAssemblerARM64::moveConditionally32(a3, *(unsigned int *)v175, (char)(*((_BYTE *)v175 + 48) - 1), *((unsigned int *)v175 + 16), (char)(*((_BYTE *)v175 + 112) - 1), (char)(*((_BYTE *)v175 + 144) - 1), (char)(*((_BYTE *)v175 + 176) - 1), a8);
          goto LABEL_24;
        }
        if (v176 == 1)
        {
          JSC::MacroAssemblerARM64::moveConditionally32((_DWORD *)a3, *(unsigned int *)v175, (char)(*((_BYTE *)v175 + 48) - 1), (char)(*((_BYTE *)v175 + 80) - 1), (char)(*((_BYTE *)v175 + 112) - 1), (char)(*((_BYTE *)v175 + 144) - 1), (char)(*((_BYTE *)v175 + 176) - 1), a8);
          goto LABEL_24;
        }
      }
      else if (v174 == 5)
      {
        JSC::MacroAssemblerARM64::moveConditionally32((_DWORD *)a3, **a2, (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), (char)(*((_BYTE *)*a2 + 112) - 1), (char)(*((_BYTE *)*a2 + 144) - 1), a7, a8);
        goto LABEL_24;
      }
      goto LABEL_1006;
    case 0x137:
      v408 = *((_DWORD *)a2 + 3);
      if (v408 != 6)
      {
        if (v408 == 5)
        {
          JSC::MacroAssemblerARM64::moveConditionally64((_DWORD *)a3, **a2, (char)(*((_BYTE *)*a2 + 48) - 1), (char)(*((_BYTE *)*a2 + 80) - 1), (char)(*((_BYTE *)*a2 + 112) - 1), (char)(*((_BYTE *)*a2 + 144) - 1), a7, a8);
          goto LABEL_24;
        }
        goto LABEL_1006;
      }
      v409 = (JSC::B3::Air::Arg *)*a2;
      v410 = *((char *)*a2 + 72);
      if (v410 == 2)
      {
        JSC::MacroAssemblerARM64::moveConditionally64(a3, *(unsigned int *)v409, (char)(*((_BYTE *)v409 + 48) - 1), *((unsigned int *)v409 + 16), (char)(*((_BYTE *)v409 + 112) - 1), (char)(*((_BYTE *)v409 + 144) - 1), (char)(*((_BYTE *)v409 + 176) - 1), a8);
        goto LABEL_24;
      }
      if (v410 != 1)
        goto LABEL_1006;
      v541 = *(_DWORD *)v409;
      v542 = *((unsigned __int8 *)v409 + 48) - 1;
      v543 = *((_DWORD *)v409 + 28);
      v544 = *((_DWORD *)v409 + 36);
      v545 = *((_DWORD *)v409 + 44);
      v546 = ((*((_DWORD *)v409 + 20) << 16) + 2031616) & 0x1F0000;
      if (v542 == 31)
      {
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a3 + 56), v546 | 0xEB2063FF, a4, a4, a5, a6, a7, a8);
        v121 = *(_DWORD *)(a3 + 200);
      }
      else
      {
        v547 = v546 | (32 * (v542 & 0x1F)) | 0xEB00001F;
        v548 = *(_DWORD *)(a3 + 200);
        if (v548 + 4 > *(_DWORD *)(a3 + 192))
        {
          v1387 = v547;
          result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
          v547 = v1387;
          v548 = *(_DWORD *)(a3 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a3 + 56) + v548) = v547;
        v121 = *(_DWORD *)(a3 + 200) + 4;
        *(_DWORD *)(a3 + 200) = v121;
      }
      v549 = v545 + 31;
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, v10, a5, a6, a7, a8).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v122 = (32 * (_WORD)v543 + 992) & 0x3E0 | (v541 << 12) | ((v544 << 16) + 2031616) & 0x1F0000 | v549 & 0x1F;
      goto LABEL_653;
    case 0x138:
      v359 = *((_DWORD *)a2 + 3);
      if (v359 != 6)
      {
        if (v359 == 5 && *((_BYTE *)*a2 + 72) == 1)
        {
          v765 = (JSC::B3::Air::Arg *)*a2;
          JSC::MacroAssemblerARM64::moveConditionallyTest32((_DWORD *)a3, *(unsigned int *)v765, (char)(*((_BYTE *)v765 + 48) - 1), (char)(*((_BYTE *)v765 + 80) - 1), (char)(*((_BYTE *)v765 + 112) - 1), (char)(*((_BYTE *)v765 + 144) - 1), a7, a8);
          goto LABEL_24;
        }
        goto LABEL_1006;
      }
      v360 = (JSC::B3::Air::Arg *)*a2;
      v361 = *((char *)*a2 + 72);
      if (v361 == 1)
      {
        v225 = *(_DWORD *)v360;
        v362 = *((_DWORD *)v360 + 12);
        v363 = *((_DWORD *)v360 + 20);
        v228 = *((_DWORD *)v360 + 28);
        v229 = *((_DWORD *)v360 + 36);
        v230 = *((_DWORD *)v360 + 44);
        v231 = (32 * (_WORD)v362 + 992) & 0x3E0 | ((v363 << 16) + 2031616) & 0x1F0000;
        v232 = 1778384927;
LABEL_268:
        v233 = v231 | v232;
        v234 = *(_DWORD *)(a3 + 200);
        if (v234 + 4 > *(_DWORD *)(a3 + 192))
        {
          v1381 = v233;
          v1384 = v230;
          result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
          v233 = v1381;
          LOBYTE(v230) = v1384;
          v234 = *(_DWORD *)(a3 + 200);
        }
        v235 = v230 + 31;
        *(_DWORD *)(*(_QWORD *)(a3 + 56) + v234) = v233;
        v236 = *(_DWORD *)(a3 + 200);
        v237 = v236 + 4;
        *(_DWORD *)(a3 + 200) = v236 + 4;
        if ((v236 + 8) > *(_DWORD *)(a3 + 192))
        {
          v1342 = v235;
          result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, v10, a5, a6, a7, a8).n128_u64[0];
          v235 = v1342;
          v237 = *(_DWORD *)(a3 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a3 + 56) + v237) = (32 * (_WORD)v228 + 992) & 0x3E0 | (v225 << 12) | ((v229 << 16) + 2031616) & 0x1F0000 | v235 & 0x1F | 0x9A800000;
        goto LABEL_96;
      }
      if (v361 != 4)
        goto LABEL_1006;
      v530 = *(_DWORD *)v360;
      v531 = *((_DWORD *)v360 + 28);
      v532 = *((_DWORD *)v360 + 36);
      v533 = *((_DWORD *)v360 + 44) + 31;
      JSC::MacroAssemblerARM64::test32(a3, (char)(*((_BYTE *)v360 + 48) - 1), (JSC::ARM64LogicalImmediate *)*((unsigned int *)v360 + 16), a4, a5, a6, a7, a8);
      v121 = *(_DWORD *)(a3 + 200);
      if (v121 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), v534, v535, v536, v537, v538, v539, v540).n128_u64[0];
        v121 = *(_DWORD *)(a3 + 200);
      }
      v122 = (32 * (_WORD)v531 + 992) & 0x3E0 | (v530 << 12) | ((v532 << 16) + 2031616) & 0x1F0000 | v533 & 0x1F;
LABEL_653:
      v123 = -1702887424;
      goto LABEL_171;
    case 0x139:
      v223 = *((_DWORD *)a2 + 3);
      if (v223 != 6)
      {
        if (v223 == 5 && *((_BYTE *)*a2 + 72) == 1)
        {
          v755 = (JSC::B3::Air::Arg *)*a2;
          JSC::MacroAssemblerARM64::moveConditionallyTest64((_DWORD *)a3, *(unsigned int *)v755, (char)(*((_BYTE *)v755 + 48) - 1), (char)(*((_BYTE *)v755 + 80) - 1), (char)(*((_BYTE *)v755 + 112) - 1), (char)(*((_BYTE *)v755 + 144) - 1), a7, a8);
          goto LABEL_24;
        }
        goto LABEL_1006;
      }
      v224 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 72) != 1)
        goto LABEL_1006;
      v225 = *(_DWORD *)v224;
      v226 = *((_DWORD *)v224 + 12);
      v227 = *((_DWORD *)v224 + 20);
      v228 = *((_DWORD *)v224 + 28);
      v229 = *((_DWORD *)v224 + 36);
      v230 = *((_DWORD *)v224 + 44);
      v231 = (32 * (_WORD)v226 + 992) & 0x3E0 | ((v227 << 16) + 2031616) & 0x1F0000;
      v232 = -369098721;
      goto LABEL_268;
    case 0x13A:
      v457 = *((_DWORD *)a2 + 3);
      if (v457 == 6)
      {
        v458 = **a2;
        v459 = ~(*a2)[12];
        v460 = ~(*a2)[20];
        v461 = *((_BYTE *)*a2 + 112) - 1;
        v462 = *((_BYTE *)*a2 + 144) - 1;
        v463 = *((_BYTE *)*a2 + 176) - 1;
        v464 = *(_DWORD *)(a3 + 200);
        if (v464 + 4 > *(_DWORD *)(a3 + 192))
        {
          v1382 = ~*((_BYTE *)*a2 + 80);
          v1385 = ~*((_BYTE *)*a2 + 48);
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8);
          LOBYTE(v460) = v1382;
          LOBYTE(v459) = v1385;
          v464 = *(_DWORD *)(a3 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a3 + 56) + v464) = (32 * (char)v459) | ((char)v460 << 16) | 0x1E602000;
        *(_DWORD *)(a3 + 200) += 4;
        JSC::MacroAssemblerARM64::moveConditionallyAfterFloatingPointCompare<64>(a3, v458, v461, v462, v463, a6, a7, a8);
        goto LABEL_24;
      }
      if (v457 != 5)
        goto LABEL_1006;
      JSC::MacroAssemblerARM64::moveConditionallyDouble((_DWORD *)a3, **a2, (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)(*((_BYTE *)*a2 + 112) - 1), (char)(*((_BYTE *)*a2 + 144) - 1), a7, a8);
      goto LABEL_24;
    case 0x13B:
      v616 = *((_DWORD *)a2 + 3);
      if (v616 == 5)
      {
        JSC::MacroAssemblerARM64::moveConditionallyDoubleWithZero(a3, **a2, (char)~*((_BYTE *)*a2 + 48), (char)(*((_BYTE *)*a2 + 80) - 1), (char)(*((_BYTE *)*a2 + 112) - 1), (char)(*((_BYTE *)*a2 + 144) - 1), a7, a8);
        goto LABEL_24;
      }
      if (v616 == 4)
      {
        JSC::MacroAssemblerARM64::moveConditionallyDoubleWithZero((_DWORD *)a3, **a2, (char)~*((_BYTE *)*a2 + 48), (char)(*((_BYTE *)*a2 + 80) - 1), (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
        goto LABEL_24;
      }
      goto LABEL_1006;
    case 0x13C:
      v990 = *((_DWORD *)a2 + 3);
      if (v990 == 5)
      {
        JSC::MacroAssemblerARM64::moveConditionallyFloat((_DWORD *)a3, **a2, (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)(*((_BYTE *)*a2 + 112) - 1), (char)(*((_BYTE *)*a2 + 144) - 1), a7, a8);
        goto LABEL_24;
      }
      if (v990 != 6)
        goto LABEL_1006;
      JSC::MacroAssemblerARM64::moveConditionallyFloat((_DWORD *)a3, **a2, (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)(*((_BYTE *)*a2 + 112) - 1), (char)(*((_BYTE *)*a2 + 144) - 1), (char)(*((_BYTE *)*a2 + 176) - 1), a8);
      goto LABEL_24;
    case 0x13D:
      v996 = *((_DWORD *)a2 + 3);
      if (v996 == 4)
      {
        JSC::MacroAssemblerARM64::moveConditionallyFloatWithZero((_DWORD *)a3, **a2, (char)~*((_BYTE *)*a2 + 48), (char)(*((_BYTE *)*a2 + 80) - 1), (char)(*((_BYTE *)*a2 + 112) - 1), a6, a7, a8);
        goto LABEL_24;
      }
      if (v996 != 5)
        goto LABEL_1006;
      JSC::MacroAssemblerARM64::moveConditionallyFloatWithZero((_DWORD *)a3, **a2, (char)~*((_BYTE *)*a2 + 48), (char)(*((_BYTE *)*a2 + 80) - 1), (char)(*((_BYTE *)*a2 + 112) - 1), (char)(*((_BYTE *)*a2 + 144) - 1), a7, a8);
      goto LABEL_24;
    case 0x13E:
      v1002 = *((_DWORD *)a2 + 3);
      if (v1002 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4D14);
      }
      v1003 = (JSC::B3::Air::Arg *)*a2;
      v1004 = *((char *)*a2 + 40);
      if (v1004 == 1)
      {
        if (v1002 <= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C4D1CLL);
        }
        v1005 = *((char *)v1003 + 72);
        if (v1005 == 2)
        {
          if (v1002 <= 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C50E4);
          }
          if (v1002 == 4)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C509CLL);
          }
          if (v1002 <= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C50ECLL);
          }
          JSC::MacroAssemblerARM64::moveDoubleConditionally32(a3, *(unsigned int *)v1003, (char)(*((_BYTE *)v1003 + 48) - 1), *((unsigned int *)v1003 + 16), (char)~*((_BYTE *)v1003 + 112), (char)~*((_BYTE *)v1003 + 144), (char)~*((_BYTE *)v1003 + 176), a8);
          goto LABEL_24;
        }
        if (v1005 == 1)
        {
          if (v1002 <= 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C50B4);
          }
          if (v1002 == 4)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C507CLL);
          }
          if (v1002 <= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C50BCLL);
          }
          JSC::MacroAssemblerARM64::moveDoubleConditionally32((_DWORD *)a3, *(unsigned int *)v1003, (char)(*((_BYTE *)v1003 + 48) - 1), (char)(*((_BYTE *)v1003 + 80) - 1), (char)~*((_BYTE *)v1003 + 112), (char)~*((_BYTE *)v1003 + 144), (char)~*((_BYTE *)v1003 + 176), a8);
          goto LABEL_24;
        }
      }
      else if (v1004 <= 0xA && ((1 << v1004) & 0x680) != 0 && v1002 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C2FFCLL);
      }
      goto LABEL_1006;
    case 0x13F:
      v1012 = *((_DWORD *)a2 + 3);
      if (v1012 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4D4CLL);
      }
      v1013 = (JSC::B3::Air::Arg *)*a2;
      v1014 = *((char *)*a2 + 40);
      if (v1014 == 1)
      {
        if (v1012 <= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C4D54);
        }
        v1015 = *((char *)v1013 + 72);
        if (v1015 == 2)
        {
          if (v1012 <= 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C50F4);
          }
          if (v1012 == 4)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C50A4);
          }
          if (v1012 <= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C50FCLL);
          }
          JSC::MacroAssemblerARM64::moveDoubleConditionally64(a3, *(unsigned int *)v1013, (char)(*((_BYTE *)v1013 + 48) - 1), *((unsigned int *)v1013 + 16), (char)~*((_BYTE *)v1013 + 112), (char)~*((_BYTE *)v1013 + 144), (char)~*((_BYTE *)v1013 + 176), a8);
          goto LABEL_24;
        }
        if (v1015 == 1)
        {
          if (v1012 <= 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C50C4);
          }
          if (v1012 == 4)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C5084);
          }
          if (v1012 <= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C50CCLL);
          }
          JSC::MacroAssemblerARM64::moveDoubleConditionally64((_DWORD *)a3, *(unsigned int *)v1013, (char)(*((_BYTE *)v1013 + 48) - 1), (char)(*((_BYTE *)v1013 + 80) - 1), (char)~*((_BYTE *)v1013 + 112), (char)~*((_BYTE *)v1013 + 144), (char)~*((_BYTE *)v1013 + 176), a8);
          goto LABEL_24;
        }
      }
      else if (v1014 <= 0xA && ((1 << v1014) & 0x680) != 0 && v1012 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3024);
      }
      goto LABEL_1006;
    case 0x140:
      v1021 = *((_DWORD *)a2 + 3);
      if (v1021 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4D7CLL);
      }
      v1022 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) != 1)
        goto LABEL_1006;
      if (v1021 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4D84);
      }
      v1023 = *((char *)v1022 + 72);
      if (v1023 == 4)
      {
        if (v1021 <= 3)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C5104);
        }
        if (v1021 == 4)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C50ACLL);
        }
        if (v1021 <= 5)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C510CLL);
        }
        JSC::MacroAssemblerARM64::moveDoubleConditionallyTest32((_DWORD *)a3, *(_DWORD *)v1022, (char)(*((_BYTE *)v1022 + 48) - 1), *((unsigned int *)v1022 + 16), (char)~*((_BYTE *)v1022 + 112), (char)~*((_BYTE *)v1022 + 144), (char)~*((_BYTE *)v1022 + 176), a8);
        goto LABEL_24;
      }
      if (v1023 != 1)
        goto LABEL_1006;
      if (v1021 <= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C50D4);
      }
      if (v1021 == 4)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C508CLL);
      }
      if (v1021 <= 5)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C50DCLL);
      }
      JSC::MacroAssemblerARM64::moveDoubleConditionallyTest32((_DWORD *)a3, *(unsigned int *)v1022, (char)(*((_BYTE *)v1022 + 48) - 1), (char)(*((_BYTE *)v1022 + 80) - 1), (char)~*((_BYTE *)v1022 + 112), (char)~*((_BYTE *)v1022 + 144), (char)~*((_BYTE *)v1022 + 176), a8);
      goto LABEL_24;
    case 0x141:
      v1036 = *((_DWORD *)a2 + 3);
      if (v1036 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4DBCLL);
      }
      v1037 = (JSC::B3::Air::Arg *)*a2;
      v1038 = *((char *)*a2 + 40);
      if (v1038 == 1)
      {
        if (v1036 <= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1980C4DC4);
        }
        if (*((_BYTE *)v1037 + 72) == 1)
        {
          if (v1036 <= 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C4DCCLL);
          }
          if (v1036 == 4)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C47B4);
          }
          if (v1036 <= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x1980C4DD4);
          }
          JSC::MacroAssemblerARM64::moveDoubleConditionallyTest64((_DWORD *)a3, *(unsigned int *)v1037, (char)(*((_BYTE *)v1037 + 48) - 1), (char)(*((_BYTE *)v1037 + 80) - 1), (char)~*((_BYTE *)v1037 + 112), (char)~*((_BYTE *)v1037 + 144), (char)~*((_BYTE *)v1037 + 176), a8);
          goto LABEL_24;
        }
      }
      else if (v1038 <= 0xA && ((1 << v1038) & 0x680) != 0 && v1036 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C304CLL);
      }
      goto LABEL_1006;
    case 0x142:
      v517 = *((_DWORD *)a2 + 3);
      if (!v517)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C35C4);
      }
      if (v517 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C35CCLL);
      }
      if (v517 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C35E4);
      }
      if (v517 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C35D4);
      }
      if (v517 <= 4)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C35ECLL);
      }
      if (v517 == 5)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C35DCLL);
      }
      v518 = **a2;
      v519 = ~(*a2)[12];
      v520 = ~(*a2)[20];
      v521 = ~*((_BYTE *)*a2 + 112);
      v522 = ~*((_BYTE *)*a2 + 144);
      v523 = ~*((_BYTE *)*a2 + 176);
      v524 = *(_DWORD *)(a3 + 200);
      if (v524 + 4 > *(_DWORD *)(a3 + 192))
      {
        v1383 = ~*((_BYTE *)*a2 + 80);
        v1386 = ~*((_BYTE *)*a2 + 48);
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8);
        LOBYTE(v520) = v1383;
        LOBYTE(v519) = v1386;
        v524 = *(_DWORD *)(a3 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a3 + 56) + v524) = (32 * (char)v519) | ((char)v520 << 16) | 0x1E602000;
      *(_DWORD *)(a3 + 200) += 4;
      JSC::MacroAssemblerARM64::moveDoubleConditionallyAfterFloatingPointCompare<64>(a3, v518, v521, v522, v523, a6, a7, a8);
      goto LABEL_24;
    case 0x143:
      v726 = *((_DWORD *)a2 + 3);
      if (!v726)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3A04);
      }
      if (v726 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3A0CLL);
      }
      if (v726 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3A54);
      }
      if (v726 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3A14);
      }
      if (v726 <= 4)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3A5CLL);
      }
      JSC::MacroAssemblerARM64::moveDoubleConditionallyDoubleWithZero(a3, **a2, (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), (char)~*((_BYTE *)*a2 + 144), a7, a8);
      goto LABEL_24;
    case 0x144:
      v645 = *((_DWORD *)a2 + 3);
      if (!v645)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C37CCLL);
      }
      if (v645 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C37D4);
      }
      if (v645 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C37ECLL);
      }
      if (v645 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C37DCLL);
      }
      if (v645 <= 4)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C37F4);
      }
      if (v645 == 5)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C37E4);
      }
      JSC::MacroAssemblerARM64::moveDoubleConditionallyFloat(a3, **a2, (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), (char)~*((_BYTE *)*a2 + 144), (char)~*((_BYTE *)*a2 + 176), a8);
      goto LABEL_24;
    case 0x145:
      v998 = *((_DWORD *)a2 + 3);
      if (!v998)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4654);
      }
      if (v998 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C465CLL);
      }
      if (v998 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4CE4);
      }
      if (v998 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4664);
      }
      if (v998 <= 4)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4CECLL);
      }
      JSC::MacroAssemblerARM64::moveDoubleConditionallyFloatWithZero((_DWORD *)a3, **a2, (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), (char)~*((_BYTE *)*a2 + 144), a7, a8);
      goto LABEL_24;
    case 0x146:
      v82 = *(_DWORD *)(a3 + 200);
      if (v82 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v82 = *(_DWORD *)(a3 + 200);
      }
      v83 = *(_QWORD *)(a3 + 56);
      v84 = -721208385;
      goto LABEL_95;
    case 0x147:
      v82 = *(_DWORD *)(a3 + 200);
      if (v82 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v82 = *(_DWORD *)(a3 + 200);
      }
      v83 = *(_QWORD *)(a3 + 56);
      v84 = -721208641;
      goto LABEL_95;
    case 0x148:
      JSC::MacroAssemblerARM64::loadFence((JSC::MacroAssemblerARM64 *)a3, a3, a4, a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x149:
      for (i = *(_DWORD *)(a3 + 200); i < *(_DWORD *)(a3 + 52); *(_DWORD *)(a3 + 200) = i)
      {
        if ((i + 4) > *(_DWORD *)(a3 + 192))
        {
          result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, v10, a5, a6, a7, a8).n128_u64[0];
          i = *(_DWORD *)(a3 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a3 + 56) + i) = -721215457;
        i = *(_DWORD *)(a3 + 200) + 4;
      }
      v52 = i;
      if ((i + 4) > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, v10, a5, a6, a7, a8).n128_u64[0];
        v52 = *(_DWORD *)(a3 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a3 + 56) + v52) = 335544320;
      *(_DWORD *)(a3 + 200) += 4;
      v28 = 0xFF000F4500000000;
      if (!*(_BYTE *)(a3 + 328))
        v28 = 0xFF000F4100000000;
      *(_DWORD *)a1 = i;
      goto LABEL_26;
    case 0x14A:
      goto LABEL_1466;
    case 0x14B:
      if (!*((_DWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3D5CLL);
      }
      goto LABEL_1466;
    case 0x14C:
      if (!*((_DWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3DA4);
      }
      goto LABEL_1466;
    case 0x14D:
      if (!*((_DWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3E1CLL);
      }
      goto LABEL_1466;
    case 0x14E:
      if (!*((_DWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3E8CLL);
      }
LABEL_1466:
      JSC::MacroAssembler::retVoid((JSC::MacroAssembler *)a3, a3, a4, a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x14F:
      v869 = *((_DWORD *)a2 + 3);
      if (!v869)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3F04);
      }
      if (v869 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3F0CLL);
      }
      if (v869 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C430CLL);
      }
      JSC::MacroAssemblerARM64::vectorReplaceLaneInt64<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID>((_DWORD *)a3, **a2, *((unsigned __int8 *)*a2 + 48) - 1, ~*((unsigned __int8 *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x150:
      v878 = *((_DWORD *)a2 + 3);
      if (!v878)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3F84);
      }
      if (v878 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3F8CLL);
      }
      if (v878 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4344);
      }
      JSC::MacroAssemblerARM64::vectorReplaceLaneInt32<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID>((_DWORD *)a3, **a2, *((unsigned __int8 *)*a2 + 48) - 1, ~*((unsigned __int8 *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x151:
      v887 = *((_DWORD *)a2 + 3);
      if (!v887)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4004);
      }
      if (v887 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C400CLL);
      }
      if (v887 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C436CLL);
      }
      JSC::MacroAssemblerARM64::vectorReplaceLaneInt16<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID>((_DWORD *)a3, **a2, *((unsigned __int8 *)*a2 + 48) - 1, ~*((unsigned __int8 *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x152:
      v898 = *((_DWORD *)a2 + 3);
      if (!v898)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C407CLL);
      }
      if (v898 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4084);
      }
      if (v898 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4394);
      }
      JSC::MacroAssemblerARM64::vectorReplaceLaneInt8<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID>((_DWORD *)a3, **a2, *((unsigned __int8 *)*a2 + 48) - 1, ~*((unsigned __int8 *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x153:
      v909 = *((_DWORD *)a2 + 3);
      if (!v909)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C40F4);
      }
      if (v909 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C40FCLL);
      }
      if (v909 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C43BCLL);
      }
      JSC::MacroAssemblerARM64::vectorReplaceLaneFloat64<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>((_DWORD *)a3, **a2, ~*((unsigned __int8 *)*a2 + 48), ~*((unsigned __int8 *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x154:
      v921 = *((_DWORD *)a2 + 3);
      if (!v921)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4184);
      }
      if (v921 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C418CLL);
      }
      if (v921 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C43ECLL);
      }
      JSC::MacroAssemblerARM64::vectorReplaceLaneFloat32<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>((_DWORD *)a3, **a2, ~*((unsigned __int8 *)*a2 + 48), ~*((unsigned __int8 *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x155:
      v934 = *((_DWORD *)a2 + 3);
      if (!v934)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C444CLL);
      }
      if (v934 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4454);
      }
      if (v934 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4C1CLL);
      }
      JSC::MacroAssemblerARM64::vectorExtractLaneInt64<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID>((_DWORD *)a3, **a2, ~*((unsigned __int8 *)*a2 + 48), *((unsigned __int8 *)*a2 + 80) - 1, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x156:
      v948 = *((_DWORD *)a2 + 3);
      if (!v948)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C44D4);
      }
      if (v948 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C44DCLL);
      }
      if (v948 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4C44);
      }
      JSC::MacroAssemblerARM64::vectorExtractLaneInt32<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID>((_DWORD *)a3, **a2, ~*((unsigned __int8 *)*a2 + 48), *((unsigned __int8 *)*a2 + 80) - 1, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x157:
      v960 = *((_DWORD *)a2 + 3);
      if (!v960)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4524);
      }
      if (v960 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C452CLL);
      }
      if (v960 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4C64);
      }
      JSC::MacroAssemblerARM64::vectorExtractLaneSignedInt16<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID>((_DWORD *)a3, **a2, ~*((unsigned __int8 *)*a2 + 48), *((unsigned __int8 *)*a2 + 80) - 1, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x158:
      v969 = *((_DWORD *)a2 + 3);
      if (!v969)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C456CLL);
      }
      if (v969 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4574);
      }
      if (v969 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4C7CLL);
      }
      JSC::MacroAssemblerARM64::vectorExtractLaneUnsignedInt16<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID>((_DWORD *)a3, **a2, ~*((unsigned __int8 *)*a2 + 48), *((unsigned __int8 *)*a2 + 80) - 1, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x159:
      v980 = *((_DWORD *)a2 + 3);
      if (!v980)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C45ACLL);
      }
      if (v980 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C45B4);
      }
      if (v980 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4C9CLL);
      }
      JSC::MacroAssemblerARM64::vectorExtractLaneSignedInt8<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID>((_DWORD *)a3, **a2, ~*((unsigned __int8 *)*a2 + 48), *((unsigned __int8 *)*a2 + 80) - 1, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x15A:
      v992 = *((_DWORD *)a2 + 3);
      if (!v992)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C45F4);
      }
      if (v992 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C45FCLL);
      }
      if (v992 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4CBCLL);
      }
      JSC::MacroAssemblerARM64::vectorExtractLaneUnsignedInt8<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID>((_DWORD *)a3, **a2, ~*((unsigned __int8 *)*a2 + 48), *((unsigned __int8 *)*a2 + 80) - 1, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x15B:
      v1000 = *((_DWORD *)a2 + 3);
      if (!v1000)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C468CLL);
      }
      if (v1000 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4694);
      }
      if (v1000 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4D04);
      }
      JSC::MacroAssemblerARM64::vectorExtractLaneFloat64<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>((_DWORD *)a3, **a2, ~*((unsigned __int8 *)*a2 + 48), ~*((unsigned __int8 *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x15C:
      v1011 = *((_DWORD *)a2 + 3);
      if (!v1011)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C46E4);
      }
      if (v1011 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C46ECLL);
      }
      if (v1011 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4D44);
      }
      JSC::MacroAssemblerARM64::vectorExtractLaneFloat32<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>((_DWORD *)a3, **a2, ~*((unsigned __int8 *)*a2 + 48), ~*((unsigned __int8 *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x15D:
      v1020 = *((_DWORD *)a2 + 3);
      if (v1020 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C473CLL);
      }
      if (!v1020)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4744);
      }
      JSC::MacroAssemblerARM64::vectorSplatInt8((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)~*((_BYTE *)*a2 + 48), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x15E:
      v1039 = *((_DWORD *)a2 + 3);
      if (v1039 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C47C4);
      }
      if (!v1039)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C47CCLL);
      }
      JSC::MacroAssemblerARM64::vectorSplatInt16((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)~*((_BYTE *)*a2 + 48), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x15F:
      v1058 = *((_DWORD *)a2 + 3);
      if (v1058 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C481CLL);
      }
      if (!v1058)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4824);
      }
      JSC::MacroAssemblerARM64::vectorSplatInt32((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)~*((_BYTE *)*a2 + 48), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x160:
      v1078 = *((_DWORD *)a2 + 3);
      if (v1078 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C487CLL);
      }
      if (!v1078)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4884);
      }
      JSC::MacroAssemblerARM64::vectorSplatInt64((_DWORD *)a3, (char)(*((_BYTE *)*a2 + 16) - 1), (char)~*((_BYTE *)*a2 + 48), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x161:
      v1098 = *((_DWORD *)a2 + 3);
      if (v1098 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C48DCLL);
      }
      if (!v1098)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C48E4);
      }
      JSC::MacroAssemblerARM64::vectorSplatFloat32((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x162:
      v1113 = *((_DWORD *)a2 + 3);
      if (v1113 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4924);
      }
      if (!v1113)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C492CLL);
      }
      JSC::MacroAssemblerARM64::vectorSplatFloat64((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x164:
      v1127 = *((_DWORD *)a2 + 3);
      if (!v1127)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4984);
      }
      if (v1127 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C498CLL);
      }
      if (v1127 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4E94);
      }
      if (v1127 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4994);
      }
      if (v1127 <= 4)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4E9CLL);
      }
      JSC::MacroAssemblerARM64::compareFloatingPointVector((_DWORD *)a3, **a2, *((unsigned __int8 *)*a2 + 56), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), (char)~*((_BYTE *)*a2 + 144), a7, a8);
      goto LABEL_24;
    case 0x165:
      if (*((_DWORD *)a2 + 3) != 5)
        goto LABEL_1006;
      JSC::MacroAssemblerARM64::compareIntegerVector((_DWORD *)a3, **a2, *((unsigned __int8 *)*a2 + 56), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), (char)~*((_BYTE *)*a2 + 144), a7, a8);
      goto LABEL_24;
    case 0x166:
      if (*((_DWORD *)a2 + 3) != 4)
        goto LABEL_1006;
      JSC::MacroAssemblerARM64::compareIntegerVectorWithZero((_DWORD *)a3, **a2, *((unsigned __int8 *)*a2 + 56), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), a6, a7, a8);
      goto LABEL_24;
    case 0x167:
      v822 = *((_DWORD *)a2 + 3);
      if (!v822)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3DBCLL);
      }
      if (v822 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3DC4);
      }
      if (v822 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4284);
      }
      JSC::MacroAssemblerARM64::vectorUnsignedMax((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x168:
      v836 = *((_DWORD *)a2 + 3);
      if (!v836)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3E34);
      }
      if (v836 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3E3CLL);
      }
      if (v836 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C42B4);
      }
      JSC::MacroAssemblerARM64::vectorUnsignedMin((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x169:
      v856 = *((_DWORD *)a2 + 3);
      if (!v856)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3EA4);
      }
      if (v856 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3EACLL);
      }
      if (v856 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C42DCLL);
      }
      if (v856 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3EB4);
      }
      JSC::MacroAssemblerARM64::vectorAdd((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), a6, a7, a8);
      goto LABEL_24;
    case 0x16A:
      v871 = *((_DWORD *)a2 + 3);
      if (!v871)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3F24);
      }
      if (v871 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3F2CLL);
      }
      if (v871 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C431CLL);
      }
      if (v871 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3F34);
      }
      JSC::MacroAssemblerARM64::vectorSub((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), a6, a7, a8);
      goto LABEL_24;
    case 0x16B:
      v879 = *((_DWORD *)a2 + 3);
      if (!v879)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3F94);
      }
      if (v879 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3F9CLL);
      }
      if (v879 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C434CLL);
      }
      if (v879 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3FA4);
      }
      JSC::MacroAssemblerARM64::vectorAddSat((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), a6, a7, a8);
      goto LABEL_24;
    case 0x16C:
      v889 = *((_DWORD *)a2 + 3);
      if (!v889)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C402CLL);
      }
      if (v889 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4034);
      }
      if (v889 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C437CLL);
      }
      if (v889 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C403CLL);
      }
      JSC::MacroAssemblerARM64::vectorSubSat((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), a6, a7, a8);
      goto LABEL_24;
    case 0x16D:
      v903 = *((_DWORD *)a2 + 3);
      if (!v903)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C40ACLL);
      }
      if (v903 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C40B4);
      }
      if (v903 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C43A4);
      }
      if (v903 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C40BCLL);
      }
      JSC::MacroAssemblerARM64::vectorMul((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), a6, a7, a8);
      goto LABEL_24;
    case 0x16E:
      v915 = *((_DWORD *)a2 + 3);
      if (!v915)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C413CLL);
      }
      if (v915 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4144);
      }
      if (v915 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C43D4);
      }
      if (v915 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C414CLL);
      }
      JSC::MacroAssemblerARM64::vectorMulByElementFloat32((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), (*a2)[16], (char)~*((_BYTE *)*a2 + 112), a6, a7, a8);
      goto LABEL_24;
    case 0x16F:
      v926 = *((_DWORD *)a2 + 3);
      if (!v926)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C41B4);
      }
      if (v926 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C41BCLL);
      }
      if (v926 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C43FCLL);
      }
      if (v926 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C41C4);
      }
      JSC::MacroAssemblerARM64::vectorMulByElementFloat64((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), (*a2)[16], (char)~*((_BYTE *)*a2 + 112), a6, a7, a8);
      goto LABEL_24;
    case 0x170:
      v938 = *((_DWORD *)a2 + 3);
      if (!v938)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4464);
      }
      if (v938 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C446CLL);
      }
      if (v938 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4C24);
      }
      if (v938 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4474);
      }
      JSC::MacroAssemblerARM64::vectorDiv((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), a6, a7, a8);
      goto LABEL_24;
    case 0x171:
      v952 = *((_DWORD *)a2 + 3);
      if (!v952)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C44ECLL);
      }
      if (v952 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C44F4);
      }
      if (v952 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4C54);
      }
      if (v952 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C44FCLL);
      }
      JSC::MacroAssemblerARM64::vectorMin((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), a6, a7, a8);
      goto LABEL_24;
    case 0x172:
      v961 = *((_DWORD *)a2 + 3);
      if (!v961)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4534);
      }
      if (v961 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C453CLL);
      }
      if (v961 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4C6CLL);
      }
      if (v961 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4544);
      }
      JSC::MacroAssemblerARM64::vectorMax((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), a6, a7, a8);
      goto LABEL_24;
    case 0x173:
      if (*((_DWORD *)a2 + 3) != 5)
        goto LABEL_1006;
      JSC::MacroAssemblerARM64::vectorPmin((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), (char)~*((_BYTE *)*a2 + 144), a7, a8);
      goto LABEL_24;
    case 0x174:
      if (*((_DWORD *)a2 + 3) != 5)
        goto LABEL_1006;
      JSC::MacroAssemblerARM64::vectorPmax((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), (char)~*((_BYTE *)*a2 + 144), a7, a8);
      goto LABEL_24;
    case 0x175:
      v994 = *((_DWORD *)a2 + 3);
      if (!v994)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C461CLL);
      }
      if (v994 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4624);
      }
      if (v994 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4CCCLL);
      }
      if (v994 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C462CLL);
      }
      if (v994 <= 4)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4CD4);
      }
      JSC::MacroAssemblerARM64::vectorNarrow((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), (char)~*((_BYTE *)*a2 + 144), a7, a8);
      goto LABEL_24;
    case 0x176:
      v1001 = *((_DWORD *)a2 + 3);
      if (!v1001)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C469CLL);
      }
      if (v1001 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C46A4);
      }
      if (v1001 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4D0CLL);
      }
      JSC::MacroAssemblerARM64::vectorBitwiseSelect((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x177:
      v1016 = *((_DWORD *)a2 + 3);
      if (!v1016)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C46F4);
      }
      if (v1016 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C46FCLL);
      }
      if (v1016 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4D5CLL);
      }
      JSC::MacroAssemblerARM64::vectorNot((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x178:
      v1025 = *((_DWORD *)a2 + 3);
      if (!v1025)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C475CLL);
      }
      if (v1025 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4764);
      }
      if (v1025 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4D94);
      }
      if (v1025 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C476CLL);
      }
      JSC::MacroAssemblerARM64::vectorAnd((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x179:
      v1040 = *((_DWORD *)a2 + 3);
      if (!v1040)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C47D4);
      }
      if (v1040 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C47DCLL);
      }
      if (v1040 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4DDCLL);
      }
      if (v1040 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C47E4);
      }
      JSC::MacroAssemblerARM64::vectorAndnot((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x17A:
      v1066 = *((_DWORD *)a2 + 3);
      if (!v1066)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C483CLL);
      }
      if (v1066 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4844);
      }
      if (v1066 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4E04);
      }
      if (v1066 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C484CLL);
      }
      JSC::MacroAssemblerARM64::vectorOr((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x17B:
      v1086 = *((_DWORD *)a2 + 3);
      if (!v1086)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C489CLL);
      }
      if (v1086 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C48A4);
      }
      if (v1086 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4E2CLL);
      }
      if (v1086 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C48ACLL);
      }
      JSC::MacroAssemblerARM64::vectorXor((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x17C:
      if (!*((_DWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980C48FCLL);
      }
LABEL_2105:
      JSC::MacroAssemblerARM64::moveZeroToDouble((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), a4, a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x17D:
      v1117 = *((_DWORD *)a2 + 3);
      if (!v1117)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C493CLL);
      }
      if (v1117 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4944);
      }
      if (v1117 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4E74);
      }
      if (v1117 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C494CLL);
      }
      JSC::MacroAssemblerARM64::vectorUshl((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), a6, a7, a8);
      goto LABEL_24;
    case 0x180:
      v1128 = *((_DWORD *)a2 + 3);
      if (!v1128)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C499CLL);
      }
      if (v1128 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C49A4);
      }
      if (v1128 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4EA4);
      }
      if (v1128 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C49ACLL);
      }
      JSC::MacroAssemblerARM64::vectorSshl((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), a6, a7, a8);
      goto LABEL_24;
    case 0x183:
      if (*((_DWORD *)a2 + 3) != 4)
        goto LABEL_1006;
      JSC::MacroAssemblerARM64::vectorSshr8((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (*a2)[16], (char)~*((_BYTE *)*a2 + 112), a6, a7, a8);
      goto LABEL_24;
    case 0x184:
      v816 = *((_DWORD *)a2 + 3);
      if (!v816)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3D74);
      }
      if (v816 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3D7CLL);
      }
      if (v816 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4264);
      }
      JSC::MacroAssemblerARM64::vectorHorizontalAdd((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x185:
      v823 = *((_DWORD *)a2 + 3);
      if (!v823)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3DCCLL);
      }
      if (v823 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3DD4);
      }
      if (v823 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C428CLL);
      }
      if (v823 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3DDCLL);
      }
      JSC::MacroAssemblerARM64::vectorZipUpper((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), a6, a7, a8);
      goto LABEL_24;
    case 0x186:
      v845 = *((_DWORD *)a2 + 3);
      if (!v845)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3E64);
      }
      if (v845 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3E6CLL);
      }
      if (v845 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C42C4);
      }
      if (v845 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3E74);
      }
      JSC::MacroAssemblerARM64::vectorUnzipEven((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), a6, a7, a8);
      goto LABEL_24;
    case 0x187:
      v865 = *((_DWORD *)a2 + 3);
      if (!v865)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3EDCLL);
      }
      if (v865 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3EE4);
      }
      if (v865 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C42F4);
      }
      if (v865 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3EECLL);
      }
      if (v865 <= 4)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C42FCLL);
      }
      JSC::MacroAssemblerARM64::vectorExtractPair((_DWORD *)a3, (*a2)[8], (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), (char)~*((_BYTE *)*a2 + 144), a6, a7, a8);
      goto LABEL_24;
    case 0x188:
      v873 = *((_DWORD *)a2 + 3);
      if (!v873)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3F4CLL);
      }
      if (v873 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3F54);
      }
      if (v873 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C432CLL);
      }
      JSC::MacroAssemblerARM64::vectorAbs((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x18A:
      v881 = *((_DWORD *)a2 + 3);
      if (!v881)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3FC4);
      }
      if (v881 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3FCCLL);
      }
      if (v881 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C435CLL);
      }
      JSC::MacroAssemblerARM64::vectorNeg((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x18B:
      v893 = *((_DWORD *)a2 + 3);
      if (!v893)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C404CLL);
      }
      if (v893 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4054);
      }
      if (v893 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4384);
      }
      JSC::MacroAssemblerARM64::vectorPopcnt((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x18C:
      v904 = *((_DWORD *)a2 + 3);
      if (!v904)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C40C4);
      }
      if (v904 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C40CCLL);
      }
      if (v904 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C43ACLL);
      }
      JSC::MacroAssemblerARM64::vectorCeil((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x18D:
      v917 = *((_DWORD *)a2 + 3);
      if (!v917)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C416CLL);
      }
      if (v917 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4174);
      }
      if (v917 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C43E4);
      }
      JSC::MacroAssemblerARM64::vectorFloor((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x18E:
      v931 = *((_DWORD *)a2 + 3);
      if (!v931)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C440CLL);
      }
      if (v931 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4414);
      }
      if (v931 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4C04);
      }
      JSC::MacroAssemblerARM64::vectorTrunc((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x18F:
      if (*((_DWORD *)a2 + 3) != 3)
        goto LABEL_1006;
      JSC::MacroAssemblerARM64::vectorTruncSat((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x193:
      v956 = *((_DWORD *)a2 + 3);
      if (!v956)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C450CLL);
      }
      if (v956 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4514);
      }
      if (v956 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4C5CLL);
      }
      JSC::MacroAssemblerARM64::vectorConvert((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x195:
      v965 = *((_DWORD *)a2 + 3);
      if (!v965)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4554);
      }
      if (v965 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C455CLL);
      }
      if (v965 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4C74);
      }
      JSC::MacroAssemblerARM64::vectorConvertLow((_DWORD *)a3, *((_BYTE *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x198:
      v973 = *((_DWORD *)a2 + 3);
      if (!v973)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4584);
      }
      if (v973 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C458CLL);
      }
      if (v973 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4C84);
      }
      JSC::MacroAssemblerARM64::vectorNearest((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x199:
      v986 = *((_DWORD *)a2 + 3);
      if (!v986)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C45C4);
      }
      if (v986 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C45CCLL);
      }
      if (v986 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4CACLL);
      }
      JSC::MacroAssemblerARM64::vectorSqrt((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x19A:
      v995 = *((_DWORD *)a2 + 3);
      if (!v995)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4634);
      }
      if (v995 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C463CLL);
      }
      if (v995 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4CDCLL);
      }
      JSC::MacroAssemblerARM64::vectorExtendLow((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x19B:
      v1009 = *((_DWORD *)a2 + 3);
      if (!v1009)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C46B4);
      }
      if (v1009 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C46BCLL);
      }
      if (v1009 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4D2CLL);
      }
      JSC::MacroAssemblerARM64::vectorExtendHigh((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x19C:
      v1017 = *((_DWORD *)a2 + 3);
      if (!v1017)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4704);
      }
      if (v1017 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C470CLL);
      }
      if (v1017 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4D64);
      }
      JSC::MacroAssemblerARM64::vectorPromote((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x19D:
      v1026 = *((_DWORD *)a2 + 3);
      if (!v1026)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4774);
      }
      if (v1026 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C477CLL);
      }
      if (v1026 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4D9CLL);
      }
      JSC::MacroAssemblerARM64::vectorDemote((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x19E:
      if (*((_DWORD *)a2 + 3) != 2)
        goto LABEL_1006;
      v1048 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v1049 = 0;
      else
        v1049 = *(_QWORD *)v1048 << 32;
      JSC::MacroAssemblerARM64::vectorLoad8Splat(a3, v1049 | (*((_DWORD *)v1048 + 4) - 1), (char)~*((_BYTE *)v1048 + 48), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x19F:
      v1067 = *((_DWORD *)a2 + 3);
      if (!v1067)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4854);
      }
      v1068 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v1069 = 0;
      else
        v1069 = *(_QWORD *)v1068 << 32;
      if (v1067 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4E0CLL);
      }
      JSC::MacroAssemblerARM64::vectorLoad16Splat(a3, v1069 | (*((_DWORD *)v1068 + 4) - 1), (char)~*((_BYTE *)v1068 + 48), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x1A0:
      v1087 = *((_DWORD *)a2 + 3);
      if (!v1087)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C48B4);
      }
      v1088 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v1089 = 0;
      else
        v1089 = *(_QWORD *)v1088 << 32;
      if (v1087 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4E34);
      }
      JSC::MacroAssemblerARM64::vectorLoad32Splat(a3, v1089 | (*((_DWORD *)v1088 + 4) - 1), (char)~*((_BYTE *)v1088 + 48), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x1A1:
      v1109 = *((_DWORD *)a2 + 3);
      if (!v1109)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C490CLL);
      }
      v1110 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v1111 = 0;
      else
        v1111 = *(_QWORD *)v1110 << 32;
      if (v1109 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4E5CLL);
      }
      JSC::MacroAssemblerARM64::vectorLoad64Splat(a3, v1111 | (*((_DWORD *)v1110 + 4) - 1), (char)~*((_BYTE *)v1110 + 48), a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 0x1A2:
      v1121 = *((_DWORD *)a2 + 3);
      if (!v1121)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4964);
      }
      v1122 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v1123 = 0;
      else
        v1123 = *(_QWORD *)v1122 << 32;
      if (v1121 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4E84);
      }
      if (v1121 == 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C496CLL);
      }
      JSC::MacroAssemblerARM64::vectorLoad8Lane(a3, v1123 | (*((_DWORD *)v1122 + 4) - 1), *((unsigned int *)v1122 + 8), (char)~*((_BYTE *)v1122 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x1A3:
      v1132 = *((_DWORD *)a2 + 3);
      if (!v1132)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C49BCLL);
      }
      v1133 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v1134 = 0;
      else
        v1134 = *(_QWORD *)v1133 << 32;
      if (v1132 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4EB4);
      }
      if (v1132 == 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C49C4);
      }
      JSC::MacroAssemblerARM64::vectorLoad16Lane(a3, v1134 | (*((_DWORD *)v1133 + 4) - 1), *((unsigned int *)v1133 + 8), (char)~*((_BYTE *)v1133 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x1A4:
      v808 = *((_DWORD *)a2 + 3);
      if (!v808)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3D4CLL);
      }
      v809 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v810 = 0;
      else
        v810 = *(_QWORD *)v809 << 32;
      if (v808 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C424CLL);
      }
      if (v808 == 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3D54);
      }
      JSC::MacroAssemblerARM64::vectorLoad32Lane(a3, v810 | (*((_DWORD *)v809 + 4) - 1), *((unsigned int *)v809 + 8), (char)~*((_BYTE *)v809 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x1A5:
      v818 = *((_DWORD *)a2 + 3);
      if (!v818)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3D94);
      }
      v819 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 8) == 6)
        v820 = 0;
      else
        v820 = *(_QWORD *)v819 << 32;
      if (v818 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4274);
      }
      if (v818 == 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3D9CLL);
      }
      JSC::MacroAssemblerARM64::vectorLoad64Lane(a3, v820 | (*((_DWORD *)v819 + 4) - 1), *((unsigned int *)v819 + 8), (char)~*((_BYTE *)v819 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x1A6:
      v826 = *((_DWORD *)a2 + 3);
      if (!v826)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3E0CLL);
      }
      if (v826 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3E14);
      }
      v827 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v828 = 0;
      else
        v828 = *((_QWORD *)v827 + 4) << 32;
      if (v826 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C42A4);
      }
      JSC::MacroAssemblerARM64::vectorStore8Lane(a3, (char)~*((_BYTE *)v827 + 16), v828 | (*((_DWORD *)v827 + 12) - 1), *((unsigned int *)v827 + 16), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x1A7:
      v846 = *((_DWORD *)a2 + 3);
      if (!v846)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3E7CLL);
      }
      if (v846 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3E84);
      }
      v847 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v848 = 0;
      else
        v848 = *((_QWORD *)v847 + 4) << 32;
      if (v846 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C42CCLL);
      }
      JSC::MacroAssemblerARM64::vectorStore16Lane(a3, (char)~*((_BYTE *)v847 + 16), v848 | (*((_DWORD *)v847 + 12) - 1), *((unsigned int *)v847 + 16), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x1A8:
      v866 = *((_DWORD *)a2 + 3);
      if (!v866)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3EF4);
      }
      if (v866 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3EFCLL);
      }
      v867 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v868 = 0;
      else
        v868 = *((_QWORD *)v867 + 4) << 32;
      if (v866 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4304);
      }
      JSC::MacroAssemblerARM64::vectorStore32Lane(a3, (char)~*((_BYTE *)v867 + 16), v868 | (*((_DWORD *)v867 + 12) - 1), *((unsigned int *)v867 + 16), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x1A9:
      v874 = *((_DWORD *)a2 + 3);
      if (!v874)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3F5CLL);
      }
      if (v874 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C3F64);
      }
      v875 = (JSC::B3::Air::Arg *)*a2;
      if (*((_BYTE *)*a2 + 40) == 6)
        v876 = 0;
      else
        v876 = *((_QWORD *)v875 + 4) << 32;
      if (v874 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4334);
      }
      JSC::MacroAssemblerARM64::vectorStore64Lane(a3, (char)~*((_BYTE *)v875 + 16), v876 | (*((_DWORD *)v875 + 12) - 1), *((unsigned int *)v875 + 16), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x1AA:
      v886 = *((_DWORD *)a2 + 3);
      if (v886 != 1)
      {
        if (v886)
        {
          __break(0xC471u);
          JUMPOUT(0x1980BE884);
        }
        __break(0xC471u);
        JUMPOUT(0x1980C3FFCLL);
      }
      __break(0xC471u);
      JUMPOUT(0x1980C3FF4);
    case 0x1AB:
      if (*((_DWORD *)a2 + 3) == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BEA90);
      }
      goto LABEL_1006;
    case 0x1AC:
      if (*((_DWORD *)a2 + 3) == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980BEC94);
      }
      goto LABEL_1006;
    case 0x1AD:
      if (*((_DWORD *)a2 + 3) != 3)
        goto LABEL_1006;
      JSC::MacroAssemblerARM64::vectorExtaddPairwise((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x1AF:
      v932 = *((_DWORD *)a2 + 3);
      if (!v932)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C441CLL);
      }
      if (v932 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4424);
      }
      if (v932 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4C0CLL);
      }
      if (v932 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C442CLL);
      }
      JSC::MacroAssemblerARM64::vectorAddPairwise((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), a6, a7, a8);
      goto LABEL_24;
    case 0x1B0:
      v944 = *((_DWORD *)a2 + 3);
      if (!v944)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C44B4);
      }
      if (v944 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C44BCLL);
      }
      if (v944 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4C3CLL);
      }
      if (v944 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C44C4);
      }
      JSC::MacroAssemblerARM64::vectorAvgRound((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), a6, a7, a8);
      goto LABEL_24;
    case 0x1B1:
      if (*((_DWORD *)a2 + 3) != 3)
        goto LABEL_1006;
      JSC::MacroAssemblerARM64::vectorMulSat((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x1B2:
      if (*((_DWORD *)a2 + 3) != 4)
        goto LABEL_1006;
      JSC::MacroAssemblerARM64::vectorDotProduct((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), a6, a7, a8);
      goto LABEL_24;
    case 0x1B3:
      v979 = *((_DWORD *)a2 + 3);
      if (!v979)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C459CLL);
      }
      if (v979 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C45A4);
      }
      if (v979 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4C94);
      }
      JSC::MacroAssemblerARM64::vectorSwizzle((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x1B4:
      v991 = *((_DWORD *)a2 + 3);
      if (!v991)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C45DCLL);
      }
      if (v991 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C45E4);
      }
      if (v991 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4CB4);
      }
      if (v991 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C45ECLL);
      }
      JSC::MacroAssemblerARM64::vectorSwizzle2((_DWORD *)a3, (char)~*((_BYTE *)*a2 + 16), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), a6, a7, a8);
      goto LABEL_24;
    case 0x1B5:
      v999 = *((_DWORD *)a2 + 3);
      if (!v999)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C466CLL);
      }
      if (v999 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4674);
      }
      if (v999 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4CF4);
      }
      if (v999 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C467CLL);
      }
      if (v999 <= 4)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4CFCLL);
      }
      if (v999 == 5)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4684);
      }
      JSC::MacroAssemblerARM64::vectorFusedMulAdd((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), (char)~*((_BYTE *)*a2 + 144), (char)~*((_BYTE *)*a2 + 176), a8);
      goto LABEL_24;
    case 0x1B6:
      v1010 = *((_DWORD *)a2 + 3);
      if (!v1010)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C46C4);
      }
      if (v1010 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C46CCLL);
      }
      if (v1010 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4D34);
      }
      if (v1010 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C46D4);
      }
      if (v1010 <= 4)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4D3CLL);
      }
      if (v1010 == 5)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C46DCLL);
      }
      JSC::MacroAssemblerARM64::vectorFusedNegMulAdd((_DWORD *)a3, *((unsigned __int8 *)*a2 + 24), (char)~*((_BYTE *)*a2 + 48), (char)~*((_BYTE *)*a2 + 80), (char)~*((_BYTE *)*a2 + 112), (char)~*((_BYTE *)*a2 + 144), (char)~*((_BYTE *)*a2 + 176), a8);
      goto LABEL_24;
    case 0x1B7:
      v1019 = *((_DWORD *)a2 + 3);
      if (!v1019)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C472CLL);
      }
      if (v1019 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4734);
      }
      if (v1019 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4D74);
      }
      JSC::MacroAssemblerARM64::vectorDupElementInt8<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>((_DWORD *)a3, **a2, ~*((unsigned __int8 *)*a2 + 48), ~*((unsigned __int8 *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x1B8:
      v1035 = *((_DWORD *)a2 + 3);
      if (!v1035)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C47A4);
      }
      if (v1035 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C47ACLL);
      }
      if (v1035 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4DB4);
      }
      JSC::MacroAssemblerARM64::vectorDupElementInt16<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>((_DWORD *)a3, **a2, ~*((unsigned __int8 *)*a2 + 48), ~*((unsigned __int8 *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x1B9:
      v1057 = *((_DWORD *)a2 + 3);
      if (!v1057)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C480CLL);
      }
      if (v1057 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4814);
      }
      if (v1057 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4DF4);
      }
      goto LABEL_2142;
    case 0x1BA:
      v1077 = *((_DWORD *)a2 + 3);
      if (!v1077)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C486CLL);
      }
      if (v1077 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4874);
      }
      if (v1077 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4E1CLL);
      }
      goto LABEL_2175;
    case 0x1BB:
      v1097 = *((_DWORD *)a2 + 3);
      if (!v1097)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C48CCLL);
      }
      if (v1097 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C48D4);
      }
      if (v1097 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4E44);
      }
LABEL_2142:
      JSC::MacroAssemblerARM64::vectorDupElementInt32<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>((_DWORD *)a3, **a2, ~*((unsigned __int8 *)*a2 + 48), ~*((unsigned __int8 *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x1BC:
      v1112 = *((_DWORD *)a2 + 3);
      if (!v1112)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4914);
      }
      if (v1112 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C491CLL);
      }
      if (v1112 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1980C4E64);
      }
LABEL_2175:
      JSC::MacroAssemblerARM64::vectorDupElementInt64<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>((_DWORD *)a3, **a2, ~*((unsigned __int8 *)*a2 + 48), ~*((unsigned __int8 *)*a2 + 80), a5, a6, a7, a8);
      goto LABEL_24;
    case 0x1BD:
      v80 = *(_DWORD *)(a3 + 200);
      if (v80 + 4 > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, a4, a5, a6, a7, a8).n128_u64[0];
        v80 = *(_DWORD *)(a3 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a3 + 56) + v80) = 1384125296;
      v81 = *(_DWORD *)(a3 + 200);
      v82 = v81 + 4;
      *(_DWORD *)(a3 + 200) = v81 + 4;
      if ((v81 + 8) > *(_DWORD *)(a3 + 192))
      {
        result = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), a3, a4, v10, a5, a6, a7, a8).n128_u64[0];
        v82 = *(_DWORD *)(a3 + 200);
      }
      v83 = *(_QWORD *)(a3 + 56);
      v84 = -734491104;
LABEL_95:
      *(_DWORD *)(v83 + v82) = v84;
      goto LABEL_96;
    case 0x1BE:
      __break(0xC471u);
      JUMPOUT(0x1980BF13CLL);
    case 0x1BF:
      JSC::B3::Air::ShuffleCustom::generate((JSC::B3::Air::Arg **)a2);
    case 0x1C0:
      if (!*((_DWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980C2F14);
      }
      (*(void (**)(_QWORD, int **, uint64_t, uint64_t))(**(_QWORD **)*a2 + 64))(*(_QWORD *)*a2, a2, a3, a4);
      return result;
    case 0x1C1:
    case 0x1C2:
      JSC::B3::Air::CCallCustom::generate((JSC::B3::Air::Arg **)a2);
    case 0x1C3:
      *(double *)&result = JSC::B3::Air::WasmBoundsCheckCustom::generate((uint64_t)a2, a3, a4, (uint64_t)a1);
      return result;
    default:
      goto LABEL_1006;
  }
}

void JSC::MacroAssemblerARM64::addSignExtend64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v8 | (32 * v10) | ((v9 & 0x1F) << 16) | 0x8B20C000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::negateDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0x1E614000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::negateFloat(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0x1E214000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::mul64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = ((v9 & 0x1F) << 16) | (32 * (v8 & 0x1F)) | v8 & 0x1F | 0x9B007C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::multiplyAdd32(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), ((a3 & 0x1F) << 16) | ((a4 & 0x1F) << 10) | (32 * (a2 & 0x1Fu)) | a5 & 0x1F | 0x1B000000, a3, a4, a5, a6, a7, a8);
}

void JSC::MacroAssemblerARM64::multiplyAdd64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x1F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x9B000000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::multiplyAddSignExtend32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x1F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x9B200000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::multiplyAddZeroExtend32(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), ((a3 & 0x1F) << 16) | ((a4 & 0x1F) << 10) | (32 * (a2 & 0x1Fu)) | a5 & 0x1F | 0x9BA00000, a3, a4, a5, a6, a7, a8);
}

void JSC::MacroAssemblerARM64::multiplySub32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x1F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x1B008000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::multiplySub64(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), ((a3 & 0x1F) << 16) | ((a4 & 0x1F) << 10) | (32 * (a2 & 0x1Fu)) | a5 & 0x1F | 0x9B008000, a3, a4, a5, a6, a7, a8);
}

void JSC::MacroAssemblerARM64::multiplySubSignExtend32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x1F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x9B208000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::multiplySubZeroExtend32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x1F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x9BA08000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::multiplyNeg32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x1B00FC00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::multiplyNeg64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x9B00FC00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::multiplyNegSignExtend32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x9B20FC00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::multiplyNegZeroExtend32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x9BA0FC00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::multiplySignExtend32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x9B207C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::multiplyZeroExtend32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x9BA07C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::div64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x9AC00C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::divFloat(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (32 * v10) | (v9 << 16) | v8 | 0x1E201800;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::andDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (32 * v10) | (v9 << 16) | v8 | 0xE201C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::orDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (32 * v10) | (v9 << 16) | v8 | 0xEA01C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::rshift32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x1AC02800;
  a1[50] += 4;
}

{
  char v8;
  char v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = (unsigned __int16)(32 * (v8 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x13007C00;
  a1[50] += 4;
}

{
  char v8;
  char v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 & 0x1F | ((v9 & 0x1F) << 16) | 0x13007D00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::urshift32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x1AC02400;
  a1[50] += 4;
}

{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x53007C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::rotateRight32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x1AC02C00;
  a1[50] += 4;
}

{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = ((v10 & 0x1F) << 16) | ((v9 & 0x1F) << 10) | (32 * (v10 & 0x1F)) | v8 & 0x1F | 0x13800000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::rotateRight64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x9AC02C00;
  a1[50] += 4;
}

{
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int *v12;
  _QWORD *v13;

  if (!(_DWORD)a3)
  {
    if ((_DWORD)a2 == (_DWORD)a4)
      return;
    if ((_DWORD)a2 == 63)
    {
      if ((_DWORD)a4 != 31)
      {
        v10 = a4 & 0x1F | 0xD2800000;
        goto LABEL_4;
      }
    }
    else if ((_DWORD)a2 != 31 && (_DWORD)a4 != 31)
    {
      v8 = a4 & 0x1F | ((a2 & 0x1F) << 16);
      v9 = -1442839584;
      goto LABEL_3;
    }
    v8 = a4 | (32 * a2);
    v9 = -1862270976;
    goto LABEL_3;
  }
  v8 = ((a2 & 0x1F) << 16) | ((a3 & 0x3F) << 10) | (32 * (a2 & 0x1F)) | a4 & 0x1F;
  v9 = -1816133632;
LABEL_3:
  v10 = v8 | v9;
LABEL_4:
  v12 = a1 + 50;
  v11 = a1[50];
  v13 = a1 + 14;
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = *v12;
  }
  *(_DWORD *)(*v13 + v11) = v10;
  *v12 += 4;
}

void JSC::MacroAssemblerARM64::absFloat(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0x1E20C000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::ceilDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0x1E64C000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::ceilFloat(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0x1E24C000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::floorFloat(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0x1E254000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::sqrtFloat(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0x1E21C000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::countLeadingZeros32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 & 0x1F | (32 * (v9 & 0x1F)) | 0x5AC01000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::countLeadingZeros64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 & 0x1F | (32 * (v9 & 0x1F)) | 0xDAC01000;
  a1[50] += 4;
}

uint64_t JSC::B3::Air::Arg::asBaseIndex(JSC::B3::Air::Arg *this)
{
  unsigned int v1;
  unint64_t v2;
  uint64_t v3;

  HIDWORD(v2) = *((_DWORD *)this + 3);
  LODWORD(v2) = HIDWORD(v2) - 2;
  v1 = v2 >> 1;
  if (v1 > 7)
    v3 = 0;
  else
    v3 = qword_199152B88[v1];
  return v3 | (((unsigned __int16)*((_DWORD *)this + 5) << 8) - 256) & 0xFF00 | (*((_DWORD *)this + 4) - 1);
}

void JSC::MacroAssemblerARM64::load64(_DWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned int v11;

  v8 = a3;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = (a2 >> 20) & 0x1FF000 | (32 * (char)a2) | v8 & 0x1F | 0xF8400C00;
  a1[50] += 4;
}

{
  char v8;
  unsigned int v11;

  v8 = a3;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = (a2 >> 20) & 0x1FF000 | (32 * (char)a2) | v8 & 0x1F | 0xF8400400;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::store64(_DWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  unsigned int v11;

  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = (32 * (char)a3) | v9 & 0x1F | (a3 >> 20) & 0x1FF000 | 0xF8000C00;
  a1[50] += 4;
}

{
  char v9;
  unsigned int v11;

  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = (32 * (char)a3) | v9 & 0x1F | (a3 >> 20) & 0x1FF000 | 0xF8000400;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::load32(_DWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned int v11;

  v8 = a3;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = (a2 >> 20) & 0x1FF000 | (32 * (char)a2) | v8 & 0x1F | 0xB8400C00;
  a1[50] += 4;
}

{
  char v8;
  unsigned int v11;

  v8 = a3;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = (a2 >> 20) & 0x1FF000 | (32 * (char)a2) | v8 & 0x1F | 0xB8400400;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::store32(_DWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  unsigned int v11;

  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = (32 * (char)a3) | v9 & 0x1F | (a3 >> 20) & 0x1FF000 | 0xB8000C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::storePair32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((a4 & 0x300000000) != 0 || (a4 >> 34) + 64 > 0x7F)
  {
    v12 = a4 & 0xFFFFFFFF000000FFLL;
    JSC::MacroAssemblerARM64::store32((uint64_t)a1, a2, a4 & 0xFFFFFFFF000000FFLL, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::store32((uint64_t)a1, a3, v12 + 0x400000000, v13, v14, v15, v16, v17);
  }
  else
  {
    v10 = (32 * (char)a4) | a2 & 0x1F | 0x29000000 | ((a3 & 0x1F) << 10) & 0x7FFF | (((a4 >> 34) & 0x7F) << 15);
    v11 = a1[50];
    if (v11 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v11 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v10;
    a1[50] += 4;
  }
}

{
  int v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v10 & 0x1F | (32 * v8) | ((v9 & 0x1F) << 10) | 0x29000000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::storeFloat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;

  v8 = a3;
  v9 = a2;
  if ((HIDWORD(a3) + 256) > 0x1FF)
  {
    if (HIDWORD(a3) > 0x3FFC || (a3 & 0x300000000) != 0)
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        return;
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      v12 = v9 | (32 * v8);
      v13 = -1137612800;
    }
    else
    {
      v12 = a2 | (32 * (char)a3) | (HIDWORD(a3) << 8) & 0x3FFC00;
      v13 = -1124073472;
    }
    v11 = v12 | v13;
  }
  else
  {
    v11 = a2 | (32 * (char)a3) | ((WORD2(a3) & 0x1FF) << 12) | 0xBC000000;
  }
  v16 = *(_DWORD *)(a1 + 200);
  v15 = (unsigned int *)(a1 + 200);
  v14 = v16;
  if (v16 + 4 > *(v15 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 - 36), a2, a3, a4, a5, a6, a7, a8);
    v14 = *v15;
  }
  *(_DWORD *)(*((_QWORD *)v15 - 18) + v14) = v11;
  *v15 += 4;
}

void JSC::MacroAssemblerARM64::loadFloat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;

  v8 = a3;
  v9 = a2;
  if ((HIDWORD(a2) + 256) > 0x1FF)
  {
    if (HIDWORD(a2) > 0x3FFC || (a2 & 0x300000000) != 0)
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        return;
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      v12 = v8 | (32 * v9);
      v13 = -1133418496;
    }
    else
    {
      v12 = a3 | (32 * (char)a2) | (HIDWORD(a2) << 8) & 0x3FFC00;
      v13 = -1119879168;
    }
    v11 = v12 | v13;
  }
  else
  {
    v11 = a3 | (32 * (char)a2) | ((WORD2(a2) & 0x1FF) << 12) | 0xBC400000;
  }
  v16 = *(_DWORD *)(a1 + 200);
  v15 = (unsigned int *)(a1 + 200);
  v14 = v16;
  if (v16 + 4 > *(v15 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 - 36), a2, a3, a4, a5, a6, a7, a8);
    v14 = *v15;
  }
  *(_DWORD *)(*((_QWORD *)v15 - 18) + v14) = v11;
  *v15 += 4;
}

void JSC::MacroAssemblerARM64::loadPairFloat(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((a2 & 0x300000000) != 0 || (a2 >> 34) + 64 > 0x7F)
  {
    v12 = a2 & 0xFFFFFFFF000000FFLL;
    JSC::MacroAssemblerARM64::loadFloat((uint64_t)a1, a2 & 0xFFFFFFFF000000FFLL, a3, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::loadFloat((uint64_t)a1, v12 + 0x800000000, a4, v13, v14, v15, v16, v17);
  }
  else
  {
    v10 = a3 | (32 * (char)a2) | ((_DWORD)a4 << 10) | (((a2 >> 34) & 0x7F) << 15) | 0x2D400000;
    v11 = a1[50];
    if (v11 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v11 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v10;
    a1[50] += 4;
  }
}

void JSC::MacroAssemblerARM64::loadPairDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((a2 & 0x700000000) != 0 || (a2 >> 35) + 64 > 0x7F)
  {
    v12 = a2 & 0xFFFFFFFF000000FFLL;
    JSC::MacroAssemblerARM64::loadDouble((uint64_t)a1, a2 & 0xFFFFFFFF000000FFLL, a3, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::loadDouble((uint64_t)a1, v12 + 0x800000000, a4, v13, v14, v15, v16, v17);
  }
  else
  {
    v10 = a3 | (32 * (char)a2) | ((_DWORD)a4 << 10) | (((a2 >> 35) & 0x7F) << 15) | 0x6D400000;
    v11 = a1[50];
    if (v11 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v11 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v10;
    a1[50] += 4;
  }
}

void JSC::MacroAssemblerARM64::storePairFloat(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((a4 & 0x300000000) != 0 || (a4 >> 34) + 64 > 0x7F)
  {
    v12 = a4 & 0xFFFFFFFF000000FFLL;
    JSC::MacroAssemblerARM64::storeFloat((uint64_t)a1, a2, a4 & 0xFFFFFFFF000000FFLL, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::storeFloat((uint64_t)a1, a3, v12 + 0x800000000, v13, v14, v15, v16, v17);
  }
  else
  {
    v10 = a2 | ((_DWORD)a3 << 10) | (32 * (char)a4) | (((a4 >> 34) & 0x7F) << 15) | 0x2D000000;
    v11 = a1[50];
    if (v11 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v11 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v10;
    a1[50] += 4;
  }
}

void JSC::MacroAssemblerARM64::storePairDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((a4 & 0x700000000) != 0 || (a4 >> 35) + 64 > 0x7F)
  {
    v12 = a4 & 0xFFFFFFFF000000FFLL;
    JSC::MacroAssemblerARM64::storeDouble((uint64_t)a1, a2, a4 & 0xFFFFFFFF000000FFLL, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::storeDouble((uint64_t)a1, a3, v12 + 0x800000000, v13, v14, v15, v16, v17);
  }
  else
  {
    v10 = a2 | ((_DWORD)a3 << 10) | (32 * (char)a4) | (((a4 >> 35) & 0x7F) << 15) | 0x6D000000;
    v11 = a1[50];
    if (v11 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v11 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v10;
    a1[50] += 4;
  }
}

void JSC::MacroAssemblerARM64::moveVector(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = (v9 << 16) | (32 * v9) | v8 | 0x4EA01C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::move32ToFloat(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * (v9 & 0x1F)) | 0x1E270000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::moveFloatTo32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 & 0x1F | (32 * v9) | 0x1E260000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::loadAcq8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;

  v8 = a3;
  JSC::MacroAssemblerARM64::loadAcq8SignedExtendTo32(a1, a2, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::and32(a1, (JSC::ARM64LogicalImmediate *)0xFF, v8, v8);
}

void JSC::MacroAssemblerARM64::storeRel8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980C7A54);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v8 == 31)
      v11 = -1959697423;
    else
      v11 = ((v8 & 0x1F) << 16) | 0x8B000231;
    v13 = (unsigned int *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 200);
    if (v12 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v12 = *v13;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v11;
    *v13 += 4;
    v8 = 17;
  }
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v9 | (32 * v8) | 0x89FFC00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::loadAcq8SignedExtendTo32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if (HIDWORD(a2))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980C7B90);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v11 = -1959697423;
    else
      v11 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v13 = (unsigned int *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 200);
    if (v12 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v12 = *v13;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v11;
    *v13 += 4;
    v9 = 17;
  }
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v8 | (32 * v9) | 0x8DFFC00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::loadAcq16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;

  v8 = a3;
  JSC::MacroAssemblerARM64::loadAcq16SignedExtendTo32(a1, a2, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::and32(a1, (JSC::ARM64LogicalImmediate *)0xFFFF, v8, v8);
}

void JSC::MacroAssemblerARM64::load16SignedExtendTo32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;

  v8 = a3;
  v9 = a2;
  if ((HIDWORD(a2) + 256) <= 0x1FF)
  {
    v11 = ((WORD2(a2) & 0x1FF) << 12) | a3 & 0x1F | (32 * (char)a2);
    v12 = 2021654528;
LABEL_3:
    v13 = v11 | v12;
    goto LABEL_7;
  }
  if (HIDWORD(a2) <= 0x1FFE && (a2 & 0x100000000) == 0)
  {
    v11 = (HIDWORD(a2) << 9) & 0x3FFC00;
    v12 = a3 & 0x1F | (32 * (char)a2) | 0x79800000;
    goto LABEL_3;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1980C7CD4);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  v13 = v8 & 0x1F | (32 * v9) | 0x78F16800;
LABEL_7:
  v16 = *(_DWORD *)(a1 + 200);
  v15 = (unsigned int *)(a1 + 200);
  v14 = v16;
  if (v16 + 4 > *(v15 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 - 36), a2, a3, a4, a5, a6, a7, a8);
    v14 = *v15;
  }
  *(_DWORD *)(*((_QWORD *)v15 - 18) + v14) = v13;
  *v15 += 4;
}

void JSC::MacroAssemblerARM64::loadAcq16SignedExtendTo32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if (HIDWORD(a2))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980C7E20);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v11 = -1959697423;
    else
      v11 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v13 = (unsigned int *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 200);
    if (v12 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v12 = *v13;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v11;
    *v13 += 4;
    v9 = 17;
  }
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v8 | (32 * v9) | 0x48DFFC00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::store16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if ((HIDWORD(a3) + 256) > 0x1FF)
  {
    if (HIDWORD(a3) > 0x1FFE || (a3 & 0x100000000) != 0)
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x1980C7F2CLL);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      v11 = v9 & 0x1F | (32 * v8) | 0x78316800;
    }
    else
    {
      v11 = (HIDWORD(a3) << 9) & 0x3FFC00 | a2 & 0x1F | (32 * (char)a3) | 0x79000000;
    }
  }
  else
  {
    v11 = ((WORD2(a3) & 0x1FF) << 12) | a2 & 0x1F | (32 * (char)a3) | 0x78000000;
  }
  v14 = *(_DWORD *)(a1 + 200);
  v13 = (unsigned int *)(a1 + 200);
  v12 = v14;
  if (v14 + 4 > *(v13 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 - 36), a2, a3, a4, a5, a6, a7, a8);
    v12 = *v13;
  }
  *(_DWORD *)(*((_QWORD *)v13 - 18) + v12) = v11;
  *v13 += 4;
}

void JSC::MacroAssemblerARM64::storeRel16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980C807CLL);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v8 == 31)
      v11 = -1959697423;
    else
      v11 = ((v8 & 0x1F) << 16) | 0x8B000231;
    v13 = (unsigned int *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 200);
    if (v12 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v12 = *v13;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v11;
    *v13 += 4;
    v8 = 17;
  }
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v9 | (32 * v8) | 0x489FFC00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::loadAcq32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if (HIDWORD(a2))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980C81B8);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v11 = -1959697423;
    else
      v11 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v13 = (unsigned int *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 200);
    if (v12 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v12 = *v13;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v11;
    *v13 += 4;
    v9 = 17;
  }
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v8 | (32 * v9) | 0x88DFFC00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::storeRel32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980C82F4);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v8 == 31)
      v11 = -1959697423;
    else
      v11 = ((v8 & 0x1F) << 16) | 0x8B000231;
    v13 = (unsigned int *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 200);
    if (v12 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v12 = *v13;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v11;
    *v13 += 4;
    v8 = 17;
  }
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v9 | (32 * v8) | 0x889FFC00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::loadAcq64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if (HIDWORD(a2))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980C8430);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v11 = -1959697423;
    else
      v11 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v13 = (unsigned int *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 200);
    if (v12 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v12 = *v13;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v11;
    *v13 += 4;
    v9 = 17;
  }
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v8 | (32 * v9) | 0xC8DFFC00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::storeRel64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980C856CLL);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v8 == 31)
      v11 = -1959697423;
    else
      v11 = ((v8 & 0x1F) << 16) | 0x8B000231;
    v13 = (unsigned int *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 200);
    if (v12 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v12 = *v13;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v11;
    *v13 += 4;
    v8 = 17;
  }
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v9 | (32 * v8) | 0xC89FFC00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::extractUnsignedBitfield64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = (((v9 + v10) << 10) + 1073740800) & 0xFFFFFC00 | (v10 << 16) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0xD3400000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::insertUnsignedBitfieldInZero32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = (-65536 * v10) & 0x1F0000 | ((v9 << 10) - 1024) & 0xFFFFFC00 | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x53000000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::insertUnsignedBitfieldInZero64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = (-65536 * v10) & 0x3F0000 | ((v9 << 10) + 1073740800) & 0xFFFFFC00 | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0xD3400000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::insertBitField32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = (-65536 * v10) & 0x1F0000 | ((v9 << 10) - 1024) & 0xFFFFFC00 | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x33000000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::insertBitField64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = (-65536 * v10) & 0x3F0000 | ((v9 << 10) + 2147482624) & 0xFFFFFC00 | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0xB3400000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::clearBitField32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (-65536 * v10) & 0x1F0000 | v8 & 0x1F | ((v9 << 10) - 1024) | 0x330003E0;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::clearBitField64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (-65536 * v10) & 0x3F0000 | v8 & 0x1F | ((v9 << 10) + 2147482624) | 0xB34003E0;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::clearBitsWithMask64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x8A200000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::reverseBits64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 & 0x1F | (32 * (v9 & 0x1F)) | 0xDAC00000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::reverseBits32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 & 0x1F | (32 * (v9 & 0x1F)) | 0x5AC00000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::orNot64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0xAA200000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::xorNot32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x4A200000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::xorNot64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0xCA200000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::xorNotLeftShift32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x4A200000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::xorNotRightShift32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x4AA00000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::xorNotUnsignedRightShift32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x4A600000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::xorNotLeftShift64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0xCA200000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::xorNotRightShift64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0xCAA00000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::xorNotUnsignedRightShift64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0xCA600000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::extractInsertBitfieldAtLowEnd32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = (((v9 + v10) << 10) - 1024) & 0xFFFFFC00 | (v10 << 16) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x33000000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::extractInsertBitfieldAtLowEnd64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = (((v9 + v10) << 10) + 2147482624) & 0xFFFFFC00 | (v10 << 16) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0xB3400000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::insertSignedBitfieldInZero32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = (-65536 * v10) & 0x1F0000 | ((v9 << 10) - 1024) & 0xFFFFFC00 | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x13000000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::insertSignedBitfieldInZero64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = (-65536 * v10) & 0x3F0000 | ((v9 << 10) + 2147482624) & 0xFFFFFC00 | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x93400000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::extractSignedBitfield32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = (((v9 + v10) << 10) - 1024) & 0xFFFFFC00 | (v10 << 16) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x13000000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::extractSignedBitfield64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = (((v9 + v10) << 10) + 2147482624) & 0xFFFFFC00 | (v10 << 16) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x93400000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::extractRegister32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | (v9 << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x13800000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::extractRegister64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | (v9 << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x93C00000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::addRightShift64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v10;
  unsigned int *v11;
  _QWORD *v12;

  v8 = (a3 & 0x1F) << 16;
  if ((_DWORD)a2 == 31 || (_DWORD)a5 == 31)
    v9 = a5 | (32 * a2) | ((_WORD)a4 << 10) & 0x1C00 | v8 | 0x8B206000;
  else
    v9 = ((unsigned __int16)((_WORD)a4 << 10) | (32 * (a2 & 0x1F)) | a5 & 0x1F | v8) - 1954545664;
  v11 = a1 + 50;
  v10 = a1[50];
  v12 = a1 + 14;
  if (v10 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v10 = *v11;
  }
  *(_DWORD *)(*v12 + v10) = v9;
  *v11 += 4;
}

void JSC::MacroAssemblerARM64::addUnsignedRightShift64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v10;
  unsigned int *v11;
  _QWORD *v12;

  v8 = (a3 & 0x1F) << 16;
  if ((_DWORD)a2 == 31 || (_DWORD)a5 == 31)
    v9 = a5 | (32 * a2) | ((_WORD)a4 << 10) & 0x1C00 | v8 | 0x8B206000;
  else
    v9 = ((unsigned __int16)((_WORD)a4 << 10) | (32 * (a2 & 0x1F)) | a5 & 0x1F | v8) - 1958739968;
  v11 = a1 + 50;
  v10 = a1[50];
  v12 = a1 + 14;
  if (v10 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v10 = *v11;
  }
  *(_DWORD *)(*v12 + v10) = v9;
  *v11 += 4;
}

void JSC::MacroAssemblerARM64::subLeftShift32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x4B000000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::subRightShift32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x4B800000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::subUnsignedRightShift32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x4B400000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::subLeftShift64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0xCB000000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::subRightShift64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0xCB800000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::subUnsignedRightShift64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0xCB400000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::andLeftShift32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0xA000000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::andRightShift32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0xA800000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::andUnsignedRightShift32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0xA400000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::andLeftShift64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x8A000000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::andRightShift64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x8A800000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::andUnsignedRightShift64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x8A400000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::xorRightShift32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x4A800000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::xorLeftShift64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0xCA000000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::xorRightShift64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0xCA800000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::orRightShift32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x2A800000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::orUnsignedRightShift32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0x2A400000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::orRightShift64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v10 & 0x1F) << 16) | ((v9 & 0x3F) << 10) | (32 * (v11 & 0x1F)) | v8 & 0x1F | 0xAA800000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::floatMax(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (32 * v10) | (v9 << 16) | v8 | 0x1E204800;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::floatMin(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (32 * v10) | (v9 << 16) | v8 | 0x1E205800;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::doubleMax(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (32 * v10) | (v9 << 16) | v8 | 0x1E604800;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::doubleMin(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (32 * v10) | (v9 << 16) | v8 | 0x1E605800;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::atomicStrongCAS8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a4))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CA33CLL);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a4 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v8 == 31)
      v12 = -1959697423;
    else
      v12 = ((v8 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v8 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v9 | (v10 << 16) | (32 * v8) | 0x8E0FC00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::atomicStrongCAS16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a4))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CA480);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a4 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v8 == 31)
      v12 = -1959697423;
    else
      v12 = ((v8 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v8 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v9 | (v10 << 16) | (32 * v8) | 0x48E0FC00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::atomicStrongCAS32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a4))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CA5C4);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a4 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v8 == 31)
      v12 = -1959697423;
    else
      v12 = ((v8 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v8 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v9 | (v10 << 16) | (32 * v8) | 0x88E0FC00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::atomicStrongCAS64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a4))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CA708);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a4 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v8 == 31)
      v12 = -1959697423;
    else
      v12 = ((v8 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v8 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v9 | (v10 << 16) | (32 * v8) | 0xC8E0FC00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::atomicXchgAdd8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CA848);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v8 | (v10 << 16) | (32 * v9) | 0x38E00000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::atomicXchgAdd16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CA988);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v8 | (v10 << 16) | (32 * v9) | 0x78E00000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::atomicXchgAdd32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CAAC8);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v8 | (v10 << 16) | (32 * v9) | 0xB8E00000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::atomicXchgAdd64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CAC08);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v8 | (v10 << 16) | (32 * v9) | 0xF8E00000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::atomicXchg8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CAD4CLL);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v8 | (v10 << 16) | (32 * v9) | 0x38E08000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::atomicXchg16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CAE90);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v8 | (v10 << 16) | (32 * v9) | 0x78E08000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::atomicXchg32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CAFD4);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v8 | (v10 << 16) | (32 * v9) | 0xB8E08000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::atomicXchg64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CB118);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v8 | (v10 << 16) | (32 * v9) | 0xF8E08000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::loadLink8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if (HIDWORD(a2))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CB254);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v11 = -1959697423;
    else
      v11 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v13 = (unsigned int *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 200);
    if (v12 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v12 = *v13;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v11;
    *v13 += 4;
    v9 = 17;
  }
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v8 | (32 * v9) | 0x85F7C00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::loadLinkAcq8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if (HIDWORD(a2))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CB390);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v11 = -1959697423;
    else
      v11 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v13 = (unsigned int *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 200);
    if (v12 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v12 = *v13;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v11;
    *v13 += 4;
    v9 = 17;
  }
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v8 | (32 * v9) | 0x85FFC00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::storeCond8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CB4D4);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v10 | (v8 << 16) | (32 * v9) | 0x8007C00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::storeCondRel8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CB618);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v10 | (v8 << 16) | (32 * v9) | 0x800FC00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::loadLink16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if (HIDWORD(a2))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CB754);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v11 = -1959697423;
    else
      v11 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v13 = (unsigned int *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 200);
    if (v12 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v12 = *v13;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v11;
    *v13 += 4;
    v9 = 17;
  }
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v8 | (32 * v9) | 0x485F7C00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::loadLinkAcq16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if (HIDWORD(a2))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CB890);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v11 = -1959697423;
    else
      v11 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v13 = (unsigned int *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 200);
    if (v12 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v12 = *v13;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v11;
    *v13 += 4;
    v9 = 17;
  }
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v8 | (32 * v9) | 0x485FFC00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::storeCond16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CB9D4);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v10 | (v8 << 16) | (32 * v9) | 0x48007C00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::storeCondRel16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CBB18);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v10 | (v8 << 16) | (32 * v9) | 0x4800FC00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::loadLink32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if (HIDWORD(a2))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CBC54);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v11 = -1959697423;
    else
      v11 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v13 = (unsigned int *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 200);
    if (v12 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v12 = *v13;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v11;
    *v13 += 4;
    v9 = 17;
  }
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v8 | (32 * v9) | 0x885F7C00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::loadLinkAcq32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if (HIDWORD(a2))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CBD90);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v11 = -1959697423;
    else
      v11 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v13 = (unsigned int *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 200);
    if (v12 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v12 = *v13;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v11;
    *v13 += 4;
    v9 = 17;
  }
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v8 | (32 * v9) | 0x885FFC00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::storeCond32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CBED4);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v10 | (v8 << 16) | (32 * v9) | 0x88007C00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::storeCondRel32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CC018);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v10 | (v8 << 16) | (32 * v9) | 0x8800FC00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::loadLink64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if (HIDWORD(a2))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CC154);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v11 = -1959697423;
    else
      v11 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v13 = (unsigned int *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 200);
    if (v12 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v12 = *v13;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v11;
    *v13 += 4;
    v9 = 17;
  }
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v8 | (32 * v9) | 0xC85F7C00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::loadLinkAcq64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if (HIDWORD(a2))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CC290);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v11 = -1959697423;
    else
      v11 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v13 = (unsigned int *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 200);
    if (v12 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v12 = *v13;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v11;
    *v13 += 4;
    v9 = 17;
  }
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v8 | (32 * v9) | 0xC85FFC00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::storeCond64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CC3D4);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v10 | (v8 << 16) | (32 * v9) | 0xC8007C00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::storeCondRel64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CC518);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v10 | (v8 << 16) | (32 * v9) | 0xC800FC00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::depend32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = (unsigned __int16)(32 * (v9 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x4A000000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::depend64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = (unsigned __int16)(32 * (v9 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0xCA000000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::atomicXchgOr8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CC754);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v8 | (v10 << 16) | (32 * v9) | 0x38E03000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::atomicXchgOr16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CC898);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v8 | (v10 << 16) | (32 * v9) | 0x78E03000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::atomicXchgOr32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CC9DCLL);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v8 | (v10 << 16) | (32 * v9) | 0xB8E03000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::atomicXchgOr64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CCB20);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v8 | (v10 << 16) | (32 * v9) | 0xF8E03000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::atomicXchgClear8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CCC64);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v8 | (v10 << 16) | (32 * v9) | 0x38E01000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::atomicXchgClear16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CCDA8);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v8 | (v10 << 16) | (32 * v9) | 0x78E01000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::atomicXchgClear32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CCEECLL);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v8 | (v10 << 16) | (32 * v9) | 0xB8E01000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::atomicXchgClear64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CD030);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v8 | (v10 << 16) | (32 * v9) | 0xF8E01000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::atomicXchgXor8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CD174);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v8 | (v10 << 16) | (32 * v9) | 0x38E02000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::atomicXchgXor16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CD2B8);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v8 | (v10 << 16) | (32 * v9) | 0x78E02000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::atomicXchgXor32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CD3FCLL);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v8 | (v10 << 16) | (32 * v9) | 0xB8E02000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::atomicXchgXor64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980CD540);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v8 | (v10 << 16) | (32 * v9) | 0xF8E02000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::test32(_DWORD *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  v8 = a5;
  JSC::MacroAssemblerARM64::test32((uint64_t)a1, a3, (JSC::ARM64LogicalImmediate *)a4, a4, a5, a6, a7, a8);
  v18 = a1[50];
  if (v18 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v11, v12, v13, v14, v15, v16, v17);
    v18 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v18) = (v8 & 0x1F | ((a2 & 0xF) << 12)) ^ 0x1A9F17E0;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::test64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v11;
  JSC::AssemblerBuffer *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v8 = a5;
  v9 = a2;
  v11 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a4 & 0x1F) << 16) | 0xEA00001F;
  v12 = (JSC::AssemblerBuffer *)(a1 + 14);
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = v11;
  v14 = a1[50];
  v15 = v14 + 4;
  a1[50] = v14 + 4;
  if ((v14 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v15 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v15) = (v8 & 0x1F | ((v9 & 0xF) << 12)) ^ 0x1A9F17E0;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::branchFloat(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v9;
  int v10;
  unsigned int v14;

  v9 = a4;
  v10 = a3;
  v14 = a1[50];
  if (v14 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v14 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v14) = (32 * v10) | (v9 << 16) | 0x1E202000;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void JSC::MacroAssemblerARM64::branchFloatWithZero(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), (32 * (_DWORD)a4) | 0x1E202008u, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(a2, a3, v11, v12, v13, v14, v15, v16, a1);
}

void JSC::MacroAssemblerARM64::moveConditionally64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unsigned __int8 v10;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;

  v8 = a6;
  v9 = a5;
  v10 = a2;
  v12 = (a4 & 0x1F) << 16;
  if ((_DWORD)a3 == 31)
  {
    v13 = -350198785;
  }
  else
  {
    v12 |= 32 * (a3 & 0x1F);
    v13 = -352321505;
  }
  v14 = v12 | v13;
  v15 = a1[50];
  if (v15 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v15 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v15) = v14;
  v16 = a1[50] + 4;
  a1[50] = v16;
  if (v16 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v16 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v16) = (v10 << 12) | ((v8 & 0x1F) << 16) | (32 * (v9 & 0x1F)) | v8 & 0x1F | 0x9A800000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::moveConditionally64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  int v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  JSC::AssemblerBuffer *v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  _QWORD *v28;
  unsigned int *v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  int v42;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = a3;
  v12 = a2;
  if ((_DWORD)a4)
  {
    if (a4 > 0xFFF)
    {
      v18 = -(int)a4;
      if (-(int)a4 > 0xFFF)
      {
        if ((a4 & 0xFFF) != 0)
        {
          v14 = 0;
          v15 = 0;
          v17 = 0;
          LOBYTE(v18) = 0;
          v16 = 0;
        }
        else
        {
          v33 = (int)a4 >> 12;
          v34 = BYTE3(a4);
          v35 = 0xC00000000;
          v36 = 1;
          if (-((int)a4 >> 12) > 0xFFF)
            v35 = 0;
          if (-v33 <= 0xFFF)
          {
            v37 = 0x100000000;
          }
          else
          {
            v36 = 0;
            v37 = 0;
          }
          if (-v33 <= 0xFFF)
            v38 = -v33;
          else
            LOBYTE(v38) = 0;
          if (-v33 <= 0xFFF)
            v39 = -((int)a4 >> 12) & 0xFFFFFF00;
          else
            v39 = 0;
          v17 = 0x100000000;
          v40 = v34 == 0;
          if (v34)
            v14 = v35;
          else
            v14 = 0xC00000000;
          if (v40)
            v15 = 0;
          else
            v15 = v36;
          if (v40)
          {
            LOBYTE(v18) = (int)a4 >> 12;
          }
          else
          {
            v17 = v37;
            LOBYTE(v18) = v38;
          }
          if (v40)
            v16 = v33 & 0xFFFFFF00;
          else
            v16 = v39;
        }
      }
      else
      {
        v14 = 0;
        v16 = v18 & 0xFFFFFF00;
        v17 = 0x100000000;
        v15 = 1;
      }
    }
    else
    {
      v14 = 0;
      v15 = 0;
      v16 = a4 & 0xFFFFFF00;
      v17 = 0x100000000;
      LOBYTE(v18) = a4;
    }
    v19 = v14 | v16 | v18;
    v20 = v17 | v15;
    goto LABEL_16;
  }
  v19 = 0;
  v20 = 0x100000000;
  if ((int)a2 <= 0)
  {
    if (!(_DWORD)a2)
      goto LABEL_35;
    goto LABEL_16;
  }
  if ((_DWORD)a2 == 1)
  {
    v12 = 4096;
    goto LABEL_35;
  }
  if ((_DWORD)a2 == 10)
  {
    v12 = 20480;
    goto LABEL_35;
  }
  if ((_DWORD)a2 != 11)
  {
LABEL_16:
    if ((v20 & 0xFF00000000) != 0)
    {
      v21 = (JSC::AssemblerBuffer *)(a1 + 56);
      v22 = *(_DWORD *)(a1 + 200);
      if ((_BYTE)v20)
        v23 = -1325400033;
      else
        v23 = -251658209;
      if ((v19 & 0xFFFFFFFF00000000) == 0xC00000000)
        v23 |= 0x400000u;
      v25 = v23 | ((v19 & 0xFFF) << 10) | (32 * a3);
      if (v22 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v21, a2, a3, a4, a5, a6, a7, a8);
        v22 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = v25;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x1980CDB8CLL);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a4, a1 + 264, a4, a5, a6, a7, a8);
      if (v11 == 31)
      {
        v41 = *(_DWORD *)(a1 + 200);
        if (v41 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          v41 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v41) = -349150209;
      }
      else
      {
        v24 = *(_DWORD *)(a1 + 200);
        if (v24 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          v24 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v24) = (32 * (v11 & 0x1F)) | 0xEB10001F;
      }
    }
    v26 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v26;
    v27 = (v12 << 12) | ((v9 & 0x1F) << 16) | (32 * (v10 & 0x1F)) | v8 & 0x1F;
    v28 = (_QWORD *)(a1 + 56);
    v29 = (unsigned int *)(a1 + 200);
    if (v26 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v26 = *v29;
    }
    goto LABEL_32;
  }
  v12 = 0x4000;
LABEL_35:
  v30 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a3 & 0x1F) << 16) | 0xEA00001F;
  v29 = (unsigned int *)(a1 + 200);
  v31 = *(_DWORD *)(a1 + 200);
  v28 = (_QWORD *)(a1 + 56);
  if (v31 + 4 > *(_DWORD *)(a1 + 192))
  {
    v42 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a3 & 0x1F) << 16) | 0xEA00001F;
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v30 = v42;
    v31 = *v29;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v31) = v30;
  v32 = *(_DWORD *)(a1 + 200);
  v26 = v32 + 4;
  *(_DWORD *)(a1 + 200) = v32 + 4;
  if ((v32 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v26 = *v29;
  }
  v27 = v12 | ((v9 & 0x1F) << 16) | (32 * (v10 & 0x1F)) | v8 & 0x1F;
LABEL_32:
  *(_DWORD *)(*v28 + v26) = v27 | 0x9A800000;
  *v29 += 4;
}

void JSC::MacroAssemblerARM64::moveConditionallyTest32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unsigned __int8 v10;
  int v12;
  JSC::AssemblerBuffer *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v8 = a6;
  v9 = a5;
  v10 = a2;
  v12 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a4 & 0x1F) << 16) | 0x6A00001F;
  v13 = (JSC::AssemblerBuffer *)(a1 + 14);
  v14 = a1[50];
  if (v14 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v14 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v14) = v12;
  v15 = a1[50];
  v16 = v15 + 4;
  a1[50] = v15 + 4;
  if ((v15 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, a2, a3, a4, a5, a6, a7, a8);
    v16 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v16) = (v10 << 12) | ((v8 & 0x1F) << 16) | (32 * (v9 & 0x1F)) | v8 & 0x1F | 0x9A800000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::moveConditionallyTest64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unsigned __int8 v10;
  int v12;
  JSC::AssemblerBuffer *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v8 = a6;
  v9 = a5;
  v10 = a2;
  v12 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a4 & 0x1F) << 16) | 0xEA00001F;
  v13 = (JSC::AssemblerBuffer *)(a1 + 14);
  v14 = a1[50];
  if (v14 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v14 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v14) = v12;
  v15 = a1[50];
  v16 = v15 + 4;
  a1[50] = v15 + 4;
  if ((v15 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, a2, a3, a4, a5, a6, a7, a8);
    v16 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v16) = (v10 << 12) | ((v8 & 0x1F) << 16) | (32 * (v9 & 0x1F)) | v8 & 0x1F | 0x9A800000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::moveConditionallyDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  unsigned int v14;

  v10 = a4;
  v11 = a3;
  v14 = a1[50];
  if (v14 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v14 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v14) = (32 * v11) | (v10 << 16) | 0x1E602000;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::moveConditionallyAfterFloatingPointCompare<64>((uint64_t)a1, a2, a5, a6, a5, a6, a7, a8);
}

void JSC::MacroAssemblerARM64::moveConditionallyDoubleWithZero(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), (32 * (_DWORD)a3) | 0x1E602008u, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveConditionallyAfterFloatingPointCompare<64>(a1, a2, a4, a5, a6, v13, v14, v15);
}

void JSC::MacroAssemblerARM64::moveConditionallyDoubleWithZero(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned int v13;

  v10 = a3;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = (32 * v10) | 0x1E602008;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::moveConditionallyAfterFloatingPointCompare<64>((uint64_t)a1, a2, a4, a5, a5, a6, a7, a8);
}

void JSC::MacroAssemblerARM64::moveConditionallyFloat(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  unsigned int v15;

  v11 = a4;
  v12 = a3;
  v15 = a1[50];
  if (v15 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v15 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v15) = (32 * v12) | (v11 << 16) | 0x1E202000;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::moveConditionallyAfterFloatingPointCompare<64>((uint64_t)a1, a2, a5, a6, a7, a6, a7, a8);
}

{
  int v10;
  int v11;
  unsigned int v14;

  v10 = a4;
  v11 = a3;
  v14 = a1[50];
  if (v14 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v14 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v14) = (32 * v11) | (v10 << 16) | 0x1E202000;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::moveConditionallyAfterFloatingPointCompare<64>((uint64_t)a1, a2, a5, a6, a5, a6, a7, a8);
}

void JSC::MacroAssemblerARM64::moveConditionallyFloatWithZero(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  unsigned int v14;

  v11 = a3;
  v14 = a1[50];
  if (v14 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v14 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v14) = (32 * v11) | 0x1E202008;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::moveConditionallyAfterFloatingPointCompare<64>((uint64_t)a1, a2, a4, a5, a6, a6, a7, a8);
}

{
  int v10;
  unsigned int v13;

  v10 = a3;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = (32 * v10) | 0x1E202008;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::moveConditionallyAfterFloatingPointCompare<64>((uint64_t)a1, a2, a4, a5, a5, a6, a7, a8);
}

void JSC::MacroAssemblerARM64::moveDoubleConditionally32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned __int8 v11;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = a2;
  v13 = (a4 & 0x1F) << 16;
  if ((_DWORD)a3 == 31)
  {
    v14 = 1797284863;
  }
  else
  {
    v13 |= 32 * (a3 & 0x1F);
    v14 = 1795162143;
  }
  v15 = v13 | v14;
  v16 = a1[50];
  if (v16 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v16 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v16) = v15;
  v17 = a1[50] + 4;
  a1[50] = v17;
  if (v17 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v17 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v17) = (v11 << 12) | (32 * v10) | (v9 << 16) | v8 | 0x1E600C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::moveDoubleConditionally32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  JSC::AssemblerBuffer *v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  _QWORD *v28;
  unsigned int *v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  int v42;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = a3;
  v12 = a2;
  if ((_DWORD)a4)
  {
    if (a4 > 0xFFF)
    {
      v18 = -(int)a4;
      if (-(int)a4 > 0xFFF)
      {
        if ((a4 & 0xFFF) != 0)
        {
          v14 = 0;
          v15 = 0;
          v17 = 0;
          LOBYTE(v18) = 0;
          v16 = 0;
        }
        else
        {
          v33 = (int)a4 >> 12;
          v34 = BYTE3(a4);
          v35 = 0xC00000000;
          v36 = 1;
          if (-((int)a4 >> 12) > 0xFFF)
            v35 = 0;
          if (-v33 <= 0xFFF)
          {
            v37 = 0x100000000;
          }
          else
          {
            v36 = 0;
            v37 = 0;
          }
          if (-v33 <= 0xFFF)
            v38 = -v33;
          else
            LOBYTE(v38) = 0;
          if (-v33 <= 0xFFF)
            v39 = -((int)a4 >> 12) & 0xFFFFFF00;
          else
            v39 = 0;
          v17 = 0x100000000;
          v40 = v34 == 0;
          if (v34)
            v14 = v35;
          else
            v14 = 0xC00000000;
          if (v40)
            v15 = 0;
          else
            v15 = v36;
          if (v40)
          {
            LOBYTE(v18) = (int)a4 >> 12;
          }
          else
          {
            v17 = v37;
            LOBYTE(v18) = v38;
          }
          if (v40)
            v16 = v33 & 0xFFFFFF00;
          else
            v16 = v39;
        }
      }
      else
      {
        v14 = 0;
        v16 = v18 & 0xFFFFFF00;
        v17 = 0x100000000;
        v15 = 1;
      }
    }
    else
    {
      v14 = 0;
      v15 = 0;
      v16 = a4 & 0xFFFFFF00;
      v17 = 0x100000000;
      LOBYTE(v18) = a4;
    }
    v19 = v14 | v16 | v18;
    v20 = v17 | v15;
    goto LABEL_16;
  }
  v19 = 0;
  v20 = 0x100000000;
  if ((int)a2 <= 0)
  {
    if (!(_DWORD)a2)
      goto LABEL_35;
    goto LABEL_16;
  }
  if ((_DWORD)a2 == 1)
  {
    v12 = 4096;
    goto LABEL_35;
  }
  if ((_DWORD)a2 == 10)
  {
    v12 = 20480;
    goto LABEL_35;
  }
  if ((_DWORD)a2 != 11)
  {
LABEL_16:
    if ((v20 & 0xFF00000000) != 0)
    {
      v21 = (JSC::AssemblerBuffer *)(a1 + 56);
      v22 = *(_DWORD *)(a1 + 200);
      if ((_BYTE)v20)
        v23 = 822083615;
      else
        v23 = 1895825439;
      if ((v19 & 0xFFFFFFFF00000000) == 0xC00000000)
        v23 |= 0x400000u;
      v25 = v23 | ((v19 & 0xFFF) << 10) | (32 * a3);
      if (v22 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v21, a2, a3, a4, a5, a6, a7, a8);
        v22 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = v25;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x1980CE5B0);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a4, a1 + 264, a4, a5, a6, a7, a8);
      if (v11 == 31)
      {
        v24 = *(_DWORD *)(a1 + 200);
        if (v24 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          v24 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v24) = 1798333439;
      }
      else
      {
        v41 = *(_DWORD *)(a1 + 200);
        if (v41 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          v41 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v41) = (32 * (v11 & 0x1F)) | 0x6B10001F;
      }
    }
    v26 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v26;
    v27 = (v12 << 12) | (32 * v10) | (v9 << 16) | v8;
    v28 = (_QWORD *)(a1 + 56);
    v29 = (unsigned int *)(a1 + 200);
    if (v26 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v26 = *v29;
    }
    goto LABEL_32;
  }
  v12 = 0x4000;
LABEL_35:
  v30 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a3 & 0x1F) << 16) | 0x6A00001F;
  v29 = (unsigned int *)(a1 + 200);
  v31 = *(_DWORD *)(a1 + 200);
  v28 = (_QWORD *)(a1 + 56);
  if (v31 + 4 > *(_DWORD *)(a1 + 192))
  {
    v42 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a3 & 0x1F) << 16) | 0x6A00001F;
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v30 = v42;
    v31 = *v29;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v31) = v30;
  v32 = *(_DWORD *)(a1 + 200);
  v26 = v32 + 4;
  *(_DWORD *)(a1 + 200) = v32 + 4;
  if ((v32 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v26 = *v29;
  }
  v27 = (v9 << 16) | (32 * v10) | v8 | v12;
LABEL_32:
  *(_DWORD *)(*v28 + v26) = v27 | 0x1E600C00;
  *v29 += 4;
}

void JSC::MacroAssemblerARM64::moveDoubleConditionally64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned __int8 v11;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = a2;
  v13 = (a4 & 0x1F) << 16;
  if ((_DWORD)a3 == 31)
  {
    v14 = -350198785;
  }
  else
  {
    v13 |= 32 * (a3 & 0x1F);
    v14 = -352321505;
  }
  v15 = v13 | v14;
  v16 = a1[50];
  if (v16 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v16 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v16) = v15;
  v17 = a1[50] + 4;
  a1[50] = v17;
  if (v17 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v17 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v17) = (v11 << 12) | (32 * v10) | (v9 << 16) | v8 | 0x1E600C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::moveDoubleConditionally64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  JSC::AssemblerBuffer *v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  _QWORD *v28;
  unsigned int *v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  int v42;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = a3;
  v12 = a2;
  if ((_DWORD)a4)
  {
    if (a4 > 0xFFF)
    {
      v18 = -(int)a4;
      if (-(int)a4 > 0xFFF)
      {
        if ((a4 & 0xFFF) != 0)
        {
          v14 = 0;
          v15 = 0;
          v17 = 0;
          LOBYTE(v18) = 0;
          v16 = 0;
        }
        else
        {
          v33 = (int)a4 >> 12;
          v34 = BYTE3(a4);
          v35 = 0xC00000000;
          v36 = 1;
          if (-((int)a4 >> 12) > 0xFFF)
            v35 = 0;
          if (-v33 <= 0xFFF)
          {
            v37 = 0x100000000;
          }
          else
          {
            v36 = 0;
            v37 = 0;
          }
          if (-v33 <= 0xFFF)
            v38 = -v33;
          else
            LOBYTE(v38) = 0;
          if (-v33 <= 0xFFF)
            v39 = -((int)a4 >> 12) & 0xFFFFFF00;
          else
            v39 = 0;
          v17 = 0x100000000;
          v40 = v34 == 0;
          if (v34)
            v14 = v35;
          else
            v14 = 0xC00000000;
          if (v40)
            v15 = 0;
          else
            v15 = v36;
          if (v40)
          {
            LOBYTE(v18) = (int)a4 >> 12;
          }
          else
          {
            v17 = v37;
            LOBYTE(v18) = v38;
          }
          if (v40)
            v16 = v33 & 0xFFFFFF00;
          else
            v16 = v39;
        }
      }
      else
      {
        v14 = 0;
        v16 = v18 & 0xFFFFFF00;
        v17 = 0x100000000;
        v15 = 1;
      }
    }
    else
    {
      v14 = 0;
      v15 = 0;
      v16 = a4 & 0xFFFFFF00;
      v17 = 0x100000000;
      LOBYTE(v18) = a4;
    }
    v19 = v14 | v16 | v18;
    v20 = v17 | v15;
    goto LABEL_16;
  }
  v19 = 0;
  v20 = 0x100000000;
  if ((int)a2 <= 0)
  {
    if (!(_DWORD)a2)
      goto LABEL_35;
    goto LABEL_16;
  }
  if ((_DWORD)a2 == 1)
  {
    v12 = 4096;
    goto LABEL_35;
  }
  if ((_DWORD)a2 == 10)
  {
    v12 = 20480;
    goto LABEL_35;
  }
  if ((_DWORD)a2 != 11)
  {
LABEL_16:
    if ((v20 & 0xFF00000000) != 0)
    {
      v21 = (JSC::AssemblerBuffer *)(a1 + 56);
      v22 = *(_DWORD *)(a1 + 200);
      if ((_BYTE)v20)
        v23 = -1325400033;
      else
        v23 = -251658209;
      if ((v19 & 0xFFFFFFFF00000000) == 0xC00000000)
        v23 |= 0x400000u;
      v25 = v23 | ((v19 & 0xFFF) << 10) | (32 * a3);
      if (v22 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v21, a2, a3, a4, a5, a6, a7, a8);
        v22 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = v25;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x1980CEA24);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a4, a1 + 264, a4, a5, a6, a7, a8);
      if (v11 == 31)
      {
        v41 = *(_DWORD *)(a1 + 200);
        if (v41 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          v41 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v41) = -349150209;
      }
      else
      {
        v24 = *(_DWORD *)(a1 + 200);
        if (v24 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          v24 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v24) = (32 * (v11 & 0x1F)) | 0xEB10001F;
      }
    }
    v26 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v26;
    v27 = (v12 << 12) | (32 * v10) | (v9 << 16) | v8;
    v28 = (_QWORD *)(a1 + 56);
    v29 = (unsigned int *)(a1 + 200);
    if (v26 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v26 = *v29;
    }
    goto LABEL_32;
  }
  v12 = 0x4000;
LABEL_35:
  v30 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a3 & 0x1F) << 16) | 0xEA00001F;
  v29 = (unsigned int *)(a1 + 200);
  v31 = *(_DWORD *)(a1 + 200);
  v28 = (_QWORD *)(a1 + 56);
  if (v31 + 4 > *(_DWORD *)(a1 + 192))
  {
    v42 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a3 & 0x1F) << 16) | 0xEA00001F;
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v30 = v42;
    v31 = *v29;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v31) = v30;
  v32 = *(_DWORD *)(a1 + 200);
  v26 = v32 + 4;
  *(_DWORD *)(a1 + 200) = v32 + 4;
  if ((v32 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v26 = *v29;
  }
  v27 = (v9 << 16) | (32 * v10) | v8 | v12;
LABEL_32:
  *(_DWORD *)(*v28 + v26) = v27 | 0x1E600C00;
  *v29 += 4;
}

void JSC::MacroAssemblerARM64::moveDoubleConditionallyTest32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned __int8 v11;
  int v13;
  JSC::AssemblerBuffer *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = a2;
  v13 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a4 & 0x1F) << 16) | 0x6A00001F;
  v14 = (JSC::AssemblerBuffer *)(a1 + 14);
  v15 = a1[50];
  if (v15 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v15 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v15) = v13;
  v16 = a1[50];
  v17 = v16 + 4;
  a1[50] = v16 + 4;
  if ((v16 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, a2, a3, a4, a5, a6, a7, a8);
    v17 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v17) = (v11 << 12) | (32 * v10) | (v9 << 16) | v8 | 0x1E600C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::moveDoubleConditionallyTest32(_DWORD *a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  JSC::MacroAssemblerARM64::test32((uint64_t)a1, a3, (JSC::ARM64LogicalImmediate *)a4, a4, a5, a6, a7, a8);
  v20 = a1[50];
  if (v20 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v13, v14, v15, v16, v17, v18, v19);
    v20 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v20) = (a2 << 12) | (32 * v10) | (v9 << 16) | v8 | 0x1E600C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::moveDoubleConditionallyTest64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned __int8 v11;
  int v13;
  JSC::AssemblerBuffer *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = a2;
  v13 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a4 & 0x1F) << 16) | 0xEA00001F;
  v14 = (JSC::AssemblerBuffer *)(a1 + 14);
  v15 = a1[50];
  if (v15 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v15 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v15) = v13;
  v16 = a1[50];
  v17 = v16 + 4;
  a1[50] = v16 + 4;
  if ((v16 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, a2, a3, a4, a5, a6, a7, a8);
    v17 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v17) = (v11 << 12) | (32 * v10) | (v9 << 16) | v8 | 0x1E600C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::moveDoubleConditionallyDoubleWithZero(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), (32 * (_DWORD)a3) | 0x1E602008u, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveDoubleConditionallyAfterFloatingPointCompare<64>(a1, a2, a4, a5, a6, v13, v14, v15);
}

void JSC::MacroAssemblerARM64::moveDoubleConditionallyFloat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), (32 * (_DWORD)a3) | ((_DWORD)a4 << 16) | 0x1E202000u, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveDoubleConditionallyAfterFloatingPointCompare<64>(a1, a2, a5, a6, a7, v13, v14, v15);
}

void JSC::MacroAssemblerARM64::moveDoubleConditionallyFloatWithZero(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  unsigned int v14;

  v11 = a3;
  v14 = a1[50];
  if (v14 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v14 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v14) = (32 * v11) | 0x1E202008;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::moveDoubleConditionallyAfterFloatingPointCompare<64>((uint64_t)a1, a2, a4, a5, a6, a6, a7, a8);
}

void JSC::MacroAssemblerARM64::loadFence(JSC::MacroAssemblerARM64 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;

  v9 = *((_DWORD *)this + 50);
  if (v9 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::MacroAssemblerARM64 *)((char *)this + 56), a2, a3, a4, a5, a6, a7, a8);
    v9 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v9) = -721208385;
  *((_DWORD *)this + 50) += 4;
}

void JSC::MacroAssembler::retVoid(JSC::MacroAssembler *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;

  v9 = *((_DWORD *)this + 50);
  if (v9 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::MacroAssembler *)((char *)this + 56), a2, a3, a4, a5, a6, a7, a8);
    v9 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v9) = -698416192;
  *((_DWORD *)this + 50) += 4;
}

void JSC::MacroAssemblerARM64::vectorReplaceLaneInt64<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v8 | (v10 << 20) | (32 * v9) | 0x4E081C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorReplaceLaneInt32<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v8 | (v10 << 19) | (32 * v9) | 0x4E041C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorReplaceLaneInt16<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v8 | (v10 << 18) | (32 * v9) | 0x4E021C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorReplaceLaneInt8<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v8 | (v10 << 17) | (32 * v9) | 0x4E011C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorReplaceLaneFloat64<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v8 | (v10 << 20) | (32 * v9) | 0x6E080400;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorReplaceLaneFloat32<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v8 | (v10 << 19) | (32 * v9) | 0x6E040400;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorExtractLaneInt64<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v8 | (v10 << 20) | (32 * v9) | 0x4E083C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorExtractLaneInt32<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v8 | (v10 << 19) | (32 * v9) | 0xE043C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorExtractLaneSignedInt16<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v8 | (v10 << 18) | (32 * v9) | 0xE022C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorExtractLaneUnsignedInt16<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v8 | (v10 << 18) | (32 * v9) | 0xE023C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorExtractLaneSignedInt8<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v8 | (v10 << 17) | (32 * v9) | 0xE012C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorExtractLaneUnsignedInt8<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v8 | (v10 << 17) | (32 * v9) | 0xE013C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorExtractLaneFloat64<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  unsigned int *v10;
  _QWORD *v11;
  char v12;
  char v13;

  if ((_DWORD)a2)
  {
    v8 = (char)a4 | ((_DWORD)a2 << 20) | (32 * (char)a3) | 0x4E080400;
    v10 = a1 + 50;
    v9 = a1[50];
    v11 = a1 + 14;
    if (v9 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v9 = *v10;
    }
  }
  else
  {
    if (a3 == a4)
      return;
    v10 = a1 + 50;
    v9 = a1[50];
    v11 = a1 + 14;
    if (v9 + 4 > a1[48])
    {
      v13 = a4;
      v12 = a3;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      LOBYTE(a3) = v12;
      LOBYTE(a4) = v13;
      v9 = *v10;
    }
    v8 = (char)a4 | (32 * (char)a3) | 0x1E604000;
  }
  *(_DWORD *)(*v11 + v9) = v8;
  *v10 += 4;
}

void JSC::MacroAssemblerARM64::vectorExtractLaneFloat32<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  unsigned int *v10;
  _QWORD *v11;
  char v12;
  char v13;

  if ((_DWORD)a2)
  {
    v8 = (char)a4 | ((_DWORD)a2 << 19) | (32 * (char)a3) | 0x4E040400;
    v10 = a1 + 50;
    v9 = a1[50];
    v11 = a1 + 14;
    if (v9 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v9 = *v10;
    }
  }
  else
  {
    if (a3 == a4)
      return;
    v10 = a1 + 50;
    v9 = a1[50];
    v11 = a1 + 14;
    if (v9 + 4 > a1[48])
    {
      v13 = a4;
      v12 = a3;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      LOBYTE(a3) = v12;
      LOBYTE(a4) = v13;
      v9 = *v10;
    }
    v8 = (char)a4 | (32 * (char)a3) | 0x1E604000;
  }
  *(_DWORD *)(*v11 + v9) = v8;
  *v10 += 4;
}

void JSC::MacroAssemblerARM64::vectorSplatInt8(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0x4E010C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorSplatInt16(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0x4E020C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorSplatInt32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0x4E040C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorSplatInt64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0x4E080C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorSplatFloat32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0x4E040400;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorSplatFloat64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0x4E080400;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::compareFloatingPointVector(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int *v16;
  JSC::AssemblerBuffer *v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  _DWORD *v30;

  v8 = a3 & 0x3F;
  if ((v8 - 5) >= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1980CFBF8);
  }
  switch((int)a2)
  {
    case 0:
      if (v8 == 5)
      {
        v9 = 0;
      }
      else
      {
        if (v8 != 6)
        {
          __break(0xC471u);
          JUMPOUT(0x1980CFC68);
        }
        v9 = 0x400000;
      }
      v12 = a6 | (32 * a4) | ((_DWORD)a5 << 16);
      v13 = 1310778368;
      goto LABEL_37;
    case 1:
      if (v8 == 5)
      {
        v10 = 0;
      }
      else
      {
        if (v8 != 6)
        {
          __break(0xC471u);
          JUMPOUT(0x1980CFC88);
        }
        v10 = 0x400000;
      }
      v14 = (32 * a4) | ((_DWORD)a5 << 16) | v10 | a6 | 0x4E20E400;
      v16 = a1 + 50;
      v15 = a1[50];
      v17 = (JSC::AssemblerBuffer *)(a1 + 14);
      if (v15 + 4 > a1[48])
      {
        v30 = a1;
        v29 = a6;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
        a6 = v29;
        a1 = v30;
        v15 = *v16;
      }
      *(_DWORD *)(*((_QWORD *)a1 + 7) + v15) = v14;
      v18 = a1[50];
      v19 = v18 + 4;
      a1[50] = v18 + 4;
      v20 = a6 | (32 * a6) | 0x6E205800;
      v21 = v18 + 8;
      v22 = a1[48];
      goto LABEL_39;
    case 3:
      if (v8 == 5)
      {
        v11 = 0;
      }
      else
      {
        if (v8 != 6)
        {
          __break(0xC471u);
          JUMPOUT(0x1980CFCA8);
        }
        v11 = 0x400000;
      }
      v23 = a6 | ((_DWORD)a4 << 16) | (32 * a5);
      goto LABEL_33;
    case 9:
      if (v8 == 5)
      {
        v9 = 0;
      }
      else
      {
        if (v8 != 6)
        {
          __break(0xC471u);
          JUMPOUT(0x1980CFD08);
        }
        v9 = 0x400000;
      }
      v12 = a6 | ((_DWORD)a4 << 16) | (32 * a5);
      goto LABEL_36;
    case 10:
      if (v8 == 5)
      {
        v9 = 0;
      }
      else
      {
        if (v8 != 6)
        {
          __break(0xC471u);
          JUMPOUT(0x1980CFCC8);
        }
        v9 = 0x400000;
      }
      v12 = a6 | (32 * a4) | ((_DWORD)a5 << 16);
LABEL_36:
      v13 = 1847649280;
LABEL_37:
      v27 = v9 | v13;
      v28 = a1[50];
      v25 = a1 + 50;
      v19 = v28;
      v20 = v12 | v27;
      break;
    case 12:
      if (v8 == 5)
      {
        v11 = 0;
      }
      else
      {
        if (v8 != 6)
        {
          __break(0xC471u);
          JUMPOUT(0x1980CFCE8);
        }
        v11 = 0x400000;
      }
      v23 = a6 | (32 * a4) | ((_DWORD)a5 << 16);
LABEL_33:
      v24 = v23 | v11 | 0x6E20E400;
      v26 = a1[50];
      v25 = a1 + 50;
      v19 = v26;
      v20 = v24 | 0x800000;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1980CFC48);
  }
  v17 = (JSC::AssemblerBuffer *)(v25 - 36);
  v21 = v19 + 4;
  v22 = *(v25 - 2);
  v16 = v25;
LABEL_39:
  if (v21 > v22)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v17, a2, a3, a4, a5, a6, a7, a8);
    v19 = *v16;
  }
  *(_DWORD *)(*(_QWORD *)v17 + v19) = v20;
  *v16 += 4;
}

void JSC::MacroAssemblerARM64::compareIntegerVector(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v9;
  unsigned __int16 v10;
  int v11;
  unsigned int v12;
  unsigned int *v13;
  JSC::AssemblerBuffer *v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  _DWORD *v32;

  v8 = (a3 & 0x3F) - 1;
  if (v8 >= 4)
  {
    __break(0xC471u);
    JUMPOUT(0x1980CFF8CLL);
  }
  switch((int)a2)
  {
    case 0:
      v9 = (32 * a4) | ((_DWORD)a5 << 16) | a6 | ((v8 & 0x1FF) << 22);
      v10 = -29696;
      goto LABEL_11;
    case 1:
      v11 = (32 * a4) | ((_DWORD)a5 << 16) | ((v8 & 0x1FF) << 22) | a6 | 0x6E208C00;
      v13 = a1 + 50;
      v12 = a1[50];
      v14 = (JSC::AssemblerBuffer *)(a1 + 14);
      if (v12 + 4 > a1[48])
      {
        v32 = a1;
        v31 = a6;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
        a6 = v31;
        a1 = v32;
        v12 = *v13;
      }
      *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v11;
      v15 = a1[50];
      v16 = v15 + 4;
      a1[50] = v15 + 4;
      v17 = a6 | (32 * a6) | 0x6E205800;
      v18 = v15 + 8;
      v19 = a1[48];
      goto LABEL_23;
    case 2:
      v20 = (32 * a4) | ((_DWORD)a5 << 16);
      goto LABEL_13;
    case 3:
      v21 = ((_DWORD)a4 << 16) | (32 * a5);
      goto LABEL_10;
    case 8:
      v21 = (32 * a4) | ((_DWORD)a5 << 16);
LABEL_10:
      v9 = v21 | a6 | (v8 << 22);
      v10 = 13312;
LABEL_11:
      v22 = v10 | 0x6E200000;
      goto LABEL_17;
    case 9:
      v20 = ((_DWORD)a4 << 16) | (32 * a5);
LABEL_13:
      v23 = v20 | a6 | (v8 << 22);
      v24 = 1847604224;
      goto LABEL_21;
    case 10:
      v28 = (32 * a4) | ((_DWORD)a5 << 16);
      goto LABEL_20;
    case 11:
      v25 = ((_DWORD)a4 << 16) | (32 * a5);
      goto LABEL_16;
    case 12:
      v25 = (32 * a4) | ((_DWORD)a5 << 16);
LABEL_16:
      v9 = v25 | a6 | (v8 << 22);
      v22 = 1310733312;
LABEL_17:
      v27 = a1[50];
      v26 = a1 + 50;
      v16 = v27;
      v17 = v9 | v22;
      break;
    case 13:
      v28 = ((_DWORD)a4 << 16) | (32 * a5);
LABEL_20:
      v23 = v28 | a6 | (v8 << 22);
      v24 = 1310733312;
LABEL_21:
      v29 = v23 | v24;
      v30 = a1[50];
      v26 = a1 + 50;
      v16 = v30;
      v17 = v29 | 0x800;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1980CFFDCLL);
  }
  v14 = (JSC::AssemblerBuffer *)(v26 - 36);
  v18 = v16 + 4;
  v19 = *(v26 - 2);
  v13 = v26;
LABEL_23:
  if (v18 > v19)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, a2, a3, a4, a5, a6, a7, a8);
    v16 = *v13;
  }
  *(_DWORD *)(*(_QWORD *)v14 + v16) = v17;
  *v13 += 4;
}

void JSC::MacroAssemblerARM64::compareIntegerVectorWithZero(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v9;
  int v11;
  unsigned int v12;
  int v13;
  JSC::AssemblerBuffer *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  int v18;
  unsigned int v19;
  int v20;

  v8 = (a3 & 0x3F) - 1;
  if (v8 >= 4)
  {
    __break(0xC471u);
    JUMPOUT(0x1980D0280);
  }
  v9 = a5;
  if ((_DWORD)a2 == 1)
  {
    v18 = (32 * a4) | ((v8 & 0x1FF) << 22) | a5 | 0x4E209800;
    v17 = a1 + 50;
    v19 = a1[50];
    v14 = (JSC::AssemblerBuffer *)(a1 + 14);
    if (v19 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v19 = *v17;
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v19) = v18;
    v20 = a1[50];
    v12 = v20 + 4;
    a1[50] = v20 + 4;
    v13 = v9 | (32 * v9) | 0x6E205800;
    v15 = v20 + 8;
    v16 = a1[48];
  }
  else
  {
    if ((_DWORD)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x1980D02C0);
    }
    v11 = a5 | (32 * a4) | ((v8 & 0x1FF) << 22);
    v12 = a1[50];
    v13 = v11 | 0x4E209800;
    v14 = (JSC::AssemblerBuffer *)(a1 + 14);
    v15 = v12 + 4;
    v16 = a1[48];
    v17 = a1 + 50;
  }
  if (v15 > v16)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, a2, a3, a4, a5, a6, a7, a8);
    v12 = *v17;
  }
  *(_DWORD *)(*(_QWORD *)v14 + v12) = v13;
  *v17 += 4;
}

void JSC::MacroAssemblerARM64::vectorUnsignedMax(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v10;
  unsigned int *v11;
  _QWORD *v12;

  v8 = a2 & 0x3F;
  switch(v8)
  {
    case 1:
      v9 = a4 | (32 * a3) | 0x6E30A800;
      break;
    case 2:
      v9 = a4 | (32 * a3) | 0x6E70A800;
      break;
    case 3:
      v9 = a4 | (32 * a3) | 0x6EB0A800;
      break;
    default:
      __break(0xC471u);
      return;
  }
  v11 = a1 + 50;
  v10 = a1[50];
  v12 = a1 + 14;
  if (v10 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v10 = *v11;
  }
  *(_DWORD *)(*v12 + v10) = v9;
  *v11 += 4;
}

void JSC::MacroAssemblerARM64::vectorUnsignedMin(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v10;
  unsigned int *v11;
  _QWORD *v12;

  v8 = a2 & 0x3F;
  switch(v8)
  {
    case 1:
      v9 = a4 | (32 * a3) | 0x6E31A800;
      break;
    case 2:
      v9 = a4 | (32 * a3) | 0x6E71A800;
      break;
    case 3:
      v9 = a4 | (32 * a3) | 0x6EB1A800;
      break;
    default:
      __break(0xC471u);
      return;
  }
  v11 = a1 + 50;
  v10 = a1[50];
  v12 = a1 + 14;
  if (v10 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v10 = *v11;
  }
  *(_DWORD *)(*v12 + v10) = v9;
  *v11 += 4;
}

void JSC::MacroAssemblerARM64::vectorAdd(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  _QWORD *v16;

  v8 = a2 & 0x3F;
  if ((v8 - 5) > 1)
  {
    v10 = 0x400000;
    switch(a2 & 0x3F)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x1980D0614);
      case 1:
        v10 = 0;
        break;
      case 2:
        break;
      case 3:
      case 5:
        v10 = 0x800000;
        break;
      case 4:
      case 6:
        v10 = 12582912;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1980D05F4);
    }
    v11 = (32 * a3) | ((_DWORD)a4 << 16);
    v12 = a5 | v10 | 0x4E208400;
  }
  else
  {
    if (v8 == 5)
    {
      v9 = 1310774272;
    }
    else
    {
      if (v8 != 6)
      {
        __break(0xC471u);
        JUMPOUT(0x1980D05D4);
      }
      v9 = 1314968576;
    }
    v11 = ((_DWORD)a4 << 16) | (32 * a3);
    v12 = a5 | v9;
  }
  v13 = v11 | v12;
  v15 = a1 + 50;
  v14 = a1[50];
  v16 = a1 + 14;
  if (v14 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v14 = *v15;
  }
  *(_DWORD *)(*v16 + v14) = v13;
  *v15 += 4;
}

void JSC::MacroAssemblerARM64::vectorSub(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  _QWORD *v16;

  v8 = a2 & 0x3F;
  if ((v8 - 5) > 1)
  {
    v12 = 0x400000;
    switch(a2 & 0x3F)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x1980D0780);
      case 1:
        v12 = 0;
        break;
      case 2:
        break;
      case 3:
      case 5:
        v12 = 0x800000;
        break;
      case 4:
      case 6:
        v12 = 12582912;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1980D0760);
    }
    v10 = (32 * a3) | ((_DWORD)a4 << 16);
    v11 = a5 | v12 | 0x6E208400;
  }
  else
  {
    v9 = 1319162880;
    if (v8 != 5)
    {
      if (v8 != 6)
      {
        __break(0xC471u);
        JUMPOUT(0x1980D0740);
      }
      v9 = 1323357184;
    }
    v10 = ((_DWORD)a4 << 16) | (32 * a3);
    v11 = a5 | v9;
  }
  v13 = v10 | v11;
  v15 = a1 + 50;
  v14 = a1[50];
  v16 = a1 + 14;
  if (v14 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v14 = *v15;
  }
  *(_DWORD *)(*v16 + v14) = v13;
  *v15 += 4;
}

void JSC::MacroAssemblerARM64::vectorAddSat(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  _QWORD *v16;

  if ((a2 & 0xC0) == 0x40)
  {
    v8 = 0x400000;
    switch(a2 & 0x3F)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x1980D08F0);
      case 1:
        v8 = 0;
        break;
      case 2:
        break;
      case 3:
      case 5:
        v8 = 0x800000;
        break;
      case 4:
      case 6:
        v8 = 12582912;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1980D08D0);
    }
    v10 = (32 * a3) | ((_DWORD)a4 << 16);
    v11 = a5 | v8;
    v12 = 1310723072;
  }
  else
  {
    v9 = 0x400000;
    switch(a2 & 0x3F)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x1980D0930);
      case 1:
        v9 = 0;
        break;
      case 2:
        break;
      case 3:
      case 5:
        v9 = 0x800000;
        break;
      case 4:
      case 6:
        v9 = 12582912;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1980D0910);
    }
    v10 = (32 * a3) | ((_DWORD)a4 << 16);
    v11 = a5 | v9;
    v12 = 1847593984;
  }
  v13 = v10 | v11 | v12;
  v15 = a1 + 50;
  v14 = a1[50];
  v16 = a1 + 14;
  if (v14 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v14 = *v15;
  }
  *(_DWORD *)(*v16 + v14) = v13;
  *v15 += 4;
}

void JSC::MacroAssemblerARM64::vectorSubSat(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  _QWORD *v16;

  if ((a2 & 0xC0) == 0x40)
  {
    v8 = 0x400000;
    switch(a2 & 0x3F)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x1980D0ABCLL);
      case 1:
        v8 = 0;
        break;
      case 2:
        break;
      case 3:
      case 5:
        v8 = 0x800000;
        break;
      case 4:
      case 6:
        v8 = 12582912;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1980D0A9CLL);
    }
    v10 = (32 * a3) | ((_DWORD)a4 << 16);
    v11 = a5 | v8;
    v12 = 1310731264;
  }
  else
  {
    v9 = 0x400000;
    switch(a2 & 0x3F)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x1980D0AFCLL);
      case 1:
        v9 = 0;
        break;
      case 2:
        break;
      case 3:
      case 5:
        v9 = 0x800000;
        break;
      case 4:
      case 6:
        v9 = 12582912;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1980D0ADCLL);
    }
    v10 = (32 * a3) | ((_DWORD)a4 << 16);
    v11 = a5 | v9;
    v12 = 1847602176;
  }
  v13 = v10 | v11 | v12;
  v15 = a1 + 50;
  v14 = a1[50];
  v16 = a1 + 14;
  if (v14 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v14 = *v15;
  }
  *(_DWORD *)(*v16 + v14) = v13;
  *v15 += 4;
}

void JSC::MacroAssemblerARM64::vectorMul(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int *v13;
  _QWORD *v14;

  v8 = a2 & 0x3F;
  if ((v8 - 5) > 1)
  {
    if ((a2 & 0x3E) == 2)
    {
      if (v8 == 2)
      {
        v11 = 0x400000;
        goto LABEL_11;
      }
      if (v8 == 3)
      {
        v11 = 0x800000;
LABEL_11:
        v10 = (32 * a3) | ((_DWORD)a4 << 16) | a5 | v11 | 0x4E209C00;
        goto LABEL_12;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x1980D0C3CLL);
  }
  v9 = 1847647232;
  if (v8 != 5)
  {
    if (v8 != 6)
    {
      __break(0xC471u);
      JUMPOUT(0x1980D0C5CLL);
    }
    v9 = 1851841536;
  }
  v10 = ((_DWORD)a4 << 16) | (32 * a3) | a5 | v9;
LABEL_12:
  v13 = a1 + 50;
  v12 = a1[50];
  v14 = a1 + 14;
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = *v13;
  }
  *(_DWORD *)(*v14 + v12) = v10;
  *v13 += 4;
}

void JSC::MacroAssemblerARM64::vectorMulByElementFloat32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = (32 * v11) | (v10 << 16) | v8 | ((v9 & 1) << 21) | (v9 << 10) & 0x800 | 0x4F809000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorMulByElementFloat64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = (32 * v11) | (v10 << 16) | (v9 << 11) | v8 | 0x4FC09000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorDiv(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v12;
  int v13;
  unsigned int v14;

  if ((a2 & 0x3Fu) > 6)
    goto LABEL_8;
  v8 = a5;
  v9 = a4;
  v10 = a3;
  v12 = 1847655424;
  v13 = 1 << (a2 & 0x3F);
  if ((v13 & 0x28) != 0)
    goto LABEL_5;
  if ((v13 & 0x50) == 0)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x1980D0E84);
  }
  v12 = 1851849728;
LABEL_5:
  v14 = a1[50];
  if (v14 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v14 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v14) = (v9 << 16) | (32 * v10) | v8 | v12;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorMin(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int *v18;
  _QWORD *v19;

  v8 = a2 & 0x3F;
  if ((v8 - 5) > 1)
  {
    if ((a2 & 0xC0) == 0x40)
    {
      v12 = 0x400000;
      switch(a2 & 0x3F)
      {
        case 0:
          __break(0xC471u);
          JUMPOUT(0x1980D1054);
        case 1:
          v12 = 0;
          break;
        case 2:
          break;
        case 3:
        case 5:
          v12 = 0x800000;
          break;
        case 4:
        case 6:
          v12 = 12582912;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x1980D1034);
      }
      v10 = (32 * a3) | ((_DWORD)a4 << 16);
      v14 = a5 | v12;
      v15 = 1310747648;
    }
    else
    {
      v13 = 0x400000;
      switch(a2 & 0x3F)
      {
        case 0:
          __break(0xC471u);
          JUMPOUT(0x1980D1094);
        case 1:
          v13 = 0;
          break;
        case 2:
          break;
        case 3:
        case 5:
          v13 = 0x800000;
          break;
        case 4:
        case 6:
          v13 = 12582912;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x1980D1074);
      }
      v10 = (32 * a3) | ((_DWORD)a4 << 16);
      v14 = a5 | v13;
      v15 = 1847618560;
    }
    v11 = v14 | v15;
  }
  else
  {
    v9 = 1319171072;
    if (v8 != 5)
    {
      if (v8 != 6)
      {
        __break(0xC471u);
        JUMPOUT(0x1980D1014);
      }
      v9 = 1323365376;
    }
    v10 = ((_DWORD)a4 << 16) | (32 * a3);
    v11 = a5 | v9;
  }
  v16 = v10 | v11;
  v18 = a1 + 50;
  v17 = a1[50];
  v19 = a1 + 14;
  if (v17 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v17 = *v18;
  }
  *(_DWORD *)(*v19 + v17) = v16;
  *v18 += 4;
}

void JSC::MacroAssemblerARM64::vectorMax(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int *v17;
  _QWORD *v18;

  v8 = a2 & 0x3F;
  if ((v8 - 5) > 1)
  {
    if ((a2 & 0xC0) == 0x40)
    {
      v10 = 0x400000;
      switch(a2 & 0x3F)
      {
        case 0:
          __break(0xC471u);
          JUMPOUT(0x1980D128CLL);
        case 1:
          v10 = 0;
          break;
        case 2:
          break;
        case 3:
        case 5:
          v10 = 0x800000;
          break;
        case 4:
        case 6:
          v10 = 12582912;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x1980D126CLL);
      }
      v13 = (32 * a3) | ((_DWORD)a4 << 16);
      v14 = a5 | v10;
      v15 = 1310745600;
    }
    else
    {
      v11 = 0x400000;
      switch(a2 & 0x3F)
      {
        case 0:
          __break(0xC471u);
          JUMPOUT(0x1980D12CCLL);
        case 1:
          v11 = 0;
          break;
        case 2:
          break;
        case 3:
        case 5:
          v11 = 0x800000;
          break;
        case 4:
        case 6:
          v11 = 12582912;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x1980D12ACLL);
      }
      v13 = (32 * a3) | ((_DWORD)a4 << 16);
      v14 = a5 | v11;
      v15 = 1847616512;
    }
    v12 = v13 | v14 | v15;
  }
  else
  {
    if (v8 == 5)
    {
      v9 = 1310782464;
    }
    else
    {
      if (v8 != 6)
      {
        __break(0xC471u);
        JUMPOUT(0x1980D124CLL);
      }
      v9 = 1314976768;
    }
    v12 = ((_DWORD)a4 << 16) | (32 * a3) | a5 | v9;
  }
  v17 = a1 + 50;
  v16 = a1[50];
  v18 = a1 + 14;
  if (v16 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v16 = *v17;
  }
  *(_DWORD *)(*v18 + v16) = v12;
  *v17 += 4;
}

void JSC::MacroAssemblerARM64::vectorPmin(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;

  if ((a2 & 0x3Fu) > 6)
    goto LABEL_13;
  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  v13 = 1 << (a2 & 0x3F);
  if ((v13 & 0x28) == 0)
  {
    if ((v13 & 0x50) != 0)
    {
      v14 = 0x400000;
      goto LABEL_6;
    }
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x1980D148CLL);
  }
  v14 = 0;
LABEL_6:
  v15 = (32 * a3) | ((_DWORD)a4 << 16) | v14 | a6 | 0x6EA0E400;
  v16 = a1[50];
  if (v16 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v16 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v16) = v15;
  v17 = a1[50];
  v18 = v17 + 4;
  a1[50] = v17 + 4;
  v19 = (v11 << 16) | (32 * v10) | v8 | 0x6E601C00;
  if ((v17 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v18 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v18) = v19;
  v20 = a1[50];
  v21 = v20 + 4;
  a1[50] = v20 + 4;
  if ((v20 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v21 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v21) = v9 | (v8 << 16) | (32 * v8) | 0x4EA01C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorPmax(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;

  if ((a2 & 0x3Fu) > 6)
    goto LABEL_13;
  v8 = a6;
  v9 = a5;
  v11 = 1 << (a2 & 0x3F);
  if ((v11 & 0x28) == 0)
  {
    if ((v11 & 0x50) != 0)
    {
      v12 = 0x400000;
      goto LABEL_6;
    }
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x1980D162CLL);
  }
  v12 = 0;
LABEL_6:
  v13 = (_DWORD)a3 << 16;
  v14 = 32 * a4;
  v15 = v12 | ((_DWORD)a3 << 16) | (32 * a4) | a6 | 0x6EA0E400;
  v16 = a1[50];
  if (v16 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v16 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v16) = v15;
  v17 = a1[50];
  v18 = v17 + 4;
  a1[50] = v17 + 4;
  v19 = v14 | v13 | v8 | 0x6E601C00;
  if ((v17 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v18 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v18) = v19;
  v20 = a1[50];
  v21 = v20 + 4;
  a1[50] = v20 + 4;
  if ((v20 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v21 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v21) = v9 | (v8 << 16) | (32 * v8) | 0x4EA01C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorNarrow(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v12;
  int v13;
  int v14;
  int v15;
  JSC::AssemblerBuffer *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v12 = a2 & 0x3F;
  if ((a2 & 0xC0) == 0x40)
  {
    v13 = 0x400000;
    switch(a2 & 0x3F)
    {
      case 0:
      case 1:
      case 5:
        __break(0xC471u);
        JUMPOUT(0x1980D18C4);
      case 2:
        v13 = 0;
        break;
      case 3:
        break;
      case 4:
      case 6:
        v13 = 0x800000;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1980D1904);
    }
    v15 = v13 | (32 * a3) | a6 | 0xE214800;
    v16 = (JSC::AssemblerBuffer *)(a1 + 14);
    v17 = a1[50];
    if (v17 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v17 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v17) = v15;
    v18 = a1[50];
    v19 = v18 + 4;
    a1[50] = v18 + 4;
    v20 = 0x400000;
    switch(v12)
    {
      case 2:
        v20 = 0;
        break;
      case 3:
        break;
      case 4:
      case 6:
        v20 = 0x800000;
        break;
      case 5:
        __break(0xC471u);
        JUMPOUT(0x1980D1964);
      default:
        __break(0xC471u);
        JUMPOUT(0x1980D1944);
    }
    v24 = v20 | (32 * v10);
    v25 = 1310803968;
  }
  else
  {
    v14 = 0x400000;
    switch(a2 & 0x3F)
    {
      case 0:
      case 1:
      case 5:
        __break(0xC471u);
        JUMPOUT(0x1980D18E4);
      case 2:
        v14 = 0;
        break;
      case 3:
        break;
      case 4:
      case 6:
        v14 = 0x800000;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1980D1924);
    }
    v21 = v14 | (32 * a3) | a6 | 0x2E212800;
    v16 = (JSC::AssemblerBuffer *)(a1 + 14);
    v22 = a1[50];
    if (v22 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v22 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v22) = v21;
    v18 = a1[50];
    v19 = v18 + 4;
    a1[50] = v18 + 4;
    v23 = 0x400000;
    switch(v12)
    {
      case 2:
        v23 = 0;
        break;
      case 3:
        break;
      case 4:
      case 6:
        v23 = 0x800000;
        break;
      case 5:
        __break(0xC471u);
        JUMPOUT(0x1980D19A4);
      default:
        __break(0xC471u);
        JUMPOUT(0x1980D1984);
    }
    v24 = v23 | (32 * v10);
    v25 = 1847666688;
  }
  v26 = v24 | v8 | v25;
  if ((v18 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v16, a2, a3, a4, a5, a6, a7, a8);
    v19 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v19) = v26;
  v27 = a1[50] + 4;
  a1[50] = v27;
  if (v27 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v27 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v27) = v9 | (v8 << 16) | (32 * v8) | 0x4EA01C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorBitwiseSelect(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (32 * v10) | (v9 << 16) | v8 | 0x6E601C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorNot(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0x6E205800;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorAnd(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (32 * v10) | (v9 << 16) | v8 | 0x4E201C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorAndnot(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (32 * v10) | (v9 << 16) | v8 | 0x4E601C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorOr(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (32 * v10) | (v9 << 16) | v8 | 0x4EA01C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorXor(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (32 * v10) | (v9 << 16) | v8 | 0x6E201C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorUshl(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v12;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v12 = 0x400000;
  switch(a2 & 0x3F)
  {
    case 0:
      __break(0xC471u);
      JUMPOUT(0x1980D1E04);
    case 1:
      v12 = 0;
      break;
    case 2:
      break;
    case 3:
    case 5:
      v12 = 0x800000;
      break;
    case 4:
    case 6:
      v12 = 12582912;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1980D1DE4);
  }
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = (32 * v10) | (v9 << 16) | v8 | v12 | 0x6E204400;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorSshl(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v12;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v12 = 0x400000;
  switch(a2 & 0x3F)
  {
    case 0:
      __break(0xC471u);
      JUMPOUT(0x1980D1F2CLL);
    case 1:
      v12 = 0;
      break;
    case 2:
      break;
    case 3:
    case 5:
      v12 = 0x800000;
      break;
    case 4:
    case 6:
      v12 = 12582912;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1980D1F0CLL);
  }
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = (32 * v10) | (v9 << 16) | v8 | v12 | 0x4E204400;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorSshr8(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v13;
  int v14;
  int v15;
  unsigned int v16;

  v8 = a2 & 0x3F;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  v13 = 32;
  v14 = 8;
  switch(a2 & 0x3F)
  {
    case 0:
      v8 = 16;
      v14 = 128;
      goto LABEL_7;
    case 1:
      goto LABEL_7;
    case 2:
      v8 = 2;
      v14 = 16;
      goto LABEL_7;
    case 3:
    case 5:
      goto LABEL_3;
    case 4:
    case 6:
      v13 = 64;
LABEL_3:
      v15 = v8 - 3;
      v8 = 4;
      v14 = v13;
      switch(v15)
      {
        case 0:
        case 2:
          break;
        case 1:
        case 3:
          v8 = 8;
          v14 = v13;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x1980D20A0);
      }
LABEL_7:
      v16 = a1[50];
      if (v16 + 4 > a1[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
        v16 = a1[50];
      }
      *(_DWORD *)(*((_QWORD *)a1 + 7) + v16) = v9 | (32 * v11) | 0x4F000400 | (((v14 - v10) & 7) << 16) | ((((v14 - v10) >> 3) & 7 | v8) << 19);
      a1[50] += 4;
      return;
    default:
      __break(0xC471u);
      JUMPOUT(0x1980D2080);
  }
}

void JSC::MacroAssemblerARM64::vectorHorizontalAdd(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v11;
  unsigned int v12;

  if ((a2 & 0x3F) - 1 >= 4)
  {
    __break(0xC471u);
    JUMPOUT(0x1980D21B4);
  }
  v8 = a4;
  v9 = a3;
  v11 = 0x400000;
  switch(a2 & 0x3F)
  {
    case 1:
      v11 = 0;
      break;
    case 2:
      break;
    case 3:
      v11 = 0x800000;
      break;
    case 4:
      __break(0xC471u);
      JUMPOUT(0x1980D21D4);
    default:
      __break(0xC471u);
      JUMPOUT(0x1980D2144);
  }
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v8 | (32 * v9) | v11 | 0x4E31B800;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorZipUpper(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v12;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v12 = 0x400000;
  switch(a2 & 0x3F)
  {
    case 0:
      __break(0xC471u);
      JUMPOUT(0x1980D2300);
    case 1:
      v12 = 0;
      break;
    case 2:
      break;
    case 3:
    case 5:
      v12 = 0x800000;
      break;
    case 4:
    case 6:
      v12 = 12582912;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1980D22E0);
  }
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = (32 * v10) | (v9 << 16) | v8 | v12 | 0x4E003800;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorUnzipEven(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v12;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v12 = 0x400000;
  switch(a2 & 0x3F)
  {
    case 0:
      __break(0xC471u);
      JUMPOUT(0x1980D2428);
    case 1:
      v12 = 0;
      break;
    case 2:
      break;
    case 3:
    case 5:
      v12 = 0x800000;
      break;
    case 4:
    case 6:
      v12 = 12582912;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1980D2408);
  }
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = (32 * v10) | (v9 << 16) | v8 | v12 | 0x4E001800;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorExtractPair(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned __int8 v11;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = (v11 << 11) | (32 * v10) | (v9 << 16) | v8 | 0x6E000000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorAbs(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  _QWORD *v15;

  v8 = a2 & 0x3F;
  if ((v8 - 5) > 1)
  {
    v10 = 0x400000;
    switch(a2 & 0x3F)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x1980D2620);
      case 1:
        v10 = 0;
        break;
      case 2:
        break;
      case 3:
      case 5:
        v10 = 0x800000;
        break;
      case 4:
      case 6:
        v10 = 12582912;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1980D2600);
    }
    v11 = a4 | (32 * a3);
    v9 = v10 | 0x4E20B800;
  }
  else
  {
    if (v8 == 5)
    {
      v9 = 1319172096;
    }
    else
    {
      if (v8 != 6)
      {
        __break(0xC471u);
        JUMPOUT(0x1980D25E0);
      }
      v9 = 1323366400;
    }
    v11 = a4 | (32 * a3);
  }
  v12 = v11 | v9;
  v14 = a1 + 50;
  v13 = a1[50];
  v15 = a1 + 14;
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = *v14;
  }
  *(_DWORD *)(*v15 + v13) = v12;
  *v14 += 4;
}

void JSC::MacroAssemblerARM64::vectorNeg(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  _QWORD *v15;

  v8 = a2 & 0x3F;
  if ((v8 - 5) > 1)
  {
    v10 = 0x400000;
    switch(a2 & 0x3F)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x1980D278CLL);
      case 1:
        v10 = 0;
        break;
      case 2:
        break;
      case 3:
      case 5:
        v10 = 0x800000;
        break;
      case 4:
      case 6:
        v10 = 12582912;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1980D276CLL);
    }
    v11 = a4 | (32 * a3);
    v9 = v10 | 0x6E20B800;
  }
  else
  {
    if (v8 == 5)
    {
      v9 = 1856043008;
    }
    else
    {
      if (v8 != 6)
      {
        __break(0xC471u);
        JUMPOUT(0x1980D274CLL);
      }
      v9 = 1860237312;
    }
    v11 = a4 | (32 * a3);
  }
  v12 = v11 | v9;
  v14 = a1 + 50;
  v13 = a1[50];
  v15 = a1 + 14;
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = *v14;
  }
  *(_DWORD *)(*v15 + v13) = v12;
  *v14 += 4;
}

void JSC::MacroAssemblerARM64::vectorPopcnt(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v11;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v11 = 0x400000;
  switch(a2 & 0x3F)
  {
    case 0:
      __break(0xC471u);
      JUMPOUT(0x1980D28A0);
    case 1:
      v11 = 0;
      break;
    case 2:
      break;
    case 3:
    case 5:
      v11 = 0x800000;
      break;
    case 4:
    case 6:
      v11 = 12582912;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1980D2880);
  }
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v8 | (32 * v9) | v11 | 0x4E205800;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorCeil(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v11;
  int v12;
  unsigned int v13;

  if ((a2 & 0x3Fu) > 6)
    goto LABEL_8;
  v8 = a4;
  v9 = a3;
  v11 = 1319208960;
  v12 = 1 << (a2 & 0x3F);
  if ((v12 & 0x28) != 0)
    goto LABEL_5;
  if ((v12 & 0x50) == 0)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x1980D2980);
  }
  v11 = 1323403264;
LABEL_5:
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = v8 | (32 * v9) | v11;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorFloor(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v11;
  int v12;
  unsigned int v13;

  if ((a2 & 0x3Fu) > 6)
    goto LABEL_8;
  v8 = a4;
  v9 = a3;
  v11 = 1310824448;
  v12 = 1 << (a2 & 0x3F);
  if ((v12 & 0x28) != 0)
    goto LABEL_5;
  if ((v12 & 0x50) == 0)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x1980D2A64);
  }
  v11 = 1315018752;
LABEL_5:
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = v8 | (32 * v9) | v11;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorTrunc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v11;
  int v12;
  unsigned int v13;

  if ((a2 & 0x3Fu) > 6)
    goto LABEL_8;
  v8 = a4;
  v9 = a3;
  v11 = 1319213056;
  v12 = 1 << (a2 & 0x3F);
  if ((v12 & 0x28) != 0)
    goto LABEL_5;
  if ((v12 & 0x50) == 0)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x1980D2B48);
  }
  v11 = 1323407360;
LABEL_5:
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = v8 | (32 * v9) | v11;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorTruncSat(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  JSC::AssemblerBuffer *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;

  v8 = a4;
  v10 = a2 & 0x3F;
  if ((a2 & 0xC0) == 0x40)
  {
    if (v10 > 6)
    {
      __break(0xC471u);
      JUMPOUT(0x1980D2D64);
    }
    v11 = 1319221248;
    if (((1 << v10) & 0x28) != 0)
    {
LABEL_6:
      v12 = v11 | (32 * a3) | a4;
      v14 = a1 + 50;
      v13 = a1[50];
      v15 = (JSC::AssemblerBuffer *)(a1 + 14);
      if (v13 + 4 > a1[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
        v13 = *v14;
      }
      *(_DWORD *)(*(_QWORD *)v15 + v13) = v12;
      v16 = *v14;
      v17 = *v14 + 4;
      *v14 = v17;
      if (v10 == 6)
      {
        v18 = v8 | (32 * v8);
        v19 = 245450752;
LABEL_18:
        v23 = v18 | v19;
        if (v16 + 8 > a1[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow(v15, a2, a3, a4, a5, a6, a7, a8);
          v17 = *v14;
        }
        *(_DWORD *)(*(_QWORD *)v15 + v17) = v23;
        *v14 += 4;
        return;
      }
      return;
    }
    if (((1 << v10) & 0x50) != 0)
    {
      v11 = 1323415552;
      goto LABEL_6;
    }
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x1980D2D24);
  }
  if (v10 > 6)
    goto LABEL_25;
  v20 = 1856092160;
  if (((1 << v10) & 0x28) == 0)
  {
    if (((1 << v10) & 0x50) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1980D2D44);
    }
    v20 = 1860286464;
  }
  v21 = v20 | (32 * a3) | a4;
  v14 = a1 + 50;
  v22 = a1[50];
  v15 = (JSC::AssemblerBuffer *)(a1 + 14);
  if (v22 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v22 = *v14;
  }
  *(_DWORD *)(*(_QWORD *)v15 + v22) = v21;
  v16 = *v14;
  v17 = *v14 + 4;
  *v14 = v17;
  if (v10 == 6)
  {
    v18 = v8 | (32 * v8);
    v19 = 782321664;
    goto LABEL_18;
  }
}

void JSC::MacroAssemblerARM64::vectorConvert(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  _QWORD *v15;

  v8 = a2 & 0x3F;
  if ((a2 & 0xC0) == 0x40)
  {
    if (v8 > 6)
    {
      __break(0xC471u);
      JUMPOUT(0x1980D2EC0);
    }
    v9 = 1310840832;
    v10 = 1 << v8;
    if ((v10 & 0x28) == 0)
    {
      if ((v10 & 0x50) == 0)
        goto LABEL_15;
      goto LABEL_9;
    }
  }
  else
  {
    if (v8 > 6)
    {
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x1980D2DF8);
    }
    v9 = 1847711744;
    v11 = 1 << v8;
    if ((v11 & 0x28) == 0)
    {
      if ((v11 & 0x50) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1980D2EA0);
      }
LABEL_9:
      v9 += 0x400000;
    }
  }
  v12 = a4 | (32 * a3) | v9;
  v14 = a1 + 50;
  v13 = a1[50];
  v15 = a1 + 14;
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = *v14;
  }
  *(_DWORD *)(*v15 + v13) = v12;
  *v14 += 4;
}

void JSC::MacroAssemblerARM64::vectorConvertLow(_DWORD *a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;

  v8 = a4;
  v10 = a2 & 0xC0;
  JSC::MacroAssemblerARM64::vectorExtendLow(a1, v10 | 4, a3, a4, a5, a6, a7, a8);
  v18 = a1[50];
  if (v10 == 64)
    v19 = 1315035136;
  else
    v19 = 1851906048;
  v20 = v8 | (32 * v8) | v19;
  if (v18 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v11, v12, v13, v14, v15, v16, v17);
    v18 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v18) = v20;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorNearest(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v11;
  int v12;
  unsigned int v13;

  if ((a2 & 0x3Fu) > 6)
    goto LABEL_8;
  v8 = a4;
  v9 = a3;
  v11 = 1310820352;
  v12 = 1 << (a2 & 0x3F);
  if ((v12 & 0x28) != 0)
    goto LABEL_5;
  if ((v12 & 0x50) == 0)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x1980D3034);
  }
  v11 = 1315014656;
LABEL_5:
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = v8 | (32 * v9) | v11;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorSqrt(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v11;
  int v12;
  unsigned int v13;

  if ((a2 & 0x3Fu) > 6)
    goto LABEL_8;
  v8 = a4;
  v9 = a3;
  v11 = 1856108544;
  v12 = 1 << (a2 & 0x3F);
  if ((v12 & 0x28) != 0)
    goto LABEL_5;
  if ((v12 & 0x50) == 0)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x1980D3118);
  }
  v11 = 1860302848;
LABEL_5:
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = v8 | (32 * v9) | v11;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorExtendLow(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int *v13;
  _QWORD *v14;

  if ((a2 & 0xC0) == 0x40)
  {
    v8 = 0x100000;
    switch(a2 & 0x3F)
    {
      case 0:
      case 1:
        __break(0xC471u);
        JUMPOUT(0x1980D324CLL);
      case 2:
        v8 = 0x80000;
        break;
      case 3:
      case 5:
        break;
      case 4:
      case 6:
        v8 = 0x200000;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1980D328CLL);
    }
    v9 = a4 | (32 * a3);
    v10 = 251700224;
  }
  else
  {
    v8 = 0x100000;
    switch(a2 & 0x3F)
    {
      case 0:
      case 1:
        __break(0xC471u);
        JUMPOUT(0x1980D326CLL);
      case 2:
        v8 = 0x80000;
        break;
      case 3:
      case 5:
        break;
      case 4:
      case 6:
        v8 = 0x200000;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1980D32ACLL);
    }
    v9 = a4 | (32 * a3);
    v10 = 788571136;
  }
  v11 = v9 | v8 | v10;
  v13 = a1 + 50;
  v12 = a1[50];
  v14 = a1 + 14;
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = *v13;
  }
  *(_DWORD *)(*v14 + v12) = v11;
  *v13 += 4;
}

void JSC::MacroAssemblerARM64::vectorExtendHigh(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int *v13;
  _QWORD *v14;

  if ((a2 & 0xC0) == 0x40)
  {
    v8 = 0x100000;
    switch(a2 & 0x3F)
    {
      case 0:
      case 1:
        __break(0xC471u);
        JUMPOUT(0x1980D33F8);
      case 2:
        v8 = 0x80000;
        break;
      case 3:
      case 5:
        break;
      case 4:
      case 6:
        v8 = 0x200000;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1980D3438);
    }
    v9 = a4 | (32 * a3);
    v10 = 1325442048;
  }
  else
  {
    v8 = 0x100000;
    switch(a2 & 0x3F)
    {
      case 0:
      case 1:
        __break(0xC471u);
        JUMPOUT(0x1980D3418);
      case 2:
        v8 = 0x80000;
        break;
      case 3:
      case 5:
        break;
      case 4:
      case 6:
        v8 = 0x200000;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1980D3458);
    }
    v9 = a4 | (32 * a3);
    v10 = 1862312960;
  }
  v11 = v9 | v8 | v10;
  v13 = a1 + 50;
  v12 = a1[50];
  v14 = a1 + 14;
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = *v13;
  }
  *(_DWORD *)(*v14 + v12) = v11;
  *v13 += 4;
}

void JSC::MacroAssemblerARM64::vectorPromote(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0xE617800;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorDemote(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0xE616800;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorLoad8Splat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if (HIDWORD(a2))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980D36A4);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v11 = -1959697423;
    else
      v11 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v13 = (unsigned int *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 200);
    if (v12 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v12 = *v13;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v11;
    *v13 += 4;
    v9 = 17;
  }
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v8 | (32 * v9) | 0x4D40C000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::vectorLoad16Splat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if (HIDWORD(a2))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980D37E0);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v11 = -1959697423;
    else
      v11 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v13 = (unsigned int *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 200);
    if (v12 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v12 = *v13;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v11;
    *v13 += 4;
    v9 = 17;
  }
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v8 | (32 * v9) | 0x4D40C400;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::vectorLoad32Splat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if (HIDWORD(a2))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980D391CLL);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v11 = -1959697423;
    else
      v11 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v13 = (unsigned int *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 200);
    if (v12 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v12 = *v13;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v11;
    *v13 += 4;
    v9 = 17;
  }
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v8 | (32 * v9) | 0x4D40C800;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::vectorLoad64Splat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v8 = a3;
  v9 = a2;
  if (HIDWORD(a2))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980D3A58);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v11 = -1959697423;
    else
      v11 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v13 = (unsigned int *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 200);
    if (v12 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v12 = *v13;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v11;
    *v13 += 4;
    v9 = 17;
  }
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v8 | (32 * v9) | 0x4D40CC00;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::vectorLoad8Lane(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  char v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a2))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980D3BD0);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v10 == 31)
      v12 = -1959697423;
    else
      v12 = ((v10 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v10 = 17;
  }
  if (v9 >= 16)
  {
    __break(0xC471u);
    JUMPOUT(0x1980D3BA0);
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = ((v9 & 7) << 10) | v8 | (v9 << 27) & 0x40000000 | (32 * v10) | 0xD400000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::vectorLoad16Lane(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  char v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a2))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980D3D4CLL);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v10 == 31)
      v12 = -1959697423;
    else
      v12 = ((v10 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v10 = 17;
  }
  if (v9 >= 8)
  {
    __break(0xC471u);
    JUMPOUT(0x1980D3D1CLL);
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = ((v9 & 3) << 11) | v8 | (v9 << 28) & 0x40000000 | (32 * v10) | 0xD404000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::vectorLoad32Lane(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  char v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a2))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980D3EC8);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v10 == 31)
      v12 = -1959697423;
    else
      v12 = ((v10 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v10 = 17;
  }
  if (v9 >= 4)
  {
    __break(0xC471u);
    JUMPOUT(0x1980D3E98);
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = ((v9 & 1) << 12) | v8 | (v9 << 29) & 0x40000000 | (32 * v10) | 0xD408000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::vectorLoad64Lane(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  char v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a2))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980D4038);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v10 == 31)
      v12 = -1959697423;
    else
      v12 = ((v10 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v10 = 17;
  }
  if (v9 >= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1980D4008);
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = ((v9 & 1) << 30) | v8 | (32 * v10) | 0xD408400;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::vectorStore8Lane(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980D41B0);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  if (v8 >= 16)
  {
    __break(0xC471u);
    JUMPOUT(0x1980D4180);
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = ((v8 & 7) << 10) | v10 | (v8 << 27) & 0x40000000 | (32 * v9) | 0xD000000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::vectorStore16Lane(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980D432CLL);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  if (v8 >= 8)
  {
    __break(0xC471u);
    JUMPOUT(0x1980D42FCLL);
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = ((v8 & 3) << 11) | v10 | (v8 << 28) & 0x40000000 | (32 * v9) | 0xD004000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::vectorStore32Lane(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980D44A8);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  if (v8 >= 4)
  {
    __break(0xC471u);
    JUMPOUT(0x1980D4478);
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = ((v8 & 1) << 12) | v10 | (v8 << 29) & 0x40000000 | (32 * v9) | 0xD008000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::vectorStore64Lane(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  if (HIDWORD(a3))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1980D4618);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    if (v9 == 31)
      v12 = -1959697423;
    else
      v12 = ((v9 & 0x1F) << 16) | 0x8B000231;
    v14 = (unsigned int *)(a1 + 200);
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *v14;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
    *v14 += 4;
    v9 = 17;
  }
  if (v8 >= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1980D45E8);
  }
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = ((v8 & 1) << 30) | v10 | (32 * v9) | 0xD008400;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::MacroAssemblerARM64::vectorExtaddPairwise(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int *v13;
  _QWORD *v14;

  if ((a2 & 0xC0) == 0x40)
  {
    v8 = 0x400000;
    switch(a2 & 0x3F)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x1980D476CLL);
      case 1:
        v8 = 0;
        break;
      case 2:
        break;
      case 3:
      case 5:
        v8 = 0x800000;
        break;
      case 4:
      case 6:
        v8 = 12582912;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1980D474CLL);
    }
    v9 = a4 | (32 * a3);
    v10 = 1310730240;
  }
  else
  {
    v8 = 0x400000;
    switch(a2 & 0x3F)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x1980D47ACLL);
      case 1:
        v8 = 0;
        break;
      case 2:
        break;
      case 3:
      case 5:
        v8 = 0x800000;
        break;
      case 4:
      case 6:
        v8 = 12582912;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1980D478CLL);
    }
    v9 = a4 | (32 * a3);
    v10 = 1847601152;
  }
  v11 = v9 | v8 | v10;
  v13 = a1 + 50;
  v12 = a1[50];
  v14 = a1 + 14;
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = *v13;
  }
  *(_DWORD *)(*v14 + v12) = v11;
  *v13 += 4;
}

void JSC::MacroAssemblerARM64::vectorAddPairwise(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v12;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v12 = 0x400000;
  switch(a2 & 0x3F)
  {
    case 0:
      __break(0xC471u);
      JUMPOUT(0x1980D48F0);
    case 1:
      v12 = 0;
      break;
    case 2:
      break;
    case 3:
    case 5:
      v12 = 0x800000;
      break;
    case 4:
    case 6:
      v12 = 12582912;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1980D48D0);
  }
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = (32 * v10) | (v9 << 16) | v8 | v12 | 0x4E20BC00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorAvgRound(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v12;
  unsigned int v13;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v12 = 0x400000;
  switch(a2 & 0x3F)
  {
    case 0:
      __break(0xC471u);
      JUMPOUT(0x1980D4A18);
    case 1:
      v12 = 0;
      break;
    case 2:
      break;
    case 3:
    case 5:
      v12 = 0x800000;
      break;
    case 4:
    case 6:
      v12 = 12582912;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1980D49F8);
  }
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = (32 * v10) | (v9 << 16) | v8 | v12 | 0x6E201400;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorMulSat(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (32 * v10) | (v9 << 16) | v8 | 0x6E60B400;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorDotProduct(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v11;
  int v12;
  JSC::AssemblerBuffer *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;

  v8 = a5;
  v9 = a4;
  v11 = ((_DWORD)a3 << 16) | (32 * a2);
  v12 = v11 | a5 | 0xE60C000;
  v13 = (JSC::AssemblerBuffer *)(a1 + 14);
  v14 = a1[50];
  if (v14 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v14 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v14) = v12;
  v15 = a1[50];
  v16 = v15 + 4;
  a1[50] = v15 + 4;
  v17 = v11 | v9 | 0x4E60C000;
  if ((v15 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, a2, a3, a4, a5, a6, a7, a8);
    v16 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v16) = v17;
  v18 = a1[50];
  v19 = v18 + 4;
  a1[50] = v18 + 4;
  if ((v18 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, a2, a3, a4, a5, a6, a7, a8);
    v19 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v19) = (v9 << 16) | (32 * v8) | v9 | 0x4EA0BC00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorSwizzle(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (32 * v10) | (v9 << 16) | v8 | 0x4E000000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorSwizzle2(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v12;

  if ((_DWORD)a2 + 1 != (_DWORD)a3 || !(_DWORD)a3)
  {
    __break(0xC471u);
    JUMPOUT(0x1980D4CE8);
  }
  v8 = a5;
  v9 = a4;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (32 * v10) | (v9 << 16) | v8 | 0x4E002000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorFusedMulAdd(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char v13;
  JSC::AssemblerBuffer *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = a4;
  v12 = a3;
  v13 = a2;
  v15 = (JSC::AssemblerBuffer *)(a1 + 14);
  v16 = a1[50];
  if (v16 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v16 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v16) = (32 * v10) | (v10 << 16) | v8 | 0x4EA01C00;
  v17 = a1[50];
  v18 = v17 + 4;
  a1[50] = v17 + 4;
  if ((v13 & 0x3Fu) > 6)
    goto LABEL_12;
  v19 = 1 << (v13 & 0x3F);
  v20 = 1310772224;
  if ((v19 & 0x28) != 0)
    goto LABEL_7;
  if ((v19 & 0x50) == 0)
  {
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x1980D4E90);
  }
  v20 = 1314966528;
LABEL_7:
  v21 = (v11 << 16) | (32 * v12) | v20 | v8;
  if ((v17 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, a2, a3, a4, a5, a6, a7, a8);
    v18 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v18) = v21;
  v22 = a1[50];
  v23 = v22 + 4;
  a1[50] = v22 + 4;
  if ((v22 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, a2, a3, a4, a5, a6, a7, a8);
    v23 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v23) = v9 | (v8 << 16) | (32 * v8) | 0x4EA01C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorFusedNegMulAdd(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char v13;
  JSC::AssemblerBuffer *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = a4;
  v12 = a3;
  v13 = a2;
  v15 = (JSC::AssemblerBuffer *)(a1 + 14);
  v16 = a1[50];
  if (v16 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v16 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v16) = (32 * v10) | (v10 << 16) | v8 | 0x4EA01C00;
  v17 = a1[50];
  v18 = v17 + 4;
  a1[50] = v17 + 4;
  if ((v13 & 0x3Fu) > 6)
    goto LABEL_13;
  v19 = 1 << (v13 & 0x3F);
  if ((v19 & 0x28) == 0)
  {
    if ((v19 & 0x50) != 0)
    {
      v20 = 1323355136;
      goto LABEL_8;
    }
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x1980D5034);
  }
  v20 = 1319160832;
LABEL_8:
  v21 = (v11 << 16) | (32 * v12) | v20 | v8;
  if ((v17 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, a2, a3, a4, a5, a6, a7, a8);
    v18 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v18) = v21;
  v22 = a1[50];
  v23 = v22 + 4;
  a1[50] = v22 + 4;
  if ((v22 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, a2, a3, a4, a5, a6, a7, a8);
    v23 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v23) = v9 | (v8 << 16) | (32 * v8) | 0x4EA01C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorDupElementInt8<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v8 | (v10 << 17) | (32 * v9) | 0x4E010400;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorDupElementInt16<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v8 | (v10 << 18) | (32 * v9) | 0x4E020400;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorDupElementInt32<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v8 | (v10 << 19) | (32 * v9) | 0x4E040400;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::vectorDupElementInt64<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v8 | (v10 << 20) | (32 * v9) | 0x4E080400;
  a1[50] += 4;
}

void JSC::B3::Air::handleCalleeSaves(JSC::B3::Air *this, JSC::B3::Air::Code *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD **v10;
  _QWORD **v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  char v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD **v29;
  uint64_t v30;

  v3 = *((unsigned int *)this + 27);
  if (!(_DWORD)v3)
    goto LABEL_44;
  v4 = 0;
  while (!*(_QWORD *)(*((_QWORD *)this + 12) + 8 * v4))
  {
    if (v3 == ++v4)
      goto LABEL_44;
  }
  if ((_DWORD)v3 == (_DWORD)v4)
  {
LABEL_44:
    v6 = 0;
    goto LABEL_45;
  }
  v5 = 0;
  v6 = 0;
  v7 = *((_DWORD *)this + 27);
  do
  {
    if (v7 <= v4)
    {
      __break(0xC471u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    v8 = *(_QWORD *)(*((_QWORD *)this + 12) + 8 * v4);
    v9 = *(unsigned int *)(v8 + 20);
    if (!(_DWORD)v9)
      goto LABEL_37;
    v10 = *(_QWORD ***)(v8 + 8);
    v11 = &v10[16 * v9];
    do
    {
      v12 = *((unsigned int *)v10 + 3);
      if (!(_DWORD)v12)
      {
        if (*((_WORD *)v10 + 60) != 448)
          goto LABEL_31;
LABEL_48:
        __break(0xC471u);
        JUMPOUT(0x1980D549CLL);
      }
      v13 = 0;
      v14 = *v10;
      v15 = 32 * v12;
      do
      {
        v19 = SLOBYTE(v14[v13 / 8 + 1]);
        if (v19 <= 0xD)
        {
          if (((1 << v19) & 0x31C2) != 0)
          {
            v16 = v14[v13 / 8 + 2];
            if (v16 <= 0)
              v17 = 31 - v16;
            else
              v17 = v16 + 127;
            if ((v17 & 0x40) != 0)
              goto LABEL_47;
            v18 = 1 << v17;
            goto LABEL_16;
          }
          if (v19 == 11)
          {
            v20 = v14[v13 / 8 + 2];
            if (v20 <= 0)
              v21 = 31 - v20;
            else
              v21 = v20 + 127;
            if ((v21 & 0x40) != 0)
              goto LABEL_47;
            v22 = HIDWORD(v14[v13 / 8 + 2]);
            v23 = v22 <= 0 ? 31 - v22 : v22 + 127;
            if ((v23 & 0x40) != 0)
              goto LABEL_47;
            v18 = (1 << v21) | (1 << v23);
LABEL_16:
            v6 |= v18;
          }
        }
        v13 += 32;
      }
      while (v15 != v13);
      if (*((_WORD *)v10 + 60) != 448)
        goto LABEL_31;
      v29 = v11;
      v30 = v4;
      v24 = v5;
      v25 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)*v14 + 80))(*v14, v10);
      if (!*((_DWORD *)v10 + 3))
        goto LABEL_48;
      v27 = v26;
      v6 |= v25 | (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**v10 + 72))(**v10, v10);
      v5 = v27 | v24 | v28;
      v11 = v29;
      v4 = v30;
LABEL_31:
      v10 += 16;
    }
    while (v10 != v11);
    v7 = *((_DWORD *)this + 27);
LABEL_37:
    v4 = (v4 + 1);
    if (v7 > v4)
    {
      while (!*(_QWORD *)(*((_QWORD *)this + 12) + 8 * v4))
      {
        if (v7 == ++v4)
        {
          v4 = v7;
          break;
        }
      }
    }
  }
  while ((_DWORD)v3 != (_DWORD)v4);
LABEL_45:
  JSC::B3::Air::handleCalleeSaves((uint64_t)this, v6);
}

void JSC::B3::Air::handleCalleeSaves(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint8x8_t v7;
  __int32 v8;
  uint8x8_t v9;
  uint64_t *v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  WTF *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unsigned __int8 v29;
  WTF *v30;
  WTF *v31[2];

  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v4 = 0;
    do
    {
      v4 |= v3 & -v3;
      v3 &= v3 - 1;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  v5 = a2 & v4;
  v6 = a2 & v4 & 0xFF001FF80000;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)(v5 & 0x1FF80000));
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.i32[0];
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v6));
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.i32[0] + v8)
  {
    JSC::RegisterAtOffsetList::RegisterAtOffsetList((unsigned int **)v31, v6, 0, 0);
    if (v31[0])
      v10 = (uint64_t *)((char *)v31[0] + 8);
    else
      v10 = 0;
    if (!v31[0])
      goto LABEL_39;
    for (i = (uint64_t *)((char *)v31[0] + 8 * *(unsigned int *)v31[0] + 8); ; i = 0)
    {
      if (v10 == i)
      {
        v12 = 0;
      }
      else
      {
        v12 = 0;
        do
        {
          v13 = *v10++;
          v14 = (v13 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
          if (v12 <= -(uint64_t)v14)
            v12 = -(uint64_t)v14;
        }
        while (v10 != i);
      }
      v22 = JSC::B3::Air::Code::addStackSlot(a1, v12, 0);
      v23 = v31[0];
      v31[0] = 0;
      v24 = *(_QWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 200) = v23;
      if (v24)
      {
        WTF::fastFree(v24, v15, v16, v17, v18, v19, v20, v21);
        v23 = *(WTF **)(a1 + 200);
      }
      *(WTF **)(a1 + 208) = v31[1];
      if (v23)
        v10 = (uint64_t *)((char *)v23 + 8);
      else
        v10 = 0;
      if (v23)
        v23 = (WTF *)((char *)v23 + 8 * *(unsigned int *)v23 + 8);
      if (v10 == (uint64_t *)v23)
        break;
      v25 = *(_QWORD *)(a1 + 216);
      v26 = *(_QWORD *)(a1 + 224);
      while (1)
      {
        v27 = *v10;
        v28 = (*v10 & 0x60) == 0x20 ? 4 : 3;
        v29 = (v27 & 0x80) != 0 ? v28 : 3;
        if ((v27 & 0x40) != 0)
          break;
        v25 |= 1 << v27;
        *(_QWORD *)(a1 + 216) = v25;
        if (v29 >= 4u && (v27 & 0x60) == 0x20)
        {
          v26 |= 1 << v27;
          *(_QWORD *)(a1 + 224) = v26;
        }
        if (++v10 == (uint64_t *)v23)
          goto LABEL_33;
      }
      __break(1u);
LABEL_39:
      ;
    }
LABEL_33:
    *(_QWORD *)(a1 + 232) = v22;
    v30 = v31[0];
    v31[0] = 0;
    if (v30)
      WTF::fastFree((unint64_t)v30, v15, v16, v17, v18, v19, v20, v21);
  }
}

void JSC::B3::Air::InsertionSet::insertInsts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  int v19;
  void *v20;
  WTF *v21;
  int v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  _BYTE v26[96];
  _QWORD v27[2];

  v8 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v8)
  {
    v11 = *(_QWORD *)a3;
    v12 = *(_QWORD *)a3 + (v8 << 7);
    do
    {
      v23 = a2;
      v24 = (WTF *)v26;
      v25 = 3;
      v13 = *(WTF **)v11;
      if (*(_QWORD *)v11 == v11 + 16)
      {
        v14 = *(unsigned int *)(v11 + 12);
        if ((_DWORD)v14)
        {
          v15 = 32 * v14;
          v16 = v26;
          do
          {
            v17 = *(_OWORD *)v13;
            v18 = *((_OWORD *)v13 + 1);
            v13 = (WTF *)((char *)v13 + 32);
            *v16 = v17;
            v16[1] = v18;
            v16 += 2;
            v15 -= 32;
          }
          while (v15);
        }
      }
      else
      {
        *(_QWORD *)v11 = v11 + 16;
        v24 = v13;
        v22 = *(_DWORD *)(v11 + 8);
        *(_DWORD *)(v11 + 8) = 3;
        LODWORD(v25) = v22;
        LODWORD(v14) = *(_DWORD *)(v11 + 12);
      }
      *(_DWORD *)(v11 + 12) = 0;
      HIDWORD(v25) = v14;
      v19 = *(_DWORD *)(v11 + 119);
      v27[0] = *(_QWORD *)(v11 + 112);
      *(_DWORD *)((char *)v27 + 7) = v19;
      JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(a1, (unint64_t)&v23, a3, a4, a5, a6, a7, a8);
      v21 = v24;
      if (v26 != (_BYTE *)v24)
      {
        if (v24)
        {
          v24 = 0;
          LODWORD(v25) = 0;
          WTF::fastFree((unint64_t)v21, v20, a3, a4, a5, a6, a7, a8);
        }
      }
      v11 += 128;
    }
    while (v11 != v12);
  }
}

const void **JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::operator=(const void **a1, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char *v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  char *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  __int128 *v49;
  __int128 v50;
  char *v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 *v67;
  __int128 v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;

  if (a2 == a1)
    return a1;
  v10 = *((_DWORD *)a1 + 3);
  v11 = *((_DWORD *)a2 + 3);
  if (v10 > v11)
  {
    *((_DWORD *)a1 + 3) = v11;
  }
  else
  {
    v12 = *((_DWORD *)a1 + 2);
    if (v11 > v12)
    {
      if (v12)
      {
        if (v10)
          *((_DWORD *)a1 + 3) = 0;
        v69 = (unint64_t)*a1;
        if (*a1)
        {
          *a1 = 0;
          *((_DWORD *)a1 + 2) = 0;
          WTF::fastFree(v69, a2, a3, a4, a5, a6, a7, a8);
          v12 = *((_DWORD *)a1 + 2);
        }
      }
      v13 = *((unsigned int *)a2 + 3);
      if (v12 < v13)
      {
        if (v13 >> 28)
          goto LABEL_81;
        v14 = (unint64_t)*a1;
        v15 = *((unsigned int *)a1 + 3);
        v16 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v13));
        *((_DWORD *)a1 + 2) = v13;
        *a1 = v16;
        if ((_DWORD)v15)
        {
          v17 = 16 * v15;
          v18 = (__int128 *)v14;
          do
          {
            v19 = *v18++;
            *v16++ = v19;
            v17 -= 16;
          }
          while (v17);
        }
        if (v14)
        {
          if (*a1 == (const void *)v14)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
        }
      }
    }
    v11 = *((_DWORD *)a1 + 3);
  }
  v20 = (char *)*a1;
  if (v11)
  {
    memmove(v20, *a2, 16 * v11);
    v21 = *((_DWORD *)a1 + 3);
    v20 = (char *)*a1;
  }
  else
  {
    v21 = 0;
  }
  v22 = *((unsigned int *)a2 + 3);
  if (v21 != (_DWORD)v22)
  {
    v23 = &v20[16 * v21];
    v24 = (__int128 *)((char *)*a2 + 16 * v21);
    v25 = 16 * v22 - 16 * v21;
    do
    {
      v26 = *v24++;
      *(_OWORD *)v23 = v26;
      v23 += 16;
      v25 -= 16;
    }
    while (v25);
    v21 = *((_DWORD *)a2 + 3);
  }
  *((_DWORD *)a1 + 3) = v21;
  v27 = *((_DWORD *)a1 + 7);
  v28 = *((_DWORD *)a2 + 7);
  if (v27 > v28)
  {
    *((_DWORD *)a1 + 7) = v28;
  }
  else
  {
    v29 = *((_DWORD *)a1 + 6);
    if (v28 > v29)
    {
      if (v29)
      {
        if (v27)
          *((_DWORD *)a1 + 7) = 0;
        v70 = (unint64_t)a1[2];
        if (v70)
        {
          a1[2] = 0;
          *((_DWORD *)a1 + 6) = 0;
          WTF::fastFree(v70, a2, a3, a4, a5, a6, a7, a8);
          v29 = *((_DWORD *)a1 + 6);
        }
      }
      v44 = *((unsigned int *)a2 + 7);
      if (v29 < v44)
      {
        if (v44 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x1980D5B24);
        }
        v45 = (unint64_t)a1[2];
        v46 = *((unsigned int *)a1 + 7);
        v47 = (char *)WTF::fastMalloc((WTF *)(16 * v44));
        *((_DWORD *)a1 + 6) = v44;
        a1[2] = v47;
        if ((_DWORD)v46)
        {
          v48 = 16 * v46;
          v49 = (__int128 *)v45;
          do
          {
            v50 = *v49++;
            *(_OWORD *)v47 = v50;
            v47 += 16;
            v48 -= 16;
          }
          while (v48);
        }
        if (v45)
        {
          if (a1[2] == (const void *)v45)
          {
            a1[2] = 0;
            *((_DWORD *)a1 + 6) = 0;
          }
          WTF::fastFree(v45, a2, a3, a4, a5, a6, a7, a8);
        }
      }
    }
    v28 = *((_DWORD *)a1 + 7);
  }
  v30 = (char *)a1[2];
  if (v28)
  {
    memmove(v30, a2[2], 16 * v28);
    v31 = *((_DWORD *)a1 + 7);
    v30 = (char *)a1[2];
  }
  else
  {
    v31 = 0;
  }
  v32 = *((unsigned int *)a2 + 7);
  if (v31 != (_DWORD)v32)
  {
    v33 = &v30[16 * v31];
    v34 = (__int128 *)((char *)a2[2] + 16 * v31);
    v35 = 16 * v32 - 16 * v31;
    do
    {
      v36 = *v34++;
      *(_OWORD *)v33 = v36;
      v33 += 16;
      v35 -= 16;
    }
    while (v35);
    v31 = *((_DWORD *)a2 + 7);
  }
  *((_DWORD *)a1 + 7) = v31;
  v37 = *((_DWORD *)a1 + 11);
  v38 = *((_DWORD *)a2 + 11);
  if (v37 > v38)
  {
    *((_DWORD *)a1 + 11) = v38;
    goto LABEL_35;
  }
  v39 = *((_DWORD *)a1 + 10);
  if (v38 > v39)
  {
    if (v39)
    {
      if (v37)
        *((_DWORD *)a1 + 11) = 0;
      v71 = (unint64_t)a1[4];
      if (v71)
      {
        a1[4] = 0;
        *((_DWORD *)a1 + 10) = 0;
        WTF::fastFree(v71, a2, a3, a4, a5, a6, a7, a8);
        v39 = *((_DWORD *)a1 + 10);
      }
    }
    v55 = *((unsigned int *)a2 + 11);
    if (v39 < v55)
    {
      if (!(v55 >> 28))
      {
        v56 = (unint64_t)a1[4];
        v57 = *((unsigned int *)a1 + 11);
        v58 = (char *)WTF::fastMalloc((WTF *)(16 * v55));
        *((_DWORD *)a1 + 10) = v55;
        a1[4] = v58;
        if ((_DWORD)v57)
        {
          v66 = 16 * v57;
          v67 = (__int128 *)v56;
          do
          {
            v68 = *v67++;
            *(_OWORD *)v58 = v68;
            v58 += 16;
            v66 -= 16;
          }
          while (v66);
        }
        if (v56)
        {
          if (a1[4] == (const void *)v56)
          {
            a1[4] = 0;
            *((_DWORD *)a1 + 10) = 0;
          }
          WTF::fastFree(v56, v59, v60, v61, v62, v63, v64, v65);
        }
        goto LABEL_34;
      }
LABEL_81:
      __break(0xC471u);
      JUMPOUT(0x1980D5B1CLL);
    }
  }
LABEL_34:
  v38 = *((_DWORD *)a1 + 11);
LABEL_35:
  v40 = (char *)a1[4];
  if (v38)
  {
    memmove(v40, a2[4], 16 * v38 - 6);
    v41 = *((_DWORD *)a1 + 11);
    v40 = (char *)a1[4];
  }
  else
  {
    v41 = 0;
  }
  v42 = *((unsigned int *)a2 + 11);
  if (v41 != (_DWORD)v42)
  {
    v51 = &v40[16 * v41];
    v52 = (__int128 *)((char *)a2[4] + 16 * v41);
    v53 = 16 * v42 - 16 * v41;
    do
    {
      v54 = *v52++;
      *(_OWORD *)v51 = v54;
      v51 += 16;
      v53 -= 16;
    }
    while (v53);
    v41 = *((_DWORD *)a2 + 11);
  }
  *((_DWORD *)a1 + 11) = v41;
  return a1;
}

uint64_t JSC::B3::Air::`anonymous namespace'::FixObviousSpills::executeInst(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  __int16 *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v19;
  unsigned __int8 v20;
  int v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  int v38;
  int v39;
  BOOL v41;
  char v42;
  int v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int *v52;
  unsigned int v53;
  unsigned int v54;
  BOOL v56;
  unsigned __int8 v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  BOOL v64;
  char v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  int v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int *v96;
  int v97;
  uint64_t v98;
  uint64_t **v99;
  int v100;
  unsigned int v101;
  uint64_t *v102;
  int v103;
  int v104;
  uint64_t v106;
  unsigned __int8 v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  int v111;
  char v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  char v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int *v124;
  int v125;
  int v126;
  uint64_t v128;
  unsigned __int8 v129;
  uint64_t v130;
  int *v131;
  uint64_t v132;
  int v133;
  char v134;
  char v135;
  uint64_t v136;
  int v137;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  int v147;
  uint64_t v149;
  unsigned int *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  char v157;
  _QWORD *v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  int *v163;
  int v164;
  unsigned int v165;
  unsigned int v166;
  BOOL v168;
  char v169;
  int v170;
  int v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int *v175;
  int v176;
  unsigned int v177;
  unsigned int v178;
  BOOL v180;
  char v181;
  int v182;
  int v183;
  uint64_t v184;
  int v185;
  __int128 v186;
  char *v187;
  uint64_t v188;
  char v189;
  _QWORD *v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  __int128 v196;
  unsigned int v197;
  uint64_t *v198;
  int v199;
  int v200;
  uint64_t v202;
  char v203;
  unsigned __int8 v204;
  char *v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  char *v209;
  unsigned int v210;
  uint64_t *v211;
  int v212;
  int v213;
  uint64_t v215;
  char v216;
  __int128 v217;
  uint64_t v218;
  unsigned int v219;
  unsigned int v220;
  uint64_t v222;
  int v223;
  char v225;
  __int128 v226;
  uint64_t v227;
  int v228;
  char v230;
  char *v231;
  __int128 v232;
  uint64_t v233;
  int v234;
  int v235;
  char v237;
  uint64_t v238;
  char *v239;
  __int128 *v240;
  __int128 v241;
  uint64_t v242;
  char *v243;
  char *v244;
  __int128 v245;
  uint64_t v246;
  char *v247;
  char *v248;
  char *v249;
  __int128 *v250;
  __int128 v251;
  uint64_t v252;
  char *v253;
  unsigned __int8 v254;
  int v255;
  unsigned __int8 v256;
  int v257;
  int v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  char *v262;
  char *v263;
  char *v264;
  uint64_t v265;
  char *v266;
  unint64_t v267;
  uint64_t v268;
  char *v269;
  uint64_t v270;
  char *v271;
  char *v272;
  char v273;
  int v274;
  char v275;
  int v276;
  char *v277;
  uint64_t v278;
  char *v279;
  uint64_t v280;
  char *v281;
  char *v282;
  char *v283;
  uint64_t v284;
  char *v285;
  unint64_t v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  char *v290;
  char *v291;
  char *v292;
  char *v293;
  char v294;
  int v295;
  char v296;
  int v297;
  __int128 v298;
  char *v299;
  uint64_t v300;
  __int128 v301;
  char *v302;
  char *v303;
  __int128 v304;
  __int128 v305;
  uint64_t v306;
  char *v307;
  __int128 v308;
  uint64_t v309;
  char *v310;
  __int128 *v311;
  __int128 v312;
  uint64_t v313;
  char *v314;
  char *v315;
  __int128 v316;
  uint64_t v317;
  char *v318;
  char *v319;
  char *v320;
  __int128 *v321;
  __int128 v322;
  uint64_t v323;
  char *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t **v330;
  uint64_t ***v331;
  __int128 v332;
  uint64_t ****v333;

  v1 = *(_QWORD *)(this + 88);
  v2 = *(unsigned int *)(this + 96);
  v3 = *(_DWORD *)(v1 + 20);
  if (v3 <= v2)
  {
    __break(0xC471u);
    JUMPOUT(0x1980D709CLL);
  }
  v4 = this;
  v5 = *(_QWORD *)(v1 + 8);
  v328 = this;
  v329 = &v328;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + (v2 << 7));
    v330 = &v329;
    v331 = &v330;
    v7 = (__int16 *)(v6 + 30);
    if ((*((__int16 *)v6 + 60) - 446) <= 5)
    {
      *(_QWORD *)&v332 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS1_3RegEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_116FixObviousSpills11executeInstEvEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvPSA_SL_RKT0_EUlSC_S6_S7_S8_E_EEvSL_SL_SO_EUlRSC_S6_S7_S8_E_EEvSO_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      *((_QWORD *)&v332 + 1) = &v332;
      v333 = &v331;
      this = JSC::B3::Air::Inst::forEachArgCustom((uint64_t)v6, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS1_3RegEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_116FixObviousSpills11executeInstEvEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvPSA_SL_RKT0_EUlSC_S6_S7_S8_E_EEvSL_SL_SO_EUlRSC_S6_S7_S8_E_EEvSO_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v332);
    }
    else
    {
      v8 = v6[3];
      if ((_DWORD)v8)
      {
        v9 = 0;
        v10 = (char *)&JSC::B3::Air::g_formTable + 21 * *((__int16 *)v6 + 60) + ((unint64_t)((v8 - 1) * v8) >> 1);
        while (1)
        {
          if (v9 >= v6[3])
          {
            __break(0xC471u);
            JUMPOUT(0x1980D7084);
          }
          v11 = v10[v9];
          if ((v11 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x1980D6F18);
          }
          v12 = *(_QWORD *)v6;
          switch(*(_BYTE *)(*(_QWORD *)v6 + 32 * v9 + 8))
          {
            case 1:
              v13 = v12 + 32 * v9;
              v16 = *(_DWORD *)(v13 + 16);
              v14 = (int *)(v13 + 16);
              v15 = v16;
              v17 = v16 - 1;
              v19 = v16 > 0xFFFFFFDF || v17 < 0x20;
              v20 = v15 + 127;
              if (v15 <= 0)
                v20 = 31 - v15;
              if (v19)
              {
                v21 = v20 & 0x7F;
                if (v21 != 127)
                {
                  if ((v11 & 0xC) == 4)
                  {
                    v23 = **v330;
                    v24 = *(char **)(v23 + 24);
                    v25 = *(unsigned int *)(v23 + 36);
                    v26 = &v24[16 * v25];
                    if ((_DWORD)v25)
                    {
                      LODWORD(v25) = 0;
                      v27 = v26;
                      v28 = v26;
                      do
                      {
                        if (((*v24 ^ v20) & 0x7F) == 0)
                        {
                          this = *(_QWORD *)(v23 + 24) + 16 * *(unsigned int *)(v23 + 36);
                          v152 = v24;
                          if (v28 != (char *)this)
                          {
                            if (v27 == v24)
                            {
                              v152 = v28;
                            }
                            else
                            {
                              if (v27 <= v28)
                              {
                                this = 0;
                                v246 = (v24 - v27) >> 4;
                                do
                                {
                                  *(_OWORD *)&v28[((v24 - v27) & 0xFFFFFFFFFFFFFFF0) - 16 + this] = *(_OWORD *)&v24[this - 16];
                                  this -= 16;
                                }
                                while (&v24[this] != v27);
                              }
                              else
                              {
                                v244 = v28;
                                this = (uint64_t)v27;
                                do
                                {
                                  v245 = *(_OWORD *)this;
                                  this += 16;
                                  *(_OWORD *)v244 = v245;
                                  v244 += 16;
                                }
                                while ((char *)this != v24);
                                v246 = (v24 - v27) >> 4;
                              }
                              v152 = &v28[16 * v246];
                            }
                          }
                          v27 = v24 + 16;
                          LODWORD(v25) = v25 + 1;
                          v28 = v152;
                        }
                        v24 += 16;
                      }
                      while (v24 < v26);
                      v24 = *(char **)(v23 + 24);
                      v29 = *(unsigned int *)(v23 + 36);
                      v26 = v28;
                    }
                    else
                    {
                      v29 = 0;
                      v27 = &v24[16 * v25];
                    }
                    v30 = &v24[16 * v29];
                    if (v27 != v30)
                    {
                      if (v27 <= v26)
                      {
                        v247 = &v26[((v30 - v27) & 0xFFFFFFFFFFFFFFF0) - 16];
                        do
                        {
                          *(_OWORD *)v247 = *((_OWORD *)v30 - 1);
                          v247 -= 16;
                          v30 -= 16;
                        }
                        while (v30 != v27);
                      }
                      else
                      {
                        do
                        {
                          v186 = *(_OWORD *)v27;
                          v27 += 16;
                          *(_OWORD *)v26 = v186;
                          v26 += 16;
                        }
                        while (v27 != v30);
                      }
                    }
                    *(_DWORD *)(v23 + 36) -= v25;
                    v31 = *(_QWORD *)(v23 + 56);
                    v32 = *(unsigned int *)(v23 + 68);
                    v33 = (char *)(v31 + 16 * v32);
                    if ((_DWORD)v32)
                    {
                      LODWORD(v32) = 0;
                      v35 = v33;
                      v44 = v33;
                      do
                      {
                        if (((*(_BYTE *)(v31 + 8) ^ v20) & 0x7F) == 0)
                        {
                          this = *(_QWORD *)(v23 + 56) + 16 * *(unsigned int *)(v23 + 68);
                          v155 = (char *)v31;
                          if (v44 != (char *)this)
                          {
                            if (v35 == (char *)v31)
                            {
                              v155 = v44;
                            }
                            else
                            {
                              if (v35 <= v44)
                              {
                                this = 0;
                                v233 = (uint64_t)(v31 - (_QWORD)v35) >> 4;
                                do
                                {
                                  *(_OWORD *)&v44[((v31 - (_QWORD)v35) & 0xFFFFFFFFFFFFFFF0) - 16 + this] = *(_OWORD *)(v31 + this - 16);
                                  this -= 16;
                                }
                                while ((char *)(v31 + this) != v35);
                              }
                              else
                              {
                                v231 = v44;
                                this = (uint64_t)v35;
                                do
                                {
                                  v232 = *(_OWORD *)this;
                                  this += 16;
                                  *(_OWORD *)v231 = v232;
                                  v231 += 16;
                                }
                                while (this != v31);
                                v233 = (uint64_t)(v31 - (_QWORD)v35) >> 4;
                              }
                              v155 = &v44[16 * v233];
                            }
                          }
                          v35 = (char *)(v31 + 16);
                          LODWORD(v32) = v32 + 1;
                          v44 = v155;
                        }
                        v31 += 16;
                      }
                      while (v31 < (unint64_t)v33);
                      v31 = *(_QWORD *)(v23 + 56);
                      v34 = *(unsigned int *)(v23 + 68);
                      v33 = v44;
                    }
                    else
                    {
                      v34 = 0;
                      v35 = (char *)(v31 + 16 * v32);
                    }
                    v36 = (char *)(v31 + 16 * v34);
                    if (v35 != v36)
                    {
                      if (v35 <= v33)
                      {
                        v243 = &v33[((v36 - v35) & 0xFFFFFFFFFFFFFFF0) - 16];
                        do
                        {
                          *(_OWORD *)v243 = *((_OWORD *)v36 - 1);
                          v243 -= 16;
                          v36 -= 16;
                        }
                        while (v36 != v35);
                      }
                      else
                      {
                        do
                        {
                          v196 = *(_OWORD *)v35;
                          v35 += 16;
                          *(_OWORD *)v33 = v196;
                          v33 += 16;
                        }
                        while (v35 != v36);
                      }
                    }
                    *(_DWORD *)(v23 + 68) -= v32;
                  }
                  if ((v20 & 0x60) != 0)
                    v22 = (char)(31 - v21);
                  else
                    v22 = v21 + 1;
                  goto LABEL_23;
                }
              }
              if (v19)
              {
                v254 = v15 + 127;
                if (v15 <= 0)
                  v254 = 31 - v15;
                if ((v11 & 0xC) == 4)
                {
                  v259 = **v330;
                  v260 = *(char **)(v259 + 24);
                  v261 = *(unsigned int *)(v259 + 36);
                  v262 = &v260[16 * v261];
                  if ((_DWORD)v261)
                  {
                    LODWORD(v261) = 0;
                    v263 = v262;
                    v264 = v262;
                    do
                    {
                      if (((*v260 ^ v254) & 0x7F) == 0)
                      {
                        this = *(_QWORD *)(v259 + 24) + 16 * *(unsigned int *)(v259 + 36);
                        v292 = v260;
                        if (v264 != (char *)this)
                        {
                          if (v263 == v260)
                          {
                            v292 = v264;
                          }
                          else
                          {
                            if (v263 <= v264)
                            {
                              this = 0;
                              v317 = (v260 - v263) >> 4;
                              do
                              {
                                *(_OWORD *)&v264[((v260 - v263) & 0xFFFFFFFFFFFFFFF0) - 16 + this] = *(_OWORD *)&v260[this - 16];
                                this -= 16;
                              }
                              while (&v260[this] != v263);
                            }
                            else
                            {
                              v315 = v264;
                              this = (uint64_t)v263;
                              do
                              {
                                v316 = *(_OWORD *)this;
                                this += 16;
                                *(_OWORD *)v315 = v316;
                                v315 += 16;
                              }
                              while ((char *)this != v260);
                              v317 = (v260 - v263) >> 4;
                            }
                            v292 = &v264[16 * v317];
                          }
                        }
                        v263 = v260 + 16;
                        LODWORD(v261) = v261 + 1;
                        v264 = v292;
                      }
                      v260 += 16;
                    }
                    while (v260 < v262);
                    v260 = *(char **)(v259 + 24);
                    v265 = *(unsigned int *)(v259 + 36);
                    v262 = v264;
                  }
                  else
                  {
                    v265 = 0;
                    v263 = &v260[16 * v261];
                  }
                  v266 = &v260[16 * v265];
                  if (v263 != v266)
                  {
                    if (v263 <= v262)
                    {
                      v318 = &v262[((v266 - v263) & 0xFFFFFFFFFFFFFFF0) - 16];
                      do
                      {
                        *(_OWORD *)v318 = *((_OWORD *)v266 - 1);
                        v318 -= 16;
                        v266 -= 16;
                      }
                      while (v266 != v263);
                    }
                    else
                    {
                      do
                      {
                        v298 = *(_OWORD *)v263;
                        v263 += 16;
                        *(_OWORD *)v262 = v298;
                        v262 += 16;
                      }
                      while (v263 != v266);
                    }
                  }
                  *(_DWORD *)(v259 + 36) -= v261;
                  v267 = *(_QWORD *)(v259 + 56);
                  v268 = *(unsigned int *)(v259 + 68);
                  v269 = (char *)(v267 + 16 * v268);
                  if ((_DWORD)v268)
                  {
                    LODWORD(v268) = 0;
                    v271 = v269;
                    v277 = v269;
                    do
                    {
                      if (((*(_BYTE *)(v267 + 8) ^ v254) & 0x7F) == 0)
                      {
                        this = *(_QWORD *)(v259 + 56) + 16 * *(unsigned int *)(v259 + 68);
                        v293 = (char *)v267;
                        if (v277 != (char *)this)
                        {
                          if (v271 == (char *)v267)
                          {
                            v293 = v277;
                          }
                          else
                          {
                            if (v271 <= v277)
                            {
                              this = 0;
                              v309 = (uint64_t)(v267 - (_QWORD)v271) >> 4;
                              do
                              {
                                *(_OWORD *)&v277[((v267 - (_QWORD)v271) & 0xFFFFFFFFFFFFFFF0) - 16 + this] = *(_OWORD *)(v267 + this - 16);
                                this -= 16;
                              }
                              while ((char *)(v267 + this) != v271);
                            }
                            else
                            {
                              v307 = v277;
                              this = (uint64_t)v271;
                              do
                              {
                                v308 = *(_OWORD *)this;
                                this += 16;
                                *(_OWORD *)v307 = v308;
                                v307 += 16;
                              }
                              while (this != v267);
                              v309 = (uint64_t)(v267 - (_QWORD)v271) >> 4;
                            }
                            v293 = &v277[16 * v309];
                          }
                        }
                        v271 = (char *)(v267 + 16);
                        LODWORD(v268) = v268 + 1;
                        v277 = v293;
                      }
                      v267 += 16;
                    }
                    while (v267 < (unint64_t)v269);
                    v267 = *(_QWORD *)(v259 + 56);
                    v270 = *(unsigned int *)(v259 + 68);
                    v269 = v277;
                  }
                  else
                  {
                    v270 = 0;
                    v271 = (char *)(v267 + 16 * v268);
                  }
                  v272 = (char *)(v267 + 16 * v270);
                  if (v271 != v272)
                  {
                    if (v271 <= v269)
                    {
                      v314 = &v269[((v272 - v271) & 0xFFFFFFFFFFFFFFF0) - 16];
                      do
                      {
                        *(_OWORD *)v314 = *((_OWORD *)v272 - 1);
                        v314 -= 16;
                        v272 -= 16;
                      }
                      while (v272 != v271);
                    }
                    else
                    {
                      do
                      {
                        v301 = *(_OWORD *)v271;
                        v271 += 16;
                        *(_OWORD *)v269 = v301;
                        v269 += 16;
                      }
                      while (v271 != v272);
                    }
                  }
                  *(_DWORD *)(v259 + 68) -= v268;
                }
                v255 = v254 & 0x7F;
                v22 = (char)(31 - (v254 & 0x7F));
                if ((v254 & 0x60) == 0)
                  v22 = v255 + 1;
                if (v255 == 127)
                  v22 = 0;
                goto LABEL_23;
              }
              goto LABEL_24;
            case 6:
            case 7:
            case 8:
              v37 = v12 + 32 * v9;
              v39 = *(_DWORD *)(v37 + 16);
              v14 = (int *)(v37 + 16);
              v38 = v39;
              goto LABEL_37;
            case 0xB:
              v162 = v12 + 32 * v9;
              v165 = *(_DWORD *)(v162 + 16);
              v163 = (int *)(v162 + 16);
              v164 = v165;
              v166 = v165 - 1;
              v168 = v165 > 0xFFFFFFDF || v166 < 0x20;
              v169 = v164 + 127;
              if (v164 <= 0)
                v169 = 31 - v164;
              if (v168)
              {
                v170 = v169 & 0x7F;
                if (v170 != 127)
                {
                  v171 = (char)(31 - v170);
                  if ((v169 & 0x60) == 0)
                    v171 = v170 + 1;
                  goto LABEL_263;
                }
              }
              if (v168)
              {
                if (v164 <= 0)
                  v294 = 31 - v164;
                else
                  v294 = v164 + 127;
                v295 = v294 & 0x7F;
                if (v295 == 127)
                {
                  v171 = 0;
                }
                else if ((v294 & 0x60) != 0)
                {
                  v171 = (char)(31 - v295);
                }
                else
                {
                  v171 = v295 + 1;
                }
LABEL_263:
                *v163 = v171;
              }
              v172 = v12 + 32 * v9;
              v173 = *(_DWORD *)(v172 + 20);
              v14 = (int *)(v172 + 20);
              v38 = v173;
LABEL_37:
              v41 = v38 > 0xFFFFFFDF || (v38 - 1) < 0x20;
              v42 = v38 + 127;
              if (v38 <= 0)
                v42 = 31 - v38;
              if (!v41 || (v43 = v42 & 0x7F, v43 == 127))
              {
                if (!v41)
                  goto LABEL_24;
                v275 = v38 + 127;
                if (v38 <= 0)
                  v275 = 31 - v38;
                v276 = v275 & 0x7F;
                if (v276 == 127)
                {
                  v22 = 0;
                }
                else if ((v275 & 0x60) != 0)
                {
                  v22 = (char)(31 - v276);
                }
                else
                {
                  v22 = v276 + 1;
                }
              }
              else
              {
                v22 = (char)(31 - v43);
                if ((v42 & 0x60) == 0)
                  v22 = v43 + 1;
              }
LABEL_23:
              *v14 = v22;
LABEL_24:
              if (++v9 == v8)
                goto LABEL_54;
              break;
            case 0xC:
            case 0xD:
              goto LABEL_24;
            default:
              goto LABEL_24;
          }
        }
      }
    }
LABEL_54:
    v330 = &v329;
    v331 = &v330;
    if ((*v7 - 446) <= 5)
    {
      *(_QWORD *)&v332 = _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS1_3RegEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_116FixObviousSpills11executeInstEvEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvPSA_SL_RKT0_EUlSC_S6_S7_S8_E_EEvSL_SL_SO_EUlRSC_S6_S7_S8_E0_EEvSO_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
      *((_QWORD *)&v332 + 1) = &v332;
      v333 = &v331;
      this = JSC::B3::Air::Inst::forEachArgCustom((uint64_t)v6, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS1_3RegEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_116FixObviousSpills11executeInstEvEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvPSA_SL_RKT0_EUlSC_S6_S7_S8_E_EEvSL_SL_SO_EUlRSC_S6_S7_S8_E0_EEvSO_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v332);
    }
    else
    {
      v45 = v6[3];
      if ((_DWORD)v45)
      {
        v46 = 0;
        v47 = (char *)&JSC::B3::Air::g_formTable + 21 * *v7 + ((unint64_t)((v45 - 1) * v45) >> 1);
        while (1)
        {
          if (v46 >= v6[3])
          {
            __break(0xC471u);
            JUMPOUT(0x1980D7094);
          }
          v48 = v47[v46];
          if ((v48 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x1980D6F58);
          }
          v49 = *(_QWORD *)v6;
          switch(*(_BYTE *)(*(_QWORD *)v6 + 32 * v46 + 8))
          {
            case 1:
              this = v48 & 0xF;
              v50 = v49 + 32 * v46;
              v53 = *(_DWORD *)(v50 + 16);
              v52 = (int *)(v50 + 16);
              v51 = v53;
              v54 = v53 - 1;
              v56 = v53 > 0xFFFFFFDF || v54 < 0x20;
              v57 = v51 + 127;
              if (v51 <= 0)
                v57 = 31 - v51;
              if (v56)
              {
                v58 = v57 & 0x7F;
                if (v58 != 127)
                {
                  this = (this - 8);
                  if (this <= 2)
                  {
                    v142 = **v330;
                    v66 = *(char **)(v142 + 24);
                    v143 = *(unsigned int *)(v142 + 36);
                    v68 = &v66[16 * v143];
                    if ((_DWORD)v143)
                    {
                      LODWORD(v143) = 0;
                      v144 = v68;
                      v145 = v68;
                      do
                      {
                        if (((*v66 ^ v57) & 0x7F) == 0)
                        {
                          v205 = v66;
                          if (v145 != (char *)(*(_QWORD *)(v142 + 24) + 16 * *(unsigned int *)(v142 + 36)))
                          {
                            if (v144 == v66)
                            {
                              v205 = v145;
                            }
                            else
                            {
                              if (v144 <= v145)
                              {
                                v306 = 0;
                                v252 = (v66 - v144) >> 4;
                                do
                                {
                                  *(_OWORD *)&v145[((v66 - v144) & 0xFFFFFFFFFFFFFFF0) - 16 + v306] = *(_OWORD *)&v66[v306 - 16];
                                  v306 -= 16;
                                }
                                while (&v66[v306] != v144);
                              }
                              else
                              {
                                v249 = v145;
                                v250 = (__int128 *)v144;
                                do
                                {
                                  v251 = *v250++;
                                  *(_OWORD *)v249 = v251;
                                  v249 += 16;
                                }
                                while (v250 != (__int128 *)v66);
                                v252 = (v66 - v144) >> 4;
                              }
                              v205 = &v145[16 * v252];
                            }
                          }
                          v144 = v66 + 16;
                          LODWORD(v143) = v143 + 1;
                          v145 = v205;
                        }
                        v66 += 16;
                      }
                      while (v66 < v68);
                      v66 = *(char **)(v142 + 24);
                      v67 = *(unsigned int *)(v142 + 36);
                      v68 = v145;
                    }
                    else
                    {
                      v67 = 0;
                      v144 = &v66[16 * v143];
                    }
                    v69 = &v66[16 * v67];
                    if (v144 != v69)
                    {
                      if (v144 <= v68)
                      {
                        v253 = &v68[((v69 - v144) & 0xFFFFFFFFFFFFFFF0) - 16];
                        do
                        {
                          *(_OWORD *)v253 = *((_OWORD *)v69 - 1);
                          v253 -= 16;
                          v69 -= 16;
                        }
                        while (v69 != v144);
                      }
                      else
                      {
                        do
                        {
                          v217 = *(_OWORD *)v144;
                          v144 += 16;
                          *(_OWORD *)v68 = v217;
                          v68 += 16;
                        }
                        while (v144 != v69);
                      }
                    }
                    *(_DWORD *)(v142 + 36) -= v143;
                    v70 = *(_QWORD *)(v142 + 56);
                    v71 = *(unsigned int *)(v142 + 68);
                    v72 = (char *)(v70 + 16 * v71);
                    if ((_DWORD)v71)
                    {
                      LODWORD(v71) = 0;
                      v74 = v72;
                      v187 = v72;
                      do
                      {
                        if (((*(_BYTE *)(v70 + 8) ^ v57) & 0x7F) == 0)
                        {
                          v209 = (char *)v70;
                          if (v187 != (char *)(*(_QWORD *)(v142 + 56) + 16 * *(unsigned int *)(v142 + 68)))
                          {
                            if (v74 == (char *)v70)
                            {
                              v209 = v187;
                            }
                            else
                            {
                              if (v74 <= v187)
                              {
                                v300 = 0;
                                v242 = (uint64_t)(v70 - (_QWORD)v74) >> 4;
                                do
                                {
                                  *(_OWORD *)&v187[((v70 - (_QWORD)v74) & 0xFFFFFFFFFFFFFFF0) - 16 + v300] = *(_OWORD *)(v70 + v300 - 16);
                                  v300 -= 16;
                                }
                                while ((char *)(v70 + v300) != v74);
                              }
                              else
                              {
                                v239 = v187;
                                v240 = (__int128 *)v74;
                                do
                                {
                                  v241 = *v240++;
                                  *(_OWORD *)v239 = v241;
                                  v239 += 16;
                                }
                                while (v240 != (__int128 *)v70);
                                v242 = (uint64_t)(v70 - (_QWORD)v74) >> 4;
                              }
                              v209 = &v187[16 * v242];
                            }
                          }
                          v74 = (char *)(v70 + 16);
                          LODWORD(v71) = v71 + 1;
                          v187 = v209;
                        }
                        v70 += 16;
                      }
                      while (v70 < (unint64_t)v72);
                      v70 = *(_QWORD *)(v142 + 56);
                      v73 = *(unsigned int *)(v142 + 68);
                      v72 = v187;
                    }
                    else
                    {
                      v73 = 0;
                      v74 = (char *)(v70 + 16 * v71);
                    }
                    v75 = (char *)(v70 + 16 * v73);
                    if (v74 != v75)
                    {
                      if (v74 <= v72)
                      {
                        v248 = &v72[((v75 - v74) & 0xFFFFFFFFFFFFFFF0) - 16];
                        do
                        {
                          *(_OWORD *)v248 = *((_OWORD *)v75 - 1);
                          v248 -= 16;
                          v75 -= 16;
                        }
                        while (v75 != v74);
                      }
                      else
                      {
                        do
                        {
                          v226 = *(_OWORD *)v74;
                          v74 += 16;
                          *(_OWORD *)v72 = v226;
                          v72 += 16;
                        }
                        while (v74 != v75);
                      }
                    }
                    this = (*(_DWORD *)(v142 + 68) - v71);
                    *(_DWORD *)(v142 + 68) = this;
                  }
                  if ((v57 & 0x60) != 0)
                    v59 = (char)(31 - v58);
                  else
                    v59 = v58 + 1;
                  goto LABEL_74;
                }
              }
              if (v56)
              {
                v256 = v51 + 127;
                if (v51 <= 0)
                  v256 = 31 - v51;
                this = (this - 8);
                if (this <= 2)
                {
                  v278 = **v330;
                  v279 = *(char **)(v278 + 24);
                  v280 = *(unsigned int *)(v278 + 36);
                  v281 = &v279[16 * v280];
                  if ((_DWORD)v280)
                  {
                    LODWORD(v280) = 0;
                    v282 = v281;
                    v283 = v281;
                    do
                    {
                      if (((*v279 ^ v256) & 0x7F) == 0)
                      {
                        v302 = v279;
                        if (v283 != (char *)(*(_QWORD *)(v278 + 24) + 16 * *(unsigned int *)(v278 + 36)))
                        {
                          if (v282 == v279)
                          {
                            v302 = v283;
                          }
                          else
                          {
                            if (v282 <= v283)
                            {
                              v326 = 0;
                              v323 = (v279 - v282) >> 4;
                              do
                              {
                                *(_OWORD *)&v283[((v279 - v282) & 0xFFFFFFFFFFFFFFF0) - 16 + v326] = *(_OWORD *)&v279[v326 - 16];
                                v326 -= 16;
                              }
                              while (&v279[v326] != v282);
                            }
                            else
                            {
                              v320 = v283;
                              v321 = (__int128 *)v282;
                              do
                              {
                                v322 = *v321++;
                                *(_OWORD *)v320 = v322;
                                v320 += 16;
                              }
                              while (v321 != (__int128 *)v279);
                              v323 = (v279 - v282) >> 4;
                            }
                            v302 = &v283[16 * v323];
                          }
                        }
                        v282 = v279 + 16;
                        LODWORD(v280) = v280 + 1;
                        v283 = v302;
                      }
                      v279 += 16;
                    }
                    while (v279 < v281);
                    v279 = *(char **)(v278 + 24);
                    v284 = *(unsigned int *)(v278 + 36);
                    v281 = v283;
                  }
                  else
                  {
                    v284 = 0;
                    v282 = &v279[16 * v280];
                  }
                  v285 = &v279[16 * v284];
                  if (v282 != v285)
                  {
                    if (v282 <= v281)
                    {
                      v324 = &v281[((v285 - v282) & 0xFFFFFFFFFFFFFFF0) - 16];
                      do
                      {
                        *(_OWORD *)v324 = *((_OWORD *)v285 - 1);
                        v324 -= 16;
                        v285 -= 16;
                      }
                      while (v285 != v282);
                    }
                    else
                    {
                      do
                      {
                        v304 = *(_OWORD *)v282;
                        v282 += 16;
                        *(_OWORD *)v281 = v304;
                        v281 += 16;
                      }
                      while (v282 != v285);
                    }
                  }
                  *(_DWORD *)(v278 + 36) -= v280;
                  v286 = *(_QWORD *)(v278 + 56);
                  v287 = *(unsigned int *)(v278 + 68);
                  v288 = (char *)(v286 + 16 * v287);
                  if ((_DWORD)v287)
                  {
                    LODWORD(v287) = 0;
                    v290 = v288;
                    v299 = v288;
                    do
                    {
                      if (((*(_BYTE *)(v286 + 8) ^ v256) & 0x7F) == 0)
                      {
                        v303 = (char *)v286;
                        if (v299 != (char *)(*(_QWORD *)(v278 + 56) + 16 * *(unsigned int *)(v278 + 68)))
                        {
                          if (v290 == (char *)v286)
                          {
                            v303 = v299;
                          }
                          else
                          {
                            if (v290 <= v299)
                            {
                              v325 = 0;
                              v313 = (uint64_t)(v286 - (_QWORD)v290) >> 4;
                              do
                              {
                                *(_OWORD *)&v299[((v286 - (_QWORD)v290) & 0xFFFFFFFFFFFFFFF0) - 16 + v325] = *(_OWORD *)(v286 + v325 - 16);
                                v325 -= 16;
                              }
                              while ((char *)(v286 + v325) != v290);
                            }
                            else
                            {
                              v310 = v299;
                              v311 = (__int128 *)v290;
                              do
                              {
                                v312 = *v311++;
                                *(_OWORD *)v310 = v312;
                                v310 += 16;
                              }
                              while (v311 != (__int128 *)v286);
                              v313 = (uint64_t)(v286 - (_QWORD)v290) >> 4;
                            }
                            v303 = &v299[16 * v313];
                          }
                        }
                        v290 = (char *)(v286 + 16);
                        LODWORD(v287) = v287 + 1;
                        v299 = v303;
                      }
                      v286 += 16;
                    }
                    while (v286 < (unint64_t)v288);
                    v286 = *(_QWORD *)(v278 + 56);
                    v289 = *(unsigned int *)(v278 + 68);
                    v288 = v299;
                  }
                  else
                  {
                    v289 = 0;
                    v290 = (char *)(v286 + 16 * v287);
                  }
                  v291 = (char *)(v286 + 16 * v289);
                  if (v290 != v291)
                  {
                    if (v290 <= v288)
                    {
                      v319 = &v288[((v291 - v290) & 0xFFFFFFFFFFFFFFF0) - 16];
                      do
                      {
                        *(_OWORD *)v319 = *((_OWORD *)v291 - 1);
                        v319 -= 16;
                        v291 -= 16;
                      }
                      while (v291 != v290);
                    }
                    else
                    {
                      do
                      {
                        v305 = *(_OWORD *)v290;
                        v290 += 16;
                        *(_OWORD *)v288 = v305;
                        v288 += 16;
                      }
                      while (v290 != v291);
                    }
                  }
                  this = (*(_DWORD *)(v278 + 68) - v287);
                  *(_DWORD *)(v278 + 68) = this;
                }
                v257 = v256 & 0x7F;
                v258 = (char)(31 - (v256 & 0x7F));
                if ((v256 & 0x60) == 0)
                  v258 = v257 + 1;
                if (v257 == 127)
                  v258 = 0;
                *v52 = v258;
              }
              goto LABEL_75;
            case 6:
            case 7:
            case 8:
              v60 = v49 + 32 * v46;
              v62 = *(_DWORD *)(v60 + 16);
              v52 = (int *)(v60 + 16);
              v61 = v62;
              goto LABEL_78;
            case 0xB:
              v174 = v49 + 32 * v46;
              v177 = *(_DWORD *)(v174 + 16);
              v175 = (int *)(v174 + 16);
              v176 = v177;
              v178 = v177 - 1;
              v180 = v177 > 0xFFFFFFDF || v178 < 0x20;
              v181 = v176 + 127;
              if (v176 <= 0)
                v181 = 31 - v176;
              if (v180)
              {
                v182 = v181 & 0x7F;
                if (v182 != 127)
                {
                  v183 = (char)(31 - v182);
                  if ((v181 & 0x60) == 0)
                    v183 = v182 + 1;
                  goto LABEL_277;
                }
              }
              if (v180)
              {
                if (v176 <= 0)
                  v296 = 31 - v176;
                else
                  v296 = v176 + 127;
                v297 = v296 & 0x7F;
                if (v297 == 127)
                {
                  v183 = 0;
                }
                else if ((v296 & 0x60) != 0)
                {
                  v183 = (char)(31 - v297);
                }
                else
                {
                  v183 = v297 + 1;
                }
LABEL_277:
                *v175 = v183;
              }
              v184 = v49 + 32 * v46;
              v185 = *(_DWORD *)(v184 + 20);
              v52 = (int *)(v184 + 20);
              v61 = v185;
LABEL_78:
              v64 = v61 > 0xFFFFFFDF || (v61 - 1) < 0x20;
              v65 = v61 + 127;
              this = (31 - v61);
              if (v61 <= 0)
                v65 = 31 - v61;
              if (!v64 || (this = v65 & 0x7F, (_DWORD)this == 127))
              {
LABEL_480:
                if (!v64)
                  goto LABEL_75;
                v273 = v61 + 127;
                if (v61 <= 0)
                  v273 = 31 - v61;
                v274 = v273 & 0x7F;
                if (v274 == 127)
                {
                  v59 = 0;
                }
                else if ((v273 & 0x60) != 0)
                {
                  v59 = (char)(31 - v274);
                }
                else
                {
                  v59 = v274 + 1;
                }
              }
              else
              {
                LOBYTE(v59) = 31 - (v65 & 0x7F);
LABEL_89:
                v59 = (char)v59;
                if ((v65 & 0x60) == 0)
                  v59 = this + 1;
              }
LABEL_74:
              *v52 = v59;
LABEL_75:
              if (++v46 == v45)
                goto LABEL_100;
              break;
            case 0xC:
            case 0xD:
              v218 = v49 + 32 * v46;
              v219 = *(_DWORD *)(v218 + 16);
              v52 = (int *)(v218 + 16);
              v61 = v219;
              v220 = v219 - 1;
              v64 = v219 > 0xFFFFFFDF || v220 < 0x20;
              v65 = v61 + 127;
              this = (31 - v61);
              if (v61 <= 0)
                v65 = 31 - v61;
              if (!v64)
                goto LABEL_480;
              this = v65 & 0x7F;
              if ((_DWORD)this == 127)
                goto LABEL_480;
              LOBYTE(v59) = 31 - (v65 & 0x7F);
              goto LABEL_89;
            default:
              goto LABEL_75;
          }
        }
      }
    }
LABEL_100:
    *(_QWORD *)&v332 = &v328;
    *((_QWORD *)&v332 + 1) = &v331;
    if (*v7 == 448)
    {
      LOBYTE(v331) = 4;
      if (!v6[3])
      {
        __break(0xC471u);
        JUMPOUT(0x1980D71F0);
      }
      v113 = (*(uint64_t (**)(_QWORD, unsigned int *))(***(_QWORD ***)v6 + 80))(**(_QWORD **)v6, v6);
      if (*v7 == 448)
      {
        LOBYTE(v331) = 8;
        if (!v6[3])
        {
          __break(0xC471u);
          JUMPOUT(0x1980D71F8);
        }
        v115 = (*(uint64_t (**)(_QWORD, unsigned int *))(***(_QWORD ***)v6 + 72))(**(_QWORD **)v6, v6);
      }
    }
    v329 = (uint64_t *)v4;
    v330 = &v329;
    v331 = &v330;
    if ((*v7 - 446) <= 5)
    {
      *((_QWORD *)&v332 + 1) = &v332;
      v333 = &v331;
    }
    else
    {
      v76 = v6[3];
      if ((_DWORD)v76)
      {
        v77 = 0;
        v78 = (char *)&JSC::B3::Air::g_formTable + 21 * *v7 + ((unint64_t)((v76 - 1) * v76) >> 1);
        v79 = 8;
        do
        {
          if (v77 >= v6[3])
          {
            __break(0xC471u);
            JUMPOUT(0x1980D708CLL);
          }
          v80 = v78[v77];
          if ((v80 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x1980D6F38);
          }
          v81 = *(_QWORD *)v6;
          if (*(_BYTE *)(*(_QWORD *)v6 + v79) != 9)
            goto LABEL_107;
          v327 = v4;
          v83 = v81 + v79;
          v84 = *(_QWORD *)(v81 + v79 - 8);
          if ((v80 & 0xC) == 4)
          {
            v85 = (int *)(v81 + v79 + 4);
            if (*(_BYTE *)(v81 + v79) != 9)
            {
              v86 = *(_DWORD *)(v83 - 8);
              goto LABEL_109;
            }
          }
          else
          {
            v85 = (int *)(v81 + 32 * v77 + 12);
          }
          v86 = *v85;
LABEL_109:
          BYTE8(v332) = 0;
          *(_QWORD *)&v332 = 0;
          *(_QWORD *)(v83 - 8) = v84;
          v82 = v81 + v79;
          *(_WORD *)v82 = 521;
          *v85 = v86;
          *(_QWORD *)(v82 + 8) = v332;
          *(_BYTE *)(v82 + 16) = BYTE8(v332);
          v4 = v327;
LABEL_107:
          ++v77;
          v79 += 32;
        }
        while (v76 != v77);
      }
    }
    v330 = &v329;
    v331 = &v330;
    v87 = *v7;
    if ((v87 - 446) <= 5)
    {
      *((_QWORD *)&v332 + 1) = &v332;
      v333 = &v331;
    }
    else
    {
      v88 = v6[3];
      if ((_DWORD)v88)
      {
        v89 = 0;
        v90 = (char *)&JSC::B3::Air::g_formTable + 21 * v87 + ((unint64_t)((v88 - 1) * v88) >> 1);
        v91 = 8;
        do
        {
          if (v89 >= v6[3])
          {
            __break(0xC471u);
            JUMPOUT(0x1980D707CLL);
          }
          v92 = v90[v89];
          if ((v92 >> 5) - 1 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x1980D6EF8);
          }
          v93 = *(_QWORD *)v6;
          if (*(_BYTE *)(*(_QWORD *)v6 + v91) != 9)
            goto LABEL_120;
          v94 = v93 + v91;
          v95 = *(_QWORD *)(v93 + v91 - 8);
          if ((v92 & 0xF) - 8 < 3)
          {
            v96 = (int *)(v93 + v91 + 4);
            if (*(_BYTE *)(v93 + v91) != 9)
            {
              v97 = *(_DWORD *)(v94 - 8);
              goto LABEL_125;
            }
          }
          else
          {
            v96 = (int *)(v93 + 32 * v89 + 12);
          }
          v97 = *v96;
LABEL_125:
          BYTE8(v332) = 0;
          *(_QWORD *)&v332 = 0;
          *(_QWORD *)(v94 - 8) = v95;
          v98 = v93 + v91;
          *(_WORD *)v98 = 521;
          *v96 = v97;
          *(_QWORD *)(v98 + 8) = v332;
          *(_BYTE *)(v98 + 16) = BYTE8(v332);
LABEL_120:
          ++v89;
          v91 += 32;
        }
        while (v88 != v89);
      }
    }
    v1 = *(_QWORD *)(v4 + 88);
    LODWORD(v2) = *(_DWORD *)(v4 + 96);
    v3 = *(_DWORD *)(v1 + 20);
  }
  if (v3 <= v2)
  {
    __break(0xC471u);
    JUMPOUT(0x1980D70A4);
  }
  v99 = (uint64_t **)(*(_QWORD *)(v1 + 8) + ((unint64_t)v2 << 7));
  v100 = *((__int16 *)v99 + 60);
  if (v100 > 93)
  {
    if (v100 != 94)
    {
      if (v100 == 108)
      {
        v197 = *((_DWORD *)v99 + 3);
        if (!v197)
        {
          __break(0xC471u);
          JUMPOUT(0x1980D74F8);
        }
        v198 = *v99;
        v199 = *((unsigned __int8 *)*v99 + 8);
        if (v199 == 1)
        {
          v200 = *((_DWORD *)v198 + 4);
          if (v200 <= 0xFFFFFFDF && (v200 - 1) > 0x1F)
            return this;
          if (v197 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980D757CLL);
          }
          if (*((_BYTE *)v198 + 40) != 9)
            return this;
          v202 = v198[4];
          if (*(_BYTE *)(v202 + 4) != 1)
            return this;
          v203 = 31 - v200;
          if (v200 > 0)
            v203 = v200 - 1;
          *(_QWORD *)&v332 = v202;
          v204 = v203 & 0x7F;
        }
        else
        {
          if (v199 != 9)
            return this;
          v222 = *v198;
          if (*(_BYTE *)(*v198 + 4) != 1)
            return this;
          if (v197 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980D75E8);
          }
          if (*((_BYTE *)v198 + 40) != 1)
            return this;
          v223 = *((_DWORD *)v198 + 12);
          if (v223 <= 0xFFFFFFDF && (v223 - 1) > 0x1F)
            return this;
          if (v223 <= 0)
            v225 = 31 - v223;
          else
            v225 = v223 - 1;
          *(_QWORD *)&v332 = v222;
          v204 = v225 & 0x7F;
        }
        WORD4(v332) = v204;
      }
      else
      {
        if (v100 != 107)
          return this;
        v210 = *((_DWORD *)v99 + 3);
        if (!v210)
        {
          __break(0xC471u);
          JUMPOUT(0x1980D7584);
        }
        v211 = *v99;
        v212 = *((unsigned __int8 *)*v99 + 8);
        if (v212 == 1)
        {
          v213 = *((_DWORD *)v211 + 4);
          if (v213 <= 0xFFFFFFDF && (v213 - 1) > 0x1F)
            return this;
          if (v210 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980D75A8);
          }
          if (*((_BYTE *)v211 + 40) != 9)
            return this;
          v215 = v211[4];
          if (*(_BYTE *)(v215 + 4) != 1)
            return this;
          v216 = 31 - v213;
          if (v213 > 0)
            v216 = v213 - 1;
          *(_QWORD *)&v332 = v215;
          BYTE8(v332) = v216 & 0x7F;
        }
        else
        {
          if (v212 != 9)
            return this;
          v227 = *v211;
          if (*(_BYTE *)(*v211 + 4) != 1)
            return this;
          if (v210 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980D7660);
          }
          if (*((_BYTE *)v211 + 40) != 1)
            return this;
          v228 = *((_DWORD *)v211 + 12);
          if (v228 <= 0xFFFFFFDF && (v228 - 1) > 0x1F)
            return this;
          if (v228 <= 0)
            v230 = 31 - v228;
          else
            v230 = v228 - 1;
          *(_QWORD *)&v332 = v227;
          BYTE8(v332) = v230 & 0x7F;
        }
        BYTE9(v332) = 2;
      }
      return (uint64_t)_ZZN3JSC2B33Air12_GLOBAL__N_116FixObviousSpills11executeInstEvENKUlRKT_E_clINS3_7RegSlotEEEDaS6_(v4, &v332);
    }
    v123 = *((_DWORD *)v99 + 3);
    if (!v123)
    {
      __break(0xC471u);
      JUMPOUT(0x1980D7248);
    }
    v124 = (unsigned int *)*v99;
    if ((*((char *)*v99 + 8) - 2) > 3)
    {
      v125 = *((unsigned __int8 *)*v99 + 8);
      if (v125 == 1)
      {
        v126 = v124[4];
        if (v126 <= 0xFFFFFFDF && (v126 - 1) > 0x1F)
          return this;
        if (v123 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980D725CLL);
        }
        if (*((_BYTE *)v124 + 40) != 9)
          return this;
        v128 = *((_QWORD *)v124 + 4);
        if (*(_BYTE *)(v128 + 4) != 1)
          return this;
        if (v126 <= 0)
          v129 = 31 - v126;
        else
          v129 = v126 + 127;
        v130 = *(unsigned int *)(v4 + 36);
        if ((_DWORD)v130)
        {
          v131 = (int *)(*(_QWORD *)(v4 + 24) + 8);
          v132 = 16 * v130;
          while (((*((_BYTE *)v131 - 8) ^ v129) & 0x7F) != 0)
          {
            v131 += 4;
            v132 -= 16;
            if (!v132)
              goto LABEL_191;
          }
          v206 = *v131;
          *(_QWORD *)&v332 = v128;
          *((_QWORD *)&v332 + 1) = v206;
          v207 = (_QWORD *)(v4 + 40);
          v208 = *(unsigned int *)(v4 + 52);
          if ((_DWORD)v208 == *(_DWORD *)(v4 + 48))
          else
            *(_OWORD *)(*v207 + 16 * v208) = v332;
          ++*(_DWORD *)(v4 + 52);
          v123 = *((_DWORD *)v99 + 3);
        }
LABEL_191:
        if (v123 == 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980D74C0);
        }
        if (!v123)
        {
          __break(0xC471u);
          JUMPOUT(0x1980D74C8);
        }
        v133 = *((_DWORD *)*v99 + 4);
        if (v133 <= 0)
          v134 = 31 - v133;
        else
          v134 = v133 - 1;
        *(_QWORD *)&v332 = (*v99)[4];
        BYTE8(v332) = v134 & 0x7F;
        v135 = 2;
      }
      else
      {
        if (v125 != 9)
          return this;
        v146 = *(_QWORD *)v124;
        if (*(_BYTE *)(*(_QWORD *)v124 + 4) != 1)
          return this;
        if (v123 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980D7488);
        }
        if (*((_BYTE *)v124 + 40) != 1)
          return this;
        v147 = v124[12];
        if (v147 <= 0xFFFFFFDF && (v147 - 1) > 0x1F)
          return this;
        v149 = *(unsigned int *)(v4 + 52);
        if ((_DWORD)v149)
        {
          v150 = (unsigned int *)(*(_QWORD *)(v4 + 40) + 8);
          v151 = 16 * v149;
          while (*((_QWORD *)v150 - 1) != v146)
          {
            v150 += 4;
            v151 -= 16;
            if (!v151)
              goto LABEL_292;
          }
          v188 = *v150;
          if (v147 <= 0)
            v189 = 31 - v147;
          else
            v189 = v147 - 1;
          LOBYTE(v332) = v189 & 0x7F;
          *((_QWORD *)&v332 + 1) = v188;
          v190 = (_QWORD *)(v4 + 24);
          v191 = *(unsigned int *)(v4 + 36);
          if ((_DWORD)v191 == *(_DWORD *)(v4 + 32))
          else
            *(_OWORD *)(*v190 + 16 * v191) = v332;
          ++*(_DWORD *)(v4 + 36);
          v123 = *((_DWORD *)v99 + 3);
LABEL_292:
          if (v123 < 2)
          {
            __break(0xC471u);
            JUMPOUT(0x1980D7490);
          }
          v147 = *((_DWORD *)*v99 + 12);
          v146 = **v99;
        }
        v192 = v147 - 1;
        if (v147 <= 0)
          v192 = 31 - v147;
        *(_QWORD *)&v332 = v146;
        BYTE8(v332) = v192 & 0x7F;
        v135 = 1;
      }
      BYTE9(v332) = v135;
      goto LABEL_248;
    }
    if (v123 <= 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1980D7668);
    }
    v234 = *((unsigned __int8 *)v124 + 40);
    if (v234 == 1)
    {
      v235 = v124[12];
      if (v235 > 0xFFFFFFDF || (v235 - 1) <= 0x1F)
      {
        if (v235 <= 0)
          v237 = 31 - v235;
        else
          v237 = v235 - 1;
        v238 = *v124;
        LOBYTE(v332) = v237 & 0x7F;
        *((_QWORD *)&v332 + 1) = v238;
        return (uint64_t)_ZZN3JSC2B33Air12_GLOBAL__N_116FixObviousSpills11executeInstEvENKUlRKT_E_clINS3_8RegConstEEEDaS6_(v4, &v332);
      }
      return this;
    }
    if (v234 != 9)
      return this;
    v153 = *((_QWORD *)v124 + 4);
    if (*(_BYTE *)(v153 + 4) != 1)
      return this;
    v154 = *v124;
LABEL_233:
    *(_QWORD *)&v332 = v153;
    *((_QWORD *)&v332 + 1) = v154;
    return (uint64_t)_ZZN3JSC2B33Air12_GLOBAL__N_116FixObviousSpills11executeInstEvENKUlRKT_E_clINS3_9SlotConstEEEDaS6_(v4, &v332);
  }
  if (v100 != 90)
    return this;
  v101 = *((_DWORD *)v99 + 3);
  if (!v101)
  {
    __break(0xC471u);
    JUMPOUT(0x1980D7148);
  }
  v102 = *v99;
  if ((*((char *)*v99 + 8) - 2) <= 3)
  {
    if (v101 <= 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1980D7240);
    }
    v117 = *((unsigned __int8 *)v102 + 40);
    if (v117 == 1)
    {
      v118 = *((_DWORD *)v102 + 12);
      if (v118 > 0xFFFFFFDF || (v118 - 1) <= 0x1F)
      {
        if (v118 <= 0)
          v120 = 31 - v118;
        else
          v120 = v118 - 1;
        v121 = *v102;
        LOBYTE(v332) = v120 & 0x7F;
        *((_QWORD *)&v332 + 1) = v121;
        this = v4 + 24;
        v122 = *(unsigned int *)(v4 + 36);
        if ((_DWORD)v122 == *(_DWORD *)(v4 + 32))
        {
          *(_OWORD *)(*(_QWORD *)(v4 + 24) + 16 * *(unsigned int *)(v4 + 36)) = *(_OWORD *)this;
        }
        else
        {
          *(_OWORD *)(*(_QWORD *)this + 16 * v122) = v332;
        }
        ++*(_DWORD *)(v4 + 36);
      }
      return this;
    }
    if (v117 != 9)
      return this;
    v153 = v102[4];
    if (*(_BYTE *)(v153 + 4) != 1)
      return this;
    v154 = *v102;
    goto LABEL_233;
  }
  v103 = *((unsigned __int8 *)*v99 + 8);
  if (v103 == 1)
  {
    v104 = *((_DWORD *)v102 + 4);
    if (v104 > 0xFFFFFFDF || (v104 - 1) <= 0x1F)
    {
      if (v101 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980D7200);
      }
      if (*((_BYTE *)v102 + 40) == 9)
      {
        v106 = v102[4];
        if (*(_BYTE *)(v106 + 4) == 1)
        {
          if (v104 <= 0)
            v107 = 31 - v104;
          else
            v107 = v104 + 127;
          v108 = *(unsigned int *)(v4 + 36);
          if ((_DWORD)v108)
          {
            v109 = (_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
            v110 = 16 * v108;
            while (((*((_BYTE *)v109 - 8) ^ v107) & 0x7F) != 0)
            {
              v109 += 2;
              v110 -= 16;
              if (!v110)
                goto LABEL_148;
            }
            v193 = *v109;
            *(_QWORD *)&v332 = v106;
            *((_QWORD *)&v332 + 1) = v193;
            v194 = (_QWORD *)(v4 + 40);
            v195 = *(unsigned int *)(v4 + 52);
            if ((_DWORD)v195 == *(_DWORD *)(v4 + 48))
            else
              *(_OWORD *)(*v194 + 16 * v195) = v332;
            ++*(_DWORD *)(v4 + 52);
            v101 = *((_DWORD *)v99 + 3);
          }
LABEL_148:
          if (v101 == 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980D7440);
          }
          if (!v101)
          {
            __break(0xC471u);
            JUMPOUT(0x1980D7448);
          }
          v111 = *((_DWORD *)*v99 + 4);
          if (v111 <= 0)
            v112 = 31 - v111;
          else
            v112 = v111 - 1;
          *(_QWORD *)&v332 = (*v99)[4];
          BYTE8(v332) = v112 & 0x7F;
LABEL_247:
          BYTE9(v332) = 0;
LABEL_248:
          this = v4 + 56;
          v161 = *(unsigned int *)(v4 + 68);
          if ((_DWORD)v161 == *(_DWORD *)(v4 + 64))
          {
            *(_OWORD *)(*(_QWORD *)(v4 + 56) + 16 * *(unsigned int *)(v4 + 68)) = *(_OWORD *)this;
          }
          else
          {
            *(_OWORD *)(*(_QWORD *)this + 16 * v161) = v332;
          }
          ++*(_DWORD *)(v4 + 68);
        }
      }
    }
  }
  else if (v103 == 9)
  {
    v136 = *v102;
    if (*(_BYTE *)(*v102 + 4) == 1)
    {
      if (v101 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980D7344);
      }
      if (*((_BYTE *)v102 + 40) == 1)
      {
        v137 = *((_DWORD *)v102 + 12);
        if (v137 > 0xFFFFFFDF || (v137 - 1) <= 0x1F)
        {
          v139 = *(unsigned int *)(v4 + 52);
          if ((_DWORD)v139)
          {
            v140 = (uint64_t *)(*(_QWORD *)(v4 + 40) + 8);
            v141 = 16 * v139;
            while (*(v140 - 1) != v136)
            {
              v140 += 2;
              v141 -= 16;
              if (!v141)
                goto LABEL_242;
            }
            v156 = *v140;
            if (v137 <= 0)
              v157 = 31 - v137;
            else
              v157 = v137 - 1;
            LOBYTE(v332) = v157 & 0x7F;
            *((_QWORD *)&v332 + 1) = v156;
            v158 = (_QWORD *)(v4 + 24);
            v159 = *(unsigned int *)(v4 + 36);
            if ((_DWORD)v159 == *(_DWORD *)(v4 + 32))
            else
              *(_OWORD *)(*v158 + 16 * v159) = v332;
            ++*(_DWORD *)(v4 + 36);
            v101 = *((_DWORD *)v99 + 3);
LABEL_242:
            if (v101 < 2)
            {
              __break(0xC471u);
              JUMPOUT(0x1980D73E4);
            }
            v137 = *((_DWORD *)*v99 + 12);
            v136 = **v99;
          }
          v160 = v137 - 1;
          if (v137 <= 0)
            v160 = 31 - v137;
          *(_QWORD *)&v332 = v136;
          BYTE8(v332) = v160 & 0x7F;
          goto LABEL_247;
        }
      }
    }
  }
  return this;
}

unint64_t JSC::RegisterSetBuilder::forEachWithWidthAndPreserved<void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::Reg,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::executeInst(void)::{lambda(JSC::Reg const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::executeInst(void)::{lambda(JSC::Reg const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::Reg,JSC::Width,JSC::PreservedWidth)#1}>(unint64_t result, uint64_t a2, uint64_t **a3)
{
  unint64_t i;
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  __int128 *v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  __int128 *v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  for (i = a2 | result; i; i &= i - 1)
  {
    v4 = __clz(__rbit64(i));
    v5 = **a3;
    v6 = *(char **)(v5 + 24);
    v7 = *(unsigned int *)(v5 + 36);
    v8 = &v6[16 * v7];
    if ((_DWORD)v7)
    {
      LODWORD(v7) = 0;
      v9 = v8;
      v10 = v8;
      do
      {
        if ((*v6 & 0x7F) == v4)
        {
          v20 = v6;
          if (v10 != (char *)(*(_QWORD *)(v5 + 24) + 16 * *(unsigned int *)(v5 + 36)))
          {
            if (v9 == v6)
            {
              v20 = v10;
            }
            else
            {
              if (v9 <= v10)
              {
                v35 = 0;
                v32 = (v6 - v9) >> 4;
                result = (unint64_t)&v10[((v6 - v9) & 0xFFFFFFFFFFFFFFF0) - 16];
                do
                {
                  *(_OWORD *)(result + v35) = *(_OWORD *)&v6[v35 - 16];
                  v35 -= 16;
                }
                while (&v6[v35] != v9);
              }
              else
              {
                v29 = v10;
                v30 = (__int128 *)v9;
                do
                {
                  v31 = *v30++;
                  *(_OWORD *)v29 = v31;
                  v29 += 16;
                }
                while (v30 != (__int128 *)v6);
                v32 = (v6 - v9) >> 4;
              }
              v20 = &v10[16 * v32];
            }
          }
          v9 = v6 + 16;
          LODWORD(v7) = v7 + 1;
          v10 = v20;
        }
        v6 += 16;
      }
      while (v6 < v8);
      v6 = *(char **)(v5 + 24);
      v11 = *(unsigned int *)(v5 + 36);
      v8 = v10;
    }
    else
    {
      v11 = 0;
      v9 = &v6[16 * v7];
    }
    v12 = &v6[16 * v11];
    if (v9 != v12)
    {
      if (v9 <= v8)
      {
        v33 = &v8[((v12 - v9) & 0xFFFFFFFFFFFFFFF0) - 16];
        do
        {
          *(_OWORD *)v33 = *((_OWORD *)v12 - 1);
          v33 -= 16;
          v12 -= 16;
        }
        while (v12 != v9);
      }
      else
      {
        do
        {
          v23 = *(_OWORD *)v9;
          v9 += 16;
          *(_OWORD *)v8 = v23;
          v8 += 16;
        }
        while (v9 != v12);
      }
    }
    *(_DWORD *)(v5 + 36) -= v7;
    v13 = *(_QWORD *)(v5 + 56);
    v14 = *(unsigned int *)(v5 + 68);
    v15 = (char *)(v13 + 16 * v14);
    if ((_DWORD)v14)
    {
      LODWORD(v14) = 0;
      v17 = v15;
      v19 = v15;
      do
      {
        if ((*(_BYTE *)(v13 + 8) & 0x7F) == v4)
        {
          v22 = (char *)v13;
          if (v19 != (char *)(*(_QWORD *)(v5 + 56) + 16 * *(unsigned int *)(v5 + 68)))
          {
            if (v17 == (char *)v13)
            {
              v22 = v19;
            }
            else
            {
              if (v17 <= v19)
              {
                v34 = 0;
                v28 = (uint64_t)(v13 - (_QWORD)v17) >> 4;
                result = (unint64_t)&v19[((v13 - (_QWORD)v17) & 0xFFFFFFFFFFFFFFF0) - 16];
                do
                {
                  *(_OWORD *)(result + v34) = *(_OWORD *)(v13 + v34 - 16);
                  v34 -= 16;
                }
                while ((char *)(v13 + v34) != v17);
              }
              else
              {
                v25 = v19;
                v26 = (__int128 *)v17;
                do
                {
                  v27 = *v26++;
                  *(_OWORD *)v25 = v27;
                  v25 += 16;
                }
                while (v26 != (__int128 *)v13);
                v28 = (uint64_t)(v13 - (_QWORD)v17) >> 4;
              }
              v22 = &v19[16 * v28];
            }
          }
          v17 = (char *)(v13 + 16);
          LODWORD(v14) = v14 + 1;
          v19 = v22;
        }
        v13 += 16;
      }
      while (v13 < (unint64_t)v15);
      v13 = *(_QWORD *)(v5 + 56);
      v16 = *(unsigned int *)(v5 + 68);
      v15 = v19;
    }
    else
    {
      v16 = 0;
      v17 = (char *)(v13 + 16 * v14);
    }
    v18 = (char *)(v13 + 16 * v16);
    if (v17 != v18)
    {
      if (v17 > v15)
      {
        do
        {
          v21 = *(_OWORD *)v17;
          v17 += 16;
          *(_OWORD *)v15 = v21;
          v15 += 16;
        }
        while (v17 != v18);
      }
      else
      {
        v24 = &v15[((v18 - v17) & 0xFFFFFFFFFFFFFFF0) - 16];
        do
        {
          *(_OWORD *)v24 = *((_OWORD *)v18 - 1);
          v24 -= 16;
          v18 -= 16;
        }
        while (v18 != v17);
      }
    }
    *(_DWORD *)(v5 + 68) -= v14;
  }
  return result;
}

uint64_t ***_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS1_3RegEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_116FixObviousSpills11executeInstEvEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvPSA_SL_RKT0_EUlSC_S6_S7_S8_E_EEvSL_SL_SO_EUlRSC_S6_S7_S8_E_EEvSO_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t ***result;
  int v4;
  BOOL v6;
  unsigned __int8 v7;
  int v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  BOOL v26;
  char v27;
  int v28;
  char *v29;
  char *v30;
  char *v31;
  int v32;
  BOOL v34;
  char v35;
  int v36;
  int v37;
  int v38;
  BOOL v40;
  char v41;
  int v42;
  int v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  __int128 *v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  __int128 *v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  unsigned __int8 v56;
  int v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t ***v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t ***v68;
  uint64_t v69;
  uint64_t ***v70;
  uint64_t ***v71;
  char v72;
  int v73;
  uint64_t ***v74;
  uint64_t v75;
  uint64_t ***v76;
  uint64_t ***v77;
  char v78;
  int v79;
  char v80;
  int v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t ***v85;
  __int128 v86;
  uint64_t v87;
  _OWORD *v88;
  uint64_t ***v89;
  __int128 v90;
  uint64_t v91;
  char *v92;

  result = **(uint64_t *****)(a1 + 16);
  switch(*(_BYTE *)(a2 + 8))
  {
    case 1:
      v4 = *(_DWORD *)(a2 + 16);
      v6 = v4 > 0xFFFFFFDF || (v4 - 1) < 0x20;
      v7 = v4 + 127;
      if (v4 <= 0)
        v7 = 31 - v4;
      if (v6)
      {
        v8 = v7 & 0x7F;
        if (v8 != 127)
        {
          if ((a3 & 0xFC) == 4)
          {
            v10 = ***result;
            v11 = *(char **)(v10 + 24);
            v12 = *(unsigned int *)(v10 + 36);
            v13 = &v11[16 * v12];
            if ((_DWORD)v12)
            {
              LODWORD(v12) = 0;
              v14 = v13;
              v15 = v13;
              do
              {
                if (((*v11 ^ v7) & 0x7F) == 0)
                {
                  v30 = v11;
                  if (v15 != (char *)(*(_QWORD *)(v10 + 24) + 16 * *(unsigned int *)(v10 + 36)))
                  {
                    if (v14 == v11)
                    {
                      v30 = v15;
                    }
                    else
                    {
                      if (v14 <= v15)
                      {
                        v84 = 0;
                        v54 = (v11 - v14) >> 4;
                        result = (uint64_t ***)&v15[((v11 - v14) & 0xFFFFFFFFFFFFFFF0) - 16];
                        do
                        {
                          *(_OWORD *)&result[v84] = *(_OWORD *)&v11[v84 * 8 - 16];
                          v84 -= 2;
                        }
                        while (&v11[v84 * 8] != v14);
                      }
                      else
                      {
                        v51 = v15;
                        v52 = (__int128 *)v14;
                        do
                        {
                          v53 = *v52++;
                          *(_OWORD *)v51 = v53;
                          v51 += 16;
                        }
                        while (v52 != (__int128 *)v11);
                        v54 = (v11 - v14) >> 4;
                      }
                      v30 = &v15[16 * v54];
                    }
                  }
                  v14 = v11 + 16;
                  LODWORD(v12) = v12 + 1;
                  v15 = v30;
                }
                v11 += 16;
              }
              while (v11 < v13);
              v11 = *(char **)(v10 + 24);
              v16 = *(unsigned int *)(v10 + 36);
              v13 = v15;
            }
            else
            {
              v16 = 0;
              v14 = &v11[16 * v12];
            }
            v17 = &v11[16 * v16];
            if (v14 != v17)
            {
              if (v14 <= v13)
              {
                v55 = &v13[((v17 - v14) & 0xFFFFFFFFFFFFFFF0) - 16];
                do
                {
                  *(_OWORD *)v55 = *((_OWORD *)v17 - 1);
                  v55 -= 16;
                  v17 -= 16;
                }
                while (v17 != v14);
              }
              else
              {
                do
                {
                  v44 = *(_OWORD *)v14;
                  v14 += 16;
                  *(_OWORD *)v13 = v44;
                  v13 += 16;
                }
                while (v14 != v17);
              }
            }
            *(_DWORD *)(v10 + 36) -= v12;
            v18 = *(_QWORD *)(v10 + 56);
            v19 = *(unsigned int *)(v10 + 68);
            v20 = (char *)(v18 + 16 * v19);
            if ((_DWORD)v19)
            {
              LODWORD(v19) = 0;
              v22 = v20;
              v29 = v20;
              do
              {
                if (((*(_BYTE *)(v18 + 8) ^ v7) & 0x7F) == 0)
                {
                  v31 = (char *)v18;
                  if (v29 != (char *)(*(_QWORD *)(v10 + 56) + 16 * *(unsigned int *)(v10 + 68)))
                  {
                    if (v22 == (char *)v18)
                    {
                      v31 = v29;
                    }
                    else
                    {
                      if (v22 <= v29)
                      {
                        v75 = 0;
                        v49 = (uint64_t)(v18 - (_QWORD)v22) >> 4;
                        result = (uint64_t ***)&v29[((v18 - (_QWORD)v22) & 0xFFFFFFFFFFFFFFF0) - 16];
                        do
                        {
                          *(_OWORD *)&result[v75] = *(_OWORD *)(v18 + v75 * 8 - 16);
                          v75 -= 2;
                        }
                        while ((char *)(v18 + v75 * 8) != v22);
                      }
                      else
                      {
                        v46 = v29;
                        v47 = (__int128 *)v22;
                        do
                        {
                          v48 = *v47++;
                          *(_OWORD *)v46 = v48;
                          v46 += 16;
                        }
                        while (v47 != (__int128 *)v18);
                        v49 = (uint64_t)(v18 - (_QWORD)v22) >> 4;
                      }
                      v31 = &v29[16 * v49];
                    }
                  }
                  v22 = (char *)(v18 + 16);
                  LODWORD(v19) = v19 + 1;
                  v29 = v31;
                }
                v18 += 16;
              }
              while (v18 < (unint64_t)v20);
              v18 = *(_QWORD *)(v10 + 56);
              v21 = *(unsigned int *)(v10 + 68);
              v20 = v29;
            }
            else
            {
              v21 = 0;
              v22 = (char *)(v18 + 16 * v19);
            }
            v23 = (char *)(v18 + 16 * v21);
            if (v22 != v23)
            {
              if (v22 <= v20)
              {
                v50 = &v20[((v23 - v22) & 0xFFFFFFFFFFFFFFF0) - 16];
                do
                {
                  *(_OWORD *)v50 = *((_OWORD *)v23 - 1);
                  v50 -= 16;
                  v23 -= 16;
                }
                while (v23 != v22);
              }
              else
              {
                do
                {
                  v45 = *(_OWORD *)v22;
                  v22 += 16;
                  *(_OWORD *)v20 = v45;
                  v20 += 16;
                }
                while (v22 != v23);
              }
            }
            *(_DWORD *)(v10 + 68) -= v19;
          }
          if ((v7 & 0x60) != 0)
            v9 = (char)(31 - v8);
          else
            v9 = v8 + 1;
          goto LABEL_16;
        }
      }
      if (v6)
      {
        if (v4 <= 0)
          v56 = 31 - v4;
        else
          v56 = v4 + 127;
        v57 = v56 & 0x7F;
        if ((a3 & 0xFC) == 4)
        {
          v58 = ***result;
          v59 = *(char **)(v58 + 24);
          v60 = *(unsigned int *)(v58 + 36);
          v61 = &v59[16 * v60];
          if ((_DWORD)v60)
          {
            LODWORD(v60) = 0;
            v62 = v61;
            v63 = (uint64_t ***)v61;
            do
            {
              if (((*v59 ^ v56) & 0x7F) == 0)
              {
                result = (uint64_t ***)(*(_QWORD *)(v58 + 24) + 16 * *(unsigned int *)(v58 + 36));
                v76 = (uint64_t ***)v59;
                if (v63 != result)
                {
                  if (v62 == v59)
                  {
                    v76 = v63;
                  }
                  else
                  {
                    if (v62 <= (char *)v63)
                    {
                      result = 0;
                      v91 = (v59 - v62) >> 4;
                      do
                      {
                        *(_OWORD *)((char *)result + (_QWORD)v63 + ((v59 - v62) & 0xFFFFFFFFFFFFFFF0) - 16) = *(_OWORD *)((char *)result + (_QWORD)v59 - 16);
                        result -= 2;
                      }
                      while ((char *)result + (_QWORD)v59 != v62);
                    }
                    else
                    {
                      v89 = v63;
                      result = (uint64_t ***)v62;
                      do
                      {
                        v90 = *(_OWORD *)result;
                        result += 2;
                        *(_OWORD *)v89 = v90;
                        v89 += 2;
                      }
                      while (result != (uint64_t ***)v59);
                      v91 = (v59 - v62) >> 4;
                    }
                    v76 = &v63[2 * v91];
                  }
                }
                v62 = v59 + 16;
                LODWORD(v60) = v60 + 1;
                v63 = v76;
              }
              v59 += 16;
            }
            while (v59 < v61);
            v59 = *(char **)(v58 + 24);
            v64 = *(unsigned int *)(v58 + 36);
            v61 = (char *)v63;
          }
          else
          {
            v64 = 0;
            v62 = &v59[16 * v60];
          }
          v65 = &v59[16 * v64];
          if (v62 != v65)
          {
            if (v62 <= v61)
            {
              v92 = &v61[((v65 - v62) & 0xFFFFFFFFFFFFFFF0) - 16];
              do
              {
                *(_OWORD *)v92 = *((_OWORD *)v65 - 1);
                v92 -= 16;
                v65 -= 16;
              }
              while (v65 != v62);
            }
            else
            {
              do
              {
                v82 = *(_OWORD *)v62;
                v62 += 16;
                *(_OWORD *)v61 = v82;
                v61 += 16;
              }
              while (v62 != v65);
            }
          }
          *(_DWORD *)(v58 + 36) -= v60;
          v66 = *(_QWORD *)(v58 + 56);
          v67 = *(unsigned int *)(v58 + 68);
          v68 = (uint64_t ***)(v66 + 16 * v67);
          if ((_DWORD)v67)
          {
            LODWORD(v67) = 0;
            v70 = v68;
            v74 = v68;
            do
            {
              if (((*(_BYTE *)(v66 + 8) ^ v56) & 0x7F) == 0)
              {
                result = (uint64_t ***)(*(_QWORD *)(v58 + 56) + 16 * *(unsigned int *)(v58 + 68));
                v77 = (uint64_t ***)v66;
                if (v74 != result)
                {
                  if (v70 == (uint64_t ***)v66)
                  {
                    v77 = v74;
                  }
                  else
                  {
                    if (v70 <= v74)
                    {
                      result = 0;
                      v87 = (uint64_t)(v66 - (_QWORD)v70) >> 4;
                      do
                      {
                        *(_OWORD *)((char *)result + (_QWORD)v74 + ((v66 - (_QWORD)v70) & 0xFFFFFFFFFFFFFFF0) - 16) = *(_OWORD *)((char *)result + v66 - 16);
                        result -= 2;
                      }
                      while ((uint64_t ***)((char *)result + v66) != v70);
                    }
                    else
                    {
                      v85 = v74;
                      result = v70;
                      do
                      {
                        v86 = *(_OWORD *)result;
                        result += 2;
                        *(_OWORD *)v85 = v86;
                        v85 += 2;
                      }
                      while (result != (uint64_t ***)v66);
                      v87 = (uint64_t)(v66 - (_QWORD)v70) >> 4;
                    }
                    v77 = &v74[2 * v87];
                  }
                }
                v70 = (uint64_t ***)(v66 + 16);
                LODWORD(v67) = v67 + 1;
                v74 = v77;
              }
              v66 += 16;
            }
            while (v66 < (unint64_t)v68);
            v66 = *(_QWORD *)(v58 + 56);
            v69 = *(unsigned int *)(v58 + 68);
            v68 = v74;
          }
          else
          {
            v69 = 0;
            v70 = (uint64_t ***)(v66 + 16 * v67);
          }
          v71 = (uint64_t ***)(v66 + 16 * v69);
          if (v70 != v71)
          {
            if (v70 <= v68)
            {
              v88 = (_OWORD *)((char *)v68 + (((char *)v71 - (char *)v70) & 0xFFFFFFFFFFFFFFF0) - 16);
              do
              {
                *v88-- = *((_OWORD *)v71 - 1);
                v71 -= 2;
              }
              while (v71 != v70);
            }
            else
            {
              do
              {
                v83 = *(_OWORD *)v70;
                v70 += 2;
                *(_OWORD *)v68 = v83;
                v68 += 2;
              }
              while (v70 != v71);
            }
          }
          *(_DWORD *)(v58 + 68) -= v67;
        }
        v9 = (char)(31 - v57);
        if ((v56 & 0x60) == 0)
          v9 = v57 + 1;
        if (v57 == 127)
          v9 = 0;
        goto LABEL_16;
      }
      return result;
    case 6:
    case 7:
    case 8:
      v24 = *(_DWORD *)(a2 + 16);
      v26 = v24 > 0xFFFFFFDF || (v24 - 1) < 0x20;
      v27 = v24 + 127;
      if (v24 <= 0)
        v27 = 31 - v24;
      if (v26)
      {
        v28 = v27 & 0x7F;
        if (v28 != 127)
        {
          v9 = (char)(31 - v28);
          if ((v27 & 0x60) == 0)
            v9 = v28 + 1;
LABEL_16:
          *(_DWORD *)(a2 + 16) = v9;
          return result;
        }
      }
      if (v26)
      {
        v72 = v24 + 127;
        if (v24 <= 0)
          v72 = 31 - v24;
        v73 = v72 & 0x7F;
        if (v73 == 127)
        {
          v9 = 0;
        }
        else if ((v72 & 0x60) != 0)
        {
          v9 = (char)(31 - v73);
        }
        else
        {
          v9 = v73 + 1;
        }
        goto LABEL_16;
      }
      return result;
    case 0xB:
      v32 = *(_DWORD *)(a2 + 16);
      v34 = v32 > 0xFFFFFFDF || (v32 - 1) < 0x20;
      v35 = v32 + 127;
      if (v32 <= 0)
        v35 = 31 - v32;
      if (v34)
      {
        v36 = v35 & 0x7F;
        if (v36 != 127)
        {
          v37 = (char)(31 - v36);
          if ((v35 & 0x60) == 0)
            v37 = v36 + 1;
          goto LABEL_60;
        }
      }
      if (v34)
      {
        if (v32 <= 0)
          v78 = 31 - v32;
        else
          v78 = v32 + 127;
        v79 = v78 & 0x7F;
        if (v79 == 127)
        {
          v37 = 0;
        }
        else if ((v78 & 0x60) != 0)
        {
          v37 = (char)(31 - v79);
        }
        else
        {
          v37 = v79 + 1;
        }
LABEL_60:
        *(_DWORD *)(a2 + 16) = v37;
      }
      v38 = *(_DWORD *)(a2 + 20);
      v40 = v38 > 0xFFFFFFDF || (v38 - 1) < 0x20;
      v41 = v38 + 127;
      if (v38 <= 0)
        v41 = 31 - v38;
      if (v40)
      {
        v42 = v41 & 0x7F;
        if (v42 != 127)
        {
          v43 = (char)(31 - v42);
          if ((v41 & 0x60) == 0)
            v43 = v42 + 1;
LABEL_73:
          *(_DWORD *)(a2 + 20) = v43;
          return result;
        }
      }
      if (v40)
      {
        v80 = v38 + 127;
        if (v38 <= 0)
          v80 = 31 - v38;
        v81 = v80 & 0x7F;
        if (v81 == 127)
        {
          v43 = 0;
        }
        else if ((v80 & 0x60) != 0)
        {
          v43 = (char)(31 - v81);
        }
        else
        {
          v43 = v81 + 1;
        }
        goto LABEL_73;
      }
      return result;
    case 0xC:
    case 0xD:
    default:
      return result;
  }
}

uint64_t ***JSC::B3::Air::ArgThingHelper<JSC::Reg>::forEach<void JSC::B3::Air::Inst::forEachDef<JSC::Reg,void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::Reg,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::executeInst(void)::{lambda(JSC::Reg const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::executeInst(void)::{lambda(JSC::Reg const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::Reg,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::executeInst(void)::{lambda(JSC::Reg const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::Reg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,void JSC::B3::Air::Inst::forEachDef<JSC::Reg,void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::Reg,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::executeInst(void)::{lambda(JSC::Reg const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::executeInst(void)::{lambda(JSC::Reg const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::Reg,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::executeInst(void)::{lambda(JSC::Reg const&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::PreservedWidth)#1} const&)::{lambda(JSC::Reg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t ***result, int *a2)
{
  int v2;
  unsigned __int8 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int v18;
  char *v19;
  int v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  __int128 *v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 *v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *a2;
  if (*a2 > 0xFFFFFFDF || (*a2 - 1) <= 0x1F)
  {
    if (v2 <= 0)
      v4 = 31 - v2;
    else
      v4 = v2 + 127;
    v5 = ***result;
    v6 = *(char **)(v5 + 24);
    v7 = *(unsigned int *)(v5 + 36);
    v8 = &v6[16 * v7];
    if ((_DWORD)v7)
    {
      LODWORD(v7) = 0;
      v9 = v8;
      v10 = v8;
      do
      {
        if (((*v6 ^ v4) & 0x7F) == 0)
        {
          v22 = v6;
          if (v10 != (char *)(*(_QWORD *)(v5 + 24) + 16 * *(unsigned int *)(v5 + 36)))
          {
            if (v9 == v6)
            {
              v22 = v10;
            }
            else
            {
              if (v9 <= v10)
              {
                v37 = 0;
                v34 = (v6 - v9) >> 4;
                do
                {
                  *(_OWORD *)&v10[((v6 - v9) & 0xFFFFFFFFFFFFFFF0) - 16 + v37] = *(_OWORD *)&v6[v37 - 16];
                  v37 -= 16;
                  result = (uint64_t ***)&v6[v37];
                }
                while (&v6[v37] != v9);
              }
              else
              {
                v31 = v10;
                v32 = (__int128 *)v9;
                do
                {
                  v33 = *v32++;
                  *(_OWORD *)v31 = v33;
                  v31 += 16;
                }
                while (v32 != (__int128 *)v6);
                v34 = (v6 - v9) >> 4;
              }
              v22 = &v10[16 * v34];
            }
          }
          v9 = v6 + 16;
          LODWORD(v7) = v7 + 1;
          v10 = v22;
        }
        v6 += 16;
      }
      while (v6 < v8);
      v6 = *(char **)(v5 + 24);
      v11 = *(unsigned int *)(v5 + 36);
      v8 = v10;
    }
    else
    {
      v11 = 0;
      v9 = &v6[16 * v7];
    }
    v12 = &v6[16 * v11];
    if (v9 != v12)
    {
      if (v9 <= v8)
      {
        v35 = &v8[((v12 - v9) & 0xFFFFFFFFFFFFFFF0) - 16];
        do
        {
          *(_OWORD *)v35 = *((_OWORD *)v12 - 1);
          v35 -= 16;
          v12 -= 16;
        }
        while (v12 != v9);
      }
      else
      {
        do
        {
          v24 = *(_OWORD *)v9;
          v9 += 16;
          *(_OWORD *)v8 = v24;
          v8 += 16;
        }
        while (v9 != v12);
      }
    }
    *(_DWORD *)(v5 + 36) -= v7;
    v13 = *(_QWORD *)(v5 + 56);
    v14 = *(unsigned int *)(v5 + 68);
    v15 = (char *)(v13 + 16 * v14);
    if ((_DWORD)v14)
    {
      LODWORD(v14) = 0;
      v17 = v15;
      v21 = v15;
      do
      {
        if (((*(_BYTE *)(v13 + 8) ^ v4) & 0x7F) == 0)
        {
          v23 = (char *)v13;
          if (v21 != (char *)(*(_QWORD *)(v5 + 56) + 16 * *(unsigned int *)(v5 + 68)))
          {
            if (v17 == (char *)v13)
            {
              v23 = v21;
            }
            else
            {
              if (v17 <= v21)
              {
                v36 = 0;
                v29 = (uint64_t)(v13 - (_QWORD)v17) >> 4;
                do
                {
                  *(_OWORD *)&v21[((v13 - (_QWORD)v17) & 0xFFFFFFFFFFFFFFF0) - 16 + v36] = *(_OWORD *)(v13 + v36 - 16);
                  v36 -= 16;
                  result = (uint64_t ***)(v13 + v36);
                }
                while ((char *)(v13 + v36) != v17);
              }
              else
              {
                v26 = v21;
                v27 = (__int128 *)v17;
                do
                {
                  v28 = *v27++;
                  *(_OWORD *)v26 = v28;
                  v26 += 16;
                }
                while (v27 != (__int128 *)v13);
                v29 = (uint64_t)(v13 - (_QWORD)v17) >> 4;
              }
              v23 = &v21[16 * v29];
            }
          }
          v17 = (char *)(v13 + 16);
          LODWORD(v14) = v14 + 1;
          v21 = v23;
        }
        v13 += 16;
      }
      while (v13 < (unint64_t)v15);
      v13 = *(_QWORD *)(v5 + 56);
      v16 = *(unsigned int *)(v5 + 68);
      v15 = v21;
    }
    else
    {
      v16 = 0;
      v17 = (char *)(v13 + 16 * v14);
    }
    v18 = v4 & 0x7F;
    v19 = (char *)(v13 + 16 * v16);
    if (v17 != v19)
    {
      if (v17 <= v15)
      {
        v30 = &v15[((v19 - v17) & 0xFFFFFFFFFFFFFFF0) - 16];
        do
        {
          *(_OWORD *)v30 = *((_OWORD *)v19 - 1);
          v30 -= 16;
          v19 -= 16;
        }
        while (v19 != v17);
      }
      else
      {
        do
        {
          v25 = *(_OWORD *)v17;
          v17 += 16;
          *(_OWORD *)v15 = v25;
          v15 += 16;
        }
        while (v17 != v19);
      }
    }
    *(_DWORD *)(v5 + 68) -= v14;
    if ((v4 & 0x60) != 0)
      v20 = (char)(31 - v18);
    else
      v20 = v18 + 1;
    if (v18 == 127)
      v20 = 0;
    *a2 = v20;
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS1_3RegEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_12_GLOBAL__N_116FixObviousSpills11executeInstEvEUlRKSC_S6_S7_S8_NS1_14PreservedWidthEE_EEvPSA_SL_RKT0_EUlSC_S6_S7_S8_E_EEvSL_SL_SO_EUlRSC_S6_S7_S8_E0_EEvSO_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3)
{
  uint64_t **v3;
  int v4;
  BOOL v6;
  unsigned __int8 v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  char v13;
  int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  BOOL v31;
  char v32;
  int v33;
  int v34;
  int v35;
  BOOL v37;
  char v38;
  int v39;
  int v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  __int128 *v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  __int128 *v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  unsigned __int8 v56;
  int v57;
  char v58;
  int v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char v74;
  int v75;
  char v76;
  int v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  char *v89;
  __int128 v90;
  uint64_t v91;
  char *v92;

  switch(*(_BYTE *)(a2 + 8))
  {
    case 1:
      v3 = ***(uint64_t *****)(result + 16);
      v4 = *(_DWORD *)(a2 + 16);
      v6 = v4 > 0xFFFFFFDF || (v4 - 1) < 0x20;
      v7 = v4 + 127;
      if (v4 <= 0)
        v7 = 31 - v4;
      if (v6)
      {
        v8 = v7 & 0x7F;
        if (v8 != 127)
        {
          if ((a3 - 8) <= 2)
          {
            v15 = **v3;
            v16 = *(char **)(v15 + 24);
            v17 = *(unsigned int *)(v15 + 36);
            v18 = &v16[16 * v17];
            if ((_DWORD)v17)
            {
              LODWORD(v17) = 0;
              v19 = v18;
              v20 = v18;
              do
              {
                if (((*v16 ^ v7) & 0x7F) == 0)
                {
                  v42 = v16;
                  if (v20 != (char *)(*(_QWORD *)(v15 + 24) + 16 * *(unsigned int *)(v15 + 36)))
                  {
                    if (v19 == v16)
                    {
                      v42 = v20;
                    }
                    else
                    {
                      if (v19 <= v20)
                      {
                        v84 = 0;
                        v54 = (v16 - v19) >> 4;
                        result = (uint64_t)&v20[((v16 - v19) & 0xFFFFFFFFFFFFFFF0) - 16];
                        do
                        {
                          *(_OWORD *)(result + v84) = *(_OWORD *)&v16[v84 - 16];
                          v84 -= 16;
                        }
                        while (&v16[v84] != v19);
                      }
                      else
                      {
                        v51 = v20;
                        v52 = (__int128 *)v19;
                        do
                        {
                          v53 = *v52++;
                          *(_OWORD *)v51 = v53;
                          v51 += 16;
                        }
                        while (v52 != (__int128 *)v16);
                        v54 = (v16 - v19) >> 4;
                      }
                      v42 = &v20[16 * v54];
                    }
                  }
                  v19 = v16 + 16;
                  LODWORD(v17) = v17 + 1;
                  v20 = v42;
                }
                v16 += 16;
              }
              while (v16 < v18);
              v16 = *(char **)(v15 + 24);
              v21 = *(unsigned int *)(v15 + 36);
              v18 = v20;
            }
            else
            {
              v21 = 0;
              v19 = &v16[16 * v17];
            }
            v22 = &v16[16 * v21];
            if (v19 != v22)
            {
              if (v19 <= v18)
              {
                v55 = &v18[((v22 - v19) & 0xFFFFFFFFFFFFFFF0) - 16];
                do
                {
                  *(_OWORD *)v55 = *((_OWORD *)v22 - 1);
                  v55 -= 16;
                  v22 -= 16;
                }
                while (v22 != v19);
              }
              else
              {
                do
                {
                  v44 = *(_OWORD *)v19;
                  v19 += 16;
                  *(_OWORD *)v18 = v44;
                  v18 += 16;
                }
                while (v19 != v22);
              }
            }
            *(_DWORD *)(v15 + 36) -= v17;
            v23 = *(_QWORD *)(v15 + 56);
            v24 = *(unsigned int *)(v15 + 68);
            v25 = (char *)(v23 + 16 * v24);
            if ((_DWORD)v24)
            {
              LODWORD(v24) = 0;
              v27 = v25;
              v41 = v25;
              do
              {
                if (((*(_BYTE *)(v23 + 8) ^ v7) & 0x7F) == 0)
                {
                  v43 = (char *)v23;
                  if (v41 != (char *)(*(_QWORD *)(v15 + 56) + 16 * *(unsigned int *)(v15 + 68)))
                  {
                    if (v27 == (char *)v23)
                    {
                      v43 = v41;
                    }
                    else
                    {
                      if (v27 <= v41)
                      {
                        v79 = 0;
                        v49 = (uint64_t)(v23 - (_QWORD)v27) >> 4;
                        result = (uint64_t)&v41[((v23 - (_QWORD)v27) & 0xFFFFFFFFFFFFFFF0) - 16];
                        do
                        {
                          *(_OWORD *)(result + v79) = *(_OWORD *)(v23 + v79 - 16);
                          v79 -= 16;
                        }
                        while ((char *)(v23 + v79) != v27);
                      }
                      else
                      {
                        v46 = v41;
                        v47 = (__int128 *)v27;
                        do
                        {
                          v48 = *v47++;
                          *(_OWORD *)v46 = v48;
                          v46 += 16;
                        }
                        while (v47 != (__int128 *)v23);
                        v49 = (uint64_t)(v23 - (_QWORD)v27) >> 4;
                      }
                      v43 = &v41[16 * v49];
                    }
                  }
                  v27 = (char *)(v23 + 16);
                  LODWORD(v24) = v24 + 1;
                  v41 = v43;
                }
                v23 += 16;
              }
              while (v23 < (unint64_t)v25);
              v23 = *(_QWORD *)(v15 + 56);
              v26 = *(unsigned int *)(v15 + 68);
              v25 = v41;
            }
            else
            {
              v26 = 0;
              v27 = (char *)(v23 + 16 * v24);
            }
            v28 = (char *)(v23 + 16 * v26);
            if (v27 != v28)
            {
              if (v27 <= v25)
              {
                v50 = &v25[((v28 - v27) & 0xFFFFFFFFFFFFFFF0) - 16];
                do
                {
                  *(_OWORD *)v50 = *((_OWORD *)v28 - 1);
                  v50 -= 16;
                  v28 -= 16;
                }
                while (v28 != v27);
              }
              else
              {
                do
                {
                  v45 = *(_OWORD *)v27;
                  v27 += 16;
                  *(_OWORD *)v25 = v45;
                  v25 += 16;
                }
                while (v27 != v28);
              }
            }
            *(_DWORD *)(v15 + 68) -= v24;
          }
          if ((v7 & 0x60) != 0)
            v9 = (char)(31 - v8);
          else
            v9 = v8 + 1;
          goto LABEL_16;
        }
      }
      if (v6)
      {
        if (v4 <= 0)
          v56 = 31 - v4;
        else
          v56 = v4 + 127;
        v57 = v56 & 0x7F;
        if ((a3 - 8) <= 2)
        {
          v60 = **v3;
          v61 = *(char **)(v60 + 24);
          v62 = *(unsigned int *)(v60 + 36);
          v63 = &v61[16 * v62];
          if ((_DWORD)v62)
          {
            LODWORD(v62) = 0;
            v64 = v63;
            v65 = v63;
            do
            {
              if (((*v61 ^ v56) & 0x7F) == 0)
              {
                result = *(_QWORD *)(v60 + 24) + 16 * *(unsigned int *)(v60 + 36);
                v80 = v61;
                if (v65 != (char *)result)
                {
                  if (v64 == v61)
                  {
                    v80 = v65;
                  }
                  else
                  {
                    if (v64 <= v65)
                    {
                      result = 0;
                      v91 = (v61 - v64) >> 4;
                      do
                      {
                        *(_OWORD *)&v65[((v61 - v64) & 0xFFFFFFFFFFFFFFF0) - 16 + result] = *(_OWORD *)&v61[result - 16];
                        result -= 16;
                      }
                      while (&v61[result] != v64);
                    }
                    else
                    {
                      v89 = v65;
                      result = (uint64_t)v64;
                      do
                      {
                        v90 = *(_OWORD *)result;
                        result += 16;
                        *(_OWORD *)v89 = v90;
                        v89 += 16;
                      }
                      while ((char *)result != v61);
                      v91 = (v61 - v64) >> 4;
                    }
                    v80 = &v65[16 * v91];
                  }
                }
                v64 = v61 + 16;
                LODWORD(v62) = v62 + 1;
                v65 = v80;
              }
              v61 += 16;
            }
            while (v61 < v63);
            v61 = *(char **)(v60 + 24);
            v66 = *(unsigned int *)(v60 + 36);
            v63 = v65;
          }
          else
          {
            v66 = 0;
            v64 = &v61[16 * v62];
          }
          v67 = &v61[16 * v66];
          if (v64 != v67)
          {
            if (v64 <= v63)
            {
              v92 = &v63[((v67 - v64) & 0xFFFFFFFFFFFFFFF0) - 16];
              do
              {
                *(_OWORD *)v92 = *((_OWORD *)v67 - 1);
                v92 -= 16;
                v67 -= 16;
              }
              while (v67 != v64);
            }
            else
            {
              do
              {
                v82 = *(_OWORD *)v64;
                v64 += 16;
                *(_OWORD *)v63 = v82;
                v63 += 16;
              }
              while (v64 != v67);
            }
          }
          *(_DWORD *)(v60 + 36) -= v62;
          v68 = *(_QWORD *)(v60 + 56);
          v69 = *(unsigned int *)(v60 + 68);
          v70 = (char *)(v68 + 16 * v69);
          if ((_DWORD)v69)
          {
            LODWORD(v69) = 0;
            v72 = v70;
            v78 = v70;
            do
            {
              if (((*(_BYTE *)(v68 + 8) ^ v56) & 0x7F) == 0)
              {
                result = *(_QWORD *)(v60 + 56) + 16 * *(unsigned int *)(v60 + 68);
                v81 = (char *)v68;
                if (v78 != (char *)result)
                {
                  if (v72 == (char *)v68)
                  {
                    v81 = v78;
                  }
                  else
                  {
                    if (v72 <= v78)
                    {
                      result = 0;
                      v87 = (uint64_t)(v68 - (_QWORD)v72) >> 4;
                      do
                      {
                        *(_OWORD *)&v78[((v68 - (_QWORD)v72) & 0xFFFFFFFFFFFFFFF0) - 16 + result] = *(_OWORD *)(v68 + result - 16);
                        result -= 16;
                      }
                      while ((char *)(v68 + result) != v72);
                    }
                    else
                    {
                      v85 = v78;
                      result = (uint64_t)v72;
                      do
                      {
                        v86 = *(_OWORD *)result;
                        result += 16;
                        *(_OWORD *)v85 = v86;
                        v85 += 16;
                      }
                      while (result != v68);
                      v87 = (uint64_t)(v68 - (_QWORD)v72) >> 4;
                    }
                    v81 = &v78[16 * v87];
                  }
                }
                v72 = (char *)(v68 + 16);
                LODWORD(v69) = v69 + 1;
                v78 = v81;
              }
              v68 += 16;
            }
            while (v68 < (unint64_t)v70);
            v68 = *(_QWORD *)(v60 + 56);
            v71 = *(unsigned int *)(v60 + 68);
            v70 = v78;
          }
          else
          {
            v71 = 0;
            v72 = (char *)(v68 + 16 * v69);
          }
          v73 = (char *)(v68 + 16 * v71);
          if (v72 != v73)
          {
            if (v72 <= v70)
            {
              v88 = &v70[((v73 - v72) & 0xFFFFFFFFFFFFFFF0) - 16];
              do
              {
                *(_OWORD *)v88 = *((_OWORD *)v73 - 1);
                v88 -= 16;
                v73 -= 16;
              }
              while (v73 != v72);
            }
            else
            {
              do
              {
                v83 = *(_OWORD *)v72;
                v72 += 16;
                *(_OWORD *)v70 = v83;
                v70 += 16;
              }
              while (v72 != v73);
            }
          }
          *(_DWORD *)(v60 + 68) -= v69;
        }
        v9 = (char)(31 - v57);
        if ((v56 & 0x60) == 0)
          v9 = v57 + 1;
        if (v57 == 127)
          v9 = 0;
        goto LABEL_16;
      }
      return result;
    case 6:
    case 7:
    case 8:
    case 0xC:
    case 0xD:
      v10 = *(_DWORD *)(a2 + 16);
      v12 = v10 > 0xFFFFFFDF || (v10 - 1) < 0x20;
      v13 = v10 + 127;
      if (v10 <= 0)
        v13 = 31 - v10;
      if (v12)
      {
        v14 = v13 & 0x7F;
        if (v14 != 127)
        {
          v9 = (char)(31 - v14);
          if ((v13 & 0x60) == 0)
            v9 = v14 + 1;
LABEL_16:
          *(_DWORD *)(a2 + 16) = v9;
          return result;
        }
      }
      if (v12)
      {
        v58 = v10 + 127;
        if (v10 <= 0)
          v58 = 31 - v10;
        v59 = v58 & 0x7F;
        if (v59 == 127)
        {
          v9 = 0;
        }
        else if ((v58 & 0x60) != 0)
        {
          v9 = (char)(31 - v59);
        }
        else
        {
          v9 = v59 + 1;
        }
        goto LABEL_16;
      }
      return result;
    case 0xB:
      v29 = *(_DWORD *)(a2 + 16);
      v31 = v29 > 0xFFFFFFDF || (v29 - 1) < 0x20;
      v32 = v29 + 127;
      if (v29 <= 0)
        v32 = 31 - v29;
      if (v31)
      {
        v33 = v32 & 0x7F;
        if (v33 != 127)
        {
          v34 = (char)(31 - v33);
          if ((v32 & 0x60) == 0)
            v34 = v33 + 1;
          goto LABEL_51;
        }
      }
      if (v31)
      {
        if (v29 <= 0)
          v74 = 31 - v29;
        else
          v74 = v29 + 127;
        v75 = v74 & 0x7F;
        if (v75 == 127)
        {
          v34 = 0;
        }
        else if ((v74 & 0x60) != 0)
        {
          v34 = (char)(31 - v75);
        }
        else
        {
          v34 = v75 + 1;
        }
LABEL_51:
        *(_DWORD *)(a2 + 16) = v34;
      }
      v35 = *(_DWORD *)(a2 + 20);
      v37 = v35 > 0xFFFFFFDF || (v35 - 1) < 0x20;
      v38 = v35 + 127;
      if (v35 <= 0)
        v38 = 31 - v35;
      if (v37)
      {
        v39 = v38 & 0x7F;
        if (v39 != 127)
        {
          v40 = (char)(31 - v39);
          if ((v38 & 0x60) == 0)
            v40 = v39 + 1;
LABEL_64:
          *(_DWORD *)(a2 + 20) = v40;
          return result;
        }
      }
      if (v37)
      {
        v76 = v35 + 127;
        if (v35 <= 0)
          v76 = 31 - v35;
        v77 = v76 & 0x7F;
        if (v77 == 127)
        {
          v40 = 0;
        }
        else if ((v76 & 0x60) != 0)
        {
          v40 = (char)(31 - v77);
        }
        else
        {
          v40 = v77 + 1;
        }
        goto LABEL_64;
      }
      return result;
    default:
      return result;
  }
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::StackSlot *,void JSC::B3::Air::Inst::forEachDef<JSC::B3::Air::StackSlot *,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::executeInst(void)::{lambda(JSC::B3::Air::StackSlot *,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::executeInst(void)::{lambda(JSC::B3::Air::StackSlot *,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::StackSlot *&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::executeInst(void)::{lambda(JSC::B3::Air::StackSlot *,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t result, int *a2, char a3)
{
  uint64_t v4;
  int v5;

  if (*((_BYTE *)a2 + 8) == 9)
  {
    v4 = *(_QWORD *)a2;
    if ((a3 & 0xFC) != 4
    {
      v5 = a2[3];
    }
    else
    {
      v5 = *a2;
    }
    *(_QWORD *)a2 = v4;
    *((_WORD *)a2 + 4) = 521;
    a2[3] = v5;
    *((_QWORD *)a2 + 2) = 0;
    *((_BYTE *)a2 + 24) = 0;
  }
  return result;
}

uint64_t JSC::B3::Air::`anonymous namespace'::FixObviousSpills::executeInst(void)::{lambda(JSC::B3::Air::StackSlot *,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t result, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v2 = *(char **)(result + 40);
  v3 = *(unsigned int *)(result + 52);
  v4 = &v2[16 * v3];
  if ((_DWORD)v3)
  {
    LODWORD(v3) = 0;
    v5 = v4;
    v6 = v4;
    do
    {
      if (*(_QWORD *)v2 == a2)
      {
        v16 = v2;
        if (v6 != (char *)(*(_QWORD *)(result + 40) + 16 * *(unsigned int *)(result + 52)))
        {
          if (v5 == v2)
          {
            v16 = v6;
          }
          else
          {
            if (v5 <= v6)
            {
              v29 = 0;
              v23 = (v2 - v5) >> 4;
              do
              {
                *(_OWORD *)&v6[((v2 - v5) & 0xFFFFFFFFFFFFFFF0) - 16 + v29] = *(_OWORD *)&v2[v29 - 16];
                v29 -= 16;
              }
              while (&v2[v29] != v5);
            }
            else
            {
              v20 = v6;
              v21 = v5;
              do
              {
                v22 = *(_OWORD *)v21;
                v21 += 16;
                *(_OWORD *)v20 = v22;
                v20 += 16;
              }
              while (v21 != v2);
              v23 = (v2 - v5) >> 4;
            }
            v16 = &v6[16 * v23];
          }
        }
        v5 = v2 + 16;
        LODWORD(v3) = v3 + 1;
        v6 = v16;
      }
      v2 += 16;
    }
    while (v2 < v4);
    v2 = *(char **)(result + 40);
    v7 = *(unsigned int *)(result + 52);
    v4 = v6;
  }
  else
  {
    v7 = 0;
    v5 = &v2[16 * v3];
  }
  v8 = &v2[16 * v7];
  if (v5 != v8)
  {
    if (v5 <= v4)
    {
      v28 = &v4[((v8 - v5) & 0xFFFFFFFFFFFFFFF0) - 16];
      do
      {
        *(_OWORD *)v28 = *((_OWORD *)v8 - 1);
        v28 -= 16;
        v8 -= 16;
      }
      while (v8 != v5);
    }
    else
    {
      do
      {
        v17 = *(_OWORD *)v5;
        v5 += 16;
        *(_OWORD *)v4 = v17;
        v4 += 16;
      }
      while (v5 != v8);
    }
  }
  *(_DWORD *)(result + 52) -= v3;
  v9 = *(char **)(result + 56);
  v10 = *(unsigned int *)(result + 68);
  v11 = &v9[16 * v10];
  if ((_DWORD)v10)
  {
    LODWORD(v10) = 0;
    v12 = v11;
    v13 = v11;
    do
    {
      if (*(_QWORD *)v9 == a2)
      {
        v18 = v9;
        if (v13 != (char *)(*(_QWORD *)(result + 56) + 16 * *(unsigned int *)(result + 68)))
        {
          if (v12 == v9)
          {
            v18 = v13;
          }
          else
          {
            if (v12 <= v13)
            {
              v31 = 0;
              v27 = (v9 - v12) >> 4;
              do
              {
                *(_OWORD *)&v13[((v9 - v12) & 0xFFFFFFFFFFFFFFF0) - 16 + v31] = *(_OWORD *)&v9[v31 - 16];
                v31 -= 16;
              }
              while (&v9[v31] != v12);
            }
            else
            {
              v24 = v13;
              v25 = v12;
              do
              {
                v26 = *(_OWORD *)v25;
                v25 += 16;
                *(_OWORD *)v24 = v26;
                v24 += 16;
              }
              while (v25 != v9);
              v27 = (v9 - v12) >> 4;
            }
            v18 = &v13[16 * v27];
          }
        }
        v12 = v9 + 16;
        LODWORD(v10) = v10 + 1;
        v13 = v18;
      }
      v9 += 16;
    }
    while (v9 < v11);
    v9 = *(char **)(result + 56);
    v14 = *(unsigned int *)(result + 68);
    v11 = v13;
  }
  else
  {
    v14 = 0;
    v12 = &v9[16 * v10];
  }
  v15 = &v9[16 * v14];
  if (v12 != v15)
  {
    if (v12 <= v11)
    {
      v30 = &v11[((v15 - v12) & 0xFFFFFFFFFFFFFFF0) - 16];
      do
      {
        *(_OWORD *)v30 = *((_OWORD *)v15 - 1);
        v30 -= 16;
        v15 -= 16;
      }
      while (v15 != v12);
    }
    else
    {
      do
      {
        v19 = *(_OWORD *)v12;
        v12 += 16;
        *(_OWORD *)v11 = v19;
        v11 += 16;
      }
      while (v12 != v15);
    }
  }
  *(_DWORD *)(result + 68) -= v10;
  return result;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::StackSlot *,void JSC::B3::Air::Inst::forEachDef<JSC::B3::Air::StackSlot *,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::executeInst(void)::{lambda(JSC::B3::Air::StackSlot *,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::executeInst(void)::{lambda(JSC::B3::Air::StackSlot *,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::StackSlot *&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#2}>(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::executeInst(void)::{lambda(JSC::B3::Air::StackSlot *,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t result, int *a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;

  if (*((_BYTE *)a2 + 8) == 9)
  {
    v3 = *(_QWORD *)a2;
    if ((a3 - 8) >= 3
      || (v5 = *(_QWORD *)a2,
          v6 = a2,
    {
      v4 = a2[3];
    }
    else
    {
      v4 = *v6;
    }
    *(_QWORD *)a2 = v3;
    *((_WORD *)a2 + 4) = 521;
    a2[3] = v4;
    *((_QWORD *)a2 + 2) = 0;
    *((_BYTE *)a2 + 24) = 0;
  }
  return result;
}

_OWORD *_ZZN3JSC2B33Air12_GLOBAL__N_116FixObviousSpills11executeInstEvENKUlRKT_E_clINS3_8RegConstEEEDaS6_(uint64_t a1, _OWORD *a2)
{
  _OWORD *result;
  uint64_t v4;

  result = (_OWORD *)(a1 + 24);
  v4 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 32))
  {
    *(_OWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 36)) = *result;
  }
  else
  {
    *(_OWORD *)(*(_QWORD *)result + 16 * v4) = *a2;
  }
  ++*(_DWORD *)(a1 + 36);
  return result;
}

_OWORD *_ZZN3JSC2B33Air12_GLOBAL__N_116FixObviousSpills11executeInstEvENKUlRKT_E_clINS3_9SlotConstEEEDaS6_(uint64_t a1, _OWORD *a2)
{
  _OWORD *result;
  uint64_t v4;

  result = (_OWORD *)(a1 + 40);
  v4 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 48))
  {
    *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * *(unsigned int *)(a1 + 52)) = *result;
  }
  else
  {
    *(_OWORD *)(*(_QWORD *)result + 16 * v4) = *a2;
  }
  ++*(_DWORD *)(a1 + 52);
  return result;
}

_OWORD *_ZZN3JSC2B33Air12_GLOBAL__N_116FixObviousSpills11executeInstEvENKUlRKT_E_clINS3_7RegSlotEEEDaS6_(uint64_t a1, _OWORD *a2)
{
  _OWORD *result;
  uint64_t v4;

  result = (_OWORD *)(a1 + 56);
  v4 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 64))
  {
    *(_OWORD *)(*(_QWORD *)(a1 + 56) + 16 * *(unsigned int *)(a1 + 68)) = *result;
  }
  else
  {
    *(_OWORD *)(*(_QWORD *)result + 16 * v4) = *a2;
  }
  ++*(_DWORD *)(a1 + 68);
  return result;
}

uint64_t WTF::Vector<JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 16 * v10;
      v20 = (__int128 *)v5;
      do
      {
        v21 = *v20++;
        *v11++ = v21;
        v19 -= 16;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = 16 * v8;
        v18 = (__int128 *)v7;
        do
        {
          v19 = *v18++;
          *v9++ = v19;
          v17 -= 16;
        }
        while (v17);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst const&)#1} &,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst*,false>(uint64_t result, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  unsigned __int8 v9;
  _BYTE *v10;
  _OWORD *v11;
  uint64_t v12;
  unsigned int v13;
  __int128 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  _OWORD *v18;
  uint64_t v19;
  unsigned int v20;
  __int128 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  _OWORD *v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  __int128 v34;
  __int128 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  __int128 v38;
  __int128 v39;
  unsigned __int8 v40;
  __int128 v41;
  unsigned __int8 v42;
  __int128 v43;
  __int128 v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned __int8 v48;
  __int128 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  uint64_t v53;
  _OWORD *v54;
  _OWORD *v55;
  uint64_t v56;
  _OWORD *v57;
  _OWORD *v58;
  unsigned __int8 v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 *v66;
  unint64_t v67;
  unsigned __int8 *v68;
  unint64_t v69;
  char v70;
  unsigned __int8 v71;
  BOOL v72;
  uint64_t v73;
  unsigned __int8 *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[7];
  __int128 v86;

  while (2)
  {
    v4 = 1 - a3;
LABEL_2:
    v5 = v4;
    v6 = (uint64_t)a2 - result;
    v7 = ((uint64_t)a2 - result) >> 4;
    switch(v7)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v8 = a2 - 1;
        v46 = *((_BYTE *)a2 - 16);
        if ((v46 & 0x7Fu) < (*(_BYTE *)result & 0x7Fu))
          goto LABEL_80;
        if (((*(_BYTE *)result ^ v46) & 0x7F) == 0 && *((_QWORD *)a2 - 1) < *(_QWORD *)(result + 8))
          goto LABEL_80;
        return result;
      case 3uLL:
        v8 = (_OWORD *)(result + 16);
        v24 = *(_BYTE *)(result + 16);
        v10 = a2 - 1;
        v25 = *(_QWORD *)(result + 24);
        v26 = v24 & 0x7F;
        if (v26 < (*(_BYTE *)result & 0x7Fu)
          || (((*(_BYTE *)result ^ v24) & 0x7F) == 0 ? (v27 = v25 < *(_QWORD *)(result + 8)) : (v27 = 0), v27))
        {
          v48 = *((_BYTE *)a2 - 16);
          if ((v48 & 0x7Fu) >= v26 && (((v48 ^ v24) & 0x7F) != 0 || *((_QWORD *)a2 - 1) >= v25))
          {
            v84 = *(_OWORD *)result;
            *(_OWORD *)result = *v8;
            *v8 = v84;
            v52 = *(_BYTE *)(result + 16);
            if ((*v10 & 0x7Fu) >= (v52 & 0x7Fu)
              && (((v52 ^ *v10) & 0x7F) != 0 || *((_QWORD *)a2 - 1) >= *(_QWORD *)(result + 24)))
            {
              return result;
            }
            v49 = *v8;
            *v8 = *(_OWORD *)v10;
          }
          else
          {
            v81 = *(_OWORD *)result;
            *(_OWORD *)result = *(_OWORD *)v10;
            v49 = v81;
          }
          *(_OWORD *)v10 = v49;
          return result;
        }
        if ((*v10 & 0x7Fu) < v26)
          goto LABEL_70;
        if (((*v10 ^ v24) & 0x7F) == 0)
        {
          v28 = *((_QWORD *)a2 - 1);
          goto LABEL_69;
        }
        return result;
      case 4uLL:
        v8 = (_OWORD *)(result + 16);
        v17 = *(_BYTE *)(result + 16);
        v10 = (_BYTE *)(result + 32);
        v18 = a2 - 1;
        v19 = *(_QWORD *)(result + 24);
        v20 = v17 & 0x7F;
        if (v20 >= (*(_BYTE *)result & 0x7Fu)
          && (((*(_BYTE *)result ^ v17) & 0x7F) != 0 || v19 >= *(_QWORD *)(result + 8)))
        {
          if ((*v10 & 0x7Fu) < v20 || ((*v10 ^ v17) & 0x7F) == 0 && *(_QWORD *)(result + 40) < v19)
          {
            v22 = *v8;
            *v8 = *(_OWORD *)v10;
            *(_OWORD *)v10 = v22;
            v23 = *(_BYTE *)(result + 16);
            if ((v23 & 0x7Fu) < (*(_BYTE *)result & 0x7Fu)
              || ((*(_BYTE *)result ^ v23) & 0x7F) == 0 && *(_QWORD *)(result + 24) < *(_QWORD *)(result + 8))
            {
              v76 = *(_OWORD *)result;
              *(_OWORD *)result = *v8;
              *v8 = v76;
            }
          }
LABEL_62:
          v42 = *(_BYTE *)(result + 32);
          if ((*(_BYTE *)v18 & 0x7Fu) < (v42 & 0x7Fu)
            || ((v42 ^ *(_BYTE *)v18) & 0x7F) == 0 && *((_QWORD *)a2 - 1) < *(_QWORD *)(result + 40))
          {
            v43 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *v18;
            *v18 = v43;
            goto LABEL_66;
          }
          return result;
        }
        v40 = *(_BYTE *)(result + 32);
        if ((v40 & 0x7Fu) >= v20 && (((v40 ^ v17) & 0x7F) != 0 || *(_QWORD *)(result + 40) >= v19))
        {
          v83 = *(_OWORD *)result;
          *(_OWORD *)result = *v8;
          *v8 = v83;
          v51 = *(_BYTE *)(result + 16);
          if ((v40 & 0x7Fu) >= (v51 & 0x7Fu)
            && (((v51 ^ v40) & 0x7F) != 0 || *(_QWORD *)(result + 40) >= *(_QWORD *)(result + 24)))
          {
            goto LABEL_62;
          }
          v41 = *v8;
          *v8 = *(_OWORD *)v10;
        }
        else
        {
          v79 = *(_OWORD *)result;
          *(_OWORD *)result = *(_OWORD *)v10;
          v41 = v79;
        }
        *(_OWORD *)v10 = v41;
        goto LABEL_62;
      case 5uLL:
        v8 = (_OWORD *)(result + 16);
        v9 = *(_BYTE *)(result + 16);
        v10 = (_BYTE *)(result + 32);
        v11 = a2 - 1;
        v12 = *(_QWORD *)(result + 24);
        v13 = v9 & 0x7F;
        if (v13 >= (*(_BYTE *)result & 0x7Fu)
          && (((*(_BYTE *)result ^ v9) & 0x7F) != 0 || v12 >= *(_QWORD *)(result + 8)))
        {
          if ((*v10 & 0x7Fu) < v13 || ((*v10 ^ v9) & 0x7F) == 0 && *(_QWORD *)(result + 40) < v12)
          {
            v15 = *v8;
            *v8 = *(_OWORD *)v10;
            *(_OWORD *)v10 = v15;
            v16 = *(_BYTE *)(result + 16);
            if ((v16 & 0x7Fu) < (*(_BYTE *)result & 0x7Fu)
              || ((*(_BYTE *)result ^ v16) & 0x7F) == 0 && *(_QWORD *)(result + 24) < *(_QWORD *)(result + 8))
            {
              v75 = *(_OWORD *)result;
              *(_OWORD *)result = *v8;
              *v8 = v75;
            }
          }
LABEL_40:
          v31 = (_OWORD *)(result + 48);
          v32 = *(_BYTE *)(result + 48);
          v33 = *(_BYTE *)(result + 32);
          if ((v32 & 0x7Fu) < (v33 & 0x7Fu)
            || ((v33 ^ v32) & 0x7F) == 0 && *(_QWORD *)(result + 56) < *(_QWORD *)(result + 40))
          {
            v34 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *v31;
            *v31 = v34;
            if ((*v10 & 0x7Fu) < (*(_BYTE *)v8 & 0x7Fu)
              || ((*(_BYTE *)v8 ^ *v10) & 0x7F) == 0 && *(_QWORD *)(result + 40) < *(_QWORD *)(result + 24))
            {
              v35 = *v8;
              *v8 = *(_OWORD *)v10;
              *(_OWORD *)v10 = v35;
              v36 = *(_BYTE *)(result + 16);
              if ((v36 & 0x7Fu) < (*(_BYTE *)result & 0x7Fu)
                || ((*(_BYTE *)result ^ v36) & 0x7F) == 0 && *(_QWORD *)(result + 24) < *(_QWORD *)(result + 8))
              {
                v78 = *(_OWORD *)result;
                *(_OWORD *)result = *v8;
                *v8 = v78;
              }
            }
          }
          v37 = *(_BYTE *)(result + 48);
          if ((*(_BYTE *)v11 & 0x7Fu) < (v37 & 0x7Fu)
            || ((v37 ^ *(_BYTE *)v11) & 0x7F) == 0 && *((_QWORD *)a2 - 1) < *(_QWORD *)(result + 56))
          {
            v38 = *v31;
            *v31 = *v11;
            *v11 = v38;
            if ((*(_BYTE *)v31 & 0x7Fu) < (*v10 & 0x7Fu)
              || ((*v10 ^ *(_BYTE *)v31) & 0x7F) == 0 && *(_QWORD *)(result + 56) < *(_QWORD *)(result + 40))
            {
              v39 = *(_OWORD *)v10;
              *(_OWORD *)v10 = *v31;
              *v31 = v39;
LABEL_66:
              if ((*v10 & 0x7Fu) < (*(_BYTE *)v8 & 0x7Fu))
                goto LABEL_70;
              if (((*(_BYTE *)v8 ^ *v10) & 0x7F) == 0)
              {
                v25 = *(_QWORD *)(result + 24);
                v28 = *(_QWORD *)(result + 40);
LABEL_69:
                if (v28 < v25)
                {
LABEL_70:
                  v44 = *v8;
                  *v8 = *(_OWORD *)v10;
                  *(_OWORD *)v10 = v44;
                  v45 = *(_BYTE *)(result + 16);
                  if ((v45 & 0x7Fu) < (*(_BYTE *)result & 0x7Fu)
                    || ((*(_BYTE *)result ^ v45) & 0x7F) == 0 && *(_QWORD *)(result + 24) < *(_QWORD *)(result + 8))
                  {
LABEL_80:
                    v80 = *(_OWORD *)result;
                    *(_OWORD *)result = *v8;
                    *v8 = v80;
                  }
                }
              }
            }
          }
          return result;
        }
        v29 = *(_BYTE *)(result + 32);
        if ((v29 & 0x7Fu) >= v13 && (((v29 ^ v9) & 0x7F) != 0 || *(_QWORD *)(result + 40) >= v12))
        {
          v82 = *(_OWORD *)result;
          *(_OWORD *)result = *v8;
          *v8 = v82;
          v50 = *(_BYTE *)(result + 16);
          if ((v29 & 0x7Fu) >= (v50 & 0x7Fu)
            && (((v50 ^ v29) & 0x7F) != 0 || *(_QWORD *)(result + 40) >= *(_QWORD *)(result + 24)))
          {
            goto LABEL_40;
          }
          v30 = *v8;
          *v8 = *(_OWORD *)v10;
        }
        else
        {
          v77 = *(_OWORD *)result;
          *(_OWORD *)result = *(_OWORD *)v10;
          v30 = v77;
        }
        *(_OWORD *)v10 = v30;
        goto LABEL_40;
      default:
        v53 = a4;
        v73 = result;
        v74 = (unsigned __int8 *)a2;
        if (v6 > 383)
        {
          if (v5 == 1)
          v66 = a2 - 1;
          v67 = v7 >> 1;
          v68 = (unsigned __int8 *)(result + 16 * (v7 >> 1));
          if ((unint64_t)v6 >= 0x801)
          {
            v86 = *(_OWORD *)v73;
            *(_OWORD *)v73 = *(_OWORD *)v68;
            *(_OWORD *)v68 = v86;
          }
          else
          {
          }
          if ((v53 & 1) == 0)
          {
            v71 = *(_BYTE *)(v73 - 16);
            if ((v71 & 0x7Fu) >= (*(_BYTE *)v73 & 0x7Fu)
              && (((*(_BYTE *)v73 ^ v71) & 0x7F) != 0 || *(_QWORD *)(v73 - 8) >= *(_QWORD *)(v73 + 8)))
            {
              goto LABEL_137;
            }
          }
          LOBYTE(a4) = v53;
          if ((v70 & 1) == 0)
            goto LABEL_129;
          {
            v4 = v5 + 1;
            a2 = v74;
            a4 = v53;
            result = v69 + 16;
            if (!v72)
            {
LABEL_129:
              result = v69 + 16;
LABEL_137:
              a4 = 0;
              a3 = -v5;
              a2 = v74;
              continue;
            }
            goto LABEL_2;
          }
          a3 = -v5;
          a2 = (_OWORD *)v69;
          result = v73;
          a4 = v53;
          if (v72)
            return result;
          continue;
        }
        if ((a4 & 1) == 0)
        v54 = a2;
        if ((_OWORD *)result != a2)
        {
          v55 = (_OWORD *)(result + 16);
          if ((_OWORD *)(result + 16) != a2)
          {
            v56 = 0;
            v57 = (_OWORD *)result;
            do
            {
              v58 = v55;
              v59 = *((_BYTE *)v57 + 16);
              v60 = *((_QWORD *)v57 + 3);
              result = *(_BYTE *)v57 & 0x7F;
              if ((v59 & 0x7Fu) < result
                || ((result = *((_QWORD *)v57 + 1), ((*(_BYTE *)v57 ^ v59) & 0x7F) == 0)
                  ? (v61 = v60 < result)
                  : (v61 = 0),
                    v61))
              {
                *(_DWORD *)v85 = *(_DWORD *)((char *)v57 + 17);
                *(_DWORD *)&v85[3] = *((_DWORD *)v57 + 5);
                *v58 = *v57;
                v62 = v73;
                if (v57 != (_OWORD *)v73)
                {
                  v63 = v56;
                  do
                  {
                    v64 = (_OWORD *)(v73 + v63);
                    result = *(_BYTE *)(v73 + v63 - 16) & 0x7F;
                    if ((v59 & 0x7Fu) >= result)
                    {
                      result = *((_QWORD *)v64 - 1);
                      if (((*(_BYTE *)(v73 + v63 - 16) ^ v59) & 0x7F) != 0 || v60 >= result)
                      {
                        v62 = v73 + v63;
                        goto LABEL_120;
                      }
                    }
                    *v64 = *(_OWORD *)(v73 + v63 - 16);
                    v63 -= 16;
                  }
                  while (v63);
                  v62 = v73;
LABEL_120:
                  v54 = a2;
                }
                *(_BYTE *)v62 = v59;
                *(_DWORD *)(v62 + 4) = *(_DWORD *)&v85[3];
                *(_DWORD *)(v62 + 1) = *(_DWORD *)v85;
                *(_QWORD *)(v62 + 8) = v60;
              }
              v55 = v58 + 1;
              v56 += 16;
              v57 = v58;
            }
            while (v58 + 1 != v54);
          }
        }
        return result;
    }
  }
}

unsigned __int8 *std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst const&)#1} &,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst*>(unsigned __int8 *result, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  _BYTE v17[7];

  if (result != a2)
  {
    v2 = result + 16;
    if (result + 16 != a2)
    {
      v3 = 0;
      v4 = -1;
      v5 = 1;
      v6 = result;
      while (1)
      {
        v7 = v5;
        v8 = *v2;
        v9 = *((_QWORD *)v6 + 3);
        v10 = *v2 & 0x7F;
        if (v10 < (*v6 & 0x7Fu))
          break;
        if (((*v6 ^ v8) & 0x7F) == 0 && v9 < *((_QWORD *)v6 + 1))
          break;
LABEL_20:
        v6 += 16;
        v5 = v7 + 1;
        v2 = &result[16 * v7 + 16];
        --v4;
        v3 = v7;
        if (v2 == a2)
          return result;
      }
      *(_DWORD *)v17 = *(_DWORD *)(v6 + 17);
      *(_DWORD *)&v17[3] = *((_DWORD *)v6 + 5);
      *(_OWORD *)v2 = *(_OWORD *)&result[16 * v3];
      v12 = v4;
      v13 = v6;
      do
      {
        v14 = *(v13 - 16);
        if (v10 >= (v14 & 0x7Fu) && (((v14 ^ v8) & 0x7F) != 0 || v9 >= *((_QWORD *)v13 - 1)))
        {
          *v13 = v8;
          *(_DWORD *)(v13 + 1) = *(_DWORD *)v17;
          *((_DWORD *)v13 + 1) = *(_DWORD *)&v17[3];
          *((_QWORD *)v13 + 1) = v9;
          goto LABEL_20;
        }
        *(_OWORD *)v13 = *((_OWORD *)v13 - 1);
        v13 -= 16;
      }
      while (!__CFADD__(v12++, 1));
      __break(1u);
    }
  }
  return result;
}

uint64_t std::__partial_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst const&)#1} &,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst*,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst*>(uint64_t result, _OWORD *a2, _OWORD *a3)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 v11;
  _OWORD *v12;
  BOOL v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v33;
  _BYTE v34[7];

  if ((_OWORD *)result != a2)
  {
    v4 = a2;
    v5 = result;
    v6 = (uint64_t)a2 - result;
    v7 = ((uint64_t)a2 - result) >> 4;
    if ((uint64_t)a2 - result >= 17)
    {
      v8 = (unint64_t)(v7 - 2) >> 1;
      v9 = v8 + 1;
      v10 = (unsigned __int8 *)(result + 16 * v8);
      do
      {
        v10 -= 16;
        --v9;
      }
      while (v9);
    }
    if (v4 != a3)
    {
      v11 = *(_BYTE *)v5;
      v12 = v4;
      do
      {
        if ((*(_BYTE *)v12 & 0x7Fu) < (v11 & 0x7Fu)
          || (((v11 ^ *(_BYTE *)v12) & 0x7F) == 0 ? (v13 = *((_QWORD *)v12 + 1) < *(_QWORD *)(v5 + 8)) : (v13 = 0), v13))
        {
          v14 = *v12;
          *v12 = *(_OWORD *)v5;
          *(_OWORD *)v5 = v14;
          v11 = *(_BYTE *)v5;
        }
        ++v12;
      }
      while (v12 != a3);
    }
    if (v6 >= 17)
    {
      v15 = (unint64_t)v6 >> 4;
      do
      {
        v16 = 0;
        v33 = *(_OWORD *)v5;
        v17 = v5;
        do
        {
          v18 = (_OWORD *)v17;
          v17 += 16 * v16 + 16;
          v19 = 2 * v16;
          v16 = (2 * v16) | 1;
          v20 = v19 + 2;
          if (v20 < v15)
          {
            result = *(_BYTE *)(v17 + 16) & 0x7F;
            if ((*(_BYTE *)v17 & 0x7Fu) < result
              || ((result = *(_QWORD *)(v17 + 8), ((*(_BYTE *)(v17 + 16) ^ *(_BYTE *)v17) & 0x7F) == 0)
                ? (v21 = result < *(_QWORD *)(v17 + 24))
                : (v21 = 0),
                  v21))
            {
              v17 += 16;
              v16 = v20;
            }
          }
          *v18 = *(_OWORD *)v17;
        }
        while (v16 <= (uint64_t)((unint64_t)(v15 - 2) >> 1));
        if ((_OWORD *)v17 == --v4)
        {
          *(_OWORD *)v17 = v33;
        }
        else
        {
          *(_OWORD *)v17 = *v4;
          *v4 = v33;
          v22 = v17 - v5 + 16;
          if (v22 >= 17)
          {
            v23 = ((unint64_t)v22 >> 4) - 2;
            v24 = v23 >> 1;
            v25 = v5 + 16 * (v23 >> 1);
            v26 = *(_BYTE *)v17;
            v27 = *(_QWORD *)(v17 + 8);
            v28 = *(_BYTE *)v17 & 0x7F;
            if ((*(_BYTE *)v25 & 0x7Fu) < v28
              || (((v26 ^ *(_BYTE *)v25) & 0x7F) == 0 ? (v29 = *(_QWORD *)(v25 + 8) < v27) : (v29 = 0), v29))
            {
              *(_DWORD *)&v34[3] = *(_DWORD *)(v17 + 4);
              *(_DWORD *)v34 = *(_DWORD *)(v17 + 1);
              *(_OWORD *)v17 = *(_OWORD *)v25;
              if (v23 >= 2)
              {
                while (1)
                {
                  v31 = v24 - 1;
                  v24 = (v24 - 1) >> 1;
                  v30 = v5 + 16 * v24;
                  if ((*(_BYTE *)v30 & 0x7Fu) >= v28
                    && (((*(_BYTE *)v30 ^ v26) & 0x7F) != 0 || *(_QWORD *)(v30 + 8) >= v27))
                  {
                    break;
                  }
                  *(_OWORD *)v25 = *(_OWORD *)v30;
                  v25 = v5 + 16 * v24;
                  if (v31 <= 1)
                    goto LABEL_44;
                }
              }
              v30 = v25;
LABEL_44:
              *(_BYTE *)v30 = v26;
              *(_DWORD *)(v30 + 4) = *(_DWORD *)&v34[3];
              *(_DWORD *)(v30 + 1) = *(_DWORD *)v34;
              *(_QWORD *)(v30 + 8) = v27;
            }
          }
        }
        v13 = v15-- <= 2;
      }
      while (!v13);
    }
  }
  return result;
}

__int128 *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst const&)#1} &,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst*>(__int128 *result, unsigned __int8 *a2, __int128 *a3)
{
  unsigned __int8 v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  BOOL v7;
  __int128 v8;
  __int128 v9;
  BOOL v10;
  __int128 v11;
  __int128 v12;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 1);
  v5 = *a2 & 0x7F;
  if (v5 < (*(_BYTE *)result & 0x7Fu)
    || (((*(_BYTE *)result ^ v3) & 0x7F) == 0 ? (v6 = v4 < *((_QWORD *)result + 1)) : (v6 = 0), v6))
  {
    if ((*(_BYTE *)a3 & 0x7Fu) < v5
      || (((*(_BYTE *)a3 ^ v3) & 0x7F) == 0 ? (v10 = *((_QWORD *)a3 + 1) < v4) : (v10 = 0), v10))
    {
      v12 = *result;
      *result = *a3;
    }
    else
    {
      v11 = *result;
      *result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v11;
      if ((*(_BYTE *)a3 & 0x7Fu) >= (*a2 & 0x7Fu)
        && (((*a2 ^ *(_BYTE *)a3) & 0x7F) != 0 || *((_QWORD *)a3 + 1) >= *((_QWORD *)a2 + 1)))
      {
        return result;
      }
      v12 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *a3;
    }
    *a3 = v12;
    return result;
  }
  if ((*(_BYTE *)a3 & 0x7Fu) < v5
    || (((*(_BYTE *)a3 ^ v3) & 0x7F) == 0 ? (v7 = *((_QWORD *)a3 + 1) < v4) : (v7 = 0), v7))
  {
    v8 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *a3;
    *a3 = v8;
    if ((*a2 & 0x7Fu) < (*(_BYTE *)result & 0x7Fu)
      || ((*(_BYTE *)result ^ *a2) & 0x7F) == 0 && *((_QWORD *)a2 + 1) < *((_QWORD *)result + 1))
    {
      v9 = *result;
      *result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v9;
    }
  }
  return result;
}

unint64_t std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst *,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst const&)#1} &>(char *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  int v9;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  int v13;
  unsigned __int8 *v15;
  BOOL v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  int v20;
  _BYTE v24[7];
  __int128 v25;

  v2 = *a1;
  *(_DWORD *)v24 = *(_DWORD *)(a1 + 1);
  *(_DWORD *)&v24[3] = *((_DWORD *)a1 + 1);
  v3 = *((_QWORD *)a1 + 1);
  v4 = *(a2 - 16);
  v5 = *a1 & 0x7F;
  if (v5 < (v4 & 0x7F)
    || ((v4 = (v4 ^ v2) & 0x7F, !(_DWORD)v4) ? (v6 = v3 < *((_QWORD *)a2 - 1)) : (v6 = 0), v6))
  {
    v11 = (unsigned __int8 *)(a1 + 16);
    while (v11 != a2)
    {
      v4 = (unint64_t)v11;
      v12 = *v11;
      if (v5 >= (v12 & 0x7Fu))
      {
        v13 = (v12 ^ v2) & 0x7F;
        v11 = (unsigned __int8 *)(v4 + 16);
        if (v13 || v3 >= *(_QWORD *)(v4 + 8))
          continue;
      }
      goto LABEL_23;
    }
    goto LABEL_54;
  }
  v7 = (unsigned __int8 *)(a1 + 16);
  do
  {
    v4 = (unint64_t)v7;
    if (v7 >= a2)
      break;
    v8 = *v7;
    if (v5 < (v8 & 0x7Fu))
      break;
    v9 = (v8 ^ v2) & 0x7F;
    v7 = (unsigned __int8 *)(v4 + 16);
  }
  while (v9 || v3 >= *(_QWORD *)(v4 + 8));
LABEL_23:
  v15 = a2;
  if (v4 < (unint64_t)a2)
  {
    if (a2 == (unsigned __int8 *)a1)
      goto LABEL_54;
    v15 = a2 - 16;
    while (v5 < (*v15 & 0x7Fu) || ((*v15 ^ v2) & 0x7F) == 0 && v3 < *((_QWORD *)v15 + 1))
    {
      v17 = v15 == (unsigned __int8 *)a1;
      v15 -= 16;
      if (v17)
        goto LABEL_54;
    }
  }
LABEL_35:
  if (v4 >= (unint64_t)v15)
    goto LABEL_55;
  v25 = *(_OWORD *)v4;
  *(_OWORD *)v4 = *(_OWORD *)v15;
  *(_OWORD *)v15 = v25;
  v18 = (unsigned __int8 *)(v4 + 16);
  while (v18 != a2)
  {
    v4 = (unint64_t)v18;
    v19 = *v18;
    if (v5 >= (v19 & 0x7Fu))
    {
      v20 = (v19 ^ v2) & 0x7F;
      v18 = (unsigned __int8 *)(v4 + 16);
      if (v20 || v3 >= *(_QWORD *)(v4 + 8))
        continue;
    }
    if (v15 == (unsigned __int8 *)a1)
      break;
    v15 -= 16;
    while (v5 < (*v15 & 0x7Fu) || ((*v15 ^ v2) & 0x7F) == 0 && v3 < *((_QWORD *)v15 + 1))
    {
      v17 = v15 == (unsigned __int8 *)a1;
      v15 -= 16;
      if (v17)
        goto LABEL_54;
    }
    goto LABEL_35;
  }
LABEL_54:
  __break(1u);
LABEL_55:
  if ((char *)(v4 - 16) != a1)
    *(_OWORD *)a1 = *(_OWORD *)(v4 - 16);
  *(_BYTE *)(v4 - 16) = v2;
  *(_DWORD *)(v4 - 12) = *(_DWORD *)&v24[3];
  *(_DWORD *)(v4 - 15) = *(_DWORD *)v24;
  *(_QWORD *)(v4 - 8) = v3;
  return v4;
}

unint64_t std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst *,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst const&)#1} &>(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  _BYTE *v3;
  unsigned __int8 v4;
  unsigned int v5;
  unsigned __int8 v6;
  unint64_t v8;
  _BYTE *v9;
  unsigned __int8 v10;
  int v11;
  _BYTE *v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE *v18;
  unsigned __int8 v19;
  int v20;
  _BYTE v23[7];
  __int128 v24;

  v4 = *(_BYTE *)a1;
  *(_DWORD *)v23 = *(_DWORD *)(a1 + 1);
  *(_DWORD *)&v23[3] = *(_DWORD *)(a1 + 4);
  v5 = a1 + 16;
  if ((_BYTE *)(a1 + 16) == a2)
    goto LABEL_10;
  v3 = 0;
  v2 = *(_QWORD *)(a1 + 8);
  v5 = v4 & 0x7F;
  while (1)
  {
    v6 = v3[a1 + 16];
    if ((v6 & 0x7Fu) >= v5 && (((v6 ^ v4) & 0x7F) != 0 || *(_QWORD *)&v3[a1 + 24] >= v2))
      break;
    v3 += 16;
    if (&v3[a1 + 16] == a2)
      goto LABEL_10;
  }
  while (1)
  {
    v8 = (unint64_t)&v3[a1 + 16];
    v9 = a2 - 16;
    if (!v3)
      break;
    while (1)
    {
      v3 = v9;
      if (v9 + 16 == (_BYTE *)a1)
        break;
      v10 = *v9;
      if ((*v3 & 0x7Fu) >= v5)
      {
        v11 = (v10 ^ v4) & 0x7F;
        v9 = v3 - 16;
        if (v11 || *((_QWORD *)v3 + 1) >= v2)
          continue;
      }
      goto LABEL_26;
    }
LABEL_10:
    __break(1u);
  }
  while (1)
  {
    v3 = v9;
    v14 = v9 + 16;
    if (v8 >= (unint64_t)v14)
      break;
    if ((*v3 & 0x7Fu) >= v5)
    {
      v9 = v3 - 16;
      if (((*v3 ^ v4) & 0x7F) != 0 || *((_QWORD *)v3 + 1) >= v2)
        continue;
    }
    goto LABEL_26;
  }
  v3 = v14;
LABEL_26:
  v15 = v8;
  if (v8 < (unint64_t)v3)
  {
    v16 = v3;
LABEL_28:
    v24 = *(_OWORD *)v15;
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *(_OWORD *)v16 = v24;
    while (1)
    {
      v15 += 16;
      if ((_BYTE *)v15 == a2)
        goto LABEL_10;
      if ((*(_BYTE *)v15 & 0x7Fu) >= v5 && (((*(_BYTE *)v15 ^ v4) & 0x7F) != 0 || *(_QWORD *)(v15 + 8) >= v2))
      {
        v18 = v16 - 16;
        while (1)
        {
          v16 = v18;
          if (v18 + 16 == (_BYTE *)a1)
            goto LABEL_10;
          v19 = *v18;
          if ((*v16 & 0x7Fu) >= v5)
          {
            v20 = (v19 ^ v4) & 0x7F;
            v18 = v16 - 16;
            if (v20 || *((_QWORD *)v16 + 1) >= v2)
              continue;
          }
          if (v15 < (unint64_t)v16)
            goto LABEL_28;
          goto LABEL_44;
        }
      }
    }
  }
LABEL_44:
  if (v15 - 16 != a1)
    *(_OWORD *)a1 = *(_OWORD *)(v15 - 16);
  *(_BYTE *)(v15 - 16) = v4;
  *(_DWORD *)(v15 - 12) = *(_DWORD *)&v23[3];
  *(_DWORD *)(v15 - 15) = *(_DWORD *)v23;
  *(_QWORD *)(v15 - 8) = v2;
  return v15 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst const&)#1} &,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  unsigned __int8 v7;
  BOOL v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  __int128 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  __int128 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  __int128 v34;
  unsigned __int8 v35;
  __int128 v36;
  _BYTE v37[7];

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 16);
      v7 = *(_BYTE *)(a2 - 16);
      if ((v7 & 0x7Fu) < (*(_BYTE *)a1 & 0x7Fu)
        || (((*(_BYTE *)a1 ^ v7) & 0x7F) == 0 ? (v8 = *(_QWORD *)(a2 - 8) < *(_QWORD *)(a1 + 8)) : (v8 = 0), v8))
      {
        v9 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v9;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      v22 = (__int128 *)(a1 + 16);
      v23 = (__int128 *)(a1 + 32);
      v24 = (__int128 *)(a1 + 48);
      v25 = (__int128 *)(a2 - 16);
      v26 = *(_BYTE *)(a2 - 16);
      v27 = *(_BYTE *)(a1 + 48);
      if ((v26 & 0x7Fu) >= (v27 & 0x7Fu))
      {
        result = 1;
        if (((v27 ^ v26) & 0x7F) != 0 || *(_QWORD *)(a2 - 8) >= *(_QWORD *)(a1 + 56))
          return result;
      }
      v28 = *v24;
      *v24 = *v25;
      *v25 = v28;
      v29 = *(_BYTE *)(a1 + 48);
      v30 = *(_BYTE *)(a1 + 32);
      if ((v29 & 0x7Fu) >= (v30 & 0x7Fu))
      {
        result = 1;
        if (((v30 ^ v29) & 0x7F) != 0 || *(_QWORD *)(a1 + 56) >= *(_QWORD *)(a1 + 40))
          return result;
      }
      v31 = *v23;
      *v23 = *v24;
      *v24 = v31;
      v32 = *(_BYTE *)(a1 + 32);
      v33 = *(_BYTE *)(a1 + 16);
      if ((v32 & 0x7Fu) >= (v33 & 0x7Fu))
      {
        result = 1;
        if (((v33 ^ v32) & 0x7F) != 0 || *(_QWORD *)(a1 + 40) >= *(_QWORD *)(a1 + 24))
          return result;
      }
      v34 = *v22;
      *v22 = *v23;
      *v23 = v34;
      v35 = *(_BYTE *)(a1 + 16);
      if ((v35 & 0x7Fu) >= (*(_BYTE *)a1 & 0x7Fu))
      {
        result = 1;
        if (((*(_BYTE *)a1 ^ v35) & 0x7F) != 0 || *(_QWORD *)(a1 + 24) >= *(_QWORD *)(a1 + 8))
          return result;
      }
      v36 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *v22;
      *v22 = v36;
      return 1;
    default:
      v10 = a1 + 32;
      v11 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_BYTE *)v11;
    v15 = *(_QWORD *)(v11 + 8);
    v16 = *(_BYTE *)v11 & 0x7F;
    if (v16 < (*(_BYTE *)v10 & 0x7Fu)
      || (((*(_BYTE *)v10 ^ v14) & 0x7F) == 0 ? (v17 = v15 < *(_QWORD *)(v10 + 8)) : (v17 = 0), v17))
    {
      *(_DWORD *)v37 = *(_DWORD *)(v11 + 1);
      *(_DWORD *)&v37[3] = *(_DWORD *)(v11 + 4);
      *(_OWORD *)v11 = *(_OWORD *)v10;
      v18 = a1;
      if (v10 != a1)
      {
        v19 = v12;
        do
        {
          v20 = *(_BYTE *)(a1 + v19 + 16);
          if (v16 >= (v20 & 0x7Fu) && (((v20 ^ v14) & 0x7F) != 0 || v15 >= *(_QWORD *)(a1 + v19 + 24)))
          {
            v18 = a1 + v19 + 32;
            goto LABEL_27;
          }
          *(_OWORD *)(a1 + v19 + 32) = *(_OWORD *)(a1 + v19 + 16);
          v19 -= 16;
        }
        while (v19 != -32);
        v18 = a1;
      }
LABEL_27:
      *(_BYTE *)v18 = v14;
      *(_DWORD *)(v18 + 1) = *(_DWORD *)v37;
      *(_DWORD *)(v18 + 4) = *(_DWORD *)&v37[3];
      *(_QWORD *)(v18 + 8) = v15;
      if (++v13 == 8)
        return v11 + 16 == a2;
    }
    v10 = v11;
    v12 += 16;
    v11 += 16;
    if (v11 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst const&)#1} &,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  BOOL v9;
  BOOL v10;

  if ((*(_BYTE *)a4 & 0x7Fu) < (*(_BYTE *)a3 & 0x7Fu)
    || (((*(_BYTE *)a3 ^ *(_BYTE *)a4) & 0x7F) == 0 ? (v9 = *(_QWORD *)(a4 + 8) < *(_QWORD *)(a3 + 8)) : (v9 = 0), v9))
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if ((*(_BYTE *)a3 & 0x7Fu) < (*(_BYTE *)a2 & 0x7Fu)
      || (((*(_BYTE *)a2 ^ *(_BYTE *)a3) & 0x7F) == 0 ? (v10 = *(_QWORD *)(a3 + 8) < *(_QWORD *)(a2 + 8)) : (v10 = 0),
          v10))
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if ((*(_BYTE *)a2 & 0x7Fu) < (*(_BYTE *)a1 & 0x7Fu)
        || ((*(_BYTE *)a1 ^ *(_BYTE *)a2) & 0x7F) == 0 && *(_QWORD *)(a2 + 8) < *(_QWORD *)(a1 + 8))
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst const&)#1} &,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegConst*>(uint64_t result, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unsigned __int8 v9;
  BOOL v10;
  unsigned __int8 v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  BOOL v19;
  _BYTE v21[7];

  if (a2 >= 2)
  {
    v3 = (uint64_t)&a3[-result];
    v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= (uint64_t)&a3[-result] >> 4)
    {
      v5 = v3 >> 3;
      v6 = (v3 >> 3) + 1;
      v7 = (char *)(result + 16 * v6);
      v8 = v5 + 2;
      if (v8 < a2)
      {
        v9 = v7[16];
        if ((*v7 & 0x7Fu) < (v9 & 0x7Fu)
          || (((v9 ^ *v7) & 0x7F) == 0 ? (v10 = *((_QWORD *)v7 + 1) < *((_QWORD *)v7 + 3)) : (v10 = 0),
              v10))
        {
          v7 += 16;
          v6 = v8;
        }
      }
      v11 = *a3;
      v12 = *a3 & 0x7F;
      if ((*v7 & 0x7Fu) >= v12)
      {
        v13 = *((_QWORD *)a3 + 1);
        if (((v11 ^ *v7) & 0x7F) != 0 || *((_QWORD *)v7 + 1) >= v13)
        {
          *(_DWORD *)v21 = *(_DWORD *)(a3 + 1);
          *(_DWORD *)&v21[3] = *((_DWORD *)a3 + 1);
          do
          {
            v15 = a3;
            a3 = (unsigned __int8 *)v7;
            *(_OWORD *)v15 = *(_OWORD *)v7;
            if (v4 < v6)
              break;
            v16 = 2 * v6;
            v6 = (2 * v6) | 1;
            v7 = (char *)(result + 16 * v6);
            v17 = v16 + 2;
            if (v17 < a2)
            {
              v18 = v7[16];
              if ((*v7 & 0x7Fu) < (v18 & 0x7Fu)
                || (((v18 ^ *v7) & 0x7F) == 0
                  ? (v19 = *((_QWORD *)v7 + 1) < *((_QWORD *)v7 + 3))
                  : (v19 = 0),
                    v19))
              {
                v7 += 16;
                v6 = v17;
              }
            }
            if ((*v7 & 0x7Fu) < v12)
              break;
          }
          while (((*v7 ^ v11) & 0x7F) != 0 || *((_QWORD *)v7 + 1) >= v13);
          *a3 = v11;
          *((_DWORD *)a3 + 1) = *(_DWORD *)&v21[3];
          *(_DWORD *)(a3 + 1) = *(_DWORD *)v21;
          *((_QWORD *)a3 + 1) = v13;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__introsort<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst const&)#1} &,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst*,false>(unint64_t *result, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  int64_t v12;
  unint64_t v13;
  __int128 v14;
  _OWORD *v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  int64_t v24;
  int64_t v25;
  __int128 v26;
  unint64_t v27;
  int64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  char *v35;
  int64_t v36;
  unint64_t v37;
  __int128 v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  __int128 *v49;
  unint64_t v50;
  unint64_t *v51;
  __int128 *v52;
  char v53;
  BOOL v54;
  unint64_t v55;
  unint64_t *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;

  while (2)
  {
    v4 = 1 - a3;
LABEL_2:
    v5 = v4;
    v6 = a2 - (char *)result;
    v7 = (a2 - (char *)result) >> 4;
    if (v7 >= 2)
    {
      switch(v7)
      {
        case 2uLL:
          v8 = a2 - 16;
          v30 = *((_QWORD *)a2 - 2);
          if (v30 < *result)
            goto LABEL_41;
          if (v30 == *result)
          {
            v28 = result[1];
            v29 = *((_QWORD *)a2 - 1);
            goto LABEL_36;
          }
          return result;
        case 3uLL:
          v8 = (char *)(result + 2);
          v31 = result[2];
          v10 = a2 - 16;
          v24 = result[3];
          if (v31 < *result || v31 == *result && v24 < (uint64_t)result[1])
          {
            v32 = *((_QWORD *)a2 - 2);
            if (v32 < v31 || v32 == v31 && *((_QWORD *)a2 - 1) < v24)
            {
              v61 = *(_OWORD *)result;
              *(_OWORD *)result = *(_OWORD *)v10;
              v33 = v61;
LABEL_50:
              *(_OWORD *)v10 = v33;
              return result;
            }
            v66 = *(_OWORD *)result;
            *(_OWORD *)result = *(_OWORD *)v8;
            *(_OWORD *)v8 = v66;
            v46 = result[2];
            if (*(_QWORD *)v10 < v46 || *(_QWORD *)v10 == v46 && *((_QWORD *)a2 - 1) < (int64_t)result[3])
            {
              v33 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *(_OWORD *)v10;
              goto LABEL_50;
            }
          }
          else
          {
            if (*(_QWORD *)v10 < v31)
              goto LABEL_33;
            if (*(_QWORD *)v10 == v31)
            {
              v25 = *((_QWORD *)a2 - 1);
              goto LABEL_32;
            }
          }
          return result;
        case 4uLL:
          v8 = (char *)(result + 2);
          v34 = result[2];
          v10 = (char *)(result + 4);
          v35 = a2 - 16;
          v36 = result[3];
          if (v34 < *result || v34 == *result && v36 < (uint64_t)result[1])
          {
            v37 = result[4];
            if (v37 < v34 || v37 == v34 && (uint64_t)result[5] < v36)
            {
              v62 = *(_OWORD *)result;
              *(_OWORD *)result = *(_OWORD *)v10;
              v38 = v62;
LABEL_58:
              *(_OWORD *)v10 = v38;
              goto LABEL_59;
            }
            v67 = *(_OWORD *)result;
            *(_OWORD *)result = *(_OWORD *)v8;
            *(_OWORD *)v8 = v67;
            v47 = result[2];
            if (v37 < v47 || v37 == v47 && (uint64_t)result[5] < (uint64_t)result[3])
            {
              v38 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *(_OWORD *)v10;
              goto LABEL_58;
            }
          }
          else if (*(_QWORD *)v10 < v34 || *(_QWORD *)v10 == v34 && (uint64_t)result[5] < v36)
          {
            v44 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v10;
            *(_OWORD *)v10 = v44;
            v45 = result[2];
            if (v45 < *result || v45 == *result && (uint64_t)result[3] < (uint64_t)result[1])
            {
              v65 = *(_OWORD *)result;
              *(_OWORD *)result = *(_OWORD *)v8;
              *(_OWORD *)v8 = v65;
            }
          }
LABEL_59:
          v39 = result[4];
          if (*(_QWORD *)v35 < v39 || *(_QWORD *)v35 == v39 && *((_QWORD *)a2 - 1) < (int64_t)result[5])
          {
            v40 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v35;
            *(_OWORD *)v35 = v40;
            goto LABEL_29;
          }
          return result;
        case 5uLL:
          v8 = (char *)(result + 2);
          v9 = result[2];
          v10 = (char *)(result + 4);
          v11 = a2 - 16;
          v12 = result[3];
          if (v9 < *result || v9 == *result && v12 < (uint64_t)result[1])
          {
            v13 = result[4];
            if (v13 < v9 || v13 == v9 && (uint64_t)result[5] < v12)
            {
              v58 = *(_OWORD *)result;
              *(_OWORD *)result = *(_OWORD *)v10;
              v14 = v58;
LABEL_11:
              *(_OWORD *)v10 = v14;
              goto LABEL_12;
            }
            v64 = *(_OWORD *)result;
            *(_OWORD *)result = *(_OWORD *)v8;
            *(_OWORD *)v8 = v64;
            v43 = result[2];
            if (v13 < v43 || v13 == v43 && (uint64_t)result[5] < (uint64_t)result[3])
            {
              v14 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *(_OWORD *)v10;
              goto LABEL_11;
            }
          }
          else if (*(_QWORD *)v10 < v9 || *(_QWORD *)v10 == v9 && (uint64_t)result[5] < v12)
          {
            v41 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v10;
            *(_OWORD *)v10 = v41;
            v42 = result[2];
            if (v42 < *result || v42 == *result && (uint64_t)result[3] < (uint64_t)result[1])
            {
              v63 = *(_OWORD *)result;
              *(_OWORD *)result = *(_OWORD *)v8;
              *(_OWORD *)v8 = v63;
            }
          }
LABEL_12:
          v15 = result + 6;
          v16 = result[6];
          v17 = result[4];
          if (v16 < v17 || v16 == v17 && (uint64_t)result[7] < (uint64_t)result[5])
          {
            v18 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *v15;
            *v15 = v18;
            if (*(_QWORD *)v10 < *(_QWORD *)v8
              || *(_QWORD *)v10 == *(_QWORD *)v8 && (uint64_t)result[5] < (uint64_t)result[3])
            {
              v19 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *(_OWORD *)v10;
              *(_OWORD *)v10 = v19;
              v20 = result[2];
              if (v20 < *result || v20 == *result && (uint64_t)result[3] < (uint64_t)result[1])
              {
                v59 = *(_OWORD *)result;
                *(_OWORD *)result = *(_OWORD *)v8;
                *(_OWORD *)v8 = v59;
              }
            }
          }
          v21 = result[6];
          if (*(_QWORD *)v11 < v21 || *(_QWORD *)v11 == v21 && *((_QWORD *)a2 - 1) < (int64_t)result[7])
          {
            v22 = *v15;
            *v15 = *(_OWORD *)v11;
            *(_OWORD *)v11 = v22;
            if (*(_QWORD *)v15 < *(_QWORD *)v10
              || *(_QWORD *)v15 == *(_QWORD *)v10 && (uint64_t)result[7] < (uint64_t)result[5])
            {
              v23 = *(_OWORD *)v10;
              *(_OWORD *)v10 = *v15;
              *v15 = v23;
LABEL_29:
              if (*(_QWORD *)v10 < *(_QWORD *)v8)
                goto LABEL_33;
              if (*(_QWORD *)v10 == *(_QWORD *)v8)
              {
                v24 = result[3];
                v25 = result[5];
LABEL_32:
                if (v25 < v24)
                {
LABEL_33:
                  v26 = *(_OWORD *)v8;
                  *(_OWORD *)v8 = *(_OWORD *)v10;
                  *(_OWORD *)v10 = v26;
                  v27 = result[2];
                  if (v27 < *result)
                    goto LABEL_41;
                  if (v27 == *result)
                  {
                    v28 = result[1];
                    v29 = result[3];
LABEL_36:
                    if (v29 < v28)
                    {
LABEL_41:
                      v60 = *(_OWORD *)result;
                      *(_OWORD *)result = *(_OWORD *)v8;
                      *(_OWORD *)v8 = v60;
                    }
                  }
                }
              }
            }
          }
          return result;
        default:
          v48 = a4;
          v56 = (unint64_t *)a2;
          v57 = (uint64_t)result;
          if (v6 <= 383)
          {
            if ((a4 & 1) != 0)
            else
          }
          if (v5 == 1)
          v49 = (__int128 *)(a2 - 16);
          v50 = v7 >> 1;
          v51 = &result[2 * (v7 >> 1)];
          if ((unint64_t)v6 >= 0x801)
          {
            v68 = *(_OWORD *)v57;
            *(_OWORD *)v57 = *(_OWORD *)v51;
            *(_OWORD *)v51 = v68;
          }
          else
          {
          }
          if ((v48 & 1) == 0)
          {
            v55 = *(_QWORD *)(v57 - 16);
            if (v55 >= *(_QWORD *)v57 && (v55 != *(_QWORD *)v57 || *(_QWORD *)(v57 - 8) >= *(_QWORD *)(v57 + 8)))
            {
LABEL_112:
              a4 = 0;
              a3 = -v5;
              a2 = (char *)v56;
              continue;
            }
          }
          LOBYTE(a4) = v48;
          if ((v53 & 1) == 0)
            goto LABEL_111;
          {
            v4 = v5 + 1;
            a2 = (char *)v56;
            a4 = v48;
            result = (unint64_t *)(v52 + 1);
            if (v54)
              goto LABEL_2;
LABEL_111:
            result = (unint64_t *)(v52 + 1);
            goto LABEL_112;
          }
          a3 = -v5;
          a2 = (char *)v52;
          result = (unint64_t *)v57;
          a4 = v48;
          if (!v54)
            continue;
          break;
      }
    }
    return result;
  }
}

_QWORD *std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst const&)#1} &,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst*>(_QWORD *result, _OWORD *a2)
{
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t *v9;
  uint64_t v10;
  _OWORD *v11;
  unint64_t v12;

  if (result != (_QWORD *)a2)
  {
    v2 = result + 2;
    if (result + 2 != (_QWORD *)a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *((_QWORD *)v4 + 2);
        v7 = *((_QWORD *)v4 + 3);
        if (v6 < *(_QWORD *)v4 || (v6 == *(_QWORD *)v4 ? (v8 = v7 < *((_QWORD *)v4 + 1)) : (v8 = 0), v8))
        {
          *v5 = *v4;
          v9 = result;
          if (v4 != (_OWORD *)result)
          {
            v10 = v3;
            do
            {
              v11 = (_OWORD *)((char *)result + v10);
              v12 = *(_QWORD *)((char *)result + v10 - 16);
              if (v6 >= v12 && (v6 != v12 || v7 >= *((_QWORD *)v11 - 1)))
              {
                v9 = (_QWORD *)((char *)result + v10);
                goto LABEL_20;
              }
              *v11 = *(_OWORD *)((char *)result + v10 - 16);
              v10 -= 16;
            }
            while (v10);
            v9 = result;
          }
LABEL_20:
          *v9 = v6;
          v9[1] = v7;
        }
        v2 = v5 + 1;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 1 != a2);
    }
  }
  return result;
}

unint64_t *std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst const&)#1} &,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst*>(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = -1;
      v5 = 1;
      v6 = result;
      while (1)
      {
        v7 = v5;
        v8 = *v2;
        v9 = v6[3];
        if (*v2 < *v6)
          break;
        if (*v2 == *v6 && v9 < (uint64_t)v6[1])
          break;
LABEL_20:
        v6 += 2;
        v5 = v7 + 1;
        v2 = &result[2 * v7 + 2];
        --v4;
        v3 = v7;
        if (v2 == a2)
          return result;
      }
      *(_OWORD *)v2 = *(_OWORD *)&result[2 * v3];
      v11 = v4;
      v12 = v6;
      do
      {
        v13 = *(v12 - 2);
        if (v8 >= v13 && (v8 != v13 || v9 >= (uint64_t)*(v12 - 1)))
        {
          *v12 = v8;
          v12[1] = v9;
          goto LABEL_20;
        }
        *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
        v12 -= 2;
      }
      while (!__CFADD__(v11++, 1));
      __break(1u);
    }
  }
  return result;
}

char *std::__partial_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst const&)#1} &,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst*,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst*>(char *result, char *a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  BOOL v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v22;
  unint64_t v23;
  char *v24;
  BOOL v25;
  __int128 v26;
  _QWORD *v27;
  char *v28;
  BOOL v29;
  __int128 v30;
  BOOL v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  BOOL v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  BOOL v58;
  char *v59;
  unint64_t v60;
  __int128 v62;

  if (result != a2)
  {
    v3 = a2 - result;
    v4 = (a2 - result) >> 4;
    if (a2 - result >= 17 && (unint64_t)v3 >= 0x20)
    {
      v5 = (unint64_t)(v4 - 2) >> 1;
      v6 = v5;
      do
      {
        v7 = v6;
        if (v5 >= v6)
        {
          v8 = (2 * v6) | 1;
          v9 = &result[16 * v8];
          if (2 * v7 + 2 < v4)
          {
            v10 = *((_QWORD *)v9 + 2);
            if (*(_QWORD *)v9 < v10
              || (*(_QWORD *)v9 == v10 ? (v11 = *((_QWORD *)v9 + 1) < *((_QWORD *)v9 + 3)) : (v11 = 0), v11))
            {
              v9 += 16;
              v8 = 2 * v7 + 2;
            }
          }
          v12 = &result[16 * v7];
          v13 = *(_QWORD *)v12;
          if (*(_QWORD *)v9 >= *(_QWORD *)v12)
          {
            v14 = *((_QWORD *)v12 + 1);
            if (*(_QWORD *)v9 != *(_QWORD *)v12 || *((_QWORD *)v9 + 1) >= v14)
            {
              do
              {
                v16 = v12;
                v12 = v9;
                *(_OWORD *)v16 = *(_OWORD *)v9;
                if (v5 < v8)
                  break;
                v17 = 2 * v8;
                v8 = (2 * v8) | 1;
                v9 = &result[16 * v8];
                v18 = v17 + 2;
                if (v18 < v4)
                {
                  v19 = *((_QWORD *)v9 + 2);
                  if (*(_QWORD *)v9 < v19
                    || (*(_QWORD *)v9 == v19 ? (v20 = *((_QWORD *)v9 + 1) < *((_QWORD *)v9 + 3)) : (v20 = 0), v20))
                  {
                    v9 += 16;
                    v8 = v18;
                  }
                }
                if (*(_QWORD *)v9 < v13)
                  break;
              }
              while (*(_QWORD *)v9 != v13 || *((_QWORD *)v9 + 1) >= v14);
              *(_QWORD *)v12 = v13;
              *((_QWORD *)v12 + 1) = v14;
            }
          }
        }
        v6 = v7 - 1;
      }
      while (v7);
    }
    if (a2 != a3)
    {
      v22 = result + 32;
      v23 = *(_QWORD *)result;
      if (v3 >= 32)
      {
        v27 = result + 16;
        v28 = a2;
        do
        {
          if (*(_QWORD *)v28 < v23
            || (*(_QWORD *)v28 == v23 ? (v29 = *((_QWORD *)v28 + 1) < *((_QWORD *)result + 1)) : (v29 = 0), v29))
          {
            v30 = *(_OWORD *)v28;
            *(_OWORD *)v28 = *(_OWORD *)result;
            *(_OWORD *)result = v30;
            if (v3 != 32
              && (*v27 < *v22
               || (*v27 == *v22 ? (v31 = *((_QWORD *)result + 3) < *((_QWORD *)result + 5)) : (v31 = 0), v31)))
            {
              v32 = result + 32;
              v33 = 2;
            }
            else
            {
              v32 = result + 16;
              v33 = 1;
            }
            v23 = *(_QWORD *)v32;
            v34 = *(_QWORD *)result;
            if (*(_QWORD *)v32 < *(_QWORD *)result)
            {
              v23 = *(_QWORD *)result;
            }
            else
            {
              v35 = *((_QWORD *)result + 1);
              if (*(_QWORD *)v32 != *(_QWORD *)result || *((_QWORD *)v32 + 1) >= v35)
              {
                v37 = result;
                do
                {
                  v38 = v37;
                  v37 = v32;
                  *(_OWORD *)v38 = *(_OWORD *)v32;
                  if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v33)
                    break;
                  v39 = 2 * v33;
                  v33 = (2 * v33) | 1;
                  v32 = &result[16 * v33];
                  v40 = v39 + 2;
                  if (v40 < v4)
                  {
                    v41 = *((_QWORD *)v32 + 2);
                    if (*(_QWORD *)v32 < v41
                      || (*(_QWORD *)v32 == v41 ? (v42 = *((_QWORD *)v32 + 1) < *((_QWORD *)v32 + 3)) : (v42 = 0), v42))
                    {
                      v32 += 16;
                      v33 = v40;
                    }
                  }
                  if (*(_QWORD *)v32 < v34)
                    break;
                }
                while (*(_QWORD *)v32 != v34 || *((_QWORD *)v32 + 1) >= v35);
                *(_QWORD *)v37 = v34;
                *((_QWORD *)v37 + 1) = v35;
                v23 = *(_QWORD *)result;
              }
            }
          }
          v28 += 16;
        }
        while (v28 != a3);
      }
      else
      {
        v24 = a2;
        do
        {
          if (*(_QWORD *)v24 < v23
            || (*(_QWORD *)v24 == v23 ? (v25 = *((_QWORD *)v24 + 1) < *((_QWORD *)result + 1)) : (v25 = 0), v25))
          {
            v26 = *(_OWORD *)v24;
            *(_OWORD *)v24 = *(_OWORD *)result;
            *(_OWORD *)result = v26;
            v23 = *(_QWORD *)result;
          }
          v24 += 16;
        }
        while (v24 != a3);
      }
    }
    if (v3 >= 17)
    {
      v44 = (unint64_t)v3 >> 4;
      do
      {
        v45 = 0;
        v62 = *(_OWORD *)result;
        v46 = result;
        do
        {
          v47 = v46;
          v46 += 16 * v45 + 16;
          v48 = 2 * v45;
          v45 = (2 * v45) | 1;
          v49 = v48 + 2;
          if (v49 < v44)
          {
            v50 = *((_QWORD *)v46 + 2);
            if (*(_QWORD *)v46 < v50
              || (*(_QWORD *)v46 == v50 ? (v51 = *((_QWORD *)v46 + 1) < *((_QWORD *)v46 + 3)) : (v51 = 0), v51))
            {
              v46 += 16;
              v45 = v49;
            }
          }
          *(_OWORD *)v47 = *(_OWORD *)v46;
        }
        while (v45 <= (uint64_t)((unint64_t)(v44 - 2) >> 1));
        a2 -= 16;
        if (v46 == a2)
        {
          *(_OWORD *)v46 = v62;
        }
        else
        {
          *(_OWORD *)v46 = *(_OWORD *)a2;
          *(_OWORD *)a2 = v62;
          v52 = v46 - result + 16;
          if (v52 >= 17)
          {
            v53 = ((unint64_t)v52 >> 4) - 2;
            v54 = v53 >> 1;
            v55 = &result[16 * (v53 >> 1)];
            v56 = *(_QWORD *)v46;
            v57 = *((_QWORD *)v46 + 1);
            if (*(_QWORD *)v55 < *(_QWORD *)v46
              || (*(_QWORD *)v55 == *(_QWORD *)v46 ? (v58 = *((_QWORD *)v55 + 1) < v57) : (v58 = 0), v58))
            {
              *(_OWORD *)v46 = *(_OWORD *)v55;
              if (v53 >= 2)
              {
                while (1)
                {
                  v60 = v54 - 1;
                  v54 = (v54 - 1) >> 1;
                  v59 = &result[16 * v54];
                  if (*(_QWORD *)v59 >= v56 && (*(_QWORD *)v59 != v56 || *((_QWORD *)v59 + 1) >= v57))
                    break;
                  *(_OWORD *)v55 = *(_OWORD *)v59;
                  v55 = &result[16 * v54];
                  if (v60 <= 1)
                    goto LABEL_116;
                }
              }
              v59 = v55;
LABEL_116:
              *(_QWORD *)v59 = v56;
              *((_QWORD *)v59 + 1) = v57;
            }
          }
        }
        v11 = v44-- <= 2;
      }
      while (!v11);
    }
  }
  return result;
}

__int128 *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst const&)#1} &,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst*>(__int128 *result, unint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  __int128 v7;
  __int128 v8;
  BOOL v9;
  __int128 v10;
  __int128 v11;

  v4 = *a2;
  v3 = a2[1];
  if (*a2 < *(_QWORD *)result || (*a2 == *(_QWORD *)result ? (v5 = v3 < *((_QWORD *)result + 1)) : (v5 = 0), v5))
  {
    if (*(_QWORD *)a3 < v4 || (*(_QWORD *)a3 == v4 ? (v9 = *((_QWORD *)a3 + 1) < v3) : (v9 = 0), v9))
    {
      v11 = *result;
      *result = *a3;
    }
    else
    {
      v10 = *result;
      *result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v10;
      if (*(_QWORD *)a3 >= *a2 && (*(_QWORD *)a3 != *a2 || *((_QWORD *)a3 + 1) >= (int64_t)a2[1]))
        return result;
      v11 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *a3;
    }
    *a3 = v11;
    return result;
  }
  if (*(_QWORD *)a3 < v4 || (*(_QWORD *)a3 == v4 ? (v6 = *((_QWORD *)a3 + 1) < v3) : (v6 = 0), v6))
  {
    v7 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *a3;
    *a3 = v7;
    if (*a2 < *(_QWORD *)result || *a2 == *(_QWORD *)result && (int64_t)a2[1] < *((_QWORD *)result + 1))
    {
      v8 = *result;
      *result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
    }
  }
  return result;
}

unint64_t *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst *,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst const&)#1} &>(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  BOOL v5;
  BOOL v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v15;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v23;

  v2 = *a1;
  v3 = a1[1];
  v4 = (unint64_t *)*(a2 - 2);
  v5 = *a1 == (_QWORD)v4;
  if (*a1 < (unint64_t)v4 || ((v4 = (unint64_t *)*(a2 - 1), v5) ? (v6 = v3 < (uint64_t)v4) : (v6 = 0), v6))
  {
    v11 = a1 + 2;
    while (v11 != a2)
    {
      v4 = v11;
      v12 = *v11;
      if (v2 >= *v11)
      {
        v13 = v11[1];
        v11 += 2;
        if (v2 != v12 || v3 >= v13)
          continue;
      }
      goto LABEL_23;
    }
    goto LABEL_54;
  }
  v7 = a1 + 2;
  do
  {
    v4 = v7;
    if (v7 >= a2)
      break;
    v8 = *v7;
    if (v2 < *v7)
      break;
    v9 = v7[1];
    v7 += 2;
  }
  while (v2 != v8 || v3 >= v9);
LABEL_23:
  v15 = a2;
  if (v4 < a2)
  {
    if (a2 == a1)
      goto LABEL_54;
    v15 = a2 - 2;
    while (v2 < *v15 || v2 == *v15 && v3 < (uint64_t)v15[1])
    {
      v5 = v15 == a1;
      v15 -= 2;
      if (v5)
        goto LABEL_54;
    }
  }
LABEL_35:
  if (v4 >= v15)
    goto LABEL_55;
  v23 = *(_OWORD *)v4;
  *(_OWORD *)v4 = *(_OWORD *)v15;
  *(_OWORD *)v15 = v23;
  v17 = v4 + 2;
  while (v17 != a2)
  {
    v4 = v17;
    v18 = *v17;
    if (v2 >= *v17)
    {
      v19 = v17[1];
      v17 += 2;
      if (v2 != v18 || v3 >= v19)
        continue;
    }
    if (v15 == a1)
      break;
    v15 -= 2;
    while (v2 < *v15 || v2 == *v15 && v3 < (uint64_t)v15[1])
    {
      v5 = v15 == a1;
      v15 -= 2;
      if (v5)
        goto LABEL_54;
    }
    goto LABEL_35;
  }
LABEL_54:
  __break(1u);
LABEL_55:
  if (v4 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v4 - 1);
  *(v4 - 2) = v2;
  *(v4 - 1) = v3;
  return v4;
}

unint64_t std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst *,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst const&)#1} &>(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v14;
  unint64_t *v16;
  __int128 v19;

  v4 = a1 + 2;
  if (a1 + 2 == a2)
    goto LABEL_10;
  v4 = 0;
  v2 = *a1;
  v3 = a1[1];
  while (1)
  {
    v5 = *(unint64_t *)((char *)v4 + (_QWORD)a1 + 16);
    if (v5 >= v2 && (v5 != v2 || *(int64_t *)((char *)v4 + (_QWORD)a1 + 24) >= v3))
      break;
    v4 += 2;
    if ((unint64_t *)((char *)v4 + (_QWORD)a1 + 16) == a2)
      goto LABEL_10;
  }
  while (1)
  {
    v7 = (unint64_t)v4 + (_QWORD)a1 + 16;
    if (!v4)
      break;
    v8 = a2 - 2;
    while (1)
    {
      v9 = v8;
      v4 = v8 + 2;
      if (v4 == a1)
        break;
      if (*v9 >= v2)
      {
        v8 = v9 - 2;
        if (*v9 != v2 || (uint64_t)v9[1] >= v3)
          continue;
      }
      goto LABEL_31;
    }
LABEL_10:
    __break(1u);
  }
  v11 = a2 - 2;
  while (1)
  {
    v9 = v11;
    v12 = v11 + 2;
    if (v7 >= (unint64_t)v12)
      break;
    if (*v9 >= v2)
    {
      v11 = v9 - 2;
      if (*v9 != v2 || (uint64_t)v9[1] >= v3)
        continue;
    }
    goto LABEL_31;
  }
  v9 = v12;
LABEL_31:
  v14 = v7;
  if (v7 < (unint64_t)v9)
  {
    v4 = v9;
LABEL_33:
    v19 = *(_OWORD *)v14;
    *(_OWORD *)v14 = *(_OWORD *)v4;
    *(_OWORD *)v4 = v19;
    while (1)
    {
      v14 += 16;
      if ((unint64_t *)v14 == a2)
        goto LABEL_10;
      if (*(_QWORD *)v14 >= v2 && (*(_QWORD *)v14 != v2 || *(_QWORD *)(v14 + 8) >= v3))
      {
        v16 = v4 - 2;
        while (1)
        {
          v4 = v16;
          if (v16 + 2 == a1)
            goto LABEL_10;
          if (*v16 >= v2)
          {
            v16 -= 2;
            if (*v4 != v2 || (uint64_t)v4[1] >= v3)
              continue;
          }
          if (v14 < (unint64_t)v4)
            goto LABEL_33;
          goto LABEL_49;
        }
      }
    }
  }
LABEL_49:
  if ((unint64_t *)(v14 - 16) != a1)
    *(_OWORD *)a1 = *(_OWORD *)(v14 - 16);
  *(_QWORD *)(v14 - 16) = v2;
  *(_QWORD *)(v14 - 8) = v3;
  return v14 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst const&)#1} &,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::SlotConst*>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  unint64_t v7;
  BOOL v8;
  __int128 v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  __int128 *v21;
  __int128 *v22;
  __int128 *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __int128 *v29;
  unint64_t v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  unint64_t v35;
  __int128 v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  unint64_t v43;
  __int128 v44;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 1;
      v7 = *((_QWORD *)a2 - 2);
      if (v7 < *(_QWORD *)a1 || (v7 == *(_QWORD *)a1 ? (v8 = *((_QWORD *)a2 - 1) < *(_QWORD *)(a1 + 8)) : (v8 = 0), v8))
      {
        v9 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v9;
      }
      return result;
    case 3:
      return 1;
    case 4:
      v21 = (__int128 *)(a1 + 16);
      v22 = (__int128 *)(a1 + 32);
      v23 = a2 - 1;
      v24 = *((_QWORD *)a2 - 2);
      v25 = *(_QWORD *)(a1 + 32);
      if (v24 < v25)
        goto LABEL_51;
      result = 1;
      if (v24 != v25)
        return result;
      v26 = *(_QWORD *)(a1 + 40);
      v27 = *((_QWORD *)a2 - 1);
      goto LABEL_50;
    case 5:
      v21 = (__int128 *)(a1 + 16);
      v22 = (__int128 *)(a1 + 32);
      v23 = (__int128 *)(a1 + 48);
      v28 = *(_QWORD *)(a1 + 48);
      v29 = a2 - 1;
      v30 = *(_QWORD *)(a1 + 32);
      if (v28 < v30 || v28 == v30 && *(_QWORD *)(a1 + 56) < *(_QWORD *)(a1 + 40))
      {
        v31 = *v22;
        *v22 = *v23;
        *v23 = v31;
        v32 = *(_QWORD *)(a1 + 32);
        v33 = *(_QWORD *)(a1 + 16);
        if (v32 < v33 || v32 == v33 && *(_QWORD *)(a1 + 40) < *(_QWORD *)(a1 + 24))
        {
          v34 = *v21;
          *v21 = *v22;
          *v22 = v34;
          v35 = *(_QWORD *)(a1 + 16);
          if (v35 < *(_QWORD *)a1 || v35 == *(_QWORD *)a1 && *(_QWORD *)(a1 + 24) < *(_QWORD *)(a1 + 8))
          {
            v36 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v21;
            *v21 = v36;
          }
        }
      }
      v37 = *(_QWORD *)(a1 + 48);
      if (*(_QWORD *)v29 >= v37)
      {
        result = 1;
        if (*(_QWORD *)v29 != v37 || *((_QWORD *)a2 - 1) >= *(_QWORD *)(a1 + 56))
          return result;
      }
      v38 = *v23;
      *v23 = *v29;
      *v29 = v38;
      if (*(_QWORD *)v23 < *(_QWORD *)v22)
        goto LABEL_51;
      result = 1;
      if (*(_QWORD *)v23 != *(_QWORD *)v22)
        return result;
      v26 = *(_QWORD *)(a1 + 40);
      v27 = *(_QWORD *)(a1 + 56);
LABEL_50:
      if (v27 >= v26)
        return result;
LABEL_51:
      v39 = *v22;
      *v22 = *v23;
      *v23 = v39;
      v40 = *(_QWORD *)(a1 + 32);
      v41 = *(_QWORD *)(a1 + 16);
      if (v40 >= v41)
      {
        result = 1;
        if (v40 != v41 || *(_QWORD *)(a1 + 40) >= *(_QWORD *)(a1 + 24))
          return result;
      }
      v42 = *v21;
      *v21 = *v22;
      *v22 = v42;
      v43 = *(_QWORD *)(a1 + 16);
      if (v43 >= *(_QWORD *)a1)
      {
        result = 1;
        if (v43 != *(_QWORD *)a1 || *(_QWORD *)(a1 + 24) >= *(_QWORD *)(a1 + 8))
          return result;
      }
      v44 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *v21;
      *v21 = v44;
      return 1;
    default:
      v10 = (__int128 *)(a1 + 32);
      v11 = (__int128 *)(a1 + 48);
      if ((__int128 *)(a1 + 48) == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_QWORD *)v11;
    v15 = *((_QWORD *)v11 + 1);
    if (*(_QWORD *)v11 < *(_QWORD *)v10
      || (*(_QWORD *)v11 == *(_QWORD *)v10 ? (v16 = v15 < *((_QWORD *)v10 + 1)) : (v16 = 0), v16))
    {
      *v11 = *v10;
      v17 = (unint64_t *)a1;
      if (v10 != (__int128 *)a1)
      {
        v18 = v12;
        do
        {
          v19 = *(_QWORD *)(a1 + v18 + 16);
          if (v14 >= v19 && (v14 != v19 || v15 >= *(_QWORD *)(a1 + v18 + 24)))
          {
            v17 = (unint64_t *)(a1 + v18 + 32);
            goto LABEL_27;
          }
          *(_OWORD *)(a1 + v18 + 32) = *(_OWORD *)(a1 + v18 + 16);
          v18 -= 16;
        }
        while (v18 != -32);
        v17 = (unint64_t *)a1;
      }
LABEL_27:
      *v17 = v14;
      v17[1] = v15;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 16;
    if (++v11 == a2)
      return 1;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot const&)#1} &,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot*,false>(__int128 *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  __int16 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 *v28;
  unint64_t v29;
  char v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

__n128 std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot const&)#1} &,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot*,0>(uint64_t a1, unint64_t *a2, unint64_t *a3, __int128 *a4, uint64_t a5)
{
  __n128 result;
  BOOL v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __n128 v19;
  __n128 v20;
  __int128 v21;
  __int128 v22;
  __n128 v23;
  __n128 v24;
  __int128 v25;

  if (*(_QWORD *)a4 < *a3
    || (*(_QWORD *)a4 == *a3 ? (v11 = (*((_BYTE *)a4 + 8) & 0x7Fu) >= (a3[1] & 0x7F)) : (v11 = 1), !v11))
  {
    result = *(__n128 *)a3;
    v19 = *(__n128 *)a3;
    v12 = *((_WORD *)a4 + 4);
    *a3 = *(_QWORD *)a4;
    *((_WORD *)a3 + 4) = v12;
    *(_QWORD *)a4 = v19.n128_u64[0];
    *((_WORD *)a4 + 4) = v19.n128_u16[4];
    if (*a3 < *a2 || *a3 == *a2 && (a3[1] & 0x7F) < (a2[1] & 0x7F))
    {
      result = *(__n128 *)a2;
      v20 = *(__n128 *)a2;
      v13 = *((_WORD *)a3 + 4);
      *a2 = *a3;
      *((_WORD *)a2 + 4) = v13;
      *a3 = v20.n128_u64[0];
      *((_WORD *)a3 + 4) = v20.n128_u16[4];
      if (*a2 < *(_QWORD *)a1 || *a2 == *(_QWORD *)a1 && (a2[1] & 0x7F) < (*(_BYTE *)(a1 + 8) & 0x7Fu))
      {
        result = *(__n128 *)a1;
        v21 = *(_OWORD *)a1;
        v14 = *((_WORD *)a2 + 4);
        *(_QWORD *)a1 = *a2;
        *(_WORD *)(a1 + 8) = v14;
        *a2 = v21;
        *((_WORD *)a2 + 4) = WORD4(v21);
      }
    }
  }
  if (*(_QWORD *)a5 < *(_QWORD *)a4
    || *(_QWORD *)a5 == *(_QWORD *)a4 && (*(_BYTE *)(a5 + 8) & 0x7Fu) < (*((_BYTE *)a4 + 8) & 0x7Fu))
  {
    result = (__n128)*a4;
    v22 = *a4;
    v15 = *(_WORD *)(a5 + 8);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *((_WORD *)a4 + 4) = v15;
    *(_QWORD *)a5 = v22;
    *(_WORD *)(a5 + 8) = WORD4(v22);
    if (*(_QWORD *)a4 < *a3 || *(_QWORD *)a4 == *a3 && (*((_BYTE *)a4 + 8) & 0x7Fu) < (a3[1] & 0x7F))
    {
      result = *(__n128 *)a3;
      v23 = *(__n128 *)a3;
      v16 = *((_WORD *)a4 + 4);
      *a3 = *(_QWORD *)a4;
      *((_WORD *)a3 + 4) = v16;
      *(_QWORD *)a4 = v23.n128_u64[0];
      *((_WORD *)a4 + 4) = v23.n128_u16[4];
      if (*a3 < *a2 || *a3 == *a2 && (a3[1] & 0x7F) < (a2[1] & 0x7F))
      {
        result = *(__n128 *)a2;
        v24 = *(__n128 *)a2;
        v17 = *((_WORD *)a3 + 4);
        *a2 = *a3;
        *((_WORD *)a2 + 4) = v17;
        *a3 = v24.n128_u64[0];
        *((_WORD *)a3 + 4) = v24.n128_u16[4];
        if (*a2 < *(_QWORD *)a1 || *a2 == *(_QWORD *)a1 && (a2[1] & 0x7F) < (*(_BYTE *)(a1 + 8) & 0x7Fu))
        {
          result = *(__n128 *)a1;
          v25 = *(_OWORD *)a1;
          v18 = *((_WORD *)a2 + 4);
          *(_QWORD *)a1 = *a2;
          *(_WORD *)(a1 + 8) = v18;
          *a2 = v25;
          *((_WORD *)a2 + 4) = WORD4(v25);
        }
      }
    }
  }
  return result;
}

uint64_t std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot const&)#1} &,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot*>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unsigned int v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  if (result != a2)
  {
    v2 = result + 16;
    if (result + 16 != a2)
    {
      v3 = 0;
      v4 = result;
      while (1)
      {
        v5 = v2;
        v6 = *(_QWORD *)(v4 + 16);
        v7 = *(_BYTE *)(v4 + 24);
        if (v6 < *(_QWORD *)v4)
          break;
        v8 = v7 & 0x7F;
        if (v6 == *(_QWORD *)v4 && v8 < (*(_BYTE *)(v4 + 8) & 0x7Fu))
          goto LABEL_11;
LABEL_22:
        v2 = v5 + 16;
        v3 += 16;
        v4 = v5;
        if (v5 + 16 == a2)
          return result;
      }
      v8 = v7 & 0x7F;
LABEL_11:
      v10 = *(_BYTE *)(v4 + 25);
      *(_QWORD *)v5 = *(_QWORD *)v4;
      *(_WORD *)(v5 + 8) = *(_WORD *)(v4 + 8);
      v11 = result;
      if (v4 != result)
      {
        v12 = v3;
        while (1)
        {
          v13 = result + v12;
          v14 = *(_QWORD *)(result + v12 - 16);
          if (v6 >= v14 && (v6 != v14 || v8 >= (*(_BYTE *)(v13 - 8) & 0x7Fu)))
            break;
          *(_QWORD *)v13 = *(_QWORD *)(result + v12 - 16);
          *(_WORD *)(v13 + 8) = *(_WORD *)(result + v12 - 8);
          v12 -= 16;
          if (!v12)
          {
            v11 = result;
            goto LABEL_21;
          }
        }
        v11 = result + v12;
      }
LABEL_21:
      *(_QWORD *)v11 = v6;
      *(_BYTE *)(v11 + 8) = v7;
      *(_BYTE *)(v11 + 9) = v10;
      goto LABEL_22;
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot const&)#1} &,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot*>(uint64_t result, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unsigned int v10;
  BOOL v11;
  char v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t i;
  unint64_t v17;

  if ((uint64_t *)result != a2)
  {
    v2 = (unint64_t *)(result + 16);
    if ((uint64_t *)(result + 16) != a2)
    {
      v3 = 0;
      v4 = -1;
      v5 = 1;
      v6 = result;
      while (1)
      {
        v7 = v5;
        v8 = *v2;
        v9 = *(_BYTE *)(v6 + 24);
        if (*v2 < *(_QWORD *)v6)
          break;
        v10 = v9 & 0x7F;
        v11 = *v2 != *(_QWORD *)v6 || v10 >= (*(_BYTE *)(v6 + 8) & 0x7Fu);
        if (!v11)
          goto LABEL_11;
LABEL_21:
        v6 += 16;
        v5 = v7 + 1;
        v2 = (unint64_t *)(result + 16 * (v7 + 1));
        --v4;
        v3 = v7;
        if (v2 == (unint64_t *)a2)
          return result;
      }
      v10 = v9 & 0x7F;
LABEL_11:
      v12 = *(_BYTE *)(v6 + 25);
      v13 = (unint64_t *)(result + 16 * v3);
      v14 = *v13;
      *((_WORD *)v2 + 4) = *((_WORD *)v13 + 4);
      *v2 = v14;
      v15 = v4;
      for (i = v6; ; i -= 16)
      {
        v17 = *(_QWORD *)(i - 16);
        if (v8 >= v17 && (v8 != v17 || v10 >= (*(_BYTE *)(i - 8) & 0x7Fu)))
          break;
        *(_QWORD *)i = *(_QWORD *)(i - 16);
        *(_WORD *)(i + 8) = *(_WORD *)(i - 8);
        v11 = __CFADD__(v15++, 1);
        if (v11)
        {
          __break(1u);
          return result;
        }
      }
      *(_QWORD *)i = v8;
      *(_BYTE *)(i + 8) = v9;
      *(_BYTE *)(i + 9) = v12;
      goto LABEL_21;
    }
  }
  return result;
}

uint64_t std::__partial_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot const&)#1} &,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot*,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot*>(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 *v12;
  BOOL v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  BOOL v31;
  char v32;
  __int16 v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v38;
  __int128 v39;
  __int128 v40;

  if ((uint64_t *)result != a2)
  {
    v4 = a2;
    v5 = result;
    v6 = (uint64_t)a2 - result;
    v7 = ((uint64_t)a2 - result) >> 4;
    if ((uint64_t)a2 - result >= 17)
    {
      v8 = (unint64_t)(v7 - 2) >> 1;
      v9 = v8 + 1;
      v10 = (unint64_t *)(result + 16 * v8);
      do
      {
        v10 -= 2;
        --v9;
      }
      while (v9);
    }
    if (v4 != (uint64_t *)a3)
    {
      v11 = *(_QWORD *)v5;
      v12 = (__int128 *)v4;
      do
      {
        if (*(_QWORD *)v12 < v11
          || (*(_QWORD *)v12 == v11 ? (v13 = (*((_BYTE *)v12 + 8) & 0x7Fu) >= (*(_BYTE *)(v5 + 8) & 0x7Fu)) : (v13 = 1),
              !v13))
        {
          v39 = *v12;
          v14 = *(_WORD *)(v5 + 8);
          *(_QWORD *)v12 = *(_QWORD *)v5;
          *((_WORD *)v12 + 4) = v14;
          *(_QWORD *)v5 = v39;
          *(_WORD *)(v5 + 8) = WORD4(v39);
          v11 = *(_QWORD *)v5;
        }
        ++v12;
      }
      while (v12 != a3);
    }
    if (v6 >= 17)
    {
      v15 = (unint64_t)v6 >> 4;
      do
      {
        v16 = 0;
        v40 = *(_OWORD *)v5;
        v17 = v5;
        do
        {
          v18 = v17;
          v17 += 16 * v16 + 16;
          v19 = 2 * v16;
          v16 = (2 * v16) | 1;
          v20 = v19 + 2;
          if (v20 < v15)
          {
            v21 = *(_QWORD *)(v17 + 16);
            if (*(_QWORD *)v17 < v21
              || (*(_QWORD *)v17 == v21
                ? (v22 = (*(_BYTE *)(v17 + 8) & 0x7Fu) >= (*(_BYTE *)(v17 + 24) & 0x7Fu))
                : (v22 = 1),
                  !v22))
            {
              v17 += 16;
              v16 = v20;
            }
          }
          v23 = *(_QWORD *)v17;
          *(_WORD *)(v18 + 8) = *(_WORD *)(v17 + 8);
          *(_QWORD *)v18 = v23;
        }
        while (v16 <= (uint64_t)((unint64_t)(v15 - 2) >> 1));
        v4 -= 2;
        if ((uint64_t *)v17 == v4)
        {
          *(_WORD *)(v17 + 8) = WORD4(v40);
          *(_QWORD *)v17 = v40;
        }
        else
        {
          v24 = *v4;
          *(_WORD *)(v17 + 8) = *((_WORD *)v4 + 4);
          *(_QWORD *)v17 = v24;
          *v4 = v40;
          *((_WORD *)v4 + 4) = WORD4(v40);
          v25 = v17 - v5 + 16;
          if (v25 >= 17)
          {
            v26 = ((unint64_t)v25 >> 4) - 2;
            v27 = v26 >> 1;
            v28 = v5 + 16 * (v26 >> 1);
            v29 = *(_QWORD *)v17;
            v30 = *(_BYTE *)(v17 + 8);
            if (*(_QWORD *)v28 < *(_QWORD *)v17
              || (*(_QWORD *)v28 == *(_QWORD *)v17 ? (v31 = (*(_BYTE *)(v28 + 8) & 0x7Fu) >= (v30 & 0x7Fu)) : (v31 = 1),
                  !v31))
            {
              v32 = *(_BYTE *)(v17 + 9);
              v33 = *(_WORD *)(v28 + 8);
              *(_QWORD *)v17 = *(_QWORD *)v28;
              *(_WORD *)(v17 + 8) = v33;
              if (v26 >= 2)
              {
                while (1)
                {
                  v36 = v27 - 1;
                  v27 = (v27 - 1) >> 1;
                  v34 = v5 + 16 * v27;
                  if (*(_QWORD *)v34 >= v29)
                  {
                    result = *(_BYTE *)(v34 + 8) & 0x7F;
                    if (*(_QWORD *)v34 != v29 || result >= (v30 & 0x7Fu))
                      break;
                  }
                  v38 = *(_QWORD *)v34;
                  result = *(unsigned __int16 *)(v34 + 8);
                  *(_WORD *)(v28 + 8) = result;
                  *(_QWORD *)v28 = v38;
                  v28 = v5 + 16 * v27;
                  if (v36 <= 1)
                    goto LABEL_34;
                }
              }
              v34 = v28;
LABEL_34:
              *(_QWORD *)v34 = v29;
              *(_BYTE *)(v34 + 8) = v30;
              *(_BYTE *)(v34 + 9) = v32;
            }
          }
        }
      }
      while (v15-- > 2);
    }
  }
  return result;
}

__int128 *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot const&)#1} &,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot*>(__int128 *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  char v4;
  BOOL v5;
  unsigned int v6;
  BOOL v7;
  __int16 v8;
  __int16 v9;
  unsigned int v10;
  BOOL v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  if (*a2 >= *(_QWORD *)result
    && (*a2 == *(_QWORD *)result ? (v5 = (v4 & 0x7Fu) >= (*((_BYTE *)result + 8) & 0x7Fu)) : (v5 = 1), v5))
  {
    if (*a3 < v3 || ((v6 = v4 & 0x7F, *a3 == v3) ? (v7 = (a3[1] & 0x7F) >= v6) : (v7 = 1), !v7))
    {
      v15 = *(_OWORD *)a2;
      v8 = *((_WORD *)a3 + 4);
      *a2 = *a3;
      *((_WORD *)a2 + 4) = v8;
      *a3 = v15;
      *((_WORD *)a3 + 4) = WORD4(v15);
      if (*a2 < *(_QWORD *)result || *a2 == *(_QWORD *)result && (a2[1] & 0x7F) < (*((_BYTE *)result + 8) & 0x7Fu))
      {
        v16 = *result;
        v9 = *((_WORD *)a2 + 4);
        *(_QWORD *)result = *a2;
        *((_WORD *)result + 4) = v9;
        *a2 = v16;
        *((_WORD *)a2 + 4) = WORD4(v16);
      }
    }
  }
  else
  {
    if (*a3 < v3 || ((v10 = v4 & 0x7F, *a3 == v3) ? (v11 = (a3[1] & 0x7F) >= v10) : (v11 = 1), !v11))
    {
      v18 = *result;
      v14 = *((_WORD *)a3 + 4);
      *(_QWORD *)result = *a3;
      *((_WORD *)result + 4) = v14;
      goto LABEL_27;
    }
    v17 = *result;
    v12 = *((_WORD *)a2 + 4);
    *(_QWORD *)result = *a2;
    *((_WORD *)result + 4) = v12;
    *a2 = v17;
    *((_WORD *)a2 + 4) = WORD4(v17);
    if (*a3 < *a2 || *a3 == *a2 && (a3[1] & 0x7F) < (a2[1] & 0x7F))
    {
      v18 = *(_OWORD *)a2;
      v13 = *((_WORD *)a3 + 4);
      *a2 = *a3;
      *((_WORD *)a2 + 4) = v13;
LABEL_27:
      *a3 = v18;
      *((_WORD *)a3 + 4) = WORD4(v18);
    }
  }
  return result;
}

__int128 *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot *,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot const&)#1} &>(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  unint64_t v6;
  BOOL v7;
  __int128 *i;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v17;
  __int128 v19;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *((_BYTE *)a1 + 9);
  v6 = *(_QWORD *)(a2 - 16);
  if (*a1 >= v6
    && ((v2 = a1[1] & 0x7F, v3 == v6) ? (v7 = v2 >= (*(_BYTE *)(a2 - 8) & 0x7Fu)) : (v7 = 1), v7))
  {
    for (i = (__int128 *)(a1 + 2); (unint64_t)i < a2 && v3 >= *(_QWORD *)i; ++i)
    {
      if (v3 == *(_QWORD *)i && v2 < (*((_BYTE *)i + 8) & 0x7Fu))
        break;
    }
  }
  else
  {
    i = (__int128 *)(a1 + 2);
    if (a1 + 2 == (uint64_t *)a2)
      goto LABEL_36;
    v2 = a1[1] & 0x7F;
    while (v3 >= *(_QWORD *)i)
    {
      if (v3 == *(_QWORD *)i && v2 < (*((_BYTE *)i + 8) & 0x7Fu))
        break;
      if (++i == (__int128 *)a2)
        goto LABEL_36;
    }
  }
  v2 = a2;
  if ((unint64_t)i >= a2)
    goto LABEL_37;
  if ((uint64_t *)a2 != a1)
  {
    v2 = a2 - 16;
    do
    {
      if (v3 >= *(_QWORD *)v2 && (v3 != *(_QWORD *)v2 || (v4 & 0x7Fu) >= (*(_BYTE *)(v2 + 8) & 0x7Fu)))
        goto LABEL_37;
      v12 = v2 == (_QWORD)a1;
      v2 -= 16;
    }
    while (!v12);
  }
LABEL_36:
  while (1)
  {
    __break(1u);
LABEL_37:
    if ((unint64_t)i >= v2)
      break;
    v13 = v4 & 0x7F;
LABEL_39:
    v19 = *i;
    v14 = *(_QWORD *)v2;
    *((_WORD *)i + 4) = *(_WORD *)(v2 + 8);
    *(_QWORD *)i = v14;
    *(_WORD *)(v2 + 8) = WORD4(v19);
    *(_QWORD *)v2 = v19;
    while (++i != (__int128 *)a2)
    {
      if (v3 >= *(_QWORD *)i && (v3 != *(_QWORD *)i || v13 >= (*((_BYTE *)i + 8) & 0x7Fu)))
        continue;
      if ((uint64_t *)v2 == a1)
        goto LABEL_36;
      v2 -= 16;
      while (v3 < *(_QWORD *)v2 || v3 == *(_QWORD *)v2 && v13 < (*(_BYTE *)(v2 + 8) & 0x7Fu))
      {
        v12 = v2 == (_QWORD)a1;
        v2 -= 16;
        if (v12)
          goto LABEL_36;
      }
      if ((unint64_t)i < v2)
        goto LABEL_39;
      goto LABEL_57;
    }
  }
LABEL_57:
  if (i - 1 != (__int128 *)a1)
  {
    v17 = *((_QWORD *)i - 2);
    *((_WORD *)a1 + 4) = *((_WORD *)i - 4);
    *a1 = v17;
  }
  *((_QWORD *)i - 2) = v3;
  *((_BYTE *)i - 8) = v4;
  *((_BYTE *)i - 7) = v5;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot *,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot const&)#1} &>(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  char v3;
  char v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v10;
  BOOL v12;
  unint64_t *v13;
  unint64_t v14;
  BOOL v15;
  BOOL v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v22;
  __int128 v24;

  v6 = (_DWORD)a1 + 16;
  if (a1 + 2 != (uint64_t *)a2)
  {
    v7 = 0;
    v2 = *a1;
    v3 = *((_BYTE *)a1 + 8);
    v4 = *((_BYTE *)a1 + 9);
    v6 = v3 & 0x7F;
    while (1)
    {
      v8 = a1[v7 + 2];
      if (v8 >= v2 && (v8 != v2 || (unint64_t)(a1[v7 + 3] & 0x7F) >= v6))
        break;
      v7 += 2;
      v5 = (unint64_t)&a1[v7 + 2];
      if (v5 == a2)
        goto LABEL_21;
    }
    v5 = (unint64_t)&a1[v7 + 2];
    if (!(v7 * 8))
      goto LABEL_22;
    if ((uint64_t *)a2 != a1)
    {
      v10 = (unint64_t *)(a2 - 16);
      do
      {
        if (*v10 < v2)
          goto LABEL_33;
        if (*v10 == v2 && (v10[1] & 0x7F) < v6)
          goto LABEL_33;
        v12 = v10 == (unint64_t *)a1;
        v10 -= 2;
      }
      while (!v12);
    }
  }
LABEL_21:
  while (1)
  {
    __break(1u);
LABEL_22:
    v10 = (unint64_t *)a2;
    if (v5 < a2)
    {
      v13 = (unint64_t *)(a2 - 16);
      do
      {
        v10 = v13;
        v14 = *v13;
        if (v14 < v2)
          break;
        v15 = v14 != v2 || (v10[1] & 0x7F) >= v6;
        v16 = v15;
        if (v5 >= (unint64_t)v10)
          break;
        v13 = v10 - 2;
      }
      while (v16);
    }
LABEL_33:
    v17 = v5;
    if (v5 >= (unint64_t)v10)
      break;
    v18 = v10;
LABEL_35:
    v24 = *(_OWORD *)v17;
    v19 = *v18;
    *(_WORD *)(v17 + 8) = *((_WORD *)v18 + 4);
    *(_QWORD *)v17 = v19;
    *((_WORD *)v18 + 4) = WORD4(v24);
    *v18 = v24;
    while (1)
    {
      v17 += 16;
      if (v17 == a2)
        break;
      if (*(_QWORD *)v17 >= v2 && (*(_QWORD *)v17 != v2 || (*(_BYTE *)(v17 + 8) & 0x7Fu) >= v6))
      {
        if (v18 == (unint64_t *)a1)
          goto LABEL_21;
        v18 -= 2;
        while (*v18 >= v2)
        {
          if (*v18 == v2 && (v18[1] & 0x7F) < v6)
            break;
          v12 = v18 == (unint64_t *)a1;
          v18 -= 2;
          if (v12)
            goto LABEL_21;
        }
        if (v17 < (unint64_t)v18)
          goto LABEL_35;
        goto LABEL_55;
      }
    }
  }
LABEL_55:
  if ((uint64_t *)(v17 - 16) != a1)
  {
    v22 = *(_QWORD *)(v17 - 16);
    *((_WORD *)a1 + 4) = *(_WORD *)(v17 - 8);
    *a1 = v22;
  }
  *(_QWORD *)(v17 - 16) = v2;
  *(_BYTE *)(v17 - 8) = v3;
  *(_BYTE *)(v17 - 7) = v4;
  return v17 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot const&)#1} &,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  _QWORD *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  char v14;
  unsigned int v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v22;
  __int128 *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  __int16 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = (_QWORD *)(a2 - 16);
      v6 = *(_QWORD *)(a2 - 16);
      if (v6 < *(_QWORD *)a1 || v6 == *(_QWORD *)a1 && (*(_BYTE *)(a2 - 8) & 0x7Fu) < (*(_BYTE *)(a1 + 8) & 0x7Fu))
      {
        v32 = *(_OWORD *)a1;
        v8 = *(_WORD *)(a2 - 8);
        *(_QWORD *)a1 = *v7;
        *(_WORD *)(a1 + 8) = v8;
        *v7 = v32;
        *(_WORD *)(a2 - 8) = WORD4(v32);
      }
      return result;
    case 3:
      return 1;
    case 4:
      v22 = (__int128 *)(a1 + 16);
      v23 = (__int128 *)(a1 + 32);
      v25 = *(_QWORD *)(a2 - 16);
      v24 = a2 - 16;
      v26 = *(_QWORD *)(a1 + 32);
      v27 = v25 == v26;
      if (v25 < v26 || v27 && (*(_BYTE *)(v24 + 8) & 0x7Fu) < (*(_BYTE *)(a1 + 40) & 0x7Fu))
      {
        v33 = *v23;
        v28 = *(_WORD *)(v24 + 8);
        *(_QWORD *)v23 = *(_QWORD *)v24;
        *(_WORD *)(a1 + 40) = v28;
        *(_QWORD *)v24 = v33;
        *(_WORD *)(v24 + 8) = WORD4(v33);
        v29 = *(_QWORD *)(a1 + 32);
        v30 = *(_QWORD *)(a1 + 16);
        if (v29 < v30 || v29 == v30 && (*(_BYTE *)(a1 + 40) & 0x7Fu) < (*(_BYTE *)(a1 + 24) & 0x7Fu))
        {
          v34 = *v22;
          *(_QWORD *)v22 = *(_QWORD *)v23;
          *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 40);
          *(_QWORD *)v23 = v34;
          *(_WORD *)(a1 + 40) = WORD4(v34);
          v31 = *(_QWORD *)(a1 + 16);
          if (v31 < *(_QWORD *)a1
            || v31 == *(_QWORD *)a1 && (*(_BYTE *)(a1 + 24) & 0x7Fu) < (*(_BYTE *)(a1 + 8) & 0x7Fu))
          {
            v35 = *(_OWORD *)a1;
            *(_QWORD *)a1 = *(_QWORD *)v22;
            *(_WORD *)(a1 + 8) = *(_WORD *)(a1 + 24);
            *(_QWORD *)v22 = v35;
            *(_WORD *)(a1 + 24) = WORD4(v35);
          }
        }
      }
      return 1;
    case 5:
      return 1;
    default:
      v9 = a1 + 32;
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_QWORD *)v10;
    v14 = *(_BYTE *)(v10 + 8);
    if (*(_QWORD *)v10 < *(_QWORD *)v9)
      break;
    v15 = v14 & 0x7F;
    if (*(_QWORD *)v10 == *(_QWORD *)v9 && v15 < (*(_BYTE *)(v9 + 8) & 0x7Fu))
      goto LABEL_15;
LABEL_26:
    v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
  v15 = v14 & 0x7F;
LABEL_15:
  v17 = *(_BYTE *)(v10 + 9);
  *(_QWORD *)v10 = *(_QWORD *)v9;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v9 + 8);
  v18 = a1;
  if (v9 != a1)
  {
    v19 = v11;
    while (1)
    {
      v20 = *(_QWORD *)(a1 + v19 + 16);
      if (v13 >= v20 && (v13 != v20 || v15 >= (*(_BYTE *)(a1 + v19 + 24) & 0x7Fu)))
        break;
      *(_QWORD *)(a1 + v19 + 32) = *(_QWORD *)(a1 + v19 + 16);
      *(_WORD *)(a1 + v19 + 40) = *(_WORD *)(a1 + v19 + 24);
      v19 -= 16;
      if (v19 == -32)
      {
        v18 = a1;
        goto LABEL_25;
      }
    }
    v18 = a1 + v19 + 32;
  }
LABEL_25:
  *(_QWORD *)v18 = v13;
  *(_BYTE *)(v18 + 8) = v14;
  *(_BYTE *)(v18 + 9) = v17;
  if (++v12 != 8)
    goto LABEL_26;
  return v10 + 16 == a2;
}

uint64_t std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::State::sort(void)::{lambda(JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot const&,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot const&)#1} &,JSC::B3::Air::`anonymous namespace'::FixObviousSpills::RegSlot*>(uint64_t result, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  char v12;
  char v14;
  __int16 v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v22;

  if (a2 >= 2)
  {
    v3 = (uint64_t)a3 - result;
    v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 4)
    {
      v5 = v3 >> 3;
      v6 = (v3 >> 3) + 1;
      v7 = (unint64_t *)(result + 16 * v6);
      v8 = v5 + 2;
      if (v8 < a2)
      {
        v9 = v7[2];
        if (*v7 < v9 || (*v7 == v9 ? (v10 = (v7[1] & 0x7F) >= (v7[3] & 0x7F)) : (v10 = 1), !v10))
        {
          v7 += 2;
          v6 = v8;
        }
      }
      v11 = *a3;
      if (*v7 >= *a3)
      {
        v12 = *((_BYTE *)a3 + 8);
        if (*v7 != *a3 || (v7[1] & 0x7F) >= (v12 & 0x7Fu))
        {
          v14 = *((_BYTE *)a3 + 9);
          v15 = *((_WORD *)v7 + 4);
          *a3 = *v7;
          *((_WORD *)a3 + 4) = v15;
          if (v4 >= v6)
          {
            while (1)
            {
              v17 = 2 * v6;
              v6 = (2 * v6) | 1;
              v16 = (unint64_t *)(result + 16 * v6);
              v18 = v17 + 2;
              if (v18 < a2)
              {
                v19 = v16[2];
                if (*v16 < v19 || (*v16 == v19 ? (v20 = (v16[1] & 0x7F) >= (v16[3] & 0x7F)) : (v20 = 1), !v20))
                {
                  v16 += 2;
                  v6 = v18;
                }
              }
              if (*v16 < v11)
                break;
              if (*v16 == v11 && (v16[1] & 0x7F) < (v12 & 0x7Fu))
                break;
              v22 = *v16;
              *((_WORD *)v7 + 4) = *((_WORD *)v16 + 4);
              *v7 = v22;
              v7 = v16;
              if (v4 < v6)
                goto LABEL_18;
            }
          }
          v16 = v7;
LABEL_18:
          *v16 = v11;
          *((_BYTE *)v16 + 8) = v12;
          *((_BYTE *)v16 + 9) = v14;
        }
      }
    }
  }
  return result;
}

JSC::B3::Air::Inst *JSC::B3::Air::Inst::Inst(JSC::B3::Air::Inst *this, const JSC::B3::Air::Inst *a2)
{
  uint64_t v4;
  JSC::B3::Air::Inst *result;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v4 = *((unsigned int *)a2 + 3);
  result = (JSC::B3::Air::Inst *)((char *)this + 16);
  *(_QWORD *)this = result;
  *((_DWORD *)this + 2) = 3;
  *((_DWORD *)this + 3) = v4;
  if (v4 >= 4)
  {
    if (v4 >> 27)
    {
      __break(0xC471u);
      return result;
    }
    result = (JSC::B3::Air::Inst *)WTF::fastMalloc((WTF *)(32 * v4));
    *((_DWORD *)this + 2) = v4;
    *(_QWORD *)this = result;
  }
  v6 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v6)
  {
    v7 = *(__int128 **)a2;
    v8 = 32 * v6;
    do
    {
      v9 = *v7;
      v10 = v7[1];
      v7 += 2;
      *(_OWORD *)result = v9;
      *((_OWORD *)result + 1) = v10;
      result = (JSC::B3::Air::Inst *)((char *)result + 32);
      v8 -= 32;
    }
    while (v8);
  }
  v11 = *((_QWORD *)a2 + 14);
  *(_DWORD *)((char *)this + 119) = *(_DWORD *)((char *)a2 + 119);
  *((_QWORD *)this + 14) = v11;
  return this;
}

const void **JSC::B3::Air::Inst::operator=(const void **result, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void **v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  const void *v20;
  unsigned int v21;
  uint64_t v22;
  const void **v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;

  v9 = result;
  if (a2 == result)
  {
LABEL_11:
    v20 = a2[14];
    *(_DWORD *)((char *)v9 + 119) = *(_DWORD *)((char *)a2 + 119);
    v9[14] = v20;
    return v9;
  }
  v10 = *((_DWORD *)result + 3);
  v11 = *((_DWORD *)a2 + 3);
  if (v10 > v11)
  {
    *((_DWORD *)result + 3) = v11;
    v10 = v11;
    goto LABEL_4;
  }
  v12 = *((_DWORD *)result + 2);
  if (v11 <= v12)
  {
LABEL_4:
    if (v10)
    {
      memmove((void *)*v9, *a2, 32 * v10 - 7);
      v10 = *((_DWORD *)v9 + 3);
    }
    v13 = *((unsigned int *)a2 + 3);
    if (v10 != (_DWORD)v13)
    {
      v14 = v10;
      v15 = (char *)*v9 + 32 * v10;
      v16 = (__int128 *)((char *)*a2 + 32 * v14);
      v17 = 32 * v13 - 32 * v14;
      do
      {
        v18 = *v16;
        v19 = v16[1];
        v16 += 2;
        *v15 = v18;
        v15[1] = v19;
        v15 += 2;
        v17 -= 32;
      }
      while (v17);
      v10 = *((_DWORD *)a2 + 3);
    }
    *((_DWORD *)v9 + 3) = v10;
    goto LABEL_11;
  }
  if (v12)
  {
    if (v10)
      *((_DWORD *)result + 3) = 0;
    result = (const void **)*result;
    if (v9 + 2 != *v9 && result)
    {
      *v9 = 0;
      *((_DWORD *)v9 + 2) = 0;
      WTF::fastFree((unint64_t)result, a2, a3, a4, a5, a6, a7, a8);
      result = (const void **)*v9;
      if (*v9)
        goto LABEL_19;
    }
    else if (result)
    {
LABEL_19:
      v21 = *((_DWORD *)v9 + 2);
      goto LABEL_23;
    }
    *v9 = v9 + 2;
    v21 = 3;
    *((_DWORD *)v9 + 2) = 3;
  }
  else
  {
    v21 = 0;
  }
LABEL_23:
  v22 = *((unsigned int *)a2 + 3);
  if (v21 >= v22)
  {
LABEL_24:
    v10 = *((_DWORD *)v9 + 3);
    goto LABEL_4;
  }
  v23 = (const void **)*v9;
  v24 = *((unsigned int *)v9 + 3);
  if (v22 < 4)
  {
    v25 = v9 + 2;
    *v9 = v9 + 2;
    *((_DWORD *)v9 + 2) = 3;
    if (!(_DWORD)v24)
      goto LABEL_30;
LABEL_28:
    v26 = 32 * v24;
    v27 = (__int128 *)v23;
    do
    {
      v28 = *v27;
      v29 = v27[1];
      v27 += 2;
      *v25 = v28;
      v25[1] = v29;
      v25 += 2;
      v26 -= 32;
    }
    while (v26);
LABEL_30:
    if (v9 + 2 != v23 && v23)
    {
      if (*v9 == v23)
      {
        *v9 = 0;
        *((_DWORD *)v9 + 2) = 0;
      }
      WTF::fastFree((unint64_t)v23, a2, a3, a4, a5, a6, a7, a8);
    }
    goto LABEL_24;
  }
  if (!(v22 >> 27))
  {
    v25 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v22));
    *((_DWORD *)v9 + 2) = v22;
    *v9 = v25;
    if (!(_DWORD)v24)
      goto LABEL_30;
    goto LABEL_28;
  }
  __break(0xC471u);
  return result;
}

uint64_t _ZZN3JSC2B33Air12_GLOBAL__N_116FixObviousSpills7fixInstEvENKUlRKT_E_clINS3_7RegSlotEEEDaS6_(uint64_t result, unsigned int a2, char *a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int8 *v5;
  char v6;

  if (a2)
  {
    v4 = a2;
    v5 = (unsigned __int8 *)(result + 9);
    while (*(_QWORD *)(v5 - 9) != *(_QWORD *)a4
         || ((*(v5 - 1) ^ *(_BYTE *)(a4 + 8)) & 0x7F) != 0
         || *v5 != *(unsigned __int8 *)(a4 + 9))
    {
      v5 += 16;
      if (!--v4)
        goto LABEL_7;
    }
    v6 = 0;
  }
  else
  {
LABEL_7:
    v6 = 1;
  }
  if (!*a3)
    v6 = 0;
  *a3 = v6;
  return result;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::`anonymous namespace'::FixObviousSpills::fixInst(void)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t result, uint64_t *a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  char v16;
  int v17;
  int v18;
  int v19;

  if (*((_BYTE *)a2 + 8) == 9)
  {
    v5 = *a2;
    if (*(_BYTE *)(*a2 + 4) == 1)
    {
      v6 = *(uint64_t **)(result + 16);
      v7 = *v6;
      if ((a3 > 0xB || ((1 << a3) & 0xF3C) == 0) && a3 - 4 >= 7)
      {
        v8 = *(unsigned int *)(v7 + 68);
        if ((_DWORD)v8)
        {
          v9 = (_BYTE *)(*(_QWORD *)(v7 + 56) + 8);
          v10 = 16 * v8;
          while (*((_QWORD *)v9 - 1) != v5)
          {
            v9 += 16;
            v10 -= 16;
            if (!v10)
              goto LABEL_11;
          }
          if (a5 == 3)
          {
            if (!v9[1])
            {
LABEL_23:
              v16 = *v9;
              v17 = *v9 & 0x7F;
              v18 = (char)(31 - (*v9 & 0x7F));
              if ((v16 & 0x60) != 0)
                v19 = v18;
              else
                v19 = v17 + 1;
              *a2 = 0;
              *((_WORD *)a2 + 4) = 513;
              if (v17 == 127)
                v19 = 0;
              *((_DWORD *)a2 + 3) = 1;
              *((_DWORD *)a2 + 4) = v19;
              *((_DWORD *)a2 + 5) = 0;
              *((_BYTE *)a2 + 24) = 0;
LABEL_20:
              *(_BYTE *)v6[1] = 1;
            }
          }
          else if (a5 == 2)
          {
            goto LABEL_23;
          }
        }
        else
        {
LABEL_11:
          v11 = *(unsigned int *)(v7 + 52);
          if ((_DWORD)v11)
          {
            v12 = (uint64_t *)(*(_QWORD *)(v7 + 40) + 8);
            v13 = 16 * v11;
            while (*(v12 - 1) != v5)
            {
              v12 += 2;
              v13 -= 16;
              if (!v13)
                return result;
            }
            v14 = *v12;
            if ((unint64_t)(*v12 + 4095) >= 0x1FFF
              && ((v14 & 0xFFF) != 0
               || (unint64_t)v14 >> 24 && v14 >> 12 != 0 && (unint64_t)(v14 >> 12) < 0xFFFFFFFFFFFFF001))
            {
              *((_BYTE *)a2 + 24) = 0;
              a2[2] = 0;
              *a2 = v14;
              v15 = 515;
            }
            else
            {
              *((_BYTE *)a2 + 24) = 0;
              a2[2] = 0;
              *a2 = v14;
              v15 = 514;
            }
            *((_WORD *)a2 + 4) = v15;
            *((_DWORD *)a2 + 3) = 1;
            goto LABEL_20;
          }
        }
      }
    }
  }
  return result;
}

uint64_t *JSC::B3::Air::`anonymous namespace'::FixObviousSpills::fixInst(void)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(uint64_t *result, uint64_t *a2, unsigned int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  int v15;
  int v16;
  int v17;

  if (*((_BYTE *)a2 + 8) == 9)
  {
    v4 = *a2;
    if (*(_BYTE *)(*a2 + 4) == 1)
    {
      v5 = *result;
      if ((a3 > 0xB || ((1 << a3) & 0xF3C) == 0) && a3 - 4 >= 7)
      {
        v6 = *(unsigned int *)(v5 + 68);
        if ((_DWORD)v6)
        {
          v7 = (_BYTE *)(*(_QWORD *)(v5 + 56) + 8);
          v8 = 16 * v6;
          while (*((_QWORD *)v7 - 1) != v4)
          {
            v7 += 16;
            v8 -= 16;
            if (!v8)
              goto LABEL_11;
          }
          if (a4 == 3)
          {
            if (!v7[1])
            {
LABEL_23:
              v14 = *v7;
              v15 = *v7 & 0x7F;
              v16 = (char)(31 - (*v7 & 0x7F));
              if ((v14 & 0x60) != 0)
                v17 = v16;
              else
                v17 = v15 + 1;
              *a2 = 0;
              *((_WORD *)a2 + 4) = 513;
              if (v15 == 127)
                v17 = 0;
              *((_DWORD *)a2 + 3) = 1;
              *((_DWORD *)a2 + 4) = v17;
              *((_DWORD *)a2 + 5) = 0;
              *((_BYTE *)a2 + 24) = 0;
LABEL_20:
              *(_BYTE *)result[1] = 1;
            }
          }
          else if (a4 == 2)
          {
            goto LABEL_23;
          }
        }
        else
        {
LABEL_11:
          v9 = *(unsigned int *)(v5 + 52);
          if ((_DWORD)v9)
          {
            v10 = (uint64_t *)(*(_QWORD *)(v5 + 40) + 8);
            v11 = 16 * v9;
            while (*(v10 - 1) != v4)
            {
              v10 += 2;
              v11 -= 16;
              if (!v11)
                return result;
            }
            v12 = *v10;
            if ((unint64_t)(*v10 + 4095) >= 0x1FFF
              && ((v12 & 0xFFF) != 0
               || (unint64_t)v12 >> 24 && v12 >> 12 != 0 && (unint64_t)(v12 >> 12) < 0xFFFFFFFFFFFFF001))
            {
              *((_BYTE *)a2 + 24) = 0;
              a2[2] = 0;
              *a2 = v12;
              v13 = 515;
            }
            else
            {
              *((_BYTE *)a2 + 24) = 0;
              a2[2] = 0;
              *a2 = v12;
              v13 = 514;
            }
            *((_WORD *)a2 + 4) = v13;
            *((_DWORD *)a2 + 3) = 1;
            goto LABEL_20;
          }
        }
      }
    }
  }
  return result;
}

__n128 WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::`anonymous namespace'::FixObviousSpills::fixInst(void)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#2}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v6;
  JSC::B3::Air::Inst *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  _BYTE v15[32];

  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)v15 = *(_OWORD *)a2;
  *(_OWORD *)&v15[16] = *(_OWORD *)(a2 + 16);
  if ((JSC::B3::Air::Inst::isValidForm(*(JSC::B3::Air::Inst **)(v6 + 8), v7, v8, v9, v10, v11, v12, v13) & 1) == 0)
  {
    *(_OWORD *)a2 = *(_OWORD *)v15;
    result = *(__n128 *)&v15[9];
    *(_OWORD *)(a2 + 9) = *(_OWORD *)&v15[9];
  }
  return result;
}

void WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v8 = a2;
  v10 = *(unsigned int *)(a1 + 12);
  if (v10 < a2)
  {
    v11 = *(unsigned int *)(a1 + 8);
    if (v11 < a2)
    {
      v12 = v11 + (v11 >> 2);
      if (v12 >= 0x10)
        v13 = v12 + 1;
      else
        v13 = 16;
      if (v13 > a2)
        a2 = v13;
      WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    }
    v14 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v15 = *(unsigned int *)(a1 + 12);
      if (v15 != v8)
      {
        v16 = v15 << 7;
        v17 = v8 << 7;
        do
        {
          v18 = v14 + v16;
          *(_QWORD *)v18 = v14 + v16 + 16;
          *(_QWORD *)(v18 + 8) = 3;
          *(_QWORD *)(v18 + 112) = 0;
          *(_WORD *)(v18 + 120) = 0;
          *(_BYTE *)(v18 + 122) = *(_BYTE *)(v14 + v16 + 122) & 0xFC;
          v17 -= 128;
          v14 += 128;
        }
        while (v16 != v17);
      }
    }
  }
  else
  {
    WTF::VectorTypeOperations<JSC::B3::Air::Inst>::destruct((unint64_t *)(*(_QWORD *)a1 + (a2 << 7)), (unint64_t *)(*(_QWORD *)a1 + (v10 << 7)), a3, a4, a5, a6, a7, a8);
  }
  *(_DWORD *)(a1 + 12) = v8;
}

void WTF::VectorTypeOperations<JSC::B3::Air::Inst>::destruct(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  unint64_t v10;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = *v9;
      if (v9 + 2 != (unint64_t *)*v9 && v10 != 0)
      {
        *v9 = 0;
        *((_DWORD *)v9 + 2) = 0;
        WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
      }
      v9 += 16;
    }
    while (v9 != a2);
  }
}

void WTF::VectorTypeOperations<WTF::Insertion<JSC::B3::Air::Inst>>::destruct(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  unint64_t v10;
  char *v12;

  if (a1 != a2)
  {
    v9 = a1 + 24;
    do
    {
      v10 = *((_QWORD *)v9 - 2);
      if (v9 != (char *)v10 && v10 != 0)
      {
        *((_QWORD *)v9 - 2) = 0;
        *((_DWORD *)v9 - 2) = 0;
        WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
      }
      v12 = v9 + 112;
      v9 += 136;
    }
    while (v12 != a2);
  }
}

_QWORD *JSC::B3::Air::generateWithAlreadyAllocatedRegisters(JSC::B3::Air::Code &,JSC::CCallHelpers &)::$_1::operator()(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  if (*(_BYTE *)(*result + 197))
  {
    v2 = result[1];
    v3 = *(_DWORD *)(result[2] + 200);
    if (a2)
    {
      v4 = *(_QWORD *)(a2 + 24);
      v5 = *(unsigned int *)(v2 + 12);
      if (!(_DWORD)v5 || *(_DWORD *)(*(_QWORD *)v2 + 16 * v5 - 16) != v3)
      {
        v9 = *(_DWORD *)(result[2] + 200);
        v10 = v4;
        if ((_DWORD)v5 != *(_DWORD *)(v2 + 8))
        {
          v6 = *(_QWORD *)v2 + 16 * v5;
          *(_DWORD *)v6 = v3;
          *(_QWORD *)(v6 + 8) = v4;
LABEL_12:
          *(_DWORD *)(v2 + 12) = v5 + 1;
          return result;
        }
LABEL_10:
        result = (_QWORD *)WTF::Vector<JSC::B3::PCToOriginMap::OriginRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2, v5 + 1, (unint64_t)&v9);
        v5 = *(unsigned int *)(v2 + 12);
        v7 = *(_QWORD *)v2 + 16 * v5;
        *(_DWORD *)v7 = *(_DWORD *)result;
        *(_QWORD *)(v7 + 8) = result[1];
        goto LABEL_12;
      }
    }
    else
    {
      v5 = *(unsigned int *)(v2 + 12);
      if (!(_DWORD)v5 || *(_DWORD *)(*(_QWORD *)v2 + 16 * v5 - 16) != v3)
      {
        v9 = *(_DWORD *)(result[2] + 200);
        v10 = 0;
        if ((_DWORD)v5 != *(_DWORD *)(v2 + 8))
        {
          v8 = *(_QWORD *)v2 + 16 * v5;
          *(_DWORD *)v8 = v3;
          *(_QWORD *)(v8 + 8) = 0;
          goto LABEL_12;
        }
        goto LABEL_10;
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<JSC::B3::PCToOriginMap::OriginRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::B3::PCToOriginMap::OriginRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = v5;
      do
      {
        *(_DWORD *)v11 = *(_DWORD *)v19;
        *(_QWORD *)(v11 + 8) = *(_QWORD *)(v19 + 8);
        v19 += 16;
        v11 += 16;
      }
      while (v19 != v5 + 16 * v10);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::B3::PCToOriginMap::OriginRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = v7;
        do
        {
          *(_DWORD *)v9 = *(_DWORD *)v17;
          *(_QWORD *)(v9 + 8) = *(_QWORD *)(v17 + 8);
          v17 += 16;
          v9 += 16;
        }
        while (v17 != v7 + 16 * v8);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void JSC::MacroAssemblerARM64::loadPair32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if ((a3 & 3) != 0 || (((int)a3 >> 2) + 64) > 0x7F)
  {
    v14 = a3 << 32;
    if ((_DWORD)a2 == (_DWORD)a4)
    {
      JSC::MacroAssemblerARM64::load32((uint64_t)a1, (v14 + 0x400000000) | a2, a5, a4, a5, a6, a7, a8);
      v20 = v14 | a2;
      v21 = (uint64_t)a1;
      v22 = a2;
    }
    else
    {
      v23 = a2;
      JSC::MacroAssemblerARM64::load32((uint64_t)a1, v14 | a2, a4, a4, a5, a6, a7, a8);
      v20 = (v14 + 0x400000000) | v23;
      v21 = (uint64_t)a1;
      v22 = a5;
    }
    JSC::MacroAssemblerARM64::load32(v21, v20, v22, v15, v16, v17, v18, v19);
  }
  else
  {
    v11 = a4 & 0x1F | (32 * a2);
    v12 = v11 | 0x29400000 | ((((int)a3 >> 2) & 0x7F) << 15) | ((a5 & 0x1F) << 10);
    v13 = a1[50];
    if (v13 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, v11, a5, a6, a7, a8);
      v13 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = v12;
    a1[50] += 4;
  }
}

void JSC::MacroAssemblerARM64::floatingPointCompare<JSC::MacroAssemblerARM64::compareFloat(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}>(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::AssemblerBuffer *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  char v78;
  __int16 v79;
  char v80;

  v9 = a3;
  if ((_DWORD)a2 == 7)
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, 0, a3, (uint64_t)a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::compareFloat(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}::operator()(a4, v18, v19, v20, v21, v22, v23, v24);
    if (*(_BYTE *)(a1 + 328))
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, v25, v26, v27, v28, v29, v30, v31);
    v32 = (JSC::AssemblerBuffer *)(a1 + 56);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 1409286150, v26, v27, v28, v29, v30, v31);
    v33 = *(_DWORD *)(a1 + 200);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 3573751839, v34, v35, v36, v37, v38, v39);
    if (*(_BYTE *)(a1 + 328))
      v46 = -122;
    else
      v46 = -126;
    v76 = v33;
    v77 = 0;
    v78 = v46;
    v79 = 6;
    v80 = -1;
    v47 = (v9 & 0x1F | 0x1A9F17E0u) - 4096;
  }
  else
  {
    v11 = a2;
    if ((_DWORD)a2 != 6)
    {
      JSC::MacroAssemblerARM64::compareFloat(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}::operator()(a4, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), (v9 & 0x1F | ((v11 & 0xF) << 12)) ^ 0x1A9F17E0u, v12, v13, v14, v15, v16, v17);
      return;
    }
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)1, a3, (uint64_t)a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::compareFloat(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}::operator()(a4, v48, v49, v50, v51, v52, v53, v54);
    if (*(_BYTE *)(a1 + 328))
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, v55, v56, v57, v58, v59, v60, v61);
    v32 = (JSC::AssemblerBuffer *)(a1 + 56);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 1409286150, v56, v57, v58, v59, v60, v61);
    v62 = *(_DWORD *)(a1 + 200);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 3573751839, v63, v64, v65, v66, v67, v68);
    if (*(_BYTE *)(a1 + 328))
      v69 = -122;
    else
      v69 = -126;
    v76 = v62;
    v77 = 0;
    v78 = v69;
    v79 = 6;
    v80 = -1;
    v47 = v9 & 0x1F | 0x1A9F17E0u;
  }
  JSC::AssemblerBuffer::putInt(v32, v47, v40, v41, v42, v43, v44, v45);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v76, a1, v70, v71, v72, v73, v74, v75);
}

void JSC::MacroAssemblerARM64::compareFloat(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}::operator()(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(*a1 + 56), (32 * *a1[1]) | (*a1[2] << 16) | 0x1E202000u, a3, a4, a5, a6, a7, a8);
}

void JSC::MacroAssemblerARM64::compareDoubleWithZero(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}::operator()(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned int v10;

  v8 = a2;
  v10 = a1[50];
  if (v10 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v10 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v10) = (32 * v8) | 0x1E602008;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::floatingPointCompare<JSC::MacroAssemblerARM64::compareFloatWithZero(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::AssemblerBuffer *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  int v76;
  char v77;
  __int16 v78;
  char v79;

  v10 = a3;
  if (a2 == 7)
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, 0, a3, a4, (uint64_t)a5, a6, a7, a8);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a4 + 56), (32 * *a5) | 0x1E202008u, v19, v20, v21, v22, v23, v24);
    if (*(_BYTE *)(a1 + 328))
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, v25, v26, v27, v28, v29, v30, v31);
    v32 = (JSC::AssemblerBuffer *)(a1 + 56);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 1409286150, v26, v27, v28, v29, v30, v31);
    v33 = *(_DWORD *)(a1 + 200);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 3573751839, v34, v35, v36, v37, v38, v39);
    if (*(_BYTE *)(a1 + 328))
      v46 = -122;
    else
      v46 = -126;
    v75 = v33;
    v76 = 0;
    v77 = v46;
    v78 = 6;
    v79 = -1;
    v47 = (v10 & 0x1F | 0x1A9F17E0u) - 4096;
  }
  else
  {
    v12 = a2;
    if (a2 != 6)
    {
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a4 + 56), (32 * *a5) | 0x1E202008u, a3, a4, (uint64_t)a5, a6, a7, a8);
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), (v10 & 0x1F | ((v12 & 0xF) << 12)) ^ 0x1A9F17E0u, v13, v14, v15, v16, v17, v18);
      return;
    }
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)1, a3, a4, (uint64_t)a5, a6, a7, a8);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a4 + 56), (32 * *a5) | 0x1E202008u, v54, v55, v56, v57, v58, v59);
    if (*(_BYTE *)(a1 + 328))
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, v60, v61, v62, v63, v64, v65, v66);
    v32 = (JSC::AssemblerBuffer *)(a1 + 56);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 1409286150, v61, v62, v63, v64, v65, v66);
    v67 = *(_DWORD *)(a1 + 200);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 3573751839, v68, v69, v70, v71, v72, v73);
    if (*(_BYTE *)(a1 + 328))
      v74 = -122;
    else
      v74 = -126;
    v75 = v67;
    v76 = 0;
    v77 = v74;
    v78 = 6;
    v79 = -1;
    v47 = v10 & 0x1F | 0x1A9F17E0u;
  }
  JSC::AssemblerBuffer::putInt(v32, v47, v40, v41, v42, v43, v44, v45);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v75, a1, v48, v49, v50, v51, v52, v53);
}

void JSC::MacroAssemblerARM64::branchAdd64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v13 = -1610612736;
  if (a5 < 0x1000)
    goto LABEL_2;
  v16 = -(int)a5;
  if (-(int)a5 < 0x1000)
  {
    v17 = -536870912;
LABEL_5:
    v14 = a6 & 0x1F | (32 * a4) | v17 | (v16 << 10);
    v15 = 285212672;
    goto LABEL_6;
  }
  if ((a5 & 0xFFF) == 0)
  {
    if (!BYTE3(a5))
    {
      v13 = -1606418432;
      a5 = ((int)a5 >> 12);
LABEL_2:
      v14 = a6 & 0x1F | (32 * a4) | v13;
      v15 = ((a5 & 0xFFF) << 10) | 0x11000000;
LABEL_6:
      v18 = v14 | v15;
      v19 = *(_DWORD *)(a2 + 200);
      if (v19 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
        v19 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v19) = v18;
      v20 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v20;
      if (*(_BYTE *)(a2 + 328))
      {
        for (; (signed int)v20 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v20)
        {
          if (v20 + 4 > *(_DWORD *)(a2 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
            v20 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v20) = -721215457;
          v20 = *(_DWORD *)(a2 + 200) + 4;
        }
        *(_DWORD *)(a2 + 208) = 0;
      }
      if (v20 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
        v20 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v20) = a3 | 0x54000000;
      v21 = *(_DWORD *)(a2 + 200);
      v22 = v21 + 4;
      *(_DWORD *)(a2 + 200) = v21 + 4;
      v23 = v21 + 8;
      v24 = v21 + 4;
      if (v23 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
        v24 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v24) = -721215457;
      *(_DWORD *)(a2 + 200) += 4;
      if (*(_BYTE *)(a2 + 328))
        v25 = -122;
      else
        v25 = -126;
      *(_DWORD *)a1 = v22;
      *(_DWORD *)(a1 + 4) = 0;
      *(_BYTE *)(a1 + 8) = v25;
      *(_BYTE *)(a1 + 9) = a3;
      *(_WORD *)(a1 + 10) = -256;
      return;
    }
    v16 = -((int)a5 >> 12);
    if (v16 < 0x1000)
    {
      v17 = -532676608;
      goto LABEL_5;
    }
  }
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1980DE934);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)a5, *(char *)(a2 + 272), a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branchAdd64(a2, a3, a4, 16, a6, v26, v27, v28, a1);
}

{
  JSC::AssemblerBuffer *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  char v17;

  v10 = (JSC::AssemblerBuffer *)(a2 + 56);
  v11 = *(_DWORD *)(a2 + 200);
  if (v11 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
    v11 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v11) = -1325391806;
  v12 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v12;
  if (*(_BYTE *)(a2 + 328))
  {
    while ((signed int)v12 < *(_DWORD *)(a2 + 52))
    {
      if (v12 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
        v12 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v12) = -721215457;
      v12 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v12;
    }
    *(_DWORD *)(a2 + 208) = 0;
  }
  if (v12 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v12) = 1409286144;
  v13 = *(_DWORD *)(a2 + 200);
  v14 = v13 + 4;
  *(_DWORD *)(a2 + 200) = v13 + 4;
  v15 = v13 + 8;
  v16 = v13 + 4;
  if (v15 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    v16 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v16) = -721215457;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v17 = -122;
  else
    v17 = -126;
  *(_DWORD *)a1 = v14;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = v17;
  *(_WORD *)(a1 + 9) = 0;
  *(_BYTE *)(a1 + 11) = -1;
}

void JSC::MacroAssemblerARM64::branchSub64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v9;
  unsigned __int8 v11;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v9 = a5;
  v11 = a2;
  if (a4 < 0x1000)
  {
    v14 = -536870912;
LABEL_3:
    v15 = a5 & 0x1F | (32 * a3) | v14;
    v16 = ((a4 & 0xFFF) << 10) | 0x11000000;
LABEL_6:
    v19 = v15 | v16;
    v20 = *(_DWORD *)(a1 + 200);
    if (v20 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v20 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v20) = v19;
    v21 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v21;
    if (*(_BYTE *)(a1 + 328))
    {
      for (; (signed int)v21 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v21)
      {
        if (v21 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          v21 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v21) = -721215457;
        v21 = *(_DWORD *)(a1 + 200) + 4;
      }
      *(_DWORD *)(a1 + 208) = 0;
    }
    if (v21 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v21 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v21) = v11 | 0x54000000;
    v22 = *(_DWORD *)(a1 + 200);
    v23 = v22 + 4;
    *(_DWORD *)(a1 + 200) = v22 + 4;
    v24 = v22 + 8;
    v25 = v22 + 4;
    if (v24 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v25 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = -721215457;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v26 = -122;
    else
      v26 = -126;
    *(_DWORD *)a9 = v23;
    *(_DWORD *)(a9 + 4) = 0;
    *(_BYTE *)(a9 + 8) = v26;
    *(_BYTE *)(a9 + 9) = v11;
    *(_WORD *)(a9 + 10) = -256;
    return;
  }
  v17 = -1610612736;
  v18 = -(int)a4;
  if (-(int)a4 < 0x1000)
  {
LABEL_5:
    v15 = a5 & 0x1F | (32 * a3) | v17 | (v18 << 10);
    v16 = 285212672;
    goto LABEL_6;
  }
  if ((a4 & 0xFFF) == 0)
  {
    if (!BYTE3(a4))
    {
      v14 = -532676608;
      a4 = ((int)a4 >> 12);
      goto LABEL_3;
    }
    v18 = -((int)a4 >> 12);
    if (v18 < 0x1000)
    {
      v17 = -1606418432;
      goto LABEL_5;
    }
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1980DEBA8);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a4, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branchSub64(a1, v11, a3, 16, v9, v27, v28, v29, a9);
}

void JSC::MacroAssemblerARM64::moveConditionallyAfterFloatingPointCompare<64>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::AssemblerBuffer *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  JSC::AssemblerBuffer *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  JSC::AssemblerBuffer *v52;
  int v53;
  uint64_t v54;
  JSC::AssemblerBuffer *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  unsigned int v71;
  int v72;
  char v73;
  __int16 v74;
  char v75;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  if ((_DWORD)a2 == 6)
  {
    if ((_DWORD)a5 == (_DWORD)a4)
    {
      v53 = ((a5 & 0x1F) << 16) | (32 * (a3 & 0x1F)) | a5 & 0x1F;
      v54 = v53 | 0x9A800000;
      v55 = (JSC::AssemblerBuffer *)(a1 + 56);
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), v53 | 0x9A806000, a3, a4, a5, a6, a7, a8);
      v52 = v55;
      v51 = v54;
      goto LABEL_17;
    }
    JSC::MacroAssemblerARM64::move((_DWORD *)a1, a3, a5, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(a1 + 328))
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, v14, v15, v16, v17, v18, v19, v20);
    v21 = (JSC::AssemblerBuffer *)(a1 + 56);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 1409286150, v15, v16, v17, v18, v19, v20);
    v22 = *(_DWORD *)(a1 + 200);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 3573751839, v23, v24, v25, v26, v27, v28);
    if (*(_BYTE *)(a1 + 328))
      v35 = -122;
    else
      v35 = -126;
    v71 = v22;
    v72 = 0;
    v73 = v35;
    v74 = 6;
    v75 = -1;
    v36 = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x9A800000;
LABEL_13:
    JSC::AssemblerBuffer::putInt(v21, v36, v29, v30, v31, v32, v33, v34);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v71, a1, v37, v38, v39, v40, v41, v42);
    return;
  }
  if ((_DWORD)a2 == 7)
  {
    if ((_DWORD)a5 == (_DWORD)a3)
    {
      v43 = a4 & 0x1F;
      v44 = (JSC::AssemblerBuffer *)(a1 + 56);
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), (unsigned __int16)(32 * (a4 & 0x1F)) | ((a5 & 0x1F) << 16) | a5 & 0x1F | 0x9A806000, a3, a4, a5, a6, a7, a8);
      v51 = (v43 << 16) | (32 * (v8 & 0x1F)) | v8 & 0x1F | 0x9A801000;
      v52 = v44;
LABEL_17:
      JSC::AssemblerBuffer::putInt(v52, v51, v45, v46, v47, v48, v49, v50);
      return;
    }
    JSC::MacroAssemblerARM64::move((_DWORD *)a1, a4, a5, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(a1 + 328))
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, v56, v57, v58, v59, v60, v61, v62);
    v21 = (JSC::AssemblerBuffer *)(a1 + 56);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 1409286150, v57, v58, v59, v60, v61, v62);
    v63 = *(_DWORD *)(a1 + 200);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 3573751839, v64, v65, v66, v67, v68, v69);
    if (*(_BYTE *)(a1 + 328))
      v70 = -122;
    else
      v70 = -126;
    v71 = v63;
    v72 = 0;
    v73 = v70;
    v74 = 6;
    v75 = -1;
    v36 = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x9A801000;
    goto LABEL_13;
  }
  v12 = (a2 << 12) | ((a4 & 0x1F) << 16) | (32 * (a3 & 0x1F)) | a5 & 0x1F | 0x9A800000;
  v13 = *(_DWORD *)(a1 + 200);
  if (v13 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
  *(_DWORD *)(a1 + 200) += 4;
}

{
  char v8;
  char v9;
  unsigned int i;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  char v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27[2];
  char v28;
  __int16 v29;
  char v30;

  v8 = a4;
  v9 = a3;
  if ((_DWORD)a2 == 6)
  {
    v20 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a4 & 0x1F) << 16) | a4 & 0x1F;
    v21 = *(_DWORD *)(a1 + 200);
    if (v21 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v21 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v21) = v20 | 0x9A806000;
    v22 = *(_DWORD *)(a1 + 200);
    v23 = v22 + 4;
    *(_DWORD *)(a1 + 200) = v22 + 4;
    v24 = v20 | 0x9A800000;
    if ((v22 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v23 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = v24;
    goto LABEL_23;
  }
  if ((_DWORD)a2 != 7)
  {
    v25 = (a2 << 12) | ((a4 & 0x1F) << 16) | (32 * (a3 & 0x1F)) | a4 & 0x1F | 0x9A800000;
    v26 = *(_DWORD *)(a1 + 200);
    if (v26 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v26 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v26) = v25;
LABEL_23:
    *(_DWORD *)(a1 + 200) += 4;
    return;
  }
  if (*(_BYTE *)(a1 + 328))
  {
    for (i = *(_DWORD *)(a1 + 200); (signed int)i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
    {
      if (i + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        i = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
      i = *(_DWORD *)(a1 + 200) + 4;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  else
  {
    i = *(_DWORD *)(a1 + 200);
  }
  if (i + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    i = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = 1409286150;
  v12 = *(_DWORD *)(a1 + 200);
  v13 = v12 + 4;
  *(_DWORD *)(a1 + 200) = v12 + 4;
  v14 = v12 + 8;
  v15 = v12 + 4;
  if (v14 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = -721215457;
  v16 = *(_DWORD *)(a1 + 200);
  v17 = v16 + 4;
  *(_DWORD *)(a1 + 200) = v16 + 4;
  if (*(_BYTE *)(a1 + 328))
    v18 = -122;
  else
    v18 = -126;
  v27[0] = v13;
  v27[1] = 0;
  v28 = v18;
  v29 = 6;
  v30 = -1;
  v19 = (unsigned __int16)(32 * (v9 & 0x1F)) | ((v8 & 0x1F) << 16) | v8 & 0x1F | 0x9A801000;
  if ((v16 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v17 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v17) = v19;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v27, a1, a3, a4, a5, a6, a7, a8);
}

_OWORD *WTF::Vector<JSC::B3::Air::Inst,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *result;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v9 = WTF::Vector<JSC::B3::Air::Inst,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2, a4, a5, a6, a7, a8);
  v10 = *(unsigned int *)(a1 + 12);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)a1 + (v10 << 7);
  v13 = *(unsigned int *)(v9 + 12);
  result = (_OWORD *)(v12 + 16);
  *(_QWORD *)v12 = v12 + 16;
  *(_DWORD *)(v12 + 8) = 3;
  *(_DWORD *)(v12 + 12) = v13;
  if (v13 >= 4)
  {
    if (v13 >> 27)
    {
      __break(0xC471u);
      return result;
    }
    result = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v13));
    *(_DWORD *)(v12 + 8) = v13;
    *(_QWORD *)v12 = result;
  }
  v15 = *(unsigned int *)(v9 + 12);
  if ((_DWORD)v15)
  {
    v16 = *(__int128 **)v9;
    v17 = 32 * v15;
    do
    {
      v18 = *v16;
      v19 = v16[1];
      v16 += 2;
      *result = v18;
      result[1] = v19;
      result += 2;
      v17 -= 32;
    }
    while (v17);
  }
  v20 = v11 + (v10 << 7);
  v21 = *(_QWORD *)(v9 + 112);
  *(_DWORD *)(v20 + 119) = *(_DWORD *)(v9 + 119);
  *(_QWORD *)(v20 + 112) = v21;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::B3::Air::Inst,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v10 + ((unint64_t)*(unsigned int *)(a1 + 12) << 7) <= a3)
  {
    v14 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 > a2)
      a2 = v15;
    WTF::Vector<JSC::B3::Air::Inst,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v11 = a3 - v10;
    v12 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v12 >= 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    if (v13 > a2)
      a2 = v13;
    WTF::Vector<JSC::B3::Air::Inst,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v11;
  }
  return v8;
}

void WTF::Vector<JSC::B3::Air::Inst,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;

  if (*(unsigned int *)(a1 + 8) >= a2)
    return;
  v8 = a2;
  v10 = *(_QWORD *)a1;
  v11 = *(unsigned int *)(a1 + 12);
  if (a2 >= 2)
  {
    if (a2 >> 25)
    {
      __break(0xC471u);
      return;
    }
    v12 = WTF::fastMalloc((WTF *)(a2 << 7));
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v12;
    if (!(_DWORD)v11)
      goto LABEL_18;
    goto LABEL_7;
  }
  v12 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 1;
  if ((_DWORD)v11)
  {
LABEL_7:
    v13 = v10;
    do
    {
      *(_QWORD *)v12 = v12 + 16;
      *(_QWORD *)(v12 + 8) = 3;
      v14 = v13 + 16;
      v15 = *(_QWORD *)v13;
      if (*(_QWORD *)v13 == v13 + 16)
      {
        v16 = *(unsigned int *)(v13 + 12);
        if ((_DWORD)v16)
        {
          v17 = 0;
          v18 = 32 * v16;
          do
          {
            v19 = v12 + v17;
            v20 = *(_OWORD *)(v15 + v17 + 16);
            *(_OWORD *)(v19 + 16) = *(_OWORD *)(v15 + v17);
            *(_OWORD *)(v19 + 32) = v20;
            v17 += 32;
          }
          while (v18 != v17);
        }
      }
      else
      {
        *(_QWORD *)v13 = v14;
        *(_QWORD *)v12 = v15;
        v24 = *(_DWORD *)(v13 + 8);
        *(_DWORD *)(v13 + 8) = 3;
        *(_DWORD *)(v12 + 8) = v24;
      }
      v21 = *(_DWORD *)(v13 + 12);
      *(_DWORD *)(v13 + 12) = 0;
      *(_DWORD *)(v12 + 12) = v21;
      v22 = *(_QWORD *)(v13 + 112);
      *(_DWORD *)(v12 + 119) = *(_DWORD *)(v13 + 119);
      *(_QWORD *)(v12 + 112) = v22;
      v23 = *(_QWORD *)v13;
      if (v14 != *(_QWORD *)v13 && v23)
      {
        *(_QWORD *)v13 = 0;
        *(_DWORD *)(v13 + 8) = 0;
        WTF::fastFree(v23, (void *)a2, a3, a4, a5, a6, a7, a8);
      }
      v12 += 128;
      v13 += 128;
    }
    while (v13 != v10 + (v11 << 7));
  }
LABEL_18:
  if (a1 + 16 != v10 && v10 != 0)
  {
    if (*(_QWORD *)a1 == v10)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst const&>(uint64_t a1, unint64_t a2)
{
  const JSC::B3::Air::Inst *v3;

  v3 = (const JSC::B3::Air::Inst *)WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  JSC::B3::Air::Inst::Inst((JSC::B3::Air::Inst *)(*(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 7)), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

void WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::BasicBlock*&>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v10 = *(unsigned int *)(a1 + 8);
  v11 = *(unsigned int *)(a1 + 12);
  v12 = v10 + (v10 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= v11 + 1)
    v14 = v11 + 1;
  else
    v14 = v13;
  if (v14 <= v10)
  {
LABEL_14:
    v20 = *(unsigned int *)(a1 + 12);
    v21 = v20 + 1;
    v22 = *(_QWORD *)a1 + 16 * v20;
    *(_QWORD *)v22 = *a2;
    *(_BYTE *)(v22 + 8) = 0;
    *(_DWORD *)(a1 + 12) = v21;
    return;
  }
  v15 = *(_QWORD *)a1;
  if (v14 < 3)
  {
    v16 = (_OWORD *)(a1 + 16);
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 2;
    if (!(_DWORD)v11)
      goto LABEL_13;
LABEL_11:
    v17 = 16 * v11;
    v18 = (__int128 *)v15;
    do
    {
      v19 = *v18++;
      *v16++ = v19;
      v17 -= 16;
    }
    while (v17);
LABEL_13:
    if (a1 + 16 != v15 && v15)
    {
      if (*(_QWORD *)a1 == v15)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
    }
    goto LABEL_14;
  }
  if (!(v14 >> 28))
  {
    v16 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v14));
    *(_DWORD *)(a1 + 8) = v14;
    *(_QWORD *)a1 = v16;
    if (!(_DWORD)v11)
      goto LABEL_13;
    goto LABEL_11;
  }
  __break(0xC471u);
}

uint64_t JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if ((*(_WORD *)(*(_QWORD *)(a1 + 112) + 12) & 0xFFF) == 0x52)
    v2 = *(_QWORD *)(a1 + 112);
  else
    v2 = 0;
  v3 = *(_DWORD *)(a1 + 12);
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1980DF7D4);
  }
  if (v3 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1980DF7DCLL);
  }
  v6 = *(_QWORD *)(**(_QWORD **)a1 + 16);
  v7 = 1;
  result = (**(uint64_t (***)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t))a2)(*(_QWORD *)(*(_QWORD *)a2 + 8), *(_QWORD *)a1 + 32, 1, 0, 3);
  v9 = *(_DWORD *)(v2 + 16);
  if (v9 >= 0x80000000)
    v9 = 0x80000000;
  if (v9)
  {
    if (v9 == 0x80000000)
      v7 = 2;
    v19 = 0;
    v20 = 64;
    do
    {
      v21 = *(_DWORD *)(v2 + 16);
      if ((v21 & 0x80000000) != 0)
      {
        v24 = *(_QWORD *)(v6 + 8);
        v25 = v21 & 0x7FFFFFFF;
        if (v25 >= *(_DWORD *)(v24 + 44))
        {
          __break(0xC471u);
          JUMPOUT(0x1980DF7ECLL);
        }
        v26 = *(_QWORD *)(v24 + 32) + 16 * v25;
        if (*(_DWORD *)(v26 + 12) <= v19)
        {
LABEL_50:
          __break(0xC471u);
          JUMPOUT(0x1980DF790);
        }
        v21 = *(_DWORD *)(*(_QWORD *)v26 + 4 * v19);
      }
      v22 = v19 + 2;
      if (v19 + 2 >= (unint64_t)*(unsigned int *)(a1 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x1980DF7E4);
      }
      if (v21 >= 0x80000000)
        v21 = 0x80000000;
      v23 = 0x40302030200uLL >> (8 * v21);
      if (v21 >= 6)
        LOBYTE(v23) = 0;
      result = (**(uint64_t (***)(_QWORD, uint64_t, uint64_t, BOOL, _QWORD))a2)(*(_QWORD *)(*(_QWORD *)a2 + 8), *(_QWORD *)a1 + v20, 4, v21 - 3 < 3, v23);
      ++v19;
      v20 += 32;
    }
    while (v22 - 1 != v7);
    v10 = v19 + 2;
  }
  else
  {
    v10 = 2;
  }
  if (*(_DWORD *)(v2 + 76) >= 2u)
  {
    v11 = 1;
    do
    {
      v12 = 0;
      v13 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8 * v11);
      v14 = v10;
      for (i = 32 * v10; ; i += 32)
      {
        LODWORD(v16) = *(_DWORD *)(v13 + 16);
        v16 = v16 >= 0x80000000 ? 0x80000000 : v16;
        if ((_DWORD)v16 == 2)
        {
          v17 = 1;
        }
        else
        {
          if ((_DWORD)v16 == 0x80000000)
            goto LABEL_50;
          v17 = 1;
          if (!(_DWORD)v16)
            v17 = v16;
        }
        if (v12 >= v17)
          break;
        if (v14 + v12 >= *(unsigned int *)(a1 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x1980DF7CCLL);
        }
        v18 = 0x40302030200uLL >> (8 * v16);
        if (v16 >= 6)
          LOBYTE(v18) = 0;
        result = (**(uint64_t (***)(_QWORD, uint64_t, uint64_t, BOOL, _QWORD))a2)(*(_QWORD *)(*(_QWORD *)a2 + 8), *(_QWORD *)a1 + i, 1, (v16 - 3) < 3, v18);
        ++v12;
      }
      ++v11;
      v10 = v14 + v12;
    }
    while (v11 < *(unsigned int *)(v2 + 76));
  }
  return result;
}

void std::swap[abi:sn180100]<WTF::Insertion<JSC::B3::Air::Inst>>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  _BYTE *v30;
  int v31;
  unsigned int v32;
  _BYTE v33[96];
  _QWORD v34[2];

  v11 = *a1;
  v10 = a1[1];
  v29 = v11;
  v30 = v33;
  v31 = 3;
  v12 = a1 + 3;
  if ((uint64_t *)v10 == a1 + 3)
  {
    v13 = *((unsigned int *)a1 + 5);
    if ((_DWORD)v13)
    {
      v14 = 0;
      do
      {
        v15 = &v33[v14];
        v16 = *(_OWORD *)(v10 + v14 + 16);
        *v15 = *(_OWORD *)(v10 + v14);
        v15[1] = v16;
        v14 += 32;
      }
      while (32 * v13 != v14);
    }
  }
  else
  {
    a1[1] = (uint64_t)v12;
    v30 = (_BYTE *)v10;
    v28 = *((_DWORD *)a1 + 4);
    LODWORD(v13) = *((_DWORD *)a1 + 5);
    *((_DWORD *)a1 + 4) = 3;
    v31 = v28;
    v10 = (unint64_t)(a1 + 3);
  }
  *((_DWORD *)a1 + 5) = 0;
  v32 = v13;
  v34[0] = a1[15];
  *(_DWORD *)((char *)v34 + 7) = *(_DWORD *)((char *)a1 + 127);
  *a1 = *a2;
  if ((_OWORD *)v10 != v12)
  {
    if (v10)
    {
      a1[1] = 0;
      *((_DWORD *)a1 + 4) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    a1[1] = (uint64_t)v12;
  }
  v17 = (__int128 *)a2[1];
  v18 = a2 + 3;
  if (v17 == (__int128 *)(a2 + 3))
  {
    v19 = *((unsigned int *)a2 + 5);
    if ((_DWORD)v19)
    {
      v20 = 32 * v19;
      do
      {
        v21 = *v17;
        v22 = v17[1];
        v17 += 2;
        *v12 = v21;
        v12[1] = v22;
        v12 += 2;
        v20 -= 32;
      }
      while (v20);
    }
  }
  else
  {
    a2[1] = (uint64_t)v18;
    a1[1] = (uint64_t)v17;
  }
  *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
  v23 = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *((_DWORD *)a1 + 5) = v23;
  v24 = a2[15];
  *(_DWORD *)((char *)a1 + 127) = *(_DWORD *)((char *)a2 + 127);
  a1[15] = v24;
  *a2 = v29;
  v25 = a2[1];
  if ((_QWORD *)v25 != v18)
  {
    if (v25)
    {
      a2[1] = 0;
      *((_DWORD *)a2 + 4) = 0;
      WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
    }
    a2[1] = (uint64_t)v18;
  }
  if (v30 == v33)
  {
    v26 = v32;
    if (v32)
      memcpy(a2 + 3, v33, 32 * v32);
    v27 = v31;
  }
  else
  {
    a2[1] = (uint64_t)v30;
    v27 = v31;
    v26 = v32;
  }
  *((_DWORD *)a2 + 4) = v27;
  *((_DWORD *)a2 + 5) = v26;
  a2[15] = v34[0];
  *(_DWORD *)((char *)a2 + 127) = *(_DWORD *)((char *)v34 + 7);
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::Inst::hasEarlyDef(void)::$_0>::implFunction(uint64_t result, uint64_t a2, int a3)
{
  ***(_BYTE ***)(result + 16) |= (a3 - 8) < 3;
  return result;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::Inst::hasLateUseOrDef(void)::$_0>::implFunction(uint64_t result, uint64_t a2, unsigned int a3)
{
  BOOL v3;

  if (a3 < 2 || (v3 = 1, a3 <= 0xB) && ((1 << a3) & 0xBF0) != 0)
    v3 = (a3 & 0xFFFFFFFC) == 4;
  ***(_BYTE ***)(result + 16) |= v3;
  return result;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::Inst::hasArgEffects(void)::$_0>::implFunction(uint64_t result, uint64_t a2, int a3)
{
  if ((a3 - 4) <= 6)
    ***(_BYTE ***)(result + 16) = 1;
  return result;
}

JSC::B3::Air::Arg ***WTF::ListDump<WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(JSC::B3::Air::Arg ***result, uint64_t a2)
{
  JSC::B3::Air::Arg ***v3;
  JSC::B3::Air::Arg *v4;
  WTF::PrintStream *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  char *v10;
  JSC::B3::Air::Arg **v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  char *v15;
  JSC::B3::Air::Arg **v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  char v22;

  if (*((_DWORD *)*result + 3))
  {
    v3 = result;
    v4 = **result;
    do
    {
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      v6 = *((unsigned __int8 *)v3 + 40);
      v7 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 32))(v5);
      v8 = v7;
      v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32);
      if (v6)
      {
        v10 = (char *)v3[1];
        v11 = v3[2];
        v12 = (WTF::PrintStream *)v9(v7);
        if (v10)
        {
          v14 = (_DWORD)v11 - 1;
          if (!v11)
            v14 = 0;
          WTF::StringImpl::utf8ForCharacters(v10, v14, (uint64_t)&v20, v13);
        }
        else
        {
          WTF::CString::CString(&v20, &str_25, 0);
          v21 = 0;
        }
        WTF::printExpectedCStringHelper(v12, "StringView", &v20);
        if (v21 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v21])(&v22, &v20);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
      }
      else
      {
        v15 = (char *)v3[3];
        v16 = v3[4];
        v17 = (WTF::PrintStream *)v9(v7);
        if (v15)
        {
          v19 = (_DWORD)v16 - 1;
          if (!v16)
            v19 = 0;
          WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v20, v18);
        }
        else
        {
          WTF::CString::CString(&v20, &str_25, 0);
          v21 = 0;
        }
        WTF::printExpectedCStringHelper(v17, "StringView", &v20);
        if (v21 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v21])(&v22, &v20);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
        *((_BYTE *)v3 + 40) = 1;
      }
      JSC::B3::Air::Arg::dump(v4, v5);
      result = (JSC::B3::Air::Arg ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      v4 = (JSC::B3::Air::Arg *)((char *)v4 + 32);
    }
    while (v4 != (JSC::B3::Air::Arg *)((char *)**v3 + 32 * *((unsigned int *)*v3 + 3)));
  }
  return result;
}

uint64_t JSC::B3::Air::Kind::dump(JSC::B3::Air::Kind *this, WTF::PrintStream *a2)
{
  uint64_t v4;
  uint64_t result;
  WTF::PrintStream *v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  float v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  int v13;
  int v14;
  char v15;

  v4 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::printInternal(v4, *(__int16 *)this);
  result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  if ((*((_BYTE *)this + 2) & 1) != 0)
  {
    v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v7 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    WTF::StringImpl::utf8ForCharacters("<", 1uLL, (uint64_t)&v13, v9);
    WTF::printExpectedCStringHelper(v8, "StringView", &v13);
    if (v14 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v14])(&v15, &v13);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    WTF::PrintStream::printf(v6, "%s", "Effects");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v10 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    WTF::StringImpl::utf8ForCharacters(">", 1uLL, (uint64_t)&v13, v12);
    WTF::printExpectedCStringHelper(v11, "StringView", &v13);
    if (v14 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v14])(&v15, &v13);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return result;
}

void JSC::B3::Air::logRegisterPressure(JSC::B3::Air *this, JSC::B3::Air::Code *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Air *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (***v18)(WTF::StringPrintStream *__hidden);
  uint64_t v19;
  WTF *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  void (**v24)(WTF::StringPrintStream *__hidden);
  uint64_t v25;
  void (**v26)(WTF::StringPrintStream *__hidden);
  uint64_t v27;
  int8x16_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  void (**v35)(WTF::StringPrintStream *__hidden);
  void (**v36)(WTF::StringPrintStream *__hidden);
  JSC::B3::Air::Kind *v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v61;
  uint8x8_t v62;
  __int32 v63;
  uint8x8_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  size_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  size_t v78;
  void *v79;
  unint64_t v80;
  WTF::PrintStream *v81;
  WTF::PrintStream *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::PrintStream *v89;
  WTF::PrintStream *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF::PrintStream *v101;
  size_t v102;
  void *v103;
  unint64_t v104;
  WTF::PrintStream *v105;
  WTF::PrintStream *v106;
  const char *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::PrintStream *v115;
  WTF::PrintStream *v116;
  uint64_t v117;
  WTF::PrintStream *v118;
  void *v119;
  size_t v120;
  unint64_t v121;
  WTF::PrintStream *v122;
  WTF::PrintStream *v123;
  const char *v124;
  void *v125;
  size_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  WTF *v132;
  uint64_t v133;
  uint64_t **v134;
  uint64_t **v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  WTF::PrintStream *v144;
  WTF *v145;
  uint64_t v146;
  _DWORD *v147;
  WTF *v148;
  WTF *v149;
  uint64_t v150;
  unint64_t v151;
  WTF *v152;
  WTF *v153;
  JSC::B3::Air *v154;
  uint64_t v155;
  int v156;
  void (***v157)(WTF::StringPrintStream *__hidden);
  _QWORD *v158;
  int8x16_t v159;
  uint64_t v160;
  void (**v161)(WTF::StringPrintStream *__hidden);
  unint64_t StatusReg;
  int8x16_t *v163;
  int8x16_t v164;
  WTF *v165;
  uint64_t v166;
  WTF *v167;
  int v168;
  WTF *v169;
  int v170;
  WTF *v171;
  int v172;
  unsigned int v173;
  int8x16_t **v174;
  int8x16_t ***v175;
  int8x16_t ****v176;
  void (**v177)(WTF::StringPrintStream *__hidden);
  void *ptr;
  __int128 v179;
  _BYTE v180[128];
  void (***v181)(WTF::StringPrintStream *__hidden);
  void *v182;
  __int128 v183;
  _BYTE v184[128];
  void (***v185)(WTF::StringPrintStream *__hidden);
  const char *v186;
  __int128 v187;
  uint64_t v188;
  char v189;
  uint64_t v190;

  v8 = this;
  v190 = *MEMORY[0x1E0C80C00];
  JSC::B3::Air::RegLiveness::RegLiveness((JSC::B3::Air::RegLiveness *)&v167, this, a3, a4, a5, a6, a7, a8);
  v155 = *((unsigned int *)v8 + 27);
  if ((_DWORD)v155)
  {
    v16 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v8 + 12) + 8 * v16))
    {
      if (v155 == ++v16)
        goto LABEL_235;
    }
    if ((_DWORD)v155 != (_DWORD)v16)
    {
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      LODWORD(v17) = v16;
      LODWORD(v16) = v155;
      v154 = v8;
      while (1)
      {
        if (v16 <= v17)
        {
          __break(0xC471u);
          JUMPOUT(0x1980E12B0);
        }
        v156 = v17;
        v18 = *(void (****)(WTF::StringPrintStream *__hidden))(*((_QWORD *)v8 + 12) + 8 * v17);
        v19 = *(unsigned int *)v18;
        v20 = v171;
        v159 = *((int8x16_t *)v169 + v19);
        v21 = atomic_load(&WTF::initializeLogFile(void)::once);
        if (v21 != -1)
        {
          v185 = &v177;
          v181 = (void (***)(WTF::StringPrintStream *__hidden))&v185;
          std::__call_once(&WTF::initializeLogFile(void)::once, &v181, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
        }
        JSC::B3::Air::BasicBlock::dumpHeader((JSC::B3::Air::BasicBlock *)v18, (WTF::PrintStream *)WTF::s_file);
        v165 = 0;
        v166 = 0;
        v22 = *((unsigned int *)v18 + 5);
        if ((_DWORD)v22)
          break;
LABEL_216:
        v142 = atomic_load(&WTF::initializeLogFile(void)::once);
        if (v142 != -1)
        {
          v185 = &v177;
          v181 = (void (***)(WTF::StringPrintStream *__hidden))&v185;
          std::__call_once(&WTF::initializeLogFile(void)::once, &v181, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
        }
        if (*((_DWORD *)v18 + 9))
        {
          v143 = WTF::s_file;
          v185 = v18 + 3;
          v186 = ", ";
          *(_QWORD *)&v187 = 3;
          *((_QWORD *)&v187 + 1) = &str_106;
          v188 = 1;
          v189 = 0;
          v144 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
          WTF::PrintStream::printf(v144, "%s", "Air ");
          WTF::PrintStream::printf(v144, "%s", "  Successors: ");
          WTF::ListDump<WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump((uint64_t ***)&v185, (uint64_t)v144);
          WTF::PrintStream::printf(v144, "%s", "\n");
          (*(void (**)(uint64_t))(*(_QWORD *)v143 + 40))(v143);
        }
        if (HIDWORD(v166))
        {
          v145 = v165;
          v146 = 8 * HIDWORD(v166);
          do
          {
            v147 = *(_DWORD **)v145;
            *(_QWORD *)v145 = 0;
            if (v147)
            {
              if (*v147 == 1)
                WTF::fastFree((unint64_t)v147, v9, v10, v11, v12, v13, v14, v15);
              else
                --*v147;
            }
            v145 = (WTF *)((char *)v145 + 8);
            v146 -= 8;
          }
          while (v146);
        }
        v148 = v165;
        if (v165)
        {
          v165 = 0;
          LODWORD(v166) = 0;
          WTF::fastFree((unint64_t)v148, v9, v10, v11, v12, v13, v14, v15);
        }
        v17 = (v156 + 1);
        v8 = v154;
        v16 = *((unsigned int *)v154 + 27);
        if (v16 > v17)
        {
          while (!*(_QWORD *)(*((_QWORD *)v154 + 12) + 8 * v17))
          {
            if (v16 == ++v17)
            {
              LODWORD(v17) = *((_DWORD *)v154 + 27);
              break;
            }
          }
        }
        if ((_DWORD)v155 == (_DWORD)v17)
          goto LABEL_235;
      }
      v157 = v18;
      v158 = (_QWORD *)((char *)v20 + 16 * v19);
      while (1)
      {
        v23 = *((_DWORD *)v18 + 5);
        v160 = v22 - 1;
        if (v23 <= (int)v22 - 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980E1240);
        }
        v24 = v18[1];
        v25 = (v22 - 2);
        if (v23 <= v25)
          v26 = 0;
        else
          v26 = &v24[16 * v25];
        v27 = *(_QWORD *)(*v158 + 32 * v22 + 16);
        if (v27)
        {
          v28 = v159;
          do
          {
            v28 = vandq_s8(v28, (int8x16_t)vdupq_n_s64(~(v27 & (unint64_t)-v27)));
            v27 &= v27 - 1;
          }
          while (v27);
        }
        else
        {
          v28 = v159;
        }
        v161 = v18[1];
        v159 = vorrq_s8(*(int8x16_t *)(*v158 + 32 * v160), v28);
        v164 = v159;
        v163 = &v164;
        v174 = &v163;
        if (v26)
        {
          v175 = &v174;
          v176 = &v175;
          v29 = *((__int16 *)v26 + 60);
          if ((v29 - 446) > 5)
          {
            v30 = *((unsigned int *)v26 + 3);
            if ((_DWORD)v30)
            {
              v31 = 0;
              v32 = 0;
              v33 = (char *)&JSC::B3::Air::g_formTable
                  + 21 * *((__int16 *)v26 + 60)
                  + ((unint64_t)((v30 - 1) * v30) >> 1);
              v34 = 32 * v30;
              do
              {
                if (v32 >= *((unsigned int *)v26 + 3))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980E1210);
                }
                if ((*v33 >> 5) - 1 >= 5u)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980E1178);
                }
                JSC::B3::Air::Inst::forEach<JSC::Reg,void JSC::B3::Air::Inst::forEachDef<JSC::Reg,void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::Reg,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::Reg,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::Reg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(v175, (uint64_t)*v26 + v31, *v33 & 0xF, ((*v33 >> 5) - 1));
                ++v32;
                ++v33;
                v31 += 32;
              }
              while (v34 != v31);
            }
          }
          else
          {
            v185 = (void (***)(WTF::StringPrintStream *__hidden))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS1_3RegEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_19logRegisterPressureERNS3_4CodeEE3__1EEvPSA_SI_RKT0_EUlSC_S6_S7_S8_E_EEvSI_SI_SL_EUlRSC_S6_S7_S8_E_EEvSL_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
            v186 = (const char *)&v185;
            *(_QWORD *)&v187 = &v176;
            v177 = (void (**)(WTF::StringPrintStream *__hidden))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS1_3RegEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_19logRegisterPressureERNS3_4CodeEE3__1EEvPSA_SI_RKT0_EUlSC_S6_S7_S8_E_EEvSI_SI_SL_EUlRSC_S6_S7_S8_E_EEvSL_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
            ptr = &v185;
            if (v29 == 448)
            {
              v181 = (void (***)(WTF::StringPrintStream *__hidden))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS1_3RegEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_19logRegisterPressureERNS3_4CodeEE3__1EEvPSA_SI_RKT0_EUlSC_S6_S7_S8_E_EEvSI_SI_SL_EUlRSC_S6_S7_S8_E_EEvSL_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
              v182 = &v185;
              if (!*((_DWORD *)v26 + 3))
              {
                __break(0xC471u);
                JUMPOUT(0x1980E1270);
              }
              JSC::B3::Air::Inst::forEach<JSC::Reg,void JSC::B3::Air::Inst::forEachDef<JSC::Reg,void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::Reg,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::Reg,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::Reg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(&v174, (uint64_t)*v26, 0, 3u);
              if (!*((_DWORD *)v26 + 3))
              {
                __break(0xC471u);
                JUMPOUT(0x1980E1278);
              }
              (*(void (**)(_QWORD, void (**)(WTF::StringPrintStream *__hidden), void (****)(WTF::StringPrintStream *__hidden)))(**(_QWORD **)*v26 + 16))(*(_QWORD *)*v26, v26, &v181);
            }
            else
            {
              switch(v29)
              {
                case 446:
                  break;
                case 447:
                  JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v26, (uint64_t)&v177);
                  break;
                case 449:
                  JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v26, (uint64_t)&v177);
                  break;
                case 450:
                  v181 = &v177;
                  JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>((uint64_t)v26, (uint64_t)&v181);
                  break;
                case 451:
                  JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v26, (uint64_t)&v177);
                  break;
                default:
                  WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", (JSC::B3::Air::Kind *)(v26 + 15), "\n");
                  __break(0xC471u);
                  JUMPOUT(0x1980E11D0);
              }
            }
          }
          v24 = v161;
        }
        v35 = &v24[16 * (unint64_t)v160];
        if (v24)
        {
          v175 = &v174;
          v176 = &v175;
          v36 = &v24[16 * (unint64_t)v160];
          v39 = *((__int16 *)v36 + 60);
          v37 = (JSC::B3::Air::Kind *)(v36 + 15);
          v38 = v39;
          if ((v39 - 446) > 5)
          {
            v40 = *((unsigned int *)v35 + 3);
            if ((_DWORD)v40)
            {
              v41 = 0;
              v42 = 0;
              v43 = (char *)&JSC::B3::Air::g_formTable + 21 * v38 + ((unint64_t)((v40 - 1) * v40) >> 1);
              v44 = 32 * v40;
              do
              {
                if (v42 >= *((unsigned int *)v35 + 3))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980E1218);
                }
                if ((*v43 >> 5) - 1 >= 5u)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980E1198);
                }
                JSC::B3::Air::Inst::forEach<JSC::Reg,void JSC::B3::Air::Inst::forEachDef<JSC::Reg,void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::Reg,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::Reg,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::Reg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#2}>(JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(v175, (uint64_t)*v35 + v41, *v43 & 0xF, ((*v43 >> 5) - 1));
                ++v42;
                ++v43;
                v41 += 32;
              }
              while (v44 != v41);
            }
          }
          else
          {
            v185 = (void (***)(WTF::StringPrintStream *__hidden))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS1_3RegEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_19logRegisterPressureERNS3_4CodeEE3__1EEvPSA_SI_RKT0_EUlSC_S6_S7_S8_E_EEvSI_SI_SL_EUlRSC_S6_S7_S8_E0_EEvSL_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
            v186 = (const char *)&v185;
            *(_QWORD *)&v187 = &v176;
            v177 = (void (**)(WTF::StringPrintStream *__hidden))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS1_3RegEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_19logRegisterPressureERNS3_4CodeEE3__1EEvPSA_SI_RKT0_EUlSC_S6_S7_S8_E_EEvSI_SI_SL_EUlRSC_S6_S7_S8_E0_EEvSL_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
            ptr = &v185;
            if (*(_WORD *)v37 == 448)
            {
              v181 = (void (***)(WTF::StringPrintStream *__hidden))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS1_3RegEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_19logRegisterPressureERNS3_4CodeEE3__1EEvPSA_SI_RKT0_EUlSC_S6_S7_S8_E_EEvSI_SI_SL_EUlRSC_S6_S7_S8_E0_EEvSL_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
              v182 = &v185;
              if (!*((_DWORD *)v35 + 3))
              {
                __break(0xC471u);
                JUMPOUT(0x1980E1280);
              }
              JSC::B3::Air::Inst::forEach<JSC::Reg,void JSC::B3::Air::Inst::forEachDef<JSC::Reg,void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::Reg,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::Reg,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::Reg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#2}>(JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(&v174, (uint64_t)*v35, 0, 3u);
              if (!*((_DWORD *)v35 + 3))
              {
                __break(0xC471u);
                JUMPOUT(0x1980E1288);
              }
              (*(void (**)(_QWORD, void (**)(WTF::StringPrintStream *__hidden), void (****)(WTF::StringPrintStream *__hidden)))(**(_QWORD **)*v35 + 16))(*(_QWORD *)*v35, v35, &v181);
            }
            else
            {
              switch(*(_WORD *)v37)
              {
                case 0x1BE:
                  break;
                case 0x1BF:
                  JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)&v24[16 * (unint64_t)v160], (uint64_t)&v177);
                  break;
                case 0x1C1:
                  JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)&v24[16 * (unint64_t)v160], (uint64_t)&v177);
                  break;
                case 0x1C2:
                  v181 = &v177;
                  JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>((uint64_t)&v24[16 * (unint64_t)v160], (uint64_t)&v181);
                  break;
                case 0x1C3:
                  JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)&v24[16 * (unint64_t)v160], (uint64_t)&v177);
                  break;
                default:
                  WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", v37, "\n");
                  __break(0xC471u);
                  JUMPOUT(0x1980E1204);
              }
            }
          }
          v24 = v161;
        }
        if (v26 && *((_WORD *)v26 + 60) == 448)
        {
          if (!*((_DWORD *)v26 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1980E1290);
          }
          v45 = (*(uint64_t (**)(_QWORD, void (**)(WTF::StringPrintStream *__hidden)))(**(_QWORD **)*v26 + 80))(*(_QWORD *)*v26, v26);
          v47 = v46 | v45;
          if (v46 | v45)
          {
            v48 = (uint64_t *)v163;
            v49 = v163->i64[0];
            do
            {
              v50 = __clz(__rbit64(v47));
              v51 = 1 << v50;
              if (v50 >= 0x20 && ((1 << v50) & v46) != 0)
                v48[1] |= v51;
              v49 |= v51;
              v47 &= v47 - 1;
            }
            while (v47);
            *v48 = v49;
          }
        }
        if (v24 && LOWORD(v24[16 * (unint64_t)v160 + 15]) == 448)
        {
          if (!*((_DWORD *)v35 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1980E1298);
          }
          v53 = (*(uint64_t (**)(_QWORD, void (**)(WTF::StringPrintStream *__hidden)))(**(_QWORD **)*v35 + 72))(*(_QWORD *)*v35, v35);
          v55 = v54 | v53;
          if (v54 | v53)
          {
            v56 = (uint64_t *)v163;
            v57 = v163->i64[0];
            do
            {
              v58 = __clz(__rbit64(v55));
              v59 = 1 << v58;
              if (v58 >= 0x20 && ((1 << v58) & v54) != 0)
                v56[1] |= v59;
              v57 |= v59;
              v55 &= v55 - 1;
            }
            while (v55);
            *v56 = v57;
          }
        }
        v181 = (void (***)(WTF::StringPrintStream *__hidden))off_1E3572250;
        v182 = v184;
        v183 = xmmword_199122F80;
        v184[0] = 0;
        v177 = off_1E3572250;
        ptr = v180;
        v179 = xmmword_199122F80;
        v180[0] = 0;
        WTF::PrintStream::printf((WTF::PrintStream *)&v177, "%s", "   ");
        v177[5]((WTF::StringPrintStream *)&v177);
        v61 = v164.i64[0];
        v62 = (uint8x8_t)vcnt_s8((int8x8_t)v164.u32[0]);
        v62.i16[0] = vaddlv_u8(v62);
        v63 = v62.i32[0];
        v64 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v164.i64[0]));
        v64.i16[0] = vaddlv_u8(v64);
        if (v64.i32[0] + v63)
        {
          if (v164.i64[0])
          {
            do
            {
              LOBYTE(v176) = __clz(__rbit64(v61)) | 0x80;
              v185 = (void (***)(WTF::StringPrintStream *__hidden))off_1E3572250;
              v186 = (const char *)&v188;
              v187 = xmmword_199122F80;
              LOBYTE(v188) = 0;
              WTF::PrintStream::printf((WTF::PrintStream *)&v185, "%s", " ");
              JSC::Reg::dump((JSC::Reg *)&v176, (WTF::PrintStream *)&v185);
              ((void (*)(_QWORD))v185[5])(&v185);
              v70 = v186;
              if (v186)
              {
                v71 = v187;
                if ((unint64_t)v187 >= 0xFFFFFFFFFFFFFFF0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980E1220);
                }
                if ((_QWORD)v187 == -17)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980E1228);
                }
                v72 = WTF::fastMalloc((WTF *)(v187 + 17));
                *(_DWORD *)v72 = 1;
                *(_QWORD *)(v72 + 8) = v71;
                memcpy((void *)(v72 + 16), v70, v71);
                *(_BYTE *)(v72 + 16 + v71) = 0;
                v73 = (unint64_t)v186;
                if (v186 == (const char *)&v188)
                {
LABEL_83:
                  v76 = 0;
                  v77 = *(_QWORD *)(v72 + 8);
                  goto LABEL_84;
                }
              }
              else
              {
                v72 = 0;
                v73 = 0;
              }
              v74 = *(_QWORD *)(StatusReg + 752);
              if (v74)
              {
                if (v73 >> 43
                  || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v73 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v73)) & 1) == 0)
                {
                  if (v73 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v73 >> 24)
                  {
                    v65 = 0;
LABEL_116:
                    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v74, v73, 1, v65, v66, v67, v68, v69);
                    goto LABEL_82;
                  }
                  v65 = (*(_DWORD *)((char *)off_1ECF425F8
                                   + ((((v73 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                   + 24) >> (2 * ((BYTE3(v73) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                  if ((_DWORD)v65 != 1)
                    goto LABEL_116;
                }
                v75 = *(unsigned int *)(v74 + 8000);
                if (v75 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v74, v73, (os_unfair_lock_s *)5, v65, v66, v67, v68, v69);
                }
                else
                {
                  *(_QWORD *)(v74 + 8 * v75) = v73 | 0x5000000000000;
                  *(_DWORD *)(v74 + 8000) = v75 + 1;
                }
              }
              else
              {
                pas_try_deallocate_slow_no_cache(v73, (uint64_t)&bmalloc_heap_config, 1);
              }
LABEL_82:
              if (v72)
                goto LABEL_83;
              v77 = 0;
              v76 = 1;
LABEL_84:
              v78 = v179;
              if ((unint64_t)(v179 + v77) < 0xC9)
                goto LABEL_96;
              v79 = ptr;
              if (ptr)
              {
                if ((unint64_t)v179 >= 0xFFFFFFFFFFFFFFF0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980E1230);
                }
                if ((_QWORD)v179 == -17)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980E1238);
                }
                v80 = WTF::fastMalloc((WTF *)(v179 + 17));
                *(_DWORD *)v80 = 1;
                *(_QWORD *)(v80 + 8) = v78;
                memcpy((void *)(v80 + 16), v79, v78);
                *(_BYTE *)(v80 + 16 + v78) = 0;
              }
              else
              {
                v80 = 0;
              }
              v81 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v181[4])(&v181);
              v82 = v81;
              v83 = (const char *)(v80 + 16);
              if (!v80)
                v83 = 0;
              WTF::PrintStream::printf(v81, "%s", v83);
              WTF::PrintStream::printf(v82, "%s", "\n");
              ((void (*)(_QWORD))v181[5])(&v181);
              if (v80)
              {
                if (*(_DWORD *)v80 == 1)
                {
                  v99 = *(_QWORD *)(StatusReg + 752);
                  if (v99)
                  {
                    if (!(v80 >> 43)
                      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v80 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v80)) & 1) != 0)
                    {
LABEL_111:
                      v100 = *(unsigned int *)(v99 + 8000);
                      if (v100 >= 0x3E7)
                      {
                        pas_thread_local_cache_append_deallocation_slow(v99, v80, (os_unfair_lock_s *)5, v84, v85, v86, v87, v88);
                      }
                      else
                      {
                        *(_QWORD *)(v99 + 8 * v100) = v80 | 0x5000000000000;
                        *(_DWORD *)(v99 + 8000) = v100 + 1;
                      }
                      goto LABEL_95;
                    }
                    if (v80 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v80 >> 24)
                    {
                      v84 = 0;
                    }
                    else
                    {
                      v84 = (*(_DWORD *)((char *)off_1ECF425F8
                                       + ((((v80 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                       + 24) >> (2 * ((BYTE3(v80) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                      if ((_DWORD)v84 == 1)
                        goto LABEL_111;
                    }
                    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v99, v80, 1, v84, v85, v86, v87, v88);
                  }
                  else
                  {
                    pas_try_deallocate_slow_no_cache(v80, (uint64_t)&bmalloc_heap_config, 1);
                  }
                }
                else
                {
                  --*(_DWORD *)v80;
                }
              }
LABEL_95:
              *(_QWORD *)&v179 = 0;
              *(_BYTE *)ptr = 0;
              v89 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v177[4])(&v177);
              WTF::PrintStream::printf(v89, "%s", "       ");
              v177[5]((WTF::StringPrintStream *)&v177);
LABEL_96:
              v90 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v177[4])(&v177);
              v91 = (const char *)(v72 + 16);
              if (v76)
                v91 = 0;
              WTF::PrintStream::printf(v90, "%s", v91);
              v177[5]((WTF::StringPrintStream *)&v177);
              if ((v76 & 1) != 0)
                goto LABEL_101;
              if (*(_DWORD *)v72 == 1)
              {
                v97 = *(_QWORD *)(StatusReg + 752);
                if (v97)
                {
                  if (!(v72 >> 43)
                    && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v72 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v72)) & 1) != 0)
                  {
LABEL_106:
                    v98 = *(unsigned int *)(v97 + 8000);
                    if (v98 >= 0x3E7)
                    {
                      pas_thread_local_cache_append_deallocation_slow(v97, v72, (os_unfair_lock_s *)5, v92, v93, v94, v95, v96);
                    }
                    else
                    {
                      *(_QWORD *)(v97 + 8 * v98) = v72 | 0x5000000000000;
                      *(_DWORD *)(v97 + 8000) = v98 + 1;
                    }
                    goto LABEL_101;
                  }
                  if (v72 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v72 >> 24)
                  {
                    v92 = 0;
                  }
                  else
                  {
                    v92 = (*(_DWORD *)((char *)off_1ECF425F8
                                     + ((((v72 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                     + 24) >> (2 * ((BYTE3(v72) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                    if ((_DWORD)v92 == 1)
                      goto LABEL_106;
                  }
                  bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v97, v72, 1, v92, v93, v94, v95, v96);
                }
                else
                {
                  pas_try_deallocate_slow_no_cache(v72, (uint64_t)&bmalloc_heap_config, 1);
                }
              }
              else
              {
                --*(_DWORD *)v72;
              }
LABEL_101:
              v61 &= v61 - 1;
            }
            while (v61);
          }
          v101 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v177[4])(&v177);
          WTF::PrintStream::printf(v101, "%s", ":");
          v177[5]((WTF::StringPrintStream *)&v177);
        }
        v102 = v179;
        if ((unint64_t)v179 >= 0x65)
        {
          v103 = ptr;
          if (ptr)
          {
            if ((unint64_t)v179 >= 0xFFFFFFFFFFFFFFF0)
            {
              __break(0xC471u);
              JUMPOUT(0x1980E12A0);
            }
            if ((_QWORD)v179 == -17)
            {
              __break(0xC471u);
              JUMPOUT(0x1980E12A8);
            }
            v104 = WTF::fastMalloc((WTF *)(v179 + 17));
            *(_DWORD *)v104 = 1;
            *(_QWORD *)(v104 + 8) = v102;
            memcpy((void *)(v104 + 16), v103, v102);
            *(_BYTE *)(v104 + 16 + v102) = 0;
          }
          else
          {
            v104 = 0;
          }
          v105 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v181[4])(&v181);
          v106 = v105;
          v107 = (const char *)(v104 + 16);
          if (!v104)
            v107 = 0;
          WTF::PrintStream::printf(v105, "%s", v107);
          WTF::PrintStream::printf(v106, "%s", "\n");
          ((void (*)(_QWORD))v181[5])(&v181);
          if (v104)
          {
            if (*(_DWORD *)v104 == 1)
              WTF::fastFree(v104, v108, v109, v110, v111, v112, v113, v114);
            else
              --*(_DWORD *)v104;
          }
          *(_QWORD *)&v179 = 0;
          *(_BYTE *)ptr = 0;
          v102 = v179;
        }
        if (v102 <= 0x63)
        {
          do
          {
            v115 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v177[4])(&v177);
            WTF::PrintStream::printf(v115, "%s", " ");
            v177[5]((WTF::StringPrintStream *)&v177);
          }
          while ((unint64_t)v179 < 0x64);
        }
        v116 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v177[4])(&v177);
        WTF::PrintStream::printf(v116, "%s", " ");
        v177[5]((WTF::StringPrintStream *)&v177);
        v117 = ((uint64_t (*)(_QWORD))v177[4])(&v177);
        v185 = (void (***)(WTF::StringPrintStream *__hidden))v35;
        v186 = ", ";
        *(_QWORD *)&v187 = 3;
        *((_QWORD *)&v187 + 1) = &str_477;
        v188 = 1;
        v189 = 0;
        v118 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v117 + 32))(v117);
        JSC::B3::Air::Kind::dump((JSC::B3::Air::Kind *)&v161[16 * (unint64_t)v160 + 15], v118);
        WTF::PrintStream::printf(v118, "%s", " ");
        WTF::ListDump<WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump((JSC::B3::Air::Arg ***)&v185, (uint64_t)v118);
        (*(void (**)(uint64_t))(*(_QWORD *)v117 + 40))(v117);
        v177[5]((WTF::StringPrintStream *)&v177);
        v119 = ptr;
        if (ptr)
        {
          v120 = v179;
          if ((unint64_t)v179 >= 0xFFFFFFFFFFFFFFF0)
          {
            __break(0xC471u);
            JUMPOUT(0x1980E1248);
          }
          if ((_QWORD)v179 == -17)
          {
            __break(0xC471u);
            JUMPOUT(0x1980E1250);
          }
          v121 = WTF::fastMalloc((WTF *)(v179 + 17));
          *(_DWORD *)v121 = 1;
          *(_QWORD *)(v121 + 8) = v120;
          memcpy((void *)(v121 + 16), v119, v120);
          *(_BYTE *)(v121 + 16 + v120) = 0;
        }
        else
        {
          v121 = 0;
        }
        v122 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v181[4])(&v181);
        v123 = v122;
        v124 = (const char *)(v121 + 16);
        if (!v121)
          v124 = 0;
        WTF::PrintStream::printf(v122, "%s", v124);
        WTF::PrintStream::printf(v123, "%s", "\n");
        ((void (*)(_QWORD))v181[5])(&v181);
        if (v121)
        {
          if (*(_DWORD *)v121 == 1)
            WTF::fastFree(v121, v125, v10, v11, v12, v13, v14, v15);
          else
            --*(_DWORD *)v121;
        }
        v127 = v182;
        v126 = v183;
        v185 = 0;
        if (v182)
        {
          if ((unint64_t)v183 >= 0xFFFFFFFFFFFFFFF0)
          {
            __break(0xC471u);
            JUMPOUT(0x1980E1258);
          }
          if ((_QWORD)v183 == -17)
          {
            __break(0xC471u);
            JUMPOUT(0x1980E1260);
          }
          v128 = WTF::fastMalloc((WTF *)(v183 + 17));
          *(_DWORD *)v128 = 1;
          *(_QWORD *)(v128 + 8) = v126;
          v185 = (void (***)(WTF::StringPrintStream *__hidden))v128;
          v129 = v128 + 16;
          memcpy((void *)(v128 + 16), v127, v126);
          *(_BYTE *)(v129 + v126) = 0;
        }
        LODWORD(v130) = HIDWORD(v166);
        if (HIDWORD(v166) == (_DWORD)v166)
        {
          v131 = (uint64_t *)WTF::Vector<WTF::CString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v165, HIDWORD(v166) + 1, (unint64_t)&v185);
          v130 = HIDWORD(v166);
          v132 = v165;
          v133 = *v131;
          *v131 = 0;
          *((_QWORD *)v132 + v130) = v133;
        }
        else
        {
          v134 = (uint64_t **)v185;
          v185 = 0;
          *((_QWORD *)v165 + HIDWORD(v166)) = v134;
        }
        v18 = v157;
        HIDWORD(v166) = v130 + 1;
        v135 = (uint64_t **)v185;
        v185 = 0;
        if (v135)
        {
          if (*(_DWORD *)v135 == 1)
            WTF::fastFree((unint64_t)v135, v125, v10, v11, v12, v13, v14, v15);
          else
            --*(_DWORD *)v135;
        }
        if (ptr != v180)
        {
          v136 = *(_QWORD *)(StatusReg + 752);
          if (v136)
          {
            if ((unint64_t)ptr >> 43
              || ((*(unsigned int *)((char *)&bmalloc_megapage_table + (((unint64_t)ptr >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(ptr)) & 1) == 0)
            {
              if ((unint64_t)ptr >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= (unint64_t)ptr >> 24)
              {
                v11 = 0;
LABEL_195:
                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v136, (unint64_t)ptr, 1, v11, v12, v13, v14, v15);
                goto LABEL_177;
              }
              v11 = (*(_DWORD *)((char *)off_1ECF425F8
                               + (((((unint64_t)ptr >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(ptr) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v11 != 1)
                goto LABEL_195;
            }
            v137 = *(unsigned int *)(v136 + 8000);
            if (v137 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v136, (uint64_t)ptr, (os_unfair_lock_s *)5, v11, v12, v13, v14, v15);
            }
            else
            {
              *(_QWORD *)(v136 + 8 * v137) = (unint64_t)ptr | 0x5000000000000;
              *(_DWORD *)(v136 + 8000) = v137 + 1;
            }
          }
          else
          {
            pas_try_deallocate_slow_no_cache((unint64_t)ptr, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
LABEL_177:
        v9 = v182;
        if (v182 != v184)
        {
          v138 = *(_QWORD *)(StatusReg + 752);
          if (v138)
          {
            if (!((unint64_t)v182 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + (((unint64_t)v182 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v182)) & 1) != 0)
            {
LABEL_181:
              v139 = *(unsigned int *)(v138 + 8000);
              if (v139 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v138, (uint64_t)v182, (os_unfair_lock_s *)5, v11, v12, v13, v14, v15);
              }
              else
              {
                *(_QWORD *)(v138 + 8 * v139) = (unint64_t)v182 | 0x5000000000000;
                *(_DWORD *)(v138 + 8000) = v139 + 1;
              }
              goto LABEL_183;
            }
            if ((unint64_t)v182 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= (unint64_t)v182 >> 24)
            {
              v11 = 0;
            }
            else
            {
              v11 = (*(_DWORD *)((char *)off_1ECF425F8
                               + (((((unint64_t)v182 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v182) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v11 == 1)
                goto LABEL_181;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v138, (unint64_t)v182, 1, v11, v12, v13, v14, v15);
          }
          else
          {
            pas_try_deallocate_slow_no_cache((unint64_t)v182, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
LABEL_183:
        v22 = v160;
        if (!(_DWORD)v160)
        {
          if (HIDWORD(v166))
          {
            v140 = HIDWORD(v166) - 1;
            v141 = 8 * (HIDWORD(v166) - 1);
            do
            {
              if (HIDWORD(v166) <= v140)
              {
                __break(0xC471u);
                JUMPOUT(0x1980E1268);
              }
              WTF::dataLog<WTF::CString>((WTF *)((char *)v165 + v141));
              v141 -= 8;
              --v140;
            }
            while (v140 != -1);
          }
          goto LABEL_216;
        }
      }
    }
  }
LABEL_235:
  v149 = v171;
  if (v173)
  {
    v150 = 16 * v173;
    do
    {
      v151 = *(_QWORD *)v149;
      if (*(_QWORD *)v149)
      {
        *(_QWORD *)v149 = 0;
        *((_DWORD *)v149 + 2) = 0;
        WTF::fastFree(v151, v9, v10, v11, v12, v13, v14, v15);
      }
      v149 = (WTF *)((char *)v149 + 16);
      v150 -= 16;
    }
    while (v150);
    v149 = v171;
  }
  if (v149)
  {
    v171 = 0;
    v172 = 0;
    WTF::fastFree((unint64_t)v149, v9, v10, v11, v12, v13, v14, v15);
  }
  v152 = v169;
  if (v169)
  {
    v169 = 0;
    v170 = 0;
    WTF::fastFree((unint64_t)v152, v9, v10, v11, v12, v13, v14, v15);
  }
  v153 = v167;
  if (v167)
  {
    v167 = 0;
    v168 = 0;
    WTF::fastFree((unint64_t)v153, v9, v10, v11, v12, v13, v14, v15);
  }
}

void JSC::B3::Air::lowerAfterRegAlloc(WTF **this, JSC::B3::Air::Code *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int8x16_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int8x16_t v42;
  uint64_t i;
  int8x16_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  _BOOL4 v68;
  char v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  int v74;
  char *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _QWORD *v86;
  uint64_t v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  uint64_t v91;
  char v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  unsigned int v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 *v106;
  uint64_t v107;
  uint64_t v108;
  _OWORD *v109;
  __int128 v110;
  __int128 v111;
  int v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  WTF *v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unint64_t v134;
  uint64_t v135;
  unsigned int v136;
  char v137;
  char *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  unsigned int v142;
  uint64_t v143;
  char v144;
  char v145;
  BOOL v146;
  uint64_t v147;
  char v148;
  char v149;
  BOOL v150;
  unint64_t v151;
  char v152;
  char v153;
  uint64_t v154;
  WTF *v155;
  char *v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  int v165;
  unsigned int *v166;
  unint64_t v167;
  uint64_t v168;
  BOOL v169;
  uint64_t v170;
  int v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  unsigned int v186;
  unint64_t v187;
  unsigned int v188;
  uint64_t v189;
  _OWORD *v190;
  _OWORD *v191;
  __int128 v192;
  uint64_t v193;
  WTF *v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  _OWORD *v203;
  uint64_t v204;
  uint64_t v205;
  __int128 *v206;
  __int128 v207;
  __int128 v208;
  int v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  unint64_t v220;
  WTF *v221;
  WTF *v222;
  WTF *v223;
  WTF *v224;
  WTF *v225;
  uint64_t v226;
  _DWORD *v227;
  int v228;
  char v230;
  unsigned int v231;
  uint64_t v232;
  unsigned int v233;
  unsigned int v234;
  __int128 *v235;
  char v236;
  __int128 v237;
  int v238;
  char *v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  int v243;
  char v244;
  unint64_t v245;
  char *v246;
  unint64_t v247;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  int v253;
  WTF *v254;
  WTF *v255;
  uint64_t v256;
  unint64_t v257;
  WTF *v258;
  WTF *v259;
  JSC::B3::Air *v260;
  WTF *v261;
  uint64_t v262;
  uint64_t v263;
  WTF *v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  _OWORD *v269;
  uint64_t v270;
  char v271;
  int v272;
  uint64_t v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  char *v303;
  unint64_t v304;
  JSC::B3::Air::Code *v306;
  unint64_t v307;
  uint64_t v308;
  unsigned int v309;
  unsigned int v310;
  unint64_t v311;
  uint64_t v312;
  int v313;
  char v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t *v317;
  unint64_t v318;
  int8x16_t v319;
  int8x16_t v320;
  int8x16_t v321;
  unint64_t v322;
  int8x16_t v323;
  int8x16_t v324;
  WTF *v325;
  int v326;
  unsigned int v327;
  WTF *v328;
  uint64_t v329;
  _OWORD v330[4];
  WTF *v331;
  uint64_t v332;
  WTF *v333[2];
  _OWORD v334[4];
  WTF *v335;
  uint64_t v336;
  uint64_t v337;
  WTF *v338;
  int v339;
  unsigned int v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  unint64_t v345;
  WTF *v346;
  uint64_t v347;
  _BYTE v348[1088];
  _QWORD v349[3];
  uint64_t v350;
  _OWORD v351[2];
  WTF *v352;
  int v353;
  WTF *v354;
  int v355;
  WTF *v356;
  int v357;
  unsigned int v358;
  uint64_t v359;
  JSC::B3::Air *v360[3];
  uint64_t v361;
  WTF *v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  uint64_t v367;
  _BYTE v368[19];

  v8 = (unint64_t)this;
  JSC::B3::Air::PhaseScope::PhaseScope((uint64_t)v360, this, (uint64_t)"lowerAfterRegAlloc", 19, a5, a6, a7, a8);
  v16 = *(unsigned int *)(v8 + 108);
  if (!(_DWORD)v16)
    goto LABEL_332;
  v17 = 0;
  while (!*(_QWORD *)(*(_QWORD *)(v8 + 96) + 8 * v17))
  {
    if (v16 == ++v17)
      goto LABEL_332;
  }
  if ((_DWORD)v16 == (_DWORD)v17)
    goto LABEL_332;
  v18 = *(_QWORD *)(v8 + 96);
  while (1)
  {
    if (v16 <= v17)
    {
      __break(0xC471u);
      JUMPOUT(0x1980E2B54);
    }
    v19 = *(_QWORD *)(v18 + 8 * v17);
    v20 = *(unsigned int *)(v19 + 20);
    if ((_DWORD)v20)
      break;
LABEL_12:
    v17 = (v17 + 1);
    if (v16 > v17)
    {
      while (!*(_QWORD *)(v18 + 8 * v17))
      {
        if (v16 == ++v17)
          goto LABEL_332;
      }
    }
    if ((_DWORD)v16 == (_DWORD)v17)
      goto LABEL_332;
  }
  v21 = v20 << 7;
  v22 = (unsigned __int16 *)(*(_QWORD *)(v19 + 8) + 120);
  while (1)
  {
    v24 = *v22;
    v22 += 64;
    v23 = v24;
    if (v24 == 447 || v23 == 450)
      break;
    v21 -= 128;
    if (!v21)
      goto LABEL_12;
  }
  JSC::B3::Air::padInterference((JSC::B3::Air *)v8, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
  v359 = 0;
  JSC::B3::Air::RegLiveness::RegLiveness((JSC::B3::Air::RegLiveness *)&v352, (JSC::B3::Air::Code *)v8, v25, v26, v27, v28, v29, v30);
  v31 = *(unsigned int *)(v8 + 108);
  v318 = v8;
  if ((_DWORD)v31)
  {
    v32 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v8 + 96) + 8 * v32))
    {
      if (v31 == ++v32)
        goto LABEL_347;
    }
    if ((_DWORD)v31 != (_DWORD)v32)
    {
      LODWORD(v33) = *(_DWORD *)(v8 + 108);
      while (1)
      {
        if (v33 <= v32)
        {
          __break(0xC471u);
          JUMPOUT(0x1980E2AFCLL);
        }
        v34 = *(unsigned int **)(*(_QWORD *)(v8 + 96) + 8 * v32);
        v35 = v34[5];
        if ((_DWORD)v35)
          break;
LABEL_56:
        v32 = (v32 + 1);
        if (v33 > v32)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v8 + 96) + 8 * v32))
          {
            if (v33 == ++v32)
            {
              LODWORD(v32) = v33;
              break;
            }
          }
        }
        if ((_DWORD)v31 == (_DWORD)v32)
          goto LABEL_66;
      }
      v36 = *v34;
      v37 = (_QWORD *)((char *)v356 + 16 * v36);
      v38 = *((int8x16_t *)v354 + v36);
      while (1)
      {
        v39 = v35 - 1;
        if (v34[5] <= (int)v35 - 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980E2A8CLL);
        }
        v40 = *((_QWORD *)v34 + 1) + ((unint64_t)(v35 - 1) << 7);
        v41 = *(unsigned __int16 *)(v40 + 120);
        if (v41 == 450 || (v42 = 0uLL, v41 == 447))
          v42 = v38;
        for (i = *(_QWORD *)(*v37 + 32 * v35 + 16); i; i &= i - 1)
          v38 = vandq_s8(v38, (int8x16_t)vdupq_n_s64(~(i & (unint64_t)-i)));
        v44 = *(int8x16_t *)(*v37 + 32 * v39);
        if (v41 != 450 && v41 != 447)
          goto LABEL_39;
        v45 = v359;
        if (v359)
          goto LABEL_33;
        v320 = *(int8x16_t *)(*v37 + 32 * v39);
        v323 = v38;
        v319 = v42;
        WTF::HashTable<JSC::B3::Air::Inst *,WTF::KeyValuePair<JSC::B3::Air::Inst *,JSC::RegisterSetBuilder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Inst *,JSC::RegisterSetBuilder>>,WTF::DefaultHash<JSC::B3::Air::Inst *>,WTF::HashMap<JSC::B3::Air::Inst *,JSC::RegisterSetBuilder,WTF::DefaultHash<JSC::B3::Air::Inst *>,WTF::HashTraits<JSC::B3::Air::Inst *>,WTF::HashTraits<JSC::RegisterSetBuilder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Inst *>>::rehash(&v359, 8u);
        v42 = v319;
        v44 = v320;
        v38 = v323;
        v45 = v359;
        if (v359)
LABEL_33:
          v46 = *(_DWORD *)(v45 - 8);
        else
          v46 = 0;
        v47 = (~(v40 << 32) + v40) ^ ((~(v40 << 32) + v40) >> 22);
        v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
        v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
        v50 = v46 & ((v49 >> 31) ^ v49);
        v10 = v45 + 24 * v50;
        v51 = *(_QWORD *)v10;
        if (*(_QWORD *)v10)
        {
          v56 = 0;
          v57 = 1;
          while (v51 != v40)
          {
            if (v51 == -1)
              v56 = (_QWORD *)v10;
            v50 = (v50 + v57) & v46;
            v10 = v45 + 24 * v50;
            v51 = *(_QWORD *)v10;
            ++v57;
            if (!*(_QWORD *)v10)
            {
              if (v56)
              {
                *v56 = 0;
                v56[1] = 0;
                v56[2] = 0;
                --*(_DWORD *)(v45 - 16);
                v10 = (uint64_t)v56;
              }
              goto LABEL_35;
            }
          }
          goto LABEL_39;
        }
LABEL_35:
        *(_QWORD *)v10 = v40;
        *(int8x16_t *)(v10 + 8) = v42;
        v52 = v359;
        if (v359)
          v53 = *(_DWORD *)(v359 - 12) + 1;
        else
          v53 = 1;
        *(_DWORD *)(v359 - 12) = v53;
        v54 = (*(_DWORD *)(v52 - 16) + v53);
        v55 = *(unsigned int *)(v52 - 4);
        if (v55 > 0x400)
        {
          if (v55 <= 2 * v54)
            goto LABEL_62;
        }
        else if (3 * v55 <= 4 * v54)
        {
          if ((_DWORD)v55)
          {
LABEL_62:
            v321 = v44;
            v324 = v38;
            v58 = (_DWORD)v55 << (6 * v53 >= (2 * v55));
          }
          else
          {
            v321 = v44;
            v324 = v38;
            v58 = 8;
          }
          WTF::HashTable<JSC::B3::Air::Inst *,WTF::KeyValuePair<JSC::B3::Air::Inst *,JSC::RegisterSetBuilder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Inst *,JSC::RegisterSetBuilder>>,WTF::DefaultHash<JSC::B3::Air::Inst *>,WTF::HashMap<JSC::B3::Air::Inst *,JSC::RegisterSetBuilder,WTF::DefaultHash<JSC::B3::Air::Inst *>,WTF::HashTraits<JSC::B3::Air::Inst *>,WTF::HashTraits<JSC::RegisterSetBuilder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Inst *>>::rehash(&v359, v58);
          v44 = v321;
          v38 = v324;
        }
LABEL_39:
        v38 = vorrq_s8(v44, v38);
        v35 = v39;
        if (!(_DWORD)v39)
        {
          v8 = v318;
          LODWORD(v33) = *(_DWORD *)(v318 + 108);
          goto LABEL_56;
        }
      }
    }
LABEL_347:
    LODWORD(v33) = *(_DWORD *)(v8 + 108);
  }
  else
  {
    LODWORD(v33) = 0;
  }
LABEL_66:
  memset(v351, 0, sizeof(v351));
  v350 = 0;
  if (*(_BYTE *)(v8 + 196))
    v350 = ~*(_QWORD *)(v8 + 216) & 0xFF003FF80000;
  v349[0] = v8;
  v349[1] = &v350;
  v349[2] = v351;
  v345 = v8;
  v346 = (WTF *)v348;
  v347 = 8;
  if ((_DWORD)v33)
  {
    v59 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v8 + 96) + 8 * v59))
    {
      if (v33 == ++v59)
      {
        LODWORD(v59) = v33;
        break;
      }
    }
  }
  else
  {
    LODWORD(v59) = 0;
  }
  if ((_DWORD)v33 == (_DWORD)v59)
    goto LABEL_318;
  LODWORD(v60) = v33;
  v313 = v33;
  do
  {
    if (v60 <= v59)
    {
      __break(0xC471u);
      JUMPOUT(0x1980E2AF4);
    }
    v61 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 8 * v59);
    if (!*(_DWORD *)(v61 + 20))
      goto LABEL_180;
    v62 = 0;
    do
    {
      v63 = *(_QWORD *)(v61 + 8);
      v64 = v63 + (v62 << 7);
      v65 = *(__int16 *)(v64 + 120);
      if (v65 != 450)
      {
        if (v65 == 447)
        {
          v262 = WTF::HashMap<JSC::B3::Air::Inst *,JSC::RegisterSetBuilder,WTF::DefaultHash<JSC::B3::Air::Inst *>,WTF::HashTraits<JSC::B3::Air::Inst *>,WTF::HashTraits<JSC::RegisterSetBuilder>,WTF::HashTableTraits>::get(v359, v63 + (v62 << 7));
          v264 = (WTF *)(v263 | v262);
          v335 = (WTF *)(v263 | v262);
          v330[0] = 0uLL;
          v265 = *(unsigned int *)(v64 + 12);
          if ((_DWORD)v265)
          {
            v266 = 0;
            v267 = 2;
            do
            {
              v268 = *(_QWORD *)v64;
              v269 = (_OWORD *)(*(_QWORD *)v64 + v266);
              *(_OWORD *)v333 = *v269;
              v334[0] = v269[1];
              if (v267 - 1 >= v265)
              {
                __break(0xC471u);
                JUMPOUT(0x1980E2B34);
              }
              v341 = v269[2];
              v342 = v269[3];
              if (v267 >= v265)
              {
                __break(0xC471u);
                JUMPOUT(0x1980E2B3CLL);
              }
              v270 = *(_QWORD *)(v268 + v266 + 64);
              if (v270 > 8)
                v271 = 4;
              else
                v271 = algn_199152BE2[(int)v270];
              v338 = (WTF *)&v335;
              JSC::B3::Air::Arg::forEachTmpFast<JSC::B3::Air::lowerAfterRegAlloc(JSC::B3::Air::Code &)::$_5>((uint64_t)v333, (_QWORD **)&v338);
              JSC::B3::Air::Arg::forEachTmpFast<JSC::B3::Air::lowerAfterRegAlloc(JSC::B3::Air::Code &)::$_5>((uint64_t)&v341, (_QWORD **)&v338);
              v363 = *(_OWORD *)v333;
              v364 = v334[0];
              v365 = v341;
              v366 = v342;
              LOBYTE(v367) = v271;
              if (HIDWORD(v330[0]) == DWORD2(v330[0]))
              {
                WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::ShufflePair const&>((uint64_t)v330, (unint64_t)&v363);
              }
              else
              {
                v272 = HIDWORD(v330[0]) + 1;
                v273 = *(_QWORD *)&v330[0] + 72 * HIDWORD(v330[0]);
                *(_OWORD *)v273 = v363;
                v275 = v365;
                v274 = v366;
                v276 = v364;
                *(_QWORD *)(v273 + 64) = v367;
                *(_OWORD *)(v273 + 32) = v275;
                *(_OWORD *)(v273 + 48) = v274;
                *(_OWORD *)(v273 + 16) = v276;
                HIDWORD(v330[0]) = v272;
              }
              LODWORD(v33) = v313;
              v265 = *(unsigned int *)(v64 + 12);
              v266 += 96;
              v277 = v267 + 1;
              v267 += 3;
            }
            while (v277 < v265);
            v264 = v335;
          }
          JSC::B3::Air::lowerAfterRegAlloc(JSC::B3::Air::Code &)::$_4::operator()((uint64_t)v333, (uint64_t)v349, (uint64_t)v264, 0);
          JSC::B3::Air::lowerAfterRegAlloc(JSC::B3::Air::Code &)::$_4::operator()((uint64_t)&v341, (uint64_t)v349, (uint64_t)v335, 1);
          JSC::B3::Air::emitShuffle(v8, (uint64_t)v330, v333, &v341, *(_QWORD *)(v63 + (v62 << 7) + 112), v281, v282, (uint64_t)&v363);
          JSC::B3::Air::InsertionSet::insertInsts((uint64_t)&v345, v62, (uint64_t)&v363, v283, v284, v285, v286, v287);
          WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v363, v288, v289, v290, v291, v292, v293, v294);
          *(_QWORD *)&v363 = &v364;
          *((_QWORD *)&v363 + 1) = 3;
          *(_QWORD *)v368 = 0;
          *(_WORD *)&v368[8] = 0;
          v368[10] &= 0xFCu;
          JSC::B3::Air::Inst::operator=(v63 + (v62 << 7), &v363, v295, v296, v297, v298, v299, v300);
          v301 = v363;
          if (&v364 != (__int128 *)v363 && (_QWORD)v363)
          {
            *(_QWORD *)&v363 = 0;
            DWORD2(v363) = 0;
            WTF::fastFree(v301, v219, v10, v11, v12, v13, v14, v15);
          }
          v225 = *(WTF **)&v330[0];
          if (*(_QWORD *)&v330[0])
          {
            *(_QWORD *)&v330[0] = 0;
            DWORD2(v330[0]) = 0;
LABEL_255:
            WTF::fastFree((unint64_t)v225, v219, v10, v11, v12, v13, v14, v15);
          }
        }
        goto LABEL_78;
      }
      v317 = (uint64_t *)(v64 + 112);
      if ((*(_WORD *)(*(_QWORD *)(v64 + 112) + 12) & 0xFFF) == 0x52)
        v143 = *(_QWORD *)(v64 + 112);
      else
        v143 = 0;
      v170 = v359;
      if (v359)
      {
        v171 = *(_DWORD *)(v359 - 8);
        v172 = (~(v64 << 32) + v64) ^ ((unint64_t)(~(v64 << 32) + v64) >> 22);
        v173 = 9 * ((v172 + ~(v172 << 13)) ^ ((v172 + ~(v172 << 13)) >> 8));
        v174 = (v173 ^ (v173 >> 15)) + ~((v173 ^ (v173 >> 15)) << 27);
        v175 = v171 & ((v174 >> 31) ^ v174);
        v176 = *(_QWORD *)(v359 + 24 * v175);
        if (v176 == v64)
        {
LABEL_203:
          v177 = v359 + 24 * v175;
          v170 = *(_QWORD *)(v177 + 8);
          v178 = *(_QWORD *)(v177 + 16);
          goto LABEL_204;
        }
        v253 = 1;
        while (v176)
        {
          v175 = (v175 + v253) & v171;
          v176 = *(_QWORD *)(v359 + 24 * v175);
          ++v253;
          if (v176 == v64)
            goto LABEL_203;
        }
        v170 = 0;
      }
      v178 = 0;
LABEL_204:
      LODWORD(v33) = v64 + 122;
      v314 = *(_BYTE *)(v64 + 122);
      v100 = v178 | v170 & 0xFFFF00FF0003FFFFLL;
      v322 = v178;
      v134 = v178 | v170;
      JSC::B3::Air::computeCCallingConvention((JSC::B3::Air *)v8, (JSC::B3::Air::Code *)v143, (uint64_t)&v338);
      v185 = 0;
      v335 = (WTF *)&v337;
      v336 = 2;
      v333[0] = (WTF *)v334;
      v333[1] = (WTF *)2;
      while (1)
      {
        v186 = *(_DWORD *)(v143 + 16);
        if (v186 >= 0x80000000)
          v186 = 0x80000000;
        if (!v186)
          break;
        v187 = v186 == 0x80000000 ? 2 : 1;
        v188 = v185;
        if (v187 <= v185)
          break;
        if (v186 == 0x80000000)
        {
          if (v185)
            v186 = 2;
          else
            v186 = 1;
        }
        else
        {
          switch(v186)
          {
            case 0u:
              break;
            case 1u:
            case 2u:
              v186 = 1;
              break;
            case 3u:
            case 4u:
              v186 = -1;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x1980E2950);
          }
        }
        LODWORD(v363) = v186;
        if (HIDWORD(v336) == (_DWORD)v336)
        {
          WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)&v335, (unint64_t)&v363, v179, v180, v181, v182, v183, v184);
        }
        else
        {
          *((_DWORD *)v335 + HIDWORD(v336)) = v186;
          ++HIDWORD(v336);
        }
        v189 = v188 + 2;
        if (*(_DWORD *)(v64 + 12) <= v189)
        {
          __break(0xC471u);
          JUMPOUT(0x1980E2B1CLL);
        }
        v190 = (_OWORD *)(*(_QWORD *)v64 + 32 * v189);
        if (HIDWORD(v333[1]) == LODWORD(v333[1]))
        {
          WTF::Vector<JSC::B3::Air::Arg,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Arg&>((uint64_t)v333, (unint64_t)v190);
        }
        else
        {
          v191 = (_OWORD *)((char *)v333[0] + 32 * HIDWORD(v333[1]));
          v192 = v190[1];
          *v191 = *v190;
          v191[1] = v192;
          ++HIDWORD(v333[1]);
        }
        v185 = v188 + 1;
      }
      v331 = 0;
      v332 = 0;
      v315 = v134;
      v147 = v134;
      v316 = v143;
      if (v340)
      {
        v155 = 0;
        v142 = 0;
        v151 = 0;
        v33 = 24;
        v147 = v134;
        while (1)
        {
          if (v151 >= *(unsigned int *)(v143 + 76))
          {
            __break(0xC471u);
            JUMPOUT(0x1980E2B0CLL);
          }
          v123 = v151 + 1;
          v124 = v151 + 1 + HIDWORD(v336);
          if (v33 == 24)
            v124 = 1;
          if (v124 >= *(unsigned int *)(v64 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x1980E2B14);
          }
          v125 = *(_QWORD *)(*(_QWORD *)(v143 + 64) + 8 * v151);
          v126 = *(_QWORD *)v64 + 32 * v124;
          v127 = *(_QWORD *)v126;
          v128 = *(char *)(v126 + 8);
          LODWORD(v341) = *(_DWORD *)(v126 + 9);
          *(_DWORD *)((char *)&v341 + 3) = *(_DWORD *)(v126 + 12);
          v130 = *(_DWORD *)(v126 + 16);
          v129 = *(_DWORD *)(v126 + 20);
          v131 = *(_QWORD *)(v126 + 24);
          v132 = *(_QWORD *)((char *)v338 + v33 - 24);
          v8 = *((char *)v338 + v33 - 16);
          LODWORD(v330[0]) = *(_DWORD *)((char *)v338 + v33 - 15);
          *(_DWORD *)((char *)v330 + 3) = *(_DWORD *)((char *)v338 + v33 - 12);
          v134 = *(unsigned int *)((char *)v338 + v33 - 8);
          v133 = *(_DWORD *)((char *)v338 + v33 - 4);
          v135 = *(_QWORD *)((char *)v338 + v33);
          v136 = *(_DWORD *)(v125 + 16);
          if (v136 >= 0x80000000)
            v136 = 0x80000000;
          if (v136 >= 6)
            v137 = 0;
          else
            v137 = 0x40302030200uLL >> (8 * v136);
          *(_QWORD *)&v363 = v127;
          BYTE8(v363) = v128;
          *(_DWORD *)((char *)&v363 + 9) = v341;
          HIDWORD(v363) = *(_DWORD *)((char *)&v341 + 3);
          *(_QWORD *)&v364 = __PAIR64__(v129, v130);
          *((_QWORD *)&v364 + 1) = v131;
          *(_QWORD *)&v365 = v132;
          BYTE8(v365) = v8;
          *(_DWORD *)((char *)&v365 + 9) = v330[0];
          HIDWORD(v365) = *(_DWORD *)((char *)v330 + 3);
          *(_QWORD *)&v366 = __PAIR64__(v133, v134);
          *((_QWORD *)&v366 + 1) = v135;
          LOBYTE(v367) = v137;
          if (v142 == (_DWORD)v332)
          {
            v310 = v133;
            v311 = v123;
            v312 = v147;
            v309 = v129;
            v154 = WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v331, v142 + 1, (unint64_t)&v363);
            v129 = v309;
            v133 = v310;
            v142 = HIDWORD(v332);
            v155 = v331;
            v156 = (char *)v331 + 72 * HIDWORD(v332);
            *(_OWORD *)v156 = *(_OWORD *)v154;
            v158 = *(_OWORD *)(v154 + 32);
            v157 = *(_OWORD *)(v154 + 48);
            v159 = *(_QWORD *)(v154 + 64);
            v160 = *(_OWORD *)(v154 + 16);
            v123 = v311;
            v147 = v312;
            *((_QWORD *)v156 + 8) = v159;
            *((_OWORD *)v156 + 2) = v158;
            *((_OWORD *)v156 + 3) = v157;
            *((_OWORD *)v156 + 1) = v160;
          }
          else
          {
            v138 = (char *)v155 + 72 * v142;
            *(_OWORD *)v138 = v363;
            v139 = v364;
            v140 = v365;
            v141 = v366;
            *((_QWORD *)v138 + 8) = v367;
            *((_OWORD *)v138 + 2) = v140;
            *((_OWORD *)v138 + 3) = v141;
            *((_OWORD *)v138 + 1) = v139;
          }
          HIDWORD(v332) = ++v142;
          if (v128 > 0xD)
          {
LABEL_177:
            v143 = v316;
            goto LABEL_145;
          }
          if (((1 << v128) & 0x31C2) != 0)
            break;
          if (v128 != 11)
            goto LABEL_177;
          v143 = v316;
          if (v130 > 0xFFFFFFDF || (v130 - 1) <= 0x1F)
          {
            v152 = v130 + 127;
            if (v130 <= 0)
              v152 = 31 - v130;
            if ((v152 & 0x40) != 0)
              goto LABEL_351;
            v147 |= 1 << v152;
          }
          if (v129 > 0xFFFFFFDF || v129 - 1 <= 0x1F)
          {
            v144 = v129 + 127;
            v145 = 31 - v129;
            v146 = (int)v129 <= 0;
LABEL_140:
            if (v146)
              v144 = v145;
            if ((v144 & 0x40) != 0)
              goto LABEL_351;
            v147 |= 1 << v144;
          }
LABEL_145:
          if (v8 > 0xD)
            goto LABEL_178;
          if (((1 << v8) & 0x31C2) != 0)
          {
            v8 = v318;
            if (v134 > 0xFFFFFFDF || (v134 - 1) <= 0x1F)
            {
              v148 = v134 + 127;
              v149 = 31 - v134;
              v150 = (int)v134 <= 0;
LABEL_150:
              if (v150)
                v148 = v149;
              if ((v148 & 0x40) != 0)
                goto LABEL_351;
              v147 |= 1 << v148;
            }
          }
          else
          {
            if ((_DWORD)v8 != 11)
            {
LABEL_178:
              v8 = v318;
              goto LABEL_155;
            }
            v8 = v318;
            if (v134 > 0xFFFFFFDF || (v134 - 1) <= 0x1F)
            {
              v153 = v134 + 127;
              if ((int)v134 <= 0)
                v153 = 31 - v134;
              if ((v153 & 0x40) != 0)
                goto LABEL_351;
              v147 |= 1 << v153;
            }
            if (v133 > 0xFFFFFFDF || v133 - 1 <= 0x1F)
            {
              v148 = v133 + 127;
              v149 = 31 - v133;
              v150 = (int)v133 <= 0;
              goto LABEL_150;
            }
          }
LABEL_155:
          v33 += 32;
          v151 = v123;
          if (v123 >= v340)
            goto LABEL_223;
        }
        v143 = v316;
        if (v130 <= 0xFFFFFFDF && (v130 - 1) > 0x1F)
          goto LABEL_145;
        v144 = v130 + 127;
        v145 = 31 - v130;
        v146 = v130 <= 0;
        goto LABEL_140;
      }
LABEL_223:
      v193 = v147;
      JSC::B3::Air::lowerAfterRegAlloc(JSC::B3::Air::Code &)::$_4::operator()((uint64_t)&v341, (uint64_t)v349, v147, 0);
      JSC::B3::Air::lowerAfterRegAlloc(JSC::B3::Air::Code &)::$_4::operator()((uint64_t)v330, (uint64_t)v349, v193, 1);
      if (!HIDWORD(v333[1]))
      {
LABEL_224:
        v328 = 0;
        v329 = 0;
        if (v100)
        {
          v80 = v100;
          do
          {
            v66 = __clz(__rbit64(v80));
            if (v66 < 0x20)
              v67 = v66 + 1;
            else
              v67 = (char)(31 - v66);
            v68 = ((v322 >> v66) & 1) == 0 || v66 < 0x20;
            if (v68)
              v69 = 3;
            else
              v69 = 4;
            if (v68)
              v70 = 8;
            else
              v70 = 16;
            v73 = JSC::B3::Air::Code::addStackSlot(v8, v70, 1);
            v325 = (WTF *)v73;
            BYTE8(v366) = 0;
            *(_QWORD *)&v366 = 0;
            *(_QWORD *)&v363 = 0;
            WORD4(v363) = 513;
            HIDWORD(v363) = 1;
            *(_QWORD *)&v364 = v67;
            BYTE8(v364) = 0;
            *(_QWORD *)&v365 = v73;
            WORD4(v365) = 521;
            HIDWORD(v365) = 0;
            LOBYTE(v367) = v69;
            v74 = HIDWORD(v332);
            if (HIDWORD(v332) == (_DWORD)v332)
            {
              v81 = WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v331, HIDWORD(v332) + 1, (unint64_t)&v363);
              v74 = HIDWORD(v332);
              v82 = (char *)v331 + 72 * HIDWORD(v332);
              *(_OWORD *)v82 = *(_OWORD *)v81;
              v84 = *(_OWORD *)(v81 + 32);
              v83 = *(_OWORD *)(v81 + 48);
              v85 = *(_OWORD *)(v81 + 16);
              *((_QWORD *)v82 + 8) = *(_QWORD *)(v81 + 64);
              *((_OWORD *)v82 + 2) = v84;
              *((_OWORD *)v82 + 3) = v83;
              *((_OWORD *)v82 + 1) = v85;
            }
            else
            {
              v75 = (char *)v331 + 72 * HIDWORD(v332);
              v77 = v365;
              v76 = v366;
              v78 = v364;
              *((_QWORD *)v75 + 8) = v367;
              *((_OWORD *)v75 + 2) = v77;
              *((_OWORD *)v75 + 3) = v76;
              *((_OWORD *)v75 + 1) = v78;
              *(_OWORD *)v75 = v363;
            }
            HIDWORD(v332) = v74 + 1;
            v79 = HIDWORD(v329);
            if (HIDWORD(v329) == (_DWORD)v329)
            {
              v86 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v328, HIDWORD(v329) + 1, (unint64_t)&v325);
              v79 = HIDWORD(v329);
              *((_QWORD *)v328 + HIDWORD(v329)) = *v86;
            }
            else
            {
              *((_QWORD *)v328 + HIDWORD(v329)) = v73;
            }
            HIDWORD(v329) = v79 + 1;
            v80 &= v80 - 1;
          }
          while (v80);
        }
        JSC::B3::Air::emitShuffle(v8, (uint64_t)&v331, &v341, v330, *v317, v71, v72, (uint64_t)&v325);
        v121 = v325;
        LODWORD(v33) = v313;
        if (v327)
        {
          v194 = (WTF *)((char *)v325 + 128 * (unint64_t)v327);
          do
          {
            *(_QWORD *)&v363 = v62;
            *((_QWORD *)&v363 + 1) = (char *)&v364 + 8;
            *(_QWORD *)&v364 = 3;
            v106 = *(__int128 **)v121;
            if (*(WTF **)v121 == (WTF *)((char *)v121 + 16))
            {
              v107 = *((unsigned int *)v121 + 3);
              if ((_DWORD)v107)
              {
                v108 = 32 * v107;
                v109 = (__int128 *)((char *)&v364 + 8);
                do
                {
                  v110 = *v106;
                  v111 = v106[1];
                  v106 += 2;
                  *v109 = v110;
                  v109[1] = v111;
                  v109 += 2;
                  v108 -= 32;
                }
                while (v108);
              }
            }
            else
            {
              *(_QWORD *)v121 = (char *)v121 + 16;
              *((_QWORD *)&v363 + 1) = v106;
              v122 = *((_DWORD *)v121 + 2);
              *((_DWORD *)v121 + 2) = 3;
              LODWORD(v364) = v122;
              LODWORD(v107) = *((_DWORD *)v121 + 3);
            }
            *((_DWORD *)v121 + 3) = 0;
            DWORD1(v364) = v107;
            v112 = *(_DWORD *)((char *)v121 + 119);
            *(_QWORD *)&v368[8] = *((_QWORD *)v121 + 14);
            *(_DWORD *)&v368[15] = v112;
            JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>((uint64_t)&v345, (unint64_t)&v363, v114, v115, v116, v117, v118, v119);
            v120 = *((_QWORD *)&v363 + 1);
            if ((__int128 *)((char *)&v364 + 8) != *((__int128 **)&v363 + 1) && *((_QWORD *)&v363 + 1))
            {
              *((_QWORD *)&v363 + 1) = 0;
              LODWORD(v364) = 0;
              WTF::fastFree(v120, v113, v114, v115, v116, v117, v118, v119);
            }
            v121 = (WTF *)((char *)v121 + 128);
          }
          while (v121 != v194);
          v121 = v325;
          if (v327)
          {
            v245 = (unint64_t)v327 << 7;
            v246 = (char *)v325 + 16;
            do
            {
              v247 = *((_QWORD *)v246 - 2);
              if (v246 != (char *)v247 && v247 != 0)
              {
                *((_QWORD *)v246 - 2) = 0;
                *((_DWORD *)v246 - 2) = 0;
                WTF::fastFree(v247, v113, v114, v115, v116, v117, v118, v119);
              }
              v246 += 128;
              v245 -= 128;
            }
            while (v245);
            v121 = v325;
          }
        }
        if (v121)
        {
          v325 = 0;
          v326 = 0;
          WTF::fastFree((unint64_t)v121, v113, v114, v115, v116, v117, v118, v119);
        }
        JSC::B3::Air::buildCCall(v8, *v317, (uint64_t)&v338, v115, v116, v117, v118, v119, (uint64_t)&v363);
        v203 = (_OWORD *)(v64 + 16);
        v202 = *(_QWORD *)v64;
        v143 = v316;
        if (*(_QWORD *)v64 != v64 + 16)
        {
          if (v202)
          {
            *(_QWORD *)v64 = 0;
            *(_DWORD *)(v64 + 8) = 0;
            WTF::fastFree(v202, v195, v196, v197, v198, v199, v200, v201);
          }
          *(_QWORD *)v64 = v203;
        }
        v204 = v363;
        if ((__int128 *)v363 == &v364)
        {
          if (HIDWORD(v363))
          {
            v205 = 32 * HIDWORD(v363);
            v206 = &v364;
            do
            {
              v207 = *v206;
              v208 = v206[1];
              v206 += 2;
              *v203 = v207;
              v203[1] = v208;
              v203 += 2;
              v205 -= 32;
            }
            while (v205);
          }
        }
        else
        {
          *(_QWORD *)&v363 = &v364;
          *(_QWORD *)v64 = v204;
        }
        *(_DWORD *)(v64 + 8) = DWORD2(v363);
        v209 = HIDWORD(v363);
        HIDWORD(v363) = 0;
        *(_DWORD *)(v64 + 12) = v209;
        v210 = *(_QWORD *)v368;
        *(_DWORD *)(v64 + 119) = *(_DWORD *)&v368[7];
        *v317 = v210;
        v211 = v363;
        if (&v364 != (__int128 *)v363 && (_QWORD)v363)
        {
          *(_QWORD *)&v363 = 0;
          DWORD2(v363) = 0;
          WTF::fastFree(v211, v195, v196, v197, v198, v199, v200, v201);
        }
        if ((v314 & 1) != 0)
          *(_BYTE *)(v64 + 122) |= 1u;
        HIDWORD(v332) = 0;
        if (v100)
        {
          v98 = 0;
          v99 = 0;
          do
          {
            if (HIDWORD(v329) <= v99)
            {
              __break(0xC471u);
              JUMPOUT(0x1980E2B04);
            }
            v87 = *((_QWORD *)v328 + v99);
            v88 = __clz(__rbit64(v100));
            v89 = v88 >= 0x20;
            BYTE8(v364) = 0;
            v90 = (char)(31 - v88);
            if (v88 < 0x20)
              v90 = v88 + 1;
            *(_QWORD *)&v364 = 0;
            v91 = (v322 >> v88) & 1;
            *(_QWORD *)&v363 = v87;
            if (!v89 || v91 == 0)
              v93 = 3;
            else
              v93 = 4;
            WORD4(v363) = 521;
            HIDWORD(v363) = 0;
            *(_QWORD *)&v365 = 0;
            WORD4(v365) = 513;
            HIDWORD(v365) = 1;
            *(_QWORD *)&v366 = v90;
            BYTE8(v366) = 0;
            LOBYTE(v367) = v93;
            if (v98 == (_DWORD)v332)
            {
              v101 = WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v331, v98 + 1, (unint64_t)&v363);
              v98 = HIDWORD(v332);
              v102 = (char *)v331 + 72 * HIDWORD(v332);
              *(_OWORD *)v102 = *(_OWORD *)v101;
              v104 = *(_OWORD *)(v101 + 32);
              v103 = *(_OWORD *)(v101 + 48);
              v105 = *(_OWORD *)(v101 + 16);
              *((_QWORD *)v102 + 8) = *(_QWORD *)(v101 + 64);
              *((_OWORD *)v102 + 2) = v104;
              *((_OWORD *)v102 + 3) = v103;
              *((_OWORD *)v102 + 1) = v105;
            }
            else
            {
              v94 = (char *)v331 + 72 * v98;
              v96 = v365;
              v95 = v366;
              v97 = v364;
              *((_QWORD *)v94 + 8) = v367;
              *((_OWORD *)v94 + 2) = v96;
              *((_OWORD *)v94 + 3) = v95;
              *((_OWORD *)v94 + 1) = v97;
              *(_OWORD *)v94 = v363;
            }
            HIDWORD(v332) = ++v98;
            ++v99;
            v100 &= v100 - 1;
          }
          while (v100);
        }
        if (HIDWORD(v336))
        {
          v100 = 0;
          v134 = 0;
          goto LABEL_272;
        }
        goto LABEL_244;
      }
      v226 = 32 * HIDWORD(v333[1]);
      v227 = (_DWORD *)((char *)v333[0] + 16);
      while (1)
      {
        if (*((_BYTE *)v227 - 8) != 1)
          goto LABEL_269;
        v228 = *v227;
        if (*v227 <= 0xFFFFFFDF && (*v227 - 1) > 0x1F)
          goto LABEL_269;
        v230 = v228 <= 0 ? 31 - v228 : *(_BYTE *)v227 - 1;
        v231 = v230 & 0x7F;
        if (v231 >= 0x40)
          break;
        v232 = 1 << v231;
        v100 &= ~v232;
        v322 &= ~v232;
LABEL_269:
        v227 += 8;
        v226 -= 32;
        if (!v226)
          goto LABEL_224;
      }
LABEL_351:
      while (1)
      {
        __break(1u);
LABEL_352:
        WTF::Vector<JSC::B3::Air::ShufflePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::ShufflePair&>((uint64_t)&v331, (unint64_t)&v363);
LABEL_281:
        if (v134 >= HIDWORD(v333[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x1980E2B2CLL);
        }
        if (*((_BYTE *)v333[0] + v100 + 8) != 1)
          break;
        v243 = *(_DWORD *)((char *)v333[0] + v100 + 16);
        if (v243 <= 0xFFFFFFDF && (v243 - 1) > 0x1F)
          break;
        if (v243 <= 0)
          v244 = 31 - v243;
        else
          v244 = v243 + 127;
        if ((v244 & 0x40) == 0)
        {
          v315 |= 1 << v244;
          break;
        }
      }
      ++v134;
      v100 += 32;
      if (v134 < HIDWORD(v336))
      {
LABEL_272:
        v233 = *(_DWORD *)(v143 + 16);
        if ((v233 & 0x80000000) != 0)
        {
          v278 = *(_QWORD *)(v8 + 8);
          v279 = v233 & 0x7FFFFFFF;
          if (v279 >= *(_DWORD *)(v278 + 44))
          {
            __break(0xC471u);
            JUMPOUT(0x1980E2B44);
          }
          v280 = *(_QWORD *)(v278 + 32) + 16 * v279;
          if (v134 >= *(unsigned int *)(v280 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x1980E2B4CLL);
          }
          v233 = *(_DWORD *)(*(_QWORD *)v280 + 4 * v134);
        }
        if (v134 >= HIDWORD(v333[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x1980E2B24);
        }
        v234 = *((_DWORD *)v335 + v134);
        v235 = (__int128 *)((char *)v333[0] + v100);
        if (v233 >= 0x80000000)
          v233 = 0x80000000;
        *(_QWORD *)&v363 = 0;
        if (v233 >= 6)
          v236 = 0;
        else
          v236 = 0x40302030200uLL >> (8 * v233);
        WORD4(v363) = 513;
        HIDWORD(v363) = 1;
        *(_QWORD *)&v364 = v234;
        BYTE8(v364) = 0;
        v237 = v235[1];
        v365 = *v235;
        v366 = v237;
        LOBYTE(v367) = v236;
        if (HIDWORD(v332) != (_DWORD)v332)
        {
          v238 = HIDWORD(v332) + 1;
          v239 = (char *)v331 + 72 * HIDWORD(v332);
          *(_OWORD *)v239 = v363;
          v241 = v365;
          v240 = v366;
          v242 = v364;
          *((_QWORD *)v239 + 8) = v367;
          *((_OWORD *)v239 + 2) = v241;
          *((_OWORD *)v239 + 3) = v240;
          *((_OWORD *)v239 + 1) = v242;
          HIDWORD(v332) = v238;
          goto LABEL_281;
        }
        goto LABEL_352;
      }
LABEL_244:
      JSC::B3::Air::lowerAfterRegAlloc(JSC::B3::Air::Code &)::$_4::operator()((uint64_t)&v363, (uint64_t)v349, v315, 0);
      v341 = v363;
      v342 = v364;
      v343 = v365;
      v344 = v366;
      JSC::B3::Air::lowerAfterRegAlloc(JSC::B3::Air::Code &)::$_4::operator()((uint64_t)&v363, (uint64_t)v349, v315, 1);
      v330[0] = v363;
      v330[1] = v364;
      v330[2] = v365;
      v330[3] = v366;
      JSC::B3::Air::emitShuffle(v8, (uint64_t)&v331, &v341, v330, *v317, v212, v213, (uint64_t)&v363);
      JSC::B3::Air::InsertionSet::insertInsts((uint64_t)&v345, v62 + 1, (uint64_t)&v363, v214, v215, v216, v217, v218);
      v220 = v363;
      if (HIDWORD(v363))
      {
        v249 = (unint64_t)HIDWORD(v363) << 7;
        v250 = v363 + 16;
        do
        {
          v251 = *(_QWORD *)(v250 - 16);
          if (v250 != v251 && v251 != 0)
          {
            *(_QWORD *)(v250 - 16) = 0;
            *(_DWORD *)(v250 - 8) = 0;
            WTF::fastFree(v251, v219, v10, v11, v12, v13, v14, v15);
          }
          v250 += 128;
          v249 -= 128;
        }
        while (v249);
        v220 = v363;
      }
      if (v220)
      {
        *(_QWORD *)&v363 = 0;
        DWORD2(v363) = 0;
        WTF::fastFree(v220, v219, v10, v11, v12, v13, v14, v15);
      }
      v221 = v328;
      if (v328)
      {
        v328 = 0;
        LODWORD(v329) = 0;
        WTF::fastFree((unint64_t)v221, v219, v10, v11, v12, v13, v14, v15);
      }
      v222 = v331;
      if (v331)
      {
        v331 = 0;
        LODWORD(v332) = 0;
        WTF::fastFree((unint64_t)v222, v219, v10, v11, v12, v13, v14, v15);
      }
      v223 = v333[0];
      if (v334 != (_OWORD *)v333[0] && v333[0])
      {
        v333[0] = 0;
        LODWORD(v333[1]) = 0;
        WTF::fastFree((unint64_t)v223, v219, v10, v11, v12, v13, v14, v15);
      }
      v224 = v335;
      if (&v337 != (uint64_t *)v335 && v335)
      {
        v335 = 0;
        LODWORD(v336) = 0;
        WTF::fastFree((unint64_t)v224, v219, v10, v11, v12, v13, v14, v15);
      }
      v225 = v338;
      if (v338)
      {
        v338 = 0;
        v339 = 0;
        goto LABEL_255;
      }
LABEL_78:
      ++v62;
    }
    while (v62 < *(unsigned int *)(v61 + 20));
LABEL_180:
    JSC::B3::Air::InsertionSet::execute((JSC::B3::Air::InsertionSet *)&v345, (JSC::B3::Air::BasicBlock *)v61, v10, v11, v12, v13, v14, v15);
    v161 = *(_QWORD *)(v61 + 8);
    v162 = *(unsigned int *)(v61 + 20);
    v163 = v161 + (v162 << 7);
    if ((_DWORD)v162)
    {
      v164 = 0;
      v165 = 0;
      v166 = (unsigned int *)(v161 + (v162 << 7));
      v167 = (unint64_t)v166;
      do
      {
        v168 = v161 + v164;
        if (*(_QWORD *)(v161 + v164 + 112))
          v169 = 0;
        else
          v169 = *(unsigned __int16 *)(v161 + v164 + 120) == 0;
        if (v169 && (*(_BYTE *)(v168 + 122) & 3) == 0)
        {
          if (!*(_DWORD *)(v161 + v164 + 12))
          {
            if (v167 == *(_QWORD *)(v61 + 8) + ((unint64_t)*(unsigned int *)(v61 + 20) << 7))
            {
              v167 = v161 + v164;
            }
            else if ((unsigned int *)v168 != v166)
            {
              WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v166, (unsigned int *)v168, v167, v11, v12, v13, v14, v15);
              v167 += v161 + v164 - (_QWORD)v166;
            }
            v307 = *(_QWORD *)(v161 + v164);
            if (v161 + v164 + 16 != v307 && v307)
            {
              v308 = v161 + v164;
              *(_QWORD *)v308 = 0;
              *(_DWORD *)(v308 + 8) = 0;
              WTF::fastFree(v307, (void *)v168, v10, v11, v12, v13, v14, v15);
            }
            v166 = (unsigned int *)(v161 + v164 + 128);
            ++v165;
          }
          v8 = v318;
          LODWORD(v33) = v313;
        }
        v164 += 128;
      }
      while (v161 + v164 < v163);
      v161 = *(_QWORD *)(v61 + 8);
      LODWORD(v162) = *(_DWORD *)(v61 + 20);
      v163 = v167;
    }
    else
    {
      v165 = 0;
      v166 = (unsigned int *)(v161 + (v162 << 7));
    }
    v9 = (unsigned int *)(v161 + ((unint64_t)v162 << 7));
    if (v166 != v9)
    {
      WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping(v166, v9, v163, v11, v12, v13, v14, v15);
      LODWORD(v162) = *(_DWORD *)(v61 + 20);
    }
    *(_DWORD *)(v61 + 20) = v162 - v165;
    v59 = (v59 + 1);
    v60 = *(unsigned int *)(v8 + 108);
    if (v60 > v59)
    {
      while (!*(_QWORD *)(*(_QWORD *)(v8 + 96) + 8 * v59))
      {
        if (v60 == ++v59)
        {
          LODWORD(v59) = *(_DWORD *)(v8 + 108);
          break;
        }
      }
    }
  }
  while ((_DWORD)v33 != (_DWORD)v59);
  v254 = v346;
  if (HIDWORD(v347))
  {
    v302 = 136 * HIDWORD(v347);
    v303 = (char *)v346 + 24;
    do
    {
      v304 = *((_QWORD *)v303 - 2);
      if (v303 != (char *)v304 && v304 != 0)
      {
        *((_QWORD *)v303 - 2) = 0;
        *((_DWORD *)v303 - 2) = 0;
        WTF::fastFree(v304, v9, v10, v11, v12, v13, v14, v15);
      }
      v303 += 136;
      v302 -= 136;
    }
    while (v302);
    v254 = v346;
  }
  if (v348 != (_BYTE *)v254 && v254)
  {
    v346 = 0;
    LODWORD(v347) = 0;
    WTF::fastFree((unint64_t)v254, v9, v10, v11, v12, v13, v14, v15);
  }
LABEL_318:
  v255 = v356;
  if (v358)
  {
    v256 = 16 * v358;
    do
    {
      v257 = *(_QWORD *)v255;
      if (*(_QWORD *)v255)
      {
        *(_QWORD *)v255 = 0;
        *((_DWORD *)v255 + 2) = 0;
        WTF::fastFree(v257, v9, v10, v11, v12, v13, v14, v15);
      }
      v255 = (WTF *)((char *)v255 + 16);
      v256 -= 16;
    }
    while (v256);
    v255 = v356;
  }
  if (v255)
  {
    v356 = 0;
    v357 = 0;
    WTF::fastFree((unint64_t)v255, v9, v10, v11, v12, v13, v14, v15);
  }
  v258 = v354;
  if (v354)
  {
    v354 = 0;
    v355 = 0;
    WTF::fastFree((unint64_t)v258, v9, v10, v11, v12, v13, v14, v15);
  }
  v259 = v352;
  if (v352)
  {
    v352 = 0;
    v353 = 0;
    WTF::fastFree((unint64_t)v259, v9, v10, v11, v12, v13, v14, v15);
  }
  if (v359)
    WTF::fastFree(v359 - 16, v9, v10, v11, v12, v13, v14, v15);
LABEL_332:
  v260 = v360[0];
  *((JSC::B3::Air **)v360[0] + 38) = v360[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v362)
      v306 = (WTF *)((char *)v362 + 16);
    else
      v306 = 0;
    JSC::B3::Air::validate(v260, v306, (char *)v10, v11, v12, v13, v14, v15);
  }
  v261 = v362;
  v362 = 0;
  if (v261)
  {
    if (*(_DWORD *)v261 == 1)
      WTF::fastFree((unint64_t)v261, v9, v10, v11, v12, v13, v14, v15);
    else
      --*(_DWORD *)v261;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v361);
}

uint64_t WTF::HashMap<JSC::B3::Air::Inst *,JSC::RegisterSetBuilder,WTF::DefaultHash<JSC::B3::Air::Inst *>,WTF::HashTraits<JSC::B3::Air::Inst *>,WTF::HashTraits<JSC::RegisterSetBuilder>,WTF::HashTableTraits>::get(uint64_t result, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = *(_QWORD *)(result + 24 * v6);
    if (v7 == a2)
    {
      return *(_QWORD *)(result + 24 * v6 + 8);
    }
    else
    {
      v8 = 1;
      while (v7)
      {
        v6 = (v6 + v8) & v2;
        v7 = *(_QWORD *)(result + 24 * v6);
        ++v8;
        if (v7 == a2)
          return *(_QWORD *)(result + 24 * v6 + 8);
      }
      return 0;
    }
  }
  return result;
}

uint64_t JSC::B3::Air::Arg::forEachTmpFast<JSC::B3::Air::lowerAfterRegAlloc(JSC::B3::Air::Code &)::$_5>(uint64_t result, _QWORD **a2)
{
  unsigned int v2;
  int v3;
  char v5;
  _QWORD *v6;
  int v7;
  char v9;
  int v10;

  v2 = *(char *)(result + 8);
  if (v2 <= 0xD)
  {
    if (((1 << v2) & 0x31C2) != 0)
    {
      v3 = *(_DWORD *)(result + 16);
      if (v3 > 0xFFFFFFDF || (v3 - 1) <= 0x1F)
      {
        v5 = v3 + 127;
        if (v3 <= 0)
          v5 = 31 - v3;
        if ((v5 & 0x40) == 0)
        {
          v6 = *a2;
LABEL_11:
          *v6 |= 1 << v5;
          return result;
        }
LABEL_29:
        __break(1u);
      }
    }
    else if (v2 == 11)
    {
      v7 = *(_DWORD *)(result + 16);
      v6 = *a2;
      if (v7 > 0xFFFFFFDF || (v7 - 1) <= 0x1F)
      {
        if (v7 <= 0)
          v9 = 31 - v7;
        else
          v9 = v7 + 127;
        if ((v9 & 0x40) != 0)
          goto LABEL_29;
        *v6 |= 1 << v9;
        v6 = *a2;
      }
      v10 = *(_DWORD *)(result + 20);
      if (v10 > 0xFFFFFFDF || (v10 - 1) <= 0x1F)
      {
        if (v10 <= 0)
          v5 = 31 - v10;
        else
          v5 = v10 + 127;
        if ((v5 & 0x40) == 0)
          goto LABEL_11;
        goto LABEL_29;
      }
    }
  }
  return result;
}

unsigned int *JSC::B3::Air::lowerAfterRegAlloc(JSC::B3::Air::Code &)::$_4::operator()(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  unsigned int **v5;
  uint64_t v7;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  unsigned int *v19;
  BOOL v20;
  unint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int **v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;

  v7 = a3;
  *(_DWORD *)(a1 + 44) = 1;
  v10 = (_QWORD *)(a1 + 44);
  *(_QWORD *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 40) = 512;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  v11 = a4;
  result = *(unsigned int **)a2;
  v13 = *(_QWORD *)a2 + 32;
  v14 = 8;
  if (!a4)
  {
    v14 = 4;
    v13 = *(_QWORD *)a2 + 16;
  }
  v15 = *(unsigned int *)(v13 + 12);
  if ((_DWORD)v15)
  {
    v16 = *(char **)&result[v14];
    do
    {
      v17 = *v16;
      if ((*v16 & 0x7Fu) >= 0x40uLL)
        goto LABEL_49;
      v18 = 1 << (*v16 & 0x7F);
      if ((v18 & a3) == 0 && (**(_QWORD **)(a2 + 8) & v18) == 0)
      {
        v34 = v17 & 0x7F;
        *(_WORD *)(a1 + 8) = 513;
        v35 = (char)(31 - (v17 & 0x7F));
        if ((v17 & 0x60) == 0)
          v35 = v34 + 1;
        *(_QWORD *)a1 = 0;
        if (v34 == 127)
          v36 = 0;
        else
          v36 = v35;
        *(_DWORD *)(a1 + 12) = 1;
        *(_DWORD *)(a1 + 16) = v36;
        *(_DWORD *)(a1 + 20) = 0;
        *(_BYTE *)(a1 + 24) = 0;
        if ((v17 & 0x40) == 0)
        {
          v7 = (1 << v17) | a3;
          goto LABEL_18;
        }
        goto LABEL_49;
      }
      ++v16;
      --v15;
    }
    while (v15);
  }
  v4 = v10 - 4;
  v5 = (unsigned int **)(*(_QWORD *)(a2 + 16) + 16 * a4);
  v19 = *v5;
  if (*v5)
    goto LABEL_17;
  if (!HIBYTE(dword_1ECF4C7B0))
    goto LABEL_50;
  if (HIBYTE(word_1ECF4C79E))
    v20 = 1;
  else
    v20 = *(_BYTE *)(*((_QWORD *)result + 1) + 212) != 0;
  while (1)
  {
    v21 = a4 == 1 && v20 ? 16 : 8;
    *v5 = JSC::B3::Air::Code::addStackSlot((uint64_t)result, v21, 1);
    v19 = *(unsigned int **)(*(_QWORD *)(a2 + 16) + 16 * v11);
    result = *(unsigned int **)a2;
LABEL_17:
    *(_QWORD *)a1 = v19;
    *(_WORD *)(a1 + 8) = 521;
    *v4 = 0;
    *(_QWORD *)((char *)v4 + 5) = 0;
LABEL_18:
    v22 = result + 8;
    v23 = 8;
    if (!a4)
    {
      v23 = 4;
      v22 = result + 4;
    }
    v24 = v22[3];
    if (!(_DWORD)v24)
      break;
    v25 = *(char **)&result[v23];
    while (1)
    {
      v26 = *v25;
      if ((*v25 & 0x7Fu) > 0x3FuLL)
        break;
      v27 = 1 << (*v25 & 0x7F);
      if ((v27 & v7) == 0 && (**(_QWORD **)(a2 + 8) & v27) == 0)
      {
        v37 = v26 & 0x7F;
        *(_WORD *)(a1 + 40) = 513;
        v38 = 31 - v37;
        if ((v26 & 0x60) == 0)
          v38 = v37 + 1;
        *(_QWORD *)(a1 + 32) = 0;
        if (v37 == 127)
          v39 = 0;
        else
          v39 = v38;
        *(_DWORD *)(a1 + 44) = 1;
        *(_DWORD *)(a1 + 48) = v39;
        *(_DWORD *)(a1 + 52) = 0;
        *(_BYTE *)(a1 + 56) = 0;
        if ((v26 & 0x40) == 0)
          return result;
        break;
      }
      ++v25;
      if (!--v24)
        goto LABEL_26;
    }
LABEL_49:
    __break(1u);
LABEL_50:
    v20 = 0;
  }
LABEL_26:
  v28 = *(_QWORD *)(a2 + 16) + 16 * v11;
  v31 = *(_QWORD *)(v28 + 8);
  v30 = (unsigned int **)(v28 + 8);
  v29 = v31;
  if (!v31)
  {
    if (HIBYTE(dword_1ECF4C7B0))
    {
      if (HIBYTE(word_1ECF4C79E))
        v32 = 1;
      else
        v32 = *(_BYTE *)(*((_QWORD *)result + 1) + 212) != 0;
    }
    else
    {
      v32 = 0;
    }
    if (a4 == 1 && v32)
      v33 = 16;
    else
      v33 = 8;
    result = JSC::B3::Air::Code::addStackSlot((uint64_t)result, v33, 1);
    *v30 = result;
    v29 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * v11 + 8);
  }
  *(_QWORD *)(a1 + 32) = v29;
  *(_WORD *)(a1 + 40) = 521;
  *v10 = 0;
  *(_QWORD *)((char *)v10 + 5) = 0;
  return result;
}

uint64_t WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v9 = *(unsigned int *)(a1 + 12);
  v10 = *(_QWORD *)a1;
  if (!(_DWORD)v9)
  {
    if (!v10)
      return a1;
LABEL_12:
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    return a1;
  }
  v12 = v9 << 7;
  v13 = v10 + 16;
  do
  {
    v14 = *(_QWORD *)(v13 - 16);
    if (v13 != v14 && v14 != 0)
    {
      *(_QWORD *)(v13 - 16) = 0;
      *(_DWORD *)(v13 - 8) = 0;
      WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
    }
    v13 += 128;
    v12 -= 128;
  }
  while (v12);
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    goto LABEL_12;
  return a1;
}

void JSC::B3::Air::lowerEntrySwitch(WTF **this, JSC::B3::Air::Code *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int **v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  WTF *v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  WTF *v43;
  size_t v44;
  char *v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  char v53;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _WORD *v87;
  int v88;
  uint64_t v89;
  _OWORD *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  double *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int *v118;
  uint64_t v119;
  uint64_t v120;
  const JSC::B3::Air::Inst *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _WORD *v129;
  int v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  WTF *v157;
  JSC::B3::Air *v159;
  _DWORD *v160;
  JSC::B3::Air::Code *v161;
  WTF *v162;
  uint64_t v163;
  _QWORD *v164;
  int v165;
  unsigned int v166;
  WTF *v167;
  uint64_t v168;
  uint64_t v169;
  WTF *v170;
  uint64_t v171;
  _BYTE v172[128];
  _QWORD v173[3];
  uint64_t v174;
  _DWORD *v175;
  _OWORD v176[2];

  JSC::B3::Air::PhaseScope::PhaseScope((uint64_t)v173, this, (uint64_t)"lowerEntrySwitch", 17, a5, a6, a7, a8);
  v16 = (WTF *)v172;
  v169 = 0x8000000000000000;
  v170 = (WTF *)v172;
  v171 = 16;
  v17 = *((unsigned int *)this + 27);
  if (!(_DWORD)v17)
  {
LABEL_259:
    __break(0xC471u);
    JUMPOUT(0x1980E3CD0);
  }
  v18 = 0;
  v19 = this[12];
  while (!*((_QWORD *)v19 + v18))
  {
    if (v17 == ++v18)
      goto LABEL_233;
  }
  if ((_DWORD)v17 == (_DWORD)v18)
    goto LABEL_233;
  v20 = *((_DWORD *)this + 27);
  do
  {
    if (v20 <= v18)
    {
      __break(0xC471u);
      JUMPOUT(0x1980E3B5CLL);
    }
    v9 = *((_QWORD *)this[12] + v18);
    v21 = *(unsigned int *)(v9 + 20);
    if (!(_DWORD)v21)
    {
      __break(0xC471u);
      JUMPOUT(0x1980E3B64);
    }
    if (*(_WORD *)(*(_QWORD *)(v9 + 8) + (v21 << 7) - 8) == 446)
    {
      WTF::GraphNodeWorklist<JSC::B3::Air::BasicBlock *,WTF::IndexSet<JSC::B3::Air::BasicBlock *>>::push((WTF::BitVector *)&v169, (unsigned int *)v9);
      v20 = *((_DWORD *)this + 27);
    }
    v18 = (v18 + 1);
    if (v20 > v18)
    {
      while (!*((_QWORD *)this[12] + v18))
      {
        if (v20 == ++v18)
        {
          LODWORD(v18) = v20;
          break;
        }
      }
    }
  }
  while ((_DWORD)v17 != (_DWORD)v18);
  if (v169 < 0)
  {
    if ((v169 & 0x7FFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_231;
LABEL_20:
    v24 = HIDWORD(v171);
    if (HIDWORD(v171))
    {
      do
      {
        v25 = *((_QWORD *)v170 + --v24);
        HIDWORD(v171) = v24;
        if (!v25)
          break;
        v26 = *(unsigned int *)(v25 + 84);
        if ((_DWORD)v26)
        {
          v27 = *(unsigned int ***)(v25 + 72);
          v28 = 8 * v26;
          do
          {
            v29 = *v27;
            *(_QWORD *)&v176[0] = *v27;
            v30 = v169;
            if (v169 < 0)
              v31 = 63;
            else
              v31 = *(_QWORD *)(2 * v169);
            v32 = *v29;
            if (v31 <= v32)
            {
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v169, v32 + 1, 0);
              v30 = v169;
            }
            if (v30 >= 0)
              v33 = (unint64_t *)(2 * v30 + 8);
            else
              v33 = (unint64_t *)&v169;
            v34 = (v32 >> 3) & 0x1FFFFFF8;
            v35 = *(unint64_t *)((char *)v33 + v34);
            *(unint64_t *)((char *)v33 + v34) = v35 | (1 << v32);
            if ((v35 & (1 << v32)) == 0)
            {
              v36 = HIDWORD(v171);
              if (HIDWORD(v171) == (_DWORD)v171)
              {
                v151 = (_QWORD *)WTF::Vector<JSC::B3::Air::BasicBlock *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v170, HIDWORD(v171) + 1, (unint64_t)v176);
                v36 = HIDWORD(v171);
                *((_QWORD *)v170 + HIDWORD(v171)) = *v151;
              }
              else
              {
                *((_QWORD *)v170 + HIDWORD(v171)) = v29;
              }
              HIDWORD(v171) = v36 + 1;
            }
            ++v27;
            v28 -= 8;
          }
          while (v28);
          v24 = HIDWORD(v171);
        }
      }
      while (v24);
      v20 = *((_DWORD *)this + 27);
    }
    if (!v20)
    {
      __break(0xC471u);
      JUMPOUT(0x1980E3CE0);
    }
    v37 = this[12];
    if (!*(_QWORD *)v37)
      goto LABEL_79;
    v38 = **(unsigned int **)v37;
    v39 = (_QWORD *)(2 * v169);
    v40 = v169 < 0 ? 63 : *v39;
    if (v40 <= v38)
      goto LABEL_79;
    v41 = v39 + 1;
    v42 = (unint64_t *)&v169;
    if (v169 >= 0)
      v42 = v41;
    if (((*(unint64_t *)((char *)v42 + ((v38 >> 3) & 0x1FFFFFF8)) >> v38) & 1) == 0)
    {
LABEL_79:
      __break(0xC471u);
      goto LABEL_278;
    }
    v43 = this[1];
    v44 = *((unsigned int *)v43 + 50);
    if ((_DWORD)v44)
    {
      v45 = (char *)WTF::fastMalloc((WTF *)*((unsigned int *)v43 + 50));
      memset(v45, 1, v44);
      v20 = *((_DWORD *)this + 27);
      if (!v20)
      {
        __break(0xC471u);
        JUMPOUT(0x1980E3D08);
      }
      v37 = this[12];
    }
    else
    {
      v45 = 0;
    }
    v46 = 0;
    while (!*((_QWORD *)v37 + v46))
    {
      if (v20 == ++v46)
        goto LABEL_81;
    }
    if (v20 != (_DWORD)v46)
    {
      v47 = this[1];
      do
      {
        if (v20 <= v46)
        {
          __break(0xC471u);
          JUMPOUT(0x1980E3B6CLL);
        }
        v48 = *((_QWORD *)v37 + v46);
        v49 = *(unsigned int *)(v48 + 20);
        if (!(_DWORD)v49)
        {
          __break(0xC471u);
          JUMPOUT(0x1980E3B74);
        }
        if (*(_WORD *)(*(_QWORD *)(v48 + 8) + (v49 << 7) - 8) == 446)
        {
          v50 = *((_DWORD *)v47 + 50);
          if (v50)
          {
            if (v50 - 1 >= v44)
            {
              __break(0xC471u);
              JUMPOUT(0x1980E3CF8);
            }
            if ((v50 - 1) >= *(_DWORD *)(v48 + 36))
            {
              __break(0xC471u);
              JUMPOUT(0x1980E3D00);
            }
            v51 = *(_QWORD *)(v48 + 24);
            v52 = v50 - 1;
            do
            {
              if (v45[v52])
                v53 = *(_BYTE *)(v51 + 16 * v52 + 8);
              else
                v53 = 0;
              v45[v52] = v53;
            }
            while ((unint64_t)v52--);
          }
        }
        v46 = (v46 + 1);
        if (v20 > v46)
        {
          while (!*((_QWORD *)v37 + v46))
          {
            if (v20 == ++v46)
            {
              LODWORD(v46) = v20;
              break;
            }
          }
        }
      }
      while (v20 != (_DWORD)v46);
    }
LABEL_81:
    v167 = 0;
    v168 = 0;
    if (!(_DWORD)v44)
    {
      __break(0xC471u);
      JUMPOUT(0x1980E3CE8);
    }
    v55 = *v45;
    *(_QWORD *)&v176[0] = *(_QWORD *)v37;
    BYTE8(v176[0]) = v55;
    WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>>((uint64_t)&v167, (unint64_t)v176);
    v62 = *((unsigned int *)this + 27);
    v164 = 0;
    v165 = 0;
    v166 = v62;
    if ((_DWORD)v62)
    {
      if (v62 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1980E3CF0);
      }
      v63 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v62));
      v165 = v62;
      v164 = v63;
      bzero(v63, 8 * v62);
    }
    else
    {
      v63 = 0;
    }
    if (*((_DWORD *)this[1] + 50) <= 1u)
    {
      v64 = v169;
LABEL_87:
      if ((v64 & 0x8000000000000000) != 0)
      {
        v140 = __clz(__rbit64(v64));
        v65 = 63;
        if (v140 >= 0x3F)
          v69 = 63;
        else
          v69 = v140;
      }
      else
      {
        v65 = *(_QWORD *)(2 * v64);
        if ((unint64_t)(v65 + 63) < 0x40)
        {
LABEL_94:
          JSC::B3::Air::Code::setEntrypoints<WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, &v167, v56, v57, v58, v59, v60, v61);
          JSC::B3::Air::Code::resetReachability((JSC::B3::Air::Code *)this, v70, v71, v72, v73, v74, v75, v76);
          if (v63)
          {
            v164 = 0;
            v165 = 0;
            WTF::fastFree((unint64_t)v63, v77, v78, v79, v80, v81, v82, v83);
          }
          if (v167)
            WTF::fastFree((unint64_t)v167, v77, v78, v79, v80, v81, v82, v83);
          WTF::fastFree((unint64_t)v45, v77, v78, v79, v80, v81, v82, v83);
          goto LABEL_240;
        }
        v66 = *(_QWORD *)(2 * v64 + 8);
        if (v66 && (v67 = __clz(__rbit64(v66)), v67 < 0x40))
        {
          v68 = 0;
        }
        else
        {
          if ((unint64_t)(v65 + 63) >> 6 == 1)
            goto LABEL_94;
          v138 = 0;
          while (1)
          {
            v139 = *(_QWORD *)(2 * v64 + 0x10 + 8 * v138);
            if (v139)
            {
              v67 = __clz(__rbit64(v139));
              if (v67 <= 0x3F)
                break;
            }
            if (((unint64_t)(v65 + 63) >> 6) - 1 == ++v138)
              goto LABEL_94;
          }
          v68 = v138 + 1;
        }
        v69 = v67 + (v68 << 6);
      }
      if (v69 == v65)
        goto LABEL_94;
      while (1)
      {
        if (*((_DWORD *)this + 27) <= v69)
        {
          __break(0xC471u);
          JUMPOUT(0x1980E3D20);
        }
        v84 = *((_QWORD *)this[12] + v69);
        v85 = *(unsigned int *)(v84 + 20);
        if (!(_DWORD)v85)
        {
          __break(0xC471u);
          JUMPOUT(0x1980E3D28);
        }
        v86 = *(_QWORD *)(v84 + 8) + (v85 << 7);
        v88 = *(unsigned __int16 *)(v86 - 8);
        v87 = (_WORD *)(v86 - 8);
        if (v88 == 446)
        {
          if (!*(_DWORD *)(v84 + 36))
          {
            __break(0xC471u);
            JUMPOUT(0x1980E3D30);
          }
          v90 = *(_OWORD **)(v84 + 24);
          v89 = v84 + 24;
          v176[0] = *v90;
          *v87 = 329;
          WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(v89, 1uLL, v56, v57, v58, v59, v60, v61);
          if (!*(_DWORD *)(v89 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x1980E3D38);
          }
          v91 = *(_QWORD *)v89;
          *(_QWORD *)v91 = *(_QWORD *)&v176[0];
          *(_BYTE *)(v91 + 8) = BYTE8(v176[0]);
          v64 = v169;
        }
        v92 = v69 + 1;
        if ((v64 & 0x8000000000000000) != 0)
        {
          v143 = __clz(__rbit64(v64 >> v92)) + v92;
          if (v143 >= 0x3F)
            v69 = 63;
          else
            v69 = v143;
          goto LABEL_110;
        }
        v69 = *(_QWORD *)(2 * v64);
        v93 = v69 + 63;
        v94 = v92 >> 6;
        if (v92 >> 6 < (unint64_t)(v69 + 63) >> 6)
        {
          v95 = *(_QWORD *)(2 * v64 + 8 * v94 + 8);
          if (!v95 || (v96 = __clz(__rbit64(v95 >> v92)) + (v92 & 0x3F), v96 >= 0x40))
          {
            if (v94 + 1 == v93 >> 6)
              goto LABEL_110;
            while (1)
            {
              v141 = *(_QWORD *)(2 * v64 + 0x10 + 8 * v94);
              if (v141)
              {
                v96 = __clz(__rbit64(v141));
                if (v96 <= 0x3F)
                  break;
              }
              if ((v93 >> 6) - 1 == ++v94)
                goto LABEL_110;
            }
            ++v94;
          }
          v69 = v96 + (v94 << 6);
        }
LABEL_110:
        if (v69 == v65)
          goto LABEL_94;
      }
    }
    v97 = 1;
    while (1)
    {
      *(_QWORD *)&v176[0] = 0;
      WTF::Vector<JSC::B3::Air::BasicBlock *,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::fill((uint64_t)&v164, v176, v166, v57, v58, v59, v60, v61);
      if (v169 < 0)
      {
        v149 = __clz(__rbit64(v169));
        if (v149 >= 0x3F)
          v102 = 63;
        else
          v102 = v149;
        v98 = 63;
      }
      else
      {
        v98 = *(_QWORD *)(2 * v169);
        if ((unint64_t)(v98 + 63) < 0x40)
          goto LABEL_133;
        v99 = *(_QWORD *)(2 * v169 + 8);
        if (v99 && (v100 = __clz(__rbit64(v99)), v100 < 0x40))
        {
          v101 = 0;
        }
        else
        {
          if ((unint64_t)(v98 + 63) >> 6 == 1)
            goto LABEL_133;
          v145 = 0;
          while (1)
          {
            v146 = *(_QWORD *)(2 * v169 + 0x10 + 8 * v145);
            if (v146)
            {
              v100 = __clz(__rbit64(v146));
              if (v100 <= 0x3F)
                break;
            }
            if (((unint64_t)(v98 + 63) >> 6) - 1 == ++v145)
              goto LABEL_133;
          }
          v101 = v145 + 1;
        }
        v102 = v100 + (v101 << 6);
      }
      if (v102 != v98)
      {
        v103 = v164;
        do
        {
          if (*((_DWORD *)this + 27) <= v102)
          {
            __break(0xC471u);
            JUMPOUT(0x1980E3D10);
          }
          v104 = (double *)*((_QWORD *)this[12] + v102);
          v103[*(unsigned int *)v104] = JSC::B3::Air::Code::addBlock((JSC::B3::Air::Code *)this, v104[13]);
          v105 = v102 + 1;
          if (v169 < 0)
          {
            v142 = __clz(__rbit64((unint64_t)v169 >> v105)) + v105;
            if (v142 >= 0x3F)
              v102 = 63;
            else
              v102 = v142;
            continue;
          }
          v102 = *(_QWORD *)(2 * v169);
          v106 = v102 + 63;
          v107 = v105 >> 6;
          if (v105 >> 6 < (unint64_t)(v102 + 63) >> 6)
          {
            v108 = *(_QWORD *)(2 * v169 + 8 * v107 + 8);
            if (!v108 || (v109 = __clz(__rbit64(v108 >> v105)) + (v105 & 0x3F), v109 >= 0x40))
            {
              if (v107 + 1 == v106 >> 6)
                continue;
              while (1)
              {
                v110 = *(_QWORD *)(2 * v169 + 0x10 + 8 * v107);
                if (v110)
                {
                  v109 = __clz(__rbit64(v110));
                  if (v109 <= 0x3F)
                    break;
                }
                if ((v106 >> 6) - 1 == ++v107)
                  goto LABEL_127;
              }
              ++v107;
            }
            v102 = v109 + (v107 << 6);
          }
LABEL_127:
          ;
        }
        while (v102 != v98);
      }
LABEL_133:
      if (!*((_DWORD *)this + 27))
      {
        __break(0xC471u);
        JUMPOUT(0x1980E3D48);
      }
      if (v97 == v44)
      {
        __break(0xC471u);
        JUMPOUT(0x1980E3D50);
      }
      v63 = v164;
      v111 = v45[v97];
      *(_QWORD *)&v176[0] = v164[**(unsigned int **)this[12]];
      BYTE8(v176[0]) = v111;
      v112 = HIDWORD(v168);
      if (HIDWORD(v168) == (_DWORD)v168)
      {
        WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>>((uint64_t)&v167, (unint64_t)v176);
      }
      else
      {
        *((_OWORD *)v167 + HIDWORD(v168)) = v176[0];
        HIDWORD(v168) = v112 + 1;
      }
      v64 = v169;
      if (v169 < 0)
      {
        v150 = __clz(__rbit64(v169));
        if (v150 >= 0x3F)
          v116 = 63;
        else
          v116 = v150;
        v163 = 63;
        goto LABEL_144;
      }
      v163 = *(_QWORD *)(2 * v169);
      if ((unint64_t)(v163 + 63) < 0x40)
        goto LABEL_171;
      v113 = *(_QWORD *)(2 * v169 + 8);
      if (v113)
      {
        v114 = __clz(__rbit64(v113));
        if (v114 < 0x40)
        {
          v115 = 0;
          goto LABEL_143;
        }
      }
      if ((unint64_t)(v163 + 63) >> 6 != 1)
      {
        v147 = 0;
        while (1)
        {
          v148 = *(_QWORD *)(2 * v169 + 0x10 + 8 * v147);
          if (v148)
          {
            v114 = __clz(__rbit64(v148));
            if (v114 <= 0x3F)
              break;
          }
          if (((unint64_t)(v163 + 63) >> 6) - 1 == ++v147)
            goto LABEL_171;
        }
        v115 = v147 + 1;
LABEL_143:
        v116 = v114 + (v115 << 6);
LABEL_144:
        if (v116 == v163)
          goto LABEL_171;
        v162 = v16;
        while (2)
        {
          if (*((_DWORD *)this + 27) <= v116)
          {
            __break(0xC471u);
            JUMPOUT(0x1980E3D18);
          }
          v117 = v97;
          v118 = (unsigned int *)*((_QWORD *)this[12] + v116);
          v119 = v63[*v118];
          v120 = v118[5];
          if ((_DWORD)v120)
          {
            v121 = (const JSC::B3::Air::Inst *)*((_QWORD *)v118 + 1);
            v122 = v120 << 7;
            do
            {
              JSC::B3::Air::BasicBlock::appendInst<JSC::B3::Air::Inst const&>(v119, v121);
              v121 = (const JSC::B3::Air::Inst *)((char *)v121 + 128);
              v122 -= 128;
            }
            while (v122);
          }
          v123 = (uint64_t *)(v119 + 24);
          WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v119 + 24, (uint64_t)(v118 + 6), v56, v57, v58, v59, v60, v61);
          v124 = *(unsigned int *)(v119 + 36);
          v97 = v117;
          if ((_DWORD)v124)
          {
            v125 = 0;
            do
            {
              v126 = v63[**(unsigned int **)(*v123 + v125)];
              if (v126)
                *(_QWORD *)(*v123 + v125) = v126;
              v125 += 16;
            }
            while (16 * v124 != v125);
          }
          v127 = *(unsigned int *)(v119 + 20);
          if (!(_DWORD)v127)
          {
            __break(0xC471u);
            JUMPOUT(0x1980E3D40);
          }
          v128 = *(_QWORD *)(v119 + 8) + (v127 << 7);
          v130 = *(unsigned __int16 *)(v128 - 8);
          v129 = (_WORD *)(v128 - 8);
          if (v130 == 446)
          {
            if (v124 <= v117)
            {
              __break(0xC471u);
              JUMPOUT(0x1980E3D58);
            }
            v176[0] = *(_OWORD *)(*(_QWORD *)(v119 + 24) + 16 * v117);
            *v129 = 329;
            WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(v119 + 24, 1uLL, v56, v57, v58, v59, v60, v61);
            if (!*(_DWORD *)(v119 + 36))
            {
              __break(0xC471u);
LABEL_278:
              JUMPOUT(0x1980E33DCLL);
            }
            v131 = *v123;
            *(_QWORD *)v131 = *(_QWORD *)&v176[0];
            *(_BYTE *)(v131 + 8) = BYTE8(v176[0]);
          }
          v132 = v116 + 1;
          v64 = v169;
          if (v169 < 0)
          {
            v144 = __clz(__rbit64((unint64_t)v169 >> v132)) + v132;
            if (v144 >= 0x3F)
              v116 = 63;
            else
              v116 = v144;
          }
          else
          {
            v116 = *(_QWORD *)(2 * v169);
            v133 = v116 + 63;
            v134 = v132 >> 6;
            if (v132 >> 6 < (unint64_t)(v116 + 63) >> 6)
            {
              v135 = *(_QWORD *)(2 * v169 + 8 * v134 + 8);
              if (v135)
              {
                v136 = __clz(__rbit64(v135 >> v132)) + (v132 & 0x3F);
                if (v136 < 0x40)
                  goto LABEL_164;
              }
              if (v134 + 1 != v133 >> 6)
              {
                while (1)
                {
                  v137 = *(_QWORD *)(2 * v169 + 0x10 + 8 * v134);
                  if (v137)
                  {
                    v136 = __clz(__rbit64(v137));
                    if (v136 <= 0x3F)
                      break;
                  }
                  if ((v133 >> 6) - 1 == ++v134)
                    goto LABEL_165;
                }
                ++v134;
LABEL_164:
                v116 = v136 + (v134 << 6);
              }
            }
          }
LABEL_165:
          if (v116 == v163)
          {
            v16 = v162;
            break;
          }
          continue;
        }
      }
LABEL_171:
      if (++v97 >= (unint64_t)*((unsigned int *)this[1] + 50))
        goto LABEL_87;
    }
  }
  v22 = 8 * ((unint64_t)(*(_QWORD *)(2 * v169) + 63) >> 6);
  while (v22)
  {
    v23 = *(_QWORD *)(2 * v169 + v22);
    v22 -= 8;
    if (v23)
      goto LABEL_20;
  }
LABEL_231:
  if (!v20)
    goto LABEL_259;
  v19 = this[12];
LABEL_233:
  v152 = *((unsigned int *)this[1] + 50);
  if ((_DWORD)v152)
  {
    if (v152 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1980E3CD8);
    }
    v153 = *(_QWORD *)v19;
    v154 = WTF::fastMalloc((WTF *)(16 * v152));
    v155 = v154;
    do
    {
      *(_QWORD *)v155 = v153;
      *(_BYTE *)(v155 + 8) = 0;
      v155 += 16;
    }
    while (v155 != v154 + 16 * v152);
  }
  else
  {
    v154 = 0;
  }
  v156 = (unint64_t)this[30];
  if (v156)
  {
    this[30] = 0;
    *((_DWORD *)this + 62) = 0;
    WTF::fastFree(v156, (void *)v9, (uint64_t)v10, v11, v12, v13, v14, v15);
  }
  this[30] = (WTF *)v154;
  *((_DWORD *)this + 62) = v152;
  *((_DWORD *)this + 63) = v152;
  if ((_DWORD)v152 != *((_DWORD *)this + 71))
  {
    __break(0xC471u);
    JUMPOUT(0x1980E3CB0);
  }
LABEL_240:
  v157 = v170;
  if (v16 != v170 && v170 != 0)
  {
    v170 = 0;
    LODWORD(v171) = 0;
    WTF::fastFree((unint64_t)v157, (void *)v9, (uint64_t)v10, v11, v12, v13, v14, v15);
  }
  if ((v169 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v169, (void *)v9, (uint64_t)v10, v11, v12, v13, v14, v15);
  v159 = (JSC::B3::Air *)v173[0];
  *(_QWORD *)(v173[0] + 304) = v173[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v175)
      v161 = (JSC::B3::Air::Code *)(v175 + 4);
    else
      v161 = 0;
    JSC::B3::Air::validate(v159, v161, v10, v11, v12, v13, v14, v15);
  }
  v160 = v175;
  v175 = 0;
  if (v160)
  {
    if (*v160 == 1)
      WTF::fastFree((unint64_t)v160, (void *)v9, (uint64_t)v10, v11, v12, v13, v14, v15);
    else
      --*v160;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v174);
}

void WTF::GraphNodeWorklist<JSC::B3::Air::BasicBlock *,WTF::IndexSet<JSC::B3::Air::BasicBlock *>>::push(WTF::BitVector *this, unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  WTF::BitVector *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int *v13;

  v13 = a2;
  v4 = *a2;
  v5 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x8000000000000000) != 0)
    v6 = 63;
  else
    v6 = *(_QWORD *)(2 * v5);
  if (v6 <= v4)
  {
    WTF::BitVector::resizeOutOfLine(this, v4 + 1, 0);
    v5 = *(_QWORD *)this;
  }
  if (v5 >= 0)
    v7 = (WTF::BitVector *)(2 * v5 + 8);
  else
    v7 = this;
  v8 = (v4 >> 3) & 0x1FFFFFF8;
  v9 = *(_QWORD *)((char *)v7 + v8);
  *(_QWORD *)((char *)v7 + v8) = v9 | (1 << v4);
  if ((v9 & (1 << v4)) == 0)
  {
    v10 = (_QWORD *)((char *)this + 8);
    v11 = *((unsigned int *)this + 5);
    if ((_DWORD)v11 == *((_DWORD *)this + 4))
    {
      v12 = (_QWORD *)WTF::Vector<JSC::B3::Air::BasicBlock *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v11 + 1, (unint64_t)&v13);
      v11 = *((unsigned int *)this + 5);
      *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v11) = *v12;
    }
    else
    {
      *(_QWORD *)(*v10 + 8 * v11) = a2;
    }
    *((_DWORD *)this + 5) = v11 + 1;
  }
}

void JSC::B3::Air::Code::setEntrypoints<WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;

  v10 = *(_QWORD *)(a1 + 240);
  if (v10)
  {
    *(_QWORD *)(a1 + 240) = 0;
    *(_DWORD *)(a1 + 248) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 240) = v11;
  LODWORD(v11) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 248) = v11;
  LODWORD(v11) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 252) = v11;
  if ((_DWORD)v11 != *(_DWORD *)(a1 + 284))
    __break(0xC471u);
}

void JSC::B3::Air::lowerMacros(WTF **this, JSC::B3::Air::Code *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  int v22;
  WTF *v23;
  JSC::B3::Air *v24;
  _DWORD *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  JSC::B3::Air::Code *v30;
  uint64_t v31[4];
  uint64_t v32[4];
  uint64_t v33[4];
  _QWORD v34[4];
  uint64_t *v35[4];
  unsigned int v36;
  WTF **v37;
  WTF *v38;
  uint64_t v39;
  _BYTE v40[1088];
  _QWORD v41[3];
  uint64_t v42;
  _DWORD *v43;

  JSC::B3::Air::PhaseScope::PhaseScope((uint64_t)v41, this, (uint64_t)"Air::lowerMacros", 17, a5, a6, a7, a8);
  v37 = this;
  v38 = (WTF *)v40;
  v39 = 8;
  v16 = *((unsigned int *)this + 27);
  if (!(_DWORD)v16)
    goto LABEL_30;
  v17 = 0;
  while (!*((_QWORD *)this[12] + v17))
  {
    if (v16 == ++v17)
      goto LABEL_30;
  }
  if ((_DWORD)v16 == (_DWORD)v17)
    goto LABEL_30;
  LODWORD(v18) = *((_DWORD *)this + 27);
  do
  {
    if (v18 <= v17)
    {
      __break(0xC471u);
      JUMPOUT(0x1980E41B4);
    }
    v19 = *((_QWORD *)this[12] + v17);
    v36 = 0;
    if (*(_DWORD *)(v19 + 20))
    {
      v20 = 0;
      do
      {
        v21 = *(_QWORD *)(v19 + 8) + ((unint64_t)v20 << 7);
        v35[0] = (uint64_t *)v21;
        v35[1] = (uint64_t *)this;
        v35[2] = (uint64_t *)&v37;
        v35[3] = (uint64_t *)&v36;
        v34[0] = v21;
        v34[1] = this;
        v34[2] = &v37;
        v34[3] = &v36;
        v33[0] = v21;
        v33[1] = (uint64_t)this;
        v33[2] = (uint64_t)&v37;
        v33[3] = (uint64_t)&v36;
        v32[0] = v21;
        v32[1] = (uint64_t)this;
        v32[2] = (uint64_t)&v37;
        v32[3] = (uint64_t)&v36;
        v31[0] = v21;
        v31[1] = (uint64_t)this;
        v31[2] = (uint64_t)&v37;
        v31[3] = (uint64_t)&v36;
        v22 = *(__int16 *)(v21 + 120);
        if (v22 <= 449)
        {
          if (v22 <= 448)
          {
            switch(*(_WORD *)(v21 + 120))
            {
              case 0x1AA:
                JSC::B3::Air::lowerMacros(JSC::B3::Air::Code &)::$_6::operator()(v32, (uint64_t)v9, (uint64_t)v10, v11, v12, v13, v14, v15);
                break;
              case 0x1AB:
                JSC::B3::Air::lowerMacros(JSC::B3::Air::Code &)::$_3::operator()(v33, (uint64_t)v9, (uint64_t)v10, v11, v12, v13, v14, v15);
                break;
              case 0x1AC:
                JSC::B3::Air::lowerMacros(JSC::B3::Air::Code &)::$_9::operator()(v31, (uint64_t)v9, (uint64_t)v10, v11, v12, v13, v14, v15);
                break;
              case 0x1AD:
                if (!*(_DWORD *)(v21 + 12))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980E4154);
                }
                return;
              default:
                if (v22 == 365)
                {
                  JSC::B3::Air::lowerMacros(JSC::B3::Air::Code &)::$_2::operator()((uint64_t)v34, (uint64_t)v9, (uint64_t)v10, v11, v12, v13, v14, v15);
                }
                else if (v22 == 392 && !*(_DWORD *)(v21 + 12))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980E412CLL);
                }
                return;
            }
            goto LABEL_17;
          }
        }
        else if (v22 != 450 || *((_DWORD *)this + 48) > 1u)
        {
          goto LABEL_17;
        }
        JSC::B3::Air::lowerMacros(JSC::B3::Air::Code &)::$_0::operator()(v35);
LABEL_17:
        v20 = v36 + 1;
        v36 = v20;
      }
      while (v20 < *(_DWORD *)(v19 + 20));
    }
    JSC::B3::Air::InsertionSet::execute((JSC::B3::Air::InsertionSet *)&v37, (JSC::B3::Air::BasicBlock *)v19, (uint64_t)v10, v11, v12, v13, v14, v15);
    v17 = (v17 + 1);
    v18 = *((unsigned int *)this + 27);
    if (v18 > v17)
    {
      while (!*((_QWORD *)this[12] + v17))
      {
        if (v18 == ++v17)
        {
          LODWORD(v17) = *((_DWORD *)this + 27);
          break;
        }
      }
    }
  }
  while ((_DWORD)v16 != (_DWORD)v17);
  v23 = v38;
  if (HIDWORD(v39))
  {
    v26 = 136 * HIDWORD(v39);
    v27 = (char *)v38 + 24;
    do
    {
      v28 = *((_QWORD *)v27 - 2);
      if (v27 != (char *)v28 && v28 != 0)
      {
        *((_QWORD *)v27 - 2) = 0;
        *((_DWORD *)v27 - 2) = 0;
        WTF::fastFree(v28, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
      }
      v27 += 136;
      v26 -= 136;
    }
    while (v26);
    v23 = v38;
  }
  if (v40 != (_BYTE *)v23 && v23)
  {
    v38 = 0;
    LODWORD(v39) = 0;
    WTF::fastFree((unint64_t)v23, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
  }
LABEL_30:
  v24 = (JSC::B3::Air *)v41[0];
  *(_QWORD *)(v41[0] + 304) = v41[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v43)
      v30 = (JSC::B3::Air::Code *)(v43 + 4);
    else
      v30 = 0;
    JSC::B3::Air::validate(v24, v30, v10, v11, v12, v13, v14, v15);
  }
  v25 = v43;
  v43 = 0;
  if (v25)
  {
    if (*v25 == 1)
      WTF::fastFree((unint64_t)v25, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
    else
      --*v25;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v42);
}

void JSC::B3::Air::lowerMacros(JSC::B3::Air::Code &)::$_0::operator()(uint64_t **a1)
{
  unint64_t v1;
  uint64_t **v2;
  JSC::B3::Air *v3;
  uint64_t *v4;
  JSC::B3::Air::Code *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  _BOOL4 v14;
  int v15;
  JSC::B3::Air::Code *v16;
  unsigned int v17;
  char v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  BOOL v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  char *v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  uint64_t v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  __int128 *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  WTF *v56;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  char *v63;
  char *v64;
  uint64_t v65;
  WTF *v66;
  void *v67;
  uint64_t v68;
  WTF *v69;
  WTF *v70;
  uint64_t v71;
  WTF *v72;
  __int128 *v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  WTF *v78;
  unint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v85;
  WTF *v86;
  uint64_t v87;
  unint64_t v88;
  WTF *v89;
  unsigned int v90;
  uint64_t v91;
  WTF *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  unint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  __int128 v107;
  void *v108;
  uint64_t v109;
  WTF *v110;
  WTF *v111;
  uint64_t v112;
  WTF *v113;
  __int128 v114;
  char v115;
  uint64_t v116;
  char v117;
  int v118;
  uint64_t *v119;
  unsigned int v120;
  uint64_t v121;
  char v122;
  int v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t *v132;
  unint64_t v133;
  _OWORD *v134;
  _OWORD *v135;
  WTF *v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  int v140;
  uint64_t v141;
  WTF *v142;
  unsigned int v143;
  uint64_t v144;
  int v145;
  __int128 v146;
  unint64_t v147;
  JSC::B3::Air::Code *v148;
  int v149;
  uint64_t v150;
  WTF *v151;
  void *v152;
  WTF *v153;
  WTF *v154;
  int v155;
  unsigned int v156;
  __int16 v157;
  int v158;
  int v159;
  int v160;
  WTF *v161;
  WTF *v162;
  WTF *v163;
  WTF *v164;
  int v165;
  uint64_t v166;
  _BOOL4 v167;
  char v168;
  BOOL v169;
  uint64_t v170;
  char v171;
  JSC::B3::Air::Code *v172;
  uint64_t **v173;
  WTF *v174[2];
  _BYTE v175[56];
  __int128 v176;
  _BYTE v177[19];
  WTF *v178;
  uint64_t v179;
  _BYTE v180[1152];
  WTF *v181;
  int v182;
  unsigned int v183;
  WTF *v184;
  WTF *v185;
  _BYTE v186[32];
  __int128 v187;
  __int128 v188;
  _BYTE v189[19];
  __int128 v190;
  uint64_t v191;
  char v192;
  _OWORD v193[3];

  v2 = a1;
  v4 = *a1;
  v3 = (JSC::B3::Air *)a1[1];
  if ((*(_WORD *)(v4[14] + 12) & 0xFFF) == 0x52)
    v5 = (JSC::B3::Air::Code *)v4[14];
  else
    v5 = 0;
  v171 = *((_BYTE *)v4 + 122);
  JSC::B3::Air::computeCCallingConvention(v3, v5, (uint64_t)&v181);
  v12 = *((_DWORD *)v5 + 4);
  if (v12 >= 0x80000000)
    v12 = 0x80000000;
  if (v12 == 0x80000000)
    v13 = 2;
  else
    v13 = 1;
  v169 = v12 == 0;
  if (v12)
    v14 = v12 == 0x80000000;
  else
    v14 = 0;
  v167 = v14;
  if (v12)
    v15 = v13;
  else
    v15 = 0;
  v178 = (WTF *)v180;
  v179 = 16;
  v172 = v5;
  v173 = v2;
  if (*((_DWORD *)v5 + 19) < 2u)
    goto LABEL_136;
  v16 = v5;
  v17 = 0;
  v18 = 0;
  v19 = *v2;
  v1 = 1;
  v20 = 1;
  do
  {
    v21 = *(_QWORD *)(*((_QWORD *)v16 + 8) + 8 * v1);
    if (*(_DWORD *)(v21 + 16) >= 0x80000000)
      v22 = 0x80000000;
    else
      v22 = *(_DWORD *)(v21 + 16);
    if (v22 != 2)
    {
      v23 = 0;
      switch(v22)
      {
        case 0u:
          goto LABEL_35;
        case 1u:
        case 3u:
          v23 = 2;
          goto LABEL_22;
        case 2u:
          goto LABEL_22;
        case 4u:
          break;
        case 5u:
          v23 = 4;
          goto LABEL_22;
        default:
          if (v22 != 0x80000000)
            goto LABEL_22;
          goto LABEL_198;
      }
    }
    v23 = 3;
LABEL_22:
    v24 = v20 + 1;
    v25 = v20 + 1 + v15;
    if (*((_DWORD *)v19 + 3) <= v25)
    {
      __break(0xC471u);
      JUMPOUT(0x1980E5100);
    }
    if (v183 <= v20)
    {
      __break(0xC471u);
      JUMPOUT(0x1980E5108);
    }
    v26 = (_OWORD *)(*v19 + 32 * v25);
    v27 = (_OWORD *)((char *)v181 + 32 * v20);
    v28 = v26[1];
    *(_OWORD *)v174 = *v26;
    *(_OWORD *)v175 = v28;
    v29 = v27[1];
    *(_OWORD *)&v175[16] = *v27;
    *(_OWORD *)&v175[32] = v29;
    v175[48] = v23;
    if (v17 == (_DWORD)v179)
    {
      v36 = WTF::Vector<JSC::B3::Air::ShufflePair,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v178, (void *)(v17 + 1), (unint64_t)v174, v7, v8, v9, v10, v11);
      v37 = (char *)v178 + 72 * HIDWORD(v179);
      *(_OWORD *)v37 = *(_OWORD *)v36;
      v39 = *(_OWORD *)(v36 + 32);
      v38 = *(_OWORD *)(v36 + 48);
      v40 = *(_OWORD *)(v36 + 16);
      v16 = v172;
      *((_QWORD *)v37 + 8) = *(_QWORD *)(v36 + 64);
      *((_OWORD *)v37 + 2) = v39;
      *((_OWORD *)v37 + 3) = v38;
      *((_OWORD *)v37 + 1) = v40;
    }
    else
    {
      v30 = (char *)v178 + 72 * v17;
      *(_OWORD *)v30 = *(_OWORD *)v174;
      v31 = *(_OWORD *)v175;
      v32 = *(_OWORD *)&v175[16];
      v33 = *(_OWORD *)&v175[32];
      *((_QWORD *)v30 + 8) = *(_QWORD *)&v175[48];
      *((_OWORD *)v30 + 2) = v32;
      *((_OWORD *)v30 + 3) = v33;
      *((_OWORD *)v30 + 1) = v31;
    }
    v17 = ++HIDWORD(v179);
    v35 = LOBYTE(v174[1]) == 1 && (*(_DWORD *)v175 > 0xFFFFFFDF || (*(_DWORD *)v175 - 1) < 0x20);
    if ((*(_DWORD *)(v21 + 16) & 0x80000000) != 0)
    {
LABEL_198:
      __break(0xC471u);
      JUMPOUT(0x1980E50ACLL);
    }
    v18 |= v35;
    v20 = v24;
LABEL_35:
    ++v1;
  }
  while (v1 < *((unsigned int *)v16 + 19));
  if (!v18)
  {
    v2 = v173;
    if (!v17)
      goto LABEL_136;
    v41 = (char *)v178;
    v42 = (char *)v178 + 72 * v17;
    v1 = (unint64_t)&v189[8];
    while (1)
    {
      if ((v41[40] - 6) > 7)
        goto LABEL_79;
      v43 = (uint64_t)v2[2];
      v44 = (WTF *)*(unsigned int *)v2[3];
      JSC::B3::Air::ShufflePair::insts((JSC::B3::Air::ShufflePair *)v41, (JSC::B3::Air::Code *)v2[1], (JSC::B3::Value *)(*v2)[14], (uint64_t)v174);
      v47 = v174[0];
      if (!HIDWORD(v174[1]))
        goto LABEL_74;
      v48 = (WTF *)((char *)v174[0] + 128 * (unint64_t)HIDWORD(v174[1]));
      do
      {
        v49 = *((unsigned int *)v47 + 3);
        v184 = v44;
        v185 = (WTF *)&v186[8];
        *(_DWORD *)v186 = 3;
        *(_DWORD *)&v186[4] = v49;
        if (v49 >= 4)
        {
          if (v49 >> 27)
          {
            __break(0xC471u);
            JUMPOUT(0x1980E5130);
          }
          v50 = (WTF *)WTF::fastMalloc((WTF *)(32 * v49));
          *(_DWORD *)v186 = v49;
          v185 = v50;
          v49 = *((unsigned int *)v47 + 3);
          if ((_DWORD)v49)
          {
LABEL_52:
            v51 = *(__int128 **)v47;
            v52 = 32 * v49;
            do
            {
              v53 = *v51;
              v54 = v51[1];
              v51 += 2;
              *(_OWORD *)v50 = v53;
              *((_OWORD *)v50 + 1) = v54;
              v50 = (WTF *)((char *)v50 + 32);
              v52 -= 32;
            }
            while (v52);
          }
        }
        else
        {
          v50 = (WTF *)&v186[8];
          if ((_DWORD)v49)
            goto LABEL_52;
        }
        v55 = *((_QWORD *)v47 + 14);
        *(_DWORD *)&v189[15] = *(_DWORD *)((char *)v47 + 119);
        *(_QWORD *)&v189[8] = v55;
        JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v43, (unint64_t)&v184, v46, v7, v8, v9, v10, v11);
        v56 = v185;
        if (&v186[8] != (_BYTE *)v185 && v185 != 0)
        {
          v185 = 0;
          *(_DWORD *)v186 = 0;
          WTF::fastFree((unint64_t)v56, v45, v46, v7, v8, v9, v10, v11);
        }
        v47 = (WTF *)((char *)v47 + 128);
      }
      while (v47 != v48);
      v47 = v174[0];
      if (HIDWORD(v174[1]))
      {
        v58 = (unint64_t)HIDWORD(v174[1]) << 7;
        v59 = (char *)v174[0] + 16;
        do
        {
          v60 = *((_QWORD *)v59 - 2);
          if (v59 != (char *)v60 && v60 != 0)
          {
            *((_QWORD *)v59 - 2) = 0;
            *((_DWORD *)v59 - 2) = 0;
            WTF::fastFree(v60, v45, v46, v7, v8, v9, v10, v11);
          }
          v59 += 128;
          v58 -= 128;
        }
        while (v58);
        v47 = v174[0];
      }
      v2 = v173;
LABEL_74:
      if (v175 != (_BYTE *)v47 && v47 != 0)
      {
        v174[0] = 0;
        LODWORD(v174[1]) = 0;
        WTF::fastFree((unint64_t)v47, v45, v46, v7, v8, v9, v10, v11);
      }
LABEL_79:
      v41 += 72;
      if (v41 == v42)
      {
        if (!HIDWORD(v179))
          goto LABEL_136;
        v63 = (char *)v178;
        v64 = (char *)v178 + 72 * HIDWORD(v179);
        v1 = (unint64_t)&v189[8];
        while (1)
        {
          if ((v63[40] - 6) < 8)
            goto LABEL_114;
          v65 = (uint64_t)v2[2];
          v66 = (WTF *)*(unsigned int *)v2[3];
          JSC::B3::Air::ShufflePair::insts((JSC::B3::Air::ShufflePair *)v63, (JSC::B3::Air::Code *)v2[1], (JSC::B3::Value *)(*v2)[14], (uint64_t)v174);
          v69 = v174[0];
          if (!HIDWORD(v174[1]))
            goto LABEL_109;
          v70 = (WTF *)((char *)v174[0] + 128 * (unint64_t)HIDWORD(v174[1]));
          do
          {
            v71 = *((unsigned int *)v69 + 3);
            v184 = v66;
            v185 = (WTF *)&v186[8];
            *(_DWORD *)v186 = 3;
            *(_DWORD *)&v186[4] = v71;
            if (v71 >= 4)
            {
              if (v71 >> 27)
              {
                __break(0xC471u);
                JUMPOUT(0x1980E5138);
              }
              v72 = (WTF *)WTF::fastMalloc((WTF *)(32 * v71));
              *(_DWORD *)v186 = v71;
              v185 = v72;
              v71 = *((unsigned int *)v69 + 3);
              if ((_DWORD)v71)
              {
LABEL_87:
                v73 = *(__int128 **)v69;
                v74 = 32 * v71;
                do
                {
                  v75 = *v73;
                  v76 = v73[1];
                  v73 += 2;
                  *(_OWORD *)v72 = v75;
                  *((_OWORD *)v72 + 1) = v76;
                  v72 = (WTF *)((char *)v72 + 32);
                  v74 -= 32;
                }
                while (v74);
              }
            }
            else
            {
              v72 = (WTF *)&v186[8];
              if ((_DWORD)v71)
                goto LABEL_87;
            }
            v77 = *((_QWORD *)v69 + 14);
            *(_DWORD *)&v189[15] = *(_DWORD *)((char *)v69 + 119);
            *(_QWORD *)&v189[8] = v77;
            JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v65, (unint64_t)&v184, v68, v7, v8, v9, v10, v11);
            v78 = v185;
            if (&v186[8] != (_BYTE *)v185 && v185 != 0)
            {
              v185 = 0;
              *(_DWORD *)v186 = 0;
              WTF::fastFree((unint64_t)v78, v67, v68, v7, v8, v9, v10, v11);
            }
            v69 = (WTF *)((char *)v69 + 128);
          }
          while (v69 != v70);
          v69 = v174[0];
          if (HIDWORD(v174[1]))
          {
            v80 = (unint64_t)HIDWORD(v174[1]) << 7;
            v81 = (char *)v174[0] + 16;
            do
            {
              v82 = *((_QWORD *)v81 - 2);
              if (v81 != (char *)v82 && v82 != 0)
              {
                *((_QWORD *)v81 - 2) = 0;
                *((_DWORD *)v81 - 2) = 0;
                WTF::fastFree(v82, v67, v68, v7, v8, v9, v10, v11);
              }
              v81 += 128;
              v80 -= 128;
            }
            while (v80);
            v69 = v174[0];
          }
          v2 = v173;
LABEL_109:
          if (v175 != (_BYTE *)v69 && v69 != 0)
          {
            v174[0] = 0;
            LODWORD(v174[1]) = 0;
            WTF::fastFree((unint64_t)v69, v67, v68, v7, v8, v9, v10, v11);
          }
LABEL_114:
          v63 += 72;
          if (v63 == v64)
            goto LABEL_136;
        }
      }
    }
  }
  v2 = v173;
  v85 = (uint64_t)v173[2];
  v86 = (WTF *)*(unsigned int *)v173[3];
  v87 = (*v173)[14];
  if (!v17)
  {
    v88 = 0;
    v184 = (WTF *)v186;
    v185 = (WTF *)3;
    *(_QWORD *)v189 = v87;
    *(_DWORD *)&v189[8] = 447;
    v174[0] = v86;
    v174[1] = (WTF *)&v175[8];
    *(_QWORD *)v175 = 3;
    v89 = (WTF *)v186;
    goto LABEL_127;
  }
  if (v17 >= 0x38E38E4)
  {
    __break(0xC471u);
    JUMPOUT(0x1980E5160);
  }
  v90 = v17;
  v91 = WTF::fastMalloc((WTF *)(72 * v17));
  v88 = v91;
  v166 = v85;
  if (HIDWORD(v179))
  {
    v92 = v178;
    v93 = 72 * HIDWORD(v179);
    v94 = v91;
    do
    {
      *(_OWORD *)v94 = *(_OWORD *)v92;
      v95 = *((_OWORD *)v92 + 1);
      v96 = *((_OWORD *)v92 + 2);
      v97 = *((_OWORD *)v92 + 3);
      *(_QWORD *)(v94 + 64) = *((_QWORD *)v92 + 8);
      *(_OWORD *)(v94 + 32) = v96;
      *(_OWORD *)(v94 + 48) = v97;
      *(_OWORD *)(v94 + 16) = v95;
      v94 += 72;
      v92 = (WTF *)((char *)v92 + 72);
      v93 -= 72;
    }
    while (v93);
  }
  v184 = (WTF *)v186;
  v185 = (WTF *)3;
  *(_QWORD *)v189 = v87;
  *(_DWORD *)&v189[8] = 447;
  v98 = v91 + 72 * v90;
  LOWORD(v1) = 1;
  v99 = v91;
  do
  {
    v100 = *(_OWORD *)(v99 + 16);
    *(_OWORD *)v174 = *(_OWORD *)v99;
    *(_OWORD *)v175 = v100;
    v101 = *(_OWORD *)(v99 + 48);
    v193[0] = *(_OWORD *)(v99 + 32);
    v193[1] = v101;
    v102 = *(char *)(v99 + 64);
    HIDWORD(v190) = 1;
    v191 = 0;
    v192 = 0;
    WORD4(v190) = 531;
    if (v102 >= 5)
    {
      __break(0xC471u);
      JUMPOUT(0x1980E5128);
    }
    *(_QWORD *)&v190 = qword_199152C08[v102];
    JSC::B3::Air::Inst::append<JSC::B3::Air::Arg,JSC::B3::Air::Arg>((uint64_t)&v184, (__int128 *)v174, v193, &v190, v8, v9, v10, v11);
    v99 += 72;
  }
  while (v99 != v98);
  v89 = v184;
  v174[0] = v86;
  v174[1] = (WTF *)&v175[8];
  *(_QWORD *)v175 = 3;
  if (v184 == (WTF *)v186)
  {
    v2 = v173;
    v85 = v166;
LABEL_127:
    v103 = HIDWORD(v185);
    if (HIDWORD(v185))
    {
      v104 = 0;
      v105 = 32 * HIDWORD(v185);
      do
      {
        v106 = &v175[v104 + 8];
        v107 = *(_OWORD *)((char *)v89 + v104 + 16);
        *v106 = *(_OWORD *)((char *)v89 + v104);
        v106[1] = v107;
        v104 += 32;
      }
      while (v105 != v104);
    }
    goto LABEL_130;
  }
  v184 = (WTF *)v186;
  v174[1] = v89;
  v165 = (int)v185;
  v103 = HIDWORD(v185);
  LODWORD(v185) = 3;
  *(_DWORD *)v175 = v165;
  v2 = v173;
  v85 = v166;
LABEL_130:
  HIDWORD(v185) = 0;
  *(_DWORD *)&v175[4] = v103;
  *(_DWORD *)&v177[15] = *(_DWORD *)&v189[7];
  *(_QWORD *)&v177[8] = *(_QWORD *)v189;
  JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v85, (unint64_t)v174, v6, v7, v8, v9, v10, v11);
  v110 = v174[1];
  if (&v175[8] != (_BYTE *)v174[1] && v174[1])
  {
    v174[1] = 0;
    *(_DWORD *)v175 = 0;
    WTF::fastFree((unint64_t)v110, v108, v109, v7, v8, v9, v10, v11);
  }
  v111 = v184;
  if (v186 != (_BYTE *)v184 && v184)
  {
    v184 = 0;
    LODWORD(v185) = 0;
    WTF::fastFree((unint64_t)v111, v108, v109, v7, v8, v9, v10, v11);
    if (!v88)
      goto LABEL_136;
  }
  else if (!v88)
  {
    goto LABEL_136;
  }
  WTF::fastFree(v88, v108, v109, v7, v8, v9, v10, v11);
LABEL_136:
  if (*((_DWORD *)*v2 + 3) <= 1u)
  {
    __break(0xC471u);
    JUMPOUT(0x1980E5140);
  }
  if (!v183)
  {
    __break(0xC471u);
    JUMPOUT(0x1980E5148);
  }
  v112 = **v2;
  v113 = v181;
  v114 = *(_OWORD *)(v112 + 32);
  *(_OWORD *)((char *)v181 + 9) = *(_OWORD *)(v112 + 41);
  *(_OWORD *)v113 = v114;
  if (v169)
  {
    v115 = 0;
    v116 = 0;
    BYTE8(v193[0]) = 0;
    *(_QWORD *)&v193[0] = 0;
    v117 = 2;
    v118 = 1;
    v119 = *v2;
LABEL_144:
    v170 = 0;
    v168 = 0;
    BYTE8(v190) = 0;
    *(_QWORD *)&v190 = 0;
    v123 = 1;
    v122 = 2;
    goto LABEL_145;
  }
  v119 = *v2;
  v120 = *((_DWORD *)*v2 + 3);
  if (v120 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1980E5150);
  }
  v121 = *v119;
  v116 = *(_QWORD *)(*v119 + 64);
  v115 = *(_BYTE *)(*v119 + 72);
  v117 = *(_BYTE *)(*v119 + 73);
  LOWORD(v1) = *(_WORD *)(*v119 + 74);
  v118 = *(_DWORD *)(*v119 + 76);
  *(_QWORD *)&v193[0] = *(_QWORD *)(*v119 + 80);
  BYTE8(v193[0]) = *(_BYTE *)(v121 + 88);
  if (!v167)
    goto LABEL_144;
  if (v120 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1980E5158);
  }
  v170 = *(_QWORD *)(v121 + 96);
  v168 = *(_BYTE *)(v121 + 104);
  v122 = *(_BYTE *)(v121 + 105);
  LOWORD(v166) = *(_WORD *)(v121 + 106);
  v123 = *(_DWORD *)(v121 + 108);
  *(_QWORD *)&v190 = *(_QWORD *)(v121 + 112);
  BYTE8(v190) = *(_BYTE *)(v121 + 120);
LABEL_145:
  JSC::B3::Air::buildCCall((uint64_t)v2[1], v119[14], (uint64_t)&v181, v7, v8, v9, v10, v11, (uint64_t)v174);
  v131 = *v2;
  v132 = *v2;
  v135 = (_OWORD *)*v132;
  v134 = v132 + 2;
  v133 = (unint64_t)v135;
  if (v135 != v134)
  {
    if (v133)
    {
      *v131 = 0;
      *((_DWORD *)v131 + 2) = 0;
      WTF::fastFree(v133, v124, v125, v126, v127, v128, v129, v130);
    }
    *v131 = v134;
  }
  v136 = v174[0];
  if ((_BYTE *)v174[0] == v175)
  {
    if (HIDWORD(v174[1]))
    {
      v137 = 32 * HIDWORD(v174[1]);
      do
      {
        v138 = *(_OWORD *)v136;
        v139 = *((_OWORD *)v136 + 1);
        v136 = (WTF *)((char *)v136 + 32);
        *v134 = v138;
        v134[1] = v139;
        v134 += 2;
        v137 -= 32;
      }
      while (v137);
    }
  }
  else
  {
    v174[0] = (WTF *)v175;
    *v131 = v136;
  }
  *((_DWORD *)v131 + 2) = v174[1];
  v140 = HIDWORD(v174[1]);
  HIDWORD(v174[1]) = 0;
  *((_DWORD *)v131 + 3) = v140;
  v141 = *(_QWORD *)v177;
  *(_DWORD *)((char *)v131 + 119) = *(_DWORD *)&v177[7];
  v131[14] = v141;
  v142 = v174[0];
  if (v175 != (_BYTE *)v174[0] && v174[0])
  {
    v174[0] = 0;
    LODWORD(v174[1]) = 0;
    WTF::fastFree((unint64_t)v142, v124, v125, v126, v127, v128, v129, v130);
  }
  if ((v171 & 1) != 0)
    *((_BYTE *)*v173 + 122) |= 1u;
  if (*((_DWORD *)v172 + 4) >= 0x80000000)
    v143 = 0x80000000;
  else
    v143 = *((_DWORD *)v172 + 4);
  switch(v143)
  {
    case 1u:
      v144 = (uint64_t)v173[2];
      v145 = *(_DWORD *)v173[3];
      BYTE8(v188) = BYTE8(v193[0]);
      *(_QWORD *)&v188 = *(_QWORD *)&v193[0];
      *(_QWORD *)v186 = 0;
      *(_WORD *)&v186[8] = 513;
      *(_QWORD *)&v186[12] = 0x100000001;
      *(_DWORD *)&v186[20] = 0;
      v186[24] = 0;
      *(_QWORD *)&v187 = v116;
      BYTE8(v187) = v115;
      BYTE9(v187) = v117;
      WORD5(v187) = v1;
      HIDWORD(v187) = v118;
      *(_OWORD *)&v175[8] = *(_OWORD *)v186;
      *(_OWORD *)&v175[24] = *(_OWORD *)&v186[16];
      v146 = v188;
      *(_OWORD *)&v175[40] = v187;
      v147 = (v145 + 1);
      v184 = (WTF *)v186;
      v148 = v172;
      *(_QWORD *)v189 = v172;
      v149 = 94;
      goto LABEL_177;
    case 2u:
      v144 = (uint64_t)v173[2];
      v160 = *(_DWORD *)v173[3];
      BYTE8(v188) = BYTE8(v193[0]);
      *(_QWORD *)&v188 = *(_QWORD *)&v193[0];
      *(_QWORD *)v186 = 0;
      *(_WORD *)&v186[8] = 513;
      *(_QWORD *)&v186[12] = 0x100000001;
      *(_DWORD *)&v186[20] = 0;
      v186[24] = 0;
      *(_QWORD *)&v187 = v116;
      BYTE8(v187) = v115;
      BYTE9(v187) = v117;
      WORD5(v187) = v1;
      HIDWORD(v187) = v118;
      *(_OWORD *)&v175[8] = *(_OWORD *)v186;
      *(_OWORD *)&v175[24] = *(_OWORD *)&v186[16];
      v146 = v188;
      *(_OWORD *)&v175[40] = v187;
      v147 = (v160 + 1);
      v184 = (WTF *)v186;
      v148 = v172;
      *(_QWORD *)v189 = v172;
      v149 = 90;
      goto LABEL_177;
    case 3u:
      v144 = (uint64_t)v173[2];
      v158 = *(_DWORD *)v173[3];
      BYTE8(v188) = BYTE8(v193[0]);
      *(_QWORD *)&v188 = *(_QWORD *)&v193[0];
      *(_QWORD *)v186 = 0;
      *(_WORD *)&v186[8] = 513;
      *(_QWORD *)&v186[12] = 0xFFFFFFFF00000001;
      *(_DWORD *)&v186[20] = 0;
      v186[24] = 0;
      *(_QWORD *)&v187 = v116;
      BYTE8(v187) = v115;
      BYTE9(v187) = v117;
      WORD5(v187) = v1;
      HIDWORD(v187) = v118;
      *(_OWORD *)&v175[8] = *(_OWORD *)v186;
      *(_OWORD *)&v175[24] = *(_OWORD *)&v186[16];
      v146 = v188;
      *(_OWORD *)&v175[40] = v187;
      v147 = (v158 + 1);
      v184 = (WTF *)v186;
      v148 = v172;
      *(_QWORD *)v189 = v172;
      v149 = 107;
      goto LABEL_177;
    case 4u:
      v144 = (uint64_t)v173[2];
      v159 = *(_DWORD *)v173[3];
      BYTE8(v188) = BYTE8(v193[0]);
      *(_QWORD *)&v188 = *(_QWORD *)&v193[0];
      *(_QWORD *)v186 = 0;
      *(_WORD *)&v186[8] = 513;
      *(_QWORD *)&v186[12] = 0xFFFFFFFF00000001;
      *(_DWORD *)&v186[20] = 0;
      v186[24] = 0;
      *(_QWORD *)&v187 = v116;
      BYTE8(v187) = v115;
      BYTE9(v187) = v117;
      WORD5(v187) = v1;
      HIDWORD(v187) = v118;
      *(_OWORD *)&v175[8] = *(_OWORD *)v186;
      *(_OWORD *)&v175[24] = *(_OWORD *)&v186[16];
      v146 = v188;
      *(_OWORD *)&v175[40] = v187;
      v147 = (v159 + 1);
      v184 = (WTF *)v186;
      v148 = v172;
      *(_QWORD *)v189 = v172;
      v149 = 108;
LABEL_177:
      *(_DWORD *)&v189[8] = v149;
      v174[0] = (WTF *)v147;
      v174[1] = (WTF *)&v175[8];
      v176 = v146;
      v185 = (WTF *)3;
      *(_QWORD *)v175 = 0x200000003;
      goto LABEL_178;
    case 5u:
      __break(0xC471u);
      JUMPOUT(0x1980E50F8);
    default:
      if (v143 != 0x80000000)
        goto LABEL_184;
      v150 = (uint64_t)v173[2];
      v151 = (WTF *)(*(_DWORD *)v173[3] + 1);
      BYTE8(v188) = BYTE8(v193[0]);
      *(_QWORD *)&v188 = *(_QWORD *)&v193[0];
      v184 = (WTF *)v186;
      *(_QWORD *)v186 = 0;
      *(_WORD *)&v186[8] = 513;
      *(_QWORD *)&v186[12] = 0x100000001;
      *(_DWORD *)&v186[20] = 0;
      v186[24] = 0;
      *(_QWORD *)&v187 = v116;
      BYTE8(v187) = v115;
      BYTE9(v187) = v117;
      WORD5(v187) = v1;
      HIDWORD(v187) = v118;
      *(_QWORD *)v189 = v172;
      *(_DWORD *)&v189[8] = 90;
      v174[0] = v151;
      v174[1] = (WTF *)&v175[8];
      *(_OWORD *)&v175[8] = *(_OWORD *)v186;
      *(_OWORD *)&v175[24] = *(_OWORD *)&v186[16];
      *(_OWORD *)&v175[40] = v187;
      v176 = v188;
      v185 = (WTF *)3;
      *(_QWORD *)v175 = 0x200000003;
      *(_QWORD *)&v177[8] = v172;
      *(_DWORD *)&v177[15] = *(_DWORD *)&v189[7];
      JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v150, (unint64_t)v174, v125, v126, v127, v128, v129, v130);
      v153 = v174[1];
      if (&v175[8] != (_BYTE *)v174[1] && v174[1])
      {
        v174[1] = 0;
        *(_DWORD *)v175 = 0;
        WTF::fastFree((unint64_t)v153, v152, v125, v126, v127, v128, v129, v130);
      }
      v154 = v184;
      if (v186 != (_BYTE *)v184 && v184)
      {
        v184 = 0;
        LODWORD(v185) = 0;
        WTF::fastFree((unint64_t)v154, v152, v125, v126, v127, v128, v129, v130);
      }
      v144 = (uint64_t)v173[2];
      v155 = *(_DWORD *)v173[3];
      v156 = *((_DWORD *)v172 + 4);
      if (v156 >= 0x80000000)
        v156 = 0x80000000;
      if (v156 == 0x80000000)
      {
        v156 = 2;
        v157 = v166;
      }
      else
      {
        v157 = v166;
        switch(v156)
        {
          case 0u:
            break;
          case 1u:
          case 2u:
            v156 = 1;
            break;
          case 3u:
          case 4u:
            v156 = -1;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x1980E508CLL);
        }
      }
      *(_QWORD *)&v188 = v190;
      BYTE8(v188) = BYTE8(v190);
      *(_QWORD *)v186 = 0;
      *(_WORD *)&v186[8] = 513;
      *(_DWORD *)&v186[12] = 1;
      *(_DWORD *)&v186[16] = v156;
      *(_DWORD *)&v186[20] = 0;
      v186[24] = 0;
      *(_QWORD *)&v187 = v170;
      BYTE8(v187) = v168;
      BYTE9(v187) = v122;
      WORD5(v187) = v157;
      HIDWORD(v187) = v123;
      *(_OWORD *)&v175[8] = *(_OWORD *)v186;
      *(_OWORD *)&v175[24] = *(_OWORD *)&v186[16];
      *(_OWORD *)&v175[40] = v187;
      v184 = (WTF *)v186;
      v148 = v172;
      *(_QWORD *)v189 = v172;
      *(_DWORD *)&v189[8] = 90;
      v174[0] = (WTF *)(v155 + 1);
      v174[1] = (WTF *)&v175[8];
      v176 = v188;
      v185 = (WTF *)3;
      *(_QWORD *)v175 = 0x200000003;
LABEL_178:
      *(_QWORD *)&v177[8] = v148;
      *(_DWORD *)&v177[15] = *(_DWORD *)&v189[7];
      JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v144, (unint64_t)v174, v125, v126, v127, v128, v129, v130);
      v161 = v174[1];
      if (&v175[8] != (_BYTE *)v174[1] && v174[1])
      {
        v174[1] = 0;
        *(_DWORD *)v175 = 0;
        WTF::fastFree((unint64_t)v161, v124, v125, v126, v127, v128, v129, v130);
      }
      v162 = v184;
      if (v186 != (_BYTE *)v184 && v184)
      {
        v184 = 0;
        LODWORD(v185) = 0;
        WTF::fastFree((unint64_t)v162, v124, v125, v126, v127, v128, v129, v130);
      }
LABEL_184:
      v163 = v178;
      if (v180 != (_BYTE *)v178 && v178)
      {
        v178 = 0;
        LODWORD(v179) = 0;
        WTF::fastFree((unint64_t)v163, v124, v125, v126, v127, v128, v129, v130);
      }
      v164 = v181;
      if (v181)
      {
        v181 = 0;
        v182 = 0;
        WTF::fastFree((unint64_t)v164, v124, v125, v126, v127, v128, v129, v130);
      }
      return;
  }
}

void JSC::B3::Air::lowerMacros(JSC::B3::Air::Code &)::$_3::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unsigned int v9;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _OWORD *v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  __int128 *v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  char v72;
  _BYTE v73[12];
  __int128 v74;
  uint64_t v75;
  _BYTE v76[88];
  _BYTE v77[19];

  v8 = (_QWORD *)*a1;
  v9 = *(_DWORD *)(*a1 + 12);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1980E55BCLL);
  }
  if (v9 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1980E55C4);
  }
  if (v9 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1980E55CCLL);
  }
  v11 = *(_BYTE *)(*v8 + 24);
  v12 = *(unsigned int *)(*v8 + 48);
  v13 = *(_DWORD *)(*v8 + 80);
  v14 = v8[14];
  v15 = a1[1];
  v16 = *(_DWORD *)(v15 + 180);
  *(_DWORD *)(v15 + 180) = v16 + 1;
  v17 = (-33 - v16);
  if ((v11 & 0x3Fu) - 1 >= 3)
  {
    if ((v11 & 0x3F) != 4)
    {
      __break(0xC471u);
      JUMPOUT(0x1980E55B4);
    }
    v22 = *(unsigned int *)a1[3];
    v69 = a1[2];
    *((_QWORD *)&v70 + 1) = 4;
    *(_QWORD *)&v70 = WTF::fastMalloc((WTF *)0x80);
    v29 = v70;
    *(_QWORD *)v70 = 1;
    *(_WORD *)(v29 + 8) = 526;
    *(_DWORD *)(v29 + 12) = 1;
    *(_QWORD *)(v29 + 16) = 0;
    *(_BYTE *)(v29 + 24) = 0;
    ++HIDWORD(v70);
    v30 = v70 + 32 * HIDWORD(v70);
    *(_QWORD *)v30 = 0;
    *(_WORD *)(v30 + 8) = 533;
    *(_DWORD *)(v30 + 12) = 1;
    *(_QWORD *)(v30 + 16) = 0;
    *(_BYTE *)(v30 + 24) = v11;
    ++HIDWORD(v70);
    v31 = v70 + 32 * HIDWORD(v70);
    *(_QWORD *)v31 = 0;
    *(_WORD *)(v31 + 8) = 513;
    *(_DWORD *)(v31 + 12) = 1;
    *(_DWORD *)(v31 + 16) = v12;
    *(_DWORD *)(v31 + 20) = 0;
    *(_BYTE *)(v31 + 24) = 0;
    ++HIDWORD(v70);
    v32 = v70 + 32 * HIDWORD(v70);
    *(_QWORD *)v32 = 0;
    *(_WORD *)(v32 + 8) = 513;
    *(_DWORD *)(v32 + 12) = 1;
    *(_DWORD *)(v32 + 16) = v17;
    *(_DWORD *)(v32 + 20) = 0;
    *(_BYTE *)(v32 + 24) = 0;
    v33 = HIDWORD(v70) + 1;
    *(_QWORD *)v73 = v14;
    *(_DWORD *)&v73[8] = 358;
    *(_QWORD *)&v74 = v22;
    *((_QWORD *)&v74 + 1) = v76;
    LODWORD(v75) = 3;
    v34 = v70;
    if ((uint64_t *)v70 == &v71)
    {
      if (HIDWORD(v70) != -1)
        memcpy(v76, &v71, 32 * (HIDWORD(v70) + 1));
    }
    else
    {
      *(_QWORD *)&v70 = &v71;
      *((_QWORD *)&v74 + 1) = v34;
      v63 = DWORD2(v70);
      DWORD2(v70) = 3;
      LODWORD(v75) = v63;
    }
    HIDWORD(v70) = 0;
    HIDWORD(v75) = v33;
    *(_QWORD *)&v77[8] = *(_QWORD *)v73;
    *(_DWORD *)&v77[15] = *(_DWORD *)&v73[7];
    JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v69, (unint64_t)&v74, v23, v24, v25, v26, v27, v28);
    v41 = *((_QWORD *)&v74 + 1);
    if (v76 != *((_BYTE **)&v74 + 1) && *((_QWORD *)&v74 + 1))
    {
      *((_QWORD *)&v74 + 1) = 0;
      LODWORD(v75) = 0;
      WTF::fastFree(v41, v35, v36, v37, v38, v39, v40, a8);
    }
    v42 = v70;
    if (&v71 != (uint64_t *)v70 && (_QWORD)v70)
    {
      *(_QWORD *)&v70 = 0;
      DWORD2(v70) = 0;
      WTF::fastFree(v42, v35, v36, v37, v38, v39, v40, a8);
    }
    v18 = a1[2];
    v19 = *(unsigned int *)a1[3];
    *(_QWORD *)&v74 = 0;
    HIDWORD(v74) = 1;
    v75 = 0;
    WORD4(v74) = 533;
    v76[0] = 3;
    v20 = v14;
    v21 = v17;
  }
  else
  {
    v18 = a1[2];
    v19 = *(unsigned int *)a1[3];
    *(_QWORD *)&v74 = 0;
    HIDWORD(v74) = 1;
    v75 = 0;
    WORD4(v74) = 533;
    v76[0] = v11;
    v20 = v14;
    v21 = v12;
  }
  JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(v18, v19, 360, v20, &v74, v21, v17, a8);
  v43 = a1[1];
  v44 = *(_DWORD *)(v43 + 176);
  *(_DWORD *)(v43 + 176) = v44 + 1;
  v45 = v44 + 33;
  JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(a1[2], *(unsigned int *)a1[3], 121, v14, v17, (v44 + 33), v46, v47);
  v48 = a1[2];
  v49 = *(unsigned int *)a1[3];
  HIDWORD(v74) = 1;
  v75 = 0;
  v76[0] = 0;
  WORD4(v74) = 526;
  *(_QWORD *)&v74 = 1;
  HIDWORD(v70) = 1;
  v71 = 0;
  v72 = 0;
  WORD4(v70) = 514;
  *(_QWORD *)&v70 = 0;
  JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &>(v48, v49, 0x11Au, v14, &v74, v45, &v70, v13);
  *(_QWORD *)&v74 = &v75;
  *((_QWORD *)&v74 + 1) = 3;
  *(_QWORD *)v77 = 0;
  *(_WORD *)&v77[8] = 0;
  v77[10] = 0;
  v57 = *a1;
  v59 = (_OWORD *)(v57 + 16);
  v58 = *(_QWORD *)v57;
  if (*(_QWORD *)v57 != v57 + 16)
  {
    if (v58)
    {
      *(_QWORD *)v57 = 0;
      *(_DWORD *)(v57 + 8) = 0;
      WTF::fastFree(v58, v50, v51, v52, v53, v54, v55, v56);
    }
    *(_QWORD *)v57 = v59;
    v64 = v74;
    if ((uint64_t *)v74 == &v75)
    {
      if (HIDWORD(v74))
      {
        v65 = 32 * HIDWORD(v74);
        v66 = (__int128 *)&v75;
        do
        {
          v67 = *v66;
          v68 = v66[1];
          v66 += 2;
          *v59 = v67;
          v59[1] = v68;
          v59 += 2;
          v65 -= 32;
        }
        while (v65);
      }
    }
    else
    {
      *(_QWORD *)&v74 = &v75;
      *(_QWORD *)v57 = v64;
    }
  }
  *(_DWORD *)(v57 + 8) = DWORD2(v74);
  v60 = HIDWORD(v74);
  HIDWORD(v74) = 0;
  *(_DWORD *)(v57 + 12) = v60;
  v61 = *(_QWORD *)v77;
  *(_DWORD *)(v57 + 119) = *(_DWORD *)&v77[7];
  *(_QWORD *)(v57 + 112) = v61;
  v62 = v74;
  if (&v75 != (uint64_t *)v74)
  {
    if ((_QWORD)v74)
    {
      *(_QWORD *)&v74 = 0;
      DWORD2(v74) = 0;
      WTF::fastFree(v62, v50, v51, v52, v53, v54, v55, v56);
    }
  }
}

void JSC::B3::Air::lowerMacros(JSC::B3::Air::Code &)::$_6::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _OWORD *v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  _QWORD v46[2];
  __int128 v47;
  uint64_t v48;
  char v49;

  v8 = (_QWORD *)*a1;
  v9 = *(_DWORD *)(*a1 + 12);
  if (v9 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1980E57D0);
  }
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1980E57D8);
  }
  v11 = *(unsigned int *)(*v8 + 16);
  v12 = *(_DWORD *)(*v8 + 48);
  v13 = v8[14];
  v14 = a1[1];
  v15 = *(_DWORD *)(v14 + 176);
  v16 = *(_DWORD *)(v14 + 180);
  v17 = (v15 + 33);
  *(_DWORD *)(v14 + 176) = v15 + 1;
  *(_DWORD *)(v14 + 180) = v16 + 1;
  v18 = (-33 - v16);
  v19 = a1[2];
  v20 = *(unsigned int *)a1[3];
  *(_QWORD *)&v43 = 0;
  HIDWORD(v43) = 1;
  v44 = 0;
  WORD4(v43) = 533;
  v45 = 3;
  JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(v19, v20, 359, v13, &v43, v11, v18, a8);
  JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(a1[2], *(unsigned int *)a1[3], 121, v13, v18, v17, v21, v22);
  v23 = a1[2];
  v24 = *(unsigned int *)a1[3];
  HIDWORD(v43) = 1;
  v44 = 0;
  v45 = 0;
  WORD4(v43) = 526;
  *(_QWORD *)&v43 = 1;
  HIDWORD(v47) = 1;
  v48 = 0;
  v49 = 0;
  WORD4(v47) = 514;
  *(_QWORD *)&v47 = 0;
  JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &>(v23, v24, 0x11Au, v13, &v43, v17, &v47, v12);
  *(_QWORD *)&v43 = &v44;
  *((_QWORD *)&v43 + 1) = 3;
  memset(v46, 0, 11);
  v32 = *a1;
  v34 = (_OWORD *)(v32 + 16);
  v33 = *(_QWORD *)v32;
  if (*(_QWORD *)v32 != v32 + 16)
  {
    if (v33)
    {
      *(_QWORD *)v32 = 0;
      *(_DWORD *)(v32 + 8) = 0;
      WTF::fastFree(v33, v25, v26, v27, v28, v29, v30, v31);
    }
    *(_QWORD *)v32 = v34;
    v38 = v43;
    if ((uint64_t *)v43 == &v44)
    {
      if (HIDWORD(v43))
      {
        v39 = 32 * HIDWORD(v43);
        v40 = (__int128 *)&v44;
        do
        {
          v41 = *v40;
          v42 = v40[1];
          v40 += 2;
          *v34 = v41;
          v34[1] = v42;
          v34 += 2;
          v39 -= 32;
        }
        while (v39);
      }
    }
    else
    {
      *(_QWORD *)&v43 = &v44;
      *(_QWORD *)v32 = v38;
    }
  }
  *(_DWORD *)(v32 + 8) = DWORD2(v43);
  v35 = HIDWORD(v43);
  HIDWORD(v43) = 0;
  *(_DWORD *)(v32 + 12) = v35;
  v36 = v46[0];
  *(_DWORD *)(v32 + 119) = *(_DWORD *)((char *)v46 + 7);
  *(_QWORD *)(v32 + 112) = v36;
  v37 = v43;
  if (&v44 != (uint64_t *)v43)
  {
    if ((_QWORD)v43)
    {
      *(_QWORD *)&v43 = 0;
      DWORD2(v43) = 0;
      WTF::fastFree(v37, v25, v26, v27, v28, v29, v30, v31);
    }
  }
}

void JSC::B3::Air::lowerMacros(JSC::B3::Air::Code &)::$_2::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int **v8;
  unsigned int v9;
  unsigned int *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int **v48;
  unint64_t v49;
  unsigned int *v50;
  int v51;
  unsigned int *v52;
  unint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  __int128 *v56;
  __int128 v57;
  __int128 v58;
  unsigned int v59;
  __int128 v60;
  uint64_t v61;
  char v62;
  _BYTE v63[11];

  v8 = *(unsigned int ***)a1;
  v9 = *(_DWORD *)(*(_QWORD *)a1 + 12);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1980E5AD4);
  }
  v10 = *v8;
  if (((*v8)[6] & 0x3F) == 4)
  {
    if (v9 <= 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1980E5ADCLL);
    }
    if (v9 == 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1980E5AE4);
    }
    if (v9 <= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1980E5AECLL);
    }
    v12 = v10[12];
    v13 = v10[20];
    v59 = v10[28];
    v14 = (uint64_t)v8[14];
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(_DWORD *)(v15 + 176);
    v17 = (v16 + 33);
    v18 = (v16 + 34);
    v19 = (v16 + 35);
    *(_DWORD *)(v15 + 176) = v16 + 4;
    v20 = (v16 + 36);
    v21 = *(_QWORD *)(a1 + 16);
    v22 = **(unsigned int **)(a1 + 24);
    HIDWORD(v60) = 1;
    v61 = 0;
    v62 = 0;
    WORD4(v60) = 514;
    *(_QWORD *)&v60 = 0;
    JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(v21, v22, 341, v14, &v60, v12, v17, a8);
    v23 = *(_QWORD *)(a1 + 16);
    v24 = **(unsigned int **)(a1 + 24);
    HIDWORD(v60) = 1;
    v61 = 0;
    v62 = 0;
    WORD4(v60) = 514;
    *(_QWORD *)&v60 = 1;
    JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(v23, v24, 341, v14, &v60, v12, v18, v25);
    v26 = *(_QWORD *)(a1 + 16);
    v27 = **(unsigned int **)(a1 + 24);
    HIDWORD(v60) = 1;
    v61 = 0;
    v62 = 0;
    WORD4(v60) = 514;
    *(_QWORD *)&v60 = 0;
    JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(v26, v27, 341, v14, &v60, v13, v19, v28);
    v29 = *(_QWORD *)(a1 + 16);
    v30 = **(unsigned int **)(a1 + 24);
    HIDWORD(v60) = 1;
    v61 = 0;
    v62 = 0;
    WORD4(v60) = 514;
    *(_QWORD *)&v60 = 1;
    JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(v29, v30, 341, v14, &v60, v13, v20, v31);
    JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(*(_QWORD *)(a1 + 16), **(unsigned int **)(a1 + 24), 19, v14, v17, v19, v32, v33);
    JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(*(_QWORD *)(a1 + 16), **(unsigned int **)(a1 + 24), 19, v14, v18, v20, v34, v35);
    JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(*(_QWORD *)(a1 + 16), **(unsigned int **)(a1 + 24), 352, v14, v19, v59, v36, v37);
    v38 = *(_QWORD *)(a1 + 16);
    v39 = **(unsigned int **)(a1 + 24);
    HIDWORD(v60) = 1;
    v61 = 0;
    v62 = 0;
    WORD4(v60) = 514;
    *(_QWORD *)&v60 = 1;
    JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(v38, v39, 335, v14, &v60, v20, v59, v40);
    *(_QWORD *)&v60 = &v61;
    *((_QWORD *)&v60 + 1) = 3;
    *(_QWORD *)v63 = 0;
    *(_WORD *)&v63[8] = 0;
    v63[10] &= 0xFCu;
    v48 = *(unsigned int ***)a1;
    v50 = (unsigned int *)(v48 + 2);
    v49 = (unint64_t)*v48;
    if (*v48 != (unsigned int *)(v48 + 2))
    {
      if (v49)
      {
        *v48 = 0;
        *((_DWORD *)v48 + 2) = 0;
        WTF::fastFree(v49, v41, v42, v43, v44, v45, v46, v47);
      }
      *v48 = v50;
      v54 = (unsigned int *)v60;
      if ((uint64_t *)v60 == &v61)
      {
        if (HIDWORD(v60))
        {
          v55 = 32 * HIDWORD(v60);
          v56 = (__int128 *)&v61;
          do
          {
            v57 = *v56;
            v58 = v56[1];
            v56 += 2;
            *(_OWORD *)v50 = v57;
            *((_OWORD *)v50 + 1) = v58;
            v50 += 8;
            v55 -= 32;
          }
          while (v55);
        }
      }
      else
      {
        *(_QWORD *)&v60 = &v61;
        *v48 = v54;
      }
    }
    *((_DWORD *)v48 + 2) = DWORD2(v60);
    v51 = HIDWORD(v60);
    HIDWORD(v60) = 0;
    *((_DWORD *)v48 + 3) = v51;
    v52 = *(unsigned int **)v63;
    *(_DWORD *)((char *)v48 + 119) = *(_DWORD *)&v63[7];
    v48[14] = v52;
    v53 = v60;
    if (&v61 != (uint64_t *)v60)
    {
      if ((_QWORD)v60)
      {
        *(_QWORD *)&v60 = 0;
        DWORD2(v60) = 0;
        WTF::fastFree(v53, v41, v42, v43, v44, v45, v46, v47);
      }
    }
  }
}

void JSC::B3::Air::lowerMacros(JSC::B3::Air::Code &)::$_9::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unsigned int v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  int v80;
  uint64_t v81;
  __int128 *v82;
  __int128 v83;
  __int128 v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _OWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  __int128 v113;
  __int128 v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _OWORD *v143;
  int v144;
  uint64_t v145;
  unint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t *v149;
  __int128 v150;
  __int128 v151;
  int v152;
  __int128 v153;
  uint64_t v154;
  char v155;
  __int128 v156;
  uint64_t v157;
  char v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  _BYTE v166[12];
  __int128 v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  _BYTE v174[27];

  v8 = (_QWORD *)*a1;
  v9 = *(_DWORD *)(*a1 + 12);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1980E649CLL);
  }
  if (v9 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1980E64A4);
  }
  if (v9 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1980E64ACLL);
  }
  v11 = *(_BYTE *)(*v8 + 24);
  v12 = *(unsigned int *)(*v8 + 48);
  v13 = *(unsigned int *)(*v8 + 80);
  v14 = v8[14];
  v15 = v11 & 0x3F;
  v16 = a1[1];
  v17 = *(_DWORD *)(v16 + 180);
  *(_DWORD *)(v16 + 180) = v17 + 1;
  v18 = (-33 - v17);
  v19 = 0x8040201008040201;
  v20 = 0x8000000000000000;
  v21 = 0x40000000000000;
  v22 = 0x200000000000;
  v23 = 0x1000000000;
  v24 = 513;
  v25 = 0x8000000;
  v26 = 0x40000;
  switch(v11 & 0x3F)
  {
    case 1:
      goto LABEL_7;
    case 2:
      v25 = 0;
      v22 = 0;
      v20 = 0;
      v19 = 0x80004000200010;
      v21 = 0x8000000000000;
      v23 = 0x400000000;
      v24 = 1;
      v26 = 0x20000;
      goto LABEL_7;
    case 3:
      v26 = 0;
      v25 = 0;
      v22 = 0;
      v21 = 0;
      v20 = 0;
      v19 = 0x800000004;
      v23 = 0x200000000;
      v24 = 1;
LABEL_7:
      v152 = v12;
      v27 = *(_DWORD *)(v16 + 176);
      *(_DWORD *)(v16 + 176) = v27 + 1;
      v28 = (v27 + 33);
      v29 = a1[2];
      v30 = *(unsigned int *)a1[3];
      BYTE8(v161) = 0;
      *(_QWORD *)&v161 = 0;
      *(_QWORD *)&v160 = v25 | v22 | v26 | v23 | v21 | v20 | v24;
      WORD4(v160) = 515;
      HIDWORD(v160) = 1;
      *(_QWORD *)&v159 = &v160;
      *(_QWORD *)&v162 = 0;
      WORD4(v162) = 513;
      HIDWORD(v162) = 1;
      *(_QWORD *)&v163 = v28;
      BYTE8(v163) = 0;
      *(_QWORD *)v166 = v14;
      *(_DWORD *)&v166[8] = 90;
      *(_QWORD *)&v167 = v30;
      *((_QWORD *)&v167 + 1) = &v169;
      v169 = v160;
      v170 = v161;
      v171 = v162;
      v172 = v163;
      *((_QWORD *)&v159 + 1) = 3;
      v168 = 0x200000003;
      *(_QWORD *)&v174[16] = v14;
      *(_DWORD *)&v174[23] = *(_DWORD *)&v166[7];
      JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v29, (unint64_t)&v167, a3, a4, a5, v12, a7, a8);
      v38 = *((_QWORD *)&v167 + 1);
      if (&v169 != *((__int128 **)&v167 + 1) && *((_QWORD *)&v167 + 1))
      {
        *((_QWORD *)&v167 + 1) = 0;
        LODWORD(v168) = 0;
        WTF::fastFree(v38, v31, v32, v33, v34, v35, v36, v37);
      }
      v39 = v159;
      if (&v160 != (__int128 *)v159 && (_QWORD)v159)
      {
        *(_QWORD *)&v159 = 0;
        DWORD2(v159) = 0;
        WTF::fastFree(v39, v31, v32, v33, v34, v35, v36, v37);
      }
      JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(a1[2], *(unsigned int *)a1[3], 352, v14, v28, v18, v36, v37);
      v40 = a1[2];
      v41 = *(unsigned int *)a1[3];
      BYTE8(v161) = 0;
      *(_QWORD *)&v161 = 0;
      *(_QWORD *)&v160 = v19;
      WORD4(v160) = 515;
      HIDWORD(v160) = 1;
      *(_QWORD *)&v162 = 0;
      WORD4(v162) = 513;
      HIDWORD(v162) = 1;
      *(_QWORD *)&v163 = v28;
      BYTE8(v163) = 0;
      v169 = v160;
      v170 = v161;
      v171 = v162;
      *(_QWORD *)&v159 = &v160;
      *(_QWORD *)v166 = v14;
      *(_DWORD *)&v166[8] = 90;
      *(_QWORD *)&v167 = v41;
      *((_QWORD *)&v167 + 1) = &v169;
      v172 = v163;
      *((_QWORD *)&v159 + 1) = 3;
      v168 = 0x200000003;
      *(_QWORD *)&v174[16] = v14;
      *(_DWORD *)&v174[23] = *(_DWORD *)&v166[7];
      JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v40, (unint64_t)&v167, v42, v43, v44, v45, v46, v47);
      v55 = *((_QWORD *)&v167 + 1);
      if (&v169 != *((__int128 **)&v167 + 1) && *((_QWORD *)&v167 + 1))
      {
        *((_QWORD *)&v167 + 1) = 0;
        LODWORD(v168) = 0;
        WTF::fastFree(v55, v48, v49, v50, v51, v52, v53, v54);
      }
      v56 = v159;
      if (&v160 != (__int128 *)v159 && (_QWORD)v159)
      {
        *(_QWORD *)&v159 = 0;
        DWORD2(v159) = 0;
        WTF::fastFree(v56, v48, v49, v50, v51, v52, v53, v54);
      }
      v57 = a1[2];
      v58 = *(unsigned int *)a1[3];
      HIDWORD(v167) = 1;
      v168 = 0;
      LOBYTE(v169) = 0;
      WORD4(v167) = 514;
      *(_QWORD *)&v167 = 1;
      JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(v57, v58, 335, v14, &v167, v28, v18, v54);
      v59 = a1[1];
      v60 = *(_DWORD *)(v59 + 180);
      *(_DWORD *)(v59 + 180) = v60 + 1;
      v61 = a1[2];
      v62 = *(unsigned int *)a1[3];
      *(_QWORD *)&v167 = 0;
      HIDWORD(v167) = 1;
      v168 = 0;
      WORD4(v167) = 533;
      LOBYTE(v169) = v11;
      if ((v15 - 1) >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1980E6474);
      }
      v63 = qword_199152BF0[v15 - 1];
      HIDWORD(v159) = 1;
      v64 = (-33 - v60);
      *(_QWORD *)&v160 = 0;
      BYTE8(v160) = 0;
      WORD4(v159) = 514;
      *(_QWORD *)&v159 = v63;
      JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &>(v61, v62, 0x183u, v14, &v167, v152, &v159, -33 - v60);
      v65 = a1[2];
      v66 = *(unsigned int *)a1[3];
      *(_QWORD *)&v167 = 0;
      HIDWORD(v167) = 1;
      v168 = 0;
      WORD4(v167) = 533;
      LOBYTE(v169) = 0;
      JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(v65, v66, 0x178u, v14, &v167, v64, v18, v64);
      if ((_DWORD)v15 == 1)
      {
        v68 = a1[1];
        v69 = *(_DWORD *)(v68 + 180);
        *(_DWORD *)(v68 + 180) = v69 + 1;
        v70 = -33 - v69;
        v71 = a1[2];
        v72 = *(unsigned int *)a1[3];
        v155 = 0;
        v154 = 0;
        *(_QWORD *)&v156 = 0;
        WORD4(v156) = 533;
        HIDWORD(v156) = 1;
        v157 = 0;
        v158 = 1;
        *(_QWORD *)&v153 = 8;
        WORD4(v153) = 514;
        HIDWORD(v153) = 1;
        JSC::B3::Air::Inst::Inst<JSC::B3::Air::Arg,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp>((uint64_t *)&v159, 391, v14, &v156, &v153, v64, v64, -33 - v69);
        *(_QWORD *)&v167 = v72;
        *((_QWORD *)&v167 + 1) = &v169;
        v168 = 3;
        v79 = (__int128 *)v159;
        if ((__int128 *)v159 == &v160)
        {
          v80 = HIDWORD(v159);
          if (HIDWORD(v159))
          {
            v81 = 32 * HIDWORD(v159);
            v82 = &v169;
            do
            {
              v83 = *v79;
              v84 = v79[1];
              v79 += 2;
              *v82 = v83;
              v82[1] = v84;
              v82 += 2;
              v81 -= 32;
            }
            while (v81);
          }
        }
        else
        {
          *(_QWORD *)&v159 = &v160;
          *((_QWORD *)&v167 + 1) = v79;
          v147 = DWORD2(v159);
          v80 = HIDWORD(v159);
          DWORD2(v159) = 3;
          LODWORD(v168) = v147;
        }
        HIDWORD(v159) = 0;
        HIDWORD(v168) = v80;
        *(_QWORD *)&v174[16] = *(_QWORD *)v166;
        *(_DWORD *)&v174[23] = *(_DWORD *)&v166[7];
        JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v71, (unint64_t)&v167, v73, v74, v75, v76, v77, v78);
        v92 = *((_QWORD *)&v167 + 1);
        if (&v169 != *((__int128 **)&v167 + 1) && *((_QWORD *)&v167 + 1))
        {
          *((_QWORD *)&v167 + 1) = 0;
          LODWORD(v168) = 0;
          WTF::fastFree(v92, v85, v86, v87, v88, v89, v90, v91);
        }
        v93 = v159;
        if (&v160 != (__int128 *)v159 && (_QWORD)v159)
        {
          *(_QWORD *)&v159 = 0;
          DWORD2(v159) = 0;
          WTF::fastFree(v93, v85, v86, v87, v88, v89, v90, v91);
        }
        v94 = a1[2];
        v95 = *(unsigned int *)a1[3];
        *(_QWORD *)&v167 = 0;
        HIDWORD(v167) = 1;
        v168 = 0;
        WORD4(v167) = 533;
        LOBYTE(v169) = 1;
        JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(v94, v95, 0x185u, v14, &v167, v64, v70, v64);
        v11 = v11 & 0xC0 | 2;
      }
      v96 = a1[2];
      v97 = *(unsigned int *)a1[3];
      *(_QWORD *)&v167 = 0;
      HIDWORD(v167) = 1;
      v168 = 0;
      WORD4(v167) = 533;
      LOBYTE(v169) = v11;
      JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(v96, v97, 388, v14, &v167, v64, v64, v67);
      JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(a1[2], *(unsigned int *)a1[3], 121, v14, v64, v13, v98, v99);
      *(_QWORD *)&v167 = &v168;
      *((_QWORD *)&v167 + 1) = 3;
      *(_QWORD *)&v174[8] = 0;
      *(_WORD *)&v174[16] = 0;
      v174[18] = 0;
      v107 = *a1;
      v109 = (_OWORD *)(v107 + 16);
      v108 = *(_QWORD *)v107;
      if (*(_QWORD *)v107 == v107 + 16)
        break;
      if (v108)
      {
        *(_QWORD *)v107 = 0;
        *(_DWORD *)(v107 + 8) = 0;
        WTF::fastFree(v108, v100, v101, v102, v103, v104, v105, v106);
      }
      *(_QWORD *)v107 = v109;
      v110 = v167;
      if ((uint64_t *)v167 != &v168)
        goto LABEL_55;
      if (HIDWORD(v167))
      {
        v111 = 32 * HIDWORD(v167);
        v112 = &v168;
        do
        {
          v113 = *(_OWORD *)v112;
          v114 = *((_OWORD *)v112 + 1);
          v112 += 4;
          *v109 = v113;
          v109[1] = v114;
          v109 += 2;
          v111 -= 32;
        }
        while (v111);
      }
      break;
    case 4:
      v115 = *(_DWORD *)(v16 + 176);
      *(_DWORD *)(v16 + 176) = v115 + 1;
      v116 = (v115 + 33);
      v117 = a1[2];
      v118 = *(unsigned int *)a1[3];
      *(_QWORD *)&v167 = 0;
      HIDWORD(v167) = 1;
      v168 = 0;
      WORD4(v167) = 533;
      LOBYTE(v169) = 4;
      HIDWORD(v159) = 1;
      *(_QWORD *)&v160 = 0;
      BYTE8(v160) = 0;
      WORD4(v159) = 514;
      *(_QWORD *)&v159 = 63;
      JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &>(v117, v118, 0x183u, v14, &v167, v12, &v159, v18);
      v119 = a1[2];
      v120 = *(unsigned int *)a1[3];
      *(_QWORD *)&v167 = 0;
      HIDWORD(v167) = 1;
      v168 = 0;
      WORD4(v167) = 533;
      LOBYTE(v169) = 1;
      JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(v119, v120, 0x186u, v14, &v167, v18, v18, v18);
      JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(a1[2], *(unsigned int *)a1[3], 119, v14, v18, v116, v121, v122);
      v123 = a1[2];
      v124 = *(unsigned int *)a1[3];
      BYTE8(v163) = 0;
      *(_QWORD *)&v163 = 0;
      *(_QWORD *)&v159 = &v160;
      *(_QWORD *)&v160 = 0;
      WORD4(v160) = 513;
      HIDWORD(v160) = 1;
      *(_QWORD *)&v161 = v116;
      BYTE8(v161) = 0;
      *(_QWORD *)&v162 = 31;
      WORD4(v162) = 514;
      HIDWORD(v162) = 1;
      *(_QWORD *)&v164 = 0;
      WORD4(v164) = 513;
      HIDWORD(v164) = 1;
      *(_QWORD *)&v165 = v116;
      BYTE8(v165) = 0;
      *(_QWORD *)v166 = v14;
      *(_DWORD *)&v166[8] = 61;
      *(_QWORD *)&v167 = v124;
      *((_QWORD *)&v167 + 1) = &v169;
      v171 = v162;
      v172 = v163;
      v173 = v164;
      *(_OWORD *)v174 = v165;
      v169 = v160;
      v170 = v161;
      *((_QWORD *)&v159 + 1) = 3;
      v168 = 0x300000003;
      *(_DWORD *)&v174[23] = *(_DWORD *)&v166[7];
      *(_QWORD *)&v174[16] = v14;
      JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v123, (unint64_t)&v167, v125, v126, v127, v128, v129, v130);
      v138 = *((_QWORD *)&v167 + 1);
      if (&v169 != *((__int128 **)&v167 + 1) && *((_QWORD *)&v167 + 1))
      {
        *((_QWORD *)&v167 + 1) = 0;
        LODWORD(v168) = 0;
        WTF::fastFree(v138, v131, v132, v133, v134, v135, v136, v137);
      }
      v139 = v159;
      if (&v160 != (__int128 *)v159 && (_QWORD)v159)
      {
        *(_QWORD *)&v159 = 0;
        DWORD2(v159) = 0;
        WTF::fastFree(v139, v131, v132, v133, v134, v135, v136, v137);
      }
      v140 = a1[2];
      v141 = *(unsigned int *)a1[3];
      HIDWORD(v167) = 1;
      v168 = 0;
      LOBYTE(v169) = 0;
      WORD4(v167) = 516;
      *(_QWORD *)&v167 = 3;
      JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(v140, v141, 50, v14, &v167, v116, v13, v137);
      *(_QWORD *)&v167 = &v168;
      *((_QWORD *)&v167 + 1) = 3;
      *(_QWORD *)&v174[8] = 0;
      *(_WORD *)&v174[16] = 0;
      v174[18] &= 0xFCu;
      v107 = *a1;
      v143 = (_OWORD *)(v107 + 16);
      v142 = *(_QWORD *)v107;
      if (*(_QWORD *)v107 == v107 + 16)
        break;
      if (v142)
      {
        *(_QWORD *)v107 = 0;
        *(_DWORD *)(v107 + 8) = 0;
        WTF::fastFree(v142, v100, v101, v102, v103, v104, v105, v106);
      }
      *(_QWORD *)v107 = v143;
      v110 = v167;
      if ((uint64_t *)v167 == &v168)
      {
        if (HIDWORD(v167))
        {
          v148 = 32 * HIDWORD(v167);
          v149 = &v168;
          do
          {
            v150 = *(_OWORD *)v149;
            v151 = *((_OWORD *)v149 + 1);
            v149 += 4;
            *v143 = v150;
            v143[1] = v151;
            v143 += 2;
            v148 -= 32;
          }
          while (v148);
        }
      }
      else
      {
LABEL_55:
        *(_QWORD *)&v167 = &v168;
        *(_QWORD *)v107 = v110;
      }
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1980E6494);
  }
  *(_DWORD *)(v107 + 8) = DWORD2(v167);
  v144 = HIDWORD(v167);
  HIDWORD(v167) = 0;
  *(_DWORD *)(v107 + 12) = v144;
  v145 = *(_QWORD *)&v174[8];
  *(_DWORD *)(v107 + 119) = *(_DWORD *)&v174[15];
  *(_QWORD *)(v107 + 112) = v145;
  v146 = v167;
  if (&v168 != (uint64_t *)v167)
  {
    if ((_QWORD)v167)
    {
      *(_QWORD *)&v167 = 0;
      DWORD2(v167) = 0;
      WTF::fastFree(v146, v100, v101, v102, v103, v104, v105, v106);
    }
  }
}

void JSC::B3::Air::lowerStackArgs(WTF **this, JSC::B3::Air::Code *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _BYTE *v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD **v36;
  JSC::B3::Air::Kind *v37;
  int v38;
  uint64_t *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  _DWORD *v49;
  int v50;
  int v51;
  uint64_t v52;
  char v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  WTF ***v60;
  _QWORD **v61;
  WTF **v62;
  uint64_t v63;
  int v64;
  WTF **v65;
  unsigned int v66;
  _DWORD *v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  char v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  char v75;
  int v76;
  unsigned int v77;
  int v79;
  unsigned int v80;
  unsigned int v82;
  _DWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  WTF *v92;
  unint64_t v93;
  char v94;
  int v95;
  int v96;
  unsigned int v97;
  _QWORD *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF *v107;
  unint64_t v108;
  WTF *v109;
  JSC::B3::Air *v110;
  WTF *v111;
  unsigned int *v112;
  int v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  JSC::B3::Air::Code *v124;
  uint64_t v125;
  void *v126;
  int v127;
  WTF **v128;
  uint64_t v129;
  char *v130;
  WTF **v131;
  _QWORD **v132;
  WTF ***v133;
  int *v134;
  int v135;
  WTF **v136;
  WTF *v137;
  uint64_t v138;
  _BYTE v139[929];
  JSC::B3::Air *v140[3];
  uint64_t v141;
  WTF *v142;
  _BYTE v143[25];
  double (*v144)(uint64_t, uint64_t *, unsigned int, uint64_t, unsigned int);
  double (**v145)(uint64_t, uint64_t *, unsigned int, uint64_t, unsigned int);
  WTF ***v146;
  _QWORD *v147;
  WTF ***v148;
  _BYTE v149[32];
  __int128 v150;
  _BYTE v151[32];
  _BYTE v152[12];
  _QWORD v153[2];
  char v154;
  _QWORD *v155;
  WTF *v156;
  _BYTE v157[24];
  __int128 v158;
  __int128 v159;
  __int128 v160;
  _QWORD v161[4];

  v8 = this;
  v161[2] = *MEMORY[0x1E0C80C00];
  JSC::B3::Air::PhaseScope::PhaseScope((uint64_t)v140, this, (uint64_t)"lowerStackArgs", 15, a5, a6, a7, a8);
  v14 = (void *)*((unsigned int *)v8 + 27);
  v15 = (uint64_t)g_config;
  v126 = v14;
  if ((_DWORD)v14)
  {
    v16 = 0;
    v17 = v8[12];
    while (!*((_QWORD *)v17 + v16))
    {
      if (v14 == (void *)++v16)
        goto LABEL_27;
    }
    if ((_DWORD)v14 != (_DWORD)v16)
    {
      v18 = v8[1];
      do
      {
        if (v14 <= v16)
        {
          __break(0xC471u);
          JUMPOUT(0x1980E7428);
        }
        v19 = *((_QWORD *)v17 + v16);
        v20 = *(unsigned int *)(v19 + 20);
        if ((_DWORD)v20)
        {
          v21 = *(uint64_t **)(v19 + 8);
          v22 = &v21[16 * v20];
          do
          {
            v23 = *((unsigned int *)v21 + 3);
            if ((_DWORD)v23)
            {
              v24 = *v21;
              v25 = *((_DWORD *)v8 + 47);
              if (HIBYTE(dword_1ECF4C7B0))
              {
                v26 = 32 * v23;
                v27 = (_BYTE *)(v24 + 8);
                if (HIBYTE(word_1ECF4C79E))
                {
                  do
                  {
                    if (*v27 == 10)
                    {
                      if (v25 <= ((*((_DWORD *)v27 - 2) + 31) & 0xFFFFFFF0))
                        v25 = (*((_DWORD *)v27 - 2) + 31) & 0xFFFFFFF0;
                      *((_DWORD *)v8 + 47) = v25;
                    }
                    v27 += 32;
                    v26 -= 32;
                  }
                  while (v26);
                }
                else
                {
                  do
                  {
                    if (*v27 == 10)
                    {
                      if (*((_BYTE *)v18 + 212))
                        v28 = 16;
                      else
                        v28 = 8;
                      v29 = *((_DWORD *)v27 - 2) + v28;
                      v14 = v126;
                      v30 = (v29 + 15) & 0xFFFFFFF0;
                      if (v25 <= v30)
                        v25 = v30;
                      *((_DWORD *)v8 + 47) = v25;
                    }
                    v27 += 32;
                    v26 -= 32;
                  }
                  while (v26);
                }
              }
              else
              {
                v118 = 32 * v23;
                v119 = (_BYTE *)(v24 + 8);
                do
                {
                  if (*v119 == 10)
                  {
                    if (v25 <= ((*((_DWORD *)v119 - 2) + 23) & 0xFFFFFFF0))
                      v25 = (*((_DWORD *)v119 - 2) + 23) & 0xFFFFFFF0;
                    *((_DWORD *)v8 + 47) = v25;
                  }
                  v119 += 32;
                  v118 -= 32;
                }
                while (v118);
              }
            }
            v21 += 16;
          }
          while (v21 != v22);
        }
        v16 = (v16 + 1);
        if (v14 > v16)
        {
          while (!*((_QWORD *)v17 + v16))
          {
            if (v14 == (void *)++v16)
              goto LABEL_27;
          }
        }
      }
      while ((_DWORD)v14 != (_DWORD)v16);
    }
  }
LABEL_27:
  *((_DWORD *)v8 + 46) += *((_DWORD *)v8 + 47);
  v136 = v8;
  v137 = (WTF *)v139;
  v138 = 8;
  if (!(_DWORD)v14)
    goto LABEL_181;
  v31 = 0;
  while (!*((_QWORD *)v8[12] + v31))
  {
    if (v14 == (void *)++v31)
      goto LABEL_181;
  }
  if ((_DWORD)v14 == (_DWORD)v31)
    goto LABEL_181;
  v32 = v31;
  LODWORD(v31) = (_DWORD)v14;
  LODWORD(v33) = v32;
  v128 = v8;
  do
  {
    if (v31 <= v33)
    {
      __break(0xC471u);
      JUMPOUT(0x1980E7430);
    }
    v127 = v33;
    v34 = *((_QWORD *)v8[12] + v33);
    v135 = 0;
    if (*(_DWORD *)(v34 + 20))
    {
      v15 = 0;
      v129 = v34;
      while (1)
      {
        v35 = *(_QWORD *)(v34 + 8);
        v36 = (_QWORD **)(v35 + ((unint64_t)v15 << 7));
        v37 = (JSC::B3::Air::Kind *)(v36 + 15);
        v38 = *((__int16 *)v36 + 60);
        if ((v38 & 0xFFFFFFFE) == 0x30)
          break;
        v131 = v8;
        v132 = (_QWORD **)(v35 + ((unint64_t)v15 << 7));
        v133 = &v136;
        v134 = &v135;
        if ((v38 - 446) <= 5)
        {
          v144 = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::lowerStackArgs(JSC::B3::Air::Code &)::$_1>::implFunction;
          v145 = &v144;
          v146 = &v131;
          v153[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::lowerStackArgs(JSC::B3::Air::Code &)::$_1>::implFunction;
          v153[1] = &v144;
          if (*(_WORD *)v37 != 448)
          {
            switch(*(_WORD *)v37)
            {
              case 0x1BE:
                goto LABEL_56;
              case 0x1BF:
                JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(v35 + ((unint64_t)v15 << 7), (uint64_t)v153);
                break;
              case 0x1C1:
                JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(v35 + ((unint64_t)v15 << 7), (uint64_t)v153);
                break;
              case 0x1C2:
                v155 = v153;
                JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(v35 + ((unint64_t)v15 << 7), (uint64_t)&v155);
                break;
              case 0x1C3:
                JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(v35 + ((unint64_t)v15 << 7), (uint64_t)v153);
                break;
              default:
                WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", v37, "\n");
                __break(0xC471u);
                JUMPOUT(0x1980E73C8);
            }
            goto LABEL_56;
          }
          *(_QWORD *)v143 = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::lowerStackArgs(JSC::B3::Air::Code &)::$_1>::implFunction;
          *(_QWORD *)&v143[8] = &v144;
          if (!*((_DWORD *)v36 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1980E7418);
          }
          v39 = *v36;
          v154 = 3;
          v155 = v8;
          v156 = (WTF *)(v35 + ((unint64_t)v15 << 7));
          *(_QWORD *)v157 = v39;
          *(_QWORD *)&v157[8] = &v154;
          *(_QWORD *)&v157[16] = &v136;
          v40 = *((char *)v39 + 8);
          v41 = *((unsigned __int8 *)v39 + 8);
          if (v40 == 10)
          {
            v49 = (_DWORD *)v39 + 3;
            if (v41 != 9)
              v49 = v39;
            v50 = *v49 - *((_DWORD *)v8 + 46);
          }
          else
          {
            if (v40 != 9)
            {
LABEL_54:
              if (!*((_DWORD *)v36 + 3))
              {
                __break(0xC471u);
                JUMPOUT(0x1980E7420);
              }
              (*(void (**)(_QWORD, _QWORD **, _BYTE *))(*(_QWORD *)**v36 + 16))(**v36, v36, v143);
              goto LABEL_56;
            }
            v42 = *v39;
            if (*(_WORD *)v37 == 90)
            {
              v43 = *v39;
              if (*(_BYTE *)(v42 + 4) == 1)
              {
                *(_BYTE *)(v35 + ((unint64_t)v15 << 7) + 122) |= 2u;
                LODWORD(v15) = *v134;
                v41 = *((unsigned __int8 *)v39 + 8);
                v43 = *v39;
              }
            }
            else
            {
              v43 = *v39;
            }
            v51 = *((_DWORD *)v39 + 3);
            if (v41 != 9)
              v51 = v43;
            v50 = v51 + *(_DWORD *)(v42 + 16);
          }
          JSC::B3::Air::lowerStackArgs(JSC::B3::Air::Code &)::$_1::operator() const(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)::{lambda(unsigned int,int)#1}::operator()((uint64_t)v149, (uint64_t)&v155, v15, v50);
          *(_OWORD *)v39 = *(_OWORD *)v149;
          *(_OWORD *)((char *)v39 + 9) = *(_OWORD *)&v149[9];
          goto LABEL_54;
        }
        v44 = *((unsigned int *)v36 + 3);
        if ((_DWORD)v44)
        {
          v45 = 0;
          v46 = 0;
          v47 = (char *)&JSC::B3::Air::g_formTable + 21 * v38 + ((unint64_t)((v44 - 1) * v44) >> 1);
          v48 = 32 * v44;
          v130 = v47;
          while (1)
          {
            if (v46 >= *((unsigned int *)v36 + 3))
            {
              __break(0xC471u);
              JUMPOUT(0x1980E7400);
            }
            v57 = v47[v46];
            v58 = (v57 >> 5) - 1;
            if (v58 >= 5)
            {
              __break(0xC471u);
              JUMPOUT(0x1980E71ECLL);
            }
            v59 = (uint64_t)*v36;
            v60 = (WTF ***)&(*v36)[v45 / 8];
            LOBYTE(v153[0]) = (v47[v46] >> 5) - 1;
            v62 = v131;
            v61 = v132;
            v144 = (double (*)(uint64_t, uint64_t *, unsigned int, uint64_t, unsigned int))v131;
            v145 = (double (**)(uint64_t, uint64_t *, unsigned int, uint64_t, unsigned int))v132;
            v146 = v60;
            v147 = v153;
            v63 = (uint64_t)v133;
            v148 = v133;
            v64 = *((char *)v60 + 8);
            if (v64 != 10)
              break;
            v72 = (unsigned int *)(v59 + v45);
            if (!*((_DWORD *)v132 + 3))
            {
              __break(0xC471u);
              JUMPOUT(0x1980E7410);
            }
            v68 = *v134;
            v73 = *v72;
            v74 = *v72 - *((_DWORD *)v131 + 46);
            if (*((_WORD *)v132 + 60) == 448 && (v15 = (v45 + v59 - (_QWORD)*v132) >> 5, (_DWORD)v15))
            {
              v75 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**v132 + 40))(**v132, v132);
              v55 = (int)v74;
              if ((v75 & 1) != 0)
                goto LABEL_84;
              v47 = v130;
            }
            else
            {
              v55 = (int)v74;
            }
            if (v74 + 256 < 0x200)
              goto LABEL_98;
            switch(LOBYTE(v153[0]))
            {
              case 0:
                if (v74 >= 0x1000)
                  goto LABEL_59;
                goto LABEL_98;
              case 1:
                if (v74 > 0x1FFE || (v74 & 1) != 0)
                  goto LABEL_59;
                goto LABEL_98;
              case 2:
                v76 = v74 & 3;
                v77 = 16380;
                goto LABEL_90;
              case 3:
                v76 = v74 & 7;
                v77 = 32760;
                goto LABEL_90;
              case 4:
                v76 = v74 & 0xF;
                v77 = 65520;
LABEL_90:
                if (v74 > v77 || v76 != 0)
                  goto LABEL_59;
                goto LABEL_98;
              default:
LABEL_59:
                v52 = (int)v73;
                if (v73 + 256 >= 0x200)
                {
                  switch(LOBYTE(v153[0]))
                  {
                    case 0:
                      if (v73 < 0x1000)
                        goto LABEL_60;
                      goto LABEL_150;
                    case 1:
                      if (v73 <= 0x1FFE && (v73 & 1) == 0)
                        goto LABEL_60;
                      goto LABEL_150;
                    case 2:
                      v96 = v73 & 3;
                      v97 = 16380;
                      goto LABEL_146;
                    case 3:
                      v96 = v73 & 7;
                      v97 = 32760;
                      goto LABEL_146;
                    case 4:
                      v96 = v73 & 0xF;
                      v97 = 65520;
LABEL_146:
                      if (v73 > v97 || v96 != 0)
                        goto LABEL_150;
                      goto LABEL_60;
                    default:
LABEL_150:
                      if (*((_WORD *)v61 + 60) == 448)
                      {
LABEL_151:
                        v53 = 8;
                        goto LABEL_99;
                      }
                      if ((unint64_t)((int)v73 + 4095) < 0x1FFF)
                      {
LABEL_163:
                        v94 = 2;
                      }
                      else
                      {
                        if ((v73 & 0xFFFLL) != 0)
                          goto LABEL_154;
                        v94 = 2;
                        if (HIBYTE(v73))
                        {
LABEL_175:
                          if ((unint64_t)((v52 >> 12) + 4095) >= 0x1000)
LABEL_154:
                            v94 = 3;
                        }
                      }
LABEL_155:
                      BYTE8(v150) = 0;
                      *(_QWORD *)&v150 = 0;
                      v99 = v61[14];
                      *(_QWORD *)&v149[16] = v52;
                      v149[24] = v94;
                      v149[25] = 2;
                      *(_DWORD *)&v149[28] = 1;
                      *(_QWORD *)v149 = &v149[16];
                      *(_QWORD *)v151 = 0;
                      *(_WORD *)&v151[8] = 513;
                      *(_QWORD *)&v151[12] = 0x1F00000001;
                      *(_DWORD *)&v151[20] = 0;
                      v151[24] = 0;
                      *(_QWORD *)v152 = v99;
                      *(_DWORD *)&v152[8] = 90;
                      v155 = (_QWORD *)v68;
                      v156 = (WTF *)&v157[8];
                      *(_OWORD *)&v157[8] = *(_OWORD *)&v149[16];
                      v158 = v150;
                      v159 = *(_OWORD *)v151;
                      v160 = *(_OWORD *)&v151[16];
                      *(_QWORD *)&v149[8] = 3;
                      *(_QWORD *)v157 = 0x200000003;
                      v161[0] = v99;
                      *(_DWORD *)((char *)v161 + 7) = *(_DWORD *)&v152[7];
                      JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v63, (unint64_t)&v155, v15, v9, v10, v11, v12, v13);
                      v107 = v156;
                      if (&v157[8] != (_BYTE *)v156 && v156)
                      {
                        v156 = 0;
                        *(_DWORD *)v157 = 0;
                        WTF::fastFree((unint64_t)v107, v100, v101, v102, v103, v104, v105, v106);
                      }
                      v108 = *(_QWORD *)v149;
                      if (&v149[16] != *(_BYTE **)v149 && *(_QWORD *)v149)
                      {
                        *(_QWORD *)v149 = 0;
                        *(_DWORD *)&v149[8] = 0;
                        WTF::fastFree(v108, v100, v101, v102, v103, v104, v105, v106);
                      }
                      v54 = 31;
                      JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(v63, v68, 6, (uint64_t)v61[14], 32, 31, v105, v106);
                      v55 = 0;
                      v53 = 7;
                      break;
                  }
                  goto LABEL_85;
                }
LABEL_60:
                v53 = 7;
                v54 = 32;
                v55 = v52;
LABEL_61:
                v56 = v59 + v45;
                *(_QWORD *)v56 = v55;
                *(_BYTE *)(v56 + 8) = v53;
                *(_BYTE *)(v56 + 9) = 2;
                *(_DWORD *)(v56 + 12) = 1;
                *(_DWORD *)(v56 + 16) = v54;
                *(_DWORD *)(v56 + 20) = 0;
                *(_BYTE *)(v56 + 24) = 0;
LABEL_62:
                ++v46;
                v45 += 32;
                if (v48 == v45)
                  goto LABEL_56;
                break;
            }
          }
          if (v64 != 9)
            goto LABEL_62;
          v65 = *v60;
          if (*((_WORD *)v132 + 60) == 90 && *((_BYTE *)v65 + 4) == 1)
            *((_BYTE *)v132 + 122) |= 2u;
          v66 = v57 & 0xF;
          if (v66 <= 9
            && ((1 << v66) & 0x2A0) != 0
            && *((_BYTE *)v65 + 4) == 1
            && *(_DWORD *)v65 > dword_199152C30[v58])
          {
            if (*(_DWORD *)v65 != 8)
            {
              __break(0xC471u);
              JUMPOUT(0x1980E71A4);
            }
            if ((v58 & 0x1F) != 2)
            {
              __break(0xC471u);
              JUMPOUT(0x1980E71C4);
            }
            v125 = (*v134 + 1);
            if (*((_BYTE *)v60 + 8) == 9)
              v83 = (_DWORD *)(v59 + v45 + 12);
            else
              v83 = (_DWORD *)(v59 + v45);
            JSC::B3::Air::lowerStackArgs(JSC::B3::Air::Code &)::$_1::operator() const(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)::{lambda(unsigned int,int)#1}::operator()((uint64_t)v143, (uint64_t)&v144, *v134 + 1, *v83 + *((_DWORD *)v65 + 4) + 4);
            v84 = v61[14];
            *(_OWORD *)v157 = *(_OWORD *)&v143[9];
            *(_QWORD *)v149 = &v149[16];
            *(_QWORD *)&v149[16] = 0;
            *(_WORD *)&v149[24] = 532;
            *(_DWORD *)&v149[28] = 1;
            *(_QWORD *)&v150 = 0;
            BYTE8(v150) = 0;
            *(_OWORD *)v151 = *(_OWORD *)v143;
            *(_OWORD *)&v151[16] = *(_OWORD *)&v157[7];
            *(_QWORD *)v152 = v84;
            *(_DWORD *)&v152[8] = 94;
            v155 = (_QWORD *)v125;
            v156 = (WTF *)&v157[8];
            *(_OWORD *)&v157[8] = *(_OWORD *)&v149[16];
            v158 = v150;
            v159 = *(_OWORD *)v143;
            v160 = *(_OWORD *)&v151[16];
            *(_QWORD *)&v149[8] = 3;
            *(_QWORD *)v157 = 0x200000003;
            v161[0] = v84;
            *(_DWORD *)((char *)v161 + 7) = *(_DWORD *)&v152[7];
            JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v63, (unint64_t)&v155, v85, v86, v87, v88, v89, v90);
            v92 = v156;
            if (&v157[8] != (_BYTE *)v156 && v156)
            {
              v156 = 0;
              *(_DWORD *)v157 = 0;
              WTF::fastFree((unint64_t)v92, v91, v15, v9, v10, v11, v12, v13);
            }
            v93 = *(_QWORD *)v149;
            if (&v149[16] != *(_BYTE **)v149 && *(_QWORD *)v149)
            {
              *(_QWORD *)v149 = 0;
              *(_DWORD *)&v149[8] = 0;
              WTF::fastFree(v93, v91, v15, v9, v10, v11, v12, v13);
            }
            v47 = v130;
          }
          if (*((_BYTE *)v60 + 8) == 9)
            v67 = (_DWORD *)(v59 + v45 + 12);
          else
            v67 = (_DWORD *)(v59 + v45);
          if (!*((_DWORD *)v61 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1980E7408);
          }
          v68 = *v134;
          v69 = *v67 + *((_DWORD *)v65 + 4);
          v70 = *((_DWORD *)v62 + 46);
          if (*((_WORD *)v61 + 60) != 448 || (v15 = (v45 + v59 - (_QWORD)*v61) >> 5, !(_DWORD)v15))
          {
            v55 = (int)v69;
LABEL_97:
            if (v69 + 256 >= 0x200)
            {
              switch(LOBYTE(v153[0]))
              {
                case 0:
                  if (v69 < 0x1000)
                    break;
                  goto LABEL_107;
                case 1:
                  if (v69 <= 0x1FFE && (v69 & 1) == 0)
                    break;
                  goto LABEL_107;
                case 2:
                  v79 = v69 & 3;
                  v80 = 16380;
                  goto LABEL_103;
                case 3:
                  v79 = v69 & 7;
                  v80 = 32760;
                  goto LABEL_103;
                case 4:
                  v79 = v69 & 0xF;
                  v80 = 65520;
LABEL_103:
                  if (v69 > v80 || v79 != 0)
                    goto LABEL_107;
                  break;
                default:
LABEL_107:
                  v82 = v70 + v69;
                  v52 = (int)(v70 + v69);
                  if (v70 + v69 + 256 < 0x200)
                    goto LABEL_60;
                  switch(LOBYTE(v153[0]))
                  {
                    case 0:
                      if (v82 < 0x1000)
                        goto LABEL_60;
                      break;
                    case 1:
                      if (v82 <= 0x1FFE && (v82 & 1) == 0)
                        goto LABEL_60;
                      break;
                    case 2:
                      if (v82 <= 0x3FFC && (v82 & 3) == 0)
                        goto LABEL_60;
                      break;
                    case 3:
                      if (v82 <= 0x7FF8 && (v82 & 7) == 0)
                        goto LABEL_60;
                      break;
                    case 4:
                      if (v82 <= 0xFFF0 && (v82 & 0xF) == 0)
                        goto LABEL_60;
                      break;
                    default:
                      break;
                  }
                  if (*((_WORD *)v61 + 60) == 448)
                    goto LABEL_151;
                  if ((unint64_t)((int)v82 + 4095) < 0x1FFF)
                    goto LABEL_163;
                  if ((((_WORD)v70 + (_WORD)v69) & 0xFFF) != 0)
                    goto LABEL_154;
                  v94 = 2;
                  if (!HIBYTE(v82))
                    goto LABEL_155;
                  goto LABEL_175;
              }
            }
LABEL_98:
            v53 = 7;
LABEL_99:
            v54 = 30;
            goto LABEL_61;
          }
          v71 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**v61 + 40))(**v61, v61);
          v55 = (int)v69;
          if ((v71 & 1) == 0)
          {
            v47 = v130;
            goto LABEL_97;
          }
LABEL_84:
          v53 = 8;
          v54 = 30;
LABEL_85:
          v47 = v130;
          goto LABEL_61;
        }
LABEL_56:
        v8 = v128;
        v34 = v129;
LABEL_57:
        v15 = (v135 + 1);
        v135 = v15;
        if (v15 >= *(_DWORD *)(v34 + 20))
          goto LABEL_138;
      }
      v155 = (_QWORD *)(v35 + ((unint64_t)v15 << 7));
      v156 = (WTF *)&v136;
      *(_QWORD *)v157 = &v135;
      if (!*((_DWORD *)v36 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1980E7438);
      }
      v112 = (unsigned int *)*v36;
      v113 = *((char *)*v36 + 8);
      v114 = *((unsigned __int8 *)*v36 + 8);
      switch(v113)
      {
        case 9:
          v115 = v112[3] + *(_DWORD *)(*(_QWORD *)v112 + 16);
          break;
        case 7:
          if (v114 == 9)
            v115 = v112[3];
          else
            v115 = *v112;
          v116 = v112[4];
          goto LABEL_195;
        case 10:
          if (v114 == 9)
            v117 = v112[3];
          else
            v117 = *v112;
          v115 = v117 - *((_DWORD *)v8 + 46);
          break;
        default:
          goto LABEL_57;
      }
      v116 = 30;
LABEL_195:
      JSC::B3::Air::lowerStackArgs(JSC::B3::Air::Code &)::$_0::operator()((uint64_t *)&v155, v115, v116, v9, v10, v11, v12, v13);
      goto LABEL_57;
    }
LABEL_138:
    JSC::B3::Air::InsertionSet::execute((JSC::B3::Air::InsertionSet *)&v136, (JSC::B3::Air::BasicBlock *)v34, v15, v9, v10, v11, v12, v13);
    v33 = (v127 + 1);
    v31 = *((unsigned int *)v8 + 27);
    if (v31 <= v33)
    {
      v15 = (uint64_t)g_config;
      v95 = (int)v126;
    }
    else
    {
      v15 = (uint64_t)g_config;
      v95 = (int)v126;
      while (!*((_QWORD *)v8[12] + v33))
      {
        if (v31 == ++v33)
        {
          LODWORD(v33) = *((_DWORD *)v8 + 27);
          break;
        }
      }
    }
  }
  while (v95 != (_DWORD)v33);
  v109 = v137;
  if (HIDWORD(v138))
  {
    v120 = 136 * HIDWORD(v138);
    v121 = (char *)v137 + 24;
    do
    {
      v122 = *((_QWORD *)v121 - 2);
      if (v121 != (char *)v122 && v122 != 0)
      {
        *((_QWORD *)v121 - 2) = 0;
        *((_DWORD *)v121 - 2) = 0;
        WTF::fastFree(v122, v14, v15, v9, v10, v11, v12, v13);
      }
      v121 += 136;
      v120 -= 136;
    }
    while (v120);
    v109 = v137;
    v15 = (uint64_t)g_config;
  }
  if (v139 != (_BYTE *)v109 && v109)
  {
    v137 = 0;
    LODWORD(v138) = 0;
    WTF::fastFree((unint64_t)v109, v14, (uint64_t)g_config, v9, v10, v11, v12, v13);
    v15 = (uint64_t)g_config;
  }
LABEL_181:
  v110 = v140[0];
  *((JSC::B3::Air **)v140[0] + 38) = v140[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v142)
      v124 = (WTF *)((char *)v142 + 16);
    else
      v124 = 0;
    JSC::B3::Air::validate(v110, v124, (char *)g_config, v9, v10, v11, v12, v13);
  }
  v111 = v142;
  v142 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 1)
      WTF::fastFree((unint64_t)v111, v14, v15, v9, v10, v11, v12, v13);
    else
      --*(_DWORD *)v111;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v141);
}

void JSC::B3::Air::lowerStackArgs(JSC::B3::Air::Code &)::$_0::operator()(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  WTF *v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _OWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  _DWORD *v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  unint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  _OWORD v55[2];
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  int v59;
  char v60;
  _OWORD v61[2];
  __int128 v62;
  uint64_t v63;
  char v64;
  WTF *v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[32];
  _BYTE v70[12];
  uint64_t *v71;
  _OWORD *v72;
  uint64_t v73;
  _OWORD v74[5];
  _BYTE v75[19];

  v8 = a3;
  if ((unint64_t)((int)a2 + 4095) < 0x1FFF
    || (a2 & 0xFFF) == 0
    && (!HIBYTE(a2) || (uint64_t)(int)a2 >> 12 == 0 || (unint64_t)((uint64_t)(int)a2 >> 12) >= 0xFFFFFFFFFFFFF001))
  {
    v42 = (_DWORD *)*a1;
    v43 = *(unsigned __int16 *)(*a1 + 120);
    v44 = *(_QWORD *)(*a1 + 112);
    HIDWORD(v62) = 1;
    v63 = 0;
    v64 = 0;
    WORD4(v62) = 514;
    *(_QWORD *)&v62 = (int)a2;
    if (v42[3] > 1u)
    {
      v45 = *(_OWORD *)(*(_QWORD *)v42 + 48);
      v61[0] = *(_OWORD *)(*(_QWORD *)v42 + 32);
      v61[1] = v45;
      if (v43 == 48)
        v46 = 1;
      else
        v46 = 6;
      JSC::B3::Air::Inst::Inst<JSC::B3::Air::Tmp,JSC::B3::Air::Arg>((uint64_t *)&v71, v46, v44, &v62, v8, v61);
      v35 = *a1;
      v48 = (_OWORD *)(v35 + 16);
      v47 = *(_QWORD *)v35;
      if (*(_QWORD *)v35 != v35 + 16)
      {
        if (v47)
        {
          *(_QWORD *)v35 = 0;
          *(_DWORD *)(v35 + 8) = 0;
          WTF::fastFree(v47, v28, v29, v30, v31, v32, v33, v34);
        }
        *(_QWORD *)v35 = v48;
      }
      v38 = v71;
      if (v71 == &v73)
      {
        if (HIDWORD(v72))
        {
          v49 = 32 * HIDWORD(v72);
          do
          {
            v50 = *(_OWORD *)v38;
            v51 = *((_OWORD *)v38 + 1);
            v38 += 4;
            *v48 = v50;
            v48[1] = v51;
            v48 += 2;
            v49 -= 32;
          }
          while (v49);
        }
        goto LABEL_32;
      }
LABEL_31:
      v71 = &v73;
      *(_QWORD *)v35 = v38;
      goto LABEL_32;
    }
    __break(0xC471u);
LABEL_44:
    JUMPOUT(0x1980E781CLL);
  }
  v10 = *(unsigned int *)a1[2];
  *(_QWORD *)&v67 = (int)a2;
  WORD4(v67) = 515;
  HIDWORD(v67) = 1;
  *(_QWORD *)&v68 = 0;
  BYTE8(v68) = 0;
  *(_QWORD *)v69 = 0;
  *(_WORD *)&v69[8] = 513;
  *(_QWORD *)&v69[12] = 0x1F00000001;
  *(_DWORD *)&v69[20] = 0;
  v69[24] = 0;
  v74[0] = v67;
  v74[1] = v68;
  v74[2] = *(_OWORD *)v69;
  v11 = a1[1];
  v12 = *(_QWORD *)(*a1 + 112);
  v65 = (WTF *)&v67;
  *(_QWORD *)v70 = v12;
  *(_DWORD *)&v70[8] = 90;
  v71 = (uint64_t *)v10;
  v72 = v74;
  v74[3] = *(_OWORD *)&v69[16];
  v66 = 3;
  v73 = 0x200000003;
  *(_QWORD *)&v75[8] = v12;
  *(_DWORD *)&v75[15] = *(_DWORD *)&v70[7];
  JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v11, (unint64_t)&v71, a3, a4, a5, a6, a7, a8);
  v20 = (unint64_t)v72;
  if (v74 != v72 && v72)
  {
    v72 = 0;
    LODWORD(v73) = 0;
    WTF::fastFree(v20, v13, v14, v15, v16, v17, v18, v19);
  }
  v21 = v65;
  if (&v67 != (__int128 *)v65 && v65)
  {
    v65 = 0;
    LODWORD(v66) = 0;
    WTF::fastFree((unint64_t)v21, v13, v14, v15, v16, v17, v18, v19);
  }
  v22 = (uint64_t *)*a1;
  v23 = *(unsigned __int16 *)(*a1 + 120);
  v24 = *(_QWORD *)(*a1 + 112);
  v56 = 0;
  v57 = 513;
  v58 = 0x1F00000001;
  v59 = 0;
  v60 = 0;
  if (*((_DWORD *)v22 + 3) <= 1u)
  {
    __break(0xC471u);
    goto LABEL_44;
  }
  v25 = *v22;
  v26 = *(_OWORD *)(v25 + 48);
  v55[0] = *(_OWORD *)(v25 + 32);
  v55[1] = v26;
  if (v23 == 48)
    v27 = 1;
  else
    v27 = 6;
  JSC::B3::Air::Inst::Inst<JSC::B3::Air::Tmp,JSC::B3::Air::Arg>((uint64_t *)&v71, v27, v24, (__int128 *)&v56, v8, v55);
  v35 = *a1;
  v37 = (_OWORD *)(v35 + 16);
  v36 = *(_QWORD *)v35;
  if (*(_QWORD *)v35 != v35 + 16)
  {
    if (v36)
    {
      *(_QWORD *)v35 = 0;
      *(_DWORD *)(v35 + 8) = 0;
      WTF::fastFree(v36, v28, v29, v30, v31, v32, v33, v34);
    }
    *(_QWORD *)v35 = v37;
  }
  v38 = v71;
  if (v71 != &v73)
    goto LABEL_31;
  if (HIDWORD(v72))
  {
    v39 = 32 * HIDWORD(v72);
    do
    {
      v40 = *(_OWORD *)v38;
      v41 = *((_OWORD *)v38 + 1);
      v38 += 4;
      *v37 = v40;
      v37[1] = v41;
      v37 += 2;
      v39 -= 32;
    }
    while (v39);
  }
LABEL_32:
  *(_DWORD *)(v35 + 8) = (_DWORD)v72;
  v52 = HIDWORD(v72);
  HIDWORD(v72) = 0;
  *(_DWORD *)(v35 + 12) = v52;
  v53 = *(_QWORD *)v75;
  *(_DWORD *)(v35 + 119) = *(_DWORD *)&v75[7];
  *(_QWORD *)(v35 + 112) = v53;
  v54 = (unint64_t)v71;
  if (&v73 != v71)
  {
    if (v71)
    {
      v71 = 0;
      LODWORD(v72) = 0;
      WTF::fastFree(v54, v28, v29, v30, v31, v32, v33, v34);
    }
  }
}

uint64_t JSC::B3::Air::blocksInOptimizedOrder(JSC::B3::Air::Code &)::$_0::operator()(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  if (a4 == 1)
  {
    v4 = result;
    v8 = a3;
    v5 = *(unsigned int *)(result + 12);
    if ((_DWORD)v5 == *(_DWORD *)(result + 8))
    {
      result = WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v5 + 1, (unint64_t)&v8);
      v5 = *(unsigned int *)(v4 + 12);
      *(_QWORD *)(*(_QWORD *)v4 + 8 * v5) = *(_QWORD *)result;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)result + 8 * v5) = a3;
    }
    *(_DWORD *)(v4 + 12) = v5 + 1;
  }
  else
  {
    v8 = a3;
    v7 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v7 == *(_DWORD *)(a2 + 8))
    {
      result = WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v7 + 1, (unint64_t)&v8);
      v7 = *(unsigned int *)(a2 + 12);
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = *(_QWORD *)result;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = a3;
    }
    *(_DWORD *)(a2 + 12) = v7 + 1;
  }
  return result;
}

void JSC::B3::Air::`anonymous namespace'::SortedSuccessors::process(uint64_t *a1, WTF::BitVector *this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  WTF::BitVector *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unsigned int *v30;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 3);
  v6 = *a1 + 8 * v5;
  v7 = *a1 - 8;
  do
  {
    if ((unint64_t)(v6 - v4) < 9)
      break;
    v8 = 0;
    v9 = (v6 - v4) >> 3;
LABEL_4:
    v10 = v7 + 8 * v9;
    do
    {
      --v9;
      v11 = *(_QWORD *)(v10 - 8);
      if (*(double *)(*(_QWORD *)v10 + 104) < *(double *)(v11 + 104))
      {
        *(_QWORD *)(v10 - 8) = *(_QWORD *)v10;
        *(_QWORD *)v10 = v11;
        v8 = 1;
        if (v9 > 1)
          goto LABEL_4;
        goto LABEL_32;
      }
      v10 -= 8;
    }
    while (v9 > 1);
    if ((v8 & 1) == 0)
      break;
LABEL_32:
    v26 = v6 - (v4 + 8);
    if ((unint64_t)v26 < 9)
      break;
    v16 = 0;
    v15 = 0;
    v27 = v26 >> 3;
    if (v27 <= 2)
      v27 = 2;
    v28 = v27 - 1;
    do
    {
      v12 = v4 + 8 * v16;
      v14 = *(_QWORD *)(v12 + 8);
      v13 = *(_QWORD *)(v12 + 16);
      if (*(double *)(v13 + 104) < *(double *)(v14 + 104))
      {
        *(_QWORD *)(v12 + 8) = v13;
        *(_QWORD *)(v12 + 16) = v14;
        v15 = 1;
      }
      ++v16;
    }
    while (v28 != v16);
    v6 -= 8;
    v7 += 8;
    v4 += 8;
  }
  while ((v15 & 1) != 0);
  if ((_DWORD)v5)
  {
    v17 = 0;
    do
    {
      v18 = *(unsigned int **)(*a1 + 8 * v17);
      v30 = v18;
      v19 = *(_QWORD *)this;
      if ((*(_QWORD *)this & 0x8000000000000000) != 0)
        v20 = 63;
      else
        v20 = *(_QWORD *)(2 * v19);
      v21 = *v18;
      if (v20 <= v21)
      {
        WTF::BitVector::resizeOutOfLine(this, v21 + 1, 0);
        v19 = *(_QWORD *)this;
      }
      if (v19 >= 0)
        v22 = (WTF::BitVector *)(2 * v19 + 8);
      else
        v22 = this;
      v23 = (v21 >> 3) & 0x1FFFFFF8;
      v24 = *(_QWORD *)((char *)v22 + v23);
      *(_QWORD *)((char *)v22 + v23) = v24 | (1 << v21);
      if ((v24 & (1 << v21)) == 0)
      {
        v25 = *((unsigned int *)this + 5);
        if ((_DWORD)v25 == *((_DWORD *)this + 4))
        {
          v29 = (_QWORD *)WTF::Vector<JSC::B3::Air::BasicBlock *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 8, v25 + 1, (unint64_t)&v30);
          v25 = *((unsigned int *)this + 5);
          *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v25) = *v29;
        }
        else
        {
          *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v25) = v18;
        }
        *((_DWORD *)this + 5) = v25 + 1;
      }
      ++v17;
    }
    while (v17 < *((unsigned int *)a1 + 3));
  }
  *((_DWORD *)a1 + 3) = 0;
}

void JSC::B3::Air::optimizeBlockOrder(WTF **this, JSC::B3::Air::Code *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  WTF *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  WTF *v40;
  unsigned int *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  WTF **v45;
  WTF **v46;
  int v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t i;
  uint64_t v52;
  int v53;
  _QWORD *v54;
  _QWORD *v55;
  WTF *v57;
  WTF *v59;
  WTF *v60;
  void **v61;
  uint64_t v62;
  uint64_t v63;
  WTF **v64;
  unint64_t v65;
  WTF *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  WTF *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  BOOL v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  unsigned __int8 *v87;
  __int128 v88;
  WTF *v89;
  JSC::B3::Air *v90;
  WTF *v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  JSC::B3::Air::Code *v96;
  WTF *v97;
  uint64_t v98;
  _QWORD v99[3];
  uint64_t v100;
  WTF *v101;
  unsigned int *v102;
  unint64_t v103;
  WTF *v104;
  uint64_t v105;
  _BYTE v106[128];
  WTF *v107;
  uint64_t v108;
  _BYTE v109[16];
  WTF *v110;
  uint64_t v111;
  _BYTE v112[16];
  WTF *v113[19];
  _QWORD v114[3];

  JSC::B3::Air::PhaseScope::PhaseScope((uint64_t)v99, this, (uint64_t)"optimizeBlockOrder", 19, a5, a6, a7, a8);
  v97 = 0;
  v98 = 0;
  v113[0] = (WTF *)0x8000000000000000;
  v113[1] = (WTF *)&v113[3];
  v113[2] = (WTF *)16;
  v110 = (WTF *)v112;
  v111 = 2;
  v107 = (WTF *)v109;
  v108 = 2;
  v9 = *((_DWORD *)this + 63);
  if (v9 == 1)
  {
    v10 = *(unsigned int **)this[30];
    v103 = (unint64_t)v10;
    v11 = *v10;
    v12 = 0x8000000000000000;
LABEL_3:
    v13 = 63;
    goto LABEL_4;
  }
  if (!v9)
    goto LABEL_155;
  v93 = 0;
  v94 = 1;
  do
  {
    JSC::B3::Air::blocksInOptimizedOrder(JSC::B3::Air::Code &)::$_0::operator()((uint64_t)&v107, (uint64_t)&v110, *(_QWORD *)((char *)this[30] + v93 + 16), *((_BYTE *)this[30] + v93 + 24));
    ++v94;
    v95 = *((unsigned int *)this + 63);
    v93 += 16;
  }
  while (v94 < v95);
  if (!(_DWORD)v95)
  {
LABEL_155:
    __break(0xC471u);
    JUMPOUT(0x1980E82D4);
  }
  v12 = (uint64_t)v113[0];
  v10 = *(unsigned int **)this[30];
  v103 = (unint64_t)v10;
  v11 = *v10;
  if (((unint64_t)v113[0] & 0x8000000000000000) != 0)
    goto LABEL_3;
  v13 = *(_QWORD *)(2 * (uint64_t)v113[0]);
LABEL_4:
  v14 = v11;
  if (v13 <= v11)
  {
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v113, v11 + 1, 0);
    v12 = (uint64_t)v113[0];
  }
  v15 = 2 * v12 + 8;
  v16 = v12 < 0;
  v17 = v113;
  if (!v16)
    v17 = (WTF **)v15;
  v18 = (v14 >> 3) & 0x1FFFFFF8;
  v19 = *(uint64_t *)((char *)v17 + v18);
  *(WTF **)((char *)v17 + v18) = (WTF *)(v19 | (1 << v14));
  v20 = HIDWORD(v113[2]);
  if ((v19 & (1 << v14)) == 0)
  {
    if (HIDWORD(v113[2]) == LODWORD(v113[2]))
    {
      v92 = (_QWORD *)WTF::Vector<JSC::B3::Air::BasicBlock *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v113[1], HIDWORD(v113[2]) + 1, (unint64_t)&v103);
      v20 = HIDWORD(v113[2]);
      *((_QWORD *)v113[1] + HIDWORD(v113[2])) = *v92;
    }
    else
    {
      *((_QWORD *)v113[1] + HIDWORD(v113[2])) = v10;
    }
    HIDWORD(v113[2]) = ++v20;
  }
  v114[0] = 0;
  if (v20)
  {
    do
    {
      v21 = *((_QWORD *)v113[1] + v20 - 1);
      HIDWORD(v113[2]) = v20 - 1;
      v114[0] = v21;
      if (!v21)
        break;
      v22 = HIDWORD(v98);
      if (HIDWORD(v98) == (_DWORD)v98)
      {
        v29 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v97, HIDWORD(v98) + 1, (unint64_t)v114);
        v22 = HIDWORD(v98);
        *((_QWORD *)v97 + HIDWORD(v98)) = *v29;
      }
      else
      {
        *((_QWORD *)v97 + HIDWORD(v98)) = v21;
      }
      HIDWORD(v98) = v22 + 1;
      v23 = *(unsigned int *)(v114[0] + 36);
      if ((_DWORD)v23)
      {
        v24 = *(_QWORD *)(v114[0] + 24);
        v25 = v24 + 16 * v23;
        do
        {
          v26 = *(_QWORD *)v24;
          if (*(_BYTE *)(v24 + 8) == 1)
          {
            v103 = *(_QWORD *)v24;
            v27 = HIDWORD(v108);
            if (HIDWORD(v108) == (_DWORD)v108)
            {
              v30 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v107, HIDWORD(v108) + 1, (unint64_t)&v103);
              v27 = HIDWORD(v108);
              *((_QWORD *)v107 + HIDWORD(v108)) = *v30;
            }
            else
            {
              *((_QWORD *)v107 + HIDWORD(v108)) = v26;
            }
            HIDWORD(v108) = v27 + 1;
          }
          else
          {
            v103 = *(_QWORD *)v24;
            v28 = HIDWORD(v111);
            if (HIDWORD(v111) == (_DWORD)v111)
            {
              v31 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v110, HIDWORD(v111) + 1, (unint64_t)&v103);
              v28 = HIDWORD(v111);
              *((_QWORD *)v110 + HIDWORD(v111)) = *v31;
            }
            else
            {
              *((_QWORD *)v110 + HIDWORD(v111)) = v26;
            }
            HIDWORD(v111) = v28 + 1;
          }
          v24 += 16;
        }
        while (v24 != v25);
      }
      v114[0] = 0;
      v20 = HIDWORD(v113[2]);
    }
    while (HIDWORD(v113[2]));
  }
  v103 = 0x8000000000000000;
  v104 = (WTF *)v106;
  v105 = 16;
  v102 = 0;
  v39 = HIDWORD(v105);
  if (HIDWORD(v105))
  {
    while (1)
    {
      v40 = v104;
      v41 = (unsigned int *)*((_QWORD *)v104 + --v39);
      HIDWORD(v105) = v39;
      v102 = v41;
      if (!v41)
        break;
      v42 = (unint64_t *)(2 * (uint64_t)v113[0]);
      if (((unint64_t)v113[0] & 0x8000000000000000) != 0)
        v43 = 63;
      else
        v43 = *v42;
      v44 = *v41;
      if (v43 <= v44
        || ((v45 = (WTF **)(v42 + 1), (uint64_t)v113[0] >= 0) ? (v46 = v45) : (v46 = v113),
            ((*(unint64_t *)((char *)v46 + ((v44 >> 3) & 0x1FFFFFF8)) >> v44) & 1) == 0))
      {
        v47 = HIDWORD(v98);
        if (HIDWORD(v98) == (_DWORD)v98)
        {
          v54 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v97, HIDWORD(v98) + 1, (unint64_t)&v102);
          v47 = HIDWORD(v98);
          *((_QWORD *)v97 + HIDWORD(v98)) = *v54;
        }
        else
        {
          *((_QWORD *)v97 + HIDWORD(v98)) = v41;
        }
        HIDWORD(v98) = v47 + 1;
        v48 = v102;
        v49 = v102[9];
        if ((_DWORD)v49)
        {
          v50 = 0;
          for (i = 0; i != v49; ++i)
          {
            if (i >= v48[9])
            {
              __break(0xC471u);
              JUMPOUT(0x1980E836CLL);
            }
            v52 = *(_QWORD *)(*((_QWORD *)v48 + 3) + v50);
            v114[0] = v52;
            v53 = HIDWORD(v111);
            if (HIDWORD(v111) == (_DWORD)v111)
            {
              v55 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v110, HIDWORD(v111) + 1, (unint64_t)v114);
              v53 = HIDWORD(v111);
              *((_QWORD *)v110 + HIDWORD(v111)) = *v55;
            }
            else
            {
              *((_QWORD *)v110 + HIDWORD(v111)) = v52;
            }
            HIDWORD(v111) = v53 + 1;
            v50 += 16;
          }
        }
        v39 = HIDWORD(v105);
      }
      v102 = 0;
      if (!v39)
        goto LABEL_54;
    }
  }
  else
  {
LABEL_54:
    v40 = v104;
  }
  if (v106 != (_BYTE *)v40 && v40 != 0)
  {
    v104 = 0;
    LODWORD(v105) = 0;
    WTF::fastFree((unint64_t)v40, v32, (uint64_t)v33, v34, v35, v36, v37, v38);
  }
  if ((v103 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v103, v32, (uint64_t)v33, v34, v35, v36, v37, v38);
  v57 = v107;
  if (v109 != (_BYTE *)v107 && v107 != 0)
  {
    v107 = 0;
    LODWORD(v108) = 0;
    WTF::fastFree((unint64_t)v57, v32, (uint64_t)v33, v34, v35, v36, v37, v38);
  }
  v59 = v110;
  if (v112 != (_BYTE *)v110 && v110)
  {
    v110 = 0;
    LODWORD(v111) = 0;
    WTF::fastFree((unint64_t)v59, v32, (uint64_t)v33, v34, v35, v36, v37, v38);
  }
  v60 = v113[1];
  if (&v113[3] != (WTF **)v113[1] && v113[1])
  {
    v113[1] = 0;
    LODWORD(v113[2]) = 0;
    WTF::fastFree((unint64_t)v60, v32, (uint64_t)v33, v34, v35, v36, v37, v38);
  }
  if (((unint64_t)v113[0] & 0x8000000000000000) == 0)
    WTF::fastFree(2 * (uint64_t)v113[0], v32, (uint64_t)v33, v34, v35, v36, v37, v38);
  v61 = (void **)(this + 12);
  v62 = *((unsigned int *)this + 27);
  if ((_DWORD)v62)
  {
    v63 = 8 * v62;
    bzero(*v61, 8 * v62);
    v64 = (WTF **)*v61;
    do
    {
      v32 = *v64;
      *v64 = 0;
      if (v32)
        std::default_delete<JSC::B3::Air::BasicBlock>::operator()[abi:sn180100]((int)v64, v32, (uint64_t)v33, v34, v35, v36, v37, v38);
      ++v64;
      v63 -= 8;
    }
    while (v63);
  }
  *((_DWORD *)this + 27) = 0;
  if (HIDWORD(v98))
  {
    v65 = 0;
    do
    {
      v66 = (WTF *)*((_QWORD *)v97 + v65);
      *(_DWORD *)v66 = v65;
      v113[0] = v66;
      v67 = *((unsigned int *)this + 27);
      if ((_DWORD)v67 == *((_DWORD *)this + 26))
      {
        v69 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(this + 12), v67 + 1, (unint64_t)v113);
        v67 = *((unsigned int *)this + 27);
        v70 = this[12];
        v71 = *v69;
        *v69 = 0;
        *((_QWORD *)v70 + v67) = v71;
      }
      else
      {
        v68 = *v61;
        v113[0] = 0;
        v68[v67] = v66;
      }
      *((_DWORD *)this + 27) = v67 + 1;
      v32 = v113[0];
      v113[0] = 0;
      if (v32)
        std::default_delete<JSC::B3::Air::BasicBlock>::operator()[abi:sn180100]((int)v113, v32, (uint64_t)v33, v34, v35, v36, v37, v38);
      ++v65;
    }
    while (v65 < HIDWORD(v98));
    v72 = *((unsigned int *)this + 27);
    if ((_DWORD)v72)
    {
      v73 = 0;
      while (!*((_QWORD *)*v61 + v73))
      {
        if (v72 == ++v73)
          goto LABEL_128;
      }
      if ((_DWORD)v72 != (_DWORD)v73)
      {
        v74 = *((_DWORD *)this + 27);
        while (1)
        {
          if (v74 <= v73)
          {
            __break(0xC471u);
            JUMPOUT(0x1980E8354);
          }
          v75 = *v61;
          v76 = *((_QWORD *)*v61 + v73);
          v77 = *(unsigned int *)(v76 + 20);
          if (!(_DWORD)v77)
          {
            __break(0xC471u);
            JUMPOUT(0x1980E835CLL);
          }
          v78 = *(_QWORD *)(v76 + 8) + (v77 << 7);
          v79 = *(__int16 *)(v78 - 8);
          v80 = (v79 - 290) > 0x13 || ((1 << (*(_WORD *)(v78 - 8) - 34)) & 0xFF33F) == 0;
          if (v80 && (v79 - 210) >= 4)
            goto LABEL_113;
          v81 = *(_DWORD *)(v76 + 36);
          if (!v81)
          {
            __break(0xC471u);
            JUMPOUT(0x1980E8364);
          }
          v82 = (*(_DWORD *)v76 + 1);
          if (v74 > v82)
          {
            while (1)
            {
              v83 = v75[v82];
              if (v83)
                break;
              if (v74 == ++v82)
                goto LABEL_105;
            }
          }
          v83 = v82 >= v74 ? 0 : v75[v82];
LABEL_105:
          v84 = *(_QWORD *)(v76 + 24);
          if (v83 != *(_QWORD *)v84)
            goto LABEL_113;
          v85 = v78 - 128;
          if (!*(_DWORD *)(v78 - 116))
          {
            __break(0xC471u);
            JUMPOUT(0x1980E8374);
          }
          v86 = *(char *)(*(_QWORD *)v85 + 8);
          if (v86 == 14)
            break;
          if (v86 == 15)
          {
            if ((**(_DWORD **)v85 & 0xFFFFFFFA) == 0)
              break;
          }
          else if ((v86 - 16) < 2)
          {
            break;
          }
LABEL_113:
          v73 = (v73 + 1);
          if (v74 > v73)
          {
            while (!*((_QWORD *)*v61 + v73))
            {
              if (v74 == ++v73)
              {
                LODWORD(v73) = v74;
                break;
              }
            }
          }
          if ((_DWORD)v72 == (_DWORD)v73)
            goto LABEL_128;
        }
        if (v81 <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1980E837CLL);
        }
        *(_OWORD *)v113 = *(_OWORD *)v84;
        *(_QWORD *)v84 = *(_QWORD *)(v84 + 16);
        *(_BYTE *)(v84 + 8) = *(_BYTE *)(v84 + 24);
        *(WTF **)(v84 + 16) = v113[0];
        *(_BYTE *)(v84 + 24) = v113[1];
        if (!*(_DWORD *)(v78 - 116))
        {
          __break(0xC471u);
          JUMPOUT(0x1980E8384);
        }
        JSC::B3::Air::Arg::inverted(*(unsigned __int8 **)v85, 1, (uint64_t)v113);
        if (!*(_DWORD *)(v85 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x1980E838CLL);
        }
        v87 = *(unsigned __int8 **)v85;
        v88 = *(_OWORD *)v113;
        *(_OWORD *)(v87 + 9) = *(_OWORD *)((char *)&v113[1] + 1);
        *(_OWORD *)v87 = v88;
        v74 = *((_DWORD *)this + 27);
        goto LABEL_113;
      }
    }
  }
LABEL_128:
  v89 = v97;
  if (v97)
  {
    v97 = 0;
    LODWORD(v98) = 0;
    WTF::fastFree((unint64_t)v89, v32, (uint64_t)v33, v34, v35, v36, v37, v38);
  }
  v90 = (JSC::B3::Air *)v99[0];
  *(_QWORD *)(v99[0] + 304) = v99[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v101)
      v96 = (WTF *)((char *)v101 + 16);
    else
      v96 = 0;
    JSC::B3::Air::validate(v90, v96, v33, v34, v35, v36, v37, v38);
  }
  v91 = v101;
  v101 = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 1)
      WTF::fastFree((unint64_t)v91, v32, (uint64_t)v33, v34, v35, v36, v37, v38);
    else
      --*(_DWORD *)v91;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v100);
}

uint64_t JSC::B3::Air::optimizePairedLoadStore(WTF **this, JSC::B3::Air::Code *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF **v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD **v22;
  __int16 v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  int v28;
  int *v29;
  int v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  _QWORD **v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  int v48;
  char v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  _OWORD *v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  unsigned __int8 *v76;
  uint64_t v77;
  char v78;
  unsigned int v79;
  _QWORD *v80;
  int v81;
  char v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  uint64_t v92;
  uint64_t *v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int8 *v106;
  uint64_t v107;
  char v108;
  unsigned int v109;
  uint64_t v110;
  int v111;
  int v112;
  char v113;
  int v114;
  BOOL v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  uint64_t v125;
  uint64_t *v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t *v135;
  int v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  WTF *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  _BOOL4 v148;
  uint64_t v149;
  int v150;
  int v151;
  unsigned int v152;
  uint64_t *v153;
  _BOOL4 v154;
  JSC::B3::Air *v155;
  WTF *v156;
  JSC::B3::Air::Code *v158;
  char v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  BOOL v163;
  unsigned int v164;
  unint64_t v165;
  uint64_t v166;
  JSC::B3::Air::Inst *v167;
  WTF **v168;
  int v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD v174[3];
  uint64_t v175;
  WTF *v176;
  WTF *v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  _BYTE v183[32];
  uint64_t v184;
  int v185;
  _QWORD v186[2];
  char v187;
  _QWORD v188[2];
  uint64_t v189;
  char v190;
  uint64_t *v191;
  uint64_t **v192;
  _BYTE v193[32];
  _BYTE v194[32];
  _OWORD v195[2];
  uint64_t v196;

  v8 = this;
  v196 = *MEMORY[0x1E0C80C00];
  JSC::B3::Air::PhaseScope::PhaseScope((uint64_t)v174, this, (uint64_t)"optimizePairedLoadStore", 24, a5, a6, a7, a8);
  v16 = *((unsigned int *)v8 + 27);
  if ((_DWORD)v16)
  {
    v17 = 0;
    while (!*((_QWORD *)v8[12] + v17))
    {
      if (v16 == ++v17)
        goto LABEL_261;
    }
    if ((_DWORD)v16 != (_DWORD)v17)
    {
      v159 = 0;
      LODWORD(v18) = v17;
      v19 = *((_DWORD *)v8 + 27);
      v168 = v8;
      v164 = v19;
      while (1)
      {
        if (v19 <= v18)
        {
          __break(0xC471u);
          JUMPOUT(0x1980E9814);
        }
        v20 = *((_QWORD *)v8[12] + v18);
        LODWORD(v21) = *(_DWORD *)(v20 + 20);
        if ((_DWORD)v21)
          break;
LABEL_207:
        v18 = (v18 + 1);
        if (v19 > v18)
        {
          while (!*((_QWORD *)v8[12] + v18))
          {
            if (v19 == ++v18)
            {
              LODWORD(v18) = v19;
              break;
            }
          }
        }
        if ((_DWORD)v16 == (_DWORD)v18)
          goto LABEL_262;
      }
      v169 = v18;
      v171 = *((_QWORD *)v8[12] + v18);
LABEL_9:
      v21 = (v21 - 1);
      if (*(_DWORD *)(v20 + 20) <= v21)
      {
        __break(0xC471u);
        JUMPOUT(0x1980E978CLL);
      }
      v22 = (_QWORD **)(*(_QWORD *)(v20 + 8) + (v21 << 7));
      if ((*((_BYTE *)v22 + 122) & 1) != 0)
        goto LABEL_12;
      v23 = *((_WORD *)v22 + 60);
      switch(v23)
      {
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 217:
        case 218:
        case 219:
        case 220:
        case 221:
        case 222:
        case 223:
        case 224:
        case 225:
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 236:
        case 237:
        case 238:
        case 239:
        case 240:
        case 241:
        case 242:
        case 243:
        case 244:
        case 245:
        case 246:
        case 247:
        case 248:
        case 249:
        case 250:
        case 251:
        case 252:
        case 253:
        case 254:
        case 255:
        case 256:
        case 257:
        case 258:
        case 259:
        case 260:
        case 261:
        case 262:
        case 263:
        case 264:
        case 265:
        case 266:
        case 267:
        case 270:
        case 271:
        case 272:
        case 273:
        case 274:
        case 275:
        case 276:
        case 277:
        case 278:
        case 279:
        case 280:
        case 281:
        case 290:
        case 291:
        case 292:
        case 293:
        case 294:
        case 295:
        case 296:
        case 297:
        case 298:
        case 299:
        case 300:
        case 301:
        case 302:
        case 303:
        case 304:
        case 305:
        case 306:
        case 307:
        case 308:
        case 309:
        case 326:
        case 327:
        case 328:
        case 329:
        case 330:
        case 331:
        case 332:
        case 333:
        case 334:
        case 445:
        case 446:
        case 449:
        case 450:
        case 451:
          goto LABEL_12;
        case 268:
        case 269:
        case 282:
        case 283:
        case 284:
        case 285:
        case 286:
        case 287:
        case 288:
        case 289:
        case 310:
        case 311:
        case 312:
        case 313:
        case 314:
        case 315:
        case 316:
        case 317:
        case 318:
        case 319:
        case 320:
        case 321:
        case 322:
        case 323:
        case 324:
        case 325:
        case 335:
        case 336:
        case 337:
        case 338:
        case 339:
        case 340:
        case 341:
        case 342:
        case 343:
        case 344:
        case 345:
        case 346:
        case 347:
        case 348:
        case 349:
        case 350:
        case 351:
        case 352:
        case 353:
        case 354:
        case 355:
        case 356:
        case 357:
        case 358:
        case 359:
        case 360:
        case 361:
        case 362:
        case 363:
        case 364:
        case 365:
        case 366:
        case 367:
        case 368:
        case 369:
        case 370:
        case 371:
        case 372:
        case 373:
        case 374:
        case 375:
        case 376:
        case 377:
        case 378:
        case 379:
        case 380:
        case 381:
        case 382:
        case 383:
        case 384:
        case 385:
        case 386:
        case 387:
        case 388:
        case 389:
        case 390:
        case 391:
        case 392:
        case 393:
        case 394:
        case 395:
        case 396:
        case 397:
        case 398:
        case 399:
        case 400:
        case 401:
        case 402:
        case 403:
        case 404:
        case 405:
        case 406:
        case 407:
        case 408:
        case 409:
        case 410:
        case 411:
        case 412:
        case 413:
        case 414:
        case 415:
        case 416:
        case 417:
        case 418:
        case 419:
        case 420:
        case 421:
        case 422:
        case 423:
        case 424:
        case 425:
        case 426:
        case 427:
        case 428:
        case 429:
        case 430:
        case 431:
        case 432:
        case 433:
        case 434:
        case 435:
        case 436:
        case 437:
        case 438:
        case 439:
        case 440:
        case 441:
        case 442:
        case 443:
        case 444:
        case 447:
          goto LABEL_19;
        case 448:
          if (!*((_DWORD *)v22 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1980E980CLL);
          }
          if (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)**v22 + 96))(**v22, *(_QWORD *)(v20 + 8) + (v21 << 7)) & 1) != 0)goto LABEL_12;
          v23 = *((_WORD *)v22 + 60);
LABEL_19:
          v28 = v23;
          if ((v23 | 4) != 0x5E || *((_DWORD *)v22 + 3) != 2)
            goto LABEL_12;
          v29 = (int *)*v22;
          v30 = *((unsigned __int8 *)*v22 + 8);
          if (v30 == 1)
          {
            if (v29[4] < 1)
              goto LABEL_12;
          }
          else if (v30 != 20)
          {
            goto LABEL_12;
          }
          if (*((_BYTE *)v29 + 40) != 7)
            goto LABEL_12;
          v31 = v29[12];
          if ((v31 == 30 || v31 == 32) && (*((_BYTE *)v22 + 122) & 2) == 0)
            goto LABEL_12;
          if (v28 == 90)
          {
            v32 = 3;
          }
          else
          {
            if (v28 != 94)
            {
              __break(0xC471u);
              JUMPOUT(0x1980E95D4);
            }
            v32 = 2;
          }
          v190 = v32;
          v189 = v29[8];
          v33 = v21 >= 0x10 ? 16 : v21;
          v188[0] = 0;
          v188[1] = 0;
          v165 = v33;
          if (!(_DWORD)v33)
            goto LABEL_12;
          v162 = (v33 + 1);
          v170 = 1;
          v163 = 1;
          break;
        default:
          v24 = *((__int16 *)v22 + 60) - 123;
          v25 = v24 > 0x12;
          v26 = (1 << v24) & 0x7FD55;
          if (!v25 && v26 != 0)
            goto LABEL_12;
          goto LABEL_19;
      }
      while (1)
      {
        v34 = (v21 - v170);
        if (*(_DWORD *)(v20 + 20) <= v34)
        {
          __break(0xC471u);
          JUMPOUT(0x1980E97B4);
        }
        v166 = *(_QWORD *)(v20 + 8);
        v167 = (JSC::B3::Air::Inst *)(v166 + (v34 << 7));
        if ((JSC::B3::Air::Inst::hasNonArgEffects(v167) & 1) != 0)
          goto LABEL_12;
        v35 = *(_DWORD *)(v20 + 20);
        if (v35 <= v34)
        {
          __break(0xC471u);
          JUMPOUT(0x1980E97BCLL);
        }
        v173 = (v34 + 1);
        if (v35 <= v173)
        {
          __break(0xC471u);
          JUMPOUT(0x1980E97C4);
        }
        v36 = *(_QWORD *)(v20 + 8);
        v37 = (unsigned int *)(v36 + (v34 << 7));
        v191 = v188;
        v192 = &v191;
        if (v36)
        {
          v186[0] = &v192;
          *(_QWORD *)v193 = v186;
          if ((*(__int16 *)(v36 + (v34 << 7) + 120) - 446) > 5)
          {
            v104 = v37[3];
            if ((_DWORD)v104)
            {
              v105 = 0;
              v106 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
                   + 21 * *(__int16 *)(v36 + (v34 << 7) + 120)
                   + ((unint64_t)((v104 - 1) * v104) >> 1);
              v107 = 32 * v104;
              do
              {
                v109 = *v106++;
                v108 = v109;
                if ((v109 >> 5) - 1 >= 5)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980E9740);
                }
                v110 = *(_QWORD *)v37 + v105;
                v111 = *(char *)(v110 + 8);
                v112 = *(_DWORD *)(v110 + 16);
                if ((v111 - 12) < 2
                  || ((v114 = v108 & 0xC, v111 == 1) ? (v115 = v114 == 4) : (v115 = 0), v115))
                {
                  if (v112 <= 0)
                    v113 = 31 - v112;
                  else
                    v113 = v112 + 127;
                  if ((v113 & 0x40) != 0)
                    goto LABEL_289;
                  ***(_QWORD ***)v186[0] |= 1 << v113;
                }
                v105 += 32;
              }
              while (v107 != v105);
            }
          }
          else
          {
            v177 = (WTF *)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_L12tryStorePairERNS3_4CodeEPNS3_10BasicBlockEjRSA_E3__1EEvPSA_SL_RKT0_EUlSC_S6_S7_S8_E_EEvSL_SL_SO_EUlRSC_S6_S7_S8_E_EEvSO_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
            v178 = (uint64_t)&v177;
            *(_QWORD *)&v179 = v193;
            JSC::B3::Air::Inst::forEachArgCustom(v36 + (v34 << 7), (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_L12tryStorePairERNS3_4CodeEPNS3_10BasicBlockEjRSA_E3__1EEvPSA_SL_RKT0_EUlSC_S6_S7_S8_E_EEvSL_SL_SO_EUlRSC_S6_S7_S8_E_EEvSO_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v177);
          }
        }
        v172 = (v21 - v170);
        v38 = (_QWORD **)(v36 + (v173 << 7));
        v186[0] = &v192;
        *(_QWORD *)v193 = v186;
        if ((*((__int16 *)v38 + 60) - 446) > 5)
        {
          v74 = *((unsigned int *)v38 + 3);
          if ((_DWORD)v74)
          {
            v75 = 0;
            v76 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
                + 21 * *((__int16 *)v38 + 60)
                + ((unint64_t)((v74 - 1) * v74) >> 1);
            v77 = 32 * v74;
            do
            {
              v79 = *v76++;
              v78 = v79;
              if ((v79 >> 5) - 1 >= 5)
              {
                __break(0xC471u);
                JUMPOUT(0x1980E9700);
              }
              v80 = &(*v38)[v75 / 8];
              if (*((_BYTE *)v80 + 8) == 1 && (v78 & 0xFu) - 8 <= 2)
              {
                v81 = *((_DWORD *)v80 + 4);
                if (v81 <= 0)
                  v82 = 31 - v81;
                else
                  v82 = v81 + 127;
                if ((v82 & 0x40) != 0)
                  goto LABEL_289;
                ***(_QWORD ***)v186[0] |= 1 << v82;
              }
              v75 += 32;
            }
            while (v77 != v75);
          }
        }
        else
        {
          v177 = (WTF *)_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_L12tryStorePairERNS3_4CodeEPNS3_10BasicBlockEjRSA_E3__1EEvPSA_SL_RKT0_EUlSC_S6_S7_S8_E_EEvSL_SL_SO_EUlRSC_S6_S7_S8_E0_EEvSO_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_;
          v178 = (uint64_t)&v177;
          *(_QWORD *)&v179 = v193;
          JSC::B3::Air::Inst::forEachArgCustom(v36 + (v173 << 7), (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_L12tryStorePairERNS3_4CodeEPNS3_10BasicBlockEjRSA_E3__1EEvPSA_SL_RKT0_EUlSC_S6_S7_S8_E_EEvSL_SL_SO_EUlRSC_S6_S7_S8_E0_EEvSO_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_, (uint64_t)&v177);
        }
        if (*(_WORD *)(v36 + (v34 << 7) + 120) == 448)
        {
          if (!v37[3])
          {
            __break(0xC471u);
            JUMPOUT(0x1980E97CCLL);
          }
          v39 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)v37 + 80))(**(_QWORD **)v37, v36 + (v34 << 7));
          v40 = v9 | v39;
          if (v9 | v39)
          {
            v41 = *v191;
            do
            {
              v41 |= v40 & -(uint64_t)v40;
              v40 &= v40 - 1;
            }
            while (v40);
            *v191 = v41;
          }
        }
        if (*((_WORD *)v38 + 60) == 448)
        {
          if (!*((_DWORD *)v38 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1980E97D4);
          }
          v42 = (*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**v38 + 72))(**v38, v38);
          v43 = v9 | v42;
          if (v9 | v42)
          {
            v44 = *v191;
            do
            {
              v44 |= v43 & -(uint64_t)v43;
              v43 &= v43 - 1;
            }
            while (v43);
            *v191 = v44;
          }
        }
        if (*((_DWORD *)v22 + 3) <= 1u)
        {
          __break(0xC471u);
          JUMPOUT(0x1980E97DCLL);
        }
        v45 = (uint64_t)*v22;
        v46 = *((_DWORD *)*v22 + 12);
        if (v46 <= 0)
          v47 = 31 - v46;
        else
          v47 = v46 - 1;
        if ((v47 & 0x7Fu) >= 0x40)
          goto LABEL_289;
        if (((v188[0] >> (v47 & 0x7F)) & 1) != 0)
          goto LABEL_12;
        if (*(_BYTE *)(v45 + 8) == 1)
        {
          v48 = *(_DWORD *)(v45 + 16);
          if (v48 <= 0)
            v49 = 31 - v48;
          else
            v49 = v48 - 1;
          v50 = v49 & 0x7F;
          if (v50 >= 0x40)
            goto LABEL_289;
          if (((v188[0] >> v50) & 1) != 0)
            goto LABEL_12;
        }
        v187 = 0;
        v177 = (WTF *)v22;
        v178 = (uint64_t)&v189;
        *(_QWORD *)&v179 = &v190;
        *((_QWORD *)&v179 + 1) = v168;
        v186[0] = &v177;
        v186[1] = &v187;
        v51 = *(_DWORD *)(v20 + 20);
        if (v51 <= v34)
        {
          __break(0xC471u);
          JUMPOUT(0x1980E97E4);
        }
        if (v51 <= v173)
        {
          __break(0xC471u);
          JUMPOUT(0x1980E97ECLL);
        }
        v52 = *(_QWORD *)(v20 + 8);
        if (v52)
        {
          v53 = (uint64_t *)(v52 + (v34 << 7));
          v191 = v186;
          v192 = &v191;
          if ((*((__int16 *)v53 + 60) - 446) <= 5)
          {
            *(_QWORD *)v193 = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Arg,void JSC::B3::Air::Inst::forEachUse<JSC::B3::Air::Arg,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
            *(_QWORD *)&v193[8] = v193;
            *(_QWORD *)&v193[16] = &v192;
            JSC::B3::Air::Inst::forEachArgCustom(v52 + (v34 << 7), (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Arg,void JSC::B3::Air::Inst::forEachUse<JSC::B3::Air::Arg,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction, (uint64_t)v193);
            goto LABEL_71;
          }
          v116 = *((unsigned int *)v53 + 3);
          if ((_DWORD)v116)
            break;
        }
LABEL_71:
        v54 = (uint64_t *)(v52 + (v173 << 7));
        v191 = v186;
        v192 = &v191;
        if ((*((__int16 *)v54 + 60) - 446) <= 5)
        {
          *(_QWORD *)v193 = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Arg,void JSC::B3::Air::Inst::forEachUse<JSC::B3::Air::Arg,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#2}>(JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
          *(_QWORD *)&v193[8] = v193;
          *(_QWORD *)&v193[16] = &v192;
          JSC::B3::Air::Inst::forEachArgCustom(v52 + (v173 << 7), (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Arg,void JSC::B3::Air::Inst::forEachUse<JSC::B3::Air::Arg,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#2}>(JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction, (uint64_t)v193);
          goto LABEL_73;
        }
        v83 = *((unsigned int *)v54 + 3);
        if ((_DWORD)v83)
        {
          v84 = 0;
          v85 = (char *)&JSC::B3::Air::g_formTable
              + 21 * *((__int16 *)v54 + 60)
              + ((unint64_t)((v83 - 1) * v83) >> 1);
          v86 = 8;
          while (1)
          {
            if (v84 >= *((unsigned int *)v54 + 3))
            {
              __break(0xC471u);
              JUMPOUT(0x1980E9794);
            }
            v87 = v85[v84];
            v88 = (v87 >> 5) - 1;
            if (v88 >= 5)
            {
              __break(0xC471u);
              JUMPOUT(0x1980E9628);
            }
            v89 = v87 & 0xF;
            v25 = v89 > 0xB;
            v90 = (1 << v89) & 0xF3C;
            if (!v25 && v90 != 0)
              goto LABEL_134;
            v92 = *v54;
            if ((*(char *)(*v54 + v86) - 6) > 7)
              goto LABEL_134;
            v93 = v191;
            v94 = *(unsigned __int8 *)(*v54 + v86);
            if (v94 != 7)
              goto LABEL_131;
            if (JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst &)::$_5::operator()(*v191, *(_DWORD *)(v92 + v86 + 8), *(int *)(v92 + v86 - 8), v88))
            {
              break;
            }
LABEL_134:
            ++v84;
            v86 += 32;
            if (v83 == v84)
              goto LABEL_73;
          }
          v94 = *(unsigned __int8 *)(v92 + v86);
LABEL_131:
          if (v94 != 6
            || JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst &)::$_5::operator()(*v93, *(_DWORD *)(v92 + v86 + 8), 0, v88))
          {
            *(_BYTE *)v93[1] = 1;
          }
          goto LABEL_134;
        }
LABEL_73:
        if (v187)
          goto LABEL_255;
        v55 = *(_DWORD *)(v171 + 20);
        if (v55 <= v172)
        {
          __break(0xC471u);
          JUMPOUT(0x1980E97F4);
        }
        if (v55 <= v173)
        {
          __break(0xC471u);
          JUMPOUT(0x1980E97FCLL);
        }
        v56 = *(_QWORD *)(v171 + 8);
        if (v56)
        {
          v57 = v56 + (v172 << 7);
          v191 = v186;
          v192 = &v191;
          v160 = v56;
          if ((*(__int16 *)(v57 + 120) - 446) <= 5)
          {
            *(_QWORD *)v193 = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Arg,void JSC::B3::Air::Inst::forEachDef<JSC::B3::Air::Arg,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
            *(_QWORD *)&v193[8] = v193;
            *(_QWORD *)&v193[16] = &v192;
            JSC::B3::Air::Inst::forEachArgCustom(v57, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Arg,void JSC::B3::Air::Inst::forEachDef<JSC::B3::Air::Arg,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction, (uint64_t)v193);
LABEL_79:
            v56 = v160;
            goto LABEL_80;
          }
          v128 = *(unsigned int *)(v57 + 12);
          if (!(_DWORD)v128)
            goto LABEL_79;
          v129 = 0;
          v130 = (char *)&JSC::B3::Air::g_formTable
               + 21 * *(__int16 *)(v56 + (v172 << 7) + 120)
               + ((unint64_t)((v128 - 1) * v128) >> 1);
          v131 = 8;
          while (2)
          {
            if (v129 >= *(unsigned int *)(v57 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x1980E97ACLL);
            }
            v132 = v130[v129];
            v133 = (v132 >> 5) - 1;
            if (v133 >= 5)
            {
              __break(0xC471u);
              JUMPOUT(0x1980E9688);
            }
            if ((v132 & 0xC) == 4)
            {
              v134 = *(_QWORD *)v57;
              if ((*(char *)(*(_QWORD *)v57 + v131) - 6) <= 7)
              {
                v135 = v191;
                v136 = *(unsigned __int8 *)(*(_QWORD *)v57 + v131);
                if (v136 != 7)
                  goto LABEL_192;
                if (JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst &)::$_5::operator()(*v191, *(_DWORD *)(v134 + v131 + 8), *(int *)(v134 + v131 - 8), v133))
                {
                  v136 = *(unsigned __int8 *)(v134 + v131);
LABEL_192:
                  if (v136 != 6
                    || JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst &)::$_5::operator()(*v135, *(_DWORD *)(v134 + v131 + 8), 0, v133))
                  {
                    *(_BYTE *)v135[1] = 1;
                  }
                }
              }
            }
            ++v129;
            v131 += 32;
            if (v128 == v129)
              goto LABEL_79;
            continue;
          }
        }
LABEL_80:
        v58 = v56 + (v173 << 7);
        v191 = v186;
        v192 = &v191;
        if ((*(__int16 *)(v58 + 120) - 446) <= 5)
        {
          *(_QWORD *)v193 = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Arg,void JSC::B3::Air::Inst::forEachDef<JSC::B3::Air::Arg,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#2}>(JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
          *(_QWORD *)&v193[8] = v193;
          *(_QWORD *)&v193[16] = &v192;
          JSC::B3::Air::Inst::forEachArgCustom(v58, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Arg,void JSC::B3::Air::Inst::forEachDef<JSC::B3::Air::Arg,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#2}>(JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction, (uint64_t)v193);
          goto LABEL_82;
        }
        v95 = *(unsigned int *)(v58 + 12);
        if ((_DWORD)v95)
        {
          v96 = 0;
          v97 = (char *)&JSC::B3::Air::g_formTable
              + 21 * *(__int16 *)(v58 + 120)
              + ((unint64_t)((v95 - 1) * v95) >> 1);
          v98 = 8;
          while (1)
          {
            if (v96 >= *(unsigned int *)(v58 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x1980E979CLL);
            }
            v99 = v97[v96];
            v100 = (v99 >> 5) - 1;
            if (v100 >= 5)
            {
              __break(0xC471u);
              JUMPOUT(0x1980E9648);
            }
            if ((v99 & 0xF) - 8 > 2)
              goto LABEL_148;
            v101 = *(_QWORD *)v58;
            if ((*(char *)(*(_QWORD *)v58 + v98) - 6) > 7)
              goto LABEL_148;
            v102 = v191;
            v103 = *(unsigned __int8 *)(*(_QWORD *)v58 + v98);
            if (v103 != 7)
              goto LABEL_145;
            if (JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst &)::$_5::operator()(*v191, *(_DWORD *)(v101 + v98 + 8), *(int *)(v101 + v98 - 8), v100))
            {
              break;
            }
LABEL_148:
            ++v96;
            v98 += 32;
            if (v95 == v96)
              goto LABEL_82;
          }
          v103 = *(unsigned __int8 *)(v101 + v98);
LABEL_145:
          if (v103 != 6
            || JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst &)::$_5::operator()(*v102, *(_DWORD *)(v101 + v98 + 8), 0, v100))
          {
            *(_BYTE *)v102[1] = 1;
          }
          goto LABEL_148;
        }
LABEL_82:
        if (v187)
        {
LABEL_255:
          v20 = v171;
          goto LABEL_12;
        }
        v20 = v171;
        v9 = (v21 - v170);
        v10 = (char *)v166;
        v59 = v166 + (v172 << 7);
        v60 = *(unsigned __int16 *)(v59 + 120);
        if (v60 != *((unsigned __int16 *)v22 + 60))
          goto LABEL_104;
        if (((*((_BYTE *)v22 + 122) ^ *(_BYTE *)(v59 + 122)) & 3) != 0)
          goto LABEL_104;
        if (*((_DWORD *)v167 + 3) != 2)
          goto LABEL_104;
        v61 = *(_QWORD *)v167;
        v62 = *(unsigned __int8 *)(*(_QWORD *)v167 + 8);
        if (v62 != 1 && v62 != 20)
          goto LABEL_104;
        if (*(_BYTE *)(v61 + 40) != 7)
          goto LABEL_104;
        if (*((_DWORD *)v22 + 3) <= 1u)
        {
          __break(0xC471u);
          JUMPOUT(0x1980E9804);
        }
        v63 = *(_DWORD *)(v61 + 48);
        v64 = *v22;
        if (v63 != *((_DWORD *)*v22 + 12))
          goto LABEL_104;
        v65 = (__int16)v60;
        switch((__int16)v60)
        {
          case 'Z':
            v66 = v189;
            v67 = (int)v189 >> 3;
            v68 = v189 & 7;
            v69 = 99;
            break;
          case '^':
            v66 = v189;
            v67 = (int)v189 >> 2;
            v68 = v189 & 3;
            v69 = 98;
            break;
          case 'k':
            v66 = v189;
            v67 = (int)v189 >> 2;
            v68 = v189 & 3;
            v69 = 111;
            break;
          case 'l':
            v66 = v189;
            v67 = (int)v189 >> 3;
            v68 = v189 & 7;
            v69 = 112;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x1980E9608);
        }
        v70 = *(_QWORD *)(v61 + 32);
        v71 = (int)v70;
        if (!v68 && (v67 + 64) <= 0x7F)
        {
          if ((unint64_t)v190 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x1980E96C0);
          }
          if (qword_199152C08[v190] + v66 == (int)v70)
          {
            v137 = *(_QWORD *)(v166 + (v172 << 7) + 112);
            *(_OWORD *)&v193[9] = *(_OWORD *)((char *)v64 + 9);
            *(_OWORD *)v193 = *v64;
            *(_OWORD *)v194 = *(_OWORD *)v61;
            *(_OWORD *)&v194[9] = *(_OWORD *)(v61 + 9);
            v195[0] = v64[2];
            *(_OWORD *)((char *)v195 + 9) = *(_OWORD *)((char *)v64 + 41);
            v177 = (WTF *)&v179;
            v179 = *(_OWORD *)v193;
            v180 = *(_OWORD *)&v193[16];
            v181 = *(_OWORD *)v194;
            v182 = *(_OWORD *)&v194[16];
            v138 = v195[0];
            v139 = v195[1];
            goto LABEL_216;
          }
        }
        v72 = 3;
        v73 = 2;
        if (v65 > 106)
        {
          if (v65 != 107)
          {
LABEL_98:
            v72 = 7;
            v73 = 3;
          }
        }
        else if (v65 == 90)
        {
          goto LABEL_98;
        }
        if ((v72 & v70) == 0 && (((int)v70 >> v73) + 64) <= 0x7F)
        {
          if ((unint64_t)v190 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x1980E96E0);
          }
          if (qword_199152C08[v190] + (int)v70 == v66)
          {
            v137 = *(_QWORD *)(v166 + (v172 << 7) + 112);
            *(_OWORD *)&v193[9] = *(_OWORD *)(v61 + 9);
            *(_OWORD *)v193 = *(_OWORD *)v61;
            *(_OWORD *)v194 = *v64;
            *(_OWORD *)&v194[9] = *(_OWORD *)((char *)v64 + 9);
            v195[0] = *(_OWORD *)(v61 + 32);
            *(_OWORD *)((char *)v195 + 9) = *(_OWORD *)(v61 + 41);
            v177 = (WTF *)&v179;
            v179 = *(_OWORD *)v193;
            v180 = *(_OWORD *)&v193[16];
            v181 = *(_OWORD *)v194;
            v182 = *(_OWORD *)&v194[16];
            v138 = v195[0];
            v139 = v195[1];
LABEL_216:
            *(_OWORD *)v183 = v138;
            *(_OWORD *)&v183[16] = v139;
            v178 = 0x300000003;
            goto LABEL_217;
          }
        }
        if (v63 == 32)
        {
          v144 = *((unsigned int *)v168 + 46);
          v145 = v66 - v144;
          if (v65 > 106)
          {
            if (v65 == 107)
              goto LABEL_236;
LABEL_232:
            v146 = (int)v145 >> 3;
            v147 = v145 & 7;
          }
          else
          {
            if (v65 == 90)
              goto LABEL_232;
LABEL_236:
            v146 = (int)v145 >> 2;
            v147 = v145 & 3;
          }
          v149 = v71 - v144;
          if (!v147 && (v146 + 64) <= 0x7F)
          {
            if ((unint64_t)v190 >= 5)
              goto LABEL_290;
            if (v149 == qword_199152C08[v190] + v145)
            {
              v137 = *(_QWORD *)(v166 + (v172 << 7) + 112);
              *(_OWORD *)&v193[9] = *(_OWORD *)((char *)v64 + 9);
              *(_OWORD *)v193 = *v64;
              *(_OWORD *)v194 = *(_OWORD *)v61;
              *(_OWORD *)&v194[9] = *(_OWORD *)(v61 + 9);
              v179 = *(_OWORD *)v193;
              v180 = *(_OWORD *)&v193[16];
              v181 = *(_OWORD *)v194;
              v177 = (WTF *)&v179;
              v182 = *(_OWORD *)&v194[16];
              *(_QWORD *)v183 = v145;
              *(_WORD *)&v183[8] = 519;
              *(_QWORD *)&v183[12] = 0x1E00000001;
LABEL_269:
              *(_DWORD *)&v183[20] = 0;
              v183[24] = 0;
              v178 = 0x300000003;
LABEL_217:
              v184 = v137;
              v185 = v69;
              JSC::B3::Air::Inst::operator=((const void **)v167, (const void **)&v177, v166, v11, v12, v13, v14, v15);
              v140 = v177;
              if (&v179 != (__int128 *)v177 && v177)
              {
                v177 = 0;
                LODWORD(v178) = 0;
                WTF::fastFree((unint64_t)v140, (void *)v9, (uint64_t)v10, v11, v12, v13, v14, v15);
              }
              if (v163)
              {
                v141 = *(_QWORD *)(v171 + 8);
                v142 = v141 + (v21 << 7);
                v143 = *(_QWORD *)v142;
                if (*(_QWORD *)v142 && v142 + 16 != v143)
                {
                  *(_QWORD *)v142 = 0;
                  *(_DWORD *)(v142 + 8) = 0;
                  WTF::fastFree(v143, (void *)v9, (uint64_t)v10, v11, v12, v13, v14, v15);
                  v141 = *(_QWORD *)(v171 + 8);
                }
                WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping((unsigned int *)(v142 + 128), (unsigned int *)(v141 + ((unint64_t)*(unsigned int *)(v171 + 20) << 7)), v142, v11, v12, v13, v14, v15);
                --*(_DWORD *)(v171 + 20);
                v159 = 1;
              }
LABEL_12:
              if (!(_DWORD)v21)
              {
                v8 = v168;
                LODWORD(v18) = v169;
                v19 = *((_DWORD *)v168 + 27);
                LODWORD(v16) = v164;
                goto LABEL_207;
              }
              goto LABEL_9;
            }
          }
          if (v65 > 106)
          {
            if (v65 == 107)
              goto LABEL_252;
LABEL_243:
            v150 = (int)v149 >> 3;
            v151 = v149 & 7;
          }
          else
          {
            if (v65 == 90)
              goto LABEL_243;
LABEL_252:
            v150 = (int)v149 >> 2;
            v151 = v149 & 3;
          }
          if (!v151 && (v150 + 64) <= 0x7F)
          {
            if ((unint64_t)v190 >= 5)
            {
              __break(0xC471u);
LABEL_289:
              __break(1u);
LABEL_290:
              __break(0xC471u);
              JUMPOUT(0x1980E9784);
            }
            if (qword_199152C08[v190] + v149 == v145)
            {
              v137 = *(_QWORD *)(v166 + (v172 << 7) + 112);
              *(_OWORD *)&v193[9] = *(_OWORD *)(v61 + 9);
              *(_OWORD *)v193 = *(_OWORD *)v61;
              *(_OWORD *)v194 = *v64;
              *(_OWORD *)&v194[9] = *(_OWORD *)((char *)v64 + 9);
              v179 = *(_OWORD *)v193;
              v180 = *(_OWORD *)&v193[16];
              v181 = *(_OWORD *)v194;
              v177 = (WTF *)&v179;
              v182 = *(_OWORD *)&v194[16];
              *(_QWORD *)v183 = v149;
              *(_WORD *)&v183[8] = 519;
              *(_QWORD *)&v183[12] = 0x1E00000001;
              goto LABEL_269;
            }
          }
        }
LABEL_104:
        v163 = v170++ < v165;
        if (v170 == v162)
          goto LABEL_12;
      }
      v117 = 0;
      v118 = (char *)&JSC::B3::Air::g_formTable
           + 21 * *(__int16 *)(v52 + (v172 << 7) + 120)
           + ((unint64_t)((v116 - 1) * v116) >> 1);
      v119 = 8;
      while (1)
      {
        if (v117 >= *((unsigned int *)v53 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x1980E97A4);
        }
        v120 = v118[v117];
        v121 = (v120 >> 5) - 1;
        if (v121 >= 5)
        {
          __break(0xC471u);
          JUMPOUT(0x1980E9668);
        }
        v122 = v120 & 0xF;
        if (v122 < 2)
          goto LABEL_172;
        v25 = v122 > 0xB;
        v123 = (1 << v122) & 0xBF0;
        if (!v25 && v123 != 0)
          goto LABEL_172;
        v125 = *v53;
        if ((*(char *)(*v53 + v119) - 6) > 7)
          goto LABEL_172;
        v126 = v191;
        v127 = *(unsigned __int8 *)(*v53 + v119);
        if (v127 != 7)
          goto LABEL_181;
        v161 = v191;
        v148 = JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst &)::$_5::operator()(*v191, *(_DWORD *)(v125 + v119 + 8), *(int *)(v125 + v119 - 8), v121);
        v126 = v161;
        if (v148)
          break;
LABEL_172:
        ++v117;
        v119 += 32;
        if (v116 == v117)
          goto LABEL_71;
      }
      v127 = *(unsigned __int8 *)(v125 + v119);
LABEL_181:
      if (v127 != 6
        || (v152 = v121,
            v153 = v126,
            v154 = JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst &)::$_5::operator()(*v126, *(_DWORD *)(v125 + v119 + 8), 0, v152), v126 = v153, v154))
      {
        *(_BYTE *)v126[1] = 1;
      }
      goto LABEL_172;
    }
  }
LABEL_261:
  v159 = 0;
LABEL_262:
  v155 = (JSC::B3::Air *)v174[0];
  *(_QWORD *)(v174[0] + 304) = v174[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v176)
      v158 = (WTF *)((char *)v176 + 16);
    else
      v158 = 0;
    JSC::B3::Air::validate(v155, v158, v10, v11, v12, v13, v14, v15);
  }
  v156 = v176;
  v176 = 0;
  if (v156)
  {
    if (*(_DWORD *)v156 == 1)
      WTF::fastFree((unint64_t)v156, (void *)v9, (uint64_t)v10, v11, v12, v13, v14, v15);
    else
      --*(_DWORD *)v156;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v175);
  return v159 & 1;
}

uint64_t WTF::Vector<JSC::B3::Air::ShufflePair,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 72 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v14 = (unint64_t)a2;
      if (v14 <= v12)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v8 - v10) >> 3);
      if (v14 < 0x11)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
        goto LABEL_29;
      }
      if (v14 < 0x38E38E4)
      {
        v15 = 72 * v14;
        v16 = WTF::fastMalloc((WTF *)(72 * v14));
        *(_DWORD *)(a1 + 8) = (v15 & 0xFFFFFFF8) / 0x48;
        *(_QWORD *)a1 = v16;
LABEL_29:
        v23 = 0;
        do
        {
          v24 = v16 + v23;
          *(_OWORD *)v24 = *(_OWORD *)(v10 + v23);
          v25 = *(_OWORD *)(v10 + v23 + 16);
          v26 = *(_OWORD *)(v10 + v23 + 32);
          v27 = *(_OWORD *)(v10 + v23 + 48);
          *(_QWORD *)(v24 + 64) = *(_QWORD *)(v10 + v23 + 64);
          *(_OWORD *)(v24 + 32) = v26;
          *(_OWORD *)(v24 + 48) = v27;
          *(_OWORD *)(v24 + 16) = v25;
          v23 += 72;
        }
        while (72 * v11 != v23);
        if (a1 + 16 != v10 && v10)
        {
          if (*(_QWORD *)a1 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v8 - v10) >> 3);
      }
LABEL_41:
      __break(0xC471u);
      JUMPOUT(0x1980E9E54);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v19 = (unint64_t)a2;
  if (v19 > v17)
  {
    v20 = *(unsigned int *)(a1 + 12);
    if (v19 < 0x11)
    {
      v22 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
      if (!(_DWORD)v20)
        goto LABEL_23;
    }
    else
    {
      if (v19 >= 0x38E38E4)
        goto LABEL_41;
      v21 = 72 * v19;
      v22 = WTF::fastMalloc((WTF *)(72 * v19));
      *(_DWORD *)(a1 + 8) = (v21 & 0xFFFFFFF8) / 0x48;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v20)
        goto LABEL_23;
    }
    v29 = 72 * v20;
    v30 = v10;
    do
    {
      *(_OWORD *)v22 = *(_OWORD *)v30;
      v31 = *(_OWORD *)(v30 + 16);
      v32 = *(_OWORD *)(v30 + 32);
      v33 = *(_OWORD *)(v30 + 48);
      *(_QWORD *)(v22 + 64) = *(_QWORD *)(v30 + 64);
      *(_OWORD *)(v22 + 32) = v32;
      *(_OWORD *)(v22 + 48) = v33;
      *(_OWORD *)(v22 + 16) = v31;
      v22 += 72;
      v30 += 72;
      v29 -= 72;
    }
    while (v29);
LABEL_23:
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

void JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  _BYTE v16[32];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[12];
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  _OWORD v25[6];
  _QWORD v26[2];

  *(_OWORD *)v16 = *a5;
  *(_OWORD *)&v16[9] = *(_OWORD *)((char *)a5 + 9);
  *(_QWORD *)&v17 = 0;
  WORD4(v17) = 513;
  HIDWORD(v17) = 1;
  *(_QWORD *)&v18 = a6;
  BYTE8(v18) = 0;
  *(_QWORD *)&v19 = 0;
  WORD4(v19) = 513;
  HIDWORD(v19) = 1;
  *(_QWORD *)&v20 = a7;
  BYTE8(v20) = 0;
  v25[2] = v17;
  v25[3] = v18;
  v25[4] = v19;
  v25[5] = v20;
  v25[0] = *(_OWORD *)v16;
  *(_QWORD *)v21 = a4;
  *(_DWORD *)&v21[8] = (unsigned __int16)a3;
  v22 = a2;
  v23 = (WTF *)v25;
  v25[1] = *(_OWORD *)&v16[16];
  v24 = 0x300000003;
  *(_DWORD *)((char *)v26 + 7) = *(_DWORD *)&v21[7];
  v26[0] = a4;
  JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(a1, (unint64_t)&v22, a3, a4, (uint64_t)a5, a6, a7, a8);
  v15 = v23;
  if (v25 != (_OWORD *)v23)
  {
    if (v23)
    {
      v23 = 0;
      LODWORD(v24) = 0;
      WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
    }
  }
}

void JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[12];
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  _OWORD v24[6];
  _QWORD v25[2];

  *(_QWORD *)&v16 = 0;
  WORD4(v16) = 513;
  HIDWORD(v16) = 1;
  *(_QWORD *)&v17 = a5;
  BYTE8(v17) = 0;
  *(_QWORD *)&v18 = 0;
  WORD4(v18) = 513;
  HIDWORD(v18) = 1;
  *(_QWORD *)&v19 = a6;
  BYTE8(v19) = 0;
  v24[0] = v16;
  v24[1] = v17;
  v24[2] = v18;
  *(_QWORD *)v20 = a4;
  *(_DWORD *)&v20[8] = (unsigned __int16)a3;
  v21 = a2;
  v22 = (WTF *)v24;
  v24[3] = v19;
  v23 = 0x200000003;
  v25[0] = a4;
  *(_DWORD *)((char *)v25 + 7) = *(_DWORD *)&v20[7];
  JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(a1, (unint64_t)&v21, a3, a4, a5, a6, a7, a8);
  v15 = v22;
  if (v24 != (_OWORD *)v22)
  {
    if (v22)
    {
      v22 = 0;
      LODWORD(v23) = 0;
      WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
    }
  }
}

void JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &>(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, _OWORD *a5, int a6, _OWORD *a7, int a8)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  WTF *v30;
  _BYTE v31[144];
  _BYTE v32[152];

  *(_QWORD *)&v32[136] = *MEMORY[0x1E0C80C00];
  v13 = a3;
  *(_OWORD *)&v31[112] = *a5;
  *(_OWORD *)&v31[121] = *(_OWORD *)((char *)a5 + 9);
  *(_OWORD *)&v32[7] = *a7;
  *(_OWORD *)&v32[16] = *(_OWORD *)((char *)a7 + 9);
  v30 = (WTF *)WTF::fastMalloc((WTF *)0x80);
  v20 = *(_OWORD *)&v31[128];
  *(_OWORD *)v30 = *(_OWORD *)&v31[112];
  *((_OWORD *)v30 + 1) = v20;
  *((_QWORD *)v30 + 4) = 0;
  *((_WORD *)v30 + 20) = 513;
  *((_DWORD *)v30 + 11) = 1;
  *((_DWORD *)v30 + 12) = a6;
  *((_DWORD *)v30 + 13) = 0;
  *((_BYTE *)v30 + 56) = 0;
  *((_OWORD *)v30 + 5) = *(_OWORD *)&v32[23];
  *((_OWORD *)v30 + 4) = *(_OWORD *)&v32[7];
  *((_QWORD *)v30 + 12) = 0;
  *((_WORD *)v30 + 52) = 513;
  *((_DWORD *)v30 + 27) = 1;
  *((_DWORD *)v30 + 28) = a8;
  *((_DWORD *)v30 + 29) = 0;
  *((_BYTE *)v30 + 120) = 0;
  *(_QWORD *)&v31[96] = a4;
  *(_DWORD *)&v31[104] = v13;
  *(_QWORD *)v32 = a2;
  *(_QWORD *)&v32[8] = &v32[24];
  *(_DWORD *)&v32[16] = 3;
  v21 = v30;
  if (v30 == (WTF *)v31)
  {
    memcpy(&v32[24], v31, 0x80uLL);
  }
  else
  {
    v30 = (WTF *)v31;
    *(_QWORD *)&v32[8] = v21;
    *(_DWORD *)&v32[16] = 4;
  }
  *(_DWORD *)&v32[20] = 4;
  *(_QWORD *)&v32[120] = *(_QWORD *)&v31[96];
  *(_DWORD *)&v32[127] = *(_DWORD *)&v31[103];
  JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(a1, (unint64_t)v32, v14, v15, v16, v17, v18, v19);
  v29 = *(_QWORD *)&v32[8];
  if (&v32[24] != *(_BYTE **)&v32[8] && *(_QWORD *)&v32[8])
  {
    *(_QWORD *)&v32[8] = 0;
    *(_DWORD *)&v32[16] = 0;
    WTF::fastFree(v29, v22, v23, v24, v25, v26, v27, v28);
  }
  if (v31 != (_BYTE *)v30)
  {
    if (v30)
      WTF::fastFree((unint64_t)v30, v22, v23, v24, v25, v26, v27, v28);
  }
}

void JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, _OWORD *a5, int a6, int a7, int a8)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  WTF *v30;
  _OWORD v31[17];

  v14 = a3;
  v31[7] = *a5;
  *(_OWORD *)((char *)&v31[7] + 9) = *(_OWORD *)((char *)a5 + 9);
  v30 = (WTF *)WTF::fastMalloc((WTF *)0x80);
  *((_OWORD *)v30 + 1) = v31[8];
  *(_OWORD *)v30 = v31[7];
  *((_QWORD *)v30 + 4) = 0;
  *((_WORD *)v30 + 20) = 513;
  *((_DWORD *)v30 + 11) = 1;
  *((_DWORD *)v30 + 12) = a6;
  *((_DWORD *)v30 + 13) = 0;
  *((_BYTE *)v30 + 56) = 0;
  *((_QWORD *)v30 + 8) = 0;
  *((_WORD *)v30 + 36) = 513;
  *((_DWORD *)v30 + 19) = 1;
  *((_DWORD *)v30 + 20) = a7;
  *((_DWORD *)v30 + 21) = 0;
  *((_BYTE *)v30 + 88) = 0;
  *((_QWORD *)v30 + 12) = 0;
  *((_WORD *)v30 + 52) = 513;
  *((_DWORD *)v30 + 27) = 1;
  *((_DWORD *)v30 + 28) = a8;
  *((_DWORD *)v30 + 29) = 0;
  *((_BYTE *)v30 + 120) = 0;
  *(_QWORD *)&v31[6] = a4;
  DWORD2(v31[6]) = v14;
  *(_QWORD *)&v31[7] = a2;
  *((_QWORD *)&v31[7] + 1) = (char *)&v31[8] + 8;
  LODWORD(v31[8]) = 3;
  v21 = v30;
  if (v30 == (WTF *)v31)
  {
    memcpy((char *)&v31[8] + 8, v31, 0x80uLL);
  }
  else
  {
    v30 = (WTF *)v31;
    *((_QWORD *)&v31[7] + 1) = v21;
    LODWORD(v31[8]) = 4;
  }
  DWORD1(v31[8]) = 4;
  *((_QWORD *)&v31[14] + 1) = *(_QWORD *)&v31[6];
  *(_DWORD *)((char *)&v31[14] + 15) = *(_DWORD *)((char *)&v31[6] + 7);
  JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(a1, (unint64_t)&v31[7], v15, v16, v17, v18, v19, v20);
  v29 = *((_QWORD *)&v31[7] + 1);
  if ((_OWORD *)((char *)&v31[8] + 8) != *((_OWORD **)&v31[7] + 1) && *((_QWORD *)&v31[7] + 1))
  {
    *((_QWORD *)&v31[7] + 1) = 0;
    LODWORD(v31[8]) = 0;
    WTF::fastFree(v29, v22, v23, v24, v25, v26, v27, v28);
  }
  if (v31 != (_OWORD *)v30)
  {
    if (v30)
      WTF::fastFree((unint64_t)v30, v22, v23, v24, v25, v26, v27, v28);
  }
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_L12tryStorePairERNS3_4CodeEPNS3_10BasicBlockEjRSA_E3__1EEvPSA_SL_RKT0_EUlSC_S6_S7_S8_E_EEvSL_SL_SO_EUlRSC_S6_S7_S8_E_EEvSO_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, char a3)
{
  int v3;
  int v4;
  char v5;
  _QWORD *v6;
  BOOL v7;

  v3 = *(char *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 16);
  if ((v3 - 12) < 2 || (v3 == 1 ? (v7 = (a3 & 0xFC) == 4) : (v7 = 0), v7))
  {
    if (v4 <= 0)
      v5 = 31 - v4;
    else
      v5 = v4 + 127;
    if ((v5 & 0x40) != 0)
    {
      __break(1u);
    }
    else
    {
      v6 = *****(_QWORD ******)(result + 16);
      *v6 |= 1 << v5;
    }
  }
  return result;
}

uint64_t _ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS3_3TmpEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_L12tryStorePairERNS3_4CodeEPNS3_10BasicBlockEjRSA_E3__1EEvPSA_SL_RKT0_EUlSC_S6_S7_S8_E_EEvSL_SL_SO_EUlRSC_S6_S7_S8_E0_EEvSO_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  char v4;
  _QWORD *v5;

  if (*(_BYTE *)(a2 + 8) == 1 && (a3 - 8) <= 2)
  {
    v3 = *(_DWORD *)(a2 + 16);
    if (v3 <= 0)
      v4 = 31 - v3;
    else
      v4 = v3 + 127;
    if ((v4 & 0x40) != 0)
    {
      __break(1u);
    }
    else
    {
      v5 = *****(_QWORD ******)(result + 16);
      *v5 |= 1 << v4;
    }
  }
  return result;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Arg,void JSC::B3::Air::Inst::forEachUse<JSC::B3::Air::Arg,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t result, int *a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v7;
  int v8;

  if (a3 >= 2)
  {
    v7 = ***(_QWORD ***)(result + 16);
    if ((a3 > 0xB || ((1 << a3) & 0xBF0) == 0) && (*((char *)a2 + 8) - 6) <= 7)
    {
      v8 = *((unsigned __int8 *)a2 + 8);
      if (v8 == 7)
      {
        result = JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst &)::$_5::operator()(*(_QWORD *)v7, a2[4], *a2, a5);
        if (!(_DWORD)result)
          return result;
        v8 = *((unsigned __int8 *)a2 + 8);
      }
      if (v8 != 6
        || (result = JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst &)::$_5::operator()(*(_QWORD *)v7, a2[4], 0, a5), (_DWORD)result))
      {
        **(_BYTE **)(v7 + 8) = 1;
      }
    }
  }
  return result;
}

BOOL JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst &)::$_5::operator()(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;

  if (*(_DWORD *)(*(_QWORD *)a1 + 12) <= 1u)
  {
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x1980EA744);
  }
  v4 = *(_DWORD *)(**(_QWORD **)a1 + 48);
  if (v4 != a2)
  {
    if (a2 == 32 || a2 == 30)
    {
      if (v4 == 32)
      {
        v6 = **(_QWORD **)(a1 + 8) - *(unsigned int *)(*(_QWORD *)(a1 + 24) + 184);
        goto LABEL_13;
      }
      if (v4 == 30)
      {
        v6 = **(_QWORD **)(a1 + 8);
LABEL_13:
        if (a2 == 32)
          a3 -= *(unsigned int *)(*(_QWORD *)(a1 + 24) + 184);
        if (a4 >= 5)
        {
          __break(0xC471u);
          JUMPOUT(0x1980EA784);
        }
        v5 = **(unsigned __int8 **)(a1 + 16);
        if (v5 >= 5)
        {
          __break(0xC471u);
          JUMPOUT(0x1980EA7A4);
        }
        goto LABEL_17;
      }
    }
    return 1;
  }
  if (a4 >= 5)
    goto LABEL_27;
  v5 = **(unsigned __int8 **)(a1 + 16);
  if (v5 >= 5)
  {
    __break(0xC471u);
    JUMPOUT(0x1980EA764);
  }
  v6 = **(_QWORD **)(a1 + 8);
LABEL_17:
  v8 = qword_199152C08[(char)v5] + v6;
  return qword_199152C08[(char)a4] + a3 > v6 && v8 > a3;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Arg,void JSC::B3::Air::Inst::forEachUse<JSC::B3::Air::Arg,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#2}>(JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t result, int *a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v7;
  int v8;

  v7 = ***(_QWORD ***)(result + 16);
  if ((a3 > 0xB || ((1 << a3) & 0xF3C) == 0) && (*((char *)a2 + 8) - 6) <= 7)
  {
    v8 = *((unsigned __int8 *)a2 + 8);
    if (v8 == 7)
    {
      result = JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst &)::$_5::operator()(*(_QWORD *)v7, a2[4], *a2, a5);
      if (!(_DWORD)result)
        return result;
      v8 = *((unsigned __int8 *)a2 + 8);
    }
    if (v8 != 6
      || (result = JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst &)::$_5::operator()(*(_QWORD *)v7, a2[4], 0, a5), (_DWORD)result))
    {
      **(_BYTE **)(v7 + 8) = 1;
    }
  }
  return result;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Arg,void JSC::B3::Air::Inst::forEachDef<JSC::B3::Air::Arg,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t result, int *a2, char a3, uint64_t a4, unsigned int a5)
{
  uint64_t v7;
  int v8;

  if ((a3 & 0xFC) == 4 && (*((char *)a2 + 8) - 6) <= 7)
  {
    v7 = ***(_QWORD ***)(result + 16);
    v8 = *((unsigned __int8 *)a2 + 8);
    if (v8 == 7)
    {
      result = JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst &)::$_5::operator()(*(_QWORD *)v7, a2[4], *a2, a5);
      if (!(_DWORD)result)
        return result;
      v8 = *((unsigned __int8 *)a2 + 8);
    }
    if (v8 != 6
      || (result = JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst &)::$_5::operator()(*(_QWORD *)v7, a2[4], 0, a5), (_DWORD)result))
    {
      **(_BYTE **)(v7 + 8) = 1;
    }
  }
  return result;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::B3::Air::Arg,void JSC::B3::Air::Inst::forEachDef<JSC::B3::Air::Arg,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#2}>(JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst&)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t result, int *a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v7;
  int v8;

  if ((a3 - 8) <= 2 && (*((char *)a2 + 8) - 6) <= 7)
  {
    v7 = ***(_QWORD ***)(result + 16);
    v8 = *((unsigned __int8 *)a2 + 8);
    if (v8 == 7)
    {
      result = JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst &)::$_5::operator()(*(_QWORD *)v7, a2[4], *a2, a5);
      if (!(_DWORD)result)
        return result;
      v8 = *((unsigned __int8 *)a2 + 8);
    }
    if (v8 != 6
      || (result = JSC::B3::Air::tryStorePair(JSC::B3::Air::Code &,JSC::B3::Air::BasicBlock *,unsigned int,JSC::B3::Air::Inst &)::$_5::operator()(*(_QWORD *)v7, a2[4], 0, a5), (_DWORD)result))
    {
      **(_BYTE **)(v7 + 8) = 1;
    }
  }
  return result;
}

_QWORD **_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS1_3RegEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_19logRegisterPressureERNS3_4CodeEE3__1EEvPSA_SI_RKT0_EUlSC_S6_S7_S8_E_EEvSI_SI_SL_EUlRSC_S6_S7_S8_E_EEvSL_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unsigned int a5)
{
  return JSC::B3::Air::Inst::forEach<JSC::Reg,void JSC::B3::Air::Inst::forEachDef<JSC::Reg,void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::Reg,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::Reg,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::Reg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(***(_QWORD *****)(a1 + 16), a2, a3, a5);
}

_QWORD **JSC::B3::Air::Inst::forEach<JSC::Reg,void JSC::B3::Air::Inst::forEachDef<JSC::Reg,void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::Reg,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::Reg,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::Reg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(_QWORD **result, uint64_t a2, char a3, unsigned int a4)
{
  int v4;
  char v6;
  int v7;
  int v8;
  char v10;
  unsigned int v11;
  _QWORD *v12;
  int v13;
  char v15;
  unsigned int v16;
  _QWORD *v17;
  int v18;
  char v20;
  int v21;
  int v22;
  int v23;
  char v24;
  int v25;
  int v26;

  switch(*(_BYTE *)(a2 + 8))
  {
    case 1:
      v13 = *(_DWORD *)(a2 + 16);
      if (v13 > 0xFFFFFFDF || (v13 - 1) <= 0x1F)
      {
        v15 = v13 + 127;
        if (v13 <= 0)
          v15 = 31 - v13;
        v16 = v15 & 0x7F;
        if ((a3 & 0xFC) == 4)
        {
          if (v16 >= 0x40)
            goto LABEL_64;
          v17 = (_QWORD *)**result;
          *v17 |= 1 << v16;
          if (a4 >= 4 && (v15 & 0x60) == 0x20)
            v17[1] |= 1 << v16;
        }
        else if (v16 == 127)
        {
          goto LABEL_65;
        }
        if ((v15 & 0x60) == 0)
        {
          v7 = v16 + 1;
          goto LABEL_63;
        }
        LOBYTE(v7) = 31 - v16;
        goto LABEL_62;
      }
      break;
    case 6:
    case 7:
    case 8:
      v4 = *(_DWORD *)(a2 + 16);
      if (v4 > 0xFFFFFFDF || (v4 - 1) <= 0x1F)
      {
        v6 = v4 + 127;
        if (v4 <= 0)
          v6 = 31 - v4;
        v7 = v6 & 0x7F;
        if (v7 == 127)
          goto LABEL_65;
        if ((v6 & 0x60) != 0)
        {
          LOBYTE(v7) = 31 - v7;
LABEL_62:
          v7 = (char)v7;
        }
        else
        {
          ++v7;
        }
        goto LABEL_63;
      }
      break;
    case 0xB:
      v18 = *(_DWORD *)(a2 + 16);
      if (v18 > 0xFFFFFFDF || (v18 - 1) <= 0x1F)
      {
        if (v18 <= 0)
          v20 = 31 - v18;
        else
          v20 = v18 + 127;
        v21 = v20 & 0x7F;
        if (v21 == 127)
        {
          v22 = 0;
        }
        else if ((v20 & 0x60) != 0)
        {
          v22 = (char)(31 - v21);
        }
        else
        {
          v22 = v21 + 1;
        }
        *(_DWORD *)(a2 + 16) = v22;
      }
      v23 = *(_DWORD *)(a2 + 20);
      if (v23 > 0xFFFFFFDF || (v23 - 1) <= 0x1F)
      {
        v24 = v23 + 127;
        if (v23 <= 0)
          v24 = 31 - v23;
        v25 = v24 & 0x7F;
        if (v25 == 127)
        {
          v26 = 0;
        }
        else if ((v24 & 0x60) != 0)
        {
          v26 = (char)(31 - v25);
        }
        else
        {
          v26 = v25 + 1;
        }
        *(_DWORD *)(a2 + 20) = v26;
      }
      break;
    case 0xC:
    case 0xD:
      v8 = *(_DWORD *)(a2 + 16);
      if (v8 > 0xFFFFFFDF || (v8 - 1) <= 0x1F)
      {
        v10 = v8 + 127;
        if (v8 <= 0)
          v10 = 31 - v8;
        v11 = v10 & 0x7F;
        if (v11 >= 0x40)
        {
LABEL_64:
          __break(1u);
LABEL_65:
          v7 = 0;
        }
        else
        {
          v12 = (_QWORD *)**result;
          *v12 |= 1 << v11;
          if (a3 == 11 && a4 >= 4 && (v10 & 0x60) == 0x20)
            v12[1] |= 1 << v11;
          v7 = (char)(31 - v11);
          if ((v10 & 0x60) == 0)
            v7 = v11 + 1;
        }
LABEL_63:
        *(_DWORD *)(a2 + 16) = v7;
      }
      break;
    default:
      return result;
  }
  return result;
}

_QWORD **_ZN3WTF22ScopedLambdaRefFunctorIFvRN3JSC2B33Air3ArgENS4_4RoleENS2_4BankENS1_5WidthEEZNS3_4Inst7forEachINS1_3RegEZNSA_10forEachDefISC_ZNSA_32forEachDefWithExtraClobberedRegsISC_ZNS3_19logRegisterPressureERNS3_4CodeEE3__1EEvPSA_SI_RKT0_EUlSC_S6_S7_S8_E_EEvSI_SI_SL_EUlRSC_S6_S7_S8_E0_EEvSL_EUlS5_S6_S7_S8_E_E12implFunctionEPvS5_S6_S7_S8_(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  return JSC::B3::Air::Inst::forEach<JSC::Reg,void JSC::B3::Air::Inst::forEachDef<JSC::Reg,void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::Reg,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::Reg,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::Reg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#2}>(JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(***(_QWORD *****)(a1 + 16), a2, a3, a5);
}

_QWORD **JSC::B3::Air::Inst::forEach<JSC::Reg,void JSC::B3::Air::Inst::forEachDef<JSC::Reg,void JSC::B3::Air::Inst::forEachDefWithExtraClobberedRegs<JSC::Reg,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::Reg,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(JSC::B3::Air::Inst*,JSC::B3::Air::Inst*,JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::Reg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#2}>(JSC::B3::Air::logRegisterPressure(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::B3::Air::Arg&,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(_QWORD **result, uint64_t a2, int a3, unsigned int a4)
{
  int v4;
  char v6;
  unsigned int v7;
  int v8;
  char v10;
  _QWORD *v11;
  int v12;
  char v14;
  int v15;
  int v16;
  int v17;
  char v19;
  int v20;
  int v21;

  switch(*(_BYTE *)(a2 + 8))
  {
    case 1:
      v8 = *(_DWORD *)(a2 + 16);
      if (v8 > 0xFFFFFFDF || (v8 - 1) <= 0x1F)
      {
        v10 = v8 + 127;
        if (v8 <= 0)
          v10 = 31 - v8;
        v7 = v10 & 0x7F;
        if ((a3 - 8) > 2)
        {
          if (v7 == 127)
            goto LABEL_54;
        }
        else
        {
          if (v7 >= 0x40)
          {
            __break(1u);
            goto LABEL_54;
          }
          v11 = (_QWORD *)**result;
          *v11 |= 1 << v7;
          if (a4 >= 4 && (v10 & 0x60) == 0x20)
            v11[1] |= 1 << v7;
        }
        if ((v10 & 0x60) == 0)
        {
          ++v7;
          goto LABEL_11;
        }
        LOBYTE(v7) = 31 - v7;
        goto LABEL_47;
      }
      break;
    case 6:
    case 7:
    case 8:
    case 0xC:
    case 0xD:
      v4 = *(_DWORD *)(a2 + 16);
      if (v4 > 0xFFFFFFDF || (v4 - 1) <= 0x1F)
      {
        v6 = v4 + 127;
        if (v4 <= 0)
          v6 = 31 - v4;
        v7 = v6 & 0x7F;
        if (v7 == 127)
        {
LABEL_54:
          v7 = 0;
        }
        else if ((v6 & 0x60) != 0)
        {
          LOBYTE(v7) = 31 - v7;
LABEL_47:
          v7 = (char)v7;
        }
        else
        {
          ++v7;
        }
LABEL_11:
        *(_DWORD *)(a2 + 16) = v7;
      }
      break;
    case 0xB:
      v12 = *(_DWORD *)(a2 + 16);
      if (v12 > 0xFFFFFFDF || (v12 - 1) <= 0x1F)
      {
        if (v12 <= 0)
          v14 = 31 - v12;
        else
          v14 = v12 + 127;
        v15 = v14 & 0x7F;
        if (v15 == 127)
        {
          v16 = 0;
        }
        else if ((v14 & 0x60) != 0)
        {
          v16 = (char)(31 - v15);
        }
        else
        {
          v16 = v15 + 1;
        }
        *(_DWORD *)(a2 + 16) = v16;
      }
      v17 = *(_DWORD *)(a2 + 20);
      if (v17 > 0xFFFFFFDF || (v17 - 1) <= 0x1F)
      {
        v19 = v17 + 127;
        if (v17 <= 0)
          v19 = 31 - v17;
        v20 = v19 & 0x7F;
        if (v20 == 127)
        {
          v21 = 0;
        }
        else if ((v19 & 0x60) != 0)
        {
          v21 = (char)(31 - v20);
        }
        else
        {
          v21 = v20 + 1;
        }
        *(_DWORD *)(a2 + 20) = v21;
      }
      break;
    default:
      return result;
  }
  return result;
}

unint64_t WTF::Vector<WTF::CString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WTF::CString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WTF::CString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::CString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _DWORD *v20;
  _DWORD *v21;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 29))
  {
    v6 = result;
    v7 = *(_QWORD *)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v17 = (_QWORD *)v9;
      v18 = 8 * v8;
      v19 = (_QWORD *)v7;
      do
      {
        v20 = (_DWORD *)*v19;
        *v19 = 0;
        *v17 = v20;
        v21 = (_DWORD *)*v19;
        *v19 = 0;
        if (v21)
        {
          if (*v21 == 1)
            WTF::fastFree((unint64_t)v21, v10, v11, v12, v13, v14, v15, v16);
          else
            --*v21;
        }
        ++v17;
        ++v19;
        v18 -= 8;
      }
      while (v18);
    }
    if (v7)
    {
      if (*(_QWORD *)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void WTF::HashTable<JSC::B3::Air::Inst *,WTF::KeyValuePair<JSC::B3::Air::Inst *,JSC::RegisterSetBuilder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Air::Inst *,JSC::RegisterSetBuilder>>,WTF::DefaultHash<JSC::B3::Air::Inst *>,WTF::HashMap<JSC::B3::Air::Inst *,JSC::RegisterSetBuilder,WTF::DefaultHash<JSC::B3::Air::Inst *>,WTF::HashTraits<JSC::B3::Air::Inst *>,WTF::HashTraits<JSC::RegisterSetBuilder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Air::Inst *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  __int128 v27;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v15 = v7;
  v16 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  *a1 = v16;
  *(_DWORD *)(v15 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v18 = (_QWORD *)(v4 + 24 * i);
      if ((unint64_t)(*v18 + 1) >= 2)
      {
        v19 = *a1;
        if (*a1)
          v20 = *(_DWORD *)(v19 - 8);
        else
          v20 = 0;
        v21 = (~(*v18 << 32) + *v18) ^ ((~(*v18 << 32) + *v18) >> 22);
        v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((unint64_t)(v21 + ~(v21 << 13)) >> 8));
        v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
        v24 = v20 & ((v23 >> 31) ^ v23);
        v25 = 1;
        do
        {
          v26 = v19 + 24 * v24;
          v8 = *(void **)v26;
          v24 = (v24 + v25++) & v20;
        }
        while (*(_QWORD *)v26);
        v27 = *(_OWORD *)v18;
        *(_QWORD *)(v26 + 16) = v18[2];
        *(_OWORD *)v26 = v27;
      }
    }
    goto LABEL_14;
  }
  if (v4)
LABEL_14:
    WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
}

_DWORD *WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *result;

  result = (_DWORD *)WTF::Vector<JSC::B3::Air::Tmp,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

__n128 WTF::Vector<JSC::B3::Air::Arg,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Arg&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  _OWORD *v4;
  __n128 result;
  __int128 v6;

  v3 = WTF::Vector<JSC::B3::Air::Arg,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (_OWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
  result = *(__n128 *)v3;
  v6 = *(_OWORD *)(v3 + 16);
  *v4 = *(_OWORD *)v3;
  v4[1] = v6;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::B3::Air::Arg,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<JSC::B3::Air::Arg,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<JSC::B3::Air::Arg,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

__n128 WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

unint64_t WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(_QWORD *)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v14 = 16 * v5;
        v15 = (__int128 *)v4;
        do
        {
          v16 = *v15++;
          *v6++ = v16;
          v14 -= 16;
        }
        while (v14);
      }
      if (v4)
      {
        if (*(_QWORD *)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

void WTF::Vector<JSC::B3::Air::BasicBlock *,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::fill(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v11 = *(unsigned int *)(a1 + 12);
  if (v11 > a3)
  {
    LODWORD(v11) = a3;
  }
  else if (*(unsigned int *)(a1 + 8) < a3)
  {
    WTF::Vector<unsigned short,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::clear(a1, a2, a3, a4, a5, a6, a7, a8);
    WTF::Vector<JSC::B3::Air::BasicBlock *,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a3);
    LODWORD(v11) = *(_DWORD *)(a1 + 12);
  }
  v12 = v11;
  if ((_DWORD)v11)
  {
    v13 = *(_QWORD **)a1;
    v14 = v12 + 1;
    do
    {
      *v13++ = *a2;
      --v14;
    }
    while (v14 > 1);
  }
  if (v12 != a3)
  {
    v15 = (_QWORD *)(*(_QWORD *)a1 + 8 * v12);
    v16 = 8 * a3 - 8 * v12;
    do
    {
      *v15++ = *a2;
      v16 -= 8;
    }
    while (v16);
  }
  *(_DWORD *)(a1 + 12) = a3;
}

void WTF::Vector<JSC::B3::Air::BasicBlock *,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  const void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(const void **)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      memcpy(v6, v4, 8 * v5);
      if (v4)
      {
        if (*(const void **)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

double WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::lowerStackArgs(JSC::B3::Air::Code &)::$_1>::implFunction(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  _DWORD *v12;
  int v13;
  double result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  WTF *v34;
  _BYTE v35[25];
  _QWORD v36[5];
  char v37;
  WTF *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[12];
  _BYTE v45[40];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD v49[3];

  v49[2] = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t **)(a1 + 16);
  v37 = a5;
  v8 = *v6;
  v7 = v6[1];
  v36[0] = *v6;
  v36[1] = v7;
  v36[2] = a2;
  v36[3] = &v37;
  v36[4] = v6[2];
  v9 = *((char *)a2 + 8);
  if (v9 != 10)
  {
    if (v9 != 9)
      return result;
    v10 = *a2;
    if (*(_WORD *)(v7 + 120) == 90 && *(_BYTE *)(v10 + 4) == 1)
      *(_BYTE *)(v7 + 122) |= 2u;
    if (a3 > 9 || ((1 << a3) & 0x2A0) == 0 || *(_BYTE *)(v10 + 4) != 1)
      goto LABEL_8;
    if (a5 < 5)
    {
      if (*(_DWORD *)v10 <= dword_199152C30[(char)a5])
      {
LABEL_8:
        v11 = *(_DWORD *)v6[3];
        if (*((_BYTE *)a2 + 8) == 9)
          v12 = (_DWORD *)a2 + 3;
        else
          v12 = a2;
        v13 = *v12 + *(_DWORD *)(v10 + 16);
        goto LABEL_13;
      }
      if (*(_DWORD *)v10 == 8)
      {
        if (a5 != 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1980EB7F8);
        }
        v15 = v6[2];
        v16 = (*(_DWORD *)v6[3] + 1);
        v17 = v6[1];
        if (*((_BYTE *)a2 + 8) == 9)
          v18 = (_DWORD *)a2 + 3;
        else
          v18 = a2;
        JSC::B3::Air::lowerStackArgs(JSC::B3::Air::Code &)::$_1::operator() const(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)::{lambda(unsigned int,int)#1}::operator()((uint64_t)v35, (uint64_t)v36, *(_DWORD *)v6[3] + 1, *v18 + *(_DWORD *)(v10 + 16) + 4);
        *(_OWORD *)&v45[16] = *(_OWORD *)&v35[9];
        *(_OWORD *)&v45[7] = *(_OWORD *)v35;
        *(_QWORD *)&v40 = 0;
        WORD4(v40) = 532;
        HIDWORD(v40) = 1;
        *(_QWORD *)&v41 = 0;
        BYTE8(v41) = 0;
        v42 = *(_OWORD *)v35;
        v43 = *(_OWORD *)&v45[23];
        *(_OWORD *)&v45[24] = v40;
        v46 = v41;
        v47 = *(_OWORD *)v35;
        v19 = *(_QWORD *)(v17 + 112);
        v38 = (WTF *)&v40;
        *(_QWORD *)v44 = v19;
        *(_DWORD *)&v44[8] = 94;
        *(_QWORD *)v45 = v16;
        *(_QWORD *)&v45[8] = &v45[24];
        v48 = v43;
        v39 = 3;
        *(_QWORD *)&v45[16] = 0x200000003;
        v49[0] = v19;
        *(_DWORD *)((char *)v49 + 7) = *(_DWORD *)&v44[7];
        JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v15, (unint64_t)v45, v20, v21, v22, v23, v24, v25);
        v33 = *(_QWORD *)&v45[8];
        if (&v45[24] != *(_BYTE **)&v45[8] && *(_QWORD *)&v45[8])
        {
          *(_QWORD *)&v45[8] = 0;
          *(_DWORD *)&v45[16] = 0;
          WTF::fastFree(v33, v26, v27, v28, v29, v30, v31, v32);
        }
        v34 = v38;
        if (&v40 != (__int128 *)v38 && v38)
        {
          v38 = 0;
          LODWORD(v39) = 0;
          WTF::fastFree((unint64_t)v34, v26, v27, v28, v29, v30, v31, v32);
        }
        goto LABEL_8;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x1980EB7D8);
  }
  v11 = *(_DWORD *)v6[3];
  v13 = *(_DWORD *)a2 - *(_DWORD *)(v8 + 184);
LABEL_13:
  JSC::B3::Air::lowerStackArgs(JSC::B3::Air::Code &)::$_1::operator() const(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)::{lambda(unsigned int,int)#1}::operator()((uint64_t)v45, (uint64_t)v36, v11, v13);
  *(_OWORD *)a2 = *(_OWORD *)v45;
  result = *(double *)&v45[9];
  *(_OWORD *)((char *)a2 + 9) = *(_OWORD *)&v45[9];
  return result;
}

void JSC::B3::Air::lowerStackArgs(JSC::B3::Air::Code &)::$_1::operator() const(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)::{lambda(unsigned int,int)#1}::operator()(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  _QWORD **v5;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  __int128 v31;
  _BYTE v32[32];
  WTF *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[32];
  _BYTE v38[12];
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  _OWORD v42[6];
  _QWORD v43[2];

  v5 = *(_QWORD ***)(a2 + 8);
  if (*((_DWORD *)v5 + 3))
  {
    v9 = *(_DWORD *)(*(_QWORD *)a2 + 184);
    v10 = *((_WORD *)v5 + 60) != 448 || ((*(_QWORD *)(a2 + 16) - (_QWORD)*v5) >> 5) == 0;
    if (!v10 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)**v5 + 40))(**v5))
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 24) = 0;
      *(_WORD *)(a1 + 8) = 520;
      *(_QWORD *)(a1 + 12) = 0x1E00000001;
      *(_QWORD *)a1 = a4;
      return;
    }
    *(_DWORD *)&v32[20] = 0;
    v32[24] = 0;
    *(_WORD *)&v32[8] = 519;
    *(_QWORD *)&v32[12] = 0x1E00000001;
    *(_QWORD *)v32 = a4;
    if (!JSC::B3::Air::Arg::isValidForm((unsigned int *)v32, 90, **(unsigned __int8 **)(a2 + 24) | 0x100u))
    {
      v11 = v9 + a4;
      *(_QWORD *)v32 = (int)v11;
      *(_WORD *)&v32[8] = 519;
      *(_QWORD *)&v32[12] = 0x2000000001;
      *(_DWORD *)&v32[20] = 0;
      v32[24] = 0;
      if (!JSC::B3::Air::Arg::isValidForm((unsigned int *)v32, 90, **(unsigned __int8 **)(a2 + 24) | 0x100u))
      {
        v18 = *(_QWORD *)(a2 + 8);
        if (*(_WORD *)(v18 + 120) == 448)
        {
          *(_QWORD *)(a1 + 16) = 0;
          *(_BYTE *)(a1 + 24) = 0;
          *(_WORD *)(a1 + 8) = 520;
          *(_QWORD *)(a1 + 12) = 0x1E00000001;
          *(_QWORD *)a1 = a4;
          return;
        }
        if ((unint64_t)((int)v11 + 4095) < 0x1FFF)
        {
          v19 = 2;
        }
        else if ((v11 & 0xFFF) != 0
               || (v19 = 2, HIBYTE(v11)) && (unint64_t)(((uint64_t)(int)v11 >> 12) + 4095) >= 0x1000)
        {
          v19 = 3;
        }
        BYTE8(v36) = 0;
        *(_QWORD *)&v36 = 0;
        *(_QWORD *)&v35 = (int)v11;
        BYTE8(v35) = v19;
        BYTE9(v35) = 2;
        HIDWORD(v35) = 1;
        *(_QWORD *)v37 = 0;
        *(_WORD *)&v37[8] = 513;
        *(_QWORD *)&v37[12] = 0x1F00000001;
        *(_DWORD *)&v37[20] = 0;
        v37[24] = 0;
        v42[0] = v35;
        v42[1] = v36;
        v42[2] = *(_OWORD *)v37;
        v20 = *(_QWORD *)(a2 + 32);
        v21 = *(_QWORD *)(v18 + 112);
        v33 = (WTF *)&v35;
        *(_QWORD *)v38 = v21;
        *(_DWORD *)&v38[8] = 90;
        v39 = a3;
        v40 = (WTF *)v42;
        v42[3] = *(_OWORD *)&v37[16];
        v34 = 3;
        v41 = 0x200000003;
        v43[0] = v21;
        *(_DWORD *)((char *)v43 + 7) = *(_DWORD *)&v38[7];
        JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(v20, (unint64_t)&v39, v12, v13, v14, v15, v16, v17);
        v29 = v40;
        if (v42 != (_OWORD *)v40 && v40)
        {
          v40 = 0;
          LODWORD(v41) = 0;
          WTF::fastFree((unint64_t)v29, v22, v23, v24, v25, v26, v27, v28);
        }
        v30 = v33;
        if (&v35 != (__int128 *)v33)
        {
          if (v33)
          {
            v33 = 0;
            LODWORD(v34) = 0;
            WTF::fastFree((unint64_t)v30, v22, v23, v24, v25, v26, v27, v28);
          }
        }
        JSC::B3::Air::InsertionSet::insert<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(*(_QWORD *)(a2 + 32), a3, 6, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 112), 32, 31, v27, v28);
        *(_QWORD *)v32 = 0;
        *(_WORD *)&v32[8] = 519;
        *(_QWORD *)&v32[12] = 0x1F00000001;
        *(_DWORD *)&v32[20] = 0;
        v32[24] = 0;
      }
    }
    v31 = *(_OWORD *)&v32[16];
    *(_OWORD *)a1 = *(_OWORD *)v32;
    *(_OWORD *)(a1 + 16) = v31;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::B3::Air::padInterference(JSC::B3::Air *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::B3::Air *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  unint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  __int16 v18;
  JSC::B3::Air::Kind *v19;
  int v20;
  unsigned int v21;
  char v22;
  _QWORD **v23;
  __int16 v24;
  JSC::B3::Air::Kind *v25;
  int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned __int8 *v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  BOOL v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  unsigned __int8 *v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  WTF *v45;
  char *v46;
  uint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  WTF *v54;
  uint64_t *v55;
  WTF *v56;
  WTF *v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _OWORD *v76;
  uint64_t v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  WTF *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _OWORD *v92;
  __int128 *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  int v99;
  int v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  WTF *v111;
  _QWORD *v113;
  unint64_t v114;
  char v115;
  unint64_t v116;
  uint64_t *v117;
  _QWORD *v118;
  WTF *v119;
  uint64_t v120;
  JSC::B3::Air *v121;
  uint64_t *v122;
  WTF *v123;
  uint64_t *v124;
  WTF *v125;
  JSC::B3::Air *v126;
  WTF *v127;
  uint64_t v128;
  _BYTE v129[1088];
  WTF *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unint64_t v135;
  WTF *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char v141;
  void *v142;
  void **v143;

  v126 = this;
  v127 = (WTF *)v129;
  v128 = 8;
  v8 = *((unsigned int *)this + 27);
  if (!(_DWORD)v8)
    return;
  v9 = this;
  v10 = 0;
  while (!*(_QWORD *)(*((_QWORD *)this + 12) + 8 * v10))
  {
    if (v8 == ++v10)
      return;
  }
  if ((_DWORD)v8 == (_DWORD)v10)
    return;
  v119 = (WTF *)v129;
  v124 = &v133;
  v125 = (WTF *)&v132;
  v122 = &v139;
  v123 = (WTF *)&v138;
  LODWORD(v11) = v8;
  v120 = v8;
  v121 = this;
  do
  {
    if (v11 <= v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1980EC514);
    }
    v12 = *(_QWORD *)(*((_QWORD *)v9 + 12) + 8 * v10);
    v13 = *(unsigned int *)(v12 + 20);
    if (v13 < 2)
    {
      v44 = 0;
      goto LABEL_51;
    }
    for (i = 1; i < v13; ++i)
    {
      v15 = i - 1;
      if (i - 1 >= v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1980EC504);
      }
      v16 = *(_QWORD *)(v12 + 8);
      if (v16)
      {
        v17 = (_QWORD **)(v16 + (v15 << 7));
        v19 = (JSC::B3::Air::Kind *)(v17 + 15);
        v18 = *((_WORD *)v17 + 60);
        if (v18 == 448)
        {
          if (!*((_DWORD *)v17 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1980EC524);
          }
          v42 = (*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)**v17 + 80))(**v17, v16 + (v15 << 7));
          if (v42 | a2)
            goto LABEL_18;
          v18 = *(_WORD *)v19;
        }
        v141 = 0;
        v140 = &v141;
        v20 = v18;
        v21 = v18 - 446;
        if (v21 > 5)
        {
          v29 = *((unsigned int *)v17 + 3);
          if (!(_DWORD)v29)
            goto LABEL_25;
          v22 = 0;
          v30 = (unsigned __int8 *)&JSC::B3::Air::g_formTable + 21 * v20 + ((unint64_t)((v29 - 1) * v29) >> 1);
          do
          {
            v32 = *v30++;
            v31 = v32;
            if ((v32 >> 5) - 1 >= 5)
            {
              __break(0xC471u);
              JUMPOUT(0x1980EC40CLL);
            }
            v33 = v31 & 0xF;
            v34 = v33 >= 2 && ((v35 = v33 > 0xB, v36 = (1 << v33) & 0xBF0, !v35) ? (v37 = v36 == 0) : (v37 = 1), v37)
               || (v31 & 0xC) == 4;
            v22 |= v34;
            v141 = v22;
            --v29;
          }
          while (v29);
        }
        else
        {
          v135 = (unint64_t)WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::Inst::hasLateUseOrDef(void)::$_0>::implFunction;
          v136 = (WTF *)&v135;
          v137 = (uint64_t)&v140;
          v142 = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::Inst::hasLateUseOrDef(void)::$_0>::implFunction;
          v143 = (void **)&v135;
          if (v20 == 448)
          {
            v130 = (WTF *)WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::Inst::hasLateUseOrDef(void)::$_0>::implFunction;
            v131 = (uint64_t)&v135;
            if (!*((_DWORD *)v17 + 3))
            {
              __break(0xC471u);
              JUMPOUT(0x1980EC50CLL);
            }
            v141 = 0;
            (*(void (**)(_QWORD, _QWORD **, WTF **))(*(_QWORD *)**v17 + 16))(**v17, v17, &v130);
          }
          else
          {
            switch(v21)
            {
              case 0u:
                break;
              case 1u:
                JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v17, (uint64_t)&v142);
                break;
              case 3u:
                JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v17, (uint64_t)&v142);
                break;
              case 4u:
                v130 = (WTF *)&v142;
                JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>((uint64_t)v17, (uint64_t)&v130);
                break;
              case 5u:
                JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>((uint64_t)v17, (uint64_t)&v142);
                break;
              default:
                WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", v19, "\n");
                __break(0xC471u);
                JUMPOUT(0x1980EC494);
            }
          }
          v22 = v141;
        }
        if (!v22)
          goto LABEL_25;
LABEL_18:
        v23 = (_QWORD **)(v16 + (i << 7));
        v25 = (JSC::B3::Air::Kind *)(v23 + 15);
        v24 = *((_WORD *)v23 + 60);
        if (v24 == 448)
        {
          if (!*((_DWORD *)v23 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1980EC52CLL);
          }
          v43 = (*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)**v23 + 72))(**v23, v16 + (i << 7));
          if (v43 | a2)
          {
LABEL_65:
            v52 = *(_QWORD *)(v16 + (i << 7) + 112);
            v130 = v125;
            v133 = v52;
            v134 = 0;
            v135 = i;
            v54 = v123;
            v53 = v124;
            v136 = v123;
            v131 = 3;
            v137 = 3;
            v55 = v122;
            *v122 = *v124;
            *(_DWORD *)((char *)v55 + 7) = *(_DWORD *)((char *)v53 + 7);
            JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>((uint64_t)&v126, (unint64_t)&v135, a3, a4, a5, a6, a7, a8);
            v56 = v136;
            if (v54 != v136 && v136)
            {
              v136 = 0;
              LODWORD(v137) = 0;
              WTF::fastFree((unint64_t)v56, (void *)a2, a3, a4, a5, a6, a7, a8);
            }
            v57 = v130;
            if (v125 != v130 && v130)
            {
              v130 = 0;
              LODWORD(v131) = 0;
              WTF::fastFree((unint64_t)v57, (void *)a2, a3, a4, a5, a6, a7, a8);
            }
            goto LABEL_25;
          }
          v24 = *(_WORD *)v25;
        }
        v141 = 0;
        v140 = &v141;
        v26 = v24;
        v27 = v24 - 446;
        if (v27 > 5)
        {
          v38 = *((unsigned int *)v23 + 3);
          if (!(_DWORD)v38)
            goto LABEL_25;
          v28 = 0;
          v39 = (unsigned __int8 *)&JSC::B3::Air::g_formTable + 21 * v26 + ((unint64_t)((v38 - 1) * v38) >> 1);
          do
          {
            v41 = *v39++;
            v40 = v41;
            if ((v41 >> 5) - 1 >= 5)
            {
              __break(0xC471u);
              JUMPOUT(0x1980EC42CLL);
            }
            v28 |= (v40 & 0xFu) - 8 < 3;
            v141 = v28;
            --v38;
          }
          while (v38);
        }
        else
        {
          v135 = (unint64_t)WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::Inst::hasEarlyDef(void)::$_0>::implFunction;
          v136 = (WTF *)&v135;
          v137 = (uint64_t)&v140;
          v142 = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::Inst::hasEarlyDef(void)::$_0>::implFunction;
          v143 = (void **)&v135;
          if (v26 == 448)
          {
            v130 = (WTF *)WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::Inst::hasEarlyDef(void)::$_0>::implFunction;
            v131 = (uint64_t)&v135;
            if (!*((_DWORD *)v23 + 3))
            {
              __break(0xC471u);
              JUMPOUT(0x1980EC51CLL);
            }
            v141 = 0;
            (*(void (**)(_QWORD, unint64_t, WTF **))(*(_QWORD *)**v23 + 16))(**v23, v16 + (i << 7), &v130);
          }
          else
          {
            switch(v27)
            {
              case 0u:
                break;
              case 1u:
                JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(v16 + (i << 7), (uint64_t)&v142);
                break;
              case 3u:
                JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(v16 + (i << 7), (uint64_t)&v142);
                break;
              case 4u:
                v130 = (WTF *)&v142;
                JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(v16 + (i << 7), (uint64_t)&v130);
                break;
              case 5u:
                JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(v16 + (i << 7), (uint64_t)&v142);
                break;
              default:
                WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", v25, "\n");
                __break(0xC471u);
                JUMPOUT(0x1980EC4FCLL);
            }
          }
          v28 = v141;
        }
        if (!v28)
          goto LABEL_25;
        goto LABEL_65;
      }
LABEL_25:
      v13 = *(unsigned int *)(v12 + 20);
    }
    v44 = HIDWORD(v128);
LABEL_51:
    v45 = v127;
    v46 = (char *)v127 + 136 * v44;
    v47 = (uint64_t *)((char *)v127 + 136);
    do
    {
      v48 = 0xF0F0F0F0F0F0F0F1 * ((v46 - (char *)v45) >> 3);
      if (v48 < 2)
        break;
      v50 = 0;
      while (2)
      {
        v51 = 136 * v48;
        while (1)
        {
          --v48;
          a2 = (uint64_t)v45 + v51 - 272;
          if (*(_QWORD *)((char *)v45 + v51 - 136) < *(_QWORD *)a2)
            break;
          v51 -= 136;
          if (v48 <= 1)
          {
            if ((v50 & 1) == 0)
              goto LABEL_53;
            goto LABEL_139;
          }
        }
        std::swap[abi:sn180100]<WTF::Insertion<JSC::B3::Air::Inst>>((uint64_t *)((char *)v45 + v51 - 136), (uint64_t *)a2, a3, a4, a5, a6, a7, a8);
        v50 = 1;
        if (v48 > 1)
          continue;
        break;
      }
LABEL_139:
      v45 = (WTF *)((char *)v45 + 136);
      v114 = 0xF0F0F0F0F0F0F0F1 * ((v46 - (char *)v45) >> 3);
      if (v114 < 2)
        break;
      v115 = 0;
      v116 = v114 - 1;
      v117 = v47;
      do
      {
        if (v117[17] < (unint64_t)*v117)
        {
          std::swap[abi:sn180100]<WTF::Insertion<JSC::B3::Air::Inst>>(v117 + 17, v117, a3, a4, a5, a6, a7, a8);
          v115 = 1;
        }
        v117 += 17;
        --v116;
      }
      while (v116);
      v46 -= 136;
      v47 += 17;
    }
    while ((v115 & 1) != 0);
LABEL_53:
    v49 = HIDWORD(v128);
    if (HIDWORD(v128))
    {
      v58 = (_QWORD *)(v12 + 8);
      v59 = *(unsigned int *)(v12 + 16);
      v60 = *(unsigned int *)(v12 + 20) + (unint64_t)HIDWORD(v128);
      if (v60 > v59)
      {
        v108 = v59 + (v59 >> 2);
        if (v108 >= 0x10)
          v109 = v108 + 1;
        else
          v109 = 16;
        if (v109 <= v60)
          v110 = *(unsigned int *)(v12 + 20) + (unint64_t)HIDWORD(v128);
        else
          v110 = v109;
        WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v12 + 8, v110);
        v58 = (_QWORD *)(v12 + 8);
      }
      v61 = *v58;
      if (*v58)
      {
        v62 = *(unsigned int *)(v12 + 20);
        if (v60 != v62)
        {
          v63 = v62 << 7;
          v64 = v60 << 7;
          do
          {
            v65 = v61 + v63;
            *(_QWORD *)v65 = v61 + v63 + 16;
            *(_QWORD *)(v65 + 8) = 3;
            *(_QWORD *)(v65 + 112) = 0;
            *(_WORD *)(v65 + 120) = 0;
            *(_BYTE *)(v65 + 122) = *(_BYTE *)(v61 + v63 + 122) & 0xFC;
            v64 -= 128;
            v61 += 128;
          }
          while (v63 != v64);
        }
      }
      *(_DWORD *)(v12 + 20) = v60;
      v66 = v60;
      do
      {
        v67 = v49 - 1;
        v68 = HIDWORD(v128);
        if (v49 - 1 >= HIDWORD(v128))
        {
          __break(0xC471u);
          JUMPOUT(0x1980EC544);
        }
        v69 = *((_QWORD *)v127 + 17 * v67) + v67;
        v70 = v66 - 1;
        if (v66 - 1 > v69)
        {
          do
          {
            v71 = v70 - v49;
            v72 = *(unsigned int *)(v12 + 20);
            if (v70 - v49 >= v72)
            {
              __break(0xC471u);
              JUMPOUT(0x1980EC534);
            }
            if (v70 >= v72)
            {
              __break(0xC471u);
              JUMPOUT(0x1980EC53CLL);
            }
            v73 = *v58;
            v74 = *v58 + (v70 << 7);
            v76 = (_OWORD *)(v74 + 16);
            v75 = *(_QWORD *)v74;
            if (*(_QWORD *)v74 != v74 + 16)
            {
              if (v75)
              {
                *(_QWORD *)v74 = 0;
                *(_DWORD *)(v74 + 8) = 0;
                v118 = v58;
                WTF::fastFree(v75, (void *)a2, a3, a4, a5, a6, a7, a8);
                v58 = v118;
              }
              *(_QWORD *)v74 = v76;
            }
            v77 = v73 + (v71 << 7);
            v78 = *(__int128 **)v77;
            if (*(_QWORD *)v77 == v77 + 16)
            {
              v79 = *(unsigned int *)(v77 + 12);
              if ((_DWORD)v79)
              {
                v80 = 32 * v79;
                do
                {
                  v81 = *v78;
                  v82 = v78[1];
                  v78 += 2;
                  *v76 = v81;
                  v76[1] = v82;
                  v76 += 2;
                  v80 -= 32;
                }
                while (v80);
              }
              v83 = *(_DWORD *)(v77 + 8);
            }
            else
            {
              *(_QWORD *)v77 = v77 + 16;
              *(_QWORD *)v74 = v78;
              v83 = *(_DWORD *)(v77 + 8);
              *(_DWORD *)(v77 + 8) = 3;
            }
            v84 = *(_DWORD *)(v77 + 12);
            *(_DWORD *)(v77 + 12) = 0;
            *(_DWORD *)(v74 + 8) = v83;
            *(_DWORD *)(v74 + 12) = v84;
            v85 = v73 + (v70 << 7);
            v86 = v73 + (v71 << 7);
            v87 = *(_DWORD *)(v86 + 119);
            *(_QWORD *)(v85 + 112) = *(_QWORD *)(v86 + 112);
            *(_DWORD *)(v85 + 119) = v87;
            --v70;
          }
          while (v70 > v69);
          v68 = HIDWORD(v128);
        }
        if (v67 >= v68)
        {
          __break(0xC471u);
          JUMPOUT(0x1980EC54CLL);
        }
        if (v69 >= *(unsigned int *)(v12 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x1980EC554);
        }
        v88 = v127;
        v89 = *v58;
        v90 = *v58 + (v69 << 7);
        v92 = (_OWORD *)(v90 + 16);
        v91 = *(_QWORD *)v90;
        if (*(_QWORD *)v90 != v90 + 16)
        {
          if (v91)
          {
            *(_QWORD *)v90 = 0;
            *(_DWORD *)(v90 + 8) = 0;
            v113 = v58;
            WTF::fastFree(v91, (void *)a2, a3, a4, a5, a6, a7, a8);
            v58 = v113;
          }
          *(_QWORD *)v90 = v92;
        }
        v94 = (uint64_t)v88 + 136 * v67 + 24;
        v93 = (__int128 *)*((_QWORD *)v88 + 17 * v67 + 1);
        if (v93 == (__int128 *)v94)
        {
          v95 = *((unsigned int *)v88 + 34 * v67 + 5);
          if ((_DWORD)v95)
          {
            v96 = 32 * v95;
            do
            {
              v97 = *v93;
              v98 = v93[1];
              v93 += 2;
              *v92 = v97;
              v92[1] = v98;
              v92 += 2;
              v96 -= 32;
            }
            while (v96);
          }
          v99 = *((_DWORD *)v88 + 34 * v67 + 4);
        }
        else
        {
          *((_QWORD *)v88 + 17 * v67 + 1) = v94;
          *(_QWORD *)v90 = v93;
          v99 = *((_DWORD *)v88 + 34 * v67 + 4);
          *((_DWORD *)v88 + 34 * v67 + 4) = 3;
        }
        *(_DWORD *)(v90 + 8) = v99;
        v100 = *((_DWORD *)v88 + 34 * v67 + 5);
        *((_DWORD *)v88 + 34 * v67 + 5) = 0;
        *(_DWORD *)(v90 + 12) = v100;
        v101 = v89 + (v69 << 7);
        v102 = (char *)v88 + 136 * v67;
        v103 = *((_QWORD *)v102 + 15);
        *(_DWORD *)(v101 + 119) = *(_DWORD *)(v102 + 127);
        *(_QWORD *)(v101 + 112) = v103;
        v49 = v67;
        v66 = v69;
      }
      while (v67);
      LODWORD(v8) = v120;
      v9 = v121;
      if (HIDWORD(v128))
      {
        v104 = 136 * HIDWORD(v128);
        v105 = (char *)v127 + 24;
        do
        {
          v106 = *((_QWORD *)v105 - 2);
          if (v105 != (char *)v106 && v106 != 0)
          {
            *((_QWORD *)v105 - 2) = 0;
            *((_DWORD *)v105 - 2) = 0;
            WTF::fastFree(v106, (void *)a2, a3, a4, a5, a6, a7, a8);
          }
          v105 += 136;
          v104 -= 136;
        }
        while (v104);
      }
      HIDWORD(v128) = 0;
    }
    v10 = (v10 + 1);
    v11 = *((unsigned int *)v9 + 27);
    if (v11 > v10)
    {
      while (!*(_QWORD *)(*((_QWORD *)v9 + 12) + 8 * v10))
      {
        if (v11 == ++v10)
        {
          LODWORD(v10) = *((_DWORD *)v9 + 27);
          break;
        }
      }
    }
  }
  while ((_DWORD)v8 != (_DWORD)v10);
  v111 = v127;
  if (v119 != v127 && v127 != 0)
  {
    v127 = 0;
    LODWORD(v128) = 0;
    WTF::fastFree((unint64_t)v111, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
}

unint64_t WTF::executeInsertions<WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<JSC::B3::Air::PhaseInsertion,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v63;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;

  v8 = a2[3];
  if ((_DWORD)v8)
  {
    v11 = *(unsigned int *)(a1 + 8);
    v12 = *(unsigned int *)(a1 + 12) + v8;
    if (v12 > v11)
    {
      v65 = v11 + (v11 >> 2);
      if (v65 >= 0x10)
        v66 = v65 + 1;
      else
        v66 = 16;
      if (v66 <= v12)
        v67 = *(unsigned int *)(a1 + 12) + v8;
      else
        v67 = v66;
      v68 = v8;
      WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v67);
      v8 = v68;
    }
    v13 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v14 = *(unsigned int *)(a1 + 12);
      if (v12 != v14)
      {
        v15 = v14 << 7;
        v16 = v12 << 7;
        do
        {
          v17 = v13 + v15;
          *(_QWORD *)v17 = v13 + v15 + 16;
          *(_QWORD *)(v17 + 8) = 3;
          *(_QWORD *)(v17 + 112) = 0;
          *(_WORD *)(v17 + 120) = 0;
          *(_BYTE *)(v17 + 122) = *(_BYTE *)(v13 + v15 + 122) & 0xFC;
          v16 -= 128;
          v13 += 128;
        }
        while (v15 != v16);
      }
    }
    *(_DWORD *)(a1 + 12) = v12;
    v18 = v12;
    v19 = v8;
    do
    {
      v20 = v19 - 1;
      v21 = a2[3];
      if (v19 - 1 >= v21)
      {
        __break(0xC471u);
        JUMPOUT(0x1980EC8D4);
      }
      v22 = *(_QWORD *)(*(_QWORD *)a2 + 144 * v20) + v20;
      v23 = v18 - 1;
      if (v18 - 1 > v22)
      {
        do
        {
          v24 = v23 - v19;
          v25 = *(unsigned int *)(a1 + 12);
          if (v23 - v19 >= v25)
            goto LABEL_59;
          if (v23 >= v25)
          {
            __break(0xC471u);
            JUMPOUT(0x1980EC8CCLL);
          }
          v26 = *(_QWORD *)a1;
          v27 = *(_QWORD *)a1 + (v23 << 7);
          v29 = (_OWORD *)(v27 + 16);
          v28 = *(_QWORD *)v27;
          if (*(_QWORD *)v27 != v27 + 16)
          {
            if (v28)
            {
              *(_QWORD *)v27 = 0;
              *(_DWORD *)(v27 + 8) = 0;
              v69 = v8;
              WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
              v8 = v69;
            }
            *(_QWORD *)v27 = v29;
          }
          v30 = v26 + (v24 << 7);
          v31 = *(__int128 **)v30;
          if (*(_QWORD *)v30 == v30 + 16)
          {
            v32 = *(unsigned int *)(v30 + 12);
            if ((_DWORD)v32)
            {
              v33 = 32 * v32;
              do
              {
                v34 = *v31;
                v35 = v31[1];
                v31 += 2;
                *v29 = v34;
                v29[1] = v35;
                v29 += 2;
                v33 -= 32;
              }
              while (v33);
            }
            v36 = *(_DWORD *)(v30 + 8);
          }
          else
          {
            *(_QWORD *)v30 = v30 + 16;
            *(_QWORD *)v27 = v31;
            v36 = *(_DWORD *)(v30 + 8);
            *(_DWORD *)(v30 + 8) = 3;
          }
          v37 = *(_DWORD *)(v30 + 12);
          *(_DWORD *)(v30 + 12) = 0;
          *(_DWORD *)(v27 + 8) = v36;
          *(_DWORD *)(v27 + 12) = v37;
          v38 = v26 + (v23 << 7);
          v39 = v26 + (v24 << 7);
          v40 = *(_DWORD *)(v39 + 119);
          *(_QWORD *)(v38 + 112) = *(_QWORD *)(v39 + 112);
          *(_DWORD *)(v38 + 119) = v40;
          --v23;
        }
        while (v23 > v22);
        v21 = a2[3];
      }
      if (v20 >= v21)
      {
        __break(0xC471u);
        JUMPOUT(0x1980EC8DCLL);
      }
      if (v22 >= *(unsigned int *)(a1 + 12))
      {
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1980EC8C4);
      }
      v41 = *(_QWORD *)a2;
      v42 = *(_QWORD *)a1;
      v43 = *(_QWORD *)a1 + (v22 << 7);
      v45 = (_OWORD *)(v43 + 16);
      v44 = *(_QWORD *)v43;
      if (*(_QWORD *)v43 != v43 + 16)
      {
        if (v44)
        {
          *(_QWORD *)v43 = 0;
          *(_DWORD *)(v43 + 8) = 0;
          v57 = v8;
          WTF::fastFree(v44, a2, a3, a4, a5, a6, a7, a8);
          v8 = v57;
        }
        *(_QWORD *)v43 = v45;
      }
      v47 = v41 + 144 * v20 + 24;
      v46 = *(__int128 **)(v41 + 144 * v20 + 8);
      if (v46 == (__int128 *)v47)
      {
        v48 = *(unsigned int *)(v41 + 144 * v20 + 20);
        if ((_DWORD)v48)
        {
          v49 = 32 * v48;
          do
          {
            v50 = *v46;
            v51 = v46[1];
            v46 += 2;
            *v45 = v50;
            v45[1] = v51;
            v45 += 2;
            v49 -= 32;
          }
          while (v49);
        }
        v52 = *(_DWORD *)(v41 + 144 * v20 + 16);
      }
      else
      {
        *(_QWORD *)(v41 + 144 * v20 + 8) = v47;
        *(_QWORD *)v43 = v46;
        v52 = *(_DWORD *)(v41 + 144 * v20 + 16);
        *(_DWORD *)(v41 + 144 * v20 + 16) = 3;
      }
      *(_DWORD *)(v43 + 8) = v52;
      v53 = *(_DWORD *)(v41 + 144 * v20 + 20);
      *(_DWORD *)(v41 + 144 * v20 + 20) = 0;
      *(_DWORD *)(v43 + 12) = v53;
      v54 = v42 + (v22 << 7);
      v55 = v41 + 144 * v20;
      v56 = *(_QWORD *)(v55 + 120);
      *(_DWORD *)(v54 + 119) = *(_DWORD *)(v55 + 127);
      *(_QWORD *)(v54 + 112) = v56;
      v19 = v20;
      v18 = v22;
    }
    while (v20);
    v58 = a2[3];
    if ((_DWORD)v58)
    {
      v59 = 144 * v58;
      v60 = *(_QWORD *)a2 + 24;
      do
      {
        v61 = *(_QWORD *)(v60 - 16);
        if (v60 != v61 && v61 != 0)
        {
          *(_QWORD *)(v60 - 16) = 0;
          *(_DWORD *)(v60 - 8) = 0;
          v63 = v8;
          WTF::fastFree(v61, a2, a3, a4, a5, a6, a7, a8);
          v8 = v63;
        }
        v60 += 144;
        v59 -= 144;
      }
      while (v59);
    }
    a2[3] = 0;
  }
  return v8;
}

uint64_t JSC::B3::Air::PhaseScope::PhaseScope(uint64_t a1, WTF **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  WTF *v22;
  int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  WTF **v33;
  WTF *v34;

  *(_QWORD *)&v31 = a3;
  *((_QWORD *)&v31 + 1) = a4;
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = v31;
  *(_QWORD *)(a1 + 24) = "Air";
  *(_QWORD *)(a1 + 32) = 4;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = 0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v11 = mach_absolute_time();
    v13 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v13 != -1)
    {
      v34 = (WTF *)&v32;
      v33 = &v34;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v33, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v12) = dword_1ECF4400C;
    *(double *)(a1 + 56) = (double)(v11 * WTF::machTimebaseInfo(void)::timebaseInfo)
                         / ((double)v12
                          * 1000000000.0);
  }
  *(_QWORD *)(a1 + 64) = 0;
  if (byte_1ECF4C323 || byte_1ECF4C327)
  {
    v34 = a2[38];
    WTF::dataLog<char [10],char const*,char [10],WTF::ASCIILiteral,char [3]>("Air after ", (const char **)&v34, ", before ", (uint64_t)&v31, ":\n");
    WTF::dataLog<JSC::B3::Air::Code>((JSC::B3::Air::Code *)a2);
  }
  if ((_BYTE)qword_1ECF4C332)
  {
    WTF::toCString<JSC::B3::Air::Code>((JSC::B3::Air::Code *)a2, a3, a4, a5, a6, a7, a8, (uint64_t *)&v34);
    v21 = v34;
    v34 = 0;
    v22 = *(WTF **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v21;
    if (v22)
    {
      v23 = *(_DWORD *)v22 - 1;
      if (*(_DWORD *)v22 == 1)
      {
        WTF::fastFree((unint64_t)v22, v14, v15, v16, v17, v18, v19, v20);
        v22 = v34;
        v34 = 0;
        if (!v22)
          return a1;
        v23 = *(_DWORD *)v22 - 1;
        if (*(_DWORD *)v22 == 1)
        {
          WTF::fastFree((unint64_t)v22, v24, v25, v26, v27, v28, v29, v30);
          return a1;
        }
      }
      *(_DWORD *)v22 = v23;
    }
  }
  return a1;
}

void WTF::toCString<JSC::B3::Air::Code>(JSC::B3::Air::Code *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (**v21)(WTF::StringPrintStream *__hidden);
  _BYTE *v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v21 = off_1E3572250;
  v22 = v24;
  v23 = xmmword_199122F80;
  v24[0] = 0;
  JSC::B3::Air::Code::dump(a1, (WTF::PrintStream *)&v21, a2, a3, a4, a5, a6, a7);
  v21[5]((WTF::StringPrintStream *)&v21);
  v17 = v22;
  v16 = v23;
  *a8 = 0;
  if (!v17)
  {
    v20 = 0;
LABEL_6:
    WTF::fastFree(v20, v9, v10, v11, v12, v13, v14, v15);
    return;
  }
  if (v16 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x1980ECB78);
  }
  v18 = WTF::fastMalloc((WTF *)(v16 + 17));
  *(_DWORD *)v18 = 1;
  *(_QWORD *)(v18 + 8) = v16;
  *a8 = v18;
  v19 = v18 + 16;
  memcpy((void *)(v18 + 16), v17, v16);
  *(_BYTE *)(v19 + v16) = 0;
  v20 = (unint64_t)v22;
  if (v22 != v24)
    goto LABEL_6;
}

JSC::B3::Air::RegLiveness *JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::RegLiveness *this, JSC::B3::Air::Code *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 *v8;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  uint64_t *v51;
  uint64_t *v52;
  int v53;
  char v55;
  unsigned int v56;
  uint64_t *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  _QWORD *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  char v72;
  unsigned int v73;
  uint64_t *v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  char v79;
  unsigned int v80;
  _QWORD *v81;
  unsigned int v82;
  int v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unsigned int *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  int v96;
  char v98;
  unsigned int v99;
  int v100;
  int v101;
  int *(**v102)(int *, uint64_t, int);
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unsigned int v117;
  int v118;
  int v120;
  char v121;
  int v122;
  char v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int **v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  int v137;
  char v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  char v145;
  int v146;
  int v147;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t *v152;
  int v153;
  char v155;
  int *v156;
  unsigned __int8 v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  __int128 *v161;
  __int128 v162;
  __int128 v163;
  int *v164;
  unsigned __int8 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  unsigned int v171;
  _QWORD *v173;
  uint64_t *v174;
  void **v175;
  uint64_t v176;
  __int128 v177;
  _QWORD *v178;
  uint64_t v179;
  int *(**v180)(int *, uint64_t, int);
  int *(*v181)(int *, uint64_t, int);
  uint64_t *v182;
  int *(***v183)(int *, uint64_t, int);

  v10 = *((unsigned int *)a2 + 27);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 3) = v10;
  if ((_DWORD)v10)
  {
    if (v10 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1980EDC68);
    }
    v11 = (void *)WTF::fastMalloc((WTF *)(16 * v10));
    *((_DWORD *)this + 2) = v10;
    *(_QWORD *)this = v11;
    v12 = *((unsigned int *)this + 3);
    if ((_DWORD)v12)
      bzero(v11, 16 * v12);
  }
  v13 = *((unsigned int *)a2 + 27);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v174 = (uint64_t *)((char *)this + 16);
  *((_DWORD *)this + 7) = v13;
  if ((_DWORD)v13)
  {
    if (v13 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1980EDC70);
    }
    v14 = (void *)WTF::fastMalloc((WTF *)(16 * v13));
    *((_DWORD *)this + 6) = v13;
    *((_QWORD *)this + 2) = v14;
    v15 = *((unsigned int *)this + 7);
    if ((_DWORD)v15)
      bzero(v14, 16 * v15);
  }
  v16 = *((unsigned int *)a2 + 27);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v173 = (_QWORD *)((char *)this + 32);
  *((_DWORD *)this + 11) = v16;
  if ((_DWORD)v16)
  {
    if (v16 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1980EDC78);
    }
    v17 = (void *)WTF::fastMalloc((WTF *)(16 * v16));
    *((_DWORD *)this + 10) = v16;
    *((_QWORD *)this + 4) = v17;
    v18 = *((unsigned int *)this + 11);
    if ((_DWORD)v18)
      bzero(v17, 16 * v18);
  }
  v19 = *((unsigned int *)a2 + 27);
  if (!(_DWORD)v19)
    goto LABEL_188;
  v20 = 0;
  while (!*(_QWORD *)(*((_QWORD *)a2 + 12) + 8 * v20))
  {
    if (v19 == ++v20)
      goto LABEL_146;
  }
  if ((_DWORD)v19 == (_DWORD)v20)
  {
LABEL_146:
    LODWORD(v24) = *((_DWORD *)a2 + 27);
    goto LABEL_147;
  }
  v21 = (uint64_t)&v179;
  v22 = 31;
  LODWORD(v23) = 1;
  LODWORD(v24) = *((_DWORD *)a2 + 27);
  v169 = v24;
  do
  {
    if (v24 <= v20)
    {
      __break(0xC471u);
      JUMPOUT(0x1980EDC48);
    }
    v24 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 8 * v20);
    v25 = (uint64_t *)(*v173 + 16 * *(unsigned int *)v24);
    v26 = (*(_DWORD *)(v24 + 20) + 1);
    v27 = *((unsigned int *)v25 + 3);
    if (v27 < v26)
    {
      v28 = *((unsigned int *)v25 + 2);
      v8 = (__int128 *)*v25;
      if (v28 < v26)
      {
        v29 = v28 + (v28 >> 2);
        if (v29 >= 0x10)
          v30 = v29 + 1;
        else
          v30 = 16;
        if (v30 <= v26)
          v31 = (*(_DWORD *)(v24 + 20) + 1);
        else
          v31 = v30;
        if (v31 >> 27)
        {
          __break(0xC471u);
          JUMPOUT(0x1980EDC50);
        }
        v32 = (__int128 *)WTF::fastMalloc((WTF *)(32 * v31));
        *((_DWORD *)v25 + 2) = v31;
        *v25 = (uint64_t)v32;
        if ((_DWORD)v27)
        {
          v160 = 32 * v27;
          v161 = v8;
          do
          {
            v162 = *v161;
            v163 = v161[1];
            v161 += 2;
            *v32 = v162;
            v32[1] = v163;
            v32 += 2;
            v160 -= 32;
          }
          while (v160);
          v32 = (__int128 *)*v25;
        }
        v21 = (uint64_t)&v179;
        if (v8)
        {
          if (v32 == v8)
          {
            *v25 = 0;
            *((_DWORD *)v25 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v8, v33, v34, v35, v36, a6, a7, a8);
          v8 = (__int128 *)*v25;
        }
        else
        {
          v8 = v32;
        }
      }
      if (v8)
      {
        v37 = *((unsigned int *)v25 + 3);
        if ((_DWORD)v37 != (_DWORD)v26)
          bzero(&v8[2 * v37], ((32 * v26 - 32 * v37 - 32) & 0xFFFFFFFFFFFFFFE0) + 32);
      }
    }
    *((_DWORD *)v25 + 3) = v26;
    v38 = *(unsigned int *)(v24 + 20);
    v39 = v38 - 1;
    v179 = v38 - 1;
    v40 = 21;
    if ((_DWORD)v38)
    {
      do
      {
        if (*(_DWORD *)(v24 + 20) <= v39)
        {
          __break(0xC471u);
          JUMPOUT(0x1980EDC20);
        }
        v41 = *(_QWORD *)(v24 + 8) + ((unint64_t)v39 << 7);
        v181 = (int *(*)(int *, uint64_t, int))v25;
        v182 = &v179;
        v180 = &v181;
        if ((*(__int16 *)(v41 + 120) - 446) <= 5)
        {
          v176 = (uint64_t)WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::Reg,JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_0>(JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_0 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
          *(_QWORD *)&v177 = &v176;
          *((_QWORD *)&v177 + 1) = &v180;
          JSC::B3::Air::Inst::forEachArgCustom(v41, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::Reg,JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_0>(JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_0 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction, (uint64_t)&v176);
          v39 = v179;
        }
        else
        {
          v42 = *(unsigned int *)(v41 + 12);
          if ((_DWORD)v42)
          {
            v43 = 0;
            v44 = (char *)&JSC::B3::Air::g_formTable
                + 21 * *(__int16 *)(v41 + 120)
                + ((unint64_t)((v42 - 1) * v42) >> 1);
            v45 = 16;
            while (2)
            {
              if (v43 >= *(unsigned int *)(v41 + 12))
              {
                __break(0xC471u);
                JUMPOUT(0x1980EDC18);
              }
              v46 = v44[v43];
              v47 = (v46 >> 5) - 1;
              if (v47 < 5)
              {
                v48 = *(_QWORD *)v41;
                v49 = v46 & 0xF;
                v50 = v47 & 0x1F;
                v51 = (uint64_t *)v181;
                v52 = v182;
                switch(*(_BYTE *)(*(_QWORD *)v41 + v45 - 8))
                {
                  case 1:
                    v53 = *(_DWORD *)(v48 + v45);
                    if (v53 <= 0xFFFFFFDF && (v53 - 1) > 0x1F)
                      goto LABEL_61;
                    v55 = v53 + 127;
                    if (v53 <= 0)
                      v55 = 31 - v53;
                    v56 = v55 & 0x7F;
                    if (v49 <= 0xB)
                    {
                      a6 = 3900;
                      if (((1 << v49) & 0xF3C) != 0)
                        goto LABEL_54;
                    }
                    if (v56 >= 0x40)
                      goto LABEL_310;
                    v57 = (uint64_t *)(*(_QWORD *)v181 + 32 * *v182);
                    a6 = 1 << v56;
                    a7 = *v57 | (1 << v56);
                    *v57 = a7;
                    if (v50 == 4)
                    {
                      a7 = v55 & 0x60;
                      if (a7 == 32)
                      {
                        a7 = v57[1];
                        a6 |= a7;
                        v57[1] = a6;
                      }
                    }
LABEL_54:
                    if (v49 - 8 > 2)
                      goto LABEL_55;
                    if (v56 >= 0x40)
                      goto LABEL_310;
                    v69 = *v52;
                    a6 = *v51;
                    a7 = 1 << v56;
                    a8 = *v51 + 32 * *v52;
                    *(_QWORD *)(a8 + 16) |= 1 << v56;
                    v8 = (__int128 *)&jpt_1980ECE28;
                    if (v50 == 4)
                    {
                      a8 = v55 & 0x60;
                      if (a8 == 32)
                      {
                        v166 = a6 + 32 * v69;
                        a6 = *(_QWORD *)(v166 + 24) | a7;
                        *(_QWORD *)(v166 + 24) = a6;
                      }
                    }
LABEL_55:
                    if (v49 < 2 || v49 <= 0xB && ((1 << v49) & 0xBF0) != 0)
                      goto LABEL_56;
                    if (v56 >= 0x40)
                      goto LABEL_310;
                    v66 = *v51 + 32 * *v52;
                    v68 = *(_QWORD *)(v66 + 32);
                    v67 = (uint64_t *)(v66 + 32);
                    a6 = v68 | (1 << v56);
                    *v67 = a6;
                    if (v50 == 4)
                    {
                      a6 = v55 & 0x60;
                      if (a6 == 32)
                      {
                        a6 = v67[1];
                        v67[1] = a6 | (1 << v56);
                      }
                    }
LABEL_56:
                    if ((v46 & 0xC) == 4)
                    {
                      if (v56 >= 0x40)
                        goto LABEL_310;
                      v59 = *v52 + 1;
                      v60 = *v51;
                      *(_QWORD *)(v60 + 32 * v59 + 16) |= 1 << v56;
                      if (v50 == 4 && (v55 & 0x60) == 0x20)
                        *(_QWORD *)(v60 + 32 * v59 + 24) |= 1 << v56;
                    }
                    else if (v56 == 127)
                    {
                      v58 = 0;
                      goto LABEL_60;
                    }
LABEL_58:
                    v58 = (char)(31 - v56);
                    if ((v55 & 0x60) == 0)
                      v58 = v56 + 1;
LABEL_60:
                    *(_DWORD *)(v48 + v45) = v58;
LABEL_61:
                    ++v43;
                    v45 += 32;
                    if (v42 == v43)
                      goto LABEL_81;
                    continue;
                  case 6:
                  case 7:
                  case 8:
                    v61 = *(_DWORD *)(v48 + v45);
                    if (v61 <= 0xFFFFFFDF && (v61 - 1) > 0x1F)
                      goto LABEL_61;
                    v55 = v61 + 127;
                    if (v61 <= 0)
                      v55 = 31 - v61;
                    v56 = v55 & 0x7F;
                    if (v56 >= 0x40)
                      goto LABEL_310;
                    v63 = (_QWORD *)(*(_QWORD *)v181 + 32 * *v182);
                    *v63 |= 1 << v56;
                    if (v50 == 4 && v49 == 11 && (v55 & 0x60) == 0x20)
                      v63[1] |= 1 << v56;
                    goto LABEL_58;
                  case 0xB:
                    v70 = *(_DWORD *)(v48 + v45);
                    if (v70 <= 0xFFFFFFDF && (v70 - 1) > 0x1F)
                      goto LABEL_117;
                    v72 = v70 + 127;
                    if (v70 <= 0)
                      v72 = 31 - v70;
                    v73 = v72 & 0x7F;
                    if (v73 >= 0x40)
                      goto LABEL_310;
                    v74 = (uint64_t *)(*(_QWORD *)v181 + 32 * *v182);
                    a6 = *v74 | (1 << v73);
                    *v74 = a6;
                    if (v49 == 11 && v50 == 4)
                    {
                      a6 = v72 & 0x60;
                      if (a6 == 32)
                      {
                        a6 = v74[1];
                        v74[1] = a6 | (1 << v73);
                      }
                    }
                    if ((v72 & 0x60) != 0)
                      v75 = (char)(31 - v73);
                    else
                      v75 = v73 + 1;
                    *(_DWORD *)(v48 + v45) = v75;
LABEL_117:
                    v76 = v48 + v45;
                    v77 = *(_DWORD *)(v76 + 4);
                    if (v77 <= 0xFFFFFFDF && (v77 - 1) > 0x1F)
                      goto LABEL_61;
                    v79 = v77 + 127;
                    if (v77 <= 0)
                      v79 = 31 - v77;
                    v80 = v79 & 0x7F;
                    if (v80 >= 0x40)
                      goto LABEL_310;
                    v81 = (_QWORD *)(*v51 + 32 * *v52);
                    *v81 |= 1 << v80;
                    if (v49 == 11 && v50 == 4 && (v79 & 0x60) == 0x20)
                      v81[1] |= 1 << v80;
                    v82 = (char)(31 - v80);
                    if ((v79 & 0x60) == 0)
                      v82 = v80 + 1;
                    *(_DWORD *)(v76 + 4) = v82;
                    goto LABEL_61;
                  case 0xC:
                  case 0xD:
                    v83 = *(_DWORD *)(v48 + v45);
                    if (v83 <= 0xFFFFFFDF && (v83 - 1) > 0x1F)
                      goto LABEL_61;
                    v55 = v83 + 127;
                    if (v83 <= 0)
                      v55 = 31 - v83;
                    v56 = v55 & 0x7F;
                    if (v56 >= 0x40)
                      goto LABEL_310;
                    v85 = *v182;
                    v86 = *(_QWORD *)v181;
                    v87 = (uint64_t *)(*(_QWORD *)v181 + 32 * *v182);
                    v88 = 1 << v56;
                    a6 = *v87 | (1 << v56);
                    *v87 = a6;
                    if (v50 == 4 && v49 == 11 && (v55 & 0x60) == 0x20)
                    {
                      v87[1] |= v88;
                      v167 = v86 + 32 * v85;
                      *(_QWORD *)(v167 + 48) |= v88;
                      v89 = (_QWORD *)(v167 + 56);
                    }
                    else
                    {
                      v89 = (_QWORD *)(v86 + 32 * v85 + 48);
                    }
                    *v89 |= v88;
                    goto LABEL_58;
                  default:
                    goto LABEL_61;
                }
              }
              break;
            }
            __break(0xC471u);
LABEL_310:
            __break(1u);
LABEL_311:
            v156 = (int *)(v39 + v21);
            if ((_DWORD)v45 == 11)
              v157 = v42;
            else
              v157 = 3;
            v158 = v157;
            v159 = 6;
LABEL_315:
            JSC::B3::Air::ArgThingHelper<JSC::Reg>::forEach<JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_1>(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(&v180, v156, v159, v158);
            goto LABEL_171;
          }
        }
LABEL_81:
        v64 = v39--;
        v179 = v39;
      }
      while (v64);
    }
    v20 = (v20 + 1);
    v24 = *((unsigned int *)a2 + 27);
    if (v24 <= v20)
    {
      v65 = v169;
    }
    else
    {
      v65 = v169;
      while (!*(_QWORD *)(*((_QWORD *)a2 + 12) + 8 * v20))
      {
        if (v24 == ++v20)
        {
          v20 = *((unsigned int *)a2 + 27);
          break;
        }
      }
    }
  }
  while (v65 != (_DWORD)v20);
LABEL_147:
  if ((_DWORD)v24)
  {
    v23 = 0;
    LODWORD(v90) = v24;
    while (!*(_QWORD *)(*((_QWORD *)a2 + 12) + 8 * v23))
    {
      if (v24 == ++v23)
        goto LABEL_284;
    }
    if ((_DWORD)v24 != (_DWORD)v23)
    {
      LOBYTE(v25) = 31;
      LODWORD(v90) = v24;
      do
      {
        if (v90 <= v23)
        {
          __break(0xC471u);
          JUMPOUT(0x1980EDC58);
        }
        v91 = *(unsigned int **)(*((_QWORD *)a2 + 12) + 8 * v23);
        v92 = v91[5];
        if (!(_DWORD)v92)
        {
          __break(0xC471u);
          JUMPOUT(0x1980EDC60);
        }
        v93 = *((_QWORD *)v91 + 1) + (v92 << 7);
        v8 = (__int128 *)(v93 - 128);
        v180 = (int *(**)(int *, uint64_t, int))(*v174 + 16 * *v91);
        v181 = (int *(*)(int *, uint64_t, int))&v180;
        v94 = *(__int16 *)(v93 - 8);
        if ((v94 - 446) <= 5)
        {
          v176 = (uint64_t)WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::Reg,JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_1>(JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
          *(_QWORD *)&v177 = &v176;
          *((_QWORD *)&v177 + 1) = &v181;
          JSC::B3::Air::Inst::forEachArgCustom((uint64_t)v8, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::Reg,JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_1>(JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction, (uint64_t)&v176);
        }
        else
        {
          v22 = *((unsigned int *)v8 + 3);
          if ((_DWORD)v22)
          {
            v20 = 0;
            v40 = (uint64_t)&JSC::B3::Air::g_formTable + 21 * v94 + ((unint64_t)((v22 - 1) * v22) >> 1);
            v21 = 16;
            do
            {
              if (v20 >= *((unsigned int *)v8 + 3))
              {
                __break(0xC471u);
                JUMPOUT(0x1980EDC38);
              }
              v95 = *(unsigned __int8 *)(v40 + v20);
              LODWORD(v42) = (v95 >> 5) - 1;
              if (v42 >= 5)
              {
                __break(0xC471u);
                JUMPOUT(0x1980EDB68);
              }
              v39 = *(_QWORD *)v8;
              LODWORD(v45) = v95 & 0xF;
              switch(*(_BYTE *)(*(_QWORD *)v8 + v21 - 8))
              {
                case 1:
                  v96 = *(_DWORD *)(v39 + v21);
                  if (v96 <= 0xFFFFFFDF && (v96 - 1) > 0x1F)
                    break;
                  v98 = v96 + 127;
                  if (v96 <= 0)
                    v98 = (_BYTE)v25 - v96;
                  v99 = v98 & 0x7F;
                  if (v45 < 2
                    || v45 <= 0xB && (LODWORD(v45) = 1 << v45, (v45 & 0xBF0) != 0))
                  {
                    if (v99 == 127)
                    {
LABEL_308:
                      v100 = 0;
                      goto LABEL_170;
                    }
                  }
                  else
                  {
                    if (v99 >= 0x40)
                      goto LABEL_310;
                    v101 = v42;
                    v102 = v180;
                    *v180 = (int *(*)(int *, uint64_t, int))((unint64_t)*v180 | (1 << v99));
                    if (v101 == 4 && (v98 & 0x60) == 0x20)
                      v102[1] = (int *(*)(int *, uint64_t, int))((unint64_t)v102[1] | (1 << v99));
                  }
                  if ((v98 & 0x60) == 0)
                  {
                    v100 = v99 + 1;
                    goto LABEL_170;
                  }
                  LOBYTE(v100) = (_BYTE)v25 - v99;
                  goto LABEL_174;
                case 6:
                case 7:
                case 8:
                  v153 = *(_DWORD *)(v39 + v21);
                  if (v153 <= 0xFFFFFFDF && (v153 - 1) > 0x1F)
                    break;
                  v155 = v153 + 127;
                  if (v153 <= 0)
                    v155 = (_BYTE)v25 - v153;
                  v100 = v155 & 0x7F;
                  if (v100 == 127)
                    goto LABEL_308;
                  if ((v155 & 0x60) != 0)
                  {
                    LOBYTE(v100) = 31 - v100;
LABEL_174:
                    v100 = (char)v100;
                  }
                  else
                  {
                    ++v100;
                  }
LABEL_170:
                  *(_DWORD *)(v39 + v21) = v100;
                  break;
                case 0xB:
                  v164 = (int *)(v39 + v21);
                  v168 = v39 + v21;
                  if ((_DWORD)v45 == 11)
                    v165 = (*(_BYTE *)(v40 + v20) >> 5) - 1;
                  else
                    v165 = 3;
                  v171 = v165;
                  JSC::B3::Air::ArgThingHelper<JSC::Reg>::forEach<JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_1>(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(&v180, v164, 0, v165);
                  v156 = (int *)(v168 + 4);
                  v159 = 0;
                  v158 = v171;
                  goto LABEL_315;
                case 0xC:
                case 0xD:
                  goto LABEL_311;
                default:
                  break;
              }
LABEL_171:
              ++v20;
              v21 += 32;
            }
            while (v22 != v20);
          }
        }
        v23 = (v23 + 1);
        v90 = *((unsigned int *)a2 + 27);
        if (v90 > v23)
        {
          while (!*(_QWORD *)(*((_QWORD *)a2 + 12) + 8 * v23))
          {
            if (v90 == ++v23)
            {
              LODWORD(v23) = *((_DWORD *)a2 + 27);
              break;
            }
          }
        }
      }
      while ((_DWORD)v24 != (_DWORD)v23);
    }
LABEL_284:
    v179 = 0x8000000000000000;
    if ((_DWORD)v90)
    {
      v149 = v90 - 1;
      v150 = 0x8000000000000000;
      while (1)
      {
        if (v150 < 0)
          v151 = 63;
        else
          v151 = *(_QWORD *)(2 * v150);
        if (v151 < v149 + 1)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v179, v149 + 1, 0);
          v150 = v179;
        }
        v152 = v150 >= 0 ? (uint64_t *)(2 * v150 + 8) : &v179;
        *(uint64_t *)((char *)v152 + ((v149 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v149;
        if (!v149)
          break;
        v150 = v179;
        --v149;
      }
    }
  }
  else
  {
LABEL_188:
    v179 = 0x8000000000000000;
  }
  v8 = &v177;
  v25 = &v179;
  do
  {
    v23 = *((unsigned int *)a2 + 27);
    if (!(_DWORD)v23)
      break;
    v40 = 0;
    do
    {
      if (*((_DWORD *)a2 + 27) <= --v23)
      {
        __break(0xC471u);
        JUMPOUT(0x1980EDC28);
      }
      v21 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 8 * v23);
      if (v21)
      {
        v103 = v179 >= 0 ? (uint64_t *)(2 * v179 + 8) : &v179;
        v104 = (v23 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v105 = *(uint64_t *)((char *)v103 + v104);
        *(uint64_t *)((char *)v103 + v104) = v105 & ~(1 << v23);
        if ((v105 & (1 << v23)) != 0)
        {
          v176 = v21;
          v177 = 0uLL;
          v106 = *(unsigned int *)v21;
          v107 = (_QWORD *)(*v173 + 16 * v106);
          v178 = v107;
          v177 = *(_OWORD *)(*v174 + 16 * v106);
          v108 = *(unsigned int *)(v21 + 20);
          if (!(_DWORD)v108)
          {
            __break(0xC471u);
            JUMPOUT(0x1980EDC40);
          }
          v109 = *v107;
          v111 = *((_QWORD *)&v177 + 1);
          v110 = v177;
          do
          {
            v112 = *(_QWORD *)(v109 + 32 * v108 + 16);
            if (v112)
            {
              do
              {
                v114 = v112 & -v112;
                v110 &= ~v114;
                v111 &= ~v114;
                v112 &= v112 - 1;
              }
              while (v112);
              *(_QWORD *)&v177 = v110;
              *((_QWORD *)&v177 + 1) = v111;
            }
            v113 = (_QWORD *)(v109 + 32 * --v108);
            v110 |= *v113;
            *(_QWORD *)&v177 = v110;
            v111 |= v113[1];
            *((_QWORD *)&v177 + 1) = v111;
          }
          while (v108);
          v115 = *(_QWORD *)(v21 + 8);
          v175 = (void **)&v176;
          v180 = (int *(**)(int *, uint64_t, int))&v175;
          if ((*(__int16 *)(v115 + 120) - 446) <= 5)
          {
            v181 = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::Reg,JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_2>(JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
            v182 = (uint64_t *)&v181;
            v183 = &v180;
            JSC::B3::Air::Inst::forEachArgCustom(v115, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::Reg,JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_2>(JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction, (uint64_t)&v181);
            a6 = (uint64_t)&jpt_1980ED64C;
          }
          else
          {
            v24 = *(unsigned int *)(v115 + 12);
            if ((_DWORD)v24)
            {
              v20 = 0;
              v116 = (char *)&JSC::B3::Air::g_formTable + 21 * *(__int16 *)(v115 + 120) + (((v24 - 1) * v24) >> 1);
              v22 = 16;
              while (2)
              {
                if (v20 >= *(unsigned int *)(v115 + 12))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980EDC30);
                }
                v117 = v116[v20];
                if ((v117 >> 5) - 1 >= 5)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980EDC10);
                }
                v39 = *(_QWORD *)v115;
                switch(*(_BYTE *)(*(_QWORD *)v115 + v22 - 8))
                {
                  case 1:
                    v118 = *(_DWORD *)(v39 + v22);
                    if (v118 <= 0xFFFFFFDF && (v118 - 1) > 0x1F)
                      goto LABEL_225;
                    v120 = v117 & 0xF;
                    LODWORD(v45) = 31 - v118;
                    if (v118 <= 0)
                      v121 = 31 - v118;
                    else
                      v121 = v118 + 127;
                    LODWORD(v42) = v121 & 0x7F;
                    if ((v120 - 8) <= 2)
                    {
                      if (v42 >= 0x40)
                        goto LABEL_310;
                      *(int8x16_t *)(v175 + 1) = vandq_s8(*(int8x16_t *)(v175 + 1), (int8x16_t)vdupq_n_s64(~(1 << v42)));
                    }
                    else if ((_DWORD)v42 == 127)
                    {
LABEL_307:
                      LODWORD(v42) = 0;
                      goto LABEL_224;
                    }
                    if ((v121 & 0x60) != 0)
                    {
                      LOBYTE(v42) = 31 - v42;
LABEL_237:
                      LODWORD(v42) = (char)v42;
                    }
                    else
                    {
                      LODWORD(v42) = v42 + 1;
                    }
LABEL_224:
                    *(_DWORD *)(v39 + v22) = v42;
LABEL_225:
                    ++v20;
                    v22 += 32;
                    if (v24 == v20)
                      break;
                    continue;
                  case 6:
                  case 7:
                  case 8:
                    v122 = *(_DWORD *)(v39 + v22);
                    if (v122 <= 0xFFFFFFDF && (v122 - 1) > 0x1F)
                      goto LABEL_225;
                    v124 = v122 + 127;
                    if (v122 <= 0)
                      v124 = 31 - v122;
                    LODWORD(v42) = v124 & 0x7F;
                    if ((_DWORD)v42 == 127)
                      goto LABEL_307;
                    if ((v124 & 0x60) == 0)
                    {
                      LODWORD(v42) = v42 + 1;
                      goto LABEL_224;
                    }
                    LOBYTE(v42) = 31 - v42;
                    goto LABEL_237;
                  case 0xB:
                    v137 = *(_DWORD *)(v39 + v22);
                    if (v137 > 0xFFFFFFDF || (v137 - 1) <= 0x1F)
                    {
                      if (v137 <= 0)
                        v139 = 31 - v137;
                      else
                        v139 = v137 + 127;
                      v140 = v139 & 0x7F;
                      if (v140 == 127)
                      {
                        v141 = 0;
                      }
                      else if ((v139 & 0x60) != 0)
                      {
                        v141 = (char)(31 - v140);
                      }
                      else
                      {
                        v141 = v140 + 1;
                      }
                      *(_DWORD *)(v39 + v22) = v141;
                    }
                    v142 = v39 + v22;
                    v143 = *(_DWORD *)(v142 + 4);
                    if (v143 > 0xFFFFFFDF || (v143 - 1) <= 0x1F)
                    {
                      v145 = v143 + 127;
                      if (v143 <= 0)
                        v145 = 31 - v143;
                      v146 = v145 & 0x7F;
                      if (v146 == 127)
                      {
                        v147 = 0;
                      }
                      else if ((v145 & 0x60) != 0)
                      {
                        v147 = (char)(31 - v146);
                      }
                      else
                      {
                        v147 = v146 + 1;
                      }
                      *(_DWORD *)(v142 + 4) = v147;
                    }
                    goto LABEL_225;
                  case 0xC:
                  case 0xD:
                    v170 = v115;
                    JSC::B3::Air::ArgThingHelper<JSC::Reg>::forEach<JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_2>(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_2 const&)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()((int *)(v39 + v22));
                    a6 = (uint64_t)&jpt_1980ED64C;
                    v115 = v170;
                    goto LABEL_225;
                  default:
                    goto LABEL_225;
                }
                break;
              }
            }
          }
          v125 = (_QWORD *)(*(_QWORD *)this + 16 * *(unsigned int *)v21);
          v126 = v177 | *v125;
          v127 = v125[1];
          if (v126 != *v125 || (*((_QWORD *)&v177 + 1) | v127) != v127)
          {
            *v125 = v126;
            v125[1] = *((_QWORD *)&v177 + 1) | v127;
            v128 = *(unsigned int *)(v21 + 84);
            if ((_DWORD)v128)
            {
              v129 = *(unsigned int ***)(v21 + 72);
              v130 = *v174;
              v131 = 8 * v128;
              do
              {
                v132 = **v129;
                v133 = (_QWORD *)(v130 + 16 * v132);
                v134 = v177 | *v133;
                v135 = v133[1];
                if (v134 != *v133 || (*((_QWORD *)&v177 + 1) | v135) != v135)
                {
                  *v133 = v134;
                  v133[1] = *((_QWORD *)&v177 + 1) | v135;
                  if (v179 >= 0)
                    v136 = (uint64_t *)(2 * v179 + 8);
                  else
                    v136 = &v179;
                  v40 = 1;
                  *(uint64_t *)((char *)v136 + ((v132 >> 3) & 0x1FFFFFF8)) |= 1 << v132;
                }
                ++v129;
                v131 -= 8;
              }
              while (v131);
            }
          }
        }
      }
    }
    while (v23);
  }
  while ((v40 & 1) != 0);
  if ((v179 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v179, (void *)1, (uint64_t)&v175, 21, 31, a6, a7, a8);
  return this;
}

_QWORD *JSC::B3::Air::RegLiveness::LocalCalcForUnifiedTmpLiveness::LocalCalcForUnifiedTmpLiveness(_QWORD *result, _QWORD *a2, unsigned int *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v15;
  char v16;
  int v17;
  uint64_t v19;
  uint64_t i;
  int v21;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v29;
  char v30;

  *result = a3;
  result[1] = 0;
  v3 = result + 1;
  result[2] = 0;
  v4 = *a2;
  result[3] = *a2;
  v5 = *a3;
  result[4] = a2[1] + 16 * v5;
  v6 = a2[10] + 32 * v5;
  v7 = *(unsigned int *)(v6 + 12);
  if ((_DWORD)v7)
  {
    v8 = *(int **)v6;
    v9 = *(_DWORD *)(*a2 + 176) + 33;
    if (HIBYTE(dword_1ECF4C7B0))
    {
      if (!HIBYTE(word_1ECF4C79E))
      {
        v10 = 0;
        v11 = 0;
        v12 = 4 * v7;
        while (1)
        {
          v13 = *v8;
          if (v9 <= *v8)
            v13 = v9 - *v8;
          if (v13 > 0xFFFFFFDF || (v13 - 1) <= 0x1F)
          {
            if (v13 <= 0)
              v15 = 31 - v13;
            else
              v15 = v13 + 127;
            v16 = v15 & 0x7F;
            if ((v15 & 0x7Fu) > 0x3F)
              goto LABEL_53;
            v17 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 8) + 212);
            v11 |= 1 << v16;
            *v3 = v11;
            if ((v15 & 0x60) == 0x20 && (v15 & 0x60) == 0x20 && v17 != 0)
            {
              v10 |= 1 << v16;
              result[2] = v10;
            }
          }
          ++v8;
          v12 -= 4;
          if (!v12)
            return result;
        }
      }
      v24 = 0;
      v25 = 0;
      v26 = 4 * v7;
      while (1)
      {
        v27 = *v8;
        if (v9 <= *v8)
          v27 = v9 - *v8;
        if (v27 > 0xFFFFFFDF || (v27 - 1) <= 0x1F)
        {
          if (v27 <= 0)
            v29 = 31 - v27;
          else
            v29 = v27 + 127;
          v30 = v29 & 0x7F;
          if ((v29 & 0x7Fu) >= 0x40)
            goto LABEL_53;
          v25 |= 1 << v30;
          *v3 = v25;
          if ((v29 & 0x60) == 0x20 && (v29 & 0x60) == 0x20)
          {
            v24 |= 1 << v30;
            result[2] = v24;
          }
        }
        ++v8;
        v26 -= 4;
        if (!v26)
          return result;
      }
    }
    v19 = 0;
    for (i = 4 * v7; i; i -= 4)
    {
      v21 = *v8;
      if (v9 <= *v8)
        v21 = v9 - *v8;
      if (v21 > 0xFFFFFFDF || (v21 - 1) <= 0x1F)
      {
        if (v21 <= 0)
          v23 = 31 - v21;
        else
          v23 = v21 + 127;
        if ((v23 & 0x40) != 0)
        {
LABEL_53:
          __break(1u);
          return result;
        }
        v19 |= 1 << v23;
        *v3 = v19;
      }
      ++v8;
    }
  }
  return result;
}

uint64_t JSC::B3::Air::RegLiveness::LocalCalcForUnifiedTmpLiveness::execute(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  unsigned int v6;
  uint64_t i;
  int v8;
  char v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  char v20;
  char v21;
  int v22;
  uint64_t j;
  int v25;
  char v27;
  uint64_t v28;
  int v29;
  char v31;
  char v32;

  v2 = **(_QWORD **)(this + 32);
  v3 = v2 + ((unint64_t)(a2 + 1) << 6);
  v4 = *(unsigned int *)(v3 + 44);
  if ((_DWORD)v4)
  {
    v5 = *(int **)(v3 + 32);
    v6 = *(_DWORD *)(*(_QWORD *)(this + 24) + 176) + 33;
    for (i = 4 * v4; i; i -= 4)
    {
      v8 = *v5;
      if (v6 <= *v5)
        v8 = v6 - *v5;
      if (v8 > 0xFFFFFFDF || (v8 - 1) <= 0x1F)
      {
        if (v8 <= 0)
          v10 = 31 - v8;
        else
          v10 = v8 - 1;
        v11 = v10 & 0x7F;
        if (v11 >= 0x40)
        {
LABEL_67:
          __break(1u);
          return this;
        }
        *(int8x16_t *)(this + 8) = vandq_s8(*(int8x16_t *)(this + 8), (int8x16_t)vdupq_n_s64(~(1 << v11)));
      }
      ++v5;
    }
  }
  v12 = v2 + ((unint64_t)a2 << 6);
  v13 = *(unsigned int *)(v12 + 12);
  if ((_DWORD)v13)
  {
    v14 = *(int **)v12;
    v15 = *(_QWORD *)(this + 24);
    v16 = *(_DWORD *)(v15 + 176) + 33;
    if (HIBYTE(dword_1ECF4C7B0))
    {
      if (!HIBYTE(word_1ECF4C79E))
      {
        v17 = 4 * v13;
        while (1)
        {
          v18 = *v14;
          if (v16 <= *v14)
            v18 = v16 - *v14;
          if (v18 > 0xFFFFFFDF || (v18 - 1) <= 0x1F)
          {
            if (v18 <= 0)
              v20 = 31 - v18;
            else
              v20 = v18 + 127;
            v21 = v20 & 0x7F;
            if ((v20 & 0x7Fu) > 0x3F)
              goto LABEL_67;
            v22 = *(unsigned __int8 *)(*(_QWORD *)(v15 + 8) + 212);
            *(_QWORD *)(this + 8) |= 1 << v21;
            if ((v20 & 0x60) == 0x20 && (v20 & 0x60) == 0x20 && v22 != 0)
              *(_QWORD *)(this + 16) |= 1 << v21;
          }
          ++v14;
          v17 -= 4;
          if (!v17)
            return this;
        }
      }
      v28 = 4 * v13;
      while (1)
      {
        v29 = *v14;
        if (v16 <= *v14)
          v29 = v16 - *v14;
        if (v29 > 0xFFFFFFDF || (v29 - 1) <= 0x1F)
        {
          if (v29 <= 0)
            v31 = 31 - v29;
          else
            v31 = v29 + 127;
          v32 = v31 & 0x7F;
          if ((v31 & 0x7Fu) >= 0x40)
            goto LABEL_67;
          *(_QWORD *)(this + 8) |= 1 << v32;
          if ((v31 & 0x60) == 0x20 && (v31 & 0x60) == 0x20)
            *(_QWORD *)(this + 16) |= 1 << v32;
        }
        ++v14;
        v28 -= 4;
        if (!v28)
          return this;
      }
    }
    for (j = 4 * v13; j; j -= 4)
    {
      v25 = *v14;
      if (v16 <= *v14)
        v25 = v16 - *v14;
      if (v25 > 0xFFFFFFDF || (v25 - 1) <= 0x1F)
      {
        if (v25 <= 0)
          v27 = 31 - v25;
        else
          v27 = v25 + 127;
        if ((v27 & 0x40) != 0)
          goto LABEL_67;
        *(_QWORD *)(this + 8) |= 1 << v27;
      }
      ++v14;
    }
  }
  return this;
}

void JSC::B3::Air::reportUsedRegisters(WTF **this, JSC::B3::Air::Code *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD **v39;
  int v40;
  __int16 *v41;
  __int16 v42;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  _QWORD *v57;
  int v58;
  char v60;
  unsigned int v61;
  unint64_t v62;
  _OWORD *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  BOOL v74;
  unsigned int v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _DWORD *v82;
  JSC::B3::Air::Code *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 *v88;
  __int128 v89;
  __int128 v90;
  WTF **v91;
  uint64_t v92;
  __int128 v93;
  _QWORD v94[12];
  _BYTE v95[11];
  _QWORD v96[2];
  unsigned __int8 v97;
  unsigned int *v98;
  __int128 v99;
  uint64_t *v100;
  unint64_t v101;
  int v102;
  unint64_t v103;
  int v104;
  unint64_t v105;
  int v106;
  unsigned int v107;
  _QWORD v108[3];
  uint64_t v109;
  _DWORD *v110;

  v8 = this;
  JSC::B3::Air::PhaseScope::PhaseScope((uint64_t)v108, this, (uint64_t)"reportUsedRegisters", 20, a5, a6, a7, a8);
  JSC::B3::Air::padInterference((JSC::B3::Air *)v8, v9, v10, v11, v12, v13, v14, v15);
  v22 = (unint64_t)JSC::B3::Air::RegLiveness::RegLiveness((JSC::B3::Air::RegLiveness *)&v101, (JSC::B3::Air::Code *)v8, v16, v17, v18, v19, v20, v21);
  v92 = *((unsigned int *)v8 + 27);
  if (!(_DWORD)v92)
    goto LABEL_77;
  v30 = 0;
  while (!*((_QWORD *)v8[12] + v30))
  {
    if (v92 == ++v30)
      goto LABEL_77;
  }
  if ((_DWORD)v92 == (_DWORD)v30)
    goto LABEL_77;
  LODWORD(v31) = *((_DWORD *)v8 + 27);
  LODWORD(v32) = v30;
  v91 = v8;
  do
  {
    if (v31 <= v32)
    {
      __break(0xC471u);
      JUMPOUT(0x1980EE7D0);
    }
    v98 = (unsigned int *)*((_QWORD *)v8[12] + v32);
    v33 = v98;
    v99 = 0uLL;
    v34 = *v98;
    v100 = (uint64_t *)(v105 + 16 * v34);
    v99 = *(_OWORD *)(v103 + 16 * v34);
    v35 = v98[5];
    if (!(_DWORD)v35)
    {
      v75 = 0;
      v71 = 0;
      v68 = *((_QWORD *)v98 + 1);
      v69 = v68;
      v22 = v68;
      goto LABEL_62;
    }
    do
    {
      v36 = v35 - 1;
      if (v33[5] <= (int)v35 - 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1980EE780);
      }
      v37 = (v35 - 1);
      v38 = *((_QWORD *)v33 + 1);
      v39 = (_QWORD **)(v38 + (v37 << 7));
      if ((*((_BYTE *)v39 + 122) & 1) == 0)
      {
        v41 = (__int16 *)(v39 + 15);
        v40 = *((__int16 *)v39 + 60);
        v42 = *((_WORD *)v39 + 60);
        switch(v42)
        {
          case 206:
          case 207:
          case 208:
          case 209:
          case 210:
          case 211:
          case 212:
          case 213:
          case 214:
          case 215:
          case 216:
          case 217:
          case 218:
          case 219:
          case 220:
          case 221:
          case 222:
          case 223:
          case 224:
          case 225:
          case 226:
          case 227:
          case 228:
          case 229:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 236:
          case 237:
          case 238:
          case 239:
          case 240:
          case 241:
          case 242:
          case 243:
          case 244:
          case 245:
          case 246:
          case 247:
          case 248:
          case 249:
          case 250:
          case 251:
          case 252:
          case 253:
          case 254:
          case 255:
          case 256:
          case 257:
          case 258:
          case 259:
          case 260:
          case 261:
          case 262:
          case 263:
          case 264:
          case 265:
          case 266:
          case 267:
          case 270:
          case 271:
          case 272:
          case 273:
          case 274:
          case 275:
          case 276:
          case 277:
          case 278:
          case 279:
          case 280:
          case 281:
          case 290:
          case 291:
          case 292:
          case 293:
          case 294:
          case 295:
          case 296:
          case 297:
          case 298:
          case 299:
          case 300:
          case 301:
          case 302:
          case 303:
          case 304:
          case 305:
          case 306:
          case 307:
          case 308:
          case 309:
          case 326:
          case 327:
          case 328:
          case 329:
          case 330:
          case 331:
          case 332:
          case 333:
          case 334:
          case 445:
          case 446:
          case 449:
          case 450:
          case 451:
            break;
          case 268:
          case 269:
          case 282:
          case 283:
          case 284:
          case 285:
          case 286:
          case 287:
          case 288:
          case 289:
          case 310:
          case 311:
          case 312:
          case 313:
          case 314:
          case 315:
          case 316:
          case 317:
          case 318:
          case 319:
          case 320:
          case 321:
          case 322:
          case 323:
          case 324:
          case 325:
          case 335:
          case 336:
          case 337:
          case 338:
          case 339:
          case 340:
          case 341:
          case 342:
          case 343:
          case 344:
          case 345:
          case 346:
          case 347:
          case 348:
          case 349:
          case 350:
          case 351:
          case 352:
          case 353:
          case 354:
          case 355:
          case 356:
          case 357:
          case 358:
          case 359:
          case 360:
          case 361:
          case 362:
          case 363:
          case 364:
          case 365:
          case 366:
          case 367:
          case 368:
          case 369:
          case 370:
          case 371:
          case 372:
          case 373:
          case 374:
          case 375:
          case 376:
          case 377:
          case 378:
          case 379:
          case 380:
          case 381:
          case 382:
          case 383:
          case 384:
          case 385:
          case 386:
          case 387:
          case 388:
          case 389:
          case 390:
          case 391:
          case 392:
          case 393:
          case 394:
          case 395:
          case 396:
          case 397:
          case 398:
          case 399:
          case 400:
          case 401:
          case 402:
          case 403:
          case 404:
          case 405:
          case 406:
          case 407:
          case 408:
          case 409:
          case 410:
          case 411:
          case 412:
          case 413:
          case 414:
          case 415:
          case 416:
          case 417:
          case 418:
          case 419:
          case 420:
          case 421:
          case 422:
          case 423:
          case 424:
          case 425:
          case 426:
          case 427:
          case 428:
          case 429:
          case 430:
          case 431:
          case 432:
          case 433:
          case 434:
          case 435:
          case 436:
          case 437:
          case 438:
          case 439:
          case 440:
          case 441:
          case 442:
          case 443:
          case 444:
          case 447:
            goto LABEL_19;
          case 448:
            if (!*((_DWORD *)v39 + 3))
            {
              __break(0xC471u);
              JUMPOUT(0x1980EE7C8);
            }
            v22 = (*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)**v39 + 96))(**v39, v38 + ((unint64_t)(v35 - 1) << 7));
            if ((v22 & 1) != 0)
              break;
            v40 = *v41;
            v42 = *v41;
LABEL_19:
            v97 = 1;
            v96[0] = &v97;
            v96[1] = &v98;
            if ((v40 - 446) > 5)
            {
              v51 = *((unsigned int *)v39 + 3);
              if ((_DWORD)v51)
              {
                v52 = 0;
                v53 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
                    + 21 * v42
                    + ((unint64_t)((v51 - 1) * v51) >> 1);
                v54 = 32 * v51;
                v44 = 1;
                while (1)
                {
                  v56 = *v53++;
                  v55 = v56;
                  if ((v56 >> 5) - 1 >= 5)
                    break;
                  if ((v55 & 0xFu) - 8 < 3)
                    goto LABEL_30;
                  if ((v55 & 0xC) == 4)
                  {
                    v57 = &(*v39)[v52 / 8];
                    if (*((_BYTE *)v57 + 8) != 1)
                      goto LABEL_30;
                    v58 = *((_DWORD *)v57 + 4);
                    if (v58 <= 0xFFFFFFDF && (v58 - 1) > 0x1F)
                      goto LABEL_30;
                    if (v58 <= 0)
                      v60 = 31 - v58;
                    else
                      v60 = v58 - 1;
                    v61 = v60 & 0x7F;
                    if (v61 >= 0x40)
                      goto LABEL_96;
                    if ((((unint64_t)v99 >> v61) & 1) != 0)
                    {
LABEL_30:
                      v44 = 0;
                      v97 = 0;
                    }
                  }
                  v52 += 32;
                  if (v54 == v52)
                    goto LABEL_21;
                }
                v24 = "Width JSC::B3::Air::decodeFormWidth(uint8_t)";
                v22 = 87;
                v25 = 312;
                __break(0xC471u);
LABEL_96:
                __break(1u);
                goto LABEL_97;
              }
LABEL_48:
              *(_QWORD *)&v93 = v94;
              *((_QWORD *)&v93 + 1) = 3;
              *(_QWORD *)v95 = 0;
              *(_WORD *)&v95[8] = 0;
              v95[10] &= 0xFCu;
              v63 = v39 + 2;
              v62 = (unint64_t)*v39;
              if (*v39 != v39 + 2)
              {
                if (v62)
                {
                  *v39 = 0;
                  *((_DWORD *)v39 + 2) = 0;
                  WTF::fastFree(v62, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
                }
                *v39 = v63;
                v76 = (_QWORD *)v93;
                if ((_QWORD *)v93 == v94)
                {
                  if (HIDWORD(v93))
                  {
                    v87 = 32 * HIDWORD(v93);
                    v88 = (__int128 *)v94;
                    do
                    {
                      v89 = *v88;
                      v90 = v88[1];
                      v88 += 2;
                      *v63 = v89;
                      v63[1] = v90;
                      v63 += 2;
                      v87 -= 32;
                    }
                    while (v87);
                  }
                }
                else
                {
                  *(_QWORD *)&v93 = v94;
                  *v39 = v76;
                }
              }
              *((_DWORD *)v39 + 2) = DWORD2(v93);
              v64 = HIDWORD(v93);
              HIDWORD(v93) = 0;
              *((_DWORD *)v39 + 3) = v64;
              v65 = v38 + (v37 << 7);
              v66 = *(_QWORD *)v95;
              *(_DWORD *)(v65 + 119) = *(_DWORD *)&v95[7];
              *(_QWORD *)(v65 + 112) = v66;
              v22 = v93;
              if (v94 != (_QWORD *)v93 && (_QWORD)v93)
              {
                *(_QWORD *)&v93 = 0;
                DWORD2(v93) = 0;
                WTF::fastFree(v22, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
              }
              break;
            }
            *(_QWORD *)&v93 = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::reportUsedRegisters(JSC::B3::Air::Code &)::$_0>::implFunction;
            *((_QWORD *)&v93 + 1) = &v93;
            v94[0] = v96;
            v22 = JSC::B3::Air::Inst::forEachArgCustom(v38 + ((unint64_t)(v35 - 1) << 7), (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::reportUsedRegisters(JSC::B3::Air::Code &)::$_0>::implFunction, (uint64_t)&v93);
            v44 = v97;
LABEL_21:
            if (v44)
              goto LABEL_48;
            break;
          default:
            if ((v40 - 123) <= 0x12 && ((1 << (v40 - 123)) & 0x7FD55) != 0)
              break;
            goto LABEL_19;
        }
      }
      v45 = *((_QWORD *)&v99 + 1);
      v46 = v99;
      if (*((_WORD *)v39 + 60) == 448)
      {
        v93 = v99;
        if (!*((_DWORD *)v39 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x1980EE7C0);
        }
        v22 = (*(uint64_t (**)(_QWORD, unint64_t, __int128 *))(*(_QWORD *)**v39 + 56))(**v39, v38 + ((unint64_t)(v35 - 1) << 7), &v93);
        v45 = *((_QWORD *)&v99 + 1);
        v46 = v99;
      }
      v47 = *v100;
      v48 = *(_QWORD *)(*v100 + 32 * v35 + 16);
      if (v48)
      {
        do
        {
          v50 = v48 & -v48;
          v46 &= ~v50;
          v45 &= ~v50;
          v48 &= v48 - 1;
        }
        while (v48);
        *(_QWORD *)&v99 = v46;
        *((_QWORD *)&v99 + 1) = v45;
      }
      v49 = (_QWORD *)(v47 + 32 * v37);
      *(_QWORD *)&v99 = *v49 | v46;
      *((_QWORD *)&v99 + 1) = v49[1] | v45;
      --v35;
    }
    while (v36);
    v67 = v33[5];
    v68 = *((_QWORD *)v33 + 1);
    v69 = v68 + (v67 << 7);
    if ((_DWORD)v67)
    {
      v70 = 0;
      v71 = 0;
      v22 = v68 + (v67 << 7);
      v72 = v22;
      do
      {
        v73 = v68 + v70;
        if (*(_QWORD *)(v68 + v70 + 112))
          v74 = 0;
        else
          v74 = *(unsigned __int16 *)(v68 + v70 + 120) == 0;
        if (v74 && (*(_BYTE *)(v73 + 122) & 3) == 0 && !*(_DWORD *)(v68 + v70 + 12))
        {
          if (v72 == *((_QWORD *)v33 + 1) + ((unint64_t)v33[5] << 7))
          {
            v72 = v68 + v70;
          }
          else if (v73 != v22)
          {
            v84 = v22;
            WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping((unsigned int *)v22, (unsigned int *)v73, v72, v25, v26, v27, v28, v29);
            v72 += v68 + v70 - v84;
          }
          v85 = *(_QWORD *)(v68 + v70);
          if (v68 + v70 + 16 != v85 && v85)
          {
            v86 = v68 + v70;
            *(_QWORD *)v86 = 0;
            *(_DWORD *)(v86 + 8) = 0;
            WTF::fastFree(v85, (void *)v73, (uint64_t)v24, v25, v26, v27, v28, v29);
          }
          v22 = v68 + v70 + 128;
          ++v71;
        }
        v70 += 128;
      }
      while (v68 + v70 < v69);
      v68 = *((_QWORD *)v33 + 1);
      v75 = v33[5];
      v69 = v72;
    }
    else
    {
      v75 = 0;
      v71 = 0;
      v22 = v68 + (v67 << 7);
    }
LABEL_62:
    v23 = (void *)(v68 + ((unint64_t)v75 << 7));
    if ((void *)v22 != v23)
    {
      WTF::VectorMover<false,JSC::B3::Air::Inst>::moveOverlapping((unsigned int *)v22, (unsigned int *)v23, v69, v25, v26, v27, v28, v29);
      v75 = v33[5];
    }
    v33[5] = v75 - v71;
    v32 = (v32 + 1);
    v8 = v91;
    v31 = *((unsigned int *)v91 + 27);
    if (v31 > v32)
    {
      while (!*((_QWORD *)v91[12] + v32))
      {
        if (v31 == ++v32)
        {
          LODWORD(v32) = *((_DWORD *)v91 + 27);
          break;
        }
      }
    }
  }
  while ((_DWORD)v92 != (_DWORD)v32);
LABEL_77:
  v77 = v105;
  if (v107)
  {
    v78 = 16 * v107;
    do
    {
      v79 = *(_QWORD *)v77;
      if (*(_QWORD *)v77)
      {
        *(_QWORD *)v77 = 0;
        *(_DWORD *)(v77 + 8) = 0;
        WTF::fastFree(v79, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
      }
      v77 += 16;
      v78 -= 16;
    }
    while (v78);
    v77 = v105;
  }
  if (v77)
  {
    v105 = 0;
    v106 = 0;
    WTF::fastFree(v77, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
  }
  v80 = v103;
  if (v103)
  {
    v103 = 0;
    v104 = 0;
    WTF::fastFree(v80, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
  }
  v81 = v101;
  if (v101)
  {
    v101 = 0;
    v102 = 0;
    WTF::fastFree(v81, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
  }
  v22 = v108[0];
  *(_QWORD *)(v108[0] + 304) = v108[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
LABEL_97:
    if (v110)
      v83 = (JSC::B3::Air::Code *)(v110 + 4);
    else
      v83 = 0;
    JSC::B3::Air::validate((JSC::B3::Air *)v22, v83, v24, v25, v26, v27, v28, v29);
  }
  v82 = v110;
  v110 = 0;
  if (v82)
  {
    if (*v82 == 1)
      WTF::fastFree((unint64_t)v82, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
    else
      --*v82;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v109);
}

uint64_t JSC::B3::Air::simplifyCFG(WTF **this, JSC::B3::Air::Code *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  WTF *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD **v31;
  int v32;
  __int16 *v33;
  __int16 v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned __int8 *v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  JSC::B3::Air *v54;
  WTF *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _OWORD *v62;
  int v63;
  uint64_t v64;
  WTF *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t i;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  JSC::B3::Air::Code *v115;
  WTF *v116;
  uint64_t v117;
  __int128 *v118;
  __int128 v119;
  __int128 v120;
  int v121;
  char v122;
  char v123;
  char v124;
  uint64_t v125;
  WTF *v126;
  uint64_t v127;
  _QWORD v128[12];
  _BYTE v129[12];
  _QWORD v130[3];
  uint64_t v131;
  WTF *v132;
  _BYTE *v133;
  _BYTE v134[9];

  JSC::B3::Air::PhaseScope::PhaseScope((uint64_t)v130, this, (uint64_t)"simplifyCFG", 12, a5, a6, a7, a8);
  v16 = *((_DWORD *)this + 27);
  if (!v16)
  {
    v123 = 0;
    goto LABEL_80;
  }
  v123 = 0;
  do
  {
    v17 = 0;
    v18 = v16;
    while (!*((_QWORD *)this[12] + v17))
    {
      if (v16 == ++v17)
        goto LABEL_80;
    }
    if (v16 == (_DWORD)v17)
      break;
    v124 = 0;
    LODWORD(v19) = v16;
    do
    {
      if (v19 <= v17)
      {
        __break(0xC471u);
        JUMPOUT(0x1980EF4F4);
      }
      v20 = this[12];
      v21 = *((_QWORD *)v20 + v17);
      if (HIBYTE(qword_1ECF4C32A))
      {
        v108 = 0;
        while (!*((_QWORD *)v20 + v108))
        {
          if (v19 == ++v108)
            goto LABEL_9;
        }
        while ((_DWORD)v19 != (_DWORD)v108)
        {
          if (v19 <= v108)
          {
            __break(0xC471u);
            JUMPOUT(0x1980EF534);
          }
          v109 = *((_QWORD *)v20 + v108);
          v110 = *(unsigned int *)(v109 + 36);
          if ((_DWORD)v110)
          {
            for (i = 0; i != v110; ++i)
            {
              v112 = *(_QWORD *)(*(_QWORD *)(v109 + 24) + 16 * i);
              v113 = *(unsigned int *)(v112 + 84);
              if (!(_DWORD)v113)
              {
LABEL_131:
                __break(0xC471u);
                JUMPOUT(0x1980EF3F4);
              }
              v114 = *(_QWORD **)(v112 + 72);
              while (*v114 != v109)
              {
                ++v114;
                if (!--v113)
                  goto LABEL_131;
              }
            }
          }
          v108 = (v108 + 1);
          if (v19 > v108)
          {
            while (!*((_QWORD *)v20 + v108))
            {
              if (v19 == ++v108)
                goto LABEL_9;
            }
          }
        }
      }
LABEL_9:
      v22 = *(unsigned int *)(v21 + 36);
      if (!(_DWORD)v22)
        goto LABEL_38;
      v23 = 0;
      v24 = v21 + 24;
      do
      {
        if (v23 >= *(unsigned int *)(v21 + 36))
        {
          __break(0xC471u);
          JUMPOUT(0x1980EF4CCLL);
        }
        v25 = (uint64_t *)(*(_QWORD *)(v21 + 24) + 16 * v23);
        v26 = *v25;
        if (*v25 != v21 && *(_DWORD *)(v26 + 20) == 1 && *(_WORD *)(*(_QWORD *)(v26 + 8) + 120) == 329)
        {
          if (!*(_DWORD *)(v26 + 36))
          {
            __break(0xC471u);
            JUMPOUT(0x1980EF4FCLL);
          }
          v49 = **(_QWORD **)(v26 + 24);
          if (v49 != v26)
          {
            v126 = (WTF *)v21;
            v50 = (_QWORD *)(v49 + 72);
            v51 = *(unsigned int *)(v49 + 84);
            if ((_DWORD)v51)
            {
              v27 = (_QWORD *)*v50;
              v28 = *(unsigned int *)(v49 + 84);
              while (*v27 != v21)
              {
                ++v27;
                if (!--v28)
                  goto LABEL_20;
              }
            }
            else
            {
LABEL_20:
              if ((_DWORD)v51 == *(_DWORD *)(v49 + 80))
              {
                v53 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v50, v51 + 1, (unint64_t)&v126);
                v51 = *(unsigned int *)(v49 + 84);
                *(_QWORD *)(*(_QWORD *)(v49 + 72) + 8 * v51) = *v53;
              }
              else
              {
                *(_QWORD *)(*v50 + 8 * v51) = v21;
              }
              *(_DWORD *)(v49 + 84) = v51 + 1;
            }
            *v25 = v49;
            v124 = 1;
          }
        }
        ++v23;
      }
      while (v23 != v22);
      v29 = *(unsigned int *)(v21 + 36);
      if (v29 > 1)
      {
        v30 = *(unsigned int *)(v21 + 20);
        if (!(_DWORD)v30)
        {
          __break(0xC471u);
          JUMPOUT(0x1980EF51CLL);
        }
        v31 = (_QWORD **)(*(_QWORD *)(v21 + 8) + ((v30 - 1) << 7));
        if ((*((_BYTE *)v31 + 122) & 1) != 0)
          goto LABEL_38;
        v33 = (__int16 *)(v31 + 15);
        v32 = *((__int16 *)v31 + 60);
        if (v32 != 448)
        {
          v34 = *((_WORD *)v31 + 60);
          switch(v34)
          {
            case 123:
            case 125:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 238:
            case 239:
            case 240:
            case 241:
            case 242:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
            case 250:
            case 251:
            case 252:
            case 253:
            case 254:
            case 255:
            case 256:
            case 257:
            case 258:
            case 259:
            case 260:
            case 261:
            case 262:
            case 263:
            case 264:
            case 265:
            case 266:
            case 267:
            case 270:
            case 271:
            case 272:
            case 273:
            case 274:
            case 275:
            case 276:
            case 277:
            case 278:
            case 279:
            case 280:
            case 281:
            case 326:
            case 327:
            case 328:
              goto LABEL_38;
            case 124:
            case 126:
            case 128:
            case 130:
            case 132:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 195:
            case 196:
            case 197:
            case 198:
            case 199:
            case 200:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 268:
            case 269:
            case 282:
            case 283:
            case 284:
            case 285:
            case 286:
            case 287:
            case 288:
            case 289:
            case 290:
            case 291:
            case 292:
            case 293:
            case 294:
            case 295:
            case 296:
            case 297:
            case 298:
            case 299:
            case 300:
            case 301:
            case 302:
            case 303:
            case 304:
            case 305:
            case 306:
            case 307:
            case 308:
            case 309:
            case 310:
            case 311:
            case 312:
            case 313:
            case 314:
            case 315:
            case 316:
            case 317:
            case 318:
            case 319:
            case 320:
            case 321:
            case 322:
            case 323:
            case 324:
            case 325:
              goto LABEL_30;
            default:
              if ((v32 - 449) >= 3)
                goto LABEL_30;
              break;
          }
          goto LABEL_38;
        }
        if (!*((_DWORD *)v31 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x1980EF564);
        }
        if (((*(uint64_t (**)(_QWORD, _QWORD **))(*(_QWORD *)**v31 + 104))(**v31, v31) & 1) != 0)
        {
          v29 = *(unsigned int *)(v21 + 36);
          goto LABEL_37;
        }
        v32 = *v33;
        v34 = *v33;
LABEL_30:
        v134[0] = 0;
        v133 = v134;
        if ((v32 - 446) > 5)
        {
          v41 = *((unsigned int *)v31 + 3);
          if ((_DWORD)v41)
          {
            v35 = 0;
            v42 = (unsigned __int8 *)&JSC::B3::Air::g_formTable + 21 * v34 + ((unint64_t)((v41 - 1) * v41) >> 1);
            do
            {
              v44 = *v42++;
              v43 = v44;
              if ((v44 >> 5) - 1 >= 5)
              {
                __break(0xC471u);
                JUMPOUT(0x1980EF42CLL);
              }
              if ((v43 & 0xFu) - 4 <= 6)
              {
                v35 = 1;
                v134[0] = 1;
              }
              --v41;
            }
            while (v41);
            goto LABEL_32;
          }
          v29 = *(unsigned int *)(v21 + 36);
        }
        else
        {
          v126 = (WTF *)WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::Inst::hasArgEffects(void)::$_0>::implFunction;
          v127 = (uint64_t)&v126;
          v128[0] = &v133;
          JSC::B3::Air::Inst::forEachArgCustom((uint64_t)v31, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::Inst::hasArgEffects(void)::$_0>::implFunction, (uint64_t)&v126);
          v35 = v134[0];
LABEL_32:
          v29 = *(unsigned int *)(v21 + 36);
          if (v35)
            goto LABEL_37;
        }
        if (!v29)
        {
          __break(0xC471u);
          JUMPOUT(0x1980EF514);
        }
        v36 = v29 - 1;
        if (v29 == 1)
        {
LABEL_90:
          v57 = *(unsigned int *)(v21 + 20);
          if (!(_DWORD)v57)
          {
            __break(0xC471u);
            JUMPOUT(0x1980EF53CLL);
          }
          v58 = *(_QWORD *)(*(_QWORD *)(v21 + 8) + (v57 << 7) - 16);
          v121 &= 0xFFFFFFFC;
          v126 = (WTF *)v128;
          v127 = 3;
          *(_QWORD *)v129 = v58;
          *(_DWORD *)&v129[8] = (v121 << 16) | 0x149;
          v59 = *(unsigned int *)(v21 + 20);
          if (!(_DWORD)v59)
          {
            __break(0xC471u);
            JUMPOUT(0x1980EF544);
          }
          v60 = *(_QWORD *)(v21 + 8) + ((v59 - 1) << 7);
          v62 = (_OWORD *)(v60 + 16);
          v61 = *(_QWORD *)v60;
          if (*(_QWORD *)v60 != v60 + 16)
          {
            if (v61)
            {
              *(_QWORD *)v60 = 0;
              *(_DWORD *)(v60 + 8) = 0;
              WTF::fastFree(v61, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
            }
            *(_QWORD *)v60 = v62;
            v116 = v126;
            if (v126 == (WTF *)v128)
            {
              if (HIDWORD(v127))
              {
                v117 = 32 * HIDWORD(v127);
                v118 = (__int128 *)v128;
                do
                {
                  v119 = *v118;
                  v120 = v118[1];
                  v118 += 2;
                  *v62 = v119;
                  v62[1] = v120;
                  v62 += 2;
                  v117 -= 32;
                }
                while (v117);
              }
            }
            else
            {
              v126 = (WTF *)v128;
              *(_QWORD *)v60 = v116;
            }
          }
          *(_DWORD *)(v60 + 8) = v127;
          v63 = HIDWORD(v127);
          HIDWORD(v127) = 0;
          *(_DWORD *)(v60 + 12) = v63;
          v64 = *(_QWORD *)v129;
          *(_DWORD *)(v60 + 119) = *(_DWORD *)&v129[7];
          *(_QWORD *)(v60 + 112) = v64;
          v65 = v126;
          if (v128 != (_QWORD *)v126 && v126)
          {
            v126 = 0;
            LODWORD(v127) = 0;
            WTF::fastFree((unint64_t)v65, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
          }
          WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(v21 + 24, 1uLL, (uint64_t)v10, v11, v12, v13, v14, v15);
          v29 = *(unsigned int *)(v21 + 36);
          if (!(_DWORD)v29)
          {
            __break(0xC471u);
            JUMPOUT(0x1980EF54CLL);
          }
          *(_BYTE *)(*(_QWORD *)v24 + 8) = 0;
          v124 = 1;
        }
        else
        {
          v37 = (_QWORD *)(*(_QWORD *)v24 + 16);
          while (*v37 == **(_QWORD **)v24)
          {
            v37 += 2;
            if (!--v36)
              goto LABEL_90;
          }
        }
      }
LABEL_37:
      if (v29 == 1)
      {
        v38 = *(unsigned int *)(v21 + 20);
        if (!(_DWORD)v38)
        {
          __break(0xC471u);
          JUMPOUT(0x1980EF524);
        }
        v39 = *(_QWORD *)(v21 + 8) + ((v38 - 1) << 7);
        if ((JSC::B3::Air::Inst::hasNonArgNonControlEffects((JSC::B3::Air::Inst *)v39) & 1) == 0)
        {
          v134[0] = 0;
          v133 = v134;
          if ((*(__int16 *)(v39 + 120) - 446) > 5)
          {
            v45 = *(unsigned int *)(v39 + 12);
            if ((_DWORD)v45)
            {
              v40 = 0;
              v46 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
                  + 21 * *(__int16 *)(v39 + 120)
                  + ((unint64_t)((v45 - 1) * v45) >> 1);
              do
              {
                v48 = *v46++;
                v47 = v48;
                if ((v48 >> 5) - 1 >= 5)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980EF44CLL);
                }
                if ((v47 & 0xFu) - 4 <= 6)
                {
                  v40 = 1;
                  v134[0] = 1;
                }
                --v45;
              }
              while (v45);
              goto LABEL_46;
            }
          }
          else
          {
            v126 = (WTF *)WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::Inst::hasArgEffects(void)::$_0>::implFunction;
            v127 = (uint64_t)&v126;
            v128[0] = &v133;
            JSC::B3::Air::Inst::forEachArgCustom(v39, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::Inst::hasArgEffects(void)::$_0>::implFunction, (uint64_t)&v126);
            v40 = v134[0];
LABEL_46:
            if (v40)
              goto LABEL_38;
          }
          if (!*(_DWORD *)(v21 + 36))
          {
            __break(0xC471u);
            JUMPOUT(0x1980EF52CLL);
          }
          v52 = **(_QWORD **)(v21 + 24);
          if (v52 != v21 && *(_DWORD *)(v52 + 84) == 1)
          {
            if (**(_QWORD **)(v52 + 72) != v21)
            {
              __break(0xC471u);
              JUMPOUT(0x1980EF4ECLL);
            }
            WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v126, v21 + 8);
            v125 = *(_QWORD *)v129;
            v73 = v126;
            if (v128 != (_QWORD *)v126 && v126)
            {
              v126 = 0;
              LODWORD(v127) = 0;
              WTF::fastFree((unint64_t)v73, v66, v67, v68, v69, v70, v71, v72);
            }
            WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v21 + 8, (*(_DWORD *)(v52 + 20) + *(_DWORD *)(v21 + 20)));
            v80 = *(_QWORD *)(v52 + 8);
            v81 = *(unsigned int *)(v52 + 20);
            if ((_DWORD)v81)
            {
              v82 = v81 << 7;
              do
              {
                JSC::B3::Air::BasicBlock::appendInst<JSC::B3::Air::Inst>(v21, v80);
                v80 += 128;
                v82 -= 128;
              }
              while (v82);
            }
            WTF::VectorBuffer<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::FastMalloc>::adopt(v21 + 24, (_DWORD *)(v52 + 24), v74, v75, v76, v77, v78, v79);
            WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(v52 + 8, 1uLL, v83, v84, v85, v86, v87, v88);
            v126 = (WTF *)v128;
            v127 = 3;
            *(_QWORD *)v129 = v125;
            *(_DWORD *)&v129[8] = ((((v122 & 0xFC) >> 2) & 0x3F) << 18) | 0x1BD;
            v95 = *(unsigned int *)(v52 + 20);
            if (!(_DWORD)v95)
            {
              __break(0xC471u);
              JUMPOUT(0x1980EF554);
            }
            JSC::B3::Air::Inst::operator=(*(_QWORD *)(v52 + 8) + (v95 << 7) - 128, &v126, v89, v90, v91, v92, v93, v94);
            v103 = v126;
            if (v128 != (_QWORD *)v126 && v126)
            {
              v126 = 0;
              LODWORD(v127) = 0;
              WTF::fastFree((unint64_t)v103, v96, v97, v98, v99, v100, v101, v102);
            }
            v122 &= 0xFCu;
            WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v52 + 24, 0, v97, v98, v99, v100, v101, v102);
            v104 = *(unsigned int *)(v21 + 36);
            if ((_DWORD)v104)
            {
              v105 = 0;
              v106 = 0;
              v107 = 16 * v104;
              do
              {
                if (v106 >= *(unsigned int *)(v21 + 36))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1980EF55CLL);
                }
                JSC::B3::Air::BasicBlock::replacePredecessor(*(JSC::B3::Air::BasicBlock **)(*(_QWORD *)(v21 + 24) + v105), (JSC::B3::Air::BasicBlock *)v52, (JSC::B3::Air::BasicBlock *)v21);
                ++v106;
                v105 += 16;
                v124 = 1;
              }
              while (v107 != v105);
            }
            else
            {
              v124 = 1;
            }
          }
        }
      }
LABEL_38:
      v17 = (v17 + 1);
      v19 = *((unsigned int *)this + 27);
      if (v19 > v17)
      {
        while (!*((_QWORD *)this[12] + v17))
        {
          if (v19 == ++v17)
          {
            LODWORD(v17) = *((_DWORD *)this + 27);
            break;
          }
        }
      }
    }
    while (v18 != (_DWORD)v17);
    if ((v124 & 1) == 0)
      break;
    JSC::B3::Air::Code::resetReachability((JSC::B3::Air::Code *)this, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
    v16 = *((_DWORD *)this + 27);
    v123 = 1;
  }
  while (v16);
LABEL_80:
  v54 = (JSC::B3::Air *)v130[0];
  *(_QWORD *)(v130[0] + 304) = v130[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v132)
      v115 = (WTF *)((char *)v132 + 16);
    else
      v115 = 0;
    JSC::B3::Air::validate(v54, v115, v10, v11, v12, v13, v14, v15);
  }
  v55 = v132;
  v132 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
      WTF::fastFree((unint64_t)v55, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
    else
      --*(_DWORD *)v55;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v131);
  return v123 & 1;
}

void WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v2 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v2
    || (JSC::B3::Air::Inst::Inst(a1, *(_QWORD *)a2 + (v2 << 7) - 128), v10 = *(unsigned int *)(a2 + 12), !(_DWORD)v10))
  {
    __break(0xC471u);
    JUMPOUT(0x1980EF91CLL);
  }
  v11 = v10 - 1;
  WTF::VectorTypeOperations<JSC::B3::Air::Inst>::destruct((unint64_t *)(*(_QWORD *)a2 + ((v10 - 1) << 7)), (unint64_t *)(*(_QWORD *)a2 + (v10 << 7)), v4, v5, v6, v7, v8, v9);
  *(_DWORD *)(a2 + 12) = v11;
}

uint64_t JSC::B3::Air::Special::shouldTryAliasingDef(JSC::B3::Air::Special *this, JSC::B3::Air::Inst *a2)
{
  return 0;
}

uint64_t JSC::B3::Air::Special::isTerminal(JSC::B3::Air::Special *this, JSC::B3::Air::Inst *a2)
{
  return 0;
}

uint64_t JSC::B3::Air::Special::hasNonArgEffects(JSC::B3::Air::Special *this, JSC::B3::Air::Inst *a2)
{
  return 1;
}

uint64_t JSC::B3::Air::Special::hasNonArgNonControlEffects(JSC::B3::Air::Special *this, JSC::B3::Air::Inst *a2)
{
  return 1;
}

uint64_t JSC::B3::Air::Special::deepDump(JSC::B3::Air::Special *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  WTF::PrintStream *v6;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v5, "%s", "&");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  (*(void (**)(JSC::B3::Air::Special *, WTF::PrintStream *))(*(_QWORD *)this + 112))(this, v4);
  if (*((_DWORD *)this + 2) != -1)
  {
    v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printf(v6, "%u", *((_DWORD *)this + 2));
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  }
  WTF::PrintStream::printf(v4, "%s", ": ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  return (*(uint64_t (**)(JSC::B3::Air::Special *, WTF::PrintStream *))(*(_QWORD *)this + 120))(this, a2);
}

void _ZN3WTF10bubbleSortIPN3JSC2B33Air14PhaseInsertionEZNS_10bubbleSortIS5_EEvT_S7_EUlRS7_RT0_E_EEvS7_S7_RKS9_(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  _BOOL4 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 **v35;
  __int128 *v36;
  __int128 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  unsigned int v48;
  void *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int *v70;
  _BOOL4 v71;
  unint64_t v72;
  _OWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  __int128 v77;
  __int128 *v78;
  __int128 *v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  __int128 *v105;
  _BYTE *v106;
  int v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  _BYTE v111[96];
  _BYTE v112[11];
  unsigned int v113;

  v8 = a1;
  v9 = 0;
  v99 = 0;
  v100 = 0;
  v95 = a1 - 120;
  v96 = (uint64_t)&a2[-a1 - 264];
  v10 = a1;
  do
  {
    v11 = 0x8E38E38E38E38E39 * ((uint64_t)&a2[-v10] >> 4);
    if (v11 < 2)
      break;
    v12 = 0;
    v13 = 0;
    v102 = v10;
    v14 = *(_DWORD *)(v10 + 16 * ((uint64_t)&a2[-v10] >> 4) - 8);
    v15 = v8 + v100;
    v16 = 0x8E38E38E38E38E39 * ((uint64_t)&a2[-v10] >> 4);
    v97 = v9;
    v98 = a2;
    while (2)
    {
      v17 = 0;
      v18 = v96 - 144 * v12;
      v19 = v9 + 144 * v16;
      while (1)
      {
        v20 = v8 + v19;
        v21 = (unint64_t *)(v8 + v19 - 288);
        v22 = *(_QWORD *)(v8 + v19 - 144);
        v23 = *v21;
        v24 = *(_DWORD *)(v8 + v19 - 152);
        v25 = v14 < v24;
        if (v22 != *v21)
          v25 = v22 < *v21;
        if (v25)
          break;
        ++v17;
        v18 -= 144;
        v19 -= 144;
        v14 = v24;
        if (~v12 + v11 == v17)
        {
          if ((v13 & 1) == 0)
            return;
          goto LABEL_37;
        }
      }
      v103 = *(_QWORD *)(v8 + v19 - 144);
      v105 = (__int128 *)v111;
      v107 = 3;
      v26 = *(_QWORD *)(v20 - 136);
      v27 = v20 - 120;
      if (v20 - 120 == v26)
      {
        v28 = *(unsigned int *)(v8 + v19 - 124);
        if ((_DWORD)v28)
        {
          v29 = 0;
          do
          {
            v30 = &v111[v29];
            v31 = *(_OWORD *)(v26 + v29 + 16);
            *v30 = *(_OWORD *)(v26 + v29);
            v30[1] = v31;
            v29 += 32;
          }
          while (32 * v28 != v29);
        }
      }
      else
      {
        *(_QWORD *)(v20 - 136) = v27;
        v105 = (__int128 *)v26;
        v56 = *(_DWORD *)(v8 + v19 - 128);
        LODWORD(v28) = *(_DWORD *)(v8 + v19 - 124);
        *(_DWORD *)(v8 + v19 - 128) = 3;
        v107 = v56;
        v26 = v20 - 120;
      }
      v32 = v8 + v19;
      v34 = v8 + v19 - 24;
      v33 = *(_QWORD *)v34;
      *(_DWORD *)(v8 + v19 - 124) = 0;
      *(_QWORD *)v112 = v33;
      *(_DWORD *)&v112[7] = *(_DWORD *)(v8 + v19 - 17);
      v109 = v28;
      v113 = *(_DWORD *)(v20 - 8);
      *(_QWORD *)(v20 - 144) = v23;
      if (v27 != v26)
      {
        if (v26)
        {
          *(_QWORD *)(v20 - 136) = 0;
          *(_DWORD *)(v8 + v19 - 128) = 0;
          v92 = v11;
          v93 = v16;
          v57 = v15;
          WTF::fastFree(v26, a2, (uint64_t)v112, v10, v11, v15, v16, a8);
          v11 = v92;
          v16 = v93;
          v15 = v57;
          v10 = v102;
          v8 = a1;
        }
        *(_QWORD *)(v20 - 136) = v27;
      }
      v35 = (__int128 **)(v34 - 256);
      v36 = *(__int128 **)(v34 - 256);
      v37 = (__int128 *)(v32 - 264);
      if (v37 == v36)
      {
        v38 = *(unsigned int *)(v8 + v19 - 268);
        if ((_DWORD)v38)
        {
          v39 = 32 * v38;
          v40 = v95;
          do
          {
            v41 = (_OWORD *)(v40 + v19);
            v42 = *v36;
            v43 = v36[1];
            v36 += 2;
            *v41 = v42;
            v41[1] = v43;
            v40 += 32;
            v39 -= 32;
          }
          while (v39);
          v36 = *v35;
        }
      }
      else
      {
        *v35 = v37;
        *(_QWORD *)(v20 - 136) = v36;
        v36 = v37;
      }
      v45 = v8 + v19 - 168;
      v44 = *(_QWORD *)v45;
      v46 = (int *)(v45 - 104);
      v47 = *(_QWORD *)(v45 - 104);
      *(_DWORD *)(v45 - 100) = 0;
      *(_QWORD *)(v45 + 40) = v47;
      *(_QWORD *)v34 = v44;
      *(_DWORD *)(v34 + 7) = *(_DWORD *)(v45 + 7);
      *(_DWORD *)(v20 - 8) = *(_DWORD *)(v20 - 152);
      *v21 = v103;
      if (v37 != v36)
      {
        if (v36)
        {
          *v35 = 0;
          *v46 = 0;
          v58 = v11;
          v59 = v15;
          v94 = v16;
          WTF::fastFree((unint64_t)v36, a2, (uint64_t)v112, v10, v11, v15, v16, a8);
          v16 = v94;
          v15 = v59;
          v11 = v58;
          v10 = v102;
          v8 = a1;
        }
        *v35 = v37;
      }
      if (v105 == (__int128 *)v111)
      {
        v48 = v109;
        if (v109)
        {
          v49 = (void *)(v15 + v18);
          v50 = v11;
          v51 = v15;
          v52 = v16;
          memcpy(v49, v111, 32 * v109);
          v16 = v52;
          v15 = v51;
          v11 = v50;
          v10 = v102;
          v8 = a1;
        }
        v53 = v107;
      }
      else
      {
        *v35 = v105;
        v53 = v107;
        v48 = v109;
      }
      v9 = v97;
      a2 = v98;
      v16 += ~v17;
      *v46 = v53;
      *(_DWORD *)(v45 - 100) = v48;
      *(_QWORD *)v45 = *(_QWORD *)v112;
      *(_DWORD *)(v45 + 7) = *(_DWORD *)&v112[7];
      v14 = v113;
      *(_DWORD *)(v20 - 152) = v113;
      v54 = v11 - v12;
      v12 += v17 + 1;
      v55 = v54 - 2;
      v13 = 1;
      if (v55 != v17)
        continue;
      break;
    }
LABEL_37:
    v60 = v10 + 144;
    v61 = 0x8E38E38E38E38E39 * ((uint64_t)&a2[-v10 - 144] >> 4);
    v62 = v61 - 2;
    if (v61 < 2)
      break;
    v63 = 0;
    v64 = 0;
    v65 = 1;
    do
    {
      v66 = v60 + 144 * v65;
      v67 = v10 + 144 * v65;
      v68 = *(_QWORD *)v67;
      v69 = *(_DWORD *)(v66 + 136);
      v70 = (unsigned int *)(v67 + 136);
      v71 = v69 < *(_DWORD *)(v67 + 136);
      if (*(_QWORD *)v66 != *(_QWORD *)v67)
        v71 = *(_QWORD *)v66 < *(_QWORD *)v67;
      if (v71)
      {
        v104 = *(_QWORD *)v66;
        v106 = v111;
        v108 = 3;
        v72 = *(_QWORD *)(v66 + 8);
        v73 = (_OWORD *)(v66 + 24);
        if (v72 == v66 + 24)
        {
          v74 = *(unsigned int *)(v66 + 20);
          if ((_DWORD)v74)
          {
            v75 = 0;
            do
            {
              v76 = &v111[v75];
              v77 = *(_OWORD *)(v72 + v75 + 16);
              *v76 = *(_OWORD *)(v72 + v75);
              v76[1] = v77;
              v75 += 32;
            }
            while (32 * v74 != v75);
          }
        }
        else
        {
          *(_QWORD *)(v66 + 8) = v73;
          v106 = (_BYTE *)v72;
          v89 = *(_DWORD *)(v66 + 16);
          LODWORD(v74) = *(_DWORD *)(v66 + 20);
          *(_DWORD *)(v66 + 16) = 3;
          v108 = v89;
          v72 = v66 + 24;
        }
        *(_DWORD *)(v66 + 20) = 0;
        *(_QWORD *)v112 = *(_QWORD *)(v66 + 120);
        *(_DWORD *)&v112[7] = *(_DWORD *)(v66 + 127);
        v110 = v74;
        v113 = v69;
        *(_QWORD *)v66 = v68;
        if ((_OWORD *)v72 != v73)
        {
          if (v72)
          {
            *(_QWORD *)(v66 + 8) = 0;
            *(_DWORD *)(v66 + 16) = 0;
            v90 = v62;
            WTF::fastFree(v72, a2, (uint64_t)v112, v10, v62, v15, v16, a8);
            v62 = v90;
            v10 = v102;
            v8 = a1;
          }
          *(_QWORD *)(v66 + 8) = v73;
        }
        v78 = *(__int128 **)(v67 + 8);
        v79 = (__int128 *)(v67 + 24);
        if (v78 == (__int128 *)(v67 + 24))
        {
          v80 = *(unsigned int *)(v67 + 20);
          if ((_DWORD)v80)
          {
            v81 = 32 * v80;
            do
            {
              v82 = *v78;
              v83 = v78[1];
              v78 += 2;
              *v73 = v82;
              v73[1] = v83;
              v73 += 2;
              v81 -= 32;
            }
            while (v81);
            v78 = *(__int128 **)(v67 + 8);
          }
        }
        else
        {
          *(_QWORD *)(v67 + 8) = v79;
          *(_QWORD *)(v66 + 8) = v78;
          v78 = (__int128 *)(v67 + 24);
        }
        v84 = *(_QWORD *)(v67 + 16);
        *(_DWORD *)(v67 + 20) = 0;
        *(_QWORD *)(v66 + 16) = v84;
        *(_QWORD *)(v66 + 120) = *(_QWORD *)(v67 + 120);
        *(_DWORD *)(v66 + 127) = *(_DWORD *)(v67 + 127);
        *(_DWORD *)(v66 + 136) = *v70;
        *(_QWORD *)v67 = v104;
        if (v78 != v79)
        {
          if (v78)
          {
            *(_QWORD *)(v67 + 8) = 0;
            *(_DWORD *)(v67 + 16) = 0;
            v91 = v62;
            WTF::fastFree((unint64_t)v78, a2, (uint64_t)v112, v10, v62, v15, v16, a8);
            v62 = v91;
            v10 = v102;
            v8 = a1;
          }
          *(_QWORD *)(v67 + 8) = v79;
        }
        if (v106 == v111)
        {
          v85 = v110;
          if (v110)
          {
            v86 = v62;
            memcpy((void *)(v8 + 144 * v99 + 168 + 144 * v63), v111, 32 * v110);
            v62 = v86;
            v10 = v102;
            v8 = a1;
          }
          v87 = v108;
        }
        else
        {
          *(_QWORD *)(v67 + 8) = v106;
          v87 = v108;
          v85 = v110;
        }
        *(_DWORD *)(v67 + 16) = v87;
        *(_DWORD *)(v67 + 20) = v85;
        *(_QWORD *)(v67 + 120) = *(_QWORD *)v112;
        *(_DWORD *)(v67 + 127) = *(_DWORD *)&v112[7];
        *v70 = v113;
        v64 = 1;
      }
      ++v65;
    }
    while (v63++ != v62);
    a2 = v98 - 144;
    ++v99;
    v100 -= 144;
    v9 = v97 + 144;
    v10 = v60;
  }
  while ((v64 & 1) != 0);
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::Reg,JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_0>(JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_0 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  char v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  _QWORD *v25;
  unsigned int v26;
  int v27;
  _QWORD *v29;
  unsigned int v30;
  int v31;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;

  v6 = **(uint64_t ****)(result + 16);
  v7 = *v6;
  v8 = v6[1];
  switch(*(_BYTE *)(a2 + 8))
  {
    case 1:
      v9 = *(_DWORD *)(a2 + 16);
      if (v9 > 0xFFFFFFDF || (v9 - 1) <= 0x1F)
      {
        v11 = v9 + 127;
        v12 = (31 - v9);
        if (v9 <= 0)
          v11 = 31 - v9;
        v13 = v11 & 0x7F;
        if (a3 > 0xB || (v12 = (1 << a3), v5 = 3900, (v12 & 0xF3C) == 0))
        {
          if (v13 >= 0x40)
            goto LABEL_87;
          v12 = *v7 + 32 * *v8;
          v5 = 1 << v13;
          *(_QWORD *)v12 |= 1 << v13;
          if (a5 >= 4 && (v11 & 0x60) == 0x20)
            goto LABEL_88;
        }
        goto LABEL_13;
      }
      return result;
    case 6:
    case 7:
    case 8:
      v17 = *(_DWORD *)(a2 + 16);
      if (v17 > 0xFFFFFFDF || (v17 - 1) <= 0x1F)
      {
        v11 = v17 + 127;
        v12 = (31 - v17);
        if (v17 <= 0)
          v11 = 31 - v17;
        v13 = v11 & 0x7F;
        if (v13 < 0x40)
        {
          v19 = (_QWORD *)(*v7 + 32 * *v8);
          *v19 |= 1 << v13;
          if (a3 == 11 && a5 >= 4 && (v11 & 0x60) == 0x20)
            v19[1] |= 1 << v13;
          goto LABEL_17;
        }
        goto LABEL_87;
      }
      return result;
    case 0xB:
      v23 = *(_DWORD *)(a2 + 16);
      if (v23 > 0xFFFFFFDF || (v23 - 1) <= 0x1F)
      {
        v11 = v23 + 127;
        v12 = (31 - v23);
        if (v23 <= 0)
          v11 = 31 - v23;
        v13 = v11 & 0x7F;
        if (v13 >= 0x40)
          goto LABEL_87;
        v25 = (_QWORD *)(*v7 + 32 * *v8);
        v5 = 1 << v13;
        *v25 |= 1 << v13;
        if (a3 == 11 && a5 >= 4 && (v11 & 0x60) == 0x20)
        {
          v5 |= v25[1];
          v25[1] = v5;
        }
        if ((v11 & 0x60) != 0)
          v26 = (char)(31 - v13);
        else
          v26 = v13 + 1;
        *(_DWORD *)(a2 + 16) = v26;
      }
      v27 = *(_DWORD *)(a2 + 20);
      if (v27 > 0xFFFFFFDF || (v27 - 1) <= 0x1F)
      {
        v11 = v27 + 127;
        v12 = (31 - v27);
        if (v27 <= 0)
          v11 = 31 - v27;
        v13 = v11 & 0x7F;
        if (v13 >= 0x40)
          goto LABEL_87;
        v29 = (_QWORD *)(*v7 + 32 * *v8);
        *v29 |= 1 << v13;
        if (a3 == 11 && a5 >= 4 && (v11 & 0x60) == 0x20)
          v29[1] |= 1 << v13;
        v30 = (char)(31 - v13);
        if ((v11 & 0x60) == 0)
          v30 = v13 + 1;
        *(_DWORD *)(a2 + 20) = v30;
      }
      return result;
    case 0xC:
    case 0xD:
      v31 = *(_DWORD *)(a2 + 16);
      if (v31 <= 0xFFFFFFDF && (v31 - 1) > 0x1F)
        return result;
      v11 = v31 + 127;
      v12 = (31 - v31);
      if (v31 <= 0)
        v11 = 31 - v31;
      v13 = v11 & 0x7F;
      if (v13 >= 0x40)
      {
        while (1)
        {
LABEL_87:
          while (1)
          {
            __break(1u);
LABEL_88:
            v5 |= *(_QWORD *)(v12 + 8);
            *(_QWORD *)(v12 + 8) = v5;
LABEL_13:
            v12 = a3 - 8;
            if (v12 <= 2)
              break;
LABEL_14:
            if (a3 < 2)
              goto LABEL_15;
            if (a3 <= 0xB)
            {
              v12 = (1 << a3);
              v5 = 3056;
              if ((v12 & 0xBF0) != 0)
                goto LABEL_15;
            }
            if (v13 < 0x40)
            {
              v20 = *v7 + 32 * *v8;
              v5 = 1 << v13;
              v22 = *(_QWORD *)(v20 + 32);
              v21 = (uint64_t *)(v20 + 32);
              *v21 = v22 | (1 << v13);
              if (a5 >= 4 && (v13 & 0x60) == 0x20)
              {
                v5 |= v21[1];
                v21[1] = v5;
              }
LABEL_15:
              v12 = a3 & 0xFFFFFFFC;
              if ((_DWORD)v12 != 4)
              {
                if (v13 != 127)
                  goto LABEL_17;
                v14 = 0;
                goto LABEL_19;
              }
              if (v13 < 0x40)
              {
                v15 = *v8 + 1;
                v16 = *v7;
                *(_QWORD *)(v16 + 32 * v15 + 16) |= 1 << v13;
                if (a5 >= 4 && (v13 & 0x60) == 0x20)
                  *(_QWORD *)(v16 + 32 * v15 + 24) |= 1 << v13;
                goto LABEL_17;
              }
            }
          }
          if (v13 < 0x40)
          {
            v12 = *v8;
            v5 = *v7;
            *(_QWORD *)(*v7 + 32 * *v8 + 16) |= 1 << v13;
            if (a5 >= 4 && (v13 & 0x60) == 0x20)
            {
              v12 = v5 + 32 * v12;
              v5 = *(_QWORD *)(v12 + 24) | (1 << v13);
              *(_QWORD *)(v12 + 24) = v5;
            }
            goto LABEL_14;
          }
        }
      }
      v33 = *v8;
      v34 = *v7;
      v35 = (_QWORD *)(*v7 + 32 * v33);
      v36 = 1 << v13;
      *v35 |= 1 << v13;
      if (a3 == 11 && a5 >= 4 && (v11 & 0x60) == 0x20)
      {
        v35[1] |= v36;
        v38 = v34 + 32 * v33;
        *(_QWORD *)(v38 + 48) |= v36;
        v37 = (_QWORD *)(v38 + 56);
      }
      else
      {
        v37 = (_QWORD *)(v34 + 32 * v33 + 48);
      }
      *v37 |= v36;
LABEL_17:
      v14 = (char)(31 - v13);
      if ((v11 & 0x60) == 0)
        v14 = v13 + 1;
LABEL_19:
      *(_DWORD *)(a2 + 16) = v14;
      return result;
    default:
      return result;
  }
}

_QWORD *WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::Reg,JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_1>(JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  _QWORD *result;
  int v6;
  char v8;
  unsigned int v9;
  _QWORD *v10;
  int v11;
  char v13;
  int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;

  result = **(_QWORD ***)(a1 + 16);
  switch(*(_BYTE *)(a2 + 8))
  {
    case 1:
      v6 = *(_DWORD *)(a2 + 16);
      if (v6 > 0xFFFFFFDF || (v6 - 1) <= 0x1F)
      {
        v8 = v6 + 127;
        if (v6 <= 0)
          v8 = 31 - v6;
        v9 = v8 & 0x7F;
        if (a3 < 2 || a3 <= 0xB && ((1 << a3) & 0xBF0) != 0)
        {
          if (v9 == 127)
            goto LABEL_33;
        }
        else
        {
          if (v9 >= 0x40)
          {
            __break(1u);
            goto LABEL_33;
          }
          v10 = (_QWORD *)*result;
          *(_QWORD *)*result |= 1 << v9;
          if (a5 >= 4 && (v8 & 0x60) == 0x20)
            v10[1] |= 1 << v9;
        }
        if ((v8 & 0x60) == 0)
        {
          ++v9;
          goto LABEL_12;
        }
        LOBYTE(v9) = 31 - v9;
        goto LABEL_15;
      }
      break;
    case 6:
    case 7:
    case 8:
      v11 = *(_DWORD *)(a2 + 16);
      if (v11 > 0xFFFFFFDF || (v11 - 1) <= 0x1F)
      {
        v13 = v11 + 127;
        if (v11 <= 0)
          v13 = 31 - v11;
        v9 = v13 & 0x7F;
        if (v9 == 127)
        {
LABEL_33:
          v9 = 0;
        }
        else if ((v13 & 0x60) != 0)
        {
          LOBYTE(v9) = 31 - v9;
LABEL_15:
          v9 = (char)v9;
        }
        else
        {
          ++v9;
        }
LABEL_12:
        *(_DWORD *)(a2 + 16) = v9;
      }
      break;
    case 0xB:
      if (a3 == 11)
        v17 = a5;
      else
        v17 = 3;
      v18 = result;
      JSC::B3::Air::ArgThingHelper<JSC::Reg>::forEach<JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_1>(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(result, (int *)(a2 + 16), 0, v17);
      v14 = (int *)(a2 + 20);
      result = v18;
      v16 = 0;
      v15 = v17;
      goto LABEL_38;
    case 0xC:
    case 0xD:
      v14 = (int *)(a2 + 16);
      if (a3 == 11)
        v15 = a5;
      else
        v15 = 3;
      v16 = 6;
LABEL_38:
      result = JSC::B3::Air::ArgThingHelper<JSC::Reg>::forEach<JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_1>(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(result, v14, v16, v15);
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *JSC::B3::Air::ArgThingHelper<JSC::Reg>::forEach<JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_1>(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_1 const&)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(_QWORD *result, int *a2, unsigned int a3, unsigned int a4)
{
  int v4;
  char v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;

  v4 = *a2;
  if (*a2 > 0xFFFFFFDF || (*a2 - 1) <= 0x1F)
  {
    v6 = v4 + 127;
    if (v4 <= 0)
      v6 = 31 - v4;
    v7 = v6 & 0x7F;
    if (a3 < 2 || a3 <= 0xB && ((1 << a3) & 0xBF0) != 0)
    {
      if (v7 != 127)
      {
LABEL_9:
        if ((v6 & 0x60) != 0)
          v8 = (char)(31 - v7);
        else
          v8 = v7 + 1;
        goto LABEL_11;
      }
    }
    else
    {
      if (v7 < 0x40)
      {
        v9 = (_QWORD *)*result;
        *(_QWORD *)*result |= 1 << v7;
        if (a4 >= 4 && (v6 & 0x60) == 0x20)
          v9[1] |= 1 << v7;
        goto LABEL_9;
      }
      __break(1u);
    }
    v8 = 0;
LABEL_11:
    *a2 = v8;
  }
  return result;
}

int *WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEach<JSC::Reg,JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_2>(JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_2 const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(int *result, uint64_t a2, int a3)
{
  int v3;
  char v5;
  unsigned int v6;
  int v7;
  char v9;
  int v10;
  char v12;
  int v13;
  int v14;
  int v15;
  char v17;
  int v18;
  int v19;

  switch(*(_BYTE *)(a2 + 8))
  {
    case 1:
      v3 = *(_DWORD *)(a2 + 16);
      if (v3 > 0xFFFFFFDF || (v3 - 1) <= 0x1F)
      {
        v5 = v3 + 127;
        if (v3 <= 0)
          v5 = 31 - v3;
        v6 = v5 & 0x7F;
        if ((a3 - 8) <= 2)
        {
          if (v6 >= 0x40)
          {
            __break(1u);
            goto LABEL_53;
          }
          *(int8x16_t *)(***((_QWORD ***)result + 2) + 8) = vandq_s8(*(int8x16_t *)(***((_QWORD ***)result + 2) + 8), (int8x16_t)vdupq_n_s64(~(1 << v6)));
        }
        else if (v6 == 127)
        {
          goto LABEL_51;
        }
        if ((v5 & 0x60) == 0)
        {
          ++v6;
          goto LABEL_12;
        }
        LOBYTE(v6) = 31 - v6;
        goto LABEL_23;
      }
      break;
    case 6:
    case 7:
    case 8:
      v7 = *(_DWORD *)(a2 + 16);
      if (v7 > 0xFFFFFFDF || (v7 - 1) <= 0x1F)
      {
        v9 = v7 + 127;
        if (v7 <= 0)
          v9 = 31 - v7;
        v6 = v9 & 0x7F;
        if (v6 == 127)
        {
LABEL_51:
          v6 = 0;
        }
        else if ((v9 & 0x60) != 0)
        {
          LOBYTE(v6) = 31 - v6;
LABEL_23:
          v6 = (char)v6;
        }
        else
        {
          ++v6;
        }
LABEL_12:
        *(_DWORD *)(a2 + 16) = v6;
      }
      break;
    case 0xB:
      v10 = *(_DWORD *)(a2 + 16);
      if (v10 > 0xFFFFFFDF || (v10 - 1) <= 0x1F)
      {
        if (v10 <= 0)
          v12 = 31 - v10;
        else
          v12 = v10 + 127;
        v13 = v12 & 0x7F;
        if (v13 == 127)
        {
          v14 = 0;
        }
        else if ((v12 & 0x60) != 0)
        {
          v14 = (char)(31 - v13);
        }
        else
        {
          v14 = v13 + 1;
        }
        *(_DWORD *)(a2 + 16) = v14;
      }
      v15 = *(_DWORD *)(a2 + 20);
      if (v15 > 0xFFFFFFDF || (v15 - 1) <= 0x1F)
      {
        v17 = v15 + 127;
        if (v15 <= 0)
          v17 = 31 - v15;
        v18 = v17 & 0x7F;
        if (v18 == 127)
        {
          v19 = 0;
        }
        else if ((v17 & 0x60) != 0)
        {
          v19 = (char)(31 - v18);
        }
        else
        {
          v19 = v18 + 1;
        }
        *(_DWORD *)(a2 + 20) = v19;
      }
      break;
    case 0xC:
    case 0xD:
LABEL_53:
      result = JSC::B3::Air::ArgThingHelper<JSC::Reg>::forEach<JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_2>(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_2 const&)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()((int *)(a2 + 16));
      break;
    default:
      return result;
  }
  return result;
}

int *JSC::B3::Air::ArgThingHelper<JSC::Reg>::forEach<JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_2>(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width,JSC::B3::Air::RegLiveness::RegLiveness(JSC::B3::Air::Code &)::$_2 const&)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}::operator()(int *result)
{
  int v1;
  char v3;
  int v4;
  int v5;

  v1 = *result;
  if (*result > 0xFFFFFFDF || (*result - 1) <= 0x1F)
  {
    v3 = v1 + 127;
    if (v1 <= 0)
      v3 = 31 - v1;
    v4 = v3 & 0x7F;
    if (v4 == 127)
    {
      v5 = 0;
    }
    else if ((v3 & 0x60) != 0)
    {
      v5 = (char)(31 - v4);
    }
    else
    {
      v5 = v4 + 1;
    }
    *result = v5;
  }
  return result;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::reportUsedRegisters(JSC::B3::Air::Code &)::$_0>::implFunction(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  char v6;
  unsigned int v7;

  v3 = *(_QWORD *)(result + 16);
  if ((a3 - 8) < 3)
    goto LABEL_2;
  if ((a3 & 0xFFFFFFFC) == 4)
  {
    if (*(_BYTE *)(a2 + 8) != 1)
      goto LABEL_2;
    v4 = *(_DWORD *)(a2 + 16);
    if (v4 <= 0xFFFFFFDF && (v4 - 1) > 0x1F)
      goto LABEL_2;
    if (v4 <= 0)
      v6 = 31 - v4;
    else
      v6 = v4 - 1;
    v7 = v6 & 0x7F;
    if (v7 >= 0x40)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) >> v7) & 1) != 0)
    {
LABEL_2:
      **(_BYTE **)v3 = 0;
    }
  }
  return result;
}

void WTF::VectorBuffer<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::FastMalloc>::adopt(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  int v17;

  v11 = (_OWORD *)(a1 + 16);
  v10 = *(_QWORD *)a1;
  if ((_OWORD *)v10 != v11)
  {
    if (v10)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_QWORD *)a1 = v11;
  }
  v12 = *(__int128 **)a2;
  if (*(_DWORD **)a2 == a2 + 4)
  {
    v13 = a2[3];
    if ((_DWORD)v13)
    {
      v14 = 16 * v13;
      do
      {
        v15 = *v12++;
        *v11++ = v15;
        v14 -= 16;
      }
      while (v14);
    }
    v16 = a2[2];
  }
  else
  {
    *(_QWORD *)a2 = a2 + 4;
    *(_QWORD *)a1 = v12;
    v16 = a2[2];
    a2[2] = 2;
  }
  *(_DWORD *)(a1 + 8) = v16;
  v17 = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v17;
}

uint64_t JSC::B3::Air::StackSlot::setOffsetFromFP(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 16) = a2;
  return this;
}

unsigned int *JSC::B3::Air::assign(unsigned int *result, unsigned int ***a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int **v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int **v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int **v33;
  uint64_t v34;
  uint64_t v35;

  v2 = *result;
  v3 = 1;
  v4 = 2;
  v5 = 4;
  if (v2 > 4)
    v5 = 8;
  if ((_DWORD)v2 != 2)
    v4 = v5;
  if (v2 >= 2)
    v3 = v4;
  v6 = (v2 + v3 - 1) & -v3;
  v7 = -v6;
  v8 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v8 && (_DWORD)v2)
  {
    v9 = *a2;
    v10 = (uint64_t)&(*a2)[v8];
    v11 = v2 - v6;
    v12 = 8 * v8;
    v13 = 8 * v8;
    v14 = *a2;
    do
    {
      v15 = *((_QWORD *)*v14 + 2);
      if (v15)
      {
        v16 = **v14;
        if ((_DWORD)v16)
        {
          if (v15 + v16 > v7 && v11 > v15)
          {
            if (v2 <= 1)
            {
              v30 = *a2;
              do
              {
                v31 = *((_QWORD *)*v30 + 2);
                if (v31)
                {
                  v7 = v31 - v2;
                  v32 = v12;
                  v33 = v9;
                  while (1)
                  {
                    v34 = *((_QWORD *)*v33 + 2);
                    if (v34)
                    {
                      v35 = **v33;
                      if ((_DWORD)v35)
                      {
                        if (v34 + v35 > v7 && v31 > v34)
                          break;
                      }
                    }
                    ++v33;
                    v32 -= 8;
                    if (!v32)
                      goto LABEL_18;
                  }
                }
                ++v30;
              }
              while (v30 != (unsigned int **)v10);
            }
            else
            {
              v18 = 4;
              if (v2 > 4)
                v18 = 8;
              if ((_DWORD)v2 == 2)
                v18 = 2;
              v19 = -v18;
              v20 = v18 + v2;
              v21 = *a2;
              do
              {
                v22 = *((_QWORD *)*v21 + 2);
                if (v22)
                {
                  v23 = (v20 + ~v22) & v19;
                  v7 = -v23;
                  v24 = v2 - v23;
                  v25 = v12;
                  v26 = v9;
                  while (1)
                  {
                    v27 = *((_QWORD *)*v26 + 2);
                    if (v27)
                    {
                      v28 = **v26;
                      if ((_DWORD)v28)
                      {
                        if (v27 + v28 > v7 && v24 > v27)
                          break;
                      }
                    }
                    ++v26;
                    v25 -= 8;
                    if (!v25)
                      goto LABEL_18;
                  }
                }
                ++v21;
              }
              while (v21 != (unsigned int **)v10);
            }
            __break(0xC471u);
            JUMPOUT(0x1980F0C58);
          }
        }
      }
      ++v14;
      v13 -= 8;
    }
    while (v13);
  }
LABEL_18:
  *((_QWORD *)result + 2) = v7;
  return result;
}

void JSC::B3::Air::allocateAndGetEscapedStackSlotsWithoutChangingFrameSize(JSC::B3::Air *this@<X0>, JSC::B3::Air::Code *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  WTF *v19;
  unsigned int *v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int *v23;
  WTF *v24;
  uint64_t v25;

  if (*((_DWORD *)this + 46))
  {
    __break(0xC471u);
    JUMPOUT(0x1980F0DB8);
  }
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  v24 = 0;
  v25 = 0;
  v11 = *((unsigned int *)this + 19);
  if ((_DWORD)v11)
  {
    v12 = 0;
    while (!*(_QWORD *)(*((_QWORD *)this + 8) + 8 * v12))
    {
      if (v11 == ++v12)
        goto LABEL_21;
    }
    if ((_DWORD)v11 != (_DWORD)v12)
    {
      do
      {
        v23 = 0;
        v13 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v12);
        v23 = (unsigned int *)v13;
        if (!*(_BYTE *)(v13 + 4))
        {
          if (*(_QWORD *)(v13 + 16))
          {
            v18 = *(unsigned int *)(a9 + 12);
            if ((_DWORD)v18 == *(_DWORD *)(a9 + 8))
            {
              WTF::Vector<long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,long long>(a9, (unint64_t)&v23);
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a9 + 8 * v18) = v13;
              *(_DWORD *)(a9 + 12) = v18 + 1;
            }
          }
          else
          {
            v15 = HIDWORD(v25);
            if (HIDWORD(v25) == (_DWORD)v25)
            {
              v16 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v24, HIDWORD(v25) + 1, (unint64_t)&v23);
              v17 = HIDWORD(v25) + 1;
              *((_QWORD *)v24 + HIDWORD(v25)) = *v16;
              HIDWORD(v25) = v17;
            }
            else
            {
              *((_QWORD *)v24 + HIDWORD(v25)) = v13;
              HIDWORD(v25) = v15 + 1;
            }
          }
        }
        v12 = (v12 + 1);
        v14 = *((unsigned int *)this + 19);
        if (v14 > v12)
        {
          while (!*(_QWORD *)(*((_QWORD *)this + 8) + 8 * v12))
          {
            if (v14 == ++v12)
            {
              LODWORD(v12) = *((_DWORD *)this + 19);
              break;
            }
          }
        }
      }
      while ((_DWORD)v11 != (_DWORD)v12);
      while (HIDWORD(v25))
      {
        v23 = 0;
        v20 = (unsigned int *)*((_QWORD *)v24 + HIDWORD(v25) - 1);
        --HIDWORD(v25);
        v23 = v20;
        JSC::B3::Air::assign(v20, (unsigned int ***)a9);
        v21 = *(unsigned int *)(a9 + 12);
        if ((_DWORD)v21 == *(_DWORD *)(a9 + 8))
        {
          v22 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, v21 + 1, (unint64_t)&v23);
          v21 = *(unsigned int *)(a9 + 12);
          *(_QWORD *)(*(_QWORD *)a9 + 8 * v21) = *v22;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a9 + 8 * v21) = v23;
        }
        *(_DWORD *)(a9 + 12) = v21 + 1;
      }
    }
LABEL_21:
    v19 = v24;
    if (v24)
    {
      v24 = 0;
      LODWORD(v25) = 0;
      WTF::fastFree((unint64_t)v19, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::B3::Air::Tmp::dump(JSC::B3::Air::Tmp *this, WTF::PrintStream *a2)
{
  int v3;
  char v4;
  WTF::PrintStream *v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  WTF::PrintStream *v8;
  const char *v9;
  char v11;

  v3 = *(_DWORD *)this;
  if (*(_DWORD *)this)
  {
    if ((v3 + 32) > 0x40)
    {
      v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v8 = v7;
      if (v3 < 1)
        v9 = "%ftmp";
      else
        v9 = "%tmp";
      WTF::PrintStream::printf(v7, "%s", v9);
      WTF::PrintStream::printf(v8, "%u");
    }
    else
    {
      v4 = v3 - 1;
      if (v3 <= 0)
        v4 = 31 - v3;
      v11 = v4 & 0x7F;
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      JSC::Reg::dump((JSC::Reg *)&v11, v5);
    }
  }
  else
  {
    v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v6, "%s");
  }
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void JSC::B3::Air::TmpWidth::recompute<(JSC::B3::Bank)0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 *v21;
  __int16 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned int *v44;
  char v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  WTF *v64;
  char v65;
  WTF *v66;
  WTF *v67;
  uint64_t *v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  unsigned __int8 *v76;
  unsigned int v77;
  _BYTE *v78;
  unsigned int v79;
  char v80;
  unsigned __int8 v81;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  uint64_t v88;
  uint64_t *v89;
  _QWORD v90[3];

  v8 = a2;
  v10 = (*(_DWORD *)(a2 + 176) + 33);
  v11 = *(unsigned int *)(a1 + 12);
  if (v11 < v10)
  {
    v12 = *(unsigned int *)(a1 + 8);
    if (v12 >= v10)
    {
      *(_DWORD *)(a1 + 12) = v10;
LABEL_18:
      v23 = 0;
      do
        *(_WORD *)(*(_QWORD *)a1 + 2 * v23++) = 0;
      while (v23 < *(unsigned int *)(a1 + 12));
      goto LABEL_20;
    }
    v13 = v12 + (v12 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 <= v10)
      v15 = (*(_DWORD *)(a2 + 176) + 33);
    else
      v15 = v14;
    if (v15 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1980F1700);
    }
    v16 = *(_QWORD *)a1;
    v17 = (_WORD *)WTF::fastMalloc((WTF *)(2 * v15));
    *(_DWORD *)(a1 + 8) = v15;
    *(_QWORD *)a1 = v17;
    if ((_DWORD)v11)
    {
      v20 = 2 * v11;
      v21 = (__int16 *)v16;
      do
      {
        v22 = *v21++;
        *v17++ = v22;
        v20 -= 2;
      }
      while (v20);
    }
    if (v16)
    {
      if (*(_QWORD *)a1 == v16)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v16, (void *)a2, a3, a4, v18, v19, a7, a8);
    }
  }
  *(_DWORD *)(a1 + 12) = v10;
  if ((_DWORD)v10)
    goto LABEL_18;
LABEL_20:
  v24 = -1;
  do
  {
    v25 = __clz(__rbit64(v24));
    if (v25 <= 0x1F)
    {
      v26 = v25 + 1;
      if (v26 >= *(unsigned int *)(a1 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x1980F16E8);
      }
      *(_WORD *)(*(_QWORD *)a1 + 2 * v26) = 771;
    }
    v24 &= v24 - 1;
  }
  while (v24);
  v87 = 0;
  v88 = 0;
  v84 = *(unsigned int *)(v8 + 108);
  if ((_DWORD)v84)
  {
    v27 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v8 + 96) + 8 * v27))
    {
      if (v84 == ++v27)
        return;
    }
    if ((_DWORD)v84 != (_DWORD)v27)
    {
      v28 = *(_DWORD *)(v8 + 108);
      do
      {
        if (v28 <= v27)
        {
          __break(0xC471u);
          JUMPOUT(0x1980F16F0);
        }
        v29 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 8 * v27);
        v30 = *(unsigned int *)(v29 + 20);
        if ((_DWORD)v30)
        {
          v31 = *(_QWORD *)(v29 + 8);
          v32 = v31 + (v30 << 7);
          while (1)
          {
            v33 = *(unsigned __int16 *)(v31 + 120);
            if (v33 == 90)
            {
              v34 = *(unsigned int *)(v31 + 12);
              if (v34 <= 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1980F16B0);
              }
              v35 = *(_QWORD *)v31;
              if (*(_BYTE *)(*(_QWORD *)v31 + 40) != 1)
              {
LABEL_43:
                v85 = a1;
                v86 = v8;
                v89 = &v85;
                v38 = (v34 - 1) * v34;
                v39 = (char *)&unk_199150DC6;
                goto LABEL_44;
              }
              v36 = *(unsigned int *)(v35 + 48);
              if ((int)v36 >= 1)
              {
                v37 = *(unsigned __int8 *)(v35 + 8);
                if (v37 == 1)
                {
                  v90[0] = v31;
                  v56 = HIDWORD(v88);
                  if (HIDWORD(v88) == (_DWORD)v88)
                  {
                    v60 = (_QWORD *)WTF::Vector<std::unique_ptr<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v87, HIDWORD(v88) + 1, (unint64_t)v90);
                    v56 = HIDWORD(v88);
                    *((_QWORD *)v87 + HIDWORD(v88)) = *v60;
                  }
                  else
                  {
                    *((_QWORD *)v87 + HIDWORD(v88)) = v31;
                  }
                  HIDWORD(v88) = v56 + 1;
                }
                else
                {
                  if (v37 != 2)
                    goto LABEL_43;
                  v57 = *(_QWORD *)v35;
                  if ((v57 & 0x8000000000000000) != 0)
                    goto LABEL_43;
                  if (v36 >= *(_DWORD *)(a1 + 12))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1980F16E0);
                  }
                  if (v57 >> 31)
                    v58 = 3;
                  else
                    v58 = 2;
                  if (v57 < 0x8000)
                    v58 = 1;
                  if (v57 < 0x80)
                    v58 = 0;
                  v59 = *(_QWORD *)a1 + 2 * v36;
                  if (*(unsigned __int8 *)(v59 + 1) > v58)
                    v58 = *(_BYTE *)(v59 + 1);
                  *(_BYTE *)(v59 + 1) = v58;
                }
              }
            }
            else
            {
              v85 = a1;
              v86 = v8;
              v89 = &v85;
              if (((__int16)v33 - 446) <= 5)
              {
                v90[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::TmpWidth::recompute<(JSC::B3::Bank)0>(JSC::B3::Air::Code &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::TmpWidth::recompute<(JSC::B3::Bank)0>(JSC::B3::Air::Code &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
                v90[1] = v90;
                v90[2] = &v89;
                JSC::B3::Air::Inst::forEachArgCustom(v31, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::TmpWidth::recompute<(JSC::B3::Bank)0>(JSC::B3::Air::Code &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::TmpWidth::recompute<(JSC::B3::Bank)0>(JSC::B3::Air::Code &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction, (uint64_t)v90);
              }
              else
              {
                v34 = *(unsigned int *)(v31 + 12);
                if ((_DWORD)v34)
                {
                  v38 = (v34 - 1) * v34;
                  v39 = (char *)&JSC::B3::Air::g_formTable + 21 * (__int16)v33;
LABEL_44:
                  v40 = &v39[v38 >> 1];
                  v41 = HIBYTE(dword_1ECF4C7B0);
                  v42 = HIBYTE(word_1ECF4C79E);
                  v43 = *(_QWORD *)(v8 + 8);
                  v44 = (unsigned int *)(*(_QWORD *)v31 + 16);
                  while (2)
                  {
                    v46 = *v40++;
                    v45 = v46;
                    v47 = (v46 >> 5) - 1;
                    if (v47 >= 5)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1980F1678);
                    }
                    v48 = v45 & 0xF;
                    switch(*((_BYTE *)v44 - 8))
                    {
                      case 1:
                        v49 = *v44;
                        if ((int)v49 < 1)
                          goto LABEL_57;
                        if (v49 >= *(_DWORD *)(a1 + 12))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1980F16B8);
                        }
                        v50 = *(_QWORD *)a1;
                        if (v48 > 0xB)
                          goto LABEL_52;
                        a2 = (1 << v48);
                        if ((a2 & 0x910) != 0)
                          goto LABEL_56;
                        a3 = 544;
                        if ((a2 & 0x220) != 0)
                          goto LABEL_78;
LABEL_52:
                        a2 = 2 * v49;
                        a4 = v47;
                        if (*(unsigned __int8 *)(v50 + 2 * v49) <= v47)
                          a3 = v47;
                        else
                          a3 = *(unsigned __int8 *)(v50 + 2 * v49);
                        *(_BYTE *)(v50 + 2 * v49) = a3;
                        if (v48 == 7)
                        {
LABEL_78:
                          v51 = v47;
                          v52 = v50 + 2 * v49;
                          if (*(unsigned __int8 *)(v52 + 1) > v47)
                            v51 = *(_BYTE *)(v52 + 1);
                        }
                        else
                        {
LABEL_56:
                          if (v48 - 4 > 6)
                            goto LABEL_57;
                          if (v41 && (v42 || *(_BYTE *)(v43 + 212)))
                          {
                            if ((v45 & 0x10) != 0)
                              v51 = 4;
                            else
                              v51 = 3;
                          }
                          else
                          {
                            v51 = 3;
                          }
                          v52 = v50 + 2 * v49;
                        }
                        *(_BYTE *)(v52 + 1) = v51;
LABEL_57:
                        v44 += 8;
                        if (!--v34)
                          break;
                        continue;
                      case 6:
                      case 7:
                      case 8:
                        if (v48 == 11)
                          v53 = v47;
                        else
                          v53 = 3;
                        v54 = *v44;
                        if ((int)v54 >= 1)
                        {
                          if (v54 >= *(_DWORD *)(a1 + 12))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1980F16C0);
                          }
                          goto LABEL_70;
                        }
                        goto LABEL_57;
                      case 0xB:
                        if (v48 == 11)
                          v53 = v47;
                        else
                          v53 = 3;
                        v61 = *v44;
                        if ((int)v61 >= 1)
                        {
                          if (v61 >= *(_DWORD *)(a1 + 12))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1980F16C8);
                          }
                          v62 = 2 * v61;
                          v63 = *(unsigned __int8 *)(*(_QWORD *)a1 + v62);
                          if (v63 <= v53)
                            LOBYTE(v63) = v53;
                          *(_BYTE *)(*(_QWORD *)a1 + v62) = v63;
                        }
                        v54 = v44[1];
                        if ((int)v54 >= 1)
                        {
                          if (v54 >= *(_DWORD *)(a1 + 12))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1980F16D0);
                          }
LABEL_70:
                          v55 = 2 * v54;
                          if (*(unsigned __int8 *)(*(_QWORD *)a1 + v55) > v53)
                            v53 = *(_BYTE *)(*(_QWORD *)a1 + v55);
                          *(_BYTE *)(*(_QWORD *)a1 + v55) = v53;
                        }
                        goto LABEL_57;
                      case 0xC:
                      case 0xD:
                        if (v48 == 11)
                          v81 = v47;
                        else
                          v81 = 3;
                        v82 = *v44;
                        if ((int)v82 >= 1)
                        {
                          if (v82 >= *(_DWORD *)(a1 + 12))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1980F16D8);
                          }
                          v83 = (unsigned __int8 *)(*(_QWORD *)a1 + 2 * v82);
                          if (*v83 > v81)
                            v81 = *v83;
                          *v83 = v81;
                          v83[1] = 3;
                        }
                        goto LABEL_57;
                      default:
                        goto LABEL_57;
                    }
                    break;
                  }
                }
              }
            }
            v31 += 128;
            if (v31 == v32)
            {
              v28 = *(_DWORD *)(v8 + 108);
              break;
            }
          }
        }
        v27 = (v27 + 1);
        if (v28 > v27)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v8 + 96) + 8 * v27))
          {
            if (v28 == ++v27)
            {
              LODWORD(v27) = v28;
              break;
            }
          }
        }
      }
      while ((_DWORD)v84 != (_DWORD)v27);
      v64 = v87;
      if (HIDWORD(v88))
      {
        v65 = 0;
        v66 = (WTF *)((char *)v87 + 8 * HIDWORD(v88));
        v67 = v87;
        while (1)
        {
          v68 = *(uint64_t **)v67;
          v69 = *(_DWORD *)(*(_QWORD *)v67 + 12);
          if (!v69)
          {
            __break(0xC471u);
            JUMPOUT(0x1980F1690);
          }
          v70 = *v68;
          v71 = *(unsigned int *)(*v68 + 16);
          if ((int)v71 < 1)
          {
            v71 = -(int)v71;
            v72 = (uint64_t *)(a1 + 16);
            if (v71 >= *(unsigned int *)(a1 + 28))
            {
              __break(0xC471u);
              JUMPOUT(0x1980F16F8);
            }
          }
          else
          {
            v72 = (uint64_t *)a1;
            if (v71 >= *(_DWORD *)(a1 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x1980F16A0);
            }
          }
          if (v69 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980F1698);
          }
          v73 = *v72;
          v74 = *(unsigned int *)(v70 + 48);
          if ((int)v74 < 1)
          {
            v74 = -(int)v74;
            v75 = (_QWORD *)(a1 + 16);
            if (v74 >= *(unsigned int *)(a1 + 28))
            {
              __break(0xC471u);
              JUMPOUT(0x1980F15C0);
            }
          }
          else
          {
            v75 = (_QWORD *)a1;
            if (v74 >= *(_DWORD *)(a1 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x1980F16A8);
            }
          }
          v76 = (unsigned __int8 *)(*v75 + 2 * v74);
          v77 = *(unsigned __int8 *)(v73 + 2 * v71 + 1);
          if (v76[1] < v77)
          {
            v76[1] = v77;
            v65 = 1;
          }
          v78 = (_BYTE *)(v73 + 2 * v71);
          v79 = *v76;
          v80 = v65;
          if (*v78 < v79)
          {
            *v78 = v79;
            v80 = 1;
            v65 = 1;
          }
          v67 = (WTF *)((char *)v67 + 8);
          if (v67 == v66)
          {
            v65 = 0;
            v67 = v64;
            if ((v80 & 1) == 0)
              break;
          }
        }
      }
      if (v64)
      {
        v87 = 0;
        LODWORD(v88) = 0;
        WTF::fastFree((unint64_t)v64, (void *)a2, a3, a4, 21, (uint64_t)&JSC::B3::Air::g_formTable, a7, a8);
      }
    }
  }
}

void JSC::B3::Air::TmpWidth::recompute<(JSC::B3::Bank)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _WORD *v18;
  uint64_t v19;
  __int16 *v20;
  __int16 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  int v40;
  uint64_t v41;
  int *v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned __int8 v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unsigned __int8 *v53;
  int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  WTF *v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  unsigned __int8 v63;
  uint64_t v64;
  unsigned int v65;
  unsigned __int8 v66;
  unsigned int v67;
  unsigned int v68;
  char v69;
  WTF *v70;
  WTF *v71;
  uint64_t *v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unsigned __int8 *v80;
  unsigned int v81;
  _BYTE *v82;
  unsigned int v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  uint64_t v88;
  uint64_t *v89;
  _QWORD v90[3];

  v8 = a2;
  v10 = (unint64_t *)(a1 + 16);
  v11 = (*(_DWORD *)(a2 + 180) + 33);
  v12 = *(unsigned int *)(a1 + 28);
  if (v12 < v11)
  {
    v13 = *(unsigned int *)(a1 + 24);
    if (v13 >= v11)
    {
      *(_DWORD *)(a1 + 28) = v11;
LABEL_18:
      v22 = 0;
      do
        *(_WORD *)(*(_QWORD *)(a1 + 16) + 2 * v22++) = 514;
      while (v22 < *(unsigned int *)(a1 + 28));
      goto LABEL_20;
    }
    v14 = v13 + (v13 >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 <= v11)
      v16 = (*(_DWORD *)(a2 + 180) + 33);
    else
      v16 = v15;
    if (v16 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1980F1E94);
    }
    v17 = *v10;
    v18 = (_WORD *)WTF::fastMalloc((WTF *)(2 * v16));
    *(_DWORD *)(a1 + 24) = v16;
    *(_QWORD *)(a1 + 16) = v18;
    if ((_DWORD)v12)
    {
      v19 = 2 * v12;
      v20 = (__int16 *)v17;
      do
      {
        v21 = *v20++;
        *v18++ = v21;
        v19 -= 2;
      }
      while (v19);
    }
    if (v17)
    {
      if (*v10 == v17)
      {
        *(_QWORD *)(a1 + 16) = 0;
        *(_DWORD *)(a1 + 24) = 0;
      }
      WTF::fastFree(v17, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *(_DWORD *)(a1 + 28) = v11;
  if ((_DWORD)v11)
    goto LABEL_18;
LABEL_20:
  v23 = -1;
  do
  {
    v24 = __clz(__rbit64(v23));
    if (v24 >= 0x20)
    {
      v25 = (v24 - 31);
      if (v25 >= *(unsigned int *)(a1 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x1980F1E8CLL);
      }
      if (HIBYTE(dword_1ECF4C7B0) && (HIBYTE(word_1ECF4C79E) || *(_BYTE *)(*(_QWORD *)(v8 + 8) + 212)))
        v26 = 1028;
      else
        v26 = 771;
      *(_WORD *)(*v10 + 2 * v25) = v26;
    }
    v23 &= v23 - 1;
  }
  while (v23);
  v87 = 0;
  v88 = 0;
  v27 = *(unsigned int *)(v8 + 108);
  if ((_DWORD)v27)
  {
    v28 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v8 + 96) + 8 * v28))
    {
      if (v27 == ++v28)
        return;
    }
    if ((_DWORD)v27 != (_DWORD)v28)
    {
      v29 = *(_DWORD *)(v8 + 108);
      do
      {
        if (v29 <= v28)
        {
          __break(0xC471u);
          JUMPOUT(0x1980F1E54);
        }
        v30 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 8 * v28);
        v31 = *(unsigned int *)(v30 + 20);
        if ((_DWORD)v31)
        {
          v32 = *(_QWORD *)(v30 + 8);
          v33 = v32 + (v31 << 7);
          do
          {
            v34 = *(unsigned __int16 *)(v32 + 120);
            if (v34 == 90)
            {
              v35 = *(unsigned int *)(v32 + 12);
              if (v35 <= 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1980F1E5CLL);
              }
              v48 = *(_QWORD *)v32;
              if (*(_BYTE *)(*(_QWORD *)v32 + 40) != 1)
              {
LABEL_60:
                v85 = a1;
                v86 = v8;
                v89 = &v85;
                v36 = (v35 - 1) * v35;
                v37 = (char *)&unk_199150DC6;
                goto LABEL_43;
              }
              v49 = *(_DWORD *)(v48 + 48);
              if (v49 <= 0)
              {
                v54 = *(unsigned __int8 *)(v48 + 8);
                if (v54 == 1)
                {
                  v90[0] = v32;
                  v59 = HIDWORD(v88);
                  if (HIDWORD(v88) == (_DWORD)v88)
                  {
                    WTF::Vector<JSC::B3::Air::Inst *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst *>((uint64_t)&v87, (unint64_t)v90);
                  }
                  else
                  {
                    *((_QWORD *)v87 + HIDWORD(v88)) = v32;
                    HIDWORD(v88) = v59 + 1;
                  }
                }
                else
                {
                  if (v54 != 2)
                    goto LABEL_60;
                  v60 = *(_QWORD *)v48;
                  if ((v60 & 0x8000000000000000) != 0)
                    goto LABEL_60;
                  v61 = -v49;
                  if (*(_DWORD *)(a1 + 28) <= v61)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1980F1E74);
                  }
                  if (v60 >> 31)
                    v62 = 3;
                  else
                    v62 = 2;
                  if (v60 < 0x8000)
                    v62 = 1;
                  if (v60 >= 0x80)
                    v63 = v62;
                  else
                    v63 = 0;
                  v64 = *v10 + 2 * v61;
                  v65 = *(unsigned __int8 *)(v64 + 1);
                  if (v65 <= v63)
                    LOBYTE(v65) = v63;
                  *(_BYTE *)(v64 + 1) = v65;
                }
              }
            }
            else
            {
              v85 = a1;
              v86 = v8;
              v89 = &v85;
              if (((__int16)v34 - 446) <= 5)
              {
                v90[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::TmpWidth::recompute<(JSC::B3::Bank)1>(JSC::B3::Air::Code &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::TmpWidth::recompute<(JSC::B3::Bank)1>(JSC::B3::Air::Code &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction;
                v90[1] = v90;
                v90[2] = &v89;
                JSC::B3::Air::Inst::forEachArgCustom(v32, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),void JSC::B3::Air::Inst::forEachTmp<void JSC::B3::Air::TmpWidth::recompute<(JSC::B3::Bank)1>(JSC::B3::Air::Code &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(void JSC::B3::Air::TmpWidth::recompute<(JSC::B3::Bank)1>(JSC::B3::Air::Code &)::{lambda(JSC::B3::Air::Tmp &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1} const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction, (uint64_t)v90);
              }
              else
              {
                v35 = *(unsigned int *)(v32 + 12);
                if ((_DWORD)v35)
                {
                  v36 = (v35 - 1) * v35;
                  v37 = (char *)&JSC::B3::Air::g_formTable + 21 * (__int16)v34;
LABEL_43:
                  v38 = &v37[v36 >> 1];
                  v39 = HIBYTE(dword_1ECF4C7B0);
                  v40 = HIBYTE(word_1ECF4C79E);
                  v41 = *(_QWORD *)(v8 + 8);
                  v42 = (int *)(*(_QWORD *)v32 + 16);
                  while (2)
                  {
                    v44 = *v38++;
                    v43 = v44;
                    v45 = (v44 >> 5) - 1;
                    if (v45 < 5)
                    {
                      v46 = v43 & 0xF;
                      switch(*((_BYTE *)v42 - 8))
                      {
                        case 1:
                          if (*v42 > 0)
                            goto LABEL_47;
                          v50 = -*v42;
                          if (*(_DWORD *)(a1 + 28) <= v50)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1980F1E64);
                          }
                          v51 = *v10;
                          if (v46 > 0xB)
                            goto LABEL_77;
                          a2 = (1 << v46);
                          a3 = 2320;
                          if ((a2 & 0x910) != 0)
                            goto LABEL_64;
                          a3 = 544;
                          if ((a2 & 0x220) != 0)
                            goto LABEL_81;
LABEL_77:
                          a2 = 2 * v50;
                          a4 = v45;
                          if (*(unsigned __int8 *)(v51 + 2 * v50) <= v45)
                            a3 = v45;
                          else
                            a3 = *(unsigned __int8 *)(v51 + 2 * v50);
                          *(_BYTE *)(v51 + 2 * v50) = a3;
                          if (v46 == 7)
                          {
LABEL_81:
                            v52 = v45;
                            v53 = (unsigned __int8 *)(v51 + 2 * v50);
                            if (v53[1] > v45)
                              v52 = v53[1];
                            goto LABEL_70;
                          }
LABEL_64:
                          if (v46 - 4 <= 6)
                          {
                            if (v39 && (v40 || *(_BYTE *)(v41 + 212)))
                            {
                              if ((v43 & 0x10) != 0)
                                v52 = 4;
                              else
                                v52 = 3;
                            }
                            else
                            {
                              v52 = 3;
                            }
                            v53 = (unsigned __int8 *)(v51 + 2 * v50);
                            goto LABEL_70;
                          }
LABEL_47:
                          v42 += 8;
                          if (!--v35)
                            goto LABEL_57;
                          continue;
                        case 6:
                        case 7:
                        case 8:
                          if (v46 == 11)
                            v47 = v45;
                          else
                            v47 = 3;
                          if (*v42 > 0)
                            goto LABEL_47;
                          v56 = -*v42;
                          if (*(_DWORD *)(a1 + 28) <= v56)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1980F1E6CLL);
                          }
                          goto LABEL_96;
                        case 0xB:
                          if (v46 == 11)
                            v47 = v45;
                          else
                            v47 = 3;
                          if (*v42 <= 0)
                          {
                            if (*(_DWORD *)(a1 + 28) <= -*v42)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1980F1E84);
                            }
                            v68 = *(unsigned __int8 *)(*v10 + 2 * -*v42);
                            if (v68 <= v47)
                              LOBYTE(v68) = v47;
                            *(_BYTE *)(*v10 + 2 * -*v42) = v68;
                          }
                          v55 = v42[1];
                          if (v55 > 0)
                            goto LABEL_47;
                          v56 = -v55;
                          if (*(_DWORD *)(a1 + 28) <= v56)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1980F1CECLL);
                          }
LABEL_96:
                          v57 = 2 * v56;
                          if (*(unsigned __int8 *)(*v10 + v57) > v47)
                            v47 = *(_BYTE *)(*v10 + v57);
                          *(_BYTE *)(*v10 + v57) = v47;
                          goto LABEL_47;
                        case 0xC:
                        case 0xD:
                          if (v46 == 11)
                            v66 = v45;
                          else
                            v66 = 3;
                          if (*v42 <= 0)
                          {
                            v67 = -*v42;
                            if (*(_DWORD *)(a1 + 28) <= v67)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1980F1E7CLL);
                            }
                            v53 = (unsigned __int8 *)(*v10 + 2 * v67);
                            if (*v53 > v66)
                              v66 = *v53;
                            *v53 = v66;
                            v52 = 3;
LABEL_70:
                            v53[1] = v52;
                          }
                          goto LABEL_47;
                        default:
                          goto LABEL_47;
                      }
                    }
                    break;
                  }
                  __break(0xC471u);
                  JUMPOUT(0x1980F1D3CLL);
                }
              }
            }
LABEL_57:
            v32 += 128;
          }
          while (v32 != v33);
          v29 = *(_DWORD *)(v8 + 108);
        }
        v28 = (v28 + 1);
        if (v29 > v28)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v8 + 96) + 8 * v28))
          {
            if (v29 == ++v28)
            {
              LODWORD(v28) = v29;
              break;
            }
          }
        }
      }
      while ((_DWORD)v27 != (_DWORD)v28);
      v58 = v87;
      if (HIDWORD(v88))
      {
        v69 = 0;
        v70 = (WTF *)((char *)v87 + 8 * HIDWORD(v88));
        v71 = v87;
        while (1)
        {
          v72 = *(uint64_t **)v71;
          v73 = *(_DWORD *)(*(_QWORD *)v71 + 12);
          if (!v73)
          {
            __break(0xC471u);
            JUMPOUT(0x1980F1E9CLL);
          }
          v74 = *v72;
          v75 = *(unsigned int *)(*v72 + 16);
          if ((int)v75 < 1)
          {
            v75 = -(int)v75;
            v76 = v10;
            if (v75 >= *(unsigned int *)(a1 + 28))
            {
              __break(0xC471u);
              JUMPOUT(0x1980F1E30);
            }
          }
          else
          {
            v76 = (unint64_t *)a1;
            if (v75 >= *(_DWORD *)(a1 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x1980F1EA4);
            }
          }
          if (v73 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1980F1EACLL);
          }
          v77 = *v76;
          v78 = *(unsigned int *)(v74 + 48);
          if ((int)v78 < 1)
          {
            v78 = -(int)v78;
            v79 = v10;
            if (v78 >= *(unsigned int *)(a1 + 28))
            {
              __break(0xC471u);
              JUMPOUT(0x1980F1E4CLL);
            }
          }
          else
          {
            v79 = (unint64_t *)a1;
            if (v78 >= *(_DWORD *)(a1 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x1980F1EB4);
            }
          }
          v80 = (unsigned __int8 *)(*v79 + 2 * v78);
          v81 = *(unsigned __int8 *)(v77 + 2 * v75 + 1);
          if (v80[1] < v81)
          {
            v80[1] = v81;
            v69 = 1;
          }
          v82 = (_BYTE *)(v77 + 2 * v75);
          v83 = *v80;
          v84 = v69;
          if (*v82 < v83)
          {
            *v82 = v83;
            v84 = 1;
            v69 = 1;
          }
          v71 = (WTF *)((char *)v71 + 8);
          if (v71 == v70)
          {
            v69 = 0;
            v71 = v58;
            if ((v84 & 1) == 0)
              break;
          }
        }
      }
      if (v58)
      {
        v87 = 0;
        LODWORD(v88) = 0;
        WTF::fastFree((unint64_t)v58, (void *)a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
}

void JSC::B3::Air::validate(JSC::B3::Air *this, JSC::B3::Air::Code *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  const char *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  const char *v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  const char *v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int isTerminal;
  __int16 *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned int v95;
  char v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  BOOL v100;
  int v101;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unsigned int v113;
  uint64_t v114;
  int v115;
  int v116;
  const char **v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  _OWORD *v127;
  _OWORD *v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unsigned int v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  int v137;
  int v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  unint64_t v142;
  unsigned int v143;
  _DWORD *v144;
  unsigned int v145;
  uint64_t i;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unsigned int v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  int v158;
  uint64_t v159;
  const char *v160;
  const char *v161;
  int v162;
  unint64_t StatusReg;
  int v164;
  const char *v165[2];
  _QWORD v166[3];
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171[3];
  _QWORD v172[2];
  _QWORD v173[3];

  v8 = (const char *)this;
  v165[0] = (const char *)this;
  v165[1] = (const char *)a2;
  v169 = 0;
  v170 = 0;
  v168 = 0;
  v9 = *((unsigned int *)this + 27);
  if (!(_DWORD)v9)
    goto LABEL_39;
  v10 = 0;
  while (!*(_QWORD *)(*((_QWORD *)this + 12) + 8 * v10))
  {
    if (v9 == ++v10)
      goto LABEL_39;
  }
  if ((_DWORD)v9 != (_DWORD)v10)
  {
    v11 = v10;
    v12 = *((unsigned int *)this + 27);
    while (1)
    {
      if (v12 <= v11)
      {
        __break(0xC471u);
        JUMPOUT(0x1980F310CLL);
      }
      v13 = *(_QWORD *)(*((_QWORD *)v8 + 12) + 8 * v11);
      v14 = v169;
      if (v169
        || (WTF::HashTable<void *,void *,WTF::IdentityExtractor,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<void *>>::rehash(&v169, 8uLL, 0, a4, a5, a6, a7, a8), (v14 = v169) != 0))
      {
        v15 = *(_DWORD *)(v14 - 8);
      }
      else
      {
        v15 = 0;
      }
      v16 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
      v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
      v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
      v19 = v15 & ((v18 >> 31) ^ v18);
      a3 = (char *)(v14 + 8 * v19);
      v20 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
      {
        v21 = 0;
        v22 = 1;
        while (v20 != v13)
        {
          if (v20 == -1)
            v21 = a3;
          v19 = (v19 + v22) & v15;
          a3 = (char *)(v14 + 8 * v19);
          v20 = *(_QWORD *)a3;
          ++v22;
          if (!*(_QWORD *)a3)
          {
            if (v21)
            {
              *(_QWORD *)v21 = 0;
              --*(_DWORD *)(v169 - 16);
              a3 = (char *)v21;
            }
            goto LABEL_20;
          }
        }
        goto LABEL_30;
      }
LABEL_20:
      *(_QWORD *)a3 = v13;
      v23 = v169;
      v24 = v169 ? *(_DWORD *)(v169 - 12) + 1 : 1;
      *(_DWORD *)(v169 - 12) = v24;
      v25 = (*(_DWORD *)(v23 - 16) + v24);
      v26 = *(unsigned int *)(v23 - 4);
      if (v26 > 0x400)
        break;
      if (3 * v26 <= 4 * v25)
      {
        if ((_DWORD)v26)
          goto LABEL_26;
        v27 = 8;
        goto LABEL_29;
      }
LABEL_30:
      ++v11;
      v12 = *((unsigned int *)v8 + 27);
      if (v12 > v11)
      {
        while (!*(_QWORD *)(*((_QWORD *)v8 + 12) + 8 * v11))
        {
          if (v12 == ++v11)
          {
            v11 = *((unsigned int *)v8 + 27);
            goto LABEL_35;
          }
        }
        v11 = v11;
      }
LABEL_35:
      if (v9 == v11)
      {
        v8 = v165[0];
        goto LABEL_39;
      }
    }
    if (v26 > 2 * v25)
      goto LABEL_30;
LABEL_26:
    v27 = ((_DWORD)v26 << (6 * v24 >= (2 * v26)));
LABEL_29:
    WTF::HashTable<void *,void *,WTF::IdentityExtractor,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<void *>>::rehash(&v169, v27, (uint64_t)a3, a4, a5, a6, a7, a8);
    goto LABEL_30;
  }
LABEL_39:
  v28 = *((unsigned int *)v8 + 19);
  if ((_DWORD)v28)
  {
    v29 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v8 + 8) + 8 * v29))
    {
      if (v28 == ++v29)
        goto LABEL_74;
    }
    if ((_DWORD)v28 != (_DWORD)v29)
    {
      while (1)
      {
        v30 = *(_QWORD *)(*((_QWORD *)v8 + 8) + 8 * v29);
        v31 = v170;
        if (v170
          || (WTF::HashTable<void *,void *,WTF::IdentityExtractor,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<void *>>::rehash(&v170, 8uLL, 0, a4, a5, a6, a7, a8), (v31 = v170) != 0))
        {
          v32 = *(_DWORD *)(v31 - 8);
        }
        else
        {
          v32 = 0;
        }
        v33 = (~(v30 << 32) + v30) ^ ((unint64_t)(~(v30 << 32) + v30) >> 22);
        v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
        v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
        v36 = v32 & ((v35 >> 31) ^ v35);
        a3 = (char *)(v31 + 8 * v36);
        v37 = *(_QWORD *)a3;
        if (*(_QWORD *)a3)
        {
          v38 = 0;
          v39 = 1;
          while (v37 != v30)
          {
            if (v37 == -1)
              v38 = a3;
            v36 = (v36 + v39) & v32;
            a3 = (char *)(v31 + 8 * v36);
            v37 = *(_QWORD *)a3;
            ++v39;
            if (!*(_QWORD *)a3)
            {
              if (v38)
              {
                *(_QWORD *)v38 = 0;
                --*(_DWORD *)(v170 - 16);
                a3 = (char *)v38;
              }
              goto LABEL_56;
            }
          }
          goto LABEL_66;
        }
LABEL_56:
        *(_QWORD *)a3 = v30;
        v40 = v170;
        v41 = v170 ? *(_DWORD *)(v170 - 12) + 1 : 1;
        *(_DWORD *)(v170 - 12) = v41;
        v42 = (*(_DWORD *)(v40 - 16) + v41);
        v43 = *(unsigned int *)(v40 - 4);
        if (v43 > 0x400)
          break;
        if (3 * v43 <= 4 * v42)
        {
          if ((_DWORD)v43)
            goto LABEL_62;
          v44 = 8;
          goto LABEL_65;
        }
LABEL_66:
        v29 = (v29 + 1);
        v45 = *((unsigned int *)v8 + 19);
        if (v45 > v29)
        {
          while (!*(_QWORD *)(*((_QWORD *)v8 + 8) + 8 * v29))
          {
            if (v45 == ++v29)
            {
              LODWORD(v29) = *((_DWORD *)v8 + 19);
              break;
            }
          }
        }
        if ((_DWORD)v28 == (_DWORD)v29)
        {
          v8 = v165[0];
          goto LABEL_74;
        }
      }
      if (v43 > 2 * v42)
        goto LABEL_66;
LABEL_62:
      v44 = ((_DWORD)v43 << (6 * v41 >= (2 * v43)));
LABEL_65:
      WTF::HashTable<void *,void *,WTF::IdentityExtractor,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<void *>>::rehash(&v170, v44, (uint64_t)a3, a4, a5, a6, a7, a8);
      goto LABEL_66;
    }
  }
LABEL_74:
  v46 = *((unsigned int *)v8 + 31);
  if ((_DWORD)v46)
  {
    v47 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v8 + 14) + 8 * v47))
    {
      if (v46 == ++v47)
        goto LABEL_109;
    }
    if ((_DWORD)v46 != (_DWORD)v47)
    {
      while (1)
      {
        v48 = *(_QWORD *)(*((_QWORD *)v8 + 14) + 8 * v47);
        v49 = v168;
        if (v168
          || (WTF::HashTable<void *,void *,WTF::IdentityExtractor,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<void *>>::rehash(&v168, 8uLL, 0, a4, a5, a6, a7, a8), (v49 = v168) != 0))
        {
          v50 = *(_DWORD *)(v49 - 8);
        }
        else
        {
          v50 = 0;
        }
        v51 = (~(v48 << 32) + v48) ^ ((unint64_t)(~(v48 << 32) + v48) >> 22);
        v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
        v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
        v54 = v50 & ((v53 >> 31) ^ v53);
        a3 = (char *)(v49 + 8 * v54);
        v55 = *(_QWORD *)a3;
        if (*(_QWORD *)a3)
        {
          v56 = 0;
          v57 = 1;
          while (v55 != v48)
          {
            if (v55 == -1)
              v56 = a3;
            v54 = (v54 + v57) & v50;
            a3 = (char *)(v49 + 8 * v54);
            v55 = *(_QWORD *)a3;
            ++v57;
            if (!*(_QWORD *)a3)
            {
              if (v56)
              {
                *(_QWORD *)v56 = 0;
                --*(_DWORD *)(v168 - 16);
                a3 = (char *)v56;
              }
              goto LABEL_91;
            }
          }
          goto LABEL_101;
        }
LABEL_91:
        *(_QWORD *)a3 = v48;
        v58 = v168;
        v59 = v168 ? *(_DWORD *)(v168 - 12) + 1 : 1;
        *(_DWORD *)(v168 - 12) = v59;
        v60 = (*(_DWORD *)(v58 - 16) + v59);
        v61 = *(unsigned int *)(v58 - 4);
        if (v61 > 0x400)
          break;
        if (3 * v61 <= 4 * v60)
        {
          if ((_DWORD)v61)
            goto LABEL_97;
          v62 = 8;
          goto LABEL_100;
        }
LABEL_101:
        v47 = (v47 + 1);
        v63 = *((unsigned int *)v8 + 31);
        if (v63 > v47)
        {
          while (!*(_QWORD *)(*((_QWORD *)v8 + 14) + 8 * v47))
          {
            if (v63 == ++v47)
            {
              LODWORD(v47) = *((_DWORD *)v8 + 31);
              break;
            }
          }
        }
        if ((_DWORD)v46 == (_DWORD)v47)
        {
          v8 = v165[0];
          goto LABEL_109;
        }
      }
      if (v61 > 2 * v60)
        goto LABEL_101;
LABEL_97:
      v62 = ((_DWORD)v61 << (6 * v59 >= (2 * v61)));
LABEL_100:
      WTF::HashTable<void *,void *,WTF::IdentityExtractor,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<void *>>::rehash(&v168, v62, (uint64_t)a3, a4, a5, a6, a7, a8);
      goto LABEL_101;
    }
  }
LABEL_109:
  v64 = *((unsigned int *)v8 + 27);
  if (!(_DWORD)v64)
    goto LABEL_267;
  v65 = 0;
  while (!*(_QWORD *)(*((_QWORD *)v8 + 12) + 8 * v65))
  {
    if (v64 == ++v65)
      goto LABEL_209;
  }
  if ((_DWORD)v64 != (_DWORD)v65)
  {
    LODWORD(v66) = *((_DWORD *)v8 + 27);
    LODWORD(v67) = v65;
    v160 = v8;
    v162 = v66;
    while (1)
    {
      v167 = 0;
      if (v66 <= v67)
      {
        __break(0xC471u);
        JUMPOUT(0x1980F3114);
      }
      a3 = *(char **)(*((_QWORD *)v8 + 12) + 8 * v67);
      v167 = a3;
      v68 = *((unsigned int *)v165[0] + 63);
      if ((_DWORD)v68)
        break;
      if (!*(_DWORD *)a3)
        goto LABEL_119;
LABEL_120:
      v164 = v67;
      if (*((_DWORD *)a3 + 5))
      {
        v69 = 0;
        do
        {
          v70 = *((_QWORD *)a3 + 1);
          v71 = (unsigned int *)(v70 + (v69 << 7));
          v72 = v71[3];
          if ((_DWORD)v72)
          {
            v73 = *(_QWORD *)v71;
            v74 = *(_QWORD *)v71 + 32 * v72;
            do
            {
              v75 = *(char *)(v73 + 8);
              if (v75 == 18)
              {
                if (!v168)
                  goto LABEL_274;
                v83 = *(_DWORD *)(v168 - 8);
                v84 = *(_QWORD *)v73 + ~(*(_QWORD *)v73 << 32);
                v85 = (v84 ^ (v84 >> 22)) + ~((v84 ^ (v84 >> 22)) << 13);
                v86 = (9 * (v85 ^ (v85 >> 8))) ^ ((9 * (v85 ^ (v85 >> 8))) >> 15);
                v87 = v83 & (((v86 + ~(v86 << 27)) >> 31) ^ (v86 + ~((_DWORD)v86 << 27)));
                v88 = *(_QWORD *)(v168 + 8 * v87);
                if (v88 != *(_QWORD *)v73)
                {
                  v89 = 1;
                  while (v88)
                  {
                    v87 = (v87 + v89) & v83;
                    v88 = *(_QWORD *)(v168 + 8 * v87);
                    ++v89;
                    if (v88 == *(_QWORD *)v73)
                      goto LABEL_137;
                  }
LABEL_274:
                  WTF::toCString<char [4],JSC::B3::Air::Inst,char [5],JSC::B3::Air::BasicBlock>(v171, (JSC::B3::Air::Arg **)(v70 + (v69 << 7)), a3);
                }
              }
              else if (v75 == 9)
              {
                if (!v170)
                  goto LABEL_275;
                v76 = *(_DWORD *)(v170 - 8);
                v77 = *(_QWORD *)v73 + ~(*(_QWORD *)v73 << 32);
                v78 = (v77 ^ (v77 >> 22)) + ~((v77 ^ (v77 >> 22)) << 13);
                v79 = (9 * (v78 ^ (v78 >> 8))) ^ ((9 * (v78 ^ (v78 >> 8))) >> 15);
                v80 = v76 & (((v79 + ~(v79 << 27)) >> 31) ^ (v79 + ~((_DWORD)v79 << 27)));
                v81 = *(_QWORD *)(v170 + 8 * v80);
                if (v81 != *(_QWORD *)v73)
                {
                  v82 = 1;
                  while (v81)
                  {
                    v80 = (v80 + v82) & v76;
                    v81 = *(_QWORD *)(v170 + 8 * v80);
                    ++v82;
                    if (v81 == *(_QWORD *)v73)
                      goto LABEL_137;
                  }
LABEL_275:
                  WTF::toCString<char [4],JSC::B3::Air::Inst,char [5],JSC::B3::Air::BasicBlock>(v171, (JSC::B3::Air::Arg **)(v70 + (v69 << 7)), a3);
                }
              }
LABEL_137:
              v73 += 32;
            }
            while (v73 != v74);
          }
          if ((JSC::B3::Air::Inst::isValidForm((JSC::B3::Air::Inst *)(v70 + (v69 << 7)), a2, (uint64_t)a3, a4, a5, a6, a7, a8) & 1) == 0)
          {
            WTF::toCString<char [4],JSC::B3::Air::Inst,char [5],JSC::B3::Air::BasicBlock>(v171, (JSC::B3::Air::Arg **)(v70 + (v69 << 7)), v167);
          }
          v90 = (*((_DWORD *)v167 + 5) - 1);
          isTerminal = JSC::B3::Air::Inst::isTerminal((JSC::B3::Air::Inst *)(v70 + (v69 << 7)));
          if (v69 == v90)
          {
            if ((isTerminal & 1) == 0)
            {
              WTF::toCString<char [4],JSC::B3::Air::Inst,char [5],JSC::B3::Air::BasicBlock>(v171, (JSC::B3::Air::Arg **)(v70 + (v69 << 7)), v167);
            }
          }
          else if (isTerminal)
          {
            WTF::toCString<char [4],JSC::B3::Air::Inst,char [5],JSC::B3::Air::BasicBlock>(v171, (JSC::B3::Air::Arg **)(v70 + (v69 << 7)), v167);
          }
          v166[0] = v70 + (v69 << 7);
          v166[1] = v165;
          v166[2] = &v167;
          v92 = (__int16 *)(v166[0] + 120);
          if ((*(__int16 *)(v166[0] + 120) - 446) > 5)
          {
            v93 = v71[3];
            if ((_DWORD)v93)
            {
              v94 = (unsigned __int8 *)&JSC::B3::Air::g_formTable
                  + 21 * *(__int16 *)(v166[0] + 120)
                  + ((unint64_t)((v93 - 1) * v93) >> 1);
              if (HIBYTE(dword_1ECF4C7B0))
              {
                while (1)
                {
                  v95 = *v94++;
                  if ((v95 >> 5) - 1 >= 5)
                    break;
                  if (!--v93)
                    goto LABEL_162;
                }
              }
              else
              {
                a4 = *(_QWORD *)v71;
                while (1)
                {
                  v97 = *v94++;
                  v96 = v97;
                  v98 = (v97 >> 5) - 1;
                  if (v98 > 4)
                    break;
                  v99 = v96 & 0xF;
                  v100 = v99 > 0xB;
                  v101 = (1 << v99) & 0xB30;
                  if ((v100 || v101 == 0) && v98 == 4)
                  {
                    WTF::toCString<char [4],JSC::B3::Air::Inst,char [5],JSC::B3::Air::BasicBlock,char [6],JSC::B3::Air::Arg>(v171, (JSC::B3::Air::Arg **)(v70 + (v69 << 7)), v167, (JSC::B3::Air::Arg *)a4);
                  }
                  a4 += 32;
                  if (!--v93)
                    goto LABEL_162;
                }
              }
              __break(0xC471u);
              JUMPOUT(0x1980F2DECLL);
            }
          }
          else
          {
            v171[1] = (uint64_t)v171;
            v171[2] = (uint64_t)v166;
            v172[1] = v171;
            if (*((_WORD *)v71 + 60) == 448)
            {
              v173[1] = v171;
              if (!v71[3])
              {
                __break(0xC471u);
                JUMPOUT(0x1980F30ECLL);
              }
              (*(void (**)(_QWORD, unint64_t, _QWORD *))(***(_QWORD ***)v71 + 16))(**(_QWORD **)v71, v70 + (v69 << 7), v173);
            }
            else
            {
              switch(*((_WORD *)v71 + 60))
              {
                case 0x1BE:
                  break;
                case 0x1BF:
                  JSC::B3::Air::ShuffleCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(v70 + (v69 << 7), (uint64_t)v172);
                  break;
                case 0x1C1:
                  JSC::B3::Air::CCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(v70 + (v69 << 7), (uint64_t)v172);
                  break;
                case 0x1C2:
                  v173[0] = v172;
                  JSC::B3::Air::CCallCustom::forEachArg<void JSC::B3::Air::ColdCCallCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(JSC::B3::Air::Inst &,WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)> const&)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>(v70 + (v69 << 7), (uint64_t)v173);
                  break;
                case 0x1C3:
                  JSC::B3::Air::WasmBoundsCheckCustom::forEachArg<WTF::ScopedLambda<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)>>(v70 + (v69 << 7), (uint64_t)v172);
                  break;
                default:
                  WTF::dataLog<char [50],JSC::B3::Air::Kind,char [2]>("Bad call to forEachArgCustom, not custom opcode: ", (JSC::B3::Air::Kind *)(v71 + 30), "\n");
                  __break(0xC471u);
                  JUMPOUT(0x1980F3088);
              }
            }
          }
LABEL_162:
          v104 = *v92;
          if (v104 <= 409)
          {
            if (v104 == 170)
            {
              if (v71[3] <= 2)
              {
                __break(0xC471u);
                JUMPOUT(0x1980F3104);
              }
              if (*(_BYTE *)(*(_QWORD *)v71 + 72) != 2)
              {
                WTF::toCString<char [4],JSC::B3::Air::Inst,char [5],JSC::B3::Air::BasicBlock>(v171, (JSC::B3::Air::Arg **)(v70 + (v69 << 7)), v167);
              }
              if (*(int *)(*(_QWORD *)v71 + 64) >= 32)
              {
                WTF::toCString<char [4],JSC::B3::Air::Inst,char [5],JSC::B3::Air::BasicBlock>(v171, (JSC::B3::Air::Arg **)(v70 + (v69 << 7)), v167);
              }
            }
            else if (v104 == 171)
            {
              if (v71[3] <= 2)
              {
                __break(0xC471u);
                JUMPOUT(0x1980F30FCLL);
              }
              if (*(_BYTE *)(*(_QWORD *)v71 + 72) != 2)
              {
                WTF::toCString<char [4],JSC::B3::Air::Inst,char [5],JSC::B3::Air::BasicBlock>(v171, (JSC::B3::Air::Arg **)(v70 + (v69 << 7)), v167);
              }
              if (*(int *)(*(_QWORD *)v71 + 64) >= 64)
              {
                WTF::toCString<char [4],JSC::B3::Air::Inst,char [5],JSC::B3::Air::BasicBlock>(v171, (JSC::B3::Air::Arg **)(v70 + (v69 << 7)), v167);
              }
            }
          }
          else if ((v104 - 410) < 2)
          {
            if (!v71[3])
            {
              __break(0xC471u);
              JUMPOUT(0x1980F30F4);
            }
            v105 = *(_BYTE *)(*(_QWORD *)v71 + 24) & 0x3F;
            if ((v105 - 2) >= 5)
            {
              if ((*(_BYTE *)(*(_QWORD *)v71 + 24) & 0x3F) != 0)
              {
                if (v105 == 1)
                {
                  WTF::toCString<char [4],JSC::B3::Air::Inst,char [5],JSC::B3::Air::BasicBlock>(v171, (JSC::B3::Air::Arg **)(v70 + (v69 << 7)), v167);
                }
                __break(0xC471u);
                JUMPOUT(0x1980F3050);
              }
              WTF::toCString<char [4],JSC::B3::Air::Inst,char [5],JSC::B3::Air::BasicBlock>(v171, (JSC::B3::Air::Arg **)(v70 + (v69 << 7)), v167);
            }
          }
          else if (v104 == 447)
          {
            if ((*(_BYTE *)(v70 + (v69 << 7) + 122) & 1) != 0)
            {
              WTF::toCString<char [4],JSC::B3::Air::Inst,char [5],JSC::B3::Air::BasicBlock>(v171, (JSC::B3::Air::Arg **)(v70 + (v69 << 7)), v167);
            }
          }
          else if (v104 == 446 && *((_DWORD *)v167 + 9) != *(_DWORD *)(*((_QWORD *)v165[0] + 1) + 200))
          {
            WTF::toCString<char [4],JSC::B3::Air::Inst,char [5],JSC::B3::Air::BasicBlock>(v171, (JSC::B3::Air::Arg **)(v70 + (v69 << 7)), v167);
          }
          ++v69;
          a3 = v167;
        }
        while (v69 < *((unsigned int *)v167 + 5));
      }
      v106 = *((unsigned int *)a3 + 9);
      v8 = v160;
      if ((_DWORD)v106)
      {
        if (v169)
        {
          v107 = 0;
          v108 = *(_DWORD *)(v169 - 8);
          while (1)
          {
            v109 = *(_QWORD *)(*((_QWORD *)a3 + 3) + 16 * v107);
            v110 = (~(v109 << 32) + v109) ^ ((unint64_t)(~(v109 << 32) + v109) >> 22);
            v111 = 9 * ((v110 + ~(v110 << 13)) ^ ((v110 + ~(v110 << 13)) >> 8));
            v112 = (v111 ^ (v111 >> 15)) + ~((v111 ^ (v111 >> 15)) << 27);
            v113 = v108 & ((v112 >> 31) ^ v112);
            v114 = *(_QWORD *)(v169 + 8 * v113);
            if (v114 != v109)
              break;
LABEL_196:
            if (++v107 == v106)
              goto LABEL_197;
          }
          v115 = 1;
          while (v114)
          {
            v113 = (v113 + v115) & v108;
            v114 = *(_QWORD *)(v169 + 8 * v113);
            ++v115;
            if (v114 == v109)
              goto LABEL_196;
          }
        }
        WTF::toCString<char [4],JSC::B3::Air::BasicBlock>(v171, "In ", a3);
      }
LABEL_197:
      v67 = (v164 + 1);
      v66 = *((unsigned int *)v160 + 27);
      if (v66 <= v67)
      {
        v116 = v162;
      }
      else
      {
        v116 = v162;
        while (!*(_QWORD *)(*((_QWORD *)v160 + 12) + 8 * v67))
        {
          if (v66 == ++v67)
          {
            LODWORD(v67) = *((_DWORD *)v160 + 27);
            break;
          }
        }
      }
      if (v116 == (_DWORD)v67)
      {
        v8 = v165[0];
        LODWORD(v64) = *((_DWORD *)v165[0] + 27);
        goto LABEL_209;
      }
    }
    v117 = (const char **)*((_QWORD *)v165[0] + 30);
    v118 = 16 * v68;
    while (*v117 != a3)
    {
      v117 += 2;
      v118 -= 16;
      if (!v118)
        goto LABEL_120;
    }
LABEL_119:
    if (*((_DWORD *)a3 + 21))
    {
      WTF::toCString<char [15],JSC::B3::Air::BasicBlock>(v171, a3);
    }
    goto LABEL_120;
  }
LABEL_209:
  if (!(_DWORD)v64)
    goto LABEL_267;
  v119 = 0;
  v158 = v64;
  while (!*(_QWORD *)(*((_QWORD *)v8 + 12) + 8 * v119))
  {
    if (v64 == ++v119)
      goto LABEL_267;
  }
  if ((_DWORD)v64 == (_DWORD)v119)
    goto LABEL_267;
  v161 = v8;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  LODWORD(v120) = v64;
  do
  {
    if (v120 <= v119)
    {
      __break(0xC471u);
      JUMPOUT(0x1980F311CLL);
    }
    v121 = *(_QWORD *)(*((_QWORD *)v8 + 12) + 8 * v119);
    v122 = *(unsigned int *)(v121 + 84);
    if (!(_DWORD)v122)
      goto LABEL_262;
    v123 = 0;
    v159 = *(_QWORD *)(*((_QWORD *)v8 + 12) + 8 * v119);
    v124 = *(uint64_t **)(v121 + 72);
    v125 = &v124[v122];
    do
    {
      v126 = *v124;
      v127 = v123;
      if (!v123)
      {
        v128 = (_OWORD *)WTF::fastZeroedMalloc(0x50uLL, (unint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        *v128 = xmmword_19914F680;
        v127 = v128 + 1;
      }
      v129 = *((_DWORD *)v127 - 2);
      v130 = (~(v126 << 32) + v126) ^ ((unint64_t)(~(v126 << 32) + v126) >> 22);
      v131 = 9 * ((v130 + ~(v130 << 13)) ^ ((v130 + ~(v130 << 13)) >> 8));
      v132 = (v131 ^ (v131 >> 15)) + ~((v131 ^ (v131 >> 15)) << 27);
      v133 = v129 & ((v132 >> 31) ^ v132);
      v134 = (_QWORD *)v127 + v133;
      v135 = *v134;
      if (*v134)
      {
        v136 = 0;
        v137 = 1;
        while (v135 != v126)
        {
          if (v135 == -1)
            v136 = v134;
          v133 = (v133 + v137) & v129;
          v134 = (_QWORD *)v127 + v133;
          v135 = *v134;
          ++v137;
          if (!*v134)
          {
            if (v136)
            {
              *v136 = 0;
              --*((_DWORD *)v127 - 4);
              v134 = v136;
            }
            goto LABEL_229;
          }
        }
LABEL_231:
        v123 = v127;
        goto LABEL_247;
      }
LABEL_229:
      *v134 = v126;
      v138 = *((_DWORD *)v127 - 4);
      v139 = (unint64_t)(v127 - 1);
      v140 = *((_DWORD *)v127 - 3) + 1;
      *((_DWORD *)v127 - 3) = v140;
      v141 = (v138 + v140);
      v142 = *((unsigned int *)v127 - 1);
      if (v142 > 0x400)
      {
        if (v142 > 2 * v141)
          goto LABEL_231;
LABEL_233:
        v143 = (_DWORD)v142 << (6 * v140 >= (2 * v142));
        goto LABEL_235;
      }
      if (3 * v142 > 4 * v141)
        goto LABEL_231;
      if ((_DWORD)v142)
        goto LABEL_233;
      v143 = 8;
LABEL_235:
      v144 = (_DWORD *)WTF::fastZeroedMalloc(8 * v143 + 16, (unint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v123 = v144 + 4;
      v145 = v143 - 1;
      v144[2] = v143 - 1;
      v144[3] = v143;
      *v144 = 0;
      v144[1] = v140;
      if ((_DWORD)v142)
      {
        for (i = 0; i != v142; ++i)
        {
          v147 = *((_QWORD *)v127 + i);
          if ((unint64_t)(v147 + 1) >= 2)
          {
            v148 = (~(v147 << 32) + v147) ^ ((unint64_t)(~(v147 << 32) + v147) >> 22);
            v149 = 9 * ((v148 + ~(v148 << 13)) ^ ((v148 + ~(v148 << 13)) >> 8));
            v150 = (v149 ^ (v149 >> 15)) + ~((v149 ^ (v149 >> 15)) << 27);
            v151 = v145 & ((v150 >> 31) ^ v150);
            v152 = 1;
            do
            {
              v153 = v151;
              v154 = *(_QWORD *)&v123[2 * v151];
              v151 = (v151 + v152++) & v145;
            }
            while (v154);
            *(_QWORD *)&v123[2 * v153] = v147;
          }
        }
      }
      v155 = *(_QWORD *)(StatusReg + 752);
      if (v155)
      {
        if (v139 >> 43
          || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                               + (((unint64_t)(v127 - 1) >> 27) & 0x1FFFFFFFFCLL)) >> (((_DWORD)v127 - 16) >> 24)) & 1) == 0)
        {
          if (v139 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v139 >> 24)
          {
            a4 = 0;
LABEL_254:
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v155, (unint64_t)(v127 - 1), 1, a4, a5, a6, a7, a8);
            goto LABEL_247;
          }
          a4 = (*(_DWORD *)((char *)off_1ECF425F8
                          + (((((unint64_t)(v127 - 1) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                          + 24) >> (2 * (((((_DWORD)v127 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 != 1)
            goto LABEL_254;
        }
        v156 = *(unsigned int *)(v155 + 8000);
        if (v156 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v155, (uint64_t)(v127 - 1), (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v155 + 8 * v156) = v139 | 0x5000000000000;
          *(_DWORD *)(v155 + 8000) = v156 + 1;
        }
      }
      else
      {
        pas_try_deallocate_slow_no_cache((unint64_t)(v127 - 1), (uint64_t)&bmalloc_heap_config, 1);
      }
LABEL_247:
      ++v124;
    }
    while (v124 != v125);
    a3 = (char *)v159;
    v157 = *(_DWORD *)(v159 + 84);
    if (v123)
    {
      v8 = v161;
      if (v157 == *(v123 - 3))
      {
        WTF::fastFree((unint64_t)(v123 - 4), a2, v159, a4, a5, a6, a7, a8);
        goto LABEL_262;
      }
LABEL_290:
      WTF::toCString<char [4],JSC::B3::Air::BasicBlock>(v171, "At ", (_DWORD *)v159);
    }
    v8 = v161;
    if (v157)
      goto LABEL_290;
LABEL_262:
    v119 = (v119 + 1);
    v120 = *((unsigned int *)v8 + 27);
    if (v120 > v119)
    {
      while (!*(_QWORD *)(*((_QWORD *)v8 + 12) + 8 * v119))
      {
        if (v120 == ++v119)
        {
          LODWORD(v119) = *((_DWORD *)v8 + 27);
          break;
        }
      }
    }
  }
  while (v158 != (_DWORD)v119);
LABEL_267:
  if (v168)
    WTF::fastFree(v168 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (v169)
    WTF::fastFree(v169 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (v170)
    WTF::fastFree(v170 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void JSC::B3::Air::`anonymous namespace'::Validater::fail(const char **a1, int a2, const char *a3, const char *a4, _QWORD *a5)
{
  WTF::PrintStream *v10;
  WTF::PrintStream *v11;
  const char *v12;
  const char *v13;
  WTF::PrintStream *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  size_t v23;
  WTF *v24;
  uint64_t v25;
  void (**v26)(WTF::StringPrintStream *__hidden);
  WTF *v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v26 = off_1E3572250;
  v27 = (WTF *)v29;
  v28 = xmmword_199122F80;
  v29[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", "AIR VALIDATION FAILURE\n");
  v26[5]((WTF::StringPrintStream *)&v26);
  v10 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v26[4])(&v26);
  WTF::PrintStream::printf(v10, "%s", "    ");
  WTF::PrintStream::printf(v10, "%s", a4);
  WTF::PrintStream::printf(v10, "%s", " (");
  WTF::PrintStream::printf(v10, "%s", "./b3/air/AirValidate.cpp");
  WTF::PrintStream::printf(v10, "%s", ":");
  WTF::PrintStream::printf(v10, "%d", a2);
  WTF::PrintStream::printf(v10, "%s", ")\n");
  v26[5]((WTF::StringPrintStream *)&v26);
  v11 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v26[4])(&v26);
  WTF::PrintStream::printf(v11, "%s", "    ");
  if (*a5)
    v12 = (const char *)(*a5 + 16);
  else
    v12 = 0;
  WTF::PrintStream::printf(v11, "%s", v12);
  WTF::PrintStream::printf(v11, "%s", "\n");
  v26[5]((WTF::StringPrintStream *)&v26);
  v13 = (const char *)*((_QWORD *)*a1 + 38);
  v14 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v26[4])(&v26);
  WTF::PrintStream::printf(v14, "%s", "    After ");
  WTF::PrintStream::printf(v14, "%s", v13);
  WTF::PrintStream::printf(v14, "%s", "\n");
  v26[5]((WTF::StringPrintStream *)&v26);
  v22 = v27;
  if (v27)
  {
    v23 = v28;
    if ((unint64_t)v28 >= 0xFFFFFFFFFFFFFFF0)
    {
      __break(0xC471u);
      goto LABEL_15;
    }
    if ((_QWORD)v28 == -17)
    {
      __break(0xC471u);
      JUMPOUT(0x1980F3378);
    }
    v25 = WTF::fastMalloc((WTF *)(v28 + 17));
    *(_DWORD *)v25 = 1;
    *(_QWORD *)(v25 + 8) = v23;
    memcpy((void *)(v25 + 16), v22, v23);
    *(_BYTE *)(v25 + 16 + v23) = 0;
    v24 = v27;
    v30 = v25;
    if (v27 == (WTF *)v29)
    {
LABEL_12:
      WTF::dataLog<WTF::CString>(&v30);
      if (a1[1])
      {
        v26 = (void (**)(WTF::StringPrintStream *__hidden))*((_QWORD *)*a1 + 38);
        WTF::dataLog<char [8],char const*,char [3]>("Before ", (const char **)&v26, ":\n");
        WTF::dataLog<char const*>(a1 + 1);
      }
      WTF::dataLog<char [16]>("At time of failure:\n");
      WTF::dataLog<JSC::B3::Air::Code>((JSC::B3::Air::Code *)*a1);
      WTF::dataLog<WTF::CString>(&v30);
      WTFReportAssertionFailure("./b3/air/AirValidate.cpp", a2, a3, (uint64_t)a4);
      __break(0xC471u);
LABEL_15:
      JUMPOUT(0x1980F335CLL);
    }
  }
  else
  {
    v24 = 0;
    v30 = 0;
  }
  WTF::fastFree((unint64_t)v24, v15, v16, v17, v18, v19, v20, v21);
  goto LABEL_12;
}

void WTF::toCString<char [15],JSC::B3::Air::BasicBlock>(uint64_t *a1, _DWORD *a2)
{
  WTF::PrintStream *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (**v17)(WTF::StringPrintStream *__hidden);
  _BYTE *v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v17 = off_1E3572250;
  v18 = v20;
  v19 = xmmword_199122F80;
  v20[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v17, "%s", "At entrypoint ");
  v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v17[4])(&v17);
  WTF::PrintStream::printf(v4, "%s", "#");
  WTF::PrintStream::printf(v4, "%u", *a2);
  v17[5]((WTF::StringPrintStream *)&v17);
  v17[5]((WTF::StringPrintStream *)&v17);
  v13 = v18;
  v12 = v19;
  *a1 = 0;
  if (!v13)
  {
    v16 = 0;
LABEL_6:
    WTF::fastFree(v16, v5, v6, v7, v8, v9, v10, v11);
    return;
  }
  if (v12 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x1980F35A4);
  }
  v14 = WTF::fastMalloc((WTF *)(v12 + 17));
  *(_DWORD *)v14 = 1;
  *(_QWORD *)(v14 + 8) = v12;
  *a1 = v14;
  v15 = v14 + 16;
  memcpy((void *)(v14 + 16), v13, v12);
  *(_BYTE *)(v15 + v12) = 0;
  v16 = (unint64_t)v18;
  if (v18 != v20)
    goto LABEL_6;
}

void WTF::toCString<char [4],JSC::B3::Air::Inst,char [5],JSC::B3::Air::BasicBlock>(uint64_t *a1, JSC::B3::Air::Arg **a2, _DWORD *a3)
{
  JSC::B3::Air::Kind *v6;
  WTF::PrintStream *v7;
  WTF::PrintStream *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  JSC::B3::Air::Arg **v21[5];
  char v22;
  void (**v23)(WTF::StringPrintStream *__hidden);
  _BYTE *v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v23 = off_1E3572250;
  v24 = v26;
  v25 = xmmword_199122F80;
  v26[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v23, "%s", "At ");
  v6 = (JSC::B3::Air::Kind *)(a2 + 15);
  v21[0] = a2;
  v21[1] = (JSC::B3::Air::Arg **)", ";
  v21[2] = (JSC::B3::Air::Arg **)3;
  v21[3] = (JSC::B3::Air::Arg **)&str_477;
  v21[4] = (JSC::B3::Air::Arg **)1;
  v22 = 0;
  v7 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v23[4])(&v23);
  JSC::B3::Air::Kind::dump(v6, v7);
  WTF::PrintStream::printf(v7, "%s", " ");
  WTF::ListDump<WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(v21, (uint64_t)v7);
  v23[5]((WTF::StringPrintStream *)&v23);
  WTF::PrintStream::printf((WTF::PrintStream *)&v23, "%s", " in ");
  v8 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v23[4])(&v23);
  WTF::PrintStream::printf(v8, "%s", "#");
  WTF::PrintStream::printf(v8, "%u", *a3);
  v23[5]((WTF::StringPrintStream *)&v23);
  v23[5]((WTF::StringPrintStream *)&v23);
  v17 = v24;
  v16 = v25;
  *a1 = 0;
  if (!v17)
  {
    v20 = 0;
LABEL_6:
    WTF::fastFree(v20, v9, v10, v11, v12, v13, v14, v15);
    return;
  }
  if (v16 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x1980F37C0);
  }
  v18 = WTF::fastMalloc((WTF *)(v16 + 17));
  *(_DWORD *)v18 = 1;
  *(_QWORD *)(v18 + 8) = v16;
  *a1 = v18;
  v19 = v18 + 16;
  memcpy((void *)(v18 + 16), v17, v16);
  *(_BYTE *)(v19 + v16) = 0;
  v20 = (unint64_t)v24;
  if (v24 != v26)
    goto LABEL_6;
}

void WTF::toCString<char [4],JSC::B3::Air::BasicBlock>(uint64_t *a1, const char *a2, _DWORD *a3)
{
  WTF::PrintStream *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (**v18)(WTF::StringPrintStream *__hidden);
  _BYTE *v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v18 = off_1E3572250;
  v19 = v21;
  v20 = xmmword_199122F80;
  v21[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v18, "%s", a2);
  v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v18[4])(&v18);
  WTF::PrintStream::printf(v5, "%s", "#");
  WTF::PrintStream::printf(v5, "%u", *a3);
  v18[5]((WTF::StringPrintStream *)&v18);
  v18[5]((WTF::StringPrintStream *)&v18);
  v14 = v19;
  v13 = v20;
  *a1 = 0;
  if (!v14)
  {
    v17 = 0;
LABEL_6:
    WTF::fastFree(v17, v6, v7, v8, v9, v10, v11, v12);
    return;
  }
  if (v13 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x1980F3930);
  }
  v15 = WTF::fastMalloc((WTF *)(v13 + 17));
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = v13;
  *a1 = v15;
  v16 = v15 + 16;
  memcpy((void *)(v15 + 16), v14, v13);
  *(_BYTE *)(v16 + v13) = 0;
  v17 = (unint64_t)v19;
  if (v19 != v21)
    goto LABEL_6;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width),JSC::B3::Air::`anonymous namespace'::Validater::run(void)::{lambda(JSC::B3::Air::Arg &,JSC::B3::Air::Arg::Role,JSC::B3::Bank,JSC::Width)#1}>::implFunction(uint64_t result, JSC::B3::Air::Arg *a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v6;
  JSC::B3::Air::Arg **v7;
  uint64_t v8;
  const char **v9;
  uint64_t v10;

  v6 = *(_QWORD *)(result + 16);
  v7 = *(JSC::B3::Air::Arg ***)v6;
  v8 = *(unsigned int *)(*(_QWORD *)v6 + 12);
  if ((_DWORD)v8)
  {
    v9 = *(const char ***)(v6 + 8);
    if (*v7 > a2)
    {
      WTF::toCString<char [4],JSC::B3::Air::Arg,char [5],JSC::B3::Air::Inst,char [5],JSC::B3::Air::BasicBlock>(&v10, a2, v7, **(_DWORD ***)(v6 + 16));
    }
    if ((JSC::B3::Air::Arg *)((char *)*v7 + 32 * v8 - 32) < a2)
    {
      WTF::toCString<char [4],JSC::B3::Air::Arg,char [5],JSC::B3::Air::Inst,char [5],JSC::B3::Air::BasicBlock>(&v10, a2, v7, **(_DWORD ***)(v6 + 16));
    }
    if (!HIBYTE(dword_1ECF4C7B0) && (a3 > 0xB || ((1 << a3) & 0xB30) == 0) && a5 >= 4)
    {
      WTF::toCString<char [4],JSC::B3::Air::Inst,char [5],JSC::B3::Air::BasicBlock,char [6],JSC::B3::Air::Arg>(&v10, *(JSC::B3::Air::Arg ***)v6, **(_DWORD ***)(v6 + 16), a2);
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void WTF::toCString<char [4],JSC::B3::Air::Arg,char [5],JSC::B3::Air::Inst,char [5],JSC::B3::Air::BasicBlock>(uint64_t *a1, JSC::B3::Air::Arg *a2, JSC::B3::Air::Arg **a3, _DWORD *a4)
{
  JSC::B3::Air::Kind *v8;
  WTF::PrintStream *v9;
  WTF::PrintStream *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  JSC::B3::Air::Arg **v23[5];
  char v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  _BYTE *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v25 = off_1E3572250;
  v26 = v28;
  v27 = xmmword_199122F80;
  v28[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "At ");
  JSC::B3::Air::Arg::dump(a2, (WTF::PrintStream *)&v25);
  WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", " in ");
  v8 = (JSC::B3::Air::Kind *)(a3 + 15);
  v23[0] = a3;
  v23[1] = (JSC::B3::Air::Arg **)", ";
  v23[2] = (JSC::B3::Air::Arg **)3;
  v23[3] = (JSC::B3::Air::Arg **)&str_477;
  v23[4] = (JSC::B3::Air::Arg **)1;
  v24 = 0;
  v9 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v25[4])(&v25);
  JSC::B3::Air::Kind::dump(v8, v9);
  WTF::PrintStream::printf(v9, "%s", " ");
  WTF::ListDump<WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(v23, (uint64_t)v9);
  v25[5]((WTF::StringPrintStream *)&v25);
  WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", " in ");
  v10 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v25[4])(&v25);
  WTF::PrintStream::printf(v10, "%s", "#");
  WTF::PrintStream::printf(v10, "%u", *a4);
  v25[5]((WTF::StringPrintStream *)&v25);
  v25[5]((WTF::StringPrintStream *)&v25);
  v19 = v26;
  v18 = v27;
  *a1 = 0;
  if (!v19)
  {
    v22 = 0;
LABEL_6:
    WTF::fastFree(v22, v11, v12, v13, v14, v15, v16, v17);
    return;
  }
  if (v18 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x1980F3CA4);
  }
  v20 = WTF::fastMalloc((WTF *)(v18 + 17));
  *(_DWORD *)v20 = 1;
  *(_QWORD *)(v20 + 8) = v18;
  *a1 = v20;
  v21 = v20 + 16;
  memcpy((void *)(v20 + 16), v19, v18);
  *(_BYTE *)(v21 + v18) = 0;
  v22 = (unint64_t)v26;
  if (v26 != v28)
    goto LABEL_6;
}

