void JSC::JIT::emitSlow_op_pow(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  JSC::JIT::linkAllSlowCases(a1, a2, a3, a4, a5, a6, a7, a8);
  v16[0] = a1;
  v16[1] = slow_path_pow;
  JSC::JITSlowPathCall::call((JSC::JITSlowPathCall *)v16, v9, v10, v11, v12, v13, v14, v15);
}

void JSC::JIT::emitRestoreCalleeSaves(JSC::JIT *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  char v10;
  char **v11;
  char *v12;

  v9 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
  if (v9 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
  }
  JSC::AssemblyHelpers::emitRestoreCalleeSavesFor(this, (const JSC::RegisterAtOffsetList *)&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result, a3, a4, a5, a6, a7, a8);
}

void JSC::JIT::compileAndLinkWithoutFinalizing(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  JSC::CodeBlock *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int i;
  uint64_t v16;
  int j;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  _DWORD *v51;
  unsigned __int8 *v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int k;
  uint64_t v113;
  unsigned int m;
  int v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unsigned int *v153;
  __int16 v154;
  unsigned __int8 *v155;
  uint64_t v156;
  int v157;
  _BYTE *v158;
  char v159;
  __int16 v160;
  unsigned __int8 v161;
  __int16 v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  char v166;
  __int16 v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  char v174;
  uint64_t v175;
  int v176;
  unsigned int v177;
  int v178;
  unsigned int v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int n;
  unsigned int v189;
  unsigned __int8 v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int *v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  unsigned int v203;
  uint64_t v204;
  int ii;
  uint64_t v206;
  unint64_t v207;
  pthread_key_t *v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  int v231;
  int v232;
  unsigned int v233;
  uint64_t v234;
  _DWORD *v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  int v239;
  unint64_t v240;
  int v242;
  int v243;
  unint64_t v244;
  uint64_t v246;
  uint64_t v247;
  _DWORD *v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  int v252;
  unint64_t v253;
  int v255;
  int v256;
  unint64_t v257;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  _DWORD *v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  int v267;
  unint64_t v268;
  int v270;
  int v271;
  unint64_t v272;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  int v285;
  int v286;
  unint64_t v287;
  uint64_t v289;
  unint64_t v290;
  int v291;
  unint64_t jj;
  _DWORD *v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  int v297;
  unint64_t v298;
  int v300;
  int v301;
  unint64_t v302;
  uint64_t v304;
  uint64_t v305;
  int v306;
  _DWORD *v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  int v311;
  unint64_t v312;
  int v314;
  int v315;
  unint64_t v316;
  uint64_t v318;
  unsigned int *v319;
  _DWORD *v320;
  unsigned int v321;
  _DWORD *v322;
  _DWORD *v323;
  int v324;
  uint64_t v325;
  _DWORD *v326;
  _DWORD *v327;
  unsigned int v328;
  int v329;
  int v330;
  unint64_t v331;
  unsigned int **v333;
  _DWORD *v334;
  _DWORD *v335;
  uint64_t *v336;
  unsigned int *v337;
  _QWORD *v338;
  uint64_t v339;
  unsigned int v340;
  uint64_t v341;
  _DWORD *v342;
  _DWORD *v343;
  unsigned int v344;
  int v345;
  int v346;
  unint64_t v347;
  uint64_t v349;
  _DWORD *v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  uint64_t v357;
  uint64_t v358;
  _DWORD *v359;
  unsigned int *v360;
  _DWORD *v361;
  unsigned int *v362;
  uint64_t v363;
  unint64_t *v364;
  uint64_t v365;
  unsigned int *v366;
  uint64_t v367;
  _DWORD *v368;
  unsigned int *v369;
  uint64_t v370;
  unint64_t *v371;
  _DWORD *v372;
  uint64_t v373;
  uint64_t v374;
  int v375;
  int v376;
  unint64_t v377;
  int v379;
  int v380;
  unint64_t v381;
  uint64_t v383;
  _DWORD *v384;
  uint64_t v385;
  uint64_t v386;
  int v387;
  int v388;
  unint64_t v389;
  int v391;
  int v392;
  unint64_t v393;
  uint64_t v395;
  _DWORD *v396;
  uint64_t v397;
  uint64_t v398;
  int v399;
  int v400;
  unint64_t v401;
  int v403;
  int v404;
  unint64_t v405;
  uint64_t v407;
  _DWORD *v408;
  uint64_t v409;
  uint64_t v410;
  int v411;
  int v412;
  unint64_t v413;
  int v415;
  int v416;
  unint64_t v417;
  uint64_t v419;
  _DWORD *v420;
  uint64_t v421;
  uint64_t v422;
  int v423;
  int v424;
  unint64_t v425;
  int v427;
  int v428;
  unint64_t v429;
  uint64_t v431;
  _DWORD *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  JSC::JITPlan *v442;
  JSC::JITSizeStatistics *v443;
  WTF::AtomStringImpl *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  void *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unint64_t v459;
  void *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  _DWORD *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  unint64_t v473;
  void *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  JSC::JITDisassembler *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  void *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  void *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  WTF::StringImpl *v521;
  unsigned int v522;
  _DWORD *v523;
  unsigned int v524;
  uint64_t v525;
  unint64_t v526;
  _QWORD *v527;
  int v528;
  int v529;
  unint64_t v530;
  _DWORD *v532;
  _DWORD *v533;
  uint64_t v534;
  BOOL v535;
  __int128 *p_start;
  uint64_t v537;
  size_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  unsigned int *v546;
  uint64_t v547;
  unsigned int v548;
  unsigned int *v549;
  unsigned int v550;
  unsigned int v551;
  unsigned int *v552;
  unsigned int v553;
  unsigned int v554;
  int v555;
  int v556;
  unint64_t v557;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  unsigned int *v566;
  unsigned int v567;
  void *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  unsigned int *v575;
  unsigned int v576;
  unsigned int v577;
  uint64_t v578;
  _DWORD *v579;
  unint64_t v580;
  int v581;
  uint64_t v582;
  _OWORD *v583;
  unint64_t kk;
  int v585;
  char *v586;
  _OWORD *v587;
  char v588;
  unint64_t v589;
  uint64_t v590;
  _OWORD *v591;
  char v592;
  unint64_t v593;
  unint64_t v594;
  _OWORD *v595;
  _OWORD *v596;
  uint64_t v597;
  _DWORD *v598;
  unint64_t v599;
  uint64_t v600;
  unint64_t v601;
  _DWORD *v602;
  uint64_t v603;
  __int128 v604;
  __int128 v605;
  uint64_t v606;
  unsigned int *v607;
  uint64_t v608;
  unint64_t *v609;
  uint64_t v610;
  unsigned int *v611;
  uint64_t v612;
  unint64_t *v613;
  uint64_t v614;
  char *v615;
  void *v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  void *v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  void *v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  unint64_t v637;
  void *v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  unint64_t v651;
  uint64_t v652;
  _DWORD *v653;
  _DWORD *v654;
  uint64_t v655;
  unint64_t v656;
  unint64_t v657;
  unint64_t v658;
  unint64_t v659;
  unsigned int *v660;
  unsigned int v661;
  unsigned int v662;
  unint64_t v663;
  unint64_t v664;
  void *v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  unint64_t v672;
  uint64_t *v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t *v676;
  uint64_t v677;
  uint64_t v678;
  unint64_t v679;
  void *v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  unint64_t v688;
  uint64_t v689;
  unint64_t v690;
  uint64_t v691;
  void *v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  _DWORD *v699;
  uint64_t v700;
  void *v701;
  void *v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  char v709;
  unint64_t v710;
  void *v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  unint64_t v718;
  void *v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  unint64_t v726;
  void *v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  unsigned int v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  void *v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  _QWORD *v748;
  uint64_t v749;
  uint64_t v750;
  _DWORD *v751;
  int v752;
  JSC::AssemblerBuffer *v753;
  uint64_t *v754;
  WTF::StringImpl *v755;
  unsigned int v756;
  _DWORD *v757;
  _DWORD *v758;
  int v759;
  int v760;
  int v761;
  int v762;
  int v763;
  Marker v764;
  unsigned int v765;
  char v766;
  int v767;
  unsigned int v768;
  __int128 start;
  __int128 v770;
  uint64_t v771;
  uint64_t v772;

  v756 = a2;
  v772 = *MEMORY[0x1E0C80C00];
  v11 = *(JSC::CodeBlock **)(a1 + 800);
  v12 = *((_BYTE *)v11 + 18) & 3;
  if (v12 == 3)
  {
    v12 = JSC::CodeBlock::computeCapabilityLevel(v11);
    *((_BYTE *)v11 + 18) = *((_BYTE *)v11 + 18) & 0xFC | v12 & 3;
  }
  if (v12 >= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x198727554);
  }
  v13 = 0x10100u >> (8 * v12);
  *(_BYTE *)(a1 + 792) = v13;
  *(_BYTE *)(a1 + 793) = v13;
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 808) + 152);
  if (v14)
  {
    v319 = *(unsigned int **)(v14 + 8);
    if (v319)
    {
      v321 = *v319;
      if (*v319)
        goto LABEL_339;
    }
    v320 = *(_DWORD **)(v14 + 16);
    if (!v320 || !*v320)
      goto LABEL_5;
    if (v319)
    {
      v321 = *v319;
      if (*v319)
      {
LABEL_339:
        v361 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * v321) | 8));
        *v361 = v321;
        bzero(v361 + 2, 16 * v321);
        v362 = *(unsigned int **)(a1 + 912);
        *(_QWORD *)(a1 + 912) = v361;
        if (v362)
        {
          v364 = (unint64_t *)(v362 + 2);
          v363 = *v362;
          if ((_DWORD)v363)
          {
            v471 = 16 * v363;
            do
            {
              v472 = *v364;
              *v364 = 0;
              if (v472)
                WTF::fastFree(v472, a2, a3, a4, a5, a6, a7, a8);
              v364 += 2;
              v471 -= 16;
            }
            while (v471);
          }
          WTF::fastFree((unint64_t)v362, a2, a3, a4, a5, a6, a7, a8);
        }
      }
    }
    v365 = *(_QWORD *)(*(_QWORD *)(a1 + 808) + 152);
    if (v365)
    {
      v366 = *(unsigned int **)(v365 + 16);
      if (v366)
      {
        v367 = *v366;
        if ((_DWORD)v367)
        {
          v368 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v367 + 8));
          *v368 = v367;
          bzero(v368 + 2, 8 * v367);
          v369 = *(unsigned int **)(a1 + 920);
          *(_QWORD *)(a1 + 920) = v368;
          if (v369)
          {
            v371 = (unint64_t *)(v369 + 2);
            v370 = *v369;
            if ((_DWORD)v370)
            {
              v525 = 8 * v370;
              do
              {
                v526 = *v371;
                *v371 = 0;
                if (v526)
                  WTF::fastFree(v526, a2, a3, a4, a5, a6, a7, a8);
                ++v371;
                v525 -= 8;
              }
              while (v525);
            }
            WTF::fastFree((unint64_t)v369, a2, a3, a4, a5, a6, a7, a8);
          }
        }
      }
    }
  }
LABEL_5:
  if (!(HIBYTE(word_1ECF4C286) | dword_1ECF4C28A))
  {
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 352) + 93016))
      goto LABEL_7;
    if (!byte_1ECF4C486)
      goto LABEL_511;
  }
  v481 = (JSC::JITDisassembler *)WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)&v764.markerName[178] = JSC::JITDisassembler::JITDisassembler(v481, *(JSC::CodeBlock **)(a1 + 800));
  std::unique_ptr<JSC::JITDisassembler>::operator=[abi:sn180100]((unint64_t *)(a1 + 736), (unint64_t *)&v764.markerName[178], v482, v483, v484, v485, v486, v487);
  std::unique_ptr<JSC::JITDisassembler>::~unique_ptr[abi:sn180100]((unint64_t *)&v764.markerName[178], v488, v489, v490, v491, v492, v493, v494);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 352) + 93016))
  {
LABEL_511:
    v495 = WTF::fastMalloc((WTF *)0x80);
    v502 = JSC::Profiler::Database::ensureBytecodesFor(*(JSC::Profiler::Database **)(*(_QWORD *)(a1 + 352) + 93016), *(JSC::CodeBlock **)(a1 + 800), v496, v497, v498, v499, v500, v501);
    JSC::Profiler::Compilation::Compilation(v495, v502, 1, v503, v504, v505, v506, v507);
    *(_QWORD *)&v764.markerName[178] = v495;
    WTF::RefPtr<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>::operator=((JSC::Profiler::Compilation **)(a1 + 744), (JSC::Profiler::Compilation **)&v764.markerName[178], v508, v509, v510, v511, v512, v513);
    if (*(_QWORD *)&v764.markerName[178])
      WTF::RefCounted<JSC::Profiler::Compilation>::deref(*(JSC::Profiler::Compilation **)&v764.markerName[178], v514, v515, v516, v517, v518, v519, v520);
    JSC::Profiler::Compilation::addProfiledBytecodes(*(_QWORD *)(a1 + 744), *(_QWORD *)(*(_QWORD *)(a1 + 352) + 93016), *(JSC::CodeBlock **)(a1 + 800), v516, v517, v518, v519, v520);
  }
LABEL_7:
  v758 = (_DWORD *)(a1 + 752);
  v753 = (JSC::AssemblerBuffer *)(a1 + 56);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v753, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  *(_QWORD *)&v764.markerName[178] = 0;
  if (*(_BYTE *)(a1 + 768))
  {
    *(_DWORD *)&v764.markerName[34] = i;
    JSC::PCToCodeOriginMapBuilder::appendItemSlow((uint64_t)v758, (unsigned int *)&v764.markerName[34], (unint64_t *)&v764.markerName[178]);
  }
  v759 = BYTE3(qword_1ECF4C780);
  if (BYTE3(qword_1ECF4C780))
  {
    v16 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)(v16 + 8) = "Baseline_prologue";
    *(_DWORD *)(v16 + 16) = 4;
    v752 = *(_DWORD *)(a1 + 200);
    *(_QWORD *)v16 = 0x1100000002;
  }
  else
  {
    v16 = 0;
  }
  for (j = *(_DWORD *)(a1 + 200); j < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v753, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      j = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = -721215457;
    j = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  v18 = *(_QWORD *)(a1 + 736);
  if (v18)
    *(_DWORD *)(v18 + 8) = j;
  if (*(_BYTE *)(a1 + 24))
  {
    v24 = *(_QWORD *)(a1 + 16);
    v22 = *(_QWORD *)(a1 + 8) ^ (*(_QWORD *)(a1 + 8) << 23);
    v23 = v22 >> 17;
  }
  else
  {
    v19 = atomic_load(&JSC::AbstractMacroAssemblerBase::initializeRandom(void)::onceKey);
    if (v19 != -1)
    {
      *(_QWORD *)&v764.markerName[178] = &v764.markerName[106];
      *(_QWORD *)&v764.markerName[34] = &v764.markerName[178];
      std::__call_once(&JSC::AbstractMacroAssemblerBase::initializeRandom(void)::onceKey, &v764.markerName[34], (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::AbstractMacroAssemblerBase::initializeRandom(void)::$_0 &&>>);
    }
    v20 = JSC::AbstractMacroAssemblerBase::initializeRandom(void)::globalCounter++;
    *(_DWORD *)a1 = v20;
    if (v20)
      v21 = v20;
    else
      v21 = 1;
    v22 = v21 ^ (v21 << 23);
    v23 = v22 >> 17;
    v24 = ((v21 >> 26) | (v21 << 23)) ^ (v22 >> 17);
    *(_BYTE *)(a1 + 24) = 1;
  }
  v25 = v23 ^ (v24 >> 26) ^ v22 ^ v24;
  *(_QWORD *)(a1 + 8) = v24;
  *(_QWORD *)(a1 + 16) = v25;
  LOBYTE(v25) = v25 + v24;
  v26 = *(_DWORD *)(a1 + 200);
  if ((v25 & 1) != 0)
  {
    if (v26 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v753, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v26 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v26) = -721215457;
    v26 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v26;
  }
  if (v26 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v753, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v26 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v26) = -1447068675;
  v27 = *(_DWORD *)(a1 + 200);
  v28 = v27 + 4;
  *(_DWORD *)(a1 + 200) = v27 + 4;
  if ((v27 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v753, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v28 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = -1862269955;
  v29 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v29; v29 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v29)
  {
    if ((v29 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v753, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v29 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = -721215457;
    v29 = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  v30 = (8 * *(_DWORD *)(*(_QWORD *)(a1 + 808) + 20) + 24) & 0xFFFFFFF0;
  v31 = v30 - 16;
  JSC::MacroAssemblerARM64::add64(a1, 16 - v30, 29, 1, a5, a6, a7, a8);
  *(_QWORD *)&v764.markerName[34] = &v764.markerName[50];
  *(_QWORD *)&v764.markerName[42] = 2;
  if (dword_1ECF4C250 < v31)
  {
    JSC::MacroAssemblerARM64::branch64(a1, 8, 1, 29, v33, v34, v35, v36, (uint64_t)&v764.markerName[22]);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v764.markerName[34], &v764.markerName[22], v436, v437, v438, v439, v440, v441);
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198726CB4);
  }
  v37 = *(_QWORD *)(a1 + 352) + 8;
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load64(a1, v37, *(char *)(a1 + 272), v32, v33, v34, v35, v36);
  JSC::MacroAssemblerARM64::branch64(a1, 8, 16, 1, v38, v39, v40, v41, (uint64_t)&v764.markerName[10]);
  v49 = *(_DWORD *)&v764.markerName[10];
  if (*(_DWORD *)&v764.markerName[10] != -1)
  {
    v50 = *(_DWORD *)&v764.markerName[46];
    if (*(_DWORD *)&v764.markerName[46] == *(_DWORD *)&v764.markerName[42])
    {
      v51 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v764.markerName[34], (void *)(*(unsigned int *)&v764.markerName[46] + 1), (unint64_t)&v764.markerName[10], v44, v45, v46, v47, v48);
      v53 = *v51;
      v52 = (unsigned __int8 *)(v51 + 1);
      v49 = v53;
      v50 = *(_DWORD *)&v764.markerName[46];
    }
    else
    {
      v52 = &v764.markerName[14];
    }
    v54 = *(_QWORD *)&v764.markerName[34] + 12 * v50;
    *(_DWORD *)v54 = v49;
    *(_QWORD *)(v54 + 4) = *(_QWORD *)v52;
    ++*(_DWORD *)&v764.markerName[46];
  }
  v55 = *(_DWORD *)(a1 + 200);
  if (v55 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v753, v42, v43, v44, v45, v46, v47, v48);
    v55 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v55) = -1862270913;
  *(_DWORD *)(a1 + 200) += 4;
  v56 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
  if (v56 != -1)
  {
    *(_QWORD *)&v764.markerName[178] = &v764.markerName[154];
    *(_QWORD *)&v764.markerName[106] = &v764.markerName[178];
    std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, &v764.markerName[106], (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
  }
  JSC::AssemblyHelpers::emitSaveCalleeSavesFor((JSC::AssemblyHelpers *)a1, (const JSC::RegisterAtOffsetList *)&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result, v43, v44, v45, v46, v47, v48);
  v64 = *(_DWORD *)(a1 + 200);
  if (v64 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v753, v57, v58, v59, v60, v61, v62, v63);
    v64 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v64) = -1303430149;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::or64(a1, 2, 27, 28);
  v72 = *(_DWORD *)(a1 + 200);
  if (v72 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v753, v65, v66, v67, v68, v69, v70, v71);
    v72 = *(_DWORD *)(a1 + 200);
  }
  v754 = a9;
  v755 = (WTF::StringImpl *)v16;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v72) = -129956934;
  v73 = *(_DWORD *)(a1 + 200);
  v74 = v73 + 4;
  *(_DWORD *)(a1 + 200) = v73 + 4;
  if ((v73 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v753, v65, v66, v67, v68, v69, v70, v71);
    v74 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v74) = -1454872742;
  v75 = *(_DWORD *)(a1 + 200);
  v76 = v75 + 4;
  *(_DWORD *)(a1 + 200) = v75 + 4;
  v77 = *(_QWORD *)(a1 + 808);
  if ((*(_WORD *)(v77 + 28) & 0x3000) == 0x2000
    && (*(_QWORD *)(v77 + 20) & 0x7FFFFFFE80000000) != 0x80000000
    && *(_BYTE *)(a1 + 793))
  {
    if ((v75 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v753, v65, v66, v67, v68, v69, v70, v71);
      v76 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v76) = -129956958;
    v78 = *(_DWORD *)(a1 + 200);
    v79 = v78 + 4;
    *(_DWORD *)(a1 + 200) = v78 + 4;
    if ((v78 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v753, v65, v66, v67, v68, v69, v70, v71);
      v79 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v79) = -129400766;
    *(_DWORD *)(a1 + 200) += 4;
    v80 = *(_QWORD *)(a1 + 808);
    v81 = *(_QWORD *)(v80 + 20);
    if ((v81 & 0x7FFFFFFF00000000) != 0)
    {
      v82 = 0;
      v83 = 0x280000001DLL;
      v84 = 0x800000002;
      do
      {
        if (v82 || (v81 & 0x80000000) == 0)
        {
          JSC::MacroAssemblerARM64::load64(a1, v83, 0, v67, v68, v69, v70, v71);
          JSC::MacroAssemblerARM64::store64(a1, 0, v84, v85, v86, v87, v88, v89);
          v80 = *(_QWORD *)(a1 + 808);
        }
        ++v82;
        v81 = *(_QWORD *)(v80 + 20);
        v83 += 0x800000000;
        v84 += 0x1800000000;
      }
      while (v82 < (HIDWORD(v81) & 0x7FFFFFFF));
    }
  }
  v90 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 120);
  if (v90 && *(unsigned __int8 *)(v90 + 12) - 3 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x198726D14);
  }
  if (v759)
  {
    v442 = *(JSC::JITPlan **)(a1 + 360);
    v443 = *(JSC::JITSizeStatistics **)(*(_QWORD *)(a1 + 352) + 41440);
    *(_QWORD *)&v764.id = v16;
    *(_DWORD *)&v764.markerName[2] = v752;
    JSC::JITSizeStatistics::markEnd(v443, &v764, (JSC::CCallHelpers *)a1, v442);
    *(_QWORD *)&v764.id = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, v444, v445, v446, v447, v448, v449, v450);
        WTF::fastFree(v473, v474, v475, v476, v477, v478, v479, v480);
      }
      else
      {
        *(_DWORD *)v16 -= 2;
      }
    }
    v755 = 0;
  }
  JSC::JIT::privateCompileMainPass((JSC::JIT *)a1);
  v98 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v98)
  {
    v99 = 0;
    v100 = 12;
    do
    {
      if (v99 >= *(unsigned int *)(a1 + 636))
      {
        __break(0xC471u);
        JUMPOUT(0x1987275D8);
      }
      v101 = *(_QWORD *)(a1 + 624);
      v102 = *(unsigned int *)(v101 + v100);
      if (*(_DWORD *)(a1 + 396) <= v102)
      {
        __break(0xC471u);
        JUMPOUT(0x1987275E0);
      }
      *(_DWORD *)&v764.markerName[178] = *(_DWORD *)(*(_QWORD *)(a1 + 384) + 4 * v102);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)(v101 + v100 - 12), (unsigned int *)&v764.markerName[178], a1, v93, v94, v95, v96, v97);
      ++v99;
      v100 += 16;
    }
    while (v98 != v99);
  }
  if (*(_DWORD *)(a1 + 632))
  {
    if (*(_DWORD *)(a1 + 636))
      *(_DWORD *)(a1 + 636) = 0;
    v103 = *(_QWORD *)(a1 + 624);
    if (v103)
    {
      *(_QWORD *)(a1 + 624) = 0;
      *(_DWORD *)(a1 + 632) = 0;
      WTF::fastFree(v103, v91, v92, v93, v94, v95, v96, v97);
    }
  }
  JSC::JIT::privateCompileSlowCases((JSC::JIT *)a1, v91, v92, v93, v94, v95, v96, v97);
  v111 = *(_QWORD *)(a1 + 736);
  if (v111)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a1, v104, v105, v106, v107, v108, v109, v110, &v763);
    *(_DWORD *)(v111 + 48) = v763;
  }
  for (k = *(_DWORD *)(a1 + 200); k < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = k)
  {
    if ((k + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v753, v104, v105, v106, v107, v108, v109, v110);
      k = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + k) = -721215457;
    k = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  *(_QWORD *)&v764.markerName[178] = 0;
  if (*(_BYTE *)(a1 + 768))
  {
    *(_DWORD *)&v764.markerName[106] = k;
    JSC::PCToCodeOriginMapBuilder::appendItemSlow((uint64_t)v758, (unsigned int *)&v764.markerName[106], (unint64_t *)&v764.markerName[178]);
  }
  v113 = *(_QWORD *)(a1 + 808);
  if ((*(_WORD *)(v113 + 28) & 0x3000) != 0x2000 || (*(_QWORD *)(v113 + 20) & 0x7FFFFFFF00000000) == 0x100000000)
  {
    *(_DWORD *)(a1 + 732) = j;
  }
  else
  {
    for (m = *(_DWORD *)(a1 + 200); (signed int)m < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = m)
    {
      if (m + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v753, v104, v105, v106, v107, v108, v109, v110);
        m = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + m) = -721215457;
      m = *(_DWORD *)(a1 + 200) + 4;
    }
    *(_DWORD *)(a1 + 208) = 0;
    *(_DWORD *)(a1 + 732) = m;
    if (m + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v753, v104, v105, v106, v107, v108, v109, v110);
      m = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + m) = -1447068675;
    v116 = *(_DWORD *)(a1 + 200);
    v117 = v116 + 4;
    *(_DWORD *)(a1 + 200) = v116 + 4;
    if ((v116 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v753, v104, v105, v106, v107, v108, v109, v110);
      v117 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v117) = -1862269955;
    v118 = *(_DWORD *)(a1 + 200);
    v119 = v118 + 4;
    *(_DWORD *)(a1 + 200) = v118 + 4;
    if ((*(_WORD *)(*(_QWORD *)(a1 + 808) + 28) & 0x3000) != 0x2000)
    {
      __break(0xC471u);
      JUMPOUT(0x198726F0CLL);
    }
    if ((v118 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v753, v104, v105, v106, v107, v108, v109, v110);
      v119 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v119) = -129956960;
    v120 = *(_DWORD *)(a1 + 200);
    v121 = v120 + 4;
    *(_DWORD *)(a1 + 200) = v120 + 4;
    if ((v120 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v753, v104, v105, v106, v107, v108, v109, v110);
      v121 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v121) = 939593759;
    v122 = *(_DWORD *)(a1 + 200);
    v123 = v122 + 4;
    *(_DWORD *)(a1 + 200) = v122 + 4;
    v124 = *(_DWORD *)(*(_QWORD *)(a1 + 808) + 24) & 0x7FFFFFFF;
    if ((v122 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v753, v104, v105, v106, v107, v108, v109, v110);
      v123 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v123) = -1203633247;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::branch32(a1, 2, 1, v124, v107, v108, v109, v110, (uint64_t)&v764.markerName[178]);
    v762 = v29;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v764.markerName[178], (unsigned int *)&v762, a1, v125, v126, v127, v128, v129);
    *(_DWORD *)(a1 + 640) = 0;
    JSC::AssemblyHelpers::getArityPadding(a1, *(_QWORD *)(a1 + 352), v124, 1, 0, 2, 3, (uint64_t)&v764.markerName[34]);
    v137 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440);
    v138 = *(_QWORD *)(v137 + 312);
    v139 = *(unsigned int **)(v137 + 320);
    if (v139)
    {
      do
        v140 = __ldaxr(v139);
      while (__stlxr(v140 + 1, v139));
    }
    *(_DWORD *)(a1 + 208) = 0;
    v141 = *(_DWORD *)(a1 + 200);
    if (v141 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v753, v130, v131, v132, v133, v134, v135, v136);
      v141 = *(_DWORD *)(a1 + 200);
    }
    v142 = (_QWORD *)(a1 + 32);
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v141) = -1811939328;
    v143 = (*(_DWORD *)(a1 + 200) + 4);
    *(_DWORD *)(a1 + 200) = v143;
    v764.markerName[194] = -1;
    v764.markerName[197] = 15;
    strcpy((char *)&v764.markerName[195], "A");
    *(_QWORD *)&v764.markerName[178] = v143 - 4;
    *(_QWORD *)&v764.markerName[186] = v138;
    *(_WORD *)&v764.markerName[198] = 384;
    v144 = *(unsigned int *)(a1 + 44);
    if ((_DWORD)v144 == *(_DWORD *)(a1 + 40))
    {
      v305 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v142, v144 + 1, (unint64_t)&v764.markerName[178], v132, v133, v134, v135, v136);
      v145 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
      *(_QWORD *)v145 = 0;
      *(_QWORD *)(v145 + 8) = 0;
      *(_BYTE *)(v145 + 16) = -1;
      v306 = (((*(unsigned __int8 *)(v145 + 19) >> 4) & 0xF) << 20) | 0xF0041;
      *(_WORD *)(v145 + 17) = 65;
      *(_BYTE *)(v145 + 19) = BYTE2(v306);
      *(_WORD *)(v145 + 20) &= 0xFC00u;
      v146 = *(_OWORD *)v305;
      v147 = *(_QWORD *)(v305 + 16);
    }
    else
    {
      v145 = *v142 + 24 * v144;
      v146 = *(_OWORD *)&v764.markerName[178];
      v147 = *(_QWORD *)&v764.markerName[194];
    }
    *(_QWORD *)(v145 + 16) = v147;
    *(_OWORD *)v145 = v146;
    ++*(_DWORD *)(a1 + 44);
    if (v139)
    {
      do
      {
        v148 = __ldaxr(v139);
        v149 = v148 - 1;
      }
      while (__stlxr(v149, v139));
      if (!v149)
      {
        atomic_store(1u, v139);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v139, v130, v131, v132, v133, v134, v135, v136);
        WTF::fastFree(v459, v460, v461, v462, v463, v464, v465, v466);
      }
    }
    v761 = v29;
    JSC::MacroAssembler::jump(a1, (unsigned int *)&v761, v131, v132, v133, v134, v135, v136);
  }
  v150 = *(unsigned int *)&v764.markerName[46];
  if (*(_DWORD *)&v764.markerName[46])
  {
    v151 = 0;
    do
    {
      if (v151 >= *(unsigned int *)&v764.markerName[46])
      {
        __break(0xC471u);
        JUMPOUT(0x1987275D0);
      }
      v152 = *(_QWORD *)&v764.markerName[34];
      v153 = (unsigned int *)(*(_QWORD *)&v764.markerName[34] + 12 * v151);
      *(_DWORD *)(a1 + 208) = 0;
      v155 = (unsigned __int8 *)(v153 + 2);
      v154 = *((unsigned __int8 *)v153 + 8);
      switch(*((_BYTE *)v153 + 8))
      {
        case 0x83:
        case 0x87:
          v156 = *v153;
          v157 = *(_DWORD *)(a1 + 200);
          if (v157 < *(_DWORD *)(a1 + 52))
          {
            do
            {
              if ((v157 + 4) > *(_DWORD *)(a1 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v753, v104, v105, v106, v107, v108, v109, v110);
                v157 = *(_DWORD *)(a1 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(a1 + 56) + v157) = -721215457;
              v157 = *(_DWORD *)(a1 + 200) + 4;
              *(_DWORD *)(a1 + 200) = v157;
            }
            while (v157 < *(_DWORD *)(a1 + 52));
            v154 = *v155;
          }
          v158 = (_BYTE *)(v152 + 12 * v151);
          v159 = v158[9];
          v160 = v158[10];
          v161 = v158[11];
          *(_QWORD *)&v764.markerName[178] = v156;
          *(_QWORD *)&v764.markerName[186] = v157;
          v764.markerName[197] = v159 & 0xF;
          *(_WORD *)&v764.markerName[195] = v154;
          v162 = v160 << 6;
          goto LABEL_115;
        case 0x84:
        case 0x88:
          v163 = *v153;
          v164 = *(_DWORD *)(a1 + 200);
          if (v164 < *(_DWORD *)(a1 + 52))
          {
            do
            {
              if ((v164 + 4) > *(_DWORD *)(a1 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v753, v104, v105, v106, v107, v108, v109, v110);
                v164 = *(_DWORD *)(a1 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(a1 + 56) + v164) = -721215457;
              v164 = *(_DWORD *)(a1 + 200) + 4;
              *(_DWORD *)(a1 + 200) = v164;
            }
            while (v164 < *(_DWORD *)(a1 + 52));
            v154 = *v155;
          }
          v165 = v152 + 12 * v151;
          v166 = *(_BYTE *)(v165 + 9);
          v167 = *(_WORD *)(v165 + 4);
          v161 = *(_BYTE *)(v165 + 11);
          *(_QWORD *)&v764.markerName[178] = v163;
          *(_QWORD *)&v764.markerName[186] = v164;
          v764.markerName[197] = v166 & 0xF;
          *(_WORD *)&v764.markerName[195] = v154;
          v162 = v167 & 0x3F;
LABEL_115:
          *(_WORD *)&v764.markerName[198] = v162;
          v764.markerName[194] = v161;
          break;
        default:
          v172 = *v153;
          v173 = *(_DWORD *)(a1 + 200);
          if (v173 < *(_DWORD *)(a1 + 52))
          {
            do
            {
              if ((v173 + 4) > *(_DWORD *)(a1 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v753, v104, v105, v106, v107, v108, v109, v110);
                v173 = *(_DWORD *)(a1 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(a1 + 56) + v173) = -721215457;
              v173 = *(_DWORD *)(a1 + 200) + 4;
              *(_DWORD *)(a1 + 200) = v173;
            }
            while (v173 < *(_DWORD *)(a1 + 52));
            v154 = *v155;
          }
          v174 = *(_BYTE *)(v152 + 12 * v151 + 9);
          v764.markerName[194] = -1;
          *(_QWORD *)&v764.markerName[178] = v172;
          *(_QWORD *)&v764.markerName[186] = v173;
          v764.markerName[197] = v174 & 0xF;
          *(_WORD *)&v764.markerName[195] = v154;
          *(_WORD *)&v764.markerName[198] = 0;
          break;
      }
      v168 = *(unsigned int *)(a1 + 44);
      if ((_DWORD)v168 == *(_DWORD *)(a1 + 40))
      {
        v175 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 32, v168 + 1, (unint64_t)&v764.markerName[178], v106, v107, v108, v109, v110);
        v169 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
        *(_QWORD *)v169 = 0;
        *(_QWORD *)(v169 + 8) = 0;
        *(_BYTE *)(v169 + 16) = -1;
        v176 = (((*(unsigned __int8 *)(v169 + 19) >> 4) & 0xF) << 20) | 0xF0041;
        *(_WORD *)(v169 + 17) = 65;
        *(_BYTE *)(v169 + 19) = BYTE2(v176);
        *(_WORD *)(v169 + 20) &= 0xFC00u;
        v170 = *(_OWORD *)v175;
        v171 = *(_QWORD *)(v175 + 16);
      }
      else
      {
        v169 = *(_QWORD *)(a1 + 32) + 24 * v168;
        v170 = *(_OWORD *)&v764.markerName[178];
        v171 = *(_QWORD *)&v764.markerName[194];
      }
      *(_QWORD *)(v169 + 16) = v171;
      *(_OWORD *)v169 = v170;
      ++*(_DWORD *)(a1 + 44);
      ++v151;
    }
    while (v151 != v150);
  }
  *(_DWORD *)(a1 + 640) = 0;
  v177 = *(_DWORD *)(a1 + 200);
  if (v177 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v753, v104, v105, v106, v107, v108, v109, v110);
    v177 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v177) = -129956960;
  v178 = -1207811152;
  v179 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v179;
  v180 = *(unsigned int *)(a1 + 640);
  if (v180 >= 4)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198726FE8);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(v180 >> 2), a1 + 264, v106, v107, v108, v109, v110);
    v179 = *(_DWORD *)(a1 + 200);
  }
  else
  {
    v178 = -1207811137;
  }
  if (v179 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v753, v104, v105, v106, v107, v108, v109, v110);
    v179 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v179) = v178;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::JIT::appendCall(a1, (uint64_t)operationThrowStackOverflowError, v105, v106, v107, v108, v109, v110, (int *)&v764.markerName[106]);
  for (n = *(_DWORD *)(a1 + 200); n < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = n)
  {
    if ((n + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v753, v181, v182, v183, v184, v185, v186, v187);
      n = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + n) = -721215457;
    n = *(_DWORD *)(a1 + 200) + 4;
  }
  v189 = n;
  if ((n + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v753, v181, v182, v183, v184, v185, v186, v187);
    v189 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v189) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v190 = 69;
  else
    v190 = 65;
  *(_DWORD *)&v764.markerName[178] = n;
  *(_DWORD *)&v764.markerName[182] = 0;
  v764.markerName[186] = v190;
  *(_WORD *)&v764.markerName[187] = 15;
  v764.markerName[189] = -1;
  v191 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440);
  v192 = *(_QWORD *)(v191 + 24);
  v193 = *(unsigned int **)(v191 + 32);
  if (v193)
  {
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 + 1, v193));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&v764.markerName[178], v192, a1, v183, v184, v185, v186, v187);
    do
    {
      v202 = __ldaxr(v193);
      v203 = v202 - 1;
    }
    while (__stlxr(v203, v193));
    if (!v203)
    {
      atomic_store(1u, v193);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v193, v195, v196, v197, v198, v199, v200, v201);
      WTF::fastFree(v451, v452, v453, v454, v455, v456, v457, v458);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&v764.markerName[178], v192, a1, v183, v184, v185, v186, v187);
  }
  v204 = *(_QWORD *)(a1 + 736);
  if (v204)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a1, v195, v196, v197, v198, v199, v200, v201, &v760);
    *(_DWORD *)(v204 + 52) = v760;
  }
  for (ii = *(_DWORD *)(a1 + 200); ii < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = ii)
  {
    if ((ii + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v753, v195, v196, v197, v198, v199, v200, v201);
      ii = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + ii) = -721215457;
    ii = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  *(_QWORD *)&v764.markerName[178] = 0;
  if (*(_BYTE *)(a1 + 768))
  {
    *(_DWORD *)&v764.markerName[106] = ii;
    JSC::PCToCodeOriginMapBuilder::appendItemSlow((uint64_t)v758, (unsigned int *)&v764.markerName[106], (unint64_t *)&v764.markerName[178]);
  }
  v206 = *(_QWORD *)(a1 + 800);
  *(_QWORD *)&v764.markerName[178] = 0;
  *(_QWORD *)&v764.markerName[186] = 0;
  *(_QWORD *)&v764.markerName[194] = v206;
  *(_QWORD *)&v764.markerName[202] = &v764.markerName[210];
  v765 = 128;
  v207 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v207 != -1)
  {
    *(_QWORD *)&v764.markerName[106] = &v764.markerName[90];
    *(_QWORD *)&v764.markerName[154] = &v764.markerName[106];
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v764.markerName[154], (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v208 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v216 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v216)
  {
    v216 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v216, v208);
  }
  v217 = *(_QWORD *)v216;
  if (*(_QWORD *)v216 != v216 + 8)
  {
    v218 = *(_DWORD *)(v216 + 136);
    if (v765 < v218)
    {
      if (*(_QWORD *)&v764.markerName[202] && *(Marker **)&v764.markerName[202] != (Marker *)&v764.markerName[210])
      {
        WTF::fastFree(*(unint64_t *)&v764.markerName[202], v209, v210, v211, v212, v213, v214, v215);
        v217 = *(_QWORD *)v216;
        v218 = *(_DWORD *)(v216 + 136);
      }
      *(_QWORD *)&v764.markerName[202] = v217;
      v765 = v218;
      *(_QWORD *)v216 = v216 + 8;
      *(_DWORD *)(v216 + 136) = 128;
    }
  }
  v766 = 1;
  v767 = 0;
  v768 = 0;
  start = 0u;
  v770 = 0u;
  v771 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v764.markerName[178], a1, v756, v211, v212, v213, v214, v215);
  if (!(_BYTE)v767)
  {
    v521 = v755;
    *v754 = 0;
    goto LABEL_675;
  }
  v226 = *(unsigned int *)(a1 + 676);
  if ((_DWORD)v226)
  {
    v322 = *(_DWORD **)(a1 + 664);
    v323 = &v322[4 * v226];
    do
    {
      v324 = v322[1] >> 2;
      v325 = v322[3];
      if (*v322 >= 2u)
      {
        if (*v322 == 2)
        {
          v342 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 808) + 152) + 16);
          if (*v342 <= v325)
          {
            __break(0xC471u);
            JUMPOUT(0x1987273CCLL);
          }
          v343 = *(_DWORD **)(a1 + 920);
          if (*v343 <= v325)
          {
            __break(0xC471u);
            JUMPOUT(0x1987273ECLL);
          }
          v344 = v322[2] + v324;
          if (*(_DWORD *)(a1 + 396) <= v344)
          {
            __break(0xC471u);
            JUMPOUT(0x1987275E8);
          }
          v345 = *(_DWORD *)(*(_QWORD *)(a1 + 384) + 4 * v344);
          if (v345 < 4)
            v346 = 0;
          else
            v346 = *(_DWORD *)((v345 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
          v347 = (v345 - v346) + (_QWORD)start;
          if ((unint64_t)start > v347 || (_QWORD)start + *(_QWORD *)&v764.markerName[186] < v347)
          {
            __break(0xC471u);
            JUMPOUT(0x198727298);
          }
          v349 = (uint64_t)&v342[6 * v325 + 2];
          v350 = v343 + 2;
          v351 = v342[6 * v325 + 5];
          if ((_DWORD)v351)
          {
            v352 = *(unsigned int *)(v349 + 8);
            if ((_DWORD)v352)
            {
              v353 = 16 * v352;
              v354 = *(_QWORD *)v349;
              while (!*(_QWORD *)v354)
              {
                v354 += 16;
                v353 -= 16;
                if (!v353)
                  goto LABEL_332;
              }
            }
            else
            {
              v354 = *(_QWORD *)v349;
            }
            v355 = *(_QWORD *)v349 + 16 * v352;
            if (v354 != v355)
            {
LABEL_325:
              v356 = *(_DWORD *)(v354 + 8);
              v357 = v347;
              if (v356)
              {
                v757 = v323;
                v524 = v356 + v324;
                if (*(_DWORD *)(a1 + 396) <= v524)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1987275F0);
                }
                *(_DWORD *)&v764.markerName[146] = *(_DWORD *)(*(_QWORD *)(a1 + 384) + 4 * v524);
                v357 = JSC::LinkBuffer::locationOf<(WTF::PtrTag)40321>(&v764.markerName[178], (int *)&v764.markerName[146]);
                v323 = v757;
              }
              v358 = *(unsigned int *)(v354 + 12);
              v359 = *(_DWORD **)&v350[2 * v325];
              if (*v359 <= v358)
              {
                __break(0xC471u);
                JUMPOUT(0x1987270ACLL);
              }
              *(_QWORD *)&v359[2 * v358 + 2] = v357;
              while (1)
              {
                v354 += 16;
                if (v354 == v355)
                  break;
                if (*(_QWORD *)v354)
                {
                  if (v354 != v355)
                    goto LABEL_325;
                  break;
                }
              }
              v351 = *(unsigned int *)(v349 + 12);
            }
          }
          else
          {
            v351 = 0;
          }
LABEL_332:
          v360 = *(unsigned int **)&v350[2 * v325];
          if (*v360 <= v351)
          {
            __break(0xC471u);
            JUMPOUT(0x19872740CLL);
          }
          *(_QWORD *)&v360[2 * v351 + 2] = v347;
        }
      }
      else
      {
        v326 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 808) + 152) + 8);
        if (*v326 <= v325)
        {
          __break(0xC471u);
          JUMPOUT(0x19872738CLL);
        }
        v327 = *(_DWORD **)(a1 + 912);
        if (*v327 <= v325)
        {
          __break(0xC471u);
          JUMPOUT(0x1987273ACLL);
        }
        v328 = v322[2] + v324;
        if (*(_DWORD *)(a1 + 396) <= v328)
        {
          __break(0xC471u);
          JUMPOUT(0x1987275F8);
        }
        v329 = *(_DWORD *)(*(_QWORD *)(a1 + 384) + 4 * v328);
        if (v329 < 4)
          v330 = 0;
        else
          v330 = *(_DWORD *)((v329 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
        v331 = (v329 - v330) + (_QWORD)start;
        if ((unint64_t)start > v331 || (_QWORD)start + *(_QWORD *)&v764.markerName[186] < v331)
        {
          __break(0xC471u);
          JUMPOUT(0x198727278);
        }
        v333 = (unsigned int **)&v326[4 * v325 + 2];
        v334 = v327 + 2;
        v335 = &v334[4 * v325];
        *((_QWORD *)v335 + 1) = v331;
        v336 = (uint64_t *)(v335 + 2);
        v337 = *v333;
        if (*v333)
        {
          v338 = &v334[4 * v325];
          v339 = 1;
          do
          {
            if (v339 - 1 >= (unint64_t)*v337)
              break;
            v340 = v337[v339];
            if (v340)
            {
              v522 = v340 + v324;
              if (*(_DWORD *)(a1 + 396) <= v522)
              {
                __break(0xC471u);
                JUMPOUT(0x198727600);
              }
              v523 = v323;
              *(_DWORD *)&v764.markerName[150] = *(_DWORD *)(*(_QWORD *)(a1 + 384) + 4 * v522);
              v341 = JSC::LinkBuffer::locationOf<(WTF::PtrTag)40321>(&v764.markerName[178], (int *)&v764.markerName[150]);
              v323 = v523;
            }
            else
            {
              v341 = *v336;
            }
            if (v339 - 1 >= (unint64_t)*(unsigned int *)*v338)
            {
              __break(0xC471u);
              JUMPOUT(0x19872704CLL);
            }
            *(_QWORD *)(*v338 + 8 * v339) = v341;
            v337 = *v333;
            ++v339;
          }
          while (*v333);
        }
      }
      v322 += 4;
    }
    while (v322 != v323);
  }
  v227 = *(unsigned int *)(a1 + 380);
  if ((_DWORD)v227)
  {
    v228 = 16 * v227;
    v229 = *(_QWORD *)(a1 + 368) + 4;
    do
    {
      v230 = *(_QWORD *)(v229 + 4);
      if (v230)
      {
        v231 = *(_DWORD *)(v229 - 4);
        if (v231 < 4)
          v232 = 0;
        else
          v232 = *(_DWORD *)((v231 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
        v233 = v231 - v232;
        if ((*(_DWORD *)v229 & 2) != 0)
        {
          if ((*(_DWORD *)v229 & 4) != 0)
          {
            *(_DWORD *)&v764.markerName[106] = v233;
            JSC::ARM64Assembler::linkJump((JSC::ExecutableAllocator *)start, (unsigned int *)&v764.markerName[106], v230);
          }
          else
          {
            JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>((JSC::ExecutableAllocator *)(start + v233 - 4), start + v233 - 4, v230);
          }
        }
        else
        {
          *(_DWORD *)&v764.markerName[106] = v233 - 16;
          JSC::ARM64Assembler::linkPointer(start, (unsigned int *)&v764.markerName[106], v230);
        }
      }
      v229 += 16;
      v228 -= 16;
    }
    while (v228);
  }
  v234 = *(unsigned int *)(a1 + 428);
  if ((_DWORD)v234)
  {
    v235 = *(_DWORD **)(a1 + 416);
    v236 = *(_QWORD *)&v764.markerName[186];
    v237 = v234 << 6;
    do
    {
      v238 = v235[6];
      if (v238 < 4)
        v239 = 0;
      else
        v239 = *(_DWORD *)((v238 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
      v240 = (v238 - v239) + (_QWORD)start;
      if ((unint64_t)start > v240 || (uint64_t)start + v236 < v240)
      {
        __break(0xC471u);
        JUMPOUT(0x198726730);
      }
      *(_QWORD *)(*(_QWORD *)v235 + 16) = v240;
      v242 = v235[7];
      if (v242 < 4)
        v243 = 0;
      else
        v243 = *(_DWORD *)((v242 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
      v244 = (v242 - v243) + (_QWORD)start;
      if ((unint64_t)start > v244 || (uint64_t)start + v236 < v244)
      {
        __break(0xC471u);
        JUMPOUT(0x198726750);
      }
      v246 = *(_QWORD *)v235;
      v235 += 16;
      *(_QWORD *)(v246 + 24) = v244;
      v237 -= 64;
    }
    while (v237);
  }
  v247 = *(unsigned int *)(a1 + 444);
  if ((_DWORD)v247)
  {
    v248 = *(_DWORD **)(a1 + 432);
    v249 = *(_QWORD *)&v764.markerName[186];
    v250 = 56 * v247;
    do
    {
      v251 = v248[6];
      if (v251 < 4)
        v252 = 0;
      else
        v252 = *(_DWORD *)((v251 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
      v253 = (v251 - v252) + (_QWORD)start;
      if ((unint64_t)start > v253 || (uint64_t)start + v249 < v253)
      {
        __break(0xC471u);
        JUMPOUT(0x198726A84);
      }
      *(_QWORD *)(*(_QWORD *)v248 + 16) = v253;
      v255 = v248[7];
      if (v255 < 4)
        v256 = 0;
      else
        v256 = *(_DWORD *)((v255 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
      v257 = (v255 - v256) + (_QWORD)start;
      if ((unint64_t)start > v257 || (uint64_t)start + v249 < v257)
      {
        __break(0xC471u);
        JUMPOUT(0x198726AA4);
      }
      v259 = *(_QWORD *)v248;
      v248 += 14;
      *(_QWORD *)(v259 + 24) = v257;
      v250 -= 56;
    }
    while (v250);
  }
  v260 = *(unsigned int *)(a1 + 460);
  if ((_DWORD)v260)
  {
    v396 = *(_DWORD **)(a1 + 448);
    v397 = *(_QWORD *)&v764.markerName[186];
    v398 = 56 * v260;
    do
    {
      v399 = v396[6];
      if (v399 < 4)
        v400 = 0;
      else
        v400 = *(_DWORD *)((v399 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
      v401 = (v399 - v400) + (_QWORD)start;
      if ((unint64_t)start > v401 || (uint64_t)start + v397 < v401)
      {
        __break(0xC471u);
        JUMPOUT(0x19872742CLL);
      }
      *(_QWORD *)(*(_QWORD *)v396 + 16) = v401;
      v403 = v396[7];
      if (v403 < 4)
        v404 = 0;
      else
        v404 = *(_DWORD *)((v403 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
      v405 = (v403 - v404) + (_QWORD)start;
      if ((unint64_t)start > v405 || (uint64_t)start + v397 < v405)
      {
        __break(0xC471u);
        JUMPOUT(0x19872744CLL);
      }
      v407 = *(_QWORD *)v396;
      v396 += 14;
      *(_QWORD *)(v407 + 24) = v405;
      v398 -= 56;
    }
    while (v398);
  }
  v261 = *(unsigned int *)(a1 + 476);
  if ((_DWORD)v261)
  {
    v467 = *(_DWORD **)(a1 + 464);
    v468 = 56 * v261;
    do
    {
      *(_DWORD *)&v764.markerName[106] = v467[6];
      *(_QWORD *)(*(_QWORD *)v467 + 16) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)26432>(&v764.markerName[178], (int *)&v764.markerName[106]);
      *(_DWORD *)&v764.markerName[154] = v467[7];
      v469 = JSC::LinkBuffer::locationOf<(WTF::PtrTag)49594>(&v764.markerName[178], (int *)&v764.markerName[154]);
      v470 = *(_QWORD *)v467;
      v467 += 14;
      *(_QWORD *)(v470 + 24) = v469;
      v468 -= 56;
    }
    while (v468);
  }
  v262 = *(unsigned int *)(a1 + 492);
  if ((_DWORD)v262)
  {
    v263 = *(_DWORD **)(a1 + 480);
    v264 = *(_QWORD *)&v764.markerName[186];
    v265 = 56 * v262;
    do
    {
      v266 = v263[6];
      if (v266 < 4)
        v267 = 0;
      else
        v267 = *(_DWORD *)((v266 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
      v268 = (v266 - v267) + (_QWORD)start;
      if ((unint64_t)start > v268 || (uint64_t)start + v264 < v268)
      {
        __break(0xC471u);
        JUMPOUT(0x198726A44);
      }
      *(_QWORD *)(*(_QWORD *)v263 + 16) = v268;
      v270 = v263[7];
      if (v270 < 4)
        v271 = 0;
      else
        v271 = *(_DWORD *)((v270 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
      v272 = (v270 - v271) + (_QWORD)start;
      if ((unint64_t)start > v272 || (uint64_t)start + v264 < v272)
      {
        __break(0xC471u);
        JUMPOUT(0x198726A64);
      }
      v274 = *(_QWORD *)v263;
      v263 += 14;
      *(_QWORD *)(v274 + 24) = v272;
      v265 -= 56;
    }
    while (v265);
  }
  v275 = *(unsigned int *)(a1 + 508);
  if ((_DWORD)v275)
  {
    v293 = *(_DWORD **)(a1 + 496);
    v294 = *(_QWORD *)&v764.markerName[186];
    v295 = 56 * v275;
    do
    {
      v296 = v293[6];
      if (v296 < 4)
        v297 = 0;
      else
        v297 = *(_DWORD *)((v296 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
      v298 = (v296 - v297) + (_QWORD)start;
      if ((unint64_t)start > v298 || (uint64_t)start + v294 < v298)
      {
        __break(0xC471u);
        JUMPOUT(0x198726B40);
      }
      *(_QWORD *)(*(_QWORD *)v293 + 16) = v298;
      v300 = v293[7];
      if (v300 < 4)
        v301 = 0;
      else
        v301 = *(_DWORD *)((v300 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
      v302 = (v300 - v301) + (_QWORD)start;
      if ((unint64_t)start > v302 || (uint64_t)start + v294 < v302)
      {
        __break(0xC471u);
        JUMPOUT(0x198726B60);
      }
      v304 = *(_QWORD *)v293;
      v293 += 14;
      *(_QWORD *)(v304 + 24) = v302;
      v295 -= 56;
    }
    while (v295);
  }
  v276 = *(unsigned int *)(a1 + 556);
  if ((_DWORD)v276)
  {
    v420 = *(_DWORD **)(a1 + 544);
    v421 = *(_QWORD *)&v764.markerName[186];
    v422 = 56 * v276;
    do
    {
      v423 = v420[6];
      if (v423 < 4)
        v424 = 0;
      else
        v424 = *(_DWORD *)((v423 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
      v425 = (v423 - v424) + (_QWORD)start;
      if ((unint64_t)start > v425 || (uint64_t)start + v421 < v425)
      {
        __break(0xC471u);
        JUMPOUT(0x1987274ACLL);
      }
      *(_QWORD *)(*(_QWORD *)v420 + 16) = v425;
      v427 = v420[7];
      if (v427 < 4)
        v428 = 0;
      else
        v428 = *(_DWORD *)((v427 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
      v429 = (v427 - v428) + (_QWORD)start;
      if ((unint64_t)start > v429 || (uint64_t)start + v421 < v429)
      {
        __break(0xC471u);
        JUMPOUT(0x1987274CCLL);
      }
      v431 = *(_QWORD *)v420;
      v420 += 14;
      *(_QWORD *)(v431 + 24) = v429;
      v422 -= 56;
    }
    while (v422);
  }
  v277 = *(unsigned int *)(a1 + 572);
  if ((_DWORD)v277)
  {
    v408 = *(_DWORD **)(a1 + 560);
    v409 = *(_QWORD *)&v764.markerName[186];
    v410 = 56 * v277;
    do
    {
      v411 = v408[6];
      if (v411 < 4)
        v412 = 0;
      else
        v412 = *(_DWORD *)((v411 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
      v413 = (v411 - v412) + (_QWORD)start;
      if ((unint64_t)start > v413 || (uint64_t)start + v409 < v413)
      {
        __break(0xC471u);
        JUMPOUT(0x19872746CLL);
      }
      *(_QWORD *)(*(_QWORD *)v408 + 16) = v413;
      v415 = v408[7];
      if (v415 < 4)
        v416 = 0;
      else
        v416 = *(_DWORD *)((v415 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
      v417 = (v415 - v416) + (_QWORD)start;
      if ((unint64_t)start > v417 || (uint64_t)start + v409 < v417)
      {
        __break(0xC471u);
        JUMPOUT(0x19872748CLL);
      }
      v419 = *(_QWORD *)v408;
      v408 += 14;
      *(_QWORD *)(v419 + 24) = v417;
      v410 -= 56;
    }
    while (v410);
  }
  v278 = *(unsigned int *)(a1 + 524);
  if ((_DWORD)v278)
  {
    v372 = *(_DWORD **)(a1 + 512);
    v373 = *(_QWORD *)&v764.markerName[186];
    v374 = 56 * v278;
    do
    {
      v375 = v372[6];
      if (v375 < 4)
        v376 = 0;
      else
        v376 = *(_DWORD *)((v375 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
      v377 = (v375 - v376) + (_QWORD)start;
      if ((unint64_t)start > v377 || (uint64_t)start + v373 < v377)
      {
        __break(0xC471u);
        JUMPOUT(0x1987272C8);
      }
      *(_QWORD *)(*(_QWORD *)v372 + 16) = v377;
      v379 = v372[7];
      if (v379 < 4)
        v380 = 0;
      else
        v380 = *(_DWORD *)((v379 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
      v381 = (v379 - v380) + (_QWORD)start;
      if ((unint64_t)start > v381 || (uint64_t)start + v373 < v381)
      {
        __break(0xC471u);
        JUMPOUT(0x1987272E8);
      }
      v383 = *(_QWORD *)v372;
      v372 += 14;
      *(_QWORD *)(v383 + 24) = v381;
      v374 -= 56;
    }
    while (v374);
  }
  v279 = *(unsigned int *)(a1 + 540);
  if ((_DWORD)v279)
  {
    v384 = *(_DWORD **)(a1 + 528);
    v385 = *(_QWORD *)&v764.markerName[186];
    v386 = 56 * v279;
    do
    {
      v387 = v384[6];
      if (v387 < 4)
        v388 = 0;
      else
        v388 = *(_DWORD *)((v387 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
      v389 = (v387 - v388) + (_QWORD)start;
      if ((unint64_t)start > v389 || (uint64_t)start + v385 < v389)
      {
        __break(0xC471u);
        JUMPOUT(0x198727318);
      }
      *(_QWORD *)(*(_QWORD *)v384 + 16) = v389;
      v391 = v384[7];
      if (v391 < 4)
        v392 = 0;
      else
        v392 = *(_DWORD *)((v391 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
      v393 = (v391 - v392) + (_QWORD)start;
      if ((unint64_t)start > v393 || (uint64_t)start + v385 < v393)
      {
        __break(0xC471u);
        JUMPOUT(0x198727338);
      }
      v395 = *(_QWORD *)v384;
      v384 += 14;
      *(_QWORD *)(v395 + 24) = v393;
      v386 -= 56;
    }
    while (v386);
  }
  v280 = *(unsigned int *)(a1 + 588);
  if ((_DWORD)v280)
  {
    v307 = *(_DWORD **)(a1 + 576);
    v308 = *(_QWORD *)&v764.markerName[186];
    v309 = 56 * v280;
    do
    {
      v310 = v307[6];
      if (v310 < 4)
        v311 = 0;
      else
        v311 = *(_DWORD *)((v310 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
      v312 = (v310 - v311) + (_QWORD)start;
      if ((unint64_t)start > v312 || (uint64_t)start + v308 < v312)
      {
        __break(0xC471u);
        JUMPOUT(0x19872706CLL);
      }
      *(_QWORD *)(*(_QWORD *)v307 + 16) = v312;
      v314 = v307[7];
      if (v314 < 4)
        v315 = 0;
      else
        v315 = *(_DWORD *)((v314 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
      v316 = (v314 - v315) + (_QWORD)start;
      if ((unint64_t)start > v316 || (uint64_t)start + v308 < v316)
      {
        __break(0xC471u);
        JUMPOUT(0x19872708CLL);
      }
      v318 = *(_QWORD *)v307;
      v307 += 14;
      *(_QWORD *)(v318 + 24) = v316;
      v309 -= 56;
    }
    while (v309);
  }
  v281 = *(unsigned int *)(a1 + 604);
  if ((_DWORD)v281)
  {
    v432 = *(_DWORD **)(a1 + 592);
    v433 = 56 * v281;
    do
    {
      *(_DWORD *)&v764.markerName[106] = v432[6];
      *(_QWORD *)(*(_QWORD *)v432 + 16) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)26432>(&v764.markerName[178], (int *)&v764.markerName[106]);
      *(_DWORD *)&v764.markerName[154] = v432[7];
      v434 = JSC::LinkBuffer::locationOf<(WTF::PtrTag)49594>(&v764.markerName[178], (int *)&v764.markerName[154]);
      v435 = *(_QWORD *)v432;
      v432 += 14;
      *(_QWORD *)(v435 + 24) = v434;
      v433 -= 56;
    }
    while (v433);
  }
  v282 = *(unsigned int *)(a1 + 620);
  if ((_DWORD)v282)
  {
    v283 = 16 * v282;
    v284 = (_QWORD *)(*(_QWORD *)(a1 + 608) + 8);
    do
    {
      v285 = *((_DWORD *)v284 - 2);
      if (v285 < 4)
        v286 = 0;
      else
        v286 = *(_DWORD *)((v285 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
      v287 = (v285 - v286) + (_QWORD)start;
      if ((unint64_t)start > v287 || (_QWORD)start + *(_QWORD *)&v764.markerName[186] < v287)
      {
        __break(0xC471u);
        JUMPOUT(0x1987267F0);
      }
      v289 = *v284;
      v284 += 2;
      *(_QWORD *)(v289 + 8) = v287;
      v283 -= 16;
    }
    while (v283);
  }
  memset(&v764.markerName[106], 0, 32);
  v290 = *(unsigned int *)(a1 + 396);
  if ((_DWORD)v290)
  {
    v291 = 0;
    for (jj = 0; jj < v290; ++jj)
    {
      v528 = *(_DWORD *)(*(_QWORD *)(a1 + 384) + 4 * jj);
      if (v528 != -1)
      {
        if (v528 < 4)
          v529 = 0;
        else
          v529 = *(_DWORD *)((v528 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
        v530 = (v528 - v529) + (_QWORD)start;
        if ((unint64_t)start > v530 || (_QWORD)start + *(_QWORD *)&v764.markerName[186] < v530)
        {
          __break(0xC471u);
          JUMPOUT(0x198727D30);
        }
        *(_DWORD *)&v764.markerName[90] = v291;
        *(_QWORD *)&v764.markerName[154] = (v528 - v529) + (_QWORD)start;
        if (*(_DWORD *)&v764.markerName[118] == *(_DWORD *)&v764.markerName[114])
        {
          v532 = (_DWORD *)WTF::Vector<JSC::BytecodeIndex,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v764.markerName[106], *(unsigned int *)&v764.markerName[118] + 1, (unint64_t)&v764.markerName[90]);
          *(_DWORD *)(*(_QWORD *)&v764.markerName[106] + 4 * *(unsigned int *)&v764.markerName[118]) = *v532;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)&v764.markerName[106] + 4 * *(unsigned int *)&v764.markerName[118]) = v291;
        }
        ++*(_DWORD *)&v764.markerName[118];
        if (*(_DWORD *)&v764.markerName[134] == *(_DWORD *)&v764.markerName[130])
        {
          v527 = (_QWORD *)WTF::Vector<JSC::DFG::RegisteredStructure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v764.markerName[122], *(unsigned int *)&v764.markerName[134] + 1, (unint64_t)&v764.markerName[154]);
          *(_QWORD *)(*(_QWORD *)&v764.markerName[122] + 8 * *(unsigned int *)&v764.markerName[134]) = *v527;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)&v764.markerName[122] + 8 * *(unsigned int *)&v764.markerName[134]) = v530;
        }
        ++*(_DWORD *)&v764.markerName[134];
        v290 = *(unsigned int *)(a1 + 396);
      }
      v291 += 4;
    }
  }
  if (HIBYTE(word_1ECF4C286) | dword_1ECF4C28A)
  {
    JSC::JITDisassembler::dump(*(JSC::JITDisassembler **)(a1 + 736), (JSC::LinkBuffer *)&v764.markerName[178]);
    BYTE1(v767) = 1;
  }
  v533 = *(_DWORD **)(a1 + 744);
  if (v533)
  {
    if (byte_1ECF4C486)
    {
      JSC::JITDisassembler::reportToProfiler(*(_QWORD *)(a1 + 736), (uint64_t)v533, (JSC::LinkBuffer *)&v764.markerName[178]);
      v533 = *(_DWORD **)(a1 + 744);
    }
    v700 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 93016);
    v701 = *(void **)(a1 + 800);
    ++*v533;
    *(_QWORD *)&v764.markerName[154] = v533;
    JSC::Profiler::Database::addCompilation(v700, v701, (JSC::Profiler::Compilation **)&v764.markerName[154], v221, v222, v223, v224, v225);
    WTF::Ref<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>::~Ref((JSC::Profiler::Compilation **)&v764.markerName[154], v702, v703, v704, v705, v706, v707, v708);
  }
  if (*(_BYTE *)(a1 + 768))
  {
    v534 = WTF::fastMalloc((WTF *)0x30);
    JSC::PCToCodeOriginMap::PCToCodeOriginMap(v534, v758, (uint64_t)&v764.markerName[178], v735, v736, v737, v738, v739);
    *(_QWORD *)&v764.markerName[154] = 0;
    std::unique_ptr<JSC::PCToCodeOriginMap>::~unique_ptr[abi:sn180100]((unint64_t *)&v764.markerName[154], v740, v741, v742, v743, v744, v745, v746);
  }
  else
  {
    v534 = 0;
  }
  if (byte_1ECF4C288 | HIBYTE(word_1ECF4C286))
  {
    v709 = 1;
LABEL_703:
    *(_QWORD *)&v764.markerName[74] = *(_QWORD *)(a1 + 800);
    v764.markerName[82] = 3;
    WTF::toCString<JSC::CodeBlockWithJITType>((uint64_t *)&v764.markerName[74], (uint64_t *)&v764.markerName[154]);
    if (*(_QWORD *)&v764.markerName[154])
      v691 = *(_QWORD *)&v764.markerName[154] + 16;
    else
      v691 = 0;
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)357,char const*>((uint64_t)&v764.markerName[178], v709, 0, 0, "Baseline JIT code for %s", v691, &v764.markerName[90]);
    v699 = *(_DWORD **)&v764.markerName[154];
    *(_QWORD *)&v764.markerName[154] = 0;
    if (v699)
    {
      if (*v699 != 1)
      {
        --*v699;
        goto LABEL_590;
      }
      goto LABEL_713;
    }
    goto LABEL_590;
  }
  if ((_BYTE)dword_1ECF4C28A)
    v535 = 0;
  else
    v535 = byte_1ECF4C289 == 0;
  if (!v535)
  {
    v709 = dword_1ECF4C28A != 0;
    goto LABEL_703;
  }
  if (DWORD1(v770))
  {
    v673 = (uint64_t *)*((_QWORD *)&start + 1);
    v674 = 8 * DWORD1(v770);
    do
    {
      v675 = *v673++;
      (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v675 + 16))(v675, &v764.markerName[178]);
      v674 -= 8;
    }
    while (v674);
  }
  p_start = &start;
  if (HIDWORD(v771))
  {
    v676 = (uint64_t *)*((_QWORD *)&v770 + 1);
    v677 = 8 * HIDWORD(v771);
    do
    {
      v678 = *v676++;
      (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v678 + 16))(v678, &v764.markerName[178]);
      v677 -= 8;
    }
    while (v677);
  }
  v537 = v768;
  v538 = *(_QWORD *)&v764.markerName[186];
  *((_QWORD *)JSC::LinkBuffer::s_profileCummulativeLinkedSizes + v768) += *(_QWORD *)&v764.markerName[186];
  ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v537);
  sys_icache_invalidate((void *)start, v538);
  v546 = *(unsigned int **)&v764.markerName[178];
  if (*(_QWORD *)&v764.markerName[178])
  {
    do
      v734 = __ldaxr(v546);
    while (__stlxr(v734 + 1, v546));
    p_start = (__int128 *)(v546 + 2);
  }
  v547 = *(_QWORD *)p_start;
  *(_QWORD *)&v764.markerName[154] = v547;
  *(_QWORD *)&v764.markerName[162] = v546;
  if (byte_1ECF4C2A2)
    JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v764.markerName[178], (uint64_t)&v764.markerName[154], 0, 0);
  *(_QWORD *)&v764.markerName[90] = v547;
  *(_QWORD *)&v764.markerName[98] = 0;
  if (v546)
  {
    do
      v548 = __ldaxr(v546);
    while (__stlxr(v548 + 1, v546));
    v549 = *(unsigned int **)&v764.markerName[98];
    *(_QWORD *)&v764.markerName[98] = v546;
    if (v549)
    {
      do
      {
        v550 = __ldaxr(v549);
        v551 = v550 - 1;
      }
      while (__stlxr(v551, v549));
      if (!v551)
      {
        atomic_store(1u, v549);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v549, v539, v540, v541, v542, v543, v544, v545);
        WTF::fastFree(v726, v727, v728, v729, v730, v731, v732, v733);
      }
    }
    v552 = *(unsigned int **)&v764.markerName[162];
    *(_QWORD *)&v764.markerName[162] = 0;
    if (v552)
    {
      do
      {
        v553 = __ldaxr(v552);
        v554 = v553 - 1;
      }
      while (__stlxr(v554, v552));
      if (!v554)
      {
        atomic_store(1u, v552);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v552, v539, v540, v541, v542, v543, v544, v545);
LABEL_713:
        WTF::fastFree((unint64_t)v699, v692, v693, v694, v695, v696, v697, v698);
      }
    }
  }
LABEL_590:
  v555 = *(_DWORD *)(a1 + 732);
  if (v555 < 4)
    v556 = 0;
  else
    v556 = *(_DWORD *)((v555 & 0xFFFFFFFC) + *(_QWORD *)&v764.markerName[202] - 4);
  v557 = (v555 - v556) + (_QWORD)start;
  if ((unint64_t)start > v557 || (_QWORD)start + *(_QWORD *)&v764.markerName[186] < v557)
  {
    __break(0xC471u);
    JUMPOUT(0x198727E28);
  }
  v559 = WTF::fastMalloc((WTF *)0x90);
  v565 = v559;
  v566 = *(unsigned int **)&v764.markerName[98];
  *(_QWORD *)&v764.markerName[74] = *(_QWORD *)&v764.markerName[90];
  if (*(_QWORD *)&v764.markerName[98])
  {
    do
      v567 = __ldaxr(v566);
    while (__stlxr(v567 + 1, v566));
  }
  *(_QWORD *)&v764.markerName[82] = v566;
  JSC::BaselineJITCode::BaselineJITCode(v559, (uint64_t *)&v764.markerName[74], v557, v560, v561, v562, v563, v564);
  v575 = *(unsigned int **)&v764.markerName[82];
  *(_QWORD *)&v764.markerName[82] = 0;
  if (v575)
  {
    do
    {
      v576 = __ldaxr(v575);
      v577 = v576 - 1;
    }
    while (__stlxr(v577, v575));
    if (!v577)
    {
      atomic_store(1u, v575);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v575, (uint64_t)v568, v569, v570, v571, v572, v573, v574);
      WTF::fastFree(v710, v711, v712, v713, v714, v715, v716, v717);
    }
  }
  v578 = *(_QWORD *)(a1 + 864);
  if (v578)
  {
    v579 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * *(_QWORD *)(a1 + 864)) | 8));
    *v579 = v578;
    if ((_DWORD)v578)
    {
      v747 = 2;
      do
      {
        v748 = &v579[v747];
        *v748 = 0xFFFFFFFFLL;
        v748[1] = 0;
        v749 = (uint64_t)&v579[v747 + 4];
        v747 += 4;
      }
      while ((_DWORD *)v749 != &v579[4 * v578 + 2]);
    }
  }
  else
  {
    v579 = 0;
  }
  v580 = *(_QWORD *)(v565 + 72);
  *(_QWORD *)(v565 + 72) = v579;
  if (v580)
  {
    WTF::fastFree(v580, v568, v569, v570, v571, v572, v573, v574);
    v579 = *(_DWORD **)(v565 + 72);
  }
  if (v579)
  {
    v581 = *v579;
    if (*v579)
    {
      v582 = *(_QWORD *)(a1 + 864);
      v583 = v579 + 2;
      if (v582)
      {
        for (kk = 0; kk != v582; ++kk)
        {
          if (kk >> 3 >= *(unsigned int *)(a1 + 884))
          {
            __break(0xC471u);
            JUMPOUT(0x198727FF0);
          }
          *v583++ = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 872) + 8 * (kk >> 3)) + 16 * (kk & 7));
        }
        v583 = *(_OWORD **)(v565 + 72);
        if (!v583)
        {
          v586 = 0;
LABEL_616:
          v587 = v583 + 2;
          do
          {
            if ((unint64_t)(v586 - (char *)v583) < 0x11)
              break;
            v588 = 0;
            v589 = (v586 - (char *)v583) >> 4;
LABEL_619:
            v590 = v589;
            do
            {
              --v589;
              v591 = &v583[v590];
              if (LODWORD(v583[v590 - 1]) < LODWORD(v583[v590 - 2]))
              {
                *(_OWORD *)&v764.markerName[154] = *(v591 - 1);
                *(v591 - 1) = *(v591 - 2);
                *(v591 - 2) = *(_OWORD *)&v764.markerName[154];
                v588 = 1;
                if (v589 > 1)
                  goto LABEL_619;
                goto LABEL_626;
              }
              --v590;
            }
            while (v589 > 1);
            if ((v588 & 1) == 0)
              goto LABEL_634;
LABEL_626:
            if ((unint64_t)(v586 - (char *)++v583) < 0x11)
              break;
            v592 = 0;
            v593 = (v586 - (char *)v583) >> 4;
            if (v593 <= 2)
              v593 = 2;
            v594 = v593 - 1;
            v595 = v587;
            do
            {
              v596 = v595 - 1;
              if (*(_DWORD *)v595 < *((_DWORD *)v595 - 4))
              {
                *(_OWORD *)&v764.markerName[154] = *v595;
                *v595 = *v596;
                *v596 = *(_OWORD *)&v764.markerName[154];
                v592 = 1;
              }
              ++v595;
              --v594;
            }
            while (v594);
            v586 -= 16;
            ++v587;
          }
          while ((v592 & 1) != 0);
          goto LABEL_634;
        }
        v585 = *(_DWORD *)v583;
        v583 = (_OWORD *)((char *)v583 + 8);
        v581 = v585;
      }
      v586 = (char *)&v583[v581];
      goto LABEL_616;
    }
  }
LABEL_634:
  v597 = *(_QWORD *)(a1 + 888);
  if (v597)
  {
    v598 = (_DWORD *)WTF::fastMalloc((WTF *)(40 * v597 + 8));
    *v598 = v597;
    if ((_DWORD)v597)
    {
      v750 = 2;
      do
      {
        v751 = &v598[v750];
        *((_QWORD *)v751 + 4) = 0;
        *(_OWORD *)v751 = 0uLL;
        *((_OWORD *)v751 + 1) = 0uLL;
        v751[8] = -1;
        v750 += 10;
      }
      while (v751 + 10 != &v598[10 * v597 + 2]);
    }
  }
  else
  {
    v598 = 0;
  }
  v599 = *(_QWORD *)(v565 + 80);
  *(_QWORD *)(v565 + 80) = v598;
  if (v599)
  {
    WTF::fastFree(v599, v568, v569, v570, v571, v572, v573, v574);
    v598 = *(_DWORD **)(v565 + 80);
  }
  if (v598)
  {
    if (*v598)
    {
      v600 = *(_QWORD *)(a1 + 888);
      if (v600)
      {
        v601 = 0;
        v602 = v598 + 2;
        do
        {
          if (v601 >> 3 >= *(unsigned int *)(a1 + 908))
          {
            __break(0xC471u);
            JUMPOUT(0x198727FE8);
          }
          v603 = *(_QWORD *)(*(_QWORD *)(a1 + 896) + 8 * (v601 >> 3)) + 40 * (v601 & 7);
          v604 = *(_OWORD *)v603;
          v605 = *(_OWORD *)(v603 + 16);
          v602[8] = *(_DWORD *)(v603 + 32);
          *(_OWORD *)v602 = v604;
          *((_OWORD *)v602 + 1) = v605;
          ++v601;
          v602 += 10;
        }
        while (v600 != v601);
      }
    }
  }
  v606 = *(_QWORD *)(a1 + 912);
  *(_QWORD *)(a1 + 912) = 0;
  v607 = *(unsigned int **)(v565 + 88);
  *(_QWORD *)(v565 + 88) = v606;
  if (v607)
  {
    v609 = (unint64_t *)(v607 + 2);
    v608 = *v607;
    if ((_DWORD)v608)
    {
      v689 = 16 * v608;
      do
      {
        v690 = *v609;
        *v609 = 0;
        if (v690)
          WTF::fastFree(v690, v568, v569, v570, v571, v572, v573, v574);
        v609 += 2;
        v689 -= 16;
      }
      while (v689);
    }
    WTF::fastFree((unint64_t)v607, v568, v569, v570, v571, v572, v573, v574);
  }
  v610 = *(_QWORD *)(a1 + 920);
  *(_QWORD *)(a1 + 920) = 0;
  v611 = *(unsigned int **)(v565 + 96);
  *(_QWORD *)(v565 + 96) = v610;
  if (v611)
  {
    v613 = (unint64_t *)(v611 + 2);
    v612 = *v611;
    if ((_DWORD)v612)
    {
      v687 = 8 * v612;
      do
      {
        v688 = *v613;
        *v613 = 0;
        if (v688)
          WTF::fastFree(v688, v568, v569, v570, v571, v572, v573, v574);
        ++v613;
        v687 -= 8;
      }
      while (v687);
    }
    WTF::fastFree((unint64_t)v611, v568, v569, v570, v571, v572, v573, v574);
  }
  v614 = *(unsigned int *)&v764.markerName[118];
  v615 = (char *)WTF::fastMalloc((WTF *)(12 * *(unsigned int *)&v764.markerName[118]));
  WTF::fastFree(0, v616, v617, v618, v619, v620, v621, v622);
  WTF::fastFree(0, v623, v624, v625, v626, v627, v628, v629);
  if (*(_DWORD *)&v764.markerName[134])
    memmove(v615, *(const void **)&v764.markerName[122], 8 * *(unsigned int *)&v764.markerName[134]);
  if (*(_DWORD *)&v764.markerName[118])
    memmove(&v615[8 * v614], *(const void **)&v764.markerName[106], 4 * *(unsigned int *)&v764.markerName[118]);
  v637 = *(_QWORD *)(v565 + 104);
  *(_QWORD *)(v565 + 104) = v615;
  WTF::fastFree(v637, v630, v631, v632, v633, v634, v635, v636);
  *(_DWORD *)(v565 + 112) = v614;
  WTF::fastFree(0, v638, v639, v640, v641, v642, v643, v644);
  JSC::MathICHolder::adoptMathICs((JSC::MathICHolder *)(v565 + 40), (JSC::MathICHolder *)(a1 + 816), v645, v646, v647, v648, v649, v650);
  v651 = *(_QWORD *)(a1 + 848);
  *(_QWORD *)(a1 + 848) = 0;
  v652 = *(unsigned int *)(a1 + 860);
  *(_QWORD *)(a1 + 856) = 0;
  if ((_DWORD)v652)
  {
    v653 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v652 + 8));
    v654 = v653;
    v655 = 0;
    *v653 = v652;
    do
    {
      *(_QWORD *)&v653[v655 + 2] = *(_QWORD *)(v651 + v655 * 4);
      v655 += 2;
    }
    while (2 * v652 != v655);
  }
  else
  {
    v654 = 0;
  }
  if (v651)
    WTF::fastFree(v651, v219, v220, v221, v222, v223, v224, v225);
  v656 = *(_QWORD *)(v565 + 120);
  *(_QWORD *)(v565 + 120) = v654;
  if (v656)
    WTF::fastFree(v656, v219, v220, v221, v222, v223, v224, v225);
  *(_BYTE *)(v565 + 136) = *(_BYTE *)(a1 + 929);
  v657 = *(_QWORD *)(v565 + 128);
  *(_QWORD *)(v565 + 128) = v534;
  v521 = v755;
  if (v657)
  {
    v658 = *(_QWORD *)(v657 + 16);
    if (v658)
      WTF::fastFree(v658, v219, v220, v221, v222, v223, v224, v225);
    v659 = *(_QWORD *)(v657 + 24);
    if (v659)
      WTF::fastFree(v659, v219, v220, v221, v222, v223, v224, v225);
    WTF::fastFree(v657, v219, v220, v221, v222, v223, v224, v225);
  }
  *v754 = v565;
  v660 = *(unsigned int **)&v764.markerName[98];
  *(_QWORD *)&v764.markerName[98] = 0;
  if (v660)
  {
    do
    {
      v661 = __ldaxr(v660);
      v662 = v661 - 1;
    }
    while (__stlxr(v662, v660));
    if (!v662)
    {
      atomic_store(1u, v660);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v660, (uint64_t)v219, v220, v221, v222, v223, v224, v225);
      WTF::fastFree(v718, v719, v720, v721, v722, v723, v724, v725);
    }
  }
  v663 = *(_QWORD *)&v764.markerName[122];
  if (*(_QWORD *)&v764.markerName[122])
  {
    *(_QWORD *)&v764.markerName[122] = 0;
    *(_DWORD *)&v764.markerName[130] = 0;
    WTF::fastFree(v663, v219, v220, v221, v222, v223, v224, v225);
  }
  v664 = *(_QWORD *)&v764.markerName[106];
  if (*(_QWORD *)&v764.markerName[106])
  {
    *(_QWORD *)&v764.markerName[106] = 0;
    *(_DWORD *)&v764.markerName[114] = 0;
    WTF::fastFree(v664, v219, v220, v221, v222, v223, v224, v225);
  }
LABEL_675:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v764.markerName[178], v219, v220, v221, v222, v223, v224, v225);
  v672 = *(_QWORD *)&v764.markerName[34];
  if (&v764.markerName[50] != (unsigned __int8 *)*(Marker **)&v764.markerName[34] && *(_QWORD *)&v764.markerName[34])
  {
    *(_QWORD *)&v764.markerName[34] = 0;
    *(_DWORD *)&v764.markerName[42] = 0;
    WTF::fastFree(v672, v665, v666, v667, v668, v669, v670, v671);
  }
  if (v759 && v521)
  {
    if (*(_DWORD *)v521 == 2)
    {
      WTF::StringImpl::~StringImpl(v521, (WTF::AtomStringImpl *)v665, v666, v667, v668, v669, v670, v671);
      WTF::fastFree(v679, v680, v681, v682, v683, v684, v685, v686);
    }
    else
    {
      *(_DWORD *)v521 -= 2;
    }
  }
}

unint64_t *std::unique_ptr<JSC::JITDisassembler>::operator=[abi:sn180100](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 32);
    if (v11)
    {
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 0;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
    v12 = *(_QWORD *)(v10 + 16);
    if (v12)
    {
      *(_QWORD *)(v10 + 16) = 0;
      *(_DWORD *)(v10 + 24) = 0;
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

JSC::Profiler::Compilation **WTF::RefPtr<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>::operator=(JSC::Profiler::Compilation **a1, JSC::Profiler::Compilation **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Profiler::Compilation *v9;
  JSC::Profiler::Compilation *v10;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      JSC::Profiler::Compilation::~Compilation(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  return a1;
}

uint64_t JSC::JIT::finalizeOnMainThread(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned int **v31;
  uint64_t v32;
  unsigned int **v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int **v38;
  uint64_t (*v39)(JSC::JSString *);

  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11)
    v11 = WTF::Thread::initializeCurrentTLS(0);
  if ((*(_BYTE *)(v11 + 5) & 8) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19872825CLL);
  }
  if (!*a3)
    return 0;
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(unsigned int *)(a2 + 68);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  if ((_DWORD)v13)
  {
    v29 = 8 * v13;
    v30 = (uint64_t *)v12;
    v31 = (unsigned int **)(v12 + 8 * v13);
    do
    {
      v32 = *v30++;
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      v29 -= 8;
    }
    while (v29);
    v33 = (unsigned int **)v12;
    do
    {
      v34 = *v33;
      *v33 = 0;
      if (v34)
      {
        v35 = v34 + 2;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          atomic_store(1u, v34 + 2);
          v38 = v33;
          (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
          v33 = v38;
        }
      }
      ++v33;
    }
    while (v33 != v31);
  }
  if (v12)
    WTF::fastFree(v12, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v14 = *(double **)(*(_QWORD *)(a1 + 72) + 64752);
  v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 128))(*a3);
  LODWORD(v16) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 80) + 12);
  v17 = (double)v15 / (double)v16;
  v18 = v14[1];
  *v14 = *v14 + 1.0;
  v14[1] = v17 + v18;
  v14[2] = v14[2] + v17 * v17;
  v39 = (uint64_t (*)(JSC::JSString *))*a3;
  *a3 = 0;
  JSC::CodeBlock::setupWithUnlinkedBaselineCode(a1, &v39, v19, v20, v21, v22, v23, v24);
  v25 = (unsigned int *)v39;
  v39 = 0;
  if (v25)
  {
    v27 = v25 + 2;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (v28 == 1)
    {
      atomic_store(1u, v25 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 32))(v25);
    }
  }
  return 2;
}

uint64_t JSC::JIT::compileSync(uint64_t a1, JSC::CodeBlock *a2, void *a3)
{
  unsigned int *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;

  v5 = (unsigned int *)WTF::fastMalloc((WTF *)0x50);
  v6 = (_QWORD *)JSC::BaselineJITPlan::BaselineJITPlan((uint64_t)v5, a2);
  JSC::BaselineJITPlan::compileInThreadImpl(v6, a3, v7, v8, v9, v10, v11, v12);
  v20 = JSC::BaselineJITPlan::finalize((JSC::BaselineJITPlan *)v5, v13, v14, v15, v16, v17, v18, v19);
  v21 = v5 + 2;
  do
  {
    v22 = __ldaxr(v21);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v21));
  if (!v23)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return v20;
}

void JSC::JIT::compileTimeStats(uint64_t *a1@<X8>)
{
  uint64_t v3;
  char *v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  char v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  double v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int i;
  unsigned int v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  WTF *v32;
  _DWORD *v33;
  char v36;
  WTF *v37;
  _DWORD *v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF *v97;
  WTF *v98[3];
  WTF *v99;

  *a1 = 0;
  if (!unk_1ECF4C33C)
    return;
  v3 = WTF::fastMalloc((WTF *)0x23);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = 18;
  v99 = (WTF *)v3;
  v4 = (char *)(v3 + 16);
  strcpy((char *)(v3 + 16), "Total Compile Time");
  v5 = *(double *)&JSC::totalDFGCompileTime;
  v6 = *(double *)&JSC::totalBaselineCompileTime;
  v7 = *(double *)&JSC::totalFTLCompileTime;
  WTF::HashTable<WTF::CString,WTF::KeyValuePair<WTF::CString,WTF::Seconds>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CString,WTF::Seconds>>,WTF::DefaultHash<WTF::CString>,WTF::HashMap<WTF::CString,WTF::Seconds,WTF::DefaultHash<WTF::CString>,WTF::HashTraits<WTF::CString>,WTF::HashTraits<WTF::Seconds>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CString>>::rehash(a1, 8u, 0);
  v8 = *a1;
  if (*a1)
    v9 = *(_DWORD *)(v8 - 8);
  else
    v9 = 0;
  v10 = -1640531527;
  v11 = *v4;
  if (*v4)
  {
    v12 = (unsigned __int8 *)(v3 + 18);
    while (*(v12 - 1))
    {
      v13 = ((unsigned __int16)(char)*(v12 - 1) << 11) ^ ((v10 + (unsigned __int16)v11) << 16) ^ (v10
                                                                                                + (unsigned __int16)v11);
      v10 = v13 + (v13 >> 11);
      v14 = *v12;
      v12 += 2;
      v11 = v14;
      if (!v14)
        goto LABEL_11;
    }
    v15 = (v10 + (unsigned __int16)v11) ^ ((v10 + (unsigned __int16)v11) << 11);
    v10 = v15 + (v15 >> 17);
  }
LABEL_11:
  v16 = 0;
  v17 = v7 + v5 + v6;
  v18 = (v10 ^ (8 * v10)) + ((v10 ^ (8 * v10)) >> 5);
  v19 = (v18 ^ (4 * v18)) + ((v18 ^ (4 * v18)) >> 15);
  v20 = v19 ^ (v19 << 10);
  if (!v20)
    v20 = 0x800000;
  for (i = 1; ; ++i)
  {
    v22 = v20 & v9;
    v23 = v8 + 16 * (v20 & v9);
    v98[0] = 0;
    v31 = WTF::operator==(v23, (int8x16_t **)v98);
    v32 = v98[0];
    v98[0] = 0;
    if (!v32)
      goto LABEL_17;
    if (*(_DWORD *)v32 == 1)
      break;
    --*(_DWORD *)v32;
LABEL_17:
    if ((v31 & 1) != 0)
      goto LABEL_35;
LABEL_18:
    v33 = *(_DWORD **)v23;
    if (*(_QWORD *)v23 == -1 || (WTF *)((char *)v99 + 1) == 0)
    {
      if (v33 == (_DWORD *)-1 && (WTF *)((char *)v99 + 1) == 0)
      {
        v99 = 0;
        v41 = -1;
        goto LABEL_50;
      }
    }
    else
    {
      v36 = WTF::operator==(v8 + 16 * v22, (int8x16_t **)&v99);
      if ((v36 & 1) != 0)
        goto LABEL_49;
      v33 = *(_DWORD **)v23;
    }
    if (v33 == (_DWORD *)-1)
      v16 = (_QWORD *)(v8 + 16 * v22);
    v20 = i + v22;
  }
  WTF::fastFree((unint64_t)v32, v24, v25, v26, v27, v28, v29, v30);
  if ((v31 & 1) == 0)
    goto LABEL_18;
LABEL_35:
  if (v16)
  {
    *v16 = 0;
    v16[1] = 0;
    --*(_DWORD *)(v8 - 16);
    v23 = (uint64_t)v16;
  }
  v37 = v99;
  v99 = 0;
  v38 = *(_DWORD **)v23;
  *(_QWORD *)v23 = v37;
  if (v38)
  {
    if (*v38 == 1)
      WTF::fastFree((unint64_t)v38, v24, v25, v26, v27, v28, v29, v30);
    else
      --*v38;
  }
  *(double *)(v23 + 8) = v17;
  v39 = *a1;
  if (*a1)
    v40 = *(_DWORD *)(v39 - 12) + 1;
  else
    v40 = 1;
  *(_DWORD *)(v39 - 12) = v40;
  v42 = (*(_DWORD *)(v39 - 16) + v40);
  v43 = *(unsigned int *)(v39 - 4);
  if (v43 > 0x400)
  {
    if (v43 <= 2 * v42)
    {
LABEL_46:
      v44 = (_DWORD)v43 << (6 * v40 >= (2 * v43));
      goto LABEL_48;
    }
  }
  else if (3 * v43 <= 4 * v42)
  {
    if ((_DWORD)v43)
      goto LABEL_46;
    v44 = 8;
LABEL_48:
    WTF::HashTable<WTF::CString,WTF::KeyValuePair<WTF::CString,WTF::Seconds>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CString,WTF::Seconds>>,WTF::DefaultHash<WTF::CString>,WTF::HashMap<WTF::CString,WTF::Seconds,WTF::DefaultHash<WTF::CString>,WTF::HashTraits<WTF::CString>,WTF::HashTraits<WTF::Seconds>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CString>>::rehash(a1, v44, (_QWORD *)v23);
  }
LABEL_49:
  v41 = (unint64_t)v99;
  v99 = 0;
  if (!v41)
    goto LABEL_52;
LABEL_50:
  if (*(_DWORD *)v41 == 1)
    WTF::fastFree(v41, v24, v25, v26, v27, v28, v29, v30);
  else
    --*(_DWORD *)v41;
LABEL_52:
  v99 = 0;
  v45 = WTF::fastMalloc((WTF *)0x26);
  *(_DWORD *)v45 = 1;
  *(_QWORD *)(v45 + 8) = 21;
  v53 = v99;
  v99 = (WTF *)v45;
  if (v53)
  {
    if (*(_DWORD *)v53 == 1)
    {
      WTF::fastFree((unint64_t)v53, v46, v47, v48, v49, v50, v51, v52);
      v45 = (uint64_t)v99;
    }
    else
    {
      --*(_DWORD *)v53;
    }
  }
  strcpy((char *)(v45 + 16), "Baseline Compile Time");
  WTF::HashMap<WTF::CString,WTF::Seconds,WTF::DefaultHash<WTF::CString>,WTF::HashTraits<WTF::CString>,WTF::HashTraits<WTF::Seconds>,WTF::HashTableTraits>::add<WTF::Seconds&>((uint64_t)v98, a1, (int8x16_t **)&v99, &JSC::totalBaselineCompileTime);
  v61 = v99;
  v99 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 1)
      WTF::fastFree((unint64_t)v61, v54, v55, v56, v57, v58, v59, v60);
    else
      --*(_DWORD *)v61;
  }
  v62 = WTF::fastMalloc((WTF *)0x21);
  *(_DWORD *)v62 = 1;
  *(_QWORD *)(v62 + 8) = 16;
  v99 = (WTF *)v62;
  strcpy((char *)(v62 + 16), "DFG Compile Time");
  WTF::HashMap<WTF::CString,WTF::Seconds,WTF::DefaultHash<WTF::CString>,WTF::HashTraits<WTF::CString>,WTF::HashTraits<WTF::Seconds>,WTF::HashTableTraits>::add<WTF::Seconds&>((uint64_t)v98, a1, (int8x16_t **)&v99, &JSC::totalDFGCompileTime);
  v70 = v99;
  v99 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 1)
      WTF::fastFree((unint64_t)v70, v63, v64, v65, v66, v67, v68, v69);
    else
      --*(_DWORD *)v70;
  }
  v71 = WTF::fastMalloc((WTF *)0x21);
  *(_DWORD *)v71 = 1;
  *(_QWORD *)(v71 + 8) = 16;
  v99 = (WTF *)v71;
  strcpy((char *)(v71 + 16), "FTL Compile Time");
  WTF::HashMap<WTF::CString,WTF::Seconds,WTF::DefaultHash<WTF::CString>,WTF::HashTraits<WTF::CString>,WTF::HashTraits<WTF::Seconds>,WTF::HashTableTraits>::add<WTF::Seconds&>((uint64_t)v98, a1, (int8x16_t **)&v99, &JSC::totalFTLCompileTime);
  v79 = v99;
  v99 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 1)
      WTF::fastFree((unint64_t)v79, v72, v73, v74, v75, v76, v77, v78);
    else
      --*(_DWORD *)v79;
  }
  v80 = WTF::fastMalloc((WTF *)0x27);
  *(_DWORD *)v80 = 1;
  *(_QWORD *)(v80 + 8) = 22;
  v99 = (WTF *)v80;
  strcpy((char *)(v80 + 16), "FTL (DFG) Compile Time");
  WTF::HashMap<WTF::CString,WTF::Seconds,WTF::DefaultHash<WTF::CString>,WTF::HashTraits<WTF::CString>,WTF::HashTraits<WTF::Seconds>,WTF::HashTableTraits>::add<WTF::Seconds&>((uint64_t)v98, a1, (int8x16_t **)&v99, &JSC::totalFTLDFGCompileTime);
  v88 = v99;
  v99 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 1)
      WTF::fastFree((unint64_t)v88, v81, v82, v83, v84, v85, v86, v87);
    else
      --*(_DWORD *)v88;
  }
  v89 = WTF::fastMalloc((WTF *)0x26);
  *(_DWORD *)v89 = 1;
  *(_QWORD *)(v89 + 8) = 21;
  v99 = (WTF *)v89;
  strcpy((char *)(v89 + 16), "FTL (B3) Compile Time");
  WTF::HashMap<WTF::CString,WTF::Seconds,WTF::DefaultHash<WTF::CString>,WTF::HashTraits<WTF::CString>,WTF::HashTraits<WTF::Seconds>,WTF::HashTableTraits>::add<WTF::Seconds&>((uint64_t)v98, a1, (int8x16_t **)&v99, &JSC::totalFTLB3CompileTime);
  v97 = v99;
  v99 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 1)
      WTF::fastFree((unint64_t)v97, v90, v91, v92, v93, v94, v95, v96);
    else
      --*(_DWORD *)v97;
  }
}

double JSC::JIT::totalCompileTime(JSC::JIT *this)
{
  return *(double *)&JSC::totalFTLCompileTime
       + *(double *)&JSC::totalDFGCompileTime
       + *(double *)&JSC::totalBaselineCompileTime;
}

void WTF::HashMap<WTF::CString,WTF::Seconds,WTF::DefaultHash<WTF::CString>,WTF::HashTraits<WTF::CString>,WTF::HashTraits<WTF::Seconds>,WTF::HashTableTraits>::add<WTF::Seconds&>(uint64_t a1, uint64_t *a2, int8x16_t **a3, _QWORD *a4)
{
  uint64_t v7;
  unsigned int v8;
  int8x16_t *v9;
  int v10;
  __int8 v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  int i;
  unsigned int v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  WTF *v31;
  _DWORD *v32;
  int8x16_t *v33;
  char v36;
  int8x16_t *v37;
  _DWORD *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  WTF *v51;

  v7 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::CString,WTF::KeyValuePair<WTF::CString,WTF::Seconds>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CString,WTF::Seconds>>,WTF::DefaultHash<WTF::CString>,WTF::HashMap<WTF::CString,WTF::Seconds,WTF::DefaultHash<WTF::CString>,WTF::HashTraits<WTF::CString>,WTF::HashTraits<WTF::Seconds>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CString>>::rehash(a2, 8u, 0), (v7 = *a2) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *a3;
  if (*a3)
  {
    v10 = -1640531527;
    v11 = v9[1].i8[0];
    if (v11)
    {
      v12 = &v9[1].u8[2];
      while (*(v12 - 1))
      {
        v13 = ((unsigned __int16)(char)*(v12 - 1) << 11) ^ ((v10 + (unsigned __int16)v11) << 16) ^ (v10
                                                                                                  + (unsigned __int16)v11);
        v10 = v13 + (v13 >> 11);
        v14 = *v12;
        v12 += 2;
        v11 = v14;
        if (!v14)
          goto LABEL_12;
      }
      v16 = (v10 + (unsigned __int16)v11) ^ ((v10 + (unsigned __int16)v11) << 11);
      v10 = v16 + (v16 >> 17);
    }
LABEL_12:
    v17 = (v10 ^ (8 * v10)) + ((v10 ^ (8 * v10)) >> 5);
    v18 = (v17 ^ (4 * v17)) + ((v17 ^ (4 * v17)) >> 15);
    v15 = v18 ^ (v18 << 10);
    if (!v15)
      v15 = 0x800000;
  }
  else
  {
    v15 = 0;
  }
  v19 = 0;
  for (i = 1; ; ++i)
  {
    v21 = v15 & v8;
    v22 = (_QWORD *)(v7 + 16 * (v15 & v8));
    v51 = 0;
    v30 = WTF::operator==((uint64_t)v22, (int8x16_t **)&v51);
    v31 = v51;
    v51 = 0;
    if (!v31)
      goto LABEL_18;
    if (*(_DWORD *)v31 == 1)
    {
      WTF::fastFree((unint64_t)v31, v23, v24, v25, v26, v27, v28, v29);
      if ((v30 & 1) == 0)
        goto LABEL_19;
LABEL_36:
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v22 = v19;
      }
      v37 = *a3;
      *a3 = 0;
      v38 = (_DWORD *)*v22;
      *v22 = v37;
      if (v38)
      {
        if (*v38 == 1)
          WTF::fastFree((unint64_t)v38, v23, v24, v25, v26, v27, v28, v29);
        else
          --*v38;
      }
      v22[1] = *a4;
      v39 = *a2;
      if (*a2)
        v40 = *(_DWORD *)(v39 - 12) + 1;
      else
        v40 = 1;
      *(_DWORD *)(v39 - 12) = v40;
      v43 = *a2;
      if (*a2)
        v44 = *(_DWORD *)(v43 - 12);
      else
        v44 = 0;
      v45 = (*(_DWORD *)(v43 - 16) + v44);
      v46 = *(unsigned int *)(v43 - 4);
      if (v46 > 0x400)
      {
        if (v46 <= 2 * v45)
          goto LABEL_52;
      }
      else if (3 * v46 <= 4 * v45)
      {
        if (!(_DWORD)v46)
        {
          v47 = 8;
LABEL_57:
          v22 = (_QWORD *)WTF::HashTable<WTF::CString,WTF::KeyValuePair<WTF::CString,WTF::Seconds>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CString,WTF::Seconds>>,WTF::DefaultHash<WTF::CString>,WTF::HashMap<WTF::CString,WTF::Seconds,WTF::DefaultHash<WTF::CString>,WTF::HashTraits<WTF::CString>,WTF::HashTraits<WTF::Seconds>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CString>>::rehash(a2, v47, v22);
          v43 = *a2;
          if (*a2)
            v46 = *(unsigned int *)(v43 - 4);
          else
            v46 = 0;
          goto LABEL_60;
        }
LABEL_52:
        v47 = (_DWORD)v46 << (6 * *(_DWORD *)(v43 - 12) >= (2 * v46));
        goto LABEL_57;
      }
LABEL_60:
      v49 = v43 + 16 * v46;
      v48 = 1;
      goto LABEL_61;
    }
    --*(_DWORD *)v31;
LABEL_18:
    if ((v30 & 1) != 0)
      goto LABEL_36;
LABEL_19:
    v32 = (_DWORD *)*v22;
    v33 = *a3;
    if (*v22 == -1 || &v33->i8[1] == 0)
      break;
    v36 = WTF::operator==(v7 + 16 * v21, a3);
    if ((v36 & 1) != 0)
      goto LABEL_43;
    v32 = (_DWORD *)*v22;
LABEL_32:
    if (v32 == (_DWORD *)-1)
      v19 = (_QWORD *)(v7 + 16 * v21);
    v15 = i + v21;
  }
  if (v32 != (_DWORD *)-1 || &v33->i8[1] != 0)
    goto LABEL_32;
LABEL_43:
  v41 = *a2;
  if (*a2)
    v42 = *(unsigned int *)(v41 - 4);
  else
    v42 = 0;
  v48 = 0;
  v49 = v41 + 16 * v42;
LABEL_61:
  *(_QWORD *)a1 = v22;
  *(_QWORD *)(a1 + 8) = v49;
  *(_BYTE *)(a1 + 16) = v48;
}

uint64_t JSC::JITAddGenerator::generateInline(_BYTE *a1, _DWORD *a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int *v27;
  int *v28;
  int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int *v32;
  int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  _DWORD *v45;
  unsigned int v46;
  void *v47;
  _DWORD *v48;
  _DWORD *v49;
  _QWORD *v50;
  int v51;
  int v52;
  int v53;
  unsigned int v55;
  _DWORD *v56;
  uint64_t v57;
  char v58;
  unsigned int v59;
  _DWORD v60[3];
  _DWORD v61[3];
  int v62;
  int v63;
  int v64;
  uint64_t v65;

  if (a4)
  {
    v11 = *a4;
    v12 = (v11 >> 10) & 7;
    v13 = (v11 >> 7) & 7;
    if (v12 != 1)
    {
      if (v12 == 4 && v13 == 4)
        return 2;
      if (a1[1] != 1)
        return 1;
    }
    if (v13 != 1 && a1[11] != 1)
      return 1;
  }
  if (a1[1] != 1)
  {
    JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 3, (char)a1[21], 27, a5, a6, a7, a8, (uint64_t)&v64);
    v15 = v64;
    if (v64 != -1)
    {
      v16 = *(unsigned int *)(a3 + 36);
      if ((_DWORD)v16 == *(_DWORD *)(a3 + 32))
      {
        v17 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 24, (void *)(v16 + 1), (unint64_t)&v64, v14, a5, a6, a7, a8);
        v19 = *v17;
        v18 = (uint64_t *)(v17 + 1);
        v15 = v19;
        v20 = *(_QWORD *)(a3 + 24) + 12 * *(unsigned int *)(a3 + 36);
      }
      else
      {
        v18 = &v65;
        v20 = *(_QWORD *)(a3 + 24) + 12 * v16;
      }
      *(_DWORD *)v20 = v15;
      *(_QWORD *)(v20 + 4) = *v18;
      ++*(_DWORD *)(a3 + 36);
    }
  }
  if (a1[11] != 1)
  {
    JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 3, (char)a1[22], 27, a5, a6, a7, a8, (uint64_t)&v62);
    v25 = v62;
    if (v62 != -1)
    {
      v26 = *(unsigned int *)(a3 + 36);
      if ((_DWORD)v26 == *(_DWORD *)(a3 + 32))
      {
        v27 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 24, (void *)(v26 + 1), (unint64_t)&v62, v23, v24, a6, a7, a8);
        v29 = *v27;
        v28 = v27 + 1;
        v25 = v29;
        v30 = *(_QWORD *)(a3 + 24) + 12 * *(unsigned int *)(a3 + 36);
      }
      else
      {
        v28 = &v63;
        v30 = *(_QWORD *)(a3 + 24) + 12 * v26;
      }
      *(_DWORD *)v30 = v25;
      *(_QWORD *)(v30 + 4) = *(_QWORD *)v28;
      ++*(_DWORD *)(a3 + 36);
    }
  }
  if (a1[1] == 1)
  {
    v31 = a1 + 22;
    v32 = (unsigned int *)(a1 + 2);
  }
  else
  {
    if (a1[11] != 1)
    {
      v52 = a1[21];
      v53 = a1[20];
      if (a1[22] == v53 || v52 == v53)
        v34 = a1[25];
      else
        v34 = a1[20];
      JSC::MacroAssemblerARM64::branchAdd32((uint64_t)a2, 6, (char)a1[22], (char)v52, v34, a6, a7, a8, (uint64_t)v60);
      v42 = v60[0];
      if (v60[0] == -1)
        goto LABEL_45;
      v43 = (_QWORD *)(a3 + 24);
      v55 = *(_DWORD *)(a3 + 36);
      v45 = (_DWORD *)(a3 + 36);
      v44 = v55;
      if (v55 == *(v45 - 1))
      {
        v47 = (void *)(v44 + 1);
        v48 = v60;
        goto LABEL_32;
      }
      v56 = v60;
LABEL_43:
      v50 = v56 + 1;
      goto LABEL_44;
    }
    v31 = a1 + 21;
    v32 = (unsigned int *)(a1 + 12);
  }
  v33 = *v31;
  if (v33 == a1[20])
    v34 = a1[25];
  else
    v34 = a1[20];
  JSC::MacroAssemblerARM64::branchAdd32((uint64_t)a2, 6, (char)v33, *v32, v34, a6, a7, a8, (uint64_t)v61);
  v42 = v61[0];
  if (v61[0] == -1)
    goto LABEL_45;
  v43 = (_QWORD *)(a3 + 24);
  v46 = *(_DWORD *)(a3 + 36);
  v45 = (_DWORD *)(a3 + 36);
  v44 = v46;
  if (v46 != *(v45 - 1))
  {
    v56 = v61;
    goto LABEL_43;
  }
  v47 = (void *)(v44 + 1);
  v48 = v61;
LABEL_32:
  v49 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v47, (unint64_t)v48, v37, v38, v39, v40, v41);
  v51 = *v49;
  v50 = v49 + 1;
  v42 = v51;
  LODWORD(v44) = *v45;
LABEL_44:
  v57 = *v43 + 12 * v44;
  *(_DWORD *)v57 = v42;
  *(_QWORD *)(v57 + 4) = *v50;
  ++*v45;
LABEL_45:
  v58 = a1[20];
  v59 = a2[50];
  if (v59 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), v35, v36, v37, v38, v39, v40, v41);
    v59 = a2[50];
  }
  result = 0;
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v59) = v58 & 0x1F | ((v34 & 0x1F) << 16) | 0xAA000360;
  a2[50] += 4;
  return result;
}

uint64_t JSC::JITAddGenerator::generateFastPath(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  int v11;
  unsigned __int16 *v12;
  int v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  BOOL v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int *v58;
  int *v59;
  int v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  char v66;
  uint64_t v67;
  int *v68;
  int *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  char v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  char v106;
  uint64_t v107;
  int *v108;
  int *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int *v119;
  int *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  _DWORD *v127;
  uint64_t *v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  int v143;
  unsigned int v144;
  int v145;
  unsigned int v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  _DWORD *v157;
  uint64_t *v158;
  int v159;
  uint64_t v160;
  char v161;
  int v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  unsigned int v175;
  int v176;
  int v177;
  int v178;
  unsigned int v179;
  unsigned int v180;
  JSC::AssemblerBuffer *v181;
  unsigned __int16 *v182;
  int v183;
  uint64_t v184;
  unsigned int v185[2];
  char v186;
  __int16 v187;
  char v188;
  int v189;
  uint64_t v190;
  int v191;
  int v192;
  int v193;
  int v194;
  char v195;
  __int16 v196;
  char v197;
  int v198;
  int v199;
  unsigned int v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  int v206;
  int v207;
  char v208;
  __int16 v209;
  char v210;
  int v211;
  uint64_t v212;
  _BYTE v213[24];

  if ((*a1 & 2) == 0)
    return 0;
  v9 = a1 + 10;
  if ((a1[10] & 2) == 0)
    return 0;
  v11 = a6;
  v12 = (unsigned __int16 *)a5;
  v16 = a1[1];
  if (v16 == 1)
  {
    v182 = (unsigned __int16 *)a5;
    v17 = a6;
    v18 = a1;
  }
  else
  {
    if (a1[11] != 1)
    {
      *(_QWORD *)v213 = 0xFFFFFFFFLL;
      *(_DWORD *)&v213[8] = -16773311;
      JSC::MacroAssemblerARM64::branch64(a2, 3, (char)a1[21], 27, a5, a6, a7, a8, (uint64_t)&v202);
      *(_DWORD *)v213 = v202;
      *(_QWORD *)&v213[4] = v203;
      JSC::MacroAssemblerARM64::branch64(a2, 3, (char)a1[22], 27, v38, v39, v40, v41, (uint64_t)&v200);
      v202 = v200;
      v203 = v201;
      v45 = a1[21];
      v46 = a1[20];
      v47 = a1[22] == v46 || v45 == v46;
      if (v47)
        v48 = a1[25];
      else
        v48 = a1[20];
      JSC::MacroAssemblerARM64::branchAdd32(a2, 6, (char)a1[22], (char)v45, v48, v42, v43, v44, (uint64_t)&v198);
      v56 = v198;
      if (v198 != -1)
      {
        v57 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v57 == *(_DWORD *)(a4 + 8))
        {
          v58 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v57 + 1), (unint64_t)&v198, v51, v52, v53, v54, v55);
          v60 = *v58;
          v59 = v58 + 1;
          v56 = v60;
          LODWORD(v57) = *(_DWORD *)(a4 + 12);
        }
        else
        {
          v59 = &v199;
        }
        v101 = *(_QWORD *)a4 + 12 * v57;
        *(_DWORD *)v101 = v56;
        *(_QWORD *)(v101 + 4) = *(_QWORD *)v59;
        ++*(_DWORD *)(a4 + 12);
      }
      v102 = a1[20];
      v103 = *(_DWORD *)(a2 + 200);
      if (v103 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v49, v50, v51, v52, v53, v54, v55);
        v103 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v103) = v102 & 0x1F | ((v48 & 0x1F) << 16) | 0xAA000360;
      v104 = *(_DWORD *)(a2 + 200) + 4;
      for (*(_DWORD *)(a2 + 200) = v104; v104 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v104)
      {
        if ((v104 + 4) > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v49, v50, v51, v52, v53, v54, v55);
          v104 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v104) = -721215457;
        v104 = *(_DWORD *)(a2 + 200) + 4;
      }
      v105 = v104;
      if ((v104 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v49, v50, v51, v52, v53, v54, v55);
        v105 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v105) = 335544320;
      *(_DWORD *)(a2 + 200) += 4;
      if (*(_BYTE *)(a2 + 328))
        v106 = 69;
      else
        v106 = 65;
      v193 = v104;
      v194 = 0;
      v195 = v106;
      v196 = 15;
      v197 = -1;
      if (v104 != -1)
      {
        v107 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v107 == *(_DWORD *)(a3 + 8))
        {
          v108 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v107 + 1), (unint64_t)&v193, v51, v52, v53, v54, v55);
          v110 = *v108;
          v109 = v108 + 1;
          v111 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
          *(_DWORD *)v111 = v110;
        }
        else
        {
          v109 = &v194;
          v111 = *(_QWORD *)a3 + 12 * v107;
          *(_DWORD *)v111 = v104;
        }
        *(_QWORD *)(v111 + 4) = *(_QWORD *)v109;
        ++*(_DWORD *)(a3 + 12);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v213, a2, v50, v51, v52, v53, v54, v55);
      if ((*a1 & 0x7E) != 2)
      {
        JSC::MacroAssemblerARM64::branchTest64(a2, 0, (char)a1[21], 27, v112, v113, v114, v115, (uint64_t)&v191);
        v117 = v191;
        if (v191 != -1)
        {
          v118 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v118 == *(_DWORD *)(a4 + 8))
          {
            v119 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v118 + 1), (unint64_t)&v191, v116, v112, v113, v114, v115);
            v121 = *v119;
            v120 = v119 + 1;
            v117 = v121;
            LODWORD(v118) = *(_DWORD *)(a4 + 12);
          }
          else
          {
            v120 = &v192;
          }
          v122 = *(_QWORD *)a4 + 12 * v118;
          *(_DWORD *)v122 = v117;
          *(_QWORD *)(v122 + 4) = *(_QWORD *)v120;
          ++*(_DWORD *)(a4 + 12);
        }
      }
      if ((*v9 & 0x7E) != 2)
      {
        JSC::MacroAssemblerARM64::branchTest64(a2, 0, (char)a1[22], 27, v112, v113, v114, v115, (uint64_t)&v189);
        v125 = v189;
        if (v189 != -1)
        {
          v126 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v126 == *(_DWORD *)(a4 + 8))
          {
            v127 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v126 + 1), (unint64_t)&v189, v123, v124, v113, v114, v115);
            v129 = *v127;
            v128 = (uint64_t *)(v127 + 1);
            v125 = v129;
            LODWORD(v126) = *(_DWORD *)(a4 + 12);
          }
          else
          {
            v128 = &v190;
          }
          v130 = *(_QWORD *)a4 + 12 * v126;
          *(_DWORD *)v130 = v125;
          *(_QWORD *)(v130 + 4) = *v128;
          ++*(_DWORD *)(a4 + 12);
        }
      }
      JSC::AssemblyHelpers::unboxDoubleWithoutAssertions((_DWORD *)a2, (char)a1[21], (char)a1[25], (char)a1[23], 1, v113, v114, v115);
      JSC::MacroAssemblerARM64::branch64(a2, 3, (char)a1[22], 27, v131, v132, v133, v134, (uint64_t)&v200);
      v142 = a1[22];
      v143 = (char)a1[24];
      v144 = *(_DWORD *)(a2 + 200);
      if (v144 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v135, v136, v137, v138, v139, v140, v141);
        v144 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v144) = v143 | (32 * (v142 & 0x1F)) | 0x1E620000;
      v145 = *(_DWORD *)(a2 + 200) + 4;
      for (*(_DWORD *)(a2 + 200) = v145; v145 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v145)
      {
        if ((v145 + 4) > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v135, v136, v137, v138, v139, v140, v141);
          v145 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v145) = -721215457;
        v145 = *(_DWORD *)(a2 + 200) + 4;
      }
      v146 = v145;
      if ((v145 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v135, v136, v137, v138, v139, v140, v141);
        v146 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v146) = 335544320;
      *(_DWORD *)(a2 + 200) += 4;
      if (*(_BYTE *)(a2 + 328))
        v147 = 69;
      else
        v147 = 65;
      v185[0] = v145;
      v185[1] = 0;
      v186 = v147;
      v187 = 15;
      v188 = -1;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v202, a2, v136, v137, v138, v139, v140, v141);
      if ((*v9 & 0x7E) != 2)
      {
        JSC::MacroAssemblerARM64::branchTest64(a2, 0, (char)a1[22], 27, v151, v152, v153, v154, (uint64_t)&v183);
        v155 = v183;
        if (v183 != -1)
        {
          v156 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v156 == *(_DWORD *)(a4 + 8))
          {
            v157 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v156 + 1), (unint64_t)&v183, v150, v151, v152, v153, v154);
            v159 = *v157;
            v158 = (uint64_t *)(v157 + 1);
            v155 = v159;
            LODWORD(v156) = *(_DWORD *)(a4 + 12);
          }
          else
          {
            v158 = &v184;
          }
          v160 = *(_QWORD *)a4 + 12 * v156;
          *(_DWORD *)v160 = v155;
          *(_QWORD *)(v160 + 4) = *v158;
          ++*(_DWORD *)(a4 + 12);
        }
      }
      v161 = a1[21];
      v162 = (char)a1[23];
      v163 = *(_DWORD *)(a2 + 200);
      if (v163 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v148, v149, v150, v151, v152, v153, v154);
        v163 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v163) = v162 | (32 * (v161 & 0x1F)) | 0x1E620000;
      *(_DWORD *)(a2 + 200) += 4;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v200, a2, v149, v150, v151, v152, v153, v154);
      JSC::AssemblyHelpers::unboxDoubleWithoutAssertions((_DWORD *)a2, (char)a1[22], (char)a1[25], (char)a1[24], 1, v164, v165, v166);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v185, a2, v167, v168, v169, v170, v171, v172);
      v100 = *(_DWORD *)(a2 + 200);
      goto LABEL_93;
    }
    v182 = (unsigned __int16 *)a5;
    v17 = a6;
    v18 = a1 + 10;
    v9 = a1;
  }
  v47 = v16 == 1;
  v19 = 21;
  if (v47)
    v19 = 22;
  v20 = (char)a1[v19];
  v21 = a1[v19];
  JSC::MacroAssemblerARM64::branch64(a2, 3, v20, 27, a5, a6, a7, a8, (uint64_t)v213);
  if (v21 == a1[20])
    v25 = a1[25];
  else
    v25 = a1[20];
  JSC::MacroAssemblerARM64::branchAdd32(a2, 6, v20, *(unsigned int *)(v18 + 2), v25, v22, v23, v24, (uint64_t)&v211);
  v33 = v211;
  if (v211 != -1)
  {
    v34 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v34 == *(_DWORD *)(a4 + 8))
    {
      v35 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v34 + 1), (unint64_t)&v211, v28, v29, v30, v31, v32);
      v37 = *v35;
      v36 = (uint64_t *)(v35 + 1);
      v33 = v37;
      LODWORD(v34) = *(_DWORD *)(a4 + 12);
    }
    else
    {
      v36 = &v212;
    }
    v61 = *(_QWORD *)a4 + 12 * v34;
    *(_DWORD *)v61 = v33;
    *(_QWORD *)(v61 + 4) = *v36;
    ++*(_DWORD *)(a4 + 12);
  }
  v62 = a1[20];
  v181 = (JSC::AssemblerBuffer *)(a2 + 56);
  v63 = *(_DWORD *)(a2 + 200);
  if (v63 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v181, v26, v27, v28, v29, v30, v31, v32);
    v63 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v63) = v62 & 0x1F | ((v25 & 0x1F) << 16) | 0xAA000360;
  v64 = *(_DWORD *)(a2 + 200) + 4;
  for (*(_DWORD *)(a2 + 200) = v64; v64 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v64)
  {
    if ((v64 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v181, v26, v27, v28, v29, v30, v31, v32);
      v64 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v64) = -721215457;
    v64 = *(_DWORD *)(a2 + 200) + 4;
  }
  v65 = v64;
  if ((v64 + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v181, v26, v27, v28, v29, v30, v31, v32);
    v65 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v65) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v66 = 69;
  else
    v66 = 65;
  v206 = v64;
  v207 = 0;
  v208 = v66;
  v209 = 15;
  v210 = -1;
  if (v64 != -1)
  {
    v67 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v67 == *(_DWORD *)(a3 + 8))
    {
      v68 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v67 + 1), (unint64_t)&v206, v28, v29, v30, v31, v32);
      v70 = *v68;
      v69 = v68 + 1;
      v71 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
      *(_DWORD *)v71 = v70;
    }
    else
    {
      v69 = &v207;
      v71 = *(_QWORD *)a3 + 12 * v67;
      *(_DWORD *)v71 = v64;
    }
    *(_QWORD *)(v71 + 4) = *(_QWORD *)v69;
    ++*(_DWORD *)(a3 + 12);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v213, a2, v27, v28, v29, v30, v31, v32);
  v76 = (char)v21;
  v11 = v17;
  v12 = v182;
  if ((*v9 & 0x7E) != 2)
  {
    JSC::MacroAssemblerARM64::branchTest64(a2, 0, v76, 27, v72, v73, v74, v75, (uint64_t)&v204);
    v79 = v204;
    if (v204 != -1)
    {
      v80 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v80 == *(_DWORD *)(a4 + 8))
      {
        v81 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v80 + 1), (unint64_t)&v204, v77, v78, v73, v74, v75);
        v83 = *v81;
        v82 = (uint64_t *)(v81 + 1);
        v79 = v83;
        LODWORD(v80) = *(_DWORD *)(a4 + 12);
      }
      else
      {
        v82 = &v205;
      }
      v84 = *(_QWORD *)a4 + 12 * v80;
      *(_DWORD *)v84 = v79;
      *(_QWORD *)(v84 + 4) = *v82;
      ++*(_DWORD *)(a4 + 12);
    }
  }
  JSC::AssemblyHelpers::unboxDoubleWithoutAssertions((_DWORD *)a2, v76, (char)a1[25], (char)a1[23], 1, v73, v74, v75);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v18 + 2), (char)a1[25], v85, v86, v87, v88, v89);
  v97 = a1[25];
  v98 = (char)a1[24];
  v99 = *(_DWORD *)(a2 + 200);
  if (v99 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v181, v90, v91, v92, v93, v94, v95, v96);
    v99 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v99) = v98 | (32 * (v97 & 0x1F)) | 0x1E620000;
  v100 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v100;
LABEL_93:
  v173 = (char)a1[24];
  v174 = (char)a1[23];
  if (v100 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v90, v91, v92, v93, v94, v95, v96);
    v100 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v100) = (v173 << 16) | (32 * v174) | v174 | 0x1E602800;
  v175 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v175;
  if (v12 && v11)
  {
    JSC::ArithProfile<unsigned short>::emitSetDouble(v12, a2, (char)a1[25], v92, v93, v94, v95, v96);
    v175 = *(_DWORD *)(a2 + 200);
  }
  v176 = (char)a1[23];
  v177 = a1[20];
  if (v175 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v90, v91, v92, v93, v94, v95, v96);
    v175 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v175) = v177 & 0x1F | (32 * v176) | 0x9E660000;
  v178 = *(_DWORD *)(a2 + 200);
  v179 = v178 + 4;
  *(_DWORD *)(a2 + 200) = v178 + 4;
  if (v177 == 31)
    v180 = -885300225;
  else
    v180 = v177 & 0x1F | (32 * (v177 & 0x1F)) | 0xCB1B0000;
  if ((v178 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v90, v91, v92, v93, v94, v95, v96);
    v179 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v179) = v180;
  *(_DWORD *)(a2 + 200) += 4;
  return 1;
}

void JSC::MacroAssemblerARM64::convertInt32ToDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * (v9 & 0x1F)) | 0x1E620000;
  a1[50] += 4;
}

void JSC::JIT::emit_compareUnsigned<JSC::OpBelow>(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpBeloweq>(a2);
  JSC::JIT::emit_compareUnsignedImpl(a1, v3, HIDWORD(v3), v4, 3, v5, v6, v7);
}

void JSC::JIT::emit_compareUnsigned<JSC::OpBeloweq>(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpBeloweq>(a2);
  JSC::JIT::emit_compareUnsignedImpl(a1, v3, HIDWORD(v3), v4, 9, v5, v6, v7);
}

void JSC::JIT::emit_compareUnsignedAndJump<JSC::OpJbelow>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int8x8_t v10;
  unsigned __int8 v11[24];

  JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpJeqPtr>(&v10, a2);
  v4 = v10.u32[0];
  v5 = v10.u32[1];
  v6 = JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::operator int(v11);
  if (!(_DWORD)v6)
    v6 = JSC::UnlinkedCodeBlock::outOfLineJumpOffset(*(_QWORD *)(a1 + 808), (unint64_t)a2);
  JSC::JIT::emit_compareUnsignedAndJumpImpl(a1, v4, v5, v6, 3, v7, v8, v9);
}

void JSC::JIT::emit_compareUnsignedAndJumpImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;

  v9 = a4;
  if ((int)a3 >= 0x40000000)
  {
    v29 = *(_QWORD *)(a1 + 808);
    v30 = (a3 - 0x40000000);
    v31 = *(_DWORD **)(v29 + 120);
    if (!v31 || *v31 <= v30 || *((_BYTE *)v31 + v30 + 4) != 3)
    {
      v32 = *(_DWORD **)(v29 + 112);
      if (*v32 <= v30)
        goto LABEL_63;
      if (*(_QWORD *)&v32[2 * v30 + 2] >= 0xFFFE000000000000)
      {
        if ((int)a2 < 0x40000000)
        {
          v33 = (a2 << 35) | 0x1D;
LABEL_18:
          JSC::MacroAssemblerARM64::load64(a1, v33, 0, a4, a5, a6, a7, a8);
          goto LABEL_19;
        }
        if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), a2))
        {
          JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v73, v74, v75, v76, v77);
          JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v94, v95, v96, v97, v98);
          v33 = a2 << 35;
          goto LABEL_18;
        }
        v78 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
        if (*v78 > (a2 - 0x40000000))
        {
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v78[2 * (a2 - 0x40000000) + 2], 0, v73, v74, v75, v76, v77);
LABEL_19:
          v38 = *(_QWORD *)(a1 + 808);
          v39 = *(_DWORD **)(v38 + 120);
          if (v39 && *v39 > v30 && *((_BYTE *)v39 + v30 + 4) == 3)
          {
            __break(0xC471u);
            JUMPOUT(0x198729FF8);
          }
          v40 = *(_DWORD **)(v38 + 112);
          if (*v40 <= v30)
          {
            __break(0xC471u);
            JUMPOUT(0x19872A018);
          }
          JSC::MacroAssemblerARM64::branch32(a1, a5, 0, v40[2 * v30 + 2], v34, v35, v36, v37, (uint64_t)&v103);
          v24 = v103;
          v25 = v104;
          goto LABEL_9;
        }
LABEL_63:
        __break(0xC471u);
        JUMPOUT(0x198729F78);
      }
    }
  }
  if ((int)a2 < 0x40000000)
  {
    v13 = (a2 << 35) | 0x1D;
    goto LABEL_4;
  }
  v41 = *(_QWORD *)(a1 + 808);
  v42 = (a2 - 0x40000000);
  v43 = *(_DWORD **)(v41 + 120);
  if (v43 && *v43 > v42 && *((_BYTE *)v43 + v42 + 4) == 3)
    goto LABEL_75;
  v44 = *(_DWORD **)(v41 + 112);
  if (*v44 <= v42)
  {
    __break(0xC471u);
    JUMPOUT(0x198729F98);
  }
  if (*(_QWORD *)&v44[2 * v42 + 2] < 0xFFFE000000000000)
  {
LABEL_75:
    if (JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), a2))
    {
      v66 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
      if (*v66 <= v42)
      {
        __break(0xC471u);
        JUMPOUT(0x19872A058);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v66[2 * v42 + 2], 0, v61, v62, v63, v64, v65);
LABEL_5:
      if ((int)a3 >= 0x40000000)
      {
        if (JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), a3))
        {
          v60 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
          if (*v60 <= (a3 - 0x40000000))
          {
            __break(0xC471u);
            JUMPOUT(0x19872A038);
          }
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v60[2 * (a3 - 0x40000000) + 2], 1, v55, v56, v57, v58, v59);
          goto LABEL_8;
        }
        JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v55, v56, v57, v58, v59);
        JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v79, v80, v81, v82, v83);
        v19 = (a3 << 35) | 1;
      }
      else
      {
        v19 = (a3 << 35) | 0x1D;
      }
      JSC::MacroAssemblerARM64::load64(a1, v19, 1, v14, v15, v16, v17, v18);
LABEL_8:
      JSC::MacroAssemblerARM64::branch32(a1, a5, 0, 1, v20, v21, v22, v23, (uint64_t)&v99);
      v24 = v99;
      v25 = v100;
      goto LABEL_9;
    }
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v61, v62, v63, v64, v65);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v84, v85, v86, v87, v88);
    v13 = a2 << 35;
LABEL_4:
    JSC::MacroAssemblerARM64::load64(a1, v13, 0, a4, a5, a6, a7, a8);
    goto LABEL_5;
  }
  if ((int)a3 >= 0x40000000)
  {
    if (JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), a3))
    {
      v72 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
      if (*v72 <= (a3 - 0x40000000))
      {
        __break(0xC471u);
        JUMPOUT(0x19872A078);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v72[2 * (a3 - 0x40000000) + 2], 1, v67, v68, v69, v70, v71);
      goto LABEL_32;
    }
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v67, v68, v69, v70, v71);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v89, v90, v91, v92, v93);
    v45 = (a3 << 35) | 1;
  }
  else
  {
    v45 = (a3 << 35) | 0x1D;
  }
  JSC::MacroAssemblerARM64::load64(a1, v45, 1, a4, a5, a6, a7, a8);
LABEL_32:
  v46 = *(_QWORD *)(a1 + 808);
  v47 = *(_DWORD **)(v46 + 120);
  if (v47 && *v47 > v42 && *((_BYTE *)v47 + v42 + 4) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x198729FB8);
  }
  v48 = *(_DWORD **)(v46 + 112);
  if (*v48 <= v42)
  {
    __break(0xC471u);
    JUMPOUT(0x198729FD8);
  }
  v49 = v48[2 * v42 + 2];
  v50 = JSC::MacroAssembler::commute(a5);
  JSC::MacroAssemblerARM64::branch32(a1, v50, 1, v49, v51, v52, v53, v54, (uint64_t)&v101);
  v24 = v101;
  v25 = v102;
LABEL_9:
  v26 = v9 + (*(_DWORD *)(a1 + 640) >> 2);
  v105 = v24;
  v106 = v25;
  v107 = v26;
  v27 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v27 == *(_DWORD *)(a1 + 632))
  {
    WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JumpTable>(a1 + 624, (unint64_t)&v105);
  }
  else
  {
    v28 = *(_QWORD *)(a1 + 624) + 16 * v27;
    *(_DWORD *)v28 = v24;
    *(_QWORD *)(v28 + 4) = v25;
    *(_DWORD *)(v28 + 12) = v26;
    ++*(_DWORD *)(a1 + 636);
  }
}

uint64_t JSC::MacroAssembler::commute(uint64_t result)
{
  int v1;

  v1 = result - 3;
  if ((result - 3) <= 0xA && ((0x7E1u >> v1) & 1) != 0)
    return dword_199156EF8[v1];
  return result;
}

void JSC::JIT::emit_compareUnsignedImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  if ((int)a4 >= 0x40000000)
  {
    v36 = *(_QWORD *)(a1 + 808);
    v37 = (a4 - 0x40000000);
    v38 = *(_DWORD **)(v36 + 120);
    if (!v38 || *v38 <= v37 || *((_BYTE *)v38 + v37 + 4) != 3)
    {
      v39 = *(_DWORD **)(v36 + 112);
      if (*v39 <= v37)
        goto LABEL_62;
      if (*(_QWORD *)&v39[2 * v37 + 2] >= 0xFFFE000000000000)
      {
        if ((int)a3 < 0x40000000)
        {
          v40 = (a3 << 35) | 0x1D;
LABEL_17:
          JSC::MacroAssemblerARM64::load64(a1, v40, 0, a4, a5, a6, a7, a8);
          goto LABEL_18;
        }
        if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), a3))
        {
          JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v77, v78, v79, v80, v81);
          JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v98, v99, v100, v101, v102);
          v40 = a3 << 35;
          goto LABEL_17;
        }
        v82 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
        if (*v82 > (a3 - 0x40000000))
        {
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v82[2 * (a3 - 0x40000000) + 2], 0, v77, v78, v79, v80, v81);
LABEL_18:
          v44 = *(_QWORD *)(a1 + 808);
          v45 = *(_DWORD **)(v44 + 120);
          if (v45 && *v45 > v37 && *((_BYTE *)v45 + v37 + 4) == 3)
          {
            __break(0xC471u);
            JUMPOUT(0x19872A568);
          }
          v46 = *(_DWORD **)(v44 + 112);
          if (*v46 <= v37)
          {
            __break(0xC471u);
            JUMPOUT(0x19872A588);
          }
          v47 = v46[2 * v37 + 2];
          v48 = a1;
          v49 = a5;
LABEL_36:
          JSC::MacroAssemblerARM64::compare32(v48, v49, 0, v47, 0, v41, v42, v43);
          goto LABEL_9;
        }
LABEL_62:
        __break(0xC471u);
        JUMPOUT(0x19872A4E8);
      }
    }
  }
  if ((int)a3 < 0x40000000)
  {
    v13 = (a3 << 35) | 0x1D;
LABEL_4:
    JSC::MacroAssemblerARM64::load64(a1, v13, 0, a4, a5, a6, a7, a8);
    goto LABEL_5;
  }
  v50 = *(_QWORD *)(a1 + 808);
  v51 = (a3 - 0x40000000);
  v52 = *(_DWORD **)(v50 + 120);
  if (!v52 || *v52 <= v51 || *((_BYTE *)v52 + v51 + 4) != 3)
  {
    v53 = *(_DWORD **)(v50 + 112);
    if (*v53 <= v51)
    {
      __break(0xC471u);
      JUMPOUT(0x19872A508);
    }
    if (*(_QWORD *)&v53[2 * v51 + 2] >= 0xFFFE000000000000)
    {
      if ((int)a4 >= 0x40000000)
      {
        if (JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), a4))
        {
          v76 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
          if (*v76 <= (a4 - 0x40000000))
          {
            __break(0xC471u);
            JUMPOUT(0x19872A5E8);
          }
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v76[2 * (a4 - 0x40000000) + 2], 0, v71, v72, v73, v74, v75);
          goto LABEL_31;
        }
        JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v71, v72, v73, v74, v75);
        JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v93, v94, v95, v96, v97);
        v54 = a4 << 35;
      }
      else
      {
        v54 = (a4 << 35) | 0x1D;
      }
      JSC::MacroAssemblerARM64::load64(a1, v54, 0, a4, a5, a6, a7, a8);
LABEL_31:
      v55 = *(_QWORD *)(a1 + 808);
      v56 = *(_DWORD **)(v55 + 120);
      if (v56 && *v56 > v51 && *((_BYTE *)v56 + v51 + 4) == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19872A528);
      }
      v57 = *(_DWORD **)(v55 + 112);
      if (*v57 <= v51)
      {
        __break(0xC471u);
        JUMPOUT(0x19872A548);
      }
      v58 = v57[2 * v51 + 2];
      v49 = JSC::MacroAssembler::commute(a5);
      v48 = a1;
      v47 = v58;
      goto LABEL_36;
    }
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), a3))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v65, v66, v67, v68, v69);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v88, v89, v90, v91, v92);
    v13 = a3 << 35;
    goto LABEL_4;
  }
  v70 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v70 <= v51)
  {
    __break(0xC471u);
    JUMPOUT(0x19872A5C8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v70[2 * v51 + 2], 0, v65, v66, v67, v68, v69);
LABEL_5:
  if ((int)a4 >= 0x40000000)
  {
    if (JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), a4))
    {
      v64 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
      if (*v64 <= (a4 - 0x40000000))
      {
        __break(0xC471u);
        JUMPOUT(0x19872A5A8);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v64[2 * (a4 - 0x40000000) + 2], 1, v59, v60, v61, v62, v63);
      goto LABEL_8;
    }
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v59, v60, v61, v62, v63);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v83, v84, v85, v86, v87);
    v19 = (a4 << 35) | 1;
  }
  else
  {
    v19 = (a4 << 35) | 0x1D;
  }
  JSC::MacroAssemblerARM64::load64(a1, v19, 1, v14, v15, v16, v17, v18);
LABEL_8:
  JSC::MacroAssemblerARM64::compare32((_DWORD *)a1, a5, v20, v21, v22, v23, v24, v25);
LABEL_9:
  JSC::AssemblyHelpers::boxBoolean((_DWORD *)a1, 0, 0, v26, v27, v28, v29, v30);
  JSC::MacroAssemblerARM64::store64(a1, 0, (a2 << 35) | 0x1D, v31, v32, v33, v34, v35);
}

void JSC::MacroAssemblerARM64::compare32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  JSC::AssemblerBuffer *v10;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v8 = a2;
  v10 = (JSC::AssemblerBuffer *)(a1 + 14);
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = 1795227679;
  v12 = a1[50];
  v13 = v12 + 4;
  a1[50] = v12 + 4;
  if ((v12 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = ((v8 & 0xF) << 12) ^ 0x1A9F17E0;
  a1[50] += 4;
}

void JSC::AssemblyHelpers::boxBoolean(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0x11001800;
  a1[50] += 4;
}

void JSC::JITBitAndGenerator::generateFastPath(JSC::JITBitAndGenerator *this, JSC::CCallHelpers *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  JSC::JITBitAndGenerator *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int *v38;
  int *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;

  *((_BYTE *)this + 24) = 1;
  v10 = *((unsigned __int8 *)this + 1);
  if (v10 != 1)
  {
    if (*((_BYTE *)this + 11) == 1)
    {
      v11 = (unsigned __int8 *)this + 21;
      goto LABEL_4;
    }
    if ((*(_BYTE *)this & 0x7E) == 0x20 && (*((_BYTE *)this + 10) & 0x7E) == 0x20)
    {
      JSC::MacroAssemblerARM64::and32(a2, *((char *)this + 21), *((char *)this + 22), *((char *)this + 20), a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::and32((uint64_t)a2, (JSC::ARM64LogicalImmediate *)1, *((_BYTE *)this + 20), *((char *)this + 20));
      JSC::MacroAssemblerARM64::or64(a2, 27, *((char *)this + 20), v58, v59, v60, v61, v62);
      return;
    }
    v25 = *((_BYTE *)this + 21);
    v26 = *((_BYTE *)this + 22);
    v27 = *((_BYTE *)this + 23);
    v28 = *((_DWORD *)a2 + 50);
    if (v28 + 4 > *((_DWORD *)a2 + 48))
    {
      v63 = *((_BYTE *)this + 21);
      v64 = *((_BYTE *)this + 22);
      JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v25 = v63;
      v26 = v64;
      v28 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v28) = (unsigned __int16)(32 * (v25 & 0x1F)) | ((v26 & 0x1F) << 16) | v27 & 0x1F | 0x8A000000;
    *((_DWORD *)a2 + 50) += 4;
    JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 3, *((char *)this + 23), 27, a5, a6, a7, a8, (uint64_t)&v65);
    v36 = v65;
    if (v65 != -1)
    {
      v37 = *((unsigned int *)this + 21);
      if ((_DWORD)v37 == *((_DWORD *)this + 20))
      {
        v38 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, (void *)(v37 + 1), (unint64_t)&v65, v31, v32, v33, v34, v35);
        v40 = *v38;
        v39 = v38 + 1;
        v36 = v40;
        v41 = *((_QWORD *)this + 9) + 12 * *((unsigned int *)this + 21);
      }
      else
      {
        v39 = &v66;
        v41 = *((_QWORD *)this + 9) + 12 * v37;
      }
      *(_DWORD *)v41 = v36;
      *(_QWORD *)(v41 + 4) = *(_QWORD *)v39;
      ++*((_DWORD *)this + 21);
    }
    v52 = *((unsigned __int8 *)this + 23);
    v53 = *((char *)this + 20);
    if (v52 == *((unsigned __int8 *)this + 20))
      return;
    if ((char)v52 == 63)
    {
      if (*((_BYTE *)this + 20) != 31)
      {
        v56 = v53 & 0x1F | 0xD2800000;
        goto LABEL_34;
      }
    }
    else if ((char)v52 != 31 && v53 != 31)
    {
      v54 = *((unsigned __int8 *)this + 20) | ((v52 & 0x1F) << 16);
      v55 = -1442839584;
LABEL_33:
      v56 = v54 | v55;
LABEL_34:
      v57 = *((_DWORD *)a2 + 50);
      if (v57 + 4 > *((_DWORD *)a2 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v29, v30, v31, v32, v33, v34, v35);
        v57 = *((_DWORD *)a2 + 50);
      }
      *(_DWORD *)(*((_QWORD *)a2 + 7) + v57) = v56;
      goto LABEL_23;
    }
    v54 = v53 | (32 * (char)v52);
    v55 = -1862270976;
    goto LABEL_33;
  }
  v11 = (unsigned __int8 *)this + 22;
LABEL_4:
  v12 = *v11;
  if (v10 == 1)
    v13 = this;
  else
    v13 = (JSC::JITBitAndGenerator *)((char *)this + 10);
  JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 3, (char)*v11, 27, a5, a6, a7, a8, (uint64_t)&v67);
  v19 = v67;
  if (v67 != -1)
  {
    v20 = *((unsigned int *)this + 21);
    if ((_DWORD)v20 == *((_DWORD *)this + 20))
    {
      v21 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, (void *)(v20 + 1), (unint64_t)&v67, v14, v15, v16, v17, v18);
      v23 = *v21;
      v22 = (uint64_t *)(v21 + 1);
      v19 = v23;
      v24 = *((_QWORD *)this + 9) + 12 * *((unsigned int *)this + 21);
    }
    else
    {
      v22 = &v68;
      v24 = *((_QWORD *)this + 9) + 12 * v20;
    }
    *(_DWORD *)v24 = v19;
    *(_QWORD *)(v24 + 4) = *v22;
    ++*((_DWORD *)this + 21);
  }
  v42 = *(unsigned int *)((char *)v13 + 2);
  if (v42 == 0xFFFFFFFFLL)
  {
    JSC::AssemblyHelpers::moveValueRegs(a2, v12, *((unsigned __int8 *)this + 20), v14, v15, v16, v17, v18);
    return;
  }
  JSC::MacroAssemblerARM64::and64((uint64_t)a2, v42, v12, *((char *)this + 20));
  if ((*((_BYTE *)v13 + 5) & 0x80) == 0)
  {
    v50 = *((_BYTE *)this + 20);
    v51 = *((_DWORD *)a2 + 50);
    if (v51 + 4 > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v43, v44, v45, v46, v47, v48, v49);
      v51 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v51) = v50 & 0x1F | (32 * (v50 & 0x1F)) | 0xAA1B0000;
LABEL_23:
    *((_DWORD *)a2 + 50) += 4;
  }
}

void JSC::JITBitOrGenerator::generateFastPath(JSC::JITBitOrGenerator *this, JSC::CCallHelpers *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  char *v11;
  int v12;
  JSC::JITBitOrGenerator *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int *v34;
  int *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  *((_BYTE *)this + 24) = 1;
  v10 = *((unsigned __int8 *)this + 1);
  if (v10 == 1)
  {
    v11 = (char *)this + 22;
  }
  else
  {
    if (*((_BYTE *)this + 11) != 1)
    {
      if ((*(_BYTE *)this & 0x7E) == 0x20 && (*((_BYTE *)this + 10) & 0x7E) == 0x20)
      {
        JSC::MacroAssemblerARM64::or32(a2, *((char *)this + 21), *((char *)this + 22), *((char *)this + 20), a5, a6, a7, a8);
        JSC::MacroAssemblerARM64::and32((uint64_t)a2, (JSC::ARM64LogicalImmediate *)1, *((_BYTE *)this + 20), *((char *)this + 20));
        JSC::MacroAssemblerARM64::or64(a2, 27, *((char *)this + 20), v64, v65, v66, v67, v68);
      }
      else
      {
        v26 = (uint64_t *)((char *)this + 72);
        JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 3, *((char *)this + 21), 27, a5, a6, a7, a8, (uint64_t)&v71);
        v32 = v71;
        if (v71 != -1)
        {
          v33 = *((unsigned int *)this + 21);
          if ((_DWORD)v33 == *((_DWORD *)this + 20))
          {
            v34 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, (void *)(v33 + 1), (unint64_t)&v71, v27, v28, v29, v30, v31);
            v36 = *v34;
            v35 = v34 + 1;
            v32 = v36;
            LODWORD(v33) = *((_DWORD *)this + 21);
            v37 = *((_QWORD *)this + 9);
          }
          else
          {
            v35 = &v72;
            v37 = *v26;
          }
          v45 = v37 + 12 * v33;
          *(_DWORD *)v45 = v32;
          *(_QWORD *)(v45 + 4) = *(_QWORD *)v35;
          ++*((_DWORD *)this + 21);
        }
        JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 3, *((char *)this + 22), 27, v28, v29, v30, v31, (uint64_t)&v69);
        v53 = v69;
        if (v69 != -1)
        {
          v54 = *((unsigned int *)this + 21);
          if ((_DWORD)v54 == *((_DWORD *)this + 20))
          {
            v55 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, (void *)(v54 + 1), (unint64_t)&v69, v48, v49, v50, v51, v52);
            v57 = *v55;
            v56 = (uint64_t *)(v55 + 1);
            v53 = v57;
            LODWORD(v54) = *((_DWORD *)this + 21);
            v58 = *((_QWORD *)this + 9);
          }
          else
          {
            v56 = &v70;
            v58 = *v26;
          }
          v59 = v58 + 12 * v54;
          *(_DWORD *)v59 = v53;
          *(_QWORD *)(v59 + 4) = *v56;
          ++*((_DWORD *)this + 21);
        }
        v60 = *((_BYTE *)this + 22);
        v61 = *((_BYTE *)this + 21);
        v62 = *((_BYTE *)this + 20);
        v63 = *((_DWORD *)a2 + 50);
        if (v63 + 4 > *((_DWORD *)a2 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v46, v47, v48, v49, v50, v51, v52);
          v63 = *((_DWORD *)a2 + 50);
        }
        *(_DWORD *)(*((_QWORD *)a2 + 7) + v63) = (unsigned __int16)(32 * (v60 & 0x1F)) | ((v61 & 0x1F) << 16) | v62 & 0x1F | 0xAA000000;
        *((_DWORD *)a2 + 50) += 4;
      }
      return;
    }
    v11 = (char *)this + 21;
  }
  v12 = *v11;
  if (v10 == 1)
    v13 = this;
  else
    v13 = (JSC::JITBitOrGenerator *)((char *)this + 10);
  JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 3, *v11, 27, a5, a6, a7, a8, (uint64_t)&v73);
  v20 = v73;
  if (v73 != -1)
  {
    v21 = *((unsigned int *)this + 21);
    if ((_DWORD)v21 == *((_DWORD *)this + 20))
    {
      v22 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, (void *)(v21 + 1), (unint64_t)&v73, v15, v16, v17, v18, v19);
      v24 = *v22;
      v23 = (uint64_t *)(v22 + 1);
      v20 = v24;
      v25 = *((_QWORD *)this + 9) + 12 * *((unsigned int *)this + 21);
    }
    else
    {
      v23 = &v74;
      v25 = *((_QWORD *)this + 9) + 12 * v21;
    }
    *(_DWORD *)v25 = v20;
    *(_QWORD *)(v25 + 4) = *v23;
    ++*((_DWORD *)this + 21);
  }
  v38 = *(unsigned int *)((char *)v13 + 2);
  if (*(_DWORD *)((char *)v13 + 2))
  {
    JSC::MacroAssemblerARM64::or64((uint64_t)a2, (JSC::ARM64LogicalImmediate *)v38, v12, *((char *)this + 20));
    return;
  }
  v39 = *((char *)this + 20);
  v40 = *((unsigned __int8 *)this + 20);
  if (v40 != v12)
  {
    if (v12 == 63)
    {
      if (v40 != 31)
      {
        v41 = v40 & 0x1F | 0xD2800000;
        goto LABEL_22;
      }
    }
    else if (v12 != 31 && v39 != 31)
    {
      v41 = v40 & 0xFFE0FFFF | ((v12 & 0x1F) << 16) | 0xAA0003E0;
LABEL_22:
      v44 = *((_DWORD *)a2 + 50);
      v43 = (unsigned int *)((char *)a2 + 200);
      v42 = v44;
      if (v44 + 4 > *(v43 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v43 - 36), v38, v14, v15, v16, v17, v18, v19);
        v42 = *v43;
      }
      *(_DWORD *)(*((_QWORD *)v43 - 18) + v42) = v41;
      *v43 += 4;
      return;
    }
    v41 = v39 | (32 * v12) | 0x91000000;
    goto LABEL_22;
  }
}

void JSC::JITBitXorGenerator::generateFastPath(JSC::JITBitXorGenerator *this, JSC::CCallHelpers *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int *v19;
  int *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  char v44;
  char *v45;
  char v46;
  JSC::JITBitXorGenerator *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t *v56;
  int v57;
  uint64_t v58;
  JSC::AssemblerBuffer *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;

  *((_BYTE *)this + 24) = 1;
  v10 = *((unsigned __int8 *)this + 1);
  if (v10 == 1)
  {
    v45 = (char *)this + 22;
    goto LABEL_19;
  }
  if (*((_BYTE *)this + 11) == 1)
  {
    v45 = (char *)this + 21;
LABEL_19:
    v46 = *v45;
    if (v10 == 1)
      v47 = this;
    else
      v47 = (JSC::JITBitXorGenerator *)((char *)this + 10);
    JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 3, *v45, 27, a5, a6, a7, a8, (uint64_t)&v69);
    v53 = v69;
    if (v69 != -1)
    {
      v54 = *((unsigned int *)this + 21);
      if ((_DWORD)v54 == *((_DWORD *)this + 20))
      {
        v55 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, (void *)(v54 + 1), (unint64_t)&v69, v48, v49, v50, v51, v52);
        v57 = *v55;
        v56 = (uint64_t *)(v55 + 1);
        v53 = v57;
        v58 = *((_QWORD *)this + 9) + 12 * *((unsigned int *)this + 21);
      }
      else
      {
        v56 = &v70;
        v58 = *((_QWORD *)this + 9) + 12 * v54;
      }
      *(_DWORD *)v58 = v53;
      *(_QWORD *)(v58 + 4) = *v56;
      ++*((_DWORD *)this + 21);
    }
    JSC::MacroAssemblerARM64::xor32((uint64_t)a2, (JSC::ARM64LogicalImmediate *)*(unsigned int *)((char *)v47 + 2), v46, *((char *)this + 20), v49, v50, v51, v52);
    v44 = *((_BYTE *)this + 20);
    v43 = *((_DWORD *)a2 + 50);
    if (v43 + 4 <= *((_DWORD *)a2 + 48))
      goto LABEL_17;
    v59 = (JSC::CCallHelpers *)((char *)a2 + 56);
    goto LABEL_30;
  }
  if ((*(_BYTE *)this & 0x7E) != 0x20 || (*((_BYTE *)this + 10) & 0x7E) != 0x20)
  {
    v11 = (uint64_t *)((char *)this + 72);
    JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 3, *((char *)this + 21), 27, a5, a6, a7, a8, (uint64_t)&v67);
    v17 = v67;
    if (v67 != -1)
    {
      v18 = *((unsigned int *)this + 21);
      if ((_DWORD)v18 == *((_DWORD *)this + 20))
      {
        v19 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, (void *)(v18 + 1), (unint64_t)&v67, v12, v13, v14, v15, v16);
        v21 = *v19;
        v20 = v19 + 1;
        v17 = v21;
        LODWORD(v18) = *((_DWORD *)this + 21);
        v22 = *((_QWORD *)this + 9);
      }
      else
      {
        v20 = &v68;
        v22 = *v11;
      }
      v23 = v22 + 12 * v18;
      *(_DWORD *)v23 = v17;
      *(_QWORD *)(v23 + 4) = *(_QWORD *)v20;
      ++*((_DWORD *)this + 21);
    }
    JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 3, *((char *)this + 22), 27, v13, v14, v15, v16, (uint64_t)&v65);
    v31 = v65;
    if (v65 != -1)
    {
      v32 = *((unsigned int *)this + 21);
      if ((_DWORD)v32 == *((_DWORD *)this + 20))
      {
        v33 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, (void *)(v32 + 1), (unint64_t)&v65, v26, v27, v28, v29, v30);
        v35 = *v33;
        v34 = (uint64_t *)(v33 + 1);
        v31 = v35;
        LODWORD(v32) = *((_DWORD *)this + 21);
        v36 = *((_QWORD *)this + 9);
      }
      else
      {
        v34 = &v66;
        v36 = *v11;
      }
      v37 = v36 + 12 * v32;
      *(_DWORD *)v37 = v31;
      *(_QWORD *)(v37 + 4) = *v34;
      ++*((_DWORD *)this + 21);
    }
    v38 = *((_BYTE *)this + 22);
    v39 = *((_BYTE *)this + 21);
    v40 = *((_BYTE *)this + 20);
    v41 = *((_DWORD *)a2 + 50);
    if (v41 + 4 > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v24, v25, v26, v27, v28, v29, v30);
      v41 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v41) = (unsigned __int16)(32 * (v38 & 0x1F)) | ((v39 & 0x1F) << 16) | v40 & 0x1F | 0x4A000000;
    v42 = *((_DWORD *)a2 + 50);
    v43 = v42 + 4;
    *((_DWORD *)a2 + 50) = v42 + 4;
    v44 = *((_BYTE *)this + 20);
    if ((v42 + 8) <= *((_DWORD *)a2 + 48))
      goto LABEL_17;
    v59 = (JSC::CCallHelpers *)((char *)a2 + 56);
LABEL_30:
    JSC::AssemblerBuffer::outOfLineGrow(v59, v24, v25, v26, v27, v28, v29, v30);
    v43 = *((_DWORD *)a2 + 50);
LABEL_17:
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v43) = v44 & 0x1F | (32 * (v44 & 0x1F)) | 0xAA1B0000;
    *((_DWORD *)a2 + 50) += 4;
    return;
  }
  JSC::MacroAssemblerARM64::xor32(a2, *((char *)this + 21), *((char *)this + 22), *((char *)this + 20), a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::and32((uint64_t)a2, (JSC::ARM64LogicalImmediate *)1, *((_BYTE *)this + 20), *((char *)this + 20));
  JSC::MacroAssemblerARM64::or64(a2, 27, *((char *)this + 20), v60, v61, v62, v63, v64);
}

void JSC::JIT::compileCallDirectEval<JSC::OpCallDirectEval>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(JSC::CallFrame *, const WTF::StringImpl *, void *, int8x16_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int8x8_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;

  v10 = *(_DWORD *)(a1 + 200);
  if (v10 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v10 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v10) = -788511776;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 29, 0, a4, a5, a6, a7, a8);
  JSC::JIT::resetSP((JSC::JIT *)a1, v11, v12, v13, v14, v15, v16, v17);
  v23 = *(unsigned int *)(a2 + 16);
  if ((int)v23 < 0x40000000)
  {
    v24 = (v23 << 35) | 0x1D;
LABEL_5:
    JSC::MacroAssemblerARM64::load64(a1, v24, 2, v18, v19, v20, v21, v22);
    goto LABEL_6;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), *(_DWORD *)(a2 + 16)))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 2, v60, v61, v62, v63, v64);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000002, 2, v72, v73, v74, v75, v76);
    v24 = (v23 << 35) | 2;
    goto LABEL_5;
  }
  v65 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v65 <= (v23 - 0x40000000))
    goto LABEL_24;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v65[2 * (v23 - 0x40000000) + 2], 2, v60, v61, v62, v63, v64);
LABEL_6:
  v30 = *(unsigned int *)(a2 + 20);
  if ((int)v30 < 0x40000000)
  {
    v31 = (v30 << 35) | 0x1D;
LABEL_8:
    JSC::MacroAssemblerARM64::load64(a1, v31, 1, v25, v26, v27, v28, v29);
    goto LABEL_9;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), *(_DWORD *)(a2 + 20)))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v66, v67, v68, v69, v70);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v77, v78, v79, v80, v81);
    v31 = (v30 << 35) | 1;
    goto LABEL_8;
  }
  v71 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v71 <= (v30 - 0x40000000))
  {
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x19872B5BCLL);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v71[2 * (v30 - 0x40000000) + 2], 1, v66, v67, v68, v69, v70);
LABEL_9:
  if (*(_BYTE *)(a2 + 24))
    v37 = operationCallDirectEvalSloppy;
  else
    v37 = operationCallDirectEvalStrict;
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(void *,JSC::JSScope *,long long),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>(&v84, a1, (uint64_t)v37, v32, v33, v34, v35, v36);
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, 0, 0xFFFFFFFFLL, v38, v39, v40, v41, (uint64_t)&v82, v42);
  v50 = v83;
  v51 = *(_DWORD *)(a1 + 640);
  v84 = v82;
  v85 = v83;
  v86 = v51;
  v52 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v52 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v84);
  }
  else
  {
    v53 = *(_QWORD *)(a1 + 648) + 16 * v52;
    *(_DWORD *)v53 = v82;
    *(_QWORD *)(v53 + 4) = v50;
    *(_DWORD *)(v53 + 12) = v51;
    ++*(_DWORD *)(a1 + 660);
  }
  JSC::JIT::setFastPathResumePoint((JSC::JIT *)a1, v43, v44, v45, v46, v47, v48, v49);
  JSC::JIT::emitPutCallResult<JSC::OpCallDirectEval>(a1, (unsigned int *)a2, v54, v55, v56, v57, v58, v59);
}

void JSC::JIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(void *,JSC::JSScope *,long long),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x8_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45[3];

  v11 = -1207811152;
  v12 = *(unsigned int *)(a2 + 640);
  if (v12 >= 4)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      return;
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)(v12 >> 2), a2 + 264, a4, a5, a6, a7, a8);
  }
  else
  {
    v11 = -1207811137;
  }
  v13 = *(_DWORD *)(a2 + 200);
  if (v13 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = v11;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::JIT::appendCall(a2, a3, a3, a4, a5, a6, a7, a8, a1);
  JSC::MacroAssemblerARM64::branchTest64(a2, 1, 1, 0xFFFFFFFFLL, v14, v15, v16, v17, (uint64_t)v45, v18);
  v24 = *(_QWORD *)(*(_QWORD *)(a2 + 352) + 90440);
  v25 = *(_QWORD *)(v24 + 8);
  v26 = *(unsigned int **)(v24 + 16);
  if (v26)
  {
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 + 1, v26));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v45, v25, a2, v19, v20, v21, v22, v23);
    do
    {
      v35 = __ldaxr(v26);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v26));
    if (!v36)
    {
      atomic_store(1u, v26);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v26, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v45, v25, a2, v19, v20, v21, v22, v23);
  }
}

uint64_t *JSC::JIT::setFastPathResumePoint(JSC::JIT *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  JSC::AssemblerBuffer *v10;
  JSC::AssemblerBuffer *v11;
  JSC::JIT *v12;
  int v13;
  _BYTE v14[24];

  v8 = *((_DWORD *)this + 50);
  v13 = v8;
  if (v8 < *((_DWORD *)this + 13))
  {
    v10 = (JSC::JIT *)((char *)this + 56);
    do
    {
      if ((v8 + 4) > *((_DWORD *)this + 48))
      {
        v11 = v10;
        v12 = this;
        JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
        v10 = v11;
        this = v12;
        v8 = *((_DWORD *)v12 + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v8) = -721215457;
      v8 = *((_DWORD *)this + 50) + 4;
      *((_DWORD *)this + 50) = v8;
    }
    while (v8 < *((_DWORD *)this + 13));
    v13 = v8;
  }
  *((_DWORD *)this + 52) = 0;
  return WTF::HashMap<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::add<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>((uint64_t *)this + 51, (int *)this + 160, &v13, (uint64_t)v14);
}

void JSC::JIT::emitPutCallResult<JSC::OpCallDirectEval>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_BYTE *)(a1 + 793))
    JSC::MacroAssemblerARM64::store64(a1, 0, ((unint64_t)~a2[7] << 36) | 0x19, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::store64(a1, 0, ((unint64_t)*a2 << 35) | 0x1D, a4, a5, a6, a7, a8);
}

void JSC::JIT::compileCallDirectEvalSlowCase(uint64_t *a1, unsigned __int8 *a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int8x8_t v36;
  int v37;
  int v38;

  JSC::JIT::linkAllSlowCases((uint64_t)a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpCallDirectEval>(a2, &v36);
  JSC::MacroAssemblerARM64::add64((uint64_t)a1, (16 - 8 * v37), 29, 31, v10, v11, v12, v13);
  JSC::MacroAssemblerARM64::load64((uint64_t)a1, 0x80000001FLL, 0, v14, v15, v16, v17, v18);
  v23 = *(_QWORD *)(a1[100] + 136);
  if (*(_WORD *)v23)
    v24 = *(unsigned __int16 *)(v23 + 20);
  else
    v24 = *(_DWORD *)(v23 + 136);
  JSC::MacroAssemblerARM64::add64((uint64_t)a1, ((v24 + 7) & 0xFFFFFFF8) + 80 * v38, 25, 2, v19, v20, v21, v22);
  JSC::AssemblyHelpers::emitVirtualCallWithoutMovingGlobalObject((uint64_t)a1, a1[44], 2, 0, v25, v26, v27, v28);
  JSC::JIT::resetSP((JSC::JIT *)a1, v29, v30, v31, v32, v33, v34, v35);
}

void JSC::JIT::compileOpCall<JSC::OpCallDirectEval>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int8x8_t v42;
  unsigned int v43;
  int v44;

  JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpCallDirectEval>(a2, &v42);
  v3 = v42.u32[1];
  JSC::JIT::compileSetupFrame<JSC::OpCallDirectEval>(a1, v43, v44, v4, v5, v6, v7, v8);
  JSC::MacroAssemblerARM64::store32(a1, *(_DWORD *)(a1 + 640) >> 2, 0x240000001DLL, v9, v10, v11, v12, v13);
  if ((int)v3 < 0x40000000)
  {
    v19 = (v3 << 35) | 0x1D;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v19, 0, v14, v15, v16, v17, v18);
LABEL_4:
    JSC::MacroAssemblerARM64::store64(a1, 0, 0x80000001FLL, v20, v21, v22, v23, v24);
    JSC::JIT::compileCallDirectEval<JSC::OpCallDirectEval>(a1, (uint64_t)&v42, v25, v26, v27, v28, v29, v30);
    return;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v3))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v31, v32, v33, v34, v35);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v37, v38, v39, v40, v41);
    v19 = v3 << 35;
    goto LABEL_3;
  }
  v36 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v36 > (v3 - 0x40000000))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v36[2 * (v3 - 0x40000000) + 2], 0, v31, v32, v33, v34, v35);
    goto LABEL_4;
  }
  __break(0xC471u);
}

void JSC::JIT::compileOpCall<JSC::OpConstructVarargs>(uint64_t a1, JSC::OpConstructVarargs *this, int8x8_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[2];
  unsigned int v76[8];

  JSC::OpConstructVarargs::decode((int *)this, (uint64_t)v76, a3);
  v4 = v76[1];
  v11 = (unsigned __int8 *)WTF::SegmentedVector<JSC::BaselineUnlinkedCallLinkInfo,8ul>::alloc<>(a1 + 864);
  *(_DWORD *)v11 = *(_DWORD *)(a1 + 640);
  v12 = *(unsigned int *)(a1 + 620);
  v75[1] = 0;
  v75[0] = 0xFFFFFFFFLL;
  if ((_DWORD)v12 == *(_DWORD *)(a1 + 616))
  {
    WTF::Vector<JSC::CallCompilationInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::CallCompilationInfo>(a1 + 608, (unint64_t)v75);
    v14 = *(_DWORD *)(a1 + 620);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 608) + 16 * v12;
    *(_DWORD *)v13 = -1;
    v14 = v12 + 1;
    *(_QWORD *)(v13 + 8) = 0;
    *(_DWORD *)(a1 + 620) = v12 + 1;
  }
  if (v14 <= v12)
  {
    __break(0xC471u);
    JUMPOUT(0x19872BC58);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 608) + 16 * v12 + 8) = v11;
  JSC::JIT::compileSetupFrame<JSC::OpConstructVarargs>(a1, v76, v5, v6, v7, v8, v9, v10);
  JSC::MacroAssemblerARM64::store32(a1, *(_DWORD *)(a1 + 640) >> 2, 0x240000001DLL, v15, v16, v17, v18, v19);
  if ((int)v4 < 0x40000000)
  {
    v25 = (v4 << 35) | 0x1D;
LABEL_6:
    JSC::MacroAssemblerARM64::load64(a1, v25, 0, v20, v21, v22, v23, v24);
    goto LABEL_7;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v4))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v64, v65, v66, v67, v68);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v70, v71, v72, v73, v74);
    v25 = v4 << 35;
    goto LABEL_6;
  }
  v69 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v69 <= (v4 - 0x40000000))
    goto LABEL_19;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v69[2 * (v4 - 0x40000000) + 2], 0, v64, v65, v66, v67, v68);
LABEL_7:
  JSC::MacroAssemblerARM64::store64(a1, 0, 0x80000001FLL, v26, v27, v28, v29, v30);
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v35)
    v36 = *(unsigned __int16 *)(v35 + 6);
  else
    v36 = *(_DWORD *)(v35 + 108);
  JSC::MacroAssemblerARM64::add64(a1, ((v36 + 7) & 0xFFFFFFF8) + 80 * v76[7], 25, 2, v31, v32, v33, v34);
  JSC::CallLinkInfo::emitFastPath(a1, v11, 1);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a1, v37, v38, v39, v40, v41, v42, v43, (int *)v75);
  if (*(_DWORD *)(a1 + 620) <= v12)
  {
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x19872BC50);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 608) + 16 * v12) = v75[0];
  JSC::JIT::setFastPathResumePoint((JSC::JIT *)a1, v44, v45, v46, v47, v48, v49, v50);
  JSC::JIT::resetSP((JSC::JIT *)a1, v51, v52, v53, v54, v55, v56, v57);
  JSC::JIT::emitPutCallResult<JSC::OpConstructVarargs>(a1, v76, v58, v59, v60, v61, v62, v63);
}

void JSC::JIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *),JSC::ARM64Registers::RegisterID>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44[3];

  v10 = -1207811152;
  v11 = *(unsigned int *)(a2 + 640);
  if (v11 >= 4)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      return;
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)(v11 >> 2), a2 + 264, a4, a5, a6, a7, a8);
  }
  else
  {
    v10 = -1207811137;
  }
  v12 = *(_DWORD *)(a2 + 200);
  if (v12 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v12) = v10;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::JIT::appendCall(a2, (uint64_t)operationThrowIteratorResultIsNotObject, a3, a4, a5, a6, a7, a8, a1);
  JSC::MacroAssemblerARM64::branchTest64(a2, 1, 0, 0xFFFFFFFFLL, v13, v14, v15, v16, (uint64_t)v44, v17);
  v23 = *(_QWORD *)(*(_QWORD *)(a2 + 352) + 90440);
  v24 = *(_QWORD *)(v23 + 8);
  v25 = *(unsigned int **)(v23 + 16);
  if (v25)
  {
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v44, v24, a2, v18, v19, v20, v21, v22);
    do
    {
      v34 = __ldaxr(v25);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v25));
    if (!v35)
    {
      atomic_store(1u, v25);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v25, v27, v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v44, v24, a2, v18, v19, v20, v21, v22);
  }
}

void JSC::JITCode::dfgCommon(JSC::JITCode *this)
{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

void JSC::JITCode::dfg(JSC::JITCode *this)
{
  __break(0xC471u);
}

void JSC::JITCode::ftl(JSC::JITCode *this)
{
  __break(0xC471u);
}

void JSC::JITCode::ftlForOSREntry(JSC::JITCode *this)
{
  __break(0xC471u);
}

uint64_t *JSC::JITCode::calleeSaveRegisters(JSC::JITCode *this)
{
  int v1;
  unint64_t v2;
  unint64_t v4;
  char v5;
  char **v6;
  char *v7;

  v1 = *((unsigned __int8 *)this + 12);
  if (v1 == 5)
    return (uint64_t *)((char *)this + 256);
  if (v1 == 4)
  {
    v4 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
    if (v4 != -1)
    {
      v7 = &v5;
      v6 = &v7;
      std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
    }
    return &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
  }
  else
  {
    v2 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
    if (v2 != -1)
    {
      v7 = &v5;
      v6 = &v7;
      std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
    }
    return &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
  }
}

void JSC::JITCode::swapCodeRefForDebugger(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WTF::dataLog<char [24],WTF::PointerDump<JSC::ExecutableMemoryHandle>,char [2]>(const char *a1, _QWORD *a2, const char *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  WTF::PrintStream *v10;
  char v12;
  char **v13;
  char *v14;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", a1);
  if (*a2)
  {
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v9, "%p");
  }
  else
  {
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v10, "%s");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  WTF::PrintStream::printf(v8, "%s", a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t JSC::JITCodeWithCodeRef::executableAddressAtOffset(JSC::JITCodeWithCodeRef *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    if (a2)
      return v2 + a2;
    else
      return *((_QWORD *)this + 2);
  }
  else
  {
    result = 172;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::JITCodeWithCodeRef::dataAddressAtOffset(JSC::JITCodeWithCodeRef *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    return v2 + a2;
  result = 183;
  __break(0xC471u);
  return result;
}

uint64_t JSC::JITCodeWithCodeRef::offsetOf(JSC::JITCodeWithCodeRef *this, void *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    return ((_DWORD)a2 - v2);
  result = 190;
  __break(0xC471u);
  return result;
}

uint64_t JSC::JITCodeWithCodeRef::size(JSC::JITCodeWithCodeRef *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (unsigned int *)*((_QWORD *)this + 3);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = v8[1];
    do
    {
      v11 = __ldaxr(v8);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v8));
    if (!v12)
    {
      atomic_store(1u, v8);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  else
  {
    return 0;
  }
  return v10;
}

uint64_t JSC::JITCodeWithCodeRef::contains(JSC::JITCodeWithCodeRef *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    v4 = *(unsigned int *)(v2 + 4) + v3;
    return v3 <= a2 && v4 > a2;
  }
  else
  {
    result = 205;
    __break(0xC471u);
  }
  return result;
}

void JSC::JITCodeWithCodeRef::swapCodeRefForDebugger(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x19872C224);
  }
  v10 = *a2;
  if (!*a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19872C244);
  }
  *a9 = v9;
  a9[1] = 0;
  *(_QWORD *)(a1 + 16) = v10;
  v11 = (unsigned int *)a2[1];
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v11;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v13, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }
}

void JSC::DirectJITCode::~DirectJITCode(JSC::DirectJITCode *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)this = off_1E35959D8;
  if (!HIBYTE(word_1ECF4C286))
  {
    v9 = *((unsigned __int8 *)this + 12);
    if (v9 == 3)
    {
      if (!(_BYTE)dword_1ECF4C28A)
        goto LABEL_8;
    }
    else if ((v9 & 0xFE) != 4 || BYTE1(dword_1ECF4C28A) == 0)
    {
      goto LABEL_8;
    }
  }
  if (*((_QWORD *)this + 3))
  {
    v22 = *((_QWORD *)this + 3);
    WTF::dataLog<char [24],WTF::PointerDump<JSC::ExecutableMemoryHandle>,char [2]>("Destroying JIT code at ", &v22, "\n");
  }
LABEL_8:
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
}

void JSC::DirectJITCode::~DirectJITCode(JSC::DirectJITCode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)this = off_1E35959D8;
  if (!HIBYTE(word_1ECF4C286))
  {
    v9 = *((unsigned __int8 *)this + 12);
    if (v9 == 3)
    {
      if (!(_BYTE)dword_1ECF4C28A)
        goto LABEL_8;
    }
    else if ((v9 & 0xFE) != 4 || BYTE1(dword_1ECF4C28A) == 0)
    {
      goto LABEL_8;
    }
  }
  if (*((_QWORD *)this + 3))
  {
    v22 = *((_QWORD *)this + 3);
    WTF::dataLog<char [24],WTF::PointerDump<JSC::ExecutableMemoryHandle>,char [2]>("Destroying JIT code at ", &v22, "\n");
  }
LABEL_8:
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::DirectJITCode::addressForCall(uint64_t a1, int a2)
{
  uint64_t result;

  if (a2)
  {
    if (a2 != 1 || (result = *(_QWORD *)(a1 + 32)) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19872C434);
    }
  }
  else
  {
    result = *(_QWORD *)(a1 + 16);
    if (!result)
    {
      __break(0xC471u);
      JUMPOUT(0x19872C454);
    }
  }
  return result;
}

void JSC::NativeJITCode::~NativeJITCode(JSC::NativeJITCode *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)this = off_1E35959D8;
  if (!HIBYTE(word_1ECF4C286))
  {
    v9 = *((unsigned __int8 *)this + 12);
    if (v9 == 3)
    {
      if (!(_BYTE)dword_1ECF4C28A)
        goto LABEL_8;
    }
    else if ((v9 & 0xFE) != 4 || BYTE1(dword_1ECF4C28A) == 0)
    {
      goto LABEL_8;
    }
  }
  if (*((_QWORD *)this + 3))
  {
    v22 = *((_QWORD *)this + 3);
    WTF::dataLog<char [24],WTF::PointerDump<JSC::ExecutableMemoryHandle>,char [2]>("Destroying JIT code at ", &v22, "\n");
  }
LABEL_8:
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
}

void JSC::NativeJITCode::~NativeJITCode(JSC::NativeJITCode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)this = off_1E35959D8;
  if (!HIBYTE(word_1ECF4C286))
  {
    v9 = *((unsigned __int8 *)this + 12);
    if (v9 == 3)
    {
      if (!(_BYTE)dword_1ECF4C28A)
        goto LABEL_8;
    }
    else if ((v9 & 0xFE) != 4 || BYTE1(dword_1ECF4C28A) == 0)
    {
      goto LABEL_8;
    }
  }
  if (*((_QWORD *)this + 3))
  {
    v22 = *((_QWORD *)this + 3);
    WTF::dataLog<char [24],WTF::PointerDump<JSC::ExecutableMemoryHandle>,char [2]>("Destroying JIT code at ", &v22, "\n");
  }
LABEL_8:
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::NativeJITCode::addressForCall(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (!result)
  {
    result = 284;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::JITCode::liveRegistersToPreserveAtExceptionHandlingCallSite()
{
  return 0;
}

uint64_t JSC::JITCode::pcToCodeOriginMap(JSC::JITCode *this)
{
  return 0;
}

uint64_t JSC::NativeJITCode::canSwapCodeRefForDebugger(JSC::NativeJITCode *this)
{
  return 1;
}

uint64_t JSC::NativeDOMJITCode::signature(JSC::NativeDOMJITCode *this)
{
  return *((_QWORD *)this + 4);
}

void JSC::NativeDOMJITCode::~NativeDOMJITCode(JSC::NativeDOMJITCode *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)this = off_1E35959D8;
  if (!HIBYTE(word_1ECF4C286))
  {
    v9 = *((unsigned __int8 *)this + 12);
    if (v9 == 3)
    {
      if (!(_BYTE)dword_1ECF4C28A)
        goto LABEL_8;
    }
    else if ((v9 & 0xFE) != 4 || BYTE1(dword_1ECF4C28A) == 0)
    {
      goto LABEL_8;
    }
  }
  if (*((_QWORD *)this + 3))
  {
    v22 = *((_QWORD *)this + 3);
    WTF::dataLog<char [24],WTF::PointerDump<JSC::ExecutableMemoryHandle>,char [2]>("Destroying JIT code at ", &v22, "\n");
  }
LABEL_8:
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
}

void JSC::NativeDOMJITCode::~NativeDOMJITCode(JSC::NativeDOMJITCode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)this = off_1E35959D8;
  if (!HIBYTE(word_1ECF4C286))
  {
    v9 = *((unsigned __int8 *)this + 12);
    if (v9 == 3)
    {
      if (!(_BYTE)dword_1ECF4C28A)
        goto LABEL_8;
    }
    else if ((v9 & 0xFE) != 4 || BYTE1(dword_1ECF4C28A) == 0)
    {
      goto LABEL_8;
    }
  }
  if (*((_QWORD *)this + 3))
  {
    v22 = *((_QWORD *)this + 3);
    WTF::dataLog<char [24],WTF::PointerDump<JSC::ExecutableMemoryHandle>,char [2]>("Destroying JIT code at ", &v22, "\n");
  }
LABEL_8:
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12);
  *(_DWORD *)v4 = *(_DWORD *)v3;
  *(_QWORD *)(v4 + 4) = *(_QWORD *)(v3 + 4);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(v3 + 12);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = v5;
      do
      {
        *(_DWORD *)v11 = *(_DWORD *)v19;
        *(_QWORD *)(v11 + 4) = *(_QWORD *)(v19 + 4);
        *(_DWORD *)(v11 + 12) = *(_DWORD *)(v19 + 12);
        v19 += 16;
        v11 += 16;
      }
      while (v19 != v5 + 16 * v10);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 28))
  {
    v6 = result;
    v7 = *(_QWORD *)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v17 = v7;
      do
      {
        *(_DWORD *)v9 = *(_DWORD *)v17;
        *(_QWORD *)(v9 + 4) = *(_QWORD *)(v17 + 4);
        *(_DWORD *)(v9 + 12) = *(_DWORD *)(v17 + 12);
        v17 += 16;
        v9 += 16;
      }
      while (v17 != v7 + 16 * v8);
    }
    if (v7)
    {
      if (*(_QWORD *)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::JIT::linkSlowCase(uint64_t result, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  char v14;
  __int16 v15;
  char v16;
  __int16 v17;
  int v18;
  char v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  char v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  v9 = (uint64_t)*a2;
  v10 = **a2;
  if ((_DWORD)v10 != -1)
  {
    v11 = result;
    *(_DWORD *)(result + 208) = 0;
    v12 = *(unsigned __int8 *)(v9 + 8);
    switch(*(_BYTE *)(v9 + 8))
    {
      case 0x83:
      case 0x87:
        v13 = *(_DWORD *)(result + 200);
        if (v13 < *(_DWORD *)(result + 52))
        {
          do
          {
            if ((v13 + 4) > *(_DWORD *)(v11 + 192))
            {
              v28 = v9;
              v31 = v10;
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
              v9 = v28;
              v10 = v31;
              v13 = *(_DWORD *)(v11 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v11 + 56) + v13) = -721215457;
            v13 = *(_DWORD *)(v11 + 200) + 4;
            *(_DWORD *)(v11 + 200) = v13;
          }
          while (v13 < *(_DWORD *)(v11 + 52));
          v12 = *(unsigned __int8 *)(v9 + 8);
        }
        result = v11 + 32;
        v14 = *(_BYTE *)(v9 + 9);
        v15 = *(unsigned __int8 *)(v9 + 10);
        v16 = *(_BYTE *)(v9 + 11);
        *(_QWORD *)&v34 = v10;
        *((_QWORD *)&v34 + 1) = v13;
        BYTE3(v35) = v14 & 0xF;
        *(_WORD *)((char *)&v35 + 1) = v12;
        v17 = v15 << 6;
        goto LABEL_7;
      case 0x84:
      case 0x88:
        v18 = *(_DWORD *)(result + 200);
        if (v18 < *(_DWORD *)(result + 52))
        {
          do
          {
            if ((v18 + 4) > *(_DWORD *)(v11 + 192))
            {
              v29 = v9;
              v32 = v10;
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
              v9 = v29;
              v10 = v32;
              v18 = *(_DWORD *)(v11 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v11 + 56) + v18) = -721215457;
            v18 = *(_DWORD *)(v11 + 200) + 4;
            *(_DWORD *)(v11 + 200) = v18;
          }
          while (v18 < *(_DWORD *)(v11 + 52));
          v12 = *(unsigned __int8 *)(v9 + 8);
        }
        result = v11 + 32;
        v19 = *(_BYTE *)(v9 + 9);
        v20 = *(_WORD *)(v9 + 4);
        v16 = *(_BYTE *)(v9 + 11);
        *(_QWORD *)&v34 = v10;
        *((_QWORD *)&v34 + 1) = v18;
        BYTE3(v35) = v19 & 0xF;
        *(_WORD *)((char *)&v35 + 1) = v12;
        v17 = v20 & 0x3F;
LABEL_7:
        WORD2(v35) = v17;
        LOBYTE(v35) = v16;
        v21 = *(unsigned int *)(v11 + 44);
        if ((_DWORD)v21 != *(_DWORD *)(v11 + 40))
          goto LABEL_8;
        goto LABEL_13;
      default:
        v25 = *(_DWORD *)(result + 200);
        if (v25 < *(_DWORD *)(result + 52))
        {
          do
          {
            if ((v25 + 4) > *(_DWORD *)(v11 + 192))
            {
              v30 = v9;
              v33 = v10;
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
              v9 = v30;
              v10 = v33;
              v25 = *(_DWORD *)(v11 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v11 + 56) + v25) = -721215457;
            v25 = *(_DWORD *)(v11 + 200) + 4;
            *(_DWORD *)(v11 + 200) = v25;
          }
          while (v25 < *(_DWORD *)(v11 + 52));
          v12 = *(unsigned __int8 *)(v9 + 8);
        }
        result = v11 + 32;
        v26 = *(_BYTE *)(v9 + 9);
        LOBYTE(v35) = -1;
        *(_QWORD *)&v34 = v10;
        *((_QWORD *)&v34 + 1) = v25;
        BYTE3(v35) = v26 & 0xF;
        *(_WORD *)((char *)&v35 + 1) = v12;
        WORD2(v35) = 0;
        v21 = *(unsigned int *)(v11 + 44);
        if ((_DWORD)v21 == *(_DWORD *)(v11 + 40))
        {
LABEL_13:
          result = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v21 + 1, (unint64_t)&v34, a4, a5, a6, a7, a8);
          v22 = *(_QWORD *)(v11 + 32) + 24 * *(unsigned int *)(v11 + 44);
          *(_QWORD *)v22 = 0;
          *(_QWORD *)(v22 + 8) = 0;
          *(_BYTE *)(v22 + 16) = -1;
          v27 = (*(unsigned __int8 *)(v22 + 19) << 16) | 0xF0000;
          *(_WORD *)(v22 + 17) = 65;
          *(_BYTE *)(v22 + 19) = BYTE2(v27);
          *(_WORD *)(v22 + 20) &= 0xFC00u;
          v23 = *(_OWORD *)result;
          v24 = *(_QWORD *)(result + 16);
        }
        else
        {
LABEL_8:
          v22 = *(_QWORD *)result + 24 * v21;
          v23 = v34;
          v24 = v35;
        }
        *(_QWORD *)(v22 + 16) = v24;
        *(_OWORD *)v22 = v23;
        ++*(_DWORD *)(v11 + 44);
        break;
    }
  }
  *a2 += 4;
  return result;
}

uint64_t WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JumpTable>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12);
  *(_DWORD *)v4 = *(_DWORD *)v3;
  *(_QWORD *)(v4 + 4) = *(_QWORD *)(v3 + 4);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(v3 + 12);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = v5;
      do
      {
        *(_DWORD *)v11 = *(_DWORD *)v19;
        *(_QWORD *)(v11 + 4) = *(_QWORD *)(v19 + 4);
        *(_DWORD *)(v11 + 12) = *(_DWORD *)(v19 + 12);
        v19 += 16;
        v11 += 16;
      }
      while (v19 != v5 + 16 * v10);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 28))
  {
    v6 = result;
    v7 = *(_QWORD *)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v17 = v7;
      do
      {
        *(_DWORD *)v9 = *(_DWORD *)v17;
        *(_QWORD *)(v9 + 4) = *(_QWORD *)(v17 + 4);
        *(_DWORD *)(v9 + 12) = *(_DWORD *)(v17 + 12);
        v17 += 16;
        v9 += 16;
      }
      while (v17 != v7 + 16 * v8);
    }
    if (v7)
    {
      if (*(_QWORD *)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WTF::HashMap<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::add<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>@<X0>(uint64_t *result@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int *v15;
  int v16;
  int *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (int *)(v8 + 8 * v14);
  v16 = *v15;
  if (*v15 != -1)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v21 = 0;
        else
          v21 = *(unsigned int *)(v8 - 4);
        v27 = 0;
        v28 = v8 + 8 * v21;
        goto LABEL_32;
      }
      if (v16 == -2)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (int *)(v8 + 8 * v14);
      v16 = *v15;
      ++v18;
    }
    while (*v15 != -1);
    if (v17)
    {
      *(_QWORD *)v17 = -1;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v15 = v17;
    }
  }
  *v15 = v11;
  v15[1] = *a3;
  v19 = *v6;
  if (*v6)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v22 = *v6;
  if (*v6)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
      goto LABEL_23;
  }
  else if (3 * v25 <= 4 * v24)
  {
    if (!(_DWORD)v25)
    {
      v26 = 8;
LABEL_28:
      result = (uint64_t *)WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::rehash(v6, v26, v15);
      v15 = (int *)result;
      v22 = *v6;
      if (*v6)
        v25 = *(unsigned int *)(v22 - 4);
      else
        v25 = 0;
      goto LABEL_31;
    }
LABEL_23:
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
    goto LABEL_28;
  }
LABEL_31:
  v28 = v22 + 8 * v25;
  v27 = 1;
LABEL_32:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v28;
  *(_BYTE *)(a4 + 16) = v27;
  return result;
}

_DWORD *WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(8 * a2 + 16));
  v17 = v9;
  v18 = v9 + 16;
  if (a2)
    memset((void *)(v9 + 16), 255, 8 * a2);
  *a1 = v18;
  *(_DWORD *)(v17 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (int *)(v6 + 8 * v19);
      v22 = *v21;
      if (*v21 <= 0xFFFFFFFD)
      {
        v23 = *a1;
        if (*a1)
          v24 = *(_DWORD *)(v23 - 8);
        else
          v24 = 0;
        v25 = 0;
        v26 = 9 * ((v22 + ~(v22 << 15)) ^ ((v22 + ~(v22 << 15)) >> 10));
        v27 = ((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) ^ (((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) >> 16);
        do
        {
          v28 = v27 & v24;
          v27 = ++v25 + v28;
        }
        while (*(_DWORD *)(v23 + 8 * v28) != -1);
        v29 = (_DWORD *)(v23 + 8 * v28);
        *v29 = v22;
        v29[1] = *(_DWORD *)(v6 + 8 * v19 + 4);
        if (v21 == a3)
          v20 = v29;
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

void WTF::RefCounted<JSC::Profiler::Compilation>::deref(JSC::Profiler::Compilation *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_DWORD *)a1 == 1)
  {
    JSC::Profiler::Compilation::~Compilation(a1, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  else
  {
    --*(_DWORD *)a1;
  }
}

uint64_t WTF::Vector<JSC::JITConstant<JSC::JITConstantPool::Type>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::JITConstant<JSC::JITConstantPool::Type>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 8 * v10;
      v20 = (_QWORD *)v11;
      v21 = (uint64_t *)v5;
      do
      {
        v22 = *v21++;
        *v20++ = v22;
        v19 -= 8;
      }
      while (v19);
    }
    if (v5)
    {
      if (v11 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::JITConstant<JSC::JITConstantPool::Type>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = 8 * v8;
        v18 = (_QWORD *)v9;
        v19 = (uint64_t *)v7;
        do
        {
          v20 = *v19++;
          *v18++ = v20;
          v17 -= 8;
        }
        while (v17);
      }
      if (v7)
      {
        if (v9 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

_QWORD *JSC::JIT::appendCall@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int *a9@<X8>)
{
  JSC::AssemblerBuffer *v12;
  unsigned int i;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  _QWORD *result;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _DWORD v26[2];
  uint64_t v27;

  v12 = (JSC::AssemblerBuffer *)(a1 + 56);
  for (i = *(_DWORD *)(a1 + 200); (signed int)i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if (i + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19872D80CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v14 = *(_BYTE *)(a1 + 272) & 0x1F;
  if (i + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    i = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = v14 | 0xD2800000;
  v15 = *(_DWORD *)(a1 + 200);
  v16 = v15 + 4;
  *(_DWORD *)(a1 + 200) = v15 + 4;
  if ((v15 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v16 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v16) = v14 | 0xF2A00000;
  v17 = *(_DWORD *)(a1 + 200);
  v18 = v17 + 4;
  *(_DWORD *)(a1 + 200) = v17 + 4;
  if ((v17 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v18 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = v14 | 0xF2C00000;
  v19 = *(_DWORD *)(a1 + 200);
  v20 = v19 + 4;
  *(_DWORD *)(a1 + 200) = v19 + 4;
  *(_DWORD *)(a1 + 208) = 0;
  if ((v19 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v20 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v20) = -700513792;
  v21 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v21; v21 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v21)
  {
    if ((v21 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
      v21 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v21) = -721215457;
    v21 = *(_DWORD *)(a1 + 200) + 4;
  }
  *a9 = v21;
  a9[1] = 1;
  result = (_QWORD *)(a1 + 368);
  v26[0] = v21;
  v26[1] = 1;
  v27 = a2;
  v23 = *(unsigned int *)(a1 + 380);
  if ((_DWORD)v23 == *(_DWORD *)(a1 + 376))
  {
    result = (_QWORD *)WTF::Vector<JSC::CallRecord<(WTF::PtrTag)64323>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v23 + 1, (unint64_t)v26);
    v24 = (_QWORD *)(*(_QWORD *)(a1 + 368) + 16 * *(unsigned int *)(a1 + 380));
    *v24 = *result;
    v24[1] = result[1];
  }
  else
  {
    v25 = *result + 16 * v23;
    *(_DWORD *)v25 = v21;
    *(_DWORD *)(v25 + 4) = 1;
    *(_QWORD *)(v25 + 8) = a2;
  }
  ++*(_DWORD *)(a1 + 380);
  return result;
}

unint64_t WTF::Vector<JSC::CallRecord<(WTF::PtrTag)64323>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = v5 + 16 * *(unsigned int *)(a1 + 12);
    if (v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v22 = *(_QWORD *)a1;
        return v22 + 16 * ((uint64_t)(v3 - v5) >> 4);
      }
      if (!(v10 >> 28))
      {
        v11 = WTF::fastMalloc((WTF *)(16 * v10));
        v19 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        do
        {
          v20 = (_QWORD *)(v11 + v19);
          v21 = v5 + v19;
          *v20 = *(_QWORD *)(v5 + v19);
          v20[1] = *(_QWORD *)(v5 + v19 + 8);
          v19 += 16;
        }
        while (v21 + 16 != v6);
        v22 = *(_QWORD *)a1;
        if (v5)
        {
          if (v22 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
          v22 = *(_QWORD *)a1;
        }
        return v22 + 16 * ((uint64_t)(v3 - v5) >> 4);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x19872DA30);
    }
  }
  v23 = *(unsigned int *)(a1 + 8);
  v24 = v23 + (v23 >> 2);
  if (v24 >= 0x10)
    v25 = v24 + 1;
  else
    v25 = 16;
  if (v25 <= a2)
    v26 = a2;
  else
    v26 = v25;
  if (v26 > v23)
  {
    if (v26 >> 28)
      goto LABEL_35;
    v27 = *(unsigned int *)(a1 + 12);
    v28 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v26));
    *(_DWORD *)(a1 + 8) = v26;
    *(_QWORD *)a1 = v28;
    if ((_DWORD)v27)
    {
      v36 = (_QWORD *)v5;
      do
      {
        *v28 = *v36;
        v28[1] = v36[1];
        v36 += 2;
        v28 += 2;
      }
      while (v36 != (_QWORD *)(v5 + 16 * v27));
    }
    if (v5)
    {
      if (*(_QWORD *)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v29, v30, v31, v32, v33, v34, v35);
    }
  }
  return v3;
}

uint64_t WTF::Detail::CallableWrapper<JSC::JIT::privateCompileMainPass(void)::$_0,void,JSC::Probe::Context &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v6;
  uint64_t v7;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 232);
  if ((_DWORD)v2 == 15)
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 90480);
  v4 = *(_QWORD *)(v3 + 16);
  v6 = *(const void **)(*(_QWORD *)a2 + 232);
  v7 = v4;
  return WTF::dataLog<char [6],unsigned int,char [3],WTF::ASCIILiteral,char [6],WTF::RawPointer,char [4],JSC::CodeBlock *,char [2]>((_DWORD *)(a1 + 24), (uint64_t)&(&JSC::opcodeNames)[2 * v2], &v6, &v7);
}

uint64_t WTF::dataLog<char [6],unsigned int,char [3],WTF::ASCIILiteral,char [6],WTF::RawPointer,char [4],JSC::CodeBlock *,char [2]>(_DWORD *a1, uint64_t a2, const void **a3, uint64_t *a4)
{
  unint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  char *v11;
  uint64_t v12;
  WTF::PrintStream *v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::PrintStream *v18;
  char v20;
  char **v21;
  char *v22;
  int v23;

  v8 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v8 != -1)
  {
    v22 = &v20;
    v21 = &v22;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v9 = WTF::s_file;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v10, "%s", "JIT [");
  WTF::PrintStream::printf(v10, "%u", *a1);
  WTF::PrintStream::printf(v10, "%s", "] ");
  v11 = *(char **)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
  if (v11)
  {
    v15 = v12 - 1;
    if (!v12)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(v11, v15, (uint64_t)&v22, v14);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v22 = (char *)v16;
    v23 = 0;
  }
  WTF::printExpectedCStringHelper(v13, "StringView", &v22);
  if (v23 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v21, &v22);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
  WTF::PrintStream::printf(v10, "%s", " cfr ");
  WTF::PrintStream::printf(v10, "%p", *a3);
  WTF::PrintStream::printf(v10, "%s", " @ ");
  v17 = *a4;
  v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
  if (v17)
    JSC::CodeBlock::dumpAssumingJITType(v17);
  else
    WTF::PrintStream::printf(v18, "%s", "<null codeBlock>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
  WTF::PrintStream::printf(v10, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
}

uint64_t WTF::Detail::CallableWrapper<JSC::JIT::privateCompileSlowCases(void)::$_0,void,JSC::Probe::Context &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const void *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 232) + 16);
  v4 = *(const void **)(*(_QWORD *)a2 + 232);
  v5 = v2;
  return WTF::dataLog<char [6],unsigned int,char [8],WTF::ASCIILiteral,char [6],WTF::RawPointer,char [4],JSC::CodeBlock *,char [2]>((_DWORD *)(a1 + 8), (uint64_t)&(&JSC::opcodeNames)[2 * *(unsigned int *)(a1 + 12)], &v4, &v5);
}

uint64_t WTF::dataLog<char [6],unsigned int,char [8],WTF::ASCIILiteral,char [6],WTF::RawPointer,char [4],JSC::CodeBlock *,char [2]>(_DWORD *a1, uint64_t a2, const void **a3, uint64_t *a4)
{
  unint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  char *v11;
  uint64_t v12;
  WTF::PrintStream *v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::PrintStream *v18;
  char v20;
  char **v21;
  char *v22;
  int v23;

  v8 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v8 != -1)
  {
    v22 = &v20;
    v21 = &v22;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v9 = WTF::s_file;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v10, "%s", "JIT [");
  WTF::PrintStream::printf(v10, "%u", *a1);
  WTF::PrintStream::printf(v10, "%s", "] SLOW ");
  v11 = *(char **)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
  if (v11)
  {
    v15 = v12 - 1;
    if (!v12)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(v11, v15, (uint64_t)&v22, v14);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v22 = (char *)v16;
    v23 = 0;
  }
  WTF::printExpectedCStringHelper(v13, "StringView", &v22);
  if (v23 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v21, &v22);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
  WTF::PrintStream::printf(v10, "%s", " cfr ");
  WTF::PrintStream::printf(v10, "%p", *a3);
  WTF::PrintStream::printf(v10, "%s", " @ ");
  v17 = *a4;
  v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
  if (v17)
    JSC::CodeBlock::dumpAssumingJITType(v17);
  else
    WTF::PrintStream::printf(v18, "%s", "<null codeBlock>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
  WTF::PrintStream::printf(v10, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
}

uint64_t WTF::HashTable<WTF::CString,WTF::KeyValuePair<WTF::CString,WTF::Seconds>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CString,WTF::Seconds>>,WTF::DefaultHash<WTF::CString>,WTF::HashMap<WTF::CString,WTF::Seconds,WTF::DefaultHash<WTF::CString>,WTF::HashTraits<WTF::CString>,WTF::HashTraits<WTF::Seconds>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CString>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  WTF *v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  _DWORD *v25;
  char v26;
  unsigned int v27;
  unsigned __int8 *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  _DWORD **v36;
  int v37;
  WTF *v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  uint64_t result;
  uint64_t v43;
  WTF *v46;

  v4 = *a1;
  if (*a1)
  {
    LODWORD(v5) = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v15 = v7;
  v16 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v16;
  *(_DWORD *)(v15 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if ((_DWORD)v5)
  {
    v17 = 0;
    v18 = 0;
    v5 = v5;
    v43 = v5;
    while (1)
    {
      v19 = (_QWORD *)(v4 + 16 * v17);
      if (*v19 != -1)
        break;
LABEL_44:
      if (++v17 == v5)
        goto LABEL_50;
    }
    v46 = 0;
    v20 = WTF::operator==(v4 + 16 * v17, (int8x16_t **)&v46);
    v21 = v46;
    v46 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
      {
        WTF::fastFree((unint64_t)v21, v8, v9, v10, v11, v12, v13, v14);
        if (!v20)
        {
LABEL_17:
          v23 = *a1;
          if (*a1)
            v24 = *(_DWORD *)(v23 - 8);
          else
            v24 = 0;
          v25 = (_DWORD *)*v19;
          if (*v19)
          {
            v26 = *((_BYTE *)v25 + 16);
            v27 = -1640531527;
            if (v26)
            {
              v28 = (unsigned __int8 *)v25 + 18;
              while (1)
              {
                v29 = v27 + (unsigned __int16)v26;
                if (!*(v28 - 1))
                  break;
                v30 = ((unsigned __int16)(char)*(v28 - 1) << 11) ^ (v29 << 16) ^ v29;
                v27 = v30 + (v30 >> 11);
                v31 = *v28;
                v28 += 2;
                v26 = v31;
                if (!v31)
                  goto LABEL_27;
              }
              v27 = (v29 ^ (v29 << 11)) + ((v29 ^ (v29 << 11)) >> 17);
            }
LABEL_27:
            v32 = (v27 ^ (8 * v27)) + ((v27 ^ (8 * v27)) >> 5);
            v33 = (v32 ^ (4 * v32)) + ((v32 ^ (4 * v32)) >> 15);
            LODWORD(v25) = v33 ^ (v33 << 10);
            if (!(_DWORD)v25)
              LODWORD(v25) = 0x800000;
          }
          v34 = 0;
          do
          {
            v35 = v25 & v24;
            v36 = (_DWORD **)(v23 + 16 * v35);
            v46 = 0;
            v37 = WTF::operator==((uint64_t)v36, (int8x16_t **)&v46);
            v38 = v46;
            v46 = 0;
            if (v38)
            {
              if (*(_DWORD *)v38 == 1)
                WTF::fastFree((unint64_t)v38, v8, v9, v10, v11, v12, v13, v14);
              else
                --*(_DWORD *)v38;
            }
            LODWORD(v25) = ++v34 + v35;
          }
          while (!v37);
          v39 = *v36;
          *v36 = 0;
          v5 = v43;
          if (v39)
          {
            if (*v39 == 1)
              WTF::fastFree((unint64_t)v39, v8, v9, v10, v11, v12, v13, v14);
            else
              --*v39;
          }
          v40 = (_DWORD *)*v19;
          *v19 = 0;
          *v36 = v40;
          *(_QWORD *)(v23 + 16 * v35 + 8) = *(_QWORD *)(v4 + 16 * v17 + 8);
          v41 = (_DWORD *)*v19;
          *v19 = 0;
          if (v41)
          {
            if (*v41 == 1)
              WTF::fastFree((unint64_t)v41, v8, v9, v10, v11, v12, v13, v14);
            else
              --*v41;
          }
          if (v19 == a3)
            v18 = v23 + 16 * v35;
          goto LABEL_44;
        }
        goto LABEL_13;
      }
      --*(_DWORD *)v21;
    }
    if (!v20)
      goto LABEL_17;
LABEL_13:
    v22 = (_DWORD *)*v19;
    *v19 = 0;
    if (v22)
    {
      if (*v22 == 1)
        WTF::fastFree((unint64_t)v22, v8, v9, v10, v11, v12, v13, v14);
      else
        --*v22;
    }
    goto LABEL_44;
  }
  v18 = 0;
  result = 0;
  if (v4)
  {
LABEL_50:
    WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
    return v18;
  }
  return result;
}

uint64_t _ZZN3JSC3JIT16emit_compareImplIZNS0_12emit_compareINS_6OpLessEEEvPKNS_15BaseInstructionINS_14JSOpcodeTraitsEEENS_19MacroAssemblerARM6419RelationalConditionEEUlSA_NS_11JSValueRegsET_E_EEvNS_15VirtualRegisterESE_SA_RKSC_ENKUlSE_SE_SA_E_clESE_SE_SA_(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int8x8_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  int *v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _DWORD *v128;
  _DWORD *v129;
  WTF::StringImpl *v130;
  unsigned int v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _DWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  _BYTE v152[24];
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  unsigned int v158[2];
  char v159;
  __int16 v160;
  char v161;
  unsigned int v162[3];
  _DWORD v163[3];
  _DWORD v164[3];
  unsigned int v165;

  if (a2 < 0x40000000)
    return 0;
  v12 = *a1;
  v13 = *(_QWORD *)(*a1 + 808);
  v14 = (a2 - 0x40000000);
  v15 = *(_DWORD **)(v13 + 120);
  if (v15)
  {
    if (*v15 > v14 && *((_BYTE *)v15 + v14 + 4) == 3)
      return 0;
  }
  v16 = *(_DWORD **)(v13 + 112);
  if (*v16 <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x19872E6D8);
  }
  v17 = *(_QWORD *)&v16[2 * v14 + 2];
  if ((v17 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v17 + 5) != 2)
    return 0;
  if (v15 && *v15 > v14 && *((_BYTE *)v15 + v14 + 4) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19872E724);
  }
  v18 = *(_QWORD *)(v17 + 8);
  v19 = v17 + 16;
  v20 = (_DWORD *)((v18 & 1) != 0 ? v19 : v18 + 4);
  if (*v20 != 1)
    return 0;
  if ((int)a3 >= 0x40000000)
  {
    if (JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(v12 + 800), a3))
    {
      v145 = *(_DWORD **)(*(_QWORD *)(v12 + 808) + 112);
      if (*v145 <= (a3 - 0x40000000))
      {
        __break(0xC471u);
        JUMPOUT(0x19872E7A4);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, *(_QWORD *)&v145[2 * (a3 - 0x40000000) + 2], 0, v140, v141, v142, v143, v144);
      goto LABEL_20;
    }
    JSC::MacroAssemblerARM64::load64(v12, 0x100000001DLL, 0, v140, v141, v142, v143, v144);
    JSC::MacroAssemblerARM64::load64(v12, 0xA000000000, 0, v146, v147, v148, v149, v150);
    v21 = a3 << 35;
  }
  else
  {
    v21 = (a3 << 35) | 0x1D;
  }
  JSC::MacroAssemblerARM64::load64(v12, v21, 0, a4, a5, a6, a7, a8);
LABEL_20:
  JSC::AssemblyHelpers::branchIfNotCell(v12, 0, 1, v22, v23, v24, v25, v26, (uint64_t)&v153);
  v32 = v154;
  v33 = *(_DWORD *)(v12 + 640);
  LODWORD(v151) = v153;
  *(_QWORD *)((char *)&v151 + 4) = v154;
  HIDWORD(v151) = v33;
  v34 = *(unsigned int *)(v12 + 660);
  if ((_DWORD)v34 == *(_DWORD *)(v12 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(v12 + 648, (unint64_t)&v151);
  }
  else
  {
    v35 = *(_QWORD *)(v12 + 648) + 16 * v34;
    *(_DWORD *)v35 = v153;
    *(_QWORD *)(v35 + 4) = v32;
    *(_DWORD *)(v35 + 12) = v33;
    ++*(_DWORD *)(v12 + 660);
  }
  *(_QWORD *)&v151 = v152;
  *((_QWORD *)&v151 + 1) = 2;
  JSC::AssemblyHelpers::branchIfNotString(v12, 0, v27, v28, v29, v30, v31, (uint64_t)&v155);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v151, &v155, v36, v37, v38, v39, v40, v41);
  JSC::MacroAssemblerARM64::load64(v12, 0x800000000, 0, v42, v43, v44, v45, v46);
  JSC::MacroAssemblerARM64::branchTest64(v12, 1, 0, 1, v47, v48, v49, v50, (uint64_t)v164, v51);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v151, v164, v52, v53, v54, v55, v56, v57);
  JSC::MacroAssemblerARM64::branch32(v12, 1, 0x400000000, 1, v58, v59, v60, v61, (uint64_t)v163);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v151, v163, v62, v63, v64, v65, v66, v67);
  JSC::MacroAssemblerARM64::load64(v12, 0x800000000, 1, v68, v69, v70, v71, v72);
  JSC::MacroAssemblerARM64::branchTest32(v12, 0, 0x1000000000, 4, v73, v74, v75, v76, (uint64_t)v162);
  JSC::MacroAssemblerARM64::load8(v12, 1, 0, v77, v78, v79, v80, v81);
  JSC::ARM64Assembler::label((_DWORD *)(v12 + 32), v82, v83, v84, v85, v86, v87, v88, (int *)&v165);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v12 + 56), 335544320, v89, v90, v91, v92, v93, v94);
  if (*(_BYTE *)(v12 + 328))
    v101 = 69;
  else
    v101 = 65;
  v158[0] = v165;
  v158[1] = 0;
  v159 = v101;
  v160 = 15;
  v161 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v162, v12, v95, v96, v97, v98, v99, v100);
  JSC::MacroAssemblerARM64::load16(v12, 1, 0, v102, v103, v104, v105, v106);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v158, v12, v107, v108, v109, v110, v111, v112);
  if (HIDWORD(v151))
  {
    v113 = (int *)v151;
    v114 = (int *)(v151 + 12 * HIDWORD(v151));
    do
    {
      v115 = *v113;
      v116 = *(_QWORD *)(v113 + 1);
      v117 = *(_DWORD *)(v12 + 640);
      v155 = *v113;
      v156 = v116;
      v157 = v117;
      v118 = *(unsigned int *)(v12 + 660);
      if ((_DWORD)v118 == *(_DWORD *)(v12 + 656))
      {
        WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(v12 + 648, (unint64_t)&v155);
      }
      else
      {
        v119 = *(_QWORD *)(v12 + 648) + 16 * v118;
        *(_DWORD *)v119 = v115;
        *(_QWORD *)(v119 + 4) = v156;
        *(_DWORD *)(v119 + 12) = v157;
        ++*(_DWORD *)(v12 + 660);
      }
      v113 += 3;
    }
    while (v113 != v114);
  }
  v120 = a1[1];
  v126 = JSC::MacroAssembler::commute(a4);
  v127 = *(_QWORD *)(v12 + 808);
  v128 = *(_DWORD **)(v127 + 120);
  if (v128 && *v128 > v14 && *((_BYTE *)v128 + v14 + 4) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19872E744);
  }
  v129 = *(_DWORD **)(v127 + 112);
  if (*v129 <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x19872E764);
  }
  v130 = *(WTF::StringImpl **)(*(_QWORD *)&v129[2 * v14 + 2] + 8);
  if ((v130 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19872E784);
  }
  if (v130 && *((_DWORD *)v130 + 1))
    v131 = WTF::StringImpl::at(v130, 0);
  else
    v131 = 0;
  JSC::JIT::emit_compare<JSC::OpLess>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::RelationalCondition)::{lambda(JSC::MacroAssemblerARM64::RelationalCondition,JSC::JSValueRegs,JSC::OpLess)#1}::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Imm32>(v120, v126, v131, v121, v122, v123, v124, v125);
  v139 = v151;
  if (v152 != (_BYTE *)v151)
  {
    if ((_QWORD)v151)
    {
      *(_QWORD *)&v151 = 0;
      DWORD2(v151) = 0;
      WTF::fastFree(v139, v132, v133, v134, v135, v136, v137, v138);
    }
  }
  return 1;
}

uint64_t _ZZN3JSC3JIT16emit_compareImplIZNS0_12emit_compareINS_6OpLessEEEvPKNS_15BaseInstructionINS_14JSOpcodeTraitsEEENS_19MacroAssemblerARM6419RelationalConditionEEUlSA_NS_11JSValueRegsET_E_EEvNS_15VirtualRegisterESE_SA_RKSC_ENKUlSE_SE_SB_SA_E_clESE_SE_SB_SA_(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;

  if (a2 < 0x40000000)
    return 0;
  v9 = a5;
  v10 = a4;
  v13 = *a1;
  v14 = *(_QWORD *)(*a1 + 808);
  v15 = (a2 - 0x40000000);
  v16 = *(_DWORD **)(v14 + 120);
  if (v16)
  {
    if (*v16 > v15 && *((_BYTE *)v16 + v15 + 4) == 3)
      return 0;
  }
  v17 = *(_DWORD **)(v14 + 112);
  if (*v17 <= v15)
    goto LABEL_32;
  if (*(_QWORD *)&v17[2 * v15 + 2] < 0xFFFE000000000000)
    return 0;
  if ((int)a3 >= 0x40000000)
  {
    if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(v13 + 800), a3))
    {
      JSC::MacroAssemblerARM64::load64(v13, 0x100000001DLL, (char)v10, v45, v46, v47, v48, v49);
      JSC::MacroAssemblerARM64::load64(v13, v10 | 0xA000000000, (char)v10, v51, v52, v53, v54, v55);
      v18 = v10 | (unint64_t)(a3 << 35);
      v20 = v13;
      v19 = (char)v10;
      goto LABEL_10;
    }
    v50 = *(_DWORD **)(*(_QWORD *)(v13 + 808) + 112);
    if (*v50 > (a3 - 0x40000000))
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, *(_QWORD *)&v50[2 * (a3 - 0x40000000) + 2], (char)v10, v45, v46, v47, v48, v49);
      goto LABEL_11;
    }
LABEL_32:
    __break(0xC471u);
    JUMPOUT(0x19872EA74);
  }
  v18 = (a3 << 35) | 0x1D;
  v19 = (char)a4;
  v20 = *a1;
LABEL_10:
  JSC::MacroAssemblerARM64::load64(v20, v18, v19, a4, a5, a6, a7, a8);
LABEL_11:
  JSC::MacroAssemblerARM64::branch64(v13, 3, (char)v10, 27, v21, v22, v23, v24, (uint64_t)&v56);
  v28 = v57;
  v29 = *(_DWORD *)(v13 + 640);
  v58 = v56;
  v59 = v57;
  v60 = v29;
  v30 = *(unsigned int *)(v13 + 660);
  if ((_DWORD)v30 == *(_DWORD *)(v13 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(v13 + 648, (unint64_t)&v58);
  }
  else
  {
    v31 = *(_QWORD *)(v13 + 648) + 16 * v30;
    *(_DWORD *)v31 = v56;
    *(_QWORD *)(v31 + 4) = v28;
    *(_DWORD *)(v31 + 12) = v29;
    ++*(_DWORD *)(v13 + 660);
  }
  if ((_DWORD)v9 == 11)
  {
    v9 = 12;
  }
  else if ((_DWORD)v9 == 12)
  {
    v9 = 11;
  }
  v32 = a1[1];
  v33 = *(_QWORD *)(v13 + 808);
  v34 = *(_DWORD **)(v33 + 120);
  if (v34 && *v34 > v15 && *((_BYTE *)v34 + v15 + 4) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19872EA94);
  }
  v35 = *(_DWORD **)(v33 + 112);
  if (*v35 <= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x19872EAB4);
  }
  v36 = *(_DWORD **)v32;
  JSC::MacroAssemblerARM64::compare32(*(_QWORD *)v32, v9, (char)v10, v35[2 * v15 + 2], (char)v10, v25, v26, v27);
  v44 = v36[50];
  if (v44 + 4 > v36[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v36 + 14), v37, v38, v39, v40, v41, v42, v43);
    v44 = v36[50];
  }
  *(_DWORD *)(*((_QWORD *)v36 + 7) + v44) = v10 | (32 * (v10 & 0x3F)) | 0x11001800;
  v36[50] += 4;
  JSC::MacroAssemblerARM64::store64((uint64_t)v36, (char)v10, ((unint64_t)**(unsigned int **)(v32 + 8) << 35) | 0x1D, v39, v40, v41, v42, v43);
  return 1;
}

void JSC::JIT::emit_compare<JSC::OpLess>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::RelationalCondition)::{lambda(JSC::MacroAssemblerARM64::RelationalCondition,JSC::JSValueRegs,JSC::OpLess)#1}::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Imm32>(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  v9 = *(_DWORD **)a1;
  JSC::MacroAssemblerARM64::compare32(*(_QWORD *)a1, a2, 0, a3, 0, a6, a7, a8);
  v17 = v9[50];
  if (v17 + 4 > v9[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), v10, v11, v12, v13, v14, v15, v16);
    v17 = v9[50];
  }
  *(_DWORD *)(*((_QWORD *)v9 + 7) + v17) = 285218816;
  v9[50] += 4;
  JSC::MacroAssemblerARM64::store64((uint64_t)v9, 0, ((unint64_t)**(unsigned int **)(a1 + 8) << 35) | 0x1D, v12, v13, v14, v15, v16);
}

uint64_t _ZZN3JSC3JIT16emit_compareImplIZNS0_12emit_compareINS_8OpLesseqEEEvPKNS_15BaseInstructionINS_14JSOpcodeTraitsEEENS_19MacroAssemblerARM6419RelationalConditionEEUlSA_NS_11JSValueRegsET_E_EEvNS_15VirtualRegisterESE_SA_RKSC_ENKUlSE_SE_SB_SA_E_clESE_SE_SB_SA_(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;

  if (a2 < 0x40000000)
    return 0;
  v9 = a5;
  v10 = a4;
  v13 = *a1;
  v14 = *(_QWORD *)(*a1 + 808);
  v15 = (a2 - 0x40000000);
  v16 = *(_DWORD **)(v14 + 120);
  if (v16)
  {
    if (*v16 > v15 && *((_BYTE *)v16 + v15 + 4) == 3)
      return 0;
  }
  v17 = *(_DWORD **)(v14 + 112);
  if (*v17 <= v15)
    goto LABEL_31;
  if (*(_QWORD *)&v17[2 * v15 + 2] < 0xFFFE000000000000)
    return 0;
  if ((int)a3 >= 0x40000000)
  {
    if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(v13 + 800), a3))
    {
      JSC::MacroAssemblerARM64::load64(v13, 0x100000001DLL, (char)v10, v46, v47, v48, v49, v50);
      JSC::MacroAssemblerARM64::load64(v13, v10 | 0xA000000000, (char)v10, v52, v53, v54, v55, v56);
      v18 = v10 | (unint64_t)(a3 << 35);
      v20 = v13;
      v19 = (char)v10;
      goto LABEL_10;
    }
    v51 = *(_DWORD **)(*(_QWORD *)(v13 + 808) + 112);
    if (*v51 > (a3 - 0x40000000))
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, *(_QWORD *)&v51[2 * (a3 - 0x40000000) + 2], (char)v10, v46, v47, v48, v49, v50);
      goto LABEL_11;
    }
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x19872EE24);
  }
  v18 = (a3 << 35) | 0x1D;
  v19 = (char)a4;
  v20 = *a1;
LABEL_10:
  JSC::MacroAssemblerARM64::load64(v20, v18, v19, a4, a5, a6, a7, a8);
LABEL_11:
  JSC::MacroAssemblerARM64::branch64(v13, 3, (char)v10, 27, v21, v22, v23, v24, (uint64_t)&v57);
  v28 = v58;
  v29 = *(_DWORD *)(v13 + 640);
  v59 = v57;
  v60 = v58;
  v61 = v29;
  v30 = *(unsigned int *)(v13 + 660);
  if ((_DWORD)v30 == *(_DWORD *)(v13 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(v13 + 648, (unint64_t)&v59);
  }
  else
  {
    v31 = *(_QWORD *)(v13 + 648) + 16 * v30;
    *(_DWORD *)v31 = v57;
    *(_QWORD *)(v31 + 4) = v28;
    *(_DWORD *)(v31 + 12) = v29;
    ++*(_DWORD *)(v13 + 660);
  }
  v32 = a1[1];
  if (v9 - 10 >= 4)
    v33 = v9;
  else
    v33 = 23 - v9;
  v34 = *(_QWORD *)(v13 + 808);
  v35 = *(_DWORD **)(v34 + 120);
  if (v35 && *v35 > v15 && *((_BYTE *)v35 + v15 + 4) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19872EE44);
  }
  v36 = *(_DWORD **)(v34 + 112);
  if (*v36 <= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x19872EE64);
  }
  v37 = *(_DWORD **)v32;
  JSC::MacroAssemblerARM64::compare32(*(_QWORD *)v32, v33, (char)v10, v36[2 * v15 + 2], (char)v10, v25, v26, v27);
  v45 = v37[50];
  if (v45 + 4 > v37[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v37 + 14), v38, v39, v40, v41, v42, v43, v44);
    v45 = v37[50];
  }
  *(_DWORD *)(*((_QWORD *)v37 + 7) + v45) = v10 | (32 * (v10 & 0x3F)) | 0x11001800;
  v37[50] += 4;
  JSC::MacroAssemblerARM64::store64((uint64_t)v37, (char)v10, ((unint64_t)**(unsigned int **)(v32 + 8) << 35) | 0x1D, v40, v41, v42, v43, v44);
  return 1;
}

uint64_t JSC::UnlinkedCodeBlock::outOfLineJumpOffset(uint64_t a1, unint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v14;

  v2 = *(unint64_t **)(a1 + 80);
  v3 = *v2;
  v4 = *((unsigned int *)v2 + 3) + *v2;
  if (v3 > a2 || v4 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19872EF4CLL);
  }
  v6 = *(_QWORD *)(a1 + 144);
  if (v6)
  {
    v7 = a2 - v3;
    v8 = *(_DWORD *)(v6 - 8);
    v9 = 9 * ((~(v7 << 15) + v7) ^ ((~(v7 << 15) + v7) >> 10));
    v10 = (v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11);
    v11 = v8 & (v10 ^ HIWORD(v10));
    v12 = *(_DWORD *)(v6 + 8 * v11);
    if (v12 == v7)
      return *(unsigned int *)(v6 + 8 * v11 + 4);
    v14 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v14) & v8;
      v12 = *(_DWORD *)(v6 + 8 * v11);
      ++v14;
      if (v12 == v7)
        return *(unsigned int *)(v6 + 8 * v11 + 4);
    }
  }
  return 0;
}

uint64_t _ZZN3JSC3JIT16emit_compareImplIZNS0_19emit_compareAndJumpINS_7OpJlessEEEvPKNS_15BaseInstructionINS_14JSOpcodeTraitsEEENS_19MacroAssemblerARM6419RelationalConditionEEUlSA_NS_11JSValueRegsET_E_EEvNS_15VirtualRegisterESE_SA_RKSC_ENKUlSE_SE_SA_E_clESE_SE_SA_(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int8x8_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  int *v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _DWORD *v128;
  _DWORD *v129;
  WTF::StringImpl *v130;
  unsigned int v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _DWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  _BYTE v152[24];
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  unsigned int v158[2];
  char v159;
  __int16 v160;
  char v161;
  unsigned int v162[3];
  _DWORD v163[3];
  _DWORD v164[3];
  unsigned int v165;

  if (a2 < 0x40000000)
    return 0;
  v12 = *a1;
  v13 = *(_QWORD *)(*a1 + 808);
  v14 = (a2 - 0x40000000);
  v15 = *(_DWORD **)(v13 + 120);
  if (v15)
  {
    if (*v15 > v14 && *((_BYTE *)v15 + v14 + 4) == 3)
      return 0;
  }
  v16 = *(_DWORD **)(v13 + 112);
  if (*v16 <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x19872F39CLL);
  }
  v17 = *(_QWORD *)&v16[2 * v14 + 2];
  if ((v17 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v17 + 5) != 2)
    return 0;
  if (v15 && *v15 > v14 && *((_BYTE *)v15 + v14 + 4) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19872F3E8);
  }
  v18 = *(_QWORD *)(v17 + 8);
  v19 = v17 + 16;
  v20 = (_DWORD *)((v18 & 1) != 0 ? v19 : v18 + 4);
  if (*v20 != 1)
    return 0;
  if ((int)a3 >= 0x40000000)
  {
    if (JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(v12 + 800), a3))
    {
      v145 = *(_DWORD **)(*(_QWORD *)(v12 + 808) + 112);
      if (*v145 <= (a3 - 0x40000000))
      {
        __break(0xC471u);
        JUMPOUT(0x19872F468);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, *(_QWORD *)&v145[2 * (a3 - 0x40000000) + 2], 0, v140, v141, v142, v143, v144);
      goto LABEL_20;
    }
    JSC::MacroAssemblerARM64::load64(v12, 0x100000001DLL, 0, v140, v141, v142, v143, v144);
    JSC::MacroAssemblerARM64::load64(v12, 0xA000000000, 0, v146, v147, v148, v149, v150);
    v21 = a3 << 35;
  }
  else
  {
    v21 = (a3 << 35) | 0x1D;
  }
  JSC::MacroAssemblerARM64::load64(v12, v21, 0, a4, a5, a6, a7, a8);
LABEL_20:
  JSC::AssemblyHelpers::branchIfNotCell(v12, 0, 1, v22, v23, v24, v25, v26, (uint64_t)&v153);
  v32 = v154;
  v33 = *(_DWORD *)(v12 + 640);
  LODWORD(v151) = v153;
  *(_QWORD *)((char *)&v151 + 4) = v154;
  HIDWORD(v151) = v33;
  v34 = *(unsigned int *)(v12 + 660);
  if ((_DWORD)v34 == *(_DWORD *)(v12 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(v12 + 648, (unint64_t)&v151);
  }
  else
  {
    v35 = *(_QWORD *)(v12 + 648) + 16 * v34;
    *(_DWORD *)v35 = v153;
    *(_QWORD *)(v35 + 4) = v32;
    *(_DWORD *)(v35 + 12) = v33;
    ++*(_DWORD *)(v12 + 660);
  }
  *(_QWORD *)&v151 = v152;
  *((_QWORD *)&v151 + 1) = 2;
  JSC::AssemblyHelpers::branchIfNotString(v12, 0, v27, v28, v29, v30, v31, (uint64_t)&v155);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v151, &v155, v36, v37, v38, v39, v40, v41);
  JSC::MacroAssemblerARM64::load64(v12, 0x800000000, 0, v42, v43, v44, v45, v46);
  JSC::MacroAssemblerARM64::branchTest64(v12, 1, 0, 1, v47, v48, v49, v50, (uint64_t)v164, v51);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v151, v164, v52, v53, v54, v55, v56, v57);
  JSC::MacroAssemblerARM64::branch32(v12, 1, 0x400000000, 1, v58, v59, v60, v61, (uint64_t)v163);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v151, v163, v62, v63, v64, v65, v66, v67);
  JSC::MacroAssemblerARM64::load64(v12, 0x800000000, 1, v68, v69, v70, v71, v72);
  JSC::MacroAssemblerARM64::branchTest32(v12, 0, 0x1000000000, 4, v73, v74, v75, v76, (uint64_t)v162);
  JSC::MacroAssemblerARM64::load8(v12, 1, 0, v77, v78, v79, v80, v81);
  JSC::ARM64Assembler::label((_DWORD *)(v12 + 32), v82, v83, v84, v85, v86, v87, v88, (int *)&v165);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v12 + 56), 335544320, v89, v90, v91, v92, v93, v94);
  if (*(_BYTE *)(v12 + 328))
    v101 = 69;
  else
    v101 = 65;
  v158[0] = v165;
  v158[1] = 0;
  v159 = v101;
  v160 = 15;
  v161 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v162, v12, v95, v96, v97, v98, v99, v100);
  JSC::MacroAssemblerARM64::load16(v12, 1, 0, v102, v103, v104, v105, v106);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v158, v12, v107, v108, v109, v110, v111, v112);
  if (HIDWORD(v151))
  {
    v113 = (int *)v151;
    v114 = (int *)(v151 + 12 * HIDWORD(v151));
    do
    {
      v115 = *v113;
      v116 = *(_QWORD *)(v113 + 1);
      v117 = *(_DWORD *)(v12 + 640);
      v155 = *v113;
      v156 = v116;
      v157 = v117;
      v118 = *(unsigned int *)(v12 + 660);
      if ((_DWORD)v118 == *(_DWORD *)(v12 + 656))
      {
        WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(v12 + 648, (unint64_t)&v155);
      }
      else
      {
        v119 = *(_QWORD *)(v12 + 648) + 16 * v118;
        *(_DWORD *)v119 = v115;
        *(_QWORD *)(v119 + 4) = v156;
        *(_DWORD *)(v119 + 12) = v157;
        ++*(_DWORD *)(v12 + 660);
      }
      v113 += 3;
    }
    while (v113 != v114);
  }
  v120 = a1[1];
  v126 = JSC::MacroAssembler::commute(a4);
  v127 = *(_QWORD *)(v12 + 808);
  v128 = *(_DWORD **)(v127 + 120);
  if (v128 && *v128 > v14 && *((_BYTE *)v128 + v14 + 4) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19872F408);
  }
  v129 = *(_DWORD **)(v127 + 112);
  if (*v129 <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x19872F428);
  }
  v130 = *(WTF::StringImpl **)(*(_QWORD *)&v129[2 * v14 + 2] + 8);
  if ((v130 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19872F448);
  }
  if (v130 && *((_DWORD *)v130 + 1))
    v131 = WTF::StringImpl::at(v130, 0);
  else
    v131 = 0;
  JSC::JIT::emit_compareAndJump<JSC::OpJless>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::RelationalCondition)::{lambda(JSC::MacroAssemblerARM64::RelationalCondition,JSC::JSValueRegs,JSC::OpJless)#1}::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Imm32>(v120, v126, v131, v121, v122, v123, v124, v125);
  v139 = v151;
  if (v152 != (_BYTE *)v151)
  {
    if ((_QWORD)v151)
    {
      *(_QWORD *)&v151 = 0;
      DWORD2(v151) = 0;
      WTF::fastFree(v139, v132, v133, v134, v135, v136, v137, v138);
    }
  }
  return 1;
}

uint64_t _ZZN3JSC3JIT16emit_compareImplIZNS0_19emit_compareAndJumpINS_7OpJlessEEEvPKNS_15BaseInstructionINS_14JSOpcodeTraitsEEENS_19MacroAssemblerARM6419RelationalConditionEEUlSA_NS_11JSValueRegsET_E_EEvNS_15VirtualRegisterESE_SA_RKSC_ENKUlSE_SE_SB_SA_E_clESE_SE_SB_SA_(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  _DWORD *v52;
  unint64_t v53;
  BOOL v54;
  char **v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;

  if (a2 < 0x40000000)
    return 0;
  v9 = a5;
  v10 = a4;
  v13 = *a1;
  v14 = *(_QWORD *)(*a1 + 808);
  v15 = (a2 - 0x40000000);
  v16 = *(_DWORD **)(v14 + 120);
  if (v16)
  {
    if (*v16 > v15 && *((_BYTE *)v16 + v15 + 4) == 3)
      return 0;
  }
  v17 = *(unsigned int **)(v14 + 112);
  v18 = *v17;
  if (*v17 <= v15)
    goto LABEL_50;
  v19 = v17 + 2;
  if (*(_QWORD *)&v19[2 * v15] < 0xFFFE000000000000)
    return 0;
  if ((int)a3 >= 0x40000000)
  {
    v48 = *(_QWORD *)(*(_QWORD *)(v13 + 800) + 56);
    v49 = (a3 - 0x40000000);
    v50 = *(_DWORD **)(v48 + 120);
    if (v50 && *v50 > v49)
    {
      v51 = *((unsigned __int8 *)v50 + v49 + 4);
      if ((v51 - 1) < 2)
      {
LABEL_29:
        if (v18 <= v49)
        {
          __break(0xC471u);
          JUMPOUT(0x19872F864);
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)*a1, *(_QWORD *)&v19[2 * v49], (char)a4, a4, a5, a6, a7, a8);
        goto LABEL_11;
      }
      if (v51)
      {
        if (v51 != 3)
        {
          __break(0xC471u);
          JUMPOUT(0x19872F804);
        }
        goto LABEL_43;
      }
    }
    v52 = *(_DWORD **)(v48 + 112);
    if (*v52 > v49)
    {
      v53 = *(_QWORD *)&v52[2 * v49 + 2];
      if (v53)
        v54 = (v53 & 0xFFFE000000000002) == 0;
      else
        v54 = 0;
      if (!v54)
        goto LABEL_29;
      v55 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v53 & 0xFFFFFFFE) + 0x4C));
      if (v55 != &JSC::SymbolTable::s_info && v55 != &JSC::JSTemplateObjectDescriptor::s_info)
        goto LABEL_29;
LABEL_43:
      JSC::MacroAssemblerARM64::load64(*a1, 0x100000001DLL, (char)a4, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::load64(v13, v10 | 0xA000000000, (char)v10, v57, v58, v59, v60, v61);
      v20 = v10 | (unint64_t)(a3 << 35);
      v22 = v13;
      v21 = (char)v10;
      goto LABEL_10;
    }
LABEL_50:
    __break(0xC471u);
    JUMPOUT(0x19872F7DCLL);
  }
  v20 = (a3 << 35) | 0x1D;
  v21 = (char)a4;
  v22 = *a1;
LABEL_10:
  JSC::MacroAssemblerARM64::load64(v22, v20, v21, a4, a5, a6, a7, a8);
LABEL_11:
  v27 = (char)v10;
  JSC::MacroAssemblerARM64::branch64(v13, 3, v27, 27, v23, v24, v25, v26, (uint64_t)&v62);
  v32 = v63;
  v33 = *(_DWORD *)(v13 + 640);
  v64 = v62;
  v65 = v63;
  v66 = v33;
  v34 = *(unsigned int *)(v13 + 660);
  if ((_DWORD)v34 == *(_DWORD *)(v13 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(v13 + 648, (unint64_t)&v64);
  }
  else
  {
    v35 = *(_QWORD *)(v13 + 648) + 16 * v34;
    *(_DWORD *)v35 = v62;
    *(_QWORD *)(v35 + 4) = v32;
    *(_DWORD *)(v35 + 12) = v33;
    ++*(_DWORD *)(v13 + 660);
  }
  if ((_DWORD)v9 == 11)
  {
    v9 = 12;
  }
  else if ((_DWORD)v9 == 12)
  {
    v9 = 11;
  }
  v36 = a1[1];
  v37 = *(_QWORD *)(v13 + 808);
  v38 = *(_DWORD **)(v37 + 120);
  if (v38 && *v38 > v15 && *((_BYTE *)v38 + v15 + 4) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19872F824);
  }
  v39 = *(_DWORD **)(v37 + 112);
  if (*v39 <= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x19872F844);
  }
  v40 = *(_QWORD *)v36;
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)v36, v9, v27, v39[2 * v15 + 2], v28, v29, v30, v31, (uint64_t)&v62);
  v41 = (_QWORD *)(v40 + 624);
  v42 = v63;
  v43 = **(_DWORD **)(v36 + 8) + (*(_DWORD *)(v40 + 640) >> 2);
  v64 = v62;
  v65 = v63;
  v66 = v43;
  v44 = *(unsigned int *)(v40 + 636);
  if ((_DWORD)v44 == *(_DWORD *)(v40 + 632))
  {
    v46 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v44 + 1, (unint64_t)&v64);
    v47 = *(_QWORD *)(v40 + 624) + 16 * *(unsigned int *)(v40 + 636);
    *(_DWORD *)v47 = *(_DWORD *)v46;
    *(_QWORD *)(v47 + 4) = *(_QWORD *)(v46 + 4);
    *(_DWORD *)(v47 + 12) = *(_DWORD *)(v46 + 12);
  }
  else
  {
    v45 = *v41 + 16 * v44;
    *(_DWORD *)v45 = v62;
    *(_QWORD *)(v45 + 4) = v42;
    *(_DWORD *)(v45 + 12) = v43;
  }
  ++*(_DWORD *)(v40 + 636);
  return 1;
}

uint64_t JSC::JIT::emit_compareAndJump<JSC::OpJless>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::RelationalCondition)::{lambda(JSC::MacroAssemblerARM64::RelationalCondition,JSC::JSValueRegs,JSC::OpJless)#1}::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Imm32>(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;

  v9 = *(_QWORD *)a1;
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)a1, a2, 0, a3, a5, a6, a7, a8, (uint64_t)&v16);
  result = v9 + 624;
  v11 = v17;
  v12 = **(_DWORD **)(a1 + 8) + (*(_DWORD *)(v9 + 640) >> 2);
  v18 = v16;
  v19 = v17;
  v20 = v12;
  v13 = *(unsigned int *)(v9 + 636);
  if ((_DWORD)v13 == *(_DWORD *)(v9 + 632))
  {
    result = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v13 + 1, (unint64_t)&v18);
    v15 = *(_QWORD *)(v9 + 624) + 16 * *(unsigned int *)(v9 + 636);
    *(_DWORD *)v15 = *(_DWORD *)result;
    *(_QWORD *)(v15 + 4) = *(_QWORD *)(result + 4);
    *(_DWORD *)(v15 + 12) = *(_DWORD *)(result + 12);
  }
  else
  {
    v14 = *(_QWORD *)result + 16 * v13;
    *(_DWORD *)v14 = v16;
    *(_QWORD *)(v14 + 4) = v11;
    *(_DWORD *)(v14 + 12) = v12;
  }
  ++*(_DWORD *)(v9 + 636);
  return result;
}

uint64_t _ZZN3JSC3JIT16emit_compareImplIZNS0_19emit_compareAndJumpINS_9OpJlesseqEEEvPKNS_15BaseInstructionINS_14JSOpcodeTraitsEEENS_19MacroAssemblerARM6419RelationalConditionEEUlSA_NS_11JSValueRegsET_E_EEvNS_15VirtualRegisterESE_SA_RKSC_ENKUlSE_SE_SB_SA_E_clESE_SE_SB_SA_(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned __int8 v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;

  if (a2 < 0x40000000)
    return 0;
  v9 = a5;
  v10 = a4;
  v13 = *a1;
  v14 = *(_QWORD *)(*a1 + 808);
  v15 = (a2 - 0x40000000);
  v16 = *(_DWORD **)(v14 + 120);
  if (v16)
  {
    if (*v16 > v15 && *((_BYTE *)v16 + v15 + 4) == 3)
      return 0;
  }
  v17 = *(_DWORD **)(v14 + 112);
  if (*v17 <= v15)
    goto LABEL_32;
  if (*(_QWORD *)&v17[2 * v15 + 2] < 0xFFFE000000000000)
    return 0;
  if ((int)a3 >= 0x40000000)
  {
    if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(v13 + 800), a3))
    {
      JSC::MacroAssemblerARM64::load64(v13, 0x100000001DLL, (char)v10, v47, v48, v49, v50, v51);
      JSC::MacroAssemblerARM64::load64(v13, v10 | 0xA000000000, (char)v10, v53, v54, v55, v56, v57);
      v18 = v10 | (unint64_t)(a3 << 35);
      v20 = v13;
      v19 = (char)v10;
      goto LABEL_10;
    }
    v52 = *(_DWORD **)(*(_QWORD *)(v13 + 808) + 112);
    if (*v52 > (a3 - 0x40000000))
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, *(_QWORD *)&v52[2 * (a3 - 0x40000000) + 2], (char)v10, v47, v48, v49, v50, v51);
      goto LABEL_11;
    }
LABEL_32:
    __break(0xC471u);
    JUMPOUT(0x19872FC34);
  }
  v18 = (a3 << 35) | 0x1D;
  v19 = (char)a4;
  v20 = *a1;
LABEL_10:
  JSC::MacroAssemblerARM64::load64(v20, v18, v19, a4, a5, a6, a7, a8);
LABEL_11:
  v25 = (char)v10;
  JSC::MacroAssemblerARM64::branch64(v13, 3, v25, 27, v21, v22, v23, v24, (uint64_t)&v58);
  v30 = v59;
  v31 = *(_DWORD *)(v13 + 640);
  v60 = v58;
  v61 = v59;
  v62 = v31;
  v32 = *(unsigned int *)(v13 + 660);
  if ((_DWORD)v32 == *(_DWORD *)(v13 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(v13 + 648, (unint64_t)&v60);
  }
  else
  {
    v33 = *(_QWORD *)(v13 + 648) + 16 * v32;
    *(_DWORD *)v33 = v58;
    *(_QWORD *)(v33 + 4) = v30;
    *(_DWORD *)(v33 + 12) = v31;
    ++*(_DWORD *)(v13 + 660);
  }
  v34 = a1[1];
  if (v9 - 10 >= 4)
    v35 = v9;
  else
    v35 = 23 - v9;
  v36 = *(_QWORD *)(v13 + 808);
  v37 = *(_DWORD **)(v36 + 120);
  if (v37 && *v37 > v15 && *((_BYTE *)v37 + v15 + 4) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19872FC54);
  }
  v38 = *(_DWORD **)(v36 + 112);
  if (*v38 <= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x19872FC74);
  }
  v39 = *(_QWORD *)v34;
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)v34, v35, v25, v38[2 * v15 + 2], v26, v27, v28, v29, (uint64_t)&v58);
  v40 = (_QWORD *)(v39 + 624);
  v41 = v59;
  v42 = **(_DWORD **)(v34 + 8) + (*(_DWORD *)(v39 + 640) >> 2);
  v60 = v58;
  v61 = v59;
  v62 = v42;
  v43 = *(unsigned int *)(v39 + 636);
  if ((_DWORD)v43 == *(_DWORD *)(v39 + 632))
  {
    v45 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v43 + 1, (unint64_t)&v60);
    v46 = *(_QWORD *)(v39 + 624) + 16 * *(unsigned int *)(v39 + 636);
    *(_DWORD *)v46 = *(_DWORD *)v45;
    *(_QWORD *)(v46 + 4) = *(_QWORD *)(v45 + 4);
    *(_DWORD *)(v46 + 12) = *(_DWORD *)(v45 + 12);
  }
  else
  {
    v44 = *v40 + 16 * v43;
    *(_DWORD *)v44 = v58;
    *(_QWORD *)(v44 + 4) = v41;
    *(_DWORD *)(v44 + 12) = v42;
  }
  ++*(_DWORD *)(v39 + 636);
  return 1;
}

uint64_t _ZZN3JSC3JIT16emit_compareImplIZNS0_19emit_compareAndJumpINS_10OpJgreaterEEEvPKNS_15BaseInstructionINS_14JSOpcodeTraitsEEENS_19MacroAssemblerARM6419RelationalConditionEEUlSA_NS_11JSValueRegsET_E_EEvNS_15VirtualRegisterESE_SA_RKSC_ENKUlSE_SE_SA_E_clESE_SE_SA_(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int8x8_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  int *v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _DWORD *v128;
  _DWORD *v129;
  WTF::StringImpl *v130;
  unsigned int v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _DWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  _BYTE v152[24];
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  unsigned int v158[2];
  char v159;
  __int16 v160;
  char v161;
  unsigned int v162[3];
  _DWORD v163[3];
  _DWORD v164[3];
  unsigned int v165;

  if (a2 < 0x40000000)
    return 0;
  v12 = *a1;
  v13 = *(_QWORD *)(*a1 + 808);
  v14 = (a2 - 0x40000000);
  v15 = *(_DWORD **)(v13 + 120);
  if (v15)
  {
    if (*v15 > v14 && *((_BYTE *)v15 + v14 + 4) == 3)
      return 0;
  }
  v16 = *(_DWORD **)(v13 + 112);
  if (*v16 <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198730088);
  }
  v17 = *(_QWORD *)&v16[2 * v14 + 2];
  if ((v17 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v17 + 5) != 2)
    return 0;
  if (v15 && *v15 > v14 && *((_BYTE *)v15 + v14 + 4) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x198730128);
  }
  v18 = *(_QWORD *)(v17 + 8);
  v19 = v17 + 16;
  v20 = (_DWORD *)((v18 & 1) != 0 ? v19 : v18 + 4);
  if (*v20 != 1)
    return 0;
  if ((int)a3 >= 0x40000000)
  {
    if (JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(v12 + 800), a3))
    {
      v145 = *(_DWORD **)(*(_QWORD *)(v12 + 808) + 112);
      if (*v145 <= (a3 - 0x40000000))
      {
        __break(0xC471u);
        JUMPOUT(0x1987301A8);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, *(_QWORD *)&v145[2 * (a3 - 0x40000000) + 2], 0, v140, v141, v142, v143, v144);
      goto LABEL_20;
    }
    JSC::MacroAssemblerARM64::load64(v12, 0x100000001DLL, 0, v140, v141, v142, v143, v144);
    JSC::MacroAssemblerARM64::load64(v12, 0xA000000000, 0, v146, v147, v148, v149, v150);
    v21 = a3 << 35;
  }
  else
  {
    v21 = (a3 << 35) | 0x1D;
  }
  JSC::MacroAssemblerARM64::load64(v12, v21, 0, a4, a5, a6, a7, a8);
LABEL_20:
  JSC::AssemblyHelpers::branchIfNotCell(v12, 0, 1, v22, v23, v24, v25, v26, (uint64_t)&v153);
  v32 = v154;
  v33 = *(_DWORD *)(v12 + 640);
  LODWORD(v151) = v153;
  *(_QWORD *)((char *)&v151 + 4) = v154;
  HIDWORD(v151) = v33;
  v34 = *(unsigned int *)(v12 + 660);
  if ((_DWORD)v34 == *(_DWORD *)(v12 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(v12 + 648, (unint64_t)&v151);
  }
  else
  {
    v35 = *(_QWORD *)(v12 + 648) + 16 * v34;
    *(_DWORD *)v35 = v153;
    *(_QWORD *)(v35 + 4) = v32;
    *(_DWORD *)(v35 + 12) = v33;
    ++*(_DWORD *)(v12 + 660);
  }
  *(_QWORD *)&v151 = v152;
  *((_QWORD *)&v151 + 1) = 2;
  JSC::AssemblyHelpers::branchIfNotString(v12, 0, v27, v28, v29, v30, v31, (uint64_t)&v155);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v151, &v155, v36, v37, v38, v39, v40, v41);
  JSC::MacroAssemblerARM64::load64(v12, 0x800000000, 0, v42, v43, v44, v45, v46);
  JSC::MacroAssemblerARM64::branchTest64(v12, 1, 0, 1, v47, v48, v49, v50, (uint64_t)v164, v51);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v151, v164, v52, v53, v54, v55, v56, v57);
  JSC::MacroAssemblerARM64::branch32(v12, 1, 0x400000000, 1, v58, v59, v60, v61, (uint64_t)v163);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v151, v163, v62, v63, v64, v65, v66, v67);
  JSC::MacroAssemblerARM64::load64(v12, 0x800000000, 1, v68, v69, v70, v71, v72);
  JSC::MacroAssemblerARM64::branchTest32(v12, 0, 0x1000000000, 4, v73, v74, v75, v76, (uint64_t)v162);
  JSC::MacroAssemblerARM64::load8(v12, 1, 0, v77, v78, v79, v80, v81);
  JSC::ARM64Assembler::label((_DWORD *)(v12 + 32), v82, v83, v84, v85, v86, v87, v88, (int *)&v165);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v12 + 56), 335544320, v89, v90, v91, v92, v93, v94);
  if (*(_BYTE *)(v12 + 328))
    v101 = 69;
  else
    v101 = 65;
  v158[0] = v165;
  v158[1] = 0;
  v159 = v101;
  v160 = 15;
  v161 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v162, v12, v95, v96, v97, v98, v99, v100);
  JSC::MacroAssemblerARM64::load16(v12, 1, 0, v102, v103, v104, v105, v106);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v158, v12, v107, v108, v109, v110, v111, v112);
  if (HIDWORD(v151))
  {
    v113 = (int *)v151;
    v114 = (int *)(v151 + 12 * HIDWORD(v151));
    do
    {
      v115 = *v113;
      v116 = *(_QWORD *)(v113 + 1);
      v117 = *(_DWORD *)(v12 + 640);
      v155 = *v113;
      v156 = v116;
      v157 = v117;
      v118 = *(unsigned int *)(v12 + 660);
      if ((_DWORD)v118 == *(_DWORD *)(v12 + 656))
      {
        WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(v12 + 648, (unint64_t)&v155);
      }
      else
      {
        v119 = *(_QWORD *)(v12 + 648) + 16 * v118;
        *(_DWORD *)v119 = v115;
        *(_QWORD *)(v119 + 4) = v156;
        *(_DWORD *)(v119 + 12) = v157;
        ++*(_DWORD *)(v12 + 660);
      }
      v113 += 3;
    }
    while (v113 != v114);
  }
  v120 = a1[1];
  v126 = JSC::MacroAssembler::commute(a4);
  v127 = *(_QWORD *)(v12 + 808);
  v128 = *(_DWORD **)(v127 + 120);
  if (v128 && *v128 > v14 && *((_BYTE *)v128 + v14 + 4) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x198730148);
  }
  v129 = *(_DWORD **)(v127 + 112);
  if (*v129 <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198730168);
  }
  v130 = *(WTF::StringImpl **)(*(_QWORD *)&v129[2 * v14 + 2] + 8);
  if ((v130 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198730188);
  }
  if (v130 && *((_DWORD *)v130 + 1))
    v131 = WTF::StringImpl::at(v130, 0);
  else
    v131 = 0;
  JSC::JIT::emit_compareAndJump<JSC::OpJless>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::RelationalCondition)::{lambda(JSC::MacroAssemblerARM64::RelationalCondition,JSC::JSValueRegs,JSC::OpJless)#1}::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Imm32>(v120, v126, v131, v121, v122, v123, v124, v125);
  v139 = v151;
  if (v152 != (_BYTE *)v151)
  {
    if ((_QWORD)v151)
    {
      *(_QWORD *)&v151 = 0;
      DWORD2(v151) = 0;
      WTF::fastFree(v139, v132, v133, v134, v135, v136, v137, v138);
    }
  }
  return 1;
}

uint64_t _ZZN3JSC3JIT16emit_compareImplIZNS0_19emit_compareAndJumpINS_10OpJgreaterEEEvPKNS_15BaseInstructionINS_14JSOpcodeTraitsEEENS_19MacroAssemblerARM6419RelationalConditionEEUlSA_NS_11JSValueRegsET_E_EEvNS_15VirtualRegisterESE_SA_RKSC_ENKUlSE_SE_SB_SA_E_clESE_SE_SB_SA_(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;

  if (a2 < 0x40000000)
    return 0;
  v9 = a5;
  v10 = a4;
  v13 = *a1;
  v14 = *(_QWORD *)(*a1 + 808);
  v15 = (a2 - 0x40000000);
  v16 = *(_DWORD **)(v14 + 120);
  if (v16)
  {
    if (*v16 > v15 && *((_BYTE *)v16 + v15 + 4) == 3)
      return 0;
  }
  v17 = *(_DWORD **)(v14 + 112);
  if (*v17 <= v15)
    goto LABEL_33;
  if (*(_QWORD *)&v17[2 * v15 + 2] < 0xFFFE000000000000)
    return 0;
  if ((int)a3 >= 0x40000000)
  {
    if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(v13 + 800), a3))
    {
      JSC::MacroAssemblerARM64::load64(v13, 0x100000001DLL, (char)v10, v46, v47, v48, v49, v50);
      JSC::MacroAssemblerARM64::load64(v13, v10 | 0xA000000000, (char)v10, v52, v53, v54, v55, v56);
      v18 = v10 | (unint64_t)(a3 << 35);
      v20 = v13;
      v19 = (char)v10;
      goto LABEL_10;
    }
    v51 = *(_DWORD **)(*(_QWORD *)(v13 + 808) + 112);
    if (*v51 > (a3 - 0x40000000))
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, *(_QWORD *)&v51[2 * (a3 - 0x40000000) + 2], (char)v10, v46, v47, v48, v49, v50);
      goto LABEL_11;
    }
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x1987304ACLL);
  }
  v18 = (a3 << 35) | 0x1D;
  v19 = (char)a4;
  v20 = *a1;
LABEL_10:
  JSC::MacroAssemblerARM64::load64(v20, v18, v19, a4, a5, a6, a7, a8);
LABEL_11:
  v25 = (char)v10;
  JSC::MacroAssemblerARM64::branch64(v13, 3, v25, 27, v21, v22, v23, v24, (uint64_t)&v57);
  v30 = v58;
  v31 = *(_DWORD *)(v13 + 640);
  v59 = v57;
  v60 = v58;
  v61 = v31;
  v32 = *(unsigned int *)(v13 + 660);
  if ((_DWORD)v32 == *(_DWORD *)(v13 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(v13 + 648, (unint64_t)&v59);
  }
  else
  {
    v33 = *(_QWORD *)(v13 + 648) + 16 * v32;
    *(_DWORD *)v33 = v57;
    *(_QWORD *)(v33 + 4) = v30;
    *(_DWORD *)(v33 + 12) = v31;
    ++*(_DWORD *)(v13 + 660);
  }
  if ((_DWORD)v9 == 11)
  {
    v9 = 12;
  }
  else if ((_DWORD)v9 == 12)
  {
    v9 = 11;
  }
  v34 = a1[1];
  v35 = *(_QWORD *)(v13 + 808);
  v36 = *(_DWORD **)(v35 + 120);
  if (v36 && *v36 > v15 && *((_BYTE *)v36 + v15 + 4) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1987304CCLL);
  }
  v37 = *(_DWORD **)(v35 + 112);
  if (*v37 <= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1987304ECLL);
  }
  v38 = *(_QWORD *)v34;
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)v34, v9, v25, v37[2 * v15 + 2], v26, v27, v28, v29, (uint64_t)&v57);
  v39 = (_QWORD *)(v38 + 624);
  v40 = v58;
  v41 = **(_DWORD **)(v34 + 8) + (*(_DWORD *)(v38 + 640) >> 2);
  v59 = v57;
  v60 = v58;
  v61 = v41;
  v42 = *(unsigned int *)(v38 + 636);
  if ((_DWORD)v42 == *(_DWORD *)(v38 + 632))
  {
    v44 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v39, v42 + 1, (unint64_t)&v59);
    v45 = *(_QWORD *)(v38 + 624) + 16 * *(unsigned int *)(v38 + 636);
    *(_DWORD *)v45 = *(_DWORD *)v44;
    *(_QWORD *)(v45 + 4) = *(_QWORD *)(v44 + 4);
    *(_DWORD *)(v45 + 12) = *(_DWORD *)(v44 + 12);
  }
  else
  {
    v43 = *v39 + 16 * v42;
    *(_DWORD *)v43 = v57;
    *(_QWORD *)(v43 + 4) = v40;
    *(_DWORD *)(v43 + 12) = v41;
  }
  ++*(_DWORD *)(v38 + 636);
  return 1;
}

uint64_t _ZZN3JSC3JIT16emit_compareImplIZNS0_19emit_compareAndJumpINS_8OpJnlessEEEvPKNS_15BaseInstructionINS_14JSOpcodeTraitsEEENS_19MacroAssemblerARM6419RelationalConditionEEUlSA_NS_11JSValueRegsET_E_EEvNS_15VirtualRegisterESE_SA_RKSC_ENKUlSE_SE_SA_E_clESE_SE_SA_(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int8x8_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  int *v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _DWORD *v128;
  _DWORD *v129;
  WTF::StringImpl *v130;
  unsigned int v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _DWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  _BYTE v152[24];
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  unsigned int v158[2];
  char v159;
  __int16 v160;
  char v161;
  unsigned int v162[3];
  _DWORD v163[3];
  _DWORD v164[3];
  unsigned int v165;

  if (a2 < 0x40000000)
    return 0;
  v12 = *a1;
  v13 = *(_QWORD *)(*a1 + 808);
  v14 = (a2 - 0x40000000);
  v15 = *(_DWORD **)(v13 + 120);
  if (v15)
  {
    if (*v15 > v14 && *((_BYTE *)v15 + v14 + 4) == 3)
      return 0;
  }
  v16 = *(_DWORD **)(v13 + 112);
  if (*v16 <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198730900);
  }
  v17 = *(_QWORD *)&v16[2 * v14 + 2];
  if ((v17 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v17 + 5) != 2)
    return 0;
  if (v15 && *v15 > v14 && *((_BYTE *)v15 + v14 + 4) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x198730974);
  }
  v18 = *(_QWORD *)(v17 + 8);
  v19 = v17 + 16;
  v20 = (_DWORD *)((v18 & 1) != 0 ? v19 : v18 + 4);
  if (*v20 != 1)
    return 0;
  if ((int)a3 >= 0x40000000)
  {
    if (JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(v12 + 800), a3))
    {
      v145 = *(_DWORD **)(*(_QWORD *)(v12 + 808) + 112);
      if (*v145 <= (a3 - 0x40000000))
      {
        __break(0xC471u);
        JUMPOUT(0x198730A20);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, *(_QWORD *)&v145[2 * (a3 - 0x40000000) + 2], 0, v140, v141, v142, v143, v144);
      goto LABEL_20;
    }
    JSC::MacroAssemblerARM64::load64(v12, 0x100000001DLL, 0, v140, v141, v142, v143, v144);
    JSC::MacroAssemblerARM64::load64(v12, 0xA000000000, 0, v146, v147, v148, v149, v150);
    v21 = a3 << 35;
  }
  else
  {
    v21 = (a3 << 35) | 0x1D;
  }
  JSC::MacroAssemblerARM64::load64(v12, v21, 0, a4, a5, a6, a7, a8);
LABEL_20:
  JSC::AssemblyHelpers::branchIfNotCell(v12, 0, 1, v22, v23, v24, v25, v26, (uint64_t)&v153);
  v32 = v154;
  v33 = *(_DWORD *)(v12 + 640);
  LODWORD(v151) = v153;
  *(_QWORD *)((char *)&v151 + 4) = v154;
  HIDWORD(v151) = v33;
  v34 = *(unsigned int *)(v12 + 660);
  if ((_DWORD)v34 == *(_DWORD *)(v12 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(v12 + 648, (unint64_t)&v151);
  }
  else
  {
    v35 = *(_QWORD *)(v12 + 648) + 16 * v34;
    *(_DWORD *)v35 = v153;
    *(_QWORD *)(v35 + 4) = v32;
    *(_DWORD *)(v35 + 12) = v33;
    ++*(_DWORD *)(v12 + 660);
  }
  *(_QWORD *)&v151 = v152;
  *((_QWORD *)&v151 + 1) = 2;
  JSC::AssemblyHelpers::branchIfNotString(v12, 0, v27, v28, v29, v30, v31, (uint64_t)&v155);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v151, &v155, v36, v37, v38, v39, v40, v41);
  JSC::MacroAssemblerARM64::load64(v12, 0x800000000, 0, v42, v43, v44, v45, v46);
  JSC::MacroAssemblerARM64::branchTest64(v12, 1, 0, 1, v47, v48, v49, v50, (uint64_t)v164, v51);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v151, v164, v52, v53, v54, v55, v56, v57);
  JSC::MacroAssemblerARM64::branch32(v12, 1, 0x400000000, 1, v58, v59, v60, v61, (uint64_t)v163);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v151, v163, v62, v63, v64, v65, v66, v67);
  JSC::MacroAssemblerARM64::load64(v12, 0x800000000, 1, v68, v69, v70, v71, v72);
  JSC::MacroAssemblerARM64::branchTest32(v12, 0, 0x1000000000, 4, v73, v74, v75, v76, (uint64_t)v162);
  JSC::MacroAssemblerARM64::load8(v12, 1, 0, v77, v78, v79, v80, v81);
  JSC::ARM64Assembler::label((_DWORD *)(v12 + 32), v82, v83, v84, v85, v86, v87, v88, (int *)&v165);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v12 + 56), 335544320, v89, v90, v91, v92, v93, v94);
  if (*(_BYTE *)(v12 + 328))
    v101 = 69;
  else
    v101 = 65;
  v158[0] = v165;
  v158[1] = 0;
  v159 = v101;
  v160 = 15;
  v161 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v162, v12, v95, v96, v97, v98, v99, v100);
  JSC::MacroAssemblerARM64::load16(v12, 1, 0, v102, v103, v104, v105, v106);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v158, v12, v107, v108, v109, v110, v111, v112);
  if (HIDWORD(v151))
  {
    v113 = (int *)v151;
    v114 = (int *)(v151 + 12 * HIDWORD(v151));
    do
    {
      v115 = *v113;
      v116 = *(_QWORD *)(v113 + 1);
      v117 = *(_DWORD *)(v12 + 640);
      v155 = *v113;
      v156 = v116;
      v157 = v117;
      v118 = *(unsigned int *)(v12 + 660);
      if ((_DWORD)v118 == *(_DWORD *)(v12 + 656))
      {
        WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(v12 + 648, (unint64_t)&v155);
      }
      else
      {
        v119 = *(_QWORD *)(v12 + 648) + 16 * v118;
        *(_DWORD *)v119 = v115;
        *(_QWORD *)(v119 + 4) = v156;
        *(_DWORD *)(v119 + 12) = v157;
        ++*(_DWORD *)(v12 + 660);
      }
      v113 += 3;
    }
    while (v113 != v114);
  }
  v120 = a1[1];
  v126 = JSC::MacroAssembler::commute(a4);
  v127 = *(_QWORD *)(v12 + 808);
  v128 = *(_DWORD **)(v127 + 120);
  if (v128 && *v128 > v14 && *((_BYTE *)v128 + v14 + 4) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1987309C0);
  }
  v129 = *(_DWORD **)(v127 + 112);
  if (*v129 <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1987309E0);
  }
  v130 = *(WTF::StringImpl **)(*(_QWORD *)&v129[2 * v14 + 2] + 8);
  if ((v130 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198730A00);
  }
  if (v130 && *((_DWORD *)v130 + 1))
    v131 = WTF::StringImpl::at(v130, 0);
  else
    v131 = 0;
  JSC::JIT::emit_compareAndJump<JSC::OpJless>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::RelationalCondition)::{lambda(JSC::MacroAssemblerARM64::RelationalCondition,JSC::JSValueRegs,JSC::OpJless)#1}::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Imm32>(v120, v126, v131, v121, v122, v123, v124, v125);
  v139 = v151;
  if (v152 != (_BYTE *)v151)
  {
    if ((_QWORD)v151)
    {
      *(_QWORD *)&v151 = 0;
      DWORD2(v151) = 0;
      WTF::fastFree(v139, v132, v133, v134, v135, v136, v137, v138);
    }
  }
  return 1;
}

uint64_t _ZZN3JSC3JIT16emit_compareImplIZNS0_19emit_compareAndJumpINS_8OpJnlessEEEvPKNS_15BaseInstructionINS_14JSOpcodeTraitsEEENS_19MacroAssemblerARM6419RelationalConditionEEUlSA_NS_11JSValueRegsET_E_EEvNS_15VirtualRegisterESE_SA_RKSC_ENKUlSE_SE_SB_SA_E_clESE_SE_SB_SA_(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned __int8 v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  int v52;
  _DWORD *v53;
  unint64_t v54;
  BOOL v55;
  char **v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;

  if (a2 < 0x40000000)
    return 0;
  v9 = a5;
  v10 = a4;
  v13 = *a1;
  v14 = *(_QWORD *)(*a1 + 808);
  v15 = (a2 - 0x40000000);
  v16 = *(_DWORD **)(v14 + 120);
  if (v16)
  {
    if (*v16 > v15 && *((_BYTE *)v16 + v15 + 4) == 3)
      return 0;
  }
  v17 = *(unsigned int **)(v14 + 112);
  v18 = *v17;
  if (*v17 <= v15)
    goto LABEL_49;
  v19 = v17 + 2;
  if (*(_QWORD *)&v19[2 * v15] < 0xFFFE000000000000)
    return 0;
  if ((int)a3 >= 0x40000000)
  {
    v49 = *(_QWORD *)(*(_QWORD *)(v13 + 800) + 56);
    v50 = (a3 - 0x40000000);
    v51 = *(_DWORD **)(v49 + 120);
    if (v51 && *v51 > v50)
    {
      v52 = *((unsigned __int8 *)v51 + v50 + 4);
      if ((v52 - 1) < 2)
      {
LABEL_28:
        if (v18 <= v50)
        {
          __break(0xC471u);
          JUMPOUT(0x198730E10);
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)*a1, *(_QWORD *)&v19[2 * v50], (char)a4, a4, a5, a6, a7, a8);
        goto LABEL_11;
      }
      if (v52)
      {
        if (v52 != 3)
        {
          __break(0xC471u);
          JUMPOUT(0x198730DB0);
        }
        goto LABEL_42;
      }
    }
    v53 = *(_DWORD **)(v49 + 112);
    if (*v53 > v50)
    {
      v54 = *(_QWORD *)&v53[2 * v50 + 2];
      if (v54)
        v55 = (v54 & 0xFFFE000000000002) == 0;
      else
        v55 = 0;
      if (!v55)
        goto LABEL_28;
      v56 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x4C));
      if (v56 != &JSC::SymbolTable::s_info && v56 != &JSC::JSTemplateObjectDescriptor::s_info)
        goto LABEL_28;
LABEL_42:
      JSC::MacroAssemblerARM64::load64(*a1, 0x100000001DLL, (char)a4, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::load64(v13, v10 | 0xA000000000, (char)v10, v58, v59, v60, v61, v62);
      v20 = v10 | (unint64_t)(a3 << 35);
      v22 = v13;
      v21 = (char)v10;
      goto LABEL_10;
    }
LABEL_49:
    __break(0xC471u);
    JUMPOUT(0x198730D88);
  }
  v20 = (a3 << 35) | 0x1D;
  v21 = (char)a4;
  v22 = *a1;
LABEL_10:
  JSC::MacroAssemblerARM64::load64(v22, v20, v21, a4, a5, a6, a7, a8);
LABEL_11:
  v27 = (char)v10;
  JSC::MacroAssemblerARM64::branch64(v13, 3, v27, 27, v23, v24, v25, v26, (uint64_t)&v63);
  v32 = v64;
  v33 = *(_DWORD *)(v13 + 640);
  v65 = v63;
  v66 = v64;
  v67 = v33;
  v34 = *(unsigned int *)(v13 + 660);
  if ((_DWORD)v34 == *(_DWORD *)(v13 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(v13 + 648, (unint64_t)&v65);
  }
  else
  {
    v35 = *(_QWORD *)(v13 + 648) + 16 * v34;
    *(_DWORD *)v35 = v63;
    *(_QWORD *)(v35 + 4) = v32;
    *(_DWORD *)(v35 + 12) = v33;
    ++*(_DWORD *)(v13 + 660);
  }
  v36 = a1[1];
  if (v9 - 10 >= 4)
    v37 = v9;
  else
    v37 = 23 - v9;
  v38 = *(_QWORD *)(v13 + 808);
  v39 = *(_DWORD **)(v38 + 120);
  if (v39 && *v39 > v15 && *((_BYTE *)v39 + v15 + 4) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x198730DD0);
  }
  v40 = *(_DWORD **)(v38 + 112);
  if (*v40 <= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198730DF0);
  }
  v41 = *(_QWORD *)v36;
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)v36, v37, v27, v40[2 * v15 + 2], v28, v29, v30, v31, (uint64_t)&v63);
  v42 = (_QWORD *)(v41 + 624);
  v43 = v64;
  v44 = **(_DWORD **)(v36 + 8) + (*(_DWORD *)(v41 + 640) >> 2);
  v65 = v63;
  v66 = v64;
  v67 = v44;
  v45 = *(unsigned int *)(v41 + 636);
  if ((_DWORD)v45 == *(_DWORD *)(v41 + 632))
  {
    v47 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v45 + 1, (unint64_t)&v65);
    v48 = *(_QWORD *)(v41 + 624) + 16 * *(unsigned int *)(v41 + 636);
    *(_DWORD *)v48 = *(_DWORD *)v47;
    *(_QWORD *)(v48 + 4) = *(_QWORD *)(v47 + 4);
    *(_DWORD *)(v48 + 12) = *(_DWORD *)(v47 + 12);
  }
  else
  {
    v46 = *v42 + 16 * v45;
    *(_DWORD *)v46 = v63;
    *(_QWORD *)(v46 + 4) = v43;
    *(_DWORD *)(v46 + 12) = v44;
  }
  ++*(_DWORD *)(v41 + 636);
  return 1;
}

uint64_t _ZZN3JSC3JIT16emit_compareImplIZNS0_19emit_compareAndJumpINS_11OpJngreaterEEEvPKNS_15BaseInstructionINS_14JSOpcodeTraitsEEENS_19MacroAssemblerARM6419RelationalConditionEEUlSA_NS_11JSValueRegsET_E_EEvNS_15VirtualRegisterESE_SA_RKSC_ENKUlSE_SE_SA_E_clESE_SE_SA_(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  _DWORD *v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int8x8_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  _DWORD *v62;
  uint64_t *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  int *v77;
  int *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int8x8_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int i;
  unsigned int v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int *v121;
  int *v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _DWORD *v130;
  _DWORD *v131;
  WTF::StringImpl *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _DWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  int v162;
  __int128 v163;
  _BYTE v164[28];
  int v165;
  uint64_t v166;
  unsigned int v167[2];
  char v168;
  __int16 v169;
  char v170;
  unsigned int v171[3];
  int v172;
  int v173;
  int v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  int v178;

  if (a2 < 0x40000000)
    return 0;
  LODWORD(v9) = a4;
  v12 = *a1;
  v13 = *(_QWORD *)(*a1 + 808);
  v14 = (a2 - 0x40000000);
  v15 = *(_DWORD **)(v13 + 120);
  if (v15)
  {
    if (*v15 > v14 && *((_BYTE *)v15 + v14 + 4) == 3)
      return 0;
  }
  v16 = *(_DWORD **)(v13 + 112);
  if (*v16 <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1987314F4);
  }
  v17 = *(_QWORD *)&v16[2 * v14 + 2];
  if ((v17 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v17 + 5) != 2)
    return 0;
  if (v15 && *v15 > v14 && *((_BYTE *)v15 + v14 + 4) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x198731540);
  }
  v18 = *(_QWORD *)(v17 + 8);
  v19 = v17 + 16;
  v20 = (_DWORD *)((v18 & 1) != 0 ? v19 : v18 + 4);
  if (*v20 != 1)
    return 0;
  if ((int)a3 >= 0x40000000)
  {
    if (JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(v12 + 800), a3))
    {
      v155 = *(_DWORD **)(*(_QWORD *)(v12 + 808) + 112);
      if (*v155 <= (a3 - 0x40000000))
      {
        __break(0xC471u);
        JUMPOUT(0x198731688);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, *(_QWORD *)&v155[2 * (a3 - 0x40000000) + 2], 0, v150, v151, v152, v153, v154);
      goto LABEL_19;
    }
    JSC::MacroAssemblerARM64::load64(v12, 0x100000001DLL, 0, v150, v151, v152, v153, v154);
    JSC::MacroAssemblerARM64::load64(v12, 0xA000000000, 0, v156, v157, v158, v159, v160);
    v21 = a3 << 35;
  }
  else
  {
    v21 = (a3 << 35) | 0x1D;
  }
  JSC::MacroAssemblerARM64::load64(v12, v21, 0, a4, a5, a6, a7, a8);
LABEL_19:
  JSC::AssemblyHelpers::branchIfNotCell(v12, 0, 1, v22, v23, v24, v25, v26, (uint64_t)&v165);
  v34 = *(_DWORD *)(v12 + 640);
  LODWORD(v163) = v165;
  *(_QWORD *)((char *)&v163 + 4) = v166;
  HIDWORD(v163) = v34;
  v35 = *(unsigned int *)(v12 + 660);
  if ((_DWORD)v35 == *(_DWORD *)(v12 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(v12 + 648, (unint64_t)&v163);
  }
  else
  {
    v36 = *(_QWORD *)(v12 + 648) + 16 * v35;
    *(_DWORD *)v36 = v165;
    *(_QWORD *)(v36 + 4) = *(_QWORD *)((char *)&v163 + 4);
    *(_DWORD *)(v36 + 12) = HIDWORD(v163);
    ++*(_DWORD *)(v12 + 660);
  }
  *(_QWORD *)&v163 = v164;
  *((_QWORD *)&v163 + 1) = 2;
  if (!*(_BYTE *)(v12 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198731560);
  }
  *(_DWORD *)(*(_QWORD *)(v12 + 296) + 208) &= ~*(_DWORD *)(v12 + 320);
  v37 = *(_BYTE *)(v12 + 304) & 0x1F | 0x38405000;
  v38 = *(_DWORD *)(v12 + 200);
  if (v38 + 4 > *(_DWORD *)(v12 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 56), v27, v28, v29, v30, v31, v32, v33);
    v38 = *(_DWORD *)(v12 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v12 + 56) + v38) = v37;
  *(_DWORD *)(v12 + 200) += 4;
  JSC::MacroAssemblerARM64::branch32(v12, 1, 17, 2, v30, v31, v32, v33, (uint64_t)&v176);
  v44 = v176;
  if (v176 != -1)
  {
    v45 = HIDWORD(v163);
    if (HIDWORD(v163) == DWORD2(v163))
    {
      v46 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v163, (void *)(HIDWORD(v163) + 1), (unint64_t)&v176, v39, v40, v41, v42, v43);
      v48 = *v46;
      v47 = (uint64_t *)(v46 + 1);
      v44 = v48;
      v45 = HIDWORD(v163);
    }
    else
    {
      v47 = &v177;
    }
    v49 = v163 + 12 * v45;
    *(_DWORD *)v49 = v44;
    *(_QWORD *)(v49 + 4) = *v47;
    ++HIDWORD(v163);
  }
  JSC::MacroAssemblerARM64::load64(v12, 0x800000000, 0, v39, v40, v41, v42, v43);
  JSC::MacroAssemblerARM64::branchTest64(v12, 1, 0, 1, v50, v51, v52, v53, (uint64_t)&v174, v54);
  v60 = v174;
  if (v174 != -1)
  {
    v61 = HIDWORD(v163);
    if (HIDWORD(v163) == DWORD2(v163))
    {
      v62 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v163, (void *)(HIDWORD(v163) + 1), (unint64_t)&v174, v55, v56, v57, v58, v59);
      v64 = *v62;
      v63 = (uint64_t *)(v62 + 1);
      v60 = v64;
      v61 = HIDWORD(v163);
    }
    else
    {
      v63 = &v175;
    }
    v65 = v163 + 12 * v61;
    *(_DWORD *)v65 = v60;
    *(_QWORD *)(v65 + 4) = *v63;
    ++HIDWORD(v163);
  }
  if (!*(_BYTE *)(v12 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198731590);
  }
  *(_DWORD *)(*(_QWORD *)(v12 + 296) + 208) &= ~*(_DWORD *)(v12 + 320);
  JSC::MacroAssemblerARM64::load32(v12, 0x400000000, *(char *)(v12 + 304), v55, v56, v57, v58, v59);
  JSC::MacroAssemblerARM64::branch32(v12, 1, 17, 1, v66, v67, v68, v69, (uint64_t)&v172);
  v75 = v172;
  if (v172 != -1)
  {
    v76 = HIDWORD(v163);
    if (HIDWORD(v163) == DWORD2(v163))
    {
      v77 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v163, (void *)(HIDWORD(v163) + 1), (unint64_t)&v172, v70, v71, v72, v73, v74);
      v79 = *v77;
      v78 = v77 + 1;
      v75 = v79;
      v76 = HIDWORD(v163);
    }
    else
    {
      v78 = &v173;
    }
    v80 = v163 + 12 * v76;
    *(_DWORD *)v80 = v75;
    *(_QWORD *)(v80 + 4) = *(_QWORD *)v78;
    ++HIDWORD(v163);
  }
  JSC::MacroAssemblerARM64::load64(v12, 0x800000000, 1, v70, v71, v72, v73, v74);
  if (!*(_BYTE *)(v12 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987315B0);
  }
  *(_DWORD *)(*(_QWORD *)(v12 + 296) + 208) &= ~*(_DWORD *)(v12 + 320);
  JSC::MacroAssemblerARM64::load32(v12, 0x1000000000, *(char *)(v12 + 304), v81, v82, v83, v84, v85);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)4, v12, 0, 17, v86, v87, v88, v89, (uint64_t)v171, v90);
  JSC::MacroAssemblerARM64::load8(v12, 1, 0, v91, v92, v93, v94, v95);
  for (i = *(_DWORD *)(v12 + 200); i < *(_DWORD *)(v12 + 52); *(_DWORD *)(v12 + 200) = i)
  {
    v161 = i;
    if ((i + 4) > *(_DWORD *)(v12 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 56), v96, v97, v98, v99, v100, v101, v102);
      v161 = *(_DWORD *)(v12 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v12 + 56) + v161) = -721215457;
    i = *(_DWORD *)(v12 + 200) + 4;
  }
  v104 = i;
  if ((i + 4) > *(_DWORD *)(v12 + 192))
  {
    v162 = i;
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 56), v96, v97, v98, v99, v100, v101, v102);
    i = v162;
    v104 = *(_DWORD *)(v12 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v12 + 56) + v104) = 335544320;
  *(_DWORD *)(v12 + 200) += 4;
  if (*(_BYTE *)(v12 + 328))
    v105 = 69;
  else
    v105 = 65;
  v167[0] = i;
  v167[1] = 0;
  v168 = v105;
  v169 = 15;
  v170 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v171, v12, v97, v98, v99, v100, v101, v102);
  JSC::MacroAssemblerARM64::load16(v12, 1, 0, v106, v107, v108, v109, v110);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v167, v12, v111, v112, v113, v114, v115, v116);
  if (HIDWORD(v163))
  {
    v121 = (int *)v163;
    v122 = (int *)(v163 + 12 * HIDWORD(v163));
    do
    {
      v123 = *v121;
      v124 = *(_QWORD *)(v121 + 1);
      v125 = *(_DWORD *)(v12 + 640);
      v176 = *v121;
      v177 = v124;
      v178 = v125;
      v126 = *(unsigned int *)(v12 + 660);
      if ((_DWORD)v126 == *(_DWORD *)(v12 + 656))
      {
        WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(v12 + 648, (unint64_t)&v176);
      }
      else
      {
        v127 = *(_QWORD *)(v12 + 648) + 16 * v126;
        *(_DWORD *)v127 = v123;
        *(_QWORD *)(v127 + 4) = v177;
        *(_DWORD *)(v127 + 12) = v178;
        ++*(_DWORD *)(v12 + 660);
      }
      v121 += 3;
    }
    while (v121 != v122);
  }
  v128 = a1[1];
  if ((v9 - 10) >= 4)
    v9 = v9;
  else
    v9 = (23 - v9);
  v129 = *(_QWORD *)(v12 + 808);
  v130 = *(_DWORD **)(v129 + 120);
  if (v130 && *v130 > v14 && *((_BYTE *)v130 + v14 + 4) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x198731628);
  }
  v131 = *(_DWORD **)(v129 + 112);
  if (*v131 <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198731648);
  }
  v132 = *(WTF::StringImpl **)(*(_QWORD *)&v131[2 * v14 + 2] + 8);
  if ((v132 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198731668);
  }
  if (v132 && *((_DWORD *)v132 + 1))
    v133 = WTF::StringImpl::at(v132, 0);
  else
    v133 = 0;
  v134 = *(_QWORD *)v128;
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)v128, v9, 0, v133, v117, v118, v119, v120, (uint64_t)&v174);
  v142 = (_QWORD *)(v134 + 624);
  v143 = v175;
  v144 = **(_DWORD **)(v128 + 8) + (*(_DWORD *)(v134 + 640) >> 2);
  v176 = v174;
  v177 = v175;
  v178 = v144;
  v145 = *(unsigned int *)(v134 + 636);
  if ((_DWORD)v145 == *(_DWORD *)(v134 + 632))
  {
    v148 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v142, v145 + 1, (unint64_t)&v176);
    v149 = *(_QWORD *)(v134 + 624) + 16 * *(unsigned int *)(v134 + 636);
    *(_DWORD *)v149 = *(_DWORD *)v148;
    *(_QWORD *)(v149 + 4) = *(_QWORD *)(v148 + 4);
    *(_DWORD *)(v149 + 12) = *(_DWORD *)(v148 + 12);
  }
  else
  {
    v146 = *v142 + 16 * v145;
    *(_DWORD *)v146 = v174;
    *(_QWORD *)(v146 + 4) = v143;
    *(_DWORD *)(v146 + 12) = v144;
  }
  ++*(_DWORD *)(v134 + 636);
  v147 = v163;
  if (v164 != (_BYTE *)v163)
  {
    if ((_QWORD)v163)
    {
      *(_QWORD *)&v163 = 0;
      DWORD2(v163) = 0;
      WTF::fastFree(v147, v135, v136, v137, v138, v139, v140, v141);
    }
  }
  return 1;
}

uint64_t _ZZN3JSC3JIT16emit_compareImplIZNS0_19emit_compareAndJumpINS_11OpJngreaterEEEvPKNS_15BaseInstructionINS_14JSOpcodeTraitsEEENS_19MacroAssemblerARM6419RelationalConditionEEUlSA_NS_11JSValueRegsET_E_EEvNS_15VirtualRegisterESE_SA_RKSC_ENKUlSE_SE_SB_SA_E_clESE_SE_SB_SA_(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned __int8 v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  int v52;
  _DWORD *v53;
  unint64_t v54;
  BOOL v55;
  char **v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;

  if (a2 < 0x40000000)
    return 0;
  v9 = a5;
  v10 = a4;
  v13 = *a1;
  v14 = *(_QWORD *)(*a1 + 808);
  v15 = (a2 - 0x40000000);
  v16 = *(_DWORD **)(v14 + 120);
  if (v16)
  {
    if (*v16 > v15 && *((_BYTE *)v16 + v15 + 4) == 3)
      return 0;
  }
  v17 = *(unsigned int **)(v14 + 112);
  v18 = *v17;
  if (*v17 <= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198731A28);
  }
  v19 = v17 + 2;
  if (*(_QWORD *)&v19[2 * v15] < 0xFFFE000000000000)
    return 0;
  if ((int)a3 >= 0x40000000)
  {
    v49 = *(_QWORD *)(*(_QWORD *)(v13 + 800) + 56);
    v50 = (a3 - 0x40000000);
    v51 = *(_DWORD **)(v49 + 120);
    if (!v51 || *v51 <= v50)
      goto LABEL_31;
    v52 = *((unsigned __int8 *)v51 + v50 + 4);
    if ((v52 - 1) < 2)
    {
LABEL_28:
      if (v18 <= v50)
      {
        __break(0xC471u);
        JUMPOUT(0x198731A88);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)*a1, *(_QWORD *)&v19[2 * v50], (char)a4, a4, a5, a6, a7, a8);
      goto LABEL_11;
    }
    if (v52)
    {
      if (v52 == 3)
        goto LABEL_42;
    }
    else
    {
LABEL_31:
      v53 = *(_DWORD **)(v49 + 112);
      if (*v53 > v50)
      {
        v54 = *(_QWORD *)&v53[2 * v50 + 2];
        if (v54)
          v55 = (v54 & 0xFFFE000000000002) == 0;
        else
          v55 = 0;
        if (!v55)
          goto LABEL_28;
        v56 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x4C));
        if (v56 != &JSC::SymbolTable::s_info && v56 != &JSC::JSTemplateObjectDescriptor::s_info)
          goto LABEL_28;
LABEL_42:
        JSC::MacroAssemblerARM64::load64(*a1, 0x100000001DLL, (char)a4, a4, a5, a6, a7, a8);
        JSC::MacroAssemblerARM64::load64(v13, v10 | 0xA000000000, (char)v10, v58, v59, v60, v61, v62);
        v20 = v10 | (unint64_t)(a3 << 35);
        v22 = v13;
        v21 = (char)v10;
        goto LABEL_10;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x198731A08);
  }
  v20 = (a3 << 35) | 0x1D;
  v21 = (char)a4;
  v22 = *a1;
LABEL_10:
  JSC::MacroAssemblerARM64::load64(v22, v20, v21, a4, a5, a6, a7, a8);
LABEL_11:
  v27 = (char)v10;
  JSC::MacroAssemblerARM64::branch64(v13, 3, v27, 27, v23, v24, v25, v26, (uint64_t)&v63);
  v32 = v64;
  v33 = *(_DWORD *)(v13 + 640);
  v65 = v63;
  v66 = v64;
  v67 = v33;
  v34 = *(unsigned int *)(v13 + 660);
  if ((_DWORD)v34 == *(_DWORD *)(v13 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(v13 + 648, (unint64_t)&v65);
  }
  else
  {
    v35 = *(_QWORD *)(v13 + 648) + 16 * v34;
    *(_DWORD *)v35 = v63;
    *(_QWORD *)(v35 + 4) = v32;
    *(_DWORD *)(v35 + 12) = v33;
    ++*(_DWORD *)(v13 + 660);
  }
  v36 = a1[1];
  if (v9 - 10 >= 4)
    v37 = v9;
  else
    v37 = 23 - v9;
  v38 = *(_QWORD *)(v13 + 808);
  v39 = *(_DWORD **)(v38 + 120);
  if (v39 && *v39 > v15 && *((_BYTE *)v39 + v15 + 4) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x198731A48);
  }
  v40 = *(_DWORD **)(v38 + 112);
  if (*v40 <= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198731A68);
  }
  v41 = *(_QWORD *)v36;
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)v36, v37, v27, v40[2 * v15 + 2], v28, v29, v30, v31, (uint64_t)&v63);
  v42 = (_QWORD *)(v41 + 624);
  v43 = v64;
  v44 = **(_DWORD **)(v36 + 8) + (*(_DWORD *)(v41 + 640) >> 2);
  v65 = v63;
  v66 = v64;
  v67 = v44;
  v45 = *(unsigned int *)(v41 + 636);
  if ((_DWORD)v45 == *(_DWORD *)(v41 + 632))
  {
    v47 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v45 + 1, (unint64_t)&v65);
    v48 = *(_QWORD *)(v41 + 624) + 16 * *(unsigned int *)(v41 + 636);
    *(_DWORD *)v48 = *(_DWORD *)v47;
    *(_QWORD *)(v48 + 4) = *(_QWORD *)(v47 + 4);
    *(_DWORD *)(v48 + 12) = *(_DWORD *)(v47 + 12);
  }
  else
  {
    v46 = *v42 + 16 * v45;
    *(_DWORD *)v46 = v63;
    *(_QWORD *)(v46 + 4) = v43;
    *(_DWORD *)(v46 + 12) = v44;
  }
  ++*(_DWORD *)(v41 + 636);
  return 1;
}

void JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint8x8_t v19;
  __int32 v20;
  uint8x8_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  char v32;
  char v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  _BYTE *v38;
  int v39;
  unsigned __int8 *v40;
  char *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned __int8 *v45;
  void *v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int8x8_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int64_t v80;
  char *v81;
  char *v82;
  void *__dst;
  int v84;
  unsigned int v85;
  _WORD v86[4];

  v9 = (uint64_t)a2;
  __dst = v86;
  v84 = 3;
  if (!(_DWORD)a4)
  {
    if (a5 == 1)
      goto LABEL_61;
    v11 = 0;
    goto LABEL_6;
  }
  v86[0] = a4;
  v11 = 1;
  v85 = 1;
  if (a5 != 1)
  {
LABEL_6:
    v86[v11++] = a5 | 0x100;
    v85 = v11;
  }
  v12 = (_DWORD)a2 + 56;
  do
  {
    v13 = 0;
    v14 = 0;
    v15 = (char *)__dst;
    v16 = v11;
    do
    {
      if ((*((_BYTE *)__dst + v13 + 1) & 0x40) != 0)
      {
LABEL_73:
        __break(1u);
        goto LABEL_74;
      }
      v14 |= 1 << *((_BYTE *)__dst + v13 + 1);
      v13 += 2;
    }
    while (2 * v11 != v13);
    v17 = 0;
    do
    {
      v18 = *((_BYTE *)__dst + v17) & 0x7F;
      if (v18 >= 0x40)
        goto LABEL_73;
      v14 &= ~(1 << v18);
      v17 += 2;
    }
    while (2 * v11 != v17);
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v19.i16[0] = vaddlv_u8(v19);
    v20 = v19.i32[0];
    v21 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v14));
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.i32[0] + v20)
    {
      v22 = 0;
      if (v11 <= 1)
        v23 = 1;
      else
        v23 = v11;
      v24 = 2 * v23;
      while (1)
      {
        v25 = *((unsigned __int8 *)__dst + v22 + 1);
        if ((v25 & 0x7Fu) >= 0x40)
          goto LABEL_73;
        if (((v14 >> (v25 & 0x7F)) & 1) != 0)
          break;
        v22 += 2;
        if (v24 == v22)
          goto LABEL_57;
      }
      v26 = *((unsigned __int8 *)__dst + v22);
      if (v26 != v25)
      {
        v27 = (char)v26;
        if ((char)v26 == 63)
        {
          v28 = *(_DWORD *)(v9 + 200);
          v29 = *(_DWORD *)(v9 + 192);
          if (v25 == 31)
            goto LABEL_51;
          v31 = v25 & 0x1F | 0xD2800000;
        }
        else
        {
          v28 = *(_DWORD *)(v9 + 200);
          v29 = *(_DWORD *)(v9 + 192);
          v30 = (char)v25 == 31 || v27 == 31;
          if (!v30)
          {
            v31 = v25 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_52;
          }
LABEL_51:
          v31 = (char)v25 | (32 * v27) | 0x91000000;
        }
LABEL_52:
        if (v28 + 4 > v29)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v28 = *(_DWORD *)(v9 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v9 + 56) + v28) = v31;
        *(_DWORD *)(v9 + 200) += 4;
        v15 = (char *)__dst;
        v16 = v85;
      }
      memmove(&v15[v22], &v15[v22 + 2], 2 * v16 - v22 - 2);
      v11 = v85 - 1;
      goto LABEL_56;
    }
    v32 = *(_BYTE *)__dst;
    v33 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v9, *(char *)__dst, v33, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v85 - 2);
    v34 = v85 - 1;
    v30 = v85 == 1;
    v85 = v34;
    v35 = (unsigned __int8 *)__dst;
    v36 = (unsigned __int8 *)__dst + 2 * v34;
    if (v30)
    {
      v43 = 0;
      v44 = 0;
      v39 = 0;
      a2 = v36;
    }
    else
    {
      v37 = 2 * v34;
      v38 = __dst;
      while (*v38 != v33)
      {
        v38 += 2;
        v37 -= 2;
        if (!v37)
          goto LABEL_36;
      }
      *v38 = v32;
LABEL_36:
      v39 = 0;
      v40 = v35;
      a2 = v36;
      v41 = (char *)v36;
      do
      {
        if (*v35 == v35[1])
        {
          v42 = v35;
          if (v41 != (char *)__dst + 2 * v85)
          {
            v82 = (char *)v36;
            if (v35 == a2)
            {
              v42 = (unsigned __int8 *)v41;
            }
            else
            {
              v80 = v40 - a2;
              v81 = v41;
              memmove(v41, a2, v40 - a2);
              v42 = (unsigned __int8 *)&v81[v80];
            }
            v36 = (unsigned __int8 *)v82;
          }
          a2 = v35 + 2;
          ++v39;
          v41 = (char *)v42;
        }
        v35 += 2;
        v40 += 2;
      }
      while (v35 < v36);
      v35 = (unsigned __int8 *)__dst;
      v43 = v85;
      v44 = v85;
      v36 = (unsigned __int8 *)v41;
    }
    v45 = &v35[2 * v43];
    if (a2 != v45)
    {
      memmove(v36, a2, v45 - a2);
      v44 = v85;
    }
    v11 = v44 - v39;
LABEL_56:
    v85 = v11;
LABEL_57:
    ;
  }
  while (v11);
  v46 = __dst;
  if (v86 != __dst && __dst)
  {
    __dst = 0;
    v84 = 0;
    WTF::fastFree((unint64_t)v46, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_61:
  v12 = -1207811152;
  v47 = *(unsigned int *)(v9 + 640);
  if (v47 >= 4)
  {
    if (!*(_BYTE *)(v9 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198731F78);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)v9, (JSC::ARM64LogicalImmediate *)(v47 >> 2), v9 + 264, a4, a5, a6, a7, a8);
  }
  else
  {
    v12 = -1207811137;
  }
  v48 = *(_DWORD *)(v9 + 200);
  if (v48 + 4 > *(_DWORD *)(v9 + 192))
  {
LABEL_74:
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v48 = *(_DWORD *)(v9 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v9 + 56) + v48) = v12;
  *(_DWORD *)(v9 + 200) += 4;
  JSC::JIT::appendCall(v9, a3, a3, a4, a5, a6, a7, a8, a1);
  JSC::MacroAssemblerARM64::branchTest64(v9, 1, 1, 0xFFFFFFFFLL, v49, v50, v51, v52, (uint64_t)&__dst, v53);
  v59 = *(_QWORD *)(*(_QWORD *)(v9 + 352) + 90440);
  v60 = *(_QWORD *)(v59 + 8);
  v61 = *(unsigned int **)(v59 + 16);
  if (v61)
  {
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 + 1, v61));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v60, v9, v54, v55, v56, v57, v58);
    do
    {
      v70 = __ldaxr(v61);
      v71 = v70 - 1;
    }
    while (__stlxr(v71, v61));
    if (!v71)
    {
      atomic_store(1u, v61);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v61, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v60, v9, v54, v55, v56, v57, v58);
  }
}

void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(void)#1}::operator()(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;

  v9 = (uint64_t)*a1;
  v10 = (*a1)[50];
  if (v10 + 4 > (*a1)[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), a2, a3, a4, a5, a6, a7, a8);
    v10 = *(_DWORD *)(v9 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v9 + 56) + v10) = 285218816;
  *(_DWORD *)(v9 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(v9, 0, ((unint64_t)*a1[1] << 35) | 0x1D, a4, a5, a6, a7, a8);
}

uint64_t JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int i;
  unsigned int v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  int v79;
  _DWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int **v96;
  uint64_t v97;
  unsigned int v98;
  _DWORD *v99;
  unint64_t v100;
  BOOL v101;
  char **v102;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114[2];
  char v115;
  __int16 v116;
  char v117;
  unsigned int v118[3];
  char *v119[3];
  char v120;
  char v121;

  if ((int)a2 < 0x40000000)
    return 0;
  v11 = a5;
  v12 = a4;
  v13 = a3;
  v15 = *(_QWORD *)a1;
  v16 = *(_QWORD *)(*(_QWORD *)a1 + 808);
  v17 = (a2 - 0x40000000);
  v18 = *(_DWORD **)(v16 + 120);
  if (v18)
  {
    if (*v18 > v17 && *((_BYTE *)v18 + v17 + 4) == 3)
      return 0;
  }
  v19 = *(_DWORD **)(v16 + 112);
  if (*v19 <= v17)
  {
    __break(0xC471u);
    JUMPOUT(0x1987324A8);
  }
  if (*(_QWORD *)&v19[2 * v17 + 2] < 0xFFFE000000000000)
    return 0;
  JSC::JIT::linkAllSlowCases(*(_QWORD *)a1, *(unsigned int ***)(a1 + 8), a3, a4, a5, a6, a7, a8);
  v20 = v11;
  JSC::MacroAssemblerARM64::branchTest64(v15, 0, v20, 27, v21, v22, v23, v24, (uint64_t)v118);
  JSC::AssemblyHelpers::unboxDoubleWithoutAssertions(**(_DWORD ***)(a1 + 16), v20, v20, a6, 1, v25, v26, v27);
  v33 = *(_QWORD *)(v15 + 808);
  v34 = *(_DWORD **)(v33 + 120);
  if (v34 && *v34 > v17 && *((_BYTE *)v34 + v17 + 4) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1987324C8);
  }
  v35 = *(_DWORD **)(v33 + 112);
  if (*v35 <= v17)
  {
    __break(0xC471u);
    JUMPOUT(0x1987324E8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v15, (JSC::ARM64LogicalImmediate *)v35[2 * v17 + 2], (char)v13, v28, v29, v30, v31, v32);
  v43 = *(_DWORD *)(v15 + 200);
  if (v43 + 4 > *(_DWORD *)(v15 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 56), v36, v37, v38, v39, v40, v41, v42);
    v43 = *(_DWORD *)(v15 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v15 + 56) + v43) = v12 | (32 * (v13 & 0x1F)) | 0x1E620000;
  *(_DWORD *)(v15 + 200) += 4;
  v44 = *(_QWORD *)(a1 + 24);
  v45 = *(_QWORD *)v44;
  v46 = **(unsigned int **)(v44 + 8);
  v121 = 0;
  v120 = 1;
  v119[0] = (char *)v45;
  v119[1] = &v121;
  v119[2] = &v120;
  JSC::MacroAssemblerARM64::floatingPointCompare<JSC::MacroAssemblerARM64::compareDouble(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}>(v45, v46, 0, v119, v39, v40, v41, v42);
  v54 = *(_DWORD *)(v45 + 200);
  if (v54 + 4 > *(_DWORD *)(v45 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v45 + 56), v47, v48, v49, v50, v51, v52, v53);
    v54 = *(_DWORD *)(v45 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v45 + 56) + v54) = 285218816;
  *(_DWORD *)(v45 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(v45, 0, ((unint64_t)**(unsigned int **)(v44 + 16) << 35) | 0x1D, v49, v50, v51, v52, v53);
  for (i = *(_DWORD *)(v15 + 200); i < *(_DWORD *)(v15 + 52); *(_DWORD *)(v15 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(v15 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 56), v55, v56, v57, v58, v59, v60, v61);
      i = *(_DWORD *)(v15 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v15 + 56) + i) = -721215457;
    i = *(_DWORD *)(v15 + 200) + 4;
  }
  v63 = i;
  if ((i + 4) > *(_DWORD *)(v15 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 56), v55, v56, v57, v58, v59, v60, v61);
    v63 = *(_DWORD *)(v15 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v15 + 56) + v63) = 335544320;
  *(_DWORD *)(v15 + 200) += 4;
  if (*(_BYTE *)(v15 + 328))
    v64 = 69;
  else
    v64 = 65;
  v114[0] = i;
  v114[1] = 0;
  v115 = v64;
  v116 = 15;
  v117 = -1;
  v65 = **(_DWORD **)(a1 + 32) + (*(_DWORD *)(v15 + 640) >> 2);
  if (*(_DWORD *)(v15 + 396) <= v65)
  {
    __break(0xC471u);
    goto LABEL_58;
  }
  LODWORD(v119[0]) = *(_DWORD *)(*(_QWORD *)(v15 + 384) + 4 * v65);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v114, (unsigned int *)v119, v15, v57, v58, v59, v60, v61);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v118, v15, v66, v67, v68, v69, v70, v71);
  v77 = *(_QWORD *)(*(_QWORD *)(v15 + 800) + 56);
  v78 = *(_DWORD **)(v77 + 120);
  if (v78 && *v78 > v17)
  {
    v79 = *((unsigned __int8 *)v78 + v17 + 4);
    if ((v79 - 1) < 2)
    {
LABEL_26:
      v80 = *(_DWORD **)(*(_QWORD *)(v15 + 808) + 112);
      if (*v80 <= v17)
      {
        __break(0xC471u);
        JUMPOUT(0x198732594);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v15, *(_QWORD *)&v80[2 * v17 + 2], (char)v13, v72, v73, v74, v75, v76);
      goto LABEL_28;
    }
    if (v79)
    {
      if (v79 == 3)
        goto LABEL_45;
      __break(0xC471u);
LABEL_58:
      JUMPOUT(0x198732488);
    }
  }
  v99 = *(_DWORD **)(v77 + 112);
  if (*v99 <= v17)
  {
    __break(0xC471u);
    JUMPOUT(0x1987325B4);
  }
  v100 = *(_QWORD *)&v99[2 * v17 + 2];
  if (v100)
    v101 = (v100 & 0xFFFE000000000002) == 0;
  else
    v101 = 0;
  if (!v101)
    goto LABEL_26;
  v102 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v100 & 0xFFFFFFFE) + 0x4C));
  if (v102 != &JSC::SymbolTable::s_info && v102 != &JSC::JSTemplateObjectDescriptor::s_info)
    goto LABEL_26;
LABEL_45:
  JSC::MacroAssemblerARM64::load64(v15, 0x100000001DLL, (char)v13, v72, v73, v74, v75, v76);
  JSC::MacroAssemblerARM64::load64(v15, v13 | 0xA000000000, (char)v13, v104, v105, v106, v107, v108);
  JSC::MacroAssemblerARM64::load64(v15, v13 | (unint64_t)(a2 << 35), (char)v13, v109, v110, v111, v112, v113);
LABEL_28:
  v88 = *(_DWORD *)(v15 + 200);
  if (v88 + 4 > *(_DWORD *)(v15 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 56), v81, v82, v83, v84, v85, v86, v87);
    v88 = *(_DWORD *)(v15 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v15 + 56) + v88) = -129989820;
  *(_DWORD *)(v15 + 200) += 4;
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>((int *)v119, (unsigned __int8 *)v15, **(_QWORD **)(a1 + 40), 4, 0, v85, v86, v87);
  v96 = *(unsigned int ***)(a1 + 48);
  v97 = (uint64_t)*v96;
  v98 = (*v96)[50];
  if (v98 + 4 > (*v96)[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v97 + 56), v89, v90, v91, v92, v93, v94, v95);
    v98 = *(_DWORD *)(v97 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v97 + 56) + v98) = 285218816;
  *(_DWORD *)(v97 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(v97, 0, ((unint64_t)*v96[1] << 35) | 0x1D, v91, v92, v93, v94, v95);
  return 1;
}

void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1}::operator()(uint64_t a1, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17[3];
  unsigned int v18;

  v10 = *(_QWORD *)a1;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)a1, **(_BYTE **)(a1 + 8) == 0, 0, a6, a7, a8, a9, (uint64_t)v17, a2);
  v16 = **(_DWORD **)(a1 + 16) + (*(_DWORD *)(v10 + 640) >> 2);
  if (*(_DWORD *)(v10 + 396) <= v16)
  {
    __break(0xC471u);
  }
  else
  {
    v18 = *(_DWORD *)(*(_QWORD *)(v10 + 384) + 4 * v16);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v17, &v18, v10, v11, v12, v13, v14, v15);
  }
}

uint64_t JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int **v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int i;
  unsigned int v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  int v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int8x8_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  _DWORD *v103;
  unint64_t v104;
  BOOL v105;
  char **v106;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115[2];
  char v116;
  __int16 v117;
  char v118;
  unsigned int v119[3];
  unsigned int v120;
  int v121[3];

  if ((int)a2 < 0x40000000)
    return 0;
  v11 = a5;
  v12 = a4;
  v13 = a3;
  v15 = *(_QWORD *)a1;
  v16 = *(_QWORD *)(*(_QWORD *)a1 + 808);
  v17 = (a2 - 0x40000000);
  v18 = *(_DWORD **)(v16 + 120);
  if (v18)
  {
    if (*v18 > v17 && *((_BYTE *)v18 + v17 + 4) == 3)
      return 0;
  }
  v19 = *(_DWORD **)(v16 + 112);
  if (*v19 <= v17)
  {
    __break(0xC471u);
    JUMPOUT(0x198732B28);
  }
  if (*(_QWORD *)&v19[2 * v17 + 2] < 0xFFFE000000000000)
    return 0;
  JSC::JIT::linkAllSlowCases(*(_QWORD *)a1, *(unsigned int ***)(a1 + 8), a3, a4, a5, a6, a7, a8);
  v20 = v11;
  JSC::MacroAssemblerARM64::branchTest64(v15, 0, v20, 27, v21, v22, v23, v24, (uint64_t)v119);
  JSC::AssemblyHelpers::unboxDoubleWithoutAssertions(**(_DWORD ***)(a1 + 16), v20, v20, a6, 1, v25, v26, v27);
  v33 = *(_QWORD *)(v15 + 808);
  v34 = *(_DWORD **)(v33 + 120);
  if (v34 && *v34 > v17 && *((_BYTE *)v34 + v17 + 4) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x198732B48);
  }
  v35 = *(_DWORD **)(v33 + 112);
  if (*v35 <= v17)
  {
    __break(0xC471u);
    JUMPOUT(0x198732B68);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v15, (JSC::ARM64LogicalImmediate *)v35[2 * v17 + 2], (char)v13, v28, v29, v30, v31, v32);
  v43 = *(_DWORD *)(v15 + 200);
  if (v43 + 4 > *(_DWORD *)(v15 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 56), v36, v37, v38, v39, v40, v41, v42);
    v43 = *(_DWORD *)(v15 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v15 + 56) + v43) = v12 | (32 * (v13 & 0x1F)) | 0x1E620000;
  *(_DWORD *)(v15 + 200) += 4;
  v44 = *(unsigned int ***)(a1 + 24);
  v45 = (uint64_t)*v44;
  v46 = *v44[1];
  v47 = (*v44)[50];
  if (v47 + 4 > (*v44)[48])
  {
    v114 = *v44[1];
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v45 + 56), v46, v37, v38, v39, v40, v41, v42);
    v46 = v114;
    v47 = *(_DWORD *)(v45 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v45 + 56) + v47) = 509681664;
  *(_DWORD *)(v45 + 200) += 4;
  JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(v45, v46, v37, v38, v39, v40, v41, v42, (uint64_t)v121);
  v53 = *v44[2] + (*(_DWORD *)(v45 + 640) >> 2);
  if (*(_DWORD *)(v45 + 396) <= v53)
  {
    __break(0xC471u);
    JUMPOUT(0x198732C54);
  }
  v120 = *(_DWORD *)(*(_QWORD *)(v45 + 384) + 4 * v53);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v121, &v120, v45, v48, v49, v50, v51, v52);
  for (i = *(_DWORD *)(v15 + 200); i < *(_DWORD *)(v15 + 52); *(_DWORD *)(v15 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(v15 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 56), v54, v55, v56, v57, v58, v59, v60);
      i = *(_DWORD *)(v15 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v15 + 56) + i) = -721215457;
    i = *(_DWORD *)(v15 + 200) + 4;
  }
  v62 = i;
  if ((i + 4) > *(_DWORD *)(v15 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 56), v54, v55, v56, v57, v58, v59, v60);
    v62 = *(_DWORD *)(v15 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v15 + 56) + v62) = 335544320;
  *(_DWORD *)(v15 + 200) += 4;
  if (*(_BYTE *)(v15 + 328))
    v63 = 69;
  else
    v63 = 65;
  v115[0] = i;
  v115[1] = 0;
  v116 = v63;
  v117 = 15;
  v118 = -1;
  v64 = **(_DWORD **)(a1 + 32) + (*(_DWORD *)(v15 + 640) >> 2);
  if (*(_DWORD *)(v15 + 396) <= v64)
  {
    __break(0xC471u);
    JUMPOUT(0x198732C5CLL);
  }
  v121[0] = *(_DWORD *)(*(_QWORD *)(v15 + 384) + 4 * v64);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v115, (unsigned int *)v121, v15, v56, v57, v58, v59, v60);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v119, v15, v65, v66, v67, v68, v69, v70);
  v78 = *(_QWORD *)(*(_QWORD *)(v15 + 800) + 56);
  v79 = *(_DWORD **)(v78 + 120);
  if (!v79 || *v79 <= v17)
    goto LABEL_34;
  v80 = *((unsigned __int8 *)v79 + v17 + 4);
  if ((v80 - 1) < 2)
  {
LABEL_27:
    v81 = *(_DWORD **)(*(_QWORD *)(v15 + 808) + 112);
    if (*v81 <= v17)
    {
      __break(0xC471u);
      JUMPOUT(0x198732C0CLL);
    }
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v15, *(_QWORD *)&v81[2 * v17 + 2], (char)v13, v73, v74, v75, v76, v77);
    goto LABEL_29;
  }
  if (v80)
  {
    if (v80 != 3)
      goto LABEL_61;
  }
  else
  {
LABEL_34:
    v103 = *(_DWORD **)(v78 + 112);
    if (*v103 <= v17)
    {
      __break(0xC471u);
      JUMPOUT(0x198732C2CLL);
    }
    v104 = *(_QWORD *)&v103[2 * v17 + 2];
    if (v104)
      v105 = (v104 & 0xFFFE000000000002) == 0;
    else
      v105 = 0;
    if (!v105)
      goto LABEL_27;
    v106 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v104 & 0xFFFFFFFE) + 0x4C));
    if (v106 != &JSC::SymbolTable::s_info && v106 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_27;
  }
  v108 = *(_DWORD *)(v15 + 200);
  if (v108 + 4 > *(_DWORD *)(v15 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 56), v71, v72, v73, v74, v75, v76, v77);
    v108 = *(_DWORD *)(v15 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v15 + 56) + v108) = v13 & 0x1F | 0xF84103A0;
  *(_DWORD *)(v15 + 200) += 4;
  JSC::MacroAssemblerARM64::load64(v15, v13 | 0xA000000000, (char)v13, v73, v74, v75, v76, v77);
  JSC::MacroAssemblerARM64::load64(v15, v13 | (unint64_t)(a2 << 35), (char)v13, v109, v110, v111, v112, v113);
LABEL_29:
  v89 = *(_DWORD *)(v15 + 200);
  if (v89 + 4 > *(_DWORD *)(v15 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 56), v82, v83, v84, v85, v86, v87, v88);
    v89 = *(_DWORD *)(v15 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v15 + 56) + v89) = -129989820;
  *(_DWORD *)(v15 + 200) += 4;
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>(v121, (unsigned __int8 *)v15, **(_QWORD **)(a1 + 40), 4, 0, v86, v87, v88);
  v90 = *(_QWORD *)(a1 + 48);
  v91 = *(_QWORD *)v90;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)v90, **(_BYTE **)(v90 + 8) == 0, 0, v92, v93, v94, v95, (uint64_t)v121, v96);
  v102 = **(_DWORD **)(v90 + 16) + (*(_DWORD *)(v91 + 640) >> 2);
  if (*(_DWORD *)(v91 + 396) <= v102)
  {
LABEL_61:
    __break(0xC471u);
    JUMPOUT(0x198732B08);
  }
  v119[0] = *(_DWORD *)(*(_QWORD *)(v91 + 384) + 4 * v102);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v121, v119, v91, v97, v98, v99, v100, v101);
  return 1;
}

uint64_t JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int **v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int i;
  unsigned int v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  int v78;
  _DWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int8x8_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  _DWORD *v101;
  unint64_t v102;
  BOOL v103;
  char **v104;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117[2];
  char v118;
  __int16 v119;
  char v120;
  unsigned int v121[3];
  unsigned int v122;
  int v123[3];

  if ((int)a2 < 0x40000000)
    return 0;
  v11 = a5;
  v12 = a4;
  v13 = a3;
  v15 = *(_QWORD *)a1;
  v16 = *(_QWORD *)(*(_QWORD *)a1 + 808);
  v17 = (a2 - 0x40000000);
  v18 = *(_DWORD **)(v16 + 120);
  if (v18)
  {
    if (*v18 > v17 && *((_BYTE *)v18 + v17 + 4) == 3)
      return 0;
  }
  v19 = *(_DWORD **)(v16 + 112);
  if (*v19 <= v17)
  {
    __break(0xC471u);
    JUMPOUT(0x198733118);
  }
  if (*(_QWORD *)&v19[2 * v17 + 2] < 0xFFFE000000000000)
    return 0;
  JSC::JIT::linkAllSlowCases(*(_QWORD *)a1, *(unsigned int ***)(a1 + 8), a3, a4, a5, a6, a7, a8);
  v20 = v11;
  JSC::MacroAssemblerARM64::branchTest64(v15, 0, v20, 27, v21, v22, v23, v24, (uint64_t)v121);
  JSC::AssemblyHelpers::unboxDoubleWithoutAssertions(**(_DWORD ***)(a1 + 16), v20, v20, a6, 1, v25, v26, v27);
  v33 = *(_QWORD *)(v15 + 808);
  v34 = *(_DWORD **)(v33 + 120);
  if (v34 && *v34 > v17 && *((_BYTE *)v34 + v17 + 4) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x198733138);
  }
  v35 = *(_DWORD **)(v33 + 112);
  if (*v35 <= v17)
  {
    __break(0xC471u);
    JUMPOUT(0x198733158);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v15, (JSC::ARM64LogicalImmediate *)v35[2 * v17 + 2], (char)v13, v28, v29, v30, v31, v32);
  v43 = *(_DWORD *)(v15 + 200);
  if (v43 + 4 > *(_DWORD *)(v15 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 56), v36, v37, v38, v39, v40, v41, v42);
    v43 = *(_DWORD *)(v15 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v15 + 56) + v43) = v12 | (32 * (v13 & 0x1F)) | 0x1E620000;
  *(_DWORD *)(v15 + 200) += 4;
  v44 = *(unsigned int ***)(a1 + 24);
  v45 = (uint64_t)*v44;
  v46 = *v44[1];
  v47 = (*v44)[50];
  if (v47 + 4 > (*v44)[48])
  {
    v116 = *v44[1];
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v45 + 56), v46, v37, v38, v39, v40, v41, v42);
    v46 = v116;
    v47 = *(_DWORD *)(v45 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v45 + 56) + v47) = 509681664;
  *(_DWORD *)(v45 + 200) += 4;
  JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(v45, v46, v37, v38, v39, v40, v41, v42, (uint64_t)v123);
  v53 = *v44[2] + (*(_DWORD *)(v45 + 640) >> 2);
  if (*(_DWORD *)(v45 + 396) <= v53)
  {
    __break(0xC471u);
    JUMPOUT(0x198733234);
  }
  v122 = *(_DWORD *)(*(_QWORD *)(v45 + 384) + 4 * v53);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v123, &v122, v45, v48, v49, v50, v51, v52);
  for (i = *(_DWORD *)(v15 + 200); i < *(_DWORD *)(v15 + 52); *(_DWORD *)(v15 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(v15 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 56), v54, v55, v56, v57, v58, v59, v60);
      i = *(_DWORD *)(v15 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v15 + 56) + i) = -721215457;
    i = *(_DWORD *)(v15 + 200) + 4;
  }
  v62 = i;
  if ((i + 4) > *(_DWORD *)(v15 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 56), v54, v55, v56, v57, v58, v59, v60);
    v62 = *(_DWORD *)(v15 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v15 + 56) + v62) = 335544320;
  *(_DWORD *)(v15 + 200) += 4;
  if (*(_BYTE *)(v15 + 328))
    v63 = 69;
  else
    v63 = 65;
  v117[0] = i;
  v117[1] = 0;
  v118 = v63;
  v119 = 15;
  v120 = -1;
  v64 = **(_DWORD **)(a1 + 32) + (*(_DWORD *)(v15 + 640) >> 2);
  if (*(_DWORD *)(v15 + 396) <= v64)
  {
    __break(0xC471u);
    JUMPOUT(0x19873323CLL);
  }
  v123[0] = *(_DWORD *)(*(_QWORD *)(v15 + 384) + 4 * v64);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v117, (unsigned int *)v123, v15, v56, v57, v58, v59, v60);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v121, v15, v65, v66, v67, v68, v69, v70);
  v76 = *(_QWORD *)(*(_QWORD *)(v15 + 800) + 56);
  v77 = *(_DWORD **)(v76 + 120);
  if (!v77 || *v77 <= v17)
    goto LABEL_34;
  v78 = *((unsigned __int8 *)v77 + v17 + 4);
  if ((v78 - 1) >= 2)
  {
    if (v78)
    {
      if (v78 != 3)
        goto LABEL_59;
      goto LABEL_45;
    }
LABEL_34:
    v101 = *(_DWORD **)(v76 + 112);
    if (*v101 <= v17)
    {
      __break(0xC471u);
      JUMPOUT(0x19873321CLL);
    }
    v102 = *(_QWORD *)&v101[2 * v17 + 2];
    if (v102)
      v103 = (v102 & 0xFFFE000000000002) == 0;
    else
      v103 = 0;
    if (!v103)
      goto LABEL_27;
    v104 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v102 & 0xFFFFFFFE) + 0x4C));
    if (v104 != &JSC::SymbolTable::s_info && v104 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_27;
LABEL_45:
    JSC::MacroAssemblerARM64::load64(v15, 0x100000001DLL, (char)v13, v71, v72, v73, v74, v75);
    JSC::MacroAssemblerARM64::load64(v15, v13 | 0xA000000000, (char)v13, v106, v107, v108, v109, v110);
    JSC::MacroAssemblerARM64::load64(v15, v13 | (unint64_t)(a2 << 35), (char)v13, v111, v112, v113, v114, v115);
    goto LABEL_29;
  }
LABEL_27:
  v79 = *(_DWORD **)(*(_QWORD *)(v15 + 808) + 112);
  if (*v79 <= v17)
  {
    __break(0xC471u);
    JUMPOUT(0x1987331FCLL);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v15, *(_QWORD *)&v79[2 * v17 + 2], (char)v13, v71, v72, v73, v74, v75);
LABEL_29:
  v87 = *(_DWORD *)(v15 + 200);
  if (v87 + 4 > *(_DWORD *)(v15 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 56), v80, v81, v82, v83, v84, v85, v86);
    v87 = *(_DWORD *)(v15 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v15 + 56) + v87) = -129989820;
  *(_DWORD *)(v15 + 200) += 4;
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>(v123, (unsigned __int8 *)v15, **(_QWORD **)(a1 + 40), 4, 0, v84, v85, v86);
  v88 = *(_QWORD *)(a1 + 48);
  v89 = *(_QWORD *)v88;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)v88, **(_BYTE **)(v88 + 8) == 0, 0, v90, v91, v92, v93, (uint64_t)v123, v94);
  v100 = **(_DWORD **)(v88 + 16) + (*(_DWORD *)(v89 + 640) >> 2);
  if (*(_DWORD *)(v89 + 396) <= v100)
  {
LABEL_59:
    __break(0xC471u);
    JUMPOUT(0x1987330F8);
  }
  v121[0] = *(_DWORD *)(*(_QWORD *)(v89 + 384) + 4 * v100);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v123, v121, v89, v95, v96, v97, v98, v99);
  return 1;
}

void WTF::HashMap<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,WTF::UniqueRef<JSC::MathICGenerationState>,WTF::DefaultHash<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashTraits<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashTraits<WTF::UniqueRef<JSC::MathICGenerationState>>,WTF::HashTableTraits>::add<WTF::UniqueRef<JSC::MathICGenerationState>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t *v34;
  int v35;
  unint64_t v36;
  uint64_t v37;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,WTF::KeyValuePair<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,WTF::UniqueRef<JSC::MathICGenerationState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,WTF::UniqueRef<JSC::MathICGenerationState>>>,WTF::DefaultHash<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashMap<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,WTF::UniqueRef<JSC::MathICGenerationState>,WTF::DefaultHash<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashTraits<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashTraits<WTF::UniqueRef<JSC::MathICGenerationState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = ~(*a3 << 32) + *a3;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (uint64_t *)(v12 + 16 * v19);
  v21 = *v20;
  if (*v20)
  {
    v34 = 0;
    v35 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v37 = 0;
        else
          v37 = *(unsigned int *)(v12 - 4);
        v33 = 0;
        v32 = v12 + 16 * v37;
        goto LABEL_18;
      }
      if (v21 == -1)
        v34 = v20;
      v19 = (v19 + v35) & v14;
      v20 = (uint64_t *)(v12 + 16 * v19);
      v21 = *v20;
      ++v35;
    }
    while (*v20);
    if (v34)
    {
      *v34 = 0;
      v34[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v20 = v34;
    }
  }
  *v20 = v15;
  v22 = *a4;
  *a4 = 0;
  v23 = v20[1];
  v20[1] = v22;
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 24);
    if (v23 + 40 != v24 && v24 != 0)
    {
      *(_QWORD *)(v23 + 24) = 0;
      *(_DWORD *)(v23 + 32) = 0;
      WTF::fastFree(v24, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v23, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  v26 = *a2;
  if (*a2)
    v27 = *(_DWORD *)(v26 - 12) + 1;
  else
    v27 = 1;
  *(_DWORD *)(v26 - 12) = v27;
  v28 = *a2;
  if (*a2)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 > 2 * v30)
      goto LABEL_17;
    goto LABEL_35;
  }
  if (3 * v31 <= 4 * v30)
  {
    if (!(_DWORD)v31)
    {
      v36 = 8;
      goto LABEL_32;
    }
LABEL_35:
    v36 = ((_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31)));
LABEL_32:
    v20 = WTF::HashTable<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,WTF::KeyValuePair<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,WTF::UniqueRef<JSC::MathICGenerationState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,WTF::UniqueRef<JSC::MathICGenerationState>>>,WTF::DefaultHash<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashMap<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,WTF::UniqueRef<JSC::MathICGenerationState>,WTF::DefaultHash<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashTraits<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashTraits<WTF::UniqueRef<JSC::MathICGenerationState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>>::rehash(a2, v36, (uint64_t)v20, (uint64_t)a4, a5, a6, a7, a8);
    v28 = *a2;
    if (*a2)
      v31 = *(unsigned int *)(v28 - 4);
    else
      v31 = 0;
  }
LABEL_17:
  v32 = v28 + 16 * v31;
  v33 = 1;
LABEL_18:
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v33;
}

void JSC::JIT::callOperationWithResult<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::UnaryArithProfile *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>(int *a1, uint64_t a2, char a3, JSC::ARM64LogicalImmediate *this, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53[3];

  v11 = -1207811152;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)this, 2, (uint64_t)this, a5, a6, a7, a8);
  v19 = *(unsigned int *)(a2 + 640);
  if (v19 >= 4)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      return;
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)(v19 >> 2), a2 + 264, v14, v15, v16, v17, v18);
  }
  else
  {
    v11 = -1207811137;
  }
  v20 = *(_DWORD *)(a2 + 200);
  if (v20 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v12, v13, v14, v15, v16, v17, v18);
    v20 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v20) = v11;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::JIT::appendCall(a2, (uint64_t)operationArithNegateProfiled, v13, v14, v15, v16, v17, v18, a1);
  JSC::MacroAssemblerARM64::branchTest64(a2, 1, 1, 0xFFFFFFFFLL, v21, v22, v23, v24, (uint64_t)v53, v25);
  v31 = *(_QWORD *)(*(_QWORD *)(a2 + 352) + 90440);
  v32 = *(_QWORD *)(v31 + 8);
  v33 = *(unsigned int **)(v31 + 16);
  if (v33)
  {
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v53, v32, a2, v26, v27, v28, v29, v30);
    do
    {
      v42 = __ldaxr(v33);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v33));
    if (!v43)
    {
      atomic_store(1u, v33);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v33, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v53, v32, a2, v26, v27, v28, v29, v30);
  }
  if (a3)
  {
    v44 = *(_DWORD *)(a2 + 200);
    if (v44 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v35, v36, v37, v38, v39, v40, v41);
      v44 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v44) = a3 & 0x1F | 0xAA0003E0;
    *(_DWORD *)(a2 + 200) += 4;
  }
}

void JSC::JIT::callOperationWithResult<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45[3];

  v10 = -1207811152;
  v11 = *(unsigned int *)(a2 + 640);
  if (v11 >= 4)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      return;
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)(v11 >> 2), a2 + 264, a4, a5, a6, a7, a8);
  }
  else
  {
    v10 = -1207811137;
  }
  v12 = *(_DWORD *)(a2 + 200);
  if (v12 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v12) = v10;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::JIT::appendCall(a2, (uint64_t)operationArithNegate, a3, a4, a5, a6, a7, a8, a1);
  JSC::MacroAssemblerARM64::branchTest64(a2, 1, 1, 0xFFFFFFFFLL, v13, v14, v15, v16, (uint64_t)v45, v17);
  v23 = *(_QWORD *)(*(_QWORD *)(a2 + 352) + 90440);
  v24 = *(_QWORD *)(v23 + 8);
  v25 = *(unsigned int **)(v23 + 16);
  if (v25)
  {
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v45, v24, a2, v18, v19, v20, v21, v22);
    do
    {
      v34 = __ldaxr(v25);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v25));
    if (!v35)
    {
      atomic_store(1u, v25);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v25, v27, v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v45, v24, a2, v18, v19, v20, v21, v22);
  }
  v36 = *(_DWORD *)(a2 + 200);
  if (v36 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v27, v28, v29, v30, v31, v32, v33);
    v36 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v36) = -1442839583;
  *(_DWORD *)(a2 + 200) += 4;
}

uint64_t *WTF::HashTable<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,WTF::KeyValuePair<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,WTF::UniqueRef<JSC::MathICGenerationState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,WTF::UniqueRef<JSC::MathICGenerationState>>>,WTF::DefaultHash<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashMap<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,WTF::UniqueRef<JSC::MathICGenerationState>,WTF::DefaultHash<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashTraits<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashTraits<WTF::UniqueRef<JSC::MathICGenerationState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v43;
  unint64_t v44;
  uint64_t *result;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v21 = 0;
    v22 = 0;
    do
    {
      v23 = (uint64_t *)(v10 + 16 * v21);
      v24 = *v23;
      if (*v23)
      {
        if (v24 != -1)
        {
          v25 = *a1;
          if (*a1)
            v26 = *(_DWORD *)(v25 - 8);
          else
            v26 = 0;
          v27 = (~(v24 << 32) + v24) ^ ((unint64_t)(~(v24 << 32) + v24) >> 22);
          v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
          v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
          v30 = v26 & ((v29 >> 31) ^ v29);
          v31 = 1;
          do
          {
            v32 = v30;
            v33 = *(_QWORD *)(v25 + 16 * v30);
            v30 = (v30 + v31++) & v26;
          }
          while (v33);
          v34 = (uint64_t *)(v25 + 16 * v32);
          v35 = v34[1];
          v34[1] = 0;
          if (v35)
          {
            v36 = *(_QWORD *)(v35 + 24);
            if (v35 + 40 != v36 && v36 != 0)
            {
              *(_QWORD *)(v35 + 24) = 0;
              *(_DWORD *)(v35 + 32) = 0;
              WTF::fastFree(v36, v14, v15, v16, v17, v18, v19, v20);
            }
            WTF::fastFree(v35, v14, v15, v16, v17, v18, v19, v20);
          }
          *v34 = *v23;
          v38 = v10 + 16 * v21;
          v39 = *(_QWORD *)(v38 + 8);
          *(_QWORD *)(v38 + 8) = 0;
          v34[1] = v39;
          v40 = *(_QWORD *)(v38 + 8);
          *(_QWORD *)(v38 + 8) = 0;
          if (v40)
          {
            v41 = *(_QWORD *)(v40 + 24);
            if (v40 + 40 != v41 && v41 != 0)
            {
              *(_QWORD *)(v40 + 24) = 0;
              *(_DWORD *)(v40 + 32) = 0;
              WTF::fastFree(v41, v14, v15, v16, v17, v18, v19, v20);
            }
            WTF::fastFree(v40, v14, v15, v16, v17, v18, v19, v20);
          }
          if (v23 == (uint64_t *)a3)
            v22 = v34;
        }
      }
      else
      {
        v43 = v23[1];
        v23[1] = 0;
        if (v43)
        {
          v44 = *(_QWORD *)(v43 + 24);
          if (v43 + 40 != v44 && v44 != 0)
          {
            *(_QWORD *)(v43 + 24) = 0;
            *(_DWORD *)(v43 + 32) = 0;
            WTF::fastFree(v44, v14, v15, v16, v17, v18, v19, v20);
          }
          WTF::fastFree(v43, v14, v15, v16, v17, v18, v19, v20);
        }
      }
      ++v21;
    }
    while (v21 != v11);
  }
  else
  {
    v22 = 0;
    result = 0;
    if (!v10)
      return result;
  }
  WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
  return v22;
}

void JSC::JIT::callOperationWithResult<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,void *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>(int *a1, uint64_t a2, uint64_t a3, JSC::ARM64LogicalImmediate *this, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52[3];

  v11 = -1207811152;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)this, 2, (uint64_t)this, a5, a6, a7, a8);
  v19 = *(unsigned int *)(a2 + 640);
  if (v19 >= 4)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      return;
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)(v19 >> 2), a2 + 264, v14, v15, v16, v17, v18);
  }
  else
  {
    v11 = -1207811137;
  }
  v20 = *(_DWORD *)(a2 + 200);
  if (v20 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v12, v13, v14, v15, v16, v17, v18);
    v20 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v20) = v11;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::JIT::appendCall(a2, a3, v13, v14, v15, v16, v17, v18, a1);
  JSC::MacroAssemblerARM64::branchTest64(a2, 1, 1, 0xFFFFFFFFLL, v21, v22, v23, v24, (uint64_t)v52, v25);
  v31 = *(_QWORD *)(*(_QWORD *)(a2 + 352) + 90440);
  v32 = *(_QWORD *)(v31 + 8);
  v33 = *(unsigned int **)(v31 + 16);
  if (v33)
  {
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v52, v32, a2, v26, v27, v28, v29, v30);
    do
    {
      v42 = __ldaxr(v33);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v33));
    if (!v43)
    {
      atomic_store(1u, v33);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v33, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v52, v32, a2, v26, v27, v28, v29, v30);
  }
}

_QWORD *WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::JIT::emitMathICSlow<JSC::OpNegate,JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::UnaryArithProfile *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *)>(JSC::JITUnaryMathIC<JSC::JITNegGenerator> *,JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::UnaryArithProfile *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *))::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 784);
  v4 = *(_DWORD *)(v3 - 8);
  v5 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(v3 + 16 * v8);
  if (v9 != v2)
  {
    v11 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v11) & v4;
      v9 = *(_QWORD *)(v3 + 16 * v8);
      ++v11;
      if (v9 == v2)
        return JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::finalizeInlineCode(*(_QWORD **)(a1 + 32), *(int **)(v3 + 16 * v8 + 8), a2);
    }
    v8 = *(unsigned int *)(v3 - 4);
  }
  return JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::finalizeInlineCode(*(_QWORD **)(a1 + 32), *(int **)(v3 + 16 * v8 + 8), a2);
}

void JSC::JIT::callOperationWithResult<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::BinaryArithProfile *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>(int *a1, uint64_t a2, uint64_t a3, JSC::ARM64LogicalImmediate *this, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52[3];

  v11 = -1207811152;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)this, 3, (uint64_t)this, a5, a6, a7, a8);
  v19 = *(unsigned int *)(a2 + 640);
  if (v19 >= 4)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      return;
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)(v19 >> 2), a2 + 264, v14, v15, v16, v17, v18);
  }
  else
  {
    v11 = -1207811137;
  }
  v20 = *(_DWORD *)(a2 + 200);
  if (v20 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v12, v13, v14, v15, v16, v17, v18);
    v20 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v20) = v11;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::JIT::appendCall(a2, a3, v13, v14, v15, v16, v17, v18, a1);
  JSC::MacroAssemblerARM64::branchTest64(a2, 1, 1, 0xFFFFFFFFLL, v21, v22, v23, v24, (uint64_t)v52, v25);
  v31 = *(_QWORD *)(*(_QWORD *)(a2 + 352) + 90440);
  v32 = *(_QWORD *)(v31 + 8);
  v33 = *(unsigned int **)(v31 + 16);
  if (v33)
  {
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v52, v32, a2, v26, v27, v28, v29, v30);
    do
    {
      v42 = __ldaxr(v33);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v33));
    if (!v43)
    {
      atomic_store(1u, v33);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v33, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v52, v32, a2, v26, v27, v28, v29, v30);
  }
}

_QWORD *WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::JIT::emitMathICSlow<JSC::OpAdd,JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::BinaryArithProfile *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *)>(JSC::JITBinaryMathIC<JSC::JITAddGenerator> *,JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::BinaryArithProfile *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *))::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 784);
  v4 = *(_DWORD *)(v3 - 8);
  v5 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(v3 + 16 * v8);
  if (v9 != v2)
  {
    v11 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v11) & v4;
      v9 = *(_QWORD *)(v3 + 16 * v8);
      ++v11;
      if (v9 == v2)
        return JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::finalizeInlineCode(*(_QWORD **)(a1 + 32), *(int **)(v3 + 16 * v8 + 8), a2);
    }
    v8 = *(unsigned int *)(v3 - 4);
  }
  return JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::finalizeInlineCode(*(_QWORD **)(a1 + 32), *(int **)(v3 + 16 * v8 + 8), a2);
}

_QWORD *WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::JIT::emitMathICSlow<JSC::OpMul,JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::BinaryArithProfile *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *)>(JSC::JITBinaryMathIC<JSC::JITMulGenerator> *,JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::BinaryArithProfile *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *))::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 784);
  v4 = *(_DWORD *)(v3 - 8);
  v5 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(v3 + 16 * v8);
  if (v9 != v2)
  {
    v11 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v11) & v4;
      v9 = *(_QWORD *)(v3 + 16 * v8);
      ++v11;
      if (v9 == v2)
        return JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::finalizeInlineCode(*(_QWORD **)(a1 + 32), *(int **)(v3 + 16 * v8 + 8), a2);
    }
    v8 = *(unsigned int *)(v3 - 4);
  }
  return JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::finalizeInlineCode(*(_QWORD **)(a1 + 32), *(int **)(v3 + 16 * v8 + 8), a2);
}

_QWORD *WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::JIT::emitMathICSlow<JSC::OpSub,JSC::JITSubGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::BinaryArithProfile *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *)>(JSC::JITBinaryMathIC<JSC::JITSubGenerator> *,JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::BinaryArithProfile *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *))::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 784);
  v4 = *(_DWORD *)(v3 - 8);
  v5 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(v3 + 16 * v8);
  if (v9 != v2)
  {
    v11 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v11) & v4;
      v9 = *(_QWORD *)(v3 + 16 * v8);
      ++v11;
      if (v9 == v2)
        return JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::finalizeInlineCode(*(_QWORD **)(a1 + 32), *(int **)(v3 + 16 * v8 + 8), a2);
    }
    v8 = *(unsigned int *)(v3 - 4);
  }
  return JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::finalizeInlineCode(*(_QWORD **)(a1 + 32), *(int **)(v3 + 16 * v8 + 8), a2);
}

void WTF::ScopedLambdaFunctor<void ()(void),BOOL JSC::JIT::compileTailCall<JSC::OpTailCall>(JSC::OpTailCall const&,JSC::BaselineUnlinkedCallLinkInfo *,unsigned int)::$_0>::implFunction(uint64_t a1)
{
  JSC::CCallHelpers *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  unint64_t v13;
  WTF *v15;
  WTF *v16;
  _BYTE v17[8];
  WTF *v18;
  WTF *v19;
  int v20;
  WTF *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  WTF *v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = *(JSC::CCallHelpers **)(a1 + 24);
  JSC::CallFrameShuffleData::createForBaselineOrLLIntTailCall(*(_QWORD *)(a1 + 16), *(_DWORD *)(*((_QWORD *)v1 + 101) + 24) & 0x7FFFFFFF, (uint64_t)&v25);
  JSC::CallFrameShuffler::CallFrameShuffler((JSC::CallFrameShuffler *)v17, v1, (const JSC::CallFrameShuffleData *)&v25);
  if (v23 <= 3)
  {
    __break(0xC471u);
  }
  else
  {
    JSC::CallFrameShuffler::addNew((uint64_t)v17, 0, *(_QWORD *)(*((_QWORD *)v21 + 3) + 24), *(_BYTE *)(*((_QWORD *)v21 + 3) + 32));
    v24 |= 0x24uLL;
    JSC::CallFrameShuffler::prepareForTailCall((JSC::CallFrameShuffler *)v17);
    v9 = v21;
    if (v21)
    {
      v21 = 0;
      v22 = 0;
      WTF::fastFree((unint64_t)v9, v2, v3, v4, v5, v6, v7, v8);
    }
    v10 = v19;
    if (v19)
    {
      v19 = 0;
      v20 = 0;
      WTF::fastFree((unint64_t)v10, v2, v3, v4, v5, v6, v7, v8);
    }
    v11 = v18;
    if (v18)
    {
      do
      {
        v12 = (WTF *)*((_QWORD *)v11 + 5);
        v13 = *(_QWORD *)v11;
        if ((WTF *)((char *)v11 + 16) != *(WTF **)v11 && v13 != 0)
        {
          *(_QWORD *)v11 = 0;
          *((_DWORD *)v11 + 2) = 0;
          v16 = v11;
          WTF::fastFree(v13, v2, v3, v4, v5, v6, v7, v8);
          v11 = v16;
        }
        WTF::fastFree((unint64_t)v11, v2, v3, v4, v5, v6, v7, v8);
        v11 = v12;
      }
      while (v12);
    }
    v15 = v25;
    if (v25)
    {
      v25 = 0;
      v26 = 0;
      WTF::fastFree((unint64_t)v15, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

uint64_t WTF::Vector<JSC::CallCompilationInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::CallCompilationInfo>(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;

  result = WTF::Vector<JSC::CallCompilationInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = *(_QWORD *)a1 + 16 * v4;
  *(_DWORD *)v6 = *(_DWORD *)result;
  *(_QWORD *)(v6 + 8) = *(_QWORD *)(result + 8);
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

uint64_t WTF::Vector<JSC::CallCompilationInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::CallCompilationInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = v11;
      v20 = v5;
      do
      {
        *(_DWORD *)v19 = *(_DWORD *)v20;
        *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
        v20 += 16;
        v19 += 16;
      }
      while (v20 != v5 + 16 * v10);
    }
    if (v5)
    {
      if (v11 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::CallCompilationInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = v9;
        v18 = v7;
        do
        {
          *(_DWORD *)v17 = *(_DWORD *)v18;
          *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
          v18 += 16;
          v17 += 16;
        }
        while (v18 != v7 + 16 * v8);
      }
      if (v7)
      {
        if (v9 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void JSC::JIT::compileSetupFrame<JSC::OpCallDirectEval>(uint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  JSC::MacroAssemblerARM64::add64(a1, (-8 * a3 + 16), 29, 31, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::store32(a1, a2, 0x100000001FLL, v10, v11, v12, v13, v14);
}

void JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,int,int),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,int,int>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::ARM64LogicalImmediate *this, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  JSC::ARM64LogicalImmediate *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x8_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58[3];

  v11 = -1207811152;
  v12 = (JSC::ARM64LogicalImmediate *)a4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)this, 3, a4, (uint64_t)this, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, v12, 2, v13, v14, v15, v16, v17);
  v25 = *(unsigned int *)(a2 + 640);
  if (v25 >= 4)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      return;
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)(v25 >> 2), a2 + 264, v20, v21, v22, v23, v24);
  }
  else
  {
    v11 = -1207811137;
  }
  v26 = *(_DWORD *)(a2 + 200);
  if (v26 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v18, v19, v20, v21, v22, v23, v24);
    v26 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v26) = v11;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::JIT::appendCall(a2, a3, v19, v20, v21, v22, v23, v24, a1);
  JSC::MacroAssemblerARM64::branchTest64(a2, 1, 1, 0xFFFFFFFFLL, v27, v28, v29, v30, (uint64_t)v58, v31);
  v37 = *(_QWORD *)(*(_QWORD *)(a2 + 352) + 90440);
  v38 = *(_QWORD *)(v37 + 8);
  v39 = *(unsigned int **)(v37 + 16);
  if (v39)
  {
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v58, v38, a2, v32, v33, v34, v35, v36);
    do
    {
      v48 = __ldaxr(v39);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v39));
    if (!v49)
    {
      atomic_store(1u, v39);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v39, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v58, v38, a2, v32, v33, v34, v35, v36);
  }
}

void JSC::JIT::callOperation<JSC::ExceptionOperationResult<JSC::CallFrame *> (*)(JSC::JSGlobalObject *,JSC::CallFrame *,long long,int,int),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,int,JSC::ARM64Registers::RegisterID>(int *a1, unsigned __int8 *a2, uint64_t a3, JSC::ARM64LogicalImmediate *this, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  uint64_t v10;
  JSC::ARM64LogicalImmediate *v12;
  JSC::AssemblerBuffer *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint8x8_t v21;
  __int32 v22;
  uint8x8_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  char v33;
  char v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  _BYTE *v38;
  int v39;
  unsigned __int8 *v40;
  char *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  int v44;
  unsigned __int8 *v45;
  void *v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int8x8_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  int64_t v81;
  char *v82;
  JSC::AssemblerBuffer *v83;
  void *__dst;
  uint64_t v85;
  int v86;

  v10 = (uint64_t)a2;
  __dst = &v86;
  v86 = 67108868;
  v85 = 0x200000004;
  v12 = (JSC::ARM64LogicalImmediate *)this;
  v13 = (JSC::AssemblerBuffer *)(a2 + 56);
  v14 = 2;
  do
  {
    v15 = 0;
    v16 = 0;
    v17 = __dst;
    v18 = v14;
    do
    {
      if ((*((_BYTE *)__dst + v15 + 1) & 0x40) != 0)
      {
LABEL_67:
        __break(1u);
LABEL_68:
        JSC::AssemblerBuffer::outOfLineGrow(v13, (uint64_t)a2, a3, (uint64_t)this, a5, a6, a7, a8);
        v48 = *(_DWORD *)(v10 + 200);
        goto LABEL_60;
      }
      v16 |= 1 << *((_BYTE *)__dst + v15 + 1);
      v15 += 2;
    }
    while (2 * v14 != v15);
    v19 = 0;
    do
    {
      v20 = *((_BYTE *)__dst + v19) & 0x7F;
      if (v20 >= 0x40)
        goto LABEL_67;
      v16 &= ~(1 << v20);
      v19 += 2;
    }
    while (2 * v14 != v19);
    v21 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v21.i16[0] = vaddlv_u8(v21);
    v22 = v21.i32[0];
    v23 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.i32[0] + v22)
    {
      v8 = 0;
      if (v14 <= 1)
        v24 = 1;
      else
        v24 = v14;
      v25 = 2 * v24;
      while (1)
      {
        v26 = v8[(_QWORD)__dst + 1];
        if ((v26 & 0x7Fu) >= 0x40)
          goto LABEL_67;
        if (((v16 >> (v26 & 0x7F)) & 1) != 0)
          break;
        v8 += 2;
        if ((unsigned __int8 *)v25 == v8)
          goto LABEL_51;
      }
      v27 = v8[(_QWORD)__dst];
      if (v27 != v26)
      {
        v28 = (char)v27;
        if ((char)v27 == 63)
        {
          v29 = *(_DWORD *)(v10 + 200);
          v30 = *(_DWORD *)(v10 + 192);
          if (v26 == 31)
            goto LABEL_45;
          v32 = v26 & 0x1F | 0xD2800000;
        }
        else
        {
          v29 = *(_DWORD *)(v10 + 200);
          v30 = *(_DWORD *)(v10 + 192);
          v31 = (char)v26 == 31 || v28 == 31;
          if (!v31)
          {
            v32 = v26 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_46;
          }
LABEL_45:
          v32 = (char)v26 | (32 * v28) | 0x91000000;
        }
LABEL_46:
        if (v29 + 4 > v30)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v13, (uint64_t)a2, a3, (uint64_t)this, a5, a6, a7, a8);
          v29 = *(_DWORD *)(v10 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v10 + 56) + v29) = v32;
        *(_DWORD *)(v10 + 200) += 4;
        v17 = __dst;
        v18 = HIDWORD(v85);
      }
      memmove(&v8[(_QWORD)v17], &v8[(_QWORD)v17 + 2], 2 * v18 - (_QWORD)v8 - 2);
      v14 = HIDWORD(v85) - 1;
      goto LABEL_50;
    }
    v83 = v13;
    v33 = *(_BYTE *)__dst;
    v34 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v10, *(char *)__dst, v34, (uint64_t)this, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v85) - 2);
    v35 = (HIDWORD(v85) - 1);
    v31 = HIDWORD(v85) == 1;
    HIDWORD(v85) = v35;
    v8 = (unsigned __int8 *)__dst;
    v36 = (unsigned __int8 *)__dst + 2 * v35;
    if (v31)
    {
      v43 = 0;
      v44 = 0;
      v39 = 0;
      a2 = v36;
    }
    else
    {
      v37 = 2 * v35;
      v38 = __dst;
      while (*v38 != v34)
      {
        v38 += 2;
        v37 -= 2;
        if (!v37)
          goto LABEL_30;
      }
      *v38 = v33;
LABEL_30:
      v39 = 0;
      v40 = v8;
      a2 = v36;
      v41 = (char *)v36;
      do
      {
        if (*v8 == v8[1])
        {
          v42 = v8;
          if (v41 != (char *)__dst + 2 * HIDWORD(v85))
          {
            v82 = (char *)v36;
            if (v8 == a2)
            {
              v42 = (unsigned __int8 *)v41;
            }
            else
            {
              v80 = v41;
              v81 = v40 - a2;
              memmove(v41, a2, v40 - a2);
              v42 = (unsigned __int8 *)&v80[v81];
            }
            v36 = (unsigned __int8 *)v82;
          }
          a2 = v8 + 2;
          ++v39;
          v41 = (char *)v42;
        }
        v8 += 2;
        v40 += 2;
      }
      while (v8 < v36);
      v8 = (unsigned __int8 *)__dst;
      v43 = HIDWORD(v85);
      v44 = HIDWORD(v85);
      v36 = (unsigned __int8 *)v41;
    }
    v45 = &v8[2 * v43];
    if (a2 != v45)
    {
      memmove(v36, a2, v45 - a2);
      v44 = HIDWORD(v85);
    }
    v14 = v44 - v39;
    v13 = v83;
LABEL_50:
    HIDWORD(v85) = v14;
LABEL_51:
    ;
  }
  while (v14);
  v46 = __dst;
  if (&v86 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v85) = 0;
    WTF::fastFree((unint64_t)v46, a2, a3, (uint64_t)this, a5, a6, a7, a8);
  }
  LODWORD(v8) = -1207811152;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v10, v12, 3, (uint64_t)this, a5, a6, a7, a8);
  v47 = *(unsigned int *)(v10 + 640);
  if (v47 >= 4)
  {
    if (!*(_BYTE *)(v10 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198734918);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)v10, (JSC::ARM64LogicalImmediate *)(v47 >> 2), v10 + 264, (uint64_t)this, a5, a6, a7, a8);
  }
  else
  {
    LODWORD(v8) = -1207811137;
  }
  v48 = *(_DWORD *)(v10 + 200);
  if (v48 + 4 > *(_DWORD *)(v10 + 192))
    goto LABEL_68;
LABEL_60:
  *(_DWORD *)(*(_QWORD *)(v10 + 56) + v48) = (_DWORD)v8;
  *(_DWORD *)(v10 + 200) += 4;
  JSC::JIT::appendCall(v10, a3, a3, (uint64_t)this, a5, a6, a7, a8, a1);
  JSC::MacroAssemblerARM64::branchTest64(v10, 1, 1, 0xFFFFFFFFLL, v49, v50, v51, v52, (uint64_t)&__dst, v53);
  v59 = *(_QWORD *)(*(_QWORD *)(v10 + 352) + 90440);
  v60 = *(_QWORD *)(v59 + 8);
  v61 = *(unsigned int **)(v59 + 16);
  if (v61)
  {
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 + 1, v61));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v60, v10, v54, v55, v56, v57, v58);
    do
    {
      v70 = __ldaxr(v61);
      v71 = v70 - 1;
    }
    while (__stlxr(v71, v61));
    if (!v71)
    {
      atomic_store(1u, v61);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v61, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v60, v10, v54, v55, v56, v57, v58);
  }
}

void JSC::MacroAssemblerARM64::branch32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  unsigned int v11;

  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987349DCLL);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
  v10 = *(_BYTE *)(a2 + 304);
  v11 = *(_DWORD *)(a2 + 200);
  if (v11 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
    v11 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v11) = v10 & 0x1F | 0xB8413000;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::branch32(a2, 8, 17, 2, a5, a6, a7, a8, a1);
}

void WTF::ScopedLambdaFunctor<void ()(void),void JSC::JIT::compileOpCall<JSC::OpTailCallVarargs>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::{lambda(void)#1}>::implFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblyHelpers *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char **v16;
  char *v17;

  v8 = *(JSC::AssemblyHelpers **)(a1 + 16);
  v9 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
  if (v9 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
  }
  JSC::AssemblyHelpers::emitRestoreCalleeSavesFor(v8, (const JSC::RegisterAtOffsetList *)&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result, a3, a4, a5, a6, a7, a8);
  JSC::CCallHelpers::prepareForTailCallSlow((uint64_t)v8, 37, 0, v10, v11, v12, v13, v14);
}

void WTF::ScopedLambdaFunctor<void ()(void),void JSC::JIT::compileOpCall<JSC::OpTailCallForwardArguments>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::{lambda(void)#1}>::implFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblyHelpers *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char **v16;
  char *v17;

  v8 = *(JSC::AssemblyHelpers **)(a1 + 16);
  v9 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
  if (v9 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
  }
  JSC::AssemblyHelpers::emitRestoreCalleeSavesFor(v8, (const JSC::RegisterAtOffsetList *)&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result, a3, a4, a5, a6, a7, a8);
  JSC::CCallHelpers::prepareForTailCallSlow((uint64_t)v8, 37, 0, v10, v11, v12, v13, v14);
}

void JSC::JIT::compileSetupFrame<JSC::OpConstructVarargs>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  JSC::ARM64LogicalImmediate *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _DWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _DWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141[3];

  v10 = a2[2];
  v11 = a2[3];
  v12 = a2[4];
  v13 = (JSC::ARM64LogicalImmediate *)a2[5];
  JSC::MacroAssemblerARM64::load64(a1, 0x80000001ALL, 0, a4, a5, a6, a7, a8);
  if ((int)v11 < 0x40000000)
  {
    v19 = (v11 << 35) | 0x1D;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v19, 1, v14, v15, v16, v17, v18);
    goto LABEL_4;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v11))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v108, v109, v110, v111, v112);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v126, v127, v128, v129, v130);
    v19 = (v11 << 35) | 1;
    goto LABEL_3;
  }
  v113 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v113 <= (v11 - 0x40000000))
  {
    __break(0xC471u);
    goto LABEL_33;
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v113[2 * (v11 - 0x40000000) + 2], 1, v108, v109, v110, v111, v112);
LABEL_4:
  v23 = -v12;
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,int,int),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,int,int>((int *)v141, a1, (uint64_t)operationSizeFrameForVarargs, v23, v13, v20, v21, v22);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)v23, 1, v24, v25, v26, v27, v28);
  JSC::emitSetVarargsFrame((_DWORD *)a1, 0, 0, 1, 1, v29, v30, v31);
  v39 = *(_DWORD *)(a1 + 200);
  if (v39 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v32, v33, v34, v35, v36, v37, v38);
    v39 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v39) = -788463553;
  *(_DWORD *)(a1 + 200) += 4;
  if ((int)v11 < 0x40000000)
  {
    v40 = (v11 << 35) | 0x1D;
LABEL_8:
    JSC::MacroAssemblerARM64::load64(a1, v40, 2, v34, v35, v36, v37, v38);
    goto LABEL_9;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v11))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 2, v114, v115, v116, v117, v118);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000002, 2, v131, v132, v133, v134, v135);
    v40 = (v11 << 35) | 2;
    goto LABEL_8;
  }
  v119 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v119 <= (v11 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x198734F08);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v119[2 * (v11 - 0x40000000) + 2], 2, v114, v115, v116, v117, v118);
LABEL_9:
  JSC::MacroAssemblerARM64::load64(a1, 0x80000001ALL, 4, v41, v42, v43, v44, v45);
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<JSC::CallFrame *> (*)(JSC::JSGlobalObject *,JSC::CallFrame *,long long,int,int),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,int,JSC::ARM64Registers::RegisterID>((int *)v141, (unsigned __int8 *)a1, (uint64_t)operationSetupVarargsFrame, v13, v46, v47, v48, v49);
  JSC::MacroAssemblerARM64::move((_DWORD *)a1, 0, 5, v50, v51, v52, v53, v54);
  JSC::MacroAssemblerARM64::load32(a1, 0x2000000005, 2, v55, v56, v57, v58, v59);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)0xFF, 0, v60, v61, v62, v63, v64);
  JSC::MacroAssemblerARM64::moveConditionally32((_DWORD *)a1, 8, 2, 0, 0, 2, 2, v65);
  v70 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v70)
    v71 = *(unsigned __int16 *)(v70 + 6);
  else
    v71 = *(_DWORD *)(v70 + 108);
  JSC::MacroAssemblerARM64::add64(a1, ((v71 + 7) & 0xFFFFFFF8) + 80 * a2[7], 25, 0, v66, v67, v68, v69);
  JSC::MacroAssemblerARM64::branch32((uint64_t)v141, a1, v72, v73, v74, v75, v76, v77);
  JSC::MacroAssemblerARM64::store8(a1, 2, 0x1300000000, v78, v79, v80, v81, v82);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v141, a1, v83, v84, v85, v86, v87, v88);
  if ((int)v10 < 0x40000000)
  {
    v94 = (v10 << 35) | 0x1D;
LABEL_13:
    JSC::MacroAssemblerARM64::load64(a1, v94, 0, v89, v90, v91, v92, v93);
    goto LABEL_14;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v10))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v120, v121, v122, v123, v124);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v136, v137, v138, v139, v140);
    v94 = v10 << 35;
    goto LABEL_13;
  }
  v125 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v125 <= (v10 - 0x40000000))
  {
    __break(0xC471u);
LABEL_33:
    JUMPOUT(0x198734EE8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v125[2 * (v10 - 0x40000000) + 2], 0, v120, v121, v122, v123, v124);
LABEL_14:
  JSC::MacroAssemblerARM64::store64(a1, 0, 0x2800000005, v95, v96, v97, v98, v99);
  v107 = *(_DWORD *)(a1 + 200);
  if (v107 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v100, v101, v102, v103, v104, v105, v106);
    v107 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v107) = -1862254401;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::JIT::emitPutCallResult<JSC::OpConstructVarargs>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_BYTE *)(a1 + 793))
    JSC::MacroAssemblerARM64::store64(a1, 0, ((unint64_t)~a2[6] << 36) | 0x19, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::store64(a1, 0, ((unint64_t)*a2 << 35) | 0x1D, a4, a5, a6, a7, a8);
}

unint64_t WTF::Vector<JSC::JITGetByIdGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6) > a3)
  {
    v6 = a3 - v4;
    WTF::Vector<JSC::JITGetByIdGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  else
  {
    WTF::Vector<JSC::JITGetByIdGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<JSC::JITGetByIdGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 26))
  {
    v6 = result;
    v7 = *(_QWORD *)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = WTF::fastMalloc((WTF *)(v5 << 6));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v17 = v7;
      do
      {
        v18 = *(_OWORD *)v17;
        *(_BYTE *)(v9 + 16) = *(_BYTE *)(v17 + 16);
        *(_OWORD *)v9 = v18;
        *(_DWORD *)(v9 + 20) = *(_DWORD *)(v17 + 20);
        *(_DWORD *)(v9 + 24) = *(_DWORD *)(v17 + 24);
        *(_DWORD *)(v9 + 28) = *(_DWORD *)(v17 + 28);
        *(_QWORD *)(v9 + 32) = *(_QWORD *)(v17 + 32);
        *(_WORD *)(v9 + 40) = *(_WORD *)(v17 + 40);
        *(_DWORD *)(v9 + 44) = *(_DWORD *)(v17 + 44);
        *(_QWORD *)(v9 + 48) = *(_QWORD *)(v17 + 48);
        *(_BYTE *)(v9 + 56) = *(_BYTE *)(v17 + 56);
        v17 += 64;
        v9 += 64;
      }
      while (v17 != v7 + (v8 << 6));
    }
    if (v7)
    {
      if (*(_QWORD *)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

_QWORD *JSC::Compilation::Compilation(_QWORD *result, _QWORD *a2, uint64_t *a3)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  *result = *a2;
  v3 = (unsigned int *)a2[1];
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  result[1] = v3;
  v5 = *a3;
  *a3 = 0;
  result[2] = v5;
  return result;
}

{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  *result = *a2;
  v3 = (unsigned int *)a2[1];
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  result[1] = v3;
  v5 = *a3;
  *a3 = 0;
  result[2] = v5;
  return result;
}

_QWORD *JSC::Compilation::Compilation(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  *result = *a2;
  v2 = a2[1];
  a2[1] = 0;
  result[1] = v2;
  v3 = a2[2];
  a2[2] = 0;
  result[2] = v3;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;

  *result = *a2;
  v2 = a2[1];
  a2[1] = 0;
  result[1] = v2;
  v3 = a2[2];
  a2[2] = 0;
  result[2] = v3;
  return result;
}

void JSC::Compilation::~Compilation(JSC::Compilation *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    v10 = *(unsigned int *)(v9 + 12);
    if ((_DWORD)v10)
    {
      v15 = *(uint64_t **)v9;
      v16 = 8 * v10;
      do
      {
        v17 = *v15;
        *v15 = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
    v11 = *(_QWORD *)v9;
    if (*(_QWORD *)v9)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    }
  }
}

{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    v10 = *(unsigned int *)(v9 + 12);
    if ((_DWORD)v10)
    {
      v15 = *(uint64_t **)v9;
      v16 = 8 * v10;
      do
      {
        v17 = *v15;
        *v15 = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
    v11 = *(_QWORD *)v9;
    if (*(_QWORD *)v9)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    }
  }
}

JSC::JITDisassembler *JSC::JITDisassembler::JITDisassembler(JSC::JITDisassembler *this, JSC::CodeBlock *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  *(_QWORD *)this = a2;
  *((_DWORD *)this + 2) = -1;
  v4 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 80) + 12);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 7) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 30)
      goto LABEL_10;
    v5 = (void *)WTF::fastMalloc((WTF *)(4 * v4));
    *((_DWORD *)this + 6) = v4;
    *((_QWORD *)this + 2) = v5;
    v6 = *((unsigned int *)this + 7);
    if ((_DWORD)v6)
      memset(v5, 255, 4 * v6);
  }
  v7 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 80) + 12);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 11) = v7;
  if (!(_DWORD)v7)
    goto LABEL_9;
  if (v7 >> 30)
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x1987353DCLL);
  }
  v8 = (void *)WTF::fastMalloc((WTF *)(4 * v7));
  *((_DWORD *)this + 10) = v7;
  *((_QWORD *)this + 4) = v8;
  v9 = *((unsigned int *)this + 11);
  if ((_DWORD)v9)
    memset(v8, 255, 4 * v9);
LABEL_9:
  *((_QWORD *)this + 6) = -1;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  return this;
}

uint64_t JSC::JITDisassembler::dumpHeader(JSC::CodeBlock **this, WTF::PrintStream *a2, JSC::LinkBuffer *a3)
{
  uint64_t v6;
  int v7;
  WTF::PrintStream *v8;
  const WTF::CString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF::PrintStream *v24;
  const char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  char *v34;
  char *v35;
  WTF::PrintStream *v36;
  WTF *v38;
  WTF *v39;

  v6 = (uint64_t)*this;
  v7 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)*this + 7) + 80) + 12);
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v8, "%s", "Generated Baseline JIT code for ");
  JSC::CodeBlock::dumpAssumingJITType(v6);
  WTF::PrintStream::printf(v8, "%s", ", instructions size = ");
  WTF::PrintStream::printf(v8, "%u", v7);
  WTF::PrintStream::printf(v8, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  JSC::CodeBlock::sourceCodeForTools(*this, &v39);
  JSC::reduceWhitespace((JSC *)&v39, v9, v10, v11, v12, v13, v14, v15, (uint64_t *)&v38);
  v23 = v39;
  v39 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
    else
      --*(_DWORD *)v23;
  }
  v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v24, "%s", "   Source: ");
  if (v38)
    v25 = (char *)v38 + 16;
  else
    v25 = 0;
  WTF::PrintStream::printf(v24, "%s", v25);
  WTF::PrintStream::printf(v24, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v33 = v38;
  v38 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 1)
      WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
    else
      --*(_DWORD *)v33;
  }
  v34 = (char *)*((_QWORD *)a3 + 23);
  v35 = &v34[*((_QWORD *)a3 + 1)];
  v36 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v36, "%s", "   Code at [");
  WTF::PrintStream::printf(v36, "%p", v34);
  WTF::PrintStream::printf(v36, "%s", ", ");
  WTF::PrintStream::printf(v36, "%p", v35);
  WTF::PrintStream::printf(v36, "%s", "):\n");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void JSC::JITDisassembler::dumpForInstructions(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t *v18;
  uint64_t v19;
  WTF::PrintStream *v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  _DWORD **v25;
  _DWORD *v26;
  int v27;
  WTF *v28;
  unsigned int v29;

  v27 = a6;
  JSC::JITDisassembler::dumpVectorForInstructions(&v28, a1, a3, a4, a5, &v27, a7, a8);
  v16 = v29;
  v17 = v28;
  if (v29)
  {
    v18 = (uint64_t *)((char *)v28 + 8);
    v19 = v29;
    do
    {
      v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      v21 = *v18;
      v18 += 2;
      v22 = (const char *)(v21 + 16);
      if (v21)
        v23 = v22;
      else
        v23 = 0;
      WTF::PrintStream::printf(v20, "%s", v23);
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      --v19;
    }
    while (v19);
    v24 = 16 * v16;
    v25 = (_DWORD **)((char *)v17 + 8);
    do
    {
      v26 = *v25;
      *v25 = 0;
      if (v26)
      {
        if (*v26 == 1)
          WTF::fastFree((unint64_t)v26, v9, v10, v11, v12, v13, v14, v15);
        else
          --*v26;
      }
      v25 += 2;
      v24 -= 16;
    }
    while (v24);
  }
  if (v17)
    WTF::fastFree((unint64_t)v17, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t JSC::JITDisassembler::dump(JSC::JITDisassembler *this, JSC::LinkBuffer *a2)
{
  unint64_t v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  int v22;
  WTF::PrintStream *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::PrintStream *v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  char v37;
  unint64_t *v38;
  char *v39;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v39 = &v37;
    v38 = (unint64_t *)&v39;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v38, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = (WTF::PrintStream *)WTF::s_file;
  v6 = *((_QWORD *)a2 + 23);
  *((_QWORD *)this + 7) = v6;
  *((_QWORD *)this + 8) = v6 + *((_QWORD *)a2 + 1);
  JSC::JITDisassembler::dumpHeader((JSC::CodeBlock **)this, v5, a2);
  if (!*((_DWORD *)this + 7)
    || ((v7 = *((_DWORD *)this + 2), v7 < 4)
      ? (v8 = 0)
      : (v8 = *(_DWORD *)((v7 & 0xFFFFFFFC) + *((_QWORD *)a2 + 3) - 4)),
        (v9 = (v7 - v8), v10 = *((_QWORD *)a2 + 23), v11 = v9 + v10, v10 > v11)
     || (v12 = v10 + *((_QWORD *)a2 + 1), v12 < v11)))
  {
    __break(0xC471u);
    JUMPOUT(0x198735A20);
  }
  v13 = **((_DWORD **)this + 2);
  v39 = (char *)v11;
  if (v13 < 4)
    v14 = 0;
  else
    v14 = *(_DWORD *)((v13 & 0xFFFFFFFC) + *((_QWORD *)a2 + 3) - 4);
  v15 = (v13 - v14) + v10;
  if (v10 > v15 || v12 < v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198735A40);
  }
  JSC::tryToDisassemble((unint64_t *)&v39, v15 - v11, *((_QWORD *)this + 7), *((_QWORD *)this + 8), "        ", v5);
  v19 = *((unsigned int *)this + 11);
  if ((_DWORD)v19)
  {
    v20 = (int *)*((_QWORD *)this + 4);
    while (1)
    {
      v22 = *v20++;
      v21 = v22;
      if (v22 != -1)
        break;
      if (!--v19)
        goto LABEL_19;
    }
  }
  else
  {
LABEL_19:
    v21 = *((_DWORD *)this + 12);
  }
  JSC::JITDisassembler::dumpForInstructions((uint64_t *)this, (uint64_t)v5, a2, (uint64_t)"    ", (uint64_t)this + 16, v21, v17, v18);
  v23 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 32))(v5);
  WTF::PrintStream::printf(v23, "%s", "    (End Of Main Path)\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  JSC::JITDisassembler::dumpForInstructions((uint64_t *)this, (uint64_t)v5, a2, (uint64_t)"    (S) ", (uint64_t)this + 32, *((_DWORD *)this + 12), v24, v25);
  v26 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 32))(v5);
  WTF::PrintStream::printf(v26, "%s", "    (End Of Slow Path)\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  v27 = *((_DWORD *)this + 12);
  if (v27 < 4)
    v28 = 0;
  else
    v28 = *(_DWORD *)((v27 & 0xFFFFFFFC) + *((_QWORD *)a2 + 3) - 4);
  v29 = (v27 - v28);
  v30 = *((_QWORD *)a2 + 23);
  v31 = v29 + v30;
  if (v30 > v31 || (v32 = v30 + *((_QWORD *)a2 + 1), v32 < v31))
  {
    __break(0xC471u);
    JUMPOUT(0x198735A60);
  }
  v33 = *((_DWORD *)this + 13);
  v39 = (char *)v31;
  if (v33 < 4)
    v34 = 0;
  else
    v34 = *(_DWORD *)((v33 & 0xFFFFFFFC) + *((_QWORD *)a2 + 3) - 4);
  v35 = (v33 - v34) + v30;
  if (v30 > v35 || v32 < v35)
  {
    __break(0xC471u);
    JUMPOUT(0x198735A80);
  }
  return JSC::tryToDisassemble((unint64_t *)&v39, v35 - v31, *((_QWORD *)this + 7), *((_QWORD *)this + 8), "        ", v5);
}

void JSC::JITDisassembler::reportToProfiler(uint64_t a1, uint64_t a2, JSC::LinkBuffer *a3)
{
  WTF *v6;
  size_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  WTF *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  WTF *v30;
  size_t v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  WTF *v41;
  uint64_t v43;
  int *v44;
  int v45;
  int v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  WTF *v56;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  WTF *v67;
  int v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  WTF *v73;
  unint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  WTF *v78;
  size_t v79;
  _QWORD *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  WTF *v89;
  WTF *v91;
  uint64_t v92;
  _BYTE v93[16];
  WTF *v94;
  void (**v95)(WTF::StringPrintStream *__hidden);
  WTF *v96;
  __int128 v97;
  _BYTE v98[128];
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v95 = off_1E3572250;
  v96 = (WTF *)v98;
  v97 = xmmword_199122F80;
  v98[0] = 0;
  JSC::JITDisassembler::dumpHeader((JSC::CodeBlock **)a1, (WTF::PrintStream *)&v95, a3);
  v6 = v96;
  if (v96)
  {
    v7 = v97;
    if ((unint64_t)v97 >= 0xFFFFFFFFFFFFFFF0)
    {
      __break(0xC471u);
      JUMPOUT(0x198736478);
    }
    if ((_QWORD)v97 == -17)
    {
      __break(0xC471u);
      JUMPOUT(0x198736480);
    }
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)(v97 + 17));
    *(_DWORD *)v8 = 1;
    v8[1] = v7;
    memcpy(v8 + 2, v6, v7);
    *((_BYTE *)v8 + v7 + 16) = 0;
    v91 = (WTF *)v93;
    v92 = 1;
    ++*(_DWORD *)v8;
  }
  else
  {
    v8 = 0;
    v91 = (WTF *)v93;
    v92 = 1;
  }
  v94 = (WTF *)v8;
  JSC::Profiler::Compilation::addDescription(a2, (unint64_t)&v91);
  v16 = v94;
  v94 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
      WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
    else
      --*(_DWORD *)v16;
  }
  v17 = v91;
  if (v93 != (_BYTE *)v91 && v91 != 0)
  {
    v91 = 0;
    LODWORD(v92) = 0;
    WTF::fastFree((unint64_t)v17, v9, v10, v11, v12, v13, v14, v15);
  }
  if (v6)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::fastFree((unint64_t)v8, v9, v10, v11, v12, v13, v14, v15);
    else
      --*(_DWORD *)v8;
  }
  *(_QWORD *)&v97 = 0;
  *(_BYTE *)v96 = 0;
  if (!*(_DWORD *)(a1 + 28))
  {
    __break(0xC471u);
    JUMPOUT(0x198736470);
  }
  v19 = *(_DWORD *)(a1 + 8);
  if (v19 < 4)
    v20 = 0;
  else
    v20 = *(_DWORD *)((v19 & 0xFFFFFFFC) + *((_QWORD *)a3 + 3) - 4);
  v21 = (v19 - v20);
  v22 = *((_QWORD *)a3 + 23);
  v23 = (WTF *)(v21 + v22);
  if (v22 > (unint64_t)v23 || (v24 = v22 + *((_QWORD *)a3 + 1), v24 < (unint64_t)v23))
  {
    __break(0xC471u);
    JUMPOUT(0x198736404);
  }
  v25 = a1 + 16;
  v26 = **(_DWORD **)(a1 + 16);
  v91 = v23;
  if (v26 < 4)
    v27 = 0;
  else
    v27 = *(_DWORD *)((v26 & 0xFFFFFFFC) + *((_QWORD *)a3 + 3) - 4);
  v28 = (v26 - v27) + v22;
  if (v22 > v28 || v24 < v28)
  {
    __break(0xC471u);
    JUMPOUT(0x198736424);
  }
  JSC::tryToDisassemble((unint64_t *)&v91, v28 - (_QWORD)v23, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), "        ", (WTF::PrintStream *)&v95);
  v30 = v96;
  if (v96)
  {
    v31 = v97;
    if ((unint64_t)v97 >= 0xFFFFFFFFFFFFFFF0)
    {
      __break(0xC471u);
      JUMPOUT(0x198736488);
    }
    if ((_QWORD)v97 == -17)
    {
      __break(0xC471u);
      JUMPOUT(0x198736490);
    }
    v32 = (_QWORD *)WTF::fastMalloc((WTF *)(v97 + 17));
    *(_DWORD *)v32 = 1;
    v32[1] = v31;
    memcpy(v32 + 2, v30, v31);
    *((_BYTE *)v32 + v31 + 16) = 0;
    v91 = (WTF *)v93;
    v92 = 1;
    ++*(_DWORD *)v32;
    v25 = a1 + 16;
  }
  else
  {
    v32 = 0;
    v91 = (WTF *)v93;
    v92 = 1;
  }
  v94 = (WTF *)v32;
  JSC::Profiler::Compilation::addDescription(a2, (unint64_t)&v91);
  v40 = v94;
  v94 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 1)
      WTF::fastFree((unint64_t)v40, v33, v34, v35, v36, v37, v38, v39);
    else
      --*(_DWORD *)v40;
  }
  v41 = v91;
  if (v93 != (_BYTE *)v91 && v91 != 0)
  {
    v91 = 0;
    LODWORD(v92) = 0;
    WTF::fastFree((unint64_t)v41, v33, v34, v35, v36, v37, v38, v39);
  }
  if (v30)
  {
    if (*(_DWORD *)v32 == 1)
      WTF::fastFree((unint64_t)v32, v33, v34, v35, v36, v37, v38, v39);
    else
      --*(_DWORD *)v32;
  }
  v43 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v43)
  {
    v44 = *(int **)(a1 + 32);
    while (1)
    {
      v46 = *v44++;
      v45 = v46;
      if (v46 != -1)
        break;
      if (!--v43)
        goto LABEL_49;
    }
  }
  else
  {
LABEL_49:
    v45 = *(_DWORD *)(a1 + 48);
  }
  JSC::JITDisassembler::reportInstructions((uint64_t *)a1, a2, a3, (uint64_t)"    ", v25, v45, v38, v39);
  v47 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v47 = 1;
  *(_QWORD *)(v47 + 8) = 23;
  strcpy((char *)(v47 + 16), "    (End Of Main Path)\n");
  v91 = (WTF *)v93;
  v92 = 1;
  ++*(_DWORD *)v47;
  v94 = (WTF *)v47;
  JSC::Profiler::Compilation::addDescription(a2, (unint64_t)&v91);
  v55 = v94;
  v94 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
      WTF::fastFree((unint64_t)v55, v48, v49, v50, v51, v52, v53, v54);
    else
      --*(_DWORD *)v55;
  }
  v56 = v91;
  if (v93 != (_BYTE *)v91 && v91 != 0)
  {
    v91 = 0;
    LODWORD(v92) = 0;
    WTF::fastFree((unint64_t)v56, v48, v49, v50, v51, v52, v53, v54);
  }
  if (*(_DWORD *)v47 == 1)
    WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
  else
    --*(_DWORD *)v47;
  JSC::JITDisassembler::reportInstructions((uint64_t *)a1, a2, a3, (uint64_t)"    (S) ", a1 + 32, *(_DWORD *)(a1 + 48), v53, v54);
  v58 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v58 = 1;
  *(_QWORD *)(v58 + 8) = 23;
  strcpy((char *)(v58 + 16), "    (End Of Slow Path)\n");
  v91 = (WTF *)v93;
  v92 = 1;
  ++*(_DWORD *)v58;
  v94 = (WTF *)v58;
  JSC::Profiler::Compilation::addDescription(a2, (unint64_t)&v91);
  v66 = v94;
  v94 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 1)
      WTF::fastFree((unint64_t)v66, v59, v60, v61, v62, v63, v64, v65);
    else
      --*(_DWORD *)v66;
  }
  v67 = v91;
  if (v93 != (_BYTE *)v91 && v91 != 0)
  {
    v91 = 0;
    LODWORD(v92) = 0;
    WTF::fastFree((unint64_t)v67, v59, v60, v61, v62, v63, v64, v65);
  }
  if (*(_DWORD *)v58 == 1)
    WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
  else
    --*(_DWORD *)v58;
  *(_QWORD *)&v97 = 0;
  *(_BYTE *)v96 = 0;
  v69 = *(_DWORD *)(a1 + 48);
  if (v69 < 4)
    v70 = 0;
  else
    v70 = *(_DWORD *)((v69 & 0xFFFFFFFC) + *((_QWORD *)a3 + 3) - 4);
  v71 = (v69 - v70);
  v72 = *((_QWORD *)a3 + 23);
  v73 = (WTF *)(v71 + v72);
  if (v72 > (unint64_t)v73 || (v74 = v72 + *((_QWORD *)a3 + 1), v74 < (unint64_t)v73))
  {
    __break(0xC471u);
    JUMPOUT(0x198736444);
  }
  v75 = *(_DWORD *)(a1 + 52);
  v91 = v73;
  if (v75 < 4)
    v76 = 0;
  else
    v76 = *(_DWORD *)((v75 & 0xFFFFFFFC) + *((_QWORD *)a3 + 3) - 4);
  v77 = (v75 - v76) + v72;
  if (v72 > v77 || v74 < v77)
  {
    __break(0xC471u);
    JUMPOUT(0x198736464);
  }
  JSC::tryToDisassemble((unint64_t *)&v91, v77 - (_QWORD)v73, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), "        ", (WTF::PrintStream *)&v95);
  v78 = v96;
  if (v96)
  {
    v79 = v97;
    if ((unint64_t)v97 >= 0xFFFFFFFFFFFFFFF0)
    {
      __break(0xC471u);
      JUMPOUT(0x198736498);
    }
    if ((_QWORD)v97 == -17)
    {
      __break(0xC471u);
      JUMPOUT(0x1987364A0);
    }
    v80 = (_QWORD *)WTF::fastMalloc((WTF *)(v97 + 17));
    *(_DWORD *)v80 = 1;
    v80[1] = v79;
    memcpy(v80 + 2, v78, v79);
    *((_BYTE *)v80 + v79 + 16) = 0;
    v91 = (WTF *)v93;
    v92 = 1;
    ++*(_DWORD *)v80;
  }
  else
  {
    v80 = 0;
    v91 = (WTF *)v93;
    v92 = 1;
  }
  v94 = (WTF *)v80;
  JSC::Profiler::Compilation::addDescription(a2, (unint64_t)&v91);
  v88 = v94;
  v94 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 1)
      WTF::fastFree((unint64_t)v88, v81, v82, v83, v84, v85, v86, v87);
    else
      --*(_DWORD *)v88;
  }
  v89 = v91;
  if (v93 != (_BYTE *)v91 && v91 != 0)
  {
    v91 = 0;
    LODWORD(v92) = 0;
    WTF::fastFree((unint64_t)v89, v81, v82, v83, v84, v85, v86, v87);
  }
  if (v78)
  {
    if (*(_DWORD *)v80 == 1)
      WTF::fastFree((unint64_t)v80, v81, v82, v83, v84, v85, v86, v87);
    else
      --*(_DWORD *)v80;
  }
  if (v96 != (WTF *)v98)
    WTF::fastFree((unint64_t)v96, v81, v82, v83, v84, v85, v86, v87);
}

void JSC::JITDisassembler::reportInstructions(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  WTF *v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  _DWORD *v24;
  __int128 v25;
  WTF *v26;
  uint64_t v27;
  __int128 v28;
  WTF *v29;
  int v30;
  unint64_t v31;
  unsigned int v32;

  v30 = a6;
  JSC::JITDisassembler::dumpVectorForInstructions(&v31, a1, a3, a4, a5, &v30, a7, a8);
  if (v32)
  {
    v16 = 0;
    v17 = v31;
    v18 = 16 * v32;
    do
    {
      v19 = *(_DWORD *)(v17 + v16);
      *(_QWORD *)&v25 = *(_QWORD *)(a2 + 8);
      DWORD2(v25) = v19;
      v26 = (WTF *)&v28;
      v27 = 0x100000001;
      v28 = v25;
      v20 = *(WTF **)(v17 + v16 + 8);
      if (v20)
        ++*(_DWORD *)v20;
      v29 = v20;
      JSC::Profiler::Compilation::addDescription(a2, (unint64_t)&v26);
      v21 = v29;
      v29 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
          WTF::fastFree((unint64_t)v21, v9, v10, v11, v12, v13, v14, v15);
        else
          --*(_DWORD *)v21;
      }
      v22 = v26;
      if (&v28 != (__int128 *)v26 && v26)
      {
        v26 = 0;
        LODWORD(v27) = 0;
        WTF::fastFree((unint64_t)v22, v9, v10, v11, v12, v13, v14, v15);
      }
      v16 += 16;
    }
    while (v18 != v16);
    v23 = 0;
    do
    {
      v24 = *(_DWORD **)(v17 + v23 + 8);
      *(_QWORD *)(v17 + v23 + 8) = 0;
      if (v24)
      {
        if (*v24 == 1)
          WTF::fastFree((unint64_t)v24, v9, v10, v11, v12, v13, v14, v15);
        else
          --*v24;
      }
      v23 += 16;
    }
    while (v18 != v23);
  }
  else
  {
    v17 = v31;
  }
  if (v17)
    WTF::fastFree(v17, v9, v10, v11, v12, v13, v14, v15);
}

void JSC::JITDisassembler::dumpVectorForInstructions(_QWORD *a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5, int *a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  const char *v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF::PrintStream *v27;
  uint64_t v28;
  _QWORD *v29;
  WTF *v30;
  WTF::PrintStream *v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  WTF *v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  BOOL v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  WTF *v61;
  size_t v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  unsigned int v67;
  uint64_t v69;
  unint64_t v70;
  WTF *v71;
  int v72;
  uint64_t v73;
  void (**v74)(WTF::StringPrintStream *__hidden);
  WTF *v75;
  __int128 v76;
  _BYTE v77[128];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v74 = off_1E3572250;
  v75 = (WTF *)v77;
  v76 = xmmword_199122F80;
  v77[0] = 0;
  *a1 = 0;
  a1[1] = 0;
  v8 = *(_DWORD *)(a5 + 12);
  if (!v8)
    goto LABEL_63;
  v11 = (const char *)a4;
  v14 = (uint64_t)a1;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  do
  {
    if (*(_DWORD *)(*(_QWORD *)a5 + 4 * v18) == -1)
    {
      v18 = v19 + 1;
      LODWORD(v24) = v19 + 1;
      goto LABEL_36;
    }
    *(_QWORD *)&v76 = 0;
    *(_BYTE *)v75 = 0;
    v70 = 0xFFFFFFFFLL;
    v71 = 0;
    if (v17 == *(_DWORD *)(v14 + 8))
    {
      v20 = WTF::Vector<JSC::JITDisassembler::DumpedOp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v17 + 1, (unint64_t)&v70);
      v21 = *(unsigned int *)(v14 + 12);
      v15 = *(_QWORD *)v14;
      v22 = *(_QWORD *)v14 + 16 * v21;
      *(_DWORD *)v22 = *(_DWORD *)v20;
      v23 = *(_QWORD *)(v20 + 8);
      *(_QWORD *)(v20 + 8) = 0;
      *(_QWORD *)(v22 + 8) = v23;
    }
    else
    {
      v21 = v16 + 16 * v17;
      *(_DWORD *)v21 = -1;
      v71 = 0;
      *(_QWORD *)(v21 + 8) = 0;
      LODWORD(v21) = *(_DWORD *)(v14 + 12);
    }
    v25 = (v21 + 1);
    *(_DWORD *)(v14 + 12) = v25;
    v26 = v71;
    v71 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1)
      {
        v50 = (v21 + 1);
        WTF::fastFree((unint64_t)v26, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
        v25 = v50;
        if (!(_DWORD)v50)
        {
LABEL_74:
          __break(0xC471u);
          JUMPOUT(0x198736C18);
        }
        goto LABEL_12;
      }
      --*(_DWORD *)v26;
    }
    if ((_DWORD)v21 == -1)
      goto LABEL_74;
LABEL_12:
    v67 = v25;
    v69 = v25 - 1;
    *(_DWORD *)(v15 + 16 * (v25 - 1)) = 4 * v19;
    v27 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v74[4])(&v74);
    WTF::PrintStream::printf(v27, "%s", v11);
    v74[5]((WTF::StringPrintStream *)&v74);
    v28 = *a2;
    v29 = *(_QWORD **)(*(_QWORD *)(*a2 + 56) + 80);
    v72 = 0;
    v71 = (WTF *)&v74;
    v70 = (unint64_t)&off_1E3580A38;
    v73 = v28;
    JSC::dumpBytecode((int)&v70, v19, (JSC::OpEnumeratorHasOwnProperty *)(*v29 + v19));
    v30 = v71;
    v31 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v71 + 32))(v71);
    WTF::PrintStream::printf(v31, "%s", "\n");
    (*(void (**)(WTF *))(*(_QWORD *)v30 + 40))(v30);
    v32 = *(_DWORD *)(a5 + 12);
    v33 = *(_QWORD *)a5;
    LODWORD(v24) = v19;
    do
    {
      v24 = (v24 + 1);
      if (v32 <= v24)
      {
        if (v32 <= v19)
        {
          __break(0xC471u);
          JUMPOUT(0x198736C20);
        }
        v51 = *(_DWORD *)(v33 + 4 * v18);
        if (v51 < 4)
          v52 = 0;
        else
          v52 = *(_DWORD *)((v51 & 0xFFFFFFFC) + a3[3] - 4);
        v53 = (v51 - v52);
        v54 = a3[23];
        v55 = v53 + v54;
        if (v54 <= v55)
        {
          v56 = v54 + a3[1];
          if (v56 >= v55)
          {
            v57 = *a6;
            v70 = v55;
            if (v57 < 4)
              v58 = 0;
            else
              v58 = *(_DWORD *)((v57 & 0xFFFFFFFC) + a3[3] - 4);
            v59 = (v57 - v58) + v54;
            if (v54 > v59 || v56 < v59)
            {
              __break(0xC471u);
              JUMPOUT(0x198736BB4);
            }
            JSC::tryToDisassemble(&v70, v59 - v55, a2[7], a2[8], "        ", (WTF::PrintStream *)&v74);
            v61 = v75;
            if (!v75)
            {
              v63 = 0;
LABEL_60:
              v64 = v15 + 16 * v69;
              v65 = *(_DWORD **)(v64 + 8);
              *(_QWORD *)(v64 + 8) = v63;
              if (v65)
              {
                if (*v65 == 1)
                  WTF::fastFree((unint64_t)v65, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                else
                  --*v65;
              }
              goto LABEL_63;
            }
            v62 = v76;
            if ((unint64_t)v76 >= 0xFFFFFFFFFFFFFFF0)
            {
              __break(0xC471u);
              JUMPOUT(0x198736C28);
            }
            if ((_QWORD)v76 != -17)
            {
              v63 = WTF::fastMalloc((WTF *)(v76 + 17));
              *(_DWORD *)v63 = 1;
              *(_QWORD *)(v63 + 8) = v62;
              memcpy((void *)(v63 + 16), v61, v62);
              *(_BYTE *)(v63 + 16 + v62) = 0;
              goto LABEL_60;
            }
          }
        }
        __break(0xC471u);
        JUMPOUT(0x198736B94);
      }
      v34 = *(_DWORD *)(v33 + 4 * v24);
    }
    while (v34 == -1);
    if (v32 <= v19)
    {
      __break(0xC471u);
      JUMPOUT(0x198736C00);
    }
    v35 = *(_DWORD *)(v33 + 4 * v18);
    if (v35 < 4)
      v36 = 0;
    else
      v36 = *(_DWORD *)((v35 & 0xFFFFFFFC) + a3[3] - 4);
    v37 = (v35 - v36);
    v38 = a3[23];
    v39 = v37 + v38;
    if (v38 > v39 || (v40 = v38 + a3[1], v40 < v39))
    {
      __break(0xC471u);
      JUMPOUT(0x198736BD4);
    }
    v70 = v39;
    if (v34 < 4)
      v41 = 0;
    else
      v41 = *(_DWORD *)((v34 & 0xFFFFFFFC) + a3[3] - 4);
    v42 = (v34 - v41) + v38;
    if (v38 > v42 || v40 < v42)
    {
      __break(0xC471u);
      JUMPOUT(0x198736BF4);
    }
    JSC::tryToDisassemble(&v70, v42 - v39, a2[7], a2[8], "        ", (WTF::PrintStream *)&v74);
    v44 = v75;
    if (v75)
    {
      v45 = v76;
      if ((unint64_t)v76 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x198736C08);
      }
      if ((_QWORD)v76 == -17)
      {
        __break(0xC471u);
        JUMPOUT(0x198736C10);
      }
      v46 = WTF::fastMalloc((WTF *)(v76 + 17));
      *(_DWORD *)v46 = 1;
      *(_QWORD *)(v46 + 8) = v45;
      memcpy((void *)(v46 + 16), v44, v45);
      *(_BYTE *)(v46 + 16 + v45) = 0;
    }
    else
    {
      v46 = 0;
    }
    v47 = v15 + 16 * v69;
    v48 = *(_DWORD **)(v47 + 8);
    *(_QWORD *)(v47 + 8) = v46;
    v11 = (const char *)a4;
    v17 = v67;
    if (v48)
    {
      if (*v48 == 1)
      {
        WTF::fastFree((unint64_t)v48, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
        v17 = v67;
      }
      else
      {
        --*v48;
      }
    }
    v8 = *(_DWORD *)(a5 + 12);
    v16 = v15;
    v18 = v24;
LABEL_36:
    v19 = v24;
    v49 = v8 > v24;
    v14 = (uint64_t)a1;
  }
  while (v49);
LABEL_63:
  if (v75 != (WTF *)v77)
    WTF::fastFree((unint64_t)v75, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
}

void JSC::JITDivGenerator::loadOperand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60[2];
  char v61;
  __int16 v62;
  char v63;
  unsigned int v64[3];
  int v65;
  uint64_t v66;

  v11 = *(unsigned __int8 *)(a3 + 1);
  if (v11 == 1)
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)*(unsigned int *)(a3 + 2), *(char *)(a1 + 25), a4, a5, a6, a7, a8);
    v48 = *(_BYTE *)(a1 + 25);
    v49 = *(_DWORD *)(a2 + 200);
    if (v49 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v41, v42, v43, v44, v45, v46, v47);
      v49 = *(_DWORD *)(a2 + 200);
    }
    v50 = a5 | (32 * (v48 & 0x1F));
    v51 = 509739008;
    goto LABEL_21;
  }
  if (v11 == 2)
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(a3 + 2), *(char *)(a1 + 25), a4, a5, a6, a7, a8);
    v59 = *(_BYTE *)(a1 + 25);
    v49 = *(_DWORD *)(a2 + 200);
    if (v49 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v52, v53, v54, v55, v56, v57, v58);
      v49 = *(_DWORD *)(a2 + 200);
    }
    v50 = a5 | (32 * (v59 & 0x1F));
    v51 = -1637416960;
LABEL_21:
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v49) = v50 | v51;
    *(_DWORD *)(a2 + 200) += 4;
    return;
  }
  v12 = a4;
  v13 = (char)a4;
  if ((*(_BYTE *)a3 & 0x7E) != 2)
  {
    JSC::MacroAssemblerARM64::branchTest64(a2, 0, (char)a4, 27, a5, a6, a7, a8, (uint64_t)&v65);
    v15 = v65;
    if (v65 != -1)
    {
      v16 = *(unsigned int *)(a1 + 92);
      if ((_DWORD)v16 == *(_DWORD *)(a1 + 88))
      {
        v17 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 80, (void *)(v16 + 1), (unint64_t)&v65, v14, a5, a6, a7, a8);
        v19 = *v17;
        v18 = (uint64_t *)(v17 + 1);
        v15 = v19;
        v20 = *(_QWORD *)(a1 + 80) + 12 * *(unsigned int *)(a1 + 92);
      }
      else
      {
        v18 = &v66;
        v20 = *(_QWORD *)(a1 + 80) + 12 * v16;
      }
      *(_DWORD *)v20 = v15;
      *(_QWORD *)(v20 + 4) = *v18;
      ++*(_DWORD *)(a1 + 92);
    }
  }
  JSC::MacroAssemblerARM64::branch64(a2, 3, v13, 27, a5, a6, a7, a8, (uint64_t)v64);
  v28 = *(_DWORD *)(a2 + 200);
  if (v28 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v21, v22, v23, v24, v25, v26, v27);
    v28 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = a5 | (32 * (v12 & 0x1F)) | 0x1E620000;
  v29 = *(_DWORD *)(a2 + 200) + 4;
  for (*(_DWORD *)(a2 + 200) = v29; v29 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v29)
  {
    if ((v29 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v21, v22, v23, v24, v25, v26, v27);
      v29 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v29) = -721215457;
    v29 = *(_DWORD *)(a2 + 200) + 4;
  }
  v30 = v29;
  if ((v29 + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v21, v22, v23, v24, v25, v26, v27);
    v30 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v31 = 69;
  else
    v31 = 65;
  v60[0] = v29;
  v60[1] = 0;
  v61 = v31;
  v62 = 15;
  v63 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v64, a2, v22, v23, v24, v25, v26, v27);
  JSC::AssemblyHelpers::unboxDoubleWithoutAssertions((_DWORD *)a2, v13, *(char *)(a1 + 25), a5, 1, v32, v33, v34);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v60, a2, v35, v36, v37, v38, v39, v40);
}

void JSC::JITDivGenerator::generateFastPath(JSC::JITDivGenerator *this, JSC::CCallHelpers *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int *v23;
  char v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int8x8_t v33;
  char v34;
  char v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  _QWORD *v39;
  char v40;
  uint64_t v41;
  int *v42;
  int *v43;
  int v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  int v54;
  unsigned int v55;
  JSC::AssemblerBuffer *v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  char v76;
  uint64_t v77;
  int *v78;
  int *v79;
  int v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  unint64_t v94;
  int v95;
  int v96;
  char v97;
  __int16 v98;
  char v99;
  unsigned int v100[3];
  int v101;
  int v102;
  char v103;
  __int16 v104;
  char v105;
  int __e[2];
  uint64_t v107;
  _BYTE v108[24];

  if ((*(_BYTE *)this & 2) == 0)
    return;
  v9 = (char *)this + 10;
  if ((*((_BYTE *)this + 10) & 2) == 0)
    return;
  *((_BYTE *)this + 27) = 1;
  JSC::JITDivGenerator::loadOperand((uint64_t)this, (uint64_t)a2, (uint64_t)this, *((unsigned __int8 *)this + 21), *((char *)this + 23), a6, a7, a8);
  if (*((_BYTE *)this + 11))
  {
    v46 = *((_BYTE *)this + 11) == 1 ? (double)*((int *)this + 3) : *(double *)((char *)this + 12);
    if (v46 != 0.0 && ((*(_QWORD *)&v46 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE)
    {
      __e[0] = 0;
      if (frexp(v46, __e) == 0.5 && __e[0] != 1024)
      {
        *(double *)&v47 = ldexp(1.0, 1 - __e[0]);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, v47, *((char *)this + 25), v48, v49, v50, v51, v52);
        v53 = *((_BYTE *)this + 25);
        v54 = *((char *)this + 24);
        v23 = (unsigned int *)((char *)a2 + 200);
        v55 = *((_DWORD *)a2 + 50);
        v56 = (JSC::CCallHelpers *)((char *)a2 + 56);
        if (v55 + 4 > *((_DWORD *)a2 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v14, v15, v16, v17, v18, v19, v20);
          v55 = *v23;
        }
        v25 = 509609984;
        *(_DWORD *)(*((_QWORD *)a2 + 7) + v55) = v54 | (32 * (v53 & 0x1F)) | 0x9E670000;
        v57 = *((_DWORD *)a2 + 50);
        v22 = v57 + 4;
        *((_DWORD *)a2 + 50) = v57 + 4;
        v21 = *((_BYTE *)this + 24);
        v24 = *((_BYTE *)this + 23);
        if ((v57 + 8) <= *((_DWORD *)a2 + 48))
          goto LABEL_5;
        goto LABEL_75;
      }
    }
  }
  JSC::JITDivGenerator::loadOperand((uint64_t)this, (uint64_t)a2, (uint64_t)v9, *((unsigned __int8 *)this + 22), *((char *)this + 24), v11, v12, v13);
  v21 = *((_BYTE *)this + 24);
  v23 = (unsigned int *)((char *)a2 + 200);
  v22 = *((_DWORD *)a2 + 50);
  v24 = *((_BYTE *)this + 23);
  v25 = 509614080;
  if (v22 + 4 > *((_DWORD *)a2 + 48))
  {
    v56 = (JSC::CCallHelpers *)((char *)a2 + 56);
LABEL_75:
    JSC::AssemblerBuffer::outOfLineGrow(v56, v14, v15, v16, v17, v18, v19, v20);
    v22 = *v23;
  }
LABEL_5:
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v22) = v25 | (v21 << 16) | (32 * v24) | v24;
  *((_DWORD *)a2 + 50) += 4;
  *(_QWORD *)__e = v108;
  v107 = 2;
  JSC::MacroAssemblerARM64::branchConvertDoubleToInt32((uint64_t)a2, *((char *)this + 23), *((char *)this + 25), (uint64_t)__e, *((char *)this + 26), 1, v19, v20);
  v34 = *((_BYTE *)this + 25);
  v35 = *((_BYTE *)this + 20);
  v36 = *((_DWORD *)a2 + 50);
  if (v36 + 4 > *((_DWORD *)a2 + 48))
  {
    v33 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v26, v27, v28, v29, v30, v31, v32).n128_u64[0];
    v36 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v36) = v35 & 0x1F | ((v34 & 0x1F) << 16) | 0xAA000360;
  v37 = *((_DWORD *)a2 + 50) + 4;
  for (*((_DWORD *)a2 + 50) = v37; v37 < *((_DWORD *)a2 + 13); *((_DWORD *)a2 + 50) = v37)
  {
    if ((v37 + 4) > *((_DWORD *)a2 + 48))
    {
      v33 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v26, v27, v28, v29, v30, v31, v32).n128_u64[0];
      v37 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v37) = -721215457;
    v37 = *((_DWORD *)a2 + 50) + 4;
  }
  v38 = v37;
  if ((v37 + 4) > *((_DWORD *)a2 + 48))
  {
    v33 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v26, v27, v28, v29, v30, v31, v32).n128_u64[0];
    v38 = *((_DWORD *)a2 + 50);
  }
  v39 = (_QWORD *)((char *)this + 40);
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v38) = 335544320;
  *((_DWORD *)a2 + 50) += 4;
  if (*((_BYTE *)a2 + 328))
    v40 = 69;
  else
    v40 = 65;
  v101 = v37;
  v102 = 0;
  v103 = v40;
  v104 = 15;
  v105 = -1;
  if (v37 != -1)
  {
    v41 = *((unsigned int *)this + 13);
    if ((_DWORD)v41 == *((_DWORD *)this + 12))
    {
      v42 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 40, (void *)(v41 + 1), (unint64_t)&v101, v28, v29, v30, v31, v32);
      v44 = *v42;
      v43 = v42 + 1;
      v45 = *((_QWORD *)this + 5) + 12 * *((unsigned int *)this + 13);
      *(_DWORD *)v45 = v44;
    }
    else
    {
      v43 = &v102;
      v45 = *v39 + 12 * v41;
      *(_DWORD *)v45 = v37;
    }
    *(_QWORD *)(v45 + 4) = *(_QWORD *)v43;
    ++*((_DWORD *)this + 13);
  }
  if (HIDWORD(v107))
  {
    v58 = 0;
    v59 = 0;
    v60 = 12 * HIDWORD(v107);
    do
    {
      if (v59 >= HIDWORD(v107))
      {
        __break(0xC471u);
        JUMPOUT(0x1987375F0);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)__e + v58), (uint64_t)a2, v27, v28, v29, v30, v31, v32);
      ++v59;
      v58 += 12;
    }
    while (v60 != v58);
  }
  v61 = *((char *)this + 23);
  v62 = *((_BYTE *)this + 25);
  v63 = *((_DWORD *)a2 + 50);
  if (v63 + 4 > *((_DWORD *)a2 + 48))
  {
    v33 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v26, v27, v28, v29, v30, v31, v32).n128_u64[0];
    v63 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v63) = v62 & 0x1F | (32 * v61) | 0x9E660000;
  *((_DWORD *)a2 + 50) += 4;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)a2, 1, *((char *)this + 25), 0xFFFFFFFFLL, v29, v30, v31, v32, (uint64_t)v100, v33);
  v71 = *((unsigned __int8 *)this + 20);
  if (v71 == 27)
  {
    v74 = *((_DWORD *)a2 + 50);
  }
  else
  {
    if (v71 == 31)
      v72 = -1862270081;
    else
      v72 = v71 | 0xAA1B03E0;
    v73 = *((_DWORD *)a2 + 50);
    if (v73 + 4 > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v64, v65, v66, v67, v68, v69, v70);
      v73 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v73) = v72;
    v74 = *((_DWORD *)a2 + 50) + 4;
    *((_DWORD *)a2 + 50) = v74;
  }
  for (; v74 < *((_DWORD *)a2 + 13); *((_DWORD *)a2 + 50) = v74)
  {
    if ((v74 + 4) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v64, v65, v66, v67, v68, v69, v70);
      v74 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v74) = -721215457;
    v74 = *((_DWORD *)a2 + 50) + 4;
  }
  v75 = v74;
  if ((v74 + 4) > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v64, v65, v66, v67, v68, v69, v70);
    v75 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v75) = 335544320;
  *((_DWORD *)a2 + 50) += 4;
  if (*((_BYTE *)a2 + 328))
    v76 = 69;
  else
    v76 = 65;
  v95 = v74;
  v96 = 0;
  v97 = v76;
  v98 = 15;
  v99 = -1;
  if (v74 != -1)
  {
    v77 = *((unsigned int *)this + 13);
    if ((_DWORD)v77 == *((_DWORD *)this + 12))
    {
      v78 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 40, (void *)(v77 + 1), (unint64_t)&v95, v66, v67, v68, v69, v70);
      v80 = *v78;
      v79 = v78 + 1;
      v81 = *((_QWORD *)this + 5) + 12 * *((unsigned int *)this + 13);
      *(_DWORD *)v81 = v80;
    }
    else
    {
      v79 = &v96;
      v81 = *v39 + 12 * v77;
      *(_DWORD *)v81 = v74;
    }
    *(_QWORD *)(v81 + 4) = *(_QWORD *)v79;
    ++*((_DWORD *)this + 13);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v100, (uint64_t)a2, v65, v66, v67, v68, v69, v70);
  v88 = *((_QWORD *)this + 4);
  if (v88)
    JSC::MacroAssemblerARM64::or16((uint64_t)a2, (JSC::ARM64LogicalImmediate *)0x2000, v88);
  v89 = *((char *)this + 23);
  v90 = *((unsigned __int8 *)this + 20);
  v91 = *((_DWORD *)a2 + 50);
  if (v91 + 4 > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), (uint64_t)v82, v88, v83, v84, v85, v86, v87);
    v91 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v91) = v90 & 0x1F | (32 * v89) | 0x9E660000;
  v92 = *((_DWORD *)a2 + 50);
  v93 = v92 + 4;
  *((_DWORD *)a2 + 50) = v92 + 4;
  if (v90 == 31)
  {
    if ((v92 + 8) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), (uint64_t)v82, v88, v83, v84, v85, v86, v87);
      v93 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v93) = -885300225;
    *((_DWORD *)a2 + 50) += 4;
  }
  else
  {
    JSC::AssemblerBuffer::putInt((JSC::CCallHelpers *)((char *)a2 + 56), v90 & 0x1F | (32 * (v90 & 0x1F)) | 0xCB1B0000, v88, v83, v84, v85, v86, v87);
  }
  v94 = *(_QWORD *)__e;
  if (v108 != *(_BYTE **)__e)
  {
    if (*(_QWORD *)__e)
    {
      *(_QWORD *)__e = 0;
      LODWORD(v107) = 0;
      WTF::fastFree(v94, v82, v88, v83, v84, v85, v86, v87);
    }
  }
}

void JSC::genericUnwind(JSC *this, JSC::VM *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  char *v10;
  unint64_t v11;
  JSC::ShadowChicken *v12;
  JSC::Exception *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  int v46;
  JSC::CallFrame *v47;
  char v48;
  const void **v49;
  char *v50;

  v9 = (char *)this + 90480;
  v47 = a2;
  v10 = (char *)*((_QWORD *)this + 5);
  if (v10)
  {
    v11 = *((_QWORD *)v10 + 3);
    if ((v11 & 0xFFFE000000000007) == 3
      || *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28) + 96) == v11)
    {
      v31 = *((_QWORD *)this + 6);
      do
      {
        v10 = *(char **)v10;
        if (v10 == (char *)v31)
        {
          v33 = vmEntryRecord(v31);
          v31 = *(_QWORD *)(v33 + 16);
          v10 = *(char **)(v33 + 8);
        }
      }
      while (v10 && (*((_QWORD *)v10 + 3) & 0xFFFE000000000007) == 3);
    }
  }
  if (HIBYTE(word_1ECF4C48C))
  {
    if ((*((_QWORD *)v10 + 3) & 0xFFFE000000000007) == 3)
      v32 = 0;
    else
      v32 = *((_QWORD *)v10 + 2);
    v42 = v32;
    v50 = v10;
    WTF::dataLog<char [15],WTF::RawPointer,char [17],JSC::CodeBlock *,char [2]>((const void **)&v50, &v42);
    __break(0xC471u);
    JUMPOUT(0x198737828);
  }
  v12 = (JSC::ShadowChicken *)*((_QWORD *)v9 + 363);
  if ((v12 & 1) == 0 && v12)
  {
    v44 = 0u;
    v45 = 0u;
    v42 = 0;
    v46 = -1;
    v43 = 31250;
    JSC::ShadowChicken::log(v12, this, (JSC::CallFrame *)v10, (uint64_t)&v42, a5, a6, a7, a8);
  }
  v13 = (JSC::Exception *)*((_QWORD *)this + 2);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1987377E8);
  }
  JSC::Interpreter::unwind(this, &v47, v13, a5, a6, a7, a8, (uint64_t)&v42);
  if ((_BYTE)v42)
  {
    v21 = *((_QWORD *)&v44 + 1);
    v22 = v44;
    v23 = *((_QWORD *)&v45 + 1);
    v24 = v45;
    v25 = v46;
    v26 = v43;
    if (!(_QWORD)v44)
      v22 = 0;
  }
  else if (BYTE1(dword_1ECF4C240))
  {
    v27 = atomic_load(&JSC::LLInt::handleUncaughtExceptionThunk(void)::onceKey);
    if (v27 != -1)
    {
      v50 = &v48;
      v49 = (const void **)&v50;
      std::__call_once(&JSC::LLInt::handleUncaughtExceptionThunk(void)::onceKey, &v49, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::handleUncaughtExceptionThunk(void)::$_0 &&>>);
    }
    v26 = JSC::LLInt::handleUncaughtExceptionThunk(void)::codeRef;
    v28 = (unsigned int *)JSC::LLInt::handleUncaughtExceptionThunk(void)::codeRef;
    if (JSC::LLInt::handleUncaughtExceptionThunk(void)::codeRef)
    {
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 + 1, v28));
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (v30 == 1)
      {
        atomic_store(1u, v28);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v28, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
      }
    }
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v25 = 0;
    v24 = 0;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v25 = 0;
    v24 = 0;
    v26 = qword_1ECF532A8;
  }
  *(_QWORD *)v9 = v47;
  *((_QWORD *)v9 + 1) = v26;
  *((_QWORD *)v9 + 2) = v22;
  *((_QWORD *)v9 + 3) = v21;
  *((_QWORD *)v9 + 4) = v24;
  *((_QWORD *)v9 + 5) = v23;
  *((_DWORD *)v9 + 12) = v25;
  if (!v26)
  {
    __break(0xC471u);
    JUMPOUT(0x198737808);
  }
}

uint64_t WTF::dataLog<char [15],WTF::RawPointer,char [17],JSC::CodeBlock *,char [2]>(const void **a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "In call frame ");
  WTF::PrintStream::printf(v6, "%p", *a1);
  WTF::PrintStream::printf(v6, "%s", " for code block ");
  v7 = *a2;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  if (v7)
    JSC::CodeBlock::dumpAssumingJITType(v7);
  else
    WTF::PrintStream::printf(v8, "%s", "<null codeBlock>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t JSC::JITInlineCacheGenerator::finalize(uint64_t result, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  *(_QWORD *)(*(_QWORD *)(result + 8) + 24) = a4;
  v4 = *(_DWORD *)(result + 24);
  if (v4 < 4)
    v5 = 0;
  else
    v5 = *(_DWORD *)((v4 & 0xFFFFFFFC) + a2[3] - 4);
  v6 = (v4 - v5);
  v7 = a2[23];
  v8 = v6 + v7;
  if (v7 > v8 || v7 + a2[1] < v8)
    goto LABEL_21;
  *(_QWORD *)(*(_QWORD *)(result + 8) + 32) = v8;
  v10 = *(_DWORD *)(result + 32);
  if (v10 < 4)
    v11 = 0;
  else
    v11 = *(_DWORD *)((v10 & 0xFFFFFFFC) + a3[3] - 4);
  v12 = (v10 - v11);
  v13 = a3[23];
  v14 = v12 + v13;
  if (v13 > v14 || v13 + a3[1] < v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198737B4CLL);
  }
  *(_QWORD *)(*(_QWORD *)(result + 8) + 48) = v14;
  v15 = *(_DWORD *)(result + 28);
  v16 = v15 < 4 ? 0 : *(_DWORD *)((v15 & 0xFFFFFFFC) + a3[3] - 4);
  v17 = (v15 - v16);
  v18 = a3[23];
  v19 = v17 + v18;
  if (v18 > v19 || v18 + a3[1] < v19)
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x198737B2CLL);
  }
  *(_QWORD *)(*(_QWORD *)(result + 8) + 40) = v19;
  return result;
}

void JSC::JITInlineCacheGenerator::generateDFGDataICFastPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;

  v11 = (JSC::AssemblerBuffer *)(a2 + 56);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      v30 = a3;
      JSC::AssemblerBuffer::outOfLineGrow(v11, a2, a3, a4, a5, a6, a7, a8);
      a3 = v30;
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  *(_DWORD *)(a1 + 20) = i;
  JSC::MacroAssemblerARM64::sub64(a2, 26, (136 * a3 + 136), a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::load64(a2, a4 | 0x4800000000, 9, v13, v14, v15, v16, v17);
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198737D00);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  v25 = *(_BYTE *)(a2 + 272) & 0x1F | 0xF8408120;
  v26 = *(_DWORD *)(a2 + 200);
  if (v26 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, v18, v19, v20, v21, v22, v23, v24);
    v26 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v26) = v25;
  v27 = *(_DWORD *)(a2 + 200);
  v28 = v27 + 4;
  *(_DWORD *)(a2 + 200) = v27 + 4;
  *(_DWORD *)(a2 + 208) = 0;
  if ((v27 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, v18, v19, v20, v21, v22, v23, v24);
    v28 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = -700513792;
  v29 = *(_DWORD *)(a2 + 200) + 4;
  for (*(_DWORD *)(a2 + 200) = v29; v29 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v29)
  {
    if ((v29 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v11, v18, v19, v20, v21, v22, v23, v24);
      v29 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v29) = -721215457;
    v29 = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  *(_DWORD *)(a1 + 24) = v29;
}

void JSC::JITInlineCacheGenerator::generateBaselineDataICFastPath(uint64_t a1, JSC::MacroAssemblerARM64 *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  JSC::AssemblerBuffer *v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v8 = a3;
  v11 = (JSC::MacroAssemblerARM64 *)((char *)this + 56);
  for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
  {
    if ((i + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v11, (uint64_t)this, a3, a4, a5, a6, a7, a8);
      i = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
    i = *((_DWORD *)this + 50) + 4;
  }
  *((_DWORD *)this + 52) = 0;
  *(_DWORD *)(a1 + 20) = i;
  if (BYTE6(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::load64((uint64_t)this, v8 | 0x4800000000, 9, a4, a5, a6, a7, a8);
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198737ECCLL);
    }
    *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
    v20 = *((_BYTE *)this + 272) & 0x1F | 0xF8408120;
    v21 = *((_DWORD *)this + 50);
    if (v21 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v11, v13, v14, v15, v16, v17, v18, v19);
      v21 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v21) = v20;
    v22 = *((_DWORD *)this + 50);
    v23 = v22 + 4;
    *((_DWORD *)this + 50) = v22 + 4;
    *((_DWORD *)this + 52) = 0;
    if ((v22 + 8) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v11, v13, v14, v15, v16, v17, v18, v19);
      v23 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v23) = -700513792;
    v24 = *((_DWORD *)this + 50) + 4;
    *((_DWORD *)this + 50) = v24;
  }
  else
  {
    v25 = JSC::MacroAssemblerARM64::scratchRegister(this);
    JSC::MacroAssemblerARM64::load64((uint64_t)this, v8 | 0x4800000000, v25, v26, v27, v28, v29, v30);
    v31 = JSC::MacroAssemblerARM64::scratchRegister(this);
    JSC::MacroAssemblerARM64::farJump((uint64_t)this, v31 | 0x800000000, 49594, v32, v33, v34, v35, v36);
    v24 = *((_DWORD *)this + 50);
  }
  for (; v24 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v24)
  {
    if ((v24 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v11, v13, v14, v15, v16, v17, v18, v19);
      v24 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v24) = -721215457;
    v24 = *((_DWORD *)this + 50) + 4;
  }
  *((_DWORD *)this + 52) = 0;
  *(_DWORD *)(a1 + 24) = v24;
}

uint64_t JSC::JITByIdGenerator::JITByIdGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, char a7)
{
  uint64_t v9;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  _QWORD v27[2];
  _QWORD *v28;

  v9 = a4;
  if ((a4 & 1) != 0)
  {
    v19 = *(_QWORD *)(a4 & 0xFFFFFFFF8);
    if ((a4 & 2) != 0
      || ((LODWORD(v9) = *(_DWORD *)((a4 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v20 = (_DWORD)v9 == -1)
        : (v20 = 1),
          v20))
    {
      v21 = 2;
    }
    else
    {
      if (v9 >> 28)
        goto LABEL_18;
      v21 = *(_QWORD *)(a4 & 0xFFFFFFFF8);
      v19 = 0;
    }
    goto LABEL_12;
  }
  while (1)
  {
    v27[0] = a2;
    v27[1] = a3;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = a5;
    *(_QWORD *)(a1 + 20) = -1;
    *(_QWORD *)(a1 + 28) = -1;
    *(_DWORD *)(a1 + 36) = 0;
    v26[0] = a1;
    v26[1] = a1;
    v26[2] = a1;
    if (a3 != 0xFFFFFFFFLL)
      break;
    v19 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
    v22 = v19;
    v24 = a2;
    v25 = a3;
    v23 = a5;
    v19 = WTF::fastMalloc((WTF *)0x10);
    a2 = v24;
    a3 = v25;
    a5 = v23;
    *(_QWORD *)v19 = v22;
    *(_DWORD *)(v19 + 8) = v9;
    v21 = 1;
LABEL_12:
    v9 = v19 | v21;
  }
  v28 = v26;
  ((void (*)(_QWORD **, _QWORD *))off_1E3595E90[a3])(&v28, v27);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  *(_BYTE *)(a1 + 40) = a6;
  *(_BYTE *)(a1 + 41) = a7;
  *(_QWORD *)(a1 + 44) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 52) = -16773311;
  return a1;
}

uint64_t JSC::JITByIdGenerator::finalize(JSC::JITByIdGenerator *this, JSC::LinkBuffer *a2, JSC::LinkBuffer *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v3 = *((_DWORD *)this + 5);
  if (v3 < 4)
    v4 = 0;
  else
    v4 = *(_DWORD *)((v3 & 0xFFFFFFFC) + *((_QWORD *)a2 + 3) - 4);
  v5 = (v3 - v4);
  v6 = *((_QWORD *)a2 + 23);
  v7 = v5 + v6;
  if (v6 <= v5 + v6 && v6 + *((_QWORD *)a2 + 1) >= v7)
    return JSC::JITInlineCacheGenerator::finalize((uint64_t)this, a2, a3, v7);
  result = 366;
  __break(0xC471u);
  return result;
}

void JSC::JITByIdGenerator::generateFastCommon(JSC::JITByIdGenerator *this, JSC::CCallHelpers *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v11;
  int v12;
  int i;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;

  v11 = (JSC::CCallHelpers *)((char *)a2 + 56);
  v12 = *((_DWORD *)a2 + 50);
  for (i = *((_DWORD *)a2 + 13); v12 < i; i = *((_DWORD *)a2 + 13))
  {
    if ((v12 + 4) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v12 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v12) = -721215457;
    v12 = *((_DWORD *)a2 + 50) + 4;
    *((_DWORD *)a2 + 50) = v12;
  }
  *((_DWORD *)a2 + 52) = 0;
  *((_DWORD *)this + 5) = v12;
  v14 = v12;
  if (v12 < i)
  {
    do
    {
      if ((v12 + 4) > *((_DWORD *)a2 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v12 = *((_DWORD *)a2 + 50);
      }
      *(_DWORD *)(*((_QWORD *)a2 + 7) + v12) = -721215457;
      v12 = *((_DWORD *)a2 + 50) + 4;
      *((_DWORD *)a2 + 50) = v12;
    }
    while (v12 < *((_DWORD *)a2 + 13));
  }
  v15 = v12;
  if ((v12 + 4) > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v15 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v15) = 335544320;
  *((_DWORD *)a2 + 50) += 4;
  v16 = 0xFF000F4500000000;
  if (!*((_BYTE *)a2 + 328))
    v16 = 0xFF000F4100000000;
  *((_DWORD *)this + 11) = v12;
  *((_QWORD *)this + 6) = v16;
  v17 = *((unsigned int *)a2 + 50);
  v18 = v14 - v17 + a3;
  if ((v18 & 3) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198738308);
  }
  if (v18 >= 4)
  {
    v19 = v18 >> 2;
    v20 = 1;
    do
    {
      if ((v17 + 4) > *((_DWORD *)a2 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        LODWORD(v17) = *((_DWORD *)a2 + 50);
      }
      *(_DWORD *)(*((_QWORD *)a2 + 7) + v17) = -721215457;
      LODWORD(v17) = *((_DWORD *)a2 + 50) + 4;
      *((_DWORD *)a2 + 50) = v17;
    }
    while (v19 > v20++);
  }
  for (; (int)v17 < *((_DWORD *)a2 + 13); *((_DWORD *)a2 + 50) = v17)
  {
    if ((v17 + 4) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      LODWORD(v17) = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v17) = -721215457;
    LODWORD(v17) = *((_DWORD *)a2 + 50) + 4;
  }
  *((_DWORD *)a2 + 52) = 0;
  *((_DWORD *)this + 6) = v17;
}

uint64_t JSC::JITGetByIdGenerator::JITGetByIdGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL i;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  _QWORD v42[9];
  uint64_t v43;
  char v44;
  char v45;
  int v46;
  _QWORD v47[2];
  _QWORD *v48;

  v17 = BYTE1(a12);
  v19 = a10;
  v18 = a11;
  v20 = a9;
  v47[0] = a3;
  v47[1] = a4;
  v46 = a7;
  v45 = a10;
  v44 = a11;
  v43 = a2;
  v21 = *a6;
  if ((*a6 & 1) != 0)
  {
    v24 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
    if ((v21 & 2) != 0
      || ((v25 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v25 != 0x3FFFFFFF)
        ? (v26 = (_DWORD)v25 == -1)
        : (v26 = 1),
          v26))
    {
      v27 = 2;
    }
    else if (v25 >> 28)
    {
      v41 = BYTE1(a12);
      v39 = a3;
      v40 = a11;
      v37 = *(_DWORD *)((v21 & 0xFFFFFFFF8) + 8);
      v38 = WTF::fastMalloc((WTF *)0x10);
      a3 = v39;
      v18 = v40;
      v17 = v41;
      *(_QWORD *)v38 = v24;
      *(_DWORD *)(v38 + 8) = v37;
      v27 = 1;
      v24 = v38;
    }
    else
    {
      v27 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
      v24 = v25 << 36;
    }
    v28 = v24 | v27;
    JSC::JITByIdGenerator::JITByIdGenerator(a1, a3, a4, v28, v17, v19, v18);
    if ((v28 & 1) != 0 && (v28 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v28 & 0xFFFFFFFF8, v29, v30, v31, v32, v33, v34, v35);
  }
  else
  {
    JSC::JITByIdGenerator::JITByIdGenerator(a1, a3, a4, v21, SBYTE1(a12), a10, a11);
  }
  if (a2)
  {
    if (v20)
    {
      if ((v20 & 1) == 0)
        goto LABEL_26;
      v36 = v20 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v36 = 0;
    }
    goto LABEL_24;
  }
  for (i = 0; ; i = v36 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 41952) + 1768))
  {
    *(_BYTE *)(a1 + 56) = i;
    if (v19 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x198738504);
    }
    v42[0] = &v43;
    v42[1] = (char *)&a12 + 1;
    v42[2] = a6;
    v42[3] = &v46;
    v42[4] = a8;
    v42[5] = &a9;
    v42[6] = &v45;
    v42[7] = &v44;
    v42[8] = &a12;
    if (a4 != 0xFFFFFFFFLL)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_26:
    v36 = *(_QWORD *)(v20 + 8);
LABEL_24:
    ;
  }
  v48 = v42;
  ((void (*)(_QWORD **, _QWORD *))off_1E3595EA8[a4])(&v48, v47);
  return a1;
}

void JSC::JITGetByIdGenerator::generateBaselineDataICFastPath(JSC::JITGetByIdGenerator *this, JSC::JIT *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int j;

  v10 = (JSC::JIT *)((char *)a2 + 56);
  for (i = *((_DWORD *)a2 + 50); i < *((_DWORD *)a2 + 13); *((_DWORD *)a2 + 50) = i)
  {
    if ((i + 4) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      i = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + i) = -721215457;
    i = *((_DWORD *)a2 + 50) + 4;
  }
  *((_DWORD *)a2 + 52) = 0;
  *((_DWORD *)this + 5) = i;
  JSC::generateGetByIdInlineAccessBaselineDataIC((uint64_t)a2, 1, 2, a4, a5, a6, a7, a8);
  for (j = *((_DWORD *)a2 + 50); j < *((_DWORD *)a2 + 13); *((_DWORD *)a2 + 50) = j)
  {
    if ((j + 4) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, v12, v13, v14, v15, v16, v17, v18);
      j = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + j) = -721215457;
    j = *((_DWORD *)a2 + 50) + 4;
  }
  *((_DWORD *)a2 + 52) = 0;
  *((_DWORD *)this + 6) = j;
}

unsigned int *JSC::generateGetByIdInlineAccessBaselineDataIC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v9;
  int v11;
  JSC::AssemblerBuffer *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int i;
  unsigned int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66[2];
  char v67;
  __int16 v68;
  char v69;
  unsigned int v70[3];

  v9 = a2;
  v11 = a3 & 0x1F | 0xB8400000;
  v12 = (JSC::AssemblerBuffer *)(a1 + 56);
  v13 = *(_DWORD *)(a1 + 200);
  if (v13 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v11;
  *(_DWORD *)(a1 + 200) += 4;
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987388D4);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load32(a1, v9 | 0xC00000000, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branch32(a1, 1, a3, 17, v14, v15, v16, v17, (uint64_t)v70);
  JSC::MacroAssemblerARM64::load32(a1, v9 | 0x800000000, a3, v18, v19, v20, v21, v22);
  JSC::AssemblyHelpers::loadProperty(a1, 0, a3, 0, v23, v24, v25, v26);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, v27, v28, v29, v30, v31, v32, v33);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v35 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, v27, v28, v29, v30, v31, v32, v33);
    v35 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v35) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v36 = 69;
  else
    v36 = 65;
  v66[0] = i;
  v66[1] = 0;
  v67 = v36;
  v68 = 15;
  v69 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v70, a1, v28, v29, v30, v31, v32, v33);
  if (BYTE6(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::load64(a1, v9 | 0x4800000000, 9, v37, v38, v39, v40, v41);
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198738940);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    v49 = *(_BYTE *)(a1 + 272) & 0x1F | 0xF8408120;
    v50 = *(_DWORD *)(a1 + 200);
    if (v50 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, v42, v43, v44, v45, v46, v47, v48);
      v50 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v50) = v49;
    v51 = *(_DWORD *)(a1 + 200);
    v52 = v51 + 4;
    *(_DWORD *)(a1 + 200) = v51 + 4;
    *(_DWORD *)(a1 + 208) = 0;
    if ((v51 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, v42, v43, v44, v45, v46, v47, v48);
      v52 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v52) = -700513792;
    *(_DWORD *)(a1 + 200) += 4;
  }
  else
  {
    v54 = JSC::MacroAssemblerARM64::scratchRegister((JSC::MacroAssemblerARM64 *)a1);
    JSC::MacroAssemblerARM64::load64(a1, v9 | 0x4800000000, v54, v55, v56, v57, v58, v59);
    v60 = JSC::MacroAssemblerARM64::scratchRegister((JSC::MacroAssemblerARM64 *)a1);
    JSC::MacroAssemblerARM64::farJump(a1, v60 | 0x800000000, 49594, v61, v62, v63, v64, v65);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v66, a1, v43, v44, v45, v46, v47, v48);
}

void JSC::JITGetByIdGenerator::generateDFGDataICFastPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v10;
  unsigned __int8 v11;
  JSC::AssemblerBuffer *v14;
  int i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int j;
  uint64_t v27;

  v10 = a5;
  v11 = a4;
  v14 = (JSC::AssemblerBuffer *)(a2 + 56);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      v27 = a3;
      JSC::AssemblerBuffer::outOfLineGrow(v14, a2, a3, a4, a5, a6, a7, a8);
      a3 = v27;
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  *(_DWORD *)(a1 + 20) = i;
  JSC::MacroAssemblerARM64::sub64(a2, 26, (136 * a3 + 136), a6, a5, a6, a7, a8);
  JSC::generateGetByIdInlineAccessDFGDataIC(a2, a6, v11, a7, v10, v16, v17, v18);
  for (j = *(_DWORD *)(a2 + 200); j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v14, v19, v20, v21, v22, v23, v24, v25);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  *(_DWORD *)(a1 + 24) = j;
}

void JSC::generateGetByIdInlineAccessDFGDataIC(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47[3];

  v8 = a5;
  JSC::MacroAssemblerARM64::load32(a1, a3, a4, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198738CA0);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load32(a1, a2 | 0xC00000000, *(char *)(a1 + 304), v13, v14, v15, v16, v17);
  JSC::MacroAssemblerARM64::branch32(a1, 0, a4, 17, v18, v19, v20, v21, (uint64_t)v47);
  JSC::MacroAssemblerARM64::load64(a1, a2 | 0x4800000000, 9, v22, v23, v24, v25, v26);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198738CC0);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v34 = *(_BYTE *)(a1 + 272) & 0x1F | 0xF8408120;
  v35 = *(_DWORD *)(a1 + 200);
  if (v35 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v27, v28, v29, v30, v31, v32, v33);
    v35 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v35) = v34;
  v36 = *(_DWORD *)(a1 + 200);
  v37 = v36 + 4;
  *(_DWORD *)(a1 + 200) = v36 + 4;
  *(_DWORD *)(a1 + 208) = 0;
  if ((v36 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v27, v28, v29, v30, v31, v32, v33);
    v37 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v37) = -700513792;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v47, a1, v28, v29, v30, v31, v32, v33);
  JSC::MacroAssemblerARM64::load32(a1, a2 | 0x800000000, a4, v38, v39, v40, v41, v42);
  JSC::AssemblyHelpers::loadProperty(a1, (char)a3, a4, v8, v43, v44, v45, v46);
}

uint64_t JSC::JITGetByIdWithThisGenerator::JITGetByIdWithThisGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  uint64_t v13;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  _QWORD v38[9];
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  int v43;
  _QWORD v44[2];
  _QWORD *v45;

  v18 = a10;
  v19 = a11;
  v44[0] = a3;
  v44[1] = a4;
  v43 = a7;
  v42 = a10;
  v41 = a11;
  v20 = a12;
  v40 = a12;
  v39 = a2;
  v21 = *a6;
  if ((*a6 & 1) != 0)
  {
    v13 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
    if ((v21 & 2) != 0
      || ((v23 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v23 != 0x3FFFFFFF)
        ? (v24 = (_DWORD)v23 == -1)
        : (v24 = 1),
          v24))
    {
      v25 = 2;
      goto LABEL_13;
    }
    if (!(v23 >> 28))
    {
      v25 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
      v13 = v23 << 36;
      goto LABEL_13;
    }
    goto LABEL_20;
  }
  JSC::JITByIdGenerator::JITByIdGenerator(a1, a3, a4, v21, 1, a11, a10);
  while (1)
  {
    if (v20 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x198738E58);
    }
    v38[0] = &v39;
    v38[1] = a6;
    v38[2] = &v43;
    v38[3] = a8;
    v38[4] = &a9;
    v38[5] = &v42;
    v38[6] = &v41;
    v38[7] = &v40;
    v38[8] = &a13;
    if (a4 != 0xFFFFFFFFLL)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_20:
    v36 = v19;
    v37 = a3;
    v35 = v18;
    v33 = v23;
    v34 = WTF::fastMalloc((WTF *)0x10);
    v18 = v35;
    v19 = v36;
    a3 = v37;
    *(_QWORD *)v34 = v13;
    *(_DWORD *)(v34 + 8) = v33;
    v25 = 1;
    v13 = v34;
LABEL_13:
    v13 |= v25;
    JSC::JITByIdGenerator::JITByIdGenerator(a1, a3, a4, v13, 1, v19, v18);
    if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v13 & 0xFFFFFFFF8, v26, v27, v28, v29, v30, v31, v32);
  }
  v45 = v38;
  ((void (*)(_QWORD **, _QWORD *))off_1E3595EC0[a4])(&v45, v44);
  return a1;
}

uint64_t JSC::JITGetByIdWithThisGenerator::JITGetByIdWithThisGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, int a11, unsigned __int8 a12, int a13, char a14, uint64_t a15)
{
  return JSC::JITGetByIdWithThisGenerator::JITGetByIdWithThisGenerator(a1, a2, a3, a4, 0, a6, a7, a8, a9, a10, a12, a14, a15);
}

void JSC::JITGetByIdWithThisGenerator::generateFastPath(JSC::JITGetByIdWithThisGenerator *this, JSC::CCallHelpers *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JITByIdGenerator::generateFastCommon(this, a2, 40, a4, a5, a6, a7, a8);
}

void JSC::JITGetByIdWithThisGenerator::generateBaselineDataICFastPath(JSC::JITGetByIdWithThisGenerator *this, JSC::JIT *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int j;

  v10 = (JSC::JIT *)((char *)a2 + 56);
  for (i = *((_DWORD *)a2 + 50); i < *((_DWORD *)a2 + 13); *((_DWORD *)a2 + 50) = i)
  {
    if ((i + 4) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      i = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + i) = -721215457;
    i = *((_DWORD *)a2 + 50) + 4;
  }
  *((_DWORD *)a2 + 52) = 0;
  *((_DWORD *)this + 5) = i;
  JSC::generateGetByIdInlineAccessBaselineDataIC((uint64_t)a2, 2, 3, a4, a5, a6, a7, a8);
  for (j = *((_DWORD *)a2 + 50); j < *((_DWORD *)a2 + 13); *((_DWORD *)a2 + 50) = j)
  {
    if ((j + 4) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, v12, v13, v14, v15, v16, v17, v18);
      j = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + j) = -721215457;
    j = *((_DWORD *)a2 + 50) + 4;
  }
  *((_DWORD *)a2 + 52) = 0;
  *((_DWORD *)this + 6) = j;
}

uint64_t JSC::JITPutByIdGenerator::JITPutByIdGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD v38[10];
  uint64_t v39;
  char v40;
  char v41;
  int v42;
  _QWORD v43[2];
  _QWORD *v44;

  v17 = BYTE2(a12);
  v19 = a10;
  v18 = a11;
  v43[0] = a3;
  v43[1] = a4;
  v42 = a7;
  v41 = a10;
  v40 = a11;
  v39 = a2;
  v20 = *a6;
  if ((*a6 & 1) != 0)
  {
    v12 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
    if ((v20 & 2) != 0
      || ((v22 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v22 != 0x3FFFFFFF)
        ? (v23 = (_DWORD)v22 == -1)
        : (v23 = 1),
          v23))
    {
      v24 = 2;
      goto LABEL_12;
    }
    if (!(v22 >> 28))
    {
      v24 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v12 = v22 << 36;
      goto LABEL_12;
    }
    goto LABEL_18;
  }
  JSC::JITByIdGenerator::JITByIdGenerator(a1, a3, a4, v20, SBYTE2(a12), a10, a11);
  while (1)
  {
    v38[0] = &v39;
    v38[1] = (char *)&a12 + 2;
    v38[2] = a6;
    v38[3] = &v42;
    v38[4] = a8;
    v38[5] = &a9;
    v38[6] = &v41;
    v38[7] = &v40;
    v38[8] = &a12;
    v38[9] = (char *)&a12 + 1;
    if (a4 != 0xFFFFFFFFLL)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
    v37 = v17;
    v35 = a3;
    v36 = v18;
    v34 = v19;
    v32 = v22;
    v33 = WTF::fastMalloc((WTF *)0x10);
    v19 = v34;
    a3 = v35;
    v18 = v36;
    v17 = v37;
    *(_QWORD *)v33 = v12;
    *(_DWORD *)(v33 + 8) = v32;
    v24 = 1;
    v12 = v33;
LABEL_12:
    v12 |= v24;
    JSC::JITByIdGenerator::JITByIdGenerator(a1, a3, a4, v12, v17, v19, v18);
    if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v12 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
  }
  v44 = v38;
  ((void (*)(_QWORD **, _QWORD *))off_1E3595ED8[a4])(&v44, v43);
  return a1;
}

void JSC::JITPutByIdGenerator::generateBaselineDataICFastPath(JSC::JITPutByIdGenerator *this, JSC::JIT *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  unsigned int v11;
  signed int i;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int j;
  unsigned int v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int k;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69[2];
  char v70;
  __int16 v71;
  char v72;
  unsigned int v73[2];
  char v74;
  __int16 v75;
  char v76;

  v10 = (JSC::JIT *)((char *)a2 + 56);
  v11 = *((_DWORD *)a2 + 50);
  for (i = *((_DWORD *)a2 + 13); (int)v11 < i; i = *((_DWORD *)a2 + 13))
  {
    if (v11 + 4 > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v11 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v11) = -721215457;
    v11 = *((_DWORD *)a2 + 50) + 4;
    *((_DWORD *)a2 + 50) = v11;
  }
  *((_DWORD *)a2 + 52) = 0;
  *((_DWORD *)this + 5) = v11;
  if (v11 + 4 > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v11 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v11) = -1203765213;
  v13 = *((_DWORD *)a2 + 50);
  v14 = v13 + 4;
  *((_DWORD *)a2 + 50) = v13 + 4;
  if (!*((_BYTE *)a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987394F8);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 37) + 208) &= ~*((_DWORD *)a2 + 80);
  v15 = *((_BYTE *)a2 + 304) & 0x1F | 0xB840C040;
  if ((v13 + 8) > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v14 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v14) = v15;
  v16 = *((_DWORD *)a2 + 50);
  v17 = v16 + 4;
  *((_DWORD *)a2 + 50) = v16 + 4;
  if ((v16 + 8) > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v17 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v17) = 1796276351;
  v18 = *((_DWORD *)a2 + 50) + 4;
  *((_DWORD *)a2 + 50) = v18;
  if (*((_BYTE *)a2 + 328))
  {
    while ((signed int)v18 < *((_DWORD *)a2 + 13))
    {
      if (v18 + 4 > *((_DWORD *)a2 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v18 = *((_DWORD *)a2 + 50);
      }
      *(_DWORD *)(*((_QWORD *)a2 + 7) + v18) = -721215457;
      v18 = *((_DWORD *)a2 + 50) + 4;
      *((_DWORD *)a2 + 50) = v18;
    }
    *((_DWORD *)a2 + 52) = 0;
  }
  if (v18 + 4 > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v18 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v18) = 1409286145;
  v19 = *((_DWORD *)a2 + 50);
  v20 = v19 + 4;
  *((_DWORD *)a2 + 50) = v19 + 4;
  v21 = v19 + 8;
  v22 = v19 + 4;
  if (v21 > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v22 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v22) = -721215457;
  v23 = *((_DWORD *)a2 + 50);
  v24 = v23 + 4;
  *((_DWORD *)a2 + 50) = v23 + 4;
  if (*((_BYTE *)a2 + 328))
    v25 = -122;
  else
    v25 = -126;
  v73[0] = v20;
  v73[1] = 0;
  v74 = v25;
  v75 = 1;
  v76 = -1;
  if ((v23 + 8) > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v24 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v24) = -1203732413;
  *((_DWORD *)a2 + 50) += 4;
  JSC::AssemblyHelpers::storeProperty((uint64_t)a2, 0, 1, 3, 1, a6, a7, a8);
  for (j = *((_DWORD *)a2 + 50); j < *((_DWORD *)a2 + 13); *((_DWORD *)a2 + 50) = j)
  {
    if ((j + 4) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, v26, v27, v28, v29, v30, v31, v32);
      j = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + j) = -721215457;
    j = *((_DWORD *)a2 + 50) + 4;
  }
  v34 = j;
  if ((j + 4) > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, v26, v27, v28, v29, v30, v31, v32);
    v34 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v34) = 335544320;
  *((_DWORD *)a2 + 50) += 4;
  if (*((_BYTE *)a2 + 328))
    v35 = 69;
  else
    v35 = 65;
  v69[0] = j;
  v69[1] = 0;
  v70 = v35;
  v71 = 15;
  v72 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v73, (uint64_t)a2, v27, v28, v29, v30, v31, v32);
  if (BYTE6(qword_1ECF4C780))
  {
    v43 = *((_DWORD *)a2 + 50);
    if (v43 + 4 > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, v36, v37, v38, v39, v40, v41, v42);
      v43 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v43) = -129728439;
    v44 = *((_DWORD *)a2 + 50);
    v45 = v44 + 4;
    *((_DWORD *)a2 + 50) = v44 + 4;
    if (!*((_BYTE *)a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1987395D8);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 33) + 208) &= ~*((_DWORD *)a2 + 72);
    v46 = *((_BYTE *)a2 + 272) & 0x1F | 0xF8408120;
    if ((v44 + 8) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, v36, v37, v38, v39, v40, v41, v42);
      v45 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v45) = v46;
    v47 = *((_DWORD *)a2 + 50);
    v48 = v47 + 4;
    *((_DWORD *)a2 + 50) = v47 + 4;
    *((_DWORD *)a2 + 52) = 0;
    if ((v47 + 8) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, v36, v37, v38, v39, v40, v41, v42);
      v48 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v48) = -700513792;
    *((_DWORD *)a2 + 50) += 4;
  }
  else
  {
    v57 = JSC::MacroAssemblerARM64::scratchRegister(a2);
    JSC::MacroAssemblerARM64::load64((uint64_t)a2, 0x4800000002, v57, v58, v59, v60, v61, v62);
    v63 = JSC::MacroAssemblerARM64::scratchRegister(a2);
    JSC::MacroAssemblerARM64::farJump((uint64_t)a2, v63 | 0x800000000, 49594, v64, v65, v66, v67, v68);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v69, (uint64_t)a2, v37, v38, v39, v40, v41, v42);
  for (k = *((_DWORD *)a2 + 50); k < *((_DWORD *)a2 + 13); *((_DWORD *)a2 + 50) = k)
  {
    if ((k + 4) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, v49, v50, v51, v52, v53, v54, v55);
      k = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + k) = -721215457;
    k = *((_DWORD *)a2 + 50) + 4;
  }
  *((_DWORD *)a2 + 52) = 0;
  *((_DWORD *)this + 6) = k;
}

void JSC::JITPutByIdGenerator::generateDFGDataICFastPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v11;
  unsigned __int8 v12;
  JSC::AssemblerBuffer *v15;
  int i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int j;
  uint64_t v63;
  unsigned int v64[3];

  v11 = a5;
  v12 = a4;
  v15 = (JSC::AssemblerBuffer *)(a2 + 56);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      v63 = a3;
      JSC::AssemblerBuffer::outOfLineGrow(v15, a2, a3, a4, a5, a6, a7, a8);
      a3 = v63;
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  *(_DWORD *)(a1 + 20) = i;
  JSC::MacroAssemblerARM64::sub64(a2, 26, (136 * a3 + 136), a6, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::load32(a2, v12, a7, v17, v18, v19, v20, v21);
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987398FCLL);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
  JSC::MacroAssemblerARM64::load32(a2, a6 | 0xC00000000, *(char *)(a2 + 304), v22, v23, v24, v25, v26);
  JSC::MacroAssemblerARM64::branch32(a2, 0, a7, 17, v27, v28, v29, v30, (uint64_t)v64);
  JSC::MacroAssemblerARM64::load64(a2, a6 | 0x4800000000, 9, v31, v32, v33, v34, v35);
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19873991CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  v43 = *(_BYTE *)(a2 + 272) & 0x1F | 0xF8408120;
  v44 = *(_DWORD *)(a2 + 200);
  if (v44 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v36, v37, v38, v39, v40, v41, v42);
    v44 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v44) = v43;
  v45 = *(_DWORD *)(a2 + 200);
  v46 = v45 + 4;
  *(_DWORD *)(a2 + 200) = v45 + 4;
  *(_DWORD *)(a2 + 208) = 0;
  if ((v45 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v15, v36, v37, v38, v39, v40, v41, v42);
    v46 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v46) = -700513792;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v64, a2, v37, v38, v39, v40, v41, v42);
  JSC::MacroAssemblerARM64::load32(a2, a6 | 0x800000000, a7, v47, v48, v49, v50, v51);
  JSC::AssemblyHelpers::storeProperty(a2, v11, (char)v12, a7, a8, v52, v53, v54);
  for (j = *(_DWORD *)(a2 + 200); j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v15, v55, v56, v57, v58, v59, v60, v61);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  *(_DWORD *)(a1 + 24) = j;
}

uint64_t JSC::JITDelByValGenerator::JITDelByValGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, char a8, uint64_t a9, char a10, int a11, char a12, int a13, char a14, uint64_t a15)
{
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  uint64_t *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t *v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  int v47;
  _QWORD v48[2];
  _QWORD v49[2];
  uint64_t **v50;

  v48[0] = a3;
  v48[1] = a4;
  v47 = a7;
  v46 = a10;
  v45 = a12;
  v44 = a14;
  v43 = a2;
  v42 = a8;
  v17 = *a6;
  if ((*a6 & 1) != 0)
  {
    v18 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
    if ((v17 & 2) != 0
      || ((LODWORD(v17) = *(_DWORD *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v17 != 0x3FFFFFFF)
        ? (v27 = (_DWORD)v17 == -1)
        : (v27 = 1),
          v27))
    {
      v28 = 2;
    }
    else
    {
      if (v17 >> 28)
        goto LABEL_18;
      v28 = v18;
      v18 = 0;
    }
    goto LABEL_12;
  }
  while (1)
  {
    v49[0] = a3;
    v49[1] = a4;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = a8;
    *(_QWORD *)(a1 + 20) = -1;
    *(_QWORD *)(a1 + 28) = -1;
    *(_DWORD *)(a1 + 36) = 0;
    v33 = (uint64_t *)a1;
    v34 = (char *)a1;
    v18 = a4;
    v35 = (uint64_t *)a1;
    if (a4 != 0xFFFFFFFFLL)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
    v32 = a4;
    v29 = a8;
    v30 = a3;
    v31 = WTF::fastMalloc((WTF *)0x10);
    a3 = v30;
    a8 = v29;
    a4 = v32;
    *(_QWORD *)v31 = v18;
    *(_DWORD *)(v31 + 8) = v17;
    v28 = 1;
    v18 = v31;
LABEL_12:
    v17 = v18 | v28;
  }
  v50 = &v33;
  ((void (*)(uint64_t ***, _QWORD *))off_1E3595E90[a4])(&v50, v49);
  if ((v17 & 1) != 0 && (v17 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v17 & 0xFFFFFFFF8, v19, v20, v21, v22, v23, v24, v25);
  *(_QWORD *)(a1 + 40) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 48) = -16773311;
  v33 = &v43;
  v34 = &v42;
  v35 = a6;
  v36 = &v47;
  v37 = a9;
  v38 = &v46;
  v39 = &v45;
  v40 = &v44;
  v41 = &a15;
  v49[0] = &v33;
  ((void (*)(_QWORD *, _QWORD *))off_1E3595EF0[v18])(v49, v48);
  return a1;
}

void JSC::JITDelByValGenerator::generateFastPath(JSC::JITDelByValGenerator *this, JSC::CCallHelpers *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  int v11;
  int i;
  unsigned int v13;
  unint64_t v14;
  int j;

  v10 = (JSC::CCallHelpers *)((char *)a2 + 56);
  v11 = *((_DWORD *)a2 + 50);
  for (i = *((_DWORD *)a2 + 13); v11 < i; i = *((_DWORD *)a2 + 13))
  {
    if ((v11 + 4) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v11 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v11) = -721215457;
    v11 = *((_DWORD *)a2 + 50) + 4;
    *((_DWORD *)a2 + 50) = v11;
  }
  *((_DWORD *)a2 + 52) = 0;
  *((_DWORD *)this + 5) = v11;
  *((_BYTE *)a2 + 328) = 1;
  if (v11 < i)
  {
    do
    {
      if ((v11 + 4) > *((_DWORD *)a2 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v11 = *((_DWORD *)a2 + 50);
      }
      *(_DWORD *)(*((_QWORD *)a2 + 7) + v11) = -721215457;
      v11 = *((_DWORD *)a2 + 50) + 4;
      *((_DWORD *)a2 + 50) = v11;
    }
    while (v11 < *((_DWORD *)a2 + 13));
  }
  v13 = v11;
  if ((v11 + 4) > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v13 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v13) = 335544320;
  *((_DWORD *)a2 + 50) += 4;
  v14 = 0xFF000F4500000000;
  if (!*((_BYTE *)a2 + 328))
    v14 = 0xFF000F4100000000;
  *((_BYTE *)a2 + 328) = 0;
  *((_DWORD *)this + 10) = v11;
  *(_QWORD *)((char *)this + 44) = v14;
  for (j = *((_DWORD *)a2 + 50); j < *((_DWORD *)a2 + 13); *((_DWORD *)a2 + 50) = j)
  {
    if ((j + 4) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      j = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + j) = -721215457;
    j = *((_DWORD *)a2 + 50) + 4;
  }
  *((_DWORD *)a2 + 52) = 0;
  *((_DWORD *)this + 6) = j;
}

uint64_t JSC::JITDelByIdGenerator::JITDelByIdGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  uint64_t *v33;
  int *v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  uint64_t *v39;
  char v40;
  uint64_t v41;
  char v42;
  char v43;
  int v44;
  _QWORD v45[2];
  _QWORD v46[2];
  uint64_t **v47;

  v45[0] = a3;
  v45[1] = a4;
  v44 = a7;
  v43 = a11;
  v42 = a12;
  v41 = a2;
  v40 = a8;
  v15 = *a6;
  if ((*a6 & 1) != 0)
  {
    v16 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((LODWORD(v15) = *(_DWORD *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v15 != 0x3FFFFFFF)
        ? (v25 = (_DWORD)v15 == -1)
        : (v25 = 1),
          v25))
    {
      v26 = 2;
    }
    else
    {
      if (v15 >> 28)
        goto LABEL_18;
      v26 = v16;
      v16 = 0;
    }
    goto LABEL_12;
  }
  while (1)
  {
    v46[0] = a3;
    v46[1] = a4;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = a8;
    *(_QWORD *)(a1 + 20) = -1;
    *(_QWORD *)(a1 + 28) = -1;
    *(_DWORD *)(a1 + 36) = 0;
    v31 = (uint64_t *)a1;
    v32 = (char *)a1;
    v16 = a4;
    v33 = (uint64_t *)a1;
    if (a4 != 0xFFFFFFFFLL)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
    v30 = a4;
    v27 = a8;
    v28 = a3;
    v29 = WTF::fastMalloc((WTF *)0x10);
    a3 = v28;
    a8 = v27;
    a4 = v30;
    *(_QWORD *)v29 = v16;
    *(_DWORD *)(v29 + 8) = v15;
    v26 = 1;
    v16 = v29;
LABEL_12:
    v15 = v16 | v26;
  }
  v47 = &v31;
  ((void (*)(uint64_t ***, _QWORD *))off_1E3595E90[a4])(&v47, v46);
  if ((v15 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v15 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 40) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 48) = -16773311;
  v31 = &v41;
  v32 = &v40;
  v33 = a6;
  v34 = &v44;
  v35 = a9;
  v36 = &a10;
  v37 = &v43;
  v38 = &v42;
  v39 = &a13;
  v46[0] = &v31;
  ((void (*)(_QWORD *, _QWORD *))off_1E3595F08[v16])(v46, v45);
  return a1;
}

uint64_t JSC::JITDelByIdGenerator::JITDelByIdGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, char a8, uint64_t a9, uint64_t a10, unsigned __int8 a11, int a12, unsigned __int8 a13, uint64_t a14)
{
  return JSC::JITDelByIdGenerator::JITDelByIdGenerator(a1, a2, a3, a4, 0, a6, a7, a8, a9, a10, a11, a13, a14);
}

_DWORD *JSC::JITDelByIdGenerator::generateFastPath(JSC::JITDelByIdGenerator *this, JSC::CCallHelpers *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *result;
  int v25;
  uint64_t v26;

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8, &v25);
  *((_DWORD *)this + 5) = v25;
  JSC::MacroAssemblerARM64::patchableJump(a2, v10, v11, v12, v13, v14, v15, v16, (uint64_t)&v25);
  *((_DWORD *)this + 10) = v25;
  *(_QWORD *)((char *)this + 44) = v26;
  result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(a2, v17, v18, v19, v20, v21, v22, v23, &v25);
  *((_DWORD *)this + 6) = v25;
  return result;
}

uint64_t JSC::JITDelByIdGenerator::finalize(JSC::JITDelByIdGenerator *this, JSC::LinkBuffer *a2, JSC::LinkBuffer *a3)
{
  uint64_t v6;
  int v8;

  v8 = *((_DWORD *)this + 5);
  v6 = JSC::LinkBuffer::locationOf<(WTF::PtrTag)49594>(a2, &v8);
  return JSC::JITInlineCacheGenerator::finalize((uint64_t)this, a2, a3, v6);
}

uint64_t JSC::JITInByValGenerator::JITInByValGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, char a8, uint64_t a9, char a10, int a11, char a12, int a13, char a14, uint64_t a15)
{
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  uint64_t *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t *v41;
  char *v42;
  char v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  int v48;
  _QWORD v49[2];
  _QWORD v50[2];
  uint64_t **v51;

  v49[0] = a3;
  v49[1] = a4;
  v48 = a7;
  v47 = a10;
  v46 = a12;
  v45 = a14;
  v44 = a2;
  v43 = a8;
  v17 = *a6;
  if ((*a6 & 1) != 0)
  {
    v18 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
    if ((v17 & 2) != 0
      || ((LODWORD(v17) = *(_DWORD *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v17 != 0x3FFFFFFF)
        ? (v27 = (_DWORD)v17 == -1)
        : (v27 = 1),
          v27))
    {
      v28 = 2;
    }
    else
    {
      if (v17 >> 28)
        goto LABEL_18;
      v28 = v18;
      v18 = 0;
    }
    goto LABEL_12;
  }
  while (1)
  {
    v50[0] = a3;
    v50[1] = a4;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = a8;
    *(_QWORD *)(a1 + 20) = -1;
    *(_QWORD *)(a1 + 28) = -1;
    *(_DWORD *)(a1 + 36) = 0;
    v33 = (uint64_t *)a1;
    v34 = (char *)a1;
    v18 = a4;
    v35 = (uint64_t *)a1;
    if (a4 != 0xFFFFFFFFLL)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
    v32 = a4;
    v29 = a8;
    v30 = a3;
    v31 = WTF::fastMalloc((WTF *)0x10);
    a3 = v30;
    a8 = v29;
    a4 = v32;
    *(_QWORD *)v31 = v18;
    *(_DWORD *)(v31 + 8) = v17;
    v28 = 1;
    v18 = v31;
LABEL_12:
    v17 = v18 | v28;
  }
  v51 = &v33;
  ((void (*)(uint64_t ***, _QWORD *))off_1E3595E90[a4])(&v51, v50);
  if ((v17 & 1) != 0 && (v17 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v17 & 0xFFFFFFFF8, v19, v20, v21, v22, v23, v24, v25);
  *(_QWORD *)(a1 + 40) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 48) = -16773311;
  v33 = &v44;
  v34 = &v43;
  v35 = a6;
  v36 = &v48;
  v37 = a9;
  v38 = &v47;
  v39 = &v46;
  v40 = &v45;
  v41 = &a15;
  v42 = (char *)&a15 + 1;
  v50[0] = &v33;
  ((void (*)(_QWORD *, _QWORD *))off_1E3595F20[v18])(v50, v49);
  return a1;
}

{
  return JSC::JITInByValGenerator::JITInByValGenerator(a1, a2, a3, a4, 0, a6, a7, a8, a9, a10, 0, a12, 0, a14, a15);
}

uint64_t JSC::JITInByIdGenerator::JITInByIdGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _QWORD v35[8];
  uint64_t v36;
  char v37;
  char v38;
  int v39;
  _QWORD v40[2];
  _QWORD *v41;

  v18 = a10;
  v17 = a11;
  v40[0] = a3;
  v40[1] = a4;
  v39 = a7;
  v38 = a10;
  v37 = a11;
  v36 = a2;
  v19 = *a6;
  if ((*a6 & 1) != 0)
  {
    v12 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v21 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v21 != 0x3FFFFFFF)
        ? (v22 = (_DWORD)v21 == -1)
        : (v22 = 1),
          v22))
    {
      v23 = 2;
      goto LABEL_13;
    }
    if (!(v21 >> 28))
    {
      v23 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
      v12 = v21 << 36;
      goto LABEL_13;
    }
    goto LABEL_20;
  }
  JSC::JITByIdGenerator::JITByIdGenerator(a1, a3, a4, v19, 18, a10, a11);
  while (1)
  {
    if (v18 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x19873A2E0);
    }
    v35[0] = &v36;
    v35[1] = a6;
    v35[2] = &v39;
    v35[3] = a8;
    v35[4] = &a9;
    v35[5] = &v38;
    v35[6] = &v37;
    v35[7] = &a12;
    if (a4 != 0xFFFFFFFFLL)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_20:
    v33 = v17;
    v34 = a3;
    v31 = v21;
    v32 = WTF::fastMalloc((WTF *)0x10);
    v17 = v33;
    a3 = v34;
    *(_QWORD *)v32 = v12;
    *(_DWORD *)(v32 + 8) = v31;
    v23 = 1;
    v12 = v32;
LABEL_13:
    v12 |= v23;
    JSC::JITByIdGenerator::JITByIdGenerator(a1, a3, a4, v12, 18, v18, v17);
    if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v12 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
  }
  v41 = v35;
  ((void (*)(_QWORD **, _QWORD *))off_1E3595F38[a4])(&v41, v40);
  return a1;
}

uint64_t JSC::JITInByIdGenerator::JITInByIdGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, int a11, unsigned __int8 a12, uint64_t a13)
{
  return JSC::JITInByIdGenerator::JITInByIdGenerator(a1, a2, a3, a4, 0, a6, a7, a8, a9, a10, a12, a13);
}

void JSC::JITInByIdGenerator::generateBaselineDataICFastPath(JSC::JITInByIdGenerator *this, JSC::JIT *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  unsigned int v11;
  signed int i;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  char v25;
  int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int j;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62[2];
  char v63;
  __int16 v64;
  char v65;
  unsigned int v66[2];
  char v67;
  __int16 v68;
  char v69;

  v10 = (JSC::JIT *)((char *)a2 + 56);
  v11 = *((_DWORD *)a2 + 50);
  for (i = *((_DWORD *)a2 + 13); (int)v11 < i; i = *((_DWORD *)a2 + 13))
  {
    if (v11 + 4 > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v11 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v11) = -721215457;
    v11 = *((_DWORD *)a2 + 50) + 4;
    *((_DWORD *)a2 + 50) = v11;
  }
  *((_DWORD *)a2 + 52) = 0;
  *((_DWORD *)this + 5) = v11;
  if (v11 + 4 > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v11 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v11) = -1203765246;
  v13 = *((_DWORD *)a2 + 50);
  v14 = v13 + 4;
  *((_DWORD *)a2 + 50) = v13 + 4;
  if (!*((_BYTE *)a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19873A6ECLL);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 37) + 208) &= ~*((_DWORD *)a2 + 80);
  v15 = *((_BYTE *)a2 + 304) & 0x1F | 0xB840C020;
  if ((v13 + 8) > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v14 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v14) = v15;
  v16 = *((_DWORD *)a2 + 50);
  v17 = v16 + 4;
  *((_DWORD *)a2 + 50) = v16 + 4;
  if ((v16 + 8) > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v17 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v17) = 1796276319;
  v18 = *((_DWORD *)a2 + 50) + 4;
  *((_DWORD *)a2 + 50) = v18;
  if (*((_BYTE *)a2 + 328))
  {
    while ((signed int)v18 < *((_DWORD *)a2 + 13))
    {
      if (v18 + 4 > *((_DWORD *)a2 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v18 = *((_DWORD *)a2 + 50);
      }
      *(_DWORD *)(*((_QWORD *)a2 + 7) + v18) = -721215457;
      v18 = *((_DWORD *)a2 + 50) + 4;
      *((_DWORD *)a2 + 50) = v18;
    }
    *((_DWORD *)a2 + 52) = 0;
  }
  if (v18 + 4 > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v18 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v18) = 1409286145;
  v19 = *((_DWORD *)a2 + 50);
  v20 = v19 + 4;
  *((_DWORD *)a2 + 50) = v19 + 4;
  v21 = v19 + 8;
  v22 = v19 + 4;
  if (v21 > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v22 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v22) = -721215457;
  v23 = *((_DWORD *)a2 + 50);
  v24 = v23 + 4;
  *((_DWORD *)a2 + 50) = v23 + 4;
  if (*((_BYTE *)a2 + 328))
    v25 = -122;
  else
    v25 = -126;
  v66[0] = v20;
  v66[1] = 0;
  v67 = v25;
  v68 = 1;
  v69 = -1;
  if ((v23 + 8) > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v24 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v24) = 838863840;
  while (1)
  {
    v26 = *((_DWORD *)a2 + 50) + 4;
    *((_DWORD *)a2 + 50) = v26;
    if (v26 >= *((_DWORD *)a2 + 13))
      break;
    if ((v26 + 4) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v26 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v26) = -721215457;
  }
  v27 = v26;
  if ((v26 + 4) > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v27 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v27) = 335544320;
  *((_DWORD *)a2 + 50) += 4;
  if (*((_BYTE *)a2 + 328))
    v28 = 69;
  else
    v28 = 65;
  v62[0] = v26;
  v62[1] = 0;
  v63 = v28;
  v64 = 15;
  v65 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v66, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (BYTE6(qword_1ECF4C780))
  {
    v36 = *((_DWORD *)a2 + 50);
    if (v36 + 4 > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, v29, v30, v31, v32, v33, v34, v35);
      v36 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v36) = -129728471;
    v37 = *((_DWORD *)a2 + 50);
    v38 = v37 + 4;
    *((_DWORD *)a2 + 50) = v37 + 4;
    if (!*((_BYTE *)a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19873A7C0);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 33) + 208) &= ~*((_DWORD *)a2 + 72);
    v39 = *((_BYTE *)a2 + 272) & 0x1F | 0xF8408120;
    if ((v37 + 8) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, v29, v30, v31, v32, v33, v34, v35);
      v38 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v38) = v39;
    v40 = *((_DWORD *)a2 + 50);
    v41 = v40 + 4;
    *((_DWORD *)a2 + 50) = v40 + 4;
    *((_DWORD *)a2 + 52) = 0;
    if ((v40 + 8) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, v29, v30, v31, v32, v33, v34, v35);
      v41 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v41) = -700513792;
    *((_DWORD *)a2 + 50) += 4;
  }
  else
  {
    v50 = JSC::MacroAssemblerARM64::scratchRegister(a2);
    JSC::MacroAssemblerARM64::load64((uint64_t)a2, 0x4800000001, v50, v51, v52, v53, v54, v55);
    v56 = JSC::MacroAssemblerARM64::scratchRegister(a2);
    JSC::MacroAssemblerARM64::farJump((uint64_t)a2, v56 | 0x800000000, 49594, v57, v58, v59, v60, v61);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v62, (uint64_t)a2, v30, v31, v32, v33, v34, v35);
  for (j = *((_DWORD *)a2 + 50); j < *((_DWORD *)a2 + 13); *((_DWORD *)a2 + 50) = j)
  {
    if ((j + 4) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, v42, v43, v44, v45, v46, v47, v48);
      j = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + j) = -721215457;
    j = *((_DWORD *)a2 + 50) + 4;
  }
  *((_DWORD *)a2 + 52) = 0;
  *((_DWORD *)this + 6) = j;
}

void JSC::JITInByIdGenerator::generateDFGDataICFastPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  unsigned __int8 v11;
  JSC::AssemblerBuffer *v14;
  int i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int j;
  uint64_t v66;
  unsigned int v67[2];
  char v68;
  __int16 v69;
  char v70;
  unsigned int v71[3];

  v10 = a5;
  v11 = a4;
  v14 = (JSC::AssemblerBuffer *)(a2 + 56);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      v66 = a3;
      JSC::AssemblerBuffer::outOfLineGrow(v14, a2, a3, a4, a5, a6, a7, a8);
      a3 = v66;
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  *(_DWORD *)(a1 + 20) = i;
  JSC::MacroAssemblerARM64::sub64(a2, 26, (136 * a3 + 136), a6, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::load32(a2, v11, a7, v16, v17, v18, v19, v20);
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19873AB1CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
  JSC::MacroAssemblerARM64::load32(a2, a6 | 0xC00000000, *(char *)(a2 + 304), v21, v22, v23, v24, v25);
  JSC::MacroAssemblerARM64::branch32(a2, 1, a7, 17, v26, v27, v28, v29, (uint64_t)v71);
  v37 = v10 | 0x32000BE0;
  v38 = *(_DWORD *)(a2 + 200);
  if (v38 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, v30, v31, v32, v33, v34, v35, v36);
    v38 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = v37;
  v39 = *(_DWORD *)(a2 + 200) + 4;
  for (*(_DWORD *)(a2 + 200) = v39; v39 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v39)
  {
    if ((v39 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v14, v30, v31, v32, v33, v34, v35, v36);
      v39 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v39) = -721215457;
    v39 = *(_DWORD *)(a2 + 200) + 4;
  }
  v40 = v39;
  if ((v39 + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, v30, v31, v32, v33, v34, v35, v36);
    v40 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v40) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v41 = 69;
  else
    v41 = 65;
  v67[0] = v39;
  v67[1] = 0;
  v68 = v41;
  v69 = 15;
  v70 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v71, a2, v31, v32, v33, v34, v35, v36);
  JSC::MacroAssemblerARM64::load64(a2, a6 | 0x4800000000, 9, v42, v43, v44, v45, v46);
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19873ABA8);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  v54 = *(_BYTE *)(a2 + 272) & 0x1F | 0xF8408120;
  v55 = *(_DWORD *)(a2 + 200);
  if (v55 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, v47, v48, v49, v50, v51, v52, v53);
    v55 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v55) = v54;
  v56 = *(_DWORD *)(a2 + 200);
  v57 = v56 + 4;
  *(_DWORD *)(a2 + 200) = v56 + 4;
  *(_DWORD *)(a2 + 208) = 0;
  if ((v56 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, v47, v48, v49, v50, v51, v52, v53);
    v57 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v57) = -700513792;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v67, a2, v48, v49, v50, v51, v52, v53);
  for (j = *(_DWORD *)(a2 + 200); j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v14, v58, v59, v60, v61, v62, v63, v64);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  *(_DWORD *)(a1 + 24) = j;
}

uint64_t JSC::JITInstanceOfGenerator::JITInstanceOfGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  int *v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char v36;
  uint64_t v37;
  int v38;
  _QWORD v39[2];
  _QWORD v40[2];
  uint64_t **v41;

  v39[0] = a3;
  v39[1] = a4;
  v38 = a7;
  v37 = a2;
  v36 = BYTE4(a9);
  v12 = *a6;
  if ((*a6 & 1) != 0)
  {
    v13 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((LODWORD(v12) = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v12 != 0x3FFFFFFF)
        ? (v22 = (_DWORD)v12 == -1)
        : (v22 = 1),
          v22))
    {
      v23 = 2;
    }
    else
    {
      if (v12 >> 28)
        goto LABEL_18;
      v23 = v13;
      v13 = 0;
    }
    goto LABEL_12;
  }
  while (1)
  {
    v40[0] = a3;
    v40[1] = a4;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 22;
    *(_QWORD *)(a1 + 20) = -1;
    *(_QWORD *)(a1 + 28) = -1;
    *(_DWORD *)(a1 + 36) = 0;
    v27 = (uint64_t *)a1;
    v28 = (uint64_t *)a1;
    v13 = a4;
    v29 = (int *)a1;
    if (a4 != 0xFFFFFFFFLL)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
    v26 = a4;
    v24 = a3;
    v25 = WTF::fastMalloc((WTF *)0x10);
    a3 = v24;
    a4 = v26;
    *(_QWORD *)v25 = v13;
    *(_DWORD *)(v25 + 8) = v12;
    v23 = 1;
    v13 = v25;
LABEL_12:
    v12 = v13 | v23;
  }
  v41 = &v27;
  ((void (*)(uint64_t ***, _QWORD *))off_1E3595E90[a4])(&v41, v40);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
  *(_QWORD *)(a1 + 40) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 48) = -16773311;
  v27 = &v37;
  v28 = a6;
  v29 = &v38;
  v30 = a8;
  v31 = &a9;
  v32 = (char *)&a9 + 1;
  v33 = (char *)&a9 + 2;
  v34 = (char *)&a9 + 3;
  v35 = &v36;
  v40[0] = &v27;
  ((void (*)(_QWORD *, _QWORD *))off_1E3595F50[v13])(v40, v39);
  return a1;
}

uint64_t JSC::JITGetByValGenerator::JITGetByValGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, char a8, uint64_t a9, char a10, int a11, char a12, int a13, char a14, uint64_t a15)
{
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  uint64_t *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t *v41;
  char *v42;
  char v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  int v48;
  _QWORD v49[2];
  _QWORD v50[2];
  uint64_t **v51;

  v49[0] = a3;
  v49[1] = a4;
  v48 = a7;
  v47 = a10;
  v46 = a12;
  v45 = a14;
  v44 = a2;
  v43 = a8;
  v17 = *a6;
  if ((*a6 & 1) != 0)
  {
    v18 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
    if ((v17 & 2) != 0
      || ((LODWORD(v17) = *(_DWORD *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v17 != 0x3FFFFFFF)
        ? (v27 = (_DWORD)v17 == -1)
        : (v27 = 1),
          v27))
    {
      v28 = 2;
    }
    else
    {
      if (v17 >> 28)
        goto LABEL_18;
      v28 = v18;
      v18 = 0;
    }
    goto LABEL_12;
  }
  while (1)
  {
    v50[0] = a3;
    v50[1] = a4;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = a8;
    *(_QWORD *)(a1 + 20) = -1;
    *(_QWORD *)(a1 + 28) = -1;
    *(_DWORD *)(a1 + 36) = 0;
    v33 = (uint64_t *)a1;
    v34 = (char *)a1;
    v18 = a4;
    v35 = (uint64_t *)a1;
    if (a4 != 0xFFFFFFFFLL)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
    v32 = a4;
    v29 = a8;
    v30 = a3;
    v31 = WTF::fastMalloc((WTF *)0x10);
    a3 = v30;
    a8 = v29;
    a4 = v32;
    *(_QWORD *)v31 = v18;
    *(_DWORD *)(v31 + 8) = v17;
    v28 = 1;
    v18 = v31;
LABEL_12:
    v17 = v18 | v28;
  }
  v51 = &v33;
  ((void (*)(uint64_t ***, _QWORD *))off_1E3595E90[a4])(&v51, v50);
  if ((v17 & 1) != 0 && (v17 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v17 & 0xFFFFFFFF8, v19, v20, v21, v22, v23, v24, v25);
  *(_BYTE *)(a1 + 40) = a10;
  *(_BYTE *)(a1 + 41) = a14;
  *(_QWORD *)(a1 + 44) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 52) = -16773311;
  v33 = &v44;
  v34 = &v43;
  v35 = a6;
  v36 = &v48;
  v37 = a9;
  v38 = &v47;
  v39 = &v46;
  v40 = &v45;
  v41 = &a15;
  v42 = (char *)&a15 + 1;
  v50[0] = &v33;
  ((void (*)(_QWORD *, _QWORD *))off_1E3595F68[v18])(v50, v49);
  return a1;
}

void JSC::JITGetByValGenerator::generateFastPath(JSC::JITGetByValGenerator *this, JSC::CCallHelpers *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  int v11;
  int i;
  unsigned int v13;
  unint64_t v14;
  int j;

  v10 = (JSC::CCallHelpers *)((char *)a2 + 56);
  v11 = *((_DWORD *)a2 + 50);
  for (i = *((_DWORD *)a2 + 13); v11 < i; i = *((_DWORD *)a2 + 13))
  {
    if ((v11 + 4) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v11 = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v11) = -721215457;
    v11 = *((_DWORD *)a2 + 50) + 4;
    *((_DWORD *)a2 + 50) = v11;
  }
  *((_DWORD *)a2 + 52) = 0;
  *((_DWORD *)this + 5) = v11;
  *((_BYTE *)a2 + 328) = 1;
  if (v11 < i)
  {
    do
    {
      if ((v11 + 4) > *((_DWORD *)a2 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v11 = *((_DWORD *)a2 + 50);
      }
      *(_DWORD *)(*((_QWORD *)a2 + 7) + v11) = -721215457;
      v11 = *((_DWORD *)a2 + 50) + 4;
      *((_DWORD *)a2 + 50) = v11;
    }
    while (v11 < *((_DWORD *)a2 + 13));
  }
  v13 = v11;
  if ((v11 + 4) > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v13 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v13) = 335544320;
  *((_DWORD *)a2 + 50) += 4;
  v14 = 0xFF000F4500000000;
  if (!*((_BYTE *)a2 + 328))
    v14 = 0xFF000F4100000000;
  *((_BYTE *)a2 + 328) = 0;
  *((_DWORD *)this + 11) = v11;
  *((_QWORD *)this + 6) = v14;
  for (j = *((_DWORD *)a2 + 50); j < *((_DWORD *)a2 + 13); *((_DWORD *)a2 + 50) = j)
  {
    if ((j + 4) > *((_DWORD *)a2 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      j = *((_DWORD *)a2 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + j) = -721215457;
    j = *((_DWORD *)a2 + 50) + 4;
  }
  *((_DWORD *)a2 + 52) = 0;
  *((_DWORD *)this + 6) = j;
}

uint64_t JSC::JITGetByValWithThisGenerator::JITGetByValWithThisGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, char a8, uint64_t a9, char a10, int a11, char a12, int a13, char a14, int a15, char a16, uint64_t a17)
{
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  uint64_t *v37;
  int *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t *v44;
  char *v45;
  char v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char v51;
  int v52;
  _QWORD v53[2];
  _QWORD v54[2];
  uint64_t **v55;

  v53[0] = a3;
  v53[1] = a4;
  v52 = a7;
  v51 = a10;
  v50 = a12;
  v49 = a14;
  v48 = a16;
  v47 = a2;
  v46 = a8;
  v19 = *a6;
  if ((*a6 & 1) != 0)
  {
    v20 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((LODWORD(v19) = *(_DWORD *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v19 != 0x3FFFFFFF)
        ? (v29 = (_DWORD)v19 == -1)
        : (v29 = 1),
          v29))
    {
      v30 = 2;
    }
    else
    {
      if (v19 >> 28)
        goto LABEL_18;
      v30 = v20;
      v20 = 0;
    }
    goto LABEL_12;
  }
  while (1)
  {
    v54[0] = a3;
    v54[1] = a4;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = a8;
    *(_QWORD *)(a1 + 20) = -1;
    *(_QWORD *)(a1 + 28) = -1;
    *(_DWORD *)(a1 + 36) = 0;
    v35 = (uint64_t *)a1;
    v36 = (char *)a1;
    v20 = a4;
    v37 = (uint64_t *)a1;
    if (a4 != 0xFFFFFFFFLL)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
    v34 = a4;
    v31 = a8;
    v32 = a3;
    v33 = WTF::fastMalloc((WTF *)0x10);
    a3 = v32;
    a8 = v31;
    a4 = v34;
    *(_QWORD *)v33 = v20;
    *(_DWORD *)(v33 + 8) = v19;
    v30 = 1;
    v20 = v33;
LABEL_12:
    v19 = v20 | v30;
  }
  v55 = &v35;
  ((void (*)(uint64_t ***, _QWORD *))off_1E3595E90[a4])(&v55, v54);
  if ((v19 & 1) != 0 && (v19 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v19 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
  *(_BYTE *)(a1 + 40) = a10;
  *(_BYTE *)(a1 + 41) = a16;
  *(_QWORD *)(a1 + 44) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 52) = -16773311;
  v35 = &v47;
  v36 = &v46;
  v37 = a6;
  v38 = &v52;
  v39 = a9;
  v40 = &v51;
  v41 = &v50;
  v42 = &v49;
  v43 = &v48;
  v44 = &a17;
  v45 = (char *)&a17 + 1;
  v54[0] = &v35;
  ((void (*)(_QWORD *, _QWORD *))off_1E3595F80[v20])(v54, v53);
  return a1;
}

{
  return JSC::JITGetByValWithThisGenerator::JITGetByValWithThisGenerator(a1, a2, a3, a4, 0, a6, a7, a8, a9, a10, 0, a12, 0, a14, 0, a16, a17);
}

void JSC::JITGetByValWithThisGenerator::generateBaselineDataICFastPath(JSC::JITGetByValWithThisGenerator *this, JSC::JIT *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JITInlineCacheGenerator::generateBaselineDataICFastPath((uint64_t)this, a2, 3, a4, a5, a6, a7, a8);
}

uint64_t JSC::JITPutByValGenerator::JITPutByValGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, char a8, uint64_t a9, char a10, int a11, char a12, int a13, char a14, uint64_t a15)
{
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  uint64_t *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t *v41;
  char *v42;
  char v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  int v48;
  _QWORD v49[2];
  _QWORD v50[2];
  uint64_t **v51;

  v49[0] = a3;
  v49[1] = a4;
  v48 = a7;
  v47 = a10;
  v46 = a12;
  v45 = a14;
  v44 = a2;
  v43 = a8;
  v17 = *a6;
  if ((*a6 & 1) != 0)
  {
    v18 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
    if ((v17 & 2) != 0
      || ((LODWORD(v17) = *(_DWORD *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v17 != 0x3FFFFFFF)
        ? (v27 = (_DWORD)v17 == -1)
        : (v27 = 1),
          v27))
    {
      v28 = 2;
    }
    else
    {
      if (v17 >> 28)
        goto LABEL_18;
      v28 = v18;
      v18 = 0;
    }
    goto LABEL_12;
  }
  while (1)
  {
    v50[0] = a3;
    v50[1] = a4;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = a8;
    *(_QWORD *)(a1 + 20) = -1;
    *(_QWORD *)(a1 + 28) = -1;
    *(_DWORD *)(a1 + 36) = 0;
    v33 = (uint64_t *)a1;
    v34 = (char *)a1;
    v18 = a4;
    v35 = (uint64_t *)a1;
    if (a4 != 0xFFFFFFFFLL)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
    v32 = a4;
    v29 = a8;
    v30 = a3;
    v31 = WTF::fastMalloc((WTF *)0x10);
    a3 = v30;
    a8 = v29;
    a4 = v32;
    *(_QWORD *)v31 = v18;
    *(_DWORD *)(v31 + 8) = v17;
    v28 = 1;
    v18 = v31;
LABEL_12:
    v17 = v18 | v28;
  }
  v51 = &v33;
  ((void (*)(uint64_t ***, _QWORD *))off_1E3595E90[a4])(&v51, v50);
  if ((v17 & 1) != 0 && (v17 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v17 & 0xFFFFFFFF8, v19, v20, v21, v22, v23, v24, v25);
  *(_BYTE *)(a1 + 40) = a10;
  *(_BYTE *)(a1 + 41) = a14;
  *(_QWORD *)(a1 + 44) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 52) = -16773311;
  v33 = &v44;
  v34 = &v43;
  v35 = a6;
  v36 = &v48;
  v37 = a9;
  v38 = &v47;
  v39 = &v46;
  v40 = &v45;
  v41 = &a15;
  v42 = (char *)&a15 + 1;
  v50[0] = &v33;
  ((void (*)(_QWORD *, _QWORD *))off_1E3595F98[v18])(v50, v49);
  return a1;
}

{
  return JSC::JITPutByValGenerator::JITPutByValGenerator(a1, a2, a3, a4, 0, a6, a7, a8, a9, a10, 0, a12, 0, a14, a15);
}

uint64_t JSC::JITPrivateBrandAccessGenerator::JITPrivateBrandAccessGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, char a8, uint64_t a9, char a10, int a11, char a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  uint64_t *v33;
  int *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t *v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  int v43;
  _QWORD v44[2];
  _QWORD v45[2];
  uint64_t **v46;

  v44[0] = a3;
  v44[1] = a4;
  v43 = a7;
  v42 = a10;
  v41 = a12;
  v40 = a2;
  v39 = a8;
  v15 = *a6;
  if ((*a6 & 1) != 0)
  {
    v16 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((LODWORD(v15) = *(_DWORD *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v15 != 0x3FFFFFFF)
        ? (v25 = (_DWORD)v15 == -1)
        : (v25 = 1),
          v25))
    {
      v26 = 2;
    }
    else
    {
      if (v15 >> 28)
        goto LABEL_18;
      v26 = v16;
      v16 = 0;
    }
    goto LABEL_12;
  }
  while (1)
  {
    v45[0] = a3;
    v45[1] = a4;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = a8;
    *(_QWORD *)(a1 + 20) = -1;
    *(_QWORD *)(a1 + 28) = -1;
    *(_DWORD *)(a1 + 36) = 0;
    v31 = (uint64_t *)a1;
    v32 = (char *)a1;
    v16 = a4;
    v33 = (uint64_t *)a1;
    if (a4 != 0xFFFFFFFFLL)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
    v30 = a4;
    v27 = a8;
    v28 = a3;
    v29 = WTF::fastMalloc((WTF *)0x10);
    a3 = v28;
    a8 = v27;
    a4 = v30;
    *(_QWORD *)v29 = v16;
    *(_DWORD *)(v29 + 8) = v15;
    v26 = 1;
    v16 = v29;
LABEL_12:
    v15 = v16 | v26;
  }
  v46 = &v31;
  ((void (*)(uint64_t ***, _QWORD *))off_1E3595E90[a4])(&v46, v45);
  if ((v15 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v15 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(a1 + 40) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 48) = -16773311;
  v31 = &v40;
  v32 = &v39;
  v33 = a6;
  v34 = &v43;
  v35 = a9;
  v36 = &v42;
  v37 = &v41;
  v38 = &a13;
  v45[0] = &v31;
  ((void (*)(_QWORD *, _QWORD *))off_1E3595FB0[v16])(v45, v44);
  return a1;
}

{
  return JSC::JITPrivateBrandAccessGenerator::JITPrivateBrandAccessGenerator(a1, a2, a3, a4, 0, a6, a7, a8, a9, a10, 0, a12, a13);
}

void JSC::JITPrivateBrandAccessGenerator::generateBaselineDataICFastPath(JSC::JITPrivateBrandAccessGenerator *this, JSC::JIT *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JITInlineCacheGenerator::generateBaselineDataICFastPath((uint64_t)this, a2, 2, a4, a5, a6, a7, a8);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::JITInlineCacheGenerator::JITInlineCacheGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::AccessType)::$_0,JSC::JITInlineCacheGenerator::(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::AccessType)::$_1,JSC::JITInlineCacheGenerator::(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::AccessType)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(**(_QWORD **)result + 8) = *a2;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::JITInlineCacheGenerator::JITInlineCacheGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::AccessType)::$_0,JSC::JITInlineCacheGenerator::(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::AccessType)::$_1,JSC::JITInlineCacheGenerator::(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::AccessType)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t result, _QWORD *a2)
{
  **(_QWORD **)(*(_QWORD *)result + 8) = *a2;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::JITInlineCacheGenerator::JITInlineCacheGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::AccessType)::$_0,JSC::JITInlineCacheGenerator::(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::AccessType)::$_1,JSC::JITInlineCacheGenerator::(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::AccessType)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t result, _QWORD *a2)
{
  **(_QWORD **)(*(_QWORD *)result + 16) = *a2;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITGetByIdGenerator::JITGetByIdGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::RegisterSetBuilder const&,JSC::CacheableIdentifier,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::AccessType)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(_QWORD ***a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD ***v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  _QWORD *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;

  v8 = (_QWORD ***)*a1;
  v9 = *a2;
  v10 = (_QWORD *)***a1;
  v11 = *(_BYTE *)(*a1)[1];
  v12 = *(*a1)[2];
  if ((v12 & 1) != 0)
  {
    v29 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v30 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v41 = (_QWORD *)***a1;
      v42 = *(_BYTE *)(*a1)[1];
      v43 = WTF::fastMalloc((WTF *)0x10);
      v11 = v42;
      v10 = v41;
      *(_QWORD *)v43 = v29;
      *(_DWORD *)(v43 + 8) = v30;
      v32 = 1;
      v29 = v43;
    }
    else
    {
      v32 = v29;
      v29 = v30 << 36;
    }
    v12 = v29 | v32;
  }
  v13 = v8[4];
  v14 = *(unsigned int *)v8[3];
  v15 = (uint64_t)*v8[5];
  v16 = *(_BYTE *)v8[6];
  v17 = *(_BYTE *)v8[7];
  v18 = *(_BYTE *)v8[8];
  if ((v12 & 1) != 0)
  {
    v33 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v34 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v34 != 0x3FFFFFFF)
        ? (v35 = (_DWORD)v34 == -1)
        : (v35 = 1),
          v35))
    {
      v36 = 2;
    }
    else if (v34 >> 28)
    {
      v50 = v14;
      v52 = v10;
      v48 = v13;
      v46 = v11;
      v44 = WTF::fastMalloc((WTF *)0x10);
      v11 = v46;
      v13 = v48;
      v14 = v50;
      v10 = v52;
      *(_QWORD *)v44 = v33;
      *(_DWORD *)(v44 + 8) = v34;
      v36 = 1;
      v33 = v44;
    }
    else
    {
      v36 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v33 = v34 << 36;
    }
    v20 = v33 | v36;
    if ((v20 & 1) != 0)
    {
      v37 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      if ((v20 & 2) != 0
        || ((v38 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v38 != 0x3FFFFFFF)
          ? (v39 = (_DWORD)v38 == -1)
          : (v39 = 1),
            v39))
      {
        v40 = 2;
      }
      else if (v38 >> 28)
      {
        v45 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
        v51 = v14;
        v53 = v10;
        v49 = v13;
        v47 = v11;
        v37 = WTF::fastMalloc((WTF *)0x10);
        v11 = v47;
        v13 = v49;
        v14 = v51;
        v10 = v53;
        *(_QWORD *)v37 = v45;
        *(_DWORD *)(v37 + 8) = v38;
        v40 = 1;
      }
      else
      {
        v40 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
        v37 = v38 << 36;
      }
      v19 = 0;
      v21 = v37 | v40;
    }
    else
    {
      v19 = 1;
      v21 = v20;
    }
  }
  else
  {
    v19 = 1;
    v20 = v12;
    v21 = v12;
  }
  v54 = v21;
  JSC::JITInlineCacheGenerator::setUpStubInfoImpl<JSC::StructureStubInfo>((uint64_t *)v9, v10, v11, &v54, v14, v13, a7, a8);
  if ((v54 & 1) != 0 && (v54 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v54 & 0xFFFFFFFF8, v22, v23, v24, v25, v26, v27, v28);
  *(_QWORD *)(v9 + 16) = v15;
  *(_BYTE *)(v9 + 116) = v16;
  *(_BYTE *)(v9 + 117) = v17;
  *(_BYTE *)(v9 + 118) = -1;
  *(_BYTE *)(v9 + 120) = v18;
  if ((v19 & 1) == 0 && (v20 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v20 & 0xFFFFFFFF8, v22, v23, v24, v25, v26, v27, v28);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, v22, v23, v24, v25, v26, v27, v28);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITGetByIdGenerator::JITGetByIdGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::RegisterSetBuilder const&,JSC::CacheableIdentifier,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::AccessType)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v8 = *a1;
  v9 = *a2;
  v10 = **(_BYTE **)(*a1 + 8);
  v11 = **(_QWORD **)(*a1 + 16);
  if ((v11 & 1) == 0)
  {
    v12 = **(_QWORD **)(v8 + 40);
LABEL_3:
    v13 = 1;
    v14 = 1;
    v15 = v11;
    v16 = v11;
    goto LABEL_4;
  }
  v18 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v19 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v19 != 0x3FFFFFFF)
      ? (v20 = (_DWORD)v19 == -1)
      : (v20 = 1),
        v20))
  {
    v21 = 2;
  }
  else if (v19 >> 28)
  {
    v30 = **(_BYTE **)(*a1 + 8);
    v31 = WTF::fastMalloc((WTF *)0x10);
    v10 = v30;
    *(_QWORD *)v31 = v18;
    *(_DWORD *)(v31 + 8) = v19;
    v21 = 1;
    v18 = v31;
  }
  else
  {
    v21 = v18;
    v18 = v19 << 36;
  }
  v11 = v18 | v21;
  v12 = **(_QWORD **)(v8 + 40);
  if (((v18 | v21) & 1) == 0)
    goto LABEL_3;
  v22 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v23 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v23 != 0x3FFFFFFF)
      ? (v24 = (_DWORD)v23 == -1)
      : (v24 = 1),
        v24))
  {
    v25 = 2;
  }
  else if (v23 >> 28)
  {
    v32 = v10;
    v33 = WTF::fastMalloc((WTF *)0x10);
    v10 = v32;
    *(_QWORD *)v33 = v22;
    *(_DWORD *)(v33 + 8) = v23;
    v25 = 1;
    v22 = v33;
  }
  else
  {
    v25 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v22 = v23 << 36;
  }
  v15 = v22 | v25;
  if ((v15 & 1) != 0)
  {
    v26 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((v27 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v27 != 0x3FFFFFFF)
        ? (v28 = (_DWORD)v27 == -1)
        : (v28 = 1),
          v28))
    {
      v29 = 2;
    }
    else if (v27 >> 28)
    {
      v34 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      v35 = v10;
      v26 = WTF::fastMalloc((WTF *)0x10);
      v10 = v35;
      *(_QWORD *)v26 = v34;
      *(_DWORD *)(v26 + 8) = v27;
      v29 = 1;
    }
    else
    {
      v29 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      v26 = v27 << 36;
    }
    v13 = 0;
    v14 = 0;
    v16 = v26 | v29;
  }
  else
  {
    v13 = 0;
    v14 = 1;
    v16 = v15;
  }
LABEL_4:
  *(_BYTE *)v9 = v10;
  if ((v16 & 2) != 0)
  {
    *(_DWORD *)(v9 + 32) = -1;
    if ((v16 & 1) == 0)
      goto LABEL_7;
    v17 = v16 & 0xFFFFFFFF8;
  }
  else
  {
    if ((v16 & 1) == 0)
    {
      *(_DWORD *)(v9 + 32) = v16 >> 36;
      goto LABEL_7;
    }
    v17 = v16 & 0xFFFFFFFF8;
    *(_DWORD *)(v9 + 32) = *(_DWORD *)((v16 & 0xFFFFFFFF8) + 8);
  }
  if (v17)
    WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
LABEL_7:
  *(_QWORD *)(v9 + 8) = v12;
  if ((v14 & 1) == 0 && (v15 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v15 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if ((v13 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITGetByIdGenerator::JITGetByIdGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::RegisterSetBuilder const&,JSC::CacheableIdentifier,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::AccessType)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;

  v2 = *a1;
  v3 = *a2;
  v4 = **(_BYTE **)(v2 + 8);
  v5 = **(_QWORD **)(v2 + 16);
  if ((v5 & 1) != 0)
  {
    v22 = *(_QWORD *)(v5 & 0xFFFFFFFF8);
    if ((v5 & 2) != 0
      || ((v23 = *(unsigned int *)((v5 & 0xFFFFFFFF8) + 8), (_DWORD)v23 != 0x3FFFFFFF)
        ? (v24 = (_DWORD)v23 == -1)
        : (v24 = 1),
          v24))
    {
      v25 = 2;
    }
    else if (v23 >> 28)
    {
      v40 = *a2;
      v42 = **(_BYTE **)(v2 + 8);
      v30 = WTF::fastMalloc((WTF *)0x10);
      v3 = v40;
      *(_QWORD *)v30 = v22;
      *(_DWORD *)(v30 + 8) = v23;
      v25 = 1;
      v22 = v30;
      v4 = v42;
    }
    else
    {
      v25 = v22;
      v22 = v23 << 36;
    }
    v5 = v22 | v25;
    v6 = ((v22 | v25) & 1) == 0;
  }
  else
  {
    v6 = 1;
  }
  v7 = *(_QWORD **)(v2 + 32);
  v8 = **(unsigned int **)(v2 + 24);
  v9 = **(_QWORD **)(v2 + 40);
  v10 = **(unsigned __int8 **)(v2 + 48);
  v11 = *(char **)(v2 + 64);
  v12 = **(unsigned __int8 **)(v2 + 56);
  v13 = v5;
  v14 = *v11;
  if (!v6)
  {
    v26 = *(_QWORD *)(v5 & 0xFFFFFFFF8);
    if ((v5 & 2) != 0
      || ((v27 = *(unsigned int *)((v5 & 0xFFFFFFFF8) + 8), (_DWORD)v27 != 0x3FFFFFFF)
        ? (v28 = (_DWORD)v27 == -1)
        : (v28 = 1),
          v28))
    {
      v29 = 2;
    }
    else if (v27 >> 28)
    {
      v41 = v3;
      v38 = v10;
      v39 = v7;
      v34 = v9;
      v35 = v8;
      v37 = v12;
      v43 = v4;
      v36 = v14;
      v31 = *(_DWORD *)((v5 & 0xFFFFFFFF8) + 8);
      v32 = WTF::fastMalloc((WTF *)0x10);
      v14 = v36;
      v12 = v37;
      v10 = v38;
      v9 = v34;
      v8 = v35;
      v7 = v39;
      v33 = v32;
      v3 = v41;
      *(_QWORD *)v33 = v26;
      *(_DWORD *)(v33 + 8) = v31;
      v29 = 1;
      v26 = v33;
      v4 = v43;
    }
    else
    {
      v29 = *(_QWORD *)(v5 & 0xFFFFFFFF8);
      v26 = v27 << 36;
    }
    v13 = v26 | v29;
  }
  JSC::JITByIdGenerator::setUpStubInfoImpl<JSC::DFG::UnlinkedStructureStubInfo>(v3, v4, v13, v8, v7, v9, v10, v12, v14);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  if (!v6 && (v5 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v5 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
}

void JSC::JITByIdGenerator::setUpStubInfoImpl<JSC::StructureStubInfo>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unsigned int a5, _QWORD *a6, uint64_t a7, uint64_t a8, char a9, int a10, char a11)
{
  char v11;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;

  v11 = a8;
  if ((a4 & 1) != 0)
  {
    v21 = *(_QWORD *)(a4 & 0xFFFFFFFF8);
    if ((a4 & 2) != 0
      || ((v22 = *(unsigned int *)((a4 & 0xFFFFFFFF8) + 8), (_DWORD)v22 != 0x3FFFFFFF)
        ? (v23 = (_DWORD)v22 == -1)
        : (v23 = 1),
          v23))
    {
      v24 = 2;
    }
    else if (v22 >> 28)
    {
      v25 = *(_QWORD *)(a4 & 0xFFFFFFFF8);
      v28 = a2;
      v29 = a6;
      v27 = a3;
      v26 = a5;
      v21 = WTF::fastMalloc((WTF *)0x10);
      a5 = v26;
      a2 = v28;
      a6 = v29;
      a3 = v27;
      *(_QWORD *)v21 = v25;
      *(_DWORD *)(v21 + 8) = v22;
      v24 = 1;
    }
    else
    {
      v24 = *(_QWORD *)(a4 & 0xFFFFFFFF8);
      v21 = v22 << 36;
    }
    a4 = v21 | v24;
  }
  v30 = a4;
  JSC::JITInlineCacheGenerator::setUpStubInfoImpl<JSC::StructureStubInfo>((uint64_t *)a1, a2, a3, &v30, a5, a6, a7, a8);
  if ((v30 & 1) != 0 && (v30 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v30 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
  *(_QWORD *)(a1 + 16) = a7;
  *(_BYTE *)(a1 + 116) = v11;
  *(_BYTE *)(a1 + 117) = a9;
  *(_BYTE *)(a1 + 118) = -1;
  *(_BYTE *)(a1 + 120) = a11;
}

void JSC::JITInlineCacheGenerator::setUpStubInfoImpl<JSC::StructureStubInfo>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  int v9;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v9 = a5;
  v11 = a2;
  *((_BYTE *)a1 + 122) = a3;
  if (a1 != a4)
  {
    v13 = *a1;
    if ((*a1 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
    v14 = *a4;
    if ((*a4 & 1) != 0)
    {
      v16 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      if ((v14 & 2) != 0
        || ((v17 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v17 != 0x3FFFFFFF)
          ? (v18 = (_DWORD)v17 == -1)
          : (v18 = 1),
            v18))
      {
        v19 = 2;
      }
      else if (v17 >> 28)
      {
        v20 = v16;
        v21 = v17;
        v16 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v16 = v20;
        *(_DWORD *)(v16 + 8) = v21;
        v19 = 1;
      }
      else
      {
        v19 = v16;
        v16 = v17 << 36;
      }
      v14 = v16 | v19;
    }
    *a1 = v14;
  }
  *((_DWORD *)a1 + 28) = v9;
  a1[13] = a6[1] | *a6;
  v15 = (_QWORD *)(*a4 & 0xFFFFFFFF8);
  if ((*a4 & 1) != 0)
    v15 = (_QWORD *)*v15;
  if (v15)
    v11 = (_QWORD *)v15[1];
  a1[7] = v11[1];
}

void JSC::JITByIdGenerator::setUpStubInfoImpl<JSC::BaselineUnlinkedStructureStubInfo>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if ((a2 & 1) != 0)
  {
    v11 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
    if ((a2 & 2) != 0
      || ((v12 = *(unsigned int *)((a2 & 0xFFFFFFFF8) + 8), (_DWORD)v12 != 0x3FFFFFFF)
        ? (v13 = (_DWORD)v12 == -1)
        : (v13 = 1),
          v13))
    {
      v14 = 2;
    }
    else if (v12 >> 28)
    {
      v15 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
      v16 = *(_DWORD *)((a2 & 0xFFFFFFFF8) + 8);
      v11 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v11 = v15;
      *(_DWORD *)(v11 + 8) = v16;
      v14 = 1;
    }
    else
    {
      v14 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
      v11 = v12 << 36;
    }
    a2 = v11 | v14;
  }
  *(_BYTE *)a1 = 18;
  if ((a2 & 2) != 0)
  {
    *(_DWORD *)(a1 + 32) = -1;
    if ((a2 & 1) == 0)
      goto LABEL_5;
    v10 = a2 & 0xFFFFFFFF8;
  }
  else
  {
    if ((a2 & 1) == 0)
    {
      *(_DWORD *)(a1 + 32) = a2 >> 36;
      goto LABEL_5;
    }
    v10 = a2 & 0xFFFFFFFF8;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)((a2 & 0xFFFFFFFF8) + 8);
  }
  if (v10)
    WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
LABEL_5:
  *(_QWORD *)(a1 + 8) = a3;
}

void JSC::JITByIdGenerator::setUpStubInfoImpl<JSC::DFG::UnlinkedStructureStubInfo>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  char v9;
  char v10;
  int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;

  v9 = a8;
  v10 = a7;
  v13 = a4;
  v14 = a3;
  if ((a3 & 1) != 0)
  {
    v17 = *(_QWORD *)(a3 & 0xFFFFFFFF8);
    if ((a3 & 2) != 0
      || ((v18 = *(unsigned int *)((a3 & 0xFFFFFFFF8) + 8), (_DWORD)v18 != 0x3FFFFFFF)
        ? (v19 = (_DWORD)v18 == -1)
        : (v19 = 1),
          v19))
    {
      v20 = 2;
    }
    else if (v18 >> 28)
    {
      v28 = a2;
      v26 = WTF::fastMalloc((WTF *)0x10);
      a2 = v28;
      *(_QWORD *)v26 = v17;
      *(_DWORD *)(v26 + 8) = v18;
      v20 = 1;
      v17 = v26;
    }
    else
    {
      v20 = *(_QWORD *)(a3 & 0xFFFFFFFF8);
      v17 = v18 << 36;
    }
    v14 = v17 | v20;
  }
  *(_BYTE *)a1 = a2;
  v16 = *(_QWORD *)(a1 + 32);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, (void *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  if ((v14 & 1) != 0)
  {
    v21 = v14 & 0xFFFFFFFF8;
    v22 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v23 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v23 != 0x3FFFFFFF)
        ? (v24 = (_DWORD)v23 == -1)
        : (v24 = 1),
          v24))
    {
      v25 = 2;
    }
    else if (v23 >> 28)
    {
      v29 = v21;
      v27 = v22;
      v22 = WTF::fastMalloc((WTF *)0x10);
      v21 = v29;
      *(_QWORD *)v22 = v27;
      *(_DWORD *)(v22 + 8) = v23;
      v25 = 1;
    }
    else
    {
      v25 = v22;
      v22 = v23 << 36;
    }
    *(_QWORD *)(a1 + 32) = v22 | v25;
    *(_DWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 40) = a5[1] | *a5;
    if (v21)
      WTF::fastFree(v21, (void *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v14;
    *(_DWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 40) = a5[1] | *a5;
  }
  *(_QWORD *)(a1 + 8) = a6;
  *(_BYTE *)(a1 + 52) = v10;
  *(_BYTE *)(a1 + 53) = v9;
  *(_BYTE *)(a1 + 54) = -1;
  *(_BYTE *)(a1 + 56) = a9;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITGetByIdWithThisGenerator::JITGetByIdWithThisGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::RegisterSetBuilder const&,JSC::CacheableIdentifier,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(_QWORD ***a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD ***v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;

  v8 = (_QWORD ***)*a1;
  v9 = *a2;
  v10 = (_QWORD *)***a1;
  v11 = *(*a1)[1];
  if ((v11 & 1) != 0)
  {
    v29 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v30 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v41 = (_QWORD *)***a1;
      v42 = WTF::fastMalloc((WTF *)0x10);
      v10 = v41;
      *(_QWORD *)v42 = v29;
      *(_DWORD *)(v42 + 8) = v30;
      v32 = 1;
      v29 = v42;
    }
    else
    {
      v32 = v29;
      v29 = v30 << 36;
    }
    v11 = v29 | v32;
  }
  v12 = v8[3];
  v13 = *(unsigned int *)v8[2];
  v14 = (uint64_t)*v8[4];
  v15 = *(_BYTE *)v8[5];
  v16 = *(_BYTE *)v8[6];
  v17 = *(_BYTE *)v8[7];
  v18 = *(_BYTE *)v8[8];
  if ((v11 & 1) != 0)
  {
    v33 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v34 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v34 != 0x3FFFFFFF)
        ? (v35 = (_DWORD)v34 == -1)
        : (v35 = 1),
          v35))
    {
      v36 = 2;
    }
    else if (v34 >> 28)
    {
      v47 = v13;
      v49 = v10;
      v45 = v12;
      v43 = WTF::fastMalloc((WTF *)0x10);
      v12 = v45;
      v13 = v47;
      v10 = v49;
      *(_QWORD *)v43 = v33;
      *(_DWORD *)(v43 + 8) = v34;
      v36 = 1;
      v33 = v43;
    }
    else
    {
      v36 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v33 = v34 << 36;
    }
    v20 = v33 | v36;
    if ((v20 & 1) != 0)
    {
      v37 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      if ((v20 & 2) != 0
        || ((v38 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v38 != 0x3FFFFFFF)
          ? (v39 = (_DWORD)v38 == -1)
          : (v39 = 1),
            v39))
      {
        v40 = 2;
      }
      else if (v38 >> 28)
      {
        v44 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
        v48 = v13;
        v50 = v10;
        v46 = v12;
        v37 = WTF::fastMalloc((WTF *)0x10);
        v12 = v46;
        v13 = v48;
        v10 = v50;
        *(_QWORD *)v37 = v44;
        *(_DWORD *)(v37 + 8) = v38;
        v40 = 1;
      }
      else
      {
        v40 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
        v37 = v38 << 36;
      }
      v19 = 0;
      v21 = v37 | v40;
    }
    else
    {
      v19 = 1;
      v21 = v20;
    }
  }
  else
  {
    v19 = 1;
    v20 = v11;
    v21 = v11;
  }
  v51 = v21;
  JSC::JITInlineCacheGenerator::setUpStubInfoImpl<JSC::StructureStubInfo>((uint64_t *)v9, v10, 1, &v51, v13, v12, a7, a8);
  if ((v51 & 1) != 0 && (v51 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v51 & 0xFFFFFFFF8, v22, v23, v24, v25, v26, v27, v28);
  *(_QWORD *)(v9 + 16) = v14;
  *(_BYTE *)(v9 + 116) = v16;
  *(_BYTE *)(v9 + 117) = v15;
  *(_BYTE *)(v9 + 118) = -1;
  *(_BYTE *)(v9 + 120) = v18;
  if ((v19 & 1) == 0 && (v20 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v20 & 0xFFFFFFFF8, v22, v23, v24, v25, v26, v27, v28);
  *(_BYTE *)(v9 + 118) = v17;
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, v22, v23, v24, v25, v26, v27, v28);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITGetByIdWithThisGenerator::JITGetByIdWithThisGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::RegisterSetBuilder const&,JSC::CacheableIdentifier,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v8 = *a1;
  v9 = *a2;
  v10 = **(_QWORD **)(*a1 + 8);
  if ((v10 & 1) == 0)
  {
    v11 = **(_QWORD **)(v8 + 32);
LABEL_3:
    v12 = 1;
    v13 = 1;
    v14 = v10;
    v15 = v10;
    goto LABEL_4;
  }
  v17 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v18 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v18 != 0x3FFFFFFF)
      ? (v19 = (_DWORD)v18 == -1)
      : (v19 = 1),
        v19))
  {
    v20 = 2;
  }
  else if (v18 >> 28)
  {
    v29 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v29 = v17;
    *(_DWORD *)(v29 + 8) = v18;
    v20 = 1;
    v17 = v29;
  }
  else
  {
    v20 = v17;
    v17 = v18 << 36;
  }
  v10 = v17 | v20;
  v11 = **(_QWORD **)(v8 + 32);
  if (((v17 | v20) & 1) == 0)
    goto LABEL_3;
  v21 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v22 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v22 != 0x3FFFFFFF)
      ? (v23 = (_DWORD)v22 == -1)
      : (v23 = 1),
        v23))
  {
    v24 = 2;
  }
  else if (v22 >> 28)
  {
    v30 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v30 = v21;
    *(_DWORD *)(v30 + 8) = v22;
    v24 = 1;
    v21 = v30;
  }
  else
  {
    v24 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v21 = v22 << 36;
  }
  v14 = v21 | v24;
  if ((v14 & 1) != 0)
  {
    v25 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v26 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v26 != 0x3FFFFFFF)
        ? (v27 = (_DWORD)v26 == -1)
        : (v27 = 1),
          v27))
    {
      v28 = 2;
    }
    else if (v26 >> 28)
    {
      v31 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      v25 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v25 = v31;
      *(_DWORD *)(v25 + 8) = v26;
      v28 = 1;
    }
    else
    {
      v28 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      v25 = v26 << 36;
    }
    v12 = 0;
    v13 = 0;
    v15 = v25 | v28;
  }
  else
  {
    v12 = 0;
    v13 = 1;
    v15 = v14;
  }
LABEL_4:
  *(_BYTE *)v9 = 1;
  if ((v15 & 2) != 0)
  {
    *(_DWORD *)(v9 + 32) = -1;
    if ((v15 & 1) == 0)
      goto LABEL_7;
    v16 = v15 & 0xFFFFFFFF8;
  }
  else
  {
    if ((v15 & 1) == 0)
    {
      *(_DWORD *)(v9 + 32) = v15 >> 36;
      goto LABEL_7;
    }
    v16 = v15 & 0xFFFFFFFF8;
    *(_DWORD *)(v9 + 32) = *(_DWORD *)((v15 & 0xFFFFFFFF8) + 8);
  }
  if (v16)
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
LABEL_7:
  *(_QWORD *)(v9 + 8) = v11;
  if ((v13 & 1) == 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if ((v12 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITGetByIdWithThisGenerator::JITGetByIdWithThisGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::RegisterSetBuilder const&,JSC::CacheableIdentifier,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char *v12;
  uint64_t v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  v2 = *a1;
  v3 = *a2;
  v4 = **(_QWORD **)(*a1 + 8);
  if ((v4 & 1) != 0)
  {
    v22 = *(_QWORD *)(v4 & 0xFFFFFFFF8);
    if ((v4 & 2) != 0
      || ((v23 = *(unsigned int *)((v4 & 0xFFFFFFFF8) + 8), (_DWORD)v23 != 0x3FFFFFFF)
        ? (v24 = (_DWORD)v23 == -1)
        : (v24 = 1),
          v24))
    {
      v25 = 2;
    }
    else if (v23 >> 28)
    {
      v30 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v30 = v22;
      *(_DWORD *)(v30 + 8) = v23;
      v25 = 1;
      v22 = v30;
    }
    else
    {
      v25 = v22;
      v22 = v23 << 36;
    }
    v4 = v22 | v25;
    v5 = ((v22 | v25) & 1) == 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = *(_QWORD **)(v2 + 24);
  v7 = **(unsigned int **)(v2 + 16);
  v8 = **(_QWORD **)(v2 + 32);
  v9 = **(unsigned __int8 **)(v2 + 40);
  v10 = **(unsigned __int8 **)(v2 + 48);
  v11 = **(_BYTE **)(v2 + 56);
  v12 = *(char **)(v2 + 64);
  v13 = v4;
  v14 = *v12;
  if (!v5)
  {
    v26 = *(_QWORD *)(v4 & 0xFFFFFFFF8);
    if ((v4 & 2) != 0
      || ((v27 = *(unsigned int *)((v4 & 0xFFFFFFFF8) + 8), (_DWORD)v27 != 0x3FFFFFFF)
        ? (v28 = (_DWORD)v27 == -1)
        : (v28 = 1),
          v28))
    {
      v29 = 2;
    }
    else if (v27 >> 28)
    {
      v37 = v9;
      v38 = v6;
      v34 = v8;
      v35 = v7;
      v36 = v10;
      v33 = v14;
      v31 = *(_DWORD *)((v4 & 0xFFFFFFFF8) + 8);
      v32 = WTF::fastMalloc((WTF *)0x10);
      v14 = v33;
      v10 = v36;
      v9 = v37;
      v8 = v34;
      v7 = v35;
      v6 = v38;
      *(_QWORD *)v32 = v26;
      *(_DWORD *)(v32 + 8) = v31;
      v29 = 1;
      v26 = v32;
    }
    else
    {
      v29 = *(_QWORD *)(v4 & 0xFFFFFFFF8);
      v26 = v27 << 36;
    }
    v13 = v26 | v29;
  }
  JSC::JITByIdGenerator::setUpStubInfoImpl<JSC::DFG::UnlinkedStructureStubInfo>(v3, 1uLL, v13, v7, v6, v8, v10, v9, v14);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  *(_BYTE *)(v3 + 54) = v11;
  if (!v5 && (v4 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v4 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITPutByIdGenerator::JITPutByIdGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::RegisterSetBuilder const&,JSC::CacheableIdentifier,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AccessType)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(_QWORD ***a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD ***v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  _QWORD *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;

  v8 = (_QWORD ***)*a1;
  v9 = *a2;
  v10 = (_QWORD *)***a1;
  v11 = *(_BYTE *)(*a1)[1];
  v12 = *(*a1)[2];
  if ((v12 & 1) != 0)
  {
    v30 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v31 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v31 != 0x3FFFFFFF)
        ? (v32 = (_DWORD)v31 == -1)
        : (v32 = 1),
          v32))
    {
      v33 = 2;
    }
    else if (v31 >> 28)
    {
      v42 = (_QWORD *)***a1;
      v43 = *(_BYTE *)(*a1)[1];
      v44 = WTF::fastMalloc((WTF *)0x10);
      v11 = v43;
      v10 = v42;
      *(_QWORD *)v44 = v30;
      *(_DWORD *)(v44 + 8) = v31;
      v33 = 1;
      v30 = v44;
    }
    else
    {
      v33 = v30;
      v30 = v31 << 36;
    }
    v12 = v30 | v33;
  }
  v13 = v8[4];
  v14 = *(unsigned int *)v8[3];
  v15 = (uint64_t)*v8[5];
  v16 = *(_BYTE *)v8[6];
  v17 = *(_BYTE *)v8[7];
  v18 = *(_BYTE *)v8[8];
  v19 = *(_BYTE *)v8[9];
  if ((v12 & 1) != 0)
  {
    v34 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v35 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v35 != 0x3FFFFFFF)
        ? (v36 = (_DWORD)v35 == -1)
        : (v36 = 1),
          v36))
    {
      v37 = 2;
    }
    else if (v35 >> 28)
    {
      v51 = v14;
      v53 = v10;
      v49 = v13;
      v47 = v11;
      v45 = WTF::fastMalloc((WTF *)0x10);
      v11 = v47;
      v13 = v49;
      v14 = v51;
      v10 = v53;
      *(_QWORD *)v45 = v34;
      *(_DWORD *)(v45 + 8) = v35;
      v37 = 1;
      v34 = v45;
    }
    else
    {
      v37 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v34 = v35 << 36;
    }
    v21 = v34 | v37;
    if ((v21 & 1) != 0)
    {
      v38 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
      if ((v21 & 2) != 0
        || ((v39 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v39 != 0x3FFFFFFF)
          ? (v40 = (_DWORD)v39 == -1)
          : (v40 = 1),
            v40))
      {
        v41 = 2;
      }
      else if (v39 >> 28)
      {
        v46 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
        v52 = v14;
        v54 = v10;
        v50 = v13;
        v48 = v11;
        v38 = WTF::fastMalloc((WTF *)0x10);
        v11 = v48;
        v13 = v50;
        v14 = v52;
        v10 = v54;
        *(_QWORD *)v38 = v46;
        *(_DWORD *)(v38 + 8) = v39;
        v41 = 1;
      }
      else
      {
        v41 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
        v38 = v39 << 36;
      }
      v20 = 0;
      v22 = v38 | v41;
    }
    else
    {
      v20 = 1;
      v22 = v21;
    }
  }
  else
  {
    v20 = 1;
    v21 = v12;
    v22 = v12;
  }
  v55 = v22;
  JSC::JITInlineCacheGenerator::setUpStubInfoImpl<JSC::StructureStubInfo>((uint64_t *)v9, v10, v11, &v55, v14, v13, a7, a8);
  if ((v55 & 1) != 0 && (v55 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v55 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
  *(_QWORD *)(v9 + 16) = v15;
  *(_BYTE *)(v9 + 116) = v16;
  *(_BYTE *)(v9 + 117) = v17;
  *(_BYTE *)(v9 + 118) = -1;
  *(_BYTE *)(v9 + 120) = v18;
  if ((v20 & 1) == 0 && (v21 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v21 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
  if ((v19 & 0x7Fu) >= 0x40)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v9 + 104) &= ~(1 << (v19 & 0x7F));
    if ((v12 & 1) == 0)
      return;
  }
  if ((v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITPutByIdGenerator::JITPutByIdGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::RegisterSetBuilder const&,JSC::CacheableIdentifier,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AccessType)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v8 = *a1;
  v9 = *a2;
  v10 = **(_BYTE **)(*a1 + 8);
  v11 = **(_QWORD **)(*a1 + 16);
  if ((v11 & 1) == 0)
  {
    v12 = **(_QWORD **)(v8 + 40);
LABEL_3:
    v13 = 1;
    v14 = 1;
    v15 = v11;
    v16 = v11;
    goto LABEL_4;
  }
  v18 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v19 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v19 != 0x3FFFFFFF)
      ? (v20 = (_DWORD)v19 == -1)
      : (v20 = 1),
        v20))
  {
    v21 = 2;
  }
  else if (v19 >> 28)
  {
    v30 = **(_BYTE **)(*a1 + 8);
    v31 = WTF::fastMalloc((WTF *)0x10);
    v10 = v30;
    *(_QWORD *)v31 = v18;
    *(_DWORD *)(v31 + 8) = v19;
    v21 = 1;
    v18 = v31;
  }
  else
  {
    v21 = v18;
    v18 = v19 << 36;
  }
  v11 = v18 | v21;
  v12 = **(_QWORD **)(v8 + 40);
  if (((v18 | v21) & 1) == 0)
    goto LABEL_3;
  v22 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v23 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v23 != 0x3FFFFFFF)
      ? (v24 = (_DWORD)v23 == -1)
      : (v24 = 1),
        v24))
  {
    v25 = 2;
  }
  else if (v23 >> 28)
  {
    v32 = v10;
    v33 = WTF::fastMalloc((WTF *)0x10);
    v10 = v32;
    *(_QWORD *)v33 = v22;
    *(_DWORD *)(v33 + 8) = v23;
    v25 = 1;
    v22 = v33;
  }
  else
  {
    v25 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v22 = v23 << 36;
  }
  v15 = v22 | v25;
  if ((v15 & 1) != 0)
  {
    v26 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((v27 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v27 != 0x3FFFFFFF)
        ? (v28 = (_DWORD)v27 == -1)
        : (v28 = 1),
          v28))
    {
      v29 = 2;
    }
    else if (v27 >> 28)
    {
      v34 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      v35 = v10;
      v26 = WTF::fastMalloc((WTF *)0x10);
      v10 = v35;
      *(_QWORD *)v26 = v34;
      *(_DWORD *)(v26 + 8) = v27;
      v29 = 1;
    }
    else
    {
      v29 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      v26 = v27 << 36;
    }
    v13 = 0;
    v14 = 0;
    v16 = v26 | v29;
  }
  else
  {
    v13 = 0;
    v14 = 1;
    v16 = v15;
  }
LABEL_4:
  *(_BYTE *)v9 = v10;
  if ((v16 & 2) != 0)
  {
    *(_DWORD *)(v9 + 32) = -1;
    if ((v16 & 1) == 0)
      goto LABEL_7;
    v17 = v16 & 0xFFFFFFFF8;
  }
  else
  {
    if ((v16 & 1) == 0)
    {
      *(_DWORD *)(v9 + 32) = v16 >> 36;
      goto LABEL_7;
    }
    v17 = v16 & 0xFFFFFFFF8;
    *(_DWORD *)(v9 + 32) = *(_DWORD *)((v16 & 0xFFFFFFFF8) + 8);
  }
  if (v17)
    WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
LABEL_7:
  *(_QWORD *)(v9 + 8) = v12;
  if ((v14 & 1) == 0 && (v15 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v15 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if ((v13 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITPutByIdGenerator::JITPutByIdGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::RegisterSetBuilder const&,JSC::CacheableIdentifier,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AccessType)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  _BOOL4 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;

  v2 = *a1;
  v3 = *a2;
  v4 = **(_BYTE **)(*a1 + 8);
  v5 = **(_QWORD **)(*a1 + 16);
  if ((v5 & 1) != 0)
  {
    v21 = *(_QWORD *)(v5 & 0xFFFFFFFF8);
    if ((v5 & 2) != 0
      || ((v22 = *(unsigned int *)((v5 & 0xFFFFFFFF8) + 8), (_DWORD)v22 != 0x3FFFFFFF)
        ? (v23 = (_DWORD)v22 == -1)
        : (v23 = 1),
          v23))
    {
      v24 = 2;
    }
    else if (v22 >> 28)
    {
      v30 = **(_BYTE **)(*a1 + 8);
      v31 = WTF::fastMalloc((WTF *)0x10);
      v4 = v30;
      *(_QWORD *)v31 = v21;
      *(_DWORD *)(v31 + 8) = v22;
      v24 = 1;
      v21 = v31;
    }
    else
    {
      v24 = v21;
      v21 = v22 << 36;
    }
    v5 = v21 | v24;
    v6 = ((v21 | v24) & 1) == 0;
  }
  else
  {
    v6 = 1;
  }
  v7 = *(_QWORD **)(v2 + 32);
  v8 = **(unsigned int **)(v2 + 24);
  v9 = **(_QWORD **)(v2 + 40);
  v10 = **(unsigned __int8 **)(v2 + 48);
  v11 = **(unsigned __int8 **)(v2 + 56);
  v12 = **(_BYTE **)(v2 + 64);
  v13 = **(_BYTE **)(v2 + 72);
  if (v6)
  {
    JSC::JITByIdGenerator::setUpStubInfoImpl<JSC::DFG::UnlinkedStructureStubInfo>(v3, v4, v5, v8, v7, v9, v10, v11, v12);
  }
  else
  {
    v25 = *(_QWORD *)(v5 & 0xFFFFFFFF8);
    if ((v5 & 2) != 0
      || ((v26 = *(unsigned int *)((v5 & 0xFFFFFFFF8) + 8), (_DWORD)v26 != 0x3FFFFFFF)
        ? (v27 = (_DWORD)v26 == -1)
        : (v27 = 1),
          v27))
    {
      v28 = 2;
    }
    else if (v26 >> 28)
    {
      v39 = v8;
      v40 = v7;
      v35 = v9;
      v36 = v10;
      v38 = v11;
      v34 = v4;
      v37 = v12;
      v32 = *(_DWORD *)((v5 & 0xFFFFFFFF8) + 8);
      v33 = WTF::fastMalloc((WTF *)0x10);
      v12 = v37;
      v4 = v34;
      v11 = v38;
      v8 = v39;
      v9 = v35;
      v10 = v36;
      v7 = v40;
      *(_QWORD *)v33 = v25;
      *(_DWORD *)(v33 + 8) = v32;
      v28 = 1;
      v25 = v33;
    }
    else
    {
      v28 = *(_QWORD *)(v5 & 0xFFFFFFFF8);
      v25 = v26 << 36;
    }
    v29 = v25 | v28;
    JSC::JITByIdGenerator::setUpStubInfoImpl<JSC::DFG::UnlinkedStructureStubInfo>(v3, v4, v29, v8, v7, v9, v10, v11, v12);
    if ((v29 & 1) != 0 && (v29 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v29 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
  }
  if ((v13 & 0x7Fu) >= 0x40)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 40) &= ~(1 << (v13 & 0x7F));
    if (v6)
      return;
  }
  if ((v5 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v5 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITDelByValGenerator::JITDelByValGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::AccessType,JSC::RegisterSetBuilder const&,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(_QWORD ***a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD ***v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  char v17;
  char *v18;
  char v19;
  uint64_t v20;
  char v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  _QWORD **v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;

  v8 = (_QWORD ***)*a1;
  v9 = *a2;
  v10 = (_QWORD *)***a1;
  v11 = *(_BYTE *)(*a1)[1];
  v12 = *(*a1)[2];
  if ((v12 & 1) != 0)
  {
    v29 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v30 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v37 = (_QWORD *)***a1;
      v38 = *(_BYTE *)(*a1)[1];
      v39 = *a1;
      v40 = WTF::fastMalloc((WTF *)0x10);
      v8 = (_QWORD ***)v39;
      v11 = v38;
      v10 = v37;
      *(_QWORD *)v40 = v29;
      *(_DWORD *)(v40 + 8) = v30;
      v32 = 1;
      v29 = v40;
    }
    else
    {
      v32 = v29;
      v29 = v30 << 36;
    }
    v12 = v29 | v32;
    v13 = ((v29 | v32) & 1) == 0;
  }
  else
  {
    v13 = 1;
  }
  v14 = v8[4];
  v15 = *(unsigned int *)v8[3];
  v16 = *(_BYTE *)v8[5];
  v17 = *(_BYTE *)v8[6];
  v18 = (char *)v8[8];
  v19 = *(_BYTE *)v8[7];
  v20 = v12;
  v21 = *v18;
  if (!v13)
  {
    v33 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v34 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v34 != 0x3FFFFFFF)
        ? (v35 = (_DWORD)v34 == -1)
        : (v35 = 1),
          v35))
    {
      v36 = 2;
    }
    else if (v34 >> 28)
    {
      v41 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v45 = v15;
      v46 = v10;
      v44 = v14;
      v43 = v11;
      v42 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8);
      v33 = WTF::fastMalloc((WTF *)0x10);
      v11 = v43;
      v14 = v44;
      v15 = v45;
      v10 = v46;
      *(_QWORD *)v33 = v41;
      *(_DWORD *)(v33 + 8) = v42;
      v36 = 1;
    }
    else
    {
      v36 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v33 = v34 << 36;
    }
    v20 = v33 | v36;
  }
  v47 = v20;
  JSC::JITInlineCacheGenerator::setUpStubInfoImpl<JSC::StructureStubInfo>((uint64_t *)v9, v10, v11, &v47, v15, v14, a7, a8);
  if ((v47 & 1) != 0 && (v47 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v47 & 0xFFFFFFFF8, v22, v23, v24, v25, v26, v27, v28);
  *(_BYTE *)(v9 + 116) = v16;
  *(_BYTE *)(v9 + 118) = v17;
  *(_BYTE *)(v9 + 117) = v19;
  *(_BYTE *)(v9 + 120) = v21;
  if (!v13 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, v22, v23, v24, v25, v26, v27, v28);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITDelByValGenerator::JITDelByValGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::AccessType,JSC::RegisterSetBuilder const&,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v8 = *a2;
  v9 = **(_BYTE **)(*(_QWORD *)a1 + 8);
  v10 = **(_QWORD **)(*(_QWORD *)a1 + 16);
  if ((v10 & 1) == 0)
    goto LABEL_2;
  v14 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v15 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v15 != 0x3FFFFFFF)
      ? (v16 = (_DWORD)v15 == -1)
      : (v16 = 1),
        v16))
  {
    v17 = 2;
  }
  else if (v15 >> 28)
  {
    v26 = *a2;
    v24 = **(_BYTE **)(*(_QWORD *)a1 + 8);
    v22 = WTF::fastMalloc((WTF *)0x10);
    v9 = v24;
    v8 = v26;
    *(_QWORD *)v22 = v14;
    *(_DWORD *)(v22 + 8) = v15;
    v17 = 1;
    v14 = v22;
  }
  else
  {
    v17 = v14;
    v14 = v15 << 36;
  }
  v10 = v14 | v17;
  if (((v14 | v17) & 1) != 0)
  {
    v18 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    if ((v10 & 2) != 0
      || ((v19 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v19 != 0x3FFFFFFF)
        ? (v20 = (_DWORD)v19 == -1)
        : (v20 = 1),
          v20))
    {
      v21 = 2;
    }
    else if (v19 >> 28)
    {
      v23 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
      v27 = v8;
      v25 = v9;
      v18 = WTF::fastMalloc((WTF *)0x10);
      v9 = v25;
      v8 = v27;
      *(_QWORD *)v18 = v23;
      *(_DWORD *)(v18 + 8) = v19;
      v21 = 1;
    }
    else
    {
      v21 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
      v18 = v19 << 36;
    }
    v11 = 0;
    v12 = v18 | v21;
  }
  else
  {
LABEL_2:
    v11 = 1;
    v12 = v10;
  }
  *(_BYTE *)v8 = v9;
  if ((v12 & 2) != 0)
  {
    *(_DWORD *)(v8 + 32) = -1;
    if ((v12 & 1) == 0)
      goto LABEL_6;
    v13 = v12 & 0xFFFFFFFF8;
  }
  else
  {
    if ((v12 & 1) == 0)
    {
      *(_DWORD *)(v8 + 32) = v12 >> 36;
      goto LABEL_6;
    }
    v13 = v12 & 0xFFFFFFFF8;
    *(_DWORD *)(v8 + 32) = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8);
  }
  if (v13)
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
LABEL_6:
  if ((v11 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITDelByValGenerator::JITDelByValGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::AccessType,JSC::RegisterSetBuilder const&,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;
  int v14;
  char v15;
  char v16;
  char *v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;

  v8 = *a1;
  v9 = *a2;
  v10 = **(_BYTE **)(*a1 + 8);
  v11 = **(_QWORD **)(*a1 + 16);
  if ((v11 & 1) != 0)
  {
    v22 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v23 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v23 != 0x3FFFFFFF)
        ? (v24 = (_DWORD)v23 == -1)
        : (v24 = 1),
          v24))
    {
      v25 = 2;
    }
    else if (v23 >> 28)
    {
      v35 = **(_BYTE **)(*a1 + 8);
      v36 = WTF::fastMalloc((WTF *)0x10);
      v10 = v35;
      *(_QWORD *)v36 = v22;
      *(_DWORD *)(v36 + 8) = v23;
      v25 = 1;
      v22 = v36;
    }
    else
    {
      v25 = v22;
      v22 = v23 << 36;
    }
    v11 = v22 | v25;
    v12 = ((v22 | v25) & 1) == 0;
  }
  else
  {
    v12 = 1;
  }
  v13 = *(_QWORD **)(v8 + 32);
  v14 = **(_DWORD **)(v8 + 24);
  v15 = **(_BYTE **)(v8 + 40);
  v16 = **(_BYTE **)(v8 + 48);
  v17 = *(char **)(v8 + 64);
  v18 = **(_BYTE **)(v8 + 56);
  v19 = v11;
  v20 = *v17;
  if (!v12)
  {
    v26 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v27 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v27 != 0x3FFFFFFF)
        ? (v28 = (_DWORD)v27 == -1)
        : (v28 = 1),
          v28))
    {
      v29 = 2;
    }
    else if (v27 >> 28)
    {
      v37 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v39 = v10;
      v26 = WTF::fastMalloc((WTF *)0x10);
      v10 = v39;
      *(_QWORD *)v26 = v37;
      *(_DWORD *)(v26 + 8) = v27;
      v29 = 1;
    }
    else
    {
      v29 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v26 = v27 << 36;
    }
    v19 = v26 | v29;
  }
  *(_BYTE *)v9 = v10;
  v21 = *(_QWORD *)(v9 + 32);
  if ((v21 & 1) != 0 && (v21 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v21 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if ((v19 & 1) != 0)
  {
    v30 = v19 & 0xFFFFFFFF8;
    v31 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v32 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v32 != 0x3FFFFFFF)
        ? (v33 = (_DWORD)v32 == -1)
        : (v33 = 1),
          v33))
    {
      v34 = 2;
    }
    else if (v32 >> 28)
    {
      v38 = v31;
      v40 = v30;
      v31 = WTF::fastMalloc((WTF *)0x10);
      v30 = v40;
      *(_QWORD *)v31 = v38;
      *(_DWORD *)(v31 + 8) = v32;
      v34 = 1;
    }
    else
    {
      v34 = v31;
      v31 = v32 << 36;
    }
    *(_QWORD *)(v9 + 32) = v31 | v34;
    *(_DWORD *)(v9 + 48) = v14;
    *(_QWORD *)(v9 + 40) = v13[1] | *v13;
    if (v30)
      WTF::fastFree(v30, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)(v9 + 32) = v19;
    *(_DWORD *)(v9 + 48) = v14;
    *(_QWORD *)(v9 + 40) = v13[1] | *v13;
  }
  *(_BYTE *)(v9 + 52) = v15;
  *(_BYTE *)(v9 + 54) = v16;
  *(_BYTE *)(v9 + 53) = v18;
  *(_BYTE *)(v9 + 56) = v20;
  if (!v12 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITDelByIdGenerator::JITDelByIdGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::AccessType,JSC::RegisterSetBuilder const&,JSC::CacheableIdentifier,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *a1;
  v3 = *a2;
  v4 = **(_QWORD ***)v2;
  v5 = **(_BYTE **)(v2 + 8);
  v6 = **(_QWORD **)(v2 + 16);
  if ((v6 & 1) != 0)
  {
    v14 = *(_QWORD *)(v6 & 0xFFFFFFFF8);
    if ((v6 & 2) != 0
      || ((v15 = *(unsigned int *)((v6 & 0xFFFFFFFF8) + 8), (_DWORD)v15 != 0x3FFFFFFF)
        ? (v16 = (_DWORD)v15 == -1)
        : (v16 = 1),
          v16))
    {
      v17 = 2;
    }
    else if (v15 >> 28)
    {
      v22 = **(_QWORD ***)v2;
      v23 = v3;
      v25 = v2;
      v24 = **(_BYTE **)(v2 + 8);
      v18 = v14;
      v19 = v15;
      v20 = WTF::fastMalloc((WTF *)0x10);
      v4 = v22;
      v3 = v23;
      *(_QWORD *)v20 = v18;
      *(_DWORD *)(v20 + 8) = v19;
      v17 = 1;
      v14 = v20;
      v5 = v24;
      v2 = v25;
    }
    else
    {
      v17 = v14;
      v14 = v15 << 36;
    }
    v6 = v14 | v17;
  }
  v26 = v6;
  LOBYTE(v21) = **(_BYTE **)(v2 + 64);
  JSC::JITDelByIdGenerator::setUpStubInfo<JSC::StructureStubInfo>(v3, v4, v5, (JSC::CodeOrigin *)&v26, **(_DWORD **)(v2 + 24), *(_QWORD **)(v2 + 32), **(_QWORD **)(v2 + 40), **(_BYTE **)(v2 + 48), **(_BYTE **)(v2 + 56), 0, v21, SBYTE2(v21), SHIBYTE(v21));
  if ((v26 & 1) != 0 && (v26 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v26 & 0xFFFFFFFF8, v7, v8, v9, v10, v11, v12, v13);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITDelByIdGenerator::JITDelByIdGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::AccessType,JSC::RegisterSetBuilder const&,JSC::CacheableIdentifier,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v8 = *a1;
  v9 = *a2;
  v10 = **(_BYTE **)(*a1 + 8);
  v11 = **(_QWORD **)(*a1 + 16);
  if ((v11 & 1) == 0)
  {
    v12 = **(_QWORD **)(v8 + 40);
LABEL_3:
    v13 = 1;
    v14 = 1;
    v15 = v11;
    v16 = v11;
    goto LABEL_4;
  }
  v18 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v19 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v19 != 0x3FFFFFFF)
      ? (v20 = (_DWORD)v19 == -1)
      : (v20 = 1),
        v20))
  {
    v21 = 2;
  }
  else if (v19 >> 28)
  {
    v30 = **(_BYTE **)(*a1 + 8);
    v31 = WTF::fastMalloc((WTF *)0x10);
    v10 = v30;
    *(_QWORD *)v31 = v18;
    *(_DWORD *)(v31 + 8) = v19;
    v21 = 1;
    v18 = v31;
  }
  else
  {
    v21 = v18;
    v18 = v19 << 36;
  }
  v11 = v18 | v21;
  v12 = **(_QWORD **)(v8 + 40);
  if (((v18 | v21) & 1) == 0)
    goto LABEL_3;
  v22 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v23 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v23 != 0x3FFFFFFF)
      ? (v24 = (_DWORD)v23 == -1)
      : (v24 = 1),
        v24))
  {
    v25 = 2;
  }
  else if (v23 >> 28)
  {
    v32 = v10;
    v33 = WTF::fastMalloc((WTF *)0x10);
    v10 = v32;
    *(_QWORD *)v33 = v22;
    *(_DWORD *)(v33 + 8) = v23;
    v25 = 1;
    v22 = v33;
  }
  else
  {
    v25 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v22 = v23 << 36;
  }
  v15 = v22 | v25;
  if ((v15 & 1) != 0)
  {
    v26 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((v27 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v27 != 0x3FFFFFFF)
        ? (v28 = (_DWORD)v27 == -1)
        : (v28 = 1),
          v28))
    {
      v29 = 2;
    }
    else if (v27 >> 28)
    {
      v34 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      v35 = v10;
      v26 = WTF::fastMalloc((WTF *)0x10);
      v10 = v35;
      *(_QWORD *)v26 = v34;
      *(_DWORD *)(v26 + 8) = v27;
      v29 = 1;
    }
    else
    {
      v29 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      v26 = v27 << 36;
    }
    v13 = 0;
    v14 = 0;
    v16 = v26 | v29;
  }
  else
  {
    v13 = 0;
    v14 = 1;
    v16 = v15;
  }
LABEL_4:
  *(_BYTE *)v9 = v10;
  if ((v16 & 2) != 0)
  {
    *(_DWORD *)(v9 + 32) = -1;
    if ((v16 & 1) == 0)
      goto LABEL_7;
    v17 = v16 & 0xFFFFFFFF8;
  }
  else
  {
    if ((v16 & 1) == 0)
    {
      *(_DWORD *)(v9 + 32) = v16 >> 36;
      goto LABEL_7;
    }
    v17 = v16 & 0xFFFFFFFF8;
    *(_DWORD *)(v9 + 32) = *(_DWORD *)((v16 & 0xFFFFFFFF8) + 8);
  }
  if (v17)
    WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
LABEL_7:
  *(_QWORD *)(v9 + 8) = v12;
  if ((v14 & 1) == 0 && (v15 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v15 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if ((v13 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITDelByIdGenerator::JITDelByIdGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::AccessType,JSC::RegisterSetBuilder const&,JSC::CacheableIdentifier,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;

  v2 = *a1;
  v3 = *a2;
  v4 = **(_BYTE **)(v2 + 8);
  v5 = **(_QWORD **)(v2 + 16);
  if ((v5 & 1) != 0)
  {
    v22 = *(_QWORD *)(v5 & 0xFFFFFFFF8);
    if ((v5 & 2) != 0
      || ((v23 = *(unsigned int *)((v5 & 0xFFFFFFFF8) + 8), (_DWORD)v23 != 0x3FFFFFFF)
        ? (v24 = (_DWORD)v23 == -1)
        : (v24 = 1),
          v24))
    {
      v25 = 2;
    }
    else if (v23 >> 28)
    {
      v40 = *a2;
      v42 = **(_BYTE **)(v2 + 8);
      v30 = WTF::fastMalloc((WTF *)0x10);
      v3 = v40;
      *(_QWORD *)v30 = v22;
      *(_DWORD *)(v30 + 8) = v23;
      v25 = 1;
      v22 = v30;
      v4 = v42;
    }
    else
    {
      v25 = v22;
      v22 = v23 << 36;
    }
    v5 = v22 | v25;
    v6 = ((v22 | v25) & 1) == 0;
  }
  else
  {
    v6 = 1;
  }
  v7 = *(_QWORD **)(v2 + 32);
  v8 = **(unsigned int **)(v2 + 24);
  v9 = **(_QWORD **)(v2 + 40);
  v10 = **(unsigned __int8 **)(v2 + 48);
  v11 = *(char **)(v2 + 64);
  v12 = **(unsigned __int8 **)(v2 + 56);
  v13 = v5;
  v14 = *v11;
  if (!v6)
  {
    v26 = *(_QWORD *)(v5 & 0xFFFFFFFF8);
    if ((v5 & 2) != 0
      || ((v27 = *(unsigned int *)((v5 & 0xFFFFFFFF8) + 8), (_DWORD)v27 != 0x3FFFFFFF)
        ? (v28 = (_DWORD)v27 == -1)
        : (v28 = 1),
          v28))
    {
      v29 = 2;
    }
    else if (v27 >> 28)
    {
      v41 = v3;
      v38 = v10;
      v39 = v7;
      v34 = v9;
      v35 = v8;
      v37 = v12;
      v43 = v4;
      v36 = v14;
      v31 = *(_DWORD *)((v5 & 0xFFFFFFFF8) + 8);
      v32 = WTF::fastMalloc((WTF *)0x10);
      v14 = v36;
      v12 = v37;
      v10 = v38;
      v9 = v34;
      v8 = v35;
      v7 = v39;
      v33 = v32;
      v3 = v41;
      *(_QWORD *)v33 = v26;
      *(_DWORD *)(v33 + 8) = v31;
      v29 = 1;
      v26 = v33;
      v4 = v43;
    }
    else
    {
      v29 = *(_QWORD *)(v5 & 0xFFFFFFFF8);
      v26 = v27 << 36;
    }
    v13 = v26 | v29;
  }
  JSC::JITByIdGenerator::setUpStubInfoImpl<JSC::DFG::UnlinkedStructureStubInfo>(v3, v4, v13, v8, v7, v9, v10, v12, v14);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  if (!v6 && (v5 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v5 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
}

void JSC::JITDelByIdGenerator::setUpStubInfo<JSC::StructureStubInfo>(uint64_t a1, _QWORD *a2, uint64_t a3, JSC::CodeOrigin *a4, unsigned int a5, _QWORD *a6, uint64_t a7, unsigned __int8 a8, char a9, int a10, __int16 a11, char a12, char a13)
{
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  JSC::CodeOrigin::CodeOrigin(&v27, a4);
  JSC::JITByIdGenerator::setUpStubInfoImpl<JSC::StructureStubInfo>(a1, a2, a3, v27, a5, a6, a7, a8, a9, 0, a11);
  if ((v27 & 1) != 0 && (v27 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v27 & 0xFFFFFFFF8, v20, v21, v22, v23, v24, v25, v26);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITInByValGenerator::JITInByValGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::AccessType,JSC::RegisterSetBuilder const&,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(_QWORD ***a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD ***v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char *v20;
  uint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  _QWORD *v38;
  char v39;
  _QWORD **v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;

  v8 = (_QWORD ***)*a1;
  v9 = *a2;
  v10 = (_QWORD *)***a1;
  v11 = *(_BYTE *)(*a1)[1];
  v12 = *(*a1)[2];
  if ((v12 & 1) != 0)
  {
    v30 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v31 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v31 != 0x3FFFFFFF)
        ? (v32 = (_DWORD)v31 == -1)
        : (v32 = 1),
          v32))
    {
      v33 = 2;
    }
    else if (v31 >> 28)
    {
      v38 = (_QWORD *)***a1;
      v39 = *(_BYTE *)(*a1)[1];
      v40 = *a1;
      v41 = WTF::fastMalloc((WTF *)0x10);
      v8 = (_QWORD ***)v40;
      v11 = v39;
      v10 = v38;
      *(_QWORD *)v41 = v30;
      *(_DWORD *)(v41 + 8) = v31;
      v33 = 1;
      v30 = v41;
    }
    else
    {
      v33 = v30;
      v30 = v31 << 36;
    }
    v12 = v30 | v33;
    v13 = ((v30 | v33) & 1) == 0;
  }
  else
  {
    v13 = 1;
  }
  v14 = v8[4];
  v15 = *(unsigned int *)v8[3];
  v16 = *(_BYTE *)v8[5];
  v17 = *(_BYTE *)v8[6];
  v18 = *(_BYTE *)v8[7];
  v19 = *(_BYTE *)v8[8];
  v20 = (char *)v8[9];
  v21 = v12;
  v22 = *v20;
  if (!v13)
  {
    v34 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v35 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v35 != 0x3FFFFFFF)
        ? (v36 = (_DWORD)v35 == -1)
        : (v36 = 1),
          v36))
    {
      v37 = 2;
    }
    else if (v35 >> 28)
    {
      v42 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v46 = v15;
      v47 = v10;
      v45 = v14;
      v44 = v11;
      v43 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8);
      v34 = WTF::fastMalloc((WTF *)0x10);
      v11 = v44;
      v14 = v45;
      v15 = v46;
      v10 = v47;
      *(_QWORD *)v34 = v42;
      *(_DWORD *)(v34 + 8) = v43;
      v37 = 1;
    }
    else
    {
      v37 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v34 = v35 << 36;
    }
    v21 = v34 | v37;
  }
  v48 = v21;
  JSC::JITInlineCacheGenerator::setUpStubInfoImpl<JSC::StructureStubInfo>((uint64_t *)v9, v10, v11, &v48, v15, v14, a7, a8);
  if ((v48 & 1) != 0 && (v48 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v48 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
  *(_BYTE *)(v9 + 116) = v16;
  *(_BYTE *)(v9 + 118) = v17;
  *(_BYTE *)(v9 + 117) = v18;
  *(_BYTE *)(v9 + 120) = v22;
  *(_BYTE *)(v9 + 121) = v19;
  if (!v13 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITInByValGenerator::JITInByValGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::AccessType,JSC::RegisterSetBuilder const&,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v8 = *a2;
  v9 = **(_BYTE **)(*(_QWORD *)a1 + 8);
  v10 = **(_QWORD **)(*(_QWORD *)a1 + 16);
  if ((v10 & 1) == 0)
    goto LABEL_2;
  v14 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v15 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v15 != 0x3FFFFFFF)
      ? (v16 = (_DWORD)v15 == -1)
      : (v16 = 1),
        v16))
  {
    v17 = 2;
  }
  else if (v15 >> 28)
  {
    v26 = *a2;
    v24 = **(_BYTE **)(*(_QWORD *)a1 + 8);
    v22 = WTF::fastMalloc((WTF *)0x10);
    v9 = v24;
    v8 = v26;
    *(_QWORD *)v22 = v14;
    *(_DWORD *)(v22 + 8) = v15;
    v17 = 1;
    v14 = v22;
  }
  else
  {
    v17 = v14;
    v14 = v15 << 36;
  }
  v10 = v14 | v17;
  if (((v14 | v17) & 1) != 0)
  {
    v18 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    if ((v10 & 2) != 0
      || ((v19 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v19 != 0x3FFFFFFF)
        ? (v20 = (_DWORD)v19 == -1)
        : (v20 = 1),
          v20))
    {
      v21 = 2;
    }
    else if (v19 >> 28)
    {
      v23 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
      v27 = v8;
      v25 = v9;
      v18 = WTF::fastMalloc((WTF *)0x10);
      v9 = v25;
      v8 = v27;
      *(_QWORD *)v18 = v23;
      *(_DWORD *)(v18 + 8) = v19;
      v21 = 1;
    }
    else
    {
      v21 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
      v18 = v19 << 36;
    }
    v11 = 0;
    v12 = v18 | v21;
  }
  else
  {
LABEL_2:
    v11 = 1;
    v12 = v10;
  }
  *(_BYTE *)v8 = v9;
  if ((v12 & 2) != 0)
  {
    *(_DWORD *)(v8 + 32) = -1;
    if ((v12 & 1) == 0)
      goto LABEL_6;
    v13 = v12 & 0xFFFFFFFF8;
  }
  else
  {
    if ((v12 & 1) == 0)
    {
      *(_DWORD *)(v8 + 32) = v12 >> 36;
      goto LABEL_6;
    }
    v13 = v12 & 0xFFFFFFFF8;
    *(_DWORD *)(v8 + 32) = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8);
  }
  if (v13)
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
LABEL_6:
  if ((v11 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITInByValGenerator::JITInByValGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::AccessType,JSC::RegisterSetBuilder const&,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;
  int v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v39;

  v8 = *a1;
  v9 = *a2;
  v10 = **(_BYTE **)(*a1 + 8);
  v11 = **(_QWORD **)(*a1 + 16);
  if ((v11 & 1) != 0)
  {
    v21 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v22 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v22 != 0x3FFFFFFF)
        ? (v23 = (_DWORD)v22 == -1)
        : (v23 = 1),
          v23))
    {
      v24 = 2;
    }
    else if (v22 >> 28)
    {
      v34 = **(_BYTE **)(*a1 + 8);
      v35 = WTF::fastMalloc((WTF *)0x10);
      v10 = v34;
      *(_QWORD *)v35 = v21;
      *(_DWORD *)(v35 + 8) = v22;
      v24 = 1;
      v21 = v35;
    }
    else
    {
      v24 = v21;
      v21 = v22 << 36;
    }
    v11 = v21 | v24;
    v12 = ((v21 | v24) & 1) == 0;
  }
  else
  {
    v12 = 1;
  }
  v13 = *(_QWORD **)(v8 + 32);
  v14 = **(_DWORD **)(v8 + 24);
  v15 = **(_BYTE **)(v8 + 40);
  v16 = **(_BYTE **)(v8 + 48);
  v17 = **(_BYTE **)(v8 + 56);
  v18 = v11;
  v19 = **(_BYTE **)(v8 + 72);
  if (!v12)
  {
    v25 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v26 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v26 != 0x3FFFFFFF)
        ? (v27 = (_DWORD)v26 == -1)
        : (v27 = 1),
          v27))
    {
      v28 = 2;
    }
    else if (v26 >> 28)
    {
      v36 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v38 = v10;
      v25 = WTF::fastMalloc((WTF *)0x10);
      v10 = v38;
      *(_QWORD *)v25 = v36;
      *(_DWORD *)(v25 + 8) = v26;
      v28 = 1;
    }
    else
    {
      v28 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v25 = v26 << 36;
    }
    v18 = v25 | v28;
  }
  *(_BYTE *)v9 = v10;
  v20 = *(_QWORD *)(v9 + 32);
  if ((v20 & 1) != 0 && (v20 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v20 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if ((v18 & 1) != 0)
  {
    v29 = v18 & 0xFFFFFFFF8;
    v30 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
    if ((v18 & 2) != 0
      || ((v31 = *(unsigned int *)((v18 & 0xFFFFFFFF8) + 8), (_DWORD)v31 != 0x3FFFFFFF)
        ? (v32 = (_DWORD)v31 == -1)
        : (v32 = 1),
          v32))
    {
      v33 = 2;
    }
    else if (v31 >> 28)
    {
      v37 = v30;
      v39 = v29;
      v30 = WTF::fastMalloc((WTF *)0x10);
      v29 = v39;
      *(_QWORD *)v30 = v37;
      *(_DWORD *)(v30 + 8) = v31;
      v33 = 1;
    }
    else
    {
      v33 = v30;
      v30 = v31 << 36;
    }
    *(_QWORD *)(v9 + 32) = v30 | v33;
    *(_DWORD *)(v9 + 48) = v14;
    *(_QWORD *)(v9 + 40) = v13[1] | *v13;
    if (v29)
      WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)(v9 + 32) = v18;
    *(_DWORD *)(v9 + 48) = v14;
    *(_QWORD *)(v9 + 40) = v13[1] | *v13;
  }
  *(_BYTE *)(v9 + 52) = v15;
  *(_BYTE *)(v9 + 54) = v16;
  *(_BYTE *)(v9 + 53) = v17;
  *(_BYTE *)(v9 + 56) = v19;
  if (!v12 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITInByIdGenerator::JITInByIdGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::RegisterSetBuilder const&,JSC::CacheableIdentifier,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(_QWORD ***a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD ***v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;

  v8 = (_QWORD ***)*a1;
  v9 = *a2;
  v10 = (_QWORD *)***a1;
  v11 = *(*a1)[1];
  if ((v11 & 1) != 0)
  {
    v28 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v29 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v29 != 0x3FFFFFFF)
        ? (v30 = (_DWORD)v29 == -1)
        : (v30 = 1),
          v30))
    {
      v31 = 2;
    }
    else if (v29 >> 28)
    {
      v40 = (_QWORD *)***a1;
      v41 = WTF::fastMalloc((WTF *)0x10);
      v10 = v40;
      *(_QWORD *)v41 = v28;
      *(_DWORD *)(v41 + 8) = v29;
      v31 = 1;
      v28 = v41;
    }
    else
    {
      v31 = v28;
      v28 = v29 << 36;
    }
    v11 = v28 | v31;
  }
  v12 = v8[3];
  v13 = *(unsigned int *)v8[2];
  v14 = (uint64_t)*v8[4];
  v15 = *(_BYTE *)v8[5];
  v16 = *(_BYTE *)v8[6];
  v17 = *(_BYTE *)v8[7];
  if ((v11 & 1) != 0)
  {
    v32 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v33 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v33 != 0x3FFFFFFF)
        ? (v34 = (_DWORD)v33 == -1)
        : (v34 = 1),
          v34))
    {
      v35 = 2;
    }
    else if (v33 >> 28)
    {
      v46 = v13;
      v48 = v10;
      v44 = v12;
      v42 = WTF::fastMalloc((WTF *)0x10);
      v12 = v44;
      v13 = v46;
      v10 = v48;
      *(_QWORD *)v42 = v32;
      *(_DWORD *)(v42 + 8) = v33;
      v35 = 1;
      v32 = v42;
    }
    else
    {
      v35 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v32 = v33 << 36;
    }
    v19 = v32 | v35;
    if ((v19 & 1) != 0)
    {
      v36 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
      if ((v19 & 2) != 0
        || ((v37 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v37 != 0x3FFFFFFF)
          ? (v38 = (_DWORD)v37 == -1)
          : (v38 = 1),
            v38))
      {
        v39 = 2;
      }
      else if (v37 >> 28)
      {
        v43 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
        v47 = v13;
        v49 = v10;
        v45 = v12;
        v36 = WTF::fastMalloc((WTF *)0x10);
        v12 = v45;
        v13 = v47;
        v10 = v49;
        *(_QWORD *)v36 = v43;
        *(_DWORD *)(v36 + 8) = v37;
        v39 = 1;
      }
      else
      {
        v39 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
        v36 = v37 << 36;
      }
      v18 = 0;
      v20 = v36 | v39;
    }
    else
    {
      v18 = 1;
      v20 = v19;
    }
  }
  else
  {
    v18 = 1;
    v19 = v11;
    v20 = v11;
  }
  v50 = v20;
  JSC::JITInlineCacheGenerator::setUpStubInfoImpl<JSC::StructureStubInfo>((uint64_t *)v9, v10, 18, &v50, v13, v12, a7, a8);
  if ((v50 & 1) != 0 && (v50 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v50 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
  *(_QWORD *)(v9 + 16) = v14;
  *(_BYTE *)(v9 + 116) = v15;
  *(_BYTE *)(v9 + 117) = v16;
  *(_BYTE *)(v9 + 118) = -1;
  *(_BYTE *)(v9 + 120) = v17;
  if ((v18 & 1) == 0 && (v19 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v19 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITInByIdGenerator::JITInByIdGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::RegisterSetBuilder const&,JSC::CacheableIdentifier,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v8 = *a1;
  v9 = *a2;
  v10 = **(_QWORD **)(v8 + 8);
  if ((v10 & 1) != 0)
  {
    v21 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    if ((v10 & 2) != 0
      || ((v22 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v22 != 0x3FFFFFFF)
        ? (v23 = (_DWORD)v22 == -1)
        : (v23 = 1),
          v23))
    {
      v24 = 2;
    }
    else if (v22 >> 28)
    {
      v33 = *a2;
      v29 = WTF::fastMalloc((WTF *)0x10);
      v9 = v33;
      *(_QWORD *)v29 = v21;
      *(_DWORD *)(v29 + 8) = v22;
      v24 = 1;
      v21 = v29;
    }
    else
    {
      v24 = v21;
      v21 = v22 << 36;
    }
    v10 = v21 | v24;
    v11 = ((v21 | v24) & 1) == 0;
  }
  else
  {
    v11 = 1;
  }
  v12 = **(_QWORD **)(v8 + 32);
  v13 = v10;
  if (!v11)
  {
    v25 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    if ((v10 & 2) != 0
      || ((v26 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v26 != 0x3FFFFFFF)
        ? (v27 = (_DWORD)v26 == -1)
        : (v27 = 1),
          v27))
    {
      v28 = 2;
    }
    else if (v26 >> 28)
    {
      v32 = v12;
      v34 = v9;
      v30 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8);
      v31 = WTF::fastMalloc((WTF *)0x10);
      v12 = v32;
      v9 = v34;
      *(_QWORD *)v31 = v25;
      *(_DWORD *)(v31 + 8) = v30;
      v28 = 1;
      v25 = v31;
    }
    else
    {
      v28 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
      v25 = v26 << 36;
    }
    v13 = v25 | v28;
  }
  JSC::JITByIdGenerator::setUpStubInfoImpl<JSC::BaselineUnlinkedStructureStubInfo>(v9, v13, v12, a4, a5, a6, a7, a8);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
  if (!v11 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITInByIdGenerator::JITInByIdGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::RegisterSetBuilder const&,JSC::CacheableIdentifier,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;

  v2 = *a1;
  v3 = *a2;
  v4 = **(_QWORD **)(v2 + 8);
  if ((v4 & 1) != 0)
  {
    v21 = *(_QWORD *)(v4 & 0xFFFFFFFF8);
    if ((v4 & 2) != 0
      || ((v22 = *(unsigned int *)((v4 & 0xFFFFFFFF8) + 8), (_DWORD)v22 != 0x3FFFFFFF)
        ? (v23 = (_DWORD)v22 == -1)
        : (v23 = 1),
          v23))
    {
      v24 = 2;
    }
    else if (v22 >> 28)
    {
      v39 = *a2;
      v29 = WTF::fastMalloc((WTF *)0x10);
      v3 = v39;
      *(_QWORD *)v29 = v21;
      *(_DWORD *)(v29 + 8) = v22;
      v24 = 1;
      v21 = v29;
    }
    else
    {
      v24 = v21;
      v21 = v22 << 36;
    }
    v4 = v21 | v24;
    v5 = ((v21 | v24) & 1) == 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = *(_QWORD **)(v2 + 24);
  v7 = **(unsigned int **)(v2 + 16);
  v8 = **(_QWORD **)(v2 + 32);
  v9 = **(unsigned __int8 **)(v2 + 40);
  v10 = *(char **)(v2 + 56);
  v11 = **(unsigned __int8 **)(v2 + 48);
  v12 = v4;
  v13 = *v10;
  if (!v5)
  {
    v25 = *(_QWORD *)(v4 & 0xFFFFFFFF8);
    if ((v4 & 2) != 0
      || ((v26 = *(unsigned int *)((v4 & 0xFFFFFFFF8) + 8), (_DWORD)v26 != 0x3FFFFFFF)
        ? (v27 = (_DWORD)v26 == -1)
        : (v27 = 1),
          v27))
    {
      v28 = 2;
    }
    else if (v26 >> 28)
    {
      v40 = v3;
      v36 = v9;
      v37 = v6;
      v33 = v8;
      v34 = v7;
      v35 = v11;
      v38 = v13;
      v30 = *(_DWORD *)((v4 & 0xFFFFFFFF8) + 8);
      v31 = WTF::fastMalloc((WTF *)0x10);
      v11 = v35;
      v9 = v36;
      v8 = v33;
      v7 = v34;
      v6 = v37;
      v32 = v31;
      v3 = v40;
      *(_QWORD *)v32 = v25;
      *(_DWORD *)(v32 + 8) = v30;
      v28 = 1;
      v25 = v32;
      v13 = v38;
    }
    else
    {
      v28 = *(_QWORD *)(v4 & 0xFFFFFFFF8);
      v25 = v26 << 36;
    }
    v12 = v25 | v28;
  }
  JSC::JITByIdGenerator::setUpStubInfoImpl<JSC::DFG::UnlinkedStructureStubInfo>(v3, 0x12uLL, v12, v7, v6, v8, v9, v11, v13);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
  if (!v5 && (v4 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v4 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITInstanceOfGenerator::JITInstanceOfGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::RegisterSetBuilder const&,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,BOOL)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(_QWORD ***a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD ***v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD **v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;

  v8 = (_QWORD ***)*a1;
  v9 = *a2;
  v10 = (_QWORD *)***a1;
  v11 = *(*a1)[1];
  if ((v11 & 1) != 0)
  {
    v29 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v30 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v37 = (_QWORD *)***a1;
      v38 = *a1;
      v39 = WTF::fastMalloc((WTF *)0x10);
      v8 = (_QWORD ***)v38;
      v10 = v37;
      *(_QWORD *)v39 = v29;
      *(_DWORD *)(v39 + 8) = v30;
      v32 = 1;
      v29 = v39;
    }
    else
    {
      v32 = v29;
      v29 = v30 << 36;
    }
    v11 = v29 | v32;
    v12 = ((v29 | v32) & 1) == 0;
  }
  else
  {
    v12 = 1;
  }
  v13 = v8[3];
  v14 = *(unsigned int *)v8[2];
  v15 = *(_BYTE *)v8[4];
  v16 = *(_BYTE *)v8[5];
  v17 = *(_BYTE *)v8[6];
  v18 = *(_BYTE *)v8[7];
  v19 = (unsigned __int8 *)v8[8];
  v20 = v11;
  v21 = *v19;
  if (!v12)
  {
    v33 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v34 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v34 != 0x3FFFFFFF)
        ? (v35 = (_DWORD)v34 == -1)
        : (v35 = 1),
          v35))
    {
      v36 = 2;
    }
    else if (v34 >> 28)
    {
      v40 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v43 = v14;
      v44 = v10;
      v42 = v13;
      v41 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8);
      v33 = WTF::fastMalloc((WTF *)0x10);
      v13 = v42;
      v14 = v43;
      v10 = v44;
      *(_QWORD *)v33 = v40;
      *(_DWORD *)(v33 + 8) = v41;
      v36 = 1;
    }
    else
    {
      v36 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v33 = v34 << 36;
    }
    v20 = v33 | v36;
  }
  v45 = v20;
  JSC::JITInlineCacheGenerator::setUpStubInfoImpl<JSC::StructureStubInfo>((uint64_t *)v9, v10, 22, &v45, v14, v13, a7, a8);
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v22, v23, v24, v25, v26, v27, v28);
  *(_WORD *)(v9 + 129) = *(_WORD *)(v9 + 129) & 0xFFF7 | (8 * (v21 != 0));
  *(_BYTE *)(v9 + 116) = v16;
  *(_BYTE *)(v9 + 117) = v15;
  *(_BYTE *)(v9 + 118) = v17;
  *(_BYTE *)(v9 + 120) = v18;
  if (!v12 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, v22, v23, v24, v25, v26, v27, v28);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITInstanceOfGenerator::JITInstanceOfGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::RegisterSetBuilder const&,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,BOOL)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = *a1;
  v9 = *a2;
  v10 = **(_QWORD **)(*a1 + 8);
  if ((v10 & 1) == 0)
  {
    v11 = **(unsigned __int8 **)(v8 + 64);
LABEL_3:
    v12 = 1;
    v13 = v10;
    goto LABEL_4;
  }
  v15 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v16 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v16 != 0x3FFFFFFF)
      ? (v17 = (_DWORD)v16 == -1)
      : (v17 = 1),
        v17))
  {
    v18 = 2;
  }
  else if (v16 >> 28)
  {
    v23 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v23 = v15;
    *(_DWORD *)(v23 + 8) = v16;
    v18 = 1;
    v15 = v23;
  }
  else
  {
    v18 = v15;
    v15 = v16 << 36;
  }
  v10 = v15 | v18;
  v11 = **(unsigned __int8 **)(v8 + 64);
  if (((v15 | v18) & 1) == 0)
    goto LABEL_3;
  v19 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v20 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v20 != 0x3FFFFFFF)
      ? (v21 = (_DWORD)v20 == -1)
      : (v21 = 1),
        v21))
  {
    v22 = 2;
  }
  else if (v20 >> 28)
  {
    v24 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v19 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v19 = v24;
    *(_DWORD *)(v19 + 8) = v20;
    v22 = 1;
  }
  else
  {
    v22 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v19 = v20 << 36;
  }
  v12 = 0;
  v13 = v19 | v22;
LABEL_4:
  *(_BYTE *)v9 = 22;
  if ((v13 & 2) != 0)
  {
    *(_DWORD *)(v9 + 32) = -1;
    if ((v13 & 1) == 0)
      goto LABEL_7;
    v14 = v13 & 0xFFFFFFFF8;
  }
  else
  {
    if ((v13 & 1) == 0)
    {
      *(_DWORD *)(v9 + 32) = v13 >> 36;
      goto LABEL_7;
    }
    v14 = v13 & 0xFFFFFFFF8;
    *(_DWORD *)(v9 + 32) = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8);
  }
  if (v14)
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
LABEL_7:
  *(_BYTE *)(v9 + 1) = *(_BYTE *)(v9 + 1) & 0xF7 | (8 * (v11 != 0));
  if ((v12 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITInstanceOfGenerator::JITInstanceOfGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::RegisterSetBuilder const&,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,BOOL)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _QWORD *v12;
  int v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  char v44;

  v8 = *a1;
  v9 = *a2;
  v10 = **(_QWORD **)(*a1 + 8);
  if ((v10 & 1) != 0)
  {
    v21 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    if ((v10 & 2) != 0
      || ((v22 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v22 != 0x3FFFFFFF)
        ? (v23 = (_DWORD)v22 == -1)
        : (v23 = 1),
          v23))
    {
      v24 = 2;
    }
    else if (v22 >> 28)
    {
      v35 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v35 = v21;
      *(_DWORD *)(v35 + 8) = v22;
      v24 = 1;
      v21 = v35;
    }
    else
    {
      v24 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
      v21 = v22 << 36;
    }
    v10 = v21 | v24;
    v11 = ((v21 | v24) & 1) == 0;
  }
  else
  {
    v11 = 1;
  }
  v12 = *(_QWORD **)(v8 + 24);
  v13 = **(_DWORD **)(v8 + 16);
  v14 = **(_BYTE **)(v8 + 32);
  v15 = **(_BYTE **)(v8 + 40);
  v16 = **(_BYTE **)(v8 + 48);
  v17 = **(_BYTE **)(v8 + 56);
  v18 = v10;
  v19 = **(unsigned __int8 **)(v8 + 64);
  if (!v11)
  {
    v25 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    if ((v10 & 2) != 0
      || ((v26 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v26 != 0x3FFFFFFF)
        ? (v27 = (_DWORD)v26 == -1)
        : (v27 = 1),
          v27))
    {
      v28 = 2;
    }
    else if (v26 >> 28)
    {
      v43 = v14;
      v40 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
      v36 = WTF::fastMalloc((WTF *)0x10);
      v14 = v43;
      *(_QWORD *)v36 = v40;
      *(_DWORD *)(v36 + 8) = v26;
      v28 = 1;
      v25 = v36;
    }
    else
    {
      v28 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
      v25 = v26 << 36;
    }
    v18 = v25 | v28;
  }
  *(_BYTE *)v9 = 22;
  v20 = *(_QWORD *)(v9 + 32);
  if ((v20 & 1) != 0 && (v20 & 0xFFFFFFFF8) != 0)
  {
    v42 = v14;
    WTF::fastFree(v20 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v14 = v42;
  }
  if ((v18 & 1) != 0)
  {
    v29 = v18 & 0xFFFFFFFF8;
    v30 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
    if ((v18 & 2) != 0
      || ((v31 = *(unsigned int *)((v18 & 0xFFFFFFFF8) + 8), (_DWORD)v31 != 0x3FFFFFFF)
        ? (v32 = (_DWORD)v31 == -1)
        : (v32 = 1),
          v32))
    {
      v33 = 2;
    }
    else if (v31 >> 28)
    {
      v39 = v30;
      v41 = v29;
      v44 = v14;
      v37 = WTF::fastMalloc((WTF *)0x10);
      v14 = v44;
      v38 = v37;
      v29 = v41;
      *(_QWORD *)v38 = v39;
      *(_DWORD *)(v38 + 8) = v31;
      v33 = 1;
      v30 = v38;
    }
    else
    {
      v33 = v30;
      v30 = v31 << 36;
    }
    *(_QWORD *)(v9 + 32) = v30 | v33;
    *(_DWORD *)(v9 + 48) = v13;
    *(_QWORD *)(v9 + 40) = v12[1] | *v12;
    if (v29)
    {
      v34 = v14;
      WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
      v14 = v34;
    }
  }
  else
  {
    *(_QWORD *)(v9 + 32) = v18;
    *(_DWORD *)(v9 + 48) = v13;
    *(_QWORD *)(v9 + 40) = v12[1] | *v12;
  }
  *(_BYTE *)(v9 + 1) = *(_BYTE *)(v9 + 1) & 0xF7 | (8 * (v19 != 0));
  *(_BYTE *)(v9 + 52) = v15;
  *(_BYTE *)(v9 + 53) = v14;
  *(_BYTE *)(v9 + 54) = v16;
  *(_BYTE *)(v9 + 56) = v17;
  if (!v11 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITGetByValGenerator::JITGetByValGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::AccessType,JSC::RegisterSetBuilder const&,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(_QWORD ***a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD ***v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char *v20;
  uint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  _QWORD *v38;
  char v39;
  _QWORD **v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;

  v8 = (_QWORD ***)*a1;
  v9 = *a2;
  v10 = (_QWORD *)***a1;
  v11 = *(_BYTE *)(*a1)[1];
  v12 = *(*a1)[2];
  if ((v12 & 1) != 0)
  {
    v30 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v31 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v31 != 0x3FFFFFFF)
        ? (v32 = (_DWORD)v31 == -1)
        : (v32 = 1),
          v32))
    {
      v33 = 2;
    }
    else if (v31 >> 28)
    {
      v38 = (_QWORD *)***a1;
      v39 = *(_BYTE *)(*a1)[1];
      v40 = *a1;
      v41 = WTF::fastMalloc((WTF *)0x10);
      v8 = (_QWORD ***)v40;
      v11 = v39;
      v10 = v38;
      *(_QWORD *)v41 = v30;
      *(_DWORD *)(v41 + 8) = v31;
      v33 = 1;
      v30 = v41;
    }
    else
    {
      v33 = v30;
      v30 = v31 << 36;
    }
    v12 = v30 | v33;
    v13 = ((v30 | v33) & 1) == 0;
  }
  else
  {
    v13 = 1;
  }
  v14 = v8[4];
  v15 = *(unsigned int *)v8[3];
  v16 = *(_BYTE *)v8[5];
  v17 = *(_BYTE *)v8[6];
  v18 = *(_BYTE *)v8[7];
  v19 = *(_BYTE *)v8[8];
  v20 = (char *)v8[9];
  v21 = v12;
  v22 = *v20;
  if (!v13)
  {
    v34 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v35 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v35 != 0x3FFFFFFF)
        ? (v36 = (_DWORD)v35 == -1)
        : (v36 = 1),
          v36))
    {
      v37 = 2;
    }
    else if (v35 >> 28)
    {
      v42 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v46 = v15;
      v47 = v10;
      v45 = v14;
      v44 = v11;
      v43 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8);
      v34 = WTF::fastMalloc((WTF *)0x10);
      v11 = v44;
      v14 = v45;
      v15 = v46;
      v10 = v47;
      *(_QWORD *)v34 = v42;
      *(_DWORD *)(v34 + 8) = v43;
      v37 = 1;
    }
    else
    {
      v37 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v34 = v35 << 36;
    }
    v21 = v34 | v37;
  }
  v48 = v21;
  JSC::JITInlineCacheGenerator::setUpStubInfoImpl<JSC::StructureStubInfo>((uint64_t *)v9, v10, v11, &v48, v15, v14, a7, a8);
  if ((v48 & 1) != 0 && (v48 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v48 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
  *(_BYTE *)(v9 + 116) = v16;
  *(_BYTE *)(v9 + 118) = v17;
  *(_BYTE *)(v9 + 117) = v18;
  *(_BYTE *)(v9 + 120) = v22;
  *(_BYTE *)(v9 + 121) = v19;
  if (!v13 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITGetByValGenerator::JITGetByValGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::AccessType,JSC::RegisterSetBuilder const&,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v8 = *a2;
  v9 = **(_BYTE **)(*(_QWORD *)a1 + 8);
  v10 = **(_QWORD **)(*(_QWORD *)a1 + 16);
  if ((v10 & 1) == 0)
    goto LABEL_2;
  v14 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v15 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v15 != 0x3FFFFFFF)
      ? (v16 = (_DWORD)v15 == -1)
      : (v16 = 1),
        v16))
  {
    v17 = 2;
  }
  else if (v15 >> 28)
  {
    v26 = *a2;
    v24 = **(_BYTE **)(*(_QWORD *)a1 + 8);
    v22 = WTF::fastMalloc((WTF *)0x10);
    v9 = v24;
    v8 = v26;
    *(_QWORD *)v22 = v14;
    *(_DWORD *)(v22 + 8) = v15;
    v17 = 1;
    v14 = v22;
  }
  else
  {
    v17 = v14;
    v14 = v15 << 36;
  }
  v10 = v14 | v17;
  if (((v14 | v17) & 1) != 0)
  {
    v18 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    if ((v10 & 2) != 0
      || ((v19 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v19 != 0x3FFFFFFF)
        ? (v20 = (_DWORD)v19 == -1)
        : (v20 = 1),
          v20))
    {
      v21 = 2;
    }
    else if (v19 >> 28)
    {
      v23 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
      v27 = v8;
      v25 = v9;
      v18 = WTF::fastMalloc((WTF *)0x10);
      v9 = v25;
      v8 = v27;
      *(_QWORD *)v18 = v23;
      *(_DWORD *)(v18 + 8) = v19;
      v21 = 1;
    }
    else
    {
      v21 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
      v18 = v19 << 36;
    }
    v11 = 0;
    v12 = v18 | v21;
  }
  else
  {
LABEL_2:
    v11 = 1;
    v12 = v10;
  }
  *(_BYTE *)v8 = v9;
  if ((v12 & 2) != 0)
  {
    *(_DWORD *)(v8 + 32) = -1;
    if ((v12 & 1) == 0)
      goto LABEL_6;
    v13 = v12 & 0xFFFFFFFF8;
  }
  else
  {
    if ((v12 & 1) == 0)
    {
      *(_DWORD *)(v8 + 32) = v12 >> 36;
      goto LABEL_6;
    }
    v13 = v12 & 0xFFFFFFFF8;
    *(_DWORD *)(v8 + 32) = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8);
  }
  if (v13)
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
LABEL_6:
  if ((v11 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITGetByValGenerator::JITGetByValGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::AccessType,JSC::RegisterSetBuilder const&,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;
  int v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v39;

  v8 = *a1;
  v9 = *a2;
  v10 = **(_BYTE **)(*a1 + 8);
  v11 = **(_QWORD **)(*a1 + 16);
  if ((v11 & 1) != 0)
  {
    v21 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v22 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v22 != 0x3FFFFFFF)
        ? (v23 = (_DWORD)v22 == -1)
        : (v23 = 1),
          v23))
    {
      v24 = 2;
    }
    else if (v22 >> 28)
    {
      v34 = **(_BYTE **)(*a1 + 8);
      v35 = WTF::fastMalloc((WTF *)0x10);
      v10 = v34;
      *(_QWORD *)v35 = v21;
      *(_DWORD *)(v35 + 8) = v22;
      v24 = 1;
      v21 = v35;
    }
    else
    {
      v24 = v21;
      v21 = v22 << 36;
    }
    v11 = v21 | v24;
    v12 = ((v21 | v24) & 1) == 0;
  }
  else
  {
    v12 = 1;
  }
  v13 = *(_QWORD **)(v8 + 32);
  v14 = **(_DWORD **)(v8 + 24);
  v15 = **(_BYTE **)(v8 + 40);
  v16 = **(_BYTE **)(v8 + 48);
  v17 = **(_BYTE **)(v8 + 56);
  v18 = v11;
  v19 = **(_BYTE **)(v8 + 72);
  if (!v12)
  {
    v25 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v26 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v26 != 0x3FFFFFFF)
        ? (v27 = (_DWORD)v26 == -1)
        : (v27 = 1),
          v27))
    {
      v28 = 2;
    }
    else if (v26 >> 28)
    {
      v36 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v38 = v10;
      v25 = WTF::fastMalloc((WTF *)0x10);
      v10 = v38;
      *(_QWORD *)v25 = v36;
      *(_DWORD *)(v25 + 8) = v26;
      v28 = 1;
    }
    else
    {
      v28 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v25 = v26 << 36;
    }
    v18 = v25 | v28;
  }
  *(_BYTE *)v9 = v10;
  v20 = *(_QWORD *)(v9 + 32);
  if ((v20 & 1) != 0 && (v20 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v20 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if ((v18 & 1) != 0)
  {
    v29 = v18 & 0xFFFFFFFF8;
    v30 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
    if ((v18 & 2) != 0
      || ((v31 = *(unsigned int *)((v18 & 0xFFFFFFFF8) + 8), (_DWORD)v31 != 0x3FFFFFFF)
        ? (v32 = (_DWORD)v31 == -1)
        : (v32 = 1),
          v32))
    {
      v33 = 2;
    }
    else if (v31 >> 28)
    {
      v37 = v30;
      v39 = v29;
      v30 = WTF::fastMalloc((WTF *)0x10);
      v29 = v39;
      *(_QWORD *)v30 = v37;
      *(_DWORD *)(v30 + 8) = v31;
      v33 = 1;
    }
    else
    {
      v33 = v30;
      v30 = v31 << 36;
    }
    *(_QWORD *)(v9 + 32) = v30 | v33;
    *(_DWORD *)(v9 + 48) = v14;
    *(_QWORD *)(v9 + 40) = v13[1] | *v13;
    if (v29)
      WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)(v9 + 32) = v18;
    *(_DWORD *)(v9 + 48) = v14;
    *(_QWORD *)(v9 + 40) = v13[1] | *v13;
  }
  *(_BYTE *)(v9 + 52) = v15;
  *(_BYTE *)(v9 + 54) = v16;
  *(_BYTE *)(v9 + 53) = v17;
  *(_BYTE *)(v9 + 56) = v19;
  if (!v12 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITGetByValWithThisGenerator::JITGetByValWithThisGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::AccessType,JSC::RegisterSetBuilder const&,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(_QWORD ***a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD ***v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char *v20;
  char v21;
  uint64_t v22;
  char v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  _QWORD *v39;
  char v40;
  _QWORD **v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;

  v8 = (_QWORD ***)*a1;
  v9 = *a2;
  v10 = (_QWORD *)***a1;
  v11 = *(_BYTE *)(*a1)[1];
  v12 = *(*a1)[2];
  if ((v12 & 1) != 0)
  {
    v31 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v32 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v32 != 0x3FFFFFFF)
        ? (v33 = (_DWORD)v32 == -1)
        : (v33 = 1),
          v33))
    {
      v34 = 2;
    }
    else if (v32 >> 28)
    {
      v39 = (_QWORD *)***a1;
      v40 = *(_BYTE *)(*a1)[1];
      v41 = *a1;
      v42 = WTF::fastMalloc((WTF *)0x10);
      v8 = (_QWORD ***)v41;
      v11 = v40;
      v10 = v39;
      *(_QWORD *)v42 = v31;
      *(_DWORD *)(v42 + 8) = v32;
      v34 = 1;
      v31 = v42;
    }
    else
    {
      v34 = v31;
      v31 = v32 << 36;
    }
    v12 = v31 | v34;
    v13 = ((v31 | v34) & 1) == 0;
  }
  else
  {
    v13 = 1;
  }
  v14 = v8[4];
  v15 = *(unsigned int *)v8[3];
  v16 = *(_BYTE *)v8[5];
  v17 = *(_BYTE *)v8[6];
  v18 = *(_BYTE *)v8[7];
  v19 = *(_BYTE *)v8[8];
  v20 = (char *)v8[10];
  v21 = *(_BYTE *)v8[9];
  v22 = v12;
  v23 = *v20;
  if (!v13)
  {
    v35 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v36 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v36 != 0x3FFFFFFF)
        ? (v37 = (_DWORD)v36 == -1)
        : (v37 = 1),
          v37))
    {
      v38 = 2;
    }
    else if (v36 >> 28)
    {
      v43 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v46 = v15;
      v47 = v10;
      v45 = v14;
      v44 = v11;
      v35 = WTF::fastMalloc((WTF *)0x10);
      v11 = v44;
      v14 = v45;
      v15 = v46;
      v10 = v47;
      *(_QWORD *)v35 = v43;
      *(_DWORD *)(v35 + 8) = v36;
      v38 = 1;
    }
    else
    {
      v38 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v35 = v36 << 36;
    }
    v22 = v35 | v38;
  }
  v48 = v22;
  JSC::JITInlineCacheGenerator::setUpStubInfoImpl<JSC::StructureStubInfo>((uint64_t *)v9, v10, v11, &v48, v15, v14, a7, a8);
  if ((v48 & 1) != 0 && (v48 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v48 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
  *(_BYTE *)(v9 + 116) = v16;
  *(_BYTE *)(v9 + 118) = v18;
  *(_BYTE *)(v9 + 117) = v19;
  *(_BYTE *)(v9 + 119) = v17;
  *(_BYTE *)(v9 + 120) = v23;
  *(_BYTE *)(v9 + 121) = v21;
  if (!v13 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITGetByValWithThisGenerator::JITGetByValWithThisGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::AccessType,JSC::RegisterSetBuilder const&,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v2 = *a1;
  v3 = *a2;
  v4 = *(uint64_t **)(v2 + 16);
  v5 = **(_BYTE **)(v2 + 8);
  v6 = *v4;
  if ((v6 & 1) != 0)
  {
    v14 = *(_QWORD *)(v6 & 0xFFFFFFFF8);
    if ((v6 & 2) != 0
      || ((v15 = *(unsigned int *)((v6 & 0xFFFFFFFF8) + 8), (_DWORD)v15 != 0x3FFFFFFF)
        ? (v16 = (_DWORD)v15 == -1)
        : (v16 = 1),
          v16))
    {
      v17 = 2;
    }
    else if (v15 >> 28)
    {
      v21 = *a2;
      v22 = v5;
      v18 = v14;
      v19 = v15;
      v20 = WTF::fastMalloc((WTF *)0x10);
      v3 = v21;
      *(_QWORD *)v20 = v18;
      *(_DWORD *)(v20 + 8) = v19;
      v17 = 1;
      v14 = v20;
      v5 = v22;
    }
    else
    {
      v17 = v14;
      v14 = v15 << 36;
    }
    v6 = v14 | v17;
  }
  v23 = v6;
  JSC::JITGetByValWithThisGenerator::setUpStubInfo<JSC::BaselineUnlinkedStructureStubInfo>(v3, v5, (JSC::CodeOrigin *)&v23);
  if ((v23 & 1) != 0 && (v23 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v23 & 0xFFFFFFFF8, v7, v8, v9, v10, v11, v12, v13);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITGetByValWithThisGenerator::JITGetByValWithThisGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::AccessType,JSC::RegisterSetBuilder const&,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;
  int v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;

  v8 = *a1;
  v9 = *a2;
  v10 = **(_BYTE **)(*a1 + 8);
  v11 = **(_QWORD **)(*a1 + 16);
  if ((v11 & 1) != 0)
  {
    v22 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v23 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v23 != 0x3FFFFFFF)
        ? (v24 = (_DWORD)v23 == -1)
        : (v24 = 1),
          v24))
    {
      v25 = 2;
    }
    else if (v23 >> 28)
    {
      v38 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v38 = v22;
      *(_DWORD *)(v38 + 8) = v23;
      v25 = 1;
      v22 = v38;
    }
    else
    {
      v25 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v22 = v23 << 36;
    }
    v11 = v22 | v25;
    v12 = ((v22 | v25) & 1) == 0;
  }
  else
  {
    v12 = 1;
  }
  v13 = *(_QWORD **)(v8 + 32);
  v14 = **(_DWORD **)(v8 + 24);
  v15 = **(_BYTE **)(v8 + 40);
  v16 = **(_BYTE **)(v8 + 48);
  v17 = **(_BYTE **)(v8 + 56);
  v18 = **(_BYTE **)(v8 + 64);
  v19 = v11;
  v20 = **(_BYTE **)(v8 + 80);
  if (!v12)
  {
    v26 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v27 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v27 != 0x3FFFFFFF)
        ? (v28 = (_DWORD)v27 == -1)
        : (v28 = 1),
          v28))
    {
      v29 = 2;
    }
    else if (v27 >> 28)
    {
      v44 = v15;
      v47 = v16;
      v42 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v39 = WTF::fastMalloc((WTF *)0x10);
      v15 = v44;
      v16 = v47;
      *(_QWORD *)v39 = v42;
      *(_DWORD *)(v39 + 8) = v27;
      v29 = 1;
      v26 = v39;
    }
    else
    {
      v29 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v26 = v27 << 36;
    }
    v19 = v26 | v29;
  }
  *(_BYTE *)v9 = v10;
  v21 = *(_QWORD *)(v9 + 32);
  if ((v21 & 1) != 0 && (v21 & 0xFFFFFFFF8) != 0)
  {
    v46 = v16;
    v30 = v15;
    WTF::fastFree(v21 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v15 = v30;
    v16 = v46;
  }
  if ((v19 & 1) != 0)
  {
    v31 = v19 & 0xFFFFFFFF8;
    v32 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v33 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v33 != 0x3FFFFFFF)
        ? (v34 = (_DWORD)v33 == -1)
        : (v34 = 1),
          v34))
    {
      v35 = 2;
    }
    else if (v33 >> 28)
    {
      v43 = v31;
      v45 = v15;
      v48 = v16;
      v40 = WTF::fastMalloc((WTF *)0x10);
      v15 = v45;
      v16 = v48;
      v41 = v40;
      v31 = v43;
      *(_QWORD *)v41 = v32;
      *(_DWORD *)(v41 + 8) = v33;
      v35 = 1;
      v32 = v41;
    }
    else
    {
      v35 = v32;
      v32 = v33 << 36;
    }
    *(_QWORD *)(v9 + 32) = v32 | v35;
    *(_DWORD *)(v9 + 48) = v14;
    *(_QWORD *)(v9 + 40) = v13[1] | *v13;
    if (v31)
    {
      v36 = v16;
      v37 = v15;
      WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
      v15 = v37;
      v16 = v36;
    }
  }
  else
  {
    *(_QWORD *)(v9 + 32) = v19;
    *(_DWORD *)(v9 + 48) = v14;
    *(_QWORD *)(v9 + 40) = v13[1] | *v13;
  }
  *(_BYTE *)(v9 + 52) = v15;
  *(_BYTE *)(v9 + 54) = v17;
  *(_BYTE *)(v9 + 53) = v18;
  *(_BYTE *)(v9 + 55) = v16;
  *(_BYTE *)(v9 + 56) = v20;
  if (!v12 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::JITGetByValWithThisGenerator::setUpStubInfo<JSC::BaselineUnlinkedStructureStubInfo>(uint64_t a1, char a2, JSC::CodeOrigin *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  JSC::CodeOrigin::CodeOrigin((uint64_t *)&v14, a3);
  *(_BYTE *)a1 = a2;
  v12 = v14;
  if ((v14 & 2) != 0)
  {
    *(_DWORD *)(a1 + 32) = -1;
    if ((v12 & 1) == 0)
      return;
    v13 = v12 & 0xFFFFFFFF8;
  }
  else
  {
    if ((v14 & 1) == 0)
    {
      *(_DWORD *)(a1 + 32) = v14 >> 36;
      return;
    }
    v13 = v14 & 0xFFFFFFFF8;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)((v14 & 0xFFFFFFFF8) + 8);
  }
  if (v13)
    WTF::fastFree(v13, v5, v6, v7, v8, v9, v10, v11);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITPutByValGenerator::JITPutByValGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::AccessType,JSC::RegisterSetBuilder const&,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(_QWORD ***a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD ***v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char *v20;
  uint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  _QWORD *v38;
  char v39;
  _QWORD **v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;

  v8 = (_QWORD ***)*a1;
  v9 = *a2;
  v10 = (_QWORD *)***a1;
  v11 = *(_BYTE *)(*a1)[1];
  v12 = *(*a1)[2];
  if ((v12 & 1) != 0)
  {
    v30 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v31 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v31 != 0x3FFFFFFF)
        ? (v32 = (_DWORD)v31 == -1)
        : (v32 = 1),
          v32))
    {
      v33 = 2;
    }
    else if (v31 >> 28)
    {
      v38 = (_QWORD *)***a1;
      v39 = *(_BYTE *)(*a1)[1];
      v40 = *a1;
      v41 = WTF::fastMalloc((WTF *)0x10);
      v8 = (_QWORD ***)v40;
      v11 = v39;
      v10 = v38;
      *(_QWORD *)v41 = v30;
      *(_DWORD *)(v41 + 8) = v31;
      v33 = 1;
      v30 = v41;
    }
    else
    {
      v33 = v30;
      v30 = v31 << 36;
    }
    v12 = v30 | v33;
    v13 = ((v30 | v33) & 1) == 0;
  }
  else
  {
    v13 = 1;
  }
  v14 = v8[4];
  v15 = *(unsigned int *)v8[3];
  v16 = *(_BYTE *)v8[5];
  v17 = *(_BYTE *)v8[6];
  v18 = *(_BYTE *)v8[7];
  v19 = *(_BYTE *)v8[8];
  v20 = (char *)v8[9];
  v21 = v12;
  v22 = *v20;
  if (!v13)
  {
    v34 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v35 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v35 != 0x3FFFFFFF)
        ? (v36 = (_DWORD)v35 == -1)
        : (v36 = 1),
          v36))
    {
      v37 = 2;
    }
    else if (v35 >> 28)
    {
      v42 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v46 = v15;
      v47 = v10;
      v45 = v14;
      v44 = v11;
      v43 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8);
      v34 = WTF::fastMalloc((WTF *)0x10);
      v11 = v44;
      v14 = v45;
      v15 = v46;
      v10 = v47;
      *(_QWORD *)v34 = v42;
      *(_DWORD *)(v34 + 8) = v43;
      v37 = 1;
    }
    else
    {
      v37 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v34 = v35 << 36;
    }
    v21 = v34 | v37;
  }
  v48 = v21;
  JSC::JITInlineCacheGenerator::setUpStubInfoImpl<JSC::StructureStubInfo>((uint64_t *)v9, v10, v11, &v48, v15, v14, a7, a8);
  if ((v48 & 1) != 0 && (v48 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v48 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
  *(_BYTE *)(v9 + 116) = v16;
  *(_BYTE *)(v9 + 118) = v17;
  *(_BYTE *)(v9 + 117) = v18;
  *(_BYTE *)(v9 + 120) = v22;
  *(_BYTE *)(v9 + 121) = v19;
  if (!v13 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITPutByValGenerator::JITPutByValGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::AccessType,JSC::RegisterSetBuilder const&,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v8 = *a2;
  v9 = **(_BYTE **)(*(_QWORD *)a1 + 8);
  v10 = **(_QWORD **)(*(_QWORD *)a1 + 16);
  if ((v10 & 1) == 0)
    goto LABEL_2;
  v14 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v15 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v15 != 0x3FFFFFFF)
      ? (v16 = (_DWORD)v15 == -1)
      : (v16 = 1),
        v16))
  {
    v17 = 2;
  }
  else if (v15 >> 28)
  {
    v26 = *a2;
    v24 = **(_BYTE **)(*(_QWORD *)a1 + 8);
    v22 = WTF::fastMalloc((WTF *)0x10);
    v9 = v24;
    v8 = v26;
    *(_QWORD *)v22 = v14;
    *(_DWORD *)(v22 + 8) = v15;
    v17 = 1;
    v14 = v22;
  }
  else
  {
    v17 = v14;
    v14 = v15 << 36;
  }
  v10 = v14 | v17;
  if (((v14 | v17) & 1) != 0)
  {
    v18 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    if ((v10 & 2) != 0
      || ((v19 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v19 != 0x3FFFFFFF)
        ? (v20 = (_DWORD)v19 == -1)
        : (v20 = 1),
          v20))
    {
      v21 = 2;
    }
    else if (v19 >> 28)
    {
      v23 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
      v27 = v8;
      v25 = v9;
      v18 = WTF::fastMalloc((WTF *)0x10);
      v9 = v25;
      v8 = v27;
      *(_QWORD *)v18 = v23;
      *(_DWORD *)(v18 + 8) = v19;
      v21 = 1;
    }
    else
    {
      v21 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
      v18 = v19 << 36;
    }
    v11 = 0;
    v12 = v18 | v21;
  }
  else
  {
LABEL_2:
    v11 = 1;
    v12 = v10;
  }
  *(_BYTE *)v8 = v9;
  if ((v12 & 2) != 0)
  {
    *(_DWORD *)(v8 + 32) = -1;
    if ((v12 & 1) == 0)
      goto LABEL_6;
    v13 = v12 & 0xFFFFFFFF8;
  }
  else
  {
    if ((v12 & 1) == 0)
    {
      *(_DWORD *)(v8 + 32) = v12 >> 36;
      goto LABEL_6;
    }
    v13 = v12 & 0xFFFFFFFF8;
    *(_DWORD *)(v8 + 32) = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8);
  }
  if (v13)
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
LABEL_6:
  if ((v11 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITPutByValGenerator::JITPutByValGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::AccessType,JSC::RegisterSetBuilder const&,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;
  int v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v39;

  v8 = *a1;
  v9 = *a2;
  v10 = **(_BYTE **)(*a1 + 8);
  v11 = **(_QWORD **)(*a1 + 16);
  if ((v11 & 1) != 0)
  {
    v21 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v22 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v22 != 0x3FFFFFFF)
        ? (v23 = (_DWORD)v22 == -1)
        : (v23 = 1),
          v23))
    {
      v24 = 2;
    }
    else if (v22 >> 28)
    {
      v34 = **(_BYTE **)(*a1 + 8);
      v35 = WTF::fastMalloc((WTF *)0x10);
      v10 = v34;
      *(_QWORD *)v35 = v21;
      *(_DWORD *)(v35 + 8) = v22;
      v24 = 1;
      v21 = v35;
    }
    else
    {
      v24 = v21;
      v21 = v22 << 36;
    }
    v11 = v21 | v24;
    v12 = ((v21 | v24) & 1) == 0;
  }
  else
  {
    v12 = 1;
  }
  v13 = *(_QWORD **)(v8 + 32);
  v14 = **(_DWORD **)(v8 + 24);
  v15 = **(_BYTE **)(v8 + 40);
  v16 = **(_BYTE **)(v8 + 48);
  v17 = **(_BYTE **)(v8 + 56);
  v18 = v11;
  v19 = **(_BYTE **)(v8 + 72);
  if (!v12)
  {
    v25 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v26 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v26 != 0x3FFFFFFF)
        ? (v27 = (_DWORD)v26 == -1)
        : (v27 = 1),
          v27))
    {
      v28 = 2;
    }
    else if (v26 >> 28)
    {
      v36 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v38 = v10;
      v25 = WTF::fastMalloc((WTF *)0x10);
      v10 = v38;
      *(_QWORD *)v25 = v36;
      *(_DWORD *)(v25 + 8) = v26;
      v28 = 1;
    }
    else
    {
      v28 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v25 = v26 << 36;
    }
    v18 = v25 | v28;
  }
  *(_BYTE *)v9 = v10;
  v20 = *(_QWORD *)(v9 + 32);
  if ((v20 & 1) != 0 && (v20 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v20 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if ((v18 & 1) != 0)
  {
    v29 = v18 & 0xFFFFFFFF8;
    v30 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
    if ((v18 & 2) != 0
      || ((v31 = *(unsigned int *)((v18 & 0xFFFFFFFF8) + 8), (_DWORD)v31 != 0x3FFFFFFF)
        ? (v32 = (_DWORD)v31 == -1)
        : (v32 = 1),
          v32))
    {
      v33 = 2;
    }
    else if (v31 >> 28)
    {
      v37 = v30;
      v39 = v29;
      v30 = WTF::fastMalloc((WTF *)0x10);
      v29 = v39;
      *(_QWORD *)v30 = v37;
      *(_DWORD *)(v30 + 8) = v31;
      v33 = 1;
    }
    else
    {
      v33 = v30;
      v30 = v31 << 36;
    }
    *(_QWORD *)(v9 + 32) = v30 | v33;
    *(_DWORD *)(v9 + 48) = v14;
    *(_QWORD *)(v9 + 40) = v13[1] | *v13;
    if (v29)
      WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)(v9 + 32) = v18;
    *(_DWORD *)(v9 + 48) = v14;
    *(_QWORD *)(v9 + 40) = v13[1] | *v13;
  }
  *(_BYTE *)(v9 + 52) = v15;
  *(_BYTE *)(v9 + 54) = v16;
  *(_BYTE *)(v9 + 53) = v17;
  *(_BYTE *)(v9 + 56) = v19;
  if (!v12 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITPrivateBrandAccessGenerator::JITPrivateBrandAccessGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::AccessType,JSC::RegisterSetBuilder const&,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(_QWORD ***a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD ***v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  v8 = (_QWORD ***)*a1;
  v9 = *a2;
  v10 = (_QWORD *)***a1;
  v11 = *(_BYTE *)(*a1)[1];
  v12 = *(*a1)[2];
  if ((v12 & 1) != 0)
  {
    v27 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v28 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v28 != 0x3FFFFFFF)
        ? (v29 = (_DWORD)v28 == -1)
        : (v29 = 1),
          v29))
    {
      v30 = 2;
    }
    else if (v28 >> 28)
    {
      v35 = (_QWORD *)***a1;
      v36 = *(_BYTE *)(*a1)[1];
      v37 = WTF::fastMalloc((WTF *)0x10);
      v11 = v36;
      v10 = v35;
      *(_QWORD *)v37 = v27;
      *(_DWORD *)(v37 + 8) = v28;
      v30 = 1;
      v27 = v37;
    }
    else
    {
      v30 = v27;
      v27 = v28 << 36;
    }
    v12 = v27 | v30;
    v13 = ((v27 | v30) & 1) == 0;
  }
  else
  {
    v13 = 1;
  }
  v14 = v8[4];
  v15 = *(unsigned int *)v8[3];
  v16 = *(_BYTE *)v8[5];
  v17 = *(_BYTE *)v8[6];
  v18 = *(_BYTE *)v8[7];
  v19 = v12;
  if (!v13)
  {
    v31 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v32 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v32 != 0x3FFFFFFF)
        ? (v33 = (_DWORD)v32 == -1)
        : (v33 = 1),
          v33))
    {
      v34 = 2;
    }
    else if (v32 >> 28)
    {
      v38 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v42 = v15;
      v43 = v10;
      v41 = v14;
      v40 = v11;
      v39 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8);
      v31 = WTF::fastMalloc((WTF *)0x10);
      v11 = v40;
      v14 = v41;
      v15 = v42;
      v10 = v43;
      *(_QWORD *)v31 = v38;
      *(_DWORD *)(v31 + 8) = v39;
      v34 = 1;
    }
    else
    {
      v34 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v31 = v32 << 36;
    }
    v19 = v31 | v34;
  }
  v44 = v19;
  JSC::JITInlineCacheGenerator::setUpStubInfoImpl<JSC::StructureStubInfo>((uint64_t *)v9, v10, v11, &v44, v15, v14, a7, a8);
  if ((v44 & 1) != 0 && (v44 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v44 & 0xFFFFFFFF8, v20, v21, v22, v23, v24, v25, v26);
  *(_BYTE *)(v9 + 116) = v16;
  *(_BYTE *)(v9 + 118) = v17;
  *(_BYTE *)(v9 + 117) = -1;
  *(_BYTE *)(v9 + 120) = v18;
  if (!v13 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, v20, v21, v22, v23, v24, v25, v26);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITPrivateBrandAccessGenerator::JITPrivateBrandAccessGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::AccessType,JSC::RegisterSetBuilder const&,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v2 = *a1;
  v3 = *a2;
  v4 = *(uint64_t **)(v2 + 16);
  v5 = **(_BYTE **)(v2 + 8);
  v6 = *v4;
  if ((v6 & 1) != 0)
  {
    v14 = *(_QWORD *)(v6 & 0xFFFFFFFF8);
    if ((v6 & 2) != 0
      || ((v15 = *(unsigned int *)((v6 & 0xFFFFFFFF8) + 8), (_DWORD)v15 != 0x3FFFFFFF)
        ? (v16 = (_DWORD)v15 == -1)
        : (v16 = 1),
          v16))
    {
      v17 = 2;
    }
    else if (v15 >> 28)
    {
      v21 = *a2;
      v22 = v5;
      v18 = v14;
      v19 = v15;
      v20 = WTF::fastMalloc((WTF *)0x10);
      v3 = v21;
      *(_QWORD *)v20 = v18;
      *(_DWORD *)(v20 + 8) = v19;
      v17 = 1;
      v14 = v20;
      v5 = v22;
    }
    else
    {
      v17 = v14;
      v14 = v15 << 36;
    }
    v6 = v14 | v17;
  }
  v23 = v6;
  JSC::JITGetByValWithThisGenerator::setUpStubInfo<JSC::BaselineUnlinkedStructureStubInfo>(v3, v5, (JSC::CodeOrigin *)&v23);
  if ((v23 & 1) != 0 && (v23 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v23 & 0xFFFFFFFF8, v7, v8, v9, v10, v11, v12, v13);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::JITPrivateBrandAccessGenerator::JITPrivateBrandAccessGenerator(JSC::CodeBlock *,std::variant<JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *>,JSC::JITType,JSC::CodeOrigin,JSC::CallSiteIndex,JSC::AccessType,JSC::RegisterSetBuilder const&,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;
  int v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;

  v8 = *a1;
  v9 = *a2;
  v10 = **(_BYTE **)(*a1 + 8);
  v11 = **(_QWORD **)(*a1 + 16);
  if ((v11 & 1) != 0)
  {
    v20 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v21 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v21 != 0x3FFFFFFF)
        ? (v22 = (_DWORD)v21 == -1)
        : (v22 = 1),
          v22))
    {
      v23 = 2;
    }
    else if (v21 >> 28)
    {
      v33 = **(_BYTE **)(*a1 + 8);
      v34 = WTF::fastMalloc((WTF *)0x10);
      v10 = v33;
      *(_QWORD *)v34 = v20;
      *(_DWORD *)(v34 + 8) = v21;
      v23 = 1;
      v20 = v34;
    }
    else
    {
      v23 = v20;
      v20 = v21 << 36;
    }
    v11 = v20 | v23;
    v12 = ((v20 | v23) & 1) == 0;
  }
  else
  {
    v12 = 1;
  }
  v13 = *(_QWORD **)(v8 + 32);
  v14 = **(_DWORD **)(v8 + 24);
  v15 = **(_BYTE **)(v8 + 40);
  v16 = **(_BYTE **)(v8 + 48);
  v17 = **(_BYTE **)(v8 + 56);
  v18 = v11;
  if (!v12)
  {
    v24 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v25 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v25 != 0x3FFFFFFF)
        ? (v26 = (_DWORD)v25 == -1)
        : (v26 = 1),
          v26))
    {
      v27 = 2;
    }
    else if (v25 >> 28)
    {
      v35 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v37 = v10;
      v24 = WTF::fastMalloc((WTF *)0x10);
      v10 = v37;
      *(_QWORD *)v24 = v35;
      *(_DWORD *)(v24 + 8) = v25;
      v27 = 1;
    }
    else
    {
      v27 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v24 = v25 << 36;
    }
    v18 = v24 | v27;
  }
  *(_BYTE *)v9 = v10;
  v19 = *(_QWORD *)(v9 + 32);
  if ((v19 & 1) != 0 && (v19 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v19 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if ((v18 & 1) != 0)
  {
    v28 = v18 & 0xFFFFFFFF8;
    v29 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
    if ((v18 & 2) != 0
      || ((v30 = *(unsigned int *)((v18 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v38 = v28;
      v36 = v29;
      v29 = WTF::fastMalloc((WTF *)0x10);
      v28 = v38;
      *(_QWORD *)v29 = v36;
      *(_DWORD *)(v29 + 8) = v30;
      v32 = 1;
    }
    else
    {
      v32 = v29;
      v29 = v30 << 36;
    }
    *(_QWORD *)(v9 + 32) = v29 | v32;
    *(_DWORD *)(v9 + 48) = v14;
    *(_QWORD *)(v9 + 40) = v13[1] | *v13;
    if (v28)
      WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)(v9 + 32) = v18;
    *(_DWORD *)(v9 + 48) = v14;
    *(_QWORD *)(v9 + 40) = v13[1] | *v13;
  }
  *(_BYTE *)(v9 + 52) = v15;
  *(_BYTE *)(v9 + 54) = v16;
  *(_BYTE *)(v9 + 53) = -1;
  *(_BYTE *)(v9 + 56) = v17;
  if (!v12 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::PrintStream::printImpl<char [13],WTF::RawPointer,char [7],JSC::JITCompilationMode,char [2]>(WTF::PrintStream *a1, const char *a2, const void **a3, const char *a4, int *a5, const char *a6)
{
  uint64_t v11;
  const char *v12;
  WTF::PrintStream *v13;
  uint64_t result;

  WTF::PrintStream::printf(a1, "%s", a2);
  WTF::PrintStream::printf(a1, "%p", *a3);
  WTF::PrintStream::printf(a1, "%s", a4);
  v11 = *a5;
  if (v11 >= 6)
  {
    result = 57;
    __break(0xC471u);
  }
  else
  {
    v12 = off_1E3595FC8[v11];
    v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v13, "%s", v12);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
    return WTF::PrintStream::printf(a1, "%s", a6);
  }
  return result;
}

unint64_t WTF::Vector<JSC::JITDisassembler::DumpedOp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<JSC::JITDisassembler::DumpedOp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<JSC::JITDisassembler::DumpedOp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<JSC::JITDisassembler::DumpedOp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x198740324);
    }
    v7 = *(_QWORD *)a1;
    v8 = *(unsigned int *)(a1 + 12);
    v9 = WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(a1 + 8) = v5;
    *(_QWORD *)a1 = v9;
    if ((_DWORD)v8)
    {
      v17 = v9;
      v18 = v7 + 16 * v8;
      v19 = v7;
      do
      {
        *(_DWORD *)v17 = *(_DWORD *)v19;
        v20 = *(_QWORD *)(v19 + 8);
        *(_QWORD *)(v19 + 8) = 0;
        *(_QWORD *)(v17 + 8) = v20;
        v21 = *(_DWORD **)(v19 + 8);
        *(_QWORD *)(v19 + 8) = 0;
        if (v21)
        {
          if (*v21 == 1)
            WTF::fastFree((unint64_t)v21, v10, v11, v12, v13, v14, v15, v16);
          else
            --*v21;
        }
        v19 += 16;
        v17 += 16;
      }
      while (v19 != v18);
    }
    if (v7)
    {
      if (*(_QWORD *)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

void JSC::JITLeftShiftGenerator::generateFastPath(JSC::JITLeftShiftGenerator *this, JSC::CCallHelpers *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int *v31;
  int *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  int v49;
  char v50;
  int v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;

  *((_BYTE *)this + 24) = 1;
  v10 = (uint64_t *)((char *)this + 72);
  if (*((_BYTE *)this + 11) == 1)
  {
    JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 3, *((char *)this + 21), 27, a5, a6, a7, a8, (uint64_t)&v68);
    v18 = v68;
    if (v68 != -1)
    {
      v19 = *((unsigned int *)this + 21);
      if ((_DWORD)v19 == *((_DWORD *)this + 20))
      {
        v20 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, (void *)(v19 + 1), (unint64_t)&v68, v13, v14, v15, v16, v17);
        v22 = *v20;
        v21 = (uint64_t *)(v20 + 1);
        v18 = v22;
        LODWORD(v19) = *((_DWORD *)this + 21);
        v23 = *((_QWORD *)this + 9);
      }
      else
      {
        v21 = &v69;
        v23 = *v10;
      }
      v35 = v23 + 12 * v19;
      *(_DWORD *)v35 = v18;
      *(_QWORD *)(v35 + 4) = *v21;
      ++*((_DWORD *)this + 21);
    }
    v36 = *((unsigned __int8 *)this + 21);
    v37 = *((char *)this + 20);
    if (v36 == *((unsigned __int8 *)this + 20))
      goto LABEL_19;
    if (v36 == 63)
    {
      if (*((_BYTE *)this + 20) != 31)
      {
        v40 = v37 & 0x1F | 0xD2800000;
        goto LABEL_16;
      }
    }
    else if (v36 != 31 && v37 != 31)
    {
      v38 = *((unsigned __int8 *)this + 20) | ((v36 & 0x1F) << 16);
      v39 = -1442839584;
LABEL_15:
      v40 = v38 | v39;
LABEL_16:
      v42 = (unsigned int *)((char *)a2 + 200);
      v41 = *((_DWORD *)a2 + 50);
      if (v41 + 4 > *((_DWORD *)a2 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v11, v12, v13, v14, v15, v16, v17);
        v41 = *v42;
      }
      *(_DWORD *)(*((_QWORD *)a2 + 7) + v41) = v40;
      *v42 += 4;
      LOBYTE(v36) = *((_BYTE *)this + 20);
LABEL_19:
      v43 = *((_DWORD *)this + 3);
      v44 = *((_DWORD *)a2 + 50);
      if (v44 + 4 > *((_DWORD *)a2 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v11, v12, v13, v14, v15, v16, v17);
        v44 = *((_DWORD *)a2 + 50);
      }
      v45 = ((-65536 * v43) & 0x1F0000 | (32 * (v36 & 0x1F)) & 0x83E0 | ((v43 & 0x1F) << 10) | v36 & 0x1F) ^ 0x53007C00;
      goto LABEL_22;
    }
    v38 = v37 | (32 * *((char *)this + 21));
    v39 = -1862270976;
    goto LABEL_15;
  }
  JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 3, *((char *)this + 22), 27, a5, a6, a7, a8, (uint64_t)&v66);
  v29 = v66;
  if (v66 != -1)
  {
    v30 = *((unsigned int *)this + 21);
    if ((_DWORD)v30 == *((_DWORD *)this + 20))
    {
      v31 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, (void *)(v30 + 1), (unint64_t)&v66, v24, v25, v26, v27, v28);
      v33 = *v31;
      v32 = v31 + 1;
      v29 = v33;
      LODWORD(v30) = *((_DWORD *)this + 21);
      v34 = *((_QWORD *)this + 9);
    }
    else
    {
      v32 = &v67;
      v34 = *v10;
    }
    v48 = v34 + 12 * v30;
    *(_DWORD *)v48 = v29;
    *(_QWORD *)(v48 + 4) = *(_QWORD *)v32;
    ++*((_DWORD *)this + 21);
  }
  v49 = *((unsigned __int8 *)this + 22);
  if (v49 == *((unsigned __int8 *)this + 20))
  {
    JSC::MacroAssemblerARM64::move(a2, (char)v49, *((char *)this + 23), v24, v25, v26, v27, v28);
    LOBYTE(v49) = *((_BYTE *)this + 23);
  }
  if (*((_BYTE *)this + 1) != 1)
  {
    JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 3, *((char *)this + 21), 27, v25, v26, v27, v28, (uint64_t)&v64);
    v51 = v64;
    if (v64 != -1)
    {
      v52 = *((unsigned int *)this + 21);
      if ((_DWORD)v52 == *((_DWORD *)this + 20))
      {
        v53 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, (void *)(v52 + 1), (unint64_t)&v64, v13, v14, v15, v16, v17);
        v55 = *v53;
        v54 = (uint64_t *)(v53 + 1);
        v51 = v55;
        LODWORD(v52) = *((_DWORD *)this + 21);
        v56 = *((_QWORD *)this + 9);
      }
      else
      {
        v54 = &v65;
        v56 = *v10;
      }
      v57 = v56 + 12 * v52;
      *(_DWORD *)v57 = v51;
      *(_QWORD *)(v57 + 4) = *v54;
      ++*((_DWORD *)this + 21);
    }
    v58 = *((unsigned __int8 *)this + 21);
    v59 = *((char *)this + 20);
    if (v58 == *((unsigned __int8 *)this + 20))
      goto LABEL_31;
    if ((char)v58 == 63)
    {
      if (*((_BYTE *)this + 20) != 31)
      {
        v60 = v59 & 0x1F | 0xD2800000;
        goto LABEL_44;
      }
    }
    else if ((char)v58 != 31 && v59 != 31)
    {
      v60 = *((unsigned __int8 *)this + 20) | ((v58 & 0x1F) << 16) | 0xAA0003E0;
LABEL_44:
      v62 = (unsigned int *)((char *)a2 + 200);
      v61 = *((_DWORD *)a2 + 50);
      if (v61 + 4 > *((_DWORD *)a2 + 48))
      {
        v63 = v60;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v11, v12, v13, v14, v15, v16, v17);
        v60 = v63;
        v61 = *v62;
      }
      *(_DWORD *)(*((_QWORD *)a2 + 7) + v61) = v60;
      *v62 += 4;
      goto LABEL_31;
    }
    v60 = v59 | (32 * (char)v58) | 0x91000000;
    goto LABEL_44;
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)*(unsigned int *)((char *)this + 2), *((char *)this + 20), v24, v25, v26, v27, v28);
LABEL_31:
  v50 = *((_BYTE *)this + 20);
  v44 = *((_DWORD *)a2 + 50);
  if (v44 + 4 > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v11, v12, v13, v14, v15, v16, v17);
    v44 = *((_DWORD *)a2 + 50);
  }
  v45 = ((v49 & 0x1F) << 16) | (32 * (v50 & 0x1F)) | v50 & 0x1F | 0x1AC02000;
LABEL_22:
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v44) = v45;
  v46 = *((_DWORD *)a2 + 50) + 4;
  *((_DWORD *)a2 + 50) = v46;
  v47 = *((_BYTE *)this + 20);
  if (v46 + 4 > *((_DWORD *)a2 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)a2 + 56), v11, v12, v13, v14, v15, v16, v17);
    v46 = *((_DWORD *)a2 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v46) = v47 & 0x1F | (32 * (v47 & 0x1F)) | 0xAA1B0000;
  *((_DWORD *)a2 + 50) += 4;
}

uint64_t JSC::JITMulGenerator::generateInline(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int *v25;
  int *v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int *v49;
  int *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t *v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int *v81;
  int *v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int8x8_t v92;
  int v93;
  uint64_t v94;
  int *v95;
  int *v96;
  int v97;
  uint64_t v98;
  unsigned int *v99;
  char *v100;
  uint64_t v101;
  JSC::ARM64LogicalImmediate *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  _DWORD *v116;
  unsigned int v117;
  void *v118;
  _DWORD *v119;
  uint64_t v120;
  unsigned int v121;
  _DWORD *v122;
  _QWORD *v123;
  int v124;
  _DWORD *v125;
  uint64_t v126;
  char v127;
  char v128;
  unsigned int v129;
  _DWORD v130[3];
  int v131;
  int v132;
  _DWORD v133[3];
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  uint64_t v141;
  int v142;
  int v143;
  int v144;
  uint64_t v145;

  if (!a4)
  {
LABEL_43:
    if (*(_BYTE *)(a1 + 1) != 1 || *(int *)(a1 + 2) <= 0)
    {
      JSC::MacroAssemblerARM64::branch64(a2, 3, *(char *)(a1 + 21), 27, a5, a6, a7, a8, (uint64_t)&v136);
      v73 = v136;
      if (v136 != -1)
      {
        v74 = *(unsigned int *)(a3 + 36);
        if ((_DWORD)v74 == *(_DWORD *)(a3 + 32))
        {
          v75 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 24, (void *)(v74 + 1), (unint64_t)&v136, (uint64_t)a4, a5, a6, a7, a8);
          v77 = *v75;
          v76 = (uint64_t *)(v75 + 1);
          v73 = v77;
          v78 = *(_QWORD *)(a3 + 24) + 12 * *(unsigned int *)(a3 + 36);
        }
        else
        {
          v76 = &v137;
          v78 = *(_QWORD *)(a3 + 24) + 12 * v74;
        }
        *(_DWORD *)v78 = v73;
        *(_QWORD *)(v78 + 4) = *v76;
        ++*(_DWORD *)(a3 + 36);
      }
    }
    if (*(_BYTE *)(a1 + 11) != 1 || *(int *)(a1 + 12) <= 0)
    {
      JSC::MacroAssemblerARM64::branch64(a2, 3, *(char *)(a1 + 22), 27, a5, a6, a7, a8, (uint64_t)&v134);
      v79 = v134;
      if (v134 != -1)
      {
        v80 = *(unsigned int *)(a3 + 36);
        if ((_DWORD)v80 == *(_DWORD *)(a3 + 32))
        {
          v81 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 24, (void *)(v80 + 1), (unint64_t)&v134, (uint64_t)a4, a5, a6, a7, a8);
          v83 = *v81;
          v82 = v81 + 1;
          v79 = v83;
          v84 = *(_QWORD *)(a3 + 24) + 12 * *(unsigned int *)(a3 + 36);
        }
        else
        {
          v82 = &v135;
          v84 = *(_QWORD *)(a3 + 24) + 12 * v80;
        }
        *(_DWORD *)v84 = v79;
        *(_QWORD *)(v84 + 4) = *(_QWORD *)v82;
        ++*(_DWORD *)(a3 + 36);
      }
    }
    v85 = *(unsigned __int8 *)(a1 + 1);
    if (v85 == 1 && *(int *)(a1 + 2) > 0)
      goto LABEL_68;
    if (*(_BYTE *)(a1 + 11) != 1 || (v99 = (unsigned int *)(a1 + 12), *(int *)(a1 + 12) < 1))
    {
      v86 = (uint64_t *)(a3 + 24);
      JSC::MacroAssemblerARM64::branchMul32(a2, 6, *(char *)(a1 + 22), *(char *)(a1 + 21), *(char *)(a1 + 25), a6, a7, a8, (uint64_t)&v131);
      v93 = v131;
      if (v131 != -1)
      {
        v94 = *(unsigned int *)(a3 + 36);
        if ((_DWORD)v94 == *(_DWORD *)(a3 + 32))
        {
          v95 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 24, (void *)(v94 + 1), (unint64_t)&v131, v87, v88, v89, v90, v91);
          v97 = *v95;
          v96 = v95 + 1;
          v93 = v97;
          LODWORD(v94) = *(_DWORD *)(a3 + 36);
          v98 = *(_QWORD *)(a3 + 24);
        }
        else
        {
          v96 = &v132;
          v98 = *v86;
        }
        v120 = v98 + 12 * v94;
        *(_DWORD *)v120 = v93;
        *(_QWORD *)(v120 + 4) = *(_QWORD *)v96;
        ++*(_DWORD *)(a3 + 36);
      }
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a2, 0, *(char *)(a1 + 25), v88, v89, v90, v91, (uint64_t)v130, v92);
      v114 = v130[0];
      if (v130[0] == -1)
        goto LABEL_82;
      v121 = *(_DWORD *)(a3 + 36);
      v116 = (_DWORD *)(a3 + 36);
      v115 = v121;
      if (v121 == *(v116 - 1))
      {
        v118 = (void *)(v115 + 1);
        v119 = v130;
        goto LABEL_78;
      }
      v125 = v130;
LABEL_80:
      v123 = v125 + 1;
      goto LABEL_81;
    }
    if (v85 == 1 && *(int *)(a1 + 2) >= 1)
    {
LABEL_68:
      v99 = (unsigned int *)(a1 + 2);
      v100 = (char *)(a1 + 22);
    }
    else
    {
      v100 = (char *)(a1 + 21);
    }
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198740F18);
    }
    v101 = *v100;
    v102 = (JSC::ARM64LogicalImmediate *)*v99;
    v103 = *(char *)(a1 + 25);
    *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, v102, *(char *)(a2 + 272), (uint64_t)a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branchMul32(a2, 6, 16, v101, v103, v104, v105, v106, (uint64_t)v133);
    v114 = v133[0];
    if (v133[0] == -1)
      goto LABEL_82;
    v86 = (uint64_t *)(a3 + 24);
    v117 = *(_DWORD *)(a3 + 36);
    v116 = (_DWORD *)(a3 + 36);
    v115 = v117;
    if (v117 == *(v116 - 1))
    {
      v118 = (void *)(v115 + 1);
      v119 = v133;
LABEL_78:
      v122 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v86, v118, (unint64_t)v119, v109, v110, v111, v112, v113);
      v124 = *v122;
      v123 = v122 + 1;
      v114 = v124;
      LODWORD(v115) = *v116;
LABEL_81:
      v126 = *v86 + 12 * v115;
      *(_DWORD *)v126 = v114;
      *(_QWORD *)(v126 + 4) = *v123;
      ++*v116;
LABEL_82:
      v127 = *(_BYTE *)(a1 + 25);
      v128 = *(_BYTE *)(a1 + 20);
      v129 = *(_DWORD *)(a2 + 200);
      if (v129 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v107, v108, v109, v110, v111, v112, v113);
        v129 = *(_DWORD *)(a2 + 200);
      }
      result = 0;
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v129) = v128 & 0x1F | ((v127 & 0x1F) << 16) | 0xAA000360;
      goto LABEL_40;
    }
    v125 = v133;
    goto LABEL_80;
  }
  v11 = *a4;
  v12 = (v11 >> 10) & 7;
  v13 = (v11 >> 7) & 7;
  if (v12 == 1)
  {
LABEL_42:
    if (v13 == 1 || *(_BYTE *)(a1 + 11) == 1 && *(int *)(a1 + 12) >= 1)
      goto LABEL_43;
    return 1;
  }
  if (v12 != 2)
  {
    if (v12 == 4 && v13 == 4)
      return 2;
LABEL_12:
    if (*(_BYTE *)(a1 + 1) != 1 || *(int *)(a1 + 2) < 1)
      return 1;
    goto LABEL_42;
  }
  if (v13 != 2 || *(_BYTE *)(a1 + 1) || *(_BYTE *)(a1 + 11))
    goto LABEL_12;
  if ((*(_BYTE *)a1 & 0x7E) != 2)
  {
    JSC::MacroAssemblerARM64::branchTest64(a2, 0, *(char *)(a1 + 21), 27, a5, a6, a7, a8, (uint64_t)&v144);
    v15 = v144;
    if (v144 != -1)
    {
      v16 = *(unsigned int *)(a3 + 36);
      if ((_DWORD)v16 == *(_DWORD *)(a3 + 32))
      {
        v17 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 24, (void *)(v16 + 1), (unint64_t)&v144, v14, a5, a6, a7, a8);
        v19 = *v17;
        v18 = (uint64_t *)(v17 + 1);
        v15 = v19;
        v20 = *(_QWORD *)(a3 + 24) + 12 * *(unsigned int *)(a3 + 36);
      }
      else
      {
        v18 = &v145;
        v20 = *(_QWORD *)(a3 + 24) + 12 * v16;
      }
      *(_DWORD *)v20 = v15;
      *(_QWORD *)(v20 + 4) = *v18;
      ++*(_DWORD *)(a3 + 36);
    }
  }
  if ((*(_BYTE *)(a1 + 10) & 0x7E) != 2)
  {
    JSC::MacroAssemblerARM64::branchTest64(a2, 0, *(char *)(a1 + 22), 27, a5, a6, a7, a8, (uint64_t)&v142);
    v23 = v142;
    if (v142 != -1)
    {
      v24 = *(unsigned int *)(a3 + 36);
      if ((_DWORD)v24 == *(_DWORD *)(a3 + 32))
      {
        v25 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 24, (void *)(v24 + 1), (unint64_t)&v142, v22, a5, a6, a7, a8);
        v27 = *v25;
        v26 = v25 + 1;
        v23 = v27;
        v28 = *(_QWORD *)(a3 + 24) + 12 * *(unsigned int *)(a3 + 36);
      }
      else
      {
        v26 = &v143;
        v28 = *(_QWORD *)(a3 + 24) + 12 * v24;
      }
      *(_DWORD *)v28 = v23;
      *(_QWORD *)(v28 + 4) = *(_QWORD *)v26;
      ++*(_DWORD *)(a3 + 36);
    }
  }
  v29 = (uint64_t *)(a3 + 24);
  JSC::MacroAssemblerARM64::branch64(a2, 2, *(char *)(a1 + 21), 27, a5, a6, a7, a8, (uint64_t)&v140);
  v35 = v140;
  if (v140 != -1)
  {
    v36 = *(unsigned int *)(a3 + 36);
    if ((_DWORD)v36 == *(_DWORD *)(a3 + 32))
    {
      v37 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 24, (void *)(v36 + 1), (unint64_t)&v140, v30, v31, v32, v33, v34);
      v39 = *v37;
      v38 = (uint64_t *)(v37 + 1);
      v35 = v39;
      LODWORD(v36) = *(_DWORD *)(a3 + 36);
      v40 = *(_QWORD *)(a3 + 24);
    }
    else
    {
      v38 = &v141;
      v40 = *v29;
    }
    v41 = v40 + 12 * v36;
    *(_DWORD *)v41 = v35;
    *(_QWORD *)(v41 + 4) = *v38;
    ++*(_DWORD *)(a3 + 36);
  }
  JSC::MacroAssemblerARM64::branch64(a2, 2, *(char *)(a1 + 22), 27, v31, v32, v33, v34, (uint64_t)&v138);
  v47 = v138;
  if (v138 != -1)
  {
    v48 = *(unsigned int *)(a3 + 36);
    if ((_DWORD)v48 == *(_DWORD *)(a3 + 32))
    {
      v49 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 24, (void *)(v48 + 1), (unint64_t)&v138, v42, v43, v44, v45, v46);
      v51 = *v49;
      v50 = v49 + 1;
      v47 = v51;
      LODWORD(v48) = *(_DWORD *)(a3 + 36);
      v52 = *(_QWORD *)(a3 + 24);
    }
    else
    {
      v50 = &v139;
      v52 = *v29;
    }
    v53 = v52 + 12 * v48;
    *(_DWORD *)v53 = v47;
    *(_QWORD *)(v53 + 4) = *(_QWORD *)v50;
    ++*(_DWORD *)(a3 + 36);
  }
  JSC::AssemblyHelpers::unboxDoubleWithoutAssertions((_DWORD *)a2, *(char *)(a1 + 21), *(char *)(a1 + 25), *(char *)(a1 + 23), 1, v44, v45, v46);
  JSC::AssemblyHelpers::unboxDoubleWithoutAssertions((_DWORD *)a2, *(char *)(a1 + 22), *(char *)(a1 + 25), *(char *)(a1 + 24), 1, v54, v55, v56);
  v64 = *(char *)(a1 + 24);
  v65 = *(char *)(a1 + 23);
  v66 = *(_DWORD *)(a2 + 200);
  if (v66 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v57, v58, v59, v60, v61, v62, v63);
    v66 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v66) = (v64 << 16) | (32 * v65) | v65 | 0x1E600800;
  v67 = *(_DWORD *)(a2 + 200);
  v68 = v67 + 4;
  *(_DWORD *)(a2 + 200) = v67 + 4;
  v69 = *(char *)(a1 + 23);
  v70 = *(unsigned __int8 *)(a1 + 20);
  if ((v67 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v57, v58, v59, v60, v61, v62, v63);
    v68 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v68) = v70 & 0x1F | (32 * v69) | 0x9E660000;
  v71 = *(_DWORD *)(a2 + 200);
  v72 = v71 + 4;
  *(_DWORD *)(a2 + 200) = v71 + 4;
  if (v70 == 31)
  {
    if ((v71 + 8) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v57, v58, v59, v60, v61, v62, v63);
      v72 = *(_DWORD *)(a2 + 200);
    }
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v72) = -885300225;
LABEL_40:
    *(_DWORD *)(a2 + 200) += 4;
    return result;
  }
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), v70 & 0x1F | (32 * (v70 & 0x1F)) | 0xCB1B0000, v58, v59, v60, v61, v62, v63);
  return 0;
}

uint64_t JSC::JITMulGenerator::generateFastPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char v11;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x8_t v29;
  int v30;
  uint64_t v31;
  int *v32;
  int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t *v46;
  int v47;
  uint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  char v54;
  uint64_t v55;
  int *v56;
  int *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t *v68;
  int v69;
  uint64_t v70;
  char *v71;
  BOOL v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  JSC::ARM64LogicalImmediate *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  _DWORD *v94;
  uint64_t *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int *v102;
  int *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int *v132;
  int *v133;
  int v134;
  uint64_t v135;
  char v136;
  int v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  char v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  char v161;
  uint64_t v162;
  int *v163;
  int *v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  _DWORD *v175;
  uint64_t *v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  int v185;
  unsigned int v186;
  int v187;
  int v188;
  int v189;
  unsigned int v190;
  int v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int i;
  unsigned int v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  int v213;
  unsigned int v214;
  int v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  unsigned int v237;
  unsigned int v238;
  JSC::AssemblerBuffer *v239;
  unsigned int v240;
  _BYTE *v241;
  int v242;
  int v243;
  unsigned int v244[2];
  char v245;
  __int16 v246;
  char v247;
  int v248;
  int v249;
  int v250;
  uint64_t v251;
  int v252;
  int v253;
  char v254;
  __int16 v255;
  char v256;
  int v257;
  uint64_t v258;
  int v259;
  int v260;
  unsigned int v261;
  uint64_t v262;
  _BYTE v263[12];
  int v264;
  uint64_t v265;
  int v266;
  int v267;
  char v268;
  __int16 v269;
  char v270;
  int v271;
  uint64_t v272;
  _BYTE v273[24];

  if ((*(_BYTE *)a1 & 2) == 0)
    return 0;
  v9 = a1 + 10;
  if ((*(_BYTE *)(a1 + 10) & 2) == 0)
    return 0;
  v11 = a6;
  v16 = *(unsigned __int8 *)(a1 + 1);
  if (v16 == 1)
  {
    v70 = *(_QWORD *)(a1 + 2);
    if ((int)v70 > 0)
      goto LABEL_34;
  }
  if (*(_BYTE *)(a1 + 11) == 1 && *(int *)(a1 + 12) >= 1)
  {
    if (v16 != 1)
    {
      v71 = (char *)(a1 + 21);
      v241 = (_BYTE *)a1;
LABEL_43:
      v74 = *v71;
      JSC::MacroAssemblerARM64::branch64(a2, 3, v74, 27, a5, a6, a7, a8, (uint64_t)v273);
      v80 = *(unsigned __int8 *)(a1 + 20);
      if (v80 == v74)
        LOBYTE(v80) = *(_BYTE *)(a1 + 25);
      if (!*(_BYTE *)(a2 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198741D4CLL);
      }
      v81 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v9 + 2);
      *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, v81, *(char *)(a2 + 272), v75, v76, v77, v78, v79);
      v240 = (char)v74;
      JSC::MacroAssemblerARM64::branchMul32(a2, 6, 16, (char)v74, (char)v80, v82, v83, v84, (uint64_t)&v271);
      v92 = v271;
      if (v271 != -1)
      {
        v93 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v93 == *(_DWORD *)(a4 + 8))
        {
          v94 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v93 + 1), (unint64_t)&v271, v87, v88, v89, v90, v91);
          v96 = *v94;
          v95 = (uint64_t *)(v94 + 1);
          v92 = v96;
          LODWORD(v93) = *(_DWORD *)(a4 + 12);
        }
        else
        {
          v95 = &v272;
        }
        v156 = *(_QWORD *)a4 + 12 * v93;
        *(_DWORD *)v156 = v92;
        *(_QWORD *)(v156 + 4) = *v95;
        ++*(_DWORD *)(a4 + 12);
      }
      v157 = *(_BYTE *)(a1 + 20);
      v239 = (JSC::AssemblerBuffer *)(a2 + 56);
      v158 = *(_DWORD *)(a2 + 200);
      if (v158 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v239, v85, v86, v87, v88, v89, v90, v91);
        v158 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v158) = v157 & 0x1F | ((v80 & 0x1F) << 16) | 0xAA000360;
      v159 = *(_DWORD *)(a2 + 200) + 4;
      for (*(_DWORD *)(a2 + 200) = v159; v159 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v159)
      {
        if ((v159 + 4) > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v239, v85, v86, v87, v88, v89, v90, v91);
          v159 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v159) = -721215457;
        v159 = *(_DWORD *)(a2 + 200) + 4;
      }
      v160 = v159;
      if ((v159 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v239, v85, v86, v87, v88, v89, v90, v91);
        v160 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v160) = 335544320;
      *(_DWORD *)(a2 + 200) += 4;
      if (*(_BYTE *)(a2 + 328))
        v161 = 69;
      else
        v161 = 65;
      v266 = v159;
      v267 = 0;
      v268 = v161;
      v269 = 15;
      v270 = -1;
      if (v159 != -1)
      {
        v162 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v162 == *(_DWORD *)(a3 + 8))
        {
          v163 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v162 + 1), (unint64_t)&v266, v87, v88, v89, v90, v91);
          v165 = *v163;
          v164 = v163 + 1;
          v166 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
          *(_DWORD *)v166 = v165;
        }
        else
        {
          v164 = &v267;
          v166 = *(_QWORD *)a3 + 12 * v162;
          *(_DWORD *)v166 = v159;
        }
        *(_QWORD *)(v166 + 4) = *(_QWORD *)v164;
        ++*(_DWORD *)(a3 + 12);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v273, a2, v86, v87, v88, v89, v90, v91);
      if ((*v241 & 0x7E) != 2)
      {
        JSC::MacroAssemblerARM64::branchTest64(a2, 0, v240, 27, v167, v168, v169, v170, (uint64_t)&v264);
        v173 = v264;
        if (v264 != -1)
        {
          v174 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v174 == *(_DWORD *)(a4 + 8))
          {
            v175 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v174 + 1), (unint64_t)&v264, v171, v172, v168, v169, v170);
            v177 = *v175;
            v176 = (uint64_t *)(v175 + 1);
            v173 = v177;
            LODWORD(v174) = *(_DWORD *)(a4 + 12);
          }
          else
          {
            v176 = &v265;
          }
          v178 = *(_QWORD *)a4 + 12 * v174;
          *(_DWORD *)v178 = v173;
          *(_QWORD *)(v178 + 4) = *v176;
          ++*(_DWORD *)(a4 + 12);
        }
      }
      JSC::AssemblyHelpers::unboxDoubleWithoutAssertions((_DWORD *)a2, v240, *(char *)(a1 + 25), *(char *)(a1 + 23), 1, v168, v169, v170);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v9 + 2), *(char *)(a1 + 25), v179, v180, v181, v182, v183);
      v184 = *(_BYTE *)(a1 + 25);
      v185 = *(char *)(a1 + 24);
      v186 = *(_DWORD *)(a2 + 200);
      if (v186 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v239, v148, v149, v150, v151, v152, v153, v154);
        v186 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v186) = v185 | (32 * (v184 & 0x1F)) | 0x1E620000;
      v155 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v155;
      goto LABEL_98;
    }
    v70 = *(_QWORD *)(a1 + 2);
LABEL_34:
    v71 = (char *)(a1 + 22);
    v72 = (int)v70 <= 0;
    if ((int)v70 > 0)
    {
      v73 = (_BYTE *)(a1 + 10);
    }
    else
    {
      v71 = (char *)(a1 + 21);
      v73 = (_BYTE *)a1;
    }
    v241 = v73;
    if (!v72)
      v9 = a1;
    goto LABEL_43;
  }
  *(_QWORD *)v273 = 0xFFFFFFFFLL;
  *(_DWORD *)&v273[8] = -16773311;
  *(_QWORD *)v263 = 0xFFFFFFFFLL;
  *(_DWORD *)&v263[8] = -16773311;
  JSC::MacroAssemblerARM64::branch64(a2, 3, *(char *)(a1 + 21), 27, a5, a6, a7, a8, (uint64_t)&v261);
  *(_DWORD *)v273 = v261;
  *(_QWORD *)&v273[4] = v262;
  JSC::MacroAssemblerARM64::branch64(a2, 3, *(char *)(a1 + 22), 27, v17, v18, v19, v20, (uint64_t)&v261);
  *(_DWORD *)v263 = v261;
  *(_QWORD *)&v263[4] = v262;
  JSC::MacroAssemblerARM64::branchMul32(a2, 6, *(char *)(a1 + 22), *(char *)(a1 + 21), *(char *)(a1 + 25), v21, v22, v23, (uint64_t)&v259);
  v30 = v259;
  if (v259 != -1)
  {
    v31 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v31 == *(_DWORD *)(a4 + 8))
    {
      v32 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v31 + 1), (unint64_t)&v259, v24, v25, v26, v27, v28);
      v34 = *v32;
      v33 = v32 + 1;
      v30 = v34;
      LODWORD(v31) = *(_DWORD *)(a4 + 12);
    }
    else
    {
      v33 = &v260;
    }
    v35 = *(_QWORD *)a4 + 12 * v31;
    *(_DWORD *)v35 = v30;
    *(_QWORD *)(v35 + 4) = *(_QWORD *)v33;
    ++*(_DWORD *)(a4 + 12);
  }
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a2, 0, *(char *)(a1 + 25), v25, v26, v27, v28, (uint64_t)&v257, v29);
  v43 = v257;
  if (v257 != -1)
  {
    v44 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v44 == *(_DWORD *)(a4 + 8))
    {
      v45 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v44 + 1), (unint64_t)&v257, v38, v39, v40, v41, v42);
      v47 = *v45;
      v46 = (uint64_t *)(v45 + 1);
      v43 = v47;
      LODWORD(v44) = *(_DWORD *)(a4 + 12);
    }
    else
    {
      v46 = &v258;
    }
    v48 = *(_QWORD *)a4 + 12 * v44;
    *(_DWORD *)v48 = v43;
    *(_QWORD *)(v48 + 4) = *v46;
    ++*(_DWORD *)(a4 + 12);
  }
  v49 = *(_BYTE *)(a1 + 25);
  v50 = *(_BYTE *)(a1 + 20);
  v51 = *(_DWORD *)(a2 + 200);
  if (v51 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v36, v37, v38, v39, v40, v41, v42);
    v51 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v51) = v50 & 0x1F | ((v49 & 0x1F) << 16) | 0xAA000360;
  v52 = *(_DWORD *)(a2 + 200) + 4;
  for (*(_DWORD *)(a2 + 200) = v52; v52 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v52)
  {
    if ((v52 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v36, v37, v38, v39, v40, v41, v42);
      v52 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v52) = -721215457;
    v52 = *(_DWORD *)(a2 + 200) + 4;
  }
  v53 = v52;
  if ((v52 + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v36, v37, v38, v39, v40, v41, v42);
    v53 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v53) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v54 = 69;
  else
    v54 = 65;
  v252 = v52;
  v253 = 0;
  v254 = v54;
  v255 = 15;
  v256 = -1;
  if (v52 != -1)
  {
    v55 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v55 == *(_DWORD *)(a3 + 8))
    {
      v56 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v55 + 1), (unint64_t)&v252, v38, v39, v40, v41, v42);
      v58 = *v56;
      v57 = v56 + 1;
      v59 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
      *(_DWORD *)v59 = v58;
    }
    else
    {
      v57 = &v253;
      v59 = *(_QWORD *)a3 + 12 * v55;
      *(_DWORD *)v59 = v52;
    }
    *(_QWORD *)(v59 + 4) = *(_QWORD *)v57;
    ++*(_DWORD *)(a3 + 12);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v273, a2, v37, v38, v39, v40, v41, v42);
  if ((*(_BYTE *)a1 & 0x7E) != 2)
  {
    JSC::MacroAssemblerARM64::branchTest64(a2, 0, *(char *)(a1 + 21), 27, v60, v61, v62, v63, (uint64_t)&v250);
    v65 = v250;
    if (v250 != -1)
    {
      v66 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v66 == *(_DWORD *)(a4 + 8))
      {
        v67 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v66 + 1), (unint64_t)&v250, v64, v60, v61, v62, v63);
        v69 = *v67;
        v68 = (uint64_t *)(v67 + 1);
        v65 = v69;
        LODWORD(v66) = *(_DWORD *)(a4 + 12);
      }
      else
      {
        v68 = &v251;
      }
      v97 = *(_QWORD *)a4 + 12 * v66;
      *(_DWORD *)v97 = v65;
      *(_QWORD *)(v97 + 4) = *v68;
      ++*(_DWORD *)(a4 + 12);
    }
  }
  if ((*(_BYTE *)v9 & 0x7E) != 2)
  {
    JSC::MacroAssemblerARM64::branchTest64(a2, 0, *(char *)(a1 + 22), 27, v60, v61, v62, v63, (uint64_t)&v248);
    v100 = v248;
    if (v248 != -1)
    {
      v101 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v101 == *(_DWORD *)(a4 + 8))
      {
        v102 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v101 + 1), (unint64_t)&v248, v98, v99, v61, v62, v63);
        v104 = *v102;
        v103 = v102 + 1;
        v100 = v104;
        LODWORD(v101) = *(_DWORD *)(a4 + 12);
      }
      else
      {
        v103 = &v249;
      }
      v105 = *(_QWORD *)a4 + 12 * v101;
      *(_DWORD *)v105 = v100;
      *(_QWORD *)(v105 + 4) = *(_QWORD *)v103;
      ++*(_DWORD *)(a4 + 12);
    }
  }
  JSC::AssemblyHelpers::unboxDoubleWithoutAssertions((_DWORD *)a2, *(char *)(a1 + 21), *(char *)(a1 + 25), *(char *)(a1 + 23), 1, v61, v62, v63);
  JSC::MacroAssemblerARM64::branch64(a2, 3, *(char *)(a1 + 22), 27, v106, v107, v108, v109, (uint64_t)&v261);
  v117 = *(_BYTE *)(a1 + 22);
  v118 = *(char *)(a1 + 24);
  v119 = *(_DWORD *)(a2 + 200);
  if (v119 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v110, v111, v112, v113, v114, v115, v116);
    v119 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v119) = v118 | (32 * (v117 & 0x1F)) | 0x1E620000;
  v120 = *(_DWORD *)(a2 + 200) + 4;
  for (*(_DWORD *)(a2 + 200) = v120; v120 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v120)
  {
    if ((v120 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v110, v111, v112, v113, v114, v115, v116);
      v120 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v120) = -721215457;
    v120 = *(_DWORD *)(a2 + 200) + 4;
  }
  v121 = v120;
  if ((v120 + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v110, v111, v112, v113, v114, v115, v116);
    v121 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v121) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v122 = 69;
  else
    v122 = 65;
  v244[0] = v120;
  v244[1] = 0;
  v245 = v122;
  v246 = 15;
  v247 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v263, a2, v111, v112, v113, v114, v115, v116);
  if ((*(_BYTE *)v9 & 0x7E) != 2)
  {
    JSC::MacroAssemblerARM64::branchTest64(a2, 0, *(char *)(a1 + 22), 27, v126, v127, v128, v129, (uint64_t)&v242);
    v130 = v242;
    if (v242 != -1)
    {
      v131 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v131 == *(_DWORD *)(a4 + 8))
      {
        v132 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v131 + 1), (unint64_t)&v242, v125, v126, v127, v128, v129);
        v134 = *v132;
        v133 = v132 + 1;
        v130 = v134;
        LODWORD(v131) = *(_DWORD *)(a4 + 12);
      }
      else
      {
        v133 = &v243;
      }
      v135 = *(_QWORD *)a4 + 12 * v131;
      *(_DWORD *)v135 = v130;
      *(_QWORD *)(v135 + 4) = *(_QWORD *)v133;
      ++*(_DWORD *)(a4 + 12);
    }
  }
  v136 = *(_BYTE *)(a1 + 21);
  v137 = *(char *)(a1 + 23);
  v138 = *(_DWORD *)(a2 + 200);
  if (v138 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v123, v124, v125, v126, v127, v128, v129);
    v138 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v138) = v137 | (32 * (v136 & 0x1F)) | 0x1E620000;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v261, a2, v124, v125, v126, v127, v128, v129);
  JSC::AssemblyHelpers::unboxDoubleWithoutAssertions((_DWORD *)a2, *(char *)(a1 + 22), *(char *)(a1 + 25), *(char *)(a1 + 24), 1, v139, v140, v141);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v244, a2, v142, v143, v144, v145, v146, v147);
  v155 = *(_DWORD *)(a2 + 200);
LABEL_98:
  v187 = *(char *)(a1 + 24);
  v188 = *(char *)(a1 + 23);
  if (v155 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v148, v149, v150, v151, v152, v153, v154);
    v155 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v155) = (v187 << 16) | (32 * v188) | v188 | 0x1E600800;
  v189 = *(_DWORD *)(a2 + 200);
  v190 = v189 + 4;
  *(_DWORD *)(a2 + 200) = v189 + 4;
  v191 = *(char *)(a1 + 23);
  v192 = *(unsigned __int8 *)(a1 + 20);
  v193 = v189 + 8;
  v194 = *(_DWORD *)(a2 + 192);
  if (a5 && (v11 & 1) != 0)
  {
    if (v193 > v194)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v148, v149, v150, v151, v152, v153, v154);
      v190 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v190) = v192 & 0x1F | (32 * v191) | 0x9E660000;
    *(_DWORD *)(a2 + 200) += 4;
    JSC::MacroAssemblerARM64::branch64(a2, 1, *(char *)(a1 + 20), 0x8000000000000000, v151, v152, v153, v154, (uint64_t)v273);
    JSC::MacroAssemblerARM64::or16(a2, (JSC::ARM64LogicalImmediate *)2, a5);
    for (i = *(_DWORD *)(a2 + 200); (signed int)i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
    {
      if (i + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v195, v196, v197, v198, v199, v200, v201);
        i = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
      i = *(_DWORD *)(a2 + 200) + 4;
    }
    v203 = i;
    if (i + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v195, v196, v197, v198, v199, v200, v201);
      v203 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v203) = 335544320;
    *(_DWORD *)(a2 + 200) += 4;
    if (*(_BYTE *)(a2 + 328))
      v204 = 69;
    else
      v204 = 65;
    *(_QWORD *)v263 = i;
    v263[8] = v204;
    *(_WORD *)&v263[9] = 15;
    v263[11] = -1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v273, a2, v196, v197, v198, v199, v200, v201);
    JSC::MacroAssemblerARM64::or16(a2, (JSC::ARM64LogicalImmediate *)1, a5);
    v212 = *(unsigned __int8 *)(a1 + 20);
    v213 = *(char *)(a1 + 25);
    if (v212 == *(unsigned __int8 *)(a1 + 25))
    {
      v217 = *(_DWORD *)(a2 + 200);
LABEL_128:
      v219 = v212 & 0x1F | (32 * v212) | 0xD354FC00;
      if (v217 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v205, v206, v207, v208, v209, v210, v211);
        v217 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v217) = v219;
      *(_DWORD *)(a2 + 200) += 4;
      JSC::MacroAssemblerARM64::and32(a2, (JSC::ARM64LogicalImmediate *)0x7FF, *(_BYTE *)(a1 + 25), *(char *)(a1 + 25));
      JSC::MacroAssemblerARM64::branch32(a2, 13, *(char *)(a1 + 25), 1073, v220, v221, v222, v223, (uint64_t)&v261);
      JSC::MacroAssemblerARM64::or16(a2, (JSC::ARM64LogicalImmediate *)0x10, a5);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v261, a2, v224, v225, v226, v227, v228, v229);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v263, a2, v230, v231, v232, v233, v234, v235);
      v236 = *(unsigned __int8 *)(a1 + 20);
      if (v236 == 31)
        v237 = -885300225;
      else
        v237 = v236 & 0x1F | (32 * (v236 & 0x1F)) | 0xCB1B0000;
      v216 = *(_DWORD *)(a2 + 200);
      v238 = v216 + 4;
      goto LABEL_133;
    }
    if (v212 == 63)
    {
      if (*(_BYTE *)(a1 + 25) != 31)
      {
        v214 = v213 & 0x1F | 0xD2800000;
        goto LABEL_125;
      }
    }
    else if (v212 != 31 && v213 != 31)
    {
      v214 = *(unsigned __int8 *)(a1 + 25) | ((v212 & 0x1F) << 16) | 0xAA0003E0;
LABEL_125:
      v218 = *(_DWORD *)(a2 + 200);
      if (v218 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v205, v206, v207, v208, v209, v210, v211);
        v218 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v218) = v214;
      v217 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v217;
      v212 = *(unsigned __int8 *)(a1 + 25);
      goto LABEL_128;
    }
    v214 = v213 | (32 * *(char *)(a1 + 20)) | 0x91000000;
    goto LABEL_125;
  }
  if (v193 > v194)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v148, v149, v150, v151, v152, v153, v154);
    v190 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v190) = v192 & 0x1F | (32 * v191) | 0x9E660000;
  v215 = *(_DWORD *)(a2 + 200);
  v216 = v215 + 4;
  *(_DWORD *)(a2 + 200) = v215 + 4;
  if (v192 == 31)
  {
    if ((v215 + 8) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v148, v149, v150, v151, v152, v153, v154);
      v216 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v216) = -885300225;
    goto LABEL_136;
  }
  v237 = v192 & 0x1F | (32 * (v192 & 0x1F)) | 0xCB1B0000;
  v238 = v215 + 8;
LABEL_133:
  if (v238 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v148, v149, v150, v151, v152, v153, v154);
    v216 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v216) = v237;
LABEL_136:
  *(_DWORD *)(a2 + 200) += 4;
  return 1;
}

uint64_t JSC::JITNegGenerator::generateInline(unsigned __int8 *a1, _DWORD *a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x8_t v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int *v52;
  int *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned __int8 v61;
  uint64_t result;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int *v74;
  int *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  char v83;
  unsigned __int8 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;

  if (!a4 || (v11 = (*a4 >> 7) & 7, v11 == 1))
  {
    v12 = a1[1];
    v13 = (char)*a1;
    if (v12 == *a1)
    {
LABEL_11:
      v17 = (uint64_t *)(a3 + 24);
      JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 3, (char)v12, 27, a5, a6, a7, a8, (uint64_t)&v97);
      v24 = v97;
      if (v97 != -1)
      {
        v25 = *(unsigned int *)(a3 + 36);
        if ((_DWORD)v25 == *(_DWORD *)(a3 + 32))
        {
          v26 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 24, (void *)(v25 + 1), (unint64_t)&v97, v18, v19, v20, v21, v22);
          v28 = *v26;
          v27 = (uint64_t *)(v26 + 1);
          v24 = v28;
          LODWORD(v25) = *(_DWORD *)(a3 + 36);
          v29 = *(_QWORD *)(a3 + 24);
        }
        else
        {
          v27 = &v98;
          v29 = *v17;
        }
        v42 = v29 + 12 * v25;
        *(_DWORD *)v42 = v24;
        *(_QWORD *)(v42 + 4) = *v27;
        ++*(_DWORD *)(a3 + 36);
      }
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x7FFFFFFF, (uint64_t)a2, 0, (char)a1[1], v19, v20, v21, v22, (uint64_t)&v95, v23);
      v50 = v95;
      if (v95 != -1)
      {
        v51 = *(unsigned int *)(a3 + 36);
        if ((_DWORD)v51 == *(_DWORD *)(a3 + 32))
        {
          v52 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 24, (void *)(v51 + 1), (unint64_t)&v95, v45, v46, v47, v48, v49);
          v54 = *v52;
          v53 = v52 + 1;
          v50 = v54;
          LODWORD(v51) = *(_DWORD *)(a3 + 36);
          v55 = *(_QWORD *)(a3 + 24);
        }
        else
        {
          v53 = &v96;
          v55 = *v17;
        }
        v56 = v55 + 12 * v51;
        *(_DWORD *)v56 = v50;
        *(_QWORD *)(v56 + 4) = *(_QWORD *)v53;
        ++*(_DWORD *)(a3 + 36);
      }
      v57 = *a1;
      if (v57 == 31)
      {
        v90 = a2[50];
        if (v90 + 4 > a2[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), v43, v44, v45, v46, v47, v48, v49);
          v90 = a2[50];
        }
        *(_DWORD *)(*((_QWORD *)a2 + 7) + v90) = 1262446591;
      }
      else
      {
        v58 = 65537 * (v57 & 0x1F) + 1258292192;
        v59 = a2[50];
        if (v59 + 4 > a2[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), v43, v44, v45, v46, v47, v48, v49);
          v59 = a2[50];
        }
        *(_DWORD *)(*((_QWORD *)a2 + 7) + v59) = v58;
      }
      v60 = a2[50] + 4;
      a2[50] = v60;
      v61 = *a1;
      if (v60 + 4 > a2[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), v43, v44, v45, v46, v47, v48, v49);
        v60 = a2[50];
      }
      result = 0;
      v63 = 65537 * (v61 & 0x1F) - 1442839712;
LABEL_32:
      *(_DWORD *)(*((_QWORD *)a2 + 7) + v60) = v63;
      a2[50] += 4;
      return result;
    }
    if (v12 == 63)
    {
      if (*a1 != 31)
      {
        v14 = v13 & 0x1F | 0xD2800000;
        goto LABEL_8;
      }
    }
    else if (v12 != 31 && v13 != 31)
    {
      v14 = *a1 | ((v12 & 0x1F) << 16) | 0xAA0003E0;
LABEL_8:
      v15 = a2 + 50;
      v12 = a2[50];
      v16 = a2 + 14;
      if (v12 + 4 > a2[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        v12 = *v15;
      }
      *(_DWORD *)(*v16 + v12) = v14;
      *v15 += 4;
      LOBYTE(v12) = a1[1];
      goto LABEL_11;
    }
    v14 = v13 | (32 * (char)a1[1]) | 0x91000000;
    goto LABEL_8;
  }
  if (v11 == 2)
  {
    v30 = (uint64_t *)(a3 + 24);
    JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 2, (char)a1[1], 27, a5, a6, a7, a8, (uint64_t)&v93);
    v36 = v93;
    if (v93 != -1)
    {
      v37 = *(unsigned int *)(a3 + 36);
      if ((_DWORD)v37 == *(_DWORD *)(a3 + 32))
      {
        v38 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 24, (void *)(v37 + 1), (unint64_t)&v93, v31, v32, v33, v34, v35);
        v40 = *v38;
        v39 = (uint64_t *)(v38 + 1);
        v36 = v40;
        LODWORD(v37) = *(_DWORD *)(a3 + 36);
        v41 = *(_QWORD *)(a3 + 24);
      }
      else
      {
        v39 = &v94;
        v41 = *v30;
      }
      v64 = v41 + 12 * v37;
      *(_DWORD *)v64 = v36;
      *(_QWORD *)(v64 + 4) = *v39;
      ++*(_DWORD *)(a3 + 36);
    }
    JSC::MacroAssemblerARM64::branchTest64((uint64_t)a2, 0, (char)a1[1], 27, v32, v33, v34, v35, (uint64_t)&v91);
    v72 = v91;
    if (v91 != -1)
    {
      v73 = *(unsigned int *)(a3 + 36);
      if ((_DWORD)v73 == *(_DWORD *)(a3 + 32))
      {
        v74 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 24, (void *)(v73 + 1), (unint64_t)&v91, v67, v68, v69, v70, v71);
        v76 = *v74;
        v75 = v74 + 1;
        v72 = v76;
        LODWORD(v73) = *(_DWORD *)(a3 + 36);
        v77 = *(_QWORD *)(a3 + 24);
      }
      else
      {
        v75 = &v92;
        v77 = *v30;
      }
      v78 = v77 + 12 * v73;
      *(_DWORD *)v78 = v72;
      *(_QWORD *)(v78 + 4) = *(_QWORD *)v75;
      ++*(_DWORD *)(a3 + 36);
    }
    v79 = *a1;
    if (a1[1] == v79)
    {
      v80 = (char)a1[2] | 0xB24103E0;
      v81 = a2[50];
      if (v81 + 4 > a2[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), v65, v66, v67, v68, v69, v70, v71);
        v81 = a2[50];
      }
      *(_DWORD *)(*((_QWORD *)a2 + 7) + v81) = v80;
      v82 = a2[50];
      v60 = v82 + 4;
      a2[50] = v82 + 4;
      v83 = a1[2];
      v84 = *a1;
      if ((v82 + 8) > a2[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), v65, v66, v67, v68, v69, v70, v71);
        v60 = a2[50];
      }
      result = 0;
      v63 = ((v83 & 0x1F) << 16) | (32 * (v84 & 0x1F)) | v84 & 0x1F | 0xCA000000;
      goto LABEL_32;
    }
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, 0x8000000000000000, (char)v79, v67, v68, v69, v70, v71);
    JSC::MacroAssemblerARM64::xor64(a2, (char)a1[1], (char)*a1, v85, v86, v87, v88, v89);
    return 0;
  }
  else if (v11 == 4)
  {
    return 2;
  }
  else
  {
    return 1;
  }
}

uint64_t JSC::JITNegGenerator::generateFastPath(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v14;
  int v15;
  unsigned int v17;
  unsigned int *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int *v34;
  int *v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned __int8 v42;
  int v43;
  unsigned int v44;
  char v45;
  uint64_t v46;
  int *v47;
  int *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int *v64;
  int *v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  char v72;
  unsigned __int8 v73;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  char v80;
  __int16 v81;
  char v82;
  int v83;
  int v84;
  unsigned int v85[3];

  v8 = a6;
  v14 = a1[1];
  v15 = (char)*a1;
  if (v14 == *a1)
    goto LABEL_14;
  if (v14 == 63)
  {
    if (*a1 != 31)
    {
      v17 = v15 & 0x1F | 0xD2800000;
      goto LABEL_11;
    }
LABEL_10:
    v17 = v15 | (32 * (char)a1[1]) | 0x91000000;
    goto LABEL_11;
  }
  if (v14 == 31 || v15 == 31)
    goto LABEL_10;
  v17 = *a1 | ((v14 & 0x1F) << 16) | 0xAA0003E0;
LABEL_11:
  v18 = (unsigned int *)(a2 + 200);
  v14 = *(_DWORD *)(a2 + 200);
  v19 = (_QWORD *)(a2 + 56);
  if (v14 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, (uint64_t)a5, a6, a7, a8);
    v14 = *v18;
  }
  *(_DWORD *)(*v19 + v14) = v17;
  *v18 += 4;
  LOBYTE(v14) = a1[1];
LABEL_14:
  JSC::MacroAssemblerARM64::branch64(a2, 3, (char)v14, 27, (uint64_t)a5, a6, a7, a8, (uint64_t)v85);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x7FFFFFFF, a2, 0, (char)a1[1], v20, v21, v22, v23, (uint64_t)&v83, v24);
  v32 = v83;
  if (v83 != -1)
  {
    v33 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v33 == *(_DWORD *)(a4 + 8))
    {
      v34 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v33 + 1), (unint64_t)&v83, v27, v28, v29, v30, v31);
      v36 = *v34;
      v35 = v34 + 1;
      v32 = v36;
      LODWORD(v33) = *(_DWORD *)(a4 + 12);
    }
    else
    {
      v35 = &v84;
    }
    v37 = *(_QWORD *)a4 + 12 * v33;
    *(_DWORD *)v37 = v32;
    *(_QWORD *)(v37 + 4) = *(_QWORD *)v35;
    ++*(_DWORD *)(a4 + 12);
  }
  v38 = *a1;
  if (v38 == 31)
  {
    v75 = *(_DWORD *)(a2 + 200);
    if (v75 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v25, v26, v27, v28, v29, v30, v31);
      v75 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v75) = 1262446591;
  }
  else
  {
    v39 = 65537 * (v38 & 0x1F) + 1258292192;
    v40 = *(_DWORD *)(a2 + 200);
    if (v40 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v25, v26, v27, v28, v29, v30, v31);
      v40 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v40) = v39;
  }
  v41 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v41;
  v42 = *a1;
  if (v41 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v25, v26, v27, v28, v29, v30, v31);
    v41 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v41) = 65537 * (v42 & 0x1F) - 1442839712;
  v43 = *(_DWORD *)(a2 + 200) + 4;
  for (*(_DWORD *)(a2 + 200) = v43; v43 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v43)
  {
    if ((v43 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v25, v26, v27, v28, v29, v30, v31);
      v43 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v43) = -721215457;
    v43 = *(_DWORD *)(a2 + 200) + 4;
  }
  v44 = v43;
  if ((v43 + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v25, v26, v27, v28, v29, v30, v31);
    v44 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v44) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v45 = 69;
  else
    v45 = 65;
  v78 = v43;
  v79 = 0;
  v80 = v45;
  v81 = 15;
  v82 = -1;
  if (v43 != -1)
  {
    v46 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v46 == *(_DWORD *)(a3 + 8))
    {
      v47 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v46 + 1), (unint64_t)&v78, v27, v28, v29, v30, v31);
      v49 = *v47;
      v48 = v47 + 1;
      v50 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
      *(_DWORD *)v50 = v49;
    }
    else
    {
      v48 = &v79;
      v50 = *(_QWORD *)a3 + 12 * v46;
      *(_DWORD *)v50 = v43;
    }
    *(_QWORD *)(v50 + 4) = *(_QWORD *)v48;
    ++*(_DWORD *)(a3 + 12);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v85, a2, v26, v27, v28, v29, v30, v31);
  JSC::MacroAssemblerARM64::branchTest64(a2, 0, (char)a1[1], 27, v51, v52, v53, v54, (uint64_t)&v76);
  v62 = v76;
  if (v76 != -1)
  {
    v63 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v63 == *(_DWORD *)(a4 + 8))
    {
      v64 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v63 + 1), (unint64_t)&v76, v57, v58, v59, v60, v61);
      v66 = *v64;
      v65 = v64 + 1;
      v62 = v66;
      LODWORD(v63) = *(_DWORD *)(a4 + 12);
    }
    else
    {
      v65 = &v77;
    }
    v67 = *(_QWORD *)a4 + 12 * v63;
    *(_DWORD *)v67 = v62;
    *(_QWORD *)(v67 + 4) = *(_QWORD *)v65;
    ++*(_DWORD *)(a4 + 12);
  }
  v68 = (char)a1[2] | 0xB24103E0;
  v69 = *(_DWORD *)(a2 + 200);
  if (v69 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v55, v56, v57, v58, v59, v60, v61);
    v69 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v69) = v68;
  v70 = *(_DWORD *)(a2 + 200);
  v71 = v70 + 4;
  *(_DWORD *)(a2 + 200) = v70 + 4;
  v72 = a1[2];
  v73 = *a1;
  if ((v70 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v55, v56, v57, v58, v59, v60, v61);
    v71 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v71) = ((v72 & 0x1F) << 16) | (32 * (v73 & 0x1F)) | v73 & 0x1F | 0xCA000000;
  *(_DWORD *)(a2 + 200) += 4;
  if (a5 && v8 && (*a5 & 0x103) == 0)
    JSC::ArithProfile<unsigned short>::emitSetDouble(a5, a2, (char)a1[2], v57, v58, v59, v60, v61);
  return 1;
}

void JSC::OpaqueByproducts::~OpaqueByproducts(uint64_t **this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v9 = *((unsigned int *)this + 3);
  if ((_DWORD)v9)
  {
    v11 = *this;
    v12 = 8 * v9;
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  v10 = (unint64_t)*this;
  if (*this)
  {
    *this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v9 = *((unsigned int *)this + 3);
  if ((_DWORD)v9)
  {
    v11 = *this;
    v12 = 8 * v9;
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  v10 = (unint64_t)*this;
  if (*this)
  {
    *this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::OpaqueByproducts::dump(uint64_t **this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  uint64_t result;
  WTF::PrintStream *v11;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v4, "%s", "Byproducts:\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v5 = *((unsigned int *)this + 3);
  if ((_DWORD)v5)
  {
    v6 = *this;
    v7 = 8 * v5;
    do
    {
      v8 = *v6++;
      v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v9, "%s", "    ");
      (*(void (**)(uint64_t, WTF::PrintStream *))(*(_QWORD *)v8 + 16))(v8, v9);
      WTF::PrintStream::printf(v9, "%s", "\n");
      result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v7 -= 8;
    }
    while (v7);
  }
  else
  {
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v11, "%s", "    <empty>\n");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return result;
}

void JSC::JIT::emit_op_mov(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  BOOL v24;
  char **v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v8 = a1;
  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v10 > 63)
      v10 += 1073741760;
    v12 = *((__int16 *)a2 + 2);
    if ((int)v12 <= 63)
      goto LABEL_6;
LABEL_13:
    v12 = (v12 + v11);
    goto LABEL_14;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    if (v10 > 15)
      v10 += 1073741808;
    v12 = (char)a2[2];
    if ((int)v12 <= 15)
    {
LABEL_6:
      v13 = v10;
LABEL_7:
      JSC::MacroAssemblerARM64::load64(a1, (v12 << 35) | 0x1D, 0, a4, a5, a6, a7, a8);
      v14 = (v13 << 35) | 0x1D;
LABEL_8:
      a1 = v8;
      v15 = 0;
      goto LABEL_9;
    }
    goto LABEL_13;
  }
  v10 = *(_DWORD *)(a2 + 2);
  v12 = *(unsigned int *)(a2 + 6);
LABEL_14:
  v13 = v10;
  if ((int)v12 < 0x40000000)
    goto LABEL_7;
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v17 = (v12 - 0x40000000);
  v18 = *(_DWORD **)(v16 + 120);
  if (!v18 || *v18 <= v17)
    goto LABEL_24;
  v19 = *((unsigned __int8 *)v18 + v17 + 4);
  if ((v19 - 1) >= 2)
  {
    if (v19)
    {
      if (v19 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x198742BE8);
      }
      goto LABEL_35;
    }
LABEL_24:
    v22 = *(_DWORD **)(v16 + 112);
    if (*v22 <= v17)
    {
      __break(0xC471u);
      JUMPOUT(0x198742C48);
    }
    v23 = *(_QWORD *)&v22[2 * v17 + 2];
    if (v23)
      v24 = (v23 & 0xFFFE000000000002) == 0;
    else
      v24 = 0;
    if (!v24)
      goto LABEL_18;
    v25 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x4C));
    if (v25 != &JSC::SymbolTable::s_info && v25 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_18;
LABEL_35:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(v8, 0xA000000000, 0, v27, v28, v29, v30, v31);
    JSC::MacroAssemblerARM64::load64(v8, v12 << 35, 0, v32, v33, v34, v35, v36);
    v14 = (v13 << 35) | 0x1D;
    goto LABEL_8;
  }
LABEL_18:
  v20 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v20 <= v17)
  {
    __break(0xC471u);
    JUMPOUT(0x198742C08);
  }
  v21 = *(_QWORD *)&v20[2 * v17 + 2];
  if (v21)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198742C28);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, v21, a1 + 264, a4, a5, a6, a7, a8);
    a1 = v8;
    v15 = 16;
  }
  else
  {
    v15 = 63;
  }
  v14 = (v13 << 35) | 0x1D;
LABEL_9:
  JSC::MacroAssemblerARM64::store64(a1, v15, v14, a4, a5, a6, a7, a8);
}

void JSC::JIT::emit_op_end(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  _DWORD *v36;
  _DWORD *v37;
  unint64_t v38;
  BOOL v39;
  char **v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char **v48;
  char *v49;

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    if ((int)v10 <= 63)
      goto LABEL_4;
    v31 = 1073741760;
LABEL_16:
    v10 = (v10 + v31);
    goto LABEL_17;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    if ((int)v10 < 16)
    {
LABEL_4:
      v11 = (v10 << 35) | 0x1D;
LABEL_5:
      JSC::MacroAssemblerARM64::load64(a1, v11, 0, a4, a5, a6, a7, a8);
      goto LABEL_6;
    }
    v31 = 1073741808;
    goto LABEL_16;
  }
  v10 = *(unsigned int *)(a2 + 2);
LABEL_17:
  if ((int)v10 < 0x40000000)
    goto LABEL_4;
  v32 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v33 = (v10 - 0x40000000);
  v34 = *(_DWORD **)(v32 + 120);
  if (!v34 || *v34 <= v33)
    goto LABEL_24;
  v35 = *((unsigned __int8 *)v34 + v33 + 4);
  if ((v35 - 1) >= 2)
  {
    if (v35)
    {
      if (v35 == 3)
        goto LABEL_35;
      goto LABEL_42;
    }
LABEL_24:
    v37 = *(_DWORD **)(v32 + 112);
    if (*v37 > v33)
    {
      v38 = *(_QWORD *)&v37[2 * v33 + 2];
      if (v38)
        v39 = (v38 & 0xFFFE000000000002) == 0;
      else
        v39 = 0;
      if (!v39)
        goto LABEL_21;
      v40 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0x4C));
      if (v40 != &JSC::SymbolTable::s_info && v40 != &JSC::JSTemplateObjectDescriptor::s_info)
        goto LABEL_21;
LABEL_35:
      JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v42, v43, v44, v45, v46);
      v11 = v10 << 35;
      goto LABEL_5;
    }
LABEL_42:
    __break(0xC471u);
    JUMPOUT(0x198742EC4);
  }
LABEL_21:
  v36 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v36 <= v33)
  {
    __break(0xC471u);
    JUMPOUT(0x198742F1CLL);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v36[2 * v33 + 2], 0, a4, a5, a6, a7, a8);
LABEL_6:
  v18 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
  if (v18 != -1)
  {
    v49 = &v47;
    v48 = &v49;
    std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, &v48, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
  }
  JSC::AssemblyHelpers::emitRestoreCalleeSavesFor((JSC::AssemblyHelpers *)a1, (const JSC::RegisterAtOffsetList *)&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result, v12, v13, v14, v15, v16, v17);
  v26 = *(_DWORD *)(a1 + 200);
  if (v26 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v19, v20, v21, v22, v23, v24, v25);
    v26 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v26) = -1862270017;
  v27 = *(_DWORD *)(a1 + 200);
  v28 = v27 + 4;
  *(_DWORD *)(a1 + 200) = v27 + 4;
  if ((v27 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v19, v20, v21, v22, v23, v24, v25);
    v28 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = -1463714819;
  v29 = *(_DWORD *)(a1 + 200);
  v30 = v29 + 4;
  *(_DWORD *)(a1 + 200) = v29 + 4;
  if ((v29 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v19, v20, v21, v22, v23, v24, v25);
    v30 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v30) = -698416192;
  *(_DWORD *)(a1 + 200) += 4;
}

uint64_t JSC::JIT::emit_op_jmp(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  JSC::AssemblerBuffer *v11;
  int i;
  unsigned int v13;
  uint64_t result;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  JSC::AssemblerBuffer *v33;
  int v34;
  unint64_t v35;
  int v36;

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
  }
  else if (v9 == 130)
  {
    v10 = *(_DWORD *)(a2 + 2);
  }
  else
  {
    v10 = (char)a2[1];
  }
  if (!v10)
  {
    v19 = *(_QWORD *)(a1 + 808);
    v20 = *(_QWORD *)(v19 + 80);
    v21 = *(_QWORD *)v20;
    v22 = *(unsigned int *)(v20 + 12) + *(_QWORD *)v20;
    if (v21 > (unint64_t)a2 || v22 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198743168);
    }
    v24 = *(_QWORD *)(v19 + 144);
    if (v24)
    {
      v25 = (_DWORD)a2 - v21;
      v26 = *(_DWORD *)(v24 - 8);
      v27 = 9 * ((~(v25 << 15) + v25) ^ ((~(v25 << 15) + v25) >> 10));
      v28 = (v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11);
      v29 = v26 & (v28 ^ HIWORD(v28));
      v30 = *(_DWORD *)(v24 + 8 * v29);
      if (v30 == v25)
      {
LABEL_20:
        v10 = *(_DWORD *)(v24 + 8 * v29 + 4);
        goto LABEL_5;
      }
      v32 = 1;
      while (v30)
      {
        v29 = ((_DWORD)v29 + v32) & v26;
        v30 = *(_DWORD *)(v24 + 8 * v29);
        ++v32;
        if (v30 == v25)
          goto LABEL_20;
      }
    }
    v10 = 0;
  }
LABEL_5:
  v11 = (JSC::AssemblerBuffer *)(a1 + 56);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      v33 = v11;
      JSC::AssemblerBuffer::outOfLineGrow(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v11 = v33;
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v13 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  result = a1 + 624;
  v15 = 0xFF000F4500000000;
  if (!*(_BYTE *)(a1 + 328))
    v15 = 0xFF000F4100000000;
  v16 = v10 + (*(_DWORD *)(a1 + 640) >> 2);
  v34 = i;
  v35 = v15;
  v36 = v16;
  v17 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v17 == *(_DWORD *)(a1 + 632))
  {
    result = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v17 + 1, (unint64_t)&v34);
    v31 = *(_QWORD *)(a1 + 624) + 16 * *(unsigned int *)(a1 + 636);
    *(_DWORD *)v31 = *(_DWORD *)result;
    *(_QWORD *)(v31 + 4) = *(_QWORD *)(result + 4);
    *(_DWORD *)(v31 + 12) = *(_DWORD *)(result + 12);
  }
  else
  {
    v18 = *(_QWORD *)result + 16 * v17;
    *(_DWORD *)v18 = i;
    *(_QWORD *)(v18 + 4) = v15;
    *(_DWORD *)(v18 + 12) = v16;
  }
  ++*(_DWORD *)(a1 + 636);
  return result;
}

void JSC::JIT::emit_op_new_object(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int8x8_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  WTF *v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  _DWORD *v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  WTF *v72;
  uint64_t v73;
  _BYTE v74[24];
  __int128 v75;

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    if (v10 <= 63)
      v11 = v10;
    else
      v11 = (v10 + 1073741760);
    v12 = *((unsigned __int16 *)a2 + 3);
  }
  else if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v12 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v71 = (char)a2[1];
    if (v71 <= 15)
      v11 = v71;
    else
      v11 = (v71 + 1073741808);
    v12 = a2[3];
  }
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v13)
    v14 = *(unsigned __int16 *)(v13 + 58);
  else
    v14 = *(_DWORD *)(v13 + 212);
  v15 = 16 * v12;
  JSC::MacroAssemblerARM64::load64(a1, ((unint64_t)((((v14 + 7) & 0xFFFFFFF8) + 16 * v12) >> 3) << 35) | 0x19, 1, a4, a5, a6, a7, a8);
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v21)
    v22 = *(unsigned __int16 *)(v21 + 58);
  else
    v22 = *(_DWORD *)(v21 + 212);
  JSC::MacroAssemblerARM64::load64(a1, ((unint64_t)((v15 | 8) + ((v22 + 7) & 0xFFFFFFF8)) << 32) | 0x19, 3, v16, v17, v18, v19, v20);
  v72 = (WTF *)v74;
  v73 = 2;
  v75 = xmmword_199123080;
  JSC::AssemblyHelpers::emitAllocateJSObject<JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((_DWORD *)a1, (uint64_t)&v75, 3u, 2, (uint64_t)&v72, (int8x8_t)1, v23, v24, v25);
  v34 = *(_DWORD *)(a1 + 200);
  if (v34 + 4 > *(_DWORD *)(a1 + 192))
  {
    v33 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v26, v27, v28, v29, v30, v31, v32).n128_u64[0];
    v34 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v34) = 943775842;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AssemblyHelpers::emitInitializeInlineStorage(a1, 0, 2, v33, v28, v29, v30, v31, v32);
  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded((JSC::AssemblyHelpers *)a1, *(JSC::VM **)(a1 + 352), v35, v36, v37, v38, v39, (uint64_t)&v75);
  v47 = *(_DWORD *)(a1 + 200);
  if (v47 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v40, v41, v42, v43, v44, v45, v46);
    v47 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v47) = -721208641;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v75, a1, v41, v42, v43, v44, v45, v46);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v11 << 35) | 0x1D, v48, v49, v50, v51, v52);
  v60 = v72;
  if (HIDWORD(v73))
  {
    v61 = (WTF *)((char *)v72 + 12 * HIDWORD(v73));
    v62 = *(_DWORD *)(a1 + 660);
    do
    {
      v63 = *(_DWORD *)v60;
      v64 = *(_QWORD *)((char *)v60 + 4);
      v65 = *(_DWORD *)(a1 + 640);
      LODWORD(v75) = *(_DWORD *)v60;
      *(_QWORD *)((char *)&v75 + 4) = v64;
      HIDWORD(v75) = v65;
      if (v62 == *(_DWORD *)(a1 + 656))
      {
        v69 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v62 + 1, (unint64_t)&v75);
        v70 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
        *(_DWORD *)v70 = *(_DWORD *)v69;
        *(_QWORD *)(v70 + 4) = *(_QWORD *)(v69 + 4);
        v67 = (_DWORD *)(v70 + 12);
        v68 = (_DWORD *)(v69 + 12);
      }
      else
      {
        v66 = *(_QWORD *)(a1 + 648) + 16 * v62;
        *(_DWORD *)v66 = v63;
        *(_QWORD *)(v66 + 4) = *(_QWORD *)((char *)&v75 + 4);
        v67 = (_DWORD *)(v66 + 12);
        v68 = (_DWORD *)&v75 + 3;
      }
      *v67 = *v68;
      v62 = *(_DWORD *)(a1 + 660) + 1;
      *(_DWORD *)(a1 + 660) = v62;
      v60 = (WTF *)((char *)v60 + 12);
    }
    while (v60 != v61);
    v60 = v72;
  }
  if (v74 != (_BYTE *)v60)
  {
    if (v60)
    {
      v72 = 0;
      LODWORD(v73) = 0;
      WTF::fastFree((unint64_t)v60, v53, v54, v55, v56, v57, v58, v59);
    }
  }
}

void JSC::AssemblyHelpers::emitAllocateJSObject<JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>(_DWORD *a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, int8x8_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;

  JSC::AssemblyHelpers::emitAllocate((uint64_t)a1, 0, a2, 1, a4, a5, 1, a9, a6);
  v19 = a1[50];
  if (v19 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v12, v13, v14, v15, v16, v17, v18);
    v19 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v19) = a4 & 0x1F | (32 * (a3 & 0x1F)) | 0xD344FC00;
  v20 = a1[50];
  v21 = v20 + 4;
  a1[50] = v20 + 4;
  if ((v20 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v12, v13, v14, v15, v16, v17, v18);
    v21 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v21) = a4 & 0x1F | 0xB8000000;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::load32((uint64_t)a1, a3 | 0x800000000, a4, v14, v15, v16, v17, v18);
  v29 = a1[50];
  if (v29 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v22, v23, v24, v25, v26, v27, v28);
    v29 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v29) = a4 & 0x1F | 0xB8004000;
  v30 = a1[50];
  v31 = v30 + 4;
  a1[50] = v30 + 4;
  if ((v30 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v22, v23, v24, v25, v26, v27, v28);
    v31 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v31) = -134184929;
  a1[50] += 4;
}

_QWORD *JSC::JIT::callOperationNoExceptionCheck<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID>@<X0>(JSC::ARM64LogicalImmediate *this@<X2>, uint64_t a2@<X0>, unsigned __int8 *a3@<X1>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int *a9@<X8>)
{
  unsigned int v9;
  uint64_t v11;
  __int16 *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint8x8_t v21;
  __int32 v22;
  uint8x8_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  unsigned __int8 v31;
  char v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned __int8 *v38;
  uint64_t v39;
  __int16 *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  __int16 *v48;
  JSC::AssemblerBuffer *v49;
  unsigned int v50;
  unsigned int v51;
  __int16 v52;
  _BYTE v53[6];

  v11 = (uint64_t)a3;
  v14 = &v52;
  if ((_DWORD)a4 != 1)
  {
    v52 = a4 | 0x100;
    v50 = 1;
    v49 = (JSC::AssemblerBuffer *)(a2 + 56);
    v15 = 1;
    do
    {
      v16 = 0;
      v17 = 0;
      v18 = v15;
      do
      {
        if ((v53[v16 - 1] & 0x40) != 0)
        {
LABEL_60:
          __break(1u);
          goto LABEL_61;
        }
        v17 |= 1 << v53[v16 - 1];
        v16 += 2;
      }
      while (2 * v15 != v16);
      v19 = 0;
      do
      {
        v20 = v53[v19 - 2] & 0x7F;
        if (v20 >= 0x40)
          goto LABEL_60;
        v17 &= ~(1 << v20);
        v19 += 2;
      }
      while (2 * v15 != v19);
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
      v21.i16[0] = vaddlv_u8(v21);
      v22 = v21.i32[0];
      v23 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v17));
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.i32[0] + v22)
      {
        v24 = 0;
        if (v15 <= 1)
          v25 = 1;
        else
          v25 = v15;
        v26 = 2 * v25;
        while (1)
        {
          v27 = v53[v24 - 1];
          if ((v27 & 0x7Fu) >= 0x40)
            goto LABEL_60;
          if (((v17 >> (v27 & 0x7F)) & 1) != 0)
            break;
          v24 += 2;
          if (v26 == v24)
            goto LABEL_33;
        }
        v28 = v53[v24 - 2];
        if (v28 != v27)
        {
          if ((char)v28 == 63)
          {
            if (v27 == 31)
              goto LABEL_27;
            v9 = v27 & 0x1F | 0xD2800000;
          }
          else
          {
            v29 = (char)v27 == 31 || (char)v28 == 31;
            if (!v29)
            {
              v9 = v27 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v9 = (char)v27 | (32 * (char)v28) | 0x91000000;
          }
LABEL_28:
          v30 = *(_DWORD *)(a2 + 200);
          if (v30 + 4 > *(_DWORD *)(a2 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v49, (uint64_t)a3, (uint64_t)this, a4, a5, a6, a7, a8);
            v30 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = v9;
          *(_DWORD *)(a2 + 200) += 4;
          v18 = v50;
        }
        memmove(&v53[v24 - 2], &v53[v24], 2 * v18 - v24 - 2);
        v15 = v50 - 1;
        goto LABEL_32;
      }
      v48 = v14;
      v31 = HIBYTE(v52);
      v32 = v52;
      JSC::MacroAssemblerARM64::swap(a2, (char)v52, SHIBYTE(v52), a4, a5, a6, a7, a8);
      memmove(&v52, v53, 2 * v50 - 2);
      v33 = v50 - 1;
      v29 = v50 == 1;
      v51 = v33;
      v34 = (char *)&v52;
      v35 = &v53[2 * v33 - 2];
      if (v29)
      {
        v36 = 0;
        v37 = 0;
        v9 = 0;
        a3 = &v53[2 * v33 - 2];
      }
      else
      {
        v39 = 2 * v33;
        v40 = &v52;
        while (*(unsigned __int8 *)v40 != v31)
        {
          ++v40;
          v39 -= 2;
          if (!v39)
            goto LABEL_43;
        }
        *(_BYTE *)v40 = v32;
LABEL_43:
        v9 = 0;
        v41 = (char *)&v52;
        a3 = (unsigned __int8 *)v35;
        v42 = v35;
        do
        {
          if (*v34 == v34[1])
          {
            v43 = v34;
            if (v42 != &v53[2 * v51 - 2])
            {
              if (v34 == (char *)a3)
              {
                v43 = v42;
              }
              else
              {
                v44 = v41 - (char *)a3;
                memmove(v42, a3, v41 - (char *)a3);
                v43 = &v42[v44];
              }
            }
            a3 = (unsigned __int8 *)(v34 + 2);
            ++v9;
            v42 = v43;
          }
          v34 += 2;
          v41 += 2;
        }
        while (v34 < v35);
        v36 = v51;
        v37 = v51;
        v35 = v42;
      }
      v38 = &v53[2 * v36 - 2];
      if (a3 != v38)
      {
        memmove(v35, a3, v38 - a3);
        v37 = v51;
      }
      v15 = v37 - v9;
      v14 = v48;
LABEL_32:
      v50 = v15;
LABEL_33:
      ;
    }
    while (v15);
    if (v14 != &v52 && &v52)
      WTF::fastFree((unint64_t)&v52, a3, (uint64_t)this, a4, a5, a6, a7, a8);
  }
  v9 = -1207811152;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)this, 0, a4, a5, a6, a7, a8);
  v45 = *(unsigned int *)(a2 + 640);
  if (v45 >= 4)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198743A2CLL);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)(v45 >> 2), a2 + 264, a4, a5, a6, a7, a8);
  }
  else
  {
    v9 = -1207811137;
  }
  v46 = *(_DWORD *)(a2 + 200);
  if (v46 + 4 > *(_DWORD *)(a2 + 192))
  {
LABEL_61:
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)a3, (uint64_t)this, a4, a5, a6, a7, a8);
    v46 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v46) = v9;
  *(_DWORD *)(a2 + 200) += 4;
  return JSC::JIT::appendCall(a2, v11, (uint64_t)this, a4, a5, a6, a7, a8, a9);
}

void JSC::JIT::emit_op_overrides_has_instance(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  int v65;
  _DWORD *v66;
  _DWORD *v67;
  unint64_t v68;
  BOOL v69;
  char **v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  int v82;
  _DWORD *v83;
  _DWORD *v84;
  unint64_t v85;
  BOOL v86;
  char **v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94[3];

  v9 = *a2;
  if (v9 == 130)
  {
    v12 = *(unsigned int *)(a2 + 2);
    v14 = *(unsigned int *)(a2 + 6);
    v15 = *(unsigned int *)(a2 + 10);
  }
  else
  {
    if (v9 == 128)
    {
      v77 = *((__int16 *)a2 + 1);
      v11 = 1073741760;
      if (v77 <= 63)
        v12 = v77;
      else
        v12 = (v77 + 1073741760);
      v78 = *((__int16 *)a2 + 2);
      if (v78 <= 63)
        v14 = v78;
      else
        v14 = (v78 + 1073741760);
      v15 = *((__int16 *)a2 + 3);
      if ((int)v15 <= 63)
        goto LABEL_10;
    }
    else
    {
      v10 = (char)a2[1];
      v11 = 1073741808;
      if (v10 <= 15)
        v12 = v10;
      else
        v12 = (v10 + 1073741808);
      v13 = (char)a2[2];
      if (v13 <= 15)
        v14 = v13;
      else
        v14 = (v13 + 1073741808);
      v15 = (char)a2[3];
      if ((int)v15 <= 15)
      {
LABEL_10:
        v16 = v14;
LABEL_11:
        v17 = (v15 << 35) | 0x1D;
LABEL_12:
        JSC::MacroAssemblerARM64::load64(a1, v17, 2, a4, a5, a6, a7, a8);
        goto LABEL_13;
      }
    }
    v15 = (v15 + v11);
  }
  v16 = v14;
  if ((int)v15 < 0x40000000)
    goto LABEL_11;
  v79 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v80 = (v15 - 0x40000000);
  v81 = *(_DWORD **)(v79 + 120);
  if (!v81 || *v81 <= v80)
    goto LABEL_69;
  v82 = *((unsigned __int8 *)v81 + v80 + 4);
  if ((v82 - 1) >= 2)
  {
    if (v82)
    {
      if (v82 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x198743FD8);
      }
      goto LABEL_80;
    }
LABEL_69:
    v84 = *(_DWORD **)(v79 + 112);
    if (*v84 <= v80)
    {
      __break(0xC471u);
      goto LABEL_87;
    }
    v85 = *(_QWORD *)&v84[2 * v80 + 2];
    if (v85)
      v86 = (v85 & 0xFFFE000000000002) == 0;
    else
      v86 = 0;
    if (!v86)
      goto LABEL_66;
    v87 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v85 & 0xFFFFFFFE) + 0x4C));
    if (v87 != &JSC::SymbolTable::s_info && v87 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_66;
LABEL_80:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 2, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000002, 2, v89, v90, v91, v92, v93);
    v17 = (v15 << 35) | 2;
    goto LABEL_12;
  }
LABEL_66:
  v83 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v83 <= v80)
  {
    __break(0xC471u);
    JUMPOUT(0x198743FF8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v83[2 * v80 + 2], 2, a4, a5, a6, a7, a8);
LABEL_13:
  v25 = *(_DWORD *)(a1 + 200);
  if (v25 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v18, v19, v20, v21, v22, v23, v24);
    v25 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = 838861792;
  v26 = *(_DWORD *)(a1 + 200);
  v27 = v26 + 4;
  *(_DWORD *)(a1 + 200) = v26 + 4;
  if ((v26 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v18, v19, v20, v21, v22, v23, v24);
    v27 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = -129989823;
  v28 = *(_DWORD *)(a1 + 200);
  v29 = v28 + 4;
  *(_DWORD *)(a1 + 200) = v28 + 4;
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198743E04);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v30 = *(_BYTE *)(a1 + 304) & 0x1F | 0xF9411820;
  if ((v28 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v18, v19, v20, v21, v22, v23, v24);
    v29 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = v30;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch64(a1, 1, 2, 17, v21, v22, v23, v24, (uint64_t)v94);
  if ((int)v14 < 0x40000000)
  {
    v36 = (v16 << 35) | 0x1D;
LABEL_22:
    JSC::MacroAssemblerARM64::load64(a1, v36, 2, v31, v32, v33, v34, v35);
    goto LABEL_23;
  }
  v62 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v63 = (v16 - 0x40000000);
  v64 = *(_DWORD **)(v62 + 120);
  if (!v64 || *v64 <= v63)
  {
LABEL_37:
    v67 = *(_DWORD **)(v62 + 112);
    if (*v67 <= v63)
    {
      __break(0xC471u);
      JUMPOUT(0x198744038);
    }
    v68 = *(_QWORD *)&v67[2 * v63 + 2];
    if (v68)
      v69 = (v68 & 0xFFFE000000000002) == 0;
    else
      v69 = 0;
    if (!v69)
      goto LABEL_34;
    v70 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v68 & 0xFFFFFFFE) + 0x4C));
    if (v70 != &JSC::SymbolTable::s_info && v70 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_34;
LABEL_48:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 2, v31, v32, v33, v34, v35);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000002, 2, v72, v73, v74, v75, v76);
    v36 = (v14 << 35) | 2;
    goto LABEL_22;
  }
  v65 = *((unsigned __int8 *)v64 + v63 + 4);
  if ((v65 - 1) >= 2)
  {
    if (!v65)
      goto LABEL_37;
    if (v65 == 3)
      goto LABEL_48;
    __break(0xC471u);
LABEL_87:
    JUMPOUT(0x198743DC4);
  }
LABEL_34:
  v66 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v66 <= (v14 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x198744018);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v66[2 * (v14 - 0x40000000) + 2], 2, v31, v32, v33, v34, v35);
LABEL_23:
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198743E34);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v44 = *(_BYTE *)(a1 + 304) & 0x1F | 0x38406040;
  v45 = *(_DWORD *)(a1 + 200);
  if (v45 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v37, v38, v39, v40, v41, v42, v43);
    v45 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v45) = v44;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::test32(a1, 17, (JSC::ARM64LogicalImmediate *)2, v39, v40, v41, v42, v43);
  v53 = *(_DWORD *)(a1 + 200);
  if (v53 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v46, v47, v48, v49, v50, v51, v52);
    v53 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v53) = 446633952;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v94, a1, v47, v48, v49, v50, v51, v52);
  v61 = *(_DWORD *)(a1 + 200);
  if (v61 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v54, v55, v56, v57, v58, v59, v60);
    v61 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v61) = 285218816;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 0, (v12 << 35) | 0x1D, v56, v57, v58, v59, v60);
}

void JSC::JIT::emit_op_instanceof(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  _DWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  __int128 *v69;
  uint64_t v70;
  __int128 v71;
  _QWORD *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  int v90;
  _DWORD *v91;
  _DWORD *v92;
  unint64_t v93;
  BOOL v94;
  char **v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int *v106;
  uint64_t v107;
  uint64_t v108;
  _DWORD *v109;
  _DWORD *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  int v115;
  _DWORD *v116;
  _DWORD *v117;
  unint64_t v118;
  BOOL v119;
  char **v120;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  char v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  int v140;
  int v141;
  _OWORD v142[2];

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v10 > 63)
      v10 += 1073741760;
    LODWORD(v12) = *((__int16 *)a2 + 2);
    v111 = *((__int16 *)a2 + 3);
    if (v111 <= 63)
      v14 = v111;
    else
      v14 = (v111 + 1073741760);
    if ((int)v12 <= 63)
      goto LABEL_9;
  }
  else
  {
    if (v9 == 130)
    {
      v10 = *(_DWORD *)(a2 + 2);
      v12 = *(unsigned int *)(a2 + 6);
      v14 = *(unsigned int *)(a2 + 10);
      goto LABEL_87;
    }
    v10 = (char)a2[1];
    v11 = 1073741808;
    if (v10 > 15)
      v10 += 1073741808;
    LODWORD(v12) = (char)a2[2];
    v13 = (char)a2[3];
    if (v13 <= 15)
      v14 = v13;
    else
      v14 = (v13 + 1073741808);
    if ((int)v12 <= 15)
    {
LABEL_9:
      v15 = v12;
      v16 = v10;
LABEL_10:
      JSC::MacroAssemblerARM64::load64(a1, (v15 << 35) | 0x1D, 0, a4, a5, a6, a7, a8);
      v22 = 0;
      goto LABEL_11;
    }
  }
  v12 = (v12 + v11);
LABEL_87:
  v15 = v12;
  v16 = v10;
  if ((int)v12 < 0x40000000)
    goto LABEL_10;
  v112 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v113 = (v12 - 0x40000000);
  v114 = *(_DWORD **)(v112 + 120);
  if (!v114 || *v114 <= v113)
    goto LABEL_95;
  v115 = *((unsigned __int8 *)v114 + v113 + 4);
  if ((v115 - 1) < 2)
  {
LABEL_91:
    v116 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
    if (*v116 <= v113)
    {
      __break(0xC471u);
      JUMPOUT(0x1987448F0);
    }
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v116[2 * v113 + 2], 0, a4, a5, a6, a7, a8);
    goto LABEL_93;
  }
  if (v115)
  {
    if (v115 != 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1987448D0);
    }
  }
  else
  {
LABEL_95:
    v117 = *(_DWORD **)(v112 + 112);
    if (*v117 <= v113)
    {
      __break(0xC471u);
      JUMPOUT(0x198744910);
    }
    v118 = *(_QWORD *)&v117[2 * v113 + 2];
    if (v118)
      v119 = (v118 & 0xFFFE000000000002) == 0;
    else
      v119 = 0;
    if (!v119)
      goto LABEL_91;
    v120 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v118 & 0xFFFFFFFE) + 0x4C));
    if (v120 != &JSC::SymbolTable::s_info && v120 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_91;
  }
  JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v122, v123, v124, v125, v126);
  JSC::MacroAssemblerARM64::load64(a1, v12 << 35, 0, v127, v128, v129, v130, v131);
LABEL_93:
  v22 = 1;
LABEL_11:
  if ((int)v14 < 0x40000000)
  {
    v23 = (v14 << 35) | 0x1D;
LABEL_13:
    JSC::MacroAssemblerARM64::load64(a1, v23, 1, v17, v18, v19, v20, v21);
    goto LABEL_14;
  }
  v87 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v88 = (v14 - 0x40000000);
  v89 = *(_DWORD **)(v87 + 120);
  if (!v89 || *v89 <= v88)
    goto LABEL_43;
  v90 = *((unsigned __int8 *)v89 + v88 + 4);
  if ((v90 - 1) >= 2)
  {
    if (v90)
    {
      if (v90 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987445D8);
      }
      goto LABEL_54;
    }
LABEL_43:
    v92 = *(_DWORD **)(v87 + 112);
    if (*v92 <= v88)
    {
      __break(0xC471u);
      JUMPOUT(0x198744760);
    }
    v93 = *(_QWORD *)&v92[2 * v88 + 2];
    if (v93)
      v94 = (v93 & 0xFFFE000000000002) == 0;
    else
      v94 = 0;
    if (!v94)
      goto LABEL_40;
    v95 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v93 & 0xFFFFFFFE) + 0x4C));
    if (v95 != &JSC::SymbolTable::s_info && v95 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_40;
LABEL_54:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v17, v18, v19, v20, v21);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v97, v98, v99, v100, v101);
    v23 = (v14 << 35) | 1;
    goto LABEL_13;
  }
LABEL_40:
  v91 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v91 <= v88)
  {
    __break(0xC471u);
    JUMPOUT(0x198744740);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v91[2 * v88 + 2], 1, v17, v18, v19, v20, v21);
LABEL_14:
  v24 = *(_DWORD *)(a1 + 888);
  v25 = WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 888);
  JSC::MacroAssemblerARM64::sub64(a1, 26, (136 * v24 + 136), 2, v26, v27, v28, v29);
  if (!v22)
  {
LABEL_15:
    JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v30, v31, v32, v33, v34, (uint64_t)v142);
    v35 = (_QWORD *)(a1 + 648);
    v36 = *(_DWORD *)(a1 + 640);
    LODWORD(v134) = v142[0];
    *(_QWORD *)((char *)&v134 + 4) = *(_QWORD *)((char *)v142 + 4);
    HIDWORD(v134) = v36;
    v37 = *(unsigned int *)(a1 + 660);
    if ((_DWORD)v37 == *(_DWORD *)(a1 + 656))
    {
      v83 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v37 + 1, (unint64_t)&v134);
      v84 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
      *(_DWORD *)v84 = *(_DWORD *)v83;
      *(_QWORD *)(v84 + 4) = *(_QWORD *)(v83 + 4);
      v40 = (_DWORD *)(v84 + 12);
      v38 = (_DWORD *)(v83 + 12);
    }
    else
    {
      v38 = (_DWORD *)&v134 + 3;
      v39 = *v35 + 16 * v37;
      *(_DWORD *)v39 = v142[0];
      *(_QWORD *)(v39 + 4) = *(_QWORD *)((char *)&v134 + 4);
      v40 = (_DWORD *)(v39 + 12);
    }
    *v40 = *v38;
    ++*(_DWORD *)(a1 + 660);
    goto LABEL_18;
  }
  v102 = *(_QWORD *)(a1 + 808);
  v103 = *(_DWORD **)(v102 + 120);
  if (v103)
  {
    v104 = (v12 - 0x40000000);
    if (*v103 > v104 && *((_BYTE *)v103 + v104 + 4) == 3)
      goto LABEL_18;
    v105 = v15 - 0x40000000;
    if (*v103 > (v15 - 0x40000000) && *((_BYTE *)v103 + v105 + 4) == 3)
    {
      __break(0xC471u);
      JUMPOUT(0x198744970);
    }
  }
  else
  {
    v105 = v15 - 0x40000000;
  }
  v106 = *(unsigned int **)(v102 + 112);
  if (*v106 <= v105)
  {
    __break(0xC471u);
    JUMPOUT(0x198744990);
  }
  if ((*(_QWORD *)&v106[2 * v105 + 2] & 0xFFFE000000000002) != 0)
    goto LABEL_15;
LABEL_18:
  if ((int)v14 < 0x40000000)
    goto LABEL_19;
  v107 = *(_QWORD *)(a1 + 808);
  v108 = (v14 - 0x40000000);
  v109 = *(_DWORD **)(v107 + 120);
  if (!v109 || *v109 <= v108 || *((_BYTE *)v109 + v108 + 4) != 3)
  {
    v110 = *(_DWORD **)(v107 + 112);
    if (*v110 <= v108)
    {
      __break(0xC471u);
      JUMPOUT(0x198744950);
    }
    if ((*(_QWORD *)&v110[2 * v108 + 2] & 0xFFFE000000000002) != 0)
    {
LABEL_19:
      JSC::AssemblyHelpers::branchIfNotCell(a1, 1, 1, v30, v31, v32, v33, v34, (uint64_t)v142);
      v41 = (_QWORD *)(a1 + 648);
      v42 = *(_QWORD *)((char *)v142 + 4);
      v43 = *(_DWORD *)(a1 + 640);
      LODWORD(v134) = v142[0];
      *(_QWORD *)((char *)&v134 + 4) = *(_QWORD *)((char *)v142 + 4);
      HIDWORD(v134) = v43;
      v44 = *(unsigned int *)(a1 + 660);
      if ((_DWORD)v44 == *(_DWORD *)(a1 + 656))
      {
        v85 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v44 + 1, (unint64_t)&v134);
        v86 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
        *(_DWORD *)v86 = *(_DWORD *)v85;
        *(_QWORD *)(v86 + 4) = *(_QWORD *)(v85 + 4);
        *(_DWORD *)(v86 + 12) = *(_DWORD *)(v85 + 12);
      }
      else
      {
        v45 = *v41 + 16 * v44;
        *(_DWORD *)v45 = v142[0];
        *(_QWORD *)(v45 + 4) = v42;
        *(_DWORD *)(v45 + 12) = v43;
      }
      ++*(_DWORD *)(a1 + 660);
    }
  }
  v46 = 0;
  v47 = *(unsigned int *)(a1 + 640);
  v48 = 2;
  if ((_DWORD)v47 != -1 && (_DWORD)v47 != 0x3FFFFFFF)
  {
    if (v47 >> 28)
    {
      v46 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v46 = 0;
      *(_DWORD *)(v46 + 8) = v47;
      LODWORD(v47) = *(_DWORD *)(a1 + 640);
      v48 = 1;
    }
    else
    {
      v48 = 0;
      v46 = v47 << 36;
    }
  }
  v133 = v46 | v48;
  v142[0] = xmmword_199156F50;
  BYTE4(v132) = 0;
  LODWORD(v132) = 33619968;
  JSC::JITInstanceOfGenerator::JITInstanceOfGenerator((uint64_t)&v134, 0, v25, 1, 0, &v133, v47 >> 2, (uint64_t)v142, v132);
  if ((v133 & 1) != 0 && (v133 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v133 & 0xFFFFFFFF8, v49, v50, v51, v52, v53, v54, v55);
  JSC::JITInlineCacheGenerator::generateBaselineDataICFastPath((uint64_t)&v134, (JSC::MacroAssemblerARM64 *)a1, 2, v51, v52, v53, v54, v55);
  v63 = (_QWORD *)(a1 + 648);
  v64 = *(_DWORD *)(a1 + 640);
  LODWORD(v142[0]) = -1;
  *(_QWORD *)((char *)v142 + 4) = 0xFF000F4100000000;
  HIDWORD(v142[0]) = v64;
  v65 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v65 == *(_DWORD *)(a1 + 656))
  {
    v81 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v63, v65 + 1, (unint64_t)v142);
    v82 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v82 = *(_DWORD *)v81;
    *(_QWORD *)(v82 + 4) = *(_QWORD *)(v81 + 4);
    *(_DWORD *)(v82 + 12) = *(_DWORD *)(v81 + 12);
  }
  else
  {
    v66 = *v63 + 16 * v65;
    *(_DWORD *)v66 = -1;
    *(_QWORD *)(v66 + 4) = 0xFF000F4100000000;
    *(_DWORD *)(v66 + 12) = v64;
  }
  ++*(_DWORD *)(a1 + 660);
  v67 = (_QWORD *)(a1 + 576);
  v68 = *(unsigned int *)(a1 + 588);
  if ((_DWORD)v68 == *(_DWORD *)(a1 + 584))
  {
    v69 = (__int128 *)WTF::Vector<JSC::JITInstanceOfGenerator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v67, v68 + 1, (unint64_t)&v134);
    v70 = *(_QWORD *)(a1 + 576) + 56 * *(unsigned int *)(a1 + 588);
    v71 = *v69;
    *(_BYTE *)(v70 + 16) = *((_BYTE *)v69 + 16);
    *(_OWORD *)v70 = v71;
    *(_DWORD *)(v70 + 20) = *((_DWORD *)v69 + 5);
    *(_DWORD *)(v70 + 24) = *((_DWORD *)v69 + 6);
    *(_DWORD *)(v70 + 28) = *((_DWORD *)v69 + 7);
    *(_QWORD *)(v70 + 32) = *((_QWORD *)v69 + 4);
    *(_DWORD *)(v70 + 40) = *((_DWORD *)v69 + 10);
    v72 = (_QWORD *)(v70 + 44);
  }
  else
  {
    v79 = *v67 + 56 * v68;
    v80 = v134;
    *(_BYTE *)(v79 + 16) = v135;
    *(_OWORD *)v79 = v80;
    *(_DWORD *)(v79 + 20) = v136;
    *(_DWORD *)(v79 + 24) = v137;
    *(_DWORD *)(v79 + 28) = v138;
    *(_QWORD *)(v79 + 32) = v139;
    *(_DWORD *)(v79 + 40) = v140;
    v72 = (_QWORD *)(v79 + 44);
    v69 = &v134;
  }
  *v72 = *(_QWORD *)((char *)v69 + 44);
  ++*(_DWORD *)(a1 + 588);
  v73 = *(_DWORD *)(a1 + 200);
  v141 = v73;
  if (v73 < *(_DWORD *)(a1 + 52))
  {
    do
    {
      if ((v73 + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v56, v57, v58, v59, v60, v61, v62);
        v73 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v73) = -721215457;
      v73 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v73;
    }
    while (v73 < *(_DWORD *)(a1 + 52));
    v141 = v73;
  }
  *(_DWORD *)(a1 + 208) = 0;
  WTF::HashMap<JSC::BytecodeIndex,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,WTF::HashTableTraits>::add<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>((uint64_t *)(a1 + 408), (int *)(a1 + 640), &v141, (uint64_t)v142);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v16 << 35) | 0x1D, v74, v75, v76, v77, v78);
}

void JSC::JIT::emitSlow_op_instanceof(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::ExecutableMemoryHandle *v49;
  __int128 v50;
  uint64_t v51;

  v8 = *(_DWORD *)(a1 + 720);
  *(_DWORD *)(a1 + 720) = v8 + 1;
  if (*(_DWORD *)(a1 + 588) <= v8)
    goto LABEL_18;
  v10 = *(_QWORD *)(a1 + 576) + 56 * v8;
  JSC::JIT::linkAllSlowCases(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v11, v12, v13, v14, v15, v16, v17);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(v10 + 28) = i;
  v19 = *(char *)(v10 + 16);
  if (v19 >= 0x1F)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x198744BD0);
  }
  JSC::JITThunks::ctiStub(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440), *(_QWORD *)(a1 + 352), (void (*)(uint64_t *__return_ptr, uint64_t))off_1E3596098[v19], v13, v14, v15, v16, v17, &v48);
  v27 = v48;
  *(_DWORD *)(a1 + 208) = 0;
  v28 = *(_DWORD *)(a1 + 200);
  if (v28 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
    v28 = *(_DWORD *)(a1 + 200);
  }
  v29 = (_QWORD *)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = -1811939328;
  v30 = (*(_DWORD *)(a1 + 200) + 4);
  *(_DWORD *)(a1 + 200) = v30;
  LOBYTE(v51) = -1;
  BYTE3(v51) = 15;
  *(_WORD *)((char *)&v51 + 1) = 65;
  *(_QWORD *)&v50 = v30 - 4;
  *((_QWORD *)&v50 + 1) = v27;
  WORD2(v51) = 384;
  v31 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v31 == *(_DWORD *)(a1 + 40))
  {
    v38 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v31 + 1, (unint64_t)&v50, v22, v23, v24, v25, v26);
    v32 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
    *(_QWORD *)v32 = 0;
    *(_QWORD *)(v32 + 8) = 0;
    *(_BYTE *)(v32 + 16) = -1;
    v39 = (((*(unsigned __int8 *)(v32 + 19) >> 4) & 0xF) << 20) | 0xF0041;
    *(_WORD *)(v32 + 17) = 65;
    *(_BYTE *)(v32 + 19) = BYTE2(v39);
    *(_WORD *)(v32 + 20) &= 0xFC00u;
    v33 = *(_OWORD *)v38;
    v34 = *(_QWORD *)(v38 + 16);
  }
  else
  {
    v32 = *v29 + 24 * v31;
    v33 = v50;
    v34 = v51;
  }
  *(_QWORD *)(v32 + 16) = v34;
  *(_OWORD *)v32 = v33;
  ++*(_DWORD *)(a1 + 44);
  v35 = (unsigned int *)v49;
  v49 = 0;
  if (v35)
  {
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v35);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v35, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
  }
}

void JSC::JIT::emit_op_is_empty(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  _DWORD *v31;
  _DWORD *v32;
  unint64_t v33;
  BOOL v34;
  char **v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v10 > 63)
      v10 += 1073741760;
    v12 = *((__int16 *)a2 + 2);
    if ((int)v12 <= 63)
      goto LABEL_6;
LABEL_19:
    v12 = (v12 + v11);
    goto LABEL_20;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    if (v10 > 15)
      v10 += 1073741808;
    v12 = (char)a2[2];
    if ((int)v12 <= 15)
    {
LABEL_6:
      v13 = v10;
LABEL_7:
      v14 = (v12 << 35) | 0x1D;
LABEL_8:
      JSC::MacroAssemblerARM64::load64(a1, v14, 0, a4, a5, a6, a7, a8);
      goto LABEL_9;
    }
    goto LABEL_19;
  }
  v10 = *(_DWORD *)(a2 + 2);
  v12 = *(unsigned int *)(a2 + 6);
LABEL_20:
  v13 = v10;
  if ((int)v12 < 0x40000000)
    goto LABEL_7;
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v28 = (v12 - 0x40000000);
  v29 = *(_DWORD **)(v27 + 120);
  if (!v29 || *v29 <= v28)
    goto LABEL_27;
  v30 = *((unsigned __int8 *)v29 + v28 + 4);
  if ((v30 - 1) >= 2)
  {
    if (v30)
    {
      if (v30 == 3)
        goto LABEL_38;
      goto LABEL_43;
    }
LABEL_27:
    v32 = *(_DWORD **)(v27 + 112);
    if (*v32 > v28)
    {
      v33 = *(_QWORD *)&v32[2 * v28 + 2];
      if (v33)
        v34 = (v33 & 0xFFFE000000000002) == 0;
      else
        v34 = 0;
      if (!v34)
        goto LABEL_24;
      v35 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0x4C));
      if (v35 != &JSC::SymbolTable::s_info && v35 != &JSC::JSTemplateObjectDescriptor::s_info)
        goto LABEL_24;
LABEL_38:
      JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v37, v38, v39, v40, v41);
      v14 = v12 << 35;
      goto LABEL_8;
    }
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x198744E70);
  }
LABEL_24:
  v31 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v31 <= v28)
  {
    __break(0xC471u);
    JUMPOUT(0x198744E9CLL);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v31[2 * v28 + 2], 0, a4, a5, a6, a7, a8);
LABEL_9:
  v22 = *(_DWORD *)(a1 + 200);
  if (v22 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v15, v16, v17, v18, v19, v20, v21);
    v22 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = -369098721;
  v23 = *(_DWORD *)(a1 + 200);
  v24 = v23 + 4;
  *(_DWORD *)(a1 + 200) = v23 + 4;
  if ((v23 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v15, v16, v17, v18, v19, v20, v21);
    v24 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v24) = 446633952;
  v25 = *(_DWORD *)(a1 + 200);
  v26 = v25 + 4;
  *(_DWORD *)(a1 + 200) = v25 + 4;
  if ((v25 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v15, v16, v17, v18, v19, v20, v21);
    v26 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v26) = 285218816;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 0, (v13 << 35) | 0x1D, v17, v18, v19, v20, v21);
}

void JSC::JIT::emit_op_typeof_is_undefined(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int8x8_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98[2];
  char v99;
  __int16 v100;
  char v101;
  unsigned int v102[3];
  unsigned int v103[2];
  char v104;
  __int16 v105;
  char v106;
  unsigned int v107[3];

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v10 > 63)
      v10 += 1073741760;
    v12 = *((__int16 *)a2 + 2);
    if (v12 <= 63)
      goto LABEL_6;
LABEL_48:
    v86 = v12 + v11;
    goto LABEL_49;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    if (v10 > 15)
      v10 += 1073741808;
    v12 = (char)a2[2];
    if (v12 <= 15)
    {
LABEL_6:
      v13 = v12;
      v14 = v10;
LABEL_7:
      v15 = (v13 << 35) | 0x1D;
LABEL_8:
      JSC::MacroAssemblerARM64::load64(a1, v15, 0, a4, a5, a6, a7, a8);
      goto LABEL_9;
    }
    goto LABEL_48;
  }
  v10 = *(_DWORD *)(a2 + 2);
  v86 = *(_DWORD *)(a2 + 6);
LABEL_49:
  v13 = v86;
  v14 = v10;
  if (v86 < 0x40000000)
    goto LABEL_7;
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v86))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v87, v88, v89, v90, v91);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v93, v94, v95, v96, v97);
    v15 = v13 << 35;
    goto LABEL_8;
  }
  v92 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v92 <= (v13 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987454CCLL);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v92[2 * (v13 - 0x40000000) + 2], 0, v87, v88, v89, v90, v91);
LABEL_9:
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, 0, 28, v16, v17, v18, v19, (uint64_t)v107);
  v27 = *(_DWORD *)(a1 + 200);
  if (v27 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
    v27 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = -251647969;
  v28 = *(_DWORD *)(a1 + 200);
  v29 = v28 + 4;
  *(_DWORD *)(a1 + 200) = v28 + 4;
  if ((v28 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
    v29 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = 446633952;
  v30 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v30; v30 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v30)
  {
    if ((v30 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
      v30 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v30) = -721215457;
    v30 = *(_DWORD *)(a1 + 200) + 4;
  }
  v31 = v30;
  if ((v30 + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
    v31 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v31) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v32 = 69;
  else
    v32 = 65;
  v103[0] = v30;
  v103[1] = 0;
  v104 = v32;
  v105 = 15;
  v106 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v107, a1, v21, v22, v23, v24, v25, v26);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987453C4);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v41 = *(_BYTE *)(a1 + 304) & 0x1F | 0x38406000;
  v42 = *(_DWORD *)(a1 + 200);
  if (v42 + 4 > *(_DWORD *)(a1 + 192))
  {
    v40 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v33, v34, v35, v36, v37, v38, v39).n128_u64[0];
    v42 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v42) = v41;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, a1, 1, 17, v36, v37, v38, v39, (uint64_t)v102, v40);
  v50 = *(_DWORD *)(a1 + 200);
  if (v50 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v43, v44, v45, v46, v47, v48, v49);
    v50 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v50) = 1384120320;
  v51 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v51; v51 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v51)
  {
    if ((v51 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v43, v44, v45, v46, v47, v48, v49);
      v51 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v51) = -721215457;
    v51 = *(_DWORD *)(a1 + 200) + 4;
  }
  v52 = v51;
  if ((v51 + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v43, v44, v45, v46, v47, v48, v49);
    v52 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v52) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v53 = 69;
  else
    v53 = 65;
  v98[0] = v51;
  v98[1] = 0;
  v99 = v53;
  v100 = 15;
  v101 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v102, a1, v44, v45, v46, v47, v48, v49);
  v61 = *(_DWORD *)(a1 + 200);
  if (v61 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v54, v55, v56, v57, v58, v59, v60);
    v61 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v61) = -1203765247;
  v62 = *(_DWORD *)(a1 + 200);
  v63 = v62 + 4;
  *(_DWORD *)(a1 + 200) = v62 + 4;
  if ((v62 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v54, v55, v56, v57, v58, v59, v60);
    v63 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v63) = -746787807;
  v64 = *(_DWORD *)(a1 + 200);
  v65 = v64 + 4;
  *(_DWORD *)(a1 + 200) = v64 + 4;
  if ((v64 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v54, v55, v56, v57, v58, v59, v60);
    v65 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v65) = -129989824;
  v66 = *(_DWORD *)(a1 + 200);
  v67 = v66 + 4;
  *(_DWORD *)(a1 + 200) = v66 + 4;
  if ((v66 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v54, v55, v56, v57, v58, v59, v60);
    v67 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v67) = -129859551;
  v68 = *(_DWORD *)(a1 + 200);
  v69 = v68 + 4;
  *(_DWORD *)(a1 + 200) = v68 + 4;
  if ((v68 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v54, v55, v56, v57, v58, v59, v60);
    v69 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v69) = -352255969;
  v70 = *(_DWORD *)(a1 + 200);
  v71 = v70 + 4;
  *(_DWORD *)(a1 + 200) = v70 + 4;
  if ((v70 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v54, v55, v56, v57, v58, v59, v60);
    v71 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v71) = 446633952;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v98, a1, v55, v56, v57, v58, v59, v60);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v103, a1, v72, v73, v74, v75, v76, v77);
  v85 = *(_DWORD *)(a1 + 200);
  if (v85 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v78, v79, v80, v81, v82, v83, v84);
    v85 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v85) = 285218816;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 0, (v14 << 35) | 0x1D, v80, v81, v82, v83, v84);
}

void JSC::JIT::emit_op_typeof_is_function(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unsigned int v67[3];
  int v68;
  uint64_t v69;
  int v70;

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v10 > 63)
      v10 += 1073741760;
    v12 = *((__int16 *)a2 + 2);
    if (v12 <= 63)
      goto LABEL_6;
LABEL_20:
    v53 = v12 + v11;
    goto LABEL_21;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    if (v10 > 15)
      v10 += 1073741808;
    v12 = (char)a2[2];
    if (v12 <= 15)
    {
LABEL_6:
      v13 = v12;
      v14 = v10;
LABEL_7:
      v15 = (v13 << 35) | 0x1D;
LABEL_8:
      JSC::MacroAssemblerARM64::load64(a1, v15, 0, a4, a5, a6, a7, a8);
      goto LABEL_9;
    }
    goto LABEL_20;
  }
  v10 = *(_DWORD *)(a2 + 2);
  v53 = *(_DWORD *)(a2 + 6);
LABEL_21:
  v13 = v53;
  v14 = v10;
  if (v53 < 0x40000000)
    goto LABEL_7;
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v53))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v54, v55, v56, v57, v58);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v60, v61, v62, v63, v64);
    v15 = v13 << 35;
    goto LABEL_8;
  }
  v59 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v59 <= (v13 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987457A0);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v59[2 * (v13 - 0x40000000) + 2], 0, v54, v55, v56, v57, v58);
LABEL_9:
  JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v16, v17, v18, v19, v20, (uint64_t)v67);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987456C8);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v28 = *(_BYTE *)(a1 + 304) & 0x1F | 0x38405000;
  v29 = *(_DWORD *)(a1 + 200);
  if (v29 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v21, v22, v23, v24, v25, v26, v27);
    v29 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = v28;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch32(a1, 2, 17, 23, v24, v25, v26, v27, (uint64_t)&v65);
  v36 = (_QWORD *)(a1 + 648);
  v37 = v66;
  v38 = *(_DWORD *)(a1 + 640);
  v68 = v65;
  v69 = v66;
  v70 = v38;
  v39 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v39 == *(_DWORD *)(a1 + 656))
  {
    v51 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v36, v39 + 1, (unint64_t)&v68);
    v52 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v52 = *(_DWORD *)v51;
    *(_QWORD *)(v52 + 4) = *(_QWORD *)(v51 + 4);
    *(_DWORD *)(v52 + 12) = *(_DWORD *)(v51 + 12);
  }
  else
  {
    v40 = *v36 + 16 * v39;
    *(_DWORD *)v40 = v65;
    *(_QWORD *)(v40 + 4) = v37;
    *(_DWORD *)(v40 + 12) = v38;
  }
  ++*(_DWORD *)(a1 + 660);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v67, a1, v30, v31, v32, v33, v34, v35);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, 6, 0, v41, v42, v43, v44, v45);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v14 << 35) | 0x1D, v46, v47, v48, v49, v50);
}

void JSC::JIT::emit_op_is_undefined_or_null(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  _DWORD *v33;
  unint64_t v34;
  BOOL v35;
  char **v36;
  unsigned int v38;
  int v39;
  unsigned int v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;

  v9 = *a2;
  if (v9 == 128)
  {
    v28 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    v12 = v28 + 1073741760;
    if (v28 <= 63)
      v12 = *((__int16 *)a2 + 1);
    v13 = *((__int16 *)a2 + 2);
    if ((int)v13 <= 63)
      goto LABEL_6;
LABEL_19:
    v13 = (v13 + v11);
    goto LABEL_20;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    v12 = v10 + 1073741808;
    if (v10 <= 15)
      v12 = (char)a2[1];
    v13 = (char)a2[2];
    if ((int)v13 <= 15)
    {
LABEL_6:
      v14 = v12;
LABEL_7:
      v15 = (v13 << 35) | 0x1D;
LABEL_8:
      JSC::MacroAssemblerARM64::load64(a1, v15, 0, a4, a5, a6, a7, a8);
      goto LABEL_9;
    }
    goto LABEL_19;
  }
  v12 = *(_DWORD *)(a2 + 2);
  v13 = *(unsigned int *)(a2 + 6);
LABEL_20:
  v14 = v12;
  if ((int)v13 < 0x40000000)
    goto LABEL_7;
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v30 = (v13 - 0x40000000);
  v31 = *(_DWORD **)(v29 + 120);
  if (!v31 || *v31 <= v30)
    goto LABEL_25;
  v32 = *((unsigned __int8 *)v31 + v30 + 4);
  if ((v32 - 1) >= 2)
  {
    if (v32)
    {
      if (v32 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x198745A58);
      }
      goto LABEL_36;
    }
LABEL_25:
    v33 = *(_DWORD **)(v29 + 112);
    if (*v33 <= v30)
    {
      __break(0xC471u);
      JUMPOUT(0x198745AD4);
    }
    v34 = *(_QWORD *)&v33[2 * v30 + 2];
    if (v34)
      v35 = (v34 & 0xFFFE000000000002) == 0;
    else
      v35 = 0;
    if (!v35)
      goto LABEL_41;
    v36 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C));
    if (v36 != &JSC::SymbolTable::s_info && v36 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_41;
LABEL_36:
    v38 = *(_DWORD *)(a1 + 200);
    if (v38 + 4 > *(_DWORD *)(a1 + 192))
    {
      v43 = v13;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v13 = v43;
      v38 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v38) = -129956960;
    v39 = *(_DWORD *)(a1 + 200);
    v40 = v39 + 4;
    *(_DWORD *)(a1 + 200) = v39 + 4;
    if ((v39 + 8) > *(_DWORD *)(a1 + 192))
    {
      v42 = v13;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v13 = v42;
      v40 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v40) = -129368064;
    *(_DWORD *)(a1 + 200) += 4;
    v15 = v13 << 35;
    goto LABEL_8;
  }
LABEL_41:
  v41 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v41 <= v30)
  {
    __break(0xC471u);
    JUMPOUT(0x198745AB4);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v41[2 * v30 + 2], 0, a4, a5, a6, a7, a8);
LABEL_9:
  JSC::MacroAssemblerARM64::and64(a1, -9, 0, 0);
  v23 = *(_DWORD *)(a1 + 200);
  if (v23 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v16, v17, v18, v19, v20, v21, v22);
    v23 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = -251656161;
  v24 = *(_DWORD *)(a1 + 200);
  v25 = v24 + 4;
  *(_DWORD *)(a1 + 200) = v24 + 4;
  if ((v24 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v16, v17, v18, v19, v20, v21, v22);
    v25 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = 446633952;
  v26 = *(_DWORD *)(a1 + 200);
  v27 = v26 + 4;
  *(_DWORD *)(a1 + 200) = v26 + 4;
  if ((v26 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v16, v17, v18, v19, v20, v21, v22);
    v27 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = 285218816;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 0, (v14 << 35) | 0x1D, v18, v19, v20, v21, v22);
}

void JSC::JIT::emit_op_is_BOOLean(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v9 = *a2;
  if (v9 == 130)
  {
    v10 = *(_DWORD *)(a2 + 2);
    v31 = *(_DWORD *)(a2 + 6);
  }
  else
  {
    if (v9 == 128)
    {
      v10 = *((__int16 *)a2 + 1);
      v11 = 1073741760;
      if (v10 > 63)
        v10 += 1073741760;
      v12 = *((__int16 *)a2 + 2);
      if (v12 <= 63)
        goto LABEL_6;
    }
    else
    {
      v10 = (char)a2[1];
      v11 = 1073741808;
      if (v10 > 15)
        v10 += 1073741808;
      v12 = (char)a2[2];
      if (v12 <= 15)
      {
LABEL_6:
        v13 = v12;
        v14 = v10;
LABEL_7:
        v15 = (v13 << 35) | 0x1D;
LABEL_8:
        JSC::MacroAssemblerARM64::load64(a1, v15, 0, a4, a5, a6, a7, a8);
        goto LABEL_9;
      }
    }
    v31 = v12 + v11;
  }
  v13 = v31;
  v14 = v10;
  if (v31 < 0x40000000)
    goto LABEL_7;
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v31))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v32, v33, v34, v35, v36);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v38, v39, v40, v41, v42);
    v15 = v13 << 35;
    goto LABEL_8;
  }
  v37 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v37 <= (v13 - 0x40000000))
  {
    __break(0xC471u);
    return;
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v37[2 * (v13 - 0x40000000) + 2], 0, v32, v33, v34, v35, v36);
LABEL_9:
  JSC::MacroAssemblerARM64::xor64(a1, 6, 0, 0, v16, v17, v18, v19);
  JSC::MacroAssemblerARM64::test64(a1, 0, 0, 4294967294, 0, v20, v21, v22);
  v30 = *(_DWORD *)(a1 + 200);
  if (v30 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v23, v24, v25, v26, v27, v28, v29);
    v30 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v30) = 285218816;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 0, (v14 << 35) | 0x1D, v25, v26, v27, v28, v29);
}

void JSC::JIT::emit_op_is_number(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v9 = *a2;
  if (v9 == 130)
  {
    v10 = *(_DWORD *)(a2 + 2);
    v28 = *(_DWORD *)(a2 + 6);
  }
  else
  {
    if (v9 == 128)
    {
      v10 = *((__int16 *)a2 + 1);
      v11 = 1073741760;
      if (v10 > 63)
        v10 += 1073741760;
      v12 = *((__int16 *)a2 + 2);
      if (v12 <= 63)
        goto LABEL_6;
    }
    else
    {
      v10 = (char)a2[1];
      v11 = 1073741808;
      if (v10 > 15)
        v10 += 1073741808;
      v12 = (char)a2[2];
      if (v12 <= 15)
      {
LABEL_6:
        v13 = v12;
        v14 = v10;
LABEL_7:
        v15 = (v13 << 35) | 0x1D;
LABEL_8:
        JSC::MacroAssemblerARM64::load64(a1, v15, 0, a4, a5, a6, a7, a8);
        goto LABEL_9;
      }
    }
    v28 = v12 + v11;
  }
  v13 = v28;
  v14 = v10;
  if (v28 < 0x40000000)
    goto LABEL_7;
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v28))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v29, v30, v31, v32, v33);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v35, v36, v37, v38, v39);
    v15 = v13 << 35;
    goto LABEL_8;
  }
  v34 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v34 <= (v13 - 0x40000000))
  {
    __break(0xC471u);
    return;
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v34[2 * (v13 - 0x40000000) + 2], 0, v29, v30, v31, v32, v33);
LABEL_9:
  v23 = *(_DWORD *)(a1 + 200);
  if (v23 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v16, v17, v18, v19, v20, v21, v22);
    v23 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = -367329249;
  v24 = *(_DWORD *)(a1 + 200);
  v25 = v24 + 4;
  *(_DWORD *)(a1 + 200) = v24 + 4;
  if ((v24 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v16, v17, v18, v19, v20, v21, v22);
    v25 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = 446629856;
  v26 = *(_DWORD *)(a1 + 200);
  v27 = v26 + 4;
  *(_DWORD *)(a1 + 200) = v26 + 4;
  if ((v26 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v16, v17, v18, v19, v20, v21, v22);
    v27 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = 285218816;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 0, (v14 << 35) | 0x1D, v18, v19, v20, v21, v22);
}

void JSC::JIT::emit_op_is_big_int()
{
  __break(0xC471u);
}

void JSC::JIT::emit_op_is_cell_with_type(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55[3];

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v10 > 63)
      v10 += 1073741760;
    v12 = *((__int16 *)a2 + 2);
    LOBYTE(v13) = a2[6];
    if (v12 <= 63)
      goto LABEL_6;
LABEL_17:
    v43 = v12 + v11;
    goto LABEL_18;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    if (v10 > 15)
      v10 += 1073741808;
    v12 = (char)a2[2];
    LOBYTE(v13) = a2[3];
    if (v12 <= 15)
    {
LABEL_6:
      v14 = v12;
      v15 = v10;
      v16 = v13;
LABEL_7:
      v17 = (v14 << 35) | 0x1D;
LABEL_8:
      JSC::MacroAssemblerARM64::load64(a1, v17, 2, a4, a5, a6, a7, a8);
      goto LABEL_9;
    }
    goto LABEL_17;
  }
  v10 = *(_DWORD *)(a2 + 2);
  v43 = *(_DWORD *)(a2 + 6);
  v13 = *(_DWORD *)(a2 + 10);
LABEL_18:
  v14 = v43;
  v15 = v10;
  v16 = v13;
  if (v43 < 0x40000000)
    goto LABEL_7;
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v43))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 2, v44, v45, v46, v47, v48);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000002, 2, v50, v51, v52, v53, v54);
    v17 = (v14 << 35) | 2;
    goto LABEL_8;
  }
  v49 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v49 <= (v14 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x198746130);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v49[2 * (v14 - 0x40000000) + 2], 2, v44, v45, v46, v47, v48);
LABEL_9:
  v25 = *(_DWORD *)(a1 + 200);
  if (v25 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v18, v19, v20, v21, v22, v23, v24);
    v25 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = 1384120320;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AssemblyHelpers::branchIfNotCell(a1, 2, 1, v20, v21, v22, v23, v24, (uint64_t)v55);
  JSC::MacroAssemblerARM64::compare8(a1, 0, 0x500000002, v16, 0, v26, v27, v28);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v55, a1, v29, v30, v31, v32, v33, v34);
  v42 = *(_DWORD *)(a1 + 200);
  if (v42 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v35, v36, v37, v38, v39, v40, v41);
    v42 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v42) = 285218816;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 0, (v15 << 35) | 0x1D, v37, v38, v39, v40, v41);
}

void JSC::JIT::emit_op_is_object(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  _DWORD *v44;
  _DWORD *v45;
  unint64_t v46;
  BOOL v47;
  char **v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55[3];

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v10 > 63)
      v10 += 1073741760;
    v12 = *((__int16 *)a2 + 2);
    if ((int)v12 <= 63)
      goto LABEL_6;
LABEL_17:
    v12 = (v12 + v11);
    goto LABEL_18;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    if (v10 > 15)
      v10 += 1073741808;
    v12 = (char)a2[2];
    if ((int)v12 <= 15)
    {
LABEL_6:
      v13 = v10;
LABEL_7:
      v14 = (v12 << 35) | 0x1D;
LABEL_8:
      JSC::MacroAssemblerARM64::load64(a1, v14, 2, a4, a5, a6, a7, a8);
      goto LABEL_9;
    }
    goto LABEL_17;
  }
  v10 = *(_DWORD *)(a2 + 2);
  v12 = *(unsigned int *)(a2 + 6);
LABEL_18:
  v13 = v10;
  if ((int)v12 < 0x40000000)
    goto LABEL_7;
  v40 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v41 = (v12 - 0x40000000);
  v42 = *(_DWORD **)(v40 + 120);
  if (!v42 || *v42 <= v41)
    goto LABEL_25;
  v43 = *((unsigned __int8 *)v42 + v41 + 4);
  if ((v43 - 1) >= 2)
  {
    if (v43)
    {
      if (v43 == 3)
        goto LABEL_36;
      goto LABEL_41;
    }
LABEL_25:
    v45 = *(_DWORD **)(v40 + 112);
    if (*v45 > v41)
    {
      v46 = *(_QWORD *)&v45[2 * v41 + 2];
      if (v46)
        v47 = (v46 & 0xFFFE000000000002) == 0;
      else
        v47 = 0;
      if (!v47)
        goto LABEL_22;
      v48 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v46 & 0xFFFFFFFE) + 0x4C));
      if (v48 != &JSC::SymbolTable::s_info && v48 != &JSC::JSTemplateObjectDescriptor::s_info)
        goto LABEL_22;
LABEL_36:
      JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 2, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::load64(a1, 0xA000000002, 2, v50, v51, v52, v53, v54);
      v14 = (v12 << 35) | 2;
      goto LABEL_8;
    }
LABEL_41:
    __break(0xC471u);
    JUMPOUT(0x1987463DCLL);
  }
LABEL_22:
  v44 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v44 <= v41)
  {
    __break(0xC471u);
    JUMPOUT(0x1987463FCLL);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v44[2 * v41 + 2], 2, a4, a5, a6, a7, a8);
LABEL_9:
  v22 = *(_DWORD *)(a1 + 200);
  if (v22 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v15, v16, v17, v18, v19, v20, v21);
    v22 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = 1384120320;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AssemblyHelpers::branchIfNotCell(a1, 2, 1, v17, v18, v19, v20, v21, (uint64_t)v55);
  JSC::MacroAssemblerARM64::compare8(a1, 2u, 0x500000002, 23, 0, v23, v24, v25);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v55, a1, v26, v27, v28, v29, v30, v31);
  v39 = *(_DWORD *)(a1 + 200);
  if (v39 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v32, v33, v34, v35, v36, v37, v38);
    v39 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v39) = 285218816;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 0, (v13 << 35) | 0x1D, v34, v35, v36, v37, v38);
}

void JSC::JIT::emit_op_has_structure_with_flags(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t HasStructureWith;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  HasStructureWith = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpHasStructureWithFlags>(a2);
  v10 = v9;
  v11 = HIDWORD(HasStructureWith);
  if (SHIDWORD(HasStructureWith) < 0x40000000)
  {
    v12 = (v11 << 35) | 0x1D;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v12, 0, v3, v4, v5, v6, v7);
LABEL_4:
    JSC::AssemblyHelpers::emitLoadStructure((_DWORD *)a1, *(_QWORD *)(a1 + 352), 0, 2, v13, v14, v15, v16);
    JSC::MacroAssemblerARM64::test32(a1, v10, v17, v18, v19, v20, v21, v22);
    JSC::AssemblyHelpers::boxBoolean((_DWORD *)a1, 0, 0, v23, v24, v25, v26, v27);
    JSC::MacroAssemblerARM64::store64(a1, 0, (HasStructureWith << 35) | 0x1D, v28, v29, v30, v31, v32);
    return;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), SHIDWORD(HasStructureWith)))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v33, v34, v35, v36, v37);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v39, v40, v41, v42, v43);
    v12 = v11 << 35;
    goto LABEL_3;
  }
  v38 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v38 > (HIDWORD(HasStructureWith) - 0x40000000))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v38[2 * (HIDWORD(HasStructureWith) - 0x40000000) + 2], 0, v33, v34, v35, v36, v37);
    goto LABEL_4;
  }
  __break(0xC471u);
}

unint64_t JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpHasStructureWithFlags>(unsigned __int8 *a1)
{
  int v1;
  int v2;
  uint64_t v3;
  int v5;
  int v6;

  v1 = *a1;
  if (v1 == 130)
  {
    v2 = *(_DWORD *)(a1 + 2);
    v3 = *(unsigned int *)(a1 + 6);
  }
  else if (v1 == 128)
  {
    v2 = *((__int16 *)a1 + 1);
    if (v2 > 63)
      v2 += 1073741760;
    v5 = *((__int16 *)a1 + 2);
    LODWORD(v3) = v5 + 1073741760;
    if (v5 <= 63)
      v3 = v5;
    else
      v3 = v3;
  }
  else
  {
    v2 = (char)a1[1];
    if (v2 > 15)
      v2 += 1073741808;
    v6 = (char)a1[2];
    LODWORD(v3) = v6 + 1073741808;
    if (v6 <= 15)
      v3 = v6;
    else
      v3 = v3;
  }
  return v2 | (unint64_t)(v3 << 32);
}

void JSC::MacroAssemblerARM64::test32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v10;
  JSC::AssemblerBuffer *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;

  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987466B8);
  }
  v8 = a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v10 = *(_BYTE *)(a1 + 304) & 0x1F | 0xB8410040;
  v11 = (JSC::AssemblerBuffer *)(a1 + 56);
  v12 = *(_DWORD *)(a1 + 200);
  if (v12 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v10;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::test32(a1, 17, (JSC::ARM64LogicalImmediate *)v8, a4, a5, a6, a7, a8);
  v20 = *(_DWORD *)(a1 + 200);
  if (v20 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, v13, v14, v15, v16, v17, v18, v19);
    v20 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v20) = 446629856;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::JIT::emit_op_to_primitive(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  _DWORD *v52;
  _DWORD *v53;
  unint64_t v54;
  BOOL v55;
  char **v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unsigned int v65[3];
  int v66;
  uint64_t v67;
  int v68;

  v9 = *a2;
  if (v9 == 128)
  {
    v47 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v47 <= 63)
      v12 = v47;
    else
      v12 = (v47 + 1073741760);
    v13 = *((__int16 *)a2 + 2);
    if ((int)v13 <= 63)
      goto LABEL_7;
LABEL_23:
    v13 = (v13 + v11);
    goto LABEL_24;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    if (v10 <= 15)
      v12 = v10;
    else
      v12 = (v10 + 1073741808);
    v13 = (char)a2[2];
    if ((int)v13 < 16)
      goto LABEL_7;
    goto LABEL_23;
  }
  v12 = *(unsigned int *)(a2 + 2);
  v13 = *(unsigned int *)(a2 + 6);
LABEL_24:
  if ((int)v13 < 0x40000000)
  {
LABEL_7:
    v14 = (v13 << 35) | 0x1D;
LABEL_8:
    JSC::MacroAssemblerARM64::load64(a1, v14, 0, a4, a5, a6, a7, a8);
    goto LABEL_9;
  }
  v48 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v49 = (v13 - 0x40000000);
  v50 = *(_DWORD **)(v48 + 120);
  if (!v50 || *v50 <= v49)
    goto LABEL_31;
  v51 = *((unsigned __int8 *)v50 + v49 + 4);
  if ((v51 - 1) >= 2)
  {
    if (v51)
    {
      if (v51 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987469F4);
      }
      goto LABEL_42;
    }
LABEL_31:
    v53 = *(_DWORD **)(v48 + 112);
    if (*v53 <= v49)
    {
      __break(0xC471u);
      JUMPOUT(0x198746A34);
    }
    v54 = *(_QWORD *)&v53[2 * v49 + 2];
    if (v54)
      v55 = (v54 & 0xFFFE000000000002) == 0;
    else
      v55 = 0;
    if (!v55)
      goto LABEL_28;
    v56 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x4C));
    if (v56 != &JSC::SymbolTable::s_info && v56 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_28;
LABEL_42:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v58, v59, v60, v61, v62);
    v14 = v13 << 35;
    goto LABEL_8;
  }
LABEL_28:
  v52 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v52 <= v49)
  {
    __break(0xC471u);
    JUMPOUT(0x198746A14);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v52[2 * v49 + 2], 0, a4, a5, a6, a7, a8);
LABEL_9:
  JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v15, v16, v17, v18, v19, (uint64_t)v65);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198746898);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v27 = *(_BYTE *)(a1 + 304) & 0x1F | 0x38405000;
  v28 = *(_DWORD *)(a1 + 200);
  if (v28 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
    v28 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = v27;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch32(a1, 2, 17, 23, v23, v24, v25, v26, (uint64_t)&v63);
  v35 = (_QWORD *)(a1 + 648);
  v36 = v64;
  v37 = *(_DWORD *)(a1 + 640);
  v66 = v63;
  v67 = v64;
  v68 = v37;
  v38 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v38 == *(_DWORD *)(a1 + 656))
  {
    v45 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v38 + 1, (unint64_t)&v66);
    v46 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v46 = *(_DWORD *)v45;
    *(_QWORD *)(v46 + 4) = *(_QWORD *)(v45 + 4);
    *(_DWORD *)(v46 + 12) = *(_DWORD *)(v45 + 12);
  }
  else
  {
    v39 = *v35 + 16 * v38;
    *(_DWORD *)v39 = v63;
    *(_QWORD *)(v39 + 4) = v36;
    *(_DWORD *)(v39 + 12) = v37;
  }
  ++*(_DWORD *)(a1 + 660);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v65, a1, v29, v30, v31, v32, v33, v34);
  if ((_DWORD)v12 != (_DWORD)v13)
    JSC::MacroAssemblerARM64::store64(a1, 0, (v12 << 35) | 0x1D, v40, v41, v42, v43, v44);
}

void JSC::JIT::emit_op_to_property_key(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unsigned int v58[3];
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;

  v8 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpCreatePromise>(a2);
  v9 = HIDWORD(v8);
  if (SHIDWORD(v8) < 0x40000000)
  {
    v10 = (v9 << 35) | 0x1D;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v10, 0, v3, v4, v5, v6, v7);
    goto LABEL_4;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), SHIDWORD(v8)))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v45, v46, v47, v48, v49);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v51, v52, v53, v54, v55);
    v10 = v9 << 35;
    goto LABEL_3;
  }
  v50 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v50 <= (HIDWORD(v8) - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x198746C3CLL);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v50[2 * (HIDWORD(v8) - 0x40000000) + 2], 0, v45, v46, v47, v48, v49);
LABEL_4:
  JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v11, v12, v13, v14, v15, (uint64_t)&v59);
  v21 = v60;
  v22 = *(_DWORD *)(a1 + 640);
  v61 = v59;
  v62 = v60;
  v63 = v22;
  v23 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v23 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v61);
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 648) + 16 * v23;
    *(_DWORD *)v24 = v59;
    *(_QWORD *)(v24 + 4) = v21;
    *(_DWORD *)(v24 + 12) = v22;
    ++*(_DWORD *)(a1 + 660);
  }
  JSC::AssemblyHelpers::branchIfSymbol(a1, 0, v16, v17, v18, v19, v20, (uint64_t)v58);
  JSC::AssemblyHelpers::branchIfNotString(a1, 0, v25, v26, v27, v28, v29, (uint64_t)&v56);
  v36 = v57;
  v37 = *(_DWORD *)(a1 + 640);
  v61 = v56;
  v62 = v57;
  v63 = v37;
  v38 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v38 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v61);
  }
  else
  {
    v39 = *(_QWORD *)(a1 + 648) + 16 * v38;
    *(_DWORD *)v39 = v56;
    *(_QWORD *)(v39 + 4) = v36;
    *(_DWORD *)(v39 + 12) = v37;
    ++*(_DWORD *)(a1 + 660);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v58, a1, v30, v31, v32, v33, v34, v35);
  if (HIDWORD(v8) != (_DWORD)v8)
    JSC::MacroAssemblerARM64::store64(a1, 0, (v8 << 35) | 0x1D, v40, v41, v42, v43, v44);
}

void JSC::JIT::emit_op_to_property_key_or_number(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  _DWORD *v27;
  uint64_t *v28;
  int v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  _DWORD *v53;
  uint64_t *v54;
  int v55;
  char *v56;
  int v57;
  unsigned int v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  WTF *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  WTF *v94;
  uint64_t v95;
  _BYTE v96[24];
  int v97;
  uint64_t v98;
  int v99;

  v9 = *a2;
  if (v9 == 128)
  {
    v74 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v74 <= 63)
      v12 = v74;
    else
      v12 = (v74 + 1073741760);
    LODWORD(v13) = *((__int16 *)a2 + 2);
    if ((int)v13 <= 63)
      goto LABEL_7;
LABEL_46:
    v13 = (v13 + v11);
    goto LABEL_47;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    if (v10 <= 15)
      v12 = v10;
    else
      v12 = (v10 + 1073741808);
    LODWORD(v13) = (char)a2[2];
    if ((int)v13 <= 15)
    {
LABEL_7:
      v14 = v13;
LABEL_8:
      v15 = (v14 << 35) | 0x1D;
LABEL_9:
      JSC::MacroAssemblerARM64::load64(a1, v15, 0, a4, a5, a6, a7, a8);
      goto LABEL_10;
    }
    goto LABEL_46;
  }
  v12 = *(unsigned int *)(a2 + 2);
  v13 = *(unsigned int *)(a2 + 6);
LABEL_47:
  v14 = v13;
  if ((int)v13 < 0x40000000)
    goto LABEL_8;
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v13))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v75, v76, v77, v78, v79);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v81, v82, v83, v84, v85);
    v15 = v13 << 35;
    goto LABEL_9;
  }
  v80 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v80 <= (v13 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x198747108);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v80[2 * (v13 - 0x40000000) + 2], 0, v75, v76, v77, v78, v79);
LABEL_10:
  v94 = (WTF *)v96;
  v95 = 2;
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, 0, 27, v16, v17, v18, v19, (uint64_t)&v92);
  v25 = v92;
  if (v92 != -1)
  {
    v26 = HIDWORD(v95);
    if (HIDWORD(v95) == (_DWORD)v95)
    {
      v27 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v94, (void *)(HIDWORD(v95) + 1), (unint64_t)&v92, v20, v21, v22, v23, v24);
      v29 = *v27;
      v28 = (uint64_t *)(v27 + 1);
      v25 = v29;
      v26 = HIDWORD(v95);
    }
    else
    {
      v28 = &v93;
    }
    v30 = (char *)v94 + 12 * v26;
    *(_DWORD *)v30 = v25;
    *(_QWORD *)(v30 + 4) = *v28;
    ++HIDWORD(v95);
  }
  JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v20, v21, v22, v23, v24, (uint64_t)&v90);
  v38 = v91;
  v39 = *(_DWORD *)(a1 + 640);
  v97 = v90;
  v98 = v91;
  v99 = v39;
  v40 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v40 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v97);
  }
  else
  {
    v41 = *(_QWORD *)(a1 + 648) + 16 * v40;
    *(_DWORD *)v41 = v90;
    *(_QWORD *)(v41 + 4) = v38;
    *(_DWORD *)(v41 + 12) = v39;
    ++*(_DWORD *)(a1 + 660);
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    goto LABEL_57;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v42 = *(_BYTE *)(a1 + 304) & 0x1F | 0x38405000;
  v43 = *(_DWORD *)(a1 + 200);
  if (v43 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v31, v32, v33, v34, v35, v36, v37);
    v43 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v43) = v42;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch32(a1, 0, 17, 4, v34, v35, v36, v37, (uint64_t)&v88);
  v51 = v88;
  if (v88 != -1)
  {
    v52 = HIDWORD(v95);
    if (HIDWORD(v95) == (_DWORD)v95)
    {
      v53 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v94, (void *)(HIDWORD(v95) + 1), (unint64_t)&v88, v46, v47, v48, v49, v50);
      v55 = *v53;
      v54 = (uint64_t *)(v53 + 1);
      v51 = v55;
      v52 = HIDWORD(v95);
    }
    else
    {
      v54 = &v89;
    }
    v56 = (char *)v94 + 12 * v52;
    *(_DWORD *)v56 = v51;
    *(_QWORD *)(v56 + 4) = *v54;
    ++HIDWORD(v95);
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987470CCLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v57 = *(_BYTE *)(a1 + 304) & 0x1F | 0x38405000;
  v58 = *(_DWORD *)(a1 + 200);
  if (v58 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v44, v45, v46, v47, v48, v49, v50);
    v58 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v58) = v57;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 2, v47, v48, v49, v50, (uint64_t)&v86);
  v66 = v87;
  v67 = *(_DWORD *)(a1 + 640);
  v97 = v86;
  v98 = v87;
  v99 = v67;
  v68 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v68 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v97);
  }
  else
  {
    v69 = *(_QWORD *)(a1 + 648) + 16 * v68;
    *(_DWORD *)v69 = v86;
    *(_QWORD *)(v69 + 4) = v66;
    *(_DWORD *)(v69 + 12) = v67;
    ++*(_DWORD *)(a1 + 660);
  }
  if (HIDWORD(v95))
  {
    v70 = 0;
    v71 = 0;
    v72 = 12 * HIDWORD(v95);
    while (v71 < HIDWORD(v95))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v94 + v70), a1, v60, v61, v62, v63, v64, v65);
      ++v71;
      v70 += 12;
      if (v72 == v70)
        goto LABEL_34;
    }
    __break(0xC471u);
LABEL_57:
    JUMPOUT(0x19874709CLL);
  }
LABEL_34:
  if ((_DWORD)v13 != (_DWORD)v12)
    JSC::MacroAssemblerARM64::store64(a1, 0, (v12 << 35) | 0x1D, v61, v62, v63, v64, v65);
  v73 = v94;
  if (v96 != (_BYTE *)v94)
  {
    if (v94)
    {
      v94 = 0;
      LODWORD(v95) = 0;
      WTF::fastFree((unint64_t)v73, v59, v60, v61, v62, v63, v64, v65);
    }
  }
}

void JSC::JIT::emit_op_set_function_name(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;

  v3 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpCreatePromise>(a2);
  v9 = v3;
  if ((int)v3 < 0x40000000)
  {
    v10 = (v3 << 35) | 0x1D;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v10, 1, v4, v5, v6, v7, v8);
    goto LABEL_4;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v3))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v29, v30, v31, v32, v33);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v41, v42, v43, v44, v45);
    v10 = (v9 << 35) | 1;
    goto LABEL_3;
  }
  v34 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v34 <= (v9 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987472C0);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v34[2 * (v9 - 0x40000000) + 2], 1, v29, v30, v31, v32, v33);
LABEL_4:
  v16 = HIDWORD(v9);
  if ((int)v16 < 0x40000000)
  {
    v17 = (v16 << 35) | 0x1D;
LABEL_6:
    JSC::MacroAssemblerARM64::load64(a1, v17, 2, v11, v12, v13, v14, v15);
    goto LABEL_7;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v16))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 2, v35, v36, v37, v38, v39);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000002, 2, v46, v47, v48, v49, v50);
    v17 = (v16 << 35) | 2;
    goto LABEL_6;
  }
  v40 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v40 <= (v16 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987472E0);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v40[2 * (v16 - 0x40000000) + 2], 2, v35, v36, v37, v38, v39);
LABEL_7:
  JSC::MacroAssemblerARM64::load64(a1, 0x80000001ALL, 0, v18, v19, v20, v21, v22);
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSCell *,long long),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>(&v51, a1, v23, v24, v25, v26, v27, v28);
}

void JSC::JIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSCell *,long long),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44[3];

  v10 = -1207811152;
  v11 = *(unsigned int *)(a2 + 640);
  if (v11 >= 4)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      return;
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)(v11 >> 2), a2 + 264, a4, a5, a6, a7, a8);
  }
  else
  {
    v10 = -1207811137;
  }
  v12 = *(_DWORD *)(a2 + 200);
  if (v12 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v12) = v10;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::JIT::appendCall(a2, (uint64_t)operationSetFunctionName, a3, a4, a5, a6, a7, a8, a1);
  JSC::MacroAssemblerARM64::branchTest64(a2, 1, 0, 0xFFFFFFFFLL, v13, v14, v15, v16, (uint64_t)v44, v17);
  v23 = *(_QWORD *)(*(_QWORD *)(a2 + 352) + 90440);
  v24 = *(_QWORD *)(v23 + 8);
  v25 = *(unsigned int **)(v23 + 16);
  if (v25)
  {
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v44, v24, a2, v18, v19, v20, v21, v22);
    do
    {
      v34 = __ldaxr(v25);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v25));
    if (!v35)
    {
      atomic_store(1u, v25);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v25, v27, v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v44, v24, a2, v18, v19, v20, v21, v22);
  }
}

uint64_t operationSetFunctionName(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t vars0;

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = vars0;
  JSC::JSFunction::setFunctionName(a2, a1, a3, a4, a5, a6, a7, a8, a9);
  return *(_QWORD *)(v9 + 16);
}

void JSC::JIT::emit_op_not(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  _DWORD *v44;
  _DWORD *v45;
  unint64_t v46;
  BOOL v47;
  char **v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v10 > 63)
      v10 += 1073741760;
    v12 = *((__int16 *)a2 + 2);
    if ((int)v12 <= 63)
      goto LABEL_6;
LABEL_16:
    v12 = (v12 + v11);
    goto LABEL_17;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    if (v10 > 15)
      v10 += 1073741808;
    v12 = (char)a2[2];
    if ((int)v12 <= 15)
    {
LABEL_6:
      v13 = v10;
LABEL_7:
      v14 = (v12 << 35) | 0x1D;
LABEL_8:
      JSC::MacroAssemblerARM64::load64(a1, v14, 0, a4, a5, a6, a7, a8);
      goto LABEL_9;
    }
    goto LABEL_16;
  }
  v10 = *(_DWORD *)(a2 + 2);
  v12 = *(unsigned int *)(a2 + 6);
LABEL_17:
  v13 = v10;
  if ((int)v12 < 0x40000000)
    goto LABEL_7;
  v40 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v41 = (v12 - 0x40000000);
  v42 = *(_DWORD **)(v40 + 120);
  if (!v42 || *v42 <= v41)
    goto LABEL_24;
  v43 = *((unsigned __int8 *)v42 + v41 + 4);
  if ((v43 - 1) >= 2)
  {
    if (v43)
    {
      if (v43 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19874770CLL);
      }
      goto LABEL_35;
    }
LABEL_24:
    v45 = *(_DWORD **)(v40 + 112);
    if (*v45 <= v41)
    {
      __break(0xC471u);
      JUMPOUT(0x19874774CLL);
    }
    v46 = *(_QWORD *)&v45[2 * v41 + 2];
    if (v46)
      v47 = (v46 & 0xFFFE000000000002) == 0;
    else
      v47 = 0;
    if (!v47)
      goto LABEL_21;
    v48 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v46 & 0xFFFFFFFE) + 0x4C));
    if (v48 != &JSC::SymbolTable::s_info && v48 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_21;
LABEL_35:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v50, v51, v52, v53, v54);
    v14 = v12 << 35;
    goto LABEL_8;
  }
LABEL_21:
  v44 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v44 <= v41)
  {
    __break(0xC471u);
    JUMPOUT(0x19874772CLL);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v44[2 * v41 + 2], 0, a4, a5, a6, a7, a8);
LABEL_9:
  JSC::MacroAssemblerARM64::xor64(a1, 6, 0, 2, v15, v16, v17, v18);
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, 2, 4294967294, v19, v20, v21, v22, (uint64_t)&v55, v23);
  v28 = (_QWORD *)(a1 + 648);
  v29 = v56;
  v30 = *(_DWORD *)(a1 + 640);
  v57 = v55;
  v58 = v56;
  v59 = v30;
  v31 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v31 == *(_DWORD *)(a1 + 656))
  {
    v38 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v28, v31 + 1, (unint64_t)&v57);
    v39 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v39 = *(_DWORD *)v38;
    *(_QWORD *)(v39 + 4) = *(_QWORD *)(v38 + 4);
    *(_DWORD *)(v39 + 12) = *(_DWORD *)(v38 + 12);
  }
  else
  {
    v32 = *v28 + 16 * v31;
    *(_DWORD *)v32 = v55;
    *(_QWORD *)(v32 + 4) = v29;
    *(_DWORD *)(v32 + 12) = v30;
  }
  ++*(_DWORD *)(a1 + 660);
  JSC::MacroAssemblerARM64::xor64(a1, 1, 0, 0, v24, v25, v26, v27);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v13 << 35) | 0x1D, v33, v34, v35, v36, v37);
}

void JSC::JIT::emit_op_jfalse(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  _DWORD *v40;
  int i;
  unsigned int v42;
  char v43;
  int *v44;
  int *v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int8x8_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  _DWORD *v68;
  int j;
  unsigned int v70;
  char v71;
  int *v72;
  int *v73;
  int v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  _DWORD *v117;
  uint64_t v118;
  _DWORD *v119;
  uint64_t v120;
  unint64_t v121;
  WTF *v122;
  unsigned int *v123;
  __int16 v124;
  unsigned __int8 *v125;
  uint64_t v126;
  int v127;
  _BYTE *v128;
  char v129;
  __int16 v130;
  char v131;
  __int16 v132;
  uint64_t v133;
  int v134;
  char *v135;
  char v136;
  __int16 v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  char v144;
  uint64_t v145;
  int v146;
  WTF *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v153;
  int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  _DWORD *v172;
  int v173;
  _DWORD *v174;
  int v175;
  _DWORD *v176;
  unint64_t v177;
  BOOL v178;
  char **v179;
  unsigned int v181;
  int v182;
  unsigned int v183;
  int v184;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  JSC::AssemblerBuffer *v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  JSC::ExecutableMemoryHandle *v197;
  int v198;
  uint64_t v199;
  int v200;
  int v201;
  char v202;
  __int16 v203;
  char v204;
  int v205;
  uint64_t v206;
  unsigned int v207[3];
  int v208;
  int v209;
  char v210;
  __int16 v211;
  char v212;
  int v213;
  uint64_t v214;
  unsigned int v215[3];
  WTF *v216;
  uint64_t v217;
  _BYTE v218[24];
  __int128 v219;
  uint64_t v220;

  v9 = *a2;
  if (v9 == 128)
  {
    v184 = *((__int16 *)a2 + 1);
    if (v184 <= 63)
      v11 = v184;
    else
      v11 = (v184 + 1073741760);
    v12 = *((__int16 *)a2 + 2);
  }
  else if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v12 = *(_DWORD *)(a2 + 6);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
  }
  if (!v12)
  {
    v148 = *(_QWORD *)(a1 + 808);
    v149 = *(_QWORD *)(v148 + 80);
    v150 = *(_QWORD *)v149;
    v151 = *(unsigned int *)(v149 + 12) + *(_QWORD *)v149;
    if (v150 > (unint64_t)a2 || v151 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x1987483C4);
    }
    v153 = *(_QWORD *)(v148 + 144);
    if (v153)
    {
      v154 = (_DWORD)a2 - v150;
      v155 = *(_DWORD *)(v153 - 8);
      v156 = 9 * ((~(v154 << 15) + v154) ^ ((~(v154 << 15) + v154) >> 10));
      v157 = (v156 ^ (v156 >> 6)) + ~((v156 ^ (v156 >> 6)) << 11);
      v158 = v155 & (v157 ^ HIWORD(v157));
      v159 = *(_DWORD *)(v153 + 8 * v158);
      if (v159 == v154)
      {
LABEL_76:
        v12 = *(_DWORD *)(v153 + 8 * v158 + 4);
        goto LABEL_8;
      }
      v175 = 1;
      while (v159)
      {
        v158 = ((_DWORD)v158 + v175) & v155;
        v159 = *(_DWORD *)(v153 + 8 * v158);
        ++v175;
        if (v159 == v154)
          goto LABEL_76;
      }
    }
    v12 = 0;
  }
LABEL_8:
  if ((int)v11 < 0x40000000)
  {
    v13 = 29;
LABEL_10:
    JSC::MacroAssemblerARM64::load64(a1, v13 | (v11 << 35), 2, a4, a5, a6, a7, a8);
    goto LABEL_11;
  }
  v170 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v171 = (v11 - 0x40000000);
  v172 = *(_DWORD **)(v170 + 120);
  if (!v172 || *v172 <= v171)
    goto LABEL_92;
  v173 = *((unsigned __int8 *)v172 + v171 + 4);
  if ((v173 - 1) >= 2)
  {
    if (v173)
    {
      if (v173 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987482E8);
      }
      goto LABEL_103;
    }
LABEL_92:
    v176 = *(_DWORD **)(v170 + 112);
    if (*v176 <= v171)
    {
      __break(0xC471u);
      JUMPOUT(0x198748404);
    }
    v177 = *(_QWORD *)&v176[2 * v171 + 2];
    if (v177)
      v178 = (v177 & 0xFFFE000000000002) == 0;
    else
      v178 = 0;
    if (!v178)
      goto LABEL_85;
    v179 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v177 & 0xFFFFFFFE) + 0x4C));
    if (v179 != &JSC::SymbolTable::s_info && v179 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_85;
LABEL_103:
    v181 = *(_DWORD *)(a1 + 200);
    if (v181 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v181 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v181) = -129956958;
    v182 = *(_DWORD *)(a1 + 200);
    v183 = v182 + 4;
    *(_DWORD *)(a1 + 200) = v182 + 4;
    if ((v182 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v183 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v183) = -129367998;
    *(_DWORD *)(a1 + 200) += 4;
    v13 = 2;
    goto LABEL_10;
  }
LABEL_85:
  v174 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v174 <= v171)
  {
    __break(0xC471u);
    JUMPOUT(0x1987483E4);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v174[2 * v171 + 2], 2, a4, a5, a6, a7, a8);
LABEL_11:
  v216 = (WTF *)v218;
  v217 = 2;
  JSC::MacroAssemblerARM64::xor64(a1, 6, 2, 5, v14, v15, v16, v17);
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, 5, 4294967294, v18, v19, v20, v21, (uint64_t)v215, v22);
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, 2, 1, v23, v24, v25, v26, (uint64_t)&v213, v27);
  v35 = (_QWORD *)(a1 + 624);
  v36 = v12 + (*(_DWORD *)(a1 + 640) >> 2);
  *(_QWORD *)((char *)&v219 + 4) = v214;
  LODWORD(v219) = v213;
  HIDWORD(v219) = v36;
  v37 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v37 == *(_DWORD *)(a1 + 632))
  {
    v160 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 624, v37 + 1, (unint64_t)&v219);
    v161 = *(_QWORD *)(a1 + 624) + 16 * *(unsigned int *)(a1 + 636);
    *(_DWORD *)v161 = *(_DWORD *)v160;
    *(_QWORD *)(v161 + 4) = *(_QWORD *)(v160 + 4);
    v40 = (_DWORD *)(v161 + 12);
    v38 = (_DWORD *)(v160 + 12);
  }
  else
  {
    v38 = (_DWORD *)&v219 + 3;
    v39 = *v35 + 16 * v37;
    *(_DWORD *)v39 = v213;
    *(_QWORD *)(v39 + 4) = *(_QWORD *)((char *)&v219 + 4);
    v40 = (_DWORD *)(v39 + 12);
  }
  *v40 = *v38;
  ++*(_DWORD *)(a1 + 636);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v28, v29, v30, v31, v32, v33, v34);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v42 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v28, v29, v30, v31, v32, v33, v34);
    v42 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v42) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v43 = 69;
  else
    v43 = 65;
  v208 = i;
  v209 = 0;
  v210 = v43;
  v211 = 15;
  v212 = -1;
  if (i != -1)
  {
    if (HIDWORD(v217) == (_DWORD)v217)
    {
      v44 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v216, (void *)(HIDWORD(v217) + 1), (unint64_t)&v208, v30, v31, v32, v33, v34);
      v46 = *v44;
      v45 = v44 + 1;
      v47 = (char *)v216 + 12 * HIDWORD(v217);
      *(_DWORD *)v47 = v46;
    }
    else
    {
      v45 = &v209;
      v47 = (char *)v216 + 12 * HIDWORD(v217);
      *(_DWORD *)v47 = i;
    }
    *(_QWORD *)(v47 + 4) = *(_QWORD *)v45;
    ++HIDWORD(v217);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v215, a1, v29, v30, v31, v32, v33, v34);
  JSC::MacroAssemblerARM64::branch64(a1, 3, 2, 27, v48, v49, v50, v51, (uint64_t)v207);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 0, 2, v52, v53, v54, v55, (uint64_t)&v205, v56);
  v64 = v12 + (*(_DWORD *)(a1 + 640) >> 2);
  *(_QWORD *)((char *)&v219 + 4) = v206;
  LODWORD(v219) = v205;
  HIDWORD(v219) = v64;
  v65 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v65 == *(_DWORD *)(a1 + 632))
  {
    v162 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 624, v65 + 1, (unint64_t)&v219);
    v163 = *(_QWORD *)(a1 + 624) + 16 * *(unsigned int *)(a1 + 636);
    *(_DWORD *)v163 = *(_DWORD *)v162;
    *(_QWORD *)(v163 + 4) = *(_QWORD *)(v162 + 4);
    v68 = (_DWORD *)(v163 + 12);
    v66 = (_DWORD *)(v162 + 12);
  }
  else
  {
    v66 = (_DWORD *)&v219 + 3;
    v67 = *v35 + 16 * v65;
    *(_DWORD *)v67 = v205;
    *(_QWORD *)(v67 + 4) = *(_QWORD *)((char *)&v219 + 4);
    v68 = (_DWORD *)(v67 + 12);
  }
  *v68 = *v66;
  ++*(_DWORD *)(a1 + 636);
  for (j = *(_DWORD *)(a1 + 200); j < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v57, v58, v59, v60, v61, v62, v63);
      j = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = -721215457;
    j = *(_DWORD *)(a1 + 200) + 4;
  }
  v70 = j;
  if ((j + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v57, v58, v59, v60, v61, v62, v63);
    v70 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v70) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v71 = 69;
  else
    v71 = 65;
  v200 = j;
  v201 = 0;
  v202 = v71;
  v203 = 15;
  v204 = -1;
  if (j != -1)
  {
    if (HIDWORD(v217) == (_DWORD)v217)
    {
      v72 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v216, (void *)(HIDWORD(v217) + 1), (unint64_t)&v200, v59, v60, v61, v62, v63);
      v74 = *v72;
      v73 = v72 + 1;
      v75 = (char *)v216 + 12 * HIDWORD(v217);
      *(_DWORD *)v75 = v74;
    }
    else
    {
      v73 = &v201;
      v75 = (char *)v216 + 12 * HIDWORD(v217);
      *(_DWORD *)v75 = j;
    }
    *(_QWORD *)(v75 + 4) = *(_QWORD *)v73;
    ++HIDWORD(v217);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v207, a1, v58, v59, v60, v61, v62, v63);
  JSC::MacroAssemblerARM64::and64(a1, -9, 2, 5);
  JSC::MacroAssemblerARM64::branch64(a1, 0, 5, 2, v76, v77, v78, v79, (uint64_t)&v198);
  v85 = v12 + (*(_DWORD *)(a1 + 640) >> 2);
  *(_QWORD *)((char *)&v219 + 4) = v199;
  LODWORD(v219) = v198;
  HIDWORD(v219) = v85;
  v86 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v86 == *(_DWORD *)(a1 + 632))
  {
    v164 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 624, v86 + 1, (unint64_t)&v219);
    v165 = *(_QWORD *)(a1 + 624) + 16 * *(unsigned int *)(a1 + 636);
    *(_DWORD *)v165 = *(_DWORD *)v164;
    *(_QWORD *)(v165 + 4) = *(_QWORD *)(v164 + 4);
    v89 = (_DWORD *)(v165 + 12);
    v87 = (_DWORD *)(v164 + 12);
  }
  else
  {
    v87 = (_DWORD *)&v219 + 3;
    v88 = *v35 + 16 * v86;
    *(_DWORD *)v88 = v198;
    *(_QWORD *)(v88 + 4) = *(_QWORD *)((char *)&v219 + 4);
    v89 = (_DWORD *)(v88 + 12);
  }
  *v89 = *v87;
  ++*(_DWORD *)(a1 + 636);
  JSC::JITThunks::ctiStub(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440), *(_QWORD *)(a1 + 352), (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::valueIsFalseyGenerator, v80, v81, v82, v83, v84, &v196);
  v97 = v196;
  *(_DWORD *)(a1 + 208) = 0;
  v98 = *(_DWORD *)(a1 + 200);
  if (v98 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v90, v91, v92, v93, v94, v95, v96);
    v98 = *(_DWORD *)(a1 + 200);
  }
  v99 = (_QWORD *)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v98) = -1811939328;
  v100 = (*(_DWORD *)(a1 + 200) + 4);
  *(_DWORD *)(a1 + 200) = v100;
  LOBYTE(v220) = -1;
  BYTE3(v220) = 15;
  *(_WORD *)((char *)&v220 + 1) = 65;
  *(_QWORD *)&v219 = v100 - 4;
  *((_QWORD *)&v219 + 1) = v97;
  WORD2(v220) = 384;
  v101 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v101 == *(_DWORD *)(a1 + 40))
  {
    v168 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 32, v101 + 1, (unint64_t)&v219, v92, v93, v94, v95, v96);
    v102 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
    *(_QWORD *)v102 = 0;
    *(_QWORD *)(v102 + 8) = 0;
    *(_BYTE *)(v102 + 16) = -1;
    v169 = (((*(unsigned __int8 *)(v102 + 19) >> 4) & 0xF) << 20) | 0xF0041;
    *(_WORD *)(v102 + 17) = 65;
    *(_BYTE *)(v102 + 19) = BYTE2(v169);
    *(_WORD *)(v102 + 20) &= 0xFC00u;
    v103 = *(_OWORD *)v168;
    v104 = *(_QWORD *)(v168 + 16);
  }
  else
  {
    v102 = *v99 + 24 * v101;
    v103 = v219;
    v104 = v220;
  }
  *(_QWORD *)(v102 + 16) = v104;
  *(_OWORD *)v102 = v103;
  ++*(_DWORD *)(a1 + 44);
  v105 = (unsigned int *)v197;
  v197 = 0;
  if (v105)
  {
    do
    {
      v106 = __ldaxr(v105);
      v107 = v106 - 1;
    }
    while (__stlxr(v107, v105));
    if (!v107)
    {
      atomic_store(1u, v105);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v105, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v185, v186, v187, v188, v189, v190, v191, v192);
    }
  }
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 1, 0, v93, v94, v95, v96, (uint64_t)&v194, *(int8x8_t *)&v103);
  v115 = v12 + (*(_DWORD *)(a1 + 640) >> 2);
  *(_QWORD *)((char *)&v219 + 4) = v195;
  LODWORD(v219) = v194;
  HIDWORD(v219) = v115;
  v116 = *(unsigned int *)(a1 + 636);
  v193 = (JSC::AssemblerBuffer *)(a1 + 56);
  if ((_DWORD)v116 == *(_DWORD *)(a1 + 632))
  {
    v166 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 624, v116 + 1, (unint64_t)&v219);
    v167 = *(_QWORD *)(a1 + 624) + 16 * *(unsigned int *)(a1 + 636);
    *(_DWORD *)v167 = *(_DWORD *)v166;
    *(_QWORD *)(v167 + 4) = *(_QWORD *)(v166 + 4);
    v119 = (_DWORD *)(v167 + 12);
    v117 = (_DWORD *)(v166 + 12);
  }
  else
  {
    v117 = (_DWORD *)&v219 + 3;
    v118 = *v35 + 16 * v116;
    *(_DWORD *)v118 = v194;
    *(_QWORD *)(v118 + 4) = *(_QWORD *)((char *)&v219 + 4);
    v119 = (_DWORD *)(v118 + 12);
  }
  *v119 = *v117;
  ++*(_DWORD *)(a1 + 636);
  v120 = HIDWORD(v217);
  if (HIDWORD(v217))
  {
    v121 = 0;
    do
    {
      if (v121 >= HIDWORD(v217))
      {
        __break(0xC471u);
        JUMPOUT(0x1987484CCLL);
      }
      v122 = v216;
      v123 = (unsigned int *)((char *)v216 + 12 * v121);
      *(_DWORD *)(a1 + 208) = 0;
      v125 = (unsigned __int8 *)(v123 + 2);
      v124 = *((unsigned __int8 *)v123 + 8);
      switch(*((_BYTE *)v123 + 8))
      {
        case 0x83:
        case 0x87:
          v126 = *v123;
          v127 = *(_DWORD *)(a1 + 200);
          if (v127 < *(_DWORD *)(a1 + 52))
          {
            do
            {
              if ((v127 + 4) > *(_DWORD *)(a1 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v193, (uint64_t)v108, v109, v110, v111, v112, v113, v114);
                v127 = *(_DWORD *)(a1 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(a1 + 56) + v127) = -721215457;
              v127 = *(_DWORD *)(a1 + 200) + 4;
              *(_DWORD *)(a1 + 200) = v127;
            }
            while (v127 < *(_DWORD *)(a1 + 52));
            v124 = *v125;
          }
          v128 = (char *)v122 + 12 * v121;
          v129 = v128[9];
          v130 = v128[10];
          v131 = v128[11];
          *(_QWORD *)&v219 = v126;
          *((_QWORD *)&v219 + 1) = v127;
          BYTE3(v220) = v129 & 0xF;
          *(_WORD *)((char *)&v220 + 1) = v124;
          v132 = v130 << 6;
          goto LABEL_57;
        case 0x84:
        case 0x88:
          v133 = *v123;
          v134 = *(_DWORD *)(a1 + 200);
          if (v134 < *(_DWORD *)(a1 + 52))
          {
            do
            {
              if ((v134 + 4) > *(_DWORD *)(a1 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v193, (uint64_t)v108, v109, v110, v111, v112, v113, v114);
                v134 = *(_DWORD *)(a1 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(a1 + 56) + v134) = -721215457;
              v134 = *(_DWORD *)(a1 + 200) + 4;
              *(_DWORD *)(a1 + 200) = v134;
            }
            while (v134 < *(_DWORD *)(a1 + 52));
            v124 = *v125;
          }
          v135 = (char *)v122 + 12 * v121;
          v136 = v135[9];
          v137 = *((_WORD *)v135 + 2);
          v131 = v135[11];
          *(_QWORD *)&v219 = v133;
          *((_QWORD *)&v219 + 1) = v134;
          BYTE3(v220) = v136 & 0xF;
          *(_WORD *)((char *)&v220 + 1) = v124;
          v132 = v137 & 0x3F;
LABEL_57:
          WORD2(v220) = v132;
          LOBYTE(v220) = v131;
          break;
        default:
          v142 = *v123;
          v143 = *(_DWORD *)(a1 + 200);
          if (v143 < *(_DWORD *)(a1 + 52))
          {
            do
            {
              if ((v143 + 4) > *(_DWORD *)(a1 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v193, (uint64_t)v108, v109, v110, v111, v112, v113, v114);
                v143 = *(_DWORD *)(a1 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(a1 + 56) + v143) = -721215457;
              v143 = *(_DWORD *)(a1 + 200) + 4;
              *(_DWORD *)(a1 + 200) = v143;
            }
            while (v143 < *(_DWORD *)(a1 + 52));
            v124 = *v125;
          }
          v144 = *((_BYTE *)v122 + 12 * v121 + 9);
          LOBYTE(v220) = -1;
          *(_QWORD *)&v219 = v142;
          *((_QWORD *)&v219 + 1) = v143;
          BYTE3(v220) = v144 & 0xF;
          *(_WORD *)((char *)&v220 + 1) = v124;
          WORD2(v220) = 0;
          break;
      }
      v138 = *(unsigned int *)(a1 + 44);
      if ((_DWORD)v138 == *(_DWORD *)(a1 + 40))
      {
        v145 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 32, v138 + 1, (unint64_t)&v219, v110, v111, v112, v113, v114);
        v139 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
        *(_QWORD *)v139 = 0;
        *(_QWORD *)(v139 + 8) = 0;
        *(_BYTE *)(v139 + 16) = -1;
        v146 = (((*(unsigned __int8 *)(v139 + 19) >> 4) & 0xF) << 20) | 0xF0041;
        *(_WORD *)(v139 + 17) = 65;
        *(_BYTE *)(v139 + 19) = BYTE2(v146);
        *(_WORD *)(v139 + 20) &= 0xFC00u;
        v140 = *(_OWORD *)v145;
        v141 = *(_QWORD *)(v145 + 16);
      }
      else
      {
        v139 = *v99 + 24 * v138;
        v140 = v219;
        v141 = v220;
      }
      *(_QWORD *)(v139 + 16) = v141;
      *(_OWORD *)v139 = v140;
      ++*(_DWORD *)(a1 + 44);
      ++v121;
    }
    while (v121 != v120);
  }
  v147 = v216;
  if (v218 != (_BYTE *)v216)
  {
    if (v216)
    {
      v216 = 0;
      LODWORD(v217) = 0;
      WTF::fastFree((unint64_t)v147, v108, v109, v110, v111, v112, v113, v114);
    }
  }
}

void JSC::JIT::valueIsFalseyGenerator(JSC::JIT *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  pthread_key_t *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  char v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  WTF *v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  char v63;
  char **v64;
  char *v65;
  _QWORD v66[3];
  WTF *v67;
  _BYTE v68[128];
  unsigned int v69;
  char v70;
  int v71;
  int v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  _BYTE v76[32];
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  WTF *v80;
  _BYTE v81[128];
  unsigned int v82;
  unsigned int v83;
  int v84;
  char v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _BYTE *v89;
  char v90;
  uint64_t v91;
  int v92;
  _BYTE *v93;
  char v94;
  uint64_t v95;
  int v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v76[0] = 0;
  v76[24] = 0;
  v77 = 0;
  v78 = 0;
  v79 = 0x8000000080000000;
  v80 = (WTF *)v81;
  v82 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v66[0] = &v65;
    v59 = (WTF *)v66;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v59, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(WTF **)v14;
  v16 = v82;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v82 < v17)
    {
      if (v80 && v80 != (WTF *)v81)
      {
        WTF::fastFree((unint64_t)v80, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(WTF **)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v80 = v15;
      v82 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v82;
    }
  }
  v18 = 0;
  v85 = 1;
  v83 = 0;
  v84 = 0;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v90 = 16;
  v92 = 0x10000;
  v89 = v76;
  v91 = 0;
  v93 = v76;
  v94 = 17;
  v95 = 0;
  v96 = 0x20000;
  v97 = 0;
  v99 = 0;
  v98 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v80, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v83;
  }
  *(_DWORD *)((char *)v80 + v18) = 838861792;
  v83 += 4;
  JSC::AssemblyHelpers::branchIfValue((uint64_t)v76, (uint64_t)this, 2u, 1, 5, 0, 1, 1, (uint64_t)&v59, 0, 2, 0, 1u);
  v26 = v83;
  if (v83 + 4 > v82)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v80, v19, v20, v21, v22, v23, v24, v25);
    v26 = v83;
  }
  *(_DWORD *)((char *)v80 + v26) = 1384120320;
  v27 = v83 + 4;
  v83 += 4;
  if (!v61)
  {
LABEL_20:
    if (v27 + 4 > v82)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v80, v19, v20, v21, v22, v23, v24, v25);
      v27 = v83;
    }
    *(_DWORD *)((char *)v80 + v27) = -698416192;
    v83 += 4;
    v66[0] = 0;
    v66[1] = 0;
    v66[2] = -1;
    v67 = (WTF *)v68;
    v69 = 128;
    v31 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v31 != -1)
    {
      v65 = &v63;
      v64 = &v65;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v64, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v32 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v40 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v40)
    {
      v40 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v40, v32);
    }
    v41 = *(WTF **)v40;
    if (*(_QWORD *)v40 != v40 + 8)
    {
      v42 = *(_DWORD *)(v40 + 136);
      if (v69 < v42)
      {
        if (v67 && v67 != (WTF *)v68)
        {
          WTF::fastFree((unint64_t)v67, v33, v34, v35, v36, v37, v38, v39);
          v41 = *(WTF **)v40;
          v42 = *(_DWORD *)(v40 + 136);
        }
        v67 = v41;
        v69 = v42;
        *(_QWORD *)v40 = v40 + 8;
        *(_DWORD *)(v40 + 136) = 128;
      }
    }
    v43 = 1;
    v70 = 1;
    v71 = 0;
    v72 = 13;
    v73 = 0u;
    v74 = 0u;
    v75 = 0;
    JSC::LinkBuffer::linkCode((uint64_t)v66, (uint64_t)v76, 1, v35, v36, v37, v38, v39);
    BYTE2(v71) = 1;
    if (!byte_1ECF4C288)
    {
      if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
      {
        JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v66, "valueIsFalsey", 14, a2);
LABEL_35:
        JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v66, v44, v45, v46, v47, v48, v49, v50);
        v58 = v59;
        if (&v62 != (uint64_t *)v59)
        {
          if (v59)
          {
            v59 = 0;
            v60 = 0;
            WTF::fastFree((unint64_t)v58, v51, v52, v53, v54, v55, v56, v57);
          }
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v76, v51, v52, v53, v54, v55, v56, v57);
        return;
      }
      v43 = HIBYTE(word_1ECF4C286) != 0;
    }
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v66, v43, "valueIsFalsey", 14, "Baseline: valueIsFalsey", a2);
    goto LABEL_35;
  }
  v28 = 0;
  v29 = 0;
  v30 = 12 * v61;
  while (v29 < v61)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v59 + v28), (uint64_t)v76, v20, v21, v22, v23, v24, v25);
    ++v29;
    v28 += 12;
    if (v30 == v28)
    {
      v27 = v83;
      goto LABEL_20;
    }
  }
  __break(0xC471u);
}

unsigned int *JSC::JIT::emit_op_jeq_null(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int i;
  unsigned int v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _DWORD *v98;
  int v99;
  _DWORD *v100;
  int v101;
  _DWORD *v102;
  unint64_t v103;
  BOOL v104;
  char **v105;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  unsigned int v115[2];
  char v116;
  __int16 v117;
  char v118;
  int v119;
  uint64_t v120;
  unsigned int v121[3];
  unsigned int v122[3];
  int v123;
  uint64_t v124;
  int v125;

  v9 = *a2;
  if (v9 == 128)
  {
    v112 = *((__int16 *)a2 + 1);
    if (v112 <= 63)
      v11 = v112;
    else
      v11 = (v112 + 1073741760);
    v12 = *((__int16 *)a2 + 2);
  }
  else if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v12 = *(_DWORD *)(a2 + 6);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
  }
  if (!v12)
  {
    v80 = *(_QWORD *)(a1 + 808);
    v81 = *(_QWORD *)(v80 + 80);
    v82 = *(_QWORD *)v81;
    v83 = *(unsigned int *)(v81 + 12) + *(_QWORD *)v81;
    if (v82 > (unint64_t)a2 || v83 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198749000);
    }
    v85 = *(_QWORD *)(v80 + 144);
    if (v85)
    {
      v86 = (_DWORD)a2 - v82;
      v87 = *(_DWORD *)(v85 - 8);
      v88 = 9 * ((~(v86 << 15) + v86) ^ ((~(v86 << 15) + v86) >> 10));
      v89 = (v88 ^ (v88 >> 6)) + ~((v88 ^ (v88 >> 6)) << 11);
      v90 = v87 & (v89 ^ HIWORD(v89));
      v91 = *(_DWORD *)(v85 + 8 * v90);
      if (v91 == v86)
      {
LABEL_41:
        v12 = *(_DWORD *)(v85 + 8 * v90 + 4);
        goto LABEL_8;
      }
      v101 = 1;
      while (v91)
      {
        v90 = ((_DWORD)v90 + v101) & v87;
        v91 = *(_DWORD *)(v85 + 8 * v90);
        ++v101;
        if (v91 == v86)
          goto LABEL_41;
      }
    }
    v12 = 0;
  }
LABEL_8:
  if ((int)v11 < 0x40000000)
  {
    v13 = (v11 << 35) | 0x1D;
LABEL_10:
    JSC::MacroAssemblerARM64::load64(a1, v13, 0, a4, a5, a6, a7, a8);
    goto LABEL_11;
  }
  v96 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v97 = (v11 - 0x40000000);
  v98 = *(_DWORD **)(v96 + 120);
  if (!v98 || *v98 <= v97)
    goto LABEL_54;
  v99 = *((unsigned __int8 *)v98 + v97 + 4);
  if ((v99 - 1) >= 2)
  {
    if (v99)
    {
      if (v99 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x198748EE8);
      }
      goto LABEL_65;
    }
LABEL_54:
    v102 = *(_DWORD **)(v96 + 112);
    if (*v102 <= v97)
    {
      __break(0xC471u);
      JUMPOUT(0x19874904CLL);
    }
    v103 = *(_QWORD *)&v102[2 * v97 + 2];
    if (v103)
      v104 = (v103 & 0xFFFE000000000002) == 0;
    else
      v104 = 0;
    if (!v104)
      goto LABEL_47;
    v105 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v103 & 0xFFFFFFFE) + 0x4C));
    if (v105 != &JSC::SymbolTable::s_info && v105 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_47;
LABEL_65:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v107, v108, v109, v110, v111);
    v13 = v11 << 35;
    goto LABEL_10;
  }
LABEL_47:
  v100 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v100 <= v97)
  {
    __break(0xC471u);
    JUMPOUT(0x19874902CLL);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v100[2 * v97 + 2], 0, a4, a5, a6, a7, a8);
LABEL_11:
  JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v14, v15, v16, v17, v18, (uint64_t)v122);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198748F08);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v27 = *(_BYTE *)(a1 + 304) & 0x1F | 0x38406000;
  v28 = *(_DWORD *)(a1 + 200);
  if (v28 + 4 > *(_DWORD *)(a1 + 192))
  {
    v26 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v19, v20, v21, v22, v23, v24, v25).n128_u64[0];
    v28 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = v27;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, a1, 0, 17, v22, v23, v24, v25, (uint64_t)v121, v26);
  v36 = *(_DWORD *)(a1 + 200);
  if (v36 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v29, v30, v31, v32, v33, v34, v35);
    v36 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v36) = -1203765246;
  v37 = *(_DWORD *)(a1 + 200);
  v38 = v37 + 4;
  *(_DWORD *)(a1 + 200) = v37 + 4;
  if ((v37 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v29, v30, v31, v32, v33, v34, v35);
    v38 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v38) = -746787774;
  v39 = *(_DWORD *)(a1 + 200);
  v40 = v39 + 4;
  *(_DWORD *)(a1 + 200) = v39 + 4;
  if ((v39 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v29, v30, v31, v32, v33, v34, v35);
    v40 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v40) = -129989824;
  v41 = *(_DWORD *)(a1 + 200);
  v42 = v41 + 4;
  *(_DWORD *)(a1 + 200) = v41 + 4;
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198748F68);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v43 = *(_BYTE *)(a1 + 304) & 0x1F | 0xF8428040;
  if ((v41 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v29, v30, v31, v32, v33, v34, v35);
    v42 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v42) = v43;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch64(a1, 0, 17, 0, v32, v33, v34, v35, (uint64_t)&v119);
  v51 = (_QWORD *)(a1 + 624);
  v52 = v120;
  v53 = v12 + (*(_DWORD *)(a1 + 640) >> 2);
  v123 = v119;
  v124 = v120;
  v125 = v53;
  v54 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v54 == *(_DWORD *)(a1 + 632))
  {
    v92 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 624, v54 + 1, (unint64_t)&v123);
    v93 = *(_QWORD *)(a1 + 624) + 16 * *(unsigned int *)(a1 + 636);
    *(_DWORD *)v93 = *(_DWORD *)v92;
    *(_QWORD *)(v93 + 4) = *(_QWORD *)(v92 + 4);
    *(_DWORD *)(v93 + 12) = *(_DWORD *)(v92 + 12);
  }
  else
  {
    v55 = *v51 + 16 * v54;
    *(_DWORD *)v55 = v119;
    *(_QWORD *)(v55 + 4) = v52;
    *(_DWORD *)(v55 + 12) = v53;
  }
  ++*(_DWORD *)(a1 + 636);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v44, v45, v46, v47, v48, v49, v50);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v57 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v44, v45, v46, v47, v48, v49, v50);
    v57 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v57) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v58 = 69;
  else
    v58 = 65;
  v115[0] = i;
  v115[1] = 0;
  v116 = v58;
  v117 = 15;
  v118 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v122, a1, v45, v46, v47, v48, v49, v50);
  JSC::MacroAssemblerARM64::and64(a1, -9, 0, 0);
  JSC::MacroAssemblerARM64::branch64(a1, 0, 0, 2, v59, v60, v61, v62, (uint64_t)&v113);
  v69 = v114;
  v70 = v12 + (*(_DWORD *)(a1 + 640) >> 2);
  v123 = v113;
  v124 = v114;
  v125 = v70;
  v71 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v71 == *(_DWORD *)(a1 + 632))
  {
    v94 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 624, v71 + 1, (unint64_t)&v123);
    v95 = *(_QWORD *)(a1 + 624) + 16 * *(unsigned int *)(a1 + 636);
    *(_DWORD *)v95 = *(_DWORD *)v94;
    *(_QWORD *)(v95 + 4) = *(_QWORD *)(v94 + 4);
    *(_DWORD *)(v95 + 12) = *(_DWORD *)(v94 + 12);
  }
  else
  {
    v72 = *v51 + 16 * v71;
    *(_DWORD *)v72 = v113;
    *(_QWORD *)(v72 + 4) = v69;
    *(_DWORD *)(v72 + 12) = v70;
  }
  ++*(_DWORD *)(a1 + 636);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v121, a1, v63, v64, v65, v66, v67, v68);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v115, a1, v73, v74, v75, v76, v77, v78);
}

unsigned int *JSC::JIT::emit_op_jneq_null(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int i;
  unsigned int v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _DWORD *v98;
  int v99;
  _DWORD *v100;
  int v101;
  _DWORD *v102;
  unint64_t v103;
  BOOL v104;
  char **v105;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  unsigned int v115[2];
  char v116;
  __int16 v117;
  char v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  unsigned int v123[3];
  int v124;
  uint64_t v125;
  int v126;

  v9 = *a2;
  if (v9 == 128)
  {
    v112 = *((__int16 *)a2 + 1);
    if (v112 <= 63)
      v11 = v112;
    else
      v11 = (v112 + 1073741760);
    v12 = *((__int16 *)a2 + 2);
  }
  else if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v12 = *(_DWORD *)(a2 + 6);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
  }
  if (!v12)
  {
    v78 = *(_QWORD *)(a1 + 808);
    v79 = *(_QWORD *)(v78 + 80);
    v80 = *(_QWORD *)v79;
    v81 = *(unsigned int *)(v79 + 12) + *(_QWORD *)v79;
    if (v80 > (unint64_t)a2 || v81 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x19874976CLL);
    }
    v83 = *(_QWORD *)(v78 + 144);
    if (v83)
    {
      v84 = (_DWORD)a2 - v80;
      v85 = *(_DWORD *)(v83 - 8);
      v86 = 9 * ((~(v84 << 15) + v84) ^ ((~(v84 << 15) + v84) >> 10));
      v87 = (v86 ^ (v86 >> 6)) + ~((v86 ^ (v86 >> 6)) << 11);
      v88 = v85 & (v87 ^ HIWORD(v87));
      v89 = *(_DWORD *)(v83 + 8 * v88);
      if (v89 == v84)
      {
LABEL_43:
        v12 = *(_DWORD *)(v83 + 8 * v88 + 4);
        goto LABEL_8;
      }
      v101 = 1;
      while (v89)
      {
        v88 = ((_DWORD)v88 + v101) & v85;
        v89 = *(_DWORD *)(v83 + 8 * v88);
        ++v101;
        if (v89 == v84)
          goto LABEL_43;
      }
    }
    v12 = 0;
  }
LABEL_8:
  if ((int)v11 < 0x40000000)
  {
    v13 = (v11 << 35) | 0x1D;
LABEL_10:
    JSC::MacroAssemblerARM64::load64(a1, v13, 0, a4, a5, a6, a7, a8);
    goto LABEL_11;
  }
  v96 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v97 = (v11 - 0x40000000);
  v98 = *(_DWORD **)(v96 + 120);
  if (!v98 || *v98 <= v97)
    goto LABEL_57;
  v99 = *((unsigned __int8 *)v98 + v97 + 4);
  if ((v99 - 1) >= 2)
  {
    if (v99)
    {
      if (v99 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x198749654);
      }
      goto LABEL_68;
    }
LABEL_57:
    v102 = *(_DWORD **)(v96 + 112);
    if (*v102 <= v97)
    {
      __break(0xC471u);
      JUMPOUT(0x1987497B8);
    }
    v103 = *(_QWORD *)&v102[2 * v97 + 2];
    if (v103)
      v104 = (v103 & 0xFFFE000000000002) == 0;
    else
      v104 = 0;
    if (!v104)
      goto LABEL_50;
    v105 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v103 & 0xFFFFFFFE) + 0x4C));
    if (v105 != &JSC::SymbolTable::s_info && v105 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_50;
LABEL_68:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v107, v108, v109, v110, v111);
    v13 = v11 << 35;
    goto LABEL_10;
  }
LABEL_50:
  v100 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v100 <= v97)
  {
    __break(0xC471u);
    JUMPOUT(0x198749798);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v100[2 * v97 + 2], 0, a4, a5, a6, a7, a8);
LABEL_11:
  JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v14, v15, v16, v17, v18, (uint64_t)v123);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198749674);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v27 = *(_BYTE *)(a1 + 304) & 0x1F | 0x38406000;
  v28 = *(_DWORD *)(a1 + 200);
  if (v28 + 4 > *(_DWORD *)(a1 + 192))
  {
    v26 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v19, v20, v21, v22, v23, v24, v25).n128_u64[0];
    v28 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = v27;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, a1, 0, 17, v22, v23, v24, v25, (uint64_t)&v121, v26);
  v36 = (_QWORD *)(a1 + 624);
  v37 = v122;
  v38 = v12 + (*(_DWORD *)(a1 + 640) >> 2);
  v124 = v121;
  v125 = v122;
  v126 = v38;
  v39 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v39 == *(_DWORD *)(a1 + 632))
  {
    v90 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 624, v39 + 1, (unint64_t)&v124);
    v91 = *(_QWORD *)(a1 + 624) + 16 * *(unsigned int *)(a1 + 636);
    *(_DWORD *)v91 = *(_DWORD *)v90;
    *(_QWORD *)(v91 + 4) = *(_QWORD *)(v90 + 4);
    *(_DWORD *)(v91 + 12) = *(_DWORD *)(v90 + 12);
  }
  else
  {
    v40 = *v36 + 16 * v39;
    *(_DWORD *)v40 = v121;
    *(_QWORD *)(v40 + 4) = v37;
    *(_DWORD *)(v40 + 12) = v38;
  }
  ++*(_DWORD *)(a1 + 636);
  v41 = *(_DWORD *)(a1 + 200);
  if (v41 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v29, v30, v31, v32, v33, v34, v35);
    v41 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v41) = -1203765246;
  v42 = *(_DWORD *)(a1 + 200);
  v43 = v42 + 4;
  *(_DWORD *)(a1 + 200) = v42 + 4;
  if ((v42 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v29, v30, v31, v32, v33, v34, v35);
    v43 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v43) = -746787774;
  v44 = *(_DWORD *)(a1 + 200);
  v45 = v44 + 4;
  *(_DWORD *)(a1 + 200) = v44 + 4;
  if ((v44 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v29, v30, v31, v32, v33, v34, v35);
    v45 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v45) = -129989824;
  v46 = *(_DWORD *)(a1 + 200);
  v47 = v46 + 4;
  *(_DWORD *)(a1 + 200) = v46 + 4;
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987496D4);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v48 = *(_BYTE *)(a1 + 304) & 0x1F | 0xF8428040;
  if ((v46 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v29, v30, v31, v32, v33, v34, v35);
    v47 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v47) = v48;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch64(a1, 1, 17, 0, v32, v33, v34, v35, (uint64_t)&v119);
  v56 = v120;
  v57 = v12 + (*(_DWORD *)(a1 + 640) >> 2);
  v124 = v119;
  v125 = v120;
  v126 = v57;
  v58 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v58 == *(_DWORD *)(a1 + 632))
  {
    v92 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 624, v58 + 1, (unint64_t)&v124);
    v93 = *(_QWORD *)(a1 + 624) + 16 * *(unsigned int *)(a1 + 636);
    *(_DWORD *)v93 = *(_DWORD *)v92;
    *(_QWORD *)(v93 + 4) = *(_QWORD *)(v92 + 4);
    *(_DWORD *)(v93 + 12) = *(_DWORD *)(v92 + 12);
  }
  else
  {
    v59 = *v36 + 16 * v58;
    *(_DWORD *)v59 = v119;
    *(_QWORD *)(v59 + 4) = v56;
    *(_DWORD *)(v59 + 12) = v57;
  }
  ++*(_DWORD *)(a1 + 636);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v49, v50, v51, v52, v53, v54, v55);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v61 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v49, v50, v51, v52, v53, v54, v55);
    v61 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v61) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v62 = 69;
  else
    v62 = 65;
  v115[0] = i;
  v115[1] = 0;
  v116 = v62;
  v117 = 15;
  v118 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v123, a1, v50, v51, v52, v53, v54, v55);
  JSC::MacroAssemblerARM64::and64(a1, -9, 0, 0);
  JSC::MacroAssemblerARM64::branch64(a1, 1, 0, 2, v63, v64, v65, v66, (uint64_t)&v113);
  v73 = v114;
  v74 = v12 + (*(_DWORD *)(a1 + 640) >> 2);
  v124 = v113;
  v125 = v114;
  v126 = v74;
  v75 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v75 == *(_DWORD *)(a1 + 632))
  {
    v94 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 624, v75 + 1, (unint64_t)&v124);
    v95 = *(_QWORD *)(a1 + 624) + 16 * *(unsigned int *)(a1 + 636);
    *(_DWORD *)v95 = *(_DWORD *)v94;
    *(_QWORD *)(v95 + 4) = *(_QWORD *)(v94 + 4);
    *(_DWORD *)(v95 + 12) = *(_DWORD *)(v94 + 12);
  }
  else
  {
    v76 = *v36 + 16 * v75;
    *(_DWORD *)v76 = v113;
    *(_QWORD *)(v76 + 4) = v73;
    *(_DWORD *)(v76 + 12) = v74;
  }
  ++*(_DWORD *)(a1 + 636);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v115, a1, v67, v68, v69, v70, v71, v72);
}

uint64_t JSC::JIT::emit_op_jundefined_or_null(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  _DWORD *v40;
  int v41;
  _DWORD *v42;
  unint64_t v43;
  BOOL v44;
  char **v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;

  v9 = *a2;
  if (v9 == 128)
  {
    v52 = *((__int16 *)a2 + 1);
    if (v52 <= 63)
      v11 = v52;
    else
      v11 = (v52 + 1073741760);
    v12 = *((__int16 *)a2 + 2);
  }
  else if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v12 = *(_DWORD *)(a2 + 6);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
  }
  if (!v12)
  {
    v23 = *(_QWORD *)(a1 + 808);
    v24 = *(_QWORD *)(v23 + 80);
    v25 = *(_QWORD *)v24;
    v26 = *(unsigned int *)(v24 + 12) + *(_QWORD *)v24;
    if (v25 > (unint64_t)a2 || v26 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198749AF4);
    }
    v28 = *(_QWORD *)(v23 + 144);
    if (v28)
    {
      v29 = (_DWORD)a2 - v25;
      v30 = *(_DWORD *)(v28 - 8);
      v31 = 9 * ((~(v29 << 15) + v29) ^ ((~(v29 << 15) + v29) >> 10));
      v32 = (v31 ^ (v31 >> 6)) + ~((v31 ^ (v31 >> 6)) << 11);
      v33 = v30 & (v32 ^ HIWORD(v32));
      v34 = *(_DWORD *)(v28 + 8 * v33);
      if (v34 == v29)
      {
LABEL_21:
        v12 = *(_DWORD *)(v28 + 8 * v33 + 4);
        goto LABEL_8;
      }
      v41 = 1;
      while (v34)
      {
        v33 = ((_DWORD)v33 + v41) & v30;
        v34 = *(_DWORD *)(v28 + 8 * v33);
        ++v41;
        if (v34 == v29)
          goto LABEL_21;
      }
    }
    v12 = 0;
  }
LABEL_8:
  if ((int)v11 < 0x40000000)
  {
    v13 = (v11 << 35) | 0x1D;
LABEL_10:
    JSC::MacroAssemblerARM64::load64(a1, v13, 0, a4, a5, a6, a7, a8);
    goto LABEL_11;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v37 = (v11 - 0x40000000);
  v38 = *(_DWORD **)(v36 + 120);
  if (!v38 || *v38 <= v37)
    goto LABEL_33;
  v39 = *((unsigned __int8 *)v38 + v37 + 4);
  if ((v39 - 1) >= 2)
  {
    if (v39)
    {
      if (v39 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x198749AB8);
      }
      goto LABEL_44;
    }
LABEL_33:
    v42 = *(_DWORD **)(v36 + 112);
    if (*v42 <= v37)
    {
      __break(0xC471u);
      JUMPOUT(0x198749B40);
    }
    v43 = *(_QWORD *)&v42[2 * v37 + 2];
    if (v43)
      v44 = (v43 & 0xFFFE000000000002) == 0;
    else
      v44 = 0;
    if (!v44)
      goto LABEL_26;
    v45 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x4C));
    if (v45 != &JSC::SymbolTable::s_info && v45 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_26;
LABEL_44:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v47, v48, v49, v50, v51);
    v13 = v11 << 35;
    goto LABEL_10;
  }
LABEL_26:
  v40 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v40 <= v37)
  {
    __break(0xC471u);
    JUMPOUT(0x198749B14);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v40[2 * v37 + 2], 0, a4, a5, a6, a7, a8);
LABEL_11:
  JSC::MacroAssemblerARM64::and64(a1, -9, 0, 0);
  JSC::MacroAssemblerARM64::branch64(a1, 0, 0, 2, v14, v15, v16, v17, (uint64_t)&v53);
  result = a1 + 624;
  v19 = v54;
  v20 = v12 + (*(_DWORD *)(a1 + 640) >> 2);
  v55 = v53;
  v56 = v54;
  v57 = v20;
  v21 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v21 == *(_DWORD *)(a1 + 632))
  {
    result = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v21 + 1, (unint64_t)&v55);
    v35 = *(_QWORD *)(a1 + 624) + 16 * *(unsigned int *)(a1 + 636);
    *(_DWORD *)v35 = *(_DWORD *)result;
    *(_QWORD *)(v35 + 4) = *(_QWORD *)(result + 4);
    *(_DWORD *)(v35 + 12) = *(_DWORD *)(result + 12);
  }
  else
  {
    v22 = *(_QWORD *)result + 16 * v21;
    *(_DWORD *)v22 = v53;
    *(_QWORD *)(v22 + 4) = v19;
    *(_DWORD *)(v22 + 12) = v20;
  }
  ++*(_DWORD *)(a1 + 636);
  return result;
}

uint64_t JSC::JIT::emit_op_jnundefined_or_null(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  _DWORD *v40;
  int v41;
  _DWORD *v42;
  unint64_t v43;
  BOOL v44;
  char **v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;

  v9 = *a2;
  if (v9 == 128)
  {
    v52 = *((__int16 *)a2 + 1);
    if (v52 <= 63)
      v11 = v52;
    else
      v11 = (v52 + 1073741760);
    v12 = *((__int16 *)a2 + 2);
  }
  else if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v12 = *(_DWORD *)(a2 + 6);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
  }
  if (!v12)
  {
    v23 = *(_QWORD *)(a1 + 808);
    v24 = *(_QWORD *)(v23 + 80);
    v25 = *(_QWORD *)v24;
    v26 = *(unsigned int *)(v24 + 12) + *(_QWORD *)v24;
    if (v25 > (unint64_t)a2 || v26 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198749E64);
    }
    v28 = *(_QWORD *)(v23 + 144);
    if (v28)
    {
      v29 = (_DWORD)a2 - v25;
      v30 = *(_DWORD *)(v28 - 8);
      v31 = 9 * ((~(v29 << 15) + v29) ^ ((~(v29 << 15) + v29) >> 10));
      v32 = (v31 ^ (v31 >> 6)) + ~((v31 ^ (v31 >> 6)) << 11);
      v33 = v30 & (v32 ^ HIWORD(v32));
      v34 = *(_DWORD *)(v28 + 8 * v33);
      if (v34 == v29)
      {
LABEL_21:
        v12 = *(_DWORD *)(v28 + 8 * v33 + 4);
        goto LABEL_8;
      }
      v41 = 1;
      while (v34)
      {
        v33 = ((_DWORD)v33 + v41) & v30;
        v34 = *(_DWORD *)(v28 + 8 * v33);
        ++v41;
        if (v34 == v29)
          goto LABEL_21;
      }
    }
    v12 = 0;
  }
LABEL_8:
  if ((int)v11 < 0x40000000)
  {
    v13 = (v11 << 35) | 0x1D;
LABEL_10:
    JSC::MacroAssemblerARM64::load64(a1, v13, 0, a4, a5, a6, a7, a8);
    goto LABEL_11;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v37 = (v11 - 0x40000000);
  v38 = *(_DWORD **)(v36 + 120);
  if (!v38 || *v38 <= v37)
    goto LABEL_33;
  v39 = *((unsigned __int8 *)v38 + v37 + 4);
  if ((v39 - 1) >= 2)
  {
    if (v39)
    {
      if (v39 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x198749E28);
      }
      goto LABEL_44;
    }
LABEL_33:
    v42 = *(_DWORD **)(v36 + 112);
    if (*v42 <= v37)
    {
      __break(0xC471u);
      JUMPOUT(0x198749EB0);
    }
    v43 = *(_QWORD *)&v42[2 * v37 + 2];
    if (v43)
      v44 = (v43 & 0xFFFE000000000002) == 0;
    else
      v44 = 0;
    if (!v44)
      goto LABEL_26;
    v45 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x4C));
    if (v45 != &JSC::SymbolTable::s_info && v45 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_26;
LABEL_44:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v47, v48, v49, v50, v51);
    v13 = v11 << 35;
    goto LABEL_10;
  }
LABEL_26:
  v40 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v40 <= v37)
  {
    __break(0xC471u);
    JUMPOUT(0x198749E84);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v40[2 * v37 + 2], 0, a4, a5, a6, a7, a8);
LABEL_11:
  JSC::MacroAssemblerARM64::and64(a1, -9, 0, 0);
  JSC::MacroAssemblerARM64::branch64(a1, 1, 0, 2, v14, v15, v16, v17, (uint64_t)&v53);
  result = a1 + 624;
  v19 = v54;
  v20 = v12 + (*(_DWORD *)(a1 + 640) >> 2);
  v55 = v53;
  v56 = v54;
  v57 = v20;
  v21 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v21 == *(_DWORD *)(a1 + 632))
  {
    result = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v21 + 1, (unint64_t)&v55);
    v35 = *(_QWORD *)(a1 + 624) + 16 * *(unsigned int *)(a1 + 636);
    *(_DWORD *)v35 = *(_DWORD *)result;
    *(_QWORD *)(v35 + 4) = *(_QWORD *)(result + 4);
    *(_DWORD *)(v35 + 12) = *(_DWORD *)(result + 12);
  }
  else
  {
    v22 = *(_QWORD *)result + 16 * v21;
    *(_DWORD *)v22 = v53;
    *(_QWORD *)(v22 + 4) = v19;
    *(_DWORD *)(v22 + 12) = v20;
  }
  ++*(_DWORD *)(a1 + 636);
  return result;
}

uint64_t JSC::JIT::emit_op_jeq_ptr(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  _DWORD *v52;
  int v53;
  _DWORD *v54;
  unint64_t v55;
  BOOL v56;
  char **v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;

  v9 = *a2;
  if (v9 == 128)
  {
    v64 = *((__int16 *)a2 + 1);
    if (v64 <= 63)
      v11 = v64;
    else
      v11 = (v64 + 1073741760);
    v65 = *((__int16 *)a2 + 2);
    if (v65 <= 63)
      v13 = v65;
    else
      v13 = (v65 + 1073741760);
    v14 = *((__int16 *)a2 + 3);
  }
  else if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v13 = *(unsigned int *)(a2 + 6);
    v14 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
    if (v12 <= 15)
      v13 = v12;
    else
      v13 = (v12 + 1073741808);
    v14 = (char)a2[3];
  }
  if (!v14)
  {
    v35 = *(_QWORD *)(a1 + 808);
    v36 = *(_QWORD *)(v35 + 80);
    v37 = *(_QWORD *)v36;
    v38 = *(unsigned int *)(v36 + 12) + *(_QWORD *)v36;
    if (v37 > (unint64_t)a2 || v38 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x19874A2A0);
    }
    v40 = *(_QWORD *)(v35 + 144);
    if (v40)
    {
      v41 = (_DWORD)a2 - v37;
      v42 = *(_DWORD *)(v40 - 8);
      v43 = 9 * ((~(v41 << 15) + v41) ^ ((~(v41 << 15) + v41) >> 10));
      v44 = (v43 ^ (v43 >> 6)) + ~((v43 ^ (v43 >> 6)) << 11);
      v45 = v42 & (v44 ^ HIWORD(v44));
      v46 = *(_DWORD *)(v40 + 8 * v45);
      if (v46 == v41)
      {
LABEL_29:
        v14 = *(_DWORD *)(v40 + 8 * v45 + 4);
        goto LABEL_11;
      }
      v53 = 1;
      while (v46)
      {
        v45 = ((_DWORD)v45 + v53) & v42;
        v46 = *(_DWORD *)(v40 + 8 * v45);
        ++v53;
        if (v46 == v41)
          goto LABEL_29;
      }
    }
    v14 = 0;
  }
LABEL_11:
  if ((int)v11 < 0x40000000)
  {
    v15 = (v11 << 35) | 0x1D;
LABEL_13:
    JSC::MacroAssemblerARM64::load64(a1, v15, 0, a4, a5, a6, a7, a8);
    goto LABEL_14;
  }
  v48 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v49 = (v11 - 0x40000000);
  v50 = *(_DWORD **)(v48 + 120);
  if (!v50 || *v50 <= v49)
    goto LABEL_41;
  v51 = *((unsigned __int8 *)v50 + v49 + 4);
  if ((v51 - 1) >= 2)
  {
    if (v51)
    {
      if (v51 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19874A214);
      }
      goto LABEL_52;
    }
LABEL_41:
    v54 = *(_DWORD **)(v48 + 112);
    if (*v54 <= v49)
    {
      __break(0xC471u);
      JUMPOUT(0x19874A2F0);
    }
    v55 = *(_QWORD *)&v54[2 * v49 + 2];
    if (v55)
      v56 = (v55 & 0xFFFE000000000002) == 0;
    else
      v56 = 0;
    if (!v56)
      goto LABEL_34;
    v57 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v55 & 0xFFFFFFFE) + 0x4C));
    if (v57 != &JSC::SymbolTable::s_info && v57 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_34;
LABEL_52:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v59, v60, v61, v62, v63);
    v15 = v11 << 35;
    goto LABEL_13;
  }
LABEL_34:
  v52 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v52 <= v49)
  {
    __break(0xC471u);
    JUMPOUT(0x19874A2C0);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v52[2 * v49 + 2], 0, a4, a5, a6, a7, a8);
LABEL_14:
  if ((int)v13 <= 0x3FFFFFFF)
  {
    __break(0xC471u);
    JUMPOUT(0x19874A234);
  }
  v23 = *(_DWORD *)(a1 + 200);
  if (v23 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v16, v17, v18, v19, v20, v21, v22);
    v23 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = -129956958;
  v24 = *(_DWORD *)(a1 + 200);
  v25 = v24 + 4;
  *(_DWORD *)(a1 + 200) = v24 + 4;
  if ((v24 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v16, v17, v18, v19, v20, v21, v22);
    v25 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = -129367998;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::load64(a1, (v13 << 35) | 2, 2, v18, v19, v20, v21, v22);
  JSC::MacroAssemblerARM64::branch64(a1, 0, 0, 2, v26, v27, v28, v29, (uint64_t)&v66);
  result = a1 + 624;
  v31 = v67;
  v32 = v14 + (*(_DWORD *)(a1 + 640) >> 2);
  v68 = v66;
  v69 = v67;
  v70 = v32;
  v33 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v33 == *(_DWORD *)(a1 + 632))
  {
    result = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v33 + 1, (unint64_t)&v68);
    v47 = *(_QWORD *)(a1 + 624) + 16 * *(unsigned int *)(a1 + 636);
    *(_DWORD *)v47 = *(_DWORD *)result;
    *(_QWORD *)(v47 + 4) = *(_QWORD *)(result + 4);
    *(_DWORD *)(v47 + 12) = *(_DWORD *)(result + 12);
  }
  else
  {
    v34 = *(_QWORD *)result + 16 * v33;
    *(_DWORD *)v34 = v66;
    *(_QWORD *)(v34 + 4) = v31;
    *(_DWORD *)(v34 + 12) = v32;
  }
  ++*(_DWORD *)(a1 + 636);
  return result;
}

unsigned int *JSC::JIT::emit_op_jneq_ptr(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int i;
  unsigned int v51;
  _QWORD *v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  int v75;
  _DWORD *v76;
  int v77;
  _DWORD *v78;
  unint64_t v79;
  BOOL v80;
  char **v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  unsigned int v90[3];
  int v91;
  unint64_t v92;
  int v93;

  v9 = *a2;
  if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v13 = *(unsigned int *)(a2 + 6);
    v14 = *(_DWORD *)(a2 + 10);
    v15 = *(_DWORD *)(a2 + 14);
  }
  else if (v9 == 128)
  {
    v88 = *((__int16 *)a2 + 1);
    if (v88 <= 63)
      v11 = v88;
    else
      v11 = (v88 + 1073741760);
    v89 = *((__int16 *)a2 + 2);
    if (v89 <= 63)
      v13 = v89;
    else
      v13 = (v89 + 1073741760);
    v14 = *((__int16 *)a2 + 3);
    v15 = *((unsigned __int16 *)a2 + 4);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
    if (v12 <= 15)
      v13 = v12;
    else
      v13 = (v12 + 1073741808);
    v14 = (char)a2[3];
    v15 = a2[4];
  }
  if (!v14)
  {
    v58 = *(_QWORD *)(a1 + 808);
    v59 = *(_QWORD *)(v58 + 80);
    v60 = *(_QWORD *)v59;
    v61 = *(unsigned int *)(v59 + 12) + *(_QWORD *)v59;
    if (v60 > (unint64_t)a2 || v61 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x19874A868);
    }
    v63 = *(_QWORD *)(v58 + 144);
    if (v63)
    {
      v64 = (_DWORD)a2 - v60;
      v65 = *(_DWORD *)(v63 - 8);
      v66 = 9 * ((~(v64 << 15) + v64) ^ ((~(v64 << 15) + v64) >> 10));
      v67 = (v66 ^ (v66 >> 6)) + ~((v66 ^ (v66 >> 6)) << 11);
      v68 = v65 & (v67 ^ HIWORD(v67));
      v69 = *(_DWORD *)(v63 + 8 * v68);
      if (v69 == v64)
      {
LABEL_39:
        v14 = *(_DWORD *)(v63 + 8 * v68 + 4);
        goto LABEL_11;
      }
      v77 = 1;
      while (v69)
      {
        v68 = ((_DWORD)v68 + v77) & v65;
        v69 = *(_DWORD *)(v63 + 8 * v68);
        ++v77;
        if (v69 == v64)
          goto LABEL_39;
      }
    }
    v14 = 0;
  }
LABEL_11:
  if ((int)v11 < 0x40000000)
  {
    v16 = (v11 << 35) | 0x1D;
LABEL_13:
    JSC::MacroAssemblerARM64::load64(a1, v16, 0, a4, a5, a6, a7, a8);
    goto LABEL_14;
  }
  v72 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v73 = (v11 - 0x40000000);
  v74 = *(_DWORD **)(v72 + 120);
  if (!v74 || *v74 <= v73)
    goto LABEL_53;
  v75 = *((unsigned __int8 *)v74 + v73 + 4);
  if ((v75 - 1) >= 2)
  {
    if (v75)
    {
      if (v75 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19874A78CLL);
      }
      goto LABEL_64;
    }
LABEL_53:
    v78 = *(_DWORD **)(v72 + 112);
    if (*v78 <= v73)
    {
      __break(0xC471u);
      JUMPOUT(0x19874A8A8);
    }
    v79 = *(_QWORD *)&v78[2 * v73 + 2];
    if (v79)
      v80 = (v79 & 0xFFFE000000000002) == 0;
    else
      v80 = 0;
    if (!v80)
      goto LABEL_44;
    v81 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v79 & 0xFFFFFFFE) + 0x4C));
    if (v81 != &JSC::SymbolTable::s_info && v81 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_44;
LABEL_64:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v83, v84, v85, v86, v87);
    v16 = v11 << 35;
    goto LABEL_13;
  }
LABEL_44:
  v76 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v76 <= v73)
  {
    __break(0xC471u);
    JUMPOUT(0x19874A888);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v76[2 * v73 + 2], 0, a4, a5, a6, a7, a8);
LABEL_14:
  if ((int)v13 <= 0x3FFFFFFF)
  {
    __break(0xC471u);
    JUMPOUT(0x19874A7ACLL);
  }
  v24 = *(_DWORD *)(a1 + 200);
  if (v24 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v17, v18, v19, v20, v21, v22, v23);
    v24 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v24) = -129956958;
  v25 = *(_DWORD *)(a1 + 200);
  v26 = v25 + 4;
  *(_DWORD *)(a1 + 200) = v25 + 4;
  if ((v25 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v17, v18, v19, v20, v21, v22, v23);
    v26 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v26) = -129367998;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::load64(a1, (v13 << 35) | 2, 2, v19, v20, v21, v22, v23);
  JSC::MacroAssemblerARM64::branch64(a1, 0, 0, 2, v27, v28, v29, v30, (uint64_t)v90);
  v38 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v38)
    v39 = *(unsigned __int16 *)(v38 + 92);
  else
    v39 = *(_DWORD *)(v38 + 280);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19874A7ECLL);
  }
  v40 = ((unint64_t)(v39 + v15) << 32) | 0x19;
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v41 = *(char *)(a1 + 272) | 0x320003E0;
  v42 = *(_DWORD *)(a1 + 200);
  if (v42 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v31, v32, v33, v34, v35, v36, v37);
    v42 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v42) = v41;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store8(a1, 16, v40, v33, v34, v35, v36, v37);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v43, v44, v45, v46, v47, v48, v49);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v51 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v43, v44, v45, v46, v47, v48, v49);
    v51 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v51) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  v52 = (_QWORD *)(a1 + 624);
  v53 = 0xFF000F4500000000;
  if (!*(_BYTE *)(a1 + 328))
    v53 = 0xFF000F4100000000;
  v54 = v14 + (*(_DWORD *)(a1 + 640) >> 2);
  v91 = i;
  v92 = v53;
  v93 = v54;
  v55 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v55 == *(_DWORD *)(a1 + 632))
  {
    v70 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v52, v55 + 1, (unint64_t)&v91);
    v71 = *(_QWORD *)(a1 + 624) + 16 * *(unsigned int *)(a1 + 636);
    *(_DWORD *)v71 = *(_DWORD *)v70;
    *(_QWORD *)(v71 + 4) = *(_QWORD *)(v70 + 4);
    *(_DWORD *)(v71 + 12) = *(_DWORD *)(v70 + 12);
  }
  else
  {
    v56 = *v52 + 16 * v55;
    *(_DWORD *)v56 = i;
    *(_QWORD *)(v56 + 4) = v53;
    *(_DWORD *)(v56 + 12) = v54;
  }
  ++*(_DWORD *)(a1 + 636);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v90, a1, v44, v45, v46, v47, v48, v49);
}

void JSC::JIT::emit_op_eq(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  int v55;
  _DWORD *v56;
  _DWORD *v57;
  unint64_t v58;
  BOOL v59;
  char **v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  int v71;
  _DWORD *v72;
  _DWORD *v73;
  unint64_t v74;
  BOOL v75;
  char **v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v10 > 63)
      v10 += 1073741760;
    v12 = *((__int16 *)a2 + 2);
    v67 = *((__int16 *)a2 + 3);
    if (v67 <= 63)
      v14 = v67;
    else
      v14 = (v67 + 1073741760);
    if ((int)v12 <= 63)
      goto LABEL_9;
LABEL_53:
    v12 = (v12 + v11);
    goto LABEL_54;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    if (v10 > 15)
      v10 += 1073741808;
    v12 = (char)a2[2];
    v13 = (char)a2[3];
    if (v13 <= 15)
      v14 = v13;
    else
      v14 = (v13 + 1073741808);
    if ((int)v12 <= 15)
    {
LABEL_9:
      v15 = v10;
LABEL_10:
      v16 = (v12 << 35) | 0x1D;
LABEL_11:
      JSC::MacroAssemblerARM64::load64(a1, v16, 0, a4, a5, a6, a7, a8);
      goto LABEL_12;
    }
    goto LABEL_53;
  }
  v10 = *(_DWORD *)(a2 + 2);
  v12 = *(unsigned int *)(a2 + 6);
  v14 = *(unsigned int *)(a2 + 10);
LABEL_54:
  v15 = v10;
  if ((int)v12 < 0x40000000)
    goto LABEL_10;
  v68 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v69 = (v12 - 0x40000000);
  v70 = *(_DWORD **)(v68 + 120);
  if (!v70 || *v70 <= v69)
    goto LABEL_61;
  v71 = *((unsigned __int8 *)v70 + v69 + 4);
  if ((v71 - 1) >= 2)
  {
    if (v71)
    {
      if (v71 == 3)
        goto LABEL_72;
      goto LABEL_81;
    }
LABEL_61:
    v73 = *(_DWORD **)(v68 + 112);
    if (*v73 > v69)
    {
      v74 = *(_QWORD *)&v73[2 * v69 + 2];
      if (v74)
        v75 = (v74 & 0xFFFE000000000002) == 0;
      else
        v75 = 0;
      if (!v75)
        goto LABEL_58;
      v76 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v74 & 0xFFFFFFFE) + 0x4C));
      if (v76 != &JSC::SymbolTable::s_info && v76 != &JSC::JSTemplateObjectDescriptor::s_info)
        goto LABEL_58;
LABEL_72:
      JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v78, v79, v80, v81, v82);
      v16 = v12 << 35;
      goto LABEL_11;
    }
LABEL_81:
    __break(0xC471u);
    JUMPOUT(0x19874AD50);
  }
LABEL_58:
  v72 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v72 <= v69)
  {
    __break(0xC471u);
    JUMPOUT(0x19874AE08);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v72[2 * v69 + 2], 0, a4, a5, a6, a7, a8);
LABEL_12:
  if ((int)v14 < 0x40000000)
  {
    v22 = (v14 << 35) | 0x1D;
LABEL_14:
    JSC::MacroAssemblerARM64::load64(a1, v22, 1, v17, v18, v19, v20, v21);
    goto LABEL_15;
  }
  v52 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v53 = (v14 - 0x40000000);
  v54 = *(_DWORD **)(v52 + 120);
  if (!v54 || *v54 <= v53)
    goto LABEL_35;
  v55 = *((unsigned __int8 *)v54 + v53 + 4);
  if ((v55 - 1) >= 2)
  {
    if (v55)
    {
      if (v55 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19874AD78);
      }
      goto LABEL_46;
    }
LABEL_35:
    v57 = *(_DWORD **)(v52 + 112);
    if (*v57 <= v53)
    {
      __break(0xC471u);
      JUMPOUT(0x19874AE38);
    }
    v58 = *(_QWORD *)&v57[2 * v53 + 2];
    if (v58)
      v59 = (v58 & 0xFFFE000000000002) == 0;
    else
      v59 = 0;
    if (!v59)
      goto LABEL_32;
    v60 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v58 & 0xFFFFFFFE) + 0x4C));
    if (v60 != &JSC::SymbolTable::s_info && v60 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_32;
LABEL_46:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v17, v18, v19, v20, v21);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v62, v63, v64, v65, v66);
    v22 = (v14 << 35) | 1;
    goto LABEL_14;
  }
LABEL_32:
  v56 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v56 <= v53)
  {
    __break(0xC471u);
    JUMPOUT(0x19874ADE8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v56[2 * v53 + 2], 1, v17, v18, v19, v20, v21);
LABEL_15:
  v30 = *(_DWORD *)(a1 + 200);
  if (v30 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v23, v24, v25, v26, v27, v28, v29);
    v30 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v30) = -1442839582;
  v31 = *(_DWORD *)(a1 + 200);
  v32 = v31 + 4;
  *(_DWORD *)(a1 + 200) = v31 + 4;
  if ((v31 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v23, v24, v25, v26, v27, v28, v29);
    v32 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v32) = -1979645886;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch64(a1, 3, 2, 27, v26, v27, v28, v29, (uint64_t)&v83);
  v40 = (_QWORD *)(a1 + 648);
  v41 = v84;
  v42 = *(_DWORD *)(a1 + 640);
  v85 = v83;
  v86 = v84;
  v87 = v42;
  v43 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v43 == *(_DWORD *)(a1 + 656))
  {
    v50 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v43 + 1, (unint64_t)&v85);
    v51 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v51 = *(_DWORD *)v50;
    *(_QWORD *)(v51 + 4) = *(_QWORD *)(v50 + 4);
    *(_DWORD *)(v51 + 12) = *(_DWORD *)(v50 + 12);
  }
  else
  {
    v44 = *v40 + 16 * v43;
    *(_DWORD *)v44 = v83;
    *(_QWORD *)(v44 + 4) = v41;
    *(_DWORD *)(v44 + 12) = v42;
  }
  ++*(_DWORD *)(a1 + 660);
  v45 = *(_DWORD *)(a1 + 200);
  if (v45 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v33, v34, v35, v36, v37, v38, v39);
    v45 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v45) = 1795162175;
  v46 = *(_DWORD *)(a1 + 200);
  v47 = v46 + 4;
  *(_DWORD *)(a1 + 200) = v46 + 4;
  if ((v46 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v33, v34, v35, v36, v37, v38, v39);
    v47 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v47) = 446633952;
  v48 = *(_DWORD *)(a1 + 200);
  v49 = v48 + 4;
  *(_DWORD *)(a1 + 200) = v48 + 4;
  if ((v48 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v33, v34, v35, v36, v37, v38, v39);
    v49 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v49) = 285218816;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 0, (v15 << 35) | 0x1D, v35, v36, v37, v38, v39);
}

uint64_t JSC::JIT::emit_op_jeq(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t result;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  int v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  int v78;
  _DWORD *v79;
  int v80;
  _DWORD *v81;
  unint64_t v82;
  BOOL v83;
  char **v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  unint64_t v92;
  BOOL v93;
  char **v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  unint64_t v104;
  int v105;
  unint64_t v106;
  int v107;

  v9 = *a2;
  if (v9 == 128)
  {
    v101 = *((__int16 *)a2 + 1);
    if (v101 <= 63)
      v11 = v101;
    else
      v11 = (v101 + 1073741760);
    v102 = *((__int16 *)a2 + 2);
    if (v102 <= 63)
      v13 = v102;
    else
      v13 = (v102 + 1073741760);
    v14 = *((__int16 *)a2 + 3);
  }
  else if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v13 = *(unsigned int *)(a2 + 6);
    v14 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
    if (v12 <= 15)
      v13 = v12;
    else
      v13 = (v12 + 1073741808);
    v14 = (char)a2[3];
  }
  if (!v14)
  {
    v55 = *(_QWORD *)(a1 + 808);
    v56 = *(_QWORD *)(v55 + 80);
    v57 = *(_QWORD *)v56;
    v58 = *(unsigned int *)(v56 + 12) + *(_QWORD *)v56;
    if (v57 > (unint64_t)a2 || v58 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x19874B49CLL);
    }
    v60 = *(_QWORD *)(v55 + 144);
    if (v60)
    {
      v61 = (_DWORD)a2 - v57;
      v62 = *(_DWORD *)(v60 - 8);
      v63 = 9 * ((~(v61 << 15) + v61) ^ ((~(v61 << 15) + v61) >> 10));
      v64 = (v63 ^ (v63 >> 6)) + ~((v63 ^ (v63 >> 6)) << 11);
      v65 = v62 & (v64 ^ HIWORD(v64));
      v66 = *(_DWORD *)(v60 + 8 * v65);
      if (v66 == v61)
      {
LABEL_42:
        v14 = *(_DWORD *)(v60 + 8 * v65 + 4);
        goto LABEL_11;
      }
      v80 = 1;
      while (v66)
      {
        v65 = ((_DWORD)v65 + v80) & v62;
        v66 = *(_DWORD *)(v60 + 8 * v65);
        ++v80;
        if (v66 == v61)
          goto LABEL_42;
      }
    }
    v14 = 0;
  }
LABEL_11:
  if ((int)v11 < 0x40000000)
  {
    v15 = (v11 << 35) | 0x1D;
LABEL_13:
    JSC::MacroAssemblerARM64::load64(a1, v15, 0, a4, a5, a6, a7, a8);
    goto LABEL_14;
  }
  v70 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v71 = (v11 - 0x40000000);
  v72 = *(_DWORD **)(v70 + 120);
  if (!v72 || *v72 <= v71)
    goto LABEL_60;
  v73 = *((unsigned __int8 *)v72 + v71 + 4);
  if ((v73 - 1) >= 2)
  {
    if (v73)
    {
      if (v73 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19874B404);
      }
      goto LABEL_71;
    }
LABEL_60:
    v81 = *(_DWORD **)(v70 + 112);
    if (*v81 <= v71)
    {
      __break(0xC471u);
      JUMPOUT(0x19874B50CLL);
    }
    v82 = *(_QWORD *)&v81[2 * v71 + 2];
    if (v82)
      v83 = (v82 & 0xFFFE000000000002) == 0;
    else
      v83 = 0;
    if (!v83)
      goto LABEL_48;
    v84 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v82 & 0xFFFFFFFE) + 0x4C));
    if (v84 != &JSC::SymbolTable::s_info && v84 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_48;
LABEL_71:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v86, v87, v88, v89, v90);
    v15 = v11 << 35;
    goto LABEL_13;
  }
LABEL_48:
  v74 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v74 <= v71)
  {
    __break(0xC471u);
    JUMPOUT(0x19874B4BCLL);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v74[2 * v71 + 2], 0, a4, a5, a6, a7, a8);
LABEL_14:
  if ((int)v13 < 0x40000000)
  {
    v21 = (v13 << 35) | 0x1D;
LABEL_16:
    JSC::MacroAssemblerARM64::load64(a1, v21, 1, v16, v17, v18, v19, v20);
    goto LABEL_17;
  }
  v75 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v76 = (v13 - 0x40000000);
  v77 = *(_DWORD **)(v75 + 120);
  if (!v77 || *v77 <= v76)
    goto LABEL_73;
  v78 = *((unsigned __int8 *)v77 + v76 + 4);
  if ((v78 - 1) >= 2)
  {
    if (v78)
    {
      if (v78 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19874B42CLL);
      }
      goto LABEL_84;
    }
LABEL_73:
    v91 = *(_DWORD **)(v75 + 112);
    if (*v91 <= v76)
    {
      __break(0xC471u);
      JUMPOUT(0x19874B52CLL);
    }
    v92 = *(_QWORD *)&v91[2 * v76 + 2];
    if (v92)
      v93 = (v92 & 0xFFFE000000000002) == 0;
    else
      v93 = 0;
    if (!v93)
      goto LABEL_53;
    v94 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v92 & 0xFFFFFFFE) + 0x4C));
    if (v94 != &JSC::SymbolTable::s_info && v94 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_53;
LABEL_84:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v16, v17, v18, v19, v20);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v96, v97, v98, v99, v100);
    v21 = (v13 << 35) | 1;
    goto LABEL_16;
  }
LABEL_53:
  v79 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v79 <= v76)
  {
    __break(0xC471u);
    JUMPOUT(0x19874B4DCLL);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v79[2 * v76 + 2], 1, v16, v17, v18, v19, v20);
LABEL_17:
  v29 = *(_DWORD *)(a1 + 200);
  if (v29 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v22, v23, v24, v25, v26, v27, v28);
    v29 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = -1442839582;
  v30 = *(_DWORD *)(a1 + 200);
  v31 = v30 + 4;
  *(_DWORD *)(a1 + 200) = v30 + 4;
  if ((v30 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v22, v23, v24, v25, v26, v27, v28);
    v31 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v31) = -1979645886;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch64(a1, 3, 2, 27, v25, v26, v27, v28, (uint64_t)&v103);
  v39 = (_QWORD *)(a1 + 648);
  v40 = v104;
  v41 = *(_DWORD *)(a1 + 640);
  v105 = v103;
  v106 = v104;
  v107 = v41;
  v42 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v42 == *(_DWORD *)(a1 + 656))
  {
    v68 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v39, v42 + 1, (unint64_t)&v105);
    v69 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v69 = *(_DWORD *)v68;
    *(_QWORD *)(v69 + 4) = *(_QWORD *)(v68 + 4);
    *(_DWORD *)(v69 + 12) = *(_DWORD *)(v68 + 12);
  }
  else
  {
    v43 = *v39 + 16 * v42;
    *(_DWORD *)v43 = v103;
    *(_QWORD *)(v43 + 4) = v40;
    *(_DWORD *)(v43 + 12) = v41;
  }
  ++*(_DWORD *)(a1 + 660);
  v44 = *(_DWORD *)(a1 + 200);
  if (v44 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v32, v33, v34, v35, v36, v37, v38);
    v44 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v44) = 1795227679;
  v45 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v45;
  if (*(_BYTE *)(a1 + 328))
  {
    while ((signed int)v45 < *(_DWORD *)(a1 + 52))
    {
      if (v45 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v32, v33, v34, v35, v36, v37, v38);
        v45 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v45) = -721215457;
      v45 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v45;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  if (v45 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v32, v33, v34, v35, v36, v37, v38);
    v45 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v45) = 1409286144;
  v46 = *(_DWORD *)(a1 + 200);
  v47 = v46 + 4;
  *(_DWORD *)(a1 + 200) = v46 + 4;
  v48 = v46 + 8;
  v49 = v46 + 4;
  if (v48 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v32, v33, v34, v35, v36, v37, v38);
    v49 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v49) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  result = a1 + 624;
  v51 = 0xFF00008600000000;
  if (!*(_BYTE *)(a1 + 328))
    v51 = 0xFF00008200000000;
  v52 = v14 + (*(_DWORD *)(a1 + 640) >> 2);
  v105 = v47;
  v106 = v51;
  v107 = v52;
  v53 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v53 == *(_DWORD *)(a1 + 632))
  {
    result = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v53 + 1, (unint64_t)&v105);
    v67 = *(_QWORD *)(a1 + 624) + 16 * *(unsigned int *)(a1 + 636);
    *(_DWORD *)v67 = *(_DWORD *)result;
    *(_QWORD *)(v67 + 4) = *(_QWORD *)(result + 4);
    *(_DWORD *)(v67 + 12) = *(_DWORD *)(result + 12);
  }
  else
  {
    v54 = *(_QWORD *)result + 16 * v53;
    *(_DWORD *)v54 = v47;
    *(_QWORD *)(v54 + 4) = v51;
    *(_DWORD *)(v54 + 12) = v52;
  }
  ++*(_DWORD *)(a1 + 636);
  return result;
}

void JSC::JIT::emit_op_jtrue(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  _DWORD *v40;
  int i;
  unsigned int v42;
  char v43;
  int *v44;
  int *v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int8x8_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  _DWORD *v68;
  int j;
  unsigned int v70;
  char v71;
  int *v72;
  int *v73;
  int v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  _DWORD *v87;
  uint64_t *v88;
  int v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  _DWORD *v120;
  uint64_t v121;
  unint64_t v122;
  WTF *v123;
  unsigned int *v124;
  __int16 v125;
  unsigned __int8 *v126;
  uint64_t v127;
  int v128;
  _BYTE *v129;
  char v130;
  __int16 v131;
  char v132;
  __int16 v133;
  uint64_t v134;
  int v135;
  char *v136;
  char v137;
  __int16 v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  char v145;
  uint64_t v146;
  int v147;
  WTF *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v154;
  int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  _DWORD *v171;
  int v172;
  _DWORD *v173;
  int v174;
  int v175;
  _DWORD *v176;
  unint64_t v177;
  BOOL v178;
  char **v179;
  unsigned int v181;
  int v182;
  unsigned int v183;
  unint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  JSC::AssemblerBuffer *v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  JSC::ExecutableMemoryHandle *v196;
  int v197;
  uint64_t v198;
  int v199;
  int v200;
  char v201;
  __int16 v202;
  char v203;
  int v204;
  uint64_t v205;
  unsigned int v206[3];
  int v207;
  int v208;
  char v209;
  __int16 v210;
  char v211;
  int v212;
  uint64_t v213;
  unsigned int v214[3];
  WTF *v215;
  uint64_t v216;
  _BYTE v217[24];
  __int128 v218;
  uint64_t v219;

  v9 = *a2;
  if (v9 == 128)
  {
    v174 = *((__int16 *)a2 + 1);
    if (v174 <= 63)
      v11 = v174;
    else
      v11 = (v174 + 1073741760);
    v12 = *((__int16 *)a2 + 2);
  }
  else if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v12 = *(_DWORD *)(a2 + 6);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
  }
  if (!v12)
  {
    v149 = *(_QWORD *)(a1 + 808);
    v150 = *(_QWORD *)(v149 + 80);
    v151 = *(_QWORD *)v150;
    v152 = *(unsigned int *)(v150 + 12) + *(_QWORD *)v150;
    if (v151 > (unint64_t)a2 || v152 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x19874C1B4);
    }
    v154 = *(_QWORD *)(v149 + 144);
    if (v154)
    {
      v155 = (_DWORD)a2 - v151;
      v156 = *(_DWORD *)(v154 - 8);
      v157 = 9 * ((~(v155 << 15) + v155) ^ ((~(v155 << 15) + v155) >> 10));
      v158 = (v157 ^ (v157 >> 6)) + ~((v157 ^ (v157 >> 6)) << 11);
      v159 = v156 & (v158 ^ HIWORD(v158));
      v160 = *(_DWORD *)(v154 + 8 * v159);
      if (v160 == v155)
      {
LABEL_79:
        v12 = *(_DWORD *)(v154 + 8 * v159 + 4);
        goto LABEL_8;
      }
      v175 = 1;
      while (v160)
      {
        v159 = ((_DWORD)v159 + v175) & v156;
        v160 = *(_DWORD *)(v154 + 8 * v159);
        ++v175;
        if (v160 == v155)
          goto LABEL_79;
      }
    }
    v12 = 0;
  }
LABEL_8:
  if ((int)v11 < 0x40000000)
  {
    v13 = 29;
LABEL_10:
    JSC::MacroAssemblerARM64::load64(a1, v13 | (v11 << 35), 2, a4, a5, a6, a7, a8);
    goto LABEL_11;
  }
  v169 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v170 = (v11 - 0x40000000);
  v171 = *(_DWORD **)(v169 + 120);
  if (!v171 || *v171 <= v170)
    goto LABEL_98;
  v172 = *((unsigned __int8 *)v171 + v170 + 4);
  if ((v172 - 1) >= 2)
  {
    if (v172)
    {
      if (v172 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19874C0D8);
      }
      goto LABEL_109;
    }
LABEL_98:
    v176 = *(_DWORD **)(v169 + 112);
    if (*v176 <= v170)
    {
      __break(0xC471u);
      JUMPOUT(0x19874C1F4);
    }
    v177 = *(_QWORD *)&v176[2 * v170 + 2];
    if (v177)
      v178 = (v177 & 0xFFFE000000000002) == 0;
    else
      v178 = 0;
    if (!v178)
      goto LABEL_87;
    v179 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v177 & 0xFFFFFFFE) + 0x4C));
    if (v179 != &JSC::SymbolTable::s_info && v179 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_87;
LABEL_109:
    v181 = *(_DWORD *)(a1 + 200);
    if (v181 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v181 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v181) = -129956958;
    v182 = *(_DWORD *)(a1 + 200);
    v183 = v182 + 4;
    *(_DWORD *)(a1 + 200) = v182 + 4;
    if ((v182 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v183 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v183) = -129367998;
    *(_DWORD *)(a1 + 200) += 4;
    v13 = 2;
    goto LABEL_10;
  }
LABEL_87:
  v173 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v173 <= v170)
  {
    __break(0xC471u);
    JUMPOUT(0x19874C1D4);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v173[2 * v170 + 2], 2, a4, a5, a6, a7, a8);
LABEL_11:
  v215 = (WTF *)v217;
  v216 = 2;
  JSC::MacroAssemblerARM64::xor64(a1, 6, 2, 5, v14, v15, v16, v17);
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, 5, 4294967294, v18, v19, v20, v21, (uint64_t)v214, v22);
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, 2, 1, v23, v24, v25, v26, (uint64_t)&v212, v27);
  v35 = (_QWORD *)(a1 + 624);
  v36 = v12 + (*(_DWORD *)(a1 + 640) >> 2);
  *(_QWORD *)((char *)&v218 + 4) = v213;
  LODWORD(v218) = v212;
  HIDWORD(v218) = v36;
  v37 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v37 == *(_DWORD *)(a1 + 632))
  {
    v161 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 624, v37 + 1, (unint64_t)&v218);
    v162 = *(_QWORD *)(a1 + 624) + 16 * *(unsigned int *)(a1 + 636);
    *(_DWORD *)v162 = *(_DWORD *)v161;
    *(_QWORD *)(v162 + 4) = *(_QWORD *)(v161 + 4);
    v40 = (_DWORD *)(v162 + 12);
    v38 = (_DWORD *)(v161 + 12);
  }
  else
  {
    v38 = (_DWORD *)&v218 + 3;
    v39 = *v35 + 16 * v37;
    *(_DWORD *)v39 = v212;
    *(_QWORD *)(v39 + 4) = *(_QWORD *)((char *)&v218 + 4);
    v40 = (_DWORD *)(v39 + 12);
  }
  *v40 = *v38;
  ++*(_DWORD *)(a1 + 636);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v28, v29, v30, v31, v32, v33, v34);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v42 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v28, v29, v30, v31, v32, v33, v34);
    v42 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v42) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v43 = 69;
  else
    v43 = 65;
  v207 = i;
  v208 = 0;
  v209 = v43;
  v210 = 15;
  v211 = -1;
  if (i != -1)
  {
    if (HIDWORD(v216) == (_DWORD)v216)
    {
      v44 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v215, (void *)(HIDWORD(v216) + 1), (unint64_t)&v207, v30, v31, v32, v33, v34);
      v46 = *v44;
      v45 = v44 + 1;
      v47 = (char *)v215 + 12 * HIDWORD(v216);
      *(_DWORD *)v47 = v46;
    }
    else
    {
      v45 = &v208;
      v47 = (char *)v215 + 12 * HIDWORD(v216);
      *(_DWORD *)v47 = i;
    }
    *(_QWORD *)(v47 + 4) = *(_QWORD *)v45;
    ++HIDWORD(v216);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v214, a1, v29, v30, v31, v32, v33, v34);
  JSC::MacroAssemblerARM64::branch64(a1, 3, 2, 27, v48, v49, v50, v51, (uint64_t)v206);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 1, 2, v52, v53, v54, v55, (uint64_t)&v204, v56);
  v64 = v12 + (*(_DWORD *)(a1 + 640) >> 2);
  *(_QWORD *)((char *)&v218 + 4) = v205;
  LODWORD(v218) = v204;
  HIDWORD(v218) = v64;
  v65 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v65 == *(_DWORD *)(a1 + 632))
  {
    v163 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 624, v65 + 1, (unint64_t)&v218);
    v164 = *(_QWORD *)(a1 + 624) + 16 * *(unsigned int *)(a1 + 636);
    *(_DWORD *)v164 = *(_DWORD *)v163;
    *(_QWORD *)(v164 + 4) = *(_QWORD *)(v163 + 4);
    v68 = (_DWORD *)(v164 + 12);
    v66 = (_DWORD *)(v163 + 12);
  }
  else
  {
    v66 = (_DWORD *)&v218 + 3;
    v67 = *v35 + 16 * v65;
    *(_DWORD *)v67 = v204;
    *(_QWORD *)(v67 + 4) = *(_QWORD *)((char *)&v218 + 4);
    v68 = (_DWORD *)(v67 + 12);
  }
  *v68 = *v66;
  ++*(_DWORD *)(a1 + 636);
  for (j = *(_DWORD *)(a1 + 200); j < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v57, v58, v59, v60, v61, v62, v63);
      j = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = -721215457;
    j = *(_DWORD *)(a1 + 200) + 4;
  }
  v70 = j;
  if ((j + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v57, v58, v59, v60, v61, v62, v63);
    v70 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v70) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v71 = 69;
  else
    v71 = 65;
  v199 = j;
  v200 = 0;
  v201 = v71;
  v202 = 15;
  v203 = -1;
  if (j != -1)
  {
    if (HIDWORD(v216) == (_DWORD)v216)
    {
      v72 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v215, (void *)(HIDWORD(v216) + 1), (unint64_t)&v199, v59, v60, v61, v62, v63);
      v74 = *v72;
      v73 = v72 + 1;
      v75 = (char *)v215 + 12 * HIDWORD(v216);
      *(_DWORD *)v75 = v74;
    }
    else
    {
      v73 = &v200;
      v75 = (char *)v215 + 12 * HIDWORD(v216);
      *(_DWORD *)v75 = j;
    }
    *(_QWORD *)(v75 + 4) = *(_QWORD *)v73;
    ++HIDWORD(v216);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v206, a1, v58, v59, v60, v61, v62, v63);
  JSC::MacroAssemblerARM64::and64(a1, -9, 2, 5);
  JSC::MacroAssemblerARM64::branch64(a1, 0, 5, 2, v76, v77, v78, v79, (uint64_t)&v197);
  v85 = v197;
  if (v197 != -1)
  {
    v86 = HIDWORD(v216);
    if (HIDWORD(v216) == (_DWORD)v216)
    {
      v87 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v215, (void *)(HIDWORD(v216) + 1), (unint64_t)&v197, v80, v81, v82, v83, v84);
      v89 = *v87;
      v88 = (uint64_t *)(v87 + 1);
      v85 = v89;
      v86 = HIDWORD(v216);
    }
    else
    {
      v88 = &v198;
    }
    v90 = (char *)v215 + 12 * v86;
    *(_DWORD *)v90 = v85;
    *(_QWORD *)(v90 + 4) = *v88;
    ++HIDWORD(v216);
  }
  JSC::JITThunks::ctiStub(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440), *(_QWORD *)(a1 + 352), (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::valueIsTruthyGenerator, v80, v81, v82, v83, v84, &v195);
  v98 = v195;
  *(_DWORD *)(a1 + 208) = 0;
  v99 = *(_DWORD *)(a1 + 200);
  if (v99 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v91, v92, v93, v94, v95, v96, v97);
    v99 = *(_DWORD *)(a1 + 200);
  }
  v100 = (_QWORD *)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v99) = -1811939328;
  v101 = (*(_DWORD *)(a1 + 200) + 4);
  *(_DWORD *)(a1 + 200) = v101;
  LOBYTE(v219) = -1;
  BYTE3(v219) = 15;
  *(_WORD *)((char *)&v219 + 1) = 65;
  *(_QWORD *)&v218 = v101 - 4;
  *((_QWORD *)&v218 + 1) = v98;
  WORD2(v219) = 384;
  v102 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v102 == *(_DWORD *)(a1 + 40))
  {
    v167 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 32, v102 + 1, (unint64_t)&v218, v93, v94, v95, v96, v97);
    v103 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
    *(_QWORD *)v103 = 0;
    *(_QWORD *)(v103 + 8) = 0;
    *(_BYTE *)(v103 + 16) = -1;
    v168 = (((*(unsigned __int8 *)(v103 + 19) >> 4) & 0xF) << 20) | 0xF0041;
    *(_WORD *)(v103 + 17) = 65;
    *(_BYTE *)(v103 + 19) = BYTE2(v168);
    *(_WORD *)(v103 + 20) &= 0xFC00u;
    v104 = *(_OWORD *)v167;
    v105 = *(_QWORD *)(v167 + 16);
  }
  else
  {
    v103 = *v100 + 24 * v102;
    v104 = v218;
    v105 = v219;
  }
  *(_QWORD *)(v103 + 16) = v105;
  *(_OWORD *)v103 = v104;
  ++*(_DWORD *)(a1 + 44);
  v106 = (unsigned int *)v196;
  v196 = 0;
  if (v106)
  {
    do
    {
      v107 = __ldaxr(v106);
      v108 = v107 - 1;
    }
    while (__stlxr(v108, v106));
    if (!v108)
    {
      atomic_store(1u, v106);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v106, v91, v92, v93, v94, v95, v96, v97);
      WTF::fastFree(v184, v185, v186, v187, v188, v189, v190, v191);
    }
  }
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 1, 0, v94, v95, v96, v97, (uint64_t)&v193, *(int8x8_t *)&v104);
  v116 = v12 + (*(_DWORD *)(a1 + 640) >> 2);
  *(_QWORD *)((char *)&v218 + 4) = v194;
  LODWORD(v218) = v193;
  HIDWORD(v218) = v116;
  v117 = *(unsigned int *)(a1 + 636);
  v192 = (JSC::AssemblerBuffer *)(a1 + 56);
  if ((_DWORD)v117 == *(_DWORD *)(a1 + 632))
  {
    v165 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 624, v117 + 1, (unint64_t)&v218);
    v166 = *(_QWORD *)(a1 + 624) + 16 * *(unsigned int *)(a1 + 636);
    *(_DWORD *)v166 = *(_DWORD *)v165;
    *(_QWORD *)(v166 + 4) = *(_QWORD *)(v165 + 4);
    v120 = (_DWORD *)(v166 + 12);
    v118 = (_DWORD *)(v165 + 12);
  }
  else
  {
    v118 = (_DWORD *)&v218 + 3;
    v119 = *v35 + 16 * v117;
    *(_DWORD *)v119 = v193;
    *(_QWORD *)(v119 + 4) = *(_QWORD *)((char *)&v218 + 4);
    v120 = (_DWORD *)(v119 + 12);
  }
  *v120 = *v118;
  ++*(_DWORD *)(a1 + 636);
  v121 = HIDWORD(v216);
  if (HIDWORD(v216))
  {
    v122 = 0;
    do
    {
      if (v122 >= HIDWORD(v216))
      {
        __break(0xC471u);
        JUMPOUT(0x19874C2BCLL);
      }
      v123 = v215;
      v124 = (unsigned int *)((char *)v215 + 12 * v122);
      *(_DWORD *)(a1 + 208) = 0;
      v126 = (unsigned __int8 *)(v124 + 2);
      v125 = *((unsigned __int8 *)v124 + 8);
      switch(*((_BYTE *)v124 + 8))
      {
        case 0x83:
        case 0x87:
          v127 = *v124;
          v128 = *(_DWORD *)(a1 + 200);
          if (v128 < *(_DWORD *)(a1 + 52))
          {
            do
            {
              if ((v128 + 4) > *(_DWORD *)(a1 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v192, (uint64_t)v109, v110, v111, v112, v113, v114, v115);
                v128 = *(_DWORD *)(a1 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(a1 + 56) + v128) = -721215457;
              v128 = *(_DWORD *)(a1 + 200) + 4;
              *(_DWORD *)(a1 + 200) = v128;
            }
            while (v128 < *(_DWORD *)(a1 + 52));
            v125 = *v126;
          }
          v129 = (char *)v123 + 12 * v122;
          v130 = v129[9];
          v131 = v129[10];
          v132 = v129[11];
          *(_QWORD *)&v218 = v127;
          *((_QWORD *)&v218 + 1) = v128;
          BYTE3(v219) = v130 & 0xF;
          *(_WORD *)((char *)&v219 + 1) = v125;
          v133 = v131 << 6;
          goto LABEL_60;
        case 0x84:
        case 0x88:
          v134 = *v124;
          v135 = *(_DWORD *)(a1 + 200);
          if (v135 < *(_DWORD *)(a1 + 52))
          {
            do
            {
              if ((v135 + 4) > *(_DWORD *)(a1 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v192, (uint64_t)v109, v110, v111, v112, v113, v114, v115);
                v135 = *(_DWORD *)(a1 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(a1 + 56) + v135) = -721215457;
              v135 = *(_DWORD *)(a1 + 200) + 4;
              *(_DWORD *)(a1 + 200) = v135;
            }
            while (v135 < *(_DWORD *)(a1 + 52));
            v125 = *v126;
          }
          v136 = (char *)v123 + 12 * v122;
          v137 = v136[9];
          v138 = *((_WORD *)v136 + 2);
          v132 = v136[11];
          *(_QWORD *)&v218 = v134;
          *((_QWORD *)&v218 + 1) = v135;
          BYTE3(v219) = v137 & 0xF;
          *(_WORD *)((char *)&v219 + 1) = v125;
          v133 = v138 & 0x3F;
LABEL_60:
          WORD2(v219) = v133;
          LOBYTE(v219) = v132;
          break;
        default:
          v143 = *v124;
          v144 = *(_DWORD *)(a1 + 200);
          if (v144 < *(_DWORD *)(a1 + 52))
          {
            do
            {
              if ((v144 + 4) > *(_DWORD *)(a1 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v192, (uint64_t)v109, v110, v111, v112, v113, v114, v115);
                v144 = *(_DWORD *)(a1 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(a1 + 56) + v144) = -721215457;
              v144 = *(_DWORD *)(a1 + 200) + 4;
              *(_DWORD *)(a1 + 200) = v144;
            }
            while (v144 < *(_DWORD *)(a1 + 52));
            v125 = *v126;
          }
          v145 = *((_BYTE *)v123 + 12 * v122 + 9);
          LOBYTE(v219) = -1;
          *(_QWORD *)&v218 = v143;
          *((_QWORD *)&v218 + 1) = v144;
          BYTE3(v219) = v145 & 0xF;
          *(_WORD *)((char *)&v219 + 1) = v125;
          WORD2(v219) = 0;
          break;
      }
      v139 = *(unsigned int *)(a1 + 44);
      if ((_DWORD)v139 == *(_DWORD *)(a1 + 40))
      {
        v146 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 32, v139 + 1, (unint64_t)&v218, v111, v112, v113, v114, v115);
        v140 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
        *(_QWORD *)v140 = 0;
        *(_QWORD *)(v140 + 8) = 0;
        *(_BYTE *)(v140 + 16) = -1;
        v147 = (((*(unsigned __int8 *)(v140 + 19) >> 4) & 0xF) << 20) | 0xF0041;
        *(_WORD *)(v140 + 17) = 65;
        *(_BYTE *)(v140 + 19) = BYTE2(v147);
        *(_WORD *)(v140 + 20) &= 0xFC00u;
        v141 = *(_OWORD *)v146;
        v142 = *(_QWORD *)(v146 + 16);
      }
      else
      {
        v140 = *v100 + 24 * v139;
        v141 = v218;
        v142 = v219;
      }
      *(_QWORD *)(v140 + 16) = v142;
      *(_OWORD *)v140 = v141;
      ++*(_DWORD *)(a1 + 44);
      ++v122;
    }
    while (v122 != v121);
  }
  v148 = v215;
  if (v217 != (_BYTE *)v215)
  {
    if (v215)
    {
      v215 = 0;
      LODWORD(v216) = 0;
      WTF::fastFree((unint64_t)v148, v109, v110, v111, v112, v113, v114, v115);
    }
  }
}

void JSC::JIT::valueIsTruthyGenerator(JSC::JIT *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  pthread_key_t *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  char v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  WTF *v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  char v63;
  char **v64;
  char *v65;
  _QWORD v66[3];
  WTF *v67;
  _BYTE v68[128];
  unsigned int v69;
  char v70;
  int v71;
  int v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  _BYTE v76[32];
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  WTF *v80;
  _BYTE v81[128];
  unsigned int v82;
  unsigned int v83;
  int v84;
  char v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _BYTE *v89;
  char v90;
  uint64_t v91;
  int v92;
  _BYTE *v93;
  char v94;
  uint64_t v95;
  int v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v76[0] = 0;
  v76[24] = 0;
  v77 = 0;
  v78 = 0;
  v79 = 0x8000000080000000;
  v80 = (WTF *)v81;
  v82 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v66[0] = &v65;
    v59 = (WTF *)v66;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v59, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(WTF **)v14;
  v16 = v82;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v82 < v17)
    {
      if (v80 && v80 != (WTF *)v81)
      {
        WTF::fastFree((unint64_t)v80, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(WTF **)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v80 = v15;
      v82 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v82;
    }
  }
  v18 = 0;
  v85 = 1;
  v83 = 0;
  v84 = 0;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v90 = 16;
  v92 = 0x10000;
  v89 = v76;
  v91 = 0;
  v93 = v76;
  v94 = 17;
  v95 = 0;
  v96 = 0x20000;
  v97 = 0;
  v99 = 0;
  v98 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v80, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v83;
  }
  *(_DWORD *)((char *)v80 + v18) = 838861792;
  v83 += 4;
  JSC::AssemblyHelpers::branchIfValue((uint64_t)v76, (uint64_t)this, 2u, 1, 5, 0, 1, 1, (uint64_t)&v59, 0, 2, 0, 0);
  v26 = v83;
  if (v83 + 4 > v82)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v80, v19, v20, v21, v22, v23, v24, v25);
    v26 = v83;
  }
  *(_DWORD *)((char *)v80 + v26) = 1384120320;
  v27 = v83 + 4;
  v83 += 4;
  if (!v61)
  {
LABEL_20:
    if (v27 + 4 > v82)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v80, v19, v20, v21, v22, v23, v24, v25);
      v27 = v83;
    }
    *(_DWORD *)((char *)v80 + v27) = -698416192;
    v83 += 4;
    v66[0] = 0;
    v66[1] = 0;
    v66[2] = -1;
    v67 = (WTF *)v68;
    v69 = 128;
    v31 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v31 != -1)
    {
      v65 = &v63;
      v64 = &v65;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v64, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v32 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v40 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v40)
    {
      v40 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v40, v32);
    }
    v41 = *(WTF **)v40;
    if (*(_QWORD *)v40 != v40 + 8)
    {
      v42 = *(_DWORD *)(v40 + 136);
      if (v69 < v42)
      {
        if (v67 && v67 != (WTF *)v68)
        {
          WTF::fastFree((unint64_t)v67, v33, v34, v35, v36, v37, v38, v39);
          v41 = *(WTF **)v40;
          v42 = *(_DWORD *)(v40 + 136);
        }
        v67 = v41;
        v69 = v42;
        *(_QWORD *)v40 = v40 + 8;
        *(_DWORD *)(v40 + 136) = 128;
      }
    }
    v43 = 1;
    v70 = 1;
    v71 = 0;
    v72 = 13;
    v73 = 0u;
    v74 = 0u;
    v75 = 0;
    JSC::LinkBuffer::linkCode((uint64_t)v66, (uint64_t)v76, 1, v35, v36, v37, v38, v39);
    BYTE2(v71) = 1;
    if (!byte_1ECF4C288)
    {
      if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
      {
        JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v66, "valueIsTruthy", 14, a2);
LABEL_35:
        JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v66, v44, v45, v46, v47, v48, v49, v50);
        v58 = v59;
        if (&v62 != (uint64_t *)v59)
        {
          if (v59)
          {
            v59 = 0;
            v60 = 0;
            WTF::fastFree((unint64_t)v58, v51, v52, v53, v54, v55, v56, v57);
          }
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v76, v51, v52, v53, v54, v55, v56, v57);
        return;
      }
      v43 = HIBYTE(word_1ECF4C286) != 0;
    }
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v66, v43, "valueIsTruthy", 14, "Baseline: valueIsTruthy", a2);
    goto LABEL_35;
  }
  v28 = 0;
  v29 = 0;
  v30 = 12 * v61;
  while (v29 < v61)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v59 + v28), (uint64_t)v76, v20, v21, v22, v23, v24, v25);
    ++v29;
    v28 += 12;
    if (v30 == v28)
    {
      v27 = v83;
      goto LABEL_20;
    }
  }
  __break(0xC471u);
}

void JSC::JIT::emit_op_neq(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v10 > 63)
      v10 += 1073741760;
    v12 = *((__int16 *)a2 + 2);
    v56 = *((__int16 *)a2 + 3);
    if (v56 <= 63)
      v14 = v56;
    else
      v14 = (v56 + 1073741760);
    if (v12 <= 63)
      goto LABEL_9;
LABEL_38:
    v57 = v12 + v11;
    goto LABEL_39;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    if (v10 > 15)
      v10 += 1073741808;
    v12 = (char)a2[2];
    v13 = (char)a2[3];
    if (v13 <= 15)
      v14 = v13;
    else
      v14 = (v13 + 1073741808);
    if (v12 <= 15)
    {
LABEL_9:
      v15 = v12;
      v16 = v10;
LABEL_10:
      v17 = (v15 << 35) | 0x1D;
LABEL_11:
      JSC::MacroAssemblerARM64::load64(a1, v17, 0, a4, a5, a6, a7, a8);
      goto LABEL_12;
    }
    goto LABEL_38;
  }
  v10 = *(_DWORD *)(a2 + 2);
  v57 = *(_DWORD *)(a2 + 6);
  v14 = *(unsigned int *)(a2 + 10);
LABEL_39:
  v15 = v57;
  v16 = v10;
  if (v57 < 0x40000000)
    goto LABEL_10;
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v57))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v58, v59, v60, v61, v62);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v69, v70, v71, v72, v73);
    v17 = v15 << 35;
    goto LABEL_11;
  }
  v63 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v63 <= (v15 - 0x40000000))
    goto LABEL_46;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v63[2 * (v15 - 0x40000000) + 2], 0, v58, v59, v60, v61, v62);
LABEL_12:
  if ((int)v14 < 0x40000000)
  {
    v23 = (v14 << 35) | 0x1D;
LABEL_14:
    JSC::MacroAssemblerARM64::load64(a1, v23, 1, v18, v19, v20, v21, v22);
    goto LABEL_15;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v14))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v50, v51, v52, v53, v54);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v64, v65, v66, v67, v68);
    v23 = (v14 << 35) | 1;
    goto LABEL_14;
  }
  v55 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v55 <= (v14 - 0x40000000))
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x19874CB30);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v55[2 * (v14 - 0x40000000) + 2], 1, v50, v51, v52, v53, v54);
LABEL_15:
  v31 = *(_DWORD *)(a1 + 200);
  if (v31 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v24, v25, v26, v27, v28, v29, v30);
    v31 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v31) = -1442839582;
  v32 = *(_DWORD *)(a1 + 200);
  v33 = v32 + 4;
  *(_DWORD *)(a1 + 200) = v32 + 4;
  if ((v32 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v24, v25, v26, v27, v28, v29, v30);
    v33 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v33) = -1979645886;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch64(a1, 3, 2, 27, v27, v28, v29, v30, (uint64_t)&v74);
  v41 = v75;
  v42 = *(_DWORD *)(a1 + 640);
  v76 = v74;
  v77 = v75;
  v78 = v42;
  v43 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v43 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v76);
  }
  else
  {
    v44 = *(_QWORD *)(a1 + 648) + 16 * v43;
    *(_DWORD *)v44 = v74;
    *(_QWORD *)(v44 + 4) = v41;
    *(_DWORD *)(v44 + 12) = v42;
    ++*(_DWORD *)(a1 + 660);
  }
  v45 = *(_DWORD *)(a1 + 200);
  if (v45 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v34, v35, v36, v37, v38, v39, v40);
    v45 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v45) = 1795162175;
  v46 = *(_DWORD *)(a1 + 200);
  v47 = v46 + 4;
  *(_DWORD *)(a1 + 200) = v46 + 4;
  if ((v46 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v34, v35, v36, v37, v38, v39, v40);
    v47 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v47) = 446629856;
  v48 = *(_DWORD *)(a1 + 200);
  v49 = v48 + 4;
  *(_DWORD *)(a1 + 200) = v48 + 4;
  if ((v48 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v34, v35, v36, v37, v38, v39, v40);
    v49 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v49) = 285218816;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 0, (v16 << 35) | 0x1D, v36, v37, v38, v39, v40);
}

uint64_t JSC::JIT::emit_op_jneq(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t result;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  int v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  int v78;
  _DWORD *v79;
  int v80;
  _DWORD *v81;
  unint64_t v82;
  BOOL v83;
  char **v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  unint64_t v92;
  BOOL v93;
  char **v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  unint64_t v104;
  int v105;
  unint64_t v106;
  int v107;

  v9 = *a2;
  if (v9 == 128)
  {
    v101 = *((__int16 *)a2 + 1);
    if (v101 <= 63)
      v11 = v101;
    else
      v11 = (v101 + 1073741760);
    v102 = *((__int16 *)a2 + 2);
    if (v102 <= 63)
      v13 = v102;
    else
      v13 = (v102 + 1073741760);
    v14 = *((__int16 *)a2 + 3);
  }
  else if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v13 = *(unsigned int *)(a2 + 6);
    v14 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
    if (v12 <= 15)
      v13 = v12;
    else
      v13 = (v12 + 1073741808);
    v14 = (char)a2[3];
  }
  if (!v14)
  {
    v55 = *(_QWORD *)(a1 + 808);
    v56 = *(_QWORD *)(v55 + 80);
    v57 = *(_QWORD *)v56;
    v58 = *(unsigned int *)(v56 + 12) + *(_QWORD *)v56;
    if (v57 > (unint64_t)a2 || v58 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x19874D198);
    }
    v60 = *(_QWORD *)(v55 + 144);
    if (v60)
    {
      v61 = (_DWORD)a2 - v57;
      v62 = *(_DWORD *)(v60 - 8);
      v63 = 9 * ((~(v61 << 15) + v61) ^ ((~(v61 << 15) + v61) >> 10));
      v64 = (v63 ^ (v63 >> 6)) + ~((v63 ^ (v63 >> 6)) << 11);
      v65 = v62 & (v64 ^ HIWORD(v64));
      v66 = *(_DWORD *)(v60 + 8 * v65);
      if (v66 == v61)
      {
LABEL_42:
        v14 = *(_DWORD *)(v60 + 8 * v65 + 4);
        goto LABEL_11;
      }
      v80 = 1;
      while (v66)
      {
        v65 = ((_DWORD)v65 + v80) & v62;
        v66 = *(_DWORD *)(v60 + 8 * v65);
        ++v80;
        if (v66 == v61)
          goto LABEL_42;
      }
    }
    v14 = 0;
  }
LABEL_11:
  if ((int)v11 < 0x40000000)
  {
    v15 = (v11 << 35) | 0x1D;
LABEL_13:
    JSC::MacroAssemblerARM64::load64(a1, v15, 0, a4, a5, a6, a7, a8);
    goto LABEL_14;
  }
  v70 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v71 = (v11 - 0x40000000);
  v72 = *(_DWORD **)(v70 + 120);
  if (!v72 || *v72 <= v71)
    goto LABEL_60;
  v73 = *((unsigned __int8 *)v72 + v71 + 4);
  if ((v73 - 1) >= 2)
  {
    if (v73)
    {
      if (v73 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19874D100);
      }
      goto LABEL_71;
    }
LABEL_60:
    v81 = *(_DWORD **)(v70 + 112);
    if (*v81 <= v71)
    {
      __break(0xC471u);
      JUMPOUT(0x19874D1F8);
    }
    v82 = *(_QWORD *)&v81[2 * v71 + 2];
    if (v82)
      v83 = (v82 & 0xFFFE000000000002) == 0;
    else
      v83 = 0;
    if (!v83)
      goto LABEL_48;
    v84 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v82 & 0xFFFFFFFE) + 0x4C));
    if (v84 != &JSC::SymbolTable::s_info && v84 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_48;
LABEL_71:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v86, v87, v88, v89, v90);
    v15 = v11 << 35;
    goto LABEL_13;
  }
LABEL_48:
  v74 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v74 <= v71)
  {
    __break(0xC471u);
    JUMPOUT(0x19874D1B8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v74[2 * v71 + 2], 0, a4, a5, a6, a7, a8);
LABEL_14:
  if ((int)v13 < 0x40000000)
  {
    v21 = (v13 << 35) | 0x1D;
LABEL_16:
    JSC::MacroAssemblerARM64::load64(a1, v21, 1, v16, v17, v18, v19, v20);
    goto LABEL_17;
  }
  v75 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v76 = (v13 - 0x40000000);
  v77 = *(_DWORD **)(v75 + 120);
  if (!v77 || *v77 <= v76)
    goto LABEL_73;
  v78 = *((unsigned __int8 *)v77 + v76 + 4);
  if ((v78 - 1) >= 2)
  {
    if (v78)
    {
      if (v78 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19874D128);
      }
      goto LABEL_84;
    }
LABEL_73:
    v91 = *(_DWORD **)(v75 + 112);
    if (*v91 <= v76)
    {
      __break(0xC471u);
      JUMPOUT(0x19874D218);
    }
    v92 = *(_QWORD *)&v91[2 * v76 + 2];
    if (v92)
      v93 = (v92 & 0xFFFE000000000002) == 0;
    else
      v93 = 0;
    if (!v93)
      goto LABEL_53;
    v94 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v92 & 0xFFFFFFFE) + 0x4C));
    if (v94 != &JSC::SymbolTable::s_info && v94 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_53;
LABEL_84:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v16, v17, v18, v19, v20);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v96, v97, v98, v99, v100);
    v21 = (v13 << 35) | 1;
    goto LABEL_16;
  }
LABEL_53:
  v79 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v79 <= v76)
  {
    __break(0xC471u);
    JUMPOUT(0x19874D1D8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v79[2 * v76 + 2], 1, v16, v17, v18, v19, v20);
LABEL_17:
  v29 = *(_DWORD *)(a1 + 200);
  if (v29 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v22, v23, v24, v25, v26, v27, v28);
    v29 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = -1442839582;
  v30 = *(_DWORD *)(a1 + 200);
  v31 = v30 + 4;
  *(_DWORD *)(a1 + 200) = v30 + 4;
  if ((v30 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v22, v23, v24, v25, v26, v27, v28);
    v31 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v31) = -1979645886;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch64(a1, 3, 2, 27, v25, v26, v27, v28, (uint64_t)&v103);
  v39 = (_QWORD *)(a1 + 648);
  v40 = v104;
  v41 = *(_DWORD *)(a1 + 640);
  v105 = v103;
  v106 = v104;
  v107 = v41;
  v42 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v42 == *(_DWORD *)(a1 + 656))
  {
    v68 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v39, v42 + 1, (unint64_t)&v105);
    v69 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v69 = *(_DWORD *)v68;
    *(_QWORD *)(v69 + 4) = *(_QWORD *)(v68 + 4);
    *(_DWORD *)(v69 + 12) = *(_DWORD *)(v68 + 12);
  }
  else
  {
    v43 = *v39 + 16 * v42;
    *(_DWORD *)v43 = v103;
    *(_QWORD *)(v43 + 4) = v40;
    *(_DWORD *)(v43 + 12) = v41;
  }
  ++*(_DWORD *)(a1 + 660);
  v44 = *(_DWORD *)(a1 + 200);
  if (v44 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v32, v33, v34, v35, v36, v37, v38);
    v44 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v44) = 1795227679;
  v45 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v45;
  if (*(_BYTE *)(a1 + 328))
  {
    while ((signed int)v45 < *(_DWORD *)(a1 + 52))
    {
      if (v45 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v32, v33, v34, v35, v36, v37, v38);
        v45 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v45) = -721215457;
      v45 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v45;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  if (v45 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v32, v33, v34, v35, v36, v37, v38);
    v45 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v45) = 1409286145;
  v46 = *(_DWORD *)(a1 + 200);
  v47 = v46 + 4;
  *(_DWORD *)(a1 + 200) = v46 + 4;
  v48 = v46 + 8;
  v49 = v46 + 4;
  if (v48 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v32, v33, v34, v35, v36, v37, v38);
    v49 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v49) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  result = a1 + 624;
  v51 = 0xFF00018600000000;
  if (!*(_BYTE *)(a1 + 328))
    v51 = 0xFF00018200000000;
  v52 = v14 + (*(_DWORD *)(a1 + 640) >> 2);
  v105 = v47;
  v106 = v51;
  v107 = v52;
  v53 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v53 == *(_DWORD *)(a1 + 632))
  {
    result = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v53 + 1, (unint64_t)&v105);
    v67 = *(_QWORD *)(a1 + 624) + 16 * *(unsigned int *)(a1 + 636);
    *(_DWORD *)v67 = *(_DWORD *)result;
    *(_QWORD *)(v67 + 4) = *(_QWORD *)(result + 4);
    *(_DWORD *)(v67 + 12) = *(_DWORD *)(result + 12);
  }
  else
  {
    v54 = *(_QWORD *)result + 16 * v53;
    *(_DWORD *)v54 = v47;
    *(_QWORD *)(v54 + 4) = v51;
    *(_DWORD *)(v54 + 12) = v52;
  }
  ++*(_DWORD *)(a1 + 636);
  return result;
}

void JSC::JIT::emit_op_throw(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  _DWORD *v44;
  _DWORD *v45;
  unint64_t v46;
  BOOL v47;
  char **v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  JSC::ExecutableMemoryHandle *v64;

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    if ((int)v10 <= 63)
      goto LABEL_4;
    v39 = 1073741760;
LABEL_13:
    v10 = (v10 + v39);
    goto LABEL_14;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    if ((int)v10 <= 15)
    {
LABEL_4:
      v11 = *(_DWORD *)(a1 + 640) >> 2;
LABEL_5:
      v12 = (v10 << 35) | 0x1D;
LABEL_6:
      JSC::MacroAssemblerARM64::load64(a1, v12, 1, a4, a5, a6, a7, a8);
      goto LABEL_7;
    }
    v39 = 1073741808;
    goto LABEL_13;
  }
  v10 = *(unsigned int *)(a2 + 2);
LABEL_14:
  v11 = *(_DWORD *)(a1 + 640) >> 2;
  if ((int)v10 < 0x40000000)
    goto LABEL_5;
  v40 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v41 = (v10 - 0x40000000);
  v42 = *(_DWORD **)(v40 + 120);
  if (!v42 || *v42 <= v41)
    goto LABEL_21;
  v43 = *((unsigned __int8 *)v42 + v41 + 4);
  if ((v43 - 1) >= 2)
  {
    if (v43)
    {
      if (v43 == 3)
        goto LABEL_32;
      goto LABEL_39;
    }
LABEL_21:
    v45 = *(_DWORD **)(v40 + 112);
    if (*v45 > v41)
    {
      v46 = *(_QWORD *)&v45[2 * v41 + 2];
      if (v46)
        v47 = (v46 & 0xFFFE000000000002) == 0;
      else
        v47 = 0;
      if (!v47)
        goto LABEL_18;
      v48 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v46 & 0xFFFFFFFE) + 0x4C));
      if (v48 != &JSC::SymbolTable::s_info && v48 != &JSC::JSTemplateObjectDescriptor::s_info)
        goto LABEL_18;
LABEL_32:
      JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v50, v51, v52, v53, v54);
      v12 = (v10 << 35) | 1;
      goto LABEL_6;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x19874D47CLL);
  }
LABEL_18:
  v44 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v44 <= v41)
  {
    __break(0xC471u);
    JUMPOUT(0x19874D4C4);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v44[2 * v41 + 2], 1, a4, a5, a6, a7, a8);
LABEL_7:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)v11, 8, v13, v14, v15, v16, v17);
  JSC::JITThunks::ctiStub(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440), *(_QWORD *)(a1 + 352), (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::op_throw_handlerGenerator, v18, v19, v20, v21, v22, &v63);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>(a1, v63, v23, v24, v25, v26, v27, v28);
  v36 = (unsigned int *)v64;
  v64 = 0;
  if (v36)
  {
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      atomic_store(1u, v36);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v36, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
    }
  }
}

uint64_t JSC::JIT::op_throw_handlerGenerator@<X0>(JSC::JIT *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  pthread_key_t *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  unsigned int v55;
  char v56;
  int v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v73;
  char **v74;
  char *v75;
  _QWORD v76[3];
  WTF *v77;
  _BYTE v78[128];
  unsigned int v79;
  char v80;
  int v81;
  int v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  char v86[32];
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  _BYTE v91[128];
  unsigned int v92;
  unsigned int i;
  int v94;
  char v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  char *v99;
  char v100;
  uint64_t v101;
  int v102;
  char *v103;
  char v104;
  uint64_t v105;
  int v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v86[0] = 0;
  v86[24] = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0x8000000080000000;
  v90 = v91;
  v92 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v75 = (char *)v76;
    v76[0] = &v74;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v75, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v16 = *(_DWORD *)(v14 + 136);
    if (v92 < v16)
    {
      if (v90 && v90 != v91)
      {
        WTF::fastFree((unint64_t)v90, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v16 = *(_DWORD *)(v14 + 136);
      }
      v90 = (_BYTE *)v15;
      v92 = v16;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
    }
  }
  i = 0;
  v95 = 1;
  v94 = 0;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = v86;
  v100 = 16;
  v101 = 0;
  v102 = 0x10000;
  v103 = v86;
  v104 = 17;
  v105 = 0;
  v106 = 0x20000;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  JSC::MacroAssemblerARM64::load64((uint64_t)v86, (uint64_t)this + 48, 0, v9, v10, v11, v12, v13);
  JSC::AssemblyHelpers::copyCalleeSavesToEntryFrameCalleeSavesBufferImpl(v86, 0);
  v24 = i;
  if (i + 4 > v92)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v90, v17, v18, v19, v20, v21, v22, v23);
    v24 = i;
  }
  *(_DWORD *)&v90[v24] = -1207811160;
  v25 = i;
  v26 = i + 4;
  i += 4;
  if (v25 + 8 > v92)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v90, v17, v18, v19, v20, v21, v22, v23);
    v26 = i;
  }
  *(_DWORD *)&v90[v26] = -129989824;
  v27 = i + 4;
  for (i = v27; (int)v27 < SHIDWORD(v89); i = v27)
  {
    if (v27 + 4 > v92)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v90, v17, v18, v19, v20, v21, v22, v23);
      v27 = i;
    }
    *(_DWORD *)&v90[v27] = -721215457;
    v27 = i + 4;
  }
  if (!v95)
  {
    __break(0xC471u);
    JUMPOUT(0x19874DA80);
  }
  *((_DWORD *)v99 + 52) &= ~v102;
  v28 = v100 & 0x1F;
  if (v27 + 4 > v92)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v90, v17, v18, v19, v20, v21, v22, v23);
    v27 = i;
  }
  *(_DWORD *)&v90[v27] = v28 | 0xD2800000;
  v29 = i;
  v30 = i + 4;
  i += 4;
  if (v29 + 8 > v92)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v90, v17, v18, v19, v20, v21, v22, v23);
    v30 = i;
  }
  *(_DWORD *)&v90[v30] = v28 | 0xF2A00000;
  v31 = i;
  v32 = i + 4;
  i += 4;
  if (v31 + 8 > v92)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v90, v17, v18, v19, v20, v21, v22, v23);
    v32 = i;
  }
  *(_DWORD *)&v90[v32] = v28 | 0xF2C00000;
  v33 = i;
  v34 = i + 4;
  i += 4;
  v94 = 0;
  if (v33 + 8 > v92)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v90, v17, v18, v19, v20, v21, v22, v23);
    v34 = i;
  }
  *(_DWORD *)&v90[v34] = -700513792;
  v35 = i + 4;
  for (i = v35; v35 < SHIDWORD(v89); i = v35)
  {
    if (v35 + 4 > v92)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v90, v17, v18, v19, v20, v21, v22, v23);
      v35 = i;
    }
    *(_DWORD *)&v90[v35] = -721215457;
    v35 = i + 4;
  }
  JSC::MacroAssemblerARM64::load64((uint64_t)v86, (uint64_t)this + 90488, 1, v19, v20, v21, v22, v23);
  v43 = i;
  if (i + 4 > v92)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v90, v36, v37, v38, v39, v40, v41, v42);
    v43 = i;
  }
  *(_DWORD *)&v90[v43] = -702611424;
  i += 4;
  v76[0] = 0;
  v76[1] = 0;
  v76[2] = -1;
  v77 = (WTF *)v78;
  v79 = 128;
  v44 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v44 != -1)
  {
    v75 = &v73;
    v74 = &v75;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v74, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v45 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v53 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v53)
  {
    v53 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v53, v45);
  }
  v54 = *(WTF **)v53;
  if (*(_QWORD *)v53 != v53 + 8)
  {
    v55 = *(_DWORD *)(v53 + 136);
    if (v79 < v55)
    {
      if (v77 && v77 != (WTF *)v78)
      {
        WTF::fastFree((unint64_t)v77, v46, v47, v48, v49, v50, v51, v52);
        v54 = *(WTF **)v53;
        v55 = *(_DWORD *)(v53 + 136);
      }
      v77 = v54;
      v79 = v55;
      *(_QWORD *)v53 = v53 + 8;
      *(_DWORD *)(v53 + 136) = 128;
    }
  }
  v56 = 1;
  v80 = 1;
  v81 = 0;
  v82 = 13;
  v83 = 0u;
  v84 = 0u;
  v85 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v76, (uint64_t)v86, 1, v48, v49, v50, v51, v52);
  if (v35 < 4)
    v57 = 0;
  else
    v57 = *(_DWORD *)((char *)v77 + (v35 & 0xFFFFFFFC) - 4);
  LODWORD(v75) = v35 - v57 - 16;
  JSC::ARM64Assembler::linkPointer(v83, (unsigned int *)&v75, (unint64_t)operationThrow);
  BYTE2(v81) = 1;
  if (byte_1ECF4C288)
    goto LABEL_46;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v56 = HIBYTE(word_1ECF4C286) != 0;
LABEL_46:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v76, v56, "op_throw_handler", 17, "Baseline: op_throw_handler", a2);
    goto LABEL_43;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v76, "op_throw_handler", 17, a2);
LABEL_43:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v76, v58, v59, v60, v61, v62, v63, v64);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v86, v65, v66, v67, v68, v69, v70, v71);
}

uint64_t operationThrow(JSC::JSGlobalObject *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Exception *v8;
  JSC::VM *v10;
  JSC::CallFrame *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::VM *vars0;

  v8 = a2;
  v10 = (JSC::VM *)*((_QWORD *)a1 + 7);
  *((_QWORD *)v10 + 5) = vars0;
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    v8 = (JSC::Exception *)JSC::Exception::create((uint64_t)v10, a2, 0, a4, a5, a6, a7, a8);
  }
  JSC::VM::throwException(v10, a1, v8);
  JSC::genericUnwind(v10, vars0, v11, v12, v13, v14, v15, v16);
  return *((_QWORD *)v10 + 2);
}

void JSC::JIT::compileOpStrictEq<JSC::OpStricteq>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  int v91;
  unsigned int *v92;
  unsigned int v93;
  _DWORD *v94;
  unint64_t v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  _DWORD *v113;
  int v114;
  _DWORD *v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD *v122;
  int v123;
  _DWORD *v124;
  uint64_t v125;
  BOOL v126;
  _DWORD *v127;
  unint64_t v128;
  BOOL v129;
  char **v130;
  _DWORD *v132;
  unint64_t v133;
  BOOL v134;
  char **v135;
  _DWORD *v137;
  unint64_t v138;
  BOOL v139;
  char **v140;
  uint64_t v142;
  uint64_t v143;
  _DWORD *v144;
  int v145;
  _DWORD *v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD *v149;
  int v150;
  _DWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  _DWORD *v160;
  unint64_t v161;
  BOOL v162;
  char **v163;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _DWORD *v170;
  unint64_t v171;
  BOOL v172;
  char **v173;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _DWORD *v180;
  unint64_t v181;
  BOOL v182;
  char **v183;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _DWORD *v195;
  int v196;
  _DWORD *v197;
  uint64_t v199;
  _DWORD *v200;
  unint64_t v201;
  BOOL v202;
  char **v203;
  BOOL v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _DWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  unsigned int v218[3];
  int v219;
  uint64_t v220;
  unsigned int v221[3];
  int v222;
  uint64_t v223;
  _QWORD v224[2];
  unsigned int v225;
  int v226;
  uint64_t v227;
  int v228;

  v9 = *a2;
  if (v9 == 128)
  {
    v190 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    v12 = v190 + 1073741760;
    if (v190 <= 63)
      v12 = *((__int16 *)a2 + 1);
    v13 = *((__int16 *)a2 + 2);
    v191 = *((__int16 *)a2 + 3);
    if (v191 <= 63)
      v15 = v191;
    else
      v15 = (v191 + 1073741760);
    if (v13 <= 63)
      goto LABEL_9;
LABEL_188:
    v13 += v11;
    goto LABEL_189;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    v12 = v10 + 1073741808;
    if (v10 <= 15)
      v12 = (char)a2[1];
    v13 = (char)a2[2];
    v14 = (char)a2[3];
    if (v14 <= 15)
      v15 = v14;
    else
      v15 = (v14 + 1073741808);
    if (v13 <= 15)
    {
LABEL_9:
      v16 = 0;
      v225 = v12;
      goto LABEL_10;
    }
    goto LABEL_188;
  }
  v12 = *(_DWORD *)(a2 + 2);
  v13 = *(_DWORD *)(a2 + 6);
  v15 = *(unsigned int *)(a2 + 10);
LABEL_189:
  v225 = v12;
  if (v13 >= 0x40000000)
  {
    v192 = *(_QWORD *)(a1 + 800);
    v193 = *(_QWORD *)(v192 + 56);
    v194 = (v13 - 0x40000000);
    v195 = *(_DWORD **)(v193 + 120);
    if (!v195 || *v195 <= v194)
      goto LABEL_203;
    v196 = *((unsigned __int8 *)v195 + v194 + 4);
    if ((v196 - 1) < 2)
      goto LABEL_193;
    if (v196)
    {
      if (v196 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19874E8DCLL);
      }
    }
    else
    {
LABEL_203:
      v200 = *(_DWORD **)(v193 + 112);
      if (*v200 <= v194)
      {
        __break(0xC471u);
        JUMPOUT(0x19874EA58);
      }
      v201 = *(_QWORD *)&v200[2 * v194 + 2];
      if (v201)
        v202 = (v201 & 0xFFFE000000000002) == 0;
      else
        v202 = 0;
      if (!v202
        || ((v203 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v201 & 0xFFFFFFFE) + 0x4C)),
             v203 != &JSC::SymbolTable::s_info)
          ? (v204 = v203 == &JSC::JSTemplateObjectDescriptor::s_info)
          : (v204 = 1),
            !v204))
      {
LABEL_193:
        v197 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
        if (*v197 <= v194)
        {
          __break(0xC471u);
          JUMPOUT(0x19874E9D8);
        }
        v95 = *(_QWORD *)&v197[2 * v194 + 2];
        if (v95 <= 0xA && ((1 << v95) & 0x4C4) != 0)
        {
          if ((int)v15 >= 0x40000000)
          {
            if (JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(v192, v15))
            {
              v210 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
              if (*v210 <= (v15 - 0x40000000))
              {
                __break(0xC471u);
                JUMPOUT(0x19874EAF8);
              }
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v210[2 * (v15 - 0x40000000) + 2], 1, v205, v206, v207, v208, v209);
              goto LABEL_201;
            }
            JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v205, v206, v207, v208, v209);
            JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v211, v212, v213, v214, v215);
            v199 = (v15 << 35) | 1;
          }
          else
          {
            v199 = ((unint64_t)v15 << 35) | 0x1D;
          }
          JSC::MacroAssemblerARM64::load64(a1, v199, 1, a4, a5, a6, a7, a8);
LABEL_201:
          v101 = a1;
          v102 = 1;
          goto LABEL_48;
        }
      }
    }
    v16 = 1;
    goto LABEL_10;
  }
  v16 = 0;
LABEL_10:
  v17 = v13;
  if ((int)v15 < 0x40000000)
  {
LABEL_11:
    if (!v16)
    {
      v18 = (v17 << 35) | 0x1D;
LABEL_13:
      JSC::MacroAssemblerARM64::load64(a1, v18, 0, a4, a5, a6, a7, a8);
LABEL_14:
      if ((int)v15 < 0x40000000)
      {
        v24 = ((unint64_t)v15 << 35) | 0x1D;
LABEL_16:
        JSC::MacroAssemblerARM64::load64(a1, v24, 1, v19, v20, v21, v22, v23);
        goto LABEL_17;
      }
      v147 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
      v148 = (v15 - 0x40000000);
      v149 = *(_DWORD **)(v147 + 120);
      if (!v149 || *v149 <= v148)
        goto LABEL_146;
      v150 = *((unsigned __int8 *)v149 + v148 + 4);
      if ((v150 - 1) < 2)
      {
LABEL_122:
        v151 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
        if (*v151 <= v148)
        {
          __break(0xC471u);
          JUMPOUT(0x19874EA38);
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v151[2 * v148 + 2], 1, v19, v20, v21, v22, v23);
LABEL_17:
        v224[0] = a1;
        v224[1] = &v225;
        if (!v16)
          goto LABEL_18;
        v111 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
        v112 = (v17 - 0x40000000);
        v113 = *(_DWORD **)(v111 + 120);
        if (v113 && *v113 > v112)
        {
          v114 = *((unsigned __int8 *)v113 + v112 + 4);
          if ((v114 - 1) < 2)
          {
LABEL_54:
            v115 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
            if (*v115 <= v112)
            {
              __break(0xC471u);
              JUMPOUT(0x19874E958);
            }
            v27 = *(_QWORD *)&v115[2 * v112 + 2];
            if ((v27 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v27 + 5) == 2)
            {
              v116 = *(_QWORD *)(v27 + 8);
              v117 = v116 && (*(_QWORD *)(v27 + 8) & 1) == 0;
              if (v117 && (*(_BYTE *)(v116 + 16) & 0x10) != 0)
              {
                v118 = 1;
                v119 = 0;
                goto LABEL_64;
              }
            }
LABEL_18:
            if ((int)v15 < 0x40000000)
            {
LABEL_19:
              v32 = *(_DWORD *)(a1 + 200);
              if (v32 + 4 > *(_DWORD *)(a1 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v25, v26, v27, v28, v29, v30, v31);
                v32 = *(_DWORD *)(a1 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(a1 + 56) + v32) = -1442839582;
              v33 = *(_DWORD *)(a1 + 200);
              v34 = v33 + 4;
              *(_DWORD *)(a1 + 200) = v33 + 4;
              if ((v33 + 8) > *(_DWORD *)(a1 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v25, v26, v27, v28, v29, v30, v31);
                v34 = *(_DWORD *)(a1 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(a1 + 56) + v34) = -1442774974;
              *(_DWORD *)(a1 + 200) += 4;
              JSC::MacroAssemblerARM64::branchTest64(a1, 0, 2, 28, v28, v29, v30, v31, (uint64_t)&v222);
              v39 = (_QWORD *)(a1 + 648);
              v40 = v223;
              v41 = *(_DWORD *)(a1 + 640);
              v226 = v222;
              v227 = v223;
              v228 = v41;
              v42 = *(unsigned int *)(a1 + 660);
              if ((_DWORD)v42 == *(_DWORD *)(a1 + 656))
              {
                v152 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v42 + 1, (unint64_t)&v226);
                v153 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
                *(_DWORD *)v153 = *(_DWORD *)v152;
                *(_QWORD *)(v153 + 4) = *(_QWORD *)(v152 + 4);
                *(_DWORD *)(v153 + 12) = *(_DWORD *)(v152 + 12);
              }
              else
              {
                v43 = *v39 + 16 * v42;
                *(_DWORD *)v43 = v222;
                *(_QWORD *)(v43 + 4) = v40;
                *(_DWORD *)(v43 + 12) = v41;
              }
              ++*(_DWORD *)(a1 + 660);
              JSC::MacroAssemblerARM64::branch64(a1, 2, 0, 27, v35, v36, v37, v38, (uint64_t)v221);
              JSC::MacroAssemblerARM64::branchTest64(a1, 1, 0, 27, v44, v45, v46, v47, (uint64_t)&v219);
              v54 = v220;
              v55 = *(_DWORD *)(a1 + 640);
              v226 = v219;
              v227 = v220;
              v228 = v55;
              v56 = *(unsigned int *)(a1 + 660);
              if ((_DWORD)v56 == *(_DWORD *)(a1 + 656))
              {
                v154 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v56 + 1, (unint64_t)&v226);
                v155 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
                *(_DWORD *)v155 = *(_DWORD *)v154;
                *(_QWORD *)(v155 + 4) = *(_QWORD *)(v154 + 4);
                *(_DWORD *)(v155 + 12) = *(_DWORD *)(v154 + 12);
              }
              else
              {
                v57 = *v39 + 16 * v56;
                *(_DWORD *)v57 = v219;
                *(_QWORD *)(v57 + 4) = v54;
                *(_DWORD *)(v57 + 12) = v55;
              }
              ++*(_DWORD *)(a1 + 660);
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v221, a1, v48, v49, v50, v51, v52, v53);
              JSC::MacroAssemblerARM64::branch64(a1, 2, 1, 27, v58, v59, v60, v61, (uint64_t)v218);
              JSC::MacroAssemblerARM64::branchTest64(a1, 1, 1, 27, v62, v63, v64, v65, (uint64_t)&v216);
              v72 = v217;
              v73 = *(_DWORD *)(a1 + 640);
              v226 = v216;
              v227 = v217;
              v228 = v73;
              v74 = *(unsigned int *)(a1 + 660);
              if ((_DWORD)v74 == *(_DWORD *)(a1 + 656))
              {
                v156 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v74 + 1, (unint64_t)&v226);
                v157 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
                *(_DWORD *)v157 = *(_DWORD *)v156;
                *(_QWORD *)(v157 + 4) = *(_QWORD *)(v156 + 4);
                *(_DWORD *)(v157 + 12) = *(_DWORD *)(v156 + 12);
              }
              else
              {
                v75 = *v39 + 16 * v74;
                *(_DWORD *)v75 = v216;
                *(_QWORD *)(v75 + 4) = v72;
                *(_DWORD *)(v75 + 12) = v73;
              }
              ++*(_DWORD *)(a1 + 660);
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v218, a1, v66, v67, v68, v69, v70, v71);
              v83 = *(_DWORD *)(a1 + 200);
              if (v83 + 4 > *(_DWORD *)(a1 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v76, v77, v78, v79, v80, v81, v82);
                v83 = *(_DWORD *)(a1 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(a1 + 56) + v83) = -352321473;
              v84 = *(_DWORD *)(a1 + 200);
              v85 = v84 + 4;
              *(_DWORD *)(a1 + 200) = v84 + 4;
              if ((v84 + 8) > *(_DWORD *)(a1 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v76, v77, v78, v79, v80, v81, v82);
                v85 = *(_DWORD *)(a1 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(a1 + 56) + v85) = 446633952;
              v86 = *(_DWORD *)(a1 + 200);
              v87 = v86 + 4;
              *(_DWORD *)(a1 + 200) = v86 + 4;
              if ((v86 + 8) > *(_DWORD *)(a1 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v76, v77, v78, v79, v80, v81, v82);
                v87 = *(_DWORD *)(a1 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(a1 + 56) + v87) = 285218816;
              *(_DWORD *)(a1 + 200) += 4;
              JSC::MacroAssemblerARM64::store64(a1, 0, ((unint64_t)v225 << 35) | 0x1D, v78, v79, v80, v81, v82);
              return;
            }
            v120 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
            v121 = (v15 - 0x40000000);
            v122 = *(_DWORD **)(v120 + 120);
            if (v122 && *v122 > v121)
            {
              v123 = *((unsigned __int8 *)v122 + v121 + 4);
              if ((v123 - 1) < 2)
              {
LABEL_68:
                v124 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
                if (*v124 <= v121)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19874E978);
                }
                v27 = *(_QWORD *)&v124[2 * v121 + 2];
                if ((v27 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v27 + 5) != 2)
                  goto LABEL_19;
                v125 = *(_QWORD *)(v27 + 8);
                v126 = v125 && (*(_QWORD *)(v27 + 8) & 1) == 0;
                if (!v126 || (*(_BYTE *)(v125 + 16) & 0x10) == 0)
                  goto LABEL_19;
                v118 = 0;
                v119 = 1;
LABEL_64:
                JSC::JIT::compileOpStrictEq<JSC::OpStricteq>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::{lambda(JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSString *)#1}::operator()((uint64_t)v224, v118, v119, v27, v28, v29, v30, v31);
                return;
              }
              if (v123)
              {
                if (v123 != 3)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19874E658);
                }
                goto LABEL_19;
              }
            }
            v137 = *(_DWORD **)(v120 + 112);
            if (*v137 <= v121)
            {
              __break(0xC471u);
              JUMPOUT(0x19874E9F8);
            }
            v138 = *(_QWORD *)&v137[2 * v121 + 2];
            if (v138)
              v139 = (v138 & 0xFFFE000000000002) == 0;
            else
              v139 = 0;
            if (v139)
            {
              v140 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v138 & 0xFFFFFFFE) + 0x4C));
              if (v140 == &JSC::SymbolTable::s_info || v140 == &JSC::JSTemplateObjectDescriptor::s_info)
                goto LABEL_19;
            }
            goto LABEL_68;
          }
          if (v114)
          {
            if (v114 != 3)
            {
              __break(0xC471u);
              JUMPOUT(0x19874E630);
            }
            goto LABEL_18;
          }
        }
        v132 = *(_DWORD **)(v111 + 112);
        if (*v132 <= v112)
        {
          __break(0xC471u);
          JUMPOUT(0x19874E9B8);
        }
        v133 = *(_QWORD *)&v132[2 * v112 + 2];
        if (v133)
          v134 = (v133 & 0xFFFE000000000002) == 0;
        else
          v134 = 0;
        if (v134)
        {
          v135 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v133 & 0xFFFFFFFE) + 0x4C));
          if (v135 == &JSC::SymbolTable::s_info || v135 == &JSC::JSTemplateObjectDescriptor::s_info)
            goto LABEL_18;
        }
        goto LABEL_54;
      }
      if (v150)
      {
        if (v150 != 3)
        {
          __break(0xC471u);
          JUMPOUT(0x19874E6A8);
        }
      }
      else
      {
LABEL_146:
        v170 = *(_DWORD **)(v147 + 112);
        if (*v170 <= v148)
        {
          __break(0xC471u);
          JUMPOUT(0x19874EAB8);
        }
        v171 = *(_QWORD *)&v170[2 * v148 + 2];
        if (v171)
          v172 = (v171 & 0xFFFE000000000002) == 0;
        else
          v172 = 0;
        if (!v172)
          goto LABEL_122;
        v173 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v171 & 0xFFFFFFFE) + 0x4C));
        if (v173 != &JSC::SymbolTable::s_info && v173 != &JSC::JSTemplateObjectDescriptor::s_info)
          goto LABEL_122;
      }
      JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v19, v20, v21, v22, v23);
      JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v175, v176, v177, v178, v179);
      v24 = ((unint64_t)v15 << 35) | 1;
      goto LABEL_16;
    }
    v142 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
    v143 = (v17 - 0x40000000);
    v144 = *(_DWORD **)(v142 + 120);
    if (!v144 || *v144 <= v143)
      goto LABEL_133;
    v145 = *((unsigned __int8 *)v144 + v143 + 4);
    if ((v145 - 1) < 2)
    {
LABEL_117:
      v146 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
      if (*v146 <= v143)
      {
        __break(0xC471u);
        JUMPOUT(0x19874EA18);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v146[2 * v143 + 2], 0, a4, a5, a6, a7, a8);
      goto LABEL_14;
    }
    if (v145)
    {
      if (v145 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19874E680);
      }
    }
    else
    {
LABEL_133:
      v160 = *(_DWORD **)(v142 + 112);
      if (*v160 <= v143)
      {
        __break(0xC471u);
        JUMPOUT(0x19874EA98);
      }
      v161 = *(_QWORD *)&v160[2 * v143 + 2];
      if (v161)
        v162 = (v161 & 0xFFFE000000000002) == 0;
      else
        v162 = 0;
      if (!v162)
        goto LABEL_117;
      v163 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v161 & 0xFFFFFFFE) + 0x4C));
      if (v163 != &JSC::SymbolTable::s_info && v163 != &JSC::JSTemplateObjectDescriptor::s_info)
        goto LABEL_117;
    }
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v165, v166, v167, v168, v169);
    v18 = v17 << 35;
    goto LABEL_13;
  }
  v88 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v89 = (v15 - 0x40000000);
  v90 = *(_DWORD **)(v88 + 120);
  if (v90 && *v90 > v89)
  {
    v91 = *((unsigned __int8 *)v90 + v89 + 4);
    if ((v91 - 1) < 2)
      goto LABEL_39;
    if (*((_BYTE *)v90 + v89 + 4))
    {
      if (v91 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19874E608);
      }
      goto LABEL_11;
    }
  }
  v127 = *(_DWORD **)(v88 + 112);
  if (*v127 <= v89)
  {
    __break(0xC471u);
    JUMPOUT(0x19874E998);
  }
  v128 = *(_QWORD *)&v127[2 * v89 + 2];
  if (v128)
    v129 = (v128 & 0xFFFE000000000002) == 0;
  else
    v129 = 0;
  if (v129)
  {
    v130 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v128 & 0xFFFFFFFE) + 0x4C));
    if (v130 == &JSC::SymbolTable::s_info || v130 == &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_11;
  }
LABEL_39:
  v92 = *(unsigned int **)(*(_QWORD *)(a1 + 808) + 112);
  v93 = *v92;
  if (*v92 <= v89)
  {
    __break(0xC471u);
    JUMPOUT(0x19874E718);
  }
  v94 = v92 + 2;
  v95 = *(_QWORD *)&v94[2 * v89];
  if (v95 > 0xA || ((1 << v95) & 0x4C4) == 0)
    goto LABEL_11;
  if (v16)
  {
    v158 = (v17 - 0x40000000);
    if (!v90 || *v90 <= v158)
      goto LABEL_159;
    v159 = *((unsigned __int8 *)v90 + v158 + 4);
    if ((v159 - 1) < 2)
    {
LABEL_130:
      if (v93 <= v158)
      {
        __break(0xC471u);
        JUMPOUT(0x19874EA78);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v94[2 * v158], 0, a4, a5, a6, a7, a8);
      goto LABEL_47;
    }
    if (v159)
    {
      if (v159 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19874E938);
      }
    }
    else
    {
LABEL_159:
      v180 = *(_DWORD **)(v88 + 112);
      if (*v180 <= v158)
      {
        __break(0xC471u);
        JUMPOUT(0x19874EAD8);
      }
      v181 = *(_QWORD *)&v180[2 * v158 + 2];
      if (v181)
        v182 = (v181 & 0xFFFE000000000002) == 0;
      else
        v182 = 0;
      if (!v182)
        goto LABEL_130;
      v183 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v181 & 0xFFFFFFFE) + 0x4C));
      if (v183 != &JSC::SymbolTable::s_info && v183 != &JSC::JSTemplateObjectDescriptor::s_info)
        goto LABEL_130;
    }
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v185, v186, v187, v188, v189);
    v97 = v17 << 35;
    goto LABEL_46;
  }
  v97 = (v17 << 35) | 0x1D;
LABEL_46:
  JSC::MacroAssemblerARM64::load64(a1, v97, 0, a4, a5, a6, a7, a8);
LABEL_47:
  v101 = a1;
  v102 = 0;
LABEL_48:
  JSC::MacroAssemblerARM64::compare64(v101, 0, v102, v95, 2, v98, v99, v100);
  v110 = *(_DWORD *)(a1 + 200);
  if (v110 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v103, v104, v105, v106, v107, v108, v109);
    v110 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v110) = 285218882;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 2, ((unint64_t)v225 << 35) | 0x1D, v105, v106, v107, v108, v109);
}

void JSC::JIT::compileOpStrictEq<JSC::OpNstricteq>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  int v96;
  _DWORD *v97;
  JSC::ARM64LogicalImmediate *v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _DWORD *v109;
  int v110;
  _DWORD *v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD *v116;
  unint64_t v117;
  BOOL v118;
  char **v119;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  int v124;
  _DWORD *v125;
  uint64_t v126;
  _DWORD *v127;
  unint64_t v128;
  BOOL v129;
  char **v130;
  uint64_t v132;
  uint64_t v133;
  _DWORD *v134;
  int v135;
  _DWORD *v136;
  uint64_t v137;
  uint64_t v138;
  _DWORD *v139;
  int v140;
  _DWORD *v141;
  _DWORD *v142;
  unint64_t v143;
  BOOL v144;
  char **v145;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _DWORD *v158;
  _DWORD *v159;
  unint64_t v160;
  BOOL v161;
  char **v162;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _DWORD *v169;
  unint64_t v170;
  BOOL v171;
  char **v172;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _DWORD *v189;
  int v190;
  _DWORD *v191;
  unint64_t v192;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  _DWORD *v201;
  unint64_t v202;
  BOOL v203;
  char **v204;
  BOOL v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _DWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  unsigned int v219[3];
  int v220;
  uint64_t v221;
  unsigned int v222[3];
  int v223;
  uint64_t v224;
  _QWORD v225[2];
  uint64_t v226;
  unsigned int *v227;
  unsigned int v228;
  int v229;
  uint64_t v230;
  int v231;

  v9 = *a2;
  if (v9 == 128)
  {
    v184 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    v12 = v184 + 1073741760;
    if (v184 <= 63)
      v12 = *((__int16 *)a2 + 1);
    v13 = *((__int16 *)a2 + 2);
    v185 = *((__int16 *)a2 + 3);
    if (v185 <= 63)
      v15 = v185;
    else
      v15 = (v185 + 1073741760);
    if (v13 <= 63)
      goto LABEL_9;
LABEL_169:
    v13 += v11;
    goto LABEL_170;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    v12 = v10 + 1073741808;
    if (v10 <= 15)
      v12 = (char)a2[1];
    v13 = (char)a2[2];
    v14 = (char)a2[3];
    if (v14 <= 15)
      v15 = v14;
    else
      v15 = (v14 + 1073741808);
    if (v13 <= 15)
    {
LABEL_9:
      v16 = 0;
      v17 = v15;
      v228 = v12;
      v226 = a1;
      v227 = &v228;
      goto LABEL_10;
    }
    goto LABEL_169;
  }
  v12 = *(_DWORD *)(a2 + 2);
  v13 = *(_DWORD *)(a2 + 6);
  v15 = *(unsigned int *)(a2 + 10);
LABEL_170:
  v17 = v15;
  v228 = v12;
  v226 = a1;
  v227 = &v228;
  if (v13 >= 0x40000000)
  {
    v186 = *(_QWORD *)(a1 + 800);
    v187 = *(_QWORD *)(v186 + 56);
    v188 = (v13 - 0x40000000);
    v189 = *(_DWORD **)(v187 + 120);
    if (!v189 || *v189 <= v188)
      goto LABEL_186;
    v190 = *((unsigned __int8 *)v189 + v188 + 4);
    if ((v190 - 1) < 2)
      goto LABEL_174;
    if (v190)
    {
      if (v190 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19874F7C0);
      }
    }
    else
    {
LABEL_186:
      v201 = *(_DWORD **)(v187 + 112);
      if (*v201 <= v188)
      {
        __break(0xC471u);
        JUMPOUT(0x19874F924);
      }
      v202 = *(_QWORD *)&v201[2 * v188 + 2];
      if (v202)
        v203 = (v202 & 0xFFFE000000000002) == 0;
      else
        v203 = 0;
      if (!v203
        || ((v204 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v202 & 0xFFFFFFFE) + 0x4C)),
             v204 != &JSC::SymbolTable::s_info)
          ? (v205 = v204 == &JSC::JSTemplateObjectDescriptor::s_info)
          : (v205 = 1),
            !v205))
      {
LABEL_174:
        v191 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
        if (*v191 <= v188)
        {
          __break(0xC471u);
          JUMPOUT(0x19874F874);
        }
        v192 = *(_QWORD *)&v191[2 * v188 + 2];
        if (v192 <= 0xA && ((1 << v192) & 0x4C4) != 0)
        {
          if ((int)v15 >= 0x40000000)
          {
            if (JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(v186, v15))
            {
              v211 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
              if (*v211 <= (v15 - 0x40000000))
              {
                __break(0xC471u);
                JUMPOUT(0x19874F9A4);
              }
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v211[2 * (v15 - 0x40000000) + 2], 1, v206, v207, v208, v209, v210);
              goto LABEL_182;
            }
            JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v206, v207, v208, v209, v210);
            JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v212, v213, v214, v215, v216);
            v194 = (v15 << 35) | 1;
          }
          else
          {
            v194 = ((unint64_t)v15 << 35) | 0x1D;
          }
          JSC::MacroAssemblerARM64::load64(a1, v194, 1, a4, a5, a6, a7, a8);
LABEL_182:
          JSC::MacroAssemblerARM64::compare64(a1, 1, 1, v192, 2, v195, v196, v197);
          v200 = *(_DWORD *)(a1 + 200);
          if (v200 + 4 > *(_DWORD *)(a1 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v198, v199, v79, v80, v81, v82, v83);
            v200 = *(_DWORD *)(a1 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 56) + v200) = 285218882;
          *(_DWORD *)(a1 + 200) += 4;
          v89 = ((unint64_t)v228 << 35) | 0x1D;
          v90 = a1;
          v91 = 2;
          goto LABEL_36;
        }
      }
    }
    v16 = 1;
    goto LABEL_10;
  }
  v16 = 0;
LABEL_10:
  v18 = v13;
  if ((int)v15 < 0x40000000)
    goto LABEL_11;
  v92 = *(_QWORD *)(a1 + 800);
  v93 = *(_QWORD *)(v92 + 56);
  v94 = (v17 - 0x40000000);
  v95 = *(_DWORD **)(v93 + 120);
  if (!v95 || *v95 <= v94)
  {
LABEL_64:
    v116 = *(_DWORD **)(v93 + 112);
    if (*v116 <= v94)
    {
      __break(0xC471u);
      JUMPOUT(0x19874F834);
    }
    v117 = *(_QWORD *)&v116[2 * v94 + 2];
    if (v117)
      v118 = (v117 & 0xFFFE000000000002) == 0;
    else
      v118 = 0;
    if (v118)
    {
      v119 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v117 & 0xFFFFFFFE) + 0x4C));
      if (v119 == &JSC::SymbolTable::s_info || v119 == &JSC::JSTemplateObjectDescriptor::s_info)
        goto LABEL_11;
    }
    goto LABEL_40;
  }
  v96 = *((unsigned __int8 *)v95 + v94 + 4);
  if ((v96 - 1) >= 2)
  {
    if (v96)
    {
      if (v96 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19874F46CLL);
      }
      goto LABEL_11;
    }
    goto LABEL_64;
  }
LABEL_40:
  v97 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v97 <= (v15 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x19874F5A8);
  }
  v98 = *(JSC::ARM64LogicalImmediate **)&v97[2 * (v15 - 0x40000000) + 2];
  if ((unint64_t)v98 <= 0xA && ((1 << (char)v98) & 0x4C4) != 0)
  {
    if (v16)
    {
      if (JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(v92, v18))
      {
        v158 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
        if (*v158 <= (v18 - 0x40000000))
        {
          __break(0xC471u);
          JUMPOUT(0x19874F944);
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v158[2 * (v18 - 0x40000000) + 2], 0, v153, v154, v155, v156, v157);
        goto LABEL_48;
      }
      JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v153, v154, v155, v156, v157);
      JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v179, v180, v181, v182, v183);
      v100 = v18 << 35;
    }
    else
    {
      v100 = (v18 << 35) | 0x1D;
    }
    JSC::MacroAssemblerARM64::load64(a1, v100, 0, a4, a5, a6, a7, a8);
LABEL_48:
    JSC::JIT::compileOpStrictEq<JSC::OpNstricteq>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::{lambda(JSC::ARM64Registers::RegisterID,JSC::JSValue)#1}::operator()((uint64_t)&v226, v98, v101, v102, v103, v104, v105, v106);
    return;
  }
LABEL_11:
  if (!v16)
  {
    v19 = (v18 << 35) | 0x1D;
LABEL_13:
    JSC::MacroAssemblerARM64::load64(a1, v19, 0, a4, a5, a6, a7, a8);
    goto LABEL_14;
  }
  v132 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v133 = (v18 - 0x40000000);
  v134 = *(_DWORD **)(v132 + 120);
  if (!v134 || *v134 <= v133)
    goto LABEL_126;
  v135 = *((unsigned __int8 *)v134 + v133 + 4);
  if ((v135 - 1) >= 2)
  {
    if (v135)
    {
      if (v135 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19874F510);
      }
      goto LABEL_137;
    }
LABEL_126:
    v159 = *(_DWORD **)(v132 + 112);
    if (*v159 <= v133)
    {
      __break(0xC471u);
      JUMPOUT(0x19874F964);
    }
    v160 = *(_QWORD *)&v159[2 * v133 + 2];
    if (v160)
      v161 = (v160 & 0xFFFE000000000002) == 0;
    else
      v161 = 0;
    if (!v161)
      goto LABEL_100;
    v162 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v160 & 0xFFFFFFFE) + 0x4C));
    if (v162 != &JSC::SymbolTable::s_info && v162 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_100;
LABEL_137:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v164, v165, v166, v167, v168);
    v19 = v18 << 35;
    goto LABEL_13;
  }
LABEL_100:
  v136 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v136 <= v133)
  {
    __break(0xC471u);
    JUMPOUT(0x19874F8C4);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v136[2 * v133 + 2], 0, a4, a5, a6, a7, a8);
LABEL_14:
  if ((int)v15 >= 0x40000000)
  {
    v137 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
    v138 = (v17 - 0x40000000);
    v139 = *(_DWORD **)(v137 + 120);
    if (!v139 || *v139 <= v138)
      goto LABEL_139;
    v140 = *((unsigned __int8 *)v139 + v138 + 4);
    if ((v140 - 1) < 2)
    {
LABEL_105:
      v141 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
      if (*v141 <= (v15 - 0x40000000))
      {
        __break(0xC471u);
        JUMPOUT(0x19874F8E4);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v141[2 * (v15 - 0x40000000) + 2], 1, v20, v21, v22, v23, v24);
      goto LABEL_17;
    }
    if (v140)
    {
      if (v140 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19874F538);
      }
    }
    else
    {
LABEL_139:
      v169 = *(_DWORD **)(v137 + 112);
      if (*v169 <= v138)
      {
        __break(0xC471u);
        JUMPOUT(0x19874F984);
      }
      v170 = *(_QWORD *)&v169[2 * v138 + 2];
      if (v170)
        v171 = (v170 & 0xFFFE000000000002) == 0;
      else
        v171 = 0;
      if (!v171)
        goto LABEL_105;
      v172 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v170 & 0xFFFFFFFE) + 0x4C));
      if (v172 != &JSC::SymbolTable::s_info && v172 != &JSC::JSTemplateObjectDescriptor::s_info)
        goto LABEL_105;
    }
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v20, v21, v22, v23, v24);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v174, v175, v176, v177, v178);
    v25 = (v15 << 35) | 1;
    goto LABEL_16;
  }
  v25 = (v17 << 35) | 0x1D;
LABEL_16:
  JSC::MacroAssemblerARM64::load64(a1, v25, 1, v20, v21, v22, v23, v24);
LABEL_17:
  v225[0] = a1;
  v225[1] = &v228;
  if (!v16)
    goto LABEL_18;
  v107 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v108 = (v18 - 0x40000000);
  v109 = *(_DWORD **)(v107 + 120);
  if (v109 && *v109 > v108)
  {
    v110 = *((unsigned __int8 *)v109 + v108 + 4);
    if ((v110 - 1) < 2)
      goto LABEL_52;
    if (v110)
    {
      if (v110 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19874F494);
      }
LABEL_18:
      if ((int)v15 < 0x40000000)
      {
LABEL_19:
        v33 = *(_DWORD *)(a1 + 200);
        if (v33 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v26, v27, v28, v29, v30, v31, v32);
          v33 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v33) = -1442839582;
        v34 = *(_DWORD *)(a1 + 200);
        v35 = v34 + 4;
        *(_DWORD *)(a1 + 200) = v34 + 4;
        if ((v34 + 8) > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v26, v27, v28, v29, v30, v31, v32);
          v35 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v35) = -1442774974;
        *(_DWORD *)(a1 + 200) += 4;
        JSC::MacroAssemblerARM64::branchTest64(a1, 0, 2, 28, v29, v30, v31, v32, (uint64_t)&v223);
        v40 = (_QWORD *)(a1 + 648);
        v41 = v224;
        v42 = *(_DWORD *)(a1 + 640);
        v229 = v223;
        v230 = v224;
        v231 = v42;
        v43 = *(unsigned int *)(a1 + 660);
        if ((_DWORD)v43 == *(_DWORD *)(a1 + 656))
        {
          v147 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v43 + 1, (unint64_t)&v229);
          v148 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
          *(_DWORD *)v148 = *(_DWORD *)v147;
          *(_QWORD *)(v148 + 4) = *(_QWORD *)(v147 + 4);
          *(_DWORD *)(v148 + 12) = *(_DWORD *)(v147 + 12);
        }
        else
        {
          v44 = *v40 + 16 * v43;
          *(_DWORD *)v44 = v223;
          *(_QWORD *)(v44 + 4) = v41;
          *(_DWORD *)(v44 + 12) = v42;
        }
        ++*(_DWORD *)(a1 + 660);
        JSC::MacroAssemblerARM64::branch64(a1, 2, 0, 27, v36, v37, v38, v39, (uint64_t)v222);
        JSC::MacroAssemblerARM64::branchTest64(a1, 1, 0, 27, v45, v46, v47, v48, (uint64_t)&v220);
        v55 = v221;
        v56 = *(_DWORD *)(a1 + 640);
        v229 = v220;
        v230 = v221;
        v231 = v56;
        v57 = *(unsigned int *)(a1 + 660);
        if ((_DWORD)v57 == *(_DWORD *)(a1 + 656))
        {
          v149 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v57 + 1, (unint64_t)&v229);
          v150 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
          *(_DWORD *)v150 = *(_DWORD *)v149;
          *(_QWORD *)(v150 + 4) = *(_QWORD *)(v149 + 4);
          *(_DWORD *)(v150 + 12) = *(_DWORD *)(v149 + 12);
        }
        else
        {
          v58 = *v40 + 16 * v57;
          *(_DWORD *)v58 = v220;
          *(_QWORD *)(v58 + 4) = v55;
          *(_DWORD *)(v58 + 12) = v56;
        }
        ++*(_DWORD *)(a1 + 660);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v222, a1, v49, v50, v51, v52, v53, v54);
        JSC::MacroAssemblerARM64::branch64(a1, 2, 1, 27, v59, v60, v61, v62, (uint64_t)v219);
        JSC::MacroAssemblerARM64::branchTest64(a1, 1, 1, 27, v63, v64, v65, v66, (uint64_t)&v217);
        v73 = v218;
        v74 = *(_DWORD *)(a1 + 640);
        v229 = v217;
        v230 = v218;
        v231 = v74;
        v75 = *(unsigned int *)(a1 + 660);
        if ((_DWORD)v75 == *(_DWORD *)(a1 + 656))
        {
          v151 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v75 + 1, (unint64_t)&v229);
          v152 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
          *(_DWORD *)v152 = *(_DWORD *)v151;
          *(_QWORD *)(v152 + 4) = *(_QWORD *)(v151 + 4);
          *(_DWORD *)(v152 + 12) = *(_DWORD *)(v151 + 12);
        }
        else
        {
          v76 = *v40 + 16 * v75;
          *(_DWORD *)v76 = v217;
          *(_QWORD *)(v76 + 4) = v73;
          *(_DWORD *)(v76 + 12) = v74;
        }
        ++*(_DWORD *)(a1 + 660);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v219, a1, v67, v68, v69, v70, v71, v72);
        v84 = *(_DWORD *)(a1 + 200);
        if (v84 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v77, v78, v79, v80, v81, v82, v83);
          v84 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v84) = -352321473;
        v85 = *(_DWORD *)(a1 + 200);
        v86 = v85 + 4;
        *(_DWORD *)(a1 + 200) = v85 + 4;
        if ((v85 + 8) > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v77, v78, v79, v80, v81, v82, v83);
          v86 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v86) = 446629856;
        v87 = *(_DWORD *)(a1 + 200);
        v88 = v87 + 4;
        *(_DWORD *)(a1 + 200) = v87 + 4;
        if ((v87 + 8) > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v77, v78, v79, v80, v81, v82, v83);
          v88 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v88) = 285218816;
        *(_DWORD *)(a1 + 200) += 4;
        v89 = ((unint64_t)v228 << 35) | 0x1D;
        v90 = a1;
        v91 = 0;
LABEL_36:
        JSC::MacroAssemblerARM64::store64(v90, v91, v89, v79, v80, v81, v82, v83);
        return;
      }
      v121 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
      v122 = (v17 - 0x40000000);
      v123 = *(_DWORD **)(v121 + 120);
      if (v123 && *v123 > v122)
      {
        v124 = *((unsigned __int8 *)v123 + v122 + 4);
        if ((v124 - 1) < 2)
        {
LABEL_78:
          v125 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
          if (*v125 <= (v15 - 0x40000000))
          {
            __break(0xC471u);
            JUMPOUT(0x19874F854);
          }
          v28 = *(_QWORD *)&v125[2 * (v15 - 0x40000000) + 2];
          if ((v28 & 0xFFFE000000000002) != 0)
            goto LABEL_19;
          if (*(_BYTE *)(v28 + 5) != 2)
            goto LABEL_19;
          v126 = *(_QWORD *)(v28 + 8);
          if (!v126 || (v126 & 1) != 0 || (*(_BYTE *)(v126 + 16) & 0x10) == 0)
            goto LABEL_19;
          v114 = 0;
          v115 = 1;
          goto LABEL_62;
        }
        if (v124)
        {
          if (v124 != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x19874F4BCLL);
          }
          goto LABEL_19;
        }
      }
      v142 = *(_DWORD **)(v121 + 112);
      if (*v142 <= v122)
      {
        __break(0xC471u);
        JUMPOUT(0x19874F904);
      }
      v143 = *(_QWORD *)&v142[2 * v122 + 2];
      if (v143)
        v144 = (v143 & 0xFFFE000000000002) == 0;
      else
        v144 = 0;
      if (v144)
      {
        v145 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v143 & 0xFFFFFFFE) + 0x4C));
        if (v145 == &JSC::SymbolTable::s_info || v145 == &JSC::JSTemplateObjectDescriptor::s_info)
          goto LABEL_19;
      }
      goto LABEL_78;
    }
  }
  v127 = *(_DWORD **)(v107 + 112);
  if (*v127 <= v108)
  {
    __break(0xC471u);
    JUMPOUT(0x19874F8A4);
  }
  v128 = *(_QWORD *)&v127[2 * v108 + 2];
  if (v128)
    v129 = (v128 & 0xFFFE000000000002) == 0;
  else
    v129 = 0;
  if (v129)
  {
    v130 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v128 & 0xFFFFFFFE) + 0x4C));
    if (v130 == &JSC::SymbolTable::s_info || v130 == &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_18;
  }
LABEL_52:
  v111 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v111 <= v108)
  {
    __break(0xC471u);
    JUMPOUT(0x19874F814);
  }
  v28 = *(_QWORD *)&v111[2 * v108 + 2];
  if ((v28 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v28 + 5) != 2)
    goto LABEL_18;
  v112 = *(_QWORD *)(v28 + 8);
  v113 = v112 && (*(_QWORD *)(v28 + 8) & 1) == 0;
  if (!v113 || (*(_BYTE *)(v112 + 16) & 0x10) == 0)
    goto LABEL_18;
  v114 = 1;
  v115 = 0;
LABEL_62:
  JSC::JIT::compileOpStrictEq<JSC::OpNstricteq>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::{lambda(JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSString *)#1}::operator()((uint64_t)v225, v114, v115, v28, v29, v30, v31, v32);
}

void JSC::JIT::compileOpStrictEqJump<JSC::OpJstricteq>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _QWORD *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  int v84;
  unsigned int *v85;
  unsigned int v86;
  _DWORD *v87;
  unint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  int v103;
  unsigned int *v104;
  unsigned int v105;
  _DWORD *v106;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _DWORD *v111;
  int v112;
  _DWORD *v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  _DWORD *v131;
  int v132;
  _DWORD *v133;
  uint64_t v134;
  BOOL v135;
  _DWORD *v136;
  unint64_t v137;
  BOOL v138;
  char **v139;
  uint64_t v141;
  uint64_t v142;
  _DWORD *v143;
  unint64_t v144;
  BOOL v145;
  char **v146;
  _DWORD *v148;
  unint64_t v149;
  BOOL v150;
  char **v151;
  _DWORD *v153;
  unint64_t v154;
  BOOL v155;
  char **v156;
  uint64_t v158;
  uint64_t v159;
  _DWORD *v160;
  int v161;
  _DWORD *v162;
  uint64_t v163;
  uint64_t v164;
  _DWORD *v165;
  int v166;
  _DWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  int v176;
  _DWORD *v177;
  unint64_t v178;
  BOOL v179;
  char **v180;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _DWORD *v187;
  unint64_t v188;
  BOOL v189;
  char **v190;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  _DWORD *v199;
  unint64_t v200;
  BOOL v201;
  char **v202;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  int v210;
  _DWORD *v211;
  unint64_t v212;
  BOOL v213;
  char **v214;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  unsigned int v225[3];
  int v226;
  uint64_t v227;
  unsigned int v228[3];
  int v229;
  uint64_t v230;
  __int128 v231;
  int v232;
  int v233;
  uint64_t v234;
  int v235;

  v9 = *a2;
  if (v9 == 128)
  {
    v209 = *((__int16 *)a2 + 1);
    if (v209 <= 63)
      v11 = v209;
    else
      v11 = (v209 + 1073741760);
    v210 = *((__int16 *)a2 + 2);
    if (v210 <= 63)
      v13 = v210;
    else
      v13 = (v210 + 1073741760);
    LODWORD(v14) = *((__int16 *)a2 + 3);
  }
  else if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v13 = *(unsigned int *)(a2 + 6);
    LODWORD(v14) = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
    if (v12 <= 15)
      v13 = v12;
    else
      v13 = (v12 + 1073741808);
    LODWORD(v14) = (char)a2[3];
  }
  if (!(_DWORD)v14)
  {
    v118 = *(_QWORD *)(a1 + 808);
    v119 = *(_QWORD *)(v118 + 80);
    v120 = *(_QWORD *)v119;
    v121 = *(unsigned int *)(v119 + 12) + *(_QWORD *)v119;
    if (v120 > (unint64_t)a2 || v121 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198750804);
    }
    v14 = *(_QWORD *)(v118 + 144);
    if (v14)
    {
      v123 = (_DWORD)a2 - v120;
      v124 = *(_DWORD *)(v14 - 8);
      v125 = 9 * ((~(v123 << 15) + v123) ^ ((~(v123 << 15) + v123) >> 10));
      v126 = (v125 ^ (v125 >> 6)) + ~((v125 ^ (v125 >> 6)) << 11);
      v127 = v124 & (v126 ^ HIWORD(v126));
      v128 = *(_DWORD *)(v14 + 8 * v127);
      if (v128 == v123)
      {
LABEL_81:
        LODWORD(v14) = *(_DWORD *)(v14 + 8 * v127 + 4);
      }
      else
      {
        v174 = 1;
        while (v128)
        {
          v127 = ((_DWORD)v127 + v174) & v124;
          v128 = *(_DWORD *)(v14 + 8 * v127);
          ++v174;
          if (v128 == v123)
            goto LABEL_81;
        }
        LODWORD(v14) = 0;
      }
    }
  }
  v232 = v14;
  if ((int)v11 < 0x40000000)
  {
LABEL_12:
    if ((int)v13 < 0x40000000)
    {
LABEL_13:
      if ((int)v11 < 0x40000000)
      {
        v15 = ((unint64_t)v11 << 35) | 0x1D;
LABEL_15:
        JSC::MacroAssemblerARM64::load64(a1, v15, 0, a4, a5, a6, a7, a8);
LABEL_16:
        if ((int)v13 < 0x40000000)
        {
          v21 = ((unint64_t)v13 << 35) | 0x1D;
LABEL_18:
          JSC::MacroAssemblerARM64::load64(a1, v21, 1, v16, v17, v18, v19, v20);
          goto LABEL_19;
        }
        v163 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
        v164 = (v13 - 0x40000000);
        v165 = *(_DWORD **)(v163 + 120);
        if (!v165 || *v165 <= v164)
          goto LABEL_180;
        v166 = *((unsigned __int8 *)v165 + v164 + 4);
        if ((v166 - 1) < 2)
        {
LABEL_152:
          v167 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
          if (*v167 <= v164)
          {
            __break(0xC471u);
            JUMPOUT(0x198750904);
          }
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v167[2 * v164 + 2], 1, v16, v17, v18, v19, v20);
LABEL_19:
          *(_QWORD *)&v231 = a1;
          *((_QWORD *)&v231 + 1) = &v232;
          if ((int)v11 < 0x40000000)
            goto LABEL_20;
          v109 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
          v110 = (v11 - 0x40000000);
          v111 = *(_DWORD **)(v109 + 120);
          if (v111 && *v111 > v110)
          {
            v112 = *((unsigned __int8 *)v111 + v110 + 4);
            if ((v112 - 1) < 2)
            {
LABEL_63:
              v113 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
              if (*v113 <= v110)
              {
                __break(0xC471u);
                JUMPOUT(0x198750824);
              }
              v24 = *(_QWORD *)&v113[2 * v110 + 2];
              if ((v24 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v24 + 5) == 2)
              {
                v114 = *(_QWORD *)(v24 + 8);
                v115 = v114 && (*(_QWORD *)(v24 + 8) & 1) == 0;
                if (v115 && (*(_BYTE *)(v114 + 16) & 0x10) != 0)
                {
                  v116 = 1;
                  v117 = 0;
                  goto LABEL_73;
                }
              }
LABEL_20:
              if ((int)v13 < 0x40000000)
              {
LABEL_21:
                v29 = *(_DWORD *)(a1 + 200);
                if (v29 + 4 > *(_DWORD *)(a1 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v22, v23, v24, v25, v26, v27, v28);
                  v29 = *(_DWORD *)(a1 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = -1442839582;
                v30 = *(_DWORD *)(a1 + 200);
                v31 = v30 + 4;
                *(_DWORD *)(a1 + 200) = v30 + 4;
                if ((v30 + 8) > *(_DWORD *)(a1 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v22, v23, v24, v25, v26, v27, v28);
                  v31 = *(_DWORD *)(a1 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 56) + v31) = -1442774974;
                *(_DWORD *)(a1 + 200) += 4;
                JSC::MacroAssemblerARM64::branchTest64(a1, 0, 2, 28, v25, v26, v27, v28, (uint64_t)&v229);
                v36 = (_QWORD *)(a1 + 648);
                v37 = v230;
                v38 = *(_DWORD *)(a1 + 640);
                v233 = v229;
                v234 = v230;
                v235 = v38;
                v39 = *(unsigned int *)(a1 + 660);
                if ((_DWORD)v39 == *(_DWORD *)(a1 + 656))
                {
                  v168 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v39 + 1, (unint64_t)&v233);
                  v169 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
                  *(_DWORD *)v169 = *(_DWORD *)v168;
                  *(_QWORD *)(v169 + 4) = *(_QWORD *)(v168 + 4);
                  *(_DWORD *)(v169 + 12) = *(_DWORD *)(v168 + 12);
                }
                else
                {
                  v40 = *v36 + 16 * v39;
                  *(_DWORD *)v40 = v229;
                  *(_QWORD *)(v40 + 4) = v37;
                  *(_DWORD *)(v40 + 12) = v38;
                }
                ++*(_DWORD *)(a1 + 660);
                JSC::MacroAssemblerARM64::branch64(a1, 2, 0, 27, v32, v33, v34, v35, (uint64_t)v228);
                JSC::MacroAssemblerARM64::branchTest64(a1, 1, 0, 27, v41, v42, v43, v44, (uint64_t)&v226);
                v51 = v227;
                v52 = *(_DWORD *)(a1 + 640);
                v233 = v226;
                v234 = v227;
                v235 = v52;
                v53 = *(unsigned int *)(a1 + 660);
                if ((_DWORD)v53 == *(_DWORD *)(a1 + 656))
                {
                  v170 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v53 + 1, (unint64_t)&v233);
                  v171 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
                  *(_DWORD *)v171 = *(_DWORD *)v170;
                  *(_QWORD *)(v171 + 4) = *(_QWORD *)(v170 + 4);
                  *(_DWORD *)(v171 + 12) = *(_DWORD *)(v170 + 12);
                }
                else
                {
                  v54 = *v36 + 16 * v53;
                  *(_DWORD *)v54 = v226;
                  *(_QWORD *)(v54 + 4) = v51;
                  *(_DWORD *)(v54 + 12) = v52;
                }
                ++*(_DWORD *)(a1 + 660);
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v228, a1, v45, v46, v47, v48, v49, v50);
                JSC::MacroAssemblerARM64::branch64(a1, 2, 1, 27, v55, v56, v57, v58, (uint64_t)v225);
                JSC::MacroAssemblerARM64::branchTest64(a1, 1, 1, 27, v59, v60, v61, v62, (uint64_t)&v223);
                v69 = v224;
                v70 = *(_DWORD *)(a1 + 640);
                v233 = v223;
                v234 = v224;
                v235 = v70;
                v71 = *(unsigned int *)(a1 + 660);
                if ((_DWORD)v71 == *(_DWORD *)(a1 + 656))
                {
                  v172 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v71 + 1, (unint64_t)&v233);
                  v173 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
                  *(_DWORD *)v173 = *(_DWORD *)v172;
                  *(_QWORD *)(v173 + 4) = *(_QWORD *)(v172 + 4);
                  *(_DWORD *)(v173 + 12) = *(_DWORD *)(v172 + 12);
                }
                else
                {
                  v72 = *v36 + 16 * v71;
                  *(_DWORD *)v72 = v223;
                  *(_QWORD *)(v72 + 4) = v69;
                  *(_DWORD *)(v72 + 12) = v70;
                }
                ++*(_DWORD *)(a1 + 660);
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v225, a1, v63, v64, v65, v66, v67, v68);
                JSC::MacroAssemblerARM64::branch64(a1, 0, 1, 0, v73, v74, v75, v76, (uint64_t)&v221);
                v77 = v232;
                v78 = (_QWORD *)(a1 + 624);
                v79 = v221;
                v80 = v222;
                goto LABEL_45;
              }
              v129 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
              v130 = (v13 - 0x40000000);
              v131 = *(_DWORD **)(v129 + 120);
              if (v131 && *v131 > v130)
              {
                v132 = *((unsigned __int8 *)v131 + v130 + 4);
                if ((v132 - 1) < 2)
                {
LABEL_85:
                  v133 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
                  if (*v133 <= v130)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198750864);
                  }
                  v24 = *(_QWORD *)&v133[2 * v130 + 2];
                  if ((v24 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v24 + 5) != 2)
                    goto LABEL_21;
                  v134 = *(_QWORD *)(v24 + 8);
                  v135 = v134 && (*(_QWORD *)(v24 + 8) & 1) == 0;
                  if (!v135 || (*(_BYTE *)(v134 + 16) & 0x10) == 0)
                    goto LABEL_21;
                  v116 = 0;
                  v117 = 1;
LABEL_73:
                  JSC::JIT::compileOpStrictEqJump<JSC::OpJstricteq>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::{lambda(JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSString *)#1}::operator()((uint64_t)&v231, v116, v117, v24, v25, v26, v27, v28);
                  return;
                }
                if (v132)
                {
                  if (v132 != 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1987506E4);
                  }
                  goto LABEL_21;
                }
              }
              v153 = *(_DWORD **)(v129 + 112);
              if (*v153 <= v130)
              {
                __break(0xC471u);
                JUMPOUT(0x1987508C4);
              }
              v154 = *(_QWORD *)&v153[2 * v130 + 2];
              if (v154)
                v155 = (v154 & 0xFFFE000000000002) == 0;
              else
                v155 = 0;
              if (v155)
              {
                v156 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v154 & 0xFFFFFFFE) + 0x4C));
                if (v156 == &JSC::SymbolTable::s_info || v156 == &JSC::JSTemplateObjectDescriptor::s_info)
                  goto LABEL_21;
              }
              goto LABEL_85;
            }
            if (v112)
            {
              if (v112 != 3)
              {
                __break(0xC471u);
                JUMPOUT(0x1987506BCLL);
              }
              goto LABEL_20;
            }
          }
          v148 = *(_DWORD **)(v109 + 112);
          if (*v148 <= v110)
          {
            __break(0xC471u);
            JUMPOUT(0x1987508A4);
          }
          v149 = *(_QWORD *)&v148[2 * v110 + 2];
          if (v149)
            v150 = (v149 & 0xFFFE000000000002) == 0;
          else
            v150 = 0;
          if (v150)
          {
            v151 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v149 & 0xFFFFFFFE) + 0x4C));
            if (v151 == &JSC::SymbolTable::s_info || v151 == &JSC::JSTemplateObjectDescriptor::s_info)
              goto LABEL_20;
          }
          goto LABEL_63;
        }
        if (v166)
        {
          if (v166 != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x198750734);
          }
        }
        else
        {
LABEL_180:
          v187 = *(_DWORD **)(v163 + 112);
          if (*v187 <= v164)
          {
            __break(0xC471u);
            JUMPOUT(0x198750964);
          }
          v188 = *(_QWORD *)&v187[2 * v164 + 2];
          if (v188)
            v189 = (v188 & 0xFFFE000000000002) == 0;
          else
            v189 = 0;
          if (!v189)
            goto LABEL_152;
          v190 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v188 & 0xFFFFFFFE) + 0x4C));
          if (v190 != &JSC::SymbolTable::s_info && v190 != &JSC::JSTemplateObjectDescriptor::s_info)
            goto LABEL_152;
        }
        JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v16, v17, v18, v19, v20);
        JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v192, v193, v194, v195, v196);
        v21 = (v13 << 35) | 1;
        goto LABEL_18;
      }
      v158 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
      v159 = (v11 - 0x40000000);
      v160 = *(_DWORD **)(v158 + 120);
      if (!v160 || *v160 <= v159)
        goto LABEL_167;
      v161 = *((unsigned __int8 *)v160 + v159 + 4);
      if ((v161 - 1) < 2)
      {
LABEL_147:
        v162 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
        if (*v162 <= v159)
        {
          __break(0xC471u);
          JUMPOUT(0x1987508E4);
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v162[2 * v159 + 2], 0, a4, a5, a6, a7, a8);
        goto LABEL_16;
      }
      if (v161)
      {
        if (v161 != 3)
        {
          __break(0xC471u);
          JUMPOUT(0x19875070CLL);
        }
      }
      else
      {
LABEL_167:
        v177 = *(_DWORD **)(v158 + 112);
        if (*v177 <= v159)
        {
          __break(0xC471u);
          JUMPOUT(0x198750944);
        }
        v178 = *(_QWORD *)&v177[2 * v159 + 2];
        if (v178)
          v179 = (v178 & 0xFFFE000000000002) == 0;
        else
          v179 = 0;
        if (!v179)
          goto LABEL_147;
        v180 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v178 & 0xFFFFFFFE) + 0x4C));
        if (v180 != &JSC::SymbolTable::s_info && v180 != &JSC::JSTemplateObjectDescriptor::s_info)
          goto LABEL_147;
      }
      JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v182, v183, v184, v185, v186);
      v15 = v11 << 35;
      goto LABEL_15;
    }
    v100 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
    v101 = (v13 - 0x40000000);
    v102 = *(_DWORD **)(v100 + 120);
    if (v102 && *v102 > v101)
    {
      v103 = *((unsigned __int8 *)v102 + v101 + 4);
      if ((v103 - 1) < 2)
      {
LABEL_51:
        v104 = *(unsigned int **)(*(_QWORD *)(a1 + 808) + 112);
        v105 = *v104;
        if (*v104 <= v101)
        {
          __break(0xC471u);
          JUMPOUT(0x1987507BCLL);
        }
        v106 = v104 + 2;
        v88 = *(_QWORD *)&v106[2 * v101];
        if (v88 > 0xA || ((1 << v88) & 0x4C4) == 0)
          goto LABEL_13;
        if ((int)v11 < 0x40000000)
        {
          v108 = ((unint64_t)v11 << 35) | 0x1D;
LABEL_58:
          JSC::MacroAssemblerARM64::load64(a1, v108, 0, a4, a5, a6, a7, a8);
LABEL_59:
          v95 = a1;
          v96 = 0;
          goto LABEL_44;
        }
        v197 = (v11 - 0x40000000);
        if (!v102 || *v102 <= v197)
          goto LABEL_218;
        v198 = *((unsigned __int8 *)v102 + v197 + 4);
        if ((v198 - 1) < 2)
        {
LABEL_195:
          if (v105 <= v197)
          {
            __break(0xC471u);
            JUMPOUT(0x198750984);
          }
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v106[2 * v197], 0, a4, a5, a6, a7, a8);
          goto LABEL_59;
        }
        if (v198)
        {
          if (v198 != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1987507E4);
          }
        }
        else
        {
LABEL_218:
          v211 = *(_DWORD **)(v100 + 112);
          if (*v211 <= v197)
          {
            __break(0xC471u);
            JUMPOUT(0x1987509C4);
          }
          v212 = *(_QWORD *)&v211[2 * v197 + 2];
          if (v212)
            v213 = (v212 & 0xFFFE000000000002) == 0;
          else
            v213 = 0;
          if (!v213)
            goto LABEL_195;
          v214 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v212 & 0xFFFFFFFE) + 0x4C));
          if (v214 != &JSC::SymbolTable::s_info && v214 != &JSC::JSTemplateObjectDescriptor::s_info)
            goto LABEL_195;
        }
        JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
        JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v216, v217, v218, v219, v220);
        v108 = v11 << 35;
        goto LABEL_58;
      }
      if (*((_BYTE *)v102 + v101 + 4))
      {
        if (v103 != 3)
        {
          __break(0xC471u);
          JUMPOUT(0x198750694);
        }
        goto LABEL_13;
      }
    }
    v143 = *(_DWORD **)(v100 + 112);
    if (*v143 <= v101)
    {
      __break(0xC471u);
      JUMPOUT(0x198750884);
    }
    v144 = *(_QWORD *)&v143[2 * v101 + 2];
    if (v144)
      v145 = (v144 & 0xFFFE000000000002) == 0;
    else
      v145 = 0;
    if (v145)
    {
      v146 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v144 & 0xFFFFFFFE) + 0x4C));
      if (v146 == &JSC::SymbolTable::s_info || v146 == &JSC::JSTemplateObjectDescriptor::s_info)
        goto LABEL_13;
    }
    goto LABEL_51;
  }
  v81 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v82 = (v11 - 0x40000000);
  v83 = *(_DWORD **)(v81 + 120);
  if (v83 && *v83 > v82)
  {
    v84 = *((unsigned __int8 *)v83 + v82 + 4);
    if ((v84 - 1) < 2)
      goto LABEL_35;
    if (*((_BYTE *)v83 + v82 + 4))
    {
      if (v84 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19875066CLL);
      }
      goto LABEL_12;
    }
  }
  v136 = *(_DWORD **)(v81 + 112);
  if (*v136 <= v82)
  {
    __break(0xC471u);
    JUMPOUT(0x198750844);
  }
  v137 = *(_QWORD *)&v136[2 * v82 + 2];
  if (v137)
    v138 = (v137 & 0xFFFE000000000002) == 0;
  else
    v138 = 0;
  if (v138)
  {
    v139 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v137 & 0xFFFFFFFE) + 0x4C));
    if (v139 == &JSC::SymbolTable::s_info || v139 == &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_12;
  }
LABEL_35:
  v85 = *(unsigned int **)(*(_QWORD *)(a1 + 808) + 112);
  v86 = *v85;
  if (*v85 <= v82)
  {
    __break(0xC471u);
    JUMPOUT(0x198750774);
  }
  v87 = v85 + 2;
  v88 = *(_QWORD *)&v87[2 * v82];
  if (v88 > 0xA || ((1 << v88) & 0x4C4) == 0)
    goto LABEL_12;
  if ((int)v13 >= 0x40000000)
  {
    v175 = (v13 - 0x40000000);
    if (!v83 || *v83 <= v175)
      goto LABEL_198;
    v176 = *((unsigned __int8 *)v83 + v175 + 4);
    if ((v176 - 1) < 2)
    {
LABEL_164:
      if (v86 <= v175)
      {
        __break(0xC471u);
        JUMPOUT(0x198750924);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v87[2 * v175], 1, a4, a5, a6, a7, a8);
      goto LABEL_43;
    }
    if (v176)
    {
      if (v176 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19875079CLL);
      }
    }
    else
    {
LABEL_198:
      v199 = *(_DWORD **)(v81 + 112);
      if (*v199 <= v175)
      {
        __break(0xC471u);
        JUMPOUT(0x1987509A4);
      }
      v200 = *(_QWORD *)&v199[2 * v175 + 2];
      if (v200)
        v201 = (v200 & 0xFFFE000000000002) == 0;
      else
        v201 = 0;
      if (!v201)
        goto LABEL_164;
      v202 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v200 & 0xFFFFFFFE) + 0x4C));
      if (v202 != &JSC::SymbolTable::s_info && v202 != &JSC::JSTemplateObjectDescriptor::s_info)
        goto LABEL_164;
    }
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v204, v205, v206, v207, v208);
    v90 = (v13 << 35) | 1;
    goto LABEL_42;
  }
  v90 = (v13 << 35) | 0x1D;
LABEL_42:
  JSC::MacroAssemblerARM64::load64(a1, v90, 1, a4, a5, a6, a7, a8);
LABEL_43:
  v95 = a1;
  v96 = 1;
LABEL_44:
  JSC::MacroAssemblerARM64::branch64(v95, 0, v96, v88, v91, v92, v93, v94, (uint64_t)&v231);
  v77 = v232;
  v78 = (_QWORD *)(a1 + 624);
  v79 = v231;
  v80 = *(_QWORD *)((char *)&v231 + 4);
LABEL_45:
  v97 = v77 + (*(_DWORD *)(a1 + 640) >> 2);
  v233 = v79;
  v234 = v80;
  v235 = v97;
  v98 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v98 == *(_DWORD *)(a1 + 632))
  {
    v141 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v78, v98 + 1, (unint64_t)&v233);
    v142 = *(_QWORD *)(a1 + 624) + 16 * *(unsigned int *)(a1 + 636);
    *(_DWORD *)v142 = *(_DWORD *)v141;
    *(_QWORD *)(v142 + 4) = *(_QWORD *)(v141 + 4);
    *(_DWORD *)(v142 + 12) = *(_DWORD *)(v141 + 12);
  }
  else
  {
    v99 = *v78 + 16 * v98;
    *(_DWORD *)v99 = v79;
    *(_QWORD *)(v99 + 4) = v80;
    *(_DWORD *)(v99 + 12) = v97;
  }
  ++*(_DWORD *)(a1 + 636);
}

void JSC::JIT::compileOpStrictEqJump<JSC::OpJnstricteq>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _QWORD *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  int v84;
  unsigned int *v85;
  unsigned int v86;
  _DWORD *v87;
  unint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  int v103;
  unsigned int *v104;
  unsigned int v105;
  _DWORD *v106;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _DWORD *v111;
  int v112;
  _DWORD *v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  unint64_t v119;
  BOOL v120;
  char **v121;
  uint64_t v123;
  uint64_t v124;
  _DWORD *v125;
  int v126;
  _DWORD *v127;
  uint64_t v128;
  BOOL v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  int v140;
  _DWORD *v141;
  unint64_t v142;
  BOOL v143;
  char **v144;
  uint64_t v146;
  uint64_t v147;
  _DWORD *v148;
  unint64_t v149;
  BOOL v150;
  char **v151;
  int v153;
  int v154;
  _DWORD *v155;
  unint64_t v156;
  BOOL v157;
  char **v158;
  uint64_t v160;
  uint64_t v161;
  _DWORD *v162;
  int v163;
  _DWORD *v164;
  uint64_t v165;
  uint64_t v166;
  _DWORD *v167;
  int v168;
  _DWORD *v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  int v180;
  _DWORD *v181;
  unint64_t v182;
  BOOL v183;
  char **v184;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _DWORD *v191;
  unint64_t v192;
  BOOL v193;
  char **v194;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _DWORD *v201;
  unint64_t v202;
  BOOL v203;
  char **v204;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _DWORD *v211;
  unint64_t v212;
  BOOL v213;
  char **v214;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  unsigned int v225[3];
  int v226;
  uint64_t v227;
  unsigned int v228[3];
  int v229;
  uint64_t v230;
  __int128 v231;
  int v232;
  int v233;
  uint64_t v234;
  int v235;

  v9 = *a2;
  if (v9 == 128)
  {
    v153 = *((__int16 *)a2 + 1);
    if (v153 <= 63)
      v11 = v153;
    else
      v11 = (v153 + 1073741760);
    v154 = *((__int16 *)a2 + 2);
    if (v154 <= 63)
      v13 = v154;
    else
      v13 = (v154 + 1073741760);
    LODWORD(v14) = *((__int16 *)a2 + 3);
  }
  else if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v13 = *(unsigned int *)(a2 + 6);
    LODWORD(v14) = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
    if (v12 <= 15)
      v13 = v12;
    else
      v13 = (v12 + 1073741808);
    LODWORD(v14) = (char)a2[3];
  }
  if (!(_DWORD)v14)
  {
    v130 = *(_QWORD *)(a1 + 808);
    v131 = *(_QWORD *)(v130 + 80);
    v132 = *(_QWORD *)v131;
    v133 = *(unsigned int *)(v131 + 12) + *(_QWORD *)v131;
    if (v132 > (unint64_t)a2 || v133 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198751864);
    }
    v14 = *(_QWORD *)(v130 + 144);
    if (v14)
    {
      v135 = (_DWORD)a2 - v132;
      v136 = *(_DWORD *)(v14 - 8);
      v137 = 9 * ((~(v135 << 15) + v135) ^ ((~(v135 << 15) + v135) >> 10));
      v138 = (v137 ^ (v137 >> 6)) + ~((v137 ^ (v137 >> 6)) << 11);
      v139 = v136 & (v138 ^ HIWORD(v138));
      v140 = *(_DWORD *)(v14 + 8 * v139);
      if (v140 == v135)
      {
LABEL_106:
        LODWORD(v14) = *(_DWORD *)(v14 + 8 * v139 + 4);
      }
      else
      {
        v170 = 1;
        while (v140)
        {
          v139 = ((_DWORD)v139 + v170) & v136;
          v140 = *(_DWORD *)(v14 + 8 * v139);
          ++v170;
          if (v140 == v135)
            goto LABEL_106;
        }
        LODWORD(v14) = 0;
      }
    }
  }
  v232 = v14;
  if ((int)v11 < 0x40000000)
  {
LABEL_12:
    if ((int)v13 < 0x40000000)
    {
LABEL_13:
      if ((int)v11 < 0x40000000)
      {
        v15 = ((unint64_t)v11 << 35) | 0x1D;
LABEL_15:
        JSC::MacroAssemblerARM64::load64(a1, v15, 0, a4, a5, a6, a7, a8);
LABEL_16:
        if ((int)v13 < 0x40000000)
        {
          v21 = ((unint64_t)v13 << 35) | 0x1D;
LABEL_18:
          JSC::MacroAssemblerARM64::load64(a1, v21, 1, v16, v17, v18, v19, v20);
          goto LABEL_19;
        }
        v165 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
        v166 = (v13 - 0x40000000);
        v167 = *(_DWORD **)(v165 + 120);
        if (!v167 || *v167 <= v166)
          goto LABEL_192;
        v168 = *((unsigned __int8 *)v167 + v166 + 4);
        if ((v168 - 1) < 2)
        {
LABEL_159:
          v169 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
          if (*v169 <= v166)
          {
            __break(0xC471u);
            JUMPOUT(0x198751924);
          }
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v169[2 * v166 + 2], 1, v16, v17, v18, v19, v20);
LABEL_19:
          *(_QWORD *)&v231 = a1;
          *((_QWORD *)&v231 + 1) = &v232;
          if ((int)v11 < 0x40000000)
            goto LABEL_20;
          v109 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
          v110 = (v11 - 0x40000000);
          v111 = *(_DWORD **)(v109 + 120);
          if (v111 && *v111 > v110)
          {
            v112 = *((unsigned __int8 *)v111 + v110 + 4);
            if ((v112 - 1) < 2)
            {
LABEL_63:
              v113 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
              if (*v113 <= v110)
              {
                __break(0xC471u);
                JUMPOUT(0x198751824);
              }
              v24 = *(_QWORD *)&v113[2 * v110 + 2];
              if ((v24 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v24 + 5) == 2)
              {
                v114 = *(_QWORD *)(v24 + 8);
                v115 = v114 && (*(_QWORD *)(v24 + 8) & 1) == 0;
                if (v115 && (*(_BYTE *)(v114 + 16) & 0x10) != 0)
                {
                  v116 = 1;
                  v117 = 0;
                  goto LABEL_73;
                }
              }
LABEL_20:
              if ((int)v13 < 0x40000000)
              {
LABEL_21:
                v29 = *(_DWORD *)(a1 + 200);
                if (v29 + 4 > *(_DWORD *)(a1 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v22, v23, v24, v25, v26, v27, v28);
                  v29 = *(_DWORD *)(a1 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = -1442839582;
                v30 = *(_DWORD *)(a1 + 200);
                v31 = v30 + 4;
                *(_DWORD *)(a1 + 200) = v30 + 4;
                if ((v30 + 8) > *(_DWORD *)(a1 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v22, v23, v24, v25, v26, v27, v28);
                  v31 = *(_DWORD *)(a1 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 56) + v31) = -1442774974;
                *(_DWORD *)(a1 + 200) += 4;
                JSC::MacroAssemblerARM64::branchTest64(a1, 0, 2, 28, v25, v26, v27, v28, (uint64_t)&v229);
                v36 = (_QWORD *)(a1 + 648);
                v37 = v230;
                v38 = *(_DWORD *)(a1 + 640);
                v233 = v229;
                v234 = v230;
                v235 = v38;
                v39 = *(unsigned int *)(a1 + 660);
                if ((_DWORD)v39 == *(_DWORD *)(a1 + 656))
                {
                  v171 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v39 + 1, (unint64_t)&v233);
                  v172 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
                  *(_DWORD *)v172 = *(_DWORD *)v171;
                  *(_QWORD *)(v172 + 4) = *(_QWORD *)(v171 + 4);
                  *(_DWORD *)(v172 + 12) = *(_DWORD *)(v171 + 12);
                }
                else
                {
                  v40 = *v36 + 16 * v39;
                  *(_DWORD *)v40 = v229;
                  *(_QWORD *)(v40 + 4) = v37;
                  *(_DWORD *)(v40 + 12) = v38;
                }
                ++*(_DWORD *)(a1 + 660);
                JSC::MacroAssemblerARM64::branch64(a1, 2, 0, 27, v32, v33, v34, v35, (uint64_t)v228);
                JSC::MacroAssemblerARM64::branchTest64(a1, 1, 0, 27, v41, v42, v43, v44, (uint64_t)&v226);
                v51 = v227;
                v52 = *(_DWORD *)(a1 + 640);
                v233 = v226;
                v234 = v227;
                v235 = v52;
                v53 = *(unsigned int *)(a1 + 660);
                if ((_DWORD)v53 == *(_DWORD *)(a1 + 656))
                {
                  v173 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v53 + 1, (unint64_t)&v233);
                  v174 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
                  *(_DWORD *)v174 = *(_DWORD *)v173;
                  *(_QWORD *)(v174 + 4) = *(_QWORD *)(v173 + 4);
                  *(_DWORD *)(v174 + 12) = *(_DWORD *)(v173 + 12);
                }
                else
                {
                  v54 = *v36 + 16 * v53;
                  *(_DWORD *)v54 = v226;
                  *(_QWORD *)(v54 + 4) = v51;
                  *(_DWORD *)(v54 + 12) = v52;
                }
                ++*(_DWORD *)(a1 + 660);
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v228, a1, v45, v46, v47, v48, v49, v50);
                JSC::MacroAssemblerARM64::branch64(a1, 2, 1, 27, v55, v56, v57, v58, (uint64_t)v225);
                JSC::MacroAssemblerARM64::branchTest64(a1, 1, 1, 27, v59, v60, v61, v62, (uint64_t)&v223);
                v69 = v224;
                v70 = *(_DWORD *)(a1 + 640);
                v233 = v223;
                v234 = v224;
                v235 = v70;
                v71 = *(unsigned int *)(a1 + 660);
                if ((_DWORD)v71 == *(_DWORD *)(a1 + 656))
                {
                  v175 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v71 + 1, (unint64_t)&v233);
                  v176 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
                  *(_DWORD *)v176 = *(_DWORD *)v175;
                  *(_QWORD *)(v176 + 4) = *(_QWORD *)(v175 + 4);
                  *(_DWORD *)(v176 + 12) = *(_DWORD *)(v175 + 12);
                }
                else
                {
                  v72 = *v36 + 16 * v71;
                  *(_DWORD *)v72 = v223;
                  *(_QWORD *)(v72 + 4) = v69;
                  *(_DWORD *)(v72 + 12) = v70;
                }
                ++*(_DWORD *)(a1 + 660);
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v225, a1, v63, v64, v65, v66, v67, v68);
                JSC::MacroAssemblerARM64::branch64(a1, 1, 1, 0, v73, v74, v75, v76, (uint64_t)&v221);
                v77 = v232;
                v78 = (_QWORD *)(a1 + 624);
                v79 = v221;
                v80 = v222;
                goto LABEL_45;
              }
              v123 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
              v124 = (v13 - 0x40000000);
              v125 = *(_DWORD **)(v123 + 120);
              if (v125 && *v125 > v124)
              {
                v126 = *((unsigned __int8 *)v125 + v124 + 4);
                if ((v126 - 1) < 2)
                {
LABEL_89:
                  v127 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
                  if (*v127 <= v124)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198751884);
                  }
                  v24 = *(_QWORD *)&v127[2 * v124 + 2];
                  if ((v24 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v24 + 5) != 2)
                    goto LABEL_21;
                  v128 = *(_QWORD *)(v24 + 8);
                  v129 = v128 && (*(_QWORD *)(v24 + 8) & 1) == 0;
                  if (!v129 || (*(_BYTE *)(v128 + 16) & 0x10) == 0)
                    goto LABEL_21;
                  v116 = 0;
                  v117 = 1;
LABEL_73:
                  JSC::JIT::compileOpStrictEqJump<JSC::OpJnstricteq>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*)::{lambda(JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSString *)#1}::operator()((uint64_t)&v231, v116, v117, v24, v25, v26, v27, v28);
                  return;
                }
                if (v126)
                {
                  if (v126 != 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198751704);
                  }
                  goto LABEL_21;
                }
              }
              v155 = *(_DWORD **)(v123 + 112);
              if (*v155 <= v124)
              {
                __break(0xC471u);
                JUMPOUT(0x1987518E4);
              }
              v156 = *(_QWORD *)&v155[2 * v124 + 2];
              if (v156)
                v157 = (v156 & 0xFFFE000000000002) == 0;
              else
                v157 = 0;
              if (v157)
              {
                v158 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v156 & 0xFFFFFFFE) + 0x4C));
                if (v158 == &JSC::SymbolTable::s_info || v158 == &JSC::JSTemplateObjectDescriptor::s_info)
                  goto LABEL_21;
              }
              goto LABEL_89;
            }
            if (v112)
            {
              if (v112 != 3)
              {
                __break(0xC471u);
                JUMPOUT(0x1987516DCLL);
              }
              goto LABEL_20;
            }
          }
          v148 = *(_DWORD **)(v109 + 112);
          if (*v148 <= v110)
          {
            __break(0xC471u);
            JUMPOUT(0x1987518C4);
          }
          v149 = *(_QWORD *)&v148[2 * v110 + 2];
          if (v149)
            v150 = (v149 & 0xFFFE000000000002) == 0;
          else
            v150 = 0;
          if (v150)
          {
            v151 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v149 & 0xFFFFFFFE) + 0x4C));
            if (v151 == &JSC::SymbolTable::s_info || v151 == &JSC::JSTemplateObjectDescriptor::s_info)
              goto LABEL_20;
          }
          goto LABEL_63;
        }
        if (v168)
        {
          if (v168 != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x198751754);
          }
        }
        else
        {
LABEL_192:
          v191 = *(_DWORD **)(v165 + 112);
          if (*v191 <= v166)
          {
            __break(0xC471u);
            JUMPOUT(0x1987519A4);
          }
          v192 = *(_QWORD *)&v191[2 * v166 + 2];
          if (v192)
            v193 = (v192 & 0xFFFE000000000002) == 0;
          else
            v193 = 0;
          if (!v193)
            goto LABEL_159;
          v194 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v192 & 0xFFFFFFFE) + 0x4C));
          if (v194 != &JSC::SymbolTable::s_info && v194 != &JSC::JSTemplateObjectDescriptor::s_info)
            goto LABEL_159;
        }
        JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v16, v17, v18, v19, v20);
        JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v196, v197, v198, v199, v200);
        v21 = (v13 << 35) | 1;
        goto LABEL_18;
      }
      v160 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
      v161 = (v11 - 0x40000000);
      v162 = *(_DWORD **)(v160 + 120);
      if (!v162 || *v162 <= v161)
        goto LABEL_179;
      v163 = *((unsigned __int8 *)v162 + v161 + 4);
      if ((v163 - 1) < 2)
      {
LABEL_154:
        v164 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
        if (*v164 <= v161)
        {
          __break(0xC471u);
          JUMPOUT(0x198751904);
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v164[2 * v161 + 2], 0, a4, a5, a6, a7, a8);
        goto LABEL_16;
      }
      if (v163)
      {
        if (v163 != 3)
        {
          __break(0xC471u);
          JUMPOUT(0x19875172CLL);
        }
      }
      else
      {
LABEL_179:
        v181 = *(_DWORD **)(v160 + 112);
        if (*v181 <= v161)
        {
          __break(0xC471u);
          JUMPOUT(0x198751984);
        }
        v182 = *(_QWORD *)&v181[2 * v161 + 2];
        if (v182)
          v183 = (v182 & 0xFFFE000000000002) == 0;
        else
          v183 = 0;
        if (!v183)
          goto LABEL_154;
        v184 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v182 & 0xFFFFFFFE) + 0x4C));
        if (v184 != &JSC::SymbolTable::s_info && v184 != &JSC::JSTemplateObjectDescriptor::s_info)
          goto LABEL_154;
      }
      JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v186, v187, v188, v189, v190);
      v15 = v11 << 35;
      goto LABEL_15;
    }
    v100 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
    v101 = (v13 - 0x40000000);
    v102 = *(_DWORD **)(v100 + 120);
    if (v102 && *v102 > v101)
    {
      v103 = *((unsigned __int8 *)v102 + v101 + 4);
      if ((v103 - 1) < 2)
      {
LABEL_51:
        v104 = *(unsigned int **)(*(_QWORD *)(a1 + 808) + 112);
        v105 = *v104;
        if (*v104 <= v101)
        {
          __break(0xC471u);
          JUMPOUT(0x1987517DCLL);
        }
        v106 = v104 + 2;
        v88 = *(_QWORD *)&v106[2 * v101];
        if (v88 > 0xA || ((1 << v88) & 0x4C4) == 0)
          goto LABEL_13;
        if ((int)v11 < 0x40000000)
        {
          v108 = ((unint64_t)v11 << 35) | 0x1D;
LABEL_58:
          JSC::MacroAssemblerARM64::load64(a1, v108, 0, a4, a5, a6, a7, a8);
LABEL_59:
          v95 = a1;
          v96 = 0;
          goto LABEL_44;
        }
        v179 = (v11 - 0x40000000);
        if (!v102 || *v102 <= v179)
          goto LABEL_218;
        v180 = *((unsigned __int8 *)v102 + v179 + 4);
        if ((v180 - 1) < 2)
        {
LABEL_176:
          if (v105 <= v179)
          {
            __break(0xC471u);
            JUMPOUT(0x198751964);
          }
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v106[2 * v179], 0, a4, a5, a6, a7, a8);
          goto LABEL_59;
        }
        if (v180)
        {
          if (v180 != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x198751804);
          }
        }
        else
        {
LABEL_218:
          v211 = *(_DWORD **)(v100 + 112);
          if (*v211 <= v179)
          {
            __break(0xC471u);
            JUMPOUT(0x1987519E4);
          }
          v212 = *(_QWORD *)&v211[2 * v179 + 2];
          if (v212)
            v213 = (v212 & 0xFFFE000000000002) == 0;
          else
            v213 = 0;
          if (!v213)
            goto LABEL_176;
          v214 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v212 & 0xFFFFFFFE) + 0x4C));
          if (v214 != &JSC::SymbolTable::s_info && v214 != &JSC::JSTemplateObjectDescriptor::s_info)
            goto LABEL_176;
        }
        JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
        JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v216, v217, v218, v219, v220);
        v108 = v11 << 35;
        goto LABEL_58;
      }
      if (*((_BYTE *)v102 + v101 + 4))
      {
        if (v103 != 3)
        {
          __break(0xC471u);
          JUMPOUT(0x1987516B4);
        }
        goto LABEL_13;
      }
    }
    v141 = *(_DWORD **)(v100 + 112);
    if (*v141 <= v101)
    {
      __break(0xC471u);
      JUMPOUT(0x1987518A4);
    }
    v142 = *(_QWORD *)&v141[2 * v101 + 2];
    if (v142)
      v143 = (v142 & 0xFFFE000000000002) == 0;
    else
      v143 = 0;
    if (v143)
    {
      v144 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v142 & 0xFFFFFFFE) + 0x4C));
      if (v144 == &JSC::SymbolTable::s_info || v144 == &JSC::JSTemplateObjectDescriptor::s_info)
        goto LABEL_13;
    }
    goto LABEL_51;
  }
  v81 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v82 = (v11 - 0x40000000);
  v83 = *(_DWORD **)(v81 + 120);
  if (v83 && *v83 > v82)
  {
    v84 = *((unsigned __int8 *)v83 + v82 + 4);
    if ((v84 - 1) < 2)
      goto LABEL_35;
    if (*((_BYTE *)v83 + v82 + 4))
    {
      if (v84 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19875168CLL);
      }
      goto LABEL_12;
    }
  }
  v118 = *(_DWORD **)(v81 + 112);
  if (*v118 <= v82)
  {
    __break(0xC471u);
    JUMPOUT(0x198751844);
  }
  v119 = *(_QWORD *)&v118[2 * v82 + 2];
  if (v119)
    v120 = (v119 & 0xFFFE000000000002) == 0;
  else
    v120 = 0;
  if (v120)
  {
    v121 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v119 & 0xFFFFFFFE) + 0x4C));
    if (v121 == &JSC::SymbolTable::s_info || v121 == &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_12;
  }
LABEL_35:
  v85 = *(unsigned int **)(*(_QWORD *)(a1 + 808) + 112);
  v86 = *v85;
  if (*v85 <= v82)
  {
    __break(0xC471u);
    JUMPOUT(0x198751774);
  }
  v87 = v85 + 2;
  v88 = *(_QWORD *)&v87[2 * v82];
  if (v88 > 0xA || ((1 << v88) & 0x4C4) == 0)
    goto LABEL_12;
  if ((int)v13 >= 0x40000000)
  {
    v177 = (v13 - 0x40000000);
    if (!v83 || *v83 <= v177)
      goto LABEL_205;
    v178 = *((unsigned __int8 *)v83 + v177 + 4);
    if ((v178 - 1) < 2)
    {
LABEL_171:
      if (v86 <= v177)
      {
        __break(0xC471u);
        JUMPOUT(0x198751944);
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v87[2 * v177], 1, a4, a5, a6, a7, a8);
      goto LABEL_43;
    }
    if (v178)
    {
      if (v178 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987517BCLL);
      }
    }
    else
    {
LABEL_205:
      v201 = *(_DWORD **)(v81 + 112);
      if (*v201 <= v177)
      {
        __break(0xC471u);
        JUMPOUT(0x1987519C4);
      }
      v202 = *(_QWORD *)&v201[2 * v177 + 2];
      if (v202)
        v203 = (v202 & 0xFFFE000000000002) == 0;
      else
        v203 = 0;
      if (!v203)
        goto LABEL_171;
      v204 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v202 & 0xFFFFFFFE) + 0x4C));
      if (v204 != &JSC::SymbolTable::s_info && v204 != &JSC::JSTemplateObjectDescriptor::s_info)
        goto LABEL_171;
    }
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v206, v207, v208, v209, v210);
    v90 = (v13 << 35) | 1;
    goto LABEL_42;
  }
  v90 = (v13 << 35) | 0x1D;
LABEL_42:
  JSC::MacroAssemblerARM64::load64(a1, v90, 1, a4, a5, a6, a7, a8);
LABEL_43:
  v95 = a1;
  v96 = 1;
LABEL_44:
  JSC::MacroAssemblerARM64::branch64(v95, 1, v96, v88, v91, v92, v93, v94, (uint64_t)&v231);
  v77 = v232;
  v78 = (_QWORD *)(a1 + 624);
  v79 = v231;
  v80 = *(_QWORD *)((char *)&v231 + 4);
LABEL_45:
  v97 = v77 + (*(_DWORD *)(a1 + 640) >> 2);
  v233 = v79;
  v234 = v80;
  v235 = v97;
  v98 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v98 == *(_DWORD *)(a1 + 632))
  {
    v146 = WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v78, v98 + 1, (unint64_t)&v233);
    v147 = *(_QWORD *)(a1 + 624) + 16 * *(unsigned int *)(a1 + 636);
    *(_DWORD *)v147 = *(_DWORD *)v146;
    *(_QWORD *)(v147 + 4) = *(_QWORD *)(v146 + 4);
    *(_DWORD *)(v147 + 12) = *(_DWORD *)(v146 + 12);
  }
  else
  {
    v99 = *v78 + 16 * v98;
    *(_DWORD *)v99 = v79;
    *(_QWORD *)(v99 + 4) = v80;
    *(_DWORD *)(v99 + 12) = v97;
  }
  ++*(_DWORD *)(a1 + 636);
}

unsigned int *JSC::JIT::emitSlow_op_jstricteq(uint64_t a1, unsigned __int8 *a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45[3];
  int v46;

  JSC::JIT::linkAllSlowCases(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  v17 = *a2;
  if (v17 == 128)
  {
    v18 = *((__int16 *)a2 + 3);
  }
  else if (v17 == 130)
  {
    v18 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v18 = (char)a2[3];
  }
  if (!v18)
  {
    v32 = *(_QWORD *)(a1 + 808);
    v33 = *(_QWORD *)(v32 + 80);
    v34 = *(_QWORD *)v33;
    v35 = *(unsigned int *)(v33 + 12) + *(_QWORD *)v33;
    if (v34 > (unint64_t)a2 || v35 <= (unint64_t)a2)
    {
      __break(0xC471u);
      goto LABEL_25;
    }
    v37 = *(_QWORD *)(v32 + 144);
    if (v37)
    {
      v38 = (_DWORD)a2 - v34;
      v39 = *(_DWORD *)(v37 - 8);
      v40 = 9 * ((~(v38 << 15) + v38) ^ ((~(v38 << 15) + v38) >> 10));
      v41 = (v40 ^ (v40 >> 6)) + ~((v40 ^ (v40 >> 6)) << 11);
      v42 = v39 & (v41 ^ HIWORD(v41));
      v43 = *(_DWORD *)(v37 + 8 * v42);
      if (v43 == v38)
      {
LABEL_16:
        v18 = *(_DWORD *)(v37 + 8 * v42 + 4);
        goto LABEL_5;
      }
      v44 = 1;
      while (v43)
      {
        v42 = ((_DWORD)v42 + v44) & v39;
        v43 = *(_DWORD *)(v37 + 8 * v42);
        ++v44;
        if (v43 == v38)
          goto LABEL_16;
      }
    }
    v18 = 0;
  }
LABEL_5:
  v19 = *(_DWORD *)(a1 + 200);
  if (v19 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v10, v11, v12, v13, v14, v15, v16);
    v19 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v19) = -129989822;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(a1, (unsigned __int8 *)operationCompareStrictEq, 2, 0, 1, v14, v15, v16, &v46);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 1, 0, v20, v21, v22, v23, (uint64_t)v45, v24);
  v30 = v18 + (*(_DWORD *)(a1 + 640) >> 2);
  if (*(_DWORD *)(a1 + 396) <= v30)
  {
    __break(0xC471u);
LABEL_25:
    JUMPOUT(0x198751BBCLL);
  }
  v46 = *(_DWORD *)(*(_QWORD *)(a1 + 384) + 4 * v30);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v45, (unsigned int *)&v46, a1, v25, v26, v27, v28, v29);
}

void JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int *a9@<X8>)
{
  uint64_t v9;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  char v33;
  char v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  _BYTE *v39;
  int v40;
  unsigned __int8 *v41;
  char *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  int v45;
  unsigned __int8 *v46;
  void *v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int8x8_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v81;
  char *v82;
  char *v83;
  void *__dst;
  uint64_t v85;
  _WORD v86[4];

  v9 = (uint64_t)a2;
  __dst = v86;
  v85 = 3;
  if ((_DWORD)a3)
  {
    v86[0] = a3;
    v12 = 1;
    HIDWORD(v85) = 1;
  }
  else
  {
    v12 = 0;
  }
  if ((_DWORD)a4 != 1)
  {
    v86[v12++] = a4 | 0x100;
    HIDWORD(v85) = v12;
  }
  if ((_DWORD)a5 == 2)
  {
    if (!v12)
      goto LABEL_65;
  }
  else
  {
    v86[v12++] = a5 | 0x200;
    HIDWORD(v85) = v12;
  }
  v13 = a1 + 56;
  do
  {
    v14 = 0;
    v15 = 0;
    v16 = (char *)__dst;
    v17 = v12;
    do
    {
      if ((*((_BYTE *)__dst + v14 + 1) & 0x40) != 0)
      {
LABEL_77:
        __break(1u);
        goto LABEL_78;
      }
      v15 |= 1 << *((_BYTE *)__dst + v14 + 1);
      v14 += 2;
    }
    while (2 * v12 != v14);
    v18 = 0;
    do
    {
      v19 = *((_BYTE *)__dst + v18) & 0x7F;
      if (v19 >= 0x40)
        goto LABEL_77;
      v15 &= ~(1 << v19);
      v18 += 2;
    }
    while (2 * v12 != v18);
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v20.i16[0] = vaddlv_u8(v20);
    v21 = v20.i32[0];
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v15));
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.i32[0] + v21)
    {
      v23 = 0;
      if (v12 <= 1)
        v24 = 1;
      else
        v24 = v12;
      v25 = 2 * v24;
      while (1)
      {
        v26 = *((unsigned __int8 *)__dst + v23 + 1);
        if ((v26 & 0x7Fu) >= 0x40)
          goto LABEL_77;
        if (((v15 >> (v26 & 0x7F)) & 1) != 0)
          break;
        v23 += 2;
        if (v25 == v23)
          goto LABEL_58;
      }
      v27 = *((unsigned __int8 *)__dst + v23);
      if (v27 != v26)
      {
        v28 = (char)v27;
        if ((char)v27 == 63)
        {
          v29 = *(_DWORD *)(a1 + 200);
          v30 = *(_DWORD *)(a1 + 192);
          if (v26 == 31)
            goto LABEL_52;
          v32 = v26 & 0x1F | 0xD2800000;
        }
        else
        {
          v29 = *(_DWORD *)(a1 + 200);
          v30 = *(_DWORD *)(a1 + 192);
          v31 = (char)v26 == 31 || v28 == 31;
          if (!v31)
          {
            v32 = v26 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v32 = (char)v26 | (32 * v28) | 0x91000000;
        }
LABEL_53:
        if (v29 + 4 > v30)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v29 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = v32;
        *(_DWORD *)(a1 + 200) += 4;
        v16 = (char *)__dst;
        v17 = HIDWORD(v85);
      }
      memmove(&v16[v23], &v16[v23 + 2], 2 * v17 - v23 - 2);
      v12 = HIDWORD(v85) - 1;
      goto LABEL_57;
    }
    v33 = *(_BYTE *)__dst;
    v34 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a1, *(char *)__dst, v34, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v85) - 2);
    v35 = (HIDWORD(v85) - 1);
    v31 = HIDWORD(v85) == 1;
    HIDWORD(v85) = v35;
    v36 = (unsigned __int8 *)__dst;
    v37 = (unsigned __int8 *)__dst + 2 * v35;
    if (v31)
    {
      v44 = 0;
      v45 = 0;
      v40 = 0;
      a2 = v37;
    }
    else
    {
      v38 = 2 * v35;
      v39 = __dst;
      while (*v39 != v34)
      {
        v39 += 2;
        v38 -= 2;
        if (!v38)
          goto LABEL_37;
      }
      *v39 = v33;
LABEL_37:
      v40 = 0;
      v41 = v36;
      a2 = v37;
      v42 = (char *)v37;
      do
      {
        if (*v36 == v36[1])
        {
          v43 = v36;
          if (v42 != (char *)__dst + 2 * HIDWORD(v85))
          {
            v83 = (char *)v37;
            if (v36 == a2)
            {
              v43 = (unsigned __int8 *)v42;
            }
            else
            {
              v81 = v41 - a2;
              v82 = v42;
              memmove(v42, a2, v41 - a2);
              v43 = (unsigned __int8 *)&v82[v81];
            }
            v37 = (unsigned __int8 *)v83;
          }
          a2 = v36 + 2;
          ++v40;
          v42 = (char *)v43;
        }
        v36 += 2;
        v41 += 2;
      }
      while (v36 < v37);
      v36 = (unsigned __int8 *)__dst;
      v44 = HIDWORD(v85);
      v45 = HIDWORD(v85);
      v37 = (unsigned __int8 *)v42;
    }
    v46 = &v36[2 * v44];
    if (a2 != v46)
    {
      memmove(v37, a2, v46 - a2);
      v45 = HIDWORD(v85);
    }
    v12 = v45 - v40;
LABEL_57:
    HIDWORD(v85) = v12;
LABEL_58:
    ;
  }
  while (v12);
  v47 = __dst;
  if (v86 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v85) = 0;
    WTF::fastFree((unint64_t)v47, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_65:
  v13 = -1207811152;
  v48 = *(unsigned int *)(a1 + 640);
  if (v48 >= 4)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      return;
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(v48 >> 2), a1 + 264, a4, a5, a6, a7, a8);
  }
  else
  {
    v13 = -1207811137;
  }
  v49 = *(_DWORD *)(a1 + 200);
  if (v49 + 4 > *(_DWORD *)(a1 + 192))
  {
LABEL_78:
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v49 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v49) = v13;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::JIT::appendCall(a1, v9, a3, a4, a5, a6, a7, a8, a9);
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, 1, 0xFFFFFFFFLL, v50, v51, v52, v53, (uint64_t)&__dst, v54);
  v60 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440);
  v61 = *(_QWORD *)(v60 + 8);
  v62 = *(unsigned int **)(v60 + 16);
  if (v62)
  {
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 + 1, v62));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v61, a1, v55, v56, v57, v58, v59);
    do
    {
      v71 = __ldaxr(v62);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, v62));
    if (!v72)
    {
      atomic_store(1u, v62);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v62, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v61, a1, v55, v56, v57, v58, v59);
  }
}

unsigned int *JSC::JIT::emitSlow_op_jnstricteq(uint64_t a1, unsigned __int8 *a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45[3];
  int v46;

  JSC::JIT::linkAllSlowCases(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  v17 = *a2;
  if (v17 == 128)
  {
    v18 = *((__int16 *)a2 + 3);
  }
  else if (v17 == 130)
  {
    v18 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v18 = (char)a2[3];
  }
  if (!v18)
  {
    v32 = *(_QWORD *)(a1 + 808);
    v33 = *(_QWORD *)(v32 + 80);
    v34 = *(_QWORD *)v33;
    v35 = *(unsigned int *)(v33 + 12) + *(_QWORD *)v33;
    if (v34 > (unint64_t)a2 || v35 <= (unint64_t)a2)
    {
      __break(0xC471u);
      goto LABEL_25;
    }
    v37 = *(_QWORD *)(v32 + 144);
    if (v37)
    {
      v38 = (_DWORD)a2 - v34;
      v39 = *(_DWORD *)(v37 - 8);
      v40 = 9 * ((~(v38 << 15) + v38) ^ ((~(v38 << 15) + v38) >> 10));
      v41 = (v40 ^ (v40 >> 6)) + ~((v40 ^ (v40 >> 6)) << 11);
      v42 = v39 & (v41 ^ HIWORD(v41));
      v43 = *(_DWORD *)(v37 + 8 * v42);
      if (v43 == v38)
      {
LABEL_16:
        v18 = *(_DWORD *)(v37 + 8 * v42 + 4);
        goto LABEL_5;
      }
      v44 = 1;
      while (v43)
      {
        v42 = ((_DWORD)v42 + v44) & v39;
        v43 = *(_DWORD *)(v37 + 8 * v42);
        ++v44;
        if (v43 == v38)
          goto LABEL_16;
      }
    }
    v18 = 0;
  }
LABEL_5:
  v19 = *(_DWORD *)(a1 + 200);
  if (v19 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v10, v11, v12, v13, v14, v15, v16);
    v19 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v19) = -129989822;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(a1, (unsigned __int8 *)operationCompareStrictEq, 2, 0, 1, v14, v15, v16, &v46);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 0, 0, v20, v21, v22, v23, (uint64_t)v45, v24);
  v30 = v18 + (*(_DWORD *)(a1 + 640) >> 2);
  if (*(_DWORD *)(a1 + 396) <= v30)
  {
    __break(0xC471u);
LABEL_25:
    JUMPOUT(0x19875228CLL);
  }
  v46 = *(_DWORD *)(*(_QWORD *)(a1 + 384) + 4 * v30);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v45, (unsigned int *)&v46, a1, v25, v26, v27, v28, v29);
}

void JSC::JIT::emit_op_to_number(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  unsigned int v54[3];
  int v55;
  uint64_t v56;
  int v57;

  v9 = *a2;
  if (v9 == 128)
  {
    v51 = *((__int16 *)a2 + 1);
    if (v51 <= 63)
      v11 = v51;
    else
      v11 = (v51 + 1073741760);
    v12 = *((__int16 *)a2 + 2);
    if (v12 > 63)
      v12 += 1073741760;
    v13 = *((unsigned __int16 *)a2 + 3);
  }
  else if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v12 = *(_DWORD *)(a2 + 6);
    v13 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
    if (v12 > 15)
      v12 += 1073741808;
    v13 = a2[3];
  }
  v14 = *(unsigned int **)(*(_QWORD *)(a1 + 808) + 208);
  if (*v14 <= v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1987524A8);
  }
  v15 = v12;
  if (v12 < 0x40000000)
  {
    v16 = ((unint64_t)v12 << 35) | 0x1D;
LABEL_12:
    JSC::MacroAssemblerARM64::load64(a1, v16, 0, a4, a5, a6, a7, a8);
    goto LABEL_13;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v12))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v40, v41, v42, v43, v44);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v46, v47, v48, v49, v50);
    v16 = v15 << 35;
    goto LABEL_12;
  }
  v45 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v45 <= (v15 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987524F4);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v45[2 * (v15 - 0x40000000) + 2], 0, v40, v41, v42, v43, v44);
LABEL_13:
  JSC::MacroAssemblerARM64::branch64(a1, 2, 0, 27, v17, v18, v19, v20, (uint64_t)v54);
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, 0, 27, v21, v22, v23, v24, (uint64_t)&v52);
  v31 = v53;
  v32 = *(_DWORD *)(a1 + 640);
  v55 = v52;
  v56 = v53;
  v57 = v32;
  v33 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v33 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v55);
  }
  else
  {
    v34 = *(_QWORD *)(a1 + 648) + 16 * v33;
    *(_DWORD *)v34 = v52;
    *(_QWORD *)(v34 + 4) = v31;
    *(_DWORD *)(v34 + 12) = v32;
    ++*(_DWORD *)(a1 + 660);
  }
  if (*(_BYTE *)(a1 + 793))
    JSC::MacroAssemblerARM64::or16(a1, (JSC::ARM64LogicalImmediate *)0x100, (uint64_t)v14 + 2 * v13 + 4);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v54, a1, v25, v26, v27, v28, v29, v30);
  if ((_DWORD)v15 != (_DWORD)v11)
    JSC::MacroAssemblerARM64::store64(a1, 0, (v11 << 35) | 0x1D, v35, v36, v37, v38, v39);
}

void JSC::JIT::emit_op_to_numeric(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  int v94;
  _DWORD *v95;
  _DWORD *v96;
  unint64_t v97;
  BOOL v98;
  char **v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  unsigned int v110[2];
  char v111;
  __int16 v112;
  char v113;
  int v114;
  uint64_t v115;
  unsigned int v116[3];
  unsigned int v117[3];
  int v118;
  uint64_t v119;
  int v120;

  v9 = *a2;
  if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v13 = *(_DWORD *)(a2 + 6);
    v14 = *(_DWORD *)(a2 + 10);
  }
  else if (v9 == 128)
  {
    v106 = *((__int16 *)a2 + 1);
    if (v106 <= 63)
      v11 = v106;
    else
      v11 = (v106 + 1073741760);
    v107 = *((__int16 *)a2 + 2);
    v13 = v107 + 1073741760;
    if (v107 <= 63)
      v13 = *((__int16 *)a2 + 2);
    v14 = *((unsigned __int16 *)a2 + 3);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
    v13 = v12 + 1073741808;
    if (v12 <= 15)
      v13 = (char)a2[2];
    v14 = a2[3];
  }
  v15 = *(_QWORD *)(a1 + 808);
  v16 = *(unsigned int **)(v15 + 208);
  if (*v16 <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198752A34);
  }
  v17 = v13;
  if (v13 < 0x40000000)
  {
    v18 = ((unint64_t)v13 << 35) | 0x1D;
LABEL_12:
    JSC::MacroAssemblerARM64::load64(a1, v18, 0, a4, a5, a6, a7, a8);
    goto LABEL_13;
  }
  v91 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v92 = (v13 - 0x40000000);
  v93 = *(_DWORD **)(v91 + 120);
  if (!v93 || *v93 <= v92)
    goto LABEL_50;
  v94 = *((unsigned __int8 *)v93 + v92 + 4);
  if ((v94 - 1) >= 2)
  {
    if (v94)
    {
      if (v94 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x198752A14);
      }
      goto LABEL_61;
    }
LABEL_50:
    v96 = *(_DWORD **)(v91 + 112);
    if (*v96 <= v92)
    {
      __break(0xC471u);
      JUMPOUT(0x198752B7CLL);
    }
    v97 = *(_QWORD *)&v96[2 * v92 + 2];
    if (v97)
      v98 = (v97 & 0xFFFE000000000002) == 0;
    else
      v98 = 0;
    if (!v98)
      goto LABEL_47;
    v99 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v97 & 0xFFFFFFFE) + 0x4C));
    if (v99 != &JSC::SymbolTable::s_info && v99 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_47;
LABEL_61:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v101, v102, v103, v104, v105);
    v18 = v17 << 35;
    goto LABEL_12;
  }
LABEL_47:
  v95 = *(_DWORD **)(v15 + 112);
  if (*v95 <= v92)
  {
    __break(0xC471u);
    JUMPOUT(0x198752B20);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v95[2 * v92 + 2], 0, a4, a5, a6, a7, a8);
LABEL_13:
  JSC::MacroAssemblerARM64::branch64(a1, 2, 0, 27, v19, v20, v21, v22, (uint64_t)v117);
  JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v23, v24, v25, v26, v27, (uint64_t)v116);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198752A54);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v35 = *(_BYTE *)(a1 + 304) & 0x1F | 0x38405000;
  v36 = *(_DWORD *)(a1 + 200);
  if (v36 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v28, v29, v30, v31, v32, v33, v34);
    v36 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v36) = v35;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 3, v31, v32, v33, v34, (uint64_t)&v114);
  v44 = (_QWORD *)(a1 + 648);
  v45 = v115;
  v46 = *(_DWORD *)(a1 + 640);
  v118 = v114;
  v119 = v115;
  v120 = v46;
  v47 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v47 == *(_DWORD *)(a1 + 656))
  {
    v87 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v47 + 1, (unint64_t)&v118);
    v88 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v88 = *(_DWORD *)v87;
    *(_QWORD *)(v88 + 4) = *(_QWORD *)(v87 + 4);
    *(_DWORD *)(v88 + 12) = *(_DWORD *)(v87 + 12);
  }
  else
  {
    v48 = *v44 + 16 * v47;
    *(_DWORD *)v48 = v114;
    *(_QWORD *)(v48 + 4) = v45;
    *(_DWORD *)(v48 + 12) = v46;
  }
  ++*(_DWORD *)(a1 + 660);
  v49 = *(_DWORD *)(a1 + 200);
  if (*(_BYTE *)(a1 + 793))
  {
    if (v49 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v37, v38, v39, v40, v41, v42, v43);
      v49 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v49) = 840369125;
    v49 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v49;
  }
  for (; (signed int)v49 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v49)
  {
    if (v49 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v37, v38, v39, v40, v41, v42, v43);
      v49 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v49) = -721215457;
    v49 = *(_DWORD *)(a1 + 200) + 4;
  }
  v50 = v49;
  if (v49 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v37, v38, v39, v40, v41, v42, v43);
    v50 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v50) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v51 = 69;
  else
    v51 = 65;
  v110[0] = v49;
  v110[1] = 0;
  v111 = v51;
  v112 = 15;
  v113 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v116, a1, v38, v39, v40, v41, v42, v43);
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, 0, 27, v52, v53, v54, v55, (uint64_t)&v108);
  v63 = v109;
  v64 = *(_DWORD *)(a1 + 640);
  v118 = v108;
  v119 = v109;
  v120 = v64;
  v65 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v65 == *(_DWORD *)(a1 + 656))
  {
    v89 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v65 + 1, (unint64_t)&v118);
    v90 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v90 = *(_DWORD *)v89;
    *(_QWORD *)(v90 + 4) = *(_QWORD *)(v89 + 4);
    *(_DWORD *)(v90 + 12) = *(_DWORD *)(v89 + 12);
  }
  else
  {
    v66 = *v44 + 16 * v65;
    *(_DWORD *)v66 = v108;
    *(_QWORD *)(v66 + 4) = v63;
    *(_DWORD *)(v66 + 12) = v64;
  }
  ++*(_DWORD *)(a1 + 660);
  if (*(_BYTE *)(a1 + 793))
  {
    v67 = *(_DWORD *)(a1 + 200);
    if (v67 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v56, v57, v58, v59, v60, v61, v62);
      v67 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v67) = 840434661;
    *(_DWORD *)(a1 + 200) += 4;
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v110, a1, v57, v58, v59, v60, v61, v62);
  if (*(_BYTE *)(a1 + 793))
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198752AF0);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    JSC::MacroAssemblerARM64::load16(a1, (uint64_t)v16 + 2 * v14 + 4, *(char *)(a1 + 272), v69, v70, v71, v72, v73);
    v81 = *(_DWORD *)(a1 + 200);
    if (v81 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v74, v75, v76, v77, v78, v79, v80);
      v81 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v81) = 704971280;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::store16(a1, 16, (uint64_t)v16 + 2 * v14 + 4, v76, v77, v78, v79, v80);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v117, a1, v68, v69, v70, v71, v72, v73);
  if ((_DWORD)v17 != (_DWORD)v11)
    JSC::MacroAssemblerARM64::store64(a1, 0, (v11 << 35) | 0x1D, v82, v83, v84, v85, v86);
}

void JSC::JIT::emit_op_to_string(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  _DWORD *v52;
  _DWORD *v53;
  unint64_t v54;
  BOOL v55;
  char **v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;

  v9 = *a2;
  if (v9 == 128)
  {
    v47 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v47 <= 63)
      v12 = v47;
    else
      v12 = (v47 + 1073741760);
    v13 = *((__int16 *)a2 + 2);
    if ((int)v13 <= 63)
      goto LABEL_7;
LABEL_26:
    v13 = (v13 + v11);
    goto LABEL_27;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    if (v10 <= 15)
      v12 = v10;
    else
      v12 = (v10 + 1073741808);
    v13 = (char)a2[2];
    if ((int)v13 < 16)
      goto LABEL_7;
    goto LABEL_26;
  }
  v12 = *(unsigned int *)(a2 + 2);
  v13 = *(unsigned int *)(a2 + 6);
LABEL_27:
  if ((int)v13 < 0x40000000)
  {
LABEL_7:
    v14 = (v13 << 35) | 0x1D;
LABEL_8:
    JSC::MacroAssemblerARM64::load64(a1, v14, 0, a4, a5, a6, a7, a8);
    goto LABEL_9;
  }
  v48 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v49 = (v13 - 0x40000000);
  v50 = *(_DWORD **)(v48 + 120);
  if (!v50 || *v50 <= v49)
    goto LABEL_34;
  v51 = *((unsigned __int8 *)v50 + v49 + 4);
  if ((v51 - 1) >= 2)
  {
    if (v51)
    {
      if (v51 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x198752F30);
      }
      goto LABEL_45;
    }
LABEL_34:
    v53 = *(_DWORD **)(v48 + 112);
    if (*v53 <= v49)
    {
      __break(0xC471u);
      JUMPOUT(0x198752F70);
    }
    v54 = *(_QWORD *)&v53[2 * v49 + 2];
    if (v54)
      v55 = (v54 & 0xFFFE000000000002) == 0;
    else
      v55 = 0;
    if (!v55)
      goto LABEL_31;
    v56 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x4C));
    if (v56 != &JSC::SymbolTable::s_info && v56 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_31;
LABEL_45:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v58, v59, v60, v61, v62);
    v14 = v13 << 35;
    goto LABEL_8;
  }
LABEL_31:
  v52 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v52 <= v49)
  {
    __break(0xC471u);
    JUMPOUT(0x198752F50);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v52[2 * v49 + 2], 0, a4, a5, a6, a7, a8);
LABEL_9:
  JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v15, v16, v17, v18, v19, (uint64_t)&v65);
  v27 = (_QWORD *)(a1 + 648);
  v28 = v66;
  v29 = *(_DWORD *)(a1 + 640);
  v67 = v65;
  v68 = v66;
  v69 = v29;
  v30 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v30 == *(_DWORD *)(a1 + 656))
  {
    v43 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v30 + 1, (unint64_t)&v67);
    v44 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v44 = *(_DWORD *)v43;
    *(_QWORD *)(v44 + 4) = *(_QWORD *)(v43 + 4);
    *(_DWORD *)(v44 + 12) = *(_DWORD *)(v43 + 12);
  }
  else
  {
    v31 = *v27 + 16 * v30;
    *(_DWORD *)v31 = v65;
    *(_QWORD *)(v31 + 4) = v28;
    *(_DWORD *)(v31 + 12) = v29;
  }
  ++*(_DWORD *)(a1 + 660);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198752DD4);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v32 = *(_BYTE *)(a1 + 304) & 0x1F | 0x38405000;
  v33 = *(_DWORD *)(a1 + 200);
  if (v33 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
    v33 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v33) = v32;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 2, v23, v24, v25, v26, (uint64_t)&v63);
  v39 = v64;
  v40 = *(_DWORD *)(a1 + 640);
  v67 = v63;
  v68 = v64;
  v69 = v40;
  v41 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v41 == *(_DWORD *)(a1 + 656))
  {
    v45 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v41 + 1, (unint64_t)&v67);
    v46 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v46 = *(_DWORD *)v45;
    *(_QWORD *)(v46 + 4) = *(_QWORD *)(v45 + 4);
    *(_DWORD *)(v46 + 12) = *(_DWORD *)(v45 + 12);
  }
  else
  {
    v42 = *v27 + 16 * v41;
    *(_DWORD *)v42 = v63;
    *(_QWORD *)(v42 + 4) = v39;
    *(_DWORD *)(v42 + 12) = v40;
  }
  ++*(_DWORD *)(a1 + 660);
  if ((_DWORD)v13 != (_DWORD)v12)
    JSC::MacroAssemblerARM64::store64(a1, 0, (v12 << 35) | 0x1D, v34, v35, v36, v37, v38);
}

void JSC::JIT::emit_op_to_object(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;

  v8 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpToObject>(a2);
  v10 = v9;
  v11 = HIDWORD(v8);
  if (SHIDWORD(v8) < 0x40000000)
  {
    v12 = (v11 << 35) | 0x1D;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v12, 0, v3, v4, v5, v6, v7);
    goto LABEL_4;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), SHIDWORD(v8)))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v36, v37, v38, v39, v40);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v42, v43, v44, v45, v46);
    v12 = v11 << 35;
    goto LABEL_3;
  }
  v41 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v41 <= (HIDWORD(v8) - 0x40000000))
  {
    __break(0xC471u);
    return;
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v41[2 * (HIDWORD(v8) - 0x40000000) + 2], 0, v36, v37, v38, v39, v40);
LABEL_4:
  JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v13, v14, v15, v16, v17, (uint64_t)&v49);
  v23 = v50;
  v24 = *(_DWORD *)(a1 + 640);
  v51 = v49;
  v52 = v50;
  v53 = v24;
  v25 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v25 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v51);
  }
  else
  {
    v26 = *(_QWORD *)(a1 + 648) + 16 * v25;
    *(_DWORD *)v26 = v49;
    *(_QWORD *)(v26 + 4) = v23;
    *(_DWORD *)(v26 + 12) = v24;
    ++*(_DWORD *)(a1 + 660);
  }
  JSC::AssemblyHelpers::branchIfNotObject(a1, 0, v18, v19, v20, v21, v22, (uint64_t)&v47);
  v32 = v48;
  v33 = *(_DWORD *)(a1 + 640);
  v51 = v47;
  v52 = v48;
  v53 = v33;
  v34 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v34 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v51);
  }
  else
  {
    v35 = *(_QWORD *)(a1 + 648) + 16 * v34;
    *(_DWORD *)v35 = v47;
    *(_QWORD *)(v35 + 4) = v32;
    *(_DWORD *)(v35 + 12) = v33;
    ++*(_DWORD *)(a1 + 660);
  }
  if (*(_BYTE *)(a1 + 793))
    JSC::MacroAssemblerARM64::store64(a1, 0, (HIDWORD(v10) << 36) ^ 0xFFFFFFF000000019, v27, v28, v29, v30, v31);
  if (HIDWORD(v8) != (_DWORD)v8)
    JSC::MacroAssemblerARM64::store64(a1, 0, (v8 << 35) | 0x1D, v27, v28, v29, v30, v31);
}

unint64_t JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpToObject>(unsigned __int8 *a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  int v6;

  v1 = *a1;
  if (v1 == 130)
  {
    v2 = *(_DWORD *)(a1 + 2);
    v4 = *(unsigned int *)(a1 + 6);
  }
  else if (v1 == 128)
  {
    v2 = *((__int16 *)a1 + 1);
    if (v2 > 63)
      v2 += 1073741760;
    v6 = *((__int16 *)a1 + 2);
    LODWORD(v4) = v6 + 1073741760;
    if (v6 <= 63)
      v4 = v6;
    else
      v4 = v4;
  }
  else
  {
    v2 = (char)a1[1];
    if (v2 > 15)
      v2 += 1073741808;
    v3 = (char)a1[2];
    LODWORD(v4) = v3 + 1073741808;
    if (v3 <= 15)
      v4 = v3;
    else
      v4 = v4;
  }
  return v2 | (unint64_t)(v4 << 32);
}

unsigned int *JSC::JIT::emit_op_catch(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int8x8_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int8x8_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  int v137;
  unsigned int v138[3];
  unsigned int v139[3];
  char v140;
  char **v141;
  char *v142;

  v9 = *a2;
  if (v9 == 128)
  {
    v137 = *((__int16 *)a2 + 1);
    if (v137 <= 63)
      v11 = *((__int16 *)a2 + 1);
    else
      v11 = v137 + 1073741760;
    v12 = *((__int16 *)a2 + 2);
    v13 = v12 + 1073741760;
    v14 = v12 <= 63;
  }
  else
  {
    if (v9 == 130)
    {
      v11 = *(_DWORD *)(a2 + 2);
      v15 = *(_DWORD *)(a2 + 6);
      goto LABEL_10;
    }
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = (char)a2[1];
    else
      v11 = v10 + 1073741808;
    v12 = (char)a2[2];
    v13 = v12 + 1073741808;
    v14 = v12 <= 15;
  }
  if (v14)
    v15 = v12;
  else
    v15 = v13;
LABEL_10:
  JSC::AssemblyHelpers::restoreCalleeSavesFromEntryFrameCalleeSavesBuffer((char *)a1, *(_QWORD *)(a1 + 352) + 48, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)(a1 + 352), 3, v16, v17, v18, v19, v20);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987536F0);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, 90480, *(char *)(a1 + 304), v21, v22, v23, v24, v25);
  v33 = *(_DWORD *)(a1 + 200);
  if (v33 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v26, v27, v28, v29, v30, v31, v32);
    v33 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v33) = -126785411;
  *(_DWORD *)(a1 + 200) += 4;
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198753720);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, 90480, *(char *)(a1 + 304), v28, v29, v30, v31, v32);
  v41 = *(_DWORD *)(a1 + 200);
  if (v41 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v34, v35, v36, v37, v38, v39, v40);
    v41 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v41) = -130979713;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::add64(a1, 16 - ((8 * *(_DWORD *)(*(_QWORD *)(a1 + 808) + 20) + 24) & 0xFFFFFFF0), 29, 31, v37, v38, v39, v40);
  v49 = *(_DWORD *)(a1 + 200);
  if (v49 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v42, v43, v44, v45, v46, v47, v48);
    v49 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v49) = -129956960;
  v50 = *(_DWORD *)(a1 + 200);
  v51 = v50 + 4;
  *(_DWORD *)(a1 + 200) = v50 + 4;
  if ((v50 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v42, v43, v44, v45, v46, v47, v48);
    v51 = *(_DWORD *)(a1 + 200);
  }
  v52 = -1207811152;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v51) = -129499110;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)(a1 + 352), 0, v44, v45, v46, v47, v48);
  v60 = *(unsigned int *)(a1 + 640);
  if (v60 >= 4)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1987537D0);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(v60 >> 2), a1 + 264, v55, v56, v57, v58, v59);
    v61 = -1207811152;
  }
  else
  {
    v61 = -1207811137;
  }
  v62 = *(_DWORD *)(a1 + 200);
  if (v62 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v53, v54, v55, v56, v57, v58, v59);
    v62 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v62) = v61;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::JIT::appendCall(a1, (uint64_t)operationRetrieveAndClearExceptionIfCatchable, v54, v55, v56, v57, v58, v59, (int *)v139);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 1, 0, v63, v64, v65, v66, (uint64_t)v139, v67);
  JSC::MacroAssemblerARM64::load64(a1, *(_QWORD *)(a1 + 352) + 90488, 1, v68, v69, v70, v71, v72);
  v80 = *(_DWORD *)(a1 + 200);
  if (v80 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v73, v74, v75, v76, v77, v78, v79);
    v80 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v80) = -702611424;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v139, a1, v74, v75, v76, v77, v78, v79);
  JSC::MacroAssemblerARM64::store64(a1, 0, ((unint64_t)v11 << 35) | 0x1D, v81, v82, v83, v84, v85);
  v93 = *(_DWORD *)(a1 + 200);
  if (v93 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v86, v87, v88, v89, v90, v91, v92);
    v93 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v93) = -129990656;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 0, ((unint64_t)v15 << 35) | 0x1D, v88, v89, v90, v91, v92);
  v94 = *(_QWORD *)(a1 + 352);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)*(unsigned int *)(a1 + 640), 1, v95, v96, v97, v98, v99);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v94, 0, v100, v101, v102, v103, v104);
  v112 = *(unsigned int *)(a1 + 640);
  if (v112 >= 4)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1987537F0);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(v112 >> 2), a1 + 264, v107, v108, v109, v110, v111);
  }
  else
  {
    v52 = -1207811137;
  }
  v113 = *(_DWORD *)(a1 + 200);
  if (v113 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v105, v106, v107, v108, v109, v110, v111);
    v113 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v113) = v52;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::JIT::appendCall(a1, (uint64_t)operationTryOSREnterAtCatchAndValueProfile, v106, v107, v108, v109, v110, v111, (int *)v138);
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, 0, 0xFFFFFFFFLL, v114, v115, v116, v117, (uint64_t)v138, v118);
  v126 = *(_DWORD *)(a1 + 200);
  if (v126 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v119, v120, v121, v122, v123, v124, v125);
    v126 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v126) = -134151263;
  *(_DWORD *)(a1 + 200) += 4;
  v127 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
  if (v127 != -1)
  {
    v142 = &v140;
    v141 = &v142;
    std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, &v141, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
  }
  JSC::AssemblyHelpers::emitRestoreCalleeSavesFor((JSC::AssemblyHelpers *)a1, (const JSC::RegisterAtOffsetList *)&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result, v120, v121, v122, v123, v124, v125);
  v135 = *(_DWORD *)(a1 + 200);
  if (v135 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v128, v129, v130, v131, v132, v133, v134);
    v135 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v135) = -702611456;
  *(_DWORD *)(a1 + 200) += 4;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v138, a1, v129, v130, v131, v132, v133, v134);
}

uint64_t operationRetrieveAndClearExceptionIfCatchable(JSC *this, uint64_t a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  unsigned int *v10;
  unsigned int v11;
  JSC::VM *vars0;

  *((_QWORD *)this + 5) = vars0;
  result = *((_QWORD *)this + 2);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x198753864);
  }
  if (*((_QWORD *)this + 3) == result)
  {
    JSC::genericUnwind(this, vars0, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
    v10 = (unsigned int *)((char *)this + 80);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 & 0xFFFFFFEF, v10));
  }
  return result;
}

uint64_t operationTryOSREnterAtCatchAndValueProfile(uint64_t a1, unsigned int a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int8 *v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int *v33;
  uint64_t v34;
  int *v35;
  int v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t *vars0;

  v9 = vars0;
  *(_QWORD *)(a1 + 40) = vars0;
  v10 = v9[2];
  v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
  if (v11 == &JSC::FunctionCodeBlock::s_info)
  {
    v12 = *(_QWORD *)(v10 + 64);
    v13 = (uint64_t *)(v12 + 96);
    v14 = (uint64_t *)(v12 + 104);
    if (*(int *)(*(_QWORD *)(v10 + 56) + 20) >= 0)
      v14 = v13;
  }
  else
  {
    if (v11 != &JSC::EvalCodeBlock::s_info
      && v11 != &JSC::ProgramCodeBlock::s_info
      && v11 != &JSC::ModuleProgramCodeBlock::s_info)
    {
      __break(0xC471u);
      JUMPOUT(0x198753A9CLL);
    }
    v14 = (uint64_t *)(*(_QWORD *)(v10 + 64) + 72);
  }
  v15 = *v14;
  if (!*v14)
    return 0;
  v16 = *(_QWORD *)(v15 + 120);
  if (v16 && (*(_BYTE *)(v16 + 12) & 0xFE) == 4)
    return JSC::DFG::prepareCatchOSREntry(a1, (JSC::CallFrame *)v9, v9[2], v15, a2);
  v18 = a2;
  v19 = **(_QWORD **)(*(_QWORD *)(v10 + 56) + 80);
  v20 = (unsigned __int8 *)(v19 + ((unint64_t)a2 >> 2));
  v21 = *v20;
  if (v21 == 128)
  {
    v22 = *((__int16 *)v20 + 1);
    if (v22 > 63)
      v22 += 1073741760;
    v36 = *((__int16 *)v20 + 2);
    LODWORD(v24) = v36 + 1073741760;
    if (v36 <= 63)
      v24 = v36;
    else
      v24 = v24;
    v25 = *((unsigned __int16 *)v20 + 3);
  }
  else if (v21 == 130)
  {
    v22 = *(_DWORD *)(v20 + 2);
    v24 = *(unsigned int *)(v20 + 6);
    v25 = *(_DWORD *)(v20 + 10);
  }
  else
  {
    v22 = (char)v20[1];
    if (v22 > 15)
      v22 += 1073741808;
    v23 = (char)v20[2];
    LODWORD(v24) = v23 + 1073741808;
    if (v23 <= 15)
      v24 = v23;
    else
      v24 = v24;
    v25 = v20[3];
  }
  v37 = v22 | (unint64_t)(v24 << 32);
  v38 = v25;
  v26 = *(_QWORD *)(v10 + 136);
  v27 = *(unsigned __int16 *)(v26 + 30);
  if (!*(_WORD *)(v26 + 30))
    v27 = *(_DWORD *)(v26 + 156);
  if (!*(_QWORD *)(((v26 + v27 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 * v25))
  {
    JSC::CodeBlock::ensureCatchLivenessIsComputedForBytecodeIndexSlow(v10, (uint64_t)&v37, a2, a5, a6, a7, a8, a9, a3);
    v19 = **(_QWORD **)(*(_QWORD *)(v10 + 56) + 80);
  }
  v28 = (unsigned __int8 *)(v19 + (v18 >> 2));
  v29 = *v28;
  if (v29 == 128)
  {
    v30 = *((unsigned __int16 *)v28 + 3);
  }
  else if (v29 == 130)
  {
    v30 = *(_DWORD *)(v28 + 10);
  }
  else
  {
    v30 = v28[3];
  }
  v31 = *(_QWORD *)(v10 + 136);
  v32 = *(unsigned __int16 *)(v31 + 30);
  if (!*(_WORD *)(v31 + 30))
    v32 = *(_DWORD *)(v31 + 156);
  v33 = *(unsigned int **)(((v31 + v32 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 * v30);
  v34 = *v33;
  if ((_DWORD)v34)
  {
    v35 = (int *)(v33 + 6);
    do
    {
      *((_QWORD *)v35 - 2) = v9[*v35];
      v35 += 6;
      --v34;
    }
    while (v34);
  }
  return 0;
}

void JSC::JIT::emit_op_get_parent_scope(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v10 > 63)
      v10 += 1073741760;
    v12 = *((__int16 *)a2 + 2);
    if (v12 <= 63)
      goto LABEL_6;
LABEL_15:
    v24 = v12 + v11;
    goto LABEL_16;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    if (v10 > 15)
      v10 += 1073741808;
    v12 = (char)a2[2];
    if (v12 <= 15)
    {
LABEL_6:
      v13 = v12;
      v14 = v10;
LABEL_7:
      v15 = (v13 << 35) | 0x1D;
LABEL_8:
      JSC::MacroAssemblerARM64::load64(a1, v15, 0, a4, a5, a6, a7, a8);
      goto LABEL_9;
    }
    goto LABEL_15;
  }
  v10 = *(_DWORD *)(a2 + 2);
  v24 = *(_DWORD *)(a2 + 6);
LABEL_16:
  v13 = v24;
  v14 = v10;
  if (v24 < 0x40000000)
    goto LABEL_7;
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v24))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v25, v26, v27, v28, v29);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v31, v32, v33, v34, v35);
    v15 = v13 << 35;
    goto LABEL_8;
  }
  v30 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v30 <= (v13 - 0x40000000))
  {
    __break(0xC471u);
    return;
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v30[2 * (v13 - 0x40000000) + 2], 0, v25, v26, v27, v28, v29);
LABEL_9:
  v23 = *(_DWORD *)(a1 + 200);
  if (v23 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v16, v17, v18, v19, v20, v21, v22);
    v23 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = -129957888;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 0, (v14 << 35) | 0x1D, v18, v19, v20, v21, v22);
}

void JSC::JIT::emit_op_switch_imm(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  unint64_t v16;
  JSC::ARM64LogicalImmediate *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  _DWORD *v27;
  _DWORD *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  char *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint8x8_t v84;
  __int32 v85;
  uint8x8_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  BOOL v92;
  unsigned int v93;
  unsigned int v94;
  void *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  char *v134;
  uint64_t v135;
  _BYTE *v136;
  unint64_t v137;
  char *v138;
  char *v139;
  unint64_t v140;
  _WORD *v141;
  JSC::AssemblerBuffer *v142;
  int v143;
  void *v144;
  unsigned int v145[3];
  void *__dst[2];
  __int16 v147;

  v10 = *a2;
  if (v10 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v12 = *(_DWORD *)(a2 + 6);
    v16 = *(unsigned int *)(a2 + 10);
  }
  else
  {
    if (v10 == 128)
    {
      v11 = *((unsigned __int16 *)a2 + 1);
      v12 = *((__int16 *)a2 + 2);
      v13 = *((__int16 *)a2 + 3);
      v14 = v13 + 1073741760;
      v15 = v13 <= 63;
    }
    else
    {
      v11 = a2[1];
      v12 = (char)a2[2];
      v13 = (char)a2[3];
      v14 = v13 + 1073741808;
      v15 = v13 <= 15;
    }
    if (v15)
      v16 = v13;
    else
      v16 = v14;
  }
  if (!v12)
    v12 = JSC::UnlinkedCodeBlock::outOfLineJumpOffset(*(_QWORD *)(a1 + 808), (unint64_t)a2);
  v17 = *(JSC::ARM64LogicalImmediate **)(*(_QWORD *)(*(_QWORD *)(a1 + 808) + 152) + 8);
  if (*(_DWORD *)v17 <= v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198754244);
  }
  v18 = *(_DWORD **)(a1 + 912);
  if (*v18 <= v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198754264);
  }
  v19 = v11;
  v20 = (unint64_t)&v18[4 * v11 + 2];
  v21 = (uint64_t *)(a1 + 664);
  v22 = *(_DWORD *)(a1 + 640);
  LODWORD(__dst[0]) = 0;
  HIDWORD(__dst[0]) = v22;
  __dst[1] = (void *)__PAIR64__(v11, v12);
  v23 = *(unsigned int *)(a1 + 676);
  if ((_DWORD)v23 == *(_DWORD *)(a1 + 672))
  {
    v24 = (__int128 *)WTF::Vector<JSC::SwitchRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v23 + 1, (unint64_t)__dst);
    v23 = *(unsigned int *)(a1 + 676);
    v25 = *(_QWORD *)(a1 + 664);
    v26 = *v24;
  }
  else
  {
    v25 = *v21;
    v26 = *(_OWORD *)__dst;
  }
  *(_OWORD *)(v25 + 16 * v23) = v26;
  v27 = (_DWORD *)((char *)v17 + 8);
  ++*(_DWORD *)(a1 + 676);
  v28 = *(_DWORD **)v20;
  if (!*(_QWORD *)v20 || !*v28)
  {
    v29 = *(unsigned int **)&v27[4 * v11];
    if (v29 && (v30 = *v29, (_DWORD)v30))
    {
      v17 = (JSC::ARM64LogicalImmediate *)(8 * v30);
      v11 = WTF::fastMalloc((WTF *)(8 * v30 + 8));
      *(_DWORD *)v11 = v30;
      bzero((void *)(v11 + 8), 8 * v30);
      v28 = *(_DWORD **)v20;
    }
    else
    {
      v11 = 0;
    }
    *(_QWORD *)v20 = v11;
    if (v28)
      WTF::fastFree((unint64_t)v28, a2, a3, a4, a5, a6, a7, a8);
  }
  if ((int)v16 >= 0x40000000)
  {
    if (JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v16))
    {
      v125 = *(unsigned int **)(*(_QWORD *)(a1 + 808) + 112);
      v81 = *v125;
      if (v81 <= (int)v16 - 0x40000000)
      {
        v70 = "reference WTF::TrailingArray<WTF::EmbeddedFixedVector<JSC::WriteBarrier<Unknown, RawValueTraits<Unknown>>>"
              ", JSC::WriteBarrier<Unknown, RawValueTraits<Unknown>>>::at [Derived = WTF::EmbeddedFixedVect"
              "or<JSC::WriteBarrier<Unknown, RawValueTraits<Unknown>>>, T = JSC::WriteBarrier<Unknown, RawValueTraits<Unknown>>]";
        v71 = 87;
        __break(0xC471u);
LABEL_97:
        __break(1u);
        goto LABEL_98;
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v125[2 * (v16 - 0x40000000) + 2], 0, v124, v72, v73, v74, v75);
      goto LABEL_23;
    }
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v124, v72, v73, v74, v75);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v126, v127, v128, v129, v130);
    v31 = v16 << 35;
  }
  else
  {
    v31 = (v16 << 35) | 0x1D;
  }
  JSC::MacroAssemblerARM64::load64(a1, v31, 0, a4, a5, a6, a7, a8);
LABEL_23:
  JSC::MacroAssemblerARM64::branch64(a1, 3, 0, 27, v32, v33, v34, v35, (uint64_t)v145);
  v36 = &v27[4 * v19];
  v37 = v36[2];
  v17 = (JSC::ARM64LogicalImmediate *)(v36 + 2);
  JSC::MacroAssemblerARM64::sub32(a1, 0, v37, 0, v38, v39, v40, v41);
  if (*(_QWORD *)v20)
    v46 = **(unsigned int **)v20;
  else
    v46 = 0;
  JSC::MacroAssemblerARM64::branch32(a1, 2, 0, v46, v42, v43, v44, v45, (uint64_t)&v143);
  v52 = v144;
  v53 = v12 + (*(_DWORD *)(a1 + 640) >> 2);
  LODWORD(__dst[0]) = v143;
  *(void **)((char *)__dst + 4) = v144;
  HIDWORD(__dst[1]) = v53;
  v54 = *(unsigned int *)(a1 + 636);
  if ((_DWORD)v54 == *(_DWORD *)(a1 + 632))
  {
    WTF::Vector<JSC::JumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JumpTable>(a1 + 624, (unint64_t)__dst);
  }
  else
  {
    v55 = *(_QWORD *)(a1 + 624) + 16 * v54;
    *(_DWORD *)v55 = v143;
    *(_QWORD *)(v55 + 4) = v52;
    *(_DWORD *)(v55 + 12) = v53;
    ++*(_DWORD *)(a1 + 636);
  }
  if (*(_QWORD *)v20)
    v56 = *(_QWORD *)v20 + 8;
  else
    v56 = 0;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v56, 2, v47, v48, v49, v50, v51);
  JSC::MacroAssemblerARM64::load64(a1, 0x300000002uLL, 0x200000000uLL, 2, v57, v58, v59, v60);
  v142 = (JSC::AssemblerBuffer *)(a1 + 56);
  v68 = *(_DWORD *)(a1 + 200);
  if (v68 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v142, v61, v62, v63, v64, v65, v66, v67);
    v68 = *(_DWORD *)(a1 + 200);
  }
  v20 = 3592355840;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v68) = -702611392;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v145, a1, v62, v63, v64, v65, v66, v67);
  v11 = *(_QWORD *)(a1 + 352);
  v76 = *(unsigned int *)v17;
  v16 = (unint64_t)&v147;
  __dst[0] = &v147;
  v147 = 256;
  __dst[1] = (void *)0x100000001;
  LOBYTE(v27) = 1;
  v8 = 2852127712;
  v77 = 1;
  do
  {
    v78 = 0;
    v79 = 0;
    v80 = (char *)__dst[0];
    v81 = v77;
    do
    {
      if ((*((_BYTE *)__dst[0] + v78 + 1) & 0x40) != 0)
        goto LABEL_97;
      v79 |= 1 << *((_BYTE *)__dst[0] + v78 + 1);
      v78 += 2;
    }
    while (2 * v77 != v78);
    v82 = 0;
    do
    {
      v83 = *((_BYTE *)__dst[0] + v82) & 0x7F;
      if (v83 >= 0x40)
        goto LABEL_97;
      v79 &= ~(1 << v83);
      v82 += 2;
    }
    while (2 * v77 != v82);
    v84 = (uint8x8_t)vcnt_s8((int8x8_t)v79);
    v84.i16[0] = vaddlv_u8(v84);
    v85 = v84.i32[0];
    v86 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v79));
    v86.i16[0] = vaddlv_u8(v86);
    if (v86.i32[0] + v85)
    {
      v87 = 0;
      if (v77 <= 1uLL)
        v88 = 1;
      else
        v88 = v77;
      v89 = 2 * v88;
      while (1)
      {
        v90 = *((unsigned __int8 *)__dst[0] + v87 + 1);
        if ((v90 & 0x7Fu) >= 0x40)
          goto LABEL_97;
        if (((v79 >> (v90 & 0x7F)) & 1) != 0)
          break;
        v87 += 2;
        if (v89 == v87)
          goto LABEL_58;
      }
      v91 = *((unsigned __int8 *)__dst[0] + v87);
      if (v91 == v90)
      {
LABEL_56:
        memmove(&v80[v87], &v80[v87 + 2], 2 * v81 - v87 - 2);
        v77 = HIDWORD(__dst[1]) - 1;
        goto LABEL_57;
      }
      v17 = (JSC::ARM64LogicalImmediate *)v11;
      if ((char)v91 == 63)
      {
        if ((char)v90 != 31)
        {
          v93 = v90 & 0x1F | 0xD2800000;
          goto LABEL_53;
        }
      }
      else
      {
        v92 = v90 == 31 || (char)v91 == 31;
        if (!v92)
        {
          v93 = v90 & 0xFFE0FFFF | ((v91 & 0x1F) << 16) | 0xAA0003E0;
LABEL_53:
          v94 = *(_DWORD *)(a1 + 200);
          if (v94 + 4 > *(_DWORD *)(a1 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v142, (uint64_t)v69, (uint64_t)v70, v71, v72, v73, v74, v75);
            v94 = *(_DWORD *)(a1 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 56) + v94) = v93;
          *(_DWORD *)(a1 + 200) += 4;
          v80 = (char *)__dst[0];
          v81 = HIDWORD(__dst[1]);
          v11 = (uint64_t)v17;
          goto LABEL_56;
        }
      }
      v93 = (char)v90 | (32 * (char)v91) | 0x91000000;
      goto LABEL_53;
    }
    v17 = (JSC::ARM64LogicalImmediate *)v76;
    v141 = (_WORD *)v16;
    LOBYTE(v27) = *(_BYTE *)__dst[0];
    LOBYTE(v16) = *((_BYTE *)__dst[0] + 1);
    JSC::MacroAssemblerARM64::swap(a1, *(char *)__dst[0], (char)v16, v71, v72, v73, v74, v75);
    memmove(__dst[0], (char *)__dst[0] + 2, 2 * HIDWORD(__dst[1]) - 2);
    v81 = (HIDWORD(__dst[1]) - 1);
    v92 = HIDWORD(__dst[1]) == 1;
    HIDWORD(__dst[1]) = v81;
    v8 = (unint64_t)__dst[0];
    v20 = (unint64_t)__dst[0] + 2 * v81;
    if (v92)
    {
      v131 = 0;
      v132 = 0;
      v133 = 0;
      v69 = (char *)__dst[0] + 2 * v81;
    }
    else
    {
LABEL_98:
      v135 = 2 * v81;
      v136 = (_BYTE *)v8;
      while (*v136 != v16)
      {
        v136 += 2;
        v135 -= 2;
        if (!v135)
          goto LABEL_101;
      }
      *v136 = (_BYTE)v27;
LABEL_101:
      v133 = 0;
      v137 = v8;
      v69 = (char *)v20;
      v138 = (char *)v20;
      do
      {
        if (*(unsigned __int8 *)v8 == *(unsigned __int8 *)(v8 + 1))
        {
          v139 = (char *)v8;
          if (v138 != (char *)__dst[0] + 2 * HIDWORD(__dst[1]))
          {
            if ((char *)v8 == v69)
            {
              v139 = v138;
            }
            else
            {
              v140 = v137 - (_QWORD)v69;
              memmove(v138, v69, v137 - (_QWORD)v69);
              v139 = &v138[v140];
            }
          }
          v69 = (char *)(v8 + 2);
          ++v133;
          v138 = v139;
        }
        v8 += 2;
        v137 += 2;
      }
      while (v8 < v20);
      v8 = (unint64_t)__dst[0];
      v131 = HIDWORD(__dst[1]);
      v132 = HIDWORD(__dst[1]);
      v20 = (unint64_t)v138;
    }
    v134 = (char *)(v8 + 2 * v131);
    if (v69 != v134)
    {
      memmove((void *)v20, v69, v134 - v69);
      v132 = HIDWORD(__dst[1]);
    }
    v77 = v132 - v133;
    v20 = 3592355840;
    v16 = (unint64_t)v141;
    LOBYTE(v27) = 1;
    v8 = 2852127712;
    v76 = (unint64_t)v17;
LABEL_57:
    HIDWORD(__dst[1]) = v77;
LABEL_58:
    ;
  }
  while (v77);
  v95 = __dst[0];
  if ((void *)v16 != __dst[0] && __dst[0])
  {
    __dst[0] = 0;
    LODWORD(__dst[1]) = 0;
    WTF::fastFree((unint64_t)v95, v69, (uint64_t)v70, v71, v72, v73, v74, v75);
  }
  v96 = -1207811152;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)v76, 3, v71, v72, v73, v74, v75);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v19, 2, v97, v98, v99, v100, v101);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v11, 0, v102, v103, v104, v105, v106);
  v114 = *(unsigned int *)(a1 + 640);
  if (v114 >= 4)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1987542C4);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(v114 >> 2), a1 + 264, v109, v110, v111, v112, v113);
  }
  else
  {
    v96 = -1207811137;
  }
  v115 = *(_DWORD *)(a1 + 200);
  if (v115 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v142, v107, v108, v109, v110, v111, v112, v113);
    v115 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v115) = v96;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::JIT::appendCall(a1, (uint64_t)operationSwitchImmWithUnknownKeyType, v108, v109, v110, v111, v112, v113, (int *)__dst);
  v123 = *(_DWORD *)(a1 + 200);
  if (v123 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v142, v116, v117, v118, v119, v120, v121, v122);
    v123 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v123) = -702611456;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::SimpleJumpTable::ensureCTITable(_DWORD **a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;

  v9 = *a1;
  if (!v9 || !*v9)
  {
    if (a2 && (v10 = *a2, (_DWORD)v10))
    {
      v11 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v10 + 8));
      *v11 = v10;
      bzero(v11 + 2, 8 * v10);
      v9 = *a1;
    }
    else
    {
      v11 = 0;
    }
    *a1 = v11;
    if (v9)
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t operationSwitchImmWithUnknownKeyType(uint64_t a1, unint64_t a2, unsigned int a3, int a4)
{
  unsigned int *v4;
  _DWORD *v5;
  int v6;
  int v7;
  BOOL v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t result;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v4 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(vars0 + 16) + 120) + 88);
  if (*v4 > a3)
  {
    v5 = v4 + 2;
    if (a2 < 0xFFFE000000000000)
    {
      if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        goto LABEL_11;
      v7 = (int)COERCE_DOUBLE(a2 - 0x2000000000000);
      if (COERCE_DOUBLE(a2 - 0x2000000000000) != (double)v7)
        goto LABEL_11;
      v8 = __OFSUB__(v7, a4);
      v6 = v7 - a4;
      if (v6 < 0 != v8)
        goto LABEL_11;
    }
    else
    {
      v6 = a2 - a4;
      if ((int)a2 < a4)
        goto LABEL_11;
    }
    v9 = *(_DWORD **)&v5[4 * a3];
    if (v9 && *v9 > v6)
    {
      v10 = &v9[2 * v6];
      return *((_QWORD *)v10 + 1);
    }
LABEL_11:
    v10 = &v5[4 * a3];
    return *((_QWORD *)v10 + 1);
  }
  result = 146;
  __break(0xC471u);
  return result;
}

void JSC::JIT::emit_op_switch_char(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int **v16;
  _DWORD **v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  unsigned int v52;
  unsigned __int8 v53[24];
  unsigned int v54;

  JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpSwitchChar>(a2, (uint64_t)&v52);
  v4 = v52;
  v5 = JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::operator int(v53);
  if (!v5)
    v5 = JSC::UnlinkedCodeBlock::outOfLineJumpOffset(*(_QWORD *)(a1 + 808), (unint64_t)a2);
  v12 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 808) + 152) + 8);
  if (*v12 <= v4)
  {
    __break(0xC471u);
    goto LABEL_19;
  }
  v13 = *(_DWORD **)(a1 + 912);
  if (*v13 <= v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1987547ECLL);
  }
  v14 = v54;
  v15 = v12 + 2;
  v16 = (unsigned int **)&v12[4 * v4 + 2];
  v17 = (_DWORD **)&v13[4 * v4 + 2];
  v18 = *(_DWORD *)(a1 + 640);
  LODWORD(v51) = 1;
  *(_QWORD *)((char *)&v51 + 4) = __PAIR64__(v5, v18);
  HIDWORD(v51) = v4;
  v19 = *(unsigned int *)(a1 + 676);
  if ((_DWORD)v19 == *(_DWORD *)(a1 + 672))
  {
    WTF::Vector<JSC::SwitchRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SwitchRecord>(a1 + 664, (unint64_t)&v51);
  }
  else
  {
    *(_OWORD *)(*(_QWORD *)(a1 + 664) + 16 * v19) = v51;
    ++*(_DWORD *)(a1 + 676);
  }
  JSC::SimpleJumpTable::ensureCTITable(v17, *v16, v6, v7, v8, v9, v10, v11);
  if ((int)v14 >= 0x40000000)
  {
    if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v14))
    {
      JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v40, v41, v42, v43, v44);
      JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v46, v47, v48, v49, v50);
      v25 = (v14 << 35) | 1;
      goto LABEL_9;
    }
    v45 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
    if (*v45 > (v14 - 0x40000000))
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v45[2 * (v14 - 0x40000000) + 2], 1, v40, v41, v42, v43, v44);
      goto LABEL_10;
    }
    __break(0xC471u);
LABEL_19:
    JUMPOUT(0x1987547CCLL);
  }
  v25 = (v14 << 35) | 0x1D;
LABEL_9:
  JSC::MacroAssemblerARM64::load64(a1, v25, 1, v20, v21, v22, v23, v24);
LABEL_10:
  JSC::MacroAssemblerARM64::load64(a1, 0x80000001ALL, 0, v26, v27, v28, v29, v30);
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,long long,unsigned long,int),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,unsigned long,int>((int *)&v51, a1, v4, (JSC::ARM64LogicalImmediate *)v15[4 * v4 + 2], v31, v32, v33, v34);
  JSC::MacroAssemblerARM64::farJump((_DWORD *)a1, 0, 40321, v35, v36, v37, v38, v39);
}

void JSC::JIT::callOperation<JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,long long,unsigned long,int),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,unsigned long,int>(int *a1, uint64_t a2, uint64_t a3, JSC::ARM64LogicalImmediate *this, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x8_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57[3];

  v11 = -1207811152;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)this, 3, (uint64_t)this, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, a3, 2, v12, v13, v14, v15, v16);
  v24 = *(unsigned int *)(a2 + 640);
  if (v24 >= 4)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      return;
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)(v24 >> 2), a2 + 264, v19, v20, v21, v22, v23);
  }
  else
  {
    v11 = -1207811137;
  }
  v25 = *(_DWORD *)(a2 + 200);
  if (v25 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v17, v18, v19, v20, v21, v22, v23);
    v25 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v25) = v11;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::JIT::appendCall(a2, (uint64_t)operationSwitchCharWithUnknownKeyType, v18, v19, v20, v21, v22, v23, a1);
  JSC::MacroAssemblerARM64::branchTest64(a2, 1, 1, 0xFFFFFFFFLL, v26, v27, v28, v29, (uint64_t)v57, v30);
  v36 = *(_QWORD *)(*(_QWORD *)(a2 + 352) + 90440);
  v37 = *(_QWORD *)(v36 + 8);
  v38 = *(unsigned int **)(v36 + 16);
  if (v38)
  {
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 + 1, v38));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v57, v37, a2, v31, v32, v33, v34, v35);
    do
    {
      v47 = __ldaxr(v38);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v38));
    if (!v48)
    {
      atomic_store(1u, v38);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v38, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v57, v37, a2, v31, v32, v33, v34, v35);
  }
}

uint64_t operationSwitchCharWithUnknownKeyType(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  _DWORD *v10;
  JSC::JSGlobalObject *v12;
  _DWORD *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int **v19;
  int *v20;
  unsigned int v21;
  unsigned int *v22;
  uint64_t vars0;

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = vars0;
  v10 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(vars0 + 16) + 120) + 88);
  if (*v10 <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x198754AB4);
  }
  v12 = a1;
  v13 = &v10[4 * a3];
  v16 = *((_QWORD *)v13 + 2);
  v15 = (uint64_t)(v13 + 4);
  result = v16;
  if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 2)
  {
    v17 = a4;
    v19 = (int **)(a2 + 8);
    v18 = *(_QWORD *)(a2 + 8);
    if ((v18 & 1) != 0)
    {
      if (*(_DWORD *)(a2 + 16) != 1)
        return result;
      v19 = JSC::JSRopeString::resolveRope(a2, v12, a3, a4, a9, a5, a6, a7, a8);
    }
    else if (*(_DWORD *)(v18 + 4) != 1)
    {
      return result;
    }
    if (*(_DWORD *)(v9 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v12, a3, a4, a5, a6, a7, a8))
    {
      return 0;
    }
    else
    {
      v20 = *v19;
      if (*v19)
      {
        if (v20[1])
          LODWORD(v20) = WTF::StringImpl::at((WTF::StringImpl *)v20, 0);
        else
          LODWORD(v20) = 0;
      }
      v21 = (_DWORD)v20 - v17;
      if ((int)v20 >= v17)
      {
        v22 = *(unsigned int **)(v15 - 8);
        if (v22)
        {
          if (*v22 > v21)
            v15 = (uint64_t)&v22[2 * v21 + 2];
        }
      }
      return *(_QWORD *)v15;
    }
  }
  return result;
}

void JSC::JIT::emit_op_switch_string(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  _DWORD *v19;
  unsigned int v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int v23;
  unsigned int v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int8x8_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  __int128 v89;

  v9 = *a2;
  if (v9 == 130)
  {
    v10 = *(_DWORD *)(a2 + 2);
    v11 = *(_DWORD *)(a2 + 6);
    v15 = *(unsigned int *)(a2 + 10);
  }
  else
  {
    if (v9 == 128)
    {
      v10 = *((unsigned __int16 *)a2 + 1);
      v11 = *((__int16 *)a2 + 2);
      v12 = *((__int16 *)a2 + 3);
      v13 = v12 + 1073741760;
      v14 = v12 <= 63;
    }
    else
    {
      v10 = a2[1];
      v11 = (char)a2[2];
      v12 = (char)a2[3];
      v13 = v12 + 1073741808;
      v14 = v12 <= 15;
    }
    if (v14)
      v15 = v12;
    else
      v15 = v13;
  }
  if (!v11)
    v11 = JSC::UnlinkedCodeBlock::outOfLineJumpOffset(*(_QWORD *)(a1 + 808), (unint64_t)a2);
  v16 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a1 + 808) + 152) + 16);
  if (*v16 <= v10)
  {
    __break(0xC471u);
    goto LABEL_52;
  }
  v17 = *(unsigned int **)(a1 + 920);
  if (*v17 <= v10)
  {
    __break(0xC471u);
    JUMPOUT(0x198754E60);
  }
  v18 = v10;
  v19 = v17 + 2;
  v20 = *(_DWORD *)(a1 + 640);
  LODWORD(v89) = 2;
  *(_QWORD *)((char *)&v89 + 4) = __PAIR64__(v11, v20);
  HIDWORD(v89) = v10;
  v21 = *(unsigned int *)(a1 + 676);
  if ((_DWORD)v21 == *(_DWORD *)(a1 + 672))
    *(_OWORD *)(*(_QWORD *)(a1 + 664) + 16 * *(unsigned int *)(a1 + 676)) = *(_OWORD *)WTF::Vector<JSC::SwitchRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 664, v21 + 1, (unint64_t)&v89);
  else
    *(_OWORD *)(*(_QWORD *)(a1 + 664) + 16 * v21) = v89;
  ++*(_DWORD *)(a1 + 676);
  v22 = *(_DWORD **)&v19[2 * v10];
  if (!v22 || !*v22)
  {
    v23 = v16[6 * v10 + 5];
    v24 = v23 + 1;
    if (v23 == -1)
    {
      v25 = 0;
    }
    else
    {
      v25 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * (v23 + 1) + 8));
      *v25 = v24;
      bzero(v25 + 2, 8 * v24);
      v22 = *(_DWORD **)&v19[2 * v18];
    }
    *(_QWORD *)&v19[2 * v18] = v25;
    if (v22)
      WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
  }
  if ((int)v15 < 0x40000000)
  {
    v26 = (v15 << 35) | 0x1D;
LABEL_22:
    JSC::MacroAssemblerARM64::load64(a1, v26, 1, a4, a5, a6, a7, a8);
    goto LABEL_23;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v15))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v69, v70, v71, v72, v73);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v75, v76, v77, v78, v79);
    v26 = (v15 << 35) | 1;
    goto LABEL_22;
  }
  v74 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v74 <= (v15 - 0x40000000))
  {
    __break(0xC471u);
LABEL_52:
    JUMPOUT(0x198754E40);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v74[2 * (v15 - 0x40000000) + 2], 1, v69, v70, v71, v72, v73);
LABEL_23:
  v34 = *(_DWORD *)(a1 + 200);
  if (v34 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v27, v28, v29, v30, v31, v32, v33);
    v34 = *(_DWORD *)(a1 + 200);
  }
  v35 = -1207811152;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v34) = -129989824;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v18, 2, v29, v30, v31, v32, v33);
  v43 = *(unsigned int *)(a1 + 640);
  if (v43 >= 4)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198754ED8);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(v43 >> 2), a1 + 264, v38, v39, v40, v41, v42);
  }
  else
  {
    v35 = -1207811137;
  }
  v44 = *(_DWORD *)(a1 + 200);
  if (v44 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v36, v37, v38, v39, v40, v41, v42);
    v44 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v44) = v35;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::JIT::appendCall(a1, (uint64_t)operationSwitchStringWithUnknownKeyType, v37, v38, v39, v40, v41, v42, &v88);
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, 1, 0xFFFFFFFFLL, v45, v46, v47, v48, (uint64_t)&v89, v49);
  v55 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440);
  v56 = *(_QWORD *)(v55 + 8);
  v57 = *(unsigned int **)(v55 + 16);
  if (v57)
  {
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 + 1, v57));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&v89, v56, a1, v50, v51, v52, v53, v54);
    do
    {
      v66 = __ldaxr(v57);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, v57));
    if (!v67)
    {
      atomic_store(1u, v57);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v57, v59, v60, v61, v62, v63, v64, v65);
      WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&v89, v56, a1, v50, v51, v52, v53, v54);
  }
  v68 = *(_DWORD *)(a1 + 200);
  if (v68 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v59, v60, v61, v62, v63, v64, v65);
    v68 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v68) = -702611456;
  *(_DWORD *)(a1 + 200) += 4;
}

uint64_t operationSwitchStringWithUnknownKeyType(JSC::JSGlobalObject *a1, unint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int **v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  WTF *v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  unsigned int v46;
  _DWORD *v47;
  uint64_t v48;
  _DWORD *v49;
  int **v50;
  uint64_t v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  WTF::StringImpl *v57;
  unsigned int v58;
  unint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t vars0;

  v9 = a3;
  v10 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v10 + 40) = vars0;
  v11 = *(_QWORD *)(vars0 + 16);
  v12 = *(_DWORD **)(*(_QWORD *)(v11 + 120) + 96);
  if (*v12 <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x1987551E0);
  }
  v13 = a2;
  v14 = a3;
  v15 = v12 + 2;
  if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 2)
  {
    v47 = *(_DWORD **)&v15[2 * a3];
    if (*v47 < (*v47 - 1))
    {
      __break(0xC471u);
      JUMPOUT(0x198755270);
    }
    return *(_QWORD *)&v47[2 * (*v47 - 1) + 2];
  }
  else
  {
    v16 = (int **)(a2 + 8);
    if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    {
      v48 = v10;
      v49 = v12 + 2;
      v50 = JSC::JSRopeString::resolveRope(a2, a1, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      v15 = v49;
      v14 = v9;
      v10 = v48;
      v16 = v50;
    }
    if (!*(_DWORD *)(v10 + 80))
      goto LABEL_7;
    v53 = *(_DWORD *)(v10 + 80);
    if ((v53 & 0x27) != 0 && (v53 & 0x20) == 0)
    {
      v54 = v10;
      v55 = v14;
      v56 = v15;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v15 = v56;
      v14 = v55;
      v10 = v54;
    }
    if (*(_QWORD *)(v10 + 16))
    {
      return 0;
    }
    else
    {
LABEL_7:
      v17 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(v11 + 56) + 152) + 16);
      if (*v17 <= v9)
      {
        __break(0xC471u);
        JUMPOUT(0x198755230);
      }
      v18 = &v17[6 * v14];
      v21 = *((_QWORD *)v18 + 1);
      v20 = v18 + 2;
      v19 = v21;
      v22 = v20[2];
      if (v21)
      {
        v23 = (WTF::StringImpl *)*v16;
        v24 = v22 - 1;
        v25 = v20[4];
        v26 = *((_DWORD *)v23 + 4);
        if (v26 < 0x100)
        {
          v41 = v23;
          v42 = v23;
          v43 = v10;
          v44 = v14;
          v45 = v15;
          v46 = WTF::StringImpl::hashSlowCase(v41);
          v15 = v45;
          v14 = v44;
          v10 = v43;
          v23 = v42;
          v27 = v46;
          v19 = *(_QWORD *)v20;
        }
        else
        {
          v27 = v26 >> 8;
        }
        v28 = (v27 ^ v25) & v24;
        v29 = v19 + 16 * v28;
        v30 = *(WTF **)v29;
        if (!*(_QWORD *)v29)
        {
LABEL_22:
          v22 = v20[2];
          v29 = v19 + 16 * v22;
          goto LABEL_23;
        }
        v31 = -1;
        while (1)
        {
          v32 = *((_DWORD *)v30 + 4);
          if (v32 < 0x100)
          {
            v59 = v13;
            v61 = v10;
            v34 = v14;
            v57 = v23;
            v35 = v15;
            v33 = WTF::StringImpl::hashSlowCase(v30);
            v15 = v35;
            v14 = v34;
            v23 = v57;
            v13 = v59;
            v10 = v61;
          }
          else
          {
            v33 = v32 >> 8;
          }
          if (++v31 > ((v28 + (_DWORD)v22 - ((v33 ^ v25) & v24)) & v24))
          {
            v19 = *(_QWORD *)v20;
            goto LABEL_22;
          }
          if (v33 == v27)
          {
            v58 = v27;
            v60 = v15;
            v62 = v10;
            v51 = v14;
            v52 = WTF::equal(*(WTF **)v29, v23, a3);
            v19 = *(_QWORD *)v20;
            if (v52)
            {
              v22 = v20[2];
              v15 = v60;
              v14 = v51;
              goto LABEL_23;
            }
            v15 = v60;
            v10 = v62;
            v14 = v51;
            v27 = v58;
          }
          else
          {
            v19 = *(_QWORD *)v20;
          }
          v28 = (v28 + 1) & v24;
          v29 = v19 + 16 * v28;
          v30 = *(WTF **)v29;
          if (!*(_QWORD *)v29)
            goto LABEL_22;
        }
      }
      v29 = 16 * v22;
LABEL_23:
      v36 = v19 + 16 * v22;
      v37 = *(unsigned int **)&v15[2 * v14];
      v38 = *v37;
      if (v29 == v36)
      {
        v39 = v20[3];
        if (v38 <= v39)
        {
          __break(0xC471u);
          JUMPOUT(0x198755250);
        }
      }
      else
      {
        v39 = *(_DWORD *)(v29 + 12);
        if (v38 <= v39)
        {
          __break(0xC471u);
          JUMPOUT(0x198755110);
        }
      }
      return *(_QWORD *)&v37[2 * v39 + 2];
    }
  }
}

void JSC::JIT::emit_op_eq_null(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x8_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99[2];
  char v100;
  __int16 v101;
  char v102;
  unsigned int v103[2];
  char v104;
  __int16 v105;
  char v106;
  unsigned int v107[3];
  unsigned int v108[3];

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v10 > 63)
      v10 += 1073741760;
    v12 = *((__int16 *)a2 + 2);
    if (v12 <= 63)
      goto LABEL_6;
LABEL_48:
    v87 = v12 + v11;
    goto LABEL_49;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    if (v10 > 15)
      v10 += 1073741808;
    v12 = (char)a2[2];
    if (v12 <= 15)
    {
LABEL_6:
      v13 = v12;
      v14 = v10;
LABEL_7:
      v15 = (v13 << 35) | 0x1D;
LABEL_8:
      JSC::MacroAssemblerARM64::load64(a1, v15, 0, a4, a5, a6, a7, a8);
      goto LABEL_9;
    }
    goto LABEL_48;
  }
  v10 = *(_DWORD *)(a2 + 2);
  v87 = *(_DWORD *)(a2 + 6);
LABEL_49:
  v13 = v87;
  v14 = v10;
  if (v87 < 0x40000000)
    goto LABEL_7;
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v87))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v88, v89, v90, v91, v92);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v94, v95, v96, v97, v98);
    v15 = v13 << 35;
    goto LABEL_8;
  }
  v93 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v93 <= (v13 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x1987558D4);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v93[2 * (v13 - 0x40000000) + 2], 0, v88, v89, v90, v91, v92);
LABEL_9:
  JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v16, v17, v18, v19, v20, (uint64_t)v108);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198755760);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v29 = *(_BYTE *)(a1 + 304) & 0x1F | 0x38406000;
  v30 = *(_DWORD *)(a1 + 200);
  if (v30 + 4 > *(_DWORD *)(a1 + 192))
  {
    v28 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v21, v22, v23, v24, v25, v26, v27).n128_u64[0];
    v30 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v30) = v29;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, a1, 1, 17, v24, v25, v26, v27, (uint64_t)v107, v28);
  v38 = *(_DWORD *)(a1 + 200);
  if (v38 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v31, v32, v33, v34, v35, v36, v37);
    v38 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v38) = 1384120320;
  v39 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v39; v39 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v39)
  {
    if ((v39 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v31, v32, v33, v34, v35, v36, v37);
      v39 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v39) = -721215457;
    v39 = *(_DWORD *)(a1 + 200) + 4;
  }
  v40 = v39;
  if ((v39 + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v31, v32, v33, v34, v35, v36, v37);
    v40 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v40) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v41 = 69;
  else
    v41 = 65;
  v103[0] = v39;
  v103[1] = 0;
  v104 = v41;
  v105 = 15;
  v106 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v107, a1, v32, v33, v34, v35, v36, v37);
  v49 = *(_DWORD *)(a1 + 200);
  if (v49 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v42, v43, v44, v45, v46, v47, v48);
    v49 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v49) = -1203765246;
  v50 = *(_DWORD *)(a1 + 200);
  v51 = v50 + 4;
  *(_DWORD *)(a1 + 200) = v50 + 4;
  if ((v50 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v42, v43, v44, v45, v46, v47, v48);
    v51 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v51) = -746787774;
  v52 = *(_DWORD *)(a1 + 200);
  v53 = v52 + 4;
  *(_DWORD *)(a1 + 200) = v52 + 4;
  if ((v52 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v42, v43, v44, v45, v46, v47, v48);
    v53 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v53) = -129989824;
  v54 = *(_DWORD *)(a1 + 200);
  v55 = v54 + 4;
  *(_DWORD *)(a1 + 200) = v54 + 4;
  if ((v54 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v42, v43, v44, v45, v46, v47, v48);
    v55 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v55) = -129859518;
  v56 = *(_DWORD *)(a1 + 200);
  v57 = v56 + 4;
  *(_DWORD *)(a1 + 200) = v56 + 4;
  if ((v56 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v42, v43, v44, v45, v46, v47, v48);
    v57 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v57) = -352190433;
  v58 = *(_DWORD *)(a1 + 200);
  v59 = v58 + 4;
  *(_DWORD *)(a1 + 200) = v58 + 4;
  if ((v58 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v42, v43, v44, v45, v46, v47, v48);
    v59 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v59) = 446633952;
  v60 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v60; v60 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v60)
  {
    if ((v60 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v42, v43, v44, v45, v46, v47, v48);
      v60 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v60) = -721215457;
    v60 = *(_DWORD *)(a1 + 200) + 4;
  }
  v61 = v60;
  if ((v60 + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v42, v43, v44, v45, v46, v47, v48);
    v61 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v61) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v62 = 69;
  else
    v62 = 65;
  v99[0] = v60;
  v99[1] = 0;
  v100 = v62;
  v101 = 15;
  v102 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v108, a1, v43, v44, v45, v46, v47, v48);
  JSC::MacroAssemblerARM64::and64(a1, -9, 0, 0);
  v70 = *(_DWORD *)(a1 + 200);
  if (v70 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v63, v64, v65, v66, v67, v68, v69);
    v70 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v70) = -251656161;
  v71 = *(_DWORD *)(a1 + 200);
  v72 = v71 + 4;
  *(_DWORD *)(a1 + 200) = v71 + 4;
  if ((v71 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v63, v64, v65, v66, v67, v68, v69);
    v72 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v72) = 446633952;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v99, a1, v64, v65, v66, v67, v68, v69);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v103, a1, v73, v74, v75, v76, v77, v78);
  v86 = *(_DWORD *)(a1 + 200);
  if (v86 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v79, v80, v81, v82, v83, v84, v85);
    v86 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v86) = 285218816;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 0, (v14 << 35) | 0x1D, v81, v82, v83, v84, v85);
}

void JSC::JIT::emit_op_neq_null(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x8_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99[2];
  char v100;
  __int16 v101;
  char v102;
  unsigned int v103[2];
  char v104;
  __int16 v105;
  char v106;
  unsigned int v107[3];
  unsigned int v108[3];

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v10 > 63)
      v10 += 1073741760;
    v12 = *((__int16 *)a2 + 2);
    if (v12 <= 63)
      goto LABEL_6;
LABEL_57:
    v87 = v12 + v11;
    goto LABEL_58;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    if (v10 > 15)
      v10 += 1073741808;
    v12 = (char)a2[2];
    if (v12 <= 15)
    {
LABEL_6:
      v13 = v12;
      v14 = v10;
LABEL_7:
      v15 = (v13 << 35) | 0x1D;
LABEL_8:
      JSC::MacroAssemblerARM64::load64(a1, v15, 0, a4, a5, a6, a7, a8);
      goto LABEL_9;
    }
    goto LABEL_57;
  }
  v10 = *(_DWORD *)(a2 + 2);
  v87 = *(_DWORD *)(a2 + 6);
LABEL_58:
  v13 = v87;
  v14 = v10;
  if (v87 < 0x40000000)
    goto LABEL_7;
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v87))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v88, v89, v90, v91, v92);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v94, v95, v96, v97, v98);
    v15 = v13 << 35;
    goto LABEL_8;
  }
  v93 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v93 <= (v13 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x198755F20);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v93[2 * (v13 - 0x40000000) + 2], 0, v88, v89, v90, v91, v92);
LABEL_9:
  JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v16, v17, v18, v19, v20, (uint64_t)v108);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198755D04);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v29 = *(_BYTE *)(a1 + 304) & 0x1F | 0x38406000;
  v30 = *(_DWORD *)(a1 + 200);
  if (v30 + 4 > *(_DWORD *)(a1 + 192))
  {
    v28 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v21, v22, v23, v24, v25, v26, v27).n128_u64[0];
    v30 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v30) = v29;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, a1, 1, 17, v24, v25, v26, v27, (uint64_t)v107, v28);
  v38 = *(_DWORD *)(a1 + 200);
  if (v38 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v31, v32, v33, v34, v35, v36, v37);
    v38 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v38) = 838861792;
  v39 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v39; v39 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v39)
  {
    if ((v39 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v31, v32, v33, v34, v35, v36, v37);
      v39 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v39) = -721215457;
    v39 = *(_DWORD *)(a1 + 200) + 4;
  }
  v40 = v39;
  if ((v39 + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v31, v32, v33, v34, v35, v36, v37);
    v40 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v40) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v41 = 69;
  else
    v41 = 65;
  v103[0] = v39;
  v103[1] = 0;
  v104 = v41;
  v105 = 15;
  v106 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v107, a1, v32, v33, v34, v35, v36, v37);
  v49 = *(_DWORD *)(a1 + 200);
  if (v49 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v42, v43, v44, v45, v46, v47, v48);
    v49 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v49) = -1203765246;
  v50 = *(_DWORD *)(a1 + 200);
  v51 = v50 + 4;
  *(_DWORD *)(a1 + 200) = v50 + 4;
  if ((v50 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v42, v43, v44, v45, v46, v47, v48);
    v51 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v51) = -746787774;
  v52 = *(_DWORD *)(a1 + 200);
  v53 = v52 + 4;
  *(_DWORD *)(a1 + 200) = v52 + 4;
  if ((v52 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v42, v43, v44, v45, v46, v47, v48);
    v53 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v53) = -129989824;
  v54 = *(_DWORD *)(a1 + 200);
  v55 = v54 + 4;
  *(_DWORD *)(a1 + 200) = v54 + 4;
  if ((v54 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v42, v43, v44, v45, v46, v47, v48);
    v55 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v55) = -129859518;
  v56 = *(_DWORD *)(a1 + 200);
  v57 = v56 + 4;
  *(_DWORD *)(a1 + 200) = v56 + 4;
  if ((v56 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v42, v43, v44, v45, v46, v47, v48);
    v57 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v57) = -352190433;
  v58 = *(_DWORD *)(a1 + 200);
  v59 = v58 + 4;
  *(_DWORD *)(a1 + 200) = v58 + 4;
  if ((v58 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v42, v43, v44, v45, v46, v47, v48);
    v59 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v59) = 446629856;
  v60 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v60; v60 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v60)
  {
    if ((v60 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v42, v43, v44, v45, v46, v47, v48);
      v60 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v60) = -721215457;
    v60 = *(_DWORD *)(a1 + 200) + 4;
  }
  v61 = v60;
  if ((v60 + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v42, v43, v44, v45, v46, v47, v48);
    v61 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v61) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v62 = 69;
  else
    v62 = 65;
  v99[0] = v60;
  v99[1] = 0;
  v100 = v62;
  v101 = 15;
  v102 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v108, a1, v43, v44, v45, v46, v47, v48);
  JSC::MacroAssemblerARM64::and64(a1, -9, 0, 0);
  v70 = *(_DWORD *)(a1 + 200);
  if (v70 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v63, v64, v65, v66, v67, v68, v69);
    v70 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v70) = -251656161;
  v71 = *(_DWORD *)(a1 + 200);
  v72 = v71 + 4;
  *(_DWORD *)(a1 + 200) = v71 + 4;
  if ((v71 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v63, v64, v65, v66, v67, v68, v69);
    v72 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v72) = 446629856;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v99, a1, v64, v65, v66, v67, v68, v69);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v103, a1, v73, v74, v75, v76, v77, v78);
  v86 = *(_DWORD *)(a1 + 200);
  if (v86 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v79, v80, v81, v82, v83, v84, v85);
    v86 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v86) = 285218816;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 0, (v14 << 35) | 0x1D, v81, v82, v83, v84, v85);
}

uint64_t JSC::JIT::emitCheckTraps(JSC::JIT *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  unsigned int v18;
  uint64_t result;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;

  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198756080);
  }
  v9 = *((_QWORD *)this + 44) + 80;
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v9, *((char *)this + 304), a4, a5, a6, a7, a8);
  v18 = *((_DWORD *)this + 50);
  if (v18 + 4 > *((_DWORD *)this + 48))
  {
    v17 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::JIT *)((char *)this + 56), v10, v11, v12, v13, v14, v15, v16).n128_u64[0];
    v18 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v18) = -1203764687;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xF, (uint64_t)this, 1, 17, v13, v14, v15, v16, (uint64_t)&v25, v17);
  result = (uint64_t)this + 648;
  v20 = v26;
  v21 = *((_DWORD *)this + 160);
  v27 = v25;
  v28 = v26;
  v29 = v21;
  v22 = *((unsigned int *)this + 165);
  if ((_DWORD)v22 == *((_DWORD *)this + 164))
  {
    result = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v22 + 1, (unint64_t)&v27);
    v24 = *((_QWORD *)this + 81) + 16 * *((unsigned int *)this + 165);
    *(_DWORD *)v24 = *(_DWORD *)result;
    *(_QWORD *)(v24 + 4) = *(_QWORD *)(result + 4);
    *(_DWORD *)(v24 + 12) = *(_DWORD *)(result + 12);
  }
  else
  {
    v23 = *(_QWORD *)result + 16 * v22;
    *(_DWORD *)v23 = v25;
    *(_QWORD *)(v23 + 4) = v20;
    *(_DWORD *)(v23 + 12) = v21;
  }
  ++*((_DWORD *)this + 165);
  return result;
}

void JSC::JIT::emit_op_enter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x8_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  int *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int i;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unint64_t v105;
  unsigned int v106;
  unint64_t v107;
  int v108;
  unsigned int v109;
  unint64_t v110;
  int v111;

  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 808) + 16);
  v9 = v8 & 0x7FFFFFFF;
  if ((v8 & 0x7FFFFFFFu) <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x198756728);
  }
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 800) + 32) & 0x80000000) != 0)
    JSC::MacroAssemblerARM64::store8(a1, 1, *(_QWORD *)(a1 + 352) + 41452, a4, a5, a6, a7, a8);
  if (v9 == 5)
  {
    if (*(_DWORD *)(*(_QWORD *)(a1 + 800) + 48) == -5)
      goto LABEL_6;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, 10, 2, a4, a5, a6, a7, a8);
  }
  else
  {
    if (v9 == 4)
      goto LABEL_6;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, 10, 2, a4, a5, a6, a7, a8);
    if ((v8 & 1) == 0)
    {
      v70 = 0;
      goto LABEL_48;
    }
  }
  JSC::MacroAssemblerARM64::store64(a1, 2, ((unint64_t)((0x1FFFFFFF * v9) & 0x1FFFFFFF) << 35) | 0x1D, a4, a5, a6, a7, a8);
  v70 = 1;
LABEL_48:
  v71 = v9 - 4;
  if ((v9 - 4) > 0xA)
  {
    JSC::MacroAssemblerARM64::add64(a1, 4294967264, 29, 4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::add64(a1, 8 * (v70 - v8), 29, 5, v86, v87, v88, v89);
    for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v90, v91, v92, v93, v94, v95, v96);
        i = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
      i = *(_DWORD *)(a1 + 200) + 4;
    }
    *(_DWORD *)(a1 + 208) = 0;
    v98 = i;
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v90, v91, v92, v93, v94, v95, v96);
      v98 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v98) = -1467938654;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::branch64(a1, 11, 5, 4, v93, v94, v95, v96, (uint64_t)&v109);
    v108 = i;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(&v109, (unsigned int *)&v108, a1, v99, v100, v101, v102, v103);
  }
  else if (v70 < v71)
  {
    v72 = (v70 << 15) - (v8 << 15);
    v73 = 8 * v70 - 8 * v8;
    do
    {
      if ((((int)v73 >> 3) + 64) > 0x7F)
      {
        JSC::MacroAssemblerARM64::store64(a1, 2, ((unint64_t)v73 << 32) | 0x1D, a4, a5, a6, a7, a8);
        JSC::MacroAssemblerARM64::store64(a1, 2, (v73 << 32) + 0x80000001DLL, v75, v76, v77, v78, v79);
      }
      else
      {
        v74 = *(_DWORD *)(a1 + 200);
        if (v74 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          v74 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v74) = v72 & 0x3F8000 | 0xA9000BA2;
        *(_DWORD *)(a1 + 200) += 4;
      }
      v70 += 2;
      v72 += 0x10000;
      v73 = (v73 + 16);
    }
    while (v70 < v71);
  }
LABEL_6:
  v11 = *(unsigned int *)(*(_QWORD *)(a1 + 800) + 48);
  v12 = *(_DWORD *)(a1 + 200);
  if (v12 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = -129924192;
  v13 = *(_DWORD *)(a1 + 200);
  v14 = v13 + 4;
  *(_DWORD *)(a1 + 200) = v13 + 4;
  if ((v13 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = -129957888;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 0, (v11 << 35) | 0x1D, a4, a5, a6, a7, a8);
  v23 = *(_DWORD *)(a1 + 200);
  if (v23 + 4 > *(_DWORD *)(a1 + 192))
  {
    v22 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v15, v16, v17, v18, v19, v20, v21).n128_u64[0];
    v23 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = -129956959;
  v24 = *(_DWORD *)(a1 + 200);
  v25 = v24 + 4;
  *(_DWORD *)(a1 + 200) = v24 + 4;
  if ((v24 + 8) > *(_DWORD *)(a1 + 192))
  {
    v22 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v15, v16, v17, v18, v19, v20, v21).n128_u64[0];
    v25 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = -129728477;
  v26 = *(_DWORD *)(a1 + 200);
  v27 = v26 + 4;
  *(_DWORD *)(a1 + 200) = v26 + 4;
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198756788);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v28 = *(_BYTE *)(a1 + 304) & 0x1F | 0xB8450060;
  if ((v26 + 8) > *(_DWORD *)(a1 + 192))
  {
    v22 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v15, v16, v17, v18, v19, v20, v21).n128_u64[0];
    v27 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = v28;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xF, a1, 1, 17, v18, v19, v20, v21, (uint64_t)&v106, v22);
  v36 = (_QWORD *)(a1 + 648);
  v37 = *(_DWORD *)(a1 + 640);
  v109 = v106;
  v110 = v107;
  v111 = v37;
  v38 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v38 == *(_DWORD *)(a1 + 656))
  {
    v80 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v38 + 1, (unint64_t)&v109);
    v81 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v81 = *(_DWORD *)v80;
    *(_QWORD *)(v81 + 4) = *(_QWORD *)(v80 + 4);
    v41 = (int *)(v81 + 12);
    v39 = (int *)(v80 + 12);
  }
  else
  {
    v39 = &v111;
    v40 = *v36 + 16 * v38;
    *(_DWORD *)v40 = v106;
    *(_QWORD *)(v40 + 4) = v110;
    v41 = (int *)(v40 + 12);
  }
  *v41 = *v39;
  ++*(_DWORD *)(a1 + 660);
  v42 = *(_DWORD *)(a1 + 200);
  if (v42 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v29, v30, v31, v32, v33, v34, v35);
    v42 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v42) = 943747106;
  v43 = *(_DWORD *)(a1 + 200);
  v44 = v43 + 4;
  *(_DWORD *)(a1 + 200) = v43 + 4;
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1987567C8);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v45 = *(_BYTE *)(a1 + 304) & 0x1F | 0xB942F860;
  if ((v43 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v29, v30, v31, v32, v33, v34, v35);
    v44 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v44) = v45;
  v46 = *(_DWORD *)(a1 + 200);
  v47 = v46 + 4;
  *(_DWORD *)(a1 + 200) = v46 + 4;
  if ((v46 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v29, v30, v31, v32, v33, v34, v35);
    v47 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v47) = 1796276319;
  v48 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v48;
  if (*(_BYTE *)(a1 + 328))
  {
    while ((signed int)v48 < *(_DWORD *)(a1 + 52))
    {
      if (v48 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v29, v30, v31, v32, v33, v34, v35);
        v48 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v48) = -721215457;
      v48 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v48;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  if (v48 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v29, v30, v31, v32, v33, v34, v35);
    v48 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v48) = 1409286153;
  v49 = *(_DWORD *)(a1 + 200);
  v50 = v49 + 4;
  *(_DWORD *)(a1 + 200) = v49 + 4;
  v51 = v49 + 8;
  v52 = v49 + 4;
  if (v51 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v29, v30, v31, v32, v33, v34, v35);
    v52 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v52) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  v53 = 0xFF00098600000000;
  if (!*(_BYTE *)(a1 + 328))
    v53 = 0xFF00098200000000;
  v54 = *(_DWORD *)(a1 + 640);
  v109 = v50;
  v110 = v53;
  v111 = v54;
  v55 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v55 == *(_DWORD *)(a1 + 656))
  {
    v82 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v55 + 1, (unint64_t)&v109);
    v83 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v83 = *(_DWORD *)v82;
    *(_QWORD *)(v83 + 4) = *(_QWORD *)(v82 + 4);
    *(_DWORD *)(v83 + 12) = *(_DWORD *)(v82 + 12);
  }
  else
  {
    v56 = *v36 + 16 * v55;
    *(_DWORD *)v56 = v50;
    *(_QWORD *)(v56 + 4) = v53;
    *(_DWORD *)(v56 + 12) = v54;
  }
  ++*(_DWORD *)(a1 + 660);
  if (HIBYTE(dword_1ECF4C240) && *(_BYTE *)(a1 + 792))
  {
    v57 = *(_DWORD *)(a1 + 200);
    if (v57 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v29, v30, v31, v32, v33, v34, v35);
      v57 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v57) = -1202946014;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::branchAdd32(a1, 5, 2, DWORD2(xmmword_1ECF4C4F4), 2, v33, v34, v35, (uint64_t)&v104);
    v65 = v105;
    v66 = *(_DWORD *)(a1 + 640);
    v109 = v104;
    v110 = v105;
    v111 = v66;
    v67 = *(unsigned int *)(a1 + 660);
    if ((_DWORD)v67 == *(_DWORD *)(a1 + 656))
    {
      v84 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v67 + 1, (unint64_t)&v109);
      v85 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
      *(_DWORD *)v85 = *(_DWORD *)v84;
      *(_QWORD *)(v85 + 4) = *(_QWORD *)(v84 + 4);
      *(_DWORD *)(v85 + 12) = *(_DWORD *)(v84 + 12);
    }
    else
    {
      v68 = *v36 + 16 * v67;
      *(_DWORD *)v68 = v104;
      *(_QWORD *)(v68 + 4) = v65;
      *(_DWORD *)(v68 + 12) = v66;
    }
    ++*(_DWORD *)(a1 + 660);
    v69 = *(_DWORD *)(a1 + 200);
    if (v69 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v58, v59, v60, v61, v62, v63, v64);
      v69 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v69) = -1207140318;
    *(_DWORD *)(a1 + 200) += 4;
  }
}

uint64_t JSC::JIT::op_enter_handlerGenerator@<X0>(JSC::JIT *this@<X0>, int *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  const char *v20;
  uint64_t v21;
  int8x8_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint8x8_t v35;
  __int32 v36;
  uint8x8_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v45;
  void *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int8x8_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  char v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  unsigned int v130;
  int *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int8x8_t v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  unsigned int v158;
  _DWORD *v159;
  char *v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  void *v165;
  unsigned int v167;
  unsigned int v168;
  unint64_t v169;
  pthread_key_t *v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  WTF *v179;
  unsigned int v180;
  char v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  char v206;
  uint64_t v207;
  _BYTE *v208;
  uint64_t v209;
  int *v210;
  int v211;
  uint64_t v212;
  __int128 v213;
  int v214;
  int v215;
  unsigned int v216[2];
  char v217;
  __int16 v218;
  char v219;
  unsigned int v220[3];
  char v221;
  __int128 *v222;
  void *__dst;
  uint64_t v224;
  uint64_t v225;
  WTF *v226;
  _BYTE v227[128];
  unsigned int v228;
  char v229;
  int v230;
  int v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  _DWORD v235[6];
  char v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  _BYTE *v240;
  _BYTE v241[128];
  unsigned int v242;
  unsigned int v243;
  int v244;
  char v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  _DWORD *v249;
  char v250;
  uint64_t v251;
  int v252;
  _DWORD *v253;
  char v254;
  uint64_t v255;
  int v256;
  char v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;

  v260 = *MEMORY[0x1E0C80C00];
  LOBYTE(v235[0]) = 0;
  v236 = 0;
  v237 = 0;
  v238 = 0;
  v239 = 0x8000000080000000;
  v240 = v241;
  v242 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    __dst = v220;
    *(_QWORD *)&v213 = &__dst;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v213, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v242;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v242 < v17)
    {
      if (v240 && v240 != v241)
      {
        WTF::fastFree((unint64_t)v240, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v240 = (_BYTE *)v15;
      v242 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v242;
    }
  }
  v18 = 0;
  v245 = 1;
  v250 = 16;
  v252 = 0x10000;
  v254 = 17;
  v256 = 0x20000;
  v243 = 0;
  v244 = 0;
  v246 = 0u;
  v247 = 0u;
  v248 = 0u;
  v249 = v235;
  v251 = 0;
  v253 = v235;
  v255 = 0;
  v257 = 0;
  v258 = 0;
  v259 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v240, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v243;
  }
  *(_DWORD *)&v240[v18] = -1447068675;
  v243 += 4;
  if (!v245)
  {
    v19 = "/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/assembler/MacroAssemblerARM64.h";
    v20 = "RegisterID JSC::MacroAssemblerARM64::getCachedMemoryTempRegisterIDAndInvalidate()";
    v21 = 164;
    __break(0xC471u);
LABEL_130:
    __break(1u);
    goto LABEL_131;
  }
  v253[52] &= ~v256;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v235, (uint64_t)this + 80, v254, v9, v10, v11, v12, v13);
  v23 = v243;
  if (v243 + 4 > v242)
  {
LABEL_131:
    v22 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v240, (uint64_t)v19, (uint64_t)v20, v21, v10, v11, v12, v13).n128_u64[0];
    v23 = v243;
  }
  *(_DWORD *)&v240[v23] = -1203764687;
  v243 += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xF, (uint64_t)v235, 0, 17, v10, v11, v12, v13, (uint64_t)v220, v22);
  v24 = v243;
  if (v243 + 4 > v242)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v240, (uint64_t)v19, (uint64_t)v20, v21, v10, v11, v12, v13);
    v24 = v243;
  }
  v210 = a2;
  a2 = &v215;
  v25 = &v212;
  *(_DWORD *)&v240[v24] = -1207811137;
  v26 = v243;
  v27 = v243 + 4;
  v243 += 4;
  if (v26 + 8 > v242)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v240, (uint64_t)v19, (uint64_t)v20, v21, v10, v11, v12, v13);
    v27 = v243;
  }
  *(_DWORD *)&v240[v27] = -129989823;
  v243 += 4;
  __dst = &v225;
  LOWORD(v225) = 1;
  v224 = 0x100000001;
  v28 = 1;
  do
  {
    v29 = 0;
    v30 = 0;
    v31 = (char *)__dst;
    v32 = v28;
    do
    {
      if ((*((_BYTE *)__dst + v29 + 1) & 0x40) != 0)
        goto LABEL_130;
      v30 |= 1 << *((_BYTE *)__dst + v29 + 1);
      v29 += 2;
    }
    while (2 * v28 != v29);
    v33 = 0;
    do
    {
      v34 = *((_BYTE *)__dst + v33) & 0x7F;
      if (v34 >= 0x40)
        goto LABEL_130;
      v30 &= ~(1 << v34);
      v33 += 2;
    }
    while (2 * v28 != v33);
    v35 = (uint8x8_t)vcnt_s8((int8x8_t)v30);
    v35.i16[0] = vaddlv_u8(v35);
    v36 = v35.i32[0];
    v37 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v30));
    v37.i16[0] = vaddlv_u8(v37);
    if (v37.i32[0] + v36)
    {
      v38 = 0;
      if (v28 <= 1uLL)
        v39 = 1;
      else
        v39 = v28;
      v40 = 2 * v39;
      while (1)
      {
        v41 = *((unsigned __int8 *)__dst + v38 + 1);
        if ((v41 & 0x7Fu) >= 0x40)
          goto LABEL_130;
        if (((v30 >> (v41 & 0x7F)) & 1) != 0)
          break;
        v38 += 2;
        if (v40 == v38)
          goto LABEL_44;
      }
      v42 = *((unsigned __int8 *)__dst + v38);
      if (v42 == v41)
      {
LABEL_43:
        memmove(&v31[v38], &v31[v38 + 2], 2 * v32 - v38 - 2);
        v28 = --HIDWORD(v224);
        continue;
      }
      if ((char)v42 == 63)
      {
        v43 = v243;
        if (v41 != 31)
        {
          v45 = v41 & 0x1F | 0xD2800000;
          goto LABEL_40;
        }
      }
      else
      {
        v43 = v243;
        if ((char)v41 != 31 && (char)v42 != 31)
        {
          v45 = v41 & 0xFFE0FFFF | ((v42 & 0x1F) << 16) | 0xAA0003E0;
LABEL_40:
          if (v43 + 4 > v242)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v240, (uint64_t)v19, (uint64_t)v20, v21, v10, v11, v12, v13);
            v43 = v243;
          }
          *(_DWORD *)&v240[v43] = v45;
          v243 += 4;
          v31 = (char *)__dst;
          v32 = HIDWORD(v224);
          goto LABEL_43;
        }
      }
      v45 = (char)v41 | (32 * (char)v42) | 0x91000000;
      goto LABEL_40;
    }
    v205 = *(_BYTE *)__dst;
    v206 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)v235, *(char *)__dst, v206, v21, v10, v11, v12, v13);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v224) - 2);
    v207 = --HIDWORD(v224);
    if (HIDWORD(v224))
    {
      v208 = __dst;
      v209 = 2 * v207;
      while (*v208 != v206)
      {
        v208 += 2;
        v209 -= 2;
        if (!v209)
          goto LABEL_140;
      }
      *v208 = v205;
    }
LABEL_140:
    WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,1u>(std::array<JSC::ARM64Registers::RegisterID,1u>,std::array<JSC::ARM64Registers::RegisterID,1u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)&v213, 0);
    v28 = HIDWORD(v224);
LABEL_44:
    ;
  }
  while (v28);
  v46 = __dst;
  if (&v225 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v224) = 0;
    WTF::fastFree((unint64_t)v46, v19, (uint64_t)v20, v21, v10, v11, v12, v13);
  }
  if (!v245)
  {
    __break(0xC471u);
    JUMPOUT(0x198757560);
  }
  v249[52] &= ~v252;
  v47 = v250;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v235, (uint64_t)operationHandleTraps, v250, v21, v10, v11, v12, v13);
  v244 = 0;
  v56 = v243;
  if (v243 + 4 > v242)
  {
    v55 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v240, v48, v49, v50, v51, v52, v53, v54).n128_u64[0];
    v56 = v243;
  }
  *(_DWORD *)&v240[v56] = (32 * (v47 & 0x1F)) | 0xD63F0000;
  v243 += 4;
  JSC::AssemblyHelpers::emitExceptionCheck((uint64_t)v235, (uint64_t)this, 0, 0, 0xFFFFFFFFLL, v52, v53, v54, (uint64_t)&__dst, v55);
  v62 = *((_QWORD *)this + 11305);
  v63 = *(_QWORD *)(v62 + 8);
  v64 = *(unsigned int **)(v62 + 16);
  if (v64)
  {
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 + 1, v64));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v63, (uint64_t)v235, v57, v58, v59, v60, v61);
    do
    {
      v73 = __ldaxr(v64);
      v74 = v73 - 1;
    }
    while (__stlxr(v74, v64));
    if (!v74)
    {
      atomic_store(1u, v64);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v64, v66, v67, v68, v69, v70, v71, v72);
      WTF::fastFree(v197, v198, v199, v200, v201, v202, v203, v204);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v63, (uint64_t)v235, v57, v58, v59, v60, v61);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v220, (uint64_t)v235, v67, v68, v69, v70, v71, v72);
  v82 = v243;
  if (v243 + 4 > v242)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v240, v75, v76, v77, v78, v79, v80, v81);
    v82 = v243;
  }
  *(_DWORD *)&v240[v82] = -129956959;
  v83 = v243;
  v84 = v243 + 4;
  v243 += 4;
  if (v83 + 8 > v242)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v240, v75, v76, v77, v78, v79, v80, v81);
    v84 = v243;
  }
  *(_DWORD *)&v240[v84] = 943747106;
  v243 += 4;
  if (!v245)
  {
    __break(0xC471u);
    JUMPOUT(0x1987575C0);
  }
  v249[52] &= ~v252;
  JSC::MacroAssemblerARM64::load32((uint64_t)v235, (uint64_t)this + 760, v250, v77, v78, v79, v80, v81);
  v92 = v243;
  if (v243 + 4 > v242)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v240, v85, v86, v87, v88, v89, v90, v91);
    v92 = v243;
  }
  *(_DWORD *)&v240[v92] = 1795293727;
  v93 = v243 + 4;
  v243 += 4;
  if (v257)
  {
    for (; (int)v93 < SHIDWORD(v239); v243 = v93)
    {
      if (v93 + 4 > v242)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v240, v85, v86, v87, v88, v89, v90, v91);
        v93 = v243;
      }
      *(_DWORD *)&v240[v93] = -721215457;
      v93 = v243 + 4;
    }
    v244 = 0;
  }
  if (v93 + 4 > v242)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v240, v85, v86, v87, v88, v89, v90, v91);
    v93 = v243;
  }
  *(_DWORD *)&v240[v93] = 1409286147;
  v94 = v243;
  v243 += 4;
  v95 = v243;
  v96 = v94 + 8;
  v97 = v243;
  if (v96 > v242)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v240, v85, v86, v87, v88, v89, v90, v91);
    v97 = v243;
  }
  *(_DWORD *)&v240[v97] = -721215457;
  if (v257)
    v98 = -122;
  else
    v98 = -126;
  v99 = v243;
  v100 = v243 + 4;
  v243 += 4;
  v216[0] = v95;
  v216[1] = 0;
  v217 = v98;
  v218 = 3;
  v219 = -1;
  if (v99 + 8 > v242)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v240, v85, v86, v87, v88, v89, v90, v91);
    v100 = v243;
  }
  *(_DWORD *)&v240[v100] = -1207811137;
  v243 += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v235, (uint64_t)this, 0, v87, v88, v89, v90, v91);
  if (!v245)
  {
    __break(0xC471u);
    JUMPOUT(0x198757638);
  }
  v249[52] &= ~v252;
  v106 = v250;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v235, (uint64_t)operationWriteBarrierSlowPath, v250, v101, v102, v103, v104, v105);
  v244 = 0;
  v114 = (32 * (v106 & 0x1F)) | 0xD63F0000;
  v115 = v243;
  if (v243 + 4 > v242)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v240, v107, v108, v109, v110, v111, v112, v113);
    v115 = v243;
  }
  *(_DWORD *)&v240[v115] = v114;
  v243 += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v216, (uint64_t)v235, v108, v109, v110, v111, v112, v113);
  v123 = v243;
  if (HIBYTE(dword_1ECF4C240))
  {
    __dst = &v225;
    v224 = 2;
    if (v243 + 4 > v242)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v240, (uint64_t)v116, v117, v118, v119, v120, v121, v122);
      v123 = v243;
    }
    *(_DWORD *)&v240[v123] = -129956959;
    v243 += 4;
    JSC::MacroAssemblerARM64::branchAdd32((uint64_t)v235, 4u, SDWORD2(xmmword_1ECF4C4F4), 0xC800000001, v119, v120, v121, v122, (uint64_t)&v214);
    v129 = v214;
    if (v214 != -1)
    {
      v130 = HIDWORD(v224);
      if (HIDWORD(v224) == (_DWORD)v224)
      {
        v131 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__dst, (void *)(HIDWORD(v224) + 1), (unint64_t)&v214, v124, v125, v126, v127, v128);
        a2 = v131 + 1;
        v129 = *v131;
        v130 = HIDWORD(v224);
      }
      v132 = (char *)__dst + 12 * v130;
      *(_DWORD *)v132 = v129;
      *(_QWORD *)(v132 + 4) = *(_QWORD *)a2;
      ++HIDWORD(v224);
    }
    v213 = xmmword_199156F50;
    JSC::AssemblyHelpers::copyLLIntBaselineCalleeSavesFromFrameOrRegisterToEntryFrameCalleeSavesBuffer((uint64_t)v235, (uint64_t)this + 48, &v213);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v235, (uint64_t)this, 0, v133, v134, v135, v136, v137);
    v145 = v243;
    if (v243 + 4 > v242)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v240, v138, v139, v140, v141, v142, v143, v144);
      v145 = v243;
    }
    *(_DWORD *)&v240[v145] = 1384120321;
    v243 += 4;
    if (!v245)
    {
      __break(0xC471u);
      JUMPOUT(0x198757688);
    }
    v249[52] &= ~v252;
    v146 = v250;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v235, (uint64_t)operationOptimize, v250, v140, v141, v142, v143, v144);
    v244 = 0;
    v155 = (32 * (v146 & 0x1F)) | 0xD63F0000;
    v156 = v243;
    if (v243 + 4 > v242)
    {
      v154 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v240, v147, v148, v149, v150, v151, v152, v153).n128_u64[0];
      v156 = v243;
    }
    *(_DWORD *)&v240[v156] = v155;
    v243 += 4;
    JSC::MacroAssemblerARM64::branchTest64((uint64_t)v235, 0, 0, 0xFFFFFFFFLL, v150, v151, v152, v153, (uint64_t)&v211, v154);
    v157 = v211;
    if (v211 != -1)
    {
      v158 = HIDWORD(v224);
      if (HIDWORD(v224) == (_DWORD)v224)
      {
        v159 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__dst, (void *)(HIDWORD(v224) + 1), (unint64_t)&v211, v118, v119, v120, v121, v122);
        v25 = (uint64_t *)(v159 + 1);
        v157 = *v159;
        v158 = HIDWORD(v224);
      }
      v160 = (char *)__dst + 12 * v158;
      *(_DWORD *)v160 = v157;
      *(_QWORD *)(v160 + 4) = *v25;
      ++HIDWORD(v224);
    }
    v161 = v243;
    if (v243 + 4 > v242)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v240, (uint64_t)v116, v117, v118, v119, v120, v121, v122);
      v161 = v243;
    }
    *(_DWORD *)&v240[v161] = -702611456;
    v243 += 4;
    if (HIDWORD(v224))
    {
      v162 = 0;
      v163 = 0;
      v164 = 12 * HIDWORD(v224);
      do
      {
        if (v163 >= HIDWORD(v224))
        {
          __break(0xC471u);
          JUMPOUT(0x1987577E0);
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)__dst + v162), (uint64_t)v235, v117, v118, v119, v120, v121, v122);
        ++v163;
        v162 += 12;
      }
      while (v164 != v162);
    }
    v165 = __dst;
    if (&v225 != __dst && __dst != 0)
    {
      __dst = 0;
      LODWORD(v224) = 0;
      WTF::fastFree((unint64_t)v165, v116, v117, v118, v119, v120, v121, v122);
    }
    v123 = v243;
  }
  if (v123 + 4 > v242)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v240, (uint64_t)v116, v117, v118, v119, v120, v121, v122);
    v123 = v243;
  }
  *(_DWORD *)&v240[v123] = -1463714819;
  v167 = v243;
  v168 = v243 + 4;
  v243 += 4;
  if (v167 + 8 > v242)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v240, (uint64_t)v116, v117, v118, v119, v120, v121, v122);
    v168 = v243;
  }
  *(_DWORD *)&v240[v168] = -698416192;
  v243 += 4;
  __dst = 0;
  v224 = 0;
  v225 = -1;
  v226 = (WTF *)v227;
  v228 = 128;
  v169 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v169 != -1)
  {
    *(_QWORD *)&v213 = &v221;
    v222 = &v213;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v222, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v170 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v178 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v178)
  {
    v178 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v178, v170);
  }
  v179 = *(WTF **)v178;
  if (*(_QWORD *)v178 != v178 + 8)
  {
    v180 = *(_DWORD *)(v178 + 136);
    if (v228 < v180)
    {
      if (v226 && v226 != (WTF *)v227)
      {
        WTF::fastFree((unint64_t)v226, v171, v172, v173, v174, v175, v176, v177);
        v179 = *(WTF **)v178;
        v180 = *(_DWORD *)(v178 + 136);
      }
      v226 = v179;
      v228 = v180;
      *(_QWORD *)v178 = v178 + 8;
      *(_DWORD *)(v178 + 136) = 128;
    }
  }
  v181 = 1;
  v229 = 1;
  v230 = 0;
  v231 = 13;
  v232 = 0u;
  v233 = 0u;
  v234 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&__dst, (uint64_t)v235, 1, v173, v174, v175, v176, v177);
  BYTE2(v230) = 1;
  if (byte_1ECF4C288)
  {
LABEL_128:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, v181, "op_enter_handler", 17, "Baseline: op_enter_handler", v210);
    goto LABEL_122;
  }
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v181 = HIBYTE(word_1ECF4C286) != 0;
    goto LABEL_128;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, "op_enter_handler", 17, v210);
LABEL_122:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&__dst, v182, v183, v184, v185, v186, v187, v188);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v235, v189, v190, v191, v192, v193, v194, v195);
}

uint64_t operationHandleTraps(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t vars0;

  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v8 + 40) = vars0;
  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 0xFu, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t operationWriteBarrierSlowPath(uint64_t result, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t vars0;

  *(_QWORD *)(result + 40) = vars0;
  if (!*(_BYTE *)(result + 755))
  {
    ++*(_QWORD *)(result + 1288);
LABEL_3:
    *(_BYTE *)(a2 + 7) = 2;
    v3 = *(uint64_t **)(result + 608);
    v4 = v3[2];
    if (v4 == 510)
    {
      result = WTF::fastMalloc((WTF *)0x1000);
      v4 = 0;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      ++v3[3];
      v6 = (uint64_t *)*v3;
      v7 = v3 + 1;
      if (*v3)
        v7 = (uint64_t *)*v3;
      *v7 = result;
      *v3 = result;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = v6;
    }
    v5 = *v3 + 8 * v4;
    v3[2] = v4 + 1;
    *(_QWORD *)(v5 + 16) = a2;
    return result;
  }
  __dmb(0xBu);
  v8 = (unsigned __int8 *)(a2 + 7);
  if (*(_BYTE *)(a2 + 7))
    return result;
  v9 = *(unsigned __int8 *)(result + 755);
  ++*(_QWORD *)(result + 1288);
  if (!v9)
    goto LABEL_3;
  __dmb(0xBu);
  if ((a2 & 8) != 0)
  {
    if ((*(_BYTE *)(a2 - 79) & 1) != 0)
      goto LABEL_3;
  }
  else if (*(_DWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(result + 432)
         && ((*(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 8 * ((a2 >> 10) & 0xF) + 0x28) >> (a2 >> 4)) & 1) != 0)
  {
    goto LABEL_3;
  }
  if (*(_BYTE *)(result + 347) == 1)
  {
    do
    {
      if (__ldaxr(v8))
      {
        __clrex();
        return result;
      }
    }
    while (__stlxr(1u, v8));
    if ((a2 & 8) != 0)
    {
      if ((*(_BYTE *)(a2 - 79) & 1) != 0)
LABEL_20:
        *v8 = 0;
    }
    else if (*(_DWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(result + 432)
           && ((*(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 8 * ((a2 >> 10) & 0xF) + 0x28) >> (a2 >> 4)) & 1) != 0)
    {
      goto LABEL_20;
    }
  }
  else
  {
    result = 1131;
    __break(0xC471u);
  }
  return result;
}

WTF *operationOptimize(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v33;
  double *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  double v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  double v47;
  double v48;
  double v49;
  double v50;
  int v51;
  unsigned int v52;
  int v53;
  double v54;
  double v55;
  JSC::Profiler::Database *v56;
  JSC::CodeBlock *v57;
  uint64_t v58;
  unint64_t v59;
  JSC::CodeBlock *v60;
  uint64_t v61;
  int ready;
  void *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  JSC::Profiler::Database *v71;
  uint64_t v72;
  unsigned int v73;
  char **v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  WTF **v81;
  WTF **v82;
  WTF **v83;
  WTF *v84;
  double v85;
  double v86;
  int v87;
  double v88;
  _DWORD *v89;
  _DWORD *v90;
  float *v91;
  JSC::CodeBlock *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  double *v96;
  double v97;
  double v98;
  double v99;
  double v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  double v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  BOOL v108;
  double v109;
  double v110;
  double v111;
  int v112;
  unsigned int v113;
  float v114;
  WTF *v115;
  int v117;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int8x8_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  WTF *v135;
  WTF *v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  int v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  char *v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  double *v150;
  double v151;
  double v152;
  double v153;
  double v154;
  unint64_t v155;
  double v156;
  unint64_t v157;
  unint64_t v158;
  double v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  BOOL v163;
  double v164;
  double v165;
  double v166;
  int v167;
  unsigned int v168;
  double v169;
  JSC::CodeBlock *v170;
  JSC::Profiler::Database *v171;
  uint64_t v172;
  char **v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  JSC::Profiler::Database *v180;
  JSC::CodeBlock *v181;
  unsigned int v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  WTF *v188;
  WTF *v189;
  char **v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t v194;
  double v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int *v208;
  unsigned int v209;
  unsigned int v210;
  unint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  double v219;
  double v220;
  double v221;
  double v222;
  unint64_t v223;
  double v224;
  double v225;
  double v226;
  double v227;
  unint64_t v228;
  int v229;
  char **v230;
  uint64_t v231;
  WTF **v232;
  WTF **v233;
  WTF *v234;
  unsigned int v235;
  int v236;
  double v237;
  JSC::Profiler::Database *v238;
  uint64_t v239;
  unsigned int v240;
  uint64_t v241;
  unsigned int v242;
  char **v243;
  uint64_t *v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  unsigned int v248;
  _QWORD *v249;
  _QWORD *v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  WTF *v256;
  uint64_t v257;
  int v258;
  JSC::Profiler::Database *v259;
  double v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  size_t v268;
  WTF *v269;
  _QWORD *v270;
  _QWORD *v271;
  WTF *v272;
  uint64_t v273;
  int v274;
  void *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  WTF *v282;
  double v283;
  double v284;
  double v285;
  double v286;
  unint64_t v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  size_t v295;
  WTF *v296;
  _QWORD *v297;
  _QWORD *v298;
  WTF *v299;
  uint64_t v300;
  int v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  WTF *v309;
  void *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  void *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  WTF *v324;
  WTF *v325;
  double v326;
  int v327;
  int v328;
  double v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  _BOOL8 v334;
  uint64_t v335;
  uint64_t v336;
  int8x8_t v337;
  double v338;
  void *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  WTF *v346;
  void *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  WTF *v354;
  int v355;
  void *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  void *v363;
  uint64_t v364;
  uint64_t v365;
  WTF *v366;
  unint64_t v367;
  double v368;
  unsigned int *v369;
  uint64_t v370;
  unsigned int *v371;
  unsigned int v372;
  unsigned int *v373;
  unsigned int v374;
  unsigned int v375;
  unsigned int v376;
  unint64_t v377;
  double v378;
  unint64_t v379;
  double v380;
  JSC::Profiler::Database *v381;
  JSC::Profiler::Database *v382;
  WTF *v383;
  int v384;
  unsigned int v385;
  unsigned int v386;
  unsigned int v387;
  JSC::CodeBlock *v388;
  unsigned int v389;
  double v390;
  WTF *v391;
  int v392;
  WTF *v393;
  WTF *v394;
  __int128 v395;
  _BYTE v396[128];
  uint64_t v397;
  uint64_t *vars0;

  v397 = *MEMORY[0x1E0C80C00];
  v8 = vars0;
  *(_QWORD *)(a1 + 40) = vars0;
  v389 = a2;
  ++*(_DWORD *)(a1 + 916);
  v9 = v8[2];
  v388 = (JSC::CodeBlock *)v9;
  v10 = *(_QWORD *)(v9 + 120);
  if (!v10 || *(_BYTE *)(v10 + 12) != 3)
  {
    WTF::dataLog<char [49],JSC::CodeBlock,char [2]>(v9);
    __break(0xC471u);
    JUMPOUT(0x198758424);
  }
  v11 = (int)a2;
  v13 = *(_BYTE *)(v9 + 18) & 3;
  if (v13 == 3)
  {
    v13 = JSC::CodeBlock::computeCapabilityLevel((JSC::CodeBlock *)v9);
    *(_BYTE *)(v9 + 18) = *(_BYTE *)(v9 + 18) & 0xFC | v13 & 3;
  }
  if (!v13)
    goto LABEL_124;
  if (v11 != -1 && v11 != 0x3FFFFFFF)
    *(_BYTE *)(v9 + 17) = 0;
  if (BYTE1(qword_1ECF4C332))
  {
    LODWORD(v393) = *(unsigned __int16 *)(v9 + 106);
    WTF::dataLog<JSC::CodeBlock,char [41],JSC::BytecodeIndex,char [20],JSC::ExecutionCounter<(JSC::CountingVariant)0>,char [30],unsigned int,char [17]>(v9, (JSC::BytecodeIndex *)&v389, v9 + 200, &v393);
    v241 = *(_QWORD *)(v9 + 120);
    if (v241)
      v242 = *(unsigned __int8 *)(v241 + 12);
    else
      v242 = 0;
    v243 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C));
    if (v243 == &JSC::FunctionCodeBlock::s_info)
    {
      v244 = *(uint64_t **)(v9 + 64);
      if (*(int *)(*(_QWORD *)(v9 + 56) + 20) < 0)
        v245 = v244 + 13;
      else
        v245 = v244 + 12;
    }
    else
    {
      if (v243 != &JSC::EvalCodeBlock::s_info
        && v243 != &JSC::ProgramCodeBlock::s_info
        && v243 != &JSC::ModuleProgramCodeBlock::s_info)
      {
        __break(0xC471u);
        JUMPOUT(0x1987595DCLL);
      }
      v244 = *(uint64_t **)(v9 + 64);
      v245 = v244 + 9;
    }
    v246 = *v245;
    if (!v246)
      goto LABEL_335;
    v247 = *(_QWORD *)(v246 + 120);
    if (v247)
    {
      if (v242 > 1)
      {
        v248 = *(unsigned __int8 *)(v247 + 12);
        if (v248 > 1)
        {
          if (v248 > v242)
          {
            if (v243 == &JSC::FunctionCodeBlock::s_info)
            {
              v249 = v244 + 12;
              v250 = v244 + 13;
              if (*(int *)(*(_QWORD *)(v9 + 56) + 20) < 0)
                v251 = v250;
              else
                v251 = v249;
            }
            else
            {
              if (v243 != &JSC::EvalCodeBlock::s_info
                && v243 != &JSC::ProgramCodeBlock::s_info
                && v243 != &JSC::ModuleProgramCodeBlock::s_info)
              {
                __break(0xC471u);
                JUMPOUT(0x1987596E0);
              }
              v251 = v244 + 9;
            }
            LODWORD(v393) = *(_DWORD *)(*v251 + 36);
            WTF::dataLog<unsigned int>(&v393);
            goto LABEL_336;
          }
LABEL_335:
          WTF::dataLog<char [16]>("N/A");
LABEL_336:
          WTF::dataLog<char [16]>("\n");
          goto LABEL_10;
        }
LABEL_368:
        __break(0xC471u);
        JUMPOUT(0x198758F94);
      }
    }
    else if (v242 > 1)
    {
      goto LABEL_368;
    }
    __break(0xC471u);
    JUMPOUT(0x1987594D8);
  }
LABEL_10:
  v14 = JSC::theGlobalJITWorklist;
  if (!JSC::theGlobalJITWorklist)
    goto LABEL_30;
  v15 = (unsigned __int8 *)(*(_QWORD *)(JSC::theGlobalJITWorklist + 304) + 4);
  if (__ldaxr(v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, v15))
  {
    goto LABEL_14;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v15);
LABEL_14:
  v17 = *(_QWORD *)(v14 + 144);
  if (!v17)
    goto LABEL_135;
  v18 = *(_DWORD *)(v17 - 8);
  v19 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
  v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
  v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
  v22 = v18 & ((0xD7862706ELL
              * (unint64_t)(277951225 * ((v21 >> 31) ^ v21) + 190375932)) >> 4);
  v23 = (uint64_t *)(v17 + 24 * v22);
  v24 = *v23;
  v25 = *((_DWORD *)v23 + 2);
  if (*v23 != v9 || v25 != 2)
  {
    v117 = 1;
    while (v24 || v25)
    {
      v22 = (v22 + v117) & v18;
      v23 = (uint64_t *)(v17 + 24 * v22);
      v24 = *v23;
      v25 = *((_DWORD *)v23 + 2);
      ++v117;
      if (*v23 == v9 && v25 == 2)
        goto LABEL_20;
    }
    v23 = (uint64_t *)(v17 + 24 * *(unsigned int *)(v17 - 4));
  }
LABEL_20:
  if (v23 == (uint64_t *)(v17 + 24 * *(unsigned int *)(v17 - 4)))
  {
LABEL_135:
    v27 = 0;
  }
  else if (*(_DWORD *)(v23[2] + 12) == 2)
  {
    v27 = 2;
  }
  else
  {
    v27 = 1;
  }
  v28 = __ldxr(v15);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_28;
  }
  if (__stlxr(0, v15))
LABEL_28:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v15, 0, a3, a4, a5, a6, a7, a8);
  if (v27 != 2)
  {
LABEL_30:
    v29 = *(_QWORD *)(v9 + 192);
    if (!v29)
      v29 = v9;
    v30 = *(_QWORD *)(v29 + 120);
    if (v30)
    {
      v31 = *(unsigned __int8 *)(v30 + 12);
      if ((v31 & 0xFE) != 2 && v31 != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198759858);
      }
    }
    v33 = *(_QWORD *)(v29 + 72);
    if (!v33)
      goto LABEL_44;
    v34 = *(double **)(v33 + 64752);
    v35 = *v34;
    if (*v34 == 0.0)
      goto LABEL_44;
    v36 = v34[1] / v35;
    if (v35 < 2.0)
    {
      v37 = 0.0;
    }
    else
    {
      v37 = v34[2] / v35 - v36 * v36;
      if (v37 <= 0.0)
        v37 = 0.0;
    }
    v38 = v36 + sqrt(v37);
    if (v38 < 0.0 || (HIDWORD(v367) = 1083129856, v38 > 1000.0))
    {
LABEL_44:
      v39 = 0;
    }
    else
    {
      LODWORD(v367) = *(_DWORD *)(v29 + 44);
      v368 = v38 * (double)v367;
      v39 = (unint64_t)v368;
      if (v368 >= 1.84467441e19)
        v39 = 0;
    }
    if (!qword_1ECF4C1F0)
      goto LABEL_476;
    v40 = *(_QWORD *)(qword_1ECF4C1F0 + 80) + v39;
    v41 = *(_QWORD *)(qword_1ECF4C1F0 + 72);
    v42 = (double)v41 * 0.25;
    v43 = v41 - (unint64_t)v42;
    v44 = v41 - 0x40000;
    if ((unint64_t)v42 >> 18)
      v44 = v43;
    if (v40 >= v44)
      v40 = v44;
    v45 = v44 - v40;
    v46 = v44 != v40;
    v47 = (double)v44 / (double)v45;
    v48 = v46 && v47 >= 1.0 ? (double)v44 / (double)v45 : 1.0;
    if (v47 < 1.0 && v46)
    {
      v48 = (double)v44 / (double)v45;
      if (v47 < 1.0)
LABEL_476:
        v48 = 1.0;
    }
    v49 = v48 * (double)*(int *)(v9 + 208);
    v50 = *(float *)(v9 + 204) + (double)*(int *)(v9 + 200);
    v390 = v50;
    *(double *)&v391 = v49;
    v51 = HIDWORD(xmmword_1ECF4C514);
    v52 = *(_DWORD *)(v9 + 44);
    if ((int)v52 < SDWORD1(xmmword_1ECF4C524))
    {
LABEL_56:
      v53 = *(_DWORD *)(v9 + 208);
      if (v51 < v53)
        v53 = v51;
      v54 = (double)v53 * -0.5;
      v55 = v49 + v54;
      *(double *)&v383 = v55;
      v56 = *(JSC::Profiler::Database **)(*(_QWORD *)(v9 + 72) + 93016);
      if (v56)
      {
        WTF::toCString<char [19],int,char [23],double,char [17],double,char [18],double>("activeThreshold = ", (_DWORD *)(v9 + 208), ", modifiedThreshold = ", (double *)&v391, ", actualCount = ", &v390, ", desiredCount = ", (double *)&v383, (uint64_t *)&v393);
        JSC::Profiler::Database::logEvent(v56, v9, "thresholdCheck", &v393, v252, v253, v254, v255);
        v256 = v393;
        *(double *)&v393 = 0.0;
        if (v256)
        {
          if (*(_DWORD *)v256 == 1)
            WTF::fastFree((unint64_t)v256, a2, a3, a4, a5, a6, a7, a8);
          else
            --*(_DWORD *)v256;
        }
      }
      if (v50 >= v55)
        goto LABEL_60;
      v145 = *(_DWORD *)(v9 + 208);
      if (v145 == 0x7FFFFFFF)
      {
        *(_DWORD *)(v9 + 208) = 0x7FFFFFFF;
        *(_QWORD *)(v9 + 200) = 0x80000000;
        goto LABEL_189;
      }
      v146 = *(_QWORD *)(v9 + 192);
      if (!v146)
        v146 = v9;
      v147 = *(_QWORD *)(v146 + 120);
      if (v147)
      {
        v148 = *(unsigned __int8 *)(v147 + 12);
        if ((v148 & 0xFE) != 2)
        {
          if (v148)
          {
            __break(0xC471u);
            JUMPOUT(0x1987599CCLL);
          }
        }
      }
      v149 = *(_QWORD *)(v146 + 72);
      if (!v149)
        goto LABEL_173;
      v150 = *(double **)(v149 + 64752);
      v151 = *v150;
      if (*v150 == 0.0)
        goto LABEL_173;
      v152 = v150[1] / v151;
      if (v151 < 2.0)
      {
        v153 = 0.0;
      }
      else
      {
        v153 = v150[2] / v151 - v152 * v152;
        if (v153 <= 0.0)
          v153 = 0.0;
      }
      v154 = v152 + sqrt(v153);
      if (v154 < 0.0 || (HIDWORD(v379) = 1083129856, v154 > 1000.0))
      {
LABEL_173:
        v155 = 0;
      }
      else
      {
        LODWORD(v379) = *(_DWORD *)(v146 + 44);
        v380 = v154 * (double)v379;
        v155 = (unint64_t)v380;
        if (v380 >= 1.84467441e19)
          v155 = 0;
      }
      v156 = *(float *)(v9 + 204) + (double)*(int *)(v9 + 200);
      if (!qword_1ECF4C1F0)
        goto LABEL_486;
      v157 = *(_QWORD *)(qword_1ECF4C1F0 + 80) + v155;
      v158 = *(_QWORD *)(qword_1ECF4C1F0 + 72);
      v159 = (double)v158 * 0.25;
      v160 = v158 - (unint64_t)v159;
      v161 = v158 - 0x40000;
      if ((unint64_t)v159 >> 18)
        v161 = v160;
      if (v157 >= v161)
        v157 = v161;
      v162 = v161 - v157;
      v163 = v161 != v157;
      v164 = (double)v161 / (double)v162;
      v165 = v163 && v164 >= 1.0 ? (double)v161 / (double)v162 : 1.0;
      if (v164 < 1.0 && v163)
      {
        v165 = (double)v161 / (double)v162;
        if (v164 < 1.0)
LABEL_486:
          v165 = 1.0;
      }
      v54 = v165 * (double)v145;
      v166 = v54 - v156;
      if (v54 - v156 <= 0.0)
      {
        *(_DWORD *)(v9 + 200) = 0;
        *(float *)&v54 = v156;
        *(_DWORD *)(v9 + 204) = LODWORD(v54);
        goto LABEL_60;
      }
      v167 = HIDWORD(xmmword_1ECF4C514);
      v168 = *(_DWORD *)(v9 + 44);
      if ((int)v168 < SDWORD1(xmmword_1ECF4C524))
      {
LABEL_186:
        v169 = (double)v167;
        if (v166 <= (double)v167)
          v169 = v166;
        *(_DWORD *)(v9 + 200) = (int)-v169;
        v54 = v156 + v169;
        *(float *)&v54 = v54;
        *(_DWORD *)(v9 + 204) = LODWORD(v54);
LABEL_189:
        v170 = v388;
        if (!v388 || (v171 = *(JSC::Profiler::Database **)(*((_QWORD *)v388 + 9) + 93016)) == 0)
        {
LABEL_191:
          JSC::CodeBlock::updateAllPredictions(v170, *(int8x8_t *)&v54, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          if (BYTE1(qword_1ECF4C332))
            WTF::dataLog<char [26],JSC::CodeBlock,char [49],char [2]>((uint64_t)v170);
          goto LABEL_124;
        }
        *(double *)&v393 = COERCE_DOUBLE(off_1E3572250);
        v394 = (WTF *)v396;
        v395 = xmmword_199122F80;
        v396[0] = 0;
        WTF::PrintStream::printf((WTF::PrintStream *)&v393, "%s", "counter = ");
        WTF::PrintStream::printf((WTF::PrintStream *)&v393, "%lf/%lf, %d", *((float *)v170 + 51) + (double)*((int *)v170 + 50), (double)*((int *)v170 + 52), *((_DWORD *)v170 + 50));
        (*((void (**)(WTF **))v393 + 5))(&v393);
        v296 = v394;
        v295 = v395;
        *(double *)&v383 = 0.0;
        if (v394)
        {
          if ((unint64_t)v395 >= 0xFFFFFFFFFFFFFFF0)
          {
            __break(0xC471u);
            JUMPOUT(0x198759A38);
          }
          if ((_QWORD)v395 == -17)
          {
            __break(0xC471u);
            JUMPOUT(0x198759A40);
          }
          v297 = (_QWORD *)WTF::fastMalloc((WTF *)(v395 + 17));
          *(_DWORD *)v297 = 1;
          v297[1] = v295;
          v383 = (WTF *)v297;
          v298 = v297 + 2;
          memcpy(v297 + 2, v296, v295);
          *((_BYTE *)v298 + v295) = 0;
          v299 = v394;
          if (v394 == (WTF *)v396)
            goto LABEL_381;
        }
        else
        {
          v299 = 0;
        }
        WTF::fastFree((unint64_t)v299, v288, v289, v290, v291, v292, v293, v294);
LABEL_381:
        JSC::Profiler::Database::logEvent(v171, (uint64_t)v170, "delayOptimizeToDFG", &v383, v291, v292, v293, v294);
        v325 = v383;
        *(double *)&v383 = 0.0;
        if (v325)
        {
          if (*(_DWORD *)v325 == 1)
            WTF::fastFree((unint64_t)v325, a2, a3, a4, a5, a6, a7, a8);
          else
            --*(_DWORD *)v325;
        }
        goto LABEL_191;
      }
      *(double *)&v393 = (double)v168;
      v283 = sqrt((double)v168 + 1.02406) * 0.061504 + 0.825914 + 0.0;
      if ((*(_WORD *)(*(_QWORD *)(v9 + 56) + 28) & 0x3000) == 0x1000)
      {
        v355 = DWORD1(xmmword_1ECF4C514);
        v283 = v283 * (double)SDWORD1(xmmword_1ECF4C514);
        *(double *)&v383 = v283;
        if (!BYTE1(qword_1ECF4C332))
          goto LABEL_347;
      }
      else
      {
        *(double *)&v383 = v283;
        if (!BYTE1(qword_1ECF4C332))
        {
LABEL_347:
          v284 = sqrt(v283);
          v285 = (double)v167;
          if (v284 < 1.0)
            v284 = 1.0;
          v286 = v284 * v285;
          v287 = (COERCE_UNSIGNED_INT64(v284 * v285) >> 52) & 0x7FF;
          if ((v287 - 1023) <= 0x53)
          {
            v300 = *(_QWORD *)&v286 >> (51 - (COERCE_UNSIGNED_INT64(v284 * v285) >> 52));
            if (v287 > 0x433)
              LODWORD(v300) = *(_QWORD *)&v286 << ((COERCE_UNSIGNED_INT64(v284 * v285) >> 52) - 51);
            if (v287 >= 0x41F)
              v301 = v300;
            else
              v301 = (((1 << ((COERCE_UNSIGNED_INT64(v284 * v285) >> 52) + 1)) - 1) & v300)
                   + (1 << ((COERCE_UNSIGNED_INT64(v284 * v285) >> 52) + 1));
            if (v286 >= 0.0)
              v167 = v301;
            else
              v167 = -v301;
          }
          else
          {
            v167 = 0;
          }
          goto LABEL_186;
        }
        v355 = 1;
      }
      LODWORD(v391) = v355;
      WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>(v9, ": bytecode cost is ", (double *)&v393, ", scaling execution counter by ", (double *)&v383, " * ", &v391, "\n");
      v283 = *(double *)&v383;
      goto LABEL_347;
    }
    *(double *)&v393 = (double)v52;
    v219 = sqrt((double)v52 + 1.02406) * 0.061504 + 0.825914 + 0.0;
    if ((*(_WORD *)(*(_QWORD *)(v9 + 56) + 28) & 0x3000) == 0x1000)
    {
      v327 = DWORD1(xmmword_1ECF4C514);
      v219 = v219 * (double)SDWORD1(xmmword_1ECF4C514);
      *(double *)&v383 = v219;
      if (!BYTE1(qword_1ECF4C332))
        goto LABEL_256;
    }
    else
    {
      *(double *)&v383 = v219;
      if (!BYTE1(qword_1ECF4C332))
      {
LABEL_256:
        v220 = sqrt(v219);
        v221 = (double)v51;
        if (v220 < 1.0)
          v220 = 1.0;
        v222 = v220 * v221;
        v223 = (COERCE_UNSIGNED_INT64(v220 * v221) >> 52) & 0x7FF;
        if ((v223 - 1023) <= 0x53)
        {
          v257 = *(_QWORD *)&v222 >> (51 - (COERCE_UNSIGNED_INT64(v220 * v221) >> 52));
          if (v223 > 0x433)
            LODWORD(v257) = *(_QWORD *)&v222 << ((COERCE_UNSIGNED_INT64(v220 * v221) >> 52) - 51);
          if (v223 >= 0x41F)
            v258 = v257;
          else
            v258 = (((1 << ((COERCE_UNSIGNED_INT64(v220 * v221) >> 52) + 1)) - 1) & v257)
                 + (1 << ((COERCE_UNSIGNED_INT64(v220 * v221) >> 52) + 1));
          if (v222 >= 0.0)
            v51 = v258;
          else
            v51 = -v258;
        }
        else
        {
          v51 = 0;
        }
        goto LABEL_56;
      }
      v327 = 1;
    }
    v392 = v327;
    WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>(v9, ": bytecode cost is ", (double *)&v393, ", scaling execution counter by ", (double *)&v383, " * ", &v392, "\n");
    v219 = *(double *)&v383;
    goto LABEL_256;
  }
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<JSC::CodeBlock,char [30],char [2]>(v9, ": Optimizing next invocation.", "\n");
  JSC::ExecutionCounter<(JSC::CountingVariant)0>::setNewThreshold(v9 + 200, 0, v9);
LABEL_60:
  v57 = v388;
  if (*(_BYTE *)(a1 + 93441))
  {
    if (v388)
    {
      v259 = *(JSC::Profiler::Database **)(*((_QWORD *)v388 + 9) + 93016);
      if (v259)
      {
        *(double *)&v393 = COERCE_DOUBLE(off_1E3572250);
        v394 = (WTF *)v396;
        v395 = xmmword_199122F80;
        v396[0] = 0;
        WTF::PrintStream::printf((WTF::PrintStream *)&v393, "%s", "Terminating current execution");
        (*((void (**)(WTF **))v393 + 5))(&v393);
        WTF::StringPrintStream::toCString(&v393, (uint64_t *)&v383);
        if (v394 != (WTF *)v396)
          WTF::fastFree((unint64_t)v394, v347, v348, v349, v350, v351, v352, v353);
        JSC::Profiler::Database::logEvent(v259, (uint64_t)v57, "delayOptimizeToDFG", &v383, v350, v351, v352, v353);
        v354 = v383;
        *(double *)&v383 = 0.0;
        if (v354)
        {
          if (*(_DWORD *)v354 == 1)
            WTF::fastFree((unint64_t)v354, a2, a3, a4, a5, a6, a7, a8);
          else
            --*(_DWORD *)v354;
        }
      }
    }
    goto LABEL_313;
  }
  v58 = *(_QWORD *)(*((_QWORD *)v388 + 1) + 2016);
  if (v58
    && ((*(_WORD *)(v58 + 48) & 0x200) != 0 || *(_DWORD *)(JSC::CodeBlock::baselineAlternative((uint64_t)v388) + 40)))
  {
    JSC::VM::logEvent<operationOptimize::$_2>(*(JSC::Profiler::Database **)(*((_QWORD *)v57 + 9) + 93016), (uint64_t)v57);
LABEL_313:
    JSC::CodeBlock::updateAllPredictions(v57, *(int8x8_t *)&v54, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    JSC::CodeBlock::optimizeAfterWarmUp((uint64_t)v57, v260);
    goto LABEL_124;
  }
  if (*((_BYTE *)v57 + 17))
  {
    JSC::VM::logEvent<operationOptimize::$_3>(*(JSC::Profiler::Database **)(*((_QWORD *)v57 + 9) + 93016), (uint64_t)v57);
    JSC::CodeBlock::updateAllPredictions(v57, v337, v330, v331, v332, v333, v334, v335, v336);
    JSC::CodeBlock::optimizeAfterWarmUp((uint64_t)v57, v338);
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<char [26],JSC::CodeBlock,char [47],char [2]>((uint64_t)v57);
    goto LABEL_124;
  }
  v59 = atomic_load(&JSC::JITWorklist::ensureGlobalWorklist(void)::once);
  if (v59 != -1)
  {
    *(double *)&v393 = COERCE_DOUBLE(&v391);
    *(double *)&v383 = COERCE_DOUBLE(&v393);
    std::__call_once(&JSC::JITWorklist::ensureGlobalWorklist(void)::once, &v383, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JITWorklist::ensureGlobalWorklist(void)::$_0 &&>>);
  }
  v60 = v388;
  if (byte_1ECF4C25E)
    v61 = 3;
  else
    v61 = 2;
  ready = JSC::JITWorklist::completeAllReadyPlansForVM(JSC::theGlobalJITWorklist, a1, (uint64_t)v388, v61);
  if (ready == 1)
  {
    if (!v60)
      goto LABEL_71;
    v71 = *(JSC::Profiler::Database **)(*((_QWORD *)v60 + 9) + 93016);
    if (!v71)
      goto LABEL_71;
    *(double *)&v393 = COERCE_DOUBLE(off_1E3572250);
    v394 = (WTF *)v396;
    v395 = xmmword_199122F80;
    v396[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v393, "%s", "compiling");
    (*((void (**)(WTF **))v393 + 5))(&v393);
    v269 = v394;
    v268 = v395;
    *(double *)&v383 = 0.0;
    if (v394)
    {
      if ((unint64_t)v395 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x198759A28);
      }
      if ((_QWORD)v395 == -17)
      {
        __break(0xC471u);
        JUMPOUT(0x198759A30);
      }
      v270 = (_QWORD *)WTF::fastMalloc((WTF *)(v395 + 17));
      *(_DWORD *)v270 = 1;
      v270[1] = v268;
      v383 = (WTF *)v270;
      v271 = v270 + 2;
      memcpy(v270 + 2, v269, v268);
      *((_BYTE *)v271 + v268) = 0;
      v272 = v394;
      if (v394 == (WTF *)v396)
        goto LABEL_342;
    }
    else
    {
      v272 = 0;
    }
    WTF::fastFree((unint64_t)v272, v261, v262, v263, v264, v265, v266, v267);
LABEL_342:
    JSC::Profiler::Database::logEvent(v71, (uint64_t)v60, "delayOptimizeToDFG", &v383, v264, v265, v266, v267);
    v282 = v383;
    *(double *)&v383 = 0.0;
    if (v282)
    {
      if (*(_DWORD *)v282 == 1)
        WTF::fastFree((unint64_t)v282, v275, v276, v277, v278, v279, v280, v281);
      else
        --*(_DWORD *)v282;
    }
LABEL_71:
    v72 = *((_QWORD *)v60 + 15);
    if (v72)
      v73 = *(unsigned __int8 *)(v72 + 12);
    else
      v73 = 0;
    v74 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v60 & 0xFFFFFFFE) + 0x4C));
    if (v74 == &JSC::FunctionCodeBlock::s_info)
    {
      v75 = (uint64_t *)*((_QWORD *)v60 + 8);
      if (*(int *)(*((_QWORD *)v60 + 7) + 20) < 0)
        v76 = v75 + 13;
      else
        v76 = v75 + 12;
    }
    else
    {
      if (v74 != &JSC::EvalCodeBlock::s_info
        && v74 != &JSC::ProgramCodeBlock::s_info
        && v74 != &JSC::ModuleProgramCodeBlock::s_info)
      {
        __break(0xC471u);
        JUMPOUT(0x198758CF8);
      }
      v75 = (uint64_t *)*((_QWORD *)v60 + 8);
      v76 = v75 + 9;
    }
    v77 = *v76;
    if (!v77)
    {
LABEL_82:
      LODWORD(v390) = 3;
      if (v72)
      {
        v80 = *(unsigned __int8 *)(v72 + 12);
        LOBYTE(v392) = v80;
        if (v80 == 3)
        {
          if (v74 == &JSC::FunctionCodeBlock::s_info)
          {
            v81 = (WTF **)(v75 + 12);
            v82 = (WTF **)(v75 + 13);
            if (*(int *)(*((_QWORD *)v60 + 7) + 20) < 0)
              v83 = v82;
            else
              v83 = v81;
          }
          else
          {
            if (v74 != &JSC::EvalCodeBlock::s_info
              && v74 != &JSC::ProgramCodeBlock::s_info
              && v74 != &JSC::ModuleProgramCodeBlock::s_info)
            {
              __break(0xC471u);
              JUMPOUT(0x198758D28);
            }
            v83 = (WTF **)(v75 + 9);
          }
          v84 = *v83;
          if (*v83 && v84 != v60)
          {
            WTF::dataLog<JSC::CodeBlock,char [20],JSC::CompilationResult,char [6]>((uint64_t)v60, ": we have result = ", (int *)&v390, " but ");
            v393 = v84;
            WTF::dataLog<char [20],WTF::PointerDump<JSC::CodeBlock>,char [2]>("our replacement is ", (uint64_t *)&v393, "\n");
            __break(0xC471u);
            JUMPOUT(0x198759428);
          }
          if (BYTE1(qword_1ECF4C332))
            WTF::dataLog<JSC::CodeBlock,char [30],char [2]>((uint64_t)v60, ": Optimizing after warm-up.", "\n");
          v85 = (double)SDWORD2(xmmword_1ECF4C4E4);
          LODWORD(v70) = *((_DWORD *)v60 + 11);
          *(double *)&v393 = (double)v70;
          v86 = sqrt((double)v70 + 1.02406) * 0.061504 + 0.825914 + 0.0;
          if ((*(_WORD *)(*((_QWORD *)v60 + 7) + 28) & 0x3000) == 0x1000)
          {
            v229 = DWORD1(xmmword_1ECF4C514);
            v86 = v86 * (double)SDWORD1(xmmword_1ECF4C514);
            *(double *)&v383 = v86;
            if (!BYTE1(qword_1ECF4C332))
              goto LABEL_94;
          }
          else
          {
            *(double *)&v383 = v86;
            if (!BYTE1(qword_1ECF4C332))
              goto LABEL_94;
            v229 = 1;
          }
          LODWORD(v391) = v229;
          WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>((uint64_t)v60, ": bytecode cost is ", (double *)&v393, ", scaling execution counter by ", (double *)&v383, " * ", &v391, "\n");
          v86 = *(double *)&v383;
LABEL_94:
          v87 = 1;
          v88 = v86 * v85 * (double)(1 << *((_WORD *)v60 + 53));
          if (v88 >= 1.0)
          {
            if (v88 > 2147483650.0)
            {
              v89 = (_DWORD *)((char *)v60 + 200);
              *((_DWORD *)v60 + 51) = 0;
              v90 = (_DWORD *)((char *)v60 + 208);
            }
            else
            {
              v87 = (int)v88;
              *((_QWORD *)v60 + 25) = 0;
              v89 = (_DWORD *)((char *)v60 + 200);
              *((_DWORD *)v60 + 52) = (int)v88;
              v90 = (_DWORD *)((char *)v60 + 208);
              if ((int)v88 != 0x7FFFFFFF)
              {
                v91 = (float *)((char *)v60 + 204);
LABEL_98:
                v92 = (JSC::CodeBlock *)*((_QWORD *)v60 + 24);
                if (!v92)
                  v92 = v60;
                v93 = *((_QWORD *)v92 + 15);
                if (v93)
                {
                  v94 = *(unsigned __int8 *)(v93 + 12);
                  if ((v94 & 0xFE) != 2)
                  {
                    if (v94)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198759944);
                    }
                  }
                }
                v95 = *((_QWORD *)v92 + 9);
                if (!v95)
                  goto LABEL_108;
                v96 = *(double **)(v95 + 64752);
                v97 = *v96;
                if (*v96 == 0.0)
                  goto LABEL_108;
                v98 = v96[1] / v97;
                if (v97 < 2.0)
                {
                  v99 = 0.0;
                }
                else
                {
                  v99 = v96[2] / v97 - v98 * v98;
                  if (v99 <= 0.0)
                    v99 = 0.0;
                }
                v100 = v98 + sqrt(v99);
                if (v100 < 0.0 || (HIDWORD(v377) = 1083129856, v100 > 1000.0))
                {
LABEL_108:
                  v101 = 0;
                }
                else
                {
                  LODWORD(v377) = *((_DWORD *)v92 + 11);
                  v378 = v100 * (double)v377;
                  v101 = (unint64_t)v378;
                  if (v378 >= 1.84467441e19)
                    v101 = 0;
                }
                if (!qword_1ECF4C1F0)
                  goto LABEL_478;
                v102 = *(_QWORD *)(qword_1ECF4C1F0 + 80) + v101;
                v103 = *(_QWORD *)(qword_1ECF4C1F0 + 72);
                v104 = (double)v103 * 0.25;
                v105 = v103 - (unint64_t)v104;
                v106 = v103 - 0x40000;
                if ((unint64_t)v104 >> 18)
                  v106 = v105;
                if (v102 >= v106)
                  v102 = v106;
                v107 = v106 - v102;
                v108 = v106 != v102;
                v109 = (double)v106 / (double)v107;
                v110 = v108 && v109 >= 1.0 ? (double)v106 / (double)v107 : 1.0;
                if (v109 < 1.0 && v108)
                {
                  v110 = (double)v106 / (double)v107;
                  if (v109 < 1.0)
LABEL_478:
                    v110 = 1.0;
                }
                v111 = v110 * (double)v87;
                if (v111 > 0.0)
                {
                  v112 = HIDWORD(xmmword_1ECF4C514);
                  v113 = *((_DWORD *)v60 + 11);
                  if ((int)v113 < SDWORD1(xmmword_1ECF4C524))
                  {
LABEL_121:
                    if (v111 > (double)v112)
                      v111 = (double)v112;
                    *v89 = (int)-v111;
                    v114 = v111 + 0.0;
                    *v91 = v114;
                    goto LABEL_124;
                  }
                  *(double *)&v393 = (double)v113;
                  v224 = sqrt((double)v113 + 1.02406) * 0.061504 + 0.825914 + 0.0;
                  if ((*(_WORD *)(*((_QWORD *)v60 + 7) + 28) & 0x3000) == 0x1000)
                  {
                    v328 = DWORD1(xmmword_1ECF4C514);
                    v224 = v224 * (double)SDWORD1(xmmword_1ECF4C514);
                    *(double *)&v383 = v224;
                    if (!BYTE1(qword_1ECF4C332))
                      goto LABEL_262;
                    v329 = v111;
                  }
                  else
                  {
                    *(double *)&v383 = v224;
                    if (!BYTE1(qword_1ECF4C332))
                    {
LABEL_262:
                      v225 = sqrt(v224);
                      v226 = (double)v112;
                      if (v225 < 1.0)
                        v225 = 1.0;
                      v227 = v225 * v226;
                      v228 = (COERCE_UNSIGNED_INT64(v225 * v226) >> 52) & 0x7FF;
                      if ((v228 - 1023) <= 0x53)
                      {
                        v273 = *(_QWORD *)&v227 >> (51 - (COERCE_UNSIGNED_INT64(v225 * v226) >> 52));
                        if (v228 > 0x433)
                          LODWORD(v273) = *(_QWORD *)&v227 << ((COERCE_UNSIGNED_INT64(v225 * v226) >> 52)
                                                             - 51);
                        if (v228 >= 0x41F)
                          v274 = v273;
                        else
                          v274 = (((1 << ((COERCE_UNSIGNED_INT64(v225 * v226) >> 52) + 1)) - 1) & v273)
                               + (1 << ((COERCE_UNSIGNED_INT64(v225 * v226) >> 52) + 1));
                        if (v227 >= 0.0)
                          v112 = v274;
                        else
                          v112 = -v274;
                      }
                      else
                      {
                        v112 = 0;
                      }
                      goto LABEL_121;
                    }
                    v329 = v111;
                    v328 = 1;
                  }
                  LODWORD(v391) = v328;
                  WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>((uint64_t)v60, ": bytecode cost is ", (double *)&v393, ", scaling execution counter by ", (double *)&v383, " * ", &v391, "\n");
                  v224 = *(double *)&v383;
                  v111 = v329;
                  goto LABEL_262;
                }
                *v89 = 0;
                *v91 = 0.0;
LABEL_124:
                v115 = 0;
                goto LABEL_125;
              }
            }
            *v90 = 0x7FFFFFFF;
            *v89 = 0x80000000;
            goto LABEL_124;
          }
          *((_QWORD *)v60 + 25) = 0;
          v89 = (_DWORD *)((char *)v60 + 200);
          v91 = (float *)((char *)v60 + 204);
          *((_DWORD *)v60 + 52) = 1;
          goto LABEL_98;
        }
      }
      else
      {
        LOBYTE(v392) = 0;
      }
      WTF::dataLog<JSC::CodeBlock,char [43],JSC::JITType,char [2]>((uint64_t)v60, ": expected to have baseline code but have ", (unsigned __int8 *)&v392, "\n");
      v369 = (unsigned int *)*((_QWORD *)v60 + 15);
      if (v369)
      {
        v373 = v369 + 2;
        do
          v374 = __ldaxr(v373);
        while (__stlxr(v374 + 1, v373));
        do
        {
          v375 = __ldaxr(v373);
          v376 = v375 - 1;
        }
        while (__stlxr(v376, v373));
        if (!v376)
        {
          atomic_store(1u, v369 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v369 + 32))(v369);
        }
      }
      v370 = *((_QWORD *)v60 + 15);
      if (v370)
      {
        v371 = (unsigned int *)(v370 + 8);
        do
          v372 = __ldaxr(v371);
        while (__stlxr(v372 + 1, v371));
      }
      __break(0xC471u);
      JUMPOUT(0x1987598DCLL);
    }
    v78 = *(_QWORD *)(v77 + 120);
    if (v78)
    {
      if (v73 > 1)
      {
        v79 = *(unsigned __int8 *)(v78 + 12);
        if (v79 > 1)
        {
          if (v79 > v73)
          {
            __break(0xC471u);
            JUMPOUT(0x198758C28);
          }
          goto LABEL_82;
        }
LABEL_199:
        __break(0xC471u);
        JUMPOUT(0x19875845CLL);
      }
    }
    else if (v73 > 1)
    {
      goto LABEL_199;
    }
    __break(0xC471u);
    JUMPOUT(0x198758C08);
  }
  if (ready == 2)
  {
    v172 = *((_QWORD *)v60 + 15);
    if (v172)
      LODWORD(v172) = *(unsigned __int8 *)(v172 + 12);
    v173 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v60 & 0xFFFFFFFE) + 0x4C));
    if (v173 == &JSC::FunctionCodeBlock::s_info)
    {
      v174 = *((_QWORD *)v60 + 8);
      v175 = (uint64_t *)(v174 + 96);
      v176 = (uint64_t *)(v174 + 104);
      if (*(int *)(*((_QWORD *)v60 + 7) + 20) >= 0)
        v176 = v175;
    }
    else
    {
      if (v173 != &JSC::EvalCodeBlock::s_info
        && v173 != &JSC::ProgramCodeBlock::s_info
        && v173 != &JSC::ModuleProgramCodeBlock::s_info)
      {
        __break(0xC471u);
        JUMPOUT(0x198759200);
      }
      v176 = (uint64_t *)(*((_QWORD *)v60 + 8) + 72);
    }
    v177 = *v176;
    if (!v177)
      goto LABEL_213;
    v178 = *(_QWORD *)(v177 + 120);
    if (v178)
    {
      if (v172 > 1)
      {
        v179 = *(unsigned __int8 *)(v178 + 12);
        if (v179 > 1)
        {
          if (v179 > v172)
            goto LABEL_237;
LABEL_213:
          v180 = *(JSC::Profiler::Database **)(*((_QWORD *)v60 + 9) + 93016);
          if (v180)
          {
            *(double *)&v393 = COERCE_DOUBLE(off_1E3572250);
            v394 = (WTF *)v396;
            v395 = xmmword_199122F80;
            v396[0] = 0;
            WTF::PrintStream::printf((WTF::PrintStream *)&v393, "%s", "compiled and failed");
            (*((void (**)(WTF **))v393 + 5))(&v393);
            WTF::StringPrintStream::toCString(&v393, (uint64_t *)&v383);
            if (v394 != (WTF *)v396)
              WTF::fastFree((unint64_t)v394, v339, v340, v341, v342, v343, v344, v345);
            JSC::Profiler::Database::logEvent(v180, (uint64_t)v60, "delayOptimizeToDFG", &v383, v342, v343, v344, v345);
            v346 = v383;
            *(double *)&v383 = 0.0;
            if (v346)
            {
              if (*(_DWORD *)v346 == 1)
                WTF::fastFree((unint64_t)v346, v63, v64, v65, v66, v67, v68, v69);
              else
                --*(_DWORD *)v346;
            }
          }
          JSC::CodeBlock::updateAllPredictions(v60, (int8x8_t)v70, (uint64_t)v63, v64, v65, v66, v67, v68, v69);
          if (BYTE1(qword_1ECF4C332))
            WTF::dataLog<char [12],JSC::CodeBlock,char [60],char [2]>("Code block ", (uint64_t)v60, " was compiled but it doesn't have an optimized replacement.", "\n");
          goto LABEL_124;
        }
LABEL_253:
        __break(0xC471u);
        JUMPOUT(0x1987587A8);
      }
    }
    else if (v172 > 1)
    {
      goto LABEL_253;
    }
    __break(0xC471u);
    JUMPOUT(0x1987591ACLL);
  }
  if (JSC::CodeBlock::hasOptimizedReplacement(v60))
  {
    v230 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v60 & 0xFFFFFFFE) + 0x4C));
    if (v230 == &JSC::FunctionCodeBlock::s_info)
    {
      v231 = *((_QWORD *)v60 + 8);
      v232 = (WTF **)(v231 + 96);
      v233 = (WTF **)(v231 + 104);
      if (*(int *)(*((_QWORD *)v60 + 7) + 20) >= 0)
        v233 = v232;
    }
    else
    {
      if (v230 != &JSC::EvalCodeBlock::s_info
        && v230 != &JSC::ProgramCodeBlock::s_info
        && v230 != &JSC::ModuleProgramCodeBlock::s_info)
      {
        __break(0xC471u);
        JUMPOUT(0x1987595ACLL);
      }
      v233 = (WTF **)(*((_QWORD *)v60 + 8) + 72);
    }
    v234 = *v233;
    v391 = *v233;
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<char [17],JSC::CodeBlock *,char [5],JSC::CodeBlock *,char [2],char [2]>((uint64_t *)&v388, (uint64_t *)&v391);
    if ((*(_WORD *)(*((_QWORD *)v234 + 7) + 28) & 0x3000) == 0x1000)
      v236 = DWORD1(xmmword_1ECF4C514);
    else
      v236 = 1;
    v235 = *((_DWORD *)v234 + 9);
    if (v235 >= JSC::CodeBlock::adjustedExitCountThreshold(v234, v236 * DWORD1(xmmword_1ECF4C534)))
    {
      v238 = *(JSC::Profiler::Database **)(*((_QWORD *)v60 + 9) + 93016);
      if (v238)
      {
        *(double *)&v393 = COERCE_DOUBLE(off_1E3572250);
        v394 = (WTF *)v396;
        v395 = xmmword_199122F80;
        v396[0] = 0;
        WTF::PrintStream::printf((WTF::PrintStream *)&v393, "%s", "should reoptimize from loop now");
        (*((void (**)(WTF **))v393 + 5))(&v393);
        WTF::StringPrintStream::toCString(&v393, (uint64_t *)&v383);
        if (v394 != (WTF *)v396)
          WTF::fastFree((unint64_t)v394, v356, v357, v358, v359, v360, v361, v362);
        JSC::Profiler::Database::logEvent(v238, (uint64_t)v60, "delayOptimizeToDFG", &v383, v359, v360, v361, v362);
        v366 = v383;
        *(double *)&v383 = 0.0;
        if (v366)
        {
          if (*(_DWORD *)v366 == 1)
            WTF::fastFree((unint64_t)v366, v363, v364, v365, v66, v67, v68, v69);
          else
            --*(_DWORD *)v366;
        }
      }
      if (BYTE1(qword_1ECF4C332))
        WTF::dataLog<char [30],JSC::CodeBlock *,char [2],JSC::CodeBlock *,char [13],char [2]>((uint64_t *)&v388, (uint64_t *)&v391);
      v239 = (uint64_t)v234;
      v240 = 4;
LABEL_283:
      JSC::CodeBlock::jettison(v239, v240, 1, 0, v237, v66, v67, v68, v69);
      goto LABEL_124;
    }
  }
  else
  {
    if ((JSC::CodeBlock::shouldOptimizeNowFromBaseline(v60, v124, v119, v120, v121, v122, v123) & 1) == 0)
    {
      if (BYTE1(qword_1ECF4C332))
        WTF::dataLog<char [27],JSC::CodeBlock,char [36],char [2]>((uint64_t)v60);
      goto LABEL_124;
    }
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<char [37],JSC::CodeBlock,char [2]>("Triggering optimized compilation of ", (uint64_t)v60, "\n");
    v131 = 0;
    v132 = v389;
    if (v389 != -1 && v389 != 0x3FFFFFFF)
      v131 = *((_DWORD *)v60 + 5);
    v133 = *((unsigned int *)v60 + 7);
    v134 = v133 + v131;
    *(double *)&v383 = 0.0;
    v384 = 0;
    v385 = v133 + v131;
    if (!v134)
      goto LABEL_227;
    if (v134 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x198759A20);
    }
    v135 = (WTF *)WTF::fastMalloc((WTF *)(16 * v134));
    v384 = v133 + v131;
    v383 = v135;
    if (v385)
    {
      v136 = (WTF *)((char *)v135 + 16 * v385);
      do
      {
        *(_BYTE *)v135 = 0;
        *((_BYTE *)v135 + 8) = 0;
        v135 = (WTF *)((char *)v135 + 16);
      }
      while (v135 != v136);
      v137 = v385;
      v386 = v133;
      v387 = v131;
      if (v385)
      {
        v138 = 0;
        v139 = 0;
        v140 = -1;
        do
        {
          if (v139 < v386)
          {
            v141 = v139 + 5;
          }
          else
          {
            if (v387 + (unint64_t)v386 <= v139)
            {
              v142 = v139 - (v386 + v387);
              goto LABEL_156;
            }
            v141 = v140 + v386;
          }
          if (v141 <= 0xFFFFFFFB)
          {
            v142 = v141;
LABEL_156:
            v143 = v8[v142];
            v144 = (char *)v383 + v138;
            if (!*((_BYTE *)v383 + v138 + 8))
              v144[8] = 1;
            *(_QWORD *)v144 = v143;
            v137 = v385;
          }
          ++v139;
          --v140;
          v138 += 16;
        }
        while (v139 < v137);
      }
    }
    else
    {
LABEL_227:
      v386 = v133;
      v387 = v131;
    }
    v181 = (JSC::CodeBlock *)JSC::ScriptExecutable::newReplacementCodeBlockFor(*((_QWORD *)v60 + 8), *(_DWORD *)(*((_QWORD *)v60 + 7) + 20) >> 31, v125, v126, v127, v128, v129, v130);
    if (byte_1ECF4C25E)
      v182 = 3;
    else
      v182 = 2;
    *(double *)&v183 = COERCE_DOUBLE(WTF::fastMalloc((WTF *)0x18));
    *(_DWORD *)(v183 + 8) = 1;
    *(_QWORD *)(v183 + 16) = 0;
    *(_QWORD *)v183 = off_1E3596348;
    v393 = (WTF *)v183;
    v187 = JSC::DFG::compile((JSC::VM *)a1, v181, 0, v182, v132, (uint64_t *)&v383, (uint64_t)&v393);
    v188 = v393;
    *(double *)&v393 = 0.0;
    if (v188)
    {
      if (*((_DWORD *)v188 + 2) == 1)
        (*(void (**)(WTF *))(*(_QWORD *)v188 + 8))(v188);
      else
        --*((_DWORD *)v188 + 2);
    }
    if (v187 != 2 && *(_QWORD *)(*((_QWORD *)v60 + 9) + 93016))
    {
      v381 = *(JSC::Profiler::Database **)(*((_QWORD *)v60 + 9) + 93016);
      *(double *)&v393 = COERCE_DOUBLE(off_1E3572250);
      v394 = (WTF *)v396;
      v395 = xmmword_199122F80;
      v396[0] = 0;
      WTF::PrintStream::printf((WTF::PrintStream *)&v393, "%s", "compilation failed");
      (*((void (**)(WTF **))v393 + 5))(&v393);
      WTF::StringPrintStream::toCString(&v393, (uint64_t *)&v391);
      if (v394 != (WTF *)v396)
        WTF::fastFree((unint64_t)v394, v302, v303, v304, v305, v306, v307, v308);
      JSC::Profiler::Database::logEvent(v381, (uint64_t)v60, "delayOptimizeToDFG", &v391, v305, v306, v307, v308);
      v309 = v391;
      *(double *)&v391 = 0.0;
      if (v309)
      {
        if (*(_DWORD *)v309 == 1)
          WTF::fastFree((unint64_t)v309, v184, v185, v186, v66, v67, v68, v69);
        else
          --*(_DWORD *)v309;
      }
    }
    v189 = v383;
    if (*(double *)&v383 != 0.0)
    {
      *(double *)&v383 = 0.0;
      v384 = 0;
      WTF::fastFree((unint64_t)v189, v184, v185, v186, v66, v67, v68, v69);
    }
    if (v187 != 2)
      goto LABEL_124;
  }
LABEL_237:
  v190 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v60 & 0xFFFFFFFE) + 0x4C));
  if (v190 == &JSC::FunctionCodeBlock::s_info)
  {
    v191 = *((_QWORD *)v60 + 8);
    v192 = (uint64_t *)(v191 + 96);
    v193 = (uint64_t *)(v191 + 104);
    if (*(int *)(*((_QWORD *)v60 + 7) + 20) >= 0)
      v193 = v192;
  }
  else
  {
    if (v190 != &JSC::EvalCodeBlock::s_info
      && v190 != &JSC::ProgramCodeBlock::s_info
      && v190 != &JSC::ModuleProgramCodeBlock::s_info)
    {
      __break(0xC471u);
      JUMPOUT(0x19875918CLL);
    }
    v193 = (uint64_t *)(*((_QWORD *)v60 + 8) + 72);
  }
  v194 = *v193;
  v391 = (WTF *)v194;
  if (!JSC::DFG::prepareOSREntry((JSC *)a1, v8, (_QWORD *)v194, v389, v66, v67, v68, v69))
  {
    if (BYTE1(qword_1ECF4C332))
    {
      *(double *)&v393 = COERCE_DOUBLE(JSC::CodeBlock::replacement(v60));
      LODWORD(v383) = *((unsigned __int16 *)v60 + 52);
      WTF::dataLog<char [12],JSC::CodeBlock *,char [5],JSC::CodeBlock *,char [42],unsigned int,char [2]>((uint64_t *)&v388, (uint64_t *)&v393, &v383);
    }
    ++*(_DWORD *)(v194 + 36);
    if (!JSC::CodeBlock::shouldReoptimizeNow((JSC::CodeBlock *)v194))
    {
      JSC::CodeBlock::optimizeAfterWarmUp((uint64_t)v60, v326);
      JSC::VM::logEvent<operationOptimize::$_10>(*(JSC::Profiler::Database **)(*((_QWORD *)v60 + 9) + 93016), (uint64_t)v60);
      goto LABEL_124;
    }
    JSC::VM::logEvent<operationOptimize::$_9>(*(JSC::Profiler::Database **)(*((_QWORD *)v60 + 9) + 93016), (uint64_t)v60);
    if (BYTE1(qword_1ECF4C332))
    {
      *(double *)&v393 = COERCE_DOUBLE(JSC::CodeBlock::replacement(v60));
      WTF::dataLog<char [30],JSC::CodeBlock *,char [5],JSC::CodeBlock *,char [19],char [2]>((uint64_t *)&v388, (uint64_t *)&v393);
    }
    v239 = v194;
    v240 = 5;
    goto LABEL_283;
  }
  if (*(double *)&v194 != 0.0 && *(_QWORD *)(*(_QWORD *)(v194 + 72) + 93016))
  {
    v382 = *(JSC::Profiler::Database **)(*(_QWORD *)(v194 + 72) + 93016);
    *(double *)&v393 = COERCE_DOUBLE(off_1E3572250);
    v394 = (WTF *)v396;
    v395 = xmmword_199122F80;
    v396[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v393, "%s", "at bc#");
    JSC::BytecodeIndex::dump((JSC::BytecodeIndex *)&v389, (WTF::PrintStream *)&v393);
    (*((void (**)(WTF **))v393 + 5))(&v393);
    WTF::StringPrintStream::toCString(&v393, (uint64_t *)&v383);
    if (v394 != (WTF *)v396)
      WTF::fastFree((unint64_t)v394, v310, v311, v312, v313, v314, v315, v316);
    JSC::Profiler::Database::logEvent(v382, v194, "osrEntry", &v383, v313, v314, v315, v316);
    v324 = v383;
    *(double *)&v383 = 0.0;
    if (v324)
    {
      if (*(_DWORD *)v324 == 1)
        WTF::fastFree((unint64_t)v324, v317, v318, v319, v320, v321, v322, v323);
      else
        --*(_DWORD *)v324;
    }
  }
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<char [16],JSC::CodeBlock *,char [5],JSC::CodeBlock *,char [2]>((uint64_t *)&v388, (uint64_t *)&v391);
  JSC::CodeBlock::optimizeSoon(v60, v195);
  *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v60 + 7) + 72) + 4) = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v60 + 7) + 72) + 4) & 0xCF | 0x10;
  JSC::JITThunks::ctiStub(*(_QWORD *)(a1 + 90440), a1, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::DFG::osrEntryThunkGenerator, v196, v197, v198, v199, v200, &v393);
  v115 = v393;
  v208 = (unsigned int *)v394;
  v394 = 0;
  if (v208)
  {
    do
    {
      v209 = __ldaxr(v208);
      v210 = v209 - 1;
    }
    while (__stlxr(v210, v208));
    if (!v210)
    {
      atomic_store(1u, v208);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v208, v201, v202, v203, v204, v205, v206, v207);
      WTF::fastFree(v211, v212, v213, v214, v215, v216, v217, v218);
    }
  }
LABEL_125:
  --*(_DWORD *)(a1 + 916);
  return v115;
}

void JSC::JIT::emit_op_get_scope(_DWORD *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v9 = *a2;
  if (v9 == 130)
  {
    v13 = *(unsigned int *)(a2 + 2);
  }
  else
  {
    if (v9 == 128)
    {
      v10 = *((__int16 *)a2 + 1);
      v11 = v10 + 1073741760;
      v12 = v10 <= 63;
    }
    else
    {
      v10 = (char)a2[1];
      v11 = v10 + 1073741808;
      v12 = v10 <= 15;
    }
    if (v12)
      v13 = v10;
    else
      v13 = v11;
  }
  v14 = a1[50];
  if (v14 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v14 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v14) = -129924192;
  v15 = a1[50];
  v16 = v15 + 4;
  a1[50] = v15 + 4;
  if ((v15 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v16 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v16) = -129957888;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 0, (v13 << 35) | 0x1D, a4, a5, a6, a7, a8);
}

void JSC::JIT::emit_op_to_this(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  int *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  int v69;
  _DWORD *v70;
  uint64_t v71;
  _DWORD *v72;
  _DWORD *v73;
  _DWORD *v74;
  unint64_t v75;
  BOOL v76;
  char **v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  int v91;
  unint64_t v92;
  int v93;
  unint64_t v94;
  int v95;

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    v11 = *((unsigned __int16 *)a2 + 4);
    if ((int)v10 <= 63)
      goto LABEL_4;
    v65 = 1073741760;
LABEL_34:
    v10 = (v10 + v65);
    goto LABEL_35;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = a2[4];
    if ((int)v10 < 16)
    {
LABEL_4:
      JSC::MacroAssemblerARM64::load64(a1, (v10 << 35) | 0x1D, 0, a4, a5, a6, a7, a8);
LABEL_5:
      JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v12, v13, v14, v15, v16, (uint64_t)&v91);
      v19 = (_QWORD *)(a1 + 648);
      v20 = *(_DWORD *)(a1 + 640);
      v93 = v91;
      v94 = v92;
      v95 = v20;
      v21 = *(unsigned int *)(a1 + 660);
      if ((_DWORD)v21 == *(_DWORD *)(a1 + 656))
      {
        v63 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v21 + 1, (unint64_t)&v93);
        v64 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
        *(_DWORD *)v64 = *(_DWORD *)v63;
        *(_QWORD *)(v64 + 4) = *(_QWORD *)(v63 + 4);
        v24 = (int *)(v64 + 12);
        v22 = (int *)(v63 + 12);
      }
      else
      {
        v22 = &v95;
        v23 = *v19 + 16 * v21;
        *(_DWORD *)v23 = v91;
        *(_QWORD *)(v23 + 4) = v94;
        v24 = (int *)(v23 + 12);
      }
      *v24 = *v22;
      ++*(_DWORD *)(a1 + 660);
      goto LABEL_8;
    }
    v65 = 1073741808;
    goto LABEL_34;
  }
  v10 = *(unsigned int *)(a2 + 2);
  v11 = *(_DWORD *)(a2 + 14);
LABEL_35:
  if ((int)v10 < 0x40000000)
    goto LABEL_4;
  v66 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v67 = (v10 - 0x40000000);
  v68 = *(_DWORD **)(v66 + 120);
  if (!v68 || *v68 <= v67)
    goto LABEL_48;
  v69 = *((unsigned __int8 *)v68 + v67 + 4);
  if ((v69 - 1) >= 2)
  {
    if (v69)
    {
      if (v69 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19875A0B4);
      }
      goto LABEL_59;
    }
LABEL_48:
    v74 = *(_DWORD **)(v66 + 112);
    if (*v74 <= v67)
    {
      __break(0xC471u);
      JUMPOUT(0x19875A1ACLL);
    }
    v75 = *(_QWORD *)&v74[2 * v67 + 2];
    if (v75)
      v76 = (v75 & 0xFFFE000000000002) == 0;
    else
      v76 = 0;
    if (!v76)
      goto LABEL_39;
    v77 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v75 & 0xFFFFFFFE) + 0x4C));
    if (v77 != &JSC::SymbolTable::s_info && v77 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_39;
LABEL_59:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v79, v80, v81, v82, v83);
    JSC::MacroAssemblerARM64::load64(a1, v10 << 35, 0, v84, v85, v86, v87, v88);
    goto LABEL_41;
  }
LABEL_39:
  v70 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v70 <= v67)
  {
    __break(0xC471u);
    JUMPOUT(0x19875A18CLL);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v70[2 * v67 + 2], 0, a4, a5, a6, a7, a8);
LABEL_41:
  v71 = *(_QWORD *)(a1 + 808);
  v72 = *(_DWORD **)(v71 + 120);
  if (!v72 || *v72 <= v67 || *((_BYTE *)v72 + v67 + 4) != 3)
  {
    v73 = *(_DWORD **)(v71 + 112);
    if (*v73 <= v67)
    {
      __break(0xC471u);
      JUMPOUT(0x19875A16CLL);
    }
    if ((*(_QWORD *)&v73[2 * v67 + 2] & 0xFFFE000000000002) != 0)
      goto LABEL_5;
  }
LABEL_8:
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19875A0D4);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v25 = *(_BYTE *)(a1 + 304) & 0x1F | 0x38405000;
  v26 = *(_DWORD *)(a1 + 200);
  if (v26 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v17, v18, v12, v13, v14, v15, v16);
    v26 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v26) = v25;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 24, v13, v14, v15, v16, (uint64_t)&v89);
  v32 = (_QWORD *)(a1 + 648);
  v33 = v90;
  v34 = *(_DWORD *)(a1 + 640);
  v93 = v89;
  v94 = v90;
  v95 = v34;
  v35 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v35 == *(_DWORD *)(a1 + 656))
  {
    v59 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v35 + 1, (unint64_t)&v93);
    v60 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v60 = *(_DWORD *)v59;
    *(_QWORD *)(v60 + 4) = *(_QWORD *)(v59 + 4);
    *(_DWORD *)(v60 + 12) = *(_DWORD *)(v59 + 12);
  }
  else
  {
    v36 = *v32 + 16 * v35;
    *(_DWORD *)v36 = v89;
    *(_QWORD *)(v36 + 4) = v33;
    *(_DWORD *)(v36 + 12) = v34;
  }
  ++*(_DWORD *)(a1 + 660);
  v37 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v37)
    v38 = *(unsigned __int16 *)(v37 + 84);
  else
    v38 = *(_DWORD *)(v37 + 264);
  JSC::MacroAssemblerARM64::load32(a1, ((unint64_t)((((v38 + 3) & 0xFFFFFFFC) + 8 * v11) >> 2) << 34) | 0x19, 2, v27, v28, v29, v30, v31);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19875A104);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v46 = *(_BYTE *)(a1 + 304) & 0x1F | 0xB8400000;
  v47 = *(_DWORD *)(a1 + 200);
  if (v47 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v39, v40, v41, v42, v43, v44, v45);
    v47 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v47) = v46;
  v48 = *(_DWORD *)(a1 + 200);
  v49 = v48 + 4;
  *(_DWORD *)(a1 + 200) = v48 + 4;
  if ((v48 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v39, v40, v41, v42, v43, v44, v45);
    v49 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v49) = 1795293759;
  v50 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v50;
  if (*(_BYTE *)(a1 + 328))
  {
    while ((signed int)v50 < *(_DWORD *)(a1 + 52))
    {
      if (v50 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v39, v40, v41, v42, v43, v44, v45);
        v50 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v50) = -721215457;
      v50 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v50;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  if (v50 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v39, v40, v41, v42, v43, v44, v45);
    v50 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v50) = 1409286145;
  v51 = *(_DWORD *)(a1 + 200);
  v52 = v51 + 4;
  *(_DWORD *)(a1 + 200) = v51 + 4;
  v53 = v51 + 8;
  v54 = v51 + 4;
  if (v53 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v39, v40, v41, v42, v43, v44, v45);
    v54 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v54) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  v55 = 0xFF00018600000000;
  if (!*(_BYTE *)(a1 + 328))
    v55 = 0xFF00018200000000;
  v56 = *(_DWORD *)(a1 + 640);
  v93 = v52;
  v94 = v55;
  v95 = v56;
  v57 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v57 == *(_DWORD *)(a1 + 656))
  {
    v61 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v57 + 1, (unint64_t)&v93);
    v62 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v62 = *(_DWORD *)v61;
    *(_QWORD *)(v62 + 4) = *(_QWORD *)(v61 + 4);
    *(_DWORD *)(v62 + 12) = *(_DWORD *)(v61 + 12);
  }
  else
  {
    v58 = *v32 + 16 * v57;
    *(_DWORD *)v58 = v52;
    *(_QWORD *)(v58 + 4) = v55;
    *(_DWORD *)(v58 + 12) = v56;
  }
  ++*(_DWORD *)(a1 + 660);
}

void JSC::JIT::emit_op_create_this(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int8x8_t v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int8x8_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int *v103;
  int *v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  _DWORD *v110;
  _DWORD *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  _DWORD *v131;
  int v132;
  _DWORD *v133;
  _DWORD *v134;
  unint64_t v135;
  BOOL v136;
  char **v137;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  _BYTE v145[24];
  int v146;
  uint64_t v147;
  unsigned int v148[3];
  int v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  __int128 v153;

  v9 = *a2;
  if (v9 == 128)
  {
    v128 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v128 <= 63)
      v12 = v128;
    else
      v12 = (v128 + 1073741760);
    v13 = *((__int16 *)a2 + 2);
    v14 = *((unsigned __int16 *)a2 + 4);
    if ((int)v13 <= 63)
      goto LABEL_7;
LABEL_50:
    v13 = (v13 + v11);
    goto LABEL_51;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    if (v10 <= 15)
      v12 = v10;
    else
      v12 = (v10 + 1073741808);
    v13 = (char)a2[2];
    v14 = a2[4];
    if ((int)v13 < 16)
      goto LABEL_7;
    goto LABEL_50;
  }
  v12 = *(unsigned int *)(a2 + 2);
  v13 = *(unsigned int *)(a2 + 6);
  v14 = *(_DWORD *)(a2 + 14);
LABEL_51:
  if ((int)v13 < 0x40000000)
  {
LABEL_7:
    v15 = (v13 << 35) | 0x1D;
LABEL_8:
    JSC::MacroAssemblerARM64::load64(a1, v15, 0, a4, a5, a6, a7, a8);
    goto LABEL_9;
  }
  v129 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v130 = (v13 - 0x40000000);
  v131 = *(_DWORD **)(v129 + 120);
  if (!v131 || *v131 <= v130)
    goto LABEL_58;
  v132 = *((unsigned __int8 *)v131 + v130 + 4);
  if ((v132 - 1) >= 2)
  {
    if (v132)
    {
      if (v132 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19875A93CLL);
      }
      goto LABEL_69;
    }
LABEL_58:
    v134 = *(_DWORD **)(v129 + 112);
    if (*v134 <= v130)
    {
      __break(0xC471u);
      JUMPOUT(0x19875A97CLL);
    }
    v135 = *(_QWORD *)&v134[2 * v130 + 2];
    if (v135)
      v136 = (v135 & 0xFFFE000000000002) == 0;
    else
      v136 = 0;
    if (!v136)
      goto LABEL_55;
    v137 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v135 & 0xFFFFFFFE) + 0x4C));
    if (v137 != &JSC::SymbolTable::s_info && v137 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_55;
LABEL_69:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v139, v140, v141, v142, v143);
    v15 = v13 << 35;
    goto LABEL_8;
  }
LABEL_55:
  v133 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v133 <= v130)
  {
    __break(0xC471u);
    JUMPOUT(0x19875A95CLL);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v133[2 * v130 + 2], 0, a4, a5, a6, a7, a8);
LABEL_9:
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19875A790);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v23 = *(_BYTE *)(a1 + 304) & 0x1F | 0x38405000;
  v24 = *(_DWORD *)(a1 + 200);
  if (v24 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v16, v17, v18, v19, v20, v21, v22);
    v24 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v24) = v23;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 26, v19, v20, v21, v22, (uint64_t)&v151);
  v33 = (_QWORD *)(a1 + 648);
  v34 = v152;
  v35 = *(_DWORD *)(a1 + 640);
  LODWORD(v144) = v151;
  *(_QWORD *)((char *)&v144 + 4) = v152;
  HIDWORD(v144) = v35;
  v36 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v36 == *(_DWORD *)(a1 + 656))
  {
    v122 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v36 + 1, (unint64_t)&v144);
    v123 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v123 = *(_DWORD *)v122;
    *(_QWORD *)(v123 + 4) = *(_QWORD *)(v122 + 4);
    *(_DWORD *)(v123 + 12) = *(_DWORD *)(v122 + 12);
  }
  else
  {
    v37 = *v33 + 16 * v36;
    *(_DWORD *)v37 = v151;
    *(_QWORD *)(v37 + 4) = v34;
    *(_DWORD *)(v37 + 12) = v35;
  }
  ++*(_DWORD *)(a1 + 660);
  v38 = *(_DWORD *)(a1 + 200);
  if (v38 + 4 > *(_DWORD *)(a1 + 192))
  {
    v32 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v25, v26, v27, v28, v29, v30, v31).n128_u64[0];
    v38 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v38) = -129925116;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, 4, 1, v28, v29, v30, v31, (uint64_t)&v149, v32);
  v46 = v150;
  v47 = *(_DWORD *)(a1 + 640);
  LODWORD(v144) = v149;
  *(_QWORD *)((char *)&v144 + 4) = v150;
  HIDWORD(v144) = v47;
  v48 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v48 == *(_DWORD *)(a1 + 656))
  {
    v124 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v48 + 1, (unint64_t)&v144);
    v125 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v125 = *(_DWORD *)v124;
    *(_QWORD *)(v125 + 4) = *(_QWORD *)(v124 + 4);
    *(_DWORD *)(v125 + 12) = *(_DWORD *)(v124 + 12);
  }
  else
  {
    v49 = *v33 + 16 * v48;
    *(_DWORD *)v49 = v149;
    *(_QWORD *)(v49 + 4) = v46;
    *(_DWORD *)(v49 + 12) = v47;
  }
  ++*(_DWORD *)(a1 + 660);
  v50 = *(_DWORD *)(a1 + 200);
  if (v50 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v39, v40, v41, v42, v43, v44, v45);
    v50 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v50) = -129994623;
  v51 = *(_DWORD *)(a1 + 200);
  v52 = v51 + 4;
  *(_DWORD *)(a1 + 200) = v51 + 4;
  if ((v51 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v39, v40, v41, v42, v43, v44, v45);
    v52 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v52) = -129961854;
  *(_DWORD *)(a1 + 200) += 4;
  v53 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v53)
    v54 = *(unsigned __int16 *)(v53 + 56);
  else
    v54 = *(_DWORD *)(v53 + 208);
  JSC::MacroAssemblerARM64::load64(a1, ((unint64_t)((((v54 + 7) & 0xFFFFFFF8) + 8 * v14) >> 3) << 35) | 0x19, 4, v41, v42, v43, v44, v45);
  JSC::MacroAssemblerARM64::branch64(a1, 0, 4, 1, v55, v56, v57, v58, (uint64_t)v148);
  JSC::MacroAssemblerARM64::branch64(a1, 1, 0, 4, v59, v60, v61, v62, (uint64_t)&v146);
  v69 = v147;
  v70 = *(_DWORD *)(a1 + 640);
  LODWORD(v144) = v146;
  *(_QWORD *)((char *)&v144 + 4) = v147;
  HIDWORD(v144) = v70;
  v71 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v71 == *(_DWORD *)(a1 + 656))
  {
    v126 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v71 + 1, (unint64_t)&v144);
    v127 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v127 = *(_DWORD *)v126;
    *(_QWORD *)(v127 + 4) = *(_QWORD *)(v126 + 4);
    *(_DWORD *)(v127 + 12) = *(_DWORD *)(v126 + 12);
  }
  else
  {
    v72 = *v33 + 16 * v71;
    *(_DWORD *)v72 = v146;
    *(_QWORD *)(v72 + 4) = v69;
    *(_DWORD *)(v72 + 12) = v70;
  }
  ++*(_DWORD *)(a1 + 660);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v148, a1, v63, v64, v65, v66, v67, v68);
  *(_QWORD *)&v144 = v145;
  *((_QWORD *)&v144 + 1) = 2;
  v153 = xmmword_199123080;
  JSC::AssemblyHelpers::emitAllocateJSObject<JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((_DWORD *)a1, (uint64_t)&v153, 2u, 3, (uint64_t)&v144, (int8x8_t)1, v73, v74, v75);
  v84 = *(_DWORD *)(a1 + 200);
  if (v84 + 4 > *(_DWORD *)(a1 + 192))
  {
    v83 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v76, v77, v78, v79, v80, v81, v82).n128_u64[0];
    v84 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v84) = 943775811;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AssemblyHelpers::emitInitializeInlineStorage(a1, 0, 3, v83, v78, v79, v80, v81, v82);
  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded((JSC::AssemblyHelpers *)a1, *(JSC::VM **)(a1 + 352), v85, v86, v87, v88, v89, (uint64_t)&v153);
  v97 = *(_DWORD *)(a1 + 200);
  if (v97 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v90, v91, v92, v93, v94, v95, v96);
    v97 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v97) = -721208641;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v153, a1, v91, v92, v93, v94, v95, v96);
  if (HIDWORD(v144))
  {
    v103 = (int *)v144;
    v104 = (int *)(v144 + 12 * HIDWORD(v144));
    v105 = *(_DWORD *)(a1 + 660);
    do
    {
      v106 = *v103;
      v107 = *(_QWORD *)(v103 + 1);
      v108 = *(_DWORD *)(a1 + 640);
      LODWORD(v153) = *v103;
      *(_QWORD *)((char *)&v153 + 4) = v107;
      HIDWORD(v153) = v108;
      if (v105 == *(_DWORD *)(a1 + 656))
      {
        v112 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v105 + 1, (unint64_t)&v153);
        v113 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
        *(_DWORD *)v113 = *(_DWORD *)v112;
        *(_QWORD *)(v113 + 4) = *(_QWORD *)(v112 + 4);
        v110 = (_DWORD *)(v113 + 12);
        v111 = (_DWORD *)(v112 + 12);
      }
      else
      {
        v109 = *v33 + 16 * v105;
        *(_DWORD *)v109 = v106;
        *(_QWORD *)(v109 + 4) = *(_QWORD *)((char *)&v153 + 4);
        v110 = (_DWORD *)(v109 + 12);
        v111 = (_DWORD *)&v153 + 3;
      }
      *v110 = *v111;
      v105 = *(_DWORD *)(a1 + 660) + 1;
      *(_DWORD *)(a1 + 660) = v105;
      v103 += 3;
    }
    while (v103 != v104);
  }
  JSC::MacroAssemblerARM64::store64(a1, 0, (v12 << 35) | 0x1D, v98, v99, v100, v101, v102);
  v121 = v144;
  if (v145 != (_BYTE *)v144)
  {
    if ((_QWORD)v144)
    {
      *(_QWORD *)&v144 = 0;
      DWORD2(v144) = 0;
      WTF::fastFree(v121, v114, v115, v116, v117, v118, v119, v120);
    }
  }
}

uint64_t JSC::JIT::emit_op_check_tdz(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x8_t v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  _DWORD *v28;
  _DWORD *v29;
  unint64_t v30;
  BOOL v31;
  char **v32;
  JSC::AssemblerBuffer *v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    if ((int)v10 <= 63)
      goto LABEL_4;
    v23 = 1073741760;
LABEL_11:
    v10 = (v10 + v23);
    goto LABEL_12;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    if ((int)v10 < 16)
    {
LABEL_4:
      v11 = (v10 << 35) | 0x1D;
LABEL_5:
      JSC::MacroAssemblerARM64::load64(a1, v11, 0, a4, a5, a6, a7, a8);
      goto LABEL_6;
    }
    v23 = 1073741808;
    goto LABEL_11;
  }
  v10 = *(unsigned int *)(a2 + 2);
LABEL_12:
  if ((int)v10 < 0x40000000)
    goto LABEL_4;
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v25 = (v10 - 0x40000000);
  v26 = *(_DWORD **)(v24 + 120);
  if (!v26 || *v26 <= v25)
    goto LABEL_19;
  v27 = *((unsigned __int8 *)v26 + v25 + 4);
  if ((v27 - 1) >= 2)
  {
    if (v27)
    {
      if (v27 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19875ABE0);
      }
      goto LABEL_30;
    }
LABEL_19:
    v29 = *(_DWORD **)(v24 + 112);
    if (*v29 <= v25)
    {
      __break(0xC471u);
      JUMPOUT(0x19875AC20);
    }
    v30 = *(_QWORD *)&v29[2 * v25 + 2];
    if (v30)
      v31 = (v30 & 0xFFFE000000000002) == 0;
    else
      v31 = 0;
    if (!v31)
      goto LABEL_16;
    v32 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x4C));
    if (v32 != &JSC::SymbolTable::s_info && v32 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_16;
LABEL_30:
    v34 = (JSC::AssemblerBuffer *)(a1 + 56);
    v35 = *(_DWORD *)(a1 + 200);
    if (v35 + 4 > *(_DWORD *)(a1 + 192))
    {
      v38 = v10;
      JSC::AssemblerBuffer::outOfLineGrow(v34, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v34 = (JSC::AssemblerBuffer *)(a1 + 56);
      v10 = v38;
      v35 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v35) = -129956960;
    v36 = *(_DWORD *)(a1 + 200);
    v37 = v36 + 4;
    *(_DWORD *)(a1 + 200) = v36 + 4;
    if ((v36 + 8) > *(_DWORD *)(a1 + 192))
    {
      v39 = v10;
      JSC::AssemblerBuffer::outOfLineGrow(v34, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v10 = v39;
      v37 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v37) = -129368064;
    *(_DWORD *)(a1 + 200) += 4;
    v11 = v10 << 35;
    goto LABEL_5;
  }
LABEL_16:
  v28 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v28 <= v25)
  {
    __break(0xC471u);
    JUMPOUT(0x19875AC00);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v28[2 * v25 + 2], 0, a4, a5, a6, a7, a8);
LABEL_6:
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, 0, 0xFFFFFFFFLL, v12, v13, v14, v15, (uint64_t)&v40, v16);
  result = a1 + 648;
  v18 = v41;
  v19 = *(_DWORD *)(a1 + 640);
  v42 = v40;
  v43 = v41;
  v44 = v19;
  v20 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v20 == *(_DWORD *)(a1 + 656))
  {
    result = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v20 + 1, (unint64_t)&v42);
    v22 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
    *(_DWORD *)v22 = *(_DWORD *)result;
    *(_QWORD *)(v22 + 4) = *(_QWORD *)(result + 4);
    *(_DWORD *)(v22 + 12) = *(_DWORD *)(result + 12);
  }
  else
  {
    v21 = *(_QWORD *)result + 16 * v20;
    *(_DWORD *)v21 = v40;
    *(_QWORD *)(v21 + 4) = v18;
    *(_DWORD *)(v21 + 12) = v19;
  }
  ++*(_DWORD *)(a1 + 660);
  return result;
}

void JSC::JIT::emitSlow_op_eq(_DWORD *a1, unsigned __int8 *a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;

  JSC::JIT::linkAllSlowCases((uint64_t)a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  v17 = *a2;
  if (v17 == 128)
  {
    v18 = *((__int16 *)a2 + 1);
    v19 = v18 + 1073741760;
    v20 = v18 <= 63;
  }
  else
  {
    if (v17 == 130)
    {
      v21 = *(unsigned int *)(a2 + 2);
      goto LABEL_7;
    }
    v18 = (char)a2[1];
    v19 = v18 + 1073741808;
    v20 = v18 <= 15;
  }
  if (v20)
    v21 = v18;
  else
    v21 = v19;
LABEL_7:
  v22 = a1[50];
  if (v22 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v10, v11, v12, v13, v14, v15, v16);
    v22 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v22) = -129989822;
  a1[50] += 4;
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)a1, (unsigned __int8 *)operationCompareEq, 2, 0, 1, v14, v15, v16, &v31);
  v30 = a1[50];
  if (v30 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v23, v24, v25, v26, v27, v28, v29);
    v30 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v30) = 285218816;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 0, (v21 << 35) | 0x1D, v25, v26, v27, v28, v29);
}

void JSC::JIT::emitSlow_op_neq(_DWORD *a1, unsigned __int8 *a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;

  JSC::JIT::linkAllSlowCases((uint64_t)a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  v17 = *a2;
  if (v17 == 128)
  {
    v18 = *((__int16 *)a2 + 1);
    v19 = v18 + 1073741760;
    v20 = v18 <= 63;
  }
  else
  {
    if (v17 == 130)
    {
      v21 = *(unsigned int *)(a2 + 2);
      goto LABEL_7;
    }
    v18 = (char)a2[1];
    v19 = v18 + 1073741808;
    v20 = v18 <= 15;
  }
  if (v20)
    v21 = v18;
  else
    v21 = v19;
LABEL_7:
  v22 = a1[50];
  if (v22 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v10, v11, v12, v13, v14, v15, v16);
    v22 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v22) = -129989822;
  a1[50] += 4;
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)a1, (unsigned __int8 *)operationCompareEq, 2, 0, 1, v14, v15, v16, &v35);
  JSC::MacroAssemblerARM64::xor32((uint64_t)a1, (JSC::ARM64LogicalImmediate *)1, 0, 0, v23, v24, v25, v26);
  v34 = a1[50];
  if (v34 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v27, v28, v29, v30, v31, v32, v33);
    v34 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v34) = 285218816;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 0, (v21 << 35) | 0x1D, v29, v30, v31, v32, v33);
}

unsigned int *JSC::JIT::emitSlow_op_jeq(uint64_t a1, unsigned __int8 *a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45[3];
  int v46;

  JSC::JIT::linkAllSlowCases(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  v17 = *a2;
  if (v17 == 128)
  {
    v18 = *((__int16 *)a2 + 3);
  }
  else if (v17 == 130)
  {
    v18 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v18 = (char)a2[3];
  }
  if (!v18)
  {
    v32 = *(_QWORD *)(a1 + 808);
    v33 = *(_QWORD *)(v32 + 80);
    v34 = *(_QWORD *)v33;
    v35 = *(unsigned int *)(v33 + 12) + *(_QWORD *)v33;
    if (v34 > (unint64_t)a2 || v35 <= (unint64_t)a2)
    {
      __break(0xC471u);
      goto LABEL_25;
    }
    v37 = *(_QWORD *)(v32 + 144);
    if (v37)
    {
      v38 = (_DWORD)a2 - v34;
      v39 = *(_DWORD *)(v37 - 8);
      v40 = 9 * ((~(v38 << 15) + v38) ^ ((~(v38 << 15) + v38) >> 10));
      v41 = (v40 ^ (v40 >> 6)) + ~((v40 ^ (v40 >> 6)) << 11);
      v42 = v39 & (v41 ^ HIWORD(v41));
      v43 = *(_DWORD *)(v37 + 8 * v42);
      if (v43 == v38)
      {
LABEL_16:
        v18 = *(_DWORD *)(v37 + 8 * v42 + 4);
        goto LABEL_5;
      }
      v44 = 1;
      while (v43)
      {
        v42 = ((_DWORD)v42 + v44) & v39;
        v43 = *(_DWORD *)(v37 + 8 * v42);
        ++v44;
        if (v43 == v38)
          goto LABEL_16;
      }
    }
    v18 = 0;
  }
LABEL_5:
  v19 = *(_DWORD *)(a1 + 200);
  if (v19 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v10, v11, v12, v13, v14, v15, v16);
    v19 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v19) = -129989822;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(a1, (unsigned __int8 *)operationCompareEq, 2, 0, 1, v14, v15, v16, &v46);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 1, 0, v20, v21, v22, v23, (uint64_t)v45, v24);
  v30 = v18 + (*(_DWORD *)(a1 + 640) >> 2);
  if (*(_DWORD *)(a1 + 396) <= v30)
  {
    __break(0xC471u);
LABEL_25:
    JUMPOUT(0x19875B0A0);
  }
  v46 = *(_DWORD *)(*(_QWORD *)(a1 + 384) + 4 * v30);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v45, (unsigned int *)&v46, a1, v25, v26, v27, v28, v29);
}

unsigned int *JSC::JIT::emitSlow_op_jneq(uint64_t a1, unsigned __int8 *a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45[3];
  int v46;

  JSC::JIT::linkAllSlowCases(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  v17 = *a2;
  if (v17 == 128)
  {
    v18 = *((__int16 *)a2 + 3);
  }
  else if (v17 == 130)
  {
    v18 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v18 = (char)a2[3];
  }
  if (!v18)
  {
    v32 = *(_QWORD *)(a1 + 808);
    v33 = *(_QWORD *)(v32 + 80);
    v34 = *(_QWORD *)v33;
    v35 = *(unsigned int *)(v33 + 12) + *(_QWORD *)v33;
    if (v34 > (unint64_t)a2 || v35 <= (unint64_t)a2)
    {
      __break(0xC471u);
      goto LABEL_25;
    }
    v37 = *(_QWORD *)(v32 + 144);
    if (v37)
    {
      v38 = (_DWORD)a2 - v34;
      v39 = *(_DWORD *)(v37 - 8);
      v40 = 9 * ((~(v38 << 15) + v38) ^ ((~(v38 << 15) + v38) >> 10));
      v41 = (v40 ^ (v40 >> 6)) + ~((v40 ^ (v40 >> 6)) << 11);
      v42 = v39 & (v41 ^ HIWORD(v41));
      v43 = *(_DWORD *)(v37 + 8 * v42);
      if (v43 == v38)
      {
LABEL_16:
        v18 = *(_DWORD *)(v37 + 8 * v42 + 4);
        goto LABEL_5;
      }
      v44 = 1;
      while (v43)
      {
        v42 = ((_DWORD)v42 + v44) & v39;
        v43 = *(_DWORD *)(v37 + 8 * v42);
        ++v44;
        if (v43 == v38)
          goto LABEL_16;
      }
    }
    v18 = 0;
  }
LABEL_5:
  v19 = *(_DWORD *)(a1 + 200);
  if (v19 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v10, v11, v12, v13, v14, v15, v16);
    v19 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v19) = -129989822;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(a1, (unsigned __int8 *)operationCompareEq, 2, 0, 1, v14, v15, v16, &v46);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 0, 0, v20, v21, v22, v23, (uint64_t)v45, v24);
  v30 = v18 + (*(_DWORD *)(a1 + 640) >> 2);
  if (*(_DWORD *)(a1 + 396) <= v30)
  {
    __break(0xC471u);
LABEL_25:
    JUMPOUT(0x19875B278);
  }
  v46 = *(_DWORD *)(*(_QWORD *)(a1 + 384) + 4 * v30);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v45, (unsigned int *)&v46, a1, v25, v26, v27, v28, v29);
}

uint64_t JSC::JIT::emit_op_debug(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int8x8_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t result;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69[3];
  unsigned int v70[3];

  v10 = *a2;
  if (v10 == 128)
  {
    v11 = *((unsigned __int16 *)a2 + 1);
  }
  else if (v10 == 130)
  {
    v11 = *(_DWORD *)(a2 + 2);
  }
  else
  {
    v11 = a2[1];
  }
  v12 = *(_DWORD *)(a1 + 200);
  if (v12 + 4 > *(_DWORD *)(a1 + 192))
  {
    a9 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8).n128_u64[0];
    v12 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = -129956960;
  v13 = *(_DWORD *)(a1 + 200);
  v14 = v13 + 4;
  *(_DWORD *)(a1 + 200) = v13 + 4;
  if ((v13 + 8) > *(_DWORD *)(a1 + 192))
  {
    a9 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8).n128_u64[0];
    v14 = *(_DWORD *)(a1 + 200);
  }
  v15 = -1207811152;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = -1203601408;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 0, 0, a5, a6, a7, a8, (uint64_t)v69, a9);
  v16 = *(_QWORD *)(a1 + 352);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)v11, 1, v17, v18, v19, v20, v21);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v16, 0, v22, v23, v24, v25, v26);
  v34 = *(unsigned int *)(a1 + 640);
  if (v34 >= 4)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      result = 6200;
      __break(0xC471u);
      return result;
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(v34 >> 2), a1 + 264, v29, v30, v31, v32, v33);
  }
  else
  {
    v15 = -1207811137;
  }
  v35 = *(_DWORD *)(a1 + 200);
  if (v35 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v27, v28, v29, v30, v31, v32, v33);
    v35 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v35) = v15;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::JIT::appendCall(a1, (uint64_t)operationDebug, v28, v29, v30, v31, v32, v33, &v68);
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, 0, 0xFFFFFFFFLL, v36, v37, v38, v39, (uint64_t)v70, v40);
  v46 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440);
  v47 = *(_QWORD *)(v46 + 8);
  v48 = *(unsigned int **)(v46 + 16);
  if (v48)
  {
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 + 1, v48));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v70, v47, a1, v41, v42, v43, v44, v45);
    do
    {
      v57 = __ldaxr(v48);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v48));
    if (!v58)
    {
      atomic_store(1u, v48);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v48, v50, v51, v52, v53, v54, v55, v56);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v70, v47, a1, v41, v42, v43, v44, v45);
  }
  return (uint64_t)JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v69, a1, v51, v52, v53, v54, v55, v56);
}

uint64_t operationDebug(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  JSC::Interpreter::debug(a1 + 90560, vars0, a2, a4, a5, a6, a7, a8);
  return *(_QWORD *)(a1 + 16);
}

void JSC::JIT::emit_op_loop_hint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t LoopHintExecutionCounter;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  int v75;

  if (HIBYTE(qword_1ECF4C75C) && (*(_WORD *)(*(_QWORD *)(a1 + 808) + 28) & 1) == 0)
  {
    LoopHintExecutionCounter = JSC::VM::getLoopHintExecutionCounter(*(_QWORD *)(a1 + 352), a2, a3, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, LoopHintExecutionCounter, 0, v18, v19, v20, v21, v22);
    JSC::MacroAssemblerARM64::branch64(a1, 3, 0, qword_1ECF4C768, v23, v24, v25, v26, (uint64_t)&v73);
    JSC::MacroAssemblerARM64::load64(a1, 0x80000001ALL, 0, v27, v28, v29, v30, v31);
    JSC::MacroAssemblerARM64::load64(a1, 0x4000000000, 0, v32, v33, v34, v35, v36);
    JSC::JIT::emitRestoreCalleeSaves((JSC::JIT *)a1, v37, v38, v39, v40, v41, v42, v43);
    JSC::AssemblyHelpers::emitFunctionEpilogue((JSC::AssemblyHelpers *)a1, v44, v45, v46, v47, v48, v49, v50);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 3596551104, v51, v52, v53, v54, v55, v56);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v73, a1, v57, v58, v59, v60, v61, v62);
    v70 = *(_DWORD *)(a1 + 200);
    if (v70 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v63, v64, v65, v66, v67, v68, v69);
      v70 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v70) = -1862269952;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::store64(a1, 0, LoopHintExecutionCounter, v65, v66, v67, v68, v69);
  }
  if (*(_BYTE *)(a1 + 792))
  {
    v9 = *(_DWORD *)(a1 + 200);
    if (v9 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v9 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v9) = -129956960;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::branchAdd32(a1, 5u, SDWORD1(xmmword_1ECF4C4F4), 0xC800000000, a5, a6, a7, a8, (uint64_t)&v71);
    v10 = (_QWORD *)(a1 + 648);
    v11 = v72;
    v12 = *(_DWORD *)(a1 + 640);
    v73 = v71;
    v74 = v72;
    v75 = v12;
    v13 = *(unsigned int *)(a1 + 660);
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 656))
    {
      v15 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v13 + 1, (unint64_t)&v73);
      v16 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
      *(_DWORD *)v16 = *(_DWORD *)v15;
      *(_QWORD *)(v16 + 4) = *(_QWORD *)(v15 + 4);
      *(_DWORD *)(v16 + 12) = *(_DWORD *)(v15 + 12);
    }
    else
    {
      v14 = *v10 + 16 * v13;
      *(_DWORD *)v14 = v71;
      *(_QWORD *)(v14 + 4) = v11;
      *(_DWORD *)(v14 + 12) = v12;
    }
    ++*(_DWORD *)(a1 + 660);
  }
}

unsigned int *JSC::JIT::emitSlow_op_loop_hint(unsigned int *result, unsigned __int8 *a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int8x8_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int i;
  unsigned int v53;
  char v54;
  int v55;
  int v56;
  char v57;
  _BOOL4 v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62[2];
  char v63;
  __int16 v64;
  char v65;
  __int128 v66;
  unsigned int v67;

  if (*((_BYTE *)result + 792))
  {
    v9 = (uint64_t)result;
    v10 = -1207811152;
    JSC::JIT::linkAllSlowCases((uint64_t)result, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
    v11 = *(_QWORD *)(v9 + 352) + 48;
    v66 = xmmword_199156F50;
    JSC::AssemblyHelpers::copyLLIntBaselineCalleeSavesFromFrameOrRegisterToEntryFrameCalleeSavesBuffer(v9, v11, &v66);
    v12 = *(_QWORD *)(v9 + 352);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v9, (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v9 + 640), 1, v13, v14, v15, v16, v17);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v9, v12, 0, v18, v19, v20, v21, v22);
    v30 = *(unsigned int *)(v9 + 640);
    if (v30 >= 4)
    {
      if (!*(_BYTE *)(v9 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x19875B9F0);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)v9, (JSC::ARM64LogicalImmediate *)(v30 >> 2), v9 + 264, v25, v26, v27, v28, v29);
    }
    else
    {
      v10 = -1207811137;
    }
    v31 = *(_DWORD *)(v9 + 200);
    if (v31 + 4 > *(_DWORD *)(v9 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), v23, v24, v25, v26, v27, v28, v29);
      v31 = *(_DWORD *)(v9 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + v31) = v10;
    *(_DWORD *)(v9 + 200) += 4;
    JSC::JIT::appendCall(v9, (uint64_t)operationOptimize, v24, v25, v26, v27, v28, v29, (int *)&v66);
    JSC::MacroAssemblerARM64::branchTest64(v9, 0, 0, 0xFFFFFFFFLL, v32, v33, v34, v35, (uint64_t)&v66, v36);
    v44 = *(_DWORD *)(v9 + 200);
    if (v44 + 4 > *(_DWORD *)(v9 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), v37, v38, v39, v40, v41, v42, v43);
      v44 = *(_DWORD *)(v9 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + v44) = -702611456;
    *(_DWORD *)(v9 + 200) += 4;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v66, v9, v38, v39, v40, v41, v42, v43);
    for (i = *(_DWORD *)(v9 + 200); i < *(_DWORD *)(v9 + 52); *(_DWORD *)(v9 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(v9 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), v45, v46, v47, v48, v49, v50, v51);
        i = *(_DWORD *)(v9 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v9 + 56) + i) = -721215457;
      i = *(_DWORD *)(v9 + 200) + 4;
    }
    v53 = i;
    if ((i + 4) > *(_DWORD *)(v9 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), v45, v46, v47, v48, v49, v50, v51);
      v53 = *(_DWORD *)(v9 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + v53) = 335544320;
    *(_DWORD *)(v9 + 200) += 4;
    if (*(_BYTE *)(v9 + 328))
      v54 = 69;
    else
      v54 = 65;
    v62[0] = i;
    v62[1] = 0;
    v63 = v54;
    v64 = 15;
    v65 = -1;
    v55 = *a2;
    v56 = v55;
    if ((v55 | 2) == 0x82)
      v56 = a2[1];
    v57 = v55 == 128;
    v58 = v55 == 130;
    if (v55 == 130)
      v57 = 2;
    if (v55 == 128)
      v58 = 1;
    v59 = JSC::opcodeLengths[v56] << v57;
    if (v58)
      v60 = 2;
    else
      v60 = 1;
    v61 = v59 + v60 + (*(_DWORD *)(v9 + 640) >> 2);
    if (*(_DWORD *)(v9 + 396) <= v61)
    {
      __break(0xC471u);
      JUMPOUT(0x19875BA10);
    }
    v67 = *(_DWORD *)(*(_QWORD *)(v9 + 384) + 4 * v61);
    return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v62, &v67, v9, v47, v48, v49, v50, v51);
  }
  return result;
}

void JSC::JIT::emit_op_super_sampler_begin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19875BAC0);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load32(a1, (uint64_t)&g_superSamplerCount, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
  v16 = *(_DWORD *)(a1 + 200);
  if (v16 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v9, v10, v11, v12, v13, v14, v15);
    v16 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v16) = 285214224;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store32(a1, 16, (JSC::ARM64LogicalImmediate *)&g_superSamplerCount, v11, v12, v13, v14, v15);
}

void JSC::JIT::emit_op_super_sampler_end(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19875BB78);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load32(a1, (uint64_t)&g_superSamplerCount, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
  v16 = *(_DWORD *)(a1 + 200);
  if (v16 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v9, v10, v11, v12, v13, v14, v15);
    v16 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v16) = 1358956048;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store32(a1, 16, (JSC::ARM64LogicalImmediate *)&g_superSamplerCount, v11, v12, v13, v14, v15);
}

void JSC::JIT::emitSlow_op_enter(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC::ExecutableMemoryHandle *v43;
  __int128 v44;
  uint64_t v45;

  JSC::JIT::linkAllSlowCases(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  JSC::JITThunks::ctiStub(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440), *(_QWORD *)(a1 + 352), (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::op_enter_handlerGenerator, v9, v10, v11, v12, v13, &v42);
  v21 = v42;
  *(_DWORD *)(a1 + 208) = 0;
  v22 = *(_DWORD *)(a1 + 200);
  if (v22 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v14, v15, v16, v17, v18, v19, v20);
    v22 = *(_DWORD *)(a1 + 200);
  }
  v23 = (_QWORD *)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = -1811939328;
  v24 = (*(_DWORD *)(a1 + 200) + 4);
  *(_DWORD *)(a1 + 200) = v24;
  LOBYTE(v45) = -1;
  BYTE3(v45) = 15;
  *(_WORD *)((char *)&v45 + 1) = 65;
  *(_QWORD *)&v44 = v24 - 4;
  *((_QWORD *)&v44 + 1) = v21;
  WORD2(v45) = 384;
  v25 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v25 == *(_DWORD *)(a1 + 40))
  {
    v32 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, v25 + 1, (unint64_t)&v44, v16, v17, v18, v19, v20);
    v26 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
    *(_QWORD *)v26 = 0;
    *(_QWORD *)(v26 + 8) = 0;
    *(_BYTE *)(v26 + 16) = -1;
    v33 = (((*(unsigned __int8 *)(v26 + 19) >> 4) & 0xF) << 20) | 0xF0041;
    *(_WORD *)(v26 + 17) = 65;
    *(_BYTE *)(v26 + 19) = BYTE2(v33);
    *(_WORD *)(v26 + 20) &= 0xFC00u;
    v27 = *(_OWORD *)v32;
    v28 = *(_QWORD *)(v32 + 16);
  }
  else
  {
    v26 = *v23 + 24 * v25;
    v27 = v44;
    v28 = v45;
  }
  *(_QWORD *)(v26 + 16) = v28;
  *(_OWORD *)v26 = v27;
  ++*(_DWORD *)(a1 + 44);
  v29 = (unsigned int *)v43;
  v43 = 0;
  if (v29)
  {
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v29, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
  }
}

void JSC::JIT::emitSlow_op_check_traps(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  JSC::ExecutableMemoryHandle *v48;
  __int128 v49;
  uint64_t v50;

  JSC::JIT::linkAllSlowCases(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)((unint64_t)*(unsigned int *)(a1 + 640) >> 2), 8, v9, v10, v11, v12, v13);
  JSC::JITThunks::ctiStub(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440), *(_QWORD *)(a1 + 352), (void (*)(uint64_t *__return_ptr, uint64_t))JSC::JIT::op_check_traps_handlerGenerator, v14, v15, v16, v17, v18, &v47);
  v26 = v47;
  *(_DWORD *)(a1 + 208) = 0;
  v27 = *(_DWORD *)(a1 + 200);
  if (v27 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v19, v20, v21, v22, v23, v24, v25);
    v27 = *(_DWORD *)(a1 + 200);
  }
  v28 = (_QWORD *)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = -1811939328;
  v29 = (*(_DWORD *)(a1 + 200) + 4);
  *(_DWORD *)(a1 + 200) = v29;
  LOBYTE(v50) = -1;
  BYTE3(v50) = 15;
  *(_WORD *)((char *)&v50 + 1) = 65;
  *(_QWORD *)&v49 = v29 - 4;
  *((_QWORD *)&v49 + 1) = v26;
  WORD2(v50) = 384;
  v30 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v30 == *(_DWORD *)(a1 + 40))
  {
    v37 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v28, v30 + 1, (unint64_t)&v49, v21, v22, v23, v24, v25);
    v31 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
    *(_QWORD *)v31 = 0;
    *(_QWORD *)(v31 + 8) = 0;
    *(_BYTE *)(v31 + 16) = -1;
    v38 = (((*(unsigned __int8 *)(v31 + 19) >> 4) & 0xF) << 20) | 0xF0041;
    *(_WORD *)(v31 + 17) = 65;
    *(_BYTE *)(v31 + 19) = BYTE2(v38);
    *(_WORD *)(v31 + 20) &= 0xFC00u;
    v32 = *(_OWORD *)v37;
    v33 = *(_QWORD *)(v37 + 16);
  }
  else
  {
    v31 = *v28 + 24 * v30;
    v32 = v49;
    v33 = v50;
  }
  *(_QWORD *)(v31 + 16) = v33;
  *(_OWORD *)v31 = v32;
  ++*(_DWORD *)(a1 + 44);
  v34 = (unsigned int *)v48;
  v48 = 0;
  if (v34)
  {
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v34, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
  }
}

uint64_t JSC::JIT::op_check_traps_handlerGenerator@<X0>(JSC::JIT *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  pthread_key_t *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  unsigned int v58;
  char v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char **v84;
  char *v85;
  _QWORD v86[3];
  WTF *v87;
  _BYTE v88[128];
  unsigned int v89;
  char v90;
  int v91;
  int v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  _DWORD v96[6];
  char v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _BYTE *v101;
  _BYTE v102[128];
  unsigned int v103;
  unsigned int v104;
  int v105;
  char v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _DWORD *v110;
  char v111;
  uint64_t v112;
  int v113;
  _DWORD *v114;
  char v115;
  uint64_t v116;
  int v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  LOBYTE(v96[0]) = 0;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v100 = 0x8000000080000000;
  v101 = v102;
  v103 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v85 = (char *)v86;
    v86[0] = &v84;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v85, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v103;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v103 < v17)
    {
      if (v101 && v101 != v102)
      {
        WTF::fastFree((unint64_t)v101, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v101 = (_BYTE *)v15;
      v103 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v103;
    }
  }
  v18 = 0;
  v106 = 1;
  v111 = 16;
  v113 = 0x10000;
  v115 = 17;
  v117 = 0x20000;
  v104 = 0;
  v105 = 0;
  v107 = 0u;
  v108 = 0u;
  v109 = 0u;
  v110 = v96;
  v112 = 0;
  v114 = v96;
  v116 = 0;
  v118 = 0;
  v119 = 0;
  v120 = 0;
  if (v16 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v101, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v18 = v104;
  }
  *(_DWORD *)&v101[v18] = -1447068675;
  v19 = v104;
  v20 = v104 + 4;
  v104 += 4;
  if (v19 + 8 > v103)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v101, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v20 = v104;
  }
  *(_DWORD *)&v101[v20] = -1207811160;
  v21 = v104;
  v22 = v104 + 4;
  v104 += 4;
  if (v21 + 8 > v103)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v101, (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v22 = v104;
  }
  *(_DWORD *)&v101[v22] = -129989824;
  v104 += 4;
  if (!v106)
  {
    __break(0xC471u);
    JUMPOUT(0x19875C380);
  }
  v110[52] &= ~v113;
  v23 = v111;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v96, (uint64_t)operationHandleTraps, v111, v9, v10, v11, v12, v13);
  v105 = 0;
  v31 = v104;
  if (v104 + 4 > v103)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v101, v24, v25, v26, v27, v28, v29, v30);
    v31 = v104;
  }
  *(_DWORD *)&v101[v31] = (32 * (v23 & 0x1F)) | 0xD63F0000;
  v32 = v104;
  v33 = v104 + 4;
  v104 += 4;
  if (v32 + 8 > v103)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v101, v24, v25, v26, v27, v28, v29, v30);
    v33 = v104;
  }
  *(_DWORD *)&v101[v33] = -1463714819;
  v104 += 4;
  v34 = *((_QWORD *)this + 11305);
  v35 = *(_QWORD *)(v34 + 40);
  v36 = *(unsigned int **)(v34 + 48);
  if (v36)
  {
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
    JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>((uint64_t)v96, v35, v25, v26, v27, v28, v29, v30);
    do
    {
      v45 = __ldaxr(v36);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v36));
    if (!v46)
    {
      atomic_store(1u, v36);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v36, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
  }
  else
  {
    JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>((uint64_t)v96, v35, v25, v26, v27, v28, v29, v30);
  }
  v86[0] = 0;
  v86[1] = 0;
  v86[2] = -1;
  v87 = (WTF *)v88;
  v89 = 128;
  v47 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v47 != -1)
  {
    v85 = &v83;
    v84 = &v85;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v84, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v48 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v56 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v56)
  {
    v56 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v56, v48);
  }
  v57 = *(WTF **)v56;
  if (*(_QWORD *)v56 != v56 + 8)
  {
    v58 = *(_DWORD *)(v56 + 136);
    if (v89 < v58)
    {
      if (v87 && v87 != (WTF *)v88)
      {
        WTF::fastFree((unint64_t)v87, v49, v50, v51, v52, v53, v54, v55);
        v57 = *(WTF **)v56;
        v58 = *(_DWORD *)(v56 + 136);
      }
      v87 = v57;
      v89 = v58;
      *(_QWORD *)v56 = v56 + 8;
      *(_DWORD *)(v56 + 136) = 128;
    }
  }
  v59 = 1;
  v90 = 1;
  v91 = 0;
  v92 = 13;
  v93 = 0u;
  v94 = 0u;
  v95 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v86, (uint64_t)v96, 1, v51, v52, v53, v54, v55);
  BYTE2(v91) = 1;
  if (byte_1ECF4C288)
    goto LABEL_43;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v59 = HIBYTE(word_1ECF4C286) != 0;
LABEL_43:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v86, v59, "op_check_traps_handler", 23, "Baseline: op_check_traps_handler", a2);
    goto LABEL_41;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v86, "op_check_traps_handler", 23, a2);
LABEL_41:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v86, v60, v61, v62, v63, v64, v65, v66);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v96, v67, v68, v69, v70, v71, v72, v73);
}

void JSC::JIT::emit_op_new_regexp(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  unsigned int v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;

  v9 = *a2;
  if (v9 == 128)
  {
    v23 = *((__int16 *)a2 + 1);
    if (v23 <= 63)
      v11 = v23;
    else
      v11 = (v23 + 1073741760);
    v12 = *((__int16 *)a2 + 2);
    v13 = v12 + 1073741760;
    v14 = v12 <= 63;
  }
  else
  {
    if (v9 == 130)
    {
      v11 = *(unsigned int *)(a2 + 2);
      v15 = *(_DWORD *)(a2 + 6);
      goto LABEL_10;
    }
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
    v13 = v12 + 1073741808;
    v14 = v12 <= 15;
  }
  if (v14)
    v15 = v12;
  else
    v15 = v13;
LABEL_10:
  v16 = *(_DWORD *)(a1 + 200);
  if (v16 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v16 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v16) = -129989824;
  *(_DWORD *)(a1 + 200) += 4;
  v17 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v17 <= (v15 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x19875C500);
  }
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>(*(JSC::ARM64LogicalImmediate **)&v17[2 * (v15 - 0x40000000) + 2], a1, (char *)operationNewRegexp, 0, a5, a6, a7, a8, &v24);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v11 << 35) | 0x1D, v18, v19, v20, v21, v22);
}

void JSC::JIT::callOperation<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>(JSC::ARM64LogicalImmediate *this@<X3>, uint64_t a2@<X0>, char *a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int *a9@<X8>)
{
  unsigned int v9;
  uint64_t v11;
  __int16 *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint8x8_t v22;
  __int32 v23;
  uint8x8_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  char v32;
  char v33;
  uint64_t v34;
  unsigned __int8 *v35;
  char *v36;
  uint64_t v37;
  unsigned int v38;
  char *v39;
  uint64_t v40;
  _BYTE *v41;
  unsigned __int8 *v42;
  char *v43;
  unsigned __int8 *v44;
  int64_t v45;
  void *v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int8x8_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int16 *v80;
  JSC::AssemblerBuffer *v81;
  void *__dst;
  int v83;
  unsigned int v84;
  __int16 v85;

  v11 = (uint64_t)a3;
  v14 = &v85;
  __dst = &v85;
  v83 = 1;
  if ((_DWORD)a4)
  {
    v85 = a4;
    v84 = 1;
    v81 = (JSC::AssemblerBuffer *)(a2 + 56);
    v15 = 1;
    do
    {
      v16 = 0;
      v17 = 0;
      v18 = (char *)__dst;
      v19 = v15;
      do
      {
        if ((*((_BYTE *)__dst + v16 + 1) & 0x40) != 0)
        {
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
        v17 |= 1 << *((_BYTE *)__dst + v16 + 1);
        v16 += 2;
      }
      while (2 * v15 != v16);
      v20 = 0;
      do
      {
        v21 = *((_BYTE *)__dst + v20) & 0x7F;
        if (v21 >= 0x40)
          goto LABEL_66;
        v17 &= ~(1 << v21);
        v20 += 2;
      }
      while (2 * v15 != v20);
      v22 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
      v22.i16[0] = vaddlv_u8(v22);
      v23 = v22.i32[0];
      v24 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v17));
      v24.i16[0] = vaddlv_u8(v24);
      if (v24.i32[0] + v23)
      {
        v25 = 0;
        if (v15 <= 1)
          v26 = 1;
        else
          v26 = v15;
        v27 = 2 * v26;
        while (1)
        {
          v28 = *((unsigned __int8 *)__dst + v25 + 1);
          if ((v28 & 0x7Fu) >= 0x40)
            goto LABEL_66;
          if (((v17 >> (v28 & 0x7F)) & 1) != 0)
            break;
          v25 += 2;
          if (v27 == v25)
            goto LABEL_33;
        }
        v29 = *((unsigned __int8 *)__dst + v25);
        if (v29 != v28)
        {
          if ((char)v29 == 63)
          {
            if (v28 == 31)
              goto LABEL_27;
            v9 = v28 & 0x1F | 0xD2800000;
          }
          else
          {
            v30 = (char)v28 == 31 || (char)v29 == 31;
            if (!v30)
            {
              v9 = v28 & 0xFFE0FFFF | ((v29 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v9 = (char)v28 | (32 * (char)v29) | 0x91000000;
          }
LABEL_28:
          v31 = *(_DWORD *)(a2 + 200);
          if (v31 + 4 > *(_DWORD *)(a2 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v81, (uint64_t)a3, a4, (uint64_t)this, a5, a6, a7, a8);
            v31 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = v9;
          *(_DWORD *)(a2 + 200) += 4;
          v18 = (char *)__dst;
          v19 = v84;
        }
        memmove(&v18[v25], &v18[v25 + 2], 2 * v19 - v25 - 2);
        v15 = v84 - 1;
        goto LABEL_32;
      }
      v80 = v14;
      v32 = *(_BYTE *)__dst;
      v33 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v33, (uint64_t)this, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v84 - 2);
      v34 = v84 - 1;
      v30 = v84 == 1;
      v84 = v34;
      v35 = (unsigned __int8 *)__dst;
      v36 = (char *)__dst + 2 * v34;
      if (v30)
      {
        v37 = 0;
        v38 = 0;
        v9 = 0;
        a3 = (char *)__dst + 2 * v34;
      }
      else
      {
        v40 = 2 * v34;
        v41 = __dst;
        while (*v41 != v33)
        {
          v41 += 2;
          v40 -= 2;
          if (!v40)
            goto LABEL_43;
        }
        *v41 = v32;
LABEL_43:
        v9 = 0;
        v42 = v35;
        a3 = v36;
        v43 = v36;
        do
        {
          if (*v35 == v35[1])
          {
            v44 = v35;
            if (v43 != (char *)__dst + 2 * v84)
            {
              if (v35 == (unsigned __int8 *)a3)
              {
                v44 = (unsigned __int8 *)v43;
              }
              else
              {
                v45 = v42 - (unsigned __int8 *)a3;
                memmove(v43, a3, v42 - (unsigned __int8 *)a3);
                v44 = (unsigned __int8 *)&v43[v45];
              }
            }
            a3 = (char *)(v35 + 2);
            ++v9;
            v43 = (char *)v44;
          }
          v35 += 2;
          v42 += 2;
        }
        while (v35 < (unsigned __int8 *)v36);
        v35 = (unsigned __int8 *)__dst;
        v37 = v84;
        v38 = v84;
        v36 = v43;
      }
      v39 = (char *)&v35[2 * v37];
      if (a3 != v39)
      {
        memmove(v36, a3, v39 - a3);
        v38 = v84;
      }
      v15 = v38 - v9;
      v14 = v80;
LABEL_32:
      v84 = v15;
LABEL_33:
      ;
    }
    while (v15);
    v46 = __dst;
    if (v14 != __dst && __dst)
    {
      __dst = 0;
      v83 = 0;
      WTF::fastFree((unint64_t)v46, a3, a4, (uint64_t)this, a5, a6, a7, a8);
    }
  }
  v9 = -1207811152;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)this, 1, (uint64_t)this, a5, a6, a7, a8);
  v47 = *(unsigned int *)(a2 + 640);
  if (v47 >= 4)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19875C9B4);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)(v47 >> 2), a2 + 264, (uint64_t)this, a5, a6, a7, a8);
  }
  else
  {
    v9 = -1207811137;
  }
  v48 = *(_DWORD *)(a2 + 200);
  if (v48 + 4 > *(_DWORD *)(a2 + 192))
  {
LABEL_67:
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)a3, a4, (uint64_t)this, a5, a6, a7, a8);
    v48 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v48) = v9;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::JIT::appendCall(a2, v11, a4, (uint64_t)this, a5, a6, a7, a8, a9);
  JSC::MacroAssemblerARM64::branchTest64(a2, 1, 1, 0xFFFFFFFFLL, v49, v50, v51, v52, (uint64_t)&__dst, v53);
  v59 = *(_QWORD *)(*(_QWORD *)(a2 + 352) + 90440);
  v60 = *(_QWORD *)(v59 + 8);
  v61 = *(unsigned int **)(v59 + 16);
  if (v61)
  {
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 + 1, v61));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v60, a2, v54, v55, v56, v57, v58);
    do
    {
      v70 = __ldaxr(v61);
      v71 = v70 - 1;
    }
    while (__stlxr(v71, v61));
    if (!v71)
    {
      atomic_store(1u, v61);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v61, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v60, a2, v54, v55, v56, v57, v58);
  }
}

void JSC::JIT::emitNewFuncCommon<JSC::OpNewFunc>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  _DWORD *v33;
  _DWORD *v34;
  unint64_t v35;
  BOOL v36;
  char **v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v10 > 63)
      v10 += 1073741760;
    v12 = *((__int16 *)a2 + 2);
    v13 = *((unsigned __int16 *)a2 + 3);
    if ((int)v12 <= 63)
      goto LABEL_6;
LABEL_16:
    v12 = (v12 + v11);
    goto LABEL_17;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    if (v10 > 15)
      v10 += 1073741808;
    v12 = (char)a2[2];
    v13 = a2[3];
    if ((int)v12 <= 15)
    {
LABEL_6:
      v14 = v10;
      v15 = v13;
LABEL_7:
      v16 = (v12 << 35) | 0x1D;
LABEL_8:
      JSC::MacroAssemblerARM64::load64(a1, v16, 1, a4, a5, a6, a7, a8);
      goto LABEL_9;
    }
    goto LABEL_16;
  }
  v10 = *(_DWORD *)(a2 + 2);
  v12 = *(unsigned int *)(a2 + 6);
  v13 = *(_DWORD *)(a2 + 10);
LABEL_17:
  v14 = v10;
  v15 = v13;
  if ((int)v12 < 0x40000000)
    goto LABEL_7;
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v30 = (v12 - 0x40000000);
  v31 = *(_DWORD **)(v29 + 120);
  if (!v31 || *v31 <= v30)
    goto LABEL_24;
  v32 = *((unsigned __int8 *)v31 + v30 + 4);
  if ((v32 - 1) >= 2)
  {
    if (v32)
    {
      if (v32 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19875CC38);
      }
      goto LABEL_35;
    }
LABEL_24:
    v34 = *(_DWORD **)(v29 + 112);
    if (*v34 <= v30)
    {
      __break(0xC471u);
      JUMPOUT(0x19875CC78);
    }
    v35 = *(_QWORD *)&v34[2 * v30 + 2];
    if (v35)
      v36 = (v35 & 0xFFFE000000000002) == 0;
    else
      v36 = 0;
    if (!v36)
      goto LABEL_21;
    v37 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x4C));
    if (v37 != &JSC::SymbolTable::s_info && v37 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_21;
LABEL_35:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v39, v40, v41, v42, v43);
    v16 = (v12 << 35) | 1;
    goto LABEL_8;
  }
LABEL_21:
  v33 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v33 <= v30)
  {
    __break(0xC471u);
    JUMPOUT(0x19875CC58);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v33[2 * v30 + 2], 1, a4, a5, a6, a7, a8);
LABEL_9:
  v22 = (_QWORD *)(a1 + 848);
  v23 = *(unsigned int *)(a1 + 860);
  v44 = v15;
  if ((_DWORD)v23 == *(_DWORD *)(a1 + 856))
  {
    v28 = (_QWORD *)WTF::Vector<JSC::JITConstant<JSC::JITConstantPool::Type>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v44);
    v24 = *(unsigned int *)(a1 + 860);
    *(_QWORD *)(*(_QWORD *)(a1 + 848) + 8 * v24) = *v28;
  }
  else
  {
    *(_QWORD *)(*v22 + 8 * v23) = v15;
    LODWORD(v24) = v23;
  }
  *(_DWORD *)(a1 + 860) = v24 + 1;
  JSC::MacroAssemblerARM64::load64(a1, ((unint64_t)((8 * v23 + 24) >> 3) << 35) | 0x1A, 2, v17, v18, v19, v20, v21);
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&v44, a1, (uint64_t)operationNewFunction, v14, *(JSC::ARM64LogicalImmediate **)(a1 + 352), v25, v26, v27);
}

void JSC::JIT::emit_op_new_generator_func(uint64_t a1, JSC::OpNewGeneratorFunc *this)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  _DWORD *v31;
  unint64_t v32;
  BOOL v33;
  char **v34;
  JSC::AssemblerBuffer *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  _DWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v3 = JSC::OpNewGeneratorFunc::decode(this, (const unsigned __int8 *)this);
  v11 = v3;
  v12 = v4;
  v13 = HIDWORD(v3);
  if (SHIDWORD(v3) < 0x40000000)
  {
    v14 = 29;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v14 | (v13 << 35), 1, v6, v7, v8, v9, v10);
    goto LABEL_4;
  }
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v28 = (HIDWORD(v3) - 0x40000000);
  v29 = *(_DWORD **)(v27 + 120);
  if (!v29 || *v29 <= v28)
    goto LABEL_12;
  v30 = *((unsigned __int8 *)v29 + v28 + 4);
  if ((v30 - 1) >= 2)
  {
    if (v30)
    {
      if (v30 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19875CEC8);
      }
      goto LABEL_23;
    }
LABEL_12:
    v31 = *(_DWORD **)(v27 + 112);
    if (*v31 <= v28)
    {
      __break(0xC471u);
      JUMPOUT(0x19875CF08);
    }
    v32 = *(_QWORD *)&v31[2 * v28 + 2];
    if (v32)
      v33 = (v32 & 0xFFFE000000000002) == 0;
    else
      v33 = 0;
    if (!v33)
      goto LABEL_28;
    v34 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x4C));
    if (v34 != &JSC::SymbolTable::s_info && v34 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_28;
LABEL_23:
    v36 = (JSC::AssemblerBuffer *)(a1 + 56);
    v37 = *(_DWORD *)(a1 + 200);
    if (v37 + 4 > *(_DWORD *)(a1 + 192))
    {
      v41 = v13;
      JSC::AssemblerBuffer::outOfLineGrow(v36, v4, v5, v6, v7, v8, v9, v10);
      v36 = (JSC::AssemblerBuffer *)(a1 + 56);
      v13 = v41;
      v37 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v37) = -129956959;
    v38 = *(_DWORD *)(a1 + 200);
    v39 = v38 + 4;
    *(_DWORD *)(a1 + 200) = v38 + 4;
    if ((v38 + 8) > *(_DWORD *)(a1 + 192))
    {
      v42 = v13;
      JSC::AssemblerBuffer::outOfLineGrow(v36, v4, v5, v6, v7, v8, v9, v10);
      v13 = v42;
      v39 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v39) = -129368031;
    *(_DWORD *)(a1 + 200) += 4;
    v14 = 1;
    goto LABEL_3;
  }
LABEL_28:
  v40 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v40 <= v28)
  {
    __break(0xC471u);
    JUMPOUT(0x19875CEE8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v40[2 * v28 + 2], 1, v6, v7, v8, v9, v10);
LABEL_4:
  v20 = v12;
  v21 = (_QWORD *)(a1 + 848);
  v22 = *(unsigned int *)(a1 + 860);
  v43 = v20;
  if ((_DWORD)v22 == *(_DWORD *)(a1 + 856))
  {
    v23 = (_QWORD *)WTF::Vector<JSC::JITConstant<JSC::JITConstantPool::Type>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v22 + 1, (unint64_t)&v43);
    v20 = *(unsigned int *)(a1 + 860);
    *(_QWORD *)(*(_QWORD *)(a1 + 848) + 8 * v20) = *v23;
  }
  else
  {
    *(_QWORD *)(*v21 + 8 * v22) = v20;
    LODWORD(v20) = v22;
  }
  *(_DWORD *)(a1 + 860) = v20 + 1;
  JSC::MacroAssemblerARM64::load64(a1, ((unint64_t)((8 * v22 + 24) >> 3) << 35) | 0x1A, 2, v15, v16, v17, v18, v19);
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&v43, a1, (uint64_t)operationNewGeneratorFunction, v11, *(JSC::ARM64LogicalImmediate **)(a1 + 352), v24, v25, v26);
}

void JSC::JIT::emit_op_new_async_generator_func(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  _DWORD *v21;
  unint64_t v22;
  BOOL v23;
  char **v24;
  JSC::AssemblerBuffer *v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v9 = *a2;
  if (v9 == 128)
  {
    v13 = *((__int16 *)a2 + 1);
    v14 = 1073741760;
    v10 = v13 + 1073741760;
    if (v13 <= 63)
      v10 = *((__int16 *)a2 + 1);
    v11 = *((__int16 *)a2 + 2);
    v12 = *((unsigned __int16 *)a2 + 3);
    if ((int)v11 <= 63)
      goto LABEL_32;
  }
  else
  {
    if (v9 == 130)
    {
      v10 = *(_DWORD *)(a2 + 2);
      v11 = *(unsigned int *)(a2 + 6);
      v12 = *(_DWORD *)(a2 + 10);
      goto LABEL_8;
    }
    v31 = (char)a2[1];
    v14 = 1073741808;
    v10 = v31 + 1073741808;
    if (v31 <= 15)
      v10 = (char)a2[1];
    v11 = (char)a2[2];
    v12 = a2[3];
    if ((int)v11 <= 15)
    {
LABEL_32:
      v15 = v10;
      v16 = v12;
      goto LABEL_33;
    }
  }
  v11 = (v11 + v14);
LABEL_8:
  v15 = v10;
  v16 = v12;
  if ((int)v11 < 0x40000000)
  {
LABEL_33:
    v30 = 29;
LABEL_34:
    JSC::MacroAssemblerARM64::load64(a1, v30 | (v11 << 35), 1, a4, a5, a6, a7, a8);
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v18 = (v11 - 0x40000000);
  v19 = *(_DWORD **)(v17 + 120);
  if (!v19 || *v19 <= v18)
    goto LABEL_13;
  v20 = *((unsigned __int8 *)v19 + v18 + 4);
  if ((v20 - 1) >= 2)
  {
    if (v20)
    {
      if (v20 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19875D1D8);
      }
LABEL_24:
      v26 = (JSC::AssemblerBuffer *)(a1 + 56);
      v27 = *(_DWORD *)(a1 + 200);
      if (v27 + 4 > *(_DWORD *)(a1 + 192))
      {
        v45 = v11;
        JSC::AssemblerBuffer::outOfLineGrow(v26, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v11 = v45;
        v26 = (JSC::AssemblerBuffer *)(a1 + 56);
        v27 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = -129956959;
      v28 = *(_DWORD *)(a1 + 200);
      v29 = v28 + 4;
      *(_DWORD *)(a1 + 200) = v28 + 4;
      if ((v28 + 8) > *(_DWORD *)(a1 + 192))
      {
        v46 = v11;
        JSC::AssemblerBuffer::outOfLineGrow(v26, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v11 = v46;
        v29 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = -129368031;
      *(_DWORD *)(a1 + 200) += 4;
      v30 = 1;
      goto LABEL_34;
    }
LABEL_13:
    v21 = *(_DWORD **)(v17 + 112);
    if (*v21 <= v18)
    {
      __break(0xC471u);
      JUMPOUT(0x19875D218);
    }
    v22 = *(_QWORD *)&v21[2 * v18 + 2];
    if (v22)
      v23 = (v22 & 0xFFFE000000000002) == 0;
    else
      v23 = 0;
    if (!v23)
      goto LABEL_39;
    v24 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C));
    if (v24 != &JSC::SymbolTable::s_info && v24 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_39;
    goto LABEL_24;
  }
LABEL_39:
  v44 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v44 <= v18)
  {
    __break(0xC471u);
    JUMPOUT(0x19875D1F8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v44[2 * v18 + 2], 1, a4, a5, a6, a7, a8);
LABEL_35:
  v37 = (_QWORD *)(a1 + 848);
  v38 = *(unsigned int *)(a1 + 860);
  v47 = v16;
  if ((_DWORD)v38 == *(_DWORD *)(a1 + 856))
  {
    v40 = (_QWORD *)WTF::Vector<JSC::JITConstant<JSC::JITConstantPool::Type>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, v38 + 1, (unint64_t)&v47);
    v39 = *(unsigned int *)(a1 + 860);
    *(_QWORD *)(*(_QWORD *)(a1 + 848) + 8 * v39) = *v40;
  }
  else
  {
    *(_QWORD *)(*v37 + 8 * v38) = v16;
    LODWORD(v39) = v38;
  }
  *(_DWORD *)(a1 + 860) = v39 + 1;
  JSC::MacroAssemblerARM64::load64(a1, ((unint64_t)((8 * v38 + 24) >> 3) << 35) | 0x1A, 2, v32, v33, v34, v35, v36);
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&v47, a1, (uint64_t)operationNewAsyncGeneratorFunction, v15, *(JSC::ARM64LogicalImmediate **)(a1 + 352), v41, v42, v43);
}

void JSC::JIT::emit_op_new_async_func(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  _DWORD *v35;
  unint64_t v36;
  BOOL v37;
  char **v38;
  JSC::AssemblerBuffer *v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v9 = *a2;
  if (v9 == 128)
  {
    v30 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    v12 = v30 + 1073741760;
    if (v30 <= 63)
      v12 = *((__int16 *)a2 + 1);
    v13 = *((__int16 *)a2 + 2);
    v14 = *((unsigned __int16 *)a2 + 3);
    if ((int)v13 <= 63)
      goto LABEL_6;
LABEL_16:
    v13 = (v13 + v11);
    goto LABEL_17;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    v12 = v10 + 1073741808;
    if (v10 <= 15)
      v12 = (char)a2[1];
    v13 = (char)a2[2];
    v14 = a2[3];
    if ((int)v13 <= 15)
    {
LABEL_6:
      v15 = v12;
      v16 = v14;
LABEL_7:
      v17 = 29;
LABEL_8:
      JSC::MacroAssemblerARM64::load64(a1, v17 | (v13 << 35), 1, a4, a5, a6, a7, a8);
      goto LABEL_9;
    }
    goto LABEL_16;
  }
  v12 = *(_DWORD *)(a2 + 2);
  v13 = *(unsigned int *)(a2 + 6);
  v14 = *(_DWORD *)(a2 + 10);
LABEL_17:
  v15 = v12;
  v16 = v14;
  if ((int)v13 < 0x40000000)
    goto LABEL_7;
  v31 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v32 = (v13 - 0x40000000);
  v33 = *(_DWORD **)(v31 + 120);
  if (!v33 || *v33 <= v32)
    goto LABEL_22;
  v34 = *((unsigned __int8 *)v33 + v32 + 4);
  if ((v34 - 1) >= 2)
  {
    if (v34)
    {
      if (v34 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19875D4F0);
      }
      goto LABEL_33;
    }
LABEL_22:
    v35 = *(_DWORD **)(v31 + 112);
    if (*v35 <= v32)
    {
      __break(0xC471u);
      JUMPOUT(0x19875D530);
    }
    v36 = *(_QWORD *)&v35[2 * v32 + 2];
    if (v36)
      v37 = (v36 & 0xFFFE000000000002) == 0;
    else
      v37 = 0;
    if (!v37)
      goto LABEL_38;
    v38 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 0x4C));
    if (v38 != &JSC::SymbolTable::s_info && v38 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_38;
LABEL_33:
    v40 = (JSC::AssemblerBuffer *)(a1 + 56);
    v41 = *(_DWORD *)(a1 + 200);
    if (v41 + 4 > *(_DWORD *)(a1 + 192))
    {
      v45 = v13;
      JSC::AssemblerBuffer::outOfLineGrow(v40, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v13 = v45;
      v40 = (JSC::AssemblerBuffer *)(a1 + 56);
      v41 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v41) = -129956959;
    v42 = *(_DWORD *)(a1 + 200);
    v43 = v42 + 4;
    *(_DWORD *)(a1 + 200) = v42 + 4;
    if ((v42 + 8) > *(_DWORD *)(a1 + 192))
    {
      v46 = v13;
      JSC::AssemblerBuffer::outOfLineGrow(v40, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v13 = v46;
      v43 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v43) = -129368031;
    *(_DWORD *)(a1 + 200) += 4;
    v17 = 1;
    goto LABEL_8;
  }
LABEL_38:
  v44 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v44 <= v32)
  {
    __break(0xC471u);
    JUMPOUT(0x19875D510);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v44[2 * v32 + 2], 1, a4, a5, a6, a7, a8);
LABEL_9:
  v23 = (_QWORD *)(a1 + 848);
  v24 = *(unsigned int *)(a1 + 860);
  v47 = v16;
  if ((_DWORD)v24 == *(_DWORD *)(a1 + 856))
  {
    v26 = (_QWORD *)WTF::Vector<JSC::JITConstant<JSC::JITConstantPool::Type>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, v24 + 1, (unint64_t)&v47);
    v25 = *(unsigned int *)(a1 + 860);
    *(_QWORD *)(*(_QWORD *)(a1 + 848) + 8 * v25) = *v26;
  }
  else
  {
    *(_QWORD *)(*v23 + 8 * v24) = v16;
    LODWORD(v25) = v24;
  }
  *(_DWORD *)(a1 + 860) = v25 + 1;
  JSC::MacroAssemblerARM64::load64(a1, ((unint64_t)((8 * v24 + 24) >> 3) << 35) | 0x1A, 2, v18, v19, v20, v21, v22);
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&v47, a1, (uint64_t)operationNewAsyncFunction, v15, *(JSC::ARM64LogicalImmediate **)(a1 + 352), v27, v28, v29);
}

void JSC::JIT::emitNewFuncExprCommon<JSC::OpNewFuncExp>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  _DWORD *v33;
  _DWORD *v34;
  unint64_t v35;
  BOOL v36;
  char **v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v10 > 63)
      v10 += 1073741760;
    v12 = *((__int16 *)a2 + 2);
    v13 = *((unsigned __int16 *)a2 + 3);
    if ((int)v12 <= 63)
      goto LABEL_6;
LABEL_16:
    v12 = (v12 + v11);
    goto LABEL_17;
  }
  if (v9 != 130)
  {
    v10 = (char)a2[1];
    v11 = 1073741808;
    if (v10 > 15)
      v10 += 1073741808;
    v12 = (char)a2[2];
    v13 = a2[3];
    if ((int)v12 <= 15)
    {
LABEL_6:
      v14 = v10;
      v15 = v13;
LABEL_7:
      v16 = (v12 << 35) | 0x1D;
LABEL_8:
      JSC::MacroAssemblerARM64::load64(a1, v16, 1, a4, a5, a6, a7, a8);
      goto LABEL_9;
    }
    goto LABEL_16;
  }
  v10 = *(_DWORD *)(a2 + 2);
  v12 = *(unsigned int *)(a2 + 6);
  v13 = *(_DWORD *)(a2 + 10);
LABEL_17:
  v14 = v10;
  v15 = v13;
  if ((int)v12 < 0x40000000)
    goto LABEL_7;
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v30 = (v12 - 0x40000000);
  v31 = *(_DWORD **)(v29 + 120);
  if (!v31 || *v31 <= v30)
    goto LABEL_24;
  v32 = *((unsigned __int8 *)v31 + v30 + 4);
  if ((v32 - 1) >= 2)
  {
    if (v32)
    {
      if (v32 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19875D7D4);
      }
      goto LABEL_35;
    }
LABEL_24:
    v34 = *(_DWORD **)(v29 + 112);
    if (*v34 <= v30)
    {
      __break(0xC471u);
      JUMPOUT(0x19875D814);
    }
    v35 = *(_QWORD *)&v34[2 * v30 + 2];
    if (v35)
      v36 = (v35 & 0xFFFE000000000002) == 0;
    else
      v36 = 0;
    if (!v36)
      goto LABEL_21;
    v37 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x4C));
    if (v37 != &JSC::SymbolTable::s_info && v37 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_21;
LABEL_35:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v39, v40, v41, v42, v43);
    v16 = (v12 << 35) | 1;
    goto LABEL_8;
  }
LABEL_21:
  v33 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v33 <= v30)
  {
    __break(0xC471u);
    JUMPOUT(0x19875D7F4);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v33[2 * v30 + 2], 1, a4, a5, a6, a7, a8);
LABEL_9:
  v22 = (_QWORD *)(a1 + 848);
  v23 = *(unsigned int *)(a1 + 860);
  v44 = v15 | 0x1000000000000;
  if ((_DWORD)v23 == *(_DWORD *)(a1 + 856))
  {
    v28 = (_QWORD *)WTF::Vector<JSC::JITConstant<JSC::JITConstantPool::Type>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v44);
    v24 = *(unsigned int *)(a1 + 860);
    *(_QWORD *)(*(_QWORD *)(a1 + 848) + 8 * v24) = *v28;
  }
  else
  {
    *(_QWORD *)(*v22 + 8 * v23) = v15 | 0x1000000000000;
    LODWORD(v24) = v23;
  }
  *(_DWORD *)(a1 + 860) = v24 + 1;
  JSC::MacroAssemblerARM64::load64(a1, ((unint64_t)((8 * v23 + 24) >> 3) << 35) | 0x1A, 2, v17, v18, v19, v20, v21);
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&v44, a1, (uint64_t)operationNewFunction, v14, *(JSC::ARM64LogicalImmediate **)(a1 + 352), v25, v26, v27);
}

void JSC::JIT::emitNewFuncExprCommon<JSC::OpNewGeneratorFuncExp>(uint64_t a1, JSC::OpNewAsyncGeneratorFuncExp *this)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  v3 = JSC::OpNewAsyncGeneratorFuncExp::decode(this, (const unsigned __int8 *)this);
  v9 = v3;
  v11 = v10;
  v12 = HIDWORD(v3);
  if (SHIDWORD(v3) < 0x40000000)
  {
    v13 = (v12 << 35) | 0x1D;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v13, 1, v4, v5, v6, v7, v8);
LABEL_4:
    v14 = JSC::JIT::addToConstantPool(a1, 1, v11);
    JSC::MacroAssemblerARM64::load64(a1, ((unint64_t)((8 * v14 + 24) >> 3) << 35) | 0x1A, 2, v15, v16, v17, v18, v19);
    JSC::JIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v34, a1, (uint64_t)operationNewGeneratorFunction, v9, *(JSC::ARM64LogicalImmediate **)(a1 + 352), v20, v21, v22);
    return;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), SHIDWORD(v3)))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v23, v24, v25, v26, v27);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v29, v30, v31, v32, v33);
    v13 = (v12 << 35) | 1;
    goto LABEL_3;
  }
  v28 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v28 > (v12 - 0x40000000))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v28[2 * (v12 - 0x40000000) + 2], 1, v23, v24, v25, v26, v27);
    goto LABEL_4;
  }
  __break(0xC471u);
}

void JSC::JIT::emitNewFuncExprCommon<JSC::OpNewAsyncFuncExp>(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  v3 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpNewAsyncFuncExp>(a2);
  v9 = v3;
  v11 = v10;
  v12 = HIDWORD(v3);
  if (SHIDWORD(v3) < 0x40000000)
  {
    v13 = (v12 << 35) | 0x1D;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v13, 1, v4, v5, v6, v7, v8);
LABEL_4:
    v14 = JSC::JIT::addToConstantPool(a1, 1, v11);
    JSC::MacroAssemblerARM64::load64(a1, ((unint64_t)((8 * v14 + 24) >> 3) << 35) | 0x1A, 2, v15, v16, v17, v18, v19);
    JSC::JIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v34, a1, (uint64_t)operationNewAsyncFunction, v9, *(JSC::ARM64LogicalImmediate **)(a1 + 352), v20, v21, v22);
    return;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), SHIDWORD(v3)))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v23, v24, v25, v26, v27);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v29, v30, v31, v32, v33);
    v13 = (v12 << 35) | 1;
    goto LABEL_3;
  }
  v28 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v28 > (v12 - 0x40000000))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v28[2 * (v12 - 0x40000000) + 2], 1, v23, v24, v25, v26, v27);
    goto LABEL_4;
  }
  __break(0xC471u);
}

void JSC::JIT::emit_op_new_async_generator_func_exp(uint64_t a1, JSC::OpNewAsyncGeneratorFuncExp *this)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  _DWORD *v28;
  unint64_t v29;
  BOOL v30;
  char **v31;
  JSC::AssemblerBuffer *v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  _DWORD *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;

  v3 = JSC::OpNewAsyncGeneratorFuncExp::decode(this, (const unsigned __int8 *)this);
  v11 = v3;
  v12 = v4;
  v13 = HIDWORD(v3);
  if (SHIDWORD(v3) < 0x40000000)
  {
    v14 = 29;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v14 | (v13 << 35), 1, v6, v7, v8, v9, v10);
    goto LABEL_4;
  }
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v25 = (HIDWORD(v3) - 0x40000000);
  v26 = *(_DWORD **)(v24 + 120);
  if (!v26 || *v26 <= v25)
    goto LABEL_9;
  v27 = *((unsigned __int8 *)v26 + v25 + 4);
  if ((v27 - 1) >= 2)
  {
    if (v27)
    {
      if (v27 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19875DCC4);
      }
      goto LABEL_20;
    }
LABEL_9:
    v28 = *(_DWORD **)(v24 + 112);
    if (*v28 <= v25)
    {
      __break(0xC471u);
      JUMPOUT(0x19875DD04);
    }
    v29 = *(_QWORD *)&v28[2 * v25 + 2];
    if (v29)
      v30 = (v29 & 0xFFFE000000000002) == 0;
    else
      v30 = 0;
    if (!v30)
      goto LABEL_25;
    v31 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C));
    if (v31 != &JSC::SymbolTable::s_info && v31 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_25;
LABEL_20:
    v33 = (JSC::AssemblerBuffer *)(a1 + 56);
    v34 = *(_DWORD *)(a1 + 200);
    if (v34 + 4 > *(_DWORD *)(a1 + 192))
    {
      v38 = v13;
      JSC::AssemblerBuffer::outOfLineGrow(v33, v4, v5, v6, v7, v8, v9, v10);
      v33 = (JSC::AssemblerBuffer *)(a1 + 56);
      v13 = v38;
      v34 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v34) = -129956959;
    v35 = *(_DWORD *)(a1 + 200);
    v36 = v35 + 4;
    *(_DWORD *)(a1 + 200) = v35 + 4;
    if ((v35 + 8) > *(_DWORD *)(a1 + 192))
    {
      v39 = v13;
      JSC::AssemblerBuffer::outOfLineGrow(v33, v4, v5, v6, v7, v8, v9, v10);
      v13 = v39;
      v36 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v36) = -129368031;
    *(_DWORD *)(a1 + 200) += 4;
    v14 = 1;
    goto LABEL_3;
  }
LABEL_25:
  v37 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v37 <= v25)
  {
    __break(0xC471u);
    JUMPOUT(0x19875DCE4);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v37[2 * v25 + 2], 1, v6, v7, v8, v9, v10);
LABEL_4:
  v15 = JSC::JIT::addToConstantPool(a1, 1, v12);
  JSC::MacroAssemblerARM64::load64(a1, ((unint64_t)((8 * v15 + 24) >> 3) << 35) | 0x1A, 2, v16, v17, v18, v19, v20);
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v40, a1, (uint64_t)operationNewAsyncGeneratorFunction, v11, *(JSC::ARM64LogicalImmediate **)(a1 + 352), v21, v22, v23);
}

void JSC::JIT::emit_op_new_array(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  JSC::ARM64LogicalImmediate *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;

  v9 = *a2;
  if (v9 == 128)
  {
    v29 = *((__int16 *)a2 + 1);
    if (v29 <= 63)
      v11 = *((__int16 *)a2 + 1);
    else
      v11 = v29 + 1073741760;
    v12 = *((__int16 *)a2 + 2);
    if (v12 > 63)
      v12 += 1073741760;
    v13 = (JSC::ARM64LogicalImmediate *)*((unsigned __int16 *)a2 + 3);
    v14 = *((unsigned __int16 *)a2 + 5);
  }
  else if (v9 == 130)
  {
    v11 = *(_DWORD *)(a2 + 2);
    v12 = *(_DWORD *)(a2 + 6);
    v13 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(a2 + 10);
    v14 = *(_DWORD *)(a2 + 18);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = (char)a2[1];
    else
      v11 = v10 + 1073741808;
    v12 = (char)a2[2];
    if (v12 > 15)
      v12 += 1073741808;
    v13 = (JSC::ARM64LogicalImmediate *)a2[3];
    v14 = a2[5];
  }
  JSC::MacroAssemblerARM64::add64(a1, (8 * v12), 29, 2, a5, a6, a7, a8);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v19)
    v20 = *(unsigned __int16 *)(v19 + 60);
  else
    v20 = *(_DWORD *)(v19 + 216);
  JSC::MacroAssemblerARM64::add64(a1, ((v20 + 7) & 0xFFFFFFF8) + 8 * v14, 25, 1, v15, v16, v17, v18);
  v28 = *(_DWORD *)(a1 + 200);
  if (v28 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v21, v22, v23, v24, v25, v26, v27);
    v28 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = -129989824;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::JIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::ArrayAllocationProfile *,JSC::JSValue const*,int),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,int>(v13, a1, (unsigned __int8 *)operationNewArrayWithProfile, v11, 0, 1, 2, v27, &v30);
}

void JSC::JIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::ArrayAllocationProfile *,JSC::JSValue const*,int),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,int>(JSC::ARM64LogicalImmediate *this@<X6>, uint64_t a2@<X0>, unsigned __int8 *a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X3>, uint64_t a6@<X4>, uint64_t a7@<X5>, uint64_t a8@<X7>, int *a9@<X8>)
{
  unsigned __int8 *v9;
  uint64_t v11;
  unsigned int v14;
  JSC::ARM64LogicalImmediate *v15;
  JSC::AssemblerBuffer *v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint8x8_t v23;
  __int32 v24;
  uint8x8_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  unsigned int v34;
  char v35;
  char v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  _BYTE *v40;
  int v41;
  unsigned __int8 *v42;
  char *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  int v46;
  unsigned __int8 *v47;
  void *v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int8x8_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int64_t v82;
  char *v83;
  char *v84;
  JSC::AssemblerBuffer *v85;
  void *__dst;
  uint64_t v87;
  _WORD v88[4];

  v11 = (uint64_t)a3;
  __dst = v88;
  v87 = 3;
  if ((_DWORD)a5)
  {
    v88[0] = a5;
    v14 = 1;
    HIDWORD(v87) = 1;
  }
  else
  {
    v14 = 0;
  }
  if ((_DWORD)a6 != 1)
  {
    v88[v14++] = a6 | 0x100;
    HIDWORD(v87) = v14;
  }
  if ((_DWORD)a7 == 2)
  {
    v15 = (JSC::ARM64LogicalImmediate *)this;
    if (!v14)
      goto LABEL_65;
  }
  else
  {
    v88[v14++] = a7 | 0x200;
    HIDWORD(v87) = v14;
    v15 = (JSC::ARM64LogicalImmediate *)this;
  }
  v16 = (JSC::AssemblerBuffer *)(a2 + 56);
  do
  {
    v17 = 0;
    v18 = 0;
    v19 = __dst;
    v20 = v14;
    do
    {
      if ((*((_BYTE *)__dst + v17 + 1) & 0x40) != 0)
      {
LABEL_77:
        __break(1u);
        goto LABEL_78;
      }
      v18 |= 1 << *((_BYTE *)__dst + v17 + 1);
      v17 += 2;
    }
    while (2 * v14 != v17);
    v21 = 0;
    do
    {
      v22 = *((_BYTE *)__dst + v21) & 0x7F;
      if (v22 >= 0x40)
        goto LABEL_77;
      v18 &= ~(1 << v22);
      v21 += 2;
    }
    while (2 * v14 != v21);
    v23 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
    v23.i16[0] = vaddlv_u8(v23);
    v24 = v23.i32[0];
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v18));
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.i32[0] + v24)
    {
      v9 = 0;
      if (v14 <= 1)
        v26 = 1;
      else
        v26 = v14;
      v27 = 2 * v26;
      while (1)
      {
        v28 = v9[(_QWORD)__dst + 1];
        if ((v28 & 0x7Fu) >= 0x40)
          goto LABEL_77;
        if (((v18 >> (v28 & 0x7F)) & 1) != 0)
          break;
        v9 += 2;
        if ((unsigned __int8 *)v27 == v9)
          goto LABEL_58;
      }
      v29 = v9[(_QWORD)__dst];
      if (v29 != v28)
      {
        v30 = (char)v29;
        if ((char)v29 == 63)
        {
          v31 = *(_DWORD *)(a2 + 200);
          v32 = *(_DWORD *)(a2 + 192);
          if (v28 == 31)
            goto LABEL_52;
          v34 = v28 & 0x1F | 0xD2800000;
        }
        else
        {
          v31 = *(_DWORD *)(a2 + 200);
          v32 = *(_DWORD *)(a2 + 192);
          v33 = (char)v28 == 31 || v30 == 31;
          if (!v33)
          {
            v34 = v28 & 0xFFE0FFFF | ((v30 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v34 = (char)v28 | (32 * v30) | 0x91000000;
        }
LABEL_53:
        if (v31 + 4 > v32)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v16, (uint64_t)a3, a4, a5, a6, a7, (uint64_t)this, a8);
          v31 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = v34;
        *(_DWORD *)(a2 + 200) += 4;
        v19 = __dst;
        v20 = HIDWORD(v87);
      }
      memmove(&v9[(_QWORD)v19], &v9[(_QWORD)v19 + 2], 2 * v20 - (_QWORD)v9 - 2);
      v14 = HIDWORD(v87) - 1;
      goto LABEL_57;
    }
    v85 = v16;
    v35 = *(_BYTE *)__dst;
    v36 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v36, a5, a6, a7, (uint64_t)this, a8);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v87) - 2);
    v37 = (HIDWORD(v87) - 1);
    v33 = HIDWORD(v87) == 1;
    HIDWORD(v87) = v37;
    v9 = (unsigned __int8 *)__dst;
    v38 = (unsigned __int8 *)__dst + 2 * v37;
    if (v33)
    {
      v45 = 0;
      v46 = 0;
      v41 = 0;
      a3 = v38;
    }
    else
    {
      v39 = 2 * v37;
      v40 = __dst;
      while (*v40 != v36)
      {
        v40 += 2;
        v39 -= 2;
        if (!v39)
          goto LABEL_37;
      }
      *v40 = v35;
LABEL_37:
      v41 = 0;
      v42 = v9;
      a3 = v38;
      v43 = (char *)v38;
      do
      {
        if (*v9 == v9[1])
        {
          v44 = v9;
          if (v43 != (char *)__dst + 2 * HIDWORD(v87))
          {
            v84 = (char *)v38;
            if (v9 == a3)
            {
              v44 = (unsigned __int8 *)v43;
            }
            else
            {
              v82 = v42 - a3;
              v83 = v43;
              memmove(v43, a3, v42 - a3);
              v44 = (unsigned __int8 *)&v83[v82];
            }
            v38 = (unsigned __int8 *)v84;
          }
          a3 = v9 + 2;
          ++v41;
          v43 = (char *)v44;
        }
        v9 += 2;
        v42 += 2;
      }
      while (v9 < v38);
      v9 = (unsigned __int8 *)__dst;
      v45 = HIDWORD(v87);
      v46 = HIDWORD(v87);
      v38 = (unsigned __int8 *)v43;
    }
    v47 = &v9[2 * v45];
    v16 = v85;
    if (a3 != v47)
    {
      memmove(v38, a3, v47 - a3);
      v46 = HIDWORD(v87);
    }
    v14 = v46 - v41;
LABEL_57:
    HIDWORD(v87) = v14;
LABEL_58:
    ;
  }
  while (v14);
  v48 = __dst;
  if (v88 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v87) = 0;
    WTF::fastFree((unint64_t)v48, a3, a4, a5, a6, a7, (uint64_t)this, a8);
  }
LABEL_65:
  LODWORD(v9) = -1207811152;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, v15, 3, a5, a6, a7, (uint64_t)this, a8);
  v49 = *(unsigned int *)(a2 + 640);
  if (v49 >= 4)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      return;
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)(v49 >> 2), a2 + 264, a5, a6, a7, (uint64_t)this, a8);
  }
  else
  {
    LODWORD(v9) = -1207811137;
  }
  v50 = *(_DWORD *)(a2 + 200);
  if (v50 + 4 > *(_DWORD *)(a2 + 192))
  {
LABEL_78:
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)a3, a4, a5, a6, a7, (uint64_t)this, a8);
    v50 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v50) = (_DWORD)v9;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::JIT::appendCall(a2, v11, a4, a5, a6, a7, (uint64_t)this, a8, a9);
  JSC::MacroAssemblerARM64::branchTest64(a2, 1, 1, 0xFFFFFFFFLL, v51, v52, v53, v54, (uint64_t)&__dst, v55);
  v61 = *(_QWORD *)(*(_QWORD *)(a2 + 352) + 90440);
  v62 = *(_QWORD *)(v61 + 8);
  v63 = *(unsigned int **)(v61 + 16);
  if (v63)
  {
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 + 1, v63));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v62, a2, v56, v57, v58, v59, v60);
    do
    {
      v72 = __ldaxr(v63);
      v73 = v72 - 1;
    }
    while (__stlxr(v73, v63));
    if (!v73)
    {
      atomic_store(1u, v63);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v63, v65, v66, v67, v68, v69, v70, v71);
      WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v62, a2, v56, v57, v58, v59, v60);
  }
  JSC::MacroAssemblerARM64::store64(a2, 0, (a4 << 35) | 0x1D, v67, v68, v69, v70, v71);
}

void JSC::JIT::emit_op_new_array_with_size(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x8_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  int v61;
  _DWORD *v62;
  int v63;
  int v64;
  _DWORD *v65;
  unint64_t v66;
  BOOL v67;
  char **v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  unsigned int v84[3];

  v9 = *a2;
  if (v9 == 128)
  {
    v63 = *((__int16 *)a2 + 1);
    if (v63 <= 63)
      v11 = v63;
    else
      v11 = (v63 + 1073741760);
    v64 = *((__int16 *)a2 + 2);
    v13 = v64 + 1073741760;
    if (v64 <= 63)
      v13 = *((__int16 *)a2 + 2);
    v14 = *((unsigned __int16 *)a2 + 3);
  }
  else if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v13 = *(_DWORD *)(a2 + 6);
    v14 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = (char)a2[2];
    v13 = v12 + 1073741808;
    if (v12 <= 15)
      v13 = (char)a2[2];
    v14 = a2[3];
  }
  v15 = v13;
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  if (*(_WORD *)v16)
    v17 = *(unsigned __int16 *)(v16 + 32);
  else
    v17 = *(_DWORD *)(v16 + 160);
  JSC::MacroAssemblerARM64::add64(a1, ((v17 + 7) & 0xFFFFFFF8) + 8 * v14, 25, 1, a5, a6, a7, a8);
  if ((int)v15 < 0x40000000)
  {
    v23 = (v15 << 35) | 0x1D;
LABEL_13:
    JSC::MacroAssemblerARM64::load64(a1, v23, 2, v18, v19, v20, v21, v22);
    goto LABEL_14;
  }
  v58 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v59 = (v15 - 0x40000000);
  v60 = *(_DWORD **)(v58 + 120);
  if (!v60 || *v60 <= v59)
    goto LABEL_41;
  v61 = *((unsigned __int8 *)v60 + v59 + 4);
  if ((v61 - 1) >= 2)
  {
    if (v61)
    {
      if (v61 == 3)
        goto LABEL_52;
      goto LABEL_60;
    }
LABEL_41:
    v65 = *(_DWORD **)(v58 + 112);
    if (*v65 > v59)
    {
      v66 = *(_QWORD *)&v65[2 * v59 + 2];
      if (v66)
        v67 = (v66 & 0xFFFE000000000002) == 0;
      else
        v67 = 0;
      if (!v67)
        goto LABEL_32;
      v68 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v66 & 0xFFFFFFFE) + 0x4C));
      if (v68 != &JSC::SymbolTable::s_info && v68 != &JSC::JSTemplateObjectDescriptor::s_info)
        goto LABEL_32;
LABEL_52:
      JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 2, v18, v19, v20, v21, v22);
      JSC::MacroAssemblerARM64::load64(a1, 0xA000000002, 2, v70, v71, v72, v73, v74);
      v23 = (v15 << 35) | 2;
      goto LABEL_13;
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x19875E6DCLL);
  }
LABEL_32:
  v62 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v62 <= v59)
  {
    __break(0xC471u);
    JUMPOUT(0x19875E76CLL);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v62[2 * v59 + 2], 2, v18, v19, v20, v21, v22);
LABEL_14:
  v31 = *(_DWORD *)(a1 + 200);
  if (v31 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v24, v25, v26, v27, v28, v29, v30);
    v31 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v31) = -129989824;
  v32 = -1207811152;
  v33 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v33;
  v34 = *(unsigned int *)(a1 + 640);
  if (v34 >= 4)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19875E74CLL);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(v34 >> 2), a1 + 264, v26, v27, v28, v29, v30);
    v33 = *(_DWORD *)(a1 + 200);
  }
  else
  {
    v32 = -1207811137;
  }
  if (v33 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v24, v25, v26, v27, v28, v29, v30);
    v33 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v33) = v32;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::JIT::appendCall(a1, (uint64_t)operationNewArrayWithSizeAndProfile, v25, v26, v27, v28, v29, v30, &v83);
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, 1, 0xFFFFFFFFLL, v35, v36, v37, v38, (uint64_t)v84, v39);
  v45 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440);
  v46 = *(_QWORD *)(v45 + 8);
  v47 = *(unsigned int **)(v45 + 16);
  if (v47)
  {
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 + 1, v47));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v84, v46, a1, v40, v41, v42, v43, v44);
    do
    {
      v56 = __ldaxr(v47);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v47));
    if (!v57)
    {
      atomic_store(1u, v47);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v47, v49, v50, v51, v52, v53, v54, v55);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v84, v46, a1, v40, v41, v42, v43, v44);
  }
  JSC::MacroAssemblerARM64::store64(a1, 0, (v11 << 35) | 0x1D, v51, v52, v53, v54, v55);
}

void JSC::JIT::emit_op_create_lexical_environment(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  int v10;
  int16x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t (*v38)(uint64_t, JSC::VM *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int8x8_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned __int32 v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  int v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  int v71;
  _DWORD *v72;
  _DWORD *v73;
  unint64_t v74;
  BOOL v75;
  char **v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  unint64_t v84;
  BOOL v85;
  char **v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int16x4_t v93;
  int32x4_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int8x16_t v103;
  int v104;
  unsigned int v105[3];

  v10 = *a2;
  if (v10 == 128)
  {
    v93 = *(int16x4_t *)(a2 + 2);
    v12 = vmovl_s16(v93);
    v94.i64[0] = 0x3F0000003FLL;
    v94.i64[1] = 0x3F0000003FLL;
    v14 = (int8x16_t)vcgtq_s32(v12, v94);
    v15 = (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFC0u), v93);
    goto LABEL_4;
  }
  if (v10 != 130)
  {
    a9.i32[0] = *(_DWORD *)(a2 + 1);
    v11 = (int16x4_t)vmovl_s8(a9).u64[0];
    v12 = vmovl_s16(v11);
    v13.i64[0] = 0xF0000000FLL;
    v13.i64[1] = 0xF0000000FLL;
    v14 = (int8x16_t)vcgtq_s32(v12, v13);
    v15 = (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v11);
LABEL_4:
    v16 = vbslq_s8(v14, v15, (int8x16_t)v12);
    goto LABEL_5;
  }
  v16 = *(int8x16_t *)(a2 + 2);
LABEL_5:
  v17 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v17 <= (v16.i32[3] - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x19875EC34);
  }
  v18 = v16.u32[1];
  v19 = *(_QWORD *)&v17[2 * (v16.i32[3] - 0x40000000) + 2];
  v20 = *(_DWORD *)(a1 + 200);
  v103 = v16;
  if (v20 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v20 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v20) = -129989824;
  *(_DWORD *)(a1 + 200) += 4;
  if ((int)v18 < 0x40000000)
  {
    v21 = (v18 << 35) | 0x1D;
LABEL_10:
    JSC::MacroAssemblerARM64::load64(a1, v21, 1, a4, a5, a6, a7, a8);
    goto LABEL_11;
  }
  v63 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v64 = (v18 - 0x40000000);
  v65 = *(_DWORD **)(v63 + 120);
  if (!v65 || *v65 <= v64)
    goto LABEL_40;
  v66 = *((unsigned __int8 *)v65 + v64 + 4);
  if ((v66 - 1) >= 2)
  {
    if (v66)
    {
      if (v66 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19875EBECLL);
      }
      goto LABEL_51;
    }
LABEL_40:
    v73 = *(_DWORD **)(v63 + 112);
    if (*v73 <= v64)
    {
      __break(0xC471u);
      JUMPOUT(0x19875ED00);
    }
    v74 = *(_QWORD *)&v73[2 * v64 + 2];
    if (v74)
      v75 = (v74 & 0xFFFE000000000002) == 0;
    else
      v75 = 0;
    if (!v75)
      goto LABEL_32;
    v76 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v74 & 0xFFFFFFFE) + 0x4C));
    if (v76 != &JSC::SymbolTable::s_info && v76 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_32;
LABEL_51:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v78, v79, v80, v81, v82);
    v21 = (v18 << 35) | 1;
    goto LABEL_10;
  }
LABEL_32:
  v67 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v67 <= v64)
  {
    __break(0xC471u);
    JUMPOUT(0x19875ECC0);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v67[2 * v64 + 2], 1, a4, a5, a6, a7, a8);
LABEL_11:
  if (v103.i32[2] < 0x40000000)
  {
    v27 = ((unint64_t)v103.u32[2] << 35) | 0x1D;
LABEL_13:
    JSC::MacroAssemblerARM64::load64(a1, v27, 2, v22, v23, v24, v25, v26);
    goto LABEL_14;
  }
  v68 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v69 = (v103.i32[2] - 0x40000000);
  v70 = *(_DWORD **)(v68 + 120);
  if (!v70 || *v70 <= v69)
    goto LABEL_53;
  v71 = *((unsigned __int8 *)v70 + v69 + 4);
  if ((v71 - 1) >= 2)
  {
    if (v71)
    {
      if (v71 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19875EC14);
      }
      goto LABEL_64;
    }
LABEL_53:
    v83 = *(_DWORD **)(v68 + 112);
    if (*v83 <= v69)
    {
      __break(0xC471u);
      JUMPOUT(0x19875ED20);
    }
    v84 = *(_QWORD *)&v83[2 * v69 + 2];
    if (v84)
      v85 = (v84 & 0xFFFE000000000002) == 0;
    else
      v85 = 0;
    if (!v85)
      goto LABEL_37;
    v86 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v84 & 0xFFFFFFFE) + 0x4C));
    if (v86 != &JSC::SymbolTable::s_info && v86 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_37;
LABEL_64:
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 2, v22, v23, v24, v25, v26);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000002, 2, v88, v89, v90, v91, v92);
    v27 = ((unint64_t)v103.u32[2] << 35) | 2;
    goto LABEL_13;
  }
LABEL_37:
  v72 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v72 <= v69)
  {
    __break(0xC471u);
    JUMPOUT(0x19875ECE0);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v72[2 * v69 + 2], 2, v22, v23, v24, v25, v26);
LABEL_14:
  v35 = -1207811152;
  v36 = *(unsigned int *)(a1 + 640);
  if (v36 >= 4)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19875ECA0);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(v36 >> 2), a1 + 264, v30, v31, v32, v33, v34);
  }
  else
  {
    v35 = -1207811137;
  }
  v37 = *(_DWORD *)(a1 + 200);
  if (v37 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v28, v29, v30, v31, v32, v33, v34);
    v37 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v37) = v35;
  *(_DWORD *)(a1 + 200) += 4;
  if (v19 == 10)
    v38 = operationCreateLexicalEnvironmentUndefined;
  else
    v38 = operationCreateLexicalEnvironmentTDZ;
  JSC::JIT::appendCall(a1, (uint64_t)v38, v29, v30, v31, v32, v33, v34, &v104);
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, 1, 0xFFFFFFFFLL, v39, v40, v41, v42, (uint64_t)v105, v43);
  v49 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440);
  v50 = *(_QWORD *)(v49 + 8);
  v51 = *(unsigned int **)(v49 + 16);
  if (!v51)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v105, v50, a1, v44, v45, v46, v47, v48);
LABEL_73:
    v62 = v103.i32[0];
    goto LABEL_28;
  }
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 + 1, v51));
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v105, v50, a1, v44, v45, v46, v47, v48);
  do
  {
    v60 = __ldaxr(v51);
    v61 = v60 - 1;
  }
  while (__stlxr(v61, v51));
  v62 = v103.i32[0];
  if (!v61)
  {
    atomic_store(1u, v51);
    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v51, v53, v54, v55, v56, v57, v58, v59);
    WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    goto LABEL_73;
  }
LABEL_28:
  JSC::MacroAssemblerARM64::store64(a1, 0, ((unint64_t)v62 << 35) | 0x1D, v55, v56, v57, v58, v59);
}

void JSC::JIT::callOperationNoExceptionCheck<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *),JSC::ARM64Registers::RegisterID>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int *a9@<X8>)
{
  unsigned int v9;
  uint64_t v11;
  __int16 *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint8x8_t v22;
  __int32 v23;
  uint8x8_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  char v32;
  char v33;
  uint64_t v34;
  unsigned __int8 *v35;
  char *v36;
  uint64_t v37;
  unsigned int v38;
  char *v39;
  uint64_t v40;
  _BYTE *v41;
  unsigned __int8 *v42;
  char *v43;
  unsigned __int8 *v44;
  int64_t v45;
  void *v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int8x8_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int16 *v80;
  JSC::AssemblerBuffer *v81;
  void *__dst;
  int v83;
  unsigned int v84;
  __int16 v85;

  v11 = (uint64_t)a2;
  v14 = &v85;
  __dst = &v85;
  v83 = 1;
  if ((_DWORD)a4)
  {
    v85 = a4;
    v84 = 1;
    v81 = (JSC::AssemblerBuffer *)(a1 + 56);
    v15 = 1;
    do
    {
      v16 = 0;
      v17 = 0;
      v18 = (char *)__dst;
      v19 = v15;
      do
      {
        if ((*((_BYTE *)__dst + v16 + 1) & 0x40) != 0)
        {
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
        v17 |= 1 << *((_BYTE *)__dst + v16 + 1);
        v16 += 2;
      }
      while (2 * v15 != v16);
      v20 = 0;
      do
      {
        v21 = *((_BYTE *)__dst + v20) & 0x7F;
        if (v21 >= 0x40)
          goto LABEL_66;
        v17 &= ~(1 << v21);
        v20 += 2;
      }
      while (2 * v15 != v20);
      v22 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
      v22.i16[0] = vaddlv_u8(v22);
      v23 = v22.i32[0];
      v24 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v17));
      v24.i16[0] = vaddlv_u8(v24);
      if (v24.i32[0] + v23)
      {
        v25 = 0;
        if (v15 <= 1)
          v26 = 1;
        else
          v26 = v15;
        v27 = 2 * v26;
        while (1)
        {
          v28 = *((unsigned __int8 *)__dst + v25 + 1);
          if ((v28 & 0x7Fu) >= 0x40)
            goto LABEL_66;
          if (((v17 >> (v28 & 0x7F)) & 1) != 0)
            break;
          v25 += 2;
          if (v27 == v25)
            goto LABEL_33;
        }
        v29 = *((unsigned __int8 *)__dst + v25);
        if (v29 != v28)
        {
          if ((char)v29 == 63)
          {
            if (v28 == 31)
              goto LABEL_27;
            v9 = v28 & 0x1F | 0xD2800000;
          }
          else
          {
            v30 = (char)v28 == 31 || (char)v29 == 31;
            if (!v30)
            {
              v9 = v28 & 0xFFE0FFFF | ((v29 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v9 = (char)v28 | (32 * (char)v29) | 0x91000000;
          }
LABEL_28:
          v31 = *(_DWORD *)(a1 + 200);
          if (v31 + 4 > *(_DWORD *)(a1 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v81, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v31 = *(_DWORD *)(a1 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 56) + v31) = v9;
          *(_DWORD *)(a1 + 200) += 4;
          v18 = (char *)__dst;
          v19 = v84;
        }
        memmove(&v18[v25], &v18[v25 + 2], 2 * v19 - v25 - 2);
        v15 = v84 - 1;
        goto LABEL_32;
      }
      v80 = v14;
      v32 = *(_BYTE *)__dst;
      v33 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(a1, *(char *)__dst, v33, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v84 - 2);
      v34 = v84 - 1;
      v30 = v84 == 1;
      v84 = v34;
      v35 = (unsigned __int8 *)__dst;
      v36 = (char *)__dst + 2 * v34;
      if (v30)
      {
        v37 = 0;
        v38 = 0;
        v9 = 0;
        a2 = (char *)__dst + 2 * v34;
      }
      else
      {
        v40 = 2 * v34;
        v41 = __dst;
        while (*v41 != v33)
        {
          v41 += 2;
          v40 -= 2;
          if (!v40)
            goto LABEL_43;
        }
        *v41 = v32;
LABEL_43:
        v9 = 0;
        v42 = v35;
        a2 = v36;
        v43 = v36;
        do
        {
          if (*v35 == v35[1])
          {
            v44 = v35;
            if (v43 != (char *)__dst + 2 * v84)
            {
              if (v35 == (unsigned __int8 *)a2)
              {
                v44 = (unsigned __int8 *)v43;
              }
              else
              {
                v45 = v42 - (unsigned __int8 *)a2;
                memmove(v43, a2, v42 - (unsigned __int8 *)a2);
                v44 = (unsigned __int8 *)&v43[v45];
              }
            }
            a2 = (char *)(v35 + 2);
            ++v9;
            v43 = (char *)v44;
          }
          v35 += 2;
          v42 += 2;
        }
        while (v35 < (unsigned __int8 *)v36);
        v35 = (unsigned __int8 *)__dst;
        v37 = v84;
        v38 = v84;
        v36 = v43;
      }
      v39 = (char *)&v35[2 * v37];
      if (a2 != v39)
      {
        memmove(v36, a2, v39 - a2);
        v38 = v84;
      }
      v15 = v38 - v9;
      v14 = v80;
LABEL_32:
      v84 = v15;
LABEL_33:
      ;
    }
    while (v15);
    v46 = __dst;
    if (v14 != __dst && __dst)
    {
      __dst = 0;
      v83 = 0;
      WTF::fastFree((unint64_t)v46, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v9 = -1207811152;
  v47 = *(unsigned int *)(a1 + 640);
  if (v47 >= 4)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19875F1D8);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(v47 >> 2), a1 + 264, a4, a5, a6, a7, a8);
  }
  else
  {
    v9 = -1207811137;
  }
  v48 = *(_DWORD *)(a1 + 200);
  if (v48 + 4 > *(_DWORD *)(a1 + 192))
  {
LABEL_67:
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v48 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v48) = v9;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::JIT::appendCall(a1, v11, a3, a4, a5, a6, a7, a8, a9);
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, 1, 0xFFFFFFFFLL, v49, v50, v51, v52, (uint64_t)&__dst, v53);
  v59 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 90440);
  v60 = *(_QWORD *)(v59 + 8);
  v61 = *(unsigned int **)(v59 + 16);
  if (v61)
  {
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 + 1, v61));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v60, a1, v54, v55, v56, v57, v58);
    do
    {
      v70 = __ldaxr(v61);
      v71 = v70 - 1;
    }
    while (__stlxr(v71, v61));
    if (!v71)
    {
      atomic_store(1u, v61);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v61, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)&__dst, v60, a1, v54, v55, v56, v57, v58);
  }
  JSC::MacroAssemblerARM64::store64(a1, 0, (a3 << 35) | 0x1D, v65, v66, v67, v68, v69);
}

void JSC::JIT::emit_op_create_scoped_arguments(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;

  v3 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpCreatePromise>(a2);
  v4 = v3;
  v5 = HIDWORD(v3);
  JSC::MacroAssemblerARM64::load64(a1, 0x80000001ALL, 0, v6, v7, v8, v9, v10);
  if ((int)v5 < 0x40000000)
  {
    v16 = (v5 << 35) | 0x1D;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v16, 1, v11, v12, v13, v14, v15);
    goto LABEL_4;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v5))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 1, v22, v23, v24, v25, v26);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000001, 1, v28, v29, v30, v31, v32);
    v16 = (v5 << 35) | 1;
    goto LABEL_3;
  }
  v27 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v27 <= (v5 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x19875F304);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v27[2 * (v5 - 0x40000000) + 2], 1, v22, v23, v24, v25, v26);
LABEL_4:
  JSC::JIT::callOperationNoExceptionCheck<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSLexicalEnvironment *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v33, a1, v4, v17, v18, v19, v20, v21);
}

void JSC::JIT::callOperationNoExceptionCheck<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSLexicalEnvironment *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x8_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45[3];

  v11 = -1207811152;
  v12 = *(unsigned int *)(a2 + 640);
  if (v12 >= 4)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19875F478);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)(v12 >> 2), a2 + 264, a4, a5, a6, a7, a8);
  }
  else
  {
    v11 = -1207811137;
  }
  v13 = *(_DWORD *)(a2 + 200);
  if (v13 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = v11;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::JIT::appendCall(a2, (uint64_t)operationCreateScopedArgumentsBaseline, a3, a4, a5, a6, a7, a8, a1);
  JSC::MacroAssemblerARM64::branchTest64(a2, 1, 1, 0xFFFFFFFFLL, v14, v15, v16, v17, (uint64_t)v45, v18);
  v24 = *(_QWORD *)(*(_QWORD *)(a2 + 352) + 90440);
  v25 = *(_QWORD *)(v24 + 8);
  v26 = *(unsigned int **)(v24 + 16);
  if (v26)
  {
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 + 1, v26));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v45, v25, a2, v19, v20, v21, v22, v23);
    do
    {
      v35 = __ldaxr(v26);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v26));
    if (!v36)
    {
      atomic_store(1u, v26);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v26, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v45, v25, a2, v19, v20, v21, v22, v23);
  }
  JSC::MacroAssemblerARM64::store64(a2, 0, (a3 << 35) | 0x1D, v30, v31, v32, v33, v34);
}

void JSC::JIT::emit_op_profile_type(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  _DWORD *v30;
  uint64_t *v31;
  int v32;
  _BYTE *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x8_t v39;
  int v40;
  int v41;
  void *v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int *v61;
  int *v62;
  int v63;
  _DWORD *v64;
  _QWORD *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  int v70;
  _DWORD *v71;
  unint64_t v72;
  BOOL v73;
  char **v74;
  unsigned int v76;
  int v77;
  unsigned int v78;
  _DWORD *v79;
  _DWORD *v80;
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  int v130;
  unsigned int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  int v165;
  unsigned int v166[3];
  unsigned int v167[2];
  char v168;
  __int16 v169;
  char v170;
  int v171;
  int v172;
  unsigned int v173[3];
  _DWORD v174[3];
  _DWORD v175[3];
  _DWORD v176[3];
  _DWORD v177[3];
  _DWORD v178[3];
  int v179;
  uint64_t v180;
  _BYTE *v181;
  uint64_t v182;
  _BYTE v183[24];

  *(_BYTE *)(a1 + 929) = 0;
  v9 = *a2;
  if (v9 == 128)
  {
    v12 = *((__int16 *)a2 + 1);
    if (v12 <= 63)
      v10 = v12;
    else
      v10 = (v12 + 1073741760);
    v11 = *((unsigned __int16 *)a2 + 6);
  }
  else if (v9 == 130)
  {
    v10 = *(unsigned int *)(a2 + 2);
    v11 = *(_DWORD *)(a2 + 22);
  }
  else
  {
    v13 = (char)a2[1];
    if (v13 <= 15)
      v10 = v13;
    else
      v10 = (v13 + 1073741808);
    v11 = a2[6];
  }
  v14 = *(_QWORD *)(a1 + 800);
  v15 = *(_QWORD *)(v14 + 136);
  v16 = *(unsigned __int16 *)(v15 + 40);
  if (!*(_WORD *)(v15 + 40))
    v16 = *(_DWORD *)(v15 + 176);
  v17 = *(_QWORD *)(((v15 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 * v11);
  if ((int)v10 < 0x40000000)
  {
    v18 = (v10 << 35) | 0x1D;
LABEL_16:
    JSC::MacroAssemblerARM64::load64(a1, v18, 0, a4, a5, a6, a7, a8);
    goto LABEL_17;
  }
  v67 = *(_QWORD *)(v14 + 56);
  v68 = (v10 - 0x40000000);
  v69 = *(_DWORD **)(v67 + 120);
  if (!v69 || *v69 <= v68)
    goto LABEL_55;
  v70 = *((unsigned __int8 *)v69 + v68 + 4);
  if ((v70 - 1) >= 2)
  {
    if (v70)
    {
      if (v70 != 3)
      {
        __break(0xC471u);
        goto LABEL_132;
      }
      goto LABEL_66;
    }
LABEL_55:
    v71 = *(_DWORD **)(v67 + 112);
    if (*v71 <= v68)
    {
      __break(0xC471u);
      JUMPOUT(0x19875FEC4);
    }
    v72 = *(_QWORD *)&v71[2 * v68 + 2];
    if (v72)
      v73 = (v72 & 0xFFFE000000000002) == 0;
    else
      v73 = 0;
    if (!v73)
      goto LABEL_71;
    v74 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v72 & 0xFFFFFFFE) + 0x4C));
    if (v74 != &JSC::SymbolTable::s_info && v74 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_71;
LABEL_66:
    v76 = *(_DWORD *)(a1 + 200);
    if (v76 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v76 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v76) = -129956960;
    v77 = *(_DWORD *)(a1 + 200);
    v78 = v77 + 4;
    *(_DWORD *)(a1 + 200) = v77 + 4;
    if ((v77 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v78 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v78) = -129368064;
    *(_DWORD *)(a1 + 200) += 4;
    v18 = v10 << 35;
    goto LABEL_16;
  }
LABEL_71:
  v79 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v79 <= v68)
  {
    __break(0xC471u);
    JUMPOUT(0x19875FEA4);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v79[2 * v68 + 2], 0, a4, a5, a6, a7, a8);
LABEL_17:
  v181 = v183;
  v182 = 2;
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, 0, 0xFFFFFFFFLL, v19, v20, v21, v22, (uint64_t)&v179, (int8x8_t)2);
  v28 = v179;
  if (v179 != -1)
  {
    v29 = HIDWORD(v182);
    if (HIDWORD(v182) == (_DWORD)v182)
    {
      v30 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v181, (void *)(HIDWORD(v182) + 1), (unint64_t)&v179, v23, v24, v25, v26, v27);
      v32 = *v30;
      v31 = (uint64_t *)(v30 + 1);
      v28 = v32;
      v29 = HIDWORD(v182);
    }
    else
    {
      v31 = &v180;
    }
    v33 = &v181[12 * v29];
    *(_DWORD *)v33 = v28;
    *(_QWORD *)(v33 + 4) = *v31;
    ++HIDWORD(v182);
  }
  v34 = *(unsigned __int16 *)(v17 + 40);
  if (v34 > 0xF)
  {
    switch(v34)
    {
      case 0x10u:
        JSC::MacroAssemblerARM64::branch64(a1, 2, 0, 27, v24, v25, v26, v27, (uint64_t)v175);
        v40 = v175[0];
        if (v175[0] == -1)
          break;
        v41 = HIDWORD(v182);
        if (HIDWORD(v182) == (_DWORD)v182)
        {
          v42 = (void *)(HIDWORD(v182) + 1);
          v43 = v175;
          goto LABEL_50;
        }
        v80 = v175;
        goto LABEL_78;
      case 0x20u:
        JSC::MacroAssemblerARM64::branchTest64(a1, 1, 0, 27, v24, v25, v26, v27, (uint64_t)v174);
        v40 = v174[0];
        if (v174[0] == -1)
          break;
        v41 = HIDWORD(v182);
        if (HIDWORD(v182) == (_DWORD)v182)
        {
          v42 = (void *)(HIDWORD(v182) + 1);
          v43 = v174;
          goto LABEL_50;
        }
        v80 = v174;
        goto LABEL_78;
      case 0x40u:
        JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v23, v24, v25, v26, v27, (uint64_t)v173);
        if (!*(_BYTE *)(a1 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x19875FE74);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
        v51 = *(_BYTE *)(a1 + 304) & 0x1F | 0x38405000;
        v52 = *(_DWORD *)(a1 + 200);
        if (v52 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v44, v45, v46, v47, v48, v49, v50);
          v52 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v52) = v51;
        *(_DWORD *)(a1 + 200) += 4;
        JSC::MacroAssemblerARM64::branch32(a1, 0, 17, 2, v47, v48, v49, v50, (uint64_t)&v171);
        v59 = v171;
        if (v171 != -1)
        {
          v60 = HIDWORD(v182);
          if (HIDWORD(v182) == (_DWORD)v182)
          {
            v61 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v181, (void *)(HIDWORD(v182) + 1), (unint64_t)&v171, v54, v55, v56, v57, v58);
            v63 = *v61;
            v62 = v61 + 1;
            v59 = v63;
            v60 = HIDWORD(v182);
          }
          else
          {
            v62 = &v172;
          }
          v82 = &v181[12 * v60];
          *(_DWORD *)v82 = v59;
          *(_QWORD *)(v82 + 4) = *(_QWORD *)v62;
          ++HIDWORD(v182);
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v173, a1, v53, v54, v55, v56, v57, v58);
        break;
    }
  }
  else
  {
    switch(v34)
    {
      case 2u:
        JSC::MacroAssemblerARM64::branch64(a1, 0, 0, 10, v24, v25, v26, v27, (uint64_t)v178);
        v40 = v178[0];
        if (v178[0] == -1)
          break;
        v41 = HIDWORD(v182);
        if (HIDWORD(v182) == (_DWORD)v182)
        {
          v42 = (void *)(HIDWORD(v182) + 1);
          v43 = v178;
          goto LABEL_50;
        }
        v80 = v178;
LABEL_78:
        v65 = v80 + 1;
        goto LABEL_79;
      case 4u:
        JSC::MacroAssemblerARM64::branch64(a1, 0, 0, 2, v24, v25, v26, v27, (uint64_t)v177);
        v40 = v177[0];
        if (v177[0] == -1)
          break;
        v41 = HIDWORD(v182);
        if (HIDWORD(v182) == (_DWORD)v182)
        {
          v42 = (void *)(HIDWORD(v182) + 1);
          v43 = v177;
          goto LABEL_50;
        }
        v80 = v177;
        goto LABEL_78;
      case 8u:
        JSC::MacroAssemblerARM64::xor64(a1, 6, 0, 2, v24, v25, v26, v27);
        JSC::MacroAssemblerARM64::branchTest64(a1, 0, 2, 4294967294, v35, v36, v37, v38, (uint64_t)v176, v39);
        v40 = v176[0];
        if (v176[0] != -1)
        {
          v41 = HIDWORD(v182);
          if (HIDWORD(v182) == (_DWORD)v182)
          {
            v42 = (void *)(HIDWORD(v182) + 1);
            v43 = v176;
LABEL_50:
            v64 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v181, v42, (unint64_t)v43, v23, v24, v25, v26, v27);
            v66 = *v64;
            v65 = v64 + 1;
            v40 = v66;
            v41 = HIDWORD(v182);
LABEL_79:
            v81 = &v181[12 * v41];
            *(_DWORD *)v81 = v40;
            *(_QWORD *)(v81 + 4) = *v65;
            ++HIDWORD(v182);
            break;
          }
          v80 = v176;
          goto LABEL_78;
        }
        break;
    }
  }
  v83 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 93176);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v83, 2, v23, v24, v25, v26, v27);
  v91 = *(_DWORD *)(a1 + 200);
  if (v91 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v84, v85, v86, v87, v88, v89, v90);
    v91 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v91) = -129925053;
  v92 = *(_DWORD *)(a1 + 200);
  v93 = v92 + 4;
  *(_DWORD *)(a1 + 200) = v92 + 4;
  if ((v92 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v84, v85, v86, v87, v88, v89, v90);
    v93 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v93) = -134217632;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v86, v87, v88, v89, v90, (uint64_t)v173);
  v101 = *(_DWORD *)(a1 + 200);
  if (v101 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v94, v95, v96, v97, v98, v99, v100);
    v101 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v101) = -1203765248;
  v102 = *(_DWORD *)(a1 + 200);
  v103 = v102 + 4;
  *(_DWORD *)(a1 + 200) = v102 + 4;
  if ((v102 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v94, v95, v96, v97, v98, v99, v100);
    v103 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v103) = -1207893920;
  v104 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v104; v104 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v104)
  {
    if ((v104 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v94, v95, v96, v97, v98, v99, v100);
      v104 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v104) = -721215457;
    v104 = *(_DWORD *)(a1 + 200) + 4;
  }
  v105 = v104;
  if ((v104 + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v94, v95, v96, v97, v98, v99, v100);
    v105 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v105) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v106 = 69;
  else
    v106 = 65;
  v167[0] = v104;
  v167[1] = 0;
  v168 = v106;
  v169 = 15;
  v170 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v173, a1, v95, v96, v97, v98, v99, v100);
  v114 = *(_DWORD *)(a1 + 200);
  if (v114 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v107, v108, v109, v110, v111, v112, v113);
    v114 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v114) = -1207893889;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v167, a1, v108, v109, v110, v111, v112, v113);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v17, 0, v115, v116, v117, v118, v119);
  v127 = *(_DWORD *)(a1 + 200);
  if (v127 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v120, v121, v122, v123, v124, v125, v126);
    v127 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v127) = -134184864;
  v128 = *(_DWORD *)(a1 + 200);
  v129 = v128 + 4;
  *(_DWORD *)(a1 + 200) = v128 + 4;
  if ((v128 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v120, v121, v122, v123, v124, v125, v126);
    v129 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v129) = -1862246301;
  v130 = *(_DWORD *)(a1 + 200);
  v131 = v130 + 4;
  *(_DWORD *)(a1 + 200) = v130 + 4;
  if ((v130 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v120, v121, v122, v123, v124, v125, v126);
    v131 = *(_DWORD *)(a1 + 200);
  }
  v132 = -1207811152;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v131) = -134119357;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch64(a1, 1, 3, *(_QWORD *)(v83 + 32), v123, v124, v125, v126, (uint64_t)v166);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)(a1 + 352), 0, v133, v134, v135, v136, v137);
  v145 = *(unsigned int *)(a1 + 640);
  if (v145 >= 4)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19875FE54);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(v145 >> 2), a1 + 264, v140, v141, v142, v143, v144);
  }
  else
  {
    v132 = -1207811137;
  }
  v146 = *(_DWORD *)(a1 + 200);
  if (v146 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v138, v139, v140, v141, v142, v143, v144);
    v146 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v146) = v132;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::JIT::appendCall(a1, (uint64_t)operationProcessTypeProfilerLog, v139, v140, v141, v142, v143, v144, &v165);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v166, a1, v147, v148, v149, v150, v151, v152);
  if (HIDWORD(v182))
  {
    v160 = 0;
    v161 = 0;
    v162 = 12 * HIDWORD(v182);
    while (v161 < HIDWORD(v182))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v181[v160], a1, v154, v155, v156, v157, v158, v159);
      ++v161;
      v160 += 12;
      if (v162 == v160)
        goto LABEL_115;
    }
    __break(0xC471u);
LABEL_132:
    JUMPOUT(0x19875FD40);
  }
LABEL_115:
  v163 = (unint64_t)v181;
  if (v183 != v181 && v181 != 0)
  {
    v181 = 0;
    LODWORD(v182) = 0;
    WTF::fastFree(v163, v153, v154, v155, v156, v157, v158, v159);
  }
}

void operationProcessTypeProfilerLog(WTF::StringImpl **a1)
{
  JSC::TypeProfilerLog *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *var18[4];

  a1[5] = var18[3];
  v2 = a1[11647];
  v3 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v3 = 0x2900000002;
  *(_QWORD *)(v3 + 8) = "Log Full, called from inside baseline JIT";
  *(_DWORD *)(v3 + 16) = 4;
  var18[0] = (WTF::StringImpl *)v3;
  JSC::TypeProfilerLog::processLogEntries(v2, (JSC::VM *)a1, (const WTF::String *)var18, v4, v5, v6, v7, v8);
  v16 = var18[0];
  var18[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
}

void JSC::JIT::emit_op_log_shadow_chicken_prologue(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  unint64_t v11;
  JSC::AssemblerBuffer *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  _DWORD *v34;
  unint64_t v35;
  BOOL v36;
  char **v37;
  unsigned int v39;
  int v40;
  unsigned int v41;
  _DWORD *v42;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 93384);
  if ((v8 & 1) != 0 || !v8)
  {
    __break(0xC471u);
    JUMPOUT(0x19875FFD0);
  }
  v10 = -1207811152;
  v11 = *(unsigned int *)(a1 + 640);
  if (v11 >= 4)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1987602A0);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(v11 >> 2), a1 + 264, a4, a5, a6, a7, a8);
  }
  else
  {
    v10 = -1207811137;
  }
  v12 = (JSC::AssemblerBuffer *)(a1 + 56);
  v13 = *(_DWORD *)(a1 + 200);
  if (v13 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v10;
  *(_DWORD *)(a1 + 200) += 4;
  v14 = *a2;
  if (v14 == 128)
  {
    v15 = *((__int16 *)a2 + 1);
    if ((int)v15 <= 63)
      goto LABEL_16;
    v16 = 1073741760;
  }
  else
  {
    if (v14 == 130)
    {
      v15 = *(unsigned int *)(a2 + 2);
      goto LABEL_19;
    }
    v15 = (char)a2[1];
    if ((int)v15 <= 15)
    {
LABEL_16:
      JSC::CCallHelpers::ensureShadowChickenPacket((_DWORD *)a1, *(_QWORD *)(a1 + 352), 0, 8, 2, a6, a7, a8);
LABEL_20:
      v24 = (v15 << 35) | 0x1D;
      v25 = a1;
LABEL_21:
      JSC::MacroAssemblerARM64::load64(v25, v24, 3, v17, v18, v19, v20, v21);
      goto LABEL_22;
    }
    v16 = 1073741808;
  }
  v15 = (v15 + v16);
LABEL_19:
  JSC::CCallHelpers::ensureShadowChickenPacket((_DWORD *)a1, *(_QWORD *)(a1 + 352), 0, 8, 2, a6, a7, a8);
  if ((int)v15 < 0x40000000)
    goto LABEL_20;
  v30 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v31 = (v15 - 0x40000000);
  v32 = *(_DWORD **)(v30 + 120);
  if (!v32 || *v32 <= v31)
    goto LABEL_27;
  v33 = *((unsigned __int8 *)v32 + v31 + 4);
  if ((v33 - 1) >= 2)
  {
    if (v33)
    {
      if (v33 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19876026CLL);
      }
      goto LABEL_38;
    }
LABEL_27:
    v34 = *(_DWORD **)(v30 + 112);
    if (*v34 <= v31)
    {
      __break(0xC471u);
      JUMPOUT(0x1987602E0);
    }
    v35 = *(_QWORD *)&v34[2 * v31 + 2];
    if (v35)
      v36 = (v35 & 0xFFFE000000000002) == 0;
    else
      v36 = 0;
    if (!v36)
      goto LABEL_43;
    v37 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x4C));
    if (v37 != &JSC::SymbolTable::s_info && v37 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_43;
LABEL_38:
    v39 = *(_DWORD *)(a1 + 200);
    if (v39 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, v22, v23, v17, v18, v19, v20, v21);
      v39 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v39) = -129956957;
    v40 = *(_DWORD *)(a1 + 200);
    v41 = v40 + 4;
    *(_DWORD *)(a1 + 200) = v40 + 4;
    if ((v40 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, v22, v23, v17, v18, v19, v20, v21);
      v41 = *(_DWORD *)(a1 + 200);
    }
    v25 = a1;
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v41) = -129367965;
    *(_DWORD *)(a1 + 200) += 4;
    v24 = (v15 << 35) | 3;
    goto LABEL_21;
  }
LABEL_43:
  v42 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v42 <= v31)
  {
    __break(0xC471u);
    JUMPOUT(0x1987602C0);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v42[2 * v31 + 2], 3, v17, v18, v19, v20, v21);
LABEL_22:
  JSC::CCallHelpers::logShadowChickenProloguePacket((_DWORD *)a1, 0, 8, 3, v26, v27, v28, v29);
}

void JSC::JIT::emit_op_log_shadow_chicken_tail(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  unint64_t v11;
  JSC::AssemblerBuffer *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  _DWORD *v31;
  unint64_t v32;
  BOOL v33;
  char **v34;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  int v62;
  _DWORD *v63;
  unint64_t v64;
  BOOL v65;
  char **v66;
  unsigned int v68;
  int v69;
  unsigned int v70;
  _DWORD *v71;
  _DWORD *v72;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 93384);
  if ((v8 & 1) != 0 || !v8)
  {
    __break(0xC471u);
    JUMPOUT(0x198760354);
  }
  v10 = -1207811152;
  v11 = *(unsigned int *)(a1 + 640);
  if (v11 >= 4)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19876082CLL);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(v11 >> 2), a1 + 264, a4, a5, a6, a7, a8);
  }
  else
  {
    v10 = -1207811137;
  }
  v12 = (JSC::AssemblerBuffer *)(a1 + 56);
  v13 = *(_DWORD *)(a1 + 200);
  if (v13 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v10;
  *(_DWORD *)(a1 + 200) += 4;
  v14 = *a2;
  if (v14 == 128)
  {
    v15 = *((__int16 *)a2 + 1);
    v17 = 1073741760;
    v18 = *((__int16 *)a2 + 2);
    if (v18 <= 63)
      v16 = v18;
    else
      v16 = (v18 + 1073741760);
    if ((int)v15 <= 63)
      goto LABEL_43;
  }
  else
  {
    if (v14 == 130)
    {
      v15 = *(unsigned int *)(a2 + 2);
      v16 = *(unsigned int *)(a2 + 6);
      goto LABEL_18;
    }
    v15 = (char)a2[1];
    v17 = 1073741808;
    v41 = (char)a2[2];
    if (v41 <= 15)
      v16 = v41;
    else
      v16 = (v41 + 1073741808);
    if ((int)v15 <= 15)
    {
LABEL_43:
      v19 = v16;
      JSC::CCallHelpers::ensureShadowChickenPacket((_DWORD *)a1, *(_QWORD *)(a1 + 352), 0, 8, 2, a6, a7, a8);
      goto LABEL_44;
    }
  }
  v15 = (v15 + v17);
LABEL_18:
  v19 = v16;
  JSC::CCallHelpers::ensureShadowChickenPacket((_DWORD *)a1, *(_QWORD *)(a1 + 352), 0, 8, 2, a6, a7, a8);
  if ((int)v15 < 0x40000000)
  {
LABEL_44:
    v40 = (v15 << 35) | 0x1D;
    v39 = a1;
LABEL_45:
    JSC::MacroAssemblerARM64::load64(v39, v40, 2, v22, v23, v24, v25, v26);
    goto LABEL_46;
  }
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v28 = (v15 - 0x40000000);
  v29 = *(_DWORD **)(v27 + 120);
  if (!v29 || *v29 <= v28)
    goto LABEL_23;
  v30 = *((unsigned __int8 *)v29 + v28 + 4);
  if ((v30 - 1) >= 2)
  {
    if (v30)
    {
      if (v30 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987607BCLL);
      }
LABEL_34:
      v36 = *(_DWORD *)(a1 + 200);
      if (v36 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v12, v20, v21, v22, v23, v24, v25, v26);
        v36 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v36) = -129956958;
      v37 = *(_DWORD *)(a1 + 200);
      v38 = v37 + 4;
      *(_DWORD *)(a1 + 200) = v37 + 4;
      if ((v37 + 8) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v12, v20, v21, v22, v23, v24, v25, v26);
        v38 = *(_DWORD *)(a1 + 200);
      }
      v39 = a1;
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v38) = -129367998;
      *(_DWORD *)(a1 + 200) += 4;
      v40 = (v15 << 35) | 2;
      goto LABEL_45;
    }
LABEL_23:
    v31 = *(_DWORD **)(v27 + 112);
    if (*v31 <= v28)
    {
      __break(0xC471u);
      JUMPOUT(0x19876088CLL);
    }
    v32 = *(_QWORD *)&v31[2 * v28 + 2];
    if (v32)
      v33 = (v32 & 0xFFFE000000000002) == 0;
    else
      v33 = 0;
    if (!v33)
      goto LABEL_72;
    v34 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x4C));
    if (v34 != &JSC::SymbolTable::s_info && v34 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_72;
    goto LABEL_34;
  }
LABEL_72:
  v71 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v71 <= v28)
  {
    __break(0xC471u);
    JUMPOUT(0x19876084CLL);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v71[2 * v28 + 2], 2, v22, v23, v24, v25, v26);
LABEL_46:
  if ((int)v16 < 0x40000000)
  {
    v49 = (v19 << 35) | 0x1D;
    v50 = a1;
LABEL_48:
    JSC::MacroAssemblerARM64::load64(v50, v49, 4, v44, v45, v46, v47, v48);
    goto LABEL_49;
  }
  v59 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 56);
  v60 = (v19 - 0x40000000);
  v61 = *(_DWORD **)(v59 + 120);
  if (!v61 || *v61 <= v60)
    goto LABEL_56;
  v62 = *((unsigned __int8 *)v61 + v60 + 4);
  if ((v62 - 1) >= 2)
  {
    if (v62)
    {
      if (v62 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1987607E4);
      }
      goto LABEL_67;
    }
LABEL_56:
    v63 = *(_DWORD **)(v59 + 112);
    if (*v63 <= v60)
    {
      __break(0xC471u);
      JUMPOUT(0x1987608ACLL);
    }
    v64 = *(_QWORD *)&v63[2 * v60 + 2];
    if (v64)
      v65 = (v64 & 0xFFFE000000000002) == 0;
    else
      v65 = 0;
    if (!v65)
      goto LABEL_74;
    v66 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v64 & 0xFFFFFFFE) + 0x4C));
    if (v66 != &JSC::SymbolTable::s_info && v66 != &JSC::JSTemplateObjectDescriptor::s_info)
      goto LABEL_74;
LABEL_67:
    v68 = *(_DWORD *)(a1 + 200);
    if (v68 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, v42, v43, v44, v45, v46, v47, v48);
      v68 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v68) = -129956956;
    v69 = *(_DWORD *)(a1 + 200);
    v70 = v69 + 4;
    *(_DWORD *)(a1 + 200) = v69 + 4;
    if ((v69 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, v42, v43, v44, v45, v46, v47, v48);
      v70 = *(_DWORD *)(a1 + 200);
    }
    v50 = a1;
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v70) = -129367932;
    *(_DWORD *)(a1 + 200) += 4;
    v49 = (v16 << 35) | 4;
    goto LABEL_48;
  }
LABEL_74:
  v72 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v72 <= (v16 - 0x40000000))
  {
    __break(0xC471u);
    JUMPOUT(0x19876086CLL);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v72[2 * (v16 - 0x40000000) + 2], 4, v44, v45, v46, v47, v48);
LABEL_49:
  v58 = *(_DWORD *)(a1 + 200);
  if (v58 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, v51, v52, v53, v54, v55, v56, v57);
    v58 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v58) = -129956959;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::CCallHelpers::logShadowChickenTailPacketImpl<JSC::ARM64Registers::RegisterID>(a1, 0, 2, 4, 1, (unint64_t)*(unsigned int *)(a1 + 640) >> 2, v56, v57);
}

void JSC::JIT::emit_op_profile_control_flow(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;

  *(_BYTE *)(a1 + 929) = 0;
  v8 = *a2;
  if (v8 == 128)
  {
    v9 = *((unsigned __int16 *)a2 + 2);
  }
  else if (v8 == 130)
  {
    v9 = *(_DWORD *)(a2 + 6);
  }
  else
  {
    v9 = a2[2];
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 136);
  v11 = *(unsigned __int16 *)(v10 + 42);
  if (!*(_WORD *)(v10 + 42))
    v11 = *(_DWORD *)(v10 + 180);
  JSC::MacroAssemblerARM64::add64(a1, 1, *(_QWORD *)(((v10 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 * v9) + 24, a4, a5, a6, a7, a8);
}

void JSC::JIT::emit_op_argument_count(_DWORD *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;

  v9 = *a2;
  if (v9 == 130)
  {
    v13 = *(unsigned int *)(a2 + 2);
  }
  else
  {
    if (v9 == 128)
    {
      v10 = *((__int16 *)a2 + 1);
      v11 = v10 + 1073741760;
      v12 = v10 <= 63;
    }
    else
    {
      v10 = (char)a2[1];
      v11 = v10 + 1073741808;
      v12 = v10 <= 15;
    }
    if (v12)
      v13 = v10;
    else
      v13 = v11;
  }
  v14 = a1[50];
  if (v14 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v14 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v14) = -1203633248;
  v15 = a1[50];
  v16 = v15 + 4;
  a1[50] = v15 + 4;
  if ((v15 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v16 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v16) = 1358955520;
  v17 = a1[50];
  v18 = v17 + 4;
  a1[50] = v17 + 4;
  if ((v17 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v18 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v18) = -1442839712;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 0, (v13 << 35) | 0x1D, a4, a5, a6, a7, a8);
}

void JSC::JIT::emit_op_get_rest_length(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46[2];
  char v47;
  __int16 v48;
  char v49;
  unsigned int v50[3];

  v9 = *a2;
  if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v12 = *(_DWORD *)(a2 + 6);
  }
  else if (v9 == 128)
  {
    v45 = *((__int16 *)a2 + 1);
    if (v45 <= 63)
      v11 = v45;
    else
      v11 = (v45 + 1073741760);
    v12 = *((unsigned __int16 *)a2 + 2);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = a2[2];
  }
  v13 = v12;
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = -1203633248;
  v15 = *(_DWORD *)(a1 + 200);
  v16 = v15 + 4;
  *(_DWORD *)(a1 + 200) = v15 + 4;
  if ((v15 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v16 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v16) = 1358955520;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch32(a1, 13, 0, v13, a5, a6, a7, a8, (uint64_t)v50);
  JSC::MacroAssemblerARM64::sub32(a1, 0, v13, 0, v17, v18, v19, v20);
  v28 = *(_DWORD *)(a1 + 200);
  if (v28 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v21, v22, v23, v24, v25, v26, v27);
    v28 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = -1442839712;
  v29 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v29; v29 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v29)
  {
    if ((v29 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v21, v22, v23, v24, v25, v26, v27);
      v29 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = -721215457;
    v29 = *(_DWORD *)(a1 + 200) + 4;
  }
  v30 = v29;
  if ((v29 + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v21, v22, v23, v24, v25, v26, v27);
    v30 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v30) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v31 = 69;
  else
    v31 = 65;
  v46[0] = v29;
  v46[1] = 0;
  v47 = v31;
  v48 = 15;
  v49 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v50, a1, v22, v23, v24, v25, v26, v27);
  v39 = *(_DWORD *)(a1 + 200);
  if (v39 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v32, v33, v34, v35, v36, v37, v38);
    v39 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v39) = -1303430176;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v46, a1, v33, v34, v35, v36, v37, v38);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v11 << 35) | 0x1D, v40, v41, v42, v43, v44);
}

void JSC::JIT::emit_op_get_argument(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int i;
  unsigned int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v48[2];
  char v49;
  __int16 v50;
  char v51;
  unsigned int v52[3];

  v9 = *a2;
  if (v9 == 130)
  {
    v11 = *(unsigned int *)(a2 + 2);
    v12 = *(_DWORD *)(a2 + 6);
    v13 = *(_DWORD *)(a2 + 10);
  }
  else if (v9 == 128)
  {
    v47 = *((__int16 *)a2 + 1);
    if (v47 <= 63)
      v11 = v47;
    else
      v11 = (v47 + 1073741760);
    v12 = *((unsigned __int16 *)a2 + 2);
    v13 = *((unsigned __int16 *)a2 + 3);
  }
  else
  {
    v10 = (char)a2[1];
    if (v10 <= 15)
      v11 = v10;
    else
      v11 = (v10 + 1073741808);
    v12 = a2[2];
    v13 = a2[3];
  }
  v14 = v12;
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = -1203633246;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch32(a1, 13, 2, v14, a5, a6, a7, a8, (uint64_t)v52);
  JSC::MacroAssemblerARM64::load64(a1, ((unint64_t)(v14 + 5) << 35) | 0x1D, 0, v16, v17, v18, v19, v20);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v21, v22, v23, v24, v25, v26, v27);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v29 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v21, v22, v23, v24, v25, v26, v27);
    v29 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v30 = 69;
  else
    v30 = 65;
  v48[0] = i;
  v48[1] = 0;
  v49 = v30;
  v50 = 15;
  v51 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v52, a1, v22, v23, v24, v25, v26, v27);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, 10, 0, v31, v32, v33, v34, v35);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v48, a1, v36, v37, v38, v39, v40, v41);
  if (*(_BYTE *)(a1 + 793))
    JSC::MacroAssemblerARM64::store64(a1, 0, ((unint64_t)~v13 << 36) | 0x19, v42, v43, v44, v45, v46);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v11 << 35) | 0x1D, v42, v43, v44, v45, v46);
}

void JSC::JIT::emit_op_get_prototype_of(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  _DWORD *v31;
  uint64_t *v32;
  int v33;
  char *v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  int *v44;
  int *v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  WTF *v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int *v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  WTF *v88;
  uint64_t v89;
  _BYTE v90[24];
  int v91;
  uint64_t v92;
  int v93;

  v9 = *a2;
  if (v9 == 130)
  {
    v10 = *(_DWORD *)(a2 + 2);
    v72 = *(_DWORD *)(a2 + 6);
    v13 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    if (v9 == 128)
    {
      v10 = *((__int16 *)a2 + 1);
      v11 = 1073741760;
      if (v10 > 63)
        v10 += 1073741760;
      v12 = *((__int16 *)a2 + 2);
      v13 = *((unsigned __int16 *)a2 + 3);
      if (v12 <= 63)
        goto LABEL_6;
    }
    else
    {
      v10 = (char)a2[1];
      v11 = 1073741808;
      if (v10 > 15)
        v10 += 1073741808;
      v12 = (char)a2[2];
      v13 = a2[3];
      if (v12 <= 15)
      {
LABEL_6:
        v14 = v12;
        v15 = v10 | ((unint64_t)v12 << 32);
LABEL_7:
        v16 = (v14 << 35) | 0x1D;
LABEL_8:
        JSC::MacroAssemblerARM64::load64(a1, v16, 0, a4, a5, a6, a7, a8);
        goto LABEL_9;
      }
    }
    v72 = v12 + v11;
  }
  v14 = v72;
  v15 = v10 | ((unint64_t)v72 << 32);
  if (v72 < 0x40000000)
    goto LABEL_7;
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v72))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v73, v74, v75, v76, v77);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v79, v80, v81, v82, v83);
    v16 = v14 << 35;
    goto LABEL_8;
  }
  v78 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v78 <= (v14 - 0x40000000))
  {
    __break(0xC471u);
LABEL_47:
    JUMPOUT(0x1987612A0);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v78[2 * (v14 - 0x40000000) + 2], 0, v73, v74, v75, v76, v77);
LABEL_9:
  v88 = (WTF *)v90;
  v89 = 2;
  JSC::AssemblyHelpers::branchIfNotCell(a1, 0, 1, v17, v18, v19, v20, v21, (uint64_t)&v86);
  v29 = v86;
  if (v86 != -1)
  {
    v30 = HIDWORD(v89);
    if (HIDWORD(v89) == (_DWORD)v89)
    {
      v31 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v88, (void *)(HIDWORD(v89) + 1), (unint64_t)&v86, v24, v25, v26, v27, v28);
      v33 = *v31;
      v32 = (uint64_t *)(v31 + 1);
      v29 = v33;
      v30 = HIDWORD(v89);
    }
    else
    {
      v32 = &v87;
    }
    v34 = (char *)v88 + 12 * v30;
    *(_DWORD *)v34 = v29;
    *(_QWORD *)(v34 + 4) = *v32;
    ++HIDWORD(v89);
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    goto LABEL_47;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v35 = *(_BYTE *)(a1 + 304) & 0x1F | 0x38405000;
  v36 = *(_DWORD *)(a1 + 200);
  if (v36 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v22, v23, v24, v25, v26, v27, v28);
    v36 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v36) = v35;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch32(a1, 3, 17, 23, v25, v26, v27, v28, (uint64_t)&v84);
  v42 = v84;
  if (v84 != -1)
  {
    v43 = HIDWORD(v89);
    if (HIDWORD(v89) == (_DWORD)v89)
    {
      v44 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v88, (void *)(HIDWORD(v89) + 1), (unint64_t)&v84, v37, v38, v39, v40, v41);
      v46 = *v44;
      v45 = v44 + 1;
      v42 = v46;
      v43 = HIDWORD(v89);
    }
    else
    {
      v45 = &v85;
    }
    v47 = (char *)v88 + 12 * v43;
    *(_DWORD *)v47 = v42;
    *(_QWORD *)(v47 + 4) = *(_QWORD *)v45;
    ++HIDWORD(v89);
  }
  JSC::AssemblyHelpers::emitLoadPrototype(a1, *(_QWORD *)(a1 + 352), 0, 2, (uint64_t)&v88, v39, v40, v41);
  if (HIDWORD(v89))
  {
    v53 = v88;
    v54 = (WTF *)((char *)v88 + 12 * HIDWORD(v89));
    v55 = *(_DWORD *)(a1 + 660);
    do
    {
      v56 = *(_DWORD *)v53;
      v57 = *(_QWORD *)((char *)v53 + 4);
      v58 = *(_DWORD *)(a1 + 640);
      v91 = *(_DWORD *)v53;
      v92 = v57;
      v93 = v58;
      if (v55 == *(_DWORD *)(a1 + 656))
      {
        v62 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 648, v55 + 1, (unint64_t)&v91);
        v63 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
        *(_DWORD *)v63 = *(_DWORD *)v62;
        *(_QWORD *)(v63 + 4) = *(_QWORD *)(v62 + 4);
        v60 = (int *)(v63 + 12);
        v61 = (int *)(v62 + 12);
      }
      else
      {
        v59 = *(_QWORD *)(a1 + 648) + 16 * v55;
        *(_DWORD *)v59 = v56;
        *(_QWORD *)(v59 + 4) = v92;
        v60 = (int *)(v59 + 12);
        v61 = &v93;
      }
      *v60 = *v61;
      v55 = *(_DWORD *)(a1 + 660) + 1;
      *(_DWORD *)(a1 + 660) = v55;
      v53 = (WTF *)((char *)v53 + 12);
    }
    while (v53 != v54);
  }
  if (*(_BYTE *)(a1 + 793))
    JSC::MacroAssemblerARM64::store64(a1, 2, ((unint64_t)~v13 << 36) | 0x19, v48, v49, v50, v51, v52);
  JSC::MacroAssemblerARM64::store64(a1, 2, (v15 << 35) | 0x1D, v48, v49, v50, v51, v52);
  v71 = v88;
  if (v90 != (_BYTE *)v88)
  {
    if (v88)
    {
      v88 = 0;
      LODWORD(v89) = 0;
      WTF::fastFree((unint64_t)v71, v64, v65, v66, v67, v68, v69, v70);
    }
  }
}

uint64_t operationThrowStackOverflowError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::VM *v18;
  uint64_t vars0;

  v9 = *(JSC::VM **)(a1 + 72);
  v10 = vars0;
  *((_QWORD *)v9 + 5) = vars0;
  v18 = v9;
  v11 = *((_QWORD *)v9 + 6);
  v12 = (_QWORD *)v10;
  while (1)
  {
    v12 = (_QWORD *)*v12;
    if (v12 == (_QWORD *)v11)
      break;
    if (!v12)
      goto LABEL_7;
LABEL_4:
    v13 = v12[3];
    if ((v13 & 0xFFFE000000000007) != 3)
    {
      v15 = 16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 40;
      goto LABEL_8;
    }
  }
  v14 = vmEntryRecord(v11);
  v11 = *(_QWORD *)(v14 + 16);
  v12 = *(_QWORD **)(v14 + 8);
  if (v12)
    goto LABEL_4;
LABEL_7:
  v15 = *((_QWORD *)v9 + 11321) + 8;
LABEL_8:
  v16 = *(_QWORD *)(*(_QWORD *)v15 + 96);
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = v16;
  *(_DWORD *)(v10 + 32) = 0;
  return JSC::throwStackOverflowError(*(_QWORD *)(a1 + 8), &v18, a3, a4, a5, a6, a7, a8);
}

void operationThrowStackOverflowErrorFromThunk(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  JSC::VM *v9;
  JSC::CallFrame *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::VM *v16;
  JSC::VM *vars0;

  v8 = *(JSC::VM **)(a1 + 56);
  v9 = vars0;
  *((_QWORD *)v8 + 5) = vars0;
  v16 = v8;
  JSC::throwStackOverflowError(a1, &v16, a3, a4, a5, a6, a7, a8);
  JSC::genericUnwind(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t operationGetWrappedValueForTarget(uint64_t a1, JSC::VM *a2, uint64_t a3, JSC::JSObject *a4)
{
  JSC::VM *v4;
  unint64_t v5;
  JSC::VM *v6;
  uint64_t v7;
  unsigned int v8;
  JSC::VM *v10;
  _QWORD var38[8];

  v4 = a2;
  v5 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28);
  v6 = *(JSC::VM **)(v5 + 56);
  *((_QWORD *)v6 + 5) = var38[7];
  v7 = *(_QWORD *)(16 * (**(_DWORD **)(a1 + 32) & 0xFFFFFFFE) + 0x28);
  v10 = v6;
  if (((unint64_t)a2 & 0xFFFE000000000002) == 0)
  {
    v8 = *((unsigned __int8 *)a2 + 5);
    if (v8 >= 0x17)
    {
      if ((v8 & 0xFE) == 0x1A)
        return JSC::JSRemoteFunction::tryCreate(v7, v6, v4, a4);
      if ((*((_BYTE *)a2 + 6) & 4) != 0
        && ((*(void (**)(_QWORD *__return_ptr, JSC::VM *))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0x38))(var38, a2), LOBYTE(var38[0])))
      {
        return JSC::JSRemoteFunction::tryCreate(v7, v6, v4, a4);
      }
      else
      {
        JSC::throwTypeError(v5, &v10, (uint64_t)"value passing between realms must be callable or primitive", 59);
        return 10;
      }
    }
  }
  return (uint64_t)v4;
}

uint64_t operationGetWrappedValueForCaller(_DWORD *a1, JSC::VM *a2, uint64_t a3, JSC::JSObject *a4)
{
  JSC::VM *v4;
  unint64_t v5;
  JSC::VM *v6;
  unsigned int v7;
  JSC::VM *v9;
  _QWORD var38[8];

  v4 = a2;
  v5 = *(_QWORD *)(16 * (*a1 & 0xFFFFFFFE) + 0x28);
  v6 = *(JSC::VM **)(v5 + 56);
  *((_QWORD *)v6 + 5) = var38[7];
  v9 = v6;
  if (((unint64_t)a2 & 0xFFFE000000000002) == 0)
  {
    v7 = *((unsigned __int8 *)a2 + 5);
    if (v7 >= 0x17)
    {
      if ((v7 & 0xFE) == 0x1A)
        return JSC::JSRemoteFunction::tryCreate(v5, v6, v4, a4);
      if ((*((_BYTE *)a2 + 6) & 4) != 0
        && ((*(void (**)(_QWORD *__return_ptr, JSC::VM *))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0x38))(var38, a2), LOBYTE(var38[0])))
      {
        return JSC::JSRemoteFunction::tryCreate(v5, v6, v4, a4);
      }
      else
      {
        JSC::throwTypeError(v5, &v9, (uint64_t)"value passing between realms must be callable or primitive", 59);
        return 10;
      }
    }
  }
  return (uint64_t)v4;
}

uint64_t operationMaterializeBoundFunctionTargetCode(uint64_t a1, uint64_t a2, JSC::JSFunction *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC *v8;
  uint64_t vars0;

  v8 = *(JSC **)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28) + 56);
  *((_QWORD *)v8 + 5) = vars0;
  return JSC::materializeTargetCode(v8, *(JSC::VM **)(a1 + 32), a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::materializeTargetCode(JSC *this, JSC::VM *a2, JSC::JSFunction *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v10;
  unsigned int *v11;
  int v12;
  unsigned int v13;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;

  v8 = a2;
  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 1) != 0)
    v10 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 48);
  v11 = (unsigned int *)((char *)this + 80);
  v12 = *((_DWORD *)this + 20);
  if ((v12 & 0x20) == 0)
  {
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 | 0x20, v11));
  }
  v23 = 0;
  if (*(_BYTE *)(v10 + 5) == 8)
    goto LABEL_12;
  if (*(_QWORD *)(v10 + 8)
     ? WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance
     : 0)
  {
    v23 = *(_QWORD *)(v10 + 96);
  }
  else
  {
    JSC::ScriptExecutable::prepareForExecutionImpl(v10, this, a2, *((_QWORD *)a2 + 2), 0, &v23);
  }
  if (*v11 && JSC::VM::hasExceptionsAfterHandlingTraps(this, (uint64_t)a2, (uint64_t)v8, a4, a5, a6, a7, a8))
  {
    v15 = 0;
  }
  else
  {
LABEL_12:
    v15 = *(_QWORD *)(v10 + 24);
    if (!v15)
    {
      v18 = *(unsigned int **)(v10 + 8);
      v19 = v18 + 2;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
      v15 = (*(uint64_t (**)(unsigned int *, uint64_t, JSC::VM *))(*(_QWORD *)v18 + 40))(v18, 1, v8);
      do
      {
        v21 = __ldaxr(v19);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v19));
      if (!v22)
      {
        atomic_store(1u, v18 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 32))(v18);
      }
      *(_QWORD *)(v10 + 24) = v15;
    }
  }
  if ((v12 & 0x20) == 0)
  {
    do
      v16 = __ldaxr(v11);
    while (__stlxr(v16 & 0xFFFFFFDF, v11));
  }
  return v15;
}

uint64_t operationMaterializeRemoteFunctionTargetCode(uint64_t a1, uint64_t a2, JSC::JSFunction *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC *v8;
  uint64_t vars0;

  v8 = *(JSC **)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28) + 56);
  *((_QWORD *)v8 + 5) = vars0;
  return JSC::materializeTargetCode(v8, *(JSC::VM **)(a1 + 32), a3, a4, a5, a6, a7, a8);
}

uint64_t operationThrowRemoteFunctionException(_DWORD *a1, WTF::AtomStringImpl *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGlobalObject *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  int *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  JSC::VM *var28[6];

  v9 = *(JSC::JSGlobalObject **)(16 * (*a1 & 0xFFFFFFFE) + 0x28);
  v10 = *((_QWORD *)v9 + 7);
  *(JSC::VM **)(v10 + 40) = var28[5];
  var28[0] = (JSC::VM *)v10;
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x1987619C8);
  }
  if (*(_QWORD *)(v10 + 24) == v11)
    return 0;
  v12 = *(_QWORD *)(v11 + 8);
  v31 = v12;
  *(_QWORD *)(v10 + 16) = 0;
  v13 = (unsigned int *)(v10 + 80);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 & 0xFFFFFFEF, v13));
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v15 = *(int **)(v12 + 8);
    if ((v15 & 1) != 0)
    {
      v15 = *JSC::JSRopeString::resolveRope(v12, v9, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (!v15)
        goto LABEL_10;
    }
    else if (!v15)
    {
LABEL_10:
      v30 = (WTF::StringImpl *)v15;
      goto LABEL_11;
    }
    *v15 += 2;
    goto LABEL_10;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v31, v9, a3, a4, a5, a6, a7, a8, (int **)&v30);
LABEL_11:
  v16 = *(_QWORD *)(v10 + 16);
  if (v16 && *(_QWORD *)(v10 + 24) == v16)
  {
    v19 = 0;
  }
  else
  {
    *(_QWORD *)(v10 + 16) = 0;
    do
      v17 = __ldaxr(v13);
    while (__stlxr(v17 & 0xFFFFFFEF, v13));
    if (v30 && *((_DWORD *)v30 + 1))
      v18 = JSC::throwTypeError((unint64_t)v9, var28, &v30);
    else
      v18 = JSC::throwTypeError(v9, var28);
    v19 = v18;
  }
  v20 = v30;
  v30 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  return v19;
}

uint64_t operationThrowIteratorResultIsNotObject(unint64_t a1)
{
  uint64_t v1;
  JSC::VM *var18[4];

  v1 = *(_QWORD *)(a1 + 56);
  *(JSC::VM **)(v1 + 40) = var18[3];
  var18[0] = (JSC::VM *)v1;
  JSC::throwTypeError(a1, var18, (uint64_t)"Iterator result interface is not an object.", 44);
  return *(_QWORD *)(v1 + 16);
}

uint64_t operationTryGetByIdGaveUp(unint64_t this, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  _WORD *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t result;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned __int16 *v55;
  uint64_t v56;
  unsigned int v57;
  BOOL v58;
  unsigned int *v59;
  uint64_t v60;
  unint64_t v61;
  JSC::VM *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _WORD *v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  JSC::VM *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  int v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  unsigned __int16 *v110;
  uint64_t v111;
  unsigned int v112;
  unint64_t v113;
  JSC::VM *v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  unsigned int v130;
  uint64_t v131;
  unsigned __int8 *v132;
  int v133;
  double v134;
  const unsigned __int8 *v135;
  unsigned int v136;
  uint64_t v137;
  unsigned __int8 *v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int *v141;
  uint64_t v142;
  uint64_t Index;
  int v144;
  int v145;
  _WORD *v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  unsigned __int16 *v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  unsigned __int8 *v158;
  unsigned int v159;
  uint64_t v160;
  JSC::JSString *v161;
  unsigned int v162;
  uint64_t v163;
  unsigned __int8 *v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  int v172;
  char v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  _BYTE v179[124];
  uint64_t v180;
  uint64_t vars0;

  v9 = this;
  v180 = *MEMORY[0x1E0C80C00];
  v10 = *(JSC::JSGlobalObject **)(a2 + 56);
  v11 = *((_QWORD *)v10 + 7);
  v12 = vars0;
  *(_QWORD *)(v11 + 40) = vars0;
  *(_DWORD *)(v12 + 36) = *(_DWORD *)(a2 + 112);
  *(_WORD *)(a2 + 129) |= 2u;
  v13 = *(_QWORD *)(a2 + 16);
  v177 = 0;
  v178 = this;
  a9.i64[0] = 0xFFFFFFFF00000000;
  v168 = 0xFFFFFFFF00000000;
  v170 = 0;
  v171 = 0;
  v169 = this;
  v172 = 196608;
  v173 = 0;
  v176 = 0;
  v174 = v11;
  ++*(_DWORD *)(v11 + 4);
  v175 = 1;
  if (v13)
  {
    if ((v13 & 1) != 0)
      v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
    else
      v14 = *(_QWORD *)(v13 + 8);
  }
  else
  {
    v14 = 0;
  }
  if ((this & 0xFFFE000000000002) == 0)
  {
    v15 = *((_QWORD *)v10 + 7);
    v16 = *(unsigned __int8 *)(this + 5);
    if (v16 > 0x16)
      goto LABEL_6;
    if (v16 == 2)
    {
      if (*(_QWORD *)(*(_QWORD *)(v15 + 41952) + 1768) == v14)
      {
        v140 = *(_QWORD *)(this + 8);
        if ((v140 & 1) != 0)
          v141 = (unsigned int *)(this + 16);
        else
          v141 = (unsigned int *)(v140 + 4);
        v142 = *v141;
        if ((v142 & 0x80000000) != 0)
          Index = COERCE__INT64((double)v142) + 0x2000000000000;
        else
          Index = v142 | 0xFFFE000000000000;
        v144 = 14;
LABEL_295:
        v166 = Index;
        LODWORD(v168) = v144;
        v170 = 0;
        BYTE1(v172) = 1;
        if (*(_DWORD *)(v15 + 80))
          JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        goto LABEL_50;
      }
      if (!v14)
        goto LABEL_306;
      v145 = *(_DWORD *)(v14 + 16);
      if ((v145 & 0x20) != 0)
        goto LABEL_306;
      v146 = *(_WORD **)(v14 + 8);
      v147 = *(unsigned int *)(v14 + 4);
      if ((v145 & 4) == 0)
      {
        if ((_DWORD)v147)
        {
          v148 = (unsigned __int16)*v146 - 48;
          if (v148 <= 9 && (*v146 != 48 || v147 <= 1))
          {
            v153 = v146 + 1;
            v154 = v147 - 1;
            while (v154)
            {
              if (v148 > 0x19999999)
                goto LABEL_302;
              v155 = *v153 - 48;
              if (v155 > 9)
                goto LABEL_302;
              v149 = 0;
              LOBYTE(v147) = 0;
              v150 = 0;
              v58 = __CFADD__(v155, 10 * v148);
              v148 = v155 + 10 * v148;
              ++v153;
              --v154;
              if (v58)
                goto LABEL_304;
            }
            v150 = v148 & 0xFFFFFF00;
            v149 = 0x100000000;
            if (v148 == -1)
            {
              v149 = 0;
              LOBYTE(v147) = 0;
            }
            else
            {
              LOBYTE(v147) = v148;
            }
            if (v148 == -1)
              v150 = 0;
            goto LABEL_304;
          }
LABEL_302:
          v149 = 0;
          LOBYTE(v147) = 0;
        }
        else
        {
          v149 = 0;
        }
        v150 = 0;
LABEL_304:
        v151 = v147;
LABEL_305:
        if ((v149 & 0x100000000) != 0)
        {
          a3 = v150 | v151;
          v160 = *(_QWORD *)(this + 8);
          v161 = (JSC::JSString *)((v160 & 1) != 0 ? this + 16 : v160 + 4);
          if (*(_DWORD *)v161 > a3)
          {
            Index = JSC::JSString::getIndex((JSC::JSString *)this, v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
            if (!*(_DWORD *)(v15 + 80)
              || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
            {
              v144 = 10;
              goto LABEL_295;
            }
          }
        }
LABEL_306:
        if (*(_DWORD *)(v15 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
        {
          goto LABEL_50;
        }
        goto LABEL_307;
      }
      if ((_DWORD)v147)
      {
        v162 = *(unsigned __int8 *)v146 - 48;
        if (v162 <= 9 && (v147 < 2 || *(_BYTE *)v146 != 48))
        {
          v163 = v147 - 1;
          v164 = (unsigned __int8 *)v146 + 1;
          while (v163)
          {
            if (v162 > 0x19999999)
              goto LABEL_388;
            v165 = *v164 - 48;
            if (v165 > 9)
              goto LABEL_388;
            v151 = 0;
            LOBYTE(v147) = 0;
            v149 = 0;
            v58 = __CFADD__(v165, 10 * v162);
            v162 = v165 + 10 * v162;
            --v163;
            ++v164;
            if (v58)
              goto LABEL_390;
          }
          if (v162 == -1)
            v151 = 0;
          else
            v151 = v162 & 0xFFFFFF00;
          if (v162 == -1)
            LOBYTE(v147) = 0;
          else
            LOBYTE(v147) = v162;
          if (v162 == -1)
            v149 = 0;
          else
            v149 = 0x100000000;
          goto LABEL_390;
        }
LABEL_388:
        v151 = 0;
        LOBYTE(v147) = 0;
      }
      else
      {
        v151 = 0;
      }
      v149 = 0;
LABEL_390:
      v150 = v147;
      goto LABEL_305;
    }
  }
LABEL_307:
  v152 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v178, (unint64_t)v10);
  if (!v152)
    goto LABEL_50;
  v9 = v152;
  v15 = *((_QWORD *)v10 + 7);
LABEL_6:
  v17 = (_BYTE *)(v9 + 6);
  v18 = v14 >> 4;
  v19 = v9;
  if ((*(_BYTE *)(v9 + 6) & 8) == 0)
  {
    v20 = v9;
    do
    {
      v21 = *(_DWORD *)v20 & 0xFFFFFFFE;
      v22 = 16 * v21;
      if (!(_DWORD)v18 || (v18 & ~*(_DWORD *)(16 * v21 + 0x20)) != 0)
        goto LABEL_19;
      v23 = *(_QWORD *)(16 * v21 + 0x58);
      if (!v23)
      {
        v34 = *(_QWORD *)(16 * v21 + 0x40);
        if (!v34 || *(_BYTE *)(v34 + 5) != 1 && *(_DWORD *)(v34 + 80) < 2u)
          goto LABEL_19;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v22, (JSC::VM *)v15, 1, a4, a5, a6, a7, a8);
        if (!v23)
          goto LABEL_19;
      }
      if (!*(_DWORD *)(v23 + 24))
        goto LABEL_19;
      v24 = *(_QWORD *)(v23 + 16);
      v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
      v26 = *(unsigned int *)(v23 + 8);
      v27 = *(_DWORD *)(v14 + 16);
      if ((v24 & 1) != 0)
      {
        if ((v27 & 0x20) != 0)
          v27 = *(_DWORD *)(v14 + 32);
        v28 = *(_DWORD *)(v23 + 12);
        v29 = (v27 >> 8) & *(_QWORD *)&v28;
        v30 = *(unsigned __int8 *)(v25 + v29);
        if (!*(_BYTE *)(v25 + v29))
          goto LABEL_19;
        v31 = v25 + v26;
        v32 = 1;
        while (1)
        {
          v33 = *(_QWORD *)(v31 + 8 * (v30 - 1));
          if (v14 == (v33 & 0xFFFFFFFFFFFFLL))
            break;
          v29 = ((_DWORD)v29 + v32) & v28;
          v30 = *(unsigned __int8 *)(v25 + v29);
          ++v32;
          if (!*(_BYTE *)(v25 + v29))
            goto LABEL_19;
        }
        a6 = (v33 >> 16) & 0xFF00000000 | HIBYTE(v33);
      }
      else
      {
        if ((v27 & 0x20) != 0)
          v27 = *(_DWORD *)(v14 + 32);
        v35 = *(_DWORD *)(v23 + 12);
        v36 = v35 & (v27 >> 8);
        v37 = *(_DWORD *)(v25 + 4 * v36);
        if (!v37)
          goto LABEL_19;
        v38 = v25 + 4 * v26;
        v39 = 1;
        while (1)
        {
          v40 = (v37 - 1);
          if (v14 == *(_QWORD *)(v38 + 16 * v40))
            break;
          v36 = (v36 + v39) & v35;
          v37 = *(_DWORD *)(v25 + 4 * v36);
          ++v39;
          if (!v37)
            goto LABEL_19;
        }
        a6 = *(unsigned int *)(v38 + 16 * v40 + 8) | ((unint64_t)*(unsigned __int8 *)(v38 + 16 * v40 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        v50 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v51 = v20 + 16;
          v52 = a6 << 32;
        }
        else
        {
          v51 = *(_QWORD *)(v20 + 8) - 8;
          v52 = 0x3F00000000 - (a6 << 32);
        }
        v53 = *(_QWORD *)(v51 + (v52 >> 29));
        if ((v53 & 0xFFFE000000000002) == 0)
        {
          v54 = *(unsigned __int8 *)(v53 + 5);
          if (v54 != 5)
          {
            if (v54 != 6)
              goto LABEL_66;
            v74 = *(_DWORD *)(v22 + 16) & 3;
            v75 = *(_QWORD *)(v53 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v53 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v77 = *(_QWORD *)(v53 + 24);
              v76 = *(_QWORD *)(v53 + 32);
              v166 = *(_QWORD *)(v53 + 8);
              v167 = v75;
              LODWORD(v168) = HIDWORD(a6);
              v170 = v20;
              goto LABEL_105;
            }
            v166 = *(_QWORD *)(v53 + 8);
            v167 = v75;
            LODWORD(v168) = HIDWORD(a6);
            v170 = v20;
LABEL_177:
            BYTE1(v172) = 3;
            if (v74 != 2)
              LOBYTE(v172) = 1;
            goto LABEL_50;
          }
          v59 = (unsigned int *)v20;
          v60 = v15;
LABEL_87:
          JSC::JSObject::fillGetterPropertySlot(v59, v60, (uint64_t)&v166, v53, v50, a6);
          goto LABEL_50;
        }
LABEL_66:
        v166 = v53;
        v170 = v20;
LABEL_67:
        v168 = __PAIR64__(a6, v50);
        LOWORD(v172) = 257;
        goto LABEL_50;
      }
LABEL_19:
      if ((*v17 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v20, (JSC::VM *)v15, v14, (uint64_t)&v166) & 1) != 0)
      {
        goto LABEL_50;
      }
      v19 = *(_QWORD *)(v22 + 48);
      if (!v19)
        v19 = *(_QWORD *)(v20 + 16);
      if ((v19 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v19 + 5) < 0x17u)
      {
        if (!v14)
          goto LABEL_50;
        v41 = *(_DWORD *)(v14 + 16);
        if ((v41 & 0x20) != 0)
          goto LABEL_50;
        v42 = *(_WORD **)(v14 + 8);
        v43 = *(unsigned int *)(v14 + 4);
        if ((v41 & 4) == 0)
        {
          if ((_DWORD)v43)
          {
            v44 = (unsigned __int16)*v42 - 48;
            if (v44 <= 9 && (*v42 != 48 || v43 <= 1))
            {
              v55 = v42 + 1;
              v56 = v43 - 1;
              while (v56)
              {
                if (v44 > 0x19999999)
                  goto LABEL_46;
                v57 = *v55 - 48;
                if (v57 > 9)
                  goto LABEL_46;
                v45 = 0;
                LOBYTE(v43) = 0;
                v46 = 0;
                v58 = __CFADD__(v57, 10 * v44);
                v44 = v57 + 10 * v44;
                ++v55;
                --v56;
                if (v58)
                  goto LABEL_48;
              }
              v46 = v44 & 0xFFFFFF00;
              v45 = 0x100000000;
              if (v44 == -1)
              {
                v45 = 0;
                LOBYTE(v43) = 0;
              }
              else
              {
                LOBYTE(v43) = v44;
              }
              if (v44 == -1)
                v46 = 0;
LABEL_48:
              v47 = v43;
LABEL_49:
              if ((v45 & 0x100000000) == 0)
                goto LABEL_50;
              v61 = v46 | v47;
              v62 = (JSC::VM *)*((_QWORD *)v10 + 7);
              while (2)
              {
                v63 = 16 * (*(_DWORD *)v9 & 0xFFFFFFFE);
                v64 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v63 + 0x4C) + 0x70))(v9, v10, v61, &v166);
                if (*((_DWORD *)v62 + 20))
                {
                  if (((JSC::VM::hasExceptionsAfterHandlingTraps(v62, v65, v66, v67, v68, v69, v70, v71) | v64) & 1) != 0)
                    goto LABEL_50;
                }
                else if ((v64 & 1) != 0)
                {
                  goto LABEL_50;
                }
                if (BYTE2(v172) == 3)
                {
                  if (v173)
                    goto LABEL_331;
                  v72 = *(unsigned __int8 *)(v9 + 5);
                  if (v72 != 61)
                  {
LABEL_95:
                    if ((v72 - 39) <= 0xA
                      && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v9, v65, v66, v67, v68, v69, v70, v71) <= v61)
                    {
                      goto LABEL_50;
                    }
                  }
                }
                else
                {
                  v72 = *(unsigned __int8 *)(v9 + 5);
                  if (v72 != 61)
                    goto LABEL_95;
                  if (BYTE2(v172) == 1)
                    goto LABEL_50;
                }
                if ((*(_WORD *)(v63 + 12) & 0x800) == 0 || BYTE2(v172) == 3)
                {
                  v73 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
                  if (!v73)
                    v73 = *(_QWORD *)(v9 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v73 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0xB0))(v9, v10);
                  }
                  else
                  {
                    v73 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
                    if (!v73)
                      v73 = *(_QWORD *)(v9 + 16);
                  }
                  if (*((_DWORD *)v62 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v62, v65, v66, v67, v68, v69, v70, v71))
                  {
                    goto LABEL_50;
                  }
                }
                if ((v73 & 0xFFFE000000000002) != 0)
                  goto LABEL_50;
                v9 = v73;
                if (*(unsigned __int8 *)(v73 + 5) <= 0x16u)
                  goto LABEL_50;
                continue;
              }
            }
LABEL_46:
            v45 = 0;
            LOBYTE(v43) = 0;
          }
          else
          {
            v45 = 0;
          }
          v46 = 0;
          goto LABEL_48;
        }
        if ((_DWORD)v43)
        {
          v136 = *(unsigned __int8 *)v42 - 48;
          if (v136 <= 9 && (v43 < 2 || *(_BYTE *)v42 != 48))
          {
            v137 = v43 - 1;
            v138 = (unsigned __int8 *)v42 + 1;
            while (v137)
            {
              if (v136 > 0x19999999)
                goto LABEL_247;
              v139 = *v138 - 48;
              if (v139 > 9)
                goto LABEL_247;
              v47 = 0;
              LOBYTE(v43) = 0;
              v45 = 0;
              v58 = __CFADD__(v139, 10 * v136);
              v136 = v139 + 10 * v136;
              --v137;
              ++v138;
              if (v58)
                goto LABEL_249;
            }
            if (v136 == -1)
              v47 = 0;
            else
              v47 = v136 & 0xFFFFFF00;
            if (v136 == -1)
              LOBYTE(v43) = 0;
            else
              LOBYTE(v43) = v136;
            if (v136 == -1)
              v45 = 0;
            else
              v45 = 0x100000000;
            goto LABEL_249;
          }
LABEL_247:
          v47 = 0;
          LOBYTE(v43) = 0;
        }
        else
        {
          v47 = 0;
        }
        v45 = 0;
LABEL_249:
        v46 = v43;
        goto LABEL_49;
      }
      v17 = (_BYTE *)(v19 + 6);
      v20 = v19;
    }
    while ((*(_BYTE *)(v19 + 6) & 8) == 0);
  }
  if (!v14)
    goto LABEL_118;
  v78 = *(_DWORD *)(v14 + 16);
  if ((v78 & 0x20) != 0)
    goto LABEL_118;
  v79 = *(_WORD **)(v14 + 8);
  v80 = *(unsigned int *)(v14 + 4);
  if ((v78 & 4) == 0)
  {
    if ((_DWORD)v80)
    {
      v81 = (unsigned __int16)*v79 - 48;
      if (v81 <= 9 && (*v79 != 48 || v80 <= 1))
      {
        v110 = v79 + 1;
        v111 = v80 - 1;
        while (v111)
        {
          if (v81 > 0x19999999)
            goto LABEL_114;
          v112 = *v110 - 48;
          if (v112 > 9)
            goto LABEL_114;
          v82 = 0;
          LOBYTE(v80) = 0;
          v83 = 0;
          v58 = __CFADD__(v112, 10 * v81);
          v81 = v112 + 10 * v81;
          ++v110;
          --v111;
          if (v58)
            goto LABEL_116;
        }
        v83 = v81 & 0xFFFFFF00;
        v82 = 0x100000000;
        if (v81 == -1)
        {
          v82 = 0;
          LOBYTE(v80) = 0;
        }
        else
        {
          LOBYTE(v80) = v81;
        }
        if (v81 == -1)
          v83 = 0;
        goto LABEL_116;
      }
LABEL_114:
      v82 = 0;
      LOBYTE(v80) = 0;
    }
    else
    {
      v82 = 0;
    }
    v83 = 0;
LABEL_116:
    v84 = v80;
    goto LABEL_117;
  }
  if ((_DWORD)v80)
  {
    v156 = *(unsigned __int8 *)v79 - 48;
    if (v156 <= 9 && (v80 < 2 || *(_BYTE *)v79 != 48))
    {
      v157 = v80 - 1;
      v158 = (unsigned __int8 *)v79 + 1;
      while (v157)
      {
        if (v156 > 0x19999999)
          goto LABEL_325;
        v159 = *v158 - 48;
        if (v159 > 9)
          goto LABEL_325;
        v84 = 0;
        LOBYTE(v80) = 0;
        v82 = 0;
        v58 = __CFADD__(v159, 10 * v156);
        v156 = v159 + 10 * v156;
        --v157;
        ++v158;
        if (v58)
          goto LABEL_327;
      }
      if (v156 == -1)
        v84 = 0;
      else
        v84 = v156 & 0xFFFFFF00;
      if (v156 == -1)
        LOBYTE(v80) = 0;
      else
        LOBYTE(v80) = v156;
      if (v156 == -1)
        v82 = 0;
      else
        v82 = 0x100000000;
      goto LABEL_327;
    }
LABEL_325:
    v84 = 0;
    LOBYTE(v80) = 0;
  }
  else
  {
    v84 = 0;
  }
  v82 = 0;
LABEL_327:
  v83 = v80;
LABEL_117:
  if ((v82 & 0x100000000) != 0)
  {
    v113 = v83 | v84;
    v114 = (JSC::VM *)*((_QWORD *)v10 + 7);
    while (1)
    {
      v115 = 16 * (*(_DWORD *)v9 & 0xFFFFFFFE);
      v116 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v115 + 0x4C) + 0x70))(v9, v10, v113, &v166);
      if (*((_DWORD *)v114 + 20))
      {
        if (((JSC::VM::hasExceptionsAfterHandlingTraps(v114, v117, v118, v119, v120, v121, v122, v123) | v116) & 1) != 0)
          goto LABEL_50;
      }
      else if ((v116 & 1) != 0)
      {
        goto LABEL_50;
      }
      if (BYTE2(v172) != 3)
        break;
      if (v173)
        goto LABEL_331;
      v124 = *(unsigned __int8 *)(v9 + 5);
      if (v124 != 61)
        goto LABEL_186;
LABEL_187:
      if ((*(_WORD *)(v115 + 12) & 0x800) == 0 || BYTE2(v172) == 3)
      {
        v125 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
        if (!v125)
          v125 = *(_QWORD *)(v9 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v125 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                    * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)
                                                                                    + 0xB0))(v9, v10);
        }
        else
        {
          v125 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
          if (!v125)
            v125 = *(_QWORD *)(v9 + 16);
        }
        if (*((_DWORD *)v114 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v114, v117, v118, v119, v120, v121, v122, v123))
        {
          goto LABEL_50;
        }
      }
      if ((v125 & 0xFFFE000000000002) == 0)
      {
        v9 = v125;
        if (*(unsigned __int8 *)(v125 + 5) > 0x16u)
          continue;
      }
      goto LABEL_50;
    }
    v124 = *(unsigned __int8 *)(v9 + 5);
    if (v124 == 61)
    {
      if (BYTE2(v172) == 1)
        goto LABEL_50;
      goto LABEL_187;
    }
LABEL_186:
    if ((v124 - 39) <= 0xA
      && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v9, v117, v118, v119, v120, v121, v122, v123) <= v113)
    {
      goto LABEL_50;
    }
    goto LABEL_187;
  }
LABEL_118:
  v85 = (JSC::VM *)*((_QWORD *)v10 + 7);
  while (1)
  {
    v86 = 16 * (*(_DWORD *)v19 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v19 + 6) & 8) == 0)
      break;
    v128 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) + 0x68))(v19, v10, v14, &v166);
    if (*((_DWORD *)v85 + 20))
    {
      if (((JSC::VM::hasExceptionsAfterHandlingTraps(v85, a2, a3, (uint64_t)a4, a5, a6, a7, a8) | v128) & 1) != 0)
        goto LABEL_50;
    }
    else if ((v128 & 1) != 0)
    {
      goto LABEL_50;
    }
    if (BYTE2(v172) == 3)
    {
      if (v173)
        goto LABEL_331;
      v129 = *(unsigned __int8 *)(v19 + 5);
      if (v129 != 61)
      {
LABEL_214:
        if (!v14)
          goto LABEL_132;
        if ((v129 - 50) < 0xFFFFFFF5)
          goto LABEL_132;
        v130 = *(_DWORD *)(v14 + 16);
        if ((v130 & 0x20) != 0)
          goto LABEL_132;
        v131 = *(unsigned int *)(v14 + 4);
        if (!(_DWORD)v131)
          goto LABEL_132;
        v132 = *(unsigned __int8 **)(v14 + 8);
        if ((v130 & 4) == 0)
        {
          v133 = *(unsigned __int16 *)v132;
          if ((_DWORD)v131 == 1)
            goto LABEL_220;
          if (v133 == 45)
          {
            v133 = *((unsigned __int16 *)v132 + 1);
            goto LABEL_225;
          }
          if ((v133 - 48) >= 0xA && ((_DWORD)v131 != 8 || v133 != 73))
          {
LABEL_241:
            if ((_DWORD)v131 != 3 || v133 != 78)
              goto LABEL_132;
          }
LABEL_231:
          v15 = v15 & 0xFFFFFF0000000000 | v131 | ((unint64_t)((v130 >> 2) & 1) << 32);
          JSC::jsToNumber(v132, v15);
          WTF::numberToString(v179, v134);
          if (WTF::equal(v14, (unint64_t)v179, v135))
            goto LABEL_50;
          goto LABEL_132;
        }
        v133 = *v132;
        if ((_DWORD)v131 == 1)
        {
LABEL_220:
          if ((v133 - 48) < 0xA)
            goto LABEL_50;
          goto LABEL_132;
        }
        if (v133 == 45)
        {
          v133 = v132[1];
LABEL_225:
          if ((v133 - 48) < 0xA)
          {
            if ((_DWORD)v131 == 2)
              goto LABEL_50;
            goto LABEL_231;
          }
          if ((_DWORD)v131 != 9)
            goto LABEL_132;
        }
        else
        {
          if ((v133 - 48) < 0xA)
            goto LABEL_231;
          if ((_DWORD)v131 != 8)
            goto LABEL_241;
        }
        if (v133 != 73)
          goto LABEL_132;
        goto LABEL_231;
      }
    }
    else
    {
      v129 = *(unsigned __int8 *)(v19 + 5);
      if (v129 != 61)
        goto LABEL_214;
      if (BYTE2(v172) == 1)
        goto LABEL_50;
    }
LABEL_132:
    if ((*(_WORD *)(v86 + 12) & 0x800) == 0)
    {
      v98 = *(_DWORD *)v19;
LABEL_134:
      v99 = *(_QWORD *)(16 * (v98 & 0xFFFFFFFE) + 0x30);
      if (!v99)
        v99 = *(_QWORD *)(v19 + 16);
      goto LABEL_136;
    }
    v98 = *(_DWORD *)v19;
    if (BYTE2(v172) == 3)
      goto LABEL_134;
    v127 = 16 * (v98 & 0xFFFFFFFE);
    if ((*(_WORD *)(v127 + 12) & 0x800) != 0)
    {
      v99 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v127 + 76)
                                                                               + 0xB0))(v19, v10);
    }
    else
    {
      v99 = *(_QWORD *)(v127 + 48);
      if (!v99)
        v99 = *(_QWORD *)(v19 + 16);
    }
    if (*((_DWORD *)v85 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v85, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
      goto LABEL_50;
LABEL_136:
    if ((v99 & 0xFFFE000000000002) == 0)
    {
      v19 = v99;
      if (*(unsigned __int8 *)(v99 + 5) > 0x16u)
        continue;
    }
    goto LABEL_50;
  }
  if (!(_DWORD)v18 || (v18 & ~*(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_131;
  v87 = *(_QWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x58);
  if (!v87)
  {
    v100 = *(_QWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x40);
    if (!v100 || *(_BYTE *)(v100 + 5) != 1 && *(_DWORD *)(v100 + 80) < 2u)
      goto LABEL_131;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE)), v85, 1, a4, a5, a6, a7, a8);
    if (!v87)
      goto LABEL_131;
  }
  if (!*(_DWORD *)(v87 + 24))
    goto LABEL_131;
  v88 = *(_QWORD *)(v87 + 16);
  v89 = v88 & 0xFFFFFFFFFFFFFFFELL;
  v90 = *(unsigned int *)(v87 + 8);
  v91 = *(_DWORD *)(v14 + 16);
  if ((v88 & 1) != 0)
  {
    if ((v91 & 0x20) != 0)
      v91 = *(_DWORD *)(v14 + 32);
    v92 = *(_DWORD *)(v87 + 12);
    v93 = (v91 >> 8) & *(_QWORD *)&v92;
    v94 = *(unsigned __int8 *)(v89 + v93);
    if (*(_BYTE *)(v89 + v93))
    {
      v95 = v89 + v90;
      v96 = 1;
      while (1)
      {
        v97 = *(_QWORD *)(v95 + 8 * (v94 - 1));
        if (v14 == (v97 & 0xFFFFFFFFFFFFLL))
          break;
        v93 = ((_DWORD)v93 + v96) & v92;
        v94 = *(unsigned __int8 *)(v89 + v93);
        ++v96;
        if (!*(_BYTE *)(v89 + v93))
          goto LABEL_131;
      }
      a6 = (v97 >> 16) & 0xFF00000000 | HIBYTE(v97);
      goto LABEL_144;
    }
LABEL_131:
    if ((*(_BYTE *)(v19 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v19, v85, v14, (uint64_t)&v166) & 1) != 0)
    {
      goto LABEL_50;
    }
    goto LABEL_132;
  }
  if ((v91 & 0x20) != 0)
    v91 = *(_DWORD *)(v14 + 32);
  v101 = *(_DWORD *)(v87 + 12);
  v102 = v101 & (v91 >> 8);
  v103 = *(_DWORD *)(v89 + 4 * v102);
  if (!v103)
    goto LABEL_131;
  v104 = v89 + 4 * v90;
  v105 = 1;
  while (1)
  {
    v106 = (v103 - 1);
    if (v14 == *(_QWORD *)(v104 + 16 * v106))
      break;
    v102 = (v102 + v105) & v101;
    v103 = *(_DWORD *)(v89 + 4 * v102);
    ++v105;
    if (!v103)
      goto LABEL_131;
  }
  a6 = *(unsigned int *)(v104 + 16 * v106 + 8) | ((unint64_t)*(unsigned __int8 *)(v104 + 16 * v106 + 12) << 32);
LABEL_144:
  if ((_DWORD)a6 == -1)
    goto LABEL_131;
  v50 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v107 = v19 + 16;
    v108 = a6 << 32;
  }
  else
  {
    v107 = *(_QWORD *)(v19 + 8) - 8;
    v108 = 0x3F00000000 - (a6 << 32);
  }
  v53 = *(_QWORD *)(v107 + (v108 >> 29));
  if ((v53 & 0xFFFE000000000002) != 0)
  {
LABEL_159:
    v166 = v53;
    v170 = v19;
    goto LABEL_67;
  }
  v109 = *(unsigned __int8 *)(v53 + 5);
  if (v109 == 5)
  {
    v59 = (unsigned int *)v19;
    v60 = (uint64_t)v85;
    goto LABEL_87;
  }
  if (v109 != 6)
    goto LABEL_159;
  v74 = *(_DWORD *)(v86 + 16) & 3;
  v126 = *(_QWORD *)(v53 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v53 & 0xFFFFFFFE) + 0x4C)))
  {
    v166 = *(_QWORD *)(v53 + 8);
    v167 = v126;
    LODWORD(v168) = HIDWORD(a6);
    v170 = v19;
    goto LABEL_177;
  }
  v77 = *(_QWORD *)(v53 + 24);
  v76 = *(_QWORD *)(v53 + 32);
  v166 = *(_QWORD *)(v53 + 8);
  v167 = v126;
  LODWORD(v168) = HIDWORD(a6);
  v170 = v19;
LABEL_105:
  BYTE1(v172) = 3;
  if (v74 != 2)
    LOBYTE(v172) = 1;
  HIBYTE(v172) = 1;
  v176 = v77;
  v177 = v76;
LABEL_50:
  if (v173)
  {
LABEL_331:
    result = 2;
    goto LABEL_57;
  }
  if (BYTE1(v172))
  {
    if (BYTE1(v172) == 1 && v172 == 1
      || (result = 2, BYTE1(v172) == 2) && v172 == 1)
    {
      result = v166;
    }
  }
  else
  {
    result = 10;
  }
LABEL_57:
  if (v175)
  {
    v49 = *(_DWORD *)(v174 + 4);
    if (!v49)
    {
      __break(0xC471u);
      JUMPOUT(0x1987621F0);
    }
    *(_DWORD *)(v174 + 4) = v49 - 1;
  }
  return result;
}

uint64_t operationTryGetByIdGeneric(JSC::JSGlobalObject *a1, unint64_t this, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSString *v9;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  JSC::VM *v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  JSC::JSString *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  _WORD *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned __int16 *v50;
  uint64_t v51;
  unsigned int v52;
  BOOL v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  unsigned int *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  _BYTE *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned __int16 *v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  unint64_t v87;
  int v88;
  unsigned int v89;
  int v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  unsigned __int8 *v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  size_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  uint64_t v115;
  int v116;
  int v117;
  unsigned __int8 *v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  int v141;
  uint64_t v142;
  int v143;
  char v144;
  int v145;
  unint64_t v146;
  unint64_t v147;
  char v148;
  uint64_t v149;
  unsigned __int8 *v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int *v153;
  uint64_t v154;
  uint64_t Index;
  int v156;
  char v157;
  int v158;
  _WORD *v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  unsigned int v163;
  unsigned __int16 *v164;
  uint64_t v165;
  unsigned int v166;
  unsigned int v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  int v182;
  uint64_t v183;
  int v184;
  char v185;
  int v186;
  unint64_t v187;
  unint64_t v188;
  char v189;
  uint64_t v190;
  unsigned __int8 *v191;
  unsigned int v192;
  int v193;
  char v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  _DWORD *v198;
  int v199;
  uint64_t v200;
  unsigned __int8 *v201;
  unsigned int v202;
  unint64_t v203;
  char v204;
  uint64_t v205;
  int v206;
  JSC::VMTraps *v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  char v215;
  uint64_t v216;
  char v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  _BYTE __dst[8];
  char v222;
  char __s[3];
  _BYTE v224[39];
  uint64_t vars0;

  v9 = (JSC::JSString *)this;
  *(_QWORD *)&v224[23] = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v11 + 40) = vars0;
  v219 = 0;
  v220 = this;
  a9.i64[0] = 0xFFFFFFFF00000000;
  v210 = 0xFFFFFFFF00000000;
  v212 = 0;
  v213 = 0;
  v211 = this;
  v214 = 196608;
  v215 = 0;
  v218 = 0;
  v216 = v11;
  ++*(_DWORD *)(v11 + 4);
  v217 = 1;
  if (a3)
  {
    if ((a3 & 1) != 0)
      v12 = a3 & 0xFFFFFFFFFFFFFFFELL;
    else
      v12 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    v12 = 0;
  }
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_357;
  v13 = *(unsigned __int8 *)(this + 5);
  v14 = (JSC::VM *)v11;
  if (v13 > 0x16)
    goto LABEL_6;
  if (v13 != 2)
    goto LABEL_357;
  if (*(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1768) == v12)
  {
    v152 = *(_QWORD *)(this + 8);
    if ((v152 & 1) != 0)
      v153 = (unsigned int *)(this + 16);
    else
      v153 = (unsigned int *)(v152 + 4);
    v154 = *v153;
    if ((v154 & 0x80000000) != 0)
      Index = COERCE__INT64((double)v154) + 0x2000000000000;
    else
      Index = v154 | 0xFFFE000000000000;
    v156 = 14;
LABEL_333:
    v208 = Index;
    LODWORD(v210) = v156;
    v212 = 0;
    v157 = 1;
    BYTE1(v214) = 1;
    if (!*(_DWORD *)(v11 + 80))
      goto LABEL_73;
LABEL_428:
    v193 = *(_DWORD *)(v11 + 80);
    if ((v193 & 0x27) != 0 && (v193 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      v194 = 1;
    else
      v194 = v157;
    if ((v194 & 1) != 0)
      goto LABEL_73;
    goto LABEL_357;
  }
  if (!v12)
    goto LABEL_356;
  v158 = *(_DWORD *)(v12 + 16);
  if ((v158 & 0x20) != 0)
    goto LABEL_356;
  v159 = *(_WORD **)(v12 + 8);
  v160 = *(unsigned int *)(v12 + 4);
  if ((v158 & 4) == 0)
  {
    if ((_DWORD)v160)
    {
      v161 = (unsigned __int16)*v159 - 48;
      if (v161 <= 9 && (*v159 != 48 || v160 <= 1))
      {
        v164 = v159 + 1;
        v165 = v160 - 1;
        while (v165)
        {
          if (v161 > 0x19999999)
            goto LABEL_340;
          v166 = *v164 - 48;
          if (v166 > 9)
            goto LABEL_340;
          v162 = 0;
          LOBYTE(v160) = 0;
          v163 = 0;
          v53 = __CFADD__(v166, 10 * v161);
          v161 = v166 + 10 * v161;
          ++v164;
          --v165;
          if (v53)
            goto LABEL_355;
        }
        v163 = v161 & 0xFFFFFF00;
        v162 = 0x100000000;
        if (v161 == -1)
        {
          v162 = 0;
          LOBYTE(v160) = 0;
        }
        else
        {
          LOBYTE(v160) = v161;
        }
        if (v161 == -1)
          v163 = 0;
LABEL_355:
        v167 = v160;
        if ((v162 & 0x100000000) == 0)
          goto LABEL_356;
LABEL_445:
        a3 = v163 | v167;
        v197 = *(_QWORD *)(this + 8);
        if ((v197 & 1) != 0)
          v198 = (_DWORD *)(this + 16);
        else
          v198 = (_DWORD *)(v197 + 4);
        if (*v198 > a3)
        {
          Index = JSC::JSString::getIndex((JSC::JSString *)this, a1, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
          if (!*(_DWORD *)(v11 + 80))
            goto LABEL_450;
          v199 = *(_DWORD *)(v11 + 80);
          if ((v199 & 0x27) != 0 && (v199 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
          if (!*(_QWORD *)(v11 + 16))
          {
LABEL_450:
            v156 = 10;
            goto LABEL_333;
          }
        }
        goto LABEL_356;
      }
LABEL_340:
      v162 = 0;
      LOBYTE(v160) = 0;
    }
    else
    {
      v162 = 0;
    }
    v163 = 0;
    goto LABEL_355;
  }
  if (!(_DWORD)v160)
  {
    v167 = 0;
    goto LABEL_443;
  }
  v195 = *(unsigned __int8 *)v159 - 48;
  if (v195 > 9 || v160 >= 2 && *(_BYTE *)v159 == 48)
  {
LABEL_442:
    v167 = 0;
    LOBYTE(v160) = 0;
LABEL_443:
    v196 = 0;
    goto LABEL_444;
  }
  v200 = v160 - 1;
  v201 = (unsigned __int8 *)v159 + 1;
  while (v200)
  {
    if (v195 > 0x19999999)
      goto LABEL_442;
    v202 = *v201 - 48;
    if (v202 > 9)
      goto LABEL_442;
    v167 = 0;
    LOBYTE(v160) = 0;
    v196 = 0;
    v53 = __CFADD__(v202, 10 * v195);
    v195 = v202 + 10 * v195;
    --v200;
    ++v201;
    if (v53)
      goto LABEL_444;
  }
  if (v195 == -1)
    v167 = 0;
  else
    v167 = v195 & 0xFFFFFF00;
  if (v195 == -1)
    LOBYTE(v160) = 0;
  else
    LOBYTE(v160) = v195;
  if (v195 == -1)
    v196 = 0;
  else
    v196 = 0x100000000;
LABEL_444:
  v163 = v160;
  if ((v196 & 0x100000000) != 0)
    goto LABEL_445;
LABEL_356:
  if (*(_DWORD *)(v11 + 80))
  {
    v157 = 0;
    goto LABEL_428;
  }
LABEL_357:
  v168 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v220, (unint64_t)a1);
  if (!v168)
    goto LABEL_73;
  v9 = (JSC::JSString *)v168;
  v14 = (JSC::VM *)*((_QWORD *)a1 + 7);
LABEL_6:
  v15 = (char *)v9 + 6;
  v16 = v12 >> 4;
  v17 = (uint64_t)v9;
  if ((*((_BYTE *)v9 + 6) & 8) == 0)
  {
    v18 = v9;
    do
    {
      v19 = *(_DWORD *)v18 & 0xFFFFFFFE;
      v20 = 16 * v19;
      if (!(_DWORD)v16 || (v16 & ~*(_DWORD *)(16 * v19 + 0x20)) != 0)
        goto LABEL_35;
      v21 = *(_QWORD *)(16 * v19 + 0x58);
      if (!v21)
      {
        v22 = *(_QWORD *)(16 * v19 + 0x40);
        if (!v22 || *(_BYTE *)(v22 + 5) != 1 && *(_DWORD *)(v22 + 80) < 2u)
          goto LABEL_35;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v20, v14, 1, a4, a5, a6, a7, a8);
        if (!v21)
          goto LABEL_35;
      }
      if (!*(_DWORD *)(v21 + 24))
        goto LABEL_35;
      v23 = *(_QWORD *)(v21 + 16);
      v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
      v25 = *(unsigned int *)(v21 + 8);
      v26 = *(_DWORD *)(v12 + 16);
      if ((v23 & 1) != 0)
      {
        if ((v26 & 0x20) != 0)
          v26 = *(_DWORD *)(v12 + 32);
        v27 = *(_DWORD *)(v21 + 12);
        v28 = (v26 >> 8) & *(_QWORD *)&v27;
        v29 = *(unsigned __int8 *)(v24 + v28);
        if (!*(_BYTE *)(v24 + v28))
          goto LABEL_35;
        v30 = v24 + v25;
        v31 = 1;
        while (1)
        {
          v32 = *(_QWORD *)(v30 + 8 * (v29 - 1));
          if (v12 == (v32 & 0xFFFFFFFFFFFFLL))
            break;
          v28 = ((_DWORD)v28 + v31) & v27;
          v29 = *(unsigned __int8 *)(v24 + v28);
          ++v31;
          if (!*(_BYTE *)(v24 + v28))
            goto LABEL_35;
        }
        a6 = (v32 >> 16) & 0xFF00000000 | HIBYTE(v32);
      }
      else
      {
        if ((v26 & 0x20) != 0)
          v26 = *(_DWORD *)(v12 + 32);
        v33 = *(_DWORD *)(v21 + 12);
        v34 = v33 & (v26 >> 8);
        v35 = *(_DWORD *)(v24 + 4 * v34);
        if (!v35)
          goto LABEL_35;
        v36 = v24 + 4 * v25;
        v37 = 1;
        while (1)
        {
          v38 = (v35 - 1);
          if (v12 == *(_QWORD *)(v36 + 16 * v38))
            break;
          v34 = (v34 + v37) & v33;
          v35 = *(_DWORD *)(v24 + 4 * v34);
          ++v37;
          if (!v35)
            goto LABEL_35;
        }
        a6 = *(unsigned int *)(v36 + 16 * v38 + 8) | ((unint64_t)*(unsigned __int8 *)(v36 + 16 * v38 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        v45 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v46 = (uint64_t)v18 + 16;
          v47 = a6 << 32;
        }
        else
        {
          v46 = *((_QWORD *)v18 + 1) - 8;
          v47 = 0x3F00000000 - (a6 << 32);
        }
        v48 = *(_QWORD *)(v46 + (v47 >> 29));
        if ((v48 & 0xFFFE000000000002) == 0)
        {
          v49 = *(unsigned __int8 *)(v48 + 5);
          if (v49 != 5)
          {
            if (v49 != 6)
              goto LABEL_57;
            v60 = *(_DWORD *)(v20 + 16) & 3;
            v61 = *(_QWORD *)(v48 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v48 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v63 = *(_QWORD *)(v48 + 24);
              v62 = *(_QWORD *)(v48 + 32);
              v208 = *(_QWORD *)(v48 + 8);
              v209 = v61;
              LODWORD(v210) = HIDWORD(a6);
              v212 = (uint64_t)v18;
              goto LABEL_90;
            }
            v208 = *(_QWORD *)(v48 + 8);
            v209 = v61;
            LODWORD(v210) = HIDWORD(a6);
            v212 = (uint64_t)v18;
LABEL_245:
            BYTE1(v214) = 3;
            if (v60 != 2)
              LOBYTE(v214) = 1;
            goto LABEL_73;
          }
          v58 = (unsigned int *)v18;
          v59 = (uint64_t)v14;
LABEL_86:
          JSC::JSObject::fillGetterPropertySlot(v58, v59, (uint64_t)&v208, v48, v45, a6);
          goto LABEL_73;
        }
LABEL_57:
        v208 = v48;
        v212 = (uint64_t)v18;
LABEL_58:
        v210 = __PAIR64__(a6, v45);
        LOWORD(v214) = 257;
        goto LABEL_73;
      }
LABEL_35:
      if ((*v15 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v18, v14, v12, (uint64_t)&v208) & 1) != 0)
      {
        goto LABEL_73;
      }
      v17 = *(_QWORD *)(v20 + 48);
      if (!v17)
        v17 = *((_QWORD *)v18 + 2);
      if ((v17 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v17 + 5) < 0x17u)
      {
        if (!v12)
          goto LABEL_73;
        v39 = *(_DWORD *)(v12 + 16);
        if ((v39 & 0x20) != 0)
          goto LABEL_73;
        v40 = *(_WORD **)(v12 + 8);
        v41 = *(unsigned int *)(v12 + 4);
        if ((v39 & 4) == 0)
        {
          if ((_DWORD)v41)
          {
            v42 = (unsigned __int16)*v40 - 48;
            if (v42 <= 9 && (*v40 != 48 || v41 <= 1))
            {
              v50 = v40 + 1;
              v51 = v41 - 1;
              while (v51)
              {
                if (v42 > 0x19999999)
                  goto LABEL_49;
                v52 = *v50 - 48;
                if (v52 > 9)
                  goto LABEL_49;
                v43 = 0;
                LOBYTE(v41) = 0;
                v44 = 0;
                v53 = __CFADD__(v52, 10 * v42);
                v42 = v52 + 10 * v42;
                ++v50;
                --v51;
                if (v53)
                  goto LABEL_72;
              }
              v44 = v42 & 0xFFFFFF00;
              v43 = 0x100000000;
              if (v42 == -1)
              {
                v43 = 0;
                LOBYTE(v41) = 0;
              }
              else
              {
                LOBYTE(v41) = v42;
              }
              if (v42 == -1)
                v44 = 0;
LABEL_72:
              v54 = v41;
              if ((v43 & 0x100000000) == 0)
                goto LABEL_73;
LABEL_264:
              v130 = v44 | v54;
              v131 = *((_QWORD *)a1 + 7);
              v55 = 2;
              while (2)
              {
                v132 = 16 * (*(_DWORD *)v9 & 0xFFFFFFFE);
                v133 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v132 + 0x4C) + 0x70))(v9, a1, v130, &v208);
                v140 = v133;
                if (*(_DWORD *)(v131 + 80))
                {
                  v143 = *(_DWORD *)(v131 + 80);
                  if ((v143 & 0x27) != 0 && (v143 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v131 + 64), 7u, v134, v135, v136, v137, v138, v139);
                  if (*(_QWORD *)(v131 + 16))
                    v144 = 1;
                  else
                    v144 = v140;
                  if ((v144 & 1) != 0)
                    goto LABEL_73;
                }
                else if ((v133 & 1) != 0)
                {
                  goto LABEL_73;
                }
                if (BYTE2(v214) == 3)
                {
                  if (v215)
                    goto LABEL_80;
                  v141 = *((unsigned __int8 *)v9 + 5);
                  if (v141 != 61)
                  {
LABEL_269:
                    if ((v141 - 39) <= 0xA)
                    {
                      if ((*((_BYTE *)v9 + 40) & 7u) > 2)
                      {
                        __dst[0] = 0;
                        v222 = 0;
                        v147 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v9, (uint64_t)__dst, v134, v135, v136, v137, v138, v139);
                        v146 = v148 ? v147 : 0;
                      }
                      else
                      {
                        v146 = *((_QWORD *)v9 + 3);
                      }
                      if (v146 <= v130)
                        goto LABEL_73;
                    }
                  }
                }
                else
                {
                  v141 = *((unsigned __int8 *)v9 + 5);
                  if (v141 != 61)
                    goto LABEL_269;
                  if (BYTE2(v214) == 1)
                    goto LABEL_73;
                }
                if ((*(_WORD *)(v132 + 12) & 0x800) == 0 || BYTE2(v214) == 3)
                {
                  v142 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
                  if (!v142)
                    v142 = *((_QWORD *)v9 + 2);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v142 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0xB0))(v9, a1);
                  }
                  else
                  {
                    v142 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
                    if (!v142)
                      v142 = *((_QWORD *)v9 + 2);
                  }
                  if (*(_DWORD *)(v131 + 80))
                  {
                    v145 = *(_DWORD *)(v131 + 80);
                    if ((v145 & 0x27) != 0 && (v145 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v131 + 64), 7u, v134, v135, v136, v137, v138, v139);
                    if (*(_QWORD *)(v131 + 16))
                      goto LABEL_73;
                  }
                }
                if ((v142 & 0xFFFE000000000002) != 0)
                  goto LABEL_73;
                v9 = (JSC::JSString *)v142;
                if (*(unsigned __int8 *)(v142 + 5) <= 0x16u)
                  goto LABEL_73;
                continue;
              }
            }
LABEL_49:
            v43 = 0;
            LOBYTE(v41) = 0;
          }
          else
          {
            v43 = 0;
          }
          v44 = 0;
          goto LABEL_72;
        }
        if ((_DWORD)v41)
        {
          v128 = *(unsigned __int8 *)v40 - 48;
          if (v128 <= 9 && (v41 < 2 || *(_BYTE *)v40 != 48))
          {
            v149 = v41 - 1;
            v150 = (unsigned __int8 *)v40 + 1;
            while (v149)
            {
              if (v128 > 0x19999999)
                goto LABEL_261;
              v151 = *v150 - 48;
              if (v151 > 9)
                goto LABEL_261;
              v54 = 0;
              LOBYTE(v41) = 0;
              v129 = 0;
              v53 = __CFADD__(v151, 10 * v128);
              v128 = v151 + 10 * v128;
              --v149;
              ++v150;
              if (v53)
                goto LABEL_263;
            }
            if (v128 == -1)
              v54 = 0;
            else
              v54 = v128 & 0xFFFFFF00;
            if (v128 == -1)
              LOBYTE(v41) = 0;
            else
              LOBYTE(v41) = v128;
            if (v128 == -1)
              v129 = 0;
            else
              v129 = 0x100000000;
            goto LABEL_263;
          }
LABEL_261:
          v54 = 0;
          LOBYTE(v41) = 0;
        }
        else
        {
          v54 = 0;
        }
        v129 = 0;
LABEL_263:
        v44 = v41;
        if ((v129 & 0x100000000) == 0)
          goto LABEL_73;
        goto LABEL_264;
      }
      v15 = (_BYTE *)(v17 + 6);
      v18 = (JSC::JSString *)v17;
    }
    while ((*(_BYTE *)(v17 + 6) & 8) == 0);
  }
  if (!v12)
    goto LABEL_116;
  v64 = *(_DWORD *)(v12 + 16);
  if ((v64 & 0x20) != 0)
    goto LABEL_116;
  v65 = *(_BYTE **)(v12 + 8);
  v66 = *(unsigned int *)(v12 + 4);
  if ((v64 & 4) != 0)
  {
    if ((_DWORD)v66)
    {
      v169 = *v65 - 48;
      if (v169 <= 9 && (v66 < 2 || *v65 != 48))
      {
        v190 = v66 - 1;
        v191 = v65 + 1;
        while (v190)
        {
          if (v169 > 0x19999999)
            goto LABEL_361;
          v192 = *v191 - 48;
          if (v192 > 9)
            goto LABEL_361;
          v73 = 0;
          LOBYTE(v66) = 0;
          v170 = 0;
          v53 = __CFADD__(v192, 10 * v169);
          v169 = v192 + 10 * v169;
          --v190;
          ++v191;
          if (v53)
            goto LABEL_363;
        }
        if (v169 == -1)
          v73 = 0;
        else
          v73 = v169 & 0xFFFFFF00;
        if (v169 == -1)
          LOBYTE(v66) = 0;
        else
          LOBYTE(v66) = v169;
        if (v169 == -1)
          v170 = 0;
        else
          v170 = 0x100000000;
LABEL_363:
        v69 = v66;
        if ((v170 & 0x100000000) == 0)
          goto LABEL_116;
        goto LABEL_364;
      }
LABEL_361:
      v73 = 0;
      LOBYTE(v66) = 0;
    }
    else
    {
      v73 = 0;
    }
    v170 = 0;
    goto LABEL_363;
  }
  if (!(_DWORD)v66)
  {
    v68 = 0;
    goto LABEL_100;
  }
  v67 = *(unsigned __int16 *)v65 - 48;
  if (v67 > 9 || *(_WORD *)v65 == 48 && v66 > 1)
  {
LABEL_99:
    v68 = 0;
    LOBYTE(v66) = 0;
LABEL_100:
    v69 = 0;
    goto LABEL_115;
  }
  v70 = (unsigned __int16 *)(v65 + 2);
  v71 = v66 - 1;
  while (v71)
  {
    if (v67 > 0x19999999)
      goto LABEL_99;
    v72 = *v70 - 48;
    if (v72 > 9)
      goto LABEL_99;
    v68 = 0;
    LOBYTE(v66) = 0;
    v69 = 0;
    v53 = __CFADD__(v72, 10 * v67);
    v67 = v72 + 10 * v67;
    ++v70;
    --v71;
    if (v53)
      goto LABEL_115;
  }
  v69 = v67 & 0xFFFFFF00;
  v68 = 0x100000000;
  if (v67 == -1)
  {
    v68 = 0;
    LOBYTE(v66) = 0;
  }
  else
  {
    LOBYTE(v66) = v67;
  }
  if (v67 == -1)
    v69 = 0;
LABEL_115:
  v73 = v66;
  if ((v68 & 0x100000000) != 0)
  {
LABEL_364:
    v171 = v69 | v73;
    v172 = *((_QWORD *)a1 + 7);
    v55 = 2;
    while (1)
    {
      v173 = 16 * (*(_DWORD *)v9 & 0xFFFFFFFE);
      v174 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v173 + 0x4C) + 0x70))(v9, a1, v171, &v208);
      v181 = v174;
      if (*(_DWORD *)(v172 + 80))
      {
        v184 = *(_DWORD *)(v172 + 80);
        if ((v184 & 0x27) != 0 && (v184 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v172 + 64), 7u, v175, v176, v177, v178, v179, v180);
        if (*(_QWORD *)(v172 + 16))
          v185 = 1;
        else
          v185 = v181;
        if ((v185 & 1) != 0)
          goto LABEL_73;
      }
      else if ((v174 & 1) != 0)
      {
        goto LABEL_73;
      }
      if (BYTE2(v214) == 3)
      {
        if (v215)
          goto LABEL_80;
        v182 = *((unsigned __int8 *)v9 + 5);
        if (v182 != 61)
        {
LABEL_369:
          if ((v182 - 39) <= 0xA)
          {
            if ((*((_BYTE *)v9 + 40) & 7u) > 2)
            {
              __dst[0] = 0;
              v222 = 0;
              v188 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v9, (uint64_t)__dst, v175, v176, v177, v178, v179, v180);
              v187 = v189 ? v188 : 0;
            }
            else
            {
              v187 = *((_QWORD *)v9 + 3);
            }
            if (v187 <= v171)
              goto LABEL_73;
          }
        }
      }
      else
      {
        v182 = *((unsigned __int8 *)v9 + 5);
        if (v182 != 61)
          goto LABEL_369;
        if (BYTE2(v214) == 1)
          goto LABEL_73;
      }
      if ((*(_WORD *)(v173 + 12) & 0x800) == 0 || BYTE2(v214) == 3)
      {
        v183 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
        if (!v183)
          v183 = *((_QWORD *)v9 + 2);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v183 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *))(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)
                                                                                   + 0xB0))(v9, a1);
        }
        else
        {
          v183 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
          if (!v183)
            v183 = *((_QWORD *)v9 + 2);
        }
        if (*(_DWORD *)(v172 + 80))
        {
          v186 = *(_DWORD *)(v172 + 80);
          if ((v186 & 0x27) != 0 && (v186 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v172 + 64), 7u, v175, v176, v177, v178, v179, v180);
          if (*(_QWORD *)(v172 + 16))
            goto LABEL_73;
        }
      }
      if ((v183 & 0xFFFE000000000002) == 0)
      {
        v9 = (JSC::JSString *)v183;
        if (*(unsigned __int8 *)(v183 + 5) > 0x16u)
          continue;
      }
      goto LABEL_73;
    }
  }
LABEL_116:
  v74 = *((_QWORD *)a1 + 7);
  v207 = (JSC::VMTraps *)(v74 + 64);
  v55 = 2;
  while (1)
  {
    v75 = 16 * (*(_DWORD *)v17 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v17 + 6) & 8) == 0)
      break;
    v204 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C)
                                                                                                  + 0x68))(v17, a1, v12, &v208);
    if (*(_DWORD *)(v74 + 80))
    {
      v122 = *(_DWORD *)(v74 + 80);
      if ((v122 & 0x27) != 0 && (v122 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v207, 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v123 = v204;
      if (*(_QWORD *)(v74 + 16))
        v123 = 1;
      if ((v123 & 1) != 0)
        goto LABEL_73;
    }
    else if ((v204 & 1) != 0)
    {
      goto LABEL_73;
    }
    if (BYTE2(v214) == 3)
    {
      if (v215)
        goto LABEL_80;
      v98 = *(unsigned __int8 *)(v17 + 5);
      if (v98 == 61)
        goto LABEL_146;
    }
    else
    {
      v98 = *(unsigned __int8 *)(v17 + 5);
      if (v98 == 61)
      {
        if (BYTE2(v214) == 1)
          goto LABEL_73;
        goto LABEL_146;
      }
    }
    if (!v12)
      goto LABEL_146;
    if ((v98 - 50) < 0xFFFFFFF5)
      goto LABEL_146;
    v99 = *(_DWORD *)(v12 + 16);
    if ((v99 & 0x20) != 0)
      goto LABEL_146;
    v100 = *(unsigned int *)(v12 + 4);
    if (!(_DWORD)v100)
      goto LABEL_146;
    v101 = *(unsigned __int8 **)(v12 + 8);
    if ((v99 & 4) != 0)
    {
      v102 = *v101;
      if ((_DWORD)v100 == 1)
      {
LABEL_173:
        if ((v102 - 48) < 0xA)
          goto LABEL_73;
        goto LABEL_146;
      }
      if (v102 == 45)
      {
        v102 = v101[1];
        goto LABEL_177;
      }
      if ((v102 - 48) < 0xA)
        goto LABEL_188;
      if ((_DWORD)v100 == 8)
        goto LABEL_187;
    }
    else
    {
      v102 = *(unsigned __int16 *)v101;
      if ((_DWORD)v100 == 1)
        goto LABEL_173;
      if (v102 == 45)
      {
        v102 = *((unsigned __int16 *)v101 + 1);
LABEL_177:
        if ((v102 - 48) < 0xA)
        {
          if ((_DWORD)v100 == 2)
            goto LABEL_73;
          goto LABEL_188;
        }
        if ((_DWORD)v100 != 9)
          goto LABEL_146;
LABEL_187:
        if (v102 != 73)
          goto LABEL_146;
        goto LABEL_188;
      }
      if ((v102 - 48) < 0xA || (_DWORD)v100 == 8 && v102 == 73)
        goto LABEL_188;
    }
    if ((_DWORD)v100 != 3 || v102 != 78)
      goto LABEL_146;
LABEL_188:
    v203 = v203 & 0xFFFFFF0000000000 | v100 | ((unint64_t)((v99 >> 2) & 1) << 32);
    JSC::jsToNumber(v101, v203);
    v104 = (v103 >> 52) & 0x7FF;
    if ((_DWORD)v104 == 2047)
    {
      if ((v103 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", sizeof(__s));
        v105 = v224;
      }
      else
      {
        if ((v103 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v111 = &__s[1];
        }
        else
        {
          v111 = __s;
        }
        *(_QWORD *)v111 = 0x7974696E69666E49;
        v105 = v111 + 8;
      }
      goto LABEL_202;
    }
    v106 = v103 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v103 & 0x8000000000000000) != 0 && v106)
    {
      __s[0] = 45;
      v107 = &__s[1];
    }
    else
    {
      if (!v106)
      {
        __s[0] = 48;
        v105 = &__s[1];
        goto LABEL_202;
      }
      v107 = __s;
    }
    v205 = (uint64_t)v107;
    v108 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v103 & 0x800FFFFFFFFFFFFFLL, v104);
    v105 = WTF::dragonbox::detail::to_shortest(v108, v109, v205, v110);
LABEL_202:
    *v105 = 0;
    v206 = strlen(__s);
    memcpy(__dst, __s, v206);
    __dst[v206] = 0;
    v112 = *(unsigned int *)(v12 + 4);
    v113 = *(unsigned __int8 **)(v12 + 8);
    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      if ((_DWORD)v112)
      {
        v118 = __dst;
        v119 = *(unsigned int *)(v12 + 4);
        do
        {
          v121 = *v118++;
          v120 = v121;
          if (!v121 || *v113 != v120)
            goto LABEL_146;
          ++v113;
        }
        while (--v119);
      }
    }
    else if ((_DWORD)v112)
    {
      v114 = __dst;
      v115 = *(unsigned int *)(v12 + 4);
      do
      {
        v117 = *v114++;
        v116 = v117;
        if (!v117 || *(unsigned __int16 *)v113 != v116)
          goto LABEL_146;
        v113 += 2;
      }
      while (--v115);
    }
    if (!__dst[v112])
      goto LABEL_73;
LABEL_146:
    if ((*(_WORD *)(v75 + 12) & 0x800) == 0)
    {
      v94 = *(_DWORD *)v17;
LABEL_148:
      v95 = *(_QWORD *)(16 * (v94 & 0xFFFFFFFE) + 0x30);
      if (!v95)
        v95 = *(_QWORD *)(v17 + 16);
      goto LABEL_150;
    }
    v94 = *(_DWORD *)v17;
    if (BYTE2(v214) == 3)
      goto LABEL_148;
    v96 = 16 * (v94 & 0xFFFFFFFE);
    if ((*(_WORD *)(v96 + 12) & 0x800) != 0)
    {
      v95 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v96 + 76) + 0xB0))(v17, a1);
    }
    else
    {
      v95 = *(_QWORD *)(v96 + 48);
      if (!v95)
        v95 = *(_QWORD *)(v17 + 16);
    }
    if (*(_DWORD *)(v74 + 80))
    {
      v97 = *(_DWORD *)(v74 + 80);
      if ((v97 & 0x27) != 0 && (v97 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v207, 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v74 + 16))
        goto LABEL_73;
    }
LABEL_150:
    if ((v95 & 0xFFFE000000000002) == 0)
    {
      v17 = v95;
      if (*(unsigned __int8 *)(v95 + 5) > 0x16u)
        continue;
    }
    goto LABEL_73;
  }
  if (!(_DWORD)v16 || (v16 & ~*(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_145;
  v76 = *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x58);
  if (!v76)
  {
    v77 = *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x40);
    if (!v77 || *(_BYTE *)(v77 + 5) != 1 && *(_DWORD *)(v77 + 80) < 2u)
      goto LABEL_145;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE)), (JSC::VM *)v74, 1, a4, a5, a6, a7, a8);
    if (!v76)
      goto LABEL_145;
  }
  if (!*(_DWORD *)(v76 + 24))
    goto LABEL_145;
  v78 = *(_QWORD *)(v76 + 16);
  v79 = v78 & 0xFFFFFFFFFFFFFFFELL;
  v80 = *(unsigned int *)(v76 + 8);
  v81 = *(_DWORD *)(v12 + 16);
  if ((v78 & 1) != 0)
  {
    if ((v81 & 0x20) != 0)
      v81 = *(_DWORD *)(v12 + 32);
    v82 = *(_DWORD *)(v76 + 12);
    v83 = (v81 >> 8) & *(_QWORD *)&v82;
    v84 = *(unsigned __int8 *)(v79 + v83);
    if (*(_BYTE *)(v79 + v83))
    {
      v85 = v79 + v80;
      v86 = 1;
      while (1)
      {
        v87 = *(_QWORD *)(v85 + 8 * (v84 - 1));
        if (v12 == (v87 & 0xFFFFFFFFFFFFLL))
          break;
        v83 = ((_DWORD)v83 + v86) & v82;
        v84 = *(unsigned __int8 *)(v79 + v83);
        ++v86;
        if (!*(_BYTE *)(v79 + v83))
          goto LABEL_145;
      }
      a6 = (v87 >> 16) & 0xFF00000000 | HIBYTE(v87);
      goto LABEL_142;
    }
    goto LABEL_145;
  }
  if ((v81 & 0x20) != 0)
    v81 = *(_DWORD *)(v12 + 32);
  v88 = *(_DWORD *)(v76 + 12);
  v89 = v88 & (v81 >> 8);
  v90 = *(_DWORD *)(v79 + 4 * v89);
  if (!v90)
    goto LABEL_145;
  v91 = v79 + 4 * v80;
  v92 = 1;
  while (1)
  {
    v93 = (v90 - 1);
    if (v12 == *(_QWORD *)(v91 + 16 * v93))
      break;
    v89 = (v89 + v92) & v88;
    v90 = *(_DWORD *)(v79 + 4 * v89);
    ++v92;
    if (!v90)
      goto LABEL_145;
  }
  a6 = *(unsigned int *)(v91 + 16 * v93 + 8) | ((unint64_t)*(unsigned __int8 *)(v91 + 16 * v93 + 12) << 32);
LABEL_142:
  if ((_DWORD)a6 == -1)
  {
LABEL_145:
    if ((*(_BYTE *)(v17 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v17, (JSC::VM *)v74, v12, (uint64_t)&v208) & 1) != 0)
    {
      goto LABEL_73;
    }
    goto LABEL_146;
  }
  v45 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v124 = v17 + 16;
    v125 = a6 << 32;
  }
  else
  {
    v124 = *(_QWORD *)(v17 + 8) - 8;
    v125 = 0x3F00000000 - (a6 << 32);
  }
  v48 = *(_QWORD *)(v124 + (v125 >> 29));
  if ((v48 & 0xFFFE000000000002) != 0)
  {
LABEL_243:
    v208 = v48;
    v212 = v17;
    goto LABEL_58;
  }
  v126 = *(unsigned __int8 *)(v48 + 5);
  if (v126 == 5)
  {
    v58 = (unsigned int *)v17;
    v59 = v74;
    goto LABEL_86;
  }
  if (v126 != 6)
    goto LABEL_243;
  v60 = *(_DWORD *)(v75 + 16) & 3;
  v127 = *(_QWORD *)(v48 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v48 & 0xFFFFFFFE) + 0x4C)))
  {
    v208 = *(_QWORD *)(v48 + 8);
    v209 = v127;
    LODWORD(v210) = HIDWORD(a6);
    v212 = v17;
    goto LABEL_245;
  }
  v63 = *(_QWORD *)(v48 + 24);
  v62 = *(_QWORD *)(v48 + 32);
  v208 = *(_QWORD *)(v48 + 8);
  v209 = v127;
  LODWORD(v210) = HIDWORD(a6);
  v212 = v17;
LABEL_90:
  BYTE1(v214) = 3;
  if (v60 != 2)
    LOBYTE(v214) = 1;
  HIBYTE(v214) = 1;
  v218 = v63;
  v219 = v62;
LABEL_73:
  if (v215)
  {
    v55 = 2;
  }
  else if (BYTE1(v214))
  {
    if (BYTE1(v214) == 1 && v214 == 1 || (v55 = 2, BYTE1(v214) == 2) && v214 == 1)
      v55 = v208;
  }
  else
  {
    v55 = 10;
  }
LABEL_80:
  if (v217)
  {
    v56 = *(_DWORD *)(v216 + 4);
    if (!v56)
    {
      __break(0xC471u);
      JUMPOUT(0x198763048);
    }
    *(_DWORD *)(v216 + 4) = v56 - 1;
  }
  return v55;
}

uint64_t operationTryGetByIdOptimize(unint64_t this, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t v10;
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  JSC::VM *v17;
  unsigned int v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::JSGlobalObject *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC::VM *v43;
  int v44;
  unsigned int v45;
  int v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  _WORD *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned __int8 *v58;
  int v59;
  uint64_t result;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  JSC::JSGlobalObject *v66;
  unsigned __int8 *v67;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unsigned __int16 *v76;
  uint64_t v77;
  unsigned int v78;
  BOOL v79;
  uint64_t v80;
  JSC::JSGlobalObject *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  JSC::VM *v87;
  char v88;
  BOOL v89;
  JSC::JSGlobalObject *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  JSC::VM *v95;
  uint64_t v96;
  uint64_t v97;
  JSC::JSGlobalObject *v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  unsigned int v111;
  char v112;
  int v113;
  _WORD *v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  JSC::VM *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  JSC::JSGlobalObject *v136;
  uint64_t v137;
  int v138;
  unsigned int v139;
  int v140;
  unint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  JSC::VM *v147;
  JSC::JSGlobalObject *v148;
  uint64_t v149;
  uint64_t v150;
  BOOL v151;
  unsigned __int16 *v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  JSC::JSGlobalObject *v156;
  uint64_t v157;
  uint64_t v158;
  char OwnStaticPropertySlot;
  unint64_t v160;
  JSC::VM *v161;
  uint64_t v162;
  uint64_t v163;
  JSC::JSGlobalObject *v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  JSC::JSArrayBufferView *v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  _BOOL4 v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  JSC::JSGlobalObject *v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  int v183;
  int v184;
  unsigned int v185;
  uint64_t v186;
  unsigned __int8 *v187;
  int v188;
  _BOOL4 v189;
  double v190;
  const unsigned __int8 *v191;
  BOOL v192;
  BOOL v193;
  unsigned int v194;
  unint64_t v195;
  _BOOL4 v196;
  uint64_t v197;
  unsigned __int8 *v198;
  unsigned int v199;
  uint64_t v200;
  JSC::VM *v201;
  uint64_t v202;
  unsigned int *v203;
  uint64_t v204;
  uint64_t Index;
  int v206;
  int v207;
  _WORD *v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;
  unsigned int v212;
  unsigned int v213;
  JSC::JSGlobalObject *v214;
  uint64_t v215;
  uint64_t v216;
  unsigned __int16 *v217;
  uint64_t v218;
  unsigned int v219;
  unsigned int v220;
  unint64_t v221;
  uint64_t v222;
  unsigned __int8 *v223;
  unsigned int v224;
  BOOL v225;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v227;
  JSC::JSString *v228;
  uint64_t v229;
  BOOL v230;
  unsigned int v231;
  BOOL v232;
  uint64_t v233;
  unsigned __int8 *v234;
  unsigned int v235;
  unint64_t v236;
  uint64_t v237;
  JSC::JSGlobalObject *v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  int v248;
  unsigned __int8 v249;
  uint64_t v250;
  char v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unsigned int v255;
  char v256;
  uint64_t v257;
  unsigned int **v258;
  unsigned int *v259;
  char *v260;
  unsigned int *v261;
  uint64_t *v262;
  char *v263;
  uint64_t v264;
  uint64_t vars0;

  v9 = a2;
  v10 = this;
  v264 = *MEMORY[0x1E0C80C00];
  v11 = *(JSC::JSGlobalObject **)(a2 + 56);
  v12 = *((_QWORD *)v11 + 7);
  v13 = vars0;
  *(_QWORD *)(v12 + 40) = vars0;
  *(_DWORD *)(v13 + 36) = *(_DWORD *)(a2 + 112);
  v14 = *(_QWORD *)(a2 + 16);
  v253 = 0;
  v254 = this;
  a3.i64[0] = 0xFFFFFFFF00000000;
  v244 = 0xFFFFFFFF00000000;
  v246 = 0;
  v247 = 0;
  v245 = this;
  v248 = 196608;
  v249 = 0;
  v252 = 0;
  v250 = v12;
  ++*(_DWORD *)(v12 + 4);
  v251 = 1;
  if (v14)
  {
    if ((v14 & 1) != 0)
      v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
    else
      v15 = *(_QWORD *)(v14 + 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = 0xFFFE000000000002;
  if ((this & 0xFFFE000000000002) == 0)
  {
    v17 = (JSC::VM *)*((_QWORD *)v11 + 7);
    v18 = *(unsigned __int8 *)(this + 5);
    if (v18 > 0x16)
      goto LABEL_6;
    if (v18 == 2)
    {
      v200 = v13;
      v90 = v11;
      v201 = (JSC::VM *)*((_QWORD *)v11 + 7);
      if (*(_QWORD *)(*((_QWORD *)v17 + 5244) + 1768) == v15)
      {
        v202 = *(_QWORD *)(this + 8);
        if ((v202 & 1) != 0)
          v203 = (unsigned int *)(this + 16);
        else
          v203 = (unsigned int *)(v202 + 4);
        v204 = *v203;
        if ((v204 & 0x80000000) != 0)
        {
          *(double *)a3.i64 = (double)v204;
          Index = COERCE__INT64((double)v204) + 0x2000000000000;
        }
        else
        {
          Index = v204 | 0xFFFE000000000000;
        }
        v206 = 14;
        goto LABEL_346;
      }
      if (!v15)
        goto LABEL_357;
      v207 = *(_DWORD *)(v15 + 16);
      if ((v207 & 0x20) != 0)
        goto LABEL_357;
      v208 = *(_WORD **)(v15 + 8);
      v209 = *(unsigned int *)(v15 + 4);
      if ((v207 & 4) == 0)
      {
        if ((_DWORD)v209)
        {
          v210 = (unsigned __int16)*v208 - 48;
          if (v210 <= 9 && (*v208 != 48 || v209 <= 1))
          {
            v217 = v208 + 1;
            v218 = v209 - 1;
            while (v218)
            {
              if (v210 > 0x19999999)
                goto LABEL_353;
              v219 = *v217 - 48;
              if (v219 > 9)
                goto LABEL_353;
              v211 = 0;
              LOBYTE(v209) = 0;
              v212 = 0;
              v79 = __CFADD__(v219, 10 * v210);
              v210 = v219 + 10 * v210;
              ++v217;
              --v218;
              if (v79)
                goto LABEL_355;
            }
            if (v210 != -1)
            {
              v212 = v210 & 0xFFFFFF00;
              v211 = 0x100000000;
              LOBYTE(v209) = v210;
              goto LABEL_355;
            }
          }
LABEL_353:
          v211 = 0;
          LOBYTE(v209) = 0;
        }
        else
        {
          v211 = 0;
        }
        v212 = 0;
LABEL_355:
        v213 = v209;
LABEL_356:
        if ((v211 & 0x100000000) != 0)
        {
          v16 = v212 | v213;
          v227 = *(_QWORD *)(this + 8);
          v228 = (JSC::JSString *)((v227 & 1) != 0 ? this + 16 : v227 + 4);
          if (*(_DWORD *)v228 > v16)
          {
            Index = JSC::JSString::getIndex((JSC::JSString *)this, v11, v16, a5, a6, a7, a8, a9, a3);
            if (!*((_DWORD *)v201 + 20)
              || !JSC::VM::hasExceptionsAfterHandlingTraps(v201, (uint64_t)v17, v229, a5, a6, a7, a8, a9))
            {
              v206 = 10;
LABEL_346:
              v242 = Index;
              LODWORD(v244) = v206;
              v246 = 0;
              BYTE1(v248) = 1;
              v11 = v90;
              v13 = v200;
              if (!*((_DWORD *)v201 + 20))
                goto LABEL_50;
              JSC::VM::hasExceptionsAfterHandlingTraps(v201, (uint64_t)v17, 0xFFFE000000000002, a5, a6, a7, a8, a9);
              v13 = v200;
              goto LABEL_121;
            }
          }
        }
LABEL_357:
        v11 = v90;
        v13 = v200;
        if (*((_DWORD *)v201 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v201, (uint64_t)v17, v16, a5, a6, a7, a8, a9);
          v13 = v200;
          v11 = v90;
          if (hasExceptionsAfterHandlingTraps)
            goto LABEL_50;
        }
        goto LABEL_358;
      }
      if ((_DWORD)v209)
      {
        v231 = *(unsigned __int8 *)v208 - 48;
        if (v231 <= 9 && (v209 < 2 || *(_BYTE *)v208 != 48))
        {
          v233 = v209 - 1;
          v234 = (unsigned __int8 *)v208 + 1;
          while (v233)
          {
            if (v231 > 0x19999999)
              goto LABEL_438;
            v235 = *v234 - 48;
            if (v235 > 9)
              goto LABEL_438;
            v213 = 0;
            LOBYTE(v209) = 0;
            v211 = 0;
            v79 = __CFADD__(v235, 10 * v231);
            v231 = v235 + 10 * v231;
            --v233;
            ++v234;
            if (v79)
              goto LABEL_440;
          }
          if (v231 != -1)
          {
            v213 = v231 & 0xFFFFFF00;
            v211 = 0x100000000;
            LOBYTE(v209) = v231;
            goto LABEL_440;
          }
        }
LABEL_438:
        v213 = 0;
        LOBYTE(v209) = 0;
      }
      else
      {
        v213 = 0;
      }
      v211 = 0;
LABEL_440:
      v212 = v209;
      goto LABEL_356;
    }
  }
LABEL_358:
  v214 = v11;
  v215 = v13;
  v216 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v254, (unint64_t)v11);
  v16 = 0xFFFE000000000002;
  v13 = v215;
  v11 = v214;
  if (!v216)
    goto LABEL_50;
  v10 = v216;
  v17 = (JSC::VM *)*((_QWORD *)v214 + 7);
LABEL_6:
  v19 = (_BYTE *)(v10 + 6);
  v20 = v15 >> 4;
  v21 = v10;
  if ((*(_BYTE *)(v10 + 6) & 8) != 0)
  {
LABEL_156:
    if (!v15)
      goto LABEL_165;
    v113 = *(_DWORD *)(v15 + 16);
    if ((v113 & 0x20) != 0)
      goto LABEL_165;
    v114 = *(_WORD **)(v15 + 8);
    v115 = *(unsigned int *)(v15 + 4);
    if ((v113 & 4) == 0)
    {
      if ((_DWORD)v115)
      {
        v116 = (unsigned __int16)*v114 - 48;
        if (v116 <= 9 && (*v114 != 48 || v115 <= 1))
        {
          v152 = v114 + 1;
          v153 = v115 - 1;
          while (v153)
          {
            if (v116 > 0x19999999)
              goto LABEL_161;
            v154 = *v152 - 48;
            if (v154 > 9)
              goto LABEL_161;
            v117 = 0;
            LOBYTE(v115) = 0;
            v118 = 0;
            v79 = __CFADD__(v154, 10 * v116);
            v116 = v154 + 10 * v116;
            ++v152;
            --v153;
            if (v79)
              goto LABEL_163;
          }
          v118 = v116 & 0xFFFFFF00;
          v117 = 0x100000000;
          if (v116 == -1)
          {
            v117 = 0;
            LOBYTE(v115) = 0;
          }
          else
          {
            LOBYTE(v115) = v116;
          }
          if (v116 == -1)
            v118 = 0;
          goto LABEL_163;
        }
LABEL_161:
        v117 = 0;
        LOBYTE(v115) = 0;
      }
      else
      {
        v117 = 0;
      }
      v118 = 0;
LABEL_163:
      v119 = v115;
LABEL_164:
      if ((v117 & 0x100000000) == 0)
      {
LABEL_165:
        v120 = (JSC::VM *)*((_QWORD *)v11 + 7);
        while (1)
        {
          v121 = 16 * (*(_DWORD *)v21 & 0xFFFFFFFE);
          if ((*(_BYTE *)(v21 + 6) & 8) == 0)
            break;
          v237 = v13;
          v238 = v11;
          v181 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C) + 0x68))(v21, v11, v15, &v242);
          v183 = v181;
          if (*((_DWORD *)v120 + 20))
          {
            v196 = JSC::VM::hasExceptionsAfterHandlingTraps(v120, (uint64_t)v17, v182, a5, a6, a7, a8, a9);
            v13 = v237;
            v11 = v238;
            v16 = 0xFFFE000000000002;
            if (((v196 | v183) & 1) != 0)
              goto LABEL_50;
          }
          else
          {
            v13 = v237;
            v11 = v238;
            v16 = 0xFFFE000000000002;
            if ((v181 & 1) != 0)
              goto LABEL_50;
          }
          if (BYTE2(v248) == 3)
          {
            v13 = v237;
            v11 = v238;
            if (v249)
              goto LABEL_50;
            v184 = *(unsigned __int8 *)(v21 + 5);
            if (v184 == 61)
            {
LABEL_303:
              v13 = v237;
              v11 = v238;
              goto LABEL_179;
            }
LABEL_264:
            if (!v15)
              goto LABEL_303;
            if ((v184 - 50) < 0xFFFFFFF5)
              goto LABEL_303;
            v185 = *(_DWORD *)(v15 + 16);
            if ((v185 & 0x20) != 0)
              goto LABEL_303;
            v186 = *(unsigned int *)(v15 + 4);
            if (!(_DWORD)v186)
              goto LABEL_303;
            v187 = *(unsigned __int8 **)(v15 + 8);
            if ((v185 & 4) != 0)
            {
              v188 = *v187;
              if ((_DWORD)v186 == 1)
              {
LABEL_270:
                v13 = v237;
                v11 = v238;
                if ((v188 - 48) < 0xA)
                  goto LABEL_50;
                goto LABEL_179;
              }
              if (v188 == 45)
              {
                v188 = v187[1];
LABEL_276:
                if ((v188 - 48) < 0xA)
                {
                  v13 = v237;
                  v11 = v238;
                  if ((_DWORD)v186 == 2)
                    goto LABEL_50;
                  goto LABEL_282;
                }
                if ((_DWORD)v186 != 9)
                  goto LABEL_303;
              }
              else
              {
                if ((v188 - 48) < 0xA)
                  goto LABEL_282;
                if ((_DWORD)v186 != 8)
                  goto LABEL_293;
              }
              v193 = v188 == 73;
LABEL_289:
              v13 = v237;
              v11 = v238;
              if (!v193)
                goto LABEL_179;
            }
            else
            {
              v188 = *(unsigned __int16 *)v187;
              if ((_DWORD)v186 == 1)
                goto LABEL_270;
              if (v188 == 45)
              {
                v188 = *((unsigned __int16 *)v187 + 1);
                goto LABEL_276;
              }
              if ((v188 - 48) >= 0xA && ((_DWORD)v186 != 8 || v188 != 73))
              {
LABEL_293:
                if ((_DWORD)v186 != 3)
                  goto LABEL_303;
                v193 = v188 == 78;
                goto LABEL_289;
              }
            }
LABEL_282:
            v236 = v236 & 0xFFFFFF0000000000 | v186 | ((unint64_t)((v185 >> 2) & 1) << 32);
            JSC::jsToNumber(v187, v236);
            WTF::numberToString(&v259, v190);
            v192 = WTF::equal(v15, (unint64_t)&v259, v191);
            v16 = 0xFFFE000000000002;
            v13 = v237;
            v11 = v238;
            if (v192)
              goto LABEL_50;
            goto LABEL_179;
          }
          v184 = *(unsigned __int8 *)(v21 + 5);
          if (v184 != 61)
            goto LABEL_264;
          v13 = v237;
          v11 = v238;
          if (BYTE2(v248) == 1)
            goto LABEL_50;
LABEL_179:
          if ((*(_WORD *)(v121 + 12) & 0x800) != 0)
          {
            v133 = *(_DWORD *)v21;
            if (BYTE2(v248) != 3)
            {
              v178 = v13;
              v179 = v11;
              v180 = 16 * (v133 & 0xFFFFFFFE);
              if ((*(_WORD *)(v180 + 12) & 0x800) != 0)
              {
                v134 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t))(16 * *(unsigned int *)(v180 + 76) + 0xB0))(v21, v11, 0xFFFE000000000002);
              }
              else
              {
                v134 = *(_QWORD *)(v180 + 48);
                if (!v134)
                  v134 = *(_QWORD *)(v21 + 16);
              }
              if (*((_DWORD *)v120 + 20))
              {
                v225 = JSC::VM::hasExceptionsAfterHandlingTraps(v120, (uint64_t)v17, v16, a5, a6, a7, a8, a9);
                v11 = v179;
                v13 = v178;
                v16 = 0xFFFE000000000002;
                if (v225)
                  goto LABEL_50;
              }
              else
              {
                v11 = v179;
                v13 = v178;
                v16 = 0xFFFE000000000002;
              }
              goto LABEL_183;
            }
          }
          else
          {
            v133 = *(_DWORD *)v21;
          }
          v134 = *(_QWORD *)(16 * (v133 & 0xFFFFFFFE) + 0x30);
          if (!v134)
            v134 = *(_QWORD *)(v21 + 16);
LABEL_183:
          if ((v134 & 0xFFFE000000000002) == 0)
          {
            v21 = v134;
            if (*(unsigned __int8 *)(v134 + 5) > 0x16u)
              continue;
          }
          goto LABEL_50;
        }
        if ((_DWORD)v20 && (v20 & ~*(_DWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x20)) == 0)
        {
          v122 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x58);
          if (v122
            || (v135 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x40)) != 0
            && (*(_BYTE *)(v135 + 5) == 1 || *(_DWORD *)(v135 + 80) >= 2u)
            && (v136 = v11,
                v137 = v13,
                JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE)), v120, 1, (const JSC::PropertyTable *)a5, a6, a7, a8, a9), v16 = 0xFFFE000000000002, v13 = v137, v11 = v136, v122))
          {
            if (*(_DWORD *)(v122 + 24))
            {
              v123 = *(_QWORD *)(v122 + 16);
              v124 = v123 & 0xFFFFFFFFFFFFFFFELL;
              v125 = *(unsigned int *)(v122 + 8);
              v126 = *(_DWORD *)(v15 + 16);
              if ((v123 & 1) != 0)
              {
                if ((v126 & 0x20) != 0)
                  v126 = *(_DWORD *)(v15 + 32);
                v127 = *(_DWORD *)(v122 + 12);
                v128 = (v126 >> 8) & *(_QWORD *)&v127;
                v129 = *(unsigned __int8 *)(v124 + v128);
                if (*(_BYTE *)(v124 + v128))
                {
                  v130 = v124 + v125;
                  v131 = 1;
                  while (1)
                  {
                    v132 = *(_QWORD *)(v130 + 8 * (v129 - 1));
                    if (v15 == (v132 & 0xFFFFFFFFFFFFLL))
                      break;
                    v128 = ((_DWORD)v128 + v131) & v127;
                    v129 = *(unsigned __int8 *)(v124 + v128);
                    ++v131;
                    if (!*(_BYTE *)(v124 + v128))
                      goto LABEL_178;
                  }
                  a7 = (v132 >> 16) & 0xFF00000000 | HIBYTE(v132);
                  goto LABEL_191;
                }
              }
              else
              {
                if ((v126 & 0x20) != 0)
                  v126 = *(_DWORD *)(v15 + 32);
                v138 = *(_DWORD *)(v122 + 12);
                v139 = v138 & (v126 >> 8);
                v140 = *(_DWORD *)(v124 + 4 * v139);
                if (v140)
                {
                  v141 = v124 + 4 * v125;
                  v142 = 1;
                  while (1)
                  {
                    v143 = (v140 - 1);
                    if (v15 == *(_QWORD *)(v141 + 16 * v143))
                      break;
                    v139 = (v139 + v142) & v138;
                    v140 = *(_DWORD *)(v124 + 4 * v139);
                    ++v142;
                    if (!v140)
                      goto LABEL_178;
                  }
                  a7 = *(unsigned int *)(v141 + 16 * v143 + 8) | ((unint64_t)*(unsigned __int8 *)(v141 + 16 * v143 + 12) << 32);
LABEL_191:
                  if ((_DWORD)a7 != -1)
                  {
                    a6 = HIDWORD(a7);
                    if ((int)a7 <= 63)
                    {
                      v144 = v21 + 16;
                      v145 = a7 << 32;
                    }
                    else
                    {
                      v144 = *(_QWORD *)(v21 + 8) - 8;
                      v145 = 0x3F00000000 - (a7 << 32);
                    }
                    a5 = *(_QWORD *)(v144 + (v145 >> 29));
                    if ((a5 & 0xFFFE000000000002) == 0)
                    {
                      v146 = *(unsigned __int8 *)(a5 + 5);
                      if (v146 != 5)
                      {
                        if (v146 != 6)
                          goto LABEL_206;
                        v174 = *(_DWORD *)(v121 + 16) & 3;
                        v175 = *(_QWORD *)(a5 + 16);
                        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)a5 & 0xFFFFFFFE)
                                                                                                 + 0x4C)))
                        {
                          v177 = *(_QWORD *)(a5 + 24);
                          v176 = *(_QWORD *)(a5 + 32);
                          v242 = *(_QWORD *)(a5 + 8);
                          v243 = v175;
                          LODWORD(v244) = HIDWORD(a7);
                          v246 = v21;
                          BYTE1(v248) = 3;
                          if (v174 != 2)
                            LOBYTE(v248) = 1;
                          HIBYTE(v248) = 1;
                          v252 = v177;
                          v253 = v176;
                          goto LABEL_50;
                        }
                        v242 = *(_QWORD *)(a5 + 8);
                        v243 = v175;
                        LODWORD(v244) = HIDWORD(a7);
                        v246 = v21;
                        BYTE1(v248) = 3;
                        if (v174 == 2)
                          goto LABEL_50;
LABEL_226:
                        LOBYTE(v248) = 1;
                        goto LABEL_50;
                      }
                      v90 = v11;
                      v172 = v13;
                      JSC::JSObject::fillGetterPropertySlot((unsigned int *)v21, (uint64_t)v120, (uint64_t)&v242, a5, SHIDWORD(a7), a7);
                      v13 = v172;
LABEL_121:
                      v11 = v90;
                      goto LABEL_50;
                    }
LABEL_206:
                    v242 = a5;
                    v246 = v21;
LABEL_73:
                    v244 = __PAIR64__(a7, a6);
                    LOWORD(v248) = 257;
                    goto LABEL_50;
                  }
                }
              }
            }
          }
        }
LABEL_178:
        if ((*(_BYTE *)(v21 + 6) & 0x20) != 0)
        {
          v155 = v14;
          v156 = v11;
          v157 = v12;
          v158 = v13;
          OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v21, v120, v15, (uint64_t)&v242);
          v16 = 0xFFFE000000000002;
          v13 = v158;
          v12 = v157;
          v11 = v156;
          v14 = v155;
          if ((OwnStaticPropertySlot & 1) != 0)
            goto LABEL_50;
        }
        goto LABEL_179;
      }
      v160 = v118 | v119;
      v161 = (JSC::VM *)*((_QWORD *)v11 + 7);
      while (1)
      {
        v162 = v13;
        v163 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
        v164 = v11;
        v165 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v163 + 0x4C) + 0x70))(v10, v11, v160, &v242);
        v167 = v165;
        if (*((_DWORD *)v161 + 20))
        {
          v189 = JSC::VM::hasExceptionsAfterHandlingTraps(v161, (uint64_t)v17, v166, a5, a6, a7, a8, a9);
          v11 = v164;
          v13 = v162;
          v168 = 0xFFFE000000000002;
          if (((v189 | v167) & 1) != 0)
            goto LABEL_50;
        }
        else
        {
          v11 = v164;
          v13 = v162;
          v168 = 0xFFFE000000000002;
          if ((v165 & 1) != 0)
            goto LABEL_50;
        }
        if (BYTE2(v248) == 3)
        {
          v11 = v164;
          v13 = v162;
          if (v249)
            goto LABEL_50;
          v169 = (JSC::JSArrayBufferView *)v10;
          v170 = *(unsigned __int8 *)(v10 + 5);
          if (v170 != 61)
          {
LABEL_234:
            if ((v170 - 39) <= 0xA)
            {
              v221 = JSC::JSArrayBufferView::length(v169, (uint64_t)v17, 0xFFFE000000000002, a5, a6, a7, a8, a9);
              v168 = 0xFFFE000000000002;
              v13 = v162;
              v11 = v164;
              if (v221 <= v160)
                goto LABEL_50;
            }
          }
        }
        else
        {
          v169 = (JSC::JSArrayBufferView *)v10;
          v170 = *(unsigned __int8 *)(v10 + 5);
          if (v170 != 61)
            goto LABEL_234;
          v11 = v164;
          v13 = v162;
          if (BYTE2(v248) == 1)
            goto LABEL_50;
        }
        if ((*(_WORD *)(v163 + 12) & 0x800) == 0 || BYTE2(v248) == 3)
        {
          v171 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
          v11 = v164;
          v13 = v162;
          if (!v171)
            v171 = *(_QWORD *)(v10 + 16);
        }
        else
        {
          if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
          {
            v171 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) + 0xB0))(v10, v164, 0xFFFE000000000002);
          }
          else
          {
            v171 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
            if (!v171)
              v171 = *(_QWORD *)(v10 + 16);
          }
          if (*((_DWORD *)v161 + 20))
          {
            v232 = JSC::VM::hasExceptionsAfterHandlingTraps(v161, (uint64_t)v17, v168, a5, a6, a7, a8, a9);
            v11 = v164;
            v13 = v162;
            if (v232)
              goto LABEL_50;
          }
          else
          {
            v11 = v164;
            v13 = v162;
          }
        }
        if ((v171 & 0xFFFE000000000002) == 0)
        {
          v10 = v171;
          if (*(unsigned __int8 *)(v171 + 5) > 0x16u)
            continue;
        }
        goto LABEL_50;
      }
    }
    if ((_DWORD)v115)
    {
      v220 = *(unsigned __int8 *)v114 - 48;
      if (v220 <= 9 && (v115 < 2 || *(_BYTE *)v114 != 48))
      {
        v222 = v115 - 1;
        v223 = (unsigned __int8 *)v114 + 1;
        while (v222)
        {
          if (v220 > 0x19999999)
            goto LABEL_373;
          v224 = *v223 - 48;
          if (v224 > 9)
            goto LABEL_373;
          v119 = 0;
          LOBYTE(v115) = 0;
          v117 = 0;
          v79 = __CFADD__(v224, 10 * v220);
          v220 = v224 + 10 * v220;
          --v222;
          ++v223;
          if (v79)
            goto LABEL_375;
        }
        if (v220 == -1)
          v119 = 0;
        else
          v119 = v220 & 0xFFFFFF00;
        if (v220 == -1)
          LOBYTE(v115) = 0;
        else
          LOBYTE(v115) = v220;
        if (v220 == -1)
          v117 = 0;
        else
          v117 = 0x100000000;
        goto LABEL_375;
      }
LABEL_373:
      v119 = 0;
      LOBYTE(v115) = 0;
    }
    else
    {
      v119 = 0;
    }
    v117 = 0;
LABEL_375:
    v118 = v115;
    v16 = 0xFFFE000000000002;
    goto LABEL_164;
  }
  v22 = v10;
  while (1)
  {
    v23 = *(_DWORD *)v22 & 0xFFFFFFFE;
    v24 = 16 * v23;
    if (!(_DWORD)v20 || (v20 & ~*(_DWORD *)(16 * v23 + 0x20)) != 0)
      goto LABEL_19;
    v25 = *(_QWORD *)(16 * v23 + 0x58);
    if (!v25)
    {
      v36 = *(_QWORD *)(16 * v23 + 0x40);
      if (!v36 || *(_BYTE *)(v36 + 5) != 1 && *(_DWORD *)(v36 + 80) < 2u)
        goto LABEL_19;
      v37 = v14;
      v38 = v11;
      v239 = v10;
      v241 = v20;
      v39 = v15;
      v40 = v9;
      v41 = v12;
      v42 = v13;
      v43 = v17;
      JSC::Structure::materializePropertyTable((JSC::Structure *)v24, v17, 1, (const JSC::PropertyTable *)a5, a6, a7, a8, a9);
      v17 = v43;
      v16 = 0xFFFE000000000002;
      v13 = v42;
      v12 = v41;
      v9 = v40;
      v15 = v39;
      v10 = v239;
      v20 = v241;
      v11 = v38;
      v14 = v37;
      if (!v25)
        goto LABEL_19;
    }
    if (!*(_DWORD *)(v25 + 24))
      goto LABEL_19;
    v26 = *(_QWORD *)(v25 + 16);
    v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
    v28 = *(unsigned int *)(v25 + 8);
    v29 = *(_DWORD *)(v15 + 16);
    if ((v26 & 1) == 0)
      break;
    if ((v29 & 0x20) != 0)
      v29 = *(_DWORD *)(v15 + 32);
    v30 = *(_DWORD *)(v25 + 12);
    v31 = (v29 >> 8) & *(_QWORD *)&v30;
    v32 = *(unsigned __int8 *)(v27 + v31);
    if (*(_BYTE *)(v27 + v31))
    {
      v33 = v27 + v28;
      v34 = 1;
      while (1)
      {
        v35 = *(_QWORD *)(v33 + 8 * (v32 - 1));
        if (v15 == (v35 & 0xFFFFFFFFFFFFLL))
          break;
        v31 = ((_DWORD)v31 + v34) & v30;
        v32 = *(unsigned __int8 *)(v27 + v31);
        ++v34;
        if (!*(_BYTE *)(v27 + v31))
          goto LABEL_19;
      }
      a7 = (v35 >> 16) & 0xFF00000000 | HIBYTE(v35);
      goto LABEL_31;
    }
LABEL_19:
    if ((*v19 & 0x20) != 0)
    {
      v80 = v14;
      v81 = v11;
      v82 = v15;
      v83 = v12;
      v84 = v13;
      v240 = v15;
      v85 = v20;
      v86 = v9;
      v87 = v17;
      v88 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v22, v17, v82, (uint64_t)&v242);
      v17 = v87;
      v9 = v86;
      v20 = v85;
      v15 = v240;
      v16 = 0xFFFE000000000002;
      v13 = v84;
      v12 = v83;
      v11 = v81;
      v14 = v80;
      if ((v88 & 1) != 0)
        goto LABEL_50;
    }
    v21 = *(_QWORD *)(v24 + 48);
    if (!v21)
      v21 = *(_QWORD *)(v22 + 16);
    if ((v21 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v21 + 5) < 0x17u)
    {
      if (!v15)
        goto LABEL_50;
      v50 = *(_DWORD *)(v15 + 16);
      if ((v50 & 0x20) != 0)
        goto LABEL_50;
      v51 = *(_WORD **)(v15 + 8);
      v52 = *(unsigned int *)(v15 + 4);
      if ((v50 & 4) == 0)
      {
        if ((_DWORD)v52)
        {
          v53 = (unsigned __int16)*v51 - 48;
          if (v53 <= 9 && (*v51 != 48 || v52 <= 1))
          {
            v76 = v51 + 1;
            v77 = v52 - 1;
            while (v77)
            {
              if (v53 > 0x19999999)
                goto LABEL_46;
              v78 = *v76 - 48;
              if (v78 > 9)
                goto LABEL_46;
              v54 = 0;
              LOBYTE(v52) = 0;
              v55 = 0;
              v79 = __CFADD__(v78, 10 * v53);
              v53 = v78 + 10 * v53;
              ++v76;
              --v77;
              if (v79)
                goto LABEL_48;
            }
            v55 = v53 & 0xFFFFFF00;
            v54 = 0x100000000;
            if (v53 == -1)
            {
              v54 = 0;
              LOBYTE(v52) = 0;
            }
            else
            {
              LOBYTE(v52) = v53;
            }
            if (v53 == -1)
              v55 = 0;
LABEL_48:
            v56 = v52;
LABEL_49:
            if ((v54 & 0x100000000) == 0)
              goto LABEL_50;
            v94 = v55 | v56;
            v95 = (JSC::VM *)*((_QWORD *)v11 + 7);
            while (2)
            {
              v96 = v13;
              v97 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
              v98 = v11;
              v99 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v97 + 0x4C) + 0x70))(v10, v11, v94, &v242);
              v101 = v99;
              if (*((_DWORD *)v95 + 20))
              {
                v173 = JSC::VM::hasExceptionsAfterHandlingTraps(v95, (uint64_t)v17, v100, a5, a6, a7, a8, a9);
                v11 = v98;
                v13 = v96;
                v102 = 0xFFFE000000000002;
                if (((v173 | v101) & 1) != 0)
                  goto LABEL_50;
              }
              else
              {
                v11 = v98;
                v13 = v96;
                v102 = 0xFFFE000000000002;
                if ((v99 & 1) != 0)
                  goto LABEL_50;
              }
              if (BYTE2(v248) == 3)
              {
                if (v249)
                  goto LABEL_50;
                v103 = *(unsigned __int8 *)(v10 + 5);
                if (v103 != 61)
                  goto LABEL_133;
              }
              else
              {
                v103 = *(unsigned __int8 *)(v10 + 5);
                if (v103 == 61)
                {
                  if (BYTE2(v248) == 1)
                    goto LABEL_50;
                }
                else
                {
LABEL_133:
                  if ((v103 - 39) <= 0xA)
                  {
                    v195 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v10, (uint64_t)v17, 0xFFFE000000000002, a5, a6, a7, a8, a9);
                    v102 = 0xFFFE000000000002;
                    v13 = v96;
                    v11 = v98;
                    if (v195 <= v94)
                      goto LABEL_50;
                  }
                }
              }
              if ((*(_WORD *)(v97 + 12) & 0x800) == 0 || BYTE2(v248) == 3)
              {
                v104 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                if (!v104)
                  v104 = *(_QWORD *)(v10 + 16);
              }
              else
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v104 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) + 0xB0))(v10, v98, 0xFFFE000000000002);
                }
                else
                {
                  v104 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                  if (!v104)
                    v104 = *(_QWORD *)(v10 + 16);
                }
                if (*((_DWORD *)v95 + 20))
                {
                  v230 = JSC::VM::hasExceptionsAfterHandlingTraps(v95, (uint64_t)v17, v102, a5, a6, a7, a8, a9);
                  v11 = v98;
                  v13 = v96;
                  if (v230)
                    goto LABEL_50;
                }
                else
                {
                  v11 = v98;
                  v13 = v96;
                }
              }
              if ((v104 & 0xFFFE000000000002) != 0)
                goto LABEL_50;
              v10 = v104;
              if (*(unsigned __int8 *)(v104 + 5) <= 0x16u)
                goto LABEL_50;
              continue;
            }
          }
LABEL_46:
          v54 = 0;
          LOBYTE(v52) = 0;
        }
        else
        {
          v54 = 0;
        }
        v55 = 0;
        goto LABEL_48;
      }
      if ((_DWORD)v52)
      {
        v194 = *(unsigned __int8 *)v51 - 48;
        if (v194 <= 9 && (v52 < 2 || *(_BYTE *)v51 != 48))
        {
          v197 = v52 - 1;
          v198 = (unsigned __int8 *)v51 + 1;
          while (v197)
          {
            if (v194 > 0x19999999)
              goto LABEL_298;
            v199 = *v198 - 48;
            if (v199 > 9)
              goto LABEL_298;
            v56 = 0;
            LOBYTE(v52) = 0;
            v54 = 0;
            v79 = __CFADD__(v199, 10 * v194);
            v194 = v199 + 10 * v194;
            --v197;
            ++v198;
            if (v79)
              goto LABEL_300;
          }
          if (v194 == -1)
            v56 = 0;
          else
            v56 = v194 & 0xFFFFFF00;
          if (v194 == -1)
            LOBYTE(v52) = 0;
          else
            LOBYTE(v52) = v194;
          if (v194 == -1)
            v54 = 0;
          else
            v54 = 0x100000000;
          goto LABEL_300;
        }
LABEL_298:
        v56 = 0;
        LOBYTE(v52) = 0;
      }
      else
      {
        v56 = 0;
      }
      v54 = 0;
LABEL_300:
      v55 = v52;
      goto LABEL_49;
    }
    v19 = (_BYTE *)(v21 + 6);
    v22 = v21;
    if ((*(_BYTE *)(v21 + 6) & 8) != 0)
      goto LABEL_156;
  }
  if ((v29 & 0x20) != 0)
    v29 = *(_DWORD *)(v15 + 32);
  v44 = *(_DWORD *)(v25 + 12);
  v45 = v44 & (v29 >> 8);
  v46 = *(_DWORD *)(v27 + 4 * v45);
  if (!v46)
    goto LABEL_19;
  v47 = v27 + 4 * v28;
  v48 = 1;
  while (1)
  {
    v49 = (v46 - 1);
    if (v15 == *(_QWORD *)(v47 + 16 * v49))
      break;
    v45 = (v45 + v48) & v44;
    v46 = *(_DWORD *)(v27 + 4 * v45);
    ++v48;
    if (!v46)
      goto LABEL_19;
  }
  a7 = *(unsigned int *)(v47 + 16 * v49 + 8) | ((unint64_t)*(unsigned __int8 *)(v47 + 16 * v49 + 12) << 32);
LABEL_31:
  if ((_DWORD)a7 == -1)
    goto LABEL_19;
  a6 = HIDWORD(a7);
  if ((int)a7 <= 63)
  {
    v62 = v22 + 16;
    v63 = a7 << 32;
  }
  else
  {
    v62 = *(_QWORD *)(v22 + 8) - 8;
    v63 = 0x3F00000000 - (a7 << 32);
  }
  a5 = *(_QWORD *)(v62 + (v63 >> 29));
  if ((a5 & 0xFFFE000000000002) != 0)
    goto LABEL_72;
  v64 = *(unsigned __int8 *)(a5 + 5);
  if (v64 == 5)
  {
    v90 = v11;
    v91 = v9;
    v92 = v12;
    v93 = v13;
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v22, (uint64_t)v17, (uint64_t)&v242, a5, SHIDWORD(a7), a7);
    v13 = v93;
    v12 = v92;
    v9 = v91;
    goto LABEL_121;
  }
  if (v64 != 6)
  {
LABEL_72:
    v242 = a5;
    v246 = v22;
    goto LABEL_73;
  }
  v105 = *(_DWORD *)(v24 + 16) & 3;
  v106 = *(_QWORD *)(a5 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x4C)))
  {
    v242 = *(_QWORD *)(a5 + 8);
    v243 = v106;
    LODWORD(v244) = HIDWORD(a7);
    v246 = v22;
    BYTE1(v248) = 3;
    if (v105 == 2)
      goto LABEL_50;
    goto LABEL_226;
  }
  v108 = *(_QWORD *)(a5 + 24);
  v107 = *(_QWORD *)(a5 + 32);
  v242 = *(_QWORD *)(a5 + 8);
  v243 = v106;
  LODWORD(v244) = HIDWORD(a7);
  v246 = v22;
  BYTE1(v248) = 3;
  if (v105 != 2)
    LOBYTE(v248) = 1;
  HIBYTE(v248) = 1;
  v252 = v108;
  v253 = v107;
LABEL_50:
  if (*(_DWORD *)(v12 + 80))
  {
    v147 = (JSC::VM *)v12;
    v148 = v11;
    v149 = v12;
    v150 = v13;
    v151 = JSC::VM::hasExceptionsAfterHandlingTraps(v147, (uint64_t)v17, 0xFFFE000000000002, a5, a6, a7, a8, a9);
    v13 = v150;
    v12 = v149;
    v11 = v148;
    if (v151)
    {
      result = 0;
      goto LABEL_63;
    }
  }
  if ((v254 & 0xFFFE000000000002) != 0 || (v57 = *(_DWORD *)v254 & 0xFFFFFFFE) == 0)
  {
    *(_WORD *)(v9 + 129) |= 0x10u;
    goto LABEL_55;
  }
  v58 = *(unsigned __int8 **)(v13 + 16);
  v257 = v14;
  *(_WORD *)(v9 + 129) |= 4u;
  if (*(_BYTE *)(v9 + 124))
  {
    --*(_BYTE *)(v9 + 124);
    goto LABEL_55;
  }
  v65 = *(unsigned __int8 *)(v9 + 125);
  if (v65 != 255)
    *(_BYTE *)(v9 + 125) = ++v65;
  if (xmmword_1ECF4C260 < v65)
  {
    *(_BYTE *)(v9 + 125) = 0;
    v109 = *(unsigned __int8 *)(v9 + 126);
    v110 = BYTE4(xmmword_1ECF4C260) << v109;
    v111 = v110;
    if (v110 == 255)
      LOBYTE(v110) = -2;
    if (v111 >> v109 == BYTE4(xmmword_1ECF4C260))
      v112 = v110;
    else
      v112 = -2;
    *(_BYTE *)(v9 + 124) = v112;
    if (v109 != 255)
      *(_BYTE *)(v9 + 126) = v109 + 1;
    *(_BYTE *)(v9 + 127) = 0;
    goto LABEL_154;
  }
  if (!*(_BYTE *)(v9 + 127))
  {
LABEL_154:
    if (v249)
      goto LABEL_155;
LABEL_116:
    if (!BYTE1(v248) || BYTE1(v248) <= 2u && v248 == 1)
      JSC::repatchGetBy((uint64_t *)v11, v58, (const WTF::StringImpl *)v254, v14, (uint64_t)&v242, v9, 2, a9, *(uint8x8_t *)a3.i8);
LABEL_55:
    v59 = v249;
    goto LABEL_56;
  }
  v66 = v11;
  --*(_BYTE *)(v9 + 127);
  v256 = 0;
  v255 = v57;
  v67 = (unsigned __int8 *)(v9 + 128);
  if (!__ldaxr((unsigned __int8 *)(v9 + 128)))
    goto LABEL_124;
  __clrex();
LABEL_81:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v9 + 128);
  while (1)
  {
    v69 = *(_DWORD *)(v9 + 96);
    if (!v69)
      break;
    v261 = &v255;
    v262 = &v257;
    v263 = &v256;
    v259 = &v255;
    v260 = &v256;
    if (v69 != -1)
      goto LABEL_87;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_124:
    if (__stxr(1u, v67))
      goto LABEL_81;
  }
  if (*(_QWORD *)(v9 + 16))
    v69 = 1;
  else
    v69 = 2;
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(_DWORD *)(v9 + 96) = v69;
  v261 = &v255;
  v262 = &v257;
  v263 = &v256;
  v259 = &v255;
  v260 = &v256;
LABEL_87:
  v258 = &v259;
  ((void (*)(unsigned int ***))off_1E3596010[v69])(&v258);
  v75 = __ldxr(v67);
  if (v75 != 1)
  {
    __clrex();
    goto LABEL_109;
  }
  if (__stlxr(0, v67))
LABEL_109:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v9 + 128), 0, v70, v71, v72, v73, v74, a9);
  if (!v256)
    goto LABEL_55;
  if (!v58)
  {
    v11 = v66;
    goto LABEL_154;
  }
  if (*(_DWORD *)(v12 + 760) >= v58[7])
  {
    JSC::Heap::writeBarrierSlowPath(v12 + 192, (unint64_t)v58);
    v11 = v66;
    v89 = v256 == 0;
  }
  else
  {
    v11 = v66;
    v89 = 0;
  }
  v59 = v249;
  if (!v89 && !v249)
    goto LABEL_116;
LABEL_56:
  if (v59)
  {
LABEL_155:
    result = 2;
    goto LABEL_63;
  }
  if (BYTE1(v248))
  {
    if (BYTE1(v248) == 1 && v248 == 1
      || (result = 2, BYTE1(v248) == 2) && v248 == 1)
    {
      result = v242;
    }
  }
  else
  {
    result = 10;
  }
LABEL_63:
  if (v251)
  {
    v61 = *(_DWORD *)(v250 + 4);
    if (!v61)
    {
      __break(0xC471u);
      JUMPOUT(0x198764980);
    }
    *(_DWORD *)(v250 + 4) = v61 - 1;
  }
  return result;
}

uint64_t operationGetByIdDirectGaveUp(int64_t this, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int OwnPropertySlotInline;
  WTF::StringImpl *v18;
  uint64_t result;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  int v28;
  uint64_t v29;
  BOOL v30;
  char v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int8x16_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::AtomStringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t Error;
  double v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  _BYTE *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  unsigned __int16 *v67;
  uint64_t v68;
  unsigned int v69;
  BOOL v70;
  unsigned __int8 *v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  JSC::JSString *v75;
  uint64_t Index;
  int v77;
  _QWORD v78[2];
  unint64_t v79;
  unint64_t v80;
  _DWORD *v81;
  uint64_t v82;
  int v83;
  char v84;
  uint64_t v85;
  char v86;
  int8x16_t **v87;
  uint64_t v88;
  JSC::VM *v89;
  uint64_t vars0;

  v10 = *(JSC::JSGlobalObject **)(a2 + 56);
  v11 = *((_QWORD *)v10 + 7);
  v12 = vars0;
  *(_QWORD *)(v11 + 40) = vars0;
  *(_DWORD *)(v12 + 36) = *(_DWORD *)(a2 + 112);
  *(_WORD *)(a2 + 129) |= 2u;
  v13 = *(_QWORD *)(a2 + 16);
  a3.i64[0] = 0xFFFFFFFF00000000;
  v79 = 0xFFFFFFFF00000000;
  v81 = 0;
  v82 = 0;
  v80 = this;
  v83 = 0x20000;
  v84 = 0;
  LOBYTE(v85) = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  if (v13)
  {
    if ((v13 & 1) != 0)
      v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
    else
      v14 = *(_QWORD *)(v13 + 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = *((_QWORD *)v10 + 7);
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_62;
  v16 = *(unsigned __int8 *)(this + 5);
  if (v16 > 0x16)
  {
    OwnPropertySlotInline = JSC::JSObject::getOwnPropertySlotInline(this, (uint64_t)v10, v14, (uint64_t)v78, a6, a7, a8, a9);
    goto LABEL_7;
  }
  if (v16 != 2)
  {
LABEL_62:
    if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v37 = WTF::fastCompactMalloc((WTF *)0x20);
      v38.i64[0] = 0x1000000002;
      *(_QWORD *)v37 = 0x1000000002;
      *(_QWORD *)(v37 + 8) = "is not an object";
      *(_DWORD *)(v37 + 16) = 4;
      v89 = (JSC::VM *)v37;
      Error = JSC::createError((unint64_t)v10, this, (uint64_t *)&v89, (uint64_t)JSC::defaultSourceAppender, v39, v40, v41, v42, v38);
      if (*(_DWORD *)v37 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v37, v43, v44, v45, v46, v47, v48, v49);
        WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
      }
      else
      {
        *(_DWORD *)v37 -= 2;
      }
      if ((Error & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)Error & 0xFFFFFFFE) + 0x4C)))
      {
        Error = JSC::Exception::create(v15, (JSC::VM *)Error, 0, v45, v46, v47, v48, v49);
      }
      JSC::VM::throwException((JSC::VM *)v15, v10, (JSC::Exception *)Error, v51, v45, v46, v47, v48, v49);
    }
    goto LABEL_68;
  }
  if (*(_QWORD *)(*(_QWORD *)(v15 + 41952) + 1768) == v14)
  {
    v32 = *(_QWORD *)(this + 8);
    if ((v32 & 1) != 0)
      v33 = (unsigned int *)(this + 16);
    else
      v33 = (unsigned int *)(v32 + 4);
    v34 = *v33;
    if ((v34 & 0x80000000) != 0)
      v35 = COERCE__INT64((double)v34) + 0x2000000000000;
    else
      v35 = v34 | 0xFFFE000000000000;
    v78[0] = v35;
    v36 = 14;
    goto LABEL_61;
  }
  if (v14)
  {
    v60 = *(_DWORD *)(v14 + 16);
    if ((v60 & 0x20) == 0)
    {
      v61 = *(_BYTE **)(v14 + 8);
      v62 = *(unsigned int *)(v14 + 4);
      if ((v60 & 4) != 0)
      {
        if ((_DWORD)v62)
        {
          v63 = *v61 - 48;
          if (v63 <= 9 && (v62 < 2 || *v61 != 48))
          {
            v71 = v61 + 1;
            v72 = v62 - 1;
            while (v72)
            {
              if (v63 > 0x19999999)
                goto LABEL_76;
              v73 = *v71 - 48;
              if (v73 > 9)
                goto LABEL_76;
              v64 = 0;
              v65 = 0;
              v66 = 0;
              v70 = __CFADD__(v73, 10 * v63);
              v63 = v73 + 10 * v63;
              ++v71;
              --v72;
              if (v70)
                goto LABEL_105;
            }
            goto LABEL_99;
          }
        }
      }
      else if ((_DWORD)v62)
      {
        v63 = *(unsigned __int16 *)v61 - 48;
        if (v63 <= 9 && (*(_WORD *)v61 != 48 || v62 <= 1))
        {
          v67 = (unsigned __int16 *)(v61 + 2);
          v68 = v62 - 1;
          while (v68)
          {
            if (v63 > 0x19999999)
              goto LABEL_76;
            v69 = *v67 - 48;
            if (v69 > 9)
              goto LABEL_76;
            v64 = 0;
            v65 = 0;
            v66 = 0;
            v70 = __CFADD__(v69, 10 * v63);
            v63 = v69 + 10 * v63;
            ++v67;
            --v68;
            if (v70)
              goto LABEL_105;
          }
LABEL_99:
          v64 = 0x100000000;
          if (v63 == -1)
          {
            v64 = 0;
            v65 = 0;
          }
          else
          {
            v65 = v63;
          }
          if (v63 == -1)
            v66 = 0;
          else
            v66 = v63 & 0xFFFFFF00;
          goto LABEL_105;
        }
      }
LABEL_76:
      v64 = 0;
      v65 = 0;
      v66 = 0;
LABEL_105:
      v14 = v66 | v65;
      if ((v64 & 0x100000000) != 0)
      {
        v74 = *(_QWORD *)(this + 8);
        v75 = (JSC::JSString *)((v74 & 1) != 0 ? this + 16 : v74 + 4);
        if (*(_DWORD *)v75 > v14)
        {
          Index = JSC::JSString::getIndex((JSC::JSString *)this, v10, v14, a5, a6, a7, a8, a9, a3);
          if (!*(_DWORD *)(v15 + 80))
            goto LABEL_111;
          v77 = *(_DWORD *)(v15 + 80);
          if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, v14, a5, a6, a7, a8, a9);
          if (!*(_QWORD *)(v15 + 16))
          {
LABEL_111:
            v78[0] = Index;
            v36 = 10;
LABEL_61:
            LODWORD(v79) = v36;
            v81 = 0;
            OwnPropertySlotInline = 1;
            BYTE1(v83) = 1;
            goto LABEL_7;
          }
        }
      }
    }
  }
LABEL_68:
  OwnPropertySlotInline = 0;
LABEL_7:
  if (!*(_DWORD *)(v11 + 80))
  {
    if (!OwnPropertySlotInline)
    {
      result = 10;
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  v28 = *(_DWORD *)(v11 + 80);
  if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v14, a5, a6, a7, a8, a9);
  v29 = *(_QWORD *)(v11 + 16);
  v30 = v29 == 0;
  if (v29)
    v31 = 0;
  else
    v31 = OwnPropertySlotInline;
  if (v30)
    result = 10;
  else
    result = 0;
  if ((v31 & 1) != 0)
  {
LABEL_9:
    if (v13)
    {
      if ((v13 & 1) != 0)
        v18 = (WTF::StringImpl *)(v13 & 0xFFFFFFFFFFFFFFFELL);
      else
        v18 = *(WTF::StringImpl **)(v13 + 8);
    }
    else
    {
      v18 = 0;
    }
    if (BYTE1(v83) == 1)
    {
      result = v78[0];
    }
    else if (BYTE1(v83) == 2)
    {
      result = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v78, v10, v14, (uint64_t)v18, a6, a7, a8, a9);
    }
    else
    {
      v21 = (unint64_t)v81;
      v22 = *(_QWORD *)(16 * (*v81 & 0xFFFFFFFE) + 0x28);
      if ((v79 & 0x20) != 0)
        v21 = v80;
      if (HIBYTE(v83) != 1)
        goto LABEL_36;
      if ((v21 & 0xFFFE000000000002) != 0)
        goto LABEL_52;
      v23 = *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C);
      v24 = *(_DWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C) != 0;
      v25 = 16 * v23;
      if ((_DWORD)v23)
        v26 = v87 == (int8x16_t **)v25;
      else
        v26 = 1;
      if (!v26)
      {
        do
        {
          v25 = *(_QWORD *)(v25 + 16);
          v24 = v25 != 0;
        }
        while ((int8x16_t **)v25 != v87 && v25 != 0);
      }
      if (!v24)
      {
LABEL_52:
        v89 = (JSC::VM *)*((_QWORD *)v10 + 7);
        result = JSC::throwDOMAttributeGetterTypeError(v22, &v89, v87, v18);
      }
      else
      {
LABEL_36:
        result = ((uint64_t (*)(unint64_t))v78[0])(v22);
      }
    }
  }
LABEL_15:
  if (v86)
  {
    v20 = *(_DWORD *)(v85 + 4);
    if (!v20)
    {
      __break(0xC471u);
      JUMPOUT(0x1987657B8);
    }
    *(_DWORD *)(v85 + 4) = v20 - 1;
  }
  return result;
}

uint64_t operationGetByIdDirectGeneric(JSC::JSGlobalObject *a1, int64_t this, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v12;
  unsigned int v13;
  int OwnPropertySlotInline;
  WTF::StringImpl *v15;
  uint64_t result;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  BOOL v23;
  int v25;
  uint64_t v26;
  BOOL v27;
  char v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  int8x16_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t Error;
  double v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _BYTE *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  unsigned __int16 *v64;
  uint64_t v65;
  unsigned int v66;
  BOOL v67;
  unsigned __int8 *v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  JSC::JSString *v72;
  uint64_t Index;
  int v74;
  _QWORD v75[2];
  unint64_t v76;
  unint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  int v80;
  char v81;
  uint64_t v82;
  char v83;
  int8x16_t **v84;
  uint64_t v85;
  JSC::VM *var38[8];

  v9 = a3;
  v12 = *((_QWORD *)a1 + 7);
  *(JSC::VM **)(v12 + 40) = var38[7];
  a9.i64[0] = 0xFFFFFFFF00000000;
  v76 = 0xFFFFFFFF00000000;
  v78 = 0;
  v79 = 0;
  v77 = this;
  v80 = 0x20000;
  v81 = 0;
  LOBYTE(v82) = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  if (a3)
  {
    if ((a3 & 1) != 0)
      a3 &= ~1uLL;
    else
      a3 = *(_QWORD *)(a3 + 8);
  }
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_61;
  v13 = *(unsigned __int8 *)(this + 5);
  if (v13 > 0x16)
  {
    OwnPropertySlotInline = JSC::JSObject::getOwnPropertySlotInline(this, (uint64_t)a1, a3, (uint64_t)v75, a5, a6, a7, a8);
    goto LABEL_7;
  }
  if (v13 != 2)
  {
LABEL_61:
    if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v34 = WTF::fastCompactMalloc((WTF *)0x20);
      v35.i64[0] = 0x1000000002;
      *(_QWORD *)v34 = 0x1000000002;
      *(_QWORD *)(v34 + 8) = "is not an object";
      *(_DWORD *)(v34 + 16) = 4;
      var38[0] = (JSC::VM *)v34;
      Error = JSC::createError((unint64_t)a1, this, (uint64_t *)var38, (uint64_t)JSC::defaultSourceAppender, v36, v37, v38, v39, v35);
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v34, v40, v41, v42, v43, v44, v45, v46);
        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
      }
      else
      {
        *(_DWORD *)v34 -= 2;
      }
      if ((Error & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)Error & 0xFFFFFFFE) + 0x4C)))
      {
        Error = JSC::Exception::create(v12, (JSC::VM *)Error, 0, v42, v43, v44, v45, v46);
      }
      JSC::VM::throwException((JSC::VM *)v12, a1, (JSC::Exception *)Error, v48, v42, v43, v44, v45, v46);
    }
    goto LABEL_67;
  }
  if (*(_QWORD *)(*(_QWORD *)(v12 + 41952) + 1768) == a3)
  {
    v29 = *(_QWORD *)(this + 8);
    if ((v29 & 1) != 0)
      v30 = (unsigned int *)(this + 16);
    else
      v30 = (unsigned int *)(v29 + 4);
    v31 = *v30;
    if ((v31 & 0x80000000) != 0)
      v32 = COERCE__INT64((double)v31) + 0x2000000000000;
    else
      v32 = v31 | 0xFFFE000000000000;
    v75[0] = v32;
    v33 = 14;
    goto LABEL_60;
  }
  if (a3)
  {
    v57 = *(_DWORD *)(a3 + 16);
    if ((v57 & 0x20) == 0)
    {
      v58 = *(_BYTE **)(a3 + 8);
      v59 = *(unsigned int *)(a3 + 4);
      if ((v57 & 4) != 0)
      {
        if ((_DWORD)v59)
        {
          v60 = *v58 - 48;
          if (v60 <= 9 && (v59 < 2 || *v58 != 48))
          {
            v68 = v58 + 1;
            v69 = v59 - 1;
            while (v69)
            {
              if (v60 > 0x19999999)
                goto LABEL_75;
              v70 = *v68 - 48;
              if (v70 > 9)
                goto LABEL_75;
              v61 = 0;
              v62 = 0;
              v63 = 0;
              v67 = __CFADD__(v70, 10 * v60);
              v60 = v70 + 10 * v60;
              ++v68;
              --v69;
              if (v67)
                goto LABEL_104;
            }
            goto LABEL_98;
          }
        }
      }
      else if ((_DWORD)v59)
      {
        v60 = *(unsigned __int16 *)v58 - 48;
        if (v60 <= 9 && (*(_WORD *)v58 != 48 || v59 <= 1))
        {
          v64 = (unsigned __int16 *)(v58 + 2);
          v65 = v59 - 1;
          while (v65)
          {
            if (v60 > 0x19999999)
              goto LABEL_75;
            v66 = *v64 - 48;
            if (v66 > 9)
              goto LABEL_75;
            v61 = 0;
            v62 = 0;
            v63 = 0;
            v67 = __CFADD__(v66, 10 * v60);
            v60 = v66 + 10 * v60;
            ++v64;
            --v65;
            if (v67)
              goto LABEL_104;
          }
LABEL_98:
          v61 = 0x100000000;
          if (v60 == -1)
          {
            v61 = 0;
            v62 = 0;
          }
          else
          {
            v62 = v60;
          }
          if (v60 == -1)
            v63 = 0;
          else
            v63 = v60 & 0xFFFFFF00;
          goto LABEL_104;
        }
      }
LABEL_75:
      v61 = 0;
      v62 = 0;
      v63 = 0;
LABEL_104:
      a3 = v63 | v62;
      if ((v61 & 0x100000000) != 0)
      {
        v71 = *(_QWORD *)(this + 8);
        v72 = (JSC::JSString *)((v71 & 1) != 0 ? this + 16 : v71 + 4);
        if (*(_DWORD *)v72 > a3)
        {
          Index = JSC::JSString::getIndex((JSC::JSString *)this, a1, a3, a4, a5, a6, a7, a8, a9);
          if (!*(_DWORD *)(v12 + 80))
            goto LABEL_110;
          v74 = *(_DWORD *)(v12 + 80);
          if ((v74 & 0x27) != 0 && (v74 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (!*(_QWORD *)(v12 + 16))
          {
LABEL_110:
            v75[0] = Index;
            v33 = 10;
LABEL_60:
            LODWORD(v76) = v33;
            v78 = 0;
            OwnPropertySlotInline = 1;
            BYTE1(v80) = 1;
            goto LABEL_7;
          }
        }
      }
    }
  }
LABEL_67:
  OwnPropertySlotInline = 0;
LABEL_7:
  if (!*(_DWORD *)(v12 + 80))
  {
    if (!OwnPropertySlotInline)
    {
      result = 10;
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  v25 = *(_DWORD *)(v12 + 80);
  if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
  v26 = *(_QWORD *)(v12 + 16);
  v27 = v26 == 0;
  if (v26)
    v28 = 0;
  else
    v28 = OwnPropertySlotInline;
  if (v27)
    result = 10;
  else
    result = 0;
  if ((v28 & 1) != 0)
  {
LABEL_9:
    if (v9)
    {
      if ((v9 & 1) != 0)
        v15 = (WTF::StringImpl *)(v9 & 0xFFFFFFFFFFFFFFFELL);
      else
        v15 = *(WTF::StringImpl **)(v9 + 8);
    }
    else
    {
      v15 = 0;
    }
    if (BYTE1(v80) == 1)
    {
      result = v75[0];
    }
    else if (BYTE1(v80) == 2)
    {
      result = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v75, a1, a3, (uint64_t)v15, a5, a6, a7, a8);
    }
    else
    {
      v18 = (unint64_t)v78;
      v19 = *(_QWORD *)(16 * (*v78 & 0xFFFFFFFE) + 0x28);
      if ((v76 & 0x20) != 0)
        v18 = v77;
      if (HIBYTE(v80) != 1)
        goto LABEL_36;
      if ((v18 & 0xFFFE000000000002) != 0)
        goto LABEL_51;
      v20 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
      v21 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
      v22 = 16 * v20;
      if ((_DWORD)v20)
        v23 = v84 == (int8x16_t **)v22;
      else
        v23 = 1;
      if (!v23)
      {
        do
        {
          v22 = *(_QWORD *)(v22 + 16);
          v21 = v22 != 0;
        }
        while ((int8x16_t **)v22 != v84 && v22 != 0);
      }
      if (!v21)
      {
LABEL_51:
        var38[0] = *((JSC::VM **)a1 + 7);
        result = JSC::throwDOMAttributeGetterTypeError(v19, var38, v84, v15);
      }
      else
      {
LABEL_36:
        result = ((uint64_t (*)(unint64_t))v75[0])(v19);
      }
    }
  }
LABEL_15:
  if (v83)
  {
    v17 = *(_DWORD *)(v82 + 4);
    if (!v17)
    {
      __break(0xC471u);
      JUMPOUT(0x198765CD8);
    }
    *(_DWORD *)(v82 + 4) = v17 - 1;
  }
  return result;
}

uint64_t operationGetByIdDirectOptimize(uint64_t this, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::VM **v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int OwnPropertySlotInline;
  unsigned int v18;
  unsigned __int8 *v19;
  uint64_t result;
  int v21;
  unsigned int v22;
  unsigned __int8 *v23;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  char v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t NotAnObjectError;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _BYTE *v51;
  uint64_t v52;
  unsigned __int16 *v53;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;
  unsigned __int8 *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  JSC::JSString *v61;
  uint64_t Index;
  _QWORD v63[2];
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74[3];
  unsigned int v75;
  char v76;
  uint64_t v77;
  uint64_t vars0;

  v11 = *(JSC::VM ***)(a2 + 56);
  v12 = v11[7];
  v13 = vars0;
  *((_QWORD *)v12 + 5) = vars0;
  *(_DWORD *)(v13 + 36) = *(_DWORD *)(a2 + 112);
  v14 = *(_QWORD *)(a2 + 16);
  a3.i64[0] = 0xFFFFFFFF00000000;
  v64 = 0xFFFFFFFF00000000;
  v66 = 0;
  v67 = 0;
  v65 = this;
  v68 = 0x20000;
  v69 = 0;
  LOBYTE(v70) = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  if (v14)
  {
    if ((v14 & 1) != 0)
      v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
    else
      v15 = *(_QWORD *)(v14 + 8);
  }
  else
  {
    v15 = 0;
  }
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_77;
  v16 = *(unsigned __int8 *)(this + 5);
  if (v16 <= 0x16)
  {
    if (v16 == 2)
    {
      if (*(_QWORD *)(*((_QWORD *)v12 + 5244) + 1768) == v15)
      {
        v39 = *(_QWORD *)(this + 8);
        if ((v39 & 1) != 0)
          v40 = (unsigned int *)(this + 16);
        else
          v40 = (unsigned int *)(v39 + 4);
        v41 = *v40;
        if ((v41 & 0x80000000) != 0)
        {
          *(double *)a3.i64 = (double)v41;
          v42 = COERCE__INT64((double)v41) + 0x2000000000000;
        }
        else
        {
          v42 = v41 | 0xFFFE000000000000;
        }
        v63[0] = v42;
        v43 = 14;
        goto LABEL_76;
      }
      if (v15)
      {
        v50 = *(_DWORD *)(v15 + 16);
        if ((v50 & 0x20) == 0)
        {
          v51 = *(_BYTE **)(v15 + 8);
          v52 = *(unsigned int *)(v15 + 4);
          if ((v50 & 4) != 0)
          {
            if (!(_DWORD)v52)
              goto LABEL_79;
            v15 = *v51 - 48;
            if (v15 > 9 || v52 >= 2 && *v51 == 48)
              goto LABEL_79;
            v57 = v51 + 1;
            v58 = v52 - 1;
            while (v58)
            {
              if (v15 > 0x19999999)
                goto LABEL_79;
              v59 = *v57 - 48;
              if (v59 > 9)
                goto LABEL_79;
              OwnPropertySlotInline = 0;
              v56 = __CFADD__(v59, 10 * v15);
              v15 = v59 + 10 * (_DWORD)v15;
              ++v57;
              --v58;
              if (v56)
                goto LABEL_7;
            }
          }
          else
          {
            if (!(_DWORD)v52)
              goto LABEL_79;
            v15 = *(unsigned __int16 *)v51 - 48;
            if (v15 > 9 || *(_WORD *)v51 == 48 && v52 > 1)
              goto LABEL_79;
            v53 = (unsigned __int16 *)(v51 + 2);
            v54 = v52 - 1;
            while (v54)
            {
              if (v15 > 0x19999999)
                goto LABEL_79;
              v55 = *v53 - 48;
              if (v55 > 9)
                goto LABEL_79;
              OwnPropertySlotInline = 0;
              v56 = __CFADD__(v55, 10 * v15);
              v15 = v55 + 10 * (_DWORD)v15;
              ++v53;
              --v54;
              if (v56)
                goto LABEL_7;
            }
          }
          if ((_DWORD)v15 != -1)
          {
            v60 = *(_QWORD *)(this + 8);
            v61 = (JSC::JSString *)((v60 & 1) != 0 ? this + 16 : v60 + 4);
            if (*(_DWORD *)v61 > v15)
            {
              Index = JSC::JSString::getIndex((JSC::JSString *)this, (JSC::JSGlobalObject *)v11, v15, a5, a6, a7, a8, a9, a3);
              if (!*((_DWORD *)v12 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v12, a2, v15, a5, a6, a7, a8, a9))
              {
                v63[0] = Index;
                v43 = 10;
LABEL_76:
                LODWORD(v64) = v43;
                v66 = 0;
                OwnPropertySlotInline = 1;
                BYTE1(v68) = 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
LABEL_79:
      OwnPropertySlotInline = 0;
      goto LABEL_7;
    }
LABEL_77:
    if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      NotAnObjectError = JSC::createNotAnObjectError((unint64_t)v11, this);
      JSC::VM::throwException(v12, (JSC::JSGlobalObject *)v11, NotAnObjectError, v45, v46, v47, v48, v49);
    }
    goto LABEL_79;
  }
  OwnPropertySlotInline = JSC::JSObject::getOwnPropertySlotInline(this, (uint64_t)v11, v15, (uint64_t)v63, a6, a7, a8, a9);
LABEL_7:
  if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12, a2, v15, a5, a6, a7, a8, a9))
  {
    result = 0;
    goto LABEL_14;
  }
  if ((this & 0xFFFE000000000002) != 0 || (v18 = *(_DWORD *)this & 0xFFFFFFFE) == 0)
  {
    *(_WORD *)(a2 + 129) |= 0x10u;
    goto LABEL_12;
  }
  v19 = *(unsigned __int8 **)(v13 + 16);
  v77 = v14;
  *(_WORD *)(a2 + 129) |= 4u;
  if (*(_BYTE *)(a2 + 124))
  {
    --*(_BYTE *)(a2 + 124);
    goto LABEL_12;
  }
  v22 = *(unsigned __int8 *)(a2 + 125);
  if (v22 != 255)
    *(_BYTE *)(a2 + 125) = ++v22;
  if (xmmword_1ECF4C260 < v22)
  {
    *(_BYTE *)(a2 + 125) = 0;
    v34 = *(unsigned __int8 *)(a2 + 126);
    v35 = BYTE4(xmmword_1ECF4C260) << v34;
    v36 = v35;
    if (v35 == 255)
      LOBYTE(v35) = -2;
    if (v36 >> v34 == BYTE4(xmmword_1ECF4C260))
      v37 = v35;
    else
      v37 = -2;
    *(_BYTE *)(a2 + 124) = v37;
    if (v34 != 255)
      *(_BYTE *)(a2 + 126) = v34 + 1;
    *(_BYTE *)(a2 + 127) = 0;
    goto LABEL_39;
  }
  if (!*(_BYTE *)(a2 + 127))
  {
LABEL_39:
    JSC::repatchGetBy((uint64_t *)v11, v19, (const WTF::StringImpl *)this, v14, (uint64_t)v63, a2, 4, a9, *(uint8x8_t *)a3.i8);
    goto LABEL_12;
  }
  --*(_BYTE *)(a2 + 127);
  v76 = 0;
  v75 = v18;
  v23 = (unsigned __int8 *)(a2 + 128);
  if (__ldaxr((unsigned __int8 *)(a2 + 128)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v23))
  {
    goto LABEL_26;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 128);
LABEL_26:
  if (!*(_DWORD *)(a2 + 96))
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v74[0] = 0;
      v74[1] = 0;
      std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,1ul,0>(a2 + 80, v74, v15, a5, a6, a7, a8, a9);
    }
    else
    {
      v74[0] = 0;
      v74[1] = 0;
      std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,2ul,0>(a2 + 80, v74, v15, a5, a6, a7, a8, a9);
    }
    if (v74[0])
      WTF::fastFree((unint64_t)v74[0], v25, v26, v27, v28, v29, v30, v31);
  }
  v74[0] = (WTF *)&v75;
  v74[1] = (WTF *)&v77;
  v74[2] = (WTF *)&v76;
  WTF::switchOn<std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(std::monostate)#1},JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&)#1},JSC::StructureStubInfo::considerRepatchingCacheImpl(JSC::VM &,JSC::CodeBlock *,JSC::Structure *,JSC::CacheableIdentifier)::{lambda(WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&)#1}>(a2 + 80, (uint64_t)&v75, (uint64_t)&v76, (__int128 *)v74);
  v33 = __ldxr(v23);
  if (v33 == 1)
  {
    if (!__stlxr(0, v23))
      goto LABEL_36;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a2 + 128), 0, v32, a5, a6, a7, a8, a9);
LABEL_36:
  if (v76)
  {
    if (!v19)
      goto LABEL_39;
    if (*((_DWORD *)v12 + 190) < v19[7])
      goto LABEL_39;
    JSC::Heap::writeBarrierSlowPath((uint64_t)v12 + 192, (unint64_t)v19);
    if (v76)
      goto LABEL_39;
  }
LABEL_12:
  if (OwnPropertySlotInline)
  {
    if (v14)
    {
      if ((v14 & 1) != 0)
        v38 = (WTF::StringImpl *)(v14 & 0xFFFFFFFFFFFFFFFELL);
      else
        v38 = *(WTF::StringImpl **)(v14 + 8);
    }
    else
    {
      v38 = 0;
    }
    if (BYTE1(v68) == 1)
    {
      result = v63[0];
    }
    else if (BYTE1(v68) == 2)
    {
      result = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v63, (JSC::JSGlobalObject *)v11, (uint64_t)v38, a5, a6, a7, a8, a9);
    }
    else
    {
      result = JSC::PropertySlot::customGetter((uint64_t)v63, v11[7], v38);
    }
  }
  else
  {
    result = 10;
  }
LABEL_14:
  if (v71)
  {
    v21 = *(_DWORD *)(v70 + 4);
    if (!v21)
    {
      __break(0xC471u);
      JUMPOUT(0x198766328);
    }
    *(_DWORD *)(v70 + 4) = v21 - 1;
  }
  return result;
}

uint64_t operationGetByIdMegamorphic(unint64_t this, JSC::StructureStubInfo *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSString *v10;
  JSC::JSGlobalObject *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  unint64_t v36;
  uint64_t v38;
  JSC::JSString *v39;
  unint64_t v40;
  JSC::JSGlobalObject *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  __int16 v51;
  JSC::JSString *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned __int16 v61;
  _QWORD *v62;
  _DWORD *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  unsigned __int16 v78;
  _QWORD *v79;
  _DWORD *v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  __int16 v89;
  uint64_t v90;
  unsigned int v91;
  _BYTE *v92;
  unint64_t v93;
  uint64_t v94;
  JSC::JSString *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  unint64_t v108;
  uint64_t v109;
  JSC::JSString *v110;
  unint64_t v111;
  JSC::JSGlobalObject *v112;
  int v113;
  unsigned int v114;
  int v115;
  unint64_t v116;
  int v117;
  uint64_t v118;
  JSC::JSGlobalObject *v119;
  uint64_t v120;
  int v121;
  JSC::JSString *v122;
  unint64_t v123;
  JSC::JSGlobalObject *v124;
  JSC::JSString *v125;
  unint64_t v126;
  int v127;
  JSC::JSGlobalObject *v128;
  int v129;
  _WORD *v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  unint64_t v136;
  JSC::VM *v137;
  unint64_t v138;
  uint64_t v139;
  JSC::JSString *v140;
  JSC::JSGlobalObject *v141;
  uint64_t v142;
  char v143;
  JSC::JSArrayBufferView *v144;
  int v145;
  uint64_t v146;
  unint64_t v147;
  JSC::JSGlobalObject *v148;
  JSC::JSString *v149;
  __int16 v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  unint64_t v154;
  unint64_t v155;
  JSC::VM *v156;
  int8x16_t **v157;
  uint64_t v158;
  BOOL v159;
  uint64_t v160;
  BOOL v161;
  unint64_t v163;
  JSC::JSGlobalObject *v164;
  JSC::JSString *v165;
  __int16 v166;
  unint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  JSC::JSGlobalObject *v177;
  unint64_t v178;
  JSC::CodeBlock *v179;
  uint64_t v180;
  int v181;
  unsigned int v182;
  uint64_t v183;
  WTF::StringImpl *v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned __int16 *v195;
  uint64_t v196;
  unsigned int v197;
  BOOL v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  JSC::VM **v211;
  unint64_t v212;
  unint64_t v213;
  JSC::VM *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unsigned int v221;
  unsigned int v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  int v226;
  unint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  unsigned int v232;
  int v233;
  unint64_t v234;
  int v235;
  uint64_t v236;
  JSC::JSString *v237;
  unint64_t v238;
  JSC::JSGlobalObject *v239;
  char OwnStaticPropertySlot;
  int v241;
  uint64_t v242;
  uint64_t v243;
  int8x16_t **v244;
  unint64_t v245;
  JSC::JSGlobalObject *v246;
  unint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  int8x16_t **v258;
  int v259;
  int v260;
  unsigned int v261;
  char v262;
  JSC::JSGlobalObject *v263;
  unint64_t v264;
  JSC::StructureStubInfo *v265;
  int v266;
  _WORD *v267;
  uint64_t v268;
  unsigned int v269;
  uint64_t v270;
  unsigned int v271;
  unsigned int v272;
  JSC::VM *v273;
  uint64_t v274;
  JSC::JSGlobalObject *v275;
  JSC::VM *v276;
  uint64_t v277;
  unint64_t v278;
  unsigned int v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  unsigned __int16 *v284;
  uint64_t v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unint64_t v289;
  JSC::VM *v290;
  unint64_t v291;
  uint64_t v292;
  JSC::JSString *v293;
  JSC::JSGlobalObject *v294;
  int v295;
  uint64_t v296;
  int v297;
  int v298;
  uint64_t v299;
  unint64_t v300;
  char v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  int8x16_t **v305;
  int v306;
  int v307;
  unsigned int v308;
  char v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  int v313;
  int v314;
  unsigned int v315;
  char v316;
  JSC::JSGlobalObject *v317;
  unint64_t v318;
  uint64_t v319;
  unsigned int v320;
  JSC::JSGlobalObject *v321;
  unint64_t v322;
  char v323;
  int v324;
  unsigned int v325;
  uint64_t v326;
  unsigned __int8 *v327;
  int v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  int8x16_t **v332;
  _BOOL4 v333;
  double v334;
  const unsigned __int8 *v335;
  BOOL v336;
  int v337;
  int v338;
  unsigned int v339;
  char v340;
  uint64_t v341;
  char v342;
  int v343;
  unsigned int v344;
  uint64_t v345;
  unsigned __int8 *v346;
  int v347;
  unsigned int v348;
  unint64_t v349;
  uint64_t v350;
  unsigned __int8 *v351;
  unsigned int v352;
  JSC::JSGlobalObject *v353;
  unint64_t v354;
  uint64_t v355;
  unsigned int *v356;
  uint64_t v357;
  uint64_t Index;
  int v359;
  char v360;
  unint64_t v361;
  JSC::JSGlobalObject *v362;
  uint64_t v363;
  double v364;
  const unsigned __int8 *v365;
  int v366;
  _BYTE *v367;
  uint64_t v368;
  unsigned int v369;
  uint64_t v370;
  unsigned int v371;
  unsigned int v372;
  unsigned __int16 *v373;
  uint64_t v374;
  unsigned int v375;
  unsigned int v376;
  uint64_t v377;
  unsigned __int8 *v378;
  unsigned int v379;
  BOOL v380;
  uint64_t v381;
  JSC::JSString *v382;
  BOOL hasExceptionsAfterHandlingTraps;
  unsigned int v384;
  uint64_t v385;
  unsigned __int8 *v386;
  unsigned int v387;
  unsigned int v388;
  __int16 v389;
  JSC::JSString *v390;
  JSC::JSGlobalObject *v391;
  unint64_t v392;
  int v393;
  unint64_t v394;
  unint64_t v395;
  JSC::VM *v396;
  uint64_t (*v397)(unint64_t);
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  JSC::JSString *v401;
  _QWORD v402[2];
  uint64_t v403;
  char v404;
  int8x16_t **v405;
  uint64_t v406;
  unint64_t v407;
  JSC::VM *v408[18];
  unint64_t vars0;

  v10 = (JSC::JSString *)this;
  v408[16] = *(JSC::VM **)MEMORY[0x1E0C80C00];
  v11 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 7);
  v12 = vars0;
  v396 = (JSC::VM *)*((_QWORD *)v11 + 7);
  *((_QWORD *)v396 + 5) = vars0;
  *(_DWORD *)(v12 + 36) = *((_DWORD *)a2 + 28);
  v13 = *((_QWORD *)a2 + 2);
  v407 = this;
  if (v13)
  {
    if ((v13 & 1) != 0)
      v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
    else
      v14 = *(_QWORD *)(v13 + 8);
  }
  else
  {
    v14 = 0;
  }
  a9.i64[0] = 0xFFFFFFFF00000000;
  v399 = 0xFFFFFFFF00000000;
  LOBYTE(v403) = 0;
  v404 = 0;
  v405 = 0;
  v406 = 0;
  v401 = 0;
  memset(v402, 0, 13);
  v400 = this;
  v15 = this & 0xFFFE000000000002;
  if ((this & 0xFFFE000000000002) != 0 || (v16 = *(unsigned __int8 *)(this + 5), v16 <= 0x16))
  {
    v89 = *(_WORD *)((char *)a2 + 129);
    *(_WORD *)((char *)a2 + 129) = v89 | 4;
    if (*((_BYTE *)a2 + 124))
    {
      --*((_BYTE *)a2 + 124);
    }
    else
    {
      v175 = *((unsigned __int8 *)a2 + 125);
      if (v175 != 255)
        *((_BYTE *)a2 + 125) = ++v175;
      if (xmmword_1ECF4C260 < v175)
      {
        *((_BYTE *)a2 + 125) = 0;
        v259 = *((unsigned __int8 *)a2 + 126);
        v260 = BYTE4(xmmword_1ECF4C260) << v259;
        v261 = v260;
        if (v260 == 255)
          LOBYTE(v260) = -2;
        if (v261 >> v259 == BYTE4(xmmword_1ECF4C260))
          v262 = v260;
        else
          v262 = -2;
        *((_BYTE *)a2 + 124) = v262;
        if (v259 != 255)
          *((_BYTE *)a2 + 126) = v259 + 1;
        *((_BYTE *)a2 + 127) = 0;
      }
      else if (*((_BYTE *)a2 + 127))
      {
        --*((_BYTE *)a2 + 127);
      }
      v177 = v11;
      v178 = v14;
      v179 = *(JSC::CodeBlock **)(v12 + 16);
      if ((v89 & 0x200) != 0)
        *((_QWORD *)a2 + 6) = operationGetByIdOptimize;
      else
        JSC::ftlThunkAwareRepatchCall(*(_QWORD *)(v12 + 16), *((_QWORD *)a2 + 6), (int *)operationGetByIdOptimize, a4, a5, a6, a7, a8);
      JSC::StructureStubInfo::resetStubAsJumpInAccess(a2, v179, a3, a4, a5, a6, a7, a8);
      if ((*(_WORD *)((_BYTE *)a2 + 129) & 0x200) != 0)
        *((_QWORD *)a2 + 6) = operationGetByIdGaveUp;
      else
        JSC::ftlThunkAwareRepatchCall((uint64_t)v179, *((_QWORD *)a2 + 6), (int *)operationGetByIdGaveUp, a4, a5, a6, a7, a8);
      v14 = v178;
      v11 = v177;
      v10 = (JSC::JSString *)this;
    }
    if (v15)
      goto LABEL_582;
    v90 = *((_QWORD *)v11 + 7);
    v91 = *((unsigned __int8 *)v10 + 5);
    if (v91 > 0x16)
      goto LABEL_105;
    if (v91 != 2)
    {
LABEL_582:
      v361 = v14;
      v362 = v11;
      v363 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v407, (unint64_t)v11);
      if (!v363)
        goto LABEL_96;
      v10 = (JSC::JSString *)v363;
      v90 = *((_QWORD *)v362 + 7);
      v14 = v361;
      v11 = v362;
LABEL_105:
      v92 = (char *)v10 + 6;
      v93 = v14 >> 4;
      v94 = (uint64_t)v10;
      if ((*((_BYTE *)v10 + 6) & 8) == 0)
      {
        v95 = v10;
        do
        {
          v96 = *(_DWORD *)v95 & 0xFFFFFFFE;
          v97 = 16 * v96;
          if (!(_DWORD)v93 || (v93 & ~*(_DWORD *)(16 * v96 + 0x20)) != 0)
            goto LABEL_118;
          v98 = *(_QWORD *)(16 * v96 + 0x58);
          if (!v98)
          {
            v109 = *(_QWORD *)(16 * v96 + 0x40);
            if (!v109 || *(_BYTE *)(v109 + 5) != 1 && *(_DWORD *)(v109 + 80) < 2u)
              goto LABEL_118;
            v110 = v10;
            v111 = v14;
            v112 = v11;
            JSC::Structure::materializePropertyTable((JSC::Structure *)v97, (JSC::VM *)v90, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
            v10 = v110;
            v11 = v112;
            v14 = v111;
            if (!v98)
              goto LABEL_118;
          }
          if (!*(_DWORD *)(v98 + 24))
            goto LABEL_118;
          v99 = *(_QWORD *)(v98 + 16);
          v100 = v99 & 0xFFFFFFFFFFFFFFFELL;
          v101 = *(unsigned int *)(v98 + 8);
          v102 = *(_DWORD *)(v14 + 16);
          if ((v99 & 1) != 0)
          {
            if ((v102 & 0x20) != 0)
              v102 = *(_DWORD *)(v14 + 32);
            v103 = *(_DWORD *)(v98 + 12);
            v104 = (v102 >> 8) & *(_QWORD *)&v103;
            v105 = *(unsigned __int8 *)(v100 + v104);
            if (!*(_BYTE *)(v100 + v104))
              goto LABEL_118;
            v106 = v100 + v101;
            v107 = 1;
            while (1)
            {
              v108 = *(_QWORD *)(v106 + 8 * (v105 - 1));
              if (v14 == (v108 & 0xFFFFFFFFFFFFLL))
                break;
              v104 = ((_DWORD)v104 + v107) & v103;
              v105 = *(unsigned __int8 *)(v100 + v104);
              ++v107;
              if (!*(_BYTE *)(v100 + v104))
                goto LABEL_118;
            }
            a6 = (v108 >> 16) & 0xFF00000000 | HIBYTE(v108);
          }
          else
          {
            if ((v102 & 0x20) != 0)
              v102 = *(_DWORD *)(v14 + 32);
            v113 = *(_DWORD *)(v98 + 12);
            v114 = v113 & (v102 >> 8);
            v115 = *(_DWORD *)(v100 + 4 * v114);
            if (!v115)
              goto LABEL_118;
            v116 = v100 + 4 * v101;
            v117 = 1;
            while (1)
            {
              v118 = (v115 - 1);
              if (v14 == *(_QWORD *)(v116 + 16 * v118))
                break;
              v114 = (v114 + v117) & v113;
              v115 = *(_DWORD *)(v100 + 4 * v114);
              ++v117;
              if (!v115)
                goto LABEL_118;
            }
            a6 = *(unsigned int *)(v116 + 16 * v118 + 8) | ((unint64_t)*(unsigned __int8 *)(v116 + 16 * v118 + 12) << 32);
          }
          if ((_DWORD)a6 != -1)
          {
            a5 = HIDWORD(a6);
            if ((int)a6 <= 63)
            {
              v151 = (uint64_t)v95 + 16;
              v152 = a6 << 32;
            }
            else
            {
              v151 = *((_QWORD *)v95 + 1) - 8;
              v152 = 0x3F00000000 - (a6 << 32);
            }
            a4 = *(_QWORD *)(v151 + (v152 >> 29));
            if ((a4 & 0xFFFE000000000002) != 0)
              goto LABEL_176;
            v153 = *(unsigned __int8 *)(a4 + 5);
            if (v153 == 5)
            {
              v245 = v14;
              v246 = v11;
              JSC::JSObject::fillGetterPropertySlot((unsigned int *)v95, v90, (uint64_t)&v397, a4, SHIDWORD(a6), a6);
              v11 = v246;
              v14 = v245;
              goto LABEL_177;
            }
            if (v153 != 6)
            {
LABEL_176:
              v397 = (uint64_t (*)(unint64_t))a4;
              v401 = v95;
              v399 = __PAIR64__(a6, HIDWORD(a6));
              LOWORD(v402[1]) = 257;
              goto LABEL_177;
            }
            v255 = *(_DWORD *)(v97 + 16) & 3;
            v256 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v258 = *(int8x16_t ***)(a4 + 24);
              v257 = *(_QWORD *)(a4 + 32);
              v397 = *(uint64_t (**)(unint64_t))(a4 + 8);
              v398 = v256;
              LODWORD(v399) = HIDWORD(a6);
              v401 = v95;
              BYTE1(v402[1]) = 3;
              if (v255 != 2)
                LOBYTE(v402[1]) = 1;
              BYTE3(v402[1]) = 1;
              v405 = v258;
              v406 = v257;
              goto LABEL_177;
            }
            v397 = *(uint64_t (**)(unint64_t))(a4 + 8);
            v398 = v256;
            LODWORD(v399) = HIDWORD(a6);
            v401 = v95;
            BYTE1(v402[1]) = 3;
            if (v255 == 2)
            {
LABEL_177:
              if (BYTE1(v402[1]) == 1)
                goto LABEL_79;
              if (BYTE1(v402[1]) == 2)
                goto LABEL_141;
              v154 = (unint64_t)v401;
              v155 = *(_QWORD *)(16 * (*(_DWORD *)v401 & 0xFFFFFFFE) + 0x28);
              if ((v399 & 0x20) != 0)
                v154 = v400;
              if (BYTE3(v402[1]) == 1)
              {
                v156 = (JSC::VM *)*((_QWORD *)v11 + 7);
                v157 = v405;
                if ((v154 & 0xFFFE000000000002) != 0)
                  goto LABEL_472;
                v158 = *(unsigned int *)(16 * (*(_DWORD *)v154 & 0xFFFFFFFE) + 0x4C);
                v159 = *(_DWORD *)(16 * (*(_DWORD *)v154 & 0xFFFFFFFE) + 0x4C) != 0;
                v160 = 16 * v158;
                if ((_DWORD)v158)
                  v161 = v405 == (int8x16_t **)v160;
                else
                  v161 = 1;
                if (!v161)
                {
                  do
                  {
                    v160 = *(_QWORD *)(v160 + 16);
                    v159 = v160 != 0;
                  }
                  while ((int8x16_t **)v160 != v405 && v160 != 0);
                }
LABEL_233:
                if (!v159)
                {
LABEL_472:
                  v408[0] = v156;
                  v120 = JSC::throwDOMAttributeGetterTypeError(v155, v408, v157, (WTF::StringImpl *)v14);
                  goto LABEL_143;
                }
              }
LABEL_234:
              v120 = v397(v155);
              goto LABEL_143;
            }
LABEL_377:
            LOBYTE(v402[1]) = 1;
            goto LABEL_177;
          }
LABEL_118:
          if ((*v92 & 0x20) != 0)
          {
            v237 = v10;
            v238 = v14;
            v239 = v11;
            OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v95, (JSC::VM *)v90, v14, (uint64_t)&v397);
            v10 = v237;
            v11 = v239;
            v14 = v238;
            if ((OwnStaticPropertySlot & 1) != 0)
              goto LABEL_177;
          }
          v94 = *(_QWORD *)(v97 + 48);
          if (!v94)
            v94 = *((_QWORD *)v95 + 2);
          if ((v94 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v94 + 5) < 0x17u)
          {
            if (!v14)
              goto LABEL_96;
            v129 = *(_DWORD *)(v14 + 16);
            if ((v129 & 0x20) != 0)
              goto LABEL_96;
            v130 = *(_WORD **)(v14 + 8);
            v131 = *(unsigned int *)(v14 + 4);
            if ((v129 & 4) == 0)
            {
              if ((_DWORD)v131)
              {
                v132 = (unsigned __int16)*v130 - 48;
                if (v132 <= 9 && (*v130 != 48 || v131 <= 1))
                {
                  v195 = v130 + 1;
                  v196 = v131 - 1;
                  while (v196)
                  {
                    if (v132 > 0x19999999)
                      goto LABEL_154;
                    v197 = *v195 - 48;
                    if (v197 > 9)
                      goto LABEL_154;
                    v133 = 0;
                    LOBYTE(v131) = 0;
                    v134 = 0;
                    v198 = __CFADD__(v197, 10 * v132);
                    v132 = v197 + 10 * v132;
                    ++v195;
                    --v196;
                    if (v198)
                      goto LABEL_156;
                  }
                  v134 = v132 & 0xFFFFFF00;
                  v133 = 0x100000000;
                  if (v132 == -1)
                  {
                    v133 = 0;
                    LOBYTE(v131) = 0;
                  }
                  else
                  {
                    LOBYTE(v131) = v132;
                  }
                  if (v132 == -1)
                    v134 = 0;
LABEL_156:
                  v135 = v131;
LABEL_157:
                  if ((v133 & 0x100000000) == 0)
                    goto LABEL_96;
                  v136 = v134 | v135;
                  v137 = (JSC::VM *)*((_QWORD *)v11 + 7);
                  v67 = 10;
                  while (2)
                  {
                    v138 = v14;
                    v139 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
                    v140 = v10;
                    v141 = v11;
                    v143 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v139 + 0x4C) + 0x70))(v10, v11, v136, &v397);
                    if (*((_DWORD *)v137 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v137, v142, a3, a4, a5, a6, a7, a8))
                    {
                      goto LABEL_96;
                    }
                    v14 = v138;
                    v11 = v141;
                    if ((v143 & 1) != 0)
                      goto LABEL_177;
                    if (BYTE2(v402[1]) == 3)
                    {
                      if (BYTE4(v402[1]))
                        goto LABEL_96;
                      v144 = v140;
                      v145 = *((unsigned __int8 *)v140 + 5);
                      v14 = v138;
                      v11 = v141;
                      if (v145 != 61)
                      {
LABEL_163:
                        if ((v145 - 39) <= 0xA)
                        {
                          v349 = JSC::JSArrayBufferView::length(v144, v142, a3, a4, a5, a6, a7, a8);
                          v144 = v140;
                          v11 = v141;
                          v14 = v138;
                          if (v349 <= v136)
                            goto LABEL_96;
                        }
                      }
                    }
                    else
                    {
                      v144 = v140;
                      v145 = *((unsigned __int8 *)v140 + 5);
                      if (v145 != 61)
                        goto LABEL_163;
                      if (BYTE2(v402[1]) == 1)
                        goto LABEL_96;
                    }
                    if ((*(_WORD *)(v139 + 12) & 0x800) == 0 || BYTE2(v402[1]) == 3)
                    {
                      v146 = *(_QWORD *)(16 * (*(_DWORD *)v144 & 0xFFFFFFFE) + 0x30);
                      if (!v146)
                        v146 = *((_QWORD *)v144 + 2);
                    }
                    else
                    {
                      if ((*(_WORD *)(16 * (*(_DWORD *)v144 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                      {
                        v146 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *))(16
                                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)v144 & 0xFFFFFFFE) + 0x4C)
                                                                                                 + 0xB0))(v140, v141);
                      }
                      else
                      {
                        v146 = *(_QWORD *)(16 * (*(_DWORD *)v144 & 0xFFFFFFFE) + 0x30);
                        if (!v146)
                          v146 = *((_QWORD *)v140 + 2);
                      }
                      if (*((_DWORD *)v137 + 20))
                      {
                        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v137, v142, a3, a4, a5, a6, a7, a8);
                        v14 = v138;
                        v11 = v141;
                        if (hasExceptionsAfterHandlingTraps)
                          goto LABEL_96;
                      }
                      else
                      {
                        v14 = v138;
                        v11 = v141;
                      }
                    }
                    if ((v146 & 0xFFFE000000000002) != 0)
                      goto LABEL_80;
                    v10 = (JSC::JSString *)v146;
                    if (*(unsigned __int8 *)(v146 + 5) <= 0x16u)
                      goto LABEL_80;
                    continue;
                  }
                }
LABEL_154:
                v133 = 0;
                LOBYTE(v131) = 0;
              }
              else
              {
                v133 = 0;
              }
              v134 = 0;
              goto LABEL_156;
            }
            if ((_DWORD)v131)
            {
              v348 = *(unsigned __int8 *)v130 - 48;
              if (v348 <= 9 && (v131 < 2 || *(_BYTE *)v130 != 48))
              {
                v350 = v131 - 1;
                v351 = (unsigned __int8 *)v130 + 1;
                while (v350)
                {
                  if (v348 > 0x19999999)
                    goto LABEL_525;
                  v352 = *v351 - 48;
                  if (v352 > 9)
                    goto LABEL_525;
                  v135 = 0;
                  LOBYTE(v131) = 0;
                  v133 = 0;
                  v198 = __CFADD__(v352, 10 * v348);
                  v348 = v352 + 10 * v348;
                  --v350;
                  ++v351;
                  if (v198)
                    goto LABEL_527;
                }
                if (v348 == -1)
                  v135 = 0;
                else
                  v135 = v348 & 0xFFFFFF00;
                if (v348 == -1)
                  LOBYTE(v131) = 0;
                else
                  LOBYTE(v131) = v348;
                if (v348 == -1)
                  v133 = 0;
                else
                  v133 = 0x100000000;
                goto LABEL_527;
              }
LABEL_525:
              v135 = 0;
              LOBYTE(v131) = 0;
            }
            else
            {
              v135 = 0;
            }
            v133 = 0;
LABEL_527:
            v134 = v131;
            goto LABEL_157;
          }
          v92 = (_BYTE *)(v94 + 6);
          v95 = (JSC::JSString *)v94;
        }
        while ((*(_BYTE *)(v94 + 6) & 8) == 0);
      }
      if (!v14)
        goto LABEL_326;
      v266 = *(_DWORD *)(v14 + 16);
      if ((v266 & 0x20) != 0)
        goto LABEL_326;
      v267 = *(_WORD **)(v14 + 8);
      v268 = *(unsigned int *)(v14 + 4);
      if ((v266 & 4) == 0)
      {
        if ((_DWORD)v268)
        {
          v269 = (unsigned __int16)*v267 - 48;
          if (v269 <= 9 && (*v267 != 48 || v268 <= 1))
          {
            v284 = v267 + 1;
            v285 = v268 - 1;
            while (v285)
            {
              if (v269 > 0x19999999)
                goto LABEL_322;
              v286 = *v284 - 48;
              if (v286 > 9)
                goto LABEL_322;
              v270 = 0;
              LOBYTE(v268) = 0;
              v271 = 0;
              v198 = __CFADD__(v286, 10 * v269);
              v269 = v286 + 10 * v269;
              ++v284;
              --v285;
              if (v198)
                goto LABEL_324;
            }
            v271 = v269 & 0xFFFFFF00;
            v270 = 0x100000000;
            if (v269 == -1)
            {
              v270 = 0;
              LOBYTE(v268) = 0;
            }
            else
            {
              LOBYTE(v268) = v269;
            }
            if (v269 == -1)
              v271 = 0;
            goto LABEL_324;
          }
LABEL_322:
          v270 = 0;
          LOBYTE(v268) = 0;
        }
        else
        {
          v270 = 0;
        }
        v271 = 0;
LABEL_324:
        v272 = v268;
LABEL_325:
        if ((v270 & 0x100000000) == 0)
        {
LABEL_326:
          v273 = (JSC::VM *)*((_QWORD *)v11 + 7);
          v67 = 10;
          while (1)
          {
            v274 = 16 * (*(_DWORD *)v94 & 0xFFFFFFFE);
            if ((*(_BYTE *)(v94 + 6) & 8) != 0)
            {
              v321 = v11;
              v322 = v14;
              v323 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v94 & 0xFFFFFFFE) + 0x4C) + 0x68))(v94, v11, v14, &v397);
              if (*((_DWORD *)v273 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v273, (uint64_t)v10, a3, a4, a5, a6, a7, a8))
              {
                goto LABEL_96;
              }
              v14 = v322;
              v11 = v321;
              if ((v323 & 1) != 0)
                goto LABEL_177;
              if (BYTE2(v402[1]) == 3)
              {
                if (BYTE4(v402[1]))
                  goto LABEL_96;
                v324 = *(unsigned __int8 *)(v94 + 5);
                if (v324 == 61)
                {
LABEL_497:
                  v14 = v322;
                  v11 = v321;
                  goto LABEL_334;
                }
              }
              else
              {
                v324 = *(unsigned __int8 *)(v94 + 5);
                if (v324 == 61)
                {
                  v14 = v322;
                  v11 = v321;
                  if (BYTE2(v402[1]) == 1)
                    goto LABEL_96;
                  goto LABEL_334;
                }
              }
              if (!v322)
                goto LABEL_497;
              if ((v324 - 50) < 0xFFFFFFF5)
                goto LABEL_497;
              v325 = *(_DWORD *)(v322 + 16);
              if ((v325 & 0x20) != 0)
                goto LABEL_497;
              v326 = *(unsigned int *)(v322 + 4);
              if (!(_DWORD)v326)
                goto LABEL_497;
              v327 = *(unsigned __int8 **)(v322 + 8);
              if ((v325 & 4) != 0)
              {
                v328 = *v327;
                if ((_DWORD)v326 != 1)
                {
                  if (v328 != 45)
                  {
                    if ((v328 - 48) >= 0xA)
                    {
                      if ((_DWORD)v326 == 8)
                      {
LABEL_496:
                        if (v328 != 73)
                          goto LABEL_497;
                        goto LABEL_482;
                      }
LABEL_500:
                      if ((_DWORD)v326 != 3 || v328 != 78)
                        goto LABEL_497;
                    }
LABEL_482:
                    v392 = v392 & 0xFFFFFF0000000000 | v326 | ((unint64_t)((v325 >> 2) & 1) << 32);
                    JSC::jsToNumber(v327, v392);
                    WTF::numberToString(v408, v334);
                    v336 = WTF::equal(v322, (unint64_t)v408, v335);
                    v14 = v322;
                    v11 = v321;
                    if (v336)
                      goto LABEL_96;
                    goto LABEL_334;
                  }
                  v328 = v327[1];
LABEL_475:
                  if ((v328 - 48) >= 0xA)
                  {
                    if ((_DWORD)v326 != 9)
                      goto LABEL_497;
                    goto LABEL_496;
                  }
                  if ((_DWORD)v326 == 2)
                    goto LABEL_96;
                  goto LABEL_482;
                }
              }
              else
              {
                v328 = *(unsigned __int16 *)v327;
                if ((_DWORD)v326 != 1)
                {
                  if (v328 != 45)
                  {
                    if ((v328 - 48) >= 0xA && ((_DWORD)v326 != 8 || v328 != 73))
                      goto LABEL_500;
                    goto LABEL_482;
                  }
                  v328 = *((unsigned __int16 *)v327 + 1);
                  goto LABEL_475;
                }
              }
              v14 = v322;
              v11 = v321;
              if ((v328 - 48) < 0xA)
                goto LABEL_96;
            }
            else
            {
              v275 = v11;
              if ((_DWORD)v93)
              {
                if ((v93 & ~*(_DWORD *)(16 * (*(_DWORD *)v94 & 0xFFFFFFFE) + 0x20)) == 0)
                {
                  v276 = (JSC::VM *)v14;
                  JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v94 & 0xFFFFFFFE)), v273, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                  v14 = (unint64_t)v276;
                  if (v277)
                  {
                    v408[0] = v276;
                    v278 = JSC::PropertyTable::get(v277, (uint64_t *)v408);
                    v14 = (unint64_t)v276;
                    a6 = v278;
                    if ((_DWORD)v278 != -1)
                    {
                      a5 = HIDWORD(v278);
                      if ((int)v278 <= 63)
                      {
                        v281 = v94 + 16;
                        v282 = v278 << 32;
                      }
                      else
                      {
                        v281 = *(_QWORD *)(v94 + 8) - 8;
                        v282 = 0x3F00000000 - (v278 << 32);
                      }
                      a4 = *(_QWORD *)(v281 + (v282 >> 29));
                      if ((a4 & 0xFFFE000000000002) != 0)
                      {
LABEL_350:
                        v397 = (uint64_t (*)(unint64_t))a4;
                        v401 = (JSC::JSString *)v94;
                        v399 = __PAIR64__(v278, HIDWORD(v278));
                        LOWORD(v402[1]) = 257;
                        goto LABEL_351;
                      }
                      v283 = *(unsigned __int8 *)(a4 + 5);
                      if (v283 == 5)
                      {
                        JSC::JSObject::fillGetterPropertySlot((unsigned int *)v94, (uint64_t)v273, (uint64_t)&v397, a4, SHIDWORD(v278), v278);
                        goto LABEL_351;
                      }
                      if (v283 != 6)
                        goto LABEL_350;
                      v302 = *(_DWORD *)(v274 + 16) & 3;
                      v303 = *(_QWORD *)(a4 + 16);
                      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
                      {
                        v305 = *(int8x16_t ***)(a4 + 24);
                        v304 = *(_QWORD *)(a4 + 32);
                        v397 = *(uint64_t (**)(unint64_t))(a4 + 8);
                        v398 = v303;
                        LODWORD(v399) = HIDWORD(v278);
                        v401 = (JSC::JSString *)v94;
                        BYTE1(v402[1]) = 3;
                        if (v302 != 2)
                          LOBYTE(v402[1]) = 1;
                        BYTE3(v402[1]) = 1;
                        v405 = v305;
                        v406 = v304;
LABEL_351:
                        v14 = (unint64_t)v276;
                        v11 = v275;
                        goto LABEL_177;
                      }
                      v397 = *(uint64_t (**)(unint64_t))(a4 + 8);
                      v398 = v303;
                      LODWORD(v399) = HIDWORD(v278);
                      v401 = (JSC::JSString *)v94;
                      BYTE1(v402[1]) = 3;
                      v14 = (unint64_t)v276;
                      v11 = v275;
                      if (v302 == 2)
                        goto LABEL_177;
                      goto LABEL_377;
                    }
                  }
                }
              }
              if ((*(_BYTE *)(v94 + 6) & 0x20) != 0)
              {
                v300 = v14;
                v301 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v94, v273, v14, (uint64_t)&v397);
                v11 = v275;
                v14 = v300;
                if ((v301 & 1) != 0)
                  goto LABEL_177;
              }
              else
              {
                v11 = v275;
              }
            }
LABEL_334:
            if ((*(_WORD *)(v274 + 12) & 0x800) == 0)
            {
              v279 = *(_DWORD *)v94;
LABEL_336:
              v280 = *(_QWORD *)(16 * (v279 & 0xFFFFFFFE) + 0x30);
              if (!v280)
                v280 = *(_QWORD *)(v94 + 16);
              goto LABEL_338;
            }
            v279 = *(_DWORD *)v94;
            if (BYTE2(v402[1]) == 3)
              goto LABEL_336;
            v317 = v11;
            v318 = v14;
            v319 = 16 * (v279 & 0xFFFFFFFE);
            if ((*(_WORD *)(v319 + 12) & 0x800) != 0)
            {
              v280 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v319 + 76)
                                                                               + 0xB0))(v94, v11);
            }
            else
            {
              v280 = *(_QWORD *)(v319 + 48);
              if (!v280)
                v280 = *(_QWORD *)(v94 + 16);
            }
            if (*((_DWORD *)v273 + 20))
            {
              v380 = JSC::VM::hasExceptionsAfterHandlingTraps(v273, (uint64_t)v10, a3, a4, a5, a6, a7, a8);
              v14 = v318;
              v11 = v317;
              if (v380)
                goto LABEL_96;
            }
            else
            {
              v14 = v318;
              v11 = v317;
            }
LABEL_338:
            if ((v280 & 0xFFFE000000000002) == 0)
            {
              v94 = v280;
              if (*(unsigned __int8 *)(v280 + 5) > 0x16u)
                continue;
            }
            goto LABEL_80;
          }
        }
        v289 = v271 | v272;
        v290 = (JSC::VM *)*((_QWORD *)v11 + 7);
        v67 = 10;
        while (1)
        {
          v291 = v14;
          v292 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
          v293 = v10;
          v294 = v11;
          v295 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v292 + 0x4C) + 0x70))(v10, v11, v289, &v397);
          v297 = v295;
          if (*((_DWORD *)v290 + 20))
          {
            v333 = JSC::VM::hasExceptionsAfterHandlingTraps(v290, v296, a3, a4, a5, a6, a7, a8);
            if (((v333 | v297) & 1) != 0)
            {
              v14 = v291;
              v11 = v294;
              if (v333)
                goto LABEL_96;
              goto LABEL_177;
            }
          }
          else
          {
            v14 = v291;
            v11 = v294;
            if ((v295 & 1) != 0)
              goto LABEL_177;
          }
          if (BYTE2(v402[1]) == 3)
          {
            if (BYTE4(v402[1]))
              goto LABEL_96;
            v298 = *((unsigned __int8 *)v293 + 5);
            if (v298 != 61)
            {
LABEL_391:
              if ((v298 - 39) <= 0xA
                && JSC::JSArrayBufferView::length(v293, v296, a3, a4, a5, a6, a7, a8) <= v289)
              {
                goto LABEL_96;
              }
            }
          }
          else
          {
            v298 = *((unsigned __int8 *)v293 + 5);
            if (v298 != 61)
              goto LABEL_391;
            if (BYTE2(v402[1]) == 1)
              goto LABEL_96;
          }
          if ((*(_WORD *)(v292 + 12) & 0x800) == 0 || BYTE2(v402[1]) == 3)
          {
            v299 = *(_QWORD *)(16 * (*(_DWORD *)v293 & 0xFFFFFFFE) + 0x30);
            if (!v299)
              v299 = *((_QWORD *)v293 + 2);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v293 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v299 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *))(16
                                                                                       * *(unsigned int *)(16 * (*(_DWORD *)v293 & 0xFFFFFFFE) + 0x4C)
                                                                                       + 0xB0))(v293, v294);
            }
            else
            {
              v299 = *(_QWORD *)(16 * (*(_DWORD *)v293 & 0xFFFFFFFE) + 0x30);
              if (!v299)
                v299 = *((_QWORD *)v293 + 2);
            }
            if (*((_DWORD *)v290 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v290, v296, a3, a4, a5, a6, a7, a8))
              goto LABEL_96;
          }
          if ((v299 & 0xFFFE000000000002) == 0)
          {
            v10 = (JSC::JSString *)v299;
            v14 = v291;
            v11 = v294;
            if (*(unsigned __int8 *)(v299 + 5) > 0x16u)
              continue;
          }
          goto LABEL_80;
        }
      }
      if ((_DWORD)v268)
      {
        v376 = *(unsigned __int8 *)v267 - 48;
        if (v376 <= 9 && (v268 < 2 || *(_BYTE *)v267 != 48))
        {
          v377 = v268 - 1;
          v378 = (unsigned __int8 *)v267 + 1;
          while (v377)
          {
            if (v376 > 0x19999999)
              goto LABEL_625;
            v379 = *v378 - 48;
            if (v379 > 9)
              goto LABEL_625;
            v272 = 0;
            LOBYTE(v268) = 0;
            v270 = 0;
            v198 = __CFADD__(v379, 10 * v376);
            v376 = v379 + 10 * v376;
            --v377;
            ++v378;
            if (v198)
              goto LABEL_627;
          }
          if (v376 == -1)
            v272 = 0;
          else
            v272 = v376 & 0xFFFFFF00;
          if (v376 == -1)
            LOBYTE(v268) = 0;
          else
            LOBYTE(v268) = v376;
          if (v376 == -1)
            v270 = 0;
          else
            v270 = 0x100000000;
          goto LABEL_627;
        }
LABEL_625:
        v272 = 0;
        LOBYTE(v268) = 0;
      }
      else
      {
        v272 = 0;
      }
      v270 = 0;
LABEL_627:
      v271 = v268;
      goto LABEL_325;
    }
    v353 = v11;
    v354 = v14;
    if (*(_QWORD *)(*(_QWORD *)(v90 + 41952) + 1768) == v14)
    {
      v355 = *((_QWORD *)v10 + 1);
      if ((v355 & 1) != 0)
        v356 = (unsigned int *)((char *)v10 + 16);
      else
        v356 = (unsigned int *)(v355 + 4);
      v357 = *v356;
      if ((v357 & 0x80000000) != 0)
        Index = COERCE__INT64((double)v357) + 0x2000000000000;
      else
        Index = v357 | 0xFFFE000000000000;
      v359 = 14;
      goto LABEL_579;
    }
    if (!v14 || (v366 = *(_DWORD *)(v14 + 16), (v366 & 0x20) != 0))
    {
LABEL_604:
      v360 = 0;
      goto LABEL_580;
    }
    v367 = *(_BYTE **)(v14 + 8);
    v368 = *(unsigned int *)(v14 + 4);
    if ((v366 & 4) != 0)
    {
      if (!(_DWORD)v368 || (v384 = *v367 - 48, v384 > 9) || v368 >= 2 && *v367 == 48)
      {
LABEL_710:
        v372 = 0;
        LOBYTE(v371) = 0;
        v370 = 0;
      }
      else
      {
        v385 = v368 - 1;
        v386 = v367 + 1;
        while (v385)
        {
          if (v384 <= 0x19999999)
          {
            v387 = *v386 - 48;
            if (v387 <= 9)
            {
              v198 = __CFADD__(v387, 10 * v384);
              v384 = v387 + 10 * v384;
              --v385;
              ++v386;
              if (!v198)
                continue;
            }
          }
          goto LABEL_710;
        }
        v372 = v384 & 0xFFFFFF00;
        if (v384 == -1)
        {
          v372 = 0;
          LOBYTE(v371) = 0;
        }
        else
        {
          LOBYTE(v371) = v384;
        }
        if (v384 == -1)
          v370 = 0;
        else
          v370 = 0x100000000;
      }
      v371 = v371;
LABEL_603:
      if ((v370 & 0x100000000) != 0)
      {
        a3 = v371 | v372;
        v381 = *((_QWORD *)v10 + 1);
        v382 = (v381 & 1) != 0 ? (JSC::JSString *)((char *)v10 + 16) : (JSC::JSString *)(v381 + 4);
        if (*(_DWORD *)v382 > a3)
        {
          Index = JSC::JSString::getIndex(v10, v11, a3, a4, a5, a6, a7, a8, a9);
          if (!*(_DWORD *)(v90 + 80)
            || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v90, (uint64_t)v10, a3, a4, a5, a6, a7, a8))
          {
            v359 = 10;
LABEL_579:
            v397 = (uint64_t (*)(unint64_t))Index;
            LODWORD(v399) = v359;
            v401 = 0;
            v360 = 1;
            BYTE1(v402[1]) = 1;
LABEL_580:
            if (*(_DWORD *)(v90 + 80)
              && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v90, (uint64_t)v10, a3, a4, a5, a6, a7, a8))
            {
              goto LABEL_96;
            }
            v14 = v354;
            v11 = v353;
            if ((v360 & 1) != 0)
              goto LABEL_177;
            goto LABEL_582;
          }
        }
      }
      goto LABEL_604;
    }
    if ((_DWORD)v368)
    {
      v369 = *(unsigned __int16 *)v367 - 48;
      if (v369 <= 9 && (*(_WORD *)v367 != 48 || v368 <= 1))
      {
        v373 = (unsigned __int16 *)(v367 + 2);
        v374 = v368 - 1;
        while (v374)
        {
          if (v369 > 0x19999999)
            goto LABEL_600;
          v375 = *v373 - 48;
          if (v375 > 9)
            goto LABEL_600;
          v370 = 0;
          LOBYTE(v368) = 0;
          v371 = 0;
          v198 = __CFADD__(v375, 10 * v369);
          v369 = v375 + 10 * v369;
          ++v373;
          --v374;
          if (v198)
            goto LABEL_602;
        }
        v371 = v369 & 0xFFFFFF00;
        v370 = 0x100000000;
        if (v369 == -1)
        {
          v370 = 0;
          LOBYTE(v368) = 0;
        }
        else
        {
          LOBYTE(v368) = v369;
        }
        if (v369 == -1)
          v371 = 0;
        goto LABEL_602;
      }
LABEL_600:
      v370 = 0;
      LOBYTE(v368) = 0;
    }
    else
    {
      v370 = 0;
    }
    v371 = 0;
LABEL_602:
    v372 = v368;
    goto LABEL_603;
  }
  v17 = v14 >> 4;
  a3 = 3;
  a7 = 257;
  a8 = 0x3F00000000;
  v18 = this;
  v19 = 1;
  while ((*(_BYTE *)(v18 + 6) & 8) == 0 || v16 == 26 || v16 == 36 || v18 == *((_QWORD *)v11 + 84))
  {
    if (!(_DWORD)v17)
      goto LABEL_19;
    v20 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
    if ((v17 & ~*(_DWORD *)(v20 + 0x20)) != 0)
      goto LABEL_19;
    v21 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x58);
    if (!v21)
    {
      v38 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x40);
      if (!v38 || *(_BYTE *)(v38 + 5) != 1 && *(_DWORD *)(v38 + 80) < 2u)
        goto LABEL_19;
      v39 = v10;
      v40 = v14;
      v393 = v19;
      v41 = v11;
      JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE)), v396, 1, (const JSC::PropertyTable *)a4, a5, a6, 257, 0x3F00000000);
      a8 = 0x3F00000000;
      a7 = 257;
      a3 = 3;
      v10 = v39;
      v11 = v41;
      v19 = v393;
      v14 = v40;
      if (!v21)
        goto LABEL_19;
    }
    if (!*(_DWORD *)(v21 + 24))
      goto LABEL_19;
    v22 = *(_QWORD *)(v21 + 16);
    v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
    v24 = *(unsigned int *)(v21 + 8);
    v25 = *(_DWORD *)(v14 + 16);
    if ((v22 & 1) != 0)
    {
      if ((v25 & 0x20) != 0)
        v25 = *(_DWORD *)(v14 + 32);
      v26 = *(_DWORD *)(v21 + 12);
      v27 = (v25 >> 8) & *(_QWORD *)&v26;
      v28 = *(unsigned __int8 *)(v23 + v27);
      if (!*(_BYTE *)(v23 + v27))
        goto LABEL_19;
      v29 = v23 + v24;
      v30 = 1;
      while (1)
      {
        v31 = *(_QWORD *)(v29 + 8 * (v28 - 1));
        if (v14 == (v31 & 0xFFFFFFFFFFFFLL))
          break;
        v27 = ((_DWORD)v27 + v30) & v26;
        v28 = *(unsigned __int8 *)(v23 + v27);
        ++v30;
        if (!*(_BYTE *)(v23 + v27))
          goto LABEL_19;
      }
      a6 = (v31 >> 16) & 0xFF00000000 | HIBYTE(v31);
    }
    else
    {
      if ((v25 & 0x20) != 0)
        v25 = *(_DWORD *)(v14 + 32);
      v45 = *(_DWORD *)(v21 + 12);
      v46 = v45 & (v25 >> 8);
      v47 = *(_DWORD *)(v23 + 4 * v46);
      if (!v47)
      {
LABEL_19:
        if ((*(_BYTE *)(v18 + 6) & 0x20) != 0)
        {
          v121 = v19;
          v122 = v10;
          v123 = v14;
          v124 = v11;
          v32 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v18, v396, v14, (uint64_t)&v397);
          a8 = 0x3F00000000;
          a7 = 257;
          a3 = 3;
          v10 = v122;
          v19 = v121;
          v11 = v124;
          v14 = v123;
        }
        else
        {
          v32 = 0;
        }
        goto LABEL_21;
      }
      v48 = v23 + 4 * v24;
      v49 = 1;
      while (1)
      {
        v50 = (v47 - 1);
        if (v14 == *(_QWORD *)(v48 + 16 * v50))
          break;
        v46 = (v46 + v49) & v45;
        v47 = *(_DWORD *)(v23 + 4 * v46);
        ++v49;
        if (!v47)
          goto LABEL_19;
      }
      a6 = *(unsigned int *)(v48 + 16 * v50 + 8) | ((unint64_t)*(unsigned __int8 *)(v48 + 16 * v50 + 12) << 32);
    }
    if ((_DWORD)a6 == -1)
      goto LABEL_19;
    if ((int)a6 <= 63)
    {
      v42 = v18 + 16;
      v43 = a6 << 32;
    }
    else
    {
      v42 = *(_QWORD *)(v18 + 8) - 8;
      v43 = 0x3F00000000 - (a6 << 32);
    }
    a5 = HIDWORD(a6);
    a4 = *(_QWORD *)(v42 + (v43 >> 29));
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_49;
    v44 = *(unsigned __int8 *)(a4 + 5);
    if (v44 == 5)
    {
      v125 = v10;
      v126 = v14;
      v127 = v19;
      v128 = v11;
      JSC::JSObject::fillGetterPropertySlot((unsigned int *)v18, (uint64_t)v396, (uint64_t)&v397, a4, SHIDWORD(a6), a6);
      a8 = 0x3F00000000;
      a7 = 257;
      a3 = 3;
      v10 = v125;
      v11 = v128;
      v19 = v127;
      v14 = v126;
      v32 = 1;
      goto LABEL_21;
    }
    if (v44 == 6)
    {
      v241 = *(_DWORD *)(v20 + 16) & 3;
      v242 = *(_QWORD *)(a4 + 16);
      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                               + 0x4C)))
      {
        v244 = *(int8x16_t ***)(a4 + 24);
        v243 = *(_QWORD *)(a4 + 32);
        v397 = *(uint64_t (**)(unint64_t))(a4 + 8);
        v398 = v242;
        LODWORD(v399) = HIDWORD(a6);
        v401 = (JSC::JSString *)v18;
        BYTE1(v402[1]) = 3;
        v32 = 1;
        if (v241 != 2)
          LOBYTE(v402[1]) = 1;
        BYTE3(v402[1]) = 1;
        v405 = v244;
        v406 = v243;
      }
      else
      {
        v397 = *(uint64_t (**)(unint64_t))(a4 + 8);
        v398 = v242;
        LODWORD(v399) = HIDWORD(a6);
        v401 = (JSC::JSString *)v18;
        v32 = 1;
        BYTE1(v402[1]) = 3;
        if (v241 != 2)
          LOBYTE(v402[1]) = 1;
      }
    }
    else
    {
LABEL_49:
      v397 = (uint64_t (*)(unint64_t))a4;
      v401 = (JSC::JSString *)v18;
      v399 = __PAIR64__(a6, HIDWORD(a6));
      v32 = 1;
      LOWORD(v402[1]) = 257;
    }
LABEL_21:
    if ((*(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x10) & 3) == 2
      || (v33 = *(unsigned __int16 *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0xC), (v33 & 8) != 0))
    {
      v34 = 0;
    }
    else if ((v33 & 0x10) != 0)
    {
      v34 = (v33 >> 5) & 1;
    }
    else
    {
      v34 = 1;
    }
    v35 = v19 & v34;
    if (v32)
    {
      if (v35 && BYTE1(v402[1]) == 1 && LOBYTE(v402[1]) == 1 && (v51 = WORD2(v399), SHIDWORD(v399) < 0x10000))
      {
        v52 = v401;
        v53 = *(unsigned int *)v10;
        if (v401 == v10 || (v54 = *(_DWORD *)((16 * v53) | 0x10), (v54 & 3) == 0))
        {
          if ((*((_QWORD *)v396 + 11635) & 1) != 0)
            v55 = 0;
          else
            v55 = *((_QWORD *)v396 + 11635);
          v56 = v53 ^ (v53 >> 11);
          v57 = *(_DWORD *)(v14 + 16);
          if (v57 < 0x100)
          {
            v147 = v14;
            v148 = v11;
            v149 = v10;
            v150 = WORD2(v399);
            LOWORD(v58) = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v14);
            v51 = v150;
            v10 = v149;
            v11 = v148;
            v14 = v147;
          }
          else
          {
            v58 = v57 >> 8;
          }
          v59 = ((_WORD)v58 + (_WORD)v56) & 0x7FF;
          v60 = v55 + 24 * (((_WORD)v58 + (_WORD)v56) & 0x7FF);
          v62 = (_QWORD *)(v60 + 12);
          v61 = *(_WORD *)(v60 + 12);
          LODWORD(v63) = *(unsigned __int16 *)(v55 + 133120);
          v64 = *(WTF::StringImpl **)v60;
          if (v61 == (_DWORD)v63)
          {
            v83 = v55 + 24 * v59;
            v84 = *(_DWORD *)(v83 + 8);
            v63 = (_DWORD *)(v83 + 8);
            v85 = ((_WORD)v84 + (_WORD)v64 + (unsigned __int16)((v84 + (_DWORD)v64) >> 9)) & 0x1FF;
            v86 = 24
                * (((_WORD)v84 + (_WORD)v64 + (unsigned __int16)((v84 + (_DWORD)v64) >> 9)) & 0x1FF);
            *(_QWORD *)v60 = 0;
            v87 = *(WTF::StringImpl **)(v55 + 49152 + v86);
            *(_QWORD *)(v55 + 49152 + v86) = v64;
            if (v87)
            {
              if (*(_DWORD *)v87 == 2)
              {
                v391 = v11;
                v394 = v14;
                v390 = v10;
                v389 = v51;
                v388 = v85;
                WTF::StringImpl::~StringImpl(v87, v10, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v203, v204, v205, v206, v207, v208, v209, v210);
                v85 = v388;
                v51 = v389;
                v10 = v390;
                v11 = v391;
                v14 = v394;
                v61 = *(_WORD *)(v55 + 133120);
                v64 = *(WTF::StringImpl **)v60;
              }
              else
              {
                v64 = 0;
                *(_DWORD *)v87 -= 2;
              }
            }
            else
            {
              v64 = 0;
            }
            v88 = v55 + 49152 + 24 * v85;
            *(_DWORD *)(v88 + 8) = *v63;
            *(_QWORD *)(v88 + 12) = *v62;
            *(_DWORD *)(v88 + 20) = *(_DWORD *)(v60 + 20);
            LOWORD(v63) = v61;
          }
          *(_DWORD *)v14 += 2;
          *(_QWORD *)v60 = v14;
          if (v64)
          {
            if (*(_DWORD *)v64 == 2)
            {
              v163 = v14;
              v164 = v11;
              v165 = v10;
              v166 = v51;
              WTF::StringImpl::~StringImpl(v64, v10, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v167, v168, v169, v170, v171, v172, v173, v174);
              v51 = v166;
              v10 = v165;
              v11 = v164;
              v14 = v163;
            }
            else
            {
              *(_DWORD *)v64 -= 2;
            }
          }
          v65 = v55 + 24 * v59;
          *(_DWORD *)(v65 + 8) = v53;
          *(_WORD *)v62 = (_WORD)v63;
          *(_WORD *)(v65 + 14) = v51;
          if (v52 == v10)
            v66 = 1;
          else
            v66 = (uint64_t)v52;
          *(_QWORD *)(v65 + 16) = v66;
LABEL_78:
          if (BYTE1(v402[1]) == 1)
          {
LABEL_79:
            v67 = (uint64_t)v397;
            goto LABEL_80;
          }
          if (BYTE1(v402[1]) == 2)
          {
LABEL_141:
            v119 = v11;
            goto LABEL_142;
          }
          v199 = (unint64_t)v401;
          v155 = *(_QWORD *)(16 * (*(_DWORD *)v401 & 0xFFFFFFFE) + 0x28);
          if ((v399 & 0x20) != 0)
            v199 = v400;
          if (BYTE3(v402[1]) == 1)
          {
            v156 = (JSC::VM *)*((_QWORD *)v11 + 7);
            v157 = v405;
            if ((v199 & 0xFFFE000000000002) == 0)
            {
              v200 = *(unsigned int *)(16 * (*(_DWORD *)v199 & 0xFFFFFFFE) + 0x4C);
              v159 = *(_DWORD *)(16 * (*(_DWORD *)v199 & 0xFFFFFFFE) + 0x4C) != 0;
              if ((_DWORD)v200)
              {
                v201 = 16 * v200;
                if (v405 != (int8x16_t **)v201)
                {
                  do
                  {
                    v201 = *(_QWORD *)(v201 + 16);
                    v159 = v201 != 0;
                  }
                  while ((int8x16_t **)v201 != v405 && v201 != 0);
                }
              }
              goto LABEL_233;
            }
            goto LABEL_472;
          }
          goto LABEL_234;
        }
        if ((v54 & 0x800000) == 0 || !a2)
          goto LABEL_78;
        v263 = v11;
        v264 = v14;
        *(_WORD *)((char *)a2 + 129) |= 4u;
        v265 = a2;
        if (*((_BYTE *)a2 + 124))
        {
          --*((_BYTE *)a2 + 124);
LABEL_368:
          v14 = v264;
          v11 = v263;
          goto LABEL_78;
        }
        v287 = *((unsigned __int8 *)a2 + 125);
      }
      else
      {
        if (!a2)
          goto LABEL_78;
        *(_WORD *)((char *)a2 + 129) |= 4u;
        if (*((_BYTE *)a2 + 124))
        {
          --*((_BYTE *)a2 + 124);
          goto LABEL_78;
        }
        v263 = v11;
        v264 = v14;
        v265 = a2;
        v287 = *((unsigned __int8 *)a2 + 125);
      }
      if (v287 != 255)
        *((_BYTE *)v265 + 125) = ++v287;
      if (xmmword_1ECF4C260 < v287)
      {
        *((_BYTE *)v265 + 125) = 0;
        v306 = *((unsigned __int8 *)v265 + 126);
        v307 = BYTE4(xmmword_1ECF4C260) << v306;
        v308 = v307;
        if (v307 == 255)
          LOBYTE(v307) = -2;
        if (v308 >> v306 == BYTE4(xmmword_1ECF4C260))
          v309 = v307;
        else
          v309 = -2;
        *((_BYTE *)v265 + 124) = v309;
        if (v306 != 255)
          *((_BYTE *)v265 + 126) = v306 + 1;
        *((_BYTE *)v265 + 127) = 0;
      }
      else if (*((_BYTE *)v265 + 127))
      {
        --*((_BYTE *)v265 + 127);
      }
      JSC::repatchGetBySlowPathCall(*(JSC::CodeBlock **)(v12 + 16), (uint64_t)v265, 0, a4, a5, a6, 257, 0x3F00000000);
      goto LABEL_368;
    }
    v36 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x30);
    if ((*(_WORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0xC) & 0x80) != 0 || v36 == 0)
      v19 = 0;
    else
      v19 = v35;
    if (!v36)
      v36 = *(_QWORD *)(v18 + 16);
    if ((v36 & 0xFFFE000000000002) == 0)
    {
      v16 = *(unsigned __int8 *)(v36 + 5);
      v18 = v36;
      if (v16 > 0x16)
        continue;
    }
    if (!v19)
      goto LABEL_342;
    v70 = *(unsigned int *)v10;
    v71 = *(_DWORD *)((16 * v70) | 0x10);
    if ((v71 & 3) == 0)
    {
      if ((*((_QWORD *)v396 + 11635) & 1) != 0)
        v72 = 0;
      else
        v72 = *((_QWORD *)v396 + 11635);
      v73 = v70 ^ (v70 >> 11);
      v74 = *(_DWORD *)(v14 + 16);
      if (v74 < 0x100)
      {
        v186 = v14;
        LOWORD(v75) = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v14);
        v14 = v186;
      }
      else
      {
        v75 = v74 >> 8;
      }
      v76 = ((_WORD)v75 + (_WORD)v73) & 0x7FF;
      v77 = v72 + 24 * (((_WORD)v75 + (_WORD)v73) & 0x7FF);
      v79 = (_QWORD *)(v77 + 12);
      v78 = *(_WORD *)(v77 + 12);
      LODWORD(v80) = *(unsigned __int16 *)(v72 + 133120);
      v81 = *(WTF::StringImpl **)v77;
      if (v78 == (_DWORD)v80)
      {
        v180 = v72 + 24 * v76;
        v181 = *(_DWORD *)(v180 + 8);
        v80 = (_DWORD *)(v180 + 8);
        v182 = (v181 + (_DWORD)v81 + ((v181 + (_DWORD)v81) >> 9)) & 0x1FF;
        v183 = 24 * v182;
        *(_QWORD *)v77 = 0;
        v184 = *(WTF::StringImpl **)(v72 + 49152 + v183);
        *(_QWORD *)(v72 + 49152 + v183) = v81;
        if (v184)
        {
          if (*(_DWORD *)v184 == 2)
          {
            v395 = v14;
            WTF::StringImpl::~StringImpl(v184, v10, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v247, v248, v249, v250, v251, v252, v253, v254);
            v14 = v395;
            v78 = *(_WORD *)(v72 + 133120);
            v81 = *(WTF::StringImpl **)v77;
          }
          else
          {
            v81 = 0;
            *(_DWORD *)v184 -= 2;
          }
        }
        else
        {
          v81 = 0;
        }
        v185 = v72 + 49152 + 24 * v182;
        *(_DWORD *)(v185 + 8) = *v80;
        *(_QWORD *)(v185 + 12) = *v79;
        *(_DWORD *)(v185 + 20) = *(_DWORD *)(v77 + 20);
        LOWORD(v80) = v78;
      }
      *(_DWORD *)v14 += 2;
      *(_QWORD *)v77 = v14;
      if (v81)
      {
        if (*(_DWORD *)v81 == 2)
        {
          WTF::StringImpl::~StringImpl(v81, v10, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v187, v188, v189, v190, v191, v192, v193, v194);
        }
        else
        {
          *(_DWORD *)v81 -= 2;
        }
      }
      v82 = v72 + 24 * v76;
      *(_DWORD *)(v82 + 8) = v70;
      *(_WORD *)v79 = (_WORD)v80;
      *(_WORD *)(v82 + 14) = 0;
      *(_QWORD *)(v82 + 16) = 0;
      goto LABEL_96;
    }
    if ((v71 & 0x800000) != 0)
    {
LABEL_342:
      if (a2)
      {
        *(_WORD *)((char *)a2 + 129) |= 4u;
        if (*((_BYTE *)a2 + 124))
        {
          --*((_BYTE *)a2 + 124);
        }
        else
        {
          v288 = *((unsigned __int8 *)a2 + 125);
          if (v288 != 255)
            *((_BYTE *)a2 + 125) = ++v288;
          if (xmmword_1ECF4C260 < v288)
          {
            *((_BYTE *)a2 + 125) = 0;
            v313 = *((unsigned __int8 *)a2 + 126);
            v314 = BYTE4(xmmword_1ECF4C260) << v313;
            v315 = v314;
            if (v314 == 255)
              LOBYTE(v314) = -2;
            if (v315 >> v313 == BYTE4(xmmword_1ECF4C260))
              v316 = v314;
            else
              v316 = -2;
            *((_BYTE *)a2 + 124) = v316;
            if (v313 != 255)
              *((_BYTE *)a2 + 126) = v313 + 1;
            *((_BYTE *)a2 + 127) = 0;
          }
          else if (*((_BYTE *)a2 + 127))
          {
            --*((_BYTE *)a2 + 127);
          }
          JSC::repatchGetBySlowPathCall(*(JSC::CodeBlock **)(v12 + 16), (uint64_t)a2, 0, a4, a5, a6, 257, 0x3F00000000);
        }
      }
    }
LABEL_96:
    v67 = 10;
    goto LABEL_80;
  }
  v211 = (JSC::VM **)v11;
  v212 = v14;
  v213 = v18;
  if (a2)
  {
    v10 = a2;
    *(_WORD *)((char *)a2 + 129) |= 4u;
    if (*((_BYTE *)a2 + 124))
    {
      --*((_BYTE *)a2 + 124);
    }
    else
    {
      v320 = *((unsigned __int8 *)a2 + 125);
      if (v320 != 255)
        *((_BYTE *)a2 + 125) = ++v320;
      if (xmmword_1ECF4C260 < v320)
      {
        *((_BYTE *)a2 + 125) = 0;
        v337 = *((unsigned __int8 *)a2 + 126);
        v338 = BYTE4(xmmword_1ECF4C260) << v337;
        v339 = v338;
        if (v338 == 255)
          LOBYTE(v338) = -2;
        if (v339 >> v337 == BYTE4(xmmword_1ECF4C260))
          v340 = v338;
        else
          v340 = -2;
        *((_BYTE *)a2 + 124) = v340;
        if (v337 != 255)
          *((_BYTE *)a2 + 126) = v337 + 1;
        *((_BYTE *)a2 + 127) = 0;
      }
      else if (*((_BYTE *)a2 + 127))
      {
        --*((_BYTE *)a2 + 127);
      }
      JSC::repatchGetBySlowPathCall(*(JSC::CodeBlock **)(v12 + 16), (uint64_t)a2, 0, a4, a5, a6, 257, 0x3F00000000);
    }
  }
  v214 = v211[7];
  v67 = 10;
  while (1)
  {
    v215 = *(_DWORD *)v213 & 0xFFFFFFFE;
    v216 = 16 * v215;
    if ((*(_BYTE *)(v213 + 6) & 8) == 0)
      break;
    v342 = (*(uint64_t (**)(unint64_t, JSC::VM **, unint64_t, uint64_t (**)(unint64_t), uint64_t, unint64_t, uint64_t, uint64_t))(16 * *(unsigned int *)(16 * v215 + 0x4C) + 0x68))(v213, v211, v212, &v397, a5, a6, a7, a8);
    if (*((_DWORD *)v214 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v214, (uint64_t)v10, a3, a4, a5, a6, a7, a8))
      goto LABEL_96;
    if ((v342 & 1) != 0)
      goto LABEL_457;
    if (BYTE2(v402[1]) == 3)
    {
      if (BYTE4(v402[1]))
        goto LABEL_96;
      v343 = *(unsigned __int8 *)(v213 + 5);
      if (v343 != 61)
      {
LABEL_515:
        if ((v343 - 50) < 0xFFFFFFF5)
          goto LABEL_256;
        if (!v212)
          goto LABEL_256;
        v344 = *(_DWORD *)(v212 + 16);
        if ((v344 & 0x20) != 0)
          goto LABEL_256;
        v345 = *(unsigned int *)(v212 + 4);
        if (!(_DWORD)v345)
          goto LABEL_256;
        v346 = *(unsigned __int8 **)(v212 + 8);
        if ((v344 & 4) == 0)
        {
          v347 = *(unsigned __int16 *)v346;
          if ((_DWORD)v345 == 1)
            goto LABEL_521;
          if (v347 == 45)
          {
            v347 = *((unsigned __int16 *)v346 + 1);
            goto LABEL_566;
          }
          if ((v347 - 48) >= 0xA && ((_DWORD)v345 != 8 || v347 != 73))
          {
LABEL_592:
            if ((_DWORD)v345 != 3 || v347 != 78)
              goto LABEL_256;
          }
LABEL_585:
          v12 = v12 & 0xFFFFFF0000000000 | v345 | ((unint64_t)((v344 >> 2) & 1) << 32);
          JSC::jsToNumber(v346, v12);
          WTF::numberToString(v408, v364);
          if (WTF::equal(v212, (unint64_t)v408, v365))
            goto LABEL_96;
          goto LABEL_256;
        }
        v347 = *v346;
        if ((_DWORD)v345 == 1)
        {
LABEL_521:
          if ((v347 - 48) < 0xA)
            goto LABEL_96;
          goto LABEL_256;
        }
        if (v347 == 45)
        {
          v347 = v346[1];
LABEL_566:
          if ((v347 - 48) < 0xA)
          {
            if ((_DWORD)v345 == 2)
              goto LABEL_96;
            goto LABEL_585;
          }
          if ((_DWORD)v345 != 9)
            goto LABEL_256;
        }
        else
        {
          if ((v347 - 48) < 0xA)
            goto LABEL_585;
          if ((_DWORD)v345 != 8)
            goto LABEL_592;
        }
        if (v347 != 73)
          goto LABEL_256;
        goto LABEL_585;
      }
    }
    else
    {
      v343 = *(unsigned __int8 *)(v213 + 5);
      if (v343 != 61)
        goto LABEL_515;
      if (BYTE2(v402[1]) == 1)
        goto LABEL_96;
    }
LABEL_256:
    if ((*(_WORD *)(v216 + 12) & 0x800) == 0)
    {
      v228 = *(_DWORD *)v213;
LABEL_258:
      v229 = *(_QWORD *)(16 * (v228 & 0xFFFFFFFE) + 0x30);
      if (!v229)
        v229 = *(_QWORD *)(v213 + 16);
      goto LABEL_260;
    }
    v228 = *(_DWORD *)v213;
    if (BYTE2(v402[1]) == 3)
      goto LABEL_258;
    v341 = 16 * (v228 & 0xFFFFFFFE);
    if ((*(_WORD *)(v341 + 12) & 0x800) != 0)
    {
      v229 = (*(uint64_t (**)(unint64_t, JSC::VM **, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(16 * *(unsigned int *)(v341 + 76) + 0xB0))(v213, v211, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v229 = *(_QWORD *)(v341 + 48);
      if (!v229)
        v229 = *(_QWORD *)(v213 + 16);
    }
    if (*((_DWORD *)v214 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v214, (uint64_t)v10, a3, a4, a5, a6, a7, a8))
      goto LABEL_96;
LABEL_260:
    if ((v229 & 0xFFFE000000000002) == 0)
    {
      v213 = v229;
      if (*(unsigned __int8 *)(v229 + 5) > 0x16u)
        continue;
    }
    goto LABEL_80;
  }
  if (!(_DWORD)v17 || (v17 & ~*(_DWORD *)(16 * v215 + 0x20)) != 0)
    goto LABEL_255;
  v217 = *(_QWORD *)(16 * v215 + 0x58);
  if (!v217)
  {
    v230 = *(_QWORD *)(16 * v215 + 0x40);
    if (!v230 || *(_BYTE *)(v230 + 5) != 1 && *(_DWORD *)(v230 + 80) < 2u)
      goto LABEL_255;
    JSC::Structure::materializePropertyTable((JSC::Structure *)v216, v214, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v217)
      goto LABEL_255;
  }
  if (!*(_DWORD *)(v217 + 24))
    goto LABEL_255;
  v218 = *(_QWORD *)(v217 + 16);
  v219 = v218 & 0xFFFFFFFFFFFFFFFELL;
  v220 = *(unsigned int *)(v217 + 8);
  v221 = *(_DWORD *)(v212 + 16);
  if ((v218 & 1) != 0)
  {
    if ((v221 & 0x20) != 0)
      v221 = *(_DWORD *)(v212 + 32);
    v222 = *(_DWORD *)(v217 + 12);
    v223 = (v221 >> 8) & *(_QWORD *)&v222;
    v224 = *(unsigned __int8 *)(v219 + v223);
    if (*(_BYTE *)(v219 + v223))
    {
      v225 = v219 + v220;
      v226 = 1;
      while (1)
      {
        v227 = *(_QWORD *)(v225 + 8 * (v224 - 1));
        if (v212 == (v227 & 0xFFFFFFFFFFFFLL))
          break;
        v223 = ((_DWORD)v223 + v226) & v222;
        v224 = *(unsigned __int8 *)(v219 + v223);
        ++v226;
        if (!*(_BYTE *)(v219 + v223))
          goto LABEL_255;
      }
      a6 = (v227 >> 16) & 0xFF00000000 | HIBYTE(v227);
      goto LABEL_268;
    }
    goto LABEL_255;
  }
  if ((v221 & 0x20) != 0)
    v221 = *(_DWORD *)(v212 + 32);
  v231 = *(_DWORD *)(v217 + 12);
  v232 = v231 & (v221 >> 8);
  v233 = *(_DWORD *)(v219 + 4 * v232);
  if (!v233)
    goto LABEL_255;
  v234 = v219 + 4 * v220;
  v235 = 1;
  while (1)
  {
    v236 = (v233 - 1);
    if (v212 == *(_QWORD *)(v234 + 16 * v236))
      break;
    v232 = (v232 + v235) & v231;
    v233 = *(_DWORD *)(v219 + 4 * v232);
    ++v235;
    if (!v233)
      goto LABEL_255;
  }
  a6 = *(unsigned int *)(v234 + 16 * v236 + 8) | ((unint64_t)*(unsigned __int8 *)(v234 + 16 * v236 + 12) << 32);
LABEL_268:
  if ((_DWORD)a6 == -1)
  {
LABEL_255:
    if ((*(_BYTE *)(v213 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v213, v214, v212, (uint64_t)&v397) & 1) != 0)
    {
      goto LABEL_457;
    }
    goto LABEL_256;
  }
  if ((int)a6 <= 63)
  {
    v310 = v213 + 16;
    v311 = a6 << 32;
  }
  else
  {
    v310 = *(_QWORD *)(v213 + 8) - 8;
    v311 = 0x3F00000000 - (a6 << 32);
  }
  v67 = *(_QWORD *)(v310 + (v311 >> 29));
  if ((v67 & 0xFFFE000000000002) != 0)
    goto LABEL_422;
  v312 = *(unsigned __int8 *)(v67 + 5);
  if (v312 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v213, (uint64_t)v214, (uint64_t)&v397, v67, SHIDWORD(a6), a6);
LABEL_457:
    if (BYTE1(v402[1]) != 2)
    {
      if (BYTE1(v402[1]) != 1)
        goto LABEL_471;
      goto LABEL_79;
    }
    v119 = (JSC::JSGlobalObject *)v211;
LABEL_142:
    v120 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v397, v119, a3, a4, a5, a6, a7, a8);
    goto LABEL_143;
  }
  if (v312 != 6)
  {
LABEL_422:
    v397 = (uint64_t (*)(unint64_t))v67;
    v401 = (JSC::JSString *)v213;
    v399 = __PAIR64__(a6, HIDWORD(a6));
    LOWORD(v402[1]) = 257;
    goto LABEL_80;
  }
  v329 = *(_DWORD *)(v216 + 16) & 3;
  v330 = *(_QWORD *)(v67 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v67 & 0xFFFFFFFE) + 0x4C)))
  {
    v332 = *(int8x16_t ***)(v67 + 24);
    v331 = *(_QWORD *)(v67 + 32);
    v397 = *(uint64_t (**)(unint64_t))(v67 + 8);
    v398 = v330;
    LODWORD(v399) = HIDWORD(a6);
    v401 = (JSC::JSString *)v213;
    BYTE1(v402[1]) = 3;
    if (v329 != 2)
      LOBYTE(v402[1]) = 1;
    BYTE3(v402[1]) = 1;
    v405 = v332;
    v406 = v331;
  }
  else
  {
    v397 = *(uint64_t (**)(unint64_t))(v67 + 8);
    v398 = v330;
    LODWORD(v399) = HIDWORD(a6);
    v401 = (JSC::JSString *)v213;
    BYTE1(v402[1]) = 3;
    if (v329 != 2)
      LOBYTE(v402[1]) = 1;
  }
LABEL_471:
  v120 = JSC::PropertySlot::customGetter((uint64_t)&v397, v211[7], (WTF::StringImpl *)v212);
LABEL_143:
  v67 = v120;
LABEL_80:
  if (v404)
  {
    v68 = *(_DWORD *)(v403 + 4);
    if (!v68)
    {
      __break(0xC471u);
      JUMPOUT(0x198767684);
    }
    *(_DWORD *)(v403 + 4) = v68 - 1;
  }
  return v67;
}

uint64_t operationGetByIdMegamorphicGeneric(JSC::JSGlobalObject *a1, uint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  unint64_t v14;
  int v15;
  char **v16;
  unint64_t v17;
  JSC::JSString *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  JSC::JSString *v36;
  uint64_t v38;
  JSC::JSString *v39;
  unint64_t v40;
  char **v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  JSC::JSString *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned __int16 v61;
  _QWORD *v62;
  _DWORD *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  _QWORD *v78;
  _DWORD *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  JSC::JSGlobalObject *v88;
  uint64_t v89;
  JSC::JSString *v90;
  unint64_t v91;
  char **v92;
  JSC::JSString *v93;
  unint64_t v94;
  char **v95;
  unint64_t v96;
  JSC::JSString *v97;
  __int16 v98;
  unint64_t v99;
  JSC::JSString *v100;
  __int16 v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  JSC::VM *v127;
  int8x16_t **v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  BOOL v132;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char **v142;
  unint64_t v143;
  JSC::VM *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  int v156;
  unint64_t v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  unsigned int v162;
  int v163;
  unint64_t v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  int8x16_t **v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  int8x16_t **v185;
  uint64_t v186;
  int v187;
  unsigned int v188;
  uint64_t v189;
  unsigned __int8 *v190;
  int v191;
  unint64_t v192;
  uint64_t v193;
  unsigned int *v194;
  uint64_t v195;
  uint64_t Index;
  int v197;
  char v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _BYTE *v203;
  unint64_t v204;
  uint64_t v205;
  JSC::VM *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unsigned int v214;
  unsigned int v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  int v219;
  unint64_t v220;
  uint64_t v221;
  int v222;
  unsigned int v223;
  int v224;
  unint64_t v225;
  int v226;
  uint64_t v227;
  int v228;
  _WORD *v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  unsigned int v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  unsigned __int16 *v238;
  uint64_t v239;
  unsigned int v240;
  BOOL v241;
  char OwnStaticPropertySlot;
  unint64_t v243;
  JSC::VM *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  char v248;
  int v249;
  uint64_t v250;
  unsigned int v251;
  unint64_t v252;
  uint64_t v253;
  BOOL v254;
  uint64_t v255;
  BOOL v256;
  int v258;
  uint64_t v259;
  uint64_t v260;
  int8x16_t **v261;
  int v262;
  _WORD *v263;
  uint64_t v264;
  unsigned int v265;
  uint64_t v266;
  unsigned int v267;
  unsigned int v268;
  JSC::VM *v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unsigned int v273;
  uint64_t v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  unsigned __int16 *v279;
  uint64_t v280;
  unsigned int v281;
  unint64_t v282;
  JSC::VM *v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  int v287;
  int v288;
  uint64_t v289;
  unsigned int v290;
  char v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  int8x16_t **v295;
  uint64_t v296;
  char v297;
  int v298;
  unsigned int v299;
  uint64_t v300;
  unsigned __int8 *v301;
  int v302;
  _BOOL4 v303;
  double v304;
  const unsigned __int8 *v305;
  BOOL v306;
  unsigned int v307;
  int v308;
  _WORD *v309;
  uint64_t v310;
  unsigned int v311;
  uint64_t v312;
  unsigned int v313;
  unsigned int v314;
  uint64_t v315;
  unsigned __int8 *v316;
  unsigned int v317;
  double v318;
  const unsigned __int8 *v319;
  unsigned __int16 *v320;
  uint64_t v321;
  unsigned int v322;
  unsigned int v323;
  uint64_t v324;
  unsigned __int8 *v325;
  unsigned int v326;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v328;
  JSC::JSString *v329;
  unsigned int v330;
  uint64_t v331;
  unsigned __int8 *v332;
  unsigned int v333;
  unsigned int v334;
  __int16 v335;
  JSC::JSString *v336;
  unint64_t v337;
  unint64_t v338;
  char v339;
  unint64_t v340;
  unsigned int v341;
  uint64_t (*v342)(unint64_t);
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  JSC::JSString *v346;
  _QWORD v347[2];
  uint64_t v348;
  char v349;
  int8x16_t **v350;
  uint64_t v351;
  uint64_t v352;
  JSC::VM *varE0[29];

  v9 = (unint64_t)a1;
  varE0[16] = *(JSC::VM **)MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)a1 + 7);
  *(JSC::VM **)(v10 + 40) = varE0[28];
  v352 = this;
  if (a3)
  {
    if ((a3 & 1) != 0)
      v11 = a3 & 0xFFFFFFFFFFFFFFFELL;
    else
      v11 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    v11 = 0;
  }
  a9.i64[0] = 0xFFFFFFFF00000000;
  v344 = 0xFFFFFFFF00000000;
  LOBYTE(v348) = 0;
  v349 = 0;
  v350 = 0;
  v351 = 0;
  v346 = 0;
  memset(v347, 0, 13);
  v345 = this;
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_235;
  v340 = (unint64_t)a1;
  v12 = *(unsigned __int8 *)(this + 5);
  if (v12 <= 0x16)
  {
    v192 = v11;
    if (v12 != 2)
    {
      v9 = (unint64_t)a1;
      goto LABEL_235;
    }
    if (*(_QWORD *)(*(_QWORD *)(v10 + 41952) + 1768) == v11)
    {
      v193 = *(_QWORD *)(this + 8);
      if ((v193 & 1) != 0)
        v194 = (unsigned int *)(this + 16);
      else
        v194 = (unsigned int *)(v193 + 4);
      v195 = *v194;
      if ((v195 & 0x80000000) != 0)
        Index = COERCE__INT64((double)v195) + 0x2000000000000;
      else
        Index = v195 | 0xFFFE000000000000;
      v197 = 14;
      goto LABEL_232;
    }
    if (!v11 || (v308 = *(_DWORD *)(v11 + 16), (v308 & 0x20) != 0))
    {
LABEL_492:
      v198 = 0;
      goto LABEL_233;
    }
    v309 = *(_WORD **)(v11 + 8);
    v310 = *(unsigned int *)(v11 + 4);
    if ((v308 & 4) == 0)
    {
      if ((_DWORD)v310)
      {
        v311 = (unsigned __int16)*v309 - 48;
        if (v311 <= 9 && (*v309 != 48 || v310 <= 1))
        {
          v320 = v309 + 1;
          v321 = v310 - 1;
          while (v321)
          {
            if (v311 > 0x19999999)
              goto LABEL_488;
            v322 = *v320 - 48;
            if (v322 > 9)
              goto LABEL_488;
            v312 = 0;
            LOBYTE(v310) = 0;
            v313 = 0;
            v241 = __CFADD__(v322, 10 * v311);
            v311 = v322 + 10 * v311;
            ++v320;
            --v321;
            if (v241)
              goto LABEL_490;
          }
          v313 = v311 & 0xFFFFFF00;
          v312 = 0x100000000;
          if (v311 == -1)
          {
            v312 = 0;
            LOBYTE(v310) = 0;
          }
          else
          {
            LOBYTE(v310) = v311;
          }
          if (v311 == -1)
            v313 = 0;
          goto LABEL_490;
        }
LABEL_488:
        v312 = 0;
        LOBYTE(v310) = 0;
      }
      else
      {
        v312 = 0;
      }
      v313 = 0;
LABEL_490:
      v314 = v310;
LABEL_491:
      if ((v312 & 0x100000000) != 0)
      {
        a3 = v313 | v314;
        v328 = *(_QWORD *)(this + 8);
        v329 = (JSC::JSString *)((v328 & 1) != 0 ? this + 16 : v328 + 4);
        if (*(_DWORD *)v329 > a3)
        {
          Index = JSC::JSString::getIndex((JSC::JSString *)this, a1, a3, a4, a5, a6, a7, a8, a9);
          if (!*(_DWORD *)(v10 + 80)
            || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, this, a3, a4, a5, a6, a7, a8))
          {
            v197 = 10;
LABEL_232:
            v342 = (uint64_t (*)(unint64_t))Index;
            LODWORD(v344) = v197;
            v346 = 0;
            v198 = 1;
            BYTE1(v347[1]) = 1;
LABEL_233:
            if (*(_DWORD *)(v10 + 80)
              && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, this, a3, a4, a5, a6, a7, a8))
            {
              goto LABEL_280;
            }
            v11 = v192;
            v9 = v340;
            if ((v198 & 1) != 0)
              goto LABEL_287;
LABEL_235:
            v199 = v11;
            v200 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v352, v9);
            if (!v200)
              goto LABEL_280;
            v202 = v200;
            v203 = (_BYTE *)(v200 + 6);
            v11 = v199;
            v204 = v199 >> 4;
            v205 = v200;
            if ((*(_BYTE *)(v200 + 6) & 8) == 0)
            {
              v206 = *(JSC::VM **)(v9 + 56);
              v207 = v200;
              do
              {
                v208 = *(_DWORD *)v207 & 0xFFFFFFFE;
                v209 = 16 * v208;
                if (!(_DWORD)v204 || (v204 & ~*(_DWORD *)(16 * v208 + 0x20)) != 0)
                  goto LABEL_249;
                v210 = *(_QWORD *)(16 * v208 + 0x58);
                if (!v210)
                {
                  v221 = *(_QWORD *)(16 * v208 + 0x40);
                  if (!v221 || *(_BYTE *)(v221 + 5) != 1 && *(_DWORD *)(v221 + 80) < 2u)
                    goto LABEL_249;
                  JSC::Structure::materializePropertyTable((JSC::Structure *)v209, v206, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                  v11 = v199;
                  if (!v210)
                    goto LABEL_249;
                }
                if (!*(_DWORD *)(v210 + 24))
                  goto LABEL_249;
                v211 = *(_QWORD *)(v210 + 16);
                v212 = v211 & 0xFFFFFFFFFFFFFFFELL;
                v213 = *(unsigned int *)(v210 + 8);
                v214 = *(_DWORD *)(v11 + 16);
                if ((v211 & 1) != 0)
                {
                  if ((v214 & 0x20) != 0)
                    v214 = *(_DWORD *)(v11 + 32);
                  v215 = *(_DWORD *)(v210 + 12);
                  v216 = (v214 >> 8) & *(_QWORD *)&v215;
                  v217 = *(unsigned __int8 *)(v212 + v216);
                  if (!*(_BYTE *)(v212 + v216))
                    goto LABEL_249;
                  v218 = v212 + v213;
                  v219 = 1;
                  while (1)
                  {
                    v220 = *(_QWORD *)(v218 + 8 * (v217 - 1));
                    if (v11 == (v220 & 0xFFFFFFFFFFFFLL))
                      break;
                    v216 = ((_DWORD)v216 + v219) & v215;
                    v217 = *(unsigned __int8 *)(v212 + v216);
                    ++v219;
                    if (!*(_BYTE *)(v212 + v216))
                      goto LABEL_249;
                  }
                  a6 = (v220 >> 16) & 0xFF00000000 | HIBYTE(v220);
                }
                else
                {
                  if ((v214 & 0x20) != 0)
                    v214 = *(_DWORD *)(v11 + 32);
                  v222 = *(_DWORD *)(v210 + 12);
                  v223 = v222 & (v214 >> 8);
                  v224 = *(_DWORD *)(v212 + 4 * v223);
                  if (!v224)
                    goto LABEL_249;
                  v225 = v212 + 4 * v213;
                  v226 = 1;
                  while (1)
                  {
                    v227 = (v224 - 1);
                    if (v11 == *(_QWORD *)(v225 + 16 * v227))
                      break;
                    v223 = (v223 + v226) & v222;
                    v224 = *(_DWORD *)(v212 + 4 * v223);
                    ++v226;
                    if (!v224)
                      goto LABEL_249;
                  }
                  a6 = *(unsigned int *)(v225 + 16 * v227 + 8) | ((unint64_t)*(unsigned __int8 *)(v225 + 16 * v227 + 12) << 32);
                }
                if ((_DWORD)a6 != -1)
                {
                  a5 = HIDWORD(a6);
                  if ((int)a6 <= 63)
                  {
                    v235 = v207 + 16;
                    v236 = a6 << 32;
                  }
                  else
                  {
                    v235 = *(_QWORD *)(v207 + 8) - 8;
                    v236 = 0x3F00000000 - (a6 << 32);
                  }
                  a4 = *(_QWORD *)(v235 + (v236 >> 29));
                  if ((a4 & 0xFFFE000000000002) != 0)
                    goto LABEL_286;
                  v237 = *(unsigned __int8 *)(a4 + 5);
                  if (v237 == 5)
                  {
                    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v207, (uint64_t)v206, (uint64_t)&v342, a4, SHIDWORD(a6), a6);
                  }
                  else
                  {
                    if (v237 != 6)
                    {
LABEL_286:
                      v342 = (uint64_t (*)(unint64_t))a4;
                      v346 = (JSC::JSString *)v207;
                      v344 = __PAIR64__(a6, HIDWORD(a6));
                      LOWORD(v347[1]) = 257;
                      goto LABEL_287;
                    }
                    v258 = *(_DWORD *)(v209 + 16) & 3;
                    v259 = *(_QWORD *)(a4 + 16);
                    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
                    {
                      v261 = *(int8x16_t ***)(a4 + 24);
                      v260 = *(_QWORD *)(a4 + 32);
                      v342 = *(uint64_t (**)(unint64_t))(a4 + 8);
                      v343 = v259;
                      LODWORD(v344) = HIDWORD(a6);
                      v346 = (JSC::JSString *)v207;
                      BYTE1(v347[1]) = 3;
                      if (v258 != 2)
                        LOBYTE(v347[1]) = 1;
                      BYTE3(v347[1]) = 1;
                      v350 = v261;
                      v351 = v260;
                      goto LABEL_287;
                    }
                    v342 = *(uint64_t (**)(unint64_t))(a4 + 8);
                    v343 = v259;
                    LODWORD(v344) = HIDWORD(a6);
                    v346 = (JSC::JSString *)v207;
                    BYTE1(v347[1]) = 3;
                    if (v258 != 2)
                      LOBYTE(v347[1]) = 1;
                  }
                  v11 = v199;
                  goto LABEL_287;
                }
LABEL_249:
                if ((*v203 & 0x20) != 0)
                {
                  OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v207, v206, v11, (uint64_t)&v342);
                  v11 = v199;
                  if ((OwnStaticPropertySlot & 1) != 0)
                    goto LABEL_287;
                }
                v205 = *(_QWORD *)(v209 + 48);
                if (!v205)
                  v205 = *(_QWORD *)(v207 + 16);
                if ((v205 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v205 + 5) < 0x17u)
                {
                  if (!v11)
                    goto LABEL_280;
                  v228 = *(_DWORD *)(v11 + 16);
                  if ((v228 & 0x20) != 0)
                    goto LABEL_280;
                  v229 = *(_WORD **)(v11 + 8);
                  v230 = *(unsigned int *)(v11 + 4);
                  if ((v228 & 4) == 0)
                  {
                    if ((_DWORD)v230)
                    {
                      v231 = (unsigned __int16)*v229 - 48;
                      if (v231 <= 9 && (*v229 != 48 || v230 <= 1))
                      {
                        v238 = v229 + 1;
                        v239 = v230 - 1;
                        while (v239)
                        {
                          if (v231 > 0x19999999)
                            goto LABEL_276;
                          v240 = *v238 - 48;
                          if (v240 > 9)
                            goto LABEL_276;
                          v232 = 0;
                          LOBYTE(v230) = 0;
                          v233 = 0;
                          v241 = __CFADD__(v240, 10 * v231);
                          v231 = v240 + 10 * v231;
                          ++v238;
                          --v239;
                          if (v241)
                            goto LABEL_278;
                        }
                        v233 = v231 & 0xFFFFFF00;
                        v232 = 0x100000000;
                        if (v231 == -1)
                        {
                          v232 = 0;
                          LOBYTE(v230) = 0;
                        }
                        else
                        {
                          LOBYTE(v230) = v231;
                        }
                        if (v231 == -1)
                          v233 = 0;
LABEL_278:
                        v234 = v230;
LABEL_279:
                        if ((v232 & 0x100000000) == 0)
                          goto LABEL_280;
                        v243 = v233 | v234;
                        v244 = *(JSC::VM **)(v9 + 56);
                        v67 = 10;
                        while (2)
                        {
                          v245 = 16 * (*(_DWORD *)v202 & 0xFFFFFFFE);
                          v246 = v9;
                          v248 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v245 + 0x4C) + 0x70))(v202, v9, v243, &v342);
                          if (*((_DWORD *)v244 + 20)
                            && JSC::VM::hasExceptionsAfterHandlingTraps(v244, v247, a3, a4, a5, a6, a7, a8))
                          {
                            goto LABEL_280;
                          }
                          if ((v248 & 1) != 0)
                          {
LABEL_422:
                            v11 = v199;
LABEL_423:
                            v9 = v246;
                            goto LABEL_287;
                          }
                          if (BYTE2(v347[1]) == 3)
                          {
                            if (BYTE4(v347[1]))
                              goto LABEL_280;
                            v249 = *(unsigned __int8 *)(v202 + 5);
                            if (v249 != 61)
                            {
LABEL_316:
                              if ((v249 - 39) <= 0xA
                                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v202, v247, a3, a4, a5, a6, a7, a8) <= v243)
                              {
                                goto LABEL_280;
                              }
                            }
                          }
                          else
                          {
                            v249 = *(unsigned __int8 *)(v202 + 5);
                            if (v249 != 61)
                              goto LABEL_316;
                            if (BYTE2(v347[1]) == 1)
                              goto LABEL_280;
                          }
                          if ((*(_WORD *)(v245 + 12) & 0x800) == 0 || BYTE2(v347[1]) == 3)
                          {
                            v250 = *(_QWORD *)(16 * (*(_DWORD *)v202 & 0xFFFFFFFE) + 0x30);
                            if (!v250)
                              v250 = *(_QWORD *)(v202 + 16);
                          }
                          else
                          {
                            if ((*(_WORD *)(16 * (*(_DWORD *)v202 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                            {
                              v250 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                                          * *(unsigned int *)(16 * (*(_DWORD *)v202 & 0xFFFFFFFE) + 0x4C)
                                                                                          + 0xB0))(v202, v246);
                            }
                            else
                            {
                              v250 = *(_QWORD *)(16 * (*(_DWORD *)v202 & 0xFFFFFFFE) + 0x30);
                              if (!v250)
                                v250 = *(_QWORD *)(v202 + 16);
                            }
                            if (*((_DWORD *)v244 + 20)
                              && JSC::VM::hasExceptionsAfterHandlingTraps(v244, v247, a3, a4, a5, a6, a7, a8))
                            {
                              goto LABEL_280;
                            }
                          }
                          if ((v250 & 0xFFFE000000000002) != 0)
                            goto LABEL_78;
                          v251 = *(unsigned __int8 *)(v250 + 5);
                          v202 = v250;
                          v9 = v246;
                          if (v251 <= 0x16)
                            goto LABEL_78;
                          continue;
                        }
                      }
LABEL_276:
                      v232 = 0;
                      LOBYTE(v230) = 0;
                    }
                    else
                    {
                      v232 = 0;
                    }
                    v233 = 0;
                    goto LABEL_278;
                  }
                  if ((_DWORD)v230)
                  {
                    v307 = *(unsigned __int8 *)v229 - 48;
                    if (v307 <= 9 && (v230 < 2 || *(_BYTE *)v229 != 48))
                    {
                      v315 = v230 - 1;
                      v316 = (unsigned __int8 *)v229 + 1;
                      while (v315)
                      {
                        if (v307 > 0x19999999)
                          goto LABEL_461;
                        v317 = *v316 - 48;
                        if (v317 > 9)
                          goto LABEL_461;
                        v234 = 0;
                        LOBYTE(v230) = 0;
                        v232 = 0;
                        v241 = __CFADD__(v317, 10 * v307);
                        v307 = v317 + 10 * v307;
                        --v315;
                        ++v316;
                        if (v241)
                          goto LABEL_463;
                      }
                      if (v307 == -1)
                        v234 = 0;
                      else
                        v234 = v307 & 0xFFFFFF00;
                      if (v307 == -1)
                        LOBYTE(v230) = 0;
                      else
                        LOBYTE(v230) = v307;
                      if (v307 == -1)
                        v232 = 0;
                      else
                        v232 = 0x100000000;
                      goto LABEL_463;
                    }
LABEL_461:
                    v234 = 0;
                    LOBYTE(v230) = 0;
                  }
                  else
                  {
                    v234 = 0;
                  }
                  v232 = 0;
LABEL_463:
                  v233 = v230;
                  goto LABEL_279;
                }
                v203 = (_BYTE *)(v205 + 6);
                v207 = v205;
              }
              while ((*(_BYTE *)(v205 + 6) & 8) == 0);
            }
            if (!v11)
              goto LABEL_351;
            v262 = *(_DWORD *)(v11 + 16);
            if ((v262 & 0x20) != 0)
              goto LABEL_351;
            v263 = *(_WORD **)(v11 + 8);
            v264 = *(unsigned int *)(v11 + 4);
            if ((v262 & 4) == 0)
            {
              if ((_DWORD)v264)
              {
                v265 = (unsigned __int16)*v263 - 48;
                if (v265 <= 9 && (*v263 != 48 || v264 <= 1))
                {
                  v279 = v263 + 1;
                  v280 = v264 - 1;
                  while (v280)
                  {
                    if (v265 > 0x19999999 || (v281 = *v279 - 48, v281 > 9))
                    {
                      v266 = 0;
                      LOBYTE(v264) = 0;
                      v267 = 0;
                      v11 = v199;
                      goto LABEL_349;
                    }
                    v266 = 0;
                    LOBYTE(v264) = 0;
                    v267 = 0;
                    v241 = __CFADD__(v281, 10 * v265);
                    v265 = v281 + 10 * v265;
                    ++v279;
                    --v280;
                    v11 = v199;
                    if (v241)
                      goto LABEL_349;
                  }
                  v267 = v265 & 0xFFFFFF00;
                  v266 = 0x100000000;
                  if (v265 == -1)
                  {
                    v266 = 0;
                    LOBYTE(v264) = 0;
                  }
                  else
                  {
                    LOBYTE(v264) = v265;
                  }
                  if (v265 == -1)
                    v267 = 0;
LABEL_349:
                  v268 = v264;
                  goto LABEL_350;
                }
                v266 = 0;
                LOBYTE(v264) = 0;
              }
              else
              {
                v266 = 0;
              }
              v267 = 0;
              goto LABEL_349;
            }
            if ((_DWORD)v264)
            {
              v323 = *(unsigned __int8 *)v263 - 48;
              if (v323 <= 9 && (v264 < 2 || *(_BYTE *)v263 != 48))
              {
                v324 = v264 - 1;
                v325 = (unsigned __int8 *)v263 + 1;
                while (v324)
                {
                  if (v323 > 0x19999999)
                    goto LABEL_549;
                  v326 = *v325 - 48;
                  if (v326 > 9)
                    goto LABEL_549;
                  v268 = 0;
                  LOBYTE(v264) = 0;
                  v266 = 0;
                  v241 = __CFADD__(v326, 10 * v323);
                  v323 = v326 + 10 * v323;
                  --v324;
                  ++v325;
                  if (v241)
                    goto LABEL_551;
                }
                if (v323 == -1)
                  v268 = 0;
                else
                  v268 = v323 & 0xFFFFFF00;
                if (v323 == -1)
                  LOBYTE(v264) = 0;
                else
                  LOBYTE(v264) = v323;
                if (v323 == -1)
                  v266 = 0;
                else
                  v266 = 0x100000000;
                goto LABEL_551;
              }
LABEL_549:
              v268 = 0;
              LOBYTE(v264) = 0;
            }
            else
            {
              v268 = 0;
            }
            v266 = 0;
LABEL_551:
            v267 = v264;
            v11 = v199;
LABEL_350:
            if ((v266 & 0x100000000) == 0)
            {
LABEL_351:
              v269 = *(JSC::VM **)(v9 + 56);
              v67 = 10;
              while (1)
              {
                v246 = v9;
                v270 = 16 * (*(_DWORD *)v205 & 0xFFFFFFFE);
                if ((*(_BYTE *)(v205 + 6) & 8) != 0)
                {
                  v297 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v205 & 0xFFFFFFFE) + 0x4C) + 0x68))(v205, v246, v11, &v342);
                  if (*((_DWORD *)v269 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v269, v201, a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_280;
                  }
                  if ((v297 & 1) != 0)
                    goto LABEL_422;
                  if (BYTE2(v347[1]) == 3)
                  {
                    if (BYTE4(v347[1]))
                      goto LABEL_280;
                    v298 = *(unsigned __int8 *)(v205 + 5);
                    if (v298 == 61)
                    {
LABEL_452:
                      v11 = v199;
                      goto LABEL_358;
                    }
                  }
                  else
                  {
                    v298 = *(unsigned __int8 *)(v205 + 5);
                    if (v298 == 61)
                    {
                      v11 = v199;
                      if (BYTE2(v347[1]) == 1)
                        goto LABEL_280;
                      goto LABEL_358;
                    }
                  }
                  if (!v199)
                    goto LABEL_452;
                  if ((v298 - 50) < 0xFFFFFFF5)
                    goto LABEL_452;
                  v299 = *(_DWORD *)(v199 + 16);
                  if ((v299 & 0x20) != 0)
                    goto LABEL_452;
                  v300 = *(unsigned int *)(v199 + 4);
                  if (!(_DWORD)v300)
                    goto LABEL_452;
                  v301 = *(unsigned __int8 **)(v199 + 8);
                  if ((v299 & 4) != 0)
                  {
                    v302 = *v301;
                    if ((_DWORD)v300 != 1)
                    {
                      if (v302 != 45)
                      {
                        if ((v302 - 48) >= 0xA)
                        {
                          if ((_DWORD)v300 == 8)
                          {
LABEL_451:
                            if (v302 != 73)
                              goto LABEL_452;
                            goto LABEL_445;
                          }
LABEL_455:
                          if ((_DWORD)v300 != 3 || v302 != 78)
                            goto LABEL_452;
                        }
LABEL_445:
                        v340 = v340 & 0xFFFFFF0000000000 | v300 | ((unint64_t)((v299 >> 2) & 1) << 32);
                        JSC::jsToNumber(v301, v340);
                        WTF::numberToString(varE0, v304);
                        v306 = WTF::equal(v199, (unint64_t)varE0, v305);
                        v11 = v199;
                        if (v306)
                          goto LABEL_280;
                        goto LABEL_358;
                      }
                      v302 = v301[1];
LABEL_438:
                      if ((v302 - 48) >= 0xA)
                      {
                        if ((_DWORD)v300 != 9)
                          goto LABEL_452;
                        goto LABEL_451;
                      }
                      if ((_DWORD)v300 == 2)
                        goto LABEL_280;
                      goto LABEL_445;
                    }
                  }
                  else
                  {
                    v302 = *(unsigned __int16 *)v301;
                    if ((_DWORD)v300 != 1)
                    {
                      if (v302 != 45)
                      {
                        if ((v302 - 48) >= 0xA && ((_DWORD)v300 != 8 || v302 != 73))
                          goto LABEL_455;
                        goto LABEL_445;
                      }
                      v302 = *((unsigned __int16 *)v301 + 1);
                      goto LABEL_438;
                    }
                  }
                  v11 = v199;
                  if ((v302 - 48) < 0xA)
                    goto LABEL_280;
                }
                else
                {
                  if ((_DWORD)v204)
                  {
                    if ((v204 & ~*(_DWORD *)(16 * (*(_DWORD *)v205 & 0xFFFFFFFE) + 0x20)) == 0)
                    {
                      JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v205 & 0xFFFFFFFE)), v269, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                      v11 = v199;
                      if (v271)
                      {
                        varE0[0] = (JSC::VM *)v199;
                        v272 = JSC::PropertyTable::get(v271, (uint64_t *)varE0);
                        v11 = v199;
                        a6 = v272;
                        if ((_DWORD)v272 != -1)
                        {
                          a5 = HIDWORD(v272);
                          if ((int)v272 <= 63)
                          {
                            v276 = v205 + 16;
                            v277 = v272 << 32;
                          }
                          else
                          {
                            v276 = *(_QWORD *)(v205 + 8) - 8;
                            v277 = 0x3F00000000 - (v272 << 32);
                          }
                          a4 = *(_QWORD *)(v276 + (v277 >> 29));
                          if ((a4 & 0xFFFE000000000002) != 0)
                          {
LABEL_370:
                            v342 = (uint64_t (*)(unint64_t))a4;
                            v346 = (JSC::JSString *)v205;
                            v344 = __PAIR64__(v272, HIDWORD(v272));
                            LOWORD(v347[1]) = 257;
                          }
                          else
                          {
                            v278 = *(unsigned __int8 *)(a4 + 5);
                            if (v278 == 5)
                            {
                              JSC::JSObject::fillGetterPropertySlot((unsigned int *)v205, (uint64_t)v269, (uint64_t)&v342, a4, SHIDWORD(v272), v272);
                            }
                            else
                            {
                              if (v278 != 6)
                                goto LABEL_370;
                              v292 = *(_DWORD *)(v270 + 16) & 3;
                              v293 = *(_QWORD *)(a4 + 16);
                              if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                              {
                                v295 = *(int8x16_t ***)(a4 + 24);
                                v294 = *(_QWORD *)(a4 + 32);
                                v342 = *(uint64_t (**)(unint64_t))(a4 + 8);
                                v343 = v293;
                                LODWORD(v344) = HIDWORD(v272);
                                v346 = (JSC::JSString *)v205;
                                BYTE1(v347[1]) = 3;
                                if (v292 != 2)
                                  LOBYTE(v347[1]) = 1;
                                BYTE3(v347[1]) = 1;
                                v350 = v295;
                                v351 = v294;
                              }
                              else
                              {
                                v342 = *(uint64_t (**)(unint64_t))(a4 + 8);
                                v343 = v293;
                                LODWORD(v344) = HIDWORD(v272);
                                v346 = (JSC::JSString *)v205;
                                BYTE1(v347[1]) = 3;
                                if (v292 != 2)
                                  LOBYTE(v347[1]) = 1;
                              }
                            }
                          }
                          v11 = v199;
                          v9 = v246;
LABEL_287:
                          if (BYTE1(v347[1]) == 1)
                            goto LABEL_77;
                          if (BYTE1(v347[1]) == 2)
                          {
                            v88 = (JSC::JSGlobalObject *)v9;
                            goto LABEL_100;
                          }
                          v252 = (unint64_t)v346;
                          v126 = *(_QWORD *)(16 * (*(_DWORD *)v346 & 0xFFFFFFFE) + 0x28);
                          if ((v344 & 0x20) != 0)
                            v252 = v345;
                          if (BYTE3(v347[1]) != 1)
                            goto LABEL_129;
                          v127 = *(JSC::VM **)(v9 + 56);
                          v128 = v350;
                          if ((v252 & 0xFFFE000000000002) == 0)
                          {
                            v253 = *(unsigned int *)(16 * (*(_DWORD *)v252 & 0xFFFFFFFE) + 0x4C);
                            v254 = *(_DWORD *)(16 * (*(_DWORD *)v252 & 0xFFFFFFFE) + 0x4C) != 0;
                            v255 = 16 * v253;
                            if ((_DWORD)v253)
                              v256 = v350 == (int8x16_t **)v255;
                            else
                              v256 = 1;
                            if (!v256)
                            {
                              do
                              {
                                v255 = *(_QWORD *)(v255 + 16);
                                v254 = v255 != 0;
                              }
                              while ((int8x16_t **)v255 != v350 && v255 != 0);
                            }
                            if (v254)
                            {
LABEL_129:
                              v89 = v342(v126);
                              goto LABEL_101;
                            }
                          }
LABEL_337:
                          varE0[0] = v127;
                          v89 = JSC::throwDOMAttributeGetterTypeError(v126, varE0, v128, (WTF::StringImpl *)v11);
                          goto LABEL_101;
                        }
                      }
                    }
                  }
                  if ((*(_BYTE *)(v205 + 6) & 0x20) != 0)
                  {
                    v291 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v205, v269, v11, (uint64_t)&v342);
                    v11 = v199;
                    if ((v291 & 1) != 0)
                      goto LABEL_423;
                  }
                }
LABEL_358:
                if ((*(_WORD *)(v270 + 12) & 0x800) == 0)
                {
                  v273 = *(_DWORD *)v205;
LABEL_360:
                  v274 = *(_QWORD *)(16 * (v273 & 0xFFFFFFFE) + 0x30);
                  if (!v274)
                    v274 = *(_QWORD *)(v205 + 16);
                  goto LABEL_362;
                }
                v273 = *(_DWORD *)v205;
                if (BYTE2(v347[1]) == 3)
                  goto LABEL_360;
                v296 = 16 * (v273 & 0xFFFFFFFE);
                if ((*(_WORD *)(v296 + 12) & 0x800) != 0)
                {
                  v274 = (*(uint64_t (**)(uint64_t, unint64_t))(16 * *(unsigned int *)(v296 + 76)
                                                                              + 0xB0))(v205, v246);
                }
                else
                {
                  v274 = *(_QWORD *)(v296 + 48);
                  if (!v274)
                    v274 = *(_QWORD *)(v205 + 16);
                }
                if (*((_DWORD *)v269 + 20))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v269, v201, a3, a4, a5, a6, a7, a8);
                  v11 = v199;
                  if (hasExceptionsAfterHandlingTraps)
                    goto LABEL_280;
                }
                else
                {
                  v11 = v199;
                }
LABEL_362:
                if ((v274 & 0xFFFE000000000002) == 0)
                {
                  v275 = *(unsigned __int8 *)(v274 + 5);
                  v205 = v274;
                  v9 = v246;
                  if (v275 > 0x16)
                    continue;
                }
                goto LABEL_78;
              }
            }
            v282 = v267 | v268;
            v283 = *(JSC::VM **)(v9 + 56);
            v67 = 10;
            while (1)
            {
              v284 = 16 * (*(_DWORD *)v202 & 0xFFFFFFFE);
              v246 = v9;
              v285 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v284 + 0x4C) + 0x70))(v202, v9, v282, &v342);
              v287 = v285;
              if (*((_DWORD *)v283 + 20))
              {
                v303 = JSC::VM::hasExceptionsAfterHandlingTraps(v283, v286, a3, a4, a5, a6, a7, a8);
                if (((v303 | v287) & 1) != 0)
                {
                  v11 = v199;
                  v9 = v246;
                  if (v303)
                    goto LABEL_280;
                  goto LABEL_287;
                }
              }
              else if ((v285 & 1) != 0)
              {
                goto LABEL_422;
              }
              if (BYTE2(v347[1]) == 3)
              {
                if (BYTE4(v347[1]))
                  goto LABEL_280;
                v288 = *(unsigned __int8 *)(v202 + 5);
                if (v288 != 61)
                {
LABEL_396:
                  if ((v288 - 39) <= 0xA
                    && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v202, v286, a3, a4, a5, a6, a7, a8) <= v282)
                  {
                    goto LABEL_280;
                  }
                }
              }
              else
              {
                v288 = *(unsigned __int8 *)(v202 + 5);
                if (v288 != 61)
                  goto LABEL_396;
                if (BYTE2(v347[1]) == 1)
                  goto LABEL_280;
              }
              if ((*(_WORD *)(v284 + 12) & 0x800) == 0 || BYTE2(v347[1]) == 3)
              {
                v289 = *(_QWORD *)(16 * (*(_DWORD *)v202 & 0xFFFFFFFE) + 0x30);
                if (!v289)
                  v289 = *(_QWORD *)(v202 + 16);
              }
              else
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)v202 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v289 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)v202 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0xB0))(v202, v246);
                }
                else
                {
                  v289 = *(_QWORD *)(16 * (*(_DWORD *)v202 & 0xFFFFFFFE) + 0x30);
                  if (!v289)
                    v289 = *(_QWORD *)(v202 + 16);
                }
                if (*((_DWORD *)v283 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v283, v286, a3, a4, a5, a6, a7, a8))
                {
                  goto LABEL_280;
                }
              }
              if ((v289 & 0xFFFE000000000002) == 0)
              {
                v290 = *(unsigned __int8 *)(v289 + 5);
                v202 = v289;
                v9 = v246;
                if (v290 > 0x16)
                  continue;
              }
              goto LABEL_78;
            }
          }
        }
      }
      goto LABEL_492;
    }
    if ((_DWORD)v310)
    {
      v330 = *(unsigned __int8 *)v309 - 48;
      if (v330 <= 9 && (v310 < 2 || *(_BYTE *)v309 != 48))
      {
        v331 = v310 - 1;
        v332 = (unsigned __int8 *)v309 + 1;
        while (v331)
        {
          if (v330 > 0x19999999)
            goto LABEL_624;
          v333 = *v332 - 48;
          if (v333 > 9)
            goto LABEL_624;
          v314 = 0;
          LOBYTE(v310) = 0;
          v312 = 0;
          v241 = __CFADD__(v333, 10 * v330);
          v330 = v333 + 10 * v330;
          --v331;
          ++v332;
          if (v241)
            goto LABEL_626;
        }
        if (v330 == -1)
          v314 = 0;
        else
          v314 = v330 & 0xFFFFFF00;
        if (v330 == -1)
          LOBYTE(v310) = 0;
        else
          LOBYTE(v310) = v330;
        if (v330 == -1)
          v312 = 0;
        else
          v312 = 0x100000000;
        goto LABEL_626;
      }
LABEL_624:
      v314 = 0;
      LOBYTE(v310) = 0;
    }
    else
    {
      v314 = 0;
    }
    v312 = 0;
LABEL_626:
    v313 = v310;
    goto LABEL_491;
  }
  v13 = (uint64_t *)(v10 + 93080);
  v14 = v11 >> 4;
  v15 = 1;
  v16 = &JSC::DOMAttributeGetterSetter::s_info;
  v17 = 3;
  a3 = 0x3F00000000;
  v18 = (JSC::JSString *)this;
  while (1)
  {
    v19 = *((_BYTE *)v18 + 6);
    if ((v19 & 8) != 0 && v12 != 26 && v12 != 36 && v18 != *(JSC::JSString **)(v340 + 672))
      break;
    if (!(_DWORD)v14)
      goto LABEL_19;
    v20 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
    if ((v14 & ~*(_DWORD *)(v20 + 0x20)) != 0)
      goto LABEL_19;
    v21 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x58);
    if (!v21)
    {
      v38 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x40);
      if (!v38 || *(_BYTE *)(v38 + 5) != 1 && *(_DWORD *)(v38 + 80) < 2u)
        goto LABEL_19;
      v39 = (JSC::JSString *)this;
      v40 = v11;
      v41 = v16;
      JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE)), (JSC::VM *)v10, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
      a3 = 0x3F00000000;
      this = (uint64_t)v39;
      v17 = 3;
      v16 = v41;
      v11 = v40;
      if (!v21)
        goto LABEL_19;
    }
    if (!*(_DWORD *)(v21 + 24))
      goto LABEL_19;
    v22 = *(_QWORD *)(v21 + 16);
    v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
    v24 = *(unsigned int *)(v21 + 8);
    v25 = *(_DWORD *)(v11 + 16);
    if ((v22 & 1) != 0)
    {
      if ((v25 & 0x20) != 0)
        v25 = *(_DWORD *)(v11 + 32);
      v26 = *(_DWORD *)(v21 + 12);
      v27 = (v25 >> 8) & *(_QWORD *)&v26;
      v28 = *(unsigned __int8 *)(v23 + v27);
      if (!*(_BYTE *)(v23 + v27))
        goto LABEL_19;
      v29 = v23 + v24;
      v30 = 1;
      while (1)
      {
        v31 = *(_QWORD *)(v29 + 8 * (v28 - 1));
        if (v11 == (v31 & 0xFFFFFFFFFFFFLL))
          break;
        v27 = ((_DWORD)v27 + v30) & v26;
        v28 = *(unsigned __int8 *)(v23 + v27);
        ++v30;
        if (!*(_BYTE *)(v23 + v27))
          goto LABEL_19;
      }
      a6 = (v31 >> 16) & 0xFF00000000 | HIBYTE(v31);
    }
    else
    {
      if ((v25 & 0x20) != 0)
        v25 = *(_DWORD *)(v11 + 32);
      v45 = *(_DWORD *)(v21 + 12);
      v46 = v45 & (v25 >> 8);
      v47 = *(_DWORD *)(v23 + 4 * v46);
      if (!v47)
      {
LABEL_19:
        if ((*((_BYTE *)v18 + 6) & 0x20) != 0)
        {
          v90 = (JSC::JSString *)this;
          v91 = v11;
          v92 = v16;
          v32 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v18, (JSC::VM *)v10, v11, (uint64_t)&v342);
          a3 = 0x3F00000000;
          this = (uint64_t)v90;
          v16 = v92;
          v11 = v91;
        }
        else
        {
          v32 = 0;
        }
        goto LABEL_21;
      }
      v48 = v23 + 4 * v24;
      v49 = 1;
      while (1)
      {
        v50 = (v47 - 1);
        if (v11 == *(_QWORD *)(v48 + 16 * v50))
          break;
        v46 = (v46 + v49) & v45;
        v47 = *(_DWORD *)(v23 + 4 * v46);
        ++v49;
        if (!v47)
          goto LABEL_19;
      }
      a6 = *(unsigned int *)(v48 + 16 * v50 + 8) | ((unint64_t)*(unsigned __int8 *)(v48 + 16 * v50 + 12) << 32);
    }
    if ((_DWORD)a6 == -1)
      goto LABEL_19;
    if ((int)a6 <= 63)
    {
      v42 = (uint64_t)v18 + 16;
      v43 = a6 << 32;
    }
    else
    {
      v42 = *((_QWORD *)v18 + 1) - 8;
      v43 = 0x3F00000000 - (a6 << 32);
    }
    a5 = HIDWORD(a6);
    a4 = *(_QWORD *)(v42 + (v43 >> 29));
    if ((a4 & 0xFFFE000000000002) == 0)
    {
      v44 = *(unsigned __int8 *)(a4 + 5);
      if (v44 == 5)
      {
        v93 = (JSC::JSString *)this;
        v94 = v11;
        v95 = v16;
        JSC::JSObject::fillGetterPropertySlot((unsigned int *)v18, v10, (uint64_t)&v342, a4, SHIDWORD(a6), a6);
        a3 = 0x3F00000000;
        this = (uint64_t)v93;
        v16 = v95;
        v11 = v94;
        v32 = 1;
        goto LABEL_21;
      }
      if (v44 == 6)
      {
        v167 = *(_DWORD *)(v20 + 16) & 3;
        v168 = *(_QWORD *)(a4 + 16);
        if (v16 == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
        {
          v170 = *(int8x16_t ***)(a4 + 24);
          v169 = *(_QWORD *)(a4 + 32);
          v342 = *(uint64_t (**)(unint64_t))(a4 + 8);
          v343 = v168;
          LODWORD(v344) = HIDWORD(a6);
          v346 = v18;
          BYTE1(v347[1]) = 3;
          v32 = 1;
          if (v167 != 2)
            LOBYTE(v347[1]) = 1;
          BYTE3(v347[1]) = 1;
          v350 = v170;
          v351 = v169;
        }
        else
        {
          v342 = *(uint64_t (**)(unint64_t))(a4 + 8);
          v343 = v168;
          LODWORD(v344) = HIDWORD(a6);
          v346 = v18;
          v32 = 1;
          BYTE1(v347[1]) = 3;
          if (v167 != 2)
            LOBYTE(v347[1]) = 1;
        }
        goto LABEL_21;
      }
    }
    v342 = (uint64_t (*)(unint64_t))a4;
    v346 = v18;
    v344 = __PAIR64__(a6, HIDWORD(a6));
    v32 = 1;
    LOWORD(v347[1]) = 257;
LABEL_21:
    if ((*(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x10) & 3) == 2)
      goto LABEL_180;
    v33 = *(unsigned __int16 *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0xC);
    if ((v33 & 0x18) == 0)
    {
      v34 = 1;
      goto LABEL_24;
    }
    if ((v33 & 8) != 0)
    {
LABEL_180:
      v34 = 0;
    }
    else if ((v33 & 0x10) != 0)
    {
      v34 = (v33 >> 5) & 1;
    }
    else
    {
      v34 = 1;
    }
LABEL_24:
    v35 = v15 & v34;
    if (v32)
    {
      v51 = BYTE1(v347[1]);
      if (!v35 || BYTE1(v347[1]) != 1 || LOBYTE(v347[1]) != 1)
        goto LABEL_76;
      v52 = WORD2(v344);
      if (SHIDWORD(v344) >= 0x10000)
        goto LABEL_77;
      v53 = v346;
      v54 = *(unsigned int *)this;
      if (v346 != (JSC::JSString *)this && (*(_BYTE *)((16 * v54) | 0x10) & 3) != 0)
        goto LABEL_77;
      if ((*v13 & 1) != 0)
        v55 = 0;
      else
        v55 = *v13;
      v56 = v54 ^ (v54 >> 11);
      v57 = *(_DWORD *)(v11 + 16);
      if (v57 < 0x100)
      {
        v96 = v11;
        v97 = (JSC::JSString *)this;
        v98 = WORD2(v344);
        LOWORD(v58) = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v11);
        v52 = v98;
        this = (uint64_t)v97;
        v11 = v96;
      }
      else
      {
        v58 = v57 >> 8;
      }
      v59 = ((_WORD)v58 + (_WORD)v56) & 0x7FF;
      v60 = v55 + 24 * (((_WORD)v58 + (_WORD)v56) & 0x7FF);
      v62 = (_QWORD *)(v60 + 12);
      v61 = *(_WORD *)(v60 + 12);
      LODWORD(v63) = *(unsigned __int16 *)(v55 + 133120);
      v64 = *(WTF::StringImpl **)v60;
      if (v61 == (_DWORD)v63)
      {
        v82 = v55 + 24 * v59;
        v83 = *(_DWORD *)(v82 + 8);
        v63 = (_DWORD *)(v82 + 8);
        v84 = ((_WORD)v83 + (_WORD)v64 + (unsigned __int16)((v83 + (_DWORD)v64) >> 9)) & 0x1FF;
        v85 = 24 * (((_WORD)v83 + (_WORD)v64 + (unsigned __int16)((v83 + (_DWORD)v64) >> 9)) & 0x1FF);
        *(_QWORD *)v60 = 0;
        v86 = *(WTF::StringImpl **)(v55 + 49152 + v85);
        *(_QWORD *)(v55 + 49152 + v85) = v64;
        if (v86)
        {
          if (*(_DWORD *)v86 == 2)
          {
            v336 = (JSC::JSString *)this;
            v337 = v11;
            v335 = v52;
            v334 = v84;
            WTF::StringImpl::~StringImpl(v86, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
            v84 = v334;
            v52 = v335;
            this = (uint64_t)v336;
            v11 = v337;
            v61 = *(_WORD *)(v55 + 133120);
            v64 = *(WTF::StringImpl **)v60;
          }
          else
          {
            v64 = 0;
            *(_DWORD *)v86 -= 2;
          }
        }
        else
        {
          v64 = 0;
        }
        v87 = v55 + 49152 + 24 * v84;
        *(_DWORD *)(v87 + 8) = *v63;
        *(_QWORD *)(v87 + 12) = *v62;
        *(_DWORD *)(v87 + 20) = *(_DWORD *)(v60 + 20);
        LOWORD(v63) = v61;
      }
      *(_DWORD *)v11 += 2;
      *(_QWORD *)v60 = v11;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
        {
          v99 = v11;
          v100 = (JSC::JSString *)this;
          v101 = v52;
          WTF::StringImpl::~StringImpl(v64, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
          v52 = v101;
          this = (uint64_t)v100;
          v11 = v99;
        }
        else
        {
          *(_DWORD *)v64 -= 2;
        }
      }
      v65 = v55 + 24 * v59;
      *(_DWORD *)(v65 + 8) = v54;
      *(_WORD *)v62 = (_WORD)v63;
      *(_WORD *)(v65 + 14) = v52;
      v66 = v53 == (JSC::JSString *)this ? 1 : (uint64_t)v53;
      *(_QWORD *)(v65 + 16) = v66;
      v51 = BYTE1(v347[1]);
LABEL_76:
      if (v51 == 1)
      {
LABEL_77:
        v67 = (uint64_t)v342;
        goto LABEL_78;
      }
      if (v51 == 2)
      {
LABEL_99:
        v88 = (JSC::JSGlobalObject *)v340;
LABEL_100:
        v89 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v342, v88, a3, a4, a5, a6, a7, a8);
        goto LABEL_101;
      }
      v125 = (unint64_t)v346;
      v126 = *(_QWORD *)(16 * (*(_DWORD *)v346 & 0xFFFFFFFE) + 0x28);
      if ((v344 & 0x20) != 0)
        v125 = v345;
      if (BYTE3(v347[1]) != 1)
        goto LABEL_129;
      v127 = *(JSC::VM **)(v340 + 56);
      v128 = v350;
      if ((v125 & 0xFFFE000000000002) == 0)
      {
        v129 = *(unsigned int *)(16 * (*(_DWORD *)v125 & 0xFFFFFFFE) + 0x4C);
        v130 = *(_DWORD *)(16 * (*(_DWORD *)v125 & 0xFFFFFFFE) + 0x4C) != 0;
        v131 = 16 * v129;
        if ((_DWORD)v129)
          v132 = v350 == (int8x16_t **)v131;
        else
          v132 = 1;
        if (!v132)
        {
          do
          {
            v131 = *(_QWORD *)(v131 + 16);
            v130 = v131 != 0;
          }
          while ((int8x16_t **)v131 != v350 && v131 != 0);
        }
        if (v130)
          goto LABEL_129;
      }
      goto LABEL_337;
    }
    v36 = *(JSC::JSString **)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x30);
    if ((*(_WORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0xC) & 0x80) != 0 || v36 == 0)
      v15 = 0;
    else
      v15 = v35;
    if (!v36)
      v36 = (JSC::JSString *)*((_QWORD *)v18 + 2);
    if (((unint64_t)v36 & 0xFFFE000000000002) == 0)
    {
      v12 = *((unsigned __int8 *)v36 + 5);
      v18 = v36;
      if (v12 > 0x16)
        continue;
    }
    if (v15)
    {
      v70 = *(unsigned int *)this;
      if ((*(_BYTE *)((16 * v70) | 0x10) & 3) == 0)
      {
        if ((*v13 & 1) != 0)
          v71 = 0;
        else
          v71 = *v13;
        v72 = v70 ^ (v70 >> 11);
        v73 = *(_DWORD *)(v11 + 16);
        if (v73 < 0x100)
        {
          v116 = v11;
          LOWORD(v74) = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v11);
          v11 = v116;
        }
        else
        {
          v74 = v73 >> 8;
        }
        v75 = ((_WORD)v74 + (_WORD)v72) & 0x7FF;
        v76 = v71 + 24 * (((_WORD)v74 + (_WORD)v72) & 0x7FF);
        v78 = (_QWORD *)(v76 + 12);
        v77 = *(unsigned __int16 *)(v76 + 12);
        LODWORD(v79) = *(unsigned __int16 *)(v71 + 133120);
        v80 = *(WTF::StringImpl **)v76;
        if (v77 == (_DWORD)v79)
        {
          v110 = v71 + 24 * v75;
          v111 = *(_DWORD *)(v110 + 8);
          v79 = (_DWORD *)(v110 + 8);
          v112 = ((_WORD)v111 + (_WORD)v80 + (unsigned __int16)((v111 + (_DWORD)v80) >> 9)) & 0x1FF;
          v113 = 24
               * (((_WORD)v111 + (_WORD)v80 + (unsigned __int16)((v111 + (_DWORD)v80) >> 9)) & 0x1FF);
          *(_QWORD *)v76 = 0;
          v114 = *(WTF::StringImpl **)(v71 + 49152 + v113);
          *(_QWORD *)(v71 + 49152 + v113) = v80;
          if (v114)
          {
            if (*(_DWORD *)v114 == 2)
            {
              v338 = v11;
              v341 = v112;
              WTF::StringImpl::~StringImpl(v114, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
              v11 = v338;
              v112 = v341;
              LOWORD(v77) = *(_WORD *)(v71 + 133120);
              v80 = *(WTF::StringImpl **)v76;
            }
            else
            {
              v80 = 0;
              *(_DWORD *)v114 -= 2;
            }
          }
          else
          {
            v80 = 0;
          }
          v115 = v71 + 49152 + 24 * v112;
          *(_DWORD *)(v115 + 8) = *v79;
          *(_QWORD *)(v115 + 12) = *v78;
          *(_DWORD *)(v115 + 20) = *(_DWORD *)(v76 + 20);
          LOWORD(v79) = v77;
        }
        *(_DWORD *)v11 += 2;
        *(_QWORD *)v76 = v11;
        if (v80)
        {
          if (*(_DWORD *)v80 == 2)
          {
            WTF::StringImpl::~StringImpl(v80, (WTF::AtomStringImpl *)this, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
          }
          else
          {
            *(_DWORD *)v80 -= 2;
          }
        }
        v81 = v71 + 24 * v75;
        *(_DWORD *)(v81 + 8) = v70;
        *(_WORD *)v78 = (_WORD)v79;
        *(_WORD *)(v81 + 14) = 0;
        *(_QWORD *)(v81 + 16) = 0;
        v67 = 10;
        goto LABEL_78;
      }
    }
LABEL_280:
    v67 = 10;
    goto LABEL_78;
  }
  v142 = v16;
  v143 = v11;
  v144 = *(JSC::VM **)(v340 + 56);
  v67 = 10;
  while (1)
  {
    v145 = *(_DWORD *)v18 & 0xFFFFFFFE;
    v146 = 16 * v145;
    if ((v19 & 8) == 0)
      break;
    v339 = (*(uint64_t (**)(JSC::JSString *, unint64_t, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * v145 + 0x4C) + 0x68))(v18, v340, v143, &v342);
    if (*((_DWORD *)v144 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v144, this, a3, a4, a5, a6, a7, a8))
      goto LABEL_280;
    if ((v339 & 1) != 0)
      goto LABEL_194;
    if (BYTE2(v347[1]) == 3)
    {
      if (BYTE4(v347[1]))
        goto LABEL_280;
      v187 = *((unsigned __int8 *)v18 + 5);
      if (v187 != 61)
      {
LABEL_216:
        if ((v187 - 50) < 0xFFFFFFF5)
          goto LABEL_148;
        if (!v143)
          goto LABEL_148;
        v188 = *(_DWORD *)(v143 + 16);
        if ((v188 & 0x20) != 0)
          goto LABEL_148;
        v189 = *(unsigned int *)(v143 + 4);
        if (!(_DWORD)v189)
          goto LABEL_148;
        v190 = *(unsigned __int8 **)(v143 + 8);
        if ((v188 & 4) == 0)
        {
          v191 = *(unsigned __int16 *)v190;
          if ((_DWORD)v189 == 1)
            goto LABEL_222;
          if (v191 == 45)
          {
            v191 = *((unsigned __int16 *)v190 + 1);
            goto LABEL_513;
          }
          if ((v191 - 48) >= 0xA && ((_DWORD)v189 != 8 || v191 != 73))
          {
LABEL_540:
            if ((_DWORD)v189 != 3 || v191 != 78)
              goto LABEL_148;
          }
LABEL_519:
          v17 = v17 & 0xFFFFFF0000000000 | v189 | ((unint64_t)((v188 >> 2) & 1) << 32);
          JSC::jsToNumber(v190, v17);
          WTF::numberToString(varE0, v318);
          if (WTF::equal(v143, (unint64_t)varE0, v319))
            goto LABEL_280;
          goto LABEL_148;
        }
        v191 = *v190;
        if ((_DWORD)v189 == 1)
        {
LABEL_222:
          if ((v191 - 48) < 0xA)
            goto LABEL_280;
          goto LABEL_148;
        }
        if (v191 == 45)
        {
          v191 = v190[1];
LABEL_513:
          if ((v191 - 48) < 0xA)
          {
            if ((_DWORD)v189 == 2)
              goto LABEL_280;
            goto LABEL_519;
          }
          if ((_DWORD)v189 != 9)
            goto LABEL_148;
        }
        else
        {
          if ((v191 - 48) < 0xA)
            goto LABEL_519;
          if ((_DWORD)v189 != 8)
            goto LABEL_540;
        }
        if (v191 != 73)
          goto LABEL_148;
        goto LABEL_519;
      }
    }
    else
    {
      v187 = *((unsigned __int8 *)v18 + 5);
      if (v187 != 61)
        goto LABEL_216;
      if (BYTE2(v347[1]) == 1)
        goto LABEL_280;
    }
LABEL_148:
    if ((*(_WORD *)(v146 + 12) & 0x800) == 0)
    {
      v158 = *(_DWORD *)v18;
LABEL_150:
      v159 = *(_QWORD *)(16 * (v158 & 0xFFFFFFFE) + 0x30);
      if (!v159)
        v159 = *((_QWORD *)v18 + 2);
      goto LABEL_152;
    }
    v158 = *(_DWORD *)v18;
    if (BYTE2(v347[1]) == 3)
      goto LABEL_150;
    v186 = 16 * (v158 & 0xFFFFFFFE);
    if ((*(_WORD *)(v186 + 12) & 0x800) != 0)
    {
      v159 = (*(uint64_t (**)(JSC::JSString *, unint64_t, uint64_t))(16 * *(unsigned int *)(v186 + 76)
                                                                                   + 0xB0))(v18, v340, a3);
    }
    else
    {
      v159 = *(_QWORD *)(v186 + 48);
      if (!v159)
        v159 = *((_QWORD *)v18 + 2);
    }
    if (*((_DWORD *)v144 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v144, this, a3, a4, a5, a6, a7, a8))
      goto LABEL_280;
LABEL_152:
    if ((v159 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v159 + 5) < 0x17u)
      goto LABEL_78;
    v19 = *(_BYTE *)(v159 + 6);
    v18 = (JSC::JSString *)v159;
  }
  if (!(_DWORD)v14 || (v14 & ~*(_DWORD *)(16 * v145 + 0x20)) != 0)
    goto LABEL_147;
  v147 = *(_QWORD *)(16 * v145 + 0x58);
  if (!v147)
  {
    v160 = *(_QWORD *)(16 * v145 + 0x40);
    if (!v160 || *(_BYTE *)(v160 + 5) != 1 && *(_DWORD *)(v160 + 80) < 2u)
      goto LABEL_147;
    JSC::Structure::materializePropertyTable((JSC::Structure *)v146, v144, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v147)
      goto LABEL_147;
  }
  if (!*(_DWORD *)(v147 + 24))
    goto LABEL_147;
  v148 = *(_QWORD *)(v147 + 16);
  v149 = v148 & 0xFFFFFFFFFFFFFFFELL;
  v150 = *(unsigned int *)(v147 + 8);
  v151 = *(_DWORD *)(v143 + 16);
  if ((v148 & 1) != 0)
  {
    if ((v151 & 0x20) != 0)
      v151 = *(_DWORD *)(v143 + 32);
    v152 = *(_DWORD *)(v147 + 12);
    v153 = (v151 >> 8) & *(_QWORD *)&v152;
    v154 = *(unsigned __int8 *)(v149 + v153);
    if (*(_BYTE *)(v149 + v153))
    {
      v155 = v149 + v150;
      v156 = 1;
      while (1)
      {
        v157 = *(_QWORD *)(v155 + 8 * (v154 - 1));
        if (v143 == (v157 & 0xFFFFFFFFFFFFLL))
          break;
        v153 = ((_DWORD)v153 + v156) & v152;
        v154 = *(unsigned __int8 *)(v149 + v153);
        ++v156;
        if (!*(_BYTE *)(v149 + v153))
          goto LABEL_147;
      }
      a6 = (v157 >> 16) & 0xFF00000000 | HIBYTE(v157);
      goto LABEL_160;
    }
    goto LABEL_147;
  }
  if ((v151 & 0x20) != 0)
    v151 = *(_DWORD *)(v143 + 32);
  v161 = *(_DWORD *)(v147 + 12);
  v162 = v161 & (v151 >> 8);
  v163 = *(_DWORD *)(v149 + 4 * v162);
  if (!v163)
    goto LABEL_147;
  v164 = v149 + 4 * v150;
  v165 = 1;
  while (1)
  {
    v166 = (v163 - 1);
    if (v143 == *(_QWORD *)(v164 + 16 * v166))
      break;
    v162 = (v162 + v165) & v161;
    v163 = *(_DWORD *)(v149 + 4 * v162);
    ++v165;
    if (!v163)
      goto LABEL_147;
  }
  a6 = *(unsigned int *)(v164 + 16 * v166 + 8) | ((unint64_t)*(unsigned __int8 *)(v164 + 16 * v166 + 12) << 32);
LABEL_160:
  if ((_DWORD)a6 == -1)
  {
LABEL_147:
    if ((*((_BYTE *)v18 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v18, v144, v143, (uint64_t)&v342) & 1) != 0)
    {
      goto LABEL_194;
    }
    goto LABEL_148;
  }
  if ((int)a6 <= 63)
  {
    v179 = (uint64_t)v18 + 16;
    v180 = a6 << 32;
  }
  else
  {
    v179 = *((_QWORD *)v18 + 1) - 8;
    v180 = 0x3F00000000 - (a6 << 32);
  }
  v67 = *(_QWORD *)(v179 + (v180 >> 29));
  if ((v67 & 0xFFFE000000000002) != 0)
    goto LABEL_191;
  v181 = *(unsigned __int8 *)(v67 + 5);
  if (v181 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v18, (uint64_t)v144, (uint64_t)&v342, v67, SHIDWORD(a6), a6);
LABEL_194:
    if (BYTE1(v347[1]) != 2)
    {
      if (BYTE1(v347[1]) != 1)
        goto LABEL_204;
      goto LABEL_77;
    }
    goto LABEL_99;
  }
  if (v181 != 6)
  {
LABEL_191:
    v342 = (uint64_t (*)(unint64_t))v67;
    v346 = v18;
    v344 = __PAIR64__(a6, HIDWORD(a6));
    LOWORD(v347[1]) = 257;
    goto LABEL_78;
  }
  v182 = *(_DWORD *)(v146 + 16) & 3;
  v183 = *(_QWORD *)(v67 + 16);
  if (v142 == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v67 & 0xFFFFFFFE) + 0x4C)))
  {
    v185 = *(int8x16_t ***)(v67 + 24);
    v184 = *(_QWORD *)(v67 + 32);
    v342 = *(uint64_t (**)(unint64_t))(v67 + 8);
    v343 = v183;
    LODWORD(v344) = HIDWORD(a6);
    v346 = v18;
    BYTE1(v347[1]) = 3;
    if (v182 != 2)
      LOBYTE(v347[1]) = 1;
    BYTE3(v347[1]) = 1;
    v350 = v185;
    v351 = v184;
  }
  else
  {
    v342 = *(uint64_t (**)(unint64_t))(v67 + 8);
    v343 = v183;
    LODWORD(v344) = HIDWORD(a6);
    v346 = v18;
    BYTE1(v347[1]) = 3;
    if (v182 != 2)
      LOBYTE(v347[1]) = 1;
  }
LABEL_204:
  v89 = JSC::PropertySlot::customGetter((uint64_t)&v342, *(JSC::VM **)(v340 + 56), (WTF::StringImpl *)v143);
LABEL_101:
  v67 = v89;
LABEL_78:
  if (v349)
  {
    v68 = *(_DWORD *)(v348 + 4);
    if (!v68)
    {
      __break(0xC471u);
      JUMPOUT(0x198769268);
    }
    *(_DWORD *)(v348 + 4) = v68 - 1;
  }
  return v67;
}

uint64_t operationGetByIdGaveUp(unint64_t hasExceptionsAfterHandlingTraps, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int8x16_t a7, uint64_t a8, uint64_t a9)
{
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  int v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  __int16 v61;
  int v62;
  unsigned __int16 *v64;
  uint64_t v65;
  unsigned int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t (*v69)(unint64_t);
  int8x16_t **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const WTF::StringImpl *v75;
  uint64_t v76;
  int v77;
  _DWORD *v78;
  unint64_t v79;
  int v80;
  unsigned int *v81;
  int v82;
  unsigned int v83;
  JSC::CodeBlock *v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  JSC::VM *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  unsigned int *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t (*v108)();
  unsigned int *v109;
  unsigned int v110;
  int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t (**v124)(unint64_t);
  int8x16_t **v125;
  uint64_t v126;
  unint64_t v127;
  unsigned int v128;
  unint64_t v129;
  uint64_t v130;
  JSC::VM *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t **v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  BOOL v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t (*v146)(unint64_t);
  uint64_t (*v147)(JSC::VM **);
  JSC::VM **v148;
  JSC::VM *v149;
  unint64_t v150;
  WTF *v151;
  uint64_t v152;
  int8x16_t **v153;
  uint64_t v154;
  const WTF::StringImpl *v155;
  char v156;
  uint64_t v157;
  unint64_t v158;
  const WTF::StringImpl *v159;
  uint64_t v160;
  int8x16_t **v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  _BYTE *v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  JSC::VM *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  int v184;
  unint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  int v191;
  unsigned int v192;
  int v193;
  unint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  int8x16_t **v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  unsigned __int16 *v206;
  uint64_t v207;
  unsigned int v208;
  uint64_t v209;
  int8x16_t **v210;
  uint64_t v211;
  int v212;
  unint64_t v213;
  const WTF::StringImpl *v214;
  int v215;
  _DWORD *v216;
  unint64_t v217;
  int v218;
  unsigned int *v219;
  int v220;
  unsigned int v221;
  JSC::CodeBlock *v222;
  uint64_t v223;
  int v224;
  unsigned int v225;
  int v226;
  unsigned int v227;
  unsigned int *v228;
  unsigned int v229;
  unsigned int v230;
  JSC::VM *v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  JSC::VM *v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  int v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t (*v244)();
  unsigned int *v245;
  unsigned int v246;
  JSC::VM **v247;
  uint64_t v248;
  unint64_t v249;
  int v250;
  JSC::JSGlobalObject *v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  int8x16_t **v260;
  uint64_t v261;
  int v262;
  unsigned int v263;
  int v264;
  uint64_t v265;
  uint64_t (**v266)(unint64_t);
  int8x16_t **v267;
  WTF *v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int8x16_t **v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  char v280;
  int v281;
  unsigned int v282;
  uint64_t v283;
  unsigned __int8 *v284;
  int v285;
  uint64_t (*v286)(unint64_t);
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  const WTF::StringImpl *v290;
  uint64_t v291;
  _DWORD *v292;
  int8x16_t **v293;
  int v294;
  unsigned int *v295;
  int v296;
  unsigned int v297;
  JSC::CodeBlock *v298;
  uint64_t v299;
  int v300;
  unsigned int v301;
  int v302;
  unsigned int v303;
  unsigned int *v304;
  unsigned int v305;
  unsigned int v306;
  JSC::VM *v307;
  uint64_t *v308;
  uint64_t (*v309)(JSC::VM **);
  JSC::VM **v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t (*v313)();
  unsigned int *v314;
  unsigned int v315;
  int v316;
  int v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  _BOOL4 v321;
  uint64_t v322;
  BOOL v323;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  JSC::ICEvent *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  WTF::AtomStringImpl *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  WTF::StringImpl *v345;
  unsigned int v346;
  double v347;
  const unsigned __int8 *v348;
  BOOL v349;
  char v350;
  uint64_t (*v351)(JSC::VM **);
  JSC::VM **v352;
  WTF *v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  JSC::JSGlobalObject *v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  int v364;
  uint64_t v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t (**v370)(unint64_t);
  unint64_t v371;
  void *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  const WTF::StringImpl *v384;
  _DWORD *v385;
  unint64_t v386;
  int v387;
  unsigned int *v388;
  int v389;
  unsigned int v390;
  JSC::CodeBlock *v391;
  uint64_t v392;
  int v393;
  unsigned int v394;
  int v395;
  unsigned int v396;
  unsigned int *v397;
  unsigned int v398;
  unsigned int v399;
  JSC::VM *v400;
  uint64_t v401;
  uint64_t (*v402)();
  unsigned int *v403;
  unsigned int v404;
  uint64_t v405;
  unsigned __int8 *v406;
  unsigned int v407;
  unint64_t v408;
  uint64_t v409;
  unsigned int *v410;
  uint64_t v411;
  unint64_t v412;
  int v413;
  char v414;
  unsigned int **v415;
  unsigned int **v416;
  int v417;
  uint64_t v418;
  int v419;
  unsigned int v420;
  unint64_t NotAnObjectError;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  int v427;
  _WORD *v428;
  uint64_t v429;
  unsigned int v430;
  uint64_t v431;
  unsigned int v432;
  unsigned int v433;
  WTF *v434;
  uint64_t v435;
  unint64_t v436;
  unsigned __int16 *v438;
  uint64_t v439;
  unsigned int v440;
  unsigned int v441;
  uint64_t v442;
  unsigned int *v443;
  uint64_t v444;
  unint64_t v445;
  char v446;
  unint64_t *v447;
  unint64_t *v448;
  uint64_t v449;
  uint64_t v450;
  unsigned __int8 *v451;
  unsigned int v452;
  BOOL v453;
  unsigned int v454;
  uint64_t v455;
  JSC::JSString *v456;
  BOOL v457;
  unsigned int v458;
  uint64_t v459;
  unsigned __int8 *v460;
  unsigned int v461;
  const WTF::StringImpl *v462;
  unint64_t v463;
  int8x16_t **v464;
  unint64_t v465;
  uint64_t *v466;
  uint64_t v467;
  uint64_t *v468;
  JSC::JSString *v469;
  uint64_t v470;
  uint64_t (*v471)(unint64_t);
  uint64_t v472;
  unint64_t v473;
  unint64_t v474;
  JSC::JSString *v475;
  _QWORD v476[2];
  uint64_t v477;
  char v478;
  int8x16_t **v479;
  uint64_t (**v480)(unint64_t);
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  const WTF::StringImpl *v485;
  JSC::VM *v486;
  unint64_t v487;
  const WTF::StringImpl *v488;
  JSC::CodeBlock *v489;
  JSC::VM *v490;
  unint64_t v491;
  JSC::CodeBlock *v492;
  JSC::VM *v493;
  unint64_t v494;
  WTF::StringImpl *v495;
  int8x16_t **v496;
  int v497;
  uint64_t v498;
  int8x16_t **v499;
  uint64_t v500;
  uint64_t vars0;

  v9 = (unsigned __int8 *)hasExceptionsAfterHandlingTraps;
  v500 = *MEMORY[0x1E0C80C00];
  v10 = 0xFFFE000000000002;
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(v11 + 56);
  v13 = vars0;
  *(_QWORD *)(v12 + 40) = vars0;
  *(_DWORD *)(v13 + 36) = *(_DWORD *)(a2 + 112);
  *(_WORD *)(a2 + 129) |= 2u;
  a7.i64[0] = 0xFFFFFFFF00000000;
  v473 = 0xFFFFFFFF00000000;
  LOBYTE(v477) = 0;
  v478 = 0;
  v479 = 0;
  v480 = 0;
  v475 = 0;
  memset(v476, 0, 13);
  v474 = hasExceptionsAfterHandlingTraps;
  v14 = *(_QWORD *)(a2 + 16);
  v470 = v14;
  if (!v14)
  {
    v126 = *(_QWORD *)(v11 + 56);
    v127 = hasExceptionsAfterHandlingTraps & 0xFFFE000000000002;
    if ((hasExceptionsAfterHandlingTraps & 0xFFFE000000000002) != 0)
    {
      if (hasExceptionsAfterHandlingTraps >> 49)
      {
        v166 = *(_QWORD *)(v11 + 1536);
        if ((v166 & 1) != 0)
        {
          v309 = *(uint64_t (**)(JSC::VM **))(v166 & 0xFFFFFFFFFFFFFFFCLL);
          v310 = (JSC::VM **)(v11 - 16);
          if ((v11 & 8) == 0)
            v310 = (JSC::VM **)(v11 & 0xFFFFFFFFFFFFC000 | 8);
          v493 = *v310;
          v494 = v11;
          v495 = (WTF::StringImpl *)(v11 + 1536);
          v311 = v12;
          v312 = v11;
          v166 = v309(&v493);
          v10 = 0xFFFE000000000002;
          v11 = v312;
          v12 = v311;
        }
        v129 = *(_QWORD *)(v166 + 48);
        if (v129 != 2)
          goto LABEL_231;
      }
      else
      {
        v251 = (JSC::JSGlobalObject *)v11;
        v252 = v12;
        if ((hasExceptionsAfterHandlingTraps & 0xFFFFFFFFFFFFFFFELL) == 6)
        {
          v253 = *(_QWORD *)(v11 + 1472);
          if ((v253 & 1) != 0)
          {
            v351 = *(uint64_t (**)(JSC::VM **))(v253 & 0xFFFFFFFFFFFFFFFCLL);
            v352 = (JSC::VM **)(v11 - 16);
            if ((v11 & 8) == 0)
              v352 = (JSC::VM **)(v11 & 0xFFFFFFFFFFFFC000 | 8);
            v493 = *v352;
            v494 = v11;
            v495 = (WTF::StringImpl *)(v11 + 1472);
            v253 = v351(&v493);
          }
          v129 = *(_QWORD *)(v253 + 48);
          v12 = v252;
          v11 = (unint64_t)v251;
          v10 = 0xFFFE000000000002;
          if (v129 != 2)
            goto LABEL_231;
        }
        else
        {
          NotAnObjectError = JSC::createNotAnObjectError(v11, hasExceptionsAfterHandlingTraps);
          JSC::VM::throwException((JSC::VM *)v126, v251, NotAnObjectError, v422, v423, v424, v425, v426);
          v12 = v252;
        }
      }
      if (!byte_1ECF4C6B7)
        goto LABEL_572;
      v137 = (uint64_t **)v12;
      v138 = 0;
      v57 = 10;
LABEL_204:
      if (v14)
      {
        if ((v14 & 1) != 0)
          v139 = (WTF::StringImpl *)(v14 & 0xFFFFFFFFFFFFFFFELL);
        else
          v139 = *(WTF::StringImpl **)(v14 + 8);
      }
      else
      {
        v139 = 0;
      }
      v140 = v475 == (JSC::JSString *)v9;
LABEL_527:
      v329 = v140;
      v330 = (JSC::ICEvent *)JSC::ICEvent::ICEvent((uint64_t)&v493, v137, (const WTF::StringImpl *)9, v138, v139, v329, v10, a9);
      JSC::ICEvent::log(v330, v331, v332, v333, v334, v335, v336, v337);
      v345 = v495;
      v495 = 0;
      if (v345)
      {
        if (*(_DWORD *)v345 == 2)
        {
          WTF::StringImpl::~StringImpl(v345, v338, v339, v340, v341, v342, v343, v344);
          WTF::fastFree(v371, v372, v373, v374, v375, v376, v377, v378);
        }
        else
        {
          *(_DWORD *)v345 -= 2;
        }
      }
      goto LABEL_71;
    }
    v128 = *(unsigned __int8 *)(hasExceptionsAfterHandlingTraps + 5);
    v129 = hasExceptionsAfterHandlingTraps;
    if (v128 >= 0x17)
    {
LABEL_180:
      if ((*(_BYTE *)(v129 + 6) & 8) == 0)
      {
        v57 = 10;
        while (1)
        {
          v130 = *(_QWORD *)(16 * (*(_DWORD *)v129 & 0xFFFFFFFE) + 0x30);
          if (!v130)
            v130 = *(_QWORD *)(v129 + 16);
          if ((v130 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v130 + 5) < 0x17u)
            goto LABEL_201;
          v129 = v130;
          if ((*(_BYTE *)(v130 + 6) & 8) != 0)
            goto LABEL_187;
        }
      }
      v130 = v129;
LABEL_187:
      v466 = (uint64_t *)v11;
      v131 = *(JSC::VM **)(v11 + 56);
      v57 = 10;
      while (1)
      {
        v132 = (unint64_t)v9;
        v133 = v12;
        v134 = 16 * (*(_DWORD *)v130 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v130 + 6) & 8) != 0)
        {
          hasExceptionsAfterHandlingTraps = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v130 & 0xFFFFFFFE) + 0x4C) + 0x68))(v130, v466, 0, &v471);
          v350 = hasExceptionsAfterHandlingTraps;
          if (*((_DWORD *)v131 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v131, a2, a3, a4, a5, a6, v10, a9);
            if ((hasExceptionsAfterHandlingTraps & 1) != 0)
              goto LABEL_739;
          }
          if ((v350 & 1) != 0)
            goto LABEL_198;
          if (BYTE2(v476[1]) == 3)
          {
            if (BYTE4(v476[1]))
              goto LABEL_739;
          }
          else if (*(_BYTE *)(v130 + 5) == 61 && BYTE2(v476[1]) == 1)
          {
            goto LABEL_739;
          }
        }
        else if ((*(_BYTE *)(v130 + 6) & 0x20) != 0)
        {
          hasExceptionsAfterHandlingTraps = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v130, v131, 0, (uint64_t)&v471);
          if ((_DWORD)hasExceptionsAfterHandlingTraps)
            goto LABEL_198;
        }
        if ((*(_WORD *)(v134 + 12) & 0x800) != 0)
        {
          v135 = *(_DWORD *)v130;
          if (BYTE2(v476[1]) != 3)
          {
            v328 = 16 * (v135 & 0xFFFFFFFE);
            if ((*(_WORD *)(v328 + 12) & 0x800) != 0)
            {
              v136 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(16 * *(unsigned int *)(v328 + 76) + 0xB0))(v130, v466, a3, a4, a5, a6, v10);
            }
            else
            {
              v136 = *(_QWORD *)(v328 + 48);
              if (!v136)
                v136 = *(_QWORD *)(v130 + 16);
            }
            if (*((_DWORD *)v131 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v131, a2, a3, a4, a5, a6, v10, a9))
              goto LABEL_739;
            goto LABEL_194;
          }
        }
        else
        {
          v135 = *(_DWORD *)v130;
        }
        v136 = *(_QWORD *)(16 * (v135 & 0xFFFFFFFE) + 0x30);
        if (!v136)
          v136 = *(_QWORD *)(v130 + 16);
LABEL_194:
        if ((v136 & 0xFFFE000000000002) != 0)
          goto LABEL_200;
        v130 = v136;
        v12 = v133;
        v14 = v470;
        if (*(unsigned __int8 *)(v136 + 5) <= 0x16u)
          goto LABEL_201;
      }
    }
    v466 = (uint64_t *)v11;
    v132 = hasExceptionsAfterHandlingTraps;
    v133 = v12;
    if (v128 != 2)
    {
LABEL_776:
      v11 = (unint64_t)v466;
      v447 = (unint64_t *)(v466 + 149);
      v448 = (unint64_t *)(v466 + 151);
      if (v128 != 3)
        v448 = (unint64_t *)(v466 + 152);
      if (v128 != 2)
        v447 = v448;
      v129 = *v447;
      v12 = v133;
      v14 = v470;
      v10 = 0xFFFE000000000002;
LABEL_231:
      if (v129)
        goto LABEL_180;
      v57 = 10;
LABEL_201:
      if (!byte_1ECF4C6B7)
        goto LABEL_71;
      v137 = (uint64_t **)v12;
      if (v127)
        v138 = 0;
      else
        v138 = 16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C);
      goto LABEL_204;
    }
    if (*(_QWORD *)(*(_QWORD *)(v126 + 41952) + 1768))
    {
      v446 = 0;
    }
    else
    {
      v442 = *(_QWORD *)(hasExceptionsAfterHandlingTraps + 8);
      if ((v442 & 1) != 0)
        v443 = (unsigned int *)(hasExceptionsAfterHandlingTraps + 16);
      else
        v443 = (unsigned int *)(v442 + 4);
      v444 = *v443;
      if ((v444 & 0x80000000) != 0)
        v445 = COERCE__INT64((double)v444) + 0x2000000000000;
      else
        v445 = v444 | 0xFFFE000000000000;
      v471 = (uint64_t (*)(unint64_t))v445;
      LODWORD(v473) = 14;
      v475 = 0;
      v446 = 1;
      BYTE1(v476[1]) = 1;
    }
    if (*(_DWORD *)(v126 + 80))
    {
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v126, a2, a3, a4, a5, a6, 0xFFFE000000000002, a9);
      if ((hasExceptionsAfterHandlingTraps & 1) != 0)
      {
LABEL_739:
        v57 = 10;
        goto LABEL_200;
      }
    }
    if ((v446 & 1) == 0)
    {
      v128 = v9[5];
      goto LABEL_776;
    }
LABEL_198:
    if (BYTE1(v476[1]) == 1)
    {
      v57 = (uint64_t)v471;
LABEL_200:
      v12 = v133;
      v9 = (unsigned __int8 *)v132;
      v14 = v470;
      goto LABEL_201;
    }
    if (BYTE1(v476[1]) != 2)
    {
      v318 = (unint64_t)v475;
      v319 = *(_QWORD *)(16 * (*(_DWORD *)v475 & 0xFFFFFFFE) + 0x28);
      if ((v473 & 0x20) != 0)
        v318 = v474;
      if (BYTE3(v476[1]) != 1)
        goto LABEL_498;
      if ((v318 & 0xFFFE000000000002) != 0)
        goto LABEL_818;
      v320 = *(unsigned int *)(16 * (*(_DWORD *)v318 & 0xFFFFFFFE) + 0x4C);
      v321 = *(_DWORD *)(16 * (*(_DWORD *)v318 & 0xFFFFFFFE) + 0x4C) != 0;
      v322 = 16 * v320;
      if ((_DWORD)v320)
        v323 = v479 == (int8x16_t **)v322;
      else
        v323 = 1;
      if (!v323)
      {
        do
        {
          v322 = *(_QWORD *)(v322 + 16);
          v321 = v322 != 0;
        }
        while ((int8x16_t **)v322 != v479 && v322 != 0);
      }
      if (!v321)
      {
LABEL_818:
        v493 = (JSC::VM *)v466[7];
        v325 = JSC::throwDOMAttributeGetterTypeError(v319, &v493, v479, 0);
      }
      else
      {
LABEL_498:
        v325 = v471(v319);
      }
      goto LABEL_499;
    }
    v286 = v471;
    v465 = v474;
    v287 = v466[7];
    if (*(_DWORD *)(v287 + 80))
    {
      v417 = *(_DWORD *)(v287 + 80);
      if ((v417 & 0x27) != 0 && (v417 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v287 + 64), 7u, a3, a4, a5, a6, v10, a9);
      v418 = *(_QWORD *)(v287 + 16);
      if (v418)
      {
        v57 = *(_QWORD *)(v418 + 8);
        goto LABEL_200;
      }
    }
    v288 = *((_QWORD *)v286 + 1);
    if (*(_BYTE *)(v288 + 5) == 26)
    {
      v289 = *(_QWORD *)(v288 + 24);
      if ((v289 & 1) != 0)
        v289 = *(_QWORD *)((v289 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v289 + 5) != 8)
      {
        LOBYTE(v483) = 2;
        v290 = *(const WTF::StringImpl **)(v288 + 16);
        v484 = v289;
        v485 = v290;
        v481 = 0;
        v482 = 0;
        v291 = v466[7];
        v490 = (JSC::VM *)v291;
        LODWORD(v468) = 1;
        v462 = v290;
        v463 = 0;
        v292 = v290;
        goto LABEL_440;
      }
      v316 = 1;
      LOBYTE(v483) = 1;
      v484 = *(_QWORD *)(v289 + 40);
      v317 = &JSC::JSBoundFunction::s_info == (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v288 & 0xFFFFFFFE) + 0x4C));
      LOBYTE(v485) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v288 & 0xFFFFFFFE)
                                                                                + 0x4C));
    }
    else
    {
      hasExceptionsAfterHandlingTraps = (unint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD))(16 * *(unsigned int *)(16 * (*(_DWORD *)v288 & 0xFFFFFFFE) + 0x4C) + 0x38))(&v483, *((_QWORD *)v286 + 1));
      v316 = v483;
      v317 = v485;
    }
    v481 = 0;
    v482 = 0;
    v291 = v466[7];
    if (v316 == 2 || !v317)
    {
      v490 = (JSC::VM *)v466[7];
      if (v316 == 2)
      {
        LODWORD(v468) = 1;
        v289 = v484;
        v292 = v485;
        v462 = v485;
        v463 = 0;
      }
      else
      {
        LODWORD(v468) = 0;
        v289 = 0;
        v462 = 0;
        v463 = v484;
        v292 = (_DWORD *)v288;
      }
LABEL_440:
      v293 = *(int8x16_t ***)(16 * (*v292 & 0xFFFFFFFE) + 0x28);
      v486 = (JSC::VM *)v291;
      v487 = (unint64_t)v293;
      v464 = v293;
      v466 = (uint64_t *)(v291 + 90568);
      if (*(_QWORD *)(v291 + 90568))
      {
LABEL_441:
        *(_QWORD *)(v291 + 32) = 0;
        if ((unint64_t)&v462 < *(_QWORD *)(v291 + 8) || v482 > 0x10000)
        {
          v401 = JSC::throwStackOverflowError((unint64_t)v464, &v490, a3, a4, a5, a6, v10, a9);
        }
        else
        {
          if (!*(_DWORD *)(v291 + 4))
          {
            v294 = *(_DWORD *)(v291 + 80);
            if ((v294 & 0x27) != 0 && (v294 & 0x20) == 0)
            {
              v419 = *(_DWORD *)(v291 + 80);
              if ((v419 & 0x27) != 0 && (v419 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v291 + 64), 7u, a3, a4, a5, a6, v10, a9);
              v57 = *(_QWORD *)(v291 + 16);
              if (v57)
                goto LABEL_460;
            }
            v295 = (unsigned int *)(v291 + 80);
            v296 = *(_DWORD *)(v291 + 80);
            if ((v296 & 0x20) == 0)
            {
              do
                v297 = __ldaxr(v295);
              while (__stlxr(v297 | 0x20, v295));
            }
            v298 = 0;
            v299 = 0;
            v492 = 0;
            if ((_DWORD)v468)
            {
              if (*(_BYTE *)(v289 + 5) == 8
                || (*(_QWORD *)(v289 + 8)
                  ? (v313 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
                  : (v313 = 0),
                    v313))
              {
                v492 = *(JSC::CodeBlock **)(v289 + 96);
              }
              else
              {
                JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v289, v291, v288, v462, 0, &v492, v10, a9);
              }
              v57 = *((_QWORD *)v490 + 2);
              if (v57)
              {
                if ((v296 & 0x20) == 0)
                {
                  do
                    v420 = __ldaxr(v295);
                  while (__stlxr(v420 & 0xFFFFFFDF, v295));
                }
                goto LABEL_460;
              }
              *((_BYTE *)v492 + 17) = 0;
              v299 = *(_QWORD *)(v289 + 8);
              v314 = (unsigned int *)(v299 + 8);
              do
                v315 = __ldaxr(v314);
              while (__stlxr(v315 + 1, v314));
              v298 = v492;
            }
            v493 = v298;
            v494 = v288;
            v498 = v481;
            v499 = v464;
            v300 = 1;
            LODWORD(v495) = 1;
            if (v298)
            {
              v301 = *((_DWORD *)v298 + 7);
              v67 = v301 >= 2;
              v302 = v301 | 1;
              if (v67)
                v300 = v302;
              else
                v300 = 1;
            }
            v497 = v300;
            HIDWORD(v495) = 0;
            v496 = (int8x16_t **)v465;
            if ((v296 & 0x20) == 0)
            {
              do
                v303 = __ldaxr(v295);
              while (__stlxr(v303 & 0xFFFFFFDF, v295));
            }
            if ((_DWORD)v468)
            {
              v57 = vmEntryToJavaScript(*(_QWORD *)(v299 + 16), (JSC::VM *)v291, (uint64_t)&v493, a4, a5, a6, v10, a9);
              goto LABEL_456;
            }
            v57 = vmEntryToNative(v463, (JSC::VM *)v291, (uint64_t)&v493, a4, a5, a6, v10, a9);
            if (v299)
            {
LABEL_456:
              v304 = (unsigned int *)(v299 + 8);
              do
              {
                v305 = __ldaxr(v304);
                v306 = v305 - 1;
              }
              while (__stlxr(v306, v304));
              if (!v306)
              {
                atomic_store(1u, (unsigned int *)(v299 + 8));
                (*(void (**)(uint64_t))(*(_QWORD *)v299 + 32))(v299);
              }
            }
LABEL_460:
            v307 = v486;
            if (*((JSC::VM ***)v486 + 11321) == &v486)
            {
              *((_QWORD *)v486 + 11321) = 0;
              if (*((_BYTE *)v307 + 56))
                JSC::VM::executeEntryScopeServicesOnExit(v307, (void *)a2, a3, a4, a5, a6, v10, a9);
            }
            v308 = v466;
LABEL_462:
            *((_BYTE *)v308 + 2552) = 1;
            goto LABEL_200;
          }
          v401 = JSC::Interpreter::checkVMEntryPermission((JSC::Interpreter *)hasExceptionsAfterHandlingTraps);
        }
        v57 = v401;
        goto LABEL_460;
      }
      *v466 = (uint64_t)&v486;
      v353 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v353)
      {
        hasExceptionsAfterHandlingTraps = WTF::Thread::initializeCurrentTLS((WTF::Thread *)hasExceptionsAfterHandlingTraps);
        v353 = (WTF *)hasExceptionsAfterHandlingTraps;
      }
      if ((*((_BYTE *)v353 + 5) & 0x20) == 0)
      {
        *((_BYTE *)v353 + 5) |= 0x20u;
        if (BYTE2(dword_1ECF4C6C3))
          JSC::Wasm::startTrackingCurrentThread((JSC::Wasm *)hasExceptionsAfterHandlingTraps, a2, a3, a4, a5, a6, v10, a9);
        WTF::registerThreadForMachExceptionHandling(v353, (WTF::Thread *)a2, a3, a4, a5, a6, v10, a9);
      }
      hasExceptionsAfterHandlingTraps = (unint64_t)v486;
      if (!*((_BYTE *)v486 + 56))
      {
        v354 = *((_QWORD *)v486 + 11624);
        v355 = atomic_load(&JSC::lastTimeZoneID);
        if (v354 == v355)
          goto LABEL_441;
        hasExceptionsAfterHandlingTraps = (unint64_t)v486;
      }
      JSC::VM::executeEntryScopeServicesOnEntry((JSC::VM *)hasExceptionsAfterHandlingTraps, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, v10, a9);
      goto LABEL_441;
    }
    if (*(_DWORD *)(v288 + 88))
    {
      v325 = JSC::Interpreter::executeBoundCall((WTF::Thread *)hasExceptionsAfterHandlingTraps, v466[7], v288, (uint64_t)&v481, a5, a6, v10, a9);
LABEL_499:
      v57 = v325;
      goto LABEL_200;
    }
    v468 = (uint64_t *)(v291 + 90568);
    v381 = *(_QWORD *)(v288 + 32);
    v464 = *(int8x16_t ***)(v288 + 40);
    v382 = v381;
    if (*(_BYTE *)(v381 + 5) == 26)
    {
      v383 = *(_QWORD *)(v381 + 24);
      if ((v383 & 1) != 0)
        v383 = *(_QWORD *)((v383 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v383 + 5) != 8)
      {
        v463 = 0;
        LOBYTE(v486) = 2;
        v384 = *(const WTF::StringImpl **)(v381 + 16);
        v487 = v383;
        v488 = v384;
        v492 = (JSC::CodeBlock *)v291;
        LODWORD(v466) = 1;
LABEL_614:
        v385 = v384;
        goto LABEL_615;
      }
      LOBYTE(v486) = 1;
      v463 = *(_QWORD *)(v383 + 40);
      v487 = v463;
      LOBYTE(v488) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v381 & 0xFFFFFFFE)
                                                                                + 0x4C));
      v492 = (JSC::CodeBlock *)v291;
    }
    else
    {
      hasExceptionsAfterHandlingTraps = (unint64_t)(*(_QWORD *(**)(JSC::VM **__return_ptr, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v381 & 0xFFFFFFFE) + 0x4C) + 0x38))(&v486, v381);
      v492 = (JSC::CodeBlock *)v291;
      if (v486 == 2)
      {
        v463 = 0;
        LODWORD(v466) = 1;
        v383 = v487;
        v384 = v488;
        goto LABEL_614;
      }
      v463 = v487;
    }
    LODWORD(v466) = 0;
    v384 = 0;
    v383 = 0;
    v385 = (_DWORD *)v382;
LABEL_615:
    v386 = *(_QWORD *)(16 * (*v385 & 0xFFFFFFFE) + 0x28);
    v490 = (JSC::VM *)v291;
    v491 = v386;
    v465 = v386;
    if (*v468)
    {
LABEL_616:
      *(_QWORD *)(v291 + 32) = 0;
      if ((unint64_t)&v462 < *(_QWORD *)(v291 + 8) || v482 > 0x10000)
      {
        v449 = JSC::throwStackOverflowError(v465, &v492, a3, a4, a5, a6, v10, a9);
      }
      else
      {
        if (!*(_DWORD *)(v291 + 4))
        {
          v387 = *(_DWORD *)(v291 + 80);
          if ((v387 & 0x27) == 0
            || (v387 & 0x20) != 0
            || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v291, a2, a3, a4, a5, a6, v10, a9))
          {
            v388 = (unsigned int *)(v291 + 80);
            v389 = *(_DWORD *)(v291 + 80);
            if ((v389 & 0x20) == 0)
            {
              do
                v390 = __ldaxr(v388);
              while (__stlxr(v390 | 0x20, v388));
            }
            v391 = 0;
            v392 = 0;
            v489 = 0;
            if ((_DWORD)v466)
            {
              if (*(_BYTE *)(v383 + 5) == 8
                || (*(_QWORD *)(v383 + 8)
                  ? (v402 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
                  : (v402 = 0),
                    v402))
              {
                v489 = *(JSC::CodeBlock **)(v383 + 96);
              }
              else
              {
                JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v383, v291, v382, v384, 0, &v489, v10, a9);
              }
              v57 = *((_QWORD *)v492 + 2);
              if (v57)
              {
                if ((v389 & 0x20) == 0)
                {
                  do
                    v454 = __ldaxr(v388);
                  while (__stlxr(v454 & 0xFFFFFFDF, v388));
                }
                goto LABEL_635;
              }
              *((_BYTE *)v489 + 17) = 0;
              v392 = *(_QWORD *)(v383 + 8);
              v403 = (unsigned int *)(v392 + 8);
              do
                v404 = __ldaxr(v403);
              while (__stlxr(v404 + 1, v403));
              v391 = v489;
            }
            v493 = v391;
            v494 = v382;
            v498 = v481;
            v499 = (int8x16_t **)v465;
            v393 = 1;
            LODWORD(v495) = 1;
            if (v391)
            {
              v394 = *((_DWORD *)v391 + 7);
              v67 = v394 >= 2;
              v395 = v394 | 1;
              if (v67)
                v393 = v395;
              else
                v393 = 1;
            }
            v497 = v393;
            HIDWORD(v495) = 0;
            v496 = v464;
            if ((v389 & 0x20) == 0)
            {
              do
                v396 = __ldaxr(v388);
              while (__stlxr(v396 & 0xFFFFFFDF, v388));
            }
            if ((_DWORD)v466)
            {
              v57 = vmEntryToJavaScript(*(_QWORD *)(v392 + 16), (JSC::VM *)v291, (uint64_t)&v493, a4, a5, a6, v10, a9);
            }
            else
            {
              v57 = vmEntryToNative(v463, (JSC::VM *)v291, (uint64_t)&v493, a4, a5, a6, v10, a9);
              if (!v392)
                goto LABEL_635;
            }
            v397 = (unsigned int *)(v392 + 8);
            do
            {
              v398 = __ldaxr(v397);
              v399 = v398 - 1;
            }
            while (__stlxr(v399, v397));
            if (!v399)
            {
              atomic_store(1u, (unsigned int *)(v392 + 8));
              (*(void (**)(uint64_t))(*(_QWORD *)v392 + 32))(v392);
            }
            goto LABEL_635;
          }
          v57 = *(_QWORD *)(v291 + 16);
LABEL_635:
          v400 = v490;
          if (*((JSC::VM ***)v490 + 11321) == &v490)
          {
            *((_QWORD *)v490 + 11321) = 0;
            if (*((_BYTE *)v400 + 56))
              JSC::VM::executeEntryScopeServicesOnExit(v400, (void *)a2, a3, a4, a5, a6, v10, a9);
          }
          v308 = v468;
          goto LABEL_462;
        }
        v449 = JSC::Interpreter::checkVMEntryPermission((JSC::Interpreter *)hasExceptionsAfterHandlingTraps);
      }
      v57 = v449;
      goto LABEL_635;
    }
    *v468 = (uint64_t)&v490;
    v434 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v434)
    {
      hasExceptionsAfterHandlingTraps = WTF::Thread::initializeCurrentTLS((WTF::Thread *)hasExceptionsAfterHandlingTraps);
      v434 = (WTF *)hasExceptionsAfterHandlingTraps;
    }
    if ((*((_BYTE *)v434 + 5) & 0x20) == 0)
    {
      *((_BYTE *)v434 + 5) |= 0x20u;
      if (BYTE2(dword_1ECF4C6C3))
        JSC::Wasm::startTrackingCurrentThread((JSC::Wasm *)hasExceptionsAfterHandlingTraps, a2, a3, a4, a5, a6, v10, a9);
      WTF::registerThreadForMachExceptionHandling(v434, (WTF::Thread *)a2, a3, a4, a5, a6, v10, a9);
    }
    hasExceptionsAfterHandlingTraps = (unint64_t)v490;
    if (!*((_BYTE *)v490 + 56))
    {
      v435 = *((_QWORD *)v490 + 11624);
      v436 = atomic_load(&JSC::lastTimeZoneID);
      if (v435 == v436)
        goto LABEL_616;
      hasExceptionsAfterHandlingTraps = (unint64_t)v490;
    }
    JSC::VM::executeEntryScopeServicesOnEntry((JSC::VM *)hasExceptionsAfterHandlingTraps, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, v10, a9);
    goto LABEL_616;
  }
  if ((v14 & 1) != 0)
    v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  else
    v15 = *(_QWORD *)(v14 + 8);
  v16 = *(_QWORD *)(v11 + 56);
  v468 = (uint64_t *)(hasExceptionsAfterHandlingTraps & 0xFFFE000000000002);
  v469 = (JSC::JSString *)hasExceptionsAfterHandlingTraps;
  if ((hasExceptionsAfterHandlingTraps & 0xFFFE000000000002) == 0)
  {
    v17 = *(unsigned __int8 *)(hasExceptionsAfterHandlingTraps + 5);
    if (v17 > 0x16)
    {
      v18 = (unsigned int *)hasExceptionsAfterHandlingTraps;
      goto LABEL_7;
    }
    v408 = v11;
    v96 = v12;
    if (v17 != 2)
      goto LABEL_677;
    if (*(_QWORD *)(*(_QWORD *)(v16 + 41952) + 1768) == v15)
    {
      v409 = *((_QWORD *)v469 + 1);
      if ((v409 & 1) != 0)
        v410 = (unsigned int *)((char *)v469 + 16);
      else
        v410 = (unsigned int *)(v409 + 4);
      v411 = *v410;
      if ((v411 & 0x80000000) != 0)
        v412 = COERCE__INT64((double)v411) + 0x2000000000000;
      else
        v412 = v411 | 0xFFFE000000000000;
      v413 = 14;
      goto LABEL_673;
    }
    if (!v15 || (v427 = *(_DWORD *)(v15 + 16), (v427 & 0x20) != 0))
    {
LABEL_705:
      v414 = 0;
LABEL_674:
      if (*(_DWORD *)(v16 + 80))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v16, a2, a3, a4, a5, a6, v10, a9);
        if ((hasExceptionsAfterHandlingTraps & 1) != 0)
        {
LABEL_373:
          v57 = 10;
LABEL_374:
          v12 = v96;
          goto LABEL_70;
        }
      }
      v12 = v96;
      v11 = v408;
      v10 = 0xFFFE000000000002;
      if ((v414 & 1) != 0)
        goto LABEL_68;
      v17 = *((unsigned __int8 *)v469 + 5);
LABEL_677:
      v415 = (unsigned int **)(v408 + 1208);
      if (v17 != 3)
        v415 = (unsigned int **)(v408 + 1216);
      if (v17 == 2)
        v416 = (unsigned int **)(v408 + 1192);
      else
        v416 = v415;
      v18 = *v416;
      v12 = v96;
      v11 = v408;
      goto LABEL_87;
    }
    v428 = *(_WORD **)(v15 + 8);
    v429 = *(unsigned int *)(v15 + 4);
    if ((v427 & 4) == 0)
    {
      if ((_DWORD)v429)
      {
        v430 = (unsigned __int16)*v428 - 48;
        if (v430 <= 9 && (*v428 != 48 || v429 <= 1))
        {
          v438 = v428 + 1;
          v439 = v429 - 1;
          while (v439)
          {
            if (v430 > 0x19999999)
              goto LABEL_701;
            v440 = *v438 - 48;
            if (v440 > 9)
              goto LABEL_701;
            v431 = 0;
            LOBYTE(v429) = 0;
            v432 = 0;
            v67 = __CFADD__(v440, 10 * v430);
            v430 = v440 + 10 * v430;
            ++v438;
            --v439;
            if (v67)
              goto LABEL_703;
          }
          v432 = v430 & 0xFFFFFF00;
          v431 = 0x100000000;
          if (v430 == -1)
          {
            v431 = 0;
            LOBYTE(v429) = 0;
          }
          else
          {
            LOBYTE(v429) = v430;
          }
          if (v430 == -1)
            v432 = 0;
          goto LABEL_703;
        }
LABEL_701:
        v431 = 0;
        LOBYTE(v429) = 0;
      }
      else
      {
        v431 = 0;
      }
      v432 = 0;
LABEL_703:
      v433 = v429;
LABEL_704:
      if ((v431 & 0x100000000) != 0)
      {
        a3 = v432 | v433;
        v455 = *((_QWORD *)v469 + 1);
        v456 = (v455 & 1) != 0 ? (JSC::JSString *)((char *)v469 + 16) : (JSC::JSString *)(v455 + 4);
        if (*(_DWORD *)v456 > a3)
        {
          hasExceptionsAfterHandlingTraps = JSC::JSString::getIndex(v469, (JSC::JSGlobalObject *)v11, a3, a4, a5, a6, 0xFFFE000000000002, a9, a7);
          v412 = hasExceptionsAfterHandlingTraps;
          if (!*(_DWORD *)(v16 + 80)
            || (hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v16, a2, a3, a4, a5, a6, v10, a9), (hasExceptionsAfterHandlingTraps & 1) == 0))
          {
            v413 = 10;
LABEL_673:
            v471 = (uint64_t (*)(unint64_t))v412;
            LODWORD(v473) = v413;
            v475 = 0;
            v414 = 1;
            BYTE1(v476[1]) = 1;
            goto LABEL_674;
          }
        }
      }
      goto LABEL_705;
    }
    if ((_DWORD)v429)
    {
      v458 = *(unsigned __int8 *)v428 - 48;
      if (v458 <= 9 && (v429 < 2 || *(_BYTE *)v428 != 48))
      {
        v459 = v429 - 1;
        v460 = (unsigned __int8 *)v428 + 1;
        while (v459)
        {
          if (v458 > 0x19999999)
            goto LABEL_857;
          v461 = *v460 - 48;
          if (v461 > 9)
            goto LABEL_857;
          v433 = 0;
          LOBYTE(v429) = 0;
          v431 = 0;
          v67 = __CFADD__(v461, 10 * v458);
          v458 = v461 + 10 * v458;
          --v459;
          ++v460;
          if (v67)
            goto LABEL_859;
        }
        if (v458 == -1)
          v433 = 0;
        else
          v433 = v458 & 0xFFFFFF00;
        if (v458 == -1)
          LOBYTE(v429) = 0;
        else
          LOBYTE(v429) = v458;
        if (v458 == -1)
          v431 = 0;
        else
          v431 = 0x100000000;
        goto LABEL_859;
      }
LABEL_857:
      v433 = 0;
      LOBYTE(v429) = 0;
    }
    else
    {
      v433 = 0;
    }
    v431 = 0;
LABEL_859:
    v432 = v429;
    goto LABEL_704;
  }
  if (hasExceptionsAfterHandlingTraps >> 49)
  {
    v68 = *(_QWORD *)(v11 + 1536);
    if ((v68 & 1) == 0)
      goto LABEL_86;
    v147 = *(uint64_t (**)(JSC::VM **))(v68 & 0xFFFFFFFFFFFFFFFCLL);
    v247 = (JSC::VM **)(v11 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v11 & 8) != 0)
      v247 = (JSC::VM **)(v11 - 16);
    v149 = *v247;
    v150 = v11 + 1536;
    goto LABEL_370;
  }
  if ((hasExceptionsAfterHandlingTraps & 0xFFFFFFFFFFFFFFFELL) != 6)
  {
    v356 = v12;
    v357 = (JSC::JSGlobalObject *)v11;
    v358 = JSC::createNotAnObjectError(v11, hasExceptionsAfterHandlingTraps);
    JSC::VM::throwException((JSC::VM *)v16, v357, v358, v359, v360, v361, v362, v363);
    v12 = v356;
LABEL_571:
    if (byte_1ECF4C6B7)
    {
      v137 = (uint64_t **)v12;
      v138 = 0;
      v57 = 10;
      goto LABEL_524;
    }
LABEL_572:
    v57 = 10;
    goto LABEL_71;
  }
  v68 = *(_QWORD *)(v11 + 1472);
  if ((v68 & 1) != 0)
  {
    v147 = *(uint64_t (**)(JSC::VM **))(v68 & 0xFFFFFFFFFFFFFFFCLL);
    v148 = (JSC::VM **)(v11 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v11 & 8) != 0)
      v148 = (JSC::VM **)(v11 - 16);
    v149 = *v148;
    v150 = v11 + 1472;
LABEL_370:
    v493 = v149;
    v494 = v11;
    v495 = (WTF::StringImpl *)v150;
    v248 = v12;
    v249 = v11;
    v68 = v147(&v493);
    v10 = 0xFFFE000000000002;
    v11 = v249;
    v12 = v248;
  }
LABEL_86:
  v18 = *(unsigned int **)(v68 + 48);
  if (v18 == (unsigned int *)2)
    goto LABEL_571;
LABEL_87:
  if (!v18)
    goto LABEL_59;
  v16 = *(_QWORD *)(v11 + 56);
LABEL_7:
  v19 = (unint64_t)v18 + 6;
  v20 = v15 >> 4;
  v21 = (uint64_t)v18;
  if ((*((_BYTE *)v18 + 6) & 8) == 0)
  {
    a2 = 40;
    v22 = v18;
    do
    {
      v23 = *v22 & 0xFFFFFFFE;
      v24 = 16 * v23;
      if ((_DWORD)v20 && (v20 & ~*(_DWORD *)(16 * v23 + 0x20)) == 0)
      {
        hasExceptionsAfterHandlingTraps = *(_QWORD *)(16 * v23 + 0x58);
        if (hasExceptionsAfterHandlingTraps)
          goto LABEL_885;
        v35 = *(_QWORD *)(16 * v23 + 0x40);
        if (v35 && (*(_BYTE *)(v35 + 5) == 1 || *(_DWORD *)(v35 + 80) >= 2u))
        {
          v36 = v12;
          v37 = v11;
          JSC::Structure::materializePropertyTable((JSC::Structure *)v24, (JSC::VM *)v16, 1, (const JSC::PropertyTable *)a4, a5, a6, 0xFFFE000000000002, a9);
          a2 = 40;
          v10 = 0xFFFE000000000002;
          v11 = v37;
          v12 = v36;
          if (hasExceptionsAfterHandlingTraps)
          {
LABEL_885:
            if (*(_DWORD *)(hasExceptionsAfterHandlingTraps + 24))
            {
              v25 = *(_QWORD *)(hasExceptionsAfterHandlingTraps + 16);
              v26 = v25 & 0xFFFFFFFFFFFFFFFELL;
              v27 = *(unsigned int *)(hasExceptionsAfterHandlingTraps + 8);
              v28 = *(_DWORD *)(v15 + 16);
              if ((v25 & 1) != 0)
              {
                if ((v28 & 0x20) != 0)
                  v28 = *(_DWORD *)(v15 + 32);
                v29 = *(_DWORD *)(hasExceptionsAfterHandlingTraps + 12);
                v30 = (v28 >> 8) & *(_QWORD *)&v29;
                v31 = *(unsigned __int8 *)(v26 + v30);
                if (*(_BYTE *)(v26 + v30))
                {
                  v32 = v26 + v27;
                  v33 = 1;
                  while (1)
                  {
                    v34 = *(_QWORD *)(v32 + 8 * (v31 - 1));
                    if (v15 == (v34 & 0xFFFFFFFFFFFFLL))
                      break;
                    v30 = ((_DWORD)v30 + v33) & v29;
                    v31 = *(unsigned __int8 *)(v26 + v30);
                    ++v33;
                    if (!*(_BYTE *)(v26 + v30))
                      goto LABEL_20;
                  }
                  a6 = (v34 >> 16) & 0xFF00000000 | HIBYTE(v34);
LABEL_44:
                  if ((_DWORD)a6 != -1)
                  {
                    a5 = HIDWORD(a6);
                    if ((int)a6 <= 63)
                    {
                      v58 = (uint64_t)(v22 + 4);
                      v59 = a6 << 32;
                    }
                    else
                    {
                      v58 = *((_QWORD *)v22 + 1) - 8;
                      v59 = 0x3F00000000 - (a6 << 32);
                    }
                    a4 = *(_QWORD *)(v58 + (v59 >> 29));
                    if ((a4 & 0xFFFE000000000002) != 0)
                      goto LABEL_65;
                    v60 = *(unsigned __int8 *)(a4 + 5);
                    if (v60 == 5)
                    {
                      v104 = v22;
                      v105 = v16;
                      goto LABEL_138;
                    }
                    if (v60 != 6)
                    {
LABEL_65:
                      v471 = (uint64_t (*)(unint64_t))a4;
                      v475 = (JSC::JSString *)v22;
                      goto LABEL_66;
                    }
                    v122 = *(_DWORD *)(v24 + 16) & 3;
                    v123 = *(_QWORD *)(a4 + 16);
                    if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
                    {
                      v471 = *(uint64_t (**)(unint64_t))(a4 + 8);
                      v472 = v123;
                      LODWORD(v473) = HIDWORD(a6);
                      v475 = (JSC::JSString *)v22;
                      BYTE1(v476[1]) = 3;
                      if (v122 == 2)
                        goto LABEL_68;
                      goto LABEL_307;
                    }
                    v125 = *(int8x16_t ***)(a4 + 24);
                    v124 = *(uint64_t (***)(unint64_t))(a4 + 32);
                    v471 = *(uint64_t (**)(unint64_t))(a4 + 8);
                    v472 = v123;
                    LODWORD(v473) = HIDWORD(a6);
                    v475 = (JSC::JSString *)v22;
                    BYTE1(v476[1]) = 3;
                    if (v122 != 2)
                      LOBYTE(v476[1]) = 1;
                    BYTE3(v476[1]) = 1;
                    v479 = v125;
                    v480 = v124;
                    goto LABEL_68;
                  }
                }
              }
              else
              {
                if ((v28 & 0x20) != 0)
                  v28 = *(_DWORD *)(v15 + 32);
                v47 = *(_DWORD *)(hasExceptionsAfterHandlingTraps + 12);
                v48 = v47 & (v28 >> 8);
                v49 = *(_DWORD *)(v26 + 4 * v48);
                if (v49)
                {
                  v50 = v26 + 4 * v27;
                  v51 = 1;
                  while (1)
                  {
                    v52 = (v49 - 1);
                    if (v15 == *(_QWORD *)(v50 + 16 * v52))
                      break;
                    v48 = (v48 + v51) & v47;
                    v49 = *(_DWORD *)(v26 + 4 * v48);
                    ++v51;
                    if (!v49)
                      goto LABEL_20;
                  }
                  a6 = *(unsigned int *)(v50 + 16 * v52 + 8) | ((unint64_t)*(unsigned __int8 *)(v50 + 16 * v52 + 12) << 32);
                  goto LABEL_44;
                }
              }
            }
          }
        }
      }
LABEL_20:
      if ((*(_BYTE *)v19 & 0x20) == 0)
        goto LABEL_21;
      v102 = *(unsigned int *)(16 * (*v22 & 0xFFFFFFFE) + 0x4C);
      v103 = !(_DWORD)v102 || v15 == 0;
      if (v103)
        goto LABEL_21;
      v39 = 16 * v102;
      do
      {
        v38 = *(_QWORD *)(v39 + 24);
        if (!v38)
          goto LABEL_32;
        if ((*(_BYTE *)((16 * *v22) | 0x12) & 0x40) != 0)
          goto LABEL_32;
        v40 = *(_DWORD *)(v15 + 16);
        if ((v40 & 0x20) != 0)
          goto LABEL_32;
        v41 = *(_DWORD *)(v38 + 4) & (v40 >> 8);
        v42 = *(_QWORD *)(v38 + 32);
        v43 = *(unsigned __int16 *)(v42 + 4 * v41);
        if (v43 == 0xFFFF)
          goto LABEL_32;
        v464 = *(int8x16_t ***)(v38 + 16);
        v466 = (uint64_t *)v11;
        v467 = v12;
        while (1)
        {
          v44 = *(_QWORD *)(v38 + 24);
          v465 = (__int16)v43;
          v45 = (_QWORD *)(v44 + 40 * (__int16)v43);
          v46 = v45[1];
          if (!v46)
            goto LABEL_41;
          hasExceptionsAfterHandlingTraps = WTF::equal(v15, *v45, v46 - 1);
          if ((hasExceptionsAfterHandlingTraps & 1) != 0)
            break;
          v42 = *(_QWORD *)(v38 + 32);
          v11 = (unint64_t)v466;
          v12 = v467;
          v10 = 0xFFFE000000000002;
LABEL_41:
          v41 = *(__int16 *)(v42 + 4 * v41 + 2);
          a2 = 40;
          if (v41 == -1)
            goto LABEL_32;
          LOWORD(v43) = *(_WORD *)(v42 + 4 * v41);
        }
        v141 = *(_QWORD *)(v38 + 24);
        v11 = (unint64_t)v466;
        v12 = v467;
        v10 = 0xFFFE000000000002;
        a2 = 40;
        if (v141)
        {
          v142 = *(_DWORD *)(v141 + 40 * (int)v465 + 16);
          if ((v142 & 0x3B10) == 0)
          {
            if ((v142 & 0x400) == 0)
            {
              v143 = *(_DWORD *)(v141 + 40 * (int)v465 + 16);
              if ((v142 & 0x8000) != 0)
              {
                v368 = v141 + 40 * (int)v465;
                v370 = *(uint64_t (***)(unint64_t))(v368 + 24);
                v369 = *(_QWORD *)(v368 + 32);
                v471 = *v370;
                v472 = v369;
                LODWORD(v473) = v143;
                v475 = (JSC::JSString *)v22;
                LOWORD(v476[1]) = 769;
                BYTE3(v476[1]) = 1;
                v479 = v464;
                v480 = v370;
                goto LABEL_68;
              }
              v144 = v141 + 40 * (int)v465;
              v146 = *(uint64_t (**)(unint64_t))(v144 + 24);
              v145 = *(_QWORD *)(v144 + 32);
              if ((v142 & 0x4000) != 0)
              {
                v471 = v146;
                v472 = v145;
                LODWORD(v473) = v142;
                v475 = (JSC::JSString *)v22;
                LOWORD(v476[1]) = 769;
                BYTE3(v476[1]) = 1;
                v479 = v464;
                v480 = 0;
                goto LABEL_68;
              }
              v471 = v146;
              v472 = v145;
              LODWORD(v473) = v142;
              v475 = (JSC::JSString *)v22;
              v61 = 769;
              goto LABEL_67;
            }
            v364 = *(_DWORD *)(v141 + 40 * (int)v465 + 16);
            v365 = *(_QWORD *)(v141 + 40 * (int)v465 + 24);
            v103 = v365 == (int)v365;
            v366 = v365 | 0xFFFE000000000000;
            v367 = COERCE__INT64((double)v365) + 0x2000000000000;
            if (v103)
              v367 = v366;
            v471 = (uint64_t (*)(unint64_t))v367;
            LODWORD(v473) = v364;
            v475 = (JSC::JSString *)v22;
            BYTE1(v476[1]) = 1;
LABEL_68:
            if (BYTE1(v476[1]) == 1)
            {
              v57 = (uint64_t)v471;
              goto LABEL_70;
            }
            if (BYTE1(v476[1]) != 2)
            {
              v113 = (unint64_t)v475;
              v114 = *(_QWORD *)(16 * (*(_DWORD *)v475 & 0xFFFFFFFE) + 0x28);
              if ((v473 & 0x20) != 0)
                v113 = v474;
              v115 = v12;
              if (BYTE3(v476[1]) != 1)
                goto LABEL_172;
              if ((v113 & 0xFFFE000000000002) != 0)
                goto LABEL_573;
              v116 = *(unsigned int *)(16 * (*(_DWORD *)v113 & 0xFFFFFFFE) + 0x4C);
              v117 = *(_DWORD *)(16 * (*(_DWORD *)v113 & 0xFFFFFFFE) + 0x4C) != 0;
              v118 = 16 * v116;
              if ((_DWORD)v116)
                v119 = v479 == (int8x16_t **)v118;
              else
                v119 = 1;
              if (!v119)
              {
                do
                {
                  v118 = *(_QWORD *)(v118 + 16);
                  v117 = v118 != 0;
                }
                while ((int8x16_t **)v118 != v479 && v118 != 0);
              }
              if (!v117)
              {
LABEL_573:
                v493 = *(JSC::VM **)(v11 + 56);
                v121 = JSC::throwDOMAttributeGetterTypeError(v114, &v493, v479, (WTF::StringImpl *)v15);
              }
              else
              {
LABEL_172:
                v121 = v471(v114);
              }
              v57 = v121;
              v12 = v115;
              goto LABEL_70;
            }
            v69 = v471;
            v70 = (int8x16_t **)v474;
            v71 = *(_QWORD *)(v11 + 56);
            if (*(_DWORD *)(v71 + 80))
            {
              v254 = v474;
              v255 = v11;
              v256 = v12;
              v257 = *(_DWORD *)(v71 + 80);
              if ((v257 & 0x27) != 0 && (v257 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v71 + 64), 7u, a3, a4, a5, a6, 0xFFFE000000000002, a9);
              v258 = *(_QWORD *)(v71 + 16);
              v12 = v256;
              v11 = v255;
              v70 = (int8x16_t **)v254;
              if (v258)
              {
                v57 = *(_QWORD *)(v258 + 8);
                goto LABEL_70;
              }
            }
            v72 = *((_QWORD *)v69 + 1);
            if (*(_BYTE *)(v72 + 5) == 26)
            {
              v73 = *(_QWORD *)(v72 + 24);
              if ((v73 & 1) != 0)
                v73 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFFFFELL) + 48);
              if (*(_BYTE *)(v73 + 5) != 8)
              {
                v74 = 0;
                LOBYTE(v483) = 2;
                v75 = *(const WTF::StringImpl **)(v72 + 16);
                v484 = v73;
                v485 = v75;
                v481 = 0;
                v482 = 0;
                v76 = *(_QWORD *)(v11 + 56);
                v490 = (JSC::VM *)v76;
                v77 = 1;
                goto LABEL_96;
              }
              v111 = 1;
              LOBYTE(v483) = 1;
              v484 = *(_QWORD *)(v73 + 40);
              v112 = &JSC::JSBoundFunction::s_info == (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v72 & 0xFFFFFFFE)
                                                                                + 0x4C));
              LOBYTE(v485) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)v72 & 0xFFFFFFFE)
                                                                                        + 0x4C));
            }
            else
            {
              v197 = *((_QWORD *)v69 + 1);
              v198 = v12;
              v199 = v11;
              v200 = v70;
              hasExceptionsAfterHandlingTraps = (unint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v72 & 0xFFFFFFFE) + 0x4C) + 0x38))(&v483, v197, a2);
              v70 = v200;
              v11 = v199;
              v12 = v198;
              v111 = v483;
              v112 = v485;
            }
            v481 = 0;
            v482 = 0;
            v76 = *(_QWORD *)(v11 + 56);
            if (v111 == 2 || !v112)
            {
              v490 = *(JSC::VM **)(v11 + 56);
              if (v111 == 2)
              {
                v74 = 0;
                v77 = 1;
                v73 = v484;
                v75 = v485;
LABEL_96:
                v78 = v75;
              }
              else
              {
                v77 = 0;
                v75 = 0;
                v73 = 0;
                v74 = v484;
                v78 = (_DWORD *)v72;
              }
              v79 = *(_QWORD *)(16 * (*v78 & 0xFFFFFFFE) + 0x28);
              v486 = (JSC::VM *)v76;
              v487 = v79;
              if (!*(_QWORD *)(v76 + 90568))
              {
                *(_QWORD *)(v76 + 90568) = &v486;
                v151 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                if (!v151)
                {
                  v152 = v12;
                  v153 = v70;
                  v154 = v74;
                  v155 = v75;
                  hasExceptionsAfterHandlingTraps = WTF::Thread::initializeCurrentTLS((WTF::Thread *)hasExceptionsAfterHandlingTraps);
                  v75 = v155;
                  v74 = v154;
                  v70 = v153;
                  v12 = v152;
                  v151 = (WTF *)hasExceptionsAfterHandlingTraps;
                }
                v156 = *((_BYTE *)v151 + 5);
                if ((v156 & 0x20) == 0)
                {
                  v466 = (uint64_t *)v75;
                  v275 = v74;
                  v276 = v70;
                  v277 = v12;
                  *((_BYTE *)v151 + 5) = v156 | 0x20;
                  if (BYTE2(dword_1ECF4C6C3))
                    JSC::Wasm::startTrackingCurrentThread((JSC::Wasm *)hasExceptionsAfterHandlingTraps, a2, a3, (uint64_t)v75, a5, a6, v10, a9);
                  WTF::registerThreadForMachExceptionHandling(v151, (WTF::Thread *)a2, a3, (uint64_t)v75, a5, a6, v10, a9);
                  v12 = v277;
                  v70 = v276;
                  v74 = v275;
                  v75 = (const WTF::StringImpl *)v466;
                }
                hasExceptionsAfterHandlingTraps = (unint64_t)v486;
                if (*((_BYTE *)v486 + 56))
                {
                  v159 = v75;
                  v160 = v74;
                  v161 = v70;
                  v162 = v12;
                }
                else
                {
                  v157 = *((_QWORD *)v486 + 11624);
                  v158 = atomic_load(&JSC::lastTimeZoneID);
                  if (v157 == v158)
                    goto LABEL_98;
                  v159 = v75;
                  v160 = v74;
                  v161 = v70;
                  v162 = v12;
                  hasExceptionsAfterHandlingTraps = (unint64_t)v486;
                }
                JSC::VM::executeEntryScopeServicesOnEntry((JSC::VM *)hasExceptionsAfterHandlingTraps, (WTF::AtomStringImpl *)a2, a3, (uint64_t)v75, a5, a6, v10, a9);
                v12 = v162;
                v70 = v161;
                v74 = v160;
                v75 = v159;
              }
LABEL_98:
              *(_QWORD *)(v76 + 32) = 0;
              if ((unint64_t)&v462 < *(_QWORD *)(v76 + 8) || v482 > 0x10000)
              {
                v242 = v12;
                v243 = JSC::throwStackOverflowError(v79, &v490, a3, (uint64_t)v75, a5, a6, v10, a9);
              }
              else
              {
                if (!*(_DWORD *)(v76 + 4))
                {
                  v80 = *(_DWORD *)(v76 + 80);
                  if ((v80 & 0x27) == 0 || (v80 & 0x20) != 0)
                    goto LABEL_102;
                  v466 = (uint64_t *)v75;
                  v259 = v74;
                  v260 = v70;
                  v261 = v12;
                  v262 = *(_DWORD *)(v76 + 80);
                  if ((v262 & 0x27) != 0 && (v262 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v76 + 64), 7u, a3, (uint64_t)v75, a5, a6, v10, a9);
                  v57 = *(_QWORD *)(v76 + 16);
                  v12 = v261;
                  v70 = v260;
                  v74 = v259;
                  v75 = (const WTF::StringImpl *)v466;
                  if (!v57)
                  {
LABEL_102:
                    v81 = (unsigned int *)(v76 + 80);
                    v82 = *(_DWORD *)(v76 + 80);
                    if ((v82 & 0x20) == 0)
                    {
                      do
                        v83 = __ldaxr(v81);
                      while (__stlxr(v83 | 0x20, v81));
                    }
                    v84 = 0;
                    v85 = 0;
                    v492 = 0;
                    if (v77)
                    {
                      if (*(_BYTE *)(v73 + 5) == 8
                        || (*(_QWORD *)(v73 + 8)
                          ? (v108 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
                          : (v108 = 0),
                            v108))
                      {
                        v492 = *(JSC::CodeBlock **)(v73 + 96);
                      }
                      else
                      {
                        v164 = v12;
                        v466 = (uint64_t *)v70;
                        v165 = v74;
                        JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v73, v76, v72, v75, 0, &v492, v10, a9);
                        v74 = v165;
                        v70 = (int8x16_t **)v466;
                        v12 = v164;
                      }
                      v57 = *((_QWORD *)v490 + 2);
                      if (!v57)
                      {
                        *((_BYTE *)v492 + 17) = 0;
                        v85 = *(_QWORD *)(v73 + 8);
                        v109 = (unsigned int *)(v85 + 8);
                        do
                          v110 = __ldaxr(v109);
                        while (__stlxr(v110 + 1, v109));
                        v84 = v492;
                        goto LABEL_105;
                      }
                      if ((v82 & 0x20) == 0)
                      {
                        do
                          v263 = __ldaxr(v81);
                        while (__stlxr(v263 & 0xFFFFFFDF, v81));
                      }
                    }
                    else
                    {
LABEL_105:
                      v493 = v84;
                      v494 = v72;
                      v498 = v481;
                      v499 = (int8x16_t **)v79;
                      v86 = 1;
                      LODWORD(v495) = 1;
                      if (v84)
                      {
                        v87 = *((_DWORD *)v84 + 7);
                        v67 = v87 >= 2;
                        v88 = v87 | 1;
                        if (v67)
                          v86 = v88;
                        else
                          v86 = 1;
                      }
                      v497 = v86;
                      HIDWORD(v495) = 0;
                      v496 = v70;
                      if ((v82 & 0x20) == 0)
                      {
                        do
                          v89 = __ldaxr(v81);
                        while (__stlxr(v89 & 0xFFFFFFDF, v81));
                      }
                      v90 = v12;
                      if (v77)
                      {
                        v57 = vmEntryToJavaScript(*(_QWORD *)(v85 + 16), (JSC::VM *)v76, (uint64_t)&v493, (uint64_t)v75, a5, a6, v10, a9);
                        v12 = v90;
LABEL_113:
                        v91 = (unsigned int *)(v85 + 8);
                        do
                        {
                          v92 = __ldaxr(v91);
                          v93 = v92 - 1;
                        }
                        while (__stlxr(v93, v91));
                        if (!v93)
                        {
                          atomic_store(1u, (unsigned int *)(v85 + 8));
                          (*(void (**)(uint64_t))(*(_QWORD *)v85 + 32))(v85);
                          v12 = v90;
                        }
                      }
                      else
                      {
                        v57 = vmEntryToNative(v74, (JSC::VM *)v76, (uint64_t)&v493, (uint64_t)v75, a5, a6, v10, a9);
                        v12 = v90;
                        if (v85)
                          goto LABEL_113;
                      }
                    }
                  }
LABEL_117:
                  v94 = v486;
                  if (*((JSC::VM ***)v486 + 11321) == &v486)
                  {
                    *((_QWORD *)v486 + 11321) = 0;
                    if (*((_BYTE *)v94 + 56))
                    {
                      v163 = v12;
                      JSC::VM::executeEntryScopeServicesOnExit(v94, (void *)a2, a3, (uint64_t)v75, a5, a6, v10, a9);
                      v12 = v163;
                    }
                  }
                  *(_BYTE *)(v76 + 93120) = 1;
                  goto LABEL_70;
                }
                v242 = v12;
                v243 = JSC::Interpreter::checkVMEntryPermission((JSC::Interpreter *)hasExceptionsAfterHandlingTraps);
              }
              v12 = v242;
              v57 = v243;
              goto LABEL_117;
            }
            if (*(_DWORD *)(v72 + 88))
            {
              v201 = v12;
              v202 = JSC::Interpreter::executeBoundCall((WTF::Thread *)hasExceptionsAfterHandlingTraps, *(_QWORD *)(v11 + 56), v72, (uint64_t)&v481, a5, a6, v10, a9);
              v12 = v201;
              v57 = v202;
              goto LABEL_70;
            }
            v209 = v76 + 90568;
            v211 = *(_QWORD *)(v72 + 32);
            v210 = *(int8x16_t ***)(v72 + 40);
            v212 = *(unsigned __int8 *)(v211 + 5);
            v466 = (uint64_t *)(v76 + 90568);
            v467 = v12;
            if (v212 == 26)
            {
              v213 = *(_QWORD *)(v211 + 24);
              if ((v213 & 1) != 0)
                v213 = *(_QWORD *)((v213 & 0xFFFFFFFFFFFFFFFELL) + 48);
              if (*(_BYTE *)(v213 + 5) != 8)
              {
                v465 = 0;
                LOBYTE(v486) = 2;
                v214 = *(const WTF::StringImpl **)(v211 + 16);
                v487 = v213;
                v488 = v214;
                v492 = (JSC::CodeBlock *)v76;
                v215 = 1;
                v216 = v214;
                goto LABEL_313;
              }
              LOBYTE(v486) = 1;
              v465 = *(_QWORD *)(v213 + 40);
              v487 = v465;
              LOBYTE(v488) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)v211 & 0xFFFFFFFE)
                                                                                        + 0x4C));
              v492 = (JSC::CodeBlock *)v76;
LABEL_364:
              v215 = 0;
              v214 = 0;
              v213 = 0;
              v216 = (_DWORD *)v211;
            }
            else
            {
              hasExceptionsAfterHandlingTraps = (unint64_t)(*(_QWORD *(**)(JSC::VM **__return_ptr, uint64_t, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v211 & 0xFFFFFFFE) + 0x4C) + 0x38))(&v486, v211, a2);
              v492 = (JSC::CodeBlock *)v76;
              if (v486 != 2)
              {
                v465 = v487;
                v209 = (uint64_t)v466;
                goto LABEL_364;
              }
              v465 = 0;
              v215 = 1;
              v213 = v487;
              v214 = v488;
              v216 = v488;
              v209 = (uint64_t)v466;
            }
LABEL_313:
            v217 = *(_QWORD *)(16 * (*v216 & 0xFFFFFFFE) + 0x28);
            v490 = (JSC::VM *)v76;
            v491 = v217;
            if (!*(_QWORD *)v209)
            {
              *(_QWORD *)v209 = &v490;
              v268 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v268)
              {
                hasExceptionsAfterHandlingTraps = WTF::Thread::initializeCurrentTLS((WTF::Thread *)hasExceptionsAfterHandlingTraps);
                v268 = (WTF *)hasExceptionsAfterHandlingTraps;
              }
              if ((*((_BYTE *)v268 + 5) & 0x20) == 0)
              {
                *((_BYTE *)v268 + 5) |= 0x20u;
                if (BYTE2(dword_1ECF4C6C3))
                  JSC::Wasm::startTrackingCurrentThread((JSC::Wasm *)hasExceptionsAfterHandlingTraps, a2, a3, a4, a5, a6, v10, a9);
                WTF::registerThreadForMachExceptionHandling(v268, (WTF::Thread *)a2, a3, a4, a5, a6, v10, a9);
              }
              hasExceptionsAfterHandlingTraps = (unint64_t)v490;
              if (!*((_BYTE *)v490 + 56))
              {
                v269 = *((_QWORD *)v490 + 11624);
                v270 = atomic_load(&JSC::lastTimeZoneID);
                v209 = (uint64_t)v466;
                if (v269 == v270)
                  goto LABEL_314;
                hasExceptionsAfterHandlingTraps = (unint64_t)v490;
              }
              JSC::VM::executeEntryScopeServicesOnEntry((JSC::VM *)hasExceptionsAfterHandlingTraps, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, v10, a9);
              v209 = (uint64_t)v466;
            }
LABEL_314:
            *(_QWORD *)(v76 + 32) = 0;
            if ((unint64_t)&v462 < *(_QWORD *)(v76 + 8) || v482 > 0x10000)
            {
              v326 = JSC::throwStackOverflowError(v217, &v492, a3, a4, a5, a6, v10, a9);
            }
            else
            {
              if (!*(_DWORD *)(v76 + 4))
              {
                v218 = *(_DWORD *)(v76 + 80);
                if ((v218 & 0x27) != 0
                  && (v218 & 0x20) == 0
                  && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v76, a2, a3, a4, a5, a6, v10, a9))
                {
                  v57 = *(_QWORD *)(v76 + 16);
                  goto LABEL_506;
                }
                v219 = (unsigned int *)(v76 + 80);
                v220 = *(_DWORD *)(v76 + 80);
                if ((v220 & 0x20) == 0)
                {
                  do
                    v221 = __ldaxr(v219);
                  while (__stlxr(v221 | 0x20, v219));
                }
                v222 = 0;
                v223 = 0;
                v489 = 0;
                if (v215)
                {
                  if (*(_BYTE *)(v213 + 5) == 8
                    || (*(_QWORD *)(v213 + 8)
                      ? (v244 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
                      : (v244 = 0),
                        v244))
                  {
                    v489 = *(JSC::CodeBlock **)(v213 + 96);
                  }
                  else
                  {
                    JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v213, v76, v211, v214, 0, &v489, v10, a9);
                  }
                  v57 = *((_QWORD *)v492 + 2);
                  if (!v57)
                  {
                    *((_BYTE *)v489 + 17) = 0;
                    v223 = *(_QWORD *)(v213 + 8);
                    v245 = (unsigned int *)(v223 + 8);
                    do
                      v246 = __ldaxr(v245);
                    while (__stlxr(v246 + 1, v245));
                    v222 = v489;
                    goto LABEL_321;
                  }
                  if ((v220 & 0x20) == 0)
                  {
                    do
                      v346 = __ldaxr(v219);
                    while (__stlxr(v346 & 0xFFFFFFDF, v219));
                  }
LABEL_506:
                  v209 = (uint64_t)v466;
                  v12 = v467;
                }
                else
                {
LABEL_321:
                  v493 = v222;
                  v494 = v211;
                  v498 = v481;
                  v499 = (int8x16_t **)v217;
                  v224 = 1;
                  LODWORD(v495) = 1;
                  if (v222)
                  {
                    v225 = *((_DWORD *)v222 + 7);
                    v67 = v225 >= 2;
                    v226 = v225 | 1;
                    if (v67)
                      v224 = v226;
                    else
                      v224 = 1;
                  }
                  v497 = v224;
                  HIDWORD(v495) = 0;
                  v496 = v210;
                  if ((v220 & 0x20) == 0)
                  {
                    do
                      v227 = __ldaxr(v219);
                    while (__stlxr(v227 & 0xFFFFFFDF, v219));
                  }
                  if (v215)
                  {
                    v57 = vmEntryToJavaScript(*(_QWORD *)(v223 + 16), (JSC::VM *)v76, (uint64_t)&v493, a4, a5, a6, v10, a9);
                    v209 = (uint64_t)v466;
                    v12 = v467;
LABEL_329:
                    v228 = (unsigned int *)(v223 + 8);
                    do
                    {
                      v229 = __ldaxr(v228);
                      v230 = v229 - 1;
                    }
                    while (__stlxr(v230, v228));
                    if (!v230)
                    {
                      atomic_store(1u, (unsigned int *)(v223 + 8));
                      v327 = v12;
                      (*(void (**)(uint64_t))(*(_QWORD *)v223 + 32))(v223);
                      v12 = v327;
                    }
                  }
                  else
                  {
                    v57 = vmEntryToNative(v465, (JSC::VM *)v76, (uint64_t)&v493, a4, a5, a6, v10, a9);
                    v209 = (uint64_t)v466;
                    v12 = v467;
                    if (v223)
                      goto LABEL_329;
                  }
                }
LABEL_333:
                v231 = v490;
                if (*((JSC::VM ***)v490 + 11321) == &v490)
                {
                  *((_QWORD *)v490 + 11321) = 0;
                  if (*((_BYTE *)v231 + 56))
                  {
                    v271 = v12;
                    JSC::VM::executeEntryScopeServicesOnExit(v231, (void *)a2, a3, a4, a5, a6, v10, a9);
                    v12 = v271;
                  }
                }
                *(_BYTE *)(v209 + 2552) = 1;
                goto LABEL_70;
              }
              v326 = JSC::Interpreter::checkVMEntryPermission((JSC::Interpreter *)hasExceptionsAfterHandlingTraps);
            }
            v57 = v326;
            v12 = v467;
            goto LABEL_333;
          }
          hasExceptionsAfterHandlingTraps = JSC::setUpStaticFunctionSlot((JSC::VM *)v16, (uint64_t)v464, v141 + 40 * (int)v465, v22, v15, (uint64_t)&v471, 0xFFFE000000000002, a9);
          a2 = 40;
          v10 = 0xFFFE000000000002;
          v11 = (unint64_t)v466;
          v12 = v467;
          if ((hasExceptionsAfterHandlingTraps & 1) != 0)
            goto LABEL_68;
        }
LABEL_32:
        v39 = *(_QWORD *)(v39 + 16);
      }
      while (v39);
LABEL_21:
      v21 = *(_QWORD *)(v24 + 48);
      if (!v21)
        v21 = *((_QWORD *)v22 + 2);
      if ((v21 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v21 + 5) < 0x17u)
      {
        if (!v15)
          goto LABEL_59;
        v53 = *(_DWORD *)(v15 + 16);
        if ((v53 & 0x20) != 0)
          goto LABEL_59;
        v54 = *(_BYTE **)(v15 + 8);
        v55 = *(unsigned int *)(v15 + 4);
        if ((v53 & 4) != 0)
        {
          v379 = v12;
          if (!(_DWORD)v55
            || (v56 = *v54 - 48, v56 > 9)
            || v55 >= 2 && *v54 == 48)
          {
            v57 = 10;
LABEL_587:
            v12 = v379;
            goto LABEL_70;
          }
          v405 = v55 - 1;
          v406 = v54 + 1;
          v57 = 10;
          while (v405)
          {
            if (v56 > 0x19999999)
              goto LABEL_587;
            v407 = *v406 - 48;
            if (v407 > 9)
              goto LABEL_587;
            v67 = __CFADD__(v407, 10 * v56);
            v56 = v407 + 10 * (_DWORD)v56;
            --v405;
            ++v406;
            v12 = v379;
            if (v67)
              goto LABEL_70;
          }
          v12 = v379;
          if ((_DWORD)v56 == -1)
            goto LABEL_59;
        }
        else
        {
          if (!(_DWORD)v55)
            goto LABEL_59;
          v56 = *(unsigned __int16 *)v54 - 48;
          if (v56 > 9 || *(_WORD *)v54 == 48 && v55 > 1)
            goto LABEL_59;
          v64 = (unsigned __int16 *)(v54 + 2);
          v65 = v55 - 1;
          v57 = 10;
          while (v65)
          {
            if (v56 <= 0x19999999)
            {
              v66 = *v64 - 48;
              if (v66 <= 9)
              {
                v67 = __CFADD__(v66, 10 * v56);
                v56 = v66 + 10 * (_DWORD)v56;
                ++v64;
                --v65;
                if (!v67)
                  continue;
              }
            }
            goto LABEL_70;
          }
          if ((_DWORD)v56 == -1)
            goto LABEL_59;
        }
        v95 = *(_QWORD *)(v11 + 56);
        v57 = 10;
        while (2)
        {
          v96 = v12;
          v97 = 16 * (*v18 & 0xFFFFFFFE);
          v98 = v11;
          hasExceptionsAfterHandlingTraps = (*(uint64_t (**)(unsigned int *, unint64_t, uint64_t, uint64_t (**)(unint64_t), uint64_t, unint64_t, unint64_t))(16 * *(unsigned int *)(v97 + 0x4C) + 0x70))(v18, v11, v56, &v471, a5, a6, 0xFFFE000000000002);
          v99 = hasExceptionsAfterHandlingTraps;
          if (*(_DWORD *)(v95 + 80))
          {
            v250 = *(_DWORD *)(v95 + 80);
            if ((v250 & 0x27) != 0 && (v250 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v95 + 64), 7u, a3, a4, a5, a6, v10, a9);
            if (*(_QWORD *)(v95 + 16))
              goto LABEL_373;
          }
          v12 = v96;
          v11 = v98;
          v10 = 0xFFFE000000000002;
          if ((v99 & 1) != 0)
            goto LABEL_68;
          if (BYTE2(v476[1]) == 3)
          {
            if (BYTE4(v476[1]))
              goto LABEL_373;
            v100 = *((unsigned __int8 *)v18 + 5);
            v12 = v96;
            v11 = v98;
            if (v100 != 61)
            {
LABEL_125:
              if ((v100 - 39) <= 0xA)
              {
                v380 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v18, a2, a3, a4, a5, a6, 0xFFFE000000000002, a9);
                v10 = 0xFFFE000000000002;
                v11 = v98;
                v12 = v96;
                if (v380 <= v56)
                  goto LABEL_59;
              }
            }
          }
          else
          {
            v100 = *((unsigned __int8 *)v18 + 5);
            if (v100 != 61)
              goto LABEL_125;
            if (BYTE2(v476[1]) == 1)
              goto LABEL_59;
          }
          if ((*(_WORD *)(v97 + 12) & 0x800) == 0 || BYTE2(v476[1]) == 3)
          {
            v101 = *(_QWORD *)(16 * (*v18 & 0xFFFFFFFE) + 0x30);
            if (!v101)
              v101 = *((_QWORD *)v18 + 2);
          }
          else
          {
            if ((*(_WORD *)(16 * (*v18 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v101 = (*(uint64_t (**)(unsigned int *, unint64_t))(16
                                                                                 * *(unsigned int *)(16 * (*v18 & 0xFFFFFFFE) + 0x4C)
                                                                                 + 0xB0))(v18, v98);
            }
            else
            {
              v101 = *(_QWORD *)(16 * (*v18 & 0xFFFFFFFE) + 0x30);
              if (!v101)
                v101 = *((_QWORD *)v18 + 2);
            }
            if (*(_DWORD *)(v95 + 80))
            {
              v457 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v95, a2, a3, a4, a5, a6, v10, a9);
              v12 = v96;
              v11 = v98;
              v10 = 0xFFFE000000000002;
              if (v457)
                goto LABEL_59;
            }
            else
            {
              v12 = v96;
              v11 = v98;
              v10 = 0xFFFE000000000002;
            }
          }
          if ((v101 & 0xFFFE000000000002) != 0)
            goto LABEL_70;
          v18 = (unsigned int *)v101;
          if (*(unsigned __int8 *)(v101 + 5) <= 0x16u)
            goto LABEL_70;
          continue;
        }
      }
      v19 = v21 + 6;
      v22 = (unsigned int *)v21;
    }
    while ((*(_BYTE *)(v21 + 6) & 8) == 0);
  }
  if (!v15)
    goto LABEL_242;
  v167 = *(_DWORD *)(v15 + 16);
  if ((v167 & 0x20) != 0)
    goto LABEL_242;
  v168 = *(_BYTE **)(v15 + 8);
  v169 = *(unsigned int *)(v15 + 4);
  if ((v167 & 4) != 0)
  {
    if ((_DWORD)v169)
    {
      v441 = *v168 - 48;
      if (v441 <= 9 && (v169 < 2 || *v168 != 48))
      {
        v450 = v169 - 1;
        v451 = v168 + 1;
        while (v450)
        {
          if (v441 > 0x19999999)
            goto LABEL_747;
          v452 = *v451 - 48;
          if (v452 > 9)
            goto LABEL_747;
          v173 = 0;
          LOBYTE(v169) = 0;
          v171 = 0;
          v67 = __CFADD__(v452, 10 * v441);
          v441 = v452 + 10 * v441;
          --v450;
          ++v451;
          if (v67)
            goto LABEL_749;
        }
        if (v441 == -1)
          v173 = 0;
        else
          v173 = v441 & 0xFFFFFF00;
        if (v441 == -1)
          LOBYTE(v169) = 0;
        else
          LOBYTE(v169) = v441;
        if (v441 == -1)
          v171 = 0;
        else
          v171 = 0x100000000;
        goto LABEL_749;
      }
LABEL_747:
      v173 = 0;
      LOBYTE(v169) = 0;
    }
    else
    {
      v173 = 0;
    }
    v171 = 0;
LABEL_749:
    v172 = v169;
    v10 = 0xFFFE000000000002;
    goto LABEL_241;
  }
  if ((_DWORD)v169)
  {
    v170 = *(unsigned __int16 *)v168 - 48;
    if (v170 <= 9 && (*(_WORD *)v168 != 48 || v169 <= 1))
    {
      v206 = (unsigned __int16 *)(v168 + 2);
      v207 = v169 - 1;
      while (v207)
      {
        if (v170 > 0x19999999)
          goto LABEL_238;
        v208 = *v206 - 48;
        if (v208 > 9)
          goto LABEL_238;
        v171 = 0;
        LOBYTE(v169) = 0;
        v172 = 0;
        v67 = __CFADD__(v208, 10 * v170);
        v170 = v208 + 10 * v170;
        ++v206;
        --v207;
        if (v67)
          goto LABEL_240;
      }
      v172 = v170 & 0xFFFFFF00;
      v171 = 0x100000000;
      if (v170 == -1)
      {
        v171 = 0;
        LOBYTE(v169) = 0;
      }
      else
      {
        LOBYTE(v169) = v170;
      }
      if (v170 == -1)
        v172 = 0;
      goto LABEL_240;
    }
LABEL_238:
    v171 = 0;
    LOBYTE(v169) = 0;
  }
  else
  {
    v171 = 0;
  }
  v172 = 0;
LABEL_240:
  v173 = v169;
LABEL_241:
  if ((v171 & 0x100000000) == 0)
  {
LABEL_242:
    v174 = *(JSC::VM **)(v11 + 56);
    v57 = 10;
    while (1)
    {
      v175 = 16 * (*(_DWORD *)v21 & 0xFFFFFFFE);
      if ((*(_BYTE *)(v21 + 6) & 8) == 0)
        break;
      v96 = v12;
      v278 = v11;
      hasExceptionsAfterHandlingTraps = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t (**)(unint64_t), uint64_t, unint64_t, unint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C) + 0x68))(v21, v11, v15, &v471, a5, a6, 0xFFFE000000000002);
      v280 = hasExceptionsAfterHandlingTraps;
      if (*((_DWORD *)v174 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v174, a2, a3, a4, a5, a6, v279, a9);
        if ((hasExceptionsAfterHandlingTraps & 1) != 0)
          goto LABEL_373;
      }
      v12 = v96;
      v11 = v278;
      v10 = 0xFFFE000000000002;
      if ((v280 & 1) != 0)
        goto LABEL_68;
      if (BYTE2(v476[1]) == 3)
      {
        if (BYTE4(v476[1]))
          goto LABEL_373;
        v281 = *(unsigned __int8 *)(v21 + 5);
        if (v281 == 61)
        {
LABEL_554:
          v12 = v96;
          v11 = v278;
          goto LABEL_256;
        }
LABEL_425:
        if (!v15)
          goto LABEL_554;
        if ((v281 - 50) < 0xFFFFFFF5)
          goto LABEL_554;
        v282 = *(_DWORD *)(v15 + 16);
        if ((v282 & 0x20) != 0)
          goto LABEL_554;
        v283 = *(unsigned int *)(v15 + 4);
        if (!(_DWORD)v283)
          goto LABEL_554;
        v284 = *(unsigned __int8 **)(v15 + 8);
        if ((v282 & 4) == 0)
        {
          v285 = *(unsigned __int16 *)v284;
          if ((_DWORD)v283 == 1)
            goto LABEL_431;
          if (v285 == 45)
          {
            v285 = *((unsigned __int16 *)v284 + 1);
            goto LABEL_516;
          }
          if ((v285 - 48) >= 0xA && ((_DWORD)v283 != 8 || v285 != 73))
          {
LABEL_557:
            if ((_DWORD)v283 != 3 || v285 != 78)
              goto LABEL_554;
          }
LABEL_538:
          v19 = v19 & 0xFFFFFF0000000000 | v283 | ((unint64_t)((v282 >> 2) & 1) << 32);
          JSC::jsToNumber(v284, v19);
          WTF::numberToString(&v493, v347);
          v349 = WTF::equal(v15, (unint64_t)&v493, v348);
          v12 = v96;
          v11 = v278;
          v10 = 0xFFFE000000000002;
          if (v349)
            goto LABEL_59;
          goto LABEL_256;
        }
        v285 = *v284;
        if ((_DWORD)v283 == 1)
        {
LABEL_431:
          v12 = v96;
          v11 = v278;
          if ((v285 - 48) < 0xA)
            goto LABEL_59;
          goto LABEL_256;
        }
        if (v285 == 45)
        {
          v285 = v284[1];
LABEL_516:
          if ((v285 - 48) < 0xA)
          {
            if ((_DWORD)v283 == 2)
              goto LABEL_373;
            goto LABEL_538;
          }
          if ((_DWORD)v283 != 9)
            goto LABEL_554;
        }
        else
        {
          if ((v285 - 48) < 0xA)
            goto LABEL_538;
          if ((_DWORD)v283 != 8)
            goto LABEL_557;
        }
        if (v285 != 73)
          goto LABEL_554;
        goto LABEL_538;
      }
      v281 = *(unsigned __int8 *)(v21 + 5);
      if (v281 != 61)
        goto LABEL_425;
      v12 = v96;
      v11 = v278;
      if (BYTE2(v476[1]) == 1)
        goto LABEL_59;
LABEL_256:
      if ((*(_WORD *)(v175 + 12) & 0x800) != 0)
      {
        v186 = *(_DWORD *)v21;
        if (BYTE2(v476[1]) != 3)
        {
          v272 = v11;
          v273 = v12;
          v274 = 16 * (v186 & 0xFFFFFFFE);
          if ((*(_WORD *)(v274 + 12) & 0x800) != 0)
          {
            v187 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))(16 * *(unsigned int *)(v274 + 76) + 0xB0))(v21, v11, a3, a4, a5, a6, 0xFFFE000000000002);
          }
          else
          {
            v187 = *(_QWORD *)(v274 + 48);
            if (!v187)
              v187 = *(_QWORD *)(v21 + 16);
          }
          if (*((_DWORD *)v174 + 20))
          {
            v453 = JSC::VM::hasExceptionsAfterHandlingTraps(v174, a2, a3, a4, a5, a6, v10, a9);
            v12 = v273;
            v11 = v272;
            v10 = 0xFFFE000000000002;
            if (v453)
              goto LABEL_59;
          }
          else
          {
            v12 = v273;
            v11 = v272;
            v10 = 0xFFFE000000000002;
          }
          goto LABEL_260;
        }
      }
      else
      {
        v186 = *(_DWORD *)v21;
      }
      v187 = *(_QWORD *)(16 * (v186 & 0xFFFFFFFE) + 0x30);
      if (!v187)
        v187 = *(_QWORD *)(v21 + 16);
LABEL_260:
      if ((v187 & 0xFFFE000000000002) == 0)
      {
        v21 = v187;
        if (*(unsigned __int8 *)(v187 + 5) > 0x16u)
          continue;
      }
      goto LABEL_70;
    }
    if ((_DWORD)v20 && (v20 & ~*(_DWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x20)) == 0)
    {
      hasExceptionsAfterHandlingTraps = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x58);
      if (hasExceptionsAfterHandlingTraps
        || (v188 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x40)) != 0
        && (*(_BYTE *)(v188 + 5) == 1 || *(_DWORD *)(v188 + 80) >= 2u)
        && (v189 = v12,
            v190 = v11,
            JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE)), v174, 1, (const JSC::PropertyTable *)a4, a5, a6, 0xFFFE000000000002, a9), v10 = 0xFFFE000000000002, v11 = v190, v12 = v189, hasExceptionsAfterHandlingTraps))
      {
        if (*(_DWORD *)(hasExceptionsAfterHandlingTraps + 24))
        {
          v176 = *(_QWORD *)(hasExceptionsAfterHandlingTraps + 16);
          v177 = v176 & 0xFFFFFFFFFFFFFFFELL;
          v178 = *(unsigned int *)(hasExceptionsAfterHandlingTraps + 8);
          v179 = *(_DWORD *)(v15 + 16);
          if ((v176 & 1) != 0)
          {
            if ((v179 & 0x20) != 0)
              v179 = *(_DWORD *)(v15 + 32);
            v180 = *(_DWORD *)(hasExceptionsAfterHandlingTraps + 12);
            v181 = (v179 >> 8) & *(_QWORD *)&v180;
            v182 = *(unsigned __int8 *)(v177 + v181);
            if (*(_BYTE *)(v177 + v181))
            {
              v183 = v177 + v178;
              v184 = 1;
              while (1)
              {
                v185 = *(_QWORD *)(v183 + 8 * (v182 - 1));
                if (v15 == (v185 & 0xFFFFFFFFFFFFLL))
                  break;
                v181 = ((_DWORD)v181 + v184) & v180;
                v182 = *(unsigned __int8 *)(v177 + v181);
                ++v184;
                if (!*(_BYTE *)(v177 + v181))
                  goto LABEL_255;
              }
              a6 = (v185 >> 16) & 0xFF00000000 | HIBYTE(v185);
              goto LABEL_268;
            }
          }
          else
          {
            if ((v179 & 0x20) != 0)
              v179 = *(_DWORD *)(v15 + 32);
            v191 = *(_DWORD *)(hasExceptionsAfterHandlingTraps + 12);
            v192 = v191 & (v179 >> 8);
            v193 = *(_DWORD *)(v177 + 4 * v192);
            if (v193)
            {
              v194 = v177 + 4 * v178;
              v195 = 1;
              while (1)
              {
                v196 = (v193 - 1);
                if (v15 == *(_QWORD *)(v194 + 16 * v196))
                  break;
                v192 = (v192 + v195) & v191;
                v193 = *(_DWORD *)(v177 + 4 * v192);
                ++v195;
                if (!v193)
                  goto LABEL_255;
              }
              a6 = *(unsigned int *)(v194 + 16 * v196 + 8) | ((unint64_t)*(unsigned __int8 *)(v194 + 16 * v196 + 12) << 32);
LABEL_268:
              if ((_DWORD)a6 != -1)
              {
                a5 = HIDWORD(a6);
                if ((int)a6 <= 63)
                {
                  v203 = v21 + 16;
                  v204 = a6 << 32;
                }
                else
                {
                  v203 = *(_QWORD *)(v21 + 8) - 8;
                  v204 = 0x3F00000000 - (a6 << 32);
                }
                a4 = *(_QWORD *)(v203 + (v204 >> 29));
                if ((a4 & 0xFFFE000000000002) == 0)
                {
                  v205 = *(unsigned __int8 *)(a4 + 5);
                  if (v205 != 5)
                  {
                    if (v205 != 6)
                      goto LABEL_286;
                    v264 = *(_DWORD *)(v175 + 16) & 3;
                    v265 = *(_QWORD *)(a4 + 16);
                    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
                    {
                      v267 = *(int8x16_t ***)(a4 + 24);
                      v266 = *(uint64_t (***)(unint64_t))(a4 + 32);
                      v471 = *(uint64_t (**)(unint64_t))(a4 + 8);
                      v472 = v265;
                      LODWORD(v473) = HIDWORD(a6);
                      v475 = (JSC::JSString *)v21;
                      BYTE1(v476[1]) = 3;
                      if (v264 != 2)
                        LOBYTE(v476[1]) = 1;
                      BYTE3(v476[1]) = 1;
                      v479 = v267;
                      v480 = v266;
                      v10 = 0xFFFE000000000002;
                      goto LABEL_68;
                    }
                    v471 = *(uint64_t (**)(unint64_t))(a4 + 8);
                    v472 = v265;
                    LODWORD(v473) = HIDWORD(a6);
                    v475 = (JSC::JSString *)v21;
                    BYTE1(v476[1]) = 3;
                    v10 = 0xFFFE000000000002;
                    if (v264 == 2)
                      goto LABEL_68;
LABEL_307:
                    LOBYTE(v476[1]) = 1;
                    goto LABEL_68;
                  }
                  v104 = (unsigned int *)v21;
                  v105 = (uint64_t)v174;
LABEL_138:
                  v106 = v12;
                  v107 = v11;
                  hasExceptionsAfterHandlingTraps = (unint64_t)JSC::JSObject::fillGetterPropertySlot(v104, v105, (uint64_t)&v471, a4, a5, a6);
                  v10 = 0xFFFE000000000002;
                  v11 = v107;
                  v12 = v106;
                  goto LABEL_68;
                }
LABEL_286:
                v471 = (uint64_t (*)(unint64_t))a4;
                v475 = (JSC::JSString *)v21;
LABEL_66:
                v473 = __PAIR64__(a6, a5);
                v61 = 257;
LABEL_67:
                LOWORD(v476[1]) = v61;
                goto LABEL_68;
              }
            }
          }
        }
      }
    }
LABEL_255:
    if ((*(_BYTE *)(v21 + 6) & 0x20) != 0)
    {
      v232 = v12;
      v233 = v11;
      hasExceptionsAfterHandlingTraps = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v21, v174, v15, (uint64_t)&v471);
      v10 = 0xFFFE000000000002;
      v11 = v233;
      v12 = v232;
      if ((hasExceptionsAfterHandlingTraps & 1) != 0)
        goto LABEL_68;
    }
    goto LABEL_256;
  }
  v234 = v172 | v173;
  v235 = *(JSC::VM **)(v11 + 56);
  v57 = 10;
  while (1)
  {
    v96 = v12;
    v236 = 16 * (*v18 & 0xFFFFFFFE);
    v237 = v11;
    hasExceptionsAfterHandlingTraps = (*(uint64_t (**)(unsigned int *, unint64_t, unint64_t, uint64_t (**)(unint64_t), uint64_t, unint64_t, uint64_t))(16 * *(unsigned int *)(v236 + 0x4C) + 0x70))(v18, v11, v234, &v471, a5, a6, v10);
    v239 = hasExceptionsAfterHandlingTraps;
    if (*((_DWORD *)v235 + 20))
      break;
    v12 = v96;
    v11 = v237;
    v10 = 0xFFFE000000000002;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0)
      goto LABEL_68;
LABEL_340:
    if (BYTE2(v476[1]) == 3)
    {
      if (BYTE4(v476[1]))
        goto LABEL_373;
      v240 = *((unsigned __int8 *)v18 + 5);
      if (v240 != 61)
      {
LABEL_342:
        if ((v240 - 39) <= 0xA
          && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v18, a2, a3, a4, a5, a6, 0xFFFE000000000002, a9) <= v234)
        {
          goto LABEL_373;
        }
      }
    }
    else
    {
      v240 = *((unsigned __int8 *)v18 + 5);
      if (v240 != 61)
        goto LABEL_342;
      if (BYTE2(v476[1]) == 1)
        goto LABEL_373;
    }
    if ((*(_WORD *)(v236 + 12) & 0x800) == 0 || BYTE2(v476[1]) == 3)
    {
      v241 = *(_QWORD *)(16 * (*v18 & 0xFFFFFFFE) + 0x30);
      if (!v241)
        v241 = *((_QWORD *)v18 + 2);
    }
    else
    {
      if ((*(_WORD *)(16 * (*v18 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v241 = (*(uint64_t (**)(unsigned int *, unint64_t))(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*v18 & 0xFFFFFFFE)
                                                                                             + 0x4C)
                                                                           + 0xB0))(v18, v237);
      }
      else
      {
        v241 = *(_QWORD *)(16 * (*v18 & 0xFFFFFFFE) + 0x30);
        if (!v241)
          v241 = *((_QWORD *)v18 + 2);
      }
      if (*((_DWORD *)v235 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v235, a2, a3, a4, a5, a6, v10, a9))
        goto LABEL_373;
    }
    if ((v241 & 0xFFFE000000000002) != 0)
      goto LABEL_374;
    v18 = (unsigned int *)v241;
    v12 = v96;
    v11 = v237;
    if (*(unsigned __int8 *)(v241 + 5) <= 0x16u)
      goto LABEL_70;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v235, a2, a3, a4, a5, a6, v238, a9);
  v10 = 0xFFFE000000000002;
  if (((hasExceptionsAfterHandlingTraps | v239) & 1) == 0)
    goto LABEL_340;
  v12 = v96;
  v11 = v237;
  if ((hasExceptionsAfterHandlingTraps & 1) == 0)
    goto LABEL_68;
LABEL_59:
  v57 = 10;
LABEL_70:
  if (byte_1ECF4C6B7)
  {
    v137 = (uint64_t **)v12;
    if (v468)
      v138 = 0;
    else
      v138 = 16 * *(unsigned int *)(16 * (*(_DWORD *)v469 & 0xFFFFFFFE) + 0x4C);
LABEL_524:
    if ((v470 & 1) != 0)
      v139 = (WTF::StringImpl *)(v470 & 0xFFFFFFFFFFFFFFFELL);
    else
      v139 = *(WTF::StringImpl **)(v470 + 8);
    v140 = v475 == v469;
    goto LABEL_527;
  }
LABEL_71:
  if (v478)
  {
    v62 = *(_DWORD *)(v477 + 4);
    if (!v62)
    {
      __break(0xC471u);
      JUMPOUT(0x19876B5ECLL);
    }
    *(_DWORD *)(v477 + 4) = v62 - 1;
  }
  return v57;
}

uint64_t operationGetByIdGeneric(unint64_t hasExceptionsAfterHandlingTraps, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  JSC::VM *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  JSC::VM *v16;
  unsigned int *v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  JSC::JSString *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  JSC::VM *v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  int v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  __int16 v58;
  int v59;
  unsigned __int16 *v61;
  uint64_t v62;
  unsigned int v63;
  BOOL v64;
  uint64_t v65;
  uint64_t (*v66)(unint64_t);
  int8x16_t **v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const WTF::StringImpl *v72;
  uint64_t v73;
  int v74;
  _DWORD *v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  unsigned int *v79;
  int v80;
  unsigned int v81;
  JSC::CodeBlock *v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  JSC::VM *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  JSC::VM *v92;
  uint64_t v93;
  JSC::VM *v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  JSC::VM *v102;
  unint64_t v103;
  uint64_t (*v104)();
  unsigned int *v105;
  unsigned int v106;
  int v107;
  int v108;
  JSC::VM *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t (**v120)(unint64_t);
  int8x16_t **v121;
  unsigned int v122;
  unint64_t v123;
  uint64_t v124;
  JSC::VM *v125;
  JSC::VM *v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t **v130;
  uint64_t v131;
  JSC::ICEvent *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  WTF::AtomStringImpl *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  uint64_t v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t (*v153)(unint64_t);
  JSC::VM *v154;
  uint64_t (*v155)(JSC::VM **);
  JSC::VM **v156;
  unint64_t v157;
  WTF *v158;
  JSC::VM *v159;
  int8x16_t **v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  int8x16_t **v165;
  JSC::VM *v166;
  JSC::VM *v167;
  JSC::VM *v168;
  const WTF::StringImpl *v169;
  int8x16_t **v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  _WORD *v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  unsigned int v178;
  unsigned int v179;
  JSC::VM *v180;
  uint64_t v181;
  JSC::VM *v182;
  unint64_t v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  JSC::VM *v188;
  unint64_t v189;
  int8x16_t **v190;
  JSC::VM *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  unsigned __int16 *v196;
  uint64_t v197;
  unsigned int v198;
  unint64_t v199;
  int8x16_t **v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  const WTF::StringImpl *v204;
  int v205;
  _DWORD *v206;
  unint64_t v207;
  int v208;
  unsigned int *v209;
  int v210;
  unsigned int v211;
  JSC::CodeBlock *v212;
  uint64_t v213;
  int v214;
  unsigned int v215;
  int v216;
  unsigned int v217;
  unsigned int *v218;
  unsigned int v219;
  unsigned int v220;
  JSC::VM *v221;
  unint64_t v222;
  JSC::VM *v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  int v227;
  int v228;
  uint64_t v229;
  JSC::VM *v230;
  unint64_t v231;
  JSC::VM *v232;
  uint64_t v233;
  uint64_t (*v234)();
  unsigned int *v235;
  unsigned int v236;
  uint64_t (*v237)(JSC::VM **);
  JSC::VM **v238;
  JSC::VM *v239;
  unint64_t v240;
  int v241;
  JSC::JSGlobalObject *v242;
  JSC::VM *v243;
  uint64_t v244;
  int8x16_t **v245;
  unint64_t v246;
  JSC::VM *v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  int8x16_t **v251;
  JSC::VM *v252;
  int v253;
  int v254;
  uint64_t v255;
  uint64_t (**v256)(unint64_t);
  int8x16_t **v257;
  unsigned int v258;
  WTF *v259;
  uint64_t v260;
  unint64_t v261;
  JSC::VM *v262;
  unint64_t v263;
  JSC::VM *v264;
  uint64_t v265;
  uint64_t v266;
  int8x16_t **v267;
  JSC::VM *v268;
  JSC::VM *v269;
  unint64_t v270;
  uint64_t v271;
  char v272;
  int v273;
  unsigned int v274;
  uint64_t v275;
  unsigned __int8 *v276;
  int v277;
  uint64_t (*v278)(unint64_t);
  uint64_t v279;
  uint64_t v280;
  const WTF::StringImpl *v281;
  uint64_t v282;
  _DWORD *v283;
  unint64_t v284;
  int v285;
  unsigned int *v286;
  int v287;
  unsigned int v288;
  JSC::CodeBlock *v289;
  uint64_t v290;
  int v291;
  unsigned int v292;
  int v293;
  unsigned int v294;
  unsigned int *v295;
  unsigned int v296;
  unsigned int v297;
  JSC::VM *v298;
  uint64_t v299;
  uint64_t (*v300)(JSC::VM **);
  JSC::VM **v301;
  JSC::VM *v302;
  unint64_t v303;
  uint64_t (*v304)();
  unsigned int *v305;
  unsigned int v306;
  int v307;
  int v308;
  unint64_t v309;
  unint64_t v310;
  uint64_t v311;
  _BOOL4 v312;
  uint64_t v313;
  BOOL v314;
  uint64_t v316;
  uint64_t v317;
  uint64_t **v318;
  uint64_t v319;
  WTF::StringImpl *v320;
  JSC::ICEvent *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  JSC::VM *v329;
  uint64_t v330;
  unsigned int v331;
  double v332;
  const unsigned __int8 *v333;
  BOOL v334;
  char v335;
  uint64_t (*v336)(JSC::VM **);
  JSC::VM **v337;
  unint64_t v338;
  void *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  WTF *v346;
  uint64_t v347;
  unint64_t v348;
  JSC::VM *v349;
  JSC::JSGlobalObject *v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t (**v363)(unint64_t);
  JSC::VM *v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  const WTF::StringImpl *v368;
  _DWORD *v369;
  int8x16_t **v370;
  int v371;
  unsigned int *v372;
  int v373;
  unsigned int v374;
  JSC::CodeBlock *v375;
  uint64_t v376;
  int v377;
  unsigned int v378;
  int v379;
  unsigned int v380;
  unsigned int *v381;
  unsigned int v382;
  unsigned int v383;
  JSC::VM *v384;
  uint64_t v385;
  uint64_t (*v386)();
  unsigned int *v387;
  unsigned int v388;
  uint64_t v389;
  unsigned __int8 *v390;
  unsigned int v391;
  unint64_t v392;
  uint64_t v393;
  unsigned int *v394;
  uint64_t v395;
  unint64_t v396;
  int v397;
  char v398;
  unsigned int **v399;
  unsigned int **v400;
  int v401;
  uint64_t v402;
  int v403;
  unsigned int v404;
  unint64_t NotAnObjectError;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  int v411;
  _WORD *v412;
  uint64_t v413;
  unsigned int v414;
  uint64_t v415;
  unsigned int v416;
  unsigned int v417;
  WTF *v418;
  uint64_t v419;
  unint64_t v420;
  unsigned __int16 *v421;
  uint64_t v422;
  unsigned int v423;
  unsigned int v424;
  uint64_t v425;
  unsigned int *v426;
  uint64_t v427;
  unint64_t v428;
  char v429;
  unint64_t *v430;
  unint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  unsigned __int8 *v434;
  unsigned int v435;
  BOOL v436;
  unsigned int v437;
  uint64_t v438;
  JSC::JSString *v439;
  BOOL v440;
  unsigned int v441;
  uint64_t v442;
  unsigned __int8 *v443;
  unsigned int v444;
  uint64_t v445;
  const WTF::StringImpl *v446;
  uint64_t v447;
  int8x16_t **v448;
  int8x16_t **v449;
  uint64_t v450;
  JSC::VM *v451;
  unint64_t v452;
  unint64_t v453;
  JSC::JSString *v454;
  uint64_t v455;
  uint64_t (*v456)(unint64_t);
  uint64_t v457;
  unint64_t v458;
  int8x16_t **v459;
  JSC::JSString *v460;
  _QWORD v461[2];
  uint64_t v462;
  char v463;
  int8x16_t **v464;
  uint64_t (**v465)(unint64_t);
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  const WTF::StringImpl *v470;
  JSC::VM *v471;
  uint64_t v472;
  const WTF::StringImpl *v473;
  JSC::CodeBlock *v474;
  JSC::VM *v475;
  unint64_t v476;
  JSC::CodeBlock *v477;
  JSC::VM *v478;
  unint64_t v479;
  WTF::StringImpl *v480;
  int8x16_t **v481;
  int v482;
  uint64_t v483;
  int8x16_t **v484;
  uint64_t v485;
  uint64_t vars0;

  v9 = a3;
  v10 = a2;
  v11 = hasExceptionsAfterHandlingTraps;
  v485 = *MEMORY[0x1E0C80C00];
  v12 = *(JSC::VM **)(hasExceptionsAfterHandlingTraps + 56);
  *((_QWORD *)v12 + 5) = vars0;
  a9.i64[0] = 0xFFFFFFFF00000000;
  v458 = 0xFFFFFFFF00000000;
  LOBYTE(v462) = 0;
  v463 = 0;
  v464 = 0;
  v465 = 0;
  v460 = 0;
  memset(v461, 0, 13);
  v459 = (int8x16_t **)a2;
  if (!a3)
  {
    if ((a2 & 0xFFFE000000000002) != 0)
    {
      if (a2 >> 49)
      {
        v172 = *(_QWORD *)(hasExceptionsAfterHandlingTraps + 1536);
        if ((v172 & 1) != 0)
        {
          v300 = *(uint64_t (**)(JSC::VM **))(v172 & 0xFFFFFFFFFFFFFFFCLL);
          v301 = (JSC::VM **)(v11 - 16);
          if ((v11 & 8) == 0)
            v301 = (JSC::VM **)(v11 & 0xFFFFFFFFFFFFC000 | 8);
          v478 = *v301;
          v479 = v11;
          v480 = (WTF::StringImpl *)(v11 + 1536);
          v302 = v12;
          v303 = v11;
          v172 = v300(&v478);
          v11 = v303;
          v12 = v302;
        }
        v123 = *(_QWORD *)(v172 + 48);
        if (v123 != 2)
          goto LABEL_229;
      }
      else
      {
        v242 = (JSC::JSGlobalObject *)hasExceptionsAfterHandlingTraps;
        v243 = v12;
        if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 6)
        {
          v244 = *(_QWORD *)(hasExceptionsAfterHandlingTraps + 1472);
          if ((v244 & 1) != 0)
          {
            v336 = *(uint64_t (**)(JSC::VM **))(v244 & 0xFFFFFFFFFFFFFFFCLL);
            v337 = (JSC::VM **)(v11 - 16);
            if ((v11 & 8) == 0)
              v337 = (JSC::VM **)(v11 & 0xFFFFFFFFFFFFC000 | 8);
            v478 = *v337;
            v479 = v11;
            v480 = (WTF::StringImpl *)(v11 + 1472);
            v244 = v336(&v478);
          }
          v123 = *(_QWORD *)(v244 + 48);
          v12 = v243;
          v11 = (unint64_t)v242;
          if (v123 != 2)
            goto LABEL_229;
        }
        else
        {
          NotAnObjectError = JSC::createNotAnObjectError(hasExceptionsAfterHandlingTraps, a2);
          JSC::VM::throwException(v243, v242, NotAnObjectError, v406, v407, v408, v409, v410);
          v12 = v243;
        }
      }
      if (!byte_1ECF4C6B7)
        goto LABEL_542;
      v130 = (uint64_t **)v12;
      v131 = 0;
      v54 = 10;
LABEL_202:
      v132 = (JSC::ICEvent *)JSC::ICEvent::ICEvent((uint64_t)&v478, v130, (const WTF::StringImpl *)0xA, v131, 0, v460 == (JSC::JSString *)v10, a7, a8);
      JSC::ICEvent::log(v132, v133, v134, v135, v136, v137, v138, v139);
      v147 = v480;
      v480 = 0;
      if (!v147)
        goto LABEL_70;
      if (*(_DWORD *)v147 != 2)
      {
        *(_DWORD *)v147 -= 2;
        goto LABEL_70;
      }
      goto LABEL_522;
    }
    v122 = *(unsigned __int8 *)(a2 + 5);
    v123 = a2;
    if (v122 >= 0x17)
    {
LABEL_178:
      if ((*(_BYTE *)(v123 + 6) & 8) == 0)
      {
        v54 = 10;
        while (1)
        {
          v124 = *(_QWORD *)(16 * (*(_DWORD *)v123 & 0xFFFFFFFE) + 0x30);
          if (!v124)
            v124 = *(_QWORD *)(v123 + 16);
          if ((v124 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v124 + 5) < 0x17u)
            goto LABEL_199;
          v123 = v124;
          if ((*(_BYTE *)(v124 + 6) & 8) != 0)
            goto LABEL_185;
        }
      }
      v124 = v123;
LABEL_185:
      v452 = v11;
      v125 = *(JSC::VM **)(v11 + 56);
      v54 = 10;
      while (1)
      {
        v126 = v12;
        v127 = 16 * (*(_DWORD *)v124 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v124 + 6) & 8) != 0)
        {
          hasExceptionsAfterHandlingTraps = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v124 & 0xFFFFFFFE) + 0x4C) + 0x68))(v124, v452, 0, &v456);
          v335 = hasExceptionsAfterHandlingTraps;
          if (*((_DWORD *)v125 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v125, a2, a3, a4, a5, a6, a7, a8);
            if ((hasExceptionsAfterHandlingTraps & 1) != 0)
              goto LABEL_706;
          }
          if ((v335 & 1) != 0)
            goto LABEL_196;
          if (BYTE2(v461[1]) == 3)
          {
            if (BYTE4(v461[1]))
              goto LABEL_706;
          }
          else if (*(_BYTE *)(v124 + 5) == 61 && BYTE2(v461[1]) == 1)
          {
            goto LABEL_706;
          }
        }
        else if ((*(_BYTE *)(v124 + 6) & 0x20) != 0)
        {
          hasExceptionsAfterHandlingTraps = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v124, v125, 0, (uint64_t)&v456);
          if ((_DWORD)hasExceptionsAfterHandlingTraps)
            goto LABEL_196;
        }
        if ((*(_WORD *)(v127 + 12) & 0x800) != 0)
        {
          v128 = *(_DWORD *)v124;
          if (BYTE2(v461[1]) != 3)
          {
            v330 = 16 * (v128 & 0xFFFFFFFE);
            if ((*(_WORD *)(v330 + 12) & 0x800) != 0)
            {
              v129 = (*(uint64_t (**)(uint64_t, unint64_t))(16 * *(unsigned int *)(v330 + 76) + 0xB0))(v124, v452);
            }
            else
            {
              v129 = *(_QWORD *)(v330 + 48);
              if (!v129)
                v129 = *(_QWORD *)(v124 + 16);
            }
            if (*((_DWORD *)v125 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v125, a2, a3, a4, a5, a6, a7, a8))
              goto LABEL_706;
            goto LABEL_192;
          }
        }
        else
        {
          v128 = *(_DWORD *)v124;
        }
        v129 = *(_QWORD *)(16 * (v128 & 0xFFFFFFFE) + 0x30);
        if (!v129)
          v129 = *(_QWORD *)(v124 + 16);
LABEL_192:
        if ((v129 & 0xFFFE000000000002) != 0)
          goto LABEL_198;
        v124 = v129;
        v12 = v126;
        if (*(unsigned __int8 *)(v129 + 5) <= 0x16u)
          goto LABEL_199;
      }
    }
    v452 = hasExceptionsAfterHandlingTraps;
    v126 = v12;
    if (v122 != 2)
    {
LABEL_742:
      v11 = v452;
      v430 = (unint64_t *)(v452 + 1192);
      v431 = (unint64_t *)(v452 + 1208);
      if (v122 != 3)
        v431 = (unint64_t *)(v452 + 1216);
      if (v122 != 2)
        v430 = v431;
      v123 = *v430;
      v12 = v126;
LABEL_229:
      if (v123)
        goto LABEL_178;
      v54 = 10;
LABEL_199:
      if (!byte_1ECF4C6B7)
        goto LABEL_70;
      v130 = (uint64_t **)v12;
      if ((v10 & 0xFFFE000000000002) != 0)
        v131 = 0;
      else
        v131 = 16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
      goto LABEL_202;
    }
    if (*(_QWORD *)(*((_QWORD *)v12 + 5244) + 1768))
    {
      v429 = 0;
    }
    else
    {
      v425 = *(_QWORD *)(a2 + 8);
      if ((v425 & 1) != 0)
        v426 = (unsigned int *)(a2 + 16);
      else
        v426 = (unsigned int *)(v425 + 4);
      v427 = *v426;
      if ((v427 & 0x80000000) != 0)
        v428 = COERCE__INT64((double)v427) + 0x2000000000000;
      else
        v428 = v427 | 0xFFFE000000000000;
      v456 = (uint64_t (*)(unint64_t))v428;
      LODWORD(v458) = 14;
      v460 = 0;
      v429 = 1;
      BYTE1(v461[1]) = 1;
    }
    if (*((_DWORD *)v12 + 20))
    {
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v12, a2, 0, a4, a5, a6, a7, a8);
      if ((hasExceptionsAfterHandlingTraps & 1) != 0)
      {
LABEL_706:
        v54 = 10;
        goto LABEL_198;
      }
    }
    if ((v429 & 1) == 0)
    {
      v122 = *(unsigned __int8 *)(v10 + 5);
      goto LABEL_742;
    }
LABEL_196:
    if (BYTE1(v461[1]) == 1)
    {
      v54 = (uint64_t)v456;
LABEL_198:
      v12 = v126;
      goto LABEL_199;
    }
    if (BYTE1(v461[1]) != 2)
    {
      v309 = (unint64_t)v460;
      v310 = *(_QWORD *)(16 * (*(_DWORD *)v460 & 0xFFFFFFFE) + 0x28);
      if ((v458 & 0x20) != 0)
        v309 = (unint64_t)v459;
      if (BYTE3(v461[1]) != 1)
        goto LABEL_471;
      if ((v309 & 0xFFFE000000000002) != 0)
        goto LABEL_784;
      v311 = *(unsigned int *)(16 * (*(_DWORD *)v309 & 0xFFFFFFFE) + 0x4C);
      v312 = *(_DWORD *)(16 * (*(_DWORD *)v309 & 0xFFFFFFFE) + 0x4C) != 0;
      v313 = 16 * v311;
      if ((_DWORD)v311)
        v314 = v464 == (int8x16_t **)v313;
      else
        v314 = 1;
      if (!v314)
      {
        do
        {
          v313 = *(_QWORD *)(v313 + 16);
          v312 = v313 != 0;
        }
        while ((int8x16_t **)v313 != v464 && v313 != 0);
      }
      if (!v312)
      {
LABEL_784:
        v478 = *(JSC::VM **)(v452 + 56);
        v316 = JSC::throwDOMAttributeGetterTypeError(v310, &v478, v464, 0);
      }
      else
      {
LABEL_471:
        v316 = v456(v310);
      }
      goto LABEL_472;
    }
    v278 = v456;
    v449 = v459;
    v279 = *(_QWORD *)(v452 + 56);
    if (*(_DWORD *)(v279 + 80))
    {
      v401 = *(_DWORD *)(v279 + 80);
      if ((v401 & 0x27) != 0 && (v401 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v279 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v402 = *(_QWORD *)(v279 + 16);
      if (v402)
      {
        v54 = *(_QWORD *)(v402 + 8);
        goto LABEL_198;
      }
    }
    v453 = *((_QWORD *)v278 + 1);
    if (*(_BYTE *)(v453 + 5) == 26)
    {
      v280 = *(_QWORD *)(v453 + 24);
      if ((v280 & 1) != 0)
        v280 = *(_QWORD *)((v280 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v280 + 5) != 8)
      {
        LOBYTE(v468) = 2;
        v281 = *(const WTF::StringImpl **)(v453 + 16);
        v469 = v280;
        v470 = v281;
        v466 = 0;
        v467 = 0;
        v282 = *(_QWORD *)(v452 + 56);
        v475 = (JSC::VM *)v282;
        LODWORD(v452) = 1;
        v446 = v281;
        v447 = 0;
        v283 = v281;
        goto LABEL_413;
      }
      v307 = 1;
      LOBYTE(v468) = 1;
      v469 = *(_QWORD *)(v280 + 40);
      v308 = &JSC::JSBoundFunction::s_info == (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v453 & 0xFFFFFFFE) + 0x4C));
      LOBYTE(v470) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v453 & 0xFFFFFFFE)
                                                                                + 0x4C));
    }
    else
    {
      hasExceptionsAfterHandlingTraps = (unint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr))(16 * *(unsigned int *)(16 * (*(_DWORD *)v453 & 0xFFFFFFFE) + 0x4C) + 0x38))(&v468);
      v307 = v468;
      v308 = v470;
    }
    v466 = 0;
    v467 = 0;
    v282 = *(_QWORD *)(v452 + 56);
    if (v307 == 2 || !v308)
    {
      v475 = *(JSC::VM **)(v452 + 56);
      if (v307 == 2)
      {
        LODWORD(v452) = 1;
        v280 = v469;
        v283 = v470;
        v446 = v470;
        v447 = 0;
      }
      else
      {
        LODWORD(v452) = 0;
        v280 = 0;
        v446 = 0;
        v447 = v469;
        v283 = (_DWORD *)v453;
      }
LABEL_413:
      v284 = *(_QWORD *)(16 * (*v283 & 0xFFFFFFFE) + 0x28);
      v471 = (JSC::VM *)v282;
      v472 = v284;
      v448 = (int8x16_t **)v284;
      v450 = v282 + 90568;
      if (*(_QWORD *)(v282 + 90568))
      {
LABEL_414:
        *(_QWORD *)(v282 + 32) = 0;
        if ((unint64_t)&v445 < *(_QWORD *)(v282 + 8) || v467 > 0x10000)
        {
          v385 = JSC::throwStackOverflowError((unint64_t)v448, &v475, a3, a4, a5, a6, a7, a8);
        }
        else
        {
          if (!*(_DWORD *)(v282 + 4))
          {
            v285 = *(_DWORD *)(v282 + 80);
            if ((v285 & 0x27) != 0 && (v285 & 0x20) == 0)
            {
              v403 = *(_DWORD *)(v282 + 80);
              if ((v403 & 0x27) != 0 && (v403 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v282 + 64), 7u, a3, a4, a5, a6, a7, a8);
              v54 = *(_QWORD *)(v282 + 16);
              if (v54)
                goto LABEL_433;
            }
            v286 = (unsigned int *)(v282 + 80);
            v287 = *(_DWORD *)(v282 + 80);
            if ((v287 & 0x20) == 0)
            {
              do
                v288 = __ldaxr(v286);
              while (__stlxr(v288 | 0x20, v286));
            }
            v289 = 0;
            v290 = 0;
            v477 = 0;
            if ((_DWORD)v452)
            {
              if (*(_BYTE *)(v280 + 5) == 8
                || (*(_QWORD *)(v280 + 8)
                  ? (v304 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
                  : (v304 = 0),
                    v304))
              {
                v477 = *(JSC::CodeBlock **)(v280 + 96);
              }
              else
              {
                JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v280, v282, v453, v446, 0, &v477, a7, a8);
              }
              v54 = *((_QWORD *)v475 + 2);
              if (v54)
              {
                if ((v287 & 0x20) == 0)
                {
                  do
                    v404 = __ldaxr(v286);
                  while (__stlxr(v404 & 0xFFFFFFDF, v286));
                }
                goto LABEL_433;
              }
              *((_BYTE *)v477 + 17) = 0;
              v290 = *(_QWORD *)(v280 + 8);
              v305 = (unsigned int *)(v290 + 8);
              do
                v306 = __ldaxr(v305);
              while (__stlxr(v306 + 1, v305));
              v289 = v477;
            }
            v478 = v289;
            v479 = v453;
            v483 = v466;
            v484 = v448;
            v291 = 1;
            LODWORD(v480) = 1;
            if (v289)
            {
              v292 = *((_DWORD *)v289 + 7);
              v64 = v292 >= 2;
              v293 = v292 | 1;
              if (v64)
                v291 = v293;
              else
                v291 = 1;
            }
            v482 = v291;
            HIDWORD(v480) = 0;
            v481 = v449;
            if ((v287 & 0x20) == 0)
            {
              do
                v294 = __ldaxr(v286);
              while (__stlxr(v294 & 0xFFFFFFDF, v286));
            }
            if ((_DWORD)v452)
            {
              v54 = vmEntryToJavaScript(*(_QWORD *)(v290 + 16), (JSC::VM *)v282, (uint64_t)&v478, a4, a5, a6, a7, a8);
              goto LABEL_429;
            }
            v54 = vmEntryToNative(v447, (JSC::VM *)v282, (uint64_t)&v478, a4, a5, a6, a7, a8);
            if (v290)
            {
LABEL_429:
              v295 = (unsigned int *)(v290 + 8);
              do
              {
                v296 = __ldaxr(v295);
                v297 = v296 - 1;
              }
              while (__stlxr(v297, v295));
              if (!v297)
              {
                atomic_store(1u, (unsigned int *)(v290 + 8));
                (*(void (**)(uint64_t))(*(_QWORD *)v290 + 32))(v290);
              }
            }
LABEL_433:
            v298 = v471;
            if (*((JSC::VM ***)v471 + 11321) == &v471)
            {
              *((_QWORD *)v471 + 11321) = 0;
              if (*((_BYTE *)v298 + 56))
                JSC::VM::executeEntryScopeServicesOnExit(v298, (void *)a2, a3, a4, a5, a6, a7, a8);
            }
            v299 = v450;
LABEL_435:
            *(_BYTE *)(v299 + 2552) = 1;
            goto LABEL_198;
          }
          v385 = JSC::Interpreter::checkVMEntryPermission((JSC::Interpreter *)hasExceptionsAfterHandlingTraps);
        }
        v54 = v385;
        goto LABEL_433;
      }
      *(_QWORD *)v450 = &v471;
      v346 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v346)
      {
        hasExceptionsAfterHandlingTraps = WTF::Thread::initializeCurrentTLS((WTF::Thread *)hasExceptionsAfterHandlingTraps);
        v346 = (WTF *)hasExceptionsAfterHandlingTraps;
      }
      if ((*((_BYTE *)v346 + 5) & 0x20) == 0)
      {
        *((_BYTE *)v346 + 5) |= 0x20u;
        if (BYTE2(dword_1ECF4C6C3))
          JSC::Wasm::startTrackingCurrentThread((JSC::Wasm *)hasExceptionsAfterHandlingTraps, a2, a3, a4, a5, a6, a7, a8);
        WTF::registerThreadForMachExceptionHandling(v346, (WTF::Thread *)a2, a3, a4, a5, a6, a7, a8);
      }
      hasExceptionsAfterHandlingTraps = (unint64_t)v471;
      if (!*((_BYTE *)v471 + 56))
      {
        v347 = *((_QWORD *)v471 + 11624);
        v348 = atomic_load(&JSC::lastTimeZoneID);
        if (v347 == v348)
          goto LABEL_414;
        hasExceptionsAfterHandlingTraps = (unint64_t)v471;
      }
      JSC::VM::executeEntryScopeServicesOnEntry((JSC::VM *)hasExceptionsAfterHandlingTraps, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_414;
    }
    if (*(_DWORD *)(v453 + 88))
    {
      v316 = JSC::Interpreter::executeBoundCall((WTF::Thread *)hasExceptionsAfterHandlingTraps, *(_QWORD *)(v452 + 56), v453, (uint64_t)&v466, a5, a6, a7, a8);
LABEL_472:
      v54 = v316;
      goto LABEL_198;
    }
    v366 = *(_QWORD *)(v453 + 32);
    v448 = *(int8x16_t ***)(v453 + 40);
    v452 = v282 + 90568;
    v453 = v366;
    if (*(_BYTE *)(v366 + 5) == 26)
    {
      v367 = *(_QWORD *)(v453 + 24);
      if ((v367 & 1) != 0)
        v367 = *(_QWORD *)((v367 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v367 + 5) != 8)
      {
        v447 = 0;
        LOBYTE(v471) = 2;
        v368 = *(const WTF::StringImpl **)(v453 + 16);
        v472 = v367;
        v473 = v368;
        v477 = (JSC::CodeBlock *)v282;
        LODWORD(v450) = 1;
LABEL_584:
        v369 = v368;
        goto LABEL_585;
      }
      LOBYTE(v471) = 1;
      v447 = *(_QWORD *)(v367 + 40);
      v472 = v447;
      LOBYTE(v473) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v453 & 0xFFFFFFFE)
                                                                                + 0x4C));
      v477 = (JSC::CodeBlock *)v282;
    }
    else
    {
      hasExceptionsAfterHandlingTraps = (unint64_t)(*(_QWORD *(**)(JSC::VM **__return_ptr))(16 * *(unsigned int *)(16 * (*(_DWORD *)v453 & 0xFFFFFFFE) + 0x4C) + 0x38))(&v471);
      v477 = (JSC::CodeBlock *)v282;
      if (v471 == 2)
      {
        v447 = 0;
        LODWORD(v450) = 1;
        v367 = v472;
        v368 = v473;
        goto LABEL_584;
      }
      v447 = v472;
    }
    LODWORD(v450) = 0;
    v368 = 0;
    v367 = 0;
    v369 = (_DWORD *)v453;
LABEL_585:
    v370 = *(int8x16_t ***)(16 * (*v369 & 0xFFFFFFFE) + 0x28);
    v475 = (JSC::VM *)v282;
    v476 = (unint64_t)v370;
    v449 = v370;
    if (*(_QWORD *)v452)
    {
LABEL_586:
      *(_QWORD *)(v282 + 32) = 0;
      if ((unint64_t)&v445 < *(_QWORD *)(v282 + 8) || v467 > 0x10000)
      {
        v432 = JSC::throwStackOverflowError((unint64_t)v449, &v477, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        if (!*(_DWORD *)(v282 + 4))
        {
          v371 = *(_DWORD *)(v282 + 80);
          if ((v371 & 0x27) == 0
            || (v371 & 0x20) != 0
            || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v282, a2, a3, a4, a5, a6, a7, a8))
          {
            v372 = (unsigned int *)(v282 + 80);
            v373 = *(_DWORD *)(v282 + 80);
            if ((v373 & 0x20) == 0)
            {
              do
                v374 = __ldaxr(v372);
              while (__stlxr(v374 | 0x20, v372));
            }
            v375 = 0;
            v376 = 0;
            v474 = 0;
            if ((_DWORD)v450)
            {
              if (*(_BYTE *)(v367 + 5) == 8
                || (*(_QWORD *)(v367 + 8)
                  ? (v386 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
                  : (v386 = 0),
                    v386))
              {
                v474 = *(JSC::CodeBlock **)(v367 + 96);
              }
              else
              {
                JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v367, v282, v453, v368, 0, &v474, a7, a8);
              }
              v54 = *((_QWORD *)v477 + 2);
              if (v54)
              {
                if ((v373 & 0x20) == 0)
                {
                  do
                    v437 = __ldaxr(v372);
                  while (__stlxr(v437 & 0xFFFFFFDF, v372));
                }
                goto LABEL_605;
              }
              *((_BYTE *)v474 + 17) = 0;
              v376 = *(_QWORD *)(v367 + 8);
              v387 = (unsigned int *)(v376 + 8);
              do
                v388 = __ldaxr(v387);
              while (__stlxr(v388 + 1, v387));
              v375 = v474;
            }
            v478 = v375;
            v479 = v453;
            v483 = v466;
            v484 = v449;
            v377 = 1;
            LODWORD(v480) = 1;
            if (v375)
            {
              v378 = *((_DWORD *)v375 + 7);
              v64 = v378 >= 2;
              v379 = v378 | 1;
              if (v64)
                v377 = v379;
              else
                v377 = 1;
            }
            v482 = v377;
            HIDWORD(v480) = 0;
            v481 = v448;
            if ((v373 & 0x20) == 0)
            {
              do
                v380 = __ldaxr(v372);
              while (__stlxr(v380 & 0xFFFFFFDF, v372));
            }
            if ((_DWORD)v450)
            {
              v54 = vmEntryToJavaScript(*(_QWORD *)(v376 + 16), (JSC::VM *)v282, (uint64_t)&v478, a4, a5, a6, a7, a8);
            }
            else
            {
              v54 = vmEntryToNative(v447, (JSC::VM *)v282, (uint64_t)&v478, a4, a5, a6, a7, a8);
              if (!v376)
                goto LABEL_605;
            }
            v381 = (unsigned int *)(v376 + 8);
            do
            {
              v382 = __ldaxr(v381);
              v383 = v382 - 1;
            }
            while (__stlxr(v383, v381));
            if (!v383)
            {
              atomic_store(1u, (unsigned int *)(v376 + 8));
              (*(void (**)(uint64_t))(*(_QWORD *)v376 + 32))(v376);
            }
            goto LABEL_605;
          }
          v54 = *(_QWORD *)(v282 + 16);
LABEL_605:
          v384 = v475;
          if (*((JSC::VM ***)v475 + 11321) == &v475)
          {
            *((_QWORD *)v475 + 11321) = 0;
            if (*((_BYTE *)v384 + 56))
              JSC::VM::executeEntryScopeServicesOnExit(v384, (void *)a2, a3, a4, a5, a6, a7, a8);
          }
          v299 = v452;
          goto LABEL_435;
        }
        v432 = JSC::Interpreter::checkVMEntryPermission((JSC::Interpreter *)hasExceptionsAfterHandlingTraps);
      }
      v54 = v432;
      goto LABEL_605;
    }
    *(_QWORD *)v452 = &v475;
    v418 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v418)
    {
      hasExceptionsAfterHandlingTraps = WTF::Thread::initializeCurrentTLS((WTF::Thread *)hasExceptionsAfterHandlingTraps);
      v418 = (WTF *)hasExceptionsAfterHandlingTraps;
    }
    if ((*((_BYTE *)v418 + 5) & 0x20) == 0)
    {
      *((_BYTE *)v418 + 5) |= 0x20u;
      if (BYTE2(dword_1ECF4C6C3))
        JSC::Wasm::startTrackingCurrentThread((JSC::Wasm *)hasExceptionsAfterHandlingTraps, a2, a3, a4, a5, a6, a7, a8);
      WTF::registerThreadForMachExceptionHandling(v418, (WTF::Thread *)a2, a3, a4, a5, a6, a7, a8);
    }
    hasExceptionsAfterHandlingTraps = (unint64_t)v475;
    if (!*((_BYTE *)v475 + 56))
    {
      v419 = *((_QWORD *)v475 + 11624);
      v420 = atomic_load(&JSC::lastTimeZoneID);
      if (v419 == v420)
        goto LABEL_586;
      hasExceptionsAfterHandlingTraps = (unint64_t)v475;
    }
    JSC::VM::executeEntryScopeServicesOnEntry((JSC::VM *)hasExceptionsAfterHandlingTraps, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_586;
  }
  if ((a3 & 1) != 0)
    v13 = a3 & 0xFFFFFFFFFFFFFFFELL;
  else
    v13 = *(_QWORD *)(a3 + 8);
  v14 = 0xFFFE000000000002;
  v454 = (JSC::JSString *)a2;
  v455 = a3;
  v453 = a2 & 0xFFFE000000000002;
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v15 = *(unsigned __int8 *)(a2 + 5);
    v16 = v12;
    v17 = (unsigned int *)a2;
    if (v15 > 0x16)
      goto LABEL_6;
    v392 = hasExceptionsAfterHandlingTraps;
    v94 = v12;
    if (v15 != 2)
      goto LABEL_648;
    if (*(_QWORD *)(*((_QWORD *)v12 + 5244) + 1768) == v13)
    {
      v393 = *((_QWORD *)v454 + 1);
      if ((v393 & 1) != 0)
        v394 = (unsigned int *)((char *)v454 + 16);
      else
        v394 = (unsigned int *)(v393 + 4);
      v395 = *v394;
      if ((v395 & 0x80000000) != 0)
        v396 = COERCE__INT64((double)v395) + 0x2000000000000;
      else
        v396 = v395 | 0xFFFE000000000000;
      v397 = 14;
      goto LABEL_644;
    }
    if (!v13 || (v411 = *(_DWORD *)(v13 + 16), (v411 & 0x20) != 0))
    {
LABEL_676:
      v398 = 0;
LABEL_645:
      if (*((_DWORD *)v94 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v94, a2, a3, a4, a5, a6, v14, a8);
        if ((hasExceptionsAfterHandlingTraps & 1) != 0)
        {
LABEL_346:
          v54 = 10;
LABEL_347:
          v12 = v94;
          goto LABEL_69;
        }
      }
      v12 = v94;
      v11 = v392;
      v14 = 0xFFFE000000000002;
      if ((v398 & 1) != 0)
        goto LABEL_67;
      v15 = *((unsigned __int8 *)v454 + 5);
LABEL_648:
      v399 = (unsigned int **)(v392 + 1208);
      if (v15 != 3)
        v399 = (unsigned int **)(v392 + 1216);
      if (v15 == 2)
        v400 = (unsigned int **)(v392 + 1192);
      else
        v400 = v399;
      v17 = *v400;
      v12 = v94;
      v11 = v392;
      goto LABEL_86;
    }
    v412 = *(_WORD **)(v13 + 8);
    v413 = *(unsigned int *)(v13 + 4);
    if ((v411 & 4) == 0)
    {
      if ((_DWORD)v413)
      {
        v414 = (unsigned __int16)*v412 - 48;
        if (v414 <= 9 && (*v412 != 48 || v413 <= 1))
        {
          v421 = v412 + 1;
          v422 = v413 - 1;
          while (v422)
          {
            if (v414 > 0x19999999)
              goto LABEL_672;
            v423 = *v421 - 48;
            if (v423 > 9)
              goto LABEL_672;
            v415 = 0;
            LOBYTE(v413) = 0;
            v416 = 0;
            v64 = __CFADD__(v423, 10 * v414);
            v414 = v423 + 10 * v414;
            ++v421;
            --v422;
            if (v64)
              goto LABEL_674;
          }
          v416 = v414 & 0xFFFFFF00;
          v415 = 0x100000000;
          if (v414 == -1)
          {
            v415 = 0;
            LOBYTE(v413) = 0;
          }
          else
          {
            LOBYTE(v413) = v414;
          }
          if (v414 == -1)
            v416 = 0;
          goto LABEL_674;
        }
LABEL_672:
        v415 = 0;
        LOBYTE(v413) = 0;
      }
      else
      {
        v415 = 0;
      }
      v416 = 0;
LABEL_674:
      v417 = v413;
LABEL_675:
      if ((v415 & 0x100000000) != 0)
      {
        a3 = v416 | v417;
        v438 = *((_QWORD *)v454 + 1);
        v439 = (v438 & 1) != 0 ? (JSC::JSString *)((char *)v454 + 16) : (JSC::JSString *)(v438 + 4);
        if (*(_DWORD *)v439 > a3)
        {
          hasExceptionsAfterHandlingTraps = JSC::JSString::getIndex(v454, (JSC::JSGlobalObject *)hasExceptionsAfterHandlingTraps, a3, a4, a5, a6, 0xFFFE000000000002, a8, a9);
          v396 = hasExceptionsAfterHandlingTraps;
          if (!*((_DWORD *)v94 + 20)
            || (hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v94, a2, a3, a4, a5, a6, v14, a8), (hasExceptionsAfterHandlingTraps & 1) == 0))
          {
            v397 = 10;
LABEL_644:
            v456 = (uint64_t (*)(unint64_t))v396;
            LODWORD(v458) = v397;
            v460 = 0;
            v398 = 1;
            BYTE1(v461[1]) = 1;
            goto LABEL_645;
          }
        }
      }
      goto LABEL_676;
    }
    if ((_DWORD)v413)
    {
      v441 = *(unsigned __int8 *)v412 - 48;
      if (v441 <= 9 && (v413 < 2 || *(_BYTE *)v412 != 48))
      {
        v442 = v413 - 1;
        v443 = (unsigned __int8 *)v412 + 1;
        while (v442)
        {
          if (v441 > 0x19999999)
            goto LABEL_825;
          v444 = *v443 - 48;
          if (v444 > 9)
            goto LABEL_825;
          v417 = 0;
          LOBYTE(v413) = 0;
          v415 = 0;
          v64 = __CFADD__(v444, 10 * v441);
          v441 = v444 + 10 * v441;
          --v442;
          ++v443;
          if (v64)
            goto LABEL_827;
        }
        if (v441 == -1)
          v417 = 0;
        else
          v417 = v441 & 0xFFFFFF00;
        if (v441 == -1)
          LOBYTE(v413) = 0;
        else
          LOBYTE(v413) = v441;
        if (v441 == -1)
          v415 = 0;
        else
          v415 = 0x100000000;
        goto LABEL_827;
      }
LABEL_825:
      v417 = 0;
      LOBYTE(v413) = 0;
    }
    else
    {
      v417 = 0;
    }
    v415 = 0;
LABEL_827:
    v416 = v413;
    goto LABEL_675;
  }
  if (a2 >> 49)
  {
    v65 = *(_QWORD *)(hasExceptionsAfterHandlingTraps + 1536);
    if ((v65 & 1) != 0)
    {
      v237 = *(uint64_t (**)(JSC::VM **))(v65 & 0xFFFFFFFFFFFFFFFCLL);
      v238 = (JSC::VM **)(v11 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v11 & 8) != 0)
        v238 = (JSC::VM **)(v11 - 16);
      v478 = *v238;
      v479 = v11;
      v480 = (WTF::StringImpl *)(v11 + 1536);
      v239 = v12;
      v240 = v11;
      v65 = v237(&v478);
      v14 = 0xFFFE000000000002;
      v11 = v240;
      v12 = v239;
    }
  }
  else
  {
    if ((a2 & 0xFFFFFFFFFFFFFFFELL) != 6)
    {
      v349 = v12;
      v350 = (JSC::JSGlobalObject *)hasExceptionsAfterHandlingTraps;
      v351 = JSC::createNotAnObjectError(hasExceptionsAfterHandlingTraps, a2);
      JSC::VM::throwException(v349, v350, v351, v352, v353, v354, v355, v356);
      v12 = v349;
LABEL_541:
      if (byte_1ECF4C6B7)
      {
        v318 = (uint64_t **)v12;
        v319 = 0;
        v54 = 10;
        goto LABEL_477;
      }
LABEL_542:
      v54 = 10;
      goto LABEL_70;
    }
    v65 = *(_QWORD *)(hasExceptionsAfterHandlingTraps + 1472);
    if ((v65 & 1) != 0)
    {
      v154 = v12;
      v155 = *(uint64_t (**)(JSC::VM **))(v65 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v11 & 8) != 0)
        v156 = (JSC::VM **)(v11 - 16);
      else
        v156 = (JSC::VM **)(v11 & 0xFFFFFFFFFFFFC000 | 8);
      v478 = *v156;
      v479 = v11;
      v157 = v11;
      v480 = (WTF::StringImpl *)(v11 + 1472);
      v65 = v155(&v478);
      v11 = v157;
      v12 = v154;
      v14 = 0xFFFE000000000002;
    }
  }
  v17 = *(unsigned int **)(v65 + 48);
  if (v17 == (unsigned int *)2)
    goto LABEL_541;
LABEL_86:
  if (!v17)
    goto LABEL_58;
  v16 = *(JSC::VM **)(v11 + 56);
LABEL_6:
  v18 = (char *)v17 + 6;
  v19 = v13 >> 4;
  v20 = (uint64_t)v17;
  if ((*((_BYTE *)v17 + 6) & 8) != 0)
  {
LABEL_231:
    if (!v13)
      goto LABEL_240;
    v173 = *(_DWORD *)(v13 + 16);
    if ((v173 & 0x20) != 0)
      goto LABEL_240;
    v174 = *(_WORD **)(v13 + 8);
    v175 = *(unsigned int *)(v13 + 4);
    if ((v173 & 4) == 0)
    {
      if ((_DWORD)v175)
      {
        v176 = (unsigned __int16)*v174 - 48;
        if (v176 <= 9 && (*v174 != 48 || v175 <= 1))
        {
          v196 = v174 + 1;
          v197 = v175 - 1;
          while (v197)
          {
            if (v176 > 0x19999999)
              goto LABEL_236;
            v198 = *v196 - 48;
            if (v198 > 9)
              goto LABEL_236;
            v177 = 0;
            LOBYTE(v175) = 0;
            v178 = 0;
            v64 = __CFADD__(v198, 10 * v176);
            v176 = v198 + 10 * v176;
            ++v196;
            --v197;
            if (v64)
              goto LABEL_238;
          }
          v178 = v176 & 0xFFFFFF00;
          v177 = 0x100000000;
          if (v176 == -1)
          {
            v177 = 0;
            LOBYTE(v175) = 0;
          }
          else
          {
            LOBYTE(v175) = v176;
          }
          if (v176 == -1)
            v178 = 0;
          goto LABEL_238;
        }
LABEL_236:
        v177 = 0;
        LOBYTE(v175) = 0;
      }
      else
      {
        v177 = 0;
      }
      v178 = 0;
LABEL_238:
      v179 = v175;
LABEL_239:
      if ((v177 & 0x100000000) == 0)
      {
LABEL_240:
        v180 = *(JSC::VM **)(v11 + 56);
        v54 = 10;
        while (1)
        {
          v181 = 16 * (*(_DWORD *)v20 & 0xFFFFFFFE);
          if ((*(_BYTE *)(v20 + 6) & 8) != 0)
          {
            v269 = v12;
            v270 = v11;
            hasExceptionsAfterHandlingTraps = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C) + 0x68))(v20, v11, v13, &v456);
            v272 = hasExceptionsAfterHandlingTraps;
            if (*((_DWORD *)v180 + 20))
            {
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v180, a2, a3, a4, a5, a6, v271, a8);
              if ((hasExceptionsAfterHandlingTraps & 1) != 0)
              {
LABEL_634:
                v54 = 10;
                v12 = v269;
                goto LABEL_69;
              }
            }
            v12 = v269;
            v11 = v270;
            v14 = 0xFFFE000000000002;
            if ((v272 & 1) != 0)
              goto LABEL_67;
            if (BYTE2(v461[1]) == 3)
            {
              if (BYTE4(v461[1]))
                goto LABEL_634;
              v273 = *(unsigned __int8 *)(v20 + 5);
              if (v273 == 61)
              {
LABEL_534:
                v12 = v269;
                v11 = v270;
                goto LABEL_247;
              }
LABEL_398:
              if (!v13)
                goto LABEL_534;
              if ((v273 - 50) < 0xFFFFFFF5)
                goto LABEL_534;
              v274 = *(_DWORD *)(v13 + 16);
              if ((v274 & 0x20) != 0)
                goto LABEL_534;
              v275 = *(unsigned int *)(v13 + 4);
              if (!(_DWORD)v275)
                goto LABEL_534;
              v276 = *(unsigned __int8 **)(v13 + 8);
              if ((v274 & 4) == 0)
              {
                v277 = *(unsigned __int16 *)v276;
                if ((_DWORD)v275 == 1)
                  goto LABEL_404;
                if (v277 == 45)
                {
                  v277 = *((unsigned __int16 *)v276 + 1);
                  goto LABEL_497;
                }
                if ((v277 - 48) >= 0xA && ((_DWORD)v275 != 8 || v277 != 73))
                {
LABEL_537:
                  if ((_DWORD)v275 != 3 || v277 != 78)
                    goto LABEL_534;
                }
LABEL_508:
                v9 = v9 & 0xFFFFFF0000000000 | v275 | ((unint64_t)((v274 >> 2) & 1) << 32);
                JSC::jsToNumber(v276, v9);
                WTF::numberToString(&v478, v332);
                v334 = WTF::equal(v13, (unint64_t)&v478, v333);
                v12 = v269;
                v11 = v270;
                v14 = 0xFFFE000000000002;
                if (v334)
                  goto LABEL_58;
                goto LABEL_247;
              }
              v277 = *v276;
              if ((_DWORD)v275 == 1)
              {
LABEL_404:
                v12 = v269;
                v11 = v270;
                if ((v277 - 48) < 0xA)
                  goto LABEL_58;
                goto LABEL_247;
              }
              if (v277 == 45)
              {
                v277 = v276[1];
LABEL_497:
                if ((v277 - 48) < 0xA)
                {
                  if ((_DWORD)v275 == 2)
                    goto LABEL_634;
                  goto LABEL_508;
                }
                if ((_DWORD)v275 != 9)
                  goto LABEL_534;
              }
              else
              {
                if ((v277 - 48) < 0xA)
                  goto LABEL_508;
                if ((_DWORD)v275 != 8)
                  goto LABEL_537;
              }
              if (v277 != 73)
                goto LABEL_534;
              goto LABEL_508;
            }
            v273 = *(unsigned __int8 *)(v20 + 5);
            if (v273 != 61)
              goto LABEL_398;
            v12 = v269;
            v11 = v270;
            if (BYTE2(v461[1]) == 1)
              goto LABEL_58;
          }
          else
          {
            if ((_DWORD)v19)
            {
              if ((v19 & ~*(_DWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x20)) == 0)
              {
                v182 = v12;
                v183 = v11;
                JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE)), v180, a3, (const JSC::PropertyTable *)a4, a5, a6, 0xFFFE000000000002, a8);
                v14 = 0xFFFE000000000002;
                v11 = v183;
                v12 = v182;
                if (v184)
                {
                  v478 = (JSC::VM *)v13;
                  hasExceptionsAfterHandlingTraps = JSC::PropertyTable::get(v184, (uint64_t *)&v478);
                  v14 = 0xFFFE000000000002;
                  v11 = v183;
                  v12 = v182;
                  a6 = hasExceptionsAfterHandlingTraps;
                  if ((_DWORD)hasExceptionsAfterHandlingTraps != -1)
                  {
                    a5 = HIDWORD(hasExceptionsAfterHandlingTraps);
                    if ((int)hasExceptionsAfterHandlingTraps <= 63)
                    {
                      v193 = v20 + 16;
                      v194 = hasExceptionsAfterHandlingTraps << 32;
                    }
                    else
                    {
                      v193 = *(_QWORD *)(v20 + 8) - 8;
                      v194 = 0x3F00000000 - (hasExceptionsAfterHandlingTraps << 32);
                    }
                    a4 = *(_QWORD *)(v193 + (v194 >> 29));
                    if ((a4 & 0xFFFE000000000002) != 0)
                      goto LABEL_262;
                    v195 = *(unsigned __int8 *)(a4 + 5);
                    if (v195 == 5)
                    {
                      hasExceptionsAfterHandlingTraps = (unint64_t)JSC::JSObject::fillGetterPropertySlot((unsigned int *)v20, (uint64_t)v180, (uint64_t)&v456, a4, SHIDWORD(hasExceptionsAfterHandlingTraps), hasExceptionsAfterHandlingTraps);
                      v14 = 0xFFFE000000000002;
                      v11 = v183;
                      v12 = v182;
                      goto LABEL_67;
                    }
                    if (v195 != 6)
                    {
LABEL_262:
                      v456 = (uint64_t (*)(unint64_t))a4;
                      v460 = (JSC::JSString *)v20;
                      goto LABEL_65;
                    }
                    v254 = *(_DWORD *)(v181 + 16) & 3;
                    v255 = *(_QWORD *)(a4 + 16);
                    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
                    {
                      v257 = *(int8x16_t ***)(a4 + 24);
                      v256 = *(uint64_t (***)(unint64_t))(a4 + 32);
                      v456 = *(uint64_t (**)(unint64_t))(a4 + 8);
                      v457 = v255;
                      LODWORD(v458) = HIDWORD(hasExceptionsAfterHandlingTraps);
                      v460 = (JSC::JSString *)v20;
                      BYTE1(v461[1]) = 3;
                      if (v254 != 2)
                        LOBYTE(v461[1]) = 1;
                      BYTE3(v461[1]) = 1;
                      v464 = v257;
                      v465 = v256;
                      v12 = v182;
                      v11 = v183;
                      goto LABEL_67;
                    }
                    v456 = *(uint64_t (**)(unint64_t))(a4 + 8);
                    v457 = v255;
                    LODWORD(v458) = HIDWORD(hasExceptionsAfterHandlingTraps);
                    v460 = (JSC::JSString *)v20;
                    BYTE1(v461[1]) = 3;
                    v12 = v182;
                    v11 = v183;
                    if (v254 == 2)
                      goto LABEL_67;
LABEL_283:
                    LOBYTE(v461[1]) = 1;
                    goto LABEL_67;
                  }
                }
              }
            }
            if ((*(_BYTE *)(v20 + 6) & 0x20) != 0)
            {
              v230 = v12;
              v231 = v11;
              hasExceptionsAfterHandlingTraps = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v20, v180, v13, (uint64_t)&v456);
              v14 = 0xFFFE000000000002;
              v11 = v231;
              v12 = v230;
              if ((hasExceptionsAfterHandlingTraps & 1) != 0)
                goto LABEL_67;
            }
          }
LABEL_247:
          if ((*(_WORD *)(v181 + 12) & 0x800) != 0)
          {
            v185 = *(_DWORD *)v20;
            if (BYTE2(v461[1]) != 3)
            {
              v263 = v11;
              v264 = v12;
              v265 = 16 * (v185 & 0xFFFFFFFE);
              if ((*(_WORD *)(v265 + 12) & 0x800) != 0)
              {
                v186 = (*(uint64_t (**)(uint64_t, unint64_t))(16 * *(unsigned int *)(v265 + 76) + 0xB0))(v20, v11);
              }
              else
              {
                v186 = *(_QWORD *)(v265 + 48);
                if (!v186)
                  v186 = *(_QWORD *)(v20 + 16);
              }
              if (*((_DWORD *)v180 + 20))
              {
                v436 = JSC::VM::hasExceptionsAfterHandlingTraps(v180, a2, a3, a4, a5, a6, v14, a8);
                v12 = v264;
                v11 = v263;
                v14 = 0xFFFE000000000002;
                if (v436)
                  goto LABEL_58;
              }
              else
              {
                v12 = v264;
                v11 = v263;
                v14 = 0xFFFE000000000002;
              }
              goto LABEL_251;
            }
          }
          else
          {
            v185 = *(_DWORD *)v20;
          }
          v186 = *(_QWORD *)(16 * (v185 & 0xFFFFFFFE) + 0x30);
          if (!v186)
            v186 = *(_QWORD *)(v20 + 16);
LABEL_251:
          if ((v186 & 0xFFFE000000000002) == 0)
          {
            v20 = v186;
            if (*(unsigned __int8 *)(v186 + 5) > 0x16u)
              continue;
          }
          goto LABEL_69;
        }
      }
      v222 = v178 | v179;
      v223 = *(JSC::VM **)(v11 + 56);
      v54 = 10;
      while (1)
      {
        v94 = v12;
        v224 = 16 * (*v17 & 0xFFFFFFFE);
        v225 = v11;
        hasExceptionsAfterHandlingTraps = (*(uint64_t (**)(unsigned int *, unint64_t, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v224 + 0x4C) + 0x70))(v17, v11, v222, &v456);
        v227 = hasExceptionsAfterHandlingTraps;
        if (*((_DWORD *)v223 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v223, a2, a3, a4, a5, a6, v226, a8);
          v14 = 0xFFFE000000000002;
          if (((hasExceptionsAfterHandlingTraps | v227) & 1) != 0)
          {
            v12 = v94;
            v11 = v225;
            if ((hasExceptionsAfterHandlingTraps & 1) == 0)
              goto LABEL_67;
LABEL_58:
            v54 = 10;
            goto LABEL_69;
          }
        }
        else
        {
          v12 = v94;
          v11 = v225;
          v14 = 0xFFFE000000000002;
          if ((hasExceptionsAfterHandlingTraps & 1) != 0)
            goto LABEL_67;
        }
        if (BYTE2(v461[1]) == 3)
        {
          if (BYTE4(v461[1]))
            goto LABEL_346;
          v228 = *((unsigned __int8 *)v17 + 5);
          if (v228 != 61)
          {
LABEL_317:
            if ((v228 - 39) <= 0xA
              && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v17, a2, a3, a4, a5, a6, 0xFFFE000000000002, a8) <= v222)
            {
              goto LABEL_346;
            }
          }
        }
        else
        {
          v228 = *((unsigned __int8 *)v17 + 5);
          if (v228 != 61)
            goto LABEL_317;
          if (BYTE2(v461[1]) == 1)
            goto LABEL_346;
        }
        if ((*(_WORD *)(v224 + 12) & 0x800) == 0 || BYTE2(v461[1]) == 3)
        {
          v229 = *(_QWORD *)(16 * (*v17 & 0xFFFFFFFE) + 0x30);
          if (!v229)
            v229 = *((_QWORD *)v17 + 2);
        }
        else
        {
          if ((*(_WORD *)(16 * (*v17 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
          {
            v229 = (*(uint64_t (**)(unsigned int *, unint64_t))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*v17 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0xB0))(v17, v225);
          }
          else
          {
            v229 = *(_QWORD *)(16 * (*v17 & 0xFFFFFFFE) + 0x30);
            if (!v229)
              v229 = *((_QWORD *)v17 + 2);
          }
          if (*((_DWORD *)v223 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v223, a2, a3, a4, a5, a6, v14, a8))
            goto LABEL_346;
        }
        if ((v229 & 0xFFFE000000000002) != 0)
          goto LABEL_347;
        v17 = (unsigned int *)v229;
        v12 = v94;
        v11 = v225;
        if (*(unsigned __int8 *)(v229 + 5) <= 0x16u)
          goto LABEL_69;
      }
    }
    if ((_DWORD)v175)
    {
      v424 = *(unsigned __int8 *)v174 - 48;
      if (v424 <= 9 && (v175 < 2 || *(_BYTE *)v174 != 48))
      {
        v433 = v175 - 1;
        v434 = (unsigned __int8 *)v174 + 1;
        while (v433)
        {
          if (v424 > 0x19999999)
            goto LABEL_714;
          v435 = *v434 - 48;
          if (v435 > 9)
            goto LABEL_714;
          v179 = 0;
          LOBYTE(v175) = 0;
          v177 = 0;
          v64 = __CFADD__(v435, 10 * v424);
          v424 = v435 + 10 * v424;
          --v433;
          ++v434;
          if (v64)
            goto LABEL_716;
        }
        if (v424 == -1)
          v179 = 0;
        else
          v179 = v424 & 0xFFFFFF00;
        if (v424 == -1)
          LOBYTE(v175) = 0;
        else
          LOBYTE(v175) = v424;
        if (v424 == -1)
          v177 = 0;
        else
          v177 = 0x100000000;
        goto LABEL_716;
      }
LABEL_714:
      v179 = 0;
      LOBYTE(v175) = 0;
    }
    else
    {
      v179 = 0;
    }
    v177 = 0;
LABEL_716:
    v178 = v175;
    v14 = 0xFFFE000000000002;
    goto LABEL_239;
  }
  a2 = 40;
  v21 = (JSC::JSString *)v17;
  while (1)
  {
    v22 = *(_DWORD *)v21 & 0xFFFFFFFE;
    v23 = 16 * v22;
    if ((_DWORD)v19)
    {
      if ((v19 & ~*(_DWORD *)(16 * v22 + 0x20)) == 0)
      {
        hasExceptionsAfterHandlingTraps = *(_QWORD *)(16 * v22 + 0x58);
        if (hasExceptionsAfterHandlingTraps)
          goto LABEL_853;
        v34 = *(_QWORD *)(16 * v22 + 0x40);
        if (v34 && (*(_BYTE *)(v34 + 5) == 1 || *(_DWORD *)(v34 + 80) >= 2u))
        {
          v35 = v12;
          v9 = v11;
          JSC::Structure::materializePropertyTable((JSC::Structure *)v23, v16, 1, (const JSC::PropertyTable *)a4, a5, a6, 0xFFFE000000000002, a8);
          a2 = 40;
          v14 = 0xFFFE000000000002;
          v11 = v9;
          v12 = v35;
          if (hasExceptionsAfterHandlingTraps)
          {
LABEL_853:
            if (*(_DWORD *)(hasExceptionsAfterHandlingTraps + 24))
            {
              v24 = *(_QWORD *)(hasExceptionsAfterHandlingTraps + 16);
              v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
              v26 = *(unsigned int *)(hasExceptionsAfterHandlingTraps + 8);
              v27 = *(_DWORD *)(v13 + 16);
              if ((v24 & 1) != 0)
              {
                if ((v27 & 0x20) != 0)
                  v27 = *(_DWORD *)(v13 + 32);
                v28 = *(_DWORD *)(hasExceptionsAfterHandlingTraps + 12);
                v29 = (v27 >> 8) & *(_QWORD *)&v28;
                v30 = *(unsigned __int8 *)(v25 + v29);
                if (!*(_BYTE *)(v25 + v29))
                  goto LABEL_19;
                v31 = v25 + v26;
                v32 = 1;
                while (1)
                {
                  v33 = *(_QWORD *)(v31 + 8 * (v30 - 1));
                  if (v13 == (v33 & 0xFFFFFFFFFFFFLL))
                    break;
                  v29 = ((_DWORD)v29 + v32) & v28;
                  v30 = *(unsigned __int8 *)(v25 + v29);
                  ++v32;
                  if (!*(_BYTE *)(v25 + v29))
                    goto LABEL_19;
                }
                a6 = (v33 >> 16) & 0xFF00000000 | HIBYTE(v33);
              }
              else
              {
                if ((v27 & 0x20) != 0)
                  v27 = *(_DWORD *)(v13 + 32);
                v44 = *(_DWORD *)(hasExceptionsAfterHandlingTraps + 12);
                v45 = v44 & (v27 >> 8);
                v46 = *(_DWORD *)(v25 + 4 * v45);
                if (!v46)
                  goto LABEL_19;
                v47 = v25 + 4 * v26;
                v48 = 1;
                while (1)
                {
                  v49 = (v46 - 1);
                  if (v13 == *(_QWORD *)(v47 + 16 * v49))
                    break;
                  v45 = (v45 + v48) & v44;
                  v46 = *(_DWORD *)(v25 + 4 * v45);
                  ++v48;
                  if (!v46)
                    goto LABEL_19;
                }
                a6 = *(unsigned int *)(v47 + 16 * v49 + 8) | ((unint64_t)*(unsigned __int8 *)(v47 + 16 * v49 + 12) << 32);
              }
              if ((_DWORD)a6 != -1)
                break;
            }
          }
        }
      }
    }
LABEL_19:
    if ((*v18 & 0x20) == 0)
      goto LABEL_20;
    v100 = *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C);
    v101 = !(_DWORD)v100 || v13 == 0;
    if (v101)
      goto LABEL_20;
    v36 = 16 * v100;
    do
    {
      v9 = *(_QWORD *)(v36 + 24);
      if (!v9)
        goto LABEL_31;
      if ((*(_BYTE *)((16 * *(unsigned int *)v21) | 0x12) & 0x40) != 0)
        goto LABEL_31;
      v37 = *(_DWORD *)(v13 + 16);
      if ((v37 & 0x20) != 0)
        goto LABEL_31;
      v38 = *(_DWORD *)(v9 + 4) & (v37 >> 8);
      v39 = *(_QWORD *)(v9 + 32);
      v40 = *(unsigned __int16 *)(v39 + 4 * v38);
      if (v40 == 0xFFFF)
        goto LABEL_31;
      v449 = *(int8x16_t ***)(v9 + 16);
      v451 = v12;
      v452 = v11;
      while (1)
      {
        v41 = *(_QWORD *)(v9 + 24);
        v450 = (__int16)v40;
        v42 = (_QWORD *)(v41 + 40 * (__int16)v40);
        v43 = v42[1];
        if (!v43)
          goto LABEL_40;
        hasExceptionsAfterHandlingTraps = WTF::equal(v13, *v42, v43 - 1);
        if ((hasExceptionsAfterHandlingTraps & 1) != 0)
          break;
        v39 = *(_QWORD *)(v9 + 32);
        v12 = v451;
        v11 = v452;
        v14 = 0xFFFE000000000002;
LABEL_40:
        v38 = *(__int16 *)(v39 + 4 * v38 + 2);
        a2 = 40;
        if (v38 == -1)
          goto LABEL_31;
        LOWORD(v40) = *(_WORD *)(v39 + 4 * v38);
      }
      v148 = *(_QWORD *)(v9 + 24);
      v12 = v451;
      v11 = v452;
      v14 = 0xFFFE000000000002;
      a2 = 40;
      if (v148)
      {
        v149 = *(_DWORD *)(v148 + 40 * (int)v450 + 16);
        if ((v149 & 0x3B10) == 0)
        {
          if ((v149 & 0x400) == 0)
          {
            v150 = *(_DWORD *)(v148 + 40 * (int)v450 + 16);
            if ((v149 & 0x8000) != 0)
            {
              v361 = v148 + 40 * (int)v450;
              v363 = *(uint64_t (***)(unint64_t))(v361 + 24);
              v362 = *(_QWORD *)(v361 + 32);
              v456 = *v363;
              v457 = v362;
              LODWORD(v458) = v150;
              v460 = v21;
              LOWORD(v461[1]) = 769;
              BYTE3(v461[1]) = 1;
              v464 = v449;
              v465 = v363;
              goto LABEL_67;
            }
            v151 = v148 + 40 * (int)v450;
            v153 = *(uint64_t (**)(unint64_t))(v151 + 24);
            v152 = *(_QWORD *)(v151 + 32);
            if ((v149 & 0x4000) != 0)
            {
              v456 = v153;
              v457 = v152;
              LODWORD(v458) = v149;
              v460 = v21;
              LOWORD(v461[1]) = 769;
              BYTE3(v461[1]) = 1;
              v464 = v449;
              v465 = 0;
              goto LABEL_67;
            }
            v456 = v153;
            v457 = v152;
            LODWORD(v458) = v149;
            v460 = v21;
            v58 = 769;
LABEL_66:
            LOWORD(v461[1]) = v58;
            goto LABEL_67;
          }
          v357 = *(_DWORD *)(v148 + 40 * (int)v450 + 16);
          v358 = *(_QWORD *)(v148 + 40 * (int)v450 + 24);
          v101 = v358 == (int)v358;
          v359 = v358 | 0xFFFE000000000000;
          v360 = COERCE__INT64((double)v358) + 0x2000000000000;
          if (v101)
            v360 = v359;
          v456 = (uint64_t (*)(unint64_t))v360;
          LODWORD(v458) = v357;
          v460 = v21;
          BYTE1(v461[1]) = 1;
          goto LABEL_67;
        }
        hasExceptionsAfterHandlingTraps = JSC::setUpStaticFunctionSlot(v16, (uint64_t)v449, v148 + 40 * (int)v450, (unsigned int *)v21, v13, (uint64_t)&v456, 0xFFFE000000000002, a8);
        a2 = 40;
        v14 = 0xFFFE000000000002;
        v12 = v451;
        v11 = v452;
        if ((hasExceptionsAfterHandlingTraps & 1) != 0)
          goto LABEL_67;
      }
LABEL_31:
      v36 = *(_QWORD *)(v36 + 16);
    }
    while (v36);
LABEL_20:
    v20 = *(_QWORD *)(v23 + 48);
    if (!v20)
      v20 = *((_QWORD *)v21 + 2);
    if ((v20 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v20 + 5) < 0x17u)
    {
      if (!v13)
        goto LABEL_58;
      v50 = *(_DWORD *)(v13 + 16);
      if ((v50 & 0x20) != 0)
        goto LABEL_58;
      v51 = *(_BYTE **)(v13 + 8);
      v52 = *(unsigned int *)(v13 + 4);
      if ((v50 & 4) != 0)
      {
        v364 = v12;
        if (!(_DWORD)v52
          || (v53 = *v51 - 48, v53 > 9)
          || v52 >= 2 && *v51 == 48)
        {
          v54 = 10;
LABEL_559:
          v12 = v364;
          goto LABEL_69;
        }
        v389 = v52 - 1;
        v390 = v51 + 1;
        v54 = 10;
        while (v389)
        {
          if (v53 > 0x19999999)
            goto LABEL_559;
          v391 = *v390 - 48;
          if (v391 > 9)
            goto LABEL_559;
          v64 = __CFADD__(v391, 10 * v53);
          v53 = v391 + 10 * (_DWORD)v53;
          --v389;
          ++v390;
          v12 = v364;
          if (v64)
            goto LABEL_69;
        }
        v12 = v364;
        if ((_DWORD)v53 == -1)
          goto LABEL_58;
      }
      else
      {
        if (!(_DWORD)v52)
          goto LABEL_58;
        v53 = *(unsigned __int16 *)v51 - 48;
        if (v53 > 9 || *(_WORD *)v51 == 48 && v52 > 1)
          goto LABEL_58;
        v61 = (unsigned __int16 *)(v51 + 2);
        v62 = v52 - 1;
        v54 = 10;
        while (v62)
        {
          if (v53 <= 0x19999999)
          {
            v63 = *v61 - 48;
            if (v63 <= 9)
            {
              v64 = __CFADD__(v63, 10 * v53);
              v53 = v63 + 10 * (_DWORD)v53;
              ++v61;
              --v62;
              if (!v64)
                continue;
            }
          }
          goto LABEL_69;
        }
        if ((_DWORD)v53 == -1)
          goto LABEL_58;
      }
      v93 = *(_QWORD *)(v11 + 56);
      v54 = 10;
      while (2)
      {
        v94 = v12;
        v95 = 16 * (*v17 & 0xFFFFFFFE);
        v96 = v11;
        hasExceptionsAfterHandlingTraps = (*(uint64_t (**)(unsigned int *, unint64_t, uint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v95 + 0x4C) + 0x70))(v17, v11, v53, &v456);
        v97 = hasExceptionsAfterHandlingTraps;
        if (*(_DWORD *)(v93 + 80))
        {
          v241 = *(_DWORD *)(v93 + 80);
          if ((v241 & 0x27) != 0 && (v241 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v93 + 64), 7u, a3, a4, a5, a6, v14, a8);
          if (*(_QWORD *)(v93 + 16))
            goto LABEL_346;
        }
        v12 = v94;
        v11 = v96;
        v14 = 0xFFFE000000000002;
        if ((v97 & 1) != 0)
          goto LABEL_67;
        if (BYTE2(v461[1]) == 3)
        {
          if (BYTE4(v461[1]))
            goto LABEL_346;
          v98 = *((unsigned __int8 *)v17 + 5);
          v12 = v94;
          v11 = v96;
          if (v98 != 61)
          {
LABEL_124:
            if ((v98 - 39) <= 0xA)
            {
              v365 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v17, a2, a3, a4, a5, a6, 0xFFFE000000000002, a8);
              v14 = 0xFFFE000000000002;
              v11 = v96;
              v12 = v94;
              if (v365 <= v53)
                goto LABEL_58;
            }
          }
        }
        else
        {
          v98 = *((unsigned __int8 *)v17 + 5);
          if (v98 != 61)
            goto LABEL_124;
          if (BYTE2(v461[1]) == 1)
            goto LABEL_58;
        }
        if ((*(_WORD *)(v95 + 12) & 0x800) == 0 || BYTE2(v461[1]) == 3)
        {
          v99 = *(_QWORD *)(16 * (*v17 & 0xFFFFFFFE) + 0x30);
          if (!v99)
            v99 = *((_QWORD *)v17 + 2);
        }
        else
        {
          if ((*(_WORD *)(16 * (*v17 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
          {
            v99 = (*(uint64_t (**)(unsigned int *, unint64_t))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*v17 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0xB0))(v17, v96);
          }
          else
          {
            v99 = *(_QWORD *)(16 * (*v17 & 0xFFFFFFFE) + 0x30);
            if (!v99)
              v99 = *((_QWORD *)v17 + 2);
          }
          if (*(_DWORD *)(v93 + 80))
          {
            v440 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v93, a2, a3, a4, a5, a6, v14, a8);
            v12 = v94;
            v11 = v96;
            v14 = 0xFFFE000000000002;
            if (v440)
              goto LABEL_58;
          }
          else
          {
            v12 = v94;
            v11 = v96;
            v14 = 0xFFFE000000000002;
          }
        }
        if ((v99 & 0xFFFE000000000002) != 0)
          goto LABEL_69;
        v17 = (unsigned int *)v99;
        if (*(unsigned __int8 *)(v99 + 5) <= 0x16u)
          goto LABEL_69;
        continue;
      }
    }
    v18 = (_BYTE *)(v20 + 6);
    v21 = (JSC::JSString *)v20;
    if ((*(_BYTE *)(v20 + 6) & 8) != 0)
      goto LABEL_231;
  }
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v55 = (uint64_t)v21 + 16;
    v56 = a6 << 32;
  }
  else
  {
    v55 = *((_QWORD *)v21 + 1) - 8;
    v56 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v55 + (v56 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_64;
  v57 = *(unsigned __int8 *)(a4 + 5);
  if (v57 == 5)
  {
    v102 = v12;
    v103 = v11;
    hasExceptionsAfterHandlingTraps = (unint64_t)JSC::JSObject::fillGetterPropertySlot((unsigned int *)v21, (uint64_t)v16, (uint64_t)&v456, a4, SHIDWORD(a6), a6);
    v14 = 0xFFFE000000000002;
    v11 = v103;
    v12 = v102;
    goto LABEL_67;
  }
  if (v57 != 6)
  {
LABEL_64:
    v456 = (uint64_t (*)(unint64_t))a4;
    v460 = v21;
LABEL_65:
    v458 = __PAIR64__(a6, a5);
    v58 = 257;
    goto LABEL_66;
  }
  v118 = *(_DWORD *)(v23 + 16) & 3;
  v119 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v456 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v457 = v119;
    LODWORD(v458) = HIDWORD(a6);
    v460 = v21;
    BYTE1(v461[1]) = 3;
    if (v118 == 2)
      goto LABEL_67;
    goto LABEL_283;
  }
  v121 = *(int8x16_t ***)(a4 + 24);
  v120 = *(uint64_t (***)(unint64_t))(a4 + 32);
  v456 = *(uint64_t (**)(unint64_t))(a4 + 8);
  v457 = v119;
  LODWORD(v458) = HIDWORD(a6);
  v460 = v21;
  BYTE1(v461[1]) = 3;
  if (v118 != 2)
    LOBYTE(v461[1]) = 1;
  BYTE3(v461[1]) = 1;
  v464 = v121;
  v465 = v120;
LABEL_67:
  if (BYTE1(v461[1]) == 1)
  {
    v54 = (uint64_t)v456;
    goto LABEL_69;
  }
  if (BYTE1(v461[1]) != 2)
  {
    v109 = v12;
    v110 = (unint64_t)v460;
    v111 = *(_QWORD *)(16 * (*(_DWORD *)v460 & 0xFFFFFFFE) + 0x28);
    if ((v458 & 0x20) != 0)
      v110 = (unint64_t)v459;
    if (BYTE3(v461[1]) != 1)
      goto LABEL_170;
    if ((v110 & 0xFFFE000000000002) != 0)
      goto LABEL_543;
    v112 = *(unsigned int *)(16 * (*(_DWORD *)v110 & 0xFFFFFFFE) + 0x4C);
    v113 = *(_DWORD *)(16 * (*(_DWORD *)v110 & 0xFFFFFFFE) + 0x4C) != 0;
    v114 = 16 * v112;
    if ((_DWORD)v112)
      v115 = v464 == (int8x16_t **)v114;
    else
      v115 = 1;
    if (!v115)
    {
      do
      {
        v114 = *(_QWORD *)(v114 + 16);
        v113 = v114 != 0;
      }
      while ((int8x16_t **)v114 != v464 && v114 != 0);
    }
    if (!v113)
    {
LABEL_543:
      v478 = *(JSC::VM **)(v11 + 56);
      v117 = JSC::throwDOMAttributeGetterTypeError(v111, &v478, v464, (WTF::StringImpl *)v13);
    }
    else
    {
LABEL_170:
      v117 = v456(v111);
    }
    v54 = v117;
    v12 = v109;
    goto LABEL_69;
  }
  v66 = v456;
  v67 = v459;
  v68 = *(_QWORD *)(v11 + 56);
  if (*(_DWORD *)(v68 + 80))
  {
    v245 = v459;
    v246 = v11;
    v247 = v12;
    v248 = *(_DWORD *)(v68 + 80);
    if ((v248 & 0x27) != 0 && (v248 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v68 + 64), 7u, a3, a4, a5, a6, 0xFFFE000000000002, a8);
    v249 = *(_QWORD *)(v68 + 16);
    v12 = v247;
    v11 = v246;
    v67 = v245;
    if (v249)
    {
      v54 = *(_QWORD *)(v249 + 8);
      goto LABEL_69;
    }
  }
  v69 = *((_QWORD *)v66 + 1);
  if (*(_BYTE *)(v69 + 5) == 26)
  {
    v70 = *(_QWORD *)(v69 + 24);
    if ((v70 & 1) != 0)
      v70 = *(_QWORD *)((v70 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v70 + 5) != 8)
    {
      v71 = 0;
      LOBYTE(v468) = 2;
      v72 = *(const WTF::StringImpl **)(v69 + 16);
      v469 = v70;
      v470 = v72;
      v466 = 0;
      v467 = 0;
      v73 = *(_QWORD *)(v11 + 56);
      v475 = (JSC::VM *)v73;
      v74 = 1;
      goto LABEL_95;
    }
    v107 = 1;
    LOBYTE(v468) = 1;
    v469 = *(_QWORD *)(v70 + 40);
    v108 = &JSC::JSBoundFunction::s_info == (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v69 & 0xFFFFFFFE) + 0x4C));
    LOBYTE(v470) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v69 & 0xFFFFFFFE)
                                                                              + 0x4C));
  }
  else
  {
    v187 = *((_QWORD *)v66 + 1);
    v188 = v12;
    v189 = v11;
    v190 = v67;
    hasExceptionsAfterHandlingTraps = (unint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, unint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v69 & 0xFFFFFFFE) + 0x4C) + 0x38))(&v468, v187, a2);
    v67 = v190;
    v11 = v189;
    v12 = v188;
    v107 = v468;
    v108 = v470;
  }
  v466 = 0;
  v467 = 0;
  v73 = *(_QWORD *)(v11 + 56);
  if (v107 != 2 && v108)
  {
    if (*(_DWORD *)(v69 + 88))
    {
      v191 = v12;
      v192 = JSC::Interpreter::executeBoundCall((WTF::Thread *)hasExceptionsAfterHandlingTraps, *(_QWORD *)(v11 + 56), v69, (uint64_t)&v466, a5, a6, v14, a8);
      v12 = v191;
      v54 = v192;
      goto LABEL_69;
    }
    v199 = v73 + 90568;
    v201 = *(_QWORD *)(v69 + 32);
    v200 = *(int8x16_t ***)(v69 + 40);
    v202 = *(unsigned __int8 *)(v201 + 5);
    v451 = v12;
    v452 = v73 + 90568;
    if (v202 == 26)
    {
      v203 = *(_QWORD *)(v201 + 24);
      if ((v203 & 1) != 0)
        v203 = *(_QWORD *)((v203 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v203 + 5) != 8)
      {
        v450 = 0;
        LOBYTE(v471) = 2;
        v204 = *(const WTF::StringImpl **)(v201 + 16);
        v472 = v203;
        v473 = v204;
        v477 = (JSC::CodeBlock *)v73;
        v205 = 1;
        v206 = v204;
        goto LABEL_289;
      }
      LOBYTE(v471) = 1;
      v450 = *(_QWORD *)(v203 + 40);
      v472 = v450;
      LOBYTE(v473) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v201 & 0xFFFFFFFE)
                                                                                + 0x4C));
      v477 = (JSC::CodeBlock *)v73;
    }
    else
    {
      hasExceptionsAfterHandlingTraps = (unint64_t)(*(_QWORD *(**)(JSC::VM **__return_ptr, uint64_t, unint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v201 & 0xFFFFFFFE) + 0x4C) + 0x38))(&v471, v201, a2);
      v477 = (JSC::CodeBlock *)v73;
      if (v471 == 2)
      {
        v450 = 0;
        v205 = 1;
        v203 = v472;
        v204 = v473;
        v206 = v473;
        v199 = v452;
LABEL_289:
        v207 = *(_QWORD *)(16 * (*v206 & 0xFFFFFFFE) + 0x28);
        v475 = (JSC::VM *)v73;
        v476 = v207;
        if (*(_QWORD *)v199)
        {
LABEL_290:
          *(_QWORD *)(v73 + 32) = 0;
          if ((unint64_t)&v445 < *(_QWORD *)(v73 + 8) || v467 > 0x10000)
          {
            v317 = JSC::throwStackOverflowError(v207, &v477, a3, a4, a5, a6, v14, a8);
          }
          else
          {
            if (!*(_DWORD *)(v73 + 4))
            {
              v208 = *(_DWORD *)(v73 + 80);
              if ((v208 & 0x27) != 0
                && (v208 & 0x20) == 0
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v73, a2, a3, a4, a5, a6, v14, a8))
              {
                v54 = *(_QWORD *)(v73 + 16);
LABEL_487:
                v12 = v451;
                v199 = v452;
LABEL_309:
                v221 = v475;
                if (*((JSC::VM ***)v475 + 11321) == &v475)
                {
                  *((_QWORD *)v475 + 11321) = 0;
                  if (*((_BYTE *)v221 + 56))
                  {
                    v262 = v12;
                    JSC::VM::executeEntryScopeServicesOnExit(v221, (void *)a2, a3, a4, a5, a6, v14, a8);
                    v12 = v262;
                  }
                }
                *(_BYTE *)(v199 + 2552) = 1;
                goto LABEL_69;
              }
              v209 = (unsigned int *)(v73 + 80);
              v210 = *(_DWORD *)(v73 + 80);
              if ((v210 & 0x20) == 0)
              {
                do
                  v211 = __ldaxr(v209);
                while (__stlxr(v211 | 0x20, v209));
              }
              v212 = 0;
              v213 = 0;
              v474 = 0;
              if (v205)
              {
                if (*(_BYTE *)(v203 + 5) == 8
                  || (*(_QWORD *)(v203 + 8)
                    ? (v234 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
                    : (v234 = 0),
                      v234))
                {
                  v474 = *(JSC::CodeBlock **)(v203 + 96);
                }
                else
                {
                  JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v203, v73, v201, v204, 0, &v474, v14, a8);
                }
                v54 = *((_QWORD *)v477 + 2);
                if (v54)
                {
                  if ((v210 & 0x20) == 0)
                  {
                    do
                      v331 = __ldaxr(v209);
                    while (__stlxr(v331 & 0xFFFFFFDF, v209));
                  }
                  goto LABEL_487;
                }
                *((_BYTE *)v474 + 17) = 0;
                v213 = *(_QWORD *)(v203 + 8);
                v235 = (unsigned int *)(v213 + 8);
                do
                  v236 = __ldaxr(v235);
                while (__stlxr(v236 + 1, v235));
                v212 = v474;
              }
              v478 = v212;
              v479 = v201;
              v483 = v466;
              v484 = (int8x16_t **)v207;
              v214 = 1;
              LODWORD(v480) = 1;
              if (v212)
              {
                v215 = *((_DWORD *)v212 + 7);
                v64 = v215 >= 2;
                v216 = v215 | 1;
                if (v64)
                  v214 = v216;
                else
                  v214 = 1;
              }
              v482 = v214;
              HIDWORD(v480) = 0;
              v481 = v200;
              if ((v210 & 0x20) == 0)
              {
                do
                  v217 = __ldaxr(v209);
                while (__stlxr(v217 & 0xFFFFFFDF, v209));
              }
              if (v205)
              {
                v54 = vmEntryToJavaScript(*(_QWORD *)(v213 + 16), (JSC::VM *)v73, (uint64_t)&v478, a4, a5, a6, v14, a8);
                v12 = v451;
                v199 = v452;
              }
              else
              {
                v54 = vmEntryToNative(v450, (JSC::VM *)v73, (uint64_t)&v478, a4, a5, a6, v14, a8);
                v12 = v451;
                v199 = v452;
                if (!v213)
                  goto LABEL_309;
              }
              v218 = (unsigned int *)(v213 + 8);
              do
              {
                v219 = __ldaxr(v218);
                v220 = v219 - 1;
              }
              while (__stlxr(v220, v218));
              if (!v220)
              {
                atomic_store(1u, (unsigned int *)(v213 + 8));
                v329 = v12;
                (*(void (**)(uint64_t))(*(_QWORD *)v213 + 32))(v213);
                v12 = v329;
              }
              goto LABEL_309;
            }
            v317 = JSC::Interpreter::checkVMEntryPermission((JSC::Interpreter *)hasExceptionsAfterHandlingTraps);
          }
          v54 = v317;
          v12 = v451;
          goto LABEL_309;
        }
        *(_QWORD *)v199 = &v475;
        v259 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v259)
        {
          hasExceptionsAfterHandlingTraps = WTF::Thread::initializeCurrentTLS((WTF::Thread *)hasExceptionsAfterHandlingTraps);
          v259 = (WTF *)hasExceptionsAfterHandlingTraps;
        }
        if ((*((_BYTE *)v259 + 5) & 0x20) == 0)
        {
          *((_BYTE *)v259 + 5) |= 0x20u;
          if (BYTE2(dword_1ECF4C6C3))
            JSC::Wasm::startTrackingCurrentThread((JSC::Wasm *)hasExceptionsAfterHandlingTraps, a2, a3, a4, a5, a6, v14, a8);
          WTF::registerThreadForMachExceptionHandling(v259, (WTF::Thread *)a2, a3, a4, a5, a6, v14, a8);
        }
        hasExceptionsAfterHandlingTraps = (unint64_t)v475;
        if (!*((_BYTE *)v475 + 56))
        {
          v260 = *((_QWORD *)v475 + 11624);
          v261 = atomic_load(&JSC::lastTimeZoneID);
          v199 = v452;
          if (v260 == v261)
            goto LABEL_290;
          hasExceptionsAfterHandlingTraps = (unint64_t)v475;
        }
        JSC::VM::executeEntryScopeServicesOnEntry((JSC::VM *)hasExceptionsAfterHandlingTraps, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, v14, a8);
        v199 = v452;
        goto LABEL_290;
      }
      v450 = v472;
      v199 = v452;
    }
    v205 = 0;
    v204 = 0;
    v203 = 0;
    v206 = (_DWORD *)v201;
    goto LABEL_289;
  }
  v475 = *(JSC::VM **)(v11 + 56);
  if (v107 == 2)
  {
    v71 = 0;
    v74 = 1;
    v70 = v469;
    v72 = v470;
LABEL_95:
    v75 = v72;
  }
  else
  {
    v74 = 0;
    v72 = 0;
    v70 = 0;
    v71 = v469;
    v75 = (_DWORD *)v69;
  }
  v76 = *(_QWORD *)(16 * (*v75 & 0xFFFFFFFE) + 0x28);
  v471 = (JSC::VM *)v73;
  v472 = v76;
  v77 = *(_QWORD *)(v73 + 90568);
  v452 = v73 + 90568;
  if (!v77)
  {
    *(_QWORD *)(v73 + 90568) = &v471;
    v158 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v158)
    {
      v159 = v12;
      v160 = v67;
      v161 = v71;
      hasExceptionsAfterHandlingTraps = WTF::Thread::initializeCurrentTLS((WTF::Thread *)hasExceptionsAfterHandlingTraps);
      v71 = v161;
      v67 = v160;
      v12 = v159;
      v158 = (WTF *)hasExceptionsAfterHandlingTraps;
    }
    if ((*((_BYTE *)v158 + 5) & 0x20) == 0)
    {
      v266 = v71;
      v267 = v67;
      v268 = v12;
      *((_BYTE *)v158 + 5) |= 0x20u;
      if (BYTE2(dword_1ECF4C6C3))
        JSC::Wasm::startTrackingCurrentThread((JSC::Wasm *)hasExceptionsAfterHandlingTraps, a2, a3, a4, a5, a6, v14, a8);
      WTF::registerThreadForMachExceptionHandling(v158, (WTF::Thread *)a2, a3, a4, a5, a6, v14, a8);
      v12 = v268;
      v67 = v267;
      v71 = v266;
    }
    hasExceptionsAfterHandlingTraps = (unint64_t)v471;
    if (*((_BYTE *)v471 + 56))
    {
      v164 = v71;
      v165 = v67;
      v166 = v12;
    }
    else
    {
      v162 = *((_QWORD *)v471 + 11624);
      v163 = atomic_load(&JSC::lastTimeZoneID);
      if (v162 == v163)
        goto LABEL_97;
      v164 = v71;
      v165 = v67;
      v166 = v12;
      hasExceptionsAfterHandlingTraps = (unint64_t)v471;
    }
    JSC::VM::executeEntryScopeServicesOnEntry((JSC::VM *)hasExceptionsAfterHandlingTraps, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, v14, a8);
    v12 = v166;
    v67 = v165;
    v71 = v164;
  }
LABEL_97:
  *(_QWORD *)(v73 + 32) = 0;
  if ((unint64_t)&v445 < *(_QWORD *)(v73 + 8) || v467 > 0x10000)
  {
    v232 = v12;
    v233 = JSC::throwStackOverflowError(v76, &v475, a3, a4, a5, a6, v14, a8);
LABEL_327:
    v12 = v232;
    v54 = v233;
    goto LABEL_116;
  }
  if (*(_DWORD *)(v73 + 4))
  {
    v232 = v12;
    v233 = JSC::Interpreter::checkVMEntryPermission((JSC::Interpreter *)hasExceptionsAfterHandlingTraps);
    goto LABEL_327;
  }
  v78 = *(_DWORD *)(v73 + 80);
  if ((v78 & 0x27) == 0 || (v78 & 0x20) != 0)
    goto LABEL_101;
  v250 = v71;
  v251 = v67;
  v252 = v12;
  v253 = *(_DWORD *)(v73 + 80);
  if ((v253 & 0x27) != 0 && (v253 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v73 + 64), 7u, a3, a4, a5, a6, v14, a8);
  v54 = *(_QWORD *)(v73 + 16);
  v12 = v252;
  v67 = v251;
  v71 = v250;
  if (!v54)
  {
LABEL_101:
    v79 = (unsigned int *)(v73 + 80);
    v80 = *(_DWORD *)(v73 + 80);
    if ((v80 & 0x20) == 0)
    {
      do
        v81 = __ldaxr(v79);
      while (__stlxr(v81 | 0x20, v79));
    }
    v82 = 0;
    v83 = 0;
    v477 = 0;
    if (v74)
    {
      if (*(_BYTE *)(v70 + 5) == 8
        || (*(_QWORD *)(v70 + 8)
          ? (v104 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
          : (v104 = 0),
            v104))
      {
        v477 = *(JSC::CodeBlock **)(v70 + 96);
      }
      else
      {
        v168 = v12;
        v169 = v72;
        v170 = v67;
        v171 = v71;
        JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v70, v73, v69, v169, 0, &v477, v14, a8);
        v71 = v171;
        v67 = v170;
        v12 = v168;
      }
      v54 = *((_QWORD *)v475 + 2);
      if (!v54)
      {
        *((_BYTE *)v477 + 17) = 0;
        v83 = *(_QWORD *)(v70 + 8);
        v105 = (unsigned int *)(v83 + 8);
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 + 1, v105));
        v82 = v477;
        goto LABEL_104;
      }
      if ((v80 & 0x20) == 0)
      {
        do
          v258 = __ldaxr(v79);
        while (__stlxr(v258 & 0xFFFFFFDF, v79));
      }
    }
    else
    {
LABEL_104:
      v478 = v82;
      v479 = v69;
      v483 = v466;
      v484 = (int8x16_t **)v76;
      v84 = 1;
      LODWORD(v480) = 1;
      if (v82)
      {
        v85 = *((_DWORD *)v82 + 7);
        v64 = v85 >= 2;
        v86 = v85 | 1;
        if (v64)
          v84 = v86;
        else
          v84 = 1;
      }
      v482 = v84;
      HIDWORD(v480) = 0;
      v481 = v67;
      if ((v80 & 0x20) == 0)
      {
        do
          v87 = __ldaxr(v79);
        while (__stlxr(v87 & 0xFFFFFFDF, v79));
      }
      v88 = v12;
      if (v74)
      {
        v54 = vmEntryToJavaScript(*(_QWORD *)(v83 + 16), (JSC::VM *)v73, (uint64_t)&v478, a4, a5, a6, v14, a8);
        v12 = v88;
LABEL_112:
        v89 = (unsigned int *)(v83 + 8);
        do
        {
          v90 = __ldaxr(v89);
          v91 = v90 - 1;
        }
        while (__stlxr(v91, v89));
        if (!v91)
        {
          atomic_store(1u, (unsigned int *)(v83 + 8));
          (*(void (**)(uint64_t))(*(_QWORD *)v83 + 32))(v83);
          v12 = v88;
        }
      }
      else
      {
        v54 = vmEntryToNative(v71, (JSC::VM *)v73, (uint64_t)&v478, a4, a5, a6, v14, a8);
        v12 = v88;
        if (v83)
          goto LABEL_112;
      }
    }
  }
LABEL_116:
  v92 = v471;
  if (*((JSC::VM ***)v471 + 11321) == &v471)
  {
    *((_QWORD *)v471 + 11321) = 0;
    if (*((_BYTE *)v92 + 56))
    {
      v167 = v12;
      JSC::VM::executeEntryScopeServicesOnExit(v92, (void *)a2, a3, a4, a5, a6, v14, a8);
      v12 = v167;
    }
  }
  *(_BYTE *)(v452 + 2552) = 1;
LABEL_69:
  if (byte_1ECF4C6B7)
  {
    v318 = (uint64_t **)v12;
    if (v453)
      v319 = 0;
    else
      v319 = 16 * *(unsigned int *)(16 * (*(_DWORD *)v454 & 0xFFFFFFFE) + 0x4C);
LABEL_477:
    if ((v455 & 1) != 0)
      v320 = (WTF::StringImpl *)(v455 & 0xFFFFFFFFFFFFFFFELL);
    else
      v320 = *(WTF::StringImpl **)(v455 + 8);
    v321 = (JSC::ICEvent *)JSC::ICEvent::ICEvent((uint64_t)&v478, v318, (const WTF::StringImpl *)0xA, v319, v320, v460 == v454, v14, a8);
    JSC::ICEvent::log(v321, v322, v323, v324, v325, v326, v327, v328);
    v147 = v480;
    v480 = 0;
    if (!v147)
      goto LABEL_70;
    if (*(_DWORD *)v147 != 2)
    {
      *(_DWORD *)v147 -= 2;
      goto LABEL_70;
    }
LABEL_522:
    WTF::StringImpl::~StringImpl(v147, v140, v141, v142, v143, v144, v145, v146);
    WTF::fastFree(v338, v339, v340, v341, v342, v343, v344, v345);
  }
LABEL_70:
  if (v463)
  {
    v59 = *(_DWORD *)(v462 + 4);
    if (!v59)
    {
      __break(0xC471u);
      JUMPOUT(0x19876E310);
    }
    *(_DWORD *)(v462 + 4) = v59 - 1;
  }
  return v54;
}

uint64_t operationGetByIdOptimize(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, int8x16_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  JSC::VM *v17;
  JSC::JSString *v18;
  _BYTE *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  JSC::JSString *v40;
  JSC::VM *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  int v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  _WORD *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned __int8 *v62;
  uint64_t result;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  __int16 v68;
  unsigned int v69;
  unint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  int v74;
  uint64_t v75;
  int v76;
  unsigned __int16 *v77;
  uint64_t v78;
  unsigned int v79;
  BOOL v80;
  uint64_t v81;
  _DWORD *v82;
  uint64_t v83;
  JSC::JSString *v84;
  unint64_t v85;
  _DWORD *v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  JSC::JSString *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unsigned __int8 *v101;
  uint64_t v102;
  unint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(_DWORD **);
  uint64_t *v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  int v118;
  int v119;
  unsigned int v120;
  char v121;
  int v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  char v140;
  unsigned __int16 *v141;
  uint64_t v142;
  unsigned int v143;
  JSC::VM *v144;
  uint64_t v145;
  uint64_t v146;
  JSC::JSString *v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unsigned __int8 *v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char OwnStaticPropertySlot;
  uint64_t *v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v169;
  int v170;
  uint64_t v171;
  BOOL v172;
  char v173;
  int v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  WTF::StringImpl *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  WTF::AtomStringImpl *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  _BOOL4 v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  JSC::JSGlobalObject *v219;
  JSC::VM *v220;
  uint64_t v221;
  unint64_t NotAnObjectError;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  JSC::JSString *v235;
  unsigned __int8 *v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unsigned __int8 *v241;
  uint64_t v242;
  unsigned int v243;
  _BOOL4 v244;
  int v245;
  unsigned int v246;
  uint64_t v247;
  unsigned __int8 *v248;
  int v249;
  double v250;
  const unsigned __int8 *v251;
  BOOL v252;
  unint64_t v253;
  JSC::JSString **v254;
  uint64_t v255;
  unsigned int *v256;
  uint64_t v257;
  uint64_t Index;
  int v259;
  char v260;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  int v262;
  _WORD *v263;
  uint64_t v264;
  unsigned int v265;
  uint64_t v266;
  unsigned int v267;
  unsigned int v268;
  JSC::JSString **v269;
  unsigned __int16 *v270;
  uint64_t v271;
  unsigned int v272;
  uint64_t v273;
  unsigned __int8 *v274;
  unsigned int v275;
  BOOL v276;
  JSC::VMTraps *v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unsigned __int8 *v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  JSC::JSString *v286;
  uint64_t v287;
  uint64_t v288;
  BOOL v289;
  unsigned int v290;
  uint64_t v291;
  unsigned __int8 *v292;
  unsigned int v293;
  unint64_t v294;
  uint64_t v295;
  JSC::VM *v296;
  unsigned int *v297;
  JSC::JSString *v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unsigned __int8 *v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  signed int v307;
  JSC::VM *v308;
  WTF *v309;
  WTF *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  unsigned int *v323;
  _QWORD v324[2];
  uint64_t v325;
  char v326;
  uint64_t v327;
  uint64_t *v328;
  unsigned int v329;
  char v330;
  uint64_t v331;
  _DWORD **v332;
  _DWORD *v333;
  char *v334;
  WTF::StringImpl *v335;
  uint64_t *v336;
  char *v337;
  uint64_t v338;
  uint64_t vars0;

  v7 = a2;
  v8 = this;
  v338 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(v9 + 56);
  v11 = vars0;
  *(_QWORD *)(v10 + 40) = vars0;
  *(_DWORD *)(v11 + 36) = *(_DWORD *)(a2 + 112);
  v12 = *(_QWORD *)(a2 + 16);
  if (v12)
  {
    if ((v12 & 1) != 0)
      v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    else
      v13 = *(_QWORD *)(v12 + 8);
  }
  else
  {
    v13 = 0;
  }
  a5.i64[0] = 0xFFFFFFFF00000000;
  v321 = 0xFFFFFFFF00000000;
  LOBYTE(v325) = 0;
  v326 = 0;
  v327 = 0;
  v328 = 0;
  v323 = 0;
  memset(v324, 0, 13);
  v322 = this;
  v14 = *(_QWORD *)(v9 + 56);
  v15 = this & 0xFFFE000000000002;
  if ((this & 0xFFFE000000000002) != 0)
  {
    if ((unint64_t)this >> 49)
    {
      v81 = *(_QWORD *)(v9 + 1536);
      if ((v81 & 1) == 0)
        goto LABEL_105;
      v114 = *(uint64_t (**)(_DWORD **))(v81 & 0xFFFFFFFFFFFFFFFCLL);
      v164 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v9 & 8) != 0)
        v164 = (uint64_t *)(v9 - 16);
      v116 = *v164;
      v117 = (WTF::StringImpl *)(v9 + 1536);
    }
    else
    {
      if ((this & 0xFFFFFFFFFFFFFFFELL) != 6)
      {
        v218 = v10;
        v219 = (JSC::JSGlobalObject *)v9;
        v220 = *(JSC::VM **)(v9 + 56);
        v221 = v11;
        NotAnObjectError = JSC::createNotAnObjectError(v9, this);
        JSC::VM::throwException(v220, v219, NotAnObjectError, v223, v224, v225, v226, v227);
        v15 = v8 & 0xFFFE000000000002;
        v11 = v221;
        v14 = (unint64_t)v220;
        v9 = (unint64_t)v219;
        v10 = v218;
        goto LABEL_58;
      }
      v81 = *(_QWORD *)(v9 + 1472);
      if ((v81 & 1) == 0)
      {
LABEL_105:
        v18 = *(JSC::JSString **)(v81 + 48);
        if (v18 == (JSC::JSString *)2)
          goto LABEL_58;
        goto LABEL_106;
      }
      v114 = *(uint64_t (**)(_DWORD **))(v81 & 0xFFFFFFFFFFFFFFFCLL);
      v115 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v9 & 8) != 0)
        v115 = (uint64_t *)(v9 - 16);
      v116 = *v115;
      v117 = (WTF::StringImpl *)(v9 + 1472);
    }
    v333 = (_DWORD *)v116;
    v334 = (char *)v9;
    v335 = v117;
    v165 = v10;
    v166 = v9;
    v167 = v14;
    v169 = v11;
    v81 = v114(&v333);
    v15 = v8 & 0xFFFE000000000002;
    v11 = v169;
    v7 = a2;
    v14 = v167;
    v9 = v166;
    v10 = v165;
    goto LABEL_105;
  }
  v16 = *(unsigned __int8 *)(this + 5);
  v17 = *(JSC::VM **)(v9 + 56);
  v18 = (JSC::JSString *)this;
  if (v16 <= 0x16)
  {
    v253 = v13;
    v305 = this & 0xFFFE000000000002;
    v306 = v12;
    v301 = v11;
    v254 = (JSC::JSString **)v9;
    v318 = v10;
    if (v16 != 2)
    {
LABEL_376:
      if (v16 == 2)
      {
        v269 = v254 + 149;
      }
      else if (v16 == 3)
      {
        v269 = v254 + 151;
      }
      else
      {
        v269 = v254 + 152;
      }
      v18 = *v269;
      v10 = v318;
      v9 = (unint64_t)v254;
      v12 = v306;
      v11 = v301;
      v15 = v305;
      v13 = v253;
LABEL_106:
      if (!v18)
        goto LABEL_58;
      v17 = *(JSC::VM **)(v9 + 56);
      goto LABEL_6;
    }
    if (*(_QWORD *)(*(_QWORD *)(v14 + 41952) + 1768) == v13)
    {
      v255 = *(_QWORD *)(this + 8);
      if ((v255 & 1) != 0)
        v256 = (unsigned int *)(this + 16);
      else
        v256 = (unsigned int *)(v255 + 4);
      v257 = *v256;
      if ((v257 & 0x80000000) != 0)
      {
        *(double *)a5.i64 = (double)v257;
        Index = COERCE__INT64((double)v257) + 0x2000000000000;
      }
      else
      {
        Index = v257 | 0xFFFE000000000000;
      }
      v259 = 14;
LABEL_361:
      v319 = Index;
      LODWORD(v321) = v259;
      v323 = 0;
      LODWORD(v13) = 1;
      BYTE1(v324[1]) = 1;
      v10 = v318;
      v9 = (unint64_t)v254;
      v11 = v301;
      v15 = v305;
      if (!*(_DWORD *)(v14 + 80))
        goto LABEL_59;
      goto LABEL_362;
    }
    if (!v13 || (v262 = *(_DWORD *)(v13 + 16), (v262 & 0x20) != 0))
    {
LABEL_374:
      if (!*(_DWORD *)(v14 + 80))
      {
LABEL_375:
        v16 = *(unsigned __int8 *)(v8 + 5);
        goto LABEL_376;
      }
      LODWORD(v13) = 0;
LABEL_362:
      v260 = v13;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, (uint64_t)v17, a3, a4, (uint64_t)v18, a7, v11, v15);
      LODWORD(v13) = v13 & !hasExceptionsAfterHandlingTraps;
      if ((v260 & 1) != 0)
      {
        v10 = v318;
        v9 = (unint64_t)v254;
        v12 = v306;
        v11 = v301;
        v15 = v305;
        goto LABEL_59;
      }
      v10 = v318;
      v9 = (unint64_t)v254;
      v12 = v306;
      v11 = v301;
      v15 = v305;
      if (hasExceptionsAfterHandlingTraps)
        goto LABEL_59;
      goto LABEL_375;
    }
    v263 = *(_WORD **)(v13 + 8);
    v264 = *(unsigned int *)(v13 + 4);
    if ((v262 & 4) == 0)
    {
      if ((_DWORD)v264)
      {
        v265 = (unsigned __int16)*v263 - 48;
        if (v265 <= 9 && (*v263 != 48 || v264 <= 1))
        {
          v270 = v263 + 1;
          v271 = v264 - 1;
          while (v271)
          {
            if (v265 > 0x19999999)
              goto LABEL_370;
            v272 = *v270 - 48;
            if (v272 > 9)
              goto LABEL_370;
            v266 = 0;
            LOBYTE(v264) = 0;
            v267 = 0;
            v80 = __CFADD__(v272, 10 * v265);
            v265 = v272 + 10 * v265;
            ++v270;
            --v271;
            if (v80)
              goto LABEL_372;
          }
          if (v265 != -1)
          {
            v267 = v265 & 0xFFFFFF00;
            v266 = 0x100000000;
            LOBYTE(v264) = v265;
            goto LABEL_372;
          }
        }
LABEL_370:
        v266 = 0;
        LOBYTE(v264) = 0;
      }
      else
      {
        v266 = 0;
      }
      v267 = 0;
LABEL_372:
      v268 = v264;
LABEL_373:
      if ((v266 & 0x100000000) != 0)
      {
        a3 = v267 | v268;
        v285 = *(_QWORD *)(this + 8);
        v286 = (JSC::JSString *)((v285 & 1) != 0 ? this + 16 : v285 + 4);
        if (*(_DWORD *)v286 > a3)
        {
          Index = JSC::JSString::getIndex((JSC::JSString *)this, (JSC::JSGlobalObject *)v9, a3, a4, this, a7, v11, 0, a5);
          if (!*(_DWORD *)(v14 + 80)
            || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, (uint64_t)v17, a3, a4, (uint64_t)v18, a7, v287, v288))
          {
            v259 = 10;
            goto LABEL_361;
          }
        }
      }
      goto LABEL_374;
    }
    if ((_DWORD)v264)
    {
      v290 = *(unsigned __int8 *)v263 - 48;
      if (v290 <= 9 && (v264 < 2 || *(_BYTE *)v263 != 48))
      {
        v291 = v264 - 1;
        v292 = (unsigned __int8 *)v263 + 1;
        while (v291)
        {
          if (v290 > 0x19999999)
            goto LABEL_455;
          v293 = *v292 - 48;
          if (v293 > 9)
            goto LABEL_455;
          v268 = 0;
          LOBYTE(v264) = 0;
          v266 = 0;
          v80 = __CFADD__(v293, 10 * v290);
          v290 = v293 + 10 * v290;
          --v291;
          ++v292;
          if (v80)
            goto LABEL_457;
        }
        if (v290 != -1)
        {
          v268 = v290 & 0xFFFFFF00;
          v266 = 0x100000000;
          LOBYTE(v264) = v290;
          goto LABEL_457;
        }
      }
LABEL_455:
      v268 = 0;
      LOBYTE(v264) = 0;
    }
    else
    {
      v268 = 0;
    }
    v266 = 0;
LABEL_457:
    v267 = v264;
    goto LABEL_373;
  }
LABEL_6:
  v19 = (char *)v18 + 6;
  a3 = v13 >> 4;
  v20 = (uint64_t)v18;
  if ((*((_BYTE *)v18 + 6) & 8) == 0)
  {
    a4 = 18;
    v21 = (unsigned int *)v18;
    do
    {
      v22 = *v21 & 0xFFFFFFFE;
      v23 = 16 * v22;
      if (!(_DWORD)a3 || (a3 & ~*(_DWORD *)(16 * v22 + 0x20)) != 0)
        goto LABEL_19;
      v24 = *(_QWORD *)(16 * v22 + 0x58);
      if (!v24)
      {
        v35 = *(_QWORD *)(16 * v22 + 0x40);
        if (!v35 || *(_BYTE *)(v35 + 5) != 1 && *(_DWORD *)(v35 + 80) < 2u)
          goto LABEL_19;
        v311 = a3;
        v315 = v10;
        v306 = v12;
        v36 = v9;
        v37 = v11;
        v309 = (WTF *)v13;
        v38 = v14;
        v39 = v15;
        v40 = v18;
        v41 = v17;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v23, v17, 1, (const JSC::PropertyTable *)0x12, (uint64_t)v18, a7, v11, v15);
        a4 = 18;
        v17 = v41;
        v18 = v40;
        v15 = v39;
        v14 = v38;
        v13 = (unint64_t)v309;
        a3 = v311;
        v11 = v37;
        v9 = v36;
        v12 = v306;
        v10 = v315;
        if (!v24)
          goto LABEL_19;
      }
      if (!*(_DWORD *)(v24 + 24))
        goto LABEL_19;
      v25 = *(_QWORD *)(v24 + 16);
      v26 = v25 & 0xFFFFFFFFFFFFFFFELL;
      v27 = *(unsigned int *)(v24 + 8);
      v28 = *(_DWORD *)(v13 + 16);
      if ((v25 & 1) != 0)
      {
        if ((v28 & 0x20) != 0)
          v28 = *(_DWORD *)(v13 + 32);
        v29 = *(_DWORD *)(v24 + 12);
        v30 = (v28 >> 8) & *(_QWORD *)&v29;
        v31 = *(unsigned __int8 *)(v26 + v30);
        if (!*(_BYTE *)(v26 + v30))
          goto LABEL_19;
        v32 = v26 + v27;
        v33 = 1;
        while (1)
        {
          v34 = *(_QWORD *)(v32 + 8 * (v31 - 1));
          if (v13 == (v34 & 0xFFFFFFFFFFFFLL))
            break;
          v30 = ((_DWORD)v30 + v33) & v29;
          v31 = *(unsigned __int8 *)(v26 + v30);
          ++v33;
          if (!*(_BYTE *)(v26 + v30))
            goto LABEL_19;
        }
        a7 = (v34 >> 16) & 0xFF00000000 | HIBYTE(v34);
      }
      else
      {
        if ((v28 & 0x20) != 0)
          v28 = *(_DWORD *)(v13 + 32);
        v51 = *(_DWORD *)(v24 + 12);
        v52 = v51 & (v28 >> 8);
        v53 = *(_DWORD *)(v26 + 4 * v52);
        if (!v53)
          goto LABEL_19;
        v54 = v26 + 4 * v27;
        v55 = 1;
        while (1)
        {
          v56 = (v53 - 1);
          if (v13 == *(_QWORD *)(v54 + 16 * v56))
            break;
          v52 = (v52 + v55) & v51;
          v53 = *(_DWORD *)(v26 + 4 * v52);
          ++v55;
          if (!v53)
            goto LABEL_19;
        }
        a7 = *(unsigned int *)(v54 + 16 * v56 + 8) | ((unint64_t)*(unsigned __int8 *)(v54 + 16 * v56 + 12) << 32);
      }
      if ((_DWORD)a7 != -1)
      {
        v18 = (JSC::JSString *)HIDWORD(a7);
        if ((int)a7 <= 63)
        {
          v65 = (uint64_t)(v21 + 4);
          v66 = a7 << 32;
        }
        else
        {
          v65 = *((_QWORD *)v21 + 1) - 8;
          v66 = 0x3F00000000 - (a7 << 32);
        }
        a4 = *(_QWORD *)(v65 + (v66 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v67 = *(unsigned __int8 *)(a4 + 5);
          if (v67 == 5)
          {
            v98 = v10;
            v99 = v9;
            v100 = v14;
            v101 = (unsigned __int8 *)v8;
            v102 = v11;
            v103 = v15;
            JSC::JSObject::fillGetterPropertySlot(v21, (uint64_t)v17, (uint64_t)&v319, a4, SHIDWORD(a7), a7);
            v15 = v103;
            v11 = v102;
            v8 = (uint64_t)v101;
            v14 = v100;
            v9 = v99;
            v10 = v98;
LABEL_133:
            LODWORD(v13) = 1;
            goto LABEL_59;
          }
          if (v67 == 6)
          {
            v104 = *(_DWORD *)(v23 + 16) & 3;
            v105 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v107 = *(_QWORD *)(a4 + 24);
              v106 = *(uint64_t **)(a4 + 32);
              v319 = *(_QWORD *)(a4 + 8);
              v320 = v105;
              LODWORD(v321) = HIDWORD(a7);
              v323 = v21;
              BYTE1(v324[1]) = 3;
              LODWORD(v13) = 1;
              if (v104 != 2)
                LOBYTE(v324[1]) = 1;
              BYTE3(v324[1]) = 1;
              v327 = v107;
              v328 = v106;
            }
            else
            {
              v319 = *(_QWORD *)(a4 + 8);
              v320 = v105;
              LODWORD(v321) = HIDWORD(a7);
              v323 = v21;
              LODWORD(v13) = 1;
              BYTE1(v324[1]) = 3;
              if (v104 != 2)
                LOBYTE(v324[1]) = 1;
            }
            goto LABEL_59;
          }
        }
        v319 = a4;
        v323 = v21;
        v321 = __PAIR64__(a7, HIDWORD(a7));
        v68 = 257;
        goto LABEL_77;
      }
LABEL_19:
      if ((*v19 & 0x20) != 0)
      {
        v95 = *(unsigned int *)(16 * (*v21 & 0xFFFFFFFE) + 0x4C);
        v96 = !(_DWORD)v95 || v13 == 0;
        if (!v96)
        {
          v43 = 16 * v95;
          do
          {
            v42 = *(_QWORD *)(v43 + 24);
            if (!v42)
              goto LABEL_31;
            if ((*(_BYTE *)((16 * *v21) | 0x12) & 0x40) != 0)
              goto LABEL_31;
            v44 = *(_DWORD *)(v13 + 16);
            if ((v44 & 0x20) != 0)
              goto LABEL_31;
            v45 = *(_DWORD *)(v42 + 4) & (v44 >> 8);
            v46 = *(_QWORD *)(v42 + 32);
            v47 = *(unsigned __int16 *)(v46 + 4 * v45);
            if (v47 == 0xFFFF)
              goto LABEL_31;
            v295 = *(_QWORD *)(v42 + 16);
            v296 = v17;
            v307 = v45;
            v312 = a3;
            v316 = v10;
            v298 = v18;
            v299 = v9;
            v303 = v15;
            v297 = v21;
            while (1)
            {
              v306 = (__int16)v47;
              v48 = (_QWORD *)(*(_QWORD *)(v42 + 24) + 40 * (__int16)v47);
              v49 = v48[1];
              if (!v49)
                goto LABEL_40;
              v50 = v11;
              if ((WTF::equal(v13, *v48, v49 - 1) & 1) != 0)
                break;
              v46 = *(_QWORD *)(v42 + 32);
              a3 = v312;
              v10 = v316;
              v18 = v298;
              v9 = v299;
              v11 = v50;
              v15 = v303;
              v17 = v296;
              v21 = v297;
              a4 = 18;
LABEL_40:
              v47 = *(__int16 *)(v46 + 4 * v307 + 2);
              if (v47 == -1)
                goto LABEL_31;
              v307 = *(__int16 *)(v46 + 4 * v307 + 2);
              LOWORD(v47) = *(_WORD *)(v46 + 4 * v47);
            }
            v108 = *(_QWORD *)(v42 + 24);
            a3 = v312;
            v10 = v316;
            v18 = v298;
            v9 = v299;
            v11 = v50;
            v15 = v303;
            v17 = v296;
            v21 = v297;
            a4 = 18;
            if (v108)
            {
              v109 = *(_DWORD *)(v108 + 40 * (int)v306 + 16);
              if ((v109 & 0x3B10) == 0)
              {
                if ((v109 & 0x400) != 0)
                {
                  v228 = *(_DWORD *)(v108 + 40 * (int)v306 + 16);
                  v229 = *(_QWORD *)(v108 + 40 * (int)v306 + 24);
                  v96 = v229 == (int)v229;
                  v230 = v229 | 0xFFFE000000000000;
                  *(double *)a5.i64 = (double)v229;
                  v231 = COERCE__INT64((double)v229) + 0x2000000000000;
                  if (v96)
                    v231 = v230;
                  v319 = v231;
                  LODWORD(v321) = v228;
                  v323 = v297;
                  LODWORD(v13) = 1;
                  BYTE1(v324[1]) = 1;
                  goto LABEL_59;
                }
                v110 = *(_DWORD *)(v108 + 40 * (int)v306 + 16);
                if ((v109 & 0x8000) != 0)
                {
                  v232 = v108 + 40 * (int)v306;
                  v234 = *(uint64_t **)(v232 + 24);
                  v233 = *(_QWORD *)(v232 + 32);
                  v319 = *v234;
                  v320 = v233;
                  LODWORD(v321) = v110;
                  v323 = v297;
                  LOWORD(v324[1]) = 769;
                  LODWORD(v13) = 1;
                  BYTE3(v324[1]) = 1;
                  v327 = v295;
                  v328 = v234;
                  goto LABEL_59;
                }
                v111 = v108 + 40 * (int)v306;
                v113 = *(_QWORD *)(v111 + 24);
                v112 = *(_QWORD *)(v111 + 32);
                if ((v109 & 0x4000) != 0)
                {
                  v319 = v113;
                  v320 = v112;
                  LODWORD(v321) = v109;
                  v323 = v297;
                  LOWORD(v324[1]) = 769;
                  LODWORD(v13) = 1;
                  BYTE3(v324[1]) = 1;
                  v327 = v295;
                  v328 = 0;
                  goto LABEL_59;
                }
                v319 = v113;
                v320 = v112;
                LODWORD(v321) = v109;
                v323 = v297;
                v68 = 769;
LABEL_77:
                LODWORD(v13) = 1;
                LOWORD(v324[1]) = v68;
                goto LABEL_59;
              }
              v140 = JSC::setUpStaticFunctionSlot(v296, v295, v108 + 40 * (int)v306, v297, v13, (uint64_t)&v319, v50, v303);
              a4 = 18;
              v17 = v296;
              v21 = v297;
              a3 = v312;
              v10 = v316;
              v18 = v298;
              v9 = v299;
              v15 = v303;
              v11 = v50;
              if ((v140 & 1) != 0)
                goto LABEL_133;
            }
LABEL_31:
            v43 = *(_QWORD *)(v43 + 16);
          }
          while (v43);
        }
      }
      v20 = *(_QWORD *)(v23 + 48);
      if (!v20)
        v20 = *((_QWORD *)v21 + 2);
      if ((v20 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v20 + 5) < 0x17u)
      {
        if (!v13)
          goto LABEL_59;
        v57 = *(_DWORD *)(v13 + 16);
        if ((v57 & 0x20) != 0)
          goto LABEL_58;
        v58 = *(_WORD **)(v13 + 8);
        v59 = *(unsigned int *)(v13 + 4);
        if ((v57 & 4) == 0)
        {
          if ((_DWORD)v59)
          {
            v60 = (unsigned __int16)*v58 - 48;
            if (v60 <= 9 && (*v58 != 48 || v59 <= 1))
            {
              v77 = v58 + 1;
              v78 = v59 - 1;
              while (v78)
              {
                if (v60 > 0x19999999)
                  goto LABEL_58;
                v79 = *v77 - 48;
                if (v79 > 9)
                  goto LABEL_58;
                LODWORD(v13) = 0;
                v80 = __CFADD__(v79, 10 * v60);
                v60 = v79 + 10 * (_DWORD)v60;
                ++v77;
                --v78;
                if (v80)
                  goto LABEL_59;
              }
              if ((_DWORD)v60 != -1)
                goto LABEL_109;
            }
          }
LABEL_58:
          LODWORD(v13) = 0;
          goto LABEL_59;
        }
        v235 = v18;
        a7 = v14;
        v18 = (JSC::JSString *)v15;
        a4 = v11;
        a3 = v7;
        v236 = (unsigned __int8 *)v8;
        v237 = v12;
        v238 = v9;
        v239 = v10;
        if (!(_DWORD)v59
          || (v60 = *(unsigned __int8 *)v58 - 48, v60 > 9)
          || v59 >= 2 && *(_BYTE *)v58 == 48)
        {
LABEL_295:
          LODWORD(v13) = 0;
          v10 = v239;
          v9 = v238;
          v12 = v237;
          v8 = (uint64_t)v236;
          v7 = a3;
          v11 = a4;
          v15 = (unint64_t)v18;
          v14 = a7;
          goto LABEL_59;
        }
        v241 = (unsigned __int8 *)v58 + 1;
        v242 = v59 - 1;
        while (v242)
        {
          if (v60 > 0x19999999)
            goto LABEL_295;
          v243 = *v241 - 48;
          if (v243 > 9)
            goto LABEL_295;
          LODWORD(v13) = 0;
          v80 = __CFADD__(v243, 10 * v60);
          v60 = v243 + 10 * (_DWORD)v60;
          ++v241;
          --v242;
          v10 = v239;
          v9 = v238;
          v12 = v237;
          v8 = (uint64_t)v236;
          v7 = a3;
          v11 = a4;
          v15 = (unint64_t)v18;
          v14 = a7;
          if (v80)
            goto LABEL_59;
        }
        v10 = v239;
        v9 = v238;
        v12 = v237;
        v8 = (uint64_t)v236;
        v7 = a3;
        v11 = a4;
        v15 = (unint64_t)v18;
        v14 = a7;
        v18 = v235;
        if ((_DWORD)v60 == -1)
          goto LABEL_58;
LABEL_109:
        v82 = *(_DWORD **)(v9 + 56);
        v317 = v10;
        v300 = v11;
        v302 = (unsigned __int8 *)v8;
        v304 = v15;
        while (2)
        {
          v83 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
          v84 = v18;
          v85 = v9;
          v86 = v82;
          v87 = (*(uint64_t (**)(JSC::JSString *, unint64_t, uint64_t, uint64_t *))(16
                                                                                                 * *(unsigned int *)(v83 + 0x4C)
                                                                                                 + 0x70))(v18, v9, v60, &v319);
          v82 = v86;
          v91 = v87;
          if (v86[20])
          {
            v170 = v86[20];
            if ((v170 & 0x27) != 0 && (v170 & 0x20) == 0)
            {
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v86 + 16), 7u, a3, a4, (uint64_t)v18, a7, v89, v90);
              v82 = v86;
            }
            v171 = *((_QWORD *)v82 + 2);
            v172 = v171 == 0;
            if (v171)
              v173 = 1;
            else
              v173 = v91;
            v10 = v317;
            v9 = v85;
            v11 = v300;
            v8 = (uint64_t)v302;
            v15 = v304;
            v92 = v84;
            if ((v173 & 1) != 0)
            {
              LODWORD(v13) = v172;
              goto LABEL_59;
            }
          }
          else
          {
            v10 = v317;
            v9 = v85;
            v11 = v300;
            v8 = (uint64_t)v302;
            v15 = v304;
            v92 = v84;
            if ((v87 & 1) != 0)
              goto LABEL_133;
          }
          if (BYTE2(v324[1]) == 3)
          {
            if (BYTE4(v324[1]))
            {
              LODWORD(v13) = 0;
              v10 = v317;
              goto LABEL_224;
            }
            v92 = v84;
            v93 = *((unsigned __int8 *)v84 + 5);
            v10 = v317;
            v9 = v85;
            v11 = v300;
            v8 = (uint64_t)v302;
            v15 = v304;
            v82 = v86;
            if (v93 != 61)
              goto LABEL_114;
          }
          else
          {
            v93 = *((unsigned __int8 *)v92 + 5);
            if (v93 == 61)
            {
              if (BYTE2(v324[1]) == 1)
                goto LABEL_58;
            }
            else
            {
LABEL_114:
              if ((v93 - 39) <= 0xA)
              {
                v240 = JSC::JSArrayBufferView::length(v92, v88, a3, a4, (uint64_t)v18, a7, v11, v15);
                v82 = v86;
                v92 = v84;
                v8 = (uint64_t)v302;
                v15 = v304;
                v11 = v300;
                v9 = v85;
                v10 = v317;
                if (v240 <= v60)
                  goto LABEL_58;
              }
            }
          }
          if ((*(_WORD *)(v83 + 12) & 0x800) == 0 || BYTE2(v324[1]) == 3)
          {
            v94 = *(_QWORD *)(16 * (*(_DWORD *)v92 & 0xFFFFFFFE) + 0x30);
            if (!v94)
              v94 = *((_QWORD *)v92 + 2);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v92 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v94 = (*(uint64_t (**)(JSC::JSString *, unint64_t))(16
                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)v92 & 0xFFFFFFFE) + 0x4C)
                                                                                 + 0xB0))(v84, v85);
            }
            else
            {
              v94 = *(_QWORD *)(16 * (*(_DWORD *)v92 & 0xFFFFFFFE) + 0x30);
              if (!v94)
                v94 = *((_QWORD *)v84 + 2);
            }
            if (v86[20])
            {
              v289 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v86, v88, a3, a4, (uint64_t)v18, a7, v11, v15);
              v82 = v86;
              v10 = v317;
              v9 = v85;
              v11 = v300;
              v8 = (uint64_t)v302;
              v15 = v304;
              if (v289)
                goto LABEL_58;
            }
            else
            {
              v10 = v317;
              v9 = v85;
              v11 = v300;
              v8 = (uint64_t)v302;
              v15 = v304;
              v82 = v86;
            }
          }
          if ((v94 & 0xFFFE000000000002) != 0)
            goto LABEL_58;
          LODWORD(v13) = 0;
          v18 = (JSC::JSString *)v94;
          if (*(unsigned __int8 *)(v94 + 5) <= 0x16u)
            goto LABEL_59;
          continue;
        }
      }
      v19 = (_BYTE *)(v20 + 6);
      v21 = (unsigned int *)v20;
    }
    while ((*(_BYTE *)(v20 + 6) & 8) == 0);
  }
  v302 = (unsigned __int8 *)v8;
  if (v13)
  {
    v122 = *(_DWORD *)(v13 + 16);
    if ((v122 & 0x20) == 0)
    {
      v123 = *(_BYTE **)(v13 + 8);
      v124 = *(unsigned int *)(v13 + 4);
      if ((v122 & 4) != 0)
      {
        if ((_DWORD)v124)
        {
          v125 = *v123 - 48;
          if (v125 <= 9 && (v124 < 2 || *v123 != 48))
          {
            v273 = v124 - 1;
            v274 = v123 + 1;
            while (v273)
            {
              if (v125 <= 0x19999999)
              {
                v275 = *v274 - 48;
                if (v275 <= 9)
                {
                  v80 = __CFADD__(v275, 10 * v125);
                  v125 = v275 + 10 * (_DWORD)v125;
                  --v273;
                  ++v274;
                  if (!v80)
                    continue;
                }
              }
              goto LABEL_171;
            }
            if ((_DWORD)v125 != -1)
              goto LABEL_208;
          }
        }
      }
      else if ((_DWORD)v124)
      {
        v125 = *(unsigned __int16 *)v123 - 48;
        if (v125 <= 9 && (*(_WORD *)v123 != 48 || v124 <= 1))
        {
          v141 = (unsigned __int16 *)(v123 + 2);
          v142 = v124 - 1;
          while (v142)
          {
            if (v125 <= 0x19999999)
            {
              v143 = *v141 - 48;
              if (v143 <= 9)
              {
                v80 = __CFADD__(v143, 10 * v125);
                v125 = v143 + 10 * (_DWORD)v125;
                ++v141;
                --v142;
                if (!v80)
                  continue;
              }
            }
            goto LABEL_171;
          }
          if ((_DWORD)v125 != -1)
          {
LABEL_208:
            v144 = *(JSC::VM **)(v9 + 56);
            v300 = v11;
            v304 = v15;
            while (1)
            {
              v145 = v10;
              v146 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
              v147 = v18;
              v85 = v9;
              v148 = (*(uint64_t (**)(JSC::JSString *, unint64_t, uint64_t, uint64_t *))(16 * *(unsigned int *)(v146 + 0x4C) + 0x70))(v18, v9, v125, &v319);
              v152 = v148;
              if (*((_DWORD *)v144 + 20))
              {
                v209 = JSC::VM::hasExceptionsAfterHandlingTraps(v144, v149, a3, a4, (uint64_t)v18, a7, v150, v151);
                if (((v209 | v152) & 1) != 0)
                {
                  LODWORD(v13) = !v209;
                  goto LABEL_223;
                }
              }
              else if ((v148 & 1) != 0)
              {
                LODWORD(v13) = 1;
                goto LABEL_223;
              }
              if (BYTE2(v324[1]) == 3)
              {
                if (BYTE4(v324[1]))
                  goto LABEL_416;
                v153 = *((unsigned __int8 *)v147 + 5);
                if (v153 == 61)
                  goto LABEL_214;
              }
              else
              {
                v153 = *((unsigned __int8 *)v147 + 5);
                if (v153 == 61)
                {
                  if (BYTE2(v324[1]) == 1)
                    goto LABEL_416;
                  goto LABEL_214;
                }
              }
              if ((v153 - 39) <= 0xA
                && JSC::JSArrayBufferView::length(v147, v149, a3, a4, (uint64_t)v18, a7, v150, v151) <= v125)
              {
                goto LABEL_416;
              }
LABEL_214:
              if ((*(_WORD *)(v146 + 12) & 0x800) == 0 || BYTE2(v324[1]) == 3)
              {
                v154 = *(_QWORD *)(16 * (*(_DWORD *)v147 & 0xFFFFFFFE) + 0x30);
                if (!v154)
                  v154 = *((_QWORD *)v147 + 2);
              }
              else
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)v147 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v154 = (*(uint64_t (**)(JSC::JSString *, unint64_t))(16
                                                                                      * *(unsigned int *)(16 * (*(_DWORD *)v147 & 0xFFFFFFFE) + 0x4C)
                                                                                      + 0xB0))(v147, v85);
                }
                else
                {
                  v154 = *(_QWORD *)(16 * (*(_DWORD *)v147 & 0xFFFFFFFE) + 0x30);
                  if (!v154)
                    v154 = *((_QWORD *)v147 + 2);
                }
                if (*((_DWORD *)v144 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v144, v149, a3, a4, (uint64_t)v18, a7, v150, v151))
                {
LABEL_416:
                  LODWORD(v13) = 0;
LABEL_223:
                  v10 = v145;
LABEL_224:
                  v9 = v85;
                  v11 = v300;
                  v8 = (uint64_t)v302;
                  v15 = v304;
                  goto LABEL_59;
                }
              }
              if ((v154 & 0xFFFE000000000002) != 0)
                goto LABEL_416;
              LODWORD(v13) = 0;
              v18 = (JSC::JSString *)v154;
              v10 = v145;
              v9 = v85;
              v11 = v300;
              v8 = (uint64_t)v302;
              v15 = v304;
              if (*(unsigned __int8 *)(v154 + 5) <= 0x16u)
                goto LABEL_59;
            }
          }
        }
      }
    }
  }
LABEL_171:
  v308 = *(JSC::VM **)(v9 + 56);
  v310 = (WTF *)v13;
  v294 = v14;
  while (1)
  {
    v126 = 16 * (*(_DWORD *)v20 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v20 + 6) & 8) == 0)
      break;
    v314 = a3;
    v130 = v15;
    v183 = v11;
    v184 = v10;
    v185 = v9;
    v186 = (*(uint64_t (**)(uint64_t, unint64_t, WTF *, uint64_t *))(16
                                                                                  * *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C)
                                                                                  + 0x68))(v20, v9, v310, &v319);
    v189 = v186;
    if (*((_DWORD *)v308 + 20))
    {
      v244 = JSC::VM::hasExceptionsAfterHandlingTraps(v308, (uint64_t)v17, a3, a4, (uint64_t)v18, a7, v187, v188);
      if (((v244 | v189) & 1) != 0)
      {
        LODWORD(v13) = !v244;
        goto LABEL_260;
      }
    }
    else if ((v186 & 1) != 0)
    {
      LODWORD(v13) = 1;
      goto LABEL_260;
    }
    if (BYTE2(v324[1]) == 3)
    {
      if (!BYTE4(v324[1]))
      {
        v245 = *(unsigned __int8 *)(v20 + 5);
        if (v245 == 61)
          goto LABEL_344;
LABEL_326:
        if (!v310
          || (v245 - 50) < 0xFFFFFFF5
          || (v246 = *((_DWORD *)v310 + 4), (v246 & 0x20) != 0)
          || (v247 = *((unsigned int *)v310 + 1), !(_DWORD)v247))
        {
LABEL_344:
          v10 = v184;
          v9 = v185;
          v8 = (uint64_t)v302;
          v11 = v183;
          v15 = v130;
          a3 = v314;
          goto LABEL_178;
        }
        v248 = (unsigned __int8 *)*((_QWORD *)v310 + 1);
        if ((v246 & 4) == 0)
        {
          v249 = *(unsigned __int16 *)v248;
          if ((_DWORD)v247 == 1)
            goto LABEL_332;
          if (v249 == 45)
          {
            v249 = *((unsigned __int16 *)v248 + 1);
            goto LABEL_336;
          }
          if ((v249 - 48) >= 0xA && ((_DWORD)v247 != 8 || v249 != 73))
          {
LABEL_347:
            if ((_DWORD)v247 != 3 || v249 != 78)
              goto LABEL_344;
          }
LABEL_340:
          v306 = v306 & 0xFFFFFF0000000000 | v247 | ((unint64_t)((v246 >> 2) & 1) << 32);
          JSC::jsToNumber(v248, v306);
          WTF::numberToString(&v333, v250);
          v252 = WTF::equal((unint64_t)v310, (unint64_t)&v333, v251);
          v10 = v184;
          v9 = v185;
          v8 = (uint64_t)v302;
          v11 = v183;
          v15 = v130;
          a3 = v314;
          if (v252)
            goto LABEL_341;
          goto LABEL_178;
        }
        v249 = *v248;
        if ((_DWORD)v247 == 1)
        {
LABEL_332:
          v10 = v184;
          v9 = v185;
          v8 = (uint64_t)v302;
          v11 = v183;
          v15 = v130;
          a3 = v314;
          if ((v249 - 48) < 0xA)
            goto LABEL_341;
          goto LABEL_178;
        }
        if (v249 == 45)
        {
          v249 = v248[1];
LABEL_336:
          if ((v249 - 48) < 0xA)
          {
            if ((_DWORD)v247 == 2)
              goto LABEL_419;
            goto LABEL_340;
          }
          if ((_DWORD)v247 != 9)
            goto LABEL_344;
        }
        else
        {
          if ((v249 - 48) < 0xA)
            goto LABEL_340;
          if ((_DWORD)v247 != 8)
            goto LABEL_347;
        }
        if (v249 != 73)
          goto LABEL_344;
        goto LABEL_340;
      }
LABEL_419:
      LODWORD(v13) = 0;
LABEL_260:
      v10 = v184;
      v9 = v185;
      v8 = (uint64_t)v302;
      v11 = v183;
LABEL_248:
      v15 = v130;
      v14 = v294;
      goto LABEL_59;
    }
    v245 = *(unsigned __int8 *)(v20 + 5);
    if (v245 != 61)
      goto LABEL_326;
    v10 = v184;
    v9 = v185;
    v8 = (uint64_t)v302;
    v11 = v183;
    v15 = v130;
    a3 = v314;
    if (BYTE2(v324[1]) == 1)
    {
LABEL_341:
      LODWORD(v13) = 0;
      v14 = v294;
      goto LABEL_59;
    }
LABEL_178:
    if ((*(_WORD *)(v126 + 12) & 0x800) != 0)
    {
      v134 = *(_DWORD *)v20;
      v14 = v294;
      if (BYTE2(v324[1]) != 3)
      {
        v313 = a3;
        v178 = v15;
        v179 = v11;
        v180 = v9;
        v181 = v10;
        v182 = 16 * (v134 & 0xFFFFFFFE);
        if ((*(_WORD *)(v182 + 12) & 0x800) != 0)
        {
          v135 = (*(uint64_t (**)(uint64_t, unint64_t))(16 * *(unsigned int *)(v182 + 76) + 0xB0))(v20, v9);
        }
        else
        {
          v135 = *(_QWORD *)(v182 + 48);
          if (!v135)
            v135 = *(_QWORD *)(v20 + 16);
        }
        if (*((_DWORD *)v308 + 20))
        {
          v276 = JSC::VM::hasExceptionsAfterHandlingTraps(v308, (uint64_t)v17, a3, a4, (uint64_t)v18, a7, v11, v15);
          v10 = v181;
          v9 = v180;
          v11 = v179;
          v15 = v178;
          v14 = v294;
          a3 = v313;
          if (v276)
            goto LABEL_58;
        }
        else
        {
          v10 = v181;
          v9 = v180;
          v11 = v179;
          v15 = v178;
          v14 = v294;
          a3 = v313;
        }
        goto LABEL_182;
      }
    }
    else
    {
      v134 = *(_DWORD *)v20;
      v14 = v294;
    }
    v135 = *(_QWORD *)(16 * (v134 & 0xFFFFFFFE) + 0x30);
    if (!v135)
      v135 = *(_QWORD *)(v20 + 16);
LABEL_182:
    if ((v135 & 0xFFFE000000000002) != 0)
      goto LABEL_58;
    LODWORD(v13) = 0;
    v20 = v135;
    if (*(unsigned __int8 *)(v135 + 5) <= 0x16u)
      goto LABEL_59;
  }
  if (!(_DWORD)a3)
    goto LABEL_474;
  if ((a3 & ~*(_DWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_474;
  v127 = v10;
  v128 = v9;
  v129 = v11;
  v130 = v15;
  v131 = a3;
  JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE)), v308, a3, (const JSC::PropertyTable *)a4, (uint64_t)v18, a7, v11, v15);
  a3 = v131;
  v15 = v130;
  v11 = v129;
  v8 = (uint64_t)v302;
  v9 = v128;
  v10 = v127;
  if (!v132)
    goto LABEL_474;
  v333 = v310;
  v133 = JSC::PropertyTable::get(v132, (uint64_t *)&v333);
  a3 = v131;
  v15 = v130;
  v11 = v129;
  v8 = (uint64_t)v302;
  v9 = v128;
  v10 = v127;
  a7 = v133;
  if ((_DWORD)v133 == -1)
  {
LABEL_474:
    if ((*(_BYTE *)(v20 + 6) & 0x20) != 0)
    {
      v155 = v10;
      v156 = v12;
      v157 = v9;
      v158 = v7;
      v159 = (unsigned __int8 *)v8;
      v160 = a3;
      v161 = v11;
      v162 = v15;
      OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v20, v308, (unint64_t)v310, (uint64_t)&v319);
      a3 = v160;
      v15 = v162;
      v11 = v161;
      v8 = (uint64_t)v159;
      v7 = v158;
      v9 = v157;
      v12 = v156;
      v10 = v155;
      if ((OwnStaticPropertySlot & 1) != 0)
        goto LABEL_226;
    }
    goto LABEL_178;
  }
  v18 = (JSC::JSString *)HIDWORD(v133);
  if ((int)v133 <= 63)
  {
    v136 = v20 + 16;
    v137 = v133 << 32;
  }
  else
  {
    v136 = *(_QWORD *)(v20 + 8) - 8;
    v137 = 0x3F00000000 - (v133 << 32);
  }
  a4 = *(_QWORD *)(v136 + (v137 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_190;
  v138 = *(unsigned __int8 *)(a4 + 5);
  if (v138 != 5)
  {
    if (v138 != 6)
    {
LABEL_190:
      v319 = a4;
      v323 = (unsigned int *)v20;
      v321 = __PAIR64__(v133, HIDWORD(v133));
      LODWORD(v13) = 1;
      LOWORD(v324[1]) = 257;
      v14 = v294;
      goto LABEL_59;
    }
    v174 = *(_DWORD *)(v126 + 16) & 3;
    v175 = *(_QWORD *)(a4 + 16);
    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
    {
      v177 = *(_QWORD *)(a4 + 24);
      v176 = *(uint64_t **)(a4 + 32);
      v319 = *(_QWORD *)(a4 + 8);
      v320 = v175;
      LODWORD(v321) = HIDWORD(v133);
      v323 = (unsigned int *)v20;
      BYTE1(v324[1]) = 3;
      LODWORD(v13) = 1;
      if (v174 != 2)
        LOBYTE(v324[1]) = 1;
      BYTE3(v324[1]) = 1;
      v327 = v177;
      v328 = v176;
    }
    else
    {
      v319 = *(_QWORD *)(a4 + 8);
      v320 = v175;
      LODWORD(v321) = HIDWORD(v133);
      v323 = (unsigned int *)v20;
      LODWORD(v13) = 1;
      BYTE1(v324[1]) = 3;
      if (v174 != 2)
        LOBYTE(v324[1]) = 1;
    }
    v10 = v127;
    v9 = v128;
    v8 = (uint64_t)v302;
    v11 = v129;
    goto LABEL_248;
  }
  JSC::JSObject::fillGetterPropertySlot((unsigned int *)v20, (uint64_t)v308, (uint64_t)&v319, a4, SHIDWORD(v133), v133);
  v15 = v130;
  v11 = v129;
  v8 = (uint64_t)v302;
  v9 = v128;
  v10 = v127;
LABEL_226:
  LODWORD(v13) = 1;
  v14 = v294;
LABEL_59:
  if (*(_DWORD *)(v14 + 80))
  {
    v139 = *(_DWORD *)(v14 + 80);
    if ((v139 & 0x27) != 0 && (v139 & 0x20) == 0)
    {
      v277 = (JSC::VMTraps *)(v14 + 64);
      v278 = v10;
      v279 = v9;
      v280 = v14;
      v281 = v7;
      v282 = (unsigned __int8 *)v8;
      v283 = v11;
      v284 = v15;
      JSC::VMTraps::handleTraps(v277, 7u, a3, a4, (uint64_t)v18, a7, v11, v15);
      v15 = v284;
      v11 = v283;
      v8 = (uint64_t)v282;
      v7 = v281;
      v14 = v280;
      v9 = v279;
      v10 = v278;
    }
    if (*(_QWORD *)(v14 + 16))
    {
      result = 0;
      goto LABEL_67;
    }
  }
  if (byte_1ECF4C6B7)
  {
    v190 = v11;
    v191 = v9;
    v192 = v10;
    v193 = v15;
    if (v15)
      v194 = 0;
    else
      v194 = 16 * *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C);
    if (v12)
    {
      if ((v12 & 1) != 0)
        v195 = (WTF::StringImpl *)(v12 & 0xFFFFFFFFFFFFFFFELL);
      else
        v195 = *(WTF::StringImpl **)(v12 + 8);
    }
    else
    {
      v195 = 0;
    }
    JSC::ICEvent::ICEvent((uint64_t)&v333, (uint64_t **)v10, (const WTF::StringImpl *)0xC, v194, v195, v323 == (unsigned int *)v8, v11, v15);
    JSC::ICEvent::log((JSC::ICEvent *)&v333, v196, v197, v198, v199, v200, v201, v202);
    v207 = v335;
    v335 = 0;
    if (v207)
    {
      if (*(_DWORD *)v207 == 2)
      {
        WTF::StringImpl::~StringImpl(v207, v203, v204, a4, (uint64_t)v18, a7, v205, v206);
        WTF::fastFree(v210, v211, v212, v213, v214, v215, v216, v217);
      }
      else
      {
        *(_DWORD *)v207 -= 2;
      }
    }
    v10 = v192;
    v9 = v191;
    v11 = v190;
    v15 = v193;
  }
  if (v15 || (v61 = *(_DWORD *)v8 & 0xFFFFFFFE) == 0)
  {
    *(_WORD *)(v7 + 129) |= 0x10u;
    goto LABEL_65;
  }
  v62 = *(unsigned __int8 **)(v11 + 16);
  v331 = v12;
  *(_WORD *)(v7 + 129) |= 4u;
  if (*(_BYTE *)(v7 + 124))
  {
    --*(_BYTE *)(v7 + 124);
    goto LABEL_65;
  }
  v69 = *(unsigned __int8 *)(v7 + 125);
  if (v69 != 255)
    *(_BYTE *)(v7 + 125) = ++v69;
  if (xmmword_1ECF4C260 < v69)
  {
    *(_BYTE *)(v7 + 125) = 0;
    v118 = *(unsigned __int8 *)(v7 + 126);
    v119 = BYTE4(xmmword_1ECF4C260) << v118;
    v120 = v119;
    if (v119 == 255)
      LOBYTE(v119) = -2;
    if (v120 >> v118 == BYTE4(xmmword_1ECF4C260))
      v121 = v119;
    else
      v121 = -2;
    *(_BYTE *)(v7 + 124) = v121;
    if (v118 != 255)
      *(_BYTE *)(v7 + 126) = v118 + 1;
    *(_BYTE *)(v7 + 127) = 0;
    goto LABEL_131;
  }
  if (!*(_BYTE *)(v7 + 127))
  {
LABEL_131:
    v97 = v9;
    JSC::repatchGetBy((uint64_t *)v9, v62, (const WTF::StringImpl *)v8, v12, (uint64_t)&v319, v7, 0, v15, *(uint8x8_t *)a5.i8);
    v9 = v97;
    goto LABEL_65;
  }
  v70 = v9;
  v71 = v10;
  --*(_BYTE *)(v7 + 127);
  v330 = 0;
  v329 = v61;
  v72 = (unsigned __int8 *)(v7 + 128);
  if (!__ldaxr((unsigned __int8 *)(v7 + 128)))
    goto LABEL_136;
  __clrex();
LABEL_85:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v7 + 128);
  while (1)
  {
    v74 = *(_DWORD *)(v7 + 96);
    if (!v74)
      break;
    v335 = (WTF::StringImpl *)&v329;
    v336 = &v331;
    v337 = &v330;
    v333 = &v329;
    v334 = &v330;
    if (v74 != -1)
      goto LABEL_91;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_136:
    if (__stxr(1u, v72))
      goto LABEL_85;
  }
  if (*(_QWORD *)(v7 + 16))
    v74 = 1;
  else
    v74 = 2;
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  *(_DWORD *)(v7 + 96) = v74;
  v335 = (WTF::StringImpl *)&v329;
  v336 = &v331;
  v337 = &v330;
  v333 = &v329;
  v334 = &v330;
LABEL_91:
  v332 = &v333;
  ((void (*)(_DWORD ***))off_1E3596010[v74])(&v332);
  v76 = __ldxr(v72);
  if (v76 != 1)
  {
    __clrex();
    goto LABEL_127;
  }
  if (__stlxr(0, v72))
LABEL_127:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v7 + 128), 0, v75, a4, (uint64_t)v18, a7, v11, v15);
  if (!v330)
  {
    v9 = v70;
    goto LABEL_65;
  }
  v9 = v70;
  if (!v62)
    goto LABEL_131;
  if (*(_DWORD *)(v71 + 760) < v62[7])
    goto LABEL_131;
  JSC::Heap::writeBarrierSlowPath(v71 + 192, (unint64_t)v62);
  v9 = v70;
  if (v330)
    goto LABEL_131;
LABEL_65:
  if ((_DWORD)v13)
  {
    if (v12)
    {
      if ((v12 & 1) != 0)
        v208 = (WTF::StringImpl *)(v12 & 0xFFFFFFFFFFFFFFFELL);
      else
        v208 = *(WTF::StringImpl **)(v12 + 8);
    }
    else
    {
      v208 = 0;
    }
    if (BYTE1(v324[1]) == 1)
    {
      result = v319;
    }
    else if (BYTE1(v324[1]) == 2)
    {
      result = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v319, (JSC::JSGlobalObject *)v9, (uint64_t)v208, a4, (uint64_t)v18, a7, v11, v15);
    }
    else
    {
      result = JSC::PropertySlot::customGetter((uint64_t)&v319, *(JSC::VM **)(v9 + 56), v208);
    }
  }
  else
  {
    result = 10;
  }
LABEL_67:
  if (v326)
  {
    v64 = *(_DWORD *)(v325 + 4);
    if (!v64)
    {
      __break(0xC471u);
      JUMPOUT(0x198770D50);
    }
    *(_DWORD *)(v325 + 4) = v64 - 1;
  }
  return result;
}

uint64_t operationGetByIdWithThisGaveUp(unint64_t this, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::Structure *v9;
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _WORD *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned __int16 *v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  BOOL v44;
  int v46;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int8x16_t **v51;
  int v52;
  _BYTE *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned __int16 *v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned __int8 *v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  size_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unsigned __int8 *v85;
  JSC::VM **v86;
  uint64_t v87;
  int v88;
  int v89;
  JSC::VM **p_dst;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int8 *v100;
  unsigned int v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  char v112;
  uint64_t v113;
  unsigned int *v114;
  uint64_t v115;
  uint64_t Index;
  int v117;
  char v118;
  int v119;
  _WORD *v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  unsigned __int16 *v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  char v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  char v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  char v145;
  uint64_t v146;
  unsigned __int8 *v147;
  unsigned int v148;
  int v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  _DWORD *v153;
  int v154;
  uint64_t v155;
  unsigned __int8 *v156;
  unsigned int v157;
  unint64_t v158;
  char v159;
  uint64_t v160;
  int v161;
  JSC::VMTraps *v162;
  JSC::VMTraps *v163;
  JSC::VMTraps *v164;
  uint64_t (*v165)(unint64_t);
  uint64_t v166;
  unint64_t v167;
  _DWORD *v168;
  _DWORD *v169;
  _QWORD v170[2];
  uint64_t v171;
  char v172;
  int8x16_t **v173;
  uint64_t v174;
  unint64_t v175;
  JSC::VM *__dst;
  char v177;
  char __s[3];
  _BYTE v179[39];
  uint64_t vars0;

  v9 = (JSC::Structure *)this;
  *(_QWORD *)&v179[23] = *MEMORY[0x1E0C80C00];
  v10 = *(JSC::JSGlobalObject **)(a3 + 56);
  v11 = vars0;
  *(_QWORD *)(*((_QWORD *)v10 + 7) + 40) = vars0;
  *(_DWORD *)(v11 + 36) = *(_DWORD *)(a3 + 112);
  *(_WORD *)(a3 + 129) |= 2u;
  v12 = *(_QWORD *)(a3 + 16);
  v174 = 0;
  v175 = this;
  a9.i64[0] = 0xFFFFFFFF00000000;
  v167 = 0xFFFFFFFF00000000;
  LOBYTE(v171) = 0;
  v172 = 0;
  v173 = 0;
  v169 = 0;
  memset(v170, 0, 13);
  v168 = a2;
  if (v12)
  {
    if ((v12 & 1) != 0)
      v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    else
      v13 = *(_QWORD *)(v12 + 8);
  }
  else
  {
    v13 = 0;
  }
  if ((this & 0xFFFE000000000002) == 0)
  {
    v14 = *((_QWORD *)v10 + 7);
    v15 = *(unsigned __int8 *)(this + 5);
    if (v15 > 0x16)
      goto LABEL_6;
    if (v15 == 2)
    {
      if (*(_QWORD *)(*(_QWORD *)(v14 + 41952) + 1768) == v13)
      {
        v113 = *(_QWORD *)(this + 8);
        if ((v113 & 1) != 0)
          v114 = (unsigned int *)(this + 16);
        else
          v114 = (unsigned int *)(v113 + 4);
        v115 = *v114;
        if ((v115 & 0x80000000) != 0)
          Index = COERCE__INT64((double)v115) + 0x2000000000000;
        else
          Index = v115 | 0xFFFE000000000000;
        v117 = 14;
        goto LABEL_275;
      }
      if (!v13 || (v119 = *(_DWORD *)(v13 + 16), (v119 & 0x20) != 0))
      {
LABEL_297:
        v118 = 0;
LABEL_298:
        if (*(_DWORD *)(v14 + 80))
        {
          v149 = *(_DWORD *)(v14 + 80);
          if ((v149 & 0x27) != 0 && (v149 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v14 + 16))
            goto LABEL_28;
        }
        if ((v118 & 1) != 0)
          goto LABEL_45;
        goto LABEL_300;
      }
      v120 = *(_WORD **)(v13 + 8);
      v121 = *(unsigned int *)(v13 + 4);
      if ((v119 & 4) == 0)
      {
        if ((_DWORD)v121)
        {
          v122 = (unsigned __int16)*v120 - 48;
          if (v122 <= 9 && (*v120 != 48 || v121 <= 1))
          {
            v125 = v120 + 1;
            v126 = v121 - 1;
            while (v126)
            {
              if (v122 > 0x19999999)
                goto LABEL_281;
              v127 = *v125 - 48;
              if (v127 > 9)
                goto LABEL_281;
              v123 = 0;
              LOBYTE(v121) = 0;
              v124 = 0;
              v35 = __CFADD__(v127, 10 * v122);
              v122 = v127 + 10 * v122;
              ++v125;
              --v126;
              if (v35)
                goto LABEL_296;
            }
            v124 = v122 & 0xFFFFFF00;
            v123 = 0x100000000;
            if (v122 == -1)
            {
              v123 = 0;
              LOBYTE(v121) = 0;
            }
            else
            {
              LOBYTE(v121) = v122;
            }
            if (v122 == -1)
              v124 = 0;
LABEL_296:
            v128 = v121;
            if ((v123 & 0x100000000) == 0)
              goto LABEL_297;
            goto LABEL_385;
          }
LABEL_281:
          v123 = 0;
          LOBYTE(v121) = 0;
        }
        else
        {
          v123 = 0;
        }
        v124 = 0;
        goto LABEL_296;
      }
      if ((_DWORD)v121)
      {
        v150 = *(unsigned __int8 *)v120 - 48;
        if (v150 <= 9 && (v121 < 2 || *(_BYTE *)v120 != 48))
        {
          v155 = v121 - 1;
          v156 = (unsigned __int8 *)v120 + 1;
          while (v155)
          {
            if (v150 > 0x19999999)
              goto LABEL_382;
            v157 = *v156 - 48;
            if (v157 > 9)
              goto LABEL_382;
            v128 = 0;
            LOBYTE(v121) = 0;
            v151 = 0;
            v35 = __CFADD__(v157, 10 * v150);
            v150 = v157 + 10 * v150;
            --v155;
            ++v156;
            if (v35)
              goto LABEL_384;
          }
          if (v150 == -1)
            v128 = 0;
          else
            v128 = v150 & 0xFFFFFF00;
          if (v150 == -1)
            LOBYTE(v121) = 0;
          else
            LOBYTE(v121) = v150;
          if (v150 == -1)
            v151 = 0;
          else
            v151 = 0x100000000;
LABEL_384:
          v124 = v121;
          if ((v151 & 0x100000000) == 0)
            goto LABEL_297;
LABEL_385:
          a3 = v124 | v128;
          v152 = *(_QWORD *)(this + 8);
          if ((v152 & 1) != 0)
            v153 = (_DWORD *)(this + 16);
          else
            v153 = (_DWORD *)(v152 + 4);
          if (*v153 > a3)
          {
            Index = JSC::JSString::getIndex((JSC::JSString *)this, v10, a3, a4, a5, a6, a7, a8, a9);
            if (!*(_DWORD *)(v14 + 80))
              goto LABEL_390;
            v154 = *(_DWORD *)(v14 + 80);
            if ((v154 & 0x27) != 0 && (v154 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (!*(_QWORD *)(v14 + 16))
            {
LABEL_390:
              v117 = 10;
LABEL_275:
              v165 = (uint64_t (*)(unint64_t))Index;
              LODWORD(v167) = v117;
              v169 = 0;
              v118 = 1;
              BYTE1(v170[1]) = 1;
              goto LABEL_298;
            }
          }
          goto LABEL_297;
        }
LABEL_382:
        v128 = 0;
        LOBYTE(v121) = 0;
      }
      else
      {
        v128 = 0;
      }
      v151 = 0;
      goto LABEL_384;
    }
  }
LABEL_300:
  v129 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v175, (unint64_t)v10);
  if (!v129)
    goto LABEL_28;
  v9 = (JSC::Structure *)v129;
  v14 = *((_QWORD *)v10 + 7);
LABEL_6:
  v16 = (char *)v9 + 6;
  v17 = v13 >> 4;
  v18 = (uint64_t)v9;
  if ((*((_BYTE *)v9 + 6) & 8) == 0)
  {
    v19 = v9;
    while (1)
    {
      v20 = *(_DWORD *)v19 & 0xFFFFFFFE;
      v21 = 16 * v20;
      if ((_DWORD)v17)
      {
        if ((v17 & ~*(_DWORD *)(16 * v20 + 0x20)) == 0)
        {
          JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v21, (JSC::VM *)v14, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
          if (v22)
          {
            __dst = (JSC::VM *)v13;
            v23 = JSC::PropertyTable::get(v22, (uint64_t *)&__dst);
            a6 = v23;
            if ((_DWORD)v23 != -1)
              break;
          }
        }
      }
      if ((*v16 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v19, (JSC::VM *)v14, v13, (uint64_t)&v165) & 1) != 0)
      {
        goto LABEL_45;
      }
      v18 = *(_QWORD *)(v21 + 48);
      if (!v18)
        v18 = *((_QWORD *)v19 + 2);
      if ((v18 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) < 0x17u)
      {
        if (!v13)
          goto LABEL_28;
        v26 = *(_DWORD *)(v13 + 16);
        if ((v26 & 0x20) != 0)
          goto LABEL_28;
        v27 = *(_WORD **)(v13 + 8);
        v28 = *(unsigned int *)(v13 + 4);
        if ((v26 & 4) == 0)
        {
          if ((_DWORD)v28)
          {
            v29 = (unsigned __int16)*v27 - 48;
            if (v29 <= 9 && (*v27 != 48 || v28 <= 1))
            {
              v32 = v27 + 1;
              v33 = v28 - 1;
              v30 = 10;
              while (v33)
              {
                if (v29 <= 0x19999999)
                {
                  v34 = *v32 - 48;
                  if (v34 <= 9)
                  {
                    v35 = __CFADD__(v34, 10 * v29);
                    v29 = v34 + 10 * v29;
                    ++v32;
                    --v33;
                    if (!v35)
                      continue;
                  }
                }
                goto LABEL_66;
              }
              goto LABEL_226;
            }
          }
          goto LABEL_28;
        }
        if (!(_DWORD)v28)
          goto LABEL_28;
        v29 = *(unsigned __int8 *)v27 - 48;
        if (v29 > 9 || v28 >= 2 && *(_BYTE *)v27 == 48)
          goto LABEL_28;
        v99 = v28 - 1;
        v100 = (unsigned __int8 *)v27 + 1;
        v30 = 10;
        while (v99)
        {
          if (v29 <= 0x19999999)
          {
            v101 = *v100 - 48;
            if (v101 <= 9)
            {
              v35 = __CFADD__(v101, 10 * v29);
              v29 = v101 + 10 * v29;
              --v99;
              ++v100;
              if (!v35)
                continue;
            }
          }
          goto LABEL_66;
        }
LABEL_226:
        if (v29 == -1)
        {
LABEL_28:
          v30 = 10;
          goto LABEL_66;
        }
        v102 = v29;
        v103 = *((_QWORD *)v10 + 7);
        v163 = (JSC::VMTraps *)(v103 + 64);
        v30 = 10;
        while (2)
        {
          v104 = 16 * (*(_DWORD *)v9 & 0xFFFFFFFE);
          v105 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v104 + 0x4C) + 0x70))(v9, v10, v102, &v165);
          if (*(_DWORD *)(v103 + 80))
          {
            v108 = *(_DWORD *)(v103 + 80);
            if ((v108 & 0x27) != 0 && (v108 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v163, 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v103 + 16))
              goto LABEL_66;
          }
          if ((v105 & 1) != 0)
            goto LABEL_45;
          if (BYTE2(v170[1]) == 3)
          {
            if (BYTE4(v170[1]))
              goto LABEL_66;
            v106 = *((unsigned __int8 *)v9 + 5);
            if (v106 != 61)
              goto LABEL_232;
          }
          else
          {
            v106 = *((unsigned __int8 *)v9 + 5);
            if (v106 == 61)
            {
              if (BYTE2(v170[1]) == 1)
                goto LABEL_66;
            }
            else
            {
LABEL_232:
              if ((v106 - 39) <= 0xA)
              {
                if ((*((_BYTE *)v9 + 40) & 7u) > 2)
                {
                  LOBYTE(__dst) = 0;
                  v177 = 0;
                  v111 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v9, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                  v110 = v112 ? v111 : 0;
                }
                else
                {
                  v110 = *((_QWORD *)v9 + 3);
                }
                if (v110 <= v102)
                  goto LABEL_66;
              }
            }
          }
          if ((*(_WORD *)(v104 + 12) & 0x800) == 0 || BYTE2(v170[1]) == 3)
          {
            v107 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
            if (!v107)
              v107 = *((_QWORD *)v9 + 2);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v107 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *))(16
                                                                                        * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)
                                                                                        + 0xB0))(v9, v10);
            }
            else
            {
              v107 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
              if (!v107)
                v107 = *((_QWORD *)v9 + 2);
            }
            if (*(_DWORD *)(v103 + 80))
            {
              v109 = *(_DWORD *)(v103 + 80);
              if ((v109 & 0x27) != 0 && (v109 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v163, 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v103 + 16))
                goto LABEL_66;
            }
          }
          if ((v107 & 0xFFFE000000000002) != 0)
            goto LABEL_66;
          v9 = (JSC::Structure *)v107;
          if (*(unsigned __int8 *)(v107 + 5) <= 0x16u)
            goto LABEL_66;
          continue;
        }
      }
      v16 = (_BYTE *)(v18 + 6);
      v19 = (JSC::Structure *)v18;
      if ((*(_BYTE *)(v18 + 6) & 8) != 0)
        goto LABEL_76;
    }
    a5 = HIDWORD(v23);
    if ((int)v23 <= 63)
    {
      v24 = (uint64_t)v19 + 16;
      v25 = v23 << 32;
    }
    else
    {
      v24 = *((_QWORD *)v19 + 1) - 8;
      v25 = 0x3F00000000 - (v23 << 32);
    }
    a4 = *(_QWORD *)(v24 + (v25 >> 29));
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_33;
    v31 = *(unsigned __int8 *)(a4 + 5);
    if (v31 != 5)
    {
      if (v31 != 6)
      {
LABEL_33:
        v165 = (uint64_t (*)(unint64_t))a4;
        v169 = v19;
LABEL_34:
        v167 = __PAIR64__(a6, a5);
        LOWORD(v170[1]) = 257;
        goto LABEL_45;
      }
      v48 = *(_DWORD *)(v21 + 16) & 3;
      v49 = *(_QWORD *)(a4 + 16);
      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                               + 0x4C)))
      {
        v51 = *(int8x16_t ***)(a4 + 24);
        v50 = *(_QWORD *)(a4 + 32);
        v165 = *(uint64_t (**)(unint64_t))(a4 + 8);
        v166 = v49;
        LODWORD(v167) = HIDWORD(v23);
        v169 = v19;
        goto LABEL_72;
      }
      v165 = *(uint64_t (**)(unint64_t))(a4 + 8);
      v166 = v49;
      LODWORD(v167) = HIDWORD(v23);
      v169 = v19;
LABEL_93:
      BYTE1(v170[1]) = 3;
      if (v48 != 2)
        LOBYTE(v170[1]) = 1;
      goto LABEL_45;
    }
    v36 = (unsigned int *)v19;
    v37 = v14;
LABEL_44:
    JSC::JSObject::fillGetterPropertySlot(v36, v37, (uint64_t)&v165, a4, a5, a6);
    goto LABEL_45;
  }
LABEL_76:
  if (!v13)
    goto LABEL_101;
  v52 = *(_DWORD *)(v13 + 16);
  if ((v52 & 0x20) != 0)
    goto LABEL_101;
  v53 = *(_BYTE **)(v13 + 8);
  v54 = *(unsigned int *)(v13 + 4);
  if ((v52 & 4) != 0)
  {
    if ((_DWORD)v54)
    {
      v130 = *v53 - 48;
      if (v130 <= 9 && (v54 < 2 || *v53 != 48))
      {
        v146 = v54 - 1;
        v147 = v53 + 1;
        while (v146)
        {
          if (v130 > 0x19999999)
            goto LABEL_304;
          v148 = *v147 - 48;
          if (v148 > 9)
            goto LABEL_304;
          v61 = 0;
          LOBYTE(v54) = 0;
          v131 = 0;
          v35 = __CFADD__(v148, 10 * v130);
          v130 = v148 + 10 * v130;
          --v146;
          ++v147;
          if (v35)
            goto LABEL_306;
        }
        if (v130 == -1)
          v61 = 0;
        else
          v61 = v130 & 0xFFFFFF00;
        if (v130 == -1)
          LOBYTE(v54) = 0;
        else
          LOBYTE(v54) = v130;
        if (v130 == -1)
          v131 = 0;
        else
          v131 = 0x100000000;
LABEL_306:
        v57 = v54;
        if ((v131 & 0x100000000) == 0)
          goto LABEL_101;
        goto LABEL_307;
      }
LABEL_304:
      v61 = 0;
      LOBYTE(v54) = 0;
    }
    else
    {
      v61 = 0;
    }
    v131 = 0;
    goto LABEL_306;
  }
  if (!(_DWORD)v54)
  {
    v56 = 0;
    goto LABEL_82;
  }
  v55 = *(unsigned __int16 *)v53 - 48;
  if (v55 > 9 || *(_WORD *)v53 == 48 && v54 > 1)
  {
LABEL_81:
    v56 = 0;
    LOBYTE(v54) = 0;
LABEL_82:
    v57 = 0;
    goto LABEL_100;
  }
  v58 = (unsigned __int16 *)(v53 + 2);
  v59 = v54 - 1;
  while (v59)
  {
    if (v55 > 0x19999999)
      goto LABEL_81;
    v60 = *v58 - 48;
    if (v60 > 9)
      goto LABEL_81;
    v56 = 0;
    LOBYTE(v54) = 0;
    v57 = 0;
    v35 = __CFADD__(v60, 10 * v55);
    v55 = v60 + 10 * v55;
    ++v58;
    --v59;
    if (v35)
      goto LABEL_100;
  }
  v57 = v55 & 0xFFFFFF00;
  v56 = 0x100000000;
  if (v55 == -1)
  {
    v56 = 0;
    LOBYTE(v54) = 0;
  }
  else
  {
    LOBYTE(v54) = v55;
  }
  if (v55 == -1)
    v57 = 0;
LABEL_100:
  v61 = v54;
  if ((v56 & 0x100000000) != 0)
  {
LABEL_307:
    v132 = v57 | v61;
    v133 = *((_QWORD *)v10 + 7);
    v164 = (JSC::VMTraps *)(v133 + 64);
    v30 = 10;
    while (1)
    {
      v134 = 16 * (*(_DWORD *)v9 & 0xFFFFFFFE);
      v135 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v134 + 0x4C) + 0x70))(v9, v10, v132, &v165);
      v136 = v135;
      if (*(_DWORD *)(v133 + 80))
      {
        v139 = *(_DWORD *)(v133 + 80);
        if ((v139 & 0x27) != 0 && (v139 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v164, 7u, a3, a4, a5, a6, a7, a8);
        v140 = *(_QWORD *)(v133 + 16);
        if (v140)
          v141 = 1;
        else
          v141 = v136;
        if ((v141 & 1) != 0)
        {
          if (!v140)
            goto LABEL_45;
          goto LABEL_28;
        }
      }
      else if ((v135 & 1) != 0)
      {
        goto LABEL_45;
      }
      if (BYTE2(v170[1]) == 3)
      {
        if (BYTE4(v170[1]))
          goto LABEL_66;
        v137 = *((unsigned __int8 *)v9 + 5);
        if (v137 == 61)
          goto LABEL_313;
      }
      else
      {
        v137 = *((unsigned __int8 *)v9 + 5);
        if (v137 == 61)
        {
          if (BYTE2(v170[1]) == 1)
            goto LABEL_66;
          goto LABEL_313;
        }
      }
      if ((v137 - 39) <= 0xA)
      {
        if ((*((_BYTE *)v9 + 40) & 7u) > 2)
        {
          LOBYTE(__dst) = 0;
          v177 = 0;
          v144 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v9, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
          v143 = v145 ? v144 : 0;
        }
        else
        {
          v143 = *((_QWORD *)v9 + 3);
        }
        if (v143 <= v132)
          goto LABEL_66;
      }
LABEL_313:
      if ((*(_WORD *)(v134 + 12) & 0x800) == 0 || BYTE2(v170[1]) == 3)
      {
        v138 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
        if (!v138)
          v138 = *((_QWORD *)v9 + 2);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v138 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *))(16
                                                                                    * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)
                                                                                    + 0xB0))(v9, v10);
        }
        else
        {
          v138 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
          if (!v138)
            v138 = *((_QWORD *)v9 + 2);
        }
        if (*(_DWORD *)(v133 + 80))
        {
          v142 = *(_DWORD *)(v133 + 80);
          if ((v142 & 0x27) != 0 && (v142 & 0x20) == 0)
            JSC::VMTraps::handleTraps(v164, 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v133 + 16))
            goto LABEL_66;
        }
      }
      if ((v138 & 0xFFFE000000000002) == 0)
      {
        v9 = (JSC::Structure *)v138;
        if (*(unsigned __int8 *)(v138 + 5) > 0x16u)
          continue;
      }
      goto LABEL_66;
    }
  }
LABEL_101:
  v62 = *((_QWORD *)v10 + 7);
  v162 = (JSC::VMTraps *)(v62 + 64);
  v30 = 10;
  while (1)
  {
    v63 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v18 + 6) & 8) == 0)
      break;
    v159 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) + 0x68))(v18, v10, v13, &v165);
    if (*(_DWORD *)(v62 + 80))
    {
      v94 = *(_DWORD *)(v62 + 80);
      if ((v94 & 0x27) != 0 && (v94 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v162, 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v62 + 16))
        goto LABEL_66;
    }
    if ((v159 & 1) != 0)
      goto LABEL_45;
    if (BYTE2(v170[1]) == 3)
    {
      if (BYTE4(v170[1]))
        goto LABEL_66;
      v70 = *(unsigned __int8 *)(v18 + 5);
      if (v70 == 61)
        goto LABEL_108;
    }
    else
    {
      v70 = *(unsigned __int8 *)(v18 + 5);
      if (v70 == 61)
      {
        if (BYTE2(v170[1]) == 1)
          goto LABEL_66;
        goto LABEL_108;
      }
    }
    if (!v13)
      goto LABEL_108;
    if ((v70 - 50) < 0xFFFFFFF5)
      goto LABEL_108;
    v71 = *(_DWORD *)(v13 + 16);
    if ((v71 & 0x20) != 0)
      goto LABEL_108;
    v72 = *(unsigned int *)(v13 + 4);
    if (!(_DWORD)v72)
      goto LABEL_108;
    v73 = *(unsigned __int8 **)(v13 + 8);
    if ((v71 & 4) != 0)
    {
      v74 = *v73;
      if ((_DWORD)v72 == 1)
      {
LABEL_135:
        if ((v74 - 48) < 0xA)
          goto LABEL_66;
        goto LABEL_108;
      }
      if (v74 == 45)
      {
        v74 = v73[1];
        goto LABEL_139;
      }
      if ((v74 - 48) < 0xA)
        goto LABEL_150;
      if ((_DWORD)v72 == 8)
        goto LABEL_149;
    }
    else
    {
      v74 = *(unsigned __int16 *)v73;
      if ((_DWORD)v72 == 1)
        goto LABEL_135;
      if (v74 == 45)
      {
        v74 = *((unsigned __int16 *)v73 + 1);
LABEL_139:
        if ((v74 - 48) < 0xA)
        {
          if ((_DWORD)v72 == 2)
            goto LABEL_66;
          goto LABEL_150;
        }
        if ((_DWORD)v72 != 9)
          goto LABEL_108;
LABEL_149:
        if (v74 != 73)
          goto LABEL_108;
        goto LABEL_150;
      }
      if ((v74 - 48) < 0xA || (_DWORD)v72 == 8 && v74 == 73)
        goto LABEL_150;
    }
    if ((_DWORD)v72 != 3 || v74 != 78)
      goto LABEL_108;
LABEL_150:
    v158 = v158 & 0xFFFFFF0000000000 | v72 | ((unint64_t)((v71 >> 2) & 1) << 32);
    JSC::jsToNumber(v73, v158);
    v76 = (v75 >> 52) & 0x7FF;
    if ((_DWORD)v76 == 2047)
    {
      if ((v75 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", sizeof(__s));
        v77 = v179;
      }
      else
      {
        if ((v75 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v83 = &__s[1];
        }
        else
        {
          v83 = __s;
        }
        *(_QWORD *)v83 = 0x7974696E69666E49;
        v77 = v83 + 8;
      }
      goto LABEL_164;
    }
    v78 = v75 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v75 & 0x8000000000000000) != 0 && v78)
    {
      __s[0] = 45;
      v79 = &__s[1];
    }
    else
    {
      if (!v78)
      {
        __s[0] = 48;
        v77 = &__s[1];
        goto LABEL_164;
      }
      v79 = __s;
    }
    v160 = (uint64_t)v79;
    v80 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v75 & 0x800FFFFFFFFFFFFFLL, v76);
    v77 = WTF::dragonbox::detail::to_shortest(v80, v81, v160, v82);
LABEL_164:
    *v77 = 0;
    v161 = strlen(__s);
    memcpy(&__dst, __s, v161);
    *((_BYTE *)&__dst + v161) = 0;
    v84 = *(unsigned int *)(v13 + 4);
    v85 = *(unsigned __int8 **)(v13 + 8);
    if ((*(_BYTE *)(v13 + 16) & 4) != 0)
    {
      if ((_DWORD)v84)
      {
        p_dst = &__dst;
        v91 = *(unsigned int *)(v13 + 4);
        do
        {
          v93 = *(unsigned __int8 *)p_dst;
          p_dst = (JSC::VM **)((char *)p_dst + 1);
          v92 = v93;
          if (!v93 || *v85 != v92)
            goto LABEL_108;
          ++v85;
        }
        while (--v91);
      }
    }
    else if ((_DWORD)v84)
    {
      v86 = &__dst;
      v87 = *(unsigned int *)(v13 + 4);
      do
      {
        v89 = *(unsigned __int8 *)v86;
        v86 = (JSC::VM **)((char *)v86 + 1);
        v88 = v89;
        if (!v89 || *(unsigned __int16 *)v85 != v88)
          goto LABEL_108;
        v85 += 2;
      }
      while (--v87);
    }
    if (!*((_BYTE *)&__dst + v84))
      goto LABEL_66;
LABEL_108:
    if ((*(_WORD *)(v63 + 12) & 0x800) == 0)
    {
      v66 = *(_DWORD *)v18;
LABEL_110:
      v67 = *(_QWORD *)(16 * (v66 & 0xFFFFFFFE) + 0x30);
      if (!v67)
        v67 = *(_QWORD *)(v18 + 16);
      goto LABEL_112;
    }
    v66 = *(_DWORD *)v18;
    if (BYTE2(v170[1]) == 3)
      goto LABEL_110;
    v68 = 16 * (v66 & 0xFFFFFFFE);
    if ((*(_WORD *)(v68 + 12) & 0x800) != 0)
    {
      v67 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v68 + 76) + 0xB0))(v18, v10);
    }
    else
    {
      v67 = *(_QWORD *)(v68 + 48);
      if (!v67)
        v67 = *(_QWORD *)(v18 + 16);
    }
    if (*(_DWORD *)(v62 + 80))
    {
      v69 = *(_DWORD *)(v62 + 80);
      if ((v69 & 0x27) != 0 && (v69 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v162, 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v62 + 16))
        goto LABEL_66;
    }
LABEL_112:
    if ((v67 & 0xFFFE000000000002) == 0)
    {
      v18 = v67;
      if (*(unsigned __int8 *)(v67 + 5) > 0x16u)
        continue;
    }
    goto LABEL_66;
  }
  if (!(_DWORD)v17
    || (v17 & ~*(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE)), (JSC::VM *)v62, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v64)|| (__dst = (JSC::VM *)v13, v65 = JSC::PropertyTable::get(v64, (uint64_t *)&__dst), a6 = v65, (_DWORD)v65 == -1))
  {
    if ((*(_BYTE *)(v18 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v18, (JSC::VM *)v62, v13, (uint64_t)&v165) & 1) != 0)
    {
      goto LABEL_45;
    }
    goto LABEL_108;
  }
  a5 = HIDWORD(v65);
  if ((int)v65 <= 63)
  {
    v95 = v18 + 16;
    v96 = v65 << 32;
  }
  else
  {
    v95 = *(_QWORD *)(v18 + 8) - 8;
    v96 = 0x3F00000000 - (v65 << 32);
  }
  a4 = *(_QWORD *)(v95 + (v96 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_203:
    v165 = (uint64_t (*)(unint64_t))a4;
    v169 = (_DWORD *)v18;
    goto LABEL_34;
  }
  v97 = *(unsigned __int8 *)(a4 + 5);
  if (v97 == 5)
  {
    v36 = (unsigned int *)v18;
    v37 = v62;
    goto LABEL_44;
  }
  if (v97 != 6)
    goto LABEL_203;
  v48 = *(_DWORD *)(v63 + 16) & 3;
  v98 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v165 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v166 = v98;
    LODWORD(v167) = HIDWORD(v65);
    v169 = (_DWORD *)v18;
    goto LABEL_93;
  }
  v51 = *(int8x16_t ***)(a4 + 24);
  v50 = *(_QWORD *)(a4 + 32);
  v165 = *(uint64_t (**)(unint64_t))(a4 + 8);
  v166 = v98;
  LODWORD(v167) = HIDWORD(v65);
  v169 = (_DWORD *)v18;
LABEL_72:
  BYTE1(v170[1]) = 3;
  if (v48 != 2)
    LOBYTE(v170[1]) = 1;
  BYTE3(v170[1]) = 1;
  v173 = v51;
  v174 = v50;
LABEL_45:
  if (BYTE1(v170[1]) == 1)
  {
    v30 = (uint64_t)v165;
  }
  else
  {
    if (BYTE1(v170[1]) == 2)
    {
      v38 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v165, v10, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v39 = (unint64_t)v169;
      v40 = *(_QWORD *)(16 * (*v169 & 0xFFFFFFFE) + 0x28);
      if ((v167 & 0x20) != 0)
        v39 = (unint64_t)v168;
      if (BYTE3(v170[1]) != 1)
        goto LABEL_64;
      if ((v39 & 0xFFFE000000000002) != 0)
        goto LABEL_213;
      v41 = *(unsigned int *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x4C);
      v42 = *(_DWORD *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x4C) != 0;
      v43 = 16 * v41;
      if ((_DWORD)v41)
        v44 = v173 == (int8x16_t **)v43;
      else
        v44 = 1;
      if (!v44)
      {
        do
        {
          v43 = *(_QWORD *)(v43 + 16);
          v42 = v43 != 0;
        }
        while ((int8x16_t **)v43 != v173 && v43 != 0);
      }
      if (!v42)
      {
LABEL_213:
        __dst = (JSC::VM *)*((_QWORD *)v10 + 7);
        v38 = JSC::throwDOMAttributeGetterTypeError(v40, &__dst, v173, (WTF::StringImpl *)v13);
      }
      else
      {
LABEL_64:
        v38 = v165(v40);
      }
    }
    v30 = v38;
  }
LABEL_66:
  if (v172)
  {
    v46 = *(_DWORD *)(v171 + 4);
    if (!v46)
    {
      __break(0xC471u);
      JUMPOUT(0x198772170);
    }
    *(_DWORD *)(v171 + 4) = v46 - 1;
  }
  return v30;
}

uint64_t operationGetByIdWithThisGeneric(JSC::JSGlobalObject *a1, unint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::Structure *v9;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  JSC::VM *v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  JSC::Structure *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _WORD *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unsigned __int16 *v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  BOOL v46;
  int v48;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int8x16_t **v53;
  int v54;
  _BYTE *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  unsigned __int8 *v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  size_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  unsigned __int8 *v87;
  JSC::VM **v88;
  uint64_t v89;
  int v90;
  int v91;
  JSC::VM **p_dst;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  char v113;
  uint64_t v114;
  unsigned __int8 *v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int *v118;
  uint64_t v119;
  uint64_t Index;
  int v121;
  char v122;
  int v123;
  _WORD *v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int v128;
  unsigned __int16 *v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  char v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  char v145;
  int v146;
  unint64_t v147;
  unint64_t v148;
  char v149;
  uint64_t v150;
  unsigned __int8 *v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  _DWORD *v157;
  int v158;
  uint64_t v159;
  unsigned __int8 *v160;
  unsigned int v161;
  unint64_t v162;
  char v163;
  uint64_t v164;
  int v165;
  JSC::VMTraps *v166;
  JSC::VMTraps *v167;
  JSC::VMTraps *v168;
  uint64_t (*v169)(unint64_t);
  uint64_t v170;
  unint64_t v171;
  _DWORD *v172;
  _DWORD *v173;
  _QWORD v174[2];
  uint64_t v175;
  char v176;
  int8x16_t **v177;
  uint64_t v178;
  unint64_t v179;
  JSC::VM *__dst;
  char v181;
  char __s[3];
  _BYTE v183[39];
  uint64_t vars0;

  v9 = (JSC::Structure *)this;
  *(_QWORD *)&v183[23] = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v11 + 40) = vars0;
  v178 = 0;
  v179 = this;
  a9.i64[0] = 0xFFFFFFFF00000000;
  v171 = 0xFFFFFFFF00000000;
  LOBYTE(v175) = 0;
  v176 = 0;
  v177 = 0;
  v173 = 0;
  memset(v174, 0, 13);
  v172 = (_DWORD *)a3;
  if (a4)
  {
    if ((a4 & 1) != 0)
      v12 = a4 & 0xFFFFFFFFFFFFFFFELL;
    else
      v12 = *(_QWORD *)(a4 + 8);
  }
  else
  {
    v12 = 0;
  }
  if ((this & 0xFFFE000000000002) == 0)
  {
    v13 = *(unsigned __int8 *)(this + 5);
    v14 = (JSC::VM *)v11;
    if (v13 > 0x16)
      goto LABEL_6;
    if (v13 == 2)
    {
      if (*(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1768) == v12)
      {
        v117 = *(_QWORD *)(this + 8);
        if ((v117 & 1) != 0)
          v118 = (unsigned int *)(this + 16);
        else
          v118 = (unsigned int *)(v117 + 4);
        v119 = *v118;
        if ((v119 & 0x80000000) != 0)
          Index = COERCE__INT64((double)v119) + 0x2000000000000;
        else
          Index = v119 | 0xFFFE000000000000;
        v121 = 14;
        goto LABEL_295;
      }
      if (!v12 || (v123 = *(_DWORD *)(v12 + 16), (v123 & 0x20) != 0))
      {
LABEL_317:
        v122 = 0;
LABEL_318:
        if (*(_DWORD *)(v11 + 80))
        {
          v153 = *(_DWORD *)(v11 + 80);
          if ((v153 & 0x27) != 0 && (v153 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v11 + 16))
            goto LABEL_56;
        }
        if ((v122 & 1) != 0)
          goto LABEL_46;
        goto LABEL_320;
      }
      v124 = *(_WORD **)(v12 + 8);
      v125 = *(unsigned int *)(v12 + 4);
      if ((v123 & 4) == 0)
      {
        if ((_DWORD)v125)
        {
          v126 = (unsigned __int16)*v124 - 48;
          if (v126 <= 9 && (*v124 != 48 || v125 <= 1))
          {
            v129 = v124 + 1;
            v130 = v125 - 1;
            while (v130)
            {
              if (v126 > 0x19999999)
                goto LABEL_301;
              v131 = *v129 - 48;
              if (v131 > 9)
                goto LABEL_301;
              v127 = 0;
              LOBYTE(v125) = 0;
              v128 = 0;
              v35 = __CFADD__(v131, 10 * v126);
              v126 = v131 + 10 * v126;
              ++v129;
              --v130;
              if (v35)
                goto LABEL_316;
            }
            v128 = v126 & 0xFFFFFF00;
            v127 = 0x100000000;
            if (v126 == -1)
            {
              v127 = 0;
              LOBYTE(v125) = 0;
            }
            else
            {
              LOBYTE(v125) = v126;
            }
            if (v126 == -1)
              v128 = 0;
LABEL_316:
            v132 = v125;
            if ((v127 & 0x100000000) == 0)
              goto LABEL_317;
            goto LABEL_406;
          }
LABEL_301:
          v127 = 0;
          LOBYTE(v125) = 0;
        }
        else
        {
          v127 = 0;
        }
        v128 = 0;
        goto LABEL_316;
      }
      if ((_DWORD)v125)
      {
        v154 = *(unsigned __int8 *)v124 - 48;
        if (v154 <= 9 && (v125 < 2 || *(_BYTE *)v124 != 48))
        {
          v159 = v125 - 1;
          v160 = (unsigned __int8 *)v124 + 1;
          while (v159)
          {
            if (v154 > 0x19999999)
              goto LABEL_403;
            v161 = *v160 - 48;
            if (v161 > 9)
              goto LABEL_403;
            v132 = 0;
            LOBYTE(v125) = 0;
            v155 = 0;
            v35 = __CFADD__(v161, 10 * v154);
            v154 = v161 + 10 * v154;
            --v159;
            ++v160;
            if (v35)
              goto LABEL_405;
          }
          if (v154 == -1)
            v132 = 0;
          else
            v132 = v154 & 0xFFFFFF00;
          if (v154 == -1)
            LOBYTE(v125) = 0;
          else
            LOBYTE(v125) = v154;
          if (v154 == -1)
            v155 = 0;
          else
            v155 = 0x100000000;
LABEL_405:
          v128 = v125;
          if ((v155 & 0x100000000) == 0)
            goto LABEL_317;
LABEL_406:
          a3 = v128 | v132;
          v156 = *(_QWORD *)(this + 8);
          if ((v156 & 1) != 0)
            v157 = (_DWORD *)(this + 16);
          else
            v157 = (_DWORD *)(v156 + 4);
          if (*v157 > a3)
          {
            Index = JSC::JSString::getIndex((JSC::JSString *)this, a1, a3, a4, a5, a6, a7, a8, a9);
            if (!*(_DWORD *)(v11 + 80))
              goto LABEL_411;
            v158 = *(_DWORD *)(v11 + 80);
            if ((v158 & 0x27) != 0 && (v158 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (!*(_QWORD *)(v11 + 16))
            {
LABEL_411:
              v121 = 10;
LABEL_295:
              v169 = (uint64_t (*)(unint64_t))Index;
              LODWORD(v171) = v121;
              v173 = 0;
              v122 = 1;
              BYTE1(v174[1]) = 1;
              goto LABEL_318;
            }
          }
          goto LABEL_317;
        }
LABEL_403:
        v132 = 0;
        LOBYTE(v125) = 0;
      }
      else
      {
        v132 = 0;
      }
      v155 = 0;
      goto LABEL_405;
    }
  }
LABEL_320:
  v133 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v179, (unint64_t)a1);
  if (!v133)
    goto LABEL_56;
  v9 = (JSC::Structure *)v133;
  v14 = (JSC::VM *)*((_QWORD *)a1 + 7);
LABEL_6:
  v15 = (char *)v9 + 6;
  v16 = v12 >> 4;
  v17 = (uint64_t)v9;
  if ((*((_BYTE *)v9 + 6) & 8) == 0)
  {
    v18 = v9;
    while (1)
    {
      v19 = *(_DWORD *)v18 & 0xFFFFFFFE;
      v20 = 16 * v19;
      if ((_DWORD)v16)
      {
        if ((v16 & ~*(_DWORD *)(16 * v19 + 0x20)) == 0)
        {
          JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v20, v14, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
          if (v21)
          {
            __dst = (JSC::VM *)v12;
            v22 = JSC::PropertyTable::get(v21, (uint64_t *)&__dst);
            a6 = v22;
            if ((_DWORD)v22 != -1)
              break;
          }
        }
      }
      if ((*v15 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v18, v14, v12, (uint64_t)&v169) & 1) != 0)
      {
        goto LABEL_46;
      }
      v17 = *(_QWORD *)(v20 + 48);
      if (!v17)
        v17 = *((_QWORD *)v18 + 2);
      if ((v17 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v17 + 5) < 0x17u)
      {
        if (!v12)
          goto LABEL_56;
        v25 = *(_DWORD *)(v12 + 16);
        if ((v25 & 0x20) != 0)
          goto LABEL_56;
        v26 = *(_WORD **)(v12 + 8);
        v27 = *(unsigned int *)(v12 + 4);
        if ((v25 & 4) == 0)
        {
          if ((_DWORD)v27)
          {
            v28 = (unsigned __int16)*v26 - 48;
            if (v28 <= 9 && (*v26 != 48 || v27 <= 1))
            {
              v32 = v26 + 1;
              v33 = v27 - 1;
              while (v33)
              {
                if (v28 > 0x19999999)
                  goto LABEL_28;
                v34 = *v32 - 48;
                if (v34 > 9)
                  goto LABEL_28;
                v29 = 0;
                LOBYTE(v27) = 0;
                v30 = 0;
                v35 = __CFADD__(v34, 10 * v28);
                v28 = v34 + 10 * v28;
                ++v32;
                --v33;
                if (v35)
                  goto LABEL_55;
              }
              v30 = v28 & 0xFFFFFF00;
              v29 = 0x100000000;
              if (v28 == -1)
              {
                v29 = 0;
                LOBYTE(v27) = 0;
              }
              else
              {
                LOBYTE(v27) = v28;
              }
              if (v28 == -1)
                v30 = 0;
LABEL_55:
              v40 = v27;
              if ((v29 & 0x100000000) == 0)
              {
LABEL_56:
                v38 = 10;
                goto LABEL_74;
              }
LABEL_229:
              v103 = v30 | v40;
              v104 = *((_QWORD *)a1 + 7);
              v167 = (JSC::VMTraps *)(v104 + 64);
              v38 = 10;
              while (2)
              {
                v105 = 16 * (*(_DWORD *)v9 & 0xFFFFFFFE);
                v106 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v105 + 0x4C) + 0x70))(v9, a1, v103, &v169);
                if (*(_DWORD *)(v104 + 80))
                {
                  v109 = *(_DWORD *)(v104 + 80);
                  if ((v109 & 0x27) != 0 && (v109 & 0x20) == 0)
                    JSC::VMTraps::handleTraps(v167, 7u, a3, a4, a5, a6, a7, a8);
                  if (*(_QWORD *)(v104 + 16))
                    goto LABEL_74;
                }
                if ((v106 & 1) != 0)
                  goto LABEL_46;
                if (BYTE2(v174[1]) == 3)
                {
                  if (BYTE4(v174[1]))
                    goto LABEL_74;
                  v107 = *((unsigned __int8 *)v9 + 5);
                  if (v107 != 61)
                    goto LABEL_234;
                }
                else
                {
                  v107 = *((unsigned __int8 *)v9 + 5);
                  if (v107 == 61)
                  {
                    if (BYTE2(v174[1]) == 1)
                      goto LABEL_74;
                  }
                  else
                  {
LABEL_234:
                    if ((v107 - 39) <= 0xA)
                    {
                      if ((*((_BYTE *)v9 + 40) & 7u) > 2)
                      {
                        LOBYTE(__dst) = 0;
                        v181 = 0;
                        v112 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v9, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                        v111 = v113 ? v112 : 0;
                      }
                      else
                      {
                        v111 = *((_QWORD *)v9 + 3);
                      }
                      if (v111 <= v103)
                        goto LABEL_74;
                    }
                  }
                }
                if ((*(_WORD *)(v105 + 12) & 0x800) == 0 || BYTE2(v174[1]) == 3)
                {
                  v108 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
                  if (!v108)
                    v108 = *((_QWORD *)v9 + 2);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v108 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *))(16
                                                                                              * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)
                                                                                              + 0xB0))(v9, a1);
                  }
                  else
                  {
                    v108 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
                    if (!v108)
                      v108 = *((_QWORD *)v9 + 2);
                  }
                  if (*(_DWORD *)(v104 + 80))
                  {
                    v110 = *(_DWORD *)(v104 + 80);
                    if ((v110 & 0x27) != 0 && (v110 & 0x20) == 0)
                      JSC::VMTraps::handleTraps(v167, 7u, a3, a4, a5, a6, a7, a8);
                    if (*(_QWORD *)(v104 + 16))
                      goto LABEL_74;
                  }
                }
                if ((v108 & 0xFFFE000000000002) != 0)
                  goto LABEL_74;
                v9 = (JSC::Structure *)v108;
                if (*(unsigned __int8 *)(v108 + 5) <= 0x16u)
                  goto LABEL_74;
                continue;
              }
            }
LABEL_28:
            v29 = 0;
            LOBYTE(v27) = 0;
          }
          else
          {
            v29 = 0;
          }
          v30 = 0;
          goto LABEL_55;
        }
        if ((_DWORD)v27)
        {
          v101 = *(unsigned __int8 *)v26 - 48;
          if (v101 <= 9 && (v27 < 2 || *(_BYTE *)v26 != 48))
          {
            v114 = v27 - 1;
            v115 = (unsigned __int8 *)v26 + 1;
            while (v114)
            {
              if (v101 > 0x19999999)
                goto LABEL_226;
              v116 = *v115 - 48;
              if (v116 > 9)
                goto LABEL_226;
              v40 = 0;
              LOBYTE(v27) = 0;
              v102 = 0;
              v35 = __CFADD__(v116, 10 * v101);
              v101 = v116 + 10 * v101;
              --v114;
              ++v115;
              if (v35)
                goto LABEL_228;
            }
            if (v101 == -1)
              v40 = 0;
            else
              v40 = v101 & 0xFFFFFF00;
            if (v101 == -1)
              LOBYTE(v27) = 0;
            else
              LOBYTE(v27) = v101;
            if (v101 == -1)
              v102 = 0;
            else
              v102 = 0x100000000;
LABEL_228:
            v30 = v27;
            if ((v102 & 0x100000000) == 0)
              goto LABEL_56;
            goto LABEL_229;
          }
LABEL_226:
          v40 = 0;
          LOBYTE(v27) = 0;
        }
        else
        {
          v40 = 0;
        }
        v102 = 0;
        goto LABEL_228;
      }
      v15 = (_BYTE *)(v17 + 6);
      v18 = (JSC::Structure *)v17;
      if ((*(_BYTE *)(v17 + 6) & 8) != 0)
        goto LABEL_84;
    }
    a5 = HIDWORD(v22);
    if ((int)v22 <= 63)
    {
      v23 = (uint64_t)v18 + 16;
      v24 = v22 << 32;
    }
    else
    {
      v23 = *((_QWORD *)v18 + 1) - 8;
      v24 = 0x3F00000000 - (v22 << 32);
    }
    a4 = *(_QWORD *)(v23 + (v24 >> 29));
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_34;
    v31 = *(unsigned __int8 *)(a4 + 5);
    if (v31 != 5)
    {
      if (v31 != 6)
      {
LABEL_34:
        v169 = (uint64_t (*)(unint64_t))a4;
        v173 = v18;
LABEL_35:
        v171 = __PAIR64__(a6, a5);
        LOWORD(v174[1]) = 257;
        goto LABEL_46;
      }
      v50 = *(_DWORD *)(v20 + 16) & 3;
      v51 = *(_QWORD *)(a4 + 16);
      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                               + 0x4C)))
      {
        v53 = *(int8x16_t ***)(a4 + 24);
        v52 = *(_QWORD *)(a4 + 32);
        v169 = *(uint64_t (**)(unint64_t))(a4 + 8);
        v170 = v51;
        LODWORD(v171) = HIDWORD(v22);
        v173 = v18;
        goto LABEL_80;
      }
      v169 = *(uint64_t (**)(unint64_t))(a4 + 8);
      v170 = v51;
      LODWORD(v171) = HIDWORD(v22);
      v173 = v18;
LABEL_101:
      BYTE1(v174[1]) = 3;
      if (v50 != 2)
        LOBYTE(v174[1]) = 1;
      goto LABEL_46;
    }
    v36 = (unsigned int *)v18;
    v37 = (uint64_t)v14;
LABEL_45:
    JSC::JSObject::fillGetterPropertySlot(v36, v37, (uint64_t)&v169, a4, a5, a6);
    goto LABEL_46;
  }
LABEL_84:
  if (!v12)
    goto LABEL_109;
  v54 = *(_DWORD *)(v12 + 16);
  if ((v54 & 0x20) != 0)
    goto LABEL_109;
  v55 = *(_BYTE **)(v12 + 8);
  v56 = *(unsigned int *)(v12 + 4);
  if ((v54 & 4) != 0)
  {
    if ((_DWORD)v56)
    {
      v134 = *v55 - 48;
      if (v134 <= 9 && (v56 < 2 || *v55 != 48))
      {
        v150 = v56 - 1;
        v151 = v55 + 1;
        while (v150)
        {
          if (v134 > 0x19999999)
            goto LABEL_324;
          v152 = *v151 - 48;
          if (v152 > 9)
            goto LABEL_324;
          v63 = 0;
          LOBYTE(v56) = 0;
          v135 = 0;
          v35 = __CFADD__(v152, 10 * v134);
          v134 = v152 + 10 * v134;
          --v150;
          ++v151;
          if (v35)
            goto LABEL_326;
        }
        if (v134 == -1)
          v63 = 0;
        else
          v63 = v134 & 0xFFFFFF00;
        if (v134 == -1)
          LOBYTE(v56) = 0;
        else
          LOBYTE(v56) = v134;
        if (v134 == -1)
          v135 = 0;
        else
          v135 = 0x100000000;
LABEL_326:
        v59 = v56;
        if ((v135 & 0x100000000) == 0)
          goto LABEL_109;
        goto LABEL_327;
      }
LABEL_324:
      v63 = 0;
      LOBYTE(v56) = 0;
    }
    else
    {
      v63 = 0;
    }
    v135 = 0;
    goto LABEL_326;
  }
  if (!(_DWORD)v56)
  {
    v58 = 0;
    goto LABEL_90;
  }
  v57 = *(unsigned __int16 *)v55 - 48;
  if (v57 > 9 || *(_WORD *)v55 == 48 && v56 > 1)
  {
LABEL_89:
    v58 = 0;
    LOBYTE(v56) = 0;
LABEL_90:
    v59 = 0;
    goto LABEL_108;
  }
  v60 = (unsigned __int16 *)(v55 + 2);
  v61 = v56 - 1;
  while (v61)
  {
    if (v57 > 0x19999999)
      goto LABEL_89;
    v62 = *v60 - 48;
    if (v62 > 9)
      goto LABEL_89;
    v58 = 0;
    LOBYTE(v56) = 0;
    v59 = 0;
    v35 = __CFADD__(v62, 10 * v57);
    v57 = v62 + 10 * v57;
    ++v60;
    --v61;
    if (v35)
      goto LABEL_108;
  }
  v59 = v57 & 0xFFFFFF00;
  v58 = 0x100000000;
  if (v57 == -1)
  {
    v58 = 0;
    LOBYTE(v56) = 0;
  }
  else
  {
    LOBYTE(v56) = v57;
  }
  if (v57 == -1)
    v59 = 0;
LABEL_108:
  v63 = v56;
  if ((v58 & 0x100000000) != 0)
  {
LABEL_327:
    v136 = v59 | v63;
    v137 = *((_QWORD *)a1 + 7);
    v168 = (JSC::VMTraps *)(v137 + 64);
    v38 = 10;
    while (1)
    {
      v138 = 16 * (*(_DWORD *)v9 & 0xFFFFFFFE);
      v139 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v138 + 0x4C) + 0x70))(v9, a1, v136, &v169);
      v140 = v139;
      if (*(_DWORD *)(v137 + 80))
      {
        v143 = *(_DWORD *)(v137 + 80);
        if ((v143 & 0x27) != 0 && (v143 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v168, 7u, a3, a4, a5, a6, a7, a8);
        v144 = *(_QWORD *)(v137 + 16);
        if (v144)
          v145 = 1;
        else
          v145 = v140;
        if ((v145 & 1) != 0)
        {
          if (!v144)
            goto LABEL_46;
          goto LABEL_56;
        }
      }
      else if ((v139 & 1) != 0)
      {
        goto LABEL_46;
      }
      if (BYTE2(v174[1]) == 3)
      {
        if (BYTE4(v174[1]))
          goto LABEL_74;
        v141 = *((unsigned __int8 *)v9 + 5);
        if (v141 == 61)
          goto LABEL_333;
      }
      else
      {
        v141 = *((unsigned __int8 *)v9 + 5);
        if (v141 == 61)
        {
          if (BYTE2(v174[1]) == 1)
            goto LABEL_74;
          goto LABEL_333;
        }
      }
      if ((v141 - 39) <= 0xA)
      {
        if ((*((_BYTE *)v9 + 40) & 7u) > 2)
        {
          LOBYTE(__dst) = 0;
          v181 = 0;
          v148 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v9, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
          v147 = v149 ? v148 : 0;
        }
        else
        {
          v147 = *((_QWORD *)v9 + 3);
        }
        if (v147 <= v136)
          goto LABEL_74;
      }
LABEL_333:
      if ((*(_WORD *)(v138 + 12) & 0x800) == 0 || BYTE2(v174[1]) == 3)
      {
        v142 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
        if (!v142)
          v142 = *((_QWORD *)v9 + 2);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v142 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *))(16
                                                                                    * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)
                                                                                    + 0xB0))(v9, a1);
        }
        else
        {
          v142 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
          if (!v142)
            v142 = *((_QWORD *)v9 + 2);
        }
        if (*(_DWORD *)(v137 + 80))
        {
          v146 = *(_DWORD *)(v137 + 80);
          if ((v146 & 0x27) != 0 && (v146 & 0x20) == 0)
            JSC::VMTraps::handleTraps(v168, 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v137 + 16))
            goto LABEL_74;
        }
      }
      if ((v142 & 0xFFFE000000000002) == 0)
      {
        v9 = (JSC::Structure *)v142;
        if (*(unsigned __int8 *)(v142 + 5) > 0x16u)
          continue;
      }
      goto LABEL_74;
    }
  }
LABEL_109:
  v64 = *((_QWORD *)a1 + 7);
  v166 = (JSC::VMTraps *)(v64 + 64);
  v38 = 10;
  while (1)
  {
    v65 = 16 * (*(_DWORD *)v17 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v17 + 6) & 8) == 0)
      break;
    v163 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) + 0x68))(v17, a1, v12, &v169);
    if (*(_DWORD *)(v64 + 80))
    {
      v96 = *(_DWORD *)(v64 + 80);
      if ((v96 & 0x27) != 0 && (v96 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v166, 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v64 + 16))
        goto LABEL_74;
    }
    if ((v163 & 1) != 0)
      goto LABEL_46;
    if (BYTE2(v174[1]) == 3)
    {
      if (BYTE4(v174[1]))
        goto LABEL_74;
      v72 = *(unsigned __int8 *)(v17 + 5);
      if (v72 == 61)
        goto LABEL_116;
    }
    else
    {
      v72 = *(unsigned __int8 *)(v17 + 5);
      if (v72 == 61)
      {
        if (BYTE2(v174[1]) == 1)
          goto LABEL_74;
        goto LABEL_116;
      }
    }
    if (!v12)
      goto LABEL_116;
    if ((v72 - 50) < 0xFFFFFFF5)
      goto LABEL_116;
    v73 = *(_DWORD *)(v12 + 16);
    if ((v73 & 0x20) != 0)
      goto LABEL_116;
    v74 = *(unsigned int *)(v12 + 4);
    if (!(_DWORD)v74)
      goto LABEL_116;
    v75 = *(unsigned __int8 **)(v12 + 8);
    if ((v73 & 4) != 0)
    {
      v76 = *v75;
      if ((_DWORD)v74 == 1)
      {
LABEL_143:
        if ((v76 - 48) < 0xA)
          goto LABEL_74;
        goto LABEL_116;
      }
      if (v76 == 45)
      {
        v76 = v75[1];
        goto LABEL_147;
      }
      if ((v76 - 48) < 0xA)
        goto LABEL_158;
      if ((_DWORD)v74 == 8)
        goto LABEL_157;
    }
    else
    {
      v76 = *(unsigned __int16 *)v75;
      if ((_DWORD)v74 == 1)
        goto LABEL_143;
      if (v76 == 45)
      {
        v76 = *((unsigned __int16 *)v75 + 1);
LABEL_147:
        if ((v76 - 48) < 0xA)
        {
          if ((_DWORD)v74 == 2)
            goto LABEL_74;
          goto LABEL_158;
        }
        if ((_DWORD)v74 != 9)
          goto LABEL_116;
LABEL_157:
        if (v76 != 73)
          goto LABEL_116;
        goto LABEL_158;
      }
      if ((v76 - 48) < 0xA || (_DWORD)v74 == 8 && v76 == 73)
        goto LABEL_158;
    }
    if ((_DWORD)v74 != 3 || v76 != 78)
      goto LABEL_116;
LABEL_158:
    v162 = v162 & 0xFFFFFF0000000000 | v74 | ((unint64_t)((v73 >> 2) & 1) << 32);
    JSC::jsToNumber(v75, v162);
    v78 = (v77 >> 52) & 0x7FF;
    if ((_DWORD)v78 == 2047)
    {
      if ((v77 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", sizeof(__s));
        v79 = v183;
      }
      else
      {
        if ((v77 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v85 = &__s[1];
        }
        else
        {
          v85 = __s;
        }
        *(_QWORD *)v85 = 0x7974696E69666E49;
        v79 = v85 + 8;
      }
      goto LABEL_172;
    }
    v80 = v77 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v77 & 0x8000000000000000) != 0 && v80)
    {
      __s[0] = 45;
      v81 = &__s[1];
    }
    else
    {
      if (!v80)
      {
        __s[0] = 48;
        v79 = &__s[1];
        goto LABEL_172;
      }
      v81 = __s;
    }
    v164 = (uint64_t)v81;
    v82 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v77 & 0x800FFFFFFFFFFFFFLL, v78);
    v79 = WTF::dragonbox::detail::to_shortest(v82, v83, v164, v84);
LABEL_172:
    *v79 = 0;
    v165 = strlen(__s);
    memcpy(&__dst, __s, v165);
    *((_BYTE *)&__dst + v165) = 0;
    v86 = *(unsigned int *)(v12 + 4);
    v87 = *(unsigned __int8 **)(v12 + 8);
    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      if ((_DWORD)v86)
      {
        p_dst = &__dst;
        v93 = *(unsigned int *)(v12 + 4);
        do
        {
          v95 = *(unsigned __int8 *)p_dst;
          p_dst = (JSC::VM **)((char *)p_dst + 1);
          v94 = v95;
          if (!v95 || *v87 != v94)
            goto LABEL_116;
          ++v87;
        }
        while (--v93);
      }
    }
    else if ((_DWORD)v86)
    {
      v88 = &__dst;
      v89 = *(unsigned int *)(v12 + 4);
      do
      {
        v91 = *(unsigned __int8 *)v88;
        v88 = (JSC::VM **)((char *)v88 + 1);
        v90 = v91;
        if (!v91 || *(unsigned __int16 *)v87 != v90)
          goto LABEL_116;
        v87 += 2;
      }
      while (--v89);
    }
    if (!*((_BYTE *)&__dst + v86))
      goto LABEL_74;
LABEL_116:
    if ((*(_WORD *)(v65 + 12) & 0x800) == 0)
    {
      v68 = *(_DWORD *)v17;
LABEL_118:
      v69 = *(_QWORD *)(16 * (v68 & 0xFFFFFFFE) + 0x30);
      if (!v69)
        v69 = *(_QWORD *)(v17 + 16);
      goto LABEL_120;
    }
    v68 = *(_DWORD *)v17;
    if (BYTE2(v174[1]) == 3)
      goto LABEL_118;
    v70 = 16 * (v68 & 0xFFFFFFFE);
    if ((*(_WORD *)(v70 + 12) & 0x800) != 0)
    {
      v69 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v70 + 76) + 0xB0))(v17, a1);
    }
    else
    {
      v69 = *(_QWORD *)(v70 + 48);
      if (!v69)
        v69 = *(_QWORD *)(v17 + 16);
    }
    if (*(_DWORD *)(v64 + 80))
    {
      v71 = *(_DWORD *)(v64 + 80);
      if ((v71 & 0x27) != 0 && (v71 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v166, 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v64 + 16))
        goto LABEL_74;
    }
LABEL_120:
    if ((v69 & 0xFFFE000000000002) == 0)
    {
      v17 = v69;
      if (*(unsigned __int8 *)(v69 + 5) > 0x16u)
        continue;
    }
    goto LABEL_74;
  }
  if (!(_DWORD)v16
    || (v16 & ~*(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE)), (JSC::VM *)v64, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v66)|| (__dst = (JSC::VM *)v12, v67 = JSC::PropertyTable::get(v66, (uint64_t *)&__dst), a6 = v67, (_DWORD)v67 == -1))
  {
    if ((*(_BYTE *)(v17 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v17, (JSC::VM *)v64, v12, (uint64_t)&v169) & 1) != 0)
    {
      goto LABEL_46;
    }
    goto LABEL_116;
  }
  a5 = HIDWORD(v67);
  if ((int)v67 <= 63)
  {
    v97 = v17 + 16;
    v98 = v67 << 32;
  }
  else
  {
    v97 = *(_QWORD *)(v17 + 8) - 8;
    v98 = 0x3F00000000 - (v67 << 32);
  }
  a4 = *(_QWORD *)(v97 + (v98 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_211:
    v169 = (uint64_t (*)(unint64_t))a4;
    v173 = (_DWORD *)v17;
    goto LABEL_35;
  }
  v99 = *(unsigned __int8 *)(a4 + 5);
  if (v99 == 5)
  {
    v36 = (unsigned int *)v17;
    v37 = v64;
    goto LABEL_45;
  }
  if (v99 != 6)
    goto LABEL_211;
  v50 = *(_DWORD *)(v65 + 16) & 3;
  v100 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v169 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v170 = v100;
    LODWORD(v171) = HIDWORD(v67);
    v173 = (_DWORD *)v17;
    goto LABEL_101;
  }
  v53 = *(int8x16_t ***)(a4 + 24);
  v52 = *(_QWORD *)(a4 + 32);
  v169 = *(uint64_t (**)(unint64_t))(a4 + 8);
  v170 = v100;
  LODWORD(v171) = HIDWORD(v67);
  v173 = (_DWORD *)v17;
LABEL_80:
  BYTE1(v174[1]) = 3;
  if (v50 != 2)
    LOBYTE(v174[1]) = 1;
  BYTE3(v174[1]) = 1;
  v177 = v53;
  v178 = v52;
LABEL_46:
  if (BYTE1(v174[1]) == 1)
  {
    v38 = (uint64_t)v169;
  }
  else
  {
    if (BYTE1(v174[1]) == 2)
    {
      v39 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v169, a1, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v41 = (unint64_t)v173;
      v42 = *(_QWORD *)(16 * (*v173 & 0xFFFFFFFE) + 0x28);
      if ((v171 & 0x20) != 0)
        v41 = (unint64_t)v172;
      if (BYTE3(v174[1]) != 1)
        goto LABEL_72;
      if ((v41 & 0xFFFE000000000002) != 0)
        goto LABEL_223;
      v43 = *(unsigned int *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE) + 0x4C);
      v44 = *(_DWORD *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE) + 0x4C) != 0;
      v45 = 16 * v43;
      if ((_DWORD)v43)
        v46 = v177 == (int8x16_t **)v45;
      else
        v46 = 1;
      if (!v46)
      {
        do
        {
          v45 = *(_QWORD *)(v45 + 16);
          v44 = v45 != 0;
        }
        while ((int8x16_t **)v45 != v177 && v45 != 0);
      }
      if (!v44)
      {
LABEL_223:
        __dst = (JSC::VM *)*((_QWORD *)a1 + 7);
        v39 = JSC::throwDOMAttributeGetterTypeError(v42, &__dst, v177, (WTF::StringImpl *)v12);
      }
      else
      {
LABEL_72:
        v39 = v169(v42);
      }
    }
    v38 = v39;
  }
LABEL_74:
  if (v176)
  {
    v48 = *(_DWORD *)(v175 + 4);
    if (!v48)
    {
      __break(0xC471u);
      JUMPOUT(0x198773320);
    }
    *(_DWORD *)(v175 + 4) = v48 - 1;
  }
  return v38;
}

uint64_t operationGetByIdWithThisOptimize(unint64_t this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  JSC::VM *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _WORD *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  JSC::VM *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  int *v43;
  const WTF::StringImpl *v44;
  int v45;
  int v46;
  int v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unsigned int v51;
  unsigned __int8 *v52;
  WTF::StringImpl *v53;
  uint64_t result;
  int v55;
  int v56;
  _WORD *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned __int8 *v61;
  int v63;
  uint64_t v64;
  int v65;
  unsigned __int16 *v66;
  uint64_t v67;
  unsigned int v68;
  BOOL v69;
  unsigned int *v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  unsigned int v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unsigned __int16 *v99;
  uint64_t v100;
  unsigned int v101;
  unint64_t v102;
  JSC::VM *v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  unsigned __int8 *v116;
  int v117;
  _BOOL4 v118;
  double v119;
  const unsigned __int8 *v120;
  unsigned __int8 *v121;
  uint64_t v122;
  unsigned int v123;
  JSC::VM *v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int *v131;
  uint64_t v132;
  uint64_t Index;
  int v134;
  char v135;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  int v137;
  _WORD *v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  unsigned __int16 *v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v149;
  unsigned __int8 *v150;
  unsigned int v151;
  uint64_t v152;
  JSC::Structure *v153;
  unsigned int v154;
  uint64_t v155;
  unsigned __int8 *v156;
  unsigned int v157;
  JSC::VM *v158;
  JSC::VM **v159;
  JSC::VM *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  WTF::AtomStringImpl *v164;
  const WTF::StringImpl *v165;
  _QWORD v166[2];
  uint64_t v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unsigned int v172;
  char v173;
  uint64_t v174;
  int *v175;
  _DWORD *v176;
  char *v177;
  WTF::StringImpl *v178;
  uint64_t *v179;
  char *v180;
  uint64_t v181;
  uint64_t vars0;

  v9 = a3;
  v10 = this;
  v181 = *MEMORY[0x1E0C80C00];
  v159 = *(JSC::VM ***)(a3 + 56);
  v11 = vars0;
  v158 = v159[7];
  *((_QWORD *)v158 + 5) = vars0;
  *(_DWORD *)(v11 + 36) = *(_DWORD *)(a3 + 112);
  v12 = *(_QWORD *)(a3 + 16);
  v170 = 0;
  v171 = this;
  a9.i64[0] = 0xFFFFFFFF00000000;
  v163 = 0xFFFFFFFF00000000;
  LOBYTE(v167) = 0;
  v168 = 0;
  v169 = 0;
  v165 = 0;
  memset(v166, 0, 13);
  v164 = a2;
  if (v12)
  {
    if ((v12 & 1) != 0)
      v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    else
      v13 = *(_QWORD *)(v12 + 8);
  }
  else
  {
    v13 = 0;
  }
  v160 = v159[7];
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_309;
  v14 = *(unsigned __int8 *)(this + 5);
  v15 = v159[7];
  if (v14 > 0x16)
    goto LABEL_6;
  if (v14 != 2)
    goto LABEL_309;
  if (*(_QWORD *)(*((_QWORD *)v160 + 5244) + 1768) == v13)
  {
    v130 = *(_QWORD *)(this + 8);
    if ((v130 & 1) != 0)
      v131 = (unsigned int *)(this + 16);
    else
      v131 = (unsigned int *)(v130 + 4);
    v132 = *v131;
    if ((v132 & 0x80000000) != 0)
    {
      *(double *)a9.i64 = (double)v132;
      Index = COERCE__INT64((double)v132) + 0x2000000000000;
    }
    else
    {
      Index = v132 | 0xFFFE000000000000;
    }
    v134 = 14;
LABEL_295:
    v161 = Index;
    LODWORD(v163) = v134;
    v165 = 0;
    v37 = 1;
    BYTE1(v166[1]) = 1;
    if (!*((_DWORD *)v160 + 20))
      goto LABEL_48;
LABEL_296:
    v135 = v37;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v160, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v37 &= !hasExceptionsAfterHandlingTraps;
    if ((v135 & 1) != 0 || hasExceptionsAfterHandlingTraps)
      goto LABEL_48;
    goto LABEL_309;
  }
  if (v13)
  {
    v137 = *(_DWORD *)(v13 + 16);
    if ((v137 & 0x20) == 0)
    {
      v138 = *(_WORD **)(v13 + 8);
      v139 = *(unsigned int *)(v13 + 4);
      if ((v137 & 4) == 0)
      {
        if ((_DWORD)v139)
        {
          v140 = (unsigned __int16)*v138 - 48;
          if (v140 <= 9 && (*v138 != 48 || v139 <= 1))
          {
            v145 = v138 + 1;
            v146 = v139 - 1;
            while (v146)
            {
              if (v140 > 0x19999999)
                goto LABEL_304;
              v147 = *v145 - 48;
              if (v147 > 9)
                goto LABEL_304;
              v141 = 0;
              LOBYTE(v139) = 0;
              v142 = 0;
              v69 = __CFADD__(v147, 10 * v140);
              v140 = v147 + 10 * v140;
              ++v145;
              --v146;
              if (v69)
                goto LABEL_306;
            }
            if (v140 != -1)
            {
              v142 = v140 & 0xFFFFFF00;
              v141 = 0x100000000;
              LOBYTE(v139) = v140;
              goto LABEL_306;
            }
          }
LABEL_304:
          v141 = 0;
          LOBYTE(v139) = 0;
        }
        else
        {
          v141 = 0;
        }
        v142 = 0;
LABEL_306:
        v143 = v139;
LABEL_307:
        if ((v141 & 0x100000000) != 0)
        {
          a3 = v142 | v143;
          v152 = *(_QWORD *)(this + 8);
          v153 = (JSC::Structure *)((v152 & 1) != 0 ? this + 16 : v152 + 4);
          if (*(_DWORD *)v153 > a3)
          {
            Index = JSC::JSString::getIndex((JSC::JSString *)this, (JSC::JSGlobalObject *)v159, a3, a4, a5, a6, a7, a8, a9);
            if (!*((_DWORD *)v160 + 20)
              || !JSC::VM::hasExceptionsAfterHandlingTraps(v160, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
            {
              v134 = 10;
              goto LABEL_295;
            }
          }
        }
        goto LABEL_308;
      }
      if ((_DWORD)v139)
      {
        v154 = *(unsigned __int8 *)v138 - 48;
        if (v154 <= 9 && (v139 < 2 || *(_BYTE *)v138 != 48))
        {
          v155 = v139 - 1;
          v156 = (unsigned __int8 *)v138 + 1;
          while (v155)
          {
            if (v154 > 0x19999999)
              goto LABEL_383;
            v157 = *v156 - 48;
            if (v157 > 9)
              goto LABEL_383;
            v143 = 0;
            LOBYTE(v139) = 0;
            v141 = 0;
            v69 = __CFADD__(v157, 10 * v154);
            v154 = v157 + 10 * v154;
            --v155;
            ++v156;
            if (v69)
              goto LABEL_385;
          }
          if (v154 != -1)
          {
            v143 = v154 & 0xFFFFFF00;
            v141 = 0x100000000;
            LOBYTE(v139) = v154;
            goto LABEL_385;
          }
        }
LABEL_383:
        v143 = 0;
        LOBYTE(v139) = 0;
      }
      else
      {
        v143 = 0;
      }
      v141 = 0;
LABEL_385:
      v142 = v139;
      goto LABEL_307;
    }
  }
LABEL_308:
  if (*((_DWORD *)v160 + 20))
  {
    v37 = 0;
    goto LABEL_296;
  }
LABEL_309:
  v144 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v171, (unint64_t)v159);
  if (!v144)
    goto LABEL_86;
  v10 = v144;
  v15 = v159[7];
LABEL_6:
  v16 = v10 + 6;
  v17 = v13 >> 4;
  v18 = v10;
  if ((*(_BYTE *)(v10 + 6) & 8) == 0)
  {
    v19 = v10;
    while (1)
    {
      v20 = *(_DWORD *)v19 & 0xFFFFFFFE;
      v21 = 16 * v20;
      if ((_DWORD)v17)
      {
        if ((v17 & ~*(_DWORD *)(16 * v20 + 0x20)) == 0)
        {
          JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v21, v15, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
          if (v22)
          {
            v176 = (_DWORD *)v13;
            v23 = JSC::PropertyTable::get(v22, (uint64_t *)&v176);
            a6 = v23;
            if ((_DWORD)v23 != -1)
              break;
          }
        }
      }
      if ((*(_BYTE *)v16 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v19, v15, v13, (uint64_t)&v161) & 1) != 0)
      {
        goto LABEL_116;
      }
      v18 = *(_QWORD *)(v21 + 48);
      if (!v18)
        v18 = *(_QWORD *)(v19 + 16);
      if ((v18 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) < 0x17u)
      {
        if (!v13)
          goto LABEL_86;
        v56 = *(_DWORD *)(v13 + 16);
        if ((v56 & 0x20) != 0)
          goto LABEL_86;
        v57 = *(_WORD **)(v13 + 8);
        v58 = *(unsigned int *)(v13 + 4);
        if ((v56 & 4) == 0)
        {
          if ((_DWORD)v58)
          {
            v59 = (unsigned __int16)*v57 - 48;
            if (v59 <= 9 && (*v57 != 48 || v58 <= 1))
            {
              v66 = v57 + 1;
              v67 = v58 - 1;
              while (v67)
              {
                if (v59 > 0x19999999)
                  goto LABEL_86;
                v68 = *v66 - 48;
                if (v68 > 9)
                  goto LABEL_86;
                v37 = 0;
                v69 = __CFADD__(v68, 10 * v59);
                v59 = v68 + 10 * (_DWORD)v59;
                ++v66;
                --v67;
                if (v69)
                  goto LABEL_48;
              }
              goto LABEL_253;
            }
          }
          goto LABEL_86;
        }
        if (!(_DWORD)v58)
          goto LABEL_86;
        v59 = *(unsigned __int8 *)v57 - 48;
        if (v59 > 9 || v58 >= 2 && *(_BYTE *)v57 == 48)
          goto LABEL_86;
        v121 = (unsigned __int8 *)v57 + 1;
        v122 = v58 - 1;
        while (v122)
        {
          if (v59 > 0x19999999)
            goto LABEL_86;
          v123 = *v121 - 48;
          if (v123 > 9)
            goto LABEL_86;
          v37 = 0;
          v69 = __CFADD__(v123, 10 * v59);
          v59 = v123 + 10 * (_DWORD)v59;
          ++v121;
          --v122;
          if (v69)
            goto LABEL_48;
        }
LABEL_253:
        if ((_DWORD)v59 == -1)
        {
LABEL_86:
          v37 = 0;
          goto LABEL_48;
        }
        v124 = v159[7];
        while (2)
        {
          v125 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
          v126 = (*(uint64_t (**)(unint64_t, JSC::VM **, uint64_t, uint64_t *))(16
                                                                                             * *(unsigned int *)(v125 + 0x4C)
                                                                                             + 0x70))(v10, v159, v59, &v161);
          v127 = v126;
          if (*((_DWORD *)v124 + 20))
          {
            v118 = JSC::VM::hasExceptionsAfterHandlingTraps(v124, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            if (((v118 | v127) & 1) != 0)
            {
LABEL_267:
              v37 = !v118;
              goto LABEL_48;
            }
          }
          else if ((v126 & 1) != 0)
          {
            goto LABEL_116;
          }
          if (BYTE2(v166[1]) == 3)
          {
            if (BYTE4(v166[1]))
              goto LABEL_86;
            v128 = *(unsigned __int8 *)(v10 + 5);
            if (v128 != 61)
              goto LABEL_259;
          }
          else
          {
            v128 = *(unsigned __int8 *)(v10 + 5);
            if (v128 == 61)
            {
              if (BYTE2(v166[1]) == 1)
                goto LABEL_86;
            }
            else
            {
LABEL_259:
              if ((v128 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8) <= v59)
              {
                goto LABEL_86;
              }
            }
          }
          if ((*(_WORD *)(v125 + 12) & 0x800) == 0 || BYTE2(v166[1]) == 3)
          {
            v129 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
            if (!v129)
              v129 = *(_QWORD *)(v10 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v129 = (*(uint64_t (**)(unint64_t, JSC::VM **))(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                               + 0x4C)
                                                                             + 0xB0))(v10, v159);
            }
            else
            {
              v129 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
              if (!v129)
                v129 = *(_QWORD *)(v10 + 16);
            }
            if (*((_DWORD *)v124 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v124, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
            {
              goto LABEL_86;
            }
          }
          if ((v129 & 0xFFFE000000000002) != 0)
            goto LABEL_86;
          v37 = 0;
          v10 = v129;
          if (*(unsigned __int8 *)(v129 + 5) <= 0x16u)
            goto LABEL_48;
          continue;
        }
      }
      v16 = v18 + 6;
      v19 = v18;
      if ((*(_BYTE *)(v18 + 6) & 8) != 0)
        goto LABEL_18;
    }
    a5 = HIDWORD(v23);
    if ((int)v23 <= 63)
    {
      v38 = v19 + 16;
      v39 = v23 << 32;
    }
    else
    {
      v38 = *(_QWORD *)(v19 + 8) - 8;
      v39 = 0x3F00000000 - (v23 << 32);
    }
    a4 = *(_QWORD *)(v38 + (v39 >> 29));
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_46;
    v40 = *(unsigned __int8 *)(a4 + 5);
    if (v40 != 5)
    {
      if (v40 != 6)
      {
LABEL_46:
        v161 = a4;
        v165 = (const WTF::StringImpl *)v19;
LABEL_47:
        v163 = __PAIR64__(a6, a5);
        v37 = 1;
        LOWORD(v166[1]) = 257;
        goto LABEL_48;
      }
      v88 = *(_DWORD *)(v21 + 16) & 3;
      v89 = *(_QWORD *)(a4 + 16);
      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                               + 0x4C)))
      {
        v91 = *(_QWORD *)(a4 + 24);
        v90 = *(_QWORD *)(a4 + 32);
        v161 = *(_QWORD *)(a4 + 8);
        v162 = v89;
        LODWORD(v163) = HIDWORD(v23);
        v165 = (const WTF::StringImpl *)v19;
        goto LABEL_137;
      }
      v161 = *(_QWORD *)(a4 + 8);
      v162 = v89;
      LODWORD(v163) = HIDWORD(v23);
      v165 = (const WTF::StringImpl *)v19;
LABEL_171:
      v37 = 1;
      BYTE1(v166[1]) = 3;
      if (v88 != 2)
        LOBYTE(v166[1]) = 1;
      goto LABEL_48;
    }
    v70 = (unsigned int *)v19;
    v71 = (uint64_t)v15;
LABEL_115:
    JSC::JSObject::fillGetterPropertySlot(v70, v71, (uint64_t)&v161, a4, a5, a6);
LABEL_116:
    v37 = 1;
    goto LABEL_48;
  }
LABEL_18:
  if (!v13)
    goto LABEL_27;
  v24 = *(_DWORD *)(v13 + 16);
  if ((v24 & 0x20) != 0)
    goto LABEL_27;
  v25 = *(_WORD **)(v13 + 8);
  v26 = *(unsigned int *)(v13 + 4);
  if ((v24 & 4) == 0)
  {
    if ((_DWORD)v26)
    {
      v27 = (unsigned __int16)*v25 - 48;
      if (v27 <= 9 && (*v25 != 48 || v26 <= 1))
      {
        v99 = v25 + 1;
        v100 = v26 - 1;
        while (v100)
        {
          if (v27 > 0x19999999)
            goto LABEL_23;
          v101 = *v99 - 48;
          if (v101 > 9)
            goto LABEL_23;
          v28 = 0;
          LOBYTE(v26) = 0;
          v29 = 0;
          v69 = __CFADD__(v101, 10 * v27);
          v27 = v101 + 10 * v27;
          ++v99;
          --v100;
          if (v69)
            goto LABEL_25;
        }
        v29 = v27 & 0xFFFFFF00;
        v28 = 0x100000000;
        if (v27 == -1)
        {
          v28 = 0;
          LOBYTE(v26) = 0;
        }
        else
        {
          LOBYTE(v26) = v27;
        }
        if (v27 == -1)
          v29 = 0;
        goto LABEL_25;
      }
LABEL_23:
      v28 = 0;
      LOBYTE(v26) = 0;
    }
    else
    {
      v28 = 0;
    }
    v29 = 0;
LABEL_25:
    v30 = v26;
    goto LABEL_26;
  }
  if ((_DWORD)v26)
  {
    v148 = *(unsigned __int8 *)v25 - 48;
    if (v148 <= 9 && (v26 < 2 || *(_BYTE *)v25 != 48))
    {
      v149 = v26 - 1;
      v150 = (unsigned __int8 *)v25 + 1;
      while (v149)
      {
        if (v148 > 0x19999999)
          goto LABEL_323;
        v151 = *v150 - 48;
        if (v151 > 9)
          goto LABEL_323;
        v30 = 0;
        LOBYTE(v26) = 0;
        v28 = 0;
        v69 = __CFADD__(v151, 10 * v148);
        v148 = v151 + 10 * v148;
        --v149;
        ++v150;
        if (v69)
          goto LABEL_325;
      }
      if (v148 == -1)
        v30 = 0;
      else
        v30 = v148 & 0xFFFFFF00;
      if (v148 == -1)
        LOBYTE(v26) = 0;
      else
        LOBYTE(v26) = v148;
      if (v148 == -1)
        v28 = 0;
      else
        v28 = 0x100000000;
      goto LABEL_325;
    }
LABEL_323:
    v30 = 0;
    LOBYTE(v26) = 0;
  }
  else
  {
    v30 = 0;
  }
  v28 = 0;
LABEL_325:
  v29 = v26;
LABEL_26:
  if ((v28 & 0x100000000) != 0)
  {
    v102 = v29 | v30;
    v103 = v159[7];
    while (1)
    {
      v104 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
      v105 = (*(uint64_t (**)(unint64_t, JSC::VM **, unint64_t, uint64_t *))(16 * *(unsigned int *)(v104 + 0x4C)
                                                                                                  + 0x70))(v10, v159, v102, &v161);
      v106 = v105;
      if (*((_DWORD *)v103 + 20))
      {
        v118 = JSC::VM::hasExceptionsAfterHandlingTraps(v103, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        if (((v118 | v106) & 1) != 0)
          goto LABEL_267;
      }
      else if ((v105 & 1) != 0)
      {
        goto LABEL_116;
      }
      if (BYTE2(v166[1]) == 3)
      {
        if (BYTE4(v166[1]))
          goto LABEL_86;
        v107 = *(unsigned __int8 *)(v10 + 5);
        if (v107 == 61)
          goto LABEL_187;
      }
      else
      {
        v107 = *(unsigned __int8 *)(v10 + 5);
        if (v107 == 61)
        {
          if (BYTE2(v166[1]) == 1)
            goto LABEL_86;
          goto LABEL_187;
        }
      }
      if ((v107 - 39) <= 0xA
        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8) <= v102)
      {
        goto LABEL_86;
      }
LABEL_187:
      if ((*(_WORD *)(v104 + 12) & 0x800) == 0 || BYTE2(v166[1]) == 3)
      {
        v108 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
        if (!v108)
          v108 = *(_QWORD *)(v10 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v108 = (*(uint64_t (**)(unint64_t, JSC::VM **))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0xB0))(v10, v159);
        }
        else
        {
          v108 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
          if (!v108)
            v108 = *(_QWORD *)(v10 + 16);
        }
        if (*((_DWORD *)v103 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v103, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_86;
        }
      }
      if ((v108 & 0xFFFE000000000002) != 0)
        goto LABEL_86;
      v37 = 0;
      v10 = v108;
      if (*(unsigned __int8 *)(v108 + 5) <= 0x16u)
        goto LABEL_48;
    }
  }
LABEL_27:
  v31 = v159[7];
  while (1)
  {
    v32 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v18 + 6) & 8) == 0)
      break;
    v111 = (*(uint64_t (**)(unint64_t, JSC::VM **, unint64_t, uint64_t *))(16
                                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C)
                                                                                                + 0x68))(v18, v159, v13, &v161);
    v112 = v111;
    if (*((_DWORD *)v31 + 20))
    {
      v118 = JSC::VM::hasExceptionsAfterHandlingTraps(v31, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      if (((v118 | v112) & 1) != 0)
        goto LABEL_267;
    }
    else if ((v111 & 1) != 0)
    {
      goto LABEL_116;
    }
    if (BYTE2(v166[1]) == 3)
    {
      if (BYTE4(v166[1]))
        goto LABEL_86;
      v113 = *(unsigned __int8 *)(v18 + 5);
      if (v113 != 61)
      {
LABEL_212:
        if (!v13)
          goto LABEL_34;
        if ((v113 - 50) < 0xFFFFFFF5)
          goto LABEL_34;
        v114 = *(_DWORD *)(v13 + 16);
        if ((v114 & 0x20) != 0)
          goto LABEL_34;
        v115 = *(unsigned int *)(v13 + 4);
        if (!(_DWORD)v115)
          goto LABEL_34;
        v116 = *(unsigned __int8 **)(v13 + 8);
        if ((v114 & 4) == 0)
        {
          v117 = *(unsigned __int16 *)v116;
          if ((_DWORD)v115 == 1)
            goto LABEL_218;
          if (v117 == 45)
          {
            v117 = *((unsigned __int16 *)v116 + 1);
            goto LABEL_223;
          }
          if ((v117 - 48) >= 0xA && ((_DWORD)v115 != 8 || v117 != 73))
          {
LABEL_239:
            if ((_DWORD)v115 != 3 || v117 != 78)
              goto LABEL_34;
          }
LABEL_229:
          v16 = v16 & 0xFFFFFF0000000000 | v115 | ((unint64_t)((v114 >> 2) & 1) << 32);
          JSC::jsToNumber(v116, v16);
          WTF::numberToString(&v176, v119);
          if (WTF::equal(v13, (unint64_t)&v176, v120))
            goto LABEL_86;
          goto LABEL_34;
        }
        v117 = *v116;
        if ((_DWORD)v115 == 1)
        {
LABEL_218:
          if ((v117 - 48) < 0xA)
            goto LABEL_86;
          goto LABEL_34;
        }
        if (v117 == 45)
        {
          v117 = v116[1];
LABEL_223:
          if ((v117 - 48) < 0xA)
          {
            if ((_DWORD)v115 == 2)
              goto LABEL_86;
            goto LABEL_229;
          }
          if ((_DWORD)v115 != 9)
            goto LABEL_34;
        }
        else
        {
          if ((v117 - 48) < 0xA)
            goto LABEL_229;
          if ((_DWORD)v115 != 8)
            goto LABEL_239;
        }
        if (v117 != 73)
          goto LABEL_34;
        goto LABEL_229;
      }
    }
    else
    {
      v113 = *(unsigned __int8 *)(v18 + 5);
      if (v113 != 61)
        goto LABEL_212;
      if (BYTE2(v166[1]) == 1)
        goto LABEL_86;
    }
LABEL_34:
    if ((*(_WORD *)(v32 + 12) & 0x800) != 0)
    {
      v35 = *(_DWORD *)v18;
      if (BYTE2(v166[1]) != 3)
      {
        v110 = 16 * (v35 & 0xFFFFFFFE);
        if ((*(_WORD *)(v110 + 12) & 0x800) != 0)
        {
          v36 = (*(uint64_t (**)(unint64_t, JSC::VM **))(16 * *(unsigned int *)(v110 + 76) + 0xB0))(v18, v159);
        }
        else
        {
          v36 = *(_QWORD *)(v110 + 48);
          if (!v36)
            v36 = *(_QWORD *)(v18 + 16);
        }
        if (*((_DWORD *)v31 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v31, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
          goto LABEL_86;
        goto LABEL_38;
      }
    }
    else
    {
      v35 = *(_DWORD *)v18;
    }
    v36 = *(_QWORD *)(16 * (v35 & 0xFFFFFFFE) + 0x30);
    if (!v36)
      v36 = *(_QWORD *)(v18 + 16);
LABEL_38:
    if ((v36 & 0xFFFE000000000002) != 0)
      goto LABEL_86;
    v37 = 0;
    v18 = v36;
    if (*(unsigned __int8 *)(v36 + 5) <= 0x16u)
      goto LABEL_48;
  }
  if (!(_DWORD)v17
    || (v17 & ~*(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE)), v31, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v33)|| (v176 = (_DWORD *)v13, v34 = JSC::PropertyTable::get(v33, (uint64_t *)&v176), a6 = v34, (_DWORD)v34 == -1))
  {
    if ((*(_BYTE *)(v18 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v18, v31, v13, (uint64_t)&v161) & 1) != 0)
    {
      goto LABEL_116;
    }
    goto LABEL_34;
  }
  a5 = HIDWORD(v34);
  if ((int)v34 <= 63)
  {
    v96 = v18 + 16;
    v97 = v34 << 32;
  }
  else
  {
    v96 = *(_QWORD *)(v18 + 8) - 8;
    v97 = 0x3F00000000 - (v34 << 32);
  }
  a4 = *(_QWORD *)(v96 + (v97 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_158:
    v161 = a4;
    v165 = (const WTF::StringImpl *)v18;
    goto LABEL_47;
  }
  v98 = *(unsigned __int8 *)(a4 + 5);
  if (v98 == 5)
  {
    v70 = (unsigned int *)v18;
    v71 = (uint64_t)v31;
    goto LABEL_115;
  }
  if (v98 != 6)
    goto LABEL_158;
  v88 = *(_DWORD *)(v32 + 16) & 3;
  v109 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v161 = *(_QWORD *)(a4 + 8);
    v162 = v109;
    LODWORD(v163) = HIDWORD(v34);
    v165 = (const WTF::StringImpl *)v18;
    goto LABEL_171;
  }
  v91 = *(_QWORD *)(a4 + 24);
  v90 = *(_QWORD *)(a4 + 32);
  v161 = *(_QWORD *)(a4 + 8);
  v162 = v109;
  LODWORD(v163) = HIDWORD(v34);
  v165 = (const WTF::StringImpl *)v18;
LABEL_137:
  BYTE1(v166[1]) = 3;
  v37 = 1;
  if (v88 != 2)
    LOBYTE(v166[1]) = 1;
  BYTE3(v166[1]) = 1;
  v169 = v91;
  v170 = v90;
LABEL_48:
  if (*((_DWORD *)v160 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v160, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    result = 0;
    goto LABEL_77;
  }
  v41 = v171;
  if (byte_1ECF4C6B7)
  {
    if ((v171 & 0xFFFE000000000002) != 0)
      v42 = 0;
    else
      v42 = 16 * *(unsigned int *)(16 * (*(_DWORD *)v171 & 0xFFFFFFFE) + 0x4C);
    if ((v12 & 1) != 0)
      v43 = (int *)(v12 & 0xFFFFFFFFFFFFFFFELL);
    else
      v43 = *(int **)(v12 + 8);
    v44 = v165;
    LODWORD(v176) = 14;
    v177 = (char *)v42;
    v45 = v43[4];
    if ((v45 & 0x20) != 0)
    {
      v46 = *v43 + 2;
      goto LABEL_58;
    }
    if ((v45 & 0x10) != 0)
    {
      *v43 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(*((uint64_t **)v158 + 5239), (unint64_t)v43, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v175);
      v43 = v175;
    }
    v46 = *v43;
    *v43 += 2;
    if (v46)
    {
LABEL_58:
      *v43 = v46;
    }
    else
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v43, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
    }
    v178 = (WTF::StringImpl *)v43;
    if ((const WTF::StringImpl *)v41 == v44)
      v47 = 1;
    else
      v47 = 2;
    LODWORD(v179) = v47;
    JSC::ICEvent::log((JSC::ICEvent *)&v176, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v50 = v178;
    v178 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::~StringImpl(v50, v48, v49, a4, a5, a6, a7, a8);
        WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
      }
      else
      {
        *(_DWORD *)v50 -= 2;
      }
    }
    v41 = v171;
  }
  if ((v41 & 0xFFFE000000000002) != 0 || (v51 = *(_DWORD *)v41 & 0xFFFFFFFE) == 0)
  {
    *(_WORD *)(v9 + 129) |= 0x10u;
    goto LABEL_70;
  }
  v52 = *(unsigned __int8 **)(v11 + 16);
  v174 = v12;
  *(_WORD *)(v9 + 129) |= 4u;
  if (*(_BYTE *)(v9 + 124))
  {
    --*(_BYTE *)(v9 + 124);
    goto LABEL_70;
  }
  v60 = *(unsigned __int8 *)(v9 + 125);
  if (v60 != 255)
    *(_BYTE *)(v9 + 125) = ++v60;
  if (xmmword_1ECF4C260 < v60)
  {
    *(_BYTE *)(v9 + 125) = 0;
    v92 = *(unsigned __int8 *)(v9 + 126);
    v93 = BYTE4(xmmword_1ECF4C260) << v92;
    v94 = v93;
    if (v93 == 255)
      LOBYTE(v93) = -2;
    if (v94 >> v92 == BYTE4(xmmword_1ECF4C260))
      v95 = v93;
    else
      v95 = -2;
    *(_BYTE *)(v9 + 124) = v95;
    if (v92 != 255)
      *(_BYTE *)(v9 + 126) = v92 + 1;
    *(_BYTE *)(v9 + 127) = 0;
LABEL_124:
    JSC::repatchGetBy((uint64_t *)v159, v52, (const WTF::StringImpl *)v171, v12, (uint64_t)&v161, v9, 3, a8, *(uint8x8_t *)a9.i8);
    goto LABEL_70;
  }
  if (!*(_BYTE *)(v9 + 127))
    goto LABEL_124;
  --*(_BYTE *)(v9 + 127);
  v173 = 0;
  v172 = v51;
  v61 = (unsigned __int8 *)(v9 + 128);
  if (!__ldaxr((unsigned __int8 *)(v9 + 128)))
    goto LABEL_131;
  __clrex();
LABEL_95:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v9 + 128);
  while (1)
  {
    v63 = *(_DWORD *)(v9 + 96);
    if (!v63)
      break;
    v178 = (WTF::StringImpl *)&v172;
    v179 = &v174;
    v180 = &v173;
    v176 = &v172;
    v177 = &v173;
    if (v63 != -1)
      goto LABEL_101;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_131:
    if (__stxr(1u, v61))
      goto LABEL_95;
  }
  v63 = *(_QWORD *)(v9 + 16) ? 1 : 2;
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(_DWORD *)(v9 + 96) = v63;
  v178 = (WTF::StringImpl *)&v172;
  v179 = &v174;
  v180 = &v173;
  v176 = &v172;
  v177 = &v173;
LABEL_101:
  v175 = (int *)&v176;
  ((void (*)(int **))off_1E3596010[v63])(&v175);
  v65 = __ldxr(v61);
  if (v65 == 1)
  {
    if (!__stlxr(0, v61))
      goto LABEL_121;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v9 + 128), 0, v64, a4, a5, a6, a7, a8);
LABEL_121:
  if (v173)
  {
    if (!v52)
      goto LABEL_124;
    if (*((_DWORD *)v158 + 190) < v52[7])
      goto LABEL_124;
    JSC::Heap::writeBarrierSlowPath((uint64_t)v158 + 192, (unint64_t)v52);
    if (v173)
      goto LABEL_124;
  }
LABEL_70:
  if (v37)
  {
    if (v12)
    {
      if ((v12 & 1) != 0)
        v53 = (WTF::StringImpl *)(v12 & 0xFFFFFFFFFFFFFFFELL);
      else
        v53 = *(WTF::StringImpl **)(v12 + 8);
    }
    else
    {
      v53 = 0;
    }
    if (BYTE1(v166[1]) == 1)
    {
      result = v161;
    }
    else if (BYTE1(v166[1]) == 2)
    {
      result = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v161, (JSC::JSGlobalObject *)v159, (uint64_t)v53, a4, a5, a6, a7, a8);
    }
    else
    {
      result = JSC::PropertySlot::customGetter((uint64_t)&v161, v159[7], v53);
    }
  }
  else
  {
    result = 10;
  }
LABEL_77:
  if (v168)
  {
    v55 = *(_DWORD *)(v167 + 4);
    if (!v55)
    {
      __break(0xC471u);
      JUMPOUT(0x1987748CCLL);
    }
    *(_DWORD *)(v167 + 4) = v55 - 1;
  }
  return result;
}

uint64_t operationGetByIdWithThisMegamorphic(unint64_t this, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  JSC::Structure *v10;
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int OwnStaticPropertySlot;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int8x16_t **v51;
  WTF::AtomStringImpl *v52;
  JSC::VM **v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  WTF::AtomStringImpl *v57;
  int v58;
  uint64_t v59;
  JSC::JSGlobalObject *v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  _BYTE *v65;
  unint64_t v66;
  unint64_t v67;
  JSC::Structure *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  _WORD *v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  JSC::VM *v84;
  int8x16_t **v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  unsigned __int16 *v90;
  uint64_t v91;
  unsigned int v92;
  BOOL v93;
  unsigned int *v94;
  uint64_t v95;
  unsigned int v96;
  int v97;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int8x16_t **v107;
  int v108;
  int v109;
  unsigned int v110;
  char v111;
  int v112;
  _WORD *v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int v117;
  JSC::JSGlobalObject *v118;
  unsigned __int16 *v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  int v125;
  int v126;
  unsigned int v127;
  char v128;
  int v129;
  int v130;
  unsigned int v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  unsigned int v144;
  uint64_t v145;
  unsigned __int8 *v146;
  int v147;
  unint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  size_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  unsigned __int8 *v157;
  JSC::VM **v158;
  uint64_t v159;
  int v160;
  int v161;
  JSC::VM **v162;
  uint64_t v163;
  int v164;
  int v165;
  int v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  int8x16_t **v174;
  uint64_t v175;
  BOOL v176;
  uint64_t v177;
  BOOL v178;
  int v180;
  int v181;
  unsigned int v182;
  char v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  int v193;
  unsigned int v194;
  uint64_t v195;
  unsigned __int8 *v196;
  int v197;
  unint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  char *v202;
  unint64_t v203;
  size_t v204;
  char *v205;
  char *v206;
  int v207;
  uint64_t v208;
  unsigned __int8 *v209;
  JSC::VM **v210;
  uint64_t v211;
  int v212;
  int v213;
  JSC::VM **p_dst;
  uint64_t v215;
  int v216;
  int v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  unsigned int v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  int v229;
  uint64_t v230;
  int v231;
  int v232;
  unint64_t v233;
  unint64_t v234;
  char v235;
  uint64_t v236;
  unsigned __int8 *v237;
  unsigned int v238;
  uint64_t v239;
  unsigned int *v240;
  uint64_t v241;
  uint64_t Index;
  int v243;
  char v244;
  int v245;
  _BYTE *v246;
  uint64_t v247;
  unsigned int v248;
  uint64_t v249;
  unsigned int v250;
  unsigned __int16 *v251;
  uint64_t v252;
  unsigned int v253;
  unsigned int v254;
  uint64_t v255;
  unsigned int v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char v261;
  char v262;
  int v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  char v267;
  int v268;
  unint64_t v269;
  unint64_t v270;
  char v271;
  uint64_t v272;
  unsigned __int8 *v273;
  unsigned int v274;
  int v275;
  unsigned int v276;
  uint64_t v277;
  unsigned __int8 *v278;
  unsigned int v279;
  uint64_t v280;
  uint64_t v281;
  _DWORD *v282;
  int v283;
  unint64_t v284;
  char v285;
  char *v286;
  int v287;
  char v288;
  JSC::JSGlobalObject *v289;
  JSC::VM *v290;
  unint64_t v291;
  uint64_t (*v292)(unint64_t);
  uint64_t v293;
  unint64_t v294;
  _DWORD *v295;
  JSC::Structure *v296;
  _QWORD v297[2];
  uint64_t v298;
  char v299;
  int8x16_t **v300;
  uint64_t v301;
  unint64_t v302;
  JSC::VM *__dst;
  char v304;
  char __s[3];
  _BYTE v306[39];
  uint64_t vars0;

  v9 = a3;
  v10 = (JSC::Structure *)this;
  *(_QWORD *)&v306[23] = *MEMORY[0x1E0C80C00];
  v11 = *(JSC::JSGlobalObject **)(a3 + 56);
  v12 = vars0;
  v290 = (JSC::VM *)*((_QWORD *)v11 + 7);
  *((_QWORD *)v290 + 5) = vars0;
  *(_DWORD *)(v12 + 36) = *(_DWORD *)(a3 + 112);
  v13 = *(_QWORD *)(a3 + 16);
  v302 = this;
  if (v13)
  {
    if ((v13 & 1) != 0)
      v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
    else
      v14 = *(_QWORD *)(v13 + 8);
    v291 = v14;
  }
  else
  {
    v291 = 0;
  }
  a9.i64[0] = 0xFFFFFFFF00000000;
  v294 = 0xFFFFFFFF00000000;
  LOBYTE(v298) = 0;
  v299 = 0;
  v300 = 0;
  v301 = 0;
  v296 = 0;
  memset(v297, 0, 13);
  v295 = a2;
  v15 = this & 0xFFFE000000000002;
  if ((this & 0xFFFE000000000002) != 0 || (v16 = *(unsigned __int8 *)(this + 5), v16 <= 0x16))
  {
    *(_WORD *)(a3 + 129) |= 4u;
    if (*(_BYTE *)(a3 + 124))
    {
      --*(_BYTE *)(a3 + 124);
      if (v15)
        goto LABEL_625;
    }
    else
    {
      v62 = *(unsigned __int8 *)(a3 + 125);
      if (v62 != 255)
        *(_BYTE *)(a3 + 125) = ++v62;
      if (xmmword_1ECF4C260 < v62)
      {
        *(_BYTE *)(a3 + 125) = 0;
        v108 = *(unsigned __int8 *)(a3 + 126);
        v109 = BYTE4(xmmword_1ECF4C260) << v108;
        v110 = v109;
        if (v109 == 255)
          LOBYTE(v109) = -2;
        if (v110 >> v108 == BYTE4(xmmword_1ECF4C260))
          v111 = v109;
        else
          v111 = -2;
        *(_BYTE *)(a3 + 124) = v111;
        if (v108 != 255)
          *(_BYTE *)(a3 + 126) = v108 + 1;
        *(_BYTE *)(a3 + 127) = 0;
      }
      else if (*(_BYTE *)(a3 + 127))
      {
        --*(_BYTE *)(a3 + 127);
      }
      JSC::repatchGetBySlowPathCall(*(JSC::CodeBlock **)(v12 + 16), a3, 3, a4, a5, a6, a7, a8);
      if (v15)
        goto LABEL_625;
    }
    v63 = *((_QWORD *)v11 + 7);
    v64 = *((unsigned __int8 *)v10 + 5);
    if (v64 > 0x16)
      goto LABEL_108;
    if (v64 != 2)
    {
LABEL_625:
      v255 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v302, (unint64_t)v11);
      if (!v255)
        goto LABEL_172;
      v10 = (JSC::Structure *)v255;
      v63 = *((_QWORD *)v11 + 7);
LABEL_108:
      v65 = (char *)v10 + 6;
      v66 = v291 >> 4;
      v67 = (unint64_t)v10;
      if ((*((_BYTE *)v10 + 6) & 8) == 0)
      {
        v68 = v10;
        while (1)
        {
          v69 = *(_DWORD *)v68 & 0xFFFFFFFE;
          v70 = 16 * v69;
          if ((_DWORD)v66)
          {
            if ((v66 & ~*(_DWORD *)(16 * v69 + 0x20)) == 0)
            {
              JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v70, (JSC::VM *)v63, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
              if (v71)
              {
                __dst = (JSC::VM *)v291;
                v72 = JSC::PropertyTable::get(v71, (uint64_t *)&__dst);
                a6 = v72;
                if ((_DWORD)v72 != -1)
                {
                  a5 = HIDWORD(v72);
                  if ((int)v72 <= 63)
                  {
                    v73 = (uint64_t)v68 + 16;
                    v74 = v72 << 32;
                  }
                  else
                  {
                    v73 = *((_QWORD *)v68 + 1) - 8;
                    v74 = 0x3F00000000 - (v72 << 32);
                  }
                  a4 = *(_QWORD *)(v73 + (v74 >> 29));
                  if ((a4 & 0xFFFE000000000002) == 0)
                  {
                    v81 = *(unsigned __int8 *)(a4 + 5);
                    if (v81 == 5)
                    {
                      v94 = (unsigned int *)v68;
                      v95 = v63;
                      goto LABEL_162;
                    }
                    if (v81 == 6)
                    {
                      v104 = *(_DWORD *)(v70 + 16) & 3;
                      v105 = *(_QWORD *)(a4 + 16);
                      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
                      {
                        v107 = *(int8x16_t ***)(a4 + 24);
                        v106 = *(_QWORD *)(a4 + 32);
                        v292 = *(uint64_t (**)(unint64_t))(a4 + 8);
                        v293 = v105;
                        LODWORD(v294) = HIDWORD(v72);
                        v296 = v68;
                        goto LABEL_194;
                      }
                      v292 = *(uint64_t (**)(unint64_t))(a4 + 8);
                      v293 = v105;
                      LODWORD(v294) = HIDWORD(v72);
                      v296 = v68;
                      goto LABEL_237;
                    }
                  }
                  v292 = (uint64_t (*)(unint64_t))a4;
                  v296 = v68;
LABEL_137:
                  v294 = __PAIR64__(a6, a5);
                  LOWORD(v297[1]) = 257;
                  goto LABEL_163;
                }
              }
            }
          }
          if ((*v65 & 0x20) != 0
            && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v68, (JSC::VM *)v63, v291, (uint64_t)&v292) & 1) != 0)
          {
            goto LABEL_163;
          }
          v67 = *(_QWORD *)(v70 + 48);
          if (!v67)
            v67 = *((_QWORD *)v68 + 2);
          if ((v67 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v67 + 5) < 0x17u)
            break;
          v65 = (_BYTE *)(v67 + 6);
          v68 = (JSC::Structure *)v67;
          if ((*(_BYTE *)(v67 + 6) & 8) != 0)
            goto LABEL_210;
        }
        if (!v291)
          goto LABEL_172;
        v75 = *(_DWORD *)(v291 + 16);
        if ((v75 & 0x20) != 0)
          goto LABEL_172;
        v76 = *(_WORD **)(v291 + 8);
        v77 = *(unsigned int *)(v291 + 4);
        if ((v75 & 4) == 0)
        {
          if ((_DWORD)v77)
          {
            v78 = (unsigned __int16)*v76 - 48;
            if (v78 <= 9 && (*v76 != 48 || v77 <= 1))
            {
              v90 = v76 + 1;
              v91 = v77 - 1;
              while (v91)
              {
                if (v78 > 0x19999999)
                  goto LABEL_130;
                v92 = *v90 - 48;
                if (v92 > 9)
                  goto LABEL_130;
                v79 = 0;
                LOBYTE(v77) = 0;
                v80 = 0;
                v93 = __CFADD__(v92, 10 * v78);
                v78 = v92 + 10 * v78;
                ++v90;
                --v91;
                if (v93)
                  goto LABEL_171;
              }
              v80 = v78 & 0xFFFFFF00;
              v79 = 0x100000000;
              if (v78 == -1)
              {
                v79 = 0;
                LOBYTE(v77) = 0;
              }
              else
              {
                LOBYTE(v77) = v78;
              }
              if (v78 == -1)
                v80 = 0;
              goto LABEL_171;
            }
LABEL_130:
            v79 = 0;
            LOBYTE(v77) = 0;
          }
          else
          {
            v79 = 0;
          }
          v80 = 0;
LABEL_171:
          v96 = v77;
          if ((v79 & 0x100000000) == 0)
            goto LABEL_172;
          goto LABEL_532;
        }
        if ((_DWORD)v77)
        {
          v223 = *(unsigned __int8 *)v76 - 48;
          if (v223 <= 9 && (v77 < 2 || *(_BYTE *)v76 != 48))
          {
            v236 = v77 - 1;
            v237 = (unsigned __int8 *)v76 + 1;
            while (v236)
            {
              if (v223 > 0x19999999)
                goto LABEL_529;
              v238 = *v237 - 48;
              if (v238 > 9)
                goto LABEL_529;
              v96 = 0;
              LOBYTE(v77) = 0;
              v224 = 0;
              v93 = __CFADD__(v238, 10 * v223);
              v223 = v238 + 10 * v223;
              --v236;
              ++v237;
              if (v93)
                goto LABEL_531;
            }
            if (v223 == -1)
              v96 = 0;
            else
              v96 = v223 & 0xFFFFFF00;
            if (v223 == -1)
              LOBYTE(v77) = 0;
            else
              LOBYTE(v77) = v223;
            if (v223 == -1)
              v224 = 0;
            else
              v224 = 0x100000000;
            goto LABEL_531;
          }
LABEL_529:
          v96 = 0;
          LOBYTE(v77) = 0;
        }
        else
        {
          v96 = 0;
        }
        v224 = 0;
LABEL_531:
        v80 = v77;
        if ((v224 & 0x100000000) == 0)
          goto LABEL_172;
LABEL_532:
        v225 = v80 | v96;
        v226 = *((_QWORD *)v11 + 7);
        v56 = 10;
        while (1)
        {
          v227 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
          v228 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v227 + 0x4C) + 0x70))(v10, v11, v225, &v292);
          if (*(_DWORD *)(v226 + 80))
          {
            v231 = *(_DWORD *)(v226 + 80);
            if ((v231 & 0x27) != 0 && (v231 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v226 + 16))
              goto LABEL_173;
          }
          if ((v228 & 1) != 0)
            goto LABEL_163;
          if (BYTE2(v297[1]) == 3)
          {
            if (BYTE4(v297[1]))
              goto LABEL_173;
            v229 = *((unsigned __int8 *)v10 + 5);
            if (v229 == 61)
              goto LABEL_538;
          }
          else
          {
            v229 = *((unsigned __int8 *)v10 + 5);
            if (v229 == 61)
            {
              if (BYTE2(v297[1]) == 1)
                goto LABEL_173;
              goto LABEL_538;
            }
          }
          if ((v229 - 39) <= 0xA)
          {
            if ((*((_BYTE *)v10 + 40) & 7u) > 2)
            {
              LOBYTE(__dst) = 0;
              v304 = 0;
              v234 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v10, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
              v233 = v235 ? v234 : 0;
            }
            else
            {
              v233 = *((_QWORD *)v10 + 3);
            }
            if (v233 <= v225)
              goto LABEL_173;
          }
LABEL_538:
          if ((*(_WORD *)(v227 + 12) & 0x800) == 0 || BYTE2(v297[1]) == 3)
          {
            v230 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
            if (!v230)
              v230 = *((_QWORD *)v10 + 2);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v230 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *))(16
                                                                                        * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)
                                                                                        + 0xB0))(v10, v11);
            }
            else
            {
              v230 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
              if (!v230)
                v230 = *((_QWORD *)v10 + 2);
            }
            if (*(_DWORD *)(v226 + 80))
            {
              v232 = *(_DWORD *)(v226 + 80);
              if ((v232 & 0x27) != 0 && (v232 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v226 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v226 + 16))
                goto LABEL_173;
            }
          }
          if ((v230 & 0xFFFE000000000002) == 0)
          {
            v10 = (JSC::Structure *)v230;
            if (*(unsigned __int8 *)(v230 + 5) > 0x16u)
              continue;
          }
          goto LABEL_173;
        }
      }
LABEL_210:
      if (!v291)
        goto LABEL_419;
      v112 = *(_DWORD *)(v291 + 16);
      if ((v112 & 0x20) != 0)
        goto LABEL_419;
      v113 = *(_WORD **)(v291 + 8);
      v114 = *(unsigned int *)(v291 + 4);
      if ((v112 & 4) == 0)
      {
        if ((_DWORD)v114)
        {
          v115 = (unsigned __int16)*v113 - 48;
          if (v115 <= 9)
          {
            v118 = v11;
            if (*v113 == 48 && v114 > 1)
            {
LABEL_417:
              v116 = 0;
              LOBYTE(v114) = 0;
              v117 = 0;
              v11 = v118;
            }
            else
            {
              v119 = v113 + 1;
              v120 = v114 - 1;
              while (v120)
              {
                if (v115 > 0x19999999)
                  goto LABEL_417;
                v121 = *v119 - 48;
                if (v121 > 9)
                  goto LABEL_417;
                v116 = 0;
                LOBYTE(v114) = 0;
                v117 = 0;
                v93 = __CFADD__(v121, 10 * v115);
                v115 = v121 + 10 * v115;
                ++v119;
                --v120;
                v11 = v118;
                if (v93)
                  goto LABEL_418;
              }
              v117 = v115 & 0xFFFFFF00;
              v116 = 0x100000000;
              if (v115 == -1)
              {
                v116 = 0;
                LOBYTE(v114) = 0;
              }
              else
              {
                LOBYTE(v114) = v115;
              }
              if (v115 == -1)
                v117 = 0;
            }
LABEL_418:
            v184 = v114;
            if ((v116 & 0x100000000) == 0)
            {
LABEL_419:
              v185 = *((_QWORD *)v11 + 7);
              v56 = 10;
              while (1)
              {
                v186 = 16 * (*(_DWORD *)v67 & 0xFFFFFFFE);
                if ((*(_BYTE *)(v67 + 6) & 8) == 0)
                {
                  if ((_DWORD)v66)
                  {
                    if ((v66 & ~*(_DWORD *)(16 * (*(_DWORD *)v67 & 0xFFFFFFFE) + 0x20)) == 0)
                    {
                      JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v67 & 0xFFFFFFFE)), (JSC::VM *)v185, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                      if (v187)
                      {
                        __dst = (JSC::VM *)v291;
                        v188 = JSC::PropertyTable::get(v187, (uint64_t *)&__dst);
                        a6 = v188;
                        if ((_DWORD)v188 != -1)
                        {
                          a5 = HIDWORD(v188);
                          if ((int)v188 <= 63)
                          {
                            v219 = v67 + 16;
                            v220 = v188 << 32;
                          }
                          else
                          {
                            v219 = *(_QWORD *)(v67 + 8) - 8;
                            v220 = 0x3F00000000 - (v188 << 32);
                          }
                          a4 = *(_QWORD *)(v219 + (v220 >> 29));
                          if ((a4 & 0xFFFE000000000002) == 0)
                          {
                            v221 = *(unsigned __int8 *)(a4 + 5);
                            if (v221 != 5)
                            {
                              if (v221 != 6)
                                goto LABEL_521;
                              v104 = *(_DWORD *)(v186 + 16) & 3;
                              v222 = *(_QWORD *)(a4 + 16);
                              if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                              {
                                v107 = *(int8x16_t ***)(a4 + 24);
                                v106 = *(_QWORD *)(a4 + 32);
                                v292 = *(uint64_t (**)(unint64_t))(a4 + 8);
                                v293 = v222;
                                LODWORD(v294) = HIDWORD(v188);
                                v296 = (JSC::Structure *)v67;
LABEL_194:
                                BYTE1(v297[1]) = 3;
                                if (v104 != 2)
                                  LOBYTE(v297[1]) = 1;
                                BYTE3(v297[1]) = 1;
                                v300 = v107;
                                v301 = v106;
LABEL_163:
                                if (BYTE1(v297[1]) == 1)
                                  goto LABEL_85;
                                if (BYTE1(v297[1]) == 2)
                                {
                                  v60 = v11;
                                  goto LABEL_97;
                                }
                                v99 = (unint64_t)v296;
                                v83 = *(_QWORD *)(16 * (*(_DWORD *)v296 & 0xFFFFFFFE) + 0x28);
                                if ((v294 & 0x20) != 0)
                                  v99 = (unint64_t)v295;
                                if (BYTE3(v297[1]) != 1)
                                  goto LABEL_151;
                                v84 = (JSC::VM *)*((_QWORD *)v11 + 7);
                                v85 = v300;
                                if ((v99 & 0xFFFE000000000002) != 0)
                                  goto LABEL_406;
                                v100 = *(unsigned int *)(16 * (*(_DWORD *)v99 & 0xFFFFFFFE) + 0x4C);
                                v87 = *(_DWORD *)(16 * (*(_DWORD *)v99 & 0xFFFFFFFE) + 0x4C) != 0;
                                v101 = 16 * v100;
                                if ((_DWORD)v100)
                                  v102 = v300 == (int8x16_t **)v101;
                                else
                                  v102 = 1;
                                if (!v102)
                                {
                                  do
                                  {
                                    v101 = *(_QWORD *)(v101 + 16);
                                    v87 = v101 != 0;
                                  }
                                  while ((int8x16_t **)v101 != v300 && v101 != 0);
                                }
                                goto LABEL_150;
                              }
                              v292 = *(uint64_t (**)(unint64_t))(a4 + 8);
                              v293 = v222;
                              LODWORD(v294) = HIDWORD(v188);
                              v296 = (JSC::Structure *)v67;
LABEL_237:
                              BYTE1(v297[1]) = 3;
                              if (v104 != 2)
                                LOBYTE(v297[1]) = 1;
                              goto LABEL_163;
                            }
                            v94 = (unsigned int *)v67;
                            v95 = v185;
LABEL_162:
                            JSC::JSObject::fillGetterPropertySlot(v94, v95, (uint64_t)&v292, a4, a5, a6);
                            goto LABEL_163;
                          }
LABEL_521:
                          v292 = (uint64_t (*)(unint64_t))a4;
                          v296 = (JSC::Structure *)v67;
                          goto LABEL_137;
                        }
                      }
                    }
                  }
                  if ((*(_BYTE *)(v67 + 6) & 0x20) != 0
                    && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v67, (JSC::VM *)v185, v291, (uint64_t)&v292) & 1) != 0)
                  {
                    goto LABEL_163;
                  }
                  goto LABEL_426;
                }
                v289 = v11;
                v288 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v67 & 0xFFFFFFFE) + 0x4C) + 0x68))(v67, v11, v291, &v292);
                if (*(_DWORD *)(v185 + 80))
                {
                  v218 = *(_DWORD *)(v185 + 80);
                  if ((v218 & 0x27) != 0 && (v218 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v185 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  if (*(_QWORD *)(v185 + 16))
                    goto LABEL_173;
                }
                if ((v288 & 1) != 0)
                  goto LABEL_163;
                if (BYTE2(v297[1]) == 3)
                {
                  if (BYTE4(v297[1]))
                    goto LABEL_173;
                  v193 = *(unsigned __int8 *)(v67 + 5);
                  if (v193 == 61)
                    goto LABEL_498;
                }
                else
                {
                  v193 = *(unsigned __int8 *)(v67 + 5);
                  if (v193 == 61)
                  {
                    if (BYTE2(v297[1]) == 1)
                      goto LABEL_173;
                    goto LABEL_426;
                  }
                }
                if (!v291)
                  goto LABEL_498;
                if ((v193 - 50) < 0xFFFFFFF5)
                  goto LABEL_498;
                v194 = *(_DWORD *)(v291 + 16);
                if ((v194 & 0x20) != 0)
                  goto LABEL_498;
                v195 = *(unsigned int *)(v291 + 4);
                if (!(_DWORD)v195)
                  goto LABEL_498;
                v196 = *(unsigned __int8 **)(v291 + 8);
                if ((v194 & 4) != 0)
                {
                  v197 = *v196;
                  if ((_DWORD)v195 == 1)
                  {
LABEL_453:
                    if ((v197 - 48) < 0xA)
                      goto LABEL_173;
                    goto LABEL_426;
                  }
                  if (v197 == 45)
                  {
                    v197 = v196[1];
                    goto LABEL_457;
                  }
                  if ((v197 - 48) < 0xA)
                    goto LABEL_468;
                  if ((_DWORD)v195 == 8)
                    goto LABEL_467;
                }
                else
                {
                  v197 = *(unsigned __int16 *)v196;
                  if ((_DWORD)v195 == 1)
                    goto LABEL_453;
                  if (v197 == 45)
                  {
                    v197 = *((unsigned __int16 *)v196 + 1);
LABEL_457:
                    if ((v197 - 48) < 0xA)
                    {
                      if ((_DWORD)v195 == 2)
                        goto LABEL_173;
                      goto LABEL_468;
                    }
                    if ((_DWORD)v195 != 9)
                      goto LABEL_498;
LABEL_467:
                    if (v197 != 73)
                      goto LABEL_498;
                    goto LABEL_468;
                  }
                  if ((v197 - 48) < 0xA || (_DWORD)v195 == 8 && v197 == 73)
                    goto LABEL_468;
                }
                if ((_DWORD)v195 != 3 || v197 != 78)
                  goto LABEL_498;
LABEL_468:
                v284 = v284 & 0xFFFFFF0000000000 | v195 | ((unint64_t)((v194 >> 2) & 1) << 32);
                JSC::jsToNumber(v196, v284);
                v199 = (v198 >> 52) & 0x7FF;
                if ((_DWORD)v199 == 2047)
                {
                  if ((v198 & 0xFFFFFFFFFFFFFLL) != 0)
                  {
                    qmemcpy(__s, "NaN", sizeof(__s));
                    v200 = v306;
                  }
                  else
                  {
                    if ((v198 & 0x8000000000000000) != 0)
                    {
                      __s[0] = 45;
                      v206 = &__s[1];
                    }
                    else
                    {
                      v206 = __s;
                    }
                    *(_QWORD *)v206 = 0x7974696E69666E49;
                    v200 = v206 + 8;
                  }
                  goto LABEL_482;
                }
                v201 = v198 & 0x7FFFFFFFFFFFFFFFLL;
                if ((v198 & 0x8000000000000000) != 0 && v201)
                {
                  __s[0] = 45;
                  v202 = &__s[1];
                }
                else
                {
                  if (!v201)
                  {
                    __s[0] = 48;
                    v200 = &__s[1];
                    goto LABEL_482;
                  }
                  v202 = __s;
                }
                v203 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v198 & 0x800FFFFFFFFFFFFFLL, v199);
                v200 = WTF::dragonbox::detail::to_shortest(v203, v204, (uint64_t)v202, v205);
LABEL_482:
                *v200 = 0;
                v207 = strlen(__s);
                memcpy(&__dst, __s, v207);
                *((_BYTE *)&__dst + v207) = 0;
                v208 = *(unsigned int *)(v291 + 4);
                v209 = *(unsigned __int8 **)(v291 + 8);
                if ((*(_BYTE *)(v291 + 16) & 4) != 0)
                {
                  if ((_DWORD)v208)
                  {
                    p_dst = &__dst;
                    v215 = *(unsigned int *)(v291 + 4);
                    do
                    {
                      v217 = *(unsigned __int8 *)p_dst;
                      p_dst = (JSC::VM **)((char *)p_dst + 1);
                      v216 = v217;
                      if (!v217 || *v209 != v216)
                        goto LABEL_498;
                      ++v209;
                    }
                    while (--v215);
                  }
                }
                else if ((_DWORD)v208)
                {
                  v210 = &__dst;
                  v211 = *(unsigned int *)(v291 + 4);
                  while (1)
                  {
                    v213 = *(unsigned __int8 *)v210;
                    v210 = (JSC::VM **)((char *)v210 + 1);
                    v212 = v213;
                    if (!v213 || *(unsigned __int16 *)v209 != v212)
                      break;
                    v209 += 2;
                    if (!--v211)
                      goto LABEL_494;
                  }
LABEL_498:
                  v11 = v289;
                  goto LABEL_426;
                }
LABEL_494:
                v11 = v289;
                if (!*((_BYTE *)&__dst + v208))
                  goto LABEL_173;
LABEL_426:
                if ((*(_WORD *)(v186 + 12) & 0x800) == 0)
                {
                  v189 = *(_DWORD *)v67;
LABEL_428:
                  v190 = *(_QWORD *)(16 * (v189 & 0xFFFFFFFE) + 0x30);
                  if (!v190)
                    v190 = *(_QWORD *)(v67 + 16);
                  goto LABEL_430;
                }
                v189 = *(_DWORD *)v67;
                if (BYTE2(v297[1]) == 3)
                  goto LABEL_428;
                v191 = 16 * (v189 & 0xFFFFFFFE);
                if ((*(_WORD *)(v191 + 12) & 0x800) != 0)
                {
                  v190 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                            * *(unsigned int *)(v191 + 76)
                                                                                            + 0xB0))(v67, v11);
                }
                else
                {
                  v190 = *(_QWORD *)(v191 + 48);
                  if (!v190)
                    v190 = *(_QWORD *)(v67 + 16);
                }
                if (*(_DWORD *)(v185 + 80))
                {
                  v192 = *(_DWORD *)(v185 + 80);
                  if ((v192 & 0x27) != 0 && (v192 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v185 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  if (*(_QWORD *)(v185 + 16))
                    goto LABEL_173;
                }
LABEL_430:
                if ((v190 & 0xFFFE000000000002) == 0)
                {
                  v67 = v190;
                  if (*(unsigned __int8 *)(v190 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_173;
              }
            }
            goto LABEL_632;
          }
          v116 = 0;
          LOBYTE(v114) = 0;
        }
        else
        {
          v116 = 0;
        }
        v117 = 0;
        goto LABEL_418;
      }
      if ((_DWORD)v114)
      {
        v256 = *(unsigned __int8 *)v113 - 48;
        if (v256 <= 9 && (v114 < 2 || *(_BYTE *)v113 != 48))
        {
          v272 = v114 - 1;
          v273 = (unsigned __int8 *)v113 + 1;
          while (v272)
          {
            if (v256 > 0x19999999)
              goto LABEL_629;
            v274 = *v273 - 48;
            if (v274 > 9)
              goto LABEL_629;
            v184 = 0;
            LOBYTE(v114) = 0;
            v257 = 0;
            v93 = __CFADD__(v274, 10 * v256);
            v256 = v274 + 10 * v256;
            --v272;
            ++v273;
            if (v93)
              goto LABEL_631;
          }
          if (v256 == -1)
            v184 = 0;
          else
            v184 = v256 & 0xFFFFFF00;
          if (v256 == -1)
            LOBYTE(v114) = 0;
          else
            LOBYTE(v114) = v256;
          if (v256 == -1)
            v257 = 0;
          else
            v257 = 0x100000000;
LABEL_631:
          v117 = v114;
          if ((v257 & 0x100000000) == 0)
            goto LABEL_419;
LABEL_632:
          v258 = v117 | v184;
          v259 = *((_QWORD *)v11 + 7);
          v56 = 10;
          while (1)
          {
            v260 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
            v261 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v260 + 0x4C) + 0x70))(v10, v11, v258, &v292);
            v262 = v261;
            if (*(_DWORD *)(v259 + 80))
            {
              v265 = *(_DWORD *)(v259 + 80);
              if ((v265 & 0x27) != 0 && (v265 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v259 + 64), 7u, a3, a4, a5, a6, a7, a8);
              v266 = *(_QWORD *)(v259 + 16);
              if (v266)
                v267 = 1;
              else
                v267 = v262;
              if ((v267 & 1) != 0)
              {
                if (v266)
                  goto LABEL_172;
                goto LABEL_163;
              }
            }
            else if ((v261 & 1) != 0)
            {
              goto LABEL_163;
            }
            if (BYTE2(v297[1]) == 3)
            {
              if (BYTE4(v297[1]))
                goto LABEL_173;
              v263 = *((unsigned __int8 *)v10 + 5);
              if (v263 == 61)
                goto LABEL_638;
            }
            else
            {
              v263 = *((unsigned __int8 *)v10 + 5);
              if (v263 == 61)
              {
                if (BYTE2(v297[1]) == 1)
                  goto LABEL_173;
                goto LABEL_638;
              }
            }
            if ((v263 - 39) <= 0xA)
            {
              if ((*((_BYTE *)v10 + 40) & 7u) > 2)
              {
                LOBYTE(__dst) = 0;
                v304 = 0;
                v270 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v10, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                v269 = v271 ? v270 : 0;
              }
              else
              {
                v269 = *((_QWORD *)v10 + 3);
              }
              if (v269 <= v258)
                goto LABEL_173;
            }
LABEL_638:
            if ((*(_WORD *)(v260 + 12) & 0x800) == 0 || BYTE2(v297[1]) == 3)
            {
              v264 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
              if (!v264)
                v264 = *((_QWORD *)v10 + 2);
            }
            else
            {
              if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
              {
                v264 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *))(16
                                                                                          * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)
                                                                                          + 0xB0))(v10, v11);
              }
              else
              {
                v264 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                if (!v264)
                  v264 = *((_QWORD *)v10 + 2);
              }
              if (*(_DWORD *)(v259 + 80))
              {
                v268 = *(_DWORD *)(v259 + 80);
                if ((v268 & 0x27) != 0 && (v268 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v259 + 64), 7u, a3, a4, a5, a6, a7, a8);
                if (*(_QWORD *)(v259 + 16))
                  goto LABEL_173;
              }
            }
            if ((v264 & 0xFFFE000000000002) == 0)
            {
              v10 = (JSC::Structure *)v264;
              if (*(unsigned __int8 *)(v264 + 5) > 0x16u)
                continue;
            }
            goto LABEL_173;
          }
        }
LABEL_629:
        v184 = 0;
        LOBYTE(v114) = 0;
      }
      else
      {
        v184 = 0;
      }
      v257 = 0;
      goto LABEL_631;
    }
    if (*(_QWORD *)(*(_QWORD *)(v63 + 41952) + 1768) == v291)
    {
      v239 = *((_QWORD *)v10 + 1);
      if ((v239 & 1) != 0)
        v240 = (unsigned int *)((char *)v10 + 16);
      else
        v240 = (unsigned int *)(v239 + 4);
      v241 = *v240;
      if ((v241 & 0x80000000) != 0)
        Index = COERCE__INT64((double)v241) + 0x2000000000000;
      else
        Index = v241 | 0xFFFE000000000000;
      v243 = 14;
      goto LABEL_600;
    }
    if (!v291 || (v245 = *(_DWORD *)(v291 + 16), (v245 & 0x20) != 0))
    {
LABEL_622:
      v244 = 0;
      goto LABEL_623;
    }
    v246 = *(_BYTE **)(v291 + 8);
    v247 = *(unsigned int *)(v291 + 4);
    if ((v245 & 4) != 0)
    {
      if (!(_DWORD)v247 || (v276 = *v246 - 48, v276 > 9) || v247 >= 2 && *v246 == 48)
      {
LABEL_717:
        v254 = 0;
        LOBYTE(v250) = 0;
        v280 = 0;
      }
      else
      {
        v277 = v247 - 1;
        v278 = v246 + 1;
        while (v277)
        {
          if (v276 <= 0x19999999)
          {
            v279 = *v278 - 48;
            if (v279 <= 9)
            {
              v93 = __CFADD__(v279, 10 * v276);
              v276 = v279 + 10 * v276;
              --v277;
              ++v278;
              if (!v93)
                continue;
            }
          }
          goto LABEL_717;
        }
        v254 = v276 & 0xFFFFFF00;
        if (v276 == -1)
        {
          v254 = 0;
          LOBYTE(v250) = 0;
        }
        else
        {
          LOBYTE(v250) = v276;
        }
        if (v276 == -1)
          v280 = 0;
        else
          v280 = 0x100000000;
      }
      v250 = v250;
      if ((v280 & 0x100000000) == 0)
        goto LABEL_622;
LABEL_725:
      a3 = v250 | v254;
      v281 = *((_QWORD *)v10 + 1);
      if ((v281 & 1) != 0)
        v282 = (_DWORD *)((char *)v10 + 16);
      else
        v282 = (_DWORD *)(v281 + 4);
      if (*v282 > a3)
      {
        Index = JSC::JSString::getIndex(v10, v11, a3, a4, a5, a6, a7, a8, a9);
        if (!*(_DWORD *)(v63 + 80))
          goto LABEL_730;
        v283 = *(_DWORD *)(v63 + 80);
        if ((v283 & 0x27) != 0 && (v283 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v63 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (!*(_QWORD *)(v63 + 16))
        {
LABEL_730:
          v243 = 10;
LABEL_600:
          v292 = (uint64_t (*)(unint64_t))Index;
          LODWORD(v294) = v243;
          v296 = 0;
          v244 = 1;
          BYTE1(v297[1]) = 1;
LABEL_623:
          if (*(_DWORD *)(v63 + 80))
          {
            v275 = *(_DWORD *)(v63 + 80);
            if ((v275 & 0x27) != 0 && (v275 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v63 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v63 + 16))
              goto LABEL_172;
          }
          if ((v244 & 1) != 0)
            goto LABEL_163;
          goto LABEL_625;
        }
      }
      goto LABEL_622;
    }
    if ((_DWORD)v247)
    {
      v248 = *(unsigned __int16 *)v246 - 48;
      if (v248 <= 9 && (*(_WORD *)v246 != 48 || v247 <= 1))
      {
        v251 = (unsigned __int16 *)(v246 + 2);
        v252 = v247 - 1;
        while (v252)
        {
          if (v248 > 0x19999999)
            goto LABEL_606;
          v253 = *v251 - 48;
          if (v253 > 9)
            goto LABEL_606;
          v249 = 0;
          LOBYTE(v247) = 0;
          v250 = 0;
          v93 = __CFADD__(v253, 10 * v248);
          v248 = v253 + 10 * v248;
          ++v251;
          --v252;
          if (v93)
            goto LABEL_621;
        }
        v250 = v248 & 0xFFFFFF00;
        v249 = 0x100000000;
        if (v248 == -1)
        {
          v249 = 0;
          LOBYTE(v247) = 0;
        }
        else
        {
          LOBYTE(v247) = v248;
        }
        if (v248 == -1)
          v250 = 0;
LABEL_621:
        v254 = v247;
        if ((v249 & 0x100000000) == 0)
          goto LABEL_622;
        goto LABEL_725;
      }
LABEL_606:
      v249 = 0;
      LOBYTE(v247) = 0;
    }
    else
    {
      v249 = 0;
    }
    v250 = 0;
    goto LABEL_621;
  }
  v17 = v291 >> 4;
  v18 = (unsigned int *)this;
  v19 = 1;
  while ((*((_BYTE *)v18 + 6) & 8) == 0 || v16 == 26 || v16 == 36 || v18 == *((unsigned int **)v11 + 84))
  {
    if (!(_DWORD)v17)
      goto LABEL_43;
    v20 = 16 * (*v18 & 0xFFFFFFFE);
    if ((v17 & ~*(_DWORD *)(v20 + 0x20)) != 0)
      goto LABEL_43;
    v21 = *(_QWORD *)(16 * (*v18 & 0xFFFFFFFE) + 0x58);
    if (!v21)
    {
      v22 = *(_QWORD *)(16 * (*v18 & 0xFFFFFFFE) + 0x40);
      if (!v22 || *(_BYTE *)(v22 + 5) != 1 && *(_DWORD *)(v22 + 80) < 2u)
        goto LABEL_43;
      JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*v18 & 0xFFFFFFFE)), v290, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
      if (!v21)
        goto LABEL_43;
    }
    if (!*(_DWORD *)(v21 + 24))
      goto LABEL_43;
    v23 = *(_QWORD *)(v21 + 16);
    v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
    v25 = *(unsigned int *)(v21 + 8);
    v26 = *(_DWORD *)(v291 + 16);
    if ((v23 & 1) != 0)
    {
      if ((v26 & 0x20) != 0)
        v26 = *(_DWORD *)(v291 + 32);
      v27 = *(_DWORD *)(v21 + 12);
      v28 = (v26 >> 8) & *(_QWORD *)&v27;
      v29 = *(unsigned __int8 *)(v24 + v28);
      if (!*(_BYTE *)(v24 + v28))
        goto LABEL_43;
      v30 = v24 + v25;
      v31 = 1;
      while (1)
      {
        v32 = *(_QWORD *)(v30 + 8 * (v29 - 1));
        if (v291 == (v32 & 0xFFFFFFFFFFFFLL))
          break;
        v28 = ((_DWORD)v28 + v31) & v27;
        v29 = *(unsigned __int8 *)(v24 + v28);
        ++v31;
        if (!*(_BYTE *)(v24 + v28))
          goto LABEL_43;
      }
      a6 = (v32 >> 16) & 0xFF00000000 | HIBYTE(v32);
    }
    else
    {
      if ((v26 & 0x20) != 0)
        v26 = *(_DWORD *)(v291 + 32);
      v33 = *(_DWORD *)(v21 + 12);
      v34 = v33 & (v26 >> 8);
      v35 = *(_DWORD *)(v24 + 4 * v34);
      if (!v35)
      {
LABEL_43:
        if ((*((_BYTE *)v18 + 6) & 0x20) != 0)
          OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot(v18, v290, v291, (uint64_t)&v292);
        else
          OwnStaticPropertySlot = 0;
        goto LABEL_45;
      }
      v36 = v24 + 4 * v25;
      v37 = 1;
      while (1)
      {
        v38 = (v35 - 1);
        if (v291 == *(_QWORD *)(v36 + 16 * v38))
          break;
        v34 = (v34 + v37) & v33;
        v35 = *(_DWORD *)(v24 + 4 * v34);
        ++v37;
        if (!v35)
          goto LABEL_43;
      }
      a6 = *(unsigned int *)(v36 + 16 * v38 + 8) | ((unint64_t)*(unsigned __int8 *)(v36 + 16 * v38 + 12) << 32);
    }
    if ((_DWORD)a6 == -1)
      goto LABEL_43;
    if ((int)a6 <= 63)
    {
      v39 = (uint64_t)(v18 + 4);
      v40 = a6 << 32;
    }
    else
    {
      v39 = *((_QWORD *)v18 + 1) - 8;
      v40 = 0x3F00000000 - (a6 << 32);
    }
    a5 = HIDWORD(a6);
    a4 = *(_QWORD *)(v39 + (v40 >> 29));
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_40;
    v41 = *(unsigned __int8 *)(a4 + 5);
    if (v41 == 5)
    {
      JSC::JSObject::fillGetterPropertySlot(v18, (uint64_t)v290, (uint64_t)&v292, a4, SHIDWORD(a6), a6);
      OwnStaticPropertySlot = 1;
      goto LABEL_45;
    }
    if (v41 == 6)
    {
      v48 = *(_DWORD *)(v20 + 16) & 3;
      v49 = *(_QWORD *)(a4 + 16);
      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                               + 0x4C)))
      {
        v51 = *(int8x16_t ***)(a4 + 24);
        v50 = *(_QWORD *)(a4 + 32);
        v292 = *(uint64_t (**)(unint64_t))(a4 + 8);
        v293 = v49;
        LODWORD(v294) = HIDWORD(a6);
        v296 = (JSC::Structure *)v18;
        BYTE1(v297[1]) = 3;
        OwnStaticPropertySlot = 1;
        if (v48 != 2)
          LOBYTE(v297[1]) = 1;
        BYTE3(v297[1]) = 1;
        v300 = v51;
        v301 = v50;
      }
      else
      {
        v292 = *(uint64_t (**)(unint64_t))(a4 + 8);
        v293 = v49;
        LODWORD(v294) = HIDWORD(a6);
        v296 = (JSC::Structure *)v18;
        OwnStaticPropertySlot = 1;
        BYTE1(v297[1]) = 3;
        if (v48 != 2)
          LOBYTE(v297[1]) = 1;
      }
    }
    else
    {
LABEL_40:
      v292 = (uint64_t (*)(unint64_t))a4;
      v296 = (JSC::Structure *)v18;
      v294 = __PAIR64__(a6, HIDWORD(a6));
      OwnStaticPropertySlot = 1;
      LOWORD(v297[1]) = 257;
    }
LABEL_45:
    if ((*(_DWORD *)(16 * (*v18 & 0xFFFFFFFE) + 0x10) & 3) == 2
      || (v43 = *(unsigned __int16 *)(16 * (*v18 & 0xFFFFFFFE) + 0xC), (v43 & 8) != 0))
    {
      v44 = 0;
    }
    else if ((v43 & 0x10) != 0)
    {
      v44 = (v43 >> 5) & 1;
    }
    else
    {
      v44 = 1;
    }
    v45 = v19 & v44;
    if (OwnStaticPropertySlot)
    {
      if (v45 && BYTE1(v297[1]) == 1 && LOBYTE(v297[1]) == 1 && SHIDWORD(v294) < 0x10000)
      {
        a4 = (uint64_t)v296;
        v52 = (WTF::AtomStringImpl *)*(unsigned int *)v10;
        v53 = (JSC::VM **)v11;
        if (v296 == v10 || (v54 = *(_DWORD *)((16 * (_QWORD)v52) | 0x10), (v54 & 3) == 0))
        {
          if ((*((_QWORD *)v290 + 11635) & 1) != 0)
            v55 = 0;
          else
            v55 = *((_QWORD *)v290 + 11635);
          JSC::MegamorphicCache::initAsHit(v55, v52, (WTF::StringImpl *)v291, (uint64_t)v296, WORD2(v294), v296 == v10, a7, a8);
LABEL_84:
          if (BYTE1(v297[1]) == 1)
          {
LABEL_85:
            v56 = (uint64_t)v292;
            goto LABEL_173;
          }
          if (BYTE1(v297[1]) == 2)
          {
            v60 = (JSC::JSGlobalObject *)v53;
            goto LABEL_97;
          }
          v82 = (unint64_t)v296;
          v83 = *(_QWORD *)(16 * (*(_DWORD *)v296 & 0xFFFFFFFE) + 0x28);
          if ((v294 & 0x20) != 0)
            v82 = (unint64_t)v295;
          if (BYTE3(v297[1]) != 1)
            goto LABEL_151;
          v84 = v53[7];
          v85 = v300;
          if ((v82 & 0xFFFE000000000002) != 0)
            goto LABEL_406;
          v86 = *(unsigned int *)(16 * (*(_DWORD *)v82 & 0xFFFFFFFE) + 0x4C);
          v87 = *(_DWORD *)(16 * (*(_DWORD *)v82 & 0xFFFFFFFE) + 0x4C) != 0;
          if ((_DWORD)v86)
          {
            v88 = 16 * v86;
            if (v300 != (int8x16_t **)v88)
            {
              do
              {
                v88 = *(_QWORD *)(v88 + 16);
                v87 = v88 != 0;
              }
              while ((int8x16_t **)v88 != v300 && v88 != 0);
            }
          }
LABEL_150:
          if (v87)
            goto LABEL_151;
          goto LABEL_406;
        }
        if ((v54 & 0x800000) == 0 || !v9)
          goto LABEL_84;
        *(_WORD *)(v9 + 129) |= 4u;
        if (*(_BYTE *)(v9 + 124))
        {
          --*(_BYTE *)(v9 + 124);
LABEL_235:
          v53 = (JSC::VM **)v11;
          goto LABEL_84;
        }
      }
      else
      {
        v53 = (JSC::VM **)v11;
        if (!v9)
          goto LABEL_84;
        *(_WORD *)(v9 + 129) |= 4u;
        if (*(_BYTE *)(v9 + 124))
        {
          --*(_BYTE *)(v9 + 124);
          goto LABEL_84;
        }
      }
      v122 = *(unsigned __int8 *)(v9 + 125);
      if (v122 != 255)
        *(_BYTE *)(v9 + 125) = ++v122;
      if (xmmword_1ECF4C260 < v122)
      {
        *(_BYTE *)(v9 + 125) = 0;
        v125 = *(unsigned __int8 *)(v9 + 126);
        v126 = BYTE4(xmmword_1ECF4C260) << v125;
        v127 = v126;
        if (v126 == 255)
          LOBYTE(v126) = -2;
        if (v127 >> v125 == BYTE4(xmmword_1ECF4C260))
          v128 = v126;
        else
          v128 = -2;
        *(_BYTE *)(v9 + 124) = v128;
        if (v125 != 255)
          *(_BYTE *)(v9 + 126) = v125 + 1;
        *(_BYTE *)(v9 + 127) = 0;
      }
      else if (*(_BYTE *)(v9 + 127))
      {
        --*(_BYTE *)(v9 + 127);
      }
      JSC::repatchGetBySlowPathCall(*(JSC::CodeBlock **)(v12 + 16), v9, 3, a4, a5, a6, a7, a8);
      goto LABEL_235;
    }
    v46 = *(_QWORD *)(16 * (*v18 & 0xFFFFFFFE) + 0x30);
    if ((*(_WORD *)(16 * (*v18 & 0xFFFFFFFE) + 0xC) & 0x80) != 0 || v46 == 0)
      v19 = 0;
    else
      v19 = v45;
    if (!v46)
      v46 = *((_QWORD *)v18 + 2);
    if ((v46 & 0xFFFE000000000002) == 0)
    {
      v16 = *(unsigned __int8 *)(v46 + 5);
      v18 = (unsigned int *)v46;
      if (v16 > 0x16)
        continue;
    }
    if (!v19)
      goto LABEL_218;
    v57 = (WTF::AtomStringImpl *)*(unsigned int *)v10;
    v58 = *(_DWORD *)((16 * (_QWORD)v57) | 0x10);
    if ((v58 & 3) == 0)
    {
      if ((*((_QWORD *)v290 + 11635) & 1) != 0)
        v59 = 0;
      else
        v59 = *((_QWORD *)v290 + 11635);
      JSC::MegamorphicCache::initAsMiss(v59, v57, (WTF::StringImpl *)v291, a4, a5, a6, a7, a8);
      goto LABEL_172;
    }
    if ((v58 & 0x800000) != 0)
    {
LABEL_218:
      if (v9)
      {
        *(_WORD *)(v9 + 129) |= 4u;
        if (*(_BYTE *)(v9 + 124))
        {
          --*(_BYTE *)(v9 + 124);
        }
        else
        {
          v123 = *(unsigned __int8 *)(v9 + 125);
          if (v123 != 255)
            *(_BYTE *)(v9 + 125) = ++v123;
          if (xmmword_1ECF4C260 < v123)
          {
            *(_BYTE *)(v9 + 125) = 0;
            v129 = *(unsigned __int8 *)(v9 + 126);
            v130 = BYTE4(xmmword_1ECF4C260) << v129;
            v131 = v130;
            if (v130 == 255)
              LOBYTE(v130) = -2;
            if (v131 >> v129 == BYTE4(xmmword_1ECF4C260))
              v132 = v130;
            else
              v132 = -2;
            *(_BYTE *)(v9 + 124) = v132;
            if (v129 != 255)
              *(_BYTE *)(v9 + 126) = v129 + 1;
            *(_BYTE *)(v9 + 127) = 0;
          }
          else if (*(_BYTE *)(v9 + 127))
          {
            --*(_BYTE *)(v9 + 127);
          }
          JSC::repatchGetBySlowPathCall(*(JSC::CodeBlock **)(v12 + 16), v9, 3, a4, a5, a6, a7, a8);
        }
      }
    }
LABEL_172:
    v56 = 10;
    goto LABEL_173;
  }
  v124 = (uint64_t)v18;
  if (v9)
  {
    *(_WORD *)(v9 + 129) |= 4u;
    if (*(_BYTE *)(v9 + 124))
    {
      --*(_BYTE *)(v9 + 124);
    }
    else
    {
      v133 = *(unsigned __int8 *)(v9 + 125);
      if (v133 != 255)
        *(_BYTE *)(v9 + 125) = ++v133;
      if (xmmword_1ECF4C260 < v133)
      {
        *(_BYTE *)(v9 + 125) = 0;
        v180 = *(unsigned __int8 *)(v9 + 126);
        v181 = BYTE4(xmmword_1ECF4C260) << v180;
        v182 = v181;
        if (v181 == 255)
          LOBYTE(v181) = -2;
        if (v182 >> v180 == BYTE4(xmmword_1ECF4C260))
          v183 = v181;
        else
          v183 = -2;
        *(_BYTE *)(v9 + 124) = v183;
        if (v180 != 255)
          *(_BYTE *)(v9 + 126) = v180 + 1;
        *(_BYTE *)(v9 + 127) = 0;
      }
      else if (*(_BYTE *)(v9 + 127))
      {
        --*(_BYTE *)(v9 + 127);
      }
      JSC::repatchGetBySlowPathCall(*(JSC::CodeBlock **)(v12 + 16), v9, 3, a4, a5, a6, a7, a8);
    }
  }
  v134 = *((_QWORD *)v11 + 7);
  v56 = 10;
  while (1)
  {
    v135 = *(_DWORD *)v124 & 0xFFFFFFFE;
    v136 = 16 * v135;
    if ((*(_BYTE *)(v124 + 6) & 8) == 0)
      break;
    v285 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * v135 + 0x4C) + 0x68))(v124, v11, v291, &v292);
    if (*(_DWORD *)(v134 + 80))
    {
      v166 = *(_DWORD *)(v134 + 80);
      if ((v166 & 0x27) != 0 && (v166 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v134 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v134 + 16))
        goto LABEL_173;
    }
    if ((v285 & 1) != 0)
      goto LABEL_383;
    if (BYTE2(v297[1]) == 3)
    {
      if (BYTE4(v297[1]))
        goto LABEL_173;
      v143 = *(unsigned __int8 *)(v124 + 5);
      if (v143 == 61)
        goto LABEL_286;
    }
    else
    {
      v143 = *(unsigned __int8 *)(v124 + 5);
      if (v143 == 61)
      {
        if (BYTE2(v297[1]) == 1)
          goto LABEL_173;
        goto LABEL_286;
      }
    }
    if ((v143 - 50) < 0xFFFFFFF5)
      goto LABEL_286;
    if (!v291)
      goto LABEL_286;
    v144 = *(_DWORD *)(v291 + 16);
    if ((v144 & 0x20) != 0)
      goto LABEL_286;
    v145 = *(unsigned int *)(v291 + 4);
    if (!(_DWORD)v145)
      goto LABEL_286;
    v146 = *(unsigned __int8 **)(v291 + 8);
    if ((v144 & 4) != 0)
    {
      v147 = *v146;
      if ((_DWORD)v145 == 1)
      {
LABEL_313:
        if ((v147 - 48) < 0xA)
          goto LABEL_173;
        goto LABEL_286;
      }
      if (v147 == 45)
      {
        v147 = v146[1];
        goto LABEL_317;
      }
      if ((v147 - 48) < 0xA)
        goto LABEL_328;
      if ((_DWORD)v145 == 8)
        goto LABEL_327;
    }
    else
    {
      v147 = *(unsigned __int16 *)v146;
      if ((_DWORD)v145 == 1)
        goto LABEL_313;
      if (v147 == 45)
      {
        v147 = *((unsigned __int16 *)v146 + 1);
LABEL_317:
        if ((v147 - 48) < 0xA)
        {
          if ((_DWORD)v145 == 2)
            goto LABEL_173;
          goto LABEL_328;
        }
        if ((_DWORD)v145 != 9)
          goto LABEL_286;
LABEL_327:
        if (v147 != 73)
          goto LABEL_286;
        goto LABEL_328;
      }
      if ((v147 - 48) < 0xA || (_DWORD)v145 == 8 && v147 == 73)
        goto LABEL_328;
    }
    if ((_DWORD)v145 != 3 || v147 != 78)
      goto LABEL_286;
LABEL_328:
    v284 = v284 & 0xFFFFFF0000000000 | v145 | ((unint64_t)((v144 >> 2) & 1) << 32);
    JSC::jsToNumber(v146, v284);
    v149 = (v148 >> 52) & 0x7FF;
    if ((_DWORD)v149 == 2047)
    {
      if ((v148 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", sizeof(__s));
        v150 = v306;
      }
      else
      {
        if ((v148 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v155 = &__s[1];
        }
        else
        {
          v155 = __s;
        }
        *(_QWORD *)v155 = 0x7974696E69666E49;
        v150 = v155 + 8;
      }
      goto LABEL_342;
    }
    v151 = v148 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v148 & 0x8000000000000000) != 0 && v151)
    {
      __s[0] = 45;
      v286 = &__s[1];
    }
    else
    {
      if (!v151)
      {
        __s[0] = 48;
        v150 = &__s[1];
        goto LABEL_342;
      }
      v286 = __s;
    }
    v152 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v148 & 0x800FFFFFFFFFFFFFLL, v149);
    v150 = WTF::dragonbox::detail::to_shortest(v152, v153, (uint64_t)v286, v154);
LABEL_342:
    *v150 = 0;
    v287 = strlen(__s);
    memcpy(&__dst, __s, v287);
    *((_BYTE *)&__dst + v287) = 0;
    v156 = *(unsigned int *)(v291 + 4);
    v157 = *(unsigned __int8 **)(v291 + 8);
    if ((*(_BYTE *)(v291 + 16) & 4) != 0)
    {
      if ((_DWORD)v156)
      {
        v162 = &__dst;
        v163 = *(unsigned int *)(v291 + 4);
        do
        {
          v165 = *(unsigned __int8 *)v162;
          v162 = (JSC::VM **)((char *)v162 + 1);
          v164 = v165;
          if (!v165 || *v157 != v164)
            goto LABEL_286;
          ++v157;
        }
        while (--v163);
      }
    }
    else if ((_DWORD)v156)
    {
      v158 = &__dst;
      v159 = *(unsigned int *)(v291 + 4);
      do
      {
        v161 = *(unsigned __int8 *)v158;
        v158 = (JSC::VM **)((char *)v158 + 1);
        v160 = v161;
        if (!v161 || *(unsigned __int16 *)v157 != v160)
          goto LABEL_286;
        v157 += 2;
      }
      while (--v159);
    }
    if (!*((_BYTE *)&__dst + v156))
      goto LABEL_173;
LABEL_286:
    if ((*(_WORD *)(v136 + 12) & 0x800) == 0)
    {
      v139 = *(_DWORD *)v124;
LABEL_288:
      v140 = *(_QWORD *)(16 * (v139 & 0xFFFFFFFE) + 0x30);
      if (!v140)
        v140 = *(_QWORD *)(v124 + 16);
      goto LABEL_290;
    }
    v139 = *(_DWORD *)v124;
    if (BYTE2(v297[1]) == 3)
      goto LABEL_288;
    v141 = 16 * (v139 & 0xFFFFFFFE);
    if ((*(_WORD *)(v141 + 12) & 0x800) != 0)
    {
      v140 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v141 + 76) + 0xB0))(v124, v11);
    }
    else
    {
      v140 = *(_QWORD *)(v141 + 48);
      if (!v140)
        v140 = *(_QWORD *)(v124 + 16);
    }
    if (*(_DWORD *)(v134 + 80))
    {
      v142 = *(_DWORD *)(v134 + 80);
      if ((v142 & 0x27) != 0 && (v142 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v134 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v134 + 16))
        goto LABEL_173;
    }
LABEL_290:
    if ((v140 & 0xFFFE000000000002) == 0)
    {
      v124 = v140;
      if (*(unsigned __int8 *)(v140 + 5) > 0x16u)
        continue;
    }
    goto LABEL_173;
  }
  if (!(_DWORD)v17
    || (v17 & ~*(_DWORD *)(16 * v135 + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * v135), (JSC::VM *)v134, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v137)|| (__dst = (JSC::VM *)v291, v138 = JSC::PropertyTable::get(v137, (uint64_t *)&__dst), a6 = v138, (_DWORD)v138 == -1))
  {
    if ((*(_BYTE *)(v124 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v124, (JSC::VM *)v134, v291, (uint64_t)&v292) & 1) != 0)
    {
      goto LABEL_383;
    }
    goto LABEL_286;
  }
  v167 = HIDWORD(v138);
  if ((int)v138 <= 63)
  {
    v168 = v124 + 16;
    v169 = v138 << 32;
  }
  else
  {
    v168 = *(_QWORD *)(v124 + 8) - 8;
    v169 = 0x3F00000000 - (v138 << 32);
  }
  v56 = *(_QWORD *)(v168 + (v169 >> 29));
  if ((v56 & 0xFFFE000000000002) != 0)
    goto LABEL_381;
  v170 = *(unsigned __int8 *)(v56 + 5);
  if (v170 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v124, v134, (uint64_t)&v292, v56, SHIDWORD(v138), v138);
LABEL_383:
    if (BYTE1(v297[1]) != 2)
    {
      if (BYTE1(v297[1]) != 1)
      {
        v124 = (uint64_t)v296;
        LOBYTE(v167) = v294;
        goto LABEL_391;
      }
      goto LABEL_85;
    }
    v60 = v11;
LABEL_97:
    v61 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v292, v60, a3, a4, a5, a6, a7, a8);
    goto LABEL_152;
  }
  if (v170 != 6)
  {
LABEL_381:
    v292 = (uint64_t (*)(unint64_t))v56;
    v296 = (JSC::Structure *)v124;
    v294 = __PAIR64__(v138, HIDWORD(v138));
    LOWORD(v297[1]) = 257;
    goto LABEL_173;
  }
  v171 = *(_DWORD *)(v136 + 16) & 3;
  v172 = *(_QWORD *)(v56 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v56 & 0xFFFFFFFE) + 0x4C)))
  {
    v174 = *(int8x16_t ***)(v56 + 24);
    v173 = *(_QWORD *)(v56 + 32);
    v292 = *(uint64_t (**)(unint64_t))(v56 + 8);
    v293 = v172;
    LODWORD(v294) = HIDWORD(v138);
    v296 = (JSC::Structure *)v124;
    BYTE1(v297[1]) = 3;
    if (v171 != 2)
      LOBYTE(v297[1]) = 1;
    BYTE3(v297[1]) = 1;
    v300 = v174;
    v301 = v173;
  }
  else
  {
    v292 = *(uint64_t (**)(unint64_t))(v56 + 8);
    v293 = v172;
    LODWORD(v294) = HIDWORD(v138);
    v296 = (JSC::Structure *)v124;
    BYTE1(v297[1]) = 3;
    if (v171 != 2)
      LOBYTE(v297[1]) = 1;
  }
LABEL_391:
  v83 = *(_QWORD *)(16 * (*(_DWORD *)v124 & 0xFFFFFFFE) + 0x28);
  if ((v167 & 0x20) != 0)
    v124 = (uint64_t)v295;
  if (BYTE3(v297[1]) != 1)
    goto LABEL_151;
  v84 = (JSC::VM *)*((_QWORD *)v11 + 7);
  v85 = v300;
  if ((v124 & 0xFFFE000000000002) == 0)
  {
    v175 = *(unsigned int *)(16 * (*(_DWORD *)v124 & 0xFFFFFFFE) + 0x4C);
    v176 = *(_DWORD *)(16 * (*(_DWORD *)v124 & 0xFFFFFFFE) + 0x4C) != 0;
    v177 = 16 * v175;
    if ((_DWORD)v175)
      v178 = v300 == (int8x16_t **)v177;
    else
      v178 = 1;
    if (!v178)
    {
      do
      {
        v177 = *(_QWORD *)(v177 + 16);
        v176 = v177 != 0;
      }
      while ((int8x16_t **)v177 != v300 && v177 != 0);
    }
    if (v176)
    {
LABEL_151:
      v61 = v292(v83);
      goto LABEL_152;
    }
  }
LABEL_406:
  __dst = v84;
  v61 = JSC::throwDOMAttributeGetterTypeError(v83, &__dst, v85, (WTF::StringImpl *)v291);
LABEL_152:
  v56 = v61;
LABEL_173:
  if (v299)
  {
    v97 = *(_DWORD *)(v298 + 4);
    if (!v97)
    {
      __break(0xC471u);
      JUMPOUT(0x198775C80);
    }
    *(_DWORD *)(v298 + 4) = v97 - 1;
  }
  return v56;
}

uint64_t operationGetByIdWithThisMegamorphicGeneric(JSC::JSGlobalObject *a1, int64_t this, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  unint64_t v14;
  char **v15;
  int64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char **v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int OwnStaticPropertySlot;
  char **v43;
  unsigned int v44;
  int v45;
  int v46;
  int64_t v47;
  char **v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int8x16_t **v53;
  int v54;
  WTF::AtomStringImpl *v55;
  uint64_t v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  JSC::JSGlobalObject *v59;
  uint64_t v60;
  JSC::JSString *v61;
  unint64_t v62;
  JSC::VM *v63;
  int8x16_t **v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  BOOL v68;
  char **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  unsigned __int8 *v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  size_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  unsigned __int8 *v95;
  JSC::VM **v96;
  uint64_t v97;
  int v98;
  int v99;
  JSC::VM **v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  int8x16_t **v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v118;
  unsigned int *v119;
  uint64_t v120;
  uint64_t Index;
  int v122;
  char v123;
  int v124;
  _WORD *v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  unsigned __int16 *v130;
  uint64_t v131;
  unsigned int v132;
  BOOL v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE *v137;
  unint64_t v138;
  uint64_t v139;
  JSC::VM *v140;
  JSC::JSString *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  _WORD *v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v153;
  int v154;
  unsigned __int16 *v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  int v161;
  uint64_t v162;
  uint64_t v163;
  int8x16_t **v164;
  int v165;
  _WORD *v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  unsigned int v170;
  unint64_t v171;
  unsigned __int16 *v172;
  uint64_t v173;
  unsigned int v174;
  unsigned int v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  int v185;
  unsigned int v186;
  uint64_t v187;
  unsigned __int8 *v188;
  int v189;
  unint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  size_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  unsigned __int8 *v199;
  JSC::VM **v200;
  uint64_t v201;
  int v202;
  int v203;
  JSC::VM **p_dst;
  uint64_t v205;
  int v206;
  int v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  int8x16_t **v215;
  unsigned int v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  char v223;
  int v224;
  uint64_t v225;
  int v226;
  int v227;
  unint64_t v228;
  unint64_t v229;
  char v230;
  uint64_t v231;
  unsigned __int8 *v232;
  unsigned int v233;
  unsigned int v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  char v240;
  char v241;
  int v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  char v246;
  unint64_t v247;
  int v248;
  unint64_t v249;
  char v250;
  JSC::JSString *v251;
  uint64_t v252;
  uint64_t v253;
  BOOL v254;
  uint64_t v256;
  unsigned __int8 *v257;
  unsigned int v258;
  int v259;
  unsigned int v260;
  uint64_t v261;
  uint64_t v262;
  _DWORD *v263;
  int v264;
  uint64_t v265;
  unsigned __int8 *v266;
  unsigned int v267;
  unint64_t v268;
  unint64_t v269;
  char v270;
  char *v271;
  int v272;
  char v274;
  char *v275;
  int v276;
  JSC::VM *v277;
  uint64_t (*v278)(unint64_t);
  uint64_t v279;
  unint64_t v280;
  JSC::JSString *v281;
  JSC::JSString *v282;
  _QWORD v283[2];
  uint64_t v284;
  char v285;
  int8x16_t **v286;
  uint64_t v287;
  JSC::JSString *v288;
  JSC::VM *__dst;
  char v290;
  char __s[3];
  _BYTE v292[39];
  uint64_t vars0;

  v10 = (unint64_t)a1;
  *(_QWORD *)&v292[23] = *MEMORY[0x1E0C80C00];
  v277 = (JSC::VM *)*((_QWORD *)a1 + 7);
  *((_QWORD *)v277 + 5) = vars0;
  v288 = (JSC::JSString *)this;
  if (a4)
  {
    if ((a4 & 1) != 0)
      v11 = a4 & 0xFFFFFFFFFFFFFFFELL;
    else
      v11 = *(_QWORD *)(a4 + 8);
  }
  else
  {
    v11 = 0;
  }
  a9.i64[0] = 0xFFFFFFFF00000000;
  v280 = 0xFFFFFFFF00000000;
  LOBYTE(v284) = 0;
  v285 = 0;
  v286 = 0;
  v287 = 0;
  v282 = 0;
  memset(v283, 0, 13);
  v281 = (JSC::JSString *)a3;
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_272;
  v12 = *(unsigned __int8 *)(this + 5);
  if (v12 <= 0x16)
  {
    if (v12 != 2)
    {
      v10 = (unint64_t)a1;
      goto LABEL_272;
    }
    if (*(_QWORD *)(*((_QWORD *)v277 + 5244) + 1768) == v11)
    {
      v118 = *(_QWORD *)(this + 8);
      if ((v118 & 1) != 0)
        v119 = (unsigned int *)(this + 16);
      else
        v119 = (unsigned int *)(v118 + 4);
      v120 = *v119;
      if ((v120 & 0x80000000) != 0)
        Index = COERCE__INT64((double)v120) + 0x2000000000000;
      else
        Index = v120 | 0xFFFE000000000000;
      v122 = 14;
      goto LABEL_245;
    }
    if (!v11 || (v124 = *(_DWORD *)(v11 + 16), (v124 & 0x20) != 0))
    {
LABEL_269:
      v123 = 0;
      goto LABEL_270;
    }
    v125 = *(_WORD **)(v11 + 8);
    v126 = *(unsigned int *)(v11 + 4);
    if ((v124 & 4) == 0)
    {
      if ((_DWORD)v126)
      {
        v127 = (unsigned __int16)*v125 - 48;
        if (v127 <= 9 && (*v125 != 48 || v126 <= 1))
        {
          v130 = v125 + 1;
          v131 = v126 - 1;
          while (v131)
          {
            if (v127 > 0x19999999)
              goto LABEL_253;
            v132 = *v130 - 48;
            if (v132 > 9)
              goto LABEL_253;
            v128 = 0;
            LOBYTE(v126) = 0;
            v129 = 0;
            v133 = __CFADD__(v132, 10 * v127);
            v127 = v132 + 10 * v127;
            ++v130;
            --v131;
            if (v133)
              goto LABEL_268;
          }
          v129 = v127 & 0xFFFFFF00;
          v128 = 0x100000000;
          if (v127 == -1)
          {
            v128 = 0;
            LOBYTE(v126) = 0;
          }
          else
          {
            LOBYTE(v126) = v127;
          }
          if (v127 == -1)
            v129 = 0;
LABEL_268:
          v134 = v126;
          if ((v128 & 0x100000000) == 0)
            goto LABEL_269;
          goto LABEL_637;
        }
LABEL_253:
        v128 = 0;
        LOBYTE(v126) = 0;
      }
      else
      {
        v128 = 0;
      }
      v129 = 0;
      goto LABEL_268;
    }
    if ((_DWORD)v126)
    {
      v260 = *(unsigned __int8 *)v125 - 48;
      if (v260 <= 9 && (v126 < 2 || *(_BYTE *)v125 != 48))
      {
        v265 = v126 - 1;
        v266 = (unsigned __int8 *)v125 + 1;
        while (v265)
        {
          if (v260 > 0x19999999)
            goto LABEL_634;
          v267 = *v266 - 48;
          if (v267 > 9)
            goto LABEL_634;
          v134 = 0;
          LOBYTE(v126) = 0;
          v261 = 0;
          v133 = __CFADD__(v267, 10 * v260);
          v260 = v267 + 10 * v260;
          --v265;
          ++v266;
          if (v133)
            goto LABEL_636;
        }
        if (v260 == -1)
          v134 = 0;
        else
          v134 = v260 & 0xFFFFFF00;
        if (v260 == -1)
          LOBYTE(v126) = 0;
        else
          LOBYTE(v126) = v260;
        if (v260 == -1)
          v261 = 0;
        else
          v261 = 0x100000000;
LABEL_636:
        v129 = v126;
        if ((v261 & 0x100000000) == 0)
          goto LABEL_269;
LABEL_637:
        a3 = v129 | v134;
        v262 = *(_QWORD *)(this + 8);
        if ((v262 & 1) != 0)
          v263 = (_DWORD *)(this + 16);
        else
          v263 = (_DWORD *)(v262 + 4);
        if (*v263 > a3)
        {
          Index = JSC::JSString::getIndex((JSC::JSString *)this, a1, a3, a4, a5, a6, a7, a8, a9);
          if (!*((_DWORD *)v277 + 20))
            goto LABEL_642;
          v264 = *((_DWORD *)v277 + 20);
          if ((v264 & 0x27) != 0 && (v264 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v277 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (!*((_QWORD *)v277 + 2))
          {
LABEL_642:
            v122 = 10;
LABEL_245:
            v278 = (uint64_t (*)(unint64_t))Index;
            LODWORD(v280) = v122;
            v282 = 0;
            v123 = 1;
            BYTE1(v283[1]) = 1;
LABEL_270:
            if (*((_DWORD *)v277 + 20))
            {
              v259 = *((_DWORD *)v277 + 20);
              if ((v259 & 0x27) != 0 && (v259 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VM *)((char *)v277 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (*((_QWORD *)v277 + 2))
                goto LABEL_317;
            }
            v10 = (unint64_t)a1;
            if ((v123 & 1) != 0)
              goto LABEL_582;
LABEL_272:
            v135 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v288, v10);
            if (!v135)
              goto LABEL_317;
            v136 = v135;
            v137 = (_BYTE *)(v135 + 6);
            v138 = v11 >> 4;
            v139 = v135;
            if ((*(_BYTE *)(v135 + 6) & 8) == 0)
            {
              v140 = *(JSC::VM **)(v10 + 56);
              v141 = (JSC::JSString *)v135;
              while (1)
              {
                v142 = *(_DWORD *)v141 & 0xFFFFFFFE;
                v143 = 16 * v142;
                if ((_DWORD)v138)
                {
                  if ((v138 & ~*(_DWORD *)(16 * v142 + 0x20)) == 0)
                  {
                    JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v143, v140, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                    if (v144)
                    {
                      __dst = (JSC::VM *)v11;
                      v145 = JSC::PropertyTable::get(v144, (uint64_t *)&__dst);
                      a6 = v145;
                      if ((_DWORD)v145 != -1)
                      {
                        a5 = HIDWORD(v145);
                        if ((int)v145 <= 63)
                        {
                          v146 = (uint64_t)v141 + 16;
                          v147 = v145 << 32;
                        }
                        else
                        {
                          v146 = *((_QWORD *)v141 + 1) - 8;
                          v147 = 0x3F00000000 - (v145 << 32);
                        }
                        a4 = *(_QWORD *)(v146 + (v147 >> 29));
                        if ((a4 & 0xFFFE000000000002) == 0)
                        {
                          v154 = *(unsigned __int8 *)(a4 + 5);
                          if (v154 == 5)
                          {
                            JSC::JSObject::fillGetterPropertySlot((unsigned int *)v141, (uint64_t)v140, (uint64_t)&v278, a4, SHIDWORD(v145), v145);
                            goto LABEL_582;
                          }
                          if (v154 == 6)
                          {
                            v161 = *(_DWORD *)(v143 + 16) & 3;
                            v162 = *(_QWORD *)(a4 + 16);
                            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                            {
                              v164 = *(int8x16_t ***)(a4 + 24);
                              v163 = *(_QWORD *)(a4 + 32);
                              v278 = *(uint64_t (**)(unint64_t))(a4 + 8);
                              v279 = v162;
                              LODWORD(v280) = HIDWORD(v145);
                              v282 = v141;
                              BYTE1(v283[1]) = 3;
                              if (v161 != 2)
                                LOBYTE(v283[1]) = 1;
                              BYTE3(v283[1]) = 1;
                              v286 = v164;
                              v287 = v163;
                            }
                            else
                            {
                              v278 = *(uint64_t (**)(unint64_t))(a4 + 8);
                              v279 = v162;
                              LODWORD(v280) = HIDWORD(v145);
                              v282 = v141;
                              BYTE1(v283[1]) = 3;
                              if (v161 != 2)
                                LOBYTE(v283[1]) = 1;
                            }
                            goto LABEL_582;
                          }
                        }
                        v278 = (uint64_t (*)(unint64_t))a4;
                        v282 = v141;
                        v280 = __PAIR64__(v145, HIDWORD(v145));
                        LOWORD(v283[1]) = 257;
LABEL_582:
                        if (BYTE1(v283[1]) == 1)
                          goto LABEL_84;
                        if (BYTE1(v283[1]) == 2)
                        {
                          v59 = (JSC::JSGlobalObject *)v10;
                          goto LABEL_93;
                        }
                        v251 = v282;
                        v62 = *(_QWORD *)(16 * (*(_DWORD *)v282 & 0xFFFFFFFE) + 0x28);
                        if ((v280 & 0x20) != 0)
                          v251 = v281;
                        if (BYTE3(v283[1]) != 1)
                          goto LABEL_109;
                        v63 = *(JSC::VM **)(v10 + 56);
                        v64 = v286;
                        if (((unint64_t)v251 & 0xFFFE000000000002) != 0)
                          goto LABEL_599;
                        v252 = *(unsigned int *)(16 * (*(_DWORD *)v251 & 0xFFFFFFFE) + 0x4C);
                        v66 = *(_DWORD *)(16 * (*(_DWORD *)v251 & 0xFFFFFFFE) + 0x4C) != 0;
                        v253 = 16 * v252;
                        if ((_DWORD)v252)
                          v254 = v286 == (int8x16_t **)v253;
                        else
                          v254 = 1;
                        if (!v254)
                        {
                          do
                          {
                            v253 = *(_QWORD *)(v253 + 16);
                            v66 = v253 != 0;
                          }
                          while ((int8x16_t **)v253 != v286 && v253 != 0);
                        }
LABEL_108:
                        if (v66)
                          goto LABEL_109;
                        goto LABEL_599;
                      }
                    }
                  }
                }
                if ((*v137 & 0x20) != 0
                  && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v141, v140, v11, (uint64_t)&v278) & 1) != 0)
                {
                  goto LABEL_582;
                }
                v139 = *(_QWORD *)(v143 + 48);
                if (!v139)
                  v139 = *((_QWORD *)v141 + 2);
                if ((v139 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v139 + 5) < 0x17u)
                  break;
                v137 = (_BYTE *)(v139 + 6);
                v141 = (JSC::JSString *)v139;
                if ((*(_BYTE *)(v139 + 6) & 8) != 0)
                  goto LABEL_327;
              }
              if (!v11)
                goto LABEL_317;
              v148 = *(_DWORD *)(v11 + 16);
              if ((v148 & 0x20) != 0)
                goto LABEL_317;
              v149 = *(_WORD **)(v11 + 8);
              v150 = *(unsigned int *)(v11 + 4);
              if ((v148 & 4) == 0)
              {
                if ((_DWORD)v150)
                {
                  v151 = (unsigned __int16)*v149 - 48;
                  if (v151 <= 9 && (*v149 != 48 || v150 <= 1))
                  {
                    v155 = v149 + 1;
                    v156 = v150 - 1;
                    while (v156)
                    {
                      if (v151 > 0x19999999)
                        goto LABEL_295;
                      v157 = *v155 - 48;
                      if (v157 > 9)
                        goto LABEL_295;
                      v152 = 0;
                      LOBYTE(v150) = 0;
                      v153 = 0;
                      v133 = __CFADD__(v157, 10 * v151);
                      v151 = v157 + 10 * v151;
                      ++v155;
                      --v156;
                      if (v133)
                        goto LABEL_316;
                    }
                    v153 = v151 & 0xFFFFFF00;
                    v152 = 0x100000000;
                    if (v151 == -1)
                    {
                      v152 = 0;
                      LOBYTE(v150) = 0;
                    }
                    else
                    {
                      LOBYTE(v150) = v151;
                    }
                    if (v151 == -1)
                      v153 = 0;
                    goto LABEL_316;
                  }
LABEL_295:
                  v152 = 0;
                  LOBYTE(v150) = 0;
                }
                else
                {
                  v152 = 0;
                }
                v153 = 0;
LABEL_316:
                v158 = v150;
                if ((v152 & 0x100000000) == 0)
                  goto LABEL_317;
                goto LABEL_474;
              }
              if ((_DWORD)v150)
              {
                v216 = *(unsigned __int8 *)v149 - 48;
                if (v216 <= 9 && (v150 < 2 || *(_BYTE *)v149 != 48))
                {
                  v231 = v150 - 1;
                  v232 = (unsigned __int8 *)v149 + 1;
                  while (v231)
                  {
                    if (v216 > 0x19999999)
                      goto LABEL_471;
                    v233 = *v232 - 48;
                    if (v233 > 9)
                      goto LABEL_471;
                    v158 = 0;
                    LOBYTE(v150) = 0;
                    v217 = 0;
                    v133 = __CFADD__(v233, 10 * v216);
                    v216 = v233 + 10 * v216;
                    --v231;
                    ++v232;
                    if (v133)
                      goto LABEL_473;
                  }
                  if (v216 == -1)
                    v158 = 0;
                  else
                    v158 = v216 & 0xFFFFFF00;
                  if (v216 == -1)
                    LOBYTE(v150) = 0;
                  else
                    LOBYTE(v150) = v216;
                  if (v216 == -1)
                    v217 = 0;
                  else
                    v217 = 0x100000000;
                  goto LABEL_473;
                }
LABEL_471:
                v158 = 0;
                LOBYTE(v150) = 0;
              }
              else
              {
                v158 = 0;
              }
              v217 = 0;
LABEL_473:
              v153 = v150;
              if ((v217 & 0x100000000) == 0)
                goto LABEL_317;
LABEL_474:
              v218 = v153 | v158;
              v219 = *(_QWORD *)(v10 + 56);
              v72 = 10;
              v220 = v10;
              while (1)
              {
                v221 = 16 * (*(_DWORD *)v136 & 0xFFFFFFFE);
                v222 = v220;
                v223 = (*(uint64_t (**)(uint64_t))(16 * *(unsigned int *)(v221 + 0x4C) + 0x70))(v136);
                if (*(_DWORD *)(v219 + 80))
                {
                  v226 = *(_DWORD *)(v219 + 80);
                  if ((v226 & 0x27) != 0 && (v226 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v219 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  if (*(_QWORD *)(v219 + 16))
                    goto LABEL_318;
                }
                if ((v223 & 1) != 0)
                {
LABEL_581:
                  v10 = v222;
                  goto LABEL_582;
                }
                if (BYTE2(v283[1]) == 3)
                {
                  if (BYTE4(v283[1]))
                    goto LABEL_318;
                  v224 = *(unsigned __int8 *)(v136 + 5);
                  if (v224 == 61)
                    goto LABEL_480;
                }
                else
                {
                  v224 = *(unsigned __int8 *)(v136 + 5);
                  if (v224 == 61)
                  {
                    if (BYTE2(v283[1]) == 1)
                      goto LABEL_318;
                    goto LABEL_480;
                  }
                }
                if ((v224 - 39) <= 0xA)
                {
                  if ((*(_BYTE *)(v136 + 40) & 7u) > 2)
                  {
                    LOBYTE(__dst) = 0;
                    v290 = 0;
                    v229 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v136, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                    v228 = v230 ? v229 : 0;
                  }
                  else
                  {
                    v228 = *(_QWORD *)(v136 + 24);
                  }
                  if (v228 <= v218)
                    goto LABEL_318;
                }
LABEL_480:
                if ((*(_WORD *)(v221 + 12) & 0x800) == 0 || BYTE2(v283[1]) == 3)
                {
                  v225 = *(_QWORD *)(16 * (*(_DWORD *)v136 & 0xFFFFFFFE) + 0x30);
                  if (!v225)
                    v225 = *(_QWORD *)(v136 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v136 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v225 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v136 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0xB0))(v136, v222);
                  }
                  else
                  {
                    v225 = *(_QWORD *)(16 * (*(_DWORD *)v136 & 0xFFFFFFFE) + 0x30);
                    if (!v225)
                      v225 = *(_QWORD *)(v136 + 16);
                  }
                  if (*(_DWORD *)(v219 + 80))
                  {
                    v227 = *(_DWORD *)(v219 + 80);
                    if ((v227 & 0x27) != 0 && (v227 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v219 + 64), 7u, a3, a4, a5, a6, a7, a8);
                    if (*(_QWORD *)(v219 + 16))
                      goto LABEL_318;
                  }
                }
                if ((v225 & 0xFFFE000000000002) == 0)
                {
                  v136 = v225;
                  v220 = v222;
                  if (*(unsigned __int8 *)(v225 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_318;
              }
            }
LABEL_327:
            if (!v11)
              goto LABEL_357;
            v165 = *(_DWORD *)(v11 + 16);
            if ((v165 & 0x20) != 0)
              goto LABEL_357;
            v166 = *(_WORD **)(v11 + 8);
            v167 = *(unsigned int *)(v11 + 4);
            if ((v165 & 4) == 0)
            {
              if ((_DWORD)v167)
              {
                v168 = (unsigned __int16)*v166 - 48;
                if (v168 <= 9)
                {
                  v171 = v10;
                  if (*v166 == 48 && v167 > 1)
                  {
LABEL_355:
                    v169 = 0;
                    LOBYTE(v167) = 0;
                    v170 = 0;
                    v10 = v171;
                  }
                  else
                  {
                    v172 = v166 + 1;
                    v173 = v167 - 1;
                    while (v173)
                    {
                      if (v168 > 0x19999999)
                        goto LABEL_355;
                      v174 = *v172 - 48;
                      if (v174 > 9)
                        goto LABEL_355;
                      v169 = 0;
                      LOBYTE(v167) = 0;
                      v170 = 0;
                      v133 = __CFADD__(v174, 10 * v168);
                      v168 = v174 + 10 * v168;
                      ++v172;
                      --v173;
                      v10 = v171;
                      if (v133)
                        goto LABEL_356;
                    }
                    v170 = v168 & 0xFFFFFF00;
                    v169 = 0x100000000;
                    if (v168 == -1)
                    {
                      v169 = 0;
                      LOBYTE(v167) = 0;
                    }
                    else
                    {
                      LOBYTE(v167) = v168;
                    }
                    if (v168 == -1)
                      v170 = 0;
                  }
LABEL_356:
                  v175 = v167;
                  if ((v169 & 0x100000000) == 0)
                  {
LABEL_357:
                    v176 = *(_QWORD *)(v10 + 56);
                    v72 = 10;
                    v177 = v10;
                    while (1)
                    {
                      v178 = 16 * (*(_DWORD *)v139 & 0xFFFFFFFE);
                      if ((*(_BYTE *)(v139 + 6) & 8) == 0)
                      {
                        if ((_DWORD)v138)
                        {
                          if ((v138 & ~*(_DWORD *)(16 * (*(_DWORD *)v139 & 0xFFFFFFFE) + 0x20)) == 0)
                          {
                            JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v139 & 0xFFFFFFFE)), (JSC::VM *)v176, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                            if (v179)
                            {
                              __dst = (JSC::VM *)v11;
                              v180 = JSC::PropertyTable::get(v179, (uint64_t *)&__dst);
                              a6 = v180;
                              if ((_DWORD)v180 != -1)
                              {
                                a5 = HIDWORD(v180);
                                if ((int)v180 <= 63)
                                {
                                  v209 = v139 + 16;
                                  v210 = v180 << 32;
                                }
                                else
                                {
                                  v209 = *(_QWORD *)(v139 + 8) - 8;
                                  v210 = 0x3F00000000 - (v180 << 32);
                                }
                                a4 = *(_QWORD *)(v209 + (v210 >> 29));
                                if ((a4 & 0xFFFE000000000002) != 0)
                                {
LABEL_459:
                                  v278 = (uint64_t (*)(unint64_t))a4;
                                  v282 = (JSC::JSString *)v139;
                                  v280 = __PAIR64__(v180, HIDWORD(v180));
                                  LOWORD(v283[1]) = 257;
                                }
                                else
                                {
                                  v211 = *(unsigned __int8 *)(a4 + 5);
                                  if (v211 == 5)
                                  {
                                    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v139, v176, (uint64_t)&v278, a4, SHIDWORD(v180), v180);
                                  }
                                  else
                                  {
                                    if (v211 != 6)
                                      goto LABEL_459;
                                    v212 = *(_DWORD *)(v178 + 16) & 3;
                                    v213 = *(_QWORD *)(a4 + 16);
                                    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                           * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                                    {
                                      v215 = *(int8x16_t ***)(a4 + 24);
                                      v214 = *(_QWORD *)(a4 + 32);
                                      v278 = *(uint64_t (**)(unint64_t))(a4 + 8);
                                      v279 = v213;
                                      LODWORD(v280) = HIDWORD(v180);
                                      v282 = (JSC::JSString *)v139;
                                      BYTE1(v283[1]) = 3;
                                      if (v212 != 2)
                                        LOBYTE(v283[1]) = 1;
                                      BYTE3(v283[1]) = 1;
                                      v286 = v215;
                                      v287 = v214;
                                    }
                                    else
                                    {
                                      v278 = *(uint64_t (**)(unint64_t))(a4 + 8);
                                      v279 = v213;
                                      LODWORD(v280) = HIDWORD(v180);
                                      v282 = (JSC::JSString *)v139;
                                      BYTE1(v283[1]) = 3;
                                      if (v212 != 2)
                                        LOBYTE(v283[1]) = 1;
                                    }
                                  }
                                }
LABEL_461:
                                v10 = v177;
                                goto LABEL_582;
                              }
                            }
                          }
                        }
                        if ((*(_BYTE *)(v139 + 6) & 0x20) != 0
                          && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v139, (JSC::VM *)v176, v11, (uint64_t)&v278) & 1) != 0)
                        {
                          goto LABEL_461;
                        }
                        goto LABEL_364;
                      }
                      v274 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v139 & 0xFFFFFFFE) + 0x4C) + 0x68))(v139, v177, v11, &v278);
                      if (*(_DWORD *)(v176 + 80))
                      {
                        v208 = *(_DWORD *)(v176 + 80);
                        if ((v208 & 0x27) != 0 && (v208 & 0x20) == 0)
                          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v176 + 64), 7u, a3, a4, a5, a6, a7, a8);
                        if (*(_QWORD *)(v176 + 16))
                          goto LABEL_318;
                      }
                      if ((v274 & 1) != 0)
                        goto LABEL_461;
                      if (BYTE2(v283[1]) == 3)
                      {
                        if (BYTE4(v283[1]))
                          goto LABEL_318;
                        v185 = *(unsigned __int8 *)(v139 + 5);
                        if (v185 == 61)
                          goto LABEL_364;
                      }
                      else
                      {
                        v185 = *(unsigned __int8 *)(v139 + 5);
                        if (v185 == 61)
                        {
                          if (BYTE2(v283[1]) == 1)
                            goto LABEL_318;
                          goto LABEL_364;
                        }
                      }
                      if (!v11)
                        goto LABEL_364;
                      if ((v185 - 50) < 0xFFFFFFF5)
                        goto LABEL_364;
                      v186 = *(_DWORD *)(v11 + 16);
                      if ((v186 & 0x20) != 0)
                        goto LABEL_364;
                      v187 = *(unsigned int *)(v11 + 4);
                      if (!(_DWORD)v187)
                        goto LABEL_364;
                      v188 = *(unsigned __int8 **)(v11 + 8);
                      if ((v186 & 4) != 0)
                      {
                        v189 = *v188;
                        if ((_DWORD)v187 == 1)
                        {
LABEL_391:
                          if ((v189 - 48) < 0xA)
                            goto LABEL_318;
                          goto LABEL_364;
                        }
                        if (v189 == 45)
                        {
                          v189 = v188[1];
                          goto LABEL_395;
                        }
                        if ((v189 - 48) < 0xA)
                          goto LABEL_406;
                        if ((_DWORD)v187 == 8)
                          goto LABEL_405;
                      }
                      else
                      {
                        v189 = *(unsigned __int16 *)v188;
                        if ((_DWORD)v187 == 1)
                          goto LABEL_391;
                        if (v189 == 45)
                        {
                          v189 = *((unsigned __int16 *)v188 + 1);
LABEL_395:
                          if ((v189 - 48) < 0xA)
                          {
                            if ((_DWORD)v187 == 2)
                              goto LABEL_318;
                            goto LABEL_406;
                          }
                          if ((_DWORD)v187 != 9)
                            goto LABEL_364;
LABEL_405:
                          if (v189 != 73)
                            goto LABEL_364;
                          goto LABEL_406;
                        }
                        if ((v189 - 48) < 0xA || (_DWORD)v187 == 8 && v189 == 73)
                          goto LABEL_406;
                      }
                      if ((_DWORD)v187 != 3 || v189 != 78)
                        goto LABEL_364;
LABEL_406:
                      v269 = v269 & 0xFFFFFF0000000000 | v187 | ((unint64_t)((v186 >> 2) & 1) << 32);
                      JSC::jsToNumber(v188, v269);
                      v191 = (v190 >> 52) & 0x7FF;
                      if ((_DWORD)v191 == 2047)
                      {
                        if ((v190 & 0xFFFFFFFFFFFFFLL) != 0)
                        {
                          qmemcpy(__s, "NaN", sizeof(__s));
                          v192 = v292;
                        }
                        else
                        {
                          if ((v190 & 0x8000000000000000) != 0)
                          {
                            __s[0] = 45;
                            v197 = &__s[1];
                          }
                          else
                          {
                            v197 = __s;
                          }
                          *(_QWORD *)v197 = 0x7974696E69666E49;
                          v192 = v197 + 8;
                        }
                      }
                      else
                      {
                        v193 = v190 & 0x7FFFFFFFFFFFFFFFLL;
                        if ((v190 & 0x8000000000000000) != 0 && v193)
                        {
                          __s[0] = 45;
                          v275 = &__s[1];
LABEL_414:
                          v194 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v190 & 0x800FFFFFFFFFFFFFLL, v191);
                          v192 = WTF::dragonbox::detail::to_shortest(v194, v195, (uint64_t)v275, v196);
                          goto LABEL_420;
                        }
                        if (v193)
                        {
                          v275 = __s;
                          goto LABEL_414;
                        }
                        __s[0] = 48;
                        v192 = &__s[1];
                      }
LABEL_420:
                      *v192 = 0;
                      v276 = strlen(__s);
                      memcpy(&__dst, __s, v276);
                      *((_BYTE *)&__dst + v276) = 0;
                      v198 = *(unsigned int *)(v11 + 4);
                      v199 = *(unsigned __int8 **)(v11 + 8);
                      if ((*(_BYTE *)(v11 + 16) & 4) != 0)
                      {
                        if (!(_DWORD)v198)
                        {
LABEL_432:
                          if (!*((_BYTE *)&__dst + v198))
                            goto LABEL_318;
                          goto LABEL_364;
                        }
                        p_dst = &__dst;
                        v205 = *(unsigned int *)(v11 + 4);
                        while (1)
                        {
                          v207 = *(unsigned __int8 *)p_dst;
                          p_dst = (JSC::VM **)((char *)p_dst + 1);
                          v206 = v207;
                          if (!v207 || *v199 != v206)
                            break;
                          ++v199;
                          if (!--v205)
                            goto LABEL_432;
                        }
                      }
                      else
                      {
                        if (!(_DWORD)v198)
                          goto LABEL_432;
                        v200 = &__dst;
                        v201 = *(unsigned int *)(v11 + 4);
                        while (1)
                        {
                          v203 = *(unsigned __int8 *)v200;
                          v200 = (JSC::VM **)((char *)v200 + 1);
                          v202 = v203;
                          if (!v203 || *(unsigned __int16 *)v199 != v202)
                            break;
                          v199 += 2;
                          if (!--v201)
                            goto LABEL_432;
                        }
                      }
LABEL_364:
                      if ((*(_WORD *)(v178 + 12) & 0x800) == 0)
                      {
                        v181 = *(_DWORD *)v139;
LABEL_366:
                        v182 = *(_QWORD *)(16 * (v181 & 0xFFFFFFFE) + 0x30);
                        if (!v182)
                          v182 = *(_QWORD *)(v139 + 16);
                        goto LABEL_368;
                      }
                      v181 = *(_DWORD *)v139;
                      if (BYTE2(v283[1]) == 3)
                        goto LABEL_366;
                      v183 = 16 * (v181 & 0xFFFFFFFE);
                      if ((*(_WORD *)(v183 + 12) & 0x800) != 0)
                      {
                        v182 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                                    * *(unsigned int *)(v183 + 76)
                                                                                    + 0xB0))(v139, v177);
                      }
                      else
                      {
                        v182 = *(_QWORD *)(v183 + 48);
                        if (!v182)
                          v182 = *(_QWORD *)(v139 + 16);
                      }
                      if (*(_DWORD *)(v176 + 80))
                      {
                        v184 = *(_DWORD *)(v176 + 80);
                        if ((v184 & 0x27) != 0 && (v184 & 0x20) == 0)
                          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v176 + 64), 7u, a3, a4, a5, a6, a7, a8);
                        if (*(_QWORD *)(v176 + 16))
                          goto LABEL_318;
                      }
LABEL_368:
                      if ((v182 & 0xFFFE000000000002) == 0)
                      {
                        v139 = v182;
                        if (*(unsigned __int8 *)(v182 + 5) > 0x16u)
                          continue;
                      }
                      goto LABEL_318;
                    }
                  }
                  goto LABEL_538;
                }
                v169 = 0;
                LOBYTE(v167) = 0;
              }
              else
              {
                v169 = 0;
              }
              v170 = 0;
              goto LABEL_356;
            }
            if ((_DWORD)v167)
            {
              v234 = *(unsigned __int8 *)v166 - 48;
              if (v234 <= 9 && (v167 < 2 || *(_BYTE *)v166 != 48))
              {
                v256 = v167 - 1;
                v257 = (unsigned __int8 *)v166 + 1;
                while (v256)
                {
                  if (v234 > 0x19999999)
                    goto LABEL_535;
                  v258 = *v257 - 48;
                  if (v258 > 9)
                    goto LABEL_535;
                  v175 = 0;
                  LOBYTE(v167) = 0;
                  v235 = 0;
                  v133 = __CFADD__(v258, 10 * v234);
                  v234 = v258 + 10 * v234;
                  --v256;
                  ++v257;
                  if (v133)
                    goto LABEL_537;
                }
                if (v234 == -1)
                  v175 = 0;
                else
                  v175 = v234 & 0xFFFFFF00;
                if (v234 == -1)
                  LOBYTE(v167) = 0;
                else
                  LOBYTE(v167) = v234;
                if (v234 == -1)
                  v235 = 0;
                else
                  v235 = 0x100000000;
LABEL_537:
                v170 = v167;
                if ((v235 & 0x100000000) == 0)
                  goto LABEL_357;
LABEL_538:
                v236 = v170 | v175;
                v237 = *(_QWORD *)(v10 + 56);
                v72 = 10;
                v238 = v10;
                while (1)
                {
                  v239 = 16 * (*(_DWORD *)v136 & 0xFFFFFFFE);
                  v222 = v238;
                  v240 = (*(uint64_t (**)(uint64_t))(16 * *(unsigned int *)(v239 + 0x4C) + 0x70))(v136);
                  v241 = v240;
                  if (*(_DWORD *)(v237 + 80))
                  {
                    v244 = *(_DWORD *)(v237 + 80);
                    if ((v244 & 0x27) != 0 && (v244 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v237 + 64), 7u, a3, a4, a5, a6, a7, a8);
                    v245 = *(_QWORD *)(v237 + 16);
                    if (v245)
                      v246 = 1;
                    else
                      v246 = v241;
                    if ((v246 & 1) != 0)
                    {
                      v10 = v222;
                      if (!v245)
                        goto LABEL_582;
LABEL_317:
                      v72 = 10;
                      goto LABEL_318;
                    }
                  }
                  else if ((v240 & 1) != 0)
                  {
                    goto LABEL_581;
                  }
                  if (BYTE2(v283[1]) == 3)
                  {
                    if (BYTE4(v283[1]))
                      goto LABEL_318;
                    v242 = *(unsigned __int8 *)(v136 + 5);
                    if (v242 == 61)
                      goto LABEL_544;
                  }
                  else
                  {
                    v242 = *(unsigned __int8 *)(v136 + 5);
                    if (v242 == 61)
                    {
                      if (BYTE2(v283[1]) == 1)
                        goto LABEL_318;
                      goto LABEL_544;
                    }
                  }
                  if ((v242 - 39) <= 0xA)
                  {
                    if ((*(_BYTE *)(v136 + 40) & 7u) > 2)
                    {
                      LOBYTE(__dst) = 0;
                      v290 = 0;
                      v249 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v136, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                      v247 = v250 ? v249 : 0;
                    }
                    else
                    {
                      v247 = *(_QWORD *)(v136 + 24);
                    }
                    if (v247 <= v236)
                      goto LABEL_318;
                  }
LABEL_544:
                  if ((*(_WORD *)(v239 + 12) & 0x800) == 0 || BYTE2(v283[1]) == 3)
                  {
                    v243 = *(_QWORD *)(16 * (*(_DWORD *)v136 & 0xFFFFFFFE) + 0x30);
                    if (!v243)
                      v243 = *(_QWORD *)(v136 + 16);
                  }
                  else
                  {
                    if ((*(_WORD *)(16 * (*(_DWORD *)v136 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                    {
                      v243 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                                  * *(unsigned int *)(16 * (*(_DWORD *)v136 & 0xFFFFFFFE) + 0x4C)
                                                                                  + 0xB0))(v136, v222);
                    }
                    else
                    {
                      v243 = *(_QWORD *)(16 * (*(_DWORD *)v136 & 0xFFFFFFFE) + 0x30);
                      if (!v243)
                        v243 = *(_QWORD *)(v136 + 16);
                    }
                    if (*(_DWORD *)(v237 + 80))
                    {
                      v248 = *(_DWORD *)(v237 + 80);
                      if ((v248 & 0x27) != 0 && (v248 & 0x20) == 0)
                        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v237 + 64), 7u, a3, a4, a5, a6, a7, a8);
                      if (*(_QWORD *)(v237 + 16))
                        goto LABEL_318;
                    }
                  }
                  if ((v243 & 0xFFFE000000000002) == 0)
                  {
                    v136 = v243;
                    v238 = v222;
                    if (*(unsigned __int8 *)(v243 + 5) > 0x16u)
                      continue;
                  }
                  goto LABEL_318;
                }
              }
LABEL_535:
              v175 = 0;
              LOBYTE(v167) = 0;
            }
            else
            {
              v175 = 0;
            }
            v235 = 0;
            goto LABEL_537;
          }
        }
        goto LABEL_269;
      }
LABEL_634:
      v134 = 0;
      LOBYTE(v126) = 0;
    }
    else
    {
      v134 = 0;
    }
    v261 = 0;
    goto LABEL_636;
  }
  v13 = (uint64_t *)((char *)v277 + 93080);
  v14 = v11 >> 4;
  v15 = &JSC::DOMAttributeGetterSetter::s_info;
  v16 = this;
  v17 = 1;
  while (1)
  {
    v18 = *(_BYTE *)(v16 + 6);
    if ((v18 & 8) != 0 && v12 != 26 && v12 != 36 && v16 != *((_QWORD *)a1 + 84))
      break;
    if (!(_DWORD)v14)
      goto LABEL_42;
    v19 = 16 * (*(_DWORD *)v16 & 0xFFFFFFFE);
    if ((v14 & ~*(_DWORD *)(v19 + 0x20)) != 0)
      goto LABEL_42;
    v20 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x58);
    if (!v20)
    {
      v21 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x40);
      if (!v21 || *(_BYTE *)(v21 + 5) != 1 && *(_DWORD *)(v21 + 80) < 2u)
        goto LABEL_42;
      v22 = v15;
      JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE)), v277, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
      v15 = v22;
      if (!v20)
        goto LABEL_42;
    }
    if (!*(_DWORD *)(v20 + 24))
      goto LABEL_42;
    v23 = *(_QWORD *)(v20 + 16);
    v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
    v25 = *(unsigned int *)(v20 + 8);
    v26 = *(_DWORD *)(v11 + 16);
    if ((v23 & 1) != 0)
    {
      if ((v26 & 0x20) != 0)
        v26 = *(_DWORD *)(v11 + 32);
      v27 = *(_DWORD *)(v20 + 12);
      v28 = (v26 >> 8) & *(_QWORD *)&v27;
      v29 = *(unsigned __int8 *)(v24 + v28);
      if (!*(_BYTE *)(v24 + v28))
        goto LABEL_42;
      v30 = v24 + v25;
      v31 = 1;
      while (1)
      {
        v32 = *(_QWORD *)(v30 + 8 * (v29 - 1));
        if (v11 == (v32 & 0xFFFFFFFFFFFFLL))
          break;
        v28 = ((_DWORD)v28 + v31) & v27;
        v29 = *(unsigned __int8 *)(v24 + v28);
        ++v31;
        if (!*(_BYTE *)(v24 + v28))
          goto LABEL_42;
      }
      a6 = (v32 >> 16) & 0xFF00000000 | HIBYTE(v32);
    }
    else
    {
      if ((v26 & 0x20) != 0)
        v26 = *(_DWORD *)(v11 + 32);
      v33 = *(_DWORD *)(v20 + 12);
      v34 = v33 & (v26 >> 8);
      v35 = *(_DWORD *)(v24 + 4 * v34);
      if (!v35)
      {
LABEL_42:
        if ((*(_BYTE *)(v16 + 6) & 0x20) != 0)
        {
          v49 = v15;
          OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v16, v277, v11, (uint64_t)&v278);
          v15 = v49;
        }
        else
        {
          OwnStaticPropertySlot = 0;
        }
        goto LABEL_44;
      }
      v36 = v24 + 4 * v25;
      v37 = 1;
      while (1)
      {
        v38 = (v35 - 1);
        if (v11 == *(_QWORD *)(v36 + 16 * v38))
          break;
        v34 = (v34 + v37) & v33;
        v35 = *(_DWORD *)(v24 + 4 * v34);
        ++v37;
        if (!v35)
          goto LABEL_42;
      }
      a6 = *(unsigned int *)(v36 + 16 * v38 + 8) | ((unint64_t)*(unsigned __int8 *)(v36 + 16 * v38 + 12) << 32);
    }
    if ((_DWORD)a6 == -1)
      goto LABEL_42;
    if ((int)a6 <= 63)
    {
      v39 = v16 + 16;
      v40 = a6 << 32;
    }
    else
    {
      v39 = *(_QWORD *)(v16 + 8) - 8;
      v40 = 0x3F00000000 - (a6 << 32);
    }
    a5 = HIDWORD(a6);
    a4 = *(_QWORD *)(v39 + (v40 >> 29));
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_39;
    v41 = *(unsigned __int8 *)(a4 + 5);
    if (v41 == 5)
    {
      v43 = v15;
      JSC::JSObject::fillGetterPropertySlot((unsigned int *)v16, (uint64_t)v277, (uint64_t)&v278, a4, SHIDWORD(a6), a6);
      v15 = v43;
      OwnStaticPropertySlot = 1;
      goto LABEL_44;
    }
    if (v41 == 6)
    {
      v50 = *(_DWORD *)(v19 + 16) & 3;
      v51 = *(_QWORD *)(a4 + 16);
      if (v15 == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
      {
        v53 = *(int8x16_t ***)(a4 + 24);
        v52 = *(_QWORD *)(a4 + 32);
        v278 = *(uint64_t (**)(unint64_t))(a4 + 8);
        v279 = v51;
        LODWORD(v280) = HIDWORD(a6);
        v282 = (JSC::JSString *)v16;
        BYTE1(v283[1]) = 3;
        OwnStaticPropertySlot = 1;
        if (v50 != 2)
          LOBYTE(v283[1]) = 1;
        BYTE3(v283[1]) = 1;
        v286 = v53;
        v287 = v52;
      }
      else
      {
        v278 = *(uint64_t (**)(unint64_t))(a4 + 8);
        v279 = v51;
        LODWORD(v280) = HIDWORD(a6);
        v282 = (JSC::JSString *)v16;
        OwnStaticPropertySlot = 1;
        BYTE1(v283[1]) = 3;
        if (v50 != 2)
          LOBYTE(v283[1]) = 1;
      }
    }
    else
    {
LABEL_39:
      v278 = (uint64_t (*)(unint64_t))a4;
      v282 = (JSC::JSString *)v16;
      v280 = __PAIR64__(a6, HIDWORD(a6));
      OwnStaticPropertySlot = 1;
      LOWORD(v283[1]) = 257;
    }
LABEL_44:
    if ((*(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x10) & 3) == 2
      || (v44 = *(unsigned __int16 *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0xC), (v44 & 8) != 0))
    {
      v45 = 0;
    }
    else if ((v44 & 0x10) != 0)
    {
      v45 = (v44 >> 5) & 1;
    }
    else
    {
      v45 = 1;
    }
    v46 = v17 & v45;
    if (OwnStaticPropertySlot)
    {
      v54 = BYTE1(v283[1]);
      if (!v46 || BYTE1(v283[1]) != 1 || LOBYTE(v283[1]) != 1)
        goto LABEL_83;
      if (SHIDWORD(v280) >= 0x10000)
        goto LABEL_84;
      v55 = (WTF::AtomStringImpl *)*(unsigned int *)this;
      if (v282 != (JSC::JSString *)this && (*(_BYTE *)((16 * (_QWORD)v55) | 0x10) & 3) != 0)
        goto LABEL_84;
      v56 = (*v13 & 1) != 0 ? 0 : *v13;
      JSC::MegamorphicCache::initAsHit(v56, v55, (WTF::StringImpl *)v11, (uint64_t)v282, WORD2(v280), v282 == (JSC::JSString *)this, a7, a8);
      v54 = BYTE1(v283[1]);
LABEL_83:
      if (v54 == 1)
      {
LABEL_84:
        v72 = (uint64_t)v278;
        goto LABEL_318;
      }
      if (v54 == 2)
      {
LABEL_92:
        v59 = a1;
LABEL_93:
        v60 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v278, v59, a3, a4, a5, a6, a7, a8);
        goto LABEL_110;
      }
      v61 = v282;
      v62 = *(_QWORD *)(16 * (*(_DWORD *)v282 & 0xFFFFFFFE) + 0x28);
      if ((v280 & 0x20) != 0)
        v61 = v281;
      if (BYTE3(v283[1]) != 1)
        goto LABEL_109;
      v63 = (JSC::VM *)*((_QWORD *)a1 + 7);
      v64 = v286;
      if (((unint64_t)v61 & 0xFFFE000000000002) != 0)
        goto LABEL_599;
      v65 = *(unsigned int *)(16 * (*(_DWORD *)v61 & 0xFFFFFFFE) + 0x4C);
      v66 = *(_DWORD *)(16 * (*(_DWORD *)v61 & 0xFFFFFFFE) + 0x4C) != 0;
      v67 = 16 * v65;
      if ((_DWORD)v65)
        v68 = v286 == (int8x16_t **)v67;
      else
        v68 = 1;
      if (!v68)
      {
        do
        {
          v67 = *(_QWORD *)(v67 + 16);
          v66 = v67 != 0;
        }
        while ((int8x16_t **)v67 != v286 && v67 != 0);
      }
      goto LABEL_108;
    }
    v47 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x30);
    if ((*(_WORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0xC) & 0x80) != 0 || v47 == 0)
      v17 = 0;
    else
      v17 = v46;
    if (!v47)
      v47 = *(_QWORD *)(v16 + 16);
    if ((v47 & 0xFFFE000000000002) == 0)
    {
      v12 = *(unsigned __int8 *)(v47 + 5);
      v16 = v47;
      if (v12 > 0x16)
        continue;
    }
    if (v17)
    {
      v57 = (WTF::AtomStringImpl *)*(unsigned int *)this;
      if ((*(_BYTE *)((16 * (_QWORD)v57) | 0x10) & 3) == 0)
      {
        if ((*v13 & 1) != 0)
          v58 = 0;
        else
          v58 = *v13;
        JSC::MegamorphicCache::initAsMiss(v58, v57, (WTF::StringImpl *)v11, a4, a5, a6, a7, a8);
      }
    }
    goto LABEL_317;
  }
  v70 = v15;
  v71 = *((_QWORD *)a1 + 7);
  v72 = 10;
  while (1)
  {
    v73 = *(_DWORD *)v16 & 0xFFFFFFFE;
    v74 = 16 * v73;
    if ((v18 & 8) == 0)
      break;
    v270 = (*(uint64_t (**)(int64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * v73 + 0x4C) + 0x68))(v16, a1, v11, &v278);
    if (*(_DWORD *)(v71 + 80))
    {
      v104 = *(_DWORD *)(v71 + 80);
      if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v71 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v71 + 16))
        goto LABEL_318;
    }
    if ((v270 & 1) != 0)
      goto LABEL_215;
    if (BYTE2(v283[1]) == 3)
    {
      if (BYTE4(v283[1]))
        goto LABEL_318;
      v81 = *(unsigned __int8 *)(v16 + 5);
      if (v81 == 61)
        goto LABEL_118;
    }
    else
    {
      v81 = *(unsigned __int8 *)(v16 + 5);
      if (v81 == 61)
      {
        if (BYTE2(v283[1]) == 1)
          goto LABEL_318;
        goto LABEL_118;
      }
    }
    if ((v81 - 50) < 0xFFFFFFF5)
      goto LABEL_118;
    if (!v11)
      goto LABEL_118;
    v82 = *(_DWORD *)(v11 + 16);
    if ((v82 & 0x20) != 0)
      goto LABEL_118;
    v83 = *(unsigned int *)(v11 + 4);
    if (!(_DWORD)v83)
      goto LABEL_118;
    v84 = *(unsigned __int8 **)(v11 + 8);
    if ((v82 & 4) != 0)
    {
      v85 = *v84;
      if ((_DWORD)v83 == 1)
      {
LABEL_145:
        if ((v85 - 48) < 0xA)
          goto LABEL_318;
        goto LABEL_118;
      }
      if (v85 == 45)
      {
        v85 = v84[1];
        goto LABEL_149;
      }
      if ((v85 - 48) < 0xA)
        goto LABEL_160;
      if ((_DWORD)v83 == 8)
        goto LABEL_159;
    }
    else
    {
      v85 = *(unsigned __int16 *)v84;
      if ((_DWORD)v83 == 1)
        goto LABEL_145;
      if (v85 == 45)
      {
        v85 = *((unsigned __int16 *)v84 + 1);
LABEL_149:
        if ((v85 - 48) < 0xA)
        {
          if ((_DWORD)v83 == 2)
            goto LABEL_318;
          goto LABEL_160;
        }
        if ((_DWORD)v83 != 9)
          goto LABEL_118;
LABEL_159:
        if (v85 != 73)
          goto LABEL_118;
        goto LABEL_160;
      }
      if ((v85 - 48) < 0xA || (_DWORD)v83 == 8 && v85 == 73)
        goto LABEL_160;
    }
    if ((_DWORD)v83 != 3 || v85 != 78)
      goto LABEL_118;
LABEL_160:
    v268 = v268 & 0xFFFFFF0000000000 | v83 | ((unint64_t)((v82 >> 2) & 1) << 32);
    JSC::jsToNumber(v84, v268);
    v87 = (v86 >> 52) & 0x7FF;
    if ((_DWORD)v87 == 2047)
    {
      if ((v86 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", sizeof(__s));
        v88 = v292;
      }
      else
      {
        if ((v86 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v93 = &__s[1];
        }
        else
        {
          v93 = __s;
        }
        *(_QWORD *)v93 = 0x7974696E69666E49;
        v88 = v93 + 8;
      }
      goto LABEL_174;
    }
    v89 = v86 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v86 & 0x8000000000000000) != 0 && v89)
    {
      __s[0] = 45;
      v271 = &__s[1];
    }
    else
    {
      if (!v89)
      {
        __s[0] = 48;
        v88 = &__s[1];
        goto LABEL_174;
      }
      v271 = __s;
    }
    v90 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v86 & 0x800FFFFFFFFFFFFFLL, v87);
    v88 = WTF::dragonbox::detail::to_shortest(v90, v91, (uint64_t)v271, v92);
LABEL_174:
    *v88 = 0;
    v272 = strlen(__s);
    memcpy(&__dst, __s, v272);
    *((_BYTE *)&__dst + v272) = 0;
    v94 = *(unsigned int *)(v11 + 4);
    v95 = *(unsigned __int8 **)(v11 + 8);
    if ((*(_BYTE *)(v11 + 16) & 4) != 0)
    {
      if ((_DWORD)v94)
      {
        v100 = &__dst;
        v101 = *(unsigned int *)(v11 + 4);
        do
        {
          v103 = *(unsigned __int8 *)v100;
          v100 = (JSC::VM **)((char *)v100 + 1);
          v102 = v103;
          if (!v103 || *v95 != v102)
            goto LABEL_118;
          ++v95;
        }
        while (--v101);
      }
    }
    else if ((_DWORD)v94)
    {
      v96 = &__dst;
      v97 = *(unsigned int *)(v11 + 4);
      do
      {
        v99 = *(unsigned __int8 *)v96;
        v96 = (JSC::VM **)((char *)v96 + 1);
        v98 = v99;
        if (!v99 || *(unsigned __int16 *)v95 != v98)
          goto LABEL_118;
        v95 += 2;
      }
      while (--v97);
    }
    if (!*((_BYTE *)&__dst + v94))
      goto LABEL_318;
LABEL_118:
    if ((*(_WORD *)(v74 + 12) & 0x800) == 0)
    {
      v77 = *(_DWORD *)v16;
LABEL_120:
      v78 = *(_QWORD *)(16 * (v77 & 0xFFFFFFFE) + 0x30);
      if (!v78)
        v78 = *(_QWORD *)(v16 + 16);
      goto LABEL_122;
    }
    v77 = *(_DWORD *)v16;
    if (BYTE2(v283[1]) == 3)
      goto LABEL_120;
    v79 = 16 * (v77 & 0xFFFFFFFE);
    if ((*(_WORD *)(v79 + 12) & 0x800) != 0)
    {
      v78 = (*(uint64_t (**)(int64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v79 + 76) + 0xB0))(v16, a1);
    }
    else
    {
      v78 = *(_QWORD *)(v79 + 48);
      if (!v78)
        v78 = *(_QWORD *)(v16 + 16);
    }
    if (*(_DWORD *)(v71 + 80))
    {
      v80 = *(_DWORD *)(v71 + 80);
      if ((v80 & 0x27) != 0 && (v80 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v71 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v71 + 16))
        goto LABEL_318;
    }
LABEL_122:
    if ((v78 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v78 + 5) < 0x17u)
      goto LABEL_318;
    v18 = *(_BYTE *)(v78 + 6);
    v16 = v78;
  }
  if (!(_DWORD)v14
    || (v14 & ~*(_DWORD *)(16 * v73 + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * v73), (JSC::VM *)v71, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v75)|| (__dst = (JSC::VM *)v11, v76 = JSC::PropertyTable::get(v75, (uint64_t *)&__dst), a6 = v76, (_DWORD)v76 == -1))
  {
    if ((*(_BYTE *)(v16 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v16, (JSC::VM *)v71, v11, (uint64_t)&v278) & 1) != 0)
    {
      goto LABEL_215;
    }
    goto LABEL_118;
  }
  v105 = HIDWORD(v76);
  if ((int)v76 <= 63)
  {
    v106 = v16 + 16;
    v107 = v76 << 32;
  }
  else
  {
    v106 = *(_QWORD *)(v16 + 8) - 8;
    v107 = 0x3F00000000 - (v76 << 32);
  }
  v72 = *(_QWORD *)(v106 + (v107 >> 29));
  if ((v72 & 0xFFFE000000000002) != 0)
    goto LABEL_213;
  v108 = *(unsigned __int8 *)(v72 + 5);
  if (v108 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v16, v71, (uint64_t)&v278, v72, SHIDWORD(v76), v76);
LABEL_215:
    if (BYTE1(v283[1]) != 2)
    {
      if (BYTE1(v283[1]) != 1)
      {
        v16 = (int64_t)v282;
        LOBYTE(v105) = v280;
        goto LABEL_222;
      }
      goto LABEL_84;
    }
    goto LABEL_92;
  }
  if (v108 != 6)
  {
LABEL_213:
    v278 = (uint64_t (*)(unint64_t))v72;
    v282 = (JSC::JSString *)v16;
    v280 = __PAIR64__(v76, HIDWORD(v76));
    LOWORD(v283[1]) = 257;
    goto LABEL_318;
  }
  v109 = *(_DWORD *)(v74 + 16) & 3;
  v110 = *(_QWORD *)(v72 + 16);
  if (v70 == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v72 & 0xFFFFFFFE) + 0x4C)))
  {
    v112 = *(int8x16_t ***)(v72 + 24);
    v111 = *(_QWORD *)(v72 + 32);
    v278 = *(uint64_t (**)(unint64_t))(v72 + 8);
    v279 = v110;
    LODWORD(v280) = HIDWORD(v76);
    v282 = (JSC::JSString *)v16;
    BYTE1(v283[1]) = 3;
    if (v109 != 2)
      LOBYTE(v283[1]) = 1;
    BYTE3(v283[1]) = 1;
    v286 = v112;
    v287 = v111;
  }
  else
  {
    v278 = *(uint64_t (**)(unint64_t))(v72 + 8);
    v279 = v110;
    LODWORD(v280) = HIDWORD(v76);
    v282 = (JSC::JSString *)v16;
    BYTE1(v283[1]) = 3;
    if (v109 != 2)
      LOBYTE(v283[1]) = 1;
  }
LABEL_222:
  v62 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x28);
  if ((v105 & 0x20) != 0)
    v16 = (int64_t)v281;
  if (BYTE3(v283[1]) != 1)
    goto LABEL_109;
  v63 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v64 = v286;
  if ((v16 & 0xFFFE000000000002) == 0)
  {
    v113 = *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C);
    v114 = *(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C) != 0;
    v115 = 16 * v113;
    if ((_DWORD)v113)
      v116 = v286 == (int8x16_t **)v115;
    else
      v116 = 1;
    if (!v116)
    {
      do
      {
        v115 = *(_QWORD *)(v115 + 16);
        v114 = v115 != 0;
      }
      while ((int8x16_t **)v115 != v286 && v115 != 0);
    }
    if (v114)
    {
LABEL_109:
      v60 = v278(v62);
      goto LABEL_110;
    }
  }
LABEL_599:
  __dst = v63;
  v60 = JSC::throwDOMAttributeGetterTypeError(v62, &__dst, v64, (WTF::StringImpl *)v11);
LABEL_110:
  v72 = v60;
LABEL_318:
  if (v285)
  {
    v159 = *(_DWORD *)(v284 + 4);
    if (!v159)
    {
      __break(0xC471u);
      JUMPOUT(0x198778284);
    }
    *(_DWORD *)(v284 + 4) = v159 - 1;
  }
  return v72;
}

uint64_t operationInByIdGaveUp(unint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  JSC::VM *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  JSC::VM *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  __int16 v57;
  int v58;
  JSC::VM *v60;
  uint64_t v61;
  int8x16_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::AtomStringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  BOOL v79;
  int v80;
  char v81;
  int v82;
  WTF::StringImpl *v83;
  BOOL v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  JSC::Heap *v88;
  unint64_t OutOfMemoryError;
  int v90;
  WTF::AtomStringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  WTF::StringImpl *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned __int16 *v108;
  uint64_t v109;
  unsigned int v110;
  BOOL v111;
  uint64_t v112;
  JSC::VM *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int *v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  WTF::StringImpl **v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  WTF::StringImpl *v162;
  unsigned int v163;
  int v164;
  _WORD *v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  unsigned int v169;
  unsigned int v170;
  JSC::VM *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unsigned int v177;
  unsigned int v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  int v182;
  unint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  JSC::VM *v187;
  int v188;
  unsigned int v189;
  int v190;
  unint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  char v197;
  unsigned __int16 *v198;
  uint64_t v199;
  unsigned int v200;
  unsigned int *v201;
  unsigned int v202;
  unint64_t v203;
  uint64_t v204;
  int v205;
  JSC::VM *v206;
  char OwnStaticPropertySlot;
  unint64_t v208;
  JSC::VM *v209;
  JSC::VM *v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  int v221;
  uint64_t v222;
  int v223;
  WTF::StringImpl *v224;
  uint64_t (*v225)(WTF::StringImpl **);
  WTF::StringImpl **v226;
  unint64_t v227;
  int v228;
  uint64_t v229;
  JSC::VM *v230;
  uint64_t v231;
  _BOOL8 v232;
  JSC::VM *v233;
  char v234;
  int v235;
  unsigned int v236;
  uint64_t v237;
  unsigned __int8 *v238;
  int v239;
  _BOOL4 v240;
  JSC::VM *v241;
  WTF::StringImpl *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  WTF::StringImpl *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  double v254;
  const unsigned __int8 *v255;
  BOOL v256;
  int v257;
  uint64_t v258;
  unint64_t v259;
  WTF::StringImpl *v260;
  uint64_t v261;
  uint64_t v262;
  WTF::StringImpl **v263;
  unint64_t v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unsigned __int8 *v274;
  unsigned int v275;
  unsigned int v276;
  uint64_t v277;
  unsigned __int8 *v278;
  unsigned int v279;
  BOOL v280;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v282;
  unint64_t v283;
  JSC::VM *v284;
  WTF::StringImpl *v285;
  uint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unsigned int *v289;
  uint64_t v290;
  int v291;
  char v292;
  uint64_t v293;
  char v294;
  uint64_t v295;
  WTF::StringImpl **v296;
  WTF::StringImpl *v297[2];
  WTF::StringImpl *v298;
  uint64_t v299;
  uint64_t vars0;

  v8 = a1;
  v299 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(JSC::VM **)(v9 + 56);
  v11 = vars0;
  *((_QWORD *)v10 + 5) = vars0;
  *(_DWORD *)(v11 + 36) = *(_DWORD *)(a2 + 112);
  *(_WORD *)(a2 + 129) |= 2u;
  if ((a1 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a1 + 5) <= 0x16u)
  {
    v60 = v10;
    v61 = WTF::fastCompactMalloc((WTF *)0x20);
    v62.i64[0] = 0x1100000002;
    *(_QWORD *)v61 = 0x1100000002;
    *(_QWORD *)(v61 + 8) = "is not an Object.";
    *(_DWORD *)(v61 + 16) = 4;
    v63 = *(_QWORD *)(v9 + 56);
    JSC::errorDescriptionForValue((JSC::JSGlobalObject *)v9, v8, v64, v65, v66, v67, v68, v69, (int **)v297, v62);
    if (*(_DWORD *)(v63 + 80))
    {
      v223 = *(_DWORD *)(v63 + 80);
      if ((v223 & 0x27) != 0 && (v223 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v63 + 64), 7u, (uint64_t)v71, v72, v73, v74, v75, v76);
      if (*(_QWORD *)(v63 + 16))
        goto LABEL_287;
    }
    v71 = v297[0];
    if (!v297[0])
    {
      v285 = 0;
      goto LABEL_90;
    }
    v77 = *(_DWORD *)(v61 + 4);
    if (v77 < 0
      || ((v78 = *((_DWORD *)v297[0] + 1), v79 = __OFADD__(v77, 1), v80 = v77 + 1, !v79) ? (v81 = 0) : (v81 = 1),
          v78 < 0 || (v81 & 1) != 0 || __OFADD__(v78, v80)))
    {
LABEL_287:
      v285 = 0;
    }
    else
    {
      if ((*((_BYTE *)v297[0] + 16) & 4) != 0)
        v82 = (*(unsigned __int8 *)(v61 + 16) >> 2) & 1;
      else
        v82 = 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((v78 + v80), v82, (uint64_t)v297[0], 32, v61, (int **)&v285);
    }
    v83 = v297[0];
    v297[0] = 0;
    if (v83)
    {
      if (*(_DWORD *)v83 == 2)
      {
        WTF::StringImpl::~StringImpl(v83, v70, (uint64_t)v71, v72, v73, v74, v75, v76);
        WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
      }
      else
      {
        *(_DWORD *)v83 -= 2;
      }
    }
LABEL_90:
    if (*(_QWORD *)(v63 + 16))
      v84 = 1;
    else
      v84 = v285 == 0;
    if (v84)
    {
      v201 = (unsigned int *)(v63 + 80);
      *(_QWORD *)(v63 + 16) = 0;
      do
        v202 = __ldaxr(v201);
      while (__stlxr(v202 & 0xFFFFFFEF, v201));
      OutOfMemoryError = JSC::createOutOfMemoryError(v9, v70);
LABEL_102:
      v99 = v285;
      v285 = 0;
      v100 = (uint64_t)v60;
      if (v99)
      {
        if (*(_DWORD *)v99 == 2)
        {
          WTF::StringImpl::~StringImpl(v99, v91, v92, v93, v94, v95, v96, v97);
          WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
          v100 = (uint64_t)v60;
        }
        else
        {
          *(_DWORD *)v99 -= 2;
        }
      }
      if (*(_DWORD *)v61 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v61, v91, v92, v93, v94, v95, v96, v97);
        WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
        v100 = (uint64_t)v60;
      }
      else
      {
        *(_DWORD *)v61 -= 2;
      }
      if ((OutOfMemoryError & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16
                                              * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                + 0x4C)))
      {
        v203 = JSC::Exception::create(v100, (JSC::VM *)OutOfMemoryError, 0, v93, v94, v95, v96, v97);
        v100 = (uint64_t)v60;
        OutOfMemoryError = v203;
      }
      v101 = *(_QWORD *)(v100 + 16);
      v102 = *(_QWORD *)(v100 + 24);
      if (v101 && v102 == v101)
        return 10;
      if (v102 == OutOfMemoryError)
      {
        *(_QWORD *)(v100 + 16) = OutOfMemoryError;
        *(_QWORD *)(v100 + 32) = OutOfMemoryError;
        if (!OutOfMemoryError)
          return 10;
LABEL_118:
        v106 = (unsigned int *)(v100 + 80);
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 | 0x10, v106));
        return 10;
      }
      v103 = *(uint64_t **)(v100 + 40);
      if (v103)
      {
        v104 = v103[3];
        if ((v104 & 0xFFFE000000000007) == 3
          || *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v104 & 0xFFFFFFFE) + 0x28) + 96) == v104)
        {
          v297[0] = *(WTF::StringImpl **)(v100 + 48);
          do
          {
            v204 = JSC::CallFrame::callerFrame(v103, v297);
            v103 = (uint64_t *)v204;
          }
          while (v204 && (*(_QWORD *)(v204 + 24) & 0xFFFE000000000007) == 3);
          v100 = (uint64_t)v60;
        }
        if (!HIBYTE(word_1ECF4C48C))
          goto LABEL_116;
        if (v103 && (v103[3] & 0xFFFE000000000007) != 3)
        {
          v224 = (WTF::StringImpl *)v103[2];
          goto LABEL_293;
        }
      }
      else
      {
        if (!HIBYTE(word_1ECF4C48C))
        {
          v103 = 0;
LABEL_116:
          v105 = *(_QWORD *)(v9 + 2016);
          if (v105
            && (*(_WORD *)(v105 + 48) & 0x40) != 0
            && (*(_QWORD *)(v105 + 152) || *(_QWORD *)(v105 + 160))
            && !*(_BYTE *)(OutOfMemoryError + 32))
          {
            v297[0] = 0;
            if (v103)
            {
              JSC::StackVisitor::visit<(JSC::StackVisitor::EmptyEntryFrameAction)0,JSC::GetCatchHandlerFunctor>((JSC::CallFrame *)v103, v60, v297, 0, v94, v95, v96, v97);
              v232 = v297[0] != 0;
            }
            else
            {
              v232 = 0;
            }
            JSC::Debugger::exception(v105, (WTF::AtomStringImpl *)v9, (JSC::Wasm::NameSection *)v103, *(_QWORD *)(OutOfMemoryError + 8), v232, v95, v96, v97, v98);
            v100 = (uint64_t)v60;
          }
          *(_BYTE *)(OutOfMemoryError + 32) = 1;
          *(_QWORD *)(v100 + 16) = OutOfMemoryError;
          *(_QWORD *)(v100 + 32) = OutOfMemoryError;
          goto LABEL_118;
        }
        v103 = 0;
      }
      v224 = 0;
LABEL_293:
      v297[0] = v224;
      v285 = (WTF::StringImpl *)v103;
      WTF::dataLog<char [34],WTF::RawPointer,char [17],JSC::CodeBlock *,char [2]>("Throwing exception in call frame ", (const void **)&v285, " for code block ", (uint64_t *)v297, "\n");
      __break(0xC471u);
      JUMPOUT(0x198779F84);
    }
    v297[0] = (WTF::StringImpl *)v8;
    switch(v8)
    {
      case 0xAuLL:
        v85 = 2;
        goto LABEL_96;
      case 2uLL:
        v85 = 4;
        goto LABEL_96;
      case 0uLL:
        goto LABEL_271;
    }
    if (JSC::JSValue::isAnyInt((JSC::JSValue *)v297))
    {
      v85 = 16;
      goto LABEL_96;
    }
    if ((unint64_t)v297[0] >> 49)
    {
      v85 = 32;
      goto LABEL_96;
    }
    if (((unint64_t)v297[0] & 0xFFFE000000000002) != 0)
    {
      if (((unint64_t)v297[0] & 0xFFFFFFFFFFFFFFFELL) != 6)
        goto LABEL_244;
    }
    else
    {
      v163 = *((unsigned __int8 *)v297[0] + 5);
      if (v163 == 2)
      {
        v85 = 64;
        goto LABEL_96;
      }
      if (((unint64_t)v297[0] & 0xFFFFFFFFFFFFFFFELL) != 6)
      {
        if (v163 > 0x16)
        {
          v85 = 128;
          goto LABEL_96;
        }
LABEL_244:
        if (JSC::JSValue::isCallable((JSC::JSValue *)v297))
        {
          v85 = 1;
          goto LABEL_96;
        }
        if (((unint64_t)v297[0] & 0xFFFE000000000002) == 0)
        {
          v205 = *((unsigned __int8 *)v297[0] + 5);
          if (v205 == 4)
            v85 = 256;
          else
            v85 = (v205 == 3) << 9;
LABEL_96:
          v86 = *(_QWORD *)(v9 + 176);
          v87 = *(_QWORD *)(v9 + 56);
          if ((v86 & 1) != 0)
          {
            v225 = *(uint64_t (**)(WTF::StringImpl **))(v86 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v9 & 8) != 0)
              v226 = (WTF::StringImpl **)(v9 - 16);
            else
              v226 = (WTF::StringImpl **)(v9 & 0xFFFFFFFFFFFFC000 | 8);
            v297[0] = *v226;
            v297[1] = (WTF::StringImpl *)v9;
            v298 = (WTF::StringImpl *)(v9 + 176);
            v86 = v225(v297);
          }
          v88 = *(JSC::Heap **)(v87 + 40448);
          if (!v88)
            v88 = JSC::GCClient::Heap::errorInstanceSpaceSlow((JSC::Heap **)(v87 + 37552));
          OutOfMemoryError = *((_QWORD *)v88 + 3);
          if (OutOfMemoryError >= *((_QWORD *)v88 + 4))
          {
            OutOfMemoryError = *((_QWORD *)v88 + 5);
            if ((OutOfMemoryError & 1) != 0)
            {
              JSC::sanitizeStackForVM((JSC *)v87, v70, (uint64_t)v71, v72, v73, v74, v75, v76);
              OutOfMemoryError = JSC::LocalAllocator::allocateSlowCase((uint64_t)v88, v87 + 192, 64, 0, 0, v251, v252, v253);
              goto LABEL_101;
            }
            v227 = *(_QWORD *)(OutOfMemoryError + 8) ^ *((_QWORD *)v88 + 6);
            *((_QWORD *)v88 + 4) = OutOfMemoryError + HIDWORD(v227);
            *((_QWORD *)v88 + 5) = OutOfMemoryError + (int)v227;
          }
          *((_QWORD *)v88 + 3) = OutOfMemoryError + 64;
LABEL_101:
          *(_DWORD *)OutOfMemoryError = 0;
          v90 = *(_DWORD *)(v86 + 8);
          *(_DWORD *)OutOfMemoryError = v86 >> 4;
          *(_DWORD *)(OutOfMemoryError + 4) = v90;
          *(_WORD *)(OutOfMemoryError + 56) = 0;
          *(_OWORD *)(OutOfMemoryError + 40) = 0u;
          *(_OWORD *)(OutOfMemoryError + 24) = 0u;
          *(_OWORD *)(OutOfMemoryError + 8) = 0u;
          *(_BYTE *)(OutOfMemoryError + 58) = 5;
          *(_BYTE *)(OutOfMemoryError + 59) = *(_BYTE *)(OutOfMemoryError + 59) & 0xE0 | 0x10;
          JSC::ErrorInstance::finishCreation(OutOfMemoryError, v87, &v285, 0, (uint64_t)JSC::invalidParameterInSourceAppender, v85, 1, v76, (__n128)0);
          goto LABEL_102;
        }
LABEL_271:
        v85 = 0;
        goto LABEL_96;
      }
    }
    v85 = 8;
    goto LABEL_96;
  }
  v12 = *(_QWORD *)(a2 + 16);
  if (byte_1ECF4C6B7)
  {
    v241 = v10;
    if (v12)
    {
      if ((v12 & 1) != 0)
        v242 = (WTF::StringImpl *)(v12 & 0xFFFFFFFFFFFFFFFELL);
      else
        v242 = *(WTF::StringImpl **)(v12 + 8);
    }
    else
    {
      v242 = 0;
    }
    JSC::ICEvent::ICEvent((uint64_t)v297, (uint64_t **)v10, (const WTF::StringImpl *)0x11, 16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C), v242, a6, a7, a8);
    JSC::ICEvent::log((JSC::ICEvent *)v297, v243, v244, v245, v246, v247, v248, v249);
    v250 = v298;
    v298 = 0;
    if (v250)
    {
      if (*(_DWORD *)v250 == 2)
      {
        WTF::StringImpl::~StringImpl(v250, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v264, v265, v266, v267, v268, v269, v270, v271);
      }
      else
      {
        *(_DWORD *)v250 -= 2;
      }
    }
    v10 = v241;
  }
  v287 = 0xFFFFFFFF00000000;
  v289 = 0;
  v290 = 0;
  v288 = v8;
  v291 = 0x10000;
  v292 = 0;
  LOBYTE(v293) = 0;
  v294 = 0;
  v295 = 0;
  v296 = 0;
  if (v12)
  {
    if ((v12 & 1) != 0)
      v12 &= ~1uLL;
    else
      v12 = *(_QWORD *)(v12 + 8);
  }
  v13 = (_BYTE *)(v8 + 6);
  v14 = v12 >> 4;
  if ((*(_BYTE *)(v8 + 6) & 8) == 0)
  {
    v15 = *(JSC::VM **)(v9 + 56);
    a2 = 40;
    v16 = (unsigned int *)v8;
    while (1)
    {
      v17 = *v16 & 0xFFFFFFFE;
      v18 = 16 * v17;
      if ((_DWORD)v14 && (v14 & ~*(_DWORD *)(16 * v17 + 0x20)) == 0)
      {
        v19 = *(_QWORD *)(16 * v17 + 0x58);
        if (v19
          || (v31 = *(_QWORD *)(16 * v17 + 0x40)) != 0
          && (*(_BYTE *)(v31 + 5) == 1 || *(_DWORD *)(v31 + 80) >= 2u)
          && (v32 = v10,
              JSC::Structure::materializePropertyTable((JSC::Structure *)v18, v15, 1, a4, a5, a6, a7, a8),
              a2 = 40,
              v10 = v32,
              v19))
        {
          if (*(_DWORD *)(v19 + 24))
          {
            v20 = *(_QWORD *)(v19 + 16);
            v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
            v22 = *(unsigned int *)(v19 + 8);
            v23 = *(_DWORD *)(v12 + 16);
            if ((v20 & 1) != 0)
            {
              if ((v23 & 0x20) != 0)
                v23 = *(_DWORD *)(v12 + 32);
              v24 = *(_DWORD *)(v19 + 12);
              v25 = (v23 >> 8) & *(_QWORD *)&v24;
              v26 = *(unsigned __int8 *)(v21 + v25);
              if (!*(_BYTE *)(v21 + v25))
                goto LABEL_20;
              v27 = v21 + v22;
              v28 = 1;
              while (1)
              {
                v29 = *(_QWORD *)(v27 + 8 * (v26 - 1));
                if (v12 == (v29 & 0xFFFFFFFFFFFFLL))
                  break;
                v25 = ((_DWORD)v25 + v28) & v24;
                v26 = *(unsigned __int8 *)(v21 + v25);
                ++v28;
                if (!*(_BYTE *)(v21 + v25))
                  goto LABEL_20;
              }
              a6 = (v29 >> 16) & 0xFF00000000 | HIBYTE(v29);
            }
            else
            {
              if ((v23 & 0x20) != 0)
                v23 = *(_DWORD *)(v12 + 32);
              v41 = *(_DWORD *)(v19 + 12);
              v42 = v41 & (v23 >> 8);
              v43 = *(_DWORD *)(v21 + 4 * v42);
              if (!v43)
                goto LABEL_20;
              v44 = v21 + 4 * v22;
              v45 = 1;
              while (1)
              {
                v46 = (v43 - 1);
                if (v12 == *(_QWORD *)(v44 + 16 * v46))
                  break;
                v42 = (v42 + v45) & v41;
                v43 = *(_DWORD *)(v21 + 4 * v42);
                ++v45;
                if (!v43)
                  goto LABEL_20;
              }
              a6 = *(unsigned int *)(v44 + 16 * v46 + 8) | ((unint64_t)*(unsigned __int8 *)(v44 + 16 * v46 + 12) << 32);
            }
            if ((_DWORD)a6 != -1)
            {
              v52 = HIDWORD(a6);
              if ((int)a6 <= 63)
              {
                v53 = (uint64_t)(v16 + 4);
                v54 = a6 << 32;
              }
              else
              {
                v53 = *((_QWORD *)v16 + 1) - 8;
                v54 = 0x3F00000000 - (a6 << 32);
              }
              v55 = *(_QWORD *)(v53 + (v54 >> 29));
              if ((v55 & 0xFFFE000000000002) == 0)
              {
                v56 = *(unsigned __int8 *)(v55 + 5);
                if (v56 != 5)
                {
                  if (v56 != 6)
                    goto LABEL_66;
                  v153 = *(_DWORD *)(v18 + 16) & 3;
                  v154 = *(_QWORD *)(v55 + 16);
                  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v55 & 0xFFFFFFFE)
                                                                                           + 0x4C)))
                  {
                    v156 = *(_QWORD *)(v55 + 24);
                    v155 = *(WTF::StringImpl ***)(v55 + 32);
                    v285 = *(WTF::StringImpl **)(v55 + 8);
                    v286 = v154;
                    LODWORD(v287) = HIDWORD(a6);
                    v289 = v16;
                    goto LABEL_157;
                  }
                  v285 = *(WTF::StringImpl **)(v55 + 8);
                  v286 = v154;
                  LODWORD(v287) = HIDWORD(a6);
                  v289 = v16;
LABEL_256:
                  BYTE1(v291) = 3;
                  if (v153 != 2)
                    LOBYTE(v291) = 1;
                  goto LABEL_69;
                }
                v127 = v16;
                v128 = (uint64_t)v15;
LABEL_148:
                JSC::JSObject::fillGetterPropertySlot(v127, v128, (uint64_t)&v285, v55, v52, a6);
                goto LABEL_69;
              }
LABEL_66:
              v285 = (WTF::StringImpl *)v55;
              v289 = v16;
LABEL_67:
              v287 = __PAIR64__(a6, v52);
              v57 = 257;
              goto LABEL_68;
            }
          }
        }
      }
LABEL_20:
      if ((*v13 & 0x20) == 0)
        goto LABEL_21;
      v125 = *(unsigned int *)(16 * (*v16 & 0xFFFFFFFE) + 0x4C);
      if (!(_DWORD)v125 || v12 == 0)
        goto LABEL_21;
      v34 = 16 * v125;
      do
      {
        v33 = *(_QWORD *)(v34 + 24);
        if (!v33)
          goto LABEL_32;
        if ((*(_BYTE *)((16 * *v16) | 0x12) & 0x40) != 0)
          goto LABEL_32;
        v35 = *(_DWORD *)(v12 + 16);
        if ((v35 & 0x20) != 0)
          goto LABEL_32;
        v36 = *(_DWORD *)(v33 + 4) & (v35 >> 8);
        v37 = *(_QWORD *)(v33 + 32);
        v38 = *(unsigned __int16 *)(v37 + 4 * v36);
        if (v38 == 0xFFFF)
          goto LABEL_32;
        v282 = *(_QWORD *)(v33 + 16);
        v284 = v10;
        while (1)
        {
          v283 = (__int16)v38;
          v39 = (_QWORD *)(*(_QWORD *)(v33 + 24) + 40 * (__int16)v38);
          v40 = v39[1];
          if (!v40)
            goto LABEL_41;
          if ((WTF::equal(v12, *v39, v40 - 1) & 1) != 0)
            break;
          v37 = *(_QWORD *)(v33 + 32);
          v10 = v284;
LABEL_41:
          v36 = *(__int16 *)(v37 + 4 * v36 + 2);
          a2 = 40;
          if (v36 == -1)
            goto LABEL_32;
          LOWORD(v38) = *(_WORD *)(v37 + 4 * v36);
        }
        v157 = *(_QWORD *)(v33 + 24);
        v10 = v284;
        a2 = 40;
        if (v157)
        {
          v158 = *(_DWORD *)(v157 + 40 * (int)v283 + 16);
          if ((v158 & 0x3B10) == 0)
          {
            if ((v158 & 0x400) != 0)
            {
              v257 = *(_DWORD *)(v157 + 40 * (int)v283 + 16);
              v258 = *(_QWORD *)(v157 + 40 * (int)v283 + 24);
              v84 = v258 == (int)v258;
              v259 = v258 | 0xFFFE000000000000;
              v260 = (WTF::StringImpl *)(COERCE__INT64((double)v258) + 0x2000000000000);
              if (v84)
                v260 = (WTF::StringImpl *)v259;
              v285 = v260;
              LODWORD(v287) = v257;
              v289 = v16;
              BYTE1(v291) = 1;
              goto LABEL_69;
            }
            v159 = *(_DWORD *)(v157 + 40 * (int)v283 + 16);
            if ((v158 & 0x8000) != 0)
            {
              v261 = v157 + 40 * (int)v283;
              v263 = *(WTF::StringImpl ***)(v261 + 24);
              v262 = *(_QWORD *)(v261 + 32);
              v285 = *v263;
              v286 = v262;
              LODWORD(v287) = v159;
              v289 = v16;
              LOWORD(v291) = 769;
              HIBYTE(v291) = 1;
              v295 = v282;
              v296 = v263;
              goto LABEL_69;
            }
            v160 = v157 + 40 * (int)v283;
            v162 = *(WTF::StringImpl **)(v160 + 24);
            v161 = *(_QWORD *)(v160 + 32);
            if ((v158 & 0x4000) != 0)
            {
              v285 = v162;
              v286 = v161;
              LODWORD(v287) = v158;
              v289 = v16;
              LOWORD(v291) = 769;
              HIBYTE(v291) = 1;
              v295 = v282;
              v296 = 0;
              goto LABEL_69;
            }
            v285 = v162;
            v286 = v161;
            LODWORD(v287) = v158;
            v289 = v16;
            v57 = 769;
LABEL_68:
            LOWORD(v291) = v57;
            goto LABEL_69;
          }
          v197 = JSC::setUpStaticFunctionSlot(v15, v282, v157 + 40 * (int)v283, v16, v12, (uint64_t)&v285, a7, a8);
          a2 = 40;
          v10 = v284;
          if ((v197 & 1) != 0)
            goto LABEL_69;
        }
LABEL_32:
        v34 = *(_QWORD *)(v34 + 16);
      }
      while (v34);
LABEL_21:
      v30 = *(_QWORD *)(v18 + 48);
      if (!v30)
        v30 = *((_QWORD *)v16 + 2);
      if ((v30 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v30 + 5) < 0x17u)
      {
        if (v12)
        {
          v47 = *(_DWORD *)(v12 + 16);
          if ((v47 & 0x20) == 0)
          {
            v48 = *(_BYTE **)(v12 + 8);
            v49 = *(unsigned int *)(v12 + 4);
            if ((v47 & 4) != 0)
            {
              if (!(_DWORD)v49
                || (v50 = *v48 - 48, v50 > 9)
                || v49 >= 2 && *v48 == 48)
              {
                v51 = 6;
                goto LABEL_70;
              }
              v273 = v49 - 1;
              v274 = v48 + 1;
              v51 = 6;
              while (v273)
              {
                if (v50 <= 0x19999999)
                {
                  v275 = *v274 - 48;
                  if (v275 <= 9)
                  {
                    v111 = __CFADD__(v275, 10 * v50);
                    v50 = v275 + 10 * (_DWORD)v50;
                    --v273;
                    ++v274;
                    if (!v111)
                      continue;
                  }
                }
                goto LABEL_70;
              }
              if ((_DWORD)v50 != -1)
                goto LABEL_130;
            }
            else if ((_DWORD)v49)
            {
              v50 = *(unsigned __int16 *)v48 - 48;
              if (v50 > 9)
              {
                v51 = 6;
                if (v294)
                  goto LABEL_71;
                return v51;
              }
              if (*(_WORD *)v48 != 48 || v49 <= 1)
              {
                v108 = (unsigned __int16 *)(v48 + 2);
                v109 = v49 - 1;
                v51 = 6;
                while (v109)
                {
                  if (v50 <= 0x19999999)
                  {
                    v110 = *v108 - 48;
                    if (v110 <= 9)
                    {
                      v111 = __CFADD__(v110, 10 * v50);
                      v50 = v110 + 10 * (_DWORD)v50;
                      ++v108;
                      --v109;
                      if (!v111)
                        continue;
                    }
                  }
                  goto LABEL_70;
                }
                if ((_DWORD)v50 != -1)
                {
LABEL_130:
                  v112 = *(_QWORD *)(v9 + 56);
                  v51 = 6;
                  while (1)
                  {
                    v113 = v10;
                    v114 = 16 * (*(_DWORD *)v8 & 0xFFFFFFFE);
                    v122 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v114 + 0x4C) + 0x70))(v8, v9, v50, &v285);
                    if (*(_DWORD *)(v112 + 80))
                    {
                      v228 = *(_DWORD *)(v112 + 80);
                      if ((v228 & 0x27) != 0 && (v228 & 0x20) == 0)
                        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v112 + 64), 7u, v116, v117, v118, v119, v120, v121);
                      if (*(_QWORD *)(v112 + 16))
                      {
LABEL_303:
                        v51 = 6;
                        goto LABEL_70;
                      }
                    }
                    v10 = v113;
                    if ((v122 & 1) != 0)
                      goto LABEL_69;
                    if (BYTE2(v291) == 3)
                    {
                      if (v292)
                        goto LABEL_303;
                      v123 = *(unsigned __int8 *)(v8 + 5);
                      v10 = v113;
                      if (v123 == 61)
                        goto LABEL_136;
                    }
                    else
                    {
                      v123 = *(unsigned __int8 *)(v8 + 5);
                      if (v123 == 61)
                      {
                        if (BYTE2(v291) == 1)
                          break;
                        goto LABEL_136;
                      }
                    }
                    if ((v123 - 39) <= 0xA)
                    {
                      v272 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v8, v115, v116, v117, v118, v119, v120, v121);
                      v10 = v113;
                      if (v272 <= v50)
                        break;
                    }
LABEL_136:
                    if ((*(_WORD *)(v114 + 12) & 0x800) == 0 || BYTE2(v291) == 3)
                    {
                      v124 = *(_QWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x30);
                      if (!v124)
                        v124 = *(_QWORD *)(v8 + 16);
                    }
                    else
                    {
                      if ((*(_WORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                      {
                        v124 = (*(uint64_t (**)(unint64_t, unint64_t))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0xB0))(v8, v9);
                      }
                      else
                      {
                        v124 = *(_QWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x30);
                        if (!v124)
                          v124 = *(_QWORD *)(v8 + 16);
                      }
                      if (*(_DWORD *)(v112 + 80))
                      {
                        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v112, v115, v116, v117, v118, v119, v120, v121);
                        v10 = v113;
                        if (hasExceptionsAfterHandlingTraps)
                          break;
                      }
                      else
                      {
                        v10 = v113;
                      }
                    }
                    if ((v124 & 0xFFFE000000000002) == 0)
                    {
                      v8 = v124;
                      if (*(unsigned __int8 *)(v124 + 5) > 0x16u)
                        continue;
                    }
                    goto LABEL_70;
                  }
                }
              }
            }
          }
        }
LABEL_310:
        v51 = 6;
        goto LABEL_70;
      }
      v13 = (_BYTE *)(v30 + 6);
      v16 = (unsigned int *)v30;
      if ((*(_BYTE *)(v30 + 6) & 8) != 0)
        goto LABEL_179;
    }
  }
  v30 = v8;
LABEL_179:
  if (!v12)
    goto LABEL_188;
  v164 = *(_DWORD *)(v12 + 16);
  if ((v164 & 0x20) != 0)
    goto LABEL_188;
  v165 = *(_WORD **)(v12 + 8);
  v166 = *(unsigned int *)(v12 + 4);
  if ((v164 & 4) == 0)
  {
    if ((_DWORD)v166)
    {
      v167 = (unsigned __int16)*v165 - 48;
      if (v167 <= 9 && (*v165 != 48 || v166 <= 1))
      {
        v198 = v165 + 1;
        v199 = v166 - 1;
        while (v199)
        {
          if (v167 > 0x19999999)
            goto LABEL_184;
          v200 = *v198 - 48;
          if (v200 > 9)
            goto LABEL_184;
          v168 = 0;
          LOBYTE(v166) = 0;
          v169 = 0;
          v111 = __CFADD__(v200, 10 * v167);
          v167 = v200 + 10 * v167;
          ++v198;
          --v199;
          if (v111)
            goto LABEL_186;
        }
        v169 = v167 & 0xFFFFFF00;
        v168 = 0x100000000;
        if (v167 == -1)
        {
          v168 = 0;
          LOBYTE(v166) = 0;
        }
        else
        {
          LOBYTE(v166) = v167;
        }
        if (v167 == -1)
          v169 = 0;
        goto LABEL_186;
      }
LABEL_184:
      v168 = 0;
      LOBYTE(v166) = 0;
    }
    else
    {
      v168 = 0;
    }
    v169 = 0;
LABEL_186:
    v170 = v166;
    goto LABEL_187;
  }
  if ((_DWORD)v166)
  {
    v276 = *(unsigned __int8 *)v165 - 48;
    if (v276 <= 9 && (v166 < 2 || *(_BYTE *)v165 != 48))
    {
      v277 = v166 - 1;
      v278 = (unsigned __int8 *)v165 + 1;
      while (v277)
      {
        if (v276 > 0x19999999)
          goto LABEL_417;
        v279 = *v278 - 48;
        if (v279 > 9)
          goto LABEL_417;
        v170 = 0;
        LOBYTE(v166) = 0;
        v168 = 0;
        v111 = __CFADD__(v279, 10 * v276);
        v276 = v279 + 10 * v276;
        --v277;
        ++v278;
        if (v111)
          goto LABEL_419;
      }
      if (v276 == -1)
        v170 = 0;
      else
        v170 = v276 & 0xFFFFFF00;
      if (v276 == -1)
        LOBYTE(v166) = 0;
      else
        LOBYTE(v166) = v276;
      if (v276 == -1)
        v168 = 0;
      else
        v168 = 0x100000000;
      goto LABEL_419;
    }
LABEL_417:
    v170 = 0;
    LOBYTE(v166) = 0;
  }
  else
  {
    v170 = 0;
  }
  v168 = 0;
LABEL_419:
  v169 = v166;
LABEL_187:
  if ((v168 & 0x100000000) != 0)
  {
    v208 = v169 | v170;
    v209 = *(JSC::VM **)(v9 + 56);
    v51 = 6;
    while (1)
    {
      v210 = v10;
      v211 = 16 * (*(_DWORD *)v8 & 0xFFFFFFFE);
      v212 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v211 + 0x4C) + 0x70))(v8, v9, v208, &v285);
      v220 = v212;
      if (*((_DWORD *)v209 + 20))
      {
        v240 = JSC::VM::hasExceptionsAfterHandlingTraps(v209, v213, v214, v215, v216, v217, v218, v219);
        if (((v240 | v220) & 1) != 0)
        {
          if (!v240)
            goto LABEL_69;
          goto LABEL_310;
        }
      }
      else if ((v212 & 1) != 0)
      {
        goto LABEL_69;
      }
      if (BYTE2(v291) == 3)
      {
        if (v292)
          goto LABEL_303;
        v221 = *(unsigned __int8 *)(v8 + 5);
        if (v221 == 61)
          goto LABEL_278;
      }
      else
      {
        v221 = *(unsigned __int8 *)(v8 + 5);
        if (v221 == 61)
        {
          if (BYTE2(v291) == 1)
            goto LABEL_303;
          goto LABEL_278;
        }
      }
      if ((v221 - 39) <= 0xA
        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v8, v213, v214, v215, v216, v217, v218, v219) <= v208)
      {
        goto LABEL_303;
      }
LABEL_278:
      if ((*(_WORD *)(v211 + 12) & 0x800) == 0 || BYTE2(v291) == 3)
      {
        v222 = *(_QWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x30);
        if (!v222)
          v222 = *(_QWORD *)(v8 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v222 = (*(uint64_t (**)(unint64_t, unint64_t))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)v8 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0xB0))(v8, v9);
        }
        else
        {
          v222 = *(_QWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x30);
          if (!v222)
            v222 = *(_QWORD *)(v8 + 16);
        }
        if (*((_DWORD *)v209 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v209, v213, v214, v215, v216, v217, v218, v219))
        {
          goto LABEL_303;
        }
      }
      if ((v222 & 0xFFFE000000000002) == 0)
      {
        v8 = v222;
        v10 = v210;
        if (*(unsigned __int8 *)(v222 + 5) > 0x16u)
          continue;
      }
      goto LABEL_70;
    }
  }
LABEL_188:
  v171 = *(JSC::VM **)(v9 + 56);
  v51 = 6;
  while (1)
  {
    v172 = 16 * (*(_DWORD *)v30 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v30 + 6) & 8) == 0)
      break;
    v233 = v10;
    v234 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x4C) + 0x68))(v30, v9, v12, &v285);
    if (*((_DWORD *)v171 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v171, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
      goto LABEL_303;
    if ((v234 & 1) != 0)
      goto LABEL_69;
    if (BYTE2(v291) == 3)
    {
      if (v292)
        goto LABEL_303;
      v235 = *(unsigned __int8 *)(v30 + 5);
      if (v235 == 61)
      {
LABEL_368:
        v10 = v233;
        goto LABEL_202;
      }
LABEL_330:
      if (!v12)
        goto LABEL_368;
      if ((v235 - 50) < 0xFFFFFFF5)
        goto LABEL_368;
      v236 = *(_DWORD *)(v12 + 16);
      if ((v236 & 0x20) != 0)
        goto LABEL_368;
      v237 = *(unsigned int *)(v12 + 4);
      if (!(_DWORD)v237)
        goto LABEL_368;
      v238 = *(unsigned __int8 **)(v12 + 8);
      if ((v236 & 4) == 0)
      {
        v239 = *(unsigned __int16 *)v238;
        if ((_DWORD)v237 == 1)
          goto LABEL_336;
        if (v239 == 45)
        {
          v239 = *((unsigned __int16 *)v238 + 1);
          goto LABEL_345;
        }
        if ((v239 - 48) >= 0xA && ((_DWORD)v237 != 8 || v239 != 73))
        {
LABEL_371:
          if ((_DWORD)v237 != 3 || v239 != 78)
            goto LABEL_368;
        }
LABEL_361:
        v283 = v283 & 0xFFFFFF0000000000 | v237 | ((unint64_t)((v236 >> 2) & 1) << 32);
        JSC::jsToNumber(v238, v283);
        WTF::numberToString(v297, v254);
        v256 = WTF::equal(v12, (unint64_t)v297, v255);
        v10 = v233;
        if (v256)
          goto LABEL_310;
        goto LABEL_202;
      }
      v239 = *v238;
      if ((_DWORD)v237 == 1)
      {
LABEL_336:
        v10 = v233;
        if ((v239 - 48) < 0xA)
          goto LABEL_310;
        goto LABEL_202;
      }
      if (v239 == 45)
      {
        v239 = v238[1];
LABEL_345:
        if ((v239 - 48) < 0xA)
        {
          if ((_DWORD)v237 == 2)
            goto LABEL_303;
          goto LABEL_361;
        }
        if ((_DWORD)v237 != 9)
          goto LABEL_368;
      }
      else
      {
        if ((v239 - 48) < 0xA)
          goto LABEL_361;
        if ((_DWORD)v237 != 8)
          goto LABEL_371;
      }
      if (v239 != 73)
        goto LABEL_368;
      goto LABEL_361;
    }
    v235 = *(unsigned __int8 *)(v30 + 5);
    if (v235 != 61)
      goto LABEL_330;
    v10 = v233;
    if (BYTE2(v291) == 1)
      goto LABEL_310;
LABEL_202:
    if ((*(_WORD *)(v172 + 12) & 0x800) != 0)
    {
      v184 = *(_DWORD *)v30;
      if (BYTE2(v291) != 3)
      {
        v230 = v10;
        v231 = 16 * (v184 & 0xFFFFFFFE);
        if ((*(_WORD *)(v231 + 12) & 0x800) != 0)
        {
          v185 = (*(uint64_t (**)(unint64_t, unint64_t))(16 * *(unsigned int *)(v231 + 76)
                                                                               + 0xB0))(v30, v9);
        }
        else
        {
          v185 = *(_QWORD *)(v231 + 48);
          if (!v185)
            v185 = *(_QWORD *)(v30 + 16);
        }
        if (*((_DWORD *)v171 + 20))
        {
          v280 = JSC::VM::hasExceptionsAfterHandlingTraps(v171, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          v10 = v230;
          if (v280)
            goto LABEL_310;
        }
        else
        {
          v10 = v230;
        }
        goto LABEL_206;
      }
    }
    else
    {
      v184 = *(_DWORD *)v30;
    }
    v185 = *(_QWORD *)(16 * (v184 & 0xFFFFFFFE) + 0x30);
    if (!v185)
      v185 = *(_QWORD *)(v30 + 16);
LABEL_206:
    if ((v185 & 0xFFFE000000000002) == 0)
    {
      v30 = v185;
      if (*(unsigned __int8 *)(v185 + 5) > 0x16u)
        continue;
    }
    goto LABEL_70;
  }
  if (!(_DWORD)v14 || (v14 & ~*(_DWORD *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_201;
  v173 = *(_QWORD *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x58);
  if (!v173)
  {
    v186 = *(_QWORD *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x40);
    if (!v186 || *(_BYTE *)(v186 + 5) != 1 && *(_DWORD *)(v186 + 80) < 2u)
      goto LABEL_201;
    v187 = v10;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE)), v171, 1, a4, a5, a6, a7, a8);
    v10 = v187;
    if (!v173)
      goto LABEL_201;
  }
  if (!*(_DWORD *)(v173 + 24))
    goto LABEL_201;
  v174 = *(_QWORD *)(v173 + 16);
  v175 = v174 & 0xFFFFFFFFFFFFFFFELL;
  v176 = *(unsigned int *)(v173 + 8);
  v177 = *(_DWORD *)(v12 + 16);
  if ((v174 & 1) != 0)
  {
    if ((v177 & 0x20) != 0)
      v177 = *(_DWORD *)(v12 + 32);
    v178 = *(_DWORD *)(v173 + 12);
    v179 = (v177 >> 8) & *(_QWORD *)&v178;
    v180 = *(unsigned __int8 *)(v175 + v179);
    if (*(_BYTE *)(v175 + v179))
    {
      v181 = v175 + v176;
      v182 = 1;
      while (1)
      {
        v183 = *(_QWORD *)(v181 + 8 * (v180 - 1));
        if (v12 == (v183 & 0xFFFFFFFFFFFFLL))
          break;
        v179 = ((_DWORD)v179 + v182) & v178;
        v180 = *(unsigned __int8 *)(v175 + v179);
        ++v182;
        if (!*(_BYTE *)(v175 + v179))
          goto LABEL_201;
      }
      a6 = (v183 >> 16) & 0xFF00000000 | HIBYTE(v183);
      goto LABEL_214;
    }
LABEL_201:
    if ((*(_BYTE *)(v30 + 6) & 0x20) != 0)
    {
      v206 = v10;
      OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v30, v171, v12, (uint64_t)&v285);
      v10 = v206;
      if ((OwnStaticPropertySlot & 1) != 0)
        goto LABEL_69;
    }
    goto LABEL_202;
  }
  if ((v177 & 0x20) != 0)
    v177 = *(_DWORD *)(v12 + 32);
  v188 = *(_DWORD *)(v173 + 12);
  v189 = v188 & (v177 >> 8);
  v190 = *(_DWORD *)(v175 + 4 * v189);
  if (!v190)
    goto LABEL_201;
  v191 = v175 + 4 * v176;
  v192 = 1;
  while (1)
  {
    v193 = (v190 - 1);
    if (v12 == *(_QWORD *)(v191 + 16 * v193))
      break;
    v189 = (v189 + v192) & v188;
    v190 = *(_DWORD *)(v175 + 4 * v189);
    ++v192;
    if (!v190)
      goto LABEL_201;
  }
  a6 = *(unsigned int *)(v191 + 16 * v193 + 8) | ((unint64_t)*(unsigned __int8 *)(v191 + 16 * v193 + 12) << 32);
LABEL_214:
  if ((_DWORD)a6 == -1)
    goto LABEL_201;
  v52 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v194 = v30 + 16;
    v195 = a6 << 32;
  }
  else
  {
    v194 = *(_QWORD *)(v30 + 8) - 8;
    v195 = 0x3F00000000 - (a6 << 32);
  }
  v55 = *(_QWORD *)(v194 + (v195 >> 29));
  if ((v55 & 0xFFFE000000000002) != 0)
  {
LABEL_229:
    v285 = (WTF::StringImpl *)v55;
    v289 = (unsigned int *)v30;
    goto LABEL_67;
  }
  v196 = *(unsigned __int8 *)(v55 + 5);
  if (v196 == 5)
  {
    v127 = (unsigned int *)v30;
    v128 = (uint64_t)v171;
    goto LABEL_148;
  }
  if (v196 != 6)
    goto LABEL_229;
  v153 = *(_DWORD *)(v172 + 16) & 3;
  v229 = *(_QWORD *)(v55 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v55 & 0xFFFFFFFE) + 0x4C)))
  {
    v285 = *(WTF::StringImpl **)(v55 + 8);
    v286 = v229;
    LODWORD(v287) = HIDWORD(a6);
    v289 = (unsigned int *)v30;
    goto LABEL_256;
  }
  v156 = *(_QWORD *)(v55 + 24);
  v155 = *(WTF::StringImpl ***)(v55 + 32);
  v285 = *(WTF::StringImpl **)(v55 + 8);
  v286 = v229;
  LODWORD(v287) = HIDWORD(a6);
  v289 = (unsigned int *)v30;
LABEL_157:
  BYTE1(v291) = 3;
  if (v153 != 2)
    LOBYTE(v291) = 1;
  HIBYTE(v291) = 1;
  v295 = v156;
  v296 = v155;
LABEL_69:
  v51 = 7;
LABEL_70:
  if (v294)
  {
LABEL_71:
    v58 = *(_DWORD *)(v293 + 4);
    if (!v58)
    {
      __break(0xC471u);
      JUMPOUT(0x198779D10);
    }
    *(_DWORD *)(v293 + 4) = v58 - 1;
  }
  return v51;
}

uint64_t operationInByIdOptimize(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  double v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  JSC::VM *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _WORD *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  JSC::VM *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t result;
  int v44;
  int v45;
  _WORD *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned __int8 *v50;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int8x16_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::AtomStringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t Error;
  unsigned __int16 *v74;
  uint64_t v75;
  unsigned int v76;
  BOOL v77;
  unsigned int *v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  unsigned int v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  unsigned __int16 *v106;
  uint64_t v107;
  unsigned int v108;
  WTF::StringImpl *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  unint64_t v118;
  JSC::VM *v119;
  unsigned __int8 *v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  unsigned int v139;
  uint64_t v140;
  unsigned __int8 *v141;
  int v142;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  double v144;
  const unsigned __int8 *v145;
  uint64_t v146;
  unsigned __int8 *v147;
  unsigned int v148;
  JSC::VM *v149;
  unsigned __int8 *v150;
  uint64_t v151;
  int v152;
  int v153;
  int v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  unsigned __int8 *v158;
  unsigned int v159;
  unint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  char v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  char v176;
  uint64_t v177;
  WTF **v178;
  WTF *v179;
  char *v180;
  WTF::StringImpl *v181;
  uint64_t *v182;
  char *v183;
  uint64_t v184;
  uint64_t vars0;

  v184 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(v9 + 56);
  v11 = vars0;
  *(_QWORD *)(v10 + 40) = vars0;
  *(_DWORD *)(v11 + 36) = *(_DWORD *)(a2 + 112);
  if ((a1 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a1 + 5) <= 0x16u)
  {
    v60 = WTF::fastCompactMalloc((WTF *)0x20);
    v61.i64[0] = 0x1100000002;
    *(_QWORD *)v60 = 0x1100000002;
    *(_QWORD *)(v60 + 8) = "is not an Object.";
    *(_DWORD *)(v60 + 16) = 4;
    v179 = (WTF *)v60;
    Error = JSC::createError(v9, a1, (uint64_t *)&v179, (uint64_t)JSC::invalidParameterInSourceAppender, v62, v63, v64, v65, v61);
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v60, v66, v67, v68, v69, v70, v71, v72);
      WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
    JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, Error, v68, v69, v70, v71, v72);
    return 10;
  }
  v162 = v11;
  v13 = *(_QWORD *)(a2 + 16);
  if (byte_1ECF4C6B7)
  {
    if (v13)
      v109 = (v13 & 1) != 0 ? (WTF::StringImpl *)(v13 & 0xFFFFFFFFFFFFFFFELL) : *(WTF::StringImpl **)(v13 + 8);
    else
      v109 = 0;
    JSC::ICEvent::ICEvent((uint64_t)&v179, (uint64_t **)v10, (const WTF::StringImpl *)0x12, 16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C), v109, a6, a7, a8);
    JSC::ICEvent::log((JSC::ICEvent *)&v179, v110, v111, v112, v113, v114, v115, v116);
    v117 = v181;
    v181 = 0;
    if (v117)
    {
      if (*(_DWORD *)v117 == 2)
      {
        WTF::StringImpl::~StringImpl(v117, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
      }
      else
      {
        *(_DWORD *)v117 -= 2;
      }
    }
  }
  v14 = NAN;
  v165 = 0xFFFFFFFF00000000;
  v167 = 0;
  v168 = 0;
  v166 = a1;
  v169 = 0x10000;
  v170 = 0;
  LOBYTE(v171) = 0;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  if (!v13)
    goto LABEL_117;
  if ((v13 & 1) != 0)
    v15 = v13 & 0xFFFFFFFFFFFFFFFELL;
  else
    v15 = *(_QWORD *)(v13 + 8);
  while (1)
  {
    v16 = (_BYTE *)(a1 + 6);
    v17 = v15 >> 4;
    v161 = (uint64_t *)v9;
    if ((*(_BYTE *)(a1 + 6) & 8) == 0)
    {
      v18 = *(JSC::VM **)(v9 + 56);
      v19 = (unsigned __int8 *)a1;
      while (1)
      {
        v20 = *(_DWORD *)v19 & 0xFFFFFFFE;
        v21 = 16 * v20;
        if ((_DWORD)v17)
        {
          if ((v17 & ~*(_DWORD *)(16 * v20 + 0x20)) == 0)
          {
            JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v21, v18, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
            if (v22)
            {
              v179 = (WTF *)v15;
              v23 = JSC::PropertyTable::get(v22, (uint64_t *)&v179);
              a6 = v23;
              if ((_DWORD)v23 != -1)
                break;
            }
          }
        }
        if ((*v16 & 0x20) != 0
          && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v19, v18, v15, (uint64_t)&v163) & 1) != 0)
        {
          goto LABEL_94;
        }
        v24 = *(_QWORD *)(v21 + 48);
        if (!v24)
          v24 = *((_QWORD *)v19 + 2);
        if ((v24 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v24 + 5) < 0x17u)
        {
          if (!v15)
            goto LABEL_65;
          v45 = *(_DWORD *)(v15 + 16);
          if ((v45 & 0x20) != 0)
            goto LABEL_65;
          v46 = *(_WORD **)(v15 + 8);
          v47 = *(unsigned int *)(v15 + 4);
          if ((v45 & 4) == 0)
          {
            if ((_DWORD)v47)
            {
              v48 = (unsigned __int16)*v46 - 48;
              if (v48 <= 9 && (*v46 != 48 || v47 <= 1))
              {
                v74 = v46 + 1;
                v75 = v47 - 1;
                while (v75)
                {
                  if (v48 > 0x19999999)
                    goto LABEL_65;
                  v76 = *v74 - 48;
                  if (v76 > 9)
                    goto LABEL_65;
                  v9 = 0;
                  v77 = __CFADD__(v76, 10 * v48);
                  v48 = v76 + 10 * (_DWORD)v48;
                  ++v74;
                  --v75;
                  if (v77)
                    goto LABEL_49;
                }
                goto LABEL_236;
              }
            }
            goto LABEL_65;
          }
          if (!(_DWORD)v47)
            goto LABEL_65;
          v48 = *(unsigned __int8 *)v46 - 48;
          if (v48 > 9 || v47 >= 2 && *(_BYTE *)v46 == 48)
            goto LABEL_65;
          v146 = v47 - 1;
          v147 = (unsigned __int8 *)v46 + 1;
          while (v146)
          {
            if (v48 > 0x19999999)
              goto LABEL_65;
            v148 = *v147 - 48;
            if (v148 > 9)
              goto LABEL_65;
            v9 = 0;
            v77 = __CFADD__(v148, 10 * v48);
            v48 = v148 + 10 * (_DWORD)v48;
            --v146;
            ++v147;
            if (v77)
              goto LABEL_49;
          }
LABEL_236:
          if ((_DWORD)v48 == -1)
          {
LABEL_65:
            v9 = 0;
            goto LABEL_49;
          }
          v149 = (JSC::VM *)v161[7];
          v150 = (unsigned __int8 *)a1;
          while (2)
          {
            v151 = 16 * (*(_DWORD *)v150 & 0xFFFFFFFE);
            v152 = (*(uint64_t (**)(unsigned __int8 *, uint64_t *, uint64_t, uint64_t *))(16
                                                                                               * *(unsigned int *)(v151 + 0x4C)
                                                                                               + 0x70))(v150, v161, v48, &v163);
            v153 = v152;
            if (*((_DWORD *)v149 + 20))
            {
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v149, a2, a3, a4, a5, a6, a7, a8);
              if (((hasExceptionsAfterHandlingTraps | v153) & 1) != 0)
              {
LABEL_250:
                v9 = !hasExceptionsAfterHandlingTraps;
                goto LABEL_49;
              }
            }
            else if ((v152 & 1) != 0)
            {
              goto LABEL_94;
            }
            if (BYTE2(v169) == 3)
            {
              if (v170)
                goto LABEL_65;
              v154 = v150[5];
              if (v154 != 61)
                goto LABEL_242;
            }
            else
            {
              v154 = v150[5];
              if (v154 == 61)
              {
                if (BYTE2(v169) == 1)
                  goto LABEL_65;
              }
              else
              {
LABEL_242:
                if ((v154 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v150, a2, a3, a4, a5, a6, a7, a8) <= v48)
                {
                  goto LABEL_65;
                }
              }
            }
            if ((*(_WORD *)(v151 + 12) & 0x800) == 0 || BYTE2(v169) == 3)
            {
              v155 = *(_QWORD *)(16 * (*(_DWORD *)v150 & 0xFFFFFFFE) + 0x30);
              if (!v155)
                v155 = *((_QWORD *)v150 + 2);
            }
            else
            {
              if ((*(_WORD *)(16 * (*(_DWORD *)v150 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
              {
                v155 = (*(uint64_t (**)(unsigned __int8 *, uint64_t *))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)v150 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0xB0))(v150, v161);
              }
              else
              {
                v155 = *(_QWORD *)(16 * (*(_DWORD *)v150 & 0xFFFFFFFE) + 0x30);
                if (!v155)
                  v155 = *((_QWORD *)v150 + 2);
              }
              if (*((_DWORD *)v149 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v149, a2, a3, a4, a5, a6, a7, a8))
                goto LABEL_65;
            }
            if ((v155 & 0xFFFE000000000002) != 0)
              goto LABEL_65;
            v9 = 0;
            v150 = (unsigned __int8 *)v155;
            if (*(unsigned __int8 *)(v155 + 5) <= 0x16u)
              goto LABEL_49;
            continue;
          }
        }
        v16 = (_BYTE *)(v24 + 6);
        v19 = (unsigned __int8 *)v24;
        if ((*(_BYTE *)(v24 + 6) & 8) != 0)
          goto LABEL_19;
      }
      a5 = HIDWORD(v23);
      if ((int)v23 <= 63)
      {
        v38 = (uint64_t)(v19 + 16);
        v39 = v23 << 32;
      }
      else
      {
        v38 = *((_QWORD *)v19 + 1) - 8;
        v39 = 0x3F00000000 - (v23 << 32);
      }
      a4 = *(_QWORD *)(v38 + (v39 >> 29));
      if ((a4 & 0xFFFE000000000002) != 0)
        goto LABEL_47;
      v40 = *(unsigned __int8 *)(a4 + 5);
      if (v40 == 5)
      {
        v78 = (unsigned int *)v19;
        v79 = (uint64_t)v18;
LABEL_93:
        JSC::JSObject::fillGetterPropertySlot(v78, v79, (uint64_t)&v163, a4, a5, a6);
LABEL_94:
        v9 = 1;
        goto LABEL_49;
      }
      if (v40 != 6)
      {
LABEL_47:
        v163 = a4;
        v167 = (uint64_t)v19;
LABEL_48:
        v165 = __PAIR64__(a6, a5);
        v9 = 1;
        LOWORD(v169) = 257;
        goto LABEL_49;
      }
      v88 = *(_DWORD *)(v21 + 16) & 3;
      v89 = *(_QWORD *)(a4 + 16);
      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                               + 0x4C)))
      {
        v91 = *(_QWORD *)(a4 + 24);
        v90 = *(_QWORD *)(a4 + 32);
        v163 = *(_QWORD *)(a4 + 8);
        v164 = v89;
        LODWORD(v165) = HIDWORD(v23);
        v167 = (uint64_t)v19;
        goto LABEL_109;
      }
      v163 = *(_QWORD *)(a4 + 8);
      v164 = v89;
      LODWORD(v165) = HIDWORD(v23);
      v167 = (uint64_t)v19;
LABEL_145:
      v9 = 1;
      BYTE1(v169) = 3;
      if (v88 != 2)
        LOBYTE(v169) = 1;
      goto LABEL_49;
    }
    v24 = a1;
LABEL_19:
    if (!v15)
      goto LABEL_28;
    v25 = *(_DWORD *)(v15 + 16);
    if ((v25 & 0x20) != 0)
      goto LABEL_28;
    v26 = *(_WORD **)(v15 + 8);
    v27 = *(unsigned int *)(v15 + 4);
    if ((v25 & 4) == 0)
    {
      if ((_DWORD)v27)
      {
        v28 = (unsigned __int16)*v26 - 48;
        if (v28 <= 9 && (*v26 != 48 || v27 <= 1))
        {
          v106 = v26 + 1;
          v107 = v27 - 1;
          while (v107)
          {
            if (v28 > 0x19999999)
              goto LABEL_24;
            v108 = *v106 - 48;
            if (v108 > 9)
              goto LABEL_24;
            v29 = 0;
            LOBYTE(v27) = 0;
            v30 = 0;
            v77 = __CFADD__(v108, 10 * v28);
            v28 = v108 + 10 * v28;
            ++v106;
            --v107;
            if (v77)
              goto LABEL_26;
          }
          v30 = v28 & 0xFFFFFF00;
          v29 = 0x100000000;
          if (v28 == -1)
          {
            v29 = 0;
            LOBYTE(v27) = 0;
          }
          else
          {
            LOBYTE(v27) = v28;
          }
          if (v28 == -1)
            v30 = 0;
          goto LABEL_26;
        }
LABEL_24:
        v29 = 0;
        LOBYTE(v27) = 0;
      }
      else
      {
        v29 = 0;
      }
      v30 = 0;
LABEL_26:
      v31 = v27;
      goto LABEL_27;
    }
    if ((_DWORD)v27)
    {
      v156 = *(unsigned __int8 *)v26 - 48;
      if (v156 <= 9 && (v27 < 2 || *(_BYTE *)v26 != 48))
      {
        v157 = v27 - 1;
        v158 = (unsigned __int8 *)v26 + 1;
        while (v157)
        {
          if (v156 > 0x19999999)
            goto LABEL_272;
          v159 = *v158 - 48;
          if (v159 > 9)
            goto LABEL_272;
          v31 = 0;
          LOBYTE(v27) = 0;
          v29 = 0;
          v77 = __CFADD__(v159, 10 * v156);
          v156 = v159 + 10 * v156;
          --v157;
          ++v158;
          if (v77)
            goto LABEL_274;
        }
        if (v156 == -1)
          v31 = 0;
        else
          v31 = v156 & 0xFFFFFF00;
        if (v156 == -1)
          LOBYTE(v27) = 0;
        else
          LOBYTE(v27) = v156;
        if (v156 == -1)
          v29 = 0;
        else
          v29 = 0x100000000;
        goto LABEL_274;
      }
LABEL_272:
      v31 = 0;
      LOBYTE(v27) = 0;
    }
    else
    {
      v31 = 0;
    }
    v29 = 0;
LABEL_274:
    v30 = v27;
LABEL_27:
    if ((v29 & 0x100000000) != 0)
    {
      v118 = v30 | v31;
      v119 = (JSC::VM *)v161[7];
      v120 = (unsigned __int8 *)a1;
      while (1)
      {
        v121 = 16 * (*(_DWORD *)v120 & 0xFFFFFFFE);
        v122 = (*(uint64_t (**)(unsigned __int8 *, uint64_t *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v121 + 0x4C) + 0x70))(v120, v161, v118, &v163);
        v123 = v122;
        if (*((_DWORD *)v119 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v119, a2, a3, a4, a5, a6, a7, a8);
          if (((hasExceptionsAfterHandlingTraps | v123) & 1) != 0)
            goto LABEL_250;
        }
        else if ((v122 & 1) != 0)
        {
          goto LABEL_94;
        }
        if (BYTE2(v169) == 3)
        {
          if (v170)
            goto LABEL_65;
          v124 = v120[5];
          if (v124 == 61)
            goto LABEL_167;
        }
        else
        {
          v124 = v120[5];
          if (v124 == 61)
          {
            if (BYTE2(v169) == 1)
              goto LABEL_65;
            goto LABEL_167;
          }
        }
        if ((v124 - 39) <= 0xA
          && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v120, a2, a3, a4, a5, a6, a7, a8) <= v118)
        {
          goto LABEL_65;
        }
LABEL_167:
        if ((*(_WORD *)(v121 + 12) & 0x800) == 0 || BYTE2(v169) == 3)
        {
          v125 = *(_QWORD *)(16 * (*(_DWORD *)v120 & 0xFFFFFFFE) + 0x30);
          if (!v125)
            v125 = *((_QWORD *)v120 + 2);
        }
        else
        {
          if ((*(_WORD *)(16 * (*(_DWORD *)v120 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
          {
            v125 = (*(uint64_t (**)(unsigned __int8 *, uint64_t *))(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)v120 & 0xFFFFFFFE)
                                                                                             + 0x4C)
                                                                           + 0xB0))(v120, v161);
          }
          else
          {
            v125 = *(_QWORD *)(16 * (*(_DWORD *)v120 & 0xFFFFFFFE) + 0x30);
            if (!v125)
              v125 = *((_QWORD *)v120 + 2);
          }
          if (*((_DWORD *)v119 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v119, a2, a3, a4, a5, a6, a7, a8))
            goto LABEL_65;
        }
        if ((v125 & 0xFFFE000000000002) != 0)
          goto LABEL_65;
        v9 = 0;
        v120 = (unsigned __int8 *)v125;
        if (*(unsigned __int8 *)(v125 + 5) <= 0x16u)
          goto LABEL_49;
      }
    }
LABEL_28:
    v32 = (JSC::VM *)v161[7];
    while (1)
    {
      v33 = 16 * (*(_DWORD *)v24 & 0xFFFFFFFE);
      if ((*(_BYTE *)(v24 + 6) & 8) == 0)
        break;
      v136 = (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t, uint64_t *))(16
                                                                                        * *(unsigned int *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x4C)
                                                                                        + 0x68))(v24, v161, v15, &v163);
      v137 = v136;
      if (*((_DWORD *)v32 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v32, a2, a3, a4, a5, a6, a7, a8);
        if (((hasExceptionsAfterHandlingTraps | v137) & 1) != 0)
          goto LABEL_250;
      }
      else if ((v136 & 1) != 0)
      {
        goto LABEL_94;
      }
      if (BYTE2(v169) == 3)
      {
        if (v170)
          goto LABEL_65;
        v138 = *(unsigned __int8 *)(v24 + 5);
        if (v138 != 61)
        {
LABEL_195:
          if (!v15)
            goto LABEL_35;
          if ((v138 - 50) < 0xFFFFFFF5)
            goto LABEL_35;
          v139 = *(_DWORD *)(v15 + 16);
          if ((v139 & 0x20) != 0)
            goto LABEL_35;
          v140 = *(unsigned int *)(v15 + 4);
          if (!(_DWORD)v140)
            goto LABEL_35;
          v141 = *(unsigned __int8 **)(v15 + 8);
          if ((v139 & 4) == 0)
          {
            v142 = *(unsigned __int16 *)v141;
            if ((_DWORD)v140 == 1)
              goto LABEL_201;
            if (v142 == 45)
            {
              v142 = *((unsigned __int16 *)v141 + 1);
              goto LABEL_206;
            }
            if ((v142 - 48) >= 0xA && ((_DWORD)v140 != 8 || v142 != 73))
            {
LABEL_222:
              if ((_DWORD)v140 != 3 || v142 != 78)
                goto LABEL_35;
            }
LABEL_212:
            v160 = v160 & 0xFFFFFF0000000000 | v140 | ((unint64_t)((v139 >> 2) & 1) << 32);
            JSC::jsToNumber(v141, v160);
            WTF::numberToString(&v179, v144);
            if (WTF::equal(v15, (unint64_t)&v179, v145))
              goto LABEL_65;
            goto LABEL_35;
          }
          v142 = *v141;
          if ((_DWORD)v140 == 1)
          {
LABEL_201:
            if ((v142 - 48) < 0xA)
              goto LABEL_65;
            goto LABEL_35;
          }
          if (v142 == 45)
          {
            v142 = v141[1];
LABEL_206:
            if ((v142 - 48) < 0xA)
            {
              if ((_DWORD)v140 == 2)
                goto LABEL_65;
              goto LABEL_212;
            }
            if ((_DWORD)v140 != 9)
              goto LABEL_35;
          }
          else
          {
            if ((v142 - 48) < 0xA)
              goto LABEL_212;
            if ((_DWORD)v140 != 8)
              goto LABEL_222;
          }
          if (v142 != 73)
            goto LABEL_35;
          goto LABEL_212;
        }
      }
      else
      {
        v138 = *(unsigned __int8 *)(v24 + 5);
        if (v138 != 61)
          goto LABEL_195;
        if (BYTE2(v169) == 1)
          goto LABEL_65;
      }
LABEL_35:
      if ((*(_WORD *)(v33 + 12) & 0x800) != 0)
      {
        v36 = *(_DWORD *)v24;
        if (BYTE2(v169) != 3)
        {
          v135 = 16 * (v36 & 0xFFFFFFFE);
          if ((*(_WORD *)(v135 + 12) & 0x800) != 0)
          {
            v37 = (*(uint64_t (**)(uint64_t, uint64_t *))(16 * *(unsigned int *)(v135 + 76) + 0xB0))(v24, v161);
          }
          else
          {
            v37 = *(_QWORD *)(v135 + 48);
            if (!v37)
              v37 = *(_QWORD *)(v24 + 16);
          }
          if (*((_DWORD *)v32 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v32, a2, a3, a4, a5, a6, a7, a8))
            goto LABEL_65;
          goto LABEL_39;
        }
      }
      else
      {
        v36 = *(_DWORD *)v24;
      }
      v37 = *(_QWORD *)(16 * (v36 & 0xFFFFFFFE) + 0x30);
      if (!v37)
        v37 = *(_QWORD *)(v24 + 16);
LABEL_39:
      if ((v37 & 0xFFFE000000000002) != 0)
        goto LABEL_65;
      v9 = 0;
      v24 = v37;
      if (*(unsigned __int8 *)(v37 + 5) <= 0x16u)
        goto LABEL_49;
    }
    if (!(_DWORD)v17
      || (v17 & ~*(_DWORD *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x20)) != 0
      || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE)), v32, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v34)|| (v179 = (WTF *)v15, v35 = JSC::PropertyTable::get(v34, (uint64_t *)&v179), a6 = v35, (_DWORD)v35 == -1))
    {
      if ((*(_BYTE *)(v24 + 6) & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v24, v32, v15, (uint64_t)&v163) & 1) != 0)
      {
        goto LABEL_94;
      }
      goto LABEL_35;
    }
    a5 = HIDWORD(v35);
    if ((int)v35 <= 63)
    {
      v103 = v24 + 16;
      v104 = v35 << 32;
    }
    else
    {
      v103 = *(_QWORD *)(v24 + 8) - 8;
      v104 = 0x3F00000000 - (v35 << 32);
    }
    a4 = *(_QWORD *)(v103 + (v104 >> 29));
    if ((a4 & 0xFFFE000000000002) != 0)
    {
LABEL_131:
      v163 = a4;
      v167 = v24;
      goto LABEL_48;
    }
    v105 = *(unsigned __int8 *)(a4 + 5);
    if (v105 == 5)
    {
      v78 = (unsigned int *)v24;
      v79 = (uint64_t)v32;
      goto LABEL_93;
    }
    if (v105 != 6)
      goto LABEL_131;
    v88 = *(_DWORD *)(v33 + 16) & 3;
    v134 = *(_QWORD *)(a4 + 16);
    if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
    {
      v163 = *(_QWORD *)(a4 + 8);
      v164 = v134;
      LODWORD(v165) = HIDWORD(v35);
      v167 = v24;
      goto LABEL_145;
    }
    v91 = *(_QWORD *)(a4 + 24);
    v90 = *(_QWORD *)(a4 + 32);
    v163 = *(_QWORD *)(a4 + 8);
    v164 = v134;
    LODWORD(v165) = HIDWORD(v35);
    v167 = v24;
LABEL_109:
    BYTE1(v169) = 3;
    v9 = 1;
    if (v88 != 2)
      LOBYTE(v169) = 1;
    HIBYTE(v169) = 1;
    v173 = v91;
    v174 = v90;
LABEL_49:
    if (*(_DWORD *)(v10 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, a2, a3, a4, a5, a6, a7, a8))
      break;
    v41 = *(_DWORD *)a1 & 0xFFFFFFFE;
    if (!v41)
    {
      *(_WORD *)(a2 + 129) |= 0x10u;
      goto LABEL_53;
    }
    v42 = *(_QWORD *)(v162 + 16);
    v177 = v13;
    *(_WORD *)(a2 + 129) |= 4u;
    if (*(_BYTE *)(a2 + 124))
    {
      --*(_BYTE *)(a2 + 124);
      goto LABEL_53;
    }
    v49 = *(unsigned __int8 *)(a2 + 125);
    if (v49 != 255)
      *(_BYTE *)(a2 + 125) = ++v49;
    if (xmmword_1ECF4C260 < v49)
    {
      *(_BYTE *)(a2 + 125) = 0;
      v99 = *(unsigned __int8 *)(a2 + 126);
      v100 = BYTE4(xmmword_1ECF4C260) << v99;
      v101 = v100;
      if (v100 == 255)
        LOBYTE(v100) = -2;
      if (v101 >> v99 == BYTE4(xmmword_1ECF4C260))
        v102 = v100;
      else
        v102 = -2;
      *(_BYTE *)(a2 + 124) = v102;
      if (v99 != 255)
        *(_BYTE *)(a2 + 126) = v99 + 1;
      *(_BYTE *)(a2 + 127) = 0;
      goto LABEL_100;
    }
    if (!*(_BYTE *)(a2 + 127))
      goto LABEL_100;
    --*(_BYTE *)(a2 + 127);
    v176 = 0;
    v175 = v41;
    v50 = (unsigned __int8 *)(a2 + 128);
    if (__ldaxr((unsigned __int8 *)(a2 + 128)))
    {
      __clrex();
LABEL_73:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 128);
      goto LABEL_74;
    }
    if (__stxr(1u, v50))
      goto LABEL_73;
LABEL_74:
    v52 = *(_DWORD *)(a2 + 96);
    if (!v52)
    {
      if (*(_QWORD *)(a2 + 16))
      {
        *(_QWORD *)(a2 + 80) = 0;
        *(_QWORD *)(a2 + 88) = 0;
        v52 = 1;
        *(_DWORD *)(a2 + 96) = 1;
        v181 = (WTF::StringImpl *)&v175;
        v182 = &v177;
        v183 = &v176;
        v179 = (WTF *)&v175;
        v180 = &v176;
LABEL_77:
        v178 = &v179;
        off_1E3596010[v52](&v178, a2 + 80);
        v59 = __ldxr(v50);
        if (v59 == 1)
        {
          if (!__stlxr(0, v50))
          {
LABEL_97:
            if (!v176)
              goto LABEL_53;
            if (v42)
            {
              if (*(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(v42 + 7))
              {
                JSC::Heap::writeBarrierSlowPath(v10 + 192, v42);
                if (!v176)
                  goto LABEL_53;
              }
            }
LABEL_100:
            JSC::repatchInBy(v161, v42, (const WTF::StringImpl *)a1, v13, v9, (uint64_t)&v163, a2, 0, v14);
LABEL_53:
            if ((_DWORD)v9)
              result = 7;
            else
              result = 6;
            goto LABEL_56;
          }
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a2 + 128), 0, v53, v54, v55, v56, v57, v58);
        goto LABEL_97;
      }
      v179 = 0;
      v180 = 0;
      std::variant<std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,2ul,0>(a2 + 80, &v179, a3, a4, a5, a6, a7, a8);
      if (v179)
        WTF::fastFree((unint64_t)v179, v92, v93, v94, v95, v96, v97, v98);
      v52 = *(_DWORD *)(a2 + 96);
    }
    v181 = (WTF::StringImpl *)&v175;
    v182 = &v177;
    v183 = &v176;
    v179 = (WTF *)&v175;
    v180 = &v176;
    if (v52 != -1)
      goto LABEL_77;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_117:
    v15 = 0;
  }
  result = 0;
LABEL_56:
  if (v172)
  {
    v44 = *(_DWORD *)(v171 + 4);
    if (!v44)
    {
      __break(0xC471u);
      JUMPOUT(0x19877AF60);
    }
    *(_DWORD *)(v171 + 4) = v44 - 1;
  }
  return result;
}

uint64_t operationInByIdMegamorphic(unint64_t a1, JSC::StructureStubInfo *this, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  JSC::Structure *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  char **v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  int OwnStaticPropertySlot;
  unsigned int v33;
  int v34;
  int v35;
  unint64_t v36;
  uint64_t v38;
  unint64_t v39;
  JSC::Structure *v40;
  char **v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int16 v60;
  unsigned __int16 *v61;
  _QWORD *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  __int16 v73;
  JSC::JSGlobalObject *v74;
  uint64_t v75;
  int8x16_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::AtomStringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t Error;
  unint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  JSC::CodeBlock *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  WTF::AtomStringImpl *v127;
  uint64_t v128;
  char **v129;
  unint64_t v130;
  unint64_t v131;
  JSC::VM *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unsigned int v136;
  uint64_t v137;
  int v138;
  int v139;
  unsigned int v140;
  char v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  int v145;
  int v146;
  unsigned int v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  unsigned int v153;
  int v154;
  int v155;
  unsigned int v156;
  char v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  unsigned int v164;
  char v165;
  uint64_t v166;
  int v167;
  unsigned int v168;
  uint64_t v169;
  unsigned __int8 *v170;
  int v171;
  double v172;
  const unsigned __int8 *v173;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unint64_t v175;
  int v176;
  JSC::VM *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  int v184;
  char v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190[18];
  JSC::Structure *vars0;

  v190[16] = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)this + 7);
  v11 = vars0;
  v177 = *(JSC::VM **)(v10 + 56);
  *((_QWORD *)v177 + 5) = vars0;
  *((_DWORD *)v11 + 9) = *((_DWORD *)this + 28);
  v12 = *((_QWORD *)this + 2);
  if (v12)
  {
    if ((v12 & 1) != 0)
      v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    else
      v13 = *(_QWORD *)(v12 + 8);
  }
  else
  {
    v13 = 0;
  }
  v180 = 0xFFFFFFFF00000000;
  v182 = 0;
  v183 = 0;
  v181 = a1;
  v184 = 0x10000;
  v185 = 0;
  LOBYTE(v186) = 0;
  v187 = 0;
  v188 = 0;
  v189 = 0;
  if ((a1 & 0xFFFE000000000002) != 0 || (v14 = *(unsigned __int8 *)(a1 + 5), v14 <= 0x16))
  {
    v73 = *(_WORD *)((char *)this + 129);
    *(_WORD *)((char *)this + 129) = v73 | 4;
    if (*((_BYTE *)this + 124))
    {
      v74 = (JSC::JSGlobalObject *)v10;
      --*((_BYTE *)this + 124);
    }
    else
    {
      v100 = *((unsigned __int8 *)this + 125);
      if (v100 != 255)
        *((_BYTE *)this + 125) = ++v100;
      if (xmmword_1ECF4C260 < v100)
      {
        *((_BYTE *)this + 125) = 0;
        v138 = *((unsigned __int8 *)this + 126);
        v139 = BYTE4(xmmword_1ECF4C260) << v138;
        v140 = v139;
        if (v139 == 255)
          LOBYTE(v139) = -2;
        if (v140 >> v138 == BYTE4(xmmword_1ECF4C260))
          v141 = v139;
        else
          v141 = -2;
        *((_BYTE *)this + 124) = v141;
        if (v138 != 255)
          *((_BYTE *)this + 126) = v138 + 1;
        v74 = (JSC::JSGlobalObject *)v10;
        *((_BYTE *)this + 127) = 0;
      }
      else
      {
        v74 = (JSC::JSGlobalObject *)v10;
        if (*((_BYTE *)this + 127))
          --*((_BYTE *)this + 127);
      }
      v101 = (JSC::CodeBlock *)*((_QWORD *)v11 + 2);
      if ((v73 & 0x200) != 0)
        *((_QWORD *)this + 6) = &operationInByIdOptimize;
      else
        JSC::ftlThunkAwareRepatchCall(*((_QWORD *)v11 + 2), *((_QWORD *)this + 6), (int *)&operationInByIdOptimize, a4, a5, a6, a7, a8);
      JSC::StructureStubInfo::resetStubAsJumpInAccess(this, v101, v13, a4, a5, a6, a7, a8);
      if ((*(_WORD *)((_BYTE *)this + 129) & 0x200) != 0)
        *((_QWORD *)this + 6) = operationInByIdGaveUp;
      else
        JSC::ftlThunkAwareRepatchCall((uint64_t)v101, *((_QWORD *)this + 6), (int *)operationInByIdGaveUp, v102, v103, v104, v105, v106);
    }
    v75 = WTF::fastCompactMalloc((WTF *)0x20);
    v76.i64[0] = 0x1100000002;
    *(_QWORD *)v75 = 0x1100000002;
    *(_QWORD *)(v75 + 8) = "is not an Object.";
    *(_DWORD *)(v75 + 16) = 4;
    v190[0] = v75;
    Error = JSC::createError((unint64_t)v74, a1, v190, (uint64_t)JSC::invalidParameterInSourceAppender, v77, v78, v79, v80, v76);
    if (*(_DWORD *)v75 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v75, v81, v82, v83, v84, v85, v86, v87);
      WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
    }
    else
    {
      *(_DWORD *)v75 -= 2;
    }
    JSC::VM::throwException(v177, v74, Error, v83, v84, v85, v86, v87);
    v65 = 10;
    goto LABEL_72;
  }
  v15 = v13 >> 4;
  v16 = &JSC::DOMAttributeGetterSetter::s_info;
  v17 = 0x3F00000000;
  v18 = a1;
  v19 = 1;
  do
  {
    if ((*(_BYTE *)(v18 + 6) & 8) != 0 && v14 != 36 && v14 != 26 && v18 != *(_QWORD *)(v10 + 672))
    {
      v129 = v16;
      v130 = v13;
      v131 = v10;
      if (this)
      {
        *(_WORD *)((char *)this + 129) |= 4u;
        if (*((_BYTE *)this + 124))
        {
          --*((_BYTE *)this + 124);
        }
        else
        {
          v153 = *((unsigned __int8 *)this + 125);
          if (v153 != 255)
            *((_BYTE *)this + 125) = ++v153;
          if (xmmword_1ECF4C260 < v153)
          {
            *((_BYTE *)this + 125) = 0;
            v162 = *((unsigned __int8 *)this + 126);
            v163 = BYTE4(xmmword_1ECF4C260) << v162;
            v164 = v163;
            if (v163 == 255)
              LOBYTE(v163) = -2;
            if (v164 >> v162 == BYTE4(xmmword_1ECF4C260))
              v165 = v163;
            else
              v165 = -2;
            *((_BYTE *)this + 124) = v165;
            if (v162 != 255)
              *((_BYTE *)this + 126) = v162 + 1;
            *((_BYTE *)this + 127) = 0;
          }
          else if (*((_BYTE *)this + 127))
          {
            --*((_BYTE *)this + 127);
          }
          JSC::repatchInBySlowPathCall(*((JSC::CodeBlock **)v11 + 2), (uint64_t)this, 0, a4, a5, a6, a7, a8);
        }
      }
      v132 = *(JSC::VM **)(v10 + 56);
      v65 = 6;
      while (1)
      {
        v133 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v18 + 6) & 8) != 0)
        {
          v176 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, uint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) + 0x68))(v18, v131, v130, &v178);
          if (*((_DWORD *)v132 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v132, v17, v13, a4, a5, a6, a7, a8);
            if (((hasExceptionsAfterHandlingTraps | v176) & 1) != 0)
            {
              if (hasExceptionsAfterHandlingTraps)
                v65 = 6;
              else
                v65 = 7;
              goto LABEL_72;
            }
          }
          else if ((v176 & 1) != 0)
          {
            goto LABEL_115;
          }
          if (BYTE2(v184) == 3)
          {
            if (v185)
              goto LABEL_71;
            v167 = *(unsigned __int8 *)(v18 + 5);
            if (v167 != 61)
            {
LABEL_228:
              if ((v167 - 50) < 0xFFFFFFF5)
                goto LABEL_132;
              if (!v130)
                goto LABEL_132;
              v168 = *(_DWORD *)(v130 + 16);
              if ((v168 & 0x20) != 0)
                goto LABEL_132;
              v169 = *(unsigned int *)(v130 + 4);
              if (!(_DWORD)v169)
                goto LABEL_132;
              v170 = *(unsigned __int8 **)(v130 + 8);
              if ((v168 & 4) == 0)
              {
                v171 = *(unsigned __int16 *)v170;
                if ((_DWORD)v169 == 1)
                  goto LABEL_234;
                if (v171 == 45)
                {
                  v171 = *((unsigned __int16 *)v170 + 1);
                  goto LABEL_240;
                }
                if ((v171 - 48) >= 0xA && ((_DWORD)v169 != 8 || v171 != 73))
                {
LABEL_251:
                  if ((_DWORD)v169 != 3 || v171 != 78)
                    goto LABEL_132;
                }
LABEL_244:
                v10 = v10 & 0xFFFFFF0000000000 | v169 | ((unint64_t)((v168 >> 2) & 1) << 32);
                JSC::jsToNumber(v170, v10);
                WTF::numberToString(v190, v172);
                if (WTF::equal(v130, (unint64_t)v190, v173))
                  goto LABEL_71;
                goto LABEL_132;
              }
              v171 = *v170;
              if ((_DWORD)v169 == 1)
              {
LABEL_234:
                if ((v171 - 48) < 0xA)
                  goto LABEL_71;
                goto LABEL_132;
              }
              if (v171 == 45)
              {
                v171 = v170[1];
LABEL_240:
                if ((v171 - 48) < 0xA)
                {
                  if ((_DWORD)v169 == 2)
                    goto LABEL_71;
                  goto LABEL_244;
                }
                if ((_DWORD)v169 != 9)
                  goto LABEL_132;
              }
              else
              {
                if ((v171 - 48) < 0xA)
                  goto LABEL_244;
                if ((_DWORD)v169 != 8)
                  goto LABEL_251;
              }
              if (v171 != 73)
                goto LABEL_132;
              goto LABEL_244;
            }
          }
          else
          {
            v167 = *(unsigned __int8 *)(v18 + 5);
            if (v167 != 61)
              goto LABEL_228;
            if (BYTE2(v184) == 1)
              goto LABEL_71;
          }
        }
        else
        {
          if ((_DWORD)v15)
          {
            if ((v15 & ~*(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x20)) == 0)
            {
              JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE)), v132, v13, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
              if (v134)
              {
                v190[0] = v130;
                v135 = JSC::PropertyTable::get(v134, v190);
                a6 = v135;
                if ((_DWORD)v135 != -1)
                {
                  if ((int)v135 <= 63)
                  {
                    v149 = v18 + 16;
                    v150 = v135 << 32;
                  }
                  else
                  {
                    v149 = *(_QWORD *)(v18 + 8) - 8;
                    v150 = 0x3F00000000 - (v135 << 32);
                  }
                  v151 = *(_QWORD *)(v149 + (v150 >> 29));
                  if ((v151 & 0xFFFE000000000002) != 0)
                    goto LABEL_186;
                  v152 = *(unsigned __int8 *)(v151 + 5);
                  if (v152 == 5)
                  {
                    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v18, (uint64_t)v132, (uint64_t)&v178, v151, SHIDWORD(v135), v135);
                  }
                  else
                  {
                    if (v152 != 6)
                    {
LABEL_186:
                      v178 = v151;
                      v182 = v18;
                      v180 = __PAIR64__(v135, HIDWORD(v135));
                      v65 = 7;
                      LOWORD(v184) = 257;
                      goto LABEL_72;
                    }
                    v158 = *(_DWORD *)(v133 + 16) & 3;
                    v159 = *(_QWORD *)(v151 + 16);
                    if (v129 == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v151 & 0xFFFFFFFE) + 0x4C)))
                    {
                      v161 = *(_QWORD *)(v151 + 24);
                      v160 = *(_QWORD *)(v151 + 32);
                      v178 = *(_QWORD *)(v151 + 8);
                      v179 = v159;
                      LODWORD(v180) = HIDWORD(v135);
                      v182 = v18;
                      BYTE1(v184) = 3;
                      if (v158 != 2)
                        LOBYTE(v184) = 1;
                      HIBYTE(v184) = 1;
                      v188 = v161;
                      v189 = v160;
                    }
                    else
                    {
                      v178 = *(_QWORD *)(v151 + 8);
                      v179 = v159;
                      LODWORD(v180) = HIDWORD(v135);
                      v182 = v18;
                      BYTE1(v184) = 3;
                      if (v158 != 2)
                        LOBYTE(v184) = 1;
                    }
                  }
                  goto LABEL_115;
                }
              }
            }
          }
          if ((*(_BYTE *)(v18 + 6) & 0x20) != 0
            && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v18, v132, v130, (uint64_t)&v178) & 1) != 0)
          {
            goto LABEL_115;
          }
        }
LABEL_132:
        if ((*(_WORD *)(v133 + 12) & 0x800) == 0)
        {
          v136 = *(_DWORD *)v18;
LABEL_134:
          v137 = *(_QWORD *)(16 * (v136 & 0xFFFFFFFE) + 0x30);
          if (!v137)
            v137 = *(_QWORD *)(v18 + 16);
          goto LABEL_136;
        }
        v136 = *(_DWORD *)v18;
        if (BYTE2(v184) == 3)
          goto LABEL_134;
        v166 = 16 * (v136 & 0xFFFFFFFE);
        if ((*(_WORD *)(v166 + 12) & 0x800) != 0)
        {
          v137 = (*(uint64_t (**)(unint64_t, unint64_t))(16 * *(unsigned int *)(v166 + 76)
                                                                               + 0xB0))(v18, v131);
        }
        else
        {
          v137 = *(_QWORD *)(v166 + 48);
          if (!v137)
            v137 = *(_QWORD *)(v18 + 16);
        }
        if (*((_DWORD *)v132 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v132, v17, v13, a4, a5, a6, a7, a8))
          goto LABEL_71;
LABEL_136:
        if ((v137 & 0xFFFE000000000002) == 0)
        {
          v18 = v137;
          if (*(unsigned __int8 *)(v137 + 5) > 0x16u)
            continue;
        }
        goto LABEL_72;
      }
    }
    if (!(_DWORD)v15)
      goto LABEL_19;
    v20 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
    if ((v15 & ~*(_DWORD *)(v20 + 0x20)) != 0)
      goto LABEL_19;
    v21 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x58);
    if (!v21)
    {
      v38 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x40);
      if (!v38 || *(_BYTE *)(v38 + 5) != 1 && *(_DWORD *)(v38 + 80) < 2u)
        goto LABEL_19;
      v39 = v10;
      v40 = v11;
      v41 = v16;
      v42 = v13;
      JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE)), v177, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
      v17 = 0x3F00000000;
      v13 = v42;
      v16 = v41;
      v11 = v40;
      v10 = v39;
      if (!v21)
        goto LABEL_19;
    }
    if (!*(_DWORD *)(v21 + 24))
    {
LABEL_19:
      if ((*(_BYTE *)(v18 + 6) & 0x20) != 0)
      {
        v98 = v13;
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v18, v177, v13, (uint64_t)&v178);
        v17 = 0x3F00000000;
        v13 = v98;
      }
      else
      {
        OwnStaticPropertySlot = 0;
      }
      goto LABEL_21;
    }
    v22 = *(_QWORD *)(v21 + 16);
    v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
    v24 = *(unsigned int *)(v21 + 8);
    v25 = *(_DWORD *)(v13 + 16);
    if ((v22 & 1) != 0)
    {
      if ((v25 & 0x20) != 0)
        v25 = *(_DWORD *)(v13 + 32);
      v26 = *(_DWORD *)(v21 + 12);
      v27 = (v25 >> 8) & *(_QWORD *)&v26;
      v28 = *(unsigned __int8 *)(v23 + v27);
      if (!*(_BYTE *)(v23 + v27))
        goto LABEL_19;
      v29 = v23 + v24;
      v30 = 1;
      while (1)
      {
        v31 = *(_QWORD *)(v29 + 8 * (v28 - 1));
        if (v13 == (v31 & 0xFFFFFFFFFFFFLL))
          break;
        v27 = ((_DWORD)v27 + v30) & v26;
        v28 = *(unsigned __int8 *)(v23 + v27);
        ++v30;
        if (!*(_BYTE *)(v23 + v27))
          goto LABEL_19;
      }
      a6 = (v31 >> 16) & 0xFF00000000 | HIBYTE(v31);
    }
    else
    {
      if ((v25 & 0x20) != 0)
        v25 = *(_DWORD *)(v13 + 32);
      v46 = *(_DWORD *)(v21 + 12);
      v47 = v46 & (v25 >> 8);
      v48 = *(_DWORD *)(v23 + 4 * v47);
      if (!v48)
        goto LABEL_19;
      v49 = v23 + 4 * v24;
      v50 = 1;
      while (1)
      {
        v51 = (v48 - 1);
        if (v13 == *(_QWORD *)(v49 + 16 * v51))
          break;
        v47 = (v47 + v50) & v46;
        v48 = *(_DWORD *)(v23 + 4 * v47);
        ++v50;
        if (!v48)
          goto LABEL_19;
      }
      a6 = *(unsigned int *)(v49 + 16 * v51 + 8) | ((unint64_t)*(unsigned __int8 *)(v49 + 16 * v51 + 12) << 32);
    }
    if ((_DWORD)a6 == -1)
      goto LABEL_19;
    if ((int)a6 <= 63)
    {
      v43 = v18 + 16;
      v44 = a6 << 32;
    }
    else
    {
      v43 = *(_QWORD *)(v18 + 8) - 8;
      v44 = 0x3F00000000 - (a6 << 32);
    }
    a5 = HIDWORD(a6);
    a4 = *(_QWORD *)(v43 + (v44 >> 29));
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_49;
    v45 = *(unsigned __int8 *)(a4 + 5);
    if (v45 == 5)
    {
      v99 = v13;
      JSC::JSObject::fillGetterPropertySlot((unsigned int *)v18, (uint64_t)v177, (uint64_t)&v178, a4, SHIDWORD(a6), a6);
      v17 = 0x3F00000000;
      v13 = v99;
      OwnStaticPropertySlot = 1;
      goto LABEL_21;
    }
    if (v45 == 6)
    {
      v123 = *(_DWORD *)(v20 + 16) & 3;
      v124 = *(_QWORD *)(a4 + 16);
      if (v16 == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
      {
        v126 = *(_QWORD *)(a4 + 24);
        v125 = *(_QWORD *)(a4 + 32);
        v178 = *(_QWORD *)(a4 + 8);
        v179 = v124;
        LODWORD(v180) = HIDWORD(a6);
        v182 = v18;
        BYTE1(v184) = 3;
        OwnStaticPropertySlot = 1;
        if (v123 != 2)
          LOBYTE(v184) = 1;
        HIBYTE(v184) = 1;
        v188 = v126;
        v189 = v125;
      }
      else
      {
        v178 = *(_QWORD *)(a4 + 8);
        v179 = v124;
        LODWORD(v180) = HIDWORD(a6);
        v182 = v18;
        OwnStaticPropertySlot = 1;
        BYTE1(v184) = 3;
        if (v123 != 2)
          LOBYTE(v184) = 1;
      }
    }
    else
    {
LABEL_49:
      v178 = a4;
      v182 = v18;
      v180 = __PAIR64__(a6, HIDWORD(a6));
      OwnStaticPropertySlot = 1;
      LOWORD(v184) = 257;
    }
LABEL_21:
    if ((*(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x10) & 3) == 2
      || (v33 = *(unsigned __int16 *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0xC), (v33 & 8) != 0))
    {
      v34 = 0;
    }
    else if ((v33 & 0x10) != 0)
    {
      v34 = (v33 >> 5) & 1;
    }
    else
    {
      v34 = 1;
    }
    v35 = v19 & v34;
    if (OwnStaticPropertySlot)
    {
      if (v35 && (!BYTE1(v184) || v184 == 1))
      {
        v127 = (WTF::AtomStringImpl *)*(unsigned int *)a1;
        if (v182 == a1 || (v143 = *(_DWORD *)((16 * (_QWORD)v127) | 0x10), (v143 & 3) == 0))
        {
          if ((*((_QWORD *)v177 + 11635) & 1) != 0)
            v128 = 0;
          else
            v128 = *((_QWORD *)v177 + 11635);
          JSC::MegamorphicCache::initAsHasHit(v128, v127, (WTF::StringImpl *)v13, a4, a5, a6, a7, a8);
          goto LABEL_115;
        }
        if ((v143 & 0x800000) == 0)
          goto LABEL_115;
      }
      if (this)
      {
        *(_WORD *)((char *)this + 129) |= 4u;
        if (*((_BYTE *)this + 124))
        {
          --*((_BYTE *)this + 124);
        }
        else
        {
          v144 = *((unsigned __int8 *)this + 125);
          if (v144 != 255)
            *((_BYTE *)this + 125) = ++v144;
          if (xmmword_1ECF4C260 < v144)
          {
            *((_BYTE *)this + 125) = 0;
            v154 = *((unsigned __int8 *)this + 126);
            v155 = BYTE4(xmmword_1ECF4C260) << v154;
            v156 = v155;
            if (v155 == 255)
              LOBYTE(v155) = -2;
            if (v156 >> v154 == BYTE4(xmmword_1ECF4C260))
              v157 = v155;
            else
              v157 = -2;
            *((_BYTE *)this + 124) = v157;
            if (v154 != 255)
              *((_BYTE *)this + 126) = v154 + 1;
            *((_BYTE *)this + 127) = 0;
          }
          else if (*((_BYTE *)this + 127))
          {
            --*((_BYTE *)this + 127);
          }
          JSC::repatchInBySlowPathCall(*((JSC::CodeBlock **)v11 + 2), (uint64_t)this, 0, a4, a5, a6, a7, a8);
        }
      }
LABEL_115:
      v65 = 7;
      goto LABEL_72;
    }
    v36 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x30);
    if ((*(_WORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0xC) & 0x80) != 0 || v36 == 0)
      v19 = 0;
    else
      v19 = v35;
    if (!v36)
      v36 = *(_QWORD *)(v18 + 16);
    if ((v36 & 0xFFFE000000000002) != 0)
      break;
    v14 = *(unsigned __int8 *)(v36 + 5);
    v18 = v36;
  }
  while (v14 > 0x16);
  if (v19)
  {
    v52 = *(unsigned int *)a1;
    v53 = *(_DWORD *)((16 * v52) | 0x10);
    if ((v53 & 3) == 0)
    {
      if ((*((_QWORD *)v177 + 11635) & 1) != 0)
        v54 = 0;
      else
        v54 = *((_QWORD *)v177 + 11635);
      v55 = *(_DWORD *)(v13 + 16);
      if (v55 < 0x100)
      {
        v89 = v13;
        LOWORD(v56) = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v13);
        v13 = v89;
      }
      else
      {
        v56 = v55 >> 8;
      }
      v57 = ((_WORD)v56 + ((unsigned __int16)v52 ^ (unsigned __int16)(v52 >> 9))) & 0x1FF;
      v58 = v54 + 122880;
      v59 = v54 + 122880 + 16 * v57;
      v60 = *(_WORD *)(v59 + 12);
      v61 = (unsigned __int16 *)(v54 + 133120);
      LODWORD(v62) = *(unsigned __int16 *)(v54 + 133120);
      v63 = *(WTF::StringImpl **)v59;
      if (v60 == (_DWORD)v62)
      {
        v68 = v58 + 16 * v57;
        v69 = *(_DWORD *)(v68 + 8);
        v62 = (_QWORD *)(v68 + 8);
        v70 = ((_BYTE)v69 + (_BYTE)v63 + ((v69 + (_DWORD)v63) >> 7)) & 0x7F;
        v71 = v54 + 0x20000;
        *(_QWORD *)v59 = 0;
        v72 = *(WTF::StringImpl **)(v54 + 0x20000 + 16 * v70);
        *(_QWORD *)(v71 + 16 * v70) = v63;
        if (v72)
        {
          if (*(_DWORD *)v72 == 2)
          {
            v175 = v13;
            WTF::StringImpl::~StringImpl(v72, (WTF::AtomStringImpl *)v17, v13, a4, a5, a6, a7, a8);
            WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
            v13 = v175;
            v60 = *v61;
            v63 = *(WTF::StringImpl **)v59;
          }
          else
          {
            v63 = 0;
            *(_DWORD *)v72 -= 2;
          }
        }
        else
        {
          v63 = 0;
        }
        *(_QWORD *)(v71 + 16 * v70 + 8) = *v62;
        LOWORD(v62) = v60;
      }
      *(_DWORD *)v13 += 2;
      *(_QWORD *)v59 = v13;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
        {
          WTF::StringImpl::~StringImpl(v63, (WTF::AtomStringImpl *)v17, v13, a4, a5, a6, a7, a8);
          WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
        }
        else
        {
          *(_DWORD *)v63 -= 2;
        }
      }
      v64 = v58 + 16 * v57;
      *(_DWORD *)(v64 + 8) = v52;
      *(_WORD *)(v59 + 12) = (_WORD)v62;
      *(_WORD *)(v64 + 14) = 0;
      goto LABEL_71;
    }
    if ((v53 & 0x800000) == 0)
      goto LABEL_71;
  }
  if (this)
  {
    *(_WORD *)((char *)this + 129) |= 4u;
    if (*((_BYTE *)this + 124))
    {
      --*((_BYTE *)this + 124);
    }
    else
    {
      v142 = *((unsigned __int8 *)this + 125);
      if (v142 != 255)
        *((_BYTE *)this + 125) = ++v142;
      if (xmmword_1ECF4C260 < v142)
      {
        *((_BYTE *)this + 125) = 0;
        v145 = *((unsigned __int8 *)this + 126);
        v146 = BYTE4(xmmword_1ECF4C260) << v145;
        v147 = v146;
        if (v146 == 255)
          LOBYTE(v146) = -2;
        if (v147 >> v145 == BYTE4(xmmword_1ECF4C260))
          v148 = v146;
        else
          v148 = -2;
        *((_BYTE *)this + 124) = v148;
        if (v145 != 255)
          *((_BYTE *)this + 126) = v145 + 1;
        *((_BYTE *)this + 127) = 0;
      }
      else if (*((_BYTE *)this + 127))
      {
        --*((_BYTE *)this + 127);
      }
      JSC::repatchInBySlowPathCall(*((JSC::CodeBlock **)v11 + 2), (uint64_t)this, 0, a4, a5, a6, a7, a8);
    }
  }
LABEL_71:
  v65 = 6;
LABEL_72:
  if (v187)
  {
    v66 = *(_DWORD *)(v186 + 4);
    if (!v66)
    {
      __break(0xC471u);
      JUMPOUT(0x19877BF94);
    }
    *(_DWORD *)(v186 + 4) = v66 - 1;
  }
  return v65;
}

