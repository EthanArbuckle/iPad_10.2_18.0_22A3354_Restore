uint64_t *WTF::HashMap<JSC::DFG::FrozenValue *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::FrozenValue *>,WTF::HashTraits<JSC::DFG::FrozenValue *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v11;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;

  v11 = result;
  v13 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<JSC::DFG::FrozenValue *,WTF::KeyValuePair<JSC::DFG::FrozenValue *,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::FrozenValue *,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::FrozenValue *>,WTF::HashMap<JSC::DFG::FrozenValue *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::FrozenValue *>,WTF::HashTraits<JSC::DFG::FrozenValue *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::FrozenValue *>>::rehash(result, 8uLL, 0, a4, a5, a6, a7, a8), (v13 = *v11) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = ~(*a2 << 32) + *a2;
  v18 = 9
      * (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) ^ (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v15 & ((v19 >> 31) ^ v19);
  v21 = (uint64_t *)(v13 + 16 * v20);
  v22 = *v21;
  if (*v21)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v22 == v16)
      {
        if ((v14 & 1) != 0)
          v33 = 0;
        else
          v33 = *(unsigned int *)(v13 - 4);
        v32 = 0;
        v31 = v13 + 16 * v33;
        goto LABEL_21;
      }
      if (v22 == -1)
        v23 = v21;
      v20 = (v20 + v24) & v15;
      v21 = (uint64_t *)(v13 + 16 * v20);
      v22 = *v21;
      ++v24;
    }
    while (*v21);
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      --*(_DWORD *)(*v11 - 16);
      v16 = *a2;
      v21 = v23;
    }
  }
  *v21 = v16;
  v21[1] = *a3;
  v25 = *v11;
  if (*v11)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v27 = *v11;
  if (*v11)
    v28 = *(_DWORD *)(v27 - 12);
  else
    v28 = 0;
  v29 = (*(_DWORD *)(v27 - 16) + v28);
  v30 = *(unsigned int *)(v27 - 4);
  if (v30 > 0x400)
  {
    if (v30 > 2 * v29)
      goto LABEL_17;
    goto LABEL_32;
  }
  if (3 * v30 <= 4 * v29)
  {
    if (!(_DWORD)v30)
    {
      v34 = 8;
      goto LABEL_29;
    }
LABEL_32:
    v34 = ((_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30)));
LABEL_29:
    result = (uint64_t *)WTF::HashTable<JSC::DFG::FrozenValue *,WTF::KeyValuePair<JSC::DFG::FrozenValue *,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::FrozenValue *,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::FrozenValue *>,WTF::HashMap<JSC::DFG::FrozenValue *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::FrozenValue *>,WTF::HashTraits<JSC::DFG::FrozenValue *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::FrozenValue *>>::rehash(v11, v34, (uint64_t)v21, a4, a5, a6, a7, a8);
    v21 = result;
    v27 = *v11;
    if (*v11)
      v30 = *(unsigned int *)(v27 - 4);
    else
      v30 = 0;
  }
LABEL_17:
  v31 = v27 + 16 * v30;
  v32 = 1;
LABEL_21:
  *(_QWORD *)a9 = v21;
  *(_QWORD *)(a9 + 8) = v31;
  *(_BYTE *)(a9 + 16) = v32;
  return result;
}

uint64_t *JSC::DFG::`anonymous namespace'::ConstantHoistingPhase::run(void)::{lambda(WTF::HashMap<JSC::DFG::FrozenValue *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::FrozenValue *>,WTF::HashTraits<JSC::DFG::FrozenValue *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits> const&)#1}::operator()(uint64_t *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  _QWORD *v19;
  __int128 v20;

  v8 = result;
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_25:
    v10 = &a2[2 * v9];
    goto LABEL_8;
  }
  v9 = *((unsigned int *)a2 - 1);
  v10 = &a2[2 * v9];
  if (!*((_DWORD *)a2 - 3))
  {
    v11 = &a2[2 * v9];
    goto LABEL_25;
  }
  v11 = a2;
  if ((_DWORD)v9)
  {
    v12 = 16 * v9;
    v11 = a2;
    while ((unint64_t)(*v11 + 1) <= 1)
    {
      v11 += 2;
      v12 -= 16;
      if (!v12)
      {
        v11 = v10;
        break;
      }
    }
  }
LABEL_8:
  if (a2)
    v13 = &a2[2 * *((unsigned int *)a2 - 1)];
  else
    v13 = 0;
  while (v11 != v13)
  {
    v14 = *v8;
    v15 = v11[1];
    *(_QWORD *)&v20 = 0;
    *((_QWORD *)&v20 + 1) = v15;
    result = (uint64_t *)(v14 + 8);
    v16 = *(unsigned int *)(v14 + 20);
    if ((_DWORD)v16 && *(_QWORD *)(*result + 16 * v16 - 16))
    {
      result = (uint64_t *)JSC::DFG::InsertionSet::insertSlow(v14, (unint64_t *)&v20, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      if ((_DWORD)v16 == *(_DWORD *)(v14 + 16))
      {
        result = (uint64_t *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, (void *)(v16 + 1), (unint64_t)&v20, a4, a5, a6, a7, a8);
        v16 = *(unsigned int *)(v14 + 20);
        v17 = *(_QWORD *)(v14 + 8);
        v18 = *(_OWORD *)result;
      }
      else
      {
        v17 = *(_QWORD *)(v14 + 8);
        v18 = v20;
      }
      *(_OWORD *)(v17 + 16 * v16) = v18;
      ++*(_DWORD *)(v14 + 20);
    }
    v19 = v11 + 2;
    v11 = v10;
    if (v19 != v10)
    {
      v11 = v19;
      while ((unint64_t)(*v11 + 1) <= 1)
      {
        v11 += 2;
        if (v11 == v10)
        {
          v11 = v10;
          break;
        }
      }
    }
  }
  return result;
}

_OWORD *WTF::HashTable<JSC::DFG::FrozenValue *,WTF::KeyValuePair<JSC::DFG::FrozenValue *,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::FrozenValue *,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::FrozenValue *>,WTF::HashMap<JSC::DFG::FrozenValue *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::FrozenValue *>,WTF::HashTraits<JSC::DFG::FrozenValue *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::FrozenValue *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (_QWORD *)(v11 + 16 * v22);
      if ((unint64_t)(*v24 + 1) >= 2)
      {
        v25 = *a1;
        if (*a1)
          v26 = *(_DWORD *)(v25 - 8);
        else
          v26 = 0;
        v27 = (~(*v24 << 32) + *v24) ^ ((~(*v24 << 32) + *v24) >> 22);
        v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((unint64_t)(v27 + ~(v27 << 13)) >> 8));
        v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
        v30 = v26 & ((v29 >> 31) ^ v29);
        v31 = 1;
        do
        {
          v32 = v30;
          v33 = *(_QWORD *)(v25 + 16 * v30);
          v30 = (v30 + v31++) & v26;
        }
        while (v33);
        v34 = (_OWORD *)(v25 + 16 * v32);
        *v34 = *(_OWORD *)v24;
        if (v24 == (_QWORD *)a3)
          v23 = v34;
      }
      ++v22;
    }
    while (v22 != v12);
    goto LABEL_13;
  }
  v23 = 0;
  result = 0;
  if (v11)
  {
LABEL_13:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v23;
  }
  return result;
}

void WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::DFG::BasicBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::DFG::BasicBlock *>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,JSC::DFG::BasicBlock *,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::expand(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;

  v9 = *a1;
  if (!*a1)
  {
    LODWORD(v10) = 0;
    v11 = 0;
LABEL_3:
    v12 = 8;
    goto LABEL_4;
  }
  LODWORD(v10) = *(_DWORD *)(v9 - 4);
  v11 = *(_DWORD *)(v9 - 12);
  if (!(_DWORD)v10)
    goto LABEL_3;
  v12 = (_DWORD)v10 << (6 * v11 >= (2 * v10));
LABEL_4:
  v13 = WTF::fastZeroedMalloc(16 * v12 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v12;
  *(_DWORD *)(*a1 - 8) = v12 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v11;
  if ((_DWORD)v10)
  {
    v10 = v10;
    v21 = (uint64_t *)v9;
    do
    {
      v22 = v9;
      v23 = v21;
      if ((unint64_t)(*v21 + 1) >= 2)
        WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::DFG::BasicBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::DFG::BasicBlock *>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,JSC::DFG::BasicBlock *,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::reinsert(*a1, v21);
      v21 = v23 + 2;
      --v10;
      v9 = v22;
    }
    while (v10);
    goto LABEL_13;
  }
  if (v9)
LABEL_13:
    WTF::fastFree(v9 - 16, v14, v15, v16, v17, v18, v19, v20);
}

__n128 WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::DFG::BasicBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::DFG::BasicBlock *>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,JSC::DFG::BasicBlock *,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::reinsert(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  __n128 result;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(*a2);
  v6 = 0;
  do
  {
    v7 = v5 & v4;
    v5 = ++v6 + v7;
  }
  while (*(_QWORD *)(a1 + 16 * v7));
  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 16 * v7) = *(_OWORD *)a2;
  return result;
}

uint64_t WTF::Vector<JSC::DFG::DesiredTransition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::DesiredTransition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0xAAAAAAB)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 24 * v8;
    v11 = WTF::fastMalloc((WTF *)(24 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v9)
    {
      v19 = 24 * v9;
      v20 = v5;
      do
      {
        v21 = *(_OWORD *)v20;
        *(_QWORD *)(v11 + 16) = *(_QWORD *)(v20 + 16);
        *(_OWORD *)v11 = v21;
        v11 += 24;
        v20 += 24;
        v19 -= 24;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::DFG::DesiredTransition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)a1;
      v7 = *(unsigned int *)(a1 + 12);
      v8 = 24 * v4;
      v9 = WTF::fastMalloc((WTF *)(24 * v4));
      *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v7)
      {
        v17 = 24 * v7;
        v18 = v6;
        do
        {
          v19 = *(_OWORD *)v18;
          *(_QWORD *)(v9 + 16) = *(_QWORD *)(v18 + 16);
          *(_OWORD *)v9 = v19;
          v9 += 24;
          v18 += 24;
          v17 -= 24;
        }
        while (v17);
      }
      if (v6)
      {
        if (*(_QWORD *)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t *WTF::HashTable<JSC::WatchpointSet *,JSC::WatchpointSet *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t *v9;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;

  v9 = result;
  v11 = *result;
  if (*result
    || (result = WTF::HashTable<JSC::WatchpointSet *,JSC::WatchpointSet *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>>::rehash(result, 8uLL, 0, a3, a4, a5, a6, a7), (v11 = *v9) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = *a2;
  v15 = ~(*a2 << 32) + *a2;
  v16 = 9
      * (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) ^ (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v13 & ((v17 >> 31) ^ v17);
  v19 = (uint64_t *)(v11 + 8 * v18);
  v20 = *v19;
  if (*v19)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v20 == v14)
      {
        if ((v12 & 1) != 0)
          v31 = 0;
        else
          v31 = *(unsigned int *)(v11 - 4);
        v30 = 0;
        v29 = v11 + 8 * v31;
        goto LABEL_18;
      }
      if (v20 == -1)
        v21 = v19;
      v18 = (v18 + v22) & v13;
      v19 = (uint64_t *)(v11 + 8 * v18);
      v20 = *v19;
      ++v22;
    }
    while (*v19);
    if (v21)
    {
      *v21 = 0;
      --*(_DWORD *)(*v9 - 16);
      v14 = *a2;
      v19 = v21;
    }
  }
  *v19 = v14;
  v23 = *v9;
  if (*v9)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v9;
  if (*v9)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 > 2 * v27)
      goto LABEL_17;
    goto LABEL_28;
  }
  if (3 * v28 <= 4 * v27)
  {
    if (!(_DWORD)v28)
    {
      v32 = 8;
LABEL_31:
      result = WTF::HashTable<JSC::WatchpointSet *,JSC::WatchpointSet *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>>::rehash(v9, v32, (uint64_t)v19, a3, a4, a5, a6, a7);
      v19 = result;
      v25 = *v9;
      if (*v9)
        v28 = *(unsigned int *)(v25 - 4);
      else
        v28 = 0;
      goto LABEL_17;
    }
LABEL_28:
    v32 = ((_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28)));
    goto LABEL_31;
  }
LABEL_17:
  v29 = v25 + 8 * v28;
  v30 = 1;
LABEL_18:
  *(_QWORD *)a8 = v19;
  *(_QWORD *)(a8 + 8) = v29;
  *(_BYTE *)(a8 + 16) = v30;
  return result;
}

_QWORD *WTF::HashTable<JSC::WatchpointSet *,JSC::WatchpointSet *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (uint64_t *)(v11 + 8 * v22);
      v25 = *v24;
      if ((unint64_t)(*v24 + 1) >= 2)
      {
        v26 = *a1;
        v27 = *a1 ? *(_DWORD *)(v26 - 8) : 0;
        v28 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
        v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
        v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
        v31 = v27 & ((v30 >> 31) ^ v30);
        v32 = 1;
        do
        {
          v33 = v31;
          v34 = *(_QWORD *)(v26 + 8 * v31);
          v31 = (v31 + v32++) & v27;
        }
        while (v34);
        v35 = (_QWORD *)(v26 + 8 * v33);
        *v35 = v25;
        if (v24 == (uint64_t *)a3)
          v23 = v35;
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
  }
  if (v11)
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

uint64_t *WTF::HashTable<JSC::SymbolTable *,JSC::SymbolTable *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::SymbolTable *>,WTF::HashTraits<JSC::SymbolTable *>,WTF::HashTraits<JSC::SymbolTable *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v10;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;

  v10 = result;
  v12 = *result;
  if (*result
    || (result = WTF::HashTable<JSC::SymbolTable *,JSC::SymbolTable *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::SymbolTable *>,WTF::HashTraits<JSC::SymbolTable *>,WTF::HashTraits<JSC::SymbolTable *>>::expand(result, 0, a3, a4, a5, a6, a7, a8), (v12 = *v10) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a2;
  v16 = ~(*a2 << 32) + *a2;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (uint64_t *)(v12 + 8 * v19);
  v21 = *v20;
  if (*v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v24 = 0;
        else
          v24 = *(unsigned int *)(v12 - 4);
        v25 = 0;
        v26 = v12 + 8 * v24;
        goto LABEL_9;
      }
      if (v21 == -1)
        v22 = v20;
      v19 = (v19 + v23) & v14;
      v20 = (uint64_t *)(v12 + 8 * v19);
      v21 = *v20;
      ++v23;
    }
    while (*v20);
    if (v22)
    {
      *v22 = 0;
      --*(_DWORD *)(*v10 - 16);
      v15 = *a2;
      v20 = v22;
    }
  }
  *v20 = v15;
  v27 = *v10;
  if (*v10)
    v28 = *(_DWORD *)(v27 - 12) + 1;
  else
    v28 = 1;
  *(_DWORD *)(v27 - 12) = v28;
  v29 = *v10;
  if (*v10)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 > 2 * v31)
      goto LABEL_24;
LABEL_28:
    result = WTF::HashTable<JSC::SymbolTable *,JSC::SymbolTable *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::SymbolTable *>,WTF::HashTraits<JSC::SymbolTable *>,WTF::HashTraits<JSC::SymbolTable *>>::expand(v10, (unint64_t)v20, a3, a4, a5, a6, a7, a8);
    v20 = result;
    v29 = *v10;
    if (*v10)
      v32 = *(unsigned int *)(v29 - 4);
    else
      v32 = 0;
    goto LABEL_24;
  }
  if (3 * v32 <= 4 * v31)
    goto LABEL_28;
LABEL_24:
  v26 = v29 + 8 * v32;
  v25 = 1;
LABEL_9:
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v26;
  *(_BYTE *)(a9 + 16) = v25;
  return result;
}

_QWORD *WTF::HashTable<JSC::SymbolTable *,JSC::SymbolTable *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::SymbolTable *>,WTF::HashTraits<JSC::SymbolTable *>,WTF::HashTraits<JSC::SymbolTable *>>::expand(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *result;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;

  v10 = *a1;
  if (!*a1)
  {
    v11 = 0;
    v12 = 0;
    goto LABEL_3;
  }
  v11 = *(_DWORD *)(v10 - 4);
  v12 = *(_DWORD *)(v10 - 12);
  if (!v11)
  {
LABEL_3:
    v13 = 8;
    goto LABEL_4;
  }
  v13 = v11 << (6 * v12 >= 2 * v11);
LABEL_4:
  v14 = WTF::fastZeroedMalloc(8 * v13 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v13;
  *(_DWORD *)(*a1 - 8) = v13 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  v22 = 0;
  if (v11)
  {
    v24 = v11;
    v25 = (_QWORD *)v10;
    do
    {
      if ((unint64_t)(*v25 + 1) >= 2)
      {
        v26 = (_QWORD *)WTF::HashTable<JSC::SymbolTable *,JSC::SymbolTable *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::SymbolTable *>,WTF::HashTraits<JSC::SymbolTable *>,WTF::HashTraits<JSC::SymbolTable *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::SymbolTable *>,WTF::DefaultHash<JSC::SymbolTable *>>,JSC::SymbolTable *>(a1, v25);
        *v26 = *v25;
        if (v25 == (_QWORD *)a2)
          v22 = v26;
      }
      ++v25;
      --v24;
    }
    while (v24);
    goto LABEL_13;
  }
  result = 0;
  if (v10)
  {
LABEL_13:
    WTF::fastFree(v10 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

uint64_t WTF::HashTable<JSC::SymbolTable *,JSC::SymbolTable *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::SymbolTable *>,WTF::HashTraits<JSC::SymbolTable *>,WTF::HashTraits<JSC::SymbolTable *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::SymbolTable *>,WTF::DefaultHash<JSC::SymbolTable *>>,JSC::SymbolTable *>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CodeBlock *>>::hash<JSC::CodeBlock *>(a2);
  v5 = 0;
  do
  {
    v6 = v4 & v3;
    v4 = ++v5 + v6;
  }
  while (*(_QWORD *)(v2 + 8 * v6));
  return v2 + 8 * v6;
}

uint64_t *WTF::HashTable<JSC::FunctionExecutable *,JSC::FunctionExecutable *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::FunctionExecutable *>,WTF::HashTraits<JSC::FunctionExecutable *>,WTF::HashTraits<JSC::FunctionExecutable *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v10;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;

  v10 = result;
  v12 = *result;
  if (*result
    || (result = WTF::HashTable<JSC::FunctionExecutable *,JSC::FunctionExecutable *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::FunctionExecutable *>,WTF::HashTraits<JSC::FunctionExecutable *>,WTF::HashTraits<JSC::FunctionExecutable *>>::expand(result, 0, a3, a4, a5, a6, a7, a8), (v12 = *v10) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a2;
  v16 = ~(*a2 << 32) + *a2;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (uint64_t *)(v12 + 8 * v19);
  v21 = *v20;
  if (*v20)
  {
    v30 = 0;
    v31 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v32 = 0;
        else
          v32 = *(unsigned int *)(v12 - 4);
        v29 = 0;
        v28 = v12 + 8 * v32;
        goto LABEL_12;
      }
      if (v21 == -1)
        v30 = v20;
      v19 = (v19 + v31) & v14;
      v20 = (uint64_t *)(v12 + 8 * v19);
      v21 = *v20;
      ++v31;
    }
    while (*v20);
    if (v30)
    {
      *v30 = 0;
      --*(_DWORD *)(*v10 - 16);
      v15 = *a2;
      v20 = v30;
    }
  }
  *v20 = v15;
  v22 = *v10;
  if (*v10)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *v10;
  if (*v10)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_11;
LABEL_21:
    result = WTF::HashTable<JSC::FunctionExecutable *,JSC::FunctionExecutable *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::FunctionExecutable *>,WTF::HashTraits<JSC::FunctionExecutable *>,WTF::HashTraits<JSC::FunctionExecutable *>>::expand(v10, (unint64_t)v20, a3, a4, a5, a6, a7, a8);
    v20 = result;
    v24 = *v10;
    if (*v10)
      v27 = *(unsigned int *)(v24 - 4);
    else
      v27 = 0;
    goto LABEL_11;
  }
  if (3 * v27 <= 4 * v26)
    goto LABEL_21;
LABEL_11:
  v28 = v24 + 8 * v27;
  v29 = 1;
LABEL_12:
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v28;
  *(_BYTE *)(a9 + 16) = v29;
  return result;
}

_QWORD *WTF::HashTable<JSC::FunctionExecutable *,JSC::FunctionExecutable *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::FunctionExecutable *>,WTF::HashTraits<JSC::FunctionExecutable *>,WTF::HashTraits<JSC::FunctionExecutable *>>::expand(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *result;
  void **v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  v10 = *a1;
  if (!*a1)
  {
    LODWORD(v11) = 0;
    v12 = 0;
    goto LABEL_3;
  }
  LODWORD(v11) = *(_DWORD *)(v10 - 4);
  v12 = *(_DWORD *)(v10 - 12);
  if (!(_DWORD)v11)
  {
LABEL_3:
    v13 = 8;
    goto LABEL_4;
  }
  v13 = (_DWORD)v11 << (6 * v12 >= (2 * v11));
LABEL_4:
  v14 = WTF::fastZeroedMalloc(8 * v13 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v13;
  *(_DWORD *)(*a1 - 8) = v13 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  v22 = 0;
  if ((_DWORD)v11)
  {
    v11 = v11;
    v24 = (void **)v10;
    do
    {
      v27 = v22;
      v15 = *v24;
      if ((unint64_t)*v24 + 1 >= 2)
      {
        v25 = WTF::HashTable<JSC::JSModuleEnvironment *,JSC::JSModuleEnvironment *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSModuleEnvironment *>,WTF::HashTraits<JSC::JSModuleEnvironment *>,WTF::HashTraits<JSC::JSModuleEnvironment *>>::reinsert(*a1, (uint64_t)v15);
        v26 = v22;
        if (v24 == (void **)a2)
          v26 = v25;
        v27 = v26;
      }
      ++v24;
      --v11;
      v22 = v27;
    }
    while (v11);
    goto LABEL_16;
  }
  result = 0;
  if (v10)
  {
LABEL_16:
    WTF::fastFree(v10 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

uint64_t *WTF::HashTable<JSC::JSArrayBufferView *,JSC::JSArrayBufferView *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSArrayBufferView *>,WTF::HashTraits<JSC::JSArrayBufferView *>,WTF::HashTraits<JSC::JSArrayBufferView *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v10;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;

  v10 = result;
  v12 = *result;
  if (*result
    || (result = WTF::HashTable<JSC::JSArrayBufferView *,JSC::JSArrayBufferView *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSArrayBufferView *>,WTF::HashTraits<JSC::JSArrayBufferView *>,WTF::HashTraits<JSC::JSArrayBufferView *>>::expand(result, 0, a3, a4, a5, a6, a7, a8), (v12 = *v10) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a2;
  v16 = ~(*a2 << 32) + *a2;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (uint64_t *)(v12 + 8 * v19);
  v21 = *v20;
  if (*v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v24 = 0;
        else
          v24 = *(unsigned int *)(v12 - 4);
        v25 = 0;
        v26 = v12 + 8 * v24;
        goto LABEL_9;
      }
      if (v21 == -1)
        v22 = v20;
      v19 = (v19 + v23) & v14;
      v20 = (uint64_t *)(v12 + 8 * v19);
      v21 = *v20;
      ++v23;
    }
    while (*v20);
    if (v22)
    {
      *v22 = 0;
      --*(_DWORD *)(*v10 - 16);
      v15 = *a2;
      v20 = v22;
    }
  }
  *v20 = v15;
  v27 = *v10;
  if (*v10)
    v28 = *(_DWORD *)(v27 - 12) + 1;
  else
    v28 = 1;
  *(_DWORD *)(v27 - 12) = v28;
  v29 = *v10;
  if (*v10)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 > 2 * v31)
      goto LABEL_22;
LABEL_26:
    result = WTF::HashTable<JSC::JSArrayBufferView *,JSC::JSArrayBufferView *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSArrayBufferView *>,WTF::HashTraits<JSC::JSArrayBufferView *>,WTF::HashTraits<JSC::JSArrayBufferView *>>::expand(v10, (unint64_t)v20, a3, a4, a5, a6, a7, a8);
    v20 = result;
    v29 = *v10;
    if (*v10)
      v32 = *(unsigned int *)(v29 - 4);
    else
      v32 = 0;
    goto LABEL_22;
  }
  if (3 * v32 <= 4 * v31)
    goto LABEL_26;
LABEL_22:
  v26 = v29 + 8 * v32;
  v25 = 1;
LABEL_9:
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v26;
  *(_BYTE *)(a9 + 16) = v25;
  return result;
}

_QWORD *WTF::HashTable<JSC::JSArrayBufferView *,JSC::JSArrayBufferView *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSArrayBufferView *>,WTF::HashTraits<JSC::JSArrayBufferView *>,WTF::HashTraits<JSC::JSArrayBufferView *>>::expand(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *result;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;

  v10 = *a1;
  if (!*a1)
  {
    v11 = 0;
    v12 = 0;
LABEL_3:
    v13 = 8;
    goto LABEL_4;
  }
  v11 = *(_DWORD *)(v10 - 4);
  v12 = *(_DWORD *)(v10 - 12);
  if (!v11)
    goto LABEL_3;
  v13 = v11 << (6 * v12 >= 2 * v11);
LABEL_4:
  v14 = WTF::fastZeroedMalloc(8 * v13 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v13;
  *(_DWORD *)(*a1 - 8) = v13 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  v22 = 0;
  if (v11)
  {
    v24 = v11;
    v25 = (_QWORD *)v10;
    do
    {
      if ((unint64_t)(*v25 + 1) >= 2)
      {
        v26 = (_QWORD *)WTF::HashTable<JSC::SymbolTable *,JSC::SymbolTable *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::SymbolTable *>,WTF::HashTraits<JSC::SymbolTable *>,WTF::HashTraits<JSC::SymbolTable *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::SymbolTable *>,WTF::DefaultHash<JSC::SymbolTable *>>,JSC::SymbolTable *>(a1, v25);
        *v26 = *v25;
        if (v25 == (_QWORD *)a2)
          v22 = v26;
      }
      ++v25;
      --v24;
    }
    while (v24);
    goto LABEL_12;
  }
  result = 0;
  if (v10)
  {
LABEL_12:
    WTF::fastFree(v10 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

uint64_t WTF::HashTable<JSC::ObjectPropertyCondition,JSC::ObjectPropertyCondition,WTF::IdentityExtractor,WTF::DefaultHash<JSC::ObjectPropertyCondition>,WTF::HashTraits<JSC::ObjectPropertyCondition>,WTF::HashTraits<JSC::ObjectPropertyCondition>>::add@<X0>(JSC::ObjectPropertyCondition *this@<X1>, uint64_t *a2@<X0>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int i;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;

  v11 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::ObjectPropertyCondition,JSC::ObjectPropertyCondition,WTF::IdentityExtractor,WTF::DefaultHash<JSC::ObjectPropertyCondition>,WTF::HashTraits<JSC::ObjectPropertyCondition>,WTF::HashTraits<JSC::ObjectPropertyCondition>>::rehash(a2, 8uLL, 0, a3, a4, a5, a6, a7), (v11 = *a2) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  result = JSC::ObjectPropertyCondition::hash(this);
  v19 = 0;
  for (i = 1; ; ++i)
  {
    v21 = result & v12;
    v22 = v11 + 24 * (result & v12);
    v23 = *(_QWORD *)v22;
    v24 = *(_QWORD *)(v22 + 8);
    if (!*(_QWORD *)v22)
    {
      v25 = (v24 & 0xFFFFFFFFFFFFFFLL) == 0 && *(_DWORD *)(v11 + 24 * v21 + 16) == 0;
      if (v25 && !*(_DWORD *)(v22 + 20))
      {
        if (v19)
        {
          *v19 = 0;
          v19[1] = 0;
          v19[2] = 0;
          --*(_DWORD *)(*a2 - 16);
          v22 = (uint64_t)v19;
        }
        v32 = *(_OWORD *)this;
        *(_QWORD *)(v22 + 16) = *((_QWORD *)this + 2);
        *(_OWORD *)v22 = v32;
        v33 = *a2;
        if (*a2)
          v34 = *(_DWORD *)(v33 - 12) + 1;
        else
          v34 = 1;
        *(_DWORD *)(v33 - 12) = v34;
        v35 = *a2;
        if (*a2)
          v36 = *(_DWORD *)(v35 - 12);
        else
          v36 = 0;
        v37 = (*(_DWORD *)(v35 - 16) + v36);
        v38 = *(unsigned int *)(v35 - 4);
        if (v38 > 0x400)
        {
          if (v38 > 2 * v37)
            goto LABEL_36;
        }
        else
        {
          if (3 * v38 > 4 * v37)
          {
LABEL_36:
            v39 = v35 + 24 * v38;
            v40 = 1;
            goto LABEL_37;
          }
          if (!(_DWORD)v38)
          {
            v43 = 8;
            goto LABEL_50;
          }
        }
        v43 = ((_DWORD)v38 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v38)));
LABEL_50:
        result = WTF::HashTable<JSC::ObjectPropertyCondition,JSC::ObjectPropertyCondition,WTF::IdentityExtractor,WTF::DefaultHash<JSC::ObjectPropertyCondition>,WTF::HashTraits<JSC::ObjectPropertyCondition>,WTF::HashTraits<JSC::ObjectPropertyCondition>>::rehash(a2, v43, v22, v14, v15, v16, v17, v18);
        v22 = result;
        v35 = *a2;
        if (*a2)
          LODWORD(v38) = *(_DWORD *)(v35 - 4);
        else
          LODWORD(v38) = 0;
        goto LABEL_36;
      }
    }
    v26 = *((_QWORD *)this + 1);
    result = v26 & 0xFFFFFFFFFFFFLL;
    v14 = BYTE6(v24);
    v27 = v23 == *(_QWORD *)this && (v24 & 0xFFFFFFFFFFFFLL) == result;
    if (v27 && BYTE6(v24) == BYTE6(v26))
    {
      v29 = *((_QWORD *)this + 2);
      if (BYTE6(v26) >= 2u)
      {
        switch(BYTE6(v26))
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
            if (*(_QWORD *)(v11 + 24 * v21 + 16) == v29)
              goto LABEL_42;
            goto LABEL_21;
          case 6:
            goto LABEL_42;
          default:
            __break(0xC471u);
            JUMPOUT(0x1983BA260);
        }
      }
      if (__PAIR64__(*(_DWORD *)(v22 + 20), *(_DWORD *)(v11 + 24 * v21 + 16)) == v29)
        break;
    }
LABEL_21:
    v30 = v24 & 0xFFFFFFFFFFFFFFLL;
    if (v23)
      v31 = 0;
    else
      v31 = v30 == 0x2000000000000;
    if (v31)
      v19 = (_QWORD *)(v11 + 24 * v21);
    result = i + v21;
  }
LABEL_42:
  v41 = *a2;
  if (*a2)
    v42 = *(_DWORD *)(v41 - 4);
  else
    v42 = 0;
  v40 = 0;
  v39 = v41 + 24 * v42;
LABEL_37:
  *(_QWORD *)a8 = v22;
  *(_QWORD *)(a8 + 8) = v39;
  *(_BYTE *)(a8 + 16) = v40;
  return result;
}

uint64_t WTF::HashTable<JSC::ObjectPropertyCondition,JSC::ObjectPropertyCondition,WTF::IdentityExtractor,WTF::DefaultHash<JSC::ObjectPropertyCondition>,WTF::HashTraits<JSC::ObjectPropertyCondition>,WTF::HashTraits<JSC::ObjectPropertyCondition>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  int i;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  __int128 v39;
  uint64_t result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(24 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    v24 = v12;
    do
    {
      v25 = (__int128 *)(v11 + 24 * v22);
      v26 = *((_QWORD *)v25 + 1) & 0xFFFFFFFFFFFFFFLL;
      if (*(_QWORD *)v25)
        v27 = 0;
      else
        v27 = v26 == 0x2000000000000;
      if (!v27)
      {
        if (*(_QWORD *)v25
          || (!v26 ? (v28 = *(_DWORD *)(v11 + 24 * v22 + 16) == 0) : (v28 = 0), !v28 || *((_DWORD *)v25 + 5)))
        {
          v29 = *a1;
          if (*a1)
            v30 = *(_DWORD *)(v29 - 8);
          else
            v30 = 0;
          v31 = JSC::ObjectPropertyCondition::hash((JSC::ObjectPropertyCondition *)(v11 + 24 * v22));
          for (i = 0; ; v31 = i + v33)
          {
            v33 = v31 & v30;
            v34 = v29 + 24 * (v31 & v30);
            if (!*(_QWORD *)v34)
            {
              v35 = v29 + 24 * v33;
              v36 = *(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFLL;
              v37 = *(_DWORD *)(v35 + 16);
              v38 = !v36 && v37 == 0;
              if (v38 && !*(_DWORD *)(v34 + 20))
                break;
            }
            ++i;
          }
          v39 = *v25;
          *(_QWORD *)(v34 + 16) = *((_QWORD *)v25 + 2);
          *(_OWORD *)v34 = v39;
          if (v25 == (__int128 *)a3)
            v23 = v29 + 24 * v33;
        }
      }
      ++v22;
    }
    while (v22 != v24);
    goto LABEL_30;
  }
  v23 = 0;
  result = 0;
  if (v11)
  {
LABEL_30:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v23;
  }
  return result;
}

_QWORD *WTF::HashSet<JSC::InlineWatchpointSet *,WTF::DefaultHash<JSC::InlineWatchpointSet *>,WTF::HashTraits<JSC::InlineWatchpointSet *>,WTF::HashTableTraits>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[v1];
  if (!*((_DWORD *)result - 3))
    return &result[v1];
  if ((_DWORD)v1)
  {
    v3 = 8 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v3 -= 8;
      if (!v3)
        return v2;
    }
  }
  return result;
}

_QWORD *WTF::HashSet<JSC::JSArrayBufferView *,WTF::DefaultHash<JSC::JSArrayBufferView *>,WTF::HashTraits<JSC::JSArrayBufferView *>,WTF::HashTableTraits>::begin(_QWORD *result)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[v2];
  if (!*((_DWORD *)result - 3))
    return &result[v2];
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v4 -= 8;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t WTF::HashSet<JSC::ObjectPropertyCondition,WTF::DefaultHash<JSC::ObjectPropertyCondition>,WTF::HashTraits<JSC::ObjectPropertyCondition>,WTF::HashTableTraits>::begin(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;

  if (!result)
    return 0;
  v1 = *(unsigned int *)(result - 4);
  v2 = result + 24 * v1;
  if (!*(_DWORD *)(result - 12))
    return result + 24 * v1;
  if ((_DWORD)v1)
  {
    v3 = 24 * v1;
    while (!*(_QWORD *)result)
    {
      v4 = (*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFLL) == 0;
      if (*(_DWORD *)(result + 16))
        v4 = 0;
      if (*(_DWORD *)(result + 20))
        v4 = 0;
      if ((*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFLL) != 0x2000000000000 && !v4)
        break;
      result += 24;
      v3 -= 24;
      if (!v3)
        return v2;
    }
  }
  return result;
}

int *WTF::HashTable<JSC::StructureID,JSC::StructureID,WTF::IdentityExtractor,WTF::DefaultHash<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>>::expand(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int *v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  int *v30;

  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
    if (v11)
    {
      v13 = v11 << (6 * v12 >= (2 * v11));
      goto LABEL_4;
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = 8;
LABEL_4:
  v14 = WTF::fastZeroedMalloc(4 * v13 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v13;
  *(_DWORD *)(*a1 - 8) = v13 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (int *)(v10 + 4 * v22);
      if (*v24 >= 2)
      {
        v25 = *a1;
        v26 = *a1 ? *(_DWORD *)(v25 - 8) : 0;
        v27 = 0;
        v28 = *v24;
        do
        {
          v29 = v28 & v26;
          v28 = ++v27 + v29;
        }
        while (*(_DWORD *)(v25 + 4 * v29));
        v30 = (int *)(v25 + 4 * v29);
        *v30 = *v24;
        if (v24 == (int *)a2)
          v23 = v30;
      }
      ++v22;
    }
    while (v22 != v11);
  }
  else
  {
    v23 = 0;
  }
  if (v10)
    WTF::fastFree(v10 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void JSC::DFG::Disassembler::dump(JSC::DFG::Graph **this, WTF::PrintStream *a2, JSC::LinkBuffer *a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t *v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  _DWORD **v20;
  _DWORD *v21;
  uint64_t v22;
  WTF *v23;
  unsigned int v24;

  JSC::DFG::Disassembler::createDumpList((JSC::DFG::Disassembler *)&v23, this, a3);
  v11 = v24;
  v12 = v23;
  if (v24)
  {
    v13 = (uint64_t *)((char *)v23 + 8);
    v14 = v24;
    do
    {
      v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v16 = *v13;
      v13 += 2;
      v17 = (const char *)(v16 + 16);
      if (v16)
        v18 = v17;
      else
        v18 = 0;
      WTF::PrintStream::printf(v15, "%s", v18);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      --v14;
    }
    while (v14);
    v19 = 16 * v11;
    v20 = (_DWORD **)((char *)v12 + 8);
    do
    {
      v21 = *v20;
      *v20 = 0;
      if (v21)
      {
        if (*v21 == 1)
          WTF::fastFree((unint64_t)v21, v4, v5, v6, v7, v8, v9, v10);
        else
          --*v21;
      }
      v22 = (uint64_t)*(v20 - 1);
      if ((v22 & 1) != 0 && (v22 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v22 & 0xFFFFFFFF8, v4, v5, v6, v7, v8, v9, v10);
      v20 += 2;
      v19 -= 16;
    }
    while (v19);
  }
  if (v12)
    WTF::fastFree((unint64_t)v12, v4, v5, v6, v7, v8, v9, v10);
}

void JSC::DFG::Disassembler::createDumpList(JSC::DFG::Disassembler *this, JSC::DFG::Graph **a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  char *v10;
  char *v11;
  WTF::PrintStream *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::DFG::Graph *v18;
  unint64_t v19;
  JSC::DFG::Node *v20;
  unint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  JSC::DFG::Node **v36;
  JSC::DFG::Node **v37;
  JSC::DFG::Node *v38;
  JSC::DFG::Graph *v39;
  JSC::DFG::Node *v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  JSC::DFG::Node *v46;
  int v47;
  int *v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  int v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  WTF *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  WTF::PrintStream *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  unint64_t StatusReg;
  JSC::DFG::Disassembler *v143;
  int v144;
  int v145;
  int v146;
  int v147;
  JSC::DFG::Node *v148;
  uint64_t v149;
  unint64_t v150;
  void (**v151)(WTF::StringPrintStream *__hidden);
  WTF *v152;
  __int128 v153;
  _BYTE v154[128];
  uint64_t v155;

  v155 = *MEMORY[0x1E0C80C00];
  v151 = off_1E3572250;
  v152 = (WTF *)v154;
  v153 = xmmword_199122F80;
  v154[0] = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v149 = 2;
  v6 = *((_QWORD *)*a2 + 4);
  v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 56) + 80) + 12);
  WTF::PrintStream::printf((WTF::PrintStream *)&v151, "%s", "Generated DFG JIT code for ");
  JSC::CodeBlock::dumpAssumingJITType(v6);
  WTF::PrintStream::printf((WTF::PrintStream *)&v151, "%s", ", instructions size = ");
  WTF::PrintStream::printf((WTF::PrintStream *)&v151, "%u", v7);
  WTF::PrintStream::printf((WTF::PrintStream *)&v151, "%s", ":\n");
  v151[5]((WTF::StringPrintStream *)&v151);
  v8 = *((_QWORD *)*a2 + 5);
  v9 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v151[4])(&v151);
  WTF::PrintStream::printf(v9, "%s", "    Optimized with execution counter = ");
  WTF::PrintStream::printf(v9, "%lf/%lf, %d", *(float *)(v8 + 204) + (double)*(int *)(v8 + 200), (double)*(int *)(v8 + 208), *(_DWORD *)(v8 + 200));
  WTF::PrintStream::printf(v9, "%s", "\n");
  v151[5]((WTF::StringPrintStream *)&v151);
  v10 = (char *)a3[23];
  v11 = &v10[a3[1]];
  v12 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v151[4])(&v151);
  WTF::PrintStream::printf(v12, "%s", "    Code at [");
  WTF::PrintStream::printf(v12, "%p", v10);
  WTF::PrintStream::printf(v12, "%s", ", ");
  WTF::PrintStream::printf(v12, "%p", v11);
  WTF::PrintStream::printf(v12, "%s", "):\n");
  v151[5]((WTF::StringPrintStream *)&v151);
  v143 = this;
  JSC::DFG::Disassembler::append((uint64_t)this, &v151, &v149, v13, v14, v15, v16, v17);
  JSC::DFG::Graph::ensureCPSDominators(*a2);
  JSC::DFG::Graph::ensureCPSNaturalLoops(*a2);
  v148 = 0;
  v147 = *((_DWORD *)a2 + 8);
  v18 = *a2;
  LODWORD(v19) = *((_DWORD *)*a2 + 15);
  if ((_DWORD)v19)
  {
    v20 = 0;
    v21 = 0;
    v22 = "    ";
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      if (v19 <= v21)
      {
        __break(0xC471u);
        JUMPOUT(0x1983BB1B4);
      }
      v23 = *(_QWORD *)(*((_QWORD *)v18 + 6) + 8 * v21);
      if (v23)
        break;
      ++v21;
LABEL_100:
      v19 = *((unsigned int *)v18 + 15);
      if (v21 >= v19)
        goto LABEL_103;
    }
    if (v21 >= *((unsigned int *)a2 + 13))
    {
      __break(0xC471u);
      JUMPOUT(0x1983BB1BCLL);
    }
    v146 = *((_DWORD *)a2[5] + v21);
    JSC::DFG::Disassembler::dumpDisassembly((WTF::PrintStream *)&v151, a3, &v147, &v146, v20);
    JSC::DFG::Disassembler::append((uint64_t)v143, &v151, &v149, v24, v25, v26, v27, v28);
    JSC::DFG::Graph::dumpBlockHeader((uint64_t)*a2, (uint64_t)&v151, (uint64_t)v22, v23, 0);
    JSC::DFG::Disassembler::append((uint64_t)v143, &v151, &v149, v29, v30, v31, v32, v33);
    if (!*(_DWORD *)(v23 + 220))
    {
LABEL_120:
      __break(0xC471u);
      JUMPOUT(0x1983BB138);
    }
    v34 = 0;
    v35 = v147;
    v36 = *(JSC::DFG::Node ***)(v23 + 208);
    ++v21;
    v37 = v36;
    while (1)
    {
      v38 = *v37;
      v39 = a2[7];
      if (!v39)
        goto LABEL_16;
      v40 = v36[v34];
      v41 = *((_DWORD *)v39 - 2);
      v42 = ((unint64_t)v40 + ~((_QWORD)v40 << 32)) ^ (((unint64_t)v40 + ~((_QWORD)v40 << 32)) >> 22);
      v43 = 9 * ((v42 + ~(v42 << 13)) ^ ((v42 + ~(v42 << 13)) >> 8));
      v44 = (v43 ^ (v43 >> 15)) + ~((v43 ^ (v43 >> 15)) << 27);
      v45 = v41 & ((v44 >> 31) ^ v44);
      v46 = (JSC::DFG::Node *)*((_QWORD *)v39 + 2 * v45);
      if (v46 != v40)
      {
        v47 = 1;
        while (v46)
        {
          v45 = ((_DWORD)v45 + v47) & v41;
          v46 = (JSC::DFG::Node *)*((_QWORD *)v39 + 2 * v45);
          ++v47;
          if (v46 == v40)
            goto LABEL_15;
        }
        v45 = *((unsigned int *)v39 - 1);
      }
LABEL_15:
      if (v45 != *((_DWORD *)v39 - 1))
      {
        v48 = (int *)((char *)v39 + 16 * v45 + 8);
      }
      else
      {
LABEL_16:
        v48 = (int *)(a2 + 8);
        if (v21 < *((unsigned int *)*a2 + 15))
        {
          if (*((_DWORD *)a2 + 13) <= v21)
          {
            __break(0xC471u);
            JUMPOUT(0x1983BB19CLL);
          }
          v48 = (int *)((char *)a2[5] + 4 * v21);
        }
      }
      v49 = *v48;
      if (!v38)
        break;
      v50 = *(_QWORD *)v38;
      v51 = (_QWORD *)(*(_QWORD *)v38 & 0xFFFFFFFF8);
      if ((v50 & 1) != 0)
      {
        v51 = (_QWORD *)*v51;
        if (!v51)
          break;
      }
      else if (!v51)
      {
        break;
      }
      v99 = 0;
      v100 = 2;
      do
      {
        v101 = v100;
        v102 = v51[2];
        v51 = (_QWORD *)(v102 & 0xFFFFFFFF8);
        if ((v102 & 1) != 0)
          v51 = (_QWORD *)*v51;
        v99 += 2;
        v100 = v101 + 2;
      }
      while (v51);
      v140 = v101;
      v141 = v99;
      v103 = (WTF *)(v99 + 9);
      if ((unint64_t)v103 >> 32)
      {
        __break(0xC471u);
        JUMPOUT(0x1983BB1A4);
      }
      v52 = v21;
      v53 = v22;
      v55 = v99 + 8;
      v104 = (_QWORD *)WTF::fastMalloc(v103);
      v54 = (unint64_t)v104;
      *v104 = 0x2020202020202020;
      if (v141 < 1)
        goto LABEL_24;
      v105 = 0;
      v106 = v140 + 1;
      if ((unint64_t)(v140 + 9) < 8)
        v106 = 0;
      v56 = a3;
      do
      {
        if (v106 == v105)
        {
          __break(0xC471u);
          JUMPOUT(0x1983BB1ACLL);
        }
        *((_BYTE *)v104 + v105++ + 8) = 32;
      }
      while (v140 != v105);
LABEL_25:
      *(_BYTE *)(v54 + v55) = 0;
      v57 = v56[23];
      if (v35 < 4)
        v58 = 0;
      else
        v58 = *(_DWORD *)((v35 & 0xFFFFFFFC) + v56[3] - 4);
      v59 = v57 + v56[1];
      v60 = (v35 - v58) + v57;
      if (v57 > v60 || v59 < v60)
        goto LABEL_120;
      v150 = (v35 - v58) + v57;
      if (v49 < 4)
        v62 = 0;
      else
        v62 = *(_DWORD *)((v49 & 0xFFFFFFFC) + v56[3] - 4);
      v63 = (v49 - v62) + v57;
      if (v57 > v63 || v59 < v63)
      {
        __break(0xC471u);
        JUMPOUT(0x1983BB158);
      }
      JSC::tryToDisassemble(&v150, v63 - v60, v57, v59, (const char *)v54, (WTF::PrintStream *)&v151);
      v69 = *(_QWORD *)(StatusReg + 752);
      if (v69)
      {
        if (!(v54 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v54 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v54)) & 1) != 0)
        {
LABEL_39:
          v70 = *(unsigned int *)(v69 + 8000);
          if (v70 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v69, v54, (os_unfair_lock_s *)5, v64, v65, v66, v67, v68);
          }
          else
          {
            *(_QWORD *)(v69 + 8 * v70) = v54 | 0x5000000000000;
            *(_DWORD *)(v69 + 8000) = v70 + 1;
          }
          goto LABEL_41;
        }
        if (v54 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v54 >> 24)
        {
          v64 = 0;
        }
        else
        {
          v64 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v54 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v54) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)v64 == 1)
            goto LABEL_39;
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v69, v54, 1, v64, v65, v66, v67, v68);
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v54, (uint64_t)&bmalloc_heap_config, 1);
      }
LABEL_41:
      JSC::DFG::Disassembler::append((uint64_t)v143, &v151, &v149, v64, v65, v66, v67, v68);
      if (v34 >= *(unsigned int *)(v23 + 220))
      {
        __break(0xC471u);
        JUMPOUT(0x1983BB174);
      }
      v22 = v53;
      v78 = *(uint64_t **)(*(_QWORD *)(v23 + 208) + 8 * v34);
      v21 = v52;
      if ((v149 & 1) != 0 && (v149 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v149 & 0xFFFFFFFF8, v71, v72, v73, v74, v75, v76, v77);
      v79 = *v78;
      if ((*v78 & 1) != 0)
      {
        v95 = *(_QWORD *)(v79 & 0xFFFFFFFF8);
        if ((v79 & 2) != 0
          || ((v96 = *(unsigned int *)((v79 & 0xFFFFFFFF8) + 8), (_DWORD)v96 != 0x3FFFFFFF)
            ? (v97 = (_DWORD)v96 == -1)
            : (v97 = 1),
              v97))
        {
          v98 = 2;
        }
        else if (v96 >> 28)
        {
          v110 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v110 = v95;
          *(_DWORD *)(v110 + 8) = v96;
          v98 = 1;
          v95 = v110;
        }
        else
        {
          v98 = *(_QWORD *)(v79 & 0xFFFFFFFF8);
          v95 = v96 << 36;
        }
        v79 = v95 | v98;
      }
      v149 = v79;
      if (v34 >= *(unsigned int *)(v23 + 220))
      {
        __break(0xC471u);
        JUMPOUT(0x1983BB17CLL);
      }
      if (JSC::DFG::Graph::dumpCodeOrigin(*a2, (WTF::PrintStream *)&v151, v22, &v148, *(JSC::DFG::Node **)(*(_QWORD *)(v23 + 208) + 8 * v34), (JSC::DumpContext *)(a2 + 1)))
      {
        JSC::DFG::Disassembler::append((uint64_t)v143, &v151, &v149, v80, v81, v82, v83, v84);
        if (v34 >= *(unsigned int *)(v23 + 220))
        {
          __break(0xC471u);
          JUMPOUT(0x1983BB194);
        }
        v92 = *(uint64_t **)(*(_QWORD *)(v23 + 208) + 8 * v34);
        if ((v149 & 1) != 0 && (v149 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v149 & 0xFFFFFFFF8, v85, v86, v87, v88, v89, v90, v91);
        v93 = *v92;
        if ((*v92 & 1) != 0)
        {
          v107 = *(_QWORD *)(v93 & 0xFFFFFFFF8);
          if ((v93 & 2) != 0
            || (v108 = *(unsigned int *)((v93 & 0xFFFFFFFF8) + 8), (_DWORD)v108 == 0x3FFFFFFF)
            || (_DWORD)v108 == -1)
          {
            v109 = 2;
          }
          else if (v108 >> 28)
          {
            v111 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v111 = v107;
            *(_DWORD *)(v111 + 8) = v108;
            v109 = 1;
            v107 = v111;
          }
          else
          {
            v109 = *(_QWORD *)(v93 & 0xFFFFFFFF8);
            v107 = v108 << 36;
          }
          v93 = v107 | v109;
        }
        v149 = v93;
      }
      if (v34 >= *(unsigned int *)(v23 + 220))
      {
        __break(0xC471u);
        JUMPOUT(0x1983BB184);
      }
      JSC::DFG::Graph::dump(*a2, (WTF::PrintStream *)&v151, v22, *(JSC::DFG::Node **)(*(_QWORD *)(v23 + 208) + 8 * v34), (JSC::DumpContext *)(a2 + 1));
      v94 = *(unsigned int *)(v23 + 220);
      if (v34 >= v94)
      {
        __break(0xC471u);
        JUMPOUT(0x1983BB18CLL);
      }
      v36 = *(JSC::DFG::Node ***)(v23 + 208);
      v37 = &v36[v34];
      v20 = *v37;
      v148 = *v37;
      ++v34;
      v35 = v49;
      if (v34 >= v94)
      {
        v147 = v49;
        v18 = *a2;
        goto LABEL_100;
      }
    }
    v52 = v21;
    v53 = v22;
    v54 = WTF::fastMalloc((WTF *)9);
    *(_QWORD *)v54 = 0x2020202020202020;
    v55 = 8;
LABEL_24:
    v56 = a3;
    goto LABEL_25;
  }
  v20 = 0;
LABEL_103:
  v145 = *((_DWORD *)a2 + 16);
  JSC::DFG::Disassembler::dumpDisassembly((WTF::PrintStream *)&v151, a3, &v147, &v145, v20);
  JSC::DFG::Disassembler::append((uint64_t)v143, &v151, &v149, v112, v113, v114, v115, v116);
  v117 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v151[4])(&v151);
  WTF::PrintStream::printf(v117, "%s", "    ");
  WTF::PrintStream::printf(v117, "%s", "(End Of Main Path)\n");
  v151[5]((WTF::StringPrintStream *)&v151);
  JSC::DFG::Disassembler::append((uint64_t)v143, &v151, &v149, v118, v119, v120, v121, v122);
  v144 = *((_DWORD *)a2 + 17);
  JSC::DFG::Disassembler::dumpDisassembly((WTF::PrintStream *)&v151, a3, &v147, &v144, 0);
  JSC::DFG::Disassembler::append((uint64_t)v143, &v151, &v149, v123, v124, v125, v126, v127);
  WTF::StringHashDumpContext<JSC::Structure>::dump((uint64_t)(a2 + 1), (uint64_t)&v151, "    ");
  JSC::DFG::Disassembler::append((uint64_t)v143, &v151, &v149, v128, v129, v130, v131, v132);
  if ((v149 & 1) != 0 && (v149 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v149 & 0xFFFFFFFF8, v133, v134, v135, v136, v137, v138, v139);
  if (v152 != (WTF *)v154)
    WTF::fastFree((unint64_t)v152, v133, v134, v135, v136, v137, v138, v139);
}

void JSC::DFG::Disassembler::reportToProfiler(JSC::DFG::Graph **a1, uint64_t a2, _QWORD *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const JSC::CodeOrigin *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v31;
  WTF *v32;
  WTF *v33;
  uint64_t v34;
  __int128 v35;
  WTF *v36;
  WTF *v37;
  WTF *v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _DWORD *v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  _BYTE v47[16];
  WTF *v48;
  WTF *v49;
  uint64_t v50;
  _BYTE v51[16];
  unint64_t v52;
  unsigned int v53;

  JSC::DFG::Disassembler::createDumpList((JSC::DFG::Disassembler *)&v52, a1, a3);
  v12 = v53;
  if (v53)
  {
    v13 = 0;
    v14 = v52;
    while (1)
    {
      v49 = (WTF *)v51;
      v50 = 1;
      v15 = (const JSC::CodeOrigin *)(v14 + 16 * v13);
      if ((*(_BYTE *)v15 & 2) != 0)
      {
        v45 = (WTF *)v47;
        v46 = 1;
      }
      else
      {
        JSC::Profiler::OriginStack::OriginStack((JSC::Profiler::OriginStack *)&v45, *(JSC::Profiler::Database **)(*((_QWORD *)*a1 + 2) + 93016), *((JSC::CodeBlock **)*a1 + 4), v15);
        WTF::Vector<JSC::Profiler::Origin,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unint64_t)&v49, (uint64_t)&v45, v16, v17, v18, v19, v20, v21);
        v29 = v45;
        if (v47 != (_BYTE *)v45 && v45 != 0)
        {
          v45 = 0;
          LODWORD(v46) = 0;
          WTF::fastFree((unint64_t)v29, v22, v23, v24, v25, v26, v27, v28);
        }
        v31 = HIDWORD(v50);
        v45 = (WTF *)v47;
        LODWORD(v46) = 1;
        HIDWORD(v46) = HIDWORD(v50);
        if (HIDWORD(v50) >= 2)
        {
          if (HIDWORD(v50) >> 28)
          {
            __break(0xC471u);
            return;
          }
          v32 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v50)));
          LODWORD(v46) = v31;
          v45 = v32;
          v31 = HIDWORD(v50);
          if (!HIDWORD(v50))
            goto LABEL_17;
LABEL_15:
          v33 = v49;
          v34 = 16 * v31;
          do
          {
            v35 = *(_OWORD *)v33;
            v33 = (WTF *)((char *)v33 + 16);
            *(_OWORD *)v32 = v35;
            v32 = (WTF *)((char *)v32 + 16);
            v34 -= 16;
          }
          while (v34);
          goto LABEL_17;
        }
        v32 = (WTF *)v47;
        if (HIDWORD(v50))
          goto LABEL_15;
      }
LABEL_17:
      v36 = *(WTF **)(v14 + 16 * v13 + 8);
      if (v36)
        ++*(_DWORD *)v36;
      v48 = v36;
      JSC::Profiler::Compilation::addDescription(a2, (unint64_t)&v45);
      v37 = v48;
      v48 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 1)
          WTF::fastFree((unint64_t)v37, v5, v6, v7, v8, v9, v10, v11);
        else
          --*(_DWORD *)v37;
      }
      v38 = v45;
      if (v47 != (_BYTE *)v45 && v45)
      {
        v45 = 0;
        LODWORD(v46) = 0;
        WTF::fastFree((unint64_t)v38, v5, v6, v7, v8, v9, v10, v11);
      }
      v39 = v49;
      if (v51 != (_BYTE *)v49 && v49)
      {
        v49 = 0;
        LODWORD(v50) = 0;
        WTF::fastFree((unint64_t)v39, v5, v6, v7, v8, v9, v10, v11);
      }
      if (++v13 == v12)
      {
        v40 = 0;
        v41 = 16 * v12;
        do
        {
          v42 = (uint64_t *)(v14 + v40);
          v43 = *(_DWORD **)(v14 + v40 + 8);
          *(_QWORD *)(v14 + v40 + 8) = 0;
          if (v43)
          {
            if (*v43 == 1)
              WTF::fastFree((unint64_t)v43, v5, v6, v7, v8, v9, v10, v11);
            else
              --*v43;
          }
          v44 = *v42;
          if ((*v42 & 1) != 0 && (v44 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v44 & 0xFFFFFFFF8, v5, v6, v7, v8, v9, v10, v11);
          v40 += 16;
        }
        while (v41 != v40);
        goto LABEL_41;
      }
    }
  }
  v14 = v52;
LABEL_41:
  if (v14)
    WTF::fastFree(v14, v5, v6, v7, v8, v9, v10, v11);
}

void JSC::DFG::Disassembler::append(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  const void *v12;
  size_t v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  const void *v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;

  v11 = *a3;
  if ((*a3 & 1) != 0)
  {
    v28 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v29 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v29 != 0x3FFFFFFF)
        ? (v30 = (_DWORD)v29 == -1)
        : (v30 = 1),
          v30))
    {
      v31 = 2;
    }
    else if (v29 >> 28)
    {
      v38 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v38 = v28;
      *(_DWORD *)(v38 + 8) = v29;
      v31 = 1;
      v28 = v38;
    }
    else
    {
      v31 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v28 = v29 << 36;
    }
    v32 = (const void *)a2[1];
    if (v32)
    {
      v33 = a2[2];
      if (v33 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x1983BB71CLL);
      }
      if (v33 == -17)
        goto LABEL_60;
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)(v33 + 17));
      *(_DWORD *)v14 = 1;
      v14[1] = v33;
      memcpy(v14 + 2, v32, v33);
      *((_BYTE *)v14 + v33 + 16) = 0;
    }
    else
    {
      v14 = 0;
    }
    v16 = v28 | v31;
    v15 = ((v28 | v31) & 1) == 0;
    v11 = v16;
    if ((v16 & 1) != 0)
    {
      v34 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
      if ((v16 & 2) != 0
        || ((v35 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v35 != 0x3FFFFFFF)
          ? (v36 = (_DWORD)v35 == -1)
          : (v36 = 1),
            v36))
      {
        v37 = 2;
      }
      else if (v35 >> 28)
      {
        v39 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v39 = v34;
        *(_DWORD *)(v39 + 8) = v35;
        v37 = 1;
        v34 = v39;
      }
      else
      {
        v37 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
        v34 = v35 << 36;
      }
      v11 = v34 | v37;
    }
    v40 = v11;
    if (v14)
      goto LABEL_6;
    v17 = 1;
  }
  else
  {
    v12 = (const void *)a2[1];
    if (v12)
    {
      v13 = a2[2];
      if (v13 < 0xFFFFFFFFFFFFFFF0)
      {
        if (v13 == -17)
        {
          __break(0xC471u);
          JUMPOUT(0x1983BB714);
        }
        v14 = (_QWORD *)WTF::fastMalloc((WTF *)(v13 + 17));
        v15 = 1;
        *(_DWORD *)v14 = 1;
        v14[1] = v13;
        memcpy(v14 + 2, v12, v13);
        *((_BYTE *)v14 + v13 + 16) = 0;
        v40 = v11;
        v16 = v11;
LABEL_6:
        v17 = 0;
        ++*(_DWORD *)v14;
        goto LABEL_8;
      }
LABEL_60:
      __break(0xC471u);
      JUMPOUT(0x1983BB70CLL);
    }
    v14 = 0;
    v40 = *a3;
    v17 = 1;
    v16 = v11;
    v15 = 1;
  }
LABEL_8:
  v41 = (WTF *)v14;
  v18 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
  {
    v19 = (uint64_t *)WTF::Vector<JSC::DFG::Disassembler::DumpedOp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v18 + 1, (unint64_t)&v40);
    v20 = *(unsigned int *)(a1 + 12);
    v21 = (_QWORD *)(*(_QWORD *)a1 + 16 * v20);
    v22 = *v19;
    *v19 = 0;
    *v21 = v22;
    v23 = v19[1];
    v19[1] = 0;
    v21[1] = v23;
    v24 = v41;
    *(_DWORD *)(a1 + 12) = v20 + 1;
    v41 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        WTF::fastFree((unint64_t)v24, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      else
        --*(_DWORD *)v24;
    }
  }
  else
  {
    v25 = *(_QWORD *)a1;
    v40 = 0;
    v26 = (uint64_t *)(v25 + 16 * v18);
    *v26 = v11;
    v26[1] = (uint64_t)v14;
    *(_DWORD *)(a1 + 12) = v18 + 1;
    v41 = 0;
  }
  if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v40 & 0xFFFFFFFF8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if ((v17 & 1) != 0)
  {
LABEL_17:
    if (v15)
      goto LABEL_18;
    goto LABEL_21;
  }
  if (*(_DWORD *)v14 != 1)
  {
    --*(_DWORD *)v14;
    goto LABEL_17;
  }
  WTF::fastFree((unint64_t)v14, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (v15)
    goto LABEL_18;
LABEL_21:
  if ((v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_18:
  v27 = *a3;
  if ((*a3 & 1) != 0 && (v27 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v27 & 0xFFFFFFFF8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  *a3 = 2;
  a2[2] = 0;
  *(_BYTE *)a2[1] = 0;
}

void JSC::DFG::Disassembler::dumpDisassembly(WTF::PrintStream *a1, _QWORD *a2, int *a3, int *a4, _QWORD *a5)
{
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  int v18;
  int v19;
  unint64_t v20;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  if (!a5)
    goto LABEL_4;
  v9 = (_QWORD *)(*a5 & 0xFFFFFFFF8);
  if ((*a5 & 1) != 0)
  {
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_4;
  }
  else if (!v9)
  {
LABEL_4:
    v10 = (char *)WTF::fastMalloc((WTF *)9);
    *(_QWORD *)v10 = 0x2020202020202020;
    v11 = 8;
    goto LABEL_5;
  }
  LODWORD(v29) = 0;
  do
  {
    v30 = v9[2];
    v9 = (_QWORD *)(v30 & 0xFFFFFFFF8);
    if ((v30 & 1) != 0)
      v9 = (_QWORD *)*v9;
    v29 = (v29 + 2);
  }
  while (v9);
  v31 = (WTF *)((int)v29 + 9);
  if ((unint64_t)v31 >> 32)
  {
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x1983BB858);
  }
  v11 = (int)v29 + 8;
  v32 = (char *)WTF::fastMalloc(v31);
  v10 = v32;
  *(_QWORD *)v32 = 0x2020202020202020;
  if ((int)v29 >= 1)
  {
    v33 = 0;
    v34 = (int)v29 + 1;
    if ((unint64_t)((int)v29 + 9) < 8)
      v34 = 0;
    do
    {
      if (v34 == v33)
      {
        __break(0xC471u);
        JUMPOUT(0x1983BB910);
      }
      v32[v33++ + 8] = 32;
    }
    while (v29 != v33);
  }
LABEL_5:
  v10[v11] = 0;
  v12 = a2[23];
  v13 = v12 + a2[1];
  v14 = *a3;
  if (*a3 < 4)
    v15 = 0;
  else
    v15 = *(_DWORD *)((v14 & 0xFFFFFFFC) + a2[3] - 4);
  v16 = (v14 - v15) + v12;
  if (v12 > v16 || v13 < v16)
    goto LABEL_35;
  v35 = v16;
  v18 = *a4;
  if (*a4 < 4)
    v19 = 0;
  else
    v19 = *(_DWORD *)((v18 & 0xFFFFFFFC) + a2[3] - 4);
  v20 = (v18 - v19) + v12;
  if (v12 > v20 || v13 < v20)
  {
    __break(0xC471u);
    JUMPOUT(0x1983BB878);
  }
  *a3 = v18;
  JSC::tryToDisassemble(&v35, v20 - v16, v12, v13, v10, a1);
  WTF::fastFree((unint64_t)v10, v22, v23, v24, v25, v26, v27, v28);
}

uint64_t JSC::DFG::doesGC(JSC::DFG *this, JSC::DFG::Graph *a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  BOOL v43;
  unsigned int v44;
  uint64_t v45;

  if ((JSC::DFG::clobbersHeap(this, a2, a3, a4, a5, a6, a7, a8) & 1) != 0)
    return 1;
  v10 = *((unsigned __int16 *)a2 + 9);
  result = 0;
  switch(*((_WORD *)a2 + 9))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x2A:
    case 0x2C:
    case 0x2E:
    case 0x30:
    case 0x31:
    case 0x33:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x60:
    case 0x61:
    case 0x64:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x90:
    case 0x93:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9D:
    case 0x9E:
    case 0x9F:
    case 0xA0:
    case 0xA1:
    case 0xA2:
    case 0xA3:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA9:
    case 0xAA:
    case 0xAB:
    case 0xAC:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB2:
    case 0xB3:
    case 0xB4:
    case 0xB5:
    case 0xB6:
    case 0xB7:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBE:
    case 0xBF:
    case 0xC0:
    case 0xC2:
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCE:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
    case 0xE3:
    case 0xE4:
    case 0xEB:
    case 0xEC:
    case 0xEF:
    case 0x101:
    case 0x102:
    case 0x113:
    case 0x116:
    case 0x117:
    case 0x118:
    case 0x11A:
    case 0x11B:
    case 0x11C:
    case 0x11D:
    case 0x11E:
    case 0x120:
    case 0x122:
    case 0x123:
    case 0x126:
    case 0x127:
    case 0x128:
    case 0x129:
    case 0x12A:
    case 0x12B:
    case 0x12C:
    case 0x12D:
    case 0x12E:
    case 0x12F:
    case 0x130:
    case 0x132:
    case 0x133:
    case 0x134:
    case 0x135:
    case 0x136:
    case 0x137:
    case 0x138:
    case 0x139:
    case 0x13A:
    case 0x154:
    case 0x157:
    case 0x158:
    case 0x15C:
    case 0x15D:
    case 0x15E:
    case 0x15F:
    case 0x160:
    case 0x163:
    case 0x164:
    case 0x166:
    case 0x16C:
    case 0x16D:
    case 0x16F:
    case 0x175:
    case 0x178:
    case 0x179:
    case 0x17A:
    case 0x17C:
    case 0x17E:
    case 0x17F:
    case 0x189:
    case 0x18A:
    case 0x18B:
    case 0x18C:
    case 0x18D:
    case 0x18E:
    case 0x18F:
    case 0x190:
    case 0x191:
    case 0x192:
    case 0x193:
    case 0x197:
    case 0x19A:
    case 0x1A2:
    case 0x1A3:
    case 0x1A4:
    case 0x1A5:
    case 0x1A6:
    case 0x1A7:
    case 0x1A8:
    case 0x1A9:
    case 0x1AA:
    case 0x1AB:
    case 0x1AC:
    case 0x1AD:
    case 0x1AE:
    case 0x1AF:
      return result;
    case 0x52:
    case 0x53:
      v29 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      v30 = v29 >= 0x35;
      v31 = 0xDFFFFFFFFFFFDLL;
      goto LABEL_73;
    case 0x5C:
    case 0x5D:
    case 0x184:
      if (v10 == 264)
      {
        v20 = *((_DWORD *)a2 + 18);
      }
      else if (v10 == 146)
      {
        LOBYTE(v20) = *((_BYTE *)a2 + 80);
      }
      else
      {
        LOBYTE(v20) = *((_BYTE *)a2 + 72);
      }
      return v20 == 5;
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
      if ((*(_DWORD *)(*((_QWORD *)this + 3) + 16) & 0xFFFFFFFE) != 4)
      {
        v27 = *((unsigned __int8 *)a2 + 72);
        v28 = v27 > 0xD || ((1 << v27) & 0x3020) == 0;
        if (v28 && v27 - 14 < 7)
          return 1;
      }
      return 0;
    case 0x9C:
      v38 = *((_QWORD *)a2 + 9);
      v39 = *(unsigned int *)(v38 + 20);
      v40 = (v39 << 6) - 64;
      while (1)
      {
        v41 = v39 != 0;
        if (!v39)
          break;
        if (--v39 >= (unint64_t)*(unsigned int *)(v38 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x1983BBEA8);
        }
        v42 = v40 - 64;
        v43 = JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)(*(_QWORD *)(v38 + 8) + v40));
        v40 = v42;
        result = v41;
        if (v43)
          return result;
      }
      return 0;
    case 0xE6:
      if (*(unsigned __int16 *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u)
        return 1;
      return **(_QWORD **)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x48) < 0xFFFE000000000000
          || (**(_QWORD **)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x48) & 0xFFFFFF00) != 0;
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
    case 0xED:
      v17 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) <= 0x1B)
      {
        if ((_DWORD)v17 != 1)
        {
          if ((_DWORD)v17 == 20)
          {
LABEL_27:
            v22 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
            v23 = 0x50000000000000;
            return v22 != v23;
          }
          goto LABEL_54;
        }
        v18 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
        v19 = 0x4000000000000;
      }
      else
      {
        switch((_DWORD)v17)
        {
          case 0x34:
            v18 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
            v19 = 0xD0000000000000;
            break;
          case 0x31:
            v18 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
            v19 = 0xC4000000000000;
            break;
          case 0x1C:
            v18 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
            v19 = 0x70000000000000;
            break;
          default:
            goto LABEL_54;
        }
      }
      if (v18 == v19)
        return 0;
LABEL_54:
      if (v10 != 237)
        return 1;
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) > 0x12)
      {
        if ((_DWORD)v17 == 19)
        {
          v22 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v23 = 0x2C000000000000;
        }
        else
        {
          if ((_DWORD)v17 != 25)
            return 1;
          v22 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v23 = 0x64000000000000;
        }
        return v22 != v23;
      }
      if ((_DWORD)v17 == 6)
      {
        v22 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
        v23 = 0x18000000000000;
        return v22 != v23;
      }
      if ((_DWORD)v17 != 11)
        return 1;
      return (((*((_QWORD *)a2 + 4) & 0xFC000000000000) - 0x2C000000000000) & 0xFFDC000000000000) != 0;
    case 0xEE:
      v12 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) > 0x13)
      {
        switch((int)v12)
        {
          case '\'':
            goto LABEL_27;
          case '(':
          case ')':
          case '*':
          case ',':
          case '.':
          case '2':
          case '3':
            return 1;
          case '+':
            v22 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
            v23 = 0xB4000000000000;
            return v22 != v23;
          case '-':
            v22 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
            v23 = 0xAC000000000000;
            return v22 != v23;
          case '/':
            v13 = *((_QWORD *)a2 + 4);
            v14 = v13 & 0xFC000000000000;
            v15 = 0xBC000000000000;
            goto LABEL_7;
          case '0':
            v13 = *((_QWORD *)a2 + 4);
            v14 = v13 & 0xFC000000000000;
            v15 = 0xC0000000000000;
            goto LABEL_7;
          case '1':
            v22 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
            v23 = 0xC4000000000000;
            return v22 != v23;
          case '4':
            v22 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
            v23 = 0xD0000000000000;
            return v22 != v23;
          default:
            if ((_DWORD)v12 == 20)
            {
              v24 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
              return v24 != 0x50000000000000 && v24 != 0x9C000000000000;
            }
            if ((_DWORD)v12 != 25)
              return 1;
            v13 = *((_QWORD *)a2 + 4);
            v14 = v13 & 0xFC000000000000;
            v15 = 0x64000000000000;
            break;
        }
        goto LABEL_7;
      }
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) > 5)
      {
        if ((_DWORD)v12 == 6)
        {
          v13 = *((_QWORD *)a2 + 4);
          v14 = v13 & 0xFC000000000000;
          v15 = 0x18000000000000;
LABEL_7:
          v16 = v14 != v15;
          return (v13 & 0xFC000000000000) != 0 && v16;
        }
        if ((_DWORD)v12 == 11)
          return (*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x2C000000000000
              && (*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0;
        return 1;
      }
      if ((_DWORD)v12)
      {
        if ((_DWORD)v12 != 1)
          return 1;
        v22 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
        v23 = 0x4000000000000;
        return v22 != v23;
      }
      v26 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
      if (v26 == 0x18000000000000)
        return 0;
      result = 0;
      if (v26 != 0x2C000000000000)
        return v26 != 0x64000000000000 && (unint64_t)(v26 - 0xC4000000000000) < 0xFFF8000000000000;
      return result;
    case 0xF0:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0xC4000000000000)
        return 1;
      return (*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0xC4000000000000;
    case 0x131:
      v33 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
      v34 = 0xC4000000000000;
      return v33 != v34;
    case 0x13E:
    case 0x145:
      v29 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      v30 = v29 >= 0x27;
      v31 = 0x1FFFBFFFFFLL;
LABEL_73:
      v32 = (v31 >> v29) & 1;
      if (v30)
        return 1;
      else
        return v32;
    case 0x142:
    case 0x143:
      return (*((_BYTE *)a2 + 30) & 0xFC) == 0;
    case 0x146:
      v33 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
      v34 = 0x70000000000000;
      return v33 != v34;
    case 0x16E:
      result = 0;
      switch(*(_DWORD *)(*((_QWORD *)a2 + 9) + 40))
      {
        case 0:
        case 3:
          return result;
        case 1:
          return 1;
        case 2:
          v33 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
          v34 = 0x50000000000000;
          return v33 != v34;
        default:
          __break(0xC471u);
          JUMPOUT(0x1983BBE70);
      }
    case 0x188:
      v35 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      v30 = v35 >= 0x1C;
      v36 = (0x5FFF7BDu >> v35) & 1;
      if (v30)
        return 1;
      else
        return v36;
    case 0x198:
      v45 = *((_QWORD *)a2 + 4);
      goto LABEL_103;
    case 0x199:
      v44 = *((_DWORD *)a2 + 6) + 1;
      if (*((_DWORD *)this + 41) <= v44)
      {
        __break(0xC471u);
        JUMPOUT(0x1983BBEB0);
      }
      v45 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * v44);
LABEL_103:
      v33 = v45 & 0xFC000000000000;
      v34 = 0x2C000000000000;
      return v33 != v34;
    case 0x1B1:
      __break(0xC471u);
      JUMPOUT(0x1983BBE10);
    default:
      return 1;
  }
}

uint64_t JSC::DFG::getNumCompilations(JSC::DFG *this)
{
  return _MergedGlobals_32;
}

uint64_t JSC::DFG::compile(JSC::VM *a1, JSC::CodeBlock *a2, uint64_t a3, unsigned int a4, int a5, uint64_t *a6, uint64_t a7)
{
  _DWORD *v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  JSC::JITPlan *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unsigned int *v31;
  JSC::TypeProfilerLog *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  JSC::JITPlan *v51;
  unsigned int v52;
  char v53;
  WTF::StringImpl **v54;
  WTF::StringImpl *v55;

  v12 = *(_DWORD **)a7;
  v13 = *(_DWORD *)(*(_QWORD *)a7 + 8);
  *(_DWORD *)(*(_QWORD *)a7 + 8) = v13 + 1;
  v52 = a4;
  if (dword_1ECF4C2C8 >= 2)
  {
    v50 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 80) + 12);
    if (qword_1ECF4C2D8 > v50 || HIDWORD(qword_1ECF4C2D8) < v50)
    {
      if (dword_1ECF4C2C8 != 2)
        goto LABEL_2;
    }
    else if (dword_1ECF4C2C8 == 2)
    {
      goto LABEL_2;
    }
LABEL_33:
    if (v13)
    {
      v30 = 0;
      v12[2] = v13;
    }
    else
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
      return 0;
    }
    return v30;
  }
LABEL_2:
  v14 = atomic_load(&qword_1ECF58670);
  if (v14 != -1)
  {
    v55 = (WTF::StringImpl *)&v53;
    v54 = &v55;
    std::__call_once(&qword_1ECF58670, &v54, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::DFG::ensureGlobalDFGAllowlist(void)::$_0 &&>>);
  }
  if ((JSC::FunctionAllowlist::contains((JSC::FunctionAllowlist *)&unk_1ECF58678, a2) & 1) == 0)
  {
    v13 = v12[2] - 1;
    goto LABEL_33;
  }
  ++_MergedGlobals_32;
  v15 = v52;
  if (qword_1ECF4C32A | byte_1ECF4C323
    || (BYTE1(qword_1ECF4C32A) ? (v16 = (v52 & 0xFFFFFFFE) == 4) : (v16 = 0),
        !v16 ? (v17 = BYTE2(qword_1ECF4C32A) == 0) : (v17 = 0),
        !v17))
  {
    LODWORD(v55) = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 80) + 12);
    WTF::dataLog<char [23],JSC::CodeBlock,char [7],JSC::JITCompilationMode,char [23],unsigned int,char [2]>((uint64_t)a2, (int *)&v52, &v55);
  }
  if (*((_QWORD *)a1 + 11646))
  {
    v33 = (JSC::TypeProfilerLog *)*((_QWORD *)a1 + 11647);
    WTF::StringImpl::createWithoutCopyingNonEmpty((uint64_t)"Preparing for DFG compilation.", 30, (uint64_t *)&v55);
    JSC::TypeProfilerLog::processLogEntries(v33, a1, (const WTF::String *)&v55, v34, v35, v36, v37, v38);
    v46 = v55;
    v55 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v39, v40, v41, v42, v43, v44, v45);
      else
        *(_DWORD *)v46 -= 2;
    }
  }
  v18 = (JSC::JITPlan *)WTF::fastMalloc((WTF *)0x180);
  v19 = *(_DWORD **)(JSC::DFG::Plan::Plan((uint64_t)v18, (uint64_t)a2, a3, v15, a5, a6) + 376);
  *((_QWORD *)v18 + 47) = v12;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
  }
  v27 = atomic_load(&JSC::JITWorklist::ensureGlobalWorklist(void)::once);
  if (v27 != -1)
  {
    v55 = (WTF::StringImpl *)&v53;
    v54 = &v55;
    std::__call_once(&JSC::JITWorklist::ensureGlobalWorklist(void)::once, &v54, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JITWorklist::ensureGlobalWorklist(void)::$_0 &&>>);
  }
  v28 = JSC::theGlobalJITWorklist;
  if (byte_1ECF4C464)
  {
    if (qword_1ECF4C32A | byte_1ECF4C323
      || (BYTE1(qword_1ECF4C32A) ? (v29 = (v52 & 0xFFFFFFFE) == 4) : (v29 = 0), v29 || BYTE2(qword_1ECF4C32A)))
    {
      v55 = (WTF::StringImpl *)JSC::JITWorklist::queueLength((JSC::JITWorklist *)JSC::theGlobalJITWorklist, v20, v21, v22, v23, v24, v25, v26);
      WTF::dataLog<char [30],JSC::CodeBlock,char [20],unsigned long,char [3],char [2]>((uint64_t)a2, &v55);
    }
  }
  v51 = v18;
  v30 = JSC::JITWorklist::enqueue(v28, &v51, v21, v22, v23, v24, v25, v26);
  v31 = (unsigned int *)v51;
  v51 = 0;
  if (v31)
  {
    v47 = v31 + 2;
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      atomic_store(1u, v31 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
    }
  }
  return v30;
}

uint64_t JSC::DFG::Edge::dump(JSC::DFG::Edge *this, WTF::PrintStream *a2)
{
  unint64_t v4;
  WTF::PrintStream *v5;
  WTF::PrintStream *v6;
  unint64_t v7;
  WTF::PrintStream *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  WTF::PrintStream *v13;
  const char *v14;
  WTF::PrintStream *v15;

  v4 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x1000000000000) == 0)
  {
    v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v5, "%s", "Check:");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v4 = *(_QWORD *)this;
  }
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::printInternal((uint64_t)v6, (v4 >> 50) & 0x3F);
  WTF::PrintStream::printf(v6, "%s", ":");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v7 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x2000000000000) != 0)
  {
    v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v8, "%s", "Kill:");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v7 = *(_QWORD *)this;
  }
  v9 = v7 & 0xFF00FFFFFFFFFFFFLL;
  v10 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v11 = v10;
  if (!v9)
  {
    v14 = "-";
    goto LABEL_11;
  }
  v12 = *(_DWORD *)(v9 + 20);
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  WTF::PrintStream::printf(v13, "%s", "D@");
  WTF::PrintStream::printf(v13, "%u", v12);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  if ((*(_DWORD *)(v9 + 56) & 7) == 3)
  {
    v14 = "<Double>";
    goto LABEL_11;
  }
  if ((*(_DWORD *)(v9 + 56) & 7) == 5)
  {
    v14 = "<Int52>";
LABEL_11:
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    WTF::PrintStream::printf(v15, "%s", v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  }
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

_QWORD *JSC::DFG::FailedFinalizer::FailedFinalizer(_QWORD *result, uint64_t a2)
{
  *result = off_1E358C5B0;
  result[1] = a2;
  return result;
}

uint64_t JSC::DFG::FailedFinalizer::codeSize(JSC::DFG::FailedFinalizer *this)
{
  return 0;
}

uint64_t JSC::DFG::FailedFinalizer::finalize(JSC::DFG::FailedFinalizer *this)
{
  return 0;
}

void JSC::DFG::Finalizer::jitCode(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t JSC::DFG::FailedFinalizer::isFailed(JSC::DFG::FailedFinalizer *this)
{
  return 1;
}

unint64_t WTF::Vector<JSC::Profiler::Origin,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  char *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;

  v8 = result;
  if (a2 == result)
    return v8;
  v10 = *(_DWORD *)(result + 12);
  v11 = *(_DWORD *)(a2 + 12);
  if (v10 > v11)
  {
    *(_DWORD *)(result + 12) = v11;
LABEL_29:
    v21 = *(char **)v8;
    if (v11)
    {
      memmove(v21, *(const void **)a2, 16 * v11 - 4);
      v11 = *(_DWORD *)(v8 + 12);
      v21 = *(char **)v8;
    }
    v22 = *(unsigned int *)(a2 + 12);
    if (v11 != (_DWORD)v22)
    {
      v23 = &v21[16 * v11];
      v24 = (__int128 *)(*(_QWORD *)a2 + 16 * v11);
      v25 = 16 * v22 - 16 * v11;
      do
      {
        v26 = *v24++;
        *(_OWORD *)v23 = v26;
        v23 += 16;
        v25 -= 16;
      }
      while (v25);
      v11 = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(v8 + 12) = v11;
    return v8;
  }
  v12 = *(_DWORD *)(result + 8);
  if (v11 <= v12)
    goto LABEL_28;
  if (v12)
  {
    if (v10)
      *(_DWORD *)(result + 12) = 0;
    result = *(_QWORD *)result;
    if (v8 + 16 != *(_QWORD *)v8 && result)
    {
      *(_QWORD *)v8 = 0;
      *(_DWORD *)(v8 + 8) = 0;
      WTF::fastFree(result, (void *)a2, a3, a4, a5, a6, a7, a8);
      result = *(_QWORD *)v8;
    }
    if (result)
    {
      v13 = *(_DWORD *)(v8 + 8);
    }
    else
    {
      *(_QWORD *)v8 = v8 + 16;
      v13 = 1;
      *(_DWORD *)(v8 + 8) = 1;
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = *(unsigned int *)(a2 + 12);
  if (v13 >= v14)
  {
LABEL_28:
    v11 = *(_DWORD *)(v8 + 12);
    goto LABEL_29;
  }
  v15 = *(_QWORD *)v8;
  v16 = *(unsigned int *)(v8 + 12);
  if (v14 < 2)
  {
    v17 = (_OWORD *)(v8 + 16);
    *(_QWORD *)v8 = v8 + 16;
    *(_DWORD *)(v8 + 8) = 1;
    goto LABEL_20;
  }
  if (!(v14 >> 28))
  {
    v17 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v14));
    *(_DWORD *)(v8 + 8) = v14;
    *(_QWORD *)v8 = v17;
LABEL_20:
    if ((_DWORD)v16)
    {
      v18 = 16 * v16;
      v19 = (__int128 *)v15;
      do
      {
        v20 = *v19++;
        *v17++ = v20;
        v18 -= 16;
      }
      while (v18);
    }
    if (v8 + 16 != v15 && v15)
    {
      if (*(_QWORD *)v8 == v15)
      {
        *(_QWORD *)v8 = 0;
        *(_DWORD *)(v8 + 8) = 0;
      }
      WTF::fastFree(v15, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
    goto LABEL_28;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::dataLog<char [23],JSC::CodeBlock,char [7],JSC::JITCompilationMode,char [23],unsigned int,char [2]>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  uint64_t v9;
  const char *v10;
  WTF::PrintStream *v11;
  uint64_t result;
  char v13;
  char **v14;
  char *v15;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "DFG(Driver) compiling ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v8, "%s", " with ");
  v9 = *a2;
  if (v9 >= 6)
  {
    result = 57;
    __break(0xC471u);
  }
  else
  {
    v10 = off_1E358C5E0[v9];
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v11, "%s", v10);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
    WTF::PrintStream::printf(v8, "%s", ", instructions size = ");
    WTF::PrintStream::printf(v8, "%u", *a3);
    WTF::PrintStream::printf(v8, "%s", "\n");
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  return result;
}

JSC::FunctionAllowlist *std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::DFG::ensureGlobalDFGAllowlist(void)::$_0 &&>>()
{
  return JSC::FunctionAllowlist::FunctionAllowlist((JSC::FunctionAllowlist *)&unk_1ECF58678, *((const char **)&xmmword_1ECF4C2F8 + 1));
}

uint64_t WTF::dataLog<char [30],JSC::CodeBlock,char [20],unsigned long,char [3],char [2]>(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "Deferring DFG compilation of ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v6, "%s", " with queue length ");
  WTF::PrintStream::printf(v6, "%lu", *a2);
  WTF::PrintStream::printf(v6, "%s", ".\n");
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

unint64_t WTF::Vector<JSC::DFG::Disassembler::DumpedOp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<JSC::DFG::Disassembler::DumpedOp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<JSC::DFG::Disassembler::DumpedOp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<JSC::DFG::Disassembler::DumpedOp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(_QWORD *)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v14 = (_QWORD *)v6;
        v15 = (uint64_t *)(v4 + 16 * v5);
        v16 = (uint64_t *)v4;
        do
        {
          v17 = *v16;
          v18 = v16[1];
          *v16 = 0;
          v16[1] = 0;
          *v14 = v17;
          v14[1] = v18;
          v19 = (_DWORD *)v16[1];
          v16[1] = 0;
          if (v19)
          {
            if (*v19 == 1)
              WTF::fastFree((unint64_t)v19, v7, v8, v9, v10, v11, v12, v13);
            else
              --*v19;
          }
          v20 = *v16;
          if ((*v16 & 1) != 0 && (v20 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v20 & 0xFFFFFFFF8, v7, v8, v9, v10, v11, v12, v13);
          v16 += 2;
          v14 += 2;
        }
        while (v16 != v15);
      }
      if (v4)
      {
        if (*(_QWORD *)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

uint64_t JSC::DFG::runPhase<JSC::DFG::FixupPhase>(uint64_t a1)
{
  int64x2_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  char v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  _BYTE v32[136];

  v20 = -1;
  v21 = -1;
  v22 = 0;
  v23 = 256;
  v24 = a1;
  v25 = "fixup";
  v26 = 6;
  v27 = 0;
  v28 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v20);
  v29 = a1;
  v30 = (WTF *)v32;
  v31 = 8;
  v16 = JSC::DFG::runAndLog<JSC::DFG::FixupPhase>((uint64_t)&v20, v2, v3, v4, v5, v6, v7, v8);
  v17 = v30;
  if (v32 != (_BYTE *)v30 && v30)
  {
    v30 = 0;
    LODWORD(v31) = 0;
    WTF::fastFree((unint64_t)v17, v9, v10, v11, v12, v13, v14, v15);
  }
  if (HIBYTE(qword_1ECF4C32A) && !v27)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v20, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      WTF::fastFree((unint64_t)v18, v9, v10, v11, v12, v13, v14, v15);
    else
      --*(_DWORD *)v18;
  }
  return v16;
}

void JSC::DFG::FlowIndexing::recompute(JSC::DFG::FlowIndexing *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  const void **v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  const void *v33;
  void *v34;
  int *v35;
  unsigned int v36;

  v9 = *(unsigned int *)(*(_QWORD *)this + 1044);
  v10 = (const void **)((char *)this + 16);
  v11 = *((unsigned int *)this + 7);
  if (v11 < v9)
  {
    v29 = *((unsigned int *)this + 6);
    if (v29 < v9)
    {
      v30 = v29 + (v29 >> 2);
      if (v30 >= 0x10)
        v31 = v30 + 1;
      else
        v31 = 16;
      if (v31 <= v9)
        v32 = *(unsigned int *)(*(_QWORD *)this + 1044);
      else
        v32 = v31;
      if (v32 >> 30)
      {
        __break(0xC471u);
LABEL_51:
        JUMPOUT(0x1983BD540);
      }
      v33 = *v10;
      v34 = (void *)WTF::fastMalloc((WTF *)(4 * v32));
      *((_DWORD *)this + 6) = v32;
      *((_QWORD *)this + 2) = v34;
      memcpy(v34, v33, 4 * v11);
      if (v33)
      {
        if (*v10 == v33)
        {
          *((_QWORD *)this + 2) = 0;
          *((_DWORD *)this + 6) = 0;
        }
        WTF::fastFree((unint64_t)v33, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  *((_DWORD *)this + 7) = v9;
  v12 = v9;
  if (*((_DWORD *)this + 6) < v9)
  {
    WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v10, v9);
    v12 = *((_DWORD *)this + 7);
  }
  v13 = (char *)*v10;
  if (v12)
  {
    memset(v13, 255, 4 * v12);
    v14 = *((unsigned int *)this + 7);
  }
  else
  {
    v14 = 0;
  }
  if (v9 != v14)
    memset(&v13[4 * v14], 255, 4 * (v9 - v14));
  *((_DWORD *)this + 7) = v9;
  *((_DWORD *)this + 11) = 0;
  *((_DWORD *)this + 2) = v9;
  v15 = *(_QWORD *)this;
  v16 = *(unsigned int *)(*(_QWORD *)this + 60);
  if ((_DWORD)v16)
  {
    v17 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v17))
    {
      if (v16 == ++v17)
        return;
    }
    if ((_DWORD)v16 != (_DWORD)v17)
    {
      v18 = *(_DWORD *)(*(_QWORD *)this + 60);
      v19 = v9;
      do
      {
        if (v18 <= v17)
        {
          __break(0xC471u);
          JUMPOUT(0x1983BD58CLL);
        }
        v20 = *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v17);
        v21 = *(unsigned int *)(v20 + 220);
        if ((_DWORD)v21)
        {
          v22 = *(_QWORD *)(v20 + 208);
          v23 = 8 * v21;
          do
          {
            if (*(_WORD *)(*(_QWORD *)v22 + 18) == 27)
            {
              v36 = *(_DWORD *)(*(_QWORD *)v22 + 20);
              v24 = v36;
              *((_DWORD *)this + 2) = v19 + 1;
              *(_DWORD *)(*((_QWORD *)this + 2) + 4 * v24) = v19;
              v25 = *((unsigned int *)this + 11);
              if ((_DWORD)v25 == *((_DWORD *)this + 10))
              {
                v35 = (int *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 32, v25 + 1, (unint64_t)&v36);
                v25 = *((unsigned int *)this + 11);
                v26 = *((_QWORD *)this + 4);
                v27 = *v35;
              }
              else
              {
                v26 = *((_QWORD *)this + 4);
                v27 = v36;
              }
              *(_DWORD *)(v26 + 4 * v25) = v27;
              v28 = (*((_DWORD *)this + 11) + 1);
              *((_DWORD *)this + 11) = v28;
              if (v28 + v9 != *((_DWORD *)this + 2))
              {
                JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG **)this, (uint64_t)a2, (const WTF::CString *)"./dfg/DFGFlowIndexing.cpp", (const char *)0x43, "void JSC::DFG::FlowIndexing::recompute()", "m_shadowIndexToNodeIndex.size() + numNodeIndices == m_numIndices");
                __break(0xC471u);
                goto LABEL_51;
              }
              if (*(_DWORD *)(v26 + 4 * (v19 - v9)) != v36)
              {
                JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG **)this, (uint64_t)a2, (const WTF::CString *)"./dfg/DFGFlowIndexing.cpp", (const char *)0x44, "void JSC::DFG::FlowIndexing::recompute()", "m_shadowIndexToNodeIndex[shadowIndex - numNodeIndices] == nodeIndex");
                __break(0xC471u);
                JUMPOUT(0x1983BD584);
              }
              v19 = *((_DWORD *)this + 2);
            }
            v22 += 8;
            v23 -= 8;
          }
          while (v23);
          v18 = *(_DWORD *)(v15 + 60);
        }
        v17 = (v17 + 1);
        if (v18 > v17)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v17))
          {
            if (v18 == ++v17)
            {
              LODWORD(v17) = v18;
              break;
            }
          }
        }
      }
      while ((_DWORD)v16 != (_DWORD)v17);
    }
  }
}

void JSC::DFG::Graph::logAssertionFailure(JSC::DFG *a1, uint64_t a2, const WTF::CString *a3, const char *a4, const char *a5, const char *a6)
{
  uint64_t v11;
  const char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  WTF *v21;

  v11 = WTF::fastMalloc((WTF *)0x11);
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = 0;
  v21 = (WTF *)v11;
  *(_BYTE *)(v11 + 16) = 0;
  JSC::DFG::logDFGAssertionFailure(a1, (JSC::DFG::Graph *)&v21, a3, a4, a5, a6, v12);
  v20 = v21;
  v21 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
      WTF::fastFree((unint64_t)v20, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v20;
  }
}

uint64_t JSC::DFG::FlushedAt::dump(JSC::DFG::FlushedAt *this, WTF::PrintStream *a2)
{
  int v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const char *v9;
  WTF::PrintStream *v10;
  _QWORD v12[3];

  v4 = *(unsigned __int8 *)this;
  if (v4 == 7 || v4 == 0)
  {
    v6 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v7 = *(char *)this;
    if (v7 >= 8)
    {
LABEL_12:
      __break(0xC471u);
      JUMPOUT(0x1983BD728);
    }
    goto LABEL_7;
  }
  if (*((_DWORD *)this + 1) == 0x3FFFFFFF)
  {
    v6 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v7 = *(char *)this;
    if (v7 >= 8)
      goto LABEL_12;
LABEL_7:
    v8 = v6;
    v9 = off_1E358E3F0[v7];
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    WTF::PrintStream::printf(v10, "%s", v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v12[0] = (char *)this + 4;
  v12[1] = ":";
  v12[2] = this;
  return WTF::PrintStream::atomically<void WTF::PrintStream::print<JSC::VirtualRegister,char [2],JSC::DFG::FlushFormat>(JSC::VirtualRegister,char [2],JSC::DFG::FlushFormat const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)a2, (uint64_t)v12);
}

__int128 *JSC::DFG::FrozenValue::emptySingleton(JSC::DFG::FrozenValue *this)
{
  {
    JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
    LODWORD(qword_1EE342DB8) = 0;
  }
  return &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
}

uint64_t JSC::DFG::FrozenValue::dumpInContext(JSC::Structure **this, WTF::PrintStream *a2, JSC::DumpContext *a3)
{
  BOOL v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  int v9;
  const char *v10;
  WTF::PrintStream *v11;
  uint64_t result;

  if (*this)
    v6 = ((unint64_t)*this & 0xFFFE000000000002) == 0;
  else
    v6 = 0;
  if (!v6)
    return JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)this, a2, a3, this[1]);
  v7 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v8 = (WTF::PrintStream *)v7;
  v9 = *((_DWORD *)this + 4);
  if (!v9)
  {
    v10 = "Weak";
    goto LABEL_10;
  }
  if (v9 == 1)
  {
    v10 = "Strong";
LABEL_10:
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    WTF::PrintStream::printf(v11, "%s", v10);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
    WTF::PrintStream::printf(v8, "%s", ":");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    return JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)this, a2, a3, this[1]);
  }
  result = 45;
  __break(0xC471u);
  return result;
}

unint64_t JSC::DFG::Graph::registerStructure(JSC::DFG::Graph *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _DWORD *v17;
  int v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t *v34;
  JSC::Structure *v35;
  unint64_t *v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  char **v56;
  char *v57;
  char **v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v67;
  unint64_t v68;

  if (!a2)
    goto LABEL_37;
  v10 = *((_QWORD *)this + 3);
  v11 = *(unsigned __int8 *)(a2 + 5);
  if (v11 != 1)
  {
    if (v11 == 18)
    {
      __break(0xC471u);
      JUMPOUT(0x1983BDCA0);
    }
    v27 = (uint64_t *)(v10 + 288);
    v28 = *(_QWORD *)(v10 + 288);
    if (v28
      || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v27, 8uLL, 0, a4, a5, a6, a7, a8), (v28 = *v27) != 0))
    {
      v29 = *(_DWORD *)(v28 - 8);
    }
    else
    {
      v29 = 0;
    }
    v30 = (~(a2 << 32) + a2) ^ ((~(a2 << 32) + a2) >> 22);
    v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
    v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
    v33 = v29 & ((v32 >> 31) ^ v32);
    v34 = (unint64_t *)(v28 + 8 * v33);
    v35 = (JSC::Structure *)*v34;
    if (*v34)
    {
      v36 = 0;
      v37 = 1;
      while (v35 != (JSC::Structure *)a2)
      {
        if (v35 == (JSC::Structure *)-1)
          v36 = v34;
        v33 = (v33 + v37) & v29;
        v34 = (unint64_t *)(v28 + 8 * v33);
        v35 = (JSC::Structure *)*v34;
        ++v37;
        if (!*v34)
        {
          if (v36)
          {
            *v36 = 0;
            --*(_DWORD *)(*v27 - 16);
            v34 = v36;
          }
          goto LABEL_31;
        }
      }
      goto LABEL_37;
    }
LABEL_31:
    *v34 = a2;
    v38 = *v27;
    if (*v27)
      v39 = *(_DWORD *)(v38 - 12) + 1;
    else
      v39 = 1;
    *(_DWORD *)(v38 - 12) = v39;
    v40 = *v27;
    if (*v27)
      v41 = *(_DWORD *)(v40 - 12);
    else
      v41 = 0;
    v42 = (*(_DWORD *)(v40 - 16) + v41);
    v43 = *(unsigned int *)(v40 - 4);
    if (v43 > 0x400)
    {
      if (v43 > 2 * v42)
        goto LABEL_37;
    }
    else
    {
      if (3 * v43 > 4 * v42)
        goto LABEL_37;
      if (!(_DWORD)v43)
      {
        v68 = 8;
LABEL_70:
        WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v27, v68, (uint64_t)v34, a4, a5, a6, a7, a8);
        goto LABEL_37;
      }
    }
    v68 = ((_DWORD)v43 << (6 * *(_DWORD *)(v40 - 12) >= (2 * v43)));
    goto LABEL_70;
  }
  v12 = (uint64_t *)(v10 + 296);
  v13 = a2 >> 4;
  v14 = *(_QWORD *)(v10 + 296);
  if (v14
    || (WTF::HashTable<JSC::StructureID,JSC::StructureID,WTF::IdentityExtractor,WTF::DefaultHash<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>>::expand(v12, 0, a3, a4, a5, a6, a7, a8), (v14 = *v12) != 0))
  {
    v15 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = v15 & v13;
  v17 = (_DWORD *)(v14 + 4 * (v15 & v13));
  v18 = *v17;
  if (!*v17)
  {
LABEL_13:
    *v17 = v13;
    v21 = *v12;
    if (*v12)
      v22 = *(_DWORD *)(v21 - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(v21 - 12) = v22;
    v23 = *v12;
    if (*v12)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 > 2 * v25)
        goto LABEL_37;
    }
    else if (3 * v26 > 4 * v25)
    {
      goto LABEL_37;
    }
    WTF::HashTable<JSC::StructureID,JSC::StructureID,WTF::IdentityExtractor,WTF::DefaultHash<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>>::expand(v12, (unint64_t)v17, a3, a4, a5, a6, a7, a8);
    goto LABEL_37;
  }
  v19 = 0;
  v20 = 1;
  while (v18 != (_DWORD)v13)
  {
    if (v18 == 1)
      v19 = v17;
    v16 = (v16 + v20) & v15;
    v17 = (_DWORD *)(v14 + 4 * v16);
    v18 = *v17;
    ++v20;
    if (!*v17)
    {
      if (v19)
      {
        *v19 = 0;
        --*(_DWORD *)(*v12 - 16);
        v17 = v19;
      }
      goto LABEL_13;
    }
  }
LABEL_37:
  if ((*(_BYTE *)(a2 + 19) & 0xC) != 0)
    return a2;
  v45 = (char *)(a2 + 96);
  v44 = *(_QWORD *)(a2 + 96);
  v46 = (v44 & 1) != 0 ? (v44 >> 1) & 3 : *(unsigned __int8 *)(v44 + 4);
  if (v46 == 2)
    return a2;
  v47 = *((_QWORD *)this + 3);
  v50 = *(_QWORD *)(v47 + 152);
  v49 = (uint64_t *)(v47 + 152);
  v48 = v50;
  if (v50
    || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v49, 8uLL, 0, a4, a5, a6, a7, a8), (v48 = *v49) != 0))
  {
    v51 = *(_DWORD *)(v48 - 8);
  }
  else
  {
    v51 = 0;
  }
  v52 = (unint64_t)&v45[~((_QWORD)v45 << 32)] ^ ((unint64_t)&v45[~((_QWORD)v45 << 32)] >> 22);
  v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
  v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
  v55 = v51 & ((v54 >> 31) ^ v54);
  v56 = (char **)(v48 + 8 * v55);
  v57 = *v56;
  if (!*v56)
  {
LABEL_51:
    *v56 = v45;
    v60 = *v49;
    if (*v49)
      v61 = *(_DWORD *)(v60 - 12) + 1;
    else
      v61 = 1;
    *(_DWORD *)(v60 - 12) = v61;
    v62 = *v49;
    if (*v49)
      v63 = *(_DWORD *)(v62 - 12);
    else
      v63 = 0;
    v64 = (*(_DWORD *)(v62 - 16) + v63);
    v65 = *(unsigned int *)(v62 - 4);
    if (v65 > 0x400)
    {
      if (v65 > 2 * v64)
        return a2;
    }
    else
    {
      if (3 * v65 > 4 * v64)
        return a2;
      if (!(_DWORD)v65)
      {
        v67 = 8;
LABEL_63:
        WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v49, v67, (uint64_t)v56, a4, a5, a6, a7, a8);
        return a2;
      }
    }
    v67 = ((_DWORD)v65 << (6 * *(_DWORD *)(v62 - 12) >= (2 * v65)));
    goto LABEL_63;
  }
  v58 = 0;
  v59 = 1;
  while (v57 != v45)
  {
    if (v57 == (char *)-1)
      v58 = v56;
    v55 = (v55 + v59) & v51;
    v56 = (char **)(v48 + 8 * v55);
    v57 = *v56;
    ++v59;
    if (!*v56)
    {
      if (v58)
      {
        *v58 = 0;
        --*(_DWORD *)(*v49 - 16);
        v56 = v58;
      }
      goto LABEL_51;
    }
  }
  return a2;
}

JSC::DFG::Graph *JSC::DFG::Graph::Graph(JSC::DFG::Graph *this, JSC::VM *a2, JSC::DFG::Plan *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  WTF *v40;
  JSC::Structure *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  JSC::Structure *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::Structure *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;

  *(_QWORD *)this = &off_1E358C640;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6)
    v6 = WTF::Thread::initializeCurrentTLS(0);
  *((_QWORD *)this + 1) = *(_QWORD *)(v6 + 24) + 0x10000;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = a3;
  v7 = *((_QWORD *)a3 + 5);
  v8 = *(_QWORD *)(v7 + 192);
  *((_QWORD *)this + 4) = v7;
  *((_QWORD *)this + 5) = v8;
  *((_QWORD *)this + 6) = (char *)this + 64;
  *((_QWORD *)this + 7) = 8;
  *((_QWORD *)this + 16) = (char *)this + 144;
  *((_QWORD *)this + 17) = 1;
  *((_QWORD *)this + 19) = (char *)this + 168;
  *((_QWORD *)this + 20) = 16;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_QWORD *)this + 79) = (char *)this + 648;
  *((_QWORD *)this + 80) = 4;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v9 = this;
  *((_QWORD *)this + 101) = v9;
  *((_DWORD *)this + 214) = 0;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_DWORD *)this + 216) = -1;
  *((_BYTE *)this + 968) = 0;
  *((_BYTE *)this + 972) = 0;
  *(_OWORD *)((char *)this + 872) = 0u;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *((_QWORD *)this + 119) = 0;
  *(_DWORD *)((char *)this + 961) = 0;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 67) = 0u;
  *((_QWORD *)this + 136) = -1;
  *((_DWORD *)this + 274) = -1;
  *((_QWORD *)this + 138) = 0;
  *((_WORD *)this + 556) = 256;
  *((_BYTE *)this + 960) = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 43) & 1 | (byte_1ECF4C274 != 0);
  v10 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v10 = this;
  *(_DWORD *)(v10 + 8) = 0;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  JSC::DFG::FlowIndexing::recompute((JSC::DFG::FlowIndexing *)v10, v11, v12, v13, v14, v15, v16, v17);
  v25 = *((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = v10;
  if (v25)
  {
    v26 = *(_QWORD *)(v25 + 32);
    if (v26)
    {
      *(_QWORD *)(v25 + 32) = 0;
      *(_DWORD *)(v25 + 40) = 0;
      WTF::fastFree(v26, v18, v19, v20, v21, v22, v23, v24);
    }
    v27 = *(_QWORD *)(v25 + 16);
    if (v27)
    {
      *(_QWORD *)(v25 + 16) = 0;
      *(_DWORD *)(v25 + 24) = 0;
      WTF::fastFree(v27, v18, v19, v20, v21, v22, v23, v24);
    }
    WTF::fastFree(v25, v18, v19, v20, v21, v22, v23, v24);
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  v36 = (unsigned int *)v28;
  *(_QWORD *)v28 = this;
  *(_OWORD *)(v28 + 8) = 0u;
  v37 = (_QWORD *)(v28 + 8);
  *(_OWORD *)(v28 + 24) = 0u;
  v38 = *((unsigned int *)this + 261);
  if ((_DWORD)v38)
  {
    WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28 + 8, (void *)*((unsigned int *)this + 261), v30, v31, v32, v33, v34, v35);
    if (*v37)
      bzero((void *)(*v37 + 32 * v36[5]), 32 * v38 - 32 * v36[5]);
  }
  v39 = (unint64_t *)((char *)a2 + 41496);
  v36[5] = v38;
  if (*(_DWORD *)(*(_QWORD *)v36 + 944) == 2)
  {
    v75 = v36 + 6;
    v76 = *(unsigned int *)(*(_QWORD *)v36 + 1044);
    v77 = v36[9];
    if (v77 < v76)
    {
      if (v36[8] < v76)
        WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v36 + 6), (void *)v76, v30, v31, v32, v33, v34, v35);
      if (*v75)
        bzero((void *)(*v75 + 32 * v36[9]), 32 * v76 - 32 * v36[9]);
    }
    else if ((_DWORD)v77 != (_DWORD)v76)
    {
      v78 = (_QWORD *)(*v75 + 32 * v76);
      v79 = 32 * v77 - 32 * v76;
      do
      {
        if ((*v78 & 1) != 0)
          WTF::fastFree(*v78 & 0xFFFFFFFFFFFFFFFCLL, v29, v30, v31, v32, v33, v34, v35);
        v78 += 4;
        v79 -= 32;
      }
      while (v79);
    }
    v36[9] = v76;
  }
  v40 = (WTF *)*((_QWORD *)this + 123);
  *((_QWORD *)this + 123) = v36;
  if (v40)
    std::default_delete<JSC::DFG::FlowMap<JSC::DFG::AbstractValue>>::operator()[abi:sn180100](v40, v29, v30, v31, v32, v33, v34, v35);
  v41 = (JSC::Structure *)*v39;
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*((_QWORD *)this + 3) + 280), *v39, v30, v31, v32, v33, v34, v35);
  JSC::DFG::DesiredWatchpoints::consider((JSC::DFG::DesiredWatchpoints *)(*((_QWORD *)this + 3) + 136), v41, v42, v43, v44, v45, v46, v47);
  v48 = (JSC::Structure *)v39[2];
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*((_QWORD *)this + 3) + 280), (unint64_t)v48, v49, v50, v51, v52, v53, v54);
  JSC::DFG::DesiredWatchpoints::consider((JSC::DFG::DesiredWatchpoints *)(*((_QWORD *)this + 3) + 136), v48, v55, v56, v57, v58, v59, v60);
  *((_QWORD *)this + 125) = v48;
  v61 = (JSC::Structure *)v39[16];
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*((_QWORD *)this + 3) + 280), (unint64_t)v61, v62, v63, v64, v65, v66, v67);
  JSC::DFG::DesiredWatchpoints::consider((JSC::DFG::DesiredWatchpoints *)(*((_QWORD *)this + 3) + 136), v61, v68, v69, v70, v71, v72, v73);
  *((_QWORD *)this + 126) = v61;
  return this;
}

void JSC::DFG::Graph::~Graph(JSC::DFG::Graph *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t StatusReg;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  WTF *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  JSC::DFG::Graph *v87;
  _QWORD *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t j;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t k;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t m;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  JSC::DFG::Graph *v151;
  JSC::DFG::Graph *v152;
  uint64_t v153;
  JSC::DFG::BasicBlock **v154;
  uint64_t v155;
  JSC::DFG::BasicBlock *v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  JSC::DFG::Graph *v165;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t *v174;
  unint64_t *v175;
  unint64_t v176;
  unsigned int v177;
  unsigned int v178;
  unint64_t *v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v190;
  WTF::StringImpl **v191;
  WTF::StringImpl *v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  WTF::StringImpl **v202;
  WTF::StringImpl *v203;
  unint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  unsigned int *v217;
  unsigned int *v218;
  unsigned int v219;
  unsigned int v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;

  v9 = *((_QWORD *)this + 133);
  if (v9)
  {
    for (i = 0; i < v9; ++i)
    {
      if (i >> 4 >= *((unsigned int *)this + 271))
      {
        __break(0xC471u);
        JUMPOUT(0x1983BE164);
      }
      v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 134) + 8 * (i >> 4)) + 8 * (i & 0xF));
      if ((v11 & 1) != 0)
      {
        WTF::fastFree(v11 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v9 = *((_QWORD *)this + 133);
      }
    }
  }
  if (*((_DWORD *)this + 271))
  {
    v12 = 0;
    do
      WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 134) + 8 * v12++), a2, a3, a4, a5, a6, a7, a8);
    while (v12 < *((unsigned int *)this + 271));
  }
  v13 = *((_QWORD *)this + 134);
  if (v13)
  {
    *((_QWORD *)this + 134) = 0;
    *((_DWORD *)this + 270) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)this + 131);
  if (v14)
  {
    *((_QWORD *)this + 131) = 0;
    *((_DWORD *)this + 264) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *((unsigned int *)this + 261);
  if ((_DWORD)v15)
  {
    v16 = (unint64_t *)*((_QWORD *)this + 129);
    v17 = 8 * v15;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v19 = *v16;
      *v16 = 0;
      if (v19)
      {
        v20 = *(_QWORD *)(v19 + 8);
        if ((v20 & 1) != 0 && (v20 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v20 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        v21 = *(_QWORD *)v19;
        if ((*(_QWORD *)v19 & 1) != 0 && (v21 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v21 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        v22 = *(_QWORD *)(StatusReg + 752);
        if (v22)
        {
          if (!(v19 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v19 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v19)) & 1) != 0)
          {
LABEL_24:
            v23 = *(unsigned int *)(v22 + 8000);
            if (v23 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v22, v19, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v22 + 8 * v23) = v19 | 0x5000000000000;
              *(_DWORD *)(v22 + 8000) = v23 + 1;
            }
            goto LABEL_17;
          }
          if (v19 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v19 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v19 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                    + 24) >> (2 * ((BYTE3(v19) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_24;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v22, v19, 1, a4, a5, a6, a7, a8);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v19, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_17:
      ++v16;
      v17 -= 8;
    }
    while (v17);
  }
  v24 = *((_QWORD *)this + 129);
  if (v24)
  {
    *((_QWORD *)this + 129) = 0;
    *((_DWORD *)this + 260) = 0;
    WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
  }
  v25 = *((_QWORD *)this + 128);
  if (v25)
    WTF::fastFree(v25 - 16, a2, a3, a4, a5, a6, a7, a8);
  v26 = *((_QWORD *)this + 127);
  if (v26)
    WTF::fastFree(v26 - 16, a2, a3, a4, a5, a6, a7, a8);
  v27 = *((_QWORD *)this + 124);
  if (v27)
  {
    do
    {
      v221 = *(_QWORD *)(v27 + 16);
      v222 = *(_QWORD *)v27;
      if (*(_QWORD *)v27)
      {
        *(_QWORD *)v27 = 0;
        *(_DWORD *)(v27 + 8) = 0;
        WTF::fastFree(v222, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v27, a2, a3, a4, a5, a6, a7, a8);
      v27 = v221;
    }
    while (v221);
  }
  v28 = (WTF *)*((_QWORD *)this + 123);
  *(_OWORD *)((char *)this + 984) = 0u;
  if (v28)
    std::default_delete<JSC::DFG::FlowMap<JSC::DFG::AbstractValue>>::operator()[abi:sn180100](v28, a2, a3, a4, a5, a6, a7, a8);
  v29 = *((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = 0;
  if (v29)
  {
    v30 = *(_QWORD *)(v29 + 32);
    if (v30)
    {
      *(_QWORD *)(v29 + 32) = 0;
      *(_DWORD *)(v29 + 40) = 0;
      WTF::fastFree(v30, a2, a3, a4, a5, a6, a7, a8);
    }
    v31 = *(_QWORD *)(v29 + 16);
    if (v31)
    {
      *(_QWORD *)(v29 + 16) = 0;
      *(_DWORD *)(v29 + 24) = 0;
      WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
  }
  v32 = *((_QWORD *)this + 116);
  if (v32)
    WTF::fastFree(v32 - 16, a2, a3, a4, a5, a6, a7, a8);
  v33 = *((_QWORD *)this + 114);
  if (v33)
  {
    *((_QWORD *)this + 114) = 0;
    *((_DWORD *)this + 230) = 0;
    WTF::fastFree(v33, a2, a3, a4, a5, a6, a7, a8);
  }
  v34 = *((_QWORD *)this + 113);
  if (v34)
  {
    v190 = *(unsigned int *)(v34 - 4);
    if ((_DWORD)v190)
    {
      v191 = (WTF::StringImpl **)*((_QWORD *)this + 113);
      do
      {
        v192 = *v191;
        if (*v191 != (WTF::StringImpl *)-1)
        {
          *v191 = 0;
          if (v192)
          {
            if (*(_DWORD *)v192 == 2)
            {
              WTF::StringImpl::~StringImpl(v192, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v193, v194, v195, v196, v197, v198, v199, v200);
            }
            else
            {
              *(_DWORD *)v192 -= 2;
            }
          }
        }
        ++v191;
        --v190;
      }
      while (v190);
    }
    WTF::fastFree(v34 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v35 = *((_QWORD *)this + 112);
  if (v35)
  {
    v201 = *(unsigned int *)(v35 - 4);
    if ((_DWORD)v201)
    {
      v202 = (WTF::StringImpl **)*((_QWORD *)this + 112);
      do
      {
        v203 = *v202;
        if (*v202 != (WTF::StringImpl *)-1)
        {
          *v202 = 0;
          if (v203)
          {
            if (*(_DWORD *)v203 == 2)
            {
              WTF::StringImpl::~StringImpl(v203, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v204, v205, v206, v207, v208, v209, v210, v211);
            }
            else
            {
              *(_DWORD *)v203 -= 2;
            }
          }
        }
        ++v202;
        --v201;
      }
      while (v201);
    }
    WTF::fastFree(v35 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v36 = *((unsigned int *)this + 223);
  if ((_DWORD)v36)
  {
    v214 = 24 * v36;
    v215 = (unint64_t *)(*((_QWORD *)this + 110) + 8);
    do
    {
      v216 = *v215;
      *v215 = 0;
      if (v216)
        WTF::fastFree(v216, a2, a3, a4, a5, a6, a7, a8);
      v215 += 3;
      v214 -= 24;
    }
    while (v214);
  }
  v37 = *((_QWORD *)this + 110);
  if (v37)
  {
    *((_QWORD *)this + 110) = 0;
    *((_DWORD *)this + 222) = 0;
    WTF::fastFree(v37, a2, a3, a4, a5, a6, a7, a8);
  }
  v38 = *((_QWORD *)this + 109);
  if (v38)
    WTF::fastFree(v38 - 16, a2, a3, a4, a5, a6, a7, a8);
  v39 = *((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = 0;
  if (v39)
    WTF::fastFree(v39, a2, a3, a4, a5, a6, a7, a8);
  v40 = *((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v40)
  {
    v41 = *(_QWORD *)(v40 + 24);
    if (v41)
    {
      *(_QWORD *)(v40 + 24) = 0;
      *(_DWORD *)(v40 + 32) = 0;
      WTF::fastFree(v41, a2, a3, a4, a5, a6, a7, a8);
    }
    v42 = *(unsigned int *)(v40 + 20);
    v43 = *(_QWORD *)(v40 + 8);
    if ((_DWORD)v42)
    {
      v44 = 40 * v42;
      do
      {
        v45 = *(_QWORD *)v43;
        if (*(_QWORD *)v43)
        {
          *(_QWORD *)v43 = 0;
          *(_DWORD *)(v43 + 8) = 0;
          WTF::fastFree(v45, a2, a3, a4, a5, a6, a7, a8);
        }
        v43 += 40;
        v44 -= 40;
      }
      while (v44);
      v43 = *(_QWORD *)(v40 + 8);
    }
    if (v43)
    {
      *(_QWORD *)(v40 + 8) = 0;
      *(_DWORD *)(v40 + 16) = 0;
      WTF::fastFree(v43, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v40, a2, a3, a4, a5, a6, a7, a8);
  }
  v46 = *((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = 0;
  if (v46)
  {
    v47 = *(_QWORD *)(v46 + 88);
    if ((v47 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v47, a2, a3, a4, a5, a6, a7, a8);
    v48 = *(_QWORD *)(v46 + 8);
    if (v46 + 24 != v48 && v48 != 0)
    {
      *(_QWORD *)(v46 + 8) = 0;
      *(_DWORD *)(v46 + 16) = 0;
      WTF::fastFree(v48, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v46, a2, a3, a4, a5, a6, a7, a8);
  }
  v50 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v50)
  {
    v51 = *(_QWORD *)(v50 + 88);
    if ((v51 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v51, a2, a3, a4, a5, a6, a7, a8);
    v52 = *(_QWORD *)(v50 + 8);
    if (v50 + 24 != v52 && v52 != 0)
    {
      *(_QWORD *)(v50 + 8) = 0;
      *(_DWORD *)(v50 + 16) = 0;
      WTF::fastFree(v52, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v50, a2, a3, a4, a5, a6, a7, a8);
  }
  v54 = *((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v54)
    WTF::fastFree(v54, a2, a3, a4, a5, a6, a7, a8);
  std::unique_ptr<JSC::DFG::NaturalLoops<JSC::DFG::CFG>>::reset[abi:sn180100]((unint64_t *)this + 100, 0, a3, a4, a5, a6, a7, a8);
  std::unique_ptr<JSC::DFG::NaturalLoops<JSC::DFG::CPSCFG>>::reset[abi:sn180100]((unint64_t *)this + 99, 0, v55, v56, v57, v58, v59, v60);
  v68 = *((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (!v68)
    goto LABEL_100;
  v69 = *(unsigned int *)(v68 + 20);
  v70 = *(_QWORD *)(v68 + 8);
  if (!(_DWORD)v69)
    goto LABEL_97;
  v71 = 32 * v69;
  v72 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    v61 = *(_QWORD *)v70;
    if (!*(_QWORD *)v70)
      goto LABEL_90;
    *(_QWORD *)v70 = 0;
    *(_DWORD *)(v70 + 8) = 0;
    v73 = *(_QWORD *)(v72 + 752);
    if (v73)
    {
      if (v61 >> 43
        || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v61 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v61)) & 1) == 0)
      {
        if (v61 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v61 >> 24)
        {
          v63 = 0;
LABEL_297:
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v73, v61, 1, v63, v64, v65, v66, v67);
          goto LABEL_90;
        }
        v63 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v61 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v61) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)v63 != 1)
          goto LABEL_297;
      }
      v74 = *(unsigned int *)(v73 + 8000);
      if (v74 >= 0x3E7)
      {
        pas_thread_local_cache_append_deallocation_slow(v73, v61, (os_unfair_lock_s *)5, v63, v64, v65, v66, v67);
      }
      else
      {
        *(_QWORD *)(v73 + 8 * v74) = v61 | 0x5000000000000;
        *(_DWORD *)(v73 + 8000) = v74 + 1;
      }
    }
    else
    {
      pas_try_deallocate_slow_no_cache(v61, (uint64_t)&bmalloc_heap_config, 1);
    }
LABEL_90:
    v70 += 32;
    v71 -= 32;
  }
  while (v71);
  v70 = *(_QWORD *)(v68 + 8);
LABEL_97:
  if (v70)
  {
    *(_QWORD *)(v68 + 8) = 0;
    *(_DWORD *)(v68 + 16) = 0;
    WTF::fastFree(v70, (void *)v61, v62, v63, v64, v65, v66, v67);
  }
  WTF::fastFree(v68, (void *)v61, v62, v63, v64, v65, v66, v67);
LABEL_100:
  v75 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v75)
  {
    v76 = *(_QWORD *)(v75 + 24);
    if (v76)
    {
      *(_QWORD *)(v75 + 24) = 0;
      *(_DWORD *)(v75 + 32) = 0;
      WTF::fastFree(v76, (void *)v61, v62, v63, v64, v65, v66, v67);
    }
    v77 = *(unsigned int *)(v75 + 20);
    v78 = *(_QWORD *)(v75 + 8);
    if ((_DWORD)v77)
    {
      v79 = 40 * v77;
      do
      {
        v80 = *(_QWORD *)v78;
        if (*(_QWORD *)v78)
        {
          *(_QWORD *)v78 = 0;
          *(_DWORD *)(v78 + 8) = 0;
          WTF::fastFree(v80, (void *)v61, v62, v63, v64, v65, v66, v67);
        }
        v78 += 40;
        v79 -= 40;
      }
      while (v79);
      v78 = *(_QWORD *)(v75 + 8);
    }
    if (v78)
    {
      *(_QWORD *)(v75 + 8) = 0;
      *(_DWORD *)(v75 + 16) = 0;
      WTF::fastFree(v78, (void *)v61, v62, v63, v64, v65, v66, v67);
    }
    WTF::fastFree(v75, (void *)v61, v62, v63, v64, v65, v66, v67);
  }
  v81 = *((unsigned int *)this + 193);
  if ((_DWORD)v81)
  {
    v174 = (unint64_t *)*((_QWORD *)this + 95);
    v175 = &v174[v81];
    do
    {
      v176 = *v174;
      *v174 = 0;
      if (v176)
      {
        do
        {
          v177 = __ldaxr((unsigned int *)v176);
          v178 = v177 - 1;
        }
        while (__stlxr(v178, (unsigned int *)v176));
        if (!v178)
        {
          atomic_store(1u, (unsigned int *)v176);
          v217 = *(unsigned int **)(v176 + 8);
          *(_QWORD *)(v176 + 8) = 0;
          if (v217)
          {
            v218 = v217 + 2;
            do
            {
              v219 = __ldaxr(v218);
              v220 = v219 - 1;
            }
            while (__stlxr(v220, v218));
            if (!v220)
            {
              atomic_store(1u, v217 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v217 + 8))(v217);
            }
          }
          WTF::fastFree(v176, (void *)v61, v62, v63, v64, v65, v66, v67);
        }
      }
      ++v174;
    }
    while (v174 != v175);
  }
  v82 = *((_QWORD *)this + 95);
  if (v82)
  {
    *((_QWORD *)this + 95) = 0;
    *((_DWORD *)this + 192) = 0;
    WTF::fastFree(v82, (void *)v61, v62, v63, v64, v65, v66, v67);
  }
  v83 = *((_QWORD *)this + 94);
  if (v83)
    WTF::fastFree(v83 - 16, (void *)v61, v62, v63, v64, v65, v66, v67);
  v84 = *((_QWORD *)this + 93);
  if (v84)
  {
    v85 = *(unsigned int *)(v84 - 4);
    if ((_DWORD)v85)
    {
      v86 = (unint64_t *)(v84 + 8);
      do
      {
        if (*(v86 - 1) != -1)
        {
          v61 = *v86;
          *v86 = 0;
          if (v61)
            std::default_delete<JSC::FullBytecodeLiveness>::operator()[abi:sn180100]((int)v86, (WTF *)v61, v62, v63, v64, v65, v66, v67);
        }
        v86 += 2;
        --v85;
      }
      while (v85);
    }
    WTF::fastFree(v84 - 16, (void *)v61, v62, v63, v64, v65, v66, v67);
  }
  v87 = (JSC::DFG::Graph *)*((_QWORD *)this + 79);
  if ((JSC::DFG::Graph *)((char *)this + 648) != v87 && v87 != 0)
  {
    *((_QWORD *)this + 79) = 0;
    *((_DWORD *)this + 160) = 0;
    WTF::fastFree((unint64_t)v87, (void *)v61, v62, v63, v64, v65, v66, v67);
  }
  v89 = (_QWORD *)*((_QWORD *)this + 78);
  if (v89)
  {
    do
    {
      v231 = (_QWORD *)v89[1];
      if ((*v89 & 0x8000000000000000) == 0)
        WTF::fastFree(2 * *v89, (void *)v61, v62, v63, v64, v65, v66, v67);
      WTF::fastFree((unint64_t)v89, (void *)v61, v62, v63, v64, v65, v66, v67);
      v89 = v231;
    }
    while (v231);
  }
  *((_QWORD *)this + 78) = 0;
  v90 = *((_QWORD *)this + 77);
  if (v90)
  {
    do
    {
      v172 = *(_QWORD *)(v90 + 16);
      WTF::fastFree(v90, (void *)v61, v62, v63, v64, v65, v66, v67);
      v90 = v172;
    }
    while (v172);
  }
  *((_QWORD *)this + 77) = 0;
  v91 = *((_QWORD *)this + 76);
  if (v91)
  {
    do
    {
      v167 = *(_QWORD *)(v91 + 40);
      WTF::fastFree(v91, (void *)v61, v62, v63, v64, v65, v66, v67);
      v91 = v167;
    }
    while (v167);
  }
  *((_QWORD *)this + 76) = 0;
  v92 = *((_QWORD *)this + 75);
  if (v92)
  {
    do
    {
      v185 = *(_QWORD *)(v92 + 16);
      WTF::fastFree(v92, (void *)v61, v62, v63, v64, v65, v66, v67);
      v92 = v185;
    }
    while (v185);
  }
  *((_QWORD *)this + 75) = 0;
  v93 = *((_QWORD *)this + 74);
  if (v93)
  {
    do
    {
      v94 = *(_QWORD *)(v93 + 16);
      WTF::fastFree(v93, (void *)v61, v62, v63, v64, v65, v66, v67);
      v93 = v94;
    }
    while (v94);
  }
  *((_QWORD *)this + 74) = 0;
  v95 = *((_QWORD *)this + 73);
  if (v95)
  {
    do
    {
      v186 = *(_QWORD *)(v95 + 32);
      WTF::fastFree(v95, (void *)v61, v62, v63, v64, v65, v66, v67);
      v95 = v186;
    }
    while (v186);
  }
  *((_QWORD *)this + 73) = 0;
  v96 = *((_QWORD *)this + 72);
  if (v96)
  {
    do
    {
      v173 = *(_QWORD *)(v96 + 8);
      WTF::fastFree(v96, (void *)v61, v62, v63, v64, v65, v66, v67);
      v96 = v173;
    }
    while (v173);
  }
  *((_QWORD *)this + 72) = 0;
  v97 = *((_QWORD *)this + 71);
  if (v97)
  {
    do
    {
      v212 = *(_QWORD *)(v97 + 16);
      v213 = *(_QWORD *)v97;
      if (*(_QWORD *)v97)
      {
        *(_QWORD *)v97 = 0;
        *(_DWORD *)(v97 + 8) = 0;
        WTF::fastFree(v213, (void *)v61, v62, v63, v64, v65, v66, v67);
      }
      WTF::fastFree(v97, (void *)v61, v62, v63, v64, v65, v66, v67);
      v97 = v212;
    }
    while (v212);
  }
  *((_QWORD *)this + 71) = 0;
  v98 = *((_QWORD *)this + 70);
  if (v98)
  {
    do
    {
      v187 = *(_QWORD *)(v98 + 48);
      v188 = *(_QWORD *)v98;
      if (v98 + 16 != *(_QWORD *)v98 && v188 != 0)
      {
        *(_QWORD *)v98 = 0;
        *(_DWORD *)(v98 + 8) = 0;
        WTF::fastFree(v188, (void *)v61, v62, v63, v64, v65, v66, v67);
      }
      WTF::fastFree(v98, (void *)v61, v62, v63, v64, v65, v66, v67);
      v98 = v187;
    }
    while (v187);
  }
  *((_QWORD *)this + 70) = 0;
  v99 = *((_QWORD *)this + 69);
  if (v99)
  {
    do
    {
      v223 = *(_QWORD *)(v99 + 104);
      WTF::Vector<JSC::DeleteByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v99 + 8, (void *)v61, v62, v63, v64, v65, v66, v67);
      WTF::fastFree(v99, v224, v225, v226, v227, v228, v229, v230);
      v99 = v223;
    }
    while (v223);
  }
  *((_QWORD *)this + 69) = 0;
  v100 = *((_QWORD *)this + 68);
  if (v100)
  {
    do
    {
      v232 = *(_QWORD *)(v100 + 152);
      v233 = *(unsigned int *)(v100 + 20);
      if ((_DWORD)v233)
        WTF::VectorDestructor<true,JSC::PutByVariant>::destruct(*(_QWORD **)(v100 + 8), (_QWORD *)(*(_QWORD *)(v100 + 8) + (v233 << 6)), v62, v63, v64, v65, v66, v67);
      v234 = *(_QWORD *)(v100 + 8);
      if (v100 + 24 != v234 && v234 != 0)
      {
        *(_QWORD *)(v100 + 8) = 0;
        *(_DWORD *)(v100 + 16) = 0;
        WTF::fastFree(v234, (void *)v61, v62, v63, v64, v65, v66, v67);
      }
      WTF::fastFree(v100, (void *)v61, v62, v63, v64, v65, v66, v67);
      v100 = v232;
    }
    while (v232);
  }
  *((_QWORD *)this + 68) = 0;
  v101 = *((_QWORD *)this + 67);
  if (v101)
  {
    do
    {
      v236 = *(_QWORD *)(v101 + 88);
      v237 = *(unsigned int *)(v101 + 20);
      v238 = *(_QWORD **)(v101 + 8);
      if ((_DWORD)v237)
      {
        v239 = 32 * v237;
        do
        {
          if ((*v238 & 1) != 0)
            WTF::fastFree(*v238 & 0xFFFFFFFFFFFFFFFCLL, (void *)v61, v62, v63, v64, v65, v66, v67);
          v238 += 4;
          v239 -= 32;
        }
        while (v239);
        v238 = *(_QWORD **)(v101 + 8);
      }
      if ((_QWORD *)(v101 + 24) != v238 && v238 != 0)
      {
        *(_QWORD *)(v101 + 8) = 0;
        *(_DWORD *)(v101 + 16) = 0;
        WTF::fastFree((unint64_t)v238, (void *)v61, v62, v63, v64, v65, v66, v67);
      }
      WTF::fastFree(v101, (void *)v61, v62, v63, v64, v65, v66, v67);
      v101 = v236;
    }
    while (v236);
  }
  *((_QWORD *)this + 67) = 0;
  v102 = *((_QWORD *)this + 66);
  if (v102)
  {
    do
    {
      v170 = *(_QWORD *)(v102 + 48);
      v171 = *(_QWORD *)v102;
      if (*(_QWORD *)v102)
      {
        *(_QWORD *)v102 = 0;
        *(_DWORD *)(v102 + 8) = 0;
        WTF::fastFree(v171, (void *)v61, v62, v63, v64, v65, v66, v67);
      }
      WTF::fastFree(v102, (void *)v61, v62, v63, v64, v65, v66, v67);
      v102 = v170;
    }
    while (v170);
  }
  *((_QWORD *)this + 66) = 0;
  v103 = *((_QWORD *)this + 65);
  if (v103)
  {
    v104 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v61 = v103;
      v103 = *(_QWORD *)(v103 + 32);
      v105 = *(_QWORD *)(v104 + 752);
      if (v105)
      {
        if (!(v61 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v61 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v61)) & 1) != 0)
        {
LABEL_147:
          v106 = *(unsigned int *)(v105 + 8000);
          if (v106 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v105, v61, (os_unfair_lock_s *)5, v63, v64, v65, v66, v67);
          }
          else
          {
            *(_QWORD *)(v105 + 8 * v106) = v61 | 0x5000000000000;
            *(_DWORD *)(v105 + 8000) = v106 + 1;
          }
          continue;
        }
        if (v61 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v61 >> 24)
        {
          v63 = 0;
        }
        else
        {
          v63 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v61 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v61) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)v63 == 1)
            goto LABEL_147;
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v105, v61, 1, v63, v64, v65, v66, v67);
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v61, (uint64_t)&bmalloc_heap_config, 1);
      }
    }
    while (v103);
  }
  *((_QWORD *)this + 65) = 0;
  v107 = *((_QWORD *)this + 64);
  if (v107)
  {
    do
    {
      v108 = *(_QWORD *)(v107 + 16);
      WTF::fastFree(v107, (void *)v61, v62, v63, v64, v65, v66, v67);
      v107 = v108;
    }
    while (v108);
  }
  *((_QWORD *)this + 64) = 0;
  v109 = *((_QWORD *)this + 61);
  if (v109)
  {
    for (j = 0; j < v109; ++j)
    {
      if (j >> 3 >= *((unsigned int *)this + 127))
      {
        __break(0xC471u);
        JUMPOUT(0x1983BF03CLL);
      }
      v111 = *(_QWORD *)(*((_QWORD *)this + 62) + 8 * (j >> 3));
      v112 = v111 + 48 * (j & 7);
      v115 = *(_QWORD **)(v112 + 16);
      v114 = (_QWORD *)(v112 + 16);
      v113 = (unint64_t)v115;
      if (v114 + 2 != v115 && v113 != 0)
      {
        *v114 = 0;
        *(_DWORD *)(v111 + 48 * (j & 7) + 24) = 0;
        WTF::fastFree(v113, (void *)v61, v62, v63, v64, v65, v66, v67);
        v109 = *((_QWORD *)this + 61);
      }
    }
  }
  if (*((_DWORD *)this + 127))
  {
    v117 = 0;
    do
      WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 62) + 8 * v117++), (void *)v61, v62, v63, v64, v65, v66, v67);
    while (v117 < *((unsigned int *)this + 127));
  }
  v118 = *((_QWORD *)this + 62);
  if (v118)
  {
    *((_QWORD *)this + 62) = 0;
    *((_DWORD *)this + 126) = 0;
    WTF::fastFree(v118, (void *)v61, v62, v63, v64, v65, v66, v67);
  }
  v119 = *((_QWORD *)this + 58);
  v120 = *((unsigned int *)this + 121);
  if (v119)
  {
    for (k = 0; k != v119; ++k)
    {
      if (v120 <= k >> 4)
      {
        __break(0xC471u);
        JUMPOUT(0x1983BEFF8);
      }
    }
  }
  if ((_DWORD)v120)
  {
    v122 = 0;
    v123 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v61 = *(_QWORD *)(*((_QWORD *)this + 59) + 8 * v122);
      v124 = *(_QWORD *)(v123 + 752);
      if (v124)
      {
        if (!(v61 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v61 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v61)) & 1) != 0)
        {
LABEL_175:
          v125 = *(unsigned int *)(v124 + 8000);
          if (v125 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v124, v61, (os_unfair_lock_s *)5, v63, v64, v65, v66, v67);
          }
          else
          {
            *(_QWORD *)(v124 + 8 * v125) = v61 | 0x5000000000000;
            *(_DWORD *)(v124 + 8000) = v125 + 1;
          }
          goto LABEL_177;
        }
        if (v61 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v61 >> 24)
        {
          v63 = 0;
        }
        else
        {
          v63 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v61 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v61) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)v63 == 1)
            goto LABEL_175;
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v124, v61, 1, v63, v64, v65, v66, v67);
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v61, (uint64_t)&bmalloc_heap_config, 1);
      }
LABEL_177:
      ++v122;
    }
    while (v122 < *((unsigned int *)this + 121));
  }
  v126 = *((_QWORD *)this + 59);
  if (v126)
  {
    *((_QWORD *)this + 59) = 0;
    *((_DWORD *)this + 120) = 0;
    WTF::fastFree(v126, (void *)v61, v62, v63, v64, v65, v66, v67);
  }
  v127 = *((unsigned int *)this + 115);
  v128 = *((_QWORD *)this + 56);
  if ((_DWORD)v127)
  {
    v168 = 16 * v127;
    do
    {
      v169 = *(_QWORD *)v128;
      if (*(_QWORD *)v128)
      {
        *(_QWORD *)v128 = 0;
        *(_DWORD *)(v128 + 8) = 0;
        WTF::fastFree(v169, (void *)v61, v62, v63, v64, v65, v66, v67);
      }
      v128 += 16;
      v168 -= 16;
    }
    while (v168);
    v128 = *((_QWORD *)this + 56);
  }
  if (v128)
  {
    *((_QWORD *)this + 56) = 0;
    *((_DWORD *)this + 114) = 0;
    WTF::fastFree(v128, (void *)v61, v62, v63, v64, v65, v66, v67);
  }
  v129 = *((_QWORD *)this + 55);
  if (v129)
  {
    v130 = *(unsigned int *)(v129 - 4);
    if ((_DWORD)v130)
    {
      v131 = v129 + 24;
      do
      {
        if (*(_QWORD *)(v131 - 24) != -1)
        {
          v132 = *(_QWORD *)(v131 - 16);
          if (v131 != v132 && v132 != 0)
          {
            *(_QWORD *)(v131 - 16) = 0;
            *(_DWORD *)(v131 - 8) = 0;
            WTF::fastFree(v132, (void *)v61, v62, v63, v64, v65, v66, v67);
          }
        }
        v131 += 88;
        --v130;
      }
      while (v130);
    }
    WTF::fastFree(v129 - 16, (void *)v61, v62, v63, v64, v65, v66, v67);
  }
  v134 = *((_QWORD *)this + 54);
  if (v134)
  {
    do
    {
      v135 = *(_QWORD *)(v134 + 8);
      WTF::fastFree(v134, (void *)v61, v62, v63, v64, v65, v66, v67);
      v134 = v135;
    }
    while (v135);
  }
  *((_QWORD *)this + 54) = 0;
  v136 = *((_QWORD *)this + 52);
  if (v136)
  {
    *((_QWORD *)this + 52) = 0;
    *((_DWORD *)this + 106) = 0;
    WTF::fastFree(v136, (void *)v61, v62, v63, v64, v65, v66, v67);
  }
  v137 = *((_QWORD *)this + 49);
  v138 = *((unsigned int *)this + 103);
  if (v137)
  {
    for (m = 0; m != v137; ++m)
    {
      if (v138 <= m >> 4)
      {
        __break(0xC471u);
        JUMPOUT(0x1983BF01CLL);
      }
    }
  }
  if ((_DWORD)v138)
  {
    v140 = 0;
    do
      WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 50) + 8 * v140++), (void *)v61, v62, v63, v64, v65, v66, v67);
    while (v140 < *((unsigned int *)this + 103));
  }
  v141 = *((_QWORD *)this + 50);
  if (v141)
  {
    *((_QWORD *)this + 50) = 0;
    *((_DWORD *)this + 102) = 0;
    WTF::fastFree(v141, (void *)v61, v62, v63, v64, v65, v66, v67);
  }
  v142 = *((_QWORD *)this + 48);
  if (v142)
    WTF::fastFree(v142 - 16, (void *)v61, v62, v63, v64, v65, v66, v67);
  v143 = *((_QWORD *)this + 47);
  if (v143)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v143, (void *)v61, v62, v63, v64, v65, v66, v67);
  v144 = *((unsigned int *)this + 93);
  if ((_DWORD)v144)
  {
    v179 = (unint64_t *)*((_QWORD *)this + 45);
    v180 = 8 * v144;
    do
    {
      v181 = *v179;
      *v179 = 0;
      if (v181)
        WTF::fastFree(v181, (void *)v61, v62, v63, v64, v65, v66, v67);
      ++v179;
      v180 -= 8;
    }
    while (v180);
  }
  v145 = *((_QWORD *)this + 45);
  if (v145)
  {
    *((_QWORD *)this + 45) = 0;
    *((_DWORD *)this + 92) = 0;
    WTF::fastFree(v145, (void *)v61, v62, v63, v64, v65, v66, v67);
  }
  v146 = *((_QWORD *)this + 43);
  if (v146)
  {
    *((_QWORD *)this + 43) = 0;
    *((_DWORD *)this + 88) = 0;
    WTF::fastFree(v146, (void *)v61, v62, v63, v64, v65, v66, v67);
  }
  v147 = *((unsigned int *)this + 85);
  if ((_DWORD)v147)
  {
    v182 = (unint64_t *)*((_QWORD *)this + 41);
    v183 = 16 * v147;
    do
    {
      v184 = *v182;
      *v182 = 0;
      if (v184)
        WTF::fastFree(v184, (void *)v61, v62, v63, v64, v65, v66, v67);
      v182 += 2;
      v183 -= 16;
    }
    while (v183);
  }
  v148 = *((_QWORD *)this + 41);
  if (v148)
  {
    *((_QWORD *)this + 41) = 0;
    *((_DWORD *)this + 84) = 0;
    WTF::fastFree(v148, (void *)v61, v62, v63, v64, v65, v66, v67);
  }
  v149 = *((_QWORD *)this + 39);
  if (v149)
  {
    *((_QWORD *)this + 39) = 0;
    *((_DWORD *)this + 80) = 0;
    WTF::fastFree(v149, (void *)v61, v62, v63, v64, v65, v66, v67);
  }
  v150 = *((_QWORD *)this + 37);
  if (v150)
  {
    *((_QWORD *)this + 37) = 0;
    *((_DWORD *)this + 76) = 0;
    WTF::fastFree(v150, (void *)v61, v62, v63, v64, v65, v66, v67);
  }
  v151 = (JSC::DFG::Graph *)*((_QWORD *)this + 19);
  if ((JSC::DFG::Graph *)((char *)this + 168) != v151 && v151)
  {
    *((_QWORD *)this + 19) = 0;
    *((_DWORD *)this + 40) = 0;
    WTF::fastFree((unint64_t)v151, (void *)v61, v62, v63, v64, v65, v66, v67);
  }
  v152 = (JSC::DFG::Graph *)*((_QWORD *)this + 16);
  if ((JSC::DFG::Graph *)((char *)this + 144) != v152 && v152)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree((unint64_t)v152, (void *)v61, v62, v63, v64, v65, v66, v67);
  }
  v153 = *((unsigned int *)this + 15);
  if ((_DWORD)v153)
  {
    v154 = (JSC::DFG::BasicBlock **)*((_QWORD *)this + 6);
    v155 = 8 * v153;
    do
    {
      v156 = *v154;
      *v154 = 0;
      if (v156)
      {
        if (*(_DWORD *)v156 == 1)
        {
          JSC::DFG::BasicBlock::~BasicBlock(v156, (void *)v61, v62, v63, v64, v65, v66, v67);
          WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
        }
        else
        {
          --*(_DWORD *)v156;
        }
      }
      ++v154;
      v155 -= 8;
    }
    while (v155);
  }
  v165 = (JSC::DFG::Graph *)*((_QWORD *)this + 6);
  if ((JSC::DFG::Graph *)((char *)this + 64) != v165 && v165 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v165, (void *)v61, v62, v63, v64, v65, v66, v67);
  }
}

{
  JSC::DFG::Graph::~Graph(this, a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x19AEBAEF0);
}

char *JSC::DFG::Graph::opName(unsigned int a1)
{
  return (&JSC::DFG::dfgOpNames)[2 * a1];
}

uint64_t JSC::DFG::Graph::dumpCodeOrigin(JSC::DFG::Graph *this, WTF::PrintStream *a2, const char *a3, JSC::DFG::Node **a4, JSC::DFG::Node *a5, JSC::DumpContext *a6)
{
  uint64_t *v6;
  uint64_t v7;
  JSC::CodeOrigin *v9;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v31;
  WTF::PrintStream *v32;
  int v33;
  WTF::PrintStream *v34;
  BOOL v35;
  uint64_t v36;
  JSC::InlineCallFrame *v37;
  WTF::PrintStream *v38;
  unint64_t v39;
  int v40;
  WTF::PrintStream *v41;
  int v42;
  WTF::PrintStream *v43;
  uint64_t v44;
  JSC::InlineCallFrame *v45;
  WTF::PrintStream *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  int v54;
  unsigned int v55;
  WTF *v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  const char *v61;
  __int16 v62;

  v59 = -1;
  v60 = -1;
  v61 = a3;
  v62 = 257;
  if (a3)
    v6 = &v59;
  else
    v6 = (uint64_t *)((char *)this + 1088);
  v7 = *(_QWORD *)a5;
  if ((*(_QWORD *)a5 & 2) != 0)
    return 0;
  v9 = *a4;
  *a4 = a5;
  if (!v9)
    return 0;
  v12 = (_QWORD *)(*(_QWORD *)v9 & 0xFFFFFFFF8);
  if ((*(_QWORD *)v9 & 1) != 0)
    v12 = (_QWORD *)*v12;
  v13 = (_QWORD *)(v7 & 0xFFFFFFFF8);
  if ((v7 & 1) != 0)
    v13 = (_QWORD *)*v13;
  if (v12 == v13)
    return 0;
  JSC::CodeOrigin::inlineStack(v9, (uint64_t)&v56);
  JSC::CodeOrigin::inlineStack(a5, (uint64_t)&v53);
  v21 = v58;
  v22 = v55;
  if (v55 >= v58)
    v23 = v58;
  else
    v23 = v55;
  if ((_DWORD)v23)
  {
    v24 = 0;
    while (1)
    {
      v25 = *((_QWORD *)v56 + v24);
      v26 = (_QWORD *)(v25 & 0xFFFFFFFF8);
      if ((v25 & 1) != 0)
        v26 = (_QWORD *)*v26;
      v27 = *((_QWORD *)v53 + v24);
      v28 = (_QWORD *)(v27 & 0xFFFFFFFF8);
      if ((v27 & 1) != 0)
        v28 = (_QWORD *)*v28;
      if (v26 != v28)
        break;
      if (v23 == ++v24)
        goto LABEL_26;
    }
    LODWORD(v23) = v24;
  }
LABEL_26:
  v29 = v58 > v23;
  if (v58 > v23)
  {
    v31 = 2 - 2 * v58;
    do
    {
      --v21;
      v32 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      JSC::DFG::Prefix::dump((uint64_t)v6, v32);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      if (2 * v21)
      {
        v33 = v31;
        do
        {
          v34 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v34, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          v35 = __CFADD__(v33++, 1);
        }
        while (!v35);
      }
      if (v58 <= v21)
      {
LABEL_66:
        __break(0xC471u);
        JUMPOUT(0x1983BF5A0);
      }
      v36 = *((_QWORD *)v56 + v21);
      v37 = (JSC::InlineCallFrame *)(v36 & 0xFFFFFFFF8);
      if ((v36 & 1) != 0)
        v37 = *(JSC::InlineCallFrame **)v37;
      v38 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v38, "%s", "<-- ");
      JSC::InlineCallFrame::dumpInContext(v37, v38, a6);
      WTF::PrintStream::printf(v38, "%s", "\n");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v31 += 2;
    }
    while (v23 < v21);
    v22 = v55;
    v29 = v29;
  }
  if (v22 > v23)
  {
    v39 = v23;
    v40 = -2 * v23;
    do
    {
      v41 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      JSC::DFG::Prefix::dump((uint64_t)v6, v41);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      if (2 * (_DWORD)v39)
      {
        v42 = v40;
        do
        {
          v43 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v43, "%s", " ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          v35 = __CFADD__(v42++, 1);
        }
        while (!v35);
      }
      if (v39 >= v55)
        goto LABEL_66;
      v44 = *((_QWORD *)v53 + v39);
      v45 = (JSC::InlineCallFrame *)(v44 & 0xFFFFFFFF8);
      if ((v44 & 1) != 0)
        v45 = *(JSC::InlineCallFrame **)v45;
      v46 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v46, "%s", "--> ");
      JSC::InlineCallFrame::dumpInContext(v45, v46, a6);
      WTF::PrintStream::printf(v46, "%s", "\n");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      ++v39;
      v22 = v55;
      v40 -= 2;
    }
    while (v39 < v55);
    v29 = 1;
  }
  v47 = v53;
  if (v22)
  {
    v48 = 8 * v22;
    do
    {
      v49 = *(_QWORD *)v47;
      if ((*(_QWORD *)v47 & 1) != 0 && (v49 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v49 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
      v47 = (WTF *)((char *)v47 + 8);
      v48 -= 8;
    }
    while (v48);
    v47 = v53;
  }
  if (v47)
  {
    v53 = 0;
    v54 = 0;
    WTF::fastFree((unint64_t)v47, v14, v15, v16, v17, v18, v19, v20);
  }
  v50 = v56;
  if (v58)
  {
    v51 = 8 * v58;
    do
    {
      v52 = *(_QWORD *)v50;
      if ((*(_QWORD *)v50 & 1) != 0 && (v52 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v52 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
      v50 = (WTF *)((char *)v50 + 8);
      v51 -= 8;
    }
    while (v51);
    v50 = v56;
  }
  if (v50)
  {
    v56 = 0;
    v57 = 0;
    WTF::fastFree((unint64_t)v50, v14, v15, v16, v17, v18, v19, v20);
  }
  return v29;
}

void JSC::DFG::Graph::dump(JSC::DFG::Graph *this, WTF::PrintStream *a2, const char *a3, JSC::DFG::Node *a4, JSC::DumpContext *a5)
{
  JSC::DFG::Node *v5;
  WTF::PrintStream *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  WTF::PrintStream *v11;
  _QWORD *v12;
  int v13;
  int v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::PrintStream *v18;
  float v19;
  WTF::PrintStream *v20;
  char **v21;
  char *v22;
  char *v23;
  uint64_t v24;
  WTF::PrintStream *v25;
  float v26;
  WTF::PrintStream *v27;
  float v28;
  unsigned int v29;
  uint64_t v30;
  WTF::PrintStream *v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  WTF::PrintStream *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  char *v41;
  WTF::PrintStream *v42;
  float v43;
  unsigned int v44;
  uint64_t v45;
  JSC::DFG::Graph *v46;
  unint64_t v47;
  uint64_t v48;
  JSC::DFG::Edge *v49;
  WTF::PrintStream *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  char *v55;
  uint64_t v56;
  WTF::PrintStream *v57;
  float v58;
  unsigned int v59;
  uint64_t v60;
  char *v61;
  WTF::PrintStream *v62;
  float v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  WTF::PrintStream *v69;
  float v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  WTF::PrintStream *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t);
  uint64_t v79;
  char *v80;
  WTF::PrintStream *v81;
  float v82;
  unsigned int v83;
  uint64_t v84;
  char *v85;
  WTF::PrintStream *v86;
  float v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  WTF::PrintStream *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(uint64_t);
  uint64_t v96;
  char *v97;
  WTF::PrintStream *v98;
  float v99;
  unsigned int v100;
  uint64_t v101;
  char *v102;
  WTF::PrintStream *v103;
  float v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  WTF::PrintStream *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF *v116;
  size_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  WTF::PrintStream *v134;
  JSC::DFG *v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)(uint64_t);
  uint64_t v140;
  char *v141;
  WTF::PrintStream *v142;
  float v143;
  unsigned int v144;
  uint64_t v145;
  char *v146;
  WTF::PrintStream *v147;
  float v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  WTF::PrintStream *v152;
  JSC *v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t (*v157)(uint64_t);
  uint64_t v158;
  char *v159;
  WTF::PrintStream *v160;
  float v161;
  unsigned int v162;
  uint64_t v163;
  char *v164;
  WTF::PrintStream *v165;
  float v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  int v171;
  WTF::PrintStream *v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t (*v176)(uint64_t);
  uint64_t v177;
  char *v178;
  WTF::PrintStream *v179;
  float v180;
  unsigned int v181;
  uint64_t v182;
  char *v183;
  WTF::PrintStream *v184;
  float v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t (*v195)(uint64_t);
  char *v196;
  uint64_t v197;
  WTF::PrintStream *v198;
  float v199;
  unsigned int v200;
  char *v201;
  uint64_t v202;
  WTF::PrintStream *v203;
  float v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  WTF::PrintStream *v208;
  float v209;
  const char *v210;
  WTF::PrintStream *v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t (*v217)(uint64_t);
  char *v218;
  uint64_t v219;
  WTF::PrintStream *v220;
  float v221;
  unsigned int v222;
  char *v223;
  uint64_t v224;
  WTF::PrintStream *v225;
  float v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  const char *v230;
  WTF::PrintStream *v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t (*v237)(uint64_t);
  char *v238;
  uint64_t v239;
  WTF::PrintStream *v240;
  float v241;
  unsigned int v242;
  char *v243;
  uint64_t v244;
  WTF::PrintStream *v245;
  float v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  WTF::PrintStream *v250;
  float v251;
  const char *v252;
  WTF::PrintStream *v253;
  int v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t (*v259)(uint64_t);
  char *v260;
  uint64_t v261;
  WTF::PrintStream *v262;
  float v263;
  unsigned int v264;
  char *v265;
  uint64_t v266;
  WTF::PrintStream *v267;
  float v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t v271;
  WTF::PrintStream *v272;
  WTF::PrintStream *v273;
  int v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t (*v279)(uint64_t);
  char *v280;
  uint64_t v281;
  WTF::PrintStream *v282;
  float v283;
  unsigned int v284;
  char *v285;
  uint64_t v286;
  WTF::PrintStream *v287;
  float v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t v291;
  WTF::PrintStream *v292;
  WTF::PrintStream *v293;
  int v294;
  WTF::PrintStream *v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t (*v299)(uint64_t);
  char *v300;
  uint64_t v301;
  WTF::PrintStream *v302;
  float v303;
  unsigned int v304;
  char *v305;
  uint64_t v306;
  WTF::PrintStream *v307;
  float v308;
  unsigned int v309;
  uint64_t v310;
  uint64_t v311;
  const void *v312;
  WTF::PrintStream *v313;
  int v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t (*v317)(uint64_t);
  char *v318;
  uint64_t v319;
  WTF::PrintStream *v320;
  float v321;
  unsigned int v322;
  char *v323;
  uint64_t v324;
  WTF::PrintStream *v325;
  float v326;
  unsigned int v327;
  uint64_t v328;
  uint64_t v329;
  WTF::PrintStream *v330;
  float v331;
  WTF::PrintStream *v332;
  float v333;
  unsigned int v334;
  _QWORD *v335;
  WTF::PrintStream *v336;
  uint64_t v337;
  uint64_t v338;
  _QWORD *v339;
  _QWORD **v340;
  _QWORD *v341;
  int v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t (*v345)(uint64_t);
  uint64_t v346;
  char *v347;
  WTF::PrintStream *v348;
  float v349;
  unsigned int v350;
  uint64_t v351;
  char *v352;
  WTF::PrintStream *v353;
  float v354;
  unsigned int v355;
  uint64_t v356;
  uint64_t v357;
  WTF::PrintStream *v358;
  WTF::PrintStream *v359;
  int v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t (*v363)(uint64_t);
  uint64_t v364;
  char *v365;
  WTF::PrintStream *v366;
  float v367;
  unsigned int v368;
  uint64_t v369;
  char *v370;
  WTF::PrintStream *v371;
  float v372;
  unsigned int v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t *v376;
  uint64_t v377;
  _DWORD *v378;
  WTF::PrintStream *v379;
  int v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t (*v383)(uint64_t);
  uint64_t v384;
  char *v385;
  WTF::PrintStream *v386;
  float v387;
  unsigned int v388;
  uint64_t v389;
  char *v390;
  WTF::PrintStream *v391;
  float v392;
  unsigned int v393;
  uint64_t v394;
  uint64_t v395;
  void *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  JSC::Structure *v401;
  WTF::PrintStream *v402;
  int v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t (*v406)(uint64_t);
  uint64_t v407;
  char *v408;
  WTF::PrintStream *v409;
  float v410;
  unsigned int v411;
  uint64_t v412;
  char *v413;
  WTF::PrintStream *v414;
  float v415;
  unsigned int v416;
  uint64_t v417;
  uint64_t v418;
  void *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  WTF *v426;
  char *v427;
  WTF::PrintStream *v428;
  uint64_t v429;
  uint64_t v430;
  int v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t (*v434)(uint64_t);
  uint64_t v435;
  char *v436;
  WTF::PrintStream *v437;
  float v438;
  unsigned int v439;
  uint64_t v440;
  char *v441;
  WTF::PrintStream *v442;
  float v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  _DWORD *v448;
  uint64_t v449;
  uint64_t v450;
  char v451;
  uint64_t v452;
  WTF::PrintStream *v453;
  float v454;
  unsigned int v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  int v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t (*v462)(uint64_t);
  char *v463;
  uint64_t v464;
  WTF::PrintStream *v465;
  float v466;
  unsigned int v467;
  char *v468;
  uint64_t v469;
  WTF::PrintStream *v470;
  float v471;
  unsigned int v472;
  uint64_t v473;
  uint64_t v474;
  WTF::PrintStream *v475;
  WTF::PrintStream *v476;
  uint64_t v477;
  WTF::PrintStream *v478;
  float v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  WTF::PrintStream *v484;
  int v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t (*v488)(uint64_t);
  uint64_t v489;
  char *v490;
  WTF::PrintStream *v491;
  float v492;
  unsigned int v493;
  uint64_t v494;
  char *v495;
  WTF::PrintStream *v496;
  float v497;
  unsigned int v498;
  uint64_t v499;
  uint64_t v500;
  WTF::PrintStream *v501;
  float v502;
  JSC::Structure *v503;
  int v504;
  uint64_t v505;
  int v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t (*v509)(uint64_t);
  char *v510;
  uint64_t v511;
  WTF::PrintStream *v512;
  float v513;
  unsigned int v514;
  char *v515;
  uint64_t v516;
  WTF::PrintStream *v517;
  float v518;
  unsigned int v519;
  uint64_t v520;
  JSType v521;
  uint64_t v522;
  int v523;
  WTF::PrintStream *v524;
  int v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t (*v528)(uint64_t);
  char *v529;
  uint64_t v530;
  WTF::PrintStream *v531;
  float v532;
  unsigned int v533;
  char *v534;
  uint64_t v535;
  WTF::PrintStream *v536;
  float v537;
  unsigned int v538;
  uint64_t v539;
  uint64_t v540;
  int *v542;
  _QWORD *v543;
  WTF::PrintStream *v544;
  uint64_t v545;
  WTF::PrintStream *v546;
  WTF::PrintStream *v547;
  float v548;
  unsigned int *v549;
  uint64_t v550;
  WTF::PrintStream *v551;
  int v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t (*v555)(uint64_t);
  uint64_t v556;
  char *v557;
  WTF::PrintStream *v558;
  float v559;
  unsigned int v560;
  uint64_t v561;
  char *v562;
  WTF::PrintStream *v563;
  float v564;
  unsigned int v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  float v573;
  char *v574;
  size_t v575;
  uint64_t v576;
  unint64_t v577;
  uint64_t v578;
  WTF::PrintStream *v579;
  int v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t (*v583)(uint64_t);
  char *v584;
  uint64_t v585;
  WTF::PrintStream *v586;
  float v587;
  unsigned int v588;
  uint64_t v589;
  char *v590;
  WTF::PrintStream *v591;
  float v592;
  unsigned int v593;
  uint64_t v594;
  uint64_t v595;
  int v596;
  uint64_t v597;
  _QWORD *v598;
  WTF::PrintStream *v599;
  uint64_t v600;
  unint64_t v601;
  uint64_t v602;
  WTF::PrintStream *v603;
  int v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t (*v607)(uint64_t);
  char *v608;
  uint64_t v609;
  WTF::PrintStream *v610;
  float v611;
  unsigned int v612;
  uint64_t v613;
  char *v614;
  WTF::PrintStream *v615;
  float v616;
  unsigned int v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  _QWORD *v621;
  WTF::PrintStream *v622;
  uint64_t v623;
  unint64_t v624;
  uint64_t v625;
  WTF::PrintStream *v626;
  int v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t (*v630)(uint64_t);
  char *v631;
  uint64_t v632;
  WTF::PrintStream *v633;
  float v634;
  unsigned int v635;
  uint64_t v636;
  char *v637;
  WTF::PrintStream *v638;
  float v639;
  unsigned int v640;
  uint64_t v641;
  uint64_t v642;
  JSC::DFG::Node *v643;
  unsigned int v644;
  uint64_t *v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  JSC::Structure *v649;
  WTF::PrintStream *v650;
  int v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t (*v654)(uint64_t);
  char *v655;
  uint64_t v656;
  WTF::PrintStream *v657;
  float v658;
  unsigned int v659;
  char *v660;
  uint64_t v661;
  WTF::PrintStream *v662;
  float v663;
  unsigned int v664;
  uint64_t v665;
  uint64_t v666;
  void *v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  WTF *v674;
  WTF::PrintStream *v675;
  float v676;
  const char *v677;
  WTF::PrintStream *v678;
  _QWORD *v679;
  _QWORD *v680;
  _QWORD *v681;
  unint64_t v682;
  WTF::PrintStream *v683;
  int v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t (*v687)(uint64_t);
  char *v688;
  uint64_t v689;
  WTF::PrintStream *v690;
  float v691;
  unsigned int v692;
  char *v693;
  uint64_t v694;
  WTF::PrintStream *v695;
  float v696;
  unsigned int v697;
  uint64_t v698;
  uint64_t v699;
  WTF::PrintStream *v700;
  WTF::PrintStream *v701;
  WTF::PrintStream *v702;
  float v703;
  WTF::PrintStream *v704;
  float v705;
  int v706;
  uint64_t v707;
  int v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t (*v711)(uint64_t);
  char *v712;
  uint64_t v713;
  WTF::PrintStream *v714;
  float v715;
  unsigned int v716;
  char *v717;
  uint64_t v718;
  WTF::PrintStream *v719;
  float v720;
  unsigned int v721;
  uint64_t v722;
  _BOOL4 v723;
  uint64_t v724;
  int v726;
  uint64_t v727;
  int v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t (*v731)(uint64_t);
  uint64_t v732;
  char *v733;
  WTF::PrintStream *v734;
  float v735;
  unsigned int v736;
  uint64_t v737;
  WTF::PrintStream *v738;
  int v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t (*v742)(uint64_t);
  uint64_t v743;
  char *v744;
  WTF::PrintStream *v745;
  float v746;
  unsigned int v747;
  int v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t (*v751)(uint64_t);
  uint64_t v752;
  char *v753;
  WTF::PrintStream *v754;
  float v755;
  unsigned int v756;
  uint64_t v757;
  WTF::PrintStream *v758;
  float v759;
  WTF::PrintStream *v760;
  unsigned int v761;
  uint64_t v762;
  uint64_t v763;
  WTF::PrintStream *v764;
  int v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t (*v768)(uint64_t);
  uint64_t v769;
  char *v770;
  WTF::PrintStream *v771;
  float v772;
  unsigned int v773;
  uint64_t v774;
  char *v775;
  WTF::PrintStream *v776;
  float v777;
  unsigned int v778;
  uint64_t v779;
  uint64_t v780;
  WTF::PrintStream *v781;
  float v782;
  uint64_t v783;
  uint64_t v784;
  WTF::PrintStream *v785;
  int v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t (*v789)(uint64_t);
  uint64_t v790;
  char *v791;
  WTF::PrintStream *v792;
  float v793;
  unsigned int v794;
  uint64_t v795;
  char *v796;
  WTF::PrintStream *v797;
  float v798;
  unsigned int v799;
  uint64_t v800;
  uint64_t v801;
  int v802;
  WTF::PrintStream *v803;
  int v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t (*v807)(uint64_t);
  char *v808;
  uint64_t v809;
  WTF::PrintStream *v810;
  float v811;
  unsigned int v812;
  char *v813;
  uint64_t v814;
  WTF::PrintStream *v815;
  float v816;
  unsigned int v817;
  uint64_t v818;
  uint64_t v819;
  const char *v820;
  const char *v821;
  int v822;
  uint64_t v823;
  int v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t (*v827)(uint64_t);
  char *v828;
  uint64_t v829;
  WTF::PrintStream *v830;
  float v831;
  unsigned int v832;
  char *v833;
  uint64_t v834;
  WTF::PrintStream *v835;
  float v836;
  unsigned int v837;
  uint64_t v838;
  uint64_t v839;
  const char *v840;
  WTF::PrintStream *v841;
  const void *v842;
  WTF::PrintStream *v843;
  int v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t (*v847)(uint64_t);
  char *v848;
  uint64_t v849;
  WTF::PrintStream *v850;
  float v851;
  unsigned int v852;
  char *v853;
  uint64_t v854;
  WTF::PrintStream *v855;
  float v856;
  unsigned int v857;
  uint64_t v858;
  uint64_t v859;
  const void *v860;
  WTF::PrintStream *v861;
  int v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t (*v865)(uint64_t);
  char *v866;
  uint64_t v867;
  WTF::PrintStream *v868;
  float v869;
  unsigned int v870;
  char *v871;
  uint64_t v872;
  WTF::PrintStream *v873;
  float v874;
  unsigned int v875;
  uint64_t v876;
  uint64_t v877;
  const void *v878;
  WTF::PrintStream *v879;
  int v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t (*v883)(uint64_t);
  char *v884;
  uint64_t v885;
  WTF::PrintStream *v886;
  float v887;
  unsigned int v888;
  char *v889;
  uint64_t v890;
  WTF::PrintStream *v891;
  float v892;
  unsigned int v893;
  uint64_t v894;
  uint64_t v895;
  WTF *v896;
  uint64_t v897;
  int v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t (*v901)(uint64_t);
  char *v902;
  uint64_t v903;
  WTF::PrintStream *v904;
  float v905;
  unsigned int v906;
  char *v907;
  uint64_t v908;
  WTF::PrintStream *v909;
  float v910;
  unsigned int v911;
  uint64_t v912;
  uint64_t v913;
  WTF::PrintStream *v914;
  uint64_t v915;
  unsigned int *v916;
  WTF::PrintStream *v917;
  int v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t (*v921)(uint64_t);
  uint64_t v922;
  char *v923;
  WTF::PrintStream *v924;
  float v925;
  unsigned int v926;
  uint64_t v927;
  char *v928;
  WTF::PrintStream *v929;
  float v930;
  unsigned int v931;
  uint64_t v932;
  uint64_t v933;
  WTF::PrintStream *v934;
  float v935;
  WTF::PrintStream *v936;
  float v937;
  WTF::PrintStream *v938;
  WTF::PrintStream *v939;
  WTF::PrintStream *v940;
  float v941;
  WTF::PrintStream *v942;
  WTF::PrintStream *v943;
  float v944;
  WTF::PrintStream *v945;
  float v946;
  WTF::PrintStream *v947;
  WTF::PrintStream *v948;
  float v949;
  _DWORD *v950;
  unsigned int v951;
  _QWORD *v952;
  WTF::PrintStream *v953;
  const void *v954;
  WTF::PrintStream *v955;
  WTF::PrintStream *v956;
  float v957;
  uint64_t v958;
  int v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t (*v962)(uint64_t);
  char *v963;
  uint64_t v964;
  WTF::PrintStream *v965;
  float v966;
  unsigned int v967;
  char *v968;
  uint64_t v969;
  WTF::PrintStream *v970;
  float v971;
  unsigned int v972;
  uint64_t v973;
  uint64_t v974;
  WTF::PrintStream *v975;
  float v976;
  uint64_t v977;
  WTF::PrintStream *v978;
  int v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t (*v982)(uint64_t);
  uint64_t v983;
  char *v984;
  WTF::PrintStream *v985;
  float v986;
  unsigned int v987;
  uint64_t v988;
  char *v989;
  WTF::PrintStream *v990;
  float v991;
  unsigned int v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  WTF::PrintStream *v996;
  int v997;
  const char *v998;
  WTF::PrintStream *v999;
  WTF::PrintStream *v1000;
  uint64_t v1001;
  WTF::PrintStream *v1002;
  int v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t (*v1006)(uint64_t);
  uint64_t v1007;
  char *v1008;
  WTF::PrintStream *v1009;
  float v1010;
  unsigned int v1011;
  uint64_t v1012;
  char *v1013;
  WTF::PrintStream *v1014;
  float v1015;
  unsigned int v1016;
  uint64_t v1017;
  uint64_t v1018;
  JSC::GetByVariant **v1019;
  WTF::PrintStream *v1020;
  int v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t (*v1024)(uint64_t);
  uint64_t v1025;
  char *v1026;
  WTF::PrintStream *v1027;
  float v1028;
  unsigned int v1029;
  uint64_t v1030;
  char *v1031;
  WTF::PrintStream *v1032;
  float v1033;
  unsigned int v1034;
  uint64_t v1035;
  uint64_t v1036;
  JSC::InByStatus *v1037;
  WTF::PrintStream *v1038;
  int v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t (*v1042)(uint64_t);
  uint64_t v1043;
  char *v1044;
  WTF::PrintStream *v1045;
  float v1046;
  unsigned int v1047;
  uint64_t v1048;
  char *v1049;
  WTF::PrintStream *v1050;
  float v1051;
  unsigned int v1052;
  uint64_t v1053;
  uint64_t v1054;
  JSC::PutByStatus *v1055;
  WTF::PrintStream *v1056;
  int v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t (*v1060)(uint64_t);
  uint64_t v1061;
  char *v1062;
  WTF::PrintStream *v1063;
  float v1064;
  unsigned int v1065;
  uint64_t v1066;
  char *v1067;
  WTF::PrintStream *v1068;
  float v1069;
  unsigned int v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  int v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t (*v1078)(uint64_t);
  char *v1079;
  uint64_t v1080;
  WTF::PrintStream *v1081;
  float v1082;
  unsigned int v1083;
  char *v1084;
  uint64_t v1085;
  WTF::PrintStream *v1086;
  float v1087;
  unsigned int v1088;
  uint64_t v1089;
  uint64_t v1090;
  WTF::PrintStream *v1091;
  float v1092;
  WTF::PrintStream *v1093;
  float *v1094;
  WTF::PrintStream *v1095;
  int v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t (*v1099)(uint64_t);
  uint64_t v1100;
  char *v1101;
  WTF::PrintStream *v1102;
  float v1103;
  unsigned int v1104;
  uint64_t v1105;
  char *v1106;
  WTF::PrintStream *v1107;
  float v1108;
  unsigned int v1109;
  uint64_t v1110;
  uint64_t v1111;
  WTF::PrintStream *v1112;
  float v1113;
  WTF::PrintStream *v1114;
  float v1115;
  float *v1116;
  uint64_t v1117;
  int v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t (*v1121)(uint64_t);
  uint64_t v1122;
  char *v1123;
  WTF::PrintStream *v1124;
  float v1125;
  unsigned int v1126;
  uint64_t v1127;
  char *v1128;
  WTF::PrintStream *v1129;
  float v1130;
  unsigned int v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  const char *v1135;
  WTF::PrintStream *v1136;
  unint64_t v1137;
  uint64_t v1138;
  unint64_t i;
  uint64_t v1140;
  WTF::PrintStream *v1141;
  int v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t (*v1145)(uint64_t);
  uint64_t v1146;
  char *v1147;
  WTF::PrintStream *v1148;
  float v1149;
  unsigned int v1150;
  uint64_t v1151;
  char *v1152;
  WTF::PrintStream *v1153;
  float v1154;
  unsigned int v1155;
  uint64_t v1156;
  uint64_t v1157;
  WTF::PrintStream *v1158;
  float v1159;
  WTF::PrintStream *v1160;
  int v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t (*v1164)(uint64_t);
  uint64_t v1165;
  char *v1166;
  WTF::PrintStream *v1167;
  float v1168;
  JSC::DFG::Node *v1169;
  unsigned int v1170;
  uint64_t v1171;
  char *v1172;
  WTF::PrintStream *v1173;
  float v1174;
  unsigned int v1175;
  uint64_t v1176;
  uint64_t v1177;
  WTF::PrintStream *v1178;
  float v1179;
  uint64_t v1180;
  unint64_t v1181;
  unint64_t j;
  WTF::PrintStream *v1183;
  int v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t (*v1187)(uint64_t);
  uint64_t v1188;
  char *v1189;
  WTF::PrintStream *v1190;
  float v1191;
  unsigned int v1192;
  uint64_t v1193;
  char *v1194;
  WTF::PrintStream *v1195;
  float v1196;
  unsigned int v1197;
  uint64_t v1198;
  uint64_t v1199;
  JSC::DFG::Node *v1200;
  const char *v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t *v1207;
  uint64_t *v1208;
  uint64_t *v1209;
  const char *v1210;
  void *v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  WTF *v1217;
  uint64_t *v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t *v1224;
  uint64_t *v1225;
  uint64_t *v1226;
  uint64_t *v1227;
  void *v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  WTF *v1234;
  int mayExit;
  JSC::DFG::Node *v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  int v1242;
  uint64_t v1243;
  int v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t (*v1247)(uint64_t);
  uint64_t v1248;
  char *v1249;
  WTF::PrintStream *v1250;
  float v1251;
  unsigned int v1252;
  uint64_t v1253;
  char *v1254;
  WTF::PrintStream *v1255;
  float v1256;
  unsigned int v1257;
  uint64_t v1258;
  uint64_t v1259;
  const char *v1260;
  WTF::PrintStream *v1261;
  uint64_t v1262;
  int v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t (*v1266)(uint64_t);
  uint64_t v1267;
  char *v1268;
  WTF::PrintStream *v1269;
  float v1270;
  unsigned int v1271;
  uint64_t v1272;
  char *v1273;
  WTF::PrintStream *v1274;
  float v1275;
  unsigned int v1276;
  uint64_t v1277;
  uint64_t v1278;
  WTF::PrintStream *v1279;
  float v1280;
  unint64_t v1281;
  unint64_t v1282;
  uint64_t v1283;
  int v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t (*v1287)(uint64_t);
  char *v1288;
  uint64_t v1289;
  WTF::PrintStream *v1290;
  float v1291;
  unsigned int v1292;
  char *v1293;
  uint64_t v1294;
  WTF::PrintStream *v1295;
  float v1296;
  unsigned int v1297;
  uint64_t v1298;
  uint64_t v1299;
  WTF::PrintStream *v1300;
  int v1301;
  WTF::PrintStream *v1302;
  unint64_t v1303;
  unint64_t v1304;
  unint64_t v1305;
  unint64_t v1306;
  WTF::PrintStream *v1307;
  int v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t (*v1311)(uint64_t);
  uint64_t v1312;
  char *v1313;
  WTF::PrintStream *v1314;
  float v1315;
  unsigned int v1316;
  uint64_t v1317;
  char *v1318;
  WTF::PrintStream *v1319;
  float v1320;
  unsigned int v1321;
  uint64_t v1322;
  uint64_t v1323;
  WTF::PrintStream *v1324;
  float v1325;
  int v1326;
  char *v1327;
  uint64_t v1328;
  int v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t (*v1332)(uint64_t);
  char *v1333;
  uint64_t v1334;
  WTF::PrintStream *v1335;
  float v1336;
  unsigned int v1337;
  char *v1338;
  uint64_t v1339;
  WTF::PrintStream *v1340;
  float v1341;
  unsigned int v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  WTF::PrintStream *v1346;
  float v1347;
  size_t v1348;
  uint64_t v1349;
  int v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t (*v1353)(uint64_t);
  char *v1354;
  uint64_t v1355;
  WTF::PrintStream *v1356;
  float v1357;
  unsigned int v1358;
  char *v1359;
  uint64_t v1360;
  WTF::PrintStream *v1361;
  float v1362;
  unsigned int v1363;
  uint64_t v1364;
  uint64_t v1365;
  WTF::PrintStream *v1366;
  float v1367;
  WTF::PrintStream *v1368;
  uint64_t v1369;
  _QWORD *v1370;
  _QWORD *v1371;
  _QWORD *v1372;
  _QWORD *v1373;
  _QWORD *v1374;
  WTF::PrintStream *v1375;
  _QWORD *v1376;
  _QWORD *v1377;
  JSC *v1378;
  WTF::PrintStream *v1379;
  float v1380;
  uint64_t v1381;
  WTF::PrintStream *v1382;
  float v1383;
  void *v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  char *v1392;
  WTF::PrintStream *v1393;
  float v1394;
  unsigned int v1395;
  uint64_t v1396;
  char *v1397;
  WTF::PrintStream *v1398;
  float v1399;
  unsigned int v1400;
  uint64_t v1401;
  char *v1402;
  WTF::PrintStream *v1403;
  float v1404;
  unsigned int v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  WTF::PrintStream *v1410;
  float v1411;
  char *v1412;
  size_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  int v1416;
  uint64_t v1417;
  WTF::PrintStream *v1418;
  char v1420;
  _QWORD *v1421;
  _QWORD *v1422;
  char v1423;
  JSC::DFG::Edge *v1424;
  JSC::DFG::Node *v1426;
  uint64_t v1428;
  uint64_t v1429;
  WTF *v1430;
  const char *v1431;
  uint64_t v1432;
  _QWORD *v1433;
  const char *v1434;
  uint64_t v1435;
  char *v1436;
  uint64_t v1437;
  unsigned __int8 v1438;
  uint64_t v1439;
  int v1440;
  const char *v1441;
  __int16 v1442;
  __int128 v1443;
  WTF *v1444;
  WTF *v1445;
  __int128 v1446;
  uint64_t v1447;
  char v1448;
  uint64_t v1449;

  v5 = a4;
  v6 = a2;
  v1449 = *MEMORY[0x1E0C80C00];
  v1439 = -1;
  v1440 = -1;
  v1441 = a3;
  v1442 = 257;
  if (a3)
    v7 = &v1439;
  else
    v7 = (uint64_t *)((char *)this + 1088);
  v8 = *((unsigned __int16 *)a4 + 9);
  v10 = *((_DWORD *)a4 + 13);
  v9 = *((_DWORD *)a4 + 14);
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  JSC::DFG::Prefix::dump((uint64_t)v7, v11);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  v12 = (_QWORD *)(*(_QWORD *)v5 & 0xFFFFFFFF8);
  if ((*(_QWORD *)v5 & 1) != 0)
    v12 = (_QWORD *)*v12;
  v13 = v10 - ((v9 & 8) >> 3);
  if (v12)
  {
    v1416 = 0;
    do
    {
      v1417 = v12[2];
      v12 = (_QWORD *)(v1417 & 0xFFFFFFFF8);
      if ((v1417 & 1) != 0)
        v12 = (_QWORD *)*v12;
      v1416 -= 2;
    }
    while (v12);
    if (v1416)
    {
      do
      {
        v1418 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        WTF::PrintStream::printf(v1418, "%s", " ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
      }
      while (!__CFADD__(v1416++, 1));
    }
  }
  v14 = *((_DWORD *)v5 + 5);
  v15 = "  ";
  if (v14 >= 100)
    v15 = " ";
  if (v14 < 10)
    v15 = "   ";
  v16 = 32;
  if ((v9 & 8) != 0)
    v16 = 33;
  WTF::PrintStream::printf(v6, "%sD@%d:<%c%u:", v15, v14, v16, v13);
  if ((*((_BYTE *)v5 + 56) & 7) == 0 || *((_DWORD *)v5 + 12) == 0x3FFFFFFF || *((_WORD *)v5 + 9) == 386)
  {
    v17 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v18 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
    WTF::StringImpl::utf8ForCharacters("-", 1uLL, (uint64_t)&v1444, v19);
    WTF::printExpectedCStringHelper(v18, "StringView", &v1444);
    if ((_DWORD)v1445 != -1)
      ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1434, &v1444);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
  }
  else
  {
    LODWORD(v1444) = *((_DWORD *)v5 + 12);
    v20 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    JSC::VirtualRegister::dump((unsigned int *)&v1444, v20);
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  v21 = &(&JSC::DFG::dfgOpNames)[2 * v8];
  v23 = *v21;
  v22 = v21[1];
  v24 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  v25 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
  WTF::StringImpl::utf8ForCharacters(">\t", 2uLL, (uint64_t)&v1444, v26);
  WTF::printExpectedCStringHelper(v25, "StringView", &v1444);
  if ((_DWORD)v1445 != -1)
    ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1434, &v1444);
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
  v27 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
  if (v23)
  {
    v29 = (_DWORD)v22 - 1;
    if (!v22)
      v29 = 0;
    WTF::StringImpl::utf8ForCharacters(v23, v29, (uint64_t)&v1444, v28);
  }
  else
  {
    v30 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v30 = 1;
    *(_QWORD *)(v30 + 8) = 0;
    *(_BYTE *)(v30 + 16) = 0;
    v1444 = (WTF *)v30;
    LODWORD(v1445) = 0;
  }
  WTF::printExpectedCStringHelper(v27, "StringView", &v1444);
  if ((_DWORD)v1445 != -1)
    ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1434, &v1444);
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
  v31 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
  WTF::StringImpl::utf8ForCharacters("(", 1uLL, (uint64_t)&v1444, v32);
  WTF::printExpectedCStringHelper(v31, "StringView", &v1444);
  if ((_DWORD)v1445 != -1)
    ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1434, &v1444);
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  v1434 = ", ";
  v1435 = 3;
  v1436 = (char *)&str_24_8;
  v1437 = 1;
  v1438 = 0;
  v33 = *((_QWORD *)v5 + 3);
  v1424 = (JSC::DFG::Node *)((char *)v5 + 24);
  v1428 = (uint64_t)v6;
  v1426 = v5;
  if ((*((_BYTE *)v5 + 56) & 0x10) != 0)
  {
    v45 = *((_QWORD *)v5 + 4);
    v46 = this;
    if ((int)v45 + (int)v33 > v33)
    {
      v47 = *((_QWORD *)v5 + 3);
      v48 = 8 * v47;
      do
      {
        if (v47 >= *((unsigned int *)v46 + 41))
        {
          __break(0xC471u);
          JUMPOUT(0x1983C8F58);
        }
        v49 = (JSC::DFG::Edge *)(*((_QWORD *)v46 + 19) + v48);
        if ((*(_QWORD *)v49 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v50 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
          v51 = v1438;
          v52 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v50 + 32))(v50);
          v53 = v52;
          v54 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 32);
          if (v51)
          {
            v55 = (char *)v1434;
            v56 = v1435;
            v57 = (WTF::PrintStream *)v54(v52);
            if (v55)
            {
              v59 = v56 - 1;
              if (!v56)
                v59 = 0;
              WTF::StringImpl::utf8ForCharacters(v55, v59, (uint64_t)&v1444, v58);
            }
            else
            {
              v65 = WTF::fastMalloc((WTF *)0x11);
              *(_DWORD *)v65 = 1;
              *(_QWORD *)(v65 + 8) = 0;
              *(_BYTE *)(v65 + 16) = 0;
              v1444 = (WTF *)v65;
              LODWORD(v1445) = 0;
            }
            WTF::printExpectedCStringHelper(v57, "StringView", &v1444);
            if ((_DWORD)v1445 != -1)
              ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
            (*(void (**)(uint64_t))(*(_QWORD *)v53 + 40))(v53);
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v50 + 40))(v50);
            v5 = v1426;
          }
          else
          {
            v61 = v1436;
            v60 = v1437;
            v62 = (WTF::PrintStream *)v54(v52);
            if (v61)
            {
              v64 = v60 - 1;
              if (!v60)
                v64 = 0;
              WTF::StringImpl::utf8ForCharacters(v61, v64, (uint64_t)&v1444, v63);
            }
            else
            {
              v66 = WTF::fastMalloc((WTF *)0x11);
              *(_DWORD *)v66 = 1;
              *(_QWORD *)(v66 + 8) = 0;
              *(_BYTE *)(v66 + 16) = 0;
              v1444 = (WTF *)v66;
              LODWORD(v1445) = 0;
            }
            WTF::printExpectedCStringHelper(v62, "StringView", &v1444);
            v5 = v1426;
            if ((_DWORD)v1445 != -1)
              ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
            (*(void (**)(uint64_t))(*(_QWORD *)v53 + 40))(v53);
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v50 + 40))(v50);
            v1438 = 1;
          }
          JSC::DFG::Edge::dump(v49, v50);
          v6 = (WTF::PrintStream *)v1428;
          (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
          v33 = *((_QWORD *)v5 + 3);
          v45 = *((_QWORD *)v5 + 4);
          v46 = this;
        }
        ++v47;
        v48 += 8;
      }
      while (v47 < (v33 + v45));
    }
  }
  else
  {
    if ((v33 & 0xFF00FFFFFFFFFFFFLL) != 0
      || (v34 = *((_QWORD *)v5 + 4), (v34 & 0xFF00FFFFFFFFFFFFLL) != 0)
      || (*((_QWORD *)v5 + 5) & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v35 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
      v36 = v1438;
      v37 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v35 + 32))(v35);
      v38 = v37;
      v39 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 32);
      if (v36)
      {
        v41 = (char *)v1434;
        v40 = v1435;
        v42 = (WTF::PrintStream *)v39(v37);
        if (v41)
        {
          v44 = v40 - 1;
          if (!v40)
            v44 = 0;
          WTF::StringImpl::utf8ForCharacters(v41, v44, (uint64_t)&v1444, v43);
        }
        else
        {
          v72 = WTF::fastMalloc((WTF *)0x11);
          *(_DWORD *)v72 = 1;
          *(_QWORD *)(v72 + 8) = 0;
          *(_BYTE *)(v72 + 16) = 0;
          v1444 = (WTF *)v72;
          LODWORD(v1445) = 0;
        }
        WTF::printExpectedCStringHelper(v42, "StringView", &v1444);
        if ((_DWORD)v1445 != -1)
          ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v35 + 40))(v35);
      }
      else
      {
        v68 = v1436;
        v67 = v1437;
        v69 = (WTF::PrintStream *)v39(v37);
        if (v68)
        {
          v71 = v67 - 1;
          if (!v67)
            v71 = 0;
          WTF::StringImpl::utf8ForCharacters(v68, v71, (uint64_t)&v1444, v70);
        }
        else
        {
          v73 = WTF::fastMalloc((WTF *)0x11);
          *(_DWORD *)v73 = 1;
          *(_QWORD *)(v73 + 8) = 0;
          *(_BYTE *)(v73 + 16) = 0;
          v1444 = (WTF *)v73;
          LODWORD(v1445) = 0;
        }
        WTF::printExpectedCStringHelper(v69, "StringView", &v1444);
        if ((_DWORD)v1445 != -1)
          ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v35 + 40))(v35);
        v1438 = 1;
      }
      v6 = (WTF::PrintStream *)v1428;
      JSC::DFG::Edge::dump(v1424, v35);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
      v34 = *((_QWORD *)v5 + 4);
    }
    if ((v34 & 0xFF00FFFFFFFFFFFFLL) != 0 || (*((_QWORD *)v5 + 5) & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v74 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
      v75 = v1438;
      v76 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v74 + 32))(v74);
      v77 = v76;
      v78 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 32);
      if (v75)
      {
        v80 = (char *)v1434;
        v79 = v1435;
        v81 = (WTF::PrintStream *)v78(v76);
        if (v80)
        {
          v83 = v79 - 1;
          if (!v79)
            v83 = 0;
          WTF::StringImpl::utf8ForCharacters(v80, v83, (uint64_t)&v1444, v82);
        }
        else
        {
          v89 = WTF::fastMalloc((WTF *)0x11);
          *(_DWORD *)v89 = 1;
          *(_QWORD *)(v89 + 8) = 0;
          *(_BYTE *)(v89 + 16) = 0;
          v1444 = (WTF *)v89;
          LODWORD(v1445) = 0;
        }
        WTF::printExpectedCStringHelper(v81, "StringView", &v1444);
        if ((_DWORD)v1445 != -1)
          ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
        (*(void (**)(uint64_t))(*(_QWORD *)v77 + 40))(v77);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v74 + 40))(v74);
      }
      else
      {
        v85 = v1436;
        v84 = v1437;
        v86 = (WTF::PrintStream *)v78(v76);
        if (v85)
        {
          v88 = v84 - 1;
          if (!v84)
            v88 = 0;
          WTF::StringImpl::utf8ForCharacters(v85, v88, (uint64_t)&v1444, v87);
        }
        else
        {
          v90 = WTF::fastMalloc((WTF *)0x11);
          *(_DWORD *)v90 = 1;
          *(_QWORD *)(v90 + 8) = 0;
          *(_BYTE *)(v90 + 16) = 0;
          v1444 = (WTF *)v90;
          LODWORD(v1445) = 0;
        }
        WTF::printExpectedCStringHelper(v86, "StringView", &v1444);
        if ((_DWORD)v1445 != -1)
          ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
        (*(void (**)(uint64_t))(*(_QWORD *)v77 + 40))(v77);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v74 + 40))(v74);
        v1438 = 1;
      }
      JSC::DFG::Edge::dump((JSC::DFG::Node *)((char *)v5 + 32), v74);
      v6 = (WTF::PrintStream *)v1428;
      (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
      if ((*((_QWORD *)v5 + 5) & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v91 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1428 + 32))(v1428);
        v92 = v1438;
        v93 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v91 + 32))(v91);
        v94 = v93;
        v95 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v93 + 32);
        if (v92)
        {
          v97 = (char *)v1434;
          v96 = v1435;
          v98 = (WTF::PrintStream *)v95(v93);
          if (v97)
          {
            v100 = v96 - 1;
            if (!v96)
              v100 = 0;
            WTF::StringImpl::utf8ForCharacters(v97, v100, (uint64_t)&v1444, v99);
          }
          else
          {
            v106 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v106 = 1;
            *(_QWORD *)(v106 + 8) = 0;
            *(_BYTE *)(v106 + 16) = 0;
            v1444 = (WTF *)v106;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v98, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v94 + 40))(v94);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v91 + 40))(v91);
        }
        else
        {
          v102 = v1436;
          v101 = v1437;
          v103 = (WTF::PrintStream *)v95(v93);
          if (v102)
          {
            v105 = v101 - 1;
            if (!v101)
              v105 = 0;
            WTF::StringImpl::utf8ForCharacters(v102, v105, (uint64_t)&v1444, v104);
          }
          else
          {
            v107 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v107 = 1;
            *(_QWORD *)(v107 + 8) = 0;
            *(_BYTE *)(v107 + 16) = 0;
            v1444 = (WTF *)v107;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v103, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v94 + 40))(v94);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v91 + 40))(v91);
          v1438 = 1;
        }
        JSC::DFG::Edge::dump((JSC::DFG::Node *)((char *)v5 + 40), v91);
        v6 = (WTF::PrintStream *)v1428;
        (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
      }
    }
  }
  v108 = (WTF::PrintStream *)*((unsigned int *)v5 + 14);
  v1444 = (WTF *)off_1E3572250;
  v1445 = (WTF *)&v1447;
  v1446 = xmmword_199122F80;
  LOBYTE(v1447) = 0;
  JSC::DFG::dumpNodeFlags((JSC::DFG *)&v1444, v108);
  (*((void (**)(WTF **))v1444 + 5))(&v1444);
  v116 = v1445;
  if (!v1445)
  {
    WTF::fastFree(0, v109, v110, v111, v112, v113, v114, v115);
LABEL_125:
    v134 = (WTF::PrintStream *)*((unsigned int *)v5 + 14);
    v135 = (JSC::DFG *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v136 = v1438;
    v137 = (*(uint64_t (**)(JSC::DFG *))(*(_QWORD *)v135 + 32))(v135);
    v138 = v137;
    v139 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v137 + 32);
    if (v136)
    {
      v141 = (char *)v1434;
      v140 = v1435;
      v142 = (WTF::PrintStream *)v139(v137);
      if (v141)
      {
        v144 = v140 - 1;
        if (!v140)
          v144 = 0;
        WTF::StringImpl::utf8ForCharacters(v141, v144, (uint64_t)&v1444, v143);
      }
      else
      {
        v150 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v150 = 1;
        *(_QWORD *)(v150 + 8) = 0;
        *(_BYTE *)(v150 + 16) = 0;
        v1444 = (WTF *)v150;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v142, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v138 + 40))(v138);
      (*(void (**)(JSC::DFG *))(*(_QWORD *)v135 + 40))(v135);
    }
    else
    {
      v146 = v1436;
      v145 = v1437;
      v147 = (WTF::PrintStream *)v139(v137);
      if (v146)
      {
        v149 = v145 - 1;
        if (!v145)
          v149 = 0;
        WTF::StringImpl::utf8ForCharacters(v146, v149, (uint64_t)&v1444, v148);
      }
      else
      {
        v151 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v151 = 1;
        *(_QWORD *)(v151 + 8) = 0;
        *(_BYTE *)(v151 + 16) = 0;
        v1444 = (WTF *)v151;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v147, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v138 + 40))(v138);
      (*(void (**)(JSC::DFG *))(*(_QWORD *)v135 + 40))(v135);
      v1438 = 1;
    }
    JSC::DFG::dumpNodeFlags(v135, v134);
    v6 = (WTF::PrintStream *)v1428;
    (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
    goto LABEL_143;
  }
  v117 = v1446;
  if ((unint64_t)v1446 >= 0xFFFFFFFFFFFFFFF0)
  {
    __break(0xC471u);
    JUMPOUT(0x1983C8F60);
  }
  if ((_QWORD)v1446 == -17)
  {
    __break(0xC471u);
    JUMPOUT(0x1983C8F68);
  }
  v118 = WTF::fastMalloc((WTF *)(v1446 + 17));
  *(_DWORD *)v118 = 1;
  *(_QWORD *)(v118 + 8) = v117;
  memcpy((void *)(v118 + 16), v116, v117);
  *(_BYTE *)(v118 + 16 + v117) = 0;
  if (v1445 != (WTF *)&v1447)
    WTF::fastFree((unint64_t)v1445, v119, v120, v121, v122, v123, v124, v125);
  v133 = strcmp((const char *)(v118 + 16), "<empty>");
  if (*(_DWORD *)v118 == 1)
    WTF::fastFree(v118, v126, v127, v128, v129, v130, v131, v132);
  else
    --*(_DWORD *)v118;
  v6 = (WTF::PrintStream *)v1428;
  if (v133)
    goto LABEL_125;
LABEL_143:
  v152 = (WTF::PrintStream *)*((_QWORD *)v5 + 8);
  if (v152)
  {
    v153 = (JSC *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v154 = v1438;
    v155 = (*(uint64_t (**)(JSC *))(*(_QWORD *)v153 + 32))(v153);
    v156 = v155;
    v157 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v155 + 32);
    if (v154)
    {
      v159 = (char *)v1434;
      v158 = v1435;
      v160 = (WTF::PrintStream *)v157(v155);
      if (v159)
      {
        v162 = v158 - 1;
        if (!v158)
          v162 = 0;
        WTF::StringImpl::utf8ForCharacters(v159, v162, (uint64_t)&v1444, v161);
      }
      else
      {
        v168 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v168 = 1;
        *(_QWORD *)(v168 + 8) = 0;
        *(_BYTE *)(v168 + 16) = 0;
        v1444 = (WTF *)v168;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v160, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v156 + 40))(v156);
      (*(void (**)(JSC *))(*(_QWORD *)v153 + 40))(v153);
    }
    else
    {
      v164 = v1436;
      v163 = v1437;
      v165 = (WTF::PrintStream *)v157(v155);
      if (v164)
      {
        v167 = v163 - 1;
        if (!v163)
          v167 = 0;
        WTF::StringImpl::utf8ForCharacters(v164, v167, (uint64_t)&v1444, v166);
      }
      else
      {
        v169 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v169 = 1;
        *(_QWORD *)(v169 + 8) = 0;
        *(_BYTE *)(v169 + 16) = 0;
        v1444 = (WTF *)v169;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v165, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v156 + 40))(v156);
      (*(void (**)(JSC *))(*(_QWORD *)v153 + 40))(v153);
      v1438 = 1;
    }
    JSC::dumpSpeculation(v153, v152);
    v6 = (WTF::PrintStream *)v1428;
    (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
  }
  v170 = *((unsigned __int16 *)v5 + 9);
  if ((v170 - 96) < 2 || (v170 - 275) < 2 || v170 == 349)
  {
    *(_QWORD *)&v1443 = "numberOfArgumentsToSkip = ";
    *((_QWORD *)&v1443 + 1) = 27;
    LODWORD(v1431) = *((_DWORD *)v5 + 18);
    v1444 = (WTF *)&v1434;
    v1445 = (WTF *)&v1443;
    *(_QWORD *)&v1446 = &v1431;
    WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned int>(WTF::CommaPrinter,WTF::ASCIILiteral,unsigned int const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)v6, &v1444);
    v170 = *((unsigned __int16 *)v5 + 9);
  }
  if (v170 == 363 || v170 == 330)
  {
    *(_QWORD *)&v1443 = "numberOfBoundArguments = ";
    *((_QWORD *)&v1443 + 1) = 26;
    LODWORD(v1431) = *((_DWORD *)v5 + 20);
    v1444 = (WTF *)&v1434;
    v1445 = (WTF *)&v1443;
    *(_QWORD *)&v1446 = &v1431;
    WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned int>(WTF::CommaPrinter,WTF::ASCIILiteral,unsigned int const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)v6, &v1444);
  }
  if (JSC::DFG::Node::hasArrayMode(v5))
  {
    if (*((_WORD *)v5 + 9) == 146)
      v171 = *((_DWORD *)v5 + 20);
    else
      v171 = *((_DWORD *)v5 + 18);
    LODWORD(v1443) = v171;
    v172 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v173 = v1438;
    v174 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v172 + 32))(v172);
    v175 = v174;
    v176 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32);
    if (v173)
    {
      v178 = (char *)v1434;
      v177 = v1435;
      v179 = (WTF::PrintStream *)v176(v174);
      if (v178)
      {
        v181 = v177 - 1;
        if (!v177)
          v181 = 0;
        WTF::StringImpl::utf8ForCharacters(v178, v181, (uint64_t)&v1444, v180);
      }
      else
      {
        v187 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v187 = 1;
        *(_QWORD *)(v187 + 8) = 0;
        *(_BYTE *)(v187 + 16) = 0;
        v1444 = (WTF *)v187;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v179, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1431, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v175 + 40))(v175);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v172 + 40))(v172);
    }
    else
    {
      v183 = v1436;
      v182 = v1437;
      v184 = (WTF::PrintStream *)v176(v174);
      if (v183)
      {
        v186 = v182 - 1;
        if (!v182)
          v186 = 0;
        WTF::StringImpl::utf8ForCharacters(v183, v186, (uint64_t)&v1444, v185);
      }
      else
      {
        v188 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v188 = 1;
        *(_QWORD *)(v188 + 8) = 0;
        *(_BYTE *)(v188 + 16) = 0;
        v1444 = (WTF *)v188;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v184, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1431, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v175 + 40))(v175);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v172 + 40))(v172);
      v1438 = 1;
    }
    v6 = (WTF::PrintStream *)v1428;
    JSC::DFG::ArrayMode::dump((JSC::DFG::ArrayMode *)&v1443, v172);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  }
  v189 = *((unsigned __int16 *)v5 + 9);
  if ((_DWORD)v189 == 81)
  {
    v190 = *((int *)v5 + 18);
    v191 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v192 = v1438;
    v193 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v191 + 32))(v191);
    v194 = v193;
    v195 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v193 + 32);
    if (v192)
    {
      v196 = (char *)v1434;
      v197 = v1435;
      v198 = (WTF::PrintStream *)v195(v193);
      if (v196)
      {
        v200 = v197 - 1;
        if (!v197)
          v200 = 0;
        WTF::StringImpl::utf8ForCharacters(v196, v200, (uint64_t)&v1444, v199);
      }
      else
      {
        v206 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v206 = 1;
        *(_QWORD *)(v206 + 8) = 0;
        *(_BYTE *)(v206 + 16) = 0;
        v1444 = (WTF *)v206;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v198, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v194 + 40))(v194);
      (*(void (**)(uint64_t))(*(_QWORD *)v191 + 40))(v191);
    }
    else
    {
      v201 = v1436;
      v202 = v1437;
      v203 = (WTF::PrintStream *)v195(v193);
      if (v201)
      {
        v205 = v202 - 1;
        if (!v202)
          v205 = 0;
        WTF::StringImpl::utf8ForCharacters(v201, v205, (uint64_t)&v1444, v204);
      }
      else
      {
        v207 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v207 = 1;
        *(_QWORD *)(v207 + 8) = 0;
        *(_BYTE *)(v207 + 16) = 0;
        v1444 = (WTF *)v207;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v203, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v194 + 40))(v194);
      (*(void (**)(uint64_t))(*(_QWORD *)v191 + 40))(v191);
      v1438 = 1;
    }
    v6 = (WTF::PrintStream *)v1428;
    v208 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v191 + 32))(v191);
    WTF::StringImpl::utf8ForCharacters("Type:", 5uLL, (uint64_t)&v1444, v209);
    WTF::printExpectedCStringHelper(v208, "StringView", &v1444);
    if ((_DWORD)v1445 != -1)
      ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
    (*(void (**)(uint64_t))(*(_QWORD *)v191 + 40))(v191);
    if (v190 >= 0x13)
    {
      __break(0xC471u);
      JUMPOUT(0x1983C8EA0);
    }
    v210 = off_1E358E170[v190];
    v211 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v191 + 32))(v191);
    WTF::PrintStream::printf(v211, "%s", v210);
    (*(void (**)(uint64_t))(*(_QWORD *)v191 + 40))(v191);
    (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
    v189 = *((unsigned __int16 *)v5 + 9);
  }
  if ((v189 - 68) < 3 || (v189 - 55) <= 0xB && ((1 << (v189 - 55)) & 0xE85) != 0)
  {
    v212 = *((int *)v5 + 18);
    v213 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v214 = v1438;
    v215 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v213 + 32))(v213);
    v216 = v215;
    v217 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v215 + 32);
    if (v214)
    {
      v218 = (char *)v1434;
      v219 = v1435;
      v220 = (WTF::PrintStream *)v217(v215);
      if (v218)
      {
        v222 = v219 - 1;
        if (!v219)
          v222 = 0;
        WTF::StringImpl::utf8ForCharacters(v218, v222, (uint64_t)&v1444, v221);
      }
      else
      {
        v228 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v228 = 1;
        *(_QWORD *)(v228 + 8) = 0;
        *(_BYTE *)(v228 + 16) = 0;
        v1444 = (WTF *)v228;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v220, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v216 + 40))(v216);
      (*(void (**)(uint64_t))(*(_QWORD *)v213 + 40))(v213);
    }
    else
    {
      v223 = v1436;
      v224 = v1437;
      v225 = (WTF::PrintStream *)v217(v215);
      if (v223)
      {
        v227 = v224 - 1;
        if (!v224)
          v227 = 0;
        WTF::StringImpl::utf8ForCharacters(v223, v227, (uint64_t)&v1444, v226);
      }
      else
      {
        v229 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v229 = 1;
        *(_QWORD *)(v229 + 8) = 0;
        *(_BYTE *)(v229 + 16) = 0;
        v1444 = (WTF *)v229;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v225, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v216 + 40))(v216);
      (*(void (**)(uint64_t))(*(_QWORD *)v213 + 40))(v213);
      v1438 = 1;
    }
    v6 = (WTF::PrintStream *)v1428;
    if (v212 >= 5)
    {
      __break(0xC471u);
      JUMPOUT(0x1983C8E80);
    }
    v230 = off_1E358E208[v212];
    v231 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v213 + 32))(v213);
    WTF::PrintStream::printf(v231, "%s", v230);
    (*(void (**)(uint64_t))(*(_QWORD *)v213 + 40))(v213);
    (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
    v189 = *((unsigned __int16 *)v5 + 9);
  }
  if ((v189 & 0xFFFC) == 0x4C)
  {
    v232 = *((int *)v5 + 18);
    v233 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v234 = v1438;
    v235 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v233 + 32))(v233);
    v236 = v235;
    v237 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v235 + 32);
    if (v234)
    {
      v238 = (char *)v1434;
      v239 = v1435;
      v240 = (WTF::PrintStream *)v237(v235);
      if (v238)
      {
        v242 = v239 - 1;
        if (!v239)
          v242 = 0;
        WTF::StringImpl::utf8ForCharacters(v238, v242, (uint64_t)&v1444, v241);
      }
      else
      {
        v248 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v248 = 1;
        *(_QWORD *)(v248 + 8) = 0;
        *(_BYTE *)(v248 + 16) = 0;
        v1444 = (WTF *)v248;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v240, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v236 + 40))(v236);
      (*(void (**)(uint64_t))(*(_QWORD *)v233 + 40))(v233);
    }
    else
    {
      v243 = v1436;
      v244 = v1437;
      v245 = (WTF::PrintStream *)v237(v235);
      if (v243)
      {
        v247 = v244 - 1;
        if (!v244)
          v247 = 0;
        WTF::StringImpl::utf8ForCharacters(v243, v247, (uint64_t)&v1444, v246);
      }
      else
      {
        v249 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v249 = 1;
        *(_QWORD *)(v249 + 8) = 0;
        *(_BYTE *)(v249 + 16) = 0;
        v1444 = (WTF *)v249;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v245, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v236 + 40))(v236);
      (*(void (**)(uint64_t))(*(_QWORD *)v233 + 40))(v233);
      v1438 = 1;
    }
    v6 = (WTF::PrintStream *)v1428;
    v250 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v233 + 32))(v233);
    WTF::StringImpl::utf8ForCharacters("Rounding:", 9uLL, (uint64_t)&v1444, v251);
    WTF::printExpectedCStringHelper(v250, "StringView", &v1444);
    if ((_DWORD)v1445 != -1)
      ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
    (*(void (**)(uint64_t))(*(_QWORD *)v233 + 40))(v233);
    if (v232 >= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1983C8EC0);
    }
    v252 = off_1E358E230[v232];
    v253 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v233 + 32))(v233);
    WTF::PrintStream::printf(v253, "%s", v252);
    (*(void (**)(uint64_t))(*(_QWORD *)v233 + 40))(v233);
    (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
    v189 = *((unsigned __int16 *)v5 + 9);
  }
  if ((unsigned __int16)(v189 - 171) <= 1u)
  {
    v254 = *((_DWORD *)v5 + 18);
    v255 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v256 = v1438;
    v257 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v255 + 32))(v255);
    v258 = v257;
    v259 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v257 + 32);
    if (v256)
    {
      v260 = (char *)v1434;
      v261 = v1435;
      v262 = (WTF::PrintStream *)v259(v257);
      if (v260)
      {
        v264 = v261 - 1;
        if (!v261)
          v264 = 0;
        WTF::StringImpl::utf8ForCharacters(v260, v264, (uint64_t)&v1444, v263);
      }
      else
      {
        v270 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v270 = 1;
        *(_QWORD *)(v270 + 8) = 0;
        *(_BYTE *)(v270 + 16) = 0;
        v1444 = (WTF *)v270;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v262, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v258 + 40))(v258);
      (*(void (**)(uint64_t))(*(_QWORD *)v255 + 40))(v255);
    }
    else
    {
      v265 = v1436;
      v266 = v1437;
      v267 = (WTF::PrintStream *)v259(v257);
      if (v265)
      {
        v269 = v266 - 1;
        if (!v266)
          v269 = 0;
        WTF::StringImpl::utf8ForCharacters(v265, v269, (uint64_t)&v1444, v268);
      }
      else
      {
        v271 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v271 = 1;
        *(_QWORD *)(v271 + 8) = 0;
        *(_BYTE *)(v271 + 16) = 0;
        v1444 = (WTF *)v271;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v267, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v258 + 40))(v258);
      (*(void (**)(uint64_t))(*(_QWORD *)v255 + 40))(v255);
      v1438 = 1;
    }
    v6 = (WTF::PrintStream *)v1428;
    v272 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v255 + 32))(v255);
    v273 = v272;
    if (v254 == -1)
    {
      WTF::PrintStream::printf(v272, "%s");
    }
    else
    {
      WTF::PrintStream::printf(v272, "%s", "scope");
      WTF::PrintStream::printf(v273, "%u");
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v255 + 40))(v255);
    (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
    v189 = *((unsigned __int16 *)v5 + 9);
  }
  if ((v189 & 0xFFFE) == 0x164)
  {
    v274 = *((_DWORD *)v5 + 18);
    v275 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v276 = v1438;
    v277 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v275 + 32))(v275);
    v278 = v277;
    v279 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v277 + 32);
    if (v276)
    {
      v280 = (char *)v1434;
      v281 = v1435;
      v282 = (WTF::PrintStream *)v279(v277);
      if (v280)
      {
        v284 = v281 - 1;
        if (!v281)
          v284 = 0;
        WTF::StringImpl::utf8ForCharacters(v280, v284, (uint64_t)&v1444, v283);
      }
      else
      {
        v290 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v290 = 1;
        *(_QWORD *)(v290 + 8) = 0;
        *(_BYTE *)(v290 + 16) = 0;
        v1444 = (WTF *)v290;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v282, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v278 + 40))(v278);
      (*(void (**)(uint64_t))(*(_QWORD *)v275 + 40))(v275);
    }
    else
    {
      v285 = v1436;
      v286 = v1437;
      v287 = (WTF::PrintStream *)v279(v277);
      if (v285)
      {
        v289 = v286 - 1;
        if (!v286)
          v289 = 0;
        WTF::StringImpl::utf8ForCharacters(v285, v289, (uint64_t)&v1444, v288);
      }
      else
      {
        v291 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v291 = 1;
        *(_QWORD *)(v291 + 8) = 0;
        *(_BYTE *)(v291 + 16) = 0;
        v1444 = (WTF *)v291;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v287, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v278 + 40))(v278);
      (*(void (**)(uint64_t))(*(_QWORD *)v275 + 40))(v275);
      v1438 = 1;
    }
    v6 = (WTF::PrintStream *)v1428;
    v292 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v275 + 32))(v275);
    v293 = v292;
    if (v274 == -1)
    {
      WTF::PrintStream::printf(v292, "%s");
    }
    else
    {
      WTF::PrintStream::printf(v292, "%s", "capturedArgument");
      WTF::PrintStream::printf(v293, "%u");
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v275 + 40))(v275);
    (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
    v189 = *((unsigned __int16 *)v5 + 9);
  }
  if ((_DWORD)v189 == 358)
  {
    v294 = *((_DWORD *)v5 + 18);
    v295 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v296 = v1438;
    v297 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v295 + 32))(v295);
    v298 = v297;
    v299 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v297 + 32);
    if (v296)
    {
      v300 = (char *)v1434;
      v301 = v1435;
      v302 = (WTF::PrintStream *)v299(v297);
      if (v300)
      {
        v304 = v301 - 1;
        if (!v301)
          v304 = 0;
        WTF::StringImpl::utf8ForCharacters(v300, v304, (uint64_t)&v1444, v303);
      }
      else
      {
        v310 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v310 = 1;
        *(_QWORD *)(v310 + 8) = 0;
        *(_BYTE *)(v310 + 16) = 0;
        v1444 = (WTF *)v310;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v302, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v298 + 40))(v298);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v295 + 40))(v295);
    }
    else
    {
      v305 = v1436;
      v306 = v1437;
      v307 = (WTF::PrintStream *)v299(v297);
      if (v305)
      {
        v309 = v306 - 1;
        if (!v306)
          v309 = 0;
        WTF::StringImpl::utf8ForCharacters(v305, v309, (uint64_t)&v1444, v308);
      }
      else
      {
        v311 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v311 = 1;
        *(_QWORD *)(v311 + 8) = 0;
        *(_BYTE *)(v311 + 16) = 0;
        v1444 = (WTF *)v311;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v307, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v298 + 40))(v298);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v295 + 40))(v295);
      v1438 = 1;
    }
    v6 = (WTF::PrintStream *)v1428;
    WTF::PrintStream::printf(v295, "%u", v294);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    v189 = *((unsigned __int16 *)v5 + 9);
  }
  if ((v189 - 173) <= 2)
  {
    v312 = (const void *)*((_QWORD *)v5 + 9);
    v313 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v314 = v1438;
    v315 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v313 + 32))(v313);
    v316 = v315;
    v317 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v315 + 32);
    if (v314)
    {
      v318 = (char *)v1434;
      v319 = v1435;
      v320 = (WTF::PrintStream *)v317(v315);
      if (v318)
      {
        v322 = v319 - 1;
        if (!v319)
          v322 = 0;
        WTF::StringImpl::utf8ForCharacters(v318, v322, (uint64_t)&v1444, v321);
      }
      else
      {
        v328 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v328 = 1;
        *(_QWORD *)(v328 + 8) = 0;
        *(_BYTE *)(v328 + 16) = 0;
        v1444 = (WTF *)v328;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v320, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v316 + 40))(v316);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v313 + 40))(v313);
    }
    else
    {
      v323 = v1436;
      v324 = v1437;
      v325 = (WTF::PrintStream *)v317(v315);
      if (v323)
      {
        v327 = v324 - 1;
        if (!v324)
          v327 = 0;
        WTF::StringImpl::utf8ForCharacters(v323, v327, (uint64_t)&v1444, v326);
      }
      else
      {
        v329 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v329 = 1;
        *(_QWORD *)(v329 + 8) = 0;
        *(_BYTE *)(v329 + 16) = 0;
        v1444 = (WTF *)v329;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v325, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v316 + 40))(v316);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v313 + 40))(v313);
      v1438 = 1;
    }
    v6 = (WTF::PrintStream *)v1428;
    WTF::PrintStream::printf(v313, "%s", "global");
    v330 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v313 + 32))(v313);
    WTF::StringImpl::utf8ForCharacters("(", 1uLL, (uint64_t)&v1444, v331);
    WTF::printExpectedCStringHelper(v330, "StringView", &v1444);
    if ((_DWORD)v1445 != -1)
      ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v313 + 40))(v313);
    WTF::PrintStream::printf(v313, "%p", v312);
    v332 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v313 + 32))(v313);
    WTF::StringImpl::utf8ForCharacters(")", 1uLL, (uint64_t)&v1444, v333);
    WTF::printExpectedCStringHelper(v332, "StringView", &v1444);
    if ((_DWORD)v1445 != -1)
      ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v313 + 40))(v313);
    (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
    v189 = *((unsigned __int16 *)v5 + 9);
  }
  if ((v189 - 123) <= 0x36 && ((1 << (v189 - 123)) & 0x60300000000007) != 0
    || (_DWORD)v189 == 321)
  {
    v334 = *((_DWORD *)v5 + 18);
    if (v334 != -1)
    {
      v1444 = (WTF *)"id";
      v1445 = (WTF *)3;
      LODWORD(v1430) = v334;
      *(_QWORD *)&v1443 = "{";
      *((_QWORD *)&v1443 + 1) = 2;
      v335 = (_QWORD *)JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*((_QWORD *)this + 3) + 240), v334);
      v1432 = 2;
      v1433 = v335;
      v1431 = "}";
      v336 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
      WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::UniquedStringImpl *,WTF::ASCIILiteral>(v336, (uint64_t)&v1434, (uint64_t)&v1444, &v1430, (uint64_t)&v1443, (uint64_t *)&v1433, (uint64_t)&v1431);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
      v189 = *((unsigned __int16 *)v5 + 9);
    }
  }
  if (JSC::DFG::Node::hasCacheableIdentifier((JSC::DFG::Node *)v189))
  {
    if ((v189 - 109) >= 0xD)
    {
      if ((v189 - 255) < 2)
      {
        v339 = (_QWORD *)(*((_QWORD *)v5 + 9) + 8);
LABEL_348:
        if (!*v339)
          goto LABEL_352;
        *(_QWORD *)&v1443 = "cachable-id {";
        *((_QWORD *)&v1443 + 1) = 14;
        if ((v189 - 109) >= 0xD)
        {
          if ((v189 - 255) < 2)
          {
            v340 = (_QWORD **)(*((_QWORD *)v5 + 9) + 8);
            goto LABEL_351;
          }
          if ((v189 - 335) >= 2
            && ((v189 - 106) > 0x25 || ((1 << (v189 - 106)) & 0x2001000001) == 0))
          {
            __break(0xC471u);
            JUMPOUT(0x1983C8DE8);
          }
        }
        v340 = (_QWORD **)((char *)v5 + 72);
LABEL_351:
        v341 = *v340;
        v1431 = "}";
        v1432 = 2;
        v1433 = v341;
        v1444 = (WTF *)&v1434;
        v1445 = (WTF *)&v1443;
        *(_QWORD *)&v1446 = &v1433;
        *((_QWORD *)&v1446 + 1) = &v1431;
        WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,JSC::CacheableIdentifier,WTF::ASCIILiteral>(WTF::CommaPrinter,WTF::ASCIILiteral,JSC::CacheableIdentifier,WTF::ASCIILiteral const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)v6, &v1444);
        LODWORD(v189) = *((unsigned __int16 *)v5 + 9);
        goto LABEL_352;
      }
      if ((v189 - 335) >= 2
        && ((v189 - 106) > 0x25 || ((1 << (v189 - 106)) & 0x2001000001) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x1983C8D84);
      }
    }
    v339 = (_QWORD *)((char *)v5 + 72);
    goto LABEL_348;
  }
LABEL_352:
  if ((_DWORD)v189 == 279)
  {
    *(_QWORD *)&v1443 = *((unsigned int *)v5 + 18) | ((unint64_t)*((unsigned int *)v5 + 20) << 32);
    v189 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v342 = v1438;
    v343 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v189 + 32))(v189);
    v344 = v343;
    v345 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v343 + 32);
    if (v342)
    {
      v347 = (char *)v1434;
      v346 = v1435;
      v348 = (WTF::PrintStream *)v345(v343);
      if (v347)
      {
        v350 = v346 - 1;
        if (!v346)
          v350 = 0;
        WTF::StringImpl::utf8ForCharacters(v347, v350, (uint64_t)&v1444, v349);
      }
      else
      {
        v356 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v356 = 1;
        *(_QWORD *)(v356 + 8) = 0;
        *(_BYTE *)(v356 + 16) = 0;
        v1444 = (WTF *)v356;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v348, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1431, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v344 + 40))(v344);
      (*(void (**)(uint64_t))(*(_QWORD *)v189 + 40))(v189);
    }
    else
    {
      v352 = v1436;
      v351 = v1437;
      v353 = (WTF::PrintStream *)v345(v343);
      if (v352)
      {
        v355 = v351 - 1;
        if (!v351)
          v355 = 0;
        WTF::StringImpl::utf8ForCharacters(v352, v355, (uint64_t)&v1444, v354);
      }
      else
      {
        v357 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v357 = 1;
        *(_QWORD *)(v357 + 8) = 0;
        *(_BYTE *)(v357 + 16) = 0;
        v1444 = (WTF *)v357;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v353, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1431, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v344 + 40))(v344);
      (*(void (**)(uint64_t))(*(_QWORD *)v189 + 40))(v189);
      v1438 = 1;
    }
    v6 = (WTF::PrintStream *)v1428;
    v358 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v189 + 32))(v189);
    WTF::PrintStream::printImpl<JSC::DFG::PromotedLocationKind,char [2],unsigned int,char [2]>(v358, (int *)&v1443, "(", (_DWORD *)&v1443 + 1, ")");
    (*(void (**)(uint64_t))(*(_QWORD *)v189 + 40))(v189);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    LODWORD(v189) = *((unsigned __int16 *)v5 + 9);
  }
  if ((unsigned __int16)(v189 - 191) <= 1u)
  {
    v189 = *((_QWORD *)v5 + 9);
    v359 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v360 = v1438;
    v361 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v359 + 32))(v359);
    v362 = v361;
    v363 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v361 + 32);
    if (v360)
    {
      v365 = (char *)v1434;
      v364 = v1435;
      v366 = (WTF::PrintStream *)v363(v361);
      if (v365)
      {
        v368 = v364 - 1;
        if (!v364)
          v368 = 0;
        WTF::StringImpl::utf8ForCharacters(v365, v368, (uint64_t)&v1444, v367);
      }
      else
      {
        v374 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v374 = 1;
        *(_QWORD *)(v374 + 8) = 0;
        *(_BYTE *)(v374 + 16) = 0;
        v1444 = (WTF *)v374;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v366, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v362 + 40))(v362);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v359 + 40))(v359);
    }
    else
    {
      v370 = v1436;
      v369 = v1437;
      v371 = (WTF::PrintStream *)v363(v361);
      if (v370)
      {
        v373 = v369 - 1;
        if (!v369)
          v373 = 0;
        WTF::StringImpl::utf8ForCharacters(v370, v373, (uint64_t)&v1444, v372);
      }
      else
      {
        v375 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v375 = 1;
        *(_QWORD *)(v375 + 8) = 0;
        *(_BYTE *)(v375 + 16) = 0;
        v1444 = (WTF *)v375;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v371, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v362 + 40))(v362);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v359 + 40))(v359);
      v1438 = 1;
    }
    JSC::ClassInfo::dump((char **)v189, v359);
    v6 = (WTF::PrintStream *)v1428;
    (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
    LODWORD(v189) = *((unsigned __int16 *)v5 + 9);
  }
  if ((v189 - 280) < 2 || (v189 - 132) <= 1)
  {
    v376 = (uint64_t *)*((_QWORD *)v5 + 9);
    *(_QWORD *)&v1443 = 0;
    v377 = *v376;
    v378 = (_DWORD *)(v377 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v377 & 1) != 0)
    {
      if (*v378)
      {
        v446 = 0;
        v447 = 0;
        do
        {
          v448 = &v378[2 * v447];
          v449 = *((_QWORD *)v448 + 1);
          if ((v446 & 1) != 0)
          {
            WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine((uint64_t *)&v1443, *((_QWORD *)v448 + 1));
            v446 = v1443;
          }
          else if (v449 != (v446 & 0xFFFFFFFFFFFFFFFCLL))
          {
            if ((v446 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            {
              v450 = WTF::fastMalloc((WTF *)0x28);
              *(_QWORD *)v450 = 0x400000002;
              v451 = v1443;
              *(_QWORD *)(v450 + 8) = v1443 & 0xFFFFFFFFFFFFFFFCLL;
              *(_QWORD *)(v450 + 16) = v449;
              v446 = v451 & 2 | (unint64_t)v450 | 1;
            }
            else
            {
              v446 = v446 & 2 | v449;
            }
            *(_QWORD *)&v1443 = v446;
          }
          ++v447;
        }
        while (v447 < *v378);
      }
    }
    else if (v378)
    {
      *(_QWORD *)&v1443 = v377 & 0xFFFFFFFFFFFFFFFCLL;
    }
    v379 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v380 = v1438;
    v381 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v379 + 32))(v379);
    v382 = v381;
    v383 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v381 + 32);
    if (v380)
    {
      v385 = (char *)v1434;
      v384 = v1435;
      v386 = (WTF::PrintStream *)v383(v381);
      if (v385)
      {
        v388 = v384 - 1;
        if (!v384)
          v388 = 0;
        WTF::StringImpl::utf8ForCharacters(v385, v388, (uint64_t)&v1444, v387);
      }
      else
      {
        v394 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v394 = 1;
        *(_QWORD *)(v394 + 8) = 0;
        *(_BYTE *)(v394 + 16) = 0;
        v1444 = (WTF *)v394;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v386, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1431, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v382 + 40))(v382);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v379 + 40))(v379);
    }
    else
    {
      v390 = v1436;
      v389 = v1437;
      v391 = (WTF::PrintStream *)v383(v381);
      if (v390)
      {
        v393 = v389 - 1;
        if (!v389)
          v393 = 0;
        WTF::StringImpl::utf8ForCharacters(v390, v393, (uint64_t)&v1444, v392);
      }
      else
      {
        v395 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v395 = 1;
        *(_QWORD *)(v395 + 8) = 0;
        *(_BYTE *)(v395 + 16) = 0;
        v1444 = (WTF *)v395;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v391, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1431, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v382 + 40))(v382);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v379 + 40))(v379);
      v1438 = 1;
    }
    v6 = (WTF::PrintStream *)v1428;
    JSC::StructureSet::dumpInContext((JSC::StructureSet *)&v1443, v379, a5);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    if ((v1443 & 1) != 0)
      WTF::fastFree(v1443 & 0xFFFFFFFFFFFFFFFCLL, v396, v397, v398, v399, v400, v337, v338);
    LODWORD(v189) = *((unsigned __int16 *)v5 + 9);
  }
  if ((v189 - 259) <= 0x1C && ((1 << (v189 - 3)) & 0x1000E207) != 0 || (_DWORD)v189 == 146)
  {
    v401 = (JSC::Structure *)*((_QWORD *)v5 + 9);
    v402 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v403 = v1438;
    v404 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v402 + 32))(v402);
    v405 = v404;
    v406 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v404 + 32);
    if (v403)
    {
      v408 = (char *)v1434;
      v407 = v1435;
      v409 = (WTF::PrintStream *)v406(v404);
      if (v408)
      {
        v411 = v407 - 1;
        if (!v407)
          v411 = 0;
        WTF::StringImpl::utf8ForCharacters(v408, v411, (uint64_t)&v1444, v410);
      }
      else
      {
        v417 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v417 = 1;
        *(_QWORD *)(v417 + 8) = 0;
        *(_BYTE *)(v417 + 16) = 0;
        v1444 = (WTF *)v417;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v409, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v405 + 40))(v405);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v402 + 40))(v402);
    }
    else
    {
      v413 = v1436;
      v412 = v1437;
      v414 = (WTF::PrintStream *)v406(v404);
      if (v413)
      {
        v416 = v412 - 1;
        if (!v412)
          v416 = 0;
        WTF::StringImpl::utf8ForCharacters(v413, v416, (uint64_t)&v1444, v415);
      }
      else
      {
        v418 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v418 = 1;
        *(_QWORD *)(v418 + 8) = 0;
        *(_BYTE *)(v418 + 16) = 0;
        v1444 = (WTF *)v418;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v414, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v405 + 40))(v405);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v402 + 40))(v402);
      v1438 = 1;
    }
    v6 = (WTF::PrintStream *)v1428;
    if (a5)
    {
      WTF::StringHashDumpContext<JSC::Structure>::getID(v401, (uint64_t *)a5, (int8x16_t **)&v1444);
      JSC::Structure::dumpBrief(v401, v402, (const WTF::CString *)&v1444);
      v426 = v1444;
      v1444 = 0;
      if (v426)
      {
        if (*(_DWORD *)v426 == 1)
          WTF::fastFree((unint64_t)v426, v419, v420, v421, v422, v423, v424, v425);
        else
          --*(_DWORD *)v426;
      }
    }
    else
    {
      JSC::Structure::dump((unint64_t)v401, v402);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
    LODWORD(v189) = *((unsigned __int16 *)v5 + 9);
  }
  if ((_DWORD)v189 == 419)
  {
    v427 = (char *)JSC::intrinsicName();
    v428 = v6;
    v430 = v429;
    v189 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v428 + 32))(v428);
    v431 = v1438;
    v432 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v189 + 32))(v189);
    v433 = v432;
    v434 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v432 + 32);
    if (v431)
    {
      v436 = (char *)v1434;
      v435 = v1435;
      v437 = (WTF::PrintStream *)v434(v432);
      if (v436)
      {
        v439 = v435 - 1;
        if (!v435)
          v439 = 0;
        WTF::StringImpl::utf8ForCharacters(v436, v439, (uint64_t)&v1444, v438);
      }
      else
      {
        v445 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v445 = 1;
        *(_QWORD *)(v445 + 8) = 0;
        *(_BYTE *)(v445 + 16) = 0;
        v1444 = (WTF *)v445;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v437, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v433 + 40))(v433);
      (*(void (**)(uint64_t))(*(_QWORD *)v189 + 40))(v189);
    }
    else
    {
      v441 = v1436;
      v440 = v1437;
      v442 = (WTF::PrintStream *)v434(v432);
      if (v441)
      {
        v444 = v440 - 1;
        if (!v440)
          v444 = 0;
        WTF::StringImpl::utf8ForCharacters(v441, v444, (uint64_t)&v1444, v443);
      }
      else
      {
        v452 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v452 = 1;
        *(_QWORD *)(v452 + 8) = 0;
        *(_BYTE *)(v452 + 16) = 0;
        v1444 = (WTF *)v452;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v442, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v433 + 40))(v433);
      (*(void (**)(uint64_t))(*(_QWORD *)v189 + 40))(v189);
      v1438 = 1;
    }
    v5 = v1426;
    v453 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v189 + 32))(v189);
    if (v427)
    {
      v455 = v430 - 1;
      if (!v430)
        v455 = 0;
      WTF::StringImpl::utf8ForCharacters(v427, v455, (uint64_t)&v1444, v454);
    }
    else
    {
      v456 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v456 = 1;
      *(_QWORD *)(v456 + 8) = 0;
      *(_BYTE *)(v456 + 16) = 0;
      v1444 = (WTF *)v456;
      LODWORD(v1445) = 0;
    }
    v6 = (WTF::PrintStream *)v1428;
    WTF::printExpectedCStringHelper(v453, "StringView", &v1444);
    if ((_DWORD)v1445 != -1)
      ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
    (*(void (**)(uint64_t))(*(_QWORD *)v189 + 40))(v189);
    (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
    LODWORD(v189) = *((unsigned __int16 *)v1426 + 9);
  }
  if ((v189 - 135) <= 2)
  {
    v457 = *((_QWORD *)v5 + 9);
    v458 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v459 = v1438;
    v460 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v458 + 32))(v458);
    v461 = v460;
    v462 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v460 + 32);
    if (v459)
    {
      v463 = (char *)v1434;
      v464 = v1435;
      v465 = (WTF::PrintStream *)v462(v460);
      if (v463)
      {
        v467 = v464 - 1;
        if (!v464)
          v467 = 0;
        WTF::StringImpl::utf8ForCharacters(v463, v467, (uint64_t)&v1444, v466);
      }
      else
      {
        v473 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v473 = 1;
        *(_QWORD *)(v473 + 8) = 0;
        *(_BYTE *)(v473 + 16) = 0;
        v1444 = (WTF *)v473;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v465, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v461 + 40))(v461);
      (*(void (**)(uint64_t))(*(_QWORD *)v458 + 40))(v458);
    }
    else
    {
      v468 = v1436;
      v469 = v1437;
      v470 = (WTF::PrintStream *)v462(v460);
      if (v468)
      {
        v472 = v469 - 1;
        if (!v469)
          v472 = 0;
        WTF::StringImpl::utf8ForCharacters(v468, v472, (uint64_t)&v1444, v471);
      }
      else
      {
        v474 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v474 = 1;
        *(_QWORD *)(v474 + 8) = 0;
        *(_BYTE *)(v474 + 16) = 0;
        v1444 = (WTF *)v474;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v470, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v461 + 40))(v461);
      (*(void (**)(uint64_t))(*(_QWORD *)v458 + 40))(v458);
      v1438 = 1;
    }
    v6 = (WTF::PrintStream *)v1428;
    if (v457)
    {
      v1444 = *(WTF **)v457;
      v1445 = a5;
      *(_QWORD *)&v1443 = *(_QWORD *)(v457 + 8);
      *((_QWORD *)&v1443 + 1) = a5;
      v475 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v458 + 32))(v458);
      WTF::PrintStream::printImpl<WTF::PointerDumpInContext<JSC::Structure,JSC::DumpContext>,char [5],WTF::PointerDumpInContext<JSC::Structure,JSC::DumpContext>>(v475, (uint64_t)&v1444, " -> ", (uint64_t)&v1443);
    }
    else
    {
      v476 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v458 + 32))(v458);
      WTF::PrintStream::printf(v476, "%s", "(null)");
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v458 + 40))(v458);
    (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
    v477 = *(_QWORD *)(*((_QWORD *)v5 + 9) + 8) >> 4;
    v189 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1428 + 32))(v1428);
    v478 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v189 + 32))(v189);
    WTF::StringImpl::utf8ForCharacters(", ID:", 5uLL, (uint64_t)&v1444, v479);
    WTF::printExpectedCStringHelper(v478, "StringView", &v1444);
    if ((_DWORD)v1445 != -1)
      ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
    (*(void (**)(uint64_t))(*(_QWORD *)v189 + 40))(v189);
    WTF::PrintStream::printf((WTF::PrintStream *)v189, "%u", v477);
    (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
    LODWORD(v189) = *((unsigned __int16 *)v5 + 9);
  }
  if ((v189 - 324) <= 0x2E && ((1 << (v189 - 68)) & 0x40F810200001) != 0)
    goto LABEL_518;
  if ((v189 - 182) <= 0x3E)
  {
    if (((1 << (v189 + 74)) & 0x5200015000000000) != 0)
      goto LABEL_518;
    if ((_DWORD)v189 == 182)
    {
      v480 = (*(_QWORD *)v1424 >> 50) & 0x3FLL;
      if ((v480 - 8) >= 2 && (v480 > 0x26 || ((1 << v480) & 0x7FEAB7F800) == 0))
        goto LABEL_549;
LABEL_518:
      v481 = **((_QWORD **)v5 + 9);
      if (!v481 || (v481 & 0xFFFE000000000002) != 0)
      {
        *(_QWORD *)&v1443 = **((_QWORD **)v5 + 9);
        v484 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v485 = v1438;
        v486 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v484 + 32))(v484);
        v487 = v486;
        v488 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v486 + 32);
        if (v485)
        {
          v490 = (char *)v1434;
          v489 = v1435;
          v491 = (WTF::PrintStream *)v488(v486);
          if (v490)
          {
            v493 = v489 - 1;
            if (!v489)
              v493 = 0;
            WTF::StringImpl::utf8ForCharacters(v490, v493, (uint64_t)&v1444, v492);
          }
          else
          {
            v499 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v499 = 1;
            *(_QWORD *)(v499 + 8) = 0;
            *(_BYTE *)(v499 + 16) = 0;
            v1444 = (WTF *)v499;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v491, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1431, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v487 + 40))(v487);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v484 + 40))(v484);
        }
        else
        {
          v495 = v1436;
          v494 = v1437;
          v496 = (WTF::PrintStream *)v488(v486);
          if (v495)
          {
            v498 = v494 - 1;
            if (!v494)
              v498 = 0;
            WTF::StringImpl::utf8ForCharacters(v495, v498, (uint64_t)&v1444, v497);
          }
          else
          {
            v500 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v500 = 1;
            *(_QWORD *)(v500 + 8) = 0;
            *(_BYTE *)(v500 + 16) = 0;
            v1444 = (WTF *)v500;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v496, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1431, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v487 + 40))(v487);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v484 + 40))(v484);
          v1438 = 1;
        }
        v501 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v484 + 32))(v484);
        WTF::StringImpl::utf8ForCharacters("invalid cell operand: ", 0x16uLL, (uint64_t)&v1444, v502);
        WTF::printExpectedCStringHelper(v501, "StringView", &v1444);
        if ((_DWORD)v1445 != -1)
          ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1431, &v1444);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v484 + 40))(v484);
        v503 = 0;
        if ((_QWORD)v1443 && (v1443 & 0xFFFE000000000002) == 0)
          v503 = (JSC::Structure *)(16 * (*(_DWORD *)v1443 & 0xFFFFFFFE));
        JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)&v1443, v484, 0, v503);
      }
      else
      {
        v1444 = (WTF *)**((_QWORD **)v5 + 9);
        v482 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::PointerDump<JSC::JSCell>>(v482, (uint64_t)&v1434, (_DWORD **)&v1444);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
        v483 = **((_QWORD **)v5 + 9);
        if ((v483 & 0xFFFE000000000002) != 0)
          goto LABEL_549;
        if (v483 && *(_BYTE *)(v483 + 5) == 26)
        {
          v483 = *(_QWORD *)(v483 + 24);
          if ((v483 & 1) != 0)
            v483 = *(_QWORD *)((v483 & 0xFFFFFFFFFFFFFFFELL) + 48);
        }
        else
        {
          v722 = *(unsigned int *)(16 * (*(_DWORD *)v483 & 0xFFFFFFFE) + 0x4C);
          v723 = *(_DWORD *)(16 * (*(_DWORD *)v483 & 0xFFFFFFFE) + 0x4C) != 0;
          if ((_DWORD)v722)
          {
            v724 = 16 * v722;
            if ((char **)v724 != &JSC::ExecutableBase::s_info)
            {
              do
              {
                v724 = *(_QWORD *)(v724 + 16);
                v723 = v724 != 0;
              }
              while ((char **)v724 != &JSC::ExecutableBase::s_info && v724 != 0);
            }
          }
          if (!v723)
            goto LABEL_549;
        }
        if (!v483)
        {
LABEL_549:
          LODWORD(v189) = *((unsigned __int16 *)v5 + 9);
          goto LABEL_550;
        }
        v726 = *(unsigned __int8 *)(v483 + 5);
        if (v726 == 12)
        {
          *(_QWORD *)&v1443 = v483;
          v738 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
          v739 = v1438;
          v740 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v738 + 32))(v738);
          v741 = v740;
          v742 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v740 + 32);
          if (v739)
          {
            v744 = (char *)v1434;
            v743 = v1435;
            v745 = (WTF::PrintStream *)v742(v740);
            if (v744)
            {
              v747 = v743 - 1;
              if (!v743)
                v747 = 0;
              WTF::StringImpl::utf8ForCharacters(v744, v747, (uint64_t)&v1444, v746);
            }
            else
            {
              v1407 = WTF::fastMalloc((WTF *)0x11);
              *(_DWORD *)v1407 = 1;
              *(_QWORD *)(v1407 + 8) = 0;
              *(_BYTE *)(v1407 + 16) = 0;
              v1444 = (WTF *)v1407;
              LODWORD(v1445) = 0;
            }
            WTF::printExpectedCStringHelper(v745, "StringView", &v1444);
            if ((_DWORD)v1445 != -1)
              ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1431, &v1444);
            (*(void (**)(uint64_t))(*(_QWORD *)v741 + 40))(v741);
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v738 + 40))(v738);
          }
          else
          {
            v1397 = v1436;
            v1396 = v1437;
            v1398 = (WTF::PrintStream *)v742(v740);
            if (v1397)
            {
              v1400 = v1396 - 1;
              if (!v1396)
                v1400 = 0;
              WTF::StringImpl::utf8ForCharacters(v1397, v1400, (uint64_t)&v1444, v1399);
            }
            else
            {
              v1414 = WTF::fastMalloc((WTF *)0x11);
              *(_DWORD *)v1414 = 1;
              *(_QWORD *)(v1414 + 8) = 0;
              *(_BYTE *)(v1414 + 16) = 0;
              v1444 = (WTF *)v1414;
              LODWORD(v1445) = 0;
            }
            WTF::printExpectedCStringHelper(v1398, "StringView", &v1444);
            if ((_DWORD)v1445 != -1)
              ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1431, &v1444);
            (*(void (**)(uint64_t))(*(_QWORD *)v741 + 40))(v741);
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v738 + 40))(v738);
            v1438 = 1;
          }
          JSC::FunctionExecutableDump::dump((WTF **)&v1443, v738);
        }
        else
        {
          if (v726 == 8)
          {
            v727 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
            v728 = v1438;
            v729 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v727 + 32))(v727);
            v730 = v729;
            v731 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v729 + 32);
            if (v728)
            {
              v733 = (char *)v1434;
              v732 = v1435;
              v734 = (WTF::PrintStream *)v731(v729);
              if (v733)
              {
                v736 = v732 - 1;
                if (!v732)
                  v736 = 0;
                WTF::StringImpl::utf8ForCharacters(v733, v736, (uint64_t)&v1444, v735);
              }
              else
              {
                v1406 = WTF::fastMalloc((WTF *)0x11);
                *(_DWORD *)v1406 = 1;
                *(_QWORD *)(v1406 + 8) = 0;
                *(_BYTE *)(v1406 + 16) = 0;
                v1444 = (WTF *)v1406;
                LODWORD(v1445) = 0;
              }
              WTF::printExpectedCStringHelper(v734, "StringView", &v1444);
              if ((_DWORD)v1445 != -1)
                ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
              (*(void (**)(uint64_t))(*(_QWORD *)v730 + 40))(v730);
              (*(void (**)(uint64_t))(*(_QWORD *)v727 + 40))(v727);
            }
            else
            {
              v1392 = v1436;
              v1391 = v1437;
              v1393 = (WTF::PrintStream *)v731(v729);
              if (v1392)
              {
                v1395 = v1391 - 1;
                if (!v1391)
                  v1395 = 0;
                WTF::StringImpl::utf8ForCharacters(v1392, v1395, (uint64_t)&v1444, v1394);
              }
              else
              {
                v1409 = WTF::fastMalloc((WTF *)0x11);
                *(_DWORD *)v1409 = 1;
                *(_QWORD *)(v1409 + 8) = 0;
                *(_BYTE *)(v1409 + 16) = 0;
                v1444 = (WTF *)v1409;
                LODWORD(v1445) = 0;
              }
              WTF::printExpectedCStringHelper(v1393, "StringView", &v1444);
              if ((_DWORD)v1445 != -1)
                ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
              (*(void (**)(uint64_t))(*(_QWORD *)v730 + 40))(v730);
              (*(void (**)(uint64_t))(*(_QWORD *)v727 + 40))(v727);
              v1438 = 1;
            }
            v1410 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v727 + 32))(v727);
            v1412 = "<host function>";
            v1413 = 15;
          }
          else
          {
            v727 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
            v748 = v1438;
            v749 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v727 + 32))(v727);
            v750 = v749;
            v751 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v749 + 32);
            if (v748)
            {
              v753 = (char *)v1434;
              v752 = v1435;
              v754 = (WTF::PrintStream *)v751(v749);
              if (v753)
              {
                v756 = v752 - 1;
                if (!v752)
                  v756 = 0;
                WTF::StringImpl::utf8ForCharacters(v753, v756, (uint64_t)&v1444, v755);
              }
              else
              {
                v1408 = WTF::fastMalloc((WTF *)0x11);
                *(_DWORD *)v1408 = 1;
                *(_QWORD *)(v1408 + 8) = 0;
                *(_BYTE *)(v1408 + 16) = 0;
                v1444 = (WTF *)v1408;
                LODWORD(v1445) = 0;
              }
              WTF::printExpectedCStringHelper(v754, "StringView", &v1444);
              if ((_DWORD)v1445 != -1)
                ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
              (*(void (**)(uint64_t))(*(_QWORD *)v750 + 40))(v750);
              (*(void (**)(uint64_t))(*(_QWORD *)v727 + 40))(v727);
            }
            else
            {
              v1402 = v1436;
              v1401 = v1437;
              v1403 = (WTF::PrintStream *)v751(v749);
              if (v1402)
              {
                v1405 = v1401 - 1;
                if (!v1401)
                  v1405 = 0;
                WTF::StringImpl::utf8ForCharacters(v1402, v1405, (uint64_t)&v1444, v1404);
              }
              else
              {
                v1415 = WTF::fastMalloc((WTF *)0x11);
                *(_DWORD *)v1415 = 1;
                *(_QWORD *)(v1415 + 8) = 0;
                *(_BYTE *)(v1415 + 16) = 0;
                v1444 = (WTF *)v1415;
                LODWORD(v1445) = 0;
              }
              WTF::printExpectedCStringHelper(v1403, "StringView", &v1444);
              if ((_DWORD)v1445 != -1)
                ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
              (*(void (**)(uint64_t))(*(_QWORD *)v750 + 40))(v750);
              (*(void (**)(uint64_t))(*(_QWORD *)v727 + 40))(v727);
              v1438 = 1;
            }
            v1410 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v727 + 32))(v727);
            v1412 = "<non-function executable>";
            v1413 = 25;
          }
          WTF::StringImpl::utf8ForCharacters(v1412, v1413, (uint64_t)&v1444, v1411);
          WTF::printExpectedCStringHelper(v1410, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v727 + 40))(v727);
        }
      }
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
      goto LABEL_549;
    }
  }
  if ((v189 - 250) <= 0x29 && ((1 << (v189 + 6)) & 0x28000120011) != 0)
    goto LABEL_518;
LABEL_550:
  if ((_DWORD)v189 == 295)
  {
    v504 = *((_DWORD *)v5 + 18);
    v505 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v506 = v1438;
    v507 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v505 + 32))(v505);
    v508 = v507;
    v509 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v507 + 32);
    if (v506)
    {
      v510 = (char *)v1434;
      v511 = v1435;
      v512 = (WTF::PrintStream *)v509(v507);
      if (v510)
      {
        v514 = v511 - 1;
        if (!v511)
          v514 = 0;
        WTF::StringImpl::utf8ForCharacters(v510, v514, (uint64_t)&v1444, v513);
      }
      else
      {
        v520 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v520 = 1;
        *(_QWORD *)(v520 + 8) = 0;
        *(_BYTE *)(v520 + 16) = 0;
        v1444 = (WTF *)v520;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v512, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v508 + 40))(v508);
      (*(void (**)(uint64_t))(*(_QWORD *)v505 + 40))(v505);
    }
    else
    {
      v515 = v1436;
      v516 = v1437;
      v517 = (WTF::PrintStream *)v509(v507);
      if (v515)
      {
        v519 = v516 - 1;
        if (!v516)
          v519 = 0;
        WTF::StringImpl::utf8ForCharacters(v515, v519, (uint64_t)&v1444, v518);
      }
      else
      {
        v522 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v522 = 1;
        *(_QWORD *)(v522 + 8) = 0;
        *(_BYTE *)(v522 + 16) = 0;
        v1444 = (WTF *)v522;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v517, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v508 + 40))(v508);
      (*(void (**)(uint64_t))(*(_QWORD *)v505 + 40))(v505);
      v1438 = 1;
    }
    WTF::printInternal(v505, (WTF::PrintStream *)v504, v521);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    LODWORD(v189) = *((unsigned __int16 *)v5 + 9);
  }
  if ((_DWORD)v189 == 297)
  {
    v523 = *((_DWORD *)v5 + 18);
    v524 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v525 = v1438;
    v526 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v524 + 32))(v524);
    v527 = v526;
    v528 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v526 + 32);
    if (v525)
    {
      v529 = (char *)v1434;
      v530 = v1435;
      v531 = (WTF::PrintStream *)v528(v526);
      if (v529)
      {
        v533 = v530 - 1;
        if (!v530)
          v533 = 0;
        WTF::StringImpl::utf8ForCharacters(v529, v533, (uint64_t)&v1444, v532);
      }
      else
      {
        v539 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v539 = 1;
        *(_QWORD *)(v539 + 8) = 0;
        *(_BYTE *)(v539 + 16) = 0;
        v1444 = (WTF *)v539;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v531, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v527 + 40))(v527);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v524 + 40))(v524);
    }
    else
    {
      v534 = v1436;
      v535 = v1437;
      v536 = (WTF::PrintStream *)v528(v526);
      if (v534)
      {
        v538 = v535 - 1;
        if (!v535)
          v538 = 0;
        WTF::StringImpl::utf8ForCharacters(v534, v538, (uint64_t)&v1444, v537);
      }
      else
      {
        v540 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v540 = 1;
        *(_QWORD *)(v540 + 8) = 0;
        *(_BYTE *)(v540 + 16) = 0;
        v1444 = (WTF *)v540;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v536, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v527 + 40))(v527);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v524 + 40))(v524);
      v1438 = 1;
    }
    WTF::PrintStream::printf(v524, "%u", v523);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    LODWORD(v189) = *((unsigned __int16 *)v5 + 9);
  }
  if ((v189 - 152) <= 3 && (_DWORD)v189 != 154)
  {
    v542 = (int *)*((_QWORD *)v5 + 9);
    v1444 = (WTF *)"id";
    v1445 = (WTF *)3;
    *(_QWORD *)&v1443 = "{";
    *((_QWORD *)&v1443 + 1) = 2;
    v543 = (_QWORD *)JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*((_QWORD *)this + 3) + 240), v542[1]);
    v1432 = 2;
    v1433 = v543;
    v1431 = "}";
    v544 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::UniquedStringImpl *,WTF::ASCIILiteral>(v544, (uint64_t)&v1434, (uint64_t)&v1444, v542 + 1, (uint64_t)&v1443, (uint64_t *)&v1433, (uint64_t)&v1431);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    v545 = *v542;
    v546 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v547 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v546 + 32))(v546);
    WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v1444, v548);
    WTF::printExpectedCStringHelper(v547, "StringView", &v1444);
    if ((_DWORD)v1445 != -1)
      ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v546 + 40))(v546);
    WTF::PrintStream::printf(v546, "%ld", v545);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    LODWORD(v189) = *((unsigned __int16 *)v5 + 9);
  }
  if ((_DWORD)v189 == 154)
  {
    v549 = (unsigned int *)*((_QWORD *)v1426 + 9);
    v550 = JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*((_QWORD *)this + 3) + 240), *v549);
    v551 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v552 = v1438;
    v553 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v551 + 32))(v551);
    v554 = v553;
    v555 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v553 + 32);
    if (v552)
    {
      v557 = (char *)v1434;
      v556 = v1435;
      v558 = (WTF::PrintStream *)v555(v553);
      if (v557)
      {
        v560 = v556 - 1;
        if (!v556)
          v560 = 0;
        WTF::StringImpl::utf8ForCharacters(v557, v560, (uint64_t)&v1444, v559);
      }
      else
      {
        v566 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v566 = 1;
        *(_QWORD *)(v566 + 8) = 0;
        *(_BYTE *)(v566 + 16) = 0;
        v1444 = (WTF *)v566;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v558, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v554 + 40))(v554);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v551 + 40))(v551);
    }
    else
    {
      v562 = v1436;
      v561 = v1437;
      v563 = (WTF::PrintStream *)v555(v553);
      if (v562)
      {
        v565 = v561 - 1;
        if (!v561)
          v565 = 0;
        WTF::StringImpl::utf8ForCharacters(v562, v565, (uint64_t)&v1444, v564);
      }
      else
      {
        v567 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v567 = 1;
        *(_QWORD *)(v567 + 8) = 0;
        *(_BYTE *)(v567 + 16) = 0;
        v1444 = (WTF *)v567;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v563, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v554 + 40))(v554);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v551 + 40))(v551);
      v1438 = 1;
    }
    v6 = (WTF::PrintStream *)v1428;
    WTF::PrintStream::printf(v551, "%s", "id");
    WTF::PrintStream::printf(v551, "%u", *v549);
    WTF::PrintStream::printf(v551, "%s", "{");
    if (v550)
    {
      v574 = *(char **)(v550 + 8);
      v575 = *(unsigned int *)(v550 + 4);
      if ((*(_BYTE *)(v550 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v574, v575, (uint64_t)&v1444, v573);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v574, v575, 0, v568, v569, v570, v571, v572, (uint64_t)&v1444);
      WTF::printExpectedCStringHelper(v551, "StringImpl*", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
    }
    else
    {
      WTF::PrintStream::printf(v551, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf(v551, "%s", "}");
    (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
    if (v549[5])
    {
      v576 = 0;
      v577 = 0;
      do
      {
        v578 = *((_QWORD *)v549 + 1);
        v579 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v580 = v1438;
        v581 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v579 + 32))(v579);
        v582 = v581;
        v583 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v581 + 32);
        if (v580)
        {
          v584 = (char *)v1434;
          v585 = v1435;
          v586 = (WTF::PrintStream *)v583(v581);
          if (v584)
          {
            v588 = v585 - 1;
            if (!v585)
              v588 = 0;
            WTF::StringImpl::utf8ForCharacters(v584, v588, (uint64_t)&v1444, v587);
          }
          else
          {
            v594 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v594 = 1;
            *(_QWORD *)(v594 + 8) = 0;
            *(_BYTE *)(v594 + 16) = 0;
            v1444 = (WTF *)v594;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v586, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v582 + 40))(v582);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v579 + 40))(v579);
          v6 = (WTF::PrintStream *)v1428;
        }
        else
        {
          v590 = v1436;
          v589 = v1437;
          v591 = (WTF::PrintStream *)v583(v581);
          if (v590)
          {
            v593 = v589 - 1;
            if (!v589)
              v593 = 0;
            WTF::StringImpl::utf8ForCharacters(v590, v593, (uint64_t)&v1444, v592);
          }
          else
          {
            v595 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v595 = 1;
            *(_QWORD *)(v595 + 8) = 0;
            *(_BYTE *)(v595 + 16) = 0;
            v1444 = (WTF *)v595;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v591, "StringView", &v1444);
          v6 = (WTF::PrintStream *)v1428;
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v582 + 40))(v582);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v579 + 40))(v579);
          v1438 = 1;
        }
        JSC::DFG::MultiGetByOffsetCase::dumpInContext((JSC::Structure ***)(v578 + v576), v579, a5);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
        ++v577;
        v576 += 32;
      }
      while (v577 < v549[5]);
    }
  }
  v596 = *((unsigned __int16 *)v1426 + 9);
  if (v596 == 156)
  {
    v597 = *((_QWORD *)v1426 + 9);
    v1444 = (WTF *)"id";
    v1445 = (WTF *)3;
    *(_QWORD *)&v1443 = "{";
    *((_QWORD *)&v1443 + 1) = 2;
    v598 = (_QWORD *)JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*((_QWORD *)this + 3) + 240), *(_DWORD *)v597);
    v1432 = 2;
    v1433 = v598;
    v1431 = "}";
    v599 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::UniquedStringImpl *,WTF::ASCIILiteral>(v599, (uint64_t)&v1434, (uint64_t)&v1444, (_DWORD *)v597, (uint64_t)&v1443, (uint64_t *)&v1433, (uint64_t)&v1431);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    if (*(_DWORD *)(v597 + 20))
    {
      v600 = 0;
      v601 = 0;
      do
      {
        v602 = *(_QWORD *)(v597 + 8);
        v603 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v604 = v1438;
        v605 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v603 + 32))(v603);
        v606 = v605;
        v607 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v605 + 32);
        if (v604)
        {
          v608 = (char *)v1434;
          v609 = v1435;
          v610 = (WTF::PrintStream *)v607(v605);
          if (v608)
          {
            v612 = v609 - 1;
            if (!v609)
              v612 = 0;
            WTF::StringImpl::utf8ForCharacters(v608, v612, (uint64_t)&v1444, v611);
          }
          else
          {
            v618 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v618 = 1;
            *(_QWORD *)(v618 + 8) = 0;
            *(_BYTE *)(v618 + 16) = 0;
            v1444 = (WTF *)v618;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v610, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v606 + 40))(v606);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v603 + 40))(v603);
        }
        else
        {
          v614 = v1436;
          v613 = v1437;
          v615 = (WTF::PrintStream *)v607(v605);
          if (v614)
          {
            v617 = v613 - 1;
            if (!v613)
              v617 = 0;
            WTF::StringImpl::utf8ForCharacters(v614, v617, (uint64_t)&v1444, v616);
          }
          else
          {
            v619 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v619 = 1;
            *(_QWORD *)(v619 + 8) = 0;
            *(_BYTE *)(v619 + 16) = 0;
            v1444 = (WTF *)v619;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v615, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v606 + 40))(v606);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v603 + 40))(v603);
          v1438 = 1;
        }
        JSC::PutByVariant::dumpInContext((JSC::PutByVariant *)(v602 + v600), v603, a5);
        v6 = (WTF::PrintStream *)v1428;
        (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
        ++v601;
        v600 += 64;
      }
      while (v601 < *(unsigned int *)(v597 + 20));
    }
    v596 = *((unsigned __int16 *)v1426 + 9);
  }
  if (v596 == 157)
  {
    v620 = *((_QWORD *)v1426 + 9);
    v1444 = (WTF *)"id";
    v1445 = (WTF *)3;
    *(_QWORD *)&v1443 = "{";
    *((_QWORD *)&v1443 + 1) = 2;
    v621 = (_QWORD *)JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*((_QWORD *)this + 3) + 240), *(_DWORD *)v620);
    v1432 = 2;
    v1433 = v621;
    v1431 = "}";
    v622 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::UniquedStringImpl *,WTF::ASCIILiteral>(v622, (uint64_t)&v1434, (uint64_t)&v1444, (_DWORD *)v620, (uint64_t)&v1443, (uint64_t *)&v1433, (uint64_t)&v1431);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    if (*(_DWORD *)(v620 + 20))
    {
      v623 = 0;
      v624 = 0;
      do
      {
        v625 = *(_QWORD *)(v620 + 8);
        v626 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v627 = v1438;
        v628 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v626 + 32))(v626);
        v629 = v628;
        v630 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v628 + 32);
        if (v627)
        {
          v631 = (char *)v1434;
          v632 = v1435;
          v633 = (WTF::PrintStream *)v630(v628);
          if (v631)
          {
            v635 = v632 - 1;
            if (!v632)
              v635 = 0;
            WTF::StringImpl::utf8ForCharacters(v631, v635, (uint64_t)&v1444, v634);
          }
          else
          {
            v641 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v641 = 1;
            *(_QWORD *)(v641 + 8) = 0;
            *(_BYTE *)(v641 + 16) = 0;
            v1444 = (WTF *)v641;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v633, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v629 + 40))(v629);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v626 + 40))(v626);
        }
        else
        {
          v637 = v1436;
          v636 = v1437;
          v638 = (WTF::PrintStream *)v630(v628);
          if (v637)
          {
            v640 = v636 - 1;
            if (!v636)
              v640 = 0;
            WTF::StringImpl::utf8ForCharacters(v637, v640, (uint64_t)&v1444, v639);
          }
          else
          {
            v642 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v642 = 1;
            *(_QWORD *)(v642 + 8) = 0;
            *(_BYTE *)(v642 + 16) = 0;
            v1444 = (WTF *)v642;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v638, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v629 + 40))(v629);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v626 + 40))(v626);
          v1438 = 1;
        }
        JSC::DeleteByVariant::dumpInContext((JSC::DeleteByVariant *)(v625 + v623), v626, a5);
        v6 = (WTF::PrintStream *)v1428;
        (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
        ++v624;
        v623 += 40;
      }
      while (v624 < *(unsigned int *)(v620 + 20));
    }
  }
  v643 = v1426;
  v644 = *((unsigned __int16 *)v1426 + 9);
  if (v644 != 294)
    goto LABEL_716;
  v645 = (uint64_t *)*((_QWORD *)v1426 + 9);
  v646 = *((unsigned int *)v645 + 3);
  if ((_DWORD)v646)
  {
    v647 = *v645;
    v648 = *v645 + 16 * v646;
    do
    {
      v649 = *(JSC::Structure **)v647;
      v650 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
      v651 = v1438;
      v652 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v650 + 32))(v650);
      v653 = v652;
      v654 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v652 + 32);
      if (v651)
      {
        v655 = (char *)v1434;
        v656 = v1435;
        v657 = (WTF::PrintStream *)v654(v652);
        if (v655)
        {
          v659 = v656 - 1;
          if (!v656)
            v659 = 0;
          WTF::StringImpl::utf8ForCharacters(v655, v659, (uint64_t)&v1444, v658);
        }
        else
        {
          v665 = WTF::fastMalloc((WTF *)0x11);
          *(_DWORD *)v665 = 1;
          *(_QWORD *)(v665 + 8) = 0;
          *(_BYTE *)(v665 + 16) = 0;
          v1444 = (WTF *)v665;
          LODWORD(v1445) = 0;
        }
        WTF::printExpectedCStringHelper(v657, "StringView", &v1444);
        if ((_DWORD)v1445 != -1)
          ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
        (*(void (**)(uint64_t))(*(_QWORD *)v653 + 40))(v653);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v650 + 40))(v650);
      }
      else
      {
        v660 = v1436;
        v661 = v1437;
        v662 = (WTF::PrintStream *)v654(v652);
        if (v660)
        {
          v664 = v661 - 1;
          if (!v661)
            v664 = 0;
          WTF::StringImpl::utf8ForCharacters(v660, v664, (uint64_t)&v1444, v663);
        }
        else
        {
          v666 = WTF::fastMalloc((WTF *)0x11);
          *(_DWORD *)v666 = 1;
          *(_QWORD *)(v666 + 8) = 0;
          *(_BYTE *)(v666 + 16) = 0;
          v1444 = (WTF *)v666;
          LODWORD(v1445) = 0;
        }
        WTF::printExpectedCStringHelper(v662, "StringView", &v1444);
        if ((_DWORD)v1445 != -1)
          ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
        (*(void (**)(uint64_t))(*(_QWORD *)v653 + 40))(v653);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v650 + 40))(v650);
        v1438 = 1;
      }
      v643 = v1426;
      if (a5)
      {
        WTF::StringHashDumpContext<JSC::Structure>::getID(v649, (uint64_t *)a5, (int8x16_t **)&v1444);
        JSC::Structure::dumpBrief(v649, v650, (const WTF::CString *)&v1444);
        v674 = v1444;
        v1444 = 0;
        if (v674)
        {
          if (*(_DWORD *)v674 == 1)
            WTF::fastFree((unint64_t)v674, v667, v668, v669, v670, v671, v672, v673);
          else
            --*(_DWORD *)v674;
        }
      }
      else
      {
        JSC::Structure::dump((unint64_t)v649, v650);
      }
      v675 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v650 + 32))(v650);
      WTF::StringImpl::utf8ForCharacters("=>", 2uLL, (uint64_t)&v1444, v676);
      WTF::printExpectedCStringHelper(v675, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v650 + 40))(v650);
      if (*(_BYTE *)(v647 + 8))
        v677 = "true";
      else
        v677 = "false";
      v678 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v650 + 32))(v650);
      WTF::PrintStream::printf(v678, "%s", v677);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v650 + 40))(v650);
      v6 = (WTF::PrintStream *)v1428;
      (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
      v647 += 16;
    }
    while (v647 != v648);
    v644 = *((unsigned __int16 *)v1426 + 9);
LABEL_716:
    if (v644 <= 0x27 && (((1 << v644) & 0xC030018000) != 0 || v644 == 27 && *((_DWORD *)this + 236) != 2))
    {
      v679 = (_QWORD *)*((_QWORD *)v643 + 9);
      if (v679)
      {
        v680 = (_QWORD *)*((_QWORD *)v643 + 9);
        do
        {
          v681 = v680;
          v680 = (_QWORD *)*v680;
        }
        while (v680);
        if (v681 == v679)
          v681 = (_QWORD *)*((_QWORD *)v643 + 9);
        else
          *v679 = v681;
        v682 = v681[3];
        *(_QWORD *)&v1443 = this;
        *((_QWORD *)&v1443 + 1) = v681;
        v683 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v684 = v1438;
        v685 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v683 + 32))(v683);
        v686 = v685;
        v687 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v685 + 32);
        if (v684)
        {
          v688 = (char *)v1434;
          v689 = v1435;
          v690 = (WTF::PrintStream *)v687(v685);
          if (v688)
          {
            v692 = v689 - 1;
            if (!v689)
              v692 = 0;
            WTF::StringImpl::utf8ForCharacters(v688, v692, (uint64_t)&v1444, v691);
          }
          else
          {
            v698 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v698 = 1;
            *(_QWORD *)(v698 + 8) = 0;
            *(_BYTE *)(v698 + 16) = 0;
            v1444 = (WTF *)v698;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v690, "StringView", &v1444);
          v6 = (WTF::PrintStream *)v1428;
          if ((_DWORD)v1445 != -1)
            ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1431, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v686 + 40))(v686);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v683 + 40))(v683);
        }
        else
        {
          v693 = v1436;
          v694 = v1437;
          v695 = (WTF::PrintStream *)v687(v685);
          if (v693)
          {
            v697 = v694 - 1;
            if (!v694)
              v697 = 0;
            WTF::StringImpl::utf8ForCharacters(v693, v697, (uint64_t)&v1444, v696);
          }
          else
          {
            v699 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v699 = 1;
            *(_QWORD *)(v699 + 8) = 0;
            *(_BYTE *)(v699 + 16) = 0;
            v1444 = (WTF *)v699;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v695, "StringView", &v1444);
          v6 = (WTF::PrintStream *)v1428;
          if ((_DWORD)v1445 != -1)
            ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1431, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v686 + 40))(v686);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v683 + 40))(v683);
          v1438 = 1;
        }
        if (HIDWORD(v682) == 2)
        {
          v700 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v683 + 32))(v683);
          WTF::PrintStream::printf(v700, "%s", "tmp");
          WTF::PrintStream::printf(v700, "%d", v682);
        }
        else
        {
          LODWORD(v1444) = v682;
          v701 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v683 + 32))(v683);
          JSC::VirtualRegister::dump((unsigned int *)&v1444, v701);
        }
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v683 + 40))(v683);
        v702 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v683 + 32))(v683);
        WTF::StringImpl::utf8ForCharacters("(", 1uLL, (uint64_t)&v1444, v703);
        WTF::printExpectedCStringHelper(v702, "StringView", &v1444);
        if ((_DWORD)v1445 != -1)
          ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1431, &v1444);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v683 + 40))(v683);
        JSC::DFG::VariableAccessDataDump::dump((JSC::DFG::VariableAccessDataDump *)&v1443, v683);
        v704 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v683 + 32))(v683);
        WTF::StringImpl::utf8ForCharacters(")", 1uLL, (uint64_t)&v1444, v705);
        WTF::printExpectedCStringHelper(v704, "StringView", &v1444);
        if ((_DWORD)v1445 != -1)
          ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1431, &v1444);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v683 + 40))(v683);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
        v706 = *((_DWORD *)v681 + 8);
        if (v706 != 0x3FFFFFFF)
        {
          v707 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
          v708 = v1438;
          v709 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v707 + 32))(v707);
          v710 = v709;
          v711 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v709 + 32);
          if (v708)
          {
            v712 = (char *)v1434;
            v713 = v1435;
            v714 = (WTF::PrintStream *)v711(v709);
            if (v712)
            {
              v716 = v713 - 1;
              if (!v713)
                v716 = 0;
              WTF::StringImpl::utf8ForCharacters(v712, v716, (uint64_t)&v1444, v715);
            }
            else
            {
              v737 = WTF::fastMalloc((WTF *)0x11);
              *(_DWORD *)v737 = 1;
              *(_QWORD *)(v737 + 8) = 0;
              *(_BYTE *)(v737 + 16) = 0;
              v1444 = (WTF *)v737;
              LODWORD(v1445) = 0;
            }
            WTF::printExpectedCStringHelper(v714, "StringView", &v1444);
            if ((_DWORD)v1445 != -1)
              ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
            (*(void (**)(uint64_t))(*(_QWORD *)v710 + 40))(v710);
            (*(void (**)(uint64_t))(*(_QWORD *)v707 + 40))(v707);
          }
          else
          {
            v717 = v1436;
            v718 = v1437;
            v719 = (WTF::PrintStream *)v711(v709);
            if (v717)
            {
              v721 = v718 - 1;
              if (!v718)
                v721 = 0;
              WTF::StringImpl::utf8ForCharacters(v717, v721, (uint64_t)&v1444, v720);
            }
            else
            {
              v757 = WTF::fastMalloc((WTF *)0x11);
              *(_DWORD *)v757 = 1;
              *(_QWORD *)(v757 + 8) = 0;
              *(_BYTE *)(v757 + 16) = 0;
              v1444 = (WTF *)v757;
              LODWORD(v1445) = 0;
            }
            WTF::printExpectedCStringHelper(v719, "StringView", &v1444);
            if ((_DWORD)v1445 != -1)
              ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
            (*(void (**)(uint64_t))(*(_QWORD *)v710 + 40))(v710);
            (*(void (**)(uint64_t))(*(_QWORD *)v707 + 40))(v707);
            v1438 = 1;
          }
          v758 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v707 + 32))(v707);
          WTF::StringImpl::utf8ForCharacters("machine:", 8uLL, (uint64_t)&v1444, v759);
          WTF::printExpectedCStringHelper(v758, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v707 + 40))(v707);
          LODWORD(v1444) = v706;
          v760 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v707 + 32))(v707);
          JSC::VirtualRegister::dump((unsigned int *)&v1444, v760);
          (*(void (**)(uint64_t))(*(_QWORD *)v707 + 40))(v707);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
        }
      }
    }
  }
  v761 = *((unsigned __int16 *)v643 + 9);
  if ((((_WORD)v761 - 17) & 0xFFFD) == 0)
  {
    v762 = *((_QWORD *)v643 + 9);
    v763 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    WTF::PrintStream::printImpl<WTF::CommaPrinter,JSC::Operand>(v763, (uint64_t)&v1434, (int *)v762);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    if (*(_DWORD *)(v762 + 8) != 0x3FFFFFFF)
    {
      v764 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
      v765 = v1438;
      v766 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v764 + 32))(v764);
      v767 = v766;
      v768 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v766 + 32);
      if (v765)
      {
        v770 = (char *)v1434;
        v769 = v1435;
        v771 = (WTF::PrintStream *)v768(v766);
        if (v770)
        {
          v773 = v769 - 1;
          if (!v769)
            v773 = 0;
          WTF::StringImpl::utf8ForCharacters(v770, v773, (uint64_t)&v1444, v772);
        }
        else
        {
          v779 = WTF::fastMalloc((WTF *)0x11);
          *(_DWORD *)v779 = 1;
          *(_QWORD *)(v779 + 8) = 0;
          *(_BYTE *)(v779 + 16) = 0;
          v1444 = (WTF *)v779;
          LODWORD(v1445) = 0;
        }
        WTF::printExpectedCStringHelper(v771, "StringView", &v1444);
        if ((_DWORD)v1445 != -1)
          ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
        (*(void (**)(uint64_t))(*(_QWORD *)v767 + 40))(v767);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v764 + 40))(v764);
      }
      else
      {
        v775 = v1436;
        v774 = v1437;
        v776 = (WTF::PrintStream *)v768(v766);
        if (v775)
        {
          v778 = v774 - 1;
          if (!v774)
            v778 = 0;
          WTF::StringImpl::utf8ForCharacters(v775, v778, (uint64_t)&v1444, v777);
        }
        else
        {
          v780 = WTF::fastMalloc((WTF *)0x11);
          *(_DWORD *)v780 = 1;
          *(_QWORD *)(v780 + 8) = 0;
          *(_BYTE *)(v780 + 16) = 0;
          v1444 = (WTF *)v780;
          LODWORD(v1445) = 0;
        }
        WTF::printExpectedCStringHelper(v776, "StringView", &v1444);
        if ((_DWORD)v1445 != -1)
          ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
        (*(void (**)(uint64_t))(*(_QWORD *)v767 + 40))(v767);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v764 + 40))(v764);
        v1438 = 1;
      }
      v781 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v764 + 32))(v764);
      WTF::StringImpl::utf8ForCharacters("machine:", 8uLL, (uint64_t)&v1444, v782);
      WTF::printExpectedCStringHelper(v781, "StringView", &v1444);
      v6 = (WTF::PrintStream *)v1428;
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v764 + 40))(v764);
      JSC::VirtualRegister::dump((unsigned int *)(v762 + 8), v764);
      (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
    }
    v783 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    WTF::PrintStream::printImpl<WTF::CommaPrinter,JSC::DFG::FlushFormat>(v783, (uint64_t)&v1434, (char *)(v762 + 12));
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    v761 = *((unsigned __int16 *)v643 + 9);
  }
  if (v761 <= 0x20 && ((1 << v761) & 0x100340000) != 0)
  {
    v1444 = (WTF *)*((_QWORD *)v643 + 9);
    v784 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    WTF::PrintStream::printImpl<WTF::CommaPrinter,JSC::Operand>(v784, (uint64_t)&v1434, (int *)&v1444);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    v761 = *((unsigned __int16 *)v643 + 9);
  }
  if (v761 == 262 || v761 == 352 || v761 == 267)
  {
    *(_QWORD *)&v1443 = "vectorLengthHint = ";
    *((_QWORD *)&v1443 + 1) = 20;
    LODWORD(v1431) = *((_DWORD *)v643 + 20);
    v1444 = (WTF *)&v1434;
    v1445 = (WTF *)&v1443;
    *(_QWORD *)&v1446 = &v1431;
    WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned int>(WTF::CommaPrinter,WTF::ASCIILiteral,unsigned int const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)v6, &v1444);
    v761 = *((unsigned __int16 *)v643 + 9);
  }
  if (v761 == 3)
  {
    v1443 = *(_OWORD *)*((_QWORD *)v643 + 9);
    v785 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    v786 = v1438;
    v787 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v785 + 32))(v785);
    v788 = v787;
    v789 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v787 + 32);
    if (v786)
    {
      v791 = (char *)v1434;
      v790 = v1435;
      v792 = (WTF::PrintStream *)v789(v787);
      if (v791)
      {
        v794 = v790 - 1;
        if (!v790)
          v794 = 0;
        WTF::StringImpl::utf8ForCharacters(v791, v794, (uint64_t)&v1444, v793);
      }
      else
      {
        v800 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v800 = 1;
        *(_QWORD *)(v800 + 8) = 0;
        *(_BYTE *)(v800 + 16) = 0;
        v1444 = (WTF *)v800;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v792, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1431, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v788 + 40))(v788);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v785 + 40))(v785);
    }
    else
    {
      v796 = v1436;
      v795 = v1437;
      v797 = (WTF::PrintStream *)v789(v787);
      if (v796)
      {
        v799 = v795 - 1;
        if (!v795)
          v799 = 0;
        WTF::StringImpl::utf8ForCharacters(v796, v799, (uint64_t)&v1444, v798);
      }
      else
      {
        v801 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v801 = 1;
        *(_QWORD *)(v801 + 8) = 0;
        *(_BYTE *)(v801 + 16) = 0;
        v1444 = (WTF *)v801;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v797, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1431, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v788 + 40))(v788);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v785 + 40))(v785);
      v1438 = 1;
    }
    JSC::DFG::LazyJSValue::dumpInContext((JSC::DFG::LazyJSValue *)&v1443, v785, 0);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    v761 = *((unsigned __int16 *)v643 + 9);
  }
  switch(v761)
  {
    case 0x106u:
    case 0x109u:
    case 0x10Au:
      v802 = *((_DWORD *)v643 + 18);
      goto LABEL_855;
    case 0x107u:
      goto LABEL_878;
    case 0x108u:
      v802 = *((_DWORD *)v643 + 19);
      goto LABEL_855;
    case 0x10Bu:
      goto LABEL_853;
    default:
      if (v761 == 352)
      {
LABEL_853:
        v802 = *((_DWORD *)v643 + 21);
LABEL_855:
        v803 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v804 = v1438;
        v805 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v803 + 32))(v803);
        v806 = v805;
        v807 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v805 + 32);
        if (v804)
        {
          v808 = (char *)v1434;
          v809 = v1435;
          v810 = (WTF::PrintStream *)v807(v805);
          if (v808)
          {
            v812 = v809 - 1;
            if (!v809)
              v812 = 0;
            WTF::StringImpl::utf8ForCharacters(v808, v812, (uint64_t)&v1444, v811);
          }
          else
          {
            v818 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v818 = 1;
            *(_QWORD *)(v818 + 8) = 0;
            *(_BYTE *)(v818 + 16) = 0;
            v1444 = (WTF *)v818;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v810, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v806 + 40))(v806);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v803 + 40))(v803);
        }
        else
        {
          v813 = v1436;
          v814 = v1437;
          v815 = (WTF::PrintStream *)v807(v805);
          if (v813)
          {
            v817 = v814 - 1;
            if (!v814)
              v817 = 0;
            WTF::StringImpl::utf8ForCharacters(v813, v817, (uint64_t)&v1444, v816);
          }
          else
          {
            v819 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v819 = 1;
            *(_QWORD *)(v819 + 8) = 0;
            *(_BYTE *)(v819 + 16) = 0;
            v1444 = (WTF *)v819;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v815, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v806 + 40))(v806);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v803 + 40))(v803);
          v1438 = 1;
        }
        if ((v802 & 0x1Fu) > 0x19)
          v820 = "Unknown!";
        else
          v820 = off_1E358E248[v802 & 0x1F];
        v821 = "|MayHaveIndexedAccessors";
        if ((v802 & 0x20) == 0)
          v821 = "";
        WTF::PrintStream::printf(v803, "%s%s", v820, v821);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
LABEL_878:
      if (v761 == 269)
      {
        v822 = *((_DWORD *)v643 + 18);
        v823 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v824 = v1438;
        v825 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v823 + 32))(v823);
        v826 = v825;
        v827 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v825 + 32);
        if (v824)
        {
          v828 = (char *)v1434;
          v829 = v1435;
          v830 = (WTF::PrintStream *)v827(v825);
          if (v828)
          {
            v832 = v829 - 1;
            if (!v829)
              v832 = 0;
            WTF::StringImpl::utf8ForCharacters(v828, v832, (uint64_t)&v1444, v831);
          }
          else
          {
            v838 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v838 = 1;
            *(_QWORD *)(v838 + 8) = 0;
            *(_BYTE *)(v838 + 16) = 0;
            v1444 = (WTF *)v838;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v830, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v826 + 40))(v826);
          (*(void (**)(uint64_t))(*(_QWORD *)v823 + 40))(v823);
        }
        else
        {
          v833 = v1436;
          v834 = v1437;
          v835 = (WTF::PrintStream *)v827(v825);
          if (v833)
          {
            v837 = v834 - 1;
            if (!v834)
              v837 = 0;
            WTF::StringImpl::utf8ForCharacters(v833, v837, (uint64_t)&v1444, v836);
          }
          else
          {
            v839 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v839 = 1;
            *(_QWORD *)(v839 + 8) = 0;
            *(_BYTE *)(v839 + 16) = 0;
            v1444 = (WTF *)v839;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v835, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v826 + 40))(v826);
          (*(void (**)(uint64_t))(*(_QWORD *)v823 + 40))(v823);
          v1438 = 1;
        }
        if (v822 >= 0xDu)
        {
          __break(0xC471u);
          JUMPOUT(0x1983C8EE0);
        }
        v840 = off_1E358E318[(char)v822];
        v841 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v823 + 32))(v823);
        WTF::PrintStream::printf(v841, "%s", v840);
        (*(void (**)(uint64_t))(*(_QWORD *)v823 + 40))(v823);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
      if (v761 == 26)
      {
        *(_QWORD *)&v1443 = "^";
        *((_QWORD *)&v1443 + 1) = 2;
        LODWORD(v1431) = *(_DWORD *)(*((_QWORD *)v643 + 9) + 20);
        v1444 = (WTF *)&v1434;
        v1445 = (WTF *)&v1443;
        *(_QWORD *)&v1446 = &v1431;
        WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned int>(WTF::CommaPrinter,WTF::ASCIILiteral,unsigned int const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)v6, &v1444);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
      if (v761 == 376)
      {
        v842 = (const void *)*((_QWORD *)v643 + 9);
        v843 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v844 = v1438;
        v845 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v843 + 32))(v843);
        v846 = v845;
        v847 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v845 + 32);
        if (v844)
        {
          v848 = (char *)v1434;
          v849 = v1435;
          v850 = (WTF::PrintStream *)v847(v845);
          if (v848)
          {
            v852 = v849 - 1;
            if (!v849)
              v852 = 0;
            WTF::StringImpl::utf8ForCharacters(v848, v852, (uint64_t)&v1444, v851);
          }
          else
          {
            v858 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v858 = 1;
            *(_QWORD *)(v858 + 8) = 0;
            *(_BYTE *)(v858 + 16) = 0;
            v1444 = (WTF *)v858;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v850, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v846 + 40))(v846);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v843 + 40))(v843);
        }
        else
        {
          v853 = v1436;
          v854 = v1437;
          v855 = (WTF::PrintStream *)v847(v845);
          if (v853)
          {
            v857 = v854 - 1;
            if (!v854)
              v857 = 0;
            WTF::StringImpl::utf8ForCharacters(v853, v857, (uint64_t)&v1444, v856);
          }
          else
          {
            v859 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v859 = 1;
            *(_QWORD *)(v859 + 8) = 0;
            *(_BYTE *)(v859 + 16) = 0;
            v1444 = (WTF *)v859;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v855, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v846 + 40))(v846);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v843 + 40))(v843);
          v1438 = 1;
        }
        WTF::PrintStream::printf(v843, "%p", v842);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
      if (v761 == 178)
      {
        v860 = (const void *)*((_QWORD *)v643 + 9);
        v861 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v862 = v1438;
        v863 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v861 + 32))(v861);
        v864 = v863;
        v865 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v863 + 32);
        if (v862)
        {
          v866 = (char *)v1434;
          v867 = v1435;
          v868 = (WTF::PrintStream *)v865(v863);
          if (v866)
          {
            v870 = v867 - 1;
            if (!v867)
              v870 = 0;
            WTF::StringImpl::utf8ForCharacters(v866, v870, (uint64_t)&v1444, v869);
          }
          else
          {
            v876 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v876 = 1;
            *(_QWORD *)(v876 + 8) = 0;
            *(_BYTE *)(v876 + 16) = 0;
            v1444 = (WTF *)v876;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v868, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v864 + 40))(v864);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v861 + 40))(v861);
        }
        else
        {
          v871 = v1436;
          v872 = v1437;
          v873 = (WTF::PrintStream *)v865(v863);
          if (v871)
          {
            v875 = v872 - 1;
            if (!v872)
              v875 = 0;
            WTF::StringImpl::utf8ForCharacters(v871, v875, (uint64_t)&v1444, v874);
          }
          else
          {
            v877 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v877 = 1;
            *(_QWORD *)(v877 + 8) = 0;
            *(_BYTE *)(v877 + 16) = 0;
            v1444 = (WTF *)v877;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v873, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v864 + 40))(v864);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v861 + 40))(v861);
          v1438 = 1;
        }
        WTF::PrintStream::printf(v861, "%p", v860);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
      if (v761 == 149)
      {
        v878 = (const void *)*((_QWORD *)v643 + 9);
        v879 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v880 = v1438;
        v881 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v879 + 32))(v879);
        v882 = v881;
        v883 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v881 + 32);
        if (v880)
        {
          v884 = (char *)v1434;
          v885 = v1435;
          v886 = (WTF::PrintStream *)v883(v881);
          if (v884)
          {
            v888 = v885 - 1;
            if (!v885)
              v888 = 0;
            WTF::StringImpl::utf8ForCharacters(v884, v888, (uint64_t)&v1444, v887);
          }
          else
          {
            v894 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v894 = 1;
            *(_QWORD *)(v894 + 8) = 0;
            *(_BYTE *)(v894 + 16) = 0;
            v1444 = (WTF *)v894;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v886, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v882 + 40))(v882);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v879 + 40))(v879);
        }
        else
        {
          v889 = v1436;
          v890 = v1437;
          v891 = (WTF::PrintStream *)v883(v881);
          if (v889)
          {
            v893 = v890 - 1;
            if (!v890)
              v893 = 0;
            WTF::StringImpl::utf8ForCharacters(v889, v893, (uint64_t)&v1444, v892);
          }
          else
          {
            v895 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v895 = 1;
            *(_QWORD *)(v895 + 8) = 0;
            *(_BYTE *)(v895 + 16) = 0;
            v1444 = (WTF *)v895;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v891, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v882 + 40))(v882);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v879 + 40))(v879);
          v1438 = 1;
        }
        WTF::PrintStream::printf(v879, "%p", v878);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
      if (v761 - 281 <= 8 && ((1 << (v761 - 25)) & 0x141) != 0)
      {
        v896 = (WTF *)*((_QWORD *)v643 + 10);
        v897 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v898 = v1438;
        v899 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v897 + 32))(v897);
        v900 = v899;
        v901 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v899 + 32);
        if (v898)
        {
          v902 = (char *)v1434;
          v903 = v1435;
          v904 = (WTF::PrintStream *)v901(v899);
          if (v902)
          {
            v906 = v903 - 1;
            if (!v903)
              v906 = 0;
            WTF::StringImpl::utf8ForCharacters(v902, v906, (uint64_t)&v1444, v905);
          }
          else
          {
            v912 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v912 = 1;
            *(_QWORD *)(v912 + 8) = 0;
            *(_BYTE *)(v912 + 16) = 0;
            v1444 = (WTF *)v912;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v904, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v900 + 40))(v900);
          (*(void (**)(uint64_t))(*(_QWORD *)v897 + 40))(v897);
        }
        else
        {
          v907 = v1436;
          v908 = v1437;
          v909 = (WTF::PrintStream *)v901(v899);
          if (v907)
          {
            v911 = v908 - 1;
            if (!v908)
              v911 = 0;
            WTF::StringImpl::utf8ForCharacters(v907, v911, (uint64_t)&v1444, v910);
          }
          else
          {
            v913 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v913 = 1;
            *(_QWORD *)(v913 + 8) = 0;
            *(_BYTE *)(v913 + 16) = 0;
            v1444 = (WTF *)v913;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v909, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v900 + 40))(v900);
          (*(void (**)(uint64_t))(*(_QWORD *)v897 + 40))(v897);
          v1438 = 1;
        }
        v1444 = v896;
        v1445 = (WTF *)", ";
        *(_QWORD *)&v1446 = 3;
        *((_QWORD *)&v1446 + 1) = &str_77_5;
        v1447 = 1;
        v1448 = 0;
        v914 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v897 + 32))(v897);
        WTF::PrintStream::printf(v914, "%s", "[");
        WTF::ListDump<WTF::Vector<JSC::DFG::PromotedLocationDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump((int ***)&v1444, (uint64_t)v914);
        WTF::PrintStream::printf(v914, "%s", "]");
        (*(void (**)(uint64_t))(*(_QWORD *)v897 + 40))(v897);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
      if (v761 - 245 <= 7 && ((1 << (v761 + 11)) & 0xCF) != 0 || v761 - 371 < 2)
      {
        *(_QWORD *)&v1443 = "firstVarArgOffset = ";
        *((_QWORD *)&v1443 + 1) = 21;
        v915 = *((_QWORD *)v643 + 9);
        v1444 = (WTF *)&v1434;
        v1445 = (WTF *)&v1443;
        *(_QWORD *)&v1446 = v915;
        WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,int>(WTF::CommaPrinter,WTF::ASCIILiteral,int const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)v6, &v1444);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
      if (v761 - 98 <= 2)
      {
        v916 = (unsigned int *)*((_QWORD *)v643 + 9);
        v917 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v918 = v1438;
        v919 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v917 + 32))(v917);
        v920 = v919;
        v921 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v919 + 32);
        if (v918)
        {
          v923 = (char *)v1434;
          v922 = v1435;
          v924 = (WTF::PrintStream *)v921(v919);
          if (v923)
          {
            v926 = v922 - 1;
            if (!v922)
              v926 = 0;
            WTF::StringImpl::utf8ForCharacters(v923, v926, (uint64_t)&v1444, v925);
          }
          else
          {
            v932 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v932 = 1;
            *(_QWORD *)(v932 + 8) = 0;
            *(_BYTE *)(v932 + 16) = 0;
            v1444 = (WTF *)v932;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v924, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v920 + 40))(v920);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v917 + 40))(v917);
        }
        else
        {
          v928 = v1436;
          v927 = v1437;
          v929 = (WTF::PrintStream *)v921(v919);
          if (v928)
          {
            v931 = v927 - 1;
            if (!v927)
              v931 = 0;
            WTF::StringImpl::utf8ForCharacters(v928, v931, (uint64_t)&v1444, v930);
          }
          else
          {
            v933 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v933 = 1;
            *(_QWORD *)(v933 + 8) = 0;
            *(_BYTE *)(v933 + 16) = 0;
            v1444 = (WTF *)v933;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v929, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v920 + 40))(v920);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v917 + 40))(v917);
          v1438 = 1;
        }
        v6 = (WTF::PrintStream *)v1428;
        v934 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v917 + 32))(v917);
        WTF::StringImpl::utf8ForCharacters("start = ", 8uLL, (uint64_t)&v1444, v935);
        WTF::printExpectedCStringHelper(v934, "StringView", &v1444);
        if ((_DWORD)v1445 != -1)
          ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v917 + 40))(v917);
        JSC::VirtualRegister::dump(v916, v917);
        v936 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v917 + 32))(v917);
        WTF::StringImpl::utf8ForCharacters(", count = ", 0xAuLL, (uint64_t)&v1444, v937);
        WTF::printExpectedCStringHelper(v936, "StringView", &v1444);
        if ((_DWORD)v1445 != -1)
          ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v917 + 40))(v917);
        JSC::VirtualRegister::dump(v916 + 1, v917);
        (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
        if (v916[2] != 0x3FFFFFFF)
        {
          v938 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1428 + 32))(v1428);
          WTF::PrintStream::printf(v938, "%s", ", machineStart = ");
          JSC::VirtualRegister::dump(v916 + 2, v938);
          (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
        }
        if (v916[3] != 0x3FFFFFFF)
        {
          v939 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1428 + 32))(v1428);
          v940 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v939 + 32))(v939);
          WTF::StringImpl::utf8ForCharacters(", machineCount = ", 0x11uLL, (uint64_t)&v1444, v941);
          WTF::printExpectedCStringHelper(v940, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v939 + 40))(v939);
          JSC::VirtualRegister::dump(v916 + 3, v939);
          (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
        }
        v942 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1428 + 32))(v1428);
        v943 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v942 + 32))(v942);
        WTF::StringImpl::utf8ForCharacters(", offset = ", 0xBuLL, (uint64_t)&v1444, v944);
        WTF::printExpectedCStringHelper(v943, "StringView", &v1444);
        if ((_DWORD)v1445 != -1)
          ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v942 + 40))(v942);
        WTF::PrintStream::printf(v942, "%u", v916[4]);
        v945 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v942 + 32))(v942);
        WTF::StringImpl::utf8ForCharacters(", mandatoryMinimum = ", 0x15uLL, (uint64_t)&v1444, v946);
        WTF::printExpectedCStringHelper(v945, "StringView", &v1444);
        if ((_DWORD)v1445 != -1)
          ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v942 + 40))(v942);
        WTF::PrintStream::printf(v942, "%u", v916[5]);
        (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
        v947 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1428 + 32))(v1428);
        v948 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v947 + 32))(v947);
        WTF::StringImpl::utf8ForCharacters(", limit = ", 0xAuLL, (uint64_t)&v1444, v949);
        WTF::printExpectedCStringHelper(v948, "StringView", &v1444);
        if ((_DWORD)v1445 != -1)
          ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v947 + 40))(v947);
        WTF::PrintStream::printf(v947, "%u", v916[6]);
        (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
      if (v761 == 8)
      {
        *(_QWORD *)&v1443 = "isInternalPromise = ";
        *((_QWORD *)&v1443 + 1) = 21;
        LOBYTE(v1431) = *((_DWORD *)v643 + 20) != 0;
        v1444 = (WTF *)&v1434;
        v1445 = (WTF *)&v1443;
        *(_QWORD *)&v1446 = &v1431;
        WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,BOOL>(WTF::CommaPrinter,WTF::ASCIILiteral,BOOL const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)v6, &v1444);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
      if ((unsigned __int16)(v761 - 345) == 65534 || (unsigned __int16)(v761 - 345) == 0xFFFF)
      {
        *(_QWORD *)&v1443 = "internalFieldIndex = ";
        *((_QWORD *)&v1443 + 1) = 22;
        LODWORD(v1431) = *((_DWORD *)v643 + 18);
        v1444 = (WTF *)&v1434;
        v1445 = (WTF *)&v1443;
        *(_QWORD *)&v1446 = &v1431;
        WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned int>(WTF::CommaPrinter,WTF::ASCIILiteral,unsigned int const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)v6, &v1444);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
      if (v761 == 416)
      {
        v950 = (_DWORD *)*((_QWORD *)v643 + 9);
        v1444 = (WTF *)"id";
        v1445 = (WTF *)3;
        *(_QWORD *)&v1443 = "{";
        *((_QWORD *)&v1443 + 1) = 2;
        v951 = v950[6];
        v950 += 6;
        v952 = (_QWORD *)JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*((_QWORD *)this + 3) + 240), v951);
        v1432 = 2;
        v1433 = v952;
        v1431 = "}";
        v953 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::UniquedStringImpl *,WTF::ASCIILiteral>(v953, (uint64_t)&v1434, (uint64_t)&v1444, v950, (uint64_t)&v1443, (uint64_t *)&v1433, (uint64_t)&v1431);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
        v954 = (const void *)*((_QWORD *)v950 - 2);
        v955 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v956 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v955 + 32))(v955);
        WTF::StringImpl::utf8ForCharacters(", domJIT = ", 0xBuLL, (uint64_t)&v1444, v957);
        WTF::printExpectedCStringHelper(v956, "StringView", &v1444);
        if ((_DWORD)v1445 != -1)
          ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v955 + 40))(v955);
        WTF::PrintStream::printf(v955, "%p", v954);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
      if (v761 == 180)
      {
        *(_QWORD *)&v1443 = "ignoreLastIndexIsWritable = ";
        *((_QWORD *)&v1443 + 1) = 29;
        LOBYTE(v1431) = *((_DWORD *)v643 + 18) != 0;
        v1444 = (WTF *)&v1434;
        v1445 = (WTF *)&v1443;
        *(_QWORD *)&v1446 = &v1431;
        WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,BOOL>(WTF::CommaPrinter,WTF::ASCIILiteral,BOOL const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)v6, &v1444);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
      if (v761 - 419 <= 0xC && ((1 << (v761 + 93)) & 0x1801) != 0)
      {
        v958 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v959 = v1438;
        v960 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v958 + 32))(v958);
        v961 = v960;
        v962 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v960 + 32);
        if (v959)
        {
          v963 = (char *)v1434;
          v964 = v1435;
          v965 = (WTF::PrintStream *)v962(v960);
          if (v963)
          {
            v967 = v964 - 1;
            if (!v964)
              v967 = 0;
            WTF::StringImpl::utf8ForCharacters(v963, v967, (uint64_t)&v1444, v966);
          }
          else
          {
            v973 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v973 = 1;
            *(_QWORD *)(v973 + 8) = 0;
            *(_BYTE *)(v973 + 16) = 0;
            v1444 = (WTF *)v973;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v965, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v961 + 40))(v961);
          (*(void (**)(uint64_t))(*(_QWORD *)v958 + 40))(v958);
        }
        else
        {
          v968 = v1436;
          v969 = v1437;
          v970 = (WTF::PrintStream *)v962(v960);
          if (v968)
          {
            v972 = v969 - 1;
            if (!v969)
              v972 = 0;
            WTF::StringImpl::utf8ForCharacters(v968, v972, (uint64_t)&v1444, v971);
          }
          else
          {
            v974 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v974 = 1;
            *(_QWORD *)(v974 + 8) = 0;
            *(_BYTE *)(v974 + 16) = 0;
            v1444 = (WTF *)v974;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v970, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v961 + 40))(v961);
          (*(void (**)(uint64_t))(*(_QWORD *)v958 + 40))(v958);
          v1438 = 1;
        }
        v975 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v958 + 32))(v958);
        WTF::StringImpl::utf8ForCharacters("intrinsic = ", 0xCuLL, (uint64_t)&v1444, v976);
        WTF::printExpectedCStringHelper(v975, "StringView", &v1444);
        if ((_DWORD)v1445 != -1)
          ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
        (*(void (**)(uint64_t))(*(_QWORD *)v958 + 40))(v958);
        WTF::printInternal(v958);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
      if (v761 <= 2)
      {
        v977 = *((_QWORD *)v643 + 9);
        v978 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v979 = v1438;
        v980 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v978 + 32))(v978);
        v981 = v980;
        v982 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v980 + 32);
        if (v979)
        {
          v984 = (char *)v1434;
          v983 = v1435;
          v985 = (WTF::PrintStream *)v982(v980);
          if (v984)
          {
            v987 = v983 - 1;
            if (!v983)
              v987 = 0;
            WTF::StringImpl::utf8ForCharacters(v984, v987, (uint64_t)&v1444, v986);
          }
          else
          {
            v993 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v993 = 1;
            *(_QWORD *)(v993 + 8) = 0;
            *(_BYTE *)(v993 + 16) = 0;
            v1444 = (WTF *)v993;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v985, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v981 + 40))(v981);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v978 + 40))(v978);
        }
        else
        {
          v989 = v1436;
          v988 = v1437;
          v990 = (WTF::PrintStream *)v982(v980);
          if (v989)
          {
            v992 = v988 - 1;
            if (!v988)
              v992 = 0;
            WTF::StringImpl::utf8ForCharacters(v989, v992, (uint64_t)&v1444, v991);
          }
          else
          {
            v994 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v994 = 1;
            *(_QWORD *)(v994 + 8) = 0;
            *(_BYTE *)(v994 + 16) = 0;
            v1444 = (WTF *)v994;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v990, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v981 + 40))(v981);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v978 + 40))(v978);
          v1438 = 1;
        }
        v6 = (WTF::PrintStream *)v1428;
        if (v977)
        {
          if (*(_QWORD *)v977 && (*(_QWORD *)v977 & 0xFFFE000000000002) == 0)
          {
            v995 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v978 + 32))(v978);
            v996 = (WTF::PrintStream *)v995;
            v997 = *(_DWORD *)(v977 + 16);
            if (v997)
            {
              if (v997 != 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1983C8F40);
              }
              v998 = "Strong";
            }
            else
            {
              v998 = "Weak";
            }
            v1000 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v995 + 32))(v995);
            WTF::PrintStream::printf(v1000, "%s", v998);
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v996 + 40))(v996);
            WTF::PrintStream::printf(v996, "%s", ":");
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v978 + 40))(v978);
          }
          JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)v977, v978, a5, *(JSC::Structure **)(v977 + 8));
        }
        else
        {
          v999 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v978 + 32))(v978);
          WTF::PrintStream::printf(v999, "%s", "(null)");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v978 + 40))(v978);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
      if (v761 == 420)
      {
        v1001 = *((_QWORD *)v643 + 9);
        v1002 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v1003 = v1438;
        v1004 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v1002 + 32))(v1002);
        v1005 = v1004;
        v1006 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1004 + 32);
        if (v1003)
        {
          v1008 = (char *)v1434;
          v1007 = v1435;
          v1009 = (WTF::PrintStream *)v1006(v1004);
          if (v1008)
          {
            v1011 = v1007 - 1;
            if (!v1007)
              v1011 = 0;
            WTF::StringImpl::utf8ForCharacters(v1008, v1011, (uint64_t)&v1444, v1010);
          }
          else
          {
            v1017 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v1017 = 1;
            *(_QWORD *)(v1017 + 8) = 0;
            *(_BYTE *)(v1017 + 16) = 0;
            v1444 = (WTF *)v1017;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v1009, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v1005 + 40))(v1005);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1002 + 40))(v1002);
        }
        else
        {
          v1013 = v1436;
          v1012 = v1437;
          v1014 = (WTF::PrintStream *)v1006(v1004);
          if (v1013)
          {
            v1016 = v1012 - 1;
            if (!v1012)
              v1016 = 0;
            WTF::StringImpl::utf8ForCharacters(v1013, v1016, (uint64_t)&v1444, v1015);
          }
          else
          {
            v1018 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v1018 = 1;
            *(_QWORD *)(v1018 + 8) = 0;
            *(_BYTE *)(v1018 + 16) = 0;
            v1444 = (WTF *)v1018;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v1014, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v1005 + 40))(v1005);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1002 + 40))(v1002);
          v1438 = 1;
        }
        v6 = (WTF::PrintStream *)v1428;
        JSC::CallLinkStatus::dump(v1001, v1002);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
      if (v761 == 421)
      {
        v1019 = (JSC::GetByVariant **)*((_QWORD *)v643 + 9);
        v1020 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v1021 = v1438;
        v1022 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v1020 + 32))(v1020);
        v1023 = v1022;
        v1024 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1022 + 32);
        if (v1021)
        {
          v1026 = (char *)v1434;
          v1025 = v1435;
          v1027 = (WTF::PrintStream *)v1024(v1022);
          if (v1026)
          {
            v1029 = v1025 - 1;
            if (!v1025)
              v1029 = 0;
            WTF::StringImpl::utf8ForCharacters(v1026, v1029, (uint64_t)&v1444, v1028);
          }
          else
          {
            v1035 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v1035 = 1;
            *(_QWORD *)(v1035 + 8) = 0;
            *(_BYTE *)(v1035 + 16) = 0;
            v1444 = (WTF *)v1035;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v1027, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v1023 + 40))(v1023);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1020 + 40))(v1020);
        }
        else
        {
          v1031 = v1436;
          v1030 = v1437;
          v1032 = (WTF::PrintStream *)v1024(v1022);
          if (v1031)
          {
            v1034 = v1030 - 1;
            if (!v1030)
              v1034 = 0;
            WTF::StringImpl::utf8ForCharacters(v1031, v1034, (uint64_t)&v1444, v1033);
          }
          else
          {
            v1036 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v1036 = 1;
            *(_QWORD *)(v1036 + 8) = 0;
            *(_BYTE *)(v1036 + 16) = 0;
            v1444 = (WTF *)v1036;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v1032, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v1023 + 40))(v1023);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1020 + 40))(v1020);
          v1438 = 1;
        }
        v6 = (WTF::PrintStream *)v1428;
        JSC::GetByStatus::dump(v1019, v1020);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
      if (v761 == 422)
      {
        v1037 = (JSC::InByStatus *)*((_QWORD *)v643 + 9);
        v1038 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v1039 = v1438;
        v1040 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v1038 + 32))(v1038);
        v1041 = v1040;
        v1042 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1040 + 32);
        if (v1039)
        {
          v1044 = (char *)v1434;
          v1043 = v1435;
          v1045 = (WTF::PrintStream *)v1042(v1040);
          if (v1044)
          {
            v1047 = v1043 - 1;
            if (!v1043)
              v1047 = 0;
            WTF::StringImpl::utf8ForCharacters(v1044, v1047, (uint64_t)&v1444, v1046);
          }
          else
          {
            v1053 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v1053 = 1;
            *(_QWORD *)(v1053 + 8) = 0;
            *(_BYTE *)(v1053 + 16) = 0;
            v1444 = (WTF *)v1053;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v1045, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v1041 + 40))(v1041);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1038 + 40))(v1038);
        }
        else
        {
          v1049 = v1436;
          v1048 = v1437;
          v1050 = (WTF::PrintStream *)v1042(v1040);
          if (v1049)
          {
            v1052 = v1048 - 1;
            if (!v1048)
              v1052 = 0;
            WTF::StringImpl::utf8ForCharacters(v1049, v1052, (uint64_t)&v1444, v1051);
          }
          else
          {
            v1054 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v1054 = 1;
            *(_QWORD *)(v1054 + 8) = 0;
            *(_BYTE *)(v1054 + 16) = 0;
            v1444 = (WTF *)v1054;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v1050, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v1041 + 40))(v1041);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1038 + 40))(v1038);
          v1438 = 1;
        }
        v6 = (WTF::PrintStream *)v1428;
        JSC::InByStatus::dump(v1037, v1038);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
      if (v761 == 423)
      {
        v1055 = (JSC::PutByStatus *)*((_QWORD *)v643 + 9);
        v1056 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v1057 = v1438;
        v1058 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v1056 + 32))(v1056);
        v1059 = v1058;
        v1060 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1058 + 32);
        if (v1057)
        {
          v1062 = (char *)v1434;
          v1061 = v1435;
          v1063 = (WTF::PrintStream *)v1060(v1058);
          if (v1062)
          {
            v1065 = v1061 - 1;
            if (!v1061)
              v1065 = 0;
            WTF::StringImpl::utf8ForCharacters(v1062, v1065, (uint64_t)&v1444, v1064);
          }
          else
          {
            v1071 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v1071 = 1;
            *(_QWORD *)(v1071 + 8) = 0;
            *(_BYTE *)(v1071 + 16) = 0;
            v1444 = (WTF *)v1071;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v1063, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v1059 + 40))(v1059);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1056 + 40))(v1056);
        }
        else
        {
          v1067 = v1436;
          v1066 = v1437;
          v1068 = (WTF::PrintStream *)v1060(v1058);
          if (v1067)
          {
            v1070 = v1066 - 1;
            if (!v1066)
              v1070 = 0;
            WTF::StringImpl::utf8ForCharacters(v1067, v1070, (uint64_t)&v1444, v1069);
          }
          else
          {
            v1072 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v1072 = 1;
            *(_QWORD *)(v1072 + 8) = 0;
            *(_BYTE *)(v1072 + 16) = 0;
            v1444 = (WTF *)v1072;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v1068, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v1059 + 40))(v1059);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1056 + 40))(v1056);
          v1438 = 1;
        }
        v6 = (WTF::PrintStream *)v1428;
        JSC::PutByStatus::dump(v1055, v1056);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
      if (v761 - 386 <= 4 && v761 != 388)
      {
        *(_QWORD *)&v1443 = "enumeratorModes = ";
        *((_QWORD *)&v1443 + 1) = 19;
        LOBYTE(v1431) = *((_DWORD *)v643 + 20);
        v1444 = (WTF *)&v1434;
        v1445 = (WTF *)&v1443;
        *(_QWORD *)&v1446 = &v1431;
        WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned char>(WTF::CommaPrinter,WTF::ASCIILiteral,unsigned char const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)v6, &v1444);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
      if (v761 == 30)
      {
        *(_QWORD *)&v1443 = "<<";
        *((_QWORD *)&v1443 + 1) = 3;
        LODWORD(v1431) = *((_DWORD *)v643 + 18);
        v1444 = (WTF *)&v1434;
        v1445 = (WTF *)&v1443;
        *(_QWORD *)&v1446 = &v1431;
        WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned int>(WTF::CommaPrinter,WTF::ASCIILiteral,unsigned int const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)v6, &v1444);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
      if (v761 == 364)
      {
        v1073 = *((_QWORD *)v643 + 9);
        v1074 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v1075 = v1438;
        v1076 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1074 + 32))(v1074);
        v1077 = v1076;
        v1078 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1076 + 32);
        if (v1075)
        {
          v1079 = (char *)v1434;
          v1080 = v1435;
          v1081 = (WTF::PrintStream *)v1078(v1076);
          if (v1079)
          {
            v1083 = v1080 - 1;
            if (!v1080)
              v1083 = 0;
            WTF::StringImpl::utf8ForCharacters(v1079, v1083, (uint64_t)&v1444, v1082);
          }
          else
          {
            v1089 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v1089 = 1;
            *(_QWORD *)(v1089 + 8) = 0;
            *(_BYTE *)(v1089 + 16) = 0;
            v1444 = (WTF *)v1089;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v1081, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v1077 + 40))(v1077);
          (*(void (**)(uint64_t))(*(_QWORD *)v1074 + 40))(v1074);
        }
        else
        {
          v1084 = v1436;
          v1085 = v1437;
          v1086 = (WTF::PrintStream *)v1078(v1076);
          if (v1084)
          {
            v1088 = v1085 - 1;
            if (!v1085)
              v1088 = 0;
            WTF::StringImpl::utf8ForCharacters(v1084, v1088, (uint64_t)&v1444, v1087);
          }
          else
          {
            v1090 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v1090 = 1;
            *(_QWORD *)(v1090 + 8) = 0;
            *(_BYTE *)(v1090 + 16) = 0;
            v1444 = (WTF *)v1090;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v1086, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v1077 + 40))(v1077);
          (*(void (**)(uint64_t))(*(_QWORD *)v1074 + 40))(v1074);
          v1438 = 1;
        }
        v1091 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1074 + 32))(v1074);
        WTF::StringImpl::utf8ForCharacters("T:", 2uLL, (uint64_t)&v1444, v1092);
        WTF::printExpectedCStringHelper(v1091, "StringView", &v1444);
        if ((_DWORD)v1445 != -1)
          ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
        (*(void (**)(uint64_t))(*(_QWORD *)v1074 + 40))(v1074);
        v1093 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1074 + 32))(v1074);
        WTF::PrintStream::printf(v1093, "%s", "#");
        WTF::PrintStream::printf(v1093, "%u", *(_DWORD *)(v1073 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v1074 + 40))(v1074);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
      if (v761 == 365)
      {
        v1094 = (float *)*((_QWORD *)v643 + 9);
        v1095 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v1096 = v1438;
        v1097 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v1095 + 32))(v1095);
        v1098 = v1097;
        v1099 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1097 + 32);
        if (v1096)
        {
          v1101 = (char *)v1434;
          v1100 = v1435;
          v1102 = (WTF::PrintStream *)v1099(v1097);
          if (v1101)
          {
            v1104 = v1100 - 1;
            if (!v1100)
              v1104 = 0;
            WTF::StringImpl::utf8ForCharacters(v1101, v1104, (uint64_t)&v1444, v1103);
          }
          else
          {
            v1110 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v1110 = 1;
            *(_QWORD *)(v1110 + 8) = 0;
            *(_BYTE *)(v1110 + 16) = 0;
            v1444 = (WTF *)v1110;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v1102, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v1098 + 40))(v1098);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1095 + 40))(v1095);
        }
        else
        {
          v1106 = v1436;
          v1105 = v1437;
          v1107 = (WTF::PrintStream *)v1099(v1097);
          if (v1106)
          {
            v1109 = v1105 - 1;
            if (!v1105)
              v1109 = 0;
            WTF::StringImpl::utf8ForCharacters(v1106, v1109, (uint64_t)&v1444, v1108);
          }
          else
          {
            v1111 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v1111 = 1;
            *(_QWORD *)(v1111 + 8) = 0;
            *(_BYTE *)(v1111 + 16) = 0;
            v1444 = (WTF *)v1111;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v1107, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v1098 + 40))(v1098);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1095 + 40))(v1095);
          v1438 = 1;
        }
        v6 = (WTF::PrintStream *)v1428;
        v1112 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v1095 + 32))(v1095);
        WTF::StringImpl::utf8ForCharacters("T:", 2uLL, (uint64_t)&v1444, v1113);
        WTF::printExpectedCStringHelper(v1112, "StringView", &v1444);
        if ((_DWORD)v1445 != -1)
          ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1095 + 40))(v1095);
        JSC::DFG::BranchTarget::dump(v1094, v1095);
        v1114 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v1095 + 32))(v1095);
        WTF::StringImpl::utf8ForCharacters(", F:", 4uLL, (uint64_t)&v1444, v1115);
        WTF::printExpectedCStringHelper(v1114, "StringView", &v1444);
        if ((_DWORD)v1445 != -1)
          ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1095 + 40))(v1095);
        JSC::DFG::BranchTarget::dump(v1094 + 4, v1095);
        (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
        v761 = *((unsigned __int16 *)v643 + 9);
      }
      if (v761 == 366)
      {
        v1116 = (float *)*((_QWORD *)v643 + 9);
        v1117 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v1118 = v1438;
        v1119 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1117 + 32))(v1117);
        v1120 = v1119;
        v1121 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1119 + 32);
        if (v1118)
        {
          v1123 = (char *)v1434;
          v1122 = v1435;
          v1124 = (WTF::PrintStream *)v1121(v1119);
          if (v1123)
          {
            v1126 = v1122 - 1;
            if (!v1122)
              v1126 = 0;
            WTF::StringImpl::utf8ForCharacters(v1123, v1126, (uint64_t)&v1444, v1125);
          }
          else
          {
            v1132 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v1132 = 1;
            *(_QWORD *)(v1132 + 8) = 0;
            *(_BYTE *)(v1132 + 16) = 0;
            v1444 = (WTF *)v1132;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v1124, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v1120 + 40))(v1120);
          (*(void (**)(uint64_t))(*(_QWORD *)v1117 + 40))(v1117);
        }
        else
        {
          v1128 = v1436;
          v1127 = v1437;
          v1129 = (WTF::PrintStream *)v1121(v1119);
          if (v1128)
          {
            v1131 = v1127 - 1;
            if (!v1127)
              v1131 = 0;
            WTF::StringImpl::utf8ForCharacters(v1128, v1131, (uint64_t)&v1444, v1130);
          }
          else
          {
            v1133 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v1133 = 1;
            *(_QWORD *)(v1133 + 8) = 0;
            *(_BYTE *)(v1133 + 16) = 0;
            v1444 = (WTF *)v1133;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v1129, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v1120 + 40))(v1120);
          (*(void (**)(uint64_t))(*(_QWORD *)v1117 + 40))(v1117);
          v1438 = 1;
        }
        v1134 = *((int *)v1116 + 10);
        if (v1134 >= 4)
        {
          __break(0xC471u);
          JUMPOUT(0x1983C8F00);
        }
        v1135 = off_1E358E380[v1134];
        v1136 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1117 + 32))(v1117);
        WTF::PrintStream::printf(v1136, "%s", v1135);
        (*(void (**)(uint64_t))(*(_QWORD *)v1117 + 40))(v1117);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
        v1137 = *((unsigned int *)v1116 + 3);
        if ((_DWORD)v1137)
        {
          v1138 = 0;
          for (i = 0; i < v1137; ++i)
          {
            if (i >= v1137)
            {
              __break(0xC471u);
              JUMPOUT(0x1983C8F48);
            }
            v1140 = *(_QWORD *)v1116;
            v1141 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
            v1142 = v1438;
            v1143 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v1141 + 32))(v1141);
            v1144 = v1143;
            v1145 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1143 + 32);
            if (v1142)
            {
              v1147 = (char *)v1434;
              v1146 = v1435;
              v1148 = (WTF::PrintStream *)v1145(v1143);
              if (v1147)
              {
                v1150 = v1146 - 1;
                if (!v1146)
                  v1150 = 0;
                WTF::StringImpl::utf8ForCharacters(v1147, v1150, (uint64_t)&v1444, v1149);
              }
              else
              {
                v1156 = WTF::fastMalloc((WTF *)0x11);
                *(_DWORD *)v1156 = 1;
                *(_QWORD *)(v1156 + 8) = 0;
                *(_BYTE *)(v1156 + 16) = 0;
                v1444 = (WTF *)v1156;
                LODWORD(v1445) = 0;
              }
              WTF::printExpectedCStringHelper(v1148, "StringView", &v1444);
              if ((_DWORD)v1445 != -1)
                ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
              (*(void (**)(uint64_t))(*(_QWORD *)v1144 + 40))(v1144);
              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1141 + 40))(v1141);
            }
            else
            {
              v1152 = v1436;
              v1151 = v1437;
              v1153 = (WTF::PrintStream *)v1145(v1143);
              if (v1152)
              {
                v1155 = v1151 - 1;
                if (!v1151)
                  v1155 = 0;
                WTF::StringImpl::utf8ForCharacters(v1152, v1155, (uint64_t)&v1444, v1154);
              }
              else
              {
                v1157 = WTF::fastMalloc((WTF *)0x11);
                *(_DWORD *)v1157 = 1;
                *(_QWORD *)(v1157 + 8) = 0;
                *(_BYTE *)(v1157 + 16) = 0;
                v1444 = (WTF *)v1157;
                LODWORD(v1445) = 0;
              }
              WTF::printExpectedCStringHelper(v1153, "StringView", &v1444);
              if ((_DWORD)v1445 != -1)
                ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
              (*(void (**)(uint64_t))(*(_QWORD *)v1144 + 40))(v1144);
              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1141 + 40))(v1141);
              v1438 = 1;
            }
            JSC::DFG::LazyJSValue::dumpInContext((JSC::DFG::LazyJSValue *)(v1140 + v1138), v1141, a5);
            v1158 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v1141 + 32))(v1141);
            WTF::StringImpl::utf8ForCharacters(":", 1uLL, (uint64_t)&v1444, v1159);
            WTF::printExpectedCStringHelper(v1158, "StringView", &v1444);
            if ((_DWORD)v1445 != -1)
              ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1141 + 40))(v1141);
            JSC::DFG::BranchTarget::dump((float *)(v1140 + v1138 + 16), v1141);
            v6 = (WTF::PrintStream *)v1428;
            (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
            v1137 = *((unsigned int *)v1116 + 3);
            v1138 += 32;
          }
        }
        v1160 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
        v1161 = v1438;
        v1162 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v1160 + 32))(v1160);
        v1163 = v1162;
        v1164 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1162 + 32);
        if (v1161)
        {
          v1166 = (char *)v1434;
          v1165 = v1435;
          v1167 = (WTF::PrintStream *)v1164(v1162);
          v1169 = v1426;
          if (v1166)
          {
            v1170 = v1165 - 1;
            if (!v1165)
              v1170 = 0;
            WTF::StringImpl::utf8ForCharacters(v1166, v1170, (uint64_t)&v1444, v1168);
          }
          else
          {
            v1176 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v1176 = 1;
            *(_QWORD *)(v1176 + 8) = 0;
            *(_BYTE *)(v1176 + 16) = 0;
            v1444 = (WTF *)v1176;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v1167, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v1163 + 40))(v1163);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1160 + 40))(v1160);
        }
        else
        {
          v1172 = v1436;
          v1171 = v1437;
          v1173 = (WTF::PrintStream *)v1164(v1162);
          v1169 = v1426;
          if (v1172)
          {
            v1175 = v1171 - 1;
            if (!v1171)
              v1175 = 0;
            WTF::StringImpl::utf8ForCharacters(v1172, v1175, (uint64_t)&v1444, v1174);
          }
          else
          {
            v1177 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v1177 = 1;
            *(_QWORD *)(v1177 + 8) = 0;
            *(_BYTE *)(v1177 + 16) = 0;
            v1444 = (WTF *)v1177;
            LODWORD(v1445) = 0;
          }
          WTF::printExpectedCStringHelper(v1173, "StringView", &v1444);
          if ((_DWORD)v1445 != -1)
            ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
          (*(void (**)(uint64_t))(*(_QWORD *)v1163 + 40))(v1163);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1160 + 40))(v1160);
          v1438 = 1;
        }
        v1178 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v1160 + 32))(v1160);
        WTF::StringImpl::utf8ForCharacters("default:", 8uLL, (uint64_t)&v1444, v1179);
        WTF::printExpectedCStringHelper(v1178, "StringView", &v1444);
        if ((_DWORD)v1445 != -1)
          ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1160 + 40))(v1160);
        JSC::DFG::BranchTarget::dump(v1116 + 4, v1160);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
        v761 = *((unsigned __int16 *)v1169 + 9);
      }
      if (v761 == 367)
      {
        v1180 = *((_QWORD *)v1426 + 9);
        v1181 = *(unsigned int *)(v1180 + 12);
        if ((_DWORD)v1181)
        {
          for (j = 0; j < v1181; ++j)
          {
            if (j >= v1181)
            {
              __break(0xC471u);
              JUMPOUT(0x1983C8F50);
            }
            *(_QWORD *)&v1443 = *(_QWORD *)(*(_QWORD *)v1180 + 8 * j);
            DWORD2(v1443) = 2143289344;
            v1183 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1428 + 32))(v1428);
            v1184 = v1438;
            v1185 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v1183 + 32))(v1183);
            v1186 = v1185;
            v1187 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1185 + 32);
            if (v1184)
            {
              v1189 = (char *)v1434;
              v1188 = v1435;
              v1190 = (WTF::PrintStream *)v1187(v1185);
              if (v1189)
              {
                v1192 = v1188 - 1;
                if (!v1188)
                  v1192 = 0;
                WTF::StringImpl::utf8ForCharacters(v1189, v1192, (uint64_t)&v1444, v1191);
              }
              else
              {
                v1198 = WTF::fastMalloc((WTF *)0x11);
                *(_DWORD *)v1198 = 1;
                *(_QWORD *)(v1198 + 8) = 0;
                *(_BYTE *)(v1198 + 16) = 0;
                v1444 = (WTF *)v1198;
                LODWORD(v1445) = 0;
              }
              WTF::printExpectedCStringHelper(v1190, "StringView", &v1444);
              if ((_DWORD)v1445 != -1)
                ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1431, &v1444);
              (*(void (**)(uint64_t))(*(_QWORD *)v1186 + 40))(v1186);
              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1183 + 40))(v1183);
            }
            else
            {
              v1194 = v1436;
              v1193 = v1437;
              v1195 = (WTF::PrintStream *)v1187(v1185);
              if (v1194)
              {
                v1197 = v1193 - 1;
                if (!v1193)
                  v1197 = 0;
                WTF::StringImpl::utf8ForCharacters(v1194, v1197, (uint64_t)&v1444, v1196);
              }
              else
              {
                v1199 = WTF::fastMalloc((WTF *)0x11);
                *(_DWORD *)v1199 = 1;
                *(_QWORD *)(v1199 + 8) = 0;
                *(_BYTE *)(v1199 + 16) = 0;
                v1444 = (WTF *)v1199;
                LODWORD(v1445) = 0;
              }
              WTF::printExpectedCStringHelper(v1195, "StringView", &v1444);
              if ((_DWORD)v1445 != -1)
                ((void (*)(const char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1431, &v1444);
              (*(void (**)(uint64_t))(*(_QWORD *)v1186 + 40))(v1186);
              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1183 + 40))(v1183);
              v1438 = 1;
            }
            JSC::DFG::BranchTarget::dump((float *)&v1443, v1183);
            (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
            v1181 = *(unsigned int *)(v1180 + 12);
          }
        }
      }
      v1431 = 0;
      v1433 = 0;
      v1444 = (WTF *)&v1431;
      *(_QWORD *)&v1443 = &v1433;
      JSC::DFG::clobberize<JSC::DFG::ClobberSetAdd,JSC::DFG::ClobberSetAdd,JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::ClobberSetAdd,JSC::DFG::ClobberSetAdd,JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::ClobberSetAdd const&,JSC::DFG::ClobberSetAdd const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>((uint64_t)this, v1426, (uint64_t **)&v1444, (uint64_t)&v1443, (uint64_t)&v1429, (uint64_t)&v1430, v337, v338);
      if (!v1431 || !*((_DWORD *)v1431 - 3))
        goto LABEL_1304;
      *(_QWORD *)&v1443 = "R:";
      *((_QWORD *)&v1443 + 1) = 3;
      v1429 = 0;
      v1201 = (const char *)WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::begin((_QWORD **)&v1431);
      v1207 = (uint64_t *)v1201;
      v1209 = v1208;
      if (v1431)
        v1210 = &v1431[16 * *((unsigned int *)v1431 - 1)];
      else
        v1210 = 0;
      if (v1210 == v1201)
        goto LABEL_1299;
      break;
  }
  do
  {
    if (*((_BYTE *)v1207 + 8))
      WTF::HashTable<JSC::DFG::AbstractHeap,JSC::DFG::AbstractHeap,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>>::add(&v1429, v1207, v1202, v1203, v1204, v1205, v1206, (uint64_t)&v1444);
    while (1)
    {
      v1207 += 2;
      if (v1207 == v1209)
        break;
      if (*v1207 && (*v1207 & 0x7FFF) != 0x4000)
        goto LABEL_1296;
    }
    v1207 = v1209;
LABEL_1296:
    ;
  }
  while (v1207 != (uint64_t *)v1210);
LABEL_1299:
  WTF::sortedListDump<WTF::HashSet<JSC::DFG::AbstractHeap,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTableTraits>,std::less<void>>(&v1429, ",", 2, (uint64_t *)&v1430);
  v1444 = (WTF *)&v1434;
  v1445 = (WTF *)&v1443;
  *(_QWORD *)&v1446 = &v1430;
  WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,WTF::CString>(WTF::CommaPrinter,WTF::ASCIILiteral,WTF::CString const&)::{lambda(WTF::PrintStream&)#1}>(v1428, &v1444);
  v1217 = v1430;
  v1430 = 0;
  if (v1217)
  {
    if (*(_DWORD *)v1217 == 1)
      WTF::fastFree((unint64_t)v1217, v1211, (uint64_t)v1200, v1212, v1213, v1214, v1215, v1216);
    else
      --*(_DWORD *)v1217;
  }
  if (v1429)
    WTF::fastFree(v1429 - 16, v1211, (uint64_t)v1200, v1212, v1213, v1214, v1215, v1216);
LABEL_1304:
  if (v1433 && *((_DWORD *)v1433 - 3))
  {
    *(_QWORD *)&v1443 = "W:";
    *((_QWORD *)&v1443 + 1) = 3;
    v1429 = 0;
    v1218 = WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::begin(&v1433);
    v1224 = v1218;
    v1226 = v1225;
    if (v1433)
      v1227 = &v1433[2 * *((unsigned int *)v1433 - 1)];
    else
      v1227 = 0;
    if (v1227 != v1218)
    {
      do
      {
        if (*((_BYTE *)v1224 + 8))
          WTF::HashTable<JSC::DFG::AbstractHeap,JSC::DFG::AbstractHeap,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>>::add(&v1429, v1224, v1219, v1220, v1221, v1222, v1223, (uint64_t)&v1444);
        while (1)
        {
          v1224 += 2;
          if (v1224 == v1226)
            break;
          if (*v1224 && (*v1224 & 0x7FFF) != 0x4000)
            goto LABEL_1314;
        }
        v1224 = v1226;
LABEL_1314:
        ;
      }
      while (v1224 != v1227);
    }
    WTF::sortedListDump<WTF::HashSet<JSC::DFG::AbstractHeap,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTableTraits>,std::less<void>>(&v1429, ",", 2, (uint64_t *)&v1430);
    v1444 = (WTF *)&v1434;
    v1445 = (WTF *)&v1443;
    *(_QWORD *)&v1446 = &v1430;
    WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,WTF::CString>(WTF::CommaPrinter,WTF::ASCIILiteral,WTF::CString const&)::{lambda(WTF::PrintStream&)#1}>(v1428, &v1444);
    v1234 = v1430;
    v1430 = 0;
    if (v1234)
    {
      if (*(_DWORD *)v1234 == 1)
        WTF::fastFree((unint64_t)v1234, v1228, (uint64_t)v1200, v1229, v1230, v1231, v1232, v1233);
      else
        --*(_DWORD *)v1234;
    }
    if (v1429)
      WTF::fastFree(v1429 - 16, v1228, (uint64_t)v1200, v1229, v1230, v1231, v1232, v1233);
  }
  mayExit = JSC::DFG::mayExit(this, v1426, v1200);
  if (mayExit)
  {
    v1242 = mayExit;
    v1243 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1428 + 32))(v1428);
    v1244 = v1438;
    v1245 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1243 + 32))(v1243);
    v1246 = v1245;
    v1247 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1245 + 32);
    if (v1244)
    {
      v1249 = (char *)v1434;
      v1248 = v1435;
      v1250 = (WTF::PrintStream *)v1247(v1245);
      if (v1249)
      {
        v1252 = v1248 - 1;
        if (!v1248)
          v1252 = 0;
        WTF::StringImpl::utf8ForCharacters(v1249, v1252, (uint64_t)&v1444, v1251);
      }
      else
      {
        v1258 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v1258 = 1;
        *(_QWORD *)(v1258 + 8) = 0;
        *(_BYTE *)(v1258 + 16) = 0;
        v1444 = (WTF *)v1258;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v1250, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v1246 + 40))(v1246);
      (*(void (**)(uint64_t))(*(_QWORD *)v1243 + 40))(v1243);
    }
    else
    {
      v1254 = v1436;
      v1253 = v1437;
      v1255 = (WTF::PrintStream *)v1247(v1245);
      if (v1254)
      {
        v1257 = v1253 - 1;
        if (!v1253)
          v1257 = 0;
        WTF::StringImpl::utf8ForCharacters(v1254, v1257, (uint64_t)&v1444, v1256);
      }
      else
      {
        v1259 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v1259 = 1;
        *(_QWORD *)(v1259 + 8) = 0;
        *(_BYTE *)(v1259 + 16) = 0;
        v1444 = (WTF *)v1259;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v1255, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v1246 + 40))(v1246);
      (*(void (**)(uint64_t))(*(_QWORD *)v1243 + 40))(v1243);
      v1438 = 1;
    }
    if (v1242 == 1)
    {
      v1260 = "ExitsForExceptions";
    }
    else
    {
      if (v1242 != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1983C8F20);
      }
      v1260 = "Exits";
    }
    v1261 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1243 + 32))(v1243);
    WTF::PrintStream::printf(v1261, "%s", v1260);
    (*(void (**)(uint64_t))(*(_QWORD *)v1243 + 40))(v1243);
    (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
  }
  if (JSC::DFG::clobbersExitState(this, v1426, v1236, v1237, v1238, v1239, v1240, v1241))
  {
    v1262 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1428 + 32))(v1428);
    v1263 = v1438;
    v1264 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1262 + 32))(v1262);
    v1265 = v1264;
    v1266 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1264 + 32);
    if (v1263)
    {
      v1268 = (char *)v1434;
      v1267 = v1435;
      v1269 = (WTF::PrintStream *)v1266(v1264);
      if (v1268)
      {
        v1271 = v1267 - 1;
        if (!v1267)
          v1271 = 0;
        WTF::StringImpl::utf8ForCharacters(v1268, v1271, (uint64_t)&v1444, v1270);
      }
      else
      {
        v1277 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v1277 = 1;
        *(_QWORD *)(v1277 + 8) = 0;
        *(_BYTE *)(v1277 + 16) = 0;
        v1444 = (WTF *)v1277;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v1269, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v1265 + 40))(v1265);
      (*(void (**)(uint64_t))(*(_QWORD *)v1262 + 40))(v1262);
    }
    else
    {
      v1273 = v1436;
      v1272 = v1437;
      v1274 = (WTF::PrintStream *)v1266(v1264);
      if (v1273)
      {
        v1276 = v1272 - 1;
        if (!v1272)
          v1276 = 0;
        WTF::StringImpl::utf8ForCharacters(v1273, v1276, (uint64_t)&v1444, v1275);
      }
      else
      {
        v1278 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v1278 = 1;
        *(_QWORD *)(v1278 + 8) = 0;
        *(_BYTE *)(v1278 + 16) = 0;
        v1444 = (WTF *)v1278;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v1274, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v1265 + 40))(v1265);
      (*(void (**)(uint64_t))(*(_QWORD *)v1262 + 40))(v1262);
      v1438 = 1;
    }
    v1279 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1262 + 32))(v1262);
    WTF::StringImpl::utf8ForCharacters("ClobbersExit", 0xCuLL, (uint64_t)&v1444, v1280);
    WTF::printExpectedCStringHelper(v1279, "StringView", &v1444);
    if ((_DWORD)v1445 != -1)
      ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
    (*(void (**)(uint64_t))(*(_QWORD *)v1262 + 40))(v1262);
    (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
  }
  v1281 = *(_QWORD *)v1426;
  if ((*(_QWORD *)v1426 & 2) != 0)
    goto LABEL_1417;
  if ((v1281 & 1) != 0)
    LODWORD(v1282) = *(_DWORD *)((v1281 & 0xFFFFFFFF8) + 8);
  else
    v1282 = v1281 >> 36;
  v1283 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1428 + 32))(v1428);
  v1284 = v1438;
  v1285 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1283 + 32))(v1283);
  v1286 = v1285;
  v1287 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1285 + 32);
  if (v1284)
  {
    v1288 = (char *)v1434;
    v1289 = v1435;
    v1290 = (WTF::PrintStream *)v1287(v1285);
    if (v1288)
    {
      v1292 = v1289 - 1;
      if (!v1289)
        v1292 = 0;
      WTF::StringImpl::utf8ForCharacters(v1288, v1292, (uint64_t)&v1444, v1291);
    }
    else
    {
      v1298 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v1298 = 1;
      *(_QWORD *)(v1298 + 8) = 0;
      *(_BYTE *)(v1298 + 16) = 0;
      v1444 = (WTF *)v1298;
      LODWORD(v1445) = 0;
    }
    WTF::printExpectedCStringHelper(v1290, "StringView", &v1444);
    if ((_DWORD)v1445 != -1)
      ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
    (*(void (**)(uint64_t))(*(_QWORD *)v1286 + 40))(v1286);
    (*(void (**)(uint64_t))(*(_QWORD *)v1283 + 40))(v1283);
  }
  else
  {
    v1293 = v1436;
    v1294 = v1437;
    v1295 = (WTF::PrintStream *)v1287(v1285);
    if (v1293)
    {
      v1297 = v1294 - 1;
      if (!v1294)
        v1297 = 0;
      WTF::StringImpl::utf8ForCharacters(v1293, v1297, (uint64_t)&v1444, v1296);
    }
    else
    {
      v1299 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v1299 = 1;
      *(_QWORD *)(v1299 + 8) = 0;
      *(_BYTE *)(v1299 + 16) = 0;
      v1444 = (WTF *)v1299;
      LODWORD(v1445) = 0;
    }
    WTF::printExpectedCStringHelper(v1295, "StringView", &v1444);
    if ((_DWORD)v1445 != -1)
      ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
    (*(void (**)(uint64_t))(*(_QWORD *)v1286 + 40))(v1286);
    (*(void (**)(uint64_t))(*(_QWORD *)v1283 + 40))(v1283);
    v1438 = 1;
  }
  v1300 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1283 + 32))(v1283);
  WTF::PrintStream::printf(v1300, "%s", "bc#");
  WTF::PrintStream::printf(v1300, "%u", v1282 >> 2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1283 + 40))(v1283);
  v1301 = v1282 & 3;
  if (v1301)
  {
    v1302 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1283 + 32))(v1283);
    WTF::PrintStream::printf(v1302, "%s", "cp#");
    WTF::PrintStream::printf(v1302, "%u", v1301);
    (*(void (**)(uint64_t))(*(_QWORD *)v1283 + 40))(v1283);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
  v1303 = *((_QWORD *)v1426 + 1);
  v1304 = *(_QWORD *)v1426;
  if (*(_QWORD *)v1426 == v1303)
    goto LABEL_1417;
  if ((v1304 & 2) != 0)
  {
    if ((v1303 & 2) == 0)
    {
      LODWORD(v1305) = -1;
      if ((v1303 & 1) == 0)
        goto LABEL_1395;
      goto LABEL_1496;
    }
  }
  else
  {
    if ((v1304 & 1) != 0)
    {
      LODWORD(v1305) = *(_DWORD *)((v1304 & 0xFFFFFFFF8) + 8);
      if ((v1303 & 2) == 0)
      {
LABEL_1394:
        if ((v1303 & 1) == 0)
        {
LABEL_1395:
          v1306 = v1303 >> 36;
LABEL_1396:
          if ((_DWORD)v1305 != (_DWORD)v1306)
          {
LABEL_1397:
            v1307 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1428 + 32))(v1428);
            v1308 = v1438;
            v1309 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v1307 + 32))(v1307);
            v1310 = v1309;
            v1311 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1309 + 32);
            if (v1308)
            {
              v1313 = (char *)v1434;
              v1312 = v1435;
              v1314 = (WTF::PrintStream *)v1311(v1309);
              if (v1313)
              {
                v1316 = v1312 - 1;
                if (!v1312)
                  v1316 = 0;
                WTF::StringImpl::utf8ForCharacters(v1313, v1316, (uint64_t)&v1444, v1315);
              }
              else
              {
                v1322 = WTF::fastMalloc((WTF *)0x11);
                *(_DWORD *)v1322 = 1;
                *(_QWORD *)(v1322 + 8) = 0;
                *(_BYTE *)(v1322 + 16) = 0;
                v1444 = (WTF *)v1322;
                LODWORD(v1445) = 0;
              }
              WTF::printExpectedCStringHelper(v1314, "StringView", &v1444);
              if ((_DWORD)v1445 != -1)
                ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
              (*(void (**)(uint64_t))(*(_QWORD *)v1310 + 40))(v1310);
              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1307 + 40))(v1307);
            }
            else
            {
              v1318 = v1436;
              v1317 = v1437;
              v1319 = (WTF::PrintStream *)v1311(v1309);
              if (v1318)
              {
                v1321 = v1317 - 1;
                if (!v1317)
                  v1321 = 0;
                WTF::StringImpl::utf8ForCharacters(v1318, v1321, (uint64_t)&v1444, v1320);
              }
              else
              {
                v1323 = WTF::fastMalloc((WTF *)0x11);
                *(_DWORD *)v1323 = 1;
                *(_QWORD *)(v1323 + 8) = 0;
                *(_BYTE *)(v1323 + 16) = 0;
                v1444 = (WTF *)v1323;
                LODWORD(v1445) = 0;
              }
              WTF::printExpectedCStringHelper(v1319, "StringView", &v1444);
              if ((_DWORD)v1445 != -1)
                ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
              (*(void (**)(uint64_t))(*(_QWORD *)v1310 + 40))(v1310);
              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1307 + 40))(v1307);
              v1438 = 1;
            }
            v1324 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v1307 + 32))(v1307);
            WTF::StringImpl::utf8ForCharacters("exit: ", 6uLL, (uint64_t)&v1444, v1325);
            WTF::printExpectedCStringHelper(v1324, "StringView", &v1444);
            if ((_DWORD)v1445 != -1)
              ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v1307 + 40))(v1307);
            JSC::CodeOrigin::dump((JSC::DFG::Node *)((char *)v1426 + 8), v1307);
            (*(void (**)(uint64_t))(*(_QWORD *)v1428 + 40))(v1428);
            goto LABEL_1417;
          }
          v1420 = 1;
          goto LABEL_1569;
        }
LABEL_1496:
        LODWORD(v1306) = *(_DWORD *)((v1303 & 0xFFFFFFFF8) + 8);
        goto LABEL_1396;
      }
    }
    else
    {
      v1305 = v1304 >> 36;
      if ((v1303 & 2) == 0)
        goto LABEL_1394;
    }
    if ((_DWORD)v1305 != -1)
      goto LABEL_1417;
  }
  v1420 = 0;
LABEL_1569:
  v1421 = (_QWORD *)(v1304 & 0xFFFFFFFF8);
  if ((v1304 & 1) != 0)
    v1421 = (_QWORD *)*v1421;
  v1422 = (_QWORD *)(v1303 & 0xFFFFFFFF8);
  if ((v1303 & 1) != 0)
    v1422 = (_QWORD *)*v1422;
  v1423 = v1420 ^ 1;
  if (v1421 == v1422)
    v1423 = 1;
  if ((v1423 & 1) == 0)
    goto LABEL_1397;
LABEL_1417:
  v1326 = *((unsigned __int8 *)v1426 + 16);
  if (*((_BYTE *)v1426 + 16))
    v1327 = "ExitValid";
  else
    v1327 = "ExitInvalid";
  v1328 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1428 + 32))(v1428);
  v1329 = v1438;
  v1330 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1328 + 32))(v1328);
  v1331 = v1330;
  v1332 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1330 + 32);
  if (v1329)
  {
    v1333 = (char *)v1434;
    v1334 = v1435;
    v1335 = (WTF::PrintStream *)v1332(v1330);
    if (v1333)
    {
      v1337 = v1334 - 1;
      if (!v1334)
        v1337 = 0;
      WTF::StringImpl::utf8ForCharacters(v1333, v1337, (uint64_t)&v1444, v1336);
    }
    else
    {
      v1343 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v1343 = 1;
      *(_QWORD *)(v1343 + 8) = 0;
      *(_BYTE *)(v1343 + 16) = 0;
      v1444 = (WTF *)v1343;
      LODWORD(v1445) = 0;
    }
    WTF::printExpectedCStringHelper(v1335, "StringView", &v1444);
    v1344 = v1428;
    if ((_DWORD)v1445 != -1)
      ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
    (*(void (**)(uint64_t))(*(_QWORD *)v1331 + 40))(v1331);
    (*(void (**)(uint64_t))(*(_QWORD *)v1328 + 40))(v1328);
  }
  else
  {
    v1338 = v1436;
    v1339 = v1437;
    v1340 = (WTF::PrintStream *)v1332(v1330);
    if (v1338)
    {
      v1342 = v1339 - 1;
      if (!v1339)
        v1342 = 0;
      WTF::StringImpl::utf8ForCharacters(v1338, v1342, (uint64_t)&v1444, v1341);
    }
    else
    {
      v1345 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v1345 = 1;
      *(_QWORD *)(v1345 + 8) = 0;
      *(_BYTE *)(v1345 + 16) = 0;
      v1444 = (WTF *)v1345;
      LODWORD(v1445) = 0;
    }
    WTF::printExpectedCStringHelper(v1340, "StringView", &v1444);
    v1344 = v1428;
    if ((_DWORD)v1445 != -1)
      ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
    (*(void (**)(uint64_t))(*(_QWORD *)v1331 + 40))(v1331);
    (*(void (**)(uint64_t))(*(_QWORD *)v1328 + 40))(v1328);
    v1438 = 1;
  }
  v1346 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1328 + 32))(v1328);
  if (v1326)
    v1348 = 9;
  else
    v1348 = 11;
  WTF::StringImpl::utf8ForCharacters(v1327, v1348, (uint64_t)&v1444, v1347);
  WTF::printExpectedCStringHelper(v1346, "StringView", &v1444);
  if ((_DWORD)v1445 != -1)
    ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
  (*(void (**)(uint64_t))(*(_QWORD *)v1328 + 40))(v1328);
  (*(void (**)(uint64_t))(*(_QWORD *)v1344 + 40))(v1344);
  if (*((_BYTE *)v1426 + 17))
  {
    v1349 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1344 + 32))(v1344);
    v1350 = v1438;
    v1351 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1349 + 32))(v1349);
    v1352 = v1351;
    v1353 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1351 + 32);
    if (v1350)
    {
      v1354 = (char *)v1434;
      v1355 = v1435;
      v1356 = (WTF::PrintStream *)v1353(v1351);
      if (v1354)
      {
        v1358 = v1355 - 1;
        if (!v1355)
          v1358 = 0;
        WTF::StringImpl::utf8ForCharacters(v1354, v1358, (uint64_t)&v1444, v1357);
      }
      else
      {
        v1364 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v1364 = 1;
        *(_QWORD *)(v1364 + 8) = 0;
        *(_BYTE *)(v1364 + 16) = 0;
        v1444 = (WTF *)v1364;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v1356, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v1352 + 40))(v1352);
      (*(void (**)(uint64_t))(*(_QWORD *)v1349 + 40))(v1349);
    }
    else
    {
      v1359 = v1436;
      v1360 = v1437;
      v1361 = (WTF::PrintStream *)v1353(v1351);
      if (v1359)
      {
        v1363 = v1360 - 1;
        if (!v1360)
          v1363 = 0;
        WTF::StringImpl::utf8ForCharacters(v1359, v1363, (uint64_t)&v1444, v1362);
      }
      else
      {
        v1365 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v1365 = 1;
        *(_QWORD *)(v1365 + 8) = 0;
        *(_BYTE *)(v1365 + 16) = 0;
        v1444 = (WTF *)v1365;
        LODWORD(v1445) = 0;
      }
      WTF::printExpectedCStringHelper(v1361, "StringView", &v1444);
      if ((_DWORD)v1445 != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
      (*(void (**)(uint64_t))(*(_QWORD *)v1352 + 40))(v1352);
      (*(void (**)(uint64_t))(*(_QWORD *)v1349 + 40))(v1349);
      v1438 = 1;
    }
    v1366 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1349 + 32))(v1349);
    WTF::StringImpl::utf8ForCharacters("WasHoisted", 0xAuLL, (uint64_t)&v1444, v1367);
    WTF::printExpectedCStringHelper(v1366, "StringView", &v1444);
    if ((_DWORD)v1445 != -1)
      ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
    (*(void (**)(uint64_t))(*(_QWORD *)v1349 + 40))(v1349);
    (*(void (**)(uint64_t))(*(_QWORD *)v1344 + 40))(v1344);
  }
  v1368 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1344 + 32))(v1344);
  WTF::PrintStream::printf(v1368, "%s", ")");
  (*(void (**)(uint64_t))(*(_QWORD *)v1344 + 40))(v1344);
  v1369 = *((unsigned __int16 *)v1426 + 9);
  if (v1369 <= 0x27
    && (((1 << v1369) & 0xC030018000) != 0 || v1369 == 27 && *((_DWORD *)this + 236) != 2)
    && (v1370 = (_QWORD *)*((_QWORD *)v1426 + 9)) != 0)
  {
    v1371 = (_QWORD *)*((_QWORD *)v1426 + 9);
    do
    {
      v1372 = v1371;
      v1371 = (_QWORD *)*v1371;
    }
    while (v1371);
    if (v1372 == v1370 || (*v1370 = v1372, (v1370 = (_QWORD *)*((_QWORD *)v1426 + 9)) != 0))
    {
      v1373 = v1370;
      do
      {
        v1374 = v1373;
        v1373 = (_QWORD *)*v1373;
      }
      while (v1373);
      if (v1374 == v1370)
        v1374 = v1370;
      else
        *v1370 = v1374;
    }
    else
    {
      v1374 = 0;
    }
    v1376 = v1374;
    do
    {
      v1377 = v1376;
      v1376 = (_QWORD *)*v1376;
    }
    while (v1376);
    if (v1377 != v1374)
      *v1374 = v1377;
    v1375 = (WTF::PrintStream *)v1377[1];
  }
  else
  {
    if (!JSC::DFG::Node::hasHeapPrediction(v1426))
      goto LABEL_1487;
    v1375 = (WTF::PrintStream *)*((_QWORD *)v1426 + 10);
  }
  v1378 = (JSC *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1344 + 32))(v1344);
  v1379 = (WTF::PrintStream *)(*(uint64_t (**)(JSC *))(*(_QWORD *)v1378 + 32))(v1378);
  WTF::StringImpl::utf8ForCharacters("  predicting ", 0xDuLL, (uint64_t)&v1444, v1380);
  WTF::printExpectedCStringHelper(v1379, "StringView", &v1444);
  if ((_DWORD)v1445 != -1)
    ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
  (*(void (**)(JSC *))(*(_QWORD *)v1378 + 40))(v1378);
  JSC::dumpSpeculation(v1378, v1375);
  (*(void (**)(uint64_t))(*(_QWORD *)v1344 + 40))(v1344);
LABEL_1487:
  v1381 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1344 + 32))(v1344);
  v1382 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1381 + 32))(v1381);
  WTF::StringImpl::utf8ForCharacters("\n", 1uLL, (uint64_t)&v1444, v1383);
  WTF::printExpectedCStringHelper(v1382, "StringView", &v1444);
  if ((_DWORD)v1445 != -1)
    ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v1445])(&v1443, &v1444);
  (*(void (**)(uint64_t))(*(_QWORD *)v1381 + 40))(v1381);
  (*(void (**)(uint64_t))(*(_QWORD *)v1344 + 40))(v1344);
  if (v1433)
    WTF::fastFree((unint64_t)(v1433 - 2), v1384, v1385, v1386, v1387, v1388, v1389, v1390);
  if (v1431)
    WTF::fastFree((unint64_t)(v1431 - 16), v1384, v1385, v1386, v1387, v1388, v1389, v1390);
}

BOOL JSC::DFG::Node::hasCacheableIdentifier(JSC::DFG::Node *this)
{
  int v1;
  _BOOL8 result;
  unsigned int v3;
  _BOOL4 v4;

  v1 = (unsigned __int16)this;
  result = 1;
  if ((v1 - 106) > 0x25 || ((1 << (v1 - 106)) & 0x200100FFF9) == 0)
  {
    v3 = v1 - 255;
    v4 = (v1 - 335) < 2;
    return v3 < 2 || v4;
  }
  return result;
}

void JSC::DFG::Graph::dumpBlockHeader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t *v5;
  uint64_t v7;
  JSC::CodeOrigin *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  WTF::PrintStream *v12;
  WTF::PrintStream *v13;
  WTF::PrintStream *v14;
  WTF::PrintStream *v15;
  unint64_t v16;
  uint64_t v17;
  WTF::PrintStream *v18;
  WTF::PrintStream *v19;
  WTF::PrintStream *v20;
  WTF::PrintStream *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  WTF::PrintStream *v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  unsigned int v38;
  uint64_t v39;
  WTF::PrintStream *v40;
  WTF::PrintStream *v41;
  int v42;
  WTF::PrintStream *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t i;
  unint64_t v66;
  unint64_t v67;
  WTF **v68;
  WTF::PrintStream *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  WTF **v83;
  uint64_t v84;
  uint64_t v85;
  const void *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  WTF *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF *v99;
  WTF::PrintStream *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t *v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  unsigned int v123;
  uint64_t v124;
  unint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  WTF *v131;
  unint64_t v132;
  WTF **v133;
  uint64_t v134;
  uint64_t v135;
  WTF *v136;
  unint64_t v137;
  unint64_t v138;
  WTF **v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  const void *v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  WTF *v149;
  WTF *v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  WTF *v158;
  WTF::PrintStream *v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  WTF *v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  int v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t *v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  unsigned int v192;
  WTF *v193;
  unint64_t v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  _QWORD *v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *casual;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t *v222;
  const void *v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  unint64_t *v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  const void *v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  WTF *v242;
  WTF *v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  WTF *v251;
  WTF *v252;
  WTF::PrintStream *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  int v266;
  uint64_t v267;
  WTF *v268;
  unint64_t v269;
  unint64_t v270;
  WTF **v271;
  uint64_t v272;
  unsigned int v273;
  WTF::PrintStream *v274;
  uint64_t v275;
  WTF::PrintStream *v276;
  float v277;
  WTF::PrintStream *v278;
  float v279;
  WTF::PrintStream *v280;
  void *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  WTF *v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  WTF **v297;
  uint64_t v298;
  uint64_t v299;
  __int128 *v300;
  unint64_t v301;
  _OWORD *v302;
  uint64_t v303;
  __int128 v304;
  WTF *v305;
  WTF::PrintStream *v307;
  uint64_t v308;
  WTF::PrintStream *v309;
  float v310;
  WTF::PrintStream *v311;
  float v312;
  WTF::PrintStream *v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  WTF::PrintStream *v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;
  uint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  unsigned int v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unsigned int v337;
  uint64_t v338;
  unsigned int v339;
  uint64_t v340;
  unsigned int v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int v344;
  uint64_t v345;
  WTF::PrintStream *v346;
  WTF::PrintStream *v347;
  WTF::PrintStream *v348;
  uint64_t v349;
  uint64_t v350;
  unsigned int v351;
  unsigned int v352;
  uint64_t v353;
  unsigned int v354;
  uint64_t v355;
  WTF *v356;
  unsigned int v357;
  unsigned int v358;
  uint64_t v359;
  _QWORD *v360;
  uint64_t v361;
  int v362;
  uint64_t v363;
  WTF *v364;
  unint64_t v365;
  unint64_t v366;
  WTF **v367;
  uint64_t v368;
  unsigned int v369;
  uint64_t v370;
  uint64_t v371;
  unsigned int v372;
  unsigned int v373;
  unsigned int v374;
  uint64_t v375;
  WTF *v376;
  WTF *v377;
  unsigned int v378;
  char *v379;
  unsigned int v380;
  uint64_t v381;
  WTF::PrintStream *v382;
  uint64_t v383;
  WTF *v384;
  uint64_t v385;
  uint64_t v386;
  WTF::PrintStream *v387;
  WTF::PrintStream *v388;
  int v389;
  WTF::PrintStream *v390;
  WTF::PrintStream *v391;
  uint64_t v392;
  WTF::PrintStream *v393;
  float v394;
  WTF::PrintStream *v395;
  float v396;
  WTF::PrintStream *v397;
  void *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  char *v406;
  uint64_t v407;
  uint64_t v408;
  WTF *v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  WTF **v413;
  uint64_t v414;
  uint64_t v415;
  __int128 *v416;
  unint64_t v417;
  _OWORD *v418;
  uint64_t v419;
  __int128 v420;
  WTF *v421;
  WTF::PrintStream *v423;
  uint64_t v424;
  WTF::PrintStream *v425;
  float v426;
  WTF::PrintStream *v427;
  float v428;
  WTF::PrintStream *v429;
  void *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  char *v438;
  uint64_t v439;
  uint64_t v440;
  void *v441;
  uint64_t v442;
  uint64_t v443;
  WTF *v444;
  WTF *v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  unsigned int v449;
  unsigned int v450;
  unsigned int v451;
  unsigned int v452;
  uint64_t v453;
  WTF *v454;
  unint64_t v455;
  unint64_t v456;
  WTF **v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  unint64_t v462;
  unint64_t *v463;
  uint64_t v464;
  unsigned int v465;
  uint64_t v467;
  unsigned int v468;
  uint64_t v469;
  __int128 *v470;
  unint64_t v471;
  _OWORD *v472;
  uint64_t v473;
  __int128 v474;
  WTF *v475;
  WTF::PrintStream *v477;
  uint64_t v478;
  WTF::PrintStream *v479;
  float v480;
  WTF::PrintStream *v481;
  float v482;
  WTF::PrintStream *v483;
  void *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unsigned int v491;
  char *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  char *v497;
  uint64_t v498;
  uint64_t v499;
  void *v500;
  uint64_t v501;
  uint64_t v502;
  WTF *v503;
  WTF *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unsigned int v508;
  unsigned int v509;
  uint64_t v510;
  unsigned int v511;
  uint64_t v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t *v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  WTF *v519;
  __int128 v520;
  uint64_t v521;
  unsigned int v522;
  unsigned int v523;
  uint64_t v524;
  unsigned int v525;
  __int128 *v526;
  unint64_t v527;
  unint64_t v528;
  uint64_t v529;
  unint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t *v535;
  unint64_t v536;
  uint64_t v537;
  unint64_t v538;
  unint64_t v539;
  unint64_t v540;
  unint64_t v541;
  uint64_t *v542;
  unint64_t v543;
  const void *v544;
  _QWORD *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  unsigned int v549;
  unint64_t *v550;
  uint64_t v551;
  unint64_t v552;
  unint64_t v553;
  uint64_t v555;
  unsigned int v556;
  uint64_t v557;
  __int128 *v558;
  unint64_t v559;
  WTF *v560;
  unint64_t v561;
  unint64_t v562;
  unint64_t v563;
  uint64_t v564;
  unint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  WTF *v570;
  unint64_t v571;
  uint64_t v572;
  unint64_t v573;
  uint64_t v574;
  WTF *v575;
  __int128 v576;
  uint64_t v577;
  _OWORD *v578;
  __int128 v579;
  uint64_t v580;
  unsigned int v581;
  unint64_t *v582;
  uint64_t v583;
  unint64_t v584;
  unint64_t v585;
  WTF *v586;
  WTF *v588;
  WTF::PrintStream *v589;
  uint64_t v590;
  WTF::PrintStream *v591;
  float v592;
  WTF::PrintStream *v593;
  float v594;
  WTF::PrintStream *v595;
  WTF::PrintStream *v596;
  unint64_t v597;
  uint64_t v598;
  WTF::PrintStream *v599;
  WTF::PrintStream *v600;
  WTF::PrintStream *v601;
  WTF *v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  WTF::PrintStream *v608;
  uint64_t v609;
  unsigned int *v610;
  int v611;
  uint64_t v612;
  WTF *v613;
  unsigned int v614;
  unint64_t v615;
  _QWORD *v616;
  _DWORD *v617;
  _DWORD *v618;
  WTF::PrintStream *v619;
  uint64_t v620;
  unsigned int *v621;
  int v622;
  WTF *v623;
  unsigned int v624;
  unint64_t v625;
  _QWORD *v626;
  uint64_t v627;
  _DWORD *v628;
  _DWORD *v629;
  WTF::PrintStream *v630;
  unint64_t v631;
  unint64_t v632;
  unint64_t v633;
  uint64_t v634;
  int v635;
  int v636;
  _QWORD *v637;
  _QWORD *v638;
  _QWORD *v639;
  unint64_t v640;
  WTF::PrintStream *v641;
  WTF::PrintStream *v642;
  WTF::PrintStream *v643;
  WTF::PrintStream *v644;
  void *v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  WTF *v652;
  size_t v653;
  unint64_t v654;
  void *v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  void *v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  int v669;
  uint64_t v670;
  WTF::PrintStream *v671;
  WTF::PrintStream *v672;
  WTF::PrintStream *v673;
  int v674;
  WTF::PrintStream *v675;
  int v676;
  WTF::PrintStream *v677;
  int v678;
  WTF::PrintStream *v679;
  const char *v680;
  WTF::PrintStream *v681;
  WTF::PrintStream *v682;
  unint64_t v683;
  WTF *v684;
  WTF::PrintStream *v685;
  int v686;
  WTF::PrintStream *v687;
  WTF *v688;
  uint64_t v689;
  unint64_t v690;
  WTF *v691;
  WTF::PrintStream *v692;
  int v693;
  WTF::PrintStream *v694;
  WTF *v695;
  JSC::DFG::Prefix *v696;
  WTF *v699;
  WTF *v700;
  unint64_t v701;
  unint64_t v702;
  unint64_t v703;
  uint64_t *v704;
  uint64_t v705;
  unint64_t v706;
  unint64_t v707;
  unint64_t v708;
  uint64_t *v709;
  unint64_t StatusReg;
  uint64_t v711;
  int v712;
  WTF *__src;
  uint64_t __srca;
  uint64_t __srcb;
  uint64_t __srcc;
  WTF *__srcd;
  uint64_t v718;
  int v719;
  uint64_t v720;
  __int16 v721;
  unint64_t v722;
  uint64_t v723;
  _OWORD v724[4];
  uint64_t v725;
  char v726;
  WTF *v727;
  uint64_t v728;
  _OWORD v729[4];
  WTF *v730;
  uint64_t v731;
  _BYTE v732[64];
  __int128 v733;
  WTF *v734;
  WTF *v735;
  __int128 v736;
  _BYTE v737[240];
  uint64_t v738;

  v738 = *MEMORY[0x1E0C80C00];
  v718 = -1;
  v719 = -1;
  v720 = a3;
  v721 = 257;
  if (a3)
    v5 = &v718;
  else
    v5 = (uint64_t *)(a1 + 1088);
  if (!*(_DWORD *)(a4 + 220))
  {
    __break(0xC471u);
    JUMPOUT(0x1983CD564);
  }
  v7 = a4;
  v8 = **(JSC::CodeOrigin ***)(a4 + 208);
  if (*(_BYTE *)(a4 + 21))
    v9 = (const char *)&str_24_8;
  else
    v9 = " (skipped)";
  if (*(_BYTE *)(a4 + 19))
    v10 = " (OSR target)";
  else
    v10 = (const char *)&str_24_8;
  if (*(_BYTE *)(a4 + 20))
    v11 = " (Catch Entrypoint)";
  else
    v11 = (const char *)&str_24_8;
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  JSC::DFG::Prefix::dump((uint64_t)v5, v12);
  WTF::PrintStream::printf(v12, "%s", "Block ");
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
  WTF::PrintStream::printf(v13, "%s", "#");
  WTF::PrintStream::printf(v13, "%u", *(_DWORD *)(v7 + 8));
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
  WTF::PrintStream::printf(v12, "%s", " (");
  JSC::CodeOrigin::dump(v8, v12);
  WTF::PrintStream::printf(v12, "%s", "):");
  WTF::PrintStream::printf(v12, "%s", v9);
  WTF::PrintStream::printf(v12, "%s", v10);
  WTF::PrintStream::printf(v12, "%s", v11);
  WTF::PrintStream::printf(v12, "%s", "\n");
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v14 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a2 + 32))(a2, *(float *)(v7 + 192));
  JSC::DFG::Prefix::dump((uint64_t)v5, v14);
  WTF::PrintStream::printf(v14, "%s", "  Execution count: ");
  WTF::PrintStream::printf(v14, "%lf", *(float *)(v7 + 192));
  WTF::PrintStream::printf(v14, "%s", "\n");
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v696 = (JSC::DFG::Prefix *)v5;
  JSC::DFG::Prefix::dump((uint64_t)v5, v15);
  WTF::PrintStream::printf(v15, "%s", "  Predecessors:");
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v702 = v7;
  if (*(_DWORD *)(v7 + 52))
  {
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8 * v16);
      v18 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v18, "%s", " ");
      v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v18 + 32))(v18);
      WTF::PrintStream::printf(v19, "%s", "#");
      WTF::PrintStream::printf(v19, "%u", *(_DWORD *)(v17 + 8));
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v18 + 40))(v18);
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      v7 = v702;
      ++v16;
    }
    while (v16 < *(unsigned int *)(v702 + 52));
  }
  v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v20, "%s", "\n");
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v21 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  JSC::DFG::Prefix::dump((uint64_t)v5, v21);
  WTF::PrintStream::printf(v21, "%s", "  Successors:");
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v22 = *(unsigned int *)(v702 + 220);
  v705 = a2;
  if ((_DWORD)v22)
  {
    v23 = 8 * v22;
    v24 = *(_QWORD *)(v702 + 208) - 8;
    v25 = v23;
    while (1)
    {
      v26 = *(unsigned __int16 *)(*(_QWORD *)(v24 + v25) + 18);
      if ((v26 - 364) <= 0xB)
        break;
      if ((v26 - 28) < 2 || (v26 - 23) <= 2)
      {
        v25 -= 8;
        if (v25)
          continue;
      }
      goto LABEL_24;
    }
    do
    {
      v28 = *(_QWORD *)(v24 + v23);
      v29 = *(unsigned __int16 *)(v28 + 18);
      if ((v29 - 364) < 0xC)
        goto LABEL_31;
      if ((v29 - 28) >= 2 && (v29 - 23) > 2)
        break;
      v23 -= 8;
    }
    while (v23);
    v28 = 0;
LABEL_31:
    v30 = 1;
    switch(*(_WORD *)(v28 + 18))
    {
      case 0x16C:
        goto LABEL_33;
      case 0x16D:
        v30 = 2;
        goto LABEL_33;
      case 0x16E:
        v42 = *(_DWORD *)(*(_QWORD *)(v28 + 72) + 12);
        v30 = v42 + 1;
        if (v42 == -1)
          goto LABEL_52;
        goto LABEL_33;
      case 0x16F:
        v30 = *(_DWORD *)(*(_QWORD *)(v28 + 72) + 12);
        if (!v30)
          goto LABEL_52;
LABEL_33:
        v31 = 0;
        v32 = 0;
        v33 = (uint64_t *)(v28 + 72);
        break;
      default:
        goto LABEL_52;
    }
    while (1)
    {
      v34 = *(unsigned __int16 *)(v28 + 18);
      if (v34 == 366)
      {
        v37 = (_QWORD *)*v33;
        v38 = *(_DWORD *)(*v33 + 12);
        if (v38 <= v31)
        {
          if (v38 != v31)
          {
            __break(0xC471u);
            JUMPOUT(0x1983CD370);
          }
          v35 = v37 + 2;
          goto LABEL_44;
        }
        v36 = *v37 + 32 * v32;
      }
      else
      {
        if (v34 == 367)
        {
          if (*(_DWORD *)(*v33 + 12) <= v31)
          {
            __break(0xC471u);
            JUMPOUT(0x1983CD54CLL);
          }
          v35 = (uint64_t *)(*(_QWORD *)*v33 + 8 * v32);
          goto LABEL_44;
        }
        if (!v31)
        {
          v35 = (uint64_t *)(v28 + 72);
          if (v34 != 364)
            v35 = (uint64_t *)*v33;
          goto LABEL_44;
        }
        if (v31 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1983CD404);
        }
        v36 = *v33;
      }
      v35 = (uint64_t *)(v36 + 16);
LABEL_44:
      v39 = *v35;
      v40 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
      WTF::PrintStream::printf(v40, "%s", " ");
      v41 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v40 + 32))(v40);
      WTF::PrintStream::printf(v41, "%s", "#");
      WTF::PrintStream::printf(v41, "%u", *(_DWORD *)(v39 + 8));
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v40 + 40))(v40);
      (*(void (**)(uint64_t))(*(_QWORD *)v705 + 40))(v705);
      v31 = v32 + 1;
      v32 = (v32 + 1);
      if (v30 == v31)
        goto LABEL_52;
    }
  }
LABEL_24:
  v27 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v27, "%s", " <invalid>");
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
LABEL_52:
  v43 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
  WTF::PrintStream::printf(v43, "%s", "\n");
  (*(void (**)(uint64_t))(*(_QWORD *)v705 + 40))(v705);
  v51 = a1;
  v52 = *(unsigned int *)(a1 + 60);
  v53 = v702;
  if ((_DWORD)v52)
  {
    v54 = 0;
    v55 = *(_QWORD *)(a1 + 48);
    while (!*(_QWORD *)(v55 + 8 * v54))
    {
      if (v52 == ++v54)
        goto LABEL_74;
    }
    if ((_DWORD)v52 != (_DWORD)v54)
    {
      v54 = v54;
      do
      {
        if (v52 <= v54)
        {
          __break(0xC471u);
          JUMPOUT(0x1983CD4D4);
        }
        v56 = *(_QWORD *)(v55 + 8 * v54);
        v57 = *(unsigned int *)(v56 + 220);
        if (!(_DWORD)v57)
          goto LABEL_334;
        v58 = *(_QWORD *)(v56 + 208);
        v59 = 8 * v57;
        v60 = v58 - 8;
        while (1)
        {
          v61 = *(unsigned __int16 *)(*(_QWORD *)(v60 + v59) + 18);
          if ((v61 - 364) < 0xC)
            break;
          if ((v61 - 28) < 2 || (v61 - 23) <= 2)
          {
            v59 -= 8;
            if (v59)
              continue;
          }
          goto LABEL_334;
        }
        if (v52 > ++v54)
        {
          while (!*(_QWORD *)(v55 + 8 * v54))
          {
            if (v52 == ++v54)
              goto LABEL_74;
          }
          v54 = v54;
        }
      }
      while (v52 != v54);
    }
  }
LABEL_74:
  v62 = *(_QWORD *)(a1 + 784);
  if (v62)
  {
    v63 = 0x8000000000000000;
    v734 = (WTF *)0x8000000000000000;
    if (v702)
    {
      v64 = v702;
LABEL_78:
      for (i = 63; ; i = *(_QWORD *)(2 * (_QWORD)v734))
      {
        v66 = *(unsigned int *)(v64 + 8);
        v67 = v66;
        if (i <= v66)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v734, v66 + 1, 0);
          v63 = (uint64_t)v734;
          v67 = *(unsigned int *)(v64 + 8);
        }
        if (v63 >= 0)
          v68 = (WTF **)(2 * v63 + 8);
        else
          v68 = &v734;
        *(WTF **)((char *)v68 + ((v66 >> 3) & 0x1FFFFFF8)) = (WTF *)(*(unint64_t *)((char *)v68
                                                                                         + ((v66 >> 3) & 0x1FFFFFF8)) | (1 << v66));
        if (*(unsigned int *)(v62 + 20) <= v67)
        {
          __break(0xC471u);
          JUMPOUT(0x1983CD494);
        }
        v64 = *(_QWORD *)(*(_QWORD *)(v62 + 8) + 32 * v67 + 16);
        if (!v64)
          break;
        v63 = (uint64_t)v734;
        if (((unint64_t)v734 & 0x8000000000000000) != 0)
          goto LABEL_78;
      }
    }
    v69 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
    JSC::DFG::Prefix::dump((uint64_t)v5, v69);
    WTF::PrintStream::printf(v69, "%s", "  Dominated by: ");
    JSC::DFG::BlockSet::dump((unint64_t *)&v734, v69);
    WTF::PrintStream::printf(v69, "%s", "\n");
    (*(void (**)(uint64_t))(*(_QWORD *)v705 + 40))(v705);
    if (((unint64_t)v734 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * (_QWORD)v734, v70, v71, v72, v73, v74, v75, v76);
    v730 = (WTF *)0x8000000000000000;
    v734 = (WTF *)&v736;
    LODWORD(v735) = 16;
    *(_QWORD *)&v736 = v702;
    LODWORD(v77) = 1;
    do
    {
      while (1)
      {
        v78 = *((_QWORD *)v734 + v77 - 1);
        HIDWORD(v735) = v77 - 1;
        v79 = v730;
        if (((unint64_t)v730 & 0x8000000000000000) != 0)
          v80 = 63;
        else
          v80 = *(_QWORD *)(2 * (_QWORD)v730);
        v81 = *(unsigned int *)(v78 + 8);
        if (v80 <= v81)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v730, v81 + 1, 0);
          v79 = v730;
        }
        v82 = *(unsigned int *)(v78 + 8);
        if ((uint64_t)v79 >= 0)
          v83 = (WTF **)(2 * (_QWORD)v79 + 8);
        else
          v83 = &v730;
        *(WTF **)((char *)v83 + ((v81 >> 3) & 0x1FFFFFF8)) = (WTF *)(*(unint64_t *)((char *)v83
                                                                                         + ((v81 >> 3) & 0x1FFFFFF8)) | (1 << v81));
        if (*(unsigned int *)(v62 + 20) <= v82)
        {
          __break(0xC471u);
          JUMPOUT(0x1983CD47CLL);
        }
        v84 = *(_QWORD *)(v62 + 8) + 32 * v82;
        v85 = *(unsigned int *)(v84 + 12);
        v77 = HIDWORD(v735);
        if ((_DWORD)v85)
          break;
        if (!HIDWORD(v735))
          goto LABEL_122;
      }
      v86 = *(const void **)v84;
      v87 = HIDWORD(v735) + v85;
      if (v87 > v735)
      {
        v88 = v735 + ((unint64_t)v735 >> 2);
        if (v88 >= 0x10)
          v89 = v88 + 1;
        else
          v89 = 16;
        if (v89 <= v87)
          v90 = HIDWORD(v735) + v85;
        else
          v90 = v89;
        __src = v734;
        if (v90 < 0x11)
        {
          v734 = (WTF *)&v736;
          LODWORD(v735) = 16;
          v91 = (WTF *)&v736;
        }
        else
        {
          if (v90 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1983CD554);
          }
          v91 = (WTF *)WTF::fastMalloc((WTF *)(8 * v90));
          LODWORD(v735) = v90;
          v734 = v91;
        }
        memcpy(v91, __src, 8 * v77);
        if (&v736 != (__int128 *)__src && __src)
        {
          if (v734 == __src)
          {
            v734 = 0;
            LODWORD(v735) = 0;
          }
          WTF::fastFree((unint64_t)__src, v92, v93, v94, v95, v96, v97, v98);
        }
      }
      if (v87 < HIDWORD(v735))
      {
        __break(0xC471u);
        JUMPOUT(0x1983CD4ACLL);
      }
      memcpy((char *)v734 + 8 * HIDWORD(v735), v86, 8 * v85);
      HIDWORD(v735) = v77 + v85;
      LODWORD(v77) = v77 + v85;
    }
    while ((_DWORD)v87);
LABEL_122:
    v99 = v734;
    if (&v736 != (__int128 *)v734 && v734)
    {
      v734 = 0;
      LODWORD(v735) = 0;
      WTF::fastFree((unint64_t)v99, v70, v71, v72, v73, v74, v75, v76);
    }
    v100 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
    JSC::DFG::Prefix::dump((uint64_t)v696, v100);
    WTF::PrintStream::printf(v100, "%s", "  Dominates: ");
    JSC::DFG::BlockSet::dump((unint64_t *)&v730, v100);
    WTF::PrintStream::printf(v100, "%s", "\n");
    (*(void (**)(uint64_t))(*(_QWORD *)v705 + 40))(v705);
    if (((unint64_t)v730 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * (_QWORD)v730, v101, v102, v103, v104, v105, v106, v107);
    v727 = (WTF *)0x8000000000000000;
    v730 = (WTF *)0x8000000000000000;
    v734 = (WTF *)&v736;
    LODWORD(v735) = 16;
    v108 = v702;
    *(_QWORD *)&v736 = v702;
    LODWORD(v109) = 1;
LABEL_128:
    v110 = *((_QWORD *)v734 + v109 - 1);
    HIDWORD(v735) = v109 - 1;
    v111 = *(unsigned int *)(v110 + 220);
    if ((_DWORD)v111)
    {
      v112 = 8 * v111;
      while (1)
      {
        v113 = *(_QWORD *)(*(_QWORD *)(v110 + 208) - 8 + v112);
        v114 = *(unsigned __int16 *)(v113 + 18);
        if ((v114 - 364) < 0xC)
          break;
        if ((v114 - 28) < 2 || (v114 - 23) <= 2)
        {
          v112 -= 8;
          if (v112)
            continue;
        }
        goto LABEL_135;
      }
    }
    else
    {
LABEL_135:
      v113 = 0;
    }
    v115 = 1;
    switch(*(_WORD *)(v113 + 18))
    {
      case 0x16C:
        goto LABEL_138;
      case 0x16D:
        v115 = 2;
        goto LABEL_138;
      case 0x16E:
        v140 = *(_DWORD *)(*(_QWORD *)(v113 + 72) + 12);
        v115 = v140 + 1;
        if (v140 == -1)
          goto LABEL_179;
        goto LABEL_138;
      case 0x16F:
        v115 = *(_DWORD *)(*(_QWORD *)(v113 + 72) + 12);
        if (!v115)
          goto LABEL_179;
LABEL_138:
        v116 = 0;
        v117 = 0;
        v118 = (uint64_t *)(v113 + 72);
        break;
      default:
        goto LABEL_179;
    }
    while (1)
    {
      v119 = *(unsigned __int16 *)(v113 + 18);
      if (v119 == 366)
      {
        v122 = (_QWORD *)*v118;
        v123 = *(_DWORD *)(*v118 + 12);
        if (v123 <= v116)
        {
          if (v123 != v116)
          {
            __break(0xC471u);
            JUMPOUT(0x1983CD320);
          }
          v120 = (uint64_t)(v122 + 2);
          goto LABEL_149;
        }
        v121 = *v122 + 32 * v117;
      }
      else
      {
        if (v119 == 367)
        {
          if (*(_DWORD *)(*v118 + 12) <= v116)
          {
            __break(0xC471u);
            JUMPOUT(0x1983CD474);
          }
          v120 = *(_QWORD *)*v118 + 8 * v117;
          goto LABEL_149;
        }
        if (!v116)
        {
          v120 = v113 + 72;
          if (v119 != 364)
            v120 = *v118;
          goto LABEL_149;
        }
        if (v116 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1983CD3B0);
        }
        v121 = *v118;
      }
      v120 = v121 + 16;
LABEL_149:
      v124 = *(_QWORD *)v120;
      v125 = *(unsigned int *)(*(_QWORD *)v120 + 8);
      v126 = *(_DWORD *)(v62 + 20);
      if (v126 <= v125)
      {
        __break(0xC471u);
        JUMPOUT(0x1983CD41CLL);
      }
      v127 = *(unsigned int *)(v108 + 8);
      if (v126 <= v127)
      {
        __break(0xC471u);
        JUMPOUT(0x1983CD424);
      }
      v128 = *(_QWORD *)(v62 + 8);
      v129 = v128 + 32 * v125;
      v130 = v128 + 32 * v127;
      if (*(_DWORD *)(v129 + 24) <= *(_DWORD *)(v130 + 24) || *(_DWORD *)(v129 + 28) >= *(_DWORD *)(v130 + 28))
      {
        v131 = v730;
        if (((unint64_t)v730 & 0x8000000000000000) != 0)
          v132 = 63;
        else
          v132 = *(_QWORD *)(2 * (_QWORD)v730);
        if (v132 <= v125)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v730, v125 + 1, 0);
          v108 = v702;
          v131 = v730;
        }
        if ((uint64_t)v131 >= 0)
          v133 = (WTF **)(2 * (_QWORD)v131 + 8);
        else
          v133 = &v730;
        v134 = (v125 >> 3) & 0x1FFFFFF8;
        v135 = *(uint64_t *)((char *)v133 + v134);
        *(WTF **)((char *)v133 + v134) = (WTF *)(v135 | (1 << v125));
        if ((v135 & (1 << v125)) == 0)
        {
          v136 = v727;
          if (((unint64_t)v727 & 0x8000000000000000) != 0)
            v137 = 63;
          else
            v137 = *(_QWORD *)(2 * (_QWORD)v727);
          v138 = *(unsigned int *)(v124 + 8);
          if (v137 <= v138)
          {
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v727, v138 + 1, 0);
            v108 = v702;
            v136 = v727;
          }
          if ((uint64_t)v136 >= 0)
            v139 = (WTF **)(2 * (_QWORD)v136 + 8);
          else
            v139 = &v727;
          *(WTF **)((char *)v139 + ((v138 >> 3) & 0x1FFFFFF8)) = (WTF *)(*(unint64_t *)((char *)v139
                                                                                             + ((v138 >> 3) & 0x1FFFFFF8)) | (1 << v138));
        }
      }
      v116 = v117 + 1;
      v117 = (v117 + 1);
      if (v115 == v116)
      {
LABEL_179:
        v141 = *(unsigned int *)(v110 + 8);
        if (*(_DWORD *)(v62 + 20) <= v141)
        {
          __break(0xC471u);
          JUMPOUT(0x1983CD484);
        }
        v142 = *(_QWORD *)(v62 + 8) + 32 * v141;
        v143 = *(unsigned int *)(v142 + 12);
        v109 = HIDWORD(v735);
        if ((_DWORD)v143)
        {
          v144 = *(const void **)v142;
          v145 = HIDWORD(v735) + v143;
          if (v145 > v735)
          {
            v146 = v735 + ((unint64_t)v735 >> 2);
            if (v146 >= 0x10)
              v147 = v146 + 1;
            else
              v147 = 16;
            if (v147 <= v145)
              v148 = HIDWORD(v735) + v143;
            else
              v148 = v147;
            v149 = v734;
            if (v148 < 0x11)
            {
              v150 = (WTF *)&v736;
              v734 = (WTF *)&v736;
              LODWORD(v735) = 16;
            }
            else
            {
              if (v148 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x1983CD55CLL);
              }
              v150 = (WTF *)WTF::fastMalloc((WTF *)(8 * v148));
              LODWORD(v735) = v148;
              v734 = v150;
            }
            memcpy(v150, v149, 8 * v109);
            if (&v736 != (__int128 *)v149 && v149)
            {
              if (v734 == v149)
              {
                v734 = 0;
                LODWORD(v735) = 0;
              }
              WTF::fastFree((unint64_t)v149, v151, v152, v153, v154, v155, v156, v157);
            }
          }
          if (v145 < HIDWORD(v735))
          {
            __break(0xC471u);
            JUMPOUT(0x1983CD4B4);
          }
          memcpy((char *)v734 + 8 * HIDWORD(v735), v144, 8 * v143);
          HIDWORD(v735) = v109 + v143;
          LODWORD(v109) = v109 + v143;
          v108 = v702;
          if ((_DWORD)v145)
            goto LABEL_128;
LABEL_204:
          v158 = v734;
          if (&v736 != (__int128 *)v734 && v734)
          {
            v734 = 0;
            LODWORD(v735) = 0;
            WTF::fastFree((unint64_t)v158, v101, v102, v103, v104, v105, v106, v107);
          }
          if (((unint64_t)v730 & 0x8000000000000000) == 0)
            WTF::fastFree(2 * (_QWORD)v730, v101, v102, v103, v104, v105, v106, v107);
          v159 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
          JSC::DFG::Prefix::dump((uint64_t)v696, v159);
          WTF::PrintStream::printf(v159, "%s", "  Dominance Frontier: ");
          JSC::DFG::BlockSet::dump((unint64_t *)&v727, v159);
          WTF::PrintStream::printf(v159, "%s", "\n");
          (*(void (**)(uint64_t))(*(_QWORD *)v705 + 40))(v705);
          if (((unint64_t)v727 & 0x8000000000000000) == 0)
            WTF::fastFree(2 * (_QWORD)v727, v160, v161, v162, v163, v164, v165, v166);
          v167 = (WTF *)WTF::fastMalloc((WTF *)8);
          *(_QWORD *)v167 = v702;
          v722 = 0x8000000000000000;
          v731 = 1;
          v730 = (WTF *)WTF::fastMalloc((WTF *)8);
          v699 = v167;
          *(_QWORD *)v730 = *(_QWORD *)v167;
          StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
          v175 = 1;
LABEL_212:
          v176 = *((_QWORD *)v730 + v175 - 1);
          HIDWORD(v731) = v175 - 1;
          v734 = (WTF *)&v736;
          LODWORD(v735) = 16;
          *(_QWORD *)&v736 = v176;
          LODWORD(v177) = 1;
          while (2)
          {
            v178 = *((_QWORD *)v734 + v177 - 1);
            HIDWORD(v735) = v177 - 1;
            v179 = *(unsigned int *)(v178 + 220);
            __srca = v178;
            if ((_DWORD)v179)
            {
              v180 = 8 * v179;
              v181 = *(_QWORD *)(v178 + 208) - 8;
              while (1)
              {
                v182 = *(_QWORD *)(v181 + v180);
                v183 = *(unsigned __int16 *)(v182 + 18);
                if ((v183 - 364) < 0xC)
                  break;
                if ((v183 - 28) < 2 || (v183 - 23) <= 2)
                {
                  v180 -= 8;
                  if (v180)
                    continue;
                }
                goto LABEL_220;
              }
            }
            else
            {
LABEL_220:
              v182 = 0;
            }
            v184 = 1;
            switch(*(_WORD *)(v182 + 18))
            {
              case 0x16C:
                goto LABEL_223;
              case 0x16D:
                v184 = 2;
                goto LABEL_223;
              case 0x16E:
                v233 = *(_DWORD *)(*(_QWORD *)(v182 + 72) + 12);
                v184 = v233 + 1;
                if (v233 == -1)
                  goto LABEL_298;
                goto LABEL_223;
              case 0x16F:
                v184 = *(_DWORD *)(*(_QWORD *)(v182 + 72) + 12);
                if (!v184)
                  goto LABEL_298;
LABEL_223:
                v185 = 0;
                v186 = 0;
                v187 = (uint64_t *)(v182 + 72);
                break;
              default:
                goto LABEL_298;
            }
LABEL_224:
            v188 = *(unsigned __int16 *)(v182 + 18);
            if (v188 == 366)
            {
              v191 = (_QWORD *)*v187;
              v192 = *(_DWORD *)(*v187 + 12);
              if (v192 > v185)
              {
                v190 = *v191 + 32 * v186;
                goto LABEL_233;
              }
              if (v192 != v185)
              {
                __break(0xC471u);
                JUMPOUT(0x1983CC8CCLL);
              }
              v189 = (uint64_t)(v191 + 2);
            }
            else
            {
              if (v188 != 367)
              {
                if (!v185)
                {
                  v189 = v182 + 72;
                  if (v188 != 364)
                    v189 = *v187;
                  goto LABEL_234;
                }
                if (v185 != 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983CD340);
                }
                v190 = *v187;
LABEL_233:
                v189 = v190 + 16;
                goto LABEL_234;
              }
              if (*(_DWORD *)(*v187 + 12) <= v185)
              {
                __break(0xC471u);
                JUMPOUT(0x1983CD40CLL);
              }
              v189 = *(_QWORD *)*v187 + 8 * v186;
            }
LABEL_234:
            v193 = *(WTF **)v189;
            v194 = *(unsigned int *)(*(_QWORD *)v189 + 8);
            v195 = *(_DWORD *)(v62 + 20);
            if (v195 <= v194)
            {
              __break(0xC471u);
              JUMPOUT(0x1983CD3C0);
            }
            v196 = *(unsigned int *)(v176 + 8);
            if (v195 <= v196)
            {
              __break(0xC471u);
              JUMPOUT(0x1983CD3B8);
            }
            v197 = *(_QWORD *)(v62 + 8);
            v198 = v197 + 32 * v194;
            v199 = v197 + 32 * v196;
            if (*(_DWORD *)(v198 + 24) > *(_DWORD *)(v199 + 24) && *(_DWORD *)(v198 + 28) < *(_DWORD *)(v199 + 28))
              goto LABEL_250;
            v727 = v193;
            v200 = v722;
            if ((v722 & 0x8000000000000000) != 0)
              v201 = 63;
            else
              v201 = *(_QWORD *)(2 * v722);
            if (v201 > v194)
              goto LABEL_242;
            v207 = v194 + 64;
            v208 = ((v194 + 64) >> 3) & 0x3FFFFFF8;
            v209 = *(_QWORD *)(StatusReg + 752);
            if (v209)
            {
              v210 = (v208 + 23) >> 4;
              if (v208 <= 0x198)
              {
                v211 = 23 * v210 + 7;
              }
              else
              {
                if (v208 > 0x2708)
                  break;
                v211 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v210 + 626);
                if (*(_DWORD *)(v209 + 8052) <= v211)
                  break;
              }
              v212 = v209 + 8 * v211;
              v213 = v212 + 8064;
              *(_BYTE *)(v212 + 8064) = 1;
              v214 = *(unsigned int *)(v212 + 8080);
              if ((_DWORD)v214)
              {
                *(_DWORD *)(v213 + 16) = v214 - *(_DWORD *)(v213 + 20);
                casual = (uint64_t *)(*(_QWORD *)(v213 + 8) - v214);
                goto LABEL_265;
              }
              v216 = *(_QWORD *)(v213 + 40);
              v217 = *(_QWORD *)(v213 + 24);
              if (v216)
              {
LABEL_264:
                v218 = __clz(v216);
                *(_QWORD *)(v213 + 40) = v216 & ~(0x8000000000000000 >> v218);
                casual = (uint64_t *)(v217 + 16 * v218);
LABEL_265:
                *(_BYTE *)v213 = 0;
LABEL_266:
                *casual = v207 & 0x1FFFFFFC0;
                v219 = v207 >> 6;
                if ((v722 & 0x8000000000000000) != 0)
                {
                  casual[1] = v722 & 0x7FFFFFFFFFFFFFFFLL;
                  v222 = casual;
                  bzero(casual + 2, 8 * v219 - 8);
                }
                else
                {
                  v220 = 2 * v722;
                  v221 = *(_QWORD *)(2 * v722);
                  v709 = casual;
                  if (v221 <= v194)
                  {
                    v706 = v221 + 63;
                    v707 = v207 >> 6;
                    v223 = (const void *)(v220 + 8);
                    v703 = (v221 + 63) >> 6;
                    v224 = casual + 1;
                    memcpy(casual + 1, v223, 8 * v703);
                    if (v707 < v706 >> 6)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1983CCB80);
                    }
                    bzero(&v224[v703], 8 * (v707 - v703));
                    v220 = 2 * v722;
                  }
                  else
                  {
                    memcpy(casual + 1, (const void *)(v220 + 8), 8 * v219);
                  }
                  v225 = *(_QWORD *)(StatusReg + 752);
                  if (v225)
                  {
                    if (v220 >> 43
                      || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v220 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v220)) & 1) == 0)
                    {
                      if (v220 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v220 >> 24)
                      {
                        v170 = 0;
                      }
                      else
                      {
                        v170 = (*(_DWORD *)((char *)off_1ECF425F8
                                          + ((((v220 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                          + 24) >> (2 * ((BYTE3(v220) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                        if ((_DWORD)v170 == 1)
                          goto LABEL_275;
                      }
                      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v225, v220, 1, v170, v171, v172, v173, v174);
                    }
                    else
                    {
LABEL_275:
                      v226 = *(unsigned int *)(v225 + 8000);
                      if (v226 >= 0x3E7)
                      {
                        pas_thread_local_cache_append_deallocation_slow(v225, v220, (os_unfair_lock_s *)5, v170, v171, v172, v173, v174);
                      }
                      else
                      {
                        *(_QWORD *)(v225 + 8 * v226) = v220 | 0x5000000000000;
                        *(_DWORD *)(v225 + 8000) = v226 + 1;
                      }
                    }
                  }
                  else
                  {
                    pas_try_deallocate_slow_no_cache(v220, (uint64_t)&bmalloc_heap_config, 1);
                  }
                  v222 = v709;
                }
                v200 = (unint64_t)v222 >> 1;
                v722 = (unint64_t)v222 >> 1;
LABEL_242:
                if (v200 >= 0)
                  v202 = (unint64_t *)(2 * v200 + 8);
                else
                  v202 = &v722;
                v203 = (v194 >> 3) & 0x1FFFFFF8;
                v204 = *(unint64_t *)((char *)v202 + v203);
                *(unint64_t *)((char *)v202 + v203) = v204 | (1 << v194);
                if ((v204 & (1 << v194)) == 0)
                {
                  v205 = HIDWORD(v731);
                  if (HIDWORD(v731) == (_DWORD)v731)
                  {
                    v206 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v730, HIDWORD(v731) + 1, (unint64_t)&v727);
                    v205 = HIDWORD(v731);
                    *((_QWORD *)v730 + HIDWORD(v731)) = *v206;
                  }
                  else
                  {
                    *((_QWORD *)v730 + HIDWORD(v731)) = v193;
                  }
                  HIDWORD(v731) = v205 + 1;
                }
LABEL_250:
                v185 = v186 + 1;
                v186 = (v186 + 1);
                if (v184 == v185)
                {
LABEL_298:
                  v234 = *(unsigned int *)(__srca + 8);
                  if (*(_DWORD *)(v62 + 20) <= v234)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983CD414);
                  }
                  v235 = *(_QWORD *)(v62 + 8) + 32 * v234;
                  v236 = *(unsigned int *)(v235 + 12);
                  v177 = HIDWORD(v735);
                  if (!(_DWORD)v236)
                  {
                    if (!HIDWORD(v735))
                      goto LABEL_323;
                    continue;
                  }
                  v237 = *(const void **)v235;
                  v238 = HIDWORD(v735) + v236;
                  if (v238 > v735)
                  {
                    v239 = v735 + ((unint64_t)v735 >> 2);
                    if (v239 >= 0x10)
                      v240 = v239 + 1;
                    else
                      v240 = 16;
                    if (v240 <= v238)
                      v241 = HIDWORD(v735) + v236;
                    else
                      v241 = v240;
                    v242 = v734;
                    if (v241 < 0x11)
                    {
                      v243 = (WTF *)&v736;
                      v734 = (WTF *)&v736;
                      LODWORD(v735) = 16;
                    }
                    else
                    {
                      if (v241 >> 29)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1983CD46CLL);
                      }
                      v243 = (WTF *)WTF::fastMalloc((WTF *)(8 * v241));
                      LODWORD(v735) = v241;
                      v734 = v243;
                    }
                    memcpy(v243, v242, 8 * v177);
                    if (&v736 != (__int128 *)v242 && v242)
                    {
                      if (v734 == v242)
                      {
                        v734 = 0;
                        LODWORD(v735) = 0;
                      }
                      WTF::fastFree((unint64_t)v242, v244, v245, v246, v247, v248, v249, v250);
                    }
                  }
                  if (v238 < HIDWORD(v735))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983CD444);
                  }
                  memcpy((char *)v734 + 8 * HIDWORD(v735), v237, 8 * v236);
                  HIDWORD(v735) = v177 + v236;
                  LODWORD(v177) = v177 + v236;
                  if (!(_DWORD)v238)
                  {
LABEL_323:
                    v251 = v734;
                    if (&v736 != (__int128 *)v734 && v734)
                    {
                      v734 = 0;
                      LODWORD(v735) = 0;
                      WTF::fastFree((unint64_t)v251, v168, v169, v170, v171, v172, v173, v174);
                    }
                    v175 = HIDWORD(v731);
                    if (!HIDWORD(v731))
                    {
                      v252 = v730;
                      if (v730)
                      {
                        v730 = 0;
                        LODWORD(v731) = 0;
                        WTF::fastFree((unint64_t)v252, v168, v169, v170, v171, v172, v173, v174);
                      }
                      v253 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
                      JSC::DFG::Prefix::dump((uint64_t)v696, v253);
                      WTF::PrintStream::printf(v253, "%s", "  Iterated Dominance Frontier: ");
                      JSC::DFG::BlockSet::dump(&v722, v253);
                      WTF::PrintStream::printf(v253, "%s", "\n");
                      (*(void (**)(uint64_t))(*(_QWORD *)v705 + 40))(v705);
                      if ((v722 & 0x8000000000000000) == 0)
                        WTF::fastFree(2 * v722, v44, v45, v46, v47, v48, v49, v50);
                      v254 = (unint64_t)v699;
LABEL_332:
                      WTF::fastFree(v254, v44, v45, v46, v47, v48, v49, v50);
                      goto LABEL_333;
                    }
                    goto LABEL_212;
                  }
                  continue;
                }
                goto LABEL_224;
              }
              if (*(_BYTE *)(v213 + 5) == 6)
              {
                v227 = *(unsigned int *)(v213 + 32);
                v228 = *(_DWORD *)(v213 + 36);
                if (v227 < v228)
                {
                  *(_QWORD *)(v213 + 8 * v227 + 56) = 0;
                  v229 = (unint64_t *)(v209 + 8128 + 8 * v211 + 8 * v227);
                  v230 = v228 - 1 - v227;
                  while (v230)
                  {
                    v217 += 1024;
                    v232 = *v229++;
                    v231 = v232;
                    LODWORD(v227) = v227 + 1;
                    --v230;
                    if (v232)
                    {
                      v216 = __rbit64(v231);
                      *(_DWORD *)(v213 + 32) = v227;
                      *(_QWORD *)(v213 + 24) = v217;
                      goto LABEL_264;
                    }
                  }
                  *(_DWORD *)(v213 + 32) = v228;
                }
              }
              *(_BYTE *)v213 = 0;
            }
            break;
          }
          casual = (uint64_t *)bmalloc_allocate_casual(v208 + 8, 1);
          v207 = v194 + 64;
          goto LABEL_266;
        }
        if (!HIDWORD(v735))
          goto LABEL_204;
        goto LABEL_128;
      }
    }
  }
  v361 = *(_QWORD *)(a1 + 776);
  if (!v361)
    goto LABEL_334;
  v730 = (WTF *)0x8000000000000000;
  LOBYTE(v731) = 0;
  if (v702)
  {
    v362 = 0;
    v363 = 0;
    do
    {
      if (v363)
      {
        if (!(_BYTE)v731)
          LOBYTE(v731) = 1;
      }
      else
      {
        v364 = v730;
        if (((unint64_t)v730 & 0x8000000000000000) != 0)
          v365 = 63;
        else
          v365 = *(_QWORD *)(2 * (_QWORD)v730);
        v366 = *(unsigned int *)(v53 + 8);
        if (v365 <= v366)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v730, v366 + 1, 0);
          v364 = v730;
        }
        if ((uint64_t)v364 >= 0)
          v367 = (WTF **)(2 * (_QWORD)v364 + 8);
        else
          v367 = &v730;
        *(WTF **)((char *)v367 + ((v366 >> 3) & 0x1FFFFFF8)) = (WTF *)(*(unint64_t *)((char *)v367
                                                                                           + ((v366 >> 3) & 0x1FFFFFF8)) | (1 << v366));
      }
      v368 = v361 + 24;
      if (!v362)
      {
        v369 = *(_DWORD *)(v53 + 8);
        if (*(_DWORD *)(v361 + 20) <= v369)
        {
          __break(0xC471u);
          JUMPOUT(0x1983CD514);
        }
        v368 = *(_QWORD *)(v361 + 8) + 40 * v369;
      }
      v53 = *(_QWORD *)(v368 + 16);
      v363 = *(unsigned __int8 *)(v368 + 24);
      v362 = v363;
    }
    while (v53 || (_DWORD)v363);
  }
  v391 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
  JSC::DFG::Prefix::dump((uint64_t)v5, v391);
  WTF::PrintStream::printf(v391, "%s", "  Dominated by: ");
  if ((_BYTE)v731)
  {
    v392 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v391 + 32))(v391);
    v393 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v392 + 32))(v392);
    WTF::StringImpl::utf8ForCharacters("#root", 5uLL, (uint64_t)&v734, v394);
    WTF::printExpectedCStringHelper(v393, "StringView", &v734);
    if ((_DWORD)v735 != -1)
      ((void (*)(WTF **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v735])(&v727, &v734);
    (*(void (**)(uint64_t))(*(_QWORD *)v392 + 40))(v392);
    v395 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v392 + 32))(v392);
    WTF::StringImpl::utf8ForCharacters(" ", 1uLL, (uint64_t)&v734, v396);
    WTF::printExpectedCStringHelper(v395, "StringView", &v734);
    if ((_DWORD)v735 != -1)
      ((void (*)(WTF **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v735])(&v727, &v734);
    (*(void (**)(uint64_t))(*(_QWORD *)v392 + 40))(v392);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v391 + 40))(v391);
  }
  v397 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v391 + 32))(v391);
  JSC::DFG::BlockSet::dump((unint64_t *)&v730, v397);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v391 + 40))(v391);
  WTF::PrintStream::printf(v391, "%s", "\n");
  (*(void (**)(uint64_t))(*(_QWORD *)v705 + 40))(v705);
  if (((unint64_t)v730 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * (_QWORD)v730, v398, v399, v400, v401, v402, v403, v404);
  v730 = (WTF *)0x8000000000000000;
  LOBYTE(v731) = 0;
  v734 = (WTF *)&v736;
  v736 = v702;
  v735 = (WTF *)0x100000010;
  LODWORD(v405) = 1;
  do
  {
    v406 = (char *)v734 + 16 * v405;
    v407 = *((_QWORD *)v406 - 2);
    v408 = *(v406 - 8);
    LODWORD(v405) = v405 - 1;
    HIDWORD(v735) = v405;
    if (v408)
    {
      if (!(_BYTE)v731)
        LOBYTE(v731) = 1;
      v414 = v361 + 24;
    }
    else
    {
      v409 = v730;
      if (((unint64_t)v730 & 0x8000000000000000) != 0)
        v410 = 63;
      else
        v410 = *(_QWORD *)(2 * (_QWORD)v730);
      v411 = *(unsigned int *)(v407 + 8);
      v412 = v411;
      if (v410 <= v411)
      {
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v730, v411 + 1, 0);
        v409 = v730;
        v412 = *(unsigned int *)(v407 + 8);
      }
      if ((uint64_t)v409 >= 0)
        v413 = (WTF **)(2 * (_QWORD)v409 + 8);
      else
        v413 = &v730;
      *(WTF **)((char *)v413 + ((v411 >> 3) & 0x1FFFFFF8)) = (WTF *)(*(unint64_t *)((char *)v413
                                                                                         + ((v411 >> 3) & 0x1FFFFFF8)) | (1 << v411));
      if (*(unsigned int *)(v361 + 20) <= v412)
      {
        __break(0xC471u);
        JUMPOUT(0x1983CD4C4);
      }
      v414 = *(_QWORD *)(v361 + 8) + 40 * v412;
      LODWORD(v405) = HIDWORD(v735);
    }
    v415 = *(unsigned int *)(v414 + 12);
    if ((_DWORD)v415)
    {
      v416 = *(__int128 **)v414;
      v417 = v415 + v405;
      if (v417 <= v735)
      {
        v405 = v405;
      }
      else
      {
        WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v734, (void *)(v415 + v405), v399, v400, v401, v402, v403, v404);
        v405 = HIDWORD(v735);
        if (v417 < HIDWORD(v735))
        {
          __break(0xC471u);
          JUMPOUT(0x1983CD53CLL);
        }
      }
      v418 = (_OWORD *)((char *)v734 + 16 * v405);
      v419 = 16 * v415;
      do
      {
        v420 = *v416++;
        *v418++ = v420;
        v419 -= 16;
      }
      while (v419);
      HIDWORD(v735) = v417;
      LODWORD(v405) = v417;
    }
  }
  while ((_DWORD)v405);
  v421 = v734;
  if (&v736 != (__int128 *)v734 && v734 != 0)
  {
    v734 = 0;
    LODWORD(v735) = 0;
    WTF::fastFree((unint64_t)v421, v398, v399, v400, v401, v402, v403, v404);
  }
  v423 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
  JSC::DFG::Prefix::dump((uint64_t)v5, v423);
  WTF::PrintStream::printf(v423, "%s", "  Dominates: ");
  if ((_BYTE)v731)
  {
    v424 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v423 + 32))(v423);
    v425 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v424 + 32))(v424);
    WTF::StringImpl::utf8ForCharacters("#root", 5uLL, (uint64_t)&v734, v426);
    WTF::printExpectedCStringHelper(v425, "StringView", &v734);
    if ((_DWORD)v735 != -1)
      ((void (*)(WTF **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v735])(&v727, &v734);
    (*(void (**)(uint64_t))(*(_QWORD *)v424 + 40))(v424);
    v427 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v424 + 32))(v424);
    WTF::StringImpl::utf8ForCharacters(" ", 1uLL, (uint64_t)&v734, v428);
    WTF::printExpectedCStringHelper(v427, "StringView", &v734);
    if ((_DWORD)v735 != -1)
      ((void (*)(WTF **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v735])(&v727, &v734);
    (*(void (**)(uint64_t))(*(_QWORD *)v424 + 40))(v424);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v423 + 40))(v423);
  }
  v429 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v423 + 32))(v423);
  JSC::DFG::BlockSet::dump((unint64_t *)&v730, v429);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v423 + 40))(v423);
  WTF::PrintStream::printf(v423, "%s", "\n");
  (*(void (**)(uint64_t))(*(_QWORD *)v705 + 40))(v705);
  if (((unint64_t)v730 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * (_QWORD)v730, v430, v431, v432, v433, v434, v435, v436);
  v722 = 0x8000000000000000;
  LOBYTE(v723) = 0;
  v727 = (WTF *)0x8000000000000000;
  LOBYTE(v728) = 0;
  v734 = (WTF *)&v736;
  v736 = v702;
  LODWORD(v437) = 1;
  v735 = (WTF *)0x100000010;
  do
  {
    v438 = (char *)v734 + 16 * v437;
    v439 = *((_QWORD *)v438 - 2);
    v440 = *(v438 - 8);
    HIDWORD(v735) = v437 - 1;
    __srcb = v439;
    WTF::SingleRootGraph<JSC::DFG::CFG>::successors((uint64_t)&v730, *(_QWORD *)v361, v439, v440, v433, v434, v435, v436);
    v444 = v730;
    v445 = (WTF *)((char *)v730 + 16 * HIDWORD(v731));
    v446 = v702;
    if (HIDWORD(v731))
    {
      do
      {
        v447 = *(_QWORD *)v444;
        v448 = v361 + 24;
        v449 = *(_DWORD *)(v361 + 20);
        if (!*((_BYTE *)v444 + 8))
        {
          v450 = *(_DWORD *)(v447 + 8);
          if (v449 <= v450)
          {
            __break(0xC471u);
            JUMPOUT(0x1983CD454);
          }
          v448 = *(_QWORD *)(v361 + 8) + 40 * v450;
        }
        v451 = *(_DWORD *)(v446 + 8);
        if (v449 <= v451)
        {
          __break(0xC471u);
          JUMPOUT(0x1983CD44CLL);
        }
        v452 = *(_DWORD *)(v448 + 32);
        v453 = *(_QWORD *)(v361 + 8);
        if (v452 <= *(_DWORD *)(v453 + 40 * v451 + 32))
          goto LABEL_1009;
        v464 = v361 + 24;
        if (!*((_BYTE *)v444 + 8))
        {
          v465 = *(_DWORD *)(v447 + 8);
          if (v449 <= v465)
          {
            __break(0xC471u);
            JUMPOUT(0x1983CD4A4);
          }
          v464 = v453 + 40 * v465;
        }
        if (*(_DWORD *)(v464 + 36) >= *(_DWORD *)(v453 + 40 * v451 + 36))
        {
LABEL_1009:
          if (*((_BYTE *)v444 + 8))
          {
            if (!(_BYTE)v728)
            {
              LOBYTE(v728) = 1;
              if (!(_BYTE)v723)
                LOBYTE(v723) = 1;
            }
          }
          else
          {
            v454 = v727;
            if (((unint64_t)v727 & 0x8000000000000000) != 0)
              v455 = 63;
            else
              v455 = *(_QWORD *)(2 * (_QWORD)v727);
            v456 = *(unsigned int *)(v447 + 8);
            if (v455 <= v456)
            {
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v727, v456 + 1, 0);
              v446 = v702;
              v454 = v727;
            }
            if ((uint64_t)v454 >= 0)
              v457 = (WTF **)(2 * (_QWORD)v454 + 8);
            else
              v457 = &v727;
            v458 = (v456 >> 3) & 0x1FFFFFF8;
            v459 = *(uint64_t *)((char *)v457 + v458);
            *(WTF **)((char *)v457 + v458) = (WTF *)(v459 | (1 << v456));
            if ((v459 & (1 << v456)) == 0)
            {
              v460 = v722;
              if ((v722 & 0x8000000000000000) != 0)
                v461 = 63;
              else
                v461 = *(_QWORD *)(2 * v722);
              v462 = *(unsigned int *)(v447 + 8);
              if (v461 <= v462)
              {
                WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v722, v462 + 1, 0);
                v446 = v702;
                v460 = v722;
              }
              if (v460 >= 0)
                v463 = (unint64_t *)(2 * v460 + 8);
              else
                v463 = &v722;
              *(unint64_t *)((char *)v463 + ((v462 >> 3) & 0x1FFFFFF8)) |= 1 << v462;
            }
          }
        }
        v444 = (WTF *)((char *)v444 + 16);
      }
      while (v444 != v445);
      v444 = v730;
    }
    if (v732 != (_BYTE *)v444 && v444 != 0)
    {
      v730 = 0;
      LODWORD(v731) = 0;
      WTF::fastFree((unint64_t)v444, v441, v442, v443, v433, v434, v435, v436);
    }
    v467 = v361 + 24;
    if (!v440)
    {
      v468 = *(_DWORD *)(__srcb + 8);
      if (*(_DWORD *)(v361 + 20) <= v468)
      {
        __break(0xC471u);
        JUMPOUT(0x1983CD4CCLL);
      }
      v467 = *(_QWORD *)(v361 + 8) + 40 * v468;
    }
    v469 = *(unsigned int *)(v467 + 12);
    v437 = HIDWORD(v735);
    if ((_DWORD)v469)
    {
      v470 = *(__int128 **)v467;
      v471 = HIDWORD(v735) + v469;
      if (v471 > v735)
      {
        WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v734, (void *)(HIDWORD(v735) + v469), v442, v443, v433, v434, v435, v436);
        v437 = HIDWORD(v735);
        if (v471 < HIDWORD(v735))
        {
          __break(0xC471u);
          JUMPOUT(0x1983CD544);
        }
      }
      v472 = (_OWORD *)((char *)v734 + 16 * v437);
      v473 = 16 * v469;
      do
      {
        v474 = *v470++;
        *v472++ = v474;
        v473 -= 16;
      }
      while (v473);
      HIDWORD(v735) = v471;
      LODWORD(v437) = v471;
    }
  }
  while ((_DWORD)v437);
  v475 = v734;
  if (&v736 != (__int128 *)v734 && v734 != 0)
  {
    v734 = 0;
    LODWORD(v735) = 0;
    WTF::fastFree((unint64_t)v475, v441, v442, v443, v433, v434, v435, v436);
  }
  if (((unint64_t)v727 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * (_QWORD)v727, v441, v442, v443, v433, v434, v435, v436);
  v477 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
  JSC::DFG::Prefix::dump((uint64_t)v5, v477);
  WTF::PrintStream::printf(v477, "%s", "  Dominance Frontier: ");
  if ((_BYTE)v723)
  {
    v478 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v477 + 32))(v477);
    v479 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v478 + 32))(v478);
    WTF::StringImpl::utf8ForCharacters("#root", 5uLL, (uint64_t)&v734, v480);
    WTF::printExpectedCStringHelper(v479, "StringView", &v734);
    if ((_DWORD)v735 != -1)
      ((void (*)(WTF **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v735])(&v730, &v734);
    (*(void (**)(uint64_t))(*(_QWORD *)v478 + 40))(v478);
    v481 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v478 + 32))(v478);
    WTF::StringImpl::utf8ForCharacters(" ", 1uLL, (uint64_t)&v734, v482);
    WTF::printExpectedCStringHelper(v481, "StringView", &v734);
    if ((_DWORD)v735 != -1)
      ((void (*)(WTF **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v735])(&v730, &v734);
    (*(void (**)(uint64_t))(*(_QWORD *)v478 + 40))(v478);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v477 + 40))(v477);
  }
  v483 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v477 + 32))(v477);
  JSC::DFG::BlockSet::dump(&v722, v483);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v477 + 40))(v477);
  WTF::PrintStream::printf(v477, "%s", "\n");
  (*(void (**)(uint64_t))(*(_QWORD *)v705 + 40))(v705);
  if ((v722 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v722, v484, v485, v486, v487, v488, v489, v490);
  v722 = (unint64_t)v724;
  *(_QWORD *)&v724[0] = v702;
  BYTE8(v724[0]) = 0;
  v723 = 0x100000004;
  v725 = 0x8000000000000000;
  v726 = 0;
  v727 = (WTF *)v729;
  v728 = 0x100000004;
  v729[0] = v724[0];
  v708 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v491 = 1;
  do
  {
    v492 = (char *)v727 + 16 * v491;
    v494 = *((_QWORD *)v492 - 2);
    v493 = *((_QWORD *)v492 - 1);
    HIDWORD(v728) = v491 - 1;
    v734 = (WTF *)&v736;
    *(_QWORD *)&v736 = v494;
    *((_QWORD *)&v736 + 1) = v493;
    v735 = (WTF *)0x100000010;
    v495 = v493;
    LODWORD(v496) = 1;
    do
    {
      v497 = (char *)v734 + 16 * v496;
      v498 = *((_QWORD *)v497 - 2);
      v499 = *(v497 - 8);
      HIDWORD(v735) = v496 - 1;
      v711 = v498;
      __srcc = v499;
      WTF::SingleRootGraph<JSC::DFG::CFG>::successors((uint64_t)&v730, *(_QWORD *)v361, v498, v499, v487, v488, v489, v490);
      v503 = v730;
      v504 = (WTF *)((char *)v730 + 16 * HIDWORD(v731));
      if (!HIDWORD(v731))
        goto LABEL_722;
      do
      {
        v505 = *(_QWORD *)v503;
        v506 = *((_QWORD *)v503 + 1);
        v507 = v361 + 24;
        if (!(_BYTE)v506)
        {
          v508 = *(_DWORD *)(v505 + 8);
          if (*(_DWORD *)(v361 + 20) <= v508)
          {
            __break(0xC471u);
            JUMPOUT(0x1983CD3D8);
          }
          v507 = *(_QWORD *)(v361 + 8) + 40 * v508;
        }
        v509 = *(_DWORD *)(v507 + 32);
        v510 = v361 + 24;
        if (!v495)
        {
          v511 = *(_DWORD *)(v494 + 8);
          if (*(_DWORD *)(v361 + 20) <= v511)
          {
            __break(0xC471u);
            JUMPOUT(0x1983CD3E0);
          }
          v510 = *(_QWORD *)(v361 + 8) + 40 * v511;
        }
        if (v509 > *(_DWORD *)(v510 + 32))
        {
          v521 = v361 + 24;
          if (!*((_QWORD *)v503 + 1))
          {
            v522 = *(_DWORD *)(v505 + 8);
            if (*(_DWORD *)(v361 + 20) <= v522)
            {
              __break(0xC471u);
              JUMPOUT(0x1983CD42CLL);
            }
            v521 = *(_QWORD *)(v361 + 8) + 40 * v522;
          }
          v523 = *(_DWORD *)(v521 + 36);
          v524 = v361 + 24;
          if (!v495)
          {
            v525 = *(_DWORD *)(v494 + 8);
            if (*(_DWORD *)(v361 + 20) <= v525)
            {
              __break(0xC471u);
              JUMPOUT(0x1983CD434);
            }
            v524 = *(_QWORD *)(v361 + 8) + 40 * v525;
          }
          if (v523 < *(_DWORD *)(v524 + 36))
            goto LABEL_669;
        }
        *(_QWORD *)&v733 = *(_QWORD *)v503;
        *((_QWORD *)&v733 + 1) = v506;
        if ((_BYTE)v506)
        {
          if (v726)
            goto LABEL_669;
          v726 = 1;
LABEL_666:
          v518 = HIDWORD(v728);
          if (HIDWORD(v728) == (_DWORD)v728)
          {
            v526 = (__int128 *)WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v727, (void *)(HIDWORD(v728) + 1), (unint64_t)&v733, v502, v487, v488, v489, v490);
            v518 = HIDWORD(v728);
            v519 = v727;
            v520 = *v526;
          }
          else
          {
            v519 = v727;
            v520 = v733;
          }
          *((_OWORD *)v519 + v518) = v520;
          ++HIDWORD(v728);
          goto LABEL_669;
        }
        v512 = v725;
        if (v725 < 0)
          v513 = 63;
        else
          v513 = *(_QWORD *)(2 * v725);
        v514 = *(unsigned int *)(v505 + 8);
        if (v513 <= v514)
        {
          v527 = v514 + 64;
          v528 = ((v514 + 64) >> 3) & 0x3FFFFFF8;
          v529 = *(_QWORD *)(v708 + 752);
          if (!v529)
            goto LABEL_720;
          v530 = (v528 + 23) >> 4;
          if (v528 <= 0x198)
          {
            v531 = 23 * v530 + 7;
          }
          else
          {
            if (v528 > 0x2708)
              goto LABEL_720;
            v531 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v530 + 626);
            if (*(_DWORD *)(v529 + 8052) <= v531)
              goto LABEL_720;
          }
          v532 = v529 + 8 * v531;
          v533 = v532 + 8064;
          *(_BYTE *)(v532 + 8064) = 1;
          v534 = *(unsigned int *)(v532 + 8080);
          if ((_DWORD)v534)
          {
            *(_DWORD *)(v533 + 16) = v534 - *(_DWORD *)(v533 + 20);
            v535 = (uint64_t *)(*(_QWORD *)(v533 + 8) - v534);
            goto LABEL_692;
          }
          v536 = *(_QWORD *)(v533 + 40);
          v537 = *(_QWORD *)(v533 + 24);
          if (v536)
          {
LABEL_691:
            v538 = __clz(v536);
            *(_QWORD *)(v533 + 40) = v536 & ~(0x8000000000000000 >> v538);
            v535 = (uint64_t *)(v537 + 16 * v538);
LABEL_692:
            *(_BYTE *)v533 = 0;
          }
          else
          {
            if (*(_BYTE *)(v533 + 5) == 6)
            {
              v548 = *(unsigned int *)(v533 + 32);
              v549 = *(_DWORD *)(v533 + 36);
              if (v548 < v549)
              {
                *(_QWORD *)(v533 + 8 * v548 + 56) = 0;
                v550 = (unint64_t *)(v529 + 8128 + 8 * v531 + 8 * v548);
                v551 = v549 - 1 - v548;
                while (v551)
                {
                  v537 += 1024;
                  v553 = *v550++;
                  v552 = v553;
                  LODWORD(v548) = v548 + 1;
                  --v551;
                  if (v553)
                  {
                    v536 = __rbit64(v552);
                    *(_DWORD *)(v533 + 32) = v548;
                    *(_QWORD *)(v533 + 24) = v537;
                    goto LABEL_691;
                  }
                }
                *(_DWORD *)(v533 + 32) = v549;
              }
            }
            *(_BYTE *)v533 = 0;
LABEL_720:
            v535 = (uint64_t *)bmalloc_allocate_casual(v528 + 8, 1);
          }
          *v535 = v527 & 0x1FFFFFFC0;
          v539 = v527 >> 6;
          if (v725 < 0)
          {
            v535[1] = v725 & 0x7FFFFFFFFFFFFFFFLL;
            v542 = v535;
            bzero(v535 + 2, 8 * v539 - 8);
          }
          else
          {
            v540 = 2 * v725;
            v541 = *(_QWORD *)(2 * v725);
            v704 = v535;
            if (v541 <= v514)
            {
              v700 = (WTF *)(v541 + 63);
              v701 = v527 >> 6;
              v543 = (v541 + 63) >> 6;
              v544 = (const void *)(v540 + 8);
              v545 = v535 + 1;
              memcpy(v535 + 1, v544, 8 * v543);
              if (v701 < (unint64_t)v700 >> 6)
              {
                __break(0xC471u);
                JUMPOUT(0x1983CD1D0);
              }
              bzero(&v545[v543], 8 * (v701 - v543));
              v540 = 2 * v725;
            }
            else
            {
              memcpy(v535 + 1, (const void *)(v540 + 8), 8 * v539);
            }
            v546 = *(_QWORD *)(v708 + 752);
            if (v546)
            {
              if (v540 >> 43
                || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v540 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v540)) & 1) == 0)
              {
                if (v540 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v540 >> 24)
                {
                  v502 = 0;
                }
                else
                {
                  v502 = (*(_DWORD *)((char *)off_1ECF425F8
                                    + ((((v540 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                    + 24) >> (2 * ((BYTE3(v540) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                  if ((_DWORD)v502 == 1)
                    goto LABEL_702;
                }
                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v546, v540, 1, v502, v487, v488, v489, v490);
              }
              else
              {
LABEL_702:
                v547 = *(unsigned int *)(v546 + 8000);
                if (v547 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v546, v540, (os_unfair_lock_s *)5, v502, v487, v488, v489, v490);
                }
                else
                {
                  *(_QWORD *)(v546 + 8 * v547) = v540 | 0x5000000000000;
                  *(_DWORD *)(v546 + 8000) = v547 + 1;
                }
              }
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v540, (uint64_t)&bmalloc_heap_config, 1);
            }
            v542 = v704;
          }
          v512 = (unint64_t)v542 >> 1;
          v725 = (unint64_t)v542 >> 1;
        }
        v515 = (unint64_t *)(2 * v512 + 8);
        if (v512 < 0)
          v515 = (unint64_t *)&v725;
        v516 = (v514 >> 3) & 0x1FFFFFF8;
        v517 = *(unint64_t *)((char *)v515 + v516);
        *(unint64_t *)((char *)v515 + v516) = v517 | (1 << v514);
        if ((v517 & (1 << v514)) == 0)
          goto LABEL_666;
LABEL_669:
        v503 = (WTF *)((char *)v503 + 16);
      }
      while (v503 != v504);
      v503 = v730;
LABEL_722:
      if (v732 != (_BYTE *)v503 && v503 != 0)
      {
        v730 = 0;
        LODWORD(v731) = 0;
        WTF::fastFree((unint64_t)v503, v500, v501, v502, v487, v488, v489, v490);
      }
      v555 = v361 + 24;
      if (!__srcc)
      {
        v556 = *(_DWORD *)(v711 + 8);
        if (*(_DWORD *)(v361 + 20) <= v556)
        {
          __break(0xC471u);
          JUMPOUT(0x1983CD43CLL);
        }
        v555 = *(_QWORD *)(v361 + 8) + 40 * v556;
      }
      v557 = *(unsigned int *)(v555 + 12);
      v496 = HIDWORD(v735);
      if (!(_DWORD)v557)
        continue;
      v558 = *(__int128 **)v555;
      v559 = HIDWORD(v735) + v557;
      v560 = v734;
      if (v559 <= v735)
        goto LABEL_757;
      v561 = v735 + ((unint64_t)v735 >> 2);
      if (v561 >= 0x10)
        v562 = v561 + 1;
      else
        v562 = 16;
      if (v562 <= v559)
        v563 = HIDWORD(v735) + v557;
      else
        v563 = v562;
      if (v563 < 0x11)
      {
        v570 = (WTF *)&v736;
        v734 = (WTF *)&v736;
        LODWORD(v735) = 16;
        if (HIDWORD(v735))
          goto LABEL_752;
        goto LABEL_754;
      }
      if (v563 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x1983CD45CLL);
      }
      v564 = *(_QWORD *)(v708 + 752);
      if (!v564)
        goto LABEL_776;
      v565 = (16 * (v563 & 0x3FFFFFFFFLL)) | 0xF;
      if (v565 <= 0x1AF)
      {
        v566 = 23 * v563 + 7;
      }
      else
      {
        if (v565 >> 5 > 0x138)
          goto LABEL_776;
        v566 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v563 + 626);
        if (*(_DWORD *)(v564 + 8052) <= v566)
          goto LABEL_776;
      }
      v567 = v564 + 8 * v566;
      v568 = v567 + 8064;
      *(_BYTE *)(v567 + 8064) = 1;
      v569 = *(unsigned int *)(v567 + 8080);
      if ((_DWORD)v569)
      {
        *(_DWORD *)(v568 + 16) = v569 - *(_DWORD *)(v568 + 20);
        v570 = (WTF *)(*(_QWORD *)(v568 + 8) - v569);
        goto LABEL_750;
      }
      v571 = *(_QWORD *)(v568 + 40);
      v572 = *(_QWORD *)(v568 + 24);
      if (!v571)
      {
        if (*(_BYTE *)(v568 + 5) == 6)
        {
          v580 = *(unsigned int *)(v568 + 32);
          v581 = *(_DWORD *)(v568 + 36);
          if (v580 < v581)
          {
            *(_QWORD *)(v568 + 8 * v580 + 56) = 0;
            v582 = (unint64_t *)(v564 + 8128 + 8 * v566 + 8 * v580);
            v583 = v581 - 1 - v580;
            while (v583)
            {
              v572 += 1024;
              v585 = *v582++;
              v584 = v585;
              LODWORD(v580) = v580 + 1;
              --v583;
              if (v585)
              {
                v571 = __rbit64(v584);
                *(_DWORD *)(v568 + 32) = v580;
                *(_QWORD *)(v568 + 24) = v572;
                goto LABEL_749;
              }
            }
            *(_DWORD *)(v568 + 32) = v581;
          }
        }
        *(_BYTE *)v568 = 0;
LABEL_776:
        v712 = v563;
        __srcd = v560;
        v570 = (WTF *)bmalloc_allocate_casual(16 * v563, 1);
        LODWORD(v563) = v712;
        v560 = __srcd;
        goto LABEL_751;
      }
LABEL_749:
      v573 = __clz(v571);
      *(_QWORD *)(v568 + 40) = v571 & ~(0x8000000000000000 >> v573);
      v570 = (WTF *)(v572 + 16 * v573);
LABEL_750:
      *(_BYTE *)v568 = 0;
LABEL_751:
      LODWORD(v735) = v563;
      v734 = v570;
      if ((_DWORD)v496)
      {
LABEL_752:
        v574 = 16 * v496;
        v575 = v560;
        do
        {
          v576 = *(_OWORD *)v575;
          v575 = (WTF *)((char *)v575 + 16);
          *(_OWORD *)v570 = v576;
          v570 = (WTF *)((char *)v570 + 16);
          v574 -= 16;
        }
        while (v574);
      }
LABEL_754:
      if (&v736 != (__int128 *)v560 && v560)
      {
        if (v734 == v560)
        {
          v734 = 0;
          LODWORD(v735) = 0;
        }
        WTF::fastFree((unint64_t)v560, v500, v501, v502, v487, v488, v489, v490);
      }
      v496 = HIDWORD(v735);
      if (v559 < HIDWORD(v735))
      {
        __break(0xC471u);
        JUMPOUT(0x1983CD464);
      }
      v560 = v734;
LABEL_757:
      v577 = 16 * v557;
      v578 = (_OWORD *)((char *)v560 + 16 * v496);
      do
      {
        v579 = *v558++;
        *v578++ = v579;
        v577 -= 16;
      }
      while (v577);
      HIDWORD(v735) = v559;
      LODWORD(v496) = v559;
    }
    while ((_DWORD)v496);
    v586 = v734;
    if (&v736 != (__int128 *)v734 && v734 != 0)
    {
      v734 = 0;
      LODWORD(v735) = 0;
      WTF::fastFree((unint64_t)v586, v500, v501, v502, v487, v488, v489, v490);
    }
    v491 = HIDWORD(v728);
  }
  while (HIDWORD(v728));
  v588 = v727;
  if (v729 != (_OWORD *)v727 && v727)
  {
    v727 = 0;
    LODWORD(v728) = 0;
    WTF::fastFree((unint64_t)v588, v500, v501, v502, v487, v488, v489, v490);
  }
  v589 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
  JSC::DFG::Prefix::dump((uint64_t)v696, v589);
  WTF::PrintStream::printf(v589, "%s", "  Iterated Dominance Frontier: ");
  if (v726)
  {
    v590 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v589 + 32))(v589);
    v591 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v590 + 32))(v590);
    WTF::StringImpl::utf8ForCharacters("#root", 5uLL, (uint64_t)&v734, v592);
    WTF::printExpectedCStringHelper(v591, "StringView", &v734);
    if ((_DWORD)v735 != -1)
      ((void (*)(WTF **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v735])(&v730, &v734);
    (*(void (**)(uint64_t))(*(_QWORD *)v590 + 40))(v590);
    v593 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v590 + 32))(v590);
    WTF::StringImpl::utf8ForCharacters(" ", 1uLL, (uint64_t)&v734, v594);
    WTF::printExpectedCStringHelper(v593, "StringView", &v734);
    if ((_DWORD)v735 != -1)
      ((void (*)(WTF **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v735])(&v730, &v734);
    (*(void (**)(uint64_t))(*(_QWORD *)v590 + 40))(v590);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v589 + 40))(v589);
  }
  v595 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v589 + 32))(v589);
  JSC::DFG::BlockSet::dump((unint64_t *)&v725, v595);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v589 + 40))(v589);
  WTF::PrintStream::printf(v589, "%s", "\n");
  (*(void (**)(uint64_t))(*(_QWORD *)v705 + 40))(v705);
  if ((v725 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v725, v44, v45, v46, v47, v48, v49, v50);
  v254 = v722;
  if (v724 != (_OWORD *)v722 && v722)
  {
    v722 = 0;
    LODWORD(v723) = 0;
    goto LABEL_332;
  }
LABEL_333:
  v53 = v702;
  v51 = a1;
LABEL_334:
  v255 = *(_QWORD *)(v51 + 832);
  v256 = v705;
  if (v255)
  {
    v257 = *(unsigned int *)(v51 + 60);
    if (!(_DWORD)v257)
      goto LABEL_357;
    v258 = 0;
    v259 = *(_QWORD *)(v51 + 48);
    while (!*(_QWORD *)(v259 + 8 * v258))
    {
      if (v257 == ++v258)
        goto LABEL_357;
    }
    if ((_DWORD)v257 == (_DWORD)v258)
    {
LABEL_357:
      v730 = (WTF *)0x8000000000000000;
      LOBYTE(v731) = 0;
      if (v53)
      {
        v266 = 0;
        v267 = 0;
        do
        {
          if (v267)
          {
            if (!(_BYTE)v731)
              LOBYTE(v731) = 1;
          }
          else
          {
            v268 = v730;
            if (((unint64_t)v730 & 0x8000000000000000) != 0)
              v269 = 63;
            else
              v269 = *(_QWORD *)(2 * (_QWORD)v730);
            v270 = *(unsigned int *)(v53 + 8);
            if (v269 <= v270)
            {
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v730, v270 + 1, 0);
              v268 = v730;
            }
            if ((uint64_t)v268 >= 0)
              v271 = (WTF **)(2 * (_QWORD)v268 + 8);
            else
              v271 = &v730;
            *(WTF **)((char *)v271 + ((v270 >> 3) & 0x1FFFFFF8)) = (WTF *)(*(unint64_t *)((char *)v271
                                                                                               + ((v270 >> 3) & 0x1FFFFFF8)) | (1 << v270));
          }
          v272 = v255 + 24;
          if (!v266)
          {
            v273 = *(_DWORD *)(v53 + 8);
            if (*(_DWORD *)(v255 + 20) <= v273)
            {
              __break(0xC471u);
              JUMPOUT(0x1983CD49CLL);
            }
            v272 = *(_QWORD *)(v255 + 8) + 40 * v273;
          }
          v53 = *(_QWORD *)(v272 + 16);
          v267 = *(unsigned __int8 *)(v272 + 24);
          v266 = v267;
        }
        while (v53 || (_DWORD)v267);
      }
      v274 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
      JSC::DFG::Prefix::dump((uint64_t)v696, v274);
      WTF::PrintStream::printf(v274, "%s", "  Backwards dominates by: ");
      if ((_BYTE)v731)
      {
        v275 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v274 + 32))(v274);
        v276 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v275 + 32))(v275);
        WTF::StringImpl::utf8ForCharacters("#root", 5uLL, (uint64_t)&v734, v277);
        WTF::printExpectedCStringHelper(v276, "StringView", &v734);
        if ((_DWORD)v735 != -1)
          ((void (*)(WTF **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v735])(&v727, &v734);
        (*(void (**)(uint64_t))(*(_QWORD *)v275 + 40))(v275);
        v278 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v275 + 32))(v275);
        WTF::StringImpl::utf8ForCharacters(" ", 1uLL, (uint64_t)&v734, v279);
        WTF::printExpectedCStringHelper(v278, "StringView", &v734);
        if ((_DWORD)v735 != -1)
          ((void (*)(WTF **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v735])(&v727, &v734);
        (*(void (**)(uint64_t))(*(_QWORD *)v275 + 40))(v275);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v274 + 40))(v274);
      }
      v280 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v274 + 32))(v274);
      JSC::DFG::BlockSet::dump((unint64_t *)&v730, v280);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v274 + 40))(v274);
      WTF::PrintStream::printf(v274, "%s", "\n");
      (*(void (**)(uint64_t))(*(_QWORD *)v705 + 40))(v705);
      if (((unint64_t)v730 & 0x8000000000000000) == 0)
        WTF::fastFree(2 * (_QWORD)v730, v281, v282, v283, v284, v285, v286, v287);
      v288 = *(_QWORD *)(a1 + 832);
      v730 = (WTF *)0x8000000000000000;
      LOBYTE(v731) = 0;
      v734 = (WTF *)&v736;
      v736 = v702;
      v735 = (WTF *)0x100000010;
      LODWORD(v289) = 1;
      do
      {
        v290 = (char *)v734 + 16 * v289;
        v291 = *((_QWORD *)v290 - 2);
        v292 = *(v290 - 8);
        LODWORD(v289) = v289 - 1;
        HIDWORD(v735) = v289;
        if (v292)
        {
          if (!(_BYTE)v731)
            LOBYTE(v731) = 1;
          v298 = v288 + 24;
        }
        else
        {
          v293 = v730;
          if (((unint64_t)v730 & 0x8000000000000000) != 0)
            v294 = 63;
          else
            v294 = *(_QWORD *)(2 * (_QWORD)v730);
          v295 = *(unsigned int *)(v291 + 8);
          v296 = v295;
          if (v294 <= v295)
          {
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v730, v295 + 1, 0);
            v293 = v730;
            v296 = *(unsigned int *)(v291 + 8);
          }
          if ((uint64_t)v293 >= 0)
            v297 = (WTF **)(2 * (_QWORD)v293 + 8);
          else
            v297 = &v730;
          *(WTF **)((char *)v297 + ((v295 >> 3) & 0x1FFFFFF8)) = (WTF *)(*(unint64_t *)((char *)v297
                                                                                             + ((v295 >> 3) & 0x1FFFFFF8)) | (1 << v295));
          if (*(unsigned int *)(v288 + 20) <= v296)
          {
            __break(0xC471u);
            JUMPOUT(0x1983CD48CLL);
          }
          v298 = *(_QWORD *)(v288 + 8) + 40 * v296;
          LODWORD(v289) = HIDWORD(v735);
        }
        v299 = *(unsigned int *)(v298 + 12);
        if ((_DWORD)v299)
        {
          v300 = *(__int128 **)v298;
          v301 = v299 + v289;
          if (v301 <= v735)
          {
            v289 = v289;
          }
          else
          {
            WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v734, (void *)(v299 + v289), v282, v283, v284, v285, v286, v287);
            v289 = HIDWORD(v735);
            if (v301 < HIDWORD(v735))
            {
              __break(0xC471u);
              JUMPOUT(0x1983CD4ECLL);
            }
          }
          v302 = (_OWORD *)((char *)v734 + 16 * v289);
          v303 = 16 * v299;
          do
          {
            v304 = *v300++;
            *v302++ = v304;
            v303 -= 16;
          }
          while (v303);
          HIDWORD(v735) = v301;
          LODWORD(v289) = v301;
        }
      }
      while ((_DWORD)v289);
      v305 = v734;
      if (&v736 != (__int128 *)v734 && v734 != 0)
      {
        v734 = 0;
        LODWORD(v735) = 0;
        WTF::fastFree((unint64_t)v305, v281, v282, v283, v284, v285, v286, v287);
      }
      v256 = v705;
      v307 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
      JSC::DFG::Prefix::dump((uint64_t)v696, v307);
      WTF::PrintStream::printf(v307, "%s", "  Backwards dominates: ");
      if ((_BYTE)v731)
      {
        v308 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v307 + 32))(v307);
        v309 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v308 + 32))(v308);
        WTF::StringImpl::utf8ForCharacters("#root", 5uLL, (uint64_t)&v734, v310);
        WTF::printExpectedCStringHelper(v309, "StringView", &v734);
        if ((_DWORD)v735 != -1)
          ((void (*)(WTF **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v735])(&v727, &v734);
        (*(void (**)(uint64_t))(*(_QWORD *)v308 + 40))(v308);
        v311 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v308 + 32))(v308);
        WTF::StringImpl::utf8ForCharacters(" ", 1uLL, (uint64_t)&v734, v312);
        WTF::printExpectedCStringHelper(v311, "StringView", &v734);
        if ((_DWORD)v735 != -1)
          ((void (*)(WTF **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v735])(&v727, &v734);
        (*(void (**)(uint64_t))(*(_QWORD *)v308 + 40))(v308);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v307 + 40))(v307);
      }
      v313 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v307 + 32))(v307);
      JSC::DFG::BlockSet::dump((unint64_t *)&v730, v313);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v307 + 40))(v307);
      WTF::PrintStream::printf(v307, "%s", "\n");
      (*(void (**)(uint64_t))(*(_QWORD *)v705 + 40))(v705);
      if (((unint64_t)v730 & 0x8000000000000000) == 0)
        WTF::fastFree(2 * (_QWORD)v730, v44, v45, v46, v47, v48, v49, v50);
      v53 = v702;
      v51 = a1;
    }
    else
    {
      v258 = v258;
      v256 = v705;
      while (1)
      {
        if (v257 <= v258)
        {
          __break(0xC471u);
          JUMPOUT(0x1983CD52CLL);
        }
        v260 = *(_QWORD *)(v259 + 8 * v258);
        v261 = *(unsigned int *)(v260 + 220);
        if (!(_DWORD)v261)
          break;
        v262 = *(_QWORD *)(v260 + 208);
        v263 = 8 * v261;
        v264 = v262 - 8;
        while (1)
        {
          v265 = *(unsigned __int16 *)(*(_QWORD *)(v264 + v263) + 18);
          if ((v265 - 364) < 0xC)
            break;
          if ((v265 - 28) < 2 || (v265 - 23) <= 2)
          {
            v263 -= 8;
            if (v263)
              continue;
          }
          goto LABEL_424;
        }
        if (v257 > ++v258)
        {
          while (!*(_QWORD *)(v259 + 8 * v258))
          {
            if (v257 == ++v258)
              goto LABEL_357;
          }
          v258 = v258;
        }
        if (v257 == v258)
          goto LABEL_357;
      }
    }
  }
LABEL_424:
  if (*(_QWORD *)(v51 + 840))
  {
    v314 = *(unsigned int *)(v51 + 60);
    if (!(_DWORD)v314)
      goto LABEL_447;
    v315 = 0;
    v316 = *(_QWORD *)(v51 + 48);
    while (!*(_QWORD *)(v316 + 8 * v315))
    {
      if (v314 == ++v315)
        goto LABEL_447;
    }
    if ((_DWORD)v314 == (_DWORD)v315)
    {
LABEL_447:
      v323 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v256 + 32))(v256);
      JSC::DFG::Prefix::dump((uint64_t)v696, v323);
      WTF::PrintStream::printf(v323, "%s", "  Control equivalent to:");
      (*(void (**)(uint64_t))(*(_QWORD *)v256 + 40))(v256);
      v324 = a1;
      v325 = v702;
      v326 = *(unsigned int *)(a1 + 60);
      if ((_DWORD)v326)
      {
        v327 = 0;
        while (!*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v327))
        {
          if (v326 == ++v327)
            goto LABEL_478;
        }
        if ((_DWORD)v326 != (_DWORD)v327)
        {
          v328 = v327;
          v329 = *(unsigned int *)(a1 + 60);
          do
          {
            if (v329 <= v328)
            {
              __break(0xC471u);
              JUMPOUT(0x1983CD4BCLL);
            }
            v330 = *(_QWORD *)(*(_QWORD *)(v324 + 48) + 8 * v328);
            if (v330 == v325)
              goto LABEL_471;
            v331 = *(_QWORD **)(v324 + 840);
            v332 = *(unsigned int *)(v330 + 8);
            v333 = *(_DWORD *)(*v331 + 20);
            if (v333 <= v332)
            {
              __break(0xC471u);
              JUMPOUT(0x1983CD4DCLL);
            }
            v334 = *(unsigned int *)(v325 + 8);
            if (v333 <= v334)
            {
              __break(0xC471u);
              JUMPOUT(0x1983CD4E4);
            }
            v335 = *(_QWORD *)(*v331 + 8);
            v336 = v335 + 32 * v332;
            v337 = *(_DWORD *)(v336 + 24);
            v338 = v335 + 32 * v334;
            v339 = *(_DWORD *)(v338 + 24);
            if (v337 > v339 && *(_DWORD *)(v336 + 28) < *(_DWORD *)(v338 + 28))
            {
              v340 = v331[1];
              v341 = *(_DWORD *)(v340 + 20);
              if (v341 <= v334)
              {
                __break(0xC471u);
                JUMPOUT(0x1983CD4F4);
              }
              if (v341 <= v332)
              {
                __break(0xC471u);
                JUMPOUT(0x1983CD4FCLL);
              }
              v342 = *(_QWORD *)(v340 + 8);
              if (*(_DWORD *)(v342 + 40 * v334 + 32) > *(_DWORD *)(v342 + 40 * v332 + 32)
                && *(_DWORD *)(v342 + 40 * v334 + 36) < *(_DWORD *)(v342 + 40 * v332 + 36))
              {
                goto LABEL_471;
              }
            }
            if (v339 > v337 && *(_DWORD *)(v335 + 32 * v334 + 28) < *(_DWORD *)(v335 + 32 * v332 + 28))
            {
              v343 = v331[1];
              v344 = *(_DWORD *)(v343 + 20);
              if (v344 <= v332)
              {
                __break(0xC471u);
                JUMPOUT(0x1983CD504);
              }
              if (v344 <= v334)
              {
                __break(0xC471u);
                JUMPOUT(0x1983CD50CLL);
              }
              v345 = *(_QWORD *)(v343 + 8);
              if (*(_DWORD *)(v345 + 40 * v332 + 32) > *(_DWORD *)(v345 + 40 * v334 + 32)
                && *(_DWORD *)(v345 + 40 * v332 + 36) < *(_DWORD *)(v345 + 40 * v334 + 36))
              {
LABEL_471:
                v346 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
                WTF::PrintStream::printf(v346, "%s", " ");
                v347 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v346 + 32))(v346);
                WTF::PrintStream::printf(v347, "%s", "#");
                WTF::PrintStream::printf(v347, "%u", *(_DWORD *)(v330 + 8));
                (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v346 + 40))(v346);
                (*(void (**)(uint64_t))(*(_QWORD *)v705 + 40))(v705);
                v324 = a1;
                v325 = v702;
                v329 = *(unsigned int *)(a1 + 60);
              }
            }
            if (v329 > ++v328)
            {
              while (!*(_QWORD *)(*(_QWORD *)(v324 + 48) + 8 * v328))
              {
                if (v329 == ++v328)
                {
                  v328 = v329;
                  goto LABEL_477;
                }
              }
              v328 = v328;
            }
LABEL_477:
            ;
          }
          while (v326 != v328);
        }
      }
LABEL_478:
      v256 = v705;
      v348 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
      WTF::PrintStream::printf(v348, "%s", "\n");
      (*(void (**)(uint64_t))(*(_QWORD *)v256 + 40))(v256);
      v51 = a1;
      v53 = v702;
    }
    else
    {
      v315 = v315;
      while (1)
      {
        if (v314 <= v315)
        {
          __break(0xC471u);
          JUMPOUT(0x1983CD534);
        }
        v317 = *(_QWORD *)(v316 + 8 * v315);
        v318 = *(unsigned int *)(v317 + 220);
        if (!(_DWORD)v318)
          break;
        v319 = *(_QWORD *)(v317 + 208);
        v320 = 8 * v318;
        v321 = v319 - 8;
        while (1)
        {
          v322 = *(unsigned __int16 *)(*(_QWORD *)(v321 + v320) + 18);
          if ((v322 - 364) < 0xC)
            break;
          if ((v322 - 28) < 2 || (v322 - 23) <= 2)
          {
            v320 -= 8;
            if (v320)
              continue;
          }
          goto LABEL_479;
        }
        if (v314 > ++v315)
        {
          while (!*(_QWORD *)(v316 + 8 * v315))
          {
            if (v314 == ++v315)
              goto LABEL_447;
          }
          v315 = v315;
        }
        if (v314 == v315)
          goto LABEL_447;
      }
    }
  }
LABEL_479:
  v349 = *(_QWORD *)(v51 + 800);
  if (v349)
  {
    v350 = *(unsigned int *)(v53 + 8);
    v351 = *(_DWORD *)(v349 + 324);
    if (v351 <= v350)
    {
      __break(0xC471u);
      JUMPOUT(0x1983CD56CLL);
    }
    v352 = *(_DWORD *)(*(_QWORD *)(v349 + 312) + 8 * v350);
    if (v352 != -1)
    {
      if (*(_DWORD *)(v349 + 20) <= v352)
      {
        __break(0xC471u);
        JUMPOUT(0x1983CD57CLL);
      }
      v353 = *(_QWORD *)(v349 + 8);
      if (v353 && *(_QWORD *)(v353 + 72 * v352 + 8) == v53)
      {
        v619 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
        JSC::DFG::Prefix::dump((uint64_t)v696, v619);
        WTF::PrintStream::printf(v619, "%s", "  Loop header, contains:");
        (*(void (**)(uint64_t))(*(_QWORD *)v705 + 40))(v705);
        v734 = 0;
        v735 = 0;
        v620 = v353 + 72 * v352;
        v622 = *(_DWORD *)(v620 + 28);
        v621 = (unsigned int *)(v620 + 28);
        if (v622)
        {
          v623 = 0;
          v624 = 0;
          v625 = 0;
          v626 = (_QWORD *)(v353 + 72 * v352 + 16);
          v627 = v705;
          do
          {
            v628 = (_DWORD *)(*(_QWORD *)(*v626 + 8 * v625) + 8);
            if (v624 == (_DWORD)v735)
            {
              v628 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v734, v624 + 1, (unint64_t)v628);
              v623 = v734;
              v629 = (_DWORD *)((char *)v734 + 4 * HIDWORD(v735));
            }
            else
            {
              v629 = (_DWORD *)((char *)v623 + 4 * v624);
            }
            *v629 = *v628;
            v624 = ++HIDWORD(v735);
            ++v625;
          }
          while (v625 < *v621);
        }
        else
        {
          v627 = v705;
        }
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        if (HIDWORD(v735))
        {
          v683 = 0;
          do
          {
            v684 = v734;
            v685 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
            WTF::PrintStream::printf(v685, "%s", " #");
            v686 = *((_DWORD *)v684 + v683);
            v627 = v705;
            WTF::PrintStream::printf(v685, "%u", v686);
            (*(void (**)(uint64_t))(*(_QWORD *)v627 + 40))(v627);
            ++v683;
          }
          while (v683 < HIDWORD(v735));
        }
        v687 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v627 + 32))(v627);
        WTF::PrintStream::printf(v687, "%s", "\n");
        (*(void (**)(uint64_t))(*(_QWORD *)v627 + 40))(v627);
        v688 = v734;
        if (v734)
        {
          v734 = 0;
          LODWORD(v735) = 0;
          WTF::fastFree((unint64_t)v688, v44, v45, v46, v47, v48, v49, v50);
        }
        v349 = *(_QWORD *)(a1 + 800);
        LODWORD(v350) = *(_DWORD *)(v702 + 8);
        v351 = *(_DWORD *)(v349 + 324);
      }
    }
    v734 = 0;
    v735 = 0;
    if (v351 <= v350)
    {
      __break(0xC471u);
      JUMPOUT(0x1983CD574);
    }
    v354 = *(_DWORD *)(*(_QWORD *)(v349 + 312) + 8 * v350);
    v256 = v705;
    if (v354 != -1)
    {
      if (*(_DWORD *)(v349 + 20) <= v354)
      {
        __break(0xC471u);
        JUMPOUT(0x1983CD584);
      }
      v355 = *(_QWORD *)(v349 + 8);
      v356 = (WTF *)(v355 + 72 * v354);
      v730 = v356;
      if (v355)
      {
        v357 = 0;
        do
        {
          if (v357 == (_DWORD)v735)
          {
            v360 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v734, v357 + 1, (unint64_t)&v730);
            v357 = HIDWORD(v735);
            *((_QWORD *)v734 + HIDWORD(v735)) = *v360;
          }
          else
          {
            *((_QWORD *)v734 + v357) = v356;
          }
          HIDWORD(v735) = ++v357;
          v358 = *((_DWORD *)v730 + 16);
          if (v358 == -1)
            break;
          if (*(_DWORD *)(v349 + 20) <= v358)
          {
            __break(0xC471u);
            JUMPOUT(0x1983CD59CLL);
          }
          v359 = *(_QWORD *)(v349 + 8);
          v356 = (WTF *)(v359 + 72 * v358);
          v730 = v356;
        }
        while (v359);
        if (v357)
        {
          v596 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
          JSC::DFG::Prefix::dump((uint64_t)v696, v596);
          WTF::PrintStream::printf(v596, "%s", "  Containing loop headers:");
          (*(void (**)(uint64_t))(*(_QWORD *)v705 + 40))(v705);
          if (HIDWORD(v735))
          {
            v597 = 0;
            do
            {
              v598 = *(_QWORD *)(*((_QWORD *)v734 + v597) + 8);
              v599 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
              WTF::PrintStream::printf(v599, "%s", " ");
              v600 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v599 + 32))(v599);
              WTF::PrintStream::printf(v600, "%s", "#");
              WTF::PrintStream::printf(v600, "%u", *(_DWORD *)(v598 + 8));
              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v599 + 40))(v599);
              (*(void (**)(uint64_t))(*(_QWORD *)v705 + 40))(v705);
              ++v597;
            }
            while (v597 < HIDWORD(v735));
          }
          v601 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
          WTF::PrintStream::printf(v601, "%s", "\n");
          (*(void (**)(uint64_t))(*(_QWORD *)v705 + 40))(v705);
        }
      }
    }
    v602 = v734;
    if (v734)
    {
      v734 = 0;
      LODWORD(v735) = 0;
      goto LABEL_828;
    }
    goto LABEL_829;
  }
  v370 = *(_QWORD *)(v51 + 792);
  if (v370)
  {
    v371 = *(unsigned int *)(v53 + 8);
    v372 = *(_DWORD *)(v370 + 484);
    if (v372 <= v371)
    {
      __break(0xC471u);
      JUMPOUT(0x1983CD58CLL);
    }
    v373 = *(_DWORD *)(*(_QWORD *)(v370 + 472) + 8 * v371);
    if (v373 != -1)
    {
      if (*(_DWORD *)(v370 + 20) <= v373)
      {
        __break(0xC471u);
        JUMPOUT(0x1983CD5ACLL);
      }
      v603 = *(_QWORD *)(v370 + 8);
      if (v603)
      {
        v604 = v603 + 112 * v373;
        v605 = *(_QWORD *)(v604 + 8);
        v606 = *(unsigned __int8 *)(v604 + 16);
        if (v605 == v53 && v606 == 0)
        {
          v608 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
          JSC::DFG::Prefix::dump((uint64_t)v696, v608);
          WTF::PrintStream::printf(v608, "%s", "  Loop header, contains:");
          (*(void (**)(uint64_t))(*(_QWORD *)v705 + 40))(v705);
          v734 = 0;
          v735 = 0;
          v609 = v603 + 112 * v373;
          v611 = *(_DWORD *)(v609 + 36);
          v610 = (unsigned int *)(v609 + 36);
          if (v611)
          {
            v612 = 0;
            v613 = 0;
            v614 = 0;
            v615 = 0;
            v616 = (_QWORD *)(v603 + 112 * v373 + 24);
            do
            {
              v617 = (_DWORD *)(*(_QWORD *)(*v616 + v612) + 8);
              if (v614 == (_DWORD)v735)
              {
                v617 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v734, v614 + 1, (unint64_t)v617);
                v613 = v734;
                v618 = (_DWORD *)((char *)v734 + 4 * HIDWORD(v735));
              }
              else
              {
                v618 = (_DWORD *)((char *)v613 + 4 * v614);
              }
              *v618 = *v617;
              v614 = ++HIDWORD(v735);
              ++v615;
              v612 += 16;
            }
            while (v615 < *v610);
          }
          std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
          v689 = v705;
          if (HIDWORD(v735))
          {
            v690 = 0;
            do
            {
              v691 = v734;
              v692 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
              WTF::PrintStream::printf(v692, "%s", " #");
              v693 = *((_DWORD *)v691 + v690);
              v689 = v705;
              WTF::PrintStream::printf(v692, "%u", v693);
              (*(void (**)(uint64_t))(*(_QWORD *)v689 + 40))(v689);
              ++v690;
            }
            while (v690 < HIDWORD(v735));
          }
          v694 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v689 + 32))(v689);
          WTF::PrintStream::printf(v694, "%s", "\n");
          (*(void (**)(uint64_t))(*(_QWORD *)v689 + 40))(v689);
          v695 = v734;
          if (v734)
          {
            v734 = 0;
            LODWORD(v735) = 0;
            WTF::fastFree((unint64_t)v695, v44, v45, v46, v47, v48, v49, v50);
          }
          v370 = *(_QWORD *)(a1 + 792);
          v53 = v702;
          LODWORD(v371) = *(_DWORD *)(v702 + 8);
          v372 = *(_DWORD *)(v370 + 484);
        }
      }
    }
    v734 = 0;
    v735 = 0;
    if (v372 <= v371)
    {
      __break(0xC471u);
      JUMPOUT(0x1983CD594);
    }
    v374 = *(_DWORD *)(*(_QWORD *)(v370 + 472) + 8 * v371);
    v256 = v705;
    if (v374 != -1)
    {
      if (*(_DWORD *)(v370 + 20) <= v374)
      {
        __break(0xC471u);
        JUMPOUT(0x1983CD5A4);
      }
      v375 = *(_QWORD *)(v370 + 8);
      v376 = (WTF *)(v375 + 112 * v374);
      v730 = v376;
      if (v375)
      {
        v377 = 0;
        v378 = 0;
        do
        {
          if (v378 == (_DWORD)v735)
          {
            v379 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v734, v378 + 1, (unint64_t)&v730);
            v378 = HIDWORD(v735);
            v377 = v734;
            v53 = v702;
            *((_QWORD *)v734 + HIDWORD(v735)) = *(_QWORD *)v379;
          }
          else
          {
            *((_QWORD *)v377 + v378) = v376;
          }
          HIDWORD(v735) = ++v378;
          v380 = *((_DWORD *)v730 + 26);
          if (v380 == -1)
            break;
          if (*(_DWORD *)(v370 + 20) <= v380)
          {
            __break(0xC471u);
            JUMPOUT(0x1983CD5B4);
          }
          v381 = *(_QWORD *)(v370 + 8);
          v376 = (WTF *)(v381 + 112 * v380);
          v730 = v376;
        }
        while (v381);
        if (v378)
        {
          v382 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
          JSC::DFG::Prefix::dump((uint64_t)v696, v382);
          WTF::PrintStream::printf(v382, "%s", "  Containing loop headers:");
          (*(void (**)(uint64_t))(*(_QWORD *)v705 + 40))(v705);
          v383 = 0;
          v384 = v734;
          v385 = 8 * v378;
          do
          {
            v386 = *(_QWORD *)(*(_QWORD *)((char *)v384 + v383) + 8);
            v387 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
            WTF::PrintStream::printf(v387, "%s", " ");
            v388 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v387 + 32))(v387);
            WTF::PrintStream::printf(v388, "%s", "#");
            v389 = *(_DWORD *)(v386 + 8);
            v256 = v705;
            WTF::PrintStream::printf(v388, "%u", v389);
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v387 + 40))(v387);
            (*(void (**)(uint64_t))(*(_QWORD *)v256 + 40))(v256);
            v383 += 8;
          }
          while (v385 != v383);
          v390 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
          WTF::PrintStream::printf(v390, "%s", "\n");
          (*(void (**)(uint64_t))(*(_QWORD *)v705 + 40))(v705);
LABEL_827:
          v602 = v384;
LABEL_828:
          WTF::fastFree((unint64_t)v602, v44, v45, v46, v47, v48, v49, v50);
LABEL_829:
          v53 = v702;
        }
        else
        {
          v384 = v734;
          if (v734)
            goto LABEL_827;
        }
      }
    }
  }
  if (*(_DWORD *)(v53 + 36))
  {
    v630 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v256 + 32))(v256);
    JSC::DFG::Prefix::dump((uint64_t)v696, v630);
    WTF::PrintStream::printf(v630, "%s", "  Phi Nodes:");
    (*(void (**)(uint64_t))(*(_QWORD *)v256 + 40))(v256);
    v631 = v702;
    v632 = *(unsigned int *)(v702 + 36);
    if ((_DWORD)v632)
    {
      v633 = 0;
      while (1)
      {
        v634 = *(_QWORD *)(*(_QWORD *)(v631 + 24) + 8 * v633);
        v635 = *(_DWORD *)(v634 + 52);
        if (v635 | a5)
          break;
        ++v633;
LABEL_861:
        if (v633 >= v632)
          goto LABEL_864;
      }
      v636 = *(_DWORD *)(v634 + 20);
      v637 = *(_QWORD **)(v634 + 72);
      v638 = v637;
      do
      {
        v639 = v638;
        v638 = (_QWORD *)*v638;
      }
      while (v638);
      if (v639 != v637)
        *v637 = v639;
      v640 = v639[3];
      v641 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
      WTF::PrintStream::printf(v641, "%s", " D@");
      WTF::PrintStream::printf(v641, "%u", v636);
      WTF::PrintStream::printf(v641, "%s", "<");
      if (HIDWORD(v640) == 2)
      {
        v642 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v641 + 32))(v641);
        WTF::PrintStream::printf(v642, "%s", "tmp");
        WTF::PrintStream::printf(v642, "%d", v640);
      }
      else
      {
        LODWORD(v734) = v640;
        v643 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v641 + 32))(v641);
        JSC::VirtualRegister::dump((unsigned int *)&v734, v643);
      }
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v641 + 40))(v641);
      WTF::PrintStream::printf(v641, "%s", ",");
      WTF::PrintStream::printf(v641, "%u", v635);
      (*(void (**)(uint64_t))(*(_QWORD *)v705 + 40))(v705);
      v644 = (WTF::PrintStream *)*(unsigned int *)(v634 + 56);
      v734 = (WTF *)off_1E3572250;
      v735 = (WTF *)v737;
      v736 = xmmword_199122F80;
      v737[0] = 0;
      JSC::DFG::dumpNodeFlags((JSC::DFG *)&v734, v644);
      (*((void (**)(WTF **))v734 + 5))(&v734);
      v652 = v735;
      if (v735)
      {
        v653 = v736;
        if ((unint64_t)v736 >= 0xFFFFFFFFFFFFFFF0)
        {
          __break(0xC471u);
          JUMPOUT(0x1983CD51CLL);
        }
        if ((_QWORD)v736 == -17)
        {
          __break(0xC471u);
          JUMPOUT(0x1983CD524);
        }
        v654 = WTF::fastMalloc((WTF *)(v736 + 17));
        *(_DWORD *)v654 = 1;
        *(_QWORD *)(v654 + 8) = v653;
        memcpy((void *)(v654 + 16), v652, v653);
        *(_BYTE *)(v654 + 16 + v653) = 0;
        if (v735 != (WTF *)v737)
          WTF::fastFree((unint64_t)v735, v655, v656, v657, v658, v659, v660, v661);
        v669 = strcmp((const char *)(v654 + 16), "<empty>");
        if (*(_DWORD *)v654 == 1)
          WTF::fastFree(v654, v662, v663, v664, v665, v666, v667, v668);
        else
          --*(_DWORD *)v654;
        v670 = v705;
        if (!v669)
          goto LABEL_853;
      }
      else
      {
        WTF::fastFree(0, v645, v646, v647, v648, v649, v650, v651);
        v670 = v705;
      }
      v671 = (WTF::PrintStream *)*(unsigned int *)(v634 + 56);
      v672 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v670 + 32))(v670);
      WTF::PrintStream::printf(v672, "%s", ", ");
      JSC::DFG::dumpNodeFlags(v672, v671);
      (*(void (**)(uint64_t))(*(_QWORD *)v670 + 40))(v670);
LABEL_853:
      v673 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v670 + 32))(v670);
      WTF::PrintStream::printf(v673, "%s", ">->(");
      (*(void (**)(uint64_t))(*(_QWORD *)v670 + 40))(v670);
      if ((*(_QWORD *)(v634 + 24) & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v674 = *(_DWORD *)((*(_QWORD *)(v634 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x14);
        v675 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v670 + 32))(v670);
        WTF::PrintStream::printf(v675, "%s", "D@");
        WTF::PrintStream::printf(v675, "%u", v674);
        (*(void (**)(uint64_t))(*(_QWORD *)v670 + 40))(v670);
        if ((*(_QWORD *)(v634 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v676 = *(_DWORD *)((*(_QWORD *)(v634 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x14);
          v677 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v670 + 32))(v670);
          WTF::PrintStream::printf(v677, "%s", ", D@");
          WTF::PrintStream::printf(v677, "%u", v676);
          (*(void (**)(uint64_t))(*(_QWORD *)v670 + 40))(v670);
          if ((*(_QWORD *)(v634 + 40) & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v678 = *(_DWORD *)((*(_QWORD *)(v634 + 40) & 0xFF00FFFFFFFFFFFFLL) + 0x14);
            v679 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v670 + 32))(v670);
            WTF::PrintStream::printf(v679, "%s", ", D@");
            WTF::PrintStream::printf(v679, "%u", v678);
            (*(void (**)(uint64_t))(*(_QWORD *)v670 + 40))(v670);
          }
        }
      }
      if (++v633 >= *(unsigned int *)(v702 + 36))
        v680 = (const char *)&str_24_8;
      else
        v680 = ",";
      v681 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v670 + 32))(v670);
      WTF::PrintStream::printf(v681, "%s", ")");
      WTF::PrintStream::printf(v681, "%s", v680);
      (*(void (**)(uint64_t))(*(_QWORD *)v670 + 40))(v670);
      v631 = v702;
      v632 = *(unsigned int *)(v702 + 36);
      goto LABEL_861;
    }
LABEL_864:
    v682 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v705 + 32))(v705);
    WTF::PrintStream::printf(v682, "%s", "\n");
    (*(void (**)(uint64_t))(*(_QWORD *)v705 + 40))(v705);
  }
}

void JSC::DFG::Graph::dump(JSC::DFG::Graph *this, WTF::PrintStream *a2, JSC::DumpContext *a3)
{
  uint64_t v3;
  char *v4;
  JSC::DFG::Prefix *v5;
  JSC::DumpContext *v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  WTF::PrintStream *v10;
  uint64_t v11;
  const char *v12;
  WTF::PrintStream *v13;
  uint64_t v14;
  const char *v15;
  WTF::PrintStream *v16;
  int v17;
  const char *v18;
  WTF::PrintStream *v19;
  int v20;
  const char *v21;
  WTF::PrintStream *v22;
  unsigned int v23;
  WTF *v24;
  WTF::PrintStream *v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::PrintStream *v34;
  int v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::PrintStream *v39;
  float v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  WTF::PrintStream *v44;
  const char *v45;
  WTF::PrintStream *v46;
  const char *v47;
  const char *v48;
  uint64_t *v49;
  WTF::PrintStream *v50;
  uint64_t v51;
  JSC::DumpContext *v52;
  unint64_t v53;
  unint64_t i;
  uint64_t v55;
  WTF::PrintStream *v56;
  const char *v57;
  WTF::PrintStream *v58;
  WTF::PrintStream *v59;
  WTF::PrintStream *v60;
  JSC::DFG::Graph *v61;
  WTF::PrintStream *v62;
  WTF::PrintStream *v63;
  unsigned int v64;
  WTF::PrintStream *v65;
  uint64_t v66;
  uint64_t v67;
  WTF::PrintStream *v68;
  WTF *v69;
  const char *v70;
  WTF::PrintStream *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::PrintStream *v79;
  const char *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  WTF::PrintStream *v89;
  WTF::PrintStream *v90;
  WTF::PrintStream *v91;
  uint64_t v92;
  WTF::PrintStream *v93;
  WTF::PrintStream *v94;
  WTF::PrintStream *v95;
  unint64_t v96;
  WTF::PrintStream *v97;
  unint64_t v98;
  const char *v99;
  WTF::PrintStream *v100;
  const char *v101;
  WTF::PrintStream *v102;
  WTF::PrintStream *v103;
  WTF::PrintStream *v104;
  unsigned int v105;
  WTF::PrintStream *v106;
  uint64_t v107;
  uint64_t v108;
  WTF::PrintStream *v109;
  WTF *v110;
  const char *v111;
  WTF::PrintStream *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF::PrintStream *v120;
  const char *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF *v129;
  WTF::PrintStream *v130;
  WTF::PrintStream *v131;
  uint64_t v132;
  WTF::PrintStream *v133;
  WTF::PrintStream *v134;
  WTF::PrintStream *v135;
  uint64_t v136;
  unint64_t v137;
  const char *v138;
  uint64_t v139;
  _QWORD *v140;
  BOOL v141;
  WTF::PrintStream *v142;
  BOOL v143;
  const char *v144;
  uint64_t v145;
  WTF::PrintStream *v146;
  int v147;
  const char *v148;
  WTF::PrintStream *v149;
  JSC::DFG::DesiredWatchpoints *v150;
  WTF::PrintStream *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF *v159;
  size_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  WTF::PrintStream *v168;
  uint64_t *v169;
  uint64_t *v170;
  JSC::DFG::AbstractValue *v171;
  char *v172;
  JSC::DFG::Prefix *v173;
  uint64_t v174;
  JSC::DFG::Node *v175;
  _QWORD v176[3];
  WTF *v177;
  WTF *v178;
  __int128 v179;
  uint64_t v180;
  char v181;
  uint64_t v182;

  v3 = (uint64_t)a2;
  v4 = (char *)this;
  v182 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::DFG::Graph *)((char *)this + 1088);
  v176[0] = 0;
  v176[1] = 0;
  v176[2] = this;
  if (a3)
    v6 = a3;
  else
    v6 = (JSC::DumpContext *)v176;
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v7, "%s", "\n");
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v8 = *((_QWORD *)v4 + 4);
  v9 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  JSC::DFG::Prefix::dump((uint64_t)v5, v9);
  WTF::PrintStream::printf(v9, "%s", "DFG for ");
  JSC::CodeBlock::dumpAssumingJITType(v8);
  WTF::PrintStream::printf(v9, "%s", ":\n");
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v174 = v3;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  v173 = v5;
  JSC::DFG::Prefix::dump((uint64_t)v5, v10);
  WTF::PrintStream::printf(v10, "%s", "  Fixpoint state: ");
  v11 = *((int *)v4 + 234);
  if (v11 >= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1983CED58);
  }
  v12 = off_1E358E3A0[v11];
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
  WTF::PrintStream::printf(v13, "%s", v12);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
  WTF::PrintStream::printf(v10, "%s", "; Form: ");
  v14 = *((int *)v4 + 236);
  if (v14 >= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1983CED78);
  }
  v15 = off_1E358E3D8[v14];
  v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
  WTF::PrintStream::printf(v16, "%s", v15);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
  WTF::PrintStream::printf(v10, "%s", "; Unification state: ");
  v17 = *((_DWORD *)v4 + 237);
  v172 = v4;
  if (v17)
  {
    if (v17 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1983CED9CLL);
    }
    v18 = "GloballyUnified";
  }
  else
  {
    v18 = "LocallyUnified";
  }
  v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
  WTF::PrintStream::printf(v19, "%s", v18);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
  WTF::PrintStream::printf(v10, "%s", "; Ref count state: ");
  v20 = *((_DWORD *)v4 + 239);
  if (v20)
  {
    if (v20 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1983CEDBCLL);
    }
    v21 = "ExactRefCount";
  }
  else
  {
    v21 = "EverythingIsLive";
  }
  v22 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
  WTF::PrintStream::printf(v22, "%s", v21);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
  WTF::PrintStream::printf(v10, "%s", "\n");
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v171 = v6;
  if (*((_DWORD *)v4 + 236) != 2)
  {
    v28 = (uint64_t *)*((_QWORD *)v4 + 55);
    if (v28)
    {
      v29 = *((_DWORD *)v28 - 1);
      v30 = &v28[11 * v29];
      if (*((_DWORD *)v28 - 3))
      {
        v31 = (uint64_t *)*((_QWORD *)v4 + 55);
        if (v29)
        {
          v32 = 88 * v29;
          v31 = (uint64_t *)*((_QWORD *)v4 + 55);
          while ((unint64_t)(*v31 + 1) <= 1)
          {
            v31 += 11;
            v32 -= 88;
            if (!v32)
            {
              v31 = v30;
              break;
            }
          }
        }
LABEL_29:
        v28 += 11 * *((unsigned int *)v28 - 1);
LABEL_30:
        if (v28 == v31)
          goto LABEL_73;
        v169 = v28;
        v170 = v30;
        while (1)
        {
          v33 = *v31;
          v34 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
          JSC::DFG::Prefix::dump((uint64_t)v173, v34);
          WTF::PrintStream::printf(v34, "%s", "  Arguments for block#");
          WTF::PrintStream::printf(v34, "%u", *(_DWORD *)(v33 + 8));
          WTF::PrintStream::printf(v34, "%s", ": ");
          if (*((_DWORD *)v31 + 5))
            break;
LABEL_67:
          WTF::PrintStream::printf(v34, "%s", "\n");
          v3 = v174;
          (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
          v49 = v31 + 11;
          v31 = v170;
          if (v49 != v170)
          {
            v31 = v49;
            while ((unint64_t)(*v31 + 1) <= 1)
            {
              v31 += 11;
              if (v31 == v170)
              {
                v31 = v170;
                break;
              }
            }
          }
          if (v31 == v169)
            goto LABEL_73;
        }
        v35 = 0;
        v36 = (WTF *)v31[1];
        while (1)
        {
          v37 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v34 + 32))(v34);
          v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 32))(v37);
          v39 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38);
          if (v35)
          {
            WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v177, v40);
            if ((_DWORD)v178)
            {
              if ((_DWORD)v178 != 1)
                goto LABEL_169;
              v47 = (_BYTE)v177 ? "(failed to convert " : "(Out of memory while converting ";
              WTF::PrintStream::printf(v39, "%s", v47);
              WTF::PrintStream::printf(v39, "%s", "StringView");
              v41 = " to utf8)";
            }
            else
            {
              v41 = v177 ? (char *)v177 + 16 : 0;
            }
            WTF::PrintStream::printf(v39, "%s", v41);
            if ((_DWORD)v178 != -1)
              ((void (*)(JSC::DFG::Node **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v178])(&v175, &v177);
          }
          else
          {
            WTF::StringImpl::utf8ForCharacters((char *)&str_24_8, 0, (uint64_t)&v177, v40);
            if ((_DWORD)v178)
            {
              if ((_DWORD)v178 != 1)
              {
LABEL_169:
                std::__throw_bad_variant_access[abi:sn180100]();
                goto LABEL_170;
              }
              v48 = (_BYTE)v177 ? "(failed to convert " : "(Out of memory while converting ";
              WTF::PrintStream::printf(v39, "%s", v48);
              WTF::PrintStream::printf(v39, "%s", "StringView");
              v42 = " to utf8)";
            }
            else
            {
              v42 = v177 ? (char *)v177 + 16 : 0;
            }
            WTF::PrintStream::printf(v39, "%s", v42);
            if ((_DWORD)v178 != -1)
              ((void (*)(JSC::DFG::Node **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v178])(&v175, &v177);
            v35 = 1;
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 40))(v37);
          v43 = *(_QWORD *)v36;
          if (!*(_QWORD *)v36)
            break;
          v3 = *(unsigned int *)(v43 + 20);
          v44 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 32))(v37);
          v4 = "%s";
          WTF::PrintStream::printf(v44, "%s", "D@");
          WTF::PrintStream::printf(v44, "%u", v3);
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 40))(v37);
          if ((*(_DWORD *)(v43 + 56) & 7) == 3)
          {
            v45 = "<Double>";
            goto LABEL_54;
          }
          if ((*(_DWORD *)(v43 + 56) & 7) == 5)
          {
            v45 = "<Int52>";
LABEL_54:
            v46 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 32))(v37);
            WTF::PrintStream::printf(v46, "%s", v45);
            (*(void (**)(uint64_t))(*(_QWORD *)v37 + 40))(v37);
          }
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v34 + 40))(v34);
          v36 = (WTF *)((char *)v36 + 8);
          if (v36 == (WTF *)(v31[1] + 8 * *((unsigned int *)v31 + 5)))
            goto LABEL_67;
        }
        v45 = "-";
        goto LABEL_54;
      }
      v31 = &v28[11 * v29];
    }
    else
    {
      v31 = 0;
      v29 = 0;
    }
    v30 = &v28[11 * v29];
    if (!v28)
      goto LABEL_30;
    goto LABEL_29;
  }
  if (*((_DWORD *)v4 + 115))
  {
    v23 = 0;
    do
    {
      v177 = (WTF *)(*((_QWORD *)v4 + 56) + 16 * v23);
      v24 = v177;
      v178 = (WTF *)", ";
      *(_QWORD *)&v179 = 3;
      *((_QWORD *)&v179 + 1) = &str_24_8;
      v180 = 1;
      v181 = 0;
      v25 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      JSC::DFG::Prefix::dump((uint64_t)v173, v25);
      WTF::PrintStream::printf(v25, "%s", "  Argument formats for entrypoint index: ");
      WTF::PrintStream::printf(v25, "%u", v23);
      WTF::PrintStream::printf(v25, "%s", " : ");
      if (*((_DWORD *)v24 + 3))
      {
        v26 = *(char **)v24;
        do
        {
          v27 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v25 + 32))(v25);
          WTF::PrintStream::printImpl<WTF::CommaPrinter,JSC::DFG::FlushFormat>(v27, (uint64_t)&v178, v26);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v25 + 40))(v25);
          ++v26;
        }
        while (v26 != (char *)(*(_QWORD *)v177 + *((unsigned int *)v177 + 3)));
      }
      WTF::PrintStream::printf(v25, "%s", "\n");
      v3 = v174;
      (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
      ++v23;
    }
    while (*((_DWORD *)v4 + 115) > v23);
  }
LABEL_73:
  v50 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  WTF::PrintStream::printf(v50, "%s", "\n");
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v175 = 0;
  v52 = v171;
  v51 = (uint64_t)v172;
  v53 = *((unsigned int *)v172 + 15);
  if ((_DWORD)v53)
  {
    for (i = 0; i < v53; ++i)
    {
      v55 = *(_QWORD *)(*(_QWORD *)(v51 + 48) + 8 * i);
      if (v55)
      {
        *(_DWORD *)(v51 + 1092) = *(_DWORD *)(v55 + 8);
        JSC::DFG::Graph::dumpBlockHeader(v51, v3, 0, v55, 1);
        v56 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
        JSC::DFG::Prefix::dump((uint64_t)v173, v56);
        WTF::PrintStream::printf(v56, "%s", "  States: ");
        v57 = "StructuresAreWatched";
        if (*(_BYTE *)(v55 + 12))
        {
          if (*(_BYTE *)(v55 + 12) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1983CECF8);
          }
          v57 = "StructuresAreClobbered";
        }
        v58 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v56 + 32))(v56);
        WTF::PrintStream::printf(v58, "%s", v57);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v56 + 40))(v56);
        v59 = (WTF::PrintStream *)v174;
        (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
        if (!*(_BYTE *)(v55 + 15))
        {
          v60 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
          WTF::PrintStream::printf(v60, "%s", ", CurrentlyCFAUnreachable");
          (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
        }
        v61 = (JSC::DFG::Graph *)v172;
        if (!*(_BYTE *)(v55 + 18))
        {
          v62 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
          WTF::PrintStream::printf(v62, "%s", ", CFAUnreachable");
          (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
        }
        v63 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
        WTF::PrintStream::printf(v63, "%s", "\n");
        (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
        v64 = *((_DWORD *)v172 + 236);
        if (v64 >= 2)
        {
          if (v64 == 2)
          {
            v67 = *(_QWORD *)(v55 + 200);
            if (!v67)
              goto LABEL_188;
            WTF::sortedListDump<WTF::Vector<JSC::DFG::NodeFlowProjection,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::DFG::NodeComparator>((uint64_t *)&v177, *(_QWORD *)(v67 + 64), *(_DWORD *)(v67 + 76));
            v68 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
            JSC::DFG::Prefix::dump((uint64_t)v173, v68);
            WTF::PrintStream::printf(v68, "%s", "  Live: ");
            v69 = v177;
            v70 = (char *)v177 + 16;
            if (!v177)
              v70 = 0;
            WTF::PrintStream::printf(v68, "%s", v70);
            v71 = v68;
            v52 = v171;
            WTF::PrintStream::printf(v71, "%s", "\n");
            (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
            if (v69)
            {
              if (*(_DWORD *)v69 == 1)
                WTF::fastFree((unint64_t)v69, v72, v73, v74, v75, v76, v77, v78);
              else
                --*(_DWORD *)v69;
            }
            JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)(*(_QWORD *)(v55 + 200) + 96), v171, v76, v77, v78, (uint64_t *)&v177);
            v79 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
            JSC::DFG::Prefix::dump((uint64_t)v173, v79);
            WTF::PrintStream::printf(v79, "%s", "  Values: ");
            if (v177)
              v80 = (char *)v177 + 16;
            else
              v80 = 0;
            WTF::PrintStream::printf(v79, "%s", v80);
            WTF::PrintStream::printf(v79, "%s", "\n");
            (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
            v88 = v177;
            v177 = 0;
            if (v88)
            {
              if (*(_DWORD *)v88 == 1)
                WTF::fastFree((unint64_t)v88, v81, v82, v83, v84, v85, v86, v87);
              else
                --*(_DWORD *)v88;
            }
          }
        }
        else
        {
          v65 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
          JSC::DFG::Prefix::dump((uint64_t)v173, v65);
          WTF::PrintStream::printf(v65, "%s", "  Vars Before: ");
          (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
          if (*(_BYTE *)(v55 + 15))
          {
            v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
            JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::dumpInContext(v55 + 120, v66, (uint64_t)v52);
          }
          else
          {
            v89 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
            WTF::PrintStream::printf(v89, "%s", "<empty>");
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
          v90 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
          WTF::PrintStream::printf(v90, "%s", "\n");
          (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
          v91 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
          JSC::DFG::Prefix::dump((uint64_t)v173, v91);
          WTF::PrintStream::printf(v91, "%s", "  Intersected Vars Before: ");
          (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
          if (*(_BYTE *)(v55 + 18))
          {
            v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
            JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::dumpInContext(v55 + 168, v92, (uint64_t)v52);
          }
          else
          {
            v93 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
            WTF::PrintStream::printf(v93, "%s", "<empty>");
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
          v94 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
          WTF::PrintStream::printf(v94, "%s", "\n");
          (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
          v95 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
          JSC::DFG::Prefix::dump((uint64_t)v173, v95);
          WTF::PrintStream::printf(v95, "%s", "  Var Links: ");
          JSC::Operands<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::dump(v55 + 72, (uint64_t)v95);
          v59 = (WTF::PrintStream *)v174;
          WTF::PrintStream::printf(v95, "%s", "\n");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v59 + 40))(v59);
          v52 = v171;
          v61 = (JSC::DFG::Graph *)v172;
        }
        if (*(_DWORD *)(v55 + 220))
        {
          v96 = 0;
          do
          {
            *((_DWORD *)v61 + 274) = -1;
            JSC::DFG::Graph::dumpCodeOrigin(v61, v59, 0, &v175, *(JSC::DFG::Node **)(*(_QWORD *)(v55 + 208) + 8 * v96), v52);
            *((_DWORD *)v61 + 274) = v96;
            if (v96 >= *(unsigned int *)(v55 + 220))
            {
              __break(0xC471u);
              JUMPOUT(0x1983CEDC4);
            }
            JSC::DFG::Graph::dump(v61, v59, 0, *(JSC::DFG::Node **)(*(_QWORD *)(v55 + 208) + 8 * v96++), v52);
          }
          while (v96 < *(unsigned int *)(v55 + 220));
        }
        *((_DWORD *)v61 + 274) = -1;
        v97 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v59 + 32))(v59);
        JSC::DFG::Prefix::dump((uint64_t)v173, v97);
        WTF::PrintStream::printf(v97, "%s", "  States: ");
        v98 = *(char *)(v55 + 14);
        if (v98 >= 4)
        {
          __break(0xC471u);
          JUMPOUT(0x1983CECD8);
        }
        v99 = off_1E358E3B8[v98];
        v100 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v97 + 32))(v97);
        WTF::PrintStream::printf(v100, "%s", v99);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v97 + 40))(v97);
        WTF::PrintStream::printf(v97, "%s", ", ");
        v101 = "StructuresAreWatched";
        if (*(_BYTE *)(v55 + 13))
        {
          if (*(_BYTE *)(v55 + 13) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1983CED18);
          }
          v101 = "StructuresAreClobbered";
        }
        v102 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v97 + 32))(v97);
        WTF::PrintStream::printf(v102, "%s", v101);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v97 + 40))(v97);
        v3 = v174;
        (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
        if (!*(_BYTE *)(v55 + 17))
        {
          v103 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
          WTF::PrintStream::printf(v103, "%s", ", CFAInvalidated");
          (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
        }
        v104 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
        WTF::PrintStream::printf(v104, "%s", "\n");
        (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
        v51 = (uint64_t)v172;
        v105 = *((_DWORD *)v172 + 236);
        if (v105 >= 2)
        {
          if (v105 == 2)
          {
            v108 = *(_QWORD *)(v55 + 200);
            if (!v108)
            {
              __break(0xC471u);
              JUMPOUT(0x1983CECB8);
            }
            WTF::sortedListDump<WTF::Vector<JSC::DFG::NodeFlowProjection,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::DFG::NodeComparator>((uint64_t *)&v177, *(_QWORD *)(v108 + 80), *(_DWORD *)(v108 + 92));
            v109 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
            JSC::DFG::Prefix::dump((uint64_t)v173, v109);
            WTF::PrintStream::printf(v109, "%s", "  Live: ");
            v110 = v177;
            v111 = (char *)v177 + 16;
            if (!v177)
              v111 = 0;
            WTF::PrintStream::printf(v109, "%s", v111);
            v112 = v109;
            v52 = v171;
            WTF::PrintStream::printf(v112, "%s", "\n");
            (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
            if (v110)
            {
              if (*(_DWORD *)v110 == 1)
                WTF::fastFree((unint64_t)v110, v113, v114, v115, v116, v117, v118, v119);
              else
                --*(_DWORD *)v110;
            }
            JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)(*(_QWORD *)(v55 + 200) + 112), v171, v117, v118, v119, (uint64_t *)&v177);
            v120 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
            JSC::DFG::Prefix::dump((uint64_t)v173, v120);
            WTF::PrintStream::printf(v120, "%s", "  Values: ");
            if (v177)
              v121 = (char *)v177 + 16;
            else
              v121 = 0;
            WTF::PrintStream::printf(v120, "%s", v121);
            WTF::PrintStream::printf(v120, "%s", "\n");
            (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
            v129 = v177;
            v177 = 0;
            if (v129)
            {
              if (*(_DWORD *)v129 == 1)
                WTF::fastFree((unint64_t)v129, v122, v123, v124, v125, v126, v127, v128);
              else
                --*(_DWORD *)v129;
            }
          }
        }
        else
        {
          v106 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
          JSC::DFG::Prefix::dump((uint64_t)v173, v106);
          WTF::PrintStream::printf(v106, "%s", "  Vars After: ");
          (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
          if (*(_BYTE *)(v55 + 15))
          {
            v107 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
            JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::dumpInContext(v55 + 144, v107, (uint64_t)v52);
          }
          else
          {
            v130 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
            WTF::PrintStream::printf(v130, "%s", "<empty>");
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
          v131 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
          WTF::PrintStream::printf(v131, "%s", "\n");
          (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
          v132 = v55 + 96;
          v133 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
          JSC::DFG::Prefix::dump((uint64_t)v173, v133);
          WTF::PrintStream::printf(v133, "%s", "  Var Links: ");
          JSC::Operands<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::dump(v132, (uint64_t)v133);
          v3 = v174;
          WTF::PrintStream::printf(v133, "%s", "\n");
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
          v51 = (uint64_t)v172;
        }
        v134 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
        WTF::PrintStream::printf(v134, "%s", "\n");
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
        v53 = *(unsigned int *)(v51 + 60);
      }
    }
  }
  *(_DWORD *)(v51 + 1092) = -1;
  v135 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  JSC::DFG::Prefix::dump((uint64_t)v173, v135);
  WTF::PrintStream::printf(v135, "%s", "GC Values:\n");
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v136 = *(_QWORD *)(v51 + 392);
  if (v136)
  {
    v137 = 0;
    v138 = "    ";
    do
    {
      if (v137 >> 4 >= *(unsigned int *)(v51 + 412))
      {
        __break(0xC471u);
        JUMPOUT(0x1983CEDCCLL);
      }
      v139 = *(_QWORD *)(*(_QWORD *)(v51 + 400) + 8 * (v137 >> 4));
      v140 = (_QWORD *)(v139 + 24 * (v137 & 0xF));
      if (*v140)
        v141 = (*v140 & 0xFFFE000000000002) == 0;
      else
        v141 = 0;
      if (v141)
      {
        v142 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
        JSC::DFG::Prefix::dump((uint64_t)v173, v142);
        WTF::PrintStream::printf(v142, "%s", v138);
        if (*v140)
          v143 = (*v140 & 0xFFFE000000000002) == 0;
        else
          v143 = 0;
        if (v143)
        {
          v144 = v138;
          v145 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v142 + 32))(v142);
          v146 = (WTF::PrintStream *)v145;
          v147 = *(_DWORD *)(v139 + 24 * (v137 & 0xF) + 16);
          v148 = "Weak";
          if (v147)
          {
            if (v147 != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1983CED38);
            }
            v148 = "Strong";
          }
          v149 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v145 + 32))(v145);
          WTF::PrintStream::printf(v149, "%s", v148);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v146 + 40))(v146);
          WTF::PrintStream::printf(v146, "%s", ":");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v142 + 40))(v142);
          v138 = v144;
        }
        JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)(v139 + 24 * (v137 & 0xF)), v142, (JSC::DumpContext *)v176, *(JSC::Structure **)(v139 + 24 * (v137 & 0xF) + 8));
        WTF::PrintStream::printf(v142, "%s", "\n");
        (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
      }
      ++v137;
      v51 = (uint64_t)v172;
    }
    while (v136 != v137);
  }
  v150 = (JSC::DFG::DesiredWatchpoints *)(*(_QWORD *)(v51 + 24) + 136);
  v151 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
  JSC::DFG::DesiredWatchpoints::dumpInContext(v150, v151, (JSC::DumpContext *)v176);
  (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
  if (v176[0] && *(_DWORD *)(v176[0] - 12))
  {
    v36 = (WTF *)&v180;
    v177 = (WTF *)off_1E3572250;
    v178 = (WTF *)&v180;
    v179 = xmmword_199122F80;
    LOBYTE(v180) = 0;
    JSC::DFG::Prefix::dump((uint64_t)v173, (WTF::PrintStream *)&v177);
    (*((void (**)(WTF **))v177 + 5))(&v177);
    v159 = v178;
    if (v178)
    {
      v160 = v179;
      if ((unint64_t)v179 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x1983CEDDCLL);
      }
      if ((_QWORD)v179 == -17)
      {
LABEL_188:
        __break(0xC471u);
        JUMPOUT(0x1983CEC98);
      }
      v4 = (char *)WTF::fastMalloc((WTF *)(v179 + 17));
      *(_DWORD *)v4 = 1;
      *((_QWORD *)v4 + 1) = v160;
      memcpy(v4 + 16, v159, v160);
      v4[v160 + 16] = 0;
      v3 = v174;
      WTF::StringHashDumpContext<JSC::Structure>::dump((uint64_t)v176, v174, v4 + 16);
      if (*(_DWORD *)v4 == 1)
LABEL_170:
        WTF::fastFree((unint64_t)v4, v161, v162, v163, v164, v165, v166, v167);
      else
        --*(_DWORD *)v4;
    }
    else
    {
      v3 = v174;
      WTF::StringHashDumpContext<JSC::Structure>::dump((uint64_t)v176, v174, 0);
    }
    v168 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    WTF::PrintStream::printf(v168, "%s", "\n");
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    if (v178 != v36)
      WTF::fastFree((unint64_t)v178, v152, v153, v154, v155, v156, v157, v158);
  }
  JSC::DumpContext::~DumpContext((JSC::DumpContext *)v176, v152, v153, v154, v155, v156, v157, v158);
}

void JSC::DFG::Graph::deleteNode(JSC::DFG::Graph *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  const void *v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::DFG::Node **v29;
  JSC::DFG::Node *v30;
  uint64_t v31;
  JSC::DFG::Node **v32;
  JSC::DFG::Node *v33;

  if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
  {
    if (*((_DWORD *)this + 236) == 2)
    {
      v24 = *((unsigned int *)this + 15);
      if ((_DWORD)v24)
      {
        v25 = 0;
        v26 = *((_QWORD *)this + 6);
        while (!*(_QWORD *)(v26 + 8 * v25))
        {
          if (v24 == ++v25)
            goto LABEL_2;
        }
        if ((_DWORD)v24 != (_DWORD)v25)
        {
          v25 = v25;
          while (v24 > v25)
          {
            v27 = *(_QWORD *)(*(_QWORD *)(v26 + 8 * v25) + 200);
            v28 = *(unsigned int *)(v27 + 76);
            if ((_DWORD)v28)
            {
              v29 = *(JSC::DFG::Node ***)(v27 + 64);
              do
              {
                v30 = *v29++;
                if (v30 == a2)
                {
                  JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGGraph.cpp", (const char *)0x2A1, "void JSC::DFG::Graph::deleteNode(Node *)", "!block->ssa->liveAtHead.contains(node)");
                  __break(0xC471u);
                  JUMPOUT(0x1983CF150);
                }
                --v28;
              }
              while (v28);
            }
            v31 = *(unsigned int *)(v27 + 92);
            if ((_DWORD)v31)
            {
              v32 = *(JSC::DFG::Node ***)(v27 + 80);
              do
              {
                v33 = *v32++;
                if (v33 == a2)
                {
                  JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGGraph.cpp", (const char *)0x2A2, "void JSC::DFG::Graph::deleteNode(Node *)", "!block->ssa->liveAtTail.contains(node)");
                  __break(0xC471u);
                  JUMPOUT(0x1983CF198);
                }
                --v31;
              }
              while (v31);
            }
            if (v24 > ++v25)
            {
              while (!*(_QWORD *)(v26 + 8 * v25))
              {
                if (v24 == ++v25)
                  goto LABEL_2;
              }
              v25 = v25;
            }
            if (v24 == v25)
              goto LABEL_2;
          }
LABEL_65:
          __break(0xC471u);
          JUMPOUT(0x1983CEFDCLL);
        }
      }
    }
  }
LABEL_2:
  v10 = *((unsigned int *)a2 + 5);
  v11 = *((_QWORD *)this + 129);
  if (*(JSC::DFG::Node **)(v11 + 8 * v10) != a2)
    goto LABEL_65;
  v12 = *((unsigned int *)this + 265);
  if ((_DWORD)v12 == *((_DWORD *)this + 264))
  {
    v19 = v12 + (v12 >> 2);
    if (v19 >= 0x10)
      v20 = v19 + 1;
    else
      v20 = 16;
    if (v20 <= v12 + 1)
      v21 = v12 + 1;
    else
      v21 = v20;
    if (v21 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1983CF1A0);
    }
    v22 = (const void *)*((_QWORD *)this + 131);
    v23 = (void *)WTF::fastMalloc((WTF *)(8 * v21));
    *((_DWORD *)this + 264) = v21;
    *((_QWORD *)this + 131) = v23;
    memcpy(v23, v22, 8 * v12);
    if (v22)
    {
      if (*((const void **)this + 131) == v22)
      {
        *((_QWORD *)this + 131) = 0;
        *((_DWORD *)this + 264) = 0;
      }
      WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
    }
    v12 = *((unsigned int *)this + 265);
    *(_QWORD *)(*((_QWORD *)this + 131) + 8 * v12) = *((unsigned int *)a2 + 5);
    v11 = *((_QWORD *)this + 129);
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 131) + 8 * v12) = v10;
  }
  *((_DWORD *)this + 265) = v12 + 1;
  v13 = 8 * *((unsigned int *)a2 + 5);
  v14 = *(_QWORD *)(v11 + v13);
  *(_QWORD *)(v11 + v13) = 0;
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if ((v15 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v15 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v16 = *(_QWORD *)v14;
    if ((*(_QWORD *)v14 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v17 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v17)
    {
      pas_try_deallocate_slow_no_cache(v14, (uint64_t)&bmalloc_heap_config, 1);
      return;
    }
    if (!(v14 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v14 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v14)) & 1) != 0)
    {
      goto LABEL_11;
    }
    if (v14 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v14 >> 24)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v14 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v14) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
      {
LABEL_11:
        v18 = *(unsigned int *)(v17 + 8000);
        if (v18 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v17, v14, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v17 + 8 * v18) = v14 | 0x5000000000000;
          *(_DWORD *)(v17 + 8000) = v18 + 1;
        }
        return;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v17, v14, 1, a4, a5, a6, a7, a8);
  }
}

void JSC::DFG::Graph::logAssertionFailure(JSC::DFG::Graph *this, JSC::DFG::Node *a2, const WTF::CString *a3, const char *a4, const char *a5, const char *a6)
{
  int v12;
  WTF::PrintStream *v13;
  const char *v14;
  WTF::PrintStream *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  size_t v23;
  const void *v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  WTF *v36;
  void (**v37)(WTF::StringPrintStream *__hidden);
  _BYTE *v38;
  __int128 v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v37 = off_1E3572250;
  v38 = v40;
  v39 = xmmword_199122F80;
  v40[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v37, "%s", "While handling node ");
  if (a2)
  {
    v12 = *((_DWORD *)a2 + 5);
    v13 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v37[4])(&v37);
    WTF::PrintStream::printf(v13, "%s", "D@");
    WTF::PrintStream::printf(v13, "%u", v12);
    v37[5]((WTF::StringPrintStream *)&v37);
    if ((*((_DWORD *)a2 + 14) & 7) == 3)
    {
      v14 = "<Double>";
    }
    else
    {
      if ((*((_DWORD *)a2 + 14) & 7) != 5)
        goto LABEL_8;
      v14 = "<Int52>";
    }
  }
  else
  {
    v14 = "-";
  }
  v15 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v37[4])(&v37);
  WTF::PrintStream::printf(v15, "%s", v14);
  v37[5]((WTF::StringPrintStream *)&v37);
LABEL_8:
  WTF::PrintStream::printf((WTF::PrintStream *)&v37, "%s", "\n\n");
  v37[5]((WTF::StringPrintStream *)&v37);
  v24 = v38;
  v23 = v39;
  v36 = 0;
  if (!v38)
  {
    v27 = 0;
LABEL_13:
    WTF::fastFree(v27, v16, v17, v18, v19, v20, (uint64_t)v21, v22);
    goto LABEL_14;
  }
  if ((unint64_t)v39 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x1983CF400);
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)(v39 + 17));
  *(_DWORD *)v25 = 1;
  v25[1] = v23;
  v36 = (WTF *)v25;
  v26 = v25 + 2;
  memcpy(v25 + 2, v24, v23);
  *((_BYTE *)v26 + v23) = 0;
  v27 = (unint64_t)v38;
  if (v38 != v40)
    goto LABEL_13;
LABEL_14:
  JSC::DFG::logDFGAssertionFailure(this, (JSC::DFG::Graph *)&v36, a3, a4, a5, a6, v21);
  v35 = v36;
  v36 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 1)
      WTF::fastFree((unint64_t)v35, v28, v29, v30, v31, v32, v33, v34);
    else
      --*(_DWORD *)v35;
  }
}

void JSC::B3::SparseCollection<JSC::DFG::Node>::packIndices(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t StatusReg;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t i;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (*((_DWORD *)a1 + 7))
  {
    LODWORD(v9) = 0;
    LODWORD(v10) = *((_DWORD *)a1 + 3);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v12 = *a1;
      if (v9 < v10)
      {
        v9 = v9;
        while (*(_QWORD *)(v12 + 8 * v9))
        {
          if (v10 == ++v9)
            goto LABEL_22;
        }
      }
      if ((_DWORD)v9 == (_DWORD)v10)
        break;
      do
      {
        v10 = (v10 - 1);
        v13 = *(_QWORD *)(v12 + 8 * v10);
      }
      while (v10 > v9 && !v13);
      if ((_DWORD)v9 == (_DWORD)v10)
      {
        LODWORD(v10) = v9;
        break;
      }
      *(_DWORD *)(v13 + 20) = v9;
      *(_QWORD *)(v12 + 8 * v10) = 0;
      v14 = *(_QWORD *)(v12 + 8 * v9);
      *(_QWORD *)(v12 + 8 * v9) = v13;
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if ((v15 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v15 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        v16 = *(_QWORD *)v14;
        if ((*(_QWORD *)v14 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        v17 = *(_QWORD *)(StatusReg + 752);
        if (v17)
        {
          if (v14 >> 43
            || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v14 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v14)) & 1) == 0)
          {
            if (v14 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v14 >> 24)
            {
              a4 = 0;
LABEL_27:
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v17, v14, 1, a4, a5, a6, a7, a8);
              goto LABEL_20;
            }
            a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v14 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                    + 24) >> (2 * ((BYTE3(v14) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 != 1)
              goto LABEL_27;
          }
          v18 = *(unsigned int *)(v17 + 8000);
          if (v18 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v17, v14, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
          }
          else
          {
            *(_QWORD *)(v17 + 8 * v18) = v14 | 0x5000000000000;
            *(_DWORD *)(v17 + 8000) = v18 + 1;
          }
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v14, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_20:
      LODWORD(v9) = v9 + 1;
    }
LABEL_22:
    *((_DWORD *)a1 + 7) = 0;
    v19 = *((unsigned int *)a1 + 3);
    if ((_DWORD)v19 != (_DWORD)v10)
    {
      v20 = (unint64_t *)(v12 + 8 * v10);
      v21 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      for (i = 8 * v19 - 8 * v10; i; i -= 8)
      {
        v23 = *v20;
        *v20 = 0;
        if (v23)
        {
          v24 = *(_QWORD *)(v23 + 8);
          if ((v24 & 1) != 0 && (v24 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v24 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
          v25 = *(_QWORD *)v23;
          if ((*(_QWORD *)v23 & 1) != 0 && (v25 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v25 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
          v26 = *(_QWORD *)(v21 + 752);
          if (v26)
          {
            if (!(v23 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v23 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v23)) & 1) != 0)
            {
LABEL_42:
              v27 = *(unsigned int *)(v26 + 8000);
              if (v27 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v26, v23, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v26 + 8 * v27) = v23 | 0x5000000000000;
                *(_DWORD *)(v26 + 8000) = v27 + 1;
              }
              goto LABEL_35;
            }
            if (v23 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v23 >> 24)
            {
              a4 = 0;
            }
            else
            {
              a4 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v23 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v23) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)a4 == 1)
                goto LABEL_42;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v26, v23, 1, a4, a5, a6, a7, a8);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v23, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
LABEL_35:
        ++v20;
      }
    }
    *((_DWORD *)a1 + 3) = v10;
  }
}

uint64_t JSC::DFG::Graph::dethread(uint64_t this)
{
  int v1;
  BOOL v2;
  BOOL v3;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = *(_DWORD *)(this + 944);
  if (v1)
    v2 = v1 == 2;
  else
    v2 = 1;
  if (!v2)
  {
    if ((_BYTE)qword_1ECF4C32A)
      v3 = 0;
    else
      v3 = byte_1ECF4C323 == 0;
    if (!v3 || BYTE2(qword_1ECF4C32A) != 0)
    {
      v11 = this;
      WTF::dataLog<char [16]>("Dethreading DFG graph.\n");
      this = v11;
    }
    v5 = *(_DWORD *)(this + 60);
LABEL_16:
    while (v5)
    {
      if (*(_DWORD *)(this + 60) <= --v5)
        goto LABEL_25;
      v6 = *(_QWORD *)(*(_QWORD *)(this + 48) + 8 * v5);
      if (v6)
      {
        v7 = *(_DWORD *)(v6 + 36);
        if (v7)
        {
          v8 = v7 - 1;
          v9 = 8 * v8;
          while (*(_DWORD *)(v6 + 36) > v8)
          {
            v10 = *(_QWORD **)(*(_QWORD *)(v6 + 24) + v9);
            v10[3] = 0;
            v10[4] = 0;
            v10[5] = 0;
            v9 -= 8;
            if (--v8 == -1)
              goto LABEL_16;
          }
LABEL_25:
          __break(0xC471u);
          JUMPOUT(0x1983CF7F8);
        }
      }
    }
    *(_DWORD *)(this + 944) = 0;
  }
  return this;
}

void JSC::DFG::Graph::determineReachability(JSC::DFG::Graph *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int v32;
  _QWORD *v33;
  WTF *v34;
  _QWORD *v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  _BYTE v42[128];
  _QWORD *v43;
  uint64_t v44;

  v40 = (WTF *)v42;
  v41 = 16;
  v8 = *((unsigned int *)this + 35);
  if (!(_DWORD)v8)
    goto LABEL_44;
  v9 = 0;
  v10 = (uint64_t *)*((_QWORD *)this + 16);
  v11 = 8 * v8;
  do
  {
    v44 = *v10;
    v12 = v44;
    *(_BYTE *)(v44 + 21) = 1;
    if (v9 == (_DWORD)v41)
    {
      v38 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, v9 + 1, (unint64_t)&v44);
      v9 = HIDWORD(v41);
      *((_QWORD *)v40 + HIDWORD(v41)) = *v38;
    }
    else
    {
      *((_QWORD *)v40 + v9) = v12;
    }
    HIDWORD(v41) = ++v9;
    ++v10;
    v11 -= 8;
  }
  while (v11);
  if (!v9)
    goto LABEL_44;
  do
  {
    v13 = *((_QWORD *)v40 + --v9);
    HIDWORD(v41) = v9;
    v14 = *(unsigned int *)(v13 + 220);
    v15 = v14 - 1;
    do
    {
      if (v15 >= v14)
      {
        __break(0xC471u);
        JUMPOUT(0x1983CFB50);
      }
      v16 = *(_QWORD *)(*(_QWORD *)(v13 + 208) + 8 * v15--);
    }
    while (*(unsigned __int16 *)(v16 + 18) - 364 > 0xB);
    v17 = 1;
    switch(*(_WORD *)(v16 + 18))
    {
      case 0x16C:
        goto LABEL_12;
      case 0x16D:
        v17 = 2;
        goto LABEL_12;
      case 0x16E:
        v17 = *(_DWORD *)(*(_QWORD *)(v16 + 72) + 12) + 1;
        goto LABEL_51;
      case 0x16F:
        v17 = *(_DWORD *)(*(_QWORD *)(v16 + 72) + 12);
LABEL_51:
        if (!v17)
          continue;
LABEL_12:
        v18 = v17;
        break;
      default:
        continue;
    }
    do
    {
      v19 = v18--;
      v20 = *(unsigned int *)(v13 + 220);
      v21 = v20 - 1;
      do
      {
        if (v21 >= v20)
        {
          __break(0xC471u);
          JUMPOUT(0x1983CFB48);
        }
        v22 = *(_QWORD *)(*(_QWORD *)(v13 + 208) + 8 * v21);
        v23 = *(unsigned __int16 *)(v22 + 18);
        --v21;
      }
      while ((v23 - 364) > 0xB);
      if (v23 == 366)
      {
        v25 = *(_QWORD *)(v22 + 72);
        v32 = *(_DWORD *)(v25 + 12);
        if (v32 <= v18)
        {
          if (v32 != v18)
          {
            __break(0xC471u);
            JUMPOUT(0x1983CFA58);
          }
        }
        else
        {
          v25 = *(_QWORD *)v25 + 32 * v18;
        }
        goto LABEL_23;
      }
      if (v23 != 367)
      {
        if (v19 == 1)
        {
          v24 = (_QWORD *)(v22 + 72);
          if (v23 != 364)
            v24 = (_QWORD *)*v24;
          goto LABEL_24;
        }
        if (v19 != 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1983CFB40);
        }
        v25 = *(_QWORD *)(v22 + 72);
LABEL_23:
        v24 = (_QWORD *)(v25 + 16);
        goto LABEL_24;
      }
      v39 = *(_QWORD *)(v22 + 72);
      if (*(_DWORD *)(v39 + 12) <= v18)
      {
        __break(0xC471u);
        JUMPOUT(0x1983CFB58);
      }
      v24 = (_QWORD *)(*(_QWORD *)v39 + 8 * v18);
LABEL_24:
      v43 = (_QWORD *)*v24;
      v26 = v43;
      v44 = v13;
      if (!*((_BYTE *)v43 + 21))
      {
        *((_BYTE *)v43 + 21) = 1;
        v27 = HIDWORD(v41);
        if (HIDWORD(v41) == (_DWORD)v41)
        {
          v36 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, HIDWORD(v41) + 1, (unint64_t)&v43);
          v37 = HIDWORD(v41) + 1;
          *((_QWORD *)v40 + HIDWORD(v41)) = *v36;
          HIDWORD(v41) = v37;
          v26 = v43;
        }
        else
        {
          *((_QWORD *)v40 + HIDWORD(v41)) = v26;
          HIDWORD(v41) = v27 + 1;
        }
      }
      v28 = v26 + 5;
      v29 = *((unsigned int *)v26 + 13);
      if ((_DWORD)v29)
      {
        v30 = (_QWORD *)*v28;
        v31 = *((unsigned int *)v26 + 13);
        while (*v30 != v13)
        {
          ++v30;
          if (!--v31)
            goto LABEL_28;
        }
      }
      else
      {
LABEL_28:
        if ((_DWORD)v29 == *((_DWORD *)v26 + 12))
        {
          v33 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v28, v29 + 1, (unint64_t)&v44);
          v29 = *((unsigned int *)v26 + 13);
          *(_QWORD *)(v26[5] + 8 * v29) = *v33;
        }
        else
        {
          *(_QWORD *)(*v28 + 8 * v29) = v13;
        }
        *((_DWORD *)v26 + 13) = v29 + 1;
      }
    }
    while (v18);
    v9 = HIDWORD(v41);
  }
  while (v9);
LABEL_44:
  v34 = v40;
  if (v42 != (_BYTE *)v40 && v40 != 0)
  {
    v40 = 0;
    LODWORD(v41) = 0;
    WTF::fastFree((unint64_t)v34, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::DFG::Graph::resetReachability(JSC::DFG::Graph *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v9 = *((_DWORD *)this + 15);
  if (v9)
  {
    v10 = v9 - 1;
    v11 = 8 * (v9 - 1);
    while (*((_DWORD *)this + 15) > v10)
    {
      v12 = *(_QWORD *)(*((_QWORD *)this + 6) + v11);
      if (v12)
      {
        *(_BYTE *)(v12 + 21) = 0;
        if (*(_DWORD *)(v12 + 48))
        {
          if (*(_DWORD *)(v12 + 52))
            *(_DWORD *)(v12 + 52) = 0;
          v13 = *(_QWORD *)(v12 + 40);
          if (v12 + 56 != v13 && v13 != 0)
          {
            *(_QWORD *)(v12 + 40) = 0;
            *(_DWORD *)(v12 + 48) = 0;
            WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
            v13 = *(_QWORD *)(v12 + 40);
          }
          if (!v13)
          {
            *(_QWORD *)(v12 + 40) = v12 + 56;
            *(_DWORD *)(v12 + 48) = 2;
          }
        }
      }
      v11 -= 8;
      if (--v10 == -1)
        goto LABEL_16;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_16:
    JSC::DFG::Graph::determineReachability(this, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::DFG::Graph::computeRefCounts(JSC::DFG::Graph *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  BOOL v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v51;
  int v53;
  uint64_t v54;
  int v56;
  uint64_t v57;
  int v59;
  _QWORD *v60;
  unsigned int v61;
  WTF *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  BOOL v89;
  unsigned int v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  WTF *v98;
  _WORD *v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  unsigned int v105;
  _QWORD *v106;
  _QWORD *v107;
  unsigned int v108;
  _QWORD *v109;
  unsigned int v110;
  _QWORD *v111;
  unsigned int v112;
  _QWORD *v113;
  _QWORD *v114;
  JSC::DFG::Graph *v115;
  WTF *v116;
  uint64_t v117;
  _BYTE v118[1024];
  uint64_t v119;
  unint64_t v120;

  v115 = this;
  v116 = (WTF *)v118;
  v117 = 128;
  v8 = *((unsigned int *)this + 15);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = *((_QWORD *)this + 6);
    while (1)
    {
      v11 = *(_QWORD *)(v10 + 8 * v9);
      if (v11)
        break;
LABEL_12:
      if (++v9 == v8)
        goto LABEL_18;
    }
    v12 = *(unsigned int *)(v11 + 220);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)(v11 + 208);
      if ((_DWORD)v12 == 1)
      {
        v14 = *(unsigned int *)(v11 + 220);
LABEL_7:
        v15 = v14 - 1;
        do
          *(_DWORD *)(*(_QWORD *)(v13 + 8 * v15) + 52) = 0;
        while ((unint64_t)v15--);
        goto LABEL_9;
      }
      v14 = v12 & 1;
      a2 = (char *)(v12 + 4294967294);
      a3 = v12 & 0xFFFFFFFE;
      do
      {
        a4 = *(_QWORD *)(v13 + 8 * ((_DWORD)a2 + 1));
        a5 = *(_QWORD *)(v13 + 8 * a2);
        *(_DWORD *)(a4 + 52) = 0;
        *(_DWORD *)(a5 + 52) = 0;
        a2 -= 2;
        a3 -= 2;
      }
      while (a3);
      if ((v12 & 0xFFFFFFFE) != v12)
        goto LABEL_7;
    }
LABEL_9:
    v17 = *(unsigned int *)(v11 + 36);
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD *)(v11 + 24);
      v19 = v17 - 1;
      do
        *(_DWORD *)(*(_QWORD *)(v18 + 8 * v19) + 52) = 0;
      while ((unint64_t)v19--);
    }
    goto LABEL_12;
  }
LABEL_18:
  v21 = *((unsigned int *)this + 77);
  if ((_DWORD)v21)
  {
    v100 = (_WORD *)*((_QWORD *)this + 37);
    v101 = 8 * v21;
    do
    {
      *v100 = 0;
      v100 += 4;
      v101 -= 8;
    }
    while (v101);
  }
  if ((_DWORD)v8)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v23);
      if (v24)
      {
        v25 = *(_DWORD *)(v24 + 220);
        if (v25)
        {
          do
          {
            --v25;
            v119 = 0;
            if (*(_DWORD *)(v24 + 220) <= v25)
            {
LABEL_214:
              __break(0xC471u);
              JUMPOUT(0x1983D05D4);
            }
            v26 = *(_QWORD *)(*(_QWORD *)(v24 + 208) + 8 * v25);
            v119 = v26;
            v27 = *(_QWORD *)(v26 + 24);
            if ((*(_BYTE *)(v26 + 56) & 0x10) != 0)
            {
              v44 = *(_QWORD *)(v26 + 32);
              if ((int)v44 + (int)v27 > v27)
              {
                v45 = *(_QWORD *)(v26 + 24);
                do
                {
                  if (v45 >= *((unsigned int *)v115 + 41))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983D05E4);
                  }
                  v46 = *(_QWORD *)(*((_QWORD *)v115 + 19) + 8 * v45);
                  v47 = v46 & 0xFF00FFFFFFFFFFFFLL;
                  v48 = (v46 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v46 & 0x1000000000000) == 0;
                  v49 = (v46 >> 50) & 0x3F;
                  if (v48 && (_DWORD)v49 != 0)
                  {
                    v40 = v49 > 0x34;
                    v51 = (1 << v49) & 0x12400001800284;
                    if (v40 || v51 == 0)
                    {
                      v120 = v47;
                      v53 = *(_DWORD *)(v47 + 52);
                      *(_DWORD *)(v47 + 52) = v53 + 1;
                      if (!v53)
                      {
                        if (v22 == (_DWORD)v117)
                        {
                          v114 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v116, v22 + 1, (unint64_t)&v120);
                          v22 = HIDWORD(v117);
                          *((_QWORD *)v116 + HIDWORD(v117)) = *v114;
                          v27 = *(_QWORD *)(v26 + 24);
                          v44 = *(_QWORD *)(v26 + 32);
                        }
                        else
                        {
                          *((_QWORD *)v116 + v22) = v47;
                        }
                        HIDWORD(v117) = ++v22;
                      }
                    }
                  }
                  ++v45;
                }
                while (v45 < (v27 + v44));
              }
            }
            else
            {
              v28 = v27 & 0xFF00FFFFFFFFFFFFLL;
              if ((v27 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                if ((v27 & 0x1000000000000) == 0)
                {
                  v31 = (v27 >> 50) & 0x3F;
                  if ((_DWORD)v31)
                  {
                    v40 = v31 > 0x34;
                    v41 = (1 << v31) & 0x12400001800284;
                    if (v40 || v41 == 0)
                    {
                      v120 = v28;
                      v43 = *(_DWORD *)(v28 + 52);
                      *(_DWORD *)(v28 + 52) = v43 + 1;
                      if (!v43)
                      {
                        if (v22 == (_DWORD)v117)
                        {
                          v107 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v116, v22 + 1, (unint64_t)&v120);
                          v22 = HIDWORD(v117);
                          *((_QWORD *)v116 + HIDWORD(v117)) = *v107;
                        }
                        else
                        {
                          *((_QWORD *)v116 + v22) = v28;
                        }
                        HIDWORD(v117) = ++v22;
                      }
                    }
                  }
                }
                v32 = *(_QWORD *)(v26 + 32);
                v33 = v32 & 0xFF00FFFFFFFFFFFFLL;
                if ((v32 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  if ((v32 & 0x1000000000000) == 0)
                  {
                    v34 = (v32 >> 50) & 0x3F;
                    if ((_DWORD)v34)
                    {
                      v40 = v34 > 0x34;
                      v54 = (1 << v34) & 0x12400001800284;
                      if (v40 || v54 == 0)
                      {
                        v120 = v33;
                        v56 = *(_DWORD *)(v33 + 52);
                        *(_DWORD *)(v33 + 52) = v56 + 1;
                        if (!v56)
                        {
                          if (v22 == (_DWORD)v117)
                          {
                            v109 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v116, v22 + 1, (unint64_t)&v120);
                            v22 = HIDWORD(v117);
                            *((_QWORD *)v116 + HIDWORD(v117)) = *v109;
                          }
                          else
                          {
                            *((_QWORD *)v116 + v22) = v33;
                          }
                          HIDWORD(v117) = ++v22;
                        }
                      }
                    }
                  }
                  v35 = *(_QWORD *)(v26 + 40);
                  v36 = v35 & 0xFF00FFFFFFFFFFFFLL;
                  v37 = (v35 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v35 & 0x1000000000000) == 0;
                  v38 = (v35 >> 50) & 0x3F;
                  if (v37 && (_DWORD)v38 != 0)
                  {
                    v40 = v38 > 0x34;
                    v57 = (1 << v38) & 0x12400001800284;
                    if (v40 || v57 == 0)
                    {
                      v120 = v36;
                      v59 = *(_DWORD *)(v36 + 52);
                      *(_DWORD *)(v36 + 52) = v59 + 1;
                      if (!v59)
                      {
                        if (v22 == (_DWORD)v117)
                        {
                          v111 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v116, v22 + 1, (unint64_t)&v120);
                          v22 = HIDWORD(v117);
                          *((_QWORD *)v116 + HIDWORD(v117)) = *v111;
                        }
                        else
                        {
                          *((_QWORD *)v116 + v22) = v36;
                        }
                        HIDWORD(v117) = ++v22;
                      }
                    }
                  }
                }
              }
            }
            v29 = v119;
            if ((*(_BYTE *)(v119 + 56) & 8) != 0)
            {
              v30 = *(_DWORD *)(v119 + 52);
              *(_DWORD *)(v119 + 52) = v30 + 1;
              if (!v30)
              {
                if (v22 == (_DWORD)v117)
                {
                  v60 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v116, v22 + 1, (unint64_t)&v119);
                  v22 = HIDWORD(v117);
                  *((_QWORD *)v116 + HIDWORD(v117)) = *v60;
                }
                else
                {
                  *((_QWORD *)v116 + v22) = v29;
                }
                HIDWORD(v117) = ++v22;
              }
            }
          }
          while (v25);
          this = v115;
        }
      }
      ++v23;
    }
    while (v23 < *((unsigned int *)this + 15));
    if (v22)
    {
      v61 = v22;
      while (1)
      {
        v62 = v116;
        v63 = *((_QWORD *)v116 + v61 - 1);
        v64 = v61 - 1;
        HIDWORD(v117) = v61 - 1;
        if ((*(_BYTE *)(v63 + 56) & 0x10) != 0)
        {
          v81 = *(_QWORD *)(v63 + 24);
          v82 = *(_QWORD *)(v63 + 32);
          if ((int)v82 + (int)v81 > v81)
          {
            v83 = *(_QWORD *)(v63 + 24);
            do
            {
              if (v83 >= *((unsigned int *)v115 + 41))
              {
                __break(0xC471u);
                JUMPOUT(0x1983D05ECLL);
              }
              v84 = *(_QWORD *)(*((_QWORD *)v115 + 19) + 8 * v83);
              v85 = v84 & 0xFF00FFFFFFFFFFFFLL;
              if ((v84 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                if ((v84 & 0x1000000000000) != 0
                  || (v86 = (v84 >> 50) & 0x3F, !(_DWORD)v86)
                  || ((v40 = v86 > 0x34, v88 = (1 << v86) & 0x12400001800284, !v40)
                    ? (v89 = v88 == 0)
                    : (v89 = 1),
                      !v89))
                {
                  if (*(_WORD *)(v63 + 18) == 30)
                  {
                    v112 = *(_DWORD *)(v63 + 72) + ~*(_DWORD *)((v81 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
                    if (*((_DWORD *)v115 + 77) <= v112)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1983D05F4);
                    }
                    ++*(_WORD *)(*((_QWORD *)v115 + 37) + 8 * v112);
                  }
                  v120 = v85;
                  v87 = *(_DWORD *)(v85 + 52);
                  *(_DWORD *)(v85 + 52) = v87 + 1;
                  if (!v87)
                  {
                    if ((_DWORD)v64 == (_DWORD)v117)
                    {
                      v106 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v116, v64 + 1, (unint64_t)&v120);
                      LODWORD(v64) = HIDWORD(v117);
                      *((_QWORD *)v116 + HIDWORD(v117)) = *v106;
                      v81 = *(_QWORD *)(v63 + 24);
                      v82 = *(_QWORD *)(v63 + 32);
                    }
                    else
                    {
                      *((_QWORD *)v116 + v64) = v85;
                    }
                    LODWORD(v64) = v64 + 1;
                    HIDWORD(v117) = v64;
                  }
                }
              }
              ++v83;
            }
            while (v83 < (v81 + v82));
          }
        }
        else
        {
          v65 = *(_QWORD *)(v63 + 24);
          v66 = v65 & 0xFF00FFFFFFFFFFFFLL;
          if ((v65 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            if ((v65 & 0x1000000000000) == 0)
            {
              v67 = (v65 >> 50) & 0x3F;
              if ((_DWORD)v67)
              {
                v40 = v67 > 0x34;
                v77 = (1 << v67) & 0x12400001800284;
                if (v40 || v77 == 0)
                  goto LABEL_111;
              }
            }
            if (*(_WORD *)(v63 + 18) == 30)
            {
              v105 = *(_DWORD *)(v63 + 72) + ~*(_DWORD *)(v66 + 48);
              if (*((_DWORD *)v115 + 77) <= v105)
                goto LABEL_214;
              ++*(_WORD *)(*((_QWORD *)v115 + 37) + 8 * v105);
            }
            v120 = v66;
            v68 = *(_DWORD *)(v66 + 52);
            *(_DWORD *)(v66 + 52) = v68 + 1;
            if (v68)
            {
LABEL_111:
              v69 = *(_QWORD *)(v63 + 32);
              v70 = v69 & 0xFF00FFFFFFFFFFFFLL;
              if ((v69 & 0xFF00FFFFFFFFFFFFLL) != 0)
                goto LABEL_112;
            }
            else
            {
              if ((_DWORD)v64 == (_DWORD)v117)
              {
                v102 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v116, v64 + 1, (unint64_t)&v120);
                LODWORD(v64) = HIDWORD(v117);
                *((_QWORD *)v116 + HIDWORD(v117)) = *v102;
              }
              else
              {
                *((_QWORD *)v62 + v64) = v66;
              }
              LODWORD(v64) = v64 + 1;
              HIDWORD(v117) = v64;
              v69 = *(_QWORD *)(v63 + 32);
              v70 = v69 & 0xFF00FFFFFFFFFFFFLL;
              if ((v69 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
LABEL_112:
                if ((v69 & 0x1000000000000) != 0
                  || (v71 = (v69 >> 50) & 0x3F, !(_DWORD)v71)
                  || ((v40 = v71 > 0x34, v79 = (1 << v71) & 0x12400001800284, !v40)
                    ? (v80 = v79 == 0)
                    : (v80 = 1),
                      !v80))
                {
                  if (*(_WORD *)(v63 + 18) == 30)
                  {
                    v108 = *(_DWORD *)(v63 + 72) + ~*(_DWORD *)((*(_QWORD *)(v63 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x30);
                    if (*((_DWORD *)v115 + 77) <= v108)
                      goto LABEL_214;
                    ++*(_WORD *)(*((_QWORD *)v115 + 37) + 8 * v108);
                  }
                  v120 = v70;
                  v72 = *(_DWORD *)(v70 + 52);
                  *(_DWORD *)(v70 + 52) = v72 + 1;
                  if (!v72)
                  {
                    if ((_DWORD)v64 == (_DWORD)v117)
                    {
                      v103 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v116, v64 + 1, (unint64_t)&v120);
                      LODWORD(v64) = HIDWORD(v117);
                      *((_QWORD *)v116 + HIDWORD(v117)) = *v103;
                    }
                    else
                    {
                      *((_QWORD *)v116 + v64) = v70;
                    }
                    LODWORD(v64) = v64 + 1;
                    HIDWORD(v117) = v64;
                  }
                }
                v73 = *(_QWORD *)(v63 + 40);
                v74 = v73 & 0xFF00FFFFFFFFFFFFLL;
                if ((v73 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  if ((v73 & 0x1000000000000) != 0
                    || (v75 = (v73 >> 50) & 0x3F, !(_DWORD)v75)
                    || ((v40 = v75 > 0x34, v96 = (1 << v75) & 0x12400001800284, !v40)
                      ? (v97 = v96 == 0)
                      : (v97 = 1),
                        !v97))
                  {
                    if (*(_WORD *)(v63 + 18) == 30)
                    {
                      v110 = *(_DWORD *)(v63 + 72) + ~*(_DWORD *)((*(_QWORD *)(v63 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x30);
                      if (*((_DWORD *)v115 + 77) <= v110)
                        goto LABEL_214;
                      ++*(_WORD *)(*((_QWORD *)v115 + 37) + 8 * v110);
                    }
                    v120 = v74;
                    v76 = *(_DWORD *)(v74 + 52);
                    *(_DWORD *)(v74 + 52) = v76 + 1;
                    if (!v76)
                    {
                      if ((_DWORD)v64 == (_DWORD)v117)
                      {
                        v104 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v116, v64 + 1, (unint64_t)&v120);
                        LODWORD(v64) = HIDWORD(v117);
                        *((_QWORD *)v116 + HIDWORD(v117)) = *v104;
                      }
                      else
                      {
                        *((_QWORD *)v116 + v64) = v74;
                      }
                      LODWORD(v64) = v64 + 1;
                      HIDWORD(v117) = v64;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v64;
        if (!(_DWORD)v64)
        {
          if (*((_DWORD *)v115 + 236) != 2)
            break;
          v90 = *((_DWORD *)v115 + 15);
          if (!v90)
            break;
          v61 = 0;
          do
          {
            if (*((_DWORD *)v115 + 15) <= --v90)
            {
              __break(0xC471u);
              JUMPOUT(0x1983D05FCLL);
            }
            v91 = *(_QWORD *)(*((_QWORD *)v115 + 6) + 8 * v90);
            if (v91)
            {
              v92 = *(_DWORD *)(v91 + 220);
              if (v92)
              {
                v93 = v92 - 1;
                v94 = 8 * (v92 - 1);
                do
                {
                  if (*(_DWORD *)(v91 + 220) <= v93)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983D05DCLL);
                  }
                  v95 = *(_QWORD *)(*(_QWORD *)(v91 + 208) + v94);
                  if (*(_WORD *)(v95 + 18) == 26 && !*(_DWORD *)(v95 + 52) && *(_DWORD *)(*(_QWORD *)(v95 + 72) + 52))
                  {
                    v120 = *(_QWORD *)(*(_QWORD *)(v91 + 208) + v94);
                    *(_DWORD *)(v95 + 52) = 1;
                    if (v61 == (_DWORD)v117)
                    {
                      v113 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v116, v61 + 1, (unint64_t)&v120);
                      v61 = HIDWORD(v117);
                      *((_QWORD *)v116 + HIDWORD(v117)) = *v113;
                    }
                    else
                    {
                      *((_QWORD *)v116 + v61) = v95;
                    }
                    HIDWORD(v117) = ++v61;
                  }
                  v94 -= 8;
                  --v93;
                }
                while (v93 != -1);
              }
            }
          }
          while (v90);
          if (!v61)
            break;
        }
      }
    }
  }
  v98 = v116;
  if (v118 != (_BYTE *)v116 && v116 != 0)
  {
    v116 = 0;
    LODWORD(v117) = 0;
    WTF::fastFree((unint64_t)v98, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::DFG::Graph::killBlockAndItsContents(JSC::DFG::Graph *this, JSC::DFG::BasicBlock::SSAData **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::BasicBlock *v8;
  JSC::DFG::BasicBlock::SSAData *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  JSC::DFG::Node **v15;
  JSC::DFG::Node **v16;
  unint64_t StatusReg;
  _UNKNOWN **v18;
  int *v19;
  _QWORD *v20;
  JSC::DFG::Node *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _UNKNOWN **v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  const void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  JSC::DFG::BasicBlock *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  JSC::DFG::Node **v62;
  JSC::DFG::Node *v63;
  uint64_t v64;
  JSC::DFG::Node **v65;
  JSC::DFG::Node *v66;
  JSC::DFG::BasicBlock *v67;

  v8 = (JSC::DFG::BasicBlock *)a2;
  v10 = a2[25];
  if (v10)
    JSC::DFG::BasicBlock::SSAData::invalidate(v10, a2, a3, a4, a5, a6, a7, a8);
  v11 = *((_DWORD *)v8 + 9);
  if (v11)
  {
    v12 = v11 - 1;
    v13 = 8 * (v11 - 1);
    do
    {
      if (*((_DWORD *)v8 + 9) <= v12)
      {
        __break(0xC471u);
        JUMPOUT(0x1983D0AF0);
      }
      JSC::DFG::Graph::deleteNode(this, *(JSC::DFG::Node **)(*((_QWORD *)v8 + 3) + v13), a3, a4, a5, a6, a7, a8);
      v13 -= 8;
      --v12;
    }
    while (v12 != -1);
  }
  v14 = *((unsigned int *)v8 + 55);
  if ((_DWORD)v14)
  {
    v15 = (JSC::DFG::Node **)*((_QWORD *)v8 + 26);
    v16 = &v15[v14];
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v18 = &bmalloc_heap_config;
    v19 = &bmalloc_megapage_table;
    v20 = &unk_1ECF42000;
    while (1)
    {
      v21 = *v15;
      if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
      {
        if (*((_DWORD *)this + 236) == 2)
        {
          v57 = *((unsigned int *)this + 15);
          if ((_DWORD)v57)
          {
            v58 = 0;
            v59 = *((_QWORD *)this + 6);
            while (!*(_QWORD *)(v59 + 8 * v58))
            {
              if (v57 == ++v58)
                goto LABEL_10;
            }
            if ((_DWORD)v57 != (_DWORD)v58)
            {
              v58 = v58;
              while (v57 > v58)
              {
                v60 = *(_QWORD *)(*(_QWORD *)(v59 + 8 * v58) + 200);
                v61 = *(unsigned int *)(v60 + 76);
                if ((_DWORD)v61)
                {
                  v62 = *(JSC::DFG::Node ***)(v60 + 64);
                  do
                  {
                    v63 = *v62++;
                    if (v63 == v21)
                    {
                      JSC::DFG::Graph::logAssertionFailure(this, *v15, (const WTF::CString *)"./dfg/DFGGraph.cpp", (const char *)0x2A1, "void JSC::DFG::Graph::deleteNode(Node *)", "!block->ssa->liveAtHead.contains(node)");
                      __break(0xC471u);
                      JUMPOUT(0x1983D0AA0);
                    }
                    --v61;
                  }
                  while (v61);
                }
                v64 = *(unsigned int *)(v60 + 92);
                if ((_DWORD)v64)
                {
                  v65 = *(JSC::DFG::Node ***)(v60 + 80);
                  do
                  {
                    v66 = *v65++;
                    if (v66 == v21)
                    {
                      JSC::DFG::Graph::logAssertionFailure(this, *v15, (const WTF::CString *)"./dfg/DFGGraph.cpp", (const char *)0x2A2, "void JSC::DFG::Graph::deleteNode(Node *)", "!block->ssa->liveAtTail.contains(node)");
                      __break(0xC471u);
                      JUMPOUT(0x1983D0AE8);
                    }
                    --v64;
                  }
                  while (v64);
                }
                if (v57 > ++v58)
                {
                  while (!*(_QWORD *)(v59 + 8 * v58))
                  {
                    if (v57 == ++v58)
                      goto LABEL_10;
                  }
                  v58 = v58;
                }
                if (v57 == v58)
                  goto LABEL_10;
              }
LABEL_83:
              __break(0xC471u);
              JUMPOUT(0x1983D0908);
            }
          }
        }
      }
LABEL_10:
      v22 = *((unsigned int *)v21 + 5);
      v23 = *((_QWORD *)this + 129);
      if (*(JSC::DFG::Node **)(v23 + 8 * v22) != v21)
        goto LABEL_83;
      v24 = *((unsigned int *)this + 265);
      if ((_DWORD)v24 == *((_DWORD *)this + 264))
      {
        v67 = v8;
        v31 = StatusReg;
        v32 = v18;
        v33 = v24 + (v24 >> 2);
        if (v33 >= 0x10)
          v34 = v33 + 1;
        else
          v34 = 16;
        if (v34 <= v24 + 1)
          v35 = v24 + 1;
        else
          v35 = v34;
        if (v35 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1983D0AF8);
        }
        v36 = (const void *)*((_QWORD *)this + 131);
        v37 = (void *)WTF::fastMalloc((WTF *)(8 * v35));
        *((_DWORD *)this + 264) = v35;
        *((_QWORD *)this + 131) = v37;
        memcpy(v37, v36, 8 * v24);
        v18 = v32;
        StatusReg = v31;
        v8 = v67;
        if (v36)
        {
          if (*((const void **)this + 131) == v36)
          {
            *((_QWORD *)this + 131) = 0;
            *((_DWORD *)this + 264) = 0;
          }
          WTF::fastFree((unint64_t)v36, a2, a3, a4, a5, a6, a7, a8);
        }
        v24 = *((unsigned int *)this + 265);
        *(_QWORD *)(*((_QWORD *)this + 131) + 8 * v24) = *((unsigned int *)v21 + 5);
        v23 = *((_QWORD *)this + 129);
        v19 = &bmalloc_megapage_table;
        v20 = (_QWORD *)&unk_1ECF42000;
      }
      else
      {
        *(_QWORD *)(*((_QWORD *)this + 131) + 8 * v24) = v22;
      }
      *((_DWORD *)this + 265) = v24 + 1;
      v25 = *((unsigned int *)v21 + 5);
      v26 = *(_QWORD *)(v23 + 8 * v25);
      *(_QWORD *)(v23 + 8 * v25) = 0;
      if (!v26)
        goto LABEL_21;
      v27 = *(_QWORD *)(v26 + 8);
      if ((v27 & 1) != 0 && (v27 & 0xFFFFFFFF8) != 0)
      {
        v53 = v20;
        WTF::fastFree(v27 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        v20 = v53;
        v19 = &bmalloc_megapage_table;
      }
      v28 = *(_QWORD *)v26;
      if ((*(_QWORD *)v26 & 1) != 0 && (v28 & 0xFFFFFFFF8) != 0)
      {
        v54 = v20;
        WTF::fastFree(v28 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        v20 = v54;
        v19 = &bmalloc_megapage_table;
      }
      v29 = *(_QWORD *)(StatusReg + 752);
      if (!v29)
        break;
      if (v26 >> 43 || ((*(unsigned int *)((char *)v19 + ((v26 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v26)) & 1) == 0)
      {
        v49 = (unint64_t *)v20[191];
        if (v26 >> 24 < *v49 || v49[1] <= v26 >> 24)
        {
          a4 = 0;
LABEL_44:
          v50 = v26;
          v51 = v19;
          v52 = v20;
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v29, v50, 1, a4, a5, a6, a7, a8);
LABEL_45:
          v20 = v52;
          v19 = v51;
          goto LABEL_21;
        }
        a4 = (*(_DWORD *)((char *)v49 + ((((v26 >> 24) - *v49) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v26) - *(_BYTE *)v49) & 0xF))) & 3;
        if ((_DWORD)a4 != 1)
          goto LABEL_44;
      }
      v30 = *(unsigned int *)(v29 + 8000);
      if (v30 >= 0x3E7)
      {
        v56 = v26;
        v51 = v19;
        v52 = v20;
        pas_thread_local_cache_append_deallocation_slow(v29, v56, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        goto LABEL_45;
      }
      *(_QWORD *)(v29 + 8 * v30) = v26 | 0x5000000000000;
      *(_DWORD *)(v29 + 8000) = v30 + 1;
LABEL_21:
      if (++v15 == v16)
        goto LABEL_35;
    }
    v55 = v26;
    v51 = v19;
    v52 = v20;
    pas_try_deallocate_slow_no_cache(v55, (uint64_t)v18, 1);
    goto LABEL_45;
  }
LABEL_35:
  v38 = *((unsigned int *)v8 + 2);
  if (*((_DWORD *)this + 15) <= v38)
  {
    __break(0xC471u);
    JUMPOUT(0x1983D0B00);
  }
  v39 = *((_QWORD *)this + 6);
  v40 = *(JSC::DFG::BasicBlock **)(v39 + 8 * v38);
  *(_QWORD *)(v39 + 8 * v38) = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 1)
    {
      JSC::DFG::BasicBlock::~BasicBlock(v40, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
    }
    else
    {
      --*(_DWORD *)v40;
    }
  }
}

void JSC::DFG::BasicBlock::SSAData::invalidate(JSC::DFG::BasicBlock::SSAData *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  if (*((_DWORD *)this + 22))
  {
    if (*((_DWORD *)this + 23))
      *((_DWORD *)this + 23) = 0;
    v9 = *((_QWORD *)this + 10);
    if (v9)
    {
      *((_QWORD *)this + 10) = 0;
      *((_DWORD *)this + 22) = 0;
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*((_DWORD *)this + 18))
  {
    if (*((_DWORD *)this + 19))
      *((_DWORD *)this + 19) = 0;
    v10 = *((_QWORD *)this + 8);
    if (v10)
    {
      *((_QWORD *)this + 8) = 0;
      *((_DWORD *)this + 18) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*((_DWORD *)this + 26))
  {
    v11 = *((unsigned int *)this + 27);
    v12 = *((_QWORD *)this + 12);
    if ((_DWORD)v11)
    {
      v13 = 40 * v11;
      v14 = (uint64_t *)(v12 + 8);
      do
      {
        v16 = *v14;
        v14 += 5;
        v15 = v16;
        if ((v16 & 1) != 0)
          WTF::fastFree(v15 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v13 -= 40;
      }
      while (v13);
      *((_DWORD *)this + 27) = 0;
      v12 = *((_QWORD *)this + 12);
    }
    if (v12)
    {
      *((_QWORD *)this + 12) = 0;
      *((_DWORD *)this + 26) = 0;
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*((_DWORD *)this + 30))
  {
    v17 = *((unsigned int *)this + 31);
    v18 = *((_QWORD *)this + 14);
    if ((_DWORD)v17)
    {
      v19 = 40 * v17;
      v20 = (uint64_t *)(v18 + 8);
      do
      {
        v22 = *v20;
        v20 += 5;
        v21 = v22;
        if ((v22 & 1) != 0)
          WTF::fastFree(v21 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v19 -= 40;
      }
      while (v19);
      *((_DWORD *)this + 31) = 0;
      v18 = *((_QWORD *)this + 14);
    }
    if (v18)
    {
      *((_QWORD *)this + 14) = 0;
      *((_DWORD *)this + 30) = 0;
      WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::DFG::Graph::killUnreachableBlocks(JSC::DFG::Graph *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v9 = *((unsigned int *)this + 15);
  if (*((_DWORD *)this + 236) != 2)
    goto LABEL_2;
  if (!(_DWORD)v9)
    return;
  v13 = 0;
  while (!*(_QWORD *)(*((_QWORD *)this + 6) + 8 * v13))
  {
    if (v9 == ++v13)
      goto LABEL_2;
  }
  if ((_DWORD)v9 == (_DWORD)v13)
  {
LABEL_2:
    LODWORD(v10) = *((_DWORD *)this + 15);
LABEL_3:
    v14 = 0;
    if ((_DWORD)v10)
    {
      v11 = 0;
      do
      {
        v12 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v11);
        if (v12 && !*(_BYTE *)(v12 + 21))
        {
          if ((_BYTE)word_1ECF4C328)
            WTF::dataLog<char [2],unsigned int,char [3]>("Basic block #", &v14, " was killed because it was unreachable\n");
          JSC::DFG::Graph::killBlockAndItsContents(this, (JSC::DFG::BasicBlock::SSAData **)v12, a3, a4, a5, a6, a7, a8);
          v11 = v14;
          LODWORD(v10) = *((_DWORD *)this + 15);
        }
        v14 = ++v11;
      }
      while (v11 < v10);
    }
  }
  else
  {
    LODWORD(v10) = *((_DWORD *)this + 15);
    while (v10 > v13)
    {
      JSC::DFG::BasicBlock::SSAData::invalidate(*(JSC::DFG::BasicBlock::SSAData **)(*(_QWORD *)(*((_QWORD *)this + 6) + 8 * v13) + 200), a2, a3, a4, a5, a6, a7, a8);
      v13 = (v13 + 1);
      v10 = *((unsigned int *)this + 15);
      if (v10 > v13)
      {
        while (!*(_QWORD *)(*((_QWORD *)this + 6) + 8 * v13))
        {
          if (v10 == ++v13)
          {
            LODWORD(v13) = *((_DWORD *)this + 15);
            break;
          }
        }
      }
      if ((_DWORD)v9 == (_DWORD)v13)
        goto LABEL_3;
    }
    __break(0xC471u);
  }
}

void JSC::DFG::Graph::invalidateCFG(JSC::DFG::Graph *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;

  v9 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 24);
    if (v10)
    {
      *(_QWORD *)(v9 + 24) = 0;
      *(_DWORD *)(v9 + 32) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    v11 = *(unsigned int *)(v9 + 20);
    v12 = *(_QWORD *)(v9 + 8);
    if ((_DWORD)v11)
    {
      v13 = 40 * v11;
      do
      {
        v14 = *(_QWORD *)v12;
        if (*(_QWORD *)v12)
        {
          *(_QWORD *)v12 = 0;
          *(_DWORD *)(v12 + 8) = 0;
          WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
        }
        v12 += 40;
        v13 -= 40;
      }
      while (v13);
      v12 = *(_QWORD *)(v9 + 8);
    }
    if (v12)
    {
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v15)
  {
    v16 = *(unsigned int *)(v15 + 20);
    v17 = *(_QWORD *)(v15 + 8);
    if ((_DWORD)v16)
    {
      v18 = 32 * v16;
      do
      {
        v19 = *(_QWORD *)v17;
        if (*(_QWORD *)v17)
        {
          *(_QWORD *)v17 = 0;
          *(_DWORD *)(v17 + 8) = 0;
          WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
        }
        v17 += 32;
        v18 -= 32;
      }
      while (v18);
      v17 = *(_QWORD *)(v15 + 8);
    }
    if (v17)
    {
      *(_QWORD *)(v15 + 8) = 0;
      *(_DWORD *)(v15 + 16) = 0;
      WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  std::unique_ptr<JSC::DFG::NaturalLoops<JSC::DFG::CPSCFG>>::reset[abi:sn180100]((unint64_t *)this + 99, 0, a3, a4, a5, a6, a7, a8);
  std::unique_ptr<JSC::DFG::NaturalLoops<JSC::DFG::CFG>>::reset[abi:sn180100]((unint64_t *)this + 100, 0, v20, v21, v22, v23, v24, v25);
  v33 = *((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = 0;
  if (v33)
    WTF::fastFree(v33, v26, v27, v28, v29, v30, v31, v32);
  v34 = *((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v34)
  {
    v35 = *(_QWORD *)(v34 + 24);
    if (v35)
    {
      *(_QWORD *)(v34 + 24) = 0;
      *(_DWORD *)(v34 + 32) = 0;
      WTF::fastFree(v35, v26, v27, v28, v29, v30, v31, v32);
    }
    v36 = *(unsigned int *)(v34 + 20);
    v37 = *(_QWORD *)(v34 + 8);
    if ((_DWORD)v36)
    {
      v38 = 40 * v36;
      do
      {
        v39 = *(_QWORD *)v37;
        if (*(_QWORD *)v37)
        {
          *(_QWORD *)v37 = 0;
          *(_DWORD *)(v37 + 8) = 0;
          WTF::fastFree(v39, v26, v27, v28, v29, v30, v31, v32);
        }
        v37 += 40;
        v38 -= 40;
      }
      while (v38);
      v37 = *(_QWORD *)(v34 + 8);
    }
    if (v37)
    {
      *(_QWORD *)(v34 + 8) = 0;
      *(_DWORD *)(v34 + 16) = 0;
      WTF::fastFree(v37, v26, v27, v28, v29, v30, v31, v32);
    }
    WTF::fastFree(v34, v26, v27, v28, v29, v30, v31, v32);
  }
  v40 = *((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = 0;
  if (v40)
  {
    v41 = *(_QWORD *)(v40 + 88);
    if ((v41 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v41, v26, v27, v28, v29, v30, v31, v32);
    v42 = *(_QWORD *)(v40 + 8);
    if (v40 + 24 != v42 && v42 != 0)
    {
      *(_QWORD *)(v40 + 8) = 0;
      *(_DWORD *)(v40 + 16) = 0;
      WTF::fastFree(v42, v26, v27, v28, v29, v30, v31, v32);
    }
    WTF::fastFree(v40, v26, v27, v28, v29, v30, v31, v32);
  }
  v44 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v44)
  {
    v45 = *(_QWORD *)(v44 + 88);
    if ((v45 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v45, v26, v27, v28, v29, v30, v31, v32);
    v46 = *(_QWORD *)(v44 + 8);
    if (v44 + 24 != v46 && v46 != 0)
    {
      *(_QWORD *)(v44 + 8) = 0;
      *(_DWORD *)(v44 + 16) = 0;
      WTF::fastFree(v46, v26, v27, v28, v29, v30, v31, v32);
    }
    WTF::fastFree(v44, v26, v27, v28, v29, v30, v31, v32);
  }
}

uint64_t JSC::DFG::Graph::substituteGetLocal(uint64_t result, uint64_t a2, unsigned int a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;

  v5 = *(unsigned int *)(a2 + 220);
  if (v5 <= a3)
    return result;
  v6 = *(_QWORD *)(a2 + 208);
  v7 = a3;
  while (1)
  {
    while (1)
    {
      v8 = *(_QWORD *)(v6 + 8 * v7);
      v9 = *(unsigned __int16 *)(v8 + 18);
      if (v9 != 16)
        break;
      v10 = *(_QWORD **)(v8 + 72);
      v11 = v10;
      do
      {
        v12 = v11;
        v11 = (_QWORD *)*v11;
      }
      while (v11);
      if (v12 != v10)
        *v10 = v12;
      v13 = v12[3];
      v14 = a4[3];
      if (HIDWORD(v13) != HIDWORD(v14))
        goto LABEL_5;
      ++v7;
      if ((_DWORD)v13 == (_DWORD)v14 || v7 == v5)
        return result;
    }
    if (v9 == 15)
    {
      v16 = *(_QWORD **)(v8 + 72);
      v17 = v16;
      do
      {
        v18 = v17;
        v17 = (_QWORD *)*v17;
      }
      while (v17);
      if (v18 != v16)
        *v16 = v18;
      if (v18 == a4)
        break;
    }
LABEL_5:
    if (++v7 == v5)
      return result;
  }
  if (v5 <= v7)
  {
LABEL_52:
    v32 = a4[3];
    if (HIDWORD(v32) == 2)
    {
      v33 = *(unsigned int *)(a2 + 112) + (uint64_t)(int)v32 + *(unsigned int *)(a2 + 116);
    }
    else
    {
      if ((v32 & 0x80000000) == 0)
      {
        v35 = ((unint64_t)v32 << 32) - 0x500000000;
        v34 = *(_QWORD *)(a2 + 96);
        if (*(_QWORD *)(v34 + (v35 >> 29)) != v8)
          return result;
        v33 = v35 >> 32;
LABEL_56:
        *(_QWORD *)(v34 + 8 * v33) = a5;
        return result;
      }
      v33 = (a4[3] ^ 0xFFFFFFFFLL) + *(unsigned int *)(a2 + 112);
    }
    v34 = *(_QWORD *)(a2 + 96);
    if (*(_QWORD *)(v34 + 8 * v33) != v8)
      return result;
    goto LABEL_56;
  }
  v19 = *(_QWORD *)(a2 + 208);
  v20 = a5 & 0xFF00FFFFFFFFFFFFLL;
  v7 = v7;
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 8 * v7);
    v22 = *(_QWORD *)(v21 + 24);
    if ((*(_BYTE *)(v21 + 56) & 0x10) == 0)
    {
      if ((v22 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        if (v8 == (v22 & 0xFF00FFFFFFFFFFFFLL))
          *(_QWORD *)(v21 + 24) = v22 & 0xFF000000000000 | v20;
        v23 = *(_QWORD *)(v21 + 32);
        if ((v23 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          if (v8 == (v23 & 0xFF00FFFFFFFFFFFFLL))
            *(_QWORD *)(v21 + 32) = v23 & 0xFF000000000000 | v20;
          v24 = *(_QWORD *)(v21 + 40);
          if ((v24 & 0xFF00FFFFFFFFFFFFLL) != 0 && v8 == (v24 & 0xFF00FFFFFFFFFFFFLL))
            *(_QWORD *)(v21 + 40) = v24 & 0xFF000000000000 | v20;
        }
      }
      goto LABEL_30;
    }
    v26 = *(_QWORD *)(v21 + 32);
    if ((int)v26 + (int)v22 > v22)
      break;
LABEL_30:
    if (++v7 == v5)
      goto LABEL_52;
  }
  LODWORD(v27) = *(_DWORD *)(result + 164);
  v28 = *(_QWORD *)(v21 + 24);
  if (v27 <= v22)
    v27 = v22;
  else
    v27 = v27;
  while (v27 != v28)
  {
    v29 = *(_QWORD *)(result + 152);
    v30 = *(_QWORD *)(v29 + 8 * v28);
    if ((v30 & 0xFF00FFFFFFFFFFFFLL) != 0 && v8 == (v30 & 0xFF00FFFFFFFFFFFFLL))
    {
      *(_QWORD *)(v29 + 8 * v28) = v30 & 0xFF000000000000 | v20;
      v22 = *(_QWORD *)(v21 + 24);
      v26 = *(_QWORD *)(v21 + 32);
    }
    if (++v28 >= (unint64_t)(v22 + v26))
      goto LABEL_30;
  }
  __break(0xC471u);
  return result;
}

void JSC::DFG::Graph::blocksInPreOrder(JSC::DFG::Graph *this@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  _QWORD *v48;
  WTF *v49;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t *v53;
  uint64_t v54;
  uint64_t ***v55;
  uint64_t v56;
  unint64_t v57;
  WTF *v58;
  uint64_t v59;
  _BYTE v60[128];
  _QWORD v61[2];

  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  v11 = *((unsigned int *)this + 15);
  if ((_DWORD)v11)
  {
    if (v11 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1983D16C8);
    }
    v12 = WTF::fastMalloc((WTF *)(8 * v11));
    *(_DWORD *)(a9 + 8) = v11;
    *(_QWORD *)a9 = v12;
  }
  v57 = 0x8000000000000000;
  v58 = (WTF *)v60;
  v59 = 16;
  v13 = *((unsigned int *)this + 35);
  if ((_DWORD)v13)
  {
    v14 = (uint64_t *)*((_QWORD *)this + 16);
    v15 = 8 * v13;
    do
    {
      v16 = *v14;
      v61[0] = *v14;
      v17 = v57;
      if ((v57 & 0x8000000000000000) != 0)
        v18 = 63;
      else
        v18 = *(_QWORD *)(2 * v57);
      v19 = *(unsigned int *)(v16 + 8);
      if (v18 <= v19)
      {
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v57, v19 + 1, 0);
        v17 = v57;
      }
      if (v17 >= 0)
        v20 = (unint64_t *)(2 * v17 + 8);
      else
        v20 = &v57;
      v21 = (v19 >> 3) & 0x1FFFFFF8;
      v22 = *(unint64_t *)((char *)v20 + v21);
      *(unint64_t *)((char *)v20 + v21) = v22 | (1 << v19);
      if ((v22 & (1 << v19)) == 0)
      {
        v23 = HIDWORD(v59);
        if (HIDWORD(v59) == (_DWORD)v59)
        {
          v52 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v58, HIDWORD(v59) + 1, (unint64_t)v61);
          v23 = HIDWORD(v59);
          *((_QWORD *)v58 + HIDWORD(v59)) = *v52;
        }
        else
        {
          *((_QWORD *)v58 + HIDWORD(v59)) = v16;
        }
        HIDWORD(v59) = v23 + 1;
      }
      ++v14;
      v15 -= 8;
    }
    while (v15);
    v24 = HIDWORD(v59);
    v56 = 0;
    while (HIDWORD(v59))
    {
      v25 = *((_QWORD *)v58 + v24 - 1);
      HIDWORD(v59) = v24 - 1;
      v56 = v25;
      if (!v25)
        break;
      v26 = *(unsigned int *)(a9 + 12);
      if ((_DWORD)v26 == *(_DWORD *)(a9 + 8))
      {
        v48 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, v26 + 1, (unint64_t)&v56);
        v26 = *(unsigned int *)(a9 + 12);
        *(_QWORD *)(*(_QWORD *)a9 + 8 * v26) = *v48;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a9 + 8 * v26) = v25;
      }
      *(_DWORD *)(a9 + 12) = v26 + 1;
      v27 = *(unsigned int *)(v56 + 220);
      v28 = v27 - 1;
      do
      {
        if (v28 >= v27)
        {
          __break(0xC471u);
          JUMPOUT(0x1983D16B8);
        }
        v29 = *(_QWORD *)(*(_QWORD *)(v56 + 208) + 8 * v28--);
      }
      while (*(unsigned __int16 *)(v29 + 18) - 364 > 0xB);
      v30 = 1;
      switch(*(_WORD *)(v29 + 18))
      {
        case 0x16C:
          goto LABEL_29;
        case 0x16D:
          v30 = 2;
          goto LABEL_29;
        case 0x16E:
          v30 = *(_DWORD *)(*(_QWORD *)(v29 + 72) + 12) + 1;
          goto LABEL_72;
        case 0x16F:
          v30 = *(_DWORD *)(*(_QWORD *)(v29 + 72) + 12);
LABEL_72:
          if (!v30)
            goto LABEL_57;
LABEL_29:
          v31 = v30;
          break;
        default:
          goto LABEL_57;
      }
      do
      {
        v32 = v31--;
        v33 = *(unsigned int *)(v56 + 220);
        v34 = v33 - 1;
        do
        {
          if (v34 >= v33)
          {
            __break(0xC471u);
            JUMPOUT(0x1983D16B0);
          }
          v35 = *(_QWORD *)(*(_QWORD *)(v56 + 208) + 8 * v34);
          v36 = *(unsigned __int16 *)(v35 + 18);
          --v34;
        }
        while ((v36 - 364) > 0xB);
        if (v36 == 366)
        {
          v38 = *(_QWORD *)(v35 + 72);
          v47 = *(_DWORD *)(v38 + 12);
          if (v47 <= v31)
          {
            if (v47 != v31)
            {
              __break(0xC471u);
              JUMPOUT(0x1983D1584);
            }
          }
          else
          {
            v38 = *(_QWORD *)v38 + 32 * v31;
          }
          goto LABEL_40;
        }
        if (v36 == 367)
        {
          v54 = *(_QWORD *)(v35 + 72);
          if (*(_DWORD *)(v54 + 12) <= v31)
          {
            __break(0xC471u);
            JUMPOUT(0x1983D16C0);
          }
          v37 = (_QWORD *)(*(_QWORD *)v54 + 8 * v31);
        }
        else
        {
          if (v32 != 1)
          {
            if (v32 != 2)
            {
              __break(0xC471u);
              JUMPOUT(0x1983D16A8);
            }
            v38 = *(_QWORD *)(v35 + 72);
LABEL_40:
            v37 = (_QWORD *)(v38 + 16);
            goto LABEL_41;
          }
          v37 = (_QWORD *)(v35 + 72);
          if (v36 != 364)
            v37 = (_QWORD *)*v37;
        }
LABEL_41:
        v39 = (_QWORD *)*v37;
        v61[0] = *v37;
        v40 = v57;
        if ((v57 & 0x8000000000000000) != 0)
          v41 = 63;
        else
          v41 = *(_QWORD *)(2 * v57);
        v42 = *((unsigned int *)v39 + 2);
        if (v41 <= v42)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v57, v42 + 1, 0);
          v40 = v57;
        }
        if (v40 >= 0)
          v43 = (unint64_t *)(2 * v40 + 8);
        else
          v43 = &v57;
        v44 = (v42 >> 3) & 0x1FFFFFF8;
        v45 = *(unint64_t *)((char *)v43 + v44);
        *(unint64_t *)((char *)v43 + v44) = v45 | (1 << v42);
        if ((v45 & (1 << v42)) == 0)
        {
          v46 = HIDWORD(v59);
          if (HIDWORD(v59) == (_DWORD)v59)
          {
            v51 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v58, HIDWORD(v59) + 1, (unint64_t)v61);
            v46 = HIDWORD(v59);
            *((_QWORD *)v58 + HIDWORD(v59)) = *v51;
          }
          else
          {
            *((_QWORD *)v58 + HIDWORD(v59)) = v39;
          }
          HIDWORD(v59) = v46 + 1;
        }
      }
      while (v31);
LABEL_57:
      v56 = 0;
      v24 = HIDWORD(v59);
    }
  }
  if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
  {
    if (*((_DWORD *)this + 236) == 2 || *((_BYTE *)this + 962))
    {
      v53 = JSC::DFG::Graph::ensureSSADominators(this);
      JSC::DFG::Graph::blocksInPreOrder(void)::$_0::operator()<JSC::DFG::Dominators<JSC::DFG::CFG>>(*(_QWORD *)a9, *(_DWORD *)(a9 + 12), v53[1], *((_DWORD *)v53 + 5));
    }
    else
    {
      v55 = JSC::DFG::Graph::ensureCPSDominators(this);
      JSC::DFG::Graph::blocksInPreOrder(void)::$_0::operator()<JSC::DFG::Dominators<JSC::DFG::CPSCFG>>(*(_QWORD *)a9, *(_DWORD *)(a9 + 12), (uint64_t)v55[1], *((_DWORD *)v55 + 5));
    }
  }
  v49 = v58;
  if (v60 != (_BYTE *)v58 && v58 != 0)
  {
    v58 = 0;
    LODWORD(v59) = 0;
    WTF::fastFree((unint64_t)v49, a2, a3, a4, a5, a6, a7, a8);
  }
  if ((v57 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v57, a2, a3, a4, a5, a6, a7, a8);
}

BOOL WTF::GraphNodeWorklist<JSC::DFG::BasicBlock *,JSC::DFG::BlockSet>::push(WTF::BitVector *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  WTF::BitVector *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;

  v15 = a2;
  v4 = *(unsigned int *)(a2 + 8);
  v5 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x8000000000000000) != 0)
    v6 = 63;
  else
    v6 = *(_QWORD *)(2 * v5);
  if (v6 <= v4)
  {
    WTF::BitVector::resizeOutOfLine(this, v4 + 1, 0);
    v5 = *(_QWORD *)this;
  }
  if (v5 >= 0)
    v7 = (WTF::BitVector *)(2 * v5 + 8);
  else
    v7 = this;
  v8 = (v4 >> 3) & 0x1FFFFFF8;
  v9 = *(_QWORD *)((char *)v7 + v8);
  *(_QWORD *)((char *)v7 + v8) = v9 | (1 << v4);
  v10 = v9 & (1 << v4);
  if (!v10)
  {
    v11 = (_QWORD *)((char *)this + 8);
    v12 = *((unsigned int *)this + 5);
    if ((_DWORD)v12 == *((_DWORD *)this + 4))
    {
      v14 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11, v12 + 1, (unint64_t)&v15);
      v12 = *((unsigned int *)this + 5);
      *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v12) = *v14;
    }
    else
    {
      *(_QWORD *)(*v11 + 8 * v12) = a2;
    }
    *((_DWORD *)this + 5) = v12 + 1;
  }
  return v10 == 0;
}

uint64_t JSC::DFG::Graph::blocksInPreOrder(void)::$_0::operator()<JSC::DFG::Dominators<JSC::DFG::CFG>>(uint64_t result, int a2, uint64_t a3, unsigned int a4)
{
  unint64_t i;
  uint64_t v5;
  unint64_t j;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v5 = *(_QWORD *)(result + 8 * i);
      if (v5)
      {
        for (j = 0; j != a2; ++j)
        {
          v7 = *(_QWORD *)(result + 8 * j);
          if (v7)
            v8 = v5 == v7;
          else
            v8 = 1;
          if (!v8)
          {
            v9 = *(unsigned int *)(v7 + 8);
            if (v9 >= a4)
            {
              __break(0xC471u);
              JUMPOUT(0x1983D1878);
            }
            v10 = *(unsigned int *)(v5 + 8);
            if (v10 >= a4
              || (v11 = a3 + 32 * v9, v12 = a3 + 32 * v10, *(_DWORD *)(v11 + 24) > *(_DWORD *)(v12 + 24))
              && i >= j
              && *(_DWORD *)(v11 + 28) < *(_DWORD *)(v12 + 28))
            {
              __break(0xC471u);
              JUMPOUT(0x1983D1870);
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t *JSC::DFG::Graph::ensureSSADominators(JSC::DFG::Graph *this)
{
  unint64_t *result;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  if (*((_DWORD *)this + 236) != 2 && !*((_BYTE *)this + 962))
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x1983D195CLL);
  }
  result = (unint64_t *)*((_QWORD *)this + 98);
  if (!result)
  {
    v3 = (unint64_t *)WTF::fastMalloc((WTF *)0x18);
    v9 = *((_QWORD *)this + 101);
    if (!v9)
      goto LABEL_16;
    result = WTF::Dominators<JSC::DFG::CFG>::Dominators(v3, v9, 0, v4, v5, v6, v7, v8);
    v17 = *((_QWORD *)this + 98);
    *((_QWORD *)this + 98) = result;
    if (v17)
    {
      v18 = *(unsigned int *)(v17 + 20);
      v19 = *(_QWORD *)(v17 + 8);
      if ((_DWORD)v18)
      {
        v20 = 32 * v18;
        do
        {
          v21 = *(_QWORD *)v19;
          if (*(_QWORD *)v19)
          {
            *(_QWORD *)v19 = 0;
            *(_DWORD *)(v19 + 8) = 0;
            WTF::fastFree(v21, v10, v11, v12, v13, v14, v15, v16);
          }
          v19 += 32;
          v20 -= 32;
        }
        while (v20);
        v19 = *(_QWORD *)(v17 + 8);
      }
      if (v19)
      {
        *(_QWORD *)(v17 + 8) = 0;
        *(_DWORD *)(v17 + 16) = 0;
        WTF::fastFree(v19, v10, v11, v12, v13, v14, v15, v16);
      }
      WTF::fastFree(v17, v10, v11, v12, v13, v14, v15, v16);
      return (unint64_t *)*((_QWORD *)this + 98);
    }
  }
  return result;
}

uint64_t JSC::DFG::Graph::blocksInPreOrder(void)::$_0::operator()<JSC::DFG::Dominators<JSC::DFG::CPSCFG>>(uint64_t result, int a2, uint64_t a3, unsigned int a4)
{
  unint64_t i;
  uint64_t v5;
  unint64_t j;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;

  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v5 = *(_QWORD *)(result + 8 * i);
      if (v5)
      {
        for (j = 0; j != a2; ++j)
        {
          v7 = *(_QWORD *)(result + 8 * j);
          if (v7)
            v8 = v5 == v7;
          else
            v8 = 1;
          if (!v8)
          {
            v9 = *(_DWORD *)(v7 + 8);
            if (v9 >= a4)
            {
              __break(0xC471u);
              JUMPOUT(0x1983D1A44);
            }
            v10 = *(_DWORD *)(v5 + 8);
            if (v10 >= a4
              || *(_DWORD *)(a3 + 40 * v9 + 32) > *(_DWORD *)(a3 + 40 * v10 + 32)
              && i >= j
              && *(_DWORD *)(a3 + 40 * v9 + 36) < *(_DWORD *)(a3 + 40 * v10 + 36))
            {
              __break(0xC471u);
              JUMPOUT(0x1983D1A3CLL);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ***JSC::DFG::Graph::ensureCPSDominators(JSC::DFG::Graph *this)
{
  uint64_t ***v2;
  uint64_t **v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t StatusReg;
  uint64_t v18;
  uint64_t v19;

  if (*((_DWORD *)this + 236) == 2 || *((_BYTE *)this + 962))
  {
    __break(0xC471u);
    JUMPOUT(0x1983D1C0CLL);
  }
  v2 = (uint64_t ***)*((_QWORD *)this + 97);
  if (!v2)
  {
    v2 = (uint64_t ***)WTF::fastMalloc((WTF *)0x40);
    v4 = (uint64_t **)JSC::DFG::Graph::ensureCPSCFG(this);
    WTF::Dominators<JSC::DFG::CPSCFG>::Dominators(v2, v4, 0);
    v12 = *((_QWORD *)this + 97);
    *((_QWORD *)this + 97) = v2;
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 24);
      if (v13)
      {
        *(_QWORD *)(v12 + 24) = 0;
        *(_DWORD *)(v12 + 32) = 0;
        WTF::fastFree(v13, (void *)v5, v6, v7, v8, v9, v10, v11);
      }
      v14 = *(unsigned int *)(v12 + 20);
      v15 = *(_QWORD *)(v12 + 8);
      if ((_DWORD)v14)
      {
        v16 = 40 * v14;
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        while (1)
        {
          v5 = *(_QWORD *)v15;
          if (*(_QWORD *)v15)
          {
            *(_QWORD *)v15 = 0;
            *(_DWORD *)(v15 + 8) = 0;
            v18 = *(_QWORD *)(StatusReg + 752);
            if (v18)
            {
              if (!(v5 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v5 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v5)) & 1) != 0)
              {
LABEL_16:
                v19 = *(unsigned int *)(v18 + 8000);
                if (v19 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v18, v5, (os_unfair_lock_s *)5, v7, v8, v9, v10, v11);
                }
                else
                {
                  *(_QWORD *)(v18 + 8 * v19) = v5 | 0x5000000000000;
                  *(_DWORD *)(v18 + 8000) = v19 + 1;
                }
                goto LABEL_11;
              }
              if (v5 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v5 >> 24)
              {
                v7 = 0;
              }
              else
              {
                v7 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v5 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v5) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v7 == 1)
                  goto LABEL_16;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v18, v5, 1, v7, v8, v9, v10, v11);
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v5, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
LABEL_11:
          v15 += 40;
          v16 -= 40;
          if (!v16)
          {
            v15 = *(_QWORD *)(v12 + 8);
            break;
          }
        }
      }
      if (v15)
      {
        *(_QWORD *)(v12 + 8) = 0;
        *(_DWORD *)(v12 + 16) = 0;
        WTF::fastFree(v15, (void *)v5, v6, v7, v8, v9, v10, v11);
      }
      WTF::fastFree(v12, (void *)v5, v6, v7, v8, v9, v10, v11);
      return (uint64_t ***)*((_QWORD *)this + 97);
    }
  }
  return v2;
}

void JSC::DFG::Graph::blocksInPostOrder(JSC::DFG::Graph *this@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  _QWORD *v51;
  _OWORD *v52;
  _OWORD *v53;
  unint64_t *v54;
  _OWORD *v55;
  uint64_t v56;
  uint64_t ***v57;
  _QWORD v58[2];
  unint64_t v59;
  WTF *v60;
  uint64_t v61;
  __int128 v62;

  v9 = (int)a2;
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  v12 = *((unsigned int *)this + 15);
  if ((_DWORD)v12)
  {
    if (v12 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1983D2160);
    }
    v13 = WTF::fastMalloc((WTF *)(8 * v12));
    *(_DWORD *)(a9 + 8) = v12;
    *(_QWORD *)a9 = v13;
  }
  v60 = 0;
  v61 = 0;
  v59 = 0x8000000000000000;
  v14 = *((unsigned int *)this + 35);
  if ((_DWORD)v14)
  {
    v15 = (uint64_t *)*((_QWORD *)this + 16);
    v16 = 8 * v14;
    do
    {
      v17 = *v15;
      *(_QWORD *)&v62 = *v15;
      BYTE8(v62) = 0;
      v18 = v59;
      if ((v59 & 0x8000000000000000) != 0)
        v19 = 63;
      else
        v19 = *(_QWORD *)(2 * v59);
      v20 = *(unsigned int *)(v17 + 8);
      if (v19 <= v20)
      {
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v59, v20 + 1, 0);
        v18 = v59;
      }
      if (v18 >= 0)
        v21 = (unint64_t *)(2 * v18 + 8);
      else
        v21 = &v59;
      v22 = (v20 >> 3) & 0x1FFFFFF8;
      v23 = *(unint64_t *)((char *)v21 + v22);
      *(unint64_t *)((char *)v21 + v22) = v23 | (1 << v20);
      if ((v23 & (1 << v20)) == 0)
      {
        v24 = HIDWORD(v61);
        if (HIDWORD(v61) == (_DWORD)v61)
        {
          v55 = (_OWORD *)WTF::Vector<JSC::DFG::SpeculativeJIT::StringSwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v60, HIDWORD(v61) + 1, (unint64_t)&v62);
          v24 = HIDWORD(v61);
          *((_OWORD *)v60 + HIDWORD(v61)) = *v55;
        }
        else
        {
          *((_OWORD *)v60 + HIDWORD(v61)) = v62;
        }
        HIDWORD(v61) = v24 + 1;
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
    LODWORD(v25) = HIDWORD(v61);
    if (HIDWORD(v61))
    {
      while (1)
      {
        v26 = (char *)v60 + 16 * v25;
        v27 = *((_QWORD *)v26 - 2);
        v28 = *(v26 - 8);
        v25 = (v25 - 1);
        HIDWORD(v61) = v25;
        v58[0] = v27;
        v58[1] = v28;
        if (!v27)
          goto LABEL_72;
        if ((_DWORD)v28 != 1)
          break;
        v29 = *(unsigned int *)(a9 + 12);
        if ((_DWORD)v29 == *(_DWORD *)(a9 + 8))
        {
          v51 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, v29 + 1, (unint64_t)v58);
          v29 = *(unsigned int *)(a9 + 12);
          *(_QWORD *)(*(_QWORD *)a9 + 8 * v29) = *v51;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a9 + 8 * v29) = v27;
        }
        *(_DWORD *)(a9 + 12) = v29 + 1;
LABEL_26:
        if (!(_DWORD)v25)
          goto LABEL_72;
      }
      if ((_DWORD)v28)
        goto LABEL_26;
      *(_QWORD *)&v62 = v27;
      BYTE8(v62) = 1;
      if ((_DWORD)v25 == (_DWORD)v61)
      {
        v53 = (_OWORD *)WTF::Vector<JSC::DFG::SpeculativeJIT::StringSwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v60, v25 + 1, (unint64_t)&v62);
        LODWORD(v25) = HIDWORD(v61);
        *((_OWORD *)v60 + HIDWORD(v61)) = *v53;
      }
      else
      {
        *((_OWORD *)v60 + v25) = v62;
      }
      LODWORD(v25) = v25 + 1;
      HIDWORD(v61) = v25;
      v30 = *(unsigned int *)(v58[0] + 220);
      v31 = v30 - 1;
      do
      {
        if (v31 >= v30)
        {
          __break(0xC471u);
          JUMPOUT(0x1983D2150);
        }
        v32 = *(_QWORD *)(*(_QWORD *)(v58[0] + 208) + 8 * v31--);
      }
      while (*(unsigned __int16 *)(v32 + 18) - 364 > 0xB);
      v33 = 1;
      switch(*(_WORD *)(v32 + 18))
      {
        case 0x16C:
          goto LABEL_36;
        case 0x16D:
          v33 = 2;
          goto LABEL_36;
        case 0x16E:
          v33 = *(_DWORD *)(*(_QWORD *)(v32 + 72) + 12) + 1;
          goto LABEL_70;
        case 0x16F:
          v33 = *(_DWORD *)(*(_QWORD *)(v32 + 72) + 12);
LABEL_70:
          if (!v33)
            goto LABEL_26;
LABEL_36:
          v34 = v33;
          break;
        default:
          goto LABEL_26;
      }
      while (1)
      {
        v35 = v34--;
        v36 = *(unsigned int *)(v58[0] + 220);
        v37 = v36 - 1;
        do
        {
          if (v37 >= v36)
          {
            __break(0xC471u);
            JUMPOUT(0x1983D2148);
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v58[0] + 208) + 8 * v37);
          v39 = *(unsigned __int16 *)(v38 + 18);
          --v37;
        }
        while ((v39 - 364) > 0xB);
        if (v39 == 366)
        {
          v41 = *(_QWORD *)(v38 + 72);
          v50 = *(_DWORD *)(v41 + 12);
          if (v50 <= v34)
          {
            if (v50 != v34)
            {
              __break(0xC471u);
              JUMPOUT(0x1983D20D4);
            }
          }
          else
          {
            v41 = *(_QWORD *)v41 + 32 * v34;
          }
        }
        else
        {
          if (v39 == 367)
          {
            v56 = *(_QWORD *)(v38 + 72);
            if (*(_DWORD *)(v56 + 12) <= v34)
            {
              __break(0xC471u);
              JUMPOUT(0x1983D2158);
            }
            v40 = (_QWORD *)(*(_QWORD *)v56 + 8 * v34);
            goto LABEL_48;
          }
          if (v35 == 1)
          {
            v40 = (_QWORD *)(v38 + 72);
            if (v39 != 364)
              v40 = (_QWORD *)*v40;
            goto LABEL_48;
          }
          if (v35 != 2)
          {
            __break(0xC471u);
            JUMPOUT(0x1983D2140);
          }
          v41 = *(_QWORD *)(v38 + 72);
        }
        v40 = (_QWORD *)(v41 + 16);
LABEL_48:
        v42 = (_QWORD *)*v40;
        *(_QWORD *)&v62 = *v40;
        BYTE8(v62) = 0;
        v43 = v59;
        if ((v59 & 0x8000000000000000) != 0)
          v44 = 63;
        else
          v44 = *(_QWORD *)(2 * v59);
        v45 = *((unsigned int *)v42 + 2);
        if (v44 <= v45)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v59, v45 + 1, 0);
          v43 = v59;
        }
        if (v43 >= 0)
          v46 = (unint64_t *)(2 * v43 + 8);
        else
          v46 = &v59;
        v47 = (v45 >> 3) & 0x1FFFFFF8;
        v48 = *(unint64_t *)((char *)v46 + v47);
        *(unint64_t *)((char *)v46 + v47) = v48 | (1 << v45);
        if ((v48 & (1 << v45)) == 0)
        {
          v49 = HIDWORD(v61);
          if (HIDWORD(v61) == (_DWORD)v61)
          {
            v52 = (_OWORD *)WTF::Vector<JSC::DFG::SpeculativeJIT::StringSwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v60, HIDWORD(v61) + 1, (unint64_t)&v62);
            v49 = HIDWORD(v61);
            *((_OWORD *)v60 + HIDWORD(v61)) = *v52;
          }
          else
          {
            *((_OWORD *)v60 + HIDWORD(v61)) = v62;
          }
          HIDWORD(v61) = v49 + 1;
        }
        if (!v34)
        {
          LODWORD(v25) = HIDWORD(v61);
          goto LABEL_26;
        }
      }
    }
  }
LABEL_72:
  if (v9 && BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
  {
    if (*((_DWORD *)this + 236) == 2 || *((_BYTE *)this + 962))
    {
      v54 = JSC::DFG::Graph::ensureSSADominators(this);
      JSC::DFG::Graph::blocksInPostOrder(BOOL)::$_0::operator()<JSC::DFG::Dominators<JSC::DFG::CFG>>(*(_QWORD *)a9, *(_DWORD *)(a9 + 12), v54[1], *((_DWORD *)v54 + 5));
    }
    else
    {
      v57 = JSC::DFG::Graph::ensureCPSDominators(this);
      JSC::DFG::Graph::blocksInPostOrder(BOOL)::$_0::operator()<JSC::DFG::Dominators<JSC::DFG::CPSCFG>>(*(_QWORD *)a9, *(_DWORD *)(a9 + 12), (uint64_t)v57[1], *((_DWORD *)v57 + 5));
    }
  }
  if (v60)
    WTF::fastFree((unint64_t)v60, a2, a3, a4, a5, a6, a7, a8);
  if ((v59 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v59, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::DFG::Graph::blocksInPostOrder(BOOL)::$_0::operator()<JSC::DFG::Dominators<JSC::DFG::CFG>>(uint64_t result, int a2, uint64_t a3, unsigned int a4)
{
  unint64_t i;
  uint64_t v5;
  unint64_t j;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v5 = *(_QWORD *)(result + 8 * i);
      if (v5)
      {
        for (j = 0; j != a2; ++j)
        {
          v7 = *(_QWORD *)(result + 8 * j);
          if (v7)
            v8 = v5 == v7;
          else
            v8 = 1;
          if (!v8)
          {
            v9 = *(unsigned int *)(v7 + 8);
            if (v9 >= a4)
            {
              __break(0xC471u);
              JUMPOUT(0x1983D2224);
            }
            v10 = *(unsigned int *)(v5 + 8);
            if (v10 >= a4
              || (v11 = a3 + 32 * v9, v12 = a3 + 32 * v10, *(_DWORD *)(v11 + 24) > *(_DWORD *)(v12 + 24))
              && i <= j
              && *(_DWORD *)(v11 + 28) < *(_DWORD *)(v12 + 28))
            {
              __break(0xC471u);
              JUMPOUT(0x1983D221CLL);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t JSC::DFG::Graph::blocksInPostOrder(BOOL)::$_0::operator()<JSC::DFG::Dominators<JSC::DFG::CPSCFG>>(uint64_t result, int a2, uint64_t a3, unsigned int a4)
{
  unint64_t i;
  uint64_t v5;
  unint64_t j;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;

  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v5 = *(_QWORD *)(result + 8 * i);
      if (v5)
      {
        for (j = 0; j != a2; ++j)
        {
          v7 = *(_QWORD *)(result + 8 * j);
          if (v7)
            v8 = v5 == v7;
          else
            v8 = 1;
          if (!v8)
          {
            v9 = *(_DWORD *)(v7 + 8);
            if (v9 >= a4)
            {
              __break(0xC471u);
              JUMPOUT(0x1983D22F4);
            }
            v10 = *(_DWORD *)(v5 + 8);
            if (v10 >= a4
              || *(_DWORD *)(a3 + 40 * v9 + 32) > *(_DWORD *)(a3 + 40 * v10 + 32)
              && i <= j
              && *(_DWORD *)(a3 + 40 * v9 + 36) < *(_DWORD *)(a3 + 40 * v10 + 36))
            {
              __break(0xC471u);
              JUMPOUT(0x1983D22ECLL);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t JSC::DFG::Graph::initializeNodeOwners(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_DWORD *)(this + 60);
  if (v1)
  {
    v2 = *(_QWORD *)(this + 48);
    do
    {
      v3 = *(_QWORD *)(v2 + 8 * --v1);
      if (v3)
      {
        v4 = *(unsigned int *)(v3 + 36);
        if ((_DWORD)v4)
        {
          v9 = *(_QWORD *)(v3 + 24);
          v10 = v4 - 1;
          do
            *(_QWORD *)(*(_QWORD *)(v9 + 8 * v10) + 96) = v3;
          while ((unint64_t)v10--);
        }
        v5 = *(unsigned int *)(v3 + 220);
        if ((_DWORD)v5)
        {
          v6 = *(_QWORD *)(v3 + 208);
          v7 = v5 - 1;
          do
            *(_QWORD *)(*(_QWORD *)(v6 + 8 * v7) + 96) = v3;
          while ((unint64_t)v7--);
        }
      }
    }
    while (v1);
  }
  return this;
}

void JSC::DFG::Graph::watchCondition(JSC::DFG::Graph *this, const JSC::ObjectPropertyCondition *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[2];
  _BYTE v36[24];

  if (((*(_DWORD *)(*((_QWORD *)this + 3) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    JSC::ObjectPropertyCondition::isWatchable((uint64_t)a2, 0, a3, a4, a5, a6, a7, a8);
    if (v16)
    {
      v17 = (int *)(*((_QWORD *)this + 3) + 280);
      JSC::DFG::DesiredWeakReferences::addLazily(v17, *(_QWORD *)a2, v10, v11, v12, v13, v14, v15);
      v24 = *((_QWORD *)a2 + 1);
      if ((v24 & 0xFFFFFFFFFFFFFFLL) != 0 && BYTE6(v24) <= 7u && ((1 << BYTE6(*((_QWORD *)a2 + 1))) & 0x9C) != 0)
      {
        JSC::DFG::DesiredWeakReferences::addLazily(v17, *((_QWORD *)a2 + 2), v18, v19, v20, v21, v22, v23);
        v24 = *((_QWORD *)a2 + 1);
      }
      if ((v24 & 0xFF000000000000) == 0x5000000000000)
      {
        v27 = *((_QWORD *)a2 + 2);
        if ((v27 & 0xFFFE000000000002) == 0)
          JSC::DFG::DesiredWeakReferences::addLazily(v17, v27, v18, v19, v20, v21, v22, v23);
      }
      WTF::HashTable<JSC::ObjectPropertyCondition,JSC::ObjectPropertyCondition,WTF::IdentityExtractor,WTF::DefaultHash<JSC::ObjectPropertyCondition>,WTF::HashTraits<JSC::ObjectPropertyCondition>,WTF::HashTraits<JSC::ObjectPropertyCondition>>::add(a2, (uint64_t *)(*((_QWORD *)this + 3) + 216), v19, v20, v21, v22, v23, (uint64_t)v36);
      if (!*((_BYTE *)a2 + 14))
      {
        v34 = *((unsigned int *)a2 + 4);
        v35[0] = *(_QWORD *)a2;
        v35[1] = v34;
        WTF::HashTable<std::pair<JSC::JSObject *,int>,std::pair<JSC::JSObject *,int>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<JSC::JSObject *,int>>,WTF::HashTraits<std::pair<JSC::JSObject *,int>>,WTF::HashTraits<std::pair<JSC::JSObject *,int>>>::add((uint64_t *)this + 94, v35, v28, v29, v30, v31, v32, v33, (uint64_t)v36);
      }
    }
  }
}

BOOL JSC::DFG::Graph::isSafeToLoad(JSC::DFG::Graph *this, JSC::JSObject *a2, unsigned int a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  JSC::JSObject *v7;
  int v8;
  int v10;
  BOOL v11;
  _BOOL8 result;
  uint64_t v13;
  JSC::JSObject *v15;
  uint64_t v16;

  v15 = a2;
  v16 = a3;
  v3 = *((_QWORD *)this + 94);
  if (!v3)
    return 0;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = WTF::IdentityHashTranslator<WTF::HashTraits<std::pair<JSC::JSObject *,int>>,WTF::DefaultHash<std::pair<JSC::JSObject *,int>>>::hash<std::pair<JSC::JSObject *,int>>((uint64_t)&v15) & v4;
  v6 = v3 + 16 * v5;
  v7 = *(JSC::JSObject **)v6;
  v8 = *(_DWORD *)(v6 + 8);
  if (*(JSC::JSObject **)v6 == v15 && v8 == (_DWORD)v16)
    return 1;
  v10 = 1;
  do
  {
    if (v7)
      v11 = 0;
    else
      v11 = v8 == 0;
    result = !v11;
    if (v11)
      break;
    v5 = (v5 + v10) & v4;
    v13 = v3 + 16 * v5;
    v7 = *(JSC::JSObject **)v13;
    v8 = *(_DWORD *)(v13 + 8);
    ++v10;
  }
  while (v7 != v15 || v8 != (_DWORD)v16);
  return result;
}

uint64_t JSC::DFG::Graph::watchGlobalProperty(JSC::DFG::Graph *this, JSC::JSGlobalObject *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  JSC::JSGlobalObject *v26;
  unsigned int v27;
  _BYTE v28[24];

  v3 = *((_QWORD *)this + 3);
  if (((*(_DWORD *)(v3 + 16) - 1) & 0xFFFFFFFD) == 0)
    return 0;
  v13 = JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(v3 + 240), a3);
  v14 = (unsigned __int8 *)a2 + 3168;
  if (__ldaxr((unsigned __int8 *)a2 + 3168))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 3168);
    goto LABEL_5;
  }
  if (__stxr(1u, v14))
    goto LABEL_4;
LABEL_5:
  v16 = *((_QWORD *)a2 + 395);
  if (!v16)
  {
LABEL_6:
    v17 = 0;
    goto LABEL_7;
  }
  v21 = *(_DWORD *)(v16 - 8);
  v22 = *(_DWORD *)(v13 + 16);
  if ((v22 & 0x20) != 0)
    v22 = *(_DWORD *)(v13 + 32);
  v23 = v21 & (v22 >> 8);
  v24 = *(_QWORD *)(v16 + 16 * v23);
  if (v24 != v13)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v21;
      v24 = *(_QWORD *)(v16 + 16 * v23);
      ++v25;
      if (v24 == v13)
        goto LABEL_18;
    }
    goto LABEL_6;
  }
LABEL_18:
  v17 = *(_QWORD *)(v16 + 16 * v23 + 8);
LABEL_7:
  v18 = __ldxr(v14);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, v14))
LABEL_14:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 3168, 0, v7, v8, v9, v10, v11, v12);
  if (v17 && *(_BYTE *)(v17 + 4) == 2)
    return 0;
  v19 = *((_QWORD *)this + 3);
  v26 = a2;
  v27 = a3;
  WTF::HashTable<JSC::DFG::DesiredGlobalProperty,JSC::DFG::DesiredGlobalProperty,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::DesiredGlobalProperty>,WTF::HashTraits<JSC::DFG::DesiredGlobalProperty>,WTF::HashTraits<JSC::DFG::DesiredGlobalProperty>>::add((uint64_t *)(v19 + 232), (uint64_t *)&v26, v8, v9, v10, v11, v12, (uint64_t)v28);
  return 1;
}

WTF *JSC::DFG::Graph::livenessFor(JSC::DFG::Graph *this, JSC::UnlinkedCodeBlock **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  JSC::CodeBlock *v15;
  WTF *v16;
  int v18;
  uint64_t *v19;
  JSC::BytecodeLivenessAnalysis *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  _BYTE v33[24];
  WTF *v34;
  JSC::CodeBlock *v35;

  v35 = (JSC::CodeBlock *)a2;
  v9 = *((_QWORD *)this + 93);
  if (!v9)
    goto LABEL_10;
  v10 = *(_DWORD *)(v9 - 8);
  v11 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  v15 = *(JSC::CodeBlock **)(v9 + 16 * v14);
  if (v15 != (JSC::CodeBlock *)a2)
  {
    v18 = 1;
    while (v15)
    {
      v14 = ((_DWORD)v14 + v18) & v10;
      v15 = *(JSC::CodeBlock **)(v9 + 16 * v14);
      ++v18;
      if (v15 == (JSC::CodeBlock *)a2)
        goto LABEL_3;
    }
    v14 = *(unsigned int *)(v9 - 4);
  }
LABEL_3:
  if (v14 != *(_DWORD *)(v9 - 4))
    return *(WTF **)(v9 + 16 * v14 + 8);
LABEL_10:
  v19 = (uint64_t *)((char *)this + 744);
  v20 = (JSC::BytecodeLivenessAnalysis *)*((_QWORD *)a2[7] + 11);
  if (!v20)
    v20 = (JSC::BytecodeLivenessAnalysis *)JSC::UnlinkedCodeBlock::livenessAnalysisSlow(a2[7], a2, a3, a4, a5, a6, a7, a8);
  JSC::BytecodeLivenessAnalysis::computeFullLiveness(v20, (JSC::CodeBlock *)a2, &v34);
  v16 = v34;
  WTF::HashMap<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<std::unique_ptr<JSC::FullBytecodeLiveness>>,WTF::HashTableTraits>::add<std::unique_ptr<JSC::FullBytecodeLiveness>>(v19, (uint64_t *)&v35, (uint64_t *)&v34, v21, v22, v23, v24, v25, (uint64_t)v33);
  v32 = v34;
  v34 = 0;
  if (v32)
    std::default_delete<JSC::FullBytecodeLiveness>::operator()[abi:sn180100]((int)&v34, v32, v26, v27, v28, v29, v30, v31);
  return v16;
}

void WTF::HashMap<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<std::unique_ptr<JSC::FullBytecodeLiveness>>,WTF::HashTableTraits>::add<std::unique_ptr<JSC::FullBytecodeLiveness>>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  int v34;
  unint64_t v35;
  uint64_t v36;

  v13 = *a1;
  if (*a1
    || (WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<std::unique_ptr<JSC::FullBytecodeLiveness>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::rehash(a1, 8uLL, 0, a4, a5, a6, a7, a8), (v13 = *a1) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = ~(*a2 << 32) + *a2;
  v18 = 9
      * (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) ^ (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v15 & ((v19 >> 31) ^ v19);
  v21 = (uint64_t *)(v13 + 16 * v20);
  v22 = *v21;
  if (*v21)
  {
    v33 = 0;
    v34 = 1;
    do
    {
      if (v22 == v16)
      {
        if ((v14 & 1) != 0)
          v36 = 0;
        else
          v36 = *(unsigned int *)(v13 - 4);
        v32 = 0;
        v31 = v13 + 16 * v36;
        goto LABEL_14;
      }
      if (v22 == -1)
        v33 = v21;
      v20 = (v20 + v34) & v15;
      v21 = (uint64_t *)(v13 + 16 * v20);
      v22 = *v21;
      ++v34;
    }
    while (*v21);
    if (v33)
    {
      *v33 = 0;
      v33[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v16 = *a2;
      v21 = v33;
    }
  }
  *v21 = v16;
  v23 = *a3;
  *a3 = 0;
  v24 = (WTF *)v21[1];
  v21[1] = v23;
  if (v24)
    std::default_delete<JSC::FullBytecodeLiveness>::operator()[abi:sn180100]((_DWORD)v21 + 8, v24, (uint64_t)a3, a4, a5, a6, a7, a8);
  v25 = *a1;
  if (*a1)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v27 = *a1;
  if (*a1)
    v28 = *(_DWORD *)(v27 - 12);
  else
    v28 = 0;
  v29 = (*(_DWORD *)(v27 - 16) + v28);
  v30 = *(unsigned int *)(v27 - 4);
  if (v30 > 0x400)
  {
    if (v30 > 2 * v29)
      goto LABEL_13;
    goto LABEL_25;
  }
  if (3 * v30 <= 4 * v29)
  {
    if (!(_DWORD)v30)
    {
      v35 = 8;
LABEL_28:
      v21 = WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<std::unique_ptr<JSC::FullBytecodeLiveness>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::rehash(a1, v35, (uint64_t)v21, a4, a5, a6, a7, a8);
      v27 = *a1;
      if (*a1)
        v30 = *(unsigned int *)(v27 - 4);
      else
        v30 = 0;
      goto LABEL_13;
    }
LABEL_25:
    v35 = ((_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30)));
    goto LABEL_28;
  }
LABEL_13:
  v31 = v27 + 16 * v30;
  v32 = 1;
LABEL_14:
  *(_QWORD *)a9 = v21;
  *(_QWORD *)(a9 + 8) = v31;
  *(_BYTE *)(a9 + 16) = v32;
}

uint64_t JSC::DFG::Graph::isLiveInBytecode(uint64_t a1, unint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  int v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  BOOL v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int **v18;
  JSC::UnlinkedCodeBlock ***v19;
  JSC::UnlinkedCodeBlock **v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  JSC::UnlinkedCodeBlock **v27;
  WTF *v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unsigned __int8 *v40;
  unsigned int v41;
  int v43;
  BOOL v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t *v48;
  JSC::BytecodeLivenessAnalysis *v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  WTF *v57;
  JSC::UnlinkedCodeBlock **v58;
  WTF *v59;
  WTF *v60;
  unint64_t *v61;
  uint64_t v62;
  unint64_t *v63;
  uint64_t v64;
  unint64_t StatusReg;
  WTF *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  unsigned int v81;
  unint64_t i;
  int v83;
  unsigned __int8 *v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  uint64_t v89;
  unint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  WTF *v101;
  unint64_t *v102;
  uint64_t v103;
  unint64_t *v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  uint64_t v112;
  unint64_t *v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF *v119;
  WTF *v120;
  WTF *v121;
  WTF *v122;
  WTF *v123;
  WTF *v124;
  WTF *v125;
  WTF *v126;
  WTF *v127;

  if (!a3)
    return HIDWORD(a2) != 2;
  v8 = a3;
  v9 = a2;
  v10 = (_QWORD *)(a1 + 40);
  if (HIDWORD(a2) == 2)
  {
    while (1)
    {
      v74 = *v8;
      v75 = *v8 & 0xFFFFFFFF8;
      v76 = v75;
      if ((*v8 & 1) != 0)
        v76 = *(_QWORD *)v75;
      v77 = v76 ? *(_DWORD *)(v76 + 24) >> 22 : 0;
      if (v77 + 4 < a2)
        return 0;
      v78 = v76 + 8;
      if (!v76)
        v78 = a1 + 40;
      v79 = *(_QWORD *)(*(_QWORD *)v78 + 56);
      if (((*(unsigned __int16 *)(v79 + 28) | (*(unsigned __int8 *)(v79 + 30) << 16)) & 0x20000) != 0)
      {
        v80 = a2 >= v77;
        v81 = a2 - v77;
        if (v80)
        {
          if ((v74 & 2) != 0)
          {
            v83 = 3;
            i = 0xFFFFFFFFLL;
            goto LABEL_146;
          }
          if ((v74 & 1) != 0)
            goto LABEL_158;
          for (i = v74 >> 36; ; LODWORD(i) = *(_DWORD *)(v75 + 8))
          {
            v83 = i & 3;
            if ((i & 3) != 0)
            {
              i = i;
LABEL_146:
              v84 = (unsigned __int8 *)(**(_QWORD **)(v79 + 80) + (i >> 2));
              LODWORD(v75) = *v84;
              v79 = v75 | 2;
              if ((_DWORD)v79 == 130)
                LODWORD(v75) = v84[1];
              v85 = 0;
              v75 = v75;
              switch((int)v75)
              {
                case 0:
                case 1:
                case 3:
                  v85 = v83 == 1;
                  break;
                case 2:
                  v85 = 1;
                  break;
                case 4:
                  break;
                default:
                  __break(0xC471u);
                  JUMPOUT(0x1983D3108);
              }
            }
            else
            {
              v85 = 0;
            }
            if (v81 < 0x20)
              break;
            __break(1u);
LABEL_158:
            ;
          }
          return v85 >> v81;
        }
      }
      v8 = (unint64_t *)(v76 + 16);
      if (!v76)
        return HIDWORD(a2) != 2;
    }
  }
  v11 = *a3;
  v12 = (uint64_t *)(*a3 & 0xFFFFFFFF8);
  if ((*a3 & 1) != 0)
  {
    v36 = *v12;
    v13 = *v12 == 0;
    if (*v12)
      v14 = HIDWORD(*(_QWORD *)(v36 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v36 + 24) >> 28) >> 24 << 20);
    else
      v14 = 0;
    if ((v11 & 1) != 0)
      v12 = (uint64_t *)*v12;
    if (!v12)
    {
      v15 = 0;
      goto LABEL_26;
    }
  }
  else
  {
    v13 = v12 == 0;
    if (!v12)
    {
      v14 = 0;
      v15 = 0;
      goto LABEL_6;
    }
    v14 = HIDWORD(*(_QWORD *)((*a3 & 0xFFFFFFFF8) + 0x18)) & 0xFFFFF | ((int)(*(_QWORD *)((*a3 & 0xFFFFFFFF8) + 0x18) >> 28) >> 24 << 20);
    v36 = *a3 & 0xFFFFFFFF8;
  }
  v15 = HIDWORD(v12[3]) & 0xFFFFF | ((int)((unint64_t)v12[3] >> 28) >> 24 << 20);
LABEL_26:
  v12 = (uint64_t *)v36;
LABEL_6:
  v16 = a2 - v14;
  v17 = v15 + 5;
  if (v15 + 5 > (int)a2)
  {
    v18 = (unsigned int **)v12;
    goto LABEL_8;
  }
  if (v13)
    return HIDWORD(a2) != 2;
  if ((v16 & 0x80000000) == 0 && *v12 && *(unsigned int *)*v12 > (unint64_t)(int)(v16 - 5))
    return 1;
  while (1)
  {
    v11 = v12[2];
    v18 = (unsigned int **)(v11 & 0xFFFFFFFF8);
    if ((v11 & 1) != 0)
    {
      v47 = (uint64_t)*v18;
      v44 = *v18 == 0;
      if (*v18)
        v45 = HIDWORD(*(_QWORD *)(v47 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v47 + 24) >> 28) >> 24 << 20);
      else
        v45 = 0;
      if ((v11 & 1) != 0)
        v18 = (unsigned int **)*v18;
      if (!v18)
      {
        v46 = 0;
        goto LABEL_61;
      }
    }
    else
    {
      v44 = v18 == 0;
      if (v18)
        v45 = HIDWORD(*(_QWORD *)((v11 & 0xFFFFFFFF8) + 0x18)) & 0xFFFFF | ((int)(*(_QWORD *)((v11 & 0xFFFFFFFF8)
                                                                                              + 0x18) >> 28) >> 24 << 20);
      else
        v45 = 0;
      if (!v18)
      {
        v46 = 0;
        goto LABEL_56;
      }
      v47 = v11 & 0xFFFFFFFF8;
    }
    v46 = ((unint64_t)v18[3] >> 32) & 0xFFFFF | ((int)((unint64_t)v18[3] >> 28) >> 24 << 20);
LABEL_61:
    v18 = (unsigned int **)v47;
LABEL_56:
    v16 = a2 - v45;
    if (v46 + 5 > (int)a2)
      break;
    if (v44)
      return HIDWORD(a2) != 2;
    v12 = (uint64_t *)v18;
    if ((v16 & 0x80000000) == 0)
    {
      v12 = (uint64_t *)v18;
      if (*v18)
      {
        v34 = 1;
        v12 = (uint64_t *)v18;
        if (**v18 > (unint64_t)(int)(v16 - 5))
          return v34;
      }
    }
  }
  v8 = (unint64_t *)(v12 + 2);
LABEL_8:
  if ((v16 & 0x80000000) == 0)
  {
    if (v16 >= 5)
    {
      __break(0xC471u);
      JUMPOUT(0x1983D2F0CLL);
    }
    return v16 == 3 && ((_BYTE)v18[4] & 1) != 0 || ((unint64_t)v18[3] >> 60) - 3 <= 2 && v16 == 4;
  }
  v19 = (JSC::UnlinkedCodeBlock ***)(v18 + 1);
  if (!v18)
    v19 = (JSC::UnlinkedCodeBlock ***)(a1 + 40);
  v20 = *v19;
  v21 = *(_QWORD *)(a1 + 744);
  if (v21)
  {
    v22 = *(_DWORD *)(v21 - 8);
    v23 = ((unint64_t)v20 + ~((_QWORD)v20 << 32)) ^ (((unint64_t)v20 + ~((_QWORD)v20 << 32)) >> 22);
    v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
    v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
    v26 = v22 & ((v25 >> 31) ^ v25);
    v27 = *(JSC::UnlinkedCodeBlock ***)(v21 + 16 * v26);
    if (v27 != v20)
    {
      v43 = 1;
      while (v27)
      {
        v26 = ((_DWORD)v26 + v43) & v22;
        v27 = *(JSC::UnlinkedCodeBlock ***)(v21 + 16 * v26);
        ++v43;
        if (v27 == v20)
          goto LABEL_13;
      }
      v26 = *(unsigned int *)(v21 - 4);
    }
LABEL_13:
    if (v26 != *(_DWORD *)(v21 - 4))
    {
      v28 = *(WTF **)(v21 + 16 * v26 + 8);
      goto LABEL_15;
    }
  }
  v48 = (uint64_t *)(a1 + 744);
  v49 = (JSC::BytecodeLivenessAnalysis *)*((_QWORD *)v20[7] + 11);
  if (!v49)
    v49 = (JSC::BytecodeLivenessAnalysis *)JSC::UnlinkedCodeBlock::livenessAnalysisSlow(v20[7], v20, (uint64_t)a3, a4, a5, a6, a7, a8);
  JSC::BytecodeLivenessAnalysis::computeFullLiveness(v49, (JSC::CodeBlock *)v20, &v127);
  v28 = v127;
  v50 = *v48;
  if (*v48
    || (v51 = WTF::fastZeroedMalloc(0x90uLL, a2, (uint64_t)a3, a4, a5, a6, a7, a8),
        *v48 = v51 + 16,
        *(_DWORD *)(v51 + 12) = 8,
        *(_DWORD *)(*v48 - 8) = 7,
        *(_DWORD *)(*v48 - 16) = 0,
        *(_DWORD *)(*v48 - 12) = 0,
        (v50 = *v48) != 0))
  {
    v52 = *(_DWORD *)(v50 - 8);
  }
  else
  {
    v52 = 0;
  }
  v53 = ((unint64_t)v20 + ~((_QWORD)v20 << 32)) ^ (((unint64_t)v20 + ~((_QWORD)v20 << 32)) >> 22);
  v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
  v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
  v56 = v52 & ((v55 >> 31) ^ v55);
  v57 = (WTF *)(v50 + 16 * v56);
  v58 = *(JSC::UnlinkedCodeBlock ***)v57;
  if (*(_QWORD *)v57)
  {
    v66 = 0;
    v67 = 1;
    do
    {
      if (v58 == v20)
        goto LABEL_193;
      if (v58 == (JSC::UnlinkedCodeBlock **)-1)
        v66 = v57;
      v56 = (v56 + v67) & v52;
      v57 = (WTF *)(v50 + 16 * v56);
      v58 = *(JSC::UnlinkedCodeBlock ***)v57;
      ++v67;
    }
    while (*(_QWORD *)v57);
    if (v66)
    {
      *(_QWORD *)v66 = 0;
      *((_QWORD *)v66 + 1) = 0;
      --*(_DWORD *)(*v48 - 16);
      v57 = v66;
    }
  }
  *(_QWORD *)v57 = v20;
  v59 = v127;
  v127 = 0;
  v60 = (WTF *)*((_QWORD *)v57 + 1);
  *((_QWORD *)v57 + 1) = v59;
  if (v60)
  {
    v61 = (unint64_t *)*((_QWORD *)v60 + 1);
    *((_QWORD *)v60 + 1) = 0;
    v122 = v57;
    v125 = (WTF *)v48;
    v121 = v60;
    if (v61)
    {
      v119 = (WTF *)v61;
      v63 = v61 + 1;
      v62 = *(unsigned int *)v61;
      if ((_DWORD)v62)
      {
        v64 = 16 * v62;
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        do
        {
          a2 = *v63;
          if (*v63)
          {
            v86 = *(_QWORD *)(StatusReg + 752);
            if (v86)
            {
              if (!(a2 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) != 0)
              {
LABEL_165:
                v87 = *(unsigned int *)(v86 + 8000);
                if (v87 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v86, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                }
                else
                {
                  *(_QWORD *)(v86 + 8 * v87) = a2 | 0x5000000000000;
                  *(_DWORD *)(v86 + 8000) = v87 + 1;
                }
                goto LABEL_160;
              }
              if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
              {
                a4 = 0;
              }
              else
              {
                a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)a4 == 1)
                  goto LABEL_165;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v86, a2, 1, a4, a5, a6, a7, a8);
            }
            else
            {
              pas_try_deallocate_slow_no_cache(*v63, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
LABEL_160:
          v63 += 2;
          v64 -= 16;
        }
        while (v64);
      }
      WTF::fastFree((unint64_t)v119, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v57 = v122;
      v48 = (uint64_t *)v125;
      v60 = v121;
    }
    v88 = *(unint64_t **)v60;
    *(_QWORD *)v60 = 0;
    if (v88)
    {
      v120 = (WTF *)v88;
      v90 = v88 + 1;
      v89 = *(unsigned int *)v88;
      if ((_DWORD)v89)
      {
        v91 = 16 * v89;
        v92 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        do
        {
          a2 = *v90;
          if (*v90)
          {
            v93 = *(_QWORD *)(v92 + 752);
            if (v93)
            {
              if (!(a2 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) != 0)
              {
LABEL_183:
                v94 = *(unsigned int *)(v93 + 8000);
                if (v94 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v93, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                }
                else
                {
                  *(_QWORD *)(v93 + 8 * v94) = a2 | 0x5000000000000;
                  *(_DWORD *)(v93 + 8000) = v94 + 1;
                }
                goto LABEL_178;
              }
              if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
              {
                a4 = 0;
              }
              else
              {
                a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)a4 == 1)
                  goto LABEL_183;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v93, a2, 1, a4, a5, a6, a7, a8);
            }
            else
            {
              pas_try_deallocate_slow_no_cache(*v90, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
LABEL_178:
          v90 += 2;
          v91 -= 16;
        }
        while (v91);
      }
      WTF::fastFree((unint64_t)v120, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v57 = v122;
      v48 = (uint64_t *)v125;
      v60 = v121;
    }
    WTF::fastFree((unint64_t)v60, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v95 = *v48;
  if (*v48)
    v96 = *(_DWORD *)(v95 - 12) + 1;
  else
    v96 = 1;
  *(_DWORD *)(v95 - 12) = v96;
  v97 = *v48;
  if (*v48)
    v98 = *(_DWORD *)(v97 - 12);
  else
    v98 = 0;
  v99 = (*(_DWORD *)(v97 - 16) + v98);
  v100 = *(unsigned int *)(v97 - 4);
  if (v100 > 0x400)
  {
    if (v100 > 2 * v99)
      goto LABEL_193;
LABEL_200:
    v108 = ((_DWORD)v100 << (6 * *(_DWORD *)(v97 - 12) >= (2 * v100)));
    goto LABEL_203;
  }
  if (3 * v100 > 4 * v99)
    goto LABEL_193;
  if ((_DWORD)v100)
    goto LABEL_200;
  v108 = 8;
LABEL_203:
  WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<std::unique_ptr<JSC::FullBytecodeLiveness>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::rehash(v48, v108, (uint64_t)v57, a4, a5, a6, a7, a8);
LABEL_193:
  v101 = v127;
  v127 = 0;
  if (v101)
  {
    v102 = (unint64_t *)*((_QWORD *)v101 + 1);
    *((_QWORD *)v101 + 1) = 0;
    v126 = v101;
    if (v102)
    {
      v123 = (WTF *)v102;
      v105 = *(_DWORD *)v102;
      v104 = v102 + 1;
      v103 = v105;
      if (v105)
      {
        v106 = 16 * v103;
        v107 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        do
        {
          a2 = *v104;
          if (*v104)
          {
            v109 = *(_QWORD *)(v107 + 752);
            if (v109)
            {
              if (!(a2 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) != 0)
              {
LABEL_216:
                v110 = *(unsigned int *)(v109 + 8000);
                if (v110 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v109, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                }
                else
                {
                  *(_QWORD *)(v109 + 8 * v110) = a2 | 0x5000000000000;
                  *(_DWORD *)(v109 + 8000) = v110 + 1;
                }
                goto LABEL_211;
              }
              if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
              {
                a4 = 0;
              }
              else
              {
                a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)a4 == 1)
                  goto LABEL_216;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v109, a2, 1, a4, a5, a6, a7, a8);
            }
            else
            {
              pas_try_deallocate_slow_no_cache(*v104, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
LABEL_211:
          v104 += 2;
          v106 -= 16;
        }
        while (v106);
      }
      WTF::fastFree((unint64_t)v123, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v101 = v126;
    }
    v111 = *(unint64_t **)v101;
    *(_QWORD *)v101 = 0;
    if (v111)
    {
      v124 = (WTF *)v111;
      v114 = *(_DWORD *)v111;
      v113 = v111 + 1;
      v112 = v114;
      if (v114)
      {
        v115 = 16 * v112;
        v116 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        do
        {
          a2 = *v113;
          if (*v113)
          {
            v117 = *(_QWORD *)(v116 + 752);
            if (v117)
            {
              if (!(a2 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) != 0)
              {
LABEL_234:
                v118 = *(unsigned int *)(v117 + 8000);
                if (v118 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v117, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                }
                else
                {
                  *(_QWORD *)(v117 + 8 * v118) = a2 | 0x5000000000000;
                  *(_DWORD *)(v117 + 8000) = v118 + 1;
                }
                goto LABEL_229;
              }
              if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
              {
                a4 = 0;
              }
              else
              {
                a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)a4 == 1)
                  goto LABEL_234;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v117, a2, 1, a4, a5, a6, a7, a8);
            }
            else
            {
              pas_try_deallocate_slow_no_cache(*v113, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
LABEL_229:
          v113 += 2;
          v115 -= 16;
        }
        while (v115);
      }
      WTF::fastFree((unint64_t)v124, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v101 = v126;
    }
    WTF::fastFree((unint64_t)v101, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v11 = *v8;
LABEL_15:
  if ((v11 & 2) != 0)
  {
    if ((v11 & 1) == 0)
    {
      LODWORD(v29) = -1;
      goto LABEL_18;
    }
    v69 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    LODWORD(v29) = -1;
LABEL_92:
    v71 = 2;
    goto LABEL_93;
  }
  if ((v11 & 1) == 0)
  {
    v29 = v11 >> 36;
    goto LABEL_18;
  }
  v68 = v11 & 0xFFFFFFFF8;
  v29 = *(unsigned int *)(v68 + 8);
  v69 = *(_QWORD *)v68;
  if ((_DWORD)v29 == 0x3FFFFFFF || (_DWORD)v29 == -1)
    goto LABEL_92;
  if (v29 >> 28)
  {
    v73 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v73 = v69;
    *(_DWORD *)(v73 + 8) = v29;
    v71 = 1;
    v69 = v73;
  }
  else
  {
    v71 = *(_QWORD *)v68;
    v69 = v29 << 36;
  }
LABEL_93:
  v11 = v69 | v71;
LABEL_18:
  if (v17 > v9)
  {
LABEL_19:
    v30 = (v29 & 3) + (v29 >> 2);
    v31 = *(unsigned int **)v28;
    if (**(_DWORD **)v28 <= v30)
    {
      __break(0xC471u);
      JUMPOUT(0x1983D2E34);
    }
    goto LABEL_20;
  }
  if ((v11 & 2) != 0)
  {
    v38 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    LODWORD(v37) = -1;
    if ((v11 & 1) == 0)
      goto LABEL_30;
LABEL_107:
    v38 = (_QWORD *)*v38;
    goto LABEL_30;
  }
  if ((v11 & 1) != 0)
  {
    v38 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    LODWORD(v37) = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8);
    goto LABEL_107;
  }
  v37 = v11 >> 36;
  v38 = (_QWORD *)(v11 & 0xFFFFFFFF8);
LABEL_30:
  if (v38)
    v39 = v38 + 1;
  else
    v39 = v10;
  v40 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(*v39 + 56) + 80) + ((unint64_t)v37 >> 2));
  v41 = *v40;
  if ((v41 | 2) == 0x82)
    v41 = v40[1];
  if (v41 > 3 || v41 == 2)
    goto LABEL_19;
  v30 = (v29 & 3) + (v29 >> 2);
  v31 = (unsigned int *)*((_QWORD *)v28 + 1);
  if (*v31 <= v30)
  {
    __break(0xC471u);
    JUMPOUT(0x1983D2BC0);
  }
LABEL_20:
  v32 = &v31[4 * v30];
  v33 = ~v16;
  if (*((_QWORD *)v32 + 2) <= v33)
    v34 = 0;
  else
    v34 = (*(_DWORD *)(*((_QWORD *)v32 + 1) + ((v33 >> 3) & 0x1FFFFFFC)) >> ~(_BYTE)v16) & 1;
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  return v34;
}

void JSC::DFG::Graph::localsAndTmpsLiveInBytecode(uint64_t a1@<X0>, uint64_t *a2@<X1>, WTF::BitVector *a3@<X8>)
{
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  _UNKNOWN *__ptr32 *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int *v41;
  unint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t *v62;
  unsigned __int8 *v63;
  unsigned int v64;
  int v66;
  uint64_t *v67;
  JSC::BytecodeLivenessAnalysis *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  char v89;
  char v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  char v101[24];
  WTF *v102;
  uint64_t v103;

  *(_QWORD *)a3 = 0x8000000000000000;
  if (!*(_DWORD *)(a1 + 60))
  {
    __break(0xC471u);
    JUMPOUT(0x1983D3730);
  }
  v6 = **(unsigned int ***)(a1 + 48);
  v7 = v6[23];
  v8 = v6[21] - (unint64_t)v6[22];
  if (v8 >= 0x40)
  {
    v18 = v6[23];
    WTF::BitVector::resizeOutOfLine(a3, v8, 0);
    v7 = v18;
  }
  v9 = *a2;
  if ((*a2 & 1) != 0)
  {
    v19 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v20 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v20 != 0x3FFFFFFF)
        ? (v21 = (_DWORD)v20 == -1)
        : (v21 = 1),
          v21))
    {
      v22 = 2;
    }
    else if (v20 >> 28)
    {
      v23 = v7;
      v24 = WTF::fastMalloc((WTF *)0x10);
      v7 = v23;
      *(_QWORD *)v24 = v19;
      *(_DWORD *)(v24 + 8) = v20;
      v22 = 1;
      v19 = v24;
    }
    else
    {
      v22 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v19 = v20 << 36;
    }
    v9 = v19 | v22;
  }
  v10 = 0;
  v11 = (uint64_t *)(a1 + 40);
  v100 = v9;
  v12 = (uint64_t *)(a1 + 744);
  v13 = (unint64_t *)&v100;
  v14 = v9;
  v15 = 0x3FFFFFFF;
  v16 = 0x3FFFFFFF;
  v17 = &jpt_1983D3914;
  while (1)
  {
    v25 = v14 & 0xFFFFFFFF8;
    if ((v14 & 1) != 0)
      v25 = *(_QWORD *)v25;
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 24);
      v27 = HIDWORD(v26) & 0xFFFFF | ((int)(v26 >> 28) >> 24 << 20);
      if ((*(_BYTE *)(v25 + 32) & 1) != 0)
      {
        if (*(uint64_t *)a3 >= 0)
          v58 = 2 * *(_QWORD *)a3 + 8;
        else
          v58 = (uint64_t)a3;
        *(_QWORD *)(v58 + (((unint64_t)(-4 - v27) >> 3) & 0x1FFFFFF8)) |= 1 << (-4 - v27);
        if (((*(_QWORD *)(v25 + 24) >> 60) & 0xF) - 3 > 2)
          goto LABEL_26;
LABEL_79:
        if (*(uint64_t *)a3 >= 0)
          v59 = 2 * *(_QWORD *)a3 + 8;
        else
          v59 = (uint64_t)a3;
        *(_QWORD *)(v59 + (((unint64_t)(-5 - v27) >> 3) & 0x1FFFFFF8)) |= 1 << (-5 - v27);
        goto LABEL_26;
      }
      if (((v26 >> 60) & 0xF) - 3 <= 2)
        goto LABEL_79;
    }
    else
    {
      v27 = 0;
    }
LABEL_26:
    v28 = (uint64_t *)(v25 + 8);
    if (!v25)
      v28 = v11;
    v29 = *v28;
    v103 = *v28;
    v30 = *v12;
    if (!*v12)
      goto LABEL_104;
    v31 = *(_DWORD *)(v30 - 8);
    v32 = (~(v29 << 32) + v29) ^ ((unint64_t)(~(v29 << 32) + v29) >> 22);
    v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
    v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
    v35 = v31 & ((v34 >> 31) ^ v34);
    v36 = *(_QWORD *)(v30 + 16 * v35);
    if (v36 != v29)
    {
      v66 = 1;
      while (v36)
      {
        v35 = ((_DWORD)v35 + v66) & v31;
        v36 = *(_QWORD *)(v30 + 16 * v35);
        ++v66;
        if (v36 == v29)
          goto LABEL_30;
      }
      v35 = *(unsigned int *)(v30 - 4);
    }
LABEL_30:
    if (v35 == *(_DWORD *)(v30 - 4))
    {
LABEL_104:
      v89 = v10;
      v67 = v12;
      v91 = v11;
      v94 = v9;
      v97 = v7;
      v68 = *(JSC::BytecodeLivenessAnalysis **)(*(_QWORD *)(v29 + 56) + 88);
      if (!v68)
        v68 = (JSC::BytecodeLivenessAnalysis *)JSC::UnlinkedCodeBlock::livenessAnalysisSlow(*(JSC::UnlinkedCodeBlock **)(v29 + 56), (JSC::UnlinkedCodeBlock **)v29, (uint64_t)v12, 4294967290, -1, 4294967291, 4294967292, (uint64_t)v17);
      JSC::BytecodeLivenessAnalysis::computeFullLiveness(v68, (JSC::CodeBlock *)v29, &v102);
      v37 = v102;
      WTF::HashMap<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<std::unique_ptr<JSC::FullBytecodeLiveness>>,WTF::HashTableTraits>::add<std::unique_ptr<JSC::FullBytecodeLiveness>>(v67, &v103, (uint64_t *)&v102, v69, v70, v71, v72, v73, (uint64_t)v101);
      v80 = v102;
      v102 = 0;
      if (v80)
        std::default_delete<JSC::FullBytecodeLiveness>::operator()[abi:sn180100]((int)&v102, v80, v74, v75, v76, v77, v78, v79);
      v7 = v97;
      v11 = v91;
      v9 = v94;
      v12 = v67;
      v17 = &jpt_1983D3914;
      v10 = v89;
    }
    else
    {
      v37 = *(WTF **)(v30 + 16 * v35 + 8);
    }
    v38 = *v13;
    if ((*v13 & 2) != 0)
    {
      if ((v38 & 1) == 0)
      {
        v39 = 0xFFFFFFFFLL;
        goto LABEL_35;
      }
      v82 = *(_QWORD *)(v38 & 0xFFFFFFFF8);
      v39 = 0xFFFFFFFFLL;
    }
    else
    {
      if ((v38 & 1) == 0)
      {
        v39 = v38 >> 36;
        goto LABEL_35;
      }
      v81 = v38 & 0xFFFFFFFF8;
      v39 = *(unsigned int *)(v81 + 8);
      v82 = *(_QWORD *)v81;
      if ((_DWORD)v39 != -1 && v39 != 0x3FFFFFFF)
      {
        if (v39 >> 28)
        {
          v99 = v7;
          v93 = v11;
          v96 = v9;
          v86 = *(_QWORD *)v81;
          v88 = v12;
          v90 = v10;
          v85 = WTF::fastMalloc((WTF *)0x10);
          v10 = v90;
          v17 = &jpt_1983D3914;
          v12 = v88;
          v11 = v93;
          v9 = v96;
          v7 = v99;
          *(_QWORD *)v85 = v86;
          *(_DWORD *)(v85 + 8) = v39;
          v84 = 1;
          v82 = v85;
        }
        else
        {
          v84 = *(_QWORD *)v81;
          v82 = v39 << 36;
        }
        goto LABEL_125;
      }
    }
    v84 = 2;
LABEL_125:
    v38 = v82 | v84;
LABEL_35:
    if ((v10 & 1) == 0)
      goto LABEL_36;
    v42 = v38 & 1;
    if ((v38 & 2) != 0)
    {
      v61 = (_QWORD *)(v38 & 0xFFFFFFFF8);
      LODWORD(v60) = -1;
      if ((v38 & 1) == 0)
        goto LABEL_86;
    }
    else
    {
      if ((v38 & 1) == 0)
      {
        v60 = v38 >> 36;
        v61 = (_QWORD *)(v38 & 0xFFFFFFFF8);
        goto LABEL_86;
      }
      v61 = (_QWORD *)(v38 & 0xFFFFFFFF8);
      LODWORD(v60) = *(_DWORD *)((v38 & 0xFFFFFFFF8) + 8);
    }
    v61 = (_QWORD *)*v61;
LABEL_86:
    if (v61)
      v62 = v61 + 1;
    else
      v62 = v11;
    v63 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(*v62 + 56) + 80) + ((unint64_t)v60 >> 2));
    v64 = *v63;
    if ((v64 | 2) == 0x82)
      v64 = v63[1];
    if (v64 > 3 || v64 == 2)
    {
LABEL_36:
      v40 = (v39 & 3) + (v39 >> 2);
      v41 = *(unsigned int **)v37;
      if (*v41 <= v40)
      {
        __break(0xC471u);
        JUMPOUT(0x1983D3C5CLL);
      }
      v42 = v38 & 1;
      goto LABEL_38;
    }
    v40 = (v39 & 3) + (v39 >> 2);
    v41 = (unsigned int *)*((_QWORD *)v37 + 1);
    if (*v41 <= v40)
    {
      __break(0xC471u);
      JUMPOUT(0x1983D3BF4);
    }
LABEL_38:
    if (v42 && (v38 & 0xFFFFFFFF8) != 0)
    {
      v98 = v7;
      v92 = v11;
      v95 = v9;
      v87 = v12;
      WTF::fastFree(v38 & 0xFFFFFFFF8, v11, (uint64_t)v12, 4294967290, -1, 4294967291, 4294967292, (uint64_t)v17);
      v12 = v87;
      v11 = v92;
      v9 = v95;
      v7 = v98;
    }
    v43 = *(_DWORD *)(v29 + 20);
    if (v43)
    {
      v44 = v27 - v43;
      v45 = v43 - 1;
      do
      {
        if ((v44 < v16 || v44 >= v15)
          && ((*(_DWORD *)(*(_QWORD *)&v41[4 * v40 + 2] + 4 * (v45 >> 5)) >> v45) & 1) != 0)
        {
          if (*(uint64_t *)a3 >= 0)
            v46 = 2 * *(_QWORD *)a3 + 8;
          else
            v46 = (uint64_t)a3;
          *(_QWORD *)(v46 + (((unint64_t)(v45 - v27) >> 3) & 0x1FFFFFF8)) |= 1 << (v45
                                                                                          - v27);
        }
        --v45;
        ++v44;
      }
      while (v45 != -1);
    }
    v47 = *v13;
    if ((*v13 & 2) != 0)
    {
      v49 = 3;
      v48 = 0xFFFFFFFFLL;
    }
    else
    {
      if ((v47 & 1) != 0)
      {
        LODWORD(v48) = *(_DWORD *)((v47 & 0xFFFFFFFF8) + 8);
        if ((v48 & 3) == 0)
          goto LABEL_65;
      }
      else
      {
        if ((v47 & 0x3000000000) == 0)
          goto LABEL_65;
        v48 = v47 >> 36;
      }
      v49 = v48 & 3;
      if ((v48 & 3) == 0)
        goto LABEL_65;
      v48 = v48;
    }
    v50 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v29 + 56) + 80) + (v48 >> 2));
    v51 = *v50;
    if ((v51 | 2) == 0x82)
      v51 = v50[1];
    switch(v51)
    {
      case 0:
      case 1:
      case 3:
        if (v49 == 1)
          goto LABEL_59;
        break;
      case 2:
LABEL_59:
        if (v25)
          v52 = *(_DWORD *)(v25 + 24) >> 22;
        else
          v52 = 0;
        v53 = v52 + v7;
        if (*(uint64_t *)a3 >= 0)
          v54 = 2 * *(_QWORD *)a3 + 8;
        else
          v54 = (uint64_t)a3;
        *(_QWORD *)(v54 + ((v53 >> 3) & 0x1FFFFFF8)) |= 1 << v53;
        break;
      case 4:
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1983D3CECLL);
    }
LABEL_65:
    if (!v25)
      break;
    v55 = *(_DWORD **)v25;
    if (*(_QWORD *)v25)
      LODWORD(v55) = *v55;
    v16 = v27 + 5;
    v15 = (_DWORD)v55 + v27 + 5;
    if (v27 + 5 < v15)
    {
      v56 = -6 - v27;
      do
      {
        if (*(uint64_t *)a3 >= 0)
          v57 = 2 * *(_QWORD *)a3 + 8;
        else
          v57 = (uint64_t)a3;
        *(_QWORD *)(v57 + (((unint64_t)v56 >> 3) & 0x1FFFFFF8)) |= 1 << v56;
        --v56;
        LODWORD(v55) = (_DWORD)v55 - 1;
      }
      while ((_DWORD)v55);
    }
    v14 = *(_QWORD *)(v25 + 16);
    v10 = 1;
    v13 = (unint64_t *)(v25 + 16);
  }
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, v11, (uint64_t)v12, 4294967290, -1, 4294967291, 4294967292, (uint64_t)v17);
}

uint64_t JSC::DFG::Graph::requiredRegisterCountForExit(JSC::DFG::Graph *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  int v10;
  _QWORD *v11;
  unsigned int v12;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v8 = (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 20) & 0x7FFFFFFF) + 3) & 0xFFFFFFFE) - 2;
  v9 = *(_QWORD *)(*((_QWORD *)this + 3) + 128);
  v10 = (*(_DWORD *)v9)++;
  v11 = *(_QWORD **)(v9 + 8);
  if (v10)
  {
    *(_DWORD *)v9 = v10;
  }
  else
  {
    if (v11)
    {
      v14 = *(unint64_t **)(v9 + 8);
      do
      {
        v15 = (unint64_t *)v14[7];
        v16 = v14[2];
        if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        v17 = *v14;
        *v14 = 0;
        if (v17)
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
        v14 = v15;
      }
      while (v15);
    }
    *(_QWORD *)(v9 + 8) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  for (; v11; v11 = (_QWORD *)v11[7])
  {
    v12 = (((*(_DWORD *)(*(_QWORD *)(v11[1] + 56) + 20) & 0x7FFFFFFF) + 3) & 0xFFFFFFFE)
        - (HIDWORD(v11[3]) & 0xFFFFF | ((int)(v11[3] >> 28) >> 24 << 20))
        - 2;
    if (v8 <= v12)
      v8 = v12;
    else
      v8 = v8;
  }
  return v8;
}

uint64_t JSC::DFG::Graph::requiredRegisterCountForExecutionAndExit(JSC::DFG::Graph *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v8 = *((_DWORD *)this + 214);
  v9 = *((_DWORD *)this + 215);
  v10 = (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 20) & 0x7FFFFFFF) + 3) & 0xFFFFFFFE) - 2;
  v11 = *(_QWORD *)(*((_QWORD *)this + 3) + 128);
  v12 = (*(_DWORD *)v11)++;
  v13 = *(_QWORD **)(v11 + 8);
  if (v12)
  {
    *(_DWORD *)v11 = v12;
  }
  else
  {
    if (v13)
    {
      v16 = *(unint64_t **)(v11 + 8);
      do
      {
        v17 = (unint64_t *)v16[7];
        v18 = v16[2];
        if ((v18 & 1) != 0 && (v18 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v18 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        v19 = *v16;
        *v16 = 0;
        if (v19)
          WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree((unint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
        v16 = v17;
      }
      while (v17);
    }
    *(_QWORD *)(v11 + 8) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  for (; v13; v13 = (_QWORD *)v13[7])
  {
    if (v10 <= (((*(_DWORD *)(*(_QWORD *)(v13[1] + 56) + 20) & 0x7FFFFFFF) + 3) & 0xFFFFFFFE)
              - (HIDWORD(v13[3]) & 0xFFFFF | ((int)(v13[3] >> 28) >> 24 << 20))
              - 2)
      v10 = (((*(_DWORD *)(*(_QWORD *)(v13[1] + 56) + 20) & 0x7FFFFFFF) + 3) & 0xFFFFFFFE)
          - (HIDWORD(v13[3]) & 0xFFFFF | ((int)(v13[3] >> 28) >> 24 << 20))
          - 2;
  }
  v14 = ((v8 + v9 + 3) & 0xFFFFFFFE) - 2;
  if (v14 <= v10)
    return v10;
  else
    return v14;
}

uint64_t JSC::DFG::Graph::tryGetConstantProperty(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v9;
  uint64_t v10;
  int v13;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  unsigned __int8 *v21;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  _DWORD *v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned __int8 *v45;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  unsigned int v59;
  _DWORD *v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  unsigned int v64;
  _BOOL4 v65;
  uint64_t v66;
  uint64_t v67[3];

  v9 = ((*(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) - 1) & 0xFFFFFFFD) != 0 && a2 != 0 && (a2 & 0xFFFE000000000002) == 0;
  if (!v9 || *(unsigned __int8 *)(a2 + 5) < 0x17u)
    return 0;
  v13 = a4;
  v16 = *a3;
  if ((*a3 & 1) != 0)
    v17 = *(_DWORD *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
  else
    v17 = v16 > 3;
  if (!v17)
    goto LABEL_38;
  v18 = v17;
  v19 = (~((_DWORD)a4 << 15) + a4) ^ ((~((_DWORD)a4 << 15) + a4) >> 10);
  do
  {
    --v18;
    v20 = *a3 & 0xFFFFFFFFFFFFFFFCLL;
    if ((*a3 & 1) != 0)
      v20 = *(_QWORD *)(v20 + 8 * v18 + 8);
    v21 = (unsigned __int8 *)(v20 + 15);
    if (__ldaxr((unsigned __int8 *)(v20 + 15)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v21))
    {
      goto LABEL_20;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v20 + 15);
LABEL_20:
    v23 = *(_QWORD *)(v20 + 64);
    if (!v23)
      goto LABEL_22;
    if (*(_BYTE *)(v23 + 5) == 1)
      goto LABEL_22;
    v27 = *(_QWORD *)(v23 + 56);
    if (!v27)
      goto LABEL_22;
    v28 = ((9 * v19) ^ ((9 * v19) >> 6)) + ~(((9 * v19) ^ ((9 * v19) >> 6)) << 11);
    v29 = *(_DWORD *)(v27 - 8);
    v30 = v29 & (v28 ^ HIWORD(v28));
    v31 = *(_DWORD *)(v27 + 16 * v30);
    if (v31 != v13)
    {
      v36 = 1;
      while (v31 != 0x7FFFFFFF)
      {
        v30 = ((_DWORD)v30 + v36) & v29;
        v31 = *(_DWORD *)(v27 + 16 * v30);
        ++v36;
        if (v31 == v13)
          goto LABEL_34;
      }
LABEL_22:
      v24 = 0;
      goto LABEL_23;
    }
LABEL_34:
    v24 = *(_QWORD *)(v27 + 16 * v30 + 8);
LABEL_23:
    v25 = __ldxr(v21);
    if (v25 == 1)
    {
      if (!__stlxr(0, v21))
        goto LABEL_28;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v21, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_28:
    if (!v24 || *(_BYTE *)(v24 + 4) == 2)
      return 0;
    v26 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 136);
    v66 = v24;
    WTF::HashTable<JSC::WatchpointSet *,JSC::WatchpointSet *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>>::add(v26, &v66, a4, a5, a6, a7, a8, (uint64_t)v67);
  }
  while (v18);
  v16 = *a3;
LABEL_38:
  v67[0] = 0;
  v32 = (_DWORD *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v16 & 1) != 0)
  {
    if (*v32)
    {
      v37 = 0;
      v38 = 0;
      do
      {
        v39 = &v32[2 * v38];
        v40 = *((_QWORD *)v39 + 1);
        if ((v37 & 1) != 0)
        {
          WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine(v67, *((_QWORD *)v39 + 1));
          v37 = v67[0];
        }
        else if (v40 != (v37 & 0xFFFFFFFFFFFFFFFCLL))
        {
          if ((v37 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          {
            v41 = WTF::fastMalloc((WTF *)0x28);
            *(_QWORD *)v41 = 0x400000002;
            v42 = v67[0];
            *(_QWORD *)(v41 + 8) = v67[0] & 0xFFFFFFFFFFFFFFFCLL;
            *(_QWORD *)(v41 + 16) = v40;
            v37 = v42 & 2 | (unint64_t)v41 | 1;
          }
          else
          {
            v37 = v37 & 2 | v40;
          }
          v67[0] = v37;
        }
        ++v38;
      }
      while (v38 < *v32);
    }
  }
  else if (v32)
  {
    v67[0] = v16 & 0xFFFFFFFFFFFFFFFCLL;
  }
  v33 = (unsigned __int8 *)(a2 + 4);
  while (1)
  {
    v34 = *v33;
    if ((v34 & 0x40) != 0)
      break;
    v35 = __ldaxr(v33);
    if (v35 == v34)
    {
      if (!__stxr(v34 | 0x40, v33))
        goto LABEL_63;
    }
    else
    {
      __clrex();
    }
  }
  JSC::JSCellLock::lockSlow((JSC::JSCellLock *)a2);
LABEL_63:
  v43 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
  v44 = (unsigned int *)(v67[0] & 0xFFFFFFFFFFFFFFFCLL);
  if ((v67[0] & 1) != 0)
  {
    v53 = *v44;
    if (!(_DWORD)v53)
      goto LABEL_99;
    if (*((_QWORD *)v44 + 1) != v43)
    {
      v54 = 0;
      v55 = v44 + 4;
      do
      {
        if (v53 - 1 == v54)
          goto LABEL_99;
        v56 = *(_QWORD *)&v55[2 * v54++];
      }
      while (v56 != v43);
      if (v54 >= v53)
        goto LABEL_99;
    }
LABEL_65:
    v45 = (unsigned __int8 *)(v43 + 15);
    if (__ldaxr((unsigned __int8 *)(v43 + 15)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v45))
    {
      goto LABEL_68;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v43 + 15);
LABEL_68:
    if (v13 == -1)
      goto LABEL_100;
    v47 = *(unsigned __int16 *)(v43 + 24);
    if (v47 == 65534)
    {
      v47 = -1;
    }
    else if (v47 == 0xFFFF)
    {
      v47 = *(_DWORD *)(*(_QWORD *)(v43 + 64) + 84);
    }
    if (v47 < v13 || v13 <= 63 && *(unsigned __int8 *)(v43 + 14) <= v13)
    {
LABEL_100:
      v10 = 0;
    }
    else
    {
      if (v13 <= 63)
      {
        v48 = a2 + 16;
      }
      else
      {
        v48 = *(_QWORD *)(a2 + 8) - 8;
        v13 = 63 - v13;
      }
      v10 = *(_QWORD *)(v48 + 8 * v13);
    }
    v49 = __ldxr(v45);
    if (v49 == 1)
    {
      if (!__stlxr(0, v45))
        goto LABEL_84;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v43 + 15), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_84:
    v50 = 1;
    goto LABEL_85;
  }
  if (v44 == (unsigned int *)v43)
    goto LABEL_65;
LABEL_99:
  v50 = 0;
  v10 = 0;
LABEL_85:
  while (1)
  {
    v51 = *v33;
    if ((v51 & 0xC0) != 0x40)
      break;
    v52 = __ldxr(v33);
    if (v52 == v51)
    {
      if (!__stxr(v51 & 0xBF, v33))
        goto LABEL_102;
    }
    else
    {
      __clrex();
    }
  }
  JSC::JSCellLock::unlockSlow((JSC::JSCellLock *)a2, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_102:
  if (v10)
    v57 = v50;
  else
    v57 = 0;
  if (v57 == 1)
  {
    v58 = *a3;
    if ((*a3 & 1) != 0)
    {
      v60 = (_DWORD *)(v58 & 0xFFFFFFFFFFFFFFFCLL);
      v59 = *(_DWORD *)(v58 & 0xFFFFFFFFFFFFFFFCLL);
    }
    else
    {
      v59 = v58 > 3;
      v60 = (_DWORD *)(v58 & 0xFFFFFFFFFFFFFFFCLL);
    }
    v61 = 2 * v59;
    while (v61 * 4)
    {
      v62 = v60;
      if ((v58 & 1) != 0)
        v62 = *(_DWORD **)&v60[v61];
      if ((*((_BYTE *)v62 + 19) & 0xC) == 0)
      {
        v63 = *((_QWORD *)v62 + 12);
        v64 = (v63 & 1) != 0 ? (v63 >> 1) & 3 : *(unsigned __int8 *)(v63 + 4);
        v61 -= 2;
        if (v64 != 2)
          continue;
      }
      if ((v58 & 1) != 0)
        v65 = *v60 == 1;
      else
        v65 = v58 > 3;
      if (!v65)
        v10 = 0;
      break;
    }
  }
  else
  {
    v10 = 0;
  }
  if ((v67[0] & 1) != 0)
    WTF::fastFree(v67[0] & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  return v10;
}

uint64_t JSC::DFG::Graph::tryGetConstantProperty(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ConstantProperty;
  unint64_t v31;

  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(a1 + 24) + 280), a3, a3, a4, a5, a6, a7, a8);
  JSC::DFG::DesiredWatchpoints::consider((JSC::DFG::DesiredWatchpoints *)(*(_QWORD *)(a1 + 24) + 136), (JSC::Structure *)a3, v12, v13, v14, v15, v16, v17);
  v31 = a3;
  ConstantProperty = JSC::DFG::Graph::tryGetConstantProperty(a1, a2, &v31, a4, v18, v19, v20, v21);
  if ((a3 & 1) != 0)
    WTF::fastFree(a3 & 0xFFFFFFFFFFFFFFFCLL, v22, v23, v24, v25, v26, v27, v28);
  return ConstantProperty;
}

uint64_t JSC::DFG::Graph::tryGetConstantProperty(JSC::DFG::Graph *this, const JSC::DFG::AbstractValue *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unsigned __int8 *v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  _DWORD *v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned __int8 *v46;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int *v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  unsigned int v60;
  _DWORD *v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  unsigned int v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68[3];

  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == 4 || (*(_QWORD *)a2 & 2) != 0)
    return 0;
  v12 = *((_QWORD *)a2 + 3);
  v13 = ((*(_DWORD *)(*((_QWORD *)this + 3) + 16) - 1) & 0xFFFFFFFD) == 0 || v12 == 0;
  v14 = !v13 && (v12 & 0xFFFE000000000002) == 0;
  if (!v14 || *(unsigned __int8 *)(v12 + 5) < 0x17u)
    return 0;
  v17 = a3;
  if ((v8 & 1) != 0)
    v18 = *(_DWORD *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
  else
    v18 = v8 > 3;
  if (!v18)
    goto LABEL_43;
  v19 = v18;
  v20 = (~((_DWORD)a3 << 15) + a3) ^ ((~((_DWORD)a3 << 15) + a3) >> 10);
  do
  {
    --v19;
    v21 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFCLL;
    if ((*(_QWORD *)a2 & 1) != 0)
      v21 = *(_QWORD *)(v21 + 8 * v19 + 8);
    v22 = (unsigned __int8 *)(v21 + 15);
    if (__ldaxr((unsigned __int8 *)(v21 + 15)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v22))
    {
      goto LABEL_25;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v21 + 15);
LABEL_25:
    v24 = *(_QWORD *)(v21 + 64);
    if (!v24)
      goto LABEL_27;
    if (*(_BYTE *)(v24 + 5) == 1)
      goto LABEL_27;
    v28 = *(_QWORD *)(v24 + 56);
    if (!v28)
      goto LABEL_27;
    v29 = ((9 * v20) ^ ((9 * v20) >> 6)) + ~(((9 * v20) ^ ((9 * v20) >> 6)) << 11);
    v30 = *(_DWORD *)(v28 - 8);
    v31 = v30 & (v29 ^ HIWORD(v29));
    v32 = *(_DWORD *)(v28 + 16 * v31);
    if (v32 != v17)
    {
      v37 = 1;
      while (v32 != 0x7FFFFFFF)
      {
        v31 = ((_DWORD)v31 + v37) & v30;
        v32 = *(_DWORD *)(v28 + 16 * v31);
        ++v37;
        if (v32 == v17)
          goto LABEL_39;
      }
LABEL_27:
      v25 = 0;
      goto LABEL_28;
    }
LABEL_39:
    v25 = *(_QWORD *)(v28 + 16 * v31 + 8);
LABEL_28:
    v26 = __ldxr(v22);
    if (v26 == 1)
    {
      if (!__stlxr(0, v22))
        goto LABEL_33;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v22, 0, a3, a4, a5, a6, a7, a8);
LABEL_33:
    if (!v25 || *(_BYTE *)(v25 + 4) == 2)
      return 0;
    v27 = (uint64_t *)(*((_QWORD *)this + 3) + 136);
    v67 = v25;
    WTF::HashTable<JSC::WatchpointSet *,JSC::WatchpointSet *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>>::add(v27, &v67, a4, a5, a6, a7, a8, (uint64_t)v68);
  }
  while (v19);
  v8 = *(_QWORD *)a2;
LABEL_43:
  v68[0] = 0;
  v33 = (_DWORD *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v8 & 1) != 0)
  {
    if (*v33)
    {
      v38 = 0;
      v39 = 0;
      do
      {
        v40 = &v33[2 * v39];
        v41 = *((_QWORD *)v40 + 1);
        if ((v38 & 1) != 0)
        {
          WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine(v68, *((_QWORD *)v40 + 1));
          v38 = v68[0];
        }
        else if (v41 != (v38 & 0xFFFFFFFFFFFFFFFCLL))
        {
          if ((v38 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          {
            v42 = WTF::fastMalloc((WTF *)0x28);
            *(_QWORD *)v42 = 0x400000002;
            v43 = v68[0];
            *(_QWORD *)(v42 + 8) = v68[0] & 0xFFFFFFFFFFFFFFFCLL;
            *(_QWORD *)(v42 + 16) = v41;
            v38 = v43 & 2 | (unint64_t)v42 | 1;
          }
          else
          {
            v38 = v38 & 2 | v41;
          }
          v68[0] = v38;
        }
        ++v39;
      }
      while (v39 < *v33);
    }
  }
  else if (v33)
  {
    v68[0] = v8 & 0xFFFFFFFFFFFFFFFCLL;
  }
  v34 = (unsigned __int8 *)(v12 + 4);
  while (1)
  {
    v35 = *v34;
    if ((v35 & 0x40) != 0)
      break;
    v36 = __ldaxr(v34);
    if (v36 == v35)
    {
      if (!__stxr(v35 | 0x40, v34))
        goto LABEL_68;
    }
    else
    {
      __clrex();
    }
  }
  JSC::JSCellLock::lockSlow((JSC::JSCellLock *)v12);
LABEL_68:
  v44 = 16 * (*(_DWORD *)v12 & 0xFFFFFFFE);
  v45 = (unsigned int *)(v68[0] & 0xFFFFFFFFFFFFFFFCLL);
  if ((v68[0] & 1) != 0)
  {
    v54 = *v45;
    if (!(_DWORD)v54)
      goto LABEL_104;
    if (*((_QWORD *)v45 + 1) != v44)
    {
      v55 = 0;
      v56 = v45 + 4;
      do
      {
        if (v54 - 1 == v55)
          goto LABEL_104;
        v57 = *(_QWORD *)&v56[2 * v55++];
      }
      while (v57 != v44);
      if (v55 >= v54)
        goto LABEL_104;
    }
LABEL_70:
    v46 = (unsigned __int8 *)(v44 + 15);
    if (__ldaxr((unsigned __int8 *)(v44 + 15)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v46))
    {
      goto LABEL_73;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v44 + 15);
LABEL_73:
    if (v17 == -1)
      goto LABEL_105;
    v48 = *(unsigned __int16 *)(v44 + 24);
    if (v48 == 65534)
    {
      v48 = -1;
    }
    else if (v48 == 0xFFFF)
    {
      v48 = *(_DWORD *)(*(_QWORD *)(v44 + 64) + 84);
    }
    if (v48 < v17 || v17 <= 63 && *(unsigned __int8 *)(v44 + 14) <= v17)
    {
LABEL_105:
      v15 = 0;
    }
    else
    {
      if (v17 <= 63)
      {
        v49 = v12 + 16;
      }
      else
      {
        v49 = *(_QWORD *)(v12 + 8) - 8;
        v17 = 63 - v17;
      }
      v15 = *(_QWORD *)(v49 + 8 * v17);
    }
    v50 = __ldxr(v46);
    if (v50 == 1)
    {
      if (!__stlxr(0, v46))
        goto LABEL_89;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v44 + 15), 0, a3, a4, a5, a6, a7, a8);
LABEL_89:
    v51 = 1;
    goto LABEL_90;
  }
  if (v45 == (unsigned int *)v44)
    goto LABEL_70;
LABEL_104:
  v51 = 0;
  v15 = 0;
LABEL_90:
  while (1)
  {
    v52 = *v34;
    if ((v52 & 0xC0) != 0x40)
      break;
    v53 = __ldxr(v34);
    if (v53 == v52)
    {
      if (!__stxr(v52 & 0xBF, v34))
        goto LABEL_107;
    }
    else
    {
      __clrex();
    }
  }
  JSC::JSCellLock::unlockSlow((JSC::JSCellLock *)v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
LABEL_107:
  if (v15)
    v58 = v51;
  else
    v58 = 0;
  if (v58 == 1)
  {
    v59 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 & 1) != 0)
    {
      v61 = (_DWORD *)(v59 & 0xFFFFFFFFFFFFFFFCLL);
      v60 = *(_DWORD *)(v59 & 0xFFFFFFFFFFFFFFFCLL);
    }
    else
    {
      v60 = v59 > 3;
      v61 = (_DWORD *)(v59 & 0xFFFFFFFFFFFFFFFCLL);
    }
    v62 = 2 * v60;
    while (v62 * 4)
    {
      v63 = v61;
      if ((v59 & 1) != 0)
        v63 = *(_DWORD **)&v61[v62];
      if ((*((_BYTE *)v63 + 19) & 0xC) == 0)
      {
        v64 = *((_QWORD *)v63 + 12);
        v65 = (v64 & 1) != 0 ? (v64 >> 1) & 3 : *(unsigned __int8 *)(v64 + 4);
        v62 -= 2;
        if (v65 != 2)
          continue;
      }
      if ((v59 & 1) != 0)
        v66 = *v61 == 1;
      else
        v66 = v59 > 3;
      if (!v66)
        v15 = 0;
      break;
    }
  }
  else
  {
    v15 = 0;
  }
  if ((v68[0] & 1) != 0)
    WTF::fastFree(v68[0] & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
  return v15;
}

void JSC::DFG::Graph::inferredValueForProperty(_QWORD *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  unint64_t v10;
  BOOL v11;
  unint64_t v14;
  BOOL v15;
  BOOL v16;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  unsigned __int8 *v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  _DWORD *v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned __int8 *v47;
  int v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  int v60;
  __int128 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  _DWORD *v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  unsigned int v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75[3];

  v10 = *a2;
  v11 = *a2 != 4 && (*a2 & 2) == 0;
  if (!v11
    || ((v14 = a2[3], ((*(_DWORD *)(a1[3] + 16) - 1) & 0xFFFFFFFD) != 0) ? (v15 = v14 == 0) : (v15 = 1),
        !v15 ? (v16 = (v14 & 0xFFFE000000000002) == 0) : (v16 = 0),
        !v16 || *(unsigned __int8 *)(v14 + 5) < 0x17u))
  {
LABEL_13:
    *a9 = xmmword_199123950;
    a9[1] = xmmword_199123960;
    return;
  }
  v18 = a3;
  if ((v10 & 1) != 0)
    v19 = *(_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
  else
    v19 = v10 > 3;
  if (!v19)
    goto LABEL_42;
  v20 = v19;
  v21 = (~((_DWORD)a3 << 15) + a3) ^ ((~((_DWORD)a3 << 15) + a3) >> 10);
  do
  {
    --v20;
    v22 = *a2 & 0xFFFFFFFFFFFFFFFCLL;
    if ((*a2 & 1) != 0)
      v22 = *(_QWORD *)(v22 + 8 * v20 + 8);
    v23 = (unsigned __int8 *)(v22 + 15);
    if (__ldaxr((unsigned __int8 *)(v22 + 15)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v23))
    {
      goto LABEL_24;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v22 + 15);
LABEL_24:
    v25 = *(_QWORD *)(v22 + 64);
    if (!v25)
      goto LABEL_26;
    if (*(_BYTE *)(v25 + 5) == 1)
      goto LABEL_26;
    v29 = *(_QWORD *)(v25 + 56);
    if (!v29)
      goto LABEL_26;
    v30 = ((9 * v21) ^ ((9 * v21) >> 6)) + ~(((9 * v21) ^ ((9 * v21) >> 6)) << 11);
    v31 = *(_DWORD *)(v29 - 8);
    v32 = v31 & (v30 ^ HIWORD(v30));
    v33 = *(_DWORD *)(v29 + 16 * v32);
    if (v33 != v18)
    {
      v38 = 1;
      while (v33 != 0x7FFFFFFF)
      {
        v32 = ((_DWORD)v32 + v38) & v31;
        v33 = *(_DWORD *)(v29 + 16 * v32);
        ++v38;
        if (v33 == v18)
          goto LABEL_38;
      }
LABEL_26:
      v26 = 0;
      goto LABEL_27;
    }
LABEL_38:
    v26 = *(_QWORD *)(v29 + 16 * v32 + 8);
LABEL_27:
    v27 = __ldxr(v23);
    if (v27 == 1)
    {
      if (!__stlxr(0, v23))
        goto LABEL_32;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v23, 0, a3, a4, a5, a6, a7, a8);
LABEL_32:
    if (!v26 || *(_BYTE *)(v26 + 4) == 2)
      goto LABEL_13;
    v28 = (uint64_t *)(a1[3] + 136);
    v74 = v26;
    WTF::HashTable<JSC::WatchpointSet *,JSC::WatchpointSet *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>>::add(v28, &v74, a4, a5, a6, a7, a8, (uint64_t)v75);
  }
  while (v20);
  v10 = *a2;
LABEL_42:
  v75[0] = 0;
  v34 = (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v10 & 1) != 0)
  {
    if (*v34)
    {
      v39 = 0;
      v40 = 0;
      do
      {
        v41 = &v34[2 * v40];
        v42 = *((_QWORD *)v41 + 1);
        if ((v39 & 1) != 0)
        {
          WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine(v75, *((_QWORD *)v41 + 1));
          v39 = v75[0];
        }
        else if (v42 != (v39 & 0xFFFFFFFFFFFFFFFCLL))
        {
          if ((v39 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          {
            v43 = WTF::fastMalloc((WTF *)0x28);
            *(_QWORD *)v43 = 0x400000002;
            v44 = v75[0];
            *(_QWORD *)(v43 + 8) = v75[0] & 0xFFFFFFFFFFFFFFFCLL;
            *(_QWORD *)(v43 + 16) = v42;
            v39 = v44 & 2 | (unint64_t)v43 | 1;
          }
          else
          {
            v39 = v39 & 2 | v42;
          }
          v75[0] = v39;
        }
        ++v40;
      }
      while (v40 < *v34);
    }
  }
  else if (v34)
  {
    v75[0] = v10 & 0xFFFFFFFFFFFFFFFCLL;
  }
  v35 = (unsigned __int8 *)(v14 + 4);
  while (1)
  {
    v36 = *v35;
    if ((v36 & 0x40) != 0)
      break;
    v37 = __ldaxr(v35);
    if (v37 == v36)
    {
      if (!__stxr(v36 | 0x40, v35))
        goto LABEL_67;
    }
    else
    {
      __clrex();
    }
  }
  JSC::JSCellLock::lockSlow((JSC::JSCellLock *)v14);
LABEL_67:
  v45 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
  v46 = (unsigned int *)(v75[0] & 0xFFFFFFFFFFFFFFFCLL);
  if ((v75[0] & 1) != 0)
  {
    v56 = *v46;
    if (!(_DWORD)v56)
      goto LABEL_103;
    if (*((_QWORD *)v46 + 1) != v45)
    {
      v57 = 0;
      v58 = v46 + 4;
      do
      {
        if (v56 - 1 == v57)
          goto LABEL_103;
        v59 = *(_QWORD *)&v58[2 * v57++];
      }
      while (v59 != v45);
      if (v57 >= v56)
        goto LABEL_103;
    }
LABEL_69:
    v47 = (unsigned __int8 *)(v45 + 15);
    if (__ldaxr((unsigned __int8 *)(v45 + 15)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v47))
    {
      goto LABEL_72;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v45 + 15);
LABEL_72:
    if (v18 == -1)
      goto LABEL_104;
    v49 = *(unsigned __int16 *)(v45 + 24);
    if (v49 == 65534)
    {
      v49 = -1;
    }
    else if (v49 == 0xFFFF)
    {
      v49 = *(_DWORD *)(*(_QWORD *)(v45 + 64) + 84);
    }
    if (v49 < v18 || v18 <= 63 && *(unsigned __int8 *)(v45 + 14) <= v18)
    {
LABEL_104:
      v51 = 0;
    }
    else
    {
      if (v18 <= 63)
      {
        v50 = v14 + 16;
      }
      else
      {
        v50 = *(_QWORD *)(v14 + 8) - 8;
        v18 = 63 - v18;
      }
      v51 = *(_QWORD *)(v50 + 8 * v18);
    }
    v52 = __ldxr(v47);
    if (v52 == 1)
    {
      if (!__stlxr(0, v47))
        goto LABEL_88;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v45 + 15), 0, a3, a4, a5, a6, a7, a8);
LABEL_88:
    v53 = 1;
    goto LABEL_89;
  }
  if (v46 == (unsigned int *)v45)
    goto LABEL_69;
LABEL_103:
  v53 = 0;
  v51 = 0;
LABEL_89:
  while (1)
  {
    v54 = *v35;
    if ((v54 & 0xC0) != 0x40)
      break;
    v55 = __ldxr(v35);
    if (v55 == v54)
    {
      if (!__stxr(v54 & 0xBF, v35))
        goto LABEL_106;
    }
    else
    {
      __clrex();
    }
  }
  JSC::JSCellLock::unlockSlow((JSC::JSCellLock *)v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
LABEL_106:
  if (v51)
    v60 = v53;
  else
    v60 = 0;
  if (v60 == 1)
  {
    v66 = *a2;
    if ((*a2 & 1) != 0)
    {
      v68 = (_DWORD *)(v66 & 0xFFFFFFFFFFFFFFFCLL);
      v67 = *(_DWORD *)(v66 & 0xFFFFFFFFFFFFFFFCLL);
    }
    else
    {
      v67 = v66 > 3;
      v68 = (_DWORD *)(v66 & 0xFFFFFFFFFFFFFFFCLL);
    }
    v69 = 2 * v67;
    while (v69 * 4)
    {
      v70 = v68;
      if ((v66 & 1) != 0)
        v70 = *(_DWORD **)&v68[v69];
      if ((*((_BYTE *)v70 + 19) & 0xC) == 0)
      {
        v71 = *((_QWORD *)v70 + 12);
        v72 = (v71 & 1) != 0 ? (v71 >> 1) & 3 : *(unsigned __int8 *)(v71 + 4);
        v69 -= 2;
        if (v72 != 2)
          continue;
      }
      if ((v66 & 1) != 0)
        v73 = *v68 == 1;
      else
        v73 = v66 > 3;
      if (!v73)
        v51 = 0;
      break;
    }
  }
  else
  {
    v51 = 0;
  }
  if ((v75[0] & 1) != 0)
    WTF::fastFree(v75[0] & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
  if (!v51)
    goto LABEL_13;
  *a9 = 0u;
  a9[1] = 0u;
  v61 = JSC::DFG::Graph::freeze((uint64_t)a1, v51, a3, a4, a5, a6, a7, a8);
  JSC::DFG::AbstractValue::set((uint64_t)a9, a1, (unint64_t *)v61, a4, v62, v63, v64, v65);
}

__int128 *JSC::DFG::Graph::freeze(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  JSC::Structure *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *result;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  uint64_t v48;

  if (*(_BYTE *)(a1 + 964))
  {
    __break(0xC471u);
    JUMPOUT(0x1983D519CLL);
  }
  if (a2)
  {
    if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 18)
    {
      __break(0xC471u);
      goto LABEL_56;
    }
    v10 = (uint64_t *)(a1 + 384);
    v11 = *(_QWORD *)(a1 + 384);
    if (v11
      || (WTF::HashTable<long long,WTF::KeyValuePair<long long,JSC::DFG::FrozenValue *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,JSC::DFG::FrozenValue *>>,WTF::IntHash<long long>,WTF::HashMap<long long,JSC::DFG::FrozenValue *,WTF::IntHash<long long>,JSC::EncodedJSValueHashTraits,WTF::HashTraits<JSC::DFG::FrozenValue *>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::EncodedJSValueHashTraits>::rehash(v10, 8uLL, 0, a4, a5, a6, a7, a8), v10 = (uint64_t *)(a1 + 384), (v11 = *(_QWORD *)(a1 + 384)) != 0))
    {
      v12 = *(_DWORD *)(v11 - 8);
    }
    else
    {
      v12 = 0;
    }
    v13 = (~(a2 << 32) + a2) ^ ((~(a2 << 32) + a2) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = (_QWORD *)(v11 + 16 * v16);
    v18 = *v17;
    if (!*v17)
      goto LABEL_16;
    v19 = 0;
    v20 = 1;
    while (v18 != a2)
    {
      if (v18 == 4)
        v19 = v17;
      v16 = (v16 + v20) & v12;
      v17 = (_QWORD *)(v11 + 16 * v16);
      v18 = *v17;
      ++v20;
      if (!*v17)
      {
        if (v19)
        {
          *v19 = 0;
          v19[1] = 0;
          --*(_DWORD *)(*v10 - 16);
          v17 = v19;
        }
LABEL_16:
        *v17 = a2;
        v17[1] = 0;
        v21 = *v10;
        if (*v10)
          v22 = *(_DWORD *)(v21 - 12) + 1;
        else
          v22 = 1;
        *(_DWORD *)(v21 - 12) = v22;
        v23 = *v10;
        if (*v10)
          v24 = *(_DWORD *)(v23 - 12);
        else
          v24 = 0;
        v25 = (*(_DWORD *)(v23 - 16) + v24);
        v26 = *(unsigned int *)(v23 - 4);
        if (v26 > 0x400)
        {
          if (v26 > 2 * v25)
            goto LABEL_22;
        }
        else
        {
          if (3 * v26 > 4 * v25)
          {
LABEL_22:
            if (a2 >= 0xFFFE000000000000 && (a2 & 0x80000000) == 0)
            {
              v41 = (_QWORD *)(a1 + 416);
              v47 = a2;
              v42 = *(unsigned int *)(a1 + 428);
              if ((_DWORD)v42 == *(_DWORD *)(a1 + 424))
                *(_DWORD *)(*(_QWORD *)(a1 + 416) + 4 * *(unsigned int *)(a1 + 428)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v47);
              else
                *(_DWORD *)(*v41 + 4 * v42) = a2;
              ++*(_DWORD *)(a1 + 428);
            }
            if ((a2 & 0xFFFE000000000002) != 0 || (v27 = *(_DWORD *)a2 & 0xFFFFFFFE, !(_DWORD)v27))
            {
              v28 = 0;
            }
            else
            {
              v28 = (JSC::Structure *)(16 * v27);
              JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(a1 + 24) + 280), 16 * v27, a3, a4, a5, a6, a7, a8);
              JSC::DFG::DesiredWatchpoints::consider((JSC::DFG::DesiredWatchpoints *)(*(_QWORD *)(a1 + 24) + 136), v28, v29, v30, v31, v32, v33, v34);
            }
            v35 = *(_QWORD *)(a1 + 392);
            *(_QWORD *)(a1 + 392) = v35 + 1;
            v36 = v35 >> 4;
            v37 = *(unsigned int *)(a1 + 412);
            if (v35 >> 4 >= v37)
            {
              v44 = WTF::fastMalloc((WTF *)0x180);
              v48 = v44;
              v45 = *(unsigned int *)(a1 + 412);
              if ((_DWORD)v45 == *(_DWORD *)(a1 + 408))
              {
                v46 = (_QWORD *)WTF::Vector<JSC::StatementNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 400, v45 + 1, (unint64_t)&v48);
                v45 = *(unsigned int *)(a1 + 412);
                *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v45) = *v46;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v45) = v44;
              }
              v37 = (v45 + 1);
              *(_DWORD *)(a1 + 412) = v37;
              v35 = *(_QWORD *)(a1 + 392) - 1;
              v36 = v35 >> 4;
            }
            if (v36 >= v37)
            {
              __break(0xC471u);
              JUMPOUT(0x1983D5314);
            }
            v38 = *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v36) + 24 * (v35 & 0xF);
            *(_QWORD *)v38 = a2;
            *(_QWORD *)(v38 + 8) = v28;
            *(_DWORD *)(v38 + 16) = 0;
            v39 = *(_QWORD *)(a1 + 392) - 1;
            if (v39 >> 4 < *(unsigned int *)(a1 + 412))
            {
              result = (__int128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * (v39 >> 4)) + 24 * (v39 & 0xF));
              v17[1] = result;
              return result;
            }
            __break(0xC471u);
LABEL_56:
            JUMPOUT(0x1983D4FDCLL);
          }
          if (!(_DWORD)v26)
          {
            v43 = 8;
LABEL_42:
            v17 = WTF::HashTable<long long,WTF::KeyValuePair<long long,JSC::DFG::FrozenValue *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,JSC::DFG::FrozenValue *>>,WTF::IntHash<long long>,WTF::HashMap<long long,JSC::DFG::FrozenValue *,WTF::IntHash<long long>,JSC::EncodedJSValueHashTraits,WTF::HashTraits<JSC::DFG::FrozenValue *>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::EncodedJSValueHashTraits>::rehash(v10, v43, (uint64_t)v17, a4, a5, a6, a7, a8);
            goto LABEL_22;
          }
        }
        v43 = ((_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26)));
        goto LABEL_42;
      }
    }
    return (__int128 *)v17[1];
  }
  else
  {
    result = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
    {
      JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
      LODWORD(qword_1EE342DB8) = 0;
    }
  }
  return result;
}

uint64_t JSC::DFG::Graph::tryGetConstantClosureVar(uint64_t a1, uint64_t a2, unsigned int a3)
{
  BOOL v4;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t *v23;
  uint64_t v25;
  _BYTE v26[8];
  unsigned __int8 *v27;
  char v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = ((*(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) - 1) & 0xFFFFFFFD) != 0 && a2 != 0 && (a2 & 0xFFFE000000000002) == 0;
  if (!v4 || *(unsigned __int8 *)(a2 + 5) - 53 > 1)
    return 0;
  v8 = *(_QWORD *)(a2 + 24);
  v9 = (unsigned __int8 *)(v8 + 20);
  v29 = 0;
  v27 = (unsigned __int8 *)(v8 + 20);
  v28 = 1;
  if (__ldaxr((unsigned __int8 *)(v8 + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_13;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
LABEL_13:
  v29 = 1;
  v11 = JSC::SymbolTable::entryFor(v8, (uint64_t)v26, a3);
  if (!v11 || (*(_QWORD *)v11 & 1) != 0)
  {
    v19 = 0;
    v18 = 0;
    goto LABEL_20;
  }
  v18 = *(_QWORD *)(*(_QWORD *)v11 + 8);
  if (!v18 || *(_BYTE *)(v18 + 4) != 1)
  {
    v19 = 0;
    goto LABEL_20;
  }
  v19 = *(_QWORD *)(a2 + 8 * a3 + 32);
  if (!v19)
  {
LABEL_20:
    v20 = 0;
    goto LABEL_21;
  }
  v20 = 1;
LABEL_21:
  if (v29 && v28)
  {
    v21 = v27;
    v22 = __ldxr(v27);
    if (v22 == 1)
    {
      if (!__stlxr(0, v27))
        goto LABEL_25;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v21, 0, v12, v13, v14, v15, v16, v17);
  }
LABEL_25:
  if (!v20)
    return 0;
  v23 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 136);
  v25 = v18;
  WTF::HashTable<JSC::WatchpointSet *,JSC::WatchpointSet *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>>::add(v23, &v25, v13, v14, v15, v16, v17, (uint64_t)v26);
  return v19;
}

{
  uint64_t v3;
  BOOL v5;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t *v23;
  uint64_t v25;
  _BYTE v26[8];
  unsigned __int8 *v27;
  char v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 24);
  v5 = ((*(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) - 1) & 0xFFFFFFFD) != 0 && v3 != 0 && (v3 & 0xFFFE000000000002) == 0;
  if (!v5 || *(unsigned __int8 *)(v3 + 5) - 53 > 1)
    return 0;
  v7 = a3;
  v8 = *(_QWORD *)(v3 + 24);
  v9 = (unsigned __int8 *)(v8 + 20);
  v29 = 0;
  v27 = (unsigned __int8 *)(v8 + 20);
  v28 = 1;
  if (__ldaxr((unsigned __int8 *)(v8 + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_13;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
LABEL_13:
  v29 = 1;
  v11 = JSC::SymbolTable::entryFor(v8, (uint64_t)v26, v7);
  if (!v11 || (*(_QWORD *)v11 & 1) != 0)
  {
    v19 = 0;
    v18 = 0;
    goto LABEL_20;
  }
  v18 = *(_QWORD *)(*(_QWORD *)v11 + 8);
  if (!v18 || *(_BYTE *)(v18 + 4) != 1)
  {
    v19 = 0;
    goto LABEL_20;
  }
  v19 = *(_QWORD *)(v3 + 8 * v7 + 32);
  if (!v19)
  {
LABEL_20:
    v20 = 0;
    goto LABEL_21;
  }
  v20 = 1;
LABEL_21:
  if (v29 && v28)
  {
    v21 = v27;
    v22 = __ldxr(v27);
    if (v22 == 1)
    {
      if (!__stlxr(0, v27))
        goto LABEL_25;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v21, 0, v12, v13, v14, v15, v16, v17);
  }
LABEL_25:
  if (!v20)
    return 0;
  v23 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 136);
  v25 = v18;
  WTF::HashTable<JSC::WatchpointSet *,JSC::WatchpointSet *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>>::add(v23, &v25, v13, v14, v15, v16, v17, (uint64_t)v26);
  return v19;
}

unint64_t JSC::DFG::Graph::tryGetFoldableView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v22;
  _BYTE v23[24];

  if (((*(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) - 1) & 0xFFFFFFFD) == 0 || a2 == 0 || (a2 & 0xFFFE000000000002) != 0)
    return 0;
  v10 = a2;
  if (*(unsigned __int8 *)(a2 + 5) - 39 > 0xB)
    return 0;
  if ((*(_BYTE *)(a2 + 40) & 7u) > 2)
  {
    v23[0] = 0;
    v23[8] = 0;
    v12 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a2, (uint64_t)v23, a3, a4, a5, a6, a7, a8);
    if (!v20)
      return 0;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 24);
  }
  if (!v12)
    return 0;
  __dmb(0xBu);
  JSC::DFG::Graph::freeze(a1, v10, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a1 + 24);
  v22 = v10;
  WTF::HashTable<JSC::JSArrayBufferView *,JSC::JSArrayBufferView *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSArrayBufferView *>,WTF::HashTraits<JSC::JSArrayBufferView *>,WTF::HashTraits<JSC::JSArrayBufferView *>>::add((uint64_t *)(v13 + 200), (uint64_t *)&v22, v14, v15, v16, v17, v18, v19, (uint64_t)v23);
  return v10;
}

uint64_t JSC::DFG::Graph::tryGetFoldableView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  _BYTE v23[24];

  if (a3 != 25 && !JSC::DFG::toTypedArrayType(a3))
    return 0;
  v10 = ((*(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) - 1) & 0xFFFFFFFD) == 0 || a2 == 0;
  v11 = !v10 && (a2 & 0xFFFE000000000002) == 0;
  if (!v11 || *(unsigned __int8 *)(a2 + 5) - 39 > 0xB)
    return 0;
  if ((*(_BYTE *)(a2 + 40) & 7u) > 2)
  {
    v23[0] = 0;
    v23[8] = 0;
    v12 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a2, (uint64_t)v23, a3, a4, a5, a6, a7, a8);
    if (!v20)
      return 0;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 24);
  }
  if (!v12)
    return 0;
  __dmb(0xBu);
  JSC::DFG::Graph::freeze(a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a1 + 24);
  v22 = a2;
  WTF::HashTable<JSC::JSArrayBufferView *,JSC::JSArrayBufferView *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSArrayBufferView *>,WTF::HashTraits<JSC::JSArrayBufferView *>,WTF::HashTraits<JSC::JSArrayBufferView *>>::add((uint64_t *)(v13 + 200), &v22, v14, v15, v16, v17, v18, v19, (uint64_t)v23);
  return a2;
}

void JSC::DFG::Graph::registerFrozenValues(JSC::DFG::Graph *this, _DWORD *a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t *v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  void **v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;

  v9 = (unsigned __int8 *)(*((_QWORD *)this + 4) + 16);
  if (__ldaxr(v9))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
    goto LABEL_4;
  }
  if (__stxr(1u, v9))
    goto LABEL_3;
LABEL_4:
  v11 = *((_QWORD *)this + 4);
  *(_DWORD *)(v11 + 172) = 0;
  v12 = *((_QWORD *)this + 49);
  if (v12)
  {
    v13 = 0;
    while (1)
    {
      if (v13 >> 4 >= *((unsigned int *)this + 103))
      {
        __break(0xC471u);
        JUMPOUT(0x1983D5C40);
      }
      v14 = *(_QWORD *)(*((_QWORD *)this + 50) + 8 * (v13 >> 4));
      v15 = (unint64_t *)(v14 + 24 * (v13 & 0xF));
      v16 = *v15;
      if (*v15)
        v17 = (*v15 & 0xFFFE000000000002) == 0;
      else
        v17 = 0;
      if (!v17)
        goto LABEL_36;
      v18 = *(_DWORD *)(v14 + 24 * (v13 & 0xF) + 16);
      if (v18)
      {
        if (v18 == 1)
        {
          v35 = *((_QWORD *)this + 4);
          v36 = (_QWORD *)(v35 + 160);
          v64 = 0;
          v37 = *(unsigned int *)(v35 + 172);
          if ((_DWORD)v37 == *(_DWORD *)(v35 + 168))
            *(_QWORD *)(*(_QWORD *)(v35 + 160) + 8 * *(unsigned int *)(v35 + 172)) = *(_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v36, v37 + 1, (unint64_t)&v64);
          else
            *(_QWORD *)(*v36 + 8 * v37) = 0;
          ++*(_DWORD *)(v35 + 172);
          v38 = *((_QWORD *)this + 4);
          if (*(_DWORD *)(v38 + 172) <= v37)
          {
LABEL_88:
            __break(0xC471u);
            JUMPOUT(0x1983D5C00);
          }
          *(_QWORD *)(*(_QWORD *)(v38 + 160) + 8 * v37) = *v15;
        }
        goto LABEL_36;
      }
      v19 = *((_QWORD *)this + 3);
      v20 = *(unsigned __int8 *)(v16 + 5);
      if (v20 == 1)
      {
        v21 = (uint64_t *)(v19 + 296);
        v22 = *(_QWORD *)(v19 + 296);
        if (v22
          || (WTF::HashTable<JSC::StructureID,JSC::StructureID,WTF::IdentityExtractor,WTF::DefaultHash<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>>::expand(v21, 0, (uint64_t)a3, a4, a5, a6, a7, a8), (v22 = *v21) != 0))
        {
          v23 = *(_DWORD *)(v22 - 8);
        }
        else
        {
          v23 = 0;
        }
        v24 = v16 >> 4;
        v25 = v23 & (v16 >> 4);
        a2 = (_DWORD *)(v22 + 4 * v25);
        v26 = *a2;
        if (*a2)
        {
          v27 = 0;
          v28 = 1;
          while (v26 != (_DWORD)v24)
          {
            if (v26 == 1)
              v27 = a2;
            v25 = (v25 + v28) & v23;
            a2 = (_DWORD *)(v22 + 4 * v25);
            v26 = *a2;
            ++v28;
            if (!*a2)
            {
              if (v27)
              {
                *v27 = 0;
                --*(_DWORD *)(*v21 - 16);
                a2 = v27;
              }
              goto LABEL_24;
            }
          }
          goto LABEL_36;
        }
LABEL_24:
        *a2 = v24;
        v29 = *v21;
        if (*v21)
          v30 = *(_DWORD *)(v29 - 12) + 1;
        else
          v30 = 1;
        *(_DWORD *)(v29 - 12) = v30;
        v31 = *v21;
        if (*v21)
          v32 = *(_DWORD *)(v31 - 12);
        else
          v32 = 0;
        v33 = (*(_DWORD *)(v31 - 16) + v32);
        v34 = *(unsigned int *)(v31 - 4);
        if (v34 > 0x400)
        {
          if (v34 <= 2 * v33)
LABEL_79:
            WTF::HashTable<JSC::StructureID,JSC::StructureID,WTF::IdentityExtractor,WTF::DefaultHash<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>>::expand(v21, (unint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        else if (3 * v34 <= 4 * v33)
        {
          goto LABEL_79;
        }
      }
      else
      {
        if (v20 == 18)
          goto LABEL_88;
        v39 = (uint64_t *)(v19 + 288);
        v40 = *(_QWORD *)(v19 + 288);
        if (v40
          || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v39, 8uLL, 0, a4, a5, a6, a7, a8), (v40 = *v39) != 0))
        {
          v41 = *(_DWORD *)(v40 - 8);
        }
        else
        {
          v41 = 0;
        }
        v42 = (v16 + ~(v16 << 32)) ^ ((v16 + ~(v16 << 32)) >> 22);
        v43 = 9 * ((v42 + ~(v42 << 13)) ^ ((v42 + ~(v42 << 13)) >> 8));
        v44 = (v43 ^ (v43 >> 15)) + ~((v43 ^ (v43 >> 15)) << 27);
        v45 = v41 & ((v44 >> 31) ^ v44);
        a3 = (unint64_t *)(v40 + 8 * v45);
        v46 = *a3;
        if (*a3)
        {
          v47 = 0;
          v48 = 1;
          while (v46 != v16)
          {
            if (v46 == -1)
              v47 = a3;
            v45 = (v45 + v48) & v41;
            a3 = (unint64_t *)(v40 + 8 * v45);
            v46 = *a3;
            ++v48;
            if (!*a3)
            {
              if (v47)
              {
                *v47 = 0;
                --*(_DWORD *)(*v39 - 16);
                a3 = v47;
              }
              goto LABEL_49;
            }
          }
          goto LABEL_36;
        }
LABEL_49:
        *a3 = v16;
        v49 = *v39;
        if (*v39)
          v50 = *(_DWORD *)(v49 - 12) + 1;
        else
          v50 = 1;
        *(_DWORD *)(v49 - 12) = v50;
        v51 = *v39;
        if (*v39)
          v52 = *(_DWORD *)(v51 - 12);
        else
          v52 = 0;
        v53 = (*(_DWORD *)(v51 - 16) + v52);
        v54 = *(unsigned int *)(v51 - 4);
        if (v54 > 0x400)
        {
          if (v54 > 2 * v53)
            goto LABEL_36;
LABEL_85:
          v63 = ((_DWORD)v54 << (6 * *(_DWORD *)(v51 - 12) >= (2 * v54)));
LABEL_77:
          WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v39, v63, (uint64_t)a3, a4, a5, a6, a7, a8);
          goto LABEL_36;
        }
        if (3 * v54 <= 4 * v53)
        {
          if ((_DWORD)v54)
            goto LABEL_85;
          v63 = 8;
          goto LABEL_77;
        }
      }
LABEL_36:
      if (++v13 == v12)
      {
        v55 = *((_QWORD *)this + 4);
        v58 = *(_DWORD *)(v55 + 168);
        v57 = *(unsigned int *)(v55 + 172);
        v56 = (_DWORD *)(v55 + 168);
        if (v58 <= v57)
          goto LABEL_58;
        v60 = (void **)(v56 - 2);
        v61 = *((_QWORD *)v56 - 1);
        if ((_DWORD)v57)
        {
          *v56 = v57;
          *v60 = WTF::fastRealloc(v61, 8 * v57, (uint64_t)a3, a4, a5, a6, a7, a8);
          goto LABEL_58;
        }
LABEL_73:
        if (v61)
        {
          *v60 = 0;
          *v56 = 0;
          WTF::fastFree(v61, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_58;
      }
    }
  }
  v56 = (_DWORD *)(v11 + 168);
  if (*(_DWORD *)(v11 + 168))
  {
    v62 = *(_QWORD *)(v11 + 160);
    v60 = (void **)(v11 + 160);
    v61 = v62;
    goto LABEL_73;
  }
LABEL_58:
  v59 = __ldxr(v9);
  if (v59 != 1)
  {
    __clrex();
    goto LABEL_62;
  }
  if (__stlxr(0, v9))
LABEL_62:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::DFG::Graph::visitChildren(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(result + 392);
  if (v2)
  {
    v4 = result;
    v5 = 0;
    while (v5 >> 4 < *(unsigned int *)(v4 + 412))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v4 + 400) + 8 * (v5 >> 4));
      if ((*(_QWORD *)(v6 + 24 * (v5 & 0xF)) & 0xFFFE000000000002) == 0)
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(v6 + 24 * (v5++ & 0xF) + 8));
      if (v2 == v5)
        return result;
    }
    __break(0xC471u);
  }
  return result;
}

void JSC::DFG::Graph::visitChildren(JSC::DFG::Graph *this, JSC::SlotVisitor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v15;
  unint64_t v16;
  int v17;

  v8 = *((_QWORD *)this + 49);
  if (v8)
  {
    v11 = 0;
    while (1)
    {
      if (v11 >> 4 >= *((unsigned int *)this + 103))
      {
        __break(0xC471u);
        return;
      }
      v12 = *(_QWORD *)(*((_QWORD *)this + 50) + 8 * (v11 >> 4));
      v13 = *(_QWORD *)(v12 + 24 * (v11 & 0xF));
      if ((v13 & 0xFFFE000000000002) == 0 && v13 != 0)
        break;
LABEL_13:
      v16 = *(_QWORD *)(v12 + 24 * (v11 & 0xF) + 8);
      if (v16)
      {
        if ((v16 & 8) != 0)
        {
          if ((*(_BYTE *)(v16 - 79) & 1) == 0)
            goto LABEL_22;
        }
        else
        {
          v17 = *((_DWORD *)a2 + 33);
          if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, a3, a4, a5, a6, a7, a8);
          if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
          {
LABEL_22:
            JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, a4, a5, a6, a7, a8);
            goto LABEL_19;
          }
        }
        if (*((_QWORD *)a2 + 21))
          goto LABEL_22;
      }
LABEL_19:
      if (v8 == ++v11)
        return;
    }
    if ((v13 & 8) != 0)
    {
      if ((*(_BYTE *)(v13 - 79) & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      v15 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v13 & 0xFFFFFFFFFFFFC000 | 0x20) != v15)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v13 & 0xFFFFFFFFFFFFC000), v15, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v13 & 0xFFFFFFFFFFFFC000) + 8 * ((v13 >> 10) & 0xF) + 0x28) >> (v13 >> 4)) & 1) != 0)
      {
LABEL_12:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_13;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v13, 0, a4, a5, a6, a7, a8);
    goto LABEL_13;
  }
}

__int128 *JSC::DFG::Graph::freezeStrong(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  JSC::Structure *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *result;
  BOOL v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;

  if (*(_BYTE *)(a1 + 964))
  {
    __break(0xC471u);
    JUMPOUT(0x1983D6104);
  }
  if (a2)
  {
    if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 18)
    {
      __break(0xC471u);
      goto LABEL_64;
    }
    v10 = (uint64_t *)(a1 + 384);
    v11 = *(_QWORD *)(a1 + 384);
    if (v11
      || (WTF::HashTable<long long,WTF::KeyValuePair<long long,JSC::DFG::FrozenValue *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,JSC::DFG::FrozenValue *>>,WTF::IntHash<long long>,WTF::HashMap<long long,JSC::DFG::FrozenValue *,WTF::IntHash<long long>,JSC::EncodedJSValueHashTraits,WTF::HashTraits<JSC::DFG::FrozenValue *>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::EncodedJSValueHashTraits>::rehash(v10, 8uLL, 0, a4, a5, a6, a7, a8), v10 = (uint64_t *)(a1 + 384), (v11 = *(_QWORD *)(a1 + 384)) != 0))
    {
      v12 = *(_DWORD *)(v11 - 8);
    }
    else
    {
      v12 = 0;
    }
    v13 = (~(a2 << 32) + a2) ^ ((~(a2 << 32) + a2) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = (_QWORD *)(v11 + 16 * v16);
    v18 = *v17;
    if (!*v17)
      goto LABEL_16;
    v19 = 0;
    v20 = 1;
    while (v18 != a2)
    {
      if (v18 == 4)
        v19 = v17;
      v16 = (v16 + v20) & v12;
      v17 = (_QWORD *)(v11 + 16 * v16);
      v18 = *v17;
      ++v20;
      if (!*v17)
      {
        if (v19)
        {
          *v19 = 0;
          v19[1] = 0;
          --*(_DWORD *)(*v10 - 16);
          v17 = v19;
        }
LABEL_16:
        *v17 = a2;
        v17[1] = 0;
        v21 = *v10;
        if (*v10)
          v22 = *(_DWORD *)(v21 - 12) + 1;
        else
          v22 = 1;
        *(_DWORD *)(v21 - 12) = v22;
        v23 = *v10;
        if (*v10)
          v24 = *(_DWORD *)(v23 - 12);
        else
          v24 = 0;
        v25 = (*(_DWORD *)(v23 - 16) + v24);
        v26 = *(unsigned int *)(v23 - 4);
        if (v26 > 0x400)
        {
          if (v26 > 2 * v25)
            goto LABEL_22;
        }
        else
        {
          if (3 * v26 > 4 * v25)
          {
LABEL_22:
            if (a2 >= 0xFFFE000000000000 && (a2 & 0x80000000) == 0)
            {
              v42 = (_QWORD *)(a1 + 416);
              v48 = a2;
              v43 = *(unsigned int *)(a1 + 428);
              if ((_DWORD)v43 == *(_DWORD *)(a1 + 424))
                *(_DWORD *)(*(_QWORD *)(a1 + 416) + 4 * *(unsigned int *)(a1 + 428)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v48);
              else
                *(_DWORD *)(*v42 + 4 * v43) = a2;
              ++*(_DWORD *)(a1 + 428);
            }
            if ((a2 & 0xFFFE000000000002) != 0 || (v27 = *(_DWORD *)a2 & 0xFFFFFFFE, !(_DWORD)v27))
            {
              v28 = 0;
            }
            else
            {
              v28 = (JSC::Structure *)(16 * v27);
              JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(a1 + 24) + 280), 16 * v27, a3, a4, a5, a6, a7, a8);
              JSC::DFG::DesiredWatchpoints::consider((JSC::DFG::DesiredWatchpoints *)(*(_QWORD *)(a1 + 24) + 136), v28, v29, v30, v31, v32, v33, v34);
            }
            v35 = *(_QWORD *)(a1 + 392);
            *(_QWORD *)(a1 + 392) = v35 + 1;
            v36 = v35 >> 4;
            v37 = *(unsigned int *)(a1 + 412);
            if (v35 >> 4 >= v37)
            {
              v45 = WTF::fastMalloc((WTF *)0x180);
              v49 = v45;
              v46 = *(unsigned int *)(a1 + 412);
              if ((_DWORD)v46 == *(_DWORD *)(a1 + 408))
              {
                v47 = (_QWORD *)WTF::Vector<JSC::StatementNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 400, v46 + 1, (unint64_t)&v49);
                v46 = *(unsigned int *)(a1 + 412);
                *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v46) = *v47;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v46) = v45;
              }
              v37 = (v46 + 1);
              *(_DWORD *)(a1 + 412) = v37;
              v35 = *(_QWORD *)(a1 + 392) - 1;
              v36 = v35 >> 4;
            }
            if (v36 >= v37)
            {
              __break(0xC471u);
              JUMPOUT(0x1983D629CLL);
            }
            v38 = *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v36) + 24 * (v35 & 0xF);
            *(_QWORD *)v38 = a2;
            *(_QWORD *)(v38 + 8) = v28;
            *(_DWORD *)(v38 + 16) = 0;
            v39 = *(_QWORD *)(a1 + 392) - 1;
            if (v39 >> 4 < *(unsigned int *)(a1 + 412))
            {
              result = (__int128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * (v39 >> 4)) + 24 * (v39 & 0xF));
              v17[1] = result;
              goto LABEL_32;
            }
            __break(0xC471u);
LABEL_64:
            JUMPOUT(0x1983D5F1CLL);
          }
          if (!(_DWORD)v26)
          {
            v44 = 8;
LABEL_49:
            v17 = WTF::HashTable<long long,WTF::KeyValuePair<long long,JSC::DFG::FrozenValue *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,JSC::DFG::FrozenValue *>>,WTF::IntHash<long long>,WTF::HashMap<long long,JSC::DFG::FrozenValue *,WTF::IntHash<long long>,JSC::EncodedJSValueHashTraits,WTF::HashTraits<JSC::DFG::FrozenValue *>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::EncodedJSValueHashTraits>::rehash(v10, v44, (uint64_t)v17, a4, a5, a6, a7, a8);
            goto LABEL_22;
          }
        }
        v44 = ((_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26)));
        goto LABEL_49;
      }
    }
    result = (__int128 *)v17[1];
  }
  else
  {
    result = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
    {
      JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
      LODWORD(qword_1EE342DB8) = 0;
    }
  }
LABEL_32:
  if (*(_QWORD *)result)
    v41 = (*(_QWORD *)result & 0xFFFE000000000002) == 0;
  else
    v41 = 0;
  if (v41)
  {
    if (*((_DWORD *)result + 4) >= 2u)
    {
      __break(0xC471u);
      JUMPOUT(0x1983D6278);
    }
    *((_DWORD *)result + 4) = 1;
  }
  return result;
}

uint64_t JSC::DFG::Graph::convertToConstant(uint64_t this, JSC::DFG::Node *a2, JSC::DFG::FrozenValue *a3)
{
  unint64_t v5;
  int v6;
  __int16 v7;

  v5 = *((_QWORD *)a3 + 1);
  if (v5)
    this = JSC::DFG::Graph::assertIsRegistered(this, v5);
  v6 = *((_DWORD *)a2 + 14);
  if ((v6 & 7) == 3)
    v7 = 1;
  else
    v7 = 2 * ((v6 & 7) == 5);
  *((_WORD *)a2 + 9) = v7;
  *((_DWORD *)a2 + 14) = v6 & 0xFFFFFFE7;
  *((_QWORD *)a2 + 9) = a3;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  return this;
}

uint64_t JSC::DFG::Graph::assertIsRegistered(uint64_t this, unint64_t a2)
{
  JSC::DFG *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  char *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  char *v18;
  int v19;
  uint64_t v20;
  const char *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  JSC::Structure *v34;
  unint64_t v35;
  unint64_t v36;

  if (!a2)
    return this;
  v2 = (JSC::DFG *)this;
  v3 = *(_QWORD *)(this + 24);
  v36 = a2;
  if (*(_BYTE *)(a2 + 5) != 1)
  {
    v29 = *(_QWORD *)(v3 + 288);
    if (v29)
    {
      v30 = *(_DWORD *)(v29 - 8);
      v34 = (JSC::Structure *)a2;
      this = WTF::IdentityHashTranslator<WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CodeBlock *>>::hash<JSC::CodeBlock *>(&v36);
      a2 = (unint64_t)v34;
      v31 = this & v30;
      v32 = *(_QWORD *)(v29 + 8 * (this & v30));
      if (v32 != v36)
      {
        v33 = 1;
        while (v32)
        {
          v31 = (v31 + v33) & v30;
          v32 = *(_QWORD *)(v29 + 8 * v31);
          ++v33;
          if (v32 == v36)
            goto LABEL_8;
        }
        goto LABEL_30;
      }
      goto LABEL_8;
    }
LABEL_30:
    JSC::DFG::Graph::logAssertionFailure(v2, a2, (const WTF::CString *)"./dfg/DFGGraph.cpp", (const char *)0x678, "void JSC::DFG::Graph::assertIsRegistered(Structure *)", "m_plan.weakReferences().contains(structure)");
    __break(0xC471u);
    goto LABEL_31;
  }
  v4 = *(_QWORD *)(v3 + 296);
  if (!v4)
    goto LABEL_30;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = v5 & (a2 >> 4);
  v7 = *(_DWORD *)(v4 + 4 * v6);
  if (v7 != (a2 >> 4))
  {
    v8 = 1;
    while (v7)
    {
      v6 = (v6 + v8) & v5;
      v7 = *(_DWORD *)(v4 + 4 * v6);
      ++v8;
      if (v7 == (a2 >> 4))
        goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_8:
  if ((*(_BYTE *)(a2 + 19) & 0xC) == 0)
  {
    v9 = (char *)(a2 + 96);
    v10 = *(_QWORD *)(a2 + 96);
    v11 = (v10 & 1) != 0 ? (v10 >> 1) & 3 : *(unsigned __int8 *)(v10 + 4);
    if (v11 != 2)
    {
      v12 = *(_QWORD *)(*((_QWORD *)v2 + 3) + 152);
      if (v12)
      {
        v13 = *(_DWORD *)(v12 - 8);
        v14 = (unint64_t)&v9[~((_QWORD)v9 << 32)] ^ ((unint64_t)&v9[~((_QWORD)v9 << 32)] >> 22);
        v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
        v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
        v17 = v13 & ((v16 >> 31) ^ v16);
        v18 = *(char **)(v12 + 8 * v17);
        if (v18 == v9)
          return this;
        v19 = 1;
        while (v18)
        {
          v17 = (v17 + v19) & v13;
          v18 = *(char **)(v12 + 8 * v17);
          ++v19;
          if (v18 == v9)
            return this;
        }
      }
      v35 = a2;
      WTF::toCString<char [11],WTF::PointerDump<JSC::Structure>,char [39]>((uint64_t *)&v36, &v35);
      if (v36)
        v21 = (const char *)(v36 + 16);
      else
        v21 = 0;
      JSC::DFG::Graph::logAssertionFailure(v2, v20, (const WTF::CString *)"./dfg/DFGGraph.cpp", (const char *)0x67F, "void JSC::DFG::Graph::assertIsRegistered(Structure *)", v21);
      WTF::CString::~CString((WTF::CString *)&v36, v22, v23, v24, v25, v26, v27, v28);
      __break(0xC471u);
LABEL_31:
      JUMPOUT(0x1983D6490);
    }
  }
  return this;
}

uint64_t JSC::DFG::Graph::convertToConstant(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  int v13;
  __int16 v14;

  result = (uint64_t)JSC::DFG::Graph::freeze(a1, a3, a3, a4, a5, a6, a7, a8);
  v11 = result;
  v12 = *(_QWORD *)(result + 8);
  if (v12)
    result = JSC::DFG::Graph::assertIsRegistered(a1, v12);
  v13 = *(_DWORD *)(a2 + 56);
  if ((v13 & 7) == 3)
    v14 = 1;
  else
    v14 = 2 * ((v13 & 7) == 5);
  *(_WORD *)(a2 + 18) = v14;
  *(_DWORD *)(a2 + 56) = v13 & 0xFFFFFFE7;
  *(_QWORD *)(a2 + 72) = v11;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

unint64_t JSC::DFG::Graph::registerStructure(uint64_t a1, unint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  _DWORD *v18;
  int v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;

  if (!a2)
    goto LABEL_19;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(unsigned __int8 *)(a2 + 5);
  if (v12 != 1)
  {
    if (v12 == 18)
    {
      __break(0xC471u);
      JUMPOUT(0x1983D6998);
    }
    v51 = (uint64_t *)(v11 + 288);
    v52 = *(_QWORD *)(v11 + 288);
    if (v52
      || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v51, 8uLL, 0, a4, a5, a6, a7, a8), (v52 = *v51) != 0))
    {
      v53 = *(_DWORD *)(v52 - 8);
    }
    else
    {
      v53 = 0;
    }
    v54 = (~(a2 << 32) + a2) ^ ((~(a2 << 32) + a2) >> 22);
    v55 = 9 * ((v54 + ~(v54 << 13)) ^ ((v54 + ~(v54 << 13)) >> 8));
    v56 = (v55 ^ (v55 >> 15)) + ~((v55 ^ (v55 >> 15)) << 27);
    v57 = v53 & ((v56 >> 31) ^ v56);
    v58 = (unint64_t *)(v52 + 8 * v57);
    v59 = *v58;
    if (*v58)
    {
      v60 = 0;
      v61 = 1;
      while (v59 != a2)
      {
        if (v59 == -1)
          v60 = v58;
        v57 = (v57 + v61) & v53;
        v58 = (unint64_t *)(v52 + 8 * v57);
        v59 = *v58;
        ++v61;
        if (!*v58)
        {
          if (v60)
          {
            *v60 = 0;
            --*(_DWORD *)(*v51 - 16);
            v58 = v60;
          }
          goto LABEL_53;
        }
      }
      goto LABEL_19;
    }
LABEL_53:
    *v58 = a2;
    v62 = *v51;
    if (*v51)
      v63 = *(_DWORD *)(v62 - 12) + 1;
    else
      v63 = 1;
    *(_DWORD *)(v62 - 12) = v63;
    v64 = *v51;
    if (*v51)
      v65 = *(_DWORD *)(v64 - 12);
    else
      v65 = 0;
    v66 = (*(_DWORD *)(v64 - 16) + v65);
    v67 = *(unsigned int *)(v64 - 4);
    if (v67 > 0x400)
    {
      if (v67 > 2 * v66)
        goto LABEL_19;
    }
    else
    {
      if (3 * v67 > 4 * v66)
        goto LABEL_19;
      if (!(_DWORD)v67)
      {
        v68 = 8;
LABEL_61:
        WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v51, v68, (uint64_t)v58, a4, a5, a6, a7, a8);
        goto LABEL_19;
      }
    }
    v68 = ((_DWORD)v67 << (6 * *(_DWORD *)(v64 - 12) >= (2 * v67)));
    goto LABEL_61;
  }
  v13 = (uint64_t *)(v11 + 296);
  v14 = a2 >> 4;
  v15 = *(_QWORD *)(v11 + 296);
  if (v15
    || (WTF::HashTable<JSC::StructureID,JSC::StructureID,WTF::IdentityExtractor,WTF::DefaultHash<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>>::expand(v13, 0, (uint64_t)a3, a4, a5, a6, a7, a8), (v15 = *v13) != 0))
  {
    v16 = *(_DWORD *)(v15 - 8);
  }
  else
  {
    v16 = 0;
  }
  v17 = v16 & v14;
  v18 = (_DWORD *)(v15 + 4 * (v16 & v14));
  v19 = *v18;
  if (*v18)
  {
    v20 = 0;
    v21 = 1;
    while (v19 != (_DWORD)v14)
    {
      if (v19 == 1)
        v20 = v18;
      v17 = (v17 + v21) & v16;
      v18 = (_DWORD *)(v15 + 4 * v17);
      v19 = *v18;
      ++v21;
      if (!*v18)
      {
        if (v20)
        {
          *v20 = 0;
          --*(_DWORD *)(*v13 - 16);
          v18 = v20;
        }
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    *v18 = v14;
    v22 = *v13;
    if (*v13)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v24 = *v13;
    if (*v13)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 > 2 * v26)
        goto LABEL_19;
    }
    else if (3 * v27 > 4 * v26)
    {
      goto LABEL_19;
    }
    WTF::HashTable<JSC::StructureID,JSC::StructureID,WTF::IdentityExtractor,WTF::DefaultHash<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>>::expand(v13, (unint64_t)v18, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
LABEL_19:
  if ((*(_BYTE *)(a2 + 19) & 0xC) != 0)
    goto LABEL_41;
  v29 = a2 + 96;
  v28 = *(_QWORD *)(a2 + 96);
  if ((v28 & 1) != 0)
  {
    if (((v28 >> 1) & 3) != 2)
      goto LABEL_22;
LABEL_41:
    v49 = 0;
    goto LABEL_39;
  }
  if (*(_BYTE *)(v28 + 4) == 2)
    goto LABEL_41;
LABEL_22:
  v30 = *(_QWORD *)(a1 + 24);
  v33 = *(_QWORD *)(v30 + 152);
  v32 = (uint64_t *)(v30 + 152);
  v31 = v33;
  if (v33
    || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v32, 8uLL, 0, a4, a5, a6, a7, a8), (v31 = *v32) != 0))
  {
    v34 = *(_DWORD *)(v31 - 8);
  }
  else
  {
    v34 = 0;
  }
  v35 = (~(v29 << 32) + v29) ^ ((~(v29 << 32) + v29) >> 22);
  v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
  v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
  v38 = v34 & ((v37 >> 31) ^ v37);
  v39 = (unint64_t *)(v31 + 8 * v38);
  v40 = *v39;
  if (*v39)
  {
    v41 = 0;
    v42 = 1;
    while (v40 != v29)
    {
      if (v40 == -1)
        v41 = v39;
      v38 = (v38 + v42) & v34;
      v39 = (unint64_t *)(v31 + 8 * v38);
      v40 = *v39;
      ++v42;
      if (!*v39)
      {
        if (v41)
        {
          *v41 = 0;
          --*(_DWORD *)(*v32 - 16);
          v39 = v41;
        }
        goto LABEL_32;
      }
    }
    goto LABEL_38;
  }
LABEL_32:
  *v39 = v29;
  v43 = *v32;
  if (*v32)
    v44 = *(_DWORD *)(v43 - 12) + 1;
  else
    v44 = 1;
  *(_DWORD *)(v43 - 12) = v44;
  v45 = *v32;
  if (*v32)
    v46 = *(_DWORD *)(v45 - 12);
  else
    v46 = 0;
  v47 = (*(_DWORD *)(v45 - 16) + v46);
  v48 = *(unsigned int *)(v45 - 4);
  if (v48 > 0x400)
  {
    if (v48 > 2 * v47)
      goto LABEL_38;
    goto LABEL_74;
  }
  if (3 * v48 <= 4 * v47)
  {
    if (!(_DWORD)v48)
    {
      v69 = 8;
LABEL_66:
      WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v32, v69, (uint64_t)v39, a4, a5, a6, a7, a8);
      goto LABEL_38;
    }
LABEL_74:
    v69 = ((_DWORD)v48 << (6 * *(_DWORD *)(v45 - 12) >= (2 * v48)));
    goto LABEL_66;
  }
LABEL_38:
  v49 = 1;
LABEL_39:
  *a3 = v49;
  return a2;
}

void WTF::toCString<char [11],WTF::PointerDump<JSC::Structure>,char [39]>(uint64_t *a1, unint64_t *a2)
{
  WTF::PrintStream *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (**v17)(WTF::StringPrintStream *__hidden);
  _BYTE *v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v17 = off_1E3572250;
  v18 = v20;
  v19 = xmmword_199122F80;
  v20[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v17, "%s", "Structure ");
  if (*a2)
  {
    JSC::Structure::dump(*a2, (WTF::PrintStream *)&v17);
  }
  else
  {
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v17[4])(&v17);
    WTF::PrintStream::printf(v4, "%s", "(null)");
    v17[5]((WTF::StringPrintStream *)&v17);
  }
  WTF::PrintStream::printf((WTF::PrintStream *)&v17, "%s", " is watchable but isn't being watched.");
  v17[5]((WTF::StringPrintStream *)&v17);
  v13 = v18;
  v12 = v19;
  *a1 = 0;
  if (!v13)
  {
    v16 = 0;
LABEL_9:
    WTF::fastFree(v16, v5, v6, v7, v8, v9, v10, v11);
    return;
  }
  if (v12 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x1983D6B68);
  }
  v14 = WTF::fastMalloc((WTF *)(v12 + 17));
  *(_DWORD *)v14 = 1;
  *(_QWORD *)(v14 + 8) = v12;
  *a1 = v14;
  v15 = v14 + 16;
  memcpy((void *)(v14 + 16), v13, v12);
  *(_BYTE *)(v15 + v12) = 0;
  v16 = (unint64_t)v18;
  if (v18 != v20)
    goto LABEL_9;
}

uint64_t JSC::DFG::logDFGAssertionFailure(JSC::DFG *this, JSC::DFG::Graph *a2, const WTF::CString *a3, const char *a4, const char *a5, const char *a6, const char *a7)
{
  unint64_t v10;
  const char *v12;
  const char *v13;
  int v14;
  const char *v15;
  char v16;
  char **v17;
  char *v18;

  v15 = (const char *)a3;
  v14 = (int)a4;
  v12 = a6;
  v13 = a5;
  if (__ldaxr((unsigned __int8 *)&JSC::DFG::crashLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&JSC::DFG::crashLock))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::DFG::crashLock);
LABEL_5:
  WTF::dataLog<char [8],char const*,char [3]>("DFG ASSERTION FAILED: ", &v12, "\n");
  WTF::dataLog<char const*,char [2],int,char [5],char const*,char [2]>(&v15, "(", &v14, ") : ", &v13, "\n");
  WTF::dataLog<char [16]>("\n");
  WTF::dataLog<WTF::CString>(a2);
  WTF::dataLog<char [16]>("Graph at time of failure:\n");
  v10 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v10 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  JSC::DFG::Graph::dump(this, (WTF::PrintStream *)WTF::s_file, 0);
  WTF::dataLog<char [16]>("\n");
  WTF::dataLog<char [8],char const*,char [3]>("DFG ASSERTION FAILED: ", &v12, "\n");
  return WTF::dataLog<char const*,char [2],int,char [5],char const*,char [2]>(&v15, "(", &v14, ") : ", &v13, "\n");
}

uint64_t JSC::DFG::Graph::ensureCPSCFG(JSC::DFG::Graph *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  if (*((_DWORD *)this + 236) == 2 || *((_BYTE *)this + 962))
  {
    result = 1702;
    __break(0xC471u);
  }
  else
  {
    result = *((_QWORD *)this + 102);
    if (!result)
    {
      v3 = WTF::fastMalloc((WTF *)0x60);
      result = WTF::SingleRootGraph<JSC::DFG::CFG>::SingleRootGraph(v3, *((void **)this + 101), v4, v5, v6, v7, v8, v9);
      v17 = *((_QWORD *)this + 102);
      *((_QWORD *)this + 102) = result;
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 88);
        if ((v18 & 0x8000000000000000) == 0)
          WTF::fastFree(2 * v18, v10, v11, v12, v13, v14, v15, v16);
        v19 = *(_QWORD *)(v17 + 8);
        if (v17 + 24 != v19 && v19 != 0)
        {
          *(_QWORD *)(v17 + 8) = 0;
          *(_DWORD *)(v17 + 16) = 0;
          WTF::fastFree(v19, v10, v11, v12, v13, v14, v15, v16);
        }
        WTF::fastFree(v17, v10, v11, v12, v13, v14, v15, v16);
        return *((_QWORD *)this + 102);
      }
    }
  }
  return result;
}

uint64_t JSC::DFG::Graph::ensureCPSNaturalLoops(JSC::DFG::Graph *this)
{
  uint64_t result;
  uint64_t ***v3;
  uint64_t **v4;
  uint64_t ***v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*((_DWORD *)this + 236) == 2 || *((_BYTE *)this + 962))
  {
    result = 1726;
    __break(0xC471u);
  }
  else
  {
    JSC::DFG::Graph::ensureCPSDominators(this);
    result = *((_QWORD *)this + 99);
    if (!result)
    {
      v3 = (uint64_t ***)WTF::fastMalloc((WTF *)0x1F0);
      v4 = (uint64_t **)JSC::DFG::Graph::ensureCPSCFG(this);
      v5 = JSC::DFG::Graph::ensureCPSDominators(this);
      WTF::NaturalLoops<JSC::DFG::CPSCFG>::NaturalLoops(v3, v4, (uint64_t)v5, (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A)) != 0, v6, v7, v8, v9);
      std::unique_ptr<JSC::DFG::NaturalLoops<JSC::DFG::CPSCFG>>::reset[abi:sn180100]((unint64_t *)this + 99, v3, v10, v11, v12, v13, v14, v15);
      return *((_QWORD *)this + 99);
    }
  }
  return result;
}

uint64_t JSC::DFG::Graph::ensureSSANaturalLoops(JSC::DFG::Graph *this)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*((_DWORD *)this + 236) != 2)
    goto LABEL_6;
  JSC::DFG::Graph::ensureSSADominators(this);
  result = *((_QWORD *)this + 100);
  if (result)
    return result;
  v3 = WTF::fastMalloc((WTF *)0x148);
  v4 = *((_QWORD *)this + 101);
  if (!v4)
  {
LABEL_6:
    __break(0xC471u);
    JUMPOUT(0x1983D6F08);
  }
  v5 = (unint64_t *)v3;
  v6 = JSC::DFG::Graph::ensureSSADominators(this);
  WTF::NaturalLoops<JSC::DFG::CFG>::NaturalLoops(v5, v4, (uint64_t)v6, (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A)) != 0, v7, v8, v9, v10);
  std::unique_ptr<JSC::DFG::NaturalLoops<JSC::DFG::CFG>>::reset[abi:sn180100]((unint64_t *)this + 100, v5, v11, v12, v13, v14, v15, v16);
  return *((_QWORD *)this + 100);
}

void JSC::DFG::Graph::methodOfGettingAValueProfileFor(JSC::DFG::Graph *this@<X0>, JSC::DFG::Node *a2@<X1>, JSC::DFG::Node *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int8x8_t a10@<D0>)
{
  JSC::DFG::Node *v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  int v50;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  unsigned int v56;
  char v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  char v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  if (!a3)
    goto LABEL_115;
  v11 = a3;
  v14 = 0x5803040C6C1;
  v15 = 0x1D00000000000010;
  while (1)
  {
    v16 = *((unsigned __int16 *)v11 + 9);
    if (v16 <= 0x27
      && (((1 << v16) & 0xC030018000) != 0 || v16 == 27)
      && *((_DWORD *)this + 236) != 2)
    {
      v17 = (_QWORD *)*((_QWORD *)v11 + 9);
      v18 = v17;
      do
      {
        v19 = v18;
        v18 = (_QWORD *)*v18;
      }
      while (v18);
      if (v19 != v17)
        *v17 = v19;
      if (!*((_DWORD *)v19 + 7))
      {
        v20 = (_QWORD *)*((_QWORD *)v11 + 9);
        v21 = v20;
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
        if (v22 != v20)
          *v20 = v22;
        if (!*((_DWORD *)this + 15))
        {
          __break(0xC471u);
          JUMPOUT(0x1983D7A3CLL);
        }
        v23 = **((_QWORD **)this + 6);
        v24 = *((_QWORD *)this + 55);
        v25 = *(_DWORD *)(v24 - 8);
        v26 = (~(v23 << 32) + v23) ^ ((unint64_t)(~(v23 << 32) + v23) >> 22);
        v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
        v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
        v29 = v25 & ((v28 >> 31) ^ v28);
        v30 = (uint64_t *)(v24 + 88 * v29);
        v31 = *v30;
        if (*v30 != v23)
        {
          v100 = 1;
          while (v31)
          {
            v29 = (v29 + v100) & v25;
            v30 = (uint64_t *)(v24 + 88 * v29);
            v31 = *v30;
            ++v100;
            v14 = 0x5803040C6C1;
            v15 = 0x1D00000000000010;
            if (*v30 == v23)
              goto LABEL_17;
          }
          v30 = (uint64_t *)(v24 + 88 * *(unsigned int *)(v24 - 4));
          v14 = 0x5803040C6C1;
          v15 = 0x1D00000000000010;
        }
LABEL_17:
        v32 = (int)(v22[3] - 5);
        if (v32 >= *((unsigned int *)v30 + 5))
        {
          __break(0xC471u);
          JUMPOUT(0x1983D7A18);
        }
        v33 = *(_QWORD *)(v30[1] + 8 * v32);
        if (v33)
        {
          v34 = (_QWORD *)*((_QWORD *)v11 + 9);
          v35 = v34;
          do
          {
            v36 = v35;
            v35 = (_QWORD *)*v35;
          }
          while (v35);
          if (v36 != v34)
            *v34 = v36;
          v37 = *(_QWORD **)(v33 + 72);
          v38 = v37;
          do
          {
            v39 = v38;
            v38 = (_QWORD *)*v38;
          }
          while (v38);
          if (v39 != v37)
            *v37 = v39;
          if (v36 == v39)
          {
            v63 = *(_QWORD *)v11;
            if ((*(_QWORD *)v11 & 1) != 0)
            {
              v89 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
              if ((v63 & 2) != 0
                || ((v90 = *(unsigned int *)((v63 & 0xFFFFFFFF8) + 8), (_DWORD)v90 != 0x3FFFFFFF)
                  ? (v91 = (_DWORD)v90 == -1)
                  : (v91 = 1),
                    v91))
              {
                v92 = 2;
              }
              else if (v90 >> 28)
              {
                v117 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v117 = v89;
                *(_DWORD *)(v117 + 8) = v90;
                v92 = 1;
                v89 = v117;
              }
              else
              {
                v92 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
                v89 = v90 << 36;
              }
              v63 = v89 | v92;
            }
            v64 = (_QWORD *)*((_QWORD *)v11 + 9);
            v65 = v64;
            do
            {
              v66 = v65;
              v65 = (_QWORD *)*v65;
            }
            while (v65);
            if (v66 != v64)
              *v64 = v66;
            v67 = v66[3];
            *(_QWORD *)a9 = 2;
            v68 = ((unint64_t)*(unsigned __int8 *)(a9 + 12) >> 5 << 37) | 0x1000000000;
            *(_DWORD *)(a9 + 8) = 0;
            *(_BYTE *)(a9 + 12) = BYTE4(v68);
            if ((v63 & 1) == 0)
            {
              *(_QWORD *)a9 = v63;
              goto LABEL_94;
            }
            v85 = v63 & 0xFFFFFFFF8;
            v93 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
            if ((v63 & 2) != 0)
              goto LABEL_173;
LABEL_171:
            v94 = *(unsigned int *)(v85 + 8);
            if ((_DWORD)v94 != 0x3FFFFFFF && (_DWORD)v94 != -1)
            {
              if (v94 >> 28)
              {
                v116 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v116 = v93;
                *(_DWORD *)(v116 + 8) = v94;
                v95 = 1;
                v93 = v116;
              }
              else
              {
                v95 = v93;
                v93 = v94 << 36;
              }
LABEL_174:
              *(_QWORD *)a9 = v93 | v95;
              *(_DWORD *)(a9 + 8) = v68 | v67;
              *(_BYTE *)(a9 + 12) = (v68 | v67 & 0x3FFFFFFFFLL) >> 32;
              if (!v85)
                return;
LABEL_159:
              WTF::fastFree(v85, (void *)v14, v15, a4, a5, a6, a7, a8);
              return;
            }
LABEL_173:
            v95 = 2;
            goto LABEL_174;
          }
        }
      }
    }
    v40 = *(_QWORD *)v11;
    v41 = *(_QWORD *)v11 >> 36;
    if (a2)
    {
      v42 = *(_QWORD *)a2;
      if (v40 == *(_QWORD *)a2)
        goto LABEL_32;
      if ((v40 & 2) != 0)
      {
        LODWORD(v43) = -1;
      }
      else if ((v40 & 1) != 0)
      {
        LODWORD(v43) = *(_DWORD *)((v40 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v43 = *(_QWORD *)v11 >> 36;
      }
      if ((v42 & 2) != 0)
      {
        LODWORD(v44) = -1;
      }
      else if ((v42 & 1) != 0)
      {
        LODWORD(v44) = *(_DWORD *)((v42 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v44 = v42 >> 36;
      }
      if ((_DWORD)v43 == (_DWORD)v44)
      {
        v79 = (_QWORD *)(v40 & 0xFFFFFFFF8);
        if ((v40 & 1) != 0)
          v79 = (_QWORD *)*v79;
        v80 = (_QWORD *)(v42 & 0xFFFFFFFF8);
        if ((v42 & 1) != 0)
          v80 = (_QWORD *)*v80;
        if (v79 == v80)
        {
LABEL_32:
          if ((*((_BYTE *)a2 + 56) & 7) != 0)
            goto LABEL_110;
        }
      }
    }
    v45 = (uint64_t *)(v40 & 0xFFFFFFFF8);
    v46 = v40 & 0xFFFFFFFF8;
    if ((v40 & 1) != 0)
      v46 = *v45;
    v47 = *((_QWORD *)this + 5);
    v48 = v47;
    if (v46)
      v48 = *(_QWORD *)(v46 + 8);
    if ((_DWORD)v16 == 15)
      break;
    if ((int)v16 <= 151)
    {
      if ((v16 - 92) <= 0x33 && ((1 << (v16 - 92)) & 0xC000001FE000FLL) != 0
        || (_DWORD)v16 == 6
        || (v16 - 76) < 4)
      {
        goto LABEL_49;
      }
    }
    else
    {
      if ((int)v16 <= 263)
      {
        switch((int)v16)
        {
          case 152:
          case 154:
          case 171:
          case 173:
          case 174:
          case 176:
          case 193:
          case 194:
          case 202:
          case 203:
          case 204:
          case 205:
          case 207:
          case 208:
          case 209:
          case 210:
          case 211:
          case 212:
          case 213:
          case 216:
          case 217:
          case 218:
          case 219:
          case 220:
          case 221:
          case 222:
          case 223:
          case 224:
          case 225:
          case 241:
          case 242:
          case 243:
          case 244:
          case 245:
          case 246:
          case 247:
          case 249:
          case 250:
          case 251:
          case 252:
          case 253:
          case 254:
          case 255:
            goto LABEL_49;
          default:
            goto LABEL_99;
        }
      }
      if ((v16 - 388) <= 0x2A && ((1 << (v16 + 124)) & 0x5803040C6C1) != 0
        || (v16 - 321) <= 0x25 && ((1 << (v16 - 65)) & 0x280040002FLL) != 0
        || (_DWORD)v16 == 264)
      {
LABEL_49:
        if ((v40 & 2) != 0)
        {
          LODWORD(v41) = -1;
        }
        else if ((v40 & 1) != 0)
        {
          LODWORD(v41) = *(_DWORD *)((v40 & 0xFFFFFFFF8) + 8);
        }
        v49 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v48 + 56) + 80)
                                + ((unint64_t)v41 >> 2));
        v50 = *v49;
        if ((v50 | 2) == 0x82)
          v50 = v49[1];
        if (v50 > 10)
        {
          if (v50 != 11)
          {
            if (v50 != 24)
              goto LABEL_84;
            goto LABEL_115;
          }
        }
        else if (v50 != 9 && v50 != 0)
        {
LABEL_84:
          if ((v40 & 1) == 0)
          {
            v62 = ((unint64_t)(*(_BYTE *)(a9 + 12) >> 5) << 37) | 0xC00000000;
            *(_DWORD *)(a9 + 8) = 0;
            *(_BYTE *)(a9 + 12) = BYTE4(v62);
LABEL_86:
            *(_QWORD *)a9 = v40;
            return;
          }
          v81 = *v45;
          if ((v40 & 2) != 0
            || (v82 = *(unsigned int *)((v40 & 0xFFFFFFFF8) + 8), (_DWORD)v82 == 0x3FFFFFFF)
            || (_DWORD)v82 == -1)
          {
            v83 = 2;
          }
          else if (v82 >> 28)
          {
            v115 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v115 = v81;
            *(_DWORD *)(v115 + 8) = v82;
            v83 = 1;
            v81 = v115;
          }
          else
          {
            v83 = *v45;
            v81 = v82 << 36;
          }
          v40 = v81 | v83;
          *(_QWORD *)a9 = 2;
          v84 = ((unint64_t)(*(_BYTE *)(a9 + 12) >> 5) << 37) | 0xC00000000;
          *(_DWORD *)(a9 + 8) = 0;
          *(_BYTE *)(a9 + 12) = BYTE4(v84);
          if (((v81 | v83) & 1) == 0)
            goto LABEL_86;
          v85 = v40 & 0xFFFFFFFF8;
          v86 = *(_QWORD *)(v40 & 0xFFFFFFFF8);
          if ((v40 & 2) != 0)
            goto LABEL_157;
LABEL_155:
          v87 = *(unsigned int *)(v85 + 8);
          if ((_DWORD)v87 == 0x3FFFFFFF || (_DWORD)v87 == -1)
            goto LABEL_157;
LABEL_209:
          if (v87 >> 28)
          {
            v114 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v114 = v86;
            *(_DWORD *)(v114 + 8) = v87;
            v88 = 1;
            v86 = v114;
          }
          else
          {
            v88 = v86;
            v86 = v87 << 36;
          }
LABEL_158:
          *(_QWORD *)a9 = v86 | v88;
          if (!v85)
            return;
          goto LABEL_159;
        }
        if ((v40 & 1) != 0)
          v45 = (uint64_t *)*v45;
        if (v45)
        {
          do
          {
            v52 = v45;
            v53 = v45[2];
            v54 = (unint64_t)v45[3] >> 60;
            v55 = (uint64_t *)(v53 & 0xFFFFFFFF8);
            v45 = (uint64_t *)(v53 & 0xFFFFFFFF8);
            if ((v53 & 1) != 0)
              v45 = (uint64_t *)*v55;
            v56 = (v54 < 0xC) & (0x824u >> v54);
            if (v45)
              v57 = v56;
            else
              v57 = 0;
          }
          while ((v57 & 1) != 0);
          if (!v56)
          {
            v58 = v53 & 0xFFFFFFFF8;
            if ((v53 & 1) != 0)
              v58 = *v55;
            if (v58)
              v47 = *(_QWORD *)(v58 + 8);
            if ((v53 & 2) != 0)
            {
              LODWORD(v53) = -1;
            }
            else if ((v53 & 1) != 0)
            {
              LODWORD(v53) = *(_DWORD *)((v53 & 0xFFFFFFFF8) + 8);
            }
            else
            {
              v53 >>= 36;
            }
            if (JSC::CodeBlock::tryGetValueProfileForBytecodeIndex(v47, v53, a10))
            {
              v59 = v52[2];
              if ((v59 & 1) == 0)
              {
                v60 = (unint64_t)*(unsigned __int8 *)(a9 + 12) >> 5;
                v61 = 0xC00000000;
LABEL_80:
                *(_DWORD *)(a9 + 8) = 0;
                *(_BYTE *)(a9 + 12) = (v61 & 0xFFFFFF1FFFFFFFFFLL | ((v60 & 7) << 37)) >> 32;
                goto LABEL_81;
              }
              v101 = *(_QWORD *)(v59 & 0xFFFFFFFF8);
              if ((v59 & 2) != 0
                || (v102 = *(unsigned int *)((v59 & 0xFFFFFFFF8) + 8), (_DWORD)v102 == 0x3FFFFFFF)
                || (_DWORD)v102 == -1)
              {
                v103 = 2;
              }
              else if (v102 >> 28)
              {
                v119 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v119 = v101;
                *(_DWORD *)(v119 + 8) = v102;
                v103 = 1;
                v101 = v119;
              }
              else
              {
                v103 = *(_QWORD *)(v59 & 0xFFFFFFFF8);
                v101 = v102 << 36;
              }
              v59 = v101 | v103;
              *(_QWORD *)a9 = 2;
              v104 = ((unint64_t)(*(_BYTE *)(a9 + 12) >> 5) << 37) | 0xC00000000;
              *(_DWORD *)(a9 + 8) = 0;
              *(_BYTE *)(a9 + 12) = BYTE4(v104);
              if ((v59 & 1) != 0)
              {
                v85 = v59 & 0xFFFFFFFF8;
                v86 = *(_QWORD *)(v59 & 0xFFFFFFFF8);
                if ((v59 & 2) != 0)
                  goto LABEL_157;
                v87 = *(unsigned int *)((v59 & 0xFFFFFFFF8) + 8);
                if ((_DWORD)v87 == 0x3FFFFFFF || (_DWORD)v87 == -1)
                  goto LABEL_157;
                goto LABEL_209;
              }
LABEL_81:
              *(_QWORD *)a9 = v59;
              return;
            }
          }
        }
LABEL_115:
        *(_QWORD *)a9 = 2;
        v75 = *(_BYTE *)(a9 + 12);
        *(_DWORD *)(a9 + 8) = 0;
        LOBYTE(v69) = v75 & 0xE0;
        goto LABEL_116;
      }
    }
LABEL_99:
    v70 = *(_QWORD *)(v48 + 120);
    if (v70 && *(_BYTE *)(v70 + 12) == 3)
    {
      if ((v40 & 2) != 0)
      {
        LODWORD(v41) = -1;
      }
      else if ((v40 & 1) != 0)
      {
        LODWORD(v41) = *(_DWORD *)((v40 & 0xFFFFFFFF8) + 8);
      }
      v71 = JSC::CodeBlock::binaryArithProfileForPC(v48, (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v48 + 56) + 80) + (v41 >> 2)));
      v59 = *(_QWORD *)v11;
      if (v71)
      {
        if ((v59 & 1) == 0)
        {
          v60 = (unint64_t)*(unsigned __int8 *)(a9 + 12) >> 5;
          v61 = 0x800000000;
          goto LABEL_80;
        }
        v106 = *(_QWORD *)(v59 & 0xFFFFFFFF8);
        if ((v59 & 2) != 0
          || (v107 = *(unsigned int *)((v59 & 0xFFFFFFFF8) + 8), (_DWORD)v107 == 0x3FFFFFFF)
          || (_DWORD)v107 == -1)
        {
          v108 = 2;
        }
        else if (v107 >> 28)
        {
          v120 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v120 = v106;
          *(_DWORD *)(v120 + 8) = v107;
          v108 = 1;
          v106 = v120;
        }
        else
        {
          v108 = *(_QWORD *)(v59 & 0xFFFFFFFF8);
          v106 = v107 << 36;
        }
        v59 = v106 | v108;
        *(_QWORD *)a9 = 2;
        v109 = (unint64_t)*(unsigned __int8 *)(a9 + 12) >> 5;
        v110 = 0x800000000;
      }
      else
      {
        if ((v59 & 2) != 0)
        {
          LODWORD(v59) = -1;
        }
        else if ((v59 & 1) != 0)
        {
          LODWORD(v59) = *(_DWORD *)((v59 & 0xFFFFFFFF8) + 8);
        }
        else
        {
          v59 >>= 36;
        }
        if (!JSC::CodeBlock::unaryArithProfileForPC(v48, (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v48 + 56) + 80) + (v59 >> 2))))
        {
          LODWORD(v16) = *((unsigned __int16 *)v11 + 9);
          v14 = 0x5803040C6C1;
          v15 = 0x1D00000000000010;
          goto LABEL_110;
        }
        v59 = *(_QWORD *)v11;
        if ((*(_QWORD *)v11 & 1) == 0)
        {
          v60 = (unint64_t)*(unsigned __int8 *)(a9 + 12) >> 5;
          v61 = 0x400000000;
          goto LABEL_80;
        }
        v111 = *(_QWORD *)(v59 & 0xFFFFFFFF8);
        if ((v59 & 2) != 0
          || (v112 = *(unsigned int *)((v59 & 0xFFFFFFFF8) + 8), (_DWORD)v112 == 0x3FFFFFFF)
          || (_DWORD)v112 == -1)
        {
          v113 = 2;
        }
        else if (v112 >> 28)
        {
          v121 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v121 = v111;
          *(_DWORD *)(v121 + 8) = v112;
          v113 = 1;
          v111 = v121;
        }
        else
        {
          v113 = *(_QWORD *)(v59 & 0xFFFFFFFF8);
          v111 = v112 << 36;
        }
        v59 = v111 | v113;
        *(_QWORD *)a9 = 2;
        v109 = (unint64_t)*(unsigned __int8 *)(a9 + 12) >> 5;
        v110 = 0x400000000;
      }
      *(_DWORD *)(a9 + 8) = 0;
      *(_BYTE *)(a9 + 12) = (v110 & 0xFFFFFF1FFFFFFFFFLL | ((v109 & 7) << 37)) >> 32;
      if ((v59 & 1) != 0)
      {
        v85 = v59 & 0xFFFFFFFF8;
        v86 = *(_QWORD *)(v59 & 0xFFFFFFFF8);
        if ((v59 & 2) != 0)
        {
LABEL_157:
          v88 = 2;
          goto LABEL_158;
        }
        goto LABEL_155;
      }
      goto LABEL_81;
    }
LABEL_110:
    v72 = v16 > 0x3C;
    v73 = (1 << v16) & 0x1D00000000000010;
    if (!v72 && v73 != 0)
    {
      v11 = (JSC::DFG::Node *)(*((_QWORD *)v11 + 3) & 0xFF00FFFFFFFFFFFFLL);
      if (v11)
        continue;
    }
    goto LABEL_115;
  }
  if ((v40 & 1) != 0)
  {
    v96 = *v45;
    if ((v40 & 2) != 0
      || ((v97 = *(unsigned int *)((v40 & 0xFFFFFFFF8) + 8), (_DWORD)v97 != 0x3FFFFFFF)
        ? (v98 = (_DWORD)v97 == -1)
        : (v98 = 1),
          v98))
    {
      v99 = 2;
    }
    else if (v97 >> 28)
    {
      v118 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v118 = v96;
      *(_DWORD *)(v118 + 8) = v97;
      v99 = 1;
      v96 = v118;
    }
    else
    {
      v99 = *v45;
      v96 = v97 << 36;
    }
    v40 = v96 | v99;
  }
  v76 = (_QWORD *)*((_QWORD *)v11 + 9);
  v77 = v76;
  do
  {
    v78 = v77;
    v77 = (_QWORD *)*v77;
  }
  while (v77);
  if (v78 != v76)
    *v76 = v78;
  v67 = v78[3];
  *(_QWORD *)a9 = 2;
  v68 = ((unint64_t)*(unsigned __int8 *)(a9 + 12) >> 5 << 37) | 0x1400000000;
  *(_DWORD *)(a9 + 8) = 0;
  *(_BYTE *)(a9 + 12) = BYTE4(v68);
  if ((v40 & 1) != 0)
  {
    v85 = v40 & 0xFFFFFFFF8;
    v93 = *(_QWORD *)(v40 & 0xFFFFFFFF8);
    if ((v40 & 2) != 0)
      goto LABEL_173;
    goto LABEL_171;
  }
  *(_QWORD *)a9 = v40;
LABEL_94:
  *(_DWORD *)(a9 + 8) = v68 | v67;
  v69 = (v68 | v67 & 0x3FFFFFFFFLL) >> 32;
LABEL_116:
  *(_BYTE *)(a9 + 12) = v69;
}

uint64_t JSC::DFG::Graph::getRegExpPrototypeProperty(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t Concurrently;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ConstantProperty;
  uint64_t result;
  int v39;
  int v40;
  unint64_t v41;

  if (((*(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) - 1) & 0xFFFFFFFD) == 0)
    return 0;
  v40 = 0;
  Concurrently = JSC::Structure::getConcurrently(a3, a4, &v40, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  if ((_DWORD)Concurrently == -1)
    return 0;
  v19 = Concurrently;
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(a1 + 24) + 280), a3, v13, v14, v15, v16, v17, v18);
  JSC::DFG::DesiredWatchpoints::consider((JSC::DFG::DesiredWatchpoints *)(*(_QWORD *)(a1 + 24) + 136), (JSC::Structure *)a3, v20, v21, v22, v23, v24, v25);
  v41 = a3;
  ConstantProperty = JSC::DFG::Graph::tryGetConstantProperty(a1, a2, &v41, v19, v26, v27, v28, v29);
  if ((a3 & 1) != 0)
    WTF::fastFree(a3 & 0xFFFFFFFFFFFFFFFCLL, v30, v31, v32, v33, v34, v35, v36);
  result = 0;
  if (ConstantProperty && (ConstantProperty & 0xFFFE000000000002) == 0)
  {
    v39 = *(unsigned __int8 *)(ConstantProperty + 5);
    if (v39 != 26 && v39 != 5)
      return 0;
    *a5 = ConstantProperty;
    return 1;
  }
  return result;
}

uint64_t JSC::DFG::Graph::isStringPrototypeMethodSane(JSC::DFG::Graph *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  const JSC::ObjectPropertyCondition *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  WTF *v44;

  v10 = (JSC::VM *)*((_QWORD *)a1 + 2);
  v11 = *(_DWORD *)(a2 + 1160);
  if (v11)
    v12 = 16 * (v11 & 0xFFFFFFFE);
  else
    v12 = 0;
  JSC::generateConditionsForPrototypeEquivalenceConcurrently(v10, (_QWORD *)a2, v12, *(_QWORD *)(a2 + 1192), a3, a6, a7, a8, (uint64_t *)&v44);
  v20 = (unsigned int *)v44;
  if (!v44)
    goto LABEL_33;
  v21 = *((unsigned int *)v44 + 1);
  if (!(_DWORD)v21)
  {
    v34 = 0;
    v44 = 0;
    do
    {
LABEL_29:
      v36 = __ldaxr(v20);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v20));
    if (!v37)
    {
      atomic_store(1u, v20);
      WTF::fastFree((unint64_t)v20, v13, v14, v15, v16, v17, v18, v19);
    }
    return v34;
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = (uint64_t *)((char *)v44 + 24);
  v26 = 24 * v21;
  do
  {
    v27 = BYTE6(*(v25 - 1));
    if (v27 < 2 || v27 - 5 <= 1)
    {
      v23 = *v25;
      ++v24;
      v22 = *(v25 - 1);
    }
    v25 += 3;
    v26 -= 24;
  }
  while (v26);
  if (v24 != 1)
  {
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x1983D7EA0);
  }
  if ((v22 & 0xFF000000000000) != 0x5000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x1983D7F1CLL);
  }
  if ((v23 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v23 + 5) != 26)
    goto LABEL_41;
  v28 = *(_QWORD *)(v23 + 24);
  if ((v28 & 1) != 0)
    v28 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v28 + 5) == 8)
  {
    v39 = *(_QWORD *)(v28 + 8);
    v40 = (unsigned int *)(v39 + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 + 1, v40));
    v29 = *(unsigned __int8 *)(v39 + 14);
    do
    {
      v42 = __ldaxr(v40);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v40));
    if (!v43)
    {
      atomic_store(1u, (unsigned int *)(v39 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39);
    }
  }
  else
  {
    v29 = *(unsigned __int8 *)(v28 + 64);
  }
  if (v29 != 80 || ((*(_DWORD *)(*((_QWORD *)a1 + 3) + 16) - 1) & 0xFFFFFFFD) == 0)
    goto LABEL_41;
  if (!v44)
    return 1;
  v30 = *((_DWORD *)v44 + 1);
  if (v30)
  {
    v31 = (WTF *)((char *)v44 + 8);
    v32 = 24 * v30 - 24;
    do
    {
      JSC::DFG::Graph::watchCondition(a1, v31, v14, v15, v16, v17, v18, v19);
      v34 = v33;
      if (!(_DWORD)v33)
        break;
      v31 = (const JSC::ObjectPropertyCondition *)((char *)v31 + 24);
      v35 = v32;
      v32 -= 24;
    }
    while (v35);
  }
  else
  {
LABEL_41:
    v34 = 0;
  }
  v20 = (unsigned int *)v44;
  v44 = 0;
  if (v20)
    goto LABEL_29;
  return v34;
}

uint64_t JSC::DFG::Graph::canOptimizeStringObjectAccess(JSC::DFG::Graph *this, const JSC::CodeOrigin *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char hasExitSite;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  char v37;
  char v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  char v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  JSC::Structure *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  const JSC::ObjectPropertyCondition *v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t result;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 *v82;
  int v83;
  unsigned __int8 *v84;
  int v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  __int16 v106;
  char v107;
  WTF *v108;
  unsigned __int8 *v109;
  char v110;
  char v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  if (((*(_DWORD *)(*((_QWORD *)this + 3) + 16) - 1) & 0xFFFFFFFD) == 0)
    return 0;
  v4 = *((_QWORD *)this + 5);
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)a2 & 0xFFFFFFFF8;
  if ((*(_QWORD *)a2 & 1) != 0)
    v6 = *(_QWORD *)(*(_QWORD *)a2 & 0xFFFFFFFF8);
  if (v6)
    v4 = *(_QWORD *)(v6 + 8);
  v7 = *(_QWORD *)(v4 + 56);
  if ((v5 & 2) != 0)
  {
    LODWORD(v8) = -1;
  }
  else if ((v5 & 1) != 0)
  {
    LODWORD(v8) = *(_DWORD *)((*(_QWORD *)a2 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v8 = v5 >> 36;
  }
  v105 = v8;
  v106 = 5;
  v107 = 0;
  v9 = (unsigned __int8 *)(v7 + 31);
  v111 = 0;
  v109 = (unsigned __int8 *)(v7 + 31);
  v110 = 1;
  if (__ldaxr((unsigned __int8 *)(v7 + 31)))
  {
    __clrex();
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
    goto LABEL_12;
  }
  if (__stxr(1u, v9))
    goto LABEL_11;
LABEL_12:
  v111 = 1;
  hasExitSite = JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v7 + 96), (uint64_t)&v108, &v105);
  if (!v110)
    goto LABEL_13;
  v82 = v109;
  v83 = __ldxr(v109);
  if (v83 != 1)
  {
    __clrex();
    goto LABEL_70;
  }
  if (__stlxr(0, v109))
LABEL_70:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v82, 0, v11, v12, v13, v14, v15, v16);
LABEL_13:
  if ((hasExitSite & 1) != 0)
    return 0;
  v18 = *((_QWORD *)this + 5);
  v19 = *(_QWORD *)a2;
  v20 = *(_QWORD *)a2 & 0xFFFFFFFF8;
  if ((*(_QWORD *)a2 & 1) != 0)
    v20 = *(_QWORD *)(*(_QWORD *)a2 & 0xFFFFFFFF8);
  if (v20)
    v18 = *(_QWORD *)(v20 + 8);
  v21 = *(_QWORD *)(v18 + 56);
  if ((v19 & 2) != 0)
  {
    LODWORD(v22) = -1;
  }
  else if ((v19 & 1) != 0)
  {
    LODWORD(v22) = *(_DWORD *)((*(_QWORD *)a2 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v22 = v19 >> 36;
  }
  v105 = v22;
  v106 = 6;
  v107 = 0;
  v23 = (unsigned __int8 *)(v21 + 31);
  v111 = 0;
  v109 = (unsigned __int8 *)(v21 + 31);
  v110 = 1;
  if (__ldaxr((unsigned __int8 *)(v21 + 31)))
  {
    __clrex();
LABEL_23:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v23);
    goto LABEL_24;
  }
  if (__stxr(1u, v23))
    goto LABEL_23;
LABEL_24:
  v111 = 1;
  v32 = JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v21 + 96), (uint64_t)&v108, &v105);
  if (!v110)
    goto LABEL_25;
  v84 = v109;
  v85 = __ldxr(v109);
  if (v85 != 1)
  {
    __clrex();
    goto LABEL_72;
  }
  if (__stlxr(0, v109))
LABEL_72:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v84, 0, v26, v27, v28, v29, v30, v31);
LABEL_25:
  if ((v32 & 1) != 0)
    return 0;
  v33 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) == 0)
  {
    v35 = (uint64_t *)((char *)this + 32);
    v34 = *((_QWORD *)this + 4);
LABEL_28:
    v36 = (_QWORD *)(v33 & 0xFFFFFFFF8);
    v37 = 1;
    v38 = 1;
LABEL_29:
    v39 = v36;
    goto LABEL_30;
  }
  v86 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
  if ((v33 & 2) != 0 || (v87 = *(_DWORD *)((v33 & 0xFFFFFFFF8) + 8), v87 == 0x3FFFFFFF) || v87 == -1)
  {
    v88 = 2;
  }
  else if (v87 >> 28)
  {
    v100 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v100 = v86;
    *(_DWORD *)(v100 + 8) = v87;
    v88 = 1;
    v86 = v100;
  }
  else
  {
    v88 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
    v86 = 0;
  }
  v33 = v86 | v88;
  v35 = (uint64_t *)((char *)this + 32);
  v34 = *((_QWORD *)this + 4);
  if ((v33 & 1) == 0)
    goto LABEL_28;
  v89 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
  if ((v33 & 2) != 0 || (v90 = *(_DWORD *)((v33 & 0xFFFFFFFF8) + 8), v90 == 0x3FFFFFFF) || v90 == -1)
  {
    v91 = 2;
  }
  else if (v90 >> 28)
  {
    v102 = *(_DWORD *)((v33 & 0xFFFFFFFF8) + 8);
    v103 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v103 = v89;
    *(_DWORD *)(v103 + 8) = v102;
    v91 = 1;
    v89 = v103;
  }
  else
  {
    v91 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
    v89 = 0;
  }
  v92 = v89 | v91;
  v36 = (_QWORD *)(v92 & 0xFFFFFFFF8);
  if ((v92 & 1) == 0)
  {
    v38 = 0;
    v37 = 1;
    goto LABEL_29;
  }
  v37 = 0;
  v38 = 0;
  v39 = (_QWORD *)*v36;
LABEL_30:
  if (v39)
    v34 = v39[1];
  v40 = *(_QWORD **)(v34 + 8);
  if ((v37 & 1) == 0 && v36)
    WTF::fastFree((unint64_t)v36, v25, v26, v27, v28, v29, v30, v31);
  if ((v38 & 1) == 0 && (v33 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v33 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
  v41 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) == 0)
  {
    v42 = *v35;
LABEL_36:
    v43 = (_QWORD *)(v41 & 0xFFFFFFFF8);
    v44 = 1;
    v45 = 1;
LABEL_37:
    v46 = v43;
    goto LABEL_38;
  }
  v93 = *(_QWORD *)(v41 & 0xFFFFFFFF8);
  if ((v41 & 2) != 0 || (v94 = *(_DWORD *)((v41 & 0xFFFFFFFF8) + 8), v94 == 0x3FFFFFFF) || v94 == -1)
  {
    v95 = 2;
  }
  else if (v94 >> 28)
  {
    v101 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v101 = v93;
    *(_DWORD *)(v101 + 8) = v94;
    v95 = 1;
    v93 = v101;
  }
  else
  {
    v95 = v93;
    v93 = 0;
  }
  v41 = v93 | v95;
  v42 = *v35;
  if ((v41 & 1) == 0)
    goto LABEL_36;
  v96 = *(_QWORD *)(v41 & 0xFFFFFFFF8);
  if ((v41 & 2) != 0 || (v97 = *(_DWORD *)((v41 & 0xFFFFFFFF8) + 8), v97 == 0x3FFFFFFF) || v97 == -1)
  {
    v98 = 2;
  }
  else if (v97 >> 28)
  {
    v104 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v104 = v96;
    *(_DWORD *)(v104 + 8) = v97;
    v98 = 1;
    v96 = v104;
  }
  else
  {
    v98 = *(_QWORD *)(v41 & 0xFFFFFFFF8);
    v96 = 0;
  }
  v99 = v96 | v98;
  v43 = (_QWORD *)(v99 & 0xFFFFFFFF8);
  if ((v99 & 1) == 0)
  {
    v45 = 0;
    v44 = 1;
    goto LABEL_37;
  }
  v44 = 0;
  v45 = 0;
  v46 = (_QWORD *)*v43;
LABEL_38:
  if (v46)
    v42 = v46[1];
  v47 = *(_QWORD *)(v42 + 8);
  if ((v44 & 1) == 0 && v43)
    WTF::fastFree((unint64_t)v43, v25, v26, v27, v28, v29, v30, v31);
  v48 = *(_DWORD *)(v47 + 1160);
  if (v48)
    v49 = (JSC::Structure *)(16 * (v48 & 0xFFFFFFFE));
  else
    v49 = 0;
  if ((v45 & 1) == 0 && (v41 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v41 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*((_QWORD *)this + 3) + 280), (unint64_t)v49, v26, v27, v28, v29, v30, v31);
  JSC::DFG::DesiredWatchpoints::consider((JSC::DFG::DesiredWatchpoints *)(*((_QWORD *)this + 3) + 136), v49, v50, v51, v52, v53, v54, v55);
  JSC::generateConditionsForPropertyMissConcurrently(*((JSC::VM **)this + 2), v40, (uint64_t)v49, *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 2) + 41952) + 2768), v56, v57, v58, v59, (uint64_t *)&v108);
  v67 = (unsigned int *)v108;
  if (((*(_DWORD *)(*((_QWORD *)this + 3) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    if (!v108)
      goto LABEL_56;
    v68 = *((_DWORD *)v108 + 1);
    if (!v68)
    {
      v72 = 0;
      v108 = 0;
      goto LABEL_53;
    }
    v69 = (WTF *)((char *)v108 + 8);
    v70 = 24 * v68 - 24;
    do
    {
      JSC::DFG::Graph::watchCondition(this, v69, v61, v62, v63, v64, v65, v66);
      v72 = v71;
      if (!v71)
        break;
      v69 = (const JSC::ObjectPropertyCondition *)((char *)v69 + 24);
      v73 = v70;
      v70 -= 24;
    }
    while (v73);
    v67 = (unsigned int *)v108;
  }
  else
  {
    v72 = 0;
  }
  v108 = 0;
  if (!v67)
    goto LABEL_55;
  do
  {
LABEL_53:
    v74 = __ldaxr(v67);
    v75 = v74 - 1;
  }
  while (__stlxr(v75, v67));
  if (v75)
  {
LABEL_55:
    if (v72)
      goto LABEL_56;
    return 0;
  }
  atomic_store(1u, v67);
  WTF::fastFree((unint64_t)v67, v60, v61, v62, v63, v64, v65, v66);
  if ((v72 & 1) == 0)
    return 0;
LABEL_56:
  result = JSC::DFG::Graph::isStringPrototypeMethodSane(this, (uint64_t)v40, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 41952) + 2616), v62, v63, v64, v65, v66);
  if ((_DWORD)result)
    return JSC::DFG::Graph::isStringPrototypeMethodSane(this, (uint64_t)v40, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 41952) + 2512), v77, v78, v79, v80, v81);
  return result;
}

uint64_t JSC::DFG::Graph::hasExitSite(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;

  v8 = a3;
  v9 = a2 & 0xFFFFFFFF8;
  if ((a2 & 1) != 0)
    v9 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
  if (v9)
    a1 = *(_QWORD *)(v9 + 8);
  v10 = *(_QWORD *)(a1 + 56);
  if ((a2 & 2) != 0)
  {
    LODWORD(v11) = -1;
  }
  else if ((a2 & 1) != 0)
  {
    LODWORD(v11) = *(_DWORD *)((a2 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v11 = a2 >> 36;
  }
  v12 = (unsigned __int8 *)(v10 + 31);
  if (__ldaxr((unsigned __int8 *)(v10 + 31)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v10 + 31);
LABEL_11:
  v14 = *(uint64_t **)(v10 + 96);
  if (v14 && (v18 = *((_DWORD *)v14 + 3)) != 0)
  {
    v19 = *v14;
    v20 = v18 - 1;
    while (1)
    {
      v21 = v20;
      if ((_DWORD)v11 == *(_DWORD *)(v19 + 8 * v20) && *(unsigned __int8 *)(v19 + 8 * v20 + 4) == v8)
        break;
      v15 = 0;
      --v20;
      if (!v21)
        goto LABEL_13;
    }
    v15 = 1;
  }
  else
  {
    v15 = 0;
  }
LABEL_13:
  v16 = __ldxr(v12);
  if (v16 == 1)
  {
    if (!__stlxr(0, v12))
      return v15;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, a3, a4, a5, a6, a7, a8);
  return v15;
}

uint64_t JSC::DFG::Graph::willCatchExceptionInMachineFrame(uint64_t a1, unint64_t *a2, uint64_t *a3, unsigned int **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t *v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int **v47;
  unsigned int **v48;
  unsigned int **v49;
  unsigned int **v50;

  if (!*(_BYTE *)(a1 + 961))
    return 0;
  v9 = *a2;
  if ((*a2 & 2) != 0)
  {
    LODWORD(v10) = -1;
  }
  else if ((v9 & 1) != 0)
  {
    LODWORD(v10) = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v10 = v9 >> 36;
  }
  v11 = (uint64_t *)(a1 + 40);
LABEL_7:
  v12 = (uint64_t *)(v9 & 0xFFFFFFFF8);
  while (1)
  {
    v13 = v9 & 0xFFFFFFFF8;
    if ((v9 & 1) != 0)
      v13 = *v12;
    v14 = (uint64_t *)(v13 + 8);
    if (!v13)
      v14 = v11;
    v15 = *v14;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 56) + 80) + 12) <= v10 >> 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1983D8790);
    }
    v16 = *(_QWORD *)(v15 + 224);
    if (v16)
    {
      v22 = *(unsigned int *)(v16 + 12);
      if ((_DWORD)v22)
        break;
    }
LABEL_14:
    if (!v13)
      return 0;
    v19 = *(_QWORD *)(v13 + 16);
    v17 = (unint64_t *)(v13 + 16);
    v18 = v19;
    if ((v19 & 2) != 0)
    {
      LODWORD(v10) = -1;
    }
    else if ((v18 & 1) != 0)
    {
      LODWORD(v10) = *(_DWORD *)((v18 & 0xFFFFFFFF8) + 8);
    }
    else
    {
      v10 = v18 >> 36;
    }
    if (v17 != a2)
    {
      if ((v9 & 1) != 0)
      {
        v39 = v17;
        if (v12)
        {
          v43 = v10;
          v47 = a4;
          v29 = a3;
          v41 = (unint64_t)a2;
          WTF::fastFree((unint64_t)v12, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          a2 = (unint64_t *)v41;
          LODWORD(v10) = v43;
          a3 = v29;
          a4 = v47;
          v18 = *v39;
        }
      }
      if ((v18 & 1) != 0)
      {
        v42 = (unint64_t)a2;
        v44 = v10;
        v38 = a3;
        v40 = v11;
        v48 = a4;
        v30 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
        if ((v18 & 2) != 0
          || ((v31 = *(unsigned int *)((v18 & 0xFFFFFFFF8) + 8), (_DWORD)v31 != 0x3FFFFFFF)
            ? (v32 = (_DWORD)v31 == -1)
            : (v32 = 1),
              v32))
        {
          v33 = 2;
        }
        else if (v31 >> 28)
        {
          v37 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v37 = v30;
          *(_DWORD *)(v37 + 8) = v31;
          v33 = 1;
          v30 = v37;
        }
        else
        {
          v33 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
          v30 = v31 << 36;
        }
        v18 = v30 | v33;
        LODWORD(v10) = v44;
        a4 = v48;
        a3 = v38;
        v11 = v40;
        a2 = (unint64_t *)v42;
      }
      *a2 = v18;
      v9 = v18;
      goto LABEL_7;
    }
  }
  v23 = v10 >> 2;
  v20 = *(unsigned int **)v16;
  v21 = 24 * v22;
  while (*v20 > v23 || v20[1] <= v23)
  {
    v20 += 6;
    v21 -= 24;
    if (!v21)
      goto LABEL_14;
  }
  v24 = v20[2];
  v25 = 4 * v24;
  if (((v24 >> 26) & 0xF) != 0)
  {
    v45 = v20;
    v49 = a4;
    v34 = a3;
    v35 = v13;
    v26 = WTF::fastMalloc((WTF *)0x10);
    v20 = v45;
    a4 = v49;
    a3 = v34;
    *(_QWORD *)v26 = v35;
    *(_DWORD *)(v26 + 8) = v25;
    v13 = 1;
  }
  else
  {
    v26 = v25 << 36;
  }
  v27 = v26 | v13;
  v28 = *a3;
  if ((*a3 & 1) != 0 && (v28 & 0xFFFFFFFF8) != 0)
  {
    v46 = v20;
    v50 = a4;
    v36 = a3;
    WTF::fastFree(v28 & 0xFFFFFFFF8, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v20 = v46;
    a4 = v50;
    a3 = v36;
  }
  *a3 = v27;
  *a4 = v20;
  return 1;
}

BOOL JSC::DFG::Graph::canDoFastSpread(JSC::DFG::Graph *this, JSC::DFG::Node *a2, const JSC::DFG::AbstractValue *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  _BOOL8 result;
  unint64_t v23;
  int v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  BOOL v28;
  _DWORD *v29;
  int v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  _DWORD *v34;
  int Concurrently;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;

  if (((*(_DWORD *)(*((_QWORD *)this + 3) + 16) - 1) & 0xFFFFFFFD) == 0)
    return 0;
  v8 = *((_QWORD *)a2 + 3);
  if ((v8 & 0xFC000000000000) != 0x30000000000000)
    return 0;
  if (*(_QWORD *)a3 == 4 || (*(_QWORD *)a3 & 2) != 0)
    return 0;
  v12 = *(_QWORD *)(v8 & 0xFF00FFFFFFFFFFFFLL);
  if ((v12 & 1) == 0)
  {
    v13 = *((_QWORD *)this + 4);
LABEL_10:
    v14 = (_QWORD *)(v12 & 0xFFFFFFFF8);
    v15 = 1;
    v16 = 1;
    goto LABEL_11;
  }
  v37 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 2) != 0
    || ((v38 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8), v38 != 0x3FFFFFFF) ? (v39 = v38 == -1) : (v39 = 1), v39))
  {
    v40 = 2;
  }
  else if (v38 >> 28)
  {
    v46 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v46 = v37;
    *(_DWORD *)(v46 + 8) = v38;
    v40 = 1;
    v37 = v46;
  }
  else
  {
    v40 = v37;
    v37 = 0;
  }
  v12 = v37 | v40;
  v13 = *((_QWORD *)this + 4);
  if ((v12 & 1) == 0)
    goto LABEL_10;
  v41 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 2) != 0
    || ((v42 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8), v42 != 0x3FFFFFFF) ? (v43 = v42 == -1) : (v43 = 1), v43))
  {
    v44 = 2;
  }
  else if (v42 >> 28)
  {
    v47 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v47 = v41;
    *(_DWORD *)(v47 + 8) = v42;
    v44 = 1;
    v41 = v47;
  }
  else
  {
    v44 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    v41 = 0;
  }
  v45 = v41 | v44;
  v14 = (_QWORD *)(v45 & 0xFFFFFFFF8);
  if ((v45 & 1) != 0)
  {
    v15 = 0;
    v16 = 0;
    v17 = (_QWORD *)*v14;
    goto LABEL_12;
  }
  v16 = 0;
  v15 = 1;
LABEL_11:
  v17 = v14;
LABEL_12:
  if (v17)
    v13 = v17[1];
  v18 = *(_QWORD *)(v13 + 8);
  if ((v15 & 1) == 0 && v14)
    WTF::fastFree((unint64_t)v14, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if ((v16 & 1) == 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v19 = *(_QWORD *)(v18 + 672);
  v20 = *(_QWORD *)a3;
  v21 = (unsigned int *)(*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v20 & 1) == 0)
  {
    if (v21)
    {
      if (*((_QWORD *)v21 + 5) != v18)
        return 0;
      result = 0;
      v33 = *((_QWORD *)v21 + 6);
      if (!v33 || v33 != v19)
        return result;
      if ((v21[4] & 3) != 0)
        return 0;
      v34 = *(_DWORD **)(*(_QWORD *)(*((_QWORD *)this + 2) + 41952) + 2712);
      v48 = 0;
      Concurrently = JSC::Structure::getConcurrently((uint64_t)v21, v34, &v48, a4, a5, a6, a7, a8);
      result = 0;
      if (Concurrently != -1)
        return result;
      if ((v21[2] & 0x20) != 0)
        return 0;
      v36 = *((_QWORD *)v21 + 5);
      if (v36)
      {
        v32 = *(_BYTE *)(*(_QWORD *)(v36 + 2048) + 4) == 2;
        return !v32;
      }
    }
    return 1;
  }
  if (!*v21)
    return 1;
  v23 = 0;
  v24 = 1;
  do
  {
    v25 = *(_QWORD *)&v21[2 * v23 + 2];
    if (*(_QWORD *)(v25 + 40) != v18
      || ((v27 = *(_QWORD *)(v25 + 48)) != 0 ? (v28 = v27 == v19) : (v28 = 0), !v28 || (*(_BYTE *)(v25 + 16) & 3) != 0))
    {
LABEL_24:
      v26 = 0;
      goto LABEL_25;
    }
    v29 = *(_DWORD **)(*(_QWORD *)(*((_QWORD *)this + 2) + 41952) + 2712);
    v49 = 0;
    v30 = JSC::Structure::getConcurrently(v25, v29, &v49, a4, a5, a6, a7, a8);
    v26 = 0;
    if (v30 == -1)
    {
      if ((*(_BYTE *)(v25 + 8) & 0x20) != 0)
        goto LABEL_24;
      v31 = *(_QWORD *)(v25 + 40);
      if (v31)
        v26 = *(unsigned __int8 *)(*(_QWORD *)(v31 + 2048) + 4) != 2;
      else
        v26 = 1;
    }
LABEL_25:
    v24 &= v26;
    ++v23;
  }
  while (v23 < *v21);
  v32 = v24 == 0;
  return !v32;
}

BOOL JSC::DFG::Graph::isNeverResizableOrGrowableSharedTypedArrayIncludingDataView(JSC::DFG::Graph *this, const JSC::DFG::AbstractValue *a2)
{
  unint64_t v2;
  unsigned int *v5;
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v2 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 2) != 0)
    return 0;
  if (v2 <= 4 && ((1 << v2) & 0x15) != 0)
    return 0;
  v5 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v2 & 1) != 0)
  {
    v7 = *v5;
    if ((_DWORD)v7)
    {
      v8 = (uint64_t *)(v5 + 2);
      v6 = 1;
      do
      {
        v9 = *v8++;
        if (*(_BYTE *)(16 * *(unsigned int *)(v9 + 76) + 0xF4))
          v6 = 0;
        --v7;
      }
      while (v7);
      return v6 != 0;
    }
    goto LABEL_16;
  }
  if (!v5)
  {
LABEL_16:
    v6 = 1;
    return v6 != 0;
  }
  v6 = *(_BYTE *)(16 * v5[19] + 0xF4) ^ 1;
  return v6 != 0;
}

void JSC::DFG::Graph::clearCPSCFGData(JSC::DFG::Graph *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;

  std::unique_ptr<JSC::DFG::NaturalLoops<JSC::DFG::CPSCFG>>::reset[abi:sn180100]((unint64_t *)this + 99, 0, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 24);
    if (v17)
    {
      *(_QWORD *)(v16 + 24) = 0;
      *(_DWORD *)(v16 + 32) = 0;
      WTF::fastFree(v17, v9, v10, v11, v12, v13, v14, v15);
    }
    v18 = *(unsigned int *)(v16 + 20);
    v19 = *(_QWORD *)(v16 + 8);
    if ((_DWORD)v18)
    {
      v20 = 40 * v18;
      do
      {
        v21 = *(_QWORD *)v19;
        if (*(_QWORD *)v19)
        {
          *(_QWORD *)v19 = 0;
          *(_DWORD *)(v19 + 8) = 0;
          WTF::fastFree(v21, v9, v10, v11, v12, v13, v14, v15);
        }
        v19 += 40;
        v20 -= 40;
      }
      while (v20);
      v19 = *(_QWORD *)(v16 + 8);
    }
    if (v19)
    {
      *(_QWORD *)(v16 + 8) = 0;
      *(_DWORD *)(v16 + 16) = 0;
      WTF::fastFree(v19, v9, v10, v11, v12, v13, v14, v15);
    }
    WTF::fastFree(v16, v9, v10, v11, v12, v13, v14, v15);
  }
  v22 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 88);
    if ((v23 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v23, v9, v10, v11, v12, v13, v14, v15);
    v24 = *(_QWORD *)(v22 + 8);
    if (v22 + 24 != v24 && v24 != 0)
    {
      *(_QWORD *)(v22 + 8) = 0;
      *(_DWORD *)(v22 + 16) = 0;
      WTF::fastFree(v24, v9, v10, v11, v12, v13, v14, v15);
    }
    WTF::fastFree(v22, v9, v10, v11, v12, v13, v14, v15);
  }
}

void JSC::DFG::Graph::freeDFGIRAfterLowering(JSC::DFG::Graph *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::DFG::BasicBlock **v10;
  uint64_t v11;
  JSC::DFG::BasicBlock *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::DFG::Graph *v21;
  JSC::DFG::Graph *v23;
  JSC::DFG::Graph *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t StatusReg;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;

  if (*((_DWORD *)this + 14))
  {
    v9 = *((unsigned int *)this + 15);
    if ((_DWORD)v9)
    {
      v10 = (JSC::DFG::BasicBlock **)*((_QWORD *)this + 6);
      v11 = 8 * v9;
      do
      {
        v12 = *v10;
        *v10 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 1)
          {
            JSC::DFG::BasicBlock::~BasicBlock(v12, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
          }
          else
          {
            --*(_DWORD *)v12;
          }
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
      *((_DWORD *)this + 15) = 0;
    }
    v21 = (JSC::DFG::Graph *)*((_QWORD *)this + 6);
    if ((JSC::DFG::Graph *)((char *)this + 64) != v21 && v21 != 0)
    {
      *((_QWORD *)this + 6) = 0;
      *((_DWORD *)this + 14) = 0;
      WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
      v21 = (JSC::DFG::Graph *)*((_QWORD *)this + 6);
    }
    if (!v21)
    {
      *((_QWORD *)this + 6) = (char *)this + 64;
      *((_DWORD *)this + 14) = 8;
    }
  }
  if (*((_DWORD *)this + 34))
  {
    if (*((_DWORD *)this + 35))
      *((_DWORD *)this + 35) = 0;
    v23 = (JSC::DFG::Graph *)*((_QWORD *)this + 16);
    if ((JSC::DFG::Graph *)((char *)this + 144) != v23)
    {
      if (!v23)
      {
LABEL_118:
        *((_QWORD *)this + 16) = (char *)this + 144;
        *((_DWORD *)this + 34) = 1;
        goto LABEL_22;
      }
      *((_QWORD *)this + 16) = 0;
      *((_DWORD *)this + 34) = 0;
      WTF::fastFree((unint64_t)v23, a2, a3, a4, a5, a6, a7, a8);
      v23 = (JSC::DFG::Graph *)*((_QWORD *)this + 16);
    }
    if (v23)
      goto LABEL_22;
    goto LABEL_118;
  }
LABEL_22:
  if (*((_DWORD *)this + 40))
  {
    if (*((_DWORD *)this + 41))
      *((_DWORD *)this + 41) = 0;
    v24 = (JSC::DFG::Graph *)*((_QWORD *)this + 19);
    if ((JSC::DFG::Graph *)((char *)this + 168) != v24 && v24)
    {
      *((_QWORD *)this + 19) = 0;
      *((_DWORD *)this + 40) = 0;
      WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
      v24 = (JSC::DFG::Graph *)*((_QWORD *)this + 19);
    }
    if (!v24)
    {
      *((_QWORD *)this + 19) = (char *)this + 168;
      *((_DWORD *)this + 40) = 16;
    }
  }
  if (*((_DWORD *)this + 264))
  {
    if (*((_DWORD *)this + 265))
      *((_DWORD *)this + 265) = 0;
    v25 = *((_QWORD *)this + 131);
    if (v25)
    {
      *((_QWORD *)this + 131) = 0;
      *((_DWORD *)this + 264) = 0;
      WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*((_DWORD *)this + 260))
  {
    v26 = *((unsigned int *)this + 261);
    if ((_DWORD)v26)
    {
      v27 = (unint64_t *)*((_QWORD *)this + 129);
      v28 = 8 * v26;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (1)
      {
        v30 = *v27;
        *v27 = 0;
        if (v30)
        {
          v31 = *(_QWORD *)(v30 + 8);
          if ((v31 & 1) != 0 && (v31 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v31 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
          v32 = *(_QWORD *)v30;
          if ((*(_QWORD *)v30 & 1) != 0 && (v32 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v32 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
          v33 = *(_QWORD *)(StatusReg + 752);
          if (v33)
          {
            if (!(v30 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v30 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v30)) & 1) != 0)
            {
LABEL_44:
              v34 = *(unsigned int *)(v33 + 8000);
              if (v34 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v33, v30, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v33 + 8 * v34) = v30 | 0x5000000000000;
                *(_DWORD *)(v33 + 8000) = v34 + 1;
              }
              goto LABEL_46;
            }
            if (v30 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v30 >> 24)
            {
              a4 = 0;
            }
            else
            {
              a4 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v30 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v30) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)a4 == 1)
                goto LABEL_44;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v33, v30, 1, a4, a5, a6, a7, a8);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v30, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
LABEL_46:
        ++v27;
        v28 -= 8;
        if (!v28)
        {
          *((_DWORD *)this + 261) = 0;
          break;
        }
      }
    }
    v35 = *((_QWORD *)this + 129);
    if (v35)
    {
      *((_QWORD *)this + 129) = 0;
      *((_DWORD *)this + 260) = 0;
      WTF::fastFree(v35, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v36 = *((_QWORD *)this + 93);
  if (v36)
  {
    *((_QWORD *)this + 93) = 0;
    WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<std::unique_ptr<JSC::FullBytecodeLiveness>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::deallocateTable(v36, (WTF *)a2, a3, a4, a5, a6, a7, a8);
  }
  v37 = *((_QWORD *)this + 94);
  if (v37)
  {
    *((_QWORD *)this + 94) = 0;
    WTF::fastFree(v37 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v38 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v38)
  {
    v39 = *(_QWORD *)(v38 + 24);
    if (v39)
    {
      *(_QWORD *)(v38 + 24) = 0;
      *(_DWORD *)(v38 + 32) = 0;
      WTF::fastFree(v39, a2, a3, a4, a5, a6, a7, a8);
    }
    v40 = *(unsigned int *)(v38 + 20);
    v41 = *(_QWORD *)(v38 + 8);
    if ((_DWORD)v40)
    {
      v42 = 40 * v40;
      do
      {
        v43 = *(_QWORD *)v41;
        if (*(_QWORD *)v41)
        {
          *(_QWORD *)v41 = 0;
          *(_DWORD *)(v41 + 8) = 0;
          WTF::fastFree(v43, a2, a3, a4, a5, a6, a7, a8);
        }
        v41 += 40;
        v42 -= 40;
      }
      while (v42);
      v41 = *(_QWORD *)(v38 + 8);
    }
    if (v41)
    {
      *(_QWORD *)(v38 + 8) = 0;
      *(_DWORD *)(v38 + 16) = 0;
      WTF::fastFree(v41, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v38, a2, a3, a4, a5, a6, a7, a8);
  }
  v44 = *((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v44)
  {
    v45 = *(unsigned int *)(v44 + 20);
    v46 = *(_QWORD *)(v44 + 8);
    if ((_DWORD)v45)
    {
      v47 = 32 * v45;
      do
      {
        v48 = *(_QWORD *)v46;
        if (*(_QWORD *)v46)
        {
          *(_QWORD *)v46 = 0;
          *(_DWORD *)(v46 + 8) = 0;
          WTF::fastFree(v48, a2, a3, a4, a5, a6, a7, a8);
        }
        v46 += 32;
        v47 -= 32;
      }
      while (v47);
      v46 = *(_QWORD *)(v44 + 8);
    }
    if (v46)
    {
      *(_QWORD *)(v44 + 8) = 0;
      *(_DWORD *)(v44 + 16) = 0;
      WTF::fastFree(v46, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v44, a2, a3, a4, a5, a6, a7, a8);
  }
  std::unique_ptr<JSC::DFG::NaturalLoops<JSC::DFG::CPSCFG>>::reset[abi:sn180100]((unint64_t *)this + 99, 0, a3, a4, a5, a6, a7, a8);
  std::unique_ptr<JSC::DFG::NaturalLoops<JSC::DFG::CFG>>::reset[abi:sn180100]((unint64_t *)this + 100, 0, v49, v50, v51, v52, v53, v54);
  v62 = *((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v62)
    WTF::fastFree(v62, v55, v56, v57, v58, v59, v60, v61);
  v63 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v63)
  {
    v64 = *(_QWORD *)(v63 + 88);
    if ((v64 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v64, v55, v56, v57, v58, v59, v60, v61);
    v65 = *(_QWORD *)(v63 + 8);
    if (v63 + 24 != v65 && v65)
    {
      *(_QWORD *)(v63 + 8) = 0;
      *(_DWORD *)(v63 + 16) = 0;
      WTF::fastFree(v65, v55, v56, v57, v58, v59, v60, v61);
    }
    WTF::fastFree(v63, v55, v56, v57, v58, v59, v60, v61);
  }
  v66 = *((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = 0;
  if (v66)
  {
    v67 = *(_QWORD *)(v66 + 88);
    if ((v67 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v67, v55, v56, v57, v58, v59, v60, v61);
    v68 = *(_QWORD *)(v66 + 8);
    if (v66 + 24 != v68 && v68)
    {
      *(_QWORD *)(v66 + 8) = 0;
      *(_DWORD *)(v66 + 16) = 0;
      WTF::fastFree(v68, v55, v56, v57, v58, v59, v60, v61);
    }
    WTF::fastFree(v66, v55, v56, v57, v58, v59, v60, v61);
  }
  v69 = *((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v69)
  {
    v70 = *(_QWORD *)(v69 + 24);
    if (v70)
    {
      *(_QWORD *)(v69 + 24) = 0;
      *(_DWORD *)(v69 + 32) = 0;
      WTF::fastFree(v70, v55, v56, v57, v58, v59, v60, v61);
    }
    v71 = *(unsigned int *)(v69 + 20);
    v72 = *(_QWORD *)(v69 + 8);
    if ((_DWORD)v71)
    {
      v73 = 40 * v71;
      do
      {
        v74 = *(_QWORD *)v72;
        if (*(_QWORD *)v72)
        {
          *(_QWORD *)v72 = 0;
          *(_DWORD *)(v72 + 8) = 0;
          WTF::fastFree(v74, v55, v56, v57, v58, v59, v60, v61);
        }
        v72 += 40;
        v73 -= 40;
      }
      while (v73);
      v72 = *(_QWORD *)(v69 + 8);
    }
    if (v72)
    {
      *(_QWORD *)(v69 + 8) = 0;
      *(_DWORD *)(v69 + 16) = 0;
      WTF::fastFree(v72, v55, v56, v57, v58, v59, v60, v61);
    }
    WTF::fastFree(v69, v55, v56, v57, v58, v59, v60, v61);
  }
  v75 = *((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = 0;
  if (v75)
    WTF::fastFree(v75, v55, v56, v57, v58, v59, v60, v61);
}

WTF *JSC::DFG::Graph::tryAddStringSearchTable8(JSC::DFG::Graph *this, WTF::StringImpl **a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  WTF **v14;
  int i;
  unsigned int v16;
  WTF **v17;
  WTF *v18;
  WTF::StringImpl *v20;
  _OWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  int8x16_t v32;
  unsigned int v33;
  int8x16_t v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;

  if (!*a2 || (*((_DWORD *)*a2 + 1) - 256) < 0xFFFFFF09)
    return 0;
  v9 = (uint64_t *)((char *)this + 376);
  v10 = *((_QWORD *)this + 47);
  if (v10
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)this + 47, 0, (uint64_t)a3, a4, a5, a6, a7, a8), (v10 = *v9) != 0))
  {
    v11 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    v11 = 0;
  }
  v12 = *((_DWORD *)*a2 + 4);
  if (v12 < 0x100)
    v13 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v13 = v12 >> 8;
  v14 = 0;
  for (i = 1; ; ++i)
  {
    v16 = v13 & v11;
    v17 = (WTF **)(v10 + 16 * (v13 & v11));
    v18 = *v17;
    if (*v17 == (WTF *)-1)
    {
      v14 = (WTF **)(v10 + 16 * v16);
      goto LABEL_14;
    }
    if (!v18)
      break;
    if (WTF::equal(v18, *a2, a3))
      return v17[1];
LABEL_14:
    v13 = i + v16;
  }
  if (v14)
  {
    *v14 = 0;
    v14[1] = 0;
    --*(_DWORD *)(*v9 - 16);
    v17 = v14;
  }
  v20 = *a2;
  if (*a2)
    *(_DWORD *)v20 += 2;
  *v17 = v20;
  v21 = (_OWORD *)WTF::fastMalloc((WTF *)0x100);
  v29 = *a2;
  if (*a2)
  {
    v30 = (unsigned __int8 *)*((_QWORD *)v29 + 1);
    v31 = *((unsigned int *)v29 + 1);
    if ((*((_BYTE *)v29 + 16) & 4) != 0)
    {
      if ((_DWORD)v31)
      {
        v32 = vdupq_n_s8(v31);
        v21[14] = v32;
        v21[15] = v32;
        v21[12] = v32;
        v21[13] = v32;
        v21[10] = v32;
        v21[11] = v32;
        v21[8] = v32;
        v21[9] = v32;
        v21[6] = v32;
        v21[7] = v32;
        v21[4] = v32;
        v21[5] = v32;
        v21[2] = v32;
        v21[3] = v32;
        *v21 = v32;
        v21[1] = v32;
        while (--v31)
        {
          v33 = *v30++;
          *((_BYTE *)v21 + v33) = v31;
        }
      }
    }
    else if ((_DWORD)v31)
    {
      v34 = vdupq_n_s8(v31);
      v21[14] = v34;
      v21[15] = v34;
      v21[12] = v34;
      v21[13] = v34;
      v21[10] = v34;
      v21[11] = v34;
      v21[8] = v34;
      v21[9] = v34;
      v21[6] = v34;
      v21[7] = v34;
      v21[4] = v34;
      v21[5] = v34;
      v21[2] = v34;
      v21[3] = v34;
      *v21 = v34;
      v21[1] = v34;
      while (--v31)
      {
        v35 = *v30;
        v30 += 2;
        *((_BYTE *)v21 + v35) = v31;
      }
    }
  }
  v36 = (unint64_t)v17[1];
  v17[1] = (WTF *)v21;
  if (v36)
    WTF::fastFree(v36, v22, v23, v24, v25, v26, v27, v28);
  v37 = *v9;
  if (*v9)
    v38 = *(_DWORD *)(v37 - 12) + 1;
  else
    v38 = 1;
  *(_DWORD *)(v37 - 12) = v38;
  v39 = *v9;
  if (*v9)
    v40 = *(_DWORD *)(v39 - 12);
  else
    v40 = 0;
  v41 = (*(_DWORD *)(v39 - 16) + v40);
  v42 = *(unsigned int *)(v39 - 4);
  if (v42 > 0x400)
  {
    if (v42 <= 2 * v41)
LABEL_40:
      v17 = (WTF **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v9, (uint64_t)v17, v23, v24, v25, v26, v27, v28);
  }
  else if (3 * v42 <= 4 * v41)
  {
    goto LABEL_40;
  }
  return v17[1];
}

uint64_t JSC::DFG::Prefix::dump(uint64_t this, WTF::PrintStream *a2)
{
  uint64_t v3;

  if (*(_BYTE *)(this + 25))
  {
    v3 = this;
    if (!*(_BYTE *)(this + 24))
    {
      if ((*(_DWORD *)(this + 8) & 0x80000000) != 0)
        WTF::PrintStream::printf(a2, "    ");
      else
        WTF::PrintStream::printf(a2, "%3d ");
      if ((*(_DWORD *)(v3 + 4) & 0x80000000) != 0)
        WTF::PrintStream::printf(a2, "   ");
      else
        WTF::PrintStream::printf(a2, "%2d ");
      if ((*(_DWORD *)v3 & 0x80000000) != 0)
        this = WTF::PrintStream::printf(a2, "  : ");
      else
        this = WTF::PrintStream::printf(a2, "%2d: ");
    }
    if (*(_QWORD *)(v3 + 16))
      return WTF::PrintStream::printf(a2, "%s", *(const char **)(v3 + 16));
  }
  return this;
}

uint64_t JSC::DFG::GraphSafepoint::GraphSafepoint(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v21;

  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a3;
  if (!*(_BYTE *)(a3 + 1))
  {
    __break(0xC471u);
    goto LABEL_14;
  }
  *(_WORD *)a3 = 0;
  v21 = a2;
  v8 = (_QWORD *)WTF::Vector<JSC::Scannable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, 1uLL, (unint64_t)&v21);
  v15 = *(unsigned int *)(a1 + 28);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v15) = *v8;
  v16 = *(unsigned __int8 *)(a1 + 32);
  *(_DWORD *)(a1 + 28) = v15 + 1;
  if (v16)
  {
    __break(0xC471u);
    JUMPOUT(0x1983D9690);
  }
  *(_BYTE *)(a1 + 32) = 1;
  *(_BYTE *)(a1 + 33) = a4;
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
  if (!v17)
    return a1;
  if (*(_QWORD *)(v17 + 64))
  {
    __break(0xC471u);
LABEL_14:
    JUMPOUT(0x1983D9670);
  }
  *(_QWORD *)(v17 + 64) = a1;
  v18 = (unsigned __int8 *)(v17 + 46);
  v19 = __ldxr((unsigned __int8 *)(v17 + 46));
  if (v19 == 1)
  {
    if (!__stlxr(0, v18))
      return a1;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v18, 1, v9, v10, v11, v12, v13, v14);
  return a1;
}

void JSC::DFG::GraphSafepoint::~GraphSafepoint(JSC::DFG::GraphSafepoint *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v12;

  if (!*((_BYTE *)this + 32))
    goto LABEL_12;
  v9 = *(_QWORD *)(*((_QWORD *)this + 1) + 48);
  if (!v9)
    goto LABEL_9;
  if (*(JSC::DFG::GraphSafepoint **)(v9 + 64) != this)
  {
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x1983D974CLL);
  }
  v10 = (unsigned __int8 *)(v9 + 46);
  if (__ldaxr((unsigned __int8 *)(v9 + 46)))
  {
    __clrex();
LABEL_7:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
    goto LABEL_8;
  }
  if (__stxr(1u, v10))
    goto LABEL_7;
LABEL_8:
  *(_QWORD *)(v9 + 64) = 0;
LABEL_9:
  v12 = *((_QWORD *)this + 2);
  if (v12)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t StatusReg;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t casual;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;

  v8 = *(unsigned int *)(result + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v11 = (unint64_t)a2;
  else
    v11 = v10;
  if (v11 <= v8)
    return 1;
  if (!(v11 >> 27))
  {
    v12 = result;
    v13 = *(_QWORD *)result;
    v14 = *(unsigned int *)(result + 12);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v16 = *(_QWORD *)(StatusReg + 752);
    if (v16)
    {
      v17 = (32 * v11) | 0xF;
      if (v17 <= 0x1AF)
      {
        v18 = 46 * v11 + 7;
      }
      else
      {
        if (v17 >> 5 > 0x138)
          goto LABEL_13;
        v18 = *((unsigned int *)&bmalloc_common_primitive_heap_support + 2 * v11 + 626);
        if (*(_DWORD *)(v16 + 8052) <= v18)
          goto LABEL_13;
      }
      v20 = v16 + 8 * v18;
      v21 = v20 + 8064;
      *(_BYTE *)(v20 + 8064) = 1;
      v22 = *(unsigned int *)(v20 + 8080);
      if ((_DWORD)v22)
      {
        *(_DWORD *)(v21 + 16) = v22 - *(_DWORD *)(v21 + 20);
        casual = *(_QWORD *)(v21 + 8) - v22;
      }
      else
      {
        v32 = *(_QWORD *)(v21 + 40);
        v33 = *(_QWORD *)(v21 + 24);
        if (!v32)
        {
          if (*(_BYTE *)(v21 + 5) == 6)
          {
            v35 = *(unsigned int *)(v21 + 32);
            v36 = *(_DWORD *)(v21 + 36);
            if (v35 < v36)
            {
              *(_QWORD *)(v21 + 8 * v35 + 56) = 0;
              v37 = (unint64_t *)(8 * v18 + 8 * v35 + v16 + 8128);
              v38 = v36 - 1 - v35;
              while (v38)
              {
                v33 += 1024;
                v40 = *v37++;
                v39 = v40;
                LODWORD(v35) = v35 + 1;
                --v38;
                if (v40)
                {
                  v32 = __rbit64(v39);
                  *(_DWORD *)(v21 + 32) = v35;
                  *(_QWORD *)(v21 + 24) = v33;
                  goto LABEL_40;
                }
              }
              *(_DWORD *)(v21 + 32) = v36;
            }
          }
          *(_BYTE *)v21 = 0;
          goto LABEL_13;
        }
LABEL_40:
        v34 = __clz(v32);
        *(_QWORD *)(v21 + 40) = v32 & ~(0x8000000000000000 >> v34);
        casual = v33 + 16 * v34;
      }
      *(_BYTE *)v21 = 0;
LABEL_18:
      *(_DWORD *)(v12 + 8) = v11;
      *(_QWORD *)v12 = casual;
      if ((_DWORD)v14)
      {
        v23 = 32 * v14;
        v24 = v13;
        do
        {
          *(_QWORD *)casual = 0;
          v25 = *(_QWORD *)v24;
          if ((*(_QWORD *)v24 & 1) == 0 || v25 == 4)
          {
            v26 = v25 & 0xFFFFFFFFFFFFFFFDLL;
            *(_QWORD *)casual = v26;
          }
          else
          {
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)casual, (_QWORD *)v24);
            v26 = *(_QWORD *)casual;
          }
          v27 = v26 & 0xFFFFFFFFFFFFFFFDLL;
          v28 = v26 | 2;
          if ((*(_BYTE *)v24 & 2) == 0)
            v28 = v27;
          *(_QWORD *)casual = v28;
          v29 = *(_OWORD *)(v24 + 8);
          *(_QWORD *)(casual + 24) = *(_QWORD *)(v24 + 24);
          *(_OWORD *)(casual + 8) = v29;
          if ((*(_QWORD *)v24 & 1) != 0)
            WTF::fastFree(*(_QWORD *)v24 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
          casual += 32;
          v24 += 32;
          v23 -= 32;
        }
        while (v23);
      }
      if (!v13)
        return 1;
      if (*(_QWORD *)v12 == v13)
      {
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
      }
      v30 = *(_QWORD *)(StatusReg + 752);
      if (v30)
      {
        if (!(v13 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v13 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v13)) & 1) != 0)
        {
          goto LABEL_36;
        }
        if (v13 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v13 >> 24)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v13 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v13) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 == 1)
          {
LABEL_36:
            v31 = *(unsigned int *)(v30 + 8000);
            if (v31 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v30, v13, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v30 + 8 * v31) = v13 | 0x5000000000000;
              *(_DWORD *)(v30 + 8000) = v31 + 1;
            }
            return 1;
          }
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v30, v13, 1, a4, a5, a6, a7, a8);
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v13, (uint64_t)&bmalloc_heap_config, 1);
      }
      return 1;
    }
LABEL_13:
    casual = bmalloc_allocate_casual(32 * v11, 1);
    goto LABEL_18;
  }
  __break(0xC471u);
  return result;
}

void std::default_delete<JSC::DFG::FlowMap<JSC::DFG::AbstractValue>>::operator()[abi:sn180100](WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v9 = *((unsigned int *)this + 9);
  v10 = (_QWORD *)*((_QWORD *)this + 3);
  if ((_DWORD)v9)
  {
    v11 = 32 * v9;
    do
    {
      if ((*v10 & 1) != 0)
        WTF::fastFree(*v10 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v10 += 4;
      v11 -= 32;
    }
    while (v11);
    v10 = (_QWORD *)*((_QWORD *)this + 3);
  }
  if (v10)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *((unsigned int *)this + 5);
  v13 = (_QWORD *)*((_QWORD *)this + 1);
  if ((_DWORD)v12)
  {
    v14 = 32 * v12;
    do
    {
      if ((*v13 & 1) != 0)
        WTF::fastFree(*v13 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v13 += 4;
      v14 -= 32;
    }
    while (v14);
    v13 = (_QWORD *)*((_QWORD *)this + 1);
  }
  if (v13)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void std::unique_ptr<JSC::DFG::NaturalLoops<JSC::DFG::CFG>>::reset[abi:sn180100](unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v8 = *a1;
  *a1 = (unint64_t)a2;
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 312);
    if (v9)
    {
      *(_QWORD *)(v8 + 312) = 0;
      *(_DWORD *)(v8 + 320) = 0;
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
    v10 = *(unsigned int *)(v8 + 20);
    v11 = *(_QWORD *)(v8 + 8);
    if ((_DWORD)v10)
    {
      v12 = 72 * v10;
      v13 = v11 + 32;
      do
      {
        v14 = *(_QWORD *)(v13 - 16);
        if (v13 != v14 && v14 != 0)
        {
          *(_QWORD *)(v13 - 16) = 0;
          *(_DWORD *)(v13 - 8) = 0;
          WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
        }
        v13 += 72;
        v12 -= 72;
      }
      while (v12);
      v11 = *(_QWORD *)(v8 + 8);
    }
    if (v8 + 24 != v11 && v11 != 0)
    {
      *(_QWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 16) = 0;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
  }
}

void std::unique_ptr<JSC::DFG::NaturalLoops<JSC::DFG::CPSCFG>>::reset[abi:sn180100](unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v8 = *a1;
  *a1 = (unint64_t)a2;
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 472);
    if (v9)
    {
      *(_QWORD *)(v8 + 472) = 0;
      *(_DWORD *)(v8 + 480) = 0;
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
    v10 = *(unsigned int *)(v8 + 20);
    v11 = *(_QWORD *)(v8 + 8);
    if ((_DWORD)v10)
    {
      v12 = 112 * v10;
      v13 = v11 + 40;
      do
      {
        v14 = *(_QWORD *)(v13 - 16);
        if (v13 != v14 && v14 != 0)
        {
          *(_QWORD *)(v13 - 16) = 0;
          *(_DWORD *)(v13 - 8) = 0;
          WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
        }
        v13 += 112;
        v12 -= 112;
      }
      while (v12);
      v11 = *(_QWORD *)(v8 + 8);
    }
    if (v8 + 24 != v11 && v11 != 0)
    {
      *(_QWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 16) = 0;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
  }
}

void WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<std::unique_ptr<JSC::FullBytecodeLiveness>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::deallocateTable(uint64_t a1, WTF *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  WTF **v9;
  uint64_t v10;
  WTF **v11;
  uint64_t v12;

  v8 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v8)
  {
    v9 = (WTF **)(a1 + 8);
    do
    {
      if (*(v9 - 1) != (WTF *)-1)
      {
        a2 = *v9;
        *v9 = 0;
        if (a2)
        {
          v12 = a1;
          v10 = v8;
          v11 = v9;
          std::default_delete<JSC::FullBytecodeLiveness>::operator()[abi:sn180100]((int)v9, a2, a3, a4, a5, a6, a7, a8);
          v8 = v10;
          v9 = v11;
          a1 = v12;
        }
      }
      v9 += 2;
      --v8;
    }
    while (v8);
  }
  WTF::fastFree(a1 - 16, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v9)
  {
    v10 = a1;
    do
    {
      v11 = *(WTF::StringImpl **)v10;
      if (*(_QWORD *)v10 != -1)
      {
        v12 = *(_QWORD *)(v10 + 8);
        *(_QWORD *)(v10 + 8) = 0;
        if (v12)
        {
          WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
          v11 = *(WTF::StringImpl **)v10;
        }
        *(_QWORD *)v10 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
          {
            WTF::StringImpl::~StringImpl(v11, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
          }
          else
          {
            *(_DWORD *)v11 -= 2;
          }
        }
      }
      v10 += 16;
      --v9;
    }
    while (v9);
  }
  WTF::fastFree(a1 - 16, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Vector<JSC::DFG::BasicBlock *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v7 = *(const void **)a1;
    v8 = *(unsigned int *)(a1 + 12);
    if (v5 < 0x11)
    {
      v9 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
    }
    else
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
    }
    memcpy(v9, v7, 8 * v8);
    if ((const void *)(a1 + 16) != v7 && v7)
    {
      if (*(const void **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

__n128 WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::SingleRootGraphNode<JSC::DFG::CFG>&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v9;
  __n128 result;

  v9 = (__n128 *)WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  result = *v9;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v9;
  return result;
}

uint64_t WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  v15 = *(unsigned int *)(result + 12);
  if (v14 < 0x11)
  {
    v16 = (_OWORD *)(result + 16);
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 16;
    goto LABEL_12;
  }
  if (!(v14 >> 28))
  {
    v16 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v14));
    *(_DWORD *)(v9 + 8) = v14;
    *(_QWORD *)v9 = v16;
LABEL_12:
    if ((_DWORD)v15)
    {
      v17 = 16 * v15;
      v18 = (__int128 *)v10;
      do
      {
        v19 = *v18++;
        *v16++ = v19;
        v17 -= 16;
      }
      while (v17);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v11 = (unint64_t)a2;
  else
    v11 = v10;
  if (v11 > v8)
  {
    v13 = *(_QWORD *)a1;
    v14 = *(unsigned int *)(a1 + 12);
    if (v11 < 0x11)
    {
      v15 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
    }
    else
    {
      if (v11 >> 28)
      {
        __break(0xC471u);
        return;
      }
      v15 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v11));
      *(_DWORD *)(a1 + 8) = v11;
      *(_QWORD *)a1 = v15;
    }
    if ((_DWORD)v14)
    {
      v16 = 16 * v14;
      v17 = (__int128 *)v13;
      do
      {
        v18 = *v17++;
        *v15++ = v18;
        v16 -= 16;
      }
      while (v16);
    }
    if (a1 + 16 != v13 && v13)
    {
      if (*(_QWORD *)a1 == v13)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void WTF::SingleRootGraph<JSC::DFG::CFG>::successors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t v26;
  _OWORD *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  if (!(_BYTE)a4)
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 4;
    v9 = *(unsigned int *)(a3 + 220);
    if ((_DWORD)v9)
    {
      v10 = 8 * v9;
      while (1)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(a3 + 208) - 8 + v10);
        v12 = *(unsigned __int16 *)(v11 + 18);
        if ((v12 - 364) < 0xC)
          break;
        if ((v12 - 28) < 2 || (v12 - 23) <= 2)
        {
          v10 -= 8;
          if (v10)
            continue;
        }
        goto LABEL_7;
      }
    }
    else
    {
LABEL_7:
      v11 = 0;
    }
    v13 = 1;
    switch(*(_WORD *)(v11 + 18))
    {
      case 0x16C:
        goto LABEL_10;
      case 0x16D:
        v13 = 2;
        goto LABEL_10;
      case 0x16E:
        v13 = *(_DWORD *)(*(_QWORD *)(v11 + 72) + 12) + 1;
        goto LABEL_37;
      case 0x16F:
        v13 = *(_DWORD *)(*(_QWORD *)(v11 + 72) + 12);
LABEL_37:
        if (!v13)
          return;
LABEL_10:
        v14 = 0;
        v15 = 0;
        v16 = (uint64_t *)(v11 + 72);
        break;
      default:
        return;
    }
    while (1)
    {
      v17 = *(unsigned __int16 *)(v11 + 18);
      if (v17 == 366)
      {
        v23 = (_QWORD *)*v16;
        v24 = *(_DWORD *)(*v16 + 12);
        if (v24 <= v14)
        {
          if (v24 != v14)
          {
            __break(0xC471u);
            JUMPOUT(0x1983DA2F4);
          }
          v18 = v23 + 2;
          goto LABEL_19;
        }
        v19 = *v23 + 32 * v15;
      }
      else
      {
        if (v17 == 367)
        {
          if (*(_DWORD *)(*v16 + 12) <= v14)
          {
            __break(0xC471u);
            JUMPOUT(0x1983DA344);
          }
          v18 = (uint64_t *)(*(_QWORD *)*v16 + 8 * v15);
          goto LABEL_19;
        }
        if (!v14)
        {
          v18 = (uint64_t *)(v11 + 72);
          if (v17 != 364)
            v18 = (uint64_t *)*v16;
          goto LABEL_19;
        }
        if (v14 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1983DA33CLL);
        }
        v19 = *v16;
      }
      v18 = (uint64_t *)(v19 + 16);
LABEL_19:
      v20 = *v18;
      v31 = v20;
      v21 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v21 == *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>(a1, &v31, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        v22 = *(_QWORD *)a1 + 16 * v21;
        *(_QWORD *)v22 = v20;
        *(_BYTE *)(v22 + 8) = 0;
        *(_DWORD *)(a1 + 12) = v21 + 1;
      }
      v14 = v15 + 1;
      v15 = (v15 + 1);
      if (v13 == v14)
        return;
    }
  }
  v26 = *(unsigned int *)(a2 + 20);
  v27 = (_OWORD *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 4;
  *(_DWORD *)(a1 + 12) = v26;
  if (v26 >= 5)
  {
    if (v26 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1983DA34CLL);
    }
    v27 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v26));
    *(_DWORD *)(a1 + 8) = v26;
    *(_QWORD *)a1 = v27;
    v26 = *(unsigned int *)(a2 + 20);
  }
  if ((_DWORD)v26)
  {
    v28 = *(__int128 **)(a2 + 8);
    v29 = 16 * v26;
    do
    {
      v30 = *v28++;
      *v27++ = v30;
      v29 -= 16;
    }
    while (v29);
  }
}

void WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  unint64_t v22;

  v10 = *(unsigned int *)(a1 + 8);
  v11 = *(unsigned int *)(a1 + 12);
  v12 = v10 + (v10 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= v11 + 1)
    v14 = v11 + 1;
  else
    v14 = v13;
  v15 = *(_QWORD *)a1;
  if (v14 <= v10)
  {
LABEL_18:
    v20 = *(unsigned int *)(a1 + 12);
    v21 = v20 + 1;
    v22 = v15 + 16 * v20;
    *(_QWORD *)v22 = *a2;
    *(_BYTE *)(v22 + 8) = 0;
    *(_DWORD *)(a1 + 12) = v21;
    return;
  }
  if (v14 < 5)
  {
    v16 = (_OWORD *)(a1 + 16);
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 4;
    goto LABEL_11;
  }
  if (!(v14 >> 28))
  {
    v16 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v14));
    *(_DWORD *)(a1 + 8) = v14;
    *(_QWORD *)a1 = v16;
LABEL_11:
    if ((_DWORD)v11)
    {
      v17 = 16 * v11;
      v18 = (__int128 *)v15;
      do
      {
        v19 = *v18++;
        *v16++ = v19;
        v17 -= 16;
      }
      while (v17);
      v16 = *(_OWORD **)a1;
    }
    if (a1 + 16 != v15 && v15)
    {
      if (v16 == (_OWORD *)v15)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
      v15 = *(_QWORD *)a1;
    }
    else
    {
      v15 = (unint64_t)v16;
    }
    goto LABEL_18;
  }
  __break(0xC471u);
}

void WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v11 = (unint64_t)a2;
  else
    v11 = v10;
  if (v11 > v8)
  {
    v13 = *(_QWORD *)a1;
    v14 = *(unsigned int *)(a1 + 12);
    if (v11 < 5)
    {
      v15 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
    }
    else
    {
      if (v11 >> 28)
      {
        __break(0xC471u);
        return;
      }
      v15 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v11));
      *(_DWORD *)(a1 + 8) = v11;
      *(_QWORD *)a1 = v15;
    }
    if ((_DWORD)v14)
    {
      v16 = 16 * v14;
      v17 = (__int128 *)v13;
      do
      {
        v18 = *v17++;
        *v15++ = v18;
        v16 -= 16;
      }
      while (v16);
    }
    if (a1 + 16 != v13 && v13)
    {
      if (*(_QWORD *)a1 == v13)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  v15 = *(unsigned int *)(result + 12);
  if (v14 < 5)
  {
    v16 = (_OWORD *)(result + 16);
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 4;
    goto LABEL_12;
  }
  if (!(v14 >> 28))
  {
    v16 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v14));
    *(_DWORD *)(v9 + 8) = v14;
    *(_QWORD *)v9 = v16;
LABEL_12:
    if ((_DWORD)v15)
    {
      v17 = 16 * v15;
      v18 = (__int128 *)v10;
      do
      {
        v19 = *v18++;
        *v16++ = v19;
        v17 -= 16;
      }
      while (v17);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::NaturalLoops<JSC::DFG::CFG>::loopsOf(_QWORD *result, uint64_t a2, unsigned int a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  *result = 0;
  result[1] = 0;
  if (*(_DWORD *)(a2 + 324) <= a3)
  {
    __break(0xC471u);
    goto LABEL_17;
  }
  v4 = *(_DWORD *)(*(_QWORD *)(a2 + 312) + 8 * a3);
  if (v4 != -1)
  {
    if (*(_DWORD *)(a2 + 20) <= v4)
    {
      __break(0xC471u);
      JUMPOUT(0x1983DA75CLL);
    }
    v5 = *(_QWORD *)(a2 + 8);
    v6 = v5 + 72 * v4;
    v11 = v6;
    if (v5)
    {
      v7 = (uint64_t)result;
      LODWORD(v8) = 0;
      while (1)
      {
        if ((_DWORD)v8 == *(_DWORD *)(v7 + 8))
        {
          result = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v8 + 1, (unint64_t)&v11);
          v8 = *(unsigned int *)(v7 + 12);
          *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = *result;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = v6;
        }
        LODWORD(v8) = v8 + 1;
        *(_DWORD *)(v7 + 12) = v8;
        v9 = *(_DWORD *)(v11 + 64);
        if (v9 == -1)
          return result;
        if (*(_DWORD *)(a2 + 20) <= v9)
          break;
        v10 = *(_QWORD *)(a2 + 8);
        v6 = v10 + 72 * v9;
        v11 = v6;
        if (!v10)
          return result;
      }
      __break(0xC471u);
LABEL_17:
      JUMPOUT(0x1983DA754);
    }
  }
  return result;
}

char *WTF::NaturalLoops<JSC::DFG::CPSCFG>::loopsOf(char *result, uint64_t a2, uint64_t a3, char a4)
{
  char *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;

  v5 = result;
  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  if (a4)
  {
    v7 = (unsigned int *)(a2 + 488);
  }
  else
  {
    v6 = *(unsigned int *)(a3 + 8);
    if (*(_DWORD *)(a2 + 484) <= v6)
    {
      __break(0xC471u);
      goto LABEL_20;
    }
    v7 = (unsigned int *)(*(_QWORD *)(a2 + 472) + 8 * v6);
  }
  v8 = *v7;
  if (v8 != -1)
  {
    if (*(_DWORD *)(a2 + 20) <= v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1983DA878);
    }
    v9 = *(_QWORD *)(a2 + 8);
    v10 = v9 + 112 * v8;
    v15 = v10;
    if (v9)
    {
      v11 = 0;
      LODWORD(v12) = 0;
      while (1)
      {
        if ((_DWORD)v12 == *((_DWORD *)v5 + 2))
        {
          result = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v5, v12 + 1, (unint64_t)&v15);
          v12 = *((unsigned int *)v5 + 3);
          v11 = *(char **)v5;
          *(_QWORD *)(*(_QWORD *)v5 + 8 * v12) = *(_QWORD *)result;
        }
        else
        {
          *(_QWORD *)&v11[8 * v12] = v10;
        }
        LODWORD(v12) = v12 + 1;
        *((_DWORD *)v5 + 3) = v12;
        v13 = *(_DWORD *)(v15 + 104);
        if (v13 == -1)
          return result;
        if (*(_DWORD *)(a2 + 20) <= v13)
          break;
        v14 = *(_QWORD *)(a2 + 8);
        v10 = v14 + 112 * v13;
        v15 = v10;
        if (!v14)
          return result;
      }
      __break(0xC471u);
LABEL_20:
      JUMPOUT(0x1983DA870);
    }
  }
  return result;
}

void std::default_delete<JSC::FullBytecodeLiveness>::operator()[abi:sn180100](int a1, WTF *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;

  if (this)
  {
    v9 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v9)
    {
      v11 = (unint64_t *)(v9 + 2);
      v10 = *v9;
      if ((_DWORD)v10)
      {
        v12 = 16 * v10;
        do
        {
          if (*v11)
            WTF::fastFree(*v11, this, a3, a4, a5, a6, a7, a8);
          v11 += 2;
          v12 -= 16;
        }
        while (v12);
      }
      WTF::fastFree((unint64_t)v9, this, a3, a4, a5, a6, a7, a8);
    }
    v13 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v13)
    {
      v15 = (unint64_t *)(v13 + 2);
      v14 = *v13;
      if ((_DWORD)v14)
      {
        v16 = 16 * v14;
        do
        {
          if (*v15)
            WTF::fastFree(*v15, this, a3, a4, a5, a6, a7, a8);
          v15 += 2;
          v16 -= 16;
        }
        while (v16);
      }
      WTF::fastFree((unint64_t)v13, this, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree((unint64_t)this, this, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t WTF::dataLog<char const*,char [2],int,char [5],char const*,char [2]>(const char **a1, const char *a2, _DWORD *a3, const char *a4, const char **a5, const char *a6)
{
  unint64_t v12;
  uint64_t v13;
  WTF::PrintStream *v14;
  char v16;
  char **v17;
  char *v18;

  v12 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v12 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v13 = WTF::s_file;
  v14 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v14, "%s", *a1);
  WTF::PrintStream::printf(v14, "%s", a2);
  WTF::PrintStream::printf(v14, "%d", *a3);
  WTF::PrintStream::printf(v14, "%s", a4);
  WTF::PrintStream::printf(v14, "%s", *a5);
  WTF::PrintStream::printf(v14, "%s", a6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
}

uint64_t WTF::SingleRootGraph<JSC::DFG::CFG>::SingleRootGraph(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  WTF::BitVector *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)(a1 + 8) = a1 + 24;
  v9 = a1 + 8;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 16) = 4;
  *(_QWORD *)(a1 + 88) = 0x8000000000000000;
  v10 = (WTF::BitVector *)(a1 + 88);
  v27 = 0;
  v28 = 0;
  v11 = *(unsigned int *)(*(_QWORD *)a2 + 140);
  if ((_DWORD)v11)
  {
    LODWORD(v12) = 0;
    v13 = *(uint64_t **)(*(_QWORD *)a2 + 128);
    v14 = 8 * v11;
    do
    {
      v15 = *v13;
      v29 = *v13;
      if ((_DWORD)v12 == (_DWORD)v28)
      {
        v16 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v27, v12 + 1, (unint64_t)&v29);
        LODWORD(v12) = HIDWORD(v28);
        *((_QWORD *)v27 + HIDWORD(v28)) = *v16;
      }
      else
      {
        *((_QWORD *)v27 + v12) = v15;
      }
      v12 = (v12 + 1);
      HIDWORD(v28) = v12;
      ++v13;
      v14 -= 8;
    }
    while (v14);
    v17 = v27;
    if ((_DWORD)v12)
    {
      v18 = 8 * v12;
      do
      {
        v19 = *(_QWORD *)v17;
        v29 = *(_QWORD *)v17;
        v20 = *(unsigned int *)(a1 + 20);
        if ((_DWORD)v20 == *(_DWORD *)(a1 + 16))
        {
          WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>(v9, &v29, a3, a4, a5, a6, a7, a8);
        }
        else
        {
          v21 = *(_QWORD *)(a1 + 8) + 16 * v20;
          *(_QWORD *)v21 = v19;
          *(_BYTE *)(v21 + 8) = 0;
          *(_DWORD *)(a1 + 20) = v20 + 1;
        }
        v22 = *(unsigned int *)(v19 + 8);
        v23 = *(_QWORD *)v10;
        if ((*(_QWORD *)v10 & 0x8000000000000000) != 0)
          v24 = 63;
        else
          v24 = *(_QWORD *)(2 * v23);
        if (v24 <= v22)
        {
          WTF::BitVector::resizeOutOfLine(v10, v22 + 1, 0);
          v23 = *(_QWORD *)v10;
        }
        if (v23 >= 0)
          v25 = 2 * v23 + 8;
        else
          v25 = (uint64_t)v10;
        *(_QWORD *)(v25 + ((v22 >> 3) & 0x1FFFFFF8)) |= 1 << v22;
        v17 = (WTF *)((char *)v17 + 8);
        v18 -= 8;
      }
      while (v18);
      v17 = v27;
    }
    if (v17)
    {
      v27 = 0;
      LODWORD(v28) = 0;
      WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

uint64_t ***WTF::Dominators<JSC::DFG::CPSCFG>::Dominators(uint64_t ***a1, uint64_t **a2, int a3)
{
  uint64_t ***v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t **v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t **v51;
  int v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t *v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t **v69;
  int v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t *v75;
  unsigned int v76;
  uint64_t v77;
  _OWORD *v78;
  __int128 *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  _OWORD *v83;
  __int128 *v84;
  uint64_t v85;
  __int128 v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t **v97;
  int v98;
  uint64_t *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t *v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  _OWORD *v109;
  __int128 *v110;
  uint64_t v111;
  __int128 v112;
  unint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  BOOL v123;
  __int128 *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  void *v135;
  unint64_t v136;
  _QWORD **v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  __int128 *v149;
  uint64_t *v150;
  unsigned int *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unsigned int v155;
  char *v156;
  uint64_t v157;
  int v158;
  BOOL v159;
  uint64_t *v160;
  uint64_t *v161;
  unsigned int v162;
  uint64_t *v163;
  unsigned int v164;
  uint64_t *v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  int v170;
  uint64_t *v171;
  unsigned int v172;
  int v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  unsigned int v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  __int128 *v182;
  uint64_t v183;
  uint64_t *v184;
  unsigned int v185;
  int v186;
  uint64_t *v187;
  unsigned int v188;
  uint64_t v189;
  unint64_t *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  WTF *v197;
  char *v198;
  uint64_t v199;
  int v200;
  BOOL v201;
  uint64_t *v202;
  uint64_t *v203;
  unsigned int v204;
  char *v205;
  uint64_t *v206;
  uint64_t *v207;
  unsigned int v208;
  _QWORD *v209;
  uint64_t v210;
  unsigned int v211;
  int v212;
  uint64_t *v213;
  unsigned int v214;
  int v215;
  unint64_t v216;
  uint64_t *v217;
  unsigned int v218;
  unint64_t v219;
  BOOL v220;
  BOOL v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t *v225;
  unsigned int v226;
  unint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  uint64_t ***v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unsigned int v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  BOOL v243;
  uint64_t v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  __int128 v248;
  __int128 *v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  BOOL v262;
  uint64_t v263;
  int v264;
  int v265;
  uint64_t ***v266;
  _QWORD *v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  int v274;
  uint64_t v275;
  unsigned int v276;
  uint64_t v277;
  unsigned int v278;
  __int128 v279;
  unint64_t v280;
  uint64_t v281;
  unsigned int v282;
  uint64_t v283;
  __int128 *v284;
  uint64_t v285;
  __int128 v286;
  unint64_t v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  WTF *v295;
  WTF *v296;
  unint64_t v297;
  uint64_t v298;
  char *v299;
  unint64_t StatusReg;
  uint64_t v301;
  uint64_t v302;
  uint64_t *v304;
  unsigned int v305;
  _QWORD *v306;
  uint64_t v307;
  _OWORD *v308;
  _OWORD *v309;
  uint64_t ***v310;
  uint64_t v311;
  void *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t **v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unsigned int v324;
  int v325;
  uint64_t v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unsigned int v334;
  char v335;
  int v336;
  uint64_t v337;
  uint64_t v338;
  BOOL v339;
  char v340;
  uint64_t v341;
  unsigned int v342;
  unsigned int v343;
  uint64_t v344;
  unsigned int v345;
  BOOL v346;
  uint64_t v347;
  uint64_t v348;
  unsigned int v349;
  BOOL v350;
  uint64_t v351;
  uint64_t v352;
  unsigned int v353;
  unsigned int v354;
  uint64_t v355;
  unsigned int v356;
  _BOOL4 v357;
  unsigned int v358;
  unsigned int v359;
  uint64_t v360;
  unsigned int v361;
  unsigned int v362;
  uint64_t v363;
  unsigned int v364;
  uint64_t v365;
  unsigned int v366;
  unsigned int v367;
  uint64_t v368;
  unsigned int v369;
  uint64_t v370;
  unint64_t *v371;
  uint64_t *v372;
  unsigned int v373;
  _BYTE *v374;
  int v375;
  uint64_t *v376;
  unsigned int v377;
  unint64_t v378;
  int v379;
  uint64_t *v380;
  unsigned int v381;
  unsigned int v382;
  uint64_t *v383;
  unsigned int v384;
  uint64_t *v385;
  unsigned int v386;
  uint64_t v387;
  uint64_t v388;
  unint64_t *v389;
  uint64_t *v390;
  unsigned int v391;
  _BYTE *v392;
  int v393;
  uint64_t *v394;
  unsigned int v395;
  unint64_t v396;
  int v397;
  uint64_t *v398;
  unsigned int v399;
  unsigned int v400;
  uint64_t *v401;
  unsigned int v402;
  uint64_t *v403;
  unsigned int v404;
  uint64_t v405;
  int v406;
  int v407;
  uint64_t v408;
  char v409;
  uint64_t v410;
  _QWORD *v411;
  void *v413;
  _QWORD **v414;
  WTF *v415;
  unsigned int v416;
  uint64_t v417;
  char v418;
  uint64_t v419;
  uint64_t v420;
  char v421;
  unint64_t v422;
  uint64_t v423;
  WTF *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  WTF *v428;
  uint64_t v429;
  _DWORD v430[2];
  __int128 v431;
  __int128 v432;
  uint64_t v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  _QWORD v437[2];
  unsigned int v438;
  uint64_t v439;
  uint64_t v440;

  v4 = a1;
  *a1 = a2;
  a1[1] = 0;
  v411 = a1 + 1;
  v5 = **a2;
  a1[2] = 0;
  v6 = *(unsigned int *)(v5 + 60);
  if ((_DWORD)v6)
  {
    v7 = 16;
    if (v6 > 0x10)
      v7 = v6;
    if (v7 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x1983DCE9CLL);
    }
    v8 = 40 * v7;
    v9 = WTF::fastMalloc((WTF *)(40 * v7));
    v4 = a1;
    *((_DWORD *)a1 + 4) = (v8 & 0xFFFFFFF8) / 0x28;
    a1[1] = (uint64_t **)v9;
    v10 = *((_DWORD *)a1 + 5);
    if (v10 != (_DWORD)v6)
    {
      v11 = v9 + 40 * v10;
      do
      {
        *(_QWORD *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        *(_BYTE *)(v11 + 24) = 0;
        *(_QWORD *)(v11 + 16) = 0;
        *(_QWORD *)(v11 + 32) = -1;
        v11 += 40;
      }
      while (v11 != v9 + 40 * v6);
    }
  }
  *((_DWORD *)v4 + 5) = v6;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  *((_BYTE *)v4 + 48) = 0;
  v4[7] = (uint64_t **)-1;
  v12 = *v4;
  v413 = v4 + 3;
  v414 = *v4;
  v415 = 0;
  v13 = *(unsigned int *)(***v4 + 60);
  if ((_DWORD)v13)
  {
    v14 = 16;
    if (v13 > 0x10)
      v14 = *(unsigned int *)(***v4 + 60);
    if (v14 >= 0x2E8BA2F)
    {
      __break(0xC471u);
      JUMPOUT(0x1983DCE94);
    }
    v15 = WTF::fastMalloc((WTF *)(88 * v14));
    v415 = (WTF *)v15;
    v16 = v15 + 88 * v13;
    do
    {
      *(_QWORD *)v15 = 0;
      *(_BYTE *)(v15 + 8) = 0;
      *(_QWORD *)(v15 + 16) = -1;
      *(_QWORD *)(v15 + 24) = 0;
      *(_BYTE *)(v15 + 32) = 0;
      *(_QWORD *)(v15 + 40) = 0;
      *(_BYTE *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 64) = 0;
      *(_QWORD *)(v15 + 72) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_BYTE *)(v15 + 80) = 0;
      v15 += 88;
    }
    while (v15 != v16);
  }
  v416 = v13;
  v417 = 0;
  v418 = 0;
  v419 = -1;
  v420 = 0;
  v421 = 0;
  v422 = 0;
  LOBYTE(v423) = 0;
  v425 = 0;
  v426 = 0;
  v424 = 0;
  LOBYTE(v427) = 0;
  v428 = 0;
  v429 = 0;
  v17 = *(unsigned int *)(**v12 + 60);
  if ((_DWORD)v17 != -1)
  {
    do
    {
      if (v17)
      {
        v18 = **v12;
        if (*(_DWORD *)(v18 + 60) <= (v17 - 1))
        {
          __break(0xC471u);
          JUMPOUT(0x1983DCAACLL);
        }
        v19 = *(_QWORD *)(*(_QWORD *)(v18 + 48) + 8 * (v17 - 1));
        if (!v19)
          goto LABEL_21;
        v20 = *(_DWORD *)(v19 + 8);
        if (v13 <= v20)
        {
          __break(0xC471u);
          JUMPOUT(0x1983DCB84);
        }
        v21 = 0;
        v22 = (uint64_t *)((char *)v415 + 88 * v20);
      }
      else
      {
        v19 = 0;
        v21 = 1;
        v22 = &v417;
      }
      v22[5] = v19;
      *((_BYTE *)v22 + 48) = v21;
LABEL_21:
      --v17;
    }
    while (v17 != -1);
  }
  v406 = a3;
  *(_QWORD *)&v431 = 0x8000000000000000;
  v432 = 0uLL;
  v436 = xmmword_19914FB90;
  LODWORD(v437[0]) = 0;
  BYTE8(v431) = 1;
  v23 = WTF::Vector<WTF::GraphNodeWith<WTF::SingleRootGraphNode<JSC::DFG::CFG>,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v432, 1uLL, (unint64_t)&v436);
  v31 = HIDWORD(v432);
  v32 = v432 + 24 * HIDWORD(v432);
  v33 = *(_QWORD *)(v23 + 16);
  *(_OWORD *)v32 = *(_OWORD *)v23;
  *(_QWORD *)(v32 + 16) = v33;
  v34 = v31 + 1;
  HIDWORD(v432) = v31 + 1;
LABEL_25:
  v35 = v34;
  while (1)
  {
    if (v35)
    {
      v36 = v432 + 24 * v35;
      v37 = *(_QWORD *)(v36 - 24);
      v38 = *(unsigned __int8 *)(v36 - 16);
      v430[0] = *(_DWORD *)(v36 - 15);
      v39 = *(unsigned int *)(v36 - 8);
      *(_DWORD *)((char *)v430 + 3) = *(_DWORD *)(v36 - 12);
      v34 = v35 - 1;
      HIDWORD(v432) = --v35;
    }
    else
    {
      v37 = 0;
      v38 = 0;
      v39 = 0;
    }
    if (!v37 && !v38)
      break;
    *(_QWORD *)&v435 = v37;
    BYTE8(v435) = v38;
    *(_DWORD *)((unint64_t)&v435 | 9) = v430[0];
    *(_DWORD *)(((unint64_t)&v435 | 9) + 3) = *(_DWORD *)((char *)v430 + 3);
    if (!v39)
    {
      v40 = HIDWORD(v429);
      v41 = &v417;
      if (!v38)
      {
        v42 = *(_DWORD *)(v37 + 8);
        if (v416 <= v42)
        {
          __break(0xC471u);
          JUMPOUT(0x1983DCABCLL);
        }
        v41 = (uint64_t *)((char *)v415 + 88 * v42);
      }
      *((_DWORD *)v41 + 5) = HIDWORD(v429);
      if ((_DWORD)v40 == (_DWORD)v429)
      {
        v43 = (_OWORD *)WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v428, v40 + 1, (unint64_t)&v435, v26, v27, v28, v29, v30);
        *((_OWORD *)v428 + HIDWORD(v429)) = *v43;
      }
      else
      {
        *((_OWORD *)v428 + v40) = v435;
      }
      ++HIDWORD(v429);
      v38 = BYTE8(v435);
    }
    if (v38)
    {
      v77 = *((unsigned int *)v414 + 5);
      *(_QWORD *)&v436 = v437;
      DWORD2(v436) = 4;
      HIDWORD(v436) = v77;
      if (v77 >= 5)
      {
        if (v77 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x1983DCAC4);
        }
        v78 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v77));
        DWORD2(v436) = v77;
        *(_QWORD *)&v436 = v78;
        v77 = *((unsigned int *)v414 + 5);
      }
      else
      {
        v78 = v437;
      }
      if ((_DWORD)v77)
      {
        v79 = (__int128 *)v414[1];
        v80 = 16 * v77;
        do
        {
          v81 = *v79++;
          *v78++ = v81;
          v80 -= 16;
        }
        while (v80);
      }
    }
    else
    {
      *(_QWORD *)&v436 = v437;
      *((_QWORD *)&v436 + 1) = 4;
      v44 = *(unsigned int *)(v435 + 220);
      if ((_DWORD)v44)
      {
        v45 = 8 * v44;
        while (1)
        {
          v46 = *(_QWORD *)(*(_QWORD *)(v435 + 208) - 8 + v45);
          v47 = *(unsigned __int16 *)(v46 + 18);
          if ((v47 - 364) < 0xC)
            break;
          if ((v47 - 28) < 2 || (v47 - 23) <= 2)
          {
            v45 -= 8;
            if (v45)
              continue;
          }
          goto LABEL_412;
        }
      }
      else
      {
LABEL_412:
        v46 = 0;
      }
      v48 = 1;
      switch(*(_WORD *)(v46 + 18))
      {
        case 0x16C:
          goto LABEL_47;
        case 0x16D:
          v48 = 2;
          goto LABEL_47;
        case 0x16E:
          v48 = *(_DWORD *)(*(_QWORD *)(v46 + 72) + 12) + 1;
          goto LABEL_183;
        case 0x16F:
          v48 = *(_DWORD *)(*(_QWORD *)(v46 + 72) + 12);
LABEL_183:
          if (v48)
          {
LABEL_47:
            v49 = 0;
            v50 = 0;
            v51 = (uint64_t **)(v46 + 72);
            do
            {
              v52 = *(unsigned __int16 *)(v46 + 18);
              if (v52 == 366)
              {
                v57 = *v51;
                v58 = *((_DWORD *)*v51 + 3);
                if (v58 <= v49)
                {
                  if (v58 != v49)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983DC528);
                  }
                  v53 = v57 + 2;
                }
                else
                {
                  v53 = (uint64_t *)(*v57 + 32 * v50 + 16);
                }
              }
              else if (v52 == 367)
              {
                if (*((_DWORD *)*v51 + 3) <= v49)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983DCACCLL);
                }
                v53 = (uint64_t *)(**v51 + 8 * v50);
              }
              else if (v49)
              {
                if (v49 != 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983DCA54);
                }
                v53 = *v51 + 2;
              }
              else
              {
                v53 = (uint64_t *)(v46 + 72);
                if (v52 != 364)
                  v53 = *v51;
              }
              v54 = *v53;
              *(_QWORD *)&v434 = v54;
              v55 = HIDWORD(v436);
              if (HIDWORD(v436) == DWORD2(v436))
              {
                WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>((uint64_t)&v436, &v434, v25, v26, v27, v28, v29, v30);
              }
              else
              {
                v56 = v436 + 16 * HIDWORD(v436);
                *(_QWORD *)v56 = v54;
                *(_BYTE *)(v56 + 8) = 0;
                HIDWORD(v436) = v55 + 1;
              }
              v49 = v50 + 1;
              v50 = (v50 + 1);
            }
            while (v48 != v49);
          }
          break;
        default:
          break;
      }
    }
    v59 = HIDWORD(v436);
    v60 = v436;
    if (v437 != (_QWORD *)v436 && (_QWORD)v436 != 0)
    {
      *(_QWORD *)&v436 = 0;
      DWORD2(v436) = 0;
      WTF::fastFree(v60, v24, v25, v26, v27, v28, v29, v30);
    }
    if (v59 > v39)
    {
      if (BYTE8(v435))
      {
        v82 = *((unsigned int *)v414 + 5);
        *(_QWORD *)&v436 = v437;
        DWORD2(v436) = 4;
        HIDWORD(v436) = v82;
        if (v82 >= 5)
        {
          if (v82 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x1983DCBC4);
          }
          v83 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v82));
          DWORD2(v436) = v82;
          *(_QWORD *)&v436 = v83;
          v82 = *((unsigned int *)v414 + 5);
        }
        else
        {
          v83 = v437;
        }
        if ((_DWORD)v82)
        {
          v84 = (__int128 *)v414[1];
          v85 = 16 * v82;
          do
          {
            v86 = *v84++;
            *v83++ = v86;
            v85 -= 16;
          }
          while (v85);
        }
      }
      else
      {
        *(_QWORD *)&v436 = v437;
        *((_QWORD *)&v436 + 1) = 4;
        v62 = *(unsigned int *)(v435 + 220);
        if ((_DWORD)v62)
        {
          v63 = 8 * v62;
          while (1)
          {
            v64 = *(_QWORD *)(*(_QWORD *)(v435 + 208) - 8 + v63);
            v65 = *(unsigned __int16 *)(v64 + 18);
            if ((v65 - 364) < 0xC)
              break;
            if ((v65 - 28) < 2 || (v65 - 23) <= 2)
            {
              v63 -= 8;
              if (v63)
                continue;
            }
            goto LABEL_413;
          }
        }
        else
        {
LABEL_413:
          v64 = 0;
        }
        v66 = 1;
        switch(*(_WORD *)(v64 + 18))
        {
          case 0x16C:
            goto LABEL_76;
          case 0x16D:
            v66 = 2;
            goto LABEL_76;
          case 0x16E:
            v66 = *(_DWORD *)(*(_QWORD *)(v64 + 72) + 12) + 1;
            goto LABEL_385;
          case 0x16F:
            v66 = *(_DWORD *)(*(_QWORD *)(v64 + 72) + 12);
LABEL_385:
            if (v66)
            {
LABEL_76:
              v67 = 0;
              v68 = 0;
              v69 = (uint64_t **)(v64 + 72);
              do
              {
                v70 = *(unsigned __int16 *)(v64 + 18);
                if (v70 == 366)
                {
                  v75 = *v69;
                  v76 = *((_DWORD *)*v69 + 3);
                  if (v76 <= v67)
                  {
                    if (v76 != v67)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1983DC548);
                    }
                    v71 = v75 + 2;
                  }
                  else
                  {
                    v71 = (uint64_t *)(*v75 + 32 * v68 + 16);
                  }
                }
                else if (v70 == 367)
                {
                  if (*((_DWORD *)*v69 + 3) <= v67)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983DCAA4);
                  }
                  v71 = (uint64_t *)(**v69 + 8 * v68);
                }
                else if (v67)
                {
                  if (v67 != 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983DCA74);
                  }
                  v71 = *v69 + 2;
                }
                else
                {
                  v71 = (uint64_t *)(v64 + 72);
                  if (v70 != 364)
                    v71 = *v69;
                }
                v72 = *v71;
                *(_QWORD *)&v434 = v72;
                v73 = HIDWORD(v436);
                if (HIDWORD(v436) == DWORD2(v436))
                {
                  WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>((uint64_t)&v436, &v434, v25, v26, v27, v28, v29, v30);
                }
                else
                {
                  v74 = v436 + 16 * HIDWORD(v436);
                  *(_QWORD *)v74 = v72;
                  *(_BYTE *)(v74 + 8) = 0;
                  HIDWORD(v436) = v73 + 1;
                }
                v67 = v68 + 1;
                v68 = (v68 + 1);
              }
              while (v66 != v67);
            }
            break;
          default:
            break;
        }
      }
      v87 = HIDWORD(v436);
      v88 = v436;
      if (v437 != (_QWORD *)v436 && (_QWORD)v436 != 0)
      {
        *(_QWORD *)&v436 = 0;
        DWORD2(v436) = 0;
        WTF::fastFree(v88, v24, v25, v26, v27, v28, v29, v30);
      }
      if (v87 > v39 + 1)
      {
        v436 = v435;
        LODWORD(v437[0]) = v39 + 1;
        if (v35 == DWORD2(v432))
        {
          v133 = WTF::Vector<WTF::GraphNodeWith<WTF::SingleRootGraphNode<JSC::DFG::CFG>,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v432, v35 + 1, (unint64_t)&v436);
          v35 = HIDWORD(v432);
          v105 = v432 + 24 * HIDWORD(v432);
          v106 = *(_QWORD *)(v133 + 16);
          v107 = *(_OWORD *)v133;
        }
        else
        {
          v105 = v432 + 24 * v35;
          v106 = v437[0];
          v107 = v436;
        }
        *(_OWORD *)v105 = v107;
        *(_QWORD *)(v105 + 16) = v106;
        v34 = v35 + 1;
        HIDWORD(v432) = ++v35;
      }
      if (BYTE8(v435))
      {
        v108 = *((unsigned int *)v414 + 5);
        *(_QWORD *)&v436 = v437;
        DWORD2(v436) = 4;
        HIDWORD(v436) = v108;
        if (v108 >= 5)
        {
          if (v108 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x1983DCBBCLL);
          }
          v109 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v108));
          DWORD2(v436) = v108;
          *(_QWORD *)&v436 = v109;
          v108 = *((unsigned int *)v414 + 5);
        }
        else
        {
          v109 = v437;
        }
        if ((_DWORD)v108)
        {
          v110 = (__int128 *)v414[1];
          v111 = 16 * v108;
          do
          {
            v112 = *v110++;
            *v109++ = v112;
            v111 -= 16;
          }
          while (v111);
        }
      }
      else
      {
        *(_QWORD *)&v436 = v437;
        *((_QWORD *)&v436 + 1) = 4;
        v90 = *(unsigned int *)(v435 + 220);
        if ((_DWORD)v90)
        {
          v91 = 8 * v90;
          while (1)
          {
            v92 = *(_QWORD *)(*(_QWORD *)(v435 + 208) - 8 + v91);
            v93 = *(unsigned __int16 *)(v92 + 18);
            if ((v93 - 364) < 0xC)
              break;
            if ((v93 - 28) < 2 || (v93 - 23) <= 2)
            {
              v91 -= 8;
              if (v91)
                continue;
            }
            goto LABEL_414;
          }
        }
        else
        {
LABEL_414:
          v92 = 0;
        }
        v94 = 1;
        switch(*(_WORD *)(v92 + 18))
        {
          case 0x16C:
            goto LABEL_117;
          case 0x16D:
            v94 = 2;
            goto LABEL_117;
          case 0x16E:
            v94 = *(_DWORD *)(*(_QWORD *)(v92 + 72) + 12) + 1;
            goto LABEL_388;
          case 0x16F:
            v94 = *(_DWORD *)(*(_QWORD *)(v92 + 72) + 12);
LABEL_388:
            if (v94)
            {
LABEL_117:
              v95 = 0;
              v96 = 0;
              v97 = (uint64_t **)(v92 + 72);
              do
              {
                v98 = *(unsigned __int16 *)(v92 + 18);
                if (v98 == 366)
                {
                  v103 = *v97;
                  v104 = *((_DWORD *)*v97 + 3);
                  if (v104 <= v95)
                  {
                    if (v104 != v95)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1983DC568);
                    }
                    v99 = v103 + 2;
                  }
                  else
                  {
                    v99 = (uint64_t *)(*v103 + 32 * v96 + 16);
                  }
                }
                else if (v98 == 367)
                {
                  if (*((_DWORD *)*v97 + 3) <= v95)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983DCA9CLL);
                  }
                  v99 = (uint64_t *)(**v97 + 8 * v96);
                }
                else if (v95)
                {
                  if (v95 != 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983DCA94);
                  }
                  v99 = *v97 + 2;
                }
                else
                {
                  v99 = (uint64_t *)(v92 + 72);
                  if (v98 != 364)
                    v99 = *v97;
                }
                v100 = *v99;
                *(_QWORD *)&v434 = v100;
                v101 = HIDWORD(v436);
                if (HIDWORD(v436) == DWORD2(v436))
                {
                  WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>((uint64_t)&v436, &v434, v25, v26, v27, v28, v29, v30);
                }
                else
                {
                  v102 = v436 + 16 * HIDWORD(v436);
                  *(_QWORD *)v102 = v100;
                  *(_BYTE *)(v102 + 8) = 0;
                  HIDWORD(v436) = v101 + 1;
                }
                v95 = v96 + 1;
                v96 = (v96 + 1);
              }
              while (v94 != v95);
            }
            break;
          default:
            break;
        }
      }
      if (HIDWORD(v436) <= v39)
      {
        __break(0xC471u);
        JUMPOUT(0x1983DCAD4);
      }
      v113 = v436;
      v114 = (uint64_t *)(v436 + 16 * v39);
      v115 = *v114;
      v116 = v114[1];
      if (v437 != (_QWORD *)v436 && (_QWORD)v436 != 0)
      {
        *(_QWORD *)&v436 = 0;
        DWORD2(v436) = 0;
        WTF::fastFree(v113, v24, v25, v26, v27, v28, v29, v30);
      }
      *(_QWORD *)&v436 = v115;
      *((_QWORD *)&v436 + 1) = v116;
      LODWORD(v437[0]) = 0;
      v118 = v116;
      if ((_BYTE)v116)
      {
        if (BYTE8(v431))
          goto LABEL_25;
        BYTE8(v431) = 1;
        goto LABEL_153;
      }
      v119 = v431;
      if ((v431 & 0x8000000000000000) != 0)
        v120 = 63;
      else
        v120 = *(_QWORD *)(2 * v431);
      v121 = *(unsigned int *)(v115 + 8);
      if (v120 <= v121)
      {
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v431, v121 + 1, 0);
        v119 = v431;
        v34 = HIDWORD(v432);
      }
      v122 = 2 * v119 + 8;
      v123 = v119 < 0;
      v124 = &v431;
      if (!v123)
        v124 = (__int128 *)v122;
      v125 = (v121 >> 3) & 0x1FFFFFF8;
      v126 = *(_QWORD *)((char *)v124 + v125);
      *(_QWORD *)((char *)v124 + v125) = v126 | (1 << v121);
      v35 = v34;
      if ((v126 & (1 << v121)) == 0)
      {
LABEL_153:
        if (v35 == DWORD2(v432))
        {
          v132 = WTF::Vector<WTF::GraphNodeWith<WTF::SingleRootGraphNode<JSC::DFG::CFG>,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v432, v35 + 1, (unint64_t)&v436);
          v35 = HIDWORD(v432);
          v127 = v432 + 24 * HIDWORD(v432);
          v128 = *(_QWORD *)(v132 + 16);
          *(_OWORD *)v127 = *(_OWORD *)v132;
        }
        else
        {
          v127 = v432 + 24 * v35;
          v128 = v437[0];
          *(_OWORD *)v127 = v436;
        }
        *(_QWORD *)(v127 + 16) = v128;
        v34 = v35 + 1;
        HIDWORD(v432) = v35 + 1;
        v129 = &v417;
        if (!v118)
        {
          v130 = *(_DWORD *)(v115 + 8);
          if (v416 <= v130)
          {
            __break(0xC471u);
            JUMPOUT(0x1983DCB7CLL);
          }
          v129 = (uint64_t *)((char *)v415 + 88 * v130);
        }
        v131 = v435;
        *((_BYTE *)v129 + 8) = BYTE8(v435);
        *v129 = v131;
        goto LABEL_25;
      }
      goto LABEL_25;
    }
  }
  if ((_QWORD)v432)
    WTF::fastFree(v432, v24, v25, v26, v27, v28, v29, v30);
  if ((v431 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v431, v24, v25, v26, v27, v28, v29, v30);
  v134 = HIDWORD(v429);
  v135 = v413;
  if (HIDWORD(v429) >= 2)
  {
    while (1)
    {
      if (HIDWORD(v429) <= --v134)
      {
        __break(0xC471u);
        JUMPOUT(0x1983DCAECLL);
      }
      v434 = *((_OWORD *)v428 + v134);
      if (BYTE8(v434))
      {
        v141 = &v417;
        goto LABEL_245;
      }
      v136 = *(unsigned int *)(v434 + 8);
      if (v416 <= v136)
      {
        __break(0xC471u);
        JUMPOUT(0x1983DCAF4);
      }
      v137 = v414 + 11;
      v138 = (uint64_t)v414[11];
      v139 = (unint64_t *)(2 * v138);
      if (v138 < 0)
        v140 = 63;
      else
        v140 = *v139;
      v141 = (uint64_t *)((char *)v415 + 88 * v136);
      if (v140 <= v136)
        goto LABEL_199;
      v142 = v139 + 1;
      if (v138 >= 0)
        v137 = (_QWORD **)v142;
      if (((*(unint64_t *)((char *)v137 + ((v136 >> 3) & 0x1FFFFFF8)) >> v136) & 1) != 0)
      {
        v150 = &v433;
        *(_QWORD *)&v431 = &v432;
        v432 = xmmword_19914FB90;
        v149 = &v432;
        *((_QWORD *)&v431 + 1) = 0x100000004;
      }
      else
      {
LABEL_199:
        *(_QWORD *)&v431 = &v432;
        *((_QWORD *)&v431 + 1) = 4;
        v143 = *(unsigned int *)(v434 + 52);
        if (!(_DWORD)v143)
          goto LABEL_245;
        v144 = *(uint64_t **)(v434 + 40);
        v145 = 8 * v143;
        do
        {
          v146 = *v144;
          *(_QWORD *)&v436 = *v144;
          v147 = HIDWORD(v431);
          if (HIDWORD(v431) == DWORD2(v431))
          {
            WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>((uint64_t)&v431, &v436, (uint64_t)v430, v26, v27, v28, v29, v30);
            v135 = v413;
          }
          else
          {
            v148 = v431 + 16 * HIDWORD(v431);
            *(_QWORD *)v148 = v146;
            *(_BYTE *)(v148 + 8) = 0;
            HIDWORD(v431) = v147 + 1;
          }
          ++v144;
          v145 -= 8;
        }
        while (v145);
        v149 = (__int128 *)v431;
        if (!HIDWORD(v431))
          goto LABEL_242;
        v150 = (uint64_t *)(v431 + 16 * HIDWORD(v431));
      }
      v151 = (unsigned int *)((char *)v415 + 88 * v136 + 20);
      do
      {
        v153 = *(_QWORD *)v149;
        v152 = *((_QWORD *)v149 + 1);
        v154 = v152;
        if ((_BYTE)v152)
        {
          if (v420)
            v220 = 0;
          else
            v220 = v421 == 0;
          v160 = &v417;
          if (v220)
            goto LABEL_223;
        }
        else
        {
          v155 = *(_DWORD *)(v153 + 8);
          if (v416 <= v155)
          {
            __break(0xC471u);
            JUMPOUT(0x1983DCADCLL);
          }
          v156 = (char *)v415 + 88 * v155;
          v157 = *((_QWORD *)v156 + 3);
          v158 = v156[32];
          if (v157)
            v159 = 0;
          else
            v159 = v158 == 0;
          if (v159)
            goto LABEL_223;
          v160 = (uint64_t *)((char *)v415 + 88 * v155);
        }
        v161 = &v417;
        if (!*((_BYTE *)v160 + 32))
        {
          v162 = *(_DWORD *)(v160[3] + 8);
          if (v416 <= v162)
          {
            __break(0xC471u);
            JUMPOUT(0x1983DCBA4);
          }
          v161 = (uint64_t *)((char *)v415 + 88 * v162);
        }
        if (v161[3] || *((_BYTE *)v161 + 32))
        {
          *((_QWORD *)&v435 + 1) = *((_QWORD *)v149 + 1);
          *(_QWORD *)&v436 = v437;
          *((_QWORD *)&v436 + 1) = 16;
          *(_QWORD *)&v435 = v153;
          if (!(v152 | v153))
            goto LABEL_593;
          v169 = 0;
          do
          {
            if (v169 == DWORD2(v436))
            {
              v308 = (_OWORD *)WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v436, (void *)(v169 + 1), (unint64_t)&v435, v26, v27, v28, v29, v30);
              v135 = v413;
              *(_OWORD *)(v436 + 16 * HIDWORD(v436)) = *v308;
            }
            else
            {
              *(_OWORD *)(v436 + 16 * v169) = v435;
            }
            v170 = HIDWORD(v436);
            v169 = ++HIDWORD(v436);
            v171 = &v417;
            if (!BYTE8(v435))
            {
              v172 = *(_DWORD *)(v435 + 8);
              if (v416 <= v172)
              {
                __break(0xC471u);
                JUMPOUT(0x1983DCBB4);
              }
              v171 = (uint64_t *)((char *)v415 + 88 * v172);
            }
            *(_QWORD *)&v435 = v171[3];
            v173 = *((unsigned __int8 *)v171 + 32);
            BYTE8(v435) = v173;
          }
          while ((_QWORD)v435 || v173);
          if (v169 != 2)
          {
            if (v169 < 3)
            {
LABEL_593:
              __break(0xC471u);
              JUMPOUT(0x1983DCD00);
            }
            v370 = 16 * (v170 - 2);
            do
            {
              v371 = &v422;
              v372 = &v417;
              if (!*(_BYTE *)(v436 + v370 + 8))
              {
                v373 = *(_DWORD *)(*(_QWORD *)(v436 + v370) + 8);
                if (v416 <= v373)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983DCD08);
                }
                v372 = (uint64_t *)((char *)v415 + 88 * v373);
                v371 = (unint64_t *)(v372 + 5);
              }
              v374 = v372 + 3;
              v375 = *((unsigned __int8 *)v372 + 32);
              v376 = &v417;
              if (!*((_BYTE *)v372 + 32))
              {
                v377 = *(_DWORD *)(*(_QWORD *)v374 + 8);
                if (v416 <= v377)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983DCD10);
                }
                v376 = (uint64_t *)((char *)v415 + 88 * v377);
              }
              v378 = v376[5];
              v379 = *((unsigned __int8 *)v376 + 48);
              v380 = &v417;
              if (!v379)
              {
                v381 = *(_DWORD *)(v378 + 8);
                if (v416 <= v381)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983DCD18);
                }
                v380 = (uint64_t *)((char *)v415 + 88 * v381);
              }
              v382 = *((_DWORD *)v380 + 5);
              v383 = &v417;
              if (!*((_BYTE *)v371 + 8))
              {
                v384 = *(_DWORD *)(*v371 + 8);
                if (v416 <= v384)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983DCD20);
                }
                v383 = (uint64_t *)((char *)v415 + 88 * v384);
              }
              if (v382 < *((_DWORD *)v383 + 5))
              {
                *v371 = v378;
                *((_BYTE *)v371 + 8) = v379;
                v375 = *((unsigned __int8 *)v372 + 32);
              }
              v385 = &v417;
              if (!v375)
              {
                v386 = *(_DWORD *)(*(_QWORD *)v374 + 8);
                if (v416 <= v386)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983DCD28);
                }
                v385 = (uint64_t *)((char *)v415 + 88 * v386);
              }
              v387 = v385[3];
              v374[8] = *((_BYTE *)v385 + 32);
              *(_QWORD *)v374 = v387;
              v370 -= 16;
              v135 = v413;
            }
            while (v370 != -16);
          }
          v174 = v436;
          if (v437 != (_QWORD *)v436 && (_QWORD)v436)
          {
            *(_QWORD *)&v436 = 0;
            DWORD2(v436) = 0;
            WTF::fastFree(v174, v135, (uint64_t)v430, v26, v27, v28, v29, v30);
            v135 = v413;
          }
        }
        v163 = &v417;
        if (!v154)
        {
          v164 = *(_DWORD *)(v153 + 8);
          if (v416 <= v164)
          {
            __break(0xC471u);
            JUMPOUT(0x1983DCBACLL);
          }
          v163 = (uint64_t *)((char *)v415 + 88 * v164);
        }
        LOBYTE(v152) = *((_BYTE *)v163 + 48);
        v153 = v163[5];
LABEL_223:
        v165 = &v417;
        if (!(_BYTE)v152)
        {
          v166 = *(_DWORD *)(v153 + 8);
          if (v416 <= v166)
          {
            __break(0xC471u);
            JUMPOUT(0x1983DCAE4);
          }
          v165 = (uint64_t *)((char *)v415 + 88 * v166);
        }
        v167 = *v151;
        v168 = *((_DWORD *)v165 + 5);
        if (*v151 >= v168)
          v167 = v168;
        *v151 = v167;
        ++v149;
      }
      while (v149 != (__int128 *)v150);
      v149 = (__int128 *)v431;
LABEL_242:
      if (&v432 != v149 && v149)
      {
        *(_QWORD *)&v431 = 0;
        DWORD2(v431) = 0;
        WTF::fastFree((unint64_t)v149, v135, (uint64_t)v430, v26, v27, v28, v29, v30);
        v135 = v413;
      }
LABEL_245:
      v175 = *((unsigned int *)v141 + 5);
      if (HIDWORD(v429) <= v175)
      {
        __break(0xC471u);
        JUMPOUT(0x1983DCAFCLL);
      }
      v176 = &v417;
      if (!*((_BYTE *)v428 + 16 * v175 + 8))
      {
        v177 = *(_DWORD *)(*((_QWORD *)v428 + 2 * v175) + 8);
        if (v416 <= v177)
        {
          __break(0xC471u);
          JUMPOUT(0x1983DCB04);
        }
        v176 = (uint64_t *)((char *)v415 + 88 * v177);
      }
      v178 = v176 + 7;
      v179 = *((unsigned int *)v176 + 17);
      if ((_DWORD)v179 == *((_DWORD *)v176 + 16))
      {
        v182 = (__int128 *)WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v178, v179 + 1, (unint64_t)&v434, v26, v27, v28, v29, v30);
        v135 = v413;
        v179 = *((unsigned int *)v176 + 17);
        v180 = v176[7];
        v181 = *v182;
      }
      else
      {
        v180 = *v178;
        v181 = v434;
      }
      *(_OWORD *)(v180 + 16 * v179) = v181;
      ++*((_DWORD *)v176 + 17);
      v183 = v141[1];
      v184 = &v417;
      if (!BYTE8(v434))
      {
        v185 = *(_DWORD *)(v434 + 8);
        if (v416 <= v185)
        {
          __break(0xC471u);
          JUMPOUT(0x1983DCB0CLL);
        }
        v184 = (uint64_t *)((char *)v415 + 88 * v185);
      }
      v184[3] = *v141;
      *((_BYTE *)v184 + 32) = v183;
      v186 = *((unsigned __int8 *)v141 + 8);
      v187 = &v417;
      if (!*((_BYTE *)v141 + 8))
      {
        v188 = *(_DWORD *)(*v141 + 8);
        if (v416 <= v188)
        {
          __break(0xC471u);
          JUMPOUT(0x1983DCB14);
        }
        v187 = (uint64_t *)((char *)v415 + 88 * v188);
      }
      v189 = *((unsigned int *)v187 + 17);
      if ((_DWORD)v189)
      {
        v190 = (unint64_t *)v187[7];
        v191 = &v190[2 * v189];
        while (1)
        {
          v193 = *v190;
          v192 = v190[1];
          v194 = v192;
          if ((_BYTE)v192)
          {
            if (v420)
              v221 = 0;
            else
              v221 = v421 == 0;
            v202 = &v417;
            if (v221)
              goto LABEL_324;
          }
          else
          {
            v195 = *(unsigned int *)(v193 + 8);
            v196 = v416;
            if (v416 <= v195)
            {
              __break(0xC471u);
              JUMPOUT(0x1983DCB1CLL);
            }
            v197 = v415;
            v198 = (char *)v415 + 88 * v195;
            v199 = *((_QWORD *)v198 + 3);
            v200 = v198[32];
            if (v199)
              v201 = 0;
            else
              v201 = v200 == 0;
            if (v201)
              goto LABEL_275;
            v202 = (uint64_t *)((char *)v415 + 88 * v195);
          }
          v203 = &v417;
          if (!*((_BYTE *)v202 + 32))
          {
            v204 = *(_DWORD *)(v202[3] + 8);
            if (v416 <= v204)
            {
              __break(0xC471u);
              JUMPOUT(0x1983DCB24);
            }
            v203 = (uint64_t *)((char *)v415 + 88 * v204);
          }
          if (v203[3] || *((_BYTE *)v203 + 32))
          {
            *(_QWORD *)&v436 = v437;
            *((_QWORD *)&v436 + 1) = 16;
            *(_QWORD *)&v431 = v193;
            *((_QWORD *)&v431 + 1) = v192;
            if (!(v192 | v193))
              goto LABEL_620;
            v211 = 0;
            do
            {
              if (v211 == DWORD2(v436))
              {
                v309 = (_OWORD *)WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v436, (void *)(v211 + 1), (unint64_t)&v431, v26, v27, v28, v29, v30);
                v135 = v413;
                *(_OWORD *)(v436 + 16 * HIDWORD(v436)) = *v309;
              }
              else
              {
                *(_OWORD *)(v436 + 16 * v211) = v431;
              }
              v212 = HIDWORD(v436);
              v211 = ++HIDWORD(v436);
              v213 = &v417;
              if (!BYTE8(v431))
              {
                v214 = *(_DWORD *)(v431 + 8);
                if (v416 <= v214)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983DCB44);
                }
                v213 = (uint64_t *)((char *)v415 + 88 * v214);
              }
              *(_QWORD *)&v431 = v213[3];
              v215 = *((unsigned __int8 *)v213 + 32);
              BYTE8(v431) = v215;
            }
            while ((_QWORD)v431 || v215);
            if (v211 != 2)
            {
              if (v211 < 3)
              {
LABEL_620:
                __break(0xC471u);
                JUMPOUT(0x1983DCE64);
              }
              v388 = 16 * (v212 - 2);
              do
              {
                v389 = &v422;
                v390 = &v417;
                if (!*(_BYTE *)(v436 + v388 + 8))
                {
                  v391 = *(_DWORD *)(*(_QWORD *)(v436 + v388) + 8);
                  if (v416 <= v391)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983DCE6CLL);
                  }
                  v390 = (uint64_t *)((char *)v415 + 88 * v391);
                  v389 = (unint64_t *)(v390 + 5);
                }
                v392 = v390 + 3;
                v393 = *((unsigned __int8 *)v390 + 32);
                v394 = &v417;
                if (!*((_BYTE *)v390 + 32))
                {
                  v395 = *(_DWORD *)(*(_QWORD *)v392 + 8);
                  if (v416 <= v395)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983DCE74);
                  }
                  v394 = (uint64_t *)((char *)v415 + 88 * v395);
                }
                v396 = v394[5];
                v397 = *((unsigned __int8 *)v394 + 48);
                v398 = &v417;
                if (!v397)
                {
                  v399 = *(_DWORD *)(v396 + 8);
                  if (v416 <= v399)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983DCE7CLL);
                  }
                  v398 = (uint64_t *)((char *)v415 + 88 * v399);
                }
                v400 = *((_DWORD *)v398 + 5);
                v401 = &v417;
                if (!*((_BYTE *)v389 + 8))
                {
                  v402 = *(_DWORD *)(*v389 + 8);
                  if (v416 <= v402)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983DCE84);
                  }
                  v401 = (uint64_t *)((char *)v415 + 88 * v402);
                }
                if (v400 < *((_DWORD *)v401 + 5))
                {
                  *v389 = v396;
                  *((_BYTE *)v389 + 8) = v397;
                  v393 = *((unsigned __int8 *)v390 + 32);
                }
                v403 = &v417;
                if (!v393)
                {
                  v404 = *(_DWORD *)(*(_QWORD *)v392 + 8);
                  if (v416 <= v404)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983DCE8CLL);
                  }
                  v403 = (uint64_t *)((char *)v415 + 88 * v404);
                }
                v405 = v403[3];
                v392[8] = *((_BYTE *)v403 + 32);
                *(_QWORD *)v392 = v405;
                v388 -= 16;
                v135 = v413;
              }
              while (v388 != -16);
            }
            v216 = v436;
            if (v437 != (_QWORD *)v436 && (_QWORD)v436)
            {
              *(_QWORD *)&v436 = 0;
              DWORD2(v436) = 0;
              WTF::fastFree(v216, v135, (uint64_t)v430, v26, v27, v28, v29, v30);
              v135 = v413;
            }
          }
          if (!v194)
          {
            v195 = *(unsigned int *)(v193 + 8);
            v196 = v416;
            if (v416 <= v195)
            {
              __break(0xC471u);
              JUMPOUT(0x1983DCB2CLL);
            }
            v197 = v415;
            v205 = (char *)v415 + 88 * v195;
            v193 = *((_QWORD *)v205 + 5);
            v192 = *((_QWORD *)v205 + 6);
LABEL_275:
            if (v196 <= v195)
            {
              __break(0xC471u);
              JUMPOUT(0x1983DCB34);
            }
            v206 = (uint64_t *)((char *)v197 + 88 * v195);
            goto LABEL_277;
          }
          v193 = v422;
          LOBYTE(v192) = v423;
LABEL_324:
          v206 = &v417;
LABEL_277:
          v207 = &v417;
          if (!(_BYTE)v192)
          {
            v208 = *(_DWORD *)(v193 + 8);
            if (v416 <= v208)
            {
              __break(0xC471u);
              JUMPOUT(0x1983DCB3CLL);
            }
            v207 = (uint64_t *)((char *)v415 + 88 * v208);
          }
          if (*((_DWORD *)v207 + 5) < *((_DWORD *)v206 + 5))
          {
            v206[9] = v193;
            *((_BYTE *)v206 + 80) = v192;
          }
          else
          {
            v209 = v206 + 9;
            v210 = *v141;
            *((_BYTE *)v209 + 8) = *((_BYTE *)v141 + 8);
            *v209 = v210;
          }
          v190 += 2;
          if (v190 == v191)
          {
            v186 = *((unsigned __int8 *)v141 + 8);
            break;
          }
        }
      }
      v217 = &v417;
      if (!v186)
      {
        v218 = *(_DWORD *)(*v141 + 8);
        if (v416 <= v218)
        {
          __break(0xC471u);
          JUMPOUT(0x1983DCB4CLL);
        }
        v217 = (uint64_t *)((char *)v415 + 88 * v218);
      }
      if (*((_DWORD *)v217 + 16))
      {
        if (*((_DWORD *)v217 + 17))
          *((_DWORD *)v217 + 17) = 0;
        v219 = v217[7];
        if (v219)
        {
          v217[7] = 0;
          *((_DWORD *)v217 + 16) = 0;
          WTF::fastFree(v219, v135, (uint64_t)v430, v26, v27, v28, v29, v30);
          v135 = v413;
        }
      }
      if (v134 <= 1)
      {
        v222 = HIDWORD(v429);
        if (HIDWORD(v429) >= 2)
        {
          v223 = 0;
          v224 = 1;
          do
          {
            v225 = &v417;
            if (!*((_BYTE *)v428 + v223 + 24))
            {
              v226 = *(_DWORD *)(*(_QWORD *)((char *)v428 + v223 + 16) + 8);
              if (v416 <= v226)
              {
                __break(0xC471u);
                JUMPOUT(0x1983DCB54);
              }
              v225 = (uint64_t *)((char *)v415 + 88 * v226);
            }
            v227 = *((unsigned int *)v225 + 5);
            if (v222 <= v227)
            {
              __break(0xC471u);
              JUMPOUT(0x1983DCB5CLL);
            }
            v228 = (char *)v428 + 16 * v227;
            v229 = v225[9];
            v230 = *(_QWORD *)v228;
            v231 = v228[8];
            if (v229 != v230 || *((unsigned __int8 *)v225 + 80) != v231)
            {
              v304 = &v417;
              if (!*((_BYTE *)v225 + 80))
              {
                v305 = *(_DWORD *)(v229 + 8);
                if (v416 <= v305)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983DCEA4);
                }
                v304 = (uint64_t *)((char *)v415 + 88 * v305);
              }
              v306 = v225 + 9;
              v307 = v304[9];
              *((_BYTE *)v306 + 8) = *((_BYTE *)v304 + 80);
              *v306 = v307;
              v222 = HIDWORD(v429);
            }
            ++v224;
            v223 += 16;
          }
          while (v224 < v222);
        }
        break;
      }
    }
  }
  v234 = v411;
  v233 = a1;
  v235 = *(unsigned int *)(***a1 + 60);
  if ((_DWORD)v235 != -1)
  {
    do
    {
      if (v235)
      {
        v236 = ***v233;
        if (*(_DWORD *)(v236 + 60) <= (v235 - 1))
        {
          __break(0xC471u);
          JUMPOUT(0x1983DCAB4);
        }
        v237 = *(_QWORD *)(*(_QWORD *)(v236 + 48) + 8 * (v235 - 1));
        v436 = v237;
        if (!v237)
          goto LABEL_355;
        v238 = *(_DWORD *)(v237 + 8);
        if (v416 <= v238)
        {
          __break(0xC471u);
          JUMPOUT(0x1983DCB8CLL);
        }
        if (*((_DWORD *)v233 + 5) <= v238)
        {
          __break(0xC471u);
          JUMPOUT(0x1983DCB94);
        }
        v239 = (char *)v415 + 88 * v238;
        v240 = *((_QWORD *)v239 + 9);
        v241 = *((_QWORD *)v239 + 10);
        v242 = *v234 + 40 * v238;
      }
      else
      {
        v436 = xmmword_19914FB90;
        v242 = (uint64_t)v135;
        v240 = v426;
        LOBYTE(v241) = v427;
      }
      *(_QWORD *)(v242 + 16) = v240;
      *(_BYTE *)(v242 + 24) = v241;
      if (v240)
        v243 = 0;
      else
        v243 = v241 == 0;
      if (!v243)
      {
        v244 = (uint64_t)v135;
        if (!(_BYTE)v241)
        {
          v245 = *(_DWORD *)(v240 + 8);
          if (*((_DWORD *)v233 + 5) <= v245)
          {
            __break(0xC471u);
            JUMPOUT(0x1983DCB9CLL);
          }
          v244 = *v234 + 40 * v245;
        }
        v246 = *(unsigned int *)(v244 + 12);
        if ((_DWORD)v246 == *(_DWORD *)(v244 + 8))
        {
          v249 = (__int128 *)WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v244, v246 + 1, (unint64_t)&v436, v26, v27, v28, v29, v30);
          v233 = a1;
          v135 = v413;
          v234 = v411;
          v246 = *(unsigned int *)(v244 + 12);
          v247 = *(_QWORD *)v244;
          v248 = *v249;
        }
        else
        {
          v247 = *(_QWORD *)v244;
          v248 = v436;
        }
        *(_OWORD *)(v247 + 16 * v246) = v248;
        ++*(_DWORD *)(v244 + 12);
      }
LABEL_355:
      --v235;
    }
    while (v235 != -1);
  }
  v431 = 0uLL;
  v436 = xmmword_19914FB90;
  LOBYTE(v437[0]) = 0;
  v250 = WTF::Vector<JSC::FTL::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v431, 1uLL, (unint64_t)&v436);
  v258 = HIDWORD(v431);
  v259 = v431;
  v260 = v431 + 24 * HIDWORD(v431);
  v261 = *(_QWORD *)(v250 + 16);
  *(_OWORD *)v260 = *(_OWORD *)v250;
  *(_QWORD *)(v260 + 16) = v261;
  v262 = __CFADD__(v258, 1);
  v263 = (v258 + 1);
  HIDWORD(v431) = v263;
  if (v262)
  {
    v266 = a1;
  }
  else
  {
    v264 = 0;
    v265 = 0;
    v267 = v411;
    v266 = a1;
    v268 = (uint64_t)v413;
    do
    {
      v270 = v259 + 24 * v263;
      v272 = *(_QWORD *)(v270 - 24);
      v271 = *(_QWORD *)(v270 - 16);
      v273 = v271;
      v274 = *(unsigned __int8 *)(v270 - 8);
      v269 = (v263 - 1);
      HIDWORD(v431) = v263 - 1;
      if (v274 == 1)
      {
        v275 = v268;
        if (!(_BYTE)v271)
        {
          v276 = *(_DWORD *)(v272 + 8);
          if (*((_DWORD *)v266 + 5) <= v276)
          {
            __break(0xC471u);
            JUMPOUT(0x1983DCB64);
          }
          v275 = *v267 + 40 * v276;
        }
        *(_DWORD *)(v275 + 36) = v265++;
      }
      else if (!v274)
      {
        v277 = v268;
        if (!(_BYTE)v271)
        {
          v278 = *(_DWORD *)(v272 + 8);
          if (*((_DWORD *)v266 + 5) <= v278)
          {
            __break(0xC471u);
            JUMPOUT(0x1983DCB6CLL);
          }
          v277 = *v267 + 40 * v278;
        }
        *(_DWORD *)(v277 + 32) = v264;
        *(_QWORD *)&v436 = v272;
        *((_QWORD *)&v436 + 1) = v271;
        LOBYTE(v437[0]) = 1;
        if ((_DWORD)v269 == DWORD2(v431))
        {
          v288 = WTF::Vector<JSC::FTL::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v431, v263, (unint64_t)&v436);
          v266 = a1;
          v268 = (uint64_t)v413;
          v267 = v411;
          v289 = HIDWORD(v431);
          v259 = v431;
          v290 = v431 + 24 * HIDWORD(v431);
          v291 = *(_QWORD *)(v288 + 16);
          *(_OWORD *)v290 = *(_OWORD *)v288;
          *(_QWORD *)(v290 + 16) = v291;
          v263 = (v289 + 1);
        }
        else
        {
          v279 = v436;
          v280 = v259 + 24 * v269;
          *(_QWORD *)(v280 + 16) = v437[0];
          *(_OWORD *)v280 = v279;
        }
        HIDWORD(v431) = v263;
        v281 = v268;
        if (!v273)
        {
          v282 = *(_DWORD *)(v272 + 8);
          if (*((_DWORD *)v266 + 5) <= v282)
          {
            __break(0xC471u);
            JUMPOUT(0x1983DCB74);
          }
          v281 = *v267 + 40 * v282;
        }
        ++v264;
        v283 = *(unsigned int *)(v281 + 12);
        if ((_DWORD)v283)
        {
          v284 = *(__int128 **)v281;
          v285 = 16 * v283;
          do
          {
            v436 = *v284;
            LOBYTE(v437[0]) = 0;
            if ((_DWORD)v263 == DWORD2(v431))
            {
              v292 = WTF::Vector<JSC::FTL::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v431, v263 + 1, (unint64_t)&v436);
              v266 = a1;
              v268 = (uint64_t)v413;
              v267 = v411;
              LODWORD(v263) = HIDWORD(v431);
              v259 = v431;
              v293 = v431 + 24 * HIDWORD(v431);
              v294 = *(_QWORD *)(v292 + 16);
              *(_OWORD *)v293 = *(_OWORD *)v292;
              *(_QWORD *)(v293 + 16) = v294;
            }
            else
            {
              v286 = v436;
              v287 = v259 + 24 * v263;
              *(_QWORD *)(v287 + 16) = v437[0];
              *(_OWORD *)v287 = v286;
            }
            v263 = (v263 + 1);
            HIDWORD(v431) = v263;
            ++v284;
            v285 -= 16;
          }
          while (v285);
        }
        v269 = v263;
      }
      v263 = v269;
    }
    while ((_DWORD)v269);
  }
  if (v406)
  {
    *(_QWORD *)&v436 = *v266;
    *((_QWORD *)&v436 + 1) = v266;
    WTF::Dominators<JSC::DFG::CPSCFG>::NaiveDominators::NaiveDominators((uint64_t)v437, (uint64_t **)v436);
    v310 = a1;
    v439 = 0;
    v440 = 0;
    v311 = *(unsigned int *)(***a1 + 60);
    v407 = v311 + 1;
    if ((_DWORD)v311 == -1)
    {
LABEL_448:
      WTF::Dominators<JSC::DFG::CPSCFG>::ValidationContext::handleErrors((uint64_t)&v436);
      WTF::Dominators<JSC::B3::CFG>::ValidationContext::~ValidationContext((uint64_t)&v436, v312, v313, v314, v315, v316, v317, v318);
      v266 = a1;
      goto LABEL_392;
    }
    while (1)
    {
      v319 = v311;
      v320 = *v310;
      v410 = v319;
      if (v319)
      {
        v321 = **v320;
        if (*(_DWORD *)(v321 + 60) <= (v407 - 2))
        {
          __break(0xC471u);
          JUMPOUT(0x1983DCEFCLL);
        }
        v322 = *(_QWORD *)(*(_QWORD *)(v321 + 48) + 8 * (v407 - 2));
        v310 = a1;
        v323 = v319;
        if (!v322)
          goto LABEL_457;
        v324 = *(_DWORD *)(v322 + 8);
        if (*((_DWORD *)a1 + 5) <= v324)
        {
          __break(0xC471u);
          JUMPOUT(0x1983DCF04);
        }
        v409 = 0;
        v325 = 0;
        v326 = *v411 + 40 * v324;
        v408 = *(_QWORD *)(*(_QWORD *)(v321 + 48) + 8 * (v407 - 2));
      }
      else
      {
        v408 = 0;
        v322 = 0;
        v409 = 1;
        v325 = 1;
        v326 = (uint64_t)v413;
      }
      v327 = v411;
      v310 = a1;
      v328 = (uint64_t)v413;
      v323 = v410;
      if (*(_DWORD *)(v326 + 32) != -1)
      {
        v329 = *(unsigned int *)(**v320 + 60);
        v330 = v329 + 1;
        if ((_DWORD)v329 != -1)
          break;
      }
LABEL_457:
      --v407;
      v311 = v323 - 1;
      if (!v323)
        goto LABEL_448;
    }
    while (1)
    {
      v331 = v329;
      if (!v329)
        break;
      v332 = ***v310;
      if (*(_DWORD *)(v332 + 60) <= (v330 - 2))
      {
        __break(0xC471u);
        JUMPOUT(0x1983DCEC4);
      }
      v333 = *(_QWORD *)(*(_QWORD *)(v332 + 48) + 8 * (v330 - 2));
      if (v333)
      {
        v334 = *(_DWORD *)(v333 + 8);
        if (*((_DWORD *)v310 + 5) <= v334)
        {
          __break(0xC471u);
          JUMPOUT(0x1983DCECCLL);
        }
        v335 = 0;
        v336 = 0;
        v337 = *v327 + 40 * v334;
        v338 = v333;
LABEL_465:
        if (*(_DWORD *)(v337 + 32) != -1)
        {
          v339 = v322 == v333 && v325 == v336;
          v340 = v339;
          if (v339)
          {
            v346 = 1;
          }
          else
          {
            v341 = v328;
            if (v331)
            {
              v342 = *(_DWORD *)(v333 + 8);
              if (*((_DWORD *)v310 + 5) <= v342)
              {
                __break(0xC471u);
                JUMPOUT(0x1983DCEDCLL);
              }
              v341 = *v327 + 40 * v342;
            }
            v343 = *(_DWORD *)(v341 + 32);
            v344 = v328;
            if (v323)
            {
              v345 = *(_DWORD *)(v322 + 8);
              if (*((_DWORD *)v310 + 5) <= v345)
              {
                __break(0xC471u);
                JUMPOUT(0x1983DCEE4);
              }
              v344 = *v327 + 40 * v345;
            }
            if (v343 > *(_DWORD *)(v344 + 32))
            {
              v360 = v328;
              if (v331)
              {
                v361 = *(_DWORD *)(v333 + 8);
                if (*((_DWORD *)a1 + 5) <= v361)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983DCF0CLL);
                }
                v360 = *v411 + 40 * v361;
              }
              v362 = *(_DWORD *)(v360 + 36);
              v363 = (uint64_t)v413;
              if (v410)
              {
                v364 = *(_DWORD *)(v322 + 8);
                if (*((_DWORD *)a1 + 5) <= v364)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983DCF14);
                }
                v363 = *v411 + 40 * v364;
              }
              v346 = v362 < *(_DWORD *)(v363 + 36);
              v327 = v411;
              v310 = a1;
              v328 = (uint64_t)v413;
              v323 = v410;
            }
            else
            {
              v346 = 0;
            }
          }
          v347 = v333;
          while (v347 != v322 || v336 != v325)
          {
            v348 = v328;
            if (!v336)
            {
              v349 = *(_DWORD *)(v347 + 8);
              if (*((_DWORD *)v310 + 5) <= v349)
              {
                __break(0xC471u);
                JUMPOUT(0x1983DCEBCLL);
              }
              v348 = *v327 + 40 * v349;
            }
            v347 = *(_QWORD *)(v348 + 16);
            v336 = *(unsigned __int8 *)(v348 + 24);
            if (v347)
              v350 = 0;
            else
              v350 = v336 == 0;
            if (v350)
            {
              if (!v346)
                goto LABEL_496;
              goto LABEL_495;
            }
          }
          if (v346)
            goto LABEL_496;
LABEL_495:
          v351 = v338;
          WTF::Dominators<JSC::DFG::CPSCFG>::ValidationContext::reportError((uint64_t)&v436, v408, v409, v338, v335, (uint64_t)"Range-based domination check is broken", 39);
          v310 = a1;
          v328 = (uint64_t)v413;
          v338 = v351;
          v323 = v410;
          v327 = v411;
LABEL_496:
          if ((v340 & 1) != 0)
          {
            v357 = 1;
          }
          else
          {
            v352 = v328;
            if (v331)
            {
              v353 = *(_DWORD *)(v333 + 8);
              if (*((_DWORD *)v310 + 5) <= v353)
              {
                __break(0xC471u);
                JUMPOUT(0x1983DCEECLL);
              }
              v352 = *v327 + 40 * v353;
            }
            v354 = *(_DWORD *)(v352 + 32);
            v355 = v328;
            if (v323)
            {
              v356 = *(_DWORD *)(v322 + 8);
              if (*((_DWORD *)v310 + 5) <= v356)
              {
                __break(0xC471u);
                JUMPOUT(0x1983DCEF4);
              }
              v355 = *v327 + 40 * v356;
            }
            if (v354 > *(_DWORD *)(v355 + 32))
            {
              v365 = v328;
              if (v331)
              {
                v366 = *(_DWORD *)(v333 + 8);
                if (*((_DWORD *)a1 + 5) <= v366)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983DCF1CLL);
                }
                v365 = *v411 + 40 * v366;
              }
              v367 = *(_DWORD *)(v365 + 36);
              v368 = (uint64_t)v413;
              if (v410)
              {
                v369 = *(_DWORD *)(v322 + 8);
                if (*((_DWORD *)a1 + 5) <= v369)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983DCF24);
                }
                v368 = *v411 + 40 * v369;
              }
              v357 = v367 < *(_DWORD *)(v368 + 36);
              v327 = v411;
              v310 = a1;
              v328 = (uint64_t)v413;
              v323 = v410;
            }
            else
            {
              v357 = 0;
            }
          }
          if (v323)
            v358 = *(_DWORD *)(v322 + 8) + 1;
          else
            v358 = 0;
          if (v331)
            v359 = *(_DWORD *)(v333 + 8) + 1;
          else
            v359 = 0;
          if (v438 <= v359)
          {
            __break(0xC471u);
            JUMPOUT(0x1983DCED4);
          }
          if (v357 != ((*(_DWORD *)(*(_QWORD *)(v437[1] + 16 * v359) + 4 * (v358 >> 5)) >> v358) & 1))
          {
            WTF::Dominators<JSC::DFG::CPSCFG>::ValidationContext::reportError((uint64_t)&v436, v408, v409, v338, v335, (uint64_t)"Lengauer-Tarjan domination is broken", 37);
            v310 = a1;
            v328 = (uint64_t)v413;
            v327 = v411;
          }
        }
      }
      --v330;
      v329 = v331 - 1;
      if (!v331)
        goto LABEL_457;
    }
    v338 = 0;
    v333 = 0;
    v335 = 1;
    v336 = 1;
    v337 = v328;
    goto LABEL_465;
  }
LABEL_392:
  if (v259)
  {
    *(_QWORD *)&v431 = 0;
    DWORD2(v431) = 0;
    WTF::fastFree(v259, (void *)v251, v252, v253, v254, v255, v256, v257);
    v266 = a1;
  }
  v295 = v428;
  if (v428)
  {
    v428 = 0;
    LODWORD(v429) = 0;
    WTF::fastFree((unint64_t)v295, (void *)v251, v252, v253, v254, v255, v256, v257);
    v266 = a1;
  }
  v296 = v424;
  if (v424)
  {
    v424 = 0;
    LODWORD(v425) = 0;
    WTF::fastFree((unint64_t)v296, (void *)v251, v252, v253, v254, v255, v256, v257);
    v266 = a1;
  }
  v297 = (unint64_t)v415;
  if (v416)
  {
    v298 = 88 * v416;
    v299 = (char *)v415 + 56;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v251 = *(_QWORD *)v299;
      if (*(_QWORD *)v299)
        break;
LABEL_401:
      v299 += 88;
      v298 -= 88;
      if (!v298)
      {
        v297 = (unint64_t)v415;
        goto LABEL_409;
      }
    }
    *(_QWORD *)v299 = 0;
    *((_DWORD *)v299 + 2) = 0;
    v301 = *(_QWORD *)(StatusReg + 752);
    if (v301)
    {
      if (!(v251 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v251 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v251)) & 1) != 0)
      {
        goto LABEL_406;
      }
      if (v251 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v251 >> 24)
      {
        v253 = 0;
      }
      else
      {
        v253 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v251 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v251) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)v253 == 1)
        {
LABEL_406:
          v302 = *(unsigned int *)(v301 + 8000);
          if (v302 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v301, v251, (os_unfair_lock_s *)5, v253, v254, v255, v256, v257);
          }
          else
          {
            *(_QWORD *)(v301 + 8 * v302) = v251 | 0x5000000000000;
            *(_DWORD *)(v301 + 8000) = v302 + 1;
          }
          goto LABEL_408;
        }
      }
      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v301, v251, 1, v253, v254, v255, v256, v257);
    }
    else
    {
      pas_try_deallocate_slow_no_cache(v251, (uint64_t)&bmalloc_heap_config, 1);
    }
LABEL_408:
    v266 = a1;
    goto LABEL_401;
  }
LABEL_409:
  if (v297)
  {
    WTF::fastFree(v297, (void *)v251, v252, v253, v254, v255, v256, v257);
    return a1;
  }
  return v266;
}

_OWORD *WTF::Dominators<JSC::DFG::CPSCFG>::ValidationContext::reportError(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  _OWORD *result;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  *(_QWORD *)&v16 = a2;
  BYTE8(v16) = a3;
  *(_QWORD *)&v17 = a4;
  BYTE8(v17) = a5;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  result = (_OWORD *)(a1 + 56);
  v9 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v9 == *(_DWORD *)(a1 + 64))
  {
    result = (_OWORD *)WTF::Vector<WTF::Dominators<JSC::B3::BackwardsCFG>::ValidationContext::Error,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v9 + 1, (unint64_t)&v16);
    v10 = (_OWORD *)(*(_QWORD *)(a1 + 56) + 48 * *(unsigned int *)(a1 + 68));
    v12 = result[1];
    v11 = result[2];
    *v10 = *result;
    v10[1] = v12;
    v10[2] = v11;
  }
  else
  {
    v13 = (_OWORD *)(*(_QWORD *)result + 48 * v9);
    v14 = v16;
    v15 = v18;
    v13[1] = v17;
    v13[2] = v15;
    *v13 = v14;
  }
  ++*(_DWORD *)(a1 + 68);
  return result;
}

uint64_t WTF::Dominators<JSC::DFG::CPSCFG>::ValidationContext::handleErrors(uint64_t result)
{
  uint64_t ***v1;
  double v2;
  float v3;
  float v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t StatusReg;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  float v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  float v41;
  uint64_t *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  double v61;
  float v62;
  uint64_t v63;
  unint64_t v64;
  double v65;
  float v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  WTF *v75;
  WTF *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  WTF *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  char v84;
  uint64_t v85[2];

  if (*(_DWORD *)(result + 68))
  {
    v1 = (uint64_t ***)result;
    WTF::dataLog<char [16]>("DFG DOMINATOR VALIDATION FAILED:\n");
    WTF::dataLog<char [16]>("\n");
    WTF::dataLog<char [16]>("For block domination relationships:\n");
    if (*((_DWORD *)v1 + 17))
    {
      v63 = 0;
      v64 = 0;
      while (1)
      {
        WTF::SingleRootGraph<JSC::DFG::CFG>::dump((uint64_t *)&v76, (uint64_t)v1[7][v63], v1[7][v63 + 1], v2, v3);
        if (v64 >= *((unsigned int *)v1 + 17))
        {
          __break(0xC471u);
          JUMPOUT(0x1983DD78CLL);
        }
        WTF::SingleRootGraph<JSC::DFG::CFG>::dump((uint64_t *)&v80, (uint64_t)v1[7][v63 + 2], v1[7][v63 + 3], v65, v66);
        if (v64 >= *((unsigned int *)v1 + 17))
          break;
        WTF::dataLog<char [5],WTF::CString,char [5],WTF::CString,char [3],WTF::ASCIILiteral,char [3]>("    ", &v76, " -> ", &v80, " (", (uint64_t)&v1[7][v63 + 4], ")\n");
        v74 = v80;
        v80 = 0;
        if (v74)
        {
          if (*(_DWORD *)v74 == 1)
            WTF::fastFree((unint64_t)v74, v67, v68, v69, v70, v71, v72, v73);
          else
            --*(_DWORD *)v74;
        }
        v75 = v76;
        v76 = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 1)
            WTF::fastFree((unint64_t)v75, v67, v68, v69, v70, v71, v72, v73);
          else
            --*(_DWORD *)v75;
        }
        ++v64;
        v63 += 6;
        if (v64 >= *((unsigned int *)v1 + 17))
          goto LABEL_3;
      }
      __break(0xC471u);
    }
    else
    {
LABEL_3:
      WTF::dataLog<char [16]>("\n");
      WTF::dataLog<char [16]>("Control flow graph:\n");
      v5 = ***v1;
      v6 = *(_DWORD *)(v5 + 60);
      if (v6 != -1)
      {
        v7 = 0;
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        v9 = 0.0;
        do
        {
          if (v7)
          {
            if (v7 - 1 >= v6)
            {
              __break(0xC471u);
              JUMPOUT(0x1983DD784);
            }
            v10 = *(_QWORD *)(v5 + 48);
            v11 = *(_QWORD *)(v10 + 8 * (v7 - 1));
            if (!v11)
              goto LABEL_79;
            v12 = 0;
            v13 = *(_QWORD *)(v10 + 8 * (v7 - 1));
          }
          else
          {
            v11 = 0;
            v13 = 0;
            v12 = 1;
          }
          WTF::SingleRootGraph<JSC::DFG::CFG>::dump((uint64_t *)&v76, v13, v12, v9, v4);
          WTF::dataLog<char [11],WTF::CString,char [17]>("    Block ", &v76, ": successors = [");
          v19 = (unint64_t)v76;
          v76 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 != 1)
            {
              --*(_DWORD *)v19;
              goto LABEL_12;
            }
            v55 = *(_QWORD *)(StatusReg + 752);
            if (v55)
            {
              if (v19 >> 43
                || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v19 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v19)) & 1) == 0)
              {
                if (v19 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v19 >> 24)
                {
                  v14 = 0;
LABEL_84:
                  bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v55, v19, 1, v14, v15, v16, v17, v18);
                  goto LABEL_12;
                }
                v14 = (*(_DWORD *)((char *)off_1ECF425F8
                                 + ((((v19 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                 + 24) >> (2 * ((BYTE3(v19) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v14 != 1)
                  goto LABEL_84;
              }
              v56 = *(unsigned int *)(v55 + 8000);
              if (v56 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v55, v19, (os_unfair_lock_s *)5, v14, v15, v16, v17, v18);
              }
              else
              {
                *(_QWORD *)(v55 + 8 * v56) = v19 | 0x5000000000000;
                *(_DWORD *)(v55 + 8000) = v56 + 1;
              }
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v19, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
LABEL_12:
          v80 = (WTF *)", ";
          v81 = 3;
          v82 = &str_24_8;
          v83 = 1;
          v84 = 0;
          WTF::SingleRootGraph<JSC::DFG::CFG>::successors((uint64_t)&v76, (uint64_t)*v1, v11, v12, v15, v16, v17, v18);
          v29 = (uint64_t *)v76;
          v30 = (uint64_t *)((char *)v76 + 16 * HIDWORD(v77));
          if (HIDWORD(v77))
          {
            while (1)
            {
              WTF::SingleRootGraph<JSC::DFG::CFG>::dump(v85, *v29, v29[1], v27, v28);
              WTF::dataLog<WTF::CommaPrinter,WTF::CString>((uint64_t)&v80, v85);
              v20 = v85[0];
              v85[0] = 0;
              if (v20)
              {
                if (*(_DWORD *)v20 == 1)
                {
                  v31 = *(_QWORD *)(StatusReg + 752);
                  if (v31)
                  {
                    if (!(v20 >> 43)
                      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v20 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v20)) & 1) != 0)
                    {
LABEL_21:
                      v32 = *(unsigned int *)(v31 + 8000);
                      if (v32 >= 0x3E7)
                      {
                        pas_thread_local_cache_append_deallocation_slow(v31, v20, (os_unfair_lock_s *)5, v22, v23, v24, v25, v26);
                      }
                      else
                      {
                        *(_QWORD *)(v31 + 8 * v32) = v20 | 0x5000000000000;
                        *(_DWORD *)(v31 + 8000) = v32 + 1;
                      }
                      goto LABEL_16;
                    }
                    if (v20 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v20 >> 24)
                    {
                      v22 = 0;
                    }
                    else
                    {
                      v22 = (*(_DWORD *)((char *)off_1ECF425F8
                                       + ((((v20 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                       + 24) >> (2 * ((BYTE3(v20) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                      if ((_DWORD)v22 == 1)
                        goto LABEL_21;
                    }
                    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v31, v20, 1, v22, v23, v24, v25, v26);
                  }
                  else
                  {
                    pas_try_deallocate_slow_no_cache(v20, (uint64_t)&bmalloc_heap_config, 1);
                  }
                }
                else
                {
                  --*(_DWORD *)v20;
                }
              }
LABEL_16:
              v29 += 2;
              if (v29 == v30)
              {
                v29 = (uint64_t *)v76;
                break;
              }
            }
          }
          if (&v78 != (__int128 *)v29 && v29)
          {
            v76 = 0;
            LODWORD(v77) = 0;
            WTF::fastFree((unint64_t)v29, (void *)v20, v21, v22, v23, v24, v25, v26);
          }
          WTF::dataLog<char [16]>("], predecessors = [");
          v80 = (WTF *)", ";
          v81 = 3;
          v82 = &str_24_8;
          v83 = 1;
          v84 = 0;
          if ((_DWORD)v12)
            goto LABEL_78;
          if (v11)
          {
            v42 = (uint64_t *)(*v1 + 11);
            v43 = (_QWORD *)(2 * *v42);
            v44 = *v42 < 0 ? 63 : *v43;
            v45 = *(unsigned int *)(v11 + 8);
            if (v44 > v45)
            {
              v46 = v43 + 1;
              if (*v42 >= 0)
                v42 = v46;
              if (((*(unint64_t *)((char *)v42 + ((v45 >> 3) & 0x1FFFFFF8)) >> v45) & 1) != 0)
              {
                v76 = (WTF *)&v78;
                v40 = 0.0;
                v78 = xmmword_19914FB90;
                v54 = &v79;
                v53 = (uint64_t *)&v78;
                v77 = 0x100000004;
                while (1)
                {
LABEL_70:
                  WTF::SingleRootGraph<JSC::DFG::CFG>::dump(v85, *v53, v53[1], v40, v41);
                  WTF::dataLog<WTF::CommaPrinter,WTF::CString>((uint64_t)&v80, v85);
                  v33 = v85[0];
                  v85[0] = 0;
                  if (v33)
                  {
                    if (*(_DWORD *)v33 == 1)
                    {
                      v57 = *(_QWORD *)(StatusReg + 752);
                      if (v57)
                      {
                        if (!(v33 >> 43)
                          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v33 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v33)) & 1) != 0)
                        {
LABEL_61:
                          v58 = *(unsigned int *)(v57 + 8000);
                          if (v58 >= 0x3E7)
                          {
                            pas_thread_local_cache_append_deallocation_slow(v57, v33, (os_unfair_lock_s *)5, v35, v36, v37, v38, v39);
                          }
                          else
                          {
                            *(_QWORD *)(v57 + 8 * v58) = v33 | 0x5000000000000;
                            *(_DWORD *)(v57 + 8000) = v58 + 1;
                          }
                          goto LABEL_73;
                        }
                        if (v33 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v33 >> 24)
                        {
                          v35 = 0;
                        }
                        else
                        {
                          v35 = (*(_DWORD *)((char *)off_1ECF425F8
                                           + ((((v33 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                           + 24) >> (2 * ((BYTE3(v33) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                          if ((_DWORD)v35 == 1)
                            goto LABEL_61;
                        }
                        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v57, v33, 1, v35, v36, v37, v38, v39);
                      }
                      else
                      {
                        pas_try_deallocate_slow_no_cache(v33, (uint64_t)&bmalloc_heap_config, 1);
                      }
                    }
                    else
                    {
                      --*(_DWORD *)v33;
                    }
                  }
LABEL_73:
                  v53 += 2;
                  if (v53 == v54)
                  {
                    v53 = (uint64_t *)v76;
                    goto LABEL_75;
                  }
                }
              }
            }
          }
          v76 = (WTF *)&v78;
          v77 = 4;
          v47 = *(unsigned int *)(v11 + 52);
          if ((_DWORD)v47)
          {
            v48 = *(uint64_t **)(v11 + 40);
            v49 = 8 * v47;
            do
            {
              v50 = *v48;
              v85[0] = *v48;
              v51 = HIDWORD(v77);
              if (HIDWORD(v77) == (_DWORD)v77)
              {
                WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>((uint64_t)&v76, v85, v34, v35, v36, v37, v38, v39);
              }
              else
              {
                v52 = (char *)v76 + 16 * HIDWORD(v77);
                *(_QWORD *)v52 = v50;
                v52[8] = 0;
                HIDWORD(v77) = v51 + 1;
              }
              ++v48;
              v49 -= 8;
            }
            while (v49);
            v53 = (uint64_t *)v76;
            if (HIDWORD(v77))
            {
              v54 = (uint64_t *)((char *)v76 + 16 * HIDWORD(v77));
              goto LABEL_70;
            }
LABEL_75:
            if (&v78 != (__int128 *)v53)
            {
              if (v53)
              {
                v76 = 0;
                LODWORD(v77) = 0;
                WTF::fastFree((unint64_t)v53, (void *)v33, v34, v35, v36, v37, v38, v39);
              }
            }
          }
LABEL_78:
          WTF::dataLog<char [16]>("]\n");
          v5 = ***v1;
LABEL_79:
          ++v7;
          v6 = *(_DWORD *)(v5 + 60);
        }
        while (v7 < v6 + 1);
      }
      WTF::dataLog<char [16]>("\n");
      WTF::dataLog<char [16]>("Lengauer-Tarjan Dominators:\n");
      WTF::dataLog<WTF::Dominators<JSC::DFG::CPSCFG>>((uint64_t)v1[1]);
      WTF::dataLog<char [16]>("\n");
      v59 = (WTF *)WTF::dataLog<char [16]>("Naive Dominators:\n");
      v60 = WTF::dataFile(v59);
      WTF::Dominators<JSC::DFG::CPSCFG>::NaiveDominators::dump(v1 + 2, v60, v61, v62);
      WTF::dataLog<char [16]>("\n");
      WTF::dataLog<char [16]>("Graph at time of failure:\n");
      WTF::dataLog<JSC::DFG::CPSCFG>(*v1);
      WTF::dataLog<char [16]>("\n");
      WTF::dataLog<char [16]>("DFG DOMINATOR VALIDATION FAILIED!\n");
      __break(0xC471u);
    }
    JUMPOUT(0x1983DD68CLL);
  }
  return result;
}

uint64_t WTF::Vector<WTF::GraphNodeWith<WTF::SingleRootGraphNode<JSC::DFG::CFG>,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::GraphNodeWith<WTF::SingleRootGraphNode<JSC::DFG::CFG>,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0xAAAAAAB)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 24 * v8;
    v11 = WTF::fastMalloc((WTF *)(24 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v9)
    {
      v19 = 24 * v9;
      v20 = v5;
      do
      {
        v21 = *(_OWORD *)v20;
        *(_QWORD *)(v11 + 16) = *(_QWORD *)(v20 + 16);
        *(_OWORD *)v11 = v21;
        v11 += 24;
        v20 += 24;
        v19 -= 24;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<WTF::GraphNodeWith<WTF::SingleRootGraphNode<JSC::DFG::CFG>,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)a1;
      v7 = *(unsigned int *)(a1 + 12);
      v8 = 24 * v4;
      v9 = WTF::fastMalloc((WTF *)(24 * v4));
      *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v7)
      {
        v17 = 24 * v7;
        v18 = v6;
        do
        {
          v19 = *(_OWORD *)v18;
          *(_QWORD *)(v9 + 16) = *(_QWORD *)(v18 + 16);
          *(_OWORD *)v9 = v19;
          v9 += 24;
          v18 += 24;
          v17 -= 24;
        }
        while (v17);
      }
      if (v6)
      {
        if (*(_QWORD *)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t StatusReg;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *casual;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= a2)
    v14 = a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  if (!(v14 >> 28))
  {
    v15 = *(unsigned int *)(result + 12);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v17 = *(_QWORD *)(StatusReg + 752);
    if (v17)
    {
      v18 = (16 * v14) | 0xF;
      if (v18 <= 0x1AF)
      {
        v19 = 23 * v14 + 7;
      }
      else
      {
        if (v18 >> 5 > 0x138)
          goto LABEL_15;
        v19 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v14 + 626);
        if (*(_DWORD *)(v17 + 8052) <= v19)
          goto LABEL_15;
      }
      v21 = v17 + 8 * v19;
      v22 = v21 + 8064;
      *(_BYTE *)(v21 + 8064) = 1;
      v23 = *(unsigned int *)(v21 + 8080);
      if ((_DWORD)v23)
      {
        *(_DWORD *)(v22 + 16) = v23 - *(_DWORD *)(v22 + 20);
        casual = (_OWORD *)(*(_QWORD *)(v22 + 8) - v23);
      }
      else
      {
        v27 = *(_QWORD *)(v22 + 40);
        v28 = *(_QWORD *)(v22 + 24);
        if (!v27)
        {
          if (*(_BYTE *)(v22 + 5) == 6)
          {
            v32 = *(unsigned int *)(v22 + 32);
            v33 = *(_DWORD *)(v22 + 36);
            if (v32 < v33)
            {
              *(_QWORD *)(v22 + 8 * v32 + 56) = 0;
              v34 = (unint64_t *)(8 * v19 + 8 * v32 + v17 + 8128);
              v35 = v33 - 1 - v32;
              while (v35)
              {
                v28 += 1024;
                v37 = *v34++;
                v36 = v37;
                LODWORD(v32) = v32 + 1;
                --v35;
                if (v37)
                {
                  v27 = __rbit64(v36);
                  *(_DWORD *)(v22 + 32) = v32;
                  *(_QWORD *)(v22 + 24) = v28;
                  goto LABEL_26;
                }
              }
              *(_DWORD *)(v22 + 32) = v33;
            }
          }
          *(_BYTE *)v22 = 0;
          goto LABEL_15;
        }
LABEL_26:
        v29 = __clz(v27);
        *(_QWORD *)(v22 + 40) = v27 & ~(0x8000000000000000 >> v29);
        casual = (_OWORD *)(v28 + 16 * v29);
      }
      *(_BYTE *)v22 = 0;
LABEL_20:
      *(_DWORD *)(v9 + 8) = v14;
      *(_QWORD *)v9 = casual;
      if ((_DWORD)v15)
      {
        v24 = 16 * v15;
        v25 = (__int128 *)v10;
        do
        {
          v26 = *v25++;
          *casual++ = v26;
          v24 -= 16;
        }
        while (v24);
      }
      if (!v10)
        return v8;
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      v30 = *(_QWORD *)(StatusReg + 752);
      if (v30)
      {
        if (!(v10 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v10 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v10)) & 1) != 0)
        {
          goto LABEL_32;
        }
        if (v10 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v10 >> 24)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v10 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v10) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 == 1)
          {
LABEL_32:
            v31 = *(unsigned int *)(v30 + 8000);
            if (v31 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v30, v10, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v30 + 8 * v31) = v10 | 0x5000000000000;
              *(_DWORD *)(v30 + 8000) = v31 + 1;
            }
            return v8;
          }
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v30, v10, 1, a4, a5, a6, a7, a8);
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v10, (uint64_t)&bmalloc_heap_config, 1);
      }
      return v8;
    }
LABEL_15:
    casual = (_OWORD *)bmalloc_allocate_casual(16 * v14, 1);
    goto LABEL_20;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Dominators<JSC::DFG::CPSCFG>::NaiveDominators::NaiveDominators(uint64_t a1, uint64_t **a2)
{
  void ***v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void **v13;
  unint64_t v14;
  uint64_t v15;
  void ***v16;
  unint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t i;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  char *v60;
  int v61;
  WTF *v62;
  BOOL v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  void *v67;
  int v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  BOOL v73;
  unint64_t v75;
  _DWORD *v77;
  WTF *v78;
  uint64_t v79;
  _BYTE v80[64];
  uint64_t v81;

  *(_OWORD *)(a1 + 8) = 0u;
  v3 = (void ***)(a1 + 8);
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 24) = 0u;
  v4 = *(unsigned int *)(**a2 + 60);
  v5 = (v4 + 1);
  if ((_DWORD)v4 == -1)
  {
    v6 = a2;
    v77 = (_DWORD *)(a1 + 20);
    v7 = 31;
    v8 = 31;
  }
  else
  {
    if (v5 <= 0x10)
      v9 = 16;
    else
      v9 = (v4 + 1);
    WTF::Vector<WTF::FastBitVector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 8, v9);
    if (*v3)
    {
      v10 = *(unsigned int *)(a1 + 20);
      if ((_DWORD)v10 != (_DWORD)v5)
        bzero(&(*v3)[2 * v10], (16 * v5 - 16 * v10) & 0xFFFFFFFFFFFFFFF0);
    }
    v8 = v5 + 31;
    v11 = (v5 + 31) >> 5;
    *(_DWORD *)(a1 + 20) = v5;
    v77 = (_DWORD *)(a1 + 20);
    v12 = 2 * v4;
    v75 = v4;
    do
    {
      if (*v77 <= v4)
      {
        __break(0xC471u);
        JUMPOUT(0x1983DE1B8);
      }
      v13 = &(*v3)[v12];
      v14 = (unint64_t)v13[1] + 31;
      if ((v14 ^ v8) >= 0x20)
      {
        if (v11 < v14 >> 5)
          goto LABEL_83;
        v15 = v8;
        v16 = v3;
        v17 = v14 >> 5;
        v18 = (char *)WTF::fastMalloc((WTF *)(4 * v11));
        memcpy(v18, *v13, 4 * v17);
        bzero(&v18[4 * v17], 4 * (v11 - v17));
        if (*v13)
          WTF::fastFree((unint64_t)*v13, v19, v20, v21, v22, v23, v24, v25);
        *v13 = v18;
        v3 = v16;
        v8 = v15;
      }
      v13[1] = (void *)v5;
      v12 -= 2;
      LODWORD(v4) = v4 - 1;
    }
    while ((_DWORD)v4 != -1);
    v7 = *(_QWORD *)(a1 + 32) + 31;
    v4 = v75;
    v6 = a2;
  }
  if ((v7 ^ v8) >= 0x20)
  {
    v26 = (v5 + 31) >> 5;
    if (v26 < v7 >> 5)
    {
      __break(0xC471u);
      JUMPOUT(0x1983DE1A8);
    }
    v27 = v7 >> 5;
    v28 = (char *)WTF::fastMalloc((WTF *)(4 * v26));
    memcpy(v28, *(const void **)(a1 + 24), 4 * v27);
    bzero(&v28[4 * v27], 4 * (v26 - v27));
    v36 = *(_QWORD *)(a1 + 24);
    if (v36)
      WTF::fastFree(v36, v29, v30, v31, v32, v33, v34, v35);
    *(_QWORD *)(a1 + 24) = v28;
    v6 = a2;
  }
  *(_QWORD *)(a1 + 32) = v5;
  if (!*(_DWORD *)(a1 + 20))
  {
    __break(0xC471u);
    JUMPOUT(0x1983DE1D8);
  }
  bzero(**v3, (((unint64_t)(*v3)[1] + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
  if (!*v77)
  {
LABEL_83:
    __break(0xC471u);
    JUMPOUT(0x1983DE188);
  }
  ***(_DWORD ***)(a1 + 8) |= 1u;
  bzero(*(void **)(a1 + 24), ((unint64_t)(*(_QWORD *)(a1 + 32) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
  if ((_DWORD)v5)
  {
    v44 = *v6;
    for (i = v4; i != -1; --i)
    {
      if (!i)
        goto LABEL_30;
      if (*(_DWORD *)(*v44 + 60) <= (i - 1))
      {
        __break(0xC471u);
        JUMPOUT(0x1983DE1B0);
      }
      if (*(_QWORD *)(*(_QWORD *)(*v44 + 48) + 8 * (i - 1)))
LABEL_30:
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * (i >> 5)) |= 1 << i;
    }
    if (v5 >= 2)
    {
      v46 = (uint64_t *)(v6 + 11);
      v47 = v4;
      while (1)
      {
        v48 = **v6;
        if (*(_DWORD *)(v48 + 60) <= (v5 - 2))
        {
          __break(0xC471u);
          JUMPOUT(0x1983DE1C0);
        }
        v49 = *(_QWORD *)(*(_QWORD *)(v48 + 48) + 8 * (v5 - 2));
        if (v49)
        {
          v50 = (unint64_t *)(2 * *v46);
          if (*v46 < 0)
            v51 = 63;
          else
            v51 = *v50;
          v52 = *(unsigned int *)(v49 + 8);
          if (v51 > v52)
          {
            v53 = (uint64_t *)(v50 + 1);
            v54 = *v46 >= 0 ? v53 : v46;
            if (((*(unint64_t *)((char *)v54 + ((v52 >> 3) & 0x1FFFFFF8)) >> v52) & 1) != 0)
            {
LABEL_57:
              if (v47 >= *v77)
              {
                __break(0xC471u);
                JUMPOUT(0x1983DE1D0);
              }
              v64 = *(_QWORD *)(a1 + 8) + 16 * v47;
              v65 = (unint64_t)(*(_QWORD *)(v64 + 8) + 31) >> 5;
              v66 = *(_QWORD *)(a1 + 32) + 31;
              if (v65 == v66 >> 5)
              {
                memcpy(*(void **)v64, *(const void **)(a1 + 24), 4 * v65);
                *(_QWORD *)(v64 + 8) = *(_QWORD *)(a1 + 32);
              }
              else
              {
                v67 = (void *)WTF::fastMalloc((WTF *)((v66 >> 3) & 0x1FFFFFFFFFFFFFFCLL));
                memcpy(v67, *(const void **)(a1 + 24), ((unint64_t)(*(_QWORD *)(a1 + 32) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
                if (*(_QWORD *)v64)
                  WTF::fastFree(*(_QWORD *)v64, v37, v38, v39, v40, v41, v42, v43);
                *(_QWORD *)v64 = v67;
                *(_QWORD *)(v64 + 8) = *(_QWORD *)(a1 + 32);
                v6 = a2;
              }
              goto LABEL_66;
            }
          }
          v78 = (WTF *)v80;
          v79 = 4;
          v55 = *(unsigned int *)(v49 + 52);
          if ((_DWORD)v55)
          {
            v56 = *(uint64_t **)(v49 + 40);
            v57 = 8 * v55;
            do
            {
              v58 = *v56;
              v81 = *v56;
              v59 = HIDWORD(v79);
              if (HIDWORD(v79) == (_DWORD)v79)
              {
                WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>((uint64_t)&v78, &v81, v38, v39, v40, v41, v42, v43);
              }
              else
              {
                v60 = (char *)v78 + 16 * HIDWORD(v79);
                *(_QWORD *)v60 = v58;
                v60[8] = 0;
                HIDWORD(v79) = v59 + 1;
              }
              ++v56;
              v57 -= 8;
            }
            while (v57);
            v61 = HIDWORD(v79);
            v62 = v78;
            v63 = v80 == (_BYTE *)v78 || v78 == 0;
            if (v63)
            {
              if (HIDWORD(v79))
                goto LABEL_57;
            }
            else
            {
              v78 = 0;
              LODWORD(v79) = 0;
              WTF::fastFree((unint64_t)v62, v37, v38, v39, v40, v41, v42, v43);
              if (v61)
                goto LABEL_57;
            }
          }
        }
        if (v47 >= *v77)
        {
          __break(0xC471u);
          JUMPOUT(0x1983DE1C8);
        }
        bzero((*v3)[2 * v47], (((unint64_t)(*v3)[2 * v47 + 1] + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
LABEL_66:
        LODWORD(v5) = v5 - 1;
        if (v47-- <= 1)
        {
          v69 = 0;
          v70 = 1;
          do
          {
            do
            {
              v69 |= WTF::Dominators<JSC::DFG::CPSCFG>::NaiveDominators::pruneDominators((uint64_t ***)a1, (void *)v70, v38, v39, v40, v41, v42, v43);
              v63 = (_DWORD)v70 == (_DWORD)v4;
              v70 = (v70 + 1);
            }
            while (!v63);
            if ((v69 & 1) == 0)
              break;
            v71 = 0;
            v72 = v4;
            do
            {
              v71 |= WTF::Dominators<JSC::DFG::CPSCFG>::NaiveDominators::pruneDominators((uint64_t ***)a1, (void *)v72, v38, v39, v40, v41, v42, v43);
              v73 = (_DWORD)v72 != 0;
              v72 = (v72 - 1);
            }
            while ((_DWORD)v72 != 0 && v73);
            v69 = 0;
            v70 = 1;
          }
          while ((v71 & 1) != 0);
          return a1;
        }
      }
    }
  }
  return a1;
}

uint64_t WTF::Dominators<JSC::DFG::CPSCFG>::NaiveDominators::pruneDominators(uint64_t ***a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char *v24;
  int v25;
  WTF *v26;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD **v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char *v38;
  WTF *v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  WTF *v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  char *v64;
  unsigned int v65;
  WTF *v66;
  __int128 v68;
  uint64_t *v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  char *v79;
  unsigned int v80;
  WTF *v81;
  unsigned int v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t **v85;
  uint64_t v86;
  uint64_t **v88;
  uint64_t **v89;
  unint64_t v90;
  char v91;
  int *v92;
  _DWORD *v93;
  int v94;
  WTF *v96;
  uint64_t v97;
  _OWORD v98[4];
  uint64_t v99;

  if (!(_DWORD)a2)
    goto LABEL_108;
  v8 = a2;
  v10 = *a1;
  v11 = ***a1;
  if (*(_DWORD *)(v11 + 60) <= ((_DWORD)a2 - 1))
  {
    __break(0xC471u);
    JUMPOUT(0x1983DE808);
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * ((_DWORD)a2 - 1));
  if (!v12)
    goto LABEL_108;
  v14 = v10 + 11;
  v13 = (uint64_t)v10[11];
  v15 = *(unsigned int *)(v12 + 8);
  v16 = (unint64_t *)(2 * v13);
  if (v13 < 0)
    v17 = 63;
  else
    v17 = *v16;
  if (v17 <= v15)
    goto LABEL_11;
  v18 = v16 + 1;
  if (v13 >= 0)
    v14 = (_QWORD **)v18;
  if (((*(unint64_t *)((char *)v14 + ((v15 >> 3) & 0x1FFFFFF8)) >> v15) & 1) == 0)
  {
LABEL_11:
    v96 = (WTF *)v98;
    v97 = 4;
    v19 = *(unsigned int *)(v12 + 52);
    if (!(_DWORD)v19)
      goto LABEL_108;
    v20 = *(uint64_t **)(v12 + 40);
    v21 = 8 * v19;
    do
    {
      v22 = *v20;
      v99 = *v20;
      v23 = HIDWORD(v97);
      if (HIDWORD(v97) == (_DWORD)v97)
      {
        WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>((uint64_t)&v96, &v99, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        v24 = (char *)v96 + 16 * HIDWORD(v97);
        *(_QWORD *)v24 = v22;
        v24[8] = 0;
        HIDWORD(v97) = v23 + 1;
      }
      ++v20;
      v21 -= 8;
    }
    while (v21);
    v25 = HIDWORD(v97);
    v26 = v96;
    if (v98 == (_OWORD *)v96 || v96 == 0)
    {
      if (!HIDWORD(v97))
        goto LABEL_108;
    }
    else
    {
      v96 = 0;
      LODWORD(v97) = 0;
      WTF::fastFree((unint64_t)v26, a2, a3, a4, a5, a6, a7, a8);
      if (!v25)
        goto LABEL_108;
    }
    v10 = *a1;
    v13 = (uint64_t)(*a1)[11];
  }
  v28 = *(unsigned int *)(v12 + 8);
  v29 = (unint64_t *)(2 * v13);
  if (v13 < 0)
    v30 = 63;
  else
    v30 = *v29;
  if (v30 <= v28)
    goto LABEL_32;
  v31 = v10 + 11;
  v32 = v29 + 1;
  if (v13 >= 0)
    v31 = (_QWORD **)v32;
  if (((*(unint64_t *)((char *)v31 + ((v28 >> 3) & 0x1FFFFFF8)) >> v28) & 1) != 0)
  {
    v39 = (WTF *)v98;
    v96 = (WTF *)v98;
    v98[0] = xmmword_19914FB90;
    v97 = 0x100000004;
  }
  else
  {
LABEL_32:
    v96 = (WTF *)v98;
    v97 = 4;
    v33 = *(unsigned int *)(v12 + 52);
    if (!(_DWORD)v33)
      goto LABEL_114;
    v34 = *(uint64_t **)(v12 + 40);
    v35 = 8 * v33;
    do
    {
      v36 = *v34;
      v99 = *v34;
      v37 = HIDWORD(v97);
      if (HIDWORD(v97) == (_DWORD)v97)
      {
        WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>((uint64_t)&v96, &v99, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        v38 = (char *)v96 + 16 * HIDWORD(v97);
        *(_QWORD *)v38 = v36;
        v38[8] = 0;
        HIDWORD(v97) = v37 + 1;
      }
      ++v34;
      v35 -= 8;
    }
    while (v35);
    if (!HIDWORD(v97))
    {
LABEL_114:
      __break(0xC471u);
      JUMPOUT(0x1983DE810);
    }
    v39 = v96;
  }
  if (*((_BYTE *)v39 + 8))
    v40 = 0;
  else
    v40 = *(_DWORD *)(*(_QWORD *)v39 + 8) + 1;
  if (*((_DWORD *)a1 + 5) <= v40)
  {
    __break(0xC471u);
    JUMPOUT(0x1983DE818);
  }
  v41 = (uint64_t)&a1[1][2 * v40];
  v42 = ((unint64_t)a1[4] + 31) >> 5;
  v43 = *(_QWORD *)(v41 + 8) + 31;
  if (v42 == v43 >> 5)
  {
    memcpy(a1[3], *(const void **)v41, 4 * v42);
  }
  else
  {
    v44 = (void *)WTF::fastMalloc((WTF *)((v43 >> 3) & 0x1FFFFFFFFFFFFFFCLL));
    memcpy(v44, *(const void **)v41, ((unint64_t)(*(_QWORD *)(v41 + 8) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
    v52 = (unint64_t)a1[3];
    if (v52)
      WTF::fastFree(v52, v45, v46, v47, v48, v49, v50, v51);
    a1[3] = (uint64_t **)v44;
  }
  a1[4] = *(uint64_t ***)(v41 + 8);
  v53 = v96;
  if (v98 != (_OWORD *)v96 && v96)
  {
    v96 = 0;
    LODWORD(v97) = 0;
    WTF::fastFree((unint64_t)v53, v45, v46, v47, v48, v49, v50, v51);
  }
  v54 = (uint64_t *)(*a1 + 11);
  v55 = *(unsigned int *)(v12 + 8);
  v56 = (unint64_t *)(2 * *v54);
  if (*v54 < 0)
    v57 = 63;
  else
    v57 = *v56;
  if (v57 <= v55)
    goto LABEL_70;
  v58 = (uint64_t *)(v56 + 1);
  if (*v54 >= 0)
    v54 = v58;
  if (((*(unint64_t *)((char *)v54 + ((v55 >> 3) & 0x1FFFFFF8)) >> v55) & 1) == 0)
  {
LABEL_70:
    v96 = (WTF *)v98;
    v97 = 4;
    v59 = *(unsigned int *)(v12 + 52);
    if ((_DWORD)v59)
    {
      v60 = *(uint64_t **)(v12 + 40);
      v61 = 8 * v59;
      do
      {
        v62 = *v60;
        v99 = *v60;
        v63 = HIDWORD(v97);
        if (HIDWORD(v97) == (_DWORD)v97)
        {
          WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>((uint64_t)&v96, &v99, v46, v47, v48, v49, v50, v51);
        }
        else
        {
          v64 = (char *)v96 + 16 * HIDWORD(v97);
          *(_QWORD *)v64 = v62;
          v64[8] = 0;
          HIDWORD(v97) = v63 + 1;
        }
        ++v60;
        v61 -= 8;
      }
      while (v61);
      v65 = HIDWORD(v97);
      v66 = v96;
      if (v98 != (_OWORD *)v96 && v96 != 0)
      {
        v96 = 0;
        LODWORD(v97) = 0;
        WTF::fastFree((unint64_t)v66, v45, v46, v47, v48, v49, v50, v51);
      }
      if (v65 >= 2)
      {
        v68 = xmmword_19914FB90;
        while (1)
        {
          v69 = (uint64_t *)(*a1 + 11);
          v70 = (_QWORD *)(2 * *v69);
          v71 = *v69 < 0 ? 63 : *v70;
          v72 = *(unsigned int *)(v12 + 8);
          if (v71 <= v72)
            goto LABEL_79;
          v73 = v70 + 1;
          if (*v69 >= 0)
            v69 = v73;
          if (((*(unint64_t *)((char *)v69 + ((v72 >> 3) & 0x1FFFFFF8)) >> v72) & 1) != 0)
          {
            v96 = (WTF *)v98;
            v98[0] = v68;
            v80 = 1;
            v97 = 0x100000004;
          }
          else
          {
LABEL_79:
            v96 = (WTF *)v98;
            v97 = 4;
            v74 = *(unsigned int *)(v12 + 52);
            if (!(_DWORD)v74)
              break;
            v75 = *(uint64_t **)(v12 + 40);
            v76 = 8 * v74;
            do
            {
              v77 = *v75;
              v99 = *v75;
              v78 = HIDWORD(v97);
              if (HIDWORD(v97) == (_DWORD)v97)
              {
                WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>((uint64_t)&v96, &v99, v46, v47, v48, v49, v50, v51);
                v68 = xmmword_19914FB90;
              }
              else
              {
                v79 = (char *)v96 + 16 * HIDWORD(v97);
                *(_QWORD *)v79 = v77;
                v79[8] = 0;
                HIDWORD(v97) = v78 + 1;
              }
              ++v75;
              v76 -= 8;
            }
            while (v76);
            v80 = HIDWORD(v97);
          }
          if (v80 <= --v65)
            break;
          v81 = v96;
          if (*((_BYTE *)v96 + 16 * v65 + 8))
            v82 = 0;
          else
            v82 = *(_DWORD *)(*((_QWORD *)v96 + 2 * v65) + 8) + 1;
          if (*((_DWORD *)a1 + 5) <= v82)
          {
            __break(0xC471u);
            JUMPOUT(0x1983DE800);
          }
          v83 = (unint64_t)a1[4] + 31;
          if ((v83 & 0x1FFFFFFFE0) != 0)
          {
            v84 = a1[1][2 * v82];
            v85 = a1[3];
            v86 = (v83 >> 5) - 1;
            do
              *((_DWORD *)v85 + v86) &= *((_DWORD *)v84 + v86);
            while ((unint64_t)v86--);
          }
          if (v98 != (_OWORD *)v81 && v81)
          {
            v96 = 0;
            LODWORD(v97) = 0;
            WTF::fastFree((unint64_t)v81, v45, v46, v47, v48, v49, v50, v51);
            v68 = xmmword_19914FB90;
          }
          if (v65 <= 1)
            goto LABEL_100;
        }
LABEL_116:
        __break(0xC471u);
        JUMPOUT(0x1983DE7F8);
      }
    }
  }
LABEL_100:
  v88 = a1[3];
  *(_DWORD *)((char *)v88 + (((unint64_t)v8 >> 3) & 0x1FFFFFFC)) |= 1 << v8;
  if (*((_DWORD *)a1 + 5) <= v8)
    goto LABEL_116;
  v89 = &a1[1][2 * v8];
  v90 = ((unint64_t)v89[1] + 31) >> 5;
  if (!(_DWORD)v90)
  {
LABEL_108:
    v91 = 0;
    return v91 & 1;
  }
  v91 = 0;
  v92 = (int *)v88 + (v90 - 1);
  v93 = (_DWORD *)*v89 + (v90 - 1);
  do
  {
    v94 = *v92--;
    v91 |= *v93 != v94;
    *v93-- = v94;
    LODWORD(v90) = v90 - 1;
  }
  while ((_DWORD)v90);
  return v91 & 1;
}

void WTF::SingleRootGraph<JSC::DFG::CFG>::dump(uint64_t *a1, uint64_t a2, unsigned __int8 a3, double a4, float a5)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  char v20;
  void (**v21)(WTF::StringPrintStream *__hidden);
  _BYTE *v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v21 = off_1E3572250;
  v22 = v24;
  v23 = xmmword_199122F80;
  v24[0] = 0;
  if (a2 | a3)
  {
    if (a3)
    {
      WTF::StringImpl::utf8ForCharacters("#root", 5uLL, (uint64_t)&v18, a5);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v21, "StringView", &v18);
      if (v19 != -1)
        ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v19])(&v20, &v18);
    }
    else if (a2)
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v21, "%s", "#");
      WTF::PrintStream::printf((WTF::PrintStream *)&v21, "%u");
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v21, "%s");
    }
    v21[5]((WTF::StringPrintStream *)&v21);
  }
  else
  {
    WTF::PrintStream::printf((WTF::PrintStream *)&v21, "%s", "<null>");
  }
  v21[5]((WTF::StringPrintStream *)&v21);
  v14 = v22;
  v13 = v23;
  *a1 = 0;
  if (!v14)
  {
    v17 = 0;
LABEL_15:
    WTF::fastFree(v17, v6, v7, v8, v9, v10, v11, v12);
    return;
  }
  if (v13 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x1983DEA00);
  }
  v15 = WTF::fastMalloc((WTF *)(v13 + 17));
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = v13;
  *a1 = v15;
  v16 = v15 + 16;
  memcpy((void *)(v15 + 16), v14, v13);
  *(_BYTE *)(v16 + v13) = 0;
  v17 = (unint64_t)v22;
  if (v22 != v24)
    goto LABEL_15;
}

uint64_t WTF::dataLog<WTF::Dominators<JSC::DFG::CPSCFG>>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  float v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  WTF::PrintStream *v13;
  float v14;
  WTF::PrintStream *v15;
  float v16;
  void (***v17)(WTF::StringPrintStream *__hidden);
  const char *v18;
  WTF::PrintStream *v19;
  float v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  size_t v43;
  size_t v44;
  uint64_t v45;
  size_t v46;
  uint64_t v47;
  unint64_t casual;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::PrintStream *v58;
  uint64_t v59;
  WTF::PrintStream *v60;
  float v61;
  const char *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  const char *v72;
  const char *v73;
  uint64_t v74;
  unsigned int v75;
  unint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  WTF::PrintStream *v82;
  WTF::PrintStream *v83;
  float v84;
  WTF::PrintStream *v85;
  float v86;
  WTF::PrintStream *v87;
  float v88;
  uint64_t v90;
  unint64_t v91;
  unint64_t StatusReg;
  void (***v93)(WTF::StringPrintStream *__hidden);
  int v94;
  char v95;
  void (**v96)(WTF::StringPrintStream *__hidden);
  void *__src;
  size_t __n[2];
  _BYTE v99[128];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v96 = (void (**)(WTF::StringPrintStream *__hidden))&v95;
    v93 = &v96;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v93, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v90 = WTF::s_file;
  v3 = (*(uint64_t (**)(void))(*(_QWORD *)WTF::s_file + 32))();
  v5 = *(_DWORD *)(a1 + 20);
  if (v5 != -1)
  {
    v6 = v3;
    v7 = 0;
    v8 = 0.0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      if (v7)
      {
        v9 = v7 - 1;
        if (v7 - 1 >= v5)
        {
LABEL_140:
          __break(0xC471u);
          JUMPOUT(0x1983DF674);
        }
        v10 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v10 + 40 * v9 + 32) != -1)
        {
          v11 = v10 + 40 * v9;
LABEL_11:
          WTF::SingleRootGraph<JSC::DFG::CFG>::dump((uint64_t *)&v93, *(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), v8, v4);
          v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
          v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
          WTF::StringImpl::utf8ForCharacters("    Block #", 0xBuLL, (uint64_t)&v96, v14);
          WTF::printExpectedCStringHelper(v13, "StringView", &v96);
          if ((_DWORD)__src != -1)
            ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v95, &v96);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
          WTF::PrintStream::printf(v12, "%u", v7);
          v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
          WTF::StringImpl::utf8ForCharacters(": idom = ", 9uLL, (uint64_t)&v96, v16);
          WTF::printExpectedCStringHelper(v15, "StringView", &v96);
          if ((_DWORD)__src != -1)
            ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v95, &v96);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
          v17 = v93;
          v18 = (const char *)(v93 + 2);
          if (!v93)
            v18 = 0;
          WTF::PrintStream::printf(v12, "%s", v18);
          v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
          WTF::StringImpl::utf8ForCharacters(", idomKids = [", 0xEuLL, (uint64_t)&v96, v20);
          WTF::printExpectedCStringHelper(v19, "StringView", &v96);
          if ((_DWORD)__src != -1)
            ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v95, &v96);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
          if (v17)
          {
            if (*(_DWORD *)v17 == 1)
              WTF::fastFree((unint64_t)v17, v21, v22, v23, v24, v25, v26, v27);
            else
              --*(_DWORD *)v17;
          }
          v29 = 0;
          v30 = 0;
          v31 = v7 - 1;
          v91 = v7;
          if (v7)
          {
LABEL_23:
            if (*(_DWORD *)(a1 + 20) <= v31)
            {
              __break(0xC471u);
              JUMPOUT(0x1983DF67CLL);
            }
            v32 = *(_QWORD *)(a1 + 8);
            if (v29 < *(unsigned int *)(v32 + 40 * v31 + 12))
            {
              v33 = v32 + 40 * v31;
              goto LABEL_27;
            }
            v80 = v32 + 40 * v31;
            v81 = (_DWORD *)(v80 + 32);
LABEL_124:
            v82 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
            v83 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v82 + 32))(v82);
            WTF::StringImpl::utf8ForCharacters("], pre/post = ", 0xEuLL, (uint64_t)&v96, v84);
            WTF::printExpectedCStringHelper(v83, "StringView", &v96);
            if ((_DWORD)__src != -1)
              ((void (*)(void (****)(WTF::StringPrintStream *__hidden), void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v93, &v96);
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v82 + 40))(v82);
            WTF::PrintStream::printf(v82, "%u", *v81);
            v85 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v82 + 32))(v82);
            WTF::StringImpl::utf8ForCharacters("/", 1uLL, (uint64_t)&v96, v86);
            WTF::printExpectedCStringHelper(v85, "StringView", &v96);
            if ((_DWORD)__src != -1)
              ((void (*)(void (****)(WTF::StringPrintStream *__hidden), void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v93, &v96);
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v82 + 40))(v82);
            WTF::PrintStream::printf(v82, "%u", *(_DWORD *)(v80 + 36));
            v87 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v82 + 32))(v82);
            WTF::StringImpl::utf8ForCharacters("\n", 1uLL, (uint64_t)&v96, v88);
            WTF::printExpectedCStringHelper(v87, "StringView", &v96);
            if ((_DWORD)__src != -1)
              ((void (*)(void (****)(WTF::StringPrintStream *__hidden), void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v93, &v96);
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v82 + 40))(v82);
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
            v5 = *(_DWORD *)(a1 + 20);
            goto LABEL_131;
          }
          while (2)
          {
            v33 = a1 + 24;
            if (v29 >= *(unsigned int *)(a1 + 36))
            {
              v81 = (_DWORD *)(a1 + 56);
              v80 = a1 + 24;
              goto LABEL_124;
            }
LABEL_27:
            if (v29 >= *(unsigned int *)(v33 + 12))
              goto LABEL_140;
            v34 = *(_QWORD *)v33 + 16 * v29;
            v35 = *(_QWORD *)v34;
            v36 = *(unsigned __int8 *)(v34 + 8);
            v96 = off_1E3572250;
            __src = v99;
            *(_OWORD *)__n = xmmword_199122F80;
            v99[0] = 0;
            if (v35 | v36)
            {
              if (v36)
              {
                WTF::StringImpl::utf8ForCharacters("#root", 5uLL, (uint64_t)&v93, v28);
                if (v94)
                {
                  if (v94 != 1)
LABEL_135:
                    std::__throw_bad_variant_access[abi:sn180100]();
                  if ((_BYTE)v93)
                    v73 = "(failed to convert ";
                  else
                    v73 = "(Out of memory while converting ";
                  WTF::PrintStream::printf((WTF::PrintStream *)&v96, "%s", v73);
                  WTF::PrintStream::printf((WTF::PrintStream *)&v96, "%s", "StringView");
                  WTF::PrintStream::printf((WTF::PrintStream *)&v96, "%s");
                }
                else
                {
                  WTF::PrintStream::printf((WTF::PrintStream *)&v96, "%s");
                }
                if (v94 != -1)
                  ((void (*)(char *, void (****)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v94])(&v95, &v93);
              }
              else if (v35)
              {
                WTF::PrintStream::printf((WTF::PrintStream *)&v96, "%s", "#");
                WTF::PrintStream::printf((WTF::PrintStream *)&v96, "%u");
              }
              else
              {
                WTF::PrintStream::printf((WTF::PrintStream *)&v96, "%s");
              }
              v96[5]((WTF::StringPrintStream *)&v96);
            }
            else
            {
              WTF::PrintStream::printf((WTF::PrintStream *)&v96, "%s", "<null>");
            }
            v96[5]((WTF::StringPrintStream *)&v96);
            v42 = __src;
            if (!__src)
            {
              casual = 0;
              v49 = 0;
              goto LABEL_55;
            }
            v43 = __n[0];
            if (__n[0] >= 0xFFFFFFFFFFFFFFF0)
            {
              __break(0xC471u);
              JUMPOUT(0x1983DF684);
            }
            v44 = __n[0] + 17;
            if (__n[0] == -17)
            {
              __break(0xC471u);
              JUMPOUT(0x1983DF68CLL);
            }
            v45 = *(_QWORD *)(StatusReg + 752);
            if (v45)
            {
              v46 = (__n[0] + 32) >> 4;
              if (__n[0] + 32 <= 0x1AF)
              {
                v47 = 23 * v46 + 7;
              }
              else
              {
                if ((__n[0] + 32) >> 5 > 0x138)
                  break;
                v47 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v46 + 626);
                if (*(_DWORD *)(v45 + 8052) <= v47)
                  break;
              }
              v50 = v45 + 8 * v47;
              v51 = v50 + 8064;
              *(_BYTE *)(v50 + 8064) = 1;
              v52 = *(unsigned int *)(v50 + 8080);
              if ((_DWORD)v52)
              {
                *(_DWORD *)(v51 + 16) = v52 - *(_DWORD *)(v51 + 20);
                casual = *(_QWORD *)(v51 + 8) - v52;
                goto LABEL_53;
              }
              v53 = *(_QWORD *)(v51 + 40);
              v54 = *(_QWORD *)(v51 + 24);
              if (v53)
              {
LABEL_52:
                v55 = __clz(v53);
                *(_QWORD *)(v51 + 40) = v53 & ~(0x8000000000000000 >> v55);
                casual = v54 + 16 * v55;
LABEL_53:
                *(_BYTE *)v51 = 0;
LABEL_54:
                *(_DWORD *)casual = 1;
                *(_QWORD *)(casual + 8) = v43;
                memcpy((void *)(casual + 16), v42, v43);
                *(_BYTE *)(casual + 16 + v43) = 0;
                v49 = (unint64_t)__src;
                if (__src != v99)
                {
LABEL_55:
                  v56 = *(_QWORD *)(StatusReg + 752);
                  if (v56)
                  {
                    if (v49 >> 43
                      || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v49 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v49)) & 1) == 0)
                    {
                      if (v49 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v49 >> 24)
                      {
                        v37 = 0;
                      }
                      else
                      {
                        v37 = (*(_DWORD *)((char *)off_1ECF425F8
                                         + ((((v49 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                         + 24) >> (2 * ((BYTE3(v49) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                        if ((_DWORD)v37 == 1)
                          goto LABEL_58;
                      }
                      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v56, v49, 1, v37, v38, v39, v40, v41);
                    }
                    else
                    {
LABEL_58:
                      v57 = *(unsigned int *)(v56 + 8000);
                      if (v57 >= 0x3E7)
                      {
                        pas_thread_local_cache_append_deallocation_slow(v56, v49, (os_unfair_lock_s *)5, v37, v38, v39, v40, v41);
                      }
                      else
                      {
                        *(_QWORD *)(v56 + 8 * v57) = v49 | 0x5000000000000;
                        *(_DWORD *)(v56 + 8000) = v57 + 1;
                      }
                    }
                  }
                  else
                  {
                    pas_try_deallocate_slow_no_cache(v49, (uint64_t)&bmalloc_heap_config, 1);
                  }
                }
                v58 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
                v59 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v58 + 32))(v58);
                v60 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 32))(v59);
                if (v30)
                {
                  WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v96, v61);
                  if ((_DWORD)__src)
                  {
                    if ((_DWORD)__src != 1)
                      goto LABEL_135;
                    if ((_BYTE)v96)
                      v71 = "(failed to convert ";
                    else
                      v71 = "(Out of memory while converting ";
                    WTF::PrintStream::printf(v60, "%s", v71);
                    WTF::PrintStream::printf(v60, "%s", "StringView");
                    v62 = " to utf8)";
                  }
                  else if (v96)
                  {
                    v62 = (const char *)(v96 + 2);
                  }
                  else
                  {
                    v62 = 0;
                  }
                  WTF::PrintStream::printf(v60, "%s", v62);
                  if ((_DWORD)__src != -1)
                    ((void (*)(void (****)(WTF::StringPrintStream *__hidden), void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v93, &v96);
                }
                else
                {
                  WTF::StringImpl::utf8ForCharacters((char *)&str_24_8, 0, (uint64_t)&v96, v61);
                  if ((_DWORD)__src)
                  {
                    if ((_DWORD)__src != 1)
                      goto LABEL_135;
                    if ((_BYTE)v96)
                      v72 = "(failed to convert ";
                    else
                      v72 = "(Out of memory while converting ";
                    WTF::PrintStream::printf(v60, "%s", v72);
                    WTF::PrintStream::printf(v60, "%s", "StringView");
                    WTF::PrintStream::printf(v60, "%s");
                  }
                  else
                  {
                    WTF::PrintStream::printf(v60, "%s");
                  }
                  if ((_DWORD)__src != -1)
                    ((void (*)(void (****)(WTF::StringPrintStream *__hidden), void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v93, &v96);
                  v30 = 1;
                }
                (*(void (**)(uint64_t))(*(_QWORD *)v59 + 40))(v59);
                (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v58 + 40))(v58);
                v63 = (const char *)(casual + 16);
                if (!casual)
                  v63 = 0;
                WTF::PrintStream::printf(v58, "%s", v63);
                (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
                if (casual)
                {
                  if (*(_DWORD *)casual != 1)
                  {
                    --*(_DWORD *)casual;
                    goto LABEL_77;
                  }
                  v69 = *(_QWORD *)(StatusReg + 752);
                  if (v69)
                  {
                    if (casual >> 43
                      || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((casual >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(casual)) & 1) == 0)
                    {
                      if (casual >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= casual >> 24)
                      {
                        v64 = 0;
                      }
                      else
                      {
                        v64 = (*(_DWORD *)((char *)off_1ECF425F8
                                         + ((((casual >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                         + 24) >> (2 * ((BYTE3(casual) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                        if ((_DWORD)v64 == 1)
                          goto LABEL_82;
                      }
                      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v69, casual, 1, v64, v65, v66, v67, v68);
                    }
                    else
                    {
LABEL_82:
                      v70 = *(unsigned int *)(v69 + 8000);
                      if (v70 >= 0x3E7)
                      {
                        pas_thread_local_cache_append_deallocation_slow(v69, casual, (os_unfair_lock_s *)5, v64, v65, v66, v67, v68);
                      }
                      else
                      {
                        *(_QWORD *)(v69 + 8 * v70) = casual | 0x5000000000000;
                        *(_DWORD *)(v69 + 8000) = v70 + 1;
                      }
                    }
                  }
                  else
                  {
                    pas_try_deallocate_slow_no_cache(casual, (uint64_t)&bmalloc_heap_config, 1);
                  }
                }
LABEL_77:
                ++v29;
                v7 = v91;
                if (v91)
                  goto LABEL_23;
                continue;
              }
              if (*(_BYTE *)(v51 + 5) == 6)
              {
                v74 = *(unsigned int *)(v51 + 32);
                v75 = *(_DWORD *)(v51 + 36);
                if (v74 < v75)
                {
                  *(_QWORD *)(v51 + 8 * v74 + 56) = 0;
                  v76 = (unint64_t *)(v45 + 8128 + 8 * v47 + 8 * v74);
                  v77 = v75 - 1 - v74;
                  while (v77)
                  {
                    v54 += 1024;
                    v79 = *v76++;
                    v78 = v79;
                    LODWORD(v74) = v74 + 1;
                    --v77;
                    if (v79)
                    {
                      v53 = __rbit64(v78);
                      *(_DWORD *)(v51 + 32) = v74;
                      *(_QWORD *)(v51 + 24) = v54;
                      goto LABEL_52;
                    }
                  }
                  *(_DWORD *)(v51 + 32) = v75;
                }
              }
              *(_BYTE *)v51 = 0;
            }
            break;
          }
          casual = bmalloc_allocate_casual(v44, 1);
          goto LABEL_54;
        }
      }
      else if (*(_DWORD *)(a1 + 56) != -1)
      {
        v11 = a1 + 24;
        goto LABEL_11;
      }
LABEL_131:
      ++v7;
    }
    while (v7 < v5 + 1);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 40))(v90);
}

uint64_t ***WTF::Dominators<JSC::DFG::CPSCFG>::NaiveDominators::dump(uint64_t ***result, uint64_t a2, double a3, float a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t ***v7;
  unint64_t v8;
  double v9;
  uint64_t v10;
  unsigned __int8 v11;
  WTF::PrintStream *v12;
  void (**v13)(WTF::StringPrintStream *__hidden);
  const char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  size_t v34;
  unint64_t v35;
  unint64_t v36;
  WTF::PrintStream *v37;
  const char *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const void *v57;
  size_t v58;
  unint64_t v59;
  unint64_t v60;
  WTF::PrintStream *v61;
  const char *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  WTF::PrintStream *v71;
  int v72;
  int v73;
  char v74;
  void (**v75)(WTF::StringPrintStream *__hidden);
  _BYTE *v76;
  __int128 v77;
  _BYTE v78[128];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v4 = ***result;
  v5 = *(_DWORD *)(v4 + 60);
  if (v5 != -1)
  {
    v7 = result;
    v8 = 0;
    v9 = 0.0;
    while (1)
    {
      if (v8)
      {
        if (v8 - 1 >= v5)
        {
          __break(0xC471u);
          JUMPOUT(0x1983DFC4CLL);
        }
        v10 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * (v8 - 1));
        if (!v10)
          goto LABEL_61;
        v11 = 0;
      }
      else
      {
        v10 = 0;
        v11 = 1;
      }
      WTF::SingleRootGraph<JSC::DFG::CFG>::dump((uint64_t *)&v75, v10, v11, v9, a4);
      v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v12, "%s", "    Block ");
      v13 = v75;
      v14 = (const char *)(v75 + 2);
      if (!v75)
        v14 = 0;
      WTF::PrintStream::printf(v12, "%s", v14);
      WTF::PrintStream::printf(v12, "%s", ":");
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
          WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
        else
          --*(_DWORD *)v13;
      }
      v23 = ***v7;
      v24 = *(_DWORD *)(v23 + 60);
      if (v24 != -1)
        break;
LABEL_60:
      v71 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v71, "%s", "\n");
      result = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      v4 = ***v7;
LABEL_61:
      ++v8;
      v5 = *(_DWORD *)(v4 + 60);
      if (v8 >= v5 + 1)
        return result;
    }
    if (v8)
      v25 = *(_DWORD *)(v10 + 8) + 1;
    else
      v25 = 0;
    if (!*((_DWORD *)v7 + 5))
      goto LABEL_73;
    if (((*((_DWORD *)*v7[1] + (v25 >> 5)) >> v25) & 1) == 0)
    {
LABEL_33:
      if (v24 - 1 <= 0xFFFFFFFD)
      {
        v46 = 0;
        v47 = 2;
        while (1)
        {
          if (v8)
            v48 = *(_DWORD *)(v10 + 8) + 1;
          else
            v48 = 0;
          if (v46 + 1 >= *((unsigned int *)v7 + 5))
            goto LABEL_73;
          if (((*((_DWORD *)v7[1][v47] + (v48 >> 5)) >> v48) & 1) != 0)
            break;
LABEL_56:
          v24 = *(_DWORD *)(v23 + 60);
          v47 += 2;
          v70 = v46 + 2;
          ++v46;
          if (v70 >= v24 + 1)
            goto LABEL_60;
        }
        if (v46 >= v24)
        {
          __break(0xC471u);
          JUMPOUT(0x1983DFC34);
        }
        v49 = *(_QWORD *)(*(_QWORD *)(v23 + 48) + 8 * v46);
        v75 = off_1E3572250;
        v76 = v78;
        v77 = xmmword_199122F80;
        v78[0] = 0;
        if (v49)
        {
          WTF::PrintStream::printf((WTF::PrintStream *)&v75, "%s", "#");
          WTF::PrintStream::printf((WTF::PrintStream *)&v75, "%u", *(_DWORD *)(v49 + 8));
          v75[5]((WTF::StringPrintStream *)&v75);
        }
        else
        {
          WTF::PrintStream::printf((WTF::PrintStream *)&v75, "%s", "<null>");
        }
        v75[5]((WTF::StringPrintStream *)&v75);
        v57 = v76;
        if (v76)
        {
          v58 = v77;
          if ((unint64_t)v77 >= 0xFFFFFFFFFFFFFFF0)
          {
            __break(0xC471u);
            JUMPOUT(0x1983DFC3CLL);
          }
          if ((_QWORD)v77 == -17)
          {
            __break(0xC471u);
            JUMPOUT(0x1983DFC44);
          }
          v59 = WTF::fastMalloc((WTF *)(v77 + 17));
          *(_DWORD *)v59 = 1;
          *(_QWORD *)(v59 + 8) = v58;
          memcpy((void *)(v59 + 16), v57, v58);
          *(_BYTE *)(v59 + 16 + v58) = 0;
          v60 = (unint64_t)v76;
          if (v76 == v78)
            goto LABEL_50;
        }
        else
        {
          v59 = 0;
          v60 = 0;
        }
        WTF::fastFree(v60, v50, v51, v52, v53, v54, v55, v56);
LABEL_50:
        v61 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v61, "%s", " ");
        v62 = (const char *)(v59 + 16);
        if (!v59)
          v62 = 0;
        WTF::PrintStream::printf(v61, "%s", v62);
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
        if (v59)
        {
          if (*(_DWORD *)v59 == 1)
            WTF::fastFree(v59, v63, v64, v65, v66, v67, v68, v69);
          else
            --*(_DWORD *)v59;
        }
        v23 = ***v7;
        goto LABEL_56;
      }
      goto LABEL_60;
    }
    v75 = off_1E3572250;
    v76 = v78;
    v77 = xmmword_199122F80;
    v78[0] = 0;
    WTF::StringImpl::utf8ForCharacters("#root", 5uLL, (uint64_t)&v72, v22);
    WTF::printExpectedCStringHelper((WTF::PrintStream *)&v75, "StringView", &v72);
    if (v73 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v73])(&v74, &v72);
    v75[5]((WTF::StringPrintStream *)&v75);
    v75[5]((WTF::StringPrintStream *)&v75);
    v33 = v76;
    if (v76)
    {
      v34 = v77;
      if ((unint64_t)v77 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x1983DFC54);
      }
      if ((_QWORD)v77 == -17)
      {
LABEL_73:
        __break(0xC471u);
        JUMPOUT(0x1983DFC2CLL);
      }
      v35 = WTF::fastMalloc((WTF *)(v77 + 17));
      *(_DWORD *)v35 = 1;
      *(_QWORD *)(v35 + 8) = v34;
      memcpy((void *)(v35 + 16), v33, v34);
      *(_BYTE *)(v35 + 16 + v34) = 0;
      v36 = (unint64_t)v76;
      if (v76 == v78)
        goto LABEL_27;
    }
    else
    {
      v35 = 0;
      v36 = 0;
    }
    WTF::fastFree(v36, v26, v27, v28, v29, v30, v31, v32);
LABEL_27:
    v37 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v37, "%s", " ");
    v38 = (const char *)(v35 + 16);
    if (!v35)
      v38 = 0;
    WTF::PrintStream::printf(v37, "%s", v38);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    if (v35)
    {
      if (*(_DWORD *)v35 == 1)
        WTF::fastFree(v35, v39, v40, v41, v42, v43, v44, v45);
      else
        --*(_DWORD *)v35;
    }
    v23 = ***v7;
    v24 = *(_DWORD *)(v23 + 60);
    goto LABEL_33;
  }
  return result;
}

uint64_t WTF::dataLog<JSC::DFG::CPSCFG>(_QWORD **a1)
{
  unint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  WTF::PrintStream *v12;
  WTF *v13;
  const char *v14;
  WTF::PrintStream *v15;
  float v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::PrintStream *v25;
  float v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD **v39;
  uint64_t v40;
  void (***v41)(WTF::StringPrintStream *__hidden);
  uint64_t v42;
  void (**v43)(WTF::StringPrintStream *__hidden);
  int v44;
  char *v45;
  WTF *v46;
  WTF *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  size_t v57;
  size_t v58;
  uint64_t v59;
  size_t v60;
  uint64_t v61;
  unint64_t casual;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::PrintStream *v72;
  uint64_t v73;
  WTF::PrintStream *v74;
  float v75;
  const char *v76;
  const char *v77;
  const char *v78;
  const char *v79;
  const char *v80;
  uint64_t v81;
  unsigned int v82;
  unint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  WTF::PrintStream *v88;
  float v89;
  uint64_t v90;
  WTF::PrintStream *v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  float v104;
  WTF *v105;
  int v106;
  WTF *v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  size_t v117;
  size_t v118;
  uint64_t v119;
  size_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF::PrintStream *v132;
  uint64_t v133;
  WTF::PrintStream *v134;
  float v135;
  const char *v136;
  const char *v137;
  const char *v138;
  const char *v139;
  const char *v140;
  const char *v141;
  uint64_t v142;
  unsigned int v143;
  unint64_t *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  WTF::PrintStream *v149;
  float v150;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  unint64_t v156;
  unint64_t StatusReg;
  WTF *v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  char v165;
  void (**v166)(WTF::StringPrintStream *__hidden);
  void *__src;
  size_t __n[2];
  _BYTE v169[128];
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  v1 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v1 != -1)
  {
    v166 = (void (**)(WTF::StringPrintStream *__hidden))&v163;
    v159 = (WTF *)&v166;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v159, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v152 = WTF::s_file;
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)WTF::s_file + 32))();
  v4 = **a1;
  v5 = *(_DWORD *)(v4 + 60);
  if (v5 != -1)
  {
    v6 = v2;
    v7 = 0;
    v155 = (uint64_t *)(a1 + 11);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v8 = 0.0;
    do
    {
      if (v7)
      {
        if (v7 - 1 >= v5)
        {
LABEL_228:
          __break(0xC471u);
          JUMPOUT(0x1983E0E2CLL);
        }
        v9 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * (v7 - 1));
        if (!v9)
          goto LABEL_217;
        v156 = v7;
        v10 = 0;
      }
      else
      {
        v156 = 0;
        v9 = 0;
        v10 = 1;
      }
      WTF::SingleRootGraph<JSC::DFG::CFG>::dump((uint64_t *)&v159, v9, v10, v8, v3);
      v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      v12 = v11;
      v13 = v159;
      v14 = (char *)v159 + 16;
      if (!v159)
        v14 = 0;
      WTF::PrintStream::printf(v11, "%s", v14);
      v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
      WTF::StringImpl::utf8ForCharacters(":\n", 2uLL, (uint64_t)&v166, v16);
      WTF::printExpectedCStringHelper(v15, "StringView", &v166);
      if ((_DWORD)__src != -1)
        ((void (*)(uint64_t *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v163, &v166);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
          WTF::fastFree((unint64_t)v13, v17, v18, v19, v20, v21, v22, v23);
        else
          --*(_DWORD *)v13;
      }
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      v25 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
      WTF::StringImpl::utf8ForCharacters("    Preds: ", 0xBuLL, (uint64_t)&v166, v26);
      WTF::printExpectedCStringHelper(v25, "StringView", &v166);
      if ((_DWORD)__src != -1)
        ((void (*)(WTF **, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v159, &v166);
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      if ((_DWORD)v10)
        goto LABEL_118;
      if (!v9)
        goto LABEL_27;
      v35 = (_QWORD *)(2 * *v155);
      v36 = *v155 < 0 ? 63 : *v35;
      v37 = *(unsigned int *)(v9 + 8);
      if (v36 <= v37)
        goto LABEL_27;
      v38 = v35 + 1;
      v39 = a1 + 11;
      if (*v155 >= 0)
        v39 = (_QWORD **)v38;
      if (((*(unint64_t *)((char *)v39 + ((v37 >> 3) & 0x1FFFFFF8)) >> v37) & 1) != 0)
      {
        v153 = v9;
        v154 = v10;
        v46 = (WTF *)&v161;
        v159 = (WTF *)&v161;
        v161 = xmmword_19914FB90;
        v47 = (WTF *)&v162;
        v160 = 0x100000004;
      }
      else
      {
LABEL_27:
        v159 = (WTF *)&v161;
        v160 = 4;
        v40 = *(unsigned int *)(v9 + 52);
        if (!(_DWORD)v40)
          goto LABEL_118;
        v154 = v10;
        v41 = *(void (****)(WTF::StringPrintStream *__hidden))(v9 + 40);
        v42 = 8 * v40;
        do
        {
          v43 = *v41;
          v166 = *v41;
          v44 = HIDWORD(v160);
          if (HIDWORD(v160) == (_DWORD)v160)
          {
            WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>((uint64_t)&v159, &v166, v28, v29, v30, v31, v32, v33);
          }
          else
          {
            v45 = (char *)v159 + 16 * HIDWORD(v160);
            *(_QWORD *)v45 = v43;
            v45[8] = 0;
            HIDWORD(v160) = v44 + 1;
          }
          ++v41;
          v42 -= 8;
        }
        while (v42);
        v46 = v159;
        if (!HIDWORD(v160))
          goto LABEL_115;
        v153 = v9;
        v47 = (WTF *)((char *)v159 + 16 * HIDWORD(v160));
      }
      v48 = 0;
      do
      {
        v49 = *(_QWORD *)v46;
        v50 = *((unsigned __int8 *)v46 + 8);
        v166 = off_1E3572250;
        __src = v169;
        *(_OWORD *)__n = xmmword_199122F80;
        v169[0] = 0;
        if (v49 | v50)
        {
          if (v50)
          {
            WTF::StringImpl::utf8ForCharacters("#root", 5uLL, (uint64_t)&v163, v34);
            WTF::printExpectedCStringHelper((WTF::PrintStream *)&v166, "StringView", &v163);
            if (v164 != -1)
              ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v164])(&v165, &v163);
          }
          else if (v49)
          {
            WTF::PrintStream::printf((WTF::PrintStream *)&v166, "%s", "#");
            WTF::PrintStream::printf((WTF::PrintStream *)&v166, "%u");
          }
          else
          {
            WTF::PrintStream::printf((WTF::PrintStream *)&v166, "%s");
          }
          v166[5]((WTF::StringPrintStream *)&v166);
        }
        else
        {
          WTF::PrintStream::printf((WTF::PrintStream *)&v166, "%s", "<null>");
        }
        v166[5]((WTF::StringPrintStream *)&v166);
        v56 = __src;
        if (!__src)
        {
          casual = 0;
          v63 = 0;
          goto LABEL_62;
        }
        v57 = __n[0];
        if (__n[0] >= 0xFFFFFFFFFFFFFFF0)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E0E3CLL);
        }
        v58 = __n[0] + 17;
        if (__n[0] == -17)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E0E44);
        }
        v59 = *(_QWORD *)(StatusReg + 752);
        if (!v59)
          goto LABEL_113;
        v60 = (__n[0] + 32) >> 4;
        if (__n[0] + 32 <= 0x1AF)
        {
          v61 = 23 * v60 + 7;
        }
        else
        {
          if ((__n[0] + 32) >> 5 > 0x138)
            goto LABEL_113;
          v61 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v60 + 626);
          if (*(_DWORD *)(v59 + 8052) <= v61)
            goto LABEL_113;
        }
        v64 = v59 + 8 * v61;
        v65 = v64 + 8064;
        *(_BYTE *)(v64 + 8064) = 1;
        v66 = *(unsigned int *)(v64 + 8080);
        if ((_DWORD)v66)
        {
          *(_DWORD *)(v65 + 16) = v66 - *(_DWORD *)(v65 + 20);
          casual = *(_QWORD *)(v65 + 8) - v66;
LABEL_60:
          *(_BYTE *)v65 = 0;
          goto LABEL_61;
        }
        v67 = *(_QWORD *)(v65 + 40);
        v68 = *(_QWORD *)(v65 + 24);
        if (v67)
        {
LABEL_59:
          v69 = __clz(v67);
          *(_QWORD *)(v65 + 40) = v67 & ~(0x8000000000000000 >> v69);
          casual = v68 + 16 * v69;
          goto LABEL_60;
        }
        if (*(_BYTE *)(v65 + 5) == 6)
        {
          v81 = *(unsigned int *)(v65 + 32);
          v82 = *(_DWORD *)(v65 + 36);
          if (v81 < v82)
          {
            *(_QWORD *)(v65 + 8 * v81 + 56) = 0;
            v83 = (unint64_t *)(v59 + 8128 + 8 * v61 + 8 * v81);
            v84 = v82 - 1 - v81;
            while (v84)
            {
              v68 += 1024;
              v86 = *v83++;
              v85 = v86;
              LODWORD(v81) = v81 + 1;
              --v84;
              if (v86)
              {
                v67 = __rbit64(v85);
                *(_DWORD *)(v65 + 32) = v81;
                *(_QWORD *)(v65 + 24) = v68;
                goto LABEL_59;
              }
            }
            *(_DWORD *)(v65 + 32) = v82;
          }
        }
        *(_BYTE *)v65 = 0;
LABEL_113:
        casual = bmalloc_allocate_casual(v58, 1);
LABEL_61:
        *(_DWORD *)casual = 1;
        *(_QWORD *)(casual + 8) = v57;
        memcpy((void *)(casual + 16), v56, v57);
        *(_BYTE *)(casual + 16 + v57) = 0;
        v63 = (unint64_t)__src;
        if (__src == v169)
          goto LABEL_67;
LABEL_62:
        v70 = *(_QWORD *)(StatusReg + 752);
        if (v70)
        {
          if (v63 >> 43
            || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v63 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v63)) & 1) == 0)
          {
            if (v63 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v63 >> 24)
            {
              v51 = 0;
LABEL_92:
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v70, v63, 1, v51, v52, v53, v54, v55);
              goto LABEL_67;
            }
            v51 = (*(_DWORD *)((char *)off_1ECF425F8
                             + ((((v63 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((BYTE3(v63) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v51 != 1)
              goto LABEL_92;
          }
          v71 = *(unsigned int *)(v70 + 8000);
          if (v71 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v70, v63, (os_unfair_lock_s *)5, v51, v52, v53, v54, v55);
          }
          else
          {
            *(_QWORD *)(v70 + 8 * v71) = v63 | 0x5000000000000;
            *(_DWORD *)(v70 + 8000) = v71 + 1;
          }
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v63, (uint64_t)&bmalloc_heap_config, 1);
        }
LABEL_67:
        v72 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
        v73 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v72 + 32))(v72);
        v74 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 32))(v73);
        if (v48)
        {
          WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v166, v75);
          if ((_DWORD)__src)
          {
            if ((_DWORD)__src != 1)
              goto LABEL_223;
            if ((_BYTE)v166)
              v79 = "(failed to convert ";
            else
              v79 = "(Out of memory while converting ";
            WTF::PrintStream::printf(v74, "%s", v79);
            WTF::PrintStream::printf(v74, "%s", "StringView");
            v76 = " to utf8)";
          }
          else if (v166)
          {
            v76 = (const char *)(v166 + 2);
          }
          else
          {
            v76 = 0;
          }
          WTF::PrintStream::printf(v74, "%s", v76);
          if ((_DWORD)__src != -1)
            ((void (*)(uint64_t *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v163, &v166);
        }
        else
        {
          WTF::StringImpl::utf8ForCharacters((char *)&str_24_8, 0, (uint64_t)&v166, v75);
          if ((_DWORD)__src)
          {
            if ((_DWORD)__src != 1)
LABEL_223:
              std::__throw_bad_variant_access[abi:sn180100]();
            if ((_BYTE)v166)
              v80 = "(failed to convert ";
            else
              v80 = "(Out of memory while converting ";
            WTF::PrintStream::printf(v74, "%s", v80);
            WTF::PrintStream::printf(v74, "%s", "StringView");
            v77 = " to utf8)";
          }
          else if (v166)
          {
            v77 = (const char *)(v166 + 2);
          }
          else
          {
            v77 = 0;
          }
          WTF::PrintStream::printf(v74, "%s", v77);
          if ((_DWORD)__src != -1)
            ((void (*)(uint64_t *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v163, &v166);
          v48 = 1;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v72 + 40))(v72);
        v78 = (const char *)(casual + 16);
        if (!casual)
          v78 = 0;
        WTF::PrintStream::printf(v72, "%s", v78);
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
        if (casual)
        {
          if (*(_DWORD *)casual == 1)
            WTF::fastFree(casual, v27, v28, v29, v30, v31, v32, v33);
          else
            --*(_DWORD *)casual;
        }
        v46 = (WTF *)((char *)v46 + 16);
      }
      while (v46 != v47);
      v46 = v159;
      v9 = v153;
LABEL_115:
      v10 = v154;
      if (&v161 != (__int128 *)v46 && v46)
      {
        v159 = 0;
        LODWORD(v160) = 0;
        WTF::fastFree((unint64_t)v46, v27, v28, v29, v30, v31, v32, v33);
      }
LABEL_118:
      v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      v88 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 32))(v87);
      WTF::StringImpl::utf8ForCharacters("\n", 1uLL, (uint64_t)&v166, v89);
      WTF::printExpectedCStringHelper(v88, "StringView", &v166);
      if ((_DWORD)__src != -1)
        ((void (*)(WTF **, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v159, &v166);
      (*(void (**)(uint64_t))(*(_QWORD *)v87 + 40))(v87);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      v91 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 32))(v90);
      WTF::StringImpl::utf8ForCharacters("    Succs: ", 0xBuLL, (uint64_t)&v166, v92);
      WTF::printExpectedCStringHelper(v91, "StringView", &v166);
      if ((_DWORD)__src != -1)
        ((void (*)(WTF **, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v159, &v166);
      (*(void (**)(uint64_t))(*(_QWORD *)v90 + 40))(v90);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      WTF::SingleRootGraph<JSC::DFG::CFG>::successors((uint64_t)&v159, (uint64_t)a1, v9, v10, v93, v94, v95, v96);
      v105 = v159;
      if (HIDWORD(v160))
      {
        v106 = 0;
        v107 = (WTF *)((char *)v159 + 16 * HIDWORD(v160));
        while (1)
        {
          v108 = *(_QWORD *)v105;
          v109 = *((unsigned __int8 *)v105 + 8);
          v166 = off_1E3572250;
          __src = v169;
          *(_OWORD *)__n = xmmword_199122F80;
          v169[0] = 0;
          if (v108 | v109)
          {
            if (v109)
            {
              WTF::StringImpl::utf8ForCharacters("#root", 5uLL, (uint64_t)&v163, v104);
              if (v164)
              {
                if (v164 != 1)
                  goto LABEL_223;
                v141 = (_BYTE)v163 ? "(failed to convert " : "(Out of memory while converting ";
                WTF::PrintStream::printf((WTF::PrintStream *)&v166, "%s", v141);
                WTF::PrintStream::printf((WTF::PrintStream *)&v166, "%s", "StringView");
                v110 = " to utf8)";
              }
              else
              {
                v110 = v163 ? (const char *)(v163 + 16) : 0;
              }
              WTF::PrintStream::printf((WTF::PrintStream *)&v166, "%s", v110);
              if (v164 != -1)
                ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v164])(&v165, &v163);
            }
            else if (v108)
            {
              WTF::PrintStream::printf((WTF::PrintStream *)&v166, "%s", "#");
              WTF::PrintStream::printf((WTF::PrintStream *)&v166, "%u");
            }
            else
            {
              WTF::PrintStream::printf((WTF::PrintStream *)&v166, "%s");
            }
            v166[5]((WTF::StringPrintStream *)&v166);
          }
          else
          {
            WTF::PrintStream::printf((WTF::PrintStream *)&v166, "%s", "<null>");
          }
          v166[5]((WTF::StringPrintStream *)&v166);
          v116 = __src;
          if (__src)
            break;
          v122 = 0;
          v123 = 0;
LABEL_153:
          v130 = *(_QWORD *)(StatusReg + 752);
          if (v130)
          {
            if (!(v123 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v123 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v123)) & 1) != 0)
            {
LABEL_156:
              v131 = *(unsigned int *)(v130 + 8000);
              if (v131 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v130, v123, (os_unfair_lock_s *)5, v111, v112, v113, v114, v115);
              }
              else
              {
                *(_QWORD *)(v130 + 8 * v131) = v123 | 0x5000000000000;
                *(_DWORD *)(v130 + 8000) = v131 + 1;
              }
              goto LABEL_158;
            }
            if (v123 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v123 >> 24)
            {
              v111 = 0;
            }
            else
            {
              v111 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v123 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v123) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v111 == 1)
                goto LABEL_156;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v130, v123, 1, v111, v112, v113, v114, v115);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v123, (uint64_t)&bmalloc_heap_config, 1);
          }
LABEL_158:
          v132 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
          v133 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v132 + 32))(v132);
          v134 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v133 + 32))(v133);
          if (v106)
          {
            WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v166, v135);
            if ((_DWORD)__src)
            {
              if ((_DWORD)__src != 1)
                goto LABEL_223;
              if ((_BYTE)v166)
                v139 = "(failed to convert ";
              else
                v139 = "(Out of memory while converting ";
              WTF::PrintStream::printf(v134, "%s", v139);
              WTF::PrintStream::printf(v134, "%s", "StringView");
              v136 = " to utf8)";
            }
            else if (v166)
            {
              v136 = (const char *)(v166 + 2);
            }
            else
            {
              v136 = 0;
            }
            WTF::PrintStream::printf(v134, "%s", v136);
            if ((_DWORD)__src != -1)
              ((void (*)(uint64_t *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v163, &v166);
          }
          else
          {
            WTF::StringImpl::utf8ForCharacters((char *)&str_24_8, 0, (uint64_t)&v166, v135);
            if ((_DWORD)__src)
            {
              if ((_DWORD)__src != 1)
                goto LABEL_223;
              if ((_BYTE)v166)
                v140 = "(failed to convert ";
              else
                v140 = "(Out of memory while converting ";
              WTF::PrintStream::printf(v134, "%s", v140);
              WTF::PrintStream::printf(v134, "%s", "StringView");
              v137 = " to utf8)";
            }
            else if (v166)
            {
              v137 = (const char *)(v166 + 2);
            }
            else
            {
              v137 = 0;
            }
            WTF::PrintStream::printf(v134, "%s", v137);
            if ((_DWORD)__src != -1)
              ((void (*)(uint64_t *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v163, &v166);
            v106 = 1;
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v133 + 40))(v133);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v132 + 40))(v132);
          v138 = (const char *)(v122 + 16);
          if (!v122)
            v138 = 0;
          WTF::PrintStream::printf(v132, "%s", v138);
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
          if (v122)
          {
            if (*(_DWORD *)v122 == 1)
              WTF::fastFree(v122, v97, v98, v99, v100, v101, v102, v103);
            else
              --*(_DWORD *)v122;
          }
          v105 = (WTF *)((char *)v105 + 16);
          if (v105 == v107)
          {
            v105 = v159;
            goto LABEL_211;
          }
        }
        v117 = __n[0];
        if (__n[0] >= 0xFFFFFFFFFFFFFFF0)
          goto LABEL_228;
        v118 = __n[0] + 17;
        if (__n[0] == -17)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E0E34);
        }
        v119 = *(_QWORD *)(StatusReg + 752);
        if (v119)
        {
          v120 = (__n[0] + 32) >> 4;
          if (__n[0] + 32 <= 0x1AF)
          {
            v121 = 23 * v120 + 7;
          }
          else
          {
            if ((__n[0] + 32) >> 5 > 0x138)
              goto LABEL_209;
            v121 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v120 + 626);
            if (*(_DWORD *)(v119 + 8052) <= v121)
              goto LABEL_209;
          }
          v124 = v119 + 8 * v121;
          v125 = v124 + 8064;
          *(_BYTE *)(v124 + 8064) = 1;
          v126 = *(unsigned int *)(v124 + 8080);
          if ((_DWORD)v126)
          {
            *(_DWORD *)(v125 + 16) = v126 - *(_DWORD *)(v125 + 20);
            v122 = *(_QWORD *)(v125 + 8) - v126;
            goto LABEL_151;
          }
          v127 = *(_QWORD *)(v125 + 40);
          v128 = *(_QWORD *)(v125 + 24);
          if (v127)
          {
LABEL_150:
            v129 = __clz(v127);
            *(_QWORD *)(v125 + 40) = v127 & ~(0x8000000000000000 >> v129);
            v122 = v128 + 16 * v129;
LABEL_151:
            *(_BYTE *)v125 = 0;
LABEL_152:
            *(_DWORD *)v122 = 1;
            *(_QWORD *)(v122 + 8) = v117;
            memcpy((void *)(v122 + 16), v116, v117);
            *(_BYTE *)(v122 + 16 + v117) = 0;
            v123 = (unint64_t)__src;
            if (__src == v169)
              goto LABEL_158;
            goto LABEL_153;
          }
          if (*(_BYTE *)(v125 + 5) == 6)
          {
            v142 = *(unsigned int *)(v125 + 32);
            v143 = *(_DWORD *)(v125 + 36);
            if (v142 < v143)
            {
              *(_QWORD *)(v125 + 8 * v142 + 56) = 0;
              v144 = (unint64_t *)(v119 + 8128 + 8 * v121 + 8 * v142);
              v145 = v143 - 1 - v142;
              while (v145)
              {
                v128 += 1024;
                v147 = *v144++;
                v146 = v147;
                LODWORD(v142) = v142 + 1;
                --v145;
                if (v147)
                {
                  v127 = __rbit64(v146);
                  *(_DWORD *)(v125 + 32) = v142;
                  *(_QWORD *)(v125 + 24) = v128;
                  goto LABEL_150;
                }
              }
              *(_DWORD *)(v125 + 32) = v143;
            }
          }
          *(_BYTE *)v125 = 0;
        }
LABEL_209:
        v122 = bmalloc_allocate_casual(v118, 1);
        goto LABEL_152;
      }
LABEL_211:
      if (&v161 != (__int128 *)v105 && v105)
      {
        v159 = 0;
        LODWORD(v160) = 0;
        WTF::fastFree((unint64_t)v105, v97, v98, v99, v100, v101, v102, v103);
      }
      v148 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      v149 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v148 + 32))(v148);
      WTF::StringImpl::utf8ForCharacters("\n", 1uLL, (uint64_t)&v166, v150);
      WTF::printExpectedCStringHelper(v149, "StringView", &v166);
      if ((_DWORD)__src != -1)
        ((void (*)(WTF **, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[__src])(&v159, &v166);
      (*(void (**)(uint64_t))(*(_QWORD *)v148 + 40))(v148);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      v7 = v156;
      v4 = **a1;
LABEL_217:
      ++v7;
      v5 = *(_DWORD *)(v4 + 60);
    }
    while (v7 < v5 + 1);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v152 + 40))(v152);
}

unint64_t *WTF::Dominators<JSC::DFG::CFG>::Dominators(unint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  WTF *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v31;
  WTF **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned __int16 v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  WTF **v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  _QWORD *v66;
  unsigned int v67;
  _OWORD *v68;
  _OWORD *v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  WTF *v75;
  char *v76;
  uint64_t v77;
  unsigned int *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  WTF *v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  WTF *v101;
  unint64_t v102;
  char *v103;
  char *v104;
  unint64_t v105;
  _QWORD *v106;
  unsigned int v107;
  WTF *v108;
  unsigned int v109;
  WTF *v110;
  uint64_t v111;
  char *v112;
  unsigned int v113;
  char *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int *v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  int v132;
  _OWORD *v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  unint64_t v142;
  unsigned int v143;
  int v144;
  int v145;
  unint64_t v146;
  unsigned int *v147;
  int v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  _OWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WTF **v156;
  uint64_t v157;
  int v158;
  _OWORD *v159;
  WTF *v160;
  WTF *v161;
  uint64_t v162;
  char *v163;
  unint64_t v164;
  _OWORD *v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unsigned int v178;
  unint64_t v179;
  uint64_t v180;
  _BOOL4 v181;
  uint64_t i;
  uint64_t v183;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _BOOL4 v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  WTF *v199[2];
  uint64_t *v200[2];
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  WTF *v205;
  uint64_t v206;
  WTF *v207;
  uint64_t v208;
  uint64_t v209;
  __int128 v210;

  v8 = a3;
  *a1 = a2;
  a1[1] = 0;
  v10 = (uint64_t *)(a1 + 1);
  v11 = *(_QWORD *)a2;
  a1[2] = 0;
  v12 = *(unsigned int *)(v11 + 60);
  if ((_DWORD)v12)
  {
    if (v12 <= 0x10)
      v13 = 16;
    else
      v13 = *(unsigned int *)(v11 + 60);
    if (v13 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x1983E1DC0);
    }
    v14 = WTF::fastMalloc((WTF *)(32 * v13));
    *((_DWORD *)a1 + 4) = v13;
    a1[1] = v14;
    v15 = *((unsigned int *)a1 + 5);
    if ((_DWORD)v15 != (_DWORD)v12)
    {
      v16 = (_QWORD *)(v14 + 32 * v15);
      do
      {
        *v16 = 0;
        v16[1] = 0;
        v16[2] = 0;
        v16[3] = -1;
        v16 += 4;
      }
      while (v16 != (_QWORD *)(v14 + 32 * v12));
    }
  }
  *((_DWORD *)a1 + 5) = v12;
  v17 = (uint64_t *)*a1;
  v204 = v17;
  v18 = *v17;
  v205 = 0;
  v206 = 0;
  v19 = *(unsigned int *)(v18 + 60);
  if ((_DWORD)v19)
  {
    v20 = 16;
    if (v19 > 0x10)
      v20 = v19;
    if (v20 >= 0x4924925)
    {
      __break(0xC471u);
      JUMPOUT(0x1983E1DC8);
    }
    v21 = 56 * v20;
    v22 = WTF::fastMalloc((WTF *)(56 * v20));
    LODWORD(v206) = v21 / 0x38;
    v205 = (WTF *)v22;
    v23 = v22 + 56 * v19;
    do
    {
      *(_QWORD *)v22 = 0;
      *(_QWORD *)(v22 + 8) = -1;
      *(_OWORD *)(v22 + 16) = 0uLL;
      *(_OWORD *)(v22 + 32) = 0uLL;
      *(_QWORD *)(v22 + 48) = 0;
      v22 += 56;
    }
    while (v22 != v23);
  }
  HIDWORD(v206) = v19;
  v207 = 0;
  v208 = 0;
  v24 = *(_DWORD *)(*v17 + 60);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x1983E1DB8);
  }
  v25 = *(_QWORD **)(*v17 + 48);
  v26 = v205;
  v27 = v24 - 1;
  do
  {
    v28 = v25[v27];
    if (v28)
    {
      v29 = *(_DWORD *)(v28 + 8);
      if (v19 <= v29)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E1CE0);
      }
      *((_QWORD *)v26 + 7 * v29 + 3) = v28;
    }
  }
  while ((unint64_t)v27--);
  v199[1] = 0;
  v200[0] = 0;
  v199[0] = (WTF *)0x8000000000000000;
  *(_QWORD *)&v210 = *v25;
  DWORD2(v210) = 0;
  v31 = *(unsigned int *)(v210 + 8);
  if (v31 < 0x3F
    || (WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v199, v31 + 1, 0),
        ((unint64_t)v199[0] & 0x8000000000000000) != 0))
  {
    v32 = v199;
  }
  else
  {
    v32 = (WTF **)(2 * (uint64_t)v199[0] + 8);
  }
  v33 = (v31 >> 3) & 0x1FFFFFF8;
  v34 = *(uint64_t *)((char *)v32 + v33);
  *(WTF **)((char *)v32 + v33) = (WTF *)(v34 | (1 << v31));
  LODWORD(v35) = HIDWORD(v200[0]);
  v198 = v8;
  if ((v34 & (1 << v31)) == 0)
  {
    if (HIDWORD(v200[0]) == LODWORD(v200[0]))
    {
      v166 = (_OWORD *)WTF::Vector<JSC::DFG::SpeculativeJIT::StringSwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v199[1], HIDWORD(v200[0]) + 1, (unint64_t)&v210);
      LODWORD(v35) = HIDWORD(v200[0]);
      *((_OWORD *)v199[1] + HIDWORD(v200[0])) = *v166;
    }
    else
    {
      *((_OWORD *)v199[1] + HIDWORD(v200[0])) = v210;
    }
    LODWORD(v35) = v35 + 1;
  }
  if ((_DWORD)v35)
  {
    while (1)
    {
      v36 = v199[1];
      v37 = (char *)v199[1] + 16 * v35;
      v38 = *((_QWORD *)v37 - 2);
      v39 = *((unsigned int *)v37 - 2);
      v35 = (v35 - 1);
      HIDWORD(v200[0]) = v35;
      if (!v38)
        goto LABEL_85;
      v209 = v38;
      if (!(_DWORD)v39)
      {
        v40 = *(_DWORD *)(v38 + 8);
        if (HIDWORD(v206) <= v40)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E1D08);
        }
        v41 = HIDWORD(v208);
        *((_DWORD *)v205 + 14 * v40 + 3) = HIDWORD(v208);
        if ((_DWORD)v41 == (_DWORD)v208)
        {
          v66 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v207, v41 + 1, (unint64_t)&v209);
          LODWORD(v41) = HIDWORD(v208);
          *((_QWORD *)v207 + HIDWORD(v208)) = *v66;
        }
        else
        {
          *((_QWORD *)v207 + v41) = v38;
        }
        HIDWORD(v208) = v41 + 1;
        v38 = v209;
      }
      v42 = *(unsigned int *)(v38 + 220);
      v43 = *(_QWORD *)(v38 + 208);
      v44 = v42 - 1;
      v45 = *(_QWORD *)(v43 + 8 * (v42 - 1));
      v46 = *(unsigned __int16 *)(v45 + 18);
      v47 = v46 - 364;
      v48 = v46;
      v49 = v45;
      if ((v46 - 364) >= 0xC)
      {
        v65 = *(unsigned int *)(v38 + 220);
        do
        {
          v49 = *(_QWORD *)(v43 - 16 + 8 * v65);
          v48 = *(unsigned __int16 *)(v49 + 18);
          a2 = (v48 - 364);
          --v65;
        }
        while (a2 > 0xB);
      }
      v50 = 1;
      switch(v48)
      {
        case 364:
          break;
        case 365:
          v50 = 2;
          break;
        case 366:
          v50 = *(_DWORD *)(*(_QWORD *)(v49 + 72) + 12) + 1;
          break;
        case 367:
          v50 = *(_DWORD *)(*(_QWORD *)(v49 + 72) + 12);
          break;
        default:
          v50 = 0;
          break;
      }
      if (v39 < v50)
        break;
LABEL_63:
      if (!(_DWORD)v35)
        goto LABEL_85;
    }
    v51 = *(unsigned __int16 *)(v45 + 18);
    v52 = *(_QWORD *)(v43 + 8 * (v42 - 1));
    if ((unsigned __int16)(v46 - 364) >= 0xCu)
    {
      do
      {
        v52 = *(_QWORD *)(v43 - 16 + 8 * v42);
        v51 = *(unsigned __int16 *)(v52 + 18);
        --v42;
      }
      while ((v51 - 364) > 0xB);
    }
    v53 = 1;
    switch(v51)
    {
      case 364:
        goto LABEL_41;
      case 365:
        v53 = 2;
        goto LABEL_41;
      case 366:
        v53 = *(_DWORD *)(*(_QWORD *)(v52 + 72) + 12) + 1;
        goto LABEL_41;
      case 367:
        v53 = *(_DWORD *)(*(_QWORD *)(v52 + 72) + 12);
LABEL_41:
        if (v53 > (int)v39 + 1)
        {
          *(_QWORD *)&v210 = v38;
          DWORD2(v210) = v39 + 1;
          if ((_DWORD)v35 == LODWORD(v200[0]))
          {
            v69 = (_OWORD *)WTF::Vector<JSC::DFG::SpeculativeJIT::StringSwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v199[1], v35 + 1, (unint64_t)&v210);
            LODWORD(v35) = HIDWORD(v200[0]);
            *((_OWORD *)v199[1] + HIDWORD(v200[0])) = *v69;
            v38 = v209;
          }
          else
          {
            *((_OWORD *)v36 + v35) = v210;
          }
          HIDWORD(v200[0]) = v35 + 1;
          v43 = *(_QWORD *)(v38 + 208);
          v44 = *(unsigned int *)(v38 + 220) - 1;
          v45 = *(_QWORD *)(v43 + 8 * v44);
          v46 = *(unsigned __int16 *)(v45 + 18);
          v47 = v46 - 364;
        }
        break;
      default:
        break;
    }
    if (v47 >= 0xCu)
    {
      do
      {
        v45 = *(_QWORD *)(v43 - 8 + 8 * v44--);
        v46 = *(unsigned __int16 *)(v45 + 18);
      }
      while ((v46 - 364) > 0xB);
    }
    if (v46 == 366)
    {
      v55 = *(_QWORD *)(v45 + 72);
      v67 = *(_DWORD *)(v55 + 12);
      if (v67 <= v39)
      {
        if (v67 != (_DWORD)v39)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E19E8);
        }
      }
      else
      {
        v55 = *(_QWORD *)v55 + 32 * v39;
      }
    }
    else
    {
      if (v46 == 367)
      {
        v197 = *(_QWORD *)(v45 + 72);
        if (*(_DWORD *)(v197 + 12) <= v39)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E1DD0);
        }
        v54 = (_QWORD *)(*(_QWORD *)v197 + 8 * v39);
        goto LABEL_51;
      }
      if (!(_DWORD)v39)
      {
        v54 = (_QWORD *)(v45 + 72);
        if (v46 != 364)
          v54 = (_QWORD *)*v54;
        goto LABEL_51;
      }
      if ((_DWORD)v39 != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E1CD0);
      }
      v55 = *(_QWORD *)(v45 + 72);
    }
    v54 = (_QWORD *)(v55 + 16);
LABEL_51:
    v56 = (_QWORD *)*v54;
    *(_QWORD *)&v210 = *v54;
    DWORD2(v210) = 0;
    v57 = (uint64_t)v199[0];
    if (((unint64_t)v199[0] & 0x8000000000000000) != 0)
      v58 = 63;
    else
      v58 = *(_QWORD *)(2 * (uint64_t)v199[0]);
    v59 = *((unsigned int *)v56 + 2);
    if (v58 <= v59)
    {
      WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v199, v59 + 1, 0);
      v57 = (uint64_t)v199[0];
    }
    if (v57 >= 0)
      v60 = (WTF **)(2 * v57 + 8);
    else
      v60 = v199;
    v61 = (v59 >> 3) & 0x1FFFFFF8;
    v62 = *(uint64_t *)((char *)v60 + v61);
    *(WTF **)((char *)v60 + v61) = (WTF *)(v62 | (1 << v59));
    if ((v62 & (1 << v59)) != 0)
    {
      LODWORD(v35) = HIDWORD(v200[0]);
    }
    else
    {
      v63 = HIDWORD(v200[0]);
      if (HIDWORD(v200[0]) == LODWORD(v200[0]))
      {
        v68 = (_OWORD *)WTF::Vector<JSC::DFG::SpeculativeJIT::StringSwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v199[1], HIDWORD(v200[0]) + 1, (unint64_t)&v210);
        v63 = HIDWORD(v200[0]);
        *((_OWORD *)v199[1] + HIDWORD(v200[0])) = *v68;
      }
      else
      {
        *((_OWORD *)v199[1] + HIDWORD(v200[0])) = v210;
      }
      LODWORD(v35) = v63 + 1;
      HIDWORD(v200[0]) = v63 + 1;
      v64 = *((_DWORD *)v56 + 2);
      if (HIDWORD(v206) <= v64)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E1D30);
      }
      *((_QWORD *)v205 + 7 * v64) = v209;
    }
    goto LABEL_63;
  }
LABEL_85:
  if (v199[1])
    WTF::fastFree((unint64_t)v199[1], (void *)a2, a3, a4, a5, a6, a7, a8);
  if (((unint64_t)v199[0] & 0x8000000000000000) == 0)
    WTF::fastFree(2 * (uint64_t)v199[0], (void *)a2, a3, a4, a5, a6, a7, a8);
  v70 = HIDWORD(v208);
  if (HIDWORD(v208) >= 2)
  {
    do
    {
      --v70;
      v199[0] = 0;
      v71 = HIDWORD(v208);
      if (v70 >= HIDWORD(v208))
      {
        __break(0xC471u);
        JUMPOUT(0x1983E1D38);
      }
      v72 = *((_QWORD *)v207 + v70);
      v199[0] = (WTF *)v72;
      v73 = *(unsigned int *)(v72 + 8);
      v74 = HIDWORD(v206);
      if (HIDWORD(v206) <= v73)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E1D40);
      }
      v75 = v205;
      v76 = (char *)v205 + 56 * v73;
      v77 = *(unsigned int *)(v72 + 52);
      v78 = (unsigned int *)(v76 + 12);
      if ((_DWORD)v77)
      {
        v79 = *(uint64_t **)(v72 + 40);
        v80 = 8 * v77;
        do
        {
          v81 = *v79;
          v82 = *(unsigned int *)(*v79 + 8);
          if (v74 <= v82)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E1CF8);
          }
          if (*((_QWORD *)v75 + 7 * v82 + 2))
          {
            WTF::Dominators<JSC::DFG::CFG>::LengauerTarjan::compress((uint64_t)&v204, *v79, a3, a4, a5, a6, a7, a8);
            v83 = *(unsigned int *)(v81 + 8);
            v74 = HIDWORD(v206);
            if (HIDWORD(v206) <= v83)
            {
              __break(0xC471u);
              JUMPOUT(0x1983E1DA0);
            }
            v75 = v205;
            v82 = *(unsigned int *)(*((_QWORD *)v205 + 7 * v83 + 3) + 8);
          }
          if (v74 <= v82)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E1D00);
          }
          v84 = *v78;
          v85 = *((_DWORD *)v75 + 14 * v82 + 3);
          if (*v78 >= v85)
            v84 = v85;
          *v78 = v84;
          ++v79;
          v80 -= 8;
        }
        while (v80);
        v71 = HIDWORD(v208);
      }
      else
      {
        v84 = *v78;
      }
      if (v71 <= v84)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E1D48);
      }
      v86 = *(unsigned int *)(*((_QWORD *)v207 + v84) + 8);
      if (v74 <= v86)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E1D50);
      }
      v87 = (char *)v75 + 56 * v86;
      v88 = (uint64_t)(v87 + 32);
      v89 = *((unsigned int *)v87 + 11);
      if ((_DWORD)v89 == *((_DWORD *)v87 + 10))
      {
        v106 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v88, v89 + 1, (unint64_t)v199);
        v89 = *(unsigned int *)(v88 + 12);
        *(_QWORD *)(*(_QWORD *)v88 + 8 * v89) = *v106;
        v74 = HIDWORD(v206);
      }
      else
      {
        *(WTF **)(*(_QWORD *)v88 + 8 * v89) = v199[0];
      }
      *(_DWORD *)(v88 + 12) = v89 + 1;
      v90 = *((unsigned int *)v199[0] + 2);
      if (v74 <= v90)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E1D58);
      }
      v91 = *(_QWORD *)v76;
      v92 = v205;
      *((_QWORD *)v205 + 7 * v90 + 2) = *(_QWORD *)v76;
      v93 = *(unsigned int *)(v91 + 8);
      if (v74 <= v93)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E1D60);
      }
      v94 = (char *)v92 + 56 * v93;
      v95 = *((unsigned int *)v94 + 11);
      if ((_DWORD)v95)
      {
        v96 = (uint64_t *)*((_QWORD *)v94 + 4);
        v97 = 8 * v95;
        do
        {
          v98 = *v96;
          v99 = *(unsigned int *)(*v96 + 8);
          v100 = HIDWORD(v206);
          if (HIDWORD(v206) <= v99)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E1D68);
          }
          v101 = v205;
          if (*((_QWORD *)v205 + 7 * v99 + 2))
          {
            WTF::Dominators<JSC::DFG::CFG>::LengauerTarjan::compress((uint64_t)&v204, *v96, a3, a4, a5, a6, a7, a8);
            v99 = *(unsigned int *)(v98 + 8);
            v100 = HIDWORD(v206);
            if (HIDWORD(v206) <= v99)
            {
              __break(0xC471u);
              JUMPOUT(0x1983E1D70);
            }
            v101 = v205;
            v98 = *((_QWORD *)v205 + 7 * v99 + 3);
          }
          if (v100 <= v99)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E1D78);
          }
          v102 = *(unsigned int *)(v98 + 8);
          if (v100 <= v102)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E1D80);
          }
          if (*((_DWORD *)v101 + 14 * v102 + 3) >= *((_DWORD *)v101 + 14 * v99 + 3))
            v98 = *(_QWORD *)v76;
          *((_QWORD *)v101 + 7 * v99 + 6) = v98;
          ++v96;
          v97 -= 8;
        }
        while (v97);
        v93 = *(unsigned int *)(*(_QWORD *)v76 + 8);
        v74 = HIDWORD(v206);
      }
      if (v74 <= v93)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E1D88);
      }
      v103 = (char *)v205 + 56 * v93;
      if (*((_DWORD *)v103 + 10))
      {
        v104 = v103 + 32;
        if (*((_DWORD *)v104 + 3))
          *((_DWORD *)v104 + 3) = 0;
        v105 = *(_QWORD *)v104;
        if (*(_QWORD *)v104)
        {
          *(_QWORD *)v104 = 0;
          *((_DWORD *)v104 + 2) = 0;
          WTF::fastFree(v105, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
      }
    }
    while (v70 > 1);
    v107 = HIDWORD(v208);
    if (HIDWORD(v208) >= 2)
    {
      v108 = v207;
      v109 = HIDWORD(v206);
      v110 = v205;
      v111 = HIDWORD(v208) - 1;
      v112 = (char *)v207 + 8;
      do
      {
        v113 = *(_DWORD *)(*(_QWORD *)v112 + 8);
        if (v109 <= v113)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E1D90);
        }
        v114 = (char *)v110 + 56 * v113;
        v117 = *((_QWORD *)v114 + 6);
        v115 = v114 + 48;
        v116 = v117;
        v118 = *((unsigned int *)v115 - 9);
        if (v107 <= v118)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E1D98);
        }
        if (v116 != *((_QWORD *)v108 + v118))
        {
          v167 = *(_DWORD *)(v116 + 8);
          if (v109 <= v167)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E1DB0);
          }
          *v115 = *((_QWORD *)v110 + 7 * v167 + 6);
        }
        v112 += 8;
        --v111;
      }
      while (v111);
    }
  }
  v119 = *(_DWORD *)(*(_QWORD *)*a1 + 60);
  if (!v119)
    goto LABEL_261;
  v120 = v119 - 1;
  do
  {
    v199[0] = 0;
    v121 = *(_QWORD *)*a1;
    if (*(_DWORD *)(v121 + 60) <= v120)
    {
      __break(0xC471u);
      JUMPOUT(0x1983E1CD8);
    }
    v122 = *(unsigned int **)(*(_QWORD *)(v121 + 48) + 8 * v120);
    v199[0] = (WTF *)v122;
    if (v122)
    {
      v123 = v122[2];
      if (HIDWORD(v206) <= v123)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E1CE8);
      }
      v124 = *((_DWORD *)a1 + 5);
      if (v124 <= v123)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E1CF0);
      }
      v125 = *((_QWORD *)v205 + 7 * v123 + 6);
      v126 = *v10;
      *(_QWORD *)(*v10 + 32 * v123 + 16) = v125;
      if (v125)
      {
        v127 = *(unsigned int *)(v125 + 8);
        if (v124 <= v127)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E1D10);
        }
        v128 = v126 + 32 * v127;
        v129 = *(unsigned int *)(v128 + 12);
        if ((_DWORD)v129 == *(_DWORD *)(v128 + 8))
        {
          v130 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v128, v129 + 1, (unint64_t)v199);
          v129 = *(unsigned int *)(v128 + 12);
          *(_QWORD *)(*(_QWORD *)v128 + 8 * v129) = *v130;
        }
        else
        {
          *(WTF **)(*(_QWORD *)v128 + 8 * v129) = v199[0];
        }
        *(_DWORD *)(v128 + 12) = v129 + 1;
      }
    }
    --v120;
  }
  while (v120 != -1);
  v131 = *(_QWORD *)*a1;
  v132 = *(_DWORD *)(v131 + 60);
  v210 = 0uLL;
  if (!v132)
  {
LABEL_261:
    __break(0xC471u);
    JUMPOUT(0x1983E1DA8);
  }
  v199[0] = **(WTF ***)(v131 + 48);
  LOBYTE(v199[1]) = 0;
  v133 = (_OWORD *)WTF::Vector<JSC::DFG::SpeculativeJIT::StringSwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v210, 1uLL, (unint64_t)v199);
  v141 = HIDWORD(v210);
  v142 = v210;
  *(_OWORD *)(v210 + 16 * HIDWORD(v210)) = *v133;
  v143 = v141 + 1;
  HIDWORD(v210) = v141 + 1;
  if (v141 != -1)
  {
    v144 = 0;
    v145 = 0;
    do
    {
      v146 = v142 + 16 * v143;
      v147 = *(unsigned int **)(v146 - 16);
      v148 = *(unsigned __int8 *)(v146 - 8);
      v149 = v143 - 1;
      HIDWORD(v210) = v143 - 1;
      if (v148 == 1)
      {
        v150 = v147[2];
        if (*((_DWORD *)a1 + 5) <= v150)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E1D18);
        }
        *(_DWORD *)(*v10 + 32 * v150 + 28) = v145++;
      }
      else if (!v148)
      {
        v151 = v147[2];
        if (*((_DWORD *)a1 + 5) <= v151)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E1D20);
        }
        *(_DWORD *)(*v10 + 32 * v151 + 24) = v144;
        v199[0] = (WTF *)v147;
        LOBYTE(v199[1]) = 1;
        if (v149 == DWORD2(v210))
        {
          v152 = (_OWORD *)WTF::Vector<JSC::DFG::SpeculativeJIT::StringSwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v210, v143, (unint64_t)v199);
          v149 = HIDWORD(v210);
          v142 = v210;
        }
        else
        {
          v152 = v199;
        }
        *(_OWORD *)(v142 + 16 * v149) = *v152;
        v149 = ++HIDWORD(v210);
        v153 = v147[2];
        if (*((_DWORD *)a1 + 5) <= v153)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E1D28);
        }
        ++v144;
        v154 = *v10 + 32 * v153;
        v155 = *(unsigned int *)(v154 + 12);
        if ((_DWORD)v155)
        {
          v156 = *(WTF ***)v154;
          v157 = 8 * v155;
          do
          {
            v199[0] = *v156;
            LOBYTE(v199[1]) = 0;
            if (v149 == DWORD2(v210))
            {
              v159 = (_OWORD *)WTF::Vector<JSC::DFG::SpeculativeJIT::StringSwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v210, v149 + 1, (unint64_t)v199);
              v158 = HIDWORD(v210);
              v142 = v210;
              *(_OWORD *)(v210 + 16 * HIDWORD(v210)) = *v159;
            }
            else
            {
              *(_OWORD *)(v142 + 16 * v149) = *(_OWORD *)v199;
              v158 = HIDWORD(v210);
            }
            v149 = v158 + 1;
            HIDWORD(v210) = v149;
            ++v156;
            v157 -= 8;
          }
          while (v157);
        }
      }
      v143 = v149;
    }
    while (v149);
  }
  if (v198)
  {
    v199[0] = (WTF *)*a1;
    v199[1] = (WTF *)a1;
    WTF::Dominators<JSC::DFG::CFG>::NaiveDominators::NaiveDominators(v200, (uint64_t *)v199[0]);
    v202 = 0;
    v203 = 0;
    v168 = *(_DWORD *)(*(_QWORD *)*a1 + 60);
    while (v168)
    {
      --v168;
      v169 = *(_QWORD *)*a1;
      v170 = *(_DWORD *)(v169 + 60);
      if (v170 <= v168)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E1E10);
      }
      v171 = *(_QWORD *)(*(_QWORD *)(v169 + 48) + 8 * v168);
      if (v171)
      {
        v172 = *(unsigned int *)(v171 + 8);
        if (*((_DWORD *)a1 + 5) <= v172)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E1E18);
        }
        if (*(_DWORD *)(*v10 + 32 * v172 + 24) != -1)
        {
          do
          {
            --v170;
            v173 = *(_QWORD *)*a1;
            if (*(_DWORD *)(v173 + 60) <= v170)
            {
              __break(0xC471u);
              JUMPOUT(0x1983E1DE0);
            }
            v174 = *(_QWORD *)(*(_QWORD *)(v173 + 48) + 8 * v170);
            if (v174)
            {
              v175 = *(unsigned int *)(v174 + 8);
              v176 = *((unsigned int *)a1 + 5);
              if (v176 <= v175)
              {
                __break(0xC471u);
                JUMPOUT(0x1983E1DE8);
              }
              v177 = *v10;
              v178 = *(_DWORD *)(*v10 + 32 * v175 + 24);
              if (v178 != -1)
              {
                if (v171 == v174)
                {
                  v189 = 1;
                }
                else
                {
                  v179 = *(unsigned int *)(v171 + 8);
                  if (v176 <= v179)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983E1DF8);
                  }
                  v180 = v177 + 32 * v179;
                  v181 = v178 > *(_DWORD *)(v180 + 24) && *(_DWORD *)(v177 + 32 * v175 + 28) < *(_DWORD *)(v180 + 28);
                  for (i = v177 + 32 * v175; ; i = v177 + 32 * v185)
                  {
                    v183 = *(_QWORD *)(i + 16);
                    if (v183 == v171 || v183 == 0)
                      break;
                    v185 = *(unsigned int *)(v183 + 8);
                    if (v176 <= v185)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1983E1DD8);
                    }
                  }
                  if (v181 != (v183 != 0))
                  {
                    WTF::Dominators<JSC::B3::CFG>::ValidationContext::reportError((uint64_t)v199, v171, v174, (uint64_t)"Range-based domination check is broken", 39);
                    v175 = *(unsigned int *)(v174 + 8);
                    v176 = *((unsigned int *)a1 + 5);
                  }
                  if (v176 <= v175)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983E1E00);
                  }
                  v186 = *(unsigned int *)(v171 + 8);
                  if (v176 <= v186)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983E1E08);
                  }
                  v187 = *v10 + 32 * v175;
                  v188 = *v10 + 32 * v186;
                  v189 = *(_DWORD *)(v187 + 24) > *(_DWORD *)(v188 + 24)
                      && *(_DWORD *)(v187 + 28) < *(_DWORD *)(v188 + 28);
                }
                if (v201 <= v175)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983E1DF0);
                }
                if (v189 != ((*(_DWORD *)(v200[1][2 * v175]
                                         + (((unint64_t)*(unsigned int *)(v171 + 8) >> 3) & 0x1FFFFFFC)) >> *(_DWORD *)(v171 + 8)) & 1))
                  WTF::Dominators<JSC::B3::CFG>::ValidationContext::reportError((uint64_t)v199, v171, v174, (uint64_t)"Lengauer-Tarjan domination is broken", 37);
              }
            }
          }
          while (v170);
        }
      }
    }
    WTF::Dominators<JSC::DFG::CFG>::ValidationContext::handleErrors((uint64_t)v199);
    WTF::Dominators<JSC::B3::CFG>::ValidationContext::~ValidationContext((uint64_t)v199, v190, v191, v192, v193, v194, v195, v196);
  }
  if (v142)
  {
    *(_QWORD *)&v210 = 0;
    DWORD2(v210) = 0;
    WTF::fastFree(v142, v134, v135, v136, v137, v138, v139, v140);
  }
  v160 = v207;
  if (v207)
  {
    v207 = 0;
    LODWORD(v208) = 0;
    WTF::fastFree((unint64_t)v160, v134, v135, v136, v137, v138, v139, v140);
  }
  v161 = v205;
  if (HIDWORD(v206))
  {
    v162 = 56 * HIDWORD(v206);
    v163 = (char *)v205 + 32;
    do
    {
      v164 = *(_QWORD *)v163;
      if (*(_QWORD *)v163)
      {
        *(_QWORD *)v163 = 0;
        *((_DWORD *)v163 + 2) = 0;
        WTF::fastFree(v164, v134, v135, v136, v137, v138, v139, v140);
      }
      v163 += 56;
      v162 -= 56;
    }
    while (v162);
    v161 = v205;
  }
  if (v161)
  {
    v205 = 0;
    LODWORD(v206) = 0;
    WTF::fastFree((unint64_t)v161, v134, v135, v136, v137, v138, v139, v140);
  }
  return a1;
}

uint64_t WTF::Dominators<JSC::DFG::CFG>::ValidationContext::handleErrors(uint64_t result)
{
  JSC::DFG::Graph ***v1;
  uint64_t v2;
  unint64_t v3;
  JSC::DFG::Graph **v4;
  JSC::DFG::Graph *v5;
  JSC::DFG::Graph *v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const char *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  JSC::DFG::Graph **v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  JSC::DFG::Graph **v28;
  uint64_t v29;
  JSC::DFG::Graph *v30;
  WTF *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  char v37;
  JSC::DFG::Graph *v38;

  if (*(_DWORD *)(result + 68))
  {
    v1 = (JSC::DFG::Graph ***)result;
    WTF::dataLog<char [16]>("DFG DOMINATOR VALIDATION FAILED:\n");
    WTF::dataLog<char [16]>("\n");
    WTF::dataLog<char [16]>("For block domination relationships:\n");
    if (*((_DWORD *)v1 + 17))
    {
      v2 = 0;
      v3 = 0;
      do
      {
        v4 = &v1[7][v2];
        v5 = v4[1];
        v33 = (const char *)*v4;
        v38 = v5;
        WTF::dataLog<char [5],WTF::PointerDump<JSC::DFG::BasicBlock>,char [5],WTF::PointerDump<JSC::DFG::BasicBlock>,char [3],WTF::ASCIILiteral,char [3]>(&v33, &v38, (uint64_t)(v4 + 2));
        ++v3;
        v2 += 4;
      }
      while (v3 < *((unsigned int *)v1 + 17));
    }
    WTF::dataLog<char [16]>("\n");
    WTF::dataLog<char [16]>("Control flow graph:\n");
    v6 = **v1;
    v7 = *((unsigned int *)v6 + 15);
    if (!(_DWORD)v7)
      goto LABEL_48;
    v8 = 0;
    v9 = ", ";
LABEL_7:
    v10 = *((_QWORD *)v6 + 6);
    v11 = *(_QWORD *)(v10 + 8 * v8);
    if (!v11)
      goto LABEL_42;
    if (v8 >= v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1983E2204);
    }
    v33 = *(const char **)(v10 + 8 * v8);
    WTF::dataLog<char [11],WTF::PointerDump<JSC::DFG::BasicBlock>,char [17]>(&v33);
    v33 = v9;
    v34 = 3;
    v35 = &str_24_8;
    v36 = 1;
    v37 = 0;
    v12 = *(unsigned int *)(v11 + 220);
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      while (1)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 208) - 8 + v13);
        v15 = *(unsigned __int16 *)(v14 + 18);
        if ((v15 - 364) < 0xC)
          break;
        if ((v15 - 28) < 2 || (v15 - 23) <= 2)
        {
          v13 -= 8;
          if (v13)
            continue;
        }
        goto LABEL_16;
      }
    }
    else
    {
LABEL_16:
      v14 = 0;
    }
    v16 = v9;
    v17 = 1;
    switch(*(_WORD *)(v14 + 18))
    {
      case 0x16C:
        goto LABEL_19;
      case 0x16D:
        v17 = 2;
        goto LABEL_19;
      case 0x16E:
        v26 = *(_DWORD *)(*(_QWORD *)(v14 + 72) + 12);
        v17 = v26 + 1;
        if (v26 == -1)
          goto LABEL_38;
        goto LABEL_19;
      case 0x16F:
        v17 = *(_DWORD *)(*(_QWORD *)(v14 + 72) + 12);
        if (!v17)
          goto LABEL_38;
LABEL_19:
        v18 = 0;
        v19 = 0;
        v20 = (uint64_t *)(v14 + 72);
        break;
      default:
        goto LABEL_38;
    }
    while (1)
    {
      v21 = *(unsigned __int16 *)(v14 + 18);
      if (v21 == 366)
      {
        v24 = (_QWORD *)*v20;
        v25 = *(_DWORD *)(*v20 + 12);
        if (v25 <= v18)
        {
          if (v25 != v18)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E2150);
          }
          v22 = (JSC::DFG::Graph **)(v24 + 2);
          goto LABEL_30;
        }
        v23 = *v24 + 32 * v19;
      }
      else
      {
        if (v21 == 367)
        {
          if (*(_DWORD *)(*v20 + 12) <= v18)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E2178);
          }
          v22 = (JSC::DFG::Graph **)(*(_QWORD *)*v20 + 8 * v19);
          goto LABEL_30;
        }
        if (!v18)
        {
          v22 = (JSC::DFG::Graph **)(v14 + 72);
          if (v21 != 364)
            v22 = (JSC::DFG::Graph **)*v20;
          goto LABEL_30;
        }
        if (v18 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E2170);
        }
        v23 = *v20;
      }
      v22 = (JSC::DFG::Graph **)(v23 + 16);
LABEL_30:
      v38 = *v22;
      WTF::dataLog<WTF::CommaPrinter,WTF::PointerDump<JSC::DFG::BasicBlock>>((uint64_t)&v33, &v38);
      v18 = v19 + 1;
      v19 = (v19 + 1);
      if (v17 == v18)
      {
LABEL_38:
        WTF::dataLog<char [16]>("], predecessors = [");
        v9 = v16;
        v33 = v16;
        v34 = 3;
        v35 = &str_24_8;
        v36 = 1;
        v37 = 0;
        v27 = *(unsigned int *)(v11 + 52);
        if ((_DWORD)v27)
        {
          v28 = *(JSC::DFG::Graph ***)(v11 + 40);
          v29 = 8 * v27;
          do
          {
            v30 = *v28++;
            v38 = v30;
            WTF::dataLog<WTF::CommaPrinter,WTF::PointerDump<JSC::DFG::BasicBlock>>((uint64_t)&v33, &v38);
            v29 -= 8;
          }
          while (v29);
        }
        WTF::dataLog<char [16]>("]\n");
        v6 = **v1;
LABEL_42:
        ++v8;
        v7 = *((unsigned int *)v6 + 15);
        if (v8 >= v7)
        {
LABEL_48:
          WTF::dataLog<char [16]>("\n");
          WTF::dataLog<char [16]>("Lengauer-Tarjan Dominators:\n");
          WTF::dataLog<WTF::Dominators<JSC::DFG::CFG>>((uint64_t)v1[1]);
          WTF::dataLog<char [16]>("\n");
          v31 = (WTF *)WTF::dataLog<char [16]>("Naive Dominators:\n");
          v32 = WTF::dataFile(v31);
          WTF::Dominators<JSC::DFG::CFG>::NaiveDominators::dump((uint64_t **)v1 + 2, v32);
          WTF::dataLog<char [16]>("\n");
          WTF::dataLog<char [16]>("Graph at time of failure:\n");
          WTF::dataLog<JSC::DFG::CFG>(*v1);
          WTF::dataLog<char [16]>("\n");
          WTF::dataLog<char [16]>("DFG DOMINATOR VALIDATION FAILIED!\n");
          __break(0xC471u);
          JUMPOUT(0x1983E21FCLL);
        }
        goto LABEL_7;
      }
    }
  }
  return result;
}

void WTF::Dominators<JSC::DFG::CFG>::LengauerTarjan::compress(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  WTF *v26;
  _QWORD *v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  _BYTE v31[128];

  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_DWORD *)(a1 + 20);
  if (v9 <= v8)
  {
    __break(0xC471u);
    JUMPOUT(0x1983E23E0);
  }
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_DWORD *)(*(_QWORD *)(v11 + 56 * v8 + 16) + 8);
  if (v9 <= v12)
  {
    __break(0xC471u);
    JUMPOUT(0x1983E23E8);
  }
  if (*(_QWORD *)(v11 + 56 * v12 + 16))
  {
    v13 = 0;
    v28 = a2;
    v29 = (WTF *)v31;
    v30 = 16;
    do
    {
      if (v13 == (_DWORD)v30)
      {
        v27 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v29, v13 + 1, (unint64_t)&v28);
        v14 = HIDWORD(v30);
        *((_QWORD *)v29 + HIDWORD(v30)) = *v27;
        v9 = *(_DWORD *)(a1 + 20);
      }
      else
      {
        *((_QWORD *)v29 + v13) = a2;
        v14 = v13;
      }
      v13 = v14 + 1;
      HIDWORD(v30) = v14 + 1;
      v15 = *(_DWORD *)(v28 + 8);
      if (v9 <= v15)
        goto LABEL_31;
      a2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56 * v15 + 16);
      v28 = a2;
    }
    while (a2);
    if (v14 != 1)
    {
      if (v13 < 3)
      {
LABEL_31:
        __break(0xC471u);
        JUMPOUT(0x1983E23D8);
      }
      v16 = v14 - 2;
      do
      {
        v17 = *(_DWORD *)(*((_QWORD *)v29 + v16) + 8);
        if (v9 <= v17)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E23F0);
        }
        v18 = *(_QWORD *)(a1 + 8);
        v19 = v18 + 56 * v17;
        v21 = *(_QWORD *)(v19 + 16);
        v20 = (_QWORD *)(v19 + 16);
        v22 = *(_DWORD *)(v21 + 8);
        if (v9 <= v22)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E23F8);
        }
        v23 = *(_QWORD *)(v18 + 56 * v22 + 24);
        v24 = *(_DWORD *)(v23 + 8);
        if (v9 <= v24)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E2400);
        }
        v25 = *(_DWORD *)(v20[1] + 8);
        if (v9 <= v25)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E2408);
        }
        if (*(_DWORD *)(v18 + 56 * v24 + 12) < *(_DWORD *)(v18 + 56 * v25 + 12))
        {
          v20[1] = v23;
          v18 = *(_QWORD *)(a1 + 8);
        }
        *v20 = *(_QWORD *)(v18 + 56 * v22 + 16);
        --v16;
      }
      while (v16 != -1);
    }
    v26 = v29;
    if (v31 != (_BYTE *)v29)
    {
      if (v29)
      {
        v29 = 0;
        LODWORD(v30) = 0;
        WTF::fastFree((unint64_t)v26, 0, a3, a4, a5, a6, a7, a8);
      }
    }
  }
}

uint64_t **WTF::Dominators<JSC::DFG::CFG>::NaiveDominators::NaiveDominators(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  void ***v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  void **v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int i;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v85;
  void **v86;
  unint64_t v87;
  int *v88;
  _DWORD *v89;
  int v90;
  char v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t *v119;
  void **v120;
  unint64_t v121;
  int *v122;
  _DWORD *v123;
  int v124;
  void ***v127;
  uint64_t v128;

  v2 = a2;
  *a1 = a2;
  *(_OWORD *)(a1 + 1) = 0u;
  v4 = (void ***)(a1 + 1);
  *(_OWORD *)(a1 + 3) = 0u;
  v5 = *(unsigned int *)(*a2 + 60);
  if ((_DWORD)v5)
  {
    if (v5 <= 0x10)
      v6 = 16;
    else
      v6 = *(unsigned int *)(*a2 + 60);
    WTF::Vector<WTF::FastBitVector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 1), v6);
    if (*v4)
    {
      v7 = *((unsigned int *)a1 + 5);
      if ((_DWORD)v7 != (_DWORD)v5)
        bzero(&(*v4)[2 * v7], (16 * v5 - 16 * v7) & 0xFFFFFFFFFFFFFFF0);
    }
    *((_DWORD *)a1 + 5) = v5;
    v8 = (unsigned int *)a1 + 5;
    v9 = v5 + 31;
    v10 = (v5 + 31) >> 5;
    v127 = v4;
    v11 = v5 - 1;
    v12 = 2 * (v5 - 1);
    v128 = v5 + 31;
    do
    {
      if (*v8 <= v11)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E2BD4);
      }
      v13 = v5;
      v14 = &(*v4)[v12];
      v15 = (unint64_t)v14[1] + 31;
      if ((v15 ^ v9) >= 0x20)
      {
        if (v10 < v15 >> 5)
          goto LABEL_122;
        v16 = v15 >> 5;
        v17 = (char *)WTF::fastMalloc((WTF *)(4 * v10));
        memcpy(v17, *v14, 4 * v16);
        bzero(&v17[4 * v16], 4 * (v10 - v16));
        if (*v14)
          WTF::fastFree((unint64_t)*v14, v18, v19, v20, v21, v22, v23, v24);
        *v14 = v17;
        v4 = v127;
        v9 = v128;
      }
      v14[1] = (void *)v13;
      v5 = v13;
      v12 -= 2;
      --v11;
    }
    while (v11 != -1);
    v25 = a1[4];
    v2 = a2;
  }
  else
  {
    v25 = 0;
    v8 = (unsigned int *)a1 + 5;
    v9 = 31;
  }
  v26 = (unint64_t)v25 + 31;
  if ((v26 ^ v9) >= 0x20)
  {
    v27 = (v5 + 31) >> 5;
    if (v27 < v26 >> 5)
    {
      __break(0xC471u);
      JUMPOUT(0x1983E2B94);
    }
    v28 = v26 >> 5;
    v29 = (char *)WTF::fastMalloc((WTF *)(4 * v27));
    memcpy(v29, a1[3], 4 * v28);
    bzero(&v29[4 * v28], 4 * (v27 - v28));
    v37 = (unint64_t)a1[3];
    if (v37)
      WTF::fastFree(v37, v30, v31, v32, v33, v34, v35, v36);
    a1[3] = (uint64_t *)v29;
  }
  a1[4] = (uint64_t *)v5;
  if (!*((_DWORD *)a1 + 5))
  {
    __break(0xC471u);
    JUMPOUT(0x1983E2C14);
  }
  bzero(**v4, (((unint64_t)(*v4)[1] + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
  if (!*v8)
  {
LABEL_122:
    __break(0xC471u);
    JUMPOUT(0x1983E2B74);
  }
  *(_DWORD *)*a1[1] |= 1u;
  bzero(a1[3], (((unint64_t)a1[4] + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
  if (!(_DWORD)v5)
    return a1;
  v38 = *v2;
  v39 = v5 - 1;
  do
  {
    if (*(_DWORD *)(v38 + 60) <= v39)
    {
      __break(0xC471u);
      JUMPOUT(0x1983E2BDCLL);
    }
    if (*(_QWORD *)(*(_QWORD *)(v38 + 48) + 8 * v39))
      *(_DWORD *)((char *)a1[3] + (((unint64_t)v39 >> 3) & 0x1FFFFFFC)) |= 1 << v39;
    --v39;
  }
  while (v39 != -1);
  if (v5 < 2)
    return a1;
  v40 = (v5 - 1);
  v41 = 2 * v40;
  for (i = v5; i > 1; --i)
  {
    if (*(_DWORD *)(*v2 + 60) <= v40)
    {
      __break(0xC471u);
      JUMPOUT(0x1983E2BE4);
    }
    v43 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v40);
    if (v43 && *(_DWORD *)(v43 + 52))
    {
      if (*v8 <= v40)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E2BFCLL);
      }
      v44 = (uint64_t)&a1[1][v41];
      v45 = (unint64_t)(*(_QWORD *)(v44 + 8) + 31) >> 5;
      v46 = (unint64_t)a1[4] + 31;
      if (v45 == v46 >> 5)
      {
        memcpy(*(void **)v44, a1[3], 4 * v45);
        v55 = a1[4];
      }
      else
      {
        v47 = (void *)WTF::fastMalloc((WTF *)((v46 >> 3) & 0x1FFFFFFFFFFFFFFCLL));
        memcpy(v47, a1[3], (((unint64_t)a1[4] + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
        if (*(_QWORD *)v44)
          WTF::fastFree(*(_QWORD *)v44, v48, v49, v50, v51, v52, v53, v54);
        v55 = a1[4];
        *(_QWORD *)v44 = v47;
      }
      *(_QWORD *)(v44 + 8) = v55;
    }
    else
    {
      if (*v8 <= v40)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E2BF4);
      }
      bzero((*v4)[v41], (((unint64_t)(*v4)[v41 + 1] + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
    }
    v41 -= 2;
    --v40;
  }
  v56 = **a1;
  if (*(_DWORD *)(v56 + 60) < 2u)
    goto LABEL_116;
  v57 = 0;
  v58 = 1;
  while (2)
  {
    v59 = v58;
    v60 = *(_QWORD *)(*(_QWORD *)(v56 + 48) + 8 * v58);
    if (!v60)
    {
LABEL_69:
      LOBYTE(v61) = 0;
      goto LABEL_70;
    }
    v61 = *(_DWORD *)(v60 + 52);
    if (v61)
    {
      v62 = *(unsigned int *)(**(_QWORD **)(v60 + 40) + 8);
      if (*v8 <= v62)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E2C04);
      }
      v63 = (uint64_t)&a1[1][2 * v62];
      v64 = ((unint64_t)a1[4] + 31) >> 5;
      v65 = *(_QWORD *)(v63 + 8) + 31;
      if (v64 == v65 >> 5)
      {
        memcpy(a1[3], *(const void **)v63, 4 * v64);
      }
      else
      {
        v66 = (void *)WTF::fastMalloc((WTF *)((v65 >> 3) & 0x1FFFFFFFFFFFFFFCLL));
        memcpy(v66, *(const void **)v63, ((unint64_t)(*(_QWORD *)(v63 + 8) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
        v74 = (unint64_t)a1[3];
        if (v74)
          WTF::fastFree(v74, v67, v68, v69, v70, v71, v72, v73);
        a1[3] = (uint64_t *)v66;
      }
      v75 = *(uint64_t **)(v63 + 8);
      a1[4] = v75;
      v76 = *(unsigned int *)(v60 + 52);
      if (v76 >= 2)
      {
        v77 = (unint64_t)v75 + 31;
        v78 = ((unint64_t)v75 + 31) & 0x1FFFFFFFE0;
        v79 = (v77 >> 5) - 1;
        do
        {
          if (--v76 >= *(unsigned int *)(v60 + 52))
          {
            __break(0xC471u);
            JUMPOUT(0x1983E2BB4);
          }
          v80 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v60 + 40) + 8 * v76) + 8);
          if (*v8 <= v80)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E2BBCLL);
          }
          if (v78)
          {
            v81 = a1[1][2 * v80];
            v82 = a1[3];
            v83 = v79;
            do
              *((_DWORD *)v82 + v83) &= *(_DWORD *)(v81 + 4 * v83);
            while ((unint64_t)v83--);
          }
        }
        while (v76 > 1);
      }
      v85 = a1[3];
      *(_DWORD *)((char *)v85 + ((v59 >> 3) & 0x1FFFFFFC)) |= 1 << v59;
      if (*((_DWORD *)a1 + 5) <= v59)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E2C0CLL);
      }
      v86 = &(*v4)[2 * v59];
      v87 = ((unint64_t)v86[1] + 31) >> 5;
      if ((_DWORD)v87)
      {
        LOBYTE(v61) = 0;
        v88 = (int *)v85 + (v87 - 1);
        v89 = (char *)*v86 + 4 * (v87 - 1);
        do
        {
          v90 = *v88--;
          LOBYTE(v61) = v61 | (*v89 != v90);
          *v89-- = v90;
          LODWORD(v87) = v87 - 1;
        }
        while ((_DWORD)v87);
        goto LABEL_70;
      }
      goto LABEL_69;
    }
LABEL_70:
    v57 |= v61;
    v58 = v59 + 1;
    if ((int)v59 + 1 < v5)
      goto LABEL_100;
    if ((v57 & 1) == 0)
      return a1;
    v91 = 0;
    LODWORD(v92) = v5;
    do
    {
      v92 = (v92 - 1);
      v93 = **a1;
      if (*(_DWORD *)(v93 + 60) <= v92)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E2BACLL);
      }
      v94 = *(_QWORD *)(*(_QWORD *)(v93 + 48) + 8 * v92);
      if (!v94)
        goto LABEL_94;
      v95 = *(_DWORD *)(v94 + 52);
      if (!v95)
        goto LABEL_95;
      v96 = *(unsigned int *)(**(_QWORD **)(v94 + 40) + 8);
      if (*v8 <= v96)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E2BC4);
      }
      v97 = (uint64_t)&a1[1][2 * v96];
      v98 = ((unint64_t)a1[4] + 31) >> 5;
      v99 = *(_QWORD *)(v97 + 8) + 31;
      if (v98 == v99 >> 5)
      {
        memcpy(a1[3], *(const void **)v97, 4 * v98);
      }
      else
      {
        v100 = (void *)WTF::fastMalloc((WTF *)((v99 >> 3) & 0x1FFFFFFFFFFFFFFCLL));
        memcpy(v100, *(const void **)v97, ((unint64_t)(*(_QWORD *)(v97 + 8) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
        v108 = (unint64_t)a1[3];
        if (v108)
          WTF::fastFree(v108, v101, v102, v103, v104, v105, v106, v107);
        a1[3] = (uint64_t *)v100;
      }
      v109 = *(uint64_t **)(v97 + 8);
      a1[4] = v109;
      v110 = *(unsigned int *)(v94 + 52);
      if (v110 >= 2)
      {
        v111 = (unint64_t)v109 + 31;
        v112 = ((unint64_t)v109 + 31) & 0x1FFFFFFFE0;
        v113 = (v111 >> 5) - 1;
        do
        {
          if (--v110 >= *(unsigned int *)(v94 + 52))
          {
            __break(0xC471u);
            JUMPOUT(0x1983E2B9CLL);
          }
          v114 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v94 + 40) + 8 * v110) + 8);
          if (*v8 <= v114)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E2BA4);
          }
          if (v112)
          {
            v115 = a1[1][2 * v114];
            v116 = a1[3];
            v117 = v113;
            do
              *((_DWORD *)v116 + v117) &= *(_DWORD *)(v115 + 4 * v117);
            while ((unint64_t)v117--);
          }
        }
        while (v110 > 1);
      }
      v119 = a1[3];
      *(_DWORD *)((char *)v119 + ((v92 >> 3) & 0x1FFFFFFC)) |= 1 << v92;
      if (*((_DWORD *)a1 + 5) <= v92)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E2BCCLL);
      }
      v120 = &(*v4)[2 * v92];
      v121 = ((unint64_t)v120[1] + 31) >> 5;
      if ((_DWORD)v121)
      {
        LOBYTE(v95) = 0;
        v122 = (int *)v119 + (v121 - 1);
        v123 = (char *)*v120 + 4 * (v121 - 1);
        do
        {
          v124 = *v122--;
          LOBYTE(v95) = v95 | (*v123 != v124);
          *v123-- = v124;
          LODWORD(v121) = v121 - 1;
        }
        while ((_DWORD)v121);
      }
      else
      {
LABEL_94:
        LOBYTE(v95) = 0;
      }
LABEL_95:
      v91 |= v95;
    }
    while (v92 > 1);
    if ((v91 & 1) != 0)
    {
      v57 = 0;
      v58 = 1;
LABEL_100:
      v56 = **a1;
      if (*(_DWORD *)(v56 + 60) <= v58)
      {
LABEL_116:
        __break(0xC471u);
        JUMPOUT(0x1983E2BECLL);
      }
      continue;
    }
    return a1;
  }
}

uint64_t WTF::dataLog<char [5],WTF::PointerDump<JSC::DFG::BasicBlock>,char [5],WTF::PointerDump<JSC::DFG::BasicBlock>,char [3],WTF::ASCIILiteral,char [3]>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  WTF::PrintStream *v10;
  WTF::PrintStream *v11;
  WTF::PrintStream *v12;
  char *v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  char v20;
  char **v21;
  char *v22;
  int v23;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v22 = &v20;
    v21 = &v22;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "    ");
  if (*a1)
  {
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v9, "%s", "#");
    WTF::PrintStream::printf(v9, "%u");
  }
  else
  {
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v10, "%s");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  WTF::PrintStream::printf(v8, "%s", " -> ");
  if (*a2)
  {
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v11, "%s", "#");
    WTF::PrintStream::printf(v11, "%u");
  }
  else
  {
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v12, "%s");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  WTF::PrintStream::printf(v8, "%s", " (");
  v13 = *(char **)a3;
  v14 = *(_QWORD *)(a3 + 8);
  v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  if (v13)
  {
    v17 = v14 - 1;
    if (!v14)
      v17 = 0;
    WTF::StringImpl::utf8ForCharacters(v13, v17, (uint64_t)&v22, v16);
  }
  else
  {
    v18 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v18 = 1;
    *(_QWORD *)(v18 + 8) = 0;
    *(_BYTE *)(v18 + 16) = 0;
    v22 = (char *)v18;
    v23 = 0;
  }
  WTF::printExpectedCStringHelper(v15, "StringView", &v22);
  if (v23 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v21, &v22);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  WTF::PrintStream::printf(v8, "%s", ")\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [11],WTF::PointerDump<JSC::DFG::BasicBlock>,char [17]>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    Block ");
  if (*a1)
  {
    v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printf(v5, "%s", "#");
    WTF::PrintStream::printf(v5, "%u");
  }
  else
  {
    v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printf(v6, "%s");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", ": successors = [");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<WTF::CommaPrinter,WTF::PointerDump<JSC::DFG::BasicBlock>>(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  WTF::PrintStream *v22;
  WTF::PrintStream *v23;
  char v25;
  char **v26;
  char *v27;
  int v28;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v27 = &v25;
    v26 = &v27;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v26, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v7 = v6;
  if (*(_BYTE *)(a1 + 32))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v9 = *(char **)a1;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    if (v9)
    {
      v13 = v10 - 1;
      if (!v10)
        v13 = 0;
      WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v27, v12);
    }
    else
    {
      v20 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = 0;
      *(_BYTE *)(v20 + 16) = 0;
      v27 = (char *)v20;
      v28 = 0;
    }
    WTF::printExpectedCStringHelper(v11, "StringView", &v27);
    if (v28 != -1)
      ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v28])(&v26, &v27);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  else
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v15 = *(char **)(a1 + 16);
    v16 = *(_QWORD *)(a1 + 24);
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    if (v15)
    {
      v19 = v16 - 1;
      if (!v16)
        v19 = 0;
      WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v27, v18);
    }
    else
    {
      v21 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_BYTE *)(v21 + 16) = 0;
      v27 = (char *)v21;
      v28 = 0;
    }
    WTF::printExpectedCStringHelper(v17, "StringView", &v27);
    if (v28 != -1)
      ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v28])(&v26, &v27);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *(_BYTE *)(a1 + 32) = 1;
  }
  if (*a2)
  {
    v22 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    WTF::PrintStream::printf(v22, "%s", "#");
    WTF::PrintStream::printf(v22, "%u");
  }
  else
  {
    v23 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    WTF::PrintStream::printf(v23, "%s");
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<WTF::Dominators<JSC::DFG::CFG>>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  WTF::PrintStream *v10;
  float v11;
  WTF::PrintStream *v12;
  float v13;
  WTF::PrintStream *v14;
  WTF::PrintStream *v15;
  WTF::PrintStream *v16;
  float v17;
  uint64_t result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::PrintStream *v26;
  float v27;
  const char *v28;
  const char *v29;
  WTF::PrintStream *v30;
  WTF::PrintStream *v31;
  const char *v32;
  const char *v33;
  WTF::PrintStream *v34;
  WTF::PrintStream *v35;
  float v36;
  WTF::PrintStream *v37;
  float v38;
  WTF::PrintStream *v39;
  float v40;
  uint64_t v41;
  char v42;
  char **v43;
  char *v44;
  int v45;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v44 = &v42;
    v43 = &v44;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v43, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v41 = WTF::s_file;
  v3 = (*(uint64_t (**)(void))(*(_QWORD *)WTF::s_file + 32))();
  v4 = *(unsigned int *)(a1 + 20);
  if (!(_DWORD)v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
  v5 = v3;
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD *)(a1 + 8) + 32 * v6;
    if (*(_DWORD *)(v7 + 24) != -1)
      break;
LABEL_54:
    if (++v6 >= v4)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
  }
  v8 = *(_QWORD *)(v7 + 16);
  v9 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 32))(v9);
  WTF::StringImpl::utf8ForCharacters("    Block #", 0xBuLL, (uint64_t)&v44, v11);
  WTF::printExpectedCStringHelper(v10, "StringView", &v44);
  if (v45 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v45])(&v43, &v44);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
  WTF::PrintStream::printf(v9, "%u", v6);
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 32))(v9);
  WTF::StringImpl::utf8ForCharacters(": idom = ", 9uLL, (uint64_t)&v44, v13);
  WTF::printExpectedCStringHelper(v12, "StringView", &v44);
  if (v45 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v45])(&v43, &v44);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
  if (v8)
  {
    v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 32))(v9);
    WTF::PrintStream::printf(v14, "%s", "#");
    WTF::PrintStream::printf(v14, "%u");
  }
  else
  {
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 32))(v9);
    WTF::PrintStream::printf(v15, "%s");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
  v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 32))(v9);
  WTF::StringImpl::utf8ForCharacters(", idomKids = [", 0xEuLL, (uint64_t)&v44, v17);
  WTF::printExpectedCStringHelper(v16, "StringView", &v44);
  if (v45 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v45])(&v43, &v44);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  if (v6 < *(unsigned int *)(a1 + 20))
  {
    v19 = 0;
    v20 = 0;
    while (1)
    {
      v21 = *(_QWORD *)(a1 + 8) + 32 * v6;
      v22 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32);
      if (v19 >= *(unsigned int *)(v21 + 12))
        break;
      v23 = *(_QWORD *)(*(_QWORD *)v21 + 8 * v19);
      v24 = v22(v5);
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
      v26 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
      if (v20)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v44, v27);
        if (v45)
        {
          if (v45 != 1)
            goto LABEL_56;
          if ((_BYTE)v44)
            v32 = "(failed to convert ";
          else
            v32 = "(Out of memory while converting ";
          WTF::PrintStream::printf(v26, "%s", v32);
          WTF::PrintStream::printf(v26, "%s", "StringView");
          v28 = " to utf8)";
        }
        else if (v44)
        {
          v28 = v44 + 16;
        }
        else
        {
          v28 = 0;
        }
        WTF::PrintStream::printf(v26, "%s", v28);
        if (v45 != -1)
          ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v45])(&v43, &v44);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters((char *)&str_24_8, 0, (uint64_t)&v44, v27);
        if (v45)
        {
          if (v45 != 1)
          {
LABEL_56:
            result = std::__throw_bad_variant_access[abi:sn180100]();
            goto LABEL_57;
          }
          if ((_BYTE)v44)
            v33 = "(failed to convert ";
          else
            v33 = "(Out of memory while converting ";
          WTF::PrintStream::printf(v26, "%s", v33);
          WTF::PrintStream::printf(v26, "%s", "StringView");
          v29 = " to utf8)";
        }
        else if (v44)
        {
          v29 = v44 + 16;
        }
        else
        {
          v29 = 0;
        }
        WTF::PrintStream::printf(v26, "%s", v29);
        if (v45 != -1)
          ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v45])(&v43, &v44);
        v20 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
      if (v23)
      {
        v30 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        WTF::PrintStream::printf(v30, "%s", "#");
        WTF::PrintStream::printf(v30, "%u");
      }
      else
      {
        v31 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        WTF::PrintStream::printf(v31, "%s");
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      ++v19;
      if (*(_DWORD *)(a1 + 20) <= v6)
        goto LABEL_57;
    }
    v34 = (WTF::PrintStream *)v22(v5);
    v35 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v34 + 32))(v34);
    WTF::StringImpl::utf8ForCharacters("], pre/post = ", 0xEuLL, (uint64_t)&v44, v36);
    WTF::printExpectedCStringHelper(v35, "StringView", &v44);
    if (v45 != -1)
      ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v45])(&v43, &v44);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v34 + 40))(v34);
    WTF::PrintStream::printf(v34, "%u", *(_DWORD *)(v21 + 24));
    v37 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v34 + 32))(v34);
    WTF::StringImpl::utf8ForCharacters("/", 1uLL, (uint64_t)&v44, v38);
    WTF::printExpectedCStringHelper(v37, "StringView", &v44);
    if (v45 != -1)
      ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v45])(&v43, &v44);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v34 + 40))(v34);
    WTF::PrintStream::printf(v34, "%u", *(_DWORD *)(v21 + 28));
    v39 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v34 + 32))(v34);
    WTF::StringImpl::utf8ForCharacters("\n", 1uLL, (uint64_t)&v44, v40);
    WTF::printExpectedCStringHelper(v39, "StringView", &v44);
    if (v45 != -1)
      ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v45])(&v43, &v44);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v34 + 40))(v34);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v4 = *(unsigned int *)(a1 + 20);
    goto LABEL_54;
  }
LABEL_57:
  __break(0xC471u);
  return result;
}

uint64_t **WTF::Dominators<JSC::DFG::CFG>::NaiveDominators::dump(uint64_t **result, uint64_t a2)
{
  uint64_t v2;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  WTF::PrintStream *v7;
  WTF::PrintStream *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  WTF::PrintStream *v13;
  WTF::PrintStream *v14;
  WTF::PrintStream *v15;
  WTF::PrintStream *v16;

  v2 = **result;
  if (!*(_DWORD *)(v2 + 60))
    return result;
  v4 = result;
  v5 = 0;
  while (1)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5);
    if (v6)
      break;
LABEL_14:
    if (++v5 >= (unint64_t)*(unsigned int *)(v2 + 60))
      return result;
  }
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v7, "%s", "    Block ");
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
  WTF::PrintStream::printf(v8, "%s", "#");
  WTF::PrintStream::printf(v8, "%u", *(_DWORD *)(v6 + 8));
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
  WTF::PrintStream::printf(v7, "%s", ":");
  result = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v9 = **v4;
  if (!*(_DWORD *)(v9 + 60))
  {
LABEL_13:
    v16 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v16, "%s", "\n");
    result = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v2 = **v4;
    goto LABEL_14;
  }
  v10 = 0;
  v11 = 0;
  while (v11 < *((unsigned int *)v4 + 5))
  {
    if (((*(_DWORD *)(v4[1][v10] + (((unint64_t)*(unsigned int *)(v6 + 8) >> 3) & 0x1FFFFFFC)) >> *(_DWORD *)(v6 + 8)) & 1) != 0)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v11);
      v13 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v13, "%s", " ");
      if (v12)
      {
        v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v13 + 32))(v13);
        WTF::PrintStream::printf(v14, "%s", "#");
        WTF::PrintStream::printf(v14, "%u");
      }
      else
      {
        v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v13 + 32))(v13);
        WTF::PrintStream::printf(v15, "%s");
      }
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v13 + 40))(v13);
      result = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      v9 = **v4;
    }
    ++v11;
    v10 += 2;
    if (v11 >= *(unsigned int *)(v9 + 60))
      goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::dataLog<JSC::DFG::CFG>(JSC::DFG::Graph **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::DFG::Graph::dump(*a1, v4, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

_QWORD *WTF::NaturalLoops<JSC::DFG::CPSCFG>::NaturalLoops(uint64_t ***a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  WTF *v31;
  int v32;
  char *v33;
  uint64_t v34;
  WTF *v35;
  unint64_t v37;
  unsigned int v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  WTF **v44;
  uint64_t v45;
  WTF *v46;
  int v47;
  char *v48;
  WTF *v49;
  char *v50;
  WTF *v51;
  WTF *v52;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  size_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  size_t v70;
  uint64_t v71;
  __int128 v72;
  _OWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  _DWORD *v76;
  WTF *v77;
  uint64_t v78;
  __int128 v79;
  _QWORD *v80;
  _QWORD *v81;
  WTF *v82;
  int v84;
  uint64_t v85;
  void *v86;
  unsigned int v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  WTF *v97;
  uint64_t *v99;
  size_t v100;
  uint64_t v101;
  size_t v102;
  int v103;
  unsigned int *v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  _BYTE *v108;
  unsigned int v109;
  unsigned int v110;
  size_t v111;
  _QWORD *v112;
  unsigned __int8 *v113;
  uint64_t *v114;
  _DWORD *v115;
  char *v116;
  uint64_t v117;
  int v118;
  BOOL v119;
  _QWORD *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  char *v130;
  uint64_t v131;
  WTF *v132;
  unint64_t v134;
  unsigned int v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  char *v145;
  WTF *v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  WTF *v152;
  __int128 v153;
  unsigned int v154;
  __int128 *v155;
  __int128 *v156;
  unsigned int *v157;
  size_t v158;
  uint64_t v159;
  unsigned int *v160;
  int v161;
  int v162;
  uint64_t *v163;
  unsigned int v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  int v168;
  unsigned int v169;
  _DWORD *v170;
  uint64_t v171;
  int *v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  size_t v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  unint64_t v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  _OWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  _DWORD *v190;
  uint64_t v191;
  __int128 *v192;
  uint64_t v193;
  __int128 v194;
  size_t v195;
  __int128 *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  unsigned int v201;
  unsigned int v202;
  unint64_t v203;
  const void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  BOOL v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  void *v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  WTF *v223;
  int v224;
  void *v225;
  uint64_t v226;
  unint64_t v227;
  size_t v228;
  unsigned int v229;
  int v230;
  unint64_t v231;
  _DWORD *v232;
  _QWORD *v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t *v236;
  char v237;
  char v238;
  _DWORD *v239;
  uint64_t v240;
  _QWORD *v241;
  int v242;
  size_t *v243;
  uint64_t **v244;
  __int128 v245;
  WTF *v246[2];
  _OWORD v247[4];
  WTF *v248[2];
  WTF *v249[2];
  uint64_t v250;
  _QWORD v251[8];
  _DWORD v252[4];

  v8 = a3;
  v9 = a1;
  *a1 = a2;
  a1[1] = (uint64_t **)(a1 + 3);
  v243 = (size_t *)(a1 + 1);
  a1[2] = (uint64_t **)4;
  v10 = **a2;
  a1[59] = 0;
  a1[60] = 0;
  v11 = *(_DWORD *)(v10 + 60);
  v244 = a2;
  v237 = a4;
  if (v11)
  {
    if (v11 <= 0x10)
      v12 = 16;
    else
      v12 = *(_DWORD *)(v10 + 60);
    if (v12 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1983E4E80);
    }
    v13 = WTF::fastMalloc((WTF *)(8 * v12));
    *((_DWORD *)v9 + 120) = v12;
    v9[59] = v13;
    v14 = v9[1];
    v15 = *((unsigned int *)v9 + 5);
    v239 = (_DWORD *)v9 + 121;
    *((_DWORD *)v9 + 121) = v11;
    if ((_DWORD)v15)
    {
      v174 = 112 * v15;
      v175 = v14 + 40;
      a2 = v244;
      do
      {
        v176 = *(_QWORD *)(v175 - 16);
        if (v175 != v176 && v176 != 0)
        {
          *(_QWORD *)(v175 - 16) = 0;
          *(_DWORD *)(v175 - 8) = 0;
          WTF::fastFree(v176, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
          a2 = v244;
        }
        v175 += 112;
        v174 -= 112;
      }
      while (v174);
    }
    else
    {
      a2 = v244;
    }
  }
  else
  {
    v239 = (_DWORD *)a1 + 121;
  }
  *((_DWORD *)v9 + 5) = 0;
  v16 = *(unsigned int *)(**a2 + 60);
  v17 = v16 + 1;
  if ((_DWORD)v16 == -1)
  {
    v85 = 0;
    v86 = 0;
    v248[0] = (WTF *)v249;
    v248[1] = (WTF *)4;
  }
  else
  {
    v18 = (uint64_t *)(a2 + 11);
    v19 = v8 + 24;
    do
    {
      v20 = v16;
      if (v16)
      {
        v21 = **a2;
        if (*(_DWORD *)(v21 + 60) <= (v17 - 2))
        {
          __break(0xC471u);
          JUMPOUT(0x1983E4E30);
        }
        v22 = *(_QWORD *)(*(_QWORD *)(v21 + 48) + 8 * (v17 - 2));
        if (v22)
        {
          v23 = (unint64_t *)(2 * *v18);
          if (*v18 < 0)
            v24 = 63;
          else
            v24 = *v23;
          v25 = *(unsigned int *)(v22 + 8);
          if (v24 > v25)
          {
            v26 = (uint64_t *)(v23 + 1);
            v27 = *v18 >= 0 ? v26 : v18;
            if (((*(unint64_t *)((char *)v27 + ((v25 >> 3) & 0x1FFFFFF8)) >> v25) & 1) != 0)
            {
              LODWORD(v34) = 1;
              goto LABEL_37;
            }
          }
          v248[0] = (WTF *)v249;
          v248[1] = (WTF *)4;
          v28 = *(unsigned int *)(v22 + 52);
          if ((_DWORD)v28)
          {
            v29 = *(WTF ***)(v22 + 40);
            v30 = 8 * v28;
            do
            {
              v31 = *v29;
              v246[0] = *v29;
              v32 = HIDWORD(v248[1]);
              if (HIDWORD(v248[1]) == LODWORD(v248[1]))
              {
                WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>((uint64_t)v248, v246, a3, a4, a5, (uint64_t)a6, a7, a8);
                v19 = v8 + 24;
                a2 = v244;
              }
              else
              {
                v33 = (char *)v248[0] + 16 * HIDWORD(v248[1]);
                *(_QWORD *)v33 = v31;
                v33[8] = 0;
                HIDWORD(v248[1]) = v32 + 1;
              }
              ++v29;
              v30 -= 8;
            }
            while (v30);
            v34 = HIDWORD(v248[1]);
            v35 = v248[0];
            if (v249 != (WTF **)v248[0] && v248[0] != 0)
            {
              v248[0] = 0;
              LODWORD(v248[1]) = 0;
              WTF::fastFree((unint64_t)v35, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
              v19 = v8 + 24;
              a2 = v244;
            }
            if (v34)
            {
              do
              {
LABEL_37:
                v39 = (unint64_t *)(2 * *v18);
                if (*v18 < 0)
                  v37 = 63;
                else
                  v37 = *v39;
                v40 = *(unsigned int *)(v22 + 8);
                if (v37 > v40
                  && ((v41 = (uint64_t *)(v39 + 1), *v18 >= 0) ? (v42 = v41) : (v42 = v18),
                      ((*(unint64_t *)((char *)v42 + ((v40 >> 3) & 0x1FFFFFF8)) >> v40) & 1) != 0))
                {
                  v248[0] = (WTF *)v249;
                  *(_OWORD *)v249 = xmmword_19914FB90;
                  v38 = 1;
                  v248[1] = (WTF *)0x100000004;
                }
                else
                {
                  v248[0] = (WTF *)v249;
                  v248[1] = (WTF *)4;
                  v43 = *(unsigned int *)(v22 + 52);
                  if (!(_DWORD)v43)
                    goto LABEL_301;
                  v44 = *(WTF ***)(v22 + 40);
                  v45 = 8 * v43;
                  do
                  {
                    v46 = *v44;
                    v246[0] = *v44;
                    v47 = HIDWORD(v248[1]);
                    if (HIDWORD(v248[1]) == LODWORD(v248[1]))
                    {
                      WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>((uint64_t)v248, v246, a3, a4, a5, (uint64_t)a6, a7, a8);
                      v19 = v8 + 24;
                      a2 = v244;
                    }
                    else
                    {
                      v48 = (char *)v248[0] + 16 * HIDWORD(v248[1]);
                      *(_QWORD *)v48 = v46;
                      v48[8] = 0;
                      HIDWORD(v248[1]) = v47 + 1;
                    }
                    ++v44;
                    v45 -= 8;
                  }
                  while (v45);
                  v38 = HIDWORD(v248[1]);
                }
                LODWORD(v34) = v34 - 1;
                if (v38 <= v34)
                {
LABEL_301:
                  __break(0xC471u);
                  JUMPOUT(0x1983E4E20);
                }
                v49 = v248[0];
                v50 = (char *)v248[0] + 16 * v34;
                v51 = *(WTF **)v50;
                v52 = (WTF *)*((_QWORD *)v50 + 1);
                if (v249 != (WTF **)v248[0] && v248[0])
                {
                  v248[0] = 0;
                  LODWORD(v248[1]) = 0;
                  WTF::fastFree((unint64_t)v49, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
                  v19 = v8 + 24;
                  a2 = v244;
                }
                if ((WTF *)v22 == v51 && v52 == 0)
                  goto LABEL_71;
                v54 = *(_DWORD *)(v8 + 20);
                v55 = v19;
                if (!(_BYTE)v52)
                {
                  v56 = *((_DWORD *)v51 + 2);
                  if (v54 <= v56)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983E4E38);
                  }
                  v55 = *(_QWORD *)(v8 + 8) + 40 * v56;
                }
                v57 = *(_DWORD *)(v22 + 8);
                if (v54 <= v57)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983E4E40);
                }
                v58 = *(_DWORD *)(v55 + 32);
                v59 = *(_QWORD *)(v8 + 8);
                if (v58 > *(_DWORD *)(v59 + 40 * v57 + 32))
                {
                  v60 = v19;
                  if (!(_BYTE)v52)
                  {
                    v61 = *((_DWORD *)v51 + 2);
                    if (v54 <= v61)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1983E4E50);
                    }
                    v60 = v59 + 40 * v61;
                  }
                  if (*(_DWORD *)(v60 + 36) < *(_DWORD *)(v59 + 40 * v57 + 36))
                  {
LABEL_71:
                    v233 = v9;
                    v62 = *((unsigned int *)v9 + 5);
                    v63 = 112 * v62 + 24;
                    while (1)
                    {
                      v64 = v63 - 112;
                      if (v63 == 24)
                        break;
                      v65 = *v243;
                      v66 = *v243 + v63;
                      v67 = *(_QWORD *)(v66 - 128);
                      v68 = *(unsigned __int8 *)(v66 - 120);
                      v69 = v22 == v67 && v68 == 0;
                      v63 = v64;
                      if (v69)
                      {
                        v248[0] = v51;
                        v248[1] = v52;
                        v178 = v65 + v64;
                        v179 = *(unsigned int *)(v65 + v64 + 12);
                        if ((_DWORD)v179 == *(_DWORD *)(v65 + v64 + 8))
                        {
                          v195 = v65;
                          v196 = (__int128 *)WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v65 + v64, (void *)(v179 + 1), (unint64_t)v248, a4, a5, (uint64_t)a6, a7, a8);
                          v19 = v8 + 24;
                          a2 = v244;
                          v179 = *(unsigned int *)(v178 + 12);
                          v180 = *(_QWORD *)(v195 + v64);
                          v181 = *v196;
                        }
                        else
                        {
                          v180 = *(_QWORD *)(v65 + v64);
                          v181 = *(_OWORD *)v248;
                        }
                        *(_OWORD *)(v180 + 16 * v179) = v181;
                        ++*(_DWORD *)(v178 + 12);
                        v9 = v233;
                        goto LABEL_63;
                      }
                    }
                    v248[0] = (WTF *)a2;
                    v248[1] = (WTF *)v22;
                    v249[0] = 0;
                    v249[1] = (WTF *)v251;
                    v252[0] = -1;
                    v252[1] = v62;
                    v251[0] = v51;
                    v251[1] = v52;
                    v250 = 0x100000004;
                    if ((_DWORD)v62 == *((_DWORD *)v233 + 4))
                    {
                      v182 = WTF::Vector<WTF::NaturalLoop<JSC::DFG::CPSCFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v243, v62 + 1, (unint64_t)v248, a4, a5, (uint64_t)a6, a7, a8);
                      v183 = *((_DWORD *)v233 + 5);
                      v184 = v233[1];
                      v185 = v184 + 112 * v183;
                      v186 = *(_OWORD *)v182;
                      *(_BYTE *)(v185 + 16) = *(_BYTE *)(v182 + 16);
                      *(_OWORD *)v185 = v186;
                      v187 = (_OWORD *)(v185 + 40);
                      *(_QWORD *)(v185 + 24) = v185 + 40;
                      v188 = (_QWORD *)(v185 + 24);
                      v189 = *(unsigned int *)(v182 + 36);
                      *(_DWORD *)(v185 + 36) = v189;
                      *(_DWORD *)(v185 + 32) = 4;
                      v190 = (_DWORD *)(v185 + 32);
                      if (v189 >= 5)
                      {
                        v226 = v184;
                        v229 = v183;
                        v231 = v182;
                        if (v189 >> 28)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1983E4E60);
                        }
                        v187 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v189));
                        *v190 = v189;
                        *v188 = v187;
                        v183 = v229;
                        v182 = v231;
                        v184 = v226;
                      }
                      v191 = *(unsigned int *)(v182 + 36);
                      v19 = v8 + 24;
                      if ((_DWORD)v191)
                      {
                        v192 = *(__int128 **)(v182 + 24);
                        v193 = 16 * v191;
                        do
                        {
                          v194 = *v192++;
                          *v187++ = v194;
                          v193 -= 16;
                        }
                        while (v193);
                      }
                      v81 = (_QWORD *)(v184 + 112 * v183 + 104);
                      v80 = (_QWORD *)(v182 + 104);
                      v9 = v233;
                      a2 = v244;
                    }
                    else
                    {
                      v70 = *v243;
                      v71 = *v243 + 112 * v62;
                      v72 = *(_OWORD *)v248;
                      *(_BYTE *)(v71 + 16) = v249[0];
                      *(_OWORD *)v71 = v72;
                      v73 = (_OWORD *)(v71 + 40);
                      *(_QWORD *)(v71 + 24) = v71 + 40;
                      v74 = (_QWORD *)(v71 + 24);
                      v75 = HIDWORD(v250);
                      *(_DWORD *)(v71 + 36) = HIDWORD(v250);
                      *(_DWORD *)(v71 + 32) = 4;
                      v76 = (_DWORD *)(v71 + 32);
                      if (v75 >= 5)
                      {
                        v228 = v70;
                        v230 = v62;
                        if (v75 >> 28)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1983E4E58);
                        }
                        v73 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v75));
                        *v76 = v75;
                        *v74 = v73;
                        a2 = v244;
                        v19 = v8 + 24;
                        LODWORD(v62) = v230;
                        v70 = v228;
                      }
                      if (HIDWORD(v250))
                      {
                        v77 = v249[1];
                        v78 = 16 * HIDWORD(v250);
                        do
                        {
                          v79 = *(_OWORD *)v77;
                          v77 = (WTF *)((char *)v77 + 16);
                          *v73++ = v79;
                          v78 -= 16;
                        }
                        while (v78);
                      }
                      v80 = v252;
                      v81 = (_QWORD *)(v70 + 112 * v62 + 104);
                      v9 = v233;
                    }
                    *v81 = *v80;
                    ++*((_DWORD *)v9 + 5);
                    v82 = v249[1];
                    if (v251 != (_QWORD *)v249[1] && v249[1] != 0)
                    {
                      v249[1] = 0;
                      LODWORD(v250) = 0;
                      WTF::fastFree((unint64_t)v82, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
                      v19 = v8 + 24;
                      a2 = v244;
                    }
                  }
                }
LABEL_63:
                ;
              }
              while ((_DWORD)v34);
            }
          }
        }
      }
      --v17;
      v16 = v20 - 1;
    }
    while (v20);
    v84 = *(_DWORD *)(**a2 + 60);
    v248[0] = (WTF *)v249;
    v248[1] = (WTF *)4;
    v85 = (v84 + 1);
    if (v84 == -1)
    {
      v85 = 0;
      v86 = 0;
    }
    else
    {
      v86 = (void *)WTF::fastMalloc((WTF *)(((unint64_t)(v85 + 31) >> 3) & 0x3FFFFFFC));
      bzero(v86, ((unint64_t)(v85 + 31) >> 3) & 0x3FFFFFFC);
    }
    a2 = v244;
  }
  v87 = *((_DWORD *)v9 + 5);
  if (v87)
  {
    v99 = (uint64_t *)(a2 + 11);
    v227 = ((unint64_t)(v85 + 31) >> 3) & 0x3FFFFFFC;
    v234 = v9;
    do
    {
      if (*((_DWORD *)v9 + 5) <= --v87)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E4E9CLL);
      }
      v100 = *v243;
      bzero(v86, v227);
      v102 = v100 + 112 * v87;
      v105 = *(_DWORD *)(v102 + 36);
      v104 = (unsigned int *)(v102 + 36);
      v103 = v105;
      if (v105)
      {
        v106 = v103 - 1;
        v107 = 16 * (v103 - 1);
        do
        {
          if (*v104 <= v106)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E4EA4);
          }
          v108 = (_BYTE *)(*(_QWORD *)(v100 + 112 * v87 + 24) + v107);
          if (v108[8])
            v109 = 0;
          else
            v109 = *(_DWORD *)(*(_QWORD *)v108 + 8) + 1;
          *((_DWORD *)v86 + (v109 >> 5)) |= 1 << v109;
          if (*v104 <= v106)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E4EACLL);
          }
          *(_OWORD *)v246 = *(_OWORD *)v108;
          if (HIDWORD(v248[1]) == LODWORD(v248[1]))
          {
            WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::SingleRootGraphNode<JSC::DFG::CFG>>((uint64_t)v248, (unint64_t)v246, a3, a4, a5, (uint64_t)a6, v101, a8);
          }
          else
          {
            *((_OWORD *)v248[0] + HIDWORD(v248[1])) = *(_OWORD *)v246;
            ++HIDWORD(v248[1]);
          }
          v107 -= 16;
          --v106;
        }
        while (v106 != -1);
      }
      v110 = HIDWORD(v248[1]);
      a2 = v244;
      if (HIDWORD(v248[1]))
      {
        v111 = v100 + 112 * v87;
        v112 = (_QWORD *)(v111 + 8);
        v113 = (unsigned __int8 *)(v111 + 16);
        v114 = (uint64_t *)(v111 + 24);
        v115 = (_DWORD *)(v111 + 32);
        v241 = (_QWORD *)(v111 + 8);
        v236 = (uint64_t *)(v111 + 24);
        v232 = (_DWORD *)(v111 + 32);
        do
        {
          v116 = (char *)v248[0] + 16 * v110;
          v117 = *((_QWORD *)v116 - 2);
          v118 = *(v116 - 8);
          HIDWORD(v248[1]) = v110 - 1;
          v119 = v117 == *v112 && v118 == *v113;
          if (!v119 && !v118)
          {
            if (v117)
            {
              v120 = (_QWORD *)(2 * *v99);
              v121 = *v99 < 0 ? 63 : *v120;
              v122 = *(unsigned int *)(v117 + 8);
              if (v121 > v122)
              {
                v123 = v120 + 1;
                v124 = *v99 >= 0 ? v123 : v99;
                if (((*(unint64_t *)((char *)v124 + ((v122 >> 3) & 0x1FFFFFF8)) >> v122) & 1) != 0)
                {
                  LODWORD(v131) = 1;
                  goto LABEL_154;
                }
              }
            }
            v246[0] = (WTF *)v247;
            v246[1] = (WTF *)4;
            v125 = *(unsigned int *)(v117 + 52);
            if ((_DWORD)v125)
            {
              v126 = *(uint64_t **)(v117 + 40);
              v127 = 8 * v125;
              do
              {
                v128 = *v126;
                *(_QWORD *)&v245 = *v126;
                v129 = HIDWORD(v246[1]);
                if (HIDWORD(v246[1]) == LODWORD(v246[1]))
                {
                  WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>((uint64_t)v246, &v245, a3, a4, a5, (uint64_t)a6, v101, a8);
                  v115 = v232;
                  v114 = v236;
                  v112 = v241;
                  a2 = v244;
                }
                else
                {
                  v130 = (char *)v246[0] + 16 * HIDWORD(v246[1]);
                  *(_QWORD *)v130 = v128;
                  v130[8] = 0;
                  HIDWORD(v246[1]) = v129 + 1;
                }
                ++v126;
                v127 -= 8;
              }
              while (v127);
              v131 = HIDWORD(v246[1]);
              v132 = v246[0];
              if (v247 != (_OWORD *)v246[0] && v246[0] != 0)
              {
                v246[0] = 0;
                LODWORD(v246[1]) = 0;
                WTF::fastFree((unint64_t)v132, a2, a3, a4, a5, (uint64_t)a6, v101, a8);
                v115 = v232;
                v114 = v236;
                v112 = v241;
                a2 = v244;
              }
              if (v131)
              {
                do
                {
LABEL_154:
                  if (v117
                    && ((v136 = (unint64_t *)(2 * *v99), *v99 < 0) ? (v134 = 63) : (v134 = *v136),
                        (v137 = *(unsigned int *)(v117 + 8), v134 > v137)
                     && ((v138 = (uint64_t *)(v136 + 1), *v99 >= 0) ? (v139 = v138) : (v139 = v99),
                         ((*(unint64_t *)((char *)v139 + ((v137 >> 3) & 0x1FFFFFF8)) >> v137) & 1) != 0)))
                  {
                    v246[0] = (WTF *)v247;
                    v247[0] = xmmword_19914FB90;
                    v135 = 1;
                    v246[1] = (WTF *)0x100000004;
                  }
                  else
                  {
                    v246[0] = (WTF *)v247;
                    v246[1] = (WTF *)4;
                    v140 = *(unsigned int *)(v117 + 52);
                    if (!(_DWORD)v140)
                      goto LABEL_310;
                    v141 = *(uint64_t **)(v117 + 40);
                    v142 = 8 * v140;
                    do
                    {
                      v143 = *v141;
                      *(_QWORD *)&v245 = *v141;
                      v144 = HIDWORD(v246[1]);
                      if (HIDWORD(v246[1]) == LODWORD(v246[1]))
                      {
                        WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>((uint64_t)v246, &v245, a3, a4, a5, (uint64_t)a6, v101, a8);
                        v115 = v232;
                        v114 = v236;
                        v112 = v241;
                        a2 = v244;
                      }
                      else
                      {
                        v145 = (char *)v246[0] + 16 * HIDWORD(v246[1]);
                        *(_QWORD *)v145 = v143;
                        v145[8] = 0;
                        HIDWORD(v246[1]) = v144 + 1;
                      }
                      ++v141;
                      v142 -= 8;
                    }
                    while (v142);
                    v135 = HIDWORD(v246[1]);
                  }
                  LODWORD(v131) = v131 - 1;
                  if (v135 <= v131)
                  {
LABEL_310:
                    __break(0xC471u);
                    JUMPOUT(0x1983E4E68);
                  }
                  v146 = v246[0];
                  v245 = *((_OWORD *)v246[0] + v131);
                  if (v247 != (_OWORD *)v246[0] && v246[0])
                  {
                    v246[0] = 0;
                    LODWORD(v246[1]) = 0;
                    WTF::fastFree((unint64_t)v146, a2, a3, a4, a5, (uint64_t)a6, v101, a8);
                    v115 = v232;
                    v114 = v236;
                    v112 = v241;
                    a2 = v244;
                  }
                  if (BYTE8(v245))
                    v147 = 0;
                  else
                    v147 = *(_DWORD *)(v245 + 8) + 1;
                  if (((*((_DWORD *)v86 + (v147 >> 5)) >> v147) & 1) == 0)
                  {
                    *(_OWORD *)v246 = v245;
                    v148 = *v104;
                    if ((_DWORD)v148 == *v115)
                    {
                      v155 = (__int128 *)WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v114, (void *)(v148 + 1), (unint64_t)v246, a4, a5, (uint64_t)a6, v101, a8);
                      v115 = v232;
                      v114 = v236;
                      v112 = v241;
                      a2 = v244;
                      v148 = *v104;
                      v149 = *v236;
                      v150 = *v155;
                    }
                    else
                    {
                      v149 = *v114;
                      v150 = *(_OWORD *)v246;
                    }
                    *(_OWORD *)(v149 + 16 * v148) = v150;
                    ++*v104;
                    v151 = HIDWORD(v248[1]);
                    if (HIDWORD(v248[1]) == LODWORD(v248[1]))
                    {
                      v156 = (__int128 *)WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v248, (void *)(HIDWORD(v248[1]) + 1), (unint64_t)&v245, a4, a5, (uint64_t)a6, v101, a8);
                      v115 = v232;
                      v114 = v236;
                      v112 = v241;
                      a2 = v244;
                      v151 = HIDWORD(v248[1]);
                      v152 = v248[0];
                      v153 = *v156;
                    }
                    else
                    {
                      v152 = v248[0];
                      v153 = v245;
                    }
                    *((_OWORD *)v152 + v151) = v153;
                    ++HIDWORD(v248[1]);
                    if (BYTE8(v245))
                      v154 = 0;
                    else
                      v154 = *(_DWORD *)(v245 + 8) + 1;
                    *((_DWORD *)v86 + (v154 >> 5)) |= 1 << v154;
                  }
                }
                while ((_DWORD)v131);
              }
            }
          }
          v110 = HIDWORD(v248[1]);
        }
        while (HIDWORD(v248[1]));
      }
      v9 = v234;
    }
    while (v87);
  }
  v88 = v9 + 59;
  v89 = **a2;
  v90 = *(unsigned int *)(v89 + 60);
  v91 = v239;
  if ((_DWORD)v90 != -1)
  {
    if ((_DWORD)v90)
    {
      do
      {
        if (*(_DWORD *)(v89 + 60) <= (v90 - 1))
        {
          __break(0xC471u);
          JUMPOUT(0x1983E4E48);
        }
        v92 = *(_QWORD *)(*(_QWORD *)(v89 + 48) + 8 * (v90 - 1));
        if (v92)
        {
          v93 = *(unsigned int *)(v92 + 8);
          if (*v239 <= v93
            || (v94 = *v88,
                *(_DWORD *)(*v88 + 8 * v93 + 4) = -1,
                v95 = *(unsigned int *)(v92 + 8),
                *v239 <= v95))
          {
            __break(0xC471u);
            JUMPOUT(0x1983E4E28);
          }
          *(_DWORD *)(v94 + 8 * v95) = -1;
        }
        --v90;
      }
      while (v90);
    }
    v9[61] = -1;
  }
  v96 = *((_DWORD *)v9 + 5);
  if (!v96)
    goto LABEL_104;
  v157 = (unsigned int *)(v9 + 61);
  do
  {
    if (*((_DWORD *)v9 + 5) <= --v96)
    {
      __break(0xC471u);
      JUMPOUT(0x1983E4EB4);
    }
    v158 = *v243;
    v159 = *v243 + 112 * v96;
    v162 = *(_DWORD *)(v159 + 36);
    v160 = (unsigned int *)(v159 + 36);
    v161 = v162;
    if (v162)
    {
      v163 = (uint64_t *)(v158 + 112 * v96 + 24);
      v164 = v161 - 1;
      v165 = 16 * v164;
      do
      {
        v166 = *v160;
        if (*v160 <= v164)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E4E70);
        }
        a4 = *v163;
        if (*(_BYTE *)(*v163 + v165 + 8))
        {
          a3 = *v157;
          if ((_DWORD)a3 == -1)
          {
            a3 = 0xFFFFFFFFLL;
            a6 = (unsigned int *)(v9 + 61);
            goto LABEL_199;
          }
          a4 = *((unsigned int *)v9 + 5);
          if (a4 <= a3)
            goto LABEL_315;
          a5 = *(unsigned int *)(v158 + 112 * a3 + 36);
          a6 = (unsigned int *)(v9 + 61);
          if (v166 < a5)
            goto LABEL_199;
          a3 = (uint64_t)v9;
          a5 = *((unsigned int *)v9 + 123);
          if ((_DWORD)a5 == -1)
          {
            v167 = 1;
            a6 = (unsigned int *)(v9 + 61);
            goto LABEL_289;
          }
          a2 = v244;
          v91 = v239;
          if (a4 <= a5)
          {
LABEL_315:
            __break(0xC471u);
            JUMPOUT(0x1983E4E94);
          }
          a3 = *(unsigned int *)(v158 + 112 * a5 + 36);
          if (v166 < a3)
          {
            v167 = 1;
            a6 = (unsigned int *)(v9 + 61);
            goto LABEL_200;
          }
        }
        else
        {
          a4 = *(unsigned int *)(*(_QWORD *)(a4 + v165) + 8);
          if (*v91 <= a4)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E4E78);
          }
          a6 = (unsigned int *)(*v88 + 8 * a4);
          a3 = *a6;
          if ((_DWORD)a3 == -1)
          {
            a3 = 0xFFFFFFFFLL;
LABEL_199:
            v167 = 0;
            a6[1] = a3;
            goto LABEL_200;
          }
          a4 = *((unsigned int *)v9 + 5);
          if (a4 <= a3)
            goto LABEL_315;
          a5 = *(unsigned int *)(v158 + 112 * a3 + 36);
          if (v166 < a5)
            goto LABEL_199;
          a3 = a6[1];
          if ((_DWORD)a3 == -1)
          {
            v167 = 1;
LABEL_289:
            a2 = v244;
            v91 = v239;
LABEL_200:
            a6[v167] = v96;
            goto LABEL_201;
          }
          a2 = v244;
          v91 = v239;
          if (a4 <= a3)
            goto LABEL_315;
          a4 = 112;
          a3 = *(unsigned int *)(v158 + 112 * a3 + 36);
          if (v166 < a3)
          {
            v167 = 1;
            goto LABEL_200;
          }
        }
LABEL_201:
        v165 -= 16;
        --v164;
      }
      while (v164 != -1);
    }
  }
  while (v96);
  v168 = *((_DWORD *)v9 + 5);
  if (v168)
  {
    v169 = v168 - 1;
    v170 = (_DWORD *)(v158 + 112 * v169 + 104);
    do
    {
      if (*((_BYTE *)v170 - 88))
      {
        v173 = *v157;
        v172 = (int *)(v9 + 61);
      }
      else
      {
        v171 = *(unsigned int *)(*((_QWORD *)v170 - 12) + 8);
        if (*v91 <= v171)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E4EBCLL);
        }
        v172 = (int *)(*v88 + 8 * v171);
        v173 = *v172;
      }
      if (v169 != v173)
      {
LABEL_323:
        __break(0xC471u);
        JUMPOUT(0x1983E4B28);
      }
      *v170 = v172[1];
      v170 -= 28;
      --v169;
    }
    while (v169 != -1);
  }
LABEL_104:
  if ((v237 & 1) != 0)
  {
    v197 = *(unsigned int *)(v89 + 60);
    v242 = v197 + 1;
    if ((_DWORD)v197 != -1)
    {
      v235 = (uint64_t)v9;
      do
      {
        v240 = v197;
        if (v197)
        {
          v198 = **a2;
          if (*(_DWORD *)(v198 + 60) <= (v242 - 2))
            goto LABEL_323;
          v199 = *(_QWORD *)(*(_QWORD *)(v198 + 48) + 8 * (v242 - 2));
          if (!v199)
            goto LABEL_283;
          v200 = 0;
          v238 = 0;
        }
        else
        {
          v199 = 0;
          v200 = 1;
          v238 = 1;
        }
        v201 = *(_DWORD *)(v235 + 20);
        if (v201)
        {
          v202 = 0;
          LODWORD(v203) = 0;
          v204 = 0;
          do
          {
            if (*(_DWORD *)(v235 + 20) <= --v201)
            {
              __break(0xC471u);
              JUMPOUT(0x1983E4EC4);
            }
            v205 = *v243 + 112 * v201;
            v206 = 16 * *(unsigned int *)(v205 + 36);
            while (1)
            {
              v207 = v206 - 16;
              if (!v206)
                break;
              v208 = *(_QWORD *)(v205 + 24) + v206;
              v209 = *(_QWORD *)(v208 - 16);
              v210 = *(unsigned __int8 *)(v208 - 8);
              v211 = v209 == v199 && v210 == v200;
              v206 = v207;
              if (v211)
              {
                v212 = v202;
                if (v202 == (_DWORD)v203)
                {
                  v213 = v202 + ((unint64_t)v202 >> 2);
                  if (v213 >= 0x10)
                    v214 = v213 + 1;
                  else
                    v214 = 16;
                  if (v214 <= (unint64_t)v202 + 1)
                    v203 = v202 + 1;
                  else
                    v203 = v214;
                  if (v203 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983E4ECCLL);
                  }
                  v215 = (void *)WTF::fastMalloc((WTF *)(8 * v203));
                  memcpy(v215, v204, 8 * v202);
                  if (v204)
                  {
                    if (v215 == v204)
                    {
                      v215 = 0;
                      LODWORD(v203) = 0;
                    }
                    WTF::fastFree((unint64_t)v204, v216, v217, v218, v219, v220, v221, v222);
                  }
                  v204 = v215;
                }
                ++v202;
                *((_QWORD *)v204 + v212) = v205;
                break;
              }
            }
          }
          while (v201);
        }
        else
        {
          v204 = 0;
          v202 = 0;
        }
        WTF::NaturalLoops<JSC::DFG::CPSCFG>::loopsOf((char *)v246, v235, v199, v238);
        std::sort[abi:sn180100]<WTF::NaturalLoop<JSC::DFG::CPSCFG> const**>((uint64_t)v204, (unint64_t *)v204 + v202);
        v223 = v246[0];
        v224 = HIDWORD(v246[1]);
        std::sort[abi:sn180100]<WTF::NaturalLoop<JSC::DFG::CPSCFG> const**>((uint64_t)v246[0], (unint64_t *)v246[0] + HIDWORD(v246[1]));
        if (v202 != v224 || memcmp(v204, v223, 8 * v202))
        {
          __break(0xC471u);
          JUMPOUT(0x1983E4E18);
        }
        if (v223)
          WTF::fastFree((unint64_t)v223, v225, a3, a4, a5, (uint64_t)a6, (uint64_t)v91, a8);
        if (v204)
          WTF::fastFree((unint64_t)v204, v225, a3, a4, a5, (uint64_t)a6, (uint64_t)v91, a8);
LABEL_283:
        --v242;
        v197 = v240 - 1;
        v9 = (_QWORD *)v235;
        a2 = v244;
      }
      while (v240);
    }
  }
  v97 = v248[0];
  if (v249 != (WTF **)v248[0] && v248[0])
  {
    v248[0] = 0;
    LODWORD(v248[1]) = 0;
    WTF::fastFree((unint64_t)v97, a2, a3, a4, a5, (uint64_t)a6, (uint64_t)v91, a8);
  }
  if (v86)
    WTF::fastFree((unint64_t)v86, a2, a3, a4, a5, (uint64_t)a6, (uint64_t)v91, a8);
  return v9;
}

uint64_t std::sort[abi:sn180100]<WTF::NaturalLoop<JSC::DFG::CPSCFG> const**>(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = 126 - 2 * __clz(((uint64_t)a2 - a1) >> 3);
  if (a2 == (unint64_t *)a1)
    v3 = 0;
  else
    v3 = v2;
  return std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::NaturalLoop<JSC::DFG::CPSCFG> const**,false>(a1, a2, v3, 1);
}

unint64_t WTF::Vector<WTF::NaturalLoop<JSC::DFG::CPSCFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v10 + 112 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v11 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v11 >= 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    if (v12 > a2)
      a2 = v12;
    WTF::Vector<WTF::NaturalLoop<JSC::DFG::CPSCFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v14 = a3 - v10;
    v15 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 > a2)
      a2 = v16;
    WTF::Vector<WTF::NaturalLoop<JSC::DFG::CPSCFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v14;
  }
  return v8;
}

void WTF::Vector<WTF::NaturalLoop<JSC::DFG::CPSCFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  int v24;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v9 = *(_QWORD *)a1;
    v10 = *(_DWORD *)(a1 + 12);
    if (a2 < 5)
    {
      v12 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
    }
    else
    {
      if (a2 >= 0x2492493)
      {
        __break(0xC471u);
        return;
      }
      v11 = 112 * a2;
      v12 = WTF::fastMalloc((WTF *)(112 * a2));
      *(_DWORD *)(a1 + 8) = (613566757 * (unint64_t)(v11 >> 4)) >> 32;
      *(_QWORD *)a1 = v12;
    }
    if (v10)
    {
      v13 = v9 + 112 * v10;
      v14 = v9;
      do
      {
        v15 = *(_OWORD *)v14;
        *(_BYTE *)(v12 + 16) = *(_BYTE *)(v14 + 16);
        *(_OWORD *)v12 = v15;
        *(_QWORD *)(v12 + 24) = v12 + 40;
        *(_QWORD *)(v12 + 32) = 4;
        v16 = *(_QWORD *)(v14 + 24);
        v17 = v14 + 40;
        if (v16 == v14 + 40)
        {
          v18 = *(unsigned int *)(v14 + 36);
          if ((_DWORD)v18)
          {
            v19 = 0;
            v20 = 16 * v18;
            do
            {
              *(_OWORD *)(v12 + v19 + 40) = *(_OWORD *)(v16 + v19);
              v19 += 16;
            }
            while (v20 != v19);
          }
        }
        else
        {
          *(_QWORD *)(v14 + 24) = v17;
          *(_QWORD *)(v12 + 24) = v16;
          v24 = *(_DWORD *)(v14 + 32);
          *(_DWORD *)(v14 + 32) = 4;
          *(_DWORD *)(v12 + 32) = v24;
        }
        v21 = *(_DWORD *)(v14 + 36);
        *(_DWORD *)(v14 + 36) = 0;
        *(_DWORD *)(v12 + 36) = v21;
        *(_QWORD *)(v12 + 104) = *(_QWORD *)(v14 + 104);
        v22 = *(_QWORD *)(v14 + 24);
        if (v17 != v22 && v22 != 0)
        {
          *(_QWORD *)(v14 + 24) = 0;
          *(_DWORD *)(v14 + 32) = 0;
          WTF::fastFree(v22, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
        v12 += 112;
        v14 += 112;
      }
      while (v14 != v13);
    }
    if (a1 + 16 != v9 && v9)
    {
      if (*(_QWORD *)a1 == v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v9, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

__n128 WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::SingleRootGraphNode<JSC::DFG::CFG>>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v9;
  __n128 result;

  v9 = (__n128 *)WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  result = *v9;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v9;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::NaturalLoop<JSC::DFG::CPSCFG> const**,false>(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  BOOL v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t *v69;
  unint64_t *v70;
  unint64_t **v71;
  BOOL v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  int64_t v81;
  int64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  BOOL v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v63 = *(a2 - 1);
        v64 = *v8;
        if (v63 < *v8)
        {
          *v8 = v63;
          *(a2 - 1) = v64;
        }
        return result;
      case 3:
        v65 = *v8;
        v66 = v8[1];
        v67 = *(a2 - 1);
        if (v66 >= *v8)
        {
          if (v67 < v66)
          {
            v8[1] = v67;
            *(a2 - 1) = v66;
            v104 = *v8;
            v103 = v8[1];
            if (v103 < *v8)
            {
              *v8 = v103;
              v8[1] = v104;
            }
          }
        }
        else
        {
          if (v67 >= v66)
          {
            *v8 = v66;
            v8[1] = v65;
            v113 = *(a2 - 1);
            if (v113 >= v65)
              return result;
            v8[1] = v113;
          }
          else
          {
            *v8 = v67;
          }
          *(a2 - 1) = v65;
        }
        return result;
      case 4:
        v41 = v8 + 1;
        v68 = (unint64_t *)v8[1];
        v43 = (unint64_t)(v8 + 2);
        v13 = v8[2];
        v69 = (unint64_t *)*v8;
        if ((unint64_t)v68 >= *v8)
        {
          if (v13 >= (unint64_t)v68)
            goto LABEL_192;
          *v41 = v13;
          *(_QWORD *)v43 = v68;
          v70 = v8;
          v71 = (unint64_t **)(v8 + 1);
          result = (uint64_t)v68;
          if (v13 >= (unint64_t)v69)
            goto LABEL_193;
        }
        else
        {
          v70 = v8;
          v71 = (unint64_t **)(v8 + 2);
          result = *v8;
          if (v13 >= (unint64_t)v68)
          {
            *v8 = (unint64_t)v68;
            v8[1] = (unint64_t)v69;
            v70 = v8 + 1;
            v71 = (unint64_t **)(v8 + 2);
            result = (uint64_t)v69;
            if (v13 >= (unint64_t)v69)
            {
LABEL_192:
              v68 = (unint64_t *)v13;
LABEL_193:
              v109 = *(a2 - 1);
              if (v109 < (unint64_t)v68)
              {
                *(_QWORD *)v43 = v109;
                *(a2 - 1) = (unint64_t)v68;
                v110 = *(_QWORD *)v43;
                v111 = *v41;
                if (v110 < v111)
                {
                  v7[1] = v110;
                  v7[2] = v111;
                  v112 = *v7;
                  if (v110 < *v7)
                  {
                    *v7 = v110;
                    v7[1] = v112;
                  }
                }
              }
              return result;
            }
          }
        }
        *v70 = v13;
        *v71 = v69;
        v68 = (unint64_t *)result;
        goto LABEL_193;
      case 5:
        return (uint64_t)std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::NaturalLoop<JSC::DFG::CPSCFG> const**>(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v81 = (unint64_t)(v10 - 2) >> 1;
              v82 = v81;
              do
              {
                if (v81 >= v82)
                {
                  v83 = (2 * v82) | 1;
                  v84 = &v8[v83];
                  if (2 * v82 + 2 >= v10)
                  {
                    v85 = *v84;
                  }
                  else
                  {
                    v85 = v84[1];
                    v86 = *v84 >= v85;
                    if (*v84 < v85)
                      ++v84;
                    else
                      v85 = *v84;
                    if (!v86)
                      v83 = 2 * v82 + 2;
                  }
                  v87 = &v8[v82];
                  v88 = *v87;
                  if (v85 >= *v87)
                  {
                    do
                    {
                      *v87 = v85;
                      v87 = v84;
                      if (v81 < v83)
                        break;
                      v89 = (2 * v83) | 1;
                      v84 = &v8[v89];
                      v83 = 2 * v83 + 2;
                      if (v83 >= v10)
                      {
                        v85 = *v84;
                        v83 = v89;
                      }
                      else
                      {
                        v85 = *v84;
                        result = (uint64_t)(v84 + 1);
                        if (*v84 >= v84[1])
                        {
                          v83 = v89;
                        }
                        else
                        {
                          v85 = v84[1];
                          ++v84;
                        }
                      }
                    }
                    while (v85 >= v88);
                    *v87 = v88;
                  }
                }
                v90 = v82-- <= 0;
              }
              while (!v90);
              v91 = (unint64_t)v9 >> 3;
              do
              {
                v92 = 0;
                v93 = *v8;
                v94 = v8;
                do
                {
                  v95 = &v94[v92 + 1];
                  v96 = (2 * v92) | 1;
                  v92 = 2 * v92 + 2;
                  if (v92 >= v91)
                  {
                    v97 = *v95;
                    v92 = v96;
                  }
                  else
                  {
                    v97 = *v95;
                    if (*v95 >= v95[1])
                    {
                      v92 = v96;
                    }
                    else
                    {
                      v97 = v95[1];
                      ++v95;
                    }
                  }
                  *v94 = v97;
                  v94 = v95;
                }
                while (v92 <= (uint64_t)((unint64_t)(v91 - 2) >> 1));
                if (v95 == --a2)
                {
                  *v95 = v93;
                }
                else
                {
                  *v95 = *a2;
                  *a2 = v93;
                  v98 = (char *)v95 - (char *)v8 + 8;
                  if (v98 >= 9)
                  {
                    v99 = (((unint64_t)v98 >> 3) - 2) >> 1;
                    v100 = &v8[v99];
                    v101 = *v100;
                    v102 = *v95;
                    if (*v100 < *v95)
                    {
                      do
                      {
                        *v95 = v101;
                        v95 = v100;
                        if (!v99)
                          break;
                        v99 = (v99 - 1) >> 1;
                        v100 = &v8[v99];
                        v101 = *v100;
                      }
                      while (*v100 < v102);
                      *v95 = v102;
                    }
                  }
                }
                v90 = v91-- <= 2;
              }
              while (!v90);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          v13 = *(a2 - 1);
          if ((unint64_t)v9 >= 0x401)
          {
            v14 = *v12;
            v15 = *v8;
            if (*v12 >= *v8)
            {
              if (v13 < v14)
              {
                *v12 = v13;
                *(a2 - 1) = v14;
                v18 = *v8;
                if (*v12 < *v8)
                {
                  *v8 = *v12;
                  *v12 = v18;
                }
              }
            }
            else
            {
              if (v13 >= v14)
              {
                *v8 = v14;
                *v12 = v15;
                v20 = *(a2 - 1);
                if (v20 >= v15)
                  goto LABEL_22;
                *v12 = v20;
              }
              else
              {
                *v8 = v13;
              }
              *(a2 - 1) = v15;
            }
LABEL_22:
            v21 = &v8[v11];
            v24 = *(v21 - 1);
            v22 = v21 - 1;
            v23 = v24;
            v25 = v8[1];
            v26 = *(a2 - 2);
            if (v24 >= v25)
            {
              if (v26 < v23)
              {
                *v22 = v26;
                *(a2 - 2) = v23;
                v27 = v8[1];
                if (*v22 < v27)
                {
                  v8[1] = *v22;
                  *v22 = v27;
                }
              }
            }
            else
            {
              if (v26 >= v23)
              {
                v8[1] = v23;
                *v22 = v25;
                v29 = *(a2 - 2);
                if (v29 >= v25)
                  goto LABEL_34;
                *v22 = v29;
              }
              else
              {
                v8[1] = v26;
              }
              *(a2 - 2) = v25;
            }
LABEL_34:
            v30 = &v8[v11];
            v33 = v30[1];
            v31 = v30 + 1;
            v32 = v33;
            v34 = v8[2];
            v35 = *(a2 - 3);
            if (v33 >= v34)
            {
              if (v35 < v32)
              {
                *v31 = v35;
                *(a2 - 3) = v32;
                v36 = v8[2];
                if (*v31 < v36)
                {
                  v8[2] = *v31;
                  *v31 = v36;
                }
              }
            }
            else
            {
              if (v35 >= v32)
              {
                v8[2] = v32;
                *v31 = v34;
                v37 = *(a2 - 3);
                if (v37 >= v34)
                  goto LABEL_43;
                *v31 = v37;
              }
              else
              {
                v8[2] = v35;
              }
              *(a2 - 3) = v34;
            }
LABEL_43:
            v13 = *v12;
            v38 = *v22;
            v39 = *v31;
            if (*v12 >= *v22)
            {
              if (v39 >= v13)
                goto LABEL_50;
              *v12 = v39;
              *v31 = v13;
              v31 = v12;
              v13 = v38;
              if (v39 >= v38)
              {
                v13 = v39;
                goto LABEL_50;
              }
            }
            else if (v39 >= v13)
            {
              *v22 = v13;
              *v12 = v38;
              v22 = v12;
              v13 = v39;
              if (v39 >= v38)
              {
                v13 = v38;
LABEL_50:
                v40 = *v8;
                *v8 = v13;
                *v12 = v40;
                goto LABEL_51;
              }
            }
            *v22 = v39;
            *v31 = v38;
            goto LABEL_50;
          }
          v16 = *v8;
          v17 = *v12;
          if (*v8 >= *v12)
          {
            if (v13 < v16)
            {
              *v8 = v13;
              *(a2 - 1) = v16;
              v19 = *v12;
              if (*v8 < *v12)
              {
                *v12 = *v8;
                *v8 = v19;
              }
            }
          }
          else
          {
            if (v13 < v16)
            {
              *v12 = v13;
LABEL_30:
              *(a2 - 1) = v17;
              goto LABEL_51;
            }
            *v12 = v16;
            *v8 = v17;
            v28 = *(a2 - 1);
            if (v28 < v17)
            {
              *v8 = v28;
              goto LABEL_30;
            }
          }
LABEL_51:
          --a3;
          v41 = (unint64_t *)*v8;
          if ((a4 & 1) == 0 && *(v8 - 1) >= (unint64_t)v41)
          {
            if ((unint64_t)v41 >= *(a2 - 1))
            {
              v56 = v8 + 1;
              do
              {
                v8 = v56;
                if (v56 >= a2)
                  break;
                ++v56;
              }
              while ((unint64_t)v41 >= *v8);
            }
            else
            {
              v43 = (unint64_t)(v8 + 1);
              do
              {
                if ((unint64_t *)v43 == a2)
                  goto LABEL_191;
                v55 = *(_QWORD *)v43;
                v43 += 8;
              }
              while ((unint64_t)v41 >= v55);
              v8 = (unint64_t *)(v43 - 8);
            }
            v43 = (unint64_t)a2;
            if (v8 < a2)
            {
              v43 = (unint64_t)a2;
              while ((unint64_t *)v43 != v7)
              {
                v57 = *(_QWORD *)(v43 - 8);
                v43 -= 8;
                if ((unint64_t)v41 >= v57)
                  goto LABEL_93;
              }
              goto LABEL_191;
            }
LABEL_93:
            if ((unint64_t)v8 < v43)
            {
              v58 = *v8;
              v13 = *(_QWORD *)v43;
              do
              {
                *v8 = v13;
                v59 = v8 + 1;
                *(_QWORD *)v43 = v58;
                do
                {
                  if (v59 == a2)
                    goto LABEL_191;
                  v60 = *v59++;
                  v58 = v60;
                }
                while ((unint64_t)v41 >= v60);
                v8 = v59 - 1;
                do
                {
                  if ((unint64_t *)v43 == v7)
                    goto LABEL_191;
                  v61 = *(_QWORD *)(v43 - 8);
                  v43 -= 8;
                  v13 = v61;
                }
                while ((unint64_t)v41 < v61);
              }
              while ((unint64_t)v8 < v43);
            }
            v62 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v62;
            a4 = 0;
            *v62 = (unint64_t)v41;
            continue;
          }
          v42 = 0;
          do
          {
            v43 = (unint64_t)&v8[v42 + 1];
            if ((unint64_t *)v43 == a2)
              goto LABEL_191;
            v13 = *(_QWORD *)v43;
            ++v42;
          }
          while (*(_QWORD *)v43 < (unint64_t)v41);
          v43 = (unint64_t)&v8[v42];
          v44 = a2;
          if (v42 != 1)
          {
            while (v44 != v8)
            {
              v45 = *--v44;
              if (v45 < (unint64_t)v41)
                goto LABEL_63;
            }
            goto LABEL_191;
          }
          v44 = a2;
          do
          {
            if (v43 >= (unint64_t)v44)
              break;
            v46 = *--v44;
          }
          while (v46 >= (unint64_t)v41);
LABEL_63:
          if (v43 >= (unint64_t)v44)
          {
            v53 = (unint64_t *)(v43 - 8);
          }
          else
          {
            v47 = *v44;
            v48 = &v8[v42];
            v49 = v44;
            do
            {
              *v48 = v47;
              *v49 = v13;
              v50 = v48 + 1;
              do
              {
                if (v50 == a2)
                  goto LABEL_191;
                v51 = *v50++;
                v13 = v51;
              }
              while (v51 < (unint64_t)v41);
              v48 = v50 - 1;
              do
              {
                if (v49 == v8)
                  goto LABEL_191;
                v52 = *--v49;
                v47 = v52;
              }
              while (v52 >= (unint64_t)v41);
            }
            while (v48 < v49);
            v53 = v50 - 2;
          }
          if (v53 != v8)
            *v8 = *v53;
          *v53 = (unint64_t)v41;
          if (v43 < (unint64_t)v44)
          {
LABEL_79:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::NaturalLoop<JSC::DFG::CPSCFG> const**,false>(v7, v53, a3, a4 & 1);
            a4 = 0;
            v8 = v53 + 1;
            continue;
          }
          v54 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::NaturalLoop<JSC::DFG::CPSCFG> const**>(v8, v53);
          v8 = v53 + 1;
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::NaturalLoop<JSC::DFG::CPSCFG> const**>(v53 + 1, a2);
          if (!(_DWORD)result)
          {
            if (!v54)
              goto LABEL_79;
            continue;
          }
          a2 = v53;
          if (v54)
            return result;
          goto LABEL_2;
        }
        v41 = v8 + 1;
        v73 = v8 == a2 || v41 == a2;
        if ((a4 & 1) == 0)
        {
          if (v73)
            return result;
          v43 = 0;
          v105 = 1;
          while (1)
          {
            v13 = v8[v43];
            v43 = v105;
            v106 = *v41;
            if (*v41 < v13)
              break;
LABEL_189:
            v105 = v43 + 1;
            if (++v41 == a2)
              return result;
          }
          v107 = 0;
          while (1)
          {
            v108 = &v41[v107];
            *v108 = v13;
            if (!(v43 + v107))
              break;
            v13 = *(v108 - 2);
            --v107;
            if (v106 >= v13)
            {
              v41[v107] = v106;
              goto LABEL_189;
            }
          }
LABEL_191:
          __break(1u);
          goto LABEL_192;
        }
        if (!v73)
        {
          v74 = 8;
          v75 = v8;
          do
          {
            v76 = *v75;
            v75 = v41;
            v77 = *v41;
            if (v77 < v76)
            {
              v78 = v74;
              while (1)
              {
                *(unint64_t *)((char *)v8 + v78) = v76;
                v79 = v78 - 8;
                if (v78 == 8)
                  break;
                v76 = *(unint64_t *)((char *)v8 + v78 - 16);
                v78 -= 8;
                if (v77 >= v76)
                {
                  v80 = (unint64_t *)((char *)v8 + v79);
                  goto LABEL_133;
                }
              }
              v80 = v8;
LABEL_133:
              *v80 = v77;
            }
            v41 = v75 + 1;
            v74 += 8;
          }
          while (v75 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::NaturalLoop<JSC::DFG::CPSCFG> const**>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 < *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 < v12)
        {
          a1[1] = v13;
          *(a2 - 1) = v12;
          v31 = *a1;
          v30 = a1[1];
          if (v30 < *a1)
          {
            *a1 = v30;
            a1[1] = v31;
          }
        }
      }
      else
      {
        if (v13 >= v12)
        {
          *a1 = v12;
          a1[1] = v11;
          v36 = *(a2 - 1);
          if (v36 >= v11)
            return 1;
          a1[1] = v36;
        }
        else
        {
          *a1 = v13;
        }
        *(a2 - 1) = v11;
      }
      return 1;
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_36;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
        goto LABEL_37;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_37;
        goto LABEL_35;
      }
LABEL_36:
      v15 = v17;
LABEL_37:
      v32 = *(a2 - 1);
      if (v32 < v15)
      {
        *v16 = v32;
        *(a2 - 1) = v15;
        v33 = *v16;
        v34 = *v14;
        if (v33 < v34)
        {
          a1[1] = v33;
          a1[2] = v34;
          v35 = *a1;
          if (v33 < *a1)
          {
            *a1 = v33;
            a1[1] = v35;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::NaturalLoop<JSC::DFG::CPSCFG> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      if (v7 >= *a1)
      {
        if (v5 >= v7)
          goto LABEL_19;
        a1[1] = v5;
        *v6 = v7;
        v9 = a1;
        v10 = a1 + 1;
      }
      else
      {
        v9 = a1;
        v10 = a1 + 2;
        if (v5 < v7)
          goto LABEL_18;
        *a1 = v7;
        a1[1] = v8;
        v9 = a1 + 1;
        v10 = a1 + 2;
      }
      if (v5 >= v8)
        goto LABEL_19;
LABEL_18:
      *v9 = v5;
      *v10 = v8;
LABEL_19:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v6;
        if (*v22 < v26)
        {
          v27 = i;
          while (1)
          {
            *(unint64_t *)((char *)a1 + v27) = v26;
            v28 = v27 - 8;
            if (v27 == 8)
              break;
            v26 = *(unint64_t *)((char *)a1 + v27 - 16);
            v27 -= 8;
            if (v25 >= v26)
            {
              v29 = (unint64_t *)((char *)a1 + v28);
              goto LABEL_27;
            }
          }
          v29 = a1;
LABEL_27:
          *v29 = v25;
          if (++v23 == 8)
            break;
        }
        v6 = v22++;
        if (v22 == a2)
          return 1;
      }
      return v22 + 1 == a2;
  }
}

unint64_t *std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::NaturalLoop<JSC::DFG::CPSCFG> const**>(unint64_t *result, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v5 = *a2;
  v6 = *result;
  v7 = *a3;
  if (*a2 >= *result)
  {
    if (v7 >= v5)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v7;
      *a3 = v5;
      v8 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v8;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v7 < v5)
    {
      *result = v7;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*a3 < v6)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*a4 < v5)
  {
    *a3 = *a4;
    *a4 = v5;
    v9 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v9;
      v10 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v10;
      }
    }
  }
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *result;
        if (*a2 < *result)
        {
          *result = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

uint64_t WTF::NaturalLoops<JSC::DFG::CFG>::NaturalLoops(unint64_t *a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  _QWORD *v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  void *v42;
  uint64_t v44;
  void **p_src;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  WTF *v59;
  uint64_t v62;
  void **v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int *v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  _DWORD *v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  int v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  uint64_t v91;
  unsigned int v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  _DWORD *v100;
  uint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v108;
  uint64_t v109;
  int v110;
  _QWORD *v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  void **v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  void *v122;
  void *v123;
  unsigned int *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF *v129;
  _QWORD *v130;
  void *__s2;
  int v132;
  unsigned int v133;
  void *__s1;
  uint64_t v135;
  WTF *v136[2];
  void *__src;
  uint64_t v138;
  _QWORD v139[4];
  uint64_t v140;

  v8 = a3;
  v9 = (WTF *)a2;
  v10 = (uint64_t)a1;
  *a1 = a2;
  a1[1] = (unint64_t)(a1 + 3);
  v11 = a1 + 1;
  a1[2] = 4;
  v12 = *(_QWORD *)a2;
  a1[39] = 0;
  a1[40] = 0;
  v13 = *(_DWORD *)(v12 + 60);
  if (v13)
  {
    if (v13 <= 0x10)
      v14 = 16;
    else
      v14 = *(_DWORD *)(v12 + 60);
    if (v14 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1983E681CLL);
    }
    v15 = WTF::fastMalloc((WTF *)(8 * v14));
    *(_DWORD *)(v10 + 320) = v14;
    *(_QWORD *)(v10 + 312) = v15;
    v17 = *(_QWORD *)(v10 + 8);
    v18 = *(unsigned int *)(v10 + 20);
    v125 = (unsigned int *)(v10 + 324);
    *(_DWORD *)(v10 + 324) = v13;
    if ((_DWORD)v18)
    {
      v104 = 72 * v18;
      v105 = v17 + 32;
      do
      {
        v106 = *(_QWORD *)(v105 - 16);
        if (v105 != v106 && v106 != 0)
        {
          *(_QWORD *)(v105 - 16) = 0;
          *(_DWORD *)(v105 - 8) = 0;
          WTF::fastFree(v106, (void *)a2, a3, v16, a5, a6, a7, a8);
        }
        v105 += 72;
        v104 -= 72;
      }
      while (v104);
    }
  }
  else
  {
    v125 = (unsigned int *)a1 + 81;
  }
  *(_DWORD *)(v10 + 20) = 0;
  v19 = *(_DWORD *)(*(_QWORD *)v9 + 60);
  v129 = v9;
  v130 = v11;
  if (v19)
  {
    v127 = v8;
    do
    {
      if (*(_DWORD *)(*(_QWORD *)v9 + 60) <= --v19)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E67D4);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 48) + 8 * v19);
      if (v20)
      {
        v21 = *(_DWORD *)(v20 + 52);
        while (v21)
        {
          if (*(_DWORD *)(v20 + 52) <= --v21)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E67DCLL);
          }
          v22 = *(_QWORD *)(*(_QWORD *)(v20 + 40) + 8 * v21);
          if (v20 == v22)
            goto LABEL_20;
          v23 = *(unsigned int *)(v22 + 8);
          v24 = *(_DWORD *)(v8 + 20);
          if (v24 <= v23)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E67E4);
          }
          v25 = *(unsigned int *)(v20 + 8);
          if (v24 <= v25)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E67ECLL);
          }
          v26 = *(_QWORD *)(v8 + 8);
          v27 = v26 + 32 * v23;
          v28 = v26 + 32 * v25;
          if (*(_DWORD *)(v27 + 24) > *(_DWORD *)(v28 + 24) && *(_DWORD *)(v27 + 28) < *(_DWORD *)(v28 + 28))
          {
LABEL_20:
            v29 = *(_DWORD *)(v10 + 20);
            v30 = 72 * v29;
            while (1)
            {
              v31 = v30 - 72;
              if (!v30)
                break;
              v32 = *v11;
              v33 = *(_QWORD *)(*v11 + v30 - 64);
              v30 -= 72;
              if (v33 == v20)
              {
                v136[0] = *(WTF **)(*(_QWORD *)(v20 + 40) + 8 * v21);
                v108 = v32 + v31;
                v110 = *(_DWORD *)(v32 + v31 + 24);
                v109 = *(unsigned int *)(v32 + v31 + 28);
                if ((_DWORD)v109 == v110)
                {
                  v111 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v108 + 16, v109 + 1, (unint64_t)v136);
                  v109 = *(unsigned int *)(v108 + 28);
                  *(_QWORD *)(*(_QWORD *)(v108 + 16) + 8 * v109) = *v111;
                }
                else
                {
                  *(_QWORD *)(*(_QWORD *)(v108 + 16) + 8 * v109) = v22;
                }
                *(_DWORD *)(v108 + 28) = v109 + 1;
                goto LABEL_18;
              }
            }
            v136[0] = v9;
            v136[1] = (WTF *)v20;
            __src = v139;
            LODWORD(v140) = -1;
            HIDWORD(v140) = v29;
            v139[0] = v22;
            v138 = 0x100000004;
            if (v29 == *(_DWORD *)(v10 + 16))
            {
              WTF::Vector<WTF::NaturalLoop<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::NaturalLoop<JSC::DFG::CFG>&>((uint64_t)v11, (unint64_t)v136);
            }
            else
            {
              v34 = v10;
              v35 = *v11;
              v36 = *v11 + 72 * v29;
              *(_OWORD *)v36 = *(_OWORD *)v136;
              v37 = (void *)(v36 + 32);
              *(_QWORD *)(v36 + 16) = v36 + 32;
              v38 = (_QWORD *)(v36 + 16);
              v39 = HIDWORD(v138);
              *(_DWORD *)(v36 + 28) = HIDWORD(v138);
              *(_DWORD *)(v36 + 24) = 4;
              v40 = (_DWORD *)(v36 + 24);
              if (v39 >= 5)
              {
                if (v39 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983E67FCLL);
                }
                v37 = (void *)WTF::fastMalloc((WTF *)(8 * v39));
                *v40 = v39;
                *v38 = v37;
              }
              memcpy(v37, __src, 8 * HIDWORD(v138));
              *(_QWORD *)(v35 + 72 * v29 + 64) = v140;
              v10 = v34;
              ++*(_DWORD *)(v34 + 20);
              v9 = v129;
              v11 = v130;
              v8 = v127;
            }
            v42 = __src;
            if (v139 != __src && __src != 0)
            {
              __src = 0;
              LODWORD(v138) = 0;
              WTF::fastFree((unint64_t)v42, (void *)a2, a3, v41, a5, a6, a7, a8);
            }
          }
LABEL_18:
          ;
        }
      }
    }
    while (v19);
    v44 = *(unsigned int *)(*(_QWORD *)v9 + 60);
    p_src = &__src;
    v136[0] = (WTF *)&__src;
    v136[1] = (WTF *)4;
    if ((_DWORD)v44)
    {
      v46 = (char *)WTF::fastMalloc((WTF *)(((unint64_t)(v44 + 31) >> 3) & 0x3FFFFFFC));
      bzero(v46, ((unint64_t)(v44 + 31) >> 3) & 0x3FFFFFFC);
    }
    else
    {
      v46 = 0;
      v44 = 0;
    }
    v11 = v130;
  }
  else
  {
    v46 = 0;
    v44 = 0;
    p_src = &__src;
    v136[0] = (WTF *)&__src;
    v136[1] = (WTF *)4;
  }
  v47 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v47)
  {
    v126 = ((unint64_t)(v44 + 31) >> 3) & 0x3FFFFFFC;
    do
    {
      v62 = v47 - 1;
      if (*(_DWORD *)(v10 + 20) <= v62)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E6830);
      }
      v63 = p_src;
      v128 = v62;
      v64 = v62;
      v65 = *v11;
      bzero(v46, v126);
      v66 = v65 + 72 * v64;
      v69 = *(_DWORD *)(v66 + 28);
      v68 = (unsigned int *)(v66 + 28);
      v67 = v69;
      if (v69)
      {
        v70 = v67 - 1;
        v71 = 8 * (v67 - 1);
        do
        {
          if (*v68 <= v70)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E6838);
          }
          v72 = *(unsigned int **)(*(_QWORD *)(v65 + 72 * v64 + 16) + v71);
          *(_DWORD *)&v46[((unint64_t)v72[2] >> 3) & 0x1FFFFFFC] |= 1 << v72[2];
          if (*v68 <= v70)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E6840);
          }
          __s1 = v72;
          v73 = HIDWORD(v136[1]);
          if (HIDWORD(v136[1]) == LODWORD(v136[1]))
          {
            WTF::Vector<JSC::DFG::BasicBlock *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *>((uint64_t)v136, (unint64_t)&__s1);
          }
          else
          {
            *((_QWORD *)v136[0] + HIDWORD(v136[1])) = v72;
            HIDWORD(v136[1]) = v73 + 1;
          }
          v71 -= 8;
          --v70;
        }
        while (v70 != -1);
      }
      v74 = HIDWORD(v136[1]);
      if (HIDWORD(v136[1]))
      {
        v75 = v65 + 72 * v64;
        v76 = (_QWORD *)(v75 + 8);
        v77 = (_QWORD *)(v75 + 16);
        v78 = (_DWORD *)(v75 + 24);
        do
        {
          v79 = *((_QWORD *)v136[0] + --v74);
          HIDWORD(v136[1]) = v74;
          if (v79 != *v76)
          {
            v80 = *(_DWORD *)(v79 + 52);
            if (v80)
            {
              v81 = v80 - 1;
              v82 = 8 * (v80 - 1);
              do
              {
                __s2 = 0;
                if (*(_DWORD *)(v79 + 52) <= v81)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983E6804);
                }
                v83 = *(unsigned int **)(*(_QWORD *)(v79 + 40) + v82);
                __s2 = v83;
                if (((*(_DWORD *)&v46[((unint64_t)v83[2] >> 3) & 0x1FFFFFFC] >> v83[2]) & 1) == 0)
                {
                  __s1 = v83;
                  v84 = *v68;
                  if ((_DWORD)v84 == *v78)
                  {
                    v86 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v77, v84 + 1, (unint64_t)&__s1);
                    v84 = *v68;
                    *(_QWORD *)(*v77 + 8 * v84) = *v86;
                  }
                  else
                  {
                    *(_QWORD *)(*v77 + 8 * v84) = v83;
                  }
                  *v68 = v84 + 1;
                  v85 = HIDWORD(v136[1]);
                  if (HIDWORD(v136[1]) == LODWORD(v136[1]))
                  {
                    v87 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v136, HIDWORD(v136[1]) + 1, (unint64_t)&__s2);
                    v85 = HIDWORD(v136[1]);
                    *((_QWORD *)v136[0] + HIDWORD(v136[1])) = *v87;
                  }
                  else
                  {
                    *((_QWORD *)v136[0] + HIDWORD(v136[1])) = __s2;
                  }
                  HIDWORD(v136[1]) = v85 + 1;
                  *(_DWORD *)&v46[((unint64_t)*((unsigned int *)__s2 + 2) >> 3) & 0x1FFFFFFC] |= 1 << *((_DWORD *)__s2 + 2);
                }
                v82 -= 8;
                --v81;
              }
              while (v81 != -1);
              v74 = HIDWORD(v136[1]);
            }
          }
        }
        while (v74);
      }
      v9 = v129;
      v11 = v130;
      p_src = v63;
      v47 = v128;
    }
    while ((_DWORD)v128);
  }
  v48 = (uint64_t *)(v10 + 312);
  v49 = *(_QWORD *)v9;
  v50 = *(_DWORD *)(*(_QWORD *)v9 + 60);
  v51 = (uint64_t)v125;
  if (v50)
  {
    v52 = v50 - 1;
    v53 = 8 * v52;
    do
    {
      if (*(_DWORD *)(v49 + 60) <= v52)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E67F4);
      }
      v54 = *(_QWORD *)(*(_QWORD *)(v49 + 48) + v53);
      if (v54)
      {
        v55 = *(unsigned int *)(v54 + 8);
        if (*v125 <= v55
          || (v56 = *v48,
              *(_DWORD *)(*v48 + 8 * v55 + 4) = -1,
              v57 = *(unsigned int *)(v54 + 8),
              *v125 <= v57))
        {
          __break(0xC471u);
          JUMPOUT(0x1983E67CCLL);
        }
        *(_DWORD *)(v56 + 8 * v57) = -1;
      }
      v53 -= 8;
      --v52;
    }
    while (v52 != -1);
  }
  v58 = *(_DWORD *)(v10 + 20);
  if (!v58)
    goto LABEL_46;
  do
  {
    if (*(_DWORD *)(v10 + 20) <= --v58)
    {
      __break(0xC471u);
      JUMPOUT(0x1983E6848);
    }
    v88 = *v11;
    v89 = *v11 + 72 * v58;
    v92 = *(_DWORD *)(v89 + 28);
    v90 = (unsigned int *)(v89 + 28);
    v91 = v92;
    if (v92)
    {
      v93 = v91 - 1;
      while (1)
      {
        v94 = *v90;
        if (v93 >= v94)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E680CLL);
        }
        v95 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v88 + 72 * v58 + 16) + 8 * v93) + 8);
        if (*v125 <= v95)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E6814);
        }
        v96 = (unsigned int *)(*v48 + 8 * v95);
        a2 = *v96;
        if ((_DWORD)a2 == -1)
          break;
        v97 = *(_DWORD *)(v10 + 20);
        if (v97 <= a2)
          goto LABEL_168;
        a3 = *(unsigned int *)(v88 + 72 * a2 + 28);
        if (v94 < a3)
          break;
        v112 = v96[1];
        ++v96;
        a2 = v112;
        if (v112 == -1)
          goto LABEL_91;
        if (v97 <= a2)
        {
LABEL_168:
          __break(0xC471u);
          JUMPOUT(0x1983E6858);
        }
        if (v94 < *(_DWORD *)(v88 + 72 * a2 + 28))
          goto LABEL_91;
LABEL_92:
        if (--v93 == -1)
          goto LABEL_97;
      }
      v96[1] = a2;
LABEL_91:
      *v96 = v58;
      goto LABEL_92;
    }
LABEL_97:
    ;
  }
  while (v58);
  v98 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v98)
  {
    v99 = *v125;
    v100 = (_DWORD *)(v88 + 72 * v98 - 8);
    v101 = v98 - 1;
    while (1)
    {
      v102 = *(unsigned int *)(*((_QWORD *)v100 - 7) + 8);
      if (v99 <= v102)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E6850);
      }
      v103 = (_DWORD *)(*v48 + 8 * v102);
      if (v101 != *v103)
        break;
      *v100 = v103[1];
      v100 -= 18;
      if (--v101 == -1)
        goto LABEL_46;
    }
LABEL_170:
    __break(0xC471u);
    JUMPOUT(0x1983E65F0);
  }
LABEL_46:
  if ((a4 & 1) != 0)
  {
    v113 = *(_DWORD *)(v49 + 60);
    if (v113)
    {
      while (*(_DWORD *)(*(_QWORD *)v9 + 60) > --v113)
      {
        v114 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 48) + 8 * v113);
        if (v114)
        {
          v115 = p_src;
          __s1 = 0;
          v135 = 0;
          v116 = *(_DWORD *)(v10 + 20);
          if (v116)
          {
            v117 = 0;
            do
            {
              if (*(_DWORD *)(v10 + 20) <= --v116)
              {
                __break(0xC471u);
                JUMPOUT(0x1983E6860);
              }
              v118 = *v11 + 72 * v116;
              v119 = 8 * *(unsigned int *)(v118 + 28) - 8;
              while (v119 != -8)
              {
                v120 = *(_QWORD *)(*(_QWORD *)(v118 + 16) + v119);
                v119 -= 8;
                if (v120 == v114)
                {
                  if (v117 == (_DWORD)v135)
                  {
                    WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__s1, v117 + 1);
                    v117 = HIDWORD(v135);
                    v121 = (char *)__s1 + 8 * HIDWORD(v135);
                  }
                  else
                  {
                    v121 = (char *)__s1 + 8 * v117;
                  }
                  ++v117;
                  *(_QWORD *)v121 = v118;
                  HIDWORD(v135) = v117;
                  break;
                }
              }
            }
            while (v116);
          }
          WTF::NaturalLoops<JSC::DFG::CFG>::loopsOf(&__s2, v10, *(_DWORD *)(v114 + 8));
          std::sort[abi:sn180100]<WTF::NaturalLoop<JSC::DFG::CFG> const**>((uint64_t)__s1, (unint64_t *)__s1 + HIDWORD(v135));
          std::sort[abi:sn180100]<WTF::NaturalLoop<JSC::DFG::CFG> const**>((uint64_t)__s2, (unint64_t *)__s2 + v133);
          if (HIDWORD(v135) != v133 || (v122 = __s1, v123 = __s2, memcmp(__s1, __s2, 8 * HIDWORD(v135))))
          {
            __break(0xC471u);
            JUMPOUT(0x1983E67C4);
          }
          if (v123)
          {
            __s2 = 0;
            v132 = 0;
            WTF::fastFree((unint64_t)v123, (void *)a2, a3, v51, a5, a6, a7, a8);
            v122 = __s1;
          }
          if (v122)
          {
            __s1 = 0;
            LODWORD(v135) = 0;
            WTF::fastFree((unint64_t)v122, (void *)a2, a3, v51, a5, a6, a7, a8);
          }
          v11 = v130;
          p_src = v115;
        }
        if (!v113)
          goto LABEL_47;
      }
      goto LABEL_170;
    }
  }
LABEL_47:
  v59 = v136[0];
  if (p_src != (void **)v136[0] && v136[0] != 0)
  {
    v136[0] = 0;
    LODWORD(v136[1]) = 0;
    WTF::fastFree((unint64_t)v59, (void *)a2, a3, v51, a5, a6, a7, a8);
  }
  if (v46)
    WTF::fastFree((unint64_t)v46, (void *)a2, a3, v51, a5, a6, a7, a8);
  return v10;
}

uint64_t std::sort[abi:sn180100]<WTF::NaturalLoop<JSC::DFG::CFG> const**>(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = 126 - 2 * __clz(((uint64_t)a2 - a1) >> 3);
  if (a2 == (unint64_t *)a1)
    v3 = 0;
  else
    v3 = v2;
  return std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::NaturalLoop<JSC::DFG::CFG> const**,false>(a1, a2, v3, 1);
}

void *WTF::Vector<WTF::NaturalLoop<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::NaturalLoop<JSC::DFG::CFG>&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  void *result;

  v3 = WTF::Vector<WTF::NaturalLoop<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = WTF::NaturalLoop<JSC::B3::CFG>::NaturalLoop(*(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WTF::NaturalLoop<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 72 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WTF::NaturalLoop<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::NaturalLoop<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

void WTF::Vector<WTF::NaturalLoop<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(_QWORD *)a1;
    v4 = *(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<WTF::NaturalLoop<JSC::B3::CFG>,4ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    WTF::VectorMover<false,WTF::NaturalLoop<JSC::DFG::CFG>>::move(v3, v4, *(_QWORD *)a1, v5, v6, v7, v8, v9);
    if (a1 + 16 != v3 && v3 != 0)
    {
      if (*(_QWORD *)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

void WTF::VectorMover<false,WTF::NaturalLoop<JSC::DFG::CFG>>::move(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v19;

  if (a1 != a2)
  {
    v11 = 0;
    do
    {
      v12 = a1 + v11;
      v13 = a3 + v11;
      *(_OWORD *)v13 = *(_OWORD *)(a1 + v11);
      v14 = (void *)(a3 + v11 + 32);
      *(_QWORD *)(v13 + 16) = v14;
      *(_QWORD *)(v13 + 24) = 4;
      v15 = *(void **)(a1 + v11 + 16);
      v16 = a1 + v11 + 32;
      if ((void *)v16 == v15)
      {
        memcpy(v14, v15, 8 * *(unsigned int *)(v12 + 28));
      }
      else
      {
        *(_QWORD *)(v12 + 16) = v16;
        *(_QWORD *)(v13 + 16) = v15;
        v19 = *(_DWORD *)(v12 + 24);
        *(_DWORD *)(v12 + 24) = 4;
        *(_DWORD *)(v13 + 24) = v19;
      }
      v17 = *(_DWORD *)(a1 + v11 + 28);
      *(_DWORD *)(a1 + v11 + 28) = 0;
      *(_DWORD *)(v13 + 28) = v17;
      *(_QWORD *)(a3 + v11 + 64) = *(_QWORD *)(a1 + v11 + 64);
      v18 = *(_QWORD *)(v12 + 16);
      if (v16 != v18)
      {
        if (v18)
        {
          *(_QWORD *)(v12 + 16) = 0;
          *(_DWORD *)(a1 + v11 + 24) = 0;
          WTF::fastFree(v18, v15, a3, a4, a5, a6, a7, a8);
        }
      }
      v11 += 72;
    }
    while (a1 + v11 != a2);
  }
}

_QWORD *WTF::Vector<JSC::DFG::BasicBlock *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<JSC::DFG::BasicBlock *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::BasicBlock *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 5)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 4;
    goto LABEL_12;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::DFG::BasicBlock *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v7 = *(const void **)a1;
    v8 = *(unsigned int *)(a1 + 12);
    if (v5 < 5)
    {
      v9 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
    }
    else
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
    }
    memcpy(v9, v7, 8 * v8);
    if ((const void *)(a1 + 16) != v7 && v7)
    {
      if (*(const void **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::NaturalLoop<JSC::DFG::CFG> const**,false>(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  BOOL v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t *v69;
  unint64_t *v70;
  unint64_t **v71;
  BOOL v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  int64_t v81;
  int64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  BOOL v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v63 = *(a2 - 1);
        v64 = *v8;
        if (v63 < *v8)
        {
          *v8 = v63;
          *(a2 - 1) = v64;
        }
        return result;
      case 3:
        v65 = *v8;
        v66 = v8[1];
        v67 = *(a2 - 1);
        if (v66 >= *v8)
        {
          if (v67 < v66)
          {
            v8[1] = v67;
            *(a2 - 1) = v66;
            v104 = *v8;
            v103 = v8[1];
            if (v103 < *v8)
            {
              *v8 = v103;
              v8[1] = v104;
            }
          }
        }
        else
        {
          if (v67 >= v66)
          {
            *v8 = v66;
            v8[1] = v65;
            v113 = *(a2 - 1);
            if (v113 >= v65)
              return result;
            v8[1] = v113;
          }
          else
          {
            *v8 = v67;
          }
          *(a2 - 1) = v65;
        }
        return result;
      case 4:
        v41 = v8 + 1;
        v68 = (unint64_t *)v8[1];
        v43 = (unint64_t)(v8 + 2);
        v13 = v8[2];
        v69 = (unint64_t *)*v8;
        if ((unint64_t)v68 >= *v8)
        {
          if (v13 >= (unint64_t)v68)
            goto LABEL_192;
          *v41 = v13;
          *(_QWORD *)v43 = v68;
          v70 = v8;
          v71 = (unint64_t **)(v8 + 1);
          result = (uint64_t)v68;
          if (v13 >= (unint64_t)v69)
            goto LABEL_193;
        }
        else
        {
          v70 = v8;
          v71 = (unint64_t **)(v8 + 2);
          result = *v8;
          if (v13 >= (unint64_t)v68)
          {
            *v8 = (unint64_t)v68;
            v8[1] = (unint64_t)v69;
            v70 = v8 + 1;
            v71 = (unint64_t **)(v8 + 2);
            result = (uint64_t)v69;
            if (v13 >= (unint64_t)v69)
            {
LABEL_192:
              v68 = (unint64_t *)v13;
LABEL_193:
              v109 = *(a2 - 1);
              if (v109 < (unint64_t)v68)
              {
                *(_QWORD *)v43 = v109;
                *(a2 - 1) = (unint64_t)v68;
                v110 = *(_QWORD *)v43;
                v111 = *v41;
                if (v110 < v111)
                {
                  v7[1] = v110;
                  v7[2] = v111;
                  v112 = *v7;
                  if (v110 < *v7)
                  {
                    *v7 = v110;
                    v7[1] = v112;
                  }
                }
              }
              return result;
            }
          }
        }
        *v70 = v13;
        *v71 = v69;
        v68 = (unint64_t *)result;
        goto LABEL_193;
      case 5:
        return (uint64_t)std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::NaturalLoop<JSC::DFG::CPSCFG> const**>(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v81 = (unint64_t)(v10 - 2) >> 1;
              v82 = v81;
              do
              {
                if (v81 >= v82)
                {
                  v83 = (2 * v82) | 1;
                  v84 = &v8[v83];
                  if (2 * v82 + 2 >= v10)
                  {
                    v85 = *v84;
                  }
                  else
                  {
                    v85 = v84[1];
                    v86 = *v84 >= v85;
                    if (*v84 < v85)
                      ++v84;
                    else
                      v85 = *v84;
                    if (!v86)
                      v83 = 2 * v82 + 2;
                  }
                  v87 = &v8[v82];
                  v88 = *v87;
                  if (v85 >= *v87)
                  {
                    do
                    {
                      *v87 = v85;
                      v87 = v84;
                      if (v81 < v83)
                        break;
                      v89 = (2 * v83) | 1;
                      v84 = &v8[v89];
                      v83 = 2 * v83 + 2;
                      if (v83 >= v10)
                      {
                        v85 = *v84;
                        v83 = v89;
                      }
                      else
                      {
                        v85 = *v84;
                        result = (uint64_t)(v84 + 1);
                        if (*v84 >= v84[1])
                        {
                          v83 = v89;
                        }
                        else
                        {
                          v85 = v84[1];
                          ++v84;
                        }
                      }
                    }
                    while (v85 >= v88);
                    *v87 = v88;
                  }
                }
                v90 = v82-- <= 0;
              }
              while (!v90);
              v91 = (unint64_t)v9 >> 3;
              do
              {
                v92 = 0;
                v93 = *v8;
                v94 = v8;
                do
                {
                  v95 = &v94[v92 + 1];
                  v96 = (2 * v92) | 1;
                  v92 = 2 * v92 + 2;
                  if (v92 >= v91)
                  {
                    v97 = *v95;
                    v92 = v96;
                  }
                  else
                  {
                    v97 = *v95;
                    if (*v95 >= v95[1])
                    {
                      v92 = v96;
                    }
                    else
                    {
                      v97 = v95[1];
                      ++v95;
                    }
                  }
                  *v94 = v97;
                  v94 = v95;
                }
                while (v92 <= (uint64_t)((unint64_t)(v91 - 2) >> 1));
                if (v95 == --a2)
                {
                  *v95 = v93;
                }
                else
                {
                  *v95 = *a2;
                  *a2 = v93;
                  v98 = (char *)v95 - (char *)v8 + 8;
                  if (v98 >= 9)
                  {
                    v99 = (((unint64_t)v98 >> 3) - 2) >> 1;
                    v100 = &v8[v99];
                    v101 = *v100;
                    v102 = *v95;
                    if (*v100 < *v95)
                    {
                      do
                      {
                        *v95 = v101;
                        v95 = v100;
                        if (!v99)
                          break;
                        v99 = (v99 - 1) >> 1;
                        v100 = &v8[v99];
                        v101 = *v100;
                      }
                      while (*v100 < v102);
                      *v95 = v102;
                    }
                  }
                }
                v90 = v91-- <= 2;
              }
              while (!v90);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          v13 = *(a2 - 1);
          if ((unint64_t)v9 >= 0x401)
          {
            v14 = *v12;
            v15 = *v8;
            if (*v12 >= *v8)
            {
              if (v13 < v14)
              {
                *v12 = v13;
                *(a2 - 1) = v14;
                v18 = *v8;
                if (*v12 < *v8)
                {
                  *v8 = *v12;
                  *v12 = v18;
                }
              }
            }
            else
            {
              if (v13 >= v14)
              {
                *v8 = v14;
                *v12 = v15;
                v20 = *(a2 - 1);
                if (v20 >= v15)
                  goto LABEL_22;
                *v12 = v20;
              }
              else
              {
                *v8 = v13;
              }
              *(a2 - 1) = v15;
            }
LABEL_22:
            v21 = &v8[v11];
            v24 = *(v21 - 1);
            v22 = v21 - 1;
            v23 = v24;
            v25 = v8[1];
            v26 = *(a2 - 2);
            if (v24 >= v25)
            {
              if (v26 < v23)
              {
                *v22 = v26;
                *(a2 - 2) = v23;
                v27 = v8[1];
                if (*v22 < v27)
                {
                  v8[1] = *v22;
                  *v22 = v27;
                }
              }
            }
            else
            {
              if (v26 >= v23)
              {
                v8[1] = v23;
                *v22 = v25;
                v29 = *(a2 - 2);
                if (v29 >= v25)
                  goto LABEL_34;
                *v22 = v29;
              }
              else
              {
                v8[1] = v26;
              }
              *(a2 - 2) = v25;
            }
LABEL_34:
            v30 = &v8[v11];
            v33 = v30[1];
            v31 = v30 + 1;
            v32 = v33;
            v34 = v8[2];
            v35 = *(a2 - 3);
            if (v33 >= v34)
            {
              if (v35 < v32)
              {
                *v31 = v35;
                *(a2 - 3) = v32;
                v36 = v8[2];
                if (*v31 < v36)
                {
                  v8[2] = *v31;
                  *v31 = v36;
                }
              }
            }
            else
            {
              if (v35 >= v32)
              {
                v8[2] = v32;
                *v31 = v34;
                v37 = *(a2 - 3);
                if (v37 >= v34)
                  goto LABEL_43;
                *v31 = v37;
              }
              else
              {
                v8[2] = v35;
              }
              *(a2 - 3) = v34;
            }
LABEL_43:
            v13 = *v12;
            v38 = *v22;
            v39 = *v31;
            if (*v12 >= *v22)
            {
              if (v39 >= v13)
                goto LABEL_50;
              *v12 = v39;
              *v31 = v13;
              v31 = v12;
              v13 = v38;
              if (v39 >= v38)
              {
                v13 = v39;
                goto LABEL_50;
              }
            }
            else if (v39 >= v13)
            {
              *v22 = v13;
              *v12 = v38;
              v22 = v12;
              v13 = v39;
              if (v39 >= v38)
              {
                v13 = v38;
LABEL_50:
                v40 = *v8;
                *v8 = v13;
                *v12 = v40;
                goto LABEL_51;
              }
            }
            *v22 = v39;
            *v31 = v38;
            goto LABEL_50;
          }
          v16 = *v8;
          v17 = *v12;
          if (*v8 >= *v12)
          {
            if (v13 < v16)
            {
              *v8 = v13;
              *(a2 - 1) = v16;
              v19 = *v12;
              if (*v8 < *v12)
              {
                *v12 = *v8;
                *v8 = v19;
              }
            }
          }
          else
          {
            if (v13 < v16)
            {
              *v12 = v13;
LABEL_30:
              *(a2 - 1) = v17;
              goto LABEL_51;
            }
            *v12 = v16;
            *v8 = v17;
            v28 = *(a2 - 1);
            if (v28 < v17)
            {
              *v8 = v28;
              goto LABEL_30;
            }
          }
LABEL_51:
          --a3;
          v41 = (unint64_t *)*v8;
          if ((a4 & 1) == 0 && *(v8 - 1) >= (unint64_t)v41)
          {
            if ((unint64_t)v41 >= *(a2 - 1))
            {
              v56 = v8 + 1;
              do
              {
                v8 = v56;
                if (v56 >= a2)
                  break;
                ++v56;
              }
              while ((unint64_t)v41 >= *v8);
            }
            else
            {
              v43 = (unint64_t)(v8 + 1);
              do
              {
                if ((unint64_t *)v43 == a2)
                  goto LABEL_191;
                v55 = *(_QWORD *)v43;
                v43 += 8;
              }
              while ((unint64_t)v41 >= v55);
              v8 = (unint64_t *)(v43 - 8);
            }
            v43 = (unint64_t)a2;
            if (v8 < a2)
            {
              v43 = (unint64_t)a2;
              while ((unint64_t *)v43 != v7)
              {
                v57 = *(_QWORD *)(v43 - 8);
                v43 -= 8;
                if ((unint64_t)v41 >= v57)
                  goto LABEL_93;
              }
              goto LABEL_191;
            }
LABEL_93:
            if ((unint64_t)v8 < v43)
            {
              v58 = *v8;
              v13 = *(_QWORD *)v43;
              do
              {
                *v8 = v13;
                v59 = v8 + 1;
                *(_QWORD *)v43 = v58;
                do
                {
                  if (v59 == a2)
                    goto LABEL_191;
                  v60 = *v59++;
                  v58 = v60;
                }
                while ((unint64_t)v41 >= v60);
                v8 = v59 - 1;
                do
                {
                  if ((unint64_t *)v43 == v7)
                    goto LABEL_191;
                  v61 = *(_QWORD *)(v43 - 8);
                  v43 -= 8;
                  v13 = v61;
                }
                while ((unint64_t)v41 < v61);
              }
              while ((unint64_t)v8 < v43);
            }
            v62 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v62;
            a4 = 0;
            *v62 = (unint64_t)v41;
            continue;
          }
          v42 = 0;
          do
          {
            v43 = (unint64_t)&v8[v42 + 1];
            if ((unint64_t *)v43 == a2)
              goto LABEL_191;
            v13 = *(_QWORD *)v43;
            ++v42;
          }
          while (*(_QWORD *)v43 < (unint64_t)v41);
          v43 = (unint64_t)&v8[v42];
          v44 = a2;
          if (v42 != 1)
          {
            while (v44 != v8)
            {
              v45 = *--v44;
              if (v45 < (unint64_t)v41)
                goto LABEL_63;
            }
            goto LABEL_191;
          }
          v44 = a2;
          do
          {
            if (v43 >= (unint64_t)v44)
              break;
            v46 = *--v44;
          }
          while (v46 >= (unint64_t)v41);
LABEL_63:
          if (v43 >= (unint64_t)v44)
          {
            v53 = (unint64_t *)(v43 - 8);
          }
          else
          {
            v47 = *v44;
            v48 = &v8[v42];
            v49 = v44;
            do
            {
              *v48 = v47;
              *v49 = v13;
              v50 = v48 + 1;
              do
              {
                if (v50 == a2)
                  goto LABEL_191;
                v51 = *v50++;
                v13 = v51;
              }
              while (v51 < (unint64_t)v41);
              v48 = v50 - 1;
              do
              {
                if (v49 == v8)
                  goto LABEL_191;
                v52 = *--v49;
                v47 = v52;
              }
              while (v52 >= (unint64_t)v41);
            }
            while (v48 < v49);
            v53 = v50 - 2;
          }
          if (v53 != v8)
            *v8 = *v53;
          *v53 = (unint64_t)v41;
          if (v43 < (unint64_t)v44)
          {
LABEL_79:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::NaturalLoop<JSC::DFG::CFG> const**,false>(v7, v53, a3, a4 & 1);
            a4 = 0;
            v8 = v53 + 1;
            continue;
          }
          v54 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::NaturalLoop<JSC::DFG::CFG> const**>(v8, v53);
          v8 = v53 + 1;
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::NaturalLoop<JSC::DFG::CFG> const**>(v53 + 1, a2);
          if (!(_DWORD)result)
          {
            if (!v54)
              goto LABEL_79;
            continue;
          }
          a2 = v53;
          if (v54)
            return result;
          goto LABEL_2;
        }
        v41 = v8 + 1;
        v73 = v8 == a2 || v41 == a2;
        if ((a4 & 1) == 0)
        {
          if (v73)
            return result;
          v43 = 0;
          v105 = 1;
          while (1)
          {
            v13 = v8[v43];
            v43 = v105;
            v106 = *v41;
            if (*v41 < v13)
              break;
LABEL_189:
            v105 = v43 + 1;
            if (++v41 == a2)
              return result;
          }
          v107 = 0;
          while (1)
          {
            v108 = &v41[v107];
            *v108 = v13;
            if (!(v43 + v107))
              break;
            v13 = *(v108 - 2);
            --v107;
            if (v106 >= v13)
            {
              v41[v107] = v106;
              goto LABEL_189;
            }
          }
LABEL_191:
          __break(1u);
          goto LABEL_192;
        }
        if (!v73)
        {
          v74 = 8;
          v75 = v8;
          do
          {
            v76 = *v75;
            v75 = v41;
            v77 = *v41;
            if (v77 < v76)
            {
              v78 = v74;
              while (1)
              {
                *(unint64_t *)((char *)v8 + v78) = v76;
                v79 = v78 - 8;
                if (v78 == 8)
                  break;
                v76 = *(unint64_t *)((char *)v8 + v78 - 16);
                v78 -= 8;
                if (v77 >= v76)
                {
                  v80 = (unint64_t *)((char *)v8 + v79);
                  goto LABEL_133;
                }
              }
              v80 = v8;
LABEL_133:
              *v80 = v77;
            }
            v41 = v75 + 1;
            v74 += 8;
          }
          while (v75 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::NaturalLoop<JSC::DFG::CFG> const**>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 < *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 < v12)
        {
          a1[1] = v13;
          *(a2 - 1) = v12;
          v31 = *a1;
          v30 = a1[1];
          if (v30 < *a1)
          {
            *a1 = v30;
            a1[1] = v31;
          }
        }
      }
      else
      {
        if (v13 >= v12)
        {
          *a1 = v12;
          a1[1] = v11;
          v36 = *(a2 - 1);
          if (v36 >= v11)
            return 1;
          a1[1] = v36;
        }
        else
        {
          *a1 = v13;
        }
        *(a2 - 1) = v11;
      }
      return 1;
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_36;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
        goto LABEL_37;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_37;
        goto LABEL_35;
      }
LABEL_36:
      v15 = v17;
LABEL_37:
      v32 = *(a2 - 1);
      if (v32 < v15)
      {
        *v16 = v32;
        *(a2 - 1) = v15;
        v33 = *v16;
        v34 = *v14;
        if (v33 < v34)
        {
          a1[1] = v33;
          a1[2] = v34;
          v35 = *a1;
          if (v33 < *a1)
          {
            *a1 = v33;
            a1[1] = v35;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::NaturalLoop<JSC::DFG::CPSCFG> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      if (v7 >= *a1)
      {
        if (v5 >= v7)
          goto LABEL_19;
        a1[1] = v5;
        *v6 = v7;
        v9 = a1;
        v10 = a1 + 1;
      }
      else
      {
        v9 = a1;
        v10 = a1 + 2;
        if (v5 < v7)
          goto LABEL_18;
        *a1 = v7;
        a1[1] = v8;
        v9 = a1 + 1;
        v10 = a1 + 2;
      }
      if (v5 >= v8)
        goto LABEL_19;
LABEL_18:
      *v9 = v5;
      *v10 = v8;
LABEL_19:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v6;
        if (*v22 < v26)
        {
          v27 = i;
          while (1)
          {
            *(unint64_t *)((char *)a1 + v27) = v26;
            v28 = v27 - 8;
            if (v27 == 8)
              break;
            v26 = *(unint64_t *)((char *)a1 + v27 - 16);
            v27 -= 8;
            if (v25 >= v26)
            {
              v29 = (unint64_t *)((char *)a1 + v28);
              goto LABEL_27;
            }
          }
          v29 = a1;
LABEL_27:
          *v29 = v25;
          if (++v23 == 8)
            break;
        }
        v6 = v22++;
        if (v22 == a2)
          return 1;
      }
      return v22 + 1 == a2;
  }
}

void WTF::BackwardsGraph<JSC::DFG::CFG>::BackwardsGraph(JSC::DFG::CFG&)::{lambda(JSC::DFG::BasicBlock *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::BitVector *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  WTF::BitVector *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  v4 = *(_QWORD *)(a1 + 8);
  if (WTF::GraphNodeWorklist<JSC::DFG::BasicBlock *,JSC::DFG::BlockSet>::push(*(WTF::BitVector **)a1, a2))
  {
    v11 = *(unsigned int *)(v4 + 20);
    if ((_DWORD)v11 == *(_DWORD *)(v4 + 16))
    {
      WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>(v4 + 8, &v26, v5, v6, v7, v8, v9, v10);
    }
    else
    {
      v12 = *(_QWORD *)(v4 + 8) + 16 * v11;
      *(_QWORD *)v12 = a2;
      *(_BYTE *)(v12 + 8) = 0;
      *(_DWORD *)(v4 + 20) = v11 + 1;
    }
    v15 = *(_QWORD *)(v4 + 88);
    v14 = (WTF::BitVector *)(v4 + 88);
    v13 = v15;
    v16 = *(unsigned int *)(a2 + 8);
    if (v15 < 0)
      v17 = 63;
    else
      v17 = *(_QWORD *)(2 * v13);
    if (v17 <= v16)
    {
      WTF::BitVector::resizeOutOfLine(v14, v16 + 1, 0);
      v13 = *(_QWORD *)v14;
    }
    if (v13 >= 0)
      v18 = 2 * v13 + 8;
    else
      v18 = (uint64_t)v14;
    *(_QWORD *)(v18 + ((v16 >> 3) & 0x1FFFFFF8)) |= 1 << v16;
LABEL_13:
    v19 = *(WTF::BitVector **)a1;
    while (1)
    {
      v20 = *((_DWORD *)v19 + 5);
      if (!v20)
        break;
      v21 = *(_QWORD *)(*((_QWORD *)v19 + 1) + 8 * v20 - 8);
      *((_DWORD *)v19 + 5) = v20 - 1;
      if (!v21)
        break;
      v22 = *(unsigned int *)(v21 + 52);
      if ((_DWORD)v22)
      {
        v23 = *(uint64_t **)(v21 + 40);
        v24 = 8 * v22;
        do
        {
          v25 = *v23++;
          WTF::GraphNodeWorklist<JSC::DFG::BasicBlock *,JSC::DFG::BlockSet>::push(v19, v25);
          v24 -= 8;
        }
        while (v24);
        goto LABEL_13;
      }
    }
  }
}

void WTF::Dominators<JSC::DFG::BackwardsCFG>::LengauerTarjan::compress(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  WTF *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned int v23;
  _BYTE *v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  _DWORD *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  __int128 v38;
  WTF *v39;
  uint64_t v40;
  _BYTE v41[256];

  if ((_BYTE)a3)
  {
    v10 = a1 + 24;
  }
  else
  {
    v9 = *(_DWORD *)(a2 + 8);
    if (*(_DWORD *)(a1 + 20) <= v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1983E7B50);
    }
    v10 = *(_QWORD *)(a1 + 8) + 88 * v9;
  }
  if (*(_BYTE *)(v10 + 32))
  {
    v12 = a1 + 24;
  }
  else
  {
    v11 = *(_DWORD *)(*(_QWORD *)(v10 + 24) + 8);
    if (*(_DWORD *)(a1 + 20) <= v11)
    {
      __break(0xC471u);
      JUMPOUT(0x1983E7B58);
    }
    v12 = *(_QWORD *)(a1 + 8) + 88 * v11;
  }
  v13 = *(_QWORD *)(v12 + 24);
  v14 = *(unsigned __int8 *)(v12 + 32);
  if (v13)
    v15 = 0;
  else
    v15 = v14 == 0;
  if (!v15)
  {
    *((_QWORD *)&v38 + 1) = a3;
    v39 = (WTF *)v41;
    v40 = 16;
    *(_QWORD *)&v38 = a2;
    if (a3 | a2)
    {
      do
      {
        if (HIDWORD(v40) == (_DWORD)v40)
        {
          WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::SingleRootGraphNode<JSC::DFG::CFG>&>((uint64_t)&v39, (unint64_t)&v38, a3, a4, a5, a6, a7, a8);
        }
        else
        {
          *((_OWORD *)v39 + HIDWORD(v40)) = v38;
          ++HIDWORD(v40);
        }
        v16 = a1 + 24;
        if (!BYTE8(v38))
        {
          v17 = *(_DWORD *)(v38 + 8);
          if (*(_DWORD *)(a1 + 20) <= v17)
          {
LABEL_57:
            __break(0xC471u);
            JUMPOUT(0x1983E7B48);
          }
          v16 = *(_QWORD *)(a1 + 8) + 88 * v17;
        }
        *(_QWORD *)&v38 = *(_QWORD *)(v16 + 24);
        v18 = *(unsigned __int8 *)(v16 + 32);
        BYTE8(v38) = v18;
      }
      while ((_QWORD)v38 || v18);
      if (HIDWORD(v40) == 2)
        goto LABEL_22;
      if (HIDWORD(v40) >= 3)
      {
        v20 = 16 * (HIDWORD(v40) - 3);
        do
        {
          v21 = (unsigned __int8 *)(a1 + 64);
          v22 = a1 + 24;
          if (!*((_BYTE *)v39 + v20 + 8))
          {
            v23 = *(_DWORD *)(*(_QWORD *)((char *)v39 + v20) + 8);
            if (*(_DWORD *)(a1 + 20) <= v23)
            {
              __break(0xC471u);
              JUMPOUT(0x1983E7C90);
            }
            v22 = *(_QWORD *)(a1 + 8) + 88 * v23;
            v21 = (unsigned __int8 *)(v22 + 40);
          }
          v24 = (_BYTE *)(v22 + 24);
          v25 = *(unsigned __int8 *)(v22 + 32);
          v26 = a1 + 24;
          if (!*(_BYTE *)(v22 + 32))
          {
            v27 = *(_DWORD *)(*(_QWORD *)v24 + 8);
            if (*(_DWORD *)(a1 + 20) <= v27)
            {
              __break(0xC471u);
              JUMPOUT(0x1983E7C98);
            }
            v26 = *(_QWORD *)(a1 + 8) + 88 * v27;
          }
          v28 = *(_QWORD *)(v26 + 40);
          v29 = *(unsigned __int8 *)(v26 + 48);
          v30 = a1 + 24;
          if (!v29)
          {
            v31 = *(_DWORD *)(v28 + 8);
            if (*(_DWORD *)(a1 + 20) <= v31)
            {
              __break(0xC471u);
              JUMPOUT(0x1983E7CA0);
            }
            v30 = *(_QWORD *)(a1 + 8) + 88 * v31;
          }
          v32 = *(_DWORD *)(v30 + 20);
          a2 = v21[8];
          v33 = (_DWORD *)(a1 + 24);
          if (!v21[8])
          {
            v34 = *(_DWORD *)(*(_QWORD *)v21 + 8);
            if (*(_DWORD *)(a1 + 20) <= v34)
            {
              __break(0xC471u);
              JUMPOUT(0x1983E7CA8);
            }
            a2 = *(_QWORD *)(a1 + 8);
            v33 = (_DWORD *)(a2 + 88 * v34);
          }
          if (v32 < v33[5])
          {
            *(_QWORD *)v21 = v28;
            v21[8] = v29;
            v25 = *(unsigned __int8 *)(v22 + 32);
          }
          v35 = a1 + 24;
          if (!v25)
          {
            v36 = *(_DWORD *)(*(_QWORD *)v24 + 8);
            if (*(_DWORD *)(a1 + 20) <= v36)
              goto LABEL_57;
            v35 = *(_QWORD *)(a1 + 8) + 88 * v36;
          }
          v37 = *(_QWORD *)(v35 + 24);
          v24[8] = *(_BYTE *)(v35 + 32);
          *(_QWORD *)v24 = v37;
          v20 -= 16;
        }
        while (v20 != -16);
LABEL_22:
        v19 = v39;
        if (v41 != (_BYTE *)v39)
        {
          if (v39)
          {
            v39 = 0;
            LODWORD(v40) = 0;
            WTF::fastFree((unint64_t)v19, (void *)a2, a3, a4, a5, a6, a7, a8);
          }
        }
        return;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x1983E7C88);
  }
}

void std::make_unique[abi:sn180100]<JSC::DFG::ControlEquivalenceAnalysis,JSC::DFG::Graph &>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  unsigned int v49;
  _OWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  __int128 *v75;
  uint64_t v76;
  __int128 v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 *v93;
  uint64_t v94;
  __int128 v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  BOOL v105;
  __int128 *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unint64_t v118;
  WTF *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t *v133;
  int v134;
  uint64_t *v135;
  uint64_t v136;
  _QWORD *v137;
  unsigned int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t *v143;
  unsigned int *v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  int v150;
  BOOL v151;
  char *v152;
  unsigned int v153;
  char *v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t *v157;
  uint64_t v158;
  char *v159;
  unsigned int v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  __int128 *v165;
  uint64_t v166;
  char *v167;
  unsigned int v168;
  int v169;
  char *v170;
  unsigned int v171;
  uint64_t v172;
  unint64_t *v173;
  unint64_t *v174;
  unint64_t v175;
  char *v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t v179;
  int v180;
  BOOL v181;
  unint64_t v182;
  char *v183;
  unsigned int v184;
  char *v185;
  char *v186;
  unsigned int v187;
  char *v188;
  unsigned int v189;
  char *v190;
  uint64_t v191;
  char *v192;
  unsigned int v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unsigned int v197;
  WTF *v198;
  unint64_t v199;
  uint64_t *v200;
  unsigned int v201;
  unint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t *v208;
  unsigned int v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  unint64_t v215;
  unsigned int v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  BOOL v221;
  uint64_t v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  __int128 v226;
  __int128 *v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  BOOL v240;
  uint64_t v241;
  int v242;
  int v243;
  _QWORD *v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  unsigned int v252;
  __int128 v253;
  unint64_t v254;
  uint64_t v255;
  unsigned int v256;
  uint64_t v257;
  uint64_t v258;
  unsigned int v259;
  __int128 *v260;
  uint64_t v261;
  __int128 v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  WTF *v273;
  WTF *v274;
  WTF *v275;
  uint64_t v276;
  char *v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unsigned int v286;
  unsigned int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  unsigned int v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  uint64_t v319;
  _QWORD *v320;
  uint64_t v321;
  uint64_t v322;
  unsigned int v323;
  _QWORD *v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  __int128 *v328;
  uint64_t v329;
  uint64_t v330;
  _OWORD *v331;
  _OWORD *v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  uint64_t v340;
  int v341;
  unsigned int v342;
  uint64_t v343;
  uint64_t *v344;
  uint64_t v345;
  uint64_t v346;
  _QWORD *v347;
  unsigned int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  uint64_t v364;
  unint64_t v365;
  unsigned int v366;
  uint64_t v367;
  WTF *v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  _OWORD *v372;
  _DWORD *v373;
  uint64_t v374;
  _QWORD *v375;
  _QWORD *v376;
  _QWORD *v377;
  uint64_t v378;
  uint64_t **v379;
  unint64_t v380;
  WTF *v381;
  uint64_t v382;
  uint64_t v383;
  char v384;
  uint64_t v385;
  uint64_t v386;
  char v387;
  uint64_t v388;
  char v389;
  WTF *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  WTF *v394;
  uint64_t v395;
  __int128 v396;
  _DWORD v397[2];
  __int128 v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  __int128 v402;
  _OWORD v403[5];

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = JSC::DFG::Graph::ensureSSADominators((JSC::DFG::Graph *)a1);
  if (*(_DWORD *)(a1 + 944) != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1983E90ACLL);
  }
  v5 = *(_DWORD **)(a1 + 832);
  if (v5)
    goto LABEL_344;
  v6 = WTF::fastMalloc((WTF *)0x40);
  if (*(_DWORD *)(a1 + 944) != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1983E90CCLL);
  }
  v7 = (_DWORD *)v6;
  v8 = *(uint64_t ***)(a1 + 824);
  v375 = v4;
  v376 = a2;
  v373 = (_DWORD *)v6;
  v374 = a1;
  if (v8)
    goto LABEL_5;
  v379 = (uint64_t **)WTF::fastMalloc((WTF *)0x60);
  v285 = *(_QWORD *)(a1 + 808);
  if (!v285)
  {
    __break(0xC471u);
    JUMPOUT(0x1983E99D8);
  }
  *v379 = (uint64_t *)v285;
  v379[1] = (uint64_t *)(v379 + 3);
  v379[2] = (uint64_t *)4;
  v379[11] = (uint64_t *)0x8000000000000000;
  v380 = 0x8000000000000000;
  v381 = (WTF *)&v383;
  v382 = 16;
  *(_QWORD *)&v398 = &v380;
  *((_QWORD *)&v398 + 1) = v379;
  v399 = v285;
  v286 = *(_DWORD *)(*(_QWORD *)v285 + 60);
  if (!v286)
    goto LABEL_532;
  if (v286 <= 0x10)
    v287 = 16;
  else
    v287 = *(_DWORD *)(*(_QWORD *)v285 + 60);
  if (v287 >> 28)
  {
    __break(0xC471u);
    JUMPOUT(0x1983E9A78);
  }
  v288 = WTF::fastMalloc((WTF *)(16 * v287));
  v296 = *(_QWORD *)v285;
  v297 = *(_DWORD *)(*(_QWORD *)v285 + 60);
  *(_QWORD *)&v403[0] = 0;
  v402 = 0x8000000000000000;
  if (!v297)
  {
LABEL_532:
    __break(0xC471u);
    JUMPOUT(0x1983E9A80);
  }
  v298 = v288;
  *(_QWORD *)&v396 = **(_QWORD **)(v296 + 48);
  DWORD2(v396) = 0;
  v299 = *(unsigned int *)(v396 + 8);
  if (v299 < 0x3F
    || (WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v402, v299 + 1, 0), (v402 & 0x8000000000000000) != 0))
  {
    v300 = (uint64_t)&v402;
  }
  else
  {
    v300 = 2 * v402 + 8;
  }
  v301 = (v299 >> 3) & 0x1FFFFFF8;
  v302 = *(_QWORD *)(v300 + v301);
  *(_QWORD *)(v300 + v301) = v302 | (1 << v299);
  LODWORD(v300) = DWORD1(v403[0]);
  if ((v302 & (1 << v299)) == 0)
  {
    if (DWORD1(v403[0]) == LODWORD(v403[0]))
    {
      v372 = (_OWORD *)WTF::Vector<JSC::DFG::SpeculativeJIT::StringSwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v402 + 8, DWORD1(v403[0]) + 1, (unint64_t)&v396);
      LODWORD(v300) = DWORD1(v403[0]);
      *(_OWORD *)(*((_QWORD *)&v402 + 1) + 16 * DWORD1(v403[0])) = *v372;
    }
    else
    {
      *(_OWORD *)(*((_QWORD *)&v402 + 1) + 16 * DWORD1(v403[0])) = v396;
    }
    LODWORD(v300) = v300 + 1;
  }
  if ((_DWORD)v300)
  {
    v303 = 0;
    do
    {
      v304 = *((_QWORD *)&v402 + 1);
      v305 = *((_QWORD *)&v402 + 1) + 16 * v300;
      v306 = *(_QWORD *)(v305 - 16);
      v307 = *(unsigned int *)(v305 - 8);
      v300 = (v300 - 1);
      DWORD1(v403[0]) = v300;
      if (!v306)
        break;
      if (!(_DWORD)v307)
      {
        v308 = *(unsigned int *)(v306 + 8);
        if (v286 <= v308)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E9A88);
        }
        *(_QWORD *)(v298 + 16 * v308) = v303++;
      }
      v309 = *(unsigned int *)(v306 + 220);
      v310 = *(_QWORD *)(v306 + 208);
      v311 = *(_QWORD *)(v310 + 8 * v309 - 8);
      v312 = *(unsigned __int16 *)(v311 + 18);
      if ((v312 - 364) >= 0xC)
      {
        v313 = v310 - 16;
        do
        {
          v311 = *(_QWORD *)(v313 + 8 * v309);
          v312 = *(unsigned __int16 *)(v311 + 18);
          --v309;
        }
        while ((v312 - 364) > 0xB);
      }
      v314 = 1;
      switch(v312)
      {
        case 364:
          break;
        case 365:
          v314 = 2;
          break;
        case 366:
          v314 = *(_DWORD *)(*(_QWORD *)(v311 + 72) + 12) + 1;
          break;
        case 367:
          v314 = *(_DWORD *)(*(_QWORD *)(v311 + 72) + 12);
          break;
        default:
          v314 = 0;
          break;
      }
      if (v307 >= v314)
      {
        v321 = *(unsigned int *)(v306 + 8);
        if (v286 <= v321)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E9A90);
        }
        *(_QWORD *)(v298 + 16 * v321 + 8) = v303++;
        continue;
      }
      *(_QWORD *)&v396 = v306;
      DWORD2(v396) = v307 + 1;
      if ((_DWORD)v300 == LODWORD(v403[0]))
      {
        v331 = (_OWORD *)WTF::Vector<JSC::DFG::SpeculativeJIT::StringSwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v402 + 8, v300 + 1, (unint64_t)&v396);
        LODWORD(v300) = DWORD1(v403[0]);
        *(_OWORD *)(*((_QWORD *)&v402 + 1) + 16 * DWORD1(v403[0])) = *v331;
      }
      else
      {
        *(_OWORD *)(v304 + 16 * v300) = v396;
      }
      LODWORD(v300) = v300 + 1;
      DWORD1(v403[0]) = v300;
      v315 = *(unsigned int *)(v306 + 220);
      v316 = *(_QWORD *)(v306 + 208);
      v317 = *(_QWORD *)(v316 + 8 * v315 - 8);
      v318 = *(unsigned __int16 *)(v317 + 18);
      if ((v318 - 364) >= 0xC)
      {
        v319 = v316 - 16;
        do
        {
          v317 = *(_QWORD *)(v319 + 8 * v315);
          v318 = *(unsigned __int16 *)(v317 + 18);
          --v315;
        }
        while ((v318 - 364) > 0xB);
      }
      if (v318 == 366)
      {
        v322 = *(_QWORD *)(v317 + 72);
        v323 = *(_DWORD *)(v322 + 12);
        if (v323 <= v307)
        {
          if (v323 != (_DWORD)v307)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E9A18);
          }
        }
        else
        {
          v322 = *(_QWORD *)v322 + 32 * v307;
        }
      }
      else
      {
        if (v318 == 367)
        {
          v333 = *(_QWORD *)(v317 + 72);
          if (*(_DWORD *)(v333 + 12) <= v307)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E9A98);
          }
          v320 = (_QWORD *)(*(_QWORD *)v333 + 8 * v307);
          goto LABEL_426;
        }
        if (!(_DWORD)v307)
        {
          v320 = (_QWORD *)(v317 + 72);
          if (v318 != 364)
            v320 = (_QWORD *)*v320;
          goto LABEL_426;
        }
        if ((_DWORD)v307 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E9A58);
        }
        v322 = *(_QWORD *)(v317 + 72);
      }
      v320 = (_QWORD *)(v322 + 16);
LABEL_426:
      v324 = (_QWORD *)*v320;
      *(_QWORD *)&v396 = *v320;
      DWORD2(v396) = 0;
      v325 = v402;
      if ((v402 & 0x8000000000000000) != 0)
        v326 = 63;
      else
        v326 = *(_QWORD *)(2 * v402);
      v327 = *((unsigned int *)v324 + 2);
      if (v326 <= v327)
      {
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v402, v327 + 1, 0);
        v325 = v402;
        LODWORD(v300) = DWORD1(v403[0]);
      }
      if (v325 >= 0)
        v328 = (__int128 *)(2 * v325 + 8);
      else
        v328 = &v402;
      v329 = (v327 >> 3) & 0x1FFFFFF8;
      v330 = *(_QWORD *)((char *)v328 + v329);
      *(_QWORD *)((char *)v328 + v329) = v330 | (1 << v327);
      if ((v330 & (1 << v327)) == 0)
      {
        if ((_DWORD)v300 == LODWORD(v403[0]))
        {
          v332 = (_OWORD *)WTF::Vector<JSC::DFG::SpeculativeJIT::StringSwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v402 + 8, v300 + 1, (unint64_t)&v396);
          LODWORD(v300) = DWORD1(v403[0]);
          *(_OWORD *)(*((_QWORD *)&v402 + 1) + 16 * DWORD1(v403[0])) = *v332;
        }
        else
        {
          *(_OWORD *)(*((_QWORD *)&v402 + 1) + 16 * v300) = v396;
        }
        LODWORD(v300) = v300 + 1;
        DWORD1(v403[0]) = v300;
      }
    }
    while ((_DWORD)v300);
  }
  if (*((_QWORD *)&v402 + 1))
    WTF::fastFree(*((unint64_t *)&v402 + 1), (void *)v289, v290, v291, v292, v293, v294, v295);
  if ((v402 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v402, (void *)v289, v290, v291, v292, v293, v294, v295);
  v334 = *(_QWORD *)v285;
  if (!*(_DWORD *)(*(_QWORD *)v285 + 60))
    goto LABEL_488;
  v335 = 0;
  do
  {
    v289 = *(_QWORD *)(*(_QWORD *)(v334 + 48) + 8 * v335);
    if (!v289)
      goto LABEL_484;
    v336 = *(unsigned int *)(v289 + 220);
    v337 = *(_QWORD *)(v289 + 208);
    v338 = *(_QWORD *)(v337 + 8 * v336 - 8);
    v339 = *(unsigned __int16 *)(v338 + 18);
    if ((v339 - 364) >= 0xC)
    {
      v340 = v337 - 16;
      do
      {
        v338 = *(_QWORD *)(v340 + 8 * v336);
        v339 = *(unsigned __int16 *)(v338 + 18);
        --v336;
      }
      while ((v339 - 364) > 0xB);
    }
    v341 = 1;
    switch(v339)
    {
      case 364:
        goto LABEL_460;
      case 365:
        v341 = 2;
        goto LABEL_460;
      case 366:
        v341 = *(_DWORD *)(*(_QWORD *)(v338 + 72) + 12) + 1;
        if (*(_DWORD *)(*(_QWORD *)(v338 + 72) + 12) == -1)
          goto LABEL_484;
        goto LABEL_460;
      case 367:
        v341 = *(_DWORD *)(*(_QWORD *)(v338 + 72) + 12);
        if (!v341)
          goto LABEL_484;
LABEL_460:
        v342 = 0;
        v343 = 0;
        v344 = (uint64_t *)(v338 + 72);
        break;
      default:
        goto LABEL_484;
    }
    while (1)
    {
      if (v339 == 366)
      {
        v347 = (_QWORD *)*v344;
        v348 = *(_DWORD *)(*v344 + 12);
        if (v348 > v342)
        {
          v346 = *v347 + 32 * v343;
          goto LABEL_470;
        }
        if (v348 != v342)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E99F8);
        }
        v345 = (uint64_t)(v347 + 2);
      }
      else
      {
        if (v339 != 367)
        {
          if (!v342)
          {
            v345 = (uint64_t)v344;
            if (v339 != 364)
              v345 = *v344;
            goto LABEL_471;
          }
          if (v342 != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E9A38);
          }
          v346 = *v344;
LABEL_470:
          v345 = v346 + 16;
          goto LABEL_471;
        }
        if (*(_DWORD *)(*v344 + 12) <= v342)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E9AA0);
        }
        v345 = *(_QWORD *)*v344 + 8 * v343;
      }
LABEL_471:
      v349 = *(unsigned int *)(*(_QWORD *)v345 + 8);
      if (v286 <= v349)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E9A60);
      }
      v350 = *(unsigned int *)(v289 + 8);
      if (v286 <= v350)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E9A68);
      }
      if (*(_QWORD *)(v298 + 16 * v349) <= *(_QWORD *)(v298 + 16 * v350)
        && *(_QWORD *)(v298 + 16 * v349 + 8) >= *(_QWORD *)(v298 + 16 * v350 + 8))
      {
        break;
      }
      v342 = v343 + 1;
      v343 = (v343 + 1);
      if (v341 == v342)
        goto LABEL_484;
    }
    WTF::BackwardsGraph<JSC::DFG::CFG>::BackwardsGraph(JSC::DFG::CFG&)::{lambda(JSC::DFG::BasicBlock *)#1}::operator()((uint64_t)&v398, v289);
    v334 = *(_QWORD *)v285;
LABEL_484:
    ++v335;
  }
  while (v335 < *(unsigned int *)(v334 + 60));
LABEL_488:
  WTF::fastFree(v298, (void *)v289, v290, v291, v292, v293, v294, v295);
  v358 = *(_QWORD *)v285;
  if (!*(_DWORD *)(*(_QWORD *)v285 + 60))
    goto LABEL_510;
  v359 = 0;
  while (2)
  {
    v351 = *(_QWORD *)(*(_QWORD *)(v358 + 48) + 8 * v359);
    if (v351)
    {
      v360 = *(unsigned int *)(v351 + 220);
      v361 = *(_QWORD *)(v351 + 208);
      v362 = *(_QWORD *)(v361 + 8 * v360 - 8);
      v363 = *(unsigned __int16 *)(v362 + 18);
      if ((v363 - 364) >= 0xC)
      {
        v364 = v361 - 16;
        do
        {
          v362 = *(_QWORD *)(v364 + 8 * v360);
          v363 = *(unsigned __int16 *)(v362 + 18);
          --v360;
        }
        while ((v363 - 364) > 0xB);
      }
      if ((v363 - 364) >= 2)
      {
        if (v363 == 366)
        {
          if (*(_DWORD *)(*(_QWORD *)(v362 + 72) + 12) != -1)
            goto LABEL_495;
        }
        else if (v363 == 367 && *(_DWORD *)(*(_QWORD *)(v362 + 72) + 12))
        {
          goto LABEL_495;
        }
        WTF::BackwardsGraph<JSC::DFG::CFG>::BackwardsGraph(JSC::DFG::CFG&)::{lambda(JSC::DFG::BasicBlock *)#1}::operator()((uint64_t)&v398, v351);
        v358 = *(_QWORD *)v285;
      }
    }
LABEL_495:
    ++v359;
    v365 = *(unsigned int *)(v358 + 60);
    if (v359 < v365)
      continue;
    break;
  }
  if ((_DWORD)v365)
  {
    v366 = v365 - 1;
    v367 = 8 * (v365 - 1);
    do
    {
      if (*(_DWORD *)(*(_QWORD *)v285 + 60) <= v366)
      {
        __break(0xC471u);
        JUMPOUT(0x1983E9A70);
      }
      v351 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v285 + 48) + v367);
      if (v351)
        WTF::BackwardsGraph<JSC::DFG::CFG>::BackwardsGraph(JSC::DFG::CFG&)::{lambda(JSC::DFG::BasicBlock *)#1}::operator()((uint64_t)&v398, v351);
      v367 -= 8;
      --v366;
    }
    while (v366 != -1);
  }
LABEL_510:
  v368 = v381;
  if (&v383 != (uint64_t *)v381 && v381)
  {
    v381 = 0;
    LODWORD(v382) = 0;
    WTF::fastFree((unint64_t)v368, (void *)v351, v352, v353, v354, v355, v356, v357);
  }
  if ((v380 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v380, (void *)v351, v352, v353, v354, v355, v356, v357);
  v7 = v373;
  v369 = *(_QWORD *)(v374 + 824);
  v8 = v379;
  *(_QWORD *)(v374 + 824) = v379;
  if (v369)
  {
    v370 = *(_QWORD *)(v369 + 88);
    if ((v370 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v370, (void *)v351, v352, v353, v354, v355, v356, v357);
    v371 = *(_QWORD *)(v369 + 8);
    if (v369 + 24 != v371 && v371)
    {
      *(_QWORD *)(v369 + 8) = 0;
      *(_DWORD *)(v369 + 16) = 0;
      WTF::fastFree(v371, (void *)v351, v352, v353, v354, v355, v356, v357);
    }
    WTF::fastFree(v369, (void *)v351, v352, v353, v354, v355, v356, v357);
    v7 = v373;
    v8 = *(uint64_t ***)(v374 + 824);
  }
LABEL_5:
  *(_QWORD *)v7 = v8;
  *((_QWORD *)v7 + 1) = 0;
  v377 = v7 + 2;
  v9 = **v8;
  *((_QWORD *)v7 + 2) = 0;
  v10 = *(unsigned int *)(v9 + 60);
  if ((_DWORD)v10)
  {
    v11 = 16;
    if (v10 > 0x10)
      v11 = v10;
    if (v11 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x1983E9338);
    }
    v12 = 40 * v11;
    v13 = WTF::fastMalloc((WTF *)(40 * v11));
    v7[4] = (v12 & 0xFFFFFFF8) / 0x28;
    *((_QWORD *)v7 + 1) = v13;
    v14 = v7[5];
    if (v14 != (_DWORD)v10)
    {
      v15 = v13 + 40 * v14;
      do
      {
        *(_QWORD *)v15 = 0;
        *(_QWORD *)(v15 + 8) = 0;
        *(_BYTE *)(v15 + 24) = 0;
        *(_QWORD *)(v15 + 16) = 0;
        *(_QWORD *)(v15 + 32) = -1;
        v15 += 40;
      }
      while (v15 != v13 + 40 * v10);
    }
  }
  v7[5] = v10;
  *((_QWORD *)v7 + 3) = 0;
  *((_QWORD *)v7 + 4) = 0;
  *((_QWORD *)v7 + 5) = 0;
  *((_BYTE *)v7 + 48) = 0;
  *((_QWORD *)v7 + 7) = -1;
  v16 = *(uint64_t ***)v7;
  v378 = (uint64_t)(v7 + 6);
  v380 = (unint64_t)v16;
  v17 = **v16;
  v381 = 0;
  v382 = 0;
  v18 = *(unsigned int *)(v17 + 60);
  if ((_DWORD)v18)
  {
    v19 = 16;
    if (v18 > 0x10)
      v19 = v18;
    if (v19 >= 0x2E8BA2F)
    {
      __break(0xC471u);
      JUMPOUT(0x1983E9330);
    }
    v20 = 88 * v19;
    v21 = WTF::fastMalloc((WTF *)(88 * v19));
    LODWORD(v382) = (v20 & 0xFFFFFFF8) / 0x58;
    v381 = (WTF *)v21;
    v22 = v21 + 88 * v18;
    do
    {
      *(_QWORD *)v21 = 0;
      *(_BYTE *)(v21 + 8) = 0;
      *(_QWORD *)(v21 + 16) = -1;
      *(_QWORD *)(v21 + 24) = 0;
      *(_BYTE *)(v21 + 32) = 0;
      *(_QWORD *)(v21 + 40) = 0;
      *(_BYTE *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 64) = 0;
      *(_QWORD *)(v21 + 72) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_BYTE *)(v21 + 80) = 0;
      v21 += 88;
    }
    while (v21 != v22);
  }
  HIDWORD(v382) = v18;
  v383 = 0;
  v384 = 0;
  v385 = -1;
  v386 = 0;
  v387 = 0;
  v388 = 0;
  v389 = 0;
  v391 = 0;
  v392 = 0;
  v390 = 0;
  LOBYTE(v393) = 0;
  v394 = 0;
  v395 = 0;
  v23 = *(unsigned int *)(**v16 + 60);
  if ((_DWORD)v23 != -1)
  {
    v24 = v381;
    do
    {
      if (v23)
      {
        v25 = **v16;
        if (*(_DWORD *)(v25 + 60) <= (v23 - 1))
        {
          __break(0xC471u);
          JUMPOUT(0x1983E9154);
        }
        v26 = *(_QWORD *)(*(_QWORD *)(v25 + 48) + 8 * (v23 - 1));
        if (!v26)
          goto LABEL_26;
        v27 = *(_DWORD *)(v26 + 8);
        if (v18 <= v27)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E915CLL);
        }
        v28 = 0;
        v29 = (uint64_t *)((char *)v24 + 88 * v27);
      }
      else
      {
        v26 = 0;
        v28 = 1;
        v29 = &v383;
      }
      v29[5] = v26;
      *((_BYTE *)v29 + 48) = v28;
LABEL_26:
      --v23;
    }
    while (v23 != -1);
  }
  *(_QWORD *)&v398 = 0x8000000000000000;
  v399 = 0;
  v400 = 0;
  v402 = xmmword_19914FB90;
  LODWORD(v403[0]) = 0;
  BYTE8(v398) = 1;
  v30 = WTF::Vector<WTF::GraphNodeWith<WTF::SingleRootGraphNode<JSC::DFG::CFG>,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v399, 1uLL, (unint64_t)&v402);
  v38 = HIDWORD(v400);
  v39 = v399 + 24 * HIDWORD(v400);
  v40 = *(_QWORD *)(v30 + 16);
  *(_OWORD *)v39 = *(_OWORD *)v30;
  *(_QWORD *)(v39 + 16) = v40;
  v41 = v38 + 1;
  HIDWORD(v400) = v38 + 1;
  while (2)
  {
    v42 = v41;
LABEL_31:
    if (v42)
    {
      v43 = v399 + 24 * v42;
      v44 = *(_QWORD *)(v43 - 24);
      v45 = *(unsigned __int8 *)(v43 - 16);
      v397[0] = *(_DWORD *)(v43 - 15);
      v46 = *(unsigned int *)(v43 - 8);
      *(_DWORD *)((char *)v397 + 3) = *(_DWORD *)(v43 - 12);
      v41 = v42 - 1;
      HIDWORD(v400) = --v42;
      if (!v44)
        goto LABEL_33;
      goto LABEL_34;
    }
    v44 = 0;
    v45 = 0;
    v46 = 0;
LABEL_33:
    if (v45)
    {
LABEL_34:
      *(_QWORD *)&v396 = v44;
      BYTE8(v396) = v45;
      *(_DWORD *)((unint64_t)&v396 | 9) = v397[0];
      *(_DWORD *)(((unint64_t)&v396 | 9) + 3) = *(_DWORD *)((char *)v397 + 3);
      if (!v46)
      {
        v47 = HIDWORD(v395);
        v48 = (char *)&v383;
        if (!v45)
        {
          v49 = *(_DWORD *)(v44 + 8);
          if (HIDWORD(v382) <= v49)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E911CLL);
          }
          v48 = (char *)v381 + 88 * v49;
        }
        *((_DWORD *)v48 + 5) = HIDWORD(v395);
        if ((_DWORD)v47 == (_DWORD)v395)
        {
          v50 = (_OWORD *)WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v394, v47 + 1, (unint64_t)&v396, v33, v34, v35, v36, v37);
          *((_OWORD *)v394 + HIDWORD(v395)) = *v50;
        }
        else
        {
          *((_OWORD *)v394 + v47) = v396;
        }
        ++HIDWORD(v395);
        v45 = BYTE8(v396);
        v44 = v396;
      }
      if (!v45)
      {
        *(_QWORD *)&v402 = v403;
        *((_QWORD *)&v402 + 1) = 4;
        v51 = *(unsigned int *)(v44 + 52);
        if ((_DWORD)v51)
        {
          v52 = *(uint64_t **)(v44 + 40);
          v53 = 8 * v51;
          do
          {
            v54 = *v52;
            v401 = *v52;
            v55 = HIDWORD(v402);
            if (HIDWORD(v402) == DWORD2(v402))
            {
              WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>((uint64_t)&v402, &v401, v32, v33, v34, v35, v36, v37);
            }
            else
            {
              v56 = v402 + 16 * HIDWORD(v402);
              *(_QWORD *)v56 = v54;
              *(_BYTE *)(v56 + 8) = 0;
              HIDWORD(v402) = v55 + 1;
            }
            ++v52;
            v53 -= 8;
          }
          while (v53);
        }
        goto LABEL_54;
      }
      v57 = v380;
      v58 = *(unsigned int *)(v380 + 20);
      *(_QWORD *)&v402 = v403;
      DWORD2(v402) = 4;
      HIDWORD(v402) = v58;
      if (v58 >= 5)
      {
        if (v58 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E9114);
        }
        v59 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v58));
        DWORD2(v402) = v58;
        *(_QWORD *)&v402 = v59;
        v58 = *(unsigned int *)(v57 + 20);
        if (!(_DWORD)v58)
        {
LABEL_54:
          v63 = HIDWORD(v402);
          v64 = v402;
          if (v403 != (_OWORD *)v402 && (_QWORD)v402 != 0)
          {
            *(_QWORD *)&v402 = 0;
            DWORD2(v402) = 0;
            WTF::fastFree(v64, v31, v32, v33, v34, v35, v36, v37);
          }
          if (v63 > v46)
          {
            if (!BYTE8(v396))
            {
              *(_QWORD *)&v402 = v403;
              *((_QWORD *)&v402 + 1) = 4;
              v66 = *(unsigned int *)(v396 + 52);
              if ((_DWORD)v66)
              {
                v67 = *(uint64_t **)(v396 + 40);
                v68 = 8 * v66;
                do
                {
                  v69 = *v67;
                  v401 = *v67;
                  v70 = HIDWORD(v402);
                  if (HIDWORD(v402) == DWORD2(v402))
                  {
                    WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>((uint64_t)&v402, &v401, v32, v33, v34, v35, v36, v37);
                  }
                  else
                  {
                    v71 = v402 + 16 * HIDWORD(v402);
                    *(_QWORD *)v71 = v69;
                    *(_BYTE *)(v71 + 8) = 0;
                    HIDWORD(v402) = v70 + 1;
                  }
                  ++v67;
                  v68 -= 8;
                }
                while (v68);
              }
              goto LABEL_77;
            }
            v72 = v380;
            v73 = *(unsigned int *)(v380 + 20);
            *(_QWORD *)&v402 = v403;
            DWORD2(v402) = 4;
            HIDWORD(v402) = v73;
            if (v73 < 5)
            {
              v74 = v403;
              if (!(_DWORD)v73)
                goto LABEL_77;
LABEL_75:
              v75 = *(__int128 **)(v72 + 8);
              v76 = 16 * v73;
              do
              {
                v77 = *v75++;
                *v74++ = v77;
                v76 -= 16;
              }
              while (v76);
              goto LABEL_77;
            }
            if (v73 >> 28)
            {
              __break(0xC471u);
              JUMPOUT(0x1983E920CLL);
            }
            v74 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v73));
            DWORD2(v402) = v73;
            *(_QWORD *)&v402 = v74;
            v73 = *(unsigned int *)(v72 + 20);
            if ((_DWORD)v73)
              goto LABEL_75;
LABEL_77:
            v78 = HIDWORD(v402);
            v79 = v402;
            if (v403 != (_OWORD *)v402 && (_QWORD)v402 != 0)
            {
              *(_QWORD *)&v402 = 0;
              DWORD2(v402) = 0;
              WTF::fastFree(v79, v31, v32, v33, v34, v35, v36, v37);
            }
            if (v78 > v46 + 1)
            {
              v402 = v396;
              LODWORD(v403[0]) = v46 + 1;
              if (v42 == (_DWORD)v400)
              {
                v116 = WTF::Vector<WTF::GraphNodeWith<WTF::SingleRootGraphNode<JSC::DFG::CFG>,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v399, v42 + 1, (unint64_t)&v402);
                v42 = HIDWORD(v400);
                v81 = v399 + 24 * HIDWORD(v400);
                v82 = *(_QWORD *)(v116 + 16);
                v83 = *(_OWORD *)v116;
              }
              else
              {
                v81 = v399 + 24 * v42;
                v82 = *(_QWORD *)&v403[0];
                v83 = v402;
              }
              *(_OWORD *)v81 = v83;
              *(_QWORD *)(v81 + 16) = v82;
              v41 = v42 + 1;
              HIDWORD(v400) = ++v42;
            }
            if (!BYTE8(v396))
            {
              *(_QWORD *)&v402 = v403;
              *((_QWORD *)&v402 + 1) = 4;
              v84 = *(unsigned int *)(v396 + 52);
              if ((_DWORD)v84)
              {
                v85 = *(uint64_t **)(v396 + 40);
                v86 = 8 * v84;
                do
                {
                  v87 = *v85;
                  v401 = *v85;
                  v88 = HIDWORD(v402);
                  if (HIDWORD(v402) == DWORD2(v402))
                  {
                    WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>((uint64_t)&v402, &v401, v32, v33, v34, v35, v36, v37);
                  }
                  else
                  {
                    v89 = v402 + 16 * HIDWORD(v402);
                    *(_QWORD *)v89 = v87;
                    *(_BYTE *)(v89 + 8) = 0;
                    HIDWORD(v402) = v88 + 1;
                  }
                  ++v85;
                  v86 -= 8;
                }
                while (v86);
              }
              goto LABEL_98;
            }
            v90 = v380;
            v91 = *(unsigned int *)(v380 + 20);
            *(_QWORD *)&v402 = v403;
            DWORD2(v402) = 4;
            HIDWORD(v402) = v91;
            if (v91 < 5)
            {
              v92 = v403;
              if (!(_DWORD)v91)
                goto LABEL_98;
              goto LABEL_96;
            }
            if (v91 >> 28)
            {
              __break(0xC471u);
              JUMPOUT(0x1983E9214);
            }
            v92 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v91));
            DWORD2(v402) = v91;
            *(_QWORD *)&v402 = v92;
            v91 = *(unsigned int *)(v90 + 20);
            if ((_DWORD)v91)
            {
LABEL_96:
              v93 = *(__int128 **)(v90 + 8);
              v94 = 16 * v91;
              do
              {
                v95 = *v93++;
                *v92++ = v95;
                v94 -= 16;
              }
              while (v94);
            }
LABEL_98:
            if (HIDWORD(v402) <= v46)
            {
              __break(0xC471u);
              JUMPOUT(0x1983E9124);
            }
            v96 = v402;
            v97 = (uint64_t *)(v402 + 16 * v46);
            v99 = *v97;
            v98 = v97[1];
            if (v403 != (_OWORD *)v402 && (_QWORD)v402 != 0)
            {
              *(_QWORD *)&v402 = 0;
              DWORD2(v402) = 0;
              WTF::fastFree(v96, v31, v32, v33, v34, v35, v36, v37);
            }
            *(_QWORD *)&v402 = v99;
            *((_QWORD *)&v402 + 1) = v98;
            LODWORD(v403[0]) = 0;
            if ((_BYTE)v98)
            {
              if (BYTE8(v398))
                continue;
              BYTE8(v398) = 1;
              goto LABEL_113;
            }
            v101 = v398;
            if ((v398 & 0x8000000000000000) != 0)
              v102 = 63;
            else
              v102 = *(_QWORD *)(2 * v398);
            v103 = *(unsigned int *)(v99 + 8);
            if (v102 <= v103)
            {
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v398, v103 + 1, 0);
              v101 = v398;
              v41 = HIDWORD(v400);
            }
            v104 = 2 * v101 + 8;
            v105 = v101 < 0;
            v106 = &v398;
            if (!v105)
              v106 = (__int128 *)v104;
            v107 = (v103 >> 3) & 0x1FFFFFF8;
            v108 = *(_QWORD *)((char *)v106 + v107);
            v109 = 1 << v103;
            *(_QWORD *)((char *)v106 + v107) = v108 | (1 << v103);
            v42 = v41;
            if ((v108 & v109) == 0)
            {
LABEL_113:
              if (v42 == (_DWORD)v400)
              {
                v115 = WTF::Vector<WTF::GraphNodeWith<WTF::SingleRootGraphNode<JSC::DFG::CFG>,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v399, v42 + 1, (unint64_t)&v402);
                v42 = HIDWORD(v400);
                v110 = v399 + 24 * HIDWORD(v400);
                v111 = *(_QWORD *)(v115 + 16);
                *(_OWORD *)v110 = *(_OWORD *)v115;
              }
              else
              {
                v110 = v399 + 24 * v42;
                v111 = *(_QWORD *)&v403[0];
                *(_OWORD *)v110 = v402;
              }
              *(_QWORD *)(v110 + 16) = v111;
              v41 = v42 + 1;
              HIDWORD(v400) = v42 + 1;
              v112 = (char *)&v383;
              if (!(_BYTE)v98)
              {
                v113 = *(_DWORD *)(v99 + 8);
                if (HIDWORD(v382) <= v113)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983E9184);
                }
                v112 = (char *)v381 + 88 * v113;
              }
              v114 = v396;
              v112[8] = BYTE8(v396);
              *(_QWORD *)v112 = v114;
              continue;
            }
            continue;
          }
          goto LABEL_31;
        }
      }
      else
      {
        v59 = v403;
        if (!(_DWORD)v58)
          goto LABEL_54;
      }
      v60 = *(__int128 **)(v57 + 8);
      v61 = 16 * v58;
      do
      {
        v62 = *v60++;
        *v59++ = v62;
        v61 -= 16;
      }
      while (v61);
      goto LABEL_54;
    }
    break;
  }
  if (v399)
    WTF::fastFree(v399, v31, v32, v33, v34, v35, v36, v37);
  if ((v398 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v398, v31, v32, v33, v34, v35, v36, v37);
  v117 = HIDWORD(v395);
  if (HIDWORD(v395) >= 2)
  {
LABEL_134:
    if (HIDWORD(v395) <= --v117)
    {
      __break(0xC471u);
      JUMPOUT(0x1983E918CLL);
    }
    v398 = *((_OWORD *)v394 + v117);
    if (BYTE8(v398))
    {
      v157 = &v383;
      goto LABEL_199;
    }
    v118 = *(unsigned int *)(v398 + 8);
    if (HIDWORD(v382) <= v118)
    {
      __break(0xC471u);
      JUMPOUT(0x1983E91BCLL);
    }
    v119 = v381;
    *(_QWORD *)&v402 = v403;
    *((_QWORD *)&v402 + 1) = 4;
    v120 = v380 + 88;
    v121 = *(_QWORD *)(v380 + 88);
    v122 = (unint64_t *)(2 * v121);
    if (v121 < 0)
      v123 = 63;
    else
      v123 = *v122;
    if (v123 <= v118)
      goto LABEL_144;
    v124 = v122 + 1;
    if (v121 >= 0)
      v120 = (unint64_t)v124;
    if (((*(_QWORD *)(v120 + ((v118 >> 3) & 0x1FFFFFF8)) >> v118) & 1) != 0)
    {
      v403[0] = xmmword_19914FB90;
      HIDWORD(v402) = 1;
      v125 = 1;
    }
    else
    {
LABEL_144:
      v125 = 0;
    }
    v126 = *(unsigned int *)(v398 + 220);
    if ((_DWORD)v126)
    {
      v127 = 8 * v126;
      while (1)
      {
        v128 = *(_QWORD *)(*(_QWORD *)(v398 + 208) - 8 + v127);
        v129 = *(unsigned __int16 *)(v128 + 18);
        if ((v129 - 364) < 0xC)
          break;
        if ((v129 - 28) < 2 || (v129 - 23) <= 2)
        {
          v127 -= 8;
          if (v127)
            continue;
        }
        goto LABEL_152;
      }
    }
    else
    {
LABEL_152:
      v128 = 0;
    }
    v130 = 1;
    switch(*(_WORD *)(v128 + 18))
    {
      case 0x16C:
        goto LABEL_155;
      case 0x16D:
        v130 = 2;
        goto LABEL_155;
      case 0x16E:
        v130 = *(_DWORD *)(*(_QWORD *)(v128 + 72) + 12) + 1;
        goto LABEL_250;
      case 0x16F:
        v130 = *(_DWORD *)(*(_QWORD *)(v128 + 72) + 12);
LABEL_250:
        v142 = (unint64_t *)v403;
        if (!v130)
          goto LABEL_176;
LABEL_155:
        v131 = 0;
        v132 = 0;
        v133 = (uint64_t *)(v128 + 72);
        break;
      default:
        v142 = (unint64_t *)v403;
        goto LABEL_176;
    }
    while (1)
    {
      v134 = *(unsigned __int16 *)(v128 + 18);
      if (v134 == 366)
      {
        v137 = (_QWORD *)*v133;
        v138 = *(_DWORD *)(*v133 + 12);
        if (v138 <= v131)
        {
          if (v138 != v131)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E90ECLL);
          }
          v135 = v137 + 2;
          goto LABEL_166;
        }
        v136 = *v137 + 32 * v132;
      }
      else
      {
        if (v134 == 367)
        {
          if (*(_DWORD *)(*v133 + 12) <= v131)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E91ECLL);
          }
          v135 = (uint64_t *)(*(_QWORD *)*v133 + 8 * v132);
          goto LABEL_166;
        }
        if (!v131)
        {
          v135 = (uint64_t *)(v128 + 72);
          if (v134 != 364)
            v135 = (uint64_t *)*v133;
          goto LABEL_166;
        }
        if (v131 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E910CLL);
        }
        v136 = *v133;
      }
      v135 = (uint64_t *)(v136 + 16);
LABEL_166:
      v139 = *v135;
      *(_QWORD *)&v396 = v139;
      v140 = HIDWORD(v402);
      if (HIDWORD(v402) == DWORD2(v402))
      {
        WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>((uint64_t)&v402, &v396, v32, v33, v34, v35, v36, v37);
      }
      else
      {
        v141 = v402 + 16 * HIDWORD(v402);
        *(_QWORD *)v141 = v139;
        *(_BYTE *)(v141 + 8) = 0;
        HIDWORD(v402) = v140 + 1;
      }
      v131 = v132 + 1;
      v132 = (v132 + 1);
      if (v130 == v131)
      {
        v125 = HIDWORD(v402);
        v142 = (unint64_t *)v402;
LABEL_176:
        if (v125)
        {
          v143 = &v142[2 * v125];
          v144 = (unsigned int *)((char *)v119 + 88 * v118 + 20);
          do
          {
            v145 = *v142;
            v32 = v142[1];
            v146 = (char *)&v383;
            v147 = v32;
            if (!(_BYTE)v32)
            {
              v148 = *(_DWORD *)(v145 + 8);
              if (HIDWORD(v382) <= v148)
              {
                __break(0xC471u);
                JUMPOUT(0x1983E912CLL);
              }
              v146 = (char *)v381 + 88 * v148;
            }
            v149 = *((_QWORD *)v146 + 3);
            v150 = v146[32];
            if (v149)
              v151 = 0;
            else
              v151 = v150 == 0;
            if (!v151)
            {
              WTF::Dominators<JSC::DFG::BackwardsCFG>::LengauerTarjan::compress((uint64_t)&v380, *v142, v32, v33, v34, v35, v36, v37);
              v152 = (char *)&v383;
              if (!v147)
              {
                v153 = *(_DWORD *)(v145 + 8);
                if (HIDWORD(v382) <= v153)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983E91F4);
                }
                v152 = (char *)v381 + 88 * v153;
              }
              v32 = v152[48];
              v145 = *((_QWORD *)v152 + 5);
            }
            v154 = (char *)&v383;
            if (!(_BYTE)v32)
            {
              v155 = *(_DWORD *)(v145 + 8);
              if (HIDWORD(v382) <= v155)
              {
                __break(0xC471u);
                JUMPOUT(0x1983E9134);
              }
              v154 = (char *)v381 + 88 * v155;
            }
            v156 = *((_DWORD *)v154 + 5);
            if (*v144 < v156)
              v156 = *v144;
            *v144 = v156;
            v142 += 2;
          }
          while (v142 != v143);
          v142 = (unint64_t *)v402;
        }
        v157 = (uint64_t *)((char *)v119 + 88 * v118);
        if (v403 != (_OWORD *)v142 && v142)
        {
          *(_QWORD *)&v402 = 0;
          DWORD2(v402) = 0;
          WTF::fastFree((unint64_t)v142, v31, v32, v33, v34, v35, v36, v37);
        }
LABEL_199:
        v158 = *((unsigned int *)v157 + 5);
        if (HIDWORD(v395) <= v158)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E9194);
        }
        v159 = (char *)&v383;
        if (!*((_BYTE *)v394 + 16 * v158 + 8))
        {
          v160 = *(_DWORD *)(*((_QWORD *)v394 + 2 * v158) + 8);
          if (HIDWORD(v382) <= v160)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E91C4);
          }
          v159 = (char *)v381 + 88 * v160;
        }
        v161 = (uint64_t *)(v159 + 56);
        v162 = *((unsigned int *)v159 + 17);
        if ((_DWORD)v162 == *((_DWORD *)v159 + 16))
        {
          v165 = (__int128 *)WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v161, v162 + 1, (unint64_t)&v398, v33, v34, v35, v36, v37);
          v162 = *((unsigned int *)v159 + 17);
          v163 = *((_QWORD *)v159 + 7);
          v164 = *v165;
        }
        else
        {
          v163 = *v161;
          v164 = v398;
        }
        *(_OWORD *)(v163 + 16 * v162) = v164;
        ++*((_DWORD *)v159 + 17);
        v166 = v157[1];
        v167 = (char *)&v383;
        if (!BYTE8(v398))
        {
          v168 = *(_DWORD *)(v398 + 8);
          if (HIDWORD(v382) <= v168)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E91CCLL);
          }
          v167 = (char *)v381 + 88 * v168;
        }
        *((_QWORD *)v167 + 3) = *v157;
        v167[32] = v166;
        v169 = *((unsigned __int8 *)v157 + 8);
        v170 = (char *)&v383;
        if (!*((_BYTE *)v157 + 8))
        {
          v171 = *(_DWORD *)(*v157 + 8);
          if (HIDWORD(v382) <= v171)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E91D4);
          }
          v170 = (char *)v381 + 88 * v171;
        }
        v172 = *((unsigned int *)v170 + 17);
        if ((_DWORD)v172)
        {
          v173 = (unint64_t *)*((_QWORD *)v170 + 7);
          v174 = &v173[2 * v172];
          do
          {
            v175 = *v173;
            v32 = v173[1];
            v176 = (char *)&v383;
            v177 = v32;
            if (!(_BYTE)v32)
            {
              v178 = *(_DWORD *)(v175 + 8);
              if (HIDWORD(v382) <= v178)
              {
                __break(0xC471u);
                JUMPOUT(0x1983E919CLL);
              }
              v176 = (char *)v381 + 88 * v178;
            }
            v179 = *((_QWORD *)v176 + 3);
            v180 = v176[32];
            if (v179)
              v181 = 0;
            else
              v181 = v180 == 0;
            v182 = *v173;
            if (!v181)
            {
              WTF::Dominators<JSC::DFG::BackwardsCFG>::LengauerTarjan::compress((uint64_t)&v380, *v173, v32, v33, v34, v35, v36, v37);
              v183 = (char *)&v383;
              if (!v177)
              {
                v184 = *(_DWORD *)(v175 + 8);
                if (HIDWORD(v382) <= v184)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983E91FCLL);
                }
                v183 = (char *)v381 + 88 * v184;
              }
              v185 = v183 + 40;
              v182 = *((_QWORD *)v183 + 5);
              v32 = *((_QWORD *)v185 + 1);
            }
            v186 = (char *)&v383;
            if (!v177)
            {
              v187 = *(_DWORD *)(v175 + 8);
              if (HIDWORD(v382) <= v187)
              {
                __break(0xC471u);
                JUMPOUT(0x1983E91A4);
              }
              v186 = (char *)v381 + 88 * v187;
            }
            v188 = (char *)&v383;
            if (!(_BYTE)v32)
            {
              v189 = *(_DWORD *)(v182 + 8);
              if (HIDWORD(v382) <= v189)
              {
                __break(0xC471u);
                JUMPOUT(0x1983E91ACLL);
              }
              v188 = (char *)v381 + 88 * v189;
            }
            if (*((_DWORD *)v188 + 5) < *((_DWORD *)v186 + 5))
            {
              *((_QWORD *)v186 + 9) = v182;
              v186[80] = v32;
            }
            else
            {
              v190 = v186 + 72;
              v191 = *v157;
              v190[8] = *((_BYTE *)v157 + 8);
              *(_QWORD *)v190 = v191;
            }
            v173 += 2;
          }
          while (v173 != v174);
          v169 = *((unsigned __int8 *)v157 + 8);
        }
        v192 = (char *)&v383;
        if (!v169)
        {
          v193 = *(_DWORD *)(*v157 + 8);
          if (HIDWORD(v382) <= v193)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E91DCLL);
          }
          v192 = (char *)v381 + 88 * v193;
        }
        if (*((_DWORD *)v192 + 16))
        {
          if (*((_DWORD *)v192 + 17))
            *((_DWORD *)v192 + 17) = 0;
          v194 = *((_QWORD *)v192 + 7);
          if (v194)
          {
            *((_QWORD *)v192 + 7) = 0;
            *((_DWORD *)v192 + 16) = 0;
            WTF::fastFree(v194, v31, v32, v33, v34, v35, v36, v37);
          }
        }
        if (v117 <= 1)
        {
          v195 = HIDWORD(v395);
          if (HIDWORD(v395) >= 2)
          {
            v196 = 0;
            v197 = HIDWORD(v382);
            v198 = v381;
            v199 = 1;
            do
            {
              v200 = &v383;
              if (!*((_BYTE *)v394 + v196 + 24))
              {
                v201 = *(_DWORD *)(*(_QWORD *)((char *)v394 + v196 + 16) + 8);
                if (v197 <= v201)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983E91E4);
                }
                v200 = (uint64_t *)((char *)v198 + 88 * v201);
              }
              v202 = *((unsigned int *)v200 + 5);
              if (v195 <= v202)
              {
                __break(0xC471u);
                JUMPOUT(0x1983E91B4);
              }
              v203 = (char *)v394 + 16 * v202;
              v204 = v200[9];
              v205 = *(_QWORD *)v203;
              v206 = v203[8];
              if (v204 != v205 || *((unsigned __int8 *)v200 + 80) != v206)
              {
                v208 = &v383;
                if (!*((_BYTE *)v200 + 80))
                {
                  v209 = *(_DWORD *)(v204 + 8);
                  if (v197 <= v209)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983E9204);
                  }
                  v208 = (uint64_t *)((char *)v198 + 88 * v209);
                }
                v210 = v200 + 9;
                v211 = v208[9];
                *((_BYTE *)v210 + 8) = *((_BYTE *)v208 + 80);
                *v210 = v211;
                v195 = HIDWORD(v395);
              }
              ++v199;
              v196 += 16;
            }
            while (v199 < v195);
          }
          break;
        }
        goto LABEL_134;
      }
    }
  }
  v5 = v373;
  v212 = *(unsigned int *)(***(_QWORD ***)v373 + 60);
  v4 = v375;
  v213 = v377;
  if ((_DWORD)v212 != -1)
  {
    while (2)
    {
      if (v212)
      {
        v214 = ***(_QWORD ***)v373;
        if (*(_DWORD *)(v214 + 60) <= (v212 - 1))
        {
          __break(0xC471u);
          JUMPOUT(0x1983E9164);
        }
        v215 = *(_QWORD *)(*(_QWORD *)(v214 + 48) + 8 * (v212 - 1));
        v402 = v215;
        if (v215)
        {
          v216 = *(_DWORD *)(v215 + 8);
          if (HIDWORD(v382) <= v216)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E916CLL);
          }
          if (v373[5] <= v216)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E9174);
          }
          v217 = (char *)v381 + 88 * v216;
          v218 = *((_QWORD *)v217 + 9);
          v219 = *((_QWORD *)v217 + 10);
          v220 = *v213 + 40 * v216;
LABEL_277:
          *(_QWORD *)(v220 + 16) = v218;
          *(_BYTE *)(v220 + 24) = v219;
          if (v218)
            v221 = 0;
          else
            v221 = v219 == 0;
          if (!v221)
          {
            v222 = v378;
            if (!(_BYTE)v219)
            {
              v223 = *(_DWORD *)(v218 + 8);
              if (v373[5] <= v223)
              {
                __break(0xC471u);
                JUMPOUT(0x1983E917CLL);
              }
              v222 = *v213 + 40 * v223;
            }
            v224 = *(unsigned int *)(v222 + 12);
            if ((_DWORD)v224 == *(_DWORD *)(v222 + 8))
            {
              v227 = (__int128 *)WTF::Vector<WTF::SingleRootGraphNode<JSC::DFG::CFG>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v222, v224 + 1, (unint64_t)&v402, v33, v34, v35, v36, v37);
              v213 = v377;
              v224 = *(unsigned int *)(v222 + 12);
              v225 = *(_QWORD *)v222;
              v226 = *v227;
            }
            else
            {
              v225 = *(_QWORD *)v222;
              v226 = v402;
            }
            *(_OWORD *)(v225 + 16 * v224) = v226;
            ++*(_DWORD *)(v222 + 12);
          }
        }
        if (--v212 == -1)
          goto LABEL_291;
        continue;
      }
      break;
    }
    v402 = xmmword_19914FB90;
    v220 = v378;
    v218 = v392;
    LOBYTE(v219) = v393;
    goto LABEL_277;
  }
LABEL_291:
  v398 = 0uLL;
  v402 = xmmword_19914FB90;
  LOBYTE(v403[0]) = 0;
  v235 = WTF::Vector<JSC::FTL::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v398, 1uLL, (unint64_t)&v402);
  v236 = HIDWORD(v398);
  v237 = v398;
  v238 = v398 + 24 * HIDWORD(v398);
  v239 = *(_QWORD *)(v235 + 16);
  *(_OWORD *)v238 = *(_OWORD *)v235;
  *(_QWORD *)(v238 + 16) = v239;
  v240 = __CFADD__(v236, 1);
  v241 = (v236 + 1);
  HIDWORD(v398) = v241;
  if (v240)
    goto LABEL_319;
  v242 = 0;
  v243 = 0;
  v244 = v377;
  do
  {
    v245 = v237 + 24 * v241;
    v247 = *(_QWORD *)(v245 - 24);
    v246 = *(_QWORD *)(v245 - 16);
    v248 = v246;
    v249 = *(unsigned __int8 *)(v245 - 8);
    v250 = (v241 - 1);
    HIDWORD(v398) = v241 - 1;
    if (v249)
    {
      if (v249 == 1)
      {
        v258 = v378;
        if (!(_BYTE)v246)
        {
          v259 = *(_DWORD *)(v247 + 8);
          if (v373[5] <= v259)
          {
            __break(0xC471u);
            JUMPOUT(0x1983E913CLL);
          }
          v258 = *v244 + 40 * v259;
        }
        *(_DWORD *)(v258 + 36) = v243++;
      }
    }
    else
    {
      v251 = v378;
      if (!(_BYTE)v246)
      {
        v252 = *(_DWORD *)(v247 + 8);
        if (v373[5] <= v252)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E9144);
        }
        v251 = *v244 + 40 * v252;
      }
      *(_DWORD *)(v251 + 32) = v242;
      *(_QWORD *)&v402 = v247;
      *((_QWORD *)&v402 + 1) = v246;
      LOBYTE(v403[0]) = 1;
      if ((_DWORD)v250 == DWORD2(v398))
      {
        v268 = WTF::Vector<JSC::FTL::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v398, v241, (unint64_t)&v402);
        v244 = v377;
        v269 = v268;
        v270 = HIDWORD(v398);
        v237 = v398;
        v271 = v398 + 24 * HIDWORD(v398);
        v272 = *(_QWORD *)(v269 + 16);
        *(_OWORD *)v271 = *(_OWORD *)v269;
        *(_QWORD *)(v271 + 16) = v272;
        v241 = (v270 + 1);
      }
      else
      {
        v253 = v402;
        v254 = v237 + 24 * v250;
        *(_QWORD *)(v254 + 16) = *(_QWORD *)&v403[0];
        *(_OWORD *)v254 = v253;
      }
      HIDWORD(v398) = v241;
      v255 = v378;
      if (!v248)
      {
        v256 = *(_DWORD *)(v247 + 8);
        if (v373[5] <= v256)
        {
          __break(0xC471u);
          JUMPOUT(0x1983E914CLL);
        }
        v255 = *v244 + 40 * v256;
      }
      ++v242;
      v257 = *(unsigned int *)(v255 + 12);
      if ((_DWORD)v257)
      {
        v260 = *(__int128 **)v255;
        v261 = 16 * v257;
        do
        {
          v402 = *v260;
          LOBYTE(v403[0]) = 0;
          if ((_DWORD)v241 == DWORD2(v398))
          {
            v264 = WTF::Vector<JSC::FTL::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v398, v241 + 1, (unint64_t)&v402);
            v244 = v377;
            v265 = v264;
            LODWORD(v241) = HIDWORD(v398);
            v237 = v398;
            v266 = v398 + 24 * HIDWORD(v398);
            v267 = *(_QWORD *)(v265 + 16);
            *(_OWORD *)v266 = *(_OWORD *)v265;
            *(_QWORD *)(v266 + 16) = v267;
          }
          else
          {
            v262 = v402;
            v263 = v237 + 24 * v241;
            *(_QWORD *)(v263 + 16) = *(_QWORD *)&v403[0];
            *(_OWORD *)v263 = v262;
          }
          v241 = (v241 + 1);
          HIDWORD(v398) = v241;
          ++v260;
          v261 -= 16;
        }
        while (v261);
      }
      v250 = v241;
    }
    v241 = v250;
  }
  while ((_DWORD)v250);
  if (v237)
  {
LABEL_319:
    *(_QWORD *)&v398 = 0;
    DWORD2(v398) = 0;
    WTF::fastFree(v237, v228, v229, v230, v231, v232, v233, v234);
  }
  v273 = v394;
  if (v394)
  {
    v394 = 0;
    LODWORD(v395) = 0;
    WTF::fastFree((unint64_t)v273, v228, v229, v230, v231, v232, v233, v234);
  }
  v274 = v390;
  if (v390)
  {
    v390 = 0;
    LODWORD(v391) = 0;
    WTF::fastFree((unint64_t)v274, v228, v229, v230, v231, v232, v233, v234);
  }
  v275 = v381;
  if (HIDWORD(v382))
  {
    v276 = 88 * HIDWORD(v382);
    v277 = (char *)v381 + 56;
    do
    {
      v278 = *(_QWORD *)v277;
      if (*(_QWORD *)v277)
      {
        *(_QWORD *)v277 = 0;
        *((_DWORD *)v277 + 2) = 0;
        WTF::fastFree(v278, v228, v229, v230, v231, v232, v233, v234);
      }
      v277 += 88;
      v276 -= 88;
    }
    while (v276);
    v275 = v381;
  }
  a2 = v376;
  if (v275)
  {
    v381 = 0;
    LODWORD(v382) = 0;
    WTF::fastFree((unint64_t)v275, v228, v229, v230, v231, v232, v233, v234);
  }
  v279 = *(_QWORD *)(v374 + 832);
  *(_QWORD *)(v374 + 832) = v373;
  if (v279)
  {
    v280 = *(_QWORD *)(v279 + 24);
    if (v280)
    {
      *(_QWORD *)(v279 + 24) = 0;
      *(_DWORD *)(v279 + 32) = 0;
      WTF::fastFree(v280, v228, v229, v230, v231, v232, v233, v234);
    }
    v281 = *(unsigned int *)(v279 + 20);
    v282 = *(_QWORD *)(v279 + 8);
    if ((_DWORD)v281)
    {
      v283 = 40 * v281;
      do
      {
        v284 = *(_QWORD *)v282;
        if (*(_QWORD *)v282)
        {
          *(_QWORD *)v282 = 0;
          *(_DWORD *)(v282 + 8) = 0;
          WTF::fastFree(v284, v228, v229, v230, v231, v232, v233, v234);
        }
        v282 += 40;
        v283 -= 40;
      }
      while (v283);
      v282 = *(_QWORD *)(v279 + 8);
    }
    if (v282)
    {
      *(_QWORD *)(v279 + 8) = 0;
      *(_DWORD *)(v279 + 16) = 0;
      WTF::fastFree(v282, v228, v229, v230, v231, v232, v233, v234);
    }
    WTF::fastFree(v279, v228, v229, v230, v231, v232, v233, v234);
    v5 = *(_DWORD **)(v374 + 832);
  }
LABEL_344:
  v4[1] = v5;
  *a2 = v4;
}

uint64_t JSC::DFG::runAndLog<JSC::DFG::FixupPhase>(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;
  double v20;
  char v21;
  __int128 *v22;

  v18[0] = "DFG";
  v18[1] = 4;
  v19 = *(_OWORD *)(a1 + 40);
  v20 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v14 = mach_absolute_time();
    v16 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v16 != -1)
    {
      *(_QWORD *)&v17 = &v21;
      v22 = &v17;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v15) = dword_1ECF4400C;
    v20 = (double)(v14 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v15 * 1000000000.0);
  }
  v9 = JSC::DFG::FixupPhase::run((JSC::DFG::FixupPhase *)a1, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(a1 + 32);
    if (qword_1ECF4C32A | byte_1ECF4C323
      || (BYTE1(qword_1ECF4C32A) ? (v11 = (*(_DWORD *)(*(_QWORD *)(v10 + 24) + 16) & 0xFFFFFFFE) == 4) : (v11 = 0),
          !v11 ? (v12 = BYTE2(qword_1ECF4C32A) == 0) : (v12 = 0),
          !v12))
    {
      v17 = *(_OWORD *)(a1 + 40);
      WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>(v10 + 1088, "Phase ", (uint64_t)&v17, " changed the IR.\n", "\n");
    }
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v18);
  return v9;
}

uint64_t JSC::DFG::FixupPhase::run(JSC::DFG::FixupPhase *this, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  JSC::DFG::Node *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int64x2_t *v36;
  uint64_t *v37;
  _BOOL8 v38;
  _BOOL8 v39;
  uint64_t i;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  BOOL v72;
  char v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  BOOL v86;
  char v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  char v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  const void *v109;
  void *v110;
  BOOL v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  char v117;
  unint64_t v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  int64x2_t *v131;
  int64x2_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int16 v138;
  int64x2_t *v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  unint64_t v148;
  uint64_t v149;
  int v150;
  unint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  const void *v162;
  void *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  void *v167;
  BOOL v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  BOOL v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  BOOL v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  BOOL v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  BOOL v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t *v206;
  uint64_t v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  uint64_t v213;
  BOOL v214;
  _QWORD *v215;
  _QWORD *v216;
  uint64_t v217;
  BOOL v218;
  char v219;
  unsigned int v220;
  void *__src;
  void *__srca;
  int64x2_t v223;
  unint64_t v224;
  uint64_t v225[5];
  int64x2_t *v226;
  unsigned int v227;
  int64x2_t v228;
  __int16 v229;
  int v230;

  *((_BYTE *)this + 248) = 0;
  v8 = *((_QWORD *)this + 4);
  if (!*(_DWORD *)(v8 + 60))
    goto LABEL_287;
  v10 = 0;
  do
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v10);
    if (v11)
    {
      *((_QWORD *)this + 9) = v11;
      *((_DWORD *)this + 20) = 0;
      if (*(_DWORD *)(v11 + 220))
      {
        v12 = 0;
        do
        {
          v13 = *(JSC::DFG::Node **)(*(_QWORD *)(v11 + 208) + 8 * v12);
          *((_QWORD *)this + 11) = v13;
          JSC::DFG::FixupPhase::fixupNode(this, v13);
          v12 = *((_DWORD *)this + 20) + 1;
          *((_DWORD *)this + 20) = v12;
          v14 = *(_DWORD *)(v11 + 220);
        }
        while (v14 > v12);
      }
      else
      {
        v14 = 0;
      }
      v15 = *((unsigned int *)this + 29);
      if ((_DWORD)v15)
      {
        v17 = v15 + v14;
        v18 = *(unsigned int *)(v11 + 216);
        if (v17 > v18)
        {
          v159 = v18 + (v18 >> 2);
          if (v159 >= 0x10)
            v160 = v159 + 1;
          else
            v160 = 16;
          if (v160 <= v17)
            v161 = v15 + v14;
          else
            v161 = v160;
          v162 = *(const void **)(v11 + 208);
          if (v161 < 9)
          {
            v163 = (void *)(v11 + 224);
            *(_QWORD *)(v11 + 208) = v11 + 224;
            *(_DWORD *)(v11 + 216) = 8;
          }
          else
          {
            if (v161 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1983EAFD0);
            }
            v163 = (void *)WTF::fastMalloc((WTF *)(8 * v161));
            *(_DWORD *)(v11 + 216) = v161;
            *(_QWORD *)(v11 + 208) = v163;
          }
          memcpy(v163, v162, 8 * v14);
          if ((const void *)(v11 + 224) != v162 && v162)
          {
            if (*(const void **)(v11 + 208) == v162)
            {
              *(_QWORD *)(v11 + 208) = 0;
              *(_DWORD *)(v11 + 216) = 0;
            }
            WTF::fastFree((unint64_t)v162, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        *(_DWORD *)(v11 + 220) = v17;
        if (v15 - 1 >= (unint64_t)*((unsigned int *)this + 29))
        {
          __break(0xC471u);
          JUMPOUT(0x1983EAFC0);
        }
        v19 = v15 + v14;
        v20 = ~v15;
        v21 = v19;
        do
        {
          --v15;
          v22 = *(_QWORD *)(*((_QWORD *)this + 13) + 16 * v15) + v15;
          v23 = v21 - 1;
          if (v21 - 1 > v22)
          {
            v24 = v21 + v20;
            do
            {
              if (v19 <= v24)
              {
                __break(0xC471u);
                JUMPOUT(0x1983EAE88);
              }
              if (v19 <= v23)
              {
                __break(0xC471u);
                JUMPOUT(0x1983EAE90);
              }
              *(_QWORD *)(*(_QWORD *)(v11 + 208) + 8 * v23--) = *(_QWORD *)(*(_QWORD *)(v11 + 208) + 8 * v24--);
            }
            while (v23 > v22);
          }
          if (v19 <= v22)
          {
            __break(0xC471u);
            JUMPOUT(0x1983EAF00);
          }
          *(_QWORD *)(*(_QWORD *)(v11 + 208) + 8 * v22) = *(_QWORD *)(*((_QWORD *)this + 13) + 16 * v15 + 8);
          ++v20;
          v21 = v22;
        }
        while (v15);
        *((_DWORD *)this + 29) = 0;
      }
      v8 = *((_QWORD *)this + 4);
    }
    ++v10;
    v16 = *(unsigned int *)(v8 + 60);
  }
  while (v10 < v16);
  if (*((_BYTE *)this + 248))
  {
    a3 = 49;
    a4 = 1;
    a5 = 0x10000000000;
    a6 = 48;
    while (1)
    {
      *((_BYTE *)this + 248) = 0;
      v25 = *(unsigned int *)(v8 + 488);
      if (*(_DWORD *)(v8 + 488))
      {
        v26 = *(unsigned int *)(v8 + 508);
        do
        {
          if (--v25 >> 3 >= v26)
          {
            __break(0xC471u);
            JUMPOUT(0x1983EAEF0);
          }
          v27 = *(_QWORD *)(*(_QWORD *)(v8 + 496) + 8 * (v25 >> 3));
          v28 = *(unsigned int *)(v27 + 48 * (v25 & 7) + 28);
          if ((_DWORD)v28)
          {
            v29 = 0;
            v30 = 0;
            v31 = v27 + 48 * (v25 & 7);
            v34 = *(unsigned __int8 *)(v31 + 12);
            v32 = v31 + 12;
            v33 = v34;
            v35 = *(_QWORD *)(v32 + 4);
            do
            {
              v36 = *(int64x2_t **)(v35 + 8 * v29);
              a2 = v36;
              do
              {
                v37 = (uint64_t *)a2;
                a2 = (int64x2_t *)a2->i64[0];
              }
              while (a2);
              if (v37 != (uint64_t *)v36)
                v36->i64[0] = (uint64_t)v37;
              if ((_BYTE)v33)
                v38 = 1;
              else
                v38 = *((unsigned __int8 *)v37 + 43) != 0;
              v39 = v33;
              if (v38 != v33)
              {
                *(_BYTE *)v32 = v38;
                v39 = v38;
              }
              v30 |= v38 != v33;
              ++v29;
              v33 = v39;
            }
            while (v29 != v28);
            if ((v30 & 1) != 0)
            {
              for (i = 0; i != v28; ++i)
              {
                v41 = *(_QWORD **)(v35 + 8 * i);
                v42 = v41;
                do
                {
                  v43 = v42;
                  v42 = (_QWORD *)*v42;
                }
                while (v42);
                if (v43 != v41)
                  *v41 = v43;
                v44 = *((unsigned __int8 *)v43 + 43);
                if (v44 != (v44 | *(_BYTE *)v32))
                  *((_BYTE *)v43 + 43) = v44 | *(_BYTE *)v32;
              }
            }
          }
        }
        while (v25);
      }
      if (*(_DWORD *)(v8 + 60))
        break;
LABEL_188:
      if (!*((_BYTE *)this + 248))
      {
        LODWORD(v16) = *(_DWORD *)(v8 + 60);
        goto LABEL_203;
      }
    }
    v45 = 0;
    while (1)
    {
      v46 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v45);
      if (v46)
      {
        *((_QWORD *)this + 9) = v46;
        *((_DWORD *)this + 20) = 0;
        v47 = *(unsigned int *)(v46 + 220);
        if ((_DWORD)v47)
        {
          v48 = 0;
          v49 = *(_QWORD *)(v46 + 208);
          do
          {
            v51 = *(_QWORD *)(v49 + 8 * v48);
            *((_QWORD *)this + 11) = v51;
            v52 = *(unsigned __int16 *)(v51 + 18);
            if ((v52 - 15) > 1)
              goto LABEL_61;
            v53 = *(_QWORD **)(v51 + 72);
            v54 = v53;
            do
            {
              v55 = v54;
              v54 = (_QWORD *)*v54;
            }
            while (v54);
            if (v55 == v53)
            {
              if (v52 != 16)
                goto LABEL_104;
            }
            else
            {
              *v53 = v55;
              if (v52 != 16)
              {
LABEL_104:
                if (v52 != 15)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983EADD4);
                }
                if (*((_BYTE *)v55 + 40) || !*((_BYTE *)v55 + 43))
                  goto LABEL_61;
                if (*((_DWORD *)v55 + 14) == 1)
                {
                  v220 = *(_DWORD *)(v51 + 56) & 0xFFFFFFF8 | 3;
                }
                else
                {
                  v74 = v55;
                  do
                  {
                    v75 = v74;
                    v74 = (_QWORD *)*v74;
                  }
                  while (v74);
                  if (v75 != v55)
                    *v55 = v75;
                  if ((v75[2] & 0xFFFFFFFCFFFFFFFFLL) == 0 || !*((_DWORD *)v55 + 7))
                    goto LABEL_61;
                  v76 = v55;
                  do
                  {
                    v77 = v76;
                    v76 = (_QWORD *)*v76;
                  }
                  while (v76);
                  if (v77 != v55)
                    *v55 = v77;
                  v78 = v77[2];
                  if (!v78 || (v78 & 0xFFFFFFF0FFFFFFFFLL) != 0)
                    goto LABEL_61;
                  v220 = *(_DWORD *)(v51 + 56) & 0xFFFFFFF8 | 5;
                }
                *(_DWORD *)(v51 + 56) = v220;
                goto LABEL_61;
              }
            }
            if (*((_BYTE *)v55 + 40) || !*((_BYTE *)v55 + 43))
              goto LABEL_61;
            if (*((_DWORD *)v55 + 14) == 1)
            {
              v105 = *(_QWORD *)(v51 + 24);
              if (*(_WORD *)((v105 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
              {
                v112 = *(_QWORD **)((v105 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                v113 = v112;
                do
                {
                  v114 = v113;
                  v113 = (_QWORD *)*v113;
                }
                while (v113);
                if (v114 != v112)
                  *v112 = v114;
                v115 = v114;
                do
                {
                  v116 = v115;
                  v115 = (_QWORD *)*v115;
                }
                while (v115);
                if (v116 != v114)
                  *v114 = v116;
                if (*((_DWORD *)v116 + 14) == 1)
                {
                  v117 = *((_BYTE *)v114 + 43);
                  if (!v117)
                    *((_BYTE *)v114 + 43) = 1;
                  *((_BYTE *)this + 248) |= v117 ^ 1;
                }
              }
              v50 = v105 & 0xFF03FFFFFFFFFFFFLL | 0xC4000000000000;
            }
            else
            {
              v56 = v55;
              do
              {
                v57 = v56;
                v56 = (_QWORD *)*v56;
              }
              while (v56);
              if (v57 != v55)
                *v55 = v57;
              v58 = v57[2];
              if (!v58)
                goto LABEL_61;
              if ((v58 & 0xFFFFFFFCFFFFFFFFLL) != 0)
              {
                if (*((_DWORD *)v55 + 7))
                {
                  v59 = v55;
                  do
                  {
                    v60 = v59;
                    v59 = (_QWORD *)*v59;
                  }
                  while (v59);
                  if (v60 != v55)
                    *v55 = v60;
                  v61 = v60[2];
                  if (v61 && (v61 & 0xFFFFFFF0FFFFFFFFLL) == 0)
                  {
                    v207 = *(_QWORD *)(v51 + 24);
                    if (*(_WORD *)((v207 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
                    {
                      v208 = *(_QWORD **)((v207 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                      v209 = v208;
                      do
                      {
                        v210 = v209;
                        v209 = (_QWORD *)*v209;
                      }
                      while (v209);
                      if (v210 != v208)
                        *v208 = v210;
                      v211 = v210;
                      do
                      {
                        v212 = v211;
                        v211 = (_QWORD *)*v211;
                      }
                      while (v211);
                      if (v212 != v210)
                        *v210 = v212;
                      v213 = v212[1];
                      if (v213)
                        v214 = (v213 & 0xFFFFFFFCFFFFFFFFLL) == 0;
                      else
                        v214 = 0;
                      if (!v214)
                      {
                        v215 = v210;
                        do
                        {
                          v216 = v215;
                          v215 = (_QWORD *)*v215;
                        }
                        while (v215);
                        if (v216 != v210)
                          *v210 = v216;
                        v217 = v216[1];
                        if (v217)
                          v218 = (v217 & 0xFFFFFFF0FFFFFFFFLL) == 0;
                        else
                          v218 = 0;
                        if (v218)
                        {
                          v219 = *((_BYTE *)v210 + 43);
                          if (!v219)
                            *((_BYTE *)v210 + 43) = 1;
                          *((_BYTE *)this + 248) |= v219 ^ 1;
                        }
                      }
                    }
                    *(_QWORD *)(v51 + 24) = v207 & 0xFF03FFFFFFFFFFFFLL | 0xD0000000000000;
                    a3 = 49;
                    a4 = 1;
                    a5 = 0x10000000000;
                    a6 = 48;
                    goto LABEL_61;
                  }
                }
                if ((v58 & 0x2800FFFFFFF7) == 0 || (v58 & 0xFFFFD7FF00000008) != 0)
                {
                  if (v58 != 0x10000000000)
                    goto LABEL_61;
                  v90 = *(_QWORD *)(v51 + 24);
                  if (*(_WORD *)((v90 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
                  {
                    v99 = *(_QWORD **)((v90 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                    v100 = v99;
                    do
                    {
                      v101 = v100;
                      v100 = (_QWORD *)*v100;
                    }
                    while (v100);
                    if (v101 != v99)
                      *v99 = v101;
                    v102 = v101;
                    do
                    {
                      v103 = v102;
                      v102 = (_QWORD *)*v102;
                    }
                    while (v102);
                    if (v103 != v101)
                      *v101 = v103;
                    if (v103[1] == 0x10000000000)
                    {
                      v104 = *((_BYTE *)v101 + 43);
                      if (!v104)
                        *((_BYTE *)v101 + 43) = 1;
                      *((_BYTE *)this + 248) |= v104 ^ 1;
                    }
                  }
                  v50 = v90 & 0xFF03FFFFFFFFFFFFLL | 0x18000000000000;
                }
                else
                {
                  v63 = *(_QWORD *)(v51 + 24);
                  if (*(_WORD *)((v63 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
                  {
                    v64 = *(_QWORD **)((v63 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                    v65 = v64;
                    do
                    {
                      v66 = v65;
                      v65 = (_QWORD *)*v65;
                    }
                    while (v65);
                    if (v66 != v64)
                      *v64 = v66;
                    v67 = v66;
                    do
                    {
                      v68 = v67;
                      v67 = (_QWORD *)*v67;
                    }
                    while (v67);
                    if (v68 != v66)
                      *v66 = v68;
                    v69 = v68[1];
                    v70 = v69 & 0x2800FFFFFFF7;
                    v71 = v69 & 0xFFFFD7FF00000008;
                    if (v70)
                      v72 = v71 == 0;
                    else
                      v72 = 0;
                    if (v72)
                    {
                      v73 = *((_BYTE *)v66 + 43);
                      if (!v73)
                        *((_BYTE *)v66 + 43) = 1;
                      *((_BYTE *)this + 248) |= v73 ^ 1;
                    }
                  }
                  v50 = v63 & 0xFF03FFFFFFFFFFFFLL | 0x20000000000000;
                }
              }
              else
              {
                v80 = *(_QWORD *)(v51 + 24);
                if (*(_WORD *)((v80 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
                {
                  v89 = *(_QWORD **)((v80 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                  v82 = v89;
                  do
                  {
                    v81 = v82;
                    v82 = (_QWORD *)*v82;
                  }
                  while (v82);
                  if (v81 != v89)
                    *v89 = v81;
                  v84 = v81;
                  do
                  {
                    v83 = v84;
                    v84 = (_QWORD *)*v84;
                  }
                  while (v84);
                  if (v83 != v81)
                    *v81 = v83;
                  v85 = v83[1];
                  if (v85)
                    v86 = (v85 & 0xFFFFFFFCFFFFFFFFLL) == 0;
                  else
                    v86 = 0;
                  if (v86)
                  {
                    v87 = *((_BYTE *)v81 + 43);
                    if (!v87)
                      *((_BYTE *)v81 + 43) = 1;
                    *((_BYTE *)this + 248) |= v87 ^ 1;
                  }
                }
                v50 = v80 & 0xFF03FFFFFFFFFFFFLL | 0x4000000000000;
              }
            }
            *(_QWORD *)(v51 + 24) = v50;
LABEL_61:
            *((_DWORD *)this + 20) = ++v48;
          }
          while (v47 > v48);
        }
        v88 = *((unsigned int *)this + 29);
        if ((_DWORD)v88)
        {
          v91 = v47 + v88;
          v92 = *(unsigned int *)(v46 + 216);
          if (v47 + v88 > v92)
          {
            v106 = v92 + (v92 >> 2);
            if (v106 >= 0x10)
              v107 = v106 + 1;
            else
              v107 = 16;
            if (v107 <= v91)
              v108 = v47 + v88;
            else
              v108 = v107;
            v109 = *(const void **)(v46 + 208);
            if (v108 < 9)
            {
              v110 = (void *)(v46 + 224);
              *(_QWORD *)(v46 + 208) = v46 + 224;
              *(_DWORD *)(v46 + 216) = 8;
            }
            else
            {
              if (v108 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x1983EAFB8);
              }
              v110 = (void *)WTF::fastMalloc((WTF *)(8 * v108));
              *(_DWORD *)(v46 + 216) = v108;
              *(_QWORD *)(v46 + 208) = v110;
            }
            memcpy(v110, v109, 8 * v47);
            v111 = (const void *)(v46 + 224) == v109 || v109 == 0;
            a3 = 49;
            a4 = 1;
            a5 = 0x10000000000;
            a6 = 48;
            if (!v111)
            {
              if (*(const void **)(v46 + 208) == v109)
              {
                *(_QWORD *)(v46 + 208) = 0;
                *(_DWORD *)(v46 + 216) = 0;
              }
              WTF::fastFree((unint64_t)v109, a2, 49, 1, 0x10000000000, 48, a7, a8);
              a3 = 49;
              a4 = 1;
              a5 = 0x10000000000;
              a6 = 48;
            }
          }
          *(_DWORD *)(v46 + 220) = v91;
          if (v88 - 1 >= (unint64_t)*((unsigned int *)this + 29))
          {
            __break(0xC471u);
            JUMPOUT(0x1983EAFB0);
          }
          v93 = (v47 + v88);
          v94 = ~v88;
          v95 = v93;
          do
          {
            --v88;
            v96 = *(_QWORD *)(*((_QWORD *)this + 13) + 16 * v88) + v88;
            v97 = v95 - 1;
            if (v95 - 1 > v96)
            {
              v98 = v95 + v94;
              do
              {
                if (v93 <= v98)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983EAE78);
                }
                if (v93 <= v97)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983EAE80);
                }
                *(_QWORD *)(*(_QWORD *)(v46 + 208) + 8 * v97--) = *(_QWORD *)(*(_QWORD *)(v46 + 208) + 8 * v98--);
              }
              while (v97 > v96);
            }
            if (v93 <= v96)
            {
              __break(0xC471u);
              JUMPOUT(0x1983EAEF8);
            }
            *(_QWORD *)(*(_QWORD *)(v46 + 208) + 8 * v96) = *(_QWORD *)(*((_QWORD *)this + 13) + 16 * v88 + 8);
            ++v94;
            v95 = v96;
          }
          while (v88);
          *((_DWORD *)this + 29) = 0;
          v8 = *((_QWORD *)this + 4);
        }
      }
      if (++v45 >= (unint64_t)*(unsigned int *)(v8 + 60))
        goto LABEL_188;
    }
  }
LABEL_203:
  if (!(_DWORD)v16)
    goto LABEL_287;
  v118 = 0;
  v223 = vdupq_n_s64(2uLL);
  do
  {
    v119 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v118);
    if (!v119)
      goto LABEL_214;
    *((_QWORD *)this + 9) = v119;
    v230 = -1;
    v228 = v223;
    v229 = 0;
    v227 = 0;
    v224 = v118;
    if (!*(_DWORD *)(v119 + 220))
    {
      v121 = 0;
      goto LABEL_210;
    }
    v120 = 0;
    do
    {
      v226 = 0;
      v131 = *(int64x2_t **)(*(_QWORD *)(v119 + 208) + 8 * v120);
      v226 = v131;
      if (v131[1].i8[0])
      {
        v230 = v120;
        v132 = &v228;
        if (&v228 != v131)
        {
          if ((v228.i8[0] & 1) != 0 && (v228.i64[0] & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v228.i64[0] & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
          v133 = v131->i64[0];
          if ((v131->i64[0] & 1) != 0)
          {
            v187 = *(_QWORD *)(v133 & 0xFFFFFFFF8);
            if ((v133 & 2) != 0
              || ((v188 = *(unsigned int *)((v133 & 0xFFFFFFFF8) + 8), (_DWORD)v188 != 0x3FFFFFFF)
                ? (v189 = (_DWORD)v188 == -1)
                : (v189 = 1),
                  v189))
            {
              v190 = 2;
            }
            else if (v188 >> 28)
            {
              v200 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v200 = v187;
              *(_DWORD *)(v200 + 8) = v188;
              v190 = 1;
              v187 = v200;
            }
            else
            {
              v190 = *(_QWORD *)(v133 & 0xFFFFFFFF8);
              v187 = v188 << 36;
            }
            v133 = v187 | v190;
          }
          v228.i64[0] = v133;
          if ((v228.i8[8] & 1) != 0 && (v228.i64[1] & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v228.i64[1] & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
          v134 = v131->i64[1];
          if ((v134 & 1) != 0)
          {
            v191 = *(_QWORD *)(v134 & 0xFFFFFFFF8);
            if ((v134 & 2) != 0
              || ((v192 = *(unsigned int *)((v134 & 0xFFFFFFFF8) + 8), (_DWORD)v192 != 0x3FFFFFFF)
                ? (v193 = (_DWORD)v192 == -1)
                : (v193 = 1),
                  v193))
            {
              v194 = 2;
            }
            else if (v192 >> 28)
            {
              v201 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v201 = v191;
              *(_DWORD *)(v201 + 8) = v192;
              v194 = 1;
              v191 = v201;
            }
            else
            {
              v194 = *(_QWORD *)(v134 & 0xFFFFFFFF8);
              v191 = v192 << 36;
            }
            v134 = v191 | v194;
          }
          v228.i64[1] = v134;
          v132 = v226;
        }
        v229 = v131[1].i16[0];
        v131 = v132;
      }
      v135 = v131->i64[0];
      if ((v131->i64[0] & 1) != 0)
      {
        v171 = *(_QWORD *)(v135 & 0xFFFFFFFF8);
        if ((v135 & 2) != 0
          || ((v172 = *(unsigned int *)((v135 & 0xFFFFFFFF8) + 8), (_DWORD)v172 != 0x3FFFFFFF)
            ? (v173 = (_DWORD)v172 == -1)
            : (v173 = 1),
              v173))
        {
          v174 = 2;
        }
        else if (v172 >> 28)
        {
          v198 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v198 = v171;
          *(_DWORD *)(v198 + 8) = v172;
          v174 = 1;
          v171 = v198;
        }
        else
        {
          v174 = v171;
          v171 = v172 << 36;
        }
        v135 = v171 | v174;
      }
      v136 = v228.i64[0];
      if ((v228.i8[0] & 2) != 0)
      {
        v138 = 0;
        v137 = 2;
        v136 = 2;
      }
      else
      {
        if ((v228.i8[0] & 1) != 0)
        {
          v175 = *(_QWORD *)(v228.i64[0] & 0xFFFFFFFF8);
          v176 = *(unsigned int *)((v228.i64[0] & 0xFFFFFFFF8) + 8);
          if ((_DWORD)v176 == 0x3FFFFFFF || (_DWORD)v176 == -1)
          {
            v178 = 2;
          }
          else if (v176 >> 28)
          {
            v196 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v196 = v175;
            *(_DWORD *)(v196 + 8) = v176;
            v178 = 1;
            v175 = v196;
          }
          else
          {
            v178 = *(_QWORD *)(v228.i64[0] & 0xFFFFFFFF8);
            v175 = v176 << 36;
          }
          v136 = v175 | v178;
        }
        v137 = v228.i64[1];
        if ((v228.i8[8] & 1) != 0)
        {
          v179 = *(_QWORD *)(v228.i64[1] & 0xFFFFFFFF8);
          if ((v228.i8[8] & 2) != 0
            || ((v180 = *(unsigned int *)((v228.i64[1] & 0xFFFFFFFF8) + 8), (_DWORD)v180 != 0x3FFFFFFF)
              ? (v181 = (_DWORD)v180 == -1)
              : (v181 = 1),
                v181))
          {
            v182 = 2;
          }
          else if (v180 >> 28)
          {
            v199 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v199 = v179;
            *(_DWORD *)(v199 + 8) = v180;
            v182 = 1;
            v179 = v199;
          }
          else
          {
            v182 = *(_QWORD *)(v228.i64[1] & 0xFFFFFFFF8);
            v179 = v180 << 36;
          }
          v137 = v179 | v182;
        }
        v138 = v229;
        if ((v135 & 2) == 0)
        {
          if ((v136 & 1) != 0 && (v136 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v136 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
          if ((v135 & 1) != 0)
          {
            v183 = *(_QWORD *)(v135 & 0xFFFFFFFF8);
            v184 = *(unsigned int *)((v135 & 0xFFFFFFFF8) + 8);
            if ((_DWORD)v184 == 0x3FFFFFFF || (_DWORD)v184 == -1)
            {
              v186 = 2;
            }
            else if (v184 >> 28)
            {
              __srca = *(void **)(v135 & 0xFFFFFFFF8);
              v197 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v197 = __srca;
              *(_DWORD *)(v197 + 8) = v184;
              v186 = 1;
              v183 = v197;
            }
            else
            {
              v186 = *(_QWORD *)(v135 & 0xFFFFFFFF8);
              v183 = v184 << 36;
            }
            v136 = v183 | v186;
          }
          else
          {
            v136 = v135;
          }
        }
      }
      if ((v228.i8[0] & 1) != 0 && (v228.i64[0] & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v228.i64[0] & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v228.i64[0] = v136;
      if ((v228.i8[8] & 1) != 0 && (v228.i64[1] & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v228.i64[1] & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v228.i64[1] = v137;
      v229 = v138;
      if ((v135 & 1) != 0 && (v135 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v135 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v139 = v226;
      v140 = v226[1].u16[1];
      if (v140 != 20 && (v140 - 24) >= 2)
      {
        if (v140 == 54)
        {
          v195 = v226[1].i64[1];
          if ((v195 & 0xFC000000000000) == 0xC4000000000000
            && (*(_DWORD *)((v195 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) != 3)
          {
            v226[1].i64[1] = v195 & 0xFF03FFFFFFFFFFFFLL | 0x10000000000000;
          }
        }
        goto LABEL_250;
      }
      v145 = v226[1].u64[1];
      if ((v226[3].i8[8] & 0x10) != 0)
      {
        v202 = v226[2].i64[0];
        if ((int)v202 + (int)v145 > v145)
        {
          v203 = *((_QWORD *)this + 4);
          v204 = v226[1].i64[1];
          v205 = 8 * v204;
          do
          {
            if (v204 >= *(unsigned int *)(v203 + 164))
            {
              __break(0xC471u);
              JUMPOUT(0x1983EAEB0);
            }
            v206 = (unint64_t *)(*(_QWORD *)(v203 + 152) + v205);
            if ((*v206 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              JSC::DFG::FixupPhase::fixupChecksInBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::Edge &)#1}::operator()(v206);
              v145 = v139[1].u64[1];
              v202 = v139[2].i64[0];
            }
            ++v204;
            v205 += 8;
          }
          while (v204 < (v145 + v202));
          v139 = v226;
        }
        goto LABEL_250;
      }
      if ((v145 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_250;
      v146 = (v145 >> 50) & 0x3F;
      if (!(_DWORD)v146 || (_DWORD)v146 == 4)
      {
        v147 = *(_DWORD *)((v145 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7;
        if (v147 != 3)
          goto LABEL_259;
        v157 = 0xC4000000000000;
LABEL_286:
        v226[1].i64[1] = v157 | v145 & 0xFF03FFFFFFFFFFFFLL;
        goto LABEL_260;
      }
      if ((v146 - 49) >= 2)
      {
        if ((_DWORD)v146 != 5)
          goto LABEL_260;
        v147 = *(_DWORD *)((v145 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7;
        if (v147 == 3)
        {
          v157 = 0xC8000000000000;
          goto LABEL_286;
        }
LABEL_259:
        if (v147 != 5)
          goto LABEL_260;
LABEL_413:
        v157 = 0xD0000000000000;
        goto LABEL_286;
      }
      if ((*(_DWORD *)((v145 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) != 3)
      {
        if ((*(_DWORD *)((v145 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) == 5)
          goto LABEL_413;
        if ((_DWORD)v146 == 49)
        {
          v157 = 0x10000000000000;
          goto LABEL_286;
        }
      }
LABEL_260:
      v148 = v139[2].u64[0];
      if ((v148 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_250;
      v149 = (v148 >> 50) & 0x3F;
      if (!(_DWORD)v149 || (_DWORD)v149 == 4)
      {
        v150 = *(_DWORD *)((v148 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7;
        if (v150 != 3)
          goto LABEL_263;
        v170 = 0xC4000000000000;
LABEL_324:
        v139[2].i64[0] = v170 | v148 & 0xFF03FFFFFFFFFFFFLL;
        goto LABEL_264;
      }
      if ((v149 - 49) < 2)
      {
        if ((*(_DWORD *)((v148 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) == 3)
          goto LABEL_264;
        if ((*(_DWORD *)((v148 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) == 5)
        {
LABEL_422:
          v170 = 0xD0000000000000;
        }
        else
        {
          if ((_DWORD)v149 != 49)
            goto LABEL_264;
          v170 = 0x10000000000000;
        }
        goto LABEL_324;
      }
      if ((_DWORD)v149 != 5)
        goto LABEL_264;
      v150 = *(_DWORD *)((v148 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7;
      if (v150 == 3)
      {
        v170 = 0xC8000000000000;
        goto LABEL_324;
      }
LABEL_263:
      if (v150 == 5)
        goto LABEL_422;
LABEL_264:
      v151 = v139[2].u64[1];
      if ((v151 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_250;
      v152 = (v151 >> 50) & 0x3F;
      if (!(_DWORD)v152 || (_DWORD)v152 == 4)
      {
        v153 = *(_DWORD *)((v151 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7;
        if (v153 == 3)
        {
          v169 = 0xC4000000000000;
        }
        else
        {
LABEL_267:
          if (v153 != 5)
            goto LABEL_250;
LABEL_440:
          v169 = 0xD0000000000000;
        }
LABEL_389:
        v139[2].i64[1] = v169 | v151 & 0xFF03FFFFFFFFFFFFLL;
        goto LABEL_250;
      }
      if ((v152 - 49) >= 2)
      {
        if ((_DWORD)v152 != 5)
          goto LABEL_250;
        v153 = *(_DWORD *)((v151 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7;
        if (v153 != 3)
          goto LABEL_267;
        v169 = 0xC8000000000000;
        goto LABEL_389;
      }
      if ((*(_DWORD *)((v151 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) != 3)
      {
        if ((*(_DWORD *)((v151 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) == 5)
          goto LABEL_440;
        if ((_DWORD)v152 == 49)
        {
          v169 = 0x10000000000000;
          goto LABEL_389;
        }
      }
LABEL_250:
      v141 = *((_QWORD *)this + 4);
      v225[0] = (uint64_t)this;
      v225[1] = (uint64_t)&v230;
      v225[2] = (uint64_t)&v228;
      v225[3] = (uint64_t)&v227;
      v225[4] = (uint64_t)&v226;
      a2 = (int64x2_t *)((char *)v139 + 24);
      v142 = v139[1].i64[1];
      if ((v139[3].i8[8] & 0x10) != 0)
      {
        v154 = v139[2].i64[0];
        if ((int)v154 + (int)v142 > v142)
        {
          v155 = v139[1].i64[1];
          v156 = 8 * v155;
          do
          {
            if (v155 >= *(unsigned int *)(v141 + 164))
            {
              __break(0xC471u);
              JUMPOUT(0x1983EAEA8);
            }
            a2 = (int64x2_t *)(*(_QWORD *)(v141 + 152) + v156);
            if ((a2->i64[0] & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              JSC::DFG::FixupPhase::fixupChecksInBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::Edge &)#2}::operator()(v225, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
              v142 = v139[1].i64[1];
              v154 = v139[2].i64[0];
            }
            ++v155;
            v156 += 8;
          }
          while (v155 < (v142 + v154));
        }
      }
      else if ((v142 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        JSC::DFG::FixupPhase::fixupChecksInBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::Edge &)#2}::operator()(v225, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        a2 = v139 + 2;
        if ((v139[2].i64[0] & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          JSC::DFG::FixupPhase::fixupChecksInBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::Edge &)#2}::operator()(v225, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v144 = v139[2].i64[1];
          v143 = (uint64_t)&v139[2].i64[1];
          if ((v144 & 0xFF00FFFFFFFFFFFFLL) != 0)
            JSC::DFG::FixupPhase::fixupChecksInBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::Edge &)#2}::operator()(v225, v143, a3, a4, a5, a6, a7, a8);
        }
      }
      v120 = v227 + 1;
      v227 = v120;
      v121 = *(unsigned int *)(v119 + 220);
    }
    while (v121 > v120);
    v118 = v224;
LABEL_210:
    v122 = *((unsigned int *)this + 29);
    if ((_DWORD)v122)
    {
      v123 = v121 + v122;
      v124 = *(unsigned int *)(v119 + 216);
      if (v121 + v122 > v124)
      {
        v164 = v124 + (v124 >> 2);
        if (v164 >= 0x10)
          v165 = v164 + 1;
        else
          v165 = 16;
        if (v165 <= v123)
          v166 = v121 + v122;
        else
          v166 = v165;
        __src = *(void **)(v119 + 208);
        if (v166 < 9)
        {
          v167 = (void *)(v119 + 224);
          *(_QWORD *)(v119 + 208) = v119 + 224;
          *(_DWORD *)(v119 + 216) = 8;
        }
        else
        {
          if (v166 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1983EAFD8);
          }
          v167 = (void *)WTF::fastMalloc((WTF *)(8 * v166));
          *(_DWORD *)(v119 + 216) = v166;
          *(_QWORD *)(v119 + 208) = v167;
        }
        memcpy(v167, __src, 8 * v121);
        v168 = (void *)(v119 + 224) == __src || __src == 0;
        v118 = v224;
        if (!v168)
        {
          if (*(void **)(v119 + 208) == __src)
          {
            *(_QWORD *)(v119 + 208) = 0;
            *(_DWORD *)(v119 + 216) = 0;
          }
          WTF::fastFree((unint64_t)__src, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      *(_DWORD *)(v119 + 220) = v123;
      if (v122 - 1 >= (unint64_t)*((unsigned int *)this + 29))
      {
        __break(0xC471u);
        JUMPOUT(0x1983EAFC8);
      }
      v125 = (v121 + v122);
      v126 = ~v122;
      v127 = v125;
      do
      {
        --v122;
        v128 = *(_QWORD *)(*((_QWORD *)this + 13) + 16 * v122) + v122;
        v129 = v127 - 1;
        if (v127 - 1 > v128)
        {
          v130 = v127 + v126;
          do
          {
            if (v125 <= v130)
            {
              __break(0xC471u);
              JUMPOUT(0x1983EAE98);
            }
            if (v125 <= v129)
            {
              __break(0xC471u);
              JUMPOUT(0x1983EAEA0);
            }
            *(_QWORD *)(*(_QWORD *)(v119 + 208) + 8 * v129--) = *(_QWORD *)(*(_QWORD *)(v119 + 208) + 8 * v130--);
          }
          while (v129 > v128);
        }
        if (v125 <= v128)
        {
          __break(0xC471u);
          JUMPOUT(0x1983EAF08);
        }
        *(_QWORD *)(*(_QWORD *)(v119 + 208) + 8 * v128) = *(_QWORD *)(*((_QWORD *)this + 13) + 16 * v122 + 8);
        ++v126;
        v127 = v128;
      }
      while (v122);
      *((_DWORD *)this + 29) = 0;
    }
    if ((v228.i8[8] & 1) != 0 && (v228.i64[1] & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v228.i64[1] & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    if ((v228.i8[0] & 1) != 0 && (v228.i64[0] & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v228.i64[0] & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v8 = *((_QWORD *)this + 4);
LABEL_214:
    ++v118;
  }
  while (v118 < *(unsigned int *)(v8 + 60));
LABEL_287:
  *(_DWORD *)(v8 + 952) = 1;
  return 1;
}

#error "1983EB000: too big function (funcsize=0)"

uint64_t JSC::DFG::FixupPhase::fixEdge<(JSC::DFG::UseKind)27>(uint64_t result, unint64_t *a2)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  char v12;

  v2 = *a2;
  if (*(_WORD *)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
  {
    v3 = *(_QWORD **)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v4 = v3;
    do
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    if (v5 != v3)
      *v3 = v5;
    v6 = v5;
    do
    {
      v7 = v6;
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    if (v7 != v5)
      *v5 = v7;
    v8 = v7[1];
    v9 = v8 & 0x2800FFFFFFF7;
    v10 = v8 & 0xFFFFD7FF00000008;
    if (v9)
      v11 = v10 == 0;
    else
      v11 = 0;
    if (v11)
    {
      v12 = *((_BYTE *)v5 + 43);
      if (!v12)
        *((_BYTE *)v5 + 43) = 1;
      *(_BYTE *)(result + 248) |= v12 ^ 1;
    }
  }
  *a2 = v2 & 0xFF03FFFFFFFFFFFFLL | 0x6C000000000000;
  return result;
}

BOOL JSC::DFG::Node::canSpeculateInt32(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  _BOOL4 v8;

  if ((*(_BYTE *)((*(_QWORD *)(a1 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x45) & 1) != 0
    || (*(_QWORD *)(a1 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0
    && (*(_BYTE *)((*(_QWORD *)(a1 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x45) & 1) != 0)
  {
    v1 = 1024;
    v2 = 256;
  }
  else
  {
    v1 = 1536;
    v2 = 384;
  }
  v3 = *(_DWORD *)(a1 + 56);
  v4 = v3 & 0xFFFE0;
  v5 = *(unsigned __int16 *)(a1 + 18);
  v6 = (v5 - 57) > 0x1F || ((1 << (v5 - 57)) & 0xC8781B01) == 0;
  v7 = v3 & 0xF7FE0;
  if (!v6)
    v7 = v4;
  if (v5 == 74)
    v7 = v4;
  v8 = (v7 & v1) == 0 || (v7 & 0x8000) == 0;
  if ((v7 & v2) != 0)
    return (v7 & 0x4000) == 0;
  else
    return v8;
}

uint64_t JSC::DFG::FixupPhase::fixEdge<(JSC::DFG::UseKind)1>(uint64_t result, unint64_t *a2)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  char v10;

  v2 = *a2;
  if (*(_WORD *)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
  {
    v3 = *(_QWORD **)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v4 = v3;
    do
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    if (v5 != v3)
      *v3 = v5;
    v6 = v5;
    do
    {
      v7 = v6;
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    if (v7 != v5)
      *v5 = v7;
    v8 = v7[1];
    if (v8)
      v9 = (v8 & 0xFFFFFFFCFFFFFFFFLL) == 0;
    else
      v9 = 0;
    if (v9)
    {
      v10 = *((_BYTE *)v5 + 43);
      if (!v10)
        *((_BYTE *)v5 + 43) = 1;
      *(_BYTE *)(result + 248) |= v10 ^ 1;
    }
  }
  *a2 = v2 & 0xFF03FFFFFFFFFFFFLL | 0x4000000000000;
  return result;
}

uint64_t JSC::DFG::FixupPhase::fixEdge<(JSC::DFG::UseKind)52>(uint64_t result, unint64_t *a2)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  char v14;

  v2 = *a2;
  if (*(_WORD *)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
  {
    v3 = *(_QWORD **)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v4 = v3;
    do
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    if (v5 != v3)
      *v3 = v5;
    v6 = v5;
    do
    {
      v7 = v6;
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    if (v7 != v5)
      *v5 = v7;
    v8 = v7[1];
    if (v8)
      v9 = (v8 & 0xFFFFFFFCFFFFFFFFLL) == 0;
    else
      v9 = 0;
    if (!v9)
    {
      v10 = v5;
      do
      {
        v11 = v10;
        v10 = (_QWORD *)*v10;
      }
      while (v10);
      if (v11 != v5)
        *v5 = v11;
      v12 = v11[1];
      if (v12)
        v13 = (v12 & 0xFFFFFFF0FFFFFFFFLL) == 0;
      else
        v13 = 0;
      if (v13)
      {
        v14 = *((_BYTE *)v5 + 43);
        if (!v14)
          *((_BYTE *)v5 + 43) = 1;
        *(_BYTE *)(result + 248) |= v14 ^ 1;
      }
    }
  }
  *a2 = v2 & 0xFF03FFFFFFFFFFFFLL | 0xD0000000000000;
  return result;
}

uint64_t JSC::DFG::FixupPhase::fixEdge<(JSC::DFG::UseKind)49>(uint64_t result, unint64_t *a2)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;

  v2 = *a2;
  if (*(_WORD *)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
  {
    v3 = *(_QWORD **)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v4 = v3;
    do
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    if (v5 != v3)
      *v3 = v5;
    v6 = v5;
    do
    {
      v7 = v6;
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    if (v7 != v5)
      *v5 = v7;
    if (*((_DWORD *)v7 + 14) == 1)
    {
      v8 = *((_BYTE *)v5 + 43);
      if (!v8)
        *((_BYTE *)v5 + 43) = 1;
      *(_BYTE *)(result + 248) |= v8 ^ 1;
    }
  }
  *a2 = v2 & 0xFF03FFFFFFFFFFFFLL | 0xC4000000000000;
  return result;
}

uint64_t JSC::DFG::FixupPhase::attemptToMakeIntegerAdd(JSC::DFG::FixupPhase *this, JSC::DFG::Node *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  int v19;
  BOOL v20;
  __int16 v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  BOOL v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  BOOL v43;
  char v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  BOOL v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  BOOL v55;
  char v56;
  JSC::DFG::Edge *v57;

  v4 = JSC::DFG::Graph::addSpeculationMode(*((_QWORD *)this + 4), (uint64_t)a2, 3);
  if (v4)
  {
    if (v4 == 1)
    {
      if (JSC::DFG::Node::hasConstant((JSC::DFG::Node *)(*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL)))
        v57 = (JSC::DFG::Node *)((char *)a2 + 24);
      else
        v57 = (JSC::DFG::Node *)((char *)a2 + 32);
      JSC::DFG::FixupPhase::truncateConstantToInt32(this, v57);
    }
    JSC::DFG::FixupPhase::fixIntOrBooleanEdge((uint64_t)this, (JSC::DFG::Node *)((char *)a2 + 24), v5, v6, v7, v8, v9, v10);
    JSC::DFG::FixupPhase::fixIntOrBooleanEdge((uint64_t)this, (JSC::DFG::Node *)((char *)a2 + 32), v11, v12, v13, v14, v15, v16);
    v17 = *((_DWORD *)a2 + 14);
    v18 = v17 & 0xFFE0;
    v19 = *((unsigned __int16 *)a2 + 9);
    v20 = (v19 - 57) > 0x1F || ((1 << (v19 - 57)) & 0xC8781B01) == 0;
    v21 = v17 & 0x7FE0;
    if (!v20)
      v21 = v18;
    if (v19 == 74)
      v21 = v18;
    if ((v21 & 0x4000) == 0)
    {
      result = 1;
      *((_QWORD *)a2 + 9) = 1;
      return result;
    }
    *((_QWORD *)a2 + 9) = 2;
    return 1;
  }
  v23 = *((_QWORD *)a2 + 3);
  v24 = *((_QWORD *)a2 + 4);
  if ((JSC::DFG::Graph::hasExitSite(*((_QWORD *)this + 4), (unint64_t *)a2, 12) & 1) != 0)
    return 0;
  v25 = *(_QWORD *)((v23 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
  v26 = *(_QWORD *)((v24 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
  v28 = (v26 & 0xFFFFFFF0FFFFFFFFLL) == 0 && v26 != 0;
  if (v25)
    v29 = (v25 & 0xFFFFFFF0FFFFFFFFLL) == 0;
  else
    v29 = 0;
  if (v29)
  {
    if (v28)
      goto LABEL_37;
  }
  else if (!v28)
  {
    return 0;
  }
  result = 0;
  v30 = *((_DWORD *)a2 + 14);
  if ((v30 & 0xFC000) != 0 && (v30 & 0xDC000) == (v30 & 0xFC000))
  {
    if (*(_WORD *)((v23 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 1)
      return 0;
    result = 0;
    if (v25 && (v25 & 0xFFFFFFE0FFFFFFFFLL) == 0)
    {
      if (*(_WORD *)((v24 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 1)
        return 0;
      result = 0;
      if (v26)
      {
        if ((v26 & 0xFFFFFFE0FFFFFFFFLL) == 0)
        {
LABEL_37:
          v31 = *((_QWORD *)a2 + 3);
          if (*(_WORD *)((v31 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
          {
            v33 = *(_QWORD **)((v31 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
            v34 = v33;
            do
            {
              v35 = v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
            if (v35 != v33)
              *v33 = v35;
            v36 = v35;
            do
            {
              v37 = v36;
              v36 = (_QWORD *)*v36;
            }
            while (v36);
            if (v37 != v35)
              *v35 = v37;
            v38 = v37[1];
            if (v38)
              v39 = (v38 & 0xFFFFFFFCFFFFFFFFLL) == 0;
            else
              v39 = 0;
            if (!v39)
            {
              v40 = v35;
              do
              {
                v41 = v40;
                v40 = (_QWORD *)*v40;
              }
              while (v40);
              if (v41 != v35)
                *v35 = v41;
              v42 = v41[1];
              if (v42)
                v43 = (v42 & 0xFFFFFFF0FFFFFFFFLL) == 0;
              else
                v43 = 0;
              if (v43)
              {
                v44 = *((_BYTE *)v35 + 43);
                if (!v44)
                  *((_BYTE *)v35 + 43) = 1;
                *((_BYTE *)this + 248) |= v44 ^ 1;
              }
            }
          }
          *((_QWORD *)a2 + 3) = v31 & 0xFF03FFFFFFFFFFFFLL | 0xD0000000000000;
          v32 = *((_QWORD *)a2 + 4);
          if (*(_WORD *)((v32 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
          {
            v45 = *(_QWORD **)((v32 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
            v46 = v45;
            do
            {
              v47 = v46;
              v46 = (_QWORD *)*v46;
            }
            while (v46);
            if (v47 != v45)
              *v45 = v47;
            v48 = v47;
            do
            {
              v49 = v48;
              v48 = (_QWORD *)*v48;
            }
            while (v48);
            if (v49 != v47)
              *v47 = v49;
            v50 = v49[1];
            if (v50)
              v51 = (v50 & 0xFFFFFFFCFFFFFFFFLL) == 0;
            else
              v51 = 0;
            if (!v51)
            {
              v52 = v47;
              do
              {
                v53 = v52;
                v52 = (_QWORD *)*v52;
              }
              while (v52);
              if (v53 != v47)
                *v47 = v53;
              v54 = v53[1];
              if (v54)
                v55 = (v54 & 0xFFFFFFF0FFFFFFFFLL) == 0;
              else
                v55 = 0;
              if (v55)
              {
                v56 = *((_BYTE *)v47 + 43);
                if (!v56)
                  *((_BYTE *)v47 + 43) = 1;
                *((_BYTE *)this + 248) |= v56 ^ 1;
              }
            }
          }
          *((_QWORD *)a2 + 4) = v32 & 0xFF03FFFFFFFFFFFFLL | 0xD0000000000000;
          *((_QWORD *)a2 + 9) = 2;
          *((_DWORD *)a2 + 14) = *((_DWORD *)a2 + 14) & 0xFFFFFFF8 | 5;
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t JSC::DFG::FixupPhase::fixDoubleOrBooleanEdge(uint64_t this, JSC::DFG::Edge *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];

  v3 = this;
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL;
  v6 = *(_QWORD *)(v5 + 0x40);
  if ((v6 & 0x10000000000) != 0)
  {
    v14 = *(unsigned int *)(this + 80);
    JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v27, *(const JSC::DFG::NodeOrigin **)(this + 88));
    v17 = 24;
    if (v6 == 0x10000000000)
    {
      v18 = 6;
    }
    else
    {
      v17 = 0;
      v18 = 0;
    }
    v19 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v3 + 96, v14, 0x300000000, 56, (uint64_t)v27, v5 | (v17 << 48), v15, v16);
    JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v27, v20, v21, v22, v23, v24, v25, v26);
    this = JSC::DFG::FixupPhase::observeUseKindOnNode(v3, v5, v18);
    v7 = v19 & 0xFF00FFFFFFFFFFFFLL;
  }
  else
  {
    if (*(_WORD *)((*(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
    {
      v8 = *(_QWORD **)((*(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
      v9 = v8;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)*v9;
      }
      while (v9);
      if (v10 != v8)
        *v8 = v10;
      v11 = v10;
      do
      {
        v12 = v11;
        v11 = (_QWORD *)*v11;
      }
      while (v11);
      if (v12 != v10)
        *v10 = v12;
      if (*((_DWORD *)v12 + 14) == 1)
      {
        v13 = *((_BYTE *)v10 + 43);
        if (!v13)
          *((_BYTE *)v10 + 43) = 1;
        *(_BYTE *)(this + 248) |= v13 ^ 1;
      }
    }
    v7 = v4 & 0xFF03FFFFFFFFFFFFLL;
  }
  *(_QWORD *)a2 = v7 | 0xC4000000000000;
  return this;
}

uint64_t JSC::DFG::FixupPhase::fixIntConvertingEdge(JSC::DFG::FixupPhase *this, JSC::DFG::Edge *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;

  v10 = *(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL;
  v11 = *(_QWORD *)(v10 + 0x40);
  if (v11)
    v12 = (v11 & 0xFFFFFEFCFFFFFFFFLL) == 0;
  else
    v12 = 0;
  if (v12)
    return JSC::DFG::FixupPhase::fixIntOrBooleanEdge((uint64_t)this, a2, a3, a4, a5, a6, a7, a8);
  if ((v11 & 0xFFFFFF00FFFFFFFFLL) != 0 || (v11 & 0xFF00000000) == 0)
    v15 = 42;
  else
    v15 = 49;
  if (v11)
    v16 = (v11 & 0xFFFFFFF0FFFFFFFFLL) == 0;
  else
    v16 = 0;
  if (v16)
    v17 = 52;
  else
    v17 = v15;
  v18 = (char *)this + 96;
  v19 = *((unsigned int *)this + 20);
  v20 = *((_QWORD *)this + 11);
  v21 = *(_QWORD *)v20;
  if ((*(_QWORD *)v20 & 1) != 0)
  {
    v42 = *((unsigned int *)this + 20);
    v31 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
    if ((v21 & 2) != 0
      || ((v32 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v32 != 0x3FFFFFFF)
        ? (v33 = (_DWORD)v32 == -1)
        : (v33 = 1),
          v33))
    {
      v34 = 2;
    }
    else if (v32 >> 28)
    {
      v39 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v39 = v31;
      *(_DWORD *)(v39 + 8) = v32;
      v34 = 1;
      v31 = v39;
    }
    else
    {
      v34 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
      v31 = v32 << 36;
    }
    v21 = v31 | v34;
    v18 = (char *)this + 96;
    v19 = v42;
  }
  v44 = v21;
  v22 = *(_QWORD *)(v20 + 8);
  if ((v22 & 1) != 0)
  {
    v41 = v18;
    v43 = v19;
    v35 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
    if ((v22 & 2) != 0
      || ((v36 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v36 != 0x3FFFFFFF)
        ? (v37 = (_DWORD)v36 == -1)
        : (v37 = 1),
          v37))
    {
      v38 = 2;
    }
    else if (v36 >> 28)
    {
      v40 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v40 = v35;
      *(_DWORD *)(v40 + 8) = v36;
      v38 = 1;
      v35 = v40;
    }
    else
    {
      v38 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
      v35 = v36 << 36;
    }
    v22 = v35 | v38;
    v18 = v41;
    v19 = v43;
  }
  v45 = v22;
  v46 = *(_WORD *)(v20 + 16);
  v30 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>((uint64_t)v18, v19, 0x300000000, 54, (uint64_t)&v44, v10 | (v17 << 50), a7, a8);
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
  if ((v44 & 1) != 0 && (v44 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v44 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
  result = JSC::DFG::FixupPhase::observeUseKindOnNode((uint64_t)this, v10, v17);
  *(_QWORD *)a2 = v30 & 0xFF00FFFFFFFFFFFFLL | 0x8000000000000;
  return result;
}

uint64_t JSC::DFG::FixupPhase::fixIntOrBooleanEdge(uint64_t this, JSC::DFG::Edge *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;

  v9 = this;
  v10 = *(_QWORD *)a2;
  v11 = *(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL;
  v12 = *(_QWORD *)(v11 + 0x40);
  if ((v12 & 0x10000000000) != 0)
  {
    if (v12 == 0x10000000000)
      v22 = 6;
    else
      v22 = 0;
    v23 = this + 96;
    v24 = *(unsigned int *)(v9 + 80);
    v25 = *(_QWORD *)(v9 + 88);
    v26 = *(_QWORD *)v25;
    if ((*(_QWORD *)v25 & 1) != 0)
    {
      v47 = *(unsigned int *)(v9 + 80);
      v36 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
      if ((v26 & 2) != 0
        || ((v37 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v37 != 0x3FFFFFFF)
          ? (v38 = (_DWORD)v37 == -1)
          : (v38 = 1),
            v38))
      {
        v39 = 2;
      }
      else if (v37 >> 28)
      {
        v44 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v44 = v36;
        *(_DWORD *)(v44 + 8) = v37;
        v39 = 1;
        v36 = v44;
      }
      else
      {
        v39 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
        v36 = v37 << 36;
      }
      v26 = v36 | v39;
      v23 = v9 + 96;
      v24 = v47;
    }
    v49 = v26;
    v27 = *(_QWORD *)(v25 + 8);
    if ((v27 & 1) != 0)
    {
      v46 = v23;
      v48 = v24;
      v40 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
      if ((v27 & 2) != 0
        || ((v41 = *(unsigned int *)((v27 & 0xFFFFFFFF8) + 8), (_DWORD)v41 != 0x3FFFFFFF)
          ? (v42 = (_DWORD)v41 == -1)
          : (v42 = 1),
            v42))
      {
        v43 = 2;
      }
      else if (v41 >> 28)
      {
        v45 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v45 = v40;
        *(_DWORD *)(v45 + 8) = v41;
        v43 = 1;
        v40 = v45;
      }
      else
      {
        v43 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
        v40 = v41 << 36;
      }
      v27 = v40 | v43;
      v23 = v46;
      v24 = v48;
    }
    v50 = v27;
    v51 = *(_WORD *)(v25 + 16);
    v35 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v23, v24, 0x300000000, 56, (uint64_t)&v49, v11 | (v22 << 50), a7, a8);
    if ((v50 & 1) != 0 && (v50 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v50 & 0xFFFFFFFF8, v28, v29, v30, v31, v32, v33, v34);
    if ((v49 & 1) != 0 && (v49 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v49 & 0xFFFFFFFF8, v28, v29, v30, v31, v32, v33, v34);
    this = JSC::DFG::FixupPhase::observeUseKindOnNode(v9, v11, v22);
    v13 = v35 & 0xFF00FFFFFFFFFFFFLL;
  }
  else
  {
    if (*(_WORD *)((*(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
    {
      v14 = *(_QWORD **)((*(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
      v15 = v14;
      do
      {
        v16 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
      if (v16 != v14)
        *v14 = v16;
      v17 = v16;
      do
      {
        v18 = v17;
        v17 = (_QWORD *)*v17;
      }
      while (v17);
      if (v18 != v16)
        *v16 = v18;
      v19 = v18[1];
      if (v19)
        v20 = (v19 & 0xFFFFFFFCFFFFFFFFLL) == 0;
      else
        v20 = 0;
      if (v20)
      {
        v21 = *((_BYTE *)v16 + 43);
        if (!v21)
          *((_BYTE *)v16 + 43) = 1;
        *(_BYTE *)(this + 248) |= v21 ^ 1;
      }
    }
    v13 = v10 & 0xFF03FFFFFFFFFFFFLL;
  }
  *(_QWORD *)a2 = v13 | 0x4000000000000;
  return this;
}

uint64_t JSC::DFG::Graph::unaryArithShouldSpeculateInt52(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  BOOL v4;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;

  v3 = *(_QWORD *)((*(_QWORD *)(a2 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
  if (v3)
    v4 = (v3 & 0xFFFFFFF0FFFFFFFFLL) == 0;
  else
    v4 = 0;
  if (!v4)
    return 0;
  if (!a3
    || (*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0
    && (*(_BYTE *)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x45) & 1) != 0)
  {
    v6 = 1024;
  }
  else
  {
    v6 = 1536;
  }
  v7 = *(_DWORD *)(a2 + 56);
  v8 = v7 & 0xFFFE0;
  v9 = *(unsigned __int16 *)(a2 + 18);
  v10 = (v9 - 57) > 0x1F || ((1 << (v9 - 57)) & 0xC8781B01) == 0;
  v11 = v7 & 0xF7FE0;
  if (!v10)
    v11 = v8;
  if (v9 == 74)
    v11 = v8;
  if ((v11 & 0x40) == 0 && ((v12 = v11 & v6, v13 = v11 & 0x8000, v12) ? (v14 = v13 == 0) : (v14 = 1), v14))
    return JSC::DFG::Graph::hasExitSite(a1, (unint64_t *)a2, 12) ^ 1;
  else
    return 0;
}

uint64_t JSC::DFG::FixupPhase::attemptToMakeFastStringAdd(JSC::DFG::FixupPhase *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  char *v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  char *v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  char *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  JSC::DFG::Node *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  JSC::DFG::Node *v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  _DWORD *v53;
  BOOL v55;
  uint64_t v56;
  unint64_t v57;
  BOOL v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  JSC::DFG::FixupPhase *v75;
  JSC::DFG::Node **v76;
  JSC::DFG::Node **v77;
  char *v78;
  char v79;
  char v80;
  JSC::DFG::Node *v81;

  v81 = a2;
  v80 = 0;
  v79 = 1;
  v10 = *((_QWORD *)this + 4);
  v75 = (JSC::DFG::FixupPhase *)&v80;
  v76 = (JSC::DFG::Node **)this;
  v77 = &v81;
  v78 = &v79;
  v11 = *((_QWORD *)a2 + 3);
  if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
  {
    v67 = *((_QWORD *)a2 + 4);
    if ((int)v67 + (int)v11 > v11)
    {
      v68 = *((_QWORD *)a2 + 3);
      v69 = 8 * v68;
      while (v68 < *(unsigned int *)(v10 + 164))
      {
        v70 = (_QWORD *)(*(_QWORD *)(v10 + 152) + v69);
        if ((*v70 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          JSC::DFG::FixupPhase::attemptToMakeFastStringAdd(JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#1}::operator()((uint64_t)&v75, v70);
          v11 = *((_QWORD *)a2 + 3);
          v67 = *((_QWORD *)a2 + 4);
        }
        ++v68;
        v69 += 8;
        if (v68 >= (v11 + v67))
          goto LABEL_26;
      }
      goto LABEL_117;
    }
    goto LABEL_26;
  }
  v12 = v11 & 0xFF00FFFFFFFFFFFFLL;
  if (!v12)
    goto LABEL_26;
  v13 = *(_QWORD *)(v12 + 64);
  if (v13)
    v14 = (v13 & 0xFFFFFFFFCFFFFFFFLL) == 0;
  else
    v14 = 0;
  if (v14)
    goto LABEL_8;
  if (v13)
    v55 = (v13 & 0xFFFFFFFCFFFFFFFFLL) == 0;
  else
    v55 = 0;
  if (v55)
    goto LABEL_10;
  v56 = v13 & 0xFF00000000;
  v57 = v13 & 0xFFFFFF00FFFFFFFFLL;
  if (v56 && v57 == 0)
    goto LABEL_10;
  if (JSC::DFG::Graph::canOptimizeStringObjectAccess((JSC::DFG::Graph *)v10, a2)
    && ((v63 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40), v63 == 0x20000)
     || v63 && (v63 & 0xFFFFFFFFCFFDFFFFLL) == 0))
  {
LABEL_8:
    v15 = 1;
    v16 = &v80;
  }
  else
  {
    if (*(_WORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 315)
      goto LABEL_10;
    v15 = 0;
    v16 = &v79;
  }
  *v16 = v15;
LABEL_10:
  if ((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_26;
  v17 = *(_QWORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
  if (v17)
    v18 = (v17 & 0xFFFFFFFFCFFFFFFFLL) == 0;
  else
    v18 = 0;
  if (v18)
    goto LABEL_16;
  if (v17)
    v59 = (v17 & 0xFFFFFFFCFFFFFFFFLL) == 0;
  else
    v59 = 0;
  if (v59)
    goto LABEL_18;
  v60 = v17 & 0xFF00000000;
  v61 = v17 & 0xFFFFFF00FFFFFFFFLL;
  if (v60 && v61 == 0)
    goto LABEL_18;
  if (JSC::DFG::Graph::canOptimizeStringObjectAccess(*((JSC::DFG::Graph **)this + 4), v81))
  {
    v64 = *(_QWORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
    if (v64 == 0x20000 || v64 && (v64 & 0xFFFFFFFFCFFDFFFFLL) == 0)
    {
LABEL_16:
      v19 = 1;
      v20 = &v80;
LABEL_17:
      *v20 = v19;
      goto LABEL_18;
    }
  }
  if (*(_WORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 315)
  {
    v19 = 0;
    v20 = &v79;
    goto LABEL_17;
  }
LABEL_18:
  if ((*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_26;
  v21 = *(_QWORD *)((*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
  if (v21)
    v22 = (v21 & 0xFFFFFFFFCFFFFFFFLL) == 0;
  else
    v22 = 0;
  if (v22)
    goto LABEL_24;
  if (v21 && (v21 & 0xFFFFFFFCFFFFFFFFLL) == 0 || (v21 & 0xFF00000000) != 0 && (v21 & 0xFFFFFF00FFFFFFFFLL) == 0)
    goto LABEL_26;
  if (JSC::DFG::Graph::canOptimizeStringObjectAccess(*((JSC::DFG::Graph **)this + 4), v81))
  {
    v65 = *(_QWORD *)((*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
    if (v65 == 0x20000 || v65 && (v65 & 0xFFFFFFFFCFFDFFFFLL) == 0)
    {
LABEL_24:
      v23 = 1;
      v24 = &v80;
LABEL_25:
      *v24 = v23;
      goto LABEL_26;
    }
  }
  if (*(_WORD *)((*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 315)
  {
    v23 = 0;
    v24 = &v79;
    goto LABEL_25;
  }
LABEL_26:
  if (v79)
    v25 = v80 == 0;
  else
    v25 = 1;
  v26 = !v25;
  if (!v25)
  {
    v27 = *((_QWORD *)this + 4);
    v28 = v81;
    v75 = this;
    v76 = &v81;
    v29 = *((_QWORD *)v81 + 3);
    if ((*((_BYTE *)v81 + 56) & 0x10) == 0)
    {
      if ((v29 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        JSC::DFG::FixupPhase::attemptToMakeFastStringAdd(JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#2}::operator()((uint64_t)&v75, (uint64_t)v81 + 24, a3, a4, a5, a6, a7, a8);
        if ((*((_QWORD *)v28 + 4) & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          JSC::DFG::FixupPhase::attemptToMakeFastStringAdd(JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#2}::operator()((uint64_t)&v75, (uint64_t)v28 + 32, v30, v31, v32, v33, v34, v35);
          v43 = *((_QWORD *)v28 + 5);
          v42 = (uint64_t)v28 + 40;
          if ((v43 & 0xFF00FFFFFFFFFFFFLL) != 0)
            JSC::DFG::FixupPhase::attemptToMakeFastStringAdd(JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#2}::operator()((uint64_t)&v75, v42, v36, v37, v38, v39, v40, v41);
        }
      }
      goto LABEL_38;
    }
    v71 = *((_QWORD *)v81 + 4);
    if ((int)v71 + (int)v29 <= v29)
    {
LABEL_38:
      v44 = 0;
      v45 = v81;
      *((_WORD *)v81 + 9) = 331;
      *((_DWORD *)v45 + 14) = 1;
      v46 = (_QWORD *)((char *)v45 + 24);
      v47 = (_QWORD *)((char *)v45 + 32);
      while (1)
      {
        v48 = &v46[v44];
        v49 = *v48 & 0xFF00FFFFFFFFFFFFLL;
        if (!v49)
        {
LABEL_51:
          if ((*v47 & 0xFF00FFFFFFFFFFFFLL) == 0)
            JSC::DFG::Node::convertToIdentity((uint64_t)v45);
          return v26;
        }
        *v48 = *v48 & 0xFF03FFFFFFFFFFFFLL | 0x5C000000000000;
        if (*(unsigned __int16 *)(v49 + 18) <= 2u)
        {
          v50 = **(_QWORD **)(v49 + 72);
          v51 = v50 && (v50 & 0xFFFE000000000002) == 0;
          if (v51 && *(_BYTE *)(v50 + 5) == 2)
          {
            v52 = *(_QWORD *)(v50 + 8);
            v53 = (_DWORD *)(v50 + 16);
            if ((v52 & 1) == 0)
              v53 = (_DWORD *)(v52 + 4);
            if (!*v53)
              break;
          }
        }
LABEL_50:
        if (++v44 >= 3)
          goto LABEL_51;
      }
      if (v44)
      {
        if (v44 != 1)
        {
          v44 = 1;
          goto LABEL_99;
        }
        v44 = 0;
        v66 = (unint64_t *)((char *)v45 + 40);
      }
      else
      {
        if ((*v47 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_51;
        *v46 = *v47;
        v44 = -1;
        v66 = (unint64_t *)((char *)v45 + 40);
        v48 = (unint64_t *)((char *)v45 + 32);
      }
      *v48 = *v66;
LABEL_99:
      *((_QWORD *)v45 + 5) = 0;
      goto LABEL_50;
    }
    v72 = *((_QWORD *)v81 + 3);
    v73 = 8 * v72;
    while (v72 < *(unsigned int *)(v27 + 164))
    {
      v74 = (_QWORD *)(*(_QWORD *)(v27 + 152) + v73);
      if ((*v74 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        JSC::DFG::FixupPhase::attemptToMakeFastStringAdd(JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#2}::operator()((uint64_t)&v75, (uint64_t)v74, a3, a4, a5, a6, a7, a8);
        v29 = *((_QWORD *)v28 + 3);
        v71 = *((_QWORD *)v28 + 4);
      }
      ++v72;
      v73 += 8;
      if (v72 >= (v29 + v71))
        goto LABEL_38;
    }
LABEL_117:
    __break(0xC471u);
    JUMPOUT(0x198401D8CLL);
  }
  return v26;
}

void JSC::DFG::FixupPhase::fixupNode(JSC::DFG::Node *)::{lambda(JSC::DFG::Node *,JSC::DFG::Edge &)#1}::operator()(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  BOOL v9;

  v8 = *(_QWORD *)((*a3 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
  if (v8)
    v9 = (v8 & 0xFFFFFFFCFFFFFFFFLL) == 0;
  else
    v9 = 0;
  if (v9)
    JSC::DFG::FixupPhase::convertStringAddUse<(JSC::DFG::UseKind)1>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  else
    JSC::DFG::FixupPhase::convertStringAddUse<(JSC::DFG::UseKind)21>(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::DFG::FixupPhase::convertToMakeRope(uint64_t this, JSC::DFG::Node *a2)
{
  unsigned int v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t *v11;

  v2 = 0;
  *(_WORD *)(this + 18) = 331;
  *(_DWORD *)(this + 56) = 1;
  v3 = (_QWORD *)(this + 24);
  v4 = (_QWORD *)(this + 32);
  do
  {
    v5 = &v3[v2];
    v6 = *v5 & 0xFF00FFFFFFFFFFFFLL;
    if (!v6)
      break;
    *v5 = *v5 & 0xFF03FFFFFFFFFFFFLL | 0x5C000000000000;
    if (*(unsigned __int16 *)(v6 + 18) > 2u)
      goto LABEL_13;
    v7 = **(_QWORD **)(v6 + 72);
    v8 = v7 && (v7 & 0xFFFE000000000002) == 0;
    if (!v8 || *(_BYTE *)(v7 + 5) != 2)
      goto LABEL_13;
    v9 = *(_QWORD *)(v7 + 8);
    v10 = (_DWORD *)(v7 + 16);
    if ((v9 & 1) == 0)
      v10 = (_DWORD *)(v9 + 4);
    if (*v10)
      goto LABEL_13;
    if (v2)
    {
      if (v2 != 1)
      {
        v2 = 1;
        goto LABEL_20;
      }
      v2 = 0;
      v11 = (unint64_t *)(this + 40);
    }
    else
    {
      if ((*v4 & 0xFF00FFFFFFFFFFFFLL) == 0)
        break;
      *v3 = *v4;
      v2 = -1;
      v11 = (unint64_t *)(this + 40);
      v5 = (unint64_t *)(this + 32);
    }
    *v5 = *v11;
LABEL_20:
    *(_QWORD *)(this + 40) = 0;
LABEL_13:
    ++v2;
  }
  while (v2 < 3);
  if ((*v4 & 0xFF00FFFFFFFFFFFFLL) == 0)
    return JSC::DFG::Node::convertToIdentity(this);
  return this;
}

uint64_t JSC::DFG::FixupPhase::fixupMakeRope(uint64_t this, JSC::DFG::Node *a2)
{
  unsigned int v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t *v11;

  v2 = 0;
  v3 = (_QWORD *)(this + 24);
  v4 = (_QWORD *)(this + 32);
  do
  {
    v5 = &v3[v2];
    v6 = *v5 & 0xFF00FFFFFFFFFFFFLL;
    if (!v6)
      break;
    *v5 = *v5 & 0xFF03FFFFFFFFFFFFLL | 0x5C000000000000;
    if (*(unsigned __int16 *)(v6 + 18) > 2u)
      goto LABEL_13;
    v7 = **(_QWORD **)(v6 + 72);
    v8 = v7 && (v7 & 0xFFFE000000000002) == 0;
    if (!v8 || *(_BYTE *)(v7 + 5) != 2)
      goto LABEL_13;
    v9 = *(_QWORD *)(v7 + 8);
    v10 = (_DWORD *)(v7 + 16);
    if ((v9 & 1) == 0)
      v10 = (_DWORD *)(v9 + 4);
    if (*v10)
      goto LABEL_13;
    if (v2)
    {
      if (v2 != 1)
      {
        v2 = 1;
        goto LABEL_20;
      }
      v2 = 0;
      v11 = (unint64_t *)(this + 40);
    }
    else
    {
      if ((*v4 & 0xFF00FFFFFFFFFFFFLL) == 0)
        break;
      *v3 = *v4;
      v2 = -1;
      v11 = (unint64_t *)(this + 40);
      v5 = (unint64_t *)(this + 32);
    }
    *v5 = *v11;
LABEL_20:
    *(_QWORD *)(this + 40) = 0;
LABEL_13:
    ++v2;
  }
  while (v2 < 3);
  if ((*v4 & 0xFF00FFFFFFFFFFFFLL) == 0)
    return JSC::DFG::Node::convertToIdentity(this);
  return this;
}

uint64_t JSC::DFG::FixupPhase::fixupNode(JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#2}::operator()(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;

  v11 = a1 + 96;
  v12 = *(unsigned int *)(a1 + 80);
  v13 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v25 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v26 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v26 != 0x3FFFFFFF)
        ? (v27 = (_DWORD)v26 == -1)
        : (v27 = 1),
          v27))
    {
      v28 = 2;
    }
    else if (v26 >> 28)
    {
      v41 = *(unsigned int *)(a1 + 80);
      v43 = v11;
      v39 = a2;
      v33 = v26;
      v34 = WTF::fastMalloc((WTF *)0x10);
      a2 = v39;
      v12 = v41;
      v35 = v34;
      v11 = v43;
      *(_QWORD *)v35 = v25;
      *(_DWORD *)(v35 + 8) = v33;
      v28 = 1;
      v25 = v35;
    }
    else
    {
      v28 = v25;
      v25 = v26 << 36;
    }
    v13 = v25 | v28;
  }
  v45 = v13;
  v14 = *(_QWORD *)(a2 + 8);
  if ((v14 & 1) != 0)
  {
    v29 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v30 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v42 = v12;
      v44 = v11;
      v40 = a2;
      v36 = v30;
      v37 = WTF::fastMalloc((WTF *)0x10);
      a2 = v40;
      v12 = v42;
      v38 = v37;
      v11 = v44;
      *(_QWORD *)v38 = v29;
      *(_DWORD *)(v38 + 8) = v36;
      v32 = 1;
      v29 = v38;
    }
    else
    {
      v32 = v29;
      v29 = v30 << 36;
    }
    v14 = v29 | v32;
  }
  v46 = v14;
  v47 = *(_WORD *)(a2 + 16);
  v22 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v11, v12, 0x300000000, 319, (uint64_t)&v45, *(_QWORD *)a3 & 0xFF00FFFFFFFFFFFFLL | 0x54000000000000, a7, a8);
  if ((v46 & 1) != 0 && (v46 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v46 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  v23 = *(_DWORD *)(v22 + 56);
  if ((v23 & 0xFFFFFFF7) != v23)
    *(_DWORD *)(v22 + 56) = v23 & 0xFFFFFFF7;
  *(_QWORD *)a3 = v22 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)a3[6] << 48);
  return JSC::DFG::FixupPhase::fixIntOrBooleanEdge(a1, (JSC::DFG::Edge *)a3, v16, v17, v18, v19, v20, v21);
}

_QWORD *JSC::DFG::FixupPhase::fixupNode(JSC::DFG::Node *)::{lambda(JSC::DFG::Node *)#1}::operator()(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  *(_WORD *)(a3 + 18) = 66;
  v3 = *(_DWORD *)(a3 + 56);
  *(_DWORD *)(a3 + 56) = v3 & 0xFFFFFFF8 | 2;
  if ((v3 & 0x4000) != 0)
  {
    if ((v3 & 0x8000) != 0)
    {
      v4 = 2;
      if ((*result & 0xFF00FFFFFFFFFFFFLL) != (*a2 & 0xFF00FFFFFFFFFFFFLL))
        v4 = 3;
    }
    else
    {
      v4 = 2;
    }
  }
  else
  {
    v4 = 1;
  }
  *(_QWORD *)(a3 + 72) = v4;
  return result;
}

uint64_t JSC::DFG::FixupPhase::fixupNode(JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#3}::operator()(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;

  v11 = a1 + 96;
  v12 = *(unsigned int *)(a1 + 80);
  v13 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v25 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v26 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v26 != 0x3FFFFFFF)
        ? (v27 = (_DWORD)v26 == -1)
        : (v27 = 1),
          v27))
    {
      v28 = 2;
    }
    else if (v26 >> 28)
    {
      v41 = *(unsigned int *)(a1 + 80);
      v43 = v11;
      v39 = a2;
      v33 = v26;
      v34 = WTF::fastMalloc((WTF *)0x10);
      a2 = v39;
      v12 = v41;
      v35 = v34;
      v11 = v43;
      *(_QWORD *)v35 = v25;
      *(_DWORD *)(v35 + 8) = v33;
      v28 = 1;
      v25 = v35;
    }
    else
    {
      v28 = v25;
      v25 = v26 << 36;
    }
    v13 = v25 | v28;
  }
  v45 = v13;
  v14 = *(_QWORD *)(a2 + 8);
  if ((v14 & 1) != 0)
  {
    v29 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v30 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v42 = v12;
      v44 = v11;
      v40 = a2;
      v36 = v30;
      v37 = WTF::fastMalloc((WTF *)0x10);
      a2 = v40;
      v12 = v42;
      v38 = v37;
      v11 = v44;
      *(_QWORD *)v38 = v29;
      *(_DWORD *)(v38 + 8) = v36;
      v32 = 1;
      v29 = v38;
    }
    else
    {
      v32 = v29;
      v29 = v30 << 36;
    }
    v14 = v29 | v32;
  }
  v46 = v14;
  v47 = *(_WORD *)(a2 + 16);
  v22 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v11, v12, 0x7300000000, 319, (uint64_t)&v45, *(_QWORD *)a3 & 0xFF00FFFFFFFFFFFFLL | 0x54000000000000, a7, a8);
  if ((v46 & 1) != 0 && (v46 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v46 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  v23 = *(_DWORD *)(v22 + 56);
  if ((v23 & 0xFFFFFFF7) != v23)
    *(_DWORD *)(v22 + 56) = v23 & 0xFFFFFFF7;
  *(_QWORD *)a3 = v22 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)a3[6] << 48);
  return JSC::DFG::FixupPhase::fixDoubleOrBooleanEdge(a1, (JSC::DFG::Edge *)a3);
}

uint64_t JSC::DFG::FixupPhase::fixupArithMul(JSC::DFG::FixupPhase *this, JSC::DFG::Node *a2, JSC::DFG::Edge *a3, JSC::DFG::Edge *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  unsigned int v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v39;
  __int16 v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;

  v12 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
  if ((v12 & 0x8F800000000) != 0)
    goto LABEL_3;
  v13 = *(_QWORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
  if ((v13 & 0x8F800000000) != 0)
    goto LABEL_3;
  v17 = (v13 & 0x10000000000) == 0 || (*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) == 0;
  if (v17)
    v18 = 384;
  else
    v18 = 256;
  if (v17)
    v19 = 2;
  else
    v19 = 1;
  if ((v12 & 0x10000000000) != 0)
    v20 = 256;
  else
    v20 = v18;
  if ((v12 & 0x10000000000) != 0)
    v21 = 1;
  else
    v21 = v19;
  v22 = *((_DWORD *)a2 + 14);
  v23 = v22 & 0xFFFE0;
  v24 = *((unsigned __int16 *)a2 + 9);
  if (v24 != 74)
  {
    v46 = v24 - 57;
    if (v46 > 0x1F || ((1 << v46) & 0xC8781B01) == 0)
      v23 = v22 & 0xF7FE0;
  }
  if ((v23 & v20) == 0)
  {
    if (v21 == 1)
      v25 = 1024;
    else
      v25 = 1;
    if (v21 == 2)
      v26 = 1536;
    else
      v26 = v25;
    if ((v23 & v26) == 0 || (v23 & 0x8000) == 0)
      goto LABEL_33;
LABEL_3:
    if (v12)
      v14 = (v12 & 0xFFFFFFF0FFFFFFFFLL) == 0;
    else
      v14 = 0;
    if (!v14)
      goto LABEL_7;
    v37 = *(_QWORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
    if (!v37 || (v37 & 0xFFFFFFF0FFFFFFFFLL) != 0)
      goto LABEL_7;
    v39 = *((_DWORD *)a2 + 14);
    v40 = v39 & 0xFFE0;
    v41 = *((unsigned __int16 *)a2 + 9);
    if (v41 != 74)
    {
      v48 = v41 - 57;
      if (v48 > 0x1F || ((1 << v48) & 0xC8781B01) == 0)
        v40 = v39 & 0x7FE0;
    }
    if ((v40 & 0x40) != 0
      || (v42 = *((_QWORD *)this + 4), (v40 & 0x600) != 0) && v40 < 0
      || (JSC::DFG::Graph::hasExitSite(v42, (unint64_t *)a2, 12) & 1) != 0)
    {
LABEL_7:
      JSC::DFG::FixupPhase::fixDoubleOrBooleanEdge((uint64_t)this, a3);
      result = JSC::DFG::FixupPhase::fixDoubleOrBooleanEdge((uint64_t)this, a4);
      v16 = *((_DWORD *)a2 + 14) & 0xFFFFFFF8 | 3;
    }
    else
    {
      JSC::DFG::FixupPhase::fixEdge<(JSC::DFG::UseKind)52>((uint64_t)this, (unint64_t *)a3);
      result = JSC::DFG::FixupPhase::fixEdge<(JSC::DFG::UseKind)52>((uint64_t)this, (unint64_t *)a4);
      v43 = *((_DWORD *)a2 + 14);
      v44 = *((unsigned __int16 *)a2 + 9);
      if (v44 == 74 || (v45 = 2, v49 = v44 - 57, v49 <= 0x1F) && ((1 << v49) & 0xC8781B01) != 0)
      {
        if ((v43 & 0x8000) != 0)
        {
          v45 = 2;
          if ((*(_QWORD *)a3 & 0xFF00FFFFFFFFFFFFLL) != (*(_QWORD *)a4 & 0xFF00FFFFFFFFFFFFLL))
            v45 = 3;
        }
        else
        {
          v45 = 2;
        }
      }
      *((_QWORD *)a2 + 9) = v45;
      v16 = v43 & 0xFFFFFFF8 | 5;
    }
    *((_DWORD *)a2 + 14) = v16;
    return result;
  }
  if ((v23 & 0x4000) != 0)
    goto LABEL_3;
LABEL_33:
  JSC::DFG::FixupPhase::fixIntOrBooleanEdge((uint64_t)this, a3, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  result = JSC::DFG::FixupPhase::fixIntOrBooleanEdge((uint64_t)this, a4, v27, v28, v29, v30, v31, v32);
  v33 = *((_DWORD *)a2 + 14);
  v34 = v33 & 0xFFE0;
  v35 = *((unsigned __int16 *)a2 + 9);
  if (v35 != 74 && ((v35 - 57) > 0x1F || ((1 << (v35 - 57)) & 0xC8781B01) == 0))
    v34 = v33 & 0x7FE0;
  if ((v34 & 0x4000) != 0)
  {
    if ((v35 == 74 || (v47 = v35 - 57, v47 <= 0x1F) && ((1 << v47) & 0xC8781B01) != 0)
      && (v33 & 0x8000) != 0
      && (*(_QWORD *)a3 & 0xFF00FFFFFFFFFFFFLL) != (*(_QWORD *)a4 & 0xFF00FFFFFFFFFFFFLL))
    {
      v36 = 3;
    }
    else
    {
      v36 = 2;
    }
  }
  else
  {
    v36 = 1;
  }
  *((_QWORD *)a2 + 9) = v36;
  return result;
}

void JSC::DFG::FixupPhase::fixupArithDiv(JSC::DFG::FixupPhase *this, JSC::DFG::Node *a2, JSC::DFG::Edge *a3, JSC::DFG::Edge *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[104];

  v11 = *((_QWORD *)a2 + 4);
  v12 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
  if ((v12 & 0x8F800000000) != 0)
    goto LABEL_3;
  v13 = v11 & 0xFF00FFFFFFFFFFFFLL;
  v14 = *(_QWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
  if ((v14 & 0x8F800000000) != 0)
    goto LABEL_3;
  v15 = 1;
  v16 = 256;
  if ((v12 & 0x10000000000) == 0)
  {
    v17 = (v14 & 0x10000000000) == 0 || v13 == 0;
    if (v17)
      v16 = 384;
    else
      v16 = 256;
    if (v17)
      v15 = 2;
    else
      v15 = 1;
  }
  v18 = *((_DWORD *)a2 + 14);
  v19 = v18 & 0xFFFE0;
  v20 = *((unsigned __int16 *)a2 + 9);
  if (v20 != 74)
  {
    v34 = v20 - 57;
    if (v34 > 0x1F || ((1 << v34) & 0xC8781B01) == 0)
      v19 = v18 & 0xF7FE0;
  }
  if ((v19 & v16) != 0)
  {
    if ((v19 & 0x4000) != 0)
    {
LABEL_3:
      JSC::DFG::FixupPhase::fixDoubleOrBooleanEdge((uint64_t)this, a3);
      JSC::DFG::FixupPhase::fixDoubleOrBooleanEdge((uint64_t)this, a4);
      *((_DWORD *)a2 + 14) = *((_DWORD *)a2 + 14) & 0xFFFFFFF8 | 3;
      return;
    }
  }
  else
  {
    if (v15 == 1)
      v21 = 1024;
    else
      v21 = 1;
    if (v15 == 2)
      v22 = 1536;
    else
      v22 = v21;
    if ((v19 & v22) != 0 && (v19 & 0x8000) != 0)
      goto LABEL_3;
  }
  if (!(_BYTE)word_1ECF4C48C)
  {
    v36 = (_QWORD *)((char *)a2 + 32);
    JSC::DFG::FixupPhase::fixDoubleOrBooleanEdge((uint64_t)this, a3);
    JSC::DFG::FixupPhase::fixDoubleOrBooleanEdge((uint64_t)this, a4);
    v37 = (char *)this + 96;
    v38 = *((unsigned int *)this + 20);
    JSC::DFG::Node::Node((JSC::DFG::Node *)v47, a2);
    v39 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::Node>((uint64_t)v37, v38, (uint64_t)v47);
    JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v47, v40, v41, v42, v43, v44, v45, v46);
    *(_DWORD *)(v39 + 56) = *(_DWORD *)(v39 + 56) & 0xFFFFFFF8 | 3;
    *((_WORD *)a2 + 9) = 57;
    *((_QWORD *)a2 + 3) = v39 & 0xFF00FFFFFFFFFFFFLL | 0xC4000000000000;
    *v36 = 0;
    v36[1] = 0;
    if ((*((_BYTE *)a2 + 57) & 0x80) != 0)
      goto LABEL_28;
LABEL_55:
    v33 = 2;
    goto LABEL_29;
  }
  JSC::DFG::FixupPhase::fixIntOrBooleanEdge((uint64_t)this, a3, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  JSC::DFG::FixupPhase::fixIntOrBooleanEdge((uint64_t)this, a4, v23, v24, v25, v26, v27, v28);
  v29 = *((_DWORD *)a2 + 14);
  v30 = v29 & 0xFFFE0;
  v31 = *((unsigned __int16 *)a2 + 9);
  v32 = v29 & 0xFFE0;
  if (v31 != 74)
  {
    if ((v31 - 57) > 0x1F || (v32 = v29 & 0xFFE0, ((1 << (v31 - 57)) & 0xC8781B01) == 0))
      v32 = v29 & 0x7FE0;
  }
  if ((v32 & 0x4000) == 0)
  {
    if (v31 != 74 && ((v31 - 57) > 0x1F || ((1 << (v31 - 57)) & 0xC8781B01) == 0))
      v30 = v29 & 0xF7FE0;
    if ((v30 & 0x10000) == 0
      && (v31 != 74 && ((v31 - 57) > 0x1F || ((1 << (v31 - 57)) & 0xC8781B01) == 0) || (v29 & 0x8000) == 0))
    {
      v33 = 1;
      goto LABEL_29;
    }
  }
  if (v31 != 74)
  {
    v35 = v31 - 57;
    if (v35 > 0x1F || ((1 << v35) & 0xC8781B01) == 0)
      goto LABEL_55;
  }
  if ((v29 & 0x8000) == 0)
    goto LABEL_55;
LABEL_28:
  v33 = 3;
LABEL_29:
  *((_QWORD *)a2 + 9) = v33;
}

uint64_t JSC::DFG::Graph::variadicArithShouldSpeculateInt32(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  int v26;
  int v27;

  if (a3)
    v3 = 2;
  else
    v3 = 1;
  v4 = *(_DWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 24);
  if ((v4 & 0x10) != 0)
  {
    v6 = *(_DWORD *)(a2 + 32);
    v7 = (v6 + v5);
    if (v7 > v5)
    {
      v8 = *(_DWORD *)(result + 164);
      v9 = v8 >= v5;
      v10 = v8 - v5;
      if (!v9)
        v10 = 0;
      if (v10 <= v6 - 1)
      {
        __break(0xC471u);
        return result;
      }
      v11 = v7 - v5;
      v12 = (uint64_t *)(*(_QWORD *)(result + 152) + 8 * v5);
      v13 = 1;
      do
      {
        v14 = *v12++;
        v15 = v14 & 0xFF00FFFFFFFFFFFFLL;
        if ((v14 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v16 = *(_QWORD *)(v15 + 64);
          if ((v16 & 0x8F800000000) != 0)
            v13 = 0;
          if ((v16 & 0x10000000000) != 0)
            v3 = 1;
        }
        --v11;
      }
      while (v11);
      goto LABEL_16;
    }
  }
  else
  {
    v17 = v5 & 0xFF00FFFFFFFFFFFFLL;
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 64);
      v13 = (v18 & 0x8F800000000) == 0;
      if ((v18 & 0x10000000000) != 0)
        v3 = 1;
      if ((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v19 = *(_QWORD *)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
        if ((v19 & 0x8F800000000) != 0)
          v13 = 0;
        if ((v19 & 0x10000000000) != 0)
          v3 = 1;
        if ((*(_QWORD *)(a2 + 40) & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v20 = *(_QWORD *)((*(_QWORD *)(a2 + 40) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
          if ((v20 & 0x8F800000000) != 0)
            v13 = 0;
          if ((v20 & 0x10000000000) != 0)
            v3 = 1;
        }
      }
LABEL_16:
      if (!v13)
        return 0;
    }
  }
  v21 = v4 & 0xFFFE0;
  v22 = *(unsigned __int16 *)(a2 + 18);
  v23 = (v22 - 57) > 0x1F || ((1 << (v22 - 57)) & 0xC8781B01) == 0;
  v24 = v4 & 0xF7FE0;
  if (!v23)
    v24 = v21;
  if (v22 == 74)
    v24 = v21;
  if (v3 == 1)
    v25 = 256;
  else
    v25 = 1;
  if (v3 == 2)
    v25 = 384;
  if ((v24 & v25) != 0)
  {
    return (v24 & 0x4000) == 0;
  }
  else
  {
    if (v3 == 1)
      v26 = 1024;
    else
      v26 = 1;
    if (v3 == 2)
      v27 = 1536;
    else
      v27 = v26;
    if ((v24 & v27) == 0)
      return 1;
    return (v24 & 0x8000) == 0;
  }
}

uint64_t JSC::DFG::FixupPhase::fixupArithPow(JSC::DFG::FixupPhase *this, JSC::DFG::Node *a2)
{
  JSC::DFG::Edge *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (JSC::DFG::Node *)((char *)a2 + 32);
  v4 = *(_QWORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x40) & 0x8F800000000;
  JSC::DFG::FixupPhase::fixDoubleOrBooleanEdge((uint64_t)this, (JSC::DFG::Node *)((char *)a2 + 24));
  if (v4)
    return JSC::DFG::FixupPhase::fixDoubleOrBooleanEdge((uint64_t)this, v3);
  else
    return JSC::DFG::FixupPhase::fixIntOrBooleanEdge((uint64_t)this, v3, v5, v6, v7, v8, v9, v10);
}

uint64_t JSC::DFG::Graph::roundShouldSpeculateInt32(uint64_t a1, uint64_t *a2, int a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char hasExitSite;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned __int8 *v42;
  int v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  __int16 v47;
  char v48;
  _BYTE v49[8];
  unsigned __int8 *v50;
  char v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (!a3
    || (*(_BYTE *)((a2[3] & 0xFF00FFFFFFFFFFFFLL) + 0x45) & 1) != 0
    || (a2[4] & 0xFF00FFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((a2[4] & 0xFF00FFFFFFFFFFFFLL) + 0x45) & 1) != 0)
  {
    v5 = 1024;
    v6 = 256;
  }
  else
  {
    v5 = 1536;
    v6 = 384;
  }
  v7 = *((_DWORD *)a2 + 14);
  v8 = v7 & 0xFFFE0;
  v9 = *((unsigned __int16 *)a2 + 9);
  v10 = (v9 - 57) > 0x1F || ((1 << (v9 - 57)) & 0xC8781B01) == 0;
  v11 = v7 & 0xF7FE0;
  if (!v10)
    v11 = v8;
  if (v9 == 74)
    v11 = v8;
  if ((v11 & v6) != 0)
  {
    if ((v11 & 0x4000) != 0)
      return 0;
  }
  else if ((v11 & v5) != 0 && (v11 & 0x8000) != 0)
  {
    return 0;
  }
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *a2;
  v14 = *a2 & 0xFFFFFFFF8;
  if ((*a2 & 1) != 0)
    v14 = *(_QWORD *)(*a2 & 0xFFFFFFFF8);
  if (v14)
    v12 = *(_QWORD *)(v14 + 8);
  v15 = *(_QWORD *)(v12 + 56);
  if ((v13 & 2) != 0)
  {
    LODWORD(v16) = -1;
  }
  else if ((v13 & 1) != 0)
  {
    LODWORD(v16) = *(_DWORD *)((*a2 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v16 = v13 >> 36;
  }
  v46 = v16;
  v47 = 9;
  v48 = 0;
  v17 = (unsigned __int8 *)(v15 + 31);
  v52 = 0;
  v50 = (unsigned __int8 *)(v15 + 31);
  v51 = 1;
  if (__ldaxr((unsigned __int8 *)(v15 + 31)))
  {
    __clrex();
LABEL_24:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v17);
    goto LABEL_25;
  }
  if (__stxr(1u, v17))
    goto LABEL_24;
LABEL_25:
  v52 = 1;
  hasExitSite = JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v15 + 96), (uint64_t)v49, &v46);
  if (!v51)
    goto LABEL_26;
  v42 = v50;
  v43 = __ldxr(v50);
  if (v43 != 1)
  {
    __clrex();
    goto LABEL_52;
  }
  if (__stlxr(0, v50))
LABEL_52:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v42, 0, v19, v20, v21, v22, v23, v24);
LABEL_26:
  if ((hasExitSite & 1) != 0)
    return 0;
  v26 = *(_QWORD *)(a1 + 40);
  v27 = *a2;
  v28 = *a2 & 0xFFFFFFFF8;
  v29 = v28;
  if ((*a2 & 1) != 0)
    v29 = *(_QWORD *)v28;
  if (v29)
    v26 = *(_QWORD *)(v29 + 8);
  v30 = *(_QWORD *)(v26 + 56);
  if ((v27 & 2) != 0)
  {
    LODWORD(v31) = -1;
  }
  else if ((v27 & 1) != 0)
  {
    LODWORD(v31) = *(_DWORD *)(v28 + 8);
  }
  else
  {
    v31 = v27 >> 36;
  }
  v46 = v31;
  v47 = 10;
  v48 = 0;
  v32 = (unsigned __int8 *)(v30 + 31);
  v52 = 0;
  v50 = (unsigned __int8 *)(v30 + 31);
  v51 = 1;
  if (__ldaxr((unsigned __int8 *)(v30 + 31)))
  {
    __clrex();
LABEL_36:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v32);
    goto LABEL_37;
  }
  if (__stxr(1u, v32))
    goto LABEL_36;
LABEL_37:
  v52 = 1;
  v40 = JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v30 + 96), (uint64_t)v49, &v46);
  if (v51)
  {
    v44 = v50;
    v45 = __ldxr(v50);
    if (v45 == 1)
    {
      if (!__stlxr(0, v50))
        return v40 ^ 1u;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v44, 0, v34, v35, v36, v37, v38, v39);
  }
  return v40 ^ 1u;
}

void JSC::DFG::FixupPhase::insertCheck<(JSC::DFG::UseKind)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  char v31;
  int64x2_t v32;

  if (*(_WORD *)(a2 + 18) == 15)
  {
    v24 = *(_QWORD **)(a2 + 72);
    v25 = v24;
    do
    {
      v26 = v25;
      v25 = (_QWORD *)*v25;
    }
    while (v25);
    if (v26 != v24)
      *v24 = v26;
    v27 = v26;
    do
    {
      v28 = v27;
      v27 = (_QWORD *)*v27;
    }
    while (v27);
    if (v28 != v26)
      *v26 = v28;
    v29 = v28[1];
    if (v29)
      v30 = (v29 & 0xFFFFFFFCFFFFFFFFLL) == 0;
    else
      v30 = 0;
    if (v30)
    {
      v31 = *((_BYTE *)v26 + 43);
      if (!v31)
        *((_BYTE *)v26 + 43) = 1;
      *(_BYTE *)(a1 + 248) |= v31 ^ 1;
    }
  }
  v9 = *(_DWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(_DWORD *)(v10 + 220);
  if (v11 <= v9)
  {
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x198402F44);
  }
  v12 = *(_QWORD *)(v10 + 208);
  while (1)
  {
    v13 = v9;
    if (*(_BYTE *)(*(_QWORD *)(v12 + 8 * v9) + 16))
      break;
    --v9;
    if (v11 <= (int)v13 - 1)
      goto LABEL_25;
  }
  v14 = a1 + 96;
  JSC::DFG::FixupPhase::originForCheck(&v32, a1, v9, a4, a5, a6, a7, a8);
  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v14, v13, 0, 24, (uint64_t)&v32, a2 & 0xFF00FFFFFFFFFFFFLL | 0x4000000000000, v15, v16);
  if ((v32.i8[8] & 1) != 0 && (v32.i64[1] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v32.i64[1] & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  if ((v32.i8[0] & 1) != 0 && (v32.i64[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v32.i64[0] & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
}

uint64_t JSC::DFG::FixupPhase::fixEdge<(JSC::DFG::UseKind)6>(uint64_t result, unint64_t *a2)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;

  v2 = *a2;
  if (*(_WORD *)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
  {
    v3 = *(_QWORD **)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v4 = v3;
    do
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    if (v5 != v3)
      *v3 = v5;
    v6 = v5;
    do
    {
      v7 = v6;
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    if (v7 != v5)
      *v5 = v7;
    if (v7[1] == 0x10000000000)
    {
      v8 = *((_BYTE *)v5 + 43);
      if (!v8)
        *((_BYTE *)v5 + 43) = 1;
      *(_BYTE *)(result + 248) |= v8 ^ 1;
    }
  }
  *a2 = v2 & 0xFF03FFFFFFFFFFFFLL | 0x18000000000000;
  return result;
}

uint64_t JSC::DFG::FixupPhase::fixEdge<(JSC::DFG::UseKind)21>(uint64_t result, unint64_t *a2)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  char v12;

  v2 = *a2;
  if (*(_WORD *)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
  {
    v3 = *(_QWORD **)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v4 = v3;
    do
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    if (v5 != v3)
      *v3 = v5;
    v6 = v5;
    do
    {
      v7 = v6;
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    if (v7 != v5)
      *v5 = v7;
    v8 = v7[1];
    v9 = v8 & 0x2800FFFFFFF7;
    v10 = v8 & 0xFFFFD7FF00000008;
    if (v9)
      v11 = v10 == 0;
    else
      v11 = 0;
    if (v11)
    {
      v12 = *((_BYTE *)v5 + 43);
      if (!v12)
        *((_BYTE *)v5 + 43) = 1;
      *(_BYTE *)(result + 248) |= v12 ^ 1;
    }
  }
  *a2 = v2 & 0xFF03FFFFFFFFFFFFLL | 0x54000000000000;
  return result;
}

uint64_t JSC::DFG::FixupPhase::fixEdge<(JSC::DFG::UseKind)25>(uint64_t result, unint64_t *a2)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  char v12;

  v2 = *a2;
  if (*(_WORD *)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
  {
    v3 = *(_QWORD **)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v4 = v3;
    do
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    if (v5 != v3)
      *v3 = v5;
    v6 = v5;
    do
    {
      v7 = v6;
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    if (v7 != v5)
      *v5 = v7;
    v8 = v7[1];
    v9 = v8 & 0x2800FFFFFFF7;
    v10 = v8 & 0xFFFFD7FF00000008;
    if (v9)
      v11 = v10 == 0;
    else
      v11 = 0;
    if (v11)
    {
      v12 = *((_BYTE *)v5 + 43);
      if (!v12)
        *((_BYTE *)v5 + 43) = 1;
      *(_BYTE *)(result + 248) |= v12 ^ 1;
    }
  }
  *a2 = v2 & 0xFF03FFFFFFFFFFFFLL | 0x64000000000000;
  return result;
}

uint64_t JSC::DFG::FixupPhase::fixEdge<(JSC::DFG::UseKind)11>(uint64_t result, unint64_t *a2)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  char v12;

  v2 = *a2;
  if (*(_WORD *)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
  {
    v3 = *(_QWORD **)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v4 = v3;
    do
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    if (v5 != v3)
      *v3 = v5;
    v6 = v5;
    do
    {
      v7 = v6;
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    if (v7 != v5)
      *v5 = v7;
    v8 = v7[1];
    v9 = v8 & 0x2800FFFFFFF7;
    v10 = v8 & 0xFFFFD7FF00000008;
    if (v9)
      v11 = v10 == 0;
    else
      v11 = 0;
    if (v11)
    {
      v12 = *((_BYTE *)v5 + 43);
      if (!v12)
        *((_BYTE *)v5 + 43) = 1;
      *(_BYTE *)(result + 248) |= v12 ^ 1;
    }
  }
  *a2 = v2 & 0xFF03FFFFFFFFFFFFLL | 0x2C000000000000;
  return result;
}

void JSC::DFG::FixupPhase::blessArrayOperation(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int (*a5)(unsigned int *), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;

  v8 = (uint64_t)a5;
  v11 = *(_QWORD *)(a1 + 88);
  v12 = *(unsigned __int16 *)(v11 + 18);
  if (v12 == 146)
    v13 = *(_DWORD *)(v11 + 80);
  else
    v13 = *(_DWORD *)(v11 + 72);
  switch((char)v13)
  {
    case 0:
    case 2:
      __break(0xC471u);
      JUMPOUT(0x198403394);
    case 3:
      v16 = a1 + 96;
      v17 = *(unsigned int *)(a1 + 80);
      v18 = *(_QWORD *)v11;
      if ((*(_QWORD *)v11 & 1) != 0)
      {
        v39 = a1 + 96;
        v41 = *(unsigned int *)(a1 + 80);
        v27 = *(_QWORD *)(a1 + 88);
        v28 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
        if ((v18 & 2) != 0
          || ((v29 = *(unsigned int *)((v18 & 0xFFFFFFFF8) + 8), (_DWORD)v29 != 0x3FFFFFFF)
            ? (v30 = (_DWORD)v29 == -1)
            : (v30 = 1),
              v30))
        {
          v31 = 2;
        }
        else if (v29 >> 28)
        {
          v37 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v37 = v28;
          *(_DWORD *)(v37 + 8) = v29;
          v31 = 1;
          v28 = v37;
        }
        else
        {
          v31 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
          v28 = v29 << 36;
        }
        v18 = v28 | v31;
        v11 = v27;
        v16 = v39;
        v17 = v41;
      }
      v43 = v18;
      v19 = *(_QWORD *)(v11 + 8);
      if ((v19 & 1) != 0)
      {
        v40 = v16;
        v42 = v17;
        v32 = v11;
        v33 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
        if ((v19 & 2) != 0
          || ((v34 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v34 != 0x3FFFFFFF)
            ? (v35 = (_DWORD)v34 == -1)
            : (v35 = 1),
              v35))
        {
          v36 = 2;
        }
        else if (v34 >> 28)
        {
          v38 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v38 = v33;
          *(_DWORD *)(v38 + 8) = v34;
          v36 = 1;
          v33 = v38;
        }
        else
        {
          v36 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
          v33 = v34 << 36;
        }
        v19 = v33 | v36;
        v11 = v32;
        v16 = v40;
        v17 = v42;
      }
      v44 = v19;
      v45 = *(_WORD *)(v11 + 16);
      JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin>(v16, v17, 0, 379, (uint64_t)&v43, v8, a7, a8);
      if ((v44 & 1) != 0 && (v44 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v44 & 0xFFFFFFFF8, v20, v21, v22, v23, v24, v25, v26);
      if ((v43 & 1) != 0 && (v43 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v43 & 0xFFFFFFFF8, v20, v21, v22, v23, v24, v25, v26);
      break;
    case 4:
      return;
    default:
      if (v12 == 146)
        v14 = *(_DWORD *)(v11 + 80);
      else
        v14 = *(_DWORD *)(v11 + 72);
      v15 = JSC::DFG::FixupPhase::checkArray(a1, v14, v11, a2 & 0xFF00FFFFFFFFFFFFLL, a3 & 0xFF00FFFFFFFFFFFFLL, a5, a7, a8);
      if (v15)
        *a4 = v15 & 0xFF00FFFFFFFFFFFFLL;
      break;
  }
}

uint64_t JSC::DFG::canCSEStorage(JSC::DFG *this, const JSC::DFG::ArrayMode *a2)
{
  return (*(unsigned __int8 *)this > 0xDuLL) | (0xFA0u >> *(_BYTE *)this) & 1;
}

uint64_t JSC::DFG::FixupPhase::fixEdge<(JSC::DFG::UseKind)23>(uint64_t result, unint64_t *a2)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  char v12;

  v2 = *a2;
  if (*(_WORD *)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
  {
    v3 = *(_QWORD **)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v4 = v3;
    do
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    if (v5 != v3)
      *v3 = v5;
    v6 = v5;
    do
    {
      v7 = v6;
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    if (v7 != v5)
      *v5 = v7;
    v8 = v7[1];
    v9 = v8 & 0x2800FFFFFFF7;
    v10 = v8 & 0xFFFFD7FF00000008;
    if (v9)
      v11 = v10 == 0;
    else
      v11 = 0;
    if (v11)
    {
      v12 = *((_BYTE *)v5 + 43);
      if (!v12)
        *((_BYTE *)v5 + 43) = 1;
      *(_BYTE *)(result + 248) |= v12 ^ 1;
    }
  }
  *a2 = v2 & 0xFF03FFFFFFFFFFFFLL | 0x5C000000000000;
  return result;
}

uint64_t JSC::DFG::FixupPhase::fixEdge<(JSC::DFG::UseKind)9>(uint64_t result, unint64_t *a2)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  char v12;

  v2 = *a2;
  if (*(_WORD *)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
  {
    v3 = *(_QWORD **)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v4 = v3;
    do
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    if (v5 != v3)
      *v3 = v5;
    v6 = v5;
    do
    {
      v7 = v6;
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    if (v7 != v5)
      *v5 = v7;
    v8 = v7[1];
    v9 = v8 & 0x2800FFFFFFF7;
    v10 = v8 & 0xFFFFD7FF00000008;
    if (v9)
      v11 = v10 == 0;
    else
      v11 = 0;
    if (v11)
    {
      v12 = *((_BYTE *)v5 + 43);
      if (!v12)
        *((_BYTE *)v5 + 43) = 1;
      *(_BYTE *)(result + 248) |= v12 ^ 1;
    }
  }
  *a2 = v2 & 0xFF03FFFFFFFFFFFFLL | 0x24000000000000;
  return result;
}

uint64_t JSC::DFG::Node::setArrayMode(uint64_t result, int a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;

  v2 = *(unsigned __int16 *)(result + 18);
  if (v2 == 146)
    v3 = *(_DWORD *)(result + 80);
  else
    v3 = *(_DWORD *)(result + 72);
  if (v3 != a2
    || BYTE1(v3) != BYTE1(a2)
    || BYTE2(v3) != BYTE2(a2)
    || (v4 = HIBYTE(v3), ((v4 ^ HIBYTE(a2)) & 0xF) != 0)
    || ((HIBYTE(a2) ^ v4) & 0x20) != 0
    || ((((v4 & 0x40) == 0) ^ ((HIBYTE(a2) & 0x40) >> 6)) & 1) == 0)
  {
    if (v2 != 264)
      *(_QWORD *)(result + 72) = 0;
    *(_DWORD *)(result + 72) = a2;
  }
  return result;
}

uint64_t JSC::DFG::FixupPhase::fixEdge<(JSC::DFG::UseKind)8>(uint64_t result, unint64_t *a2)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  char v12;

  v2 = *a2;
  if (*(_WORD *)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
  {
    v3 = *(_QWORD **)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v4 = v3;
    do
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    if (v5 != v3)
      *v3 = v5;
    v6 = v5;
    do
    {
      v7 = v6;
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    if (v7 != v5)
      *v5 = v7;
    v8 = v7[1];
    v9 = v8 & 0x2800FFFFFFF7;
    v10 = v8 & 0xFFFFD7FF00000008;
    if (v9)
      v11 = v10 == 0;
    else
      v11 = 0;
    if (v11)
    {
      v12 = *((_BYTE *)v5 + 43);
      if (!v12)
        *((_BYTE *)v5 + 43) = 1;
      *(_BYTE *)(result + 248) |= v12 ^ 1;
    }
  }
  *a2 = v2 & 0xFF03FFFFFFFFFFFFLL | 0x20000000000000;
  return result;
}

uint64_t JSC::DFG::FixupPhase::fixEdge<(JSC::DFG::UseKind)50>(uint64_t result, unint64_t *a2)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;

  v2 = *a2;
  if (*(_WORD *)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
  {
    v3 = *(_QWORD **)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v4 = v3;
    do
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    if (v5 != v3)
      *v3 = v5;
    v6 = v5;
    do
    {
      v7 = v6;
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    if (v7 != v5)
      *v5 = v7;
    if (*((_DWORD *)v7 + 14) == 1)
    {
      v8 = *((_BYTE *)v5 + 43);
      if (!v8)
        *((_BYTE *)v5 + 43) = 1;
      *(_BYTE *)(result + 248) |= v8 ^ 1;
    }
  }
  *a2 = v2 & 0xFF03FFFFFFFFFFFFLL | 0xC8000000000000;
  return result;
}

void JSC::DFG::FixupPhase::speculateForBarrier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  int64x2_t v30;

  v8 = a2 & 0xFF00FFFFFFFFFFFFLL;
  v9 = *(_QWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
  if (v9)
    v10 = (v9 & 0xFFFFFFFCFFFFFFFFLL) == 0;
  else
    v10 = 0;
  if (v10)
  {
    JSC::DFG::FixupPhase::insertCheck<(JSC::DFG::UseKind)1>(a1, a2 & 0xFF00FFFFFFFFFFFFLL, a3, a4, a5, a6, a7, a8);
  }
  else if (v9 == 0x20000000000)
  {
    JSC::DFG::FixupPhase::insertCheck<(JSC::DFG::UseKind)47>(a1, a2 & 0xFF00FFFFFFFFFFFFLL, a3, a4, a5, a6, a7, a8);
  }
  else if (v9 == 0x10000000000)
  {
    JSC::DFG::FixupPhase::insertCheck<(JSC::DFG::UseKind)6>(a1, a2 & 0xFF00FFFFFFFFFFFFLL, a3, a4, a5, a6, a7, a8);
  }
  else if ((v9 & 0xFF00000000) != 0 && (v9 & 0xFFFFFF00FFFFFFFFLL) == 0)
  {
    JSC::DFG::FixupPhase::insertCheck<(JSC::DFG::UseKind)4>(a1, a2 & 0xFF00FFFFFFFFFFFFLL, a3, a4, a5, a6, a7, a8);
  }
  else if (v9 && (v9 & 0x2C00FFFFFFF7) == 0)
  {
    if (*(_WORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
    {
      v27 = *(_QWORD **)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
      v28 = v27;
      do
      {
        v29 = v28;
        v28 = (_QWORD *)*v28;
      }
      while (v28);
      if (v29 != v27)
        *v27 = v29;
    }
    v12 = *(_DWORD *)(a1 + 80);
    v13 = *(_QWORD *)(a1 + 72);
    v14 = *(_DWORD *)(v13 + 220);
    if (v14 <= v12)
    {
LABEL_31:
      __break(0xC471u);
      JUMPOUT(0x1984039E0);
    }
    v15 = *(_QWORD *)(v13 + 208);
    while (1)
    {
      v16 = v12;
      if (*(_BYTE *)(*(_QWORD *)(v15 + 8 * v12) + 16))
        break;
      --v12;
      if (v14 <= (int)v16 - 1)
        goto LABEL_31;
    }
    v17 = a1 + 96;
    JSC::DFG::FixupPhase::originForCheck(&v30, a1, v12, a4, a5, a6, a7, a8);
    JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v17, v16, 0, 24, (uint64_t)&v30, v8 | 0xA4000000000000, v18, v19);
    if ((v30.i8[8] & 1) != 0 && (v30.i64[1] & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v30.i64[1] & 0xFFFFFFFF8, v20, v21, v22, v23, v24, v25, v26);
    if ((v30.i8[0] & 1) != 0 && (v30.i64[0] & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v30.i64[0] & 0xFFFFFFFF8, v20, v21, v22, v23, v24, v25, v26);
  }
}

void JSC::DFG::FixupPhase::addCheckStructureForOriginalStringObjectUse(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;

  v10 = (int)a2;
  v62 = 0;
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 1) == 0)
  {
    v14 = *(_QWORD *)(v12 + 32);
LABEL_3:
    v15 = (_QWORD *)(v13 & 0xFFFFFFFF8);
    v16 = 1;
    v17 = 1;
LABEL_4:
    v18 = v15;
    goto LABEL_5;
  }
  v36 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
  if ((v13 & 2) != 0
    || ((v37 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8), v37 != 0x3FFFFFFF) ? (v38 = v37 == -1) : (v38 = 1), v38))
  {
    v39 = 2;
  }
  else if (v37 >> 28)
  {
    v51 = v36;
    v36 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v36 = v51;
    *(_DWORD *)(v36 + 8) = v37;
    v39 = 1;
  }
  else
  {
    v39 = v36;
    v36 = 0;
  }
  v13 = v36 | v39;
  v14 = *(_QWORD *)(v12 + 32);
  if ((v13 & 1) == 0)
    goto LABEL_3;
  v40 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
  if ((v13 & 2) != 0
    || ((v41 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8), v41 != 0x3FFFFFFF) ? (v42 = v41 == -1) : (v42 = 1), v42))
  {
    v43 = 2;
  }
  else if (v41 >> 28)
  {
    v56 = v14;
    v57 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8);
    v58 = WTF::fastMalloc((WTF *)0x10);
    v14 = v56;
    *(_QWORD *)v58 = v40;
    *(_DWORD *)(v58 + 8) = v57;
    v43 = 1;
    v40 = v58;
  }
  else
  {
    v43 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    v40 = 0;
  }
  v44 = v40 | v43;
  v15 = (_QWORD *)(v44 & 0xFFFFFFFF8);
  if ((v44 & 1) == 0)
  {
    v17 = 0;
    v16 = 1;
    goto LABEL_4;
  }
  v16 = 0;
  v17 = 0;
  v18 = (_QWORD *)*v15;
LABEL_5:
  if (v18)
    v14 = v18[1];
  v19 = *(_QWORD *)(v14 + 8);
  if ((v16 & 1) == 0 && v15)
    WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
  v20 = *(_DWORD *)(v19 + 1160) & 0xFFFFFFFE;
  if ((_DWORD)v20)
    v62 = 16 * v20;
  if ((v17 & 1) == 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if (v10 == 38)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 41512);
    if ((v62 & 1) != 0)
    {
      WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine(&v62, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 41512));
    }
    else if (v21 != (v62 & 0xFFFFFFFFFFFFFFFCLL))
    {
      if ((v62 & 0xFFFFFFFFFFFFFFFCLL) != 0)
      {
        v34 = WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v34 = 0x400000002;
        v35 = v62;
        *(_QWORD *)(v34 + 8) = v62 & 0xFFFFFFFFFFFFFFFCLL;
        *(_QWORD *)(v34 + 16) = v21;
        v22 = v35 & 2 | (unint64_t)v34 | 1;
      }
      else
      {
        v22 = v62 & 2 | v21;
      }
      v62 = v22;
    }
  }
  v23 = *(unsigned int *)(a1 + 80);
  v24 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v45 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
    if ((v24 & 2) != 0
      || (v46 = *(unsigned int *)((v24 & 0xFFFFFFFF8) + 8), (_DWORD)v46 == 0x3FFFFFFF)
      || (_DWORD)v46 == -1)
    {
      v47 = 2;
    }
    else if (v46 >> 28)
    {
      v52 = v46;
      v53 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v53 = v45;
      *(_DWORD *)(v53 + 8) = v52;
      v47 = 1;
      v45 = v53;
    }
    else
    {
      v47 = v45;
      v45 = v46 << 36;
    }
    v24 = v45 | v47;
  }
  v59 = v24;
  v25 = *(_QWORD *)(a3 + 8);
  if ((v25 & 1) != 0)
  {
    v48 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
    if ((v25 & 2) != 0
      || (v49 = *(unsigned int *)((v25 & 0xFFFFFFFF8) + 8), (_DWORD)v49 == 0x3FFFFFFF)
      || (_DWORD)v49 == -1)
    {
      v50 = 2;
    }
    else if (v49 >> 28)
    {
      v54 = v49;
      v55 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v55 = v48;
      *(_DWORD *)(v55 + 8) = v54;
      v50 = 1;
      v48 = v55;
    }
    else
    {
      v50 = v48;
      v48 = v49 << 36;
    }
    v25 = v48 | v50;
  }
  v60 = v25;
  v61 = *(_WORD *)(a3 + 16);
  v26 = JSC::DFG::Graph::addStructureSet(*(_QWORD *)(a1 + 32), (unint64_t *)&v62, (unint64_t *)a3, a4, a5, a6, a7, a8);
  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>(a1 + 96, v23, 0, 0x84u, (uint64_t)&v59, (uint64_t)v26, a4 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000);
  if ((v60 & 1) != 0 && (v60 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v60 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
  if ((v59 & 1) != 0 && (v59 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v59 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
  if ((v62 & 1) != 0)
    WTF::fastFree(v62 & 0xFFFFFFFFFFFFFFFCLL, v27, v28, v29, v30, v31, v32, v33);
}

uint64_t JSC::DFG::FixupPhase::fixEdge<(JSC::DFG::UseKind)38>(uint64_t result, unint64_t *a2)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  char v12;

  v2 = *a2;
  if (*(_WORD *)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
  {
    v3 = *(_QWORD **)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v4 = v3;
    do
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    if (v5 != v3)
      *v3 = v5;
    v6 = v5;
    do
    {
      v7 = v6;
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    if (v7 != v5)
      *v5 = v7;
    v8 = v7[1];
    v9 = v8 & 0x2800FFFFFFF7;
    v10 = v8 & 0xFFFFD7FF00000008;
    if (v9)
      v11 = v10 == 0;
    else
      v11 = 0;
    if (v11)
    {
      v12 = *((_BYTE *)v5 + 43);
      if (!v12)
        *((_BYTE *)v5 + 43) = 1;
      *(_BYTE *)(result + 248) |= v12 ^ 1;
    }
  }
  *a2 = v2 & 0xFF03FFFFFFFFFFFFLL | 0x98000000000000;
  return result;
}

uint64_t JSC::DFG::neverNeedsStorage(JSC::DFG *this, const JSC::DFG::ArrayMode *a2)
{
  return 0;
}

uint64_t JSC::JSGlobalObject::numberProtoToStringFunction(unint64_t this)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(this + 544);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v4 = (_QWORD *)(this - 16);
    v5[0] = *v4;
    v5[1] = this;
    v5[2] = this + 544;
    return v3(v5);
  }
  return v1;
}

void JSC::DFG::FixupPhase::insertCheck<(JSC::DFG::UseKind)52>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t v23;

  JSC::DFG::FixupPhase::observeUseKindOnNode<(JSC::DFG::UseKind)52>(a1, a2);
  v9 = *(_DWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(_DWORD *)(v10 + 220);
  if (v11 <= v9)
  {
LABEL_6:
    __break(0xC471u);
  }
  else
  {
    v12 = *(_QWORD *)(v10 + 208);
    while (1)
    {
      v13 = v9;
      if (*(_BYTE *)(*(_QWORD *)(v12 + 8 * v9) + 16))
        break;
      --v9;
      if (v11 <= (int)v13 - 1)
        goto LABEL_6;
    }
    JSC::DFG::FixupPhase::originForCheck(&v23, a1, v9, v4, v5, v6, v7, v8);
    JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(a1 + 96, v13, 0, 24, (uint64_t)&v23, a2 & 0xFF00FFFFFFFFFFFFLL | 0xD0000000000000, v14, v15);
    JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v23, v16, v17, v18, v19, v20, v21, v22);
  }
}

void JSC::DFG::FixupPhase::insertCheck<(JSC::DFG::UseKind)49>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t v23;

  JSC::DFG::FixupPhase::observeUseKindOnNode<(JSC::DFG::UseKind)49>(a1, a2);
  v9 = *(_DWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(_DWORD *)(v10 + 220);
  if (v11 <= v9)
  {
LABEL_6:
    __break(0xC471u);
  }
  else
  {
    v12 = *(_QWORD *)(v10 + 208);
    while (1)
    {
      v13 = v9;
      if (*(_BYTE *)(*(_QWORD *)(v12 + 8 * v9) + 16))
        break;
      --v9;
      if (v11 <= (int)v13 - 1)
        goto LABEL_6;
    }
    JSC::DFG::FixupPhase::originForCheck(&v23, a1, v9, v4, v5, v6, v7, v8);
    JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(a1 + 96, v13, 0, 24, (uint64_t)&v23, a2 & 0xFF00FFFFFFFFFFFFLL | 0xC4000000000000, v14, v15);
    JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v23, v16, v17, v18, v19, v20, v21, v22);
  }
}

uint64_t JSC::DFG::FixupPhase::fixEdge<(JSC::DFG::UseKind)13>(uint64_t result, unint64_t *a2)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  char v12;

  v2 = *a2;
  if (*(_WORD *)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
  {
    v3 = *(_QWORD **)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v4 = v3;
    do
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    if (v5 != v3)
      *v3 = v5;
    v6 = v5;
    do
    {
      v7 = v6;
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    if (v7 != v5)
      *v5 = v7;
    v8 = v7[1];
    v9 = v8 & 0x2800FFFFFFF7;
    v10 = v8 & 0xFFFFD7FF00000008;
    if (v9)
      v11 = v10 == 0;
    else
      v11 = 0;
    if (v11)
    {
      v12 = *((_BYTE *)v5 + 43);
      if (!v12)
        *((_BYTE *)v5 + 43) = 1;
      *(_BYTE *)(result + 248) |= v12 ^ 1;
    }
  }
  *a2 = v2 & 0xFF03FFFFFFFFFFFFLL | 0x34000000000000;
  return result;
}

BOOL JSC::DFG::lengthNeedsStorage(JSC::DFG *this, const JSC::DFG::ArrayMode *a2)
{
  return *(unsigned __int8 *)this - 6 < 6;
}

uint64_t JSC::DFG::FixupPhase::setSaneChainIfPossible(JSC::DFG::Graph *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t result;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  BOOL v16;
  int v17;

  v8 = a3;
  result = JSC::DFG::Graph::isWatchingArrayPrototypeChainIsSaneWatchpoint(a1, (JSC::DFG::Node *)a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    v11 = *(unsigned __int16 *)(a2 + 18);
    if (v11 == 264)
    {
      v12 = *(_QWORD *)(a2 + 72);
      v13 = v12 & 0x7F00FFFF;
      v14 = v12 & 0x7F00FFFF | (v8 << 16);
    }
    else
    {
      if (v11 == 146)
        LODWORD(v12) = *(_DWORD *)(a2 + 80);
      else
        LODWORD(v12) = *(_DWORD *)(a2 + 72);
      v13 = v12 & 0x7F00FFFF | (v8 << 16);
      v14 = v12 & 0x7F00FFFF | (v8 << 16);
    }
    if (BYTE1(v12) != BYTE1(v14)
      || ((v15 = v13 >> 24, BYTE2(v12) == BYTE2(v14)) ? (v16 = ((BYTE3(v12) ^ BYTE3(v13)) & 0xF) == 0) : (v16 = 0),
          !v16
       || ((v15 ^ BYTE3(v12)) & 0x20) != 0
       || v15 > 0x3F == ((v12 & 0x40000000) == 0)))
    {
      if (v11 == 264)
      {
        *(_DWORD *)(a2 + 72) = v14;
      }
      else
      {
        *(_QWORD *)(a2 + 72) = 0;
        *(_DWORD *)(a2 + 72) = v13 & 0x7F000000 | v14 & 0xFF0000 | v14 & 0xFF00 | v12;
      }
    }
    v17 = *(_DWORD *)(a2 + 56);
    if ((v17 & 0xFFFFFFF7) != v17)
      *(_DWORD *)(a2 + 56) = v17 & 0xFFFFFFF7;
  }
  return result;
}

void JSC::DFG::FixupPhase::insertCheck<(JSC::DFG::UseKind)47>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  int64x2_t v27;

  if (*(_WORD *)(a2 + 18) == 15)
  {
    v24 = *(_QWORD **)(a2 + 72);
    v25 = v24;
    do
    {
      v26 = v25;
      v25 = (_QWORD *)*v25;
    }
    while (v25);
    if (v26 != v24)
      *v24 = v26;
  }
  v9 = *(_DWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(_DWORD *)(v10 + 220);
  if (v11 <= v9)
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x1984042ACLL);
  }
  v12 = *(_QWORD *)(v10 + 208);
  while (1)
  {
    v13 = v9;
    if (*(_BYTE *)(*(_QWORD *)(v12 + 8 * v9) + 16))
      break;
    --v9;
    if (v11 <= (int)v13 - 1)
      goto LABEL_13;
  }
  v14 = a1 + 96;
  JSC::DFG::FixupPhase::originForCheck(&v27, a1, v9, a4, a5, a6, a7, a8);
  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v14, v13, 0, 24, (uint64_t)&v27, a2 & 0xFF00FFFFFFFFFFFFLL | 0xBC000000000000, v15, v16);
  if ((v27.i8[8] & 1) != 0 && (v27.i64[1] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v27.i64[1] & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  if ((v27.i8[0] & 1) != 0 && (v27.i64[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v27.i64[0] & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
}

uint64_t *JSC::StructureSet::operator=(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    if ((*a1 & 1) != 0)
      WTF::fastFree(*a1 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v10 = *a2;
    if ((*a2 & 1) != 0)
    {
      WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine(a1, a2);
    }
    else
    {
      v11 = v10 & 0xFFFFFFFFFFFFFFFDLL;
      v12 = v10 | 2;
      if ((*(_BYTE *)a1 & 2) == 0)
        v12 = v11;
      *a1 = v12;
    }
  }
  return a1;
}

uint64_t JSC::DFG::FixupPhase::fixupStringValueOf(uint64_t this, JSC::DFG::Node *a2)
{
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;

  v5 = *((_QWORD *)a2 + 3);
  v3 = (unint64_t *)((char *)a2 + 24);
  v4 = v5;
  v6 = v5 & 0xFF00FFFFFFFFFFFFLL;
  v7 = *(_QWORD *)((v5 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
  if (v7)
    v8 = (v7 & 0xFFFFFFFFCFFFFFFFLL) == 0;
  else
    v8 = 0;
  if (v8)
  {
    JSC::DFG::FixupPhase::fixEdge<(JSC::DFG::UseKind)21>(this, v3);
    return JSC::DFG::Node::convertToIdentity((uint64_t)a2);
  }
  if (v7)
    v9 = (v7 & 0xFFFFFDFFCFFFFFFFLL) == 0;
  else
    v9 = 0;
  if (v9)
  {
    if (*(_WORD *)(v6 + 18) == 15)
    {
      v11 = *(_QWORD **)(v6 + 72);
      v12 = v11;
      do
      {
        v13 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
      if (v13 != v11)
        *v11 = v13;
    }
    *((_QWORD *)a2 + 3) = v4 & 0xFF03FFFFFFFFFFFFLL | 0x58000000000000;
    goto LABEL_14;
  }
  if (v7 == 0x20000)
  {
    this = JSC::DFG::FixupPhase::observeUseKindOnNode(this, v6, 37);
    *((_QWORD *)a2 + 3) = *((_QWORD *)a2 + 3) & 0xFF03FFFFFFFFFFFFLL | 0x94000000000000;
    goto LABEL_14;
  }
  if (v7)
    v14 = (v7 & 0xFFFFFFFFCFFDFFFFLL) == 0;
  else
    v14 = 0;
  if (v14)
  {
    this = JSC::DFG::FixupPhase::fixEdge<(JSC::DFG::UseKind)38>(this, v3);
LABEL_14:
    *((_WORD *)a2 + 9) = 318;
    v10 = *((_DWORD *)a2 + 14);
    if ((v10 & 0xFFFFFFF7) != v10)
      *((_DWORD *)a2 + 14) = v10 & 0xFFFFFFF7;
  }
  return this;
}

uint64_t JSC::DFG::FixupPhase::fixupCallDOM(uint64_t this, JSC::DFG::Node *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  char v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  char v44;

  v3 = this;
  v4 = *((_QWORD *)a2 + 9);
  v5 = *((_QWORD *)a2 + 3);
  if (*(_WORD *)((v5 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
  {
    v15 = *(_QWORD **)((v5 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v16 = v15;
    do
    {
      v17 = v16;
      v16 = (_QWORD *)*v16;
    }
    while (v16);
    if (v17 != v15)
      *v15 = v17;
    v18 = v17;
    do
    {
      v19 = v18;
      v18 = (_QWORD *)*v18;
    }
    while (v18);
    if (v19 != v17)
      *v17 = v19;
    v20 = v19[1];
    v21 = v20 & 0x2800FFFFFFF7;
    v22 = v20 & 0xFFFFD7FF00000008;
    if (v21)
      v23 = v22 == 0;
    else
      v23 = 0;
    if (v23)
    {
      v24 = *((_BYTE *)v17 + 43);
      if (!v24)
        *((_BYTE *)v17 + 43) = 1;
      *(_BYTE *)(this + 248) |= v24 ^ 1;
    }
  }
  v6 = v5 & 0xFF03FFFFFFFFFFFFLL | 0x20000000000000;
  v7 = (unint64_t *)((char *)a2 + 32);
  v8 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 3) = v6;
  if ((v8 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v9 = *(_QWORD *)(v4 + 24);
    switch(v9)
    {
      case 0x30000000:
        if (*(_WORD *)((v8 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
        {
          v25 = *(_QWORD **)((v8 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
          v26 = v25;
          do
          {
            v27 = v26;
            v26 = (_QWORD *)*v26;
          }
          while (v26);
          if (v27 != v25)
            *v25 = v27;
          v28 = v27;
          do
          {
            v29 = v28;
            v28 = (_QWORD *)*v28;
          }
          while (v28);
          if (v29 != v27)
            *v27 = v29;
          v30 = v29[1];
          v31 = v30 & 0x2800FFFFFFF7;
          v32 = v30 & 0xFFFFD7FF00000008;
          if (v31)
            v33 = v32 == 0;
          else
            v33 = 0;
          if (v33)
          {
            v34 = *((_BYTE *)v27 + 43);
            if (!v34)
              *((_BYTE *)v27 + 43) = 1;
            *(_BYTE *)(this + 248) |= v34 ^ 1;
          }
        }
        *v7 = v8 & 0xFF03FFFFFFFFFFFFLL | 0x54000000000000;
        break;
      case 0x300000000:
        this = JSC::DFG::FixupPhase::fixEdge<(JSC::DFG::UseKind)1>(this, v7);
        break;
      case 0x10000000000:
        this = JSC::DFG::FixupPhase::fixEdge<(JSC::DFG::UseKind)6>(this, v7);
        break;
      default:
        goto LABEL_68;
    }
  }
  v12 = *((_QWORD *)a2 + 5);
  v11 = (unint64_t *)((char *)a2 + 40);
  v10 = v12;
  v13 = v12 & 0xFF00FFFFFFFFFFFFLL;
  if ((v12 & 0xFF00FFFFFFFFFFFFLL) == 0)
    return this;
  v14 = *(_QWORD *)(v4 + 32);
  if (v14 != 805306368)
  {
    if (v14 == 0x300000000)
      return JSC::DFG::FixupPhase::fixEdge<(JSC::DFG::UseKind)1>(v3, v11);
    if (v14 == 0x10000000000)
      return JSC::DFG::FixupPhase::fixEdge<(JSC::DFG::UseKind)6>(v3, v11);
LABEL_68:
    __break(0xC471u);
    JUMPOUT(0x19840474CLL);
  }
  if (*(_WORD *)(v13 + 18) == 15)
  {
    v35 = *(_QWORD **)(v13 + 72);
    v36 = v35;
    do
    {
      v37 = v36;
      v36 = (_QWORD *)*v36;
    }
    while (v36);
    if (v37 != v35)
      *v35 = v37;
    v38 = v37;
    do
    {
      v39 = v38;
      v38 = (_QWORD *)*v38;
    }
    while (v38);
    if (v39 != v37)
      *v37 = v39;
    v40 = v39[1];
    v41 = v40 & 0x2800FFFFFFF7;
    v42 = v40 & 0xFFFFD7FF00000008;
    if (v41)
      v43 = v42 == 0;
    else
      v43 = 0;
    if (v43)
    {
      v44 = *((_BYTE *)v37 + 43);
      if (!v44)
        *((_BYTE *)v37 + 43) = 1;
      *(_BYTE *)(v3 + 248) |= v44 ^ 1;
    }
  }
  *v11 = v10 & 0xFF03FFFFFFFFFFFFLL | 0x54000000000000;
  return this;
}

uint64_t JSC::DFG::FixupPhase::observeUseKindOnNode(uint64_t result, uint64_t a2, int a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  _BYTE *v12;
  int v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;

  if (*(_WORD *)(a2 + 18) != 15)
    return result;
  v3 = *(_QWORD **)(a2 + 72);
  v4 = v3;
  do
  {
    v5 = v4;
    v4 = (_QWORD *)*v4;
  }
  while (v4);
  if (v5 != v3)
    *v3 = v5;
  v6 = v5;
  if ((a3 - 8) < 2)
  {
    do
    {
LABEL_8:
      v7 = v6;
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    if (v7 != v5)
      *v5 = v7;
    v8 = v7[1];
    v9 = v8 & 0x2800FFFFFFF7;
    v10 = v8 & 0xFFFFD7FF00000008;
    if (v9)
      v11 = v10 == 0;
    else
      v11 = 0;
    if (!v11)
      return result;
LABEL_16:
    v13 = *((unsigned __int8 *)v5 + 43);
    v12 = (char *)v5 + 43;
    if (v13)
    {
      v14 = 0;
    }
    else
    {
      v14 = 1;
      *v12 = 1;
    }
    *(_BYTE *)(result + 248) |= v14;
    return result;
  }
  if (a3 > 36)
  {
    v20 = v5;
    if ((a3 - 49) < 2)
    {
      do
      {
LABEL_56:
        v29 = v20;
        v20 = (_QWORD *)*v20;
      }
      while (v20);
      if (v29 != v5)
        *v5 = v29;
      if (*((_DWORD *)v29 + 14) == 1)
        goto LABEL_16;
    }
    else
    {
      v6 = v5;
      if ((a3 - 37) < 2)
        goto LABEL_8;
      if (a3 == 52)
      {
        v21 = v5;
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
        if (v22 != v5)
          *v5 = v22;
        v23 = v22[1];
        if (!v23 || (v23 & 0xFFFFFFFCFFFFFFFFLL) != 0)
        {
          v25 = v5;
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
          if (v26 != v5)
            *v5 = v26;
          v17 = v26[1];
          v18 = v17 & 0xFFFFFFF0FFFFFFFFLL;
LABEL_26:
          if (v17 && v18 == 0)
            goto LABEL_16;
        }
      }
    }
  }
  else
  {
    switch(a3)
    {
      case 1:
      case 2:
        v15 = v5;
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
        if (v16 != v5)
          *v5 = v16;
        v17 = v16[1];
        v18 = v17 & 0xFFFFFFFCFFFFFFFFLL;
        goto LABEL_26;
      case 4:
      case 5:
        v20 = v5;
        goto LABEL_56;
      case 6:
      case 7:
        v27 = v5;
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
        if (v28 != v5)
          *v5 = v28;
        if (v28[1] == 0x10000000000)
          goto LABEL_16;
        break;
      case 11:
      case 13:
      case 21:
      case 23:
      case 25:
      case 27:
        v6 = v5;
        goto LABEL_8;
      default:
        return result;
    }
  }
  return result;
}

uint64_t JSC::DFG::FixupPhase::observeUseKindOnNode<(JSC::DFG::UseKind)52>(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  char v13;

  if (*(_WORD *)(a2 + 18) == 15)
  {
    v2 = *(_QWORD **)(a2 + 72);
    v3 = v2;
    do
    {
      v4 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
    if (v4 != v2)
      *v2 = v4;
    v5 = v4;
    do
    {
      v6 = v5;
      v5 = (_QWORD *)*v5;
    }
    while (v5);
    if (v6 != v4)
      *v4 = v6;
    v7 = v6[1];
    if (v7)
      v8 = (v7 & 0xFFFFFFFCFFFFFFFFLL) == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = v4;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)*v9;
      }
      while (v9);
      if (v10 != v4)
        *v4 = v10;
      v11 = v10[1];
      if (v11)
        v12 = (v11 & 0xFFFFFFF0FFFFFFFFLL) == 0;
      else
        v12 = 0;
      if (v12)
      {
        v13 = *((_BYTE *)v4 + 43);
        if (!v13)
          *((_BYTE *)v4 + 43) = 1;
        *(_BYTE *)(result + 248) |= v13 ^ 1;
      }
    }
  }
  return result;
}

uint64_t JSC::DFG::FixupPhase::observeUseKindOnNode<(JSC::DFG::UseKind)49>(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  if (*(_WORD *)(a2 + 18) == 15)
  {
    v2 = *(_QWORD **)(a2 + 72);
    v3 = v2;
    do
    {
      v4 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
    if (v4 != v2)
      *v2 = v4;
    v5 = v4;
    do
    {
      v6 = v5;
      v5 = (_QWORD *)*v5;
    }
    while (v5);
    if (v6 != v4)
      *v4 = v6;
    if (*((_DWORD *)v6 + 14) == 1)
    {
      v7 = *((_BYTE *)v4 + 43);
      if (!v7)
        *((_BYTE *)v4 + 43) = 1;
      *(_BYTE *)(result + 248) |= v7 ^ 1;
    }
  }
  return result;
}

uint64_t JSC::DFG::Graph::addSpeculationMode(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  _BOOL4 v11;
  uint64_t v12;
  _BOOL4 v13;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  BOOL v18;

  v4 = *(_DWORD *)(a2 + 56);
  v5 = *(_QWORD *)((*(_QWORD *)(a2 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
  if (*(_WORD *)(a2 + 18) == 85)
  {
    v6 = (v5 & 0xFFFFFDFFFFFFFFFFLL) != 0 && (v5 & 0xFFFFFCFCFFFFFFFFLL) == 0;
    v7 = 1;
    if (!v6)
    {
      if ((v4 & 0x20) != 0
        || ((v15 = v5 & 0xFFFFFD3FFFFFFFFFLL, v16 = v5 & 0xFFFFFC3CFFFFFFFFLL, v15) ? (v17 = v16 == 0) : (v17 = 0), !v17))
      {
        v7 = 0;
      }
    }
    v8 = *(_QWORD *)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
    v9 = (v8 & 0xFFFFFDFFFFFFFFFFLL) != 0 && (v8 & 0xFFFFFCFCFFFFFFFFLL) == 0;
    v10 = 1;
    if (!v9)
    {
      if ((v4 & 0x20) != 0
        || ((v8 & 0xFFFFFD3FFFFFFFFFLL) != 0 ? (v18 = (v8 & 0xFFFFFC3CFFFFFFFFLL) == 0) : (v18 = 0), !v18))
      {
        v10 = 0;
      }
    }
  }
  else
  {
    v11 = (*(_DWORD *)(a2 + 56) & 0x20) == 0;
    if ((v5 & 0x83800000000) != 0)
      v11 = 0;
    v7 = (v5 & 0x8F800000000) == 0 || v11;
    v12 = *(_QWORD *)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
    v13 = (*(_DWORD *)(a2 + 56) & 0x20) == 0;
    if ((v12 & 0x83800000000) != 0)
      v13 = 0;
    v10 = (v12 & 0x8F800000000) == 0 || v13;
  }
  return JSC::DFG::Graph::addSpeculationMode(a1, a2, v7, v10, a3);
}

uint64_t JSC::DFG::Graph::addSpeculationMode(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t result;
  int v15;
  int v16;
  int v17;
  unsigned int v18;

  v6 = *(_QWORD *)(a2 + 24);
  v7 = v6 & 0xFF00FFFFFFFFFFFFLL;
  if (!a5
    || (*(_BYTE *)((v6 & 0xFF00FFFFFFFFFFFFLL) + 0x45) & 1) != 0
    || (*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0
    && (*(_BYTE *)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x45) & 1) != 0)
  {
    v8 = 1;
    v9 = 1024;
    v10 = 256;
  }
  else
  {
    v8 = 2;
    v9 = 1536;
    v10 = 384;
  }
  v11 = *(unsigned __int16 *)(v7 + 18);
  if (v11 > 0xB5)
  {
    if (v11 == 182 || v11 == 355 || v11 == 348)
      goto LABEL_8;
  }
  else if (v11 < 3)
  {
LABEL_8:
    a3 = a4;
    v12 = *(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL;
    return JSC::DFG::Graph::addImmediateShouldSpeculateInt32(a1, a2, a3, v12, v7, v8);
  }
  v13 = *(unsigned __int16 *)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
  if (v13 > 0xB5)
  {
    if (v13 == 182 || v13 == 355 || v13 == 348)
      goto LABEL_15;
  }
  else if (v13 < 3)
  {
LABEL_15:
    v12 = v7;
    v7 = *(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL;
    return JSC::DFG::Graph::addImmediateShouldSpeculateInt32(a1, a2, a3, v12, v7, v8);
  }
  result = 0;
  if (a3 && a4)
  {
    v15 = *(_DWORD *)(a2 + 56);
    v16 = v15 & 0xFFFE0;
    v17 = *(unsigned __int16 *)(a2 + 18);
    if (v17 != 74)
    {
      v18 = v17 - 57;
      if (v18 > 0x1F || ((1 << v18) & 0xC8781B01) == 0)
        v16 = v15 & 0xF7FE0;
    }
    if ((v16 & v10) != 0)
    {
      if ((v16 & 0x4000) != 0)
        return 0;
    }
    else if ((v16 & v9) != 0 && (v16 & 0x8000) != 0)
    {
      return 0;
    }
    return 2;
  }
  return result;
}

uint64_t JSC::DFG::Graph::addImmediateShouldSpeculateInt32(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  int v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v11;
  double v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t result;
  unsigned int v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;
  unsigned int v25;

  v6 = *(unsigned __int16 *)(a5 + 18);
  if (v6 == 355 || v6 == 348)
  {
    v7 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
    {
      result = 0;
      JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
      LODWORD(qword_1EE342DB8) = 0;
      return result;
    }
  }
  else
  {
    v7 = *(__int128 **)(a5 + 72);
  }
  v8 = *(_QWORD *)v7;
  if (*(_QWORD *)v7 >> 49)
  {
    if (!a3)
      return 0;
    *(_QWORD *)&v9 = v8 - 0x2000000000000;
    if (v8 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL && (*(_DWORD *)(a4 + 56) & 7) != 4)
      return 0;
    if ((v8 & 0xFFFFFFFFFFFFFFFELL) == 6)
      goto LABEL_18;
    v11 = (double)(int)v8;
    *(_QWORD *)&v12 = v8 - 0x2000000000000;
    if (v8 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v11 = v8 - 0x2000000000000;
    if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && v11 == (double)(int)v11
      && ((int)v11 || (*(_QWORD *)&v11 & 0x8000000000000000) == 0)
      || *(_QWORD *)&v11 >> 49 == 32766)
    {
      goto LABEL_18;
    }
    result = 0;
    if (v9 >= -2.81474977e14 && v9 <= 2.81474977e14)
    {
      v20 = *(_DWORD *)(a2 + 56);
      v21 = v20 & 0xFFE0;
      v22 = *(unsigned __int16 *)(a2 + 18);
      if (v22 != 74)
      {
        v25 = v22 - 57;
        if (v25 > 0x1F || ((1 << v25) & 0xC8781B01) == 0)
          v21 = v20 & 0x7FE0;
      }
      if ((v21 & 0x4000) != 0)
        return 0;
      v23 = *(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFLL;
      return trunc(v12) == v12 && v23 < 0x7FF0000000000000;
    }
  }
  else
  {
    result = 0;
    if ((v8 & 0xFFFFFFFFFFFFFFFELL) == 6 && (a3 & 1) != 0)
    {
LABEL_18:
      v13 = *(_DWORD *)(a2 + 56);
      v14 = v13 & 0xFFFE0;
      v15 = *(unsigned __int16 *)(a2 + 18);
      if (v15 != 74)
      {
        v19 = v15 - 57;
        if (v19 > 0x1F || ((1 << v19) & 0xC8781B01) == 0)
          v14 = v13 & 0xF7FE0;
      }
      v16 = (a6 << 7) + 128;
      if (a6 >= 3)
        v16 = 0;
      if ((v16 & v14) != 0)
      {
        if ((v14 & 0x4000) != 0)
          return 0;
      }
      else
      {
        v17 = (a6 << 9) + 512;
        if (a6 >= 3)
          v17 = 0;
        if ((v17 & v14) != 0 && (v14 & 0x8000) != 0)
          return 0;
      }
      return 2;
    }
  }
  return result;
}

void JSC::DFG::FixupPhase::truncateConstantToInt32(JSC::DFG::FixupPhase *this, JSC::DFG::Edge *a2)
{
  int v4;
  __int128 *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];

  v4 = *(unsigned __int16 *)((*(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
  if (v4 == 355 || v4 == 348)
  {
    v5 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
    {
      JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
      LODWORD(qword_1EE342DB8) = 0;
      v7 = 0xFFFE000000000000;
      goto LABEL_14;
    }
  }
  else
  {
    v5 = *(__int128 **)((*(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
  }
  v6 = *(_QWORD *)v5;
  if ((unint64_t)v6 > 0xFFFDFFFFFFFFFFFFLL)
    return;
  v7 = 0xFFFE000000000000;
  v8 = ((unint64_t)(v6 - 0x2000000000000) >> 52) & 0x7FF;
  if ((v8 - 1023) <= 0x53)
  {
    v9 = (unint64_t)(v6 - 0x2000000000000) >> (51
                                                      - ((unint64_t)(v6 - 0x2000000000000) >> 52));
    if (v8 > 0x433)
      LODWORD(v9) = v6 << (((unint64_t)(v6 - 0x2000000000000) >> 52) - 51);
    if (v8 >= 0x41F)
      v10 = v9;
    else
      v10 = (((1 << (((unint64_t)(v6 - 0x2000000000000) >> 52) + 1)) - 1) & v9)
          + (1 << (((unint64_t)(v6 - 0x2000000000000) >> 52) + 1));
    if (v6 >= 0x2000000000000)
      v11 = v10;
    else
      v11 = -v10;
    v7 = v11 | 0xFFFE000000000000;
  }
LABEL_14:
  v12 = *((unsigned int *)this + 20);
  JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v29, *((const JSC::DFG::NodeOrigin **)this + 11));
  v19 = JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), v7, v13, v14, v15, v16, v17, v18);
  *(_QWORD *)a2 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>((uint64_t)this + 96, v12, 0x300000000, 0, (uint64_t)v29, (uint64_t)v19, v20, v21) & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48);
  JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v29, v22, v23, v24, v25, v26, v27, v28);
}

uint64_t JSC::DFG::FixupPhase::attemptToMakeFastStringAdd(JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#1}::operator()(uint64_t result, _QWORD *a2)
{
  _BYTE **v2;
  uint64_t v3;
  BOOL v4;
  char v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v11;
  BOOL v12;

  v2 = (_BYTE **)result;
  v3 = *(_QWORD *)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
  if (v3)
    v4 = (v3 & 0xFFFFFFFFCFFFFFFFLL) == 0;
  else
    v4 = 0;
  if (v4)
    goto LABEL_6;
  if (v3)
    v6 = (v3 & 0xFFFFFFFCFFFFFFFFLL) == 0;
  else
    v6 = 0;
  if (v6)
    return result;
  v7 = v3 & 0xFF00000000;
  v8 = v3 & 0xFFFFFF00FFFFFFFFLL;
  if (v7 && v8 == 0)
    return result;
  result = JSC::DFG::Graph::canOptimizeStringObjectAccess(*(JSC::DFG::Graph **)(*(_QWORD *)(result + 8) + 32), **(const JSC::CodeOrigin ***)(result + 16));
  if ((_DWORD)result)
  {
    v11 = *(_QWORD *)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
    if (v11 == 0x20000 || (v11 ? (v12 = (v11 & 0xFFFFFFFFCFFDFFFFLL) == 0) : (v12 = 0), v12))
    {
LABEL_6:
      v5 = 1;
LABEL_7:
      **v2 = v5;
      return result;
    }
  }
  if (*(_WORD *)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 315)
  {
    v5 = 0;
    v2 += 3;
    goto LABEL_7;
  }
  return result;
}

void JSC::DFG::FixupPhase::attemptToMakeFastStringAdd(JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#2}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  char v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  BOOL v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int16 v105;

  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL;
  v12 = *(_QWORD *)(v11 + 0x40);
  if (v12)
    v13 = (v12 & 0xFFFFFFFFCFFFFFFFLL) == 0;
  else
    v13 = 0;
  if (v13)
  {
    JSC::DFG::FixupPhase::convertStringAddUse<(JSC::DFG::UseKind)21>(*(_QWORD *)a1, **(_QWORD **)(a1 + 8), (unint64_t *)a2, v11, a5, a6, a7, a8);
    return;
  }
  if (v12)
    v14 = (v12 & 0xFFFFFFFCFFFFFFFFLL) == 0;
  else
    v14 = 0;
  if (!v14)
  {
    if ((v12 & 0xFF00000000) != 0 && (v12 & 0xFFFFFF00FFFFFFFFLL) == 0)
    {
      v32 = **(_QWORD **)(a1 + 8);
      if (*(_WORD *)((*(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
      {
        v58 = *(_QWORD **)((*(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        v59 = v58;
        do
        {
          v60 = v59;
          v59 = (_QWORD *)*v59;
        }
        while (v59);
        if (v60 != v58)
          *v58 = v60;
        v61 = v60;
        do
        {
          v62 = v61;
          v61 = (_QWORD *)*v61;
        }
        while (v61);
        if (v62 != v60)
          *v60 = v62;
        if (*((_DWORD *)v62 + 14) == 1)
        {
          v63 = *((_BYTE *)v60 + 43);
          if (!v63)
            *((_BYTE *)v60 + 43) = 1;
          *(_BYTE *)(v10 + 248) |= v63 ^ 1;
        }
      }
      v33 = v10 + 96;
      v34 = *(unsigned int *)(v10 + 80);
      v35 = *(_QWORD *)v32;
      if ((*(_QWORD *)v32 & 1) != 0)
      {
        v99 = v33;
        v79 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
        if ((v35 & 2) != 0
          || ((v80 = *(unsigned int *)((v35 & 0xFFFFFFFF8) + 8), (_DWORD)v80 != 0x3FFFFFFF)
            ? (v81 = (_DWORD)v80 == -1)
            : (v81 = 1),
              v81))
        {
          v82 = 2;
        }
        else if (v80 >> 28)
        {
          v95 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v95 = v79;
          *(_DWORD *)(v95 + 8) = v80;
          v82 = 1;
          v79 = v95;
        }
        else
        {
          v82 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
          v79 = v80 << 36;
        }
        v35 = v79 | v82;
        v33 = v99;
      }
      v103 = v35;
      v36 = *(_QWORD *)(v32 + 8);
      if ((v36 & 1) != 0)
      {
        v100 = v33;
        v83 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
        if ((v36 & 2) != 0
          || ((v84 = *(unsigned int *)((v36 & 0xFFFFFFFF8) + 8), (_DWORD)v84 != 0x3FFFFFFF)
            ? (v85 = (_DWORD)v84 == -1)
            : (v85 = 1),
              v85))
        {
          v86 = 2;
        }
        else if (v84 >> 28)
        {
          v96 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v96 = v83;
          *(_DWORD *)(v96 + 8) = v84;
          v86 = 1;
          v83 = v96;
        }
        else
        {
          v86 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
          v83 = v84 << 36;
        }
        v36 = v83 | v86;
        v33 = v100;
      }
      v104 = v36;
      v105 = *(_WORD *)(v32 + 16);
      v44 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v33, v34, 805306368, 318, (uint64_t)&v103, *(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL | 0xC4000000000000, a7, a8);
      if ((v104 & 1) != 0 && (v104 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v104 & 0xFFFFFFFF8, v37, v38, v39, v40, v41, v42, v43);
      if ((v103 & 1) != 0 && (v103 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v103 & 0xFFFFFFFF8, v37, v38, v39, v40, v41, v42, v43);
      v45 = *(_DWORD *)(v44 + 56);
      if ((v45 & 0xFFFFFFF7) != v45)
        *(_DWORD *)(v44 + 56) = v45 & 0xFFFFFFF7;
    }
    else
    {
      if (*(_WORD *)((*(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 315)
      {
        if (v12 == 0x20000)
        {
          JSC::DFG::FixupPhase::addCheckStructureForOriginalStringObjectUse(*(_QWORD *)a1, (void *)0x25, **(_QWORD **)(a1 + 8), v11, a5, a6, a7, a8);
          JSC::DFG::FixupPhase::convertStringAddUse<(JSC::DFG::UseKind)37>(v10, **(_QWORD **)(a1 + 8), a2, v74, v75, v76, v77, v78);
        }
        else
        {
          if (v12)
            v17 = (v12 & 0xFFFFFFFFCFFDFFFFLL) == 0;
          else
            v17 = 0;
          if (!v17)
          {
            __break(0xC471u);
            JUMPOUT(0x198405578);
          }
          JSC::DFG::FixupPhase::addCheckStructureForOriginalStringObjectUse(*(_QWORD *)a1, (void *)0x26, **(_QWORD **)(a1 + 8), v11, a5, a6, a7, a8);
          v23 = **(_QWORD **)(a1 + 8);
          if (*(_WORD *)((*(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
          {
            v64 = *(_QWORD **)((*(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
            v65 = v64;
            do
            {
              v66 = v65;
              v65 = (_QWORD *)*v65;
            }
            while (v65);
            if (v66 != v64)
              *v64 = v66;
            v67 = v66;
            do
            {
              v68 = v67;
              v67 = (_QWORD *)*v67;
            }
            while (v67);
            if (v68 != v66)
              *v66 = v68;
            v69 = v68[1];
            v70 = v69 & 0x2800FFFFFFF7;
            v71 = v69 & 0xFFFFD7FF00000008;
            if (v70)
              v72 = v71 == 0;
            else
              v72 = 0;
            if (v72)
            {
              v73 = *((_BYTE *)v66 + 43);
              if (!v73)
                *((_BYTE *)v66 + 43) = 1;
              *(_BYTE *)(v10 + 248) |= v73 ^ 1;
            }
          }
          JSC::DFG::FixupPhase::createToString<(JSC::DFG::UseKind)38>(v10, v23, a2, v18, v19, v20, v21, v22);
        }
        return;
      }
      v46 = **(_QWORD **)(a1 + 8);
      v47 = v10 + 96;
      v48 = *(unsigned int *)(v10 + 80);
      v49 = *(_QWORD *)v46;
      if ((*(_QWORD *)v46 & 1) != 0)
      {
        v101 = v47;
        v87 = *(_QWORD *)(v49 & 0xFFFFFFFF8);
        if ((v49 & 2) != 0
          || ((v88 = *(unsigned int *)((v49 & 0xFFFFFFFF8) + 8), (_DWORD)v88 != 0x3FFFFFFF)
            ? (v89 = (_DWORD)v88 == -1)
            : (v89 = 1),
              v89))
        {
          v90 = 2;
        }
        else if (v88 >> 28)
        {
          v97 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v97 = v87;
          *(_DWORD *)(v97 + 8) = v88;
          v90 = 1;
          v87 = v97;
        }
        else
        {
          v90 = *(_QWORD *)(v49 & 0xFFFFFFFF8);
          v87 = v88 << 36;
        }
        v49 = v87 | v90;
        v47 = v101;
      }
      v103 = v49;
      v50 = *(_QWORD *)(v46 + 8);
      if ((v50 & 1) != 0)
      {
        v102 = v47;
        v91 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
        if ((v50 & 2) != 0
          || ((v92 = *(unsigned int *)((v50 & 0xFFFFFFFF8) + 8), (_DWORD)v92 != 0x3FFFFFFF)
            ? (v93 = (_DWORD)v92 == -1)
            : (v93 = 1),
              v93))
        {
          v94 = 2;
        }
        else if (v92 >> 28)
        {
          v98 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v98 = v91;
          *(_DWORD *)(v98 + 8) = v92;
          v94 = 1;
          v91 = v98;
        }
        else
        {
          v94 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
          v91 = v92 << 36;
        }
        v50 = v91 | v94;
        v47 = v102;
      }
      v104 = v50;
      v105 = *(_WORD *)(v46 + 16);
      v44 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v47, v48, 805306368, 318, (uint64_t)&v103, *(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL | 0x60000000000000, a7, a8);
      if ((v104 & 1) != 0 && (v104 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v104 & 0xFFFFFFFF8, v51, v52, v53, v54, v55, v56, v57);
      if ((v103 & 1) != 0 && (v103 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v103 & 0xFFFFFFFF8, v51, v52, v53, v54, v55, v56, v57);
    }
    *(_QWORD *)a2 = v44 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(a2 + 6) << 48);
    return;
  }
  v15 = **(_QWORD **)(a1 + 8);
  if (*(_WORD *)(v11 + 18) == 15)
  {
    v24 = *(_QWORD **)(v11 + 72);
    v25 = v24;
    do
    {
      v26 = v25;
      v25 = (_QWORD *)*v25;
    }
    while (v25);
    if (v26 != v24)
      *v24 = v26;
    v27 = v26;
    do
    {
      v28 = v27;
      v27 = (_QWORD *)*v27;
    }
    while (v27);
    if (v28 != v26)
      *v26 = v28;
    v29 = v28[1];
    if (v29)
      v30 = (v29 & 0xFFFFFFFCFFFFFFFFLL) == 0;
    else
      v30 = 0;
    if (v30)
    {
      v31 = *((_BYTE *)v26 + 43);
      if (!v31)
        *((_BYTE *)v26 + 43) = 1;
      *(_BYTE *)(v10 + 248) |= v31 ^ 1;
    }
  }
  JSC::DFG::FixupPhase::createToString<(JSC::DFG::UseKind)1>(v10, v15, a2, v11, a5, a6, a7, a8);
}

void JSC::DFG::FixupPhase::convertStringAddUse<(JSC::DFG::UseKind)21>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;

  if (*(_WORD *)((*a3 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
  {
    v21 = *(_QWORD **)((*a3 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v22 = v21;
    do
    {
      v23 = v22;
      v22 = (_QWORD *)*v22;
    }
    while (v22);
    if (v23 != v21)
      *v21 = v23;
    v24 = v23;
    do
    {
      v25 = v24;
      v24 = (_QWORD *)*v24;
    }
    while (v24);
    if (v25 != v23)
      *v23 = v25;
    v26 = v25[1];
    v27 = v26 & 0x2800FFFFFFF7;
    v28 = v26 & 0xFFFFD7FF00000008;
    if (v27)
      v29 = v28 == 0;
    else
      v29 = 0;
    if (v29)
    {
      v30 = *((_BYTE *)v23 + 43);
      if (!v30)
        *((_BYTE *)v23 + 43) = 1;
      *(_BYTE *)(a1 + 248) |= v30 ^ 1;
    }
  }
  v10 = a1 + 96;
  v11 = *(unsigned int *)(a1 + 80);
  v12 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v31 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v32 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v32 != 0x3FFFFFFF)
        ? (v33 = (_DWORD)v32 == -1)
        : (v33 = 1),
          v33))
    {
      v34 = 2;
    }
    else if (v32 >> 28)
    {
      v47 = a2;
      v49 = v10;
      v45 = v11;
      v39 = v31;
      v40 = v32;
      v41 = WTF::fastMalloc((WTF *)0x10);
      v11 = v45;
      a2 = v47;
      v31 = v41;
      v10 = v49;
      *(_QWORD *)v31 = v39;
      *(_DWORD *)(v31 + 8) = v40;
      v34 = 1;
    }
    else
    {
      v34 = v31;
      v31 = v32 << 36;
    }
    v12 = v31 | v34;
  }
  v51 = v12;
  v13 = *(_QWORD *)(a2 + 8);
  if ((v13 & 1) != 0)
  {
    v35 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v36 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v36 != 0x3FFFFFFF)
        ? (v37 = (_DWORD)v36 == -1)
        : (v37 = 1),
          v37))
    {
      v38 = 2;
    }
    else if (v36 >> 28)
    {
      v48 = a2;
      v50 = v10;
      v46 = v11;
      v42 = v35;
      v43 = v36;
      v44 = WTF::fastMalloc((WTF *)0x10);
      v11 = v46;
      a2 = v48;
      v35 = v44;
      v10 = v50;
      *(_QWORD *)v35 = v42;
      *(_DWORD *)(v35 + 8) = v43;
      v38 = 1;
    }
    else
    {
      v38 = v35;
      v35 = v36 << 36;
    }
    v13 = v35 | v38;
  }
  v52 = v13;
  v53 = *(_WORD *)(a2 + 16);
  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v10, v11, 0, 24, (uint64_t)&v51, *a3 & 0xFF00FFFFFFFFFFFFLL | 0x54000000000000, a7, a8);
  if ((v52 & 1) != 0 && (v52 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v52 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
  if ((v51 & 1) != 0 && (v51 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v51 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
  *a3 = *a3 & 0xFF03FFFFFFFFFFFFLL | 0x5C000000000000;
}

void JSC::DFG::FixupPhase::convertStringAddUse<(JSC::DFG::UseKind)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  char v15;

  if (*(_WORD *)((*(_QWORD *)a3 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
  {
    v8 = *(_QWORD **)((*(_QWORD *)a3 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v9 = v8;
    do
    {
      v10 = v9;
      v9 = (_QWORD *)*v9;
    }
    while (v9);
    if (v10 != v8)
      *v8 = v10;
    v11 = v10;
    do
    {
      v12 = v11;
      v11 = (_QWORD *)*v11;
    }
    while (v11);
    if (v12 != v10)
      *v10 = v12;
    v13 = v12[1];
    if (v13)
      v14 = (v13 & 0xFFFFFFFCFFFFFFFFLL) == 0;
    else
      v14 = 0;
    if (v14)
    {
      v15 = *((_BYTE *)v10 + 43);
      if (!v15)
        *((_BYTE *)v10 + 43) = 1;
      *(_BYTE *)(a1 + 248) |= v15 ^ 1;
    }
  }
  JSC::DFG::FixupPhase::createToString<(JSC::DFG::UseKind)1>(a1, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::FixupPhase::convertStringAddUse<(JSC::DFG::UseKind)37>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  char v17;

  if (*(_WORD *)((*(_QWORD *)a3 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
  {
    v8 = *(_QWORD **)((*(_QWORD *)a3 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v9 = v8;
    do
    {
      v10 = v9;
      v9 = (_QWORD *)*v9;
    }
    while (v9);
    if (v10 != v8)
      *v8 = v10;
    v11 = v10;
    do
    {
      v12 = v11;
      v11 = (_QWORD *)*v11;
    }
    while (v11);
    if (v12 != v10)
      *v10 = v12;
    v13 = v12[1];
    v14 = v13 & 0x2800FFFFFFF7;
    v15 = v13 & 0xFFFFD7FF00000008;
    if (v14)
      v16 = v15 == 0;
    else
      v16 = 0;
    if (v16)
    {
      v17 = *((_BYTE *)v10 + 43);
      if (!v17)
        *((_BYTE *)v10 + 43) = 1;
      *(_BYTE *)(a1 + 248) |= v17 ^ 1;
    }
  }
  JSC::DFG::FixupPhase::createToString<(JSC::DFG::UseKind)37>(a1, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::FixupPhase::createToString<(JSC::DFG::UseKind)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;

  v11 = a1 + 96;
  v12 = *(unsigned int *)(a1 + 80);
  v13 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v24 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v25 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v25 != 0x3FFFFFFF)
        ? (v26 = (_DWORD)v25 == -1)
        : (v26 = 1),
          v26))
    {
      v27 = 2;
    }
    else if (v25 >> 28)
    {
      v40 = v12;
      v42 = v11;
      v38 = a2;
      v32 = v25;
      v33 = WTF::fastMalloc((WTF *)0x10);
      a2 = v38;
      v12 = v40;
      v34 = v33;
      v11 = v42;
      *(_QWORD *)v34 = v24;
      *(_DWORD *)(v34 + 8) = v32;
      v27 = 1;
      v24 = v34;
    }
    else
    {
      v27 = v24;
      v24 = v25 << 36;
    }
    v13 = v24 | v27;
  }
  v44 = v13;
  v14 = *(_QWORD *)(a2 + 8);
  if ((v14 & 1) != 0)
  {
    v28 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v29 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v29 != 0x3FFFFFFF)
        ? (v30 = (_DWORD)v29 == -1)
        : (v30 = 1),
          v30))
    {
      v31 = 2;
    }
    else if (v29 >> 28)
    {
      v41 = v12;
      v43 = v11;
      v39 = a2;
      v35 = v29;
      v36 = WTF::fastMalloc((WTF *)0x10);
      a2 = v39;
      v12 = v41;
      v37 = v36;
      v11 = v43;
      *(_QWORD *)v37 = v28;
      *(_DWORD *)(v37 + 8) = v35;
      v31 = 1;
      v28 = v37;
    }
    else
    {
      v31 = v28;
      v28 = v29 << 36;
    }
    v14 = v28 | v31;
  }
  v45 = v14;
  v46 = *(_WORD *)(a2 + 16);
  v22 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v11, v12, 805306368, 318, (uint64_t)&v44, *(_QWORD *)a3 & 0xFF00FFFFFFFFFFFFLL | 0x4000000000000, a7, a8);
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  if ((v44 & 1) != 0 && (v44 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v44 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  v23 = *(_DWORD *)(v22 + 56);
  if ((v23 & 0xFFFFFFF7) != v23)
    *(_DWORD *)(v22 + 56) = v23 & 0xFFFFFFF7;
  *(_QWORD *)a3 = v22 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(a3 + 6) << 48);
}

void JSC::DFG::FixupPhase::createToString<(JSC::DFG::UseKind)37>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;

  v11 = a1 + 96;
  v12 = *(unsigned int *)(a1 + 80);
  v13 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v23 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v24 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v24 != 0x3FFFFFFF)
        ? (v25 = (_DWORD)v24 == -1)
        : (v25 = 1),
          v25))
    {
      v26 = 2;
    }
    else if (v24 >> 28)
    {
      v39 = v12;
      v41 = v11;
      v37 = a2;
      v31 = v24;
      v32 = WTF::fastMalloc((WTF *)0x10);
      a2 = v37;
      v12 = v39;
      v33 = v32;
      v11 = v41;
      *(_QWORD *)v33 = v23;
      *(_DWORD *)(v33 + 8) = v31;
      v26 = 1;
      v23 = v33;
    }
    else
    {
      v26 = v23;
      v23 = v24 << 36;
    }
    v13 = v23 | v26;
  }
  v43 = v13;
  v14 = *(_QWORD *)(a2 + 8);
  if ((v14 & 1) != 0)
  {
    v27 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v28 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v28 != 0x3FFFFFFF)
        ? (v29 = (_DWORD)v28 == -1)
        : (v29 = 1),
          v29))
    {
      v30 = 2;
    }
    else if (v28 >> 28)
    {
      v40 = v12;
      v42 = v11;
      v38 = a2;
      v34 = v28;
      v35 = WTF::fastMalloc((WTF *)0x10);
      a2 = v38;
      v12 = v40;
      v36 = v35;
      v11 = v42;
      *(_QWORD *)v36 = v27;
      *(_DWORD *)(v36 + 8) = v34;
      v30 = 1;
      v27 = v36;
    }
    else
    {
      v30 = v27;
      v27 = v28 << 36;
    }
    v14 = v27 | v30;
  }
  v44 = v14;
  v45 = *(_WORD *)(a2 + 16);
  v22 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v11, v12, 805306368, 318, (uint64_t)&v43, *(_QWORD *)a3 & 0xFF00FFFFFFFFFFFFLL | 0x94000000000000, a7, a8);
  if ((v44 & 1) != 0 && (v44 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v44 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  if ((v43 & 1) != 0 && (v43 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v43 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  *(_QWORD *)a3 = v22 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(a3 + 6) << 48);
}

void JSC::DFG::FixupPhase::createToString<(JSC::DFG::UseKind)38>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;

  v11 = a1 + 96;
  v12 = *(unsigned int *)(a1 + 80);
  v13 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v23 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v24 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v24 != 0x3FFFFFFF)
        ? (v25 = (_DWORD)v24 == -1)
        : (v25 = 1),
          v25))
    {
      v26 = 2;
    }
    else if (v24 >> 28)
    {
      v39 = v12;
      v41 = v11;
      v37 = a2;
      v31 = v24;
      v32 = WTF::fastMalloc((WTF *)0x10);
      a2 = v37;
      v12 = v39;
      v33 = v32;
      v11 = v41;
      *(_QWORD *)v33 = v23;
      *(_DWORD *)(v33 + 8) = v31;
      v26 = 1;
      v23 = v33;
    }
    else
    {
      v26 = v23;
      v23 = v24 << 36;
    }
    v13 = v23 | v26;
  }
  v43 = v13;
  v14 = *(_QWORD *)(a2 + 8);
  if ((v14 & 1) != 0)
  {
    v27 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v28 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v28 != 0x3FFFFFFF)
        ? (v29 = (_DWORD)v28 == -1)
        : (v29 = 1),
          v29))
    {
      v30 = 2;
    }
    else if (v28 >> 28)
    {
      v40 = v12;
      v42 = v11;
      v38 = a2;
      v34 = v28;
      v35 = WTF::fastMalloc((WTF *)0x10);
      a2 = v38;
      v12 = v40;
      v36 = v35;
      v11 = v42;
      *(_QWORD *)v36 = v27;
      *(_DWORD *)(v36 + 8) = v34;
      v30 = 1;
      v27 = v36;
    }
    else
    {
      v30 = v27;
      v27 = v28 << 36;
    }
    v14 = v27 | v30;
  }
  v44 = v14;
  v45 = *(_WORD *)(a2 + 16);
  v22 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v11, v12, 805306368, 318, (uint64_t)&v43, *(_QWORD *)a3 & 0xFF00FFFFFFFFFFFFLL | 0x98000000000000, a7, a8);
  if ((v44 & 1) != 0 && (v44 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v44 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  if ((v43 & 1) != 0 && (v43 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v43 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  *(_QWORD *)a3 = v22 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(a3 + 6) << 48);
}

void JSC::DFG::FixupPhase::fixupNode(JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#1}::operator()(uint64_t a1, const JSC::DFG::NodeOrigin **a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _BYTE v19[24];

  v4 = *a3;
  if (*(_WORD *)((*a3 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 15)
  {
    v16 = *(_QWORD **)((*a3 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v17 = v16;
    do
    {
      v18 = v17;
      v17 = (_QWORD *)*v17;
    }
    while (v17);
    if (v18 != v16)
      *v16 = v18;
  }
  *a3 = v4 & 0xFF03FFFFFFFFFFFFLL | 0x60000000000000;
  v5 = a1 + 96;
  v6 = *(unsigned int *)(a1 + 80);
  JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v19, *a2);
  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v5, v6, 0, 24, (uint64_t)v19, *a3 & 0xFF00FFFFFFFFFFFFLL | 0xA0000000000000, v7, v8);
  JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v19, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t JSC::DFG::InsertionSet::insertNode<JSC::DFG::Node>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  __int128 *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *__src;
  void *__srca;
  void *__srcb;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _BYTE v77[22];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v41 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v42 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v42 != 0x3FFFFFFF)
        ? (v43 = (_DWORD)v42 == -1)
        : (v43 = 1),
          v43))
    {
      v44 = 2;
    }
    else if (v42 >> 28)
    {
      v65 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v65 = v41;
      *(_DWORD *)(v65 + 8) = v42;
      v44 = 1;
      v41 = v65;
    }
    else
    {
      v44 = v41;
      v41 = v42 << 36;
    }
    v7 = v41 | v44;
  }
  v8 = *(_QWORD *)(a3 + 8);
  if ((v8 & 1) != 0)
  {
    v45 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
    if ((v8 & 2) != 0
      || ((v46 = *(unsigned int *)((v8 & 0xFFFFFFFF8) + 8), (_DWORD)v46 != 0x3FFFFFFF)
        ? (v47 = (_DWORD)v46 == -1)
        : (v47 = 1),
          v47))
    {
      v48 = 2;
    }
    else if (v46 >> 28)
    {
      v66 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v66 = v45;
      *(_DWORD *)(v66 + 8) = v46;
      v48 = 1;
      v45 = v66;
    }
    else
    {
      v48 = v45;
      v45 = v46 << 36;
    }
    v8 = v45 | v48;
  }
  v9 = *(_WORD *)(a3 + 16);
  v10 = *(_OWORD *)(a3 + 66);
  v75 = *(_OWORD *)(a3 + 50);
  v76 = v10;
  *(_OWORD *)v77 = *(_OWORD *)(a3 + 82);
  *(_QWORD *)&v77[14] = *(_QWORD *)(a3 + 96);
  v11 = *(_OWORD *)(a3 + 34);
  v12 = v7;
  v73 = *(_OWORD *)(a3 + 18);
  v74 = v11;
  if ((v7 & 1) != 0)
  {
    v49 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v50 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v50 != 0x3FFFFFFF)
        ? (v51 = (_DWORD)v50 == -1)
        : (v51 = 1),
          v51))
    {
      v52 = 2;
    }
    else if (v50 >> 28)
    {
      v67 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v67 = v49;
      *(_DWORD *)(v67 + 8) = v50;
      v52 = 1;
      v49 = v67;
    }
    else
    {
      v52 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
      v49 = v50 << 36;
    }
    v12 = v49 | v52;
  }
  v13 = v8;
  if ((v8 & 1) != 0)
  {
    v53 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
    if ((v8 & 2) != 0
      || ((v54 = *(unsigned int *)((v8 & 0xFFFFFFFF8) + 8), (_DWORD)v54 != 0x3FFFFFFF)
        ? (v55 = (_DWORD)v54 == -1)
        : (v55 = 1),
          v55))
    {
      v56 = 2;
    }
    else if (v54 >> 28)
    {
      v68 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v68 = v53;
      *(_DWORD *)(v68 + 8) = v54;
      v56 = 1;
      v53 = v68;
    }
    else
    {
      v56 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
      v53 = v54 << 36;
    }
    v13 = v53 | v56;
  }
  result = WTF::fastMalloc((WTF *)0x68);
  v22 = result;
  v23 = v12;
  if ((v12 & 1) != 0)
  {
    v57 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v58 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v58 != 0x3FFFFFFF)
        ? (v59 = (_DWORD)v58 == -1)
        : (v59 = 1),
          v59))
    {
      v60 = 2;
    }
    else if (v58 >> 28)
    {
      __srca = *(void **)(v12 & 0xFFFFFFFF8);
      result = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)result = __srca;
      *(_DWORD *)(result + 8) = v58;
      v60 = 1;
      v57 = result;
    }
    else
    {
      v60 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v57 = v58 << 36;
    }
    v23 = v57 | v60;
  }
  *(_QWORD *)v22 = v23;
  v24 = v13;
  if ((v13 & 1) != 0)
  {
    v61 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v62 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v62 != 0x3FFFFFFF)
        ? (v63 = (_DWORD)v62 == -1)
        : (v63 = 1),
          v63))
    {
      v64 = 2;
    }
    else if (v62 >> 28)
    {
      __srcb = *(void **)(v13 & 0xFFFFFFFF8);
      result = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)result = __srcb;
      *(_DWORD *)(result + 8) = v62;
      v64 = 1;
      v61 = result;
    }
    else
    {
      v64 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      v61 = v62 << 36;
    }
    v24 = v61 | v64;
  }
  *(_QWORD *)(v22 + 96) = *(_QWORD *)&v77[14];
  v25 = v74;
  *(_OWORD *)(v22 + 18) = v73;
  *(_OWORD *)(v22 + 34) = v25;
  *(_OWORD *)(v22 + 82) = *(_OWORD *)v77;
  v26 = v75;
  *(_OWORD *)(v22 + 66) = v76;
  *(_QWORD *)(v22 + 8) = v24;
  *(_WORD *)(v22 + 16) = v9;
  *(_OWORD *)(v22 + 50) = v26;
  v27 = *(unsigned int *)(v6 + 1060);
  if ((_DWORD)v27)
  {
    v28 = *(_QWORD *)(*(_QWORD *)(v6 + 1048) + 8 * v27 - 8);
    *(_DWORD *)(v6 + 1060) = v27 - 1;
    v29 = *(_QWORD *)(v6 + 1032);
  }
  else
  {
    v28 = *(unsigned int *)(v6 + 1044);
    if ((_DWORD)v28 == *(_DWORD *)(v6 + 1040))
    {
      v35 = v28 + (v28 >> 2);
      if (v35 >= 0x10)
        v36 = v35 + 1;
      else
        v36 = 16;
      if (v36 <= v28 + 1)
        v37 = v28 + 1;
      else
        v37 = v36;
      if (v37 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      __src = *(void **)(v6 + 1032);
      v38 = (void *)WTF::fastMalloc((WTF *)(8 * v37));
      *(_DWORD *)(v6 + 1040) = v37;
      *(_QWORD *)(v6 + 1032) = v38;
      memcpy(v38, __src, 8 * v28);
      if (__src)
      {
        if (*(void **)(v6 + 1032) == __src)
        {
          *(_QWORD *)(v6 + 1032) = 0;
          *(_DWORD *)(v6 + 1040) = 0;
        }
        WTF::fastFree((unint64_t)__src, v15, v16, v17, v18, v19, v20, v21);
      }
      v39 = *(unsigned int *)(v6 + 1044);
      v29 = *(_QWORD *)(v6 + 1032);
      *(_QWORD *)(v29 + 8 * v39) = 0;
      *(_DWORD *)(v6 + 1044) = v39 + 1;
    }
    else
    {
      v29 = *(_QWORD *)(v6 + 1032);
      *(_QWORD *)(v29 + 8 * v28) = 0;
      *(_DWORD *)(v6 + 1044) = v28 + 1;
    }
  }
  *(_DWORD *)(v22 + 20) = v28;
  *(_QWORD *)(v29 + 8 * v28) = v22;
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  *(_QWORD *)(v22 + 64) |= 0x7000000000uLL;
  *(_QWORD *)&v72 = a2;
  *((_QWORD *)&v72 + 1) = v22;
  v30 = (_QWORD *)(a1 + 8);
  v31 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v31 && *(_QWORD *)(*v30 + 16 * v31 - 16) > a2)
  {
    JSC::DFG::InsertionSet::insertSlow(a1, (unint64_t *)&v72, v16, v17, v18, v19, v20, v21);
  }
  else
  {
    if ((_DWORD)v31 == *(_DWORD *)(a1 + 16))
    {
      v40 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v30, (void *)(v31 + 1), (unint64_t)&v72, v17, v18, v19, v20, v21);
      v31 = *(unsigned int *)(a1 + 20);
      v32 = *(_QWORD *)(a1 + 8);
      v33 = *v40;
    }
    else
    {
      v32 = *(_QWORD *)(a1 + 8);
      v33 = v72;
    }
    *(_OWORD *)(v32 + 16 * v31) = v33;
    ++*(_DWORD *)(a1 + 20);
  }
  v34 = *((_QWORD *)&v72 + 1);
  if ((v8 & 1) != 0 && (v8 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v8 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  if ((v7 & 1) != 0 && (v7 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v7 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  return v34;
}

__n128 JSC::DFG::Node::Node(JSC::DFG::Node *this, const JSC::DFG::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  const JSC::DFG::Node *v20;
  const JSC::DFG::Node *v21;
  JSC::DFG::Node *v22;
  JSC::DFG::Node *v23;

  v2 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v8 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v9 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v10 = (_DWORD)v9 == -1)
        : (v10 = 1),
          v10))
    {
      v11 = 2;
    }
    else if (v9 >> 28)
    {
      v20 = a2;
      v22 = this;
      v16 = v8;
      v17 = v9;
      v8 = WTF::fastMalloc((WTF *)0x10);
      a2 = v20;
      this = v22;
      *(_QWORD *)v8 = v16;
      *(_DWORD *)(v8 + 8) = v17;
      v11 = 1;
    }
    else
    {
      v11 = v8;
      v8 = v9 << 36;
    }
    v2 = v8 | v11;
  }
  *(_QWORD *)this = v2;
  v3 = *((_QWORD *)a2 + 1);
  if ((v3 & 1) != 0)
  {
    v12 = *(_QWORD *)(v3 & 0xFFFFFFFF8);
    if ((v3 & 2) != 0
      || ((v13 = *(unsigned int *)((v3 & 0xFFFFFFFF8) + 8), (_DWORD)v13 != 0x3FFFFFFF)
        ? (v14 = (_DWORD)v13 == -1)
        : (v14 = 1),
          v14))
    {
      v15 = 2;
    }
    else if (v13 >> 28)
    {
      v21 = a2;
      v23 = this;
      v18 = v12;
      v19 = v13;
      v12 = WTF::fastMalloc((WTF *)0x10);
      a2 = v21;
      this = v23;
      *(_QWORD *)v12 = v18;
      *(_DWORD *)(v12 + 8) = v19;
      v15 = 1;
    }
    else
    {
      v15 = v12;
      v12 = v13 << 36;
    }
    v3 = v12 | v15;
  }
  *((_QWORD *)this + 1) = v3;
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  v4 = *(_OWORD *)((char *)a2 + 18);
  *(_OWORD *)((char *)this + 34) = *(_OWORD *)((char *)a2 + 34);
  *(_OWORD *)((char *)this + 18) = v4;
  result = *(__n128 *)((char *)a2 + 50);
  v6 = *(_OWORD *)((char *)a2 + 66);
  v7 = *(_OWORD *)((char *)a2 + 82);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *(_OWORD *)((char *)this + 82) = v7;
  *(_OWORD *)((char *)this + 66) = v6;
  *(__n128 *)((char *)this + 50) = result;
  return result;
}

void JSC::DFG::FixupPhase::originForCheck(int64x2_t *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  JSC::DFG::FixupPhase *v25;
  int64x2_t v26;

  v8 = *(_QWORD *)(a2 + 72);
  if (*(_DWORD *)(v8 + 220) <= a3)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 208) + 8 * a3);
    v10 = **(_QWORD **)(a2 + 88);
    if ((v10 & 1) != 0)
    {
      v18 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
      if ((v10 & 2) != 0
        || ((v19 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v19 != 0x3FFFFFFF)
          ? (v20 = (_DWORD)v19 == -1)
          : (v20 = 1),
            v20))
      {
        v21 = 2;
      }
      else if (v19 >> 28)
      {
        v24 = v9;
        v25 = (JSC::DFG::FixupPhase *)this;
        v22 = v18;
        v23 = v19;
        v18 = WTF::fastMalloc((WTF *)0x10);
        v9 = v24;
        this = (int64x2_t *)v25;
        *(_QWORD *)v18 = v22;
        *(_DWORD *)(v18 + 8) = v23;
        v21 = 1;
      }
      else
      {
        v21 = v18;
        v18 = v19 << 36;
      }
      v10 = v18 | v21;
    }
    v26.i64[0] = v10;
    JSC::DFG::NodeOrigin::withSemantic(v9, &v26, a3, a4, a5, a6, a7, a8, this);
    if ((v26.i8[0] & 1) != 0 && (v26.i64[0] & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v26.i64[0] & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  }
}

int64x2_t JSC::DFG::NodeOrigin::withSemantic@<Q0>(uint64_t a1@<X0>, int64x2_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int64x2_t *a9@<X8>)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int64x2_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v10 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 2) != 0)
  {
    result = vdupq_n_s64(2uLL);
    *a9 = result;
    a9[1].i16[0] = 0;
  }
  else
  {
    if ((v10 & 1) != 0)
    {
      v15 = v10 & 0xFFFFFFFF8;
      v16 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
      v17 = *(unsigned int *)(v15 + 8);
      if ((_DWORD)v17 == 0x3FFFFFFF || (_DWORD)v17 == -1)
      {
        v19 = 2;
      }
      else if (v17 >> 28)
      {
        v36 = a1;
        v28 = v16;
        v29 = v17;
        v16 = WTF::fastMalloc((WTF *)0x10);
        a1 = v36;
        *(_QWORD *)v16 = v28;
        *(_DWORD *)(v16 + 8) = v29;
        v19 = 1;
      }
      else
      {
        v19 = v16;
        v16 = v17 << 36;
      }
      v10 = v16 | v19;
    }
    a9->i64[0] = v10;
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & 1) != 0)
    {
      v20 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      if ((v12 & 2) != 0
        || ((v21 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v21 != 0x3FFFFFFF)
          ? (v22 = (_DWORD)v21 == -1)
          : (v22 = 1),
            v22))
      {
        v23 = 2;
      }
      else if (v21 >> 28)
      {
        v35 = v10;
        v37 = a1;
        v30 = v20;
        v31 = v21;
        v32 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v32 = v30;
        *(_DWORD *)(v32 + 8) = v31;
        v23 = 1;
        v20 = v32;
        v10 = v35;
        a1 = v37;
      }
      else
      {
        v23 = v20;
        v20 = v21 << 36;
      }
      v12 = v20 | v23;
    }
    a9->i64[1] = v12;
    a9[1].i16[0] = *(_WORD *)(a1 + 16);
    v13 = a2->i64[0];
    if ((a2->i64[0] & 2) == 0 && a9 != a2)
    {
      if ((v10 & 1) != 0 && (v10 & 0xFFFFFFFF8) != 0)
      {
        WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        v13 = a2->i64[0];
      }
      if ((v13 & 1) != 0)
      {
        v24 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
        if ((v13 & 2) != 0
          || ((v25 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v25 != 0x3FFFFFFF)
            ? (v26 = (_DWORD)v25 == -1)
            : (v26 = 1),
              v26))
        {
          v27 = 2;
        }
        else if (v25 >> 28)
        {
          v33 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8);
          v34 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v34 = v24;
          *(_DWORD *)(v34 + 8) = v33;
          v27 = 1;
          v24 = v34;
        }
        else
        {
          v27 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
          v24 = v25 << 36;
        }
        v13 = v24 | v27;
      }
      a9->i64[0] = v13;
    }
  }
  return result;
}

uint64_t JSC::DFG::FixupPhase::observeUseKindOnNode<(JSC::DFG::UseKind)6>(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  if (*(_WORD *)(a2 + 18) == 15)
  {
    v2 = *(_QWORD **)(a2 + 72);
    v3 = v2;
    do
    {
      v4 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
    if (v4 != v2)
      *v2 = v4;
    v5 = v4;
    do
    {
      v6 = v5;
      v5 = (_QWORD *)*v5;
    }
    while (v5);
    if (v6 != v4)
      *v4 = v6;
    if (v6[1] == 0x10000000000)
    {
      v7 = *((_BYTE *)v4 + 43);
      if (!v7)
        *((_BYTE *)v4 + 43) = 1;
      *(_BYTE *)(result + 248) |= v7 ^ 1;
    }
  }
  return result;
}

uint64_t JSC::DFG::FixupPhase::observeUseKindOnNode<(JSC::DFG::UseKind)25>(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  char v11;

  if (*(_WORD *)(a2 + 18) == 15)
  {
    v2 = *(_QWORD **)(a2 + 72);
    v3 = v2;
    do
    {
      v4 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
    if (v4 != v2)
      *v2 = v4;
    v5 = v4;
    do
    {
      v6 = v5;
      v5 = (_QWORD *)*v5;
    }
    while (v5);
    if (v6 != v4)
      *v4 = v6;
    v7 = v6[1];
    v8 = v7 & 0x2800FFFFFFF7;
    v9 = v7 & 0xFFFFD7FF00000008;
    if (v8)
      v10 = v9 == 0;
    else
      v10 = 0;
    if (v10)
    {
      v11 = *((_BYTE *)v4 + 43);
      if (!v11)
        *((_BYTE *)v4 + 43) = 1;
      *(_BYTE *)(result + 248) |= v11 ^ 1;
    }
  }
  return result;
}

uint64_t JSC::DFG::FixupPhase::checkArray(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int (*a6)(unsigned int *), uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  JSC::Structure *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  BOOL v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  BOOL v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int16 v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  __int16 v174;
  uint64_t v175;
  uint64_t v176;
  __int16 v177;
  uint64_t v178;
  uint64_t v179;
  __int16 v180;
  uint64_t v181;
  uint64_t v182;
  __int16 v183;
  uint64_t v184;
  uint64_t v185;
  __int16 v186;
  uint64_t v187;
  uint64_t v188;
  __int16 v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  __int16 v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  __int16 v197;
  __int128 v198;

  v194 = a2;
  if (a2 != 5)
  {
    v12 = a5;
    JSC::DFG::ArrayMode::originalArrayStructures((JSC::DFG::ArrayMode *)&v194, *(JSC::DFG::Graph **)(a1 + 32), (const JSC::CodeOrigin *)a3, a4, a5, (uint64_t)a6, a7, a8, (uint64_t *)&v190);
    if (v12)
      v12 = v12 & 0xFF00FFFFFFFFFFFFLL | 0x4000000000000;
    v19 = v190 & 0xFFFFFFFFFFFFFFFDLL;
    if ((v194 & 0xF000000) != 0)
    {
      if (v19)
      {
        v57 = (v190 & 1) != 0 ? *(unsigned int *)(v190 & 0xFFFFFFFFFFFFFFFCLL) : (v190 > 3);
        if (v57 == 1)
        {
          v171 = *(unsigned int *)(a1 + 80);
          v58 = *(_QWORD *)a3;
          if ((*(_QWORD *)a3 & 1) != 0)
          {
            v120 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
            if ((v58 & 2) != 0
              || (v121 = *(unsigned int *)((v58 & 0xFFFFFFFF8) + 8), (_DWORD)v121 == 0x3FFFFFFF)
              || (_DWORD)v121 == -1)
            {
              v122 = 2;
            }
            else if (v121 >> 28)
            {
              v156 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v156 = v120;
              *(_DWORD *)(v156 + 8) = v121;
              v122 = 1;
              v120 = v156;
            }
            else
            {
              v122 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
              v120 = v121 << 36;
            }
            v58 = v120 | v122;
          }
          v59 = *(_QWORD *)(a3 + 8);
          if ((v59 & 1) != 0)
          {
            v123 = *(_QWORD *)(v59 & 0xFFFFFFFF8);
            if ((v59 & 2) != 0
              || (v124 = *(unsigned int *)((v59 & 0xFFFFFFFF8) + 8), (_DWORD)v124 == 0x3FFFFFFF)
              || (_DWORD)v124 == -1)
            {
              v125 = 2;
            }
            else if (v124 >> 28)
            {
              v157 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v157 = v123;
              *(_DWORD *)(v157 + 8) = v124;
              v125 = 1;
              v123 = v157;
            }
            else
            {
              v125 = *(_QWORD *)(v59 & 0xFFFFFFFF8);
              v123 = v124 << 36;
            }
            v59 = v123 | v125;
          }
          v60 = (uint64_t *)(a1 + 96);
          v61 = *(_QWORD *)(a1 + 32);
          v62 = (JSC::Structure *)(v190 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v190 & 1) != 0)
          {
            if (*(_DWORD *)v62 == 1)
              v62 = (JSC::Structure *)*((_QWORD *)v62 + 1);
            else
              v62 = 0;
          }
          v170 = *(_WORD *)(a3 + 16);
          JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(v61 + 24) + 280), (unint64_t)v62, (uint64_t)v13, v14, v15, v16, v17, v18);
          JSC::DFG::DesiredWatchpoints::consider((JSC::DFG::DesiredWatchpoints *)(*(_QWORD *)(v61 + 24) + 136), v62, v63, v64, v65, v66, v67, v68);
          v69 = v194;
          v70 = a4 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000;
          v71 = *v60;
          v72 = v58;
          if ((v58 & 1) != 0)
          {
            v165 = v194;
            v168 = *v60;
            v126 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
            if ((v58 & 2) != 0
              || (v127 = *(unsigned int *)((v58 & 0xFFFFFFFF8) + 8), (_DWORD)v127 == 0x3FFFFFFF)
              || (_DWORD)v127 == -1)
            {
              v128 = 2;
            }
            else if (v127 >> 28)
            {
              v158 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v158 = v126;
              *(_DWORD *)(v158 + 8) = v127;
              v128 = 1;
              v126 = v158;
            }
            else
            {
              v128 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
              v126 = v127 << 36;
            }
            v72 = v126 | v128;
            v69 = v165;
            v70 = a4 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000;
            v71 = v168;
            v60 = (uint64_t *)(a1 + 96);
          }
          v195 = v72;
          v73 = v59;
          if ((v59 & 1) != 0)
          {
            v164 = v60;
            v166 = v69;
            v167 = v70;
            v169 = v71;
            v129 = *(_QWORD *)(v59 & 0xFFFFFFFF8);
            if ((v59 & 2) != 0
              || (v130 = *(unsigned int *)((v59 & 0xFFFFFFFF8) + 8), (_DWORD)v130 == 0x3FFFFFFF)
              || (_DWORD)v130 == -1)
            {
              v131 = 2;
            }
            else if (v130 >> 28)
            {
              v159 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v159 = v129;
              *(_DWORD *)(v159 + 8) = v130;
              v131 = 1;
              v129 = v159;
            }
            else
            {
              v131 = *(_QWORD *)(v59 & 0xFFFFFFFF8);
              v129 = v130 << 36;
            }
            v73 = v129 | v131;
            v69 = v166;
            v70 = v167;
            v71 = v169;
            v60 = v164;
          }
          v196 = v73;
          v197 = v170;
          v74 = JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge>(v71, 0, 0x92u, (uint64_t)&v195, (uint64_t)v62, v69, v70, v12);
          *(_QWORD *)&v198 = v171;
          *((_QWORD *)&v198 + 1) = v74;
          v75 = (_QWORD *)(a1 + 104);
          v76 = *(unsigned int *)(a1 + 116);
          if ((_DWORD)v76 && *(_QWORD *)(*v75 + 16 * v76 - 16) > v171)
          {
            JSC::DFG::InsertionSet::insertSlow((uint64_t)v60, (unint64_t *)&v198, v25, v26, v27, v28, v29, v30);
          }
          else
          {
            if ((_DWORD)v76 == *(_DWORD *)(a1 + 112))
            {
              v83 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v75, (void *)(v76 + 1), (unint64_t)&v198, v26, v27, v28, v29, v30);
              v76 = *(unsigned int *)(a1 + 116);
              v77 = *(_QWORD *)(a1 + 104);
              v78 = *v83;
            }
            else
            {
              v77 = *(_QWORD *)(a1 + 104);
              v78 = v198;
            }
            *(_OWORD *)(v77 + 16 * v76) = v78;
            ++*(_DWORD *)(a1 + 116);
          }
          if ((v196 & 1) != 0 && (v196 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v196 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
          if ((v195 & 1) != 0 && (v195 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v195 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
          if ((v59 & 1) != 0 && (v59 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v59 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
          if ((v58 & 1) == 0)
            goto LABEL_10;
          v56 = v58 & 0xFFFFFFFF8;
          if ((v58 & 0xFFFFFFFF8) == 0)
            goto LABEL_10;
          goto LABEL_36;
        }
      }
      v80 = *(unsigned int *)(a1 + 80);
      v81 = *(_QWORD *)a3;
      if ((*(_QWORD *)a3 & 1) != 0)
      {
        v138 = *(_QWORD *)(v81 & 0xFFFFFFFF8);
        if ((v81 & 2) != 0
          || ((v139 = *(unsigned int *)((v81 & 0xFFFFFFFF8) + 8), (_DWORD)v139 != 0x3FFFFFFF)
            ? (v140 = (_DWORD)v139 == -1)
            : (v140 = 1),
              v140))
        {
          v141 = 2;
        }
        else if (v139 >> 28)
        {
          v162 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v162 = v138;
          *(_DWORD *)(v162 + 8) = v139;
          v141 = 1;
          v138 = v162;
        }
        else
        {
          v141 = *(_QWORD *)(v81 & 0xFFFFFFFF8);
          v138 = v139 << 36;
        }
        v81 = v138 | v141;
      }
      v187 = v81;
      v82 = *(_QWORD *)(a3 + 8);
      if ((v82 & 1) != 0)
      {
        v142 = *(_QWORD *)(v82 & 0xFFFFFFFF8);
        if ((v82 & 2) != 0
          || ((v143 = *(unsigned int *)((v82 & 0xFFFFFFFF8) + 8), (_DWORD)v143 != 0x3FFFFFFF)
            ? (v144 = (_DWORD)v143 == -1)
            : (v144 = 1),
              v144))
        {
          v145 = 2;
        }
        else if (v143 >> 28)
        {
          v163 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v163 = v142;
          *(_DWORD *)(v163 + 8) = v143;
          v145 = 1;
          v142 = v163;
        }
        else
        {
          v145 = *(_QWORD *)(v82 & 0xFFFFFFFF8);
          v142 = v143 << 36;
        }
        v82 = v142 | v145;
      }
      v188 = v82;
      v189 = *(_WORD *)(a3 + 16);
      JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge>(a1 + 96, v80, 0, 0x91u, (uint64_t)&v187, v194, a4 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000, v12);
      if ((v188 & 1) != 0 && (v188 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v188 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
      v31 = v187;
      if ((v187 & 1) == 0)
        goto LABEL_10;
    }
    else
    {
      v20 = *(unsigned int *)(a1 + 80);
      v21 = *(_QWORD *)a3;
      if (v19)
      {
        if ((v21 & 1) != 0)
        {
          v90 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
          if ((v21 & 2) != 0
            || ((v91 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v91 != 0x3FFFFFFF)
              ? (v92 = (_DWORD)v91 == -1)
              : (v92 = 1),
                v92))
          {
            v93 = 2;
          }
          else if (v91 >> 28)
          {
            v148 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v148 = v90;
            *(_DWORD *)(v148 + 8) = v91;
            v93 = 1;
            v90 = v148;
          }
          else
          {
            v93 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
            v90 = v91 << 36;
          }
          v21 = v90 | v93;
        }
        v184 = v21;
        v22 = *(_QWORD *)(a3 + 8);
        if ((v22 & 1) != 0)
        {
          v94 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
          if ((v22 & 2) != 0
            || ((v95 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v95 != 0x3FFFFFFF)
              ? (v96 = (_DWORD)v95 == -1)
              : (v96 = 1),
                v96))
          {
            v97 = 2;
          }
          else if (v95 >> 28)
          {
            v149 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v149 = v94;
            *(_DWORD *)(v149 + 8) = v95;
            v97 = 1;
            v94 = v149;
          }
          else
          {
            v97 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
            v94 = v95 << 36;
          }
          v22 = v94 | v97;
        }
        v185 = v22;
        v186 = *(_WORD *)(a3 + 16);
        v23 = JSC::DFG::Graph::addStructureSet(*(_QWORD *)(a1 + 32), &v190, v13, v14, v15, v16, v17, v18);
        JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>(a1 + 96, v20, 0, 0x84u, (uint64_t)&v184, (uint64_t)v23, a4 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000);
        if ((v185 & 1) != 0 && (v185 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v185 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
        v31 = v184;
        if ((v184 & 1) == 0)
          goto LABEL_10;
      }
      else
      {
        if ((v21 & 1) != 0)
        {
          v112 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
          if ((v21 & 2) != 0
            || ((v113 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v113 != 0x3FFFFFFF)
              ? (v114 = (_DWORD)v113 == -1)
              : (v114 = 1),
                v114))
          {
            v115 = 2;
          }
          else if (v113 >> 28)
          {
            v154 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v154 = v112;
            *(_DWORD *)(v154 + 8) = v113;
            v115 = 1;
            v112 = v154;
          }
          else
          {
            v115 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
            v112 = v113 << 36;
          }
          v21 = v112 | v115;
        }
        v181 = v21;
        v55 = *(_QWORD *)(a3 + 8);
        if ((v55 & 1) != 0)
        {
          v116 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
          if ((v55 & 2) != 0
            || ((v117 = *(unsigned int *)((v55 & 0xFFFFFFFF8) + 8), (_DWORD)v117 != 0x3FFFFFFF)
              ? (v118 = (_DWORD)v117 == -1)
              : (v118 = 1),
                v118))
          {
            v119 = 2;
          }
          else if (v117 >> 28)
          {
            v155 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v155 = v116;
            *(_DWORD *)(v155 + 8) = v117;
            v119 = 1;
            v116 = v155;
          }
          else
          {
            v119 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
            v116 = v117 << 36;
          }
          v55 = v116 | v119;
        }
        v182 = v55;
        v183 = *(_WORD *)(a3 + 16);
        JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>(a1 + 96, v20, 0, 0x8Cu, (uint64_t)&v181, v194, a4 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000);
        if ((v182 & 1) != 0 && (v182 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v182 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
        v31 = v181;
        if ((v181 & 1) == 0)
          goto LABEL_10;
      }
    }
    v56 = v31 & 0xFFFFFFFF8;
    if ((v31 & 0xFFFFFFFF8) == 0)
    {
LABEL_10:
      if ((v190 & 1) == 0)
        goto LABEL_11;
      v54 = v190 & 0xFFFFFFFFFFFFFFFCLL;
      goto LABEL_64;
    }
LABEL_36:
    WTF::fastFree(v56, v24, v25, v26, v27, v28, v29, v30);
    goto LABEL_10;
  }
  v51 = *(unsigned int *)(a1 + 80);
  v52 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v104 = *(_QWORD *)(v52 & 0xFFFFFFFF8);
    if ((v52 & 2) != 0
      || ((v105 = *(unsigned int *)((v52 & 0xFFFFFFFF8) + 8), (_DWORD)v105 != 0x3FFFFFFF)
        ? (v106 = (_DWORD)v105 == -1)
        : (v106 = 1),
          v106))
    {
      v107 = 2;
    }
    else if (v105 >> 28)
    {
      v152 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v152 = v104;
      *(_DWORD *)(v152 + 8) = v105;
      v107 = 1;
      v104 = v152;
    }
    else
    {
      v107 = *(_QWORD *)(v52 & 0xFFFFFFFF8);
      v104 = v105 << 36;
    }
    v52 = v104 | v107;
  }
  v191 = v52;
  v53 = *(_QWORD *)(a3 + 8);
  if ((v53 & 1) != 0)
  {
    v108 = *(_QWORD *)(v53 & 0xFFFFFFFF8);
    if ((v53 & 2) != 0
      || ((v109 = *(unsigned int *)((v53 & 0xFFFFFFFF8) + 8), (_DWORD)v109 != 0x3FFFFFFF)
        ? (v110 = (_DWORD)v109 == -1)
        : (v110 = 1),
          v110))
    {
      v111 = 2;
    }
    else if (v109 >> 28)
    {
      v153 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v153 = v108;
      *(_DWORD *)(v153 + 8) = v109;
      v111 = 1;
      v108 = v153;
    }
    else
    {
      v111 = *(_QWORD *)(v53 & 0xFFFFFFFF8);
      v108 = v109 << 36;
    }
    v53 = v108 | v111;
  }
  v192 = v53;
  v193 = *(_WORD *)(a3 + 16);
  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(a1 + 96, v51, 0, 24, (uint64_t)&v191, a4 & 0xFF00FFFFFFFFFFFFLL | 0x54000000000000, a7, a8);
  if ((v192 & 1) != 0 && (v192 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v192 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
  if ((v191 & 1) != 0)
  {
    v54 = v191 & 0xFFFFFFFF8;
    if ((v191 & 0xFFFFFFFF8) != 0)
LABEL_64:
      WTF::fastFree(v54, v24, v25, v26, v27, v28, v29, v30);
  }
LABEL_11:
  if (!a6(&v194))
    return 0;
  v34 = a1 + 96;
  if (v194 - 6 <= 5)
  {
    v35 = *(unsigned int *)(a1 + 80);
    v36 = *(_QWORD *)a3;
    if ((*(_QWORD *)a3 & 1) != 0)
    {
      v84 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
      if ((v36 & 2) != 0
        || (v85 = *(unsigned int *)((v36 & 0xFFFFFFFF8) + 8), (_DWORD)v85 == 0x3FFFFFFF)
        || (_DWORD)v85 == -1)
      {
        v86 = 2;
      }
      else if (v85 >> 28)
      {
        v146 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v146 = v84;
        *(_DWORD *)(v146 + 8) = v85;
        v86 = 1;
        v84 = v146;
      }
      else
      {
        v86 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
        v84 = v85 << 36;
      }
      v36 = v84 | v86;
    }
    v178 = v36;
    v37 = *(_QWORD *)(a3 + 8);
    if ((v37 & 1) != 0)
    {
      v87 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
      if ((v37 & 2) != 0
        || (v88 = *(unsigned int *)((v37 & 0xFFFFFFFF8) + 8), (_DWORD)v88 == 0x3FFFFFFF)
        || (_DWORD)v88 == -1)
      {
        v89 = 2;
      }
      else if (v88 >> 28)
      {
        v147 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v147 = v87;
        *(_DWORD *)(v147 + 8) = v88;
        v89 = 1;
        v87 = v147;
      }
      else
      {
        v89 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
        v87 = v88 << 36;
      }
      v37 = v87 | v89;
    }
    v179 = v37;
    v180 = *(_WORD *)(a3 + 16);
    v45 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v34, v35, 0, 138, (uint64_t)&v178, a4 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000, v32, v33);
    if ((v179 & 1) != 0 && (v179 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v179 & 0xFFFFFFFF8, v38, v39, v40, v41, v42, v43, v44);
    v46 = v178;
    if ((v178 & 1) == 0)
      return v45;
LABEL_23:
    if ((v46 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v46 & 0xFFFFFFFF8, v38, v39, v40, v41, v42, v43, v44);
    return v45;
  }
  v48 = *(unsigned int *)(a1 + 80);
  v49 = *(_QWORD *)a3;
  if (v194 == 5)
  {
    if ((v49 & 1) != 0)
    {
      v132 = *(_QWORD *)(v49 & 0xFFFFFFFF8);
      if ((v49 & 2) != 0
        || (v133 = *(unsigned int *)((v49 & 0xFFFFFFFF8) + 8), (_DWORD)v133 == 0x3FFFFFFF)
        || (_DWORD)v133 == -1)
      {
        v134 = 2;
      }
      else if (v133 >> 28)
      {
        v160 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v160 = v132;
        *(_DWORD *)(v160 + 8) = v133;
        v134 = 1;
        v132 = v160;
      }
      else
      {
        v134 = *(_QWORD *)(v49 & 0xFFFFFFFF8);
        v132 = v133 << 36;
      }
      v49 = v132 | v134;
    }
    v175 = v49;
    v79 = *(_QWORD *)(a3 + 8);
    if ((v79 & 1) != 0)
    {
      v135 = *(_QWORD *)(v79 & 0xFFFFFFFF8);
      if ((v79 & 2) != 0
        || (v136 = *(unsigned int *)((v79 & 0xFFFFFFFF8) + 8), (_DWORD)v136 == 0x3FFFFFFF)
        || (_DWORD)v136 == -1)
      {
        v137 = 2;
      }
      else if (v136 >> 28)
      {
        v161 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v161 = v135;
        *(_DWORD *)(v161 + 8) = v136;
        v137 = 1;
        v135 = v161;
      }
      else
      {
        v137 = *(_QWORD *)(v79 & 0xFFFFFFFF8);
        v135 = v136 << 36;
      }
      v79 = v135 | v137;
    }
    v176 = v79;
    v177 = *(_WORD *)(a3 + 16);
    v45 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v34, v48, 0, 148, (uint64_t)&v175, a4 & 0xFF00FFFFFFFFFFFFLL | 0x5C000000000000, v32, v33);
    if ((v176 & 1) != 0 && (v176 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v176 & 0xFFFFFFFF8, v38, v39, v40, v41, v42, v43, v44);
    v46 = v175;
    if ((v175 & 1) != 0)
      goto LABEL_23;
  }
  else
  {
    if ((v49 & 1) != 0)
    {
      v98 = *(_QWORD *)(v49 & 0xFFFFFFFF8);
      if ((v49 & 2) != 0
        || (v99 = *(unsigned int *)((v49 & 0xFFFFFFFF8) + 8), (_DWORD)v99 == 0x3FFFFFFF)
        || (_DWORD)v99 == -1)
      {
        v100 = 2;
      }
      else if (v99 >> 28)
      {
        v150 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v150 = v98;
        *(_DWORD *)(v150 + 8) = v99;
        v100 = 1;
        v98 = v150;
      }
      else
      {
        v100 = *(_QWORD *)(v49 & 0xFFFFFFFF8);
        v98 = v99 << 36;
      }
      v49 = v98 | v100;
    }
    v172 = v49;
    v50 = *(_QWORD *)(a3 + 8);
    if ((v50 & 1) != 0)
    {
      v101 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
      if ((v50 & 2) != 0
        || (v102 = *(unsigned int *)((v50 & 0xFFFFFFFF8) + 8), (_DWORD)v102 == 0x3FFFFFFF)
        || (_DWORD)v102 == -1)
      {
        v103 = 2;
      }
      else if (v102 >> 28)
      {
        v151 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v151 = v101;
        *(_DWORD *)(v151 + 8) = v102;
        v103 = 1;
        v101 = v151;
      }
      else
      {
        v103 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
        v101 = v102 << 36;
      }
      v50 = v101 | v103;
    }
    v173 = v50;
    v174 = *(_WORD *)(a3 + 16);
    v45 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>(v34, v48, 0, 0x93u, (uint64_t)&v172, v194, a4 & 0xFF00FFFFFFFFFFFFLL | 0x24000000000000);
    if ((v173 & 1) != 0 && (v173 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v173 & 0xFFFFFFFF8, v38, v39, v40, v41, v42, v43, v44);
    v46 = v172;
    if ((v172 & 1) != 0)
      goto LABEL_23;
  }
  return v45;
}

uint64_t JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge>(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 v36;
  unsigned __int16 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  unsigned __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v9 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 1) != 0)
  {
    v20 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v21 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v21 != 0x3FFFFFFF)
        ? (v22 = (_DWORD)v21 == -1)
        : (v22 = 1),
          v22))
    {
      v23 = 2;
    }
    else if (v21 >> 28)
    {
      v44 = a8;
      v46 = a1;
      v38 = a7;
      v40 = a5;
      v42 = a6;
      v36 = a3;
      v34 = a4;
      v28 = v21;
      v29 = WTF::fastMalloc((WTF *)0x10);
      a4 = v34;
      a5 = v40;
      a6 = v42;
      a3 = v36;
      a7 = v38;
      v30 = v29;
      a8 = v44;
      a1 = v46;
      *(_QWORD *)v30 = v20;
      *(_DWORD *)(v30 + 8) = v28;
      v23 = 1;
      v20 = v30;
    }
    else
    {
      v23 = v20;
      v20 = v21 << 36;
    }
    v9 = v20 | v23;
  }
  v48 = v9;
  v10 = *(_QWORD *)(a4 + 8);
  if ((v10 & 1) != 0)
  {
    v24 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    if ((v10 & 2) != 0
      || ((v25 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v25 != 0x3FFFFFFF)
        ? (v26 = (_DWORD)v25 == -1)
        : (v26 = 1),
          v26))
    {
      v27 = 2;
    }
    else if (v25 >> 28)
    {
      v45 = a8;
      v47 = a1;
      v39 = a7;
      v41 = a5;
      v43 = a6;
      v37 = a3;
      v35 = a4;
      v31 = v25;
      v32 = WTF::fastMalloc((WTF *)0x10);
      a4 = v35;
      a5 = v41;
      a6 = v43;
      a3 = v37;
      a7 = v39;
      v33 = v32;
      a8 = v45;
      a1 = v47;
      *(_QWORD *)v33 = v24;
      *(_DWORD *)(v33 + 8) = v31;
      v27 = 1;
      v24 = v33;
    }
    else
    {
      v27 = v24;
      v24 = v25 << 36;
    }
    v10 = v24 | v27;
  }
  v49 = v10;
  v50 = *(_WORD *)(a4 + 16);
  v54 = a6;
  v55 = a5;
  v52 = a8;
  v53 = a7;
  v51 = a3;
  v18 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &>(a1 + 1032, &v51, (uint64_t)&v48, &v55, &v54, &v53, &v52);
  if ((v49 & 1) != 0 && (v49 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v49 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  if ((v48 & 1) != 0 && (v48 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v48 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  *(_QWORD *)(v18 + 64) |= a2;
  return v18;
}

uint64_t JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &>(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;

  v14 = WTF::fastMalloc((WTF *)0x68);
  v15 = *a2;
  v16 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v35 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || ((v36 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v36 != 0x3FFFFFFF)
        ? (v37 = (_DWORD)v36 == -1)
        : (v37 = 1),
          v37))
    {
      v38 = 2;
    }
    else if (v36 >> 28)
    {
      v47 = v15;
      v43 = v36;
      v44 = WTF::fastMalloc((WTF *)0x10);
      v15 = v47;
      *(_QWORD *)v44 = v35;
      *(_DWORD *)(v44 + 8) = v43;
      v38 = 1;
      v35 = v44;
    }
    else
    {
      v38 = v35;
      v35 = v36 << 36;
    }
    v16 = v35 | v38;
  }
  v49 = v16;
  v17 = *(_QWORD *)(a3 + 8);
  if ((v17 & 1) != 0)
  {
    v39 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
    if ((v17 & 2) != 0
      || ((v40 = *(unsigned int *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v40 != 0x3FFFFFFF)
        ? (v41 = (_DWORD)v40 == -1)
        : (v41 = 1),
          v41))
    {
      v42 = 2;
    }
    else if (v40 >> 28)
    {
      v48 = v15;
      v45 = v40;
      v46 = WTF::fastMalloc((WTF *)0x10);
      v15 = v48;
      *(_QWORD *)v46 = v39;
      *(_DWORD *)(v46 + 8) = v45;
      v42 = 1;
      v39 = v46;
    }
    else
    {
      v42 = v39;
      v39 = v40 << 36;
    }
    v17 = v39 | v42;
  }
  v50 = v17;
  v51 = *(_WORD *)(a3 + 16);
  result = JSC::DFG::Node::Node(v14, v15, (uint64_t)&v49, *a4, *a5, *a6, *a7, 0);
  v26 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v26)
  {
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v26 - 8);
    *(_DWORD *)(a1 + 28) = v26 - 1;
    v28 = *(_QWORD **)a1;
  }
  else
  {
    v27 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v27 == *(_DWORD *)(a1 + 8))
    {
      v29 = v27 + (v27 >> 2);
      if (v29 >= 0x10)
        v30 = v29 + 1;
      else
        v30 = 16;
      if (v30 <= v27 + 1)
        v31 = v27 + 1;
      else
        v31 = v30;
      if (v31 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v32 = *(_QWORD **)a1;
      v33 = (void *)WTF::fastMalloc((WTF *)(8 * v31));
      *(_DWORD *)(a1 + 8) = v31;
      *(_QWORD *)a1 = v33;
      memcpy(v33, v32, 8 * v27);
      if (v32)
      {
        if (*(_QWORD **)a1 == v32)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v32, v19, v20, v21, v22, v23, v24, v25);
      }
      v34 = *(unsigned int *)(a1 + 12);
      v28 = *(_QWORD **)a1;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = 0;
      *(_DWORD *)(a1 + 12) = v34 + 1;
    }
    else
    {
      v28 = *(_QWORD **)a1;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = 0;
      *(_DWORD *)(a1 + 12) = v27 + 1;
    }
  }
  *(_DWORD *)(v14 + 20) = v27;
  v28[v27] = v14;
  if ((v50 & 1) != 0 && (v50 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v50 & 0xFFFFFFFF8, v19, v20, v21, v22, v23, v24, v25);
  if ((v49 & 1) != 0 && (v49 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v49 & 0xFFFFFFFF8, v19, v20, v21, v22, v23, v24, v25);
  return v14;
}

uint64_t JSC::DFG::Node::Node(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;

  v8 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
    if ((v8 & 2) != 0
      || ((v11 = *(unsigned int *)((v8 & 0xFFFFFFFF8) + 8), (_DWORD)v11 != 0x3FFFFFFF)
        ? (v12 = (_DWORD)v11 == -1)
        : (v12 = 1),
          v12))
    {
      v13 = 2;
    }
    else if (v11 >> 28)
    {
      v36 = a2;
      v38 = result;
      v26 = a8;
      v28 = a5;
      v32 = a7;
      v34 = a4;
      v24 = a6;
      v30 = a3;
      v18 = v10;
      v19 = v11;
      v20 = WTF::fastMalloc((WTF *)0x10);
      a3 = v30;
      a7 = v32;
      a6 = v24;
      a8 = v26;
      a4 = v34;
      a5 = v28;
      v10 = v20;
      a2 = v36;
      result = v38;
      *(_QWORD *)v10 = v18;
      *(_DWORD *)(v10 + 8) = v19;
      v13 = 1;
    }
    else
    {
      v13 = v10;
      v10 = v11 << 36;
    }
    v8 = v10 | v13;
  }
  *(_QWORD *)result = v8;
  v9 = *(_QWORD *)(a3 + 8);
  if ((v9 & 1) != 0)
  {
    v14 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v15 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v15 != 0x3FFFFFFF)
        ? (v16 = (_DWORD)v15 == -1)
        : (v16 = 1),
          v16))
    {
      v17 = 2;
    }
    else if (v15 >> 28)
    {
      v37 = a2;
      v39 = result;
      v27 = a8;
      v29 = a5;
      v33 = a7;
      v35 = a4;
      v25 = a6;
      v31 = a3;
      v21 = v14;
      v22 = v15;
      v23 = WTF::fastMalloc((WTF *)0x10);
      a3 = v31;
      a7 = v33;
      a6 = v25;
      a8 = v27;
      a4 = v35;
      a5 = v29;
      v14 = v23;
      a2 = v37;
      result = v39;
      *(_QWORD *)v14 = v21;
      *(_DWORD *)(v14 + 8) = v22;
      v17 = 1;
    }
    else
    {
      v17 = v14;
      v14 = v15 << 36;
    }
    v9 = v14 | v17;
  }
  *(_QWORD *)(result + 8) = v9;
  *(_WORD *)(result + 16) = *(_WORD *)(a3 + 16);
  *(_DWORD *)(result + 20) = -1;
  *(_QWORD *)(result + 24) = a6;
  *(_QWORD *)(result + 32) = a7;
  *(_QWORD *)(result + 40) = a8;
  *(_QWORD *)(result + 48) = 0x13FFFFFFFLL;
  *(_DWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = a4;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 80) = a5;
  *(_WORD *)(result + 18) = a2;
  if (a2 >= 0x1B1)
  {
    __break(0xC471u);
    JUMPOUT(0x198407CB8);
  }
  *(_DWORD *)(result + 56) = dword_19915579C[(__int16)a2];
  return result;
}

void JSC::DFG::FixupPhase::insertCheck<(JSC::DFG::UseKind)6>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  char v29;
  int64x2_t v30;

  if (*(_WORD *)(a2 + 18) == 15)
  {
    v24 = *(_QWORD **)(a2 + 72);
    v25 = v24;
    do
    {
      v26 = v25;
      v25 = (_QWORD *)*v25;
    }
    while (v25);
    if (v26 != v24)
      *v24 = v26;
    v27 = v26;
    do
    {
      v28 = v27;
      v27 = (_QWORD *)*v27;
    }
    while (v27);
    if (v28 != v26)
      *v26 = v28;
    if (v28[1] == 0x10000000000)
    {
      v29 = *((_BYTE *)v26 + 43);
      if (!v29)
        *((_BYTE *)v26 + 43) = 1;
      *(_BYTE *)(a1 + 248) |= v29 ^ 1;
    }
  }
  v9 = *(_DWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(_DWORD *)(v10 + 220);
  if (v11 <= v9)
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x198407E68);
  }
  v12 = *(_QWORD *)(v10 + 208);
  while (1)
  {
    v13 = v9;
    if (*(_BYTE *)(*(_QWORD *)(v12 + 8 * v9) + 16))
      break;
    --v9;
    if (v11 <= (int)v13 - 1)
      goto LABEL_21;
  }
  v14 = a1 + 96;
  JSC::DFG::FixupPhase::originForCheck(&v30, a1, v9, a4, a5, a6, a7, a8);
  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v14, v13, 0, 24, (uint64_t)&v30, a2 & 0xFF00FFFFFFFFFFFFLL | 0x18000000000000, v15, v16);
  if ((v30.i8[8] & 1) != 0 && (v30.i64[1] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v30.i64[1] & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  if ((v30.i8[0] & 1) != 0 && (v30.i64[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v30.i64[0] & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
}

void JSC::DFG::FixupPhase::insertCheck<(JSC::DFG::UseKind)4>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  char v29;
  int64x2_t v30;

  if (*(_WORD *)(a2 + 18) == 15)
  {
    v24 = *(_QWORD **)(a2 + 72);
    v25 = v24;
    do
    {
      v26 = v25;
      v25 = (_QWORD *)*v25;
    }
    while (v25);
    if (v26 != v24)
      *v24 = v26;
    v27 = v26;
    do
    {
      v28 = v27;
      v27 = (_QWORD *)*v27;
    }
    while (v27);
    if (v28 != v26)
      *v26 = v28;
    if (*((_DWORD *)v28 + 14) == 1)
    {
      v29 = *((_BYTE *)v26 + 43);
      if (!v29)
        *((_BYTE *)v26 + 43) = 1;
      *(_BYTE *)(a1 + 248) |= v29 ^ 1;
    }
  }
  v9 = *(_DWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(_DWORD *)(v10 + 220);
  if (v11 <= v9)
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x198407FB8);
  }
  v12 = *(_QWORD *)(v10 + 208);
  while (1)
  {
    v13 = v9;
    if (*(_BYTE *)(*(_QWORD *)(v12 + 8 * v9) + 16))
      break;
    --v9;
    if (v11 <= (int)v13 - 1)
      goto LABEL_21;
  }
  v14 = a1 + 96;
  JSC::DFG::FixupPhase::originForCheck(&v30, a1, v9, a4, a5, a6, a7, a8);
  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v14, v13, 0, 24, (uint64_t)&v30, a2 & 0xFF00FFFFFFFFFFFFLL | 0x10000000000000, v15, v16);
  if ((v30.i8[8] & 1) != 0 && (v30.i64[1] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v30.i64[1] & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  if ((v30.i8[0] & 1) != 0 && (v30.i64[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v30.i64[0] & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
}

void JSC::DFG::FixupPhase::addStringReplacePrimordialChecks(JSC::DFG::Node *)::{lambda(JSC::JSValue,WTF::UniquedStringImpl *)#1}::operator()(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  __int128 *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int16 v125;
  void *__srca;
  int __srcb;
  int __srcc;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int16 v138;
  __int128 v139;

  v10 = *a1;
  JSC::DFG::DesiredIdentifiers::ensure((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*a1 + 32) + 24) + 240), a3, a3, a4, a5, a6, a7, a8);
  v132 = *(unsigned int *)(v10 + 80);
  v11 = (uint64_t **)a1[1];
  v12 = *v11;
  v13 = **v11;
  v135 = a2;
  if ((v13 & 1) != 0)
  {
    v63 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v64 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v64 != 0x3FFFFFFF)
        ? (v65 = (_DWORD)v64 == -1)
        : (v65 = 1),
          v65))
    {
      v66 = 2;
    }
    else if (v64 >> 28)
    {
      v109 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v109 = v63;
      *(_DWORD *)(v109 + 8) = v64;
      v66 = 1;
      v63 = v109;
    }
    else
    {
      v66 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      v63 = v64 << 36;
    }
    v13 = v63 | v66;
  }
  v14 = v12[1];
  if ((v14 & 1) != 0)
  {
    v67 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v68 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v68 != 0x3FFFFFFF)
        ? (v69 = (_DWORD)v68 == -1)
        : (v69 = 1),
          v69))
    {
      v70 = 2;
    }
    else if (v68 >> 28)
    {
      v110 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v110 = v67;
      *(_DWORD *)(v110 + 8) = v68;
      v70 = 1;
      v67 = v110;
    }
    else
    {
      v70 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      v67 = v68 << 36;
    }
    v14 = v67 | v70;
  }
  v125 = *((_WORD *)v12 + 8);
  v15 = *(_QWORD *)a1[2];
  v16 = *(_QWORD *)(v10 + 96);
  v17 = v13;
  if ((v13 & 1) != 0)
  {
    v71 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v72 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v72 != 0x3FFFFFFF)
        ? (v73 = (_DWORD)v72 == -1)
        : (v73 = 1),
          v73))
    {
      v74 = 2;
    }
    else if (v72 >> 28)
    {
      v111 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v111 = v71;
      *(_DWORD *)(v111 + 8) = v72;
      v74 = 1;
      v71 = v111;
    }
    else
    {
      v74 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      v71 = v72 << 36;
    }
    v17 = v71 | v74;
  }
  v18 = v14;
  v131 = v17;
  if ((v14 & 1) != 0)
  {
    v75 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v76 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v76 != 0x3FFFFFFF)
        ? (v77 = (_DWORD)v76 == -1)
        : (v77 = 1),
          v77))
    {
      v78 = 2;
    }
    else if (v76 >> 28)
    {
      v112 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v112 = v75;
      *(_DWORD *)(v112 + 8) = v76;
      v78 = 1;
      v75 = v112;
      v17 = v131;
    }
    else
    {
      v78 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      v75 = v76 << 36;
    }
    v18 = v75 | v78;
  }
  v19 = v17;
  if ((v17 & 1) != 0)
  {
    v79 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
    if ((v17 & 2) != 0
      || ((v80 = *(unsigned int *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v80 != 0x3FFFFFFF)
        ? (v81 = (_DWORD)v80 == -1)
        : (v81 = 1),
          v81))
    {
      v82 = 2;
    }
    else if (v80 >> 28)
    {
      v113 = v18;
      v114 = WTF::fastMalloc((WTF *)0x10);
      v18 = v113;
      *(_QWORD *)v114 = v79;
      *(_DWORD *)(v114 + 8) = v80;
      v82 = 1;
      v79 = v114;
    }
    else
    {
      v82 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
      v79 = v80 << 36;
    }
    v19 = v79 | v82;
  }
  v20 = v18;
  if ((v18 & 1) != 0)
  {
    v83 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
    if ((v18 & 2) != 0
      || ((v84 = *(unsigned int *)((v18 & 0xFFFFFFFF8) + 8), (_DWORD)v84 != 0x3FFFFFFF)
        ? (v85 = (_DWORD)v84 == -1)
        : (v85 = 1),
          v85))
    {
      v86 = 2;
    }
    else if (v84 >> 28)
    {
      v115 = v18;
      v116 = WTF::fastMalloc((WTF *)0x10);
      v18 = v115;
      *(_QWORD *)v116 = v83;
      *(_DWORD *)(v116 + 8) = v84;
      v86 = 1;
      v83 = v116;
    }
    else
    {
      v86 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
      v83 = v84 << 36;
    }
    v20 = v83 | v86;
  }
  v130 = v18;
  v133 = v13;
  v134 = a1;
  v28 = WTF::fastMalloc((WTF *)0x68);
  v29 = v19;
  if ((v19 & 1) != 0)
  {
    v87 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v88 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v88 != 0x3FFFFFFF)
        ? (v89 = (_DWORD)v88 == -1)
        : (v89 = 1),
          v89))
    {
      v90 = 2;
    }
    else if (v88 >> 28)
    {
      v117 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v117 = v87;
      *(_DWORD *)(v117 + 8) = v88;
      v90 = 1;
      v87 = v117;
    }
    else
    {
      v90 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
      v87 = v88 << 36;
    }
    v29 = v87 | v90;
  }
  v30 = v15 & 0xFF00FFFFFFFFFFFFLL;
  v31 = v20;
  if ((v20 & 1) != 0)
  {
    v91 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
    if ((v20 & 2) != 0
      || ((v92 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v92 != 0x3FFFFFFF)
        ? (v93 = (_DWORD)v92 == -1)
        : (v93 = 1),
          v93))
    {
      v94 = 2;
    }
    else if (v92 >> 28)
    {
      v118 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v118 = v91;
      *(_DWORD *)(v118 + 8) = v92;
      v94 = 1;
      v91 = v118;
    }
    else
    {
      v94 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v91 = v92 << 36;
    }
    v31 = v91 | v94;
  }
  v32 = a3 | 1;
  v33 = v30 | 0x20000000000000;
  v34 = v29;
  if ((v29 & 1) != 0)
  {
    v95 = *(_QWORD *)(v29 & 0xFFFFFFFF8);
    if ((v29 & 2) != 0
      || ((v96 = *(unsigned int *)((v29 & 0xFFFFFFFF8) + 8), (_DWORD)v96 != 0x3FFFFFFF)
        ? (v97 = (_DWORD)v96 == -1)
        : (v97 = 1),
          v97))
    {
      v98 = 2;
    }
    else if (v96 >> 28)
    {
      v123 = *(_QWORD *)(v29 & 0xFFFFFFFF8);
      __srcb = *(_DWORD *)((v29 & 0xFFFFFFFF8) + 8);
      v119 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v119 = v123;
      *(_DWORD *)(v119 + 8) = __srcb;
      v98 = 1;
      v95 = v119;
    }
    else
    {
      v98 = *(_QWORD *)(v29 & 0xFFFFFFFF8);
      v95 = v96 << 36;
    }
    v34 = v95 | v98;
  }
  *(_QWORD *)v28 = v34;
  v35 = v31;
  if ((v31 & 1) != 0)
  {
    v99 = *(_QWORD *)(v31 & 0xFFFFFFFF8);
    if ((v31 & 2) != 0
      || ((v100 = *(unsigned int *)((v31 & 0xFFFFFFFF8) + 8), (_DWORD)v100 != 0x3FFFFFFF)
        ? (v101 = (_DWORD)v100 == -1)
        : (v101 = 1),
          v101))
    {
      v102 = 2;
    }
    else if (v100 >> 28)
    {
      v124 = *(_QWORD *)(v31 & 0xFFFFFFFF8);
      __srcc = *(_DWORD *)((v31 & 0xFFFFFFFF8) + 8);
      v120 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v120 = v124;
      *(_DWORD *)(v120 + 8) = __srcc;
      v102 = 1;
      v99 = v120;
    }
    else
    {
      v102 = *(_QWORD *)(v31 & 0xFFFFFFFF8);
      v99 = v100 << 36;
    }
    v35 = v99 | v102;
  }
  *(_QWORD *)(v28 + 8) = v35;
  *(_WORD *)(v28 + 16) = v125;
  *(_DWORD *)(v28 + 20) = -1;
  *(_QWORD *)(v28 + 32) = 0;
  *(_QWORD *)(v28 + 40) = 0;
  *(_QWORD *)(v28 + 24) = v33;
  *(_QWORD *)(v28 + 48) = 0x13FFFFFFFLL;
  *(_QWORD *)(v28 + 64) = 0;
  *(_QWORD *)(v28 + 72) = v32;
  *(_QWORD *)(v28 + 88) = 0;
  *(_QWORD *)(v28 + 96) = 0;
  *(_QWORD *)(v28 + 80) = 4;
  *(_WORD *)(v28 + 18) = 109;
  *(_DWORD *)(v28 + 56) = 1;
  v36 = *(unsigned int *)(v16 + 1060);
  if ((_DWORD)v36)
  {
    v37 = *(_QWORD *)(*(_QWORD *)(v16 + 1048) + 8 * v36 - 8);
    *(_DWORD *)(v16 + 1060) = v36 - 1;
    v38 = *(_QWORD *)(v16 + 1032);
  }
  else
  {
    v37 = *(unsigned int *)(v16 + 1044);
    if ((_DWORD)v37 == *(_DWORD *)(v16 + 1040))
    {
      v57 = v37 + (v37 >> 2);
      if (v57 >= 0x10)
        v58 = v57 + 1;
      else
        v58 = 16;
      if (v58 <= v37 + 1)
        v59 = v37 + 1;
      else
        v59 = v58;
      if (v59 >> 29)
      {
        __break(0xC471u);
        return;
      }
      __srca = *(void **)(v16 + 1032);
      v60 = (void *)WTF::fastMalloc((WTF *)(8 * v59));
      *(_DWORD *)(v16 + 1040) = v59;
      *(_QWORD *)(v16 + 1032) = v60;
      memcpy(v60, __srca, 8 * v37);
      if (__srca)
      {
        if (*(void **)(v16 + 1032) == __srca)
        {
          *(_QWORD *)(v16 + 1032) = 0;
          *(_DWORD *)(v16 + 1040) = 0;
        }
        WTF::fastFree((unint64_t)__srca, v21, v22, v23, v24, v25, v26, v27);
      }
      v61 = *(unsigned int *)(v16 + 1044);
      v38 = *(_QWORD *)(v16 + 1032);
      *(_QWORD *)(v38 + 8 * v61) = 0;
      *(_DWORD *)(v16 + 1044) = v61 + 1;
    }
    else
    {
      v38 = *(_QWORD *)(v16 + 1032);
      *(_QWORD *)(v38 + 8 * v37) = 0;
      *(_DWORD *)(v16 + 1044) = v37 + 1;
    }
  }
  *(_DWORD *)(v28 + 20) = v37;
  *(_QWORD *)(v38 + 8 * v37) = v28;
  if ((v31 & 1) != 0 && (v31 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v31 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
  if ((v29 & 1) != 0 && (v29 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v29 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
  if ((v20 & 1) != 0 && (v20 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v20 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
  if ((v19 & 1) != 0 && (v19 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v19 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
  *(_QWORD *)&v139 = v132;
  *((_QWORD *)&v139 + 1) = v28;
  v39 = (_QWORD *)(v10 + 104);
  v40 = *(unsigned int *)(v10 + 116);
  if ((_DWORD)v40 && *(_QWORD *)(*v39 + 16 * v40 - 16) > v132)
  {
    v41 = v10 + 96;
    JSC::DFG::InsertionSet::insertSlow(v10 + 96, (unint64_t *)&v139, v22, v23, v24, v25, v26, v27);
  }
  else
  {
    v41 = v10 + 96;
    if ((_DWORD)v40 == *(_DWORD *)(v10 + 112))
    {
      v62 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v39, (void *)(v40 + 1), (unint64_t)&v139, v23, v24, v25, v26, v27);
      v40 = *(unsigned int *)(v10 + 116);
      v42 = *(_QWORD *)(v10 + 104);
      v43 = *v62;
    }
    else
    {
      v42 = *(_QWORD *)(v10 + 104);
      v43 = v139;
    }
    *(_OWORD *)(v42 + 16 * v40) = v43;
    ++*(_DWORD *)(v10 + 116);
  }
  v44 = *((_QWORD *)&v139 + 1);
  if ((v130 & 1) != 0 && (v130 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v130 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
  if ((v131 & 1) != 0 && (v131 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v131 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
  if ((v133 & 1) != 0 && (v133 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v133 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
  v45 = *(unsigned int *)(v10 + 80);
  v46 = *(_QWORD *)v134[1];
  v47 = *(_QWORD *)v46;
  if ((*(_QWORD *)v46 & 1) != 0)
  {
    v103 = *(_QWORD *)(v47 & 0xFFFFFFFF8);
    if ((v47 & 2) != 0
      || (v104 = *(unsigned int *)((v47 & 0xFFFFFFFF8) + 8), (_DWORD)v104 == 0x3FFFFFFF)
      || (_DWORD)v104 == -1)
    {
      v105 = 2;
    }
    else if (v104 >> 28)
    {
      v121 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v121 = v103;
      *(_DWORD *)(v121 + 8) = v104;
      v105 = 1;
      v103 = v121;
    }
    else
    {
      v105 = *(_QWORD *)(v47 & 0xFFFFFFFF8);
      v103 = v104 << 36;
    }
    v47 = v103 | v105;
  }
  v136 = v47;
  v48 = *(_QWORD *)(v46 + 8);
  if ((v48 & 1) != 0)
  {
    v106 = *(_QWORD *)(v48 & 0xFFFFFFFF8);
    if ((v48 & 2) != 0
      || (v107 = *(unsigned int *)((v48 & 0xFFFFFFFF8) + 8), (_DWORD)v107 == 0x3FFFFFFF)
      || (_DWORD)v107 == -1)
    {
      v108 = 2;
    }
    else if (v107 >> 28)
    {
      v122 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v122 = v106;
      *(_DWORD *)(v122 + 8) = v107;
      v108 = 1;
      v106 = v122;
    }
    else
    {
      v108 = *(_QWORD *)(v48 & 0xFFFFFFFF8);
      v106 = v107 << 36;
    }
    v48 = v106 | v108;
  }
  v137 = v48;
  v138 = *(_WORD *)(v46 + 16);
  v49 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 32), v135, v22, v23, v24, v25, v26, v27);
  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>(v41, v45, 0, 0xB6u, (uint64_t)&v136, (uint64_t)v49, v44 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000);
  if ((v137 & 1) != 0 && (v137 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v137 & 0xFFFFFFFF8, v50, v51, v52, v53, v54, v55, v56);
  if ((v136 & 1) != 0 && (v136 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v136 & 0xFFFFFFFF8, v50, v51, v52, v53, v54, v55, v56);
}

void JSC::DFG::FixupPhase::insertCheck<(JSC::DFG::UseKind)21>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64x2_t v34;

  if (*(_WORD *)(a2 + 18) == 15)
  {
    v9 = *(_QWORD **)(a2 + 72);
    v10 = v9;
    do
    {
      v11 = v10;
      v10 = (_QWORD *)*v10;
    }
    while (v10);
    if (v11 != v9)
      *v9 = v11;
    v12 = v11;
    do
    {
      v13 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
    if (v13 != v11)
      *v11 = v13;
    v14 = v13[1];
    v15 = v14 & 0x2800FFFFFFF7;
    v16 = v14 & 0xFFFFD7FF00000008;
    if (v15)
      v17 = v16 == 0;
    else
      v17 = 0;
    if (v17)
    {
      v18 = *((_BYTE *)v11 + 43);
      if (!v18)
        *((_BYTE *)v11 + 43) = 1;
      *(_BYTE *)(a1 + 248) |= v18 ^ 1;
    }
  }
  v19 = *(_DWORD *)(a1 + 80);
  v20 = *(_QWORD *)(a1 + 72);
  v21 = *(_DWORD *)(v20 + 220);
  if (v21 <= v19)
  {
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x198408960);
  }
  v22 = *(_QWORD *)(v20 + 208);
  while (1)
  {
    v23 = v19;
    if (*(_BYTE *)(*(_QWORD *)(v22 + 8 * v19) + 16))
      break;
    --v19;
    if (v21 <= (int)v23 - 1)
      goto LABEL_22;
  }
  v24 = a1 + 96;
  JSC::DFG::FixupPhase::originForCheck(&v34, a1, v19, a4, a5, a6, a7, a8);
  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v24, v23, 0, 24, (uint64_t)&v34, a2 & 0xFF00FFFFFFFFFFFFLL | 0x54000000000000, v25, v26);
  if ((v34.i8[8] & 1) != 0 && (v34.i64[1] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v34.i64[1] & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
  if ((v34.i8[0] & 1) != 0 && (v34.i64[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v34.i64[0] & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
}

void JSC::DFG::FixupPhase::insertCheck<(JSC::DFG::UseKind)25>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t v23;

  JSC::DFG::FixupPhase::observeUseKindOnNode<(JSC::DFG::UseKind)25>(a1, a2);
  v9 = *(_DWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(_DWORD *)(v10 + 220);
  if (v11 <= v9)
  {
LABEL_5:
    __break(0xC471u);
    JUMPOUT(0x198408A40);
  }
  v12 = *(_QWORD *)(v10 + 208);
  while (1)
  {
    v13 = v9;
    if (*(_BYTE *)(*(_QWORD *)(v12 + 8 * v9) + 16))
      break;
    --v9;
    if (v11 <= (int)v13 - 1)
      goto LABEL_5;
  }
  JSC::DFG::FixupPhase::originForCheck(&v23, a1, v9, v4, v5, v6, v7, v8);
  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(a1 + 96, v13, 0, 24, (uint64_t)&v23, a2 & 0xFF00FFFFFFFFFFFFLL | 0x64000000000000, v14, v15);
  if ((v23.i8[8] & 1) != 0 && (v23.i64[1] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v23.i64[1] & 0xFFFFFFFF8, v16, v17, v18, v19, v20, v21, v22);
  if ((v23.i8[0] & 1) != 0 && (v23.i64[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v23.i64[0] & 0xFFFFFFFF8, v16, v17, v18, v19, v20, v21, v22);
}

uint64_t JSC::DFG::Graph::globalThisObjectFor(uint64_t a1, const JSC::CodeOrigin *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  JSC::CodeOrigin::CodeOrigin(&v18, a2);
  v16 = JSC::DFG::Graph::globalObjectFor(a1, &v18, v3, v4, v5, v6, v7, v8);
  if ((v18 & 1) != 0 && (v18 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v18 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  return *(_QWORD *)(v16 + 64);
}

uint64_t JSC::DFG::FixupPhase::fixupNode(JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#6}::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;

  v2 = *a2;
  if ((*a2 & 0xFC000000000000) == 0x10000000000000 && (*(_WORD *)((v2 & 0xFF00FFFFFFFFFFFFLL) + 0x44) & 0x8F8) == 0)
  {
    v2 = v2 & 0xFF03FFFFFFFFFFFFLL | 0x4000000000000;
    *a2 = v2;
  }
  return JSC::DFG::FixupPhase::observeUseKindOnNode(a1, v2 & 0xFF00FFFFFFFFFFFFLL, (v2 >> 50) & 0x3F);
}

uint64_t JSC::JSGlobalObject::numberPrototype(unint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(_QWORD *);
  _QWORD *v5;
  _QWORD v6[3];

  v1 = *(_QWORD *)(this + 1536);
  if ((v1 & 1) != 0)
  {
    v4 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v5 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v5 = (_QWORD *)(this - 16);
    v6[0] = *v5;
    v6[1] = this;
    v6[2] = this + 1536;
    v1 = v4(v6);
  }
  v2 = *(_QWORD *)(v1 + 48);
  if (v2 == 2)
    return 0;
  else
    return v2;
}

uint64_t JSC::JSGlobalObject::BOOLeanPrototype(unint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(_QWORD *);
  _QWORD *v5;
  _QWORD v6[3];

  v1 = *(_QWORD *)(this + 1472);
  if ((v1 & 1) != 0)
  {
    v4 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v5 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v5 = (_QWORD *)(this - 16);
    v6[0] = *v5;
    v6[1] = this;
    v6[2] = this + 1472;
    v1 = v4(v6);
  }
  v2 = *(_QWORD *)(v1 + 48);
  if (v2 == 2)
    return 0;
  else
    return v2;
}

uint64_t JSC::DFG::FixupPhase::attemptToMakeCallDOM(JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#1}::operator()(uint64_t result, uint64_t a2)
{
  int *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(int **)result;
  v3 = **(_DWORD **)result;
  if (v3)
  {
    if (v3 == 1)
    {
      v4 = *(_QWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      v5 = v4 & 0x2C00FFFFFFF7;
      goto LABEL_4;
    }
    v7 = *(_QWORD *)(**(_QWORD **)(result + 16) + 8 * (v3 - 2) + 24);
    switch(v7)
    {
      case 0x10000000000:
        v4 = *(_QWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
        v5 = v4 & 0x10000000000;
LABEL_4:
        if (v4)
          v6 = v5 == 0;
        else
          v6 = 0;
        if (!v6)
          goto LABEL_10;
LABEL_9:
        **(_BYTE **)(result + 8) = 0;
LABEL_10:
        *v2 = v3 + 1;
        return result;
      case 0x300000000:
        v9 = *(_QWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
        if (!v9 || (v9 & 0x300000000) != 0)
          goto LABEL_10;
        goto LABEL_9;
      case 0x30000000:
        v8 = *(_QWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
        if (!v8 || (v8 & 0x30000000) != 0)
          goto LABEL_10;
        goto LABEL_9;
    }
    result = 4657;
    __break(0xC471u);
  }
  return result;
}

unint64_t *JSC::DFG::FixupPhase::fixupChecksInBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::Edge &)#1}::operator()(unint64_t *result)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  int v4;
  uint64_t v5;

  v1 = *result;
  v2 = (*result >> 50) & 0x3F;
  if ((_DWORD)v2)
    v3 = (_DWORD)v2 == 4;
  else
    v3 = 1;
  if (v3)
  {
    v4 = *(_DWORD *)((v1 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7;
    if (v4 == 3)
    {
      v5 = 0xC4000000000000;
      goto LABEL_14;
    }
LABEL_7:
    if (v4 != 5)
      return result;
LABEL_19:
    v5 = 0xD0000000000000;
    goto LABEL_14;
  }
  if ((v2 - 49) < 2)
  {
    if ((*(_DWORD *)((v1 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) != 3)
    {
      if ((*(_DWORD *)((v1 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) == 5)
        goto LABEL_19;
      if ((_DWORD)v2 == 49)
      {
        v5 = 0x10000000000000;
        goto LABEL_14;
      }
    }
  }
  else if ((_DWORD)v2 == 5)
  {
    v4 = *(_DWORD *)((v1 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7;
    if (v4 == 3)
    {
      v5 = 0xC8000000000000;
LABEL_14:
      *result = v5 | v1 & 0xFF03FFFFFFFFFFFFLL;
      return result;
    }
    goto LABEL_7;
  }
  return result;
}

void JSC::DFG::FixupPhase::fixupChecksInBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::Edge &)#2}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  __int128 *v54;
  unint64_t v55;
  double v56;
  __int128 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  BOOL v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  __int128 *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  BOOL v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  JSC::DFG::Node *v128;
  uint64_t v129;
  uint64_t v130;
  BOOL v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  BOOL v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  BOOL v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  BOOL v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  BOOL v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  BOOL v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  BOOL v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  BOOL v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __int16 v192;
  uint64_t v193;
  uint64_t v194;
  __int16 v195;
  uint64_t v196;
  uint64_t v197;
  __int16 v198;
  uint64_t v199;
  uint64_t v200;
  __int16 v201;
  uint64_t v202;
  uint64_t v203;
  __int16 v204;
  _BYTE v205[24];
  uint64_t v206;
  uint64_t v207;
  __int16 v208;
  uint64_t v209;
  uint64_t v210;
  __int16 v211;
  uint64_t v212;
  uint64_t v213;
  __int16 v214;
  uint64_t v215;
  uint64_t v216;
  __int16 v217;

  v10 = *a1;
  v11 = *(_QWORD *)a2;
  v12 = (*(_QWORD *)a2 >> 50) & 0x3FLL;
  if ((v12 - 49) < 3)
  {
    if ((*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) == 3)
      goto LABEL_5;
    if (*(unsigned __int16 *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u
      && **(_QWORD **)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x48) >> 49)
    {
      v48 = a1[2];
      v49 = *(unsigned int *)a1[1];
      v50 = *(_QWORD *)v48;
      if ((*(_QWORD *)v48 & 1) != 0)
      {
        v119 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
        if ((v50 & 2) != 0
          || ((v120 = *(unsigned int *)((v50 & 0xFFFFFFFF8) + 8), (_DWORD)v120 != 0x3FFFFFFF)
            ? (v121 = (_DWORD)v120 == -1)
            : (v121 = 1),
              v121))
        {
          v122 = 2;
        }
        else if (v120 >> 28)
        {
          v176 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v176 = v119;
          *(_DWORD *)(v176 + 8) = v120;
          v122 = 1;
          v119 = v176;
        }
        else
        {
          v122 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
          v119 = v120 << 36;
        }
        v50 = v119 | v122;
      }
      v215 = v50;
      v51 = *(_QWORD *)(v48 + 8);
      if ((v51 & 1) != 0)
      {
        v123 = *(_QWORD *)(v51 & 0xFFFFFFFF8);
        if ((v51 & 2) != 0
          || ((v124 = *(unsigned int *)((v51 & 0xFFFFFFFF8) + 8), (_DWORD)v124 != 0x3FFFFFFF)
            ? (v125 = (_DWORD)v124 == -1)
            : (v125 = 1),
              v125))
        {
          v126 = 2;
        }
        else if (v124 >> 28)
        {
          v177 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v177 = v123;
          *(_DWORD *)(v177 + 8) = v124;
          v126 = 1;
          v123 = v177;
        }
        else
        {
          v126 = *(_QWORD *)(v51 & 0xFFFFFFFF8);
          v123 = v124 << 36;
        }
        v51 = v123 | v126;
      }
      v216 = v51;
      v217 = *(_WORD *)(v48 + 16);
      v52 = *(_QWORD *)(v10 + 32);
      v53 = *(unsigned __int16 *)((*(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v53 == 355 || v53 == 348)
      {
        v54 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
        {
          JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
          LODWORD(qword_1EE342DB8) = 0;
        }
      }
      else
      {
        v54 = *(__int128 **)((*(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
      }
      v55 = *(_QWORD *)v54;
      if (v55 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v56 = v55 - 0x2000000000000;
      else
        v56 = (double)(int)v55;
      v57 = JSC::DFG::Graph::freeze(v52, *(_QWORD *)&v56 + 0x2000000000000, a3, a4, a5, a6, a7, a8);
      v37 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(v10 + 96, v49, 0x7000000000, 1, (uint64_t)&v215, (uint64_t)v57, v58, v59);
      if ((v216 & 1) != 0 && (v216 & 0xFFFFFFFF8) != 0)
      {
        v127 = v37;
        WTF::fastFree(v216 & 0xFFFFFFFF8, v38, v39, v40, v41, v42, a7, a8);
        v37 = v127;
      }
      v43 = v215;
      if ((v215 & 1) == 0)
        goto LABEL_42;
    }
    else
    {
      if ((*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) == 5)
      {
        v79 = a1[2];
        v80 = *(unsigned int *)a1[1];
        v81 = *(_QWORD *)v79;
        if ((*(_QWORD *)v79 & 1) != 0)
        {
          v154 = *(_QWORD *)(v81 & 0xFFFFFFFF8);
          if ((v81 & 2) != 0
            || ((v155 = *(unsigned int *)((v81 & 0xFFFFFFFF8) + 8), (_DWORD)v155 != 0x3FFFFFFF)
              ? (v156 = (_DWORD)v155 == -1)
              : (v156 = 1),
                v156))
          {
            v157 = 2;
          }
          else if (v155 >> 28)
          {
            v184 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v184 = v154;
            *(_DWORD *)(v184 + 8) = v155;
            v157 = 1;
            v154 = v184;
          }
          else
          {
            v157 = *(_QWORD *)(v81 & 0xFFFFFFFF8);
            v154 = v155 << 36;
          }
          v81 = v154 | v157;
        }
        v212 = v81;
        v82 = *(_QWORD *)(v79 + 8);
        if ((v82 & 1) != 0)
        {
          v158 = *(_QWORD *)(v82 & 0xFFFFFFFF8);
          if ((v82 & 2) != 0
            || ((v159 = *(unsigned int *)((v82 & 0xFFFFFFFF8) + 8), (_DWORD)v159 != 0x3FFFFFFF)
              ? (v160 = (_DWORD)v159 == -1)
              : (v160 = 1),
                v160))
          {
            v161 = 2;
          }
          else if (v159 >> 28)
          {
            v185 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v185 = v158;
            *(_DWORD *)(v185 + 8) = v159;
            v161 = 1;
            v158 = v185;
          }
          else
          {
            v161 = *(_QWORD *)(v82 & 0xFFFFFFFF8);
            v158 = v159 << 36;
          }
          v82 = v158 | v161;
        }
        v213 = v82;
        v214 = *(_WORD *)(v79 + 16);
        v60 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v10 + 96, v80, 0x1000000000, 58, (uint64_t)&v212, *(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL | 0xD0000000000000, a7, a8);
        if ((v213 & 1) != 0 && (v213 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v213 & 0xFFFFFFFF8, v38, v39, v40, v41, v42, a7, a8);
        v43 = v212;
        if ((v212 & 1) == 0)
          goto LABEL_70;
        goto LABEL_55;
      }
      v28 = *(_QWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      v29 = (v28 & 0xFFFFFF00FFFFFFFFLL) != 0 || (v28 & 0xFF00000000) == 0;
      v30 = 0xA8000000000000;
      if (!v29)
        v30 = 0x10000000000000;
      if (v28)
        v31 = (v28 & 0xFFFFFFCFFFFFFFFFLL) == 0;
      else
        v31 = 0;
      if (v31)
        v32 = 0x14000000000000;
      else
        v32 = v30;
      v33 = a1[2];
      v34 = *(unsigned int *)a1[1];
      v35 = *(_QWORD *)v33;
      if ((*(_QWORD *)v33 & 1) != 0)
      {
        v188 = a1[2];
        v100 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
        if ((v35 & 2) != 0
          || ((v101 = *(unsigned int *)((v35 & 0xFFFFFFFF8) + 8), (_DWORD)v101 != 0x3FFFFFFF)
            ? (v102 = (_DWORD)v101 == -1)
            : (v102 = 1),
              v102))
        {
          v103 = 2;
        }
        else if (v101 >> 28)
        {
          v174 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v174 = v100;
          *(_DWORD *)(v174 + 8) = v101;
          v103 = 1;
          v100 = v174;
        }
        else
        {
          v103 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
          v100 = v101 << 36;
        }
        v35 = v100 | v103;
        v33 = v188;
      }
      v209 = v35;
      v36 = *(_QWORD *)(v33 + 8);
      if ((v36 & 1) != 0)
      {
        v189 = v33;
        v104 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
        if ((v36 & 2) != 0
          || ((v105 = *(unsigned int *)((v36 & 0xFFFFFFFF8) + 8), (_DWORD)v105 != 0x3FFFFFFF)
            ? (v106 = (_DWORD)v105 == -1)
            : (v106 = 1),
              v106))
        {
          v107 = 2;
        }
        else if (v105 >> 28)
        {
          v175 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v175 = v104;
          *(_DWORD *)(v175 + 8) = v105;
          v107 = 1;
          v104 = v175;
        }
        else
        {
          v107 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
          v104 = v105 << 36;
        }
        v36 = v104 | v107;
        v33 = v189;
      }
      v210 = v36;
      v211 = *(_WORD *)(v33 + 16);
      v37 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v10 + 96, v34, 0x7000000000, 58, (uint64_t)&v209, *(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL | v32, a7, a8);
      if ((v210 & 1) != 0 && (v210 & 0xFFFFFFFF8) != 0)
      {
        v108 = v37;
        WTF::fastFree(v210 & 0xFFFFFFFF8, v38, v39, v40, v41, v42, a7, a8);
        v37 = v108;
      }
      v43 = v209;
      if ((v209 & 1) == 0)
        goto LABEL_42;
    }
    goto LABEL_54;
  }
  if ((_DWORD)v12 != 52)
  {
    if ((*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) == 3)
    {
      v44 = a1[2];
      v45 = *(unsigned int *)a1[1];
      v46 = *(_QWORD *)v44;
      if ((*(_QWORD *)v44 & 1) != 0)
      {
        v91 = *(_QWORD *)(v46 & 0xFFFFFFFF8);
        if ((v46 & 2) != 0
          || ((v92 = *(unsigned int *)((v46 & 0xFFFFFFFF8) + 8), (_DWORD)v92 != 0x3FFFFFFF)
            ? (v93 = (_DWORD)v92 == -1)
            : (v93 = 1),
              v93))
        {
          v94 = 2;
        }
        else if (v92 >> 28)
        {
          v172 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v172 = v91;
          *(_DWORD *)(v172 + 8) = v92;
          v94 = 1;
          v91 = v172;
        }
        else
        {
          v94 = *(_QWORD *)(v46 & 0xFFFFFFFF8);
          v91 = v92 << 36;
        }
        v46 = v91 | v94;
      }
      v196 = v46;
      v47 = *(_QWORD *)(v44 + 8);
      if ((v47 & 1) != 0)
      {
        v95 = *(_QWORD *)(v47 & 0xFFFFFFFF8);
        if ((v47 & 2) != 0
          || ((v96 = *(unsigned int *)((v47 & 0xFFFFFFFF8) + 8), (_DWORD)v96 != 0x3FFFFFFF)
            ? (v97 = (_DWORD)v96 == -1)
            : (v97 = 1),
              v97))
        {
          v98 = 2;
        }
        else if (v96 >> 28)
        {
          v173 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v173 = v95;
          *(_DWORD *)(v173 + 8) = v96;
          v98 = 1;
          v95 = v173;
        }
        else
        {
          v98 = *(_QWORD *)(v47 & 0xFFFFFFFF8);
          v95 = v96 << 36;
        }
        v47 = v95 | v98;
      }
      v197 = v47;
      v198 = *(_WORD *)(v44 + 16);
      v37 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v10 + 96, v45, 0x7000000000, 60, (uint64_t)&v196, *(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL | 0xC4000000000000, a7, a8);
      if ((v197 & 1) != 0 && (v197 & 0xFFFFFFFF8) != 0)
      {
        v99 = v37;
        WTF::fastFree(v197 & 0xFFFFFFFF8, v38, v39, v40, v41, v42, a7, a8);
        v37 = v99;
      }
      v43 = v196;
      if ((v196 & 1) == 0)
        goto LABEL_42;
    }
    else
    {
      if ((*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) != 5)
        goto LABEL_5;
      v61 = a1[2];
      v62 = *(unsigned int *)a1[1];
      v63 = *(_QWORD *)v61;
      if ((*(_QWORD *)v61 & 1) != 0)
      {
        v129 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
        if ((v63 & 2) != 0
          || ((v130 = *(unsigned int *)((v63 & 0xFFFFFFFF8) + 8), (_DWORD)v130 != 0x3FFFFFFF)
            ? (v131 = (_DWORD)v130 == -1)
            : (v131 = 1),
              v131))
        {
          v132 = 2;
        }
        else if (v130 >> 28)
        {
          v178 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v178 = v129;
          *(_DWORD *)(v178 + 8) = v130;
          v132 = 1;
          v129 = v178;
        }
        else
        {
          v132 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
          v129 = v130 << 36;
        }
        v63 = v129 | v132;
      }
      v193 = v63;
      v64 = *(_QWORD *)(v61 + 8);
      if ((v64 & 1) != 0)
      {
        v133 = *(_QWORD *)(v64 & 0xFFFFFFFF8);
        if ((v64 & 2) != 0
          || ((v134 = *(unsigned int *)((v64 & 0xFFFFFFFF8) + 8), (_DWORD)v134 != 0x3FFFFFFF)
            ? (v135 = (_DWORD)v134 == -1)
            : (v135 = 1),
              v135))
        {
          v136 = 2;
        }
        else if (v134 >> 28)
        {
          v179 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v179 = v133;
          *(_DWORD *)(v179 + 8) = v134;
          v136 = 1;
          v133 = v179;
        }
        else
        {
          v136 = *(_QWORD *)(v64 & 0xFFFFFFFF8);
          v133 = v134 << 36;
        }
        v64 = v133 | v136;
      }
      v194 = v64;
      v195 = *(_WORD *)(v61 + 16);
      v37 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v10 + 96, v62, 0x1300000000, 60, (uint64_t)&v193, *(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL | 0xD0000000000000, a7, a8);
      if ((v194 & 1) != 0 && (v194 & 0xFFFFFFFF8) != 0)
      {
        v137 = v37;
        WTF::fastFree(v194 & 0xFFFFFFFF8, v38, v39, v40, v41, v42, a7, a8);
        v37 = v137;
      }
      v43 = v193;
      if ((v193 & 1) == 0)
        goto LABEL_42;
    }
LABEL_54:
    v60 = v37;
    goto LABEL_55;
  }
  if ((*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) != 5)
  {
    if (*(unsigned __int16 *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u)
    {
LABEL_64:
      if ((*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) == 3)
      {
        v109 = *(unsigned int *)a1[1];
        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v205, (const JSC::DFG::NodeOrigin *)a1[2]);
        v60 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v10 + 96, v109, 0xC00000000, 59, (uint64_t)v205, *(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL | 0xCC000000000000, v110, v111);
        JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v205, v112, v113, v114, v115, v116, v117, v118);
LABEL_70:
        v37 = v60;
LABEL_42:
        v11 = v37 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(a2 + 6) << 48);
        *(_QWORD *)a2 = v11;
        goto LABEL_5;
      }
      v65 = a1[2];
      v66 = *(unsigned int *)a1[1];
      v67 = *(_QWORD *)v65;
      if ((*(_WORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x44) & 0x8F8) != 0)
      {
        if ((v67 & 1) != 0)
        {
          v146 = *(_QWORD *)(v67 & 0xFFFFFFFF8);
          if ((v67 & 2) != 0
            || ((v147 = *(unsigned int *)((v67 & 0xFFFFFFFF8) + 8), (_DWORD)v147 != 0x3FFFFFFF)
              ? (v148 = (_DWORD)v147 == -1)
              : (v148 = 1),
                v148))
          {
            v149 = 2;
          }
          else if (v147 >> 28)
          {
            v182 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v182 = v146;
            *(_DWORD *)(v182 + 8) = v147;
            v149 = 1;
            v146 = v182;
          }
          else
          {
            v149 = *(_QWORD *)(v67 & 0xFFFFFFFF8);
            v146 = v147 << 36;
          }
          v67 = v146 | v149;
        }
        v199 = v67;
        v69 = *(_QWORD *)(v65 + 8);
        if ((v69 & 1) != 0)
        {
          v150 = *(_QWORD *)(v69 & 0xFFFFFFFF8);
          if ((v69 & 2) != 0
            || ((v151 = *(unsigned int *)((v69 & 0xFFFFFFFF8) + 8), (_DWORD)v151 != 0x3FFFFFFF)
              ? (v152 = (_DWORD)v151 == -1)
              : (v152 = 1),
                v152))
          {
            v153 = 2;
          }
          else if (v151 >> 28)
          {
            v183 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v183 = v150;
            *(_DWORD *)(v183 + 8) = v151;
            v153 = 1;
            v150 = v183;
          }
          else
          {
            v153 = *(_QWORD *)(v69 & 0xFFFFFFFF8);
            v150 = v151 << 36;
          }
          v69 = v150 | v153;
        }
        v200 = v69;
        v201 = *(_WORD *)(v65 + 16);
        v60 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v10 + 96, v66, 0xC00000000, 59, (uint64_t)&v199, *(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL | 0xC000000000000, a7, a8);
        if ((v200 & 1) != 0 && (v200 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v200 & 0xFFFFFFFF8, v38, v39, v40, v41, v42, a7, a8);
        v43 = v199;
        if ((v199 & 1) == 0)
          goto LABEL_70;
      }
      else
      {
        if ((v67 & 1) != 0)
        {
          v138 = *(_QWORD *)(v67 & 0xFFFFFFFF8);
          if ((v67 & 2) != 0
            || ((v139 = *(unsigned int *)((v67 & 0xFFFFFFFF8) + 8), (_DWORD)v139 != 0x3FFFFFFF)
              ? (v140 = (_DWORD)v139 == -1)
              : (v140 = 1),
                v140))
          {
            v141 = 2;
          }
          else if (v139 >> 28)
          {
            v180 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v180 = v138;
            *(_DWORD *)(v180 + 8) = v139;
            v141 = 1;
            v138 = v180;
          }
          else
          {
            v141 = *(_QWORD *)(v67 & 0xFFFFFFFF8);
            v138 = v139 << 36;
          }
          v67 = v138 | v141;
        }
        v202 = v67;
        v68 = *(_QWORD *)(v65 + 8);
        if ((v68 & 1) != 0)
        {
          v142 = *(_QWORD *)(v68 & 0xFFFFFFFF8);
          if ((v68 & 2) != 0
            || ((v143 = *(unsigned int *)((v68 & 0xFFFFFFFF8) + 8), (_DWORD)v143 != 0x3FFFFFFF)
              ? (v144 = (_DWORD)v143 == -1)
              : (v144 = 1),
                v144))
          {
            v145 = 2;
          }
          else if (v143 >> 28)
          {
            v181 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v181 = v142;
            *(_DWORD *)(v181 + 8) = v143;
            v145 = 1;
            v142 = v181;
          }
          else
          {
            v145 = *(_QWORD *)(v68 & 0xFFFFFFFF8);
            v142 = v143 << 36;
          }
          v68 = v142 | v145;
        }
        v203 = v68;
        v204 = *(_WORD *)(v65 + 16);
        v60 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v10 + 96, v66, 0x300000000, 59, (uint64_t)&v202, *(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL | 0x4000000000000, a7, a8);
        if ((v203 & 1) != 0 && (v203 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v203 & 0xFFFFFFFF8, v38, v39, v40, v41, v42, a7, a8);
        v43 = v202;
        if ((v202 & 1) == 0)
          goto LABEL_70;
      }
LABEL_55:
      if ((v43 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v43 & 0xFFFFFFFF8, v38, v39, v40, v41, v42, a7, a8);
      goto LABEL_70;
    }
    v70 = **(_QWORD **)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    if ((unint64_t)v70 <= 0xFFFDFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v71 = v70 - 0x2000000000000;
      if ((unint64_t)v70 >> 49)
        v72 = (double)(uint64_t)v71 == v71;
      else
        v72 = 0;
      if (!v72)
        goto LABEL_64;
      if ((uint64_t)v71)
      {
        if ((unint64_t)((uint64_t)v71 + 0x8000000000000) >> 52)
          goto LABEL_64;
      }
      else if (v70 < 0x2000000000000)
      {
        goto LABEL_64;
      }
    }
    v73 = a1[2];
    v74 = *(unsigned int *)a1[1];
    v75 = *(_QWORD *)v73;
    if ((*(_QWORD *)v73 & 1) != 0)
    {
      v162 = *(_QWORD *)(v75 & 0xFFFFFFFF8);
      if ((v75 & 2) != 0
        || ((v163 = *(unsigned int *)((v75 & 0xFFFFFFFF8) + 8), (_DWORD)v163 != 0x3FFFFFFF)
          ? (v164 = (_DWORD)v163 == -1)
          : (v164 = 1),
            v164))
      {
        v165 = 2;
      }
      else if (v163 >> 28)
      {
        v186 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v186 = v162;
        *(_DWORD *)(v186 + 8) = v163;
        v165 = 1;
        v162 = v186;
      }
      else
      {
        v165 = *(_QWORD *)(v75 & 0xFFFFFFFF8);
        v162 = v163 << 36;
      }
      v75 = v162 | v165;
    }
    v206 = v75;
    v76 = *(_QWORD *)(v73 + 8);
    if ((v76 & 1) != 0)
    {
      v166 = *(_QWORD *)(v76 & 0xFFFFFFFF8);
      if ((v76 & 2) != 0
        || ((v167 = *(unsigned int *)((v76 & 0xFFFFFFFF8) + 8), (_DWORD)v167 != 0x3FFFFFFF)
          ? (v168 = (_DWORD)v167 == -1)
          : (v168 = 1),
            v168))
      {
        v169 = 2;
      }
      else if (v167 >> 28)
      {
        v187 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v187 = v166;
        *(_DWORD *)(v187 + 8) = v167;
        v169 = 1;
        v166 = v187;
      }
      else
      {
        v169 = *(_QWORD *)(v76 & 0xFFFFFFFF8);
        v166 = v167 << 36;
      }
      v76 = v166 | v169;
    }
    v207 = v76;
    v208 = *(_WORD *)(v73 + 16);
    v77 = *(unsigned __int16 *)((*(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
    if (v77 == 355 || v77 == 348)
    {
      v78 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
      }
    }
    else
    {
      v78 = *(__int128 **)((*(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    }
    v60 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(v10 + 96, v74, 0xC00000000, 2, (uint64_t)&v206, (uint64_t)v78, a7, a8);
    if ((v207 & 1) != 0 && (v207 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v207 & 0xFFFFFFFF8, v38, v39, v40, v41, v42, a7, a8);
    v43 = v206;
    if ((v206 & 1) == 0)
      goto LABEL_70;
    goto LABEL_55;
  }
LABEL_5:
  v13 = *(unsigned int *)a1[1];
  v14 = (v11 >> 50) & 0x3F;
  if ((_DWORD)v13 != *(_DWORD *)a1[3] && (_DWORD)v14 != 0)
  {
    v16 = 0x8000000000000;
    switch((int)v14)
    {
      case 1:
        goto LABEL_13;
      case 2:
      case 7:
      case 9:
      case 23:
      case 24:
      case 46:
      case 49:
      case 52:
        return;
      case 6:
        v16 = 0x1C000000000000;
        goto LABEL_13;
      case 8:
        v16 = 0x24000000000000;
        goto LABEL_13;
      default:
        v128 = *(JSC::DFG::Node **)a1[4];
        if (*((_WORD *)v128 + 9) != 24)
        {
          JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 32), v128, (const WTF::CString *)"./dfg/DFGFixupPhase.cpp", (const char *)0x1451, "auto JSC::DFG::FixupPhase::fixupChecksInBlock(BasicBlock *)::(anonymous class)::operator()(Edge &) const", "node->op() == Check");
          WTFCrashWithInfoImpl(5201, "./dfg/DFGFixupPhase.cpp", "auto JSC::DFG::FixupPhase::fixupChecksInBlock(BasicBlock *)::(anonymous class)::operator()(Edge &) const");
        }
        v16 = 0;
LABEL_13:
        v17 = v10 + 96;
        v18 = a1[2];
        v19 = *(_QWORD *)v18;
        if ((*(_QWORD *)v18 & 1) != 0)
        {
          v83 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
          if ((v19 & 2) != 0
            || ((v84 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v84 != 0x3FFFFFFF)
              ? (v85 = (_DWORD)v84 == -1)
              : (v85 = 1),
                v85))
          {
            v86 = 2;
          }
          else if (v84 >> 28)
          {
            v170 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v170 = v83;
            *(_DWORD *)(v170 + 8) = v84;
            v86 = 1;
            v83 = v170;
          }
          else
          {
            v86 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
            v83 = v84 << 36;
          }
          v19 = v83 | v86;
        }
        v190 = v19;
        v20 = *(_QWORD *)(v18 + 8);
        if ((v20 & 1) != 0)
        {
          v87 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
          if ((v20 & 2) != 0
            || ((v88 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v88 != 0x3FFFFFFF)
              ? (v89 = (_DWORD)v88 == -1)
              : (v89 = 1),
                v89))
          {
            v90 = 2;
          }
          else if (v88 >> 28)
          {
            v171 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v171 = v87;
            *(_DWORD *)(v171 + 8) = v88;
            v90 = 1;
            v87 = v171;
          }
          else
          {
            v90 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
            v87 = v88 << 36;
          }
          v20 = v87 | v90;
        }
        v191 = v20;
        v192 = *(_WORD *)(v18 + 16);
        JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v17, v13, 0, 24, (uint64_t)&v190, *(_QWORD *)a2, a7, a8);
        if ((v191 & 1) != 0 && (v191 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v191 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
        if ((v190 & 1) != 0 && (v190 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v190 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
        *(_QWORD *)a2 = *(_QWORD *)a2 & 0xFF03FFFFFFFFFFFFLL | v16;
        break;
    }
  }
}

void WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  const void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 30)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(const void **)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = (void *)WTF::fastMalloc((WTF *)(4 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      memcpy(v6, v4, 4 * v5);
      if (v4)
      {
        if (*(const void **)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

uint64_t WTF::PrintStream::atomically<void WTF::PrintStream::print<JSC::VirtualRegister,char [2],JSC::DFG::FlushFormat>(JSC::VirtualRegister,char [2],JSC::DFG::FlushFormat const&)::{lambda(WTF::PrintStream&)#1}>(uint64_t a1, uint64_t a2)
{
  WTF::PrintStream *v4;
  unsigned int *v5;
  const char *v6;
  char *v7;
  unint64_t v8;
  const char *v9;
  WTF::PrintStream *v10;
  uint64_t result;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = *(unsigned int **)a2;
  v6 = *(const char **)(a2 + 8);
  v7 = *(char **)(a2 + 16);
  JSC::VirtualRegister::dump(v5, v4);
  WTF::PrintStream::printf(v4, "%s", v6);
  v8 = *v7;
  if (v8 >= 8)
  {
    result = 63;
    __break(0xC471u);
  }
  else
  {
    v9 = off_1E358E3F0[v8];
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printf(v10, "%s", v9);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  return result;
}

uint64_t WTF::Vector<JSC::DeleteByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::DeleteByVariant *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v10 = *(JSC::DeleteByVariant **)a1;
    v11 = 40 * v9;
    do
    {
      JSC::DeleteByVariant::~DeleteByVariant(v10);
      v10 = (JSC::DeleteByVariant *)(v12 + 40);
      v11 -= 40;
    }
    while (v11);
  }
  v13 = *(_QWORD *)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v13 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::UniquedStringImpl *,WTF::ASCIILiteral>(WTF::PrintStream *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v13;
  char *v14;
  uint64_t v15;
  WTF::PrintStream *v16;
  float v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  WTF::PrintStream *v22;
  float v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  WTF::PrintStream *v29;
  float v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  WTF::PrintStream *v35;
  float v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  char *v46;
  size_t v47;
  char *v48;
  uint64_t v49;
  WTF::PrintStream *v50;
  float v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v56;
  int v57;
  char v58;

  if (*(_BYTE *)(a2 + 32))
  {
    v13 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    v14 = *(char **)a2;
    v15 = *(_QWORD *)(a2 + 8);
    v16 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
    if (v14)
    {
      v18 = v15 - 1;
      if (!v15)
        v18 = 0;
      WTF::StringImpl::utf8ForCharacters(v14, v18, (uint64_t)&v56, v17);
    }
    else
    {
      v25 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = 0;
      *(_BYTE *)(v25 + 16) = 0;
      v56 = v25;
      v57 = 0;
    }
    WTF::printExpectedCStringHelper(v16, "StringView", &v56);
    if (v57 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v57])(&v58, &v56);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  }
  else
  {
    v19 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    v21 = *(char **)(a2 + 16);
    v20 = *(_QWORD *)(a2 + 24);
    v22 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
    if (v21)
    {
      v24 = v20 - 1;
      if (!v20)
        v24 = 0;
      WTF::StringImpl::utf8ForCharacters(v21, v24, (uint64_t)&v56, v23);
    }
    else
    {
      v26 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = 0;
      *(_BYTE *)(v26 + 16) = 0;
      v56 = v26;
      v57 = 0;
    }
    WTF::printExpectedCStringHelper(v22, "StringView", &v56);
    if (v57 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v57])(&v58, &v56);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
    *(_BYTE *)(a2 + 32) = 1;
  }
  v28 = *(char **)a3;
  v27 = *(_QWORD *)(a3 + 8);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v28)
  {
    v31 = v27 - 1;
    if (!v27)
      v31 = 0;
    WTF::StringImpl::utf8ForCharacters(v28, v31, (uint64_t)&v56, v30);
  }
  else
  {
    v32 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v32 = 1;
    *(_QWORD *)(v32 + 8) = 0;
    *(_BYTE *)(v32 + 16) = 0;
    v56 = v32;
    v57 = 0;
  }
  WTF::printExpectedCStringHelper(v29, "StringView", &v56);
  if (v57 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v57])(&v58, &v56);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%u", *a4);
  v34 = *(char **)a5;
  v33 = *(_QWORD *)(a5 + 8);
  v35 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v34)
  {
    v37 = v33 - 1;
    if (!v33)
      v37 = 0;
    WTF::StringImpl::utf8ForCharacters(v34, v37, (uint64_t)&v56, v36);
  }
  else
  {
    v38 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v38 = 1;
    *(_QWORD *)(v38 + 8) = 0;
    *(_BYTE *)(v38 + 16) = 0;
    v56 = v38;
    v57 = 0;
  }
  WTF::printExpectedCStringHelper(v35, "StringView", &v56);
  if (v57 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v57])(&v58, &v56);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  v45 = *a6;
  if (*a6)
  {
    v46 = *(char **)(v45 + 8);
    v47 = *(unsigned int *)(v45 + 4);
    if ((*(_BYTE *)(v45 + 16) & 4) != 0)
      WTF::StringImpl::utf8ForCharacters(v46, v47, (uint64_t)&v56, v44);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v46, v47, 0, v39, v40, v41, v42, v43, (uint64_t)&v56);
    WTF::printExpectedCStringHelper(a1, "StringImpl*", &v56);
    if (v57 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v57])(&v58, &v56);
  }
  else
  {
    WTF::PrintStream::printf(a1, "%s", "(null StringImpl*)");
  }
  v48 = *(char **)a7;
  v49 = *(_QWORD *)(a7 + 8);
  v50 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v48)
  {
    v52 = v49 - 1;
    if (!v49)
      v52 = 0;
    WTF::StringImpl::utf8ForCharacters(v48, v52, (uint64_t)&v56, v51);
  }
  else
  {
    v53 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v53 = 1;
    *(_QWORD *)(v53 + 8) = 0;
    *(_BYTE *)(v53 + 16) = 0;
    v56 = v53;
    v57 = 0;
  }
  WTF::printExpectedCStringHelper(v50, "StringView", &v56);
  if (v57 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v57])(&v58, &v56);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::PointerDump<JSC::JSCell>>(uint64_t a1, uint64_t a2, _DWORD **a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  float v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  WTF::PrintStream *v21;
  uint64_t v22;
  int v23;
  char v24;

  if (*(_BYTE *)(a2 + 32))
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v7 = *(char **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    if (v7)
    {
      v11 = v8 - 1;
      if (!v8)
        v11 = 0;
      WTF::StringImpl::utf8ForCharacters(v7, v11, (uint64_t)&v22, v10);
    }
    else
    {
      v18 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = 0;
      *(_BYTE *)(v18 + 16) = 0;
      v22 = v18;
      v23 = 0;
    }
    WTF::printExpectedCStringHelper(v9, "StringView", &v22);
    if (v23 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v24, &v22);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  else
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v13 = *(char **)(a2 + 16);
    v14 = *(_QWORD *)(a2 + 24);
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    if (v13)
    {
      v17 = v14 - 1;
      if (!v14)
        v17 = 0;
      WTF::StringImpl::utf8ForCharacters(v13, v17, (uint64_t)&v22, v16);
    }
    else
    {
      v19 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = 0;
      *(_BYTE *)(v19 + 16) = 0;
      v22 = v19;
      v23 = 0;
    }
    WTF::printExpectedCStringHelper(v15, "StringView", &v22);
    if (v23 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v24, &v22);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    *(_BYTE *)(a2 + 32) = 1;
  }
  if (*a3)
    return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (**a3 & 0xFFFFFFFE) + 0x4C) + 0xB8))();
  v21 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v21, "%s", "(null)");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::printImpl<WTF::CommaPrinter,JSC::Operand>(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  float v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  WTF::PrintStream *v21;
  WTF::PrintStream *v23;
  uint64_t v24;
  int v25;
  char v26;

  if (*(_BYTE *)(a2 + 32))
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v7 = *(char **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    if (v7)
    {
      v11 = v8 - 1;
      if (!v8)
        v11 = 0;
      WTF::StringImpl::utf8ForCharacters(v7, v11, (uint64_t)&v24, v10);
    }
    else
    {
      v18 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = 0;
      *(_BYTE *)(v18 + 16) = 0;
      v24 = v18;
      v25 = 0;
    }
    WTF::printExpectedCStringHelper(v9, "StringView", &v24);
    if (v25 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v25])(&v26, &v24);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  else
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v13 = *(char **)(a2 + 16);
    v14 = *(_QWORD *)(a2 + 24);
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    if (v13)
    {
      v17 = v14 - 1;
      if (!v14)
        v17 = 0;
      WTF::StringImpl::utf8ForCharacters(v13, v17, (uint64_t)&v24, v16);
    }
    else
    {
      v19 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = 0;
      *(_BYTE *)(v19 + 16) = 0;
      v24 = v19;
      v25 = 0;
    }
    WTF::printExpectedCStringHelper(v15, "StringView", &v24);
    if (v25 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v25])(&v26, &v24);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    *(_BYTE *)(a2 + 32) = 1;
  }
  if (a3[1] == 2)
  {
    v20 = *a3;
    v21 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v21, "%s", "tmp");
    WTF::PrintStream::printf(v21, "%d", v20);
  }
  else
  {
    LODWORD(v24) = *a3;
    v23 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    JSC::VirtualRegister::dump((unsigned int *)&v24, v23);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::printImpl<WTF::CommaPrinter,JSC::DFG::FlushFormat>(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  float v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const char *v21;
  WTF::PrintStream *v22;
  uint64_t result;
  uint64_t v24;
  int v25;
  char v26;

  if (*(_BYTE *)(a2 + 32))
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v7 = *(char **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    if (v7)
    {
      v11 = v8 - 1;
      if (!v8)
        v11 = 0;
      WTF::StringImpl::utf8ForCharacters(v7, v11, (uint64_t)&v24, v10);
    }
    else
    {
      v18 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = 0;
      *(_BYTE *)(v18 + 16) = 0;
      v24 = v18;
      v25 = 0;
    }
    WTF::printExpectedCStringHelper(v9, "StringView", &v24);
    if (v25 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v25])(&v26, &v24);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  else
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v13 = *(char **)(a2 + 16);
    v14 = *(_QWORD *)(a2 + 24);
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    if (v13)
    {
      v17 = v14 - 1;
      if (!v14)
        v17 = 0;
      WTF::StringImpl::utf8ForCharacters(v13, v17, (uint64_t)&v24, v16);
    }
    else
    {
      v19 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = 0;
      *(_BYTE *)(v19 + 16) = 0;
      v24 = v19;
      v25 = 0;
    }
    WTF::printExpectedCStringHelper(v15, "StringView", &v24);
    if (v25 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v25])(&v26, &v24);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    *(_BYTE *)(a2 + 32) = 1;
  }
  v20 = *a3;
  if (v20 >= 8)
  {
    result = 63;
    __break(0xC471u);
  }
  else
  {
    v21 = off_1E358E3F0[v20];
    v22 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v22, "%s", v21);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  return result;
}

uint64_t WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,BOOL>(WTF::CommaPrinter,WTF::ASCIILiteral,BOOL const&)::{lambda(WTF::PrintStream&)#1}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  WTF::PrintStream *v18;
  float v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  WTF::PrintStream *v25;
  float v26;
  unsigned int v27;
  uint64_t v28;
  const char *v29;
  WTF::PrintStream *v30;
  uint64_t v32;
  int v33;
  char v34;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = v4;
  v7 = *a2;
  v6 = a2[1];
  v8 = (_BYTE *)a2[2];
  if (*(_BYTE *)(*a2 + 32))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v10 = *(char **)v7;
    v11 = *(_QWORD *)(v7 + 8);
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    if (v10)
    {
      v14 = v11 - 1;
      if (!v11)
        v14 = 0;
      WTF::StringImpl::utf8ForCharacters(v10, v14, (uint64_t)&v32, v13);
    }
    else
    {
      v21 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_BYTE *)(v21 + 16) = 0;
      v32 = v21;
      v33 = 0;
    }
    WTF::printExpectedCStringHelper(v12, "StringView", &v32);
    if (v33 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v33])(&v34, &v32);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  }
  else
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v16 = *(char **)(v7 + 16);
    v17 = *(_QWORD *)(v7 + 24);
    v18 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
    if (v16)
    {
      v20 = v17 - 1;
      if (!v17)
        v20 = 0;
      WTF::StringImpl::utf8ForCharacters(v16, v20, (uint64_t)&v32, v19);
    }
    else
    {
      v22 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = 0;
      *(_BYTE *)(v22 + 16) = 0;
      v32 = v22;
      v33 = 0;
    }
    WTF::printExpectedCStringHelper(v18, "StringView", &v32);
    if (v33 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v33])(&v34, &v32);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_BYTE *)(v7 + 32) = 1;
  }
  v23 = *(char **)v6;
  v24 = *(_QWORD *)(v6 + 8);
  v25 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  if (v23)
  {
    v27 = v24 - 1;
    if (!v24)
      v27 = 0;
    WTF::StringImpl::utf8ForCharacters(v23, v27, (uint64_t)&v32, v26);
  }
  else
  {
    v28 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = 0;
    *(_BYTE *)(v28 + 16) = 0;
    v32 = v28;
    v33 = 0;
  }
  WTF::printExpectedCStringHelper(v25, "StringView", &v32);
  if (v33 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v33])(&v34, &v32);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  if (*v8)
    v29 = "true";
  else
    v29 = "false";
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  WTF::PrintStream::printf(v30, "%s", v29);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,WTF::CString>(WTF::CommaPrinter,WTF::ASCIILiteral,WTF::CString const&)::{lambda(WTF::PrintStream&)#1}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  WTF::PrintStream *v18;
  float v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  WTF::PrintStream *v25;
  float v26;
  unsigned int v27;
  uint64_t v28;
  const char *v29;
  uint64_t v31;
  int v32;
  char v33;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = (WTF::PrintStream *)v4;
  v7 = *a2;
  v6 = a2[1];
  v8 = (_QWORD *)a2[2];
  if (*(_BYTE *)(*a2 + 32))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v10 = *(char **)v7;
    v11 = *(_QWORD *)(v7 + 8);
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    if (v10)
    {
      v14 = v11 - 1;
      if (!v11)
        v14 = 0;
      WTF::StringImpl::utf8ForCharacters(v10, v14, (uint64_t)&v31, v13);
    }
    else
    {
      v21 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_BYTE *)(v21 + 16) = 0;
      v31 = v21;
      v32 = 0;
    }
    WTF::printExpectedCStringHelper(v12, "StringView", &v31);
    if (v32 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  }
  else
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v16 = *(char **)(v7 + 16);
    v17 = *(_QWORD *)(v7 + 24);
    v18 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
    if (v16)
    {
      v20 = v17 - 1;
      if (!v17)
        v20 = 0;
      WTF::StringImpl::utf8ForCharacters(v16, v20, (uint64_t)&v31, v19);
    }
    else
    {
      v22 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = 0;
      *(_BYTE *)(v22 + 16) = 0;
      v31 = v22;
      v32 = 0;
    }
    WTF::printExpectedCStringHelper(v18, "StringView", &v31);
    if (v32 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
    *(_BYTE *)(v7 + 32) = 1;
  }
  v23 = *(char **)v6;
  v24 = *(_QWORD *)(v6 + 8);
  v25 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 32))(v5);
  if (v23)
  {
    v27 = v24 - 1;
    if (!v24)
      v27 = 0;
    WTF::StringImpl::utf8ForCharacters(v23, v27, (uint64_t)&v31, v26);
  }
  else
  {
    v28 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = 0;
    *(_BYTE *)(v28 + 16) = 0;
    v31 = v28;
    v32 = 0;
  }
  WTF::printExpectedCStringHelper(v25, "StringView", &v31);
  if (v32 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  if (*v8)
    v29 = (const char *)(*v8 + 16);
  else
    v29 = 0;
  WTF::PrintStream::printf(v5, "%s", v29);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::dumpInContext(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  unint64_t v11;
  unint64_t i;
  JSC::DFG::AbstractValue *v13;
  WTF::PrintStream *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  JSC::DFG::AbstractValue *v18;
  WTF::PrintStream *v19;
  JSC::DFG::AbstractValue *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[4];
  char v28;

  v5 = result;
  v27[0] = " ";
  v27[1] = 2;
  v27[2] = &str_24_8;
  v27[3] = 1;
  v28 = 0;
  v6 = *(unsigned int *)(result + 16);
  v26 = v6 - 1;
  if ((_DWORD)v6)
  {
    v7 = v6 - 2;
    v8 = 32 * v6;
    do
    {
      v9 = *(_QWORD *)v5;
      if (*(_QWORD *)(*(_QWORD *)v5 + v8 - 24))
      {
        v24 = "arg";
        v25 = 4;
        v22 = ":";
        v23 = 2;
        v20 = (JSC::DFG::AbstractValue *)(v8 + v9 - 32);
        v21 = a3;
        v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::ValueInContext<JSC::DFG::AbstractValue,JSC::DumpContext>>(v10, (uint64_t)v27, (uint64_t)&v24, &v26, (uint64_t)&v22, &v20);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      }
      v26 = v7--;
      v8 -= 32;
    }
    while (v7 != -2);
  }
  v26 = 0;
  v11 = *(unsigned int *)(v5 + 20);
  if ((_DWORD)v11)
  {
    for (i = 0; i < v11; v26 = i)
    {
      v13 = (JSC::DFG::AbstractValue *)(*(_QWORD *)v5 + 32 * (i + *(unsigned int *)(v5 + 16)));
      if (*((_QWORD *)v13 + 1))
      {
        v24 = "loc";
        v25 = 4;
        v22 = ":";
        v23 = 2;
        v20 = v13;
        v21 = a3;
        v14 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::ValueInContext<JSC::DFG::AbstractValue,JSC::DumpContext>>(v14, (uint64_t)v27, (uint64_t)&v24, &v26, (uint64_t)&v22, &v20);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
        v11 = *(unsigned int *)(v5 + 20);
      }
      ++i;
    }
  }
  else
  {
    v11 = 0;
  }
  v26 = 0;
  v15 = *(unsigned int *)(v5 + 12);
  v16 = *(unsigned int *)(v5 + 16);
  if (v16 + v11 != v15)
  {
    v17 = 0;
    do
    {
      v18 = (JSC::DFG::AbstractValue *)(*(_QWORD *)v5 + 32 * (v17 + v11 + v16));
      if (*((_QWORD *)v18 + 1))
      {
        v24 = "tmp";
        v25 = 4;
        v22 = ":";
        v23 = 2;
        v20 = v18;
        v21 = a3;
        v19 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::ValueInContext<JSC::DFG::AbstractValue,JSC::DumpContext>>(v19, (uint64_t)v27, (uint64_t)&v24, &v26, (uint64_t)&v22, &v20);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
        v15 = *(unsigned int *)(v5 + 12);
        v16 = *(unsigned int *)(v5 + 16);
        v11 = *(unsigned int *)(v5 + 20);
      }
      v26 = ++v17;
    }
    while (v17 < v15 - (v16 + v11));
  }
  return result;
}

uint64_t WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::ValueInContext<JSC::DFG::AbstractValue,JSC::DumpContext>>(WTF::PrintStream *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, JSC::DFG::AbstractValue **a6)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  WTF::PrintStream *v21;
  float v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  WTF::PrintStream *v28;
  float v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  WTF::PrintStream *v34;
  float v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v39;
  int v40;
  char v41;

  if (*(_BYTE *)(a2 + 32))
  {
    v12 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    v13 = *(char **)a2;
    v14 = *(_QWORD *)(a2 + 8);
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    if (v13)
    {
      v17 = v14 - 1;
      if (!v14)
        v17 = 0;
      WTF::StringImpl::utf8ForCharacters(v13, v17, (uint64_t)&v39, v16);
    }
    else
    {
      v24 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = 0;
      *(_BYTE *)(v24 + 16) = 0;
      v39 = v24;
      v40 = 0;
    }
    WTF::printExpectedCStringHelper(v15, "StringView", &v39);
    if (v40 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v41, &v39);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  }
  else
  {
    v18 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    v19 = *(char **)(a2 + 16);
    v20 = *(_QWORD *)(a2 + 24);
    v21 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    if (v19)
    {
      v23 = v20 - 1;
      if (!v20)
        v23 = 0;
      WTF::StringImpl::utf8ForCharacters(v19, v23, (uint64_t)&v39, v22);
    }
    else
    {
      v25 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = 0;
      *(_BYTE *)(v25 + 16) = 0;
      v39 = v25;
      v40 = 0;
    }
    WTF::printExpectedCStringHelper(v21, "StringView", &v39);
    if (v40 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v41, &v39);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
    *(_BYTE *)(a2 + 32) = 1;
  }
  v26 = *(char **)a3;
  v27 = *(_QWORD *)(a3 + 8);
  v28 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v26)
  {
    v30 = v27 - 1;
    if (!v27)
      v30 = 0;
    WTF::StringImpl::utf8ForCharacters(v26, v30, (uint64_t)&v39, v29);
  }
  else
  {
    v31 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v31 = 1;
    *(_QWORD *)(v31 + 8) = 0;
    *(_BYTE *)(v31 + 16) = 0;
    v39 = v31;
    v40 = 0;
  }
  WTF::printExpectedCStringHelper(v28, "StringView", &v39);
  if (v40 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v41, &v39);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%lu", *a4);
  v32 = *(char **)a5;
  v33 = *(_QWORD *)(a5 + 8);
  v34 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v32)
  {
    v36 = v33 - 1;
    if (!v33)
      v36 = 0;
    WTF::StringImpl::utf8ForCharacters(v32, v36, (uint64_t)&v39, v35);
  }
  else
  {
    v37 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)(v37 + 8) = 0;
    *(_BYTE *)(v37 + 16) = 0;
    v39 = v37;
    v40 = 0;
  }
  WTF::printExpectedCStringHelper(v34, "StringView", &v39);
  if (v40 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v41, &v39);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  return JSC::DFG::AbstractValue::dumpInContext(*a6, a1, a6[1]);
}

uint64_t JSC::Operands<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::dump(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  WTF::PrintStream *v8;
  unint64_t v9;
  unint64_t i;
  uint64_t *v11;
  WTF::PrintStream *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  WTF::PrintStream *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  char v24;

  v3 = result;
  v23[0] = " ";
  v23[1] = 2;
  v23[2] = &str_24_8;
  v23[3] = 1;
  v24 = 0;
  v4 = *(unsigned int *)(result + 16);
  v22 = v4 - 1;
  if ((_DWORD)v4)
  {
    v5 = v4 - 2;
    v6 = 8 * v4 - 8;
    do
    {
      v7 = (uint64_t *)(*(_QWORD *)v3 + v6);
      if (*v7)
      {
        v20 = "arg";
        v21 = 4;
        v18 = ":";
        v19 = 2;
        v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,JSC::DFG::Node *>(v8, (uint64_t)v23, (uint64_t)&v20, &v22, (uint64_t)&v18, v7);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      }
      v22 = v5--;
      v6 -= 8;
    }
    while (v5 != -2);
  }
  v22 = 0;
  v9 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v9)
  {
    for (i = 0; i < v9; v22 = i)
    {
      v11 = (uint64_t *)(*(_QWORD *)v3 + 8 * (i + *(unsigned int *)(v3 + 16)));
      if (*v11)
      {
        v20 = "loc";
        v21 = 4;
        v18 = ":";
        v19 = 2;
        v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,JSC::DFG::Node *>(v12, (uint64_t)v23, (uint64_t)&v20, &v22, (uint64_t)&v18, v11);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
        v9 = *(unsigned int *)(v3 + 20);
      }
      ++i;
    }
  }
  else
  {
    v9 = 0;
  }
  v22 = 0;
  v13 = *(unsigned int *)(v3 + 12);
  v14 = *(unsigned int *)(v3 + 16);
  if (v14 + v9 != v13)
  {
    v15 = 0;
    do
    {
      v16 = (uint64_t *)(*(_QWORD *)v3 + 8 * (v15 + v9 + v14));
      if (*v16)
      {
        v20 = "tmp";
        v21 = 4;
        v18 = ":";
        v19 = 2;
        v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,JSC::DFG::Node *>(v17, (uint64_t)v23, (uint64_t)&v20, &v22, (uint64_t)&v18, v16);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
        v13 = *(unsigned int *)(v3 + 12);
        v14 = *(unsigned int *)(v3 + 16);
        v9 = *(unsigned int *)(v3 + 20);
      }
      v22 = ++v15;
    }
    while (v15 < v13 - (v14 + v9));
  }
  return result;
}

uint64_t WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,JSC::DFG::Node *>(WTF::PrintStream *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  WTF::PrintStream *v21;
  float v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  WTF::PrintStream *v28;
  float v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  WTF::PrintStream *v34;
  float v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  WTF::PrintStream *v40;
  uint64_t result;
  const char *v42;
  WTF::PrintStream *v43;
  uint64_t v44;
  int v45;
  char v46;

  if (*(_BYTE *)(a2 + 32))
  {
    v12 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    v13 = *(char **)a2;
    v14 = *(_QWORD *)(a2 + 8);
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    if (v13)
    {
      v17 = v14 - 1;
      if (!v14)
        v17 = 0;
      WTF::StringImpl::utf8ForCharacters(v13, v17, (uint64_t)&v44, v16);
    }
    else
    {
      v24 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = 0;
      *(_BYTE *)(v24 + 16) = 0;
      v44 = v24;
      v45 = 0;
    }
    WTF::printExpectedCStringHelper(v15, "StringView", &v44);
    if (v45 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v45])(&v46, &v44);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  }
  else
  {
    v18 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    v19 = *(char **)(a2 + 16);
    v20 = *(_QWORD *)(a2 + 24);
    v21 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    if (v19)
    {
      v23 = v20 - 1;
      if (!v20)
        v23 = 0;
      WTF::StringImpl::utf8ForCharacters(v19, v23, (uint64_t)&v44, v22);
    }
    else
    {
      v25 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = 0;
      *(_BYTE *)(v25 + 16) = 0;
      v44 = v25;
      v45 = 0;
    }
    WTF::printExpectedCStringHelper(v21, "StringView", &v44);
    if (v45 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v45])(&v46, &v44);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
    *(_BYTE *)(a2 + 32) = 1;
  }
  v26 = *(char **)a3;
  v27 = *(_QWORD *)(a3 + 8);
  v28 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v26)
  {
    v30 = v27 - 1;
    if (!v27)
      v30 = 0;
    WTF::StringImpl::utf8ForCharacters(v26, v30, (uint64_t)&v44, v29);
  }
  else
  {
    v31 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v31 = 1;
    *(_QWORD *)(v31 + 8) = 0;
    *(_BYTE *)(v31 + 16) = 0;
    v44 = v31;
    v45 = 0;
  }
  WTF::printExpectedCStringHelper(v28, "StringView", &v44);
  if (v45 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v45])(&v46, &v44);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%lu", *a4);
  v32 = *(char **)a5;
  v33 = *(_QWORD *)(a5 + 8);
  v34 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v32)
  {
    v36 = v33 - 1;
    if (!v33)
      v36 = 0;
    WTF::StringImpl::utf8ForCharacters(v32, v36, (uint64_t)&v44, v35);
  }
  else
  {
    v37 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)(v37 + 8) = 0;
    *(_BYTE *)(v37 + 16) = 0;
    v44 = v37;
    v45 = 0;
  }
  WTF::printExpectedCStringHelper(v34, "StringView", &v44);
  if (v45 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v45])(&v46, &v44);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  v38 = *a6;
  if (*a6)
  {
    v39 = *(_DWORD *)(v38 + 20);
    v40 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v40, "%s", "D@");
    WTF::PrintStream::printf(v40, "%u", v39);
    result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
    if ((*(_DWORD *)(v38 + 56) & 7) == 3)
    {
      v42 = "<Double>";
    }
    else
    {
      if ((*(_DWORD *)(v38 + 56) & 7) != 5)
        return result;
      v42 = "<Int52>";
    }
  }
  else
  {
    v42 = "-";
  }
  v43 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v43, "%s", v42);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
}

void WTF::sortedListDump<WTF::Vector<JSC::DFG::NodeFlowProjection,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::DFG::NodeComparator>(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  JSC::DFG::NodeFlowProjection *v13;
  WTF::PrintStream *v14;
  uint64_t v15;
  WTF::PrintStream *v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  _BYTE *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v32;
  int v33;
  char v34;
  void (**v35)(WTF::StringPrintStream *__hidden);
  _BYTE *v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (a3 >> 29)
    {
      __break(0xC471u);
      goto LABEL_32;
    }
    v4 = a3;
    v5 = WTF::fastMalloc((WTF *)(8 * a3));
    v6 = (uint64_t *)v5;
    v7 = 0;
    v8 = 8 * v4;
    do
    {
      *(_QWORD *)(v5 + 8 * v7) = *(_QWORD *)(a2 + 8 * v7);
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    v6 = 0;
    LODWORD(v7) = 0;
  }
  v9 = v7;
  v10 = 126 - 2 * __clz(v7);
  if ((_DWORD)v7)
    v11 = v10;
  else
    v11 = 0;
  std::__introsort<std::_ClassicAlgPolicy,JSC::DFG::NodeComparator &,JSC::DFG::NodeFlowProjection *,false>(v6, &v6[v7], v11, 1);
  v35 = off_1E3572250;
  v36 = v38;
  v37 = xmmword_199122F80;
  v38[0] = 0;
  if ((_DWORD)v7)
  {
    v12 = 0;
    v13 = (JSC::DFG::NodeFlowProjection *)v6;
    do
    {
      v14 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v35[4])(&v35);
      v15 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v14 + 32))(v14);
      v16 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
      if (v12)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v32, v17);
        WTF::printExpectedCStringHelper(v16, "StringView", &v32);
        if (v33 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v33])(&v34, &v32);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters((char *)&str_24_8, 0, (uint64_t)&v32, v17);
        WTF::printExpectedCStringHelper(v16, "StringView", &v32);
        if (v33 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v33])(&v34, &v32);
        v12 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v14 + 40))(v14);
      JSC::DFG::NodeFlowProjection::dump(v13, v14);
      v35[5]((WTF::StringPrintStream *)&v35);
      v13 = (JSC::DFG::NodeFlowProjection *)((char *)v13 + 8);
      --v9;
    }
    while (v9);
    v26 = v36;
    v25 = v37;
    v27 = a1;
    *a1 = 0;
    if (!v26)
    {
      v30 = 0;
      goto LABEL_26;
    }
  }
  else
  {
    v25 = 0;
    v26 = v38;
    v27 = a1;
  }
  if (v25 >= 0xFFFFFFFFFFFFFFF0)
  {
    __break(0xC471u);
    JUMPOUT(0x19840BE24);
  }
  if (v25 == -17)
  {
    __break(0xC471u);
LABEL_32:
    JUMPOUT(0x19840BE1CLL);
  }
  v28 = WTF::fastMalloc((WTF *)(v25 + 17));
  *(_DWORD *)v28 = 1;
  *(_QWORD *)(v28 + 8) = v25;
  *v27 = v28;
  v29 = v28 + 16;
  memcpy((void *)(v28 + 16), v26, v25);
  *(_BYTE *)(v29 + v25) = 0;
  v30 = (unint64_t)v36;
  if (v36 == v38)
  {
    if (!v6)
      return;
LABEL_27:
    WTF::fastFree((unint64_t)v6, v18, v19, v20, v21, v22, v23, v24);
    return;
  }
LABEL_26:
  WTF::fastFree(v30, v18, v19, v20, v21, v22, v23, v24);
  if (v6)
    goto LABEL_27;
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,JSC::DFG::NodeComparator &,JSC::DFG::NodeFlowProjection *,false>(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  int64_t v104;
  int64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t *v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v79 = *(a2 - 1);
        v80 = *v8;
        if (*(_DWORD *)((v79 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 20))
        {
          *v8 = v79;
          *(a2 - 1) = v80;
        }
        return result;
      case 3:
        v55 = *v8;
        v20 = v8[1];
        v81 = *(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFFELL) + 20);
        LODWORD(v56) = *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 20);
        v82 = *(a2 - 1);
        v83 = *(_DWORD *)((v82 & 0xFFFFFFFFFFFFFFFELL) + 20);
        if (v81 < v56)
        {
          if (v83 >= v81)
            goto LABEL_187;
          *v8 = v82;
          goto LABEL_189;
        }
        if (v83 < v81)
        {
          v8[1] = v82;
          *(a2 - 1) = v20;
          v131 = *v8;
          v130 = v8[1];
          if (*(_DWORD *)((v130 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 20))
          {
            *v8 = v130;
            v8[1] = v131;
          }
        }
        return result;
      case 4:
        return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::NodeComparator &,JSC::DFG::NodeFlowProjection *>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v84 = v8 + 1;
        v85 = v8 + 2;
        v86 = v8 + 3;
        result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::NodeComparator &,JSC::DFG::NodeFlowProjection *>(v7, v7 + 1, v7 + 2, v7 + 3);
        v87 = *(a2 - 1);
        v88 = v7[3];
        if (*(_DWORD *)((v87 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((v88 & 0xFFFFFFFFFFFFFFFELL) + 20))
        {
          *v86 = v87;
          *(a2 - 1) = v88;
          v89 = *v86;
          v90 = *v85;
          v91 = *(_DWORD *)((*v86 & 0xFFFFFFFFFFFFFFFELL) + 20);
          if (v91 < *(_DWORD *)((*v85 & 0xFFFFFFFFFFFFFFFELL) + 20))
          {
            *v85 = v89;
            *v86 = v90;
            v92 = *v84;
            if (v91 < *(_DWORD *)((*v84 & 0xFFFFFFFFFFFFFFFELL) + 20))
            {
              v7[1] = v89;
              v7[2] = v92;
              v93 = *v7;
              if (v91 < *(_DWORD *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 20))
              {
                *v7 = v89;
                v7[1] = v93;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v55 = (uint64_t)(v8 + 1);
          v95 = v8 == a2 || v55 == (_QWORD)a2;
          if ((a4 & 1) != 0)
          {
            if (!v95)
            {
              v96 = 8;
              v97 = v8;
              do
              {
                v98 = *v97;
                v97 = (uint64_t *)v55;
                v99 = *(_QWORD *)v55;
                v100 = *(_DWORD *)((v99 & 0xFFFFFFFFFFFFFFFELL) + 20);
                if (v100 < *(_DWORD *)((v98 & 0xFFFFFFFFFFFFFFFELL) + 20))
                {
                  v101 = v96;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v101) = v98;
                    v102 = v101 - 8;
                    if (v101 == 8)
                      break;
                    v98 = *(uint64_t *)((char *)v8 + v101 - 16);
                    v101 -= 8;
                    if (v100 >= *(_DWORD *)((v98 & 0xFFFFFFFFFFFFFFFELL) + 20))
                    {
                      v103 = (uint64_t *)((char *)v8 + v102);
                      goto LABEL_136;
                    }
                  }
                  v103 = v8;
LABEL_136:
                  *v103 = v99;
                }
                v55 = (uint64_t)(v97 + 1);
                v96 += 8;
              }
              while (v97 + 1 != a2);
            }
          }
          else if (!v95)
          {
            v20 = 0;
            v132 = 1;
            while (1)
            {
              v133 = v8[v20];
              v20 = v132;
              v56 = *(uint64_t **)v55;
              v134 = *(_DWORD *)((*(_QWORD *)v55 & 0xFFFFFFFFFFFFFFFELL) + 20);
              if (v134 < *(_DWORD *)((v133 & 0xFFFFFFFFFFFFFFFELL) + 20))
                break;
LABEL_184:
              v132 = v20 + 1;
              v55 += 8;
              if ((uint64_t *)v55 == a2)
                return result;
            }
            v135 = 0;
            while (1)
            {
              v136 = (uint64_t *)(v55 + 8 * v135);
              *v136 = v133;
              if (!(v20 + v135))
                break;
              v133 = *(v136 - 2);
              --v135;
              if (v134 >= *(_DWORD *)((v133 & 0xFFFFFFFFFFFFFFFELL) + 20))
              {
                *(_QWORD *)(v55 + 8 * v135) = v56;
                goto LABEL_184;
              }
            }
LABEL_186:
            __break(1u);
LABEL_187:
            *v7 = v20;
            v7[1] = v55;
            v137 = *(a2 - 1);
            if (*(_DWORD *)((v137 & 0xFFFFFFFFFFFFFFFELL) + 20) < v56)
            {
              v7[1] = v137;
LABEL_189:
              *(a2 - 1) = v55;
            }
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v104 = (unint64_t)(v10 - 2) >> 1;
            v105 = v104;
            do
            {
              if (v104 >= v105)
              {
                v106 = (2 * v105) | 1;
                v107 = &v8[v106];
                v108 = *v107;
                if (2 * v105 + 2 < v10
                  && *(_DWORD *)((v108 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((v107[1] & 0xFFFFFFFFFFFFFFFELL) + 20))
                {
                  v108 = v107[1];
                  ++v107;
                  v106 = 2 * v105 + 2;
                }
                result = &v8[v105];
                v109 = *result;
                v110 = *(_DWORD *)((*result & 0xFFFFFFFFFFFFFFFELL) + 20);
                if (*(_DWORD *)((v108 & 0xFFFFFFFFFFFFFFFELL) + 20) >= v110)
                {
                  do
                  {
                    v111 = v107;
                    *result = v108;
                    if (v104 < v106)
                      break;
                    v112 = (2 * v106) | 1;
                    v107 = &v8[v112];
                    v106 = 2 * v106 + 2;
                    v108 = *v107;
                    if (v106 >= v10)
                    {
                      v106 = v112;
                    }
                    else if (*(_DWORD *)((v108 & 0xFFFFFFFFFFFFFFFELL) + 20) >= *(_DWORD *)((v107[1] & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 20))
                    {
                      v106 = v112;
                    }
                    else
                    {
                      v108 = v107[1];
                      ++v107;
                    }
                    result = v111;
                  }
                  while (*(_DWORD *)((v108 & 0xFFFFFFFFFFFFFFFELL) + 20) >= v110);
                  *v111 = v109;
                }
              }
              v113 = v105-- <= 0;
            }
            while (!v113);
            v114 = (unint64_t)v9 >> 3;
            do
            {
              v115 = 0;
              v116 = *v8;
              v117 = v8;
              do
              {
                v118 = &v117[v115];
                v121 = v118[1];
                v119 = v118 + 1;
                v120 = v121;
                v122 = (2 * v115) | 1;
                v115 = 2 * v115 + 2;
                if (v115 >= v114)
                {
                  v115 = v122;
                }
                else
                {
                  result = (uint64_t *)*(unsigned int *)((v120 & 0xFFFFFFFFFFFFFFFELL) + 20);
                  if (result >= *(_DWORD *)((v119[1] & 0xFFFFFFFFFFFFFFFELL) + 20))
                  {
                    v115 = v122;
                  }
                  else
                  {
                    v120 = v119[1];
                    ++v119;
                  }
                }
                *v117 = v120;
                v117 = v119;
              }
              while (v115 <= (uint64_t)((unint64_t)(v114 - 2) >> 1));
              if (v119 == --a2)
              {
                *v119 = v116;
              }
              else
              {
                *v119 = *a2;
                *a2 = v116;
                v123 = (char *)v119 - (char *)v8 + 8;
                if (v123 >= 9)
                {
                  v124 = (((unint64_t)v123 >> 3) - 2) >> 1;
                  v125 = &v8[v124];
                  v126 = *v125;
                  v127 = *v119;
                  v128 = *(_DWORD *)((*v119 & 0xFFFFFFFFFFFFFFFELL) + 20);
                  if (*(_DWORD *)((*v125 & 0xFFFFFFFFFFFFFFFELL) + 20) < v128)
                  {
                    do
                    {
                      v129 = v125;
                      *v119 = v126;
                      if (!v124)
                        break;
                      v124 = (v124 - 1) >> 1;
                      v125 = &v8[v124];
                      v126 = *v125;
                      v119 = v129;
                    }
                    while (*(_DWORD *)((*v125 & 0xFFFFFFFFFFFFFFFELL) + 20) < v128);
                    *v129 = v127;
                  }
                }
              }
              v113 = v114-- <= 2;
            }
            while (!v113);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        v13 = *(a2 - 1);
        v14 = *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 20);
        if ((unint64_t)v9 >= 0x401)
        {
          v15 = *v12;
          v16 = *v8;
          v17 = *(_DWORD *)((*v12 & 0xFFFFFFFFFFFFFFFELL) + 20);
          v18 = *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 20);
          if (v17 >= v18)
          {
            if (v14 < v17)
            {
              *v12 = v13;
              *(a2 - 1) = v15;
              v23 = *v8;
              if (*(_DWORD *)((*v12 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 20))
              {
                *v8 = *v12;
                *v12 = v23;
              }
            }
          }
          else
          {
            if (v14 < v17)
            {
              *v8 = v13;
              goto LABEL_21;
            }
            *v8 = v15;
            *v12 = v16;
            v25 = *(a2 - 1);
            if (*(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFFELL) + 20) < v18)
            {
              *v12 = v25;
LABEL_21:
              *(a2 - 1) = v16;
            }
          }
          v26 = &v8[v11];
          v29 = *(v26 - 1);
          v27 = v26 - 1;
          v28 = v29;
          v30 = v8[1];
          v31 = *(_DWORD *)((v29 & 0xFFFFFFFFFFFFFFFELL) + 20);
          v32 = *(_DWORD *)((v30 & 0xFFFFFFFFFFFFFFFELL) + 20);
          v33 = *(a2 - 2);
          v34 = *(_DWORD *)((v33 & 0xFFFFFFFFFFFFFFFELL) + 20);
          if (v31 >= v32)
          {
            if (v34 < v31)
            {
              *v27 = v33;
              *(a2 - 2) = v28;
              v35 = v8[1];
              if (*(_DWORD *)((*v27 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((v35 & 0xFFFFFFFFFFFFFFFELL) + 20))
              {
                v8[1] = *v27;
                *v27 = v35;
              }
            }
          }
          else
          {
            if (v34 < v31)
            {
              v8[1] = v33;
              goto LABEL_33;
            }
            v8[1] = v28;
            *v27 = v30;
            v37 = *(a2 - 2);
            if (*(_DWORD *)((v37 & 0xFFFFFFFFFFFFFFFELL) + 20) < v32)
            {
              *v27 = v37;
LABEL_33:
              *(a2 - 2) = v30;
            }
          }
          v38 = &v8[v11];
          v41 = v38[1];
          v39 = v38 + 1;
          v40 = v41;
          v42 = v8[2];
          v43 = *(_DWORD *)((v41 & 0xFFFFFFFFFFFFFFFELL) + 20);
          v44 = *(_DWORD *)((v42 & 0xFFFFFFFFFFFFFFFELL) + 20);
          v45 = *(a2 - 3);
          v46 = *(_DWORD *)((v45 & 0xFFFFFFFFFFFFFFFELL) + 20);
          if (v43 >= v44)
          {
            if (v46 < v43)
            {
              *v39 = v45;
              *(a2 - 3) = v40;
              v47 = v8[2];
              if (*(_DWORD *)((*v39 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((v47 & 0xFFFFFFFFFFFFFFFELL) + 20))
              {
                v8[2] = *v39;
                *v39 = v47;
              }
            }
          }
          else
          {
            if (v46 < v43)
            {
              v8[2] = v45;
              goto LABEL_42;
            }
            v8[2] = v40;
            *v39 = v42;
            v48 = *(a2 - 3);
            if (*(_DWORD *)((v48 & 0xFFFFFFFFFFFFFFFELL) + 20) < v44)
            {
              *v39 = v48;
LABEL_42:
              *(a2 - 3) = v42;
            }
          }
          v49 = *v12;
          v50 = *v27;
          v51 = *(_DWORD *)((*v12 & 0xFFFFFFFFFFFFFFFELL) + 20);
          v52 = *(_DWORD *)((*v27 & 0xFFFFFFFFFFFFFFFELL) + 20);
          v53 = *v39;
          v54 = *(_DWORD *)((*v39 & 0xFFFFFFFFFFFFFFFELL) + 20);
          if (v51 >= v52)
          {
            if (v54 >= v51)
              goto LABEL_50;
            *v12 = v53;
            *v39 = v49;
            v39 = v12;
            v49 = v50;
            if (v54 >= v52)
            {
              v49 = v53;
              goto LABEL_50;
            }
          }
          else if (v54 >= v51)
          {
            *v27 = v49;
            *v12 = v50;
            v27 = v12;
            v49 = v53;
            if (v54 >= v52)
            {
              v49 = v50;
LABEL_50:
              v20 = *v8;
              *v8 = v49;
              *v12 = v20;
              goto LABEL_51;
            }
          }
          *v27 = v53;
          *v39 = v50;
          goto LABEL_50;
        }
        v19 = *v8;
        v20 = *v12;
        v21 = *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 20);
        v22 = *(_DWORD *)((*v12 & 0xFFFFFFFFFFFFFFFELL) + 20);
        if (v21 >= v22)
        {
          if (v14 < v21)
          {
            *v8 = v13;
            *(a2 - 1) = v19;
            v20 = *v8;
            v24 = *v12;
            if (*(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*v12 & 0xFFFFFFFFFFFFFFFELL) + 20))
            {
              *v12 = v20;
              *v8 = v24;
            }
          }
        }
        else
        {
          if (v14 >= v21)
          {
            *v12 = v19;
            *v8 = v20;
            v36 = *(a2 - 1);
            if (*(_DWORD *)((v36 & 0xFFFFFFFFFFFFFFFELL) + 20) >= v22)
              goto LABEL_51;
            *v8 = v36;
          }
          else
          {
            *v12 = v13;
          }
          *(a2 - 1) = v20;
        }
LABEL_51:
        --a3;
        v55 = *v8;
        if ((a4 & 1) == 0)
        {
          v20 = *(unsigned int *)((v55 & 0xFFFFFFFFFFFFFFFELL) + 20);
          if (*(_DWORD *)((*(v8 - 1) & 0xFFFFFFFFFFFFFFFELL) + 20) >= v20)
          {
            if (v20 >= *(_DWORD *)((*(a2 - 1) & 0xFFFFFFFFFFFFFFFELL) + 20))
            {
              v71 = v8 + 1;
              do
              {
                v8 = v71;
                if (v71 >= a2)
                  break;
                ++v71;
              }
              while (v20 >= *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 20));
            }
            else
            {
              v56 = v8 + 1;
              do
              {
                if (v56 == a2)
                  goto LABEL_186;
                v70 = *v56++;
              }
              while (v20 >= *(_DWORD *)((v70 & 0xFFFFFFFFFFFFFFFELL) + 20));
              v8 = v56 - 1;
            }
            v56 = a2;
            if (v8 < a2)
            {
              v56 = a2;
              while (v56 != v7)
              {
                v72 = *--v56;
                if (v20 >= *(_DWORD *)((v72 & 0xFFFFFFFFFFFFFFFELL) + 20))
                  goto LABEL_95;
              }
              goto LABEL_186;
            }
LABEL_95:
            if (v8 < v56)
            {
              v73 = *v8;
              v74 = *v56;
              do
              {
                *v8 = v74;
                v75 = v8 + 1;
                *v56 = v73;
                do
                {
                  if (v75 == a2)
                    goto LABEL_186;
                  v76 = *v75++;
                  v73 = v76;
                }
                while (v20 >= *(_DWORD *)((v76 & 0xFFFFFFFFFFFFFFFELL) + 20));
                v8 = v75 - 1;
                do
                {
                  if (v56 == v7)
                    goto LABEL_186;
                  v77 = *--v56;
                  v74 = v77;
                }
                while (v20 < *(_DWORD *)((v77 & 0xFFFFFFFFFFFFFFFELL) + 20));
              }
              while (v8 < v56);
            }
            v78 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v78;
            a4 = 0;
            *v78 = v55;
            continue;
          }
        }
        v56 = v8 + 1;
        if (v8 + 1 == a2)
          goto LABEL_186;
        v57 = *v56;
        v20 = *(unsigned int *)((v55 & 0xFFFFFFFFFFFFFFFELL) + 20);
        if (*(_DWORD *)((*v56 & 0xFFFFFFFFFFFFFFFELL) + 20) < v20)
        {
          v58 = 0;
          do
          {
            v56 = &v8[v58 + 2];
            if (v56 == a2)
              goto LABEL_186;
            v57 = *v56;
            ++v58;
          }
          while (*(_DWORD *)((*v56 & 0xFFFFFFFFFFFFFFFELL) + 20) < v20);
          v59 = &v8[v58];
          v56 = &v8[v58 + 1];
          v60 = a2;
          if (v58 * 8)
          {
            while (v60 != v8)
            {
              v61 = *--v60;
              if (*(_DWORD *)((v61 & 0xFFFFFFFFFFFFFFFELL) + 20) < v20)
                goto LABEL_66;
            }
            goto LABEL_186;
          }
        }
        v60 = a2;
        do
        {
          if (v56 >= v60)
            break;
          v62 = *--v60;
        }
        while (*(_DWORD *)((v62 & 0xFFFFFFFFFFFFFFFELL) + 20) >= v20);
        v59 = v8;
LABEL_66:
        if (v56 < v60)
        {
          v63 = *v60;
          v64 = v56;
          v65 = v60;
          do
          {
            *v64 = v63;
            *v65 = v57;
            v66 = v64 + 1;
            do
            {
              if (v66 == a2)
                goto LABEL_186;
              v67 = *v66++;
              v57 = v67;
            }
            while (*(_DWORD *)((v67 & 0xFFFFFFFFFFFFFFFELL) + 20) < v20);
            v64 = v66 - 1;
            do
            {
              if (v65 == v8)
                goto LABEL_186;
              v68 = *--v65;
              v63 = v68;
            }
            while (*(_DWORD *)((v68 & 0xFFFFFFFFFFFFFFFELL) + 20) >= v20);
          }
          while (v64 < v65);
          v59 = v66 - 2;
        }
        if (v59 != v8)
          *v8 = *v59;
        *v59 = v55;
        if (v56 < v60)
        {
LABEL_81:
          result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,JSC::DFG::NodeComparator &,JSC::DFG::NodeFlowProjection *,false>(v7, v59, a3, a4 & 1);
          a4 = 0;
          v8 = v59 + 1;
          continue;
        }
        v69 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::NodeComparator &,JSC::DFG::NodeFlowProjection *>(v8, v59);
        v8 = v59 + 1;
        result = (uint64_t *)std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::NodeComparator &,JSC::DFG::NodeFlowProjection *>(v59 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v69)
            continue;
          goto LABEL_81;
        }
        a2 = v59;
        if (!v69)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::NodeComparator &,JSC::DFG::NodeFlowProjection *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFFELL) + 20))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v8 = *a1;
      v9 = a1[1];
      v10 = *(_DWORD *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 20);
      v11 = *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFFELL) + 20);
      v12 = *(a2 - 1);
      v13 = *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFFELL) + 20);
      if (v10 >= v11)
      {
        if (v13 < v10)
        {
          a1[1] = v12;
          *(a2 - 1) = v9;
          v34 = *a1;
          v33 = a1[1];
          if (*(_DWORD *)((v33 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFFELL) + 20))
          {
            *a1 = v33;
            a1[1] = v34;
          }
        }
      }
      else
      {
        if (v13 >= v10)
        {
          *a1 = v9;
          a1[1] = v8;
          v44 = *(a2 - 1);
          if (*(_DWORD *)((v44 & 0xFFFFFFFFFFFFFFFELL) + 20) >= v11)
            return result;
          a1[1] = v44;
        }
        else
        {
          *a1 = v12;
        }
        *(a2 - 1) = v8;
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::NodeComparator &,JSC::DFG::NodeFlowProjection *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v23 = a1 + 1;
      v24 = a1 + 2;
      v25 = a1 + 3;
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::NodeComparator &,JSC::DFG::NodeFlowProjection *>(a1, a1 + 1, a1 + 2, a1 + 3);
      v26 = *(a2 - 1);
      v27 = a1[3];
      if (*(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFFELL) + 20))
      {
        *v25 = v26;
        *(a2 - 1) = v27;
        v28 = *v25;
        v29 = *v24;
        v30 = *(_DWORD *)((*v25 & 0xFFFFFFFFFFFFFFFELL) + 20);
        if (v30 < *(_DWORD *)((*v24 & 0xFFFFFFFFFFFFFFFELL) + 20))
        {
          *v24 = v28;
          *v25 = v29;
          v31 = *v23;
          if (v30 < *(_DWORD *)((*v23 & 0xFFFFFFFFFFFFFFFELL) + 20))
          {
            a1[1] = v28;
            a1[2] = v31;
            v32 = *a1;
            if (v30 < *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFFELL) + 20))
            {
              *a1 = v28;
              a1[1] = v32;
            }
          }
        }
      }
      return 1;
    default:
      v15 = a1 + 2;
      v14 = a1[2];
      v16 = a1[1];
      v17 = *a1;
      v18 = *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 20);
      v19 = *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFFELL) + 20);
      v20 = *(_DWORD *)((v14 & 0xFFFFFFFFFFFFFFFELL) + 20);
      if (v18 >= v19)
      {
        if (v20 >= v18)
          goto LABEL_23;
        a1[1] = v14;
        *v15 = v16;
        v21 = a1;
        v22 = a1 + 1;
      }
      else
      {
        v21 = a1;
        v22 = a1 + 2;
        if (v20 < v18)
          goto LABEL_22;
        *a1 = v16;
        a1[1] = v17;
        v21 = a1 + 1;
        v22 = a1 + 2;
      }
      if (v20 >= v19)
        goto LABEL_23;
LABEL_22:
      *v21 = v14;
      *v22 = v17;
LABEL_23:
      v35 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v36 = 0;
      v37 = 24;
      break;
  }
  while (1)
  {
    v38 = *v35;
    v39 = *v15;
    v40 = *(_DWORD *)((*v35 & 0xFFFFFFFFFFFFFFFELL) + 20);
    if (v40 < *(_DWORD *)((v39 & 0xFFFFFFFFFFFFFFFELL) + 20))
    {
      v41 = v37;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v41) = v39;
        v42 = v41 - 8;
        if (v41 == 8)
          break;
        v39 = *(uint64_t *)((char *)a1 + v41 - 16);
        v41 -= 8;
        if (v40 >= *(_DWORD *)((v39 & 0xFFFFFFFFFFFFFFFELL) + 20))
        {
          v43 = (uint64_t *)((char *)a1 + v42);
          goto LABEL_31;
        }
      }
      v43 = a1;
LABEL_31:
      *v43 = v38;
      if (++v36 == 8)
        return v35 + 1 == a2;
    }
    v15 = v35;
    v37 += 8;
    if (++v35 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::NodeComparator &,JSC::DFG::NodeFlowProjection *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a2;
  v5 = *result;
  v6 = *a2 & 0xFFFFFFFFFFFFFFFELL;
  v7 = *(_DWORD *)(v6 + 20);
  v8 = *result & 0xFFFFFFFFFFFFFFFELL;
  v9 = *(_DWORD *)(v8 + 20);
  v10 = *a3;
  v11 = *a3 & 0xFFFFFFFFFFFFFFFELL;
  v12 = *(_DWORD *)(v11 + 20);
  if (v7 >= v9)
  {
    if (v12 < v7)
    {
      *a2 = v10;
      *a3 = v4;
      v13 = *result;
      if (*(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 20) >= *(_DWORD *)((*result & 0xFFFFFFFFFFFFFFFELL) + 20))
      {
        v11 = v6;
        v10 = v4;
      }
      else
      {
        *result = *a2;
        *a2 = v13;
        v10 = *a3;
        v11 = *a3 & 0xFFFFFFFFFFFFFFFELL;
      }
    }
  }
  else
  {
    if (v12 < v7)
    {
      *result = v10;
LABEL_9:
      *a3 = v5;
      v11 = v8;
      v10 = v5;
      goto LABEL_11;
    }
    *result = v4;
    *a2 = v5;
    v10 = *a3;
    v11 = *a3 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(v11 + 20) < v9)
    {
      *a2 = v10;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(_DWORD *)((*a4 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)(v11 + 20))
  {
    *a3 = *a4;
    *a4 = v10;
    v14 = *a2;
    if (*(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 20))
    {
      *a2 = *a3;
      *a3 = v14;
      v15 = *result;
      if (*(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*result & 0xFFFFFFFFFFFFFFFELL) + 20))
      {
        *result = *a2;
        *a2 = v15;
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<JSC::DFG::BasicBlock *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::BasicBlock *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 0x11)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 16;
    goto LABEL_13;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_13:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WTF::HashTable<std::pair<JSC::JSObject *,int>,std::pair<JSC::JSObject *,int>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<JSC::JSObject *,int>>,WTF::HashTraits<std::pair<JSC::JSObject *,int>>,WTF::HashTraits<std::pair<JSC::JSObject *,int>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  _QWORD *v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;

  v10 = result;
  v12 = *result;
  if (!*result)
  {
    result = (uint64_t *)WTF::HashTable<std::pair<JSC::JSObject *,int>,std::pair<JSC::JSObject *,int>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<JSC::JSObject *,int>>,WTF::HashTraits<std::pair<JSC::JSObject *,int>>,WTF::HashTraits<std::pair<JSC::JSObject *,int>>>::rehash(result, 8uLL, 0, a4, a5, a6, a7, a8);
    v12 = *v10;
  }
  v13 = *(_DWORD *)(v12 - 8);
  v14 = *a2;
  v15 = ~(*a2 << 32) + *a2;
  v16 = (v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13);
  v17 = (9 * (v16 ^ (v16 >> 8))) ^ ((9 * (v16 ^ (v16 >> 8))) >> 15);
  v18 = *((_DWORD *)a2 + 2);
  v19 = 9 * ((v18 + ~(v18 << 15)) ^ ((v18 + ~(v18 << 15)) >> 10));
  v20 = (v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11);
  v21 = v13 & ((0xD7862706ELL
              * (unint64_t)(95187966 * (v20 ^ HIWORD(v20))
                                 + 277951225
                                 * (((v17 + ~(v17 << 27)) >> 31) ^ ((_DWORD)v17 + ~((_DWORD)v17 << 27))))) >> 4);
  v22 = v12 + 16 * v21;
  v23 = *(_QWORD *)v22;
  v24 = *(_DWORD *)(v22 + 8);
  if (*(_QWORD *)v22)
    v25 = 0;
  else
    v25 = v24 == 0;
  if (!v25)
  {
    v26 = 0;
    v27 = 1;
    do
    {
      if (v23 == v14 && v24 == v18)
      {
        v36 = 0;
        v35 = v12 + 16 * *(unsigned int *)(v12 - 4);
        goto LABEL_27;
      }
      if (v23 == -1)
        v26 = (_QWORD *)v22;
      v21 = (v21 + v27) & v13;
      v22 = v12 + 16 * v21;
      v23 = *(_QWORD *)v22;
      v24 = *(_DWORD *)(v22 + 8);
      ++v27;
      if (*(_QWORD *)v22)
        v28 = 0;
      else
        v28 = v24 == 0;
    }
    while (!v28);
    if (v26)
    {
      *v26 = 0;
      v26[1] = 0;
      --*(_DWORD *)(*v10 - 16);
      v14 = *a2;
      v18 = *((_DWORD *)a2 + 2);
      v22 = (uint64_t)v26;
    }
  }
  *(_QWORD *)v22 = v14;
  *(_DWORD *)(v22 + 8) = v18;
  v29 = *v10;
  if (*v10)
    v30 = *(_DWORD *)(v29 - 12) + 1;
  else
    v30 = 1;
  *(_DWORD *)(v29 - 12) = v30;
  v31 = *v10;
  if (*v10)
    v32 = *(_DWORD *)(v31 - 12);
  else
    v32 = 0;
  v33 = (*(_DWORD *)(v31 - 16) + v32);
  v34 = *(unsigned int *)(v31 - 4);
  if (v34 > 0x400)
  {
    if (v34 > 2 * v33)
      goto LABEL_25;
LABEL_31:
    result = (uint64_t *)WTF::HashTable<std::pair<JSC::JSObject *,int>,std::pair<JSC::JSObject *,int>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<JSC::JSObject *,int>>,WTF::HashTraits<std::pair<JSC::JSObject *,int>>,WTF::HashTraits<std::pair<JSC::JSObject *,int>>>::expand(v10, v22, a3, a4, a5, a6, a7, a8);
    v22 = (uint64_t)result;
    v31 = *v10;
    if (*v10)
      v34 = *(unsigned int *)(v31 - 4);
    else
      v34 = 0;
    goto LABEL_25;
  }
  if (3 * v34 <= 4 * v33)
    goto LABEL_31;
LABEL_25:
  v35 = v31 + 16 * v34;
  v36 = 1;
LABEL_27:
  *(_QWORD *)a9 = v22;
  *(_QWORD *)(a9 + 8) = v35;
  *(_BYTE *)(a9 + 16) = v36;
  return result;
}

_OWORD *WTF::HashTable<std::pair<JSC::JSObject *,int>,std::pair<JSC::JSObject *,int>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<JSC::JSObject *,int>>,WTF::HashTraits<std::pair<JSC::JSObject *,int>>,WTF::HashTraits<std::pair<JSC::JSObject *,int>>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<std::pair<JSC::JSObject *,int>,std::pair<JSC::JSObject *,int>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<JSC::JSObject *,int>>,WTF::HashTraits<std::pair<JSC::JSObject *,int>>,WTF::HashTraits<std::pair<JSC::JSObject *,int>>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

unint64_t WTF::IdentityHashTranslator<WTF::HashTraits<std::pair<JSC::JSObject *,int>>,WTF::DefaultHash<std::pair<JSC::JSObject *,int>>>::hash<std::pair<JSC::JSObject *,int>>(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v1 = ~(*(_QWORD *)a1 << 32) + *(_QWORD *)a1;
  v2 = (v1 ^ (v1 >> 22)) + ~((v1 ^ (v1 >> 22)) << 13);
  v3 = (9 * (v2 ^ (v2 >> 8))) ^ ((9 * (v2 ^ (v2 >> 8))) >> 15);
  v4 = *(_DWORD *)(a1 + 8) + ~(*(_DWORD *)(a1 + 8) << 15);
  v5 = (9 * (v4 ^ (v4 >> 10))) ^ ((9 * (v4 ^ (v4 >> 10))) >> 6);
  return (0xD7862706ELL
        * (unint64_t)(95187966 * ((v5 + ~(v5 << 11)) ^ ((v5 + ~(v5 << 11)) >> 16))
                           + 277951225 * (((v3 + ~(v3 << 27)) >> 31) ^ ((_DWORD)v3 + ~((_DWORD)v3 << 27))))) >> 4;
}

_OWORD *WTF::HashTable<std::pair<JSC::JSObject *,int>,std::pair<JSC::JSObject *,int>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<JSC::JSObject *,int>>,WTF::HashTraits<std::pair<JSC::JSObject *,int>>,WTF::HashTraits<std::pair<JSC::JSObject *,int>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  BOOL v36;
  _OWORD *v37;
  _OWORD *result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = v11 + 16 * v22;
      v15 = *(_QWORD *)v24;
      if (*(_QWORD *)v24 != -1)
      {
        v25 = *(_DWORD *)(v24 + 8);
        if (v15 || v25 != 0)
        {
          v27 = *a1;
          if (*a1)
            v28 = *(_DWORD *)(v27 - 8);
          else
            v28 = 0;
          v29 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
          v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
          v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
          v32 = 9 * ((v25 + ~(v25 << 15)) ^ ((v25 + ~(v25 << 15)) >> 10));
          v33 = (v32 ^ (v32 >> 6)) + ~((v32 ^ (v32 >> 6)) << 11);
          v16 = v28 & ((0xD7862706ELL
                                    * (unint64_t)(277951225 * ((v31 >> 31) ^ v31)
                                                       + 95187966 * (v33 ^ HIWORD(v33)))) >> 4);
          v34 = 1;
          do
          {
            v15 = v16;
            v35 = v27 + 16 * v16;
            v17 = *(_QWORD *)v35;
            v18 = *(unsigned int *)(v35 + 8);
            v16 = ((_DWORD)v15 + v34++) & v28;
            if (v17)
              v36 = 0;
            else
              v36 = (_DWORD)v18 == 0;
          }
          while (!v36);
          v37 = (_OWORD *)(v27 + 16 * v15);
          *v37 = *(_OWORD *)v24;
          if (v24 == a3)
            v23 = v37;
        }
      }
      ++v22;
    }
    while (v22 != v12);
    goto LABEL_21;
  }
  v23 = 0;
  result = 0;
  if (v11)
  {
LABEL_21:
    WTF::fastFree(v11 - 16, (void *)v15, v16, v17, v18, v19, v20, v21);
    return v23;
  }
  return result;
}

uint64_t *WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<std::unique_ptr<JSC::FullBytecodeLiveness>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *result;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  WTF *v38;
  _QWORD *v39;
  uint64_t v40;
  WTF **v41;
  uint64_t v42;
  _QWORD *v43;
  WTF *v44;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v24 = 0;
    v22 = 0;
    v25 = v12;
    do
    {
      v26 = (uint64_t *)(v11 + 16 * v24);
      v27 = *v26;
      if (*v26)
      {
        if (v27 != -1)
        {
          v28 = *a1;
          if (*a1)
            v29 = *(_DWORD *)(v28 - 8);
          else
            v29 = 0;
          v30 = (~(v27 << 32) + v27) ^ ((unint64_t)(~(v27 << 32) + v27) >> 22);
          v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
          v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
          v33 = v29 & ((v32 >> 31) ^ v32);
          v34 = 1;
          do
          {
            v35 = v33;
            v36 = *(_QWORD *)(v28 + 16 * v33);
            v33 = (v33 + v34++) & v29;
          }
          while (v36);
          v37 = (uint64_t *)(v28 + 16 * v35);
          v39 = v37 + 1;
          v38 = (WTF *)v37[1];
          v37[1] = 0;
          if (v38)
            std::default_delete<JSC::FullBytecodeLiveness>::operator()[abi:sn180100]((int)v39, v38, v16, v17, v18, v19, v20, v21);
          *v37 = *v26;
          v40 = v11 + 16 * v24;
          v42 = *(_QWORD *)(v40 + 8);
          v41 = (WTF **)(v40 + 8);
          *v41 = 0;
          *v39 = v42;
          v15 = *v41;
          *v41 = 0;
          if (v15)
            std::default_delete<JSC::FullBytecodeLiveness>::operator()[abi:sn180100]((int)v41, v15, v16, v17, v18, v19, v20, v21);
          if (v26 == (uint64_t *)a3)
            v22 = v37;
        }
      }
      else
      {
        v44 = (WTF *)v26[1];
        v43 = v26 + 1;
        v15 = v44;
        *v43 = 0;
        if (v44)
          std::default_delete<JSC::FullBytecodeLiveness>::operator()[abi:sn180100]((int)v43, v15, v16, v17, v18, v19, v20, v21);
      }
      ++v24;
    }
    while (v24 != v25);
    goto LABEL_23;
  }
  v22 = 0;
  result = 0;
  if (v11)
  {
LABEL_23:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

_OWORD *WTF::HashTable<long long,WTF::KeyValuePair<long long,JSC::DFG::FrozenValue *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,JSC::DFG::FrozenValue *>>,WTF::IntHash<long long>,WTF::HashMap<long long,JSC::DFG::FrozenValue *,WTF::IntHash<long long>,JSC::EncodedJSValueHashTraits,WTF::HashTraits<JSC::DFG::FrozenValue *>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::EncodedJSValueHashTraits>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (_QWORD *)(v11 + 16 * v22);
      if ((*v24 | 4) != 4)
      {
        v25 = *a1;
        if (*a1)
          v26 = *(_DWORD *)(v25 - 8);
        else
          v26 = 0;
        v27 = (*v24 + ~(*v24 << 32)) ^ ((*v24 + ~(*v24 << 32)) >> 22);
        v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((unint64_t)(v27 + ~(v27 << 13)) >> 8));
        v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
        v30 = v26 & ((v29 >> 31) ^ v29);
        v31 = 1;
        do
        {
          v32 = v30;
          v33 = *(_QWORD *)(v25 + 16 * v30);
          v30 = (v30 + v31++) & v26;
        }
        while (v33);
        v34 = (_OWORD *)(v25 + 16 * v32);
        *v34 = *(_OWORD *)v24;
        if (v24 == (_QWORD *)a3)
          v23 = v34;
      }
      ++v22;
    }
    while (v22 != v12);
    goto LABEL_13;
  }
  v23 = 0;
  result = 0;
  if (v11)
  {
LABEL_13:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v23;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  v22 = 0;
  if (v12)
  {
    v24 = v12;
    v25 = (_QWORD *)v11;
    do
    {
      if (*v25 != -1)
      {
        if (*v25)
        {
          v26 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(*a1, (uint64_t)v25, v16, v17, v18, v19, v20, v21);
          WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>::~KeyValuePair((uint64_t)v25, v27, v28, v29, v30, v31, v32, v33);
          if (v25 == (_QWORD *)a3)
            v22 = v26;
        }
        else
        {
          WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,std::unique_ptr<StaticFunctionEntry>>::~KeyValuePair((uint64_t)v25, v15, v16, v17, v18, v19, v20, v21);
        }
      }
      v25 += 2;
      --v24;
    }
    while (v24);
    goto LABEL_14;
  }
  result = 0;
  if (v11)
  {
LABEL_14:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;

  if (a1)
    v10 = *(_DWORD *)(a1 - 8);
  else
    v10 = 0;
  v11 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if (v11 < 0x100)
    v12 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a2);
  else
    v12 = v11 >> 8;
  v13 = 0;
  do
  {
    v14 = v12 & v10;
    v12 = ++v13 + v14;
  }
  while (*(_QWORD *)(a1 + 16 * v14));
  v15 = a1 + 16 * v14;
  v16 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  if (v16)
  {
    WTF::fastFree(v16, (void *)a2, a3, a4, a5, a6, a7, a8);
    v24 = *(WTF::StringImpl **)v15;
    *(_QWORD *)v15 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
      }
      else
      {
        *(_DWORD *)v24 -= 2;
      }
    }
  }
  else
  {
    *(_QWORD *)v15 = 0;
  }
  v33 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)v15 = v33;
  v34 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(v15 + 8) = v34;
  return v15;
}

JSC::DFG::InPlaceAbstractState *JSC::DFG::InPlaceAbstractState::InPlaceAbstractState(JSC::DFG::InPlaceAbstractState *this, JSC::DFG::Graph *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _OWORD v12[2];

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 123);
  if (!*((_DWORD *)a2 + 15))
    goto LABEL_13;
  v4 = **((_QWORD **)a2 + 6);
  memset(v12, 0, 24);
  v5 = *(unsigned int *)(v4 + 84);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 7) = v5;
  if ((_DWORD)v5)
  {
    if (v5 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x19840D904);
    }
    v6 = WTF::fastMalloc((WTF *)(32 * v5));
    *((_DWORD *)this + 6) = v5;
    *((_QWORD *)this + 2) = v6;
    v7 = *((unsigned int *)this + 7);
    if ((_DWORD)v7)
    {
      v8 = v6 + 32 * v7;
      do
      {
        *(_QWORD *)v6 = 0;
        *(_OWORD *)(v6 + 8) = *(_OWORD *)((char *)v12 + 8);
        *(_QWORD *)(v6 + 24) = 0;
        v6 += 32;
      }
      while (v6 != v8);
    }
  }
  *((_QWORD *)this + 4) = *(_QWORD *)(v4 + 88);
  v9 = *((unsigned int *)a2 + 77);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 13) = v9;
  if ((_DWORD)v9)
  {
    if (!(v9 >> 27))
    {
      v10 = (void *)WTF::fastMalloc((WTF *)(32 * v9));
      *((_DWORD *)this + 12) = v9;
      *((_QWORD *)this + 5) = v10;
      bzero(v10, 32 * *((unsigned int *)this + 13));
      goto LABEL_10;
    }
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x19840D8FCLL);
  }
LABEL_10:
  *((_DWORD *)this + 21) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = 0;
  return this;
}

void JSC::DFG::InPlaceAbstractState::~InPlaceAbstractState(JSC::DFG::InPlaceAbstractState *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *((_QWORD *)this + 7);
  if (v9)
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((unsigned int *)this + 13);
  v11 = (_QWORD *)*((_QWORD *)this + 5);
  if (!(_DWORD)v10)
  {
    if (!v11)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 32 * v10;
  do
  {
    if ((*v11 & 1) != 0)
      WTF::fastFree(*v11 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v11 += 4;
    v15 -= 32;
  }
  while (v15);
  v11 = (_QWORD *)*((_QWORD *)this + 5);
  if (v11)
  {
LABEL_5:
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_6:
  v12 = *((unsigned int *)this + 7);
  v13 = (_QWORD *)*((_QWORD *)this + 2);
  if ((_DWORD)v12)
  {
    v14 = 32 * v12;
    do
    {
      if ((*v13 & 1) != 0)
        WTF::fastFree(*v13 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v13 += 4;
      v14 -= 32;
    }
    while (v14);
    v13 = (_QWORD *)*((_QWORD *)this + 2);
  }
  if (v13)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::DFG::InPlaceAbstractState::beginBasicBlock(JSC::DFG::InPlaceAbstractState *this, JSC::DFG::BasicBlock *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *casual;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  v10 = (_DWORD *)*((_QWORD *)this + 1);
  v11 = v10 + 2;
  v12 = *(unsigned int *)(*(_QWORD *)v10 + 1044);
  v13 = v10[5];
  if (v13 < v12)
  {
    if (v10[4] < v12)
      WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v10 + 2), (void *)*(unsigned int *)(*(_QWORD *)v10 + 1044), a3, a4, a5, a6, a7, a8);
    if (*v11)
      bzero((void *)(*v11 + 32 * v10[5]), 32 * v12 - 32 * v10[5]);
  }
  else if ((_DWORD)v13 != (_DWORD)v12)
  {
    v14 = (_QWORD *)(*v11 + 32 * v12);
    v15 = 32 * v13 - 32 * v12;
    do
    {
      if ((*v14 & 1) != 0)
        WTF::fastFree(*v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v14 += 4;
      v15 -= 32;
    }
    while (v15);
  }
  v10[5] = v12;
  if (*(_DWORD *)(*(_QWORD *)v10 + 944) == 2)
  {
    v37 = v10 + 6;
    v38 = *(unsigned int *)(*(_QWORD *)v10 + 1044);
    v39 = v10[9];
    if (v39 < v38)
    {
      if (v10[8] < v38)
        WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v10 + 6), (void *)*(unsigned int *)(*(_QWORD *)v10 + 1044), a3, a4, a5, a6, a7, a8);
      if (*v37)
        bzero((void *)(*v37 + 32 * v10[9]), 32 * v38 - 32 * v10[9]);
    }
    else if ((_DWORD)v39 != (_DWORD)v38)
    {
      v40 = (_QWORD *)(*v37 + 32 * v38);
      v41 = 32 * v39 - 32 * v38;
      do
      {
        if ((*v40 & 1) != 0)
          WTF::fastFree(*v40 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v40 += 4;
        v41 -= 32;
      }
      while (v41);
    }
    v10[9] = v38;
  }
  if (*((_BYTE *)a2 + 12))
    v16 = 2;
  else
    v16 = 3;
  *((_DWORD *)this + 21) = v16;
  *((_DWORD *)this + 22) = v16;
  *((_QWORD *)this + 9) = a2;
  v17 = *((unsigned int *)this + 7);
  v18 = *((_QWORD *)this + 8);
  if (v18 < v17)
    v17 = *((_QWORD *)this + 8);
  if (v17 > 0x1F)
  {
    v21 = v17 & 0xFFFFFFE0;
    v22 = (char *)*((_QWORD *)this + 7);
    if (v21 < v17)
    {
      do
      {
        *(_DWORD *)&v22[(v21 >> 3) & 0x1FFFFFFFFFFFFFFCLL] &= ~(1 << v21);
        ++v21;
      }
      while (v17 != v21);
    }
    bzero(v22, (v17 >> 3) & 0x1FFFFFFC);
  }
  else if (v17)
  {
    v19 = 0;
    v20 = *((_QWORD *)this + 7);
    do
    {
      *(_DWORD *)(v20 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) &= ~(1 << v19);
      ++v19;
    }
    while (v17 != v19);
  }
  v23 = *((unsigned int *)this + 7);
  if (v18 < v23)
  {
    v42 = v18 + 31;
    v43 = v23 + 31;
    if (((v23 + 31) ^ (v18 + 31)) < 0x20)
    {
LABEL_68:
      *((_QWORD *)this + 8) = v23;
      goto LABEL_22;
    }
    v44 = v43 >> 5;
    if (v43 >> 5 < v42 >> 5)
    {
      __break(0xC471u);
      JUMPOUT(0x19840DE54);
    }
    v45 = v42 >> 5;
    v46 = 4 * v44;
    v47 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v47)
      goto LABEL_56;
    v48 = (unint64_t)(v46 + 15) >> 4;
    if (v23 <= 0xD00)
    {
      v49 = 23 * v48 + 7;
    }
    else if (v23 > 0x13880
           || (v49 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v48 + 626),
               *(_DWORD *)(v47 + 8052) <= v49))
    {
LABEL_56:
      casual = (char *)bmalloc_allocate_casual(v46, 1);
LABEL_65:
      memcpy(casual, *((const void **)this + 7), 4 * v45);
      bzero(&casual[4 * v45], 4 * (v44 - v45));
      v54 = *((_QWORD *)this + 7);
      if (v54)
        WTF::fastFree(v54, a2, a3, a4, a5, a6, a7, a8);
      *((_QWORD *)this + 7) = casual;
      goto LABEL_68;
    }
    v51 = v47 + 8 * v49;
    v52 = v51 + 8064;
    *(_BYTE *)(v51 + 8064) = 1;
    v53 = *(unsigned int *)(v51 + 8080);
    if ((_DWORD)v53)
    {
      *(_DWORD *)(v52 + 16) = v53 - *(_DWORD *)(v52 + 20);
      casual = (char *)(*(_QWORD *)(v52 + 8) - v53);
    }
    else
    {
      v55 = *(_QWORD *)(v52 + 40);
      v56 = *(_QWORD *)(v52 + 24);
      if (!v55)
      {
        if (*(_BYTE *)(v52 + 5) == 6)
        {
          v58 = *(unsigned int *)(v52 + 32);
          v59 = *(_DWORD *)(v52 + 36);
          if (v58 < v59)
          {
            *(_QWORD *)(v52 + 8 * v58 + 56) = 0;
            v60 = (unint64_t *)(8 * v49 + 8 * v58 + v47 + 8128);
            v61 = v59 - 1 - v58;
            while (v61)
            {
              v56 += 1024;
              v63 = *v60++;
              v62 = v63;
              LODWORD(v58) = v58 + 1;
              --v61;
              if (v63)
              {
                v55 = __rbit64(v62);
                *(_DWORD *)(v52 + 32) = v58;
                *(_QWORD *)(v52 + 24) = v56;
                goto LABEL_70;
              }
            }
            *(_DWORD *)(v52 + 32) = v59;
          }
        }
        *(_BYTE *)v52 = 0;
        goto LABEL_56;
      }
LABEL_70:
      v57 = __clz(v55);
      *(_QWORD *)(v52 + 40) = v55 & ~(0x8000000000000000 >> v57);
      casual = (char *)(v56 + 16 * v57);
    }
    *(_BYTE *)v52 = 0;
    goto LABEL_65;
  }
LABEL_22:
  if (*(_DWORD *)(*(_QWORD *)this + 944) == 2)
  {
    v24 = *((_QWORD *)a2 + 25);
    v25 = *(unsigned int *)(v24 + 108);
    if ((_DWORD)v25)
    {
      v26 = 40 * v25;
      v27 = *(_QWORD *)(v24 + 96) + 8;
      do
      {
        v28 = *(_QWORD *)(v27 - 8);
        if (v28)
        {
          v29 = v28 & 0xFFFFFFFFFFFFFFFELL;
          if ((v28 & 1) == 0)
          {
            v30 = (_QWORD *)(*((_QWORD *)this + 1) + 8);
LABEL_29:
            v31 = *v30 + 32 * *(unsigned int *)(v29 + 20);
            v32 = *(_QWORD *)v31;
            if (v27 != v31)
            {
              if ((v32 & 1) != 0)
                WTF::fastFree(v32 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
              v33 = *(_QWORD *)v27;
              if ((*(_QWORD *)v27 & 1) == 0 || v33 == 4)
              {
                if ((*(_BYTE *)v31 & 2) != 0)
                  v32 = v33 | 2;
                else
                  v32 = v33 & 0xFFFFFFFFFFFFFFFDLL;
                *(_QWORD *)v31 = v32;
              }
              else
              {
                WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v31, (_QWORD *)v27);
                v32 = *(_QWORD *)v31;
              }
            }
            v34 = v32 & 0xFFFFFFFFFFFFFFFDLL;
            v35 = v32 | 2;
            if ((*(_BYTE *)v27 & 2) == 0)
              v35 = v34;
            *(_QWORD *)v31 = v35;
            v36 = *(_QWORD *)(v27 + 24);
            *(_OWORD *)(v31 + 8) = *(_OWORD *)(v27 + 8);
            *(_QWORD *)(v31 + 24) = v36;
            *(_DWORD *)(v31 + 20) = v16;
            goto LABEL_39;
          }
          if (*(_WORD *)(v29 + 18) == 27)
          {
            v30 = (_QWORD *)(*((_QWORD *)this + 1) + 24);
            goto LABEL_29;
          }
        }
LABEL_39:
        v27 += 40;
        v26 -= 40;
      }
      while (v26);
    }
  }
  *(_WORD *)((char *)a2 + 15) = 1;
  *((_BYTE *)this + 80) = 1;
  *((_BYTE *)this + 92) = 0;
  *((_BYTE *)this + 82) = *((_BYTE *)a2 + 12);
}

uint64_t JSC::DFG::InPlaceAbstractState::variablesForDebugging(JSC::DFG::InPlaceAbstractState *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  result = (uint64_t)this + 16;
  v10 = *((unsigned int *)this + 7);
  if ((_DWORD)v10)
  {
    v11 = *((_QWORD *)this + 7);
    v12 = 32 * v10 - 12;
    do
    {
      --v10;
      if (((1 << v10) & *(_DWORD *)(v11 + 4 * (v10 >> 5))) == 0)
      {
        v13 = *((_QWORD *)this + 2);
        v14 = v13 + v12;
        v16 = (uint64_t *)(v13 + v12 - 20);
        v15 = *v16;
        v17 = *(_QWORD *)(*((_QWORD *)this + 9) + 120);
        v18 = v17 + v12;
        v19 = (uint64_t *)(v17 + v12 - 20);
        if (v13 != v17)
        {
          if ((v15 & 1) != 0)
          {
            v26 = result;
            WTF::fastFree(v15 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
            result = v26;
          }
          v20 = *v19;
          if ((*v19 & 1) == 0 || v20 == 4)
          {
            v21 = v20 & 0xFFFFFFFFFFFFFFFDLL;
            v15 = v20 | 2;
            if ((*(_BYTE *)v16 & 2) == 0)
              v15 = v21;
            *v16 = v15;
          }
          else
          {
            v25 = result;
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v16, v19);
            result = v25;
            v15 = *v16;
          }
        }
        v22 = v15 & 0xFFFFFFFFFFFFFFFDLL;
        v23 = v15 | 2;
        if ((*(_BYTE *)v19 & 2) == 0)
          v23 = v22;
        *v16 = v23;
        v24 = *(_OWORD *)(v18 - 12);
        *(_QWORD *)(v14 + 4) = *(_QWORD *)(v18 + 4);
        *(_OWORD *)(v14 - 12) = v24;
        *(_DWORD *)v14 = *((_DWORD *)this + 21);
        v11 = *((_QWORD *)this + 7);
        *(_DWORD *)(v11 + 4 * (v10 >> 5)) |= 1 << v10;
      }
      v12 -= 32;
    }
    while (v12 != -12);
  }
  return result;
}

void JSC::DFG::InPlaceAbstractState::initialize(JSC::DFG **this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG **v8;
  JSC::DFG *v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  __int128 v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  JSC::DFG *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  JSC::DFG **v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  JSC::DFG **v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  unint64_t v96;

  v8 = this;
  v9 = *this;
  v10 = *((unsigned int *)*this + 35);
  if (!(_DWORD)v10)
    goto LABEL_72;
  v12 = (uint64_t *)*((_QWORD *)v9 + 16);
  v13 = &v12[v10];
  do
  {
    v14 = *v12;
    *(_WORD *)(v14 + 15) = 256;
    *(_WORD *)(v14 + 12) = 0;
    if (*((_DWORD *)*this + 236) != 2)
    {
      v15 = *((_QWORD *)*this + 55);
      if (v15)
      {
        v16 = *(_DWORD *)(v15 - 8);
        v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
        v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        v20 = v16 & ((v19 >> 31) ^ v19);
        v21 = (uint64_t *)(v15 + 88 * v20);
        v22 = *v21;
        if (*v21 != v14)
        {
          v94 = 1;
          while (v22)
          {
            v20 = (v20 + v94) & v16;
            v21 = (uint64_t *)(v15 + 88 * v20);
            v22 = *v21;
            ++v94;
            if (*v21 == v14)
              goto LABEL_6;
          }
          v21 = (uint64_t *)(v15 + 88 * *(unsigned int *)(v15 - 4));
        }
      }
      else
      {
        v21 = 0;
      }
LABEL_6:
      if (*(_DWORD *)(v14 + 136))
      {
        v23 = 0;
        while (2)
        {
          v24 = *(_QWORD *)(v14 + 144) + 32 * v23;
          *(_QWORD *)(v24 + 8) = 0;
          *(_DWORD *)(v24 + 16) = 0;
          if ((*(_QWORD *)v24 & 1) != 0)
            WTF::fastFree(*(_QWORD *)v24 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
          *(_QWORD *)v24 = 0;
          *(_QWORD *)(v24 + 24) = 0;
          if (v23 >= *((unsigned int *)v21 + 5))
          {
            __break(0xC471u);
            JUMPOUT(0x19840EA4CLL);
          }
          v25 = *(_QWORD *)(v21[1] + 8 * v23);
          if (!v25)
            goto LABEL_18;
          v26 = *(_QWORD **)(v25 + 72);
          v27 = v26;
          do
          {
            v28 = v27;
            v27 = (_QWORD *)*v27;
          }
          while (v27);
          if (v28 != v26)
            *v26 = v28;
          if (*((_BYTE *)v28 + 40) || !*((_BYTE *)v28 + 43))
            goto LABEL_18;
          if (*((_DWORD *)v28 + 14) == 1)
            goto LABEL_146;
          v31 = v28;
          do
          {
            v32 = v31;
            v31 = (_QWORD *)*v31;
          }
          while (v31);
          if (v32 != v28)
            *v28 = v32;
          v33 = v32[2];
          if (!v33)
            goto LABEL_18;
          if ((v33 & 0xFFFFFFFCFFFFFFFFLL) != 0)
          {
            if (*((_DWORD *)v28 + 7))
            {
              v34 = v28;
              do
              {
                v35 = v34;
                v34 = (_QWORD *)*v34;
              }
              while (v34);
              if (v35 != v28)
                *v28 = v35;
              v36 = v35[2];
              if (v36 && (v36 & 0xFFFFFFF0FFFFFFFFLL) == 0)
              {
LABEL_146:
                JSC::DFG::Graph::logAssertionFailure(*this, 0, (const WTF::CString *)"./dfg/DFGInPlaceAbstractState.cpp", (const char *)0x99, "void JSC::DFG::InPlaceAbstractState::initialize()", "Bad flush format for argument");
                __break(0xC471u);
                goto LABEL_163;
              }
            }
            if ((v33 & 0x2800FFFFFFF7) != 0 && (v33 & 0xFFFFD7FF00000008) == 0)
            {
              JSC::DFG::AbstractValue::setType((JSC::DFG::AbstractValue *)(*(_QWORD *)(v14 + 120) + 32 * v23), *this, 0x2C00FFFFFFF7, a4, a5, a6, a7, a8);
LABEL_22:
              ++v23;
              v30 = *(unsigned int *)(v14 + 136);
              if (v23 >= v30)
                goto LABEL_48;
              continue;
            }
            if (v33 == 0x10000000000)
            {
              v29 = *(_QWORD *)(v14 + 120) + 32 * v23;
              if ((*(_QWORD *)v29 & 1) != 0)
                WTF::fastFree(*(_QWORD *)v29 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
              *(_DWORD *)(v29 + 16) = 0;
              v38 = xmmword_199123930;
              goto LABEL_46;
            }
LABEL_18:
            v29 = *(_QWORD *)(v14 + 120) + 32 * v23;
            *(_QWORD *)(v29 + 8) = 0x3F73FFFFFFF7;
            *(_DWORD *)(v29 + 16) = -21020677;
            if ((*(_QWORD *)v29 & 1) != 0)
              WTF::fastFree(*(_QWORD *)v29 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
            *(_QWORD *)v29 = 4;
          }
          else
          {
            v29 = *(_QWORD *)(v14 + 120) + 32 * v23;
            if ((*(_QWORD *)v29 & 1) != 0)
              WTF::fastFree(*(_QWORD *)v29 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
            *(_DWORD *)(v29 + 16) = 0;
            v38 = xmmword_199123920;
LABEL_46:
            *(_OWORD *)v29 = v38;
          }
          break;
        }
        *(_QWORD *)(v29 + 24) = 0;
        goto LABEL_22;
      }
LABEL_47:
      v30 = 0;
      goto LABEL_48;
    }
    if (!*(_DWORD *)(v14 + 136))
      goto LABEL_47;
    v46 = 0;
    v45 = 0;
    do
    {
      v43 = *(_QWORD *)(v14 + 120) + v46;
      *(_QWORD *)(v43 + 8) = 0;
      *(_DWORD *)(v43 + 16) = 0;
      if ((*(_QWORD *)v43 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v43 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      *(_QWORD *)v43 = 0;
      *(_QWORD *)(v43 + 24) = 0;
      v44 = *(_QWORD *)(v14 + 144) + v46;
      *(_QWORD *)(v44 + 8) = 0;
      *(_DWORD *)(v44 + 16) = 0;
      if ((*(_QWORD *)v44 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v44 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      *(_QWORD *)v44 = 0;
      *(_QWORD *)(v44 + 24) = 0;
      ++v45;
      v30 = *(unsigned int *)(v14 + 136);
      v46 += 32;
    }
    while (v45 < v30);
LABEL_48:
    if (*(_DWORD *)(v14 + 140))
    {
      v39 = 0;
      do
      {
        v40 = *(_QWORD *)(v14 + 120) + 32 * (v39 + *(unsigned int *)(v14 + 136));
        *(_QWORD *)(v40 + 8) = 0;
        *(_DWORD *)(v40 + 16) = 0;
        if ((*(_QWORD *)v40 & 1) != 0)
          WTF::fastFree(*(_QWORD *)v40 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        *(_QWORD *)v40 = 0;
        *(_QWORD *)(v40 + 24) = 0;
        v41 = *(_QWORD *)(v14 + 144) + 32 * (v39 + *(unsigned int *)(v14 + 160));
        *(_QWORD *)(v41 + 8) = 0;
        *(_DWORD *)(v41 + 16) = 0;
        if ((*(_QWORD *)v41 & 1) != 0)
          WTF::fastFree(*(_QWORD *)v41 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        *(_QWORD *)v41 = 0;
        *(_QWORD *)(v41 + 24) = 0;
        ++v39;
        v42 = *(unsigned int *)(v14 + 140);
      }
      while (v39 < v42);
      v30 = *(unsigned int *)(v14 + 136);
    }
    else
    {
      v42 = 0;
    }
    if (v30 + v42 != *(_DWORD *)(v14 + 132))
    {
      v47 = 0;
      do
      {
        v48 = *(_QWORD *)(v14 + 120) + 32 * (v47 + v42 + v30);
        *(_QWORD *)(v48 + 8) = 0;
        *(_DWORD *)(v48 + 16) = 0;
        if ((*(_QWORD *)v48 & 1) != 0)
          WTF::fastFree(*(_QWORD *)v48 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        *(_QWORD *)v48 = 0;
        *(_QWORD *)(v48 + 24) = 0;
        v49 = *(_QWORD *)(v14 + 144)
            + 32 * (v47 + *(unsigned int *)(v14 + 160) + (unint64_t)*(unsigned int *)(v14 + 164));
        *(_QWORD *)(v49 + 8) = 0;
        *(_DWORD *)(v49 + 16) = 0;
        if ((*(_QWORD *)v49 & 1) != 0)
          WTF::fastFree(*(_QWORD *)v49 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        *(_QWORD *)v49 = 0;
        *(_QWORD *)(v49 + 24) = 0;
        ++v47;
        v30 = *(unsigned int *)(v14 + 136);
        v42 = *(unsigned int *)(v14 + 140);
      }
      while (v47 < *(unsigned int *)(v14 + 132) - (v30 + v42));
    }
    ++v12;
  }
  while (v12 != v13);
  v8 = this;
  v9 = *this;
LABEL_72:
  v50 = *((unsigned int *)v9 + 15);
  if ((_DWORD)v50)
  {
    v51 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v9 + 6) + 8 * v51))
    {
      if (v50 == ++v51)
        goto LABEL_103;
    }
    if ((_DWORD)v50 != (_DWORD)v51)
    {
      v52 = *((_DWORD *)v9 + 15);
      while (1)
      {
        if (v52 <= v51)
        {
          __break(0xC471u);
          JUMPOUT(0x19840EA44);
        }
        v53 = *(_QWORD *)(*((_QWORD *)v9 + 6) + 8 * v51);
        v54 = *v8;
        if (*((_DWORD *)*v8 + 236) == 2)
        {
          if (!*((_DWORD *)v54 + 15))
          {
            __break(0xC471u);
LABEL_163:
            JUMPOUT(0x19840E8C0);
          }
          if (**((_QWORD **)v54 + 6) != v53)
            goto LABEL_86;
        }
        else
        {
          v55 = *((unsigned int *)v54 + 35);
          if (v55 <= 4)
          {
            if ((_DWORD)v55)
            {
              v56 = (_QWORD *)*((_QWORD *)v54 + 16);
              while (*v56 != v53)
              {
                ++v56;
                if (!--v55)
                  goto LABEL_86;
              }
              goto LABEL_94;
            }
LABEL_86:
            *(_WORD *)(v53 + 15) = 0;
            *(_WORD *)(v53 + 12) = 0;
            if (*(_DWORD *)(v53 + 132))
            {
              v57 = 0;
              v58 = 0;
              do
              {
                v59 = *(_QWORD *)(v53 + 120) + v57;
                *(_QWORD *)(v59 + 8) = 0;
                *(_DWORD *)(v59 + 16) = 0;
                if ((*(_QWORD *)v59 & 1) != 0)
                  WTF::fastFree(*(_QWORD *)v59 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                *(_QWORD *)v59 = 0;
                *(_QWORD *)(v59 + 24) = 0;
                v60 = *(_QWORD *)(v53 + 144) + v57;
                *(_QWORD *)(v60 + 8) = 0;
                *(_DWORD *)(v60 + 16) = 0;
                if ((*(_QWORD *)v60 & 1) != 0)
                  WTF::fastFree(*(_QWORD *)v60 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                *(_QWORD *)v60 = 0;
                *(_QWORD *)(v60 + 24) = 0;
                ++v58;
                v57 += 32;
              }
              while (v58 < *(unsigned int *)(v53 + 132));
              v52 = *((_DWORD *)v9 + 15);
            }
            goto LABEL_94;
          }
          v95 = *((_QWORD *)v54 + 55);
          if (!v95
            || !WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::DFG::BasicBlock *>>,JSC::DFG::BasicBlock *>(v95, *(_QWORD *)(*((_QWORD *)v9 + 6) + 8 * v51)))
          {
            goto LABEL_86;
          }
        }
LABEL_94:
        v51 = (v51 + 1);
        if (v52 > v51)
        {
          while (!*(_QWORD *)(*((_QWORD *)v9 + 6) + 8 * v51))
          {
            if (v52 == ++v51)
            {
              LODWORD(v51) = v52;
              break;
            }
          }
        }
        if ((_DWORD)v50 == (_DWORD)v51)
        {
          v9 = *v8;
          break;
        }
      }
    }
  }
LABEL_103:
  if (*((_DWORD *)v9 + 236) == 2 && *((_DWORD *)v9 + 15))
  {
    v61 = 0;
    do
    {
      v62 = *(_QWORD *)(*((_QWORD *)v9 + 6) + 8 * v61);
      if (v62)
      {
        v63 = *(_QWORD *)(v62 + 200);
        v64 = *(unsigned int *)(v63 + 76);
        if ((_DWORD)v64)
        {
          if (v64 >= 0x6666667)
          {
            __break(0xC471u);
            JUMPOUT(0x19840EA54);
          }
          v65 = 40 * v64;
          v66 = WTF::fastMalloc((WTF *)(40 * v64));
          v67 = v66;
          v68 = (v65 & 0xFFFFFFF8) / 0x28uLL;
          if (*(_DWORD *)(v63 + 76))
          {
            v69 = 0;
            v70 = v66 + 16;
            do
            {
              *(_QWORD *)(v70 - 16) = *(_QWORD *)(*(_QWORD *)(v63 + 64) + 8 * v69);
              *(_QWORD *)(v70 - 8) = 0;
              *(_OWORD *)v70 = 0uLL;
              *(_QWORD *)(v70 + 16) = 0;
              ++v69;
              v70 += 40;
            }
            while (v69 < *(unsigned int *)(v63 + 76));
          }
          else
          {
            LODWORD(v69) = 0;
          }
        }
        else
        {
          v68 = 0;
          LODWORD(v69) = 0;
          v67 = 0;
        }
        v71 = *(unsigned int *)(v63 + 108);
        v72 = *(_QWORD *)(v63 + 96);
        if ((_DWORD)v71)
        {
          v84 = v8;
          v85 = 40 * v71;
          v86 = (uint64_t *)(v72 + 8);
          do
          {
            v88 = *v86;
            v86 += 5;
            v87 = v88;
            if ((v88 & 1) != 0)
            {
              v96 = v68;
              WTF::fastFree(v87 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
              v68 = v96;
            }
            v85 -= 40;
          }
          while (v85);
          v72 = *(_QWORD *)(v63 + 96);
          v8 = v84;
        }
        if (v72)
        {
          *(_QWORD *)(v63 + 96) = 0;
          *(_DWORD *)(v63 + 104) = 0;
          v73 = v68;
          WTF::fastFree(v72, a2, a3, a4, a5, a6, a7, a8);
          LODWORD(v68) = v73;
        }
        *(_QWORD *)(v63 + 96) = v67;
        *(_DWORD *)(v63 + 104) = v68;
        *(_DWORD *)(v63 + 108) = v69;
        v74 = *(_QWORD *)(v62 + 200);
        v75 = *(unsigned int *)(v74 + 92);
        if ((_DWORD)v75)
        {
          if (v75 >= 0x6666667)
          {
            __break(0xC471u);
            JUMPOUT(0x19840EA64);
          }
          v76 = 40 * v75;
          v77 = WTF::fastMalloc((WTF *)(40 * v75));
          v78 = v77;
          v79 = (v76 & 0xFFFFFFF8) / 0x28;
          if (*(_DWORD *)(v74 + 92))
          {
            v80 = 0;
            v81 = v77 + 16;
            do
            {
              *(_QWORD *)(v81 - 16) = *(_QWORD *)(*(_QWORD *)(v74 + 80) + 8 * v80);
              *(_QWORD *)(v81 - 8) = 0;
              *(_OWORD *)v81 = 0uLL;
              *(_QWORD *)(v81 + 16) = 0;
              ++v80;
              v81 += 40;
            }
            while (v80 < *(unsigned int *)(v74 + 92));
          }
          else
          {
            LODWORD(v80) = 0;
          }
        }
        else
        {
          v79 = 0;
          LODWORD(v80) = 0;
          v78 = 0;
        }
        v82 = *(unsigned int *)(v74 + 124);
        v83 = *(_QWORD *)(v74 + 112);
        if ((_DWORD)v82)
        {
          v89 = v8;
          v90 = 40 * v82;
          v91 = (uint64_t *)(v83 + 8);
          do
          {
            v93 = *v91;
            v91 += 5;
            v92 = v93;
            if ((v93 & 1) != 0)
              WTF::fastFree(v92 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
            v90 -= 40;
          }
          while (v90);
          v83 = *(_QWORD *)(v74 + 112);
          v8 = v89;
        }
        if (v83)
        {
          *(_QWORD *)(v74 + 112) = 0;
          *(_DWORD *)(v74 + 120) = 0;
          WTF::fastFree(v83, a2, a3, a4, a5, a6, a7, a8);
        }
        *(_QWORD *)(v74 + 112) = v78;
        *(_DWORD *)(v74 + 120) = v79;
        *(_DWORD *)(v74 + 124) = v80;
        v9 = *v8;
      }
      ++v61;
    }
    while (v61 < *((unsigned int *)v9 + 15));
  }
}

uint64_t JSC::DFG::InPlaceAbstractState::endBasicBlock(JSC::DFG::InPlaceAbstractState *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::InPlaceAbstractState *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t result;
  unint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  JSC::DFG::InPlaceAbstractState *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  JSC::DFG::InPlaceAbstractState *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  unint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  unsigned int *v74;
  uint64_t v75;
  unsigned int v76;
  JSC::DFG::InPlaceAbstractState *v77;
  uint64_t v78;
  uint64_t v79;
  JSC::DFG::InPlaceAbstractState *v80;
  JSC::DFG::InPlaceAbstractState *v81;
  uint64_t v82;
  uint64_t v83;
  JSC::DFG::InPlaceAbstractState *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  JSC::DFG::InPlaceAbstractState *v93;
  uint64_t v94;
  uint64_t v95;
  JSC::DFG::InPlaceAbstractState *v96;
  uint64_t v97;
  unsigned int *v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  int v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  __int128 v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  __int128 v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t *v171;
  uint64_t v172;
  __int128 v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t v184;
  int v185;
  unint64_t v186;
  unsigned int *v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  JSC::DFG::InPlaceAbstractState *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  unsigned int *v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  unint64_t v209;
  JSC::DFG::InPlaceAbstractState *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int *v214;
  uint64_t v215;
  unsigned int v216;
  JSC::DFG::InPlaceAbstractState *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  JSC::DFG::InPlaceAbstractState *v221;
  uint64_t v222;
  JSC::DFG::InPlaceAbstractState *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  JSC::DFG::InPlaceAbstractState *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  JSC::DFG::InPlaceAbstractState *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  BOOL v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  JSC::DFG::InPlaceAbstractState *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int v251;
  JSC::DFG::InPlaceAbstractState *v252;
  uint64_t v253;
  JSC::DFG::InPlaceAbstractState *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  unint64_t v262;
  JSC::DFG::InPlaceAbstractState *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unsigned int v271;
  JSC::DFG::InPlaceAbstractState *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  JSC::DFG::InPlaceAbstractState *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  JSC::DFG::InPlaceAbstractState *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  JSC::DFG::InPlaceAbstractState *v293;
  uint64_t v294;
  uint64_t v295;
  unsigned int *v296;
  uint64_t v297;
  unsigned int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int v303;
  unint64_t v304;
  unsigned int v305;
  unsigned int v306;
  JSC::DFG::InPlaceAbstractState *v307;
  JSC::DFG::InPlaceAbstractState *v308;
  JSC::DFG::InPlaceAbstractState *v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int v327;
  unsigned int v328;
  _BYTE v329[32];

  v8 = this;
  v9 = *((_QWORD *)this + 9);
  v10 = *((unsigned __int8 *)this + 80);
  *(_BYTE *)(v9 + 17) = v10;
  *(_BYTE *)(v9 + 14) = *((_BYTE *)this + 92);
  if (!v10)
  {
    result = 0;
    *((_QWORD *)v8 + 9) = 0;
    *((_BYTE *)v8 + 80) = 0;
    *((_BYTE *)v8 + 92) = 0;
    *((_BYTE *)v8 + 82) = 0;
    return result;
  }
  v11 = *((unsigned int *)this + 21);
  v12 = *((unsigned int *)this + 22);
  *(_BYTE *)(v9 + 13) = *((_BYTE *)this + 82);
  v13 = *(_DWORD *)(*(_QWORD *)this + 944);
  if (v13 == 1)
  {
    v14 = *((unsigned int *)this + 7);
    if ((_DWORD)v14)
    {
      a3 = v12 ^ v11;
      a4 = (a3 > 1) & v12;
      a5 = 4;
      a6 = 0xFF00FFFFFFFFFFFELL;
      while (1)
      {
        while (1)
        {
          --v14;
          v106 = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 8 * v14);
          if (v106)
            break;
LABEL_138:
          if (!v14)
            goto LABEL_281;
        }
        v107 = *(_QWORD *)(v9 + 144);
        v108 = (_BYTE *)(v107 + 32 * v14);
        if (((*(_DWORD *)(*((_QWORD *)v8 + 7) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v14) & 1) == 0)
        {
          v109 = *(_QWORD *)(v9 + 120);
          v110 = (uint64_t *)(v109 + 32 * v14);
          v111 = *(_QWORD *)v108;
          if (v107 != v109)
          {
            if ((v111 & 1) != 0)
            {
              v217 = v8;
              v218 = v11;
              v219 = v12;
              v321 = a3;
              v220 = a4;
              WTF::fastFree(v111 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, 4, 0xFF00FFFFFFFFFFFELL, a7, a8);
              a6 = 0xFF00FFFFFFFFFFFELL;
              a5 = 4;
              a4 = v220;
              a3 = v321;
              v12 = v219;
              v11 = v218;
              v8 = v217;
            }
            v112 = *v110;
            if ((*v110 & 1) == 0 || v112 == 4)
            {
              if ((*v108 & 2) != 0)
                v111 = v112 | 2;
              else
                v111 = v112 & 0xFFFFFFFFFFFFFFFDLL;
              *(_QWORD *)v108 = v111;
            }
            else
            {
              v210 = v8;
              v211 = v11;
              v212 = v12;
              v320 = a3;
              v213 = a4;
              WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)(v107 + 32 * v14), (_QWORD *)(v109 + 32 * v14));
              a6 = 0xFF00FFFFFFFFFFFELL;
              a5 = 4;
              a4 = v213;
              a3 = v320;
              v12 = v212;
              v11 = v211;
              v8 = v210;
              v111 = *(_QWORD *)v108;
            }
          }
          v113 = v111 & 0xFFFFFFFFFFFFFFFDLL;
          v114 = v111 | 2;
          if ((*(_BYTE *)v110 & 2) != 0)
            v115 = v114;
          else
            v115 = v113;
          *(_QWORD *)v108 = v115;
          v116 = v107 + 32 * v14;
          v117 = v109 + 32 * v14;
          v118 = *(_OWORD *)(v117 + 8);
          v119 = *(_QWORD *)(v117 + 24);
          v120 = (_QWORD *)(v116 + 8);
          *(_QWORD *)(v116 + 24) = v119;
          *(_OWORD *)(v116 + 8) = v118;
          if ((_DWORD)a4)
          {
            if ((_DWORD)v12 == (_DWORD)v11 || (*v120 & 0x2800FFFFFFF7) == 0)
              goto LABEL_138;
            if (v115 == 4)
            {
LABEL_155:
              v121 = 4;
            }
            else
            {
              v121 = v115 | 2;
              *(_QWORD *)v108 = v115 | 2;
              v187 = (unsigned int *)(v115 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v115 & 1) != 0)
              {
                v243 = a4;
                v244 = a3;
                v245 = v12;
                v246 = v11;
                v247 = v8;
                v248 = 2 * *v187;
                while (v248 * 4)
                {
                  v249 = *(_QWORD *)&v187[v248];
                  if ((*(_BYTE *)(v249 + 19) & 0xC) == 0)
                  {
                    v250 = *(_QWORD *)(v249 + 96);
                    v251 = (v250 & 1) != 0 ? (v250 >> 1) & 3 : *(unsigned __int8 *)(v250 + 4);
                    v248 -= 2;
                    if (v251 != 2)
                      continue;
                  }
                  WTF::fastFree((unint64_t)v187, (void *)a2, a3, a4, 4, 0xFF00FFFFFFFFFFFELL, a7, a8);
                  v8 = v247;
                  v11 = v246;
                  v12 = v245;
                  a3 = v244;
                  a4 = v243;
                  a5 = 4;
                  a6 = 0xFF00FFFFFFFFFFFELL;
                  goto LABEL_267;
                }
                a5 = 4;
                a6 = 0xFF00FFFFFFFFFFFELL;
              }
              else if (v187)
              {
                if ((*((_BYTE *)v187 + 19) & 0xC) != 0
                  || ((v188 = *((_QWORD *)v187 + 12), (v188 & 1) != 0)
                    ? (v189 = (v188 >> 1) & 3)
                    : (v189 = *(unsigned __int8 *)(v188 + 4)),
                      v189 == 2))
                {
LABEL_267:
                  *(_QWORD *)v108 = 4;
                  goto LABEL_155;
                }
              }
            }
            *(_DWORD *)(v107 + 32 * v14 + 16) = -21020677;
            v122 = v121 & 0xFFFFFFFFFFFFFFFDLL;
          }
          else
          {
            if ((_DWORD)v12 == (_DWORD)v11 || (*v120 & 0x2800FFFFFFF7) == 0)
              goto LABEL_138;
            v290 = a4;
            v291 = v12;
            v292 = v11;
            v293 = v8;
            v294 = a3;
            if (a3 > 1)
            {
              if (v115 == 4)
              {
                v295 = 4;
              }
              else
              {
                v295 = v115 | 2;
                *(_QWORD *)v108 = v115 | 2;
                v296 = (unsigned int *)(v115 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v115 & 1) != 0)
                {
                  v300 = 2 * *v296;
                  while (v300 * 4)
                  {
                    v301 = *(_QWORD *)&v296[v300];
                    if ((*(_BYTE *)(v301 + 19) & 0xC) == 0)
                    {
                      v302 = *(_QWORD *)(v301 + 96);
                      v303 = (v302 & 1) != 0 ? (v302 >> 1) & 3 : *(unsigned __int8 *)(v302 + 4);
                      v300 -= 2;
                      if (v303 != 2)
                        continue;
                    }
                    WTF::fastFree((unint64_t)v296, (void *)a2, a3, a4, 4, 0xFF00FFFFFFFFFFFELL, a7, a8);
                    goto LABEL_444;
                  }
                }
                else if (v296)
                {
                  if ((*((_BYTE *)v296 + 19) & 0xC) != 0
                    || ((v297 = *((_QWORD *)v296 + 12), (v297 & 1) != 0)
                      ? (v298 = (v297 >> 1) & 3)
                      : (v298 = *(unsigned __int8 *)(v297 + 4)),
                        v298 == 2))
                  {
LABEL_444:
                    v295 = 4;
                    *(_QWORD *)v108 = 4;
                  }
                }
              }
              *(_DWORD *)(v107 + 32 * v14 + 16) = -21020677;
              v115 = v295;
            }
            v8 = v293;
            v11 = v292;
            v12 = v291;
            a3 = v294;
            a4 = v290;
            a5 = 4;
            a6 = 0xFF00FFFFFFFFFFFELL;
            if ((v291 & 1) == 0)
              goto LABEL_138;
            v122 = v115 & 0xFFFFFFFFFFFFFFFDLL;
          }
          *(_QWORD *)v108 = v122;
          goto LABEL_138;
        }
        v123 = *(unsigned __int16 *)(v106 + 18);
        if ((_DWORD)v123 == 16)
          break;
        if (v123 > 0x27)
          goto LABEL_420;
        if (v123 == 15)
        {
          v157 = *((_QWORD *)v8 + 1);
          v158 = *(unsigned int *)((v106 & 0xFFFFFFFFFFFFFFFELL) + 20);
          v159 = (uint64_t *)(v157 + 24);
          v160 = (uint64_t *)(v157 + 8);
          if ((v106 & 1) != 0)
            v160 = v159;
          v161 = *v160;
          v162 = *v160 + 32 * v158;
          v163 = *((_DWORD *)v8 + 22);
          v164 = *(_DWORD *)(v162 + 20);
          if (v163 != v164)
          {
            if ((*(_QWORD *)(v162 + 8) & 0x2800FFFFFFF7) != 0)
            {
              if ((v164 ^ v163) >= 2)
              {
                v208 = *(_QWORD *)v162;
                if (*(_QWORD *)v162 != 4)
                {
                  *(_QWORD *)v162 = v208 | 2;
                  v214 = (unsigned int *)(v208 & 0xFFFFFFFFFFFFFFFCLL);
                  if ((v208 & 1) != 0)
                  {
                    v268 = 2 * *v214;
                    while (v268 * 4)
                    {
                      v269 = *(_QWORD *)&v214[v268];
                      if ((*(_BYTE *)(v269 + 19) & 0xC) == 0)
                      {
                        v270 = *(_QWORD *)(v269 + 96);
                        v271 = (v270 & 1) != 0 ? (v270 >> 1) & 3 : *(unsigned __int8 *)(v270 + 4);
                        v268 -= 2;
                        if (v271 != 2)
                          continue;
                      }
                      v309 = v8;
                      v306 = v11;
                      v319 = v12;
                      v326 = a3;
                      v314 = a4;
                      WTF::fastFree((unint64_t)v214, (void *)a2, a3, a4, 4, 0xFF00FFFFFFFFFFFELL, a7, a8);
                      a6 = 0xFF00FFFFFFFFFFFELL;
                      a5 = 4;
                      a4 = v314;
                      v12 = v319;
                      a3 = v326;
                      v11 = v306;
                      v8 = v309;
                      goto LABEL_327;
                    }
                  }
                  else if (v214)
                  {
                    if ((*((_BYTE *)v214 + 19) & 0xC) != 0
                      || ((v215 = *((_QWORD *)v214 + 12), (v215 & 1) != 0)
                        ? (v216 = (v215 >> 1) & 3)
                        : (v216 = *(unsigned __int8 *)(v215 + 4)),
                          v216 == 2))
                    {
LABEL_327:
                      *(_QWORD *)v162 = 4;
                    }
                  }
                }
                *(_DWORD *)(v161 + 32 * v158 + 16) = -21020677;
              }
              if ((v163 & 1) != 0)
                *(_QWORD *)v162 &= ~2uLL;
            }
            *(_DWORD *)(v162 + 20) = v163;
          }
          v165 = *(_QWORD *)v108;
          if (v108 != (_BYTE *)v162)
          {
            if ((v165 & 1) != 0)
            {
              v254 = v8;
              v255 = v11;
              v317 = v12;
              v324 = a3;
              v312 = a4;
              WTF::fastFree(v165 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, 4, 0xFF00FFFFFFFFFFFELL, a7, a8);
              a6 = 0xFF00FFFFFFFFFFFELL;
              a5 = 4;
              a4 = v312;
              v12 = v317;
              a3 = v324;
              v11 = v255;
              v8 = v254;
            }
            v166 = *(_QWORD *)v162;
            if ((*(_QWORD *)v162 & 1) == 0 || v166 == 4)
            {
              v167 = v166 & 0xFFFFFFFFFFFFFFFDLL;
              v165 = v166 | 2;
              if ((*v108 & 2) == 0)
                v165 = v167;
              *(_QWORD *)v108 = v165;
            }
            else
            {
              v252 = v8;
              v253 = v11;
              v316 = v12;
              v323 = a3;
              v311 = a4;
              WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)(v107 + 32 * v14), (_QWORD *)v162);
              a6 = 0xFF00FFFFFFFFFFFELL;
              a5 = 4;
              a4 = v311;
              v12 = v316;
              a3 = v323;
              v11 = v253;
              v8 = v252;
              v165 = *(_QWORD *)v108;
            }
          }
          v168 = v165 & 0xFFFFFFFFFFFFFFFDLL;
          v169 = v165 | 2;
          if ((*(_BYTE *)v162 & 2) == 0)
            v169 = v168;
          *(_QWORD *)v108 = v169;
          v170 = v107 + 32 * v14;
          v171 = (unint64_t *)(v170 + 8);
          v172 = v161 + 32 * v158;
          v173 = *(_OWORD *)(v172 + 8);
          *(_QWORD *)(v170 + 24) = *(_QWORD *)(v172 + 24);
          *(_OWORD *)(v170 + 8) = v173;
          v174 = *(_QWORD **)(v106 + 72);
          v175 = v174;
          do
          {
            v176 = v175;
            v175 = (_QWORD *)*v175;
          }
          while (v175);
          if (v176 != v174)
            *v174 = v176;
          a2 = 0x3F73FFFFFFF7;
          if (!*((_BYTE *)v176 + 40) && *((_BYTE *)v176 + 43))
          {
            if (*((_DWORD *)v176 + 14) == 1)
            {
              a2 = 0xF000000000;
            }
            else
            {
              v177 = v176;
              do
              {
                v178 = v177;
                v177 = (_QWORD *)*v177;
              }
              while (v177);
              if (v178 != v176)
                *v176 = v178;
              v179 = v178[2];
              a2 = 0x3F73FFFFFFF7;
              if (v179)
              {
                if ((v179 & 0xFFFFFFFCFFFFFFFFLL) != 0)
                {
                  if (!*((_DWORD *)v176 + 7))
                    goto LABEL_477;
                  v180 = v176;
                  do
                  {
                    v181 = v180;
                    v180 = (_QWORD *)*v180;
                  }
                  while (v180);
                  if (v181 != v176)
                    *v176 = v181;
                  v182 = v181[2];
                  if (v182 && (v182 & 0xFFFFFFF0FFFFFFFFLL) == 0)
                  {
                    a2 = 0xC00000000;
                  }
                  else
                  {
LABEL_477:
                    if ((v179 & 0x2800FFFFFFF7) == 0 || (a2 = 0x2C00FFFFFFF7, (v179 & 0xFFFFD7FF00000008) != 0))
                    {
                      if (v179 == 0x10000000000)
                        a2 = 0x10000000000;
                      else
                        a2 = 0x3F73FFFFFFF7;
                    }
                  }
                }
                else
                {
                  a2 = 0x300000000;
                }
              }
            }
          }
          v105 = *v171 & a2;
          if (v105 == *v171)
            goto LABEL_138;
          if ((*v171 & 0x2800FFFFFFF7) != 0)
          {
            v228 = v8;
            v229 = v11;
            v230 = v12;
            v231 = a3;
            v232 = a4;
            JSC::DFG::AbstractValue::filterSlow((JSC::DFG::AbstractValue *)(v107 + 32 * v14), a2, a3, a4, 4, 0xFF00FFFFFFFFFFFELL, a7, a8);
          }
          else
          {
            *v171 = v105;
            if (v105)
              goto LABEL_138;
            v228 = v8;
            v229 = v11;
            v230 = v12;
            v231 = a3;
            v232 = a4;
            JSC::DFG::AbstractValue::clear((JSC::DFG::AbstractValue *)(v107 + 32 * v14), a2, a3, a4, 4, 0xFF00FFFFFFFFFFFELL, a7, a8);
          }
LABEL_280:
          a6 = 0xFF00FFFFFFFFFFFELL;
          a5 = 4;
          a4 = v232;
          a3 = v231;
          v12 = v230;
          v11 = v229;
          v8 = v228;
          if (!v14)
            goto LABEL_281;
        }
        else
        {
          if (((1 << v123) & 0xC038000000) == 0)
          {
LABEL_420:
            __break(0xC471u);
            JUMPOUT(0x1984101B4);
          }
          v191 = a4;
          v192 = a3;
          v193 = v12;
          v194 = v11;
          v195 = v8;
          v197 = JSC::DFG::InPlaceAbstractState::atIndex(v8, v14, a3, a4, 4, 0xFF00FFFFFFFFFFFELL, a7, a8);
          v198 = *(_QWORD *)v108;
          if (v108 == (_BYTE *)v197)
          {
            v11 = v194;
            v12 = v193;
            a3 = v192;
            a4 = v191;
            a5 = 4;
          }
          else
          {
            v11 = v194;
            v12 = v193;
            a3 = v192;
            a4 = v191;
            a5 = 4;
            if ((v198 & 1) != 0)
            {
              WTF::fastFree(v198 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, v192, v191, 4, v196, a7, a8);
              a5 = 4;
              a4 = v191;
              a3 = v192;
              v12 = v193;
              v11 = v194;
            }
            v199 = *(_QWORD *)v197;
            if ((*(_QWORD *)v197 & 1) == 0 || v199 == 4)
            {
              v200 = v199 & 0xFFFFFFFFFFFFFFFDLL;
              v198 = v199 | 2;
              if ((*v108 & 2) == 0)
                v198 = v200;
              *(_QWORD *)v108 = v198;
            }
            else
            {
              WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)(v107 + 32 * v14), (_QWORD *)v197);
              a5 = 4;
              a4 = v191;
              a3 = v192;
              v12 = v193;
              v11 = v194;
              v198 = *(_QWORD *)v108;
            }
          }
          v201 = v198 & 0xFFFFFFFFFFFFFFFDLL;
          v202 = v198 | 2;
          if ((*(_BYTE *)v197 & 2) == 0)
            v202 = v201;
          *(_QWORD *)v108 = v202;
          v203 = v107 + 32 * v14;
          v204 = *(_OWORD *)(v197 + 8);
          *(_QWORD *)(v203 + 24) = *(_QWORD *)(v197 + 24);
          *(_OWORD *)(v203 + 8) = v204;
          v8 = v195;
          a6 = 0xFF00FFFFFFFFFFFELL;
          if (!v14)
            goto LABEL_281;
        }
      }
      v124 = *(_QWORD *)(v106 + 24);
      v125 = *((_QWORD *)v8 + 1);
      v126 = *(unsigned int *)((v124 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v127 = (uint64_t *)(v125 + 24);
      v128 = (uint64_t *)(v125 + 8);
      if ((v124 & 1) != 0)
        v129 = v127;
      else
        v129 = v128;
      v130 = *v129;
      v131 = *v129 + 32 * v126;
      v132 = *((_DWORD *)v8 + 22);
      v133 = *(_DWORD *)(v131 + 20);
      if (v132 != v133)
      {
        if ((*(_QWORD *)(v131 + 8) & 0x2800FFFFFFF7) != 0)
        {
          if ((v133 ^ v132) >= 2)
          {
            v190 = *(_QWORD *)v131;
            if (*(_QWORD *)v131 != 4)
            {
              *(_QWORD *)v131 = v190 | 2;
              v205 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v190 & 1) != 0)
              {
                v256 = 2 * *v205;
                while (v256 * 4)
                {
                  v257 = *(_QWORD *)&v205[v256];
                  if ((*(_BYTE *)(v257 + 19) & 0xC) == 0)
                  {
                    v258 = *(_QWORD *)(v257 + 96);
                    v259 = (v258 & 1) != 0 ? (v258 >> 1) & 3 : *(unsigned __int8 *)(v258 + 4);
                    v256 -= 2;
                    if (v259 != 2)
                      continue;
                  }
                  v308 = v8;
                  v305 = v11;
                  v318 = v12;
                  v325 = a3;
                  v313 = a4;
                  WTF::fastFree((unint64_t)v205, (void *)a2, a3, a4, 4, 0xFF00FFFFFFFFFFFELL, a7, a8);
                  a6 = 0xFF00FFFFFFFFFFFELL;
                  a5 = 4;
                  a4 = v313;
                  v12 = v318;
                  a3 = v325;
                  v11 = v305;
                  v8 = v308;
                  goto LABEL_300;
                }
              }
              else if (v205)
              {
                if ((*((_BYTE *)v205 + 19) & 0xC) != 0
                  || ((v206 = *((_QWORD *)v205 + 12), (v206 & 1) != 0)
                    ? (v207 = (v206 >> 1) & 3)
                    : (v207 = *(unsigned __int8 *)(v206 + 4)),
                      v207 == 2))
                {
LABEL_300:
                  *(_QWORD *)v131 = 4;
                }
              }
            }
            *(_DWORD *)(v130 + 32 * v126 + 16) = -21020677;
          }
          if ((v132 & 1) != 0)
            *(_QWORD *)v131 &= ~2uLL;
        }
        *(_DWORD *)(v131 + 20) = v132;
      }
      *(_QWORD *)v329 = 0;
      v134 = *(_QWORD *)v131;
      if ((*(_QWORD *)v131 & 1) == 0 || v134 == 4)
      {
        v135 = v134 & 0xFFFFFFFFFFFFFFFDLL;
        *(_QWORD *)v329 = v135;
      }
      else
      {
        v221 = v8;
        v222 = v11;
        v315 = v12;
        v322 = a3;
        v310 = a4;
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v329, (_QWORD *)v131);
        a6 = 0xFF00FFFFFFFFFFFELL;
        a5 = 4;
        a4 = v310;
        v12 = v315;
        a3 = v322;
        v11 = v222;
        v8 = v221;
        v135 = *(_QWORD *)v329;
      }
      v136 = v135 & 0xFFFFFFFFFFFFFFFDLL;
      v137 = v135 | 2;
      if ((*(_BYTE *)v131 & 2) == 0)
        v137 = v136;
      *(_QWORD *)v329 = v137;
      v138 = v130 + 32 * v126;
      v139 = *(_OWORD *)(v138 + 8);
      *(_QWORD *)&v329[24] = *(_QWORD *)(v138 + 24);
      *(_OWORD *)&v329[8] = v139;
      v140 = *(_QWORD **)(v106 + 72);
      v141 = v140;
      do
      {
        v142 = v141;
        v141 = (_QWORD *)*v141;
      }
      while (v141);
      if (v142 != v140)
        *v140 = v142;
      v143 = 0x3F73FFFFFFF7;
      if (!*((_BYTE *)v142 + 40) && *((_BYTE *)v142 + 43))
      {
        if (*((_DWORD *)v142 + 14) == 1)
        {
          v143 = 0xF000000000;
        }
        else
        {
          v150 = v142;
          do
          {
            v151 = v150;
            v150 = (_QWORD *)*v150;
          }
          while (v150);
          if (v151 != v142)
            *v142 = v151;
          v152 = v151[2];
          v143 = 0x3F73FFFFFFF7;
          if (v152)
          {
            if ((v152 & 0xFFFFFFFCFFFFFFFFLL) != 0)
            {
              if (!*((_DWORD *)v142 + 7))
                goto LABEL_478;
              v153 = v142;
              do
              {
                v154 = v153;
                v153 = (_QWORD *)*v153;
              }
              while (v153);
              if (v154 != v142)
                *v142 = v154;
              v155 = v154[2];
              if (v155 && (v155 & 0xFFFFFFF0FFFFFFFFLL) == 0)
              {
                v143 = 0xC00000000;
              }
              else
              {
LABEL_478:
                if ((v152 & 0x2800FFFFFFF7) == 0 || (v143 = 0x2C00FFFFFFF7, (v152 & 0xFFFFD7FF00000008) != 0))
                {
                  if (v152 == 0x10000000000)
                    v143 = 0x10000000000;
                  else
                    v143 = 0x3F73FFFFFFF7;
                }
              }
            }
            else
            {
              v143 = 0x300000000;
            }
          }
        }
      }
      v144 = *(_QWORD *)&v329[8];
      v145 = *(_QWORD *)&v329[8] & v143;
      if ((*(_QWORD *)&v329[8] & v143) == *(_QWORD *)&v329[8])
      {
LABEL_174:
        v146 = *(_QWORD *)v108;
        if (v108 != v329)
        {
          if ((v146 & 1) != 0)
          {
            v233 = v8;
            v234 = v11;
            v235 = v12;
            v236 = a3;
            v237 = a4;
            WTF::fastFree(v146 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, 4, 0xFF00FFFFFFFFFFFELL, a7, a8);
            a6 = 0xFF00FFFFFFFFFFFELL;
            a5 = 4;
            a4 = v237;
            a3 = v236;
            v12 = v235;
            v11 = v234;
            v8 = v233;
          }
          if ((v329[0] & 1) == 0 || *(_QWORD *)v329 == 4)
          {
            if ((*v108 & 2) != 0)
              v146 = *(_QWORD *)v329 | 2;
            else
              v146 = *(_QWORD *)v329 & 0xFFFFFFFFFFFFFFFDLL;
            *(_QWORD *)v108 = v146;
          }
          else
          {
            v223 = v8;
            v224 = v11;
            v225 = v12;
            v226 = a3;
            v227 = a4;
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)(v107 + 32 * v14), v329);
            a6 = 0xFF00FFFFFFFFFFFELL;
            a5 = 4;
            a4 = v227;
            a3 = v226;
            v12 = v225;
            v11 = v224;
            v8 = v223;
            v146 = *(_QWORD *)v108;
          }
        }
        if ((v329[0] & 2) != 0)
          v147 = v146 | 2;
        else
          v147 = v146 & 0xFFFFFFFFFFFFFFFDLL;
        *(_QWORD *)v108 = v147;
        v148 = v107 + 32 * v14;
        v149 = *(_OWORD *)&v329[8];
        *(_QWORD *)(v148 + 24) = *(_QWORD *)&v329[24];
        *(_OWORD *)(v148 + 8) = v149;
        if ((v329[0] & 1) == 0)
          goto LABEL_138;
        v228 = v8;
        v229 = v11;
        v230 = v12;
        v231 = a3;
        v232 = a4;
        WTF::fastFree(*(_QWORD *)v329 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, 4, 0xFF00FFFFFFFFFFFELL, a7, a8);
        goto LABEL_280;
      }
      *(_QWORD *)&v329[8] &= v143;
      if ((v144 & 0x2800FFFFFFF7) == 0)
      {
        if (v145)
          goto LABEL_174;
LABEL_258:
        *(_QWORD *)&v329[8] = 0;
        *(_DWORD *)&v329[16] = 0;
        if ((v137 & 1) != 0)
        {
          v277 = v8;
          v278 = v11;
          v279 = v12;
          v280 = a3;
          v281 = a4;
          WTF::fastFree(v137 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, 4, 0xFF00FFFFFFFFFFFELL, a7, a8);
          a6 = 0xFF00FFFFFFFFFFFELL;
          a5 = 4;
          a4 = v281;
          a3 = v280;
          v12 = v279;
          v11 = v278;
          v8 = v277;
        }
        *(_QWORD *)v329 = 0;
        *(_QWORD *)&v329[24] = 0;
        goto LABEL_174;
      }
      if ((v145 & 0x2800FFFFFFF7) == 0)
      {
        if ((v137 & 1) != 0)
        {
          v272 = v8;
          v273 = v11;
          v274 = v12;
          v275 = a3;
          v276 = a4;
          WTF::fastFree(v137 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, 4, 0xFF00FFFFFFFFFFFELL, a7, a8);
          a6 = 0xFF00FFFFFFFFFFFELL;
          a5 = 4;
          a4 = v276;
          a3 = v275;
          v12 = v274;
          v11 = v273;
          v8 = v272;
        }
        v184 = 0;
        goto LABEL_251;
      }
      if (v137 > 4 || ((1 << v137) & 0x15) == 0)
      {
        v209 = v137 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v137 & 1) != 0)
        {
          v260 = *(_DWORD *)v209;
          if (!*(_DWORD *)v209)
            goto LABEL_388;
          v261 = 0;
          v262 = v209 + 8;
          do
          {
            if ((JSC::speculatedTypeMapping[*(unsigned __int8 *)(*(_QWORD *)(v262 + 8 * v261) + 9)] & v145) == 0)
            {
              v284 = v261;
              *(_DWORD *)v209 = --v260;
              --v261;
              *(_QWORD *)(v262 + 8 * v284) = *(_QWORD *)(v262 + 8 * v260);
            }
            ++v261;
          }
          while (v261 < v260);
          if (!v260)
          {
LABEL_388:
            v263 = v8;
            v264 = v11;
            v265 = v12;
            v266 = a3;
            v267 = a4;
            WTF::fastFree(v209, (void *)a2, a3, a4, 4, 0xFF00FFFFFFFFFFFELL, a7, a8);
            a6 = 0xFF00FFFFFFFFFFFELL;
            a5 = 4;
            a4 = v267;
            a3 = v266;
            v12 = v265;
            v11 = v264;
            v8 = v263;
            LOBYTE(v137) = v329[0];
LABEL_389:
            v184 = v137 & 2;
LABEL_251:
            *(_QWORD *)v329 = v184;
            v145 = *(_QWORD *)&v329[8];
          }
        }
        else if (v209 && (JSC::speculatedTypeMapping[*(unsigned __int8 *)(v209 + 9)] & v145) == 0)
        {
          goto LABEL_389;
        }
      }
      if ((v145 & 0x2800FFFFFFF7) != 0)
      {
        if ((v145 & 0xFFFFFFFFFFFFFFFDLL) != 0)
        {
LABEL_255:
          v186 = *(_QWORD *)&v329[24];
          if (!*(_QWORD *)&v329[24])
            goto LABEL_256;
          if ((v145 & 0xC00000000) != 0)
          {
            v285 = v8;
            v286 = v11;
            v287 = v12;
            v327 = a3;
            v288 = a4;
            v289 = JSC::int52AwareSpeculationFromValue(*(uint64_t *)&v329[24]);
            a6 = 0xFF00FFFFFFFFFFFELL;
            a5 = 4;
            a4 = v288;
            a3 = v327;
            v12 = v287;
            v11 = v286;
            v8 = v285;
            v145 |= v289;
            if (v145 == *(_QWORD *)&v329[8])
            {
LABEL_422:
              if ((v145 & 0xFFFFD7FF00000008) != 0)
                goto LABEL_174;
              v137 = *(_QWORD *)v329;
              if (*(_DWORD *)&v329[16])
              {
                if ((*(_QWORD *)v329 & 0xFFFFFFFFFFFFFFFDLL) != 0)
                  goto LABEL_174;
              }
              goto LABEL_258;
            }
            v145 = *(_QWORD *)&v329[8];
          }
          if (v186 >= 0xFFFE000000000000)
          {
            v242 = 0x200000000;
            if ((v186 & 0xFFFFFFFE) == 0)
              v242 = 0x100000000;
            goto LABEL_353;
          }
          if (v186 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            if ((v186 & 0xFFFE000000000002) != 0)
            {
              v242 = 0x20000000000;
              if ((v186 & 0xFFFFFFFFFFFFFFFELL) == 6)
                v242 = 0x10000000000;
              goto LABEL_353;
            }
            v238 = v186 >> 36;
            v240 = (v186 & 0xFFFFFFFFFLL) != 0 && v238 == 0;
            if (qword_1ECF4C080 <= v186 && v240)
            {
              v241 = *(unsigned __int8 *)(v186 + 5);
              if (v241 == 2)
              {
                v282 = *(_QWORD *)(v186 + 8);
                v242 = 805306368;
                if (v282 && (v282 & 1) == 0)
                {
                  if (v282 < qword_1ECF4C080)
                  {
                    v242 = 0;
                  }
                  else
                  {
                    v242 = 0;
                    if (!(v282 >> 36) && (v282 & 0xFFFFFFFFFLL) != 0)
                    {
                      if ((*(_BYTE *)(v282 + 16) & 0x10) != 0)
                        v242 = 0x10000000;
                      else
                        v242 = 805306368;
                    }
                  }
                }
              }
              else
              {
                v242 = JSC::speculatedTypeMapping[v241];
              }
              goto LABEL_353;
            }
            a2 = a4;
            if (qword_1ECF4C080 > v186)
            {
              v242 = 0;
            }
            else
            {
              v242 = 0;
              if (!v238)
              {
                a5 = 4;
                a6 = 0xFF00FFFFFFFFFFFELL;
                if ((v186 & 0xFFFFFFFFFLL) == 0)
                  goto LABEL_353;
                v299 = *(unsigned __int8 *)(v186 + 5);
                if (v299 == 2)
                {
                  v304 = *(_QWORD *)(v186 + 8);
                  v242 = 805306368;
                  if (v304)
                  {
                    a5 = 4;
                    if ((v304 & 1) != 0)
                    {
LABEL_353:
                      if ((v242 | v145) != v145)
                        *(_QWORD *)&v329[24] = 0;
LABEL_256:
                      if (!v145)
                      {
                        v137 = *(_QWORD *)v329;
                        goto LABEL_258;
                      }
                      goto LABEL_422;
                    }
                    if (v304 < qword_1ECF4C080)
                    {
                      v242 = 0;
                    }
                    else
                    {
                      v242 = 0;
                      if (!(v304 >> 36) && (v304 & 0xFFFFFFFFFLL) != 0)
                      {
                        if ((*(_BYTE *)(v304 + 16) & 0x10) != 0)
                          v242 = 0x10000000;
                        else
                          v242 = 805306368;
                      }
                    }
                  }
                }
                else
                {
                  v242 = JSC::speculatedTypeMapping[v299];
                }
                a5 = 4;
                goto LABEL_353;
              }
            }
LABEL_419:
            a5 = 4;
            a6 = 0xFF00FFFFFFFFFFFELL;
            goto LABEL_353;
          }
          v283 = (uint64_t)COERCE_DOUBLE(v186 - 0x2000000000000);
          if ((double)v283 != COERCE_DOUBLE(v186 - 0x2000000000000))
          {
            v242 = 0x2000000000;
            goto LABEL_353;
          }
          if (v283)
          {
            if ((unint64_t)(v283 + 0x8000000000000) >> 52)
            {
LABEL_415:
              v242 = 0x2000000000;
              goto LABEL_419;
            }
          }
          else if ((uint64_t)v186 < 0x2000000000000)
          {
            goto LABEL_415;
          }
          v242 = 0x1000000000;
          goto LABEL_419;
        }
        v185 = *(_DWORD *)&v329[16] & 0x2A02AAA;
      }
      else
      {
        v185 = 0;
      }
      *(_DWORD *)&v329[16] = v185;
      goto LABEL_255;
    }
    goto LABEL_281;
  }
  if (v13 != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x19840EB84);
  }
  if (*(_DWORD *)(v9 + 156))
  {
    v16 = 0;
    v328 = v12 ^ v11;
    v17 = ((v12 ^ v11) > 1) & v12;
    while (1)
    {
      if (((*(_DWORD *)(*((_QWORD *)v8 + 7) + ((v16 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v16) & 1) != 0)
      {
        v40 = v12;
        v41 = v11;
        v42 = v8;
        v43 = JSC::DFG::InPlaceAbstractState::atIndex(v8, v16, a3, a4, a5, a6, a7, a8);
        v44 = *(_QWORD *)(v9 + 144) + 32 * v16;
        v45 = *(_QWORD *)v44;
        if (v44 != v43)
        {
          if ((v45 & 1) != 0)
            WTF::fastFree(v45 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
          v46 = *(_QWORD *)v43;
          if ((*(_QWORD *)v43 & 1) == 0 || v46 == 4)
          {
            v47 = v46 & 0xFFFFFFFFFFFFFFFDLL;
            v45 = v46 | 2;
            if ((*(_BYTE *)v44 & 2) == 0)
              v45 = v47;
            *(_QWORD *)v44 = v45;
          }
          else
          {
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v44, (_QWORD *)v43);
            v45 = *(_QWORD *)v44;
          }
        }
        v18 = v45 & 0xFFFFFFFFFFFFFFFDLL;
        v19 = v45 | 2;
        if ((*(_BYTE *)v43 & 2) == 0)
          v19 = v18;
        *(_QWORD *)v44 = v19;
        v20 = *(_OWORD *)(v43 + 8);
        *(_QWORD *)(v44 + 24) = *(_QWORD *)(v43 + 24);
        *(_OWORD *)(v44 + 8) = v20;
        v8 = v42;
        v11 = v41;
        v12 = v40;
        goto LABEL_13;
      }
      v21 = *(_QWORD *)(v9 + 144);
      v22 = (unint64_t *)(v21 + 32 * v16);
      v23 = *(_QWORD *)(v9 + 120);
      v24 = (uint64_t *)(v23 + 32 * v16);
      v25 = *v22;
      if (v21 != v23)
      {
        if ((v25 & 1) != 0)
        {
          v77 = v8;
          v78 = v11;
          v79 = v12;
          WTF::fastFree(v25 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
          v12 = v79;
          v11 = v78;
          v8 = v77;
        }
        v26 = *v24;
        if ((*v24 & 1) == 0 || v26 == 4)
        {
          if ((*(_BYTE *)v22 & 2) != 0)
            v25 = v26 | 2;
          else
            v25 = v26 & 0xFFFFFFFFFFFFFFFDLL;
          *v22 = v25;
        }
        else
        {
          v48 = v8;
          v49 = v11;
          v50 = v12;
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)(v21 + 32 * v16), (_QWORD *)(v23 + 32 * v16));
          v12 = v50;
          v11 = v49;
          v8 = v48;
          v25 = *v22;
        }
      }
      v27 = v25 & 0xFFFFFFFFFFFFFFFDLL;
      v28 = v25 | 2;
      if ((*(_BYTE *)v24 & 2) != 0)
        v29 = v28;
      else
        v29 = v27;
      *v22 = v29;
      v30 = v21 + 32 * v16;
      v31 = v23 + 32 * v16;
      v32 = *(_OWORD *)(v31 + 8);
      v33 = *(_QWORD *)(v31 + 24);
      v34 = (_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 24) = v33;
      *(_OWORD *)(v30 + 8) = v32;
      if (!v17)
      {
        if ((_DWORD)v12 == (_DWORD)v11 || (*v34 & 0x2800FFFFFFF7) == 0)
          goto LABEL_13;
        v94 = v12;
        v95 = v11;
        v96 = v8;
        if (v328 > 1)
        {
          if (v29 == 4)
          {
            v97 = 4;
          }
          else
          {
            v97 = v29 | 2;
            *v22 = v29 | 2;
            v98 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v29 & 1) != 0)
            {
              v101 = 2 * *v98;
              while (v101 * 4)
              {
                v102 = *(_QWORD *)&v98[v101];
                if ((*(_BYTE *)(v102 + 19) & 0xC) == 0)
                {
                  v103 = *(_QWORD *)(v102 + 96);
                  v104 = (v103 & 1) != 0 ? (v103 >> 1) & 3 : *(unsigned __int8 *)(v103 + 4);
                  v101 -= 2;
                  if (v104 != 2)
                    continue;
                }
                WTF::fastFree((unint64_t)v98, (void *)a2, a3, a4, a5, a6, a7, a8);
                goto LABEL_125;
              }
            }
            else if (v98)
            {
              if ((*((_BYTE *)v98 + 19) & 0xC) != 0
                || ((v99 = *((_QWORD *)v98 + 12), (v99 & 1) != 0)
                  ? (v100 = (v99 >> 1) & 3)
                  : (v100 = *(unsigned __int8 *)(v99 + 4)),
                    v100 == 2))
              {
LABEL_125:
                v97 = 4;
                *v22 = 4;
              }
            }
          }
          *(_DWORD *)(v21 + 32 * v16 + 16) = -21020677;
          v29 = v97;
        }
        v8 = v96;
        v11 = v95;
        v12 = v94;
        if ((v94 & 1) == 0)
          goto LABEL_13;
        v36 = v29 & 0xFFFFFFFFFFFFFFFDLL;
        goto LABEL_31;
      }
      if ((_DWORD)v12 == (_DWORD)v11 || (*v34 & 0x2800FFFFFFF7) == 0)
        goto LABEL_13;
      if (v29 == 4)
        goto LABEL_29;
      v35 = v29 | 2;
      *v22 = v29 | 2;
      v37 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v29 & 1) != 0)
      {
        v82 = v12;
        v83 = v11;
        v84 = v8;
        v85 = 2 * *v37;
        while (v85 * 4)
        {
          v86 = *(_QWORD *)&v37[v85];
          if ((*(_BYTE *)(v86 + 19) & 0xC) == 0)
          {
            v87 = *(_QWORD *)(v86 + 96);
            v88 = (v87 & 1) != 0 ? (v87 >> 1) & 3 : *(unsigned __int8 *)(v87 + 4);
            v85 -= 2;
            if (v88 != 2)
              continue;
          }
          WTF::fastFree((unint64_t)v37, (void *)a2, a3, a4, a5, a6, a7, a8);
          v8 = v84;
          v11 = v83;
          v12 = v82;
          goto LABEL_38;
        }
        goto LABEL_30;
      }
      if (v37)
      {
        if ((*((_BYTE *)v37 + 19) & 0xC) != 0)
          break;
        v38 = *((_QWORD *)v37 + 12);
        v39 = (v38 & 1) != 0 ? (v38 >> 1) & 3 : *(unsigned __int8 *)(v38 + 4);
        if (v39 == 2)
          break;
      }
LABEL_30:
      *(_DWORD *)(v21 + 32 * v16 + 16) = -21020677;
      v36 = v35 & 0xFFFFFFFFFFFFFFFDLL;
LABEL_31:
      *v22 = v36;
LABEL_13:
      if (++v16 >= *(unsigned int *)(v9 + 156))
        goto LABEL_49;
    }
LABEL_38:
    *v22 = 4;
LABEL_29:
    v35 = 4;
    goto LABEL_30;
  }
LABEL_49:
  v51 = *(_QWORD *)(v9 + 200);
  v52 = *(_DWORD *)(v51 + 124);
  if (v52)
  {
    v53 = *(_QWORD *)(v51 + 112);
    v54 = v53 + 40 * v52;
    v55 = 0uLL;
    do
    {
      v56 = *(_QWORD *)v53 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_WORD *)(v56 + 18) == 386)
      {
        v93 = v8;
        *(_OWORD *)v329 = v55;
        *(_OWORD *)&v329[16] = v55;
        JSC::DFG::AbstractValue::operator=(v53 + 8, (uint64_t *)v329, a3, a4, a5, a6, a7, a8);
        if ((v329[0] & 1) != 0)
          WTF::fastFree(*(_QWORD *)v329 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
        v8 = v93;
        v55 = 0uLL;
      }
      else
      {
        v57 = *((_QWORD *)v8 + 1);
        v58 = *(unsigned int *)(v56 + 20);
        v59 = (uint64_t *)(v57 + 24);
        v60 = (uint64_t *)(v57 + 8);
        if ((*(_QWORD *)v53 & 1) != 0)
          v61 = v59;
        else
          v61 = v60;
        v62 = *v61;
        v63 = *v61 + 32 * v58;
        v64 = *((_DWORD *)v8 + 22);
        v65 = *(_DWORD *)(v63 + 20);
        if (v64 != v65)
        {
          if ((*(_QWORD *)(v63 + 8) & 0x2800FFFFFFF7) != 0)
          {
            if ((v65 ^ v64) >= 2)
            {
              v73 = *(_QWORD *)v63;
              if (*(_QWORD *)v63 != 4)
              {
                *(_QWORD *)v63 = v73 | 2;
                v74 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v73 & 1) != 0)
                {
                  v89 = 2 * *v74;
                  while (v89 * 4)
                  {
                    v90 = *(_QWORD *)&v74[v89];
                    if ((*(_BYTE *)(v90 + 19) & 0xC) == 0)
                    {
                      v91 = *(_QWORD *)(v90 + 96);
                      v92 = (v91 & 1) != 0 ? (v91 >> 1) & 3 : *(unsigned __int8 *)(v91 + 4);
                      v89 -= 2;
                      if (v92 != 2)
                        continue;
                    }
                    v307 = v8;
                    WTF::fastFree((unint64_t)v74, (void *)a2, a3, a4, a5, a6, a7, a8);
                    v55 = 0uLL;
                    v8 = v307;
                    goto LABEL_81;
                  }
                }
                else if (v74)
                {
                  if ((*((_BYTE *)v74 + 19) & 0xC) != 0
                    || ((v75 = *((_QWORD *)v74 + 12), (v75 & 1) != 0)
                      ? (v76 = (v75 >> 1) & 3)
                      : (v76 = *(unsigned __int8 *)(v75 + 4)),
                        v76 == 2))
                  {
LABEL_81:
                    *(_QWORD *)v63 = 4;
                  }
                }
              }
              *(_DWORD *)(v62 + 32 * v58 + 16) = -21020677;
            }
            if ((v64 & 1) != 0)
              *(_QWORD *)v63 &= ~2uLL;
          }
          *(_DWORD *)(v63 + 20) = v64;
        }
        v67 = (_BYTE *)(v53 + 8);
        v66 = *(_QWORD *)(v53 + 8);
        if (v53 + 8 != v63)
        {
          if ((v66 & 1) != 0)
          {
            v81 = v8;
            WTF::fastFree(v66 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
            v55 = 0uLL;
            v8 = v81;
          }
          v68 = *(_QWORD *)v63;
          if ((*(_QWORD *)v63 & 1) == 0 || v68 == 4)
          {
            if ((*v67 & 2) != 0)
              v66 = v68 | 2;
            else
              v66 = v68 & 0xFFFFFFFFFFFFFFFDLL;
            *(_QWORD *)v67 = v66;
          }
          else
          {
            v80 = v8;
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)(v53 + 8), (_QWORD *)v63);
            v55 = 0uLL;
            v8 = v80;
            v66 = *(_QWORD *)v67;
          }
        }
        v69 = v66 & 0xFFFFFFFFFFFFFFFDLL;
        v70 = v66 | 2;
        if ((*(_BYTE *)v63 & 2) == 0)
          v70 = v69;
        *(_QWORD *)(v53 + 8) = v70;
        v71 = v62 + 32 * v58;
        v72 = *(_OWORD *)(v71 + 8);
        *(_QWORD *)(v53 + 32) = *(_QWORD *)(v71 + 24);
        *(_OWORD *)(v53 + 16) = v72;
      }
      v53 += 40;
    }
    while (v53 != v54);
  }
LABEL_281:
  *((_QWORD *)v8 + 9) = 0;
  *((_BYTE *)v8 + 80) = 0;
  *((_BYTE *)v8 + 92) = 0;
  *((_BYTE *)v8 + 82) = 0;
  return JSC::DFG::InPlaceAbstractState::mergeToSuccessors(v8, (JSC::DFG::BasicBlock *)v9, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::DFG::InPlaceAbstractState::atIndex(JSC::DFG::InPlaceAbstractState *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  int v24;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;

  v10 = a2 >> 5;
  v11 = 1 << a2;
  if ((*(_DWORD *)(*((_QWORD *)this + 7) + 4 * (a2 >> 5)) & (1 << a2)) == 0)
  {
    v12 = *((_QWORD *)this + 2);
    v13 = v12 + 32 * a2;
    v14 = *(_QWORD *)(*((_QWORD *)this + 9) + 120);
    v15 = (uint64_t *)(v14 + 32 * a2);
    v16 = *(_QWORD *)v13;
    if (v12 != v14)
    {
      if ((v16 & 1) != 0)
        WTF::fastFree(v16 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
      v17 = *v15;
      if ((*v15 & 1) == 0 || v17 == 4)
      {
        if ((*(_BYTE *)v13 & 2) != 0)
          v16 = v17 | 2;
        else
          v16 = v17 & 0xFFFFFFFFFFFFFFFDLL;
        *(_QWORD *)v13 = v16;
      }
      else
      {
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v13, v15);
        v16 = *(_QWORD *)v13;
      }
    }
    v18 = v16 & 0xFFFFFFFFFFFFFFFDLL;
    v19 = v16 | 2;
    if ((*(_BYTE *)v15 & 2) == 0)
      v19 = v18;
    *(_QWORD *)v13 = v19;
    v20 = *(_OWORD *)(v15 + 1);
    *(_QWORD *)(v13 + 24) = v15[3];
    *(_OWORD *)(v13 + 8) = v20;
    *(_DWORD *)(v13 + 20) = *((_DWORD *)this + 21);
    *(_DWORD *)(*((_QWORD *)this + 7) + 4 * v10) |= v11;
  }
  v21 = *((_QWORD *)this + 2);
  v22 = (uint64_t *)(v21 + 32 * a2);
  v23 = *((_DWORD *)this + 22);
  v24 = *((_DWORD *)v22 + 5);
  if (v23 == v24)
    return v21 + 32 * a2;
  if ((v22[1] & 0x2800FFFFFFF7) != 0)
  {
    if ((v24 ^ v23) >= 2)
    {
      v26 = *v22;
      if (*v22 != 4)
      {
        *v22 = v26 | 2;
        v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v26 & 1) != 0)
        {
          v30 = 2 * *v27;
          while (v30 * 4)
          {
            v31 = *(_QWORD *)&v27[v30];
            if ((*(_BYTE *)(v31 + 19) & 0xC) == 0)
            {
              v32 = *(_QWORD *)(v31 + 96);
              v33 = (v32 & 1) != 0 ? (v32 >> 1) & 3 : *(unsigned __int8 *)(v32 + 4);
              v30 -= 2;
              if (v33 != 2)
                continue;
            }
            WTF::fastFree((unint64_t)v27, (void *)a2, a3, a4, a5, a6, a7, a8);
            goto LABEL_27;
          }
        }
        else if (v27)
        {
          if ((*((_BYTE *)v27 + 19) & 0xC) != 0
            || ((v28 = *((_QWORD *)v27 + 12), (v28 & 1) != 0)
              ? (v29 = (v28 >> 1) & 3)
              : (v29 = *(unsigned __int8 *)(v28 + 4)),
                v29 == 2))
          {
LABEL_27:
            *v22 = 4;
          }
        }
      }
      *(_DWORD *)(v21 + 32 * a2 + 16) = -21020677;
    }
    if ((v23 & 1) != 0)
      *v22 &= ~2uLL;
  }
  *((_DWORD *)v22 + 5) = v23;
  return v21 + 32 * a2;
}

uint64_t JSC::DFG::InPlaceAbstractState::mergeToSuccessors(JSC::DFG::InPlaceAbstractState *this, JSC::DFG::BasicBlock *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  JSC::DFG::InPlaceAbstractState *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  JSC::DFG::InPlaceAbstractState *v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::DFG::BasicBlock *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  JSC::DFG::BasicBlock *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  JSC::DFG::BasicBlock *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  int v82;
  uint64_t v83;
  __int128 *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  __int128 v97;
  const JSC::DFG::StructureAbstractValue *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  int v106;
  BOOL v107;
  JSC::DFG::BasicBlock *v108;
  uint64_t v109;
  JSC::DFG::BasicBlock *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  JSC::DFG::BasicBlock *v122;
  uint64_t v123;
  uint64_t v124;
  JSC::DFG::BasicBlock *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  JSC::DFG::InPlaceAbstractState **v135;
  JSC::DFG::InPlaceAbstractState *v136;
  JSC::DFG::InPlaceAbstractState *v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  __int128 v147;
  int v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  BOOL v157;
  JSC::DFG::BasicBlock *v158;
  uint64_t v159;
  JSC::DFG::BasicBlock *v160;
  uint64_t v161;
  JSC::DFG::BasicBlock *v162;
  uint64_t v163;
  JSC::DFG::BasicBlock *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  int v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  unint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  JSC::DFG::BasicBlock *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  int v206;
  uint64_t v207;
  __int128 *v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  int v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  __int128 v221;
  const JSC::DFG::StructureAbstractValue *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int *v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  uint64_t v230;
  BOOL v231;
  JSC::DFG::BasicBlock *v232;
  uint64_t v233;
  uint64_t v234;
  JSC::DFG::BasicBlock *v235;
  uint64_t v236;
  uint64_t v237;
  JSC::DFG::BasicBlock *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  JSC::DFG::BasicBlock *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  JSC::DFG::BasicBlock *v250;
  uint64_t v251;
  uint64_t v252;
  JSC::DFG::BasicBlock *v253;
  uint64_t v254;
  JSC::DFG::BasicBlock *v255;
  JSC::DFG::BasicBlock *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  __int128 v278;
  int v279;
  unint64_t v280;
  int v281;
  uint64_t v282;
  char v283;
  JSC::DFG::InPlaceAbstractState *v284;
  int v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  JSC::DFG::BasicBlock *v292;
  uint64_t v293;
  uint64_t v294;
  JSC::DFG::BasicBlock *v295;
  uint64_t v296;
  BOOL v297;
  JSC::DFG::BasicBlock *v298;
  uint64_t v299;
  uint64_t v300;
  JSC::DFG::BasicBlock *v301;
  uint64_t v302;
  uint64_t v303;
  JSC::DFG::BasicBlock *v304;
  uint64_t v305;
  JSC::DFG::BasicBlock *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t *v313;
  uint64_t *v314;
  uint64_t v315;
  uint64_t *v316;
  uint64_t v317;
  int v318;
  int v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  __int128 v328;
  uint64_t v329;
  uint64_t v330;
  JSC::DFG::BasicBlock *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unsigned int v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t *v341;
  uint64_t *v342;
  uint64_t *v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  int v347;
  uint64_t v348;
  __int128 *v349;
  uint64_t *v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  int v354;
  uint64_t v355;
  char v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  unint64_t v361;
  __int128 v362;
  const JSC::DFG::StructureAbstractValue *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unsigned int *v367;
  uint64_t v368;
  unsigned int v369;
  uint64_t v370;
  uint64_t v371;
  BOOL v372;
  JSC::DFG::BasicBlock *v373;
  uint64_t v374;
  uint64_t v375;
  JSC::DFG::BasicBlock *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unsigned int v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  JSC::DFG::BasicBlock *v392;
  uint64_t v393;
  uint64_t v394;
  JSC::DFG::BasicBlock *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t *v400;
  uint64_t v401;
  uint64_t *v402;
  uint64_t *v403;
  uint64_t v404;
  JSC::DFG::InPlaceAbstractState **v405;
  JSC::DFG::InPlaceAbstractState *v406;
  JSC::DFG::InPlaceAbstractState *v407;
  int v408;
  int v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  unint64_t v416;
  __int128 v417;
  int v418;
  unint64_t v419;
  char v420;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  BOOL v429;
  JSC::DFG::BasicBlock *v430;
  uint64_t v431;
  uint64_t v432;
  JSC::DFG::BasicBlock *v433;
  uint64_t v434;
  uint64_t v435;
  JSC::DFG::BasicBlock *v436;
  uint64_t v437;
  JSC::DFG::BasicBlock *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  int v447;
  int v448;
  int v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  int v453;
  int v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  int v458;
  int v459;
  int v460;
  int v461;
  unsigned int v462;
  unsigned int v463;
  unsigned int v464;
  int v465;
  int v466;
  int v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  int v471;
  int v472;
  int v473;
  int v474;
  int v475;
  uint64_t v476;
  uint64_t v477;
  int v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  int v483;
  int v484;
  int v485;
  int v486;
  int v487;
  int v488;
  int v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  int v493;
  int v494;
  int v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  JSC::DFG::BasicBlock *v502;
  JSC::DFG::BasicBlock *v503;
  uint64_t v504;
  JSC::DFG::BasicBlock *v505;
  JSC::DFG::BasicBlock *v506;
  JSC::DFG::BasicBlock *v507;
  uint64_t v508;
  JSC::DFG::BasicBlock *v509;
  JSC::DFG::BasicBlock *v510;
  JSC::DFG::InPlaceAbstractState *v512;
  JSC::DFG::InPlaceAbstractState *v513;
  JSC::DFG::InPlaceAbstractState *v514;
  JSC::DFG::InPlaceAbstractState *v515;
  JSC::DFG::InPlaceAbstractState *v516;
  JSC::DFG::InPlaceAbstractState *v517;
  JSC::DFG::InPlaceAbstractState *v518;
  JSC::DFG::InPlaceAbstractState *v519;

  v8 = *((unsigned int *)a2 + 55);
  v9 = v8 - 1;
  do
  {
    if (v9 >= v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1984109F8);
    }
    v10 = *(_QWORD *)(*((_QWORD *)a2 + 26) + 8 * v9--);
  }
  while (*(unsigned __int16 *)(v10 + 18) - 364 > 0xB);
  LOBYTE(v11) = 0;
  switch(*(_WORD *)(v10 + 18))
  {
    case 0x16C:
      v18 = *(_QWORD *)(v10 + 72);
      if (*((_BYTE *)a2 + 13))
      {
        if (*((_BYTE *)a2 + 13) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1984109F0);
        }
        v20 = this;
        if (*(_BYTE *)(v18 + 12) == 1)
        {
          v19 = 0;
        }
        else
        {
          v19 = 1;
          *(_BYTE *)(v18 + 12) = 1;
        }
      }
      else
      {
        v19 = 0;
        v20 = this;
      }
      v21 = *(_DWORD *)(*(_QWORD *)v20 + 944);
      if (v21 != 1)
      {
        if (v21 != 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1984109D0);
        }
        v26 = *((unsigned int *)a2 + 39);
        if ((_DWORD)v26)
        {
          v27 = 32 * v26 - 16;
          while (1)
          {
            v45 = *((_QWORD *)a2 + 18);
            v46 = (uint64_t *)(v45 + v27 - 8);
            v43 = *v46;
            if (*v46)
              break;
LABEL_56:
            v19 |= v43;
            v27 -= 32;
            if (v27 == -16)
              goto LABEL_96;
          }
          v47 = *(_QWORD *)(v18 + 120);
          v48 = (uint64_t *)(v47 + v27 - 16);
          v49 = (uint64_t *)(v45 + v27 - 16);
          v50 = (uint64_t *)(v47 + v27 - 8);
          v51 = *v50;
          if (!*v50)
          {
            v59 = *v48;
            if (v47 != v45)
            {
              if ((v59 & 1) != 0)
              {
                v110 = a2;
                v111 = v18;
                WTF::fastFree(v59 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                v18 = v111;
                v20 = this;
                a2 = v110;
              }
              v60 = *v49;
              if ((*v49 & 1) == 0 || v60 == 4)
              {
                v61 = v60 & 0xFFFFFFFFFFFFFFFDLL;
                v59 = v60 | 2;
                if ((*(_BYTE *)v48 & 2) == 0)
                  v59 = v61;
                *v48 = v59;
              }
              else
              {
                v108 = a2;
                v109 = v18;
                WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)(v47 + v27 - 16), v46 - 1);
                v18 = v109;
                v20 = this;
                a2 = v108;
                v59 = *v48;
              }
            }
            v62 = v59 & 0xFFFFFFFFFFFFFFFDLL;
            v43 = v59 | 2;
            if ((*(_BYTE *)v49 & 2) == 0)
              v43 = v62;
            *v48 = v43;
            v63 = *(_OWORD *)v46;
            *(_QWORD *)(v47 + v27 + 8) = v46[2];
            *(_OWORD *)v50 = v63;
            LOBYTE(v43) = *v46 != 0;
            goto LABEL_56;
          }
          v52 = v51 | v43;
          *v50 = v51 | v43;
          v53 = *(_DWORD *)(v47 + v27);
          v54 = v53 | *(_DWORD *)(v45 + v27);
          if (v54 != v53)
            *(_DWORD *)(v47 + v27) = v54;
          v55 = *v49;
          if ((*v49 & 0xFFFFFFFFFFFFFFFDLL) == 0 || (v56 = *v48, *v48 == 4))
          {
            LOBYTE(v43) = 0;
LABEL_51:
            if (v52 != v51)
              LOBYTE(v43) = 1;
            if (v54 != v53)
              LOBYTE(v43) = 1;
            v44 = *(_QWORD *)(v47 + v27 + 8);
            if (v44 != *(_QWORD *)(v45 + v27 + 8))
            {
              if (v44)
                LOBYTE(v43) = 1;
              *(_QWORD *)(v47 + v27 + 8) = 0;
            }
            goto LABEL_56;
          }
          if (v55 == 4)
          {
            if ((v56 & 1) != 0)
            {
              v122 = a2;
              v469 = v18;
              v123 = v52;
              WTF::fastFree(v56 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
              v52 = v123;
              v18 = v469;
              v20 = this;
              a2 = v122;
            }
            *v48 = 4;
            LOBYTE(v43) = 1;
            goto LABEL_51;
          }
          v57 = 0;
          if ((v55 & 2) != 0 && (v56 & 2) == 0)
          {
            v56 |= 2uLL;
            *v48 = v56;
            v55 = *v49;
            v57 = 1;
          }
          if ((v55 & 1) != 0)
          {
            v492 = v52;
            v503 = a2;
            v105 = v18;
            v106 = v57;
            v107 = WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine((uint64_t *)(v47 + v27 - 16), (_QWORD *)(v45 + v27 - 16));
          }
          else
          {
            v58 = v55 & 0xFFFFFFFFFFFFFFFCLL;
            if ((v55 & 0xFFFFFFFFFFFFFFFCLL) == 0)
            {
LABEL_71:
              LODWORD(v43) = 0;
LABEL_72:
              LOBYTE(v43) = (v43 | v57) != 0;
              goto LABEL_51;
            }
            if ((v56 & 1) == 0)
            {
              if ((v56 & 0xFFFFFFFFFFFFFFFCLL) == v58)
                goto LABEL_71;
              if ((v56 & 0xFFFFFFFFFFFFFFFCLL) != 0)
              {
                v66 = a2;
                v468 = v18;
                v491 = v52;
                v453 = v57;
                v67 = WTF::fastMalloc((WTF *)0x28);
                v57 = v453;
                v18 = v468;
                v52 = v491;
                v20 = this;
                a2 = v66;
                *(_QWORD *)v67 = 0x400000002;
                v68 = *v48;
                *(_QWORD *)(v67 + 8) = *v48 & 0xFFFFFFFFFFFFFFFCLL;
                *(_QWORD *)(v67 + 16) = v58;
                v64 = v68 & 2 | v67 | 1;
              }
              else
              {
                v64 = v58 | v56 & 2;
              }
              *v48 = v64;
LABEL_86:
              v65 = *v48;
              if ((*v48 & 1) != 0 && *(_DWORD *)(v65 & 0xFFFFFFFFFFFFFFFCLL) >= 0xBu)
              {
                v125 = a2;
                v470 = v18;
                v126 = v52;
                v454 = v57;
                WTF::fastFree(v65 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                v57 = v454;
                v52 = v126;
                v18 = v470;
                v20 = this;
                a2 = v125;
                *v48 = 4;
              }
              LODWORD(v43) = 1;
              goto LABEL_72;
            }
            v492 = v52;
            v503 = a2;
            v105 = v18;
            v106 = v57;
            v107 = WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)(v47 + v27 - 16), v55 & 0xFFFFFFFFFFFFFFFCLL);
          }
          v57 = v106;
          v52 = v492;
          a2 = v503;
          v18 = v105;
          v20 = this;
          if (!v107)
            goto LABEL_71;
          goto LABEL_86;
        }
LABEL_96:
        v69 = *(_QWORD *)(v18 + 200);
        v70 = *(_DWORD *)(v69 + 108);
        if (!v70)
          goto LABEL_206;
        v71 = *(_QWORD *)(v69 + 96);
        v72 = v71 + 40 * v70;
        while (1)
        {
          v73 = *(_QWORD *)v71 & 0xFFFFFFFFFFFFFFFELL;
          if (*(_WORD *)(v73 + 18) != 386)
            break;
LABEL_130:
          v71 += 40;
          if (v71 == v72)
            goto LABEL_206;
        }
        v74 = *((_QWORD *)v20 + 1);
        v75 = *(unsigned int *)(v73 + 20);
        v76 = (uint64_t *)(v74 + 24);
        v77 = (uint64_t *)(v74 + 8);
        if ((*(_QWORD *)v71 & 1) != 0)
          v78 = v76;
        else
          v78 = v77;
        v79 = *v78;
        v80 = *v78 + 32 * v75;
        v81 = *((_DWORD *)v20 + 22);
        v82 = *(_DWORD *)(v80 + 20);
        if (v81 == v82)
        {
LABEL_103:
          v84 = (__int128 *)(v80 + 8);
          v83 = *(_QWORD *)(v80 + 8);
          if (v83)
          {
            v85 = (uint64_t *)(v71 + 8);
            v86 = *(_QWORD *)(v71 + 16);
            if (v86)
            {
              v87 = v86 | v83;
              *(_QWORD *)(v71 + 16) = v86 | v83;
              v88 = *(_DWORD *)(v71 + 24);
              v89 = v88 | *(_DWORD *)(v79 + 32 * v75 + 16);
              if (v89 != v88)
                *(_DWORD *)(v71 + 24) = v89;
              if ((*(_QWORD *)v80 & 0xFFFFFFFFFFFFFFFDLL) != 0 && (v90 = *v85, *v85 != 4))
              {
                if (*(_QWORD *)v80 == 4)
                {
                  if ((v90 & 1) != 0)
                  {
                    v124 = v18;
                    v504 = v72;
                    WTF::fastFree(v90 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                    v72 = v504;
                    v20 = this;
                    v18 = v124;
                  }
                  *v85 = 4;
                  v91 = 1;
                }
                else
                {
                  v98 = (const JSC::DFG::StructureAbstractValue *)v80;
                  v99 = v18;
                  v100 = v72;
                  v91 = JSC::DFG::StructureAbstractValue::mergeSlow((JSC::DFG::StructureAbstractValue *)(v71 + 8), v98, a3, a4, a5, a6, a7, a8);
                  v72 = v100;
                  v18 = v99;
                  v20 = this;
                }
              }
              else
              {
                v91 = 0;
              }
              if (v87 == v86)
                LOBYTE(v83) = v91;
              else
                LOBYTE(v83) = 1;
              if (v89 != v88)
                LOBYTE(v83) = 1;
              v92 = *(_QWORD *)(v71 + 32);
              if (v92 != *(_QWORD *)(v79 + 32 * v75 + 24))
              {
                if (v92)
                  LOBYTE(v83) = 1;
                *(_QWORD *)(v71 + 32) = 0;
              }
            }
            else
            {
              v93 = *v85;
              if (v85 != (uint64_t *)v80)
              {
                if ((v93 & 1) != 0)
                {
                  v114 = v18;
                  v115 = v72;
                  WTF::fastFree(v93 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                  v72 = v115;
                  v18 = v114;
                  v20 = this;
                }
                v94 = *(_QWORD *)v80;
                if ((*(_QWORD *)v80 & 1) == 0 || v94 == 4)
                {
                  v95 = v94 & 0xFFFFFFFFFFFFFFFDLL;
                  v93 = v94 | 2;
                  if ((*(_BYTE *)v85 & 2) == 0)
                    v93 = v95;
                  *v85 = v93;
                }
                else
                {
                  v112 = v18;
                  v113 = v72;
                  WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)(v71 + 8), (_QWORD *)v80);
                  v72 = v113;
                  v18 = v112;
                  v20 = this;
                  v93 = *v85;
                }
              }
              v96 = v93 & 0xFFFFFFFFFFFFFFFDLL;
              v83 = v93 | 2;
              if ((*(_BYTE *)v80 & 2) == 0)
                v83 = v96;
              *v85 = v83;
              v97 = *v84;
              *(_QWORD *)(v71 + 32) = *(_QWORD *)(v80 + 24);
              *(_OWORD *)(v71 + 16) = v97;
              LOBYTE(v83) = *(_QWORD *)v84 != 0;
            }
          }
          v19 |= v83;
          goto LABEL_130;
        }
        if ((*(_QWORD *)(v80 + 8) & 0x2800FFFFFFF7) == 0)
        {
LABEL_133:
          *(_DWORD *)(v80 + 20) = v81;
          goto LABEL_103;
        }
        if ((v82 ^ v81) < 2)
        {
LABEL_139:
          if ((v81 & 1) != 0)
            *(_QWORD *)v80 &= ~2uLL;
          goto LABEL_133;
        }
        v101 = *(_QWORD *)v80;
        if (*(_QWORD *)v80 != 4)
        {
          *(_QWORD *)v80 = v101 | 2;
          v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v101 & 1) != 0)
          {
            v116 = 2 * *v102;
            do
            {
              if (!(v116 * 4))
                goto LABEL_138;
              v117 = *(_QWORD *)&v102[v116];
              if ((*(_BYTE *)(v117 + 19) & 0xC) != 0)
                break;
              v118 = *(_QWORD *)(v117 + 96);
              v119 = (v118 & 1) != 0 ? (v118 >> 1) & 3 : *(unsigned __int8 *)(v118 + 4);
              v116 -= 2;
            }
            while (v119 != 2);
            v120 = v18;
            v121 = v72;
            WTF::fastFree((unint64_t)v102, a2, a3, a4, a5, a6, a7, a8);
            v72 = v121;
            v18 = v120;
            v20 = this;
          }
          else
          {
            if (!v102)
              goto LABEL_138;
            if ((*((_BYTE *)v102 + 19) & 0xC) == 0)
            {
              v103 = *((_QWORD *)v102 + 12);
              v104 = (v103 & 1) != 0 ? (v103 >> 1) & 3 : *(unsigned __int8 *)(v103 + 4);
              if (v104 != 2)
                goto LABEL_138;
            }
          }
          *(_QWORD *)v80 = 4;
        }
LABEL_138:
        *(_DWORD *)(v79 + 32 * v75 + 16) = -21020677;
        goto LABEL_139;
      }
      if (!*((_DWORD *)a2 + 27))
        goto LABEL_206;
      v22 = 0;
      v23 = 24;
      do
      {
        v127 = *(_QWORD *)(*(_QWORD *)(v18 + 72) + 8 * v22);
        if (!v127)
          goto LABEL_171;
        v128 = *((_QWORD *)a2 + 18);
        v130 = (uint64_t *)(v128 + v23 - 16);
        v129 = *v130;
        if (!*v130)
        {
          LOBYTE(v127) = 0;
          goto LABEL_171;
        }
        v131 = *(_QWORD *)(v18 + 120);
        v132 = (uint64_t *)(v131 + v23 - 24);
        v133 = (uint64_t *)(v128 + v23 - 24);
        v134 = v131 + v23;
        v135 = (JSC::DFG::InPlaceAbstractState **)(v131 + v23 - 16);
        v136 = *v135;
        if (*v135)
        {
          v137 = (JSC::DFG::InPlaceAbstractState *)((unint64_t)v136 | v129);
          *v135 = (JSC::DFG::InPlaceAbstractState *)((unint64_t)v136 | v129);
          v138 = *(_DWORD *)(v134 - 8);
          v139 = v138 | *(_DWORD *)(v128 + v23 - 8);
          if (v139 != v138)
            *(_DWORD *)(v134 - 8) = v139;
          v140 = *v133;
          if ((*v133 & 0xFFFFFFFFFFFFFFFDLL) == 0 || (v141 = *v132, *v132 == 4))
          {
            LOBYTE(v127) = 0;
LABEL_180:
            if (v137 != v136)
              LOBYTE(v127) = 1;
            if (v139 != v138)
              LOBYTE(v127) = 1;
            v142 = *(_QWORD *)(v131 + v23);
            if (v142 != *(_QWORD *)(v128 + v23))
            {
              if (v142)
                LOBYTE(v127) = 1;
              *(_QWORD *)(v131 + v23) = 0;
            }
            goto LABEL_171;
          }
          if (v140 == 4)
          {
            if ((v141 & 1) != 0)
            {
              v162 = a2;
              v163 = v18;
              v514 = v137;
              v472 = v139;
              WTF::fastFree(v141 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
              v139 = v472;
              v137 = v514;
              v18 = v163;
              a2 = v162;
            }
            *v132 = 4;
            LOBYTE(v127) = 1;
            goto LABEL_180;
          }
          v148 = 0;
          if ((v140 & 2) != 0 && (v141 & 2) == 0)
          {
            v141 |= 2uLL;
            *v132 = v141;
            v140 = *v133;
            v148 = 1;
          }
          if ((v140 & 1) != 0)
          {
            v506 = a2;
            v513 = v137;
            v155 = v18;
            v156 = v139;
            v494 = v148;
            v157 = WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine((uint64_t *)(v131 + v23 - 24), (_QWORD *)(v128 + v23 - 24));
          }
          else
          {
            v149 = v140 & 0xFFFFFFFFFFFFFFFCLL;
            if ((v140 & 0xFFFFFFFFFFFFFFFCLL) == 0)
            {
LABEL_204:
              LODWORD(v127) = 0;
LABEL_205:
              LOBYTE(v127) = (v127 | v148) != 0;
              goto LABEL_180;
            }
            if ((v141 & 1) == 0)
            {
              if ((v141 & 0xFFFFFFFFFFFFFFFCLL) == v149)
                goto LABEL_204;
              if ((v141 & 0xFFFFFFFFFFFFFFFCLL) != 0)
              {
                v505 = a2;
                v512 = v137;
                v152 = v18;
                v471 = v139;
                v493 = v148;
                v153 = WTF::fastMalloc((WTF *)0x28);
                v148 = v493;
                v139 = v471;
                a2 = v505;
                v137 = v512;
                v18 = v152;
                *(_QWORD *)v153 = 0x400000002;
                v154 = *v132;
                *(_QWORD *)(v153 + 8) = *v132 & 0xFFFFFFFFFFFFFFFCLL;
                *(_QWORD *)(v153 + 16) = v149;
                v150 = v154 & 2 | v153 | 1;
              }
              else
              {
                v150 = v149 | v141 & 2;
              }
              *v132 = v150;
LABEL_210:
              v151 = *v132;
              if ((*v132 & 1) != 0 && *(_DWORD *)(v151 & 0xFFFFFFFFFFFFFFFCLL) >= 0xBu)
              {
                v164 = a2;
                v165 = v18;
                v515 = v137;
                v473 = v139;
                v495 = v148;
                WTF::fastFree(v151 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                v148 = v495;
                v139 = v473;
                v137 = v515;
                v18 = v165;
                a2 = v164;
                *v132 = 4;
              }
              LODWORD(v127) = 1;
              goto LABEL_205;
            }
            v506 = a2;
            v513 = v137;
            v155 = v18;
            v156 = v139;
            v494 = v148;
            v157 = WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)(v131 + v23 - 24), v140 & 0xFFFFFFFFFFFFFFFCLL);
          }
          v148 = v494;
          v139 = v156;
          a2 = v506;
          v137 = v513;
          v18 = v155;
          if (!v157)
            goto LABEL_204;
          goto LABEL_210;
        }
        v143 = *v132;
        if (v131 != v128)
        {
          if ((v143 & 1) != 0)
          {
            v160 = a2;
            v161 = v18;
            WTF::fastFree(v143 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
            v18 = v161;
            a2 = v160;
          }
          v144 = *v133;
          if ((*v133 & 1) == 0 || v144 == 4)
          {
            v145 = v144 & 0xFFFFFFFFFFFFFFFDLL;
            v143 = v144 | 2;
            if ((*(_BYTE *)v132 & 2) == 0)
              v143 = v145;
            *v132 = v143;
          }
          else
          {
            v158 = a2;
            v159 = v18;
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v132, (_QWORD *)(v128 + v23 - 24));
            v18 = v159;
            a2 = v158;
            v143 = *v132;
          }
        }
        v146 = v143 & 0xFFFFFFFFFFFFFFFDLL;
        v127 = v143 | 2;
        if ((*(_BYTE *)v133 & 2) == 0)
          v127 = v146;
        *v132 = v127;
        v147 = *(_OWORD *)v130;
        v135[2] = *(JSC::DFG::InPlaceAbstractState **)(v128 + v23);
        *(_OWORD *)v135 = v147;
        LOBYTE(v127) = *v130 != 0;
LABEL_171:
        v19 |= v127;
        ++v22;
        v23 += 32;
      }
      while (v22 < *((unsigned int *)a2 + 27));
LABEL_206:
      LOBYTE(v11) = (*(_BYTE *)(v18 + 15) == 0) | v19;
      *(_BYTE *)(v18 + 16) |= (*(_BYTE *)(v18 + 15) == 0) | v19 & 1;
      return v11 & 1;
    case 0x16D:
      if (*((_BYTE *)a2 + 14) == 2)
      {
        v11 = 0;
        goto LABEL_384;
      }
      v12 = **(_QWORD **)(v10 + 72);
      if (*((_BYTE *)a2 + 13))
      {
        v14 = this;
        if (*((_BYTE *)a2 + 13) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1984109B0);
        }
        if (*(_BYTE *)(v12 + 12) == 1)
        {
          v13 = 0;
        }
        else
        {
          v13 = 1;
          *(_BYTE *)(v12 + 12) = 1;
        }
      }
      else
      {
        v13 = 0;
        v14 = this;
      }
      v15 = *(_DWORD *)(*(_QWORD *)v14 + 944);
      if (v15 == 1)
      {
        if (!*((_DWORD *)a2 + 27))
          goto LABEL_383;
        v16 = 0;
        v17 = 24;
        while (1)
        {
          v258 = *(_QWORD *)(*(_QWORD *)(v12 + 72) + 8 * v16);
          if (v258)
          {
            v259 = *((_QWORD *)a2 + 18);
            v261 = (uint64_t *)(v259 + v17 - 16);
            v260 = *v261;
            if (*v261)
            {
              v262 = *(_QWORD *)(v12 + 120);
              v263 = (uint64_t *)(v262 + v17 - 24);
              v264 = (uint64_t *)(v259 + v17 - 24);
              v265 = v262 + v17;
              v266 = (uint64_t *)(v262 + v17 - 16);
              v267 = *v266;
              if (!*v266)
              {
                v274 = *v263;
                if (v262 != v259)
                {
                  if ((v274 & 1) != 0)
                  {
                    v301 = a2;
                    v302 = v10;
                    v303 = v12;
                    WTF::fastFree(v274 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                    v12 = v303;
                    v10 = v302;
                    a2 = v301;
                  }
                  v275 = *v264;
                  if ((*v264 & 1) == 0 || v275 == 4)
                  {
                    v276 = v275 & 0xFFFFFFFFFFFFFFFDLL;
                    v274 = v275 | 2;
                    if ((*(_BYTE *)v263 & 2) == 0)
                      v274 = v276;
                    *v263 = v274;
                  }
                  else
                  {
                    v298 = a2;
                    v299 = v10;
                    v300 = v12;
                    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v263, v264);
                    v12 = v300;
                    v10 = v299;
                    a2 = v298;
                    v274 = *v263;
                  }
                }
                v277 = v274 & 0xFFFFFFFFFFFFFFFDLL;
                v258 = v274 | 2;
                if ((*(_BYTE *)v264 & 2) == 0)
                  v258 = v277;
                *v263 = v258;
                v278 = *(_OWORD *)v261;
                v266[2] = v261[2];
                *(_OWORD *)v266 = v278;
                LODWORD(v258) = *v261 != 0;
                goto LABEL_348;
              }
              v268 = v267 | v260;
              *v266 = v267 | v260;
              v269 = *(_DWORD *)(v265 - 8);
              v270 = v269 | *(_DWORD *)(v259 + v17 - 8);
              if (v270 != v269)
                *(_DWORD *)(v265 - 8) = v270;
              v271 = *v264;
              if ((*v264 & 0xFFFFFFFFFFFFFFFDLL) == 0 || (v272 = *v263, *v263 == 4))
              {
                LODWORD(v258) = 0;
LABEL_357:
                if (v268 != v267)
                  LODWORD(v258) = 1;
                if (v270 != v269)
                  LODWORD(v258) = 1;
                v273 = *(_QWORD *)(v262 + v17);
                if (v273 != *(_QWORD *)(v259 + v17))
                {
                  if (v273)
                    LODWORD(v258) = 1;
                  *(_QWORD *)(v262 + v17) = 0;
                }
                goto LABEL_348;
              }
              if (v271 == 4)
              {
                if ((v272 & 1) != 0)
                {
                  v304 = a2;
                  v445 = v10;
                  v305 = v12;
                  v481 = v268;
                  v460 = v270;
                  WTF::fastFree(v272 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                  v270 = v460;
                  v268 = v481;
                  v12 = v305;
                  v10 = v445;
                  a2 = v304;
                }
                *v263 = 4;
                LODWORD(v258) = 1;
                goto LABEL_357;
              }
              v279 = 0;
              if ((v271 & 2) != 0 && (v272 & 2) == 0)
              {
                v272 |= 2uLL;
                *v263 = v272;
                v271 = *v264;
                v279 = 1;
              }
              if ((v271 & 1) != 0)
              {
                v295 = a2;
                v296 = v10;
                v480 = v268;
                v498 = v12;
                v459 = v270;
                v448 = v279;
                v297 = WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine((uint64_t *)(v262 + v17 - 24), (_QWORD *)(v259 + v17 - 24));
              }
              else
              {
                v280 = v271 & 0xFFFFFFFFFFFFFFFCLL;
                if ((v271 & 0xFFFFFFFFFFFFFFFCLL) == 0)
                  goto LABEL_381;
                if ((v272 & 1) == 0)
                {
                  if ((v272 & 0xFFFFFFFFFFFFFFFCLL) == v280)
                    goto LABEL_381;
                  if ((v272 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                  {
                    v292 = a2;
                    v444 = v10;
                    v479 = v268;
                    v497 = v12;
                    v458 = v270;
                    v447 = v279;
                    v293 = WTF::fastMalloc((WTF *)0x28);
                    v279 = v447;
                    v270 = v458;
                    v268 = v479;
                    v12 = v497;
                    v10 = v444;
                    a2 = v292;
                    *(_QWORD *)v293 = 0x400000002;
                    v294 = *v263;
                    *(_QWORD *)(v293 + 8) = *v263 & 0xFFFFFFFFFFFFFFFCLL;
                    *(_QWORD *)(v293 + 16) = v280;
                    v290 = v294 & 2 | v293 | 1;
                  }
                  else
                  {
                    v290 = v280 | v272 & 2;
                  }
                  *v263 = v290;
LABEL_395:
                  v291 = *v263;
                  if ((*v263 & 1) != 0 && *(_DWORD *)(v291 & 0xFFFFFFFFFFFFFFFCLL) >= 0xBu)
                  {
                    v306 = a2;
                    v446 = v10;
                    v307 = v12;
                    v482 = v268;
                    v461 = v270;
                    v449 = v279;
                    WTF::fastFree(v291 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                    v279 = v449;
                    v270 = v461;
                    v268 = v482;
                    v12 = v307;
                    v10 = v446;
                    a2 = v306;
                    *v263 = 4;
                  }
                  v281 = 1;
                  goto LABEL_382;
                }
                v295 = a2;
                v296 = v10;
                v480 = v268;
                v498 = v12;
                v459 = v270;
                v448 = v279;
                v297 = WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)(v262 + v17 - 24), v271 & 0xFFFFFFFFFFFFFFFCLL);
              }
              v279 = v448;
              v270 = v459;
              v268 = v480;
              v12 = v498;
              v10 = v296;
              a2 = v295;
              if (v297)
                goto LABEL_395;
LABEL_381:
              v281 = 0;
LABEL_382:
              LODWORD(v258) = (v281 | v279) != 0;
              goto LABEL_357;
            }
            LODWORD(v258) = 0;
          }
LABEL_348:
          v13 |= v258;
          ++v16;
          v17 += 32;
          if (v16 >= *((unsigned int *)a2 + 27))
          {
LABEL_383:
            v11 = (*(_BYTE *)(v12 + 15) == 0) | v13;
            *(_BYTE *)(v12 + 16) |= (*(_BYTE *)(v12 + 15) == 0) | v13 & 1;
            if (*((_BYTE *)a2 + 14) == 1)
              return v11 & 1;
LABEL_384:
            v282 = *(_QWORD *)(*(_QWORD *)(v10 + 72) + 16);
            if (*((_BYTE *)a2 + 13))
            {
              if (*((_BYTE *)a2 + 13) != 1)
              {
                __break(0xC471u);
                JUMPOUT(0x198411E58);
              }
              v284 = this;
              if (*(_BYTE *)(v282 + 12) == 1)
              {
                v283 = 0;
              }
              else
              {
                v283 = 1;
                *(_BYTE *)(v282 + 12) = 1;
              }
            }
            else
            {
              v283 = 0;
              v284 = this;
            }
            v285 = *(_DWORD *)(*(_QWORD *)v284 + 944);
            if (v285 == 1)
            {
              if (*((_DWORD *)a2 + 27))
              {
                v286 = 0;
                v287 = 24;
                do
                {
                  v397 = *(_QWORD *)(*(_QWORD *)(v282 + 72) + 8 * v286);
                  if (v397)
                  {
                    v398 = *((_QWORD *)a2 + 18);
                    v400 = (uint64_t *)(v398 + v287 - 16);
                    v399 = *v400;
                    if (*v400)
                    {
                      v401 = *(_QWORD *)(v282 + 120);
                      v402 = (uint64_t *)(v401 + v287 - 24);
                      v403 = (uint64_t *)(v398 + v287 - 24);
                      v404 = v401 + v287;
                      v405 = (JSC::DFG::InPlaceAbstractState **)(v401 + v287 - 16);
                      v406 = *v405;
                      if (!*v405)
                      {
                        v413 = *v402;
                        if (v401 != v398)
                        {
                          if ((v413 & 1) != 0)
                          {
                            v433 = a2;
                            v434 = v11;
                            v435 = v282;
                            WTF::fastFree(v413 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                            v282 = v435;
                            v11 = v434;
                            a2 = v433;
                          }
                          v414 = *v403;
                          if ((*v403 & 1) == 0 || v414 == 4)
                          {
                            v415 = v414 & 0xFFFFFFFFFFFFFFFDLL;
                            v413 = v414 | 2;
                            if ((*(_BYTE *)v402 & 2) == 0)
                              v413 = v415;
                            *v402 = v413;
                          }
                          else
                          {
                            v430 = a2;
                            v431 = v11;
                            v432 = v282;
                            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v402, v403);
                            v282 = v432;
                            v11 = v431;
                            a2 = v430;
                            v413 = *v402;
                          }
                        }
                        v416 = v413 & 0xFFFFFFFFFFFFFFFDLL;
                        v397 = v413 | 2;
                        if ((*(_BYTE *)v403 & 2) == 0)
                          v397 = v416;
                        *v402 = v397;
                        v417 = *(_OWORD *)v400;
                        v405[2] = (JSC::DFG::InPlaceAbstractState *)v400[2];
                        *(_OWORD *)v405 = v417;
                        LOBYTE(v397) = *v400 != 0;
                        goto LABEL_539;
                      }
                      v407 = (JSC::DFG::InPlaceAbstractState *)((unint64_t)v406 | v399);
                      *v405 = (JSC::DFG::InPlaceAbstractState *)((unint64_t)v406 | v399);
                      v408 = *(_DWORD *)(v404 - 8);
                      v409 = v408 | *(_DWORD *)(v398 + v287 - 8);
                      if (v409 != v408)
                        *(_DWORD *)(v404 - 8) = v409;
                      v410 = *v403;
                      if ((*v403 & 0xFFFFFFFFFFFFFFFDLL) == 0 || (v411 = *v402, *v402 == 4))
                      {
                        LOBYTE(v397) = 0;
LABEL_548:
                        if (v407 != v406)
                          LOBYTE(v397) = 1;
                        if (v409 != v408)
                          LOBYTE(v397) = 1;
                        v412 = *(_QWORD *)(v401 + v287);
                        if (v412 != *(_QWORD *)(v398 + v287))
                        {
                          if (v412)
                            LOBYTE(v397) = 1;
                          *(_QWORD *)(v401 + v287) = 0;
                        }
                        goto LABEL_539;
                      }
                      if (v410 == 4)
                      {
                        if ((v411 & 1) != 0)
                        {
                          v436 = a2;
                          v437 = v11;
                          v500 = v282;
                          v518 = v407;
                          v488 = v409;
                          WTF::fastFree(v411 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                          v409 = v488;
                          v407 = v518;
                          v282 = v500;
                          v11 = v437;
                          a2 = v436;
                        }
                        *v402 = 4;
                        LOBYTE(v397) = 1;
                        goto LABEL_548;
                      }
                      v418 = 0;
                      if ((v410 & 2) != 0 && (v411 & 2) == 0)
                      {
                        v411 |= 2uLL;
                        *v402 = v411;
                        v410 = *v403;
                        v418 = 1;
                      }
                      if ((v410 & 1) != 0)
                      {
                        v510 = a2;
                        v517 = v407;
                        v427 = v11;
                        v428 = v282;
                        v487 = v409;
                        v466 = v418;
                        v429 = WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine((uint64_t *)(v401 + v287 - 24), (_QWORD *)(v398 + v287 - 24));
                      }
                      else
                      {
                        v419 = v410 & 0xFFFFFFFFFFFFFFFCLL;
                        if ((v410 & 0xFFFFFFFFFFFFFFFCLL) == 0)
                          goto LABEL_572;
                        if ((v411 & 1) == 0)
                        {
                          if ((v411 & 0xFFFFFFFFFFFFFFFCLL) == v419)
                            goto LABEL_572;
                          if ((v411 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                          {
                            v499 = v282;
                            v509 = a2;
                            v424 = v11;
                            v516 = v407;
                            v486 = v409;
                            v465 = v418;
                            v425 = WTF::fastMalloc((WTF *)0x28);
                            v418 = v465;
                            v409 = v486;
                            a2 = v509;
                            v407 = v516;
                            v282 = v499;
                            v11 = v424;
                            *(_QWORD *)v425 = 0x400000002;
                            v426 = *v402;
                            *(_QWORD *)(v425 + 8) = *v402 & 0xFFFFFFFFFFFFFFFCLL;
                            *(_QWORD *)(v425 + 16) = v419;
                            v422 = v426 & 2 | v425 | 1;
                          }
                          else
                          {
                            v422 = v419 | v411 & 2;
                          }
                          *v402 = v422;
LABEL_579:
                          v423 = *v402;
                          if ((*v402 & 1) != 0 && *(_DWORD *)(v423 & 0xFFFFFFFFFFFFFFFCLL) >= 0xBu)
                          {
                            v438 = a2;
                            v439 = v11;
                            v501 = v282;
                            v519 = v407;
                            v489 = v409;
                            v467 = v418;
                            WTF::fastFree(v423 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                            v418 = v467;
                            v409 = v489;
                            v407 = v519;
                            v282 = v501;
                            v11 = v439;
                            a2 = v438;
                            *v402 = 4;
                          }
                          LODWORD(v397) = 1;
                          goto LABEL_573;
                        }
                        v510 = a2;
                        v517 = v407;
                        v427 = v11;
                        v428 = v282;
                        v487 = v409;
                        v466 = v418;
                        v429 = WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)(v401 + v287 - 24), v410 & 0xFFFFFFFFFFFFFFFCLL);
                      }
                      v418 = v466;
                      v409 = v487;
                      a2 = v510;
                      v407 = v517;
                      v282 = v428;
                      v11 = v427;
                      if (v429)
                        goto LABEL_579;
LABEL_572:
                      LODWORD(v397) = 0;
LABEL_573:
                      LOBYTE(v397) = (v397 | v418) != 0;
                      goto LABEL_548;
                    }
                    LOBYTE(v397) = 0;
                  }
LABEL_539:
                  v283 |= v397;
                  ++v286;
                  v287 += 32;
                }
                while (v286 < *((unsigned int *)a2 + 27));
              }
LABEL_574:
              v420 = (*(_BYTE *)(v282 + 15) == 0) | v283;
              *(_BYTE *)(v282 + 16) |= (*(_BYTE *)(v282 + 15) == 0) | v283 & 1;
              LOBYTE(v11) = v11 | v420;
              return v11 & 1;
            }
            if (v285 != 2)
            {
              __break(0xC471u);
              JUMPOUT(0x198411E38);
            }
            v288 = *((unsigned int *)a2 + 39);
            v496 = v282;
            if ((_DWORD)v288)
            {
              v289 = 32 * v288 - 16;
              while (1)
              {
                v310 = *((_QWORD *)a2 + 18);
                v311 = (uint64_t *)(v310 + v289 - 8);
                v308 = *v311;
                if (*v311)
                  break;
LABEL_424:
                v283 |= v308;
                v289 -= 32;
                if (v289 == -16)
                  goto LABEL_464;
              }
              v312 = *(_QWORD *)(v282 + 120);
              v313 = (uint64_t *)(v312 + v289 - 16);
              v314 = (uint64_t *)(v310 + v289 - 16);
              v316 = (uint64_t *)(v312 + v289 - 8);
              v315 = *v316;
              if (!*v316)
              {
                v324 = *v313;
                if (v312 != v310)
                {
                  if ((v324 & 1) != 0)
                  {
                    v376 = a2;
                    v377 = v11;
                    v378 = v282;
                    WTF::fastFree(v324 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                    v282 = v378;
                    v11 = v377;
                    v284 = this;
                    a2 = v376;
                  }
                  v325 = *v314;
                  if ((*v314 & 1) == 0 || v325 == 4)
                  {
                    v326 = v325 & 0xFFFFFFFFFFFFFFFDLL;
                    v324 = v325 | 2;
                    if ((*(_BYTE *)v313 & 2) == 0)
                      v324 = v326;
                    *v313 = v324;
                  }
                  else
                  {
                    v373 = a2;
                    v374 = v11;
                    v375 = v282;
                    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)(v312 + v289 - 16), v311 - 1);
                    v282 = v375;
                    v11 = v374;
                    v284 = this;
                    a2 = v373;
                    v324 = *v313;
                  }
                }
                v327 = v324 & 0xFFFFFFFFFFFFFFFDLL;
                v308 = v324 | 2;
                if ((*(_BYTE *)v314 & 2) == 0)
                  v308 = v327;
                *v313 = v308;
                v328 = *(_OWORD *)v311;
                *(_QWORD *)(v312 + v289 + 8) = v311[2];
                *(_OWORD *)v316 = v328;
                LOBYTE(v308) = *v311 != 0;
                goto LABEL_424;
              }
              v317 = v315 | v308;
              *v316 = v315 | v308;
              v318 = *(_DWORD *)(v312 + v289);
              v319 = v318 | *(_DWORD *)(v310 + v289);
              if (v319 != v318)
                *(_DWORD *)(v312 + v289) = v319;
              v320 = *v314;
              if ((*v314 & 0xFFFFFFFFFFFFFFFDLL) == 0 || (v321 = *v313, *v313 == 4))
              {
                LOBYTE(v308) = 0;
              }
              else if (v320 == 4)
              {
                if ((v321 & 1) != 0)
                {
                  v392 = a2;
                  v463 = v11;
                  v393 = v282;
                  v451 = v317;
                  WTF::fastFree(v321 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                  v317 = v451;
                  v282 = v393;
                  v11 = v463;
                  v284 = this;
                  a2 = v392;
                }
                *v313 = 4;
                LOBYTE(v308) = 1;
              }
              else
              {
                v322 = 0;
                if ((v320 & 2) != 0 && (v321 & 2) == 0)
                {
                  v321 |= 2uLL;
                  *v313 = v321;
                  v320 = *v314;
                  v322 = 1;
                }
                if ((v320 & 1) != 0)
                {
                  v507 = a2;
                  v370 = v11;
                  v371 = v317;
                  v484 = v322;
                  v372 = WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine((uint64_t *)(v312 + v289 - 16), (_QWORD *)(v310 + v289 - 16));
                }
                else
                {
                  v323 = v320 & 0xFFFFFFFFFFFFFFFCLL;
                  if ((v320 & 0xFFFFFFFFFFFFFFFCLL) == 0)
                    goto LABEL_439;
                  if ((v321 & 1) == 0)
                  {
                    if ((v321 & 0xFFFFFFFFFFFFFFFCLL) == v323)
                      goto LABEL_439;
                    if ((v321 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                    {
                      v331 = a2;
                      v462 = v11;
                      v450 = v317;
                      v483 = v322;
                      v332 = WTF::fastMalloc((WTF *)0x28);
                      v322 = v483;
                      v317 = v450;
                      v282 = v496;
                      v11 = v462;
                      v284 = this;
                      a2 = v331;
                      *(_QWORD *)v332 = 0x400000002;
                      v333 = *v313;
                      *(_QWORD *)(v332 + 8) = *v313 & 0xFFFFFFFFFFFFFFFCLL;
                      *(_QWORD *)(v332 + 16) = v323;
                      v329 = v333 & 2 | v332 | 1;
                    }
                    else
                    {
                      v329 = v323 | v321 & 2;
                    }
                    *v313 = v329;
LABEL_454:
                    v330 = *v313;
                    if ((*v313 & 1) != 0 && *(_DWORD *)(v330 & 0xFFFFFFFFFFFFFFFCLL) >= 0xBu)
                    {
                      v395 = a2;
                      v464 = v11;
                      v396 = v282;
                      v452 = v317;
                      v485 = v322;
                      WTF::fastFree(v330 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                      v322 = v485;
                      v317 = v452;
                      v282 = v396;
                      v11 = v464;
                      v284 = this;
                      a2 = v395;
                      *v313 = 4;
                    }
                    LODWORD(v308) = 1;
                    goto LABEL_440;
                  }
                  v507 = a2;
                  v370 = v11;
                  v371 = v317;
                  v484 = v322;
                  v372 = WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)(v312 + v289 - 16), v320 & 0xFFFFFFFFFFFFFFFCLL);
                }
                v322 = v484;
                v317 = v371;
                v282 = v496;
                a2 = v507;
                v11 = v370;
                v284 = this;
                if (v372)
                  goto LABEL_454;
LABEL_439:
                LODWORD(v308) = 0;
LABEL_440:
                LOBYTE(v308) = (v308 | v322) != 0;
              }
              if (v317 != v315)
                LOBYTE(v308) = 1;
              if (v319 != v318)
                LOBYTE(v308) = 1;
              v309 = *(_QWORD *)(v312 + v289 + 8);
              if (v309 != *(_QWORD *)(v310 + v289 + 8))
              {
                if (v309)
                  LOBYTE(v308) = 1;
                *(_QWORD *)(v312 + v289 + 8) = 0;
              }
              goto LABEL_424;
            }
LABEL_464:
            v334 = *(_QWORD *)(v282 + 200);
            v335 = *(_DWORD *)(v334 + 108);
            if (!v335)
              goto LABEL_574;
            v336 = *(_QWORD *)(v334 + 96);
            v337 = v336 + 40 * v335;
            while (2)
            {
              v338 = *(_QWORD *)v336 & 0xFFFFFFFFFFFFFFFELL;
              if (*(_WORD *)(v338 + 18) == 386)
              {
LABEL_498:
                v336 += 40;
                if (v336 == v337)
                  goto LABEL_574;
                continue;
              }
              break;
            }
            v339 = *((_QWORD *)v284 + 1);
            v340 = *(unsigned int *)(v338 + 20);
            v341 = (uint64_t *)(v339 + 24);
            v342 = (uint64_t *)(v339 + 8);
            if ((*(_QWORD *)v336 & 1) != 0)
              v343 = v341;
            else
              v343 = v342;
            v344 = *v343;
            v345 = *v343 + 32 * v340;
            v346 = *((_DWORD *)v284 + 22);
            v347 = *(_DWORD *)(v345 + 20);
            if (v346 == v347)
            {
LABEL_471:
              v349 = (__int128 *)(v345 + 8);
              v348 = *(_QWORD *)(v345 + 8);
              if (v348)
              {
                v350 = (uint64_t *)(v336 + 8);
                v351 = *(_QWORD *)(v336 + 16);
                if (v351)
                {
                  v352 = v351 | v348;
                  *(_QWORD *)(v336 + 16) = v351 | v348;
                  v353 = *(_DWORD *)(v336 + 24);
                  v354 = v353 | *(_DWORD *)(v344 + 32 * v340 + 16);
                  if (v354 != v353)
                    *(_DWORD *)(v336 + 24) = v354;
                  if ((*(_QWORD *)v345 & 0xFFFFFFFFFFFFFFFDLL) != 0 && (v355 = *v350, *v350 != 4))
                  {
                    if (*(_QWORD *)v345 == 4)
                    {
                      if ((v355 & 1) != 0)
                      {
                        v394 = v11;
                        v508 = v337;
                        WTF::fastFree(v355 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                        v282 = v496;
                        v337 = v508;
                        v11 = v394;
                        v284 = this;
                      }
                      *v350 = 4;
                      v356 = 1;
                    }
                    else
                    {
                      v363 = (const JSC::DFG::StructureAbstractValue *)v345;
                      v364 = v11;
                      v365 = v337;
                      v356 = JSC::DFG::StructureAbstractValue::mergeSlow((JSC::DFG::StructureAbstractValue *)(v336 + 8), v363, a3, a4, a5, a6, a7, a8);
                      v337 = v365;
                      v282 = v496;
                      v11 = v364;
                      v284 = this;
                    }
                  }
                  else
                  {
                    v356 = 0;
                  }
                  if (v352 == v351)
                    LOBYTE(v348) = v356;
                  else
                    LOBYTE(v348) = 1;
                  if (v354 != v353)
                    LOBYTE(v348) = 1;
                  v357 = *(_QWORD *)(v336 + 32);
                  if (v357 != *(_QWORD *)(v344 + 32 * v340 + 24))
                  {
                    if (v357)
                      LOBYTE(v348) = 1;
                    *(_QWORD *)(v336 + 32) = 0;
                  }
                }
                else
                {
                  v358 = *v350;
                  if (v350 != (uint64_t *)v345)
                  {
                    if ((v358 & 1) != 0)
                    {
                      v382 = v11;
                      v383 = v282;
                      v384 = v337;
                      WTF::fastFree(v358 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                      v337 = v384;
                      v282 = v383;
                      v11 = v382;
                      v284 = this;
                    }
                    v359 = *(_QWORD *)v345;
                    if ((*(_QWORD *)v345 & 1) == 0 || v359 == 4)
                    {
                      v360 = v359 & 0xFFFFFFFFFFFFFFFDLL;
                      v358 = v359 | 2;
                      if ((*(_BYTE *)v350 & 2) == 0)
                        v358 = v360;
                      *v350 = v358;
                    }
                    else
                    {
                      v379 = v11;
                      v380 = v282;
                      v381 = v337;
                      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)(v336 + 8), (_QWORD *)v345);
                      v337 = v381;
                      v282 = v380;
                      v11 = v379;
                      v284 = this;
                      v358 = *v350;
                    }
                  }
                  v361 = v358 & 0xFFFFFFFFFFFFFFFDLL;
                  v348 = v358 | 2;
                  if ((*(_BYTE *)v345 & 2) == 0)
                    v348 = v361;
                  *v350 = v348;
                  v362 = *v349;
                  *(_QWORD *)(v336 + 32) = *(_QWORD *)(v345 + 24);
                  *(_OWORD *)(v336 + 16) = v362;
                  LOBYTE(v348) = *(_QWORD *)v349 != 0;
                }
              }
              v283 |= v348;
              goto LABEL_498;
            }
            if ((*(_QWORD *)(v345 + 8) & 0x2800FFFFFFF7) == 0)
            {
LABEL_501:
              *(_DWORD *)(v345 + 20) = v346;
              goto LABEL_471;
            }
            if ((v347 ^ v346) >= 2)
            {
              v366 = *(_QWORD *)v345;
              if (*(_QWORD *)v345 == 4)
                goto LABEL_506;
              *(_QWORD *)v345 = v366 | 2;
              v367 = (unsigned int *)(v366 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v366 & 1) != 0)
              {
                v385 = 2 * *v367;
                do
                {
                  if (!(v385 * 4))
                    goto LABEL_506;
                  v386 = *(_QWORD *)&v367[v385];
                  if ((*(_BYTE *)(v386 + 19) & 0xC) != 0)
                    break;
                  v387 = *(_QWORD *)(v386 + 96);
                  v388 = (v387 & 1) != 0 ? (v387 >> 1) & 3 : *(unsigned __int8 *)(v387 + 4);
                  v385 -= 2;
                }
                while (v388 != 2);
                v389 = v11;
                v390 = v282;
                v391 = v337;
                WTF::fastFree((unint64_t)v367, a2, a3, a4, a5, a6, a7, a8);
                v337 = v391;
                v282 = v390;
                v11 = v389;
                v284 = this;
LABEL_515:
                *(_QWORD *)v345 = 4;
              }
              else if (v367)
              {
                if ((*((_BYTE *)v367 + 19) & 0xC) != 0)
                  goto LABEL_515;
                v368 = *((_QWORD *)v367 + 12);
                v369 = (v368 & 1) != 0 ? (v368 >> 1) & 3 : *(unsigned __int8 *)(v368 + 4);
                if (v369 == 2)
                  goto LABEL_515;
              }
LABEL_506:
              *(_DWORD *)(v344 + 32 * v340 + 16) = -21020677;
            }
            if ((v346 & 1) != 0)
              *(_QWORD *)v345 &= ~2uLL;
            goto LABEL_501;
          }
        }
      }
      if (v15 != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198410990);
      }
      v24 = *((unsigned int *)a2 + 39);
      v490 = v12;
      v502 = a2;
      if ((_DWORD)v24)
      {
        v25 = 32 * v24 - 16;
        while (1)
        {
          v168 = *((_QWORD *)a2 + 18);
          v169 = (uint64_t *)(v168 + v25 - 8);
          v166 = *v169;
          if (*v169)
            break;
LABEL_233:
          v13 |= v166;
          v25 -= 32;
          if (v25 == -16)
            goto LABEL_273;
        }
        v170 = *(_QWORD *)(v12 + 120);
        v171 = (uint64_t *)(v170 + v25 - 16);
        v172 = (uint64_t *)(v168 + v25 - 16);
        v174 = (uint64_t *)(v170 + v25 - 8);
        v173 = *v174;
        if (!*v174)
        {
          v183 = *v171;
          if (v170 != v168)
          {
            if ((v183 & 1) != 0)
            {
              v235 = a2;
              v236 = v10;
              v237 = v12;
              WTF::fastFree(v183 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
              v12 = v237;
              v10 = v236;
              v14 = this;
              a2 = v235;
            }
            v184 = *v172;
            if ((*v172 & 1) == 0 || v184 == 4)
            {
              v185 = v184 & 0xFFFFFFFFFFFFFFFDLL;
              v183 = v184 | 2;
              if ((*(_BYTE *)v171 & 2) == 0)
                v183 = v185;
              *v171 = v183;
            }
            else
            {
              v232 = a2;
              v233 = v10;
              v234 = v12;
              WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)(v170 + v25 - 16), v169 - 1);
              v12 = v234;
              v10 = v233;
              v14 = this;
              a2 = v232;
              v183 = *v171;
            }
          }
          v186 = v183 & 0xFFFFFFFFFFFFFFFDLL;
          v166 = v183 | 2;
          if ((*(_BYTE *)v172 & 2) == 0)
            v166 = v186;
          *v171 = v166;
          v187 = *(_OWORD *)v169;
          *(_QWORD *)(v170 + v25 + 8) = v169[2];
          *(_OWORD *)v174 = v187;
          LODWORD(v166) = *v169 != 0;
          goto LABEL_233;
        }
        v175 = v173 | v166;
        *v174 = v173 | v166;
        v176 = *(_DWORD *)(v170 + v25);
        v177 = v176 | *(_DWORD *)(v168 + v25);
        if (v177 != v176)
          *(_DWORD *)(v170 + v25) = v177;
        v178 = *v172;
        if ((*v172 & 0xFFFFFFFFFFFFFFFDLL) == 0 || (v179 = *v171, *v171 == 4))
        {
          LODWORD(v166) = 0;
LABEL_228:
          if (v175 != v173)
            LODWORD(v166) = 1;
          if (v177 != v176)
            LODWORD(v166) = 1;
          v167 = *(_QWORD *)(v170 + v25 + 8);
          if (v167 != *(_QWORD *)(v168 + v25 + 8))
          {
            if (v167)
              LODWORD(v166) = 1;
            *(_QWORD *)(v170 + v25 + 8) = 0;
          }
          goto LABEL_233;
        }
        if (v178 == 4)
        {
          if ((v179 & 1) != 0)
          {
            v253 = a2;
            v441 = v10;
            v254 = v12;
            v456 = v175;
            WTF::fastFree(v179 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
            v175 = v456;
            v12 = v254;
            v10 = v441;
            v14 = this;
            a2 = v253;
          }
          *v171 = 4;
          LODWORD(v166) = 1;
          goto LABEL_228;
        }
        v180 = 0;
        if ((v178 & 2) != 0 && (v179 & 2) == 0)
        {
          v179 |= 2uLL;
          *v171 = v179;
          v178 = *v172;
          v180 = 1;
        }
        if ((v178 & 1) != 0)
        {
          v229 = v10;
          v230 = v175;
          v475 = v180;
          v231 = WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine((uint64_t *)(v170 + v25 - 16), (_QWORD *)(v168 + v25 - 16));
        }
        else
        {
          v181 = v178 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v178 & 0xFFFFFFFFFFFFFFFCLL) == 0)
          {
LABEL_248:
            v182 = 0;
LABEL_249:
            LODWORD(v166) = (v182 | v180) != 0;
            goto LABEL_228;
          }
          if ((v179 & 1) == 0)
          {
            if ((v179 & 0xFFFFFFFFFFFFFFFCLL) == v181)
              goto LABEL_248;
            if ((v179 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            {
              v190 = a2;
              v440 = v10;
              v455 = v175;
              v474 = v180;
              v191 = WTF::fastMalloc((WTF *)0x28);
              v180 = v474;
              v175 = v455;
              v12 = v490;
              v10 = v440;
              v14 = this;
              a2 = v190;
              *(_QWORD *)v191 = 0x400000002;
              v192 = *v171;
              *(_QWORD *)(v191 + 8) = *v171 & 0xFFFFFFFFFFFFFFFCLL;
              *(_QWORD *)(v191 + 16) = v181;
              v188 = v192 & 2 | v191 | 1;
            }
            else
            {
              v188 = v181 | v179 & 2;
            }
            *v171 = v188;
LABEL_263:
            v189 = *v171;
            if ((*v171 & 1) != 0 && *(_DWORD *)(v189 & 0xFFFFFFFFFFFFFFFCLL) >= 0xBu)
            {
              v256 = a2;
              v443 = v10;
              v257 = v12;
              v457 = v175;
              v478 = v180;
              WTF::fastFree(v189 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
              v180 = v478;
              v175 = v457;
              v12 = v257;
              v10 = v443;
              v14 = this;
              a2 = v256;
              *v171 = 4;
            }
            v182 = 1;
            goto LABEL_249;
          }
          v229 = v10;
          v230 = v175;
          v475 = v180;
          v231 = WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)(v170 + v25 - 16), v178 & 0xFFFFFFFFFFFFFFFCLL);
        }
        v180 = v475;
        v175 = v230;
        v12 = v490;
        a2 = v502;
        v10 = v229;
        v14 = this;
        if (!v231)
          goto LABEL_248;
        goto LABEL_263;
      }
LABEL_273:
      v193 = *(_QWORD *)(v12 + 200);
      v194 = *(_DWORD *)(v193 + 108);
      if (!v194)
        goto LABEL_383;
      v195 = *(_QWORD *)(v193 + 96);
      v196 = v195 + 40 * v194;
      break;
    case 0x16E:
      v28 = *(_QWORD *)(v10 + 72);
      v29 = a2;
      LODWORD(v11) = JSC::DFG::InPlaceAbstractState::merge(this, a2, *(JSC::DFG::BasicBlock **)(v28 + 16), a4, a5, a6, a7, a8);
      v35 = *(_DWORD *)(v28 + 12);
      if (v35)
      {
        v36 = (v35 - 1);
        v37 = (32 * v36) | 0x10;
        do
        {
          if (*(_DWORD *)(v28 + 12) <= v36)
          {
            __break(0xC471u);
            JUMPOUT(0x198410A00);
          }
          LODWORD(v11) = v11 | JSC::DFG::InPlaceAbstractState::merge(this, v29, *(JSC::DFG::BasicBlock **)(*(_QWORD *)v28 + v37), v30, v31, v32, v33, v34);
          v37 -= 32;
          LODWORD(v36) = v36 - 1;
        }
        while ((_DWORD)v36 != -1);
      }
      return v11 & 1;
    case 0x16F:
      v38 = *(_QWORD *)(v10 + 72);
      v39 = *(_DWORD *)(v38 + 12);
      if (v39)
      {
        v40 = a2;
        LODWORD(v11) = 0;
        v41 = v39 - 1;
        v42 = 8 * (v39 - 1);
        do
        {
          if (*(_DWORD *)(v38 + 12) <= v41)
          {
            __break(0xC471u);
            JUMPOUT(0x198410A08);
          }
          LODWORD(v11) = v11 | JSC::DFG::InPlaceAbstractState::merge(this, v40, *(JSC::DFG::BasicBlock **)(*(_QWORD *)v38 + v42), a4, a5, a6, a7, a8);
          v42 -= 8;
          --v41;
        }
        while (v41 != -1);
      }
      else
      {
        LOBYTE(v11) = 0;
      }
      return v11 & 1;
    case 0x170:
    case 0x171:
    case 0x172:
    case 0x173:
    case 0x174:
    case 0x175:
    case 0x176:
    case 0x177:
      return v11 & 1;
    default:
      __break(0xC471u);
      JUMPOUT(0x198410970);
  }
  while (1)
  {
    v197 = *(_QWORD *)v195 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_WORD *)(v197 + 18) != 386)
      break;
LABEL_307:
    v195 += 40;
    if (v195 == v196)
      goto LABEL_383;
  }
  v198 = *((_QWORD *)v14 + 1);
  v199 = *(unsigned int *)(v197 + 20);
  v200 = (uint64_t *)(v198 + 24);
  v201 = (uint64_t *)(v198 + 8);
  if ((*(_QWORD *)v195 & 1) != 0)
    v202 = v200;
  else
    v202 = v201;
  v203 = *v202;
  v204 = *v202 + 32 * v199;
  v205 = *((_DWORD *)v14 + 22);
  v206 = *(_DWORD *)(v204 + 20);
  if (v205 == v206)
  {
LABEL_280:
    v208 = (__int128 *)(v204 + 8);
    v207 = *(_QWORD *)(v204 + 8);
    if (v207)
    {
      v209 = (uint64_t *)(v195 + 8);
      v210 = *(_QWORD *)(v195 + 16);
      if (v210)
      {
        v211 = v210 | v207;
        *(_QWORD *)(v195 + 16) = v210 | v207;
        v212 = *(_DWORD *)(v195 + 24);
        v213 = v212 | *(_DWORD *)(v203 + 32 * v199 + 16);
        if (v213 != v212)
          *(_DWORD *)(v195 + 24) = v213;
        if ((*(_QWORD *)v204 & 0xFFFFFFFFFFFFFFFDLL) != 0 && (v214 = *v209, *v209 != 4))
        {
          if (*(_QWORD *)v204 == 4)
          {
            if ((v214 & 1) != 0)
            {
              v255 = a2;
              v442 = v10;
              v477 = v196;
              WTF::fastFree(v214 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
              v196 = v477;
              v12 = v490;
              v10 = v442;
              v14 = this;
              a2 = v255;
            }
            *v209 = 4;
            v215 = 1;
          }
          else
          {
            v222 = (const JSC::DFG::StructureAbstractValue *)v204;
            v223 = v10;
            v224 = v196;
            v215 = JSC::DFG::StructureAbstractValue::mergeSlow((JSC::DFG::StructureAbstractValue *)(v195 + 8), v222, a3, a4, a5, a6, a7, a8);
            v196 = v224;
            v12 = v490;
            a2 = v502;
            v10 = v223;
            v14 = this;
          }
        }
        else
        {
          v215 = 0;
        }
        if (v211 == v210)
          LODWORD(v207) = v215;
        else
          LODWORD(v207) = 1;
        if (v213 != v212)
          LODWORD(v207) = 1;
        v216 = *(_QWORD *)(v195 + 32);
        if (v216 != *(_QWORD *)(v203 + 32 * v199 + 24))
        {
          if (v216)
            LODWORD(v207) = 1;
          *(_QWORD *)(v195 + 32) = 0;
        }
      }
      else
      {
        v217 = *v209;
        if (v209 != (uint64_t *)v204)
        {
          if ((v217 & 1) != 0)
          {
            v242 = a2;
            v243 = v10;
            v244 = v12;
            v245 = v196;
            WTF::fastFree(v217 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
            v196 = v245;
            v12 = v244;
            v10 = v243;
            v14 = this;
            a2 = v242;
          }
          v218 = *(_QWORD *)v204;
          if ((*(_QWORD *)v204 & 1) == 0 || v218 == 4)
          {
            v219 = v218 & 0xFFFFFFFFFFFFFFFDLL;
            v217 = v218 | 2;
            if ((*(_BYTE *)v209 & 2) == 0)
              v217 = v219;
            *v209 = v217;
          }
          else
          {
            v238 = a2;
            v239 = v10;
            v240 = v12;
            v241 = v196;
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)(v195 + 8), (_QWORD *)v204);
            v196 = v241;
            v12 = v240;
            v10 = v239;
            v14 = this;
            a2 = v238;
            v217 = *v209;
          }
        }
        v220 = v217 & 0xFFFFFFFFFFFFFFFDLL;
        v207 = v217 | 2;
        if ((*(_BYTE *)v204 & 2) == 0)
          v207 = v220;
        *v209 = v207;
        v221 = *v208;
        *(_QWORD *)(v195 + 32) = *(_QWORD *)(v204 + 24);
        *(_OWORD *)(v195 + 16) = v221;
        LODWORD(v207) = *(_QWORD *)v208 != 0;
      }
    }
    v13 |= v207;
    goto LABEL_307;
  }
  if ((*(_QWORD *)(v204 + 8) & 0x2800FFFFFFF7) == 0)
  {
LABEL_310:
    *(_DWORD *)(v204 + 20) = v205;
    goto LABEL_280;
  }
  if ((v206 ^ v205) < 2)
  {
LABEL_316:
    if ((v205 & 1) != 0)
      *(_QWORD *)v204 &= ~2uLL;
    goto LABEL_310;
  }
  v225 = *(_QWORD *)v204;
  if (*(_QWORD *)v204 != 4)
  {
    *(_QWORD *)v204 = v225 | 2;
    v226 = (unsigned int *)(v225 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v225 & 1) != 0)
    {
      v246 = 2 * *v226;
      do
      {
        if (!(v246 * 4))
          goto LABEL_315;
        v247 = *(_QWORD *)&v226[v246];
        if ((*(_BYTE *)(v247 + 19) & 0xC) != 0)
          break;
        v248 = *(_QWORD *)(v247 + 96);
        v249 = (v248 & 1) != 0 ? (v248 >> 1) & 3 : *(unsigned __int8 *)(v248 + 4);
        v246 -= 2;
      }
      while (v249 != 2);
      v250 = a2;
      v251 = v10;
      v252 = v12;
      v476 = v196;
      WTF::fastFree((unint64_t)v226, a2, a3, a4, a5, a6, a7, a8);
      v196 = v476;
      v12 = v252;
      v10 = v251;
      v14 = this;
      a2 = v250;
    }
    else
    {
      if (!v226)
        goto LABEL_315;
      if ((*((_BYTE *)v226 + 19) & 0xC) == 0)
      {
        v227 = *((_QWORD *)v226 + 12);
        v228 = (v227 & 1) != 0 ? (v227 >> 1) & 3 : *(unsigned __int8 *)(v227 + 4);
        if (v228 != 2)
          goto LABEL_315;
      }
    }
    *(_QWORD *)v204 = 4;
  }
LABEL_315:
  *(_DWORD *)(v203 + 32 * v199 + 16) = -21020677;
  goto LABEL_316;
}

__n128 JSC::DFG::InPlaceAbstractState::activateVariable(JSC::DFG::InPlaceAbstractState *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __n128 result;

  v10 = *((_QWORD *)this + 2);
  v11 = v10 + 32 * a2;
  v12 = *(_QWORD *)(*((_QWORD *)this + 9) + 120);
  v13 = (uint64_t *)(v12 + 32 * a2);
  v14 = *(_QWORD *)v11;
  if (v10 != v12)
  {
    if ((v14 & 1) != 0)
      WTF::fastFree(v14 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
    v15 = *v13;
    if ((*v13 & 1) == 0 || v15 == 4)
    {
      v16 = v15 & 0xFFFFFFFFFFFFFFFDLL;
      v14 = v15 | 2;
      if ((*(_BYTE *)v11 & 2) == 0)
        v14 = v16;
      *(_QWORD *)v11 = v14;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v11, v13);
      v14 = *(_QWORD *)v11;
    }
  }
  v17 = v14 & 0xFFFFFFFFFFFFFFFDLL;
  v18 = v14 | 2;
  if ((*(_BYTE *)v13 & 2) == 0)
    v18 = v17;
  *(_QWORD *)v11 = v18;
  result = *(__n128 *)(v13 + 1);
  *(_QWORD *)(v11 + 24) = v13[3];
  *(__n128 *)(v11 + 8) = result;
  *(_DWORD *)(v11 + 20) = *((_DWORD *)this + 21);
  *(_DWORD *)(*((_QWORD *)this + 7) + ((a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << a2;
  return result;
}

uint64_t JSC::DFG::InPlaceAbstractState::merge(JSC::DFG::InPlaceAbstractState *this, JSC::DFG::BasicBlock *a2, JSC::DFG::BasicBlock *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::InPlaceAbstractState *v9;
  char v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  JSC::DFG::BasicBlock *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  __int128 *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  __int128 v65;
  const JSC::DFG::StructureAbstractValue *v66;
  JSC::DFG::BasicBlock *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  unsigned int v72;
  JSC::DFG::BasicBlock *v73;
  JSC::DFG::BasicBlock *v74;
  JSC::DFG::BasicBlock *v75;
  uint64_t v76;
  JSC::DFG::BasicBlock *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  JSC::DFG::BasicBlock *v83;
  uint64_t v84;
  JSC::DFG::BasicBlock *v85;
  JSC::DFG::BasicBlock *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t result;
  uint64_t *v110;
  uint64_t *v111;
  JSC::DFG::BasicBlock *v112;
  JSC::DFG::BasicBlock *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v117;
  JSC::DFG::BasicBlock *v118;

  v9 = this;
  if (!*((_BYTE *)a2 + 13))
    goto LABEL_2;
  if (*((_BYTE *)a2 + 13) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x198412F24);
  }
  if (*((_BYTE *)a3 + 12) == 1)
  {
LABEL_2:
    v10 = 0;
  }
  else
  {
    v10 = 1;
    *((_BYTE *)a3 + 12) = 1;
  }
  v11 = *(_DWORD *)(*(_QWORD *)this + 944);
  if (v11 == 1)
  {
    if (*((_DWORD *)a2 + 27))
    {
      v12 = 0;
      v13 = 24;
      do
      {
        v87 = *(_QWORD *)(*((_QWORD *)a3 + 9) + 8 * v12);
        if (v87)
        {
          v88 = *((_QWORD *)a2 + 18);
          v90 = (uint64_t *)(v88 + v13 - 16);
          v89 = *v90;
          if (*v90)
          {
            v91 = *((_QWORD *)a3 + 15);
            v92 = (uint64_t *)(v91 + v13 - 24);
            v93 = (uint64_t *)(v88 + v13 - 24);
            v94 = v91 + v13;
            v96 = (uint64_t *)(v91 + v13 - 16);
            v95 = *v96;
            if (*v96)
            {
              v97 = v95 | v89;
              *v96 = v95 | v89;
              v98 = *(_DWORD *)(v94 - 8);
              v99 = v98 | *(_DWORD *)(v88 + v13 - 8);
              if (v99 != v98)
                *(_DWORD *)(v94 - 8) = v99;
              if ((*v93 & 0xFFFFFFFFFFFFFFFDLL) != 0 && (v100 = *v92, *v92 != 4))
              {
                v118 = a3;
                if (*v93 == 4)
                {
                  if ((v100 & 1) != 0)
                  {
                    v117 = v95 | v89;
                    WTF::fastFree(v100 & 0xFFFFFFFFFFFFFFFCLL, v93, (uint64_t)a3, a4, a5, a6, a7, a8);
                    v97 = v117;
                    a3 = v118;
                  }
                  *v92 = 4;
                  v101 = 1;
                }
                else
                {
                  v108 = v95 | v89;
                  v101 = JSC::DFG::StructureAbstractValue::mergeSlow((JSC::DFG::StructureAbstractValue *)(v91 + v13 - 24), (const JSC::DFG::StructureAbstractValue *)v93, (uint64_t)a3, a4, a5, a6, a7, a8);
                  v97 = v108;
                  a3 = v118;
                }
              }
              else
              {
                v101 = 0;
              }
              if (v97 == v95)
                LOBYTE(v87) = v101;
              else
                LOBYTE(v87) = 1;
              if (v99 != v98)
                LOBYTE(v87) = 1;
              v102 = *(_QWORD *)(v91 + v13);
              if (v102 != *(_QWORD *)(v88 + v13))
              {
                if (v102)
                  LOBYTE(v87) = 1;
                *(_QWORD *)(v91 + v13) = 0;
              }
            }
            else
            {
              v103 = *v92;
              if (v91 != v88)
              {
                if ((v103 & 1) != 0)
                {
                  v113 = a3;
                  WTF::fastFree(v103 & 0xFFFFFFFFFFFFFFFCLL, v93, (uint64_t)a3, a4, a5, a6, a7, a8);
                  v93 = (uint64_t *)(v88 + v13 - 24);
                  a3 = v113;
                }
                v104 = *v93;
                if ((*v93 & 1) == 0 || v104 == 4)
                {
                  v105 = v104 & 0xFFFFFFFFFFFFFFFDLL;
                  v103 = v104 | 2;
                  if ((*(_BYTE *)v92 & 2) == 0)
                    v103 = v105;
                  *v92 = v103;
                }
                else
                {
                  v110 = (uint64_t *)(v91 + v13 - 24);
                  v111 = v93;
                  v112 = a3;
                  WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v110, v93);
                  v93 = v111;
                  a3 = v112;
                  v103 = *v92;
                }
              }
              v106 = v103 & 0xFFFFFFFFFFFFFFFDLL;
              v87 = v103 | 2;
              if ((*(_BYTE *)v93 & 2) == 0)
                v87 = v106;
              *v92 = v87;
              v107 = *(_OWORD *)v90;
              v96[2] = *(_QWORD *)(v88 + v13);
              *(_OWORD *)v96 = v107;
              LOBYTE(v87) = *v90 != 0;
            }
          }
          else
          {
            LOBYTE(v87) = 0;
          }
        }
        v10 |= v87;
        ++v12;
        v13 += 32;
      }
      while (v12 < *((unsigned int *)a2 + 27));
    }
  }
  else
  {
    if (v11 != 2)
    {
      __break(0xC471u);
      JUMPOUT(0x198412F04);
    }
    v14 = *((unsigned int *)a2 + 39);
    if ((_DWORD)v14)
    {
      v15 = 32 * v14 - 16;
      do
      {
        v16 = *((_QWORD *)a2 + 18);
        v18 = (uint64_t *)(v16 + v15 - 8);
        v17 = *v18;
        if (*v18)
        {
          v19 = *((_QWORD *)a3 + 15);
          v20 = (uint64_t *)(v19 + v15 - 16);
          v21 = (uint64_t *)(v16 + v15 - 16);
          v23 = (uint64_t *)(v19 + v15 - 8);
          v22 = *v23;
          if (*v23)
          {
            v24 = v22 | v17;
            *v23 = v22 | v17;
            v25 = *(_DWORD *)(v19 + v15);
            v26 = v25 | *(_DWORD *)(v16 + v15);
            if (v26 != v25)
              *(_DWORD *)(v19 + v15) = v26;
            if ((*v21 & 0xFFFFFFFFFFFFFFFDLL) != 0 && (v27 = *v20, *v20 != 4))
            {
              if (*v21 == 4)
              {
                if ((v27 & 1) != 0)
                {
                  v85 = a3;
                  v114 = v24;
                  WTF::fastFree(v27 & 0xFFFFFFFFFFFFFFFCLL, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  v24 = v114;
                  v9 = this;
                  a3 = v85;
                }
                *v20 = 4;
                v28 = 1;
              }
              else
              {
                v35 = a3;
                v36 = v24;
                v28 = JSC::DFG::StructureAbstractValue::mergeSlow((JSC::DFG::StructureAbstractValue *)(v19 + v15 - 16), (const JSC::DFG::StructureAbstractValue *)(v16 + v15 - 16), (uint64_t)a3, a4, a5, a6, a7, a8);
                v24 = v36;
                v9 = this;
                a3 = v35;
              }
            }
            else
            {
              v28 = 0;
            }
            if (v24 == v22)
              LOBYTE(v17) = v28;
            else
              LOBYTE(v17) = 1;
            if (v26 != v25)
              LOBYTE(v17) = 1;
            v29 = *(_QWORD *)(v19 + v15 + 8);
            if (v29 != *(_QWORD *)(v16 + v15 + 8))
            {
              if (v29)
                LOBYTE(v17) = 1;
              *(_QWORD *)(v19 + v15 + 8) = 0;
            }
          }
          else
          {
            v30 = *v20;
            if (v19 != v16)
            {
              if ((v30 & 1) != 0)
              {
                v74 = a3;
                WTF::fastFree(v30 & 0xFFFFFFFFFFFFFFFCLL, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                v9 = this;
                a3 = v74;
              }
              v31 = *v21;
              if ((*v21 & 1) == 0 || v31 == 4)
              {
                v32 = v31 & 0xFFFFFFFFFFFFFFFDLL;
                v30 = v31 | 2;
                if ((*(_BYTE *)v20 & 2) == 0)
                  v30 = v32;
                *v20 = v30;
              }
              else
              {
                v73 = a3;
                WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)(v19 + v15 - 16), (_QWORD *)(v16 + v15 - 16));
                v9 = this;
                a3 = v73;
                v30 = *v20;
              }
            }
            v33 = v30 & 0xFFFFFFFFFFFFFFFDLL;
            v17 = v30 | 2;
            if ((*(_BYTE *)v21 & 2) == 0)
              v17 = v33;
            *v20 = v17;
            v34 = *(_OWORD *)v18;
            *(_QWORD *)(v19 + v15 + 8) = *(_QWORD *)(v16 + v15 + 8);
            *(_OWORD *)v23 = v34;
            LOBYTE(v17) = *v18 != 0;
          }
        }
        v10 |= v17;
        v15 -= 32;
      }
      while (v15 != -16);
    }
    v37 = *((_QWORD *)a3 + 25);
    v38 = *(_DWORD *)(v37 + 108);
    if (v38)
    {
      v39 = *(_QWORD *)(v37 + 96);
      v40 = v39 + 40 * v38;
      do
      {
        v41 = *(_QWORD *)v39 & 0xFFFFFFFFFFFFFFFELL;
        if (*(_WORD *)(v41 + 18) != 386)
        {
          v42 = *((_QWORD *)v9 + 1);
          v43 = *(unsigned int *)(v41 + 20);
          v44 = (uint64_t *)(v42 + 24);
          v45 = (uint64_t *)(v42 + 8);
          if ((*(_QWORD *)v39 & 1) != 0)
            v46 = v44;
          else
            v46 = v45;
          v47 = *v46;
          v48 = *v46 + 32 * v43;
          v49 = *((_DWORD *)v9 + 22);
          v50 = *(_DWORD *)(v48 + 20);
          if (v49 != v50)
          {
            if ((*(_QWORD *)(v48 + 8) & 0x2800FFFFFFF7) != 0)
            {
              if ((v50 ^ v49) >= 2)
              {
                v69 = *(_QWORD *)v48;
                if (*(_QWORD *)v48 != 4)
                {
                  *(_QWORD *)v48 = v69 | 2;
                  v70 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFFFFCLL);
                  if ((v69 & 1) != 0)
                  {
                    v79 = 2 * *v70;
                    while (v79 * 4)
                    {
                      v80 = *(_QWORD *)&v70[v79];
                      if ((*(_BYTE *)(v80 + 19) & 0xC) == 0)
                      {
                        v81 = *(_QWORD *)(v80 + 96);
                        v82 = (v81 & 1) != 0 ? (v81 >> 1) & 3 : *(unsigned __int8 *)(v81 + 4);
                        v79 -= 2;
                        if (v82 != 2)
                          continue;
                      }
                      v83 = a3;
                      v84 = v40;
                      WTF::fastFree((unint64_t)v70, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                      v40 = v84;
                      v9 = this;
                      a3 = v83;
                      goto LABEL_90;
                    }
                  }
                  else if (v70)
                  {
                    if ((*((_BYTE *)v70 + 19) & 0xC) != 0
                      || ((v71 = *((_QWORD *)v70 + 12), (v71 & 1) != 0)
                        ? (v72 = (v71 >> 1) & 3)
                        : (v72 = *(unsigned __int8 *)(v71 + 4)),
                          v72 == 2))
                    {
LABEL_90:
                      *(_QWORD *)v48 = 4;
                    }
                  }
                }
                *(_DWORD *)(v47 + 32 * v43 + 16) = -21020677;
              }
              if ((v49 & 1) != 0)
                *(_QWORD *)v48 &= ~2uLL;
            }
            *(_DWORD *)(v48 + 20) = v49;
          }
          v52 = (__int128 *)(v48 + 8);
          v51 = *(_QWORD *)(v48 + 8);
          if (v51)
          {
            v53 = (uint64_t *)(v39 + 8);
            v54 = *(_QWORD *)(v39 + 16);
            if (v54)
            {
              v55 = v54 | v51;
              *(_QWORD *)(v39 + 16) = v54 | v51;
              v56 = *(_DWORD *)(v39 + 24);
              v57 = v56 | *(_DWORD *)(v47 + 32 * v43 + 16);
              if (v57 != v56)
                *(_DWORD *)(v39 + 24) = v57;
              if ((*(_QWORD *)v48 & 0xFFFFFFFFFFFFFFFDLL) != 0 && (v58 = *v53, *v53 != 4))
              {
                if (*(_QWORD *)v48 == 4)
                {
                  if ((v58 & 1) != 0)
                  {
                    v86 = a3;
                    v115 = v40;
                    WTF::fastFree(v58 & 0xFFFFFFFFFFFFFFFCLL, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    v40 = v115;
                    v9 = this;
                    a3 = v86;
                  }
                  *v53 = 4;
                  v59 = 1;
                }
                else
                {
                  v66 = (const JSC::DFG::StructureAbstractValue *)v48;
                  v67 = a3;
                  v68 = v40;
                  v59 = JSC::DFG::StructureAbstractValue::mergeSlow((JSC::DFG::StructureAbstractValue *)(v39 + 8), v66, (uint64_t)a3, a4, a5, a6, a7, a8);
                  v40 = v68;
                  v9 = this;
                  a3 = v67;
                }
              }
              else
              {
                v59 = 0;
              }
              if (v55 == v54)
                LOBYTE(v51) = v59;
              else
                LOBYTE(v51) = 1;
              if (v57 != v56)
                LOBYTE(v51) = 1;
              v60 = *(_QWORD *)(v39 + 32);
              if (v60 != *(_QWORD *)(v47 + 32 * v43 + 24))
              {
                if (v60)
                  LOBYTE(v51) = 1;
                *(_QWORD *)(v39 + 32) = 0;
              }
            }
            else
            {
              v61 = *v53;
              if (v53 != (uint64_t *)v48)
              {
                if ((v61 & 1) != 0)
                {
                  v77 = a3;
                  v78 = v40;
                  WTF::fastFree(v61 & 0xFFFFFFFFFFFFFFFCLL, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  v40 = v78;
                  v9 = this;
                  a3 = v77;
                }
                v62 = *(_QWORD *)v48;
                if ((*(_QWORD *)v48 & 1) == 0 || v62 == 4)
                {
                  v63 = v62 & 0xFFFFFFFFFFFFFFFDLL;
                  v61 = v62 | 2;
                  if ((*(_BYTE *)v53 & 2) == 0)
                    v61 = v63;
                  *v53 = v61;
                }
                else
                {
                  v75 = a3;
                  v76 = v40;
                  WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)(v39 + 8), (_QWORD *)v48);
                  v40 = v76;
                  v9 = this;
                  a3 = v75;
                  v61 = *v53;
                }
              }
              v64 = v61 & 0xFFFFFFFFFFFFFFFDLL;
              v51 = v61 | 2;
              if ((*(_BYTE *)v48 & 2) == 0)
                v51 = v64;
              *v53 = v51;
              v65 = *v52;
              *(_QWORD *)(v39 + 32) = *(_QWORD *)(v48 + 24);
              *(_OWORD *)(v39 + 16) = v65;
              LOBYTE(v51) = *(_QWORD *)v52 != 0;
            }
          }
          v10 |= v51;
        }
        v39 += 40;
      }
      while (v39 != v40);
    }
  }
  result = (*((_BYTE *)a3 + 15) == 0) | (v10 & 1);
  *((_BYTE *)a3 + 16) |= result;
  return result;
}

uint64_t JSC::DFG::InsertionSet::insertSlow(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  _OWORD *v21;
  uint64_t v22;

  v8 = a2;
  v9 = result;
  v10 = (_QWORD *)(result + 8);
  v11 = *(unsigned int *)(result + 20);
  if (v11 < 2)
  {
    if (v11 != 1)
    {
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    v12 = 16 * v11;
    v13 = *(unsigned int *)(result + 20);
    while (1)
    {
      v14 = v12 - 16;
      if (v12 == 16)
        break;
      v15 = (_OWORD *)*v10;
      v16 = *(_QWORD *)(*v10 + v12 - 32);
      --v13;
      v12 -= 16;
      if (v16 <= *a2)
      {
        if ((_DWORD)v11 == *(_DWORD *)(result + 16))
        {
          result = WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result + 8, (void *)(v11 + 1), (unint64_t)a2, a4, a5, a6, a7, a8);
          v8 = (_OWORD *)result;
          v11 = *(unsigned int *)(v9 + 20);
          v15 = *(_OWORD **)(v9 + 8);
        }
        if (v11 != v13)
        {
          v17 = (_OWORD *)((char *)v15 + ((16 * v11 - v14) & 0xFFFFFFFFFFFFFFF0) + v14);
          v18 = v14 - 16 * v11;
          v19 = &v15[v11 - 1];
          do
          {
            v20 = *v19--;
            *v17-- = v20;
            v18 += 16;
          }
          while (v18);
        }
        *(_OWORD *)((char *)v15 + v14) = *v8;
        goto LABEL_18;
      }
    }
  }
  if ((_DWORD)v11 == *(_DWORD *)(result + 16))
  {
    result = WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result + 8, (void *)(v11 + 1), (unint64_t)a2, a4, a5, a6, a7, a8);
    v8 = (_OWORD *)result;
    LODWORD(v11) = *(_DWORD *)(v9 + 20);
  }
  v21 = (_OWORD *)*v10;
  if ((_DWORD)v11)
  {
    v22 = v11;
    do
    {
      v21[v22] = v21[v22 - 1];
      --v22;
    }
    while (v22 * 16);
  }
  *v21 = *v8;
LABEL_18:
  ++*(_DWORD *)(v9 + 20);
  return result;
}

uint64_t JSC::DFG::InsertionSet::execute(JSC::DFG::InsertionSet *this, JSC::DFG::BasicBlock *a2)
{
  uint64_t v2;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *((unsigned int *)this + 5);
  if ((_DWORD)v2)
  {
    v6 = *((unsigned int *)a2 + 54);
    v7 = *((unsigned int *)a2 + 55);
    v8 = v7 + v2;
    if (v7 + v2 > v6)
    {
      v16 = v6 + (v6 >> 2);
      if (v16 >= 0x10)
        v17 = v16 + 1;
      else
        v17 = 16;
      if (v17 <= v8)
        v18 = v7 + v2;
      else
        v18 = v17;
      v19 = (char *)*((_QWORD *)a2 + 26);
      if (v18 < 9)
      {
        v20 = (char *)a2 + 224;
        *((_QWORD *)a2 + 26) = (char *)a2 + 224;
        *((_DWORD *)a2 + 54) = 8;
      }
      else
      {
        if (v18 >> 29)
          goto LABEL_33;
        v20 = (char *)WTF::fastMalloc((WTF *)(8 * v18));
        *((_DWORD *)a2 + 54) = v18;
        *((_QWORD *)a2 + 26) = v20;
      }
      memcpy(v20, v19, 8 * v7);
      if ((char *)a2 + 224 != v19 && v19)
      {
        if (*((char **)a2 + 26) == v19)
        {
          *((_QWORD *)a2 + 26) = 0;
          *((_DWORD *)a2 + 54) = 0;
        }
        WTF::fastFree((unint64_t)v19, v21, v22, v23, v24, v25, v26, v27);
      }
    }
    *((_DWORD *)a2 + 55) = v8;
    if (v2 - 1 >= (unint64_t)*((unsigned int *)this + 5))
    {
      __break(0xC471u);
      JUMPOUT(0x19841340CLL);
    }
    v9 = (v7 + v2);
    v10 = ~v2;
    v11 = v2;
    v12 = v9;
    while (1)
    {
      --v11;
      v13 = *(_QWORD *)(*((_QWORD *)this + 1) + 16 * v11) + v11;
      v14 = v12 - 1;
      if (v12 - 1 > v13)
        break;
LABEL_11:
      if (v9 <= v13)
      {
        __break(0xC471u);
        JUMPOUT(0x198413404);
      }
      *(_QWORD *)(*((_QWORD *)a2 + 26) + 8 * v13) = *(_QWORD *)(*((_QWORD *)this + 1) + 16 * v11 + 8);
      ++v10;
      v12 = v13;
      if (!v11)
      {
        *((_DWORD *)this + 5) = 0;
        return v2;
      }
    }
    v15 = v12 + v10;
    while (v9 > v15)
    {
      if (v9 <= v14)
      {
        __break(0xC471u);
        JUMPOUT(0x1984133FCLL);
      }
      *(_QWORD *)(*((_QWORD *)a2 + 26) + 8 * v14--) = *(_QWORD *)(*((_QWORD *)a2 + 26) + 8 * v15--);
      if (v14 <= v13)
        goto LABEL_11;
    }
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x1984133F4);
  }
  return v2;
}

uint64_t JSC::DFG::InsertionSet::insertConstant(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t *a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;

  v8 = a5;
  v9 = (uint64_t)a4;
  v10 = *a4;
  if (!*a4)
  {
    v11 = 0x40000000000;
    goto LABEL_10;
  }
  if (v10 >= 0xFFFE000000000000)
  {
    v24 = (*a4 & 0xFFFFFFFE) == 0;
    v11 = 0x200000000;
    v25 = 0x100000000;
    goto LABEL_16;
  }
  if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v27 = (uint64_t)COERCE_DOUBLE(v10 - 0x2000000000000);
    if ((double)v27 != COERCE_DOUBLE(v10 - 0x2000000000000))
    {
LABEL_28:
      v11 = 0x2000000000;
      goto LABEL_10;
    }
    if (v27)
    {
      if ((unint64_t)(v27 + 0x8000000000000) >> 52)
        goto LABEL_28;
    }
    else if ((uint64_t)v10 < 0x2000000000000)
    {
      goto LABEL_28;
    }
    v11 = 0x1000000000;
    goto LABEL_10;
  }
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    v24 = (v10 & 0xFFFFFFFFFFFFFFFELL) == 6;
    v11 = 0x20000000000;
    v25 = 0x10000000000;
LABEL_16:
    if (v24)
      v11 = v25;
    goto LABEL_10;
  }
  if (qword_1ECF4C080 > v10)
    goto LABEL_62;
  v11 = 0;
  if (!(v10 >> 36) && (v10 & 0xFFFFFFFFFLL) != 0)
  {
    v12 = *(unsigned __int8 *)(v10 + 5);
    if (v12 != 2)
    {
      v11 = JSC::speculatedTypeMapping[v12];
      goto LABEL_10;
    }
    v26 = *(_QWORD *)(v10 + 8);
    v11 = 805306368;
    if (v26)
    {
      if ((v26 & 1) == 0)
      {
        if (v26 >= qword_1ECF4C080)
        {
          v11 = 0;
          if (!(v26 >> 36) && (v26 & 0xFFFFFFFFFLL) != 0)
          {
            if ((*(_BYTE *)(v26 + 16) & 0x10) != 0)
              v11 = 0x10000000;
            else
              v11 = 805306368;
          }
          goto LABEL_10;
        }
LABEL_62:
        v11 = 0;
      }
    }
  }
LABEL_10:
  v13 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v28 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v29 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v29 != 0x3FFFFFFF)
        ? (v30 = (_DWORD)v29 == -1)
        : (v30 = 1),
          v30))
    {
      v31 = 2;
    }
    else if (v29 >> 28)
    {
      v52 = a1;
      v42 = a3;
      v46 = v11;
      v48 = a2;
      v36 = v29;
      v37 = WTF::fastMalloc((WTF *)0x10);
      v11 = v46;
      a2 = v48;
      a3 = v42;
      v9 = (uint64_t)a4;
      v8 = a5;
      v38 = v37;
      a1 = v52;
      *(_QWORD *)v38 = v28;
      *(_DWORD *)(v38 + 8) = v36;
      v31 = 1;
      v28 = v38;
    }
    else
    {
      v31 = v28;
      v28 = v29 << 36;
    }
    v13 = v28 | v31;
  }
  v54 = v13;
  v14 = *(_QWORD *)(a3 + 8);
  if ((v14 & 1) != 0)
  {
    v32 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v33 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v33 != 0x3FFFFFFF)
        ? (v34 = (_DWORD)v33 == -1)
        : (v34 = 1),
          v34))
    {
      v35 = 2;
    }
    else if (v33 >> 28)
    {
      v53 = a1;
      v51 = v8;
      v43 = a3;
      v45 = v9;
      v47 = v11;
      v49 = a2;
      v39 = v33;
      v40 = WTF::fastMalloc((WTF *)0x10);
      v11 = v47;
      a2 = v49;
      a3 = v43;
      v9 = v45;
      v8 = v51;
      v41 = v40;
      a1 = v53;
      *(_QWORD *)v41 = v32;
      *(_DWORD *)(v41 + 8) = v39;
      v35 = 1;
      v32 = v41;
    }
    else
    {
      v35 = v32;
      v32 = v33 << 36;
    }
    v14 = v32 | v35;
  }
  v55 = v14;
  v56 = *(_WORD *)(a3 + 16);
  v22 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(a1, a2, v11, v8, (uint64_t)&v54, v9, a7, a8);
  if ((v55 & 1) != 0 && (v55 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v55 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  if ((v54 & 1) != 0 && (v54 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v54 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  return v22;
}

uint64_t JSC::DFG::performIntegerCheckCombining(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  char *v31;
  int v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  int k;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  char *v76;
  WTF *v77;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int16 v133;
  JSC::DFG *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF *v142;
  __int128 v143;
  uint64_t v144;
  int v145;
  unint64_t v146;
  unint64_t v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  int i;
  int v152;
  char *v153;
  int v154;
  BOOL v155;
  BOOL v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  __int128 *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  unint64_t v207;
  unint64_t v208;
  int v209;
  unint64_t v210;
  unint64_t v211;
  int j;
  int v213;
  char *v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  JSC::DFG *v283;
  JSC::DFG *v284;
  JSC::DFG *v285;
  JSC::DFG *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t inserted;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  __int16 v315;
  JSC::DFG *v316;
  __int128 v317;
  char v318;
  WTF *v319;
  char *v320;
  JSC::DFG *v321;
  WTF *v322;
  uint64_t v323;
  _BYTE v324[128];
  char v325;
  _QWORD v326[2];
  __int128 v327;
  double v328;
  int64x2_t v329;
  unint64_t v330;
  int v331;
  __int128 v332;
  unint64_t v333;
  int v334;
  JSC::DFG::Node *v335;
  _BYTE v336[24];
  uint64_t v337;
  uint64_t v338;
  __int16 v339;
  _QWORD v340[2];
  __int16 v341;
  _QWORD v342[2];
  __int16 v343;
  uint64_t v344;
  uint64_t v345;
  __int16 v346;
  _BYTE v347[24];
  _BYTE v348[24];
  _BYTE v349[24];
  int64x2_t v350;
  uint64_t v351;
  __int16 v352;
  uint64_t v353;
  __int128 v354;
  uint64_t v355;
  unsigned int v356;
  char v357;
  __int16 v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361[3];

  v312 = -1;
  v313 = -1;
  v314 = 0;
  v315 = 256;
  v316 = this;
  *(_QWORD *)&v317 = "integer check combining";
  *((_QWORD *)&v317 + 1) = 24;
  v318 = 0;
  v319 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v312);
  v320 = 0;
  v321 = this;
  v322 = (WTF *)v324;
  v323 = 8;
  v326[0] = "DFG";
  v326[1] = 4;
  v327 = v317;
  v328 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v179 = mach_absolute_time();
    v181 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v181 != -1)
    {
      *(_QWORD *)&v354 = &v329;
      *(_QWORD *)&v332 = &v354;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v332, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v180) = dword_1ECF4400C;
    v328 = (double)(v179 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v180 * 1000000000.0);
  }
  v325 = 0;
  v10 = *((_DWORD *)v316 + 15);
  if (!v10)
  {
    v67 = 0;
    goto LABEL_102;
  }
  do
  {
    if (*((_DWORD *)v316 + 15) <= --v10)
    {
      __break(0xC471u);
      JUMPOUT(0x198414DE4);
    }
    v11 = *(_QWORD *)(*((_QWORD *)v316 + 6) + 8 * v10);
    if (v11)
    {
      v12 = v320;
      if (v320)
      {
        v320 = 0;
        v59 = *((unsigned int *)v12 - 1);
        if ((_DWORD)v59)
        {
          v60 = v12 + 48;
          do
          {
            if (*((_DWORD *)v60 - 6) != 2)
            {
              v61 = *v60;
              if ((*v60 & 1) != 0 && (v61 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v61 & 0xFFFFFFFF8, v3, v4, v5, v6, v7, v8, v9);
              v62 = *(v60 - 1);
              if ((v62 & 1) != 0 && (v62 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v62 & 0xFFFFFFFF8, v3, v4, v5, v6, v7, v8, v9);
            }
            v60 += 9;
            --v59;
          }
          while (v59);
        }
        WTF::fastFree((unint64_t)(v12 - 16), v3, v4, v5, v6, v7, v8, v9);
      }
      v13 = *(unsigned int *)(v11 + 220);
      if (!(_DWORD)v13)
        goto LABEL_16;
      v14 = *(uint64_t **)(v11 + 208);
      v15 = &v14[v13];
      while (1)
      {
        v16 = *v14;
        v17 = *(unsigned __int16 *)(*v14 + 18);
        if (v17 == 62)
          break;
        if (v17 == 187)
        {
          v24 = *(_QWORD *)(v16 + 24);
          v23 = *(_QWORD *)(v16 + 32) & 0xFF00FFFFFFFFFFFFLL;
          v30 = *(unsigned __int16 *)((v24 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
          if (v30 <= 2)
          {
            v63 = **(_QWORD **)((v24 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
            if (v63 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              LODWORD(v22) = 0;
            }
            else
            {
              v24 = 0;
              LODWORD(v22) = v63;
            }
          }
          else if (v30 == 62
                 && (*(_QWORD *)((v24 & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFC000000000000) == 0x4000000000000
                 && (v84 = *(_QWORD *)((v24 & 0xFF00FFFFFFFFFFFFLL) + 0x20),
                     (v84 & 0xFC000000000000) == 0x4000000000000)
                 && (v85 = v84 & 0xFF00FFFFFFFFFFFFLL, *(unsigned __int16 *)(v85 + 18) <= 2u))
          {
            v86 = **(_QWORD **)(v85 + 72);
            if (v86 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              LODWORD(v22) = 0;
            }
            else
            {
              v24 = *(_QWORD *)((v24 & 0xFF00FFFFFFFFFFFFLL) + 0x18);
              LODWORD(v22) = v86;
            }
          }
          else
          {
            LODWORD(v22) = 0;
          }
          v25 = 2;
          goto LABEL_32;
        }
LABEL_10:
        if (++v14 == v15)
        {
          v18 = *(unsigned int *)(v11 + 220);
          if (!(_DWORD)v18)
            goto LABEL_16;
          v19 = 0;
          while (1)
          {
            v20 = *(_QWORD *)(*(_QWORD *)(v11 + 208) + 8 * v19);
            v21 = *(unsigned __int16 *)(v20 + 18);
            if (v21 == 62)
            {
              if ((*(_DWORD *)(v20 + 72) & 0xFFFFFFFE) != 2
                || *(unsigned __int16 *)((*(_QWORD *)(v20 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u
                || **(_QWORD **)((*(_QWORD *)(v20 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48) < 0xFFFE000000000000)
              {
                goto LABEL_15;
              }
              v26 = 0;
              v27 = 0;
              v28 = *(_QWORD *)(v20 + 24);
              v29 = 1;
            }
            else
            {
              if (v21 != 187)
                goto LABEL_15;
              v28 = *(_QWORD *)(v20 + 24);
              v27 = *(_QWORD *)(v20 + 32) & 0xFF00FFFFFFFFFFFFLL;
              v58 = *(unsigned __int16 *)((v28 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
              if (v58 <= 2)
              {
                if (**(_QWORD **)((v28 & 0xFF00FFFFFFFFFFFFLL) + 0x48) > 0xFFFDFFFFFFFFFFFFLL)
                  v28 = 0;
              }
              else if (v58 == 62
                     && (*(_QWORD *)((v28 & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFC000000000000) == 0x4000000000000)
              {
                v87 = *(_QWORD *)((v28 & 0xFF00FFFFFFFFFFFFLL) + 0x20);
                if ((v87 & 0xFC000000000000) == 0x4000000000000)
                {
                  v88 = v87 & 0xFF00FFFFFFFFFFFFLL;
                  if (*(unsigned __int16 *)(v88 + 18) <= 2u && **(_QWORD **)(v88 + 72) > 0xFFFDFFFFFFFFFFFFLL)
                    v28 = *(_QWORD *)((v28 & 0xFF00FFFFFFFFFFFFLL) + 0x18);
                }
              }
              v29 = 2;
              v26 = 1;
            }
            v64 = v28 & 0xFFFCFFFFFFFFFFFFLL;
            *(_QWORD *)&v332 = v29;
            *((_QWORD *)&v332 + 1) = v28 & 0xFFFCFFFFFFFFFFFFLL;
            v333 = v27;
            v334 = 0;
            WTF::HashMap<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>,JSC::DFG::IntegerCheckCombiningPhase::Range,WTF::DefaultHash<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashTraits<JSC::DFG::IntegerCheckCombiningPhase::Range>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>,JSC::DFG::IntegerCheckCombiningPhase::Range,WTF::DefaultHash<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashTraits<JSC::DFG::IntegerCheckCombiningPhase::Range>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>>,WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>((uint64_t)&v354, v320, (uint64_t)&v332, v5, v6, v7, v8, v9);
            if (v356 < 2 || v26 && DWORD1(v354) - (int)v354 < 0)
              goto LABEL_81;
            if (v357)
              goto LABEL_89;
            v89 = *((_QWORD *)&v354 + 1);
            if ((BYTE8(v354) & 1) != 0)
            {
              v310 = *(_QWORD *)(*((_QWORD *)&v354 + 1) & 0xFFFFFFFF8);
              if ((BYTE8(v354) & 2) != 0
                || (v216 = *(unsigned int *)((*((_QWORD *)&v354 + 1) & 0xFFFFFFFF8) + 8), (_DWORD)v216 == 0x3FFFFFFF)
                || (_DWORD)v216 == -1)
              {
                v217 = 2;
              }
              else if (v216 >> 28)
              {
                v265 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v265 = v310;
                *(_DWORD *)(v265 + 8) = v216;
                v217 = 1;
                v310 = v265;
              }
              else
              {
                v217 = *(_QWORD *)(*((_QWORD *)&v354 + 1) & 0xFFFFFFFF8);
                v310 = v216 << 36;
              }
              v89 = v310 | v217;
            }
            v353 = v89;
            JSC::DFG::NodeOrigin::withSemantic(v20, (int64x2_t *)&v353, v66, v5, v6, v7, v8, v9, &v329);
            if ((v353 & 1) != 0 && (v353 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v353 & 0xFFFFFFFF8, v90, v91, v92, v93, v94, v95, v96);
            v97 = v355;
            if ((v355 & 1) != 0)
            {
              v311 = *(_QWORD *)(v355 & 0xFFFFFFFF8);
              if ((v355 & 2) != 0
                || (v218 = *(unsigned int *)((v355 & 0xFFFFFFFF8) + 8), (_DWORD)v218 == 0x3FFFFFFF)
                || (_DWORD)v218 == -1)
              {
                v219 = 2;
              }
              else if (v218 >> 28)
              {
                v266 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v266 = v311;
                *(_DWORD *)(v266 + 8) = v218;
                v219 = 1;
                v311 = v266;
              }
              else
              {
                v219 = *(_QWORD *)(v355 & 0xFFFFFFFF8);
                v311 = v218 << 36;
              }
              v97 = v311 | v219;
            }
            v350.i64[0] = v97;
            JSC::DFG::NodeOrigin::withSemantic(v20, &v350, v91, v92, v93, v94, v95, v96, (int64x2_t *)&v350.u64[1]);
            if ((v350.i8[0] & 1) != 0 && (v350.i64[0] & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v350.i64[0] & 0xFFFFFFFF8, v65, v66, v5, v6, v7, v8, v9);
            v98 = ~(v28 << 32);
            v99 = ~(v27 << 32);
            v309 = v98;
            if (v29 == 2)
            {
              if ((v28 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v100 = v329.i64[0];
                if ((v329.i8[0] & 1) != 0)
                {
                  v237 = *(_QWORD *)(v329.i64[0] & 0xFFFFFFFF8);
                  if ((v329.i8[0] & 2) != 0
                    || (v238 = *(unsigned int *)((v329.i64[0] & 0xFFFFFFFF8) + 8), (_DWORD)v238 == 0x3FFFFFFF)
                    || (_DWORD)v238 == -1)
                  {
                    v239 = 2;
                  }
                  else if (v238 >> 28)
                  {
                    v273 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v273 = v237;
                    *(_DWORD *)(v273 + 8) = v238;
                    v239 = 1;
                    v237 = v273;
                  }
                  else
                  {
                    v239 = *(_QWORD *)(v329.i64[0] & 0xFFFFFFFF8);
                    v237 = v238 << 36;
                  }
                  v100 = v237 | v239;
                }
                v342[0] = v100;
                v101 = v329.i64[1];
                v302 = v100;
                if ((v329.i8[8] & 1) != 0)
                {
                  v240 = *(_QWORD *)(v329.i64[1] & 0xFFFFFFFF8);
                  if ((v329.i8[8] & 2) != 0
                    || (v241 = *(unsigned int *)((v329.i64[1] & 0xFFFFFFFF8) + 8), (_DWORD)v241 == 0x3FFFFFFF)
                    || (_DWORD)v241 == -1)
                  {
                    v242 = 2;
                  }
                  else if (v241 >> 28)
                  {
                    v274 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v274 = v240;
                    *(_DWORD *)(v274 + 8) = v241;
                    v242 = 1;
                    v240 = v274;
                  }
                  else
                  {
                    v242 = *(_QWORD *)(v329.i64[1] & 0xFFFFFFFF8);
                    v240 = v241 << 36;
                  }
                  v101 = v240 | v242;
                  v102 = (v240 | v242) & 1;
                }
                else
                {
                  v102 = 0;
                }
                v342[1] = v101;
                v343 = v330;
                inserted = JSC::DFG::IntegerCheckCombiningPhase::insertAdd((uint64_t)&v312, v19, (uint64_t)v342, v64, v354, 1, v8, v9);
                if (v102 && (v101 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v101 & 0xFFFFFFFF8, v103, v104, v105, v106, v107, v108, v109);
                if ((v302 & 1) != 0 && (v302 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v302 & 0xFFFFFFFF8, v103, v104, v105, v106, v107, v108, v109);
                v110 = v350.i64[1];
                if ((v350.i8[8] & 1) != 0)
                {
                  v243 = *(_QWORD *)(v350.i64[1] & 0xFFFFFFFF8);
                  if ((v350.i8[8] & 2) != 0
                    || (v244 = *(unsigned int *)((v350.i64[1] & 0xFFFFFFFF8) + 8), (_DWORD)v244 == 0x3FFFFFFF)
                    || (_DWORD)v244 == -1)
                  {
                    v245 = 2;
                  }
                  else if (v244 >> 28)
                  {
                    v275 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v275 = v243;
                    *(_DWORD *)(v275 + 8) = v244;
                    v245 = 1;
                    v243 = v275;
                  }
                  else
                  {
                    v245 = *(_QWORD *)(v350.i64[1] & 0xFFFFFFFF8);
                    v243 = v244 << 36;
                  }
                  v110 = v243 | v245;
                }
                v340[0] = v110;
                v111 = v351;
                v303 = v110;
                if ((v351 & 1) != 0)
                {
                  v246 = *(_QWORD *)(v351 & 0xFFFFFFFF8);
                  if ((v351 & 2) != 0
                    || (v247 = *(unsigned int *)((v351 & 0xFFFFFFFF8) + 8), (_DWORD)v247 == 0x3FFFFFFF)
                    || (_DWORD)v247 == -1)
                  {
                    v248 = 2;
                  }
                  else if (v247 >> 28)
                  {
                    v276 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v276 = v246;
                    *(_DWORD *)(v276 + 8) = v247;
                    v248 = 1;
                    v246 = v276;
                  }
                  else
                  {
                    v248 = *(_QWORD *)(v351 & 0xFFFFFFFF8);
                    v246 = v247 << 36;
                  }
                  v111 = v246 | v248;
                  v112 = (v246 | v248) & 1;
                }
                else
                {
                  v112 = 0;
                }
                v340[1] = v111;
                v341 = v352;
                v293 = JSC::DFG::IntegerCheckCombiningPhase::insertAdd((uint64_t)&v312, v19, (uint64_t)v340, v64, DWORD1(v354), 1, v108, v109);
                if (v112 && (v111 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v111 & 0xFFFFFFFF8, v113, v114, v115, v116, v117, v118, v119);
                if ((v303 & 1) != 0 && (v303 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v303 & 0xFFFFFFFF8, v113, v114, v115, v116, v117, v118, v119);
                v120 = v293;
                v121 = inserted;
                if (inserted)
                {
                  v122 = *(_QWORD *)v20;
                  if ((*(_QWORD *)v20 & 1) != 0)
                  {
                    v249 = *(_QWORD *)(v122 & 0xFFFFFFFF8);
                    if ((v122 & 2) != 0
                      || (v250 = *(unsigned int *)((v122 & 0xFFFFFFFF8) + 8), (_DWORD)v250 == 0x3FFFFFFF)
                      || (_DWORD)v250 == -1)
                    {
                      v251 = 2;
                    }
                    else if (v250 >> 28)
                    {
                      v277 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v277 = v249;
                      *(_DWORD *)(v277 + 8) = v250;
                      v251 = 1;
                      v249 = v277;
                    }
                    else
                    {
                      v251 = *(_QWORD *)(v122 & 0xFFFFFFFF8);
                      v249 = v250 << 36;
                    }
                    v122 = v249 | v251;
                    v120 = v293;
                    v121 = inserted;
                  }
                  v337 = v122;
                  v123 = *(_QWORD *)(v20 + 8);
                  if ((v123 & 1) != 0)
                  {
                    v252 = *(_QWORD *)(v123 & 0xFFFFFFFF8);
                    if ((v123 & 2) != 0
                      || (v253 = *(unsigned int *)((v123 & 0xFFFFFFFF8) + 8), (_DWORD)v253 == 0x3FFFFFFF)
                      || (_DWORD)v253 == -1)
                    {
                      v254 = 2;
                    }
                    else if (v253 >> 28)
                    {
                      v278 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v278 = v252;
                      *(_DWORD *)(v278 + 8) = v253;
                      v254 = 1;
                      v252 = v278;
                    }
                    else
                    {
                      v254 = *(_QWORD *)(v123 & 0xFFFFFFFF8);
                      v252 = v253 << 36;
                    }
                    v123 = v252 | v254;
                    v120 = v293;
                    v121 = inserted;
                  }
                  v338 = v123;
                  v339 = *(_WORD *)(v20 + 16);
                  v129 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge,JSC::DFG::Edge>((uint64_t)&v321, v19, 0, 0xBBu, (uint64_t)&v337, v121 & 0xFF00FFFFFFFFFFFFLL | 0x4000000000000, v27 & 0xFF00FFFFFFFFFFFFLL | 0x4000000000000);
                  if ((v338 & 1) != 0 && (v338 & 0xFFFFFFFF8) != 0)
                  {
                    v255 = v129;
                    WTF::fastFree(v338 & 0xFFFFFFFF8, v124, v125, v126, v127, v128, v118, v119);
                    v129 = v255;
                  }
                  v130 = v337;
                  if ((v337 & 1) == 0)
                    goto LABEL_152;
                  v256 = v129;
LABEL_370:
                  if ((v130 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v130 & 0xFFFFFFFF8, v124, v125, v126, v127, v128, v118, v119);
                  v120 = v293;
                  v129 = v256;
LABEL_152:
                  v131 = *(_QWORD *)v20;
                  if ((*(_QWORD *)v20 & 1) != 0)
                  {
                    v287 = v129;
                    v294 = v120;
                    v220 = v131 & 0xFFFFFFFF8;
                    v221 = *(_QWORD *)v220;
                    if ((*(_QWORD *)v20 & 2) != 0
                      || (v222 = *(unsigned int *)(v220 + 8), (_DWORD)v222 == 0x3FFFFFFF)
                      || (_DWORD)v222 == -1)
                    {
                      v223 = 2;
                    }
                    else if (v222 >> 28)
                    {
                      v267 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v267 = v221;
                      *(_DWORD *)(v267 + 8) = v222;
                      v223 = 1;
                      v221 = v267;
                    }
                    else
                    {
                      v223 = *(_QWORD *)v220;
                      v221 = v222 << 36;
                    }
                    v131 = v221 | v223;
                    v129 = v287;
                    v120 = v294;
                  }
                  v132 = *(_QWORD *)(v20 + 8);
                  v304 = v131;
                  if ((v132 & 1) != 0)
                  {
                    v288 = v129;
                    v295 = v120;
                    v224 = *(_QWORD *)(v132 & 0xFFFFFFFF8);
                    if ((v132 & 2) != 0
                      || (v225 = *(unsigned int *)((v132 & 0xFFFFFFFF8) + 8), (_DWORD)v225 == 0x3FFFFFFF)
                      || (_DWORD)v225 == -1)
                    {
                      v226 = 2;
                    }
                    else if (v225 >> 28)
                    {
                      v268 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v268 = v224;
                      *(_DWORD *)(v268 + 8) = v225;
                      v226 = 1;
                      v224 = v268;
                    }
                    else
                    {
                      v226 = *(_QWORD *)(v132 & 0xFFFFFFFF8);
                      v224 = v225 << 36;
                    }
                    v132 = v224 | v226;
                    v129 = v288;
                    v120 = v295;
                    v131 = v304;
                  }
                  v133 = *(_WORD *)(v20 + 16);
                  v134 = v321;
                  v135 = v131;
                  v301 = v132;
                  if ((v131 & 1) != 0)
                  {
                    v283 = v321;
                    v289 = v129;
                    v296 = v120;
                    v227 = v131;
                    v228 = v131 & 0xFFFFFFFF8;
                    v307 = *(_QWORD *)v228;
                    if ((v227 & 2) != 0
                      || (v229 = *(unsigned int *)(v228 + 8), (_DWORD)v229 == 0x3FFFFFFF)
                      || (_DWORD)v229 == -1)
                    {
                      v230 = 2;
                    }
                    else if (v229 >> 28)
                    {
                      v269 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v269 = v307;
                      *(_DWORD *)(v269 + 8) = v229;
                      v230 = 1;
                      v307 = v269;
                    }
                    else
                    {
                      v230 = *(_QWORD *)v228;
                      v307 = v229 << 36;
                    }
                    v135 = v307 | v230;
                    v129 = v289;
                    v120 = v296;
                    v132 = v301;
                    v134 = v283;
                  }
                  v136 = v132;
                  v300 = v135;
                  if ((v132 & 1) != 0)
                  {
                    v284 = v134;
                    v290 = v129;
                    v297 = v120;
                    v308 = *(_QWORD *)(v132 & 0xFFFFFFFF8);
                    if ((v132 & 2) != 0
                      || (v231 = *(unsigned int *)((v132 & 0xFFFFFFFF8) + 8), (_DWORD)v231 == 0x3FFFFFFF)
                      || (_DWORD)v231 == -1)
                    {
                      v232 = 2;
                    }
                    else if (v231 >> 28)
                    {
                      v270 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v270 = v308;
                      *(_DWORD *)(v270 + 8) = v231;
                      v232 = 1;
                      v308 = v270;
                    }
                    else
                    {
                      v232 = *(_QWORD *)(v132 & 0xFFFFFFFF8);
                      v308 = v231 << 36;
                    }
                    v136 = v308 | v232;
                    v129 = v290;
                    v120 = v297;
                    v135 = v300;
                    v134 = v284;
                  }
                  v137 = v135;
                  v306 = v136;
                  if ((v135 & 1) != 0)
                  {
                    v285 = v134;
                    v291 = v129;
                    v298 = v120;
                    v281 = *(_QWORD *)(v135 & 0xFFFFFFFF8);
                    if ((v135 & 2) != 0
                      || (v233 = *(unsigned int *)((v135 & 0xFFFFFFFF8) + 8), (_DWORD)v233 == 0x3FFFFFFF)
                      || (_DWORD)v233 == -1)
                    {
                      v234 = 2;
                    }
                    else if (v233 >> 28)
                    {
                      v271 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v271 = v281;
                      *(_DWORD *)(v271 + 8) = v233;
                      v234 = 1;
                      v281 = v271;
                    }
                    else
                    {
                      v234 = *(_QWORD *)(v135 & 0xFFFFFFFF8);
                      v281 = v233 << 36;
                    }
                    v134 = v285;
                    v137 = v281 | v234;
                    v129 = v291;
                    v120 = v298;
                    v136 = v306;
                  }
                  *(_QWORD *)&v332 = v137;
                  v138 = v136;
                  if ((v136 & 1) != 0)
                  {
                    v286 = v134;
                    v292 = v129;
                    v299 = v120;
                    v282 = *(_QWORD *)(v306 & 0xFFFFFFFF8);
                    if ((v306 & 2) != 0
                      || (v235 = *(unsigned int *)((v306 & 0xFFFFFFFF8) + 8), (_DWORD)v235 == 0x3FFFFFFF)
                      || (_DWORD)v235 == -1)
                    {
                      v236 = 2;
                    }
                    else if (v235 >> 28)
                    {
                      v272 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v272 = v282;
                      *(_DWORD *)(v272 + 8) = v235;
                      v236 = 1;
                      v282 = v272;
                    }
                    else
                    {
                      v236 = *(_QWORD *)(v306 & 0xFFFFFFFF8);
                      v282 = v235 << 36;
                    }
                    v134 = v286;
                    v138 = v282 | v236;
                    v129 = v292;
                    v120 = v299;
                  }
                  *((_QWORD *)&v332 + 1) = v138;
                  LOWORD(v333) = v133;
                  v360 = v27 & 0xFF00FFFFFFFFFFFFLL | 0x4000000000000;
                  v361[0] = v120 & 0xFF00FFFFFFFFFFFFLL | 0x4000000000000;
                  v359 = v129 & 0xFF00FFFFFFFFFFFFLL;
                  v358 = 187;
                  v139 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>((uint64_t)v134 + 1032, &v358, (uint64_t)&v332, (uint64_t *)v361, (uint64_t *)&v360, (uint64_t *)&v359, v118, v119);
                  if ((BYTE8(v332) & 1) != 0 && (*((_QWORD *)&v332 + 1) & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(*((_QWORD *)&v332 + 1) & 0xFFFFFFFF8, v65, v66, v5, v6, v7, v8, v9);
                  v98 = v309;
                  v99 = ~(v27 << 32);
                  if ((v332 & 1) != 0 && (v332 & 0xFFFFFFFF8) != 0)
                  {
                    WTF::fastFree(v332 & 0xFFFFFFFF8, v65, v66, v5, v6, v7, v8, v9);
                    v98 = v309;
                    v99 = ~(v27 << 32);
                  }
                  *(_QWORD *)&v332 = v19;
                  *((_QWORD *)&v332 + 1) = v139;
                  v140 = HIDWORD(v323);
                  if (HIDWORD(v323) && *((_QWORD *)v322 + 2 * HIDWORD(v323) - 2) > v19)
                  {
                    JSC::DFG::InsertionSet::insertSlow((uint64_t)&v321, (unint64_t *)&v332, v66, v5, v6, v7, v8, v9);
                    v98 = v309;
                    v99 = ~(v27 << 32);
                    v141 = v306;
                  }
                  else
                  {
                    v141 = v306;
                    if (HIDWORD(v323) == (_DWORD)v323)
                    {
                      v182 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v322, (void *)(HIDWORD(v323) + 1), (unint64_t)&v332, v5, v6, v7, v8, v9);
                      v98 = v309;
                      v99 = ~(v27 << 32);
                      v140 = HIDWORD(v323);
                      v142 = v322;
                      v143 = *v182;
                      v141 = v306;
                    }
                    else
                    {
                      v142 = v322;
                      v143 = v332;
                    }
                    *((_OWORD *)v142 + v140) = v143;
                    ++HIDWORD(v323);
                  }
                  v144 = *((_QWORD *)&v332 + 1);
                  if ((v141 & 1) != 0 && (v141 & 0xFFFFFFFF8) != 0)
                  {
                    WTF::fastFree(v141 & 0xFFFFFFFF8, v65, v66, v5, v6, v7, v8, v9);
                    v98 = v309;
                    v99 = ~(v27 << 32);
                  }
                  if ((v300 & 1) != 0 && (v300 & 0xFFFFFFFF8) != 0)
                  {
                    WTF::fastFree(v300 & 0xFFFFFFFF8, v65, v66, v5, v6, v7, v8, v9);
                    v98 = v309;
                    v99 = ~(v27 << 32);
                  }
                  v145 = 0;
                  v146 = ((v64 + v98) ^ ((unint64_t)(v64 + v98) >> 22))
                       + ~(((v64 + v98) ^ ((unint64_t)(v64 + v98) >> 22)) << 13);
                  v147 = (9 * (v146 ^ (v146 >> 8))) ^ ((9 * (v146 ^ (v146 >> 8))) >> 15);
                  v148 = ((v147 + ~(v147 << 27)) >> 31) ^ (v147 + ~((_DWORD)v147 << 27));
                  v149 = ((v99 + v27) ^ ((v99 + v27) >> 22)) + ~(((v99 + v27) ^ ((v99 + v27) >> 22)) << 13);
                  v150 = (9 * (v149 ^ (v149 >> 8))) ^ ((9 * (v149 ^ (v149 >> 8))) >> 15);
                  for (i = v148 + (((v150 + ~(v150 << 27)) >> 31) ^ (v150 + ~((_DWORD)v150 << 27))) + 2; ; i = v145 + v152)
                  {
                    v152 = i & *((_DWORD *)v320 - 2);
                    v153 = &v320[72 * v152];
                    v154 = *((_DWORD *)v153 + 6);
                    if (v154)
                    {
                      if (v154 == 1)
                      {
                        v152 = *((_DWORD *)v320 - 1);
LABEL_249:
                        *(_QWORD *)&v320[72 * v152 + 64] = v144;
                        if ((v301 & 1) != 0 && (v301 & 0xFFFFFFFF8) != 0)
                        {
                          WTF::fastFree(v301 & 0xFFFFFFFF8, v65, v66, v5, v6, v7, v8, v9);
                          v98 = v309;
                          v99 = ~(v27 << 32);
                        }
                        if ((v304 & 1) != 0 && (v304 & 0xFFFFFFFF8) != 0)
                        {
                          WTF::fastFree(v304 & 0xFFFFFFFF8, v65, v66, v5, v6, v7, v8, v9);
LABEL_207:
                          v98 = v309;
                          v99 = ~(v27 << 32);
                        }
                        goto LABEL_251;
                      }
                    }
                    else if (*(_DWORD *)v153 == 2 && *((_QWORD *)v153 + 1) == v64 && *((_QWORD *)v153 + 2) == v27)
                    {
                      goto LABEL_249;
                    }
                    ++v145;
                  }
                }
              }
              else
              {
                if ((v354 & 0x80000000) != 0)
                {
                  JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v347, (const JSC::DFG::NodeOrigin *)v20);
                  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin>((uint64_t)&v321, v19, 0, 379, (uint64_t)v347, v189, v190, v191);
                  JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v347, v192, v193, v194, v195, v196, v197, v198);
                }
                v157 = v350.i64[1];
                if ((v350.i8[8] & 1) != 0)
                {
                  v257 = *(_QWORD *)(v350.i64[1] & 0xFFFFFFFF8);
                  if ((v350.i8[8] & 2) != 0
                    || (v258 = *(unsigned int *)((v350.i64[1] & 0xFFFFFFFF8) + 8), (_DWORD)v258 == 0x3FFFFFFF)
                    || (_DWORD)v258 == -1)
                  {
                    v259 = 2;
                  }
                  else if (v258 >> 28)
                  {
                    v279 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v279 = v257;
                    *(_DWORD *)(v279 + 8) = v258;
                    v259 = 1;
                    v257 = v279;
                  }
                  else
                  {
                    v259 = *(_QWORD *)(v350.i64[1] & 0xFFFFFFFF8);
                    v257 = v258 << 36;
                  }
                  v157 = v257 | v259;
                }
                v344 = v157;
                v158 = v351;
                if ((v351 & 1) != 0)
                {
                  v260 = *(_QWORD *)(v351 & 0xFFFFFFFF8);
                  if ((v351 & 2) != 0
                    || (v261 = *(unsigned int *)((v351 & 0xFFFFFFFF8) + 8), (_DWORD)v261 == 0x3FFFFFFF)
                    || (_DWORD)v261 == -1)
                  {
                    v262 = 2;
                  }
                  else if (v261 >> 28)
                  {
                    v280 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v280 = v260;
                    *(_DWORD *)(v280 + 8) = v261;
                    v262 = 1;
                    v260 = v280;
                  }
                  else
                  {
                    v262 = *(_QWORD *)(v351 & 0xFFFFFFFF8);
                    v260 = v261 << 36;
                  }
                  v158 = v260 | v262;
                }
                v345 = v158;
                v346 = v352;
                v120 = JSC::DFG::InsertionSet::insertConstant((uint64_t *)&v321, v19, (uint64_t)&v344, DWORD1(v354) | 0xFFFE000000000000, 0, v7, v8, v9);
                if ((v345 & 1) != 0 && (v345 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v345 & 0xFFFFFFFF8, v124, v125, v126, v127, v128, v118, v119);
                v130 = v344;
                if ((v344 & 1) != 0)
                {
                  v293 = v120;
                  v256 = 0;
                  goto LABEL_370;
                }
              }
              v129 = 0;
              goto LABEL_152;
            }
            v159 = v354;
            if ((v354 & 0x80000000) != 0)
            {
              JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v349, (const JSC::DFG::NodeOrigin *)&v329);
              JSC::DFG::IntegerCheckCombiningPhase::insertAdd((uint64_t)&v312, v19, (uint64_t)v349, v64, v159, 2, v160, v161);
              JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v349, v162, v163, v164, v165, v166, v167, v168);
              v98 = v309;
              v99 = ~(v27 << 32);
            }
            v169 = DWORD1(v354);
            if (SDWORD1(v354) >= 1)
            {
              JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v348, (const JSC::DFG::NodeOrigin *)&v350.u64[1]);
              JSC::DFG::IntegerCheckCombiningPhase::insertAdd((uint64_t)&v312, v19, (uint64_t)v348, v64, v169, 2, v170, v171);
              JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v348, v172, v173, v174, v175, v176, v177, v178);
              goto LABEL_207;
            }
LABEL_251:
            v206 = 0;
            v325 = 1;
            v207 = ((v64 + v98) ^ ((unint64_t)(v64 + v98) >> 22))
                 + ~(((v64 + v98) ^ ((unint64_t)(v64 + v98) >> 22)) << 13);
            v208 = (9 * (v207 ^ (v207 >> 8))) ^ ((9 * (v207 ^ (v207 >> 8))) >> 15);
            v209 = ((v208 + ~(v208 << 27)) >> 31) ^ (v208 + ~((_DWORD)v208 << 27));
            v210 = ((v99 + v27) ^ ((v99 + v27) >> 22)) + ~(((v99 + v27) ^ ((v99 + v27) >> 22)) << 13);
            v211 = (9 * (v210 ^ (v210 >> 8))) ^ ((9 * (v210 ^ (v210 >> 8))) >> 15);
            for (j = v29 + v209 + (((v211 + ~(v211 << 27)) >> 31) ^ (v211 + ~((_DWORD)v211 << 27))); ; j = v206 + v213)
            {
              v213 = j & *((_DWORD *)v320 - 2);
              v214 = &v320[72 * v213];
              v215 = *((_DWORD *)v214 + 6);
              if (v215)
                break;
              if (*(_DWORD *)v214 == v29 && *((_QWORD *)v214 + 1) == v64 && *((_QWORD *)v214 + 2) == v27)
                goto LABEL_260;
LABEL_258:
              ++v206;
            }
            if (v215 != 1)
              goto LABEL_258;
            v213 = *((_DWORD *)v320 - 1);
LABEL_260:
            v320[72 * v213 + 60] = 1;
            if ((v351 & 1) != 0 && (v351 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v351 & 0xFFFFFFFF8, v65, v66, v5, v6, v7, v8, v9);
            if ((v350.i8[8] & 1) != 0 && (v350.i64[1] & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v350.i64[1] & 0xFFFFFFFF8, v65, v66, v5, v6, v7, v8, v9);
            if ((v329.i8[8] & 1) != 0 && (v329.i64[1] & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v329.i64[1] & 0xFFFFFFFF8, v65, v66, v5, v6, v7, v8, v9);
            if ((v329.i8[0] & 1) != 0 && (v329.i64[0] & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v329.i64[0] & 0xFFFFFFFF8, v65, v66, v5, v6, v7, v8, v9);
LABEL_89:
            if (v29 == 2)
            {
              if (HIBYTE(word_1ECF4C630))
              {
                JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v336, (const JSC::DFG::NodeOrigin *)v20);
                JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge,JSC::DFG::Edge>((uint64_t)&v321, v19, 0, 0xBAu, (uint64_t)v336, *(_QWORD *)(v20 + 24), *(_QWORD *)(v20 + 32));
                JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v336, v199, v200, v201, v202, v203, v204, v205);
              }
              v329.i64[0] = 2;
              v329.i64[1] = v64;
              v330 = v27;
              v331 = 0;
              WTF::HashMap<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>,JSC::DFG::IntegerCheckCombiningPhase::Range,WTF::DefaultHash<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashTraits<JSC::DFG::IntegerCheckCombiningPhase::Range>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>,JSC::DFG::IntegerCheckCombiningPhase::Range,WTF::DefaultHash<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashTraits<JSC::DFG::IntegerCheckCombiningPhase::Range>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>>,WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>((uint64_t)&v332, v320, (uint64_t)&v329, v5, v6, v7, v8, v9);
              JSC::DFG::Node::convertToIdentityOn(v20, (unint64_t)v335);
              if ((v333 & 1) != 0 && (v333 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v333 & 0xFFFFFFFF8, v65, v66, v5, v6, v7, v8, v9);
              if ((BYTE8(v332) & 1) != 0 && (*((_QWORD *)&v332 + 1) & 0xFFFFFFFF8) != 0)
                WTF::fastFree(*((_QWORD *)&v332 + 1) & 0xFFFFFFFF8, v65, v66, v5, v6, v7, v8, v9);
            }
            else
            {
              *(_QWORD *)(v20 + 72) = 1;
            }
            v325 = 1;
LABEL_81:
            if ((v355 & 1) != 0 && (v355 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v355 & 0xFFFFFFFF8, v65, v66, v5, v6, v7, v8, v9);
            if ((BYTE8(v354) & 1) != 0 && (*((_QWORD *)&v354 + 1) & 0xFFFFFFFF8) != 0)
              WTF::fastFree(*((_QWORD *)&v354 + 1) & 0xFFFFFFFF8, v65, v66, v5, v6, v7, v8, v9);
            v18 = *(unsigned int *)(v11 + 220);
LABEL_15:
            if (++v19 >= v18)
            {
LABEL_16:
              JSC::DFG::InsertionSet::execute((JSC::DFG::InsertionSet *)&v321, (JSC::DFG::BasicBlock *)v11);
              goto LABEL_17;
            }
          }
        }
      }
      if ((*(_DWORD *)(v16 + 72) & 0xFFFFFFFE) != 2)
        goto LABEL_10;
      if (*(unsigned __int16 *)((*(_QWORD *)(v16 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u)
        goto LABEL_10;
      v22 = **(_QWORD **)((*(_QWORD *)(v16 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
      if (v22 < 0xFFFE000000000000)
        goto LABEL_10;
      v23 = 0;
      v24 = *(_QWORD *)(v16 + 24);
      v25 = 1;
LABEL_32:
      v31 = v320;
      if (v320
        || (WTF::HashTable<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>,WTF::KeyValuePair<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>,JSC::DFG::IntegerCheckCombiningPhase::Range>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>,JSC::DFG::IntegerCheckCombiningPhase::Range>>,WTF::DefaultHash<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashMap<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>,JSC::DFG::IntegerCheckCombiningPhase::Range,WTF::DefaultHash<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashTraits<JSC::DFG::IntegerCheckCombiningPhase::Range>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>>::rehash((uint64_t *)&v320, 8u, 0), (v31 = v320) != 0))
      {
        v32 = *((_DWORD *)v31 - 2);
      }
      else
      {
        v32 = 0;
      }
      v33 = 0;
      v34 = v24 & 0xFFFCFFFFFFFFFFFFLL;
      v35 = ((v24 & 0xFFFCFFFFFFFFFFFFLL) + ~(v24 << 32)) ^ (((v24 & 0xFFFCFFFFFFFFFFFFLL) + ~(v24 << 32)) >> 22);
      v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
      v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
      v38 = (~(v23 << 32) + v23) ^ ((~(v23 << 32) + v23) >> 22);
      v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
      v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
      v41 = v25 + ((v37 >> 31) ^ v37) + ((v40 >> 31) ^ v40);
      for (k = 1; ; ++k)
      {
        v43 = v41 & v32;
        v44 = (uint64_t)&v31[72 * v43];
        v45 = *(_DWORD *)(v44 + 24);
        if (v45 == 1)
          break;
        if (v45)
        {
          if (v45 == 2)
            v33 = &v31[72 * v43];
        }
        else if (*(_DWORD *)v44 == v25 && *(_QWORD *)(v44 + 8) == v34 && *(_QWORD *)(v44 + 16) == v23)
        {
          goto LABEL_52;
        }
        v41 = k + v43;
      }
      if (v33)
      {
        *((_DWORD *)v33 + 6) = 1;
        *((_OWORD *)v33 + 2) = 0u;
        *((_OWORD *)v33 + 3) = 0u;
        v46 = 2;
        *(int64x2_t *)(v33 + 40) = vdupq_n_s64(2uLL);
        *((_QWORD *)v33 + 8) = 0;
        --*((_DWORD *)v320 - 4);
        v44 = (uint64_t)v33;
      }
      else
      {
        v46 = *(_QWORD *)&v31[72 * v43 + 40];
      }
      *(_DWORD *)v44 = v25;
      *(_DWORD *)(v44 + 4) = 0;
      *(_QWORD *)(v44 + 8) = v34;
      *(_QWORD *)(v44 + 16) = v23;
      *(_DWORD *)(v44 + 24) = 0;
      *(_QWORD *)(v44 + 32) = 0;
      if ((v46 & 1) != 0 && (v46 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v46 & 0xFFFFFFFF8, v3, v4, v5, v6, v7, v8, v9);
      *(_QWORD *)(v44 + 40) = 2;
      v47 = *(_QWORD *)(v44 + 48);
      if ((v47 & 1) != 0 && (v47 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v47 & 0xFFFFFFFF8, v3, v4, v5, v6, v7, v8, v9);
      *(_QWORD *)(v44 + 48) = 2;
      *(_DWORD *)(v44 + 56) = 0;
      *(_BYTE *)(v44 + 60) = 0;
      *(_QWORD *)(v44 + 64) = 0;
      if (v320)
        v48 = *((_DWORD *)v320 - 3) + 1;
      else
        v48 = 1;
      *((_DWORD *)v320 - 3) = v48;
      if (v320)
        v49 = *((_DWORD *)v320 - 3);
      else
        v49 = 0;
      v50 = (*((_DWORD *)v320 - 4) + v49);
      v51 = *((unsigned int *)v320 - 1);
      if (v51 > 0x400)
      {
        if (v51 > 2 * v50)
          goto LABEL_52;
      }
      else
      {
        if (3 * v51 > 4 * v50)
          goto LABEL_52;
        if (!(_DWORD)v51)
        {
          v83 = 8;
          goto LABEL_188;
        }
      }
      v83 = (_DWORD)v51 << (6 * *((_DWORD *)v320 - 3) >= (2 * v51));
LABEL_188:
      v44 = WTF::HashTable<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>,WTF::KeyValuePair<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>,JSC::DFG::IntegerCheckCombiningPhase::Range>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>,JSC::DFG::IntegerCheckCombiningPhase::Range>>,WTF::DefaultHash<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashMap<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>,JSC::DFG::IntegerCheckCombiningPhase::Range,WTF::DefaultHash<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashTraits<JSC::DFG::IntegerCheckCombiningPhase::Range>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>>::rehash((uint64_t *)&v320, v83, v44);
LABEL_52:
      if (*(_DWORD *)(v44 + 56))
      {
        if ((int)v22 <= *(_DWORD *)(v44 + 36))
        {
          if ((int)v22 >= *(_DWORD *)(v44 + 32))
          {
LABEL_62:
            ++*(_DWORD *)(v44 + 56);
            goto LABEL_10;
          }
          *(_DWORD *)(v44 + 32) = v22;
          v55 = (uint64_t *)(v44 + 40);
LABEL_58:
          if (v55 != (uint64_t *)v16)
          {
            v56 = *v55;
            if ((*v55 & 1) != 0 && (v56 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v56 & 0xFFFFFFFF8, v3, v4, v5, v6, v7, v8, v9);
            v57 = *(_QWORD *)v16;
            if ((*(_QWORD *)v16 & 1) != 0)
            {
              v183 = *(_QWORD *)(v57 & 0xFFFFFFFF8);
              if ((v57 & 2) != 0
                || (v184 = *(unsigned int *)((v57 & 0xFFFFFFFF8) + 8), (_DWORD)v184 == 0x3FFFFFFF)
                || (_DWORD)v184 == -1)
              {
                v185 = 2;
              }
              else if (v184 >> 28)
              {
                v263 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v263 = v183;
                *(_DWORD *)(v263 + 8) = v184;
                v185 = 1;
                v183 = v263;
              }
              else
              {
                v185 = *(_QWORD *)(v57 & 0xFFFFFFFF8);
                v183 = v184 << 36;
              }
              v57 = v183 | v185;
            }
            *v55 = v57;
          }
          goto LABEL_62;
        }
        *(_DWORD *)(v44 + 36) = v22;
      }
      else
      {
        *(_DWORD *)(v44 + 32) = v22;
        *(_DWORD *)(v44 + 36) = v22;
        v52 = (uint64_t *)(v44 + 40);
        if (v44 + 40 != v16)
        {
          v53 = *v52;
          if ((*v52 & 1) != 0 && (v53 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v53 & 0xFFFFFFFF8, v3, v4, v5, v6, v7, v8, v9);
          v54 = *(_QWORD *)v16;
          if ((*(_QWORD *)v16 & 1) != 0)
          {
            v186 = *(_QWORD *)(v54 & 0xFFFFFFFF8);
            if ((v54 & 2) != 0
              || (v187 = *(unsigned int *)((v54 & 0xFFFFFFFF8) + 8), (_DWORD)v187 == 0x3FFFFFFF)
              || (_DWORD)v187 == -1)
            {
              v188 = 2;
            }
            else if (v187 >> 28)
            {
              v264 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v264 = v186;
              *(_DWORD *)(v264 + 8) = v187;
              v188 = 1;
              v186 = v264;
            }
            else
            {
              v188 = *(_QWORD *)(v54 & 0xFFFFFFFF8);
              v186 = v187 << 36;
            }
            v54 = v186 | v188;
          }
          *v52 = v54;
        }
      }
      v55 = (uint64_t *)(v44 + 48);
      goto LABEL_58;
    }
LABEL_17:
    ;
  }
  while (v10);
  if (v325)
  {
    if (qword_1ECF4C32A | byte_1ECF4C323
      || (BYTE1(qword_1ECF4C32A) ? (v155 = (*(_DWORD *)(*((_QWORD *)v316 + 3) + 16) & 0xFFFFFFFE) == 4) : (v155 = 0),
          !v155 ? (v156 = BYTE2(qword_1ECF4C32A) == 0) : (v156 = 0),
          !v156))
    {
      v354 = v317;
      WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v316 + 1088, "Phase ", (uint64_t)&v354, " changed the IR.\n", "\n");
    }
    v67 = 1;
  }
  else
  {
    v67 = 0;
  }
LABEL_102:
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v326);
  v75 = v322;
  if (v324 != (_BYTE *)v322 && v322)
  {
    v322 = 0;
    LODWORD(v323) = 0;
    WTF::fastFree((unint64_t)v75, v68, v69, v70, v71, v72, v73, v74);
  }
  v76 = v320;
  if (v320)
  {
    v79 = *((unsigned int *)v320 - 1);
    if ((_DWORD)v79)
    {
      v80 = v320 + 48;
      do
      {
        if (*((_DWORD *)v80 - 6) != 2)
        {
          v81 = *(_QWORD *)v80;
          if ((*(_QWORD *)v80 & 1) != 0 && (v81 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v81 & 0xFFFFFFFF8, v68, v69, v70, v71, v72, v73, v74);
          v82 = *((_QWORD *)v80 - 1);
          if ((v82 & 1) != 0 && (v82 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v82 & 0xFFFFFFFF8, v68, v69, v70, v71, v72, v73, v74);
        }
        v80 += 72;
        --v79;
      }
      while (v79);
    }
    WTF::fastFree((unint64_t)(v76 - 16), v68, v69, v70, v71, v72, v73, v74);
  }
  if (HIBYTE(qword_1ECF4C32A) && !v318)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v312, (uint64_t)v68, v69, v70, v71, v72, v73, v74);
  v77 = v319;
  v319 = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 1)
      WTF::fastFree((unint64_t)v77, v68, v69, v70, v71, v72, v73, v74);
    else
      --*(_DWORD *)v77;
  }
  return v67;
}

uint64_t JSC::DFG::performIntegerRangeOptimization(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  WTF *v11;
  JSC::DFG::Graph *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t **v64;
  int v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  unsigned int v69;
  uint64_t *v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  unint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  int v118;
  JSC::DFG::Graph *v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t *v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  BOOL v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  int v157;
  unsigned int v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t *v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  signed int v170;
  int v171;
  unint64_t v172;
  unint64_t v173;
  unsigned int v174;
  uint64_t v175;
  unsigned int v176;
  int v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  WTF *v187;
  WTF *v188;
  WTF *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t *v196;
  unint64_t v197;
  WTF *v198;
  unint64_t v200;
  unint64_t v201;
  int v202;
  int v203;
  BOOL v204;
  BOOL v205;
  unint64_t v206;
  unint64_t v207;
  int v208;
  int v209;
  BOOL v210;
  int v211;
  int v213;
  BOOL v214;
  int v215;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  int v227;
  BOOL v228;
  char v229;
  unsigned int v230;
  uint64_t *v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  __n128 *v235;
  signed int v236;
  signed int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  BOOL v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  BOOL v252;
  uint64_t v253;
  __n128 *v254;
  signed int v255;
  signed int v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  signed int v276;
  int v277;
  signed int v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  __int16 v282;
  JSC::DFG::Graph *v283;
  __int128 v284;
  char v285;
  WTF *v286;
  uint64_t inserted;
  uint64_t *v288;
  uint64_t v289;
  WTF *v290;
  uint64_t v291;
  JSC::DFG *v292;
  WTF *v293;
  uint64_t v294;
  _BYTE v295[128];
  int v296;
  _QWORD v297[2];
  __int128 v298;
  double v299;
  __n128 v300;
  uint64_t v301;
  __n128 v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t *v305;
  __n128 v306;
  uint64_t v307;
  __n128 v308;
  uint64_t v309;
  unint64_t v310;
  int v311;
  unsigned int v312;
  __int128 v313;
  __int16 v314;

  v279 = -1;
  v280 = -1;
  v281 = 0;
  v282 = 256;
  v283 = this;
  *(_QWORD *)&v284 = "integer range optimization";
  *((_QWORD *)&v284 + 1) = 27;
  v285 = 0;
  v286 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v279);
  inserted = 0;
  v288 = 0;
  v290 = 0;
  v291 = 0;
  v289 = 0x8000000000000000;
  v9 = *((unsigned int *)this + 15);
  if ((_DWORD)v9)
  {
    if (v9 <= 0x10)
      v10 = 16;
    else
      v10 = *((unsigned int *)this + 15);
    if (v10 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19841662CLL);
    }
    v11 = (WTF *)WTF::fastMalloc((WTF *)(8 * v10));
    LODWORD(v291) = v10;
    v290 = v11;
    if (HIDWORD(v291) != (_DWORD)v9)
      bzero((char *)v11 + 8 * HIDWORD(v291), ((8 * v9 - 8 * HIDWORD(v291) - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  HIDWORD(v291) = v9;
  v292 = this;
  v293 = (WTF *)v295;
  v294 = 8;
  v296 = 0;
  v297[0] = "DFG";
  v297[1] = 4;
  v298 = v284;
  v299 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v243 = mach_absolute_time();
    v245 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v245 != -1)
    {
      *(_QWORD *)&v313 = &v306;
      v308.n128_u64[0] = (unint64_t)&v313;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v308, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v244) = dword_1ECF4400C;
    v299 = (double)(v243 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v244 * 1000000000.0);
  }
  v12 = v283;
  if (!*((_DWORD *)v283 + 15))
  {
    __break(0xC471u);
    JUMPOUT(0x198416624);
  }
  v13 = **((_QWORD **)v283 + 6);
  v14 = *(unsigned int *)(v13 + 220);
  if ((_DWORD)v14)
  {
    v15 = 0;
    v16 = *(uint64_t ***)(v13 + 208);
    v17 = 8 * v14;
    do
    {
      v18 = v16[v15 / 8];
      if (*((unsigned __int16 *)v18 + 9) <= 2u
        && *(_QWORD *)v18[9] >= 0xFFFE000000000000
        && *(_QWORD *)v18[9] == 0)
      {
        inserted = (uint64_t)v16[v15 / 8];
        goto LABEL_25;
      }
      v15 += 8;
    }
    while (v17 != v15);
    if (!inserted)
    {
      v20 = *v16;
      v21 = **v16;
      if ((v21 & 1) != 0)
      {
        v246 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
        if ((v21 & 2) != 0
          || ((v247 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v247 != 0x3FFFFFFF)
            ? (v248 = (_DWORD)v247 == -1)
            : (v248 = 1),
              v248))
        {
          v249 = 2;
        }
        else if (v247 >> 28)
        {
          v272 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v272 = v246;
          *(_DWORD *)(v272 + 8) = v247;
          v249 = 1;
          v246 = v272;
        }
        else
        {
          v249 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
          v246 = v247 << 36;
        }
        v21 = v246 | v249;
      }
      *(_QWORD *)&v313 = v21;
      v22 = v20[1];
      if ((v22 & 1) != 0)
      {
        v250 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
        if ((v22 & 2) != 0
          || ((v251 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v251 != 0x3FFFFFFF)
            ? (v252 = (_DWORD)v251 == -1)
            : (v252 = 1),
              v252))
        {
          v253 = 2;
        }
        else if (v251 >> 28)
        {
          v273 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v273 = v250;
          *(_DWORD *)(v273 + 8) = v251;
          v253 = 1;
          v250 = v273;
        }
        else
        {
          v253 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
          v250 = v251 << 36;
        }
        v22 = v250 | v253;
      }
      *((_QWORD *)&v313 + 1) = v22;
      v314 = *((_WORD *)v20 + 8);
      inserted = JSC::DFG::InsertionSet::insertConstant((uint64_t *)&v292, 0, (uint64_t)&v313, 0xFFFE000000000000, 0, v6, v7, v8);
      if ((BYTE8(v313) & 1) != 0 && (*((_QWORD *)&v313 + 1) & 0xFFFFFFFF8) != 0)
        WTF::fastFree(*((_QWORD *)&v313 + 1) & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
      if ((v313 & 1) != 0 && (v313 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v313 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
      if (!*((_DWORD *)v283 + 15))
      {
        __break(0xC471u);
        JUMPOUT(0x198416634);
      }
      JSC::DFG::InsertionSet::execute((JSC::DFG::InsertionSet *)&v292, **((JSC::DFG::BasicBlock ***)v283 + 6));
      v12 = v283;
    }
  }
  else if (!inserted)
  {
    __break(0xC471u);
    JUMPOUT(0x198415F94);
  }
LABEL_25:
  JSC::DFG::Graph::blocksInPostOrder(v12, (void *)1, v3, v4, v5, v6, v7, v8, (uint64_t)&v310);
LABEL_26:
  if (++v296 > 0x31)
    goto LABEL_282;
  v37 = v312;
  if (v312)
  {
    v38 = 0;
    while (1)
    {
      if (--v37 >= (unint64_t)v312)
      {
        __break(0xC471u);
        JUMPOUT(0x1984165F4);
      }
      if (!*((_DWORD *)v283 + 15))
      {
        __break(0xC471u);
        JUMPOUT(0x1984165ECLL);
      }
      v39 = *(_QWORD *)(v310 + 8 * v37);
      if (v39 == **((_QWORD **)v283 + 6))
      {
        v42 = *(unsigned int *)(v39 + 8);
      }
      else if (!v39
             || ((v40 = (unint64_t *)(2 * v289), v289 < 0) ? (v41 = 63) : (v41 = *v40),
                 (v42 = *(unsigned int *)(v39 + 8), v41 <= v42)
              || ((v43 = (uint64_t *)(v40 + 1), v289 >= 0) ? (v44 = v43) : (v44 = &v289),
                  ((*(unint64_t *)((char *)v44 + ((v42 >> 3) & 0x1FFFFFF8)) >> v42) & 1) == 0)))
      {
        JSC::DFG::Graph::logAssertionFailure(v283, 0, (const WTF::CString *)"./dfg/DFGIntegerRangeOptimizationPhase.cpp", (const char *)0x462, "BOOL JSC::DFG::(anonymous namespace)::IntegerRangeOptimizationPhase::run()", "block == m_graph.block(0) || m_seenBlocks.contains(block)");
        __break(0xC471u);
        JUMPOUT(0x1984157B8);
      }
      if (HIDWORD(v291) <= v42)
      {
        __break(0xC471u);
        JUMPOUT(0x1984165E4);
      }
      v45 = v288;
      v288 = (uint64_t *)v308.n128_u64[0];
      v308.n128_u64[0] = (unint64_t)v45;
      if (v45)
      {
        v46 = *((unsigned int *)v45 - 1);
        if ((_DWORD)v46)
        {
          v47 = v45 + 1;
          do
          {
            if (*(v47 - 1) != 1)
            {
              v48 = *v47;
              if (*v47)
              {
                *v47 = 0;
                *((_DWORD *)v47 + 2) = 0;
                WTF::fastFree(v48, v30, v31, v32, v33, v34, v35, v36);
              }
            }
            v47 += 3;
            --v46;
          }
          while (v46);
        }
        WTF::fastFree((unint64_t)(v45 - 2), v30, v31, v32, v33, v34, v35, v36);
      }
      v49 = *(unsigned int *)(v39 + 220);
      if (!(_DWORD)v49)
        goto LABEL_60;
      v50 = *(uint64_t **)(v39 + 208);
      v51 = 8 * v49;
      do
      {
        v52 = *v50++;
        v51 -= 8;
      }
      while (v51);
      v53 = *(unsigned int *)(v39 + 220);
      if ((_DWORD)v53)
      {
        v54 = 8 * v53;
        while (1)
        {
          v55 = *(_QWORD *)(*(_QWORD *)(v39 + 208) - 8 + v54);
          v56 = *(unsigned __int16 *)(v55 + 18);
          if ((v56 - 364) < 0xC)
            break;
          if ((v56 - 28) < 2 || (v56 - 23) <= 2)
          {
            v54 -= 8;
            if (v54)
              continue;
          }
          goto LABEL_61;
        }
      }
      else
      {
LABEL_60:
        v53 = 0;
LABEL_61:
        v55 = 0;
      }
      if (*(_WORD *)(v55 + 18) != 365)
        goto LABEL_63;
      v308 = 0uLL;
      v309 = 1;
      v70 = *(uint64_t **)(v55 + 72);
      v71 = *(_QWORD *)(v55 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v72 = *(unsigned __int16 *)(v71 + 0x12);
      if (v72 != 314)
        v71 = v55;
      v73 = *(_QWORD *)(v71 + 24);
      v30 = (_QWORD *)(v73 & 0xFF00FFFFFFFFFFFFLL);
      if ((v73 & 0xFC000000000000) != 0x4000000000000)
      {
        v74 = *(unsigned __int16 *)((v73 & 0xFF00FFFFFFFFFFFFLL) + 0x12) - 231;
        v75 = (1 << (*(_WORD *)((v73 & 0xFF00FFFFFFFFFFFFLL) + 0x12) + 25)) & 0xCF;
        if (v74 <= 7 && v75 != 0)
        {
          v77 = v30[3];
          if ((v77 & 0xFC000000000000) == 0x4000000000000)
          {
            v111 = v30[4];
            if ((v111 & 0xFC000000000000) == 0x4000000000000)
            {
              switch(v74)
              {
                case 0u:
                  v112 = v77 & 0xFF00FFFFFFFFFFFFLL;
                  if ((v77 & 0xFF00FFFFFFFFFFFFLL) != 0)
                  {
                    v113 = v111 & 0xFF00FFFFFFFFFFFFLL;
                    if ((v77 & 1) != 0)
                    {
                      v209 = *(unsigned __int16 *)((v77 & 0xFF00FFFFFFFFFFFELL) + 0x12);
                      if (v113)
                        v210 = v209 == 27;
                      else
                        v210 = 0;
                      if (!v210)
                        goto LABEL_352;
                      goto LABEL_126;
                    }
                    if (v113)
                    {
LABEL_126:
                      if ((v111 & 1) != 0)
                      {
                        v211 = *(unsigned __int16 *)((v111 & 0xFF00FFFFFFFFFFFELL) + 0x12);
                        if (v112 != v113 && v211 == 27)
                        {
LABEL_128:
                          v114 = 0;
                          goto LABEL_129;
                        }
                      }
                      else if (v112 != v113)
                      {
                        goto LABEL_128;
                      }
LABEL_352:
                      v113 = 0;
                    }
                    v112 = 0;
                    goto LABEL_354;
                  }
                  v113 = 0;
LABEL_354:
                  v114 = 1;
LABEL_129:
                  v308.n128_u64[0] = v112;
                  v308.n128_u64[1] = v113;
                  LODWORD(v309) = v114;
                  break;
                case 1u:
                  v200 = v77 & 0xFF00FFFFFFFFFFFFLL;
                  v201 = v111 & 0xFF00FFFFFFFFFFFFLL;
                  v202 = 0;
                  v203 = 1;
                  goto LABEL_320;
                case 2u:
                  v200 = v77 & 0xFF00FFFFFFFFFFFFLL;
                  v201 = v111 & 0xFF00FFFFFFFFFFFFLL;
                  v202 = 3;
                  v203 = 0;
                  goto LABEL_320;
                case 3u:
                  v200 = v77 & 0xFF00FFFFFFFFFFFFLL;
                  v201 = v111 & 0xFF00FFFFFFFFFFFFLL;
                  v202 = 3;
                  v203 = -1;
LABEL_320:
                  goto LABEL_92;
                case 6u:
                case 7u:
                  v115 = v77 & 0xFF00FFFFFFFFFFFFLL;
                  if ((v77 & 0xFF00FFFFFFFFFFFFLL) != 0)
                  {
                    v116 = v111 & 0xFF00FFFFFFFFFFFFLL;
                    if ((v77 & 1) != 0)
                    {
                      v213 = *(unsigned __int16 *)((v77 & 0xFF00FFFFFFFFFFFELL) + 0x12);
                      if (v116)
                        v214 = v213 == 27;
                      else
                        v214 = 0;
                      if (!v214)
                        goto LABEL_364;
                    }
                    else if (!v116)
                    {
                      goto LABEL_365;
                    }
                    if ((v111 & 1) == 0)
                    {
                      if (v115 != v116)
                        goto LABEL_141;
LABEL_364:
                      v116 = 0;
LABEL_365:
                      v115 = 0;
                      goto LABEL_141;
                    }
                    v215 = *(unsigned __int16 *)((v111 & 0xFF00FFFFFFFFFFFELL) + 0x12);
                    if (v115 == v116 || v215 != 27)
                      goto LABEL_364;
                  }
                  else
                  {
                    v116 = 0;
                  }
LABEL_141:
                  v308.n128_u64[0] = v115;
                  v308.n128_u64[1] = v116;
                  goto LABEL_92;
                default:
                  JSC::DFG::Graph::logAssertionFailure(v283, (JSC::DFG::Node *)v30, (const WTF::CString *)"./dfg/DFGIntegerRangeOptimizationPhase.cpp", (const char *)0x4AB, "BOOL JSC::DFG::(anonymous namespace)::IntegerRangeOptimizationPhase::run()", "Invalid comparison node type");
                  __break(0xC471u);
                  JUMPOUT(0x1984164E0);
              }
            }
          }
        }
        goto LABEL_92;
      }
      if (!v30)
        break;
      v117 = inserted;
      if ((v73 & 1) != 0)
      {
        if (*(_WORD *)((v73 & 0xFF00FFFFFFFFFFFELL) + 0x12) != 27 || inserted == 0)
        {
LABEL_377:
          v117 = 0;
LABEL_378:
          v30 = 0;
LABEL_379:
          v118 = 1;
          goto LABEL_154;
        }
      }
      else if (!inserted)
      {
        goto LABEL_378;
      }
      if ((inserted & 1) != 0)
      {
        if (*(_WORD *)((inserted & 0xFFFFFFFFFFFFFFFELL) + 18) != 27 || v30 == (_QWORD *)inserted)
          goto LABEL_377;
      }
      else if (v30 == (_QWORD *)inserted)
      {
        goto LABEL_377;
      }
      v118 = 2;
LABEL_154:
      v308.n128_u64[0] = (unint64_t)v30;
      v308.n128_u64[1] = v117;
      LODWORD(v309) = v118;
LABEL_92:
      if (v72 == 314)
      {
        v308 = v306;
        v309 = v307;
      }
      if (!v308.n128_u64[0])
      {
        v53 = *(unsigned int *)(v39 + 220);
LABEL_63:
        if (v53)
        {
          v57 = 8 * v53;
          v58 = *(_QWORD *)(v39 + 208) - 8;
          while (1)
          {
            v59 = *(_QWORD *)(v58 + v57);
            v60 = *(unsigned __int16 *)(v59 + 18);
            if ((v60 - 364) < 0xC)
              break;
            if ((v60 - 28) < 2 || (v60 - 23) <= 2)
            {
              v57 -= 8;
              if (v57)
                continue;
            }
            goto LABEL_330;
          }
        }
        else
        {
LABEL_330:
          v59 = 0;
        }
        v61 = 1;
        switch(*(_WORD *)(v59 + 18))
        {
          case 0x16C:
            goto LABEL_71;
          case 0x16D:
            v61 = 2;
            goto LABEL_71;
          case 0x16E:
            v61 = *(_DWORD *)(*(_QWORD *)(v59 + 72) + 12) + 1;
            goto LABEL_146;
          case 0x16F:
            v61 = *(_DWORD *)(*(_QWORD *)(v59 + 72) + 12);
LABEL_146:
            if (!v61)
              goto LABEL_115;
LABEL_71:
            v62 = 0;
            v63 = 0;
            v64 = (uint64_t **)(v59 + 72);
            break;
          default:
            goto LABEL_115;
        }
        while (2)
        {
          v65 = *(unsigned __int16 *)(v59 + 18);
          if (v65 == 366)
          {
            v68 = *v64;
            v69 = *((_DWORD *)*v64 + 3);
            if (v69 > v62)
            {
              v67 = *v68 + 32 * v63;
              goto LABEL_79;
            }
            if (v69 != v62)
            {
              __break(0xC471u);
              JUMPOUT(0x198416380);
            }
            v66 = v68 + 2;
          }
          else
          {
            if (v65 != 367)
            {
              if (!v62)
              {
                v66 = (uint64_t *)(v59 + 72);
                if (v65 != 364)
                  v66 = *v64;
                goto LABEL_80;
              }
              if (v62 != 1)
              {
                __break(0xC471u);
                JUMPOUT(0x198416564);
              }
              v67 = (uint64_t)*v64;
LABEL_79:
              v66 = (uint64_t *)(v67 + 16);
              goto LABEL_80;
            }
            if (*((_DWORD *)*v64 + 3) <= v62)
            {
              __break(0xC471u);
              JUMPOUT(0x1984165FCLL);
            }
            v66 = (uint64_t *)(**v64 + 8 * v63);
          }
LABEL_80:
          v62 = v63 + 1;
          v63 = (v63 + 1);
          if (v61 == v62)
            goto LABEL_115;
          continue;
        }
      }
      v302 = v308;
      v303 = v309;
      if (v306.n128_u64[0])
      {
        v300 = v306;
        v301 = v307;
      }
      v103 = v304;
      if (v304)
      {
        v104 = *((unsigned int *)v304 - 1);
        if ((_DWORD)v104)
        {
          v105 = v304 + 1;
          do
          {
            if (*(v105 - 1) != 1)
            {
              v106 = *v105;
              if (*v105)
              {
                *v105 = 0;
                *((_DWORD *)v105 + 2) = 0;
                WTF::fastFree(v106, v30, v31, v32, v33, v34, v35, v36);
              }
            }
            v105 += 3;
            --v104;
          }
          while (v104);
        }
        WTF::fastFree((unint64_t)(v103 - 2), v30, v31, v32, v33, v34, v35, v36);
      }
      v107 = v305;
      if (v305)
      {
        v108 = *((unsigned int *)v305 - 1);
        if ((_DWORD)v108)
        {
          v109 = v305 + 1;
          do
          {
            if (*(v109 - 1) != 1)
            {
              v110 = *v109;
              if (*v109)
              {
                *v109 = 0;
                *((_DWORD *)v109 + 2) = 0;
                WTF::fastFree(v110, v30, v31, v32, v33, v34, v35, v36);
              }
            }
            v109 += 3;
            --v108;
          }
          while (v108);
        }
        WTF::fastFree((unint64_t)(v107 - 2), v30, v31, v32, v33, v34, v35, v36);
      }
      v38 = v38 & 1 | v96 | v102;
LABEL_115:
      if (!v37)
      {
        if ((v38 & 1) == 0)
          goto LABEL_156;
        goto LABEL_26;
      }
    }
    v117 = 0;
    goto LABEL_379;
  }
LABEL_156:
  v119 = v283;
  v120 = *((unsigned int *)v283 + 15);
  if (!(_DWORD)v120)
    goto LABEL_282;
  v121 = 0;
  while (!*(_QWORD *)(*((_QWORD *)v283 + 6) + 8 * v121))
  {
    v122 = 0;
    if (v120 == ++v121)
      goto LABEL_283;
  }
  if ((_DWORD)v120 == (_DWORD)v121)
  {
LABEL_282:
    v122 = 0;
    goto LABEL_283;
  }
  v122 = 0;
  LODWORD(v123) = *((_DWORD *)v283 + 15);
  while (2)
  {
    if (v123 <= v121)
    {
      __break(0xC471u);
      JUMPOUT(0x198416604);
    }
    v124 = *(_QWORD *)(*((_QWORD *)v119 + 6) + 8 * v121);
    v125 = *(unsigned int *)(v124 + 8);
    if (HIDWORD(v291) <= v125)
    {
      __break(0xC471u);
      JUMPOUT(0x19841660CLL);
    }
    v126 = v288;
    v288 = (uint64_t *)v308.n128_u64[0];
    v308.n128_u64[0] = (unint64_t)v126;
    if (v126)
    {
      v127 = *((unsigned int *)v126 - 1);
      if ((_DWORD)v127)
      {
        v128 = v126 + 1;
        do
        {
          if (*(v128 - 1) != 1)
          {
            v129 = *v128;
            if (*v128)
            {
              *v128 = 0;
              *((_DWORD *)v128 + 2) = 0;
              WTF::fastFree(v129, v30, v31, v32, v33, v34, v35, v36);
            }
          }
          v128 += 3;
          --v127;
        }
        while (v127);
      }
      WTF::fastFree((unint64_t)(v126 - 2), v30, v31, v32, v33, v34, v35, v36);
    }
    v130 = *(unsigned int *)(v124 + 220);
    if (!(_DWORD)v130)
      goto LABEL_215;
    v131 = 0;
    while (2)
    {
      v132 = *(_QWORD *)(v124 + 208);
      v133 = *(_QWORD *)(v132 + 8 * v131);
      v134 = *(unsigned __int16 *)(v133 + 18);
      if (v134 <= 0x5B)
      {
        if (v134 == 62)
        {
          v152 = *(_QWORD *)(v133 + 24);
          if ((v152 & 0xFC000000000000) != 0x4000000000000)
            goto LABEL_183;
          v153 = *(_QWORD *)(v133 + 32);
          if ((v153 & 0xFC000000000000) != 0x4000000000000)
            goto LABEL_183;
          if (*(_DWORD *)(v133 + 72) != 2)
            goto LABEL_183;
          v154 = v153 & 0xFF00FFFFFFFFFFFFLL;
          if (*(unsigned __int16 *)(v154 + 18) > 2u)
            goto LABEL_183;
          v206 = **(_QWORD **)(v154 + 72);
          if (v206 < 0xFFFE000000000000 || !v288)
            goto LABEL_183;
          v207 = v152 & 0xFF00FFFFFFFFFFFFLL;
          v208 = *((_DWORD *)v288 - 2);
          v160 = v208 & v152;
          v161 = &v288[3 * (v208 & v152)];
          v162 = *v161;
          if (*v161 != v207)
          {
            v163 = 1;
            while (v162)
            {
              v160 = (v160 + v163) & v208;
              v161 = &v288[3 * v160];
              v162 = *v161;
              ++v163;
              if (*v161 == v207)
                goto LABEL_381;
            }
            v161 = &v288[3 * *((unsigned int *)v288 - 1)];
          }
LABEL_381:
          if (v161 == &v288[3 * *((unsigned int *)v288 - 1)])
            goto LABEL_183;
          v219 = *((_DWORD *)v161 + 5);
          if (v219)
          {
            v178 = v161[1];
            v220 = v178 + 24 * v219;
            v177 = 0x7FFFFFFF;
            v171 = 0x80000000;
            do
            {
              v164 = *(_QWORD *)(v178 + 8);
              v165 = *(_DWORD *)(v178 + 16);
              v166 = *(int *)(v178 + 20);
              v167 = *(_QWORD *)v178 & 0xFFFFFFFFFFFFFFFELL;
              v31 = *(unsigned __int16 *)(v167 + 18);
              if (v31 > 2
                || (v32 = **(_QWORD **)(v167 + 72), v33 = 0xFFFE000000000000, v32 < 0xFFFE000000000000))
              {
                if ((v165 | 2) == 2)
                {
                  v170 = 0x80000000;
                }
                else
                {
                  if (*(unsigned __int16 *)((v164 & 0xFFFFFFFFFFFFFFFELL) + 18) <= 2u)
                  {
                    v168 = **(_QWORD **)((v164 & 0xFFFFFFFFFFFFFFFELL) + 72);
                    if (v168 <= 0xFFFDFFFFFFFFFFFFLL)
                      LODWORD(v168) = 0x80000000;
                  }
                  else
                  {
                    LODWORD(v168) = 0x80000000;
                  }
                  LODWORD(v33) = v166 + v168;
                  if (__OFADD__((_DWORD)v166, (_DWORD)v168))
                    v33 = (((int)v166 + (int)v168) >> 31) ^ 0x80000000;
                  else
                    v33 = v33;
                  v169 = v166 + (int)v168;
                  if (v169 <= (uint64_t)0xFFFFFFFF7FFFFFFFLL)
                    v169 = 0xFFFFFFFF7FFFFFFFLL;
                  v34 = 2147483646;
                  if (v169 >= 2147483646)
                    LODWORD(v169) = 2147483646;
                  if (v165 == 3)
                    v170 = v169 + 1;
                  else
                    v170 = v33;
                }
                if (v171 <= v170)
                  v171 = v170;
                if (v31 > 2 || (v32 = **(_QWORD **)(v167 + 72), v32 < 0xFFFE000000000000))
                {
                  if ((v165 & 0xFFFFFFFE) == 2)
                  {
                    v32 = 0x7FFFFFFFLL;
                  }
                  else
                  {
                    v172 = v164 & 0xFFFFFFFFFFFFFFFELL;
                    if (*(unsigned __int16 *)(v172 + 18) <= 2u)
                    {
                      v173 = **(_QWORD **)(v172 + 72);
                      if (v173 <= 0xFFFDFFFFFFFFFFFFLL)
                        LODWORD(v173) = 0x7FFFFFFF;
                    }
                    else
                    {
                      LODWORD(v173) = 0x7FFFFFFF;
                    }
                    v174 = v166 + v173;
                    v31 = (((int)v166 + (int)v173) >> 31) ^ 0x80000000;
                    if (__OFADD__((_DWORD)v166, (_DWORD)v173))
                      v174 = (((int)v166 + (int)v173) >> 31) ^ 0x80000000;
                    v175 = v166 + (int)v173;
                    if (v175 <= -2147483647)
                      v175 = -2147483647;
                    if (v175 >= 0x80000000)
                      LODWORD(v175) = 0x80000000;
                    v176 = v175 - 1;
                    if (v165)
                      v32 = v174;
                    else
                      v32 = v176;
                  }
                }
              }
              else if (v171 <= (int)v32)
              {
                v171 = **(_QWORD **)(v167 + 72);
              }
              if ((int)v32 < v177)
                v177 = v32;
              v178 += 24;
            }
            while (v178 != v220);
          }
          else
          {
            v171 = 0x80000000;
            v177 = 0x7FFFFFFF;
          }
          if (__OFADD__(v171, (_DWORD)v206) || __OFADD__(v177, (_DWORD)v206))
            goto LABEL_183;
          if (v131 >= v130)
          {
            __break(0xC471u);
            JUMPOUT(0x19841661CLL);
          }
        }
        else
        {
          if (v134 != 70)
            goto LABEL_183;
          v221 = *(_QWORD *)(v133 + 24);
          if ((v221 & 0xFC000000000000) != 0x4000000000000)
            goto LABEL_183;
          v222 = v288;
          v224 = v222 ? (uint64_t)&v222[3 * *((unsigned int *)v222 - 1)] : 0;
          if ((uint64_t *)v224 == v223)
            goto LABEL_183;
          v225 = *((unsigned int *)v223 + 5);
          if ((_DWORD)v225)
          {
            v254 = (__n128 *)v223[1];
            v274 = 24 * v225;
            v277 = 0x7FFFFFFF;
            v276 = 0x80000000;
            do
            {
              v308 = *v254;
              v309 = v254[1].n128_i64[0];
              v256 = v276;
              if (v276 <= v255)
                v256 = v255;
              v276 = v256;
              v264 = v277;
              if (v257 < v277)
                v264 = v257;
              v277 = v264;
              v254 = (__n128 *)((char *)v254 + 24);
              v274 -= 24;
            }
            while (v274);
            v226 = v276;
            if ((v276 & 0x80000000) == 0)
            {
LABEL_334:
              JSC::DFG::Node::convertToIdentityOn(v133, *(_QWORD *)(v133 + 24) & 0xFF00FFFFFFFFFFFFLL);
              goto LABEL_335;
            }
          }
          else
          {
            v277 = 0x7FFFFFFF;
            v226 = 0x80000000;
          }
          v227 = *(_DWORD *)(v133 + 72);
          if (v277)
            v228 = 0;
          else
            v228 = v227 == 1;
          v229 = !v228;
          if (v277 < 0 || (v229 & 1) == 0)
          {
            *(_WORD *)(v133 + 18) = 65;
            if (v227 == 1 || v226 >= 0x80000001)
            {
              v122 = 1;
              *(_QWORD *)(v133 + 72) = 1;
              goto LABEL_183;
            }
            goto LABEL_335;
          }
          if (v226 < 0x80000001)
            goto LABEL_183;
        }
        v122 = 1;
        *(_QWORD *)(v133 + 72) = 1;
        goto LABEL_183;
      }
      if (v134 != 187)
      {
        if (v134 != 92 && v134 != 388 || *(_BYTE *)(v133 + 72) != 6)
          goto LABEL_183;
        v230 = *(_DWORD *)(v133 + 24) + 1;
        if (*((_DWORD *)v283 + 41) <= v230)
        {
          __break(0xC471u);
          JUMPOUT(0x198416614);
        }
        v231 = v288;
        v233 = v231 ? (uint64_t)&v231[3 * *((unsigned int *)v231 - 1)] : 0;
        if ((uint64_t *)v233 == v232)
          goto LABEL_183;
        v234 = *((unsigned int *)v232 + 5);
        if (!(_DWORD)v234)
          goto LABEL_183;
        v235 = (__n128 *)v232[1];
        v275 = 24 * v234;
        v278 = 0x80000000;
        do
        {
          v308 = *v235;
          v309 = v235[1].n128_i64[0];
          v237 = v278;
          if (v278 <= v236)
            v237 = v236;
          v278 = v237;
          v235 = (__n128 *)((char *)v235 + 24);
          v275 -= 24;
        }
        while (v275);
        if (v237 < 0)
          goto LABEL_183;
        JSC::DFG::Graph::convertToConstant((uint64_t)v283, v133, 0xAuLL, v238, v239, v240, v241, v242);
LABEL_335:
        v122 = 1;
        goto LABEL_183;
      }
      if (!v288)
        goto LABEL_183;
      v155 = *(_QWORD *)(v133 + 24);
      v156 = v155 & 0xFF00FFFFFFFFFFFFLL;
      v157 = *((_DWORD *)v288 - 2);
      v135 = v157 & v155;
      v136 = &v288[3 * (v157 & v155)];
      v137 = *v136;
      if (*v136 != v156)
      {
        v138 = 1;
        while (v137)
        {
          v135 = (v135 + v138) & v157;
          v136 = &v288[3 * v135];
          v137 = *v136;
          ++v138;
          if (*v136 == v156)
            goto LABEL_229;
        }
        v136 = &v288[3 * *((unsigned int *)v288 - 1)];
      }
LABEL_229:
      if (v136 == &v288[3 * *((unsigned int *)v288 - 1)])
        goto LABEL_183;
      v158 = *((_DWORD *)v136 + 5);
      if (!v158)
        goto LABEL_183;
      v149 = 0;
      v145 = 0;
      v150 = v136[1];
      v159 = v150 + 24 * v158;
      while (2)
      {
        v139 = *(_QWORD *)(v150 + 8);
        v140 = *(_DWORD *)(v150 + 16);
        v141 = *(int *)(v150 + 20);
        v142 = *(_QWORD *)v150 & 0xFFFFFFFFFFFFFFFELL;
        if (*(unsigned __int16 *)(v142 + 18) > 2u || (v143 = **(_QWORD **)(v142 + 72), v143 < 0xFFFE000000000000))
        {
          if ((v140 | 2) == 2)
          {
            LODWORD(v143) = 0x80000000;
            goto LABEL_196;
          }
          if (*(unsigned __int16 *)((v139 & 0xFFFFFFFFFFFFFFFELL) + 18) <= 2u)
          {
            v143 = **(_QWORD **)((v139 & 0xFFFFFFFFFFFFFFFELL) + 72);
            if (v143 <= 0xFFFDFFFFFFFFFFFFLL)
              LODWORD(v143) = 0x80000000;
          }
          else
          {
            LODWORD(v143) = 0x80000000;
          }
          if (v140 != 3)
          {
            v144 = __OFADD__((_DWORD)v141, (_DWORD)v143);
            LODWORD(v143) = v141 + v143;
            if (v144)
              LODWORD(v143) = ((int)v143 >> 31) ^ 0x80000000;
            goto LABEL_196;
          }
          v151 = v141 + (int)v143;
          if (v151 <= (uint64_t)0xFFFFFFFF7FFFFFFFLL)
            v151 = 0xFFFFFFFF7FFFFFFFLL;
          if (v151 >= 2147483646)
            LODWORD(v151) = 2147483646;
          v145 |= (int)v151 + 1 >= 0;
        }
        else
        {
LABEL_196:
          v145 |= (v143 & 0x80000000) == 0;
          v146 = ((int)v141 < 1) | v149;
          v147 = ((int)v141 < 0) | v149;
          if (v140 != 1)
            v147 = v149;
          if (v140)
            v148 = v147;
          else
            v148 = v146;
          if (v139 == (*(_QWORD *)(v133 + 32) & 0xFF00FFFFFFFFFFFFLL))
            v149 = v148;
        }
        v150 += 24;
        if (v150 != v159)
          continue;
        break;
      }
      if ((v145 & v149 & 1) != 0)
      {
        if (HIBYTE(word_1ECF4C630) && *(_WORD *)(v133 + 18) == 187)
        {
          JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)&v306, (const JSC::DFG::NodeOrigin *)v133);
          JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge,JSC::DFG::Edge>((uint64_t)&v292, v131, 0, 0xBAu, (uint64_t)&v306, *(_QWORD *)(v133 + 24), *(_QWORD *)(v133 + 32));
          JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v306, v265, v266, v267, v268, v269, v270, v271);
        }
        goto LABEL_334;
      }
LABEL_183:
      if (v131 >= *(unsigned int *)(v124 + 220))
      {
        __break(0xC471u);
        JUMPOUT(0x1984165B8);
      }
      v130 = *(unsigned int *)(v124 + 220);
      if (v131 < v130)
        continue;
      break;
    }
LABEL_215:
    v121 = (v121 + 1);
    v123 = *((unsigned int *)v119 + 15);
    if (v123 > v121)
    {
      while (!*(_QWORD *)(*((_QWORD *)v119 + 6) + 8 * v121))
      {
        if (v123 == ++v121)
        {
          LODWORD(v121) = *((_DWORD *)v119 + 15);
          break;
        }
      }
    }
    if ((_DWORD)v120 != (_DWORD)v121)
      continue;
    break;
  }
LABEL_283:
  v179 = v310;
  if (v310)
  {
    v310 = 0;
    v311 = 0;
    WTF::fastFree(v179, v30, v31, v32, v33, v34, v35, v36);
  }
  if ((v122 & 1) != 0)
  {
    if (qword_1ECF4C32A | byte_1ECF4C323
      || (BYTE1(qword_1ECF4C32A) ? (v204 = (*(_DWORD *)(*((_QWORD *)v283 + 3) + 16) & 0xFFFFFFFE) == 4) : (v204 = 0),
          !v204 ? (v205 = BYTE2(qword_1ECF4C32A) == 0) : (v205 = 0),
          !v205))
    {
      v313 = v284;
      WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v283 + 1088, "Phase ", (uint64_t)&v313, " changed the IR.\n", "\n");
    }
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v297);
  v187 = v293;
  if (v295 != (_BYTE *)v293 && v293)
  {
    v293 = 0;
    LODWORD(v294) = 0;
    WTF::fastFree((unint64_t)v187, v180, v181, v182, v183, v184, v185, v186);
  }
  v188 = v290;
  if (HIDWORD(v291))
  {
    v189 = (WTF *)((char *)v290 + 8 * HIDWORD(v291));
    do
    {
      v190 = *(_QWORD *)v188;
      if (*(_QWORD *)v188)
      {
        v191 = *(unsigned int *)(v190 - 4);
        if ((_DWORD)v191)
        {
          v192 = v190 + 8;
          do
          {
            if (*(_QWORD *)(v192 - 8) != 1)
            {
              v193 = *(_QWORD *)v192;
              if (*(_QWORD *)v192)
              {
                *(_QWORD *)v192 = 0;
                *(_DWORD *)(v192 + 8) = 0;
                WTF::fastFree(v193, v180, v181, v182, v183, v184, v185, v186);
              }
            }
            v192 += 24;
            --v191;
          }
          while (v191);
        }
        WTF::fastFree(v190 - 16, v180, v181, v182, v183, v184, v185, v186);
      }
      v188 = (WTF *)((char *)v188 + 8);
    }
    while (v188 != v189);
    v188 = v290;
  }
  if (v188)
  {
    v290 = 0;
    LODWORD(v291) = 0;
    WTF::fastFree((unint64_t)v188, v180, v181, v182, v183, v184, v185, v186);
  }
  if ((v289 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v289, v180, v181, v182, v183, v184, v185, v186);
  v194 = v288;
  if (v288)
  {
    v195 = *((unsigned int *)v288 - 1);
    if ((_DWORD)v195)
    {
      v196 = v288 + 1;
      do
      {
        if (*(v196 - 1) != 1)
        {
          v197 = *v196;
          if (*v196)
          {
            *v196 = 0;
            *((_DWORD *)v196 + 2) = 0;
            WTF::fastFree(v197, v180, v181, v182, v183, v184, v185, v186);
          }
        }
        v196 += 3;
        --v195;
      }
      while (v195);
    }
    WTF::fastFree((unint64_t)(v194 - 2), v180, v181, v182, v183, v184, v185, v186);
  }
  if (HIBYTE(qword_1ECF4C32A) && !v285)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v279, (uint64_t)v180, v181, v182, v183, v184, v185, v186);
  v198 = v286;
  v286 = 0;
  if (v198)
  {
    if (*(_DWORD *)v198 == 1)
      WTF::fastFree((unint64_t)v198, v180, v181, v182, v183, v184, v185, v186);
    else
      --*(_DWORD *)v198;
  }
  return v122 & 1;
}

uint64_t JSC::DFG::runPhase<JSC::DFG::InvalidationPointInjectionPhase>(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  char v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  _BYTE v33[128];

  v20 = -1;
  v21 = -1;
  v22 = 0;
  v23 = 256;
  v24 = a1;
  v25 = "invalidation point injection";
  v26 = 29;
  v27 = 0;
  v28 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v20);
  v29 = 2;
  v30 = a1;
  v31 = (WTF *)v33;
  v32 = 8;
  v16 = JSC::DFG::runAndLog<JSC::DFG::InvalidationPointInjectionPhase>((uint64_t)&v20, v2, v3, v4, v5, v6, v7, v8);
  v17 = v31;
  if (v33 != (_BYTE *)v31 && v31)
  {
    v31 = 0;
    LODWORD(v32) = 0;
    WTF::fastFree((unint64_t)v17, v9, v10, v11, v12, v13, v14, v15);
  }
  if ((v29 & 1) != 0 && (v29 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v29 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  if (HIBYTE(qword_1ECF4C32A) && !v27)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v20, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      WTF::fastFree((unint64_t)v18, v9, v10, v11, v12, v13, v14, v15);
    else
      --*(_DWORD *)v18;
  }
  return v16;
}

uint64_t JSC::DFG::JITData::JITData(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  __int16 v10;
  _DWORD *v11;
  unsigned int *v12;
  _DWORD *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  _DWORD *v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  _QWORD *v34;

  *(_DWORD *)a1 = (_DWORD)a2;
  *(_DWORD *)(a1 + 4) = a3;
  if ((_DWORD)a2)
  {
    v9 = a1 - 136 * a2;
    do
    {
      *(_QWORD *)v9 = 2;
      *(_DWORD *)(v9 + 96) = 0;
      *(_OWORD *)(v9 + 12) = 0uLL;
      *(_OWORD *)(v9 + 28) = 0uLL;
      *(_DWORD *)(v9 + 44) = 0;
      *(_QWORD *)(v9 + 64) = 0;
      *(_QWORD *)(v9 + 72) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 104) = 0;
      *(_QWORD *)(v9 + 112) = -1;
      *(_WORD *)(v9 + 120) = -1;
      *(_DWORD *)(v9 + 122) = 0x10000;
      *(_BYTE *)(v9 + 126) = 0;
      *(_BYTE *)(v9 + 127) = BYTE12(xmmword_1ECF4C260);
      v10 = *(_WORD *)(v9 + 129) & 0xFC00;
      *(_BYTE *)(v9 + 128) = 0;
      *(_WORD *)(v9 + 129) = v10;
      v9 += 136;
    }
    while (v9 != a1);
  }
  v11 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v12 = *(unsigned int **)(a4 + 304);
  if (v12)
  {
    v34 = a5;
    v23 = a4;
    v24 = *v12;
    if ((_DWORD)v24)
    {
      v11 = (_DWORD *)WTF::fastMalloc((WTF *)((96 * v24) | 8));
      v25 = 2;
      *v11 = v24;
      do
      {
        v26 = &v11[v25];
        *(_QWORD *)v26 = 0;
        *((_QWORD *)v26 + 1) = 0;
        *((_BYTE *)v26 + 16) = 0;
        *(_WORD *)((char *)v26 + 17) = *(_WORD *)((_BYTE *)&v11[v25 + 4] + 1) & 0xF000 | 0x100;
        *(_OWORD *)((char *)v26 + 19) = 0uLL;
        *(_OWORD *)((char *)v26 + 35) = 0uLL;
        *(_OWORD *)((char *)v26 + 51) = 0uLL;
        *((_QWORD *)v26 + 8) = 0;
        *((_QWORD *)v26 + 9) = 2;
        *((_QWORD *)v26 + 10) = 0;
        *((_BYTE *)v26 + 88) = 0;
        v25 += 24;
      }
      while (v26 + 24 != &v11[24 * v24 + 2]);
    }
    else
    {
      v11 = 0;
    }
    a4 = v23;
    a5 = v34;
  }
  v13 = 0;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = 0;
  v14 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 40) = v14;
  *(_BYTE *)(a1 + 48) = 0;
  v15 = *(unsigned int **)(a4 + 336);
  if (v15)
  {
    v29 = *v15;
    v28 = v15 + 2;
    v27 = v29;
    if (!v29)
      goto LABEL_27;
    v30 = 0;
    do
    {
      if (*((unsigned __int8 *)v28 + 6) - 5 < 0xC)
        ++v30;
      v28 += 2;
      --v27;
    }
    while (v27);
    if (v30)
    {
      v31 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v30 + 8));
      v13 = v31;
      *v31 = v30;
      v32 = 2;
      do
      {
        v33 = &v31[v32];
        *(_QWORD *)v33 = 0;
        *((_QWORD *)v33 + 1) = 0;
        *((_BYTE *)v33 + 16) = 2;
        *((_BYTE *)v33 + 21) = 0;
        *(_DWORD *)((char *)v33 + 17) = 0;
        v32 += 6;
      }
      while (v33 + 6 != &v31[6 * v30 + 2]);
    }
    else
    {
LABEL_27:
      v13 = 0;
    }
  }
  v16 = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v13;
  if (v16)
  {
    v17 = (uint64_t *)(v16 + 2);
    v18 = *v16;
    if ((_DWORD)v18)
    {
      v19 = 24 * v18;
      do
      {
        v20 = (uint64_t *)v17[1];
        if (v20)
        {
          v21 = *v17;
          *v20 = *v17;
          *(_QWORD *)(v21 + 8) = v20;
          *v17 = 0;
          v17[1] = 0;
        }
        v17 += 3;
        v19 -= 24;
      }
      while (v19);
    }
    WTF::fastFree((unint64_t)v16, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  }
  return a1;
}

uint64_t JSC::DFG::JITData::tryInitialize(JSC::DFG::JITData *this, JSC::VM *a2, JSC::CodeBlock *a3, const JSC::DFG::JITCode *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  char v21;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  char *v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int *v53;

  *((_QWORD *)this + 1) = *((_QWORD *)a3 + 1);
  v8 = *((_QWORD *)a3 + 15);
  if (!v8)
    goto LABEL_32;
  v13 = *(unsigned __int8 *)(v8 + 12);
  if (v13 == 3)
  {
    v14 = (((*(_DWORD *)(*((_QWORD *)a3 + 7) + 20) & 0x7FFFFFFF) + 3) & 0xFFFFFFFE) - 2;
    goto LABEL_11;
  }
  if ((v13 - 4) >= 2)
  {
    if (v13 == 2)
    {
      v14 = JSC::LLInt::frameRegisterCountFor(a3, a2);
      goto LABEL_11;
    }
LABEL_32:
    __break(0xC471u);
    JUMPOUT(0x198416BD4);
  }
  v15 = (unsigned int *)(v8 + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  v14 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) + 200);
  do
  {
    v17 = __ldaxr(v15);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v15));
  if (!v18)
  {
    atomic_store(1u, (unsigned int *)(v8 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  }
LABEL_11:
  *((_QWORD *)this + 2) = 8 * -v14;
  v19 = (unsigned int *)*((_QWORD *)a4 + 37);
  if (v19)
  {
    v23 = 0;
    v24 = (char *)this - 136;
    v25 = 8;
    do
    {
      if (v23 >= *v19)
        break;
      if (v23 >= *(unsigned int *)this)
      {
LABEL_81:
        __break(1u);
        JUMPOUT(0x198417058);
      }
      ++v23;
      v26 = v24 - 136;
      v27 = v25 + 64;
      JSC::StructureStubInfo::initializeFromDFGUnlinkedStructureStubInfo((uint64_t)v24, a3, (uint64_t)v19 + v25, (uint64_t)a4, a5, a6, a7, a8);
      v19 = (unsigned int *)*((_QWORD *)a4 + 37);
      v25 = v27;
      v24 = v26;
    }
    while (v19);
  }
  v20 = (unsigned int *)*((_QWORD *)a4 + 42);
  if (v20)
  {
    v28 = 0;
    v29 = 0;
    v30 = (char *)this + 56;
    v21 = 1;
    while (1)
    {
      if (v28 >= *v20)
        return v21 & 1;
      v31 = *(_QWORD *)&v20[2 * v28 + 2];
      switch(BYTE6(v31))
      {
        case 0:
        case 2:
        case 3:
          if (v28 >= *((unsigned int *)this + 1))
            goto LABEL_81;
          v33 = v31 & 0xFF00FFFFFFFFFFFFLL;
          goto LABEL_29;
        case 1:
          v34 = (_DWORD *)*((_QWORD *)a4 + 38);
          if (*v34 <= v31)
          {
            __break(0xC471u);
            JUMPOUT(0x198416E94);
          }
          v35 = (_DWORD *)*((_QWORD *)this + 3);
          if (*v35 <= v31)
          {
            __break(0xC471u);
            JUMPOUT(0x198416EB4);
          }
          v36 = (uint64_t)&v35[24 * v31 + 2];
          JSC::OptimizingCallLinkInfo::initializeFromDFGUnlinkedCallLinkInfo(v36, a2, (uint64_t)&v34[4 * v31 + 2], (uint64_t)a3, a5, a6, a7, a8);
          if (v28 >= *((unsigned int *)this + 1))
            goto LABEL_81;
          *(_QWORD *)&v30[8 * v28] = v36;
          goto LABEL_27;
        case 4:
          if (v28 >= *((unsigned int *)this + 1))
            goto LABEL_81;
          v33 = *((_QWORD *)a3 + 1);
LABEL_29:
          *(_QWORD *)&v30[8 * v28] = v33;
          goto LABEL_27;
        case 5:
          v37 = (unsigned int *)*((_QWORD *)this + 4);
          if (*v37 <= v29)
          {
            __break(0xC471u);
            JUMPOUT(0x198416ED4);
          }
          v38 = v29 + 1;
          v39 = (uint64_t)&v37[6 * v29 + 2];
          v40 = *(_QWORD *)(*((_QWORD *)this + 1) + 2048);
          goto LABEL_46;
        case 6:
          v41 = (unsigned int *)*((_QWORD *)this + 4);
          if (*v41 <= v29)
          {
            __break(0xC471u);
            JUMPOUT(0x198416EF4);
          }
          v38 = v29 + 1;
          v39 = (uint64_t)&v41[6 * v29 + 2];
          v40 = *(_QWORD *)(*((_QWORD *)this + 1) + 2040);
          goto LABEL_46;
        case 7:
          v42 = (unsigned int *)*((_QWORD *)this + 4);
          if (*v42 <= v29)
          {
            __break(0xC471u);
            JUMPOUT(0x198416F14);
          }
          v38 = v29 + 1;
          v39 = (uint64_t)&v42[6 * v29 + 2];
          v40 = *(_QWORD *)(*((_QWORD *)this + 1) + 2080);
LABEL_46:
          v32 = JSC::DFG::attemptToWatch<JSC::WatchpointSet>((uint64_t)a3, v40, v39, (uint64_t)a4, a5, a6, a7, a8);
          goto LABEL_26;
        case 8:
          v43 = (unsigned int *)*((_QWORD *)this + 4);
          if (*v43 <= v29)
          {
            __break(0xC471u);
            JUMPOUT(0x198416F34);
          }
          v38 = v29 + 1;
          v44 = (uint64_t)&v43[6 * v29 + 2];
          v45 = (uint64_t *)(*((_QWORD *)this + 1) + 2216);
          goto LABEL_25;
        case 9:
          v46 = (unsigned int *)*((_QWORD *)this + 4);
          if (*v46 <= v29)
          {
            __break(0xC471u);
            JUMPOUT(0x198416F54);
          }
          if (!BYTE1(dword_1ECF4C240))
          {
            __break(0xC471u);
            JUMPOUT(0x198416F74);
          }
          v38 = v29 + 1;
          v44 = (uint64_t)&v46[6 * v29 + 2];
          v45 = (uint64_t *)(*((_QWORD *)this + 1) + 2328);
          goto LABEL_25;
        case 0xA:
          v47 = (unsigned int *)*((_QWORD *)this + 4);
          if (*v47 <= v29)
          {
            __break(0xC471u);
            JUMPOUT(0x198416F94);
          }
          v38 = v29 + 1;
          v44 = (uint64_t)&v47[6 * v29 + 2];
          v45 = (uint64_t *)(*((_QWORD *)this + 1) + 2336);
          goto LABEL_25;
        case 0xB:
          v48 = (unsigned int *)*((_QWORD *)this + 4);
          if (*v48 <= v29)
          {
            __break(0xC471u);
            JUMPOUT(0x198416FB4);
          }
          v38 = v29 + 1;
          v44 = (uint64_t)&v48[6 * v29 + 2];
          v45 = (uint64_t *)(*((_QWORD *)this + 1) + 2248);
          goto LABEL_25;
        case 0xC:
          v49 = (unsigned int *)*((_QWORD *)this + 4);
          if (*v49 <= v29)
          {
            __break(0xC471u);
            JUMPOUT(0x198416FD4);
          }
          v38 = v29 + 1;
          v44 = (uint64_t)&v49[6 * v29 + 2];
          v45 = (uint64_t *)(*((_QWORD *)this + 1) + 2256);
          goto LABEL_25;
        case 0xD:
          v50 = (unsigned int *)*((_QWORD *)this + 4);
          if (*v50 <= v29)
          {
            __break(0xC471u);
            JUMPOUT(0x198416FF4);
          }
          v38 = v29 + 1;
          v44 = (uint64_t)&v50[6 * v29 + 2];
          v45 = (uint64_t *)(*((_QWORD *)this + 1) + 2280);
          goto LABEL_25;
        case 0xE:
          v51 = (unsigned int *)*((_QWORD *)this + 4);
          if (*v51 <= v29)
          {
            __break(0xC471u);
            JUMPOUT(0x198417014);
          }
          v38 = v29 + 1;
          v44 = (uint64_t)&v51[6 * v29 + 2];
          v45 = (uint64_t *)(*((_QWORD *)this + 1) + 2304);
          goto LABEL_25;
        case 0xF:
          v52 = (unsigned int *)*((_QWORD *)this + 4);
          if (*v52 <= v29)
          {
            __break(0xC471u);
            JUMPOUT(0x198417034);
          }
          v38 = v29 + 1;
          v44 = (uint64_t)&v52[6 * v29 + 2];
          v45 = (uint64_t *)(*((_QWORD *)this + 1) + 2320);
          goto LABEL_25;
        case 0x10:
          v53 = (unsigned int *)*((_QWORD *)this + 4);
          if (*v53 <= v29)
          {
            __break(0xC471u);
            goto LABEL_81;
          }
          v38 = v29 + 1;
          v44 = (uint64_t)&v53[6 * v29 + 2];
          v45 = (uint64_t *)(*((_QWORD *)this + 1) + 2312);
LABEL_25:
          v32 = JSC::DFG::attemptToWatch<JSC::InlineWatchpointSet>((uint64_t)a3, v45, v44, (uint64_t)a4, a5, a6, a7, a8);
LABEL_26:
          v21 &= v32;
          v29 = v38;
LABEL_27:
          ++v28;
          v20 = (unsigned int *)*((_QWORD *)a4 + 42);
          if (!v20)
            return v21 & 1;
          break;
        default:
          goto LABEL_27;
      }
    }
  }
  v21 = 1;
  return v21 & 1;
}

BOOL JSC::DFG::attemptToWatch<JSC::WatchpointSet>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned __int8 *v12;
  int v14;
  uint64_t *v15;
  uint64_t v16;

  v8 = *(unsigned __int8 *)(a2 + 4);
  if (v8 != 2)
  {
    v12 = (unsigned __int8 *)(a1 + 16);
    if (__ldaxr((unsigned __int8 *)(a1 + 16)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_6;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 16);
LABEL_6:
    *(_DWORD *)(a3 + 17) = a1;
    *(_BYTE *)(a3 + 21) = BYTE4(a1);
    v14 = __ldxr(v12);
    if (v14 == 1)
    {
      if (!__stlxr(0, v12))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, a3, a4, a5, a6, a7, a8);
LABEL_11:
    v16 = *(_QWORD *)(a2 + 8);
    v15 = (uint64_t *)(a2 + 8);
    *(_QWORD *)a3 = v16;
    *(_QWORD *)(a3 + 8) = v15;
    *v15 = a3;
    *(_QWORD *)(v16 + 8) = a3;
    *((_WORD *)v15 - 2) = 257;
  }
  return v8 != 2;
}

BOOL JSC::DFG::attemptToWatch<JSC::InlineWatchpointSet>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unsigned int v12;
  unsigned __int8 *v13;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v20;

  v11 = *a2;
  if ((*a2 & 1) != 0)
    v12 = (v11 >> 1) & 3;
  else
    v12 = *(unsigned __int8 *)(v11 + 4);
  if (v12 == 2)
    return v12 != 2;
  v13 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_9;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 16);
LABEL_9:
  *(_DWORD *)(a3 + 17) = a1;
  *(_BYTE *)(a3 + 21) = BYTE4(a1);
  v15 = __ldxr(v13);
  if (v15 == 1)
  {
    if (!__stlxr(0, v13))
      goto LABEL_14;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 16), 0, a3, a4, a5, a6, a7, a8);
LABEL_14:
  v16 = *a2;
  if ((*a2 & 1) != 0)
  {
    v20 = (v16 >> 1) & 3;
    v16 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v16 = 1;
    *(_BYTE *)(v16 + 4) = v20;
    *(_BYTE *)(v16 + 5) = 0;
    *(_QWORD *)(v16 + 8) = v16 + 8;
    *(_QWORD *)(v16 + 16) = v16 + 8;
    __dmb(0xAu);
    *a2 = v16;
  }
  v18 = *(_QWORD *)(v16 + 8);
  v17 = (uint64_t *)(v16 + 8);
  *(_QWORD *)a3 = v18;
  *(_QWORD *)(a3 + 8) = v17;
  *v17 = a3;
  *(_QWORD *)(v18 + 8) = a3;
  *((_WORD *)v17 - 2) = 257;
  return v12 != 2;
}

void JSC::DFG::JITCode::~JITCode(JSC::DFG::JITCode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unint64_t *v28;
  unsigned int *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint8x8_t v40;
  unsigned int *v41;
  JSC::DFG::OSREntryData *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v9 = *((_QWORD *)this + 47);
  if (v9)
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 46);
  if (v10)
    WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
  v11 = *((_QWORD *)this + 45);
  if (v11)
  {
    v61 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v61)
    {
      v62 = (unint64_t *)(v11 + 8);
      do
      {
        if (*((_DWORD *)v62 - 2) != -2)
        {
          v63 = *v62;
          *v62 = 0;
          if (v63)
            WTF::fastFree(v63, a2, a3, a4, a5, a6, a7, a8);
        }
        v62 += 2;
        --v61;
      }
      while (v61);
    }
    WTF::fastFree(v11 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v12)
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  v13 = *((_QWORD *)this + 40);
  if (v13)
  {
    *((_QWORD *)this + 40) = 0;
    *((_DWORD *)this + 82) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v14)
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  v15 = (unsigned int *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v15)
  {
    v17 = (uint64_t *)(v15 + 2);
    v16 = *v15;
    if ((_DWORD)v16)
    {
      v18 = 16 * v16;
      do
      {
        v19 = *v17;
        if ((*v17 & 1) != 0 && (v19 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v19 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        v17 += 2;
        v18 -= 16;
      }
      while (v18);
    }
    WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v20 = (unsigned int *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v20)
  {
    v21 = *v20;
    if ((_DWORD)v21)
    {
      v22 = v21 << 6;
      v23 = (uint64_t *)(v20 + 10);
      do
      {
        v25 = *v23;
        v23 += 8;
        v24 = v25;
        if ((v25 & 1) != 0 && (v24 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v24 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        v22 -= 64;
      }
      while (v22);
    }
    WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
  }
  v26 = (unsigned int *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v26)
  {
    v28 = (unint64_t *)(v26 + 2);
    v27 = *v26;
    if ((_DWORD)v27)
    {
      v57 = 8 * v27;
      do
      {
        v58 = *v28;
        *v28 = 0;
        if (v58)
          WTF::fastFree(v58, a2, a3, a4, a5, a6, a7, a8);
        ++v28;
        v57 -= 8;
      }
      while (v57);
    }
    WTF::fastFree((unint64_t)v26, a2, a3, a4, a5, a6, a7, a8);
  }
  v29 = (unsigned int *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v29)
  {
    v31 = (unint64_t *)(v29 + 2);
    v30 = *v29;
    if ((_DWORD)v30)
    {
      v59 = 16 * v30;
      do
      {
        v60 = *v31;
        *v31 = 0;
        if (v60)
          WTF::fastFree(v60, a2, a3, a4, a5, a6, a7, a8);
        v31 += 2;
        v59 -= 16;
      }
      while (v59);
    }
    WTF::fastFree((unint64_t)v29, a2, a3, a4, a5, a6, a7, a8);
  }
  v32 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v32)
    WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
  std::unique_ptr<WTF::EmbeddedFixedVector<JSC::DFG::OSRExit>>::reset[abi:sn180100]((unsigned int **)this + 33, 0, a3, a4, a5, a6, a7, a8);
  v41 = (unsigned int *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v41)
  {
    v42 = (JSC::DFG::OSREntryData *)(v41 + 2);
    v43 = *v41;
    if ((_DWORD)v43)
    {
      v44 = v43 << 6;
      do
      {
        JSC::DFG::OSREntryData::~OSREntryData(v42, v33, v34, v35, v36, v37, v38, v39);
        v42 = (JSC::DFG::OSREntryData *)(v45 + 64);
        v44 -= 64;
      }
      while (v44);
    }
    WTF::fastFree((unint64_t)v41, v33, v34, v35, v36, v37, v38, v39);
  }
  JSC::DFG::CommonData::~CommonData((JSC::DFG::JITCode *)((char *)this + 40), v33, v34, v35, v36, v37, v38, v39, v40);
  *(_QWORD *)this = off_1E35959D8;
  if (!HIBYTE(word_1ECF4C286))
  {
    v53 = *((unsigned __int8 *)this + 12);
    if (v53 == 3)
    {
      if (!(_BYTE)dword_1ECF4C28A)
        goto LABEL_41;
    }
    else if ((v53 & 0xFE) != 4 || !BYTE1(dword_1ECF4C28A))
    {
      goto LABEL_41;
    }
  }
  if (*((_QWORD *)this + 3))
  {
    v72 = *((_QWORD *)this + 3);
    WTF::dataLog<char [24],WTF::PointerDump<JSC::ExecutableMemoryHandle>,char [2]>("Destroying JIT code at ", &v72, "\n");
  }
LABEL_41:
  v54 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v54)
  {
    do
    {
      v55 = __ldaxr(v54);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, v54));
    if (!v56)
    {
      atomic_store(1u, v54);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v54, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
  }
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::DFG::JITCode::~JITCode(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

unsigned int **WTF::FixedVector<JSC::DFG::UnlinkedCallLinkInfo>::~FixedVector(unsigned int **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v11 = (uint64_t *)(v9 + 2);
    v10 = *v9;
    if ((_DWORD)v10)
    {
      v12 = 16 * v10;
      do
      {
        v13 = *v11;
        if ((*v11 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        v11 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

unsigned int **WTF::FixedVector<JSC::DFG::UnlinkedStructureStubInfo>::~FixedVector(unsigned int **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = *v9;
    if ((_DWORD)v10)
    {
      v11 = v10 << 6;
      v12 = (uint64_t *)(v9 + 10);
      do
      {
        v14 = *v12;
        v12 += 8;
        v13 = v14;
        if ((v14 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        v11 -= 64;
      }
      while (v11);
    }
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t JSC::DFG::JITCode::dfgCommon(JSC::DFG::JITCode *this)
{
  return (uint64_t)this + 40;
}

{
  return (uint64_t)this + 40;
}

void JSC::DFG::JITCode::shrinkToFit(JSC::DFG::JITCode *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 10);
  WTF::Vector<JSC::CodeOrigin,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v9 + 8, *(unsigned int *)(v9 + 20), a3, a4, a5, a6, a7, a8);
  v17 = *(unsigned int *)(v9 + 36);
  if (*(_DWORD *)(v9 + 32) > v17)
  {
    v18 = *(_QWORD *)(v9 + 24);
    if ((_DWORD)v17)
    {
      *(_DWORD *)(v9 + 32) = v17;
      *(_QWORD *)(v9 + 24) = WTF::fastRealloc(v18, 4 * v17, v11, v12, v13, v14, v15, v16);
    }
    else if (v18)
    {
      *(_QWORD *)(v9 + 24) = 0;
      *(_DWORD *)(v9 + 32) = 0;
      WTF::fastFree(v18, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  JSC::DFG::MinifiedGraph::prepareAndShrink((JSC::DFG::JITCode *)((char *)this + 320));
}

void JSC::DFG::JITCode::reconstruct(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4, unint64_t a5, uint64_t a6, int8x16_t a7, uint64_t a8, unint64_t a9)
{
  unsigned int *v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v10 = a3;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v12 = *a4;
  if ((*a4 & 1) == 0)
    goto LABEL_2;
  v34 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 2) != 0
    || ((v35 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v35 != 0x3FFFFFFF)
      ? (v36 = (_DWORD)v35 == -1)
      : (v36 = 1),
        v36))
  {
    v37 = 2;
  }
  else if (v35 >> 28)
  {
    v58 = a1;
    v46 = a5;
    v48 = WTF::fastMalloc((WTF *)0x10);
    v10 = a3;
    a5 = v46;
    v49 = v48;
    a1 = v58;
    *(_QWORD *)v49 = v34;
    *(_DWORD *)(v49 + 8) = v35;
    v37 = 1;
    v34 = v49;
  }
  else
  {
    v37 = v34;
    v34 = v35 << 36;
  }
  v12 = v34 | v37;
  if (((v34 | v37) & 1) != 0)
  {
    v38 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v39 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v39 != 0x3FFFFFFF)
        ? (v40 = (_DWORD)v39 == -1)
        : (v40 = 1),
          v40))
    {
      v41 = 2;
    }
    else if (v39 >> 28)
    {
      v59 = a1;
      v56 = a5;
      v50 = v10;
      v51 = WTF::fastMalloc((WTF *)0x10);
      v10 = v50;
      a5 = v56;
      v52 = v51;
      a1 = v59;
      *(_QWORD *)v52 = v38;
      *(_DWORD *)(v52 + 8) = v39;
      v41 = 1;
      v38 = v52;
    }
    else
    {
      v41 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v38 = v39 << 36;
    }
    v14 = v38 | v41;
    if ((v14 & 1) != 0)
    {
      v42 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      if ((v14 & 2) != 0
        || ((v43 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v43 != 0x3FFFFFFF)
          ? (v44 = (_DWORD)v43 == -1)
          : (v44 = 1),
            v44))
      {
        v45 = 2;
      }
      else if (v43 >> 28)
      {
        v60 = a1;
        v57 = a5;
        v53 = v10;
        v54 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
        v55 = WTF::fastMalloc((WTF *)0x10);
        v10 = v53;
        a5 = v57;
        v42 = v55;
        a1 = v60;
        *(_QWORD *)v42 = v54;
        *(_DWORD *)(v42 + 8) = v43;
        v45 = 1;
      }
      else
      {
        v45 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
        v42 = v43 << 36;
      }
      v13 = 0;
      v15 = 0;
      v16 = v42 | v45;
    }
    else
    {
      v15 = 0;
      v13 = 1;
      v16 = v14;
    }
  }
  else
  {
LABEL_2:
    v13 = 1;
    v14 = v12;
    v15 = 1;
    v16 = v12;
  }
  v64 = v16;
  JSC::DFG::VariableEventStream::reconstruct<(JSC::DFG::VariableEventStream::ReconstructionStyle)0>((_DWORD **)(a1 + 312), v10, &v64, a1 + 320, a5, (uint64_t)&v61, 0, a9, a7);
  if ((v64 & 1) != 0 && (v64 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v64 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  if ((v13 & 1) == 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  if ((v15 & 1) == 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  v24 = HIDWORD(v62);
  v25 = 16 * HIDWORD(v62);
  if (HIDWORD(v62))
  {
    if (HIDWORD(v62) >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1984179B8);
    }
    v26 = WTF::fastMalloc((WTF *)(16 * HIDWORD(v62)));
    v27 = (_BYTE *)v26;
    do
    {
      *v27 = 0;
      v27[8] = 0;
      v27 += 16;
    }
    while (v27 != (_BYTE *)(v26 + 16 * v24));
  }
  else
  {
    v26 = 0;
  }
  v28 = v63;
  v29 = *(_QWORD *)a6;
  if (*(_QWORD *)a6)
  {
    *(_QWORD *)a6 = 0;
    *(_DWORD *)(a6 + 8) = 0;
    WTF::fastFree(v29, v17, v18, v19, v20, v21, v22, v23);
  }
  *(_QWORD *)a6 = v26;
  *(_DWORD *)(a6 + 8) = v24;
  *(_DWORD *)(a6 + 12) = v24;
  *(_QWORD *)(a6 + 16) = v28;
  if ((_DWORD)v24)
  {
    v30 = 9 * v24 - 9;
    do
    {
      v31 = JSC::ValueRecovery::recover((uint64_t)v61 + v30, a2);
      v32 = *(_QWORD *)a6 + v25;
      if (!*(_BYTE *)(v32 - 8))
        *(_BYTE *)(v32 - 8) = 1;
      *(_QWORD *)(v32 - 16) = v31;
      v30 -= 9;
      v25 -= 16;
    }
    while (v30 != -9);
  }
  v33 = v61;
  if (v61)
  {
    v61 = 0;
    LODWORD(v62) = 0;
    WTF::fastFree((unint64_t)v33, v17, v18, v19, v20, v21, v22, v23);
  }
}

unsigned int *JSC::DFG::JITCode::liveRegistersToPreserveAtExceptionHandlingCallSite(WTF *a1, unsigned int *a2, int a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  WTF *v50;
  WTF *v51;
  WTF *v52;
  WTF *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v9 = (unsigned int *)*((_QWORD *)a1 + 33);
  if (v9)
    v10 = (uint64_t)(v9 + 2);
  else
    v10 = 0;
  if (v9)
    v11 = (uint64_t)&v9[18 * *v9 + 2];
  else
    v11 = 0;
  while (1)
  {
    if (v10 == v11)
      return 0;
    if ((*(_BYTE *)(v10 + 4) & 0xFE) == 0x1A && *(_DWORD *)(v10 + 24) == a3)
      break;
    v10 += 72;
  }
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v13 = *(_QWORD *)(v10 + 8);
  if ((v13 & 1) != 0)
  {
LABEL_31:
    v27 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v28 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v28 != 0x3FFFFFFF)
        ? (v29 = (_DWORD)v28 == -1)
        : (v29 = 1),
          v29))
    {
      v30 = 2;
    }
    else if (v28 >> 28)
    {
      v50 = a1;
      v39 = a2;
      v40 = WTF::fastMalloc((WTF *)0x10);
      a2 = v39;
      v41 = v40;
      a1 = v50;
      *(_QWORD *)v41 = v27;
      *(_DWORD *)(v41 + 8) = v28;
      v30 = 1;
      v27 = v41;
    }
    else
    {
      v30 = v27;
      v27 = v28 << 36;
    }
    v13 = v27 | v30;
    v14 = *(unsigned int *)(v10 + 68);
    if (((v27 | v30) & 1) != 0)
    {
      v31 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      if ((v13 & 2) != 0
        || ((v32 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v32 != 0x3FFFFFFF)
          ? (v33 = (_DWORD)v32 == -1)
          : (v33 = 1),
            v33))
      {
        v34 = 2;
      }
      else if (v32 >> 28)
      {
        v48 = a2;
        v51 = a1;
        v42 = v14;
        v43 = WTF::fastMalloc((WTF *)0x10);
        v14 = v42;
        v44 = v43;
        a2 = v48;
        a1 = v51;
        *(_QWORD *)v44 = v31;
        *(_DWORD *)(v44 + 8) = v32;
        v34 = 1;
        v31 = v44;
      }
      else
      {
        v34 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
        v31 = v32 << 36;
      }
      v10 = v31 | v34;
      if ((v10 & 1) != 0)
      {
        v35 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
        if ((v10 & 2) != 0
          || ((v36 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v36 != 0x3FFFFFFF)
            ? (v37 = (_DWORD)v36 == -1)
            : (v37 = 1),
              v37))
        {
          v38 = 2;
        }
        else if (v36 >> 28)
        {
          v49 = a2;
          v52 = a1;
          v45 = v14;
          v46 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
          v47 = WTF::fastMalloc((WTF *)0x10);
          v14 = v45;
          v35 = v47;
          a2 = v49;
          a1 = v52;
          *(_QWORD *)v35 = v46;
          *(_DWORD *)(v35 + 8) = v36;
          v38 = 1;
        }
        else
        {
          v38 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
          v35 = v36 << 36;
        }
        v15 = 0;
        v16 = 0;
        v17 = v35 | v38;
      }
      else
      {
        v16 = 0;
        v15 = 1;
        v17 = v10;
      }
      goto LABEL_15;
    }
  }
  else
  {
    v14 = *(unsigned int *)(v10 + 68);
  }
  v15 = 1;
  v10 = v13;
  v16 = 1;
  v17 = v13;
LABEL_15:
  v56 = v17;
  JSC::DFG::VariableEventStream::reconstruct<(JSC::DFG::VariableEventStream::ReconstructionStyle)0>((_DWORD **)a1 + 39, a2, &v56, (uint64_t)a1 + 320, v14, (uint64_t)&v53, 0, a9, a4);
  if ((v56 & 1) != 0 && (v56 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v56 & 0xFFFFFFFF8, a2, v18, v19, v20, v21, v22, a9);
  if ((v15 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, v18, v19, v20, v21, v22, a9);
  if ((v16 & 1) == 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, v18, v19, v20, v21, v22, a9);
  v23 = HIDWORD(v54);
  a1 = v53;
  v13 = 0;
  if (HIDWORD(v54))
  {
    v24 = (uint64_t *)((char *)v53 + 1);
    while (1)
    {
      v25 = *((unsigned __int8 *)v24 - 1);
      if (v25 <= 7)
      {
        if (v25 > 5)
        {
          v26 = *v24 + 32;
          if ((v26 & 0x40) != 0)
          {
LABEL_30:
            __break(1u);
            goto LABEL_31;
          }
        }
        else
        {
          v26 = *v24;
          if ((*v24 & 0x40) != 0)
            goto LABEL_30;
        }
        v13 |= 1 << v26;
      }
      v24 = (uint64_t *)((char *)v24 + 9);
      if (!--v23)
        goto LABEL_27;
    }
  }
  a2 = 0;
  if (v53)
  {
LABEL_27:
    v53 = 0;
    LODWORD(v54) = 0;
    WTF::fastFree((unint64_t)a1, a2, v18, v19, v20, v21, v22, a9);
    return (unsigned int *)v13;
  }
  return a2;
}

uint64_t JSC::DFG::JITCode::optimizeAfterWarmUp(JSC::DFG::JITCode *this, JSC::CodeBlock *a2)
{
  JSC::CodeBlock *v4;
  double v5;
  int v6;

  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<JSC::CodeBlock,char [30],char [2]>((uint64_t)a2, ": FTL-optimizing after warm-up.", "\n");
  v4 = (JSC::CodeBlock *)JSC::CodeBlock::baselineVersion((uint64_t)a2);
  v6 = JSC::CodeBlock::adjustedCounterValue(v4, SHIDWORD(xmmword_1ECF4C4F4), v5);
  return JSC::ExecutionCounter<(JSC::CountingVariant)1>::setNewThreshold((uint64_t)this + 348, v6, (uint64_t)v4);
}

uint64_t JSC::DFG::JITCode::optimizeSoon(JSC::DFG::JITCode *this, JSC::CodeBlock *a2, double a3)
{
  uint64_t v5;
  int v6;
  JSC::CodeBlock *v7;
  double v8;
  double v9;
  int v10;
  double v11;
  char **v13;
  uint64_t v14;
  JSC::CodeBlock **v15;
  JSC::CodeBlock **v16;
  JSC::CodeBlock *v17;
  uint64_t v18;
  int v19;
  int v21;
  int v22;
  double v23;
  double v24;

  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<JSC::CodeBlock,char [30],char [2]>((uint64_t)a2, ": FTL-optimizing soon.", "\n");
  v5 = *((_QWORD *)a2 + 15);
  if (v5)
  {
    LODWORD(v5) = *(unsigned __int8 *)(v5 + 12);
    v6 = v5 & 0xFE;
    v7 = a2;
    if (v6 == 2)
      goto LABEL_5;
  }
  else
  {
    v6 = 0;
  }
  v13 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C));
  if (v13 == &JSC::FunctionCodeBlock::s_info)
  {
    v14 = *((_QWORD *)a2 + 8);
    v15 = (JSC::CodeBlock **)(v14 + 96);
    v16 = (JSC::CodeBlock **)(v14 + 104);
    if (*(int *)(*((_QWORD *)a2 + 7) + 20) >= 0)
      v16 = v15;
  }
  else
  {
    if (v13 != &JSC::EvalCodeBlock::s_info
      && v13 != &JSC::ProgramCodeBlock::s_info
      && v13 != &JSC::ModuleProgramCodeBlock::s_info)
    {
      __break(0xC471u);
      JUMPOUT(0x198417FD4);
    }
    v16 = (JSC::CodeBlock **)(*((_QWORD *)a2 + 8) + 72);
  }
  v17 = *v16;
  if (v17 || (v17 = a2, v6 == 4))
  {
    if (*((_QWORD *)v17 + 24))
      v7 = (JSC::CodeBlock *)*((_QWORD *)v17 + 24);
    else
      v7 = v17;
    v18 = *((_QWORD *)v7 + 15);
    if (v18)
    {
      v19 = *(unsigned __int8 *)(v18 + 12);
      if ((v19 & 0xFE) != 2 && v19 != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198417EFCLL);
      }
    }
  }
  else
  {
    v7 = a2;
    if ((_DWORD)v5)
    {
      __break(0xC471u);
      JUMPOUT(0x198418008);
    }
  }
LABEL_5:
  v8 = (double)unk_1ECF4C504;
  LODWORD(a3) = *((_DWORD *)v7 + 11);
  v24 = (double)*(unint64_t *)&a3;
  v9 = sqrt((double)*(unint64_t *)&a3 + 1.02406) * 0.061504 + 0.825914 + 0.0;
  if ((*(_WORD *)(*((_QWORD *)v7 + 7) + 28) & 0x3000) == 0x1000)
  {
    v21 = DWORD1(xmmword_1ECF4C514);
    v9 = v9 * (double)SDWORD1(xmmword_1ECF4C514);
    v23 = v9;
    if (!BYTE1(qword_1ECF4C332))
      goto LABEL_7;
  }
  else
  {
    v23 = v9;
    if (!BYTE1(qword_1ECF4C332))
      goto LABEL_7;
    v21 = 1;
  }
  v22 = v21;
  WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>((uint64_t)v7, ": bytecode cost is ", &v24, ", scaling execution counter by ", &v23, " * ", &v22, "\n");
  v9 = v23;
LABEL_7:
  v10 = 1;
  v11 = v9 * v8 * (double)(1 << *((_WORD *)v7 + 53));
  if (v11 >= 1.0)
  {
    if (v11 > 2147483650.0)
      v10 = 0x7FFFFFFF;
    else
      v10 = (int)v11;
  }
  return JSC::ExecutionCounter<(JSC::CountingVariant)1>::setNewThreshold((uint64_t)this + 348, v10, (uint64_t)a2);
}

uint64_t JSC::DFG::JITCode::setOptimizationThresholdBasedOnCompilationResult(uint64_t a1, JSC::CodeBlock *this, int a3, double a4)
{
  JSC::CodeBlock *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double v9;
  double v10;
  int v11;
  double v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  char **v16;
  uint64_t v17;
  JSC::CodeBlock ***v18;
  JSC::CodeBlock ***v19;
  JSC::CodeBlock **v20;
  uint64_t v21;
  int v22;
  char **v24;
  uint64_t v25;
  JSC::CodeBlock ***v26;
  JSC::CodeBlock ***v27;
  JSC::CodeBlock **v28;
  uint64_t v29;
  int v30;
  int v32;
  uint64_t v33;
  int v34;
  double v35;
  double v36;

  v4 = this;
  if (a3 == 3)
  {
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<JSC::CodeBlock,char [30],char [2]>((uint64_t)this, ": FTL-optimizing after warm-up.", "\n");
    v6 = *((_QWORD *)v4 + 15);
    if (v6)
    {
      LODWORD(v6) = *(unsigned __int8 *)(v6 + 12);
      v7 = v6 & 0xFE;
      if (v7 == 2)
        goto LABEL_6;
    }
    else
    {
      v7 = 0;
    }
    v16 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C));
    if (v16 == &JSC::FunctionCodeBlock::s_info)
    {
      v17 = *((_QWORD *)v4 + 8);
      v18 = (JSC::CodeBlock ***)(v17 + 96);
      v19 = (JSC::CodeBlock ***)(v17 + 104);
      if (*(int *)(*((_QWORD *)v4 + 7) + 20) >= 0)
        v19 = v18;
    }
    else
    {
      if (v16 != &JSC::EvalCodeBlock::s_info
        && v16 != &JSC::ProgramCodeBlock::s_info
        && v16 != &JSC::ModuleProgramCodeBlock::s_info)
      {
        __break(0xC471u);
        JUMPOUT(0x1984183F8);
      }
      v19 = (JSC::CodeBlock ***)(*((_QWORD *)v4 + 8) + 72);
    }
    v20 = *v19;
    if (!v20)
    {
      if (v7 != 4)
      {
        if ((_DWORD)v6)
        {
          __break(0xC471u);
          JUMPOUT(0x1984184B8);
        }
LABEL_6:
        v8 = a1 + 348;
        v9 = (double)SHIDWORD(xmmword_1ECF4C4F4);
        LODWORD(a4) = *((_DWORD *)v4 + 11);
        v36 = (double)*(unint64_t *)&a4;
        v10 = sqrt((double)*(unint64_t *)&a4 + 1.02406) * 0.061504 + 0.825914 + 0.0;
        if ((*(_WORD *)(*((_QWORD *)v4 + 7) + 28) & 0x3000) == 0x1000)
        {
          v32 = DWORD1(xmmword_1ECF4C514);
          v10 = v10 * (double)SDWORD1(xmmword_1ECF4C514);
          v35 = v10;
          if (!BYTE1(qword_1ECF4C332))
            goto LABEL_8;
        }
        else
        {
          v35 = v10;
          if (!BYTE1(qword_1ECF4C332))
          {
LABEL_8:
            v11 = 1;
            v12 = v10 * v9 * (double)(1 << *((_WORD *)v4 + 53));
            if (v12 >= 1.0)
            {
              if (v12 > 2147483650.0)
                v11 = 0x7FFFFFFF;
              else
                v11 = (int)v12;
            }
            return JSC::ExecutionCounter<(JSC::CountingVariant)1>::setNewThreshold(v8, v11, (uint64_t)v4);
          }
          v32 = 1;
        }
        v34 = v32;
        WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>((uint64_t)v4, ": bytecode cost is ", &v36, ", scaling execution counter by ", &v35, " * ", &v34, "\n");
        v10 = v35;
        goto LABEL_8;
      }
      v20 = (JSC::CodeBlock **)v4;
    }
    if (v20[24])
      v4 = v20[24];
    else
      v4 = (JSC::CodeBlock *)v20;
    v21 = *((_QWORD *)v4 + 15);
    if (v21)
    {
      v22 = *(unsigned __int8 *)(v21 + 12);
      if ((v22 & 0xFE) != 2 && v22 != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198418210);
      }
    }
    goto LABEL_6;
  }
  if (a3 == 2)
  {
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<JSC::CodeBlock,char [30],char [2]>((uint64_t)this, ": FTL-optimizing next invocation.", "\n");
    result = JSC::ExecutionCounter<(JSC::CountingVariant)1>::setNewThreshold(a1 + 348, 0, (uint64_t)v4);
    v14 = *((_QWORD *)v4 + 15);
    if (v14)
    {
      LODWORD(v14) = *(unsigned __int8 *)(v14 + 12);
      v15 = v14 & 0xFE;
      if (v15 == 2)
        goto LABEL_17;
    }
    else
    {
      v15 = 0;
    }
    v24 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C));
    if (v24 == &JSC::FunctionCodeBlock::s_info)
    {
      v25 = *((_QWORD *)v4 + 8);
      v26 = (JSC::CodeBlock ***)(v25 + 96);
      v27 = (JSC::CodeBlock ***)(v25 + 104);
      if (*(int *)(*((_QWORD *)v4 + 7) + 20) >= 0)
        v27 = v26;
    }
    else
    {
      if (v24 != &JSC::EvalCodeBlock::s_info
        && v24 != &JSC::ProgramCodeBlock::s_info
        && v24 != &JSC::ModuleProgramCodeBlock::s_info)
      {
        __break(0xC471u);
        JUMPOUT(0x198418428);
      }
      v27 = (JSC::CodeBlock ***)(*((_QWORD *)v4 + 8) + 72);
    }
    v28 = *v27;
    if (!v28)
    {
      if (v15 != 4)
      {
        if ((_DWORD)v14)
        {
          __break(0xC471u);
          JUMPOUT(0x1984184F4);
        }
        goto LABEL_17;
      }
      v28 = (JSC::CodeBlock **)v4;
    }
    if (v28[24])
      v4 = v28[24];
    else
      v4 = (JSC::CodeBlock *)v28;
    v29 = *((_QWORD *)v4 + 15);
    if (v29)
    {
      v30 = *(unsigned __int8 *)(v29 + 12);
      if ((v30 & 0xFE) != 2 && v30 != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1984182A0);
      }
    }
LABEL_17:
    *((_BYTE *)v4 + 18) |= 0x10u;
    return result;
  }
  if (a3)
  {
    if (a3 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x198418484);
    }
    v33 = JSC::CodeBlock::baselineVersion((uint64_t)this);
    JSC::CodeBlock::countReoptimization(v33);
    return JSC::DFG::JITCode::optimizeAfterWarmUp((JSC::DFG::JITCode *)a1, v4);
  }
  else
  {
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<JSC::CodeBlock,char [30],char [2]>((uint64_t)this, ": Not FTL-optimizing anytime soon.", "\n");
    *(_DWORD *)(a1 + 356) = 0x7FFFFFFF;
    *(_QWORD *)(a1 + 348) = 0x80000000;
    result = JSC::CodeBlock::baselineVersion((uint64_t)v4);
    *(_BYTE *)(result + 18) |= 8u;
  }
  return result;
}

_QWORD *JSC::DFG::JITCode::setOSREntryBlock(_QWORD *this, JSC::VM *a2, const JSC::JSCell *a3, unsigned int **a4)
{
  _QWORD *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int **v15;
  uint64_t v16;

  v7 = this;
  if (BYTE1(qword_1ECF4C332))
  {
    v15 = a4;
    v16 = (uint64_t)this;
    WTF::dataLog<WTF::RawPointer,char [30],WTF::RawPointer,char [2]>((const void **)&v16, (const void **)&v15);
    v8 = a4[15];
    if (v8)
    {
      v9 = v8 + 2;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    v11 = v8 + 2;
    v12 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v8 + 104))(v8);
    v16 = JSC::FTL::JITCode::addressForCall(v12, 0);
    this = (_QWORD *)WTF::dataLog<char [24],WTF::CodePtr<(WTF::PtrTag)357,(WTF::FunctionAttributes)0>,char [2]>((const void **)&v16);
    do
    {
      v13 = __ldaxr(v11);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v11));
    if (!v14)
    {
      atomic_store(1u, v8 + 2);
      this = (_QWORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v8 + 32))(v8);
    }
  }
  v7[48] = a4;
  if (a3 && a4 && *((_DWORD *)a2 + 190) >= *((unsigned __int8 *)a3 + 7))
    return (_QWORD *)JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)a3);
  return this;
}

uint64_t JSC::DFG::JITCode::clearOSREntryBlockAndResetThresholds(JSC::DFG::JITCode *this, JSC::CodeBlock *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  char **v13;
  uint64_t v14;
  JSC::CodeBlock **v15;
  JSC::CodeBlock **v16;
  JSC::CodeBlock *v17;
  uint64_t v18;
  int v19;
  double v21;
  double v22;
  int v23;
  double v24;
  int v26;
  double v27[3];
  int v28;
  int v29;
  double v30;

  v4 = *(unsigned int **)(*((_QWORD *)this + 48) + 120);
  if (v4)
  {
    v5 = v4 + 2;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = v4 + 2;
  v28 = *(_DWORD *)((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 104))(v4) + 360);
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 32))(v4);
  }
  *((_QWORD *)this + 48) = 0;
  *((_DWORD *)this + 98) = 0;
  LOBYTE(v30) = 0;
  WTF::HashMap<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::DFG::JITCode::TriggerReason>,WTF::HashTableTraits>::inlineSet<JSC::BytecodeIndex const&,JSC::DFG::JITCode::TriggerReason>((uint64_t *)this + 47, &v28, &v30, (uint64_t)v27);
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<JSC::CodeBlock,char [30],char [2]>((uint64_t)a2, ": FTL-optimizing after warm-up.", "\n");
  v11 = *((_QWORD *)a2 + 15);
  if (v11)
  {
    LODWORD(v11) = *(unsigned __int8 *)(v11 + 12);
    v12 = v11 & 0xFE;
    if (v12 == 2)
      goto LABEL_25;
  }
  else
  {
    v12 = 0;
  }
  v13 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C));
  if (v13 == &JSC::FunctionCodeBlock::s_info)
  {
    v14 = *((_QWORD *)a2 + 8);
    v15 = (JSC::CodeBlock **)(v14 + 96);
    v16 = (JSC::CodeBlock **)(v14 + 104);
    if (*(int *)(*((_QWORD *)a2 + 7) + 20) >= 0)
      v16 = v15;
  }
  else
  {
    if (v13 != &JSC::EvalCodeBlock::s_info
      && v13 != &JSC::ProgramCodeBlock::s_info
      && v13 != &JSC::ModuleProgramCodeBlock::s_info)
    {
      goto LABEL_40;
    }
    v16 = (JSC::CodeBlock **)(*((_QWORD *)a2 + 8) + 72);
  }
  v17 = *v16;
  if (!v17)
  {
    if (v12 != 4)
    {
      if ((_DWORD)v11)
      {
        __break(0xC471u);
        JUMPOUT(0x198418938);
      }
      goto LABEL_25;
    }
    v17 = a2;
  }
  if (*((_QWORD *)v17 + 24))
    a2 = (JSC::CodeBlock *)*((_QWORD *)v17 + 24);
  else
    a2 = v17;
  v18 = *((_QWORD *)a2 + 15);
  if (v18)
  {
    v19 = *(unsigned __int8 *)(v18 + 12);
    if ((v19 & 0xFE) != 2 && v19 != 0)
    {
LABEL_40:
      __break(0xC471u);
      JUMPOUT(0x198418904);
    }
  }
LABEL_25:
  v21 = (double)SHIDWORD(xmmword_1ECF4C4F4);
  LODWORD(v10) = *((_DWORD *)a2 + 11);
  v27[0] = (double)v10;
  v22 = sqrt((double)v10 + 1.02406) * 0.061504 + 0.825914 + 0.0;
  if ((*(_WORD *)(*((_QWORD *)a2 + 7) + 28) & 0x3000) == 0x1000)
  {
    v26 = DWORD1(xmmword_1ECF4C514);
    v22 = v22 * (double)SDWORD1(xmmword_1ECF4C514);
    v30 = v22;
    if (!BYTE1(qword_1ECF4C332))
      goto LABEL_27;
  }
  else
  {
    v30 = v22;
    if (!BYTE1(qword_1ECF4C332))
      goto LABEL_27;
    v26 = 1;
  }
  v29 = v26;
  WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>((uint64_t)a2, ": bytecode cost is ", v27, ", scaling execution counter by ", &v30, " * ", &v29, "\n");
  v22 = v30;
LABEL_27:
  v23 = 1;
  v24 = v22 * v21 * (double)(1 << *((_WORD *)a2 + 53));
  if (v24 >= 1.0)
  {
    if (v24 > 2147483650.0)
      v23 = 0x7FFFFFFF;
    else
      v23 = (int)v24;
  }
  return JSC::ExecutionCounter<(JSC::CountingVariant)1>::setNewThreshold((uint64_t)this + 348, v23, (uint64_t)a2);
}

_DWORD *JSC::DFG::JITCode::validateReferences(JSC::DFG::JITCode *this, const void ***a2)
{
  _DWORD *result;
  unsigned int *v5;
  unsigned int *v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  const void **v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  const void *v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;

  result = (_DWORD *)JSC::DFG::CommonData::validateReferences((uint64_t)this + 40, a2);
  v5 = (unsigned int *)*((_QWORD *)this + 32);
  if (v5)
    v6 = v5 + 2;
  else
    v6 = 0;
  if (v5)
    v7 = (unint64_t)&v5[16 * (unint64_t)*v5 + 2];
  else
    v7 = 0;
  for (; v6 != (unsigned int *)v7; v6 += 16)
  {
    v8 = (unsigned int *)*((_QWORD *)v6 + 2);
    if (v8)
    {
      v9 = *v8;
      while (1)
      {
        if (!v9)
          goto LABEL_22;
        --v9;
        v10 = (unsigned int *)*((_QWORD *)v6 + 2);
        if (*v10 <= v9)
          break;
        v11 = &v10[8 * v9];
        v12 = *((_QWORD *)v11 + 4);
        if ((v12 & 0xFFFE000000000002) == 0)
        {
          v23 = (const void *)*((_QWORD *)v11 + 4);
          if (v12)
          {
            v13 = *a2;
            if (!*a2)
              goto LABEL_30;
            v14 = *((_DWORD *)v13 - 2);
            v15 = WTF::IdentityHashTranslator<WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CodeBlock *>>::hash<JSC::CodeBlock *>(&v23);
            v12 = (uint64_t)v23;
            v16 = v15 & v14;
            v17 = v13[v15 & v14];
            if (v17 != v23)
            {
              v18 = 1;
              while (v17)
              {
                v16 = (v16 + v18) & v14;
                v17 = v13[v16];
                ++v18;
                if (v17 == v23)
                  goto LABEL_13;
              }
LABEL_30:
              v22 = v12;
              WTF::dataLog<char [20],JSC::JSValue,char [2]>("Found untracked reference: ", (JSC::JSValue *)&v22, "\n");
              WTF::dataLog<char [25],JSC::TrackedReferences,char [2]>("All tracked references: ", a2, "\n");
              __break(0xC471u);
LABEL_31:
              JUMPOUT(0x198418AECLL);
            }
          }
        }
LABEL_13:
        result = v11 + 2;
        if (*((_QWORD *)v11 + 1) != 4)
          result = (_DWORD *)JSC::DFG::RegisteredStructureSet::validateReferences((uint64_t)result, a2);
      }
      __break(0xC471u);
      goto LABEL_31;
    }
LABEL_22:
    ;
  }
  v19 = *((_DWORD *)this + 83);
  if (v19)
  {
    v20 = *((_QWORD *)this + 40);
    v21 = 13 * v19;
    do
    {
      if ((*(_BYTE *)(v20 + 12) & 1) != 0)
        result = (_DWORD *)JSC::TrackedReferences::check((uint64_t)a2, *(_QWORD *)v20);
      v20 += 13;
      v21 -= 13;
    }
    while (v21);
  }
  return result;
}

void JSC::DFG::JITCode::findPC(JSC::DFG::JITCode *this@<X0>, JSC::CodeBlock *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int **v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t *v33;
  unsigned int *v34;
  unint64_t v36;
  char v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  JSC::ExecutableMemoryHandle *v63;

  v12 = *((_QWORD *)a2 + 15);
  if (v12 && (*(_BYTE *)(v12 + 12) & 0xFE) == 4)
    v13 = *((_QWORD *)a2 + 16);
  else
    v13 = 0;
  JSC::JITThunks::ctiStub(*(_QWORD *)(*((_QWORD *)a2 + 9) + 90440), *((_QWORD *)a2 + 9), (void (*)(uint64_t *__return_ptr, uint64_t))JSC::DFG::osrExitGenerationThunkGenerator, a4, a5, a6, a7, a8, &v62);
  v21 = (unsigned int *)v63;
  if (v63)
  {
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    v23 = (unsigned int *)v63;
    v63 = 0;
    if (v23)
    {
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v23);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v23, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
      }
    }
  }
  v26 = (unsigned int *)*((_QWORD *)this + 33);
  if (v26 && (v27 = *v26, (_DWORD)v27))
  {
    v28 = 0;
    v29 = *(_DWORD **)(v13 + 40);
    v32 = *v29;
    v30 = (unsigned int **)(v29 + 4);
    v31 = v32;
    v33 = (uint64_t *)(v26 + 6);
    while (1)
    {
      if (v31 == v28)
      {
        __break(0xC471u);
        JUMPOUT(0x198418CC0);
      }
      v34 = *v30;
      if (*v30 && v34 != v21)
      {
        v36 = *((_QWORD *)v34 + 1);
        if (v36 <= a3 && v34[1] + v36 > a3)
          break;
      }
      ++v28;
      v33 += 9;
      v30 += 2;
      if (v27 == v28)
        goto LABEL_21;
    }
    if (v27 <= v28)
    {
      __break(0xC471u);
      JUMPOUT(0x198418D0CLL);
    }
    v40 = *v33;
    if ((*v33 & 1) != 0)
    {
      v57 = *(_QWORD *)(v40 & 0xFFFFFFFF8);
      if ((v40 & 2) != 0
        || ((v58 = *(unsigned int *)((v40 & 0xFFFFFFFF8) + 8), (_DWORD)v58 != 0x3FFFFFFF)
          ? (v59 = (_DWORD)v58 == -1)
          : (v59 = 1),
            v59))
      {
        v60 = 2;
      }
      else if (v58 >> 28)
      {
        v61 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v61 = v57;
        *(_DWORD *)(v61 + 8) = v58;
        v60 = 1;
        v57 = v61;
      }
      else
      {
        v60 = *(_QWORD *)(v40 & 0xFFFFFFFF8);
        v57 = v58 << 36;
      }
      v40 = v57 | v60;
    }
    *(_QWORD *)a9 = v40;
    v37 = 1;
  }
  else
  {
LABEL_21:
    v37 = 0;
    *(_BYTE *)a9 = 0;
  }
  *(_BYTE *)(a9 + 8) = v37;
  if (v21)
  {
    do
    {
      v38 = __ldaxr(v21);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v21));
    if (!v39)
    {
      atomic_store(1u, v21);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
    }
  }
}

unsigned int **JSC::DFG::JITCode::finalizeOSREntrypoints(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v10 = *(uint64_t **)a2;
  v11 = *(unsigned int *)(a2 + 12);
  v12 = (uint64_t *)(*(_QWORD *)a2 + (v11 << 6));
  v13 = 126 - 2 * __clz(v11);
  if ((_DWORD)v11)
    v14 = v13;
  else
    v14 = 0;
  std::__introsort<std::_ClassicAlgPolicy,JSC::DFG::JITCode::finalizeOSREntrypoints(WTF::Vector<JSC::DFG::OSREntryData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::OSREntryData*,false>(v10, v12, v14, 1, a5, a6, a7, a8);
  return WTF::FixedVector<JSC::DFG::OSREntryData>::operator=<0ul,WTF::CrashOnOverflow>((unsigned int **)(a1 + 256), (unint64_t *)a2, v15, v16, v17, v18, v19, v20);
}

unsigned int **WTF::FixedVector<JSC::DFG::OSREntryData>::operator=<0ul,WTF::CrashOnOverflow>(unsigned int **a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  JSC::DFG::OSREntryData *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  size_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  size_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  size_t v51;
  uint64_t v52;
  unint64_t v53;

  v9 = *a2;
  v10 = *((unsigned int *)a2 + 3);
  *a2 = 0;
  a2[1] = 0;
  if ((_DWORD)v10)
  {
    v11 = v10 << 6;
    v12 = (unsigned int *)WTF::fastMalloc((WTF *)(((unint64_t)v10 << 6) | 8));
    v13 = 0;
    *v12 = v10;
    do
    {
      v14 = v9 + v13;
      v15 = &v12[v13 / 4];
      *(_OWORD *)(v15 + 2) = *(_OWORD *)(v9 + v13);
      v16 = *(_QWORD *)(v9 + v13 + 16);
      *(_QWORD *)(v9 + v13 + 16) = 0;
      *((_QWORD *)v15 + 3) = v16;
      *((_QWORD *)v15 + 4) = *(_QWORD *)(v9 + v13 + 24);
      *((_QWORD *)v15 + 5) = 0x8000000000000000;
      v18 = (unint64_t *)(v9 + v13 + 32);
      v17 = *v18;
      if ((*v18 & 0x8000000000000000) == 0 && v17 >= 2)
      {
        v33 = *(_QWORD *)(2 * v17) + 63;
        v34 = v33 & 0xFFFFFFFFFFFFFFC0;
        v53 = WTF::fastMalloc((WTF *)(((v33 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
        *(_QWORD *)v53 = v34;
        v35 = (_QWORD *)(2 * *v18);
        v36 = (*v18 & 0x8000000000000000) == 0 ? v35 + 1 : (_QWORD *)(v9 + v13 + 32);
        v37 = (*v18 & 0x8000000000000000) != 0 ? 8 : (unint64_t)(*v35 + 7) >> 3;
        memcpy((void *)(v53 + 8), v36, v37);
        v17 = v53 >> 1;
        v38 = *((_QWORD *)v15 + 5);
        if (v38 >= 2)
          WTF::fastFree(2 * v38, a2, a3, a4, a5, a6, a7, a8);
      }
      *((_QWORD *)v15 + 5) = v17;
      *((_QWORD *)v15 + 6) = 0x8000000000000000;
      v21 = *(_QWORD *)(v14 + 40);
      v20 = (uint64_t *)(v14 + 40);
      v19 = v21;
      if ((v21 & 0x8000000000000000) == 0 && v19 >= 2)
      {
        v39 = *(_QWORD *)(2 * v19) + 63;
        v40 = v39 & 0xFFFFFFFFFFFFFFC0;
        v41 = WTF::fastMalloc((WTF *)(((v39 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
        *(_QWORD *)v41 = v40;
        v42 = (_QWORD *)(2 * *v20);
        v43 = *v20 >= 0 ? v42 + 1 : v20;
        v44 = *v20 < 0 ? 8 : (unint64_t)(*v42 + 7) >> 3;
        memcpy((void *)(v41 + 8), v43, v44);
        v19 = v41 >> 1;
        v45 = *((_QWORD *)v15 + 6);
        if (v45 >= 2)
          WTF::fastFree(2 * v45, a2, a3, a4, a5, a6, a7, a8);
      }
      *((_QWORD *)v15 + 6) = v19;
      v22 = &v12[v13 / 4];
      *((_QWORD *)v22 + 8) = 0x8000000000000000;
      v24 = (unint64_t *)(v9 + v13 + 56);
      v23 = *v24;
      v25 = *(_QWORD *)(v9 + v13 + 48);
      *(_QWORD *)(v9 + v13 + 48) = 0;
      *((_QWORD *)v22 + 7) = v25;
      if ((v23 & 0x8000000000000000) == 0 && v23 >= 2)
      {
        v46 = *(_QWORD *)(2 * v23) + 63;
        v47 = v46 & 0xFFFFFFFFFFFFFFC0;
        v48 = WTF::fastMalloc((WTF *)(((v46 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
        *(_QWORD *)v48 = v47;
        v49 = (_QWORD *)(2 * *v24);
        v50 = (*v24 & 0x8000000000000000) == 0 ? v49 + 1 : (_QWORD *)(v9 + v13 + 56);
        v51 = (*v24 & 0x8000000000000000) != 0 ? 8 : (unint64_t)(*v49 + 7) >> 3;
        memcpy((void *)(v48 + 8), v50, v51);
        v23 = v48 >> 1;
        v52 = *((_QWORD *)v22 + 8);
        if (v52 >= 2)
          WTF::fastFree(2 * v52, a2, a3, a4, a5, a6, a7, a8);
      }
      *((_QWORD *)v22 + 8) = v23;
      v13 += 64;
    }
    while (v11 != v13);
    v26 = 0;
    do
    {
      JSC::DFG::OSREntryData::~OSREntryData((JSC::DFG::OSREntryData *)(v9 + v26), a2, a3, a4, a5, a6, a7, a8);
      v26 += 64;
    }
    while (v11 != v26);
    if (v9)
    {
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
      v9 = 0;
    }
  }
  else
  {
    v12 = 0;
  }
  v27 = *a1;
  *a1 = v12;
  if (v27)
  {
    v28 = (JSC::DFG::OSREntryData *)(v27 + 2);
    v29 = *v27;
    if ((_DWORD)v29)
    {
      v30 = v29 << 6;
      do
      {
        JSC::DFG::OSREntryData::~OSREntryData(v28, a2, a3, a4, a5, a6, a7, a8);
        v28 = (JSC::DFG::OSREntryData *)(v31 + 64);
        v30 -= 64;
      }
      while (v30);
    }
    WTF::fastFree((unint64_t)v27, a2, a3, a4, a5, a6, a7, a8);
  }
  if (v9)
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

JSC::DFG::JITCompiler *JSC::DFG::JITCompiler::JITCompiler(JSC::DFG::JITCompiler *this, JSC::CodeBlock **a2)
{
  JSC::CCallHelpers *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  JSC::CodeBlock *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v41;
  int *v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;

  v4 = JSC::CCallHelpers::CCallHelpers(this, a2[4]);
  *((_QWORD *)v4 + 44) = a2;
  *((_QWORD *)v4 + 45) = 0;
  v5 = WTF::fastMalloc((WTF *)0x190);
  v6 = ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 24) + 16) - 1) & 0xFFFFFFFD) == 0;
  *(_DWORD *)(v5 + 8) = 1;
  *(_WORD *)(v5 + 12) = 4;
  *(_BYTE *)(v5 + 14) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)v5 = off_1E358E440;
  *(_QWORD *)(v5 + 72) = 0;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v7 = 1;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_QWORD *)(v5 + 80) = v7;
  *(_QWORD *)(v5 + 232) = 0;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_QWORD *)(v5 + 216) = 0;
  *(_QWORD *)(v5 + 240) = -1;
  *(_BYTE *)(v5 + 248) = v6;
  *(_WORD *)(v5 + 249) = 1;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 272) = 0u;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_QWORD *)(v5 + 336) = 0;
  *(_BYTE *)(v5 + 344) = 1;
  *(_OWORD *)(v5 + 348) = 0u;
  *(_OWORD *)(v5 + 364) = 0u;
  *(_OWORD *)(v5 + 380) = 0u;
  *(_BYTE *)(v5 + 396) = 0;
  *((_QWORD *)this + 46) = v5;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  v15 = *((unsigned int *)a2 + 15);
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_DWORD *)this + 101) = v15;
  if ((_DWORD)v15)
  {
    if (v15 >> 30)
      goto LABEL_60;
    v16 = (void *)WTF::fastMalloc((WTF *)(4 * v15));
    *((_DWORD *)this + 100) = v15;
    *((_QWORD *)this + 49) = v16;
    v17 = *((unsigned int *)this + 101);
    if ((_DWORD)v17)
      memset(v16, 255, 4 * v17);
  }
  *((_QWORD *)this + 51) = (char *)this + 424;
  *((_QWORD *)this + 52) = 4;
  *((_QWORD *)this + 89) = (char *)this + 728;
  *((_QWORD *)this + 90) = 4;
  *((_QWORD *)this + 123) = (char *)this + 1000;
  *((_QWORD *)this + 124) = 4;
  *((_QWORD *)this + 157) = (char *)this + 1272;
  *((_QWORD *)this + 158) = 4;
  *((_QWORD *)this + 191) = (char *)this + 1544;
  *((_QWORD *)this + 192) = 4;
  *((_QWORD *)this + 225) = (char *)this + 1816;
  *((_QWORD *)this + 226) = 4;
  *((_QWORD *)this + 259) = (char *)this + 2088;
  *((_QWORD *)this + 260) = 4;
  *((_QWORD *)this + 293) = (char *)this + 2360;
  *((_QWORD *)this + 294) = 4;
  *((_QWORD *)this + 327) = (char *)this + 2632;
  *((_QWORD *)this + 328) = 4;
  *((_QWORD *)this + 361) = (char *)this + 2904;
  *((_QWORD *)this + 362) = 4;
  *((_QWORD *)this + 395) = (char *)this + 3176;
  *((_QWORD *)this + 396) = 4;
  *((_QWORD *)this + 429) = (char *)this + 3448;
  *((_QWORD *)this + 430) = 4;
  *((_QWORD *)this + 463) = (char *)this + 3720;
  *((_QWORD *)this + 464) = 4;
  *((_QWORD *)this + 491) = 0;
  *(_OWORD *)((char *)this + 3896) = 0u;
  *(_OWORD *)((char *)this + 3912) = 0u;
  *(_OWORD *)((char *)this + 3864) = 0u;
  *(_OWORD *)((char *)this + 3880) = 0u;
  *(_OWORD *)((char *)this + 3832) = 0u;
  *(_OWORD *)((char *)this + 3848) = 0u;
  *(_OWORD *)((char *)this + 3800) = 0u;
  *(_OWORD *)((char *)this + 3816) = 0u;
  *(_OWORD *)((char *)this + 3784) = 0u;
  v18 = a2[2];
  *((_OWORD *)this + 246) = 0u;
  *((_BYTE *)this + 3952) = *((_BYTE *)v18 + 93123);
  if (!HIBYTE(word_1ECF4C286)
    && !BYTE1(dword_1ECF4C28A)
    && !*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 16) + 93016))
  {
    goto LABEL_19;
  }
  v19 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v19 = a2;
  *(_QWORD *)(v19 + 8) = 0;
  *(_DWORD *)(v19 + 32) = -1;
  *(_QWORD *)(v19 + 48) = 0;
  *(_QWORD *)(v19 + 56) = 0;
  *(_QWORD *)(v19 + 40) = 0;
  *(_QWORD *)(v19 + 64) = -1;
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)(v19 + 24) = a2;
  v20 = *((unsigned int *)a2 + 15);
  if ((_DWORD)v20)
  {
    if (v20 <= 0x10)
      v21 = 16;
    else
      v21 = v20;
    if (!(v21 >> 30))
    {
      v22 = WTF::fastMalloc((WTF *)(4 * v21));
      *(_DWORD *)(v19 + 48) = v21;
      *(_QWORD *)(v19 + 40) = v22;
      v23 = *(unsigned int *)(v19 + 52);
      if ((_DWORD)v23 != (_DWORD)v20)
        memset((void *)(v22 + 4 * v23), 255, (4 * v20 - 4 * v23) & 0xFFFFFFFFFFFFFFFCLL);
      goto LABEL_13;
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1984195A0);
  }
LABEL_13:
  *(_DWORD *)(v19 + 52) = v20;
  v24 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = v19;
  if (v24)
  {
    v25 = *(_QWORD *)(v24 + 56);
    if (v25)
      WTF::fastFree(v25 - 16, v8, v9, v10, v11, v12, v13, v14);
    v26 = *(_QWORD *)(v24 + 40);
    if (v26)
    {
      *(_QWORD *)(v24 + 40) = 0;
      *(_DWORD *)(v24 + 48) = 0;
      WTF::fastFree(v26, v8, v9, v10, v11, v12, v13, v14);
    }
    JSC::DumpContext::~DumpContext((JSC::DumpContext *)(v24 + 8), v8, v9, v10, v11, v12, v13, v14);
    WTF::fastFree(v24, v27, v28, v29, v30, v31, v32, v33);
  }
LABEL_19:
  v34 = *(_QWORD *)(*((_QWORD *)this + 44) + 24);
  v35 = *((_QWORD *)this + 46);
  v36 = *(_QWORD *)(v34 + 352);
  *(_QWORD *)(v34 + 352) = 0;
  v37 = *(_QWORD *)(v35 + 360);
  *(_QWORD *)(v35 + 360) = v36;
  if (v37)
  {
    v61 = *(unsigned int *)(v37 - 4);
    if ((_DWORD)v61)
    {
      v62 = (unint64_t *)(v37 + 8);
      do
      {
        if (*((_DWORD *)v62 - 2) != -2)
        {
          v63 = *v62;
          *v62 = 0;
          if (v63)
            WTF::fastFree(v63, v8, v9, v10, v11, v12, v13, v14);
        }
        v62 += 2;
        --v61;
      }
      while (v61);
    }
    WTF::fastFree(v37 - 16, v8, v9, v10, v11, v12, v13, v14);
  }
  v38 = *(_QWORD *)(*((_QWORD *)this + 44) + 24);
  v39 = *(unsigned int *)(v38 + 372);
  if ((_DWORD)v39)
  {
    v41 = *(int **)(v38 + 360);
    v42 = &v41[v39];
    do
    {
      v43 = *v41;
      v44 = (uint64_t *)(*((_QWORD *)this + 46) + 376);
      v45 = *v44;
      if (*v44
        || (WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::DFG::JITCode::TriggerReason>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::rehash((uint64_t *)(*((_QWORD *)this + 46) + 376), 8u, 0), (v45 = *v44) != 0))
      {
        v46 = *(_DWORD *)(v45 - 8);
      }
      else
      {
        v46 = 0;
      }
      v47 = 9 * ((v43 + ~(v43 << 15)) ^ ((v43 + ~(v43 << 15)) >> 10));
      v48 = (v47 ^ (v47 >> 6)) + ~((v47 ^ (v47 >> 6)) << 11);
      v49 = v46 & (v48 ^ HIWORD(v48));
      v50 = v45 + 8 * v49;
      v51 = *(_DWORD *)v50;
      if (*(_DWORD *)v50 != -1)
      {
        v58 = 0;
        v59 = 1;
        while (v51 != v43)
        {
          if (v51 == -2)
            v58 = v50;
          v49 = (v49 + v59) & v46;
          v50 = v45 + 8 * v49;
          v51 = *(_DWORD *)v50;
          ++v59;
          if (*(_DWORD *)v50 == -1)
          {
            if (v58)
            {
              *(_DWORD *)v58 = -1;
              *(_BYTE *)(v58 + 4) = 0;
              --*(_DWORD *)(*v44 - 16);
              v50 = v58;
            }
            goto LABEL_27;
          }
        }
        goto LABEL_33;
      }
LABEL_27:
      *(_DWORD *)v50 = v43;
      *(_BYTE *)(v50 + 4) = 0;
      v52 = *v44;
      if (*v44)
        v53 = *(_DWORD *)(v52 - 12) + 1;
      else
        v53 = 1;
      *(_DWORD *)(v52 - 12) = v53;
      v54 = *v44;
      if (*v44)
        v55 = *(_DWORD *)(v54 - 12);
      else
        v55 = 0;
      v56 = (*(_DWORD *)(v54 - 16) + v55);
      v57 = *(unsigned int *)(v54 - 4);
      if (v57 > 0x400)
      {
        if (v57 <= 2 * v56)
          goto LABEL_45;
      }
      else if (3 * v57 <= 4 * v56)
      {
        if ((_DWORD)v57)
LABEL_45:
          v60 = (_DWORD)v57 << (6 * *(_DWORD *)(v54 - 12) >= (2 * v57));
        else
          v60 = 8;
        WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::DFG::JITCode::TriggerReason>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::rehash(v44, v60, (_DWORD *)v50);
      }
LABEL_33:
      ++v41;
    }
    while (v41 != v42);
  }
  return this;
}

void JSC::DFG::JITCompiler::~JITCompiler(JSC::DFG::JITCompiler *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t StatusReg;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  JSC::DFG::JITCompiler *v36;
  JSC::DFG::JITCompiler *v38;
  JSC::DFG::JITCompiler *v39;
  JSC::DFG::JITCompiler *v40;
  JSC::DFG::JITCompiler *v41;
  JSC::DFG::JITCompiler *v42;
  JSC::DFG::JITCompiler *v43;
  JSC::DFG::JITCompiler *v44;
  JSC::DFG::JITCompiler *v45;
  JSC::DFG::JITCompiler *v46;
  JSC::DFG::JITCompiler *v47;
  JSC::DFG::JITCompiler *v48;
  JSC::DFG::JITCompiler *v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  JSC::DFG::OSREntryData *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t i;
  uint64_t v75;
  unint64_t v76;
  unint64_t j;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;

  v9 = *((unsigned int *)this + 987);
  v10 = *((_QWORD *)this + 492);
  if ((_DWORD)v9)
  {
    v80 = 16 * v9;
    v81 = (uint64_t *)(v10 + 8);
    do
    {
      v83 = *v81;
      v81 += 2;
      v82 = v83;
      if ((v83 & 1) != 0 && (v82 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v82 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
      v80 -= 16;
    }
    while (v80);
    v10 = *((_QWORD *)this + 492);
  }
  if (v10)
  {
    *((_QWORD *)this + 492) = 0;
    *((_DWORD *)this + 986) = 0;
    WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 490);
  if (v11)
  {
    *((_QWORD *)this + 490) = 0;
    *((_DWORD *)this + 982) = 0;
    WTF::fastFree(v11, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *((_QWORD *)this + 487);
  if (v12)
  {
    for (i = 0; i < v12; ++i)
    {
      if (i >> 3 >= *((unsigned int *)this + 979))
      {
        __break(0xC471u);
        JUMPOUT(0x198419D5CLL);
      }
      v75 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 488) + 8 * (i >> 3)) + 16 * (i & 7));
      if ((v75 & 1) != 0 && (v75 & 0xFFFFFFFF8) != 0)
      {
        WTF::fastFree(v75 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
        v12 = *((_QWORD *)this + 487);
      }
    }
  }
  if (*((_DWORD *)this + 979))
  {
    v76 = 0;
    do
      WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 488) + 8 * v76++), (void *)a2, a3, a4, a5, a6, a7, a8);
    while (v76 < *((unsigned int *)this + 979));
  }
  v13 = *((_QWORD *)this + 488);
  if (v13)
  {
    *((_QWORD *)this + 488) = 0;
    *((_DWORD *)this + 978) = 0;
    WTF::fastFree(v13, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)this + 484);
  if (v14)
  {
    for (j = 0; j < v14; ++j)
    {
      if (j >> 3 >= *((unsigned int *)this + 973))
      {
LABEL_167:
        __break(0xC471u);
        JUMPOUT(0x198419D2CLL);
      }
      v78 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 485) + 8 * (j >> 3)) + ((j & 7) << 6) + 32);
      if ((v78 & 1) != 0 && (v78 & 0xFFFFFFFF8) != 0)
      {
        WTF::fastFree(v78 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
        v14 = *((_QWORD *)this + 484);
      }
    }
  }
  if (*((_DWORD *)this + 973))
  {
    v79 = 0;
    do
      WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 485) + 8 * v79++), (void *)a2, a3, a4, a5, a6, a7, a8);
    while (v79 < *((unsigned int *)this + 973));
  }
  v15 = *((_QWORD *)this + 485);
  if (v15)
  {
    *((_QWORD *)this + 485) = 0;
    *((_DWORD *)this + 972) = 0;
    WTF::fastFree(v15, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *((_QWORD *)this + 482);
  if (v16)
  {
    *((_QWORD *)this + 482) = 0;
    *((_DWORD *)this + 966) = 0;
    WTF::fastFree(v16, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = *((unsigned int *)this + 963);
  v18 = *((_QWORD *)this + 480);
  if ((_DWORD)v17)
  {
    v66 = 72 * v17;
    v67 = (uint64_t *)(v18 + 48);
    do
    {
      v68 = *v67;
      if ((*v67 & 1) != 0 && (v68 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v68 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
      v69 = *(v67 - 4);
      if ((v69 & 1) != 0 && (v69 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v69 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
      v70 = *(v67 - 5);
      if ((v70 & 1) != 0 && (v70 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v70 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
      v67 += 9;
      v66 -= 72;
    }
    while (v66);
    v18 = *((_QWORD *)this + 480);
  }
  if (v18)
  {
    *((_QWORD *)this + 480) = 0;
    *((_DWORD *)this + 962) = 0;
    WTF::fastFree(v18, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v19 = *((unsigned int *)this + 959);
  if ((_DWORD)v19)
  {
    v71 = (JSC::DFG::OSREntryData *)*((_QWORD *)this + 478);
    v72 = v19 << 6;
    do
    {
      JSC::DFG::OSREntryData::~OSREntryData(v71, (void *)a2, a3, a4, a5, a6, a7, a8);
      v71 = (JSC::DFG::OSREntryData *)(v73 + 64);
      v72 -= 64;
    }
    while (v72);
  }
  v20 = *((_QWORD *)this + 478);
  if (v20)
  {
    *((_QWORD *)this + 478) = 0;
    *((_DWORD *)this + 958) = 0;
    WTF::fastFree(v20, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v21 = *((unsigned int *)this + 955);
  v22 = *((_QWORD *)this + 476);
  if ((_DWORD)v21)
  {
    v23 = 16 * v21;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      a2 = *(_QWORD *)v22;
      if (*(_QWORD *)v22)
      {
        *(_QWORD *)v22 = 0;
        *(_DWORD *)(v22 + 8) = 0;
        v25 = *(_QWORD *)(StatusReg + 752);
        if (v25)
        {
          if (!(a2 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) != 0)
          {
LABEL_28:
            v26 = *(unsigned int *)(v25 + 8000);
            if (v26 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v25, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v25 + 8 * v26) = a2 | 0x5000000000000;
              *(_DWORD *)(v25 + 8000) = v26 + 1;
            }
            goto LABEL_30;
          }
          if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_28;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v25, a2, 1, a4, a5, a6, a7, a8);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(a2, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_30:
      v22 += 16;
      v23 -= 16;
      if (!v23)
      {
        v22 = *((_QWORD *)this + 476);
        break;
      }
    }
  }
  if (v22)
  {
    *((_QWORD *)this + 476) = 0;
    *((_DWORD *)this + 954) = 0;
    WTF::fastFree(v22, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v27 = *((_QWORD *)this + 473);
  if (v27)
  {
    v28 = 0;
    v29 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      if (v28 >> 2 >= *((unsigned int *)this + 951))
        goto LABEL_167;
      v30 = *(_QWORD *)(*((_QWORD *)this + 474) + 8 * (v28 >> 2)) + ((v28 & 3) << 6);
      a2 = *(_QWORD *)v30;
      if (*(_QWORD *)v30 && v30 + 16 != a2)
        break;
LABEL_47:
      if (++v28 >= v27)
        goto LABEL_48;
    }
    *(_QWORD *)v30 = 0;
    *(_DWORD *)(v30 + 8) = 0;
    v32 = *(_QWORD *)(v29 + 752);
    if (v32)
    {
      if (!(a2 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) != 0)
      {
        goto LABEL_44;
      }
      if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
      {
        a4 = 0;
      }
      else
      {
        a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)a4 == 1)
        {
LABEL_44:
          v33 = *(unsigned int *)(v32 + 8000);
          if (v33 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v32, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
          }
          else
          {
            *(_QWORD *)(v32 + 8 * v33) = a2 | 0x5000000000000;
            *(_DWORD *)(v32 + 8000) = v33 + 1;
          }
          goto LABEL_46;
        }
      }
      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v32, a2, 1, a4, a5, a6, a7, a8);
    }
    else
    {
      pas_try_deallocate_slow_no_cache(a2, (uint64_t)&bmalloc_heap_config, 1);
    }
LABEL_46:
    v27 = *((_QWORD *)this + 473);
    goto LABEL_47;
  }
LABEL_48:
  if (*((_DWORD *)this + 951))
  {
    v34 = 0;
    do
      WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 474) + 8 * v34++), (void *)a2, a3, a4, a5, a6, a7, a8);
    while (v34 < *((unsigned int *)this + 951));
  }
  v35 = *((_QWORD *)this + 474);
  if (v35)
  {
    *((_QWORD *)this + 474) = 0;
    *((_DWORD *)this + 950) = 0;
    WTF::fastFree(v35, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v36 = (JSC::DFG::JITCompiler *)*((_QWORD *)this + 463);
  if ((JSC::DFG::JITCompiler *)((char *)this + 3720) != v36 && v36 != 0)
  {
    *((_QWORD *)this + 463) = 0;
    *((_DWORD *)this + 928) = 0;
    WTF::fastFree((unint64_t)v36, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v38 = (JSC::DFG::JITCompiler *)*((_QWORD *)this + 429);
  if ((JSC::DFG::JITCompiler *)((char *)this + 3448) != v38 && v38)
  {
    *((_QWORD *)this + 429) = 0;
    *((_DWORD *)this + 860) = 0;
    WTF::fastFree((unint64_t)v38, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v39 = (JSC::DFG::JITCompiler *)*((_QWORD *)this + 395);
  if ((JSC::DFG::JITCompiler *)((char *)this + 3176) != v39 && v39)
  {
    *((_QWORD *)this + 395) = 0;
    *((_DWORD *)this + 792) = 0;
    WTF::fastFree((unint64_t)v39, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v40 = (JSC::DFG::JITCompiler *)*((_QWORD *)this + 361);
  if ((JSC::DFG::JITCompiler *)((char *)this + 2904) != v40 && v40)
  {
    *((_QWORD *)this + 361) = 0;
    *((_DWORD *)this + 724) = 0;
    WTF::fastFree((unint64_t)v40, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v41 = (JSC::DFG::JITCompiler *)*((_QWORD *)this + 327);
  if ((JSC::DFG::JITCompiler *)((char *)this + 2632) != v41 && v41)
  {
    *((_QWORD *)this + 327) = 0;
    *((_DWORD *)this + 656) = 0;
    WTF::fastFree((unint64_t)v41, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v42 = (JSC::DFG::JITCompiler *)*((_QWORD *)this + 293);
  if ((JSC::DFG::JITCompiler *)((char *)this + 2360) != v42 && v42)
  {
    *((_QWORD *)this + 293) = 0;
    *((_DWORD *)this + 588) = 0;
    WTF::fastFree((unint64_t)v42, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v43 = (JSC::DFG::JITCompiler *)*((_QWORD *)this + 259);
  if ((JSC::DFG::JITCompiler *)((char *)this + 2088) != v43 && v43)
  {
    *((_QWORD *)this + 259) = 0;
    *((_DWORD *)this + 520) = 0;
    WTF::fastFree((unint64_t)v43, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v44 = (JSC::DFG::JITCompiler *)*((_QWORD *)this + 225);
  if ((JSC::DFG::JITCompiler *)((char *)this + 1816) != v44 && v44)
  {
    *((_QWORD *)this + 225) = 0;
    *((_DWORD *)this + 452) = 0;
    WTF::fastFree((unint64_t)v44, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v45 = (JSC::DFG::JITCompiler *)*((_QWORD *)this + 191);
  if ((JSC::DFG::JITCompiler *)((char *)this + 1544) != v45 && v45)
  {
    *((_QWORD *)this + 191) = 0;
    *((_DWORD *)this + 384) = 0;
    WTF::fastFree((unint64_t)v45, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v46 = (JSC::DFG::JITCompiler *)*((_QWORD *)this + 157);
  if ((JSC::DFG::JITCompiler *)((char *)this + 1272) != v46 && v46)
  {
    *((_QWORD *)this + 157) = 0;
    *((_DWORD *)this + 316) = 0;
    WTF::fastFree((unint64_t)v46, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v47 = (JSC::DFG::JITCompiler *)*((_QWORD *)this + 123);
  if ((JSC::DFG::JITCompiler *)((char *)this + 1000) != v47 && v47)
  {
    *((_QWORD *)this + 123) = 0;
    *((_DWORD *)this + 248) = 0;
    WTF::fastFree((unint64_t)v47, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v48 = (JSC::DFG::JITCompiler *)*((_QWORD *)this + 89);
  if ((JSC::DFG::JITCompiler *)((char *)this + 728) != v48 && v48)
  {
    *((_QWORD *)this + 89) = 0;
    *((_DWORD *)this + 180) = 0;
    WTF::fastFree((unint64_t)v48, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v49 = (JSC::DFG::JITCompiler *)*((_QWORD *)this + 51);
  if ((JSC::DFG::JITCompiler *)((char *)this + 424) != v49 && v49)
  {
    *((_QWORD *)this + 51) = 0;
    *((_DWORD *)this + 104) = 0;
    WTF::fastFree((unint64_t)v49, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v50 = *((_QWORD *)this + 49);
  if (v50)
  {
    *((_QWORD *)this + 49) = 0;
    *((_DWORD *)this + 100) = 0;
    WTF::fastFree(v50, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v51 = *((_QWORD *)this + 47);
  if (v51)
  {
    *((_QWORD *)this + 47) = 0;
    *((_DWORD *)this + 96) = 0;
    WTF::fastFree(v51, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v52 = (unsigned int *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v52)
  {
    v53 = v52 + 2;
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      atomic_store(1u, v52 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 32))(v52);
    }
  }
  v56 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v56)
  {
    v57 = *(_QWORD *)(v56 + 56);
    if (v57)
      WTF::fastFree(v57 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
    v58 = *(_QWORD *)(v56 + 40);
    if (v58)
    {
      *(_QWORD *)(v56 + 40) = 0;
      *(_DWORD *)(v56 + 48) = 0;
      WTF::fastFree(v58, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
    JSC::DumpContext::~DumpContext((JSC::DumpContext *)(v56 + 8), (void *)a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v56, v59, v60, v61, v62, v63, v64, v65);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)this, (void *)a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::JITCompiler::linkOSRExits(JSC::DFG::JITCompiler *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  __int16 v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  char v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char v27;
  __int16 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35;
  int v36;
  int i;
  uint64_t v38;
  uint64_t v39;
  JSC::ARM64LogicalImmediate *v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  __int16 v60;
  char v61;
  unsigned int v62;
  char v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  int j;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  unint64_t v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  char v94;
  unsigned int v95;
  int v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  unint64_t v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  char v106;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  WTF *v130;
  WTF *v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  int v137;
  void *v138;
  void *v139;
  unint64_t v140;
  _QWORD *v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  WTF *v146;
  unsigned int v147;
  int v148;
  _DWORD *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  _DWORD *v155;
  uint64_t v156;
  int *v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  _DWORD *v161;
  WTF *v162;
  uint64_t v163;
  int v164;
  _DWORD *v165;
  int v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  JSC::AssemblerBuffer *v175;
  uint64_t v176;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int8x8_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char v258;
  WTF **v259;
  _DWORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char v267;
  void *v268;
  JSC::AssemblerBuffer *v269;
  unint64_t v270;
  uint64_t v271;
  JSC::ARM64LogicalImmediate *v272;
  _DWORD v273[2];
  char v274;
  __int16 v275;
  char v276;
  _DWORD v277[2];
  char v278;
  __int16 v279;
  char v280;
  WTF *v281;
  uint64_t v282;
  _BYTE v283[24];
  WTF *v284;
  uint64_t v285;
  _BYTE v286[24];
  int v287;
  int v288;
  __int128 v289;
  uint64_t v290;

  LODWORD(v9) = *((_DWORD *)this + 963);
  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 24) + 112) && (_DWORD)v9)
  {
    v140 = 0;
    v141 = (_QWORD *)((char *)this + 3808);
    do
    {
      if (v140 >> 2 >= *((unsigned int *)this + 951))
      {
        __break(0xC471u);
        JUMPOUT(0x19841B894);
      }
      v142 = *(_QWORD *)(*((_QWORD *)this + 474) + 8 * (v140 >> 2)) + ((v140 & 3) << 6);
      v284 = 0;
      v285 = 0;
      v143 = *(unsigned int *)(v142 + 12);
      if ((_DWORD)v143)
      {
        v144 = 0;
        v145 = 0;
        v146 = 0;
        v147 = 0;
        do
        {
          v148 = *(_DWORD *)(*(_QWORD *)v142 + v144);
          v288 = v148;
          if (v148 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x19841B5E0);
          }
          if (v147 == (_DWORD)v285)
          {
            v149 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v284, v147 + 1, (unint64_t)&v288);
            v147 = HIDWORD(v285);
            v146 = v284;
            *((_DWORD *)v284 + HIDWORD(v285)) = *v149;
            v143 = *(unsigned int *)(v142 + 12);
          }
          else
          {
            *((_DWORD *)v146 + v147) = v148;
          }
          HIDWORD(v285) = ++v147;
          ++v145;
          v144 += 12;
        }
        while (v145 < v143);
      }
      else if (*(_DWORD *)(v142 + 40) == -1)
      {
        v147 = 0;
      }
      else
      {
        v287 = *(_DWORD *)(v142 + 40);
        v165 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v284, 1uLL, (unint64_t)&v287);
        v166 = HIDWORD(v285);
        *((_DWORD *)v284 + HIDWORD(v285)) = *v165;
        v147 = v166 + 1;
        HIDWORD(v285) = v166 + 1;
      }
      v150 = *((unsigned int *)this + 955);
      if ((_DWORD)v150 == *((_DWORD *)this + 954))
      {
        v151 = WTF::Vector<WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 3808, v150 + 1, (unint64_t)&v284);
        v152 = *((_QWORD *)this + 476) + 16 * *((unsigned int *)this + 955);
        v153 = *(unsigned int *)(v151 + 12);
        *(_QWORD *)v152 = 0;
        *(_QWORD *)(v152 + 8) = 0;
        *(_DWORD *)(v152 + 12) = v153;
        if ((_DWORD)v153)
        {
          if (v153 >> 30)
          {
            __break(0xC471u);
            JUMPOUT(0x19841B89CLL);
          }
          v154 = v151;
          v155 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v153));
          *(_DWORD *)(v152 + 8) = v153;
          *(_QWORD *)v152 = v155;
          v156 = *(unsigned int *)(v154 + 12);
          if ((_DWORD)v156)
          {
            v157 = *(int **)v154;
            v158 = 4 * v156;
            do
            {
              v159 = *v157++;
              *v155++ = v159;
              v158 -= 4;
            }
            while (v158);
          }
        }
      }
      else
      {
        v160 = *v141 + 16 * v150;
        *(_QWORD *)v160 = 0;
        *(_QWORD *)(v160 + 8) = 0;
        *(_DWORD *)(v160 + 12) = v147;
        if (v147)
        {
          if (v147 >> 30)
          {
            __break(0xC471u);
            JUMPOUT(0x19841B8A4);
          }
          v161 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v147));
          *(_DWORD *)(v160 + 8) = v147;
          *(_QWORD *)v160 = v161;
          v162 = v284;
          if (!HIDWORD(v285))
            goto LABEL_345;
          v163 = 4 * HIDWORD(v285);
          do
          {
            v164 = *(_DWORD *)v162;
            v162 = (WTF *)((char *)v162 + 4);
            *v161++ = v164;
            v163 -= 4;
          }
          while (v163);
        }
      }
      v162 = v284;
LABEL_345:
      ++*((_DWORD *)this + 955);
      if (v162)
      {
        v284 = 0;
        LODWORD(v285) = 0;
        WTF::fastFree((unint64_t)v162, a2, a3, a4, a5, a6, a7, a8);
      }
      ++v140;
      v9 = *((unsigned int *)this + 963);
    }
    while (v140 < v9);
  }
  v284 = (WTF *)v286;
  v285 = 2;
  v281 = (WTF *)v283;
  v282 = 2;
  if ((_DWORD)v9)
  {
    v10 = 0;
    v269 = (JSC::DFG::JITCompiler *)((char *)this + 56);
    while (1)
    {
      if (v10 >> 2 >= *((unsigned int *)this + 951))
      {
        __break(0xC471u);
        JUMPOUT(0x19841B83CLL);
      }
      v271 = *(_QWORD *)(*((_QWORD *)this + 474) + 8 * (v10 >> 2));
      v272 = (JSC::ARM64LogicalImmediate *)v10;
      v270 = v10 & 3;
      v11 = (uint64_t *)(v271 + (v270 << 6));
      v12 = *((unsigned int *)v11 + 3);
      if ((_DWORD)v12)
      {
        v13 = 0;
        while (2)
        {
          if (v13 < *((unsigned int *)v11 + 3))
          {
            v14 = *v11;
            v15 = (unsigned int *)(*v11 + 12 * v13);
            *((_DWORD *)this + 52) = 0;
            v17 = (unsigned __int8 *)(v15 + 2);
            v16 = *((unsigned __int8 *)v15 + 8);
            switch(*((_BYTE *)v15 + 8))
            {
              case 0x83:
              case 0x87:
                v18 = *v15;
                v19 = *((_DWORD *)this + 50);
                if (v19 < *((_DWORD *)this + 13))
                {
                  do
                  {
                    if ((v19 + 4) > *((_DWORD *)this + 48))
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                      v19 = *((_DWORD *)this + 50);
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v19) = -721215457;
                    v19 = *((_DWORD *)this + 50) + 4;
                    *((_DWORD *)this + 50) = v19;
                  }
                  while (v19 < *((_DWORD *)this + 13));
                  v16 = *v17;
                }
                v20 = (_BYTE *)(v14 + 12 * v13);
                v21 = v20[9];
                v22 = v20[10];
                LOBYTE(v20) = v20[11];
                *(_QWORD *)&v289 = v18;
                *((_QWORD *)&v289 + 1) = v19;
                BYTE3(v290) = v21 & 0xF;
                *(_WORD *)((char *)&v290 + 1) = v16;
                WORD2(v290) = v22 << 6;
                LOBYTE(v290) = (_BYTE)v20;
                v23 = *((unsigned int *)this + 11);
                if ((_DWORD)v23 != *((_DWORD *)this + 10))
                  goto LABEL_14;
                goto LABEL_19;
              case 0x84:
              case 0x88:
                v24 = *v15;
                v25 = *((_DWORD *)this + 50);
                if (v25 < *((_DWORD *)this + 13))
                {
                  do
                  {
                    if ((v25 + 4) > *((_DWORD *)this + 48))
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                      v25 = *((_DWORD *)this + 50);
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v25) = -721215457;
                    v25 = *((_DWORD *)this + 50) + 4;
                    *((_DWORD *)this + 50) = v25;
                  }
                  while (v25 < *((_DWORD *)this + 13));
                  v16 = *v17;
                }
                v26 = v14 + 12 * v13;
                v27 = *(_BYTE *)(v26 + 9);
                v28 = *(_WORD *)(v26 + 4);
                LOBYTE(v26) = *(_BYTE *)(v26 + 11);
                *(_QWORD *)&v289 = v24;
                *((_QWORD *)&v289 + 1) = v25;
                BYTE3(v290) = v27 & 0xF;
                *(_WORD *)((char *)&v290 + 1) = v16;
                WORD2(v290) = v28 & 0x3F;
                LOBYTE(v290) = v26;
                v23 = *((unsigned int *)this + 11);
                if ((_DWORD)v23 != *((_DWORD *)this + 10))
                  goto LABEL_14;
                goto LABEL_19;
              default:
                v32 = *v15;
                v33 = *((_DWORD *)this + 50);
                if (v33 < *((_DWORD *)this + 13))
                {
                  do
                  {
                    if ((v33 + 4) > *((_DWORD *)this + 48))
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                      v33 = *((_DWORD *)this + 50);
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v33) = -721215457;
                    v33 = *((_DWORD *)this + 50) + 4;
                    *((_DWORD *)this + 50) = v33;
                  }
                  while (v33 < *((_DWORD *)this + 13));
                  v16 = *v17;
                }
                v34 = *(_BYTE *)(v14 + 12 * v13 + 9);
                LOBYTE(v290) = -1;
                *(_QWORD *)&v289 = v32;
                *((_QWORD *)&v289 + 1) = v33;
                BYTE3(v290) = v34 & 0xF;
                *(_WORD *)((char *)&v290 + 1) = v16;
                WORD2(v290) = 0;
                v23 = *((unsigned int *)this + 11);
                if ((_DWORD)v23 == *((_DWORD *)this + 10))
                {
LABEL_19:
                  v35 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 32, v23 + 1, (unint64_t)&v289, a4, a5, a6, a7, a8);
                  v29 = *((_QWORD *)this + 4) + 24 * *((unsigned int *)this + 11);
                  *(_QWORD *)v29 = 0;
                  *(_QWORD *)(v29 + 8) = 0;
                  *(_BYTE *)(v29 + 16) = -1;
                  v36 = (((*(unsigned __int8 *)(v29 + 19) >> 4) & 0xF) << 20) | 0xF0041;
                  *(_WORD *)(v29 + 17) = 65;
                  *(_BYTE *)(v29 + 19) = BYTE2(v36);
                  *(_WORD *)(v29 + 20) &= 0xFC00u;
                  v30 = *(_OWORD *)v35;
                  v31 = *(_QWORD *)(v35 + 16);
                }
                else
                {
LABEL_14:
                  v29 = *((_QWORD *)this + 4) + 24 * v23;
                  v30 = v289;
                  v31 = v290;
                }
                *(_QWORD *)(v29 + 16) = v31;
                *(_OWORD *)v29 = v30;
                ++*((_DWORD *)this + 11);
                if (++v13 == v12)
                  goto LABEL_22;
                continue;
            }
          }
          break;
        }
        __break(0xC471u);
        JUMPOUT(0x19841B834);
      }
      for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
      {
        if ((i + 4) > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          i = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
        i = *((_DWORD *)this + 50) + 4;
      }
      *((_DWORD *)this + 52) = 0;
      *(_DWORD *)(v271 + (v270 << 6) + 44) = i;
LABEL_22:
      v38 = *((_QWORD *)this + 44);
      if (((*(_DWORD *)(*(_QWORD *)(v38 + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
        break;
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, v272, 27, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v271 + (v270 << 6) + 44) == -1)
      {
        JSC::ARM64Assembler::label((_DWORD *)this + 8, v239, v240, v241, v242, v243, v244, v245, (int *)&v289);
        JSC::AssemblerBuffer::putInt(v269, 335544320, v261, v262, v263, v264, v265, v266);
        if (*((_BYTE *)this + 328))
          v267 = 69;
        else
          v267 = 65;
        v273[0] = v289;
        v273[1] = 0;
        v274 = v267;
        v275 = 15;
        v276 = -1;
        v259 = &v284;
        v260 = v273;
      }
      else
      {
        JSC::ARM64Assembler::label((_DWORD *)this + 8, v239, v240, v241, v242, v243, v244, v245, (int *)&v289);
        JSC::AssemblerBuffer::putInt(v269, 335544320, v246, v247, v248, v249, v250, v251);
        if (*((_BYTE *)this + 328))
          v258 = 69;
        else
          v258 = 65;
        v277[0] = v289;
        v277[1] = 0;
        v278 = v258;
        v279 = 15;
        v280 = -1;
        v259 = &v281;
        v260 = v277;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v259, v260, v252, v253, v254, v255, v256, v257);
      LODWORD(v40) = (_DWORD)v272;
LABEL_111:
      v10 = ((_DWORD)v40 + 1);
      if (*((_DWORD *)this + 963) <= v10)
        goto LABEL_285;
    }
    v39 = *(_QWORD *)(v38 + 16) + 90536;
    v40 = v272;
    if ((_DWORD)v272)
    {
      if (!*((_BYTE *)this + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x19841AEF4);
      }
      if ((*(_DWORD *)(*((_QWORD *)this + 33) + 208) & *((_DWORD *)this + 72)) != 0)
      {
        v41 = *((_QWORD *)this + 35);
        if (v41 == (int)v272)
          goto LABEL_93;
        v42 = JSC::ARM64LogicalImmediate::create32(v272);
        if (v42 != -1)
        {
          v43 = v42;
          v44 = *((char *)this + 272);
          v45 = *((_DWORD *)this + 50);
          if (v45 + 4 > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v45 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v45) = v44 | (v43 << 10) | 0x320003E0;
          *((_DWORD *)this + 50) += 4;
          LODWORD(v40) = (_DWORD)v272;
          goto LABEL_92;
        }
        v60 = v41 ^ (unsigned __int16)v272;
        v40 = v272;
        if (!((v41 ^ (unint64_t)(int)v272) >> 32))
        {
          if ((v272 & 0xFFFF0000) != (unint64_t)(v41 & 0xFFFF0000))
          {
            v61 = *((_BYTE *)this + 272);
            v62 = *((_DWORD *)this + 50);
            if (v62 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
              v62 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v62) = ((v272 & 0xFFFF0000) >> 11) | 0x72A00000 | v61 & 0x1F;
            *((_DWORD *)this + 50) += 4;
          }
          LODWORD(v40) = (_DWORD)v272;
          if (v60)
          {
            v63 = *((_BYTE *)this + 272);
            v64 = *((_DWORD *)this + 50);
            if (v64 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
              v64 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v64) = v63 & 0x1F | (32 * (unsigned __int16)v272) | 0x72800000;
            *((_DWORD *)this + 50) += 4;
          }
          goto LABEL_92;
        }
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, v40, *((char *)this + 272), a4, a5, a6, a7, a8);
LABEL_92:
      *((_QWORD *)this + 35) = (int)v272;
      *(_DWORD *)(*((_QWORD *)this + 33) + 208) |= *((_DWORD *)this + 72);
      if (!*((_BYTE *)this + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x19841AF14);
      }
LABEL_93:
      if ((*(_DWORD *)(*((_QWORD *)this + 37) + 208) & *((_DWORD *)this + 80)) == 0)
        goto LABEL_94;
      v83 = *((_QWORD *)this + 39);
      v84 = v39 - v83;
      if (v39 - v83 == (_DWORD)v39 - (_DWORD)v83)
      {
        if (v84 + 256 <= 0x1FF)
        {
          v85 = *((_DWORD *)this + 50);
          if (v85 + 4 > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v85 = *((_DWORD *)this + 50);
          }
          v86 = (v84 & 0x1FF) << 12;
          v87 = -1207958992;
LABEL_157:
          *(_DWORD *)(*((_QWORD *)this + 7) + v85) = v86 | v87;
LABEL_104:
          *((_DWORD *)this + 50) += 4;
LABEL_105:
          *((_BYTE *)this + 328) = 1;
          for (j = *((_DWORD *)this + 50); j < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = j)
          {
            if ((j + 4) > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
              j = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + j) = -721215457;
            j = *((_DWORD *)this + 50) + 4;
          }
          v71 = j;
          if ((j + 4) > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v71 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v71) = 335544320;
          *((_DWORD *)this + 50) += 4;
          v72 = 0xFF000F4500000000;
          if (!*((_BYTE *)this + 328))
            v72 = 0xFF000F4100000000;
          *((_BYTE *)this + 328) = 0;
          v73 = v271 + (v270 << 6);
          *(_DWORD *)(v73 + 48) = j;
          *(_QWORD *)(v73 + 52) = v72;
          goto LABEL_111;
        }
        if (v84 <= 0x3FFC && (v84 & 3) == 0)
        {
          v168 = (((v84 >> 2) & 0xFFF) << 10) | 0xB9000230;
LABEL_355:
          JSC::AssemblerBuffer::putInt(v269, v168, a3, a4, a5, a6, a7, a8);
          goto LABEL_105;
        }
      }
      if ((v83 ^ (unint64_t)v39) >> 16)
      {
LABEL_94:
        if (v39 == -1)
        {
          v65 = *((_DWORD *)this + 50);
          v66 = v65 + 4;
          v67 = *((_DWORD *)this + 48);
          v68 = -1837105135;
          goto LABEL_98;
        }
        if (!v39)
        {
          v65 = *((_DWORD *)this + 50);
          v66 = v65 + 4;
          v67 = *((_DWORD *)this + 48);
          v68 = -763363311;
          goto LABEL_98;
        }
        v74 = v39 ^ (v39 >> 63);
        v75 = HIDWORD(v74);
        if (!HIDWORD(v74))
          v75 = v39 ^ (v39 >> 63);
        if (v75 < 0x10000)
        {
          v76 = 32 * (HIDWORD(v74) != 0);
        }
        else
        {
          v75 >>= 16;
          v76 = (32 * (HIDWORD(v74) != 0)) | 0x10;
        }
        if (v75 >= 0x100)
        {
          v75 >>= 8;
          v76 |= 8u;
        }
        if (v75 >= 0x10)
        {
          v75 >>= 4;
          v76 |= 4u;
        }
        if (v75 >= 4)
        {
          v75 >>= 2;
          v76 += 2;
        }
        if (v75 <= 1)
          v77 = v76;
        else
          v77 = v76 + 1;
        a2 = (void *)HIDWORD(v39);
        v78 = (0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v77) ^ v74;
        if (v78)
        {
          v79 = HIDWORD(v78);
          if (!HIDWORD(v78))
            v79 = v78;
          if (v79 < 0x10000)
          {
            v80 = 32 * (HIDWORD(v78) != 0);
          }
          else
          {
            v79 >>= 16;
            v80 = (32 * (HIDWORD(v78) != 0)) | 0x10;
          }
          if (v79 >= 0x100)
          {
            v79 >>= 8;
            v80 |= 8u;
          }
          if (v79 >= 0x10)
          {
            v79 >>= 4;
            v80 |= 4u;
          }
          if (v79 >= 4)
          {
            v79 >>= 2;
            v80 += 2;
          }
          if (v79 <= 1)
            v81 = v80;
          else
            v81 = v80 + 1;
          if (v78 != 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v81)
          {
            if ((_DWORD)v39 != HIDWORD(v39))
              goto LABEL_144;
            v129 = JSC::ARM64LogicalImmediate::create32((JSC::ARM64LogicalImmediate *)v39);
            a2 = (void *)HIDWORD(v39);
LABEL_281:
            if (v129 != -1)
            {
              v68 = (v129 << 10) | 0xB20003F1;
              goto LABEL_283;
            }
LABEL_144:
            if ((unsigned __int16)v39 == 0xFFFF)
              v82 = -1;
            else
              v82 = 0;
            if (!(_WORD)v39)
              v82 = 1;
            if (WORD1(v39))
            {
              if (WORD1(v39) == 0xFFFF)
                --v82;
            }
            else
            {
              ++v82;
            }
            if (WORD2(v39))
            {
              if (WORD2(v39) == 0xFFFF)
                --v82;
            }
            else
            {
              ++v82;
            }
            v88 = HIWORD(v39);
            if (HIWORD(v39))
            {
              if ((_DWORD)v88 == 0xFFFF)
                --v82;
            }
            else
            {
              ++v82;
            }
            if ((v82 & 0x80000000) == 0)
            {
              if ((_WORD)v39)
              {
                v89 = *((_DWORD *)this + 50);
                if (v89 + 4 > *((_DWORD *)this + 48))
                {
                  v138 = a2;
                  JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                  a2 = v138;
                  v89 = *((_DWORD *)this + 50);
                }
                *(_DWORD *)(*((_QWORD *)this + 7) + v89) = (32 * (unsigned __int16)v39) | 0xD2800011;
                v90 = *((_DWORD *)this + 50);
                v91 = v90 + 4;
                *((_DWORD *)this + 50) = v90 + 4;
                if (WORD1(v39))
                {
                  v92 = (32 * WORD1(v39)) | 0xF2A00011;
                  v93 = v90 + 8;
LABEL_172:
                  if (v93 > *((_DWORD *)this + 48))
                  {
                    v139 = a2;
                    JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                    a2 = v139;
                    v91 = *((_DWORD *)this + 50);
                  }
                  v94 = 0;
                  *(_DWORD *)(*((_QWORD *)this + 7) + v91) = v92;
                  *((_DWORD *)this + 50) += 4;
                  goto LABEL_175;
                }
                v94 = 0;
              }
              else
              {
                if (WORD1(v39))
                {
                  v92 = (32 * WORD1(v39)) | 0xD2A00011;
                  v91 = *((_DWORD *)this + 50);
                  v93 = v91 + 4;
                  goto LABEL_172;
                }
                v94 = 1;
              }
LABEL_175:
              if (!WORD2(v39))
              {
                LODWORD(v40) = (_DWORD)v272;
                if (!(_DWORD)v88)
                  goto LABEL_100;
                v65 = *((_DWORD *)this + 50);
                if ((v94 & 1) != 0)
                  v97 = -757071855;
                else
                  v97 = -220200943;
                v68 = (32 * v88) | v97;
                if (v65 + 4 <= *((_DWORD *)this + 48))
                {
LABEL_99:
                  *(_DWORD *)(*((_QWORD *)this + 7) + v65) = v68;
                  *((_DWORD *)this + 50) += 4;
LABEL_100:
                  if (!*((_BYTE *)this + 212))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19841AF34);
                  }
                  *((_QWORD *)this + 39) = v39;
                  *(_DWORD *)(*((_QWORD *)this + 37) + 208) |= *((_DWORD *)this + 80);
                  v69 = *((_DWORD *)this + 50);
                  if (v69 + 4 > *((_DWORD *)this + 48))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                    v69 = *((_DWORD *)this + 50);
                  }
                  *(_DWORD *)(*((_QWORD *)this + 7) + v69) = -1203803600;
                  goto LABEL_104;
                }
LABEL_312:
                JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                v65 = *((_DWORD *)this + 50);
                goto LABEL_99;
              }
              v95 = *((_DWORD *)this + 50);
              if ((v94 & 1) != 0)
                v96 = -759169007;
              else
                v96 = -222298095;
              v109 = (32 * (unsigned __int16)a2) | v96;
              LODWORD(v40) = (_DWORD)v272;
              if (v95 + 4 > *((_DWORD *)this + 48))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                v95 = *((_DWORD *)this + 50);
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v95) = v109;
              v110 = *((_DWORD *)this + 50);
              v65 = v110 + 4;
              *((_DWORD *)this + 50) = v110 + 4;
              if (!(_DWORD)v88)
                goto LABEL_100;
              v66 = v110 + 8;
              v67 = *((_DWORD *)this + 48);
              v68 = (32 * v88) | 0xF2E00011;
LABEL_98:
              if (v66 <= v67)
                goto LABEL_99;
              goto LABEL_312;
            }
            if ((unsigned __int16)v39 == 0xFFFF)
            {
              if (WORD1(v39) == 0xFFFF)
              {
                if (WORD2(v39) != 0xFFFF)
                {
                  v65 = *((_DWORD *)this + 50);
                  v134 = v65 + 4;
                  v135 = *((_DWORD *)this + 48);
                  v136 = (32 * (WORD2(v39) ^ 0xFFFF)) | 0x92C00011;
                  goto LABEL_257;
                }
                LODWORD(v40) = (_DWORD)v272;
                if ((_DWORD)v88 == 0xFFFF)
                  goto LABEL_100;
                v68 = (32 * (v88 ^ 0xFFFF)) | 0x92E00011;
LABEL_283:
                v65 = *((_DWORD *)this + 50);
LABEL_262:
                v66 = v65 + 4;
                v67 = *((_DWORD *)this + 48);
                goto LABEL_98;
              }
              v113 = (32 * (WORD1(v39) ^ 0xFFFF)) | 0x92A00011;
              v65 = *((_DWORD *)this + 50);
              v114 = v65 + 4;
            }
            else
            {
              v111 = *((_DWORD *)this + 50);
              if (v111 + 4 > *((_DWORD *)this + 48))
              {
                v268 = a2;
                JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                a2 = v268;
                v111 = *((_DWORD *)this + 50);
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v111) = (32 * ((unsigned __int16)v39 ^ 0xFFFF)) | 0x92800011;
              v112 = *((_DWORD *)this + 50);
              v65 = v112 + 4;
              *((_DWORD *)this + 50) = v112 + 4;
              if (WORD1(v39) == 0xFFFF)
                goto LABEL_254;
              v113 = (32 * WORD1(v39)) | 0xF2A00011;
              v114 = v112 + 8;
            }
            if (v114 > *((_DWORD *)this + 48))
            {
              v167 = a2;
              JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
              a2 = v167;
              v65 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v65) = v113;
            v65 = *((_DWORD *)this + 50) + 4;
            *((_DWORD *)this + 50) = v65;
LABEL_254:
            if (WORD2(v39) == 0xFFFF)
            {
              LODWORD(v40) = (_DWORD)v272;
LABEL_260:
              if ((_DWORD)v88 == 0xFFFF)
                goto LABEL_100;
              v68 = (32 * v88) | 0xF2E00011;
              goto LABEL_262;
            }
            v134 = v65 + 4;
            v135 = *((_DWORD *)this + 48);
            v136 = (32 * (unsigned __int16)a2) | 0xF2C00011;
LABEL_257:
            LODWORD(v40) = (_DWORD)v272;
            if (v134 > v135)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
              v65 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v65) = v136;
            v65 = *((_DWORD *)this + 50) + 4;
            *((_DWORD *)this + 50) = v65;
            goto LABEL_260;
          }
          LODWORD(v78) = v81 + 1;
        }
        v125 = 63 - v77;
        v126 = v77 - v78;
        v127 = v78 - v77 + 62;
        if (v39 < 0)
        {
          v128 = v125;
        }
        else
        {
          v127 = v126;
          v128 = -(int)v78 & 0x3F;
        }
        v129 = v127 | (v128 << 6) | 0x1000;
        goto LABEL_281;
      }
      JSC::AssemblerBuffer::putInt(v269, (32 * (unsigned __int16)v39) | 0xF2800011, a3, a4, a5, a6, a7, a8);
      if (!*((_BYTE *)this + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x19841B86CLL);
      }
      *((_QWORD *)this + 39) = v39;
      *(_DWORD *)(*((_QWORD *)this + 37) + 208) |= *((_DWORD *)this + 80);
      v175 = (JSC::DFG::JITCompiler *)((char *)this + 56);
      v176 = 3091163696;
LABEL_359:
      JSC::AssemblerBuffer::putInt(v175, v176, v169, v170, v171, v172, v173, v174);
      LODWORD(v40) = (_DWORD)v272;
      goto LABEL_105;
    }
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19841AF94);
    }
    if ((*(_DWORD *)(*((_QWORD *)this + 37) + 208) & *((_DWORD *)this + 80)) != 0)
    {
      v98 = *((_QWORD *)this + 39);
      v99 = v39 - v98;
      if (v39 - v98 == (_DWORD)v39 - (_DWORD)v98)
      {
        if (v99 + 256 <= 0x1FF)
        {
          v85 = *((_DWORD *)this + 50);
          if (v85 + 4 > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v85 = *((_DWORD *)this + 50);
          }
          v86 = (v99 & 0x1FF) << 12;
          v87 = -1207958977;
          goto LABEL_157;
        }
        if (v99 <= 0x3FFC && (v99 & 3) == 0)
        {
          v168 = (((v99 >> 2) & 0xFFF) << 10) | 0xB900023F;
          goto LABEL_355;
        }
      }
      if (!((v98 ^ (unint64_t)v39) >> 16))
      {
        JSC::AssemblerBuffer::putInt(v269, (32 * (unsigned __int16)v39) | 0xF2800011, a3, a4, a5, a6, a7, a8);
        if (!*((_BYTE *)this + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x19841B88CLL);
        }
        *((_QWORD *)this + 39) = v39;
        *(_DWORD *)(*((_QWORD *)this + 37) + 208) |= *((_DWORD *)this + 80);
        v176 = 3091163711;
        v175 = (JSC::DFG::JITCompiler *)((char *)this + 56);
        goto LABEL_359;
      }
    }
    if (v39 == -1)
    {
      v46 = *((_DWORD *)this + 50);
      v47 = v46 + 4;
      v48 = *((_DWORD *)this + 48);
      v49 = -1837105135;
      goto LABEL_37;
    }
    if (!v39)
    {
      v46 = *((_DWORD *)this + 50);
      v47 = v46 + 4;
      v48 = *((_DWORD *)this + 48);
      v49 = -763363311;
      goto LABEL_37;
    }
    v51 = v39 ^ (v39 >> 63);
    v52 = HIDWORD(v51);
    if (!HIDWORD(v51))
      v52 = v39 ^ (v39 >> 63);
    if (v52 < 0x10000)
    {
      v53 = 32 * (HIDWORD(v51) != 0);
    }
    else
    {
      v52 >>= 16;
      v53 = (32 * (HIDWORD(v51) != 0)) | 0x10;
    }
    if (v52 >= 0x100)
    {
      v52 >>= 8;
      v53 |= 8u;
    }
    if (v52 >= 0x10)
    {
      v52 >>= 4;
      v53 |= 4u;
    }
    if (v52 >= 4)
    {
      v52 >>= 2;
      v53 += 2;
    }
    if (v52 <= 1)
      v54 = v53;
    else
      v54 = v53 + 1;
    v55 = (0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v54) ^ v51;
    if (v55)
    {
      v56 = HIDWORD(v55);
      if (!HIDWORD(v55))
        v56 = v55;
      if (v56 < 0x10000)
      {
        v57 = 32 * (HIDWORD(v55) != 0);
      }
      else
      {
        v56 >>= 16;
        v57 = (32 * (HIDWORD(v55) != 0)) | 0x10;
      }
      if (v56 >= 0x100)
      {
        v56 >>= 8;
        v57 |= 8u;
      }
      if (v56 >= 0x10)
      {
        v56 >>= 4;
        v57 |= 4u;
      }
      if (v56 >= 4)
      {
        v56 >>= 2;
        v57 += 2;
      }
      if (v56 <= 1)
        v58 = v57;
      else
        v58 = v57 + 1;
      if (v55 != 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v58)
      {
        if ((_DWORD)v39 != HIDWORD(v39))
          goto LABEL_74;
        v124 = JSC::ARM64LogicalImmediate::create32((JSC::ARM64LogicalImmediate *)v39);
LABEL_271:
        if (v124 != -1)
        {
          v49 = (v124 << 10) | 0xB20003F1;
          goto LABEL_284;
        }
LABEL_74:
        if ((unsigned __int16)v39 == 0xFFFF)
          v59 = -1;
        else
          v59 = 0;
        if (!(_WORD)v39)
          v59 = 1;
        if (WORD1(v39))
        {
          if (WORD1(v39) == 0xFFFF)
            --v59;
        }
        else
        {
          ++v59;
        }
        if (WORD2(v39))
        {
          if (WORD2(v39) == 0xFFFF)
            --v59;
        }
        else
        {
          ++v59;
        }
        v100 = HIWORD(v39);
        if (HIWORD(v39))
        {
          if ((_DWORD)v100 == 0xFFFF)
            --v59;
        }
        else
        {
          ++v59;
        }
        if ((v59 & 0x80000000) == 0)
        {
          if ((_WORD)v39)
          {
            v101 = *((_DWORD *)this + 50);
            if (v101 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
              v101 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v101) = (32 * (unsigned __int16)v39) | 0xD2800011;
            v102 = *((_DWORD *)this + 50);
            v103 = v102 + 4;
            *((_DWORD *)this + 50) = v102 + 4;
            if (WORD1(v39))
            {
              v104 = (32 * WORD1(v39)) | 0xF2A00011;
              v105 = v102 + 8;
LABEL_207:
              if (v105 > *((_DWORD *)this + 48))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                v103 = *((_DWORD *)this + 50);
              }
              v106 = 0;
              *(_DWORD *)(*((_QWORD *)this + 7) + v103) = v104;
              *((_DWORD *)this + 50) += 4;
              goto LABEL_210;
            }
            v106 = 0;
          }
          else
          {
            if (WORD1(v39))
            {
              v104 = (32 * WORD1(v39)) | 0xD2A00011;
              v103 = *((_DWORD *)this + 50);
              v105 = v103 + 4;
              goto LABEL_207;
            }
            v106 = 1;
          }
LABEL_210:
          if (!WORD2(v39))
          {
            if (!(_DWORD)v100)
              goto LABEL_39;
            v46 = *((_DWORD *)this + 50);
            if ((v106 & 1) != 0)
              v137 = -757071855;
            else
              v137 = -220200943;
            v49 = (32 * v100) | v137;
            if (v46 + 4 <= *((_DWORD *)this + 48))
            {
LABEL_38:
              *(_DWORD *)(*((_QWORD *)this + 7) + v46) = v49;
              *((_DWORD *)this + 50) += 4;
LABEL_39:
              if (!*((_BYTE *)this + 212))
              {
                __break(0xC471u);
                JUMPOUT(0x19841AFB4);
              }
              *((_QWORD *)this + 39) = v39;
              *(_DWORD *)(*((_QWORD *)this + 37) + 208) |= *((_DWORD *)this + 80);
              v50 = *((_DWORD *)this + 50);
              if (v50 + 4 > *((_DWORD *)this + 48))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                v50 = *((_DWORD *)this + 50);
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v50) = -1203803585;
              *((_DWORD *)this + 50) += 4;
              LODWORD(v40) = (_DWORD)v272;
              goto LABEL_105;
            }
LABEL_315:
            JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v46 = *((_DWORD *)this + 50);
            goto LABEL_38;
          }
          v107 = *((_DWORD *)this + 50);
          if ((v106 & 1) != 0)
            v108 = -759169007;
          else
            v108 = -222298095;
          v115 = (32 * WORD2(v39)) | v108;
          if (v107 + 4 > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v107 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v107) = v115;
          v116 = *((_DWORD *)this + 50);
          v46 = v116 + 4;
          *((_DWORD *)this + 50) = v116 + 4;
          if (!(_DWORD)v100)
            goto LABEL_39;
          v47 = v116 + 8;
          v48 = *((_DWORD *)this + 48);
          v49 = (32 * v100) | 0xF2E00011;
LABEL_37:
          if (v47 <= v48)
            goto LABEL_38;
          goto LABEL_315;
        }
        if ((unsigned __int16)v39 != 0xFFFF)
        {
          v118 = *((_DWORD *)this + 50);
          if (v118 + 4 > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v118 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v118) = (32 * ((unsigned __int16)v39 ^ 0xFFFF)) | 0x92800011;
          v119 = *((_DWORD *)this + 50);
          v46 = v119 + 4;
          *((_DWORD *)this + 50) = v119 + 4;
          if (WORD1(v39) == 0xFFFF)
          {
LABEL_240:
            if (WORD2(v39) == 0xFFFF)
            {
LABEL_243:
              if ((_DWORD)v100 == 0xFFFF)
                goto LABEL_39;
              v49 = (32 * v100) | 0xF2E00011;
              goto LABEL_245;
            }
            v117 = (32 * WORD2(v39)) | 0xF2C00011;
            if (v46 + 4 <= *((_DWORD *)this + 48))
            {
LABEL_242:
              *(_DWORD *)(*((_QWORD *)this + 7) + v46) = v117;
              v46 = *((_DWORD *)this + 50) + 4;
              *((_DWORD *)this + 50) = v46;
              goto LABEL_243;
            }
LABEL_304:
            JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v46 = *((_DWORD *)this + 50);
            goto LABEL_242;
          }
          v132 = (32 * WORD1(v39)) | 0xF2A00011;
          v133 = v119 + 8;
LABEL_237:
          if (v133 > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v269, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v46 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v46) = v132;
          v46 = *((_DWORD *)this + 50) + 4;
          *((_DWORD *)this + 50) = v46;
          goto LABEL_240;
        }
        if (WORD1(v39) != 0xFFFF)
        {
          v132 = (32 * (WORD1(v39) ^ 0xFFFF)) | 0x92A00011;
          v46 = *((_DWORD *)this + 50);
          v133 = v46 + 4;
          goto LABEL_237;
        }
        if (WORD2(v39) != 0xFFFF)
        {
          v46 = *((_DWORD *)this + 50);
          v117 = (32 * (WORD2(v39) ^ 0xFFFF)) | 0x92C00011;
          if (v46 + 4 <= *((_DWORD *)this + 48))
            goto LABEL_242;
          goto LABEL_304;
        }
        if ((_DWORD)v100 == 0xFFFF)
          goto LABEL_39;
        v49 = (32 * (v100 ^ 0xFFFF)) | 0x92E00011;
LABEL_284:
        v46 = *((_DWORD *)this + 50);
LABEL_245:
        v47 = v46 + 4;
        v48 = *((_DWORD *)this + 48);
        goto LABEL_37;
      }
      LODWORD(v55) = v58 + 1;
    }
    v120 = 63 - v54;
    v121 = v54 - v55;
    v122 = v55 - v54 + 62;
    if (v39 < 0)
    {
      v123 = v120;
    }
    else
    {
      v122 = v121;
      v123 = -(int)v55 & 0x3F;
    }
    v124 = v122 | (v123 << 6) | 0x1000;
    goto LABEL_271;
  }
LABEL_285:
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 24) + 16) - 1) & 0xFFFFFFFD) == 0)
  {
    if (HIDWORD(v282))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v281, (uint64_t)this, a3, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::load64((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 44) + 16) + 90480, 28, v178, v179, v180, v181, v182);
      JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 28, 0xFFFFFFFFLL, v183, v184, v185, v186, (uint64_t)&v289, v187);
      JSC::MacroAssemblerARM64::move(this, 28, 26, v188, v189, v190, v191, v192);
      JSC::MacroAssemblerARM64::load64((uint64_t)this, 0x100000001ALL, 26, v193, v194, v195, v196, v197);
      JSC::MacroAssemblerARM64::load64((uint64_t)this, 0x800000001ALL, 26, v198, v199, v200, v201, v202);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v289, (uint64_t)this, v203, v204, v205, v206, v207, v208);
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v284, (uint64_t)this, a3, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::store32((uint64_t)this, 27, (JSC::ARM64LogicalImmediate *)(*(_QWORD *)(*((_QWORD *)this + 44) + 16) + 90536), v209, v210, v211, v212, v213);
    JSC::MacroAssemblerARM64::load64((uint64_t)this, 0x280000001ALL, 26, v214, v215, v216, v217, v218);
    v226 = *((_DWORD *)this + 50);
    if (v226 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::JITCompiler *)((char *)this + 56), v219, v220, v221, v222, v223, v224, v225);
      v226 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v226) = -746786949;
    *((_DWORD *)this + 50) += 4;
    JSC::MacroAssemblerARM64::add64(this, 27, 26, v221, v222, v223, v224, v225);
    JSC::AssemblyHelpers::emitMaterializeTagCheckRegisters(this, v227, v228, v229, v230, v231, v232, v233);
    JSC::MacroAssemblerARM64::farJump((uint64_t)this, 0x80000001ALL, 57886, v234, v235, v236, v237, v238);
  }
  v130 = v281;
  if (v283 != (_BYTE *)v281 && v281)
  {
    v281 = 0;
    LODWORD(v282) = 0;
    WTF::fastFree((unint64_t)v130, a2, a3, a4, a5, a6, a7, a8);
  }
  v131 = v284;
  if (v286 != (_BYTE *)v284)
  {
    if (v284)
    {
      v284 = 0;
      LODWORD(v285) = 0;
      WTF::fastFree((unint64_t)v131, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::AssemblyHelpers::emitMaterializeTagCheckRegisters(JSC::AssemblyHelpers *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;

  v9 = *((_DWORD *)this + 50);
  if (v9 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblyHelpers *)((char *)this + 56), a2, a3, a4, a5, a6, a7, a8);
    v9 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v9) = -1303430149;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::or64((uint64_t)this, 2, 27, 28);
}

void JSC::DFG::JITCompiler::compileSetupRegistersForEntry(JSC::DFG::JITCompiler *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  char v28;
  char **v29;
  char *v30;

  v9 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
  if (v9 != -1)
  {
    v30 = &v28;
    v29 = &v30;
    std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, &v29, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
  }
  JSC::AssemblyHelpers::emitSaveCalleeSavesFor(this, (const JSC::RegisterAtOffsetList *)&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result, a3, a4, a5, a6, a7, a8);
  v17 = *((_DWORD *)this + 50);
  if (v17 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::JITCompiler *)((char *)this + 56), v10, v11, v12, v13, v14, v15, v16);
    v17 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v17) = -1303430149;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::or64((uint64_t)this, 2, 27, 28);
  v25 = *((_DWORD *)this + 50);
  if (v25 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::JITCompiler *)((char *)this + 56), v18, v19, v20, v21, v22, v23, v24);
    v25 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v25) = -129956934;
  v26 = *((_DWORD *)this + 50);
  v27 = v26 + 4;
  *((_DWORD *)this + 50) = v26 + 4;
  if ((v26 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::JITCompiler *)((char *)this + 56), v18, v19, v20, v21, v22, v23, v24);
    v27 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v27) = -129498278;
  *((_DWORD *)this + 50) += 4;
}

void JSC::DFG::JITCompiler::link(JSC::DFG::JITCompiler *this, JSC::ExecutableAllocator **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::Graph *v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  JSC::DFG::Graph *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *i;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  unsigned int v41;
  JSC::ExecutableAllocator *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::ExecutableAllocator *JumpIslandToUsingJITMemcpy;
  JSC::ExecutableMemoryHandle *v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  __int128 *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  int *v69;
  int v70;
  int v71;
  JSC *v72;
  uint64_t v73;
  int v74;
  int v76;
  int v77;
  uint64_t v78;
  JSC::ExecutableAllocator *v79;
  JSC::ExecutableAllocator *v80;
  int v82;
  int v83;
  uint64_t v84;
  JSC::ExecutableAllocator *v85;
  unint64_t v86;
  char *v87;
  int v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  WTF *v92;
  __int128 v93;
  uint64_t v94;
  WTF *v95;
  uint64_t v96;
  uint64_t v97;
  _DWORD *v98;
  _DWORD *v99;
  uint64_t v100;
  unint64_t v101;
  WTF *v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  JSC::Profiler::Compilation *v106;
  JSC::Profiler::Compilation **v107;
  JSC::Profiler::Compilation *v108;
  uint64_t v109;
  unsigned int **v110;
  unint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int *v121;
  unint64_t v122;
  unsigned int *v123;
  _QWORD *v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  _DWORD *v145;
  _DWORD *v146;
  _QWORD *v147;
  unint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  _DWORD *v157;
  _DWORD *v158;
  _QWORD *v159;
  unint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  __int128 *v166;
  _OWORD *v167;
  uint64_t v168;
  __int128 v169;
  unint64_t v170;
  __int128 *v171;
  _OWORD *v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  _QWORD *v176;
  int v177;
  int v178;
  uint64_t v179;
  JSC::ExecutableAllocator *v180;
  JSC::ExecutableAllocator *v181;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _DWORD *v188;
  int v189;
  int v190;
  int v191;
  uint64_t v192;
  JSC::ExecutableAllocator *v193;
  unint64_t v194;
  _DWORD *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t j;
  uint64_t v209;
  int v210;
  int v211;
  uint64_t v212;
  JSC::ExecutableAllocator *v213;
  JSC::ExecutableAllocator *v214;
  uint64_t v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  __int128 v224;
  JSC::ExecutableAllocator *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _DWORD *v229;
  int v230;
  int v231;
  int v232;
  uint64_t v233;
  JSC::ExecutableAllocator *v234;
  unint64_t v235;
  unsigned int v237;
  int v238;
  int v239;
  unint64_t *v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _DWORD *v246;
  int v247;
  int v248;
  int v249;
  uint64_t v250;
  JSC::ExecutableAllocator *v251;
  unint64_t v252;
  unint64_t *v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _DWORD *v258;
  int v259;
  int v260;
  int v261;
  uint64_t v262;
  JSC::ExecutableAllocator *v263;
  unint64_t v264;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  _DWORD *v269;
  _DWORD *v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unsigned int *v275;
  uint64_t v276;
  unint64_t *v277;
  uint64_t v278;
  unint64_t v279;
  _DWORD *v280;
  _DWORD *v281;
  unint64_t v282;
  _DWORD *v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unsigned int *v289;
  uint64_t v290;
  unint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  _DWORD *v294;
  int v295;
  int v296;
  int v297;
  uint64_t v298;
  JSC::ExecutableAllocator *v299;
  unint64_t v300;
  uint64_t v302;
  uint64_t v303;
  _DWORD *v304;
  int v305;
  int v306;
  int v307;
  uint64_t v308;
  JSC::ExecutableAllocator *v309;
  unint64_t v310;
  uint64_t v312;
  uint64_t v313;
  _DWORD *v314;
  int v315;
  int v316;
  int v317;
  uint64_t v318;
  JSC::ExecutableAllocator *v319;
  unint64_t v320;
  uint64_t v322;
  uint64_t v323;
  _DWORD *v324;
  int v325;
  int v326;
  int v327;
  uint64_t v328;
  JSC::ExecutableAllocator *v329;
  unint64_t v330;
  uint64_t v332;
  _QWORD *v333;
  _QWORD *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  _QWORD *v341;
  _QWORD *v342;
  uint64_t v343;
  _QWORD *v344;
  unsigned int v345;
  char *v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  WTF *v350;
  JSC::ExecutableMemoryHandle *v351;
  void *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  _DWORD *v361;
  int v362;
  int v363;
  int v364;
  uint64_t v365;
  JSC::ExecutableAllocator *v366;
  unint64_t v367;
  uint64_t v369;
  uint64_t v370;
  _DWORD *v371;
  int v372;
  int v373;
  int v374;
  uint64_t v375;
  JSC::ExecutableAllocator *v376;
  unint64_t v377;
  uint64_t v379;
  uint64_t v380;
  _DWORD *v381;
  int v382;
  int v383;
  int v384;
  uint64_t v385;
  JSC::ExecutableAllocator *v386;
  unint64_t v387;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  JSC::ExecutableMemoryHandle *v393;
  unint64_t v394;
  int v395;
  int v396;
  uint64_t v397;
  JSC::ExecutableAllocator *v398;
  JSC::ExecutableAllocator *v399;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  void *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  _QWORD *v412;
  JSC::ExecutableMemoryHandle *v413;
  uint64_t v414;
  JSC::ExecutableMemoryHandle *v415;
  unint64_t v416;
  void *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  WTF::AtomStringImpl *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  unint64_t v434;
  uint64_t v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  void *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  _DWORD *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  void *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  _DWORD *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  void *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  JSC::ExecutableAllocator *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t *v490;
  unint64_t v491;
  unint64_t v492;
  unsigned int v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  WTF::StringImpl *v498;
  int v499;
  unsigned int v500;
  unsigned int v501;
  int v502;
  unsigned int v503;
  uint64_t v504;
  WTF *v505;
  int v506;
  unsigned int v507;
  unsigned int v508;
  uint64_t *v509;
  uint64_t v510;
  int v511;
  int v512;
  uint64_t v513;
  JSC::ExecutableAllocator *v514;
  JSC::ExecutableAllocator *v515;
  uint64_t v517;
  _DWORD *v518;
  uint64_t v519;
  unsigned int v520;
  BOOL v521;
  JSC::ExecutableAllocator **v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  _DWORD *v526;
  uint64_t v527;
  int v528;
  int v529;
  uint64_t v530;
  JSC::ExecutableAllocator *v531;
  JSC::ExecutableAllocator *v532;
  unsigned int **v534;
  uint64_t v535;
  unsigned int *v536;
  unsigned int *v537;
  unsigned int *v538;
  int v539;
  unsigned int v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t v546;
  int v547;
  int v548;
  uint64_t v549;
  JSC::ExecutableAllocator *v550;
  JSC::ExecutableAllocator *v551;
  int v553;
  int v554;
  unsigned int v555;
  uint64_t v556;
  uint64_t v557;
  _DWORD *v558;
  uint64_t v559;
  int v560;
  int v561;
  uint64_t v562;
  JSC::ExecutableAllocator *v563;
  JSC::ExecutableAllocator *v564;
  uint64_t v566;
  unsigned int *v567;
  uint64_t v568;
  uint64_t *v569;
  unsigned int v570;
  unsigned int v571;
  uint64_t v572;
  uint64_t v573;
  WTF::StringImpl *v574;
  _DWORD *v575;
  unint64_t v576;
  uint64_t v577;
  __int128 v578;
  WTF *v579;
  uint64_t v580;
  JSC::ExecutableMemoryHandle *v581[2];
  JSC::ExecutableAllocator *v582;

  v10 = (JSC::DFG::Graph *)*((_QWORD *)this + 44);
  *(_DWORD *)(*((_QWORD *)this + 46) + 240) = ((*((_DWORD *)v10 + 214) + *((_DWORD *)v10 + 215) + 3) & 0xFFFFFFFE) - 2;
  *(_DWORD *)(*((_QWORD *)this + 46) + 244) = JSC::DFG::Graph::requiredRegisterCountForExit(v10, a2, a3, a4, a5, a6, a7, a8);
  v18 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 24) + 128);
  v19 = (*(_DWORD *)v18)++;
  v20 = *(_QWORD *)(v18 + 8);
  if (v19)
  {
    *(_DWORD *)v18 = v19;
  }
  else
  {
    if (v20)
    {
      v240 = *(unint64_t **)(v18 + 8);
      do
      {
        v241 = (unint64_t *)v240[7];
        v242 = v240[2];
        if ((v242 & 1) != 0 && (v242 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v242 & 0xFFFFFFFF8, (void *)v11, (uint64_t)v12, v13, v14, v15, v16, v17);
        v243 = *v240;
        *v240 = 0;
        if (v243)
          WTF::fastFree(v243, (void *)v11, (uint64_t)v12, v13, v14, v15, v16, v17);
        WTF::fastFree((unint64_t)v240, (void *)v11, (uint64_t)v12, v13, v14, v15, v16, v17);
        v240 = v241;
      }
      while (v241);
    }
    *(_QWORD *)(v18 + 8) = 0;
    WTF::fastFree(v18, (void *)v11, (uint64_t)v12, v13, v14, v15, v16, v17);
  }
  if (v20)
  {
    v196 = *(_DWORD **)(*(_QWORD *)(*((_QWORD *)this + 44) + 24) + 128);
    if (v196)
      ++*v196;
    v197 = *((_QWORD *)this + 46);
    v198 = *(_QWORD *)(v197 + 72);
    *(_QWORD *)(v197 + 72) = v196;
    if (v198)
    {
      if (*(_DWORD *)v198 == 1)
      {
        v254 = *(unint64_t **)(v198 + 8);
        if (v254)
        {
          do
          {
            v490 = (unint64_t *)v254[7];
            v491 = v254[2];
            if ((v491 & 1) != 0 && (v491 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v491 & 0xFFFFFFFF8, (void *)v11, (uint64_t)v12, v13, v14, v15, v16, v17);
            v492 = *v254;
            *v254 = 0;
            if (v492)
              WTF::fastFree(v492, (void *)v11, (uint64_t)v12, v13, v14, v15, v16, v17);
            WTF::fastFree((unint64_t)v254, (void *)v11, (uint64_t)v12, v13, v14, v15, v16, v17);
            v254 = v490;
          }
          while (v490);
        }
        *(_QWORD *)(v198 + 8) = 0;
        WTF::fastFree(v198, (void *)v11, (uint64_t)v12, v13, v14, v15, v16, v17);
      }
      else
      {
        --*(_DWORD *)v198;
      }
    }
  }
  v21 = (JSC::DFG::Graph *)*((_QWORD *)this + 44);
  v22 = *((_QWORD *)v21 + 47);
  if (v22)
  {
    v11 = *(unsigned int *)(v22 - 12);
    if ((_DWORD)v11)
    {
      WTF::FixedVector<std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>::FixedVector(&v579, v11);
      v332 = *((_QWORD *)this + 44);
      v333 = WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::begin((_QWORD **)(v332 + 376));
      v341 = v333;
      v342 = v334;
      v343 = *(_QWORD *)(v332 + 376);
      if (v343)
        v344 = (_QWORD *)(v343 + 16 * *(unsigned int *)(v343 - 4));
      else
        v344 = 0;
      if (v344 != v333)
      {
        v345 = 0;
        do
        {
          if (*(_DWORD *)v579 <= v345)
          {
            __break(0xC471u);
            JUMPOUT(0x19841D994);
          }
          v346 = (char *)v579 + 8 * v345;
          v347 = v341[1];
          v341[1] = 0;
          v348 = *((_QWORD *)v346 + 1);
          *((_QWORD *)v346 + 1) = v347;
          if (v348)
            WTF::fastFree(v348, v334, v335, v336, v337, v338, v339, v340);
          while (1)
          {
            v341 += 2;
            if (v341 == v342)
              break;
            if ((unint64_t)(*v341 + 1) > 1)
              goto LABEL_354;
          }
          v341 = v342;
LABEL_354:
          ++v345;
        }
        while (v341 != v344);
      }
      v349 = *((_QWORD *)this + 46);
      v350 = v579;
      v579 = 0;
      v351 = *(JSC::ExecutableMemoryHandle **)(v349 + 176);
      *(_QWORD *)(v349 + 176) = v350;
      v581[0] = v351;
      WTF::FixedVector<std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>::~FixedVector((unsigned int **)v581, v334, v335, v336, v337, v338, v339, v340);
      WTF::FixedVector<std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>::~FixedVector((unsigned int **)&v579, v352, v353, v354, v355, v356, v357, v358);
      v21 = (JSC::DFG::Graph *)*((_QWORD *)this + 44);
    }
  }
  JSC::DFG::Graph::registerFrozenValues(v21, (_DWORD *)v11, v12, v13, v14, v15, v16, v17);
  v30 = *((_QWORD *)this + 44);
  v31 = *(unsigned int *)(v30 + 372);
  if ((_DWORD)v31)
  {
    v266 = *((_QWORD *)this + 46);
    v267 = *(_QWORD *)(v30 + 360);
    v268 = 8 * v31;
    *(_QWORD *)(v30 + 360) = 0;
    *(_QWORD *)(v30 + 368) = 0;
    v269 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v31 + 8));
    v270 = v269;
    v271 = 0;
    *v269 = v31;
    do
    {
      v272 = *(_QWORD *)(v267 + v271);
      *(_QWORD *)(v267 + v271) = 0;
      *(_QWORD *)&v269[v271 / 4 + 2] = v272;
      v271 += 8;
    }
    while (v268 != v271);
    v273 = 0;
    do
    {
      v274 = *(_QWORD *)(v267 + v273);
      *(_QWORD *)(v267 + v273) = 0;
      if (v274)
        WTF::fastFree(v274, v23, v24, v25, v26, v27, v28, v29);
      v273 += 8;
    }
    while (v268 != v273);
    if (v267)
      WTF::fastFree(v267, v23, v24, v25, v26, v27, v28, v29);
    v275 = *(unsigned int **)(v266 + 288);
    *(_QWORD *)(v266 + 288) = v270;
    if (v275)
    {
      v277 = (unint64_t *)(v275 + 2);
      v276 = *v275;
      if ((_DWORD)v276)
      {
        v433 = 8 * v276;
        do
        {
          v434 = *v277;
          *v277 = 0;
          if (v434)
            WTF::fastFree(v434, v23, v24, v25, v26, v27, v28, v29);
          ++v277;
          v433 -= 8;
        }
        while (v433);
      }
      WTF::fastFree((unint64_t)v275, v23, v24, v25, v26, v27, v28, v29);
    }
    v30 = *((_QWORD *)this + 44);
  }
  v32 = *(unsigned int *)(v30 + 340);
  if ((_DWORD)v32)
  {
    v278 = *((_QWORD *)this + 46);
    v279 = *(_QWORD *)(v30 + 328);
    *(_QWORD *)(v30 + 328) = 0;
    *(_QWORD *)(v30 + 336) = 0;
    v280 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * v32) | 8));
    v281 = v280;
    v282 = 0;
    *v280 = v32;
    do
    {
      v283 = &v280[v282 / 4];
      v284 = (_QWORD *)(v279 + v282);
      v285 = *(_QWORD *)(v279 + v282);
      *v284 = 0;
      *((_QWORD *)v283 + 1) = v285;
      *((_QWORD *)v283 + 2) = *(_QWORD *)(v279 + v282 + 8);
      v282 += 16;
    }
    while (v284 + 2 != (_QWORD *)(v279 + 16 * v32));
    v286 = 0;
    v287 = 16 * v32;
    do
    {
      v288 = *(_QWORD *)(v279 + v286);
      *(_QWORD *)(v279 + v286) = 0;
      if (v288)
        WTF::fastFree(v288, v23, v24, v25, v26, v27, v28, v29);
      v286 += 16;
    }
    while (v287 != v286);
    if (v279)
      WTF::fastFree(v279, v23, v24, v25, v26, v27, v28, v29);
    v289 = *(unsigned int **)(v278 + 280);
    *(_QWORD *)(v278 + 280) = v281;
    if (v289)
    {
      v291 = (unint64_t *)(v289 + 2);
      v290 = *v289;
      if ((_DWORD)v290)
      {
        v435 = 16 * v290;
        do
        {
          v436 = *v291;
          *v291 = 0;
          if (v436)
            WTF::fastFree(v436, v23, v24, v25, v26, v27, v28, v29);
          v291 += 2;
          v435 -= 16;
        }
        while (v435);
      }
      WTF::fastFree((unint64_t)v289, v23, v24, v25, v26, v27, v28, v29);
    }
    v30 = *((_QWORD *)this + 44);
  }
  for (i = *(uint64_t **)(v30 + 528); i; i = (uint64_t *)i[6])
  {
    v493 = *((_DWORD *)i + 10);
    if (v493 == 2)
    {
      if (*((_BYTE *)i + 44))
      {
        v556 = *((_QWORD *)this + 44);
        v557 = i[4];
        if (*(_DWORD *)(v556 + 356) <= v557)
        {
          __break(0xC471u);
          JUMPOUT(0x19841E170);
        }
        v558 = *(_DWORD **)(*((_QWORD *)this + 46) + 288);
        if (*v558 <= v557)
        {
          __break(0xC471u);
          JUMPOUT(0x19841E104);
        }
        v559 = *(unsigned int *)(i[2] + 8);
        if (*((_DWORD *)this + 101) <= v559)
        {
          __break(0xC471u);
LABEL_631:
          JUMPOUT(0x19841C958);
        }
        v560 = *(_DWORD *)(*((_QWORD *)this + 49) + 4 * v559);
        if (v560 < 4)
          v561 = 0;
        else
          v561 = *(_DWORD *)((char *)a2[3] + (v560 & 0xFFFFFFFC) - 4);
        v562 = (v560 - v561);
        v563 = a2[23];
        v564 = (JSC::ExecutableAllocator *)((char *)v563 + v562);
        if (v563 > v564 || (char *)a2[1] + (unint64_t)v563 < (char *)v564)
        {
          __break(0xC471u);
          JUMPOUT(0x19841E0E4);
        }
        v566 = i[4];
        v509 = *(uint64_t **)(*(_QWORD *)(v556 + 344) + 8 * v566);
        v575 = v558 + 2;
        v577 = v566;
        v567 = *(unsigned int **)&v558[2 * v566 + 2];
        if (v567)
        {
          v568 = *v567;
          if ((_DWORD)v568 != *((_DWORD *)v509 + 3) + 1)
            goto LABEL_620;
          if ((_DWORD)v568)
          {
            v522 = (JSC::ExecutableAllocator **)(v567 + 2);
            v523 = 8 * v568;
            do
            {
              *v522++ = v564;
              v523 -= 8;
            }
            while (v523);
          }
        }
        else if (*((_DWORD *)v509 + 3) != -1)
        {
LABEL_620:
          __break(0xC471u);
          JUMPOUT(0x19841E124);
        }
        v494 = *((unsigned int *)i + 3);
        v569 = v509;
        if ((_DWORD)v494)
        {
          do
          {
            if (--v494 >= (unint64_t)*((unsigned int *)i + 3))
            {
              __break(0xC471u);
              JUMPOUT(0x19841E150);
            }
            v495 = *i;
            v496 = *v509;
            v497 = *((unsigned int *)v509 + 2);
            if (*v509)
            {
              v498 = *(WTF::StringImpl **)(v495 + 32 * v494);
              v499 = *((_DWORD *)v509 + 4);
              v500 = *((_DWORD *)v498 + 4);
              v574 = v498;
              if (v500 < 0x100)
              {
                v519 = *i;
                v520 = WTF::StringImpl::hashSlowCase(v498);
                v495 = v519;
                v509 = v569;
                v501 = v520;
                v496 = *v569;
              }
              else
              {
                v501 = v500 >> 8;
              }
              v502 = v497 - 1;
              v503 = (v501 ^ v499) & (v497 - 1);
              v504 = v496 + 16 * v503;
              v505 = *(WTF **)v504;
              if (!*(_QWORD *)v504)
              {
LABEL_521:
                v497 = *((unsigned int *)v509 + 2);
                v504 = v496 + 16 * v497;
                goto LABEL_522;
              }
              v506 = -1;
              while (1)
              {
                v507 = *((_DWORD *)v505 + 4);
                if (v507 < 0x100)
                {
                  v572 = v495;
                  v570 = v501;
                  v508 = WTF::StringImpl::hashSlowCase(v505);
                  v501 = v570;
                  v495 = v572;
                  v509 = v569;
                }
                else
                {
                  v508 = v507 >> 8;
                }
                if (++v506 > ((v503 + (_DWORD)v497 - ((v508 ^ v499) & v502)) & v502))
                {
                  v496 = *v509;
                  goto LABEL_521;
                }
                if (v508 == v501)
                {
                  v571 = v501;
                  v573 = v495;
                  v521 = WTF::equal(*(WTF **)v504, v574, (const WTF::StringImpl *)v24);
                  v509 = v569;
                  v496 = *v569;
                  if (v521)
                  {
                    v497 = *((unsigned int *)v569 + 2);
                    v495 = v573;
                    goto LABEL_522;
                  }
                  v495 = v573;
                  v501 = v571;
                }
                else
                {
                  v496 = *v509;
                }
                v503 = (v503 + 1) & v502;
                v504 = v496 + 16 * v503;
                v505 = *(WTF **)v504;
                if (!*(_QWORD *)v504)
                  goto LABEL_521;
              }
            }
            v504 = 16 * v497;
LABEL_522:
            if (v496 + 16 * v497 == v504)
            {
              __break(0xC471u);
              JUMPOUT(0x19841DF88);
            }
            v510 = *(unsigned int *)(*(_QWORD *)(v495 + 32 * v494 + 16) + 8);
            if (*((_DWORD *)this + 101) <= v510)
            {
              __break(0xC471u);
              JUMPOUT(0x19841E158);
            }
            v511 = *(_DWORD *)(*((_QWORD *)this + 49) + 4 * v510);
            if (v511 < 4)
              v512 = 0;
            else
              v512 = *(_DWORD *)((char *)a2[3] + (v511 & 0xFFFFFFFC) - 4);
            v513 = (v511 - v512);
            v514 = a2[23];
            v515 = (JSC::ExecutableAllocator *)((char *)v514 + v513);
            if (v514 > v515 || (char *)a2[1] + (unint64_t)v514 < (char *)v515)
            {
              __break(0xC471u);
              JUMPOUT(0x19841DF60);
            }
            v517 = *(unsigned int *)(v504 + 12);
            v518 = *(_DWORD **)&v575[2 * v577];
            if (*v518 <= v517)
            {
              __break(0xC471u);
              JUMPOUT(0x19841DFA8);
            }
            *(_QWORD *)&v518[2 * v517 + 2] = v515;
          }
          while (v494);
        }
      }
    }
    else if (v493 >= 2)
    {
      if (v493 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19841DFFCLL);
      }
    }
    else if (*((_BYTE *)i + 44))
    {
      v524 = *((_QWORD *)this + 44);
      v525 = i[4];
      if (*(_DWORD *)(v524 + 324) <= v525)
      {
        __break(0xC471u);
        JUMPOUT(0x19841E160);
      }
      v526 = *(_DWORD **)(*((_QWORD *)this + 46) + 280);
      if (*v526 <= v525)
      {
        __break(0xC471u);
        JUMPOUT(0x19841E0A4);
      }
      v527 = *(unsigned int *)(i[2] + 8);
      if (*((_DWORD *)this + 101) <= v527)
      {
        __break(0xC471u);
        JUMPOUT(0x19841E168);
      }
      v528 = *(_DWORD *)(*((_QWORD *)this + 49) + 4 * v527);
      if (v528 < 4)
        v529 = 0;
      else
        v529 = *(_DWORD *)((char *)a2[3] + (v528 & 0xFFFFFFFC) - 4);
      v530 = (v528 - v529);
      v531 = a2[23];
      v532 = (JSC::ExecutableAllocator *)((char *)v531 + v530);
      if (v531 > v532 || (char *)a2[1] + (unint64_t)v531 < (char *)v532)
      {
        __break(0xC471u);
        JUMPOUT(0x19841E024);
      }
      v534 = *(unsigned int ***)(*(_QWORD *)(v524 + 312) + 8 * i[4]);
      v535 = (uint64_t)&v526[4 * i[4] + 2];
      *(_QWORD *)(v535 + 8) = v532;
      v536 = *(unsigned int **)v535;
      if (*(_QWORD *)v535)
        v537 = (unsigned int *)*v536;
      else
        v537 = 0;
      v538 = *v534;
      if (*v534)
        v538 = (unsigned int *)*v538;
      if (v537 != v538)
      {
        __break(0xC471u);
        JUMPOUT(0x19841E0C4);
      }
      if (v536)
      {
        v539 = *v536;
        if (v539)
        {
          v540 = v539 - 1;
          v541 = 8 * v540 + 8;
          do
          {
            if (**(_DWORD **)v535 <= v540)
            {
              __break(0xC471u);
              JUMPOUT(0x19841DF20);
            }
            *(_QWORD *)(*(_QWORD *)v535 + v541) = *(_QWORD *)(v535 + 8);
            v541 -= 8;
            --v540;
          }
          while (v540 != -1);
        }
      }
      v542 = *((unsigned int *)i + 3);
      if ((_DWORD)v542)
      {
        v543 = 32 * v542;
        v544 = v542 - 1;
        do
        {
          if (v544 >= *((unsigned int *)i + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19841E140);
          }
          v545 = *i + v543;
          v546 = *(unsigned int *)(*(_QWORD *)(v545 - 16) + 8);
          if (*((_DWORD *)this + 101) <= v546)
          {
            __break(0xC471u);
            JUMPOUT(0x19841E148);
          }
          v547 = *(_DWORD *)(*((_QWORD *)this + 49) + 4 * v546);
          if (v547 < 4)
            v548 = 0;
          else
            v548 = *(_DWORD *)((char *)a2[3] + (v547 & 0xFFFFFFFC) - 4);
          v549 = (v547 - v548);
          v550 = a2[23];
          v551 = (JSC::ExecutableAllocator *)((char *)v550 + v549);
          if (v550 > v551 || (char *)a2[1] + (unint64_t)v550 < (char *)v551)
          {
            __break(0xC471u);
            JUMPOUT(0x19841DF00);
          }
          v553 = *((_DWORD *)i + 10);
          v554 = *(_DWORD *)(*i + v543 - 24);
          if (v554)
          {
            if (v554 != 1)
            {
              if ((v554 - 2) < 2)
              {
                __break(0xC471u);
                JUMPOUT(0x19841DFD4);
              }
              __break(0xC471u);
              JUMPOUT(0x19841E044);
            }
            if (v553 != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19841E084);
            }
            LODWORD(v545) = *(unsigned __int16 *)(v545 - 32);
          }
          else if (v553)
          {
            if (v553 != 3)
            {
              __break(0xC471u);
              JUMPOUT(0x19841E064);
            }
            v545 = **(_QWORD **)(v545 - 32);
          }
          else
          {
            v545 = **(_QWORD **)(v545 - 32);
            if (!v545)
              LODWORD(v545) = 0;
          }
          v555 = v545 - *((_DWORD *)v534 + 2);
          if (**(_DWORD **)v535 <= v555)
          {
            __break(0xC471u);
            JUMPOUT(0x19841DF40);
          }
          *(_QWORD *)(*(_QWORD *)v535 + 8 * v555 + 8) = v551;
          --v544;
          v543 -= 32;
        }
        while (v543);
      }
    }
  }
  if (*((_DWORD *)this + 97))
  {
    v34 = 0;
    v35 = 0;
    do
    {
      v36 = *((_QWORD *)this + 47) + v34;
      v37 = *(_DWORD *)v36;
      if (*(int *)v36 < 4)
        v38 = 0;
      else
        v38 = *(_DWORD *)((char *)a2[3] + (v37 & 0xFFFFFFFC) - 4);
      v39 = *(_DWORD *)(v36 + 4);
      v40 = *(_QWORD *)(v36 + 8);
      v41 = v37 - v38;
      v42 = a2[23];
      if ((v39 & 2) != 0)
      {
        if ((v39 & 4) != 0)
        {
          LODWORD(v581[0]) = v41;
          JSC::ARM64Assembler::linkJump(v42, (unsigned int *)v581, v40);
        }
        else
        {
          JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>((JSC::ExecutableAllocator *)((char *)v42 + v41 - 4), (unint64_t)v42 + v41 - 4, v40);
        }
      }
      else
      {
        LODWORD(v581[0]) = v41 - 16;
        JSC::ARM64Assembler::linkPointer((uint64_t)v42, (unsigned int *)v581, v40);
      }
      ++v35;
      v34 += 16;
    }
    while (v35 < *((unsigned int *)this + 97));
  }
  v43 = *((unsigned int *)this + 105);
  if ((_DWORD)v43)
  {
    v184 = 0;
    v185 = *((_QWORD *)this + 51);
    v186 = 72 * v43;
    do
    {
      v187 = v185 + v184;
      v188 = *(_DWORD **)(v185 + v184 + 64);
      v189 = v188[4];
      (*(void (**)(JSC::ExecutableMemoryHandle **__return_ptr))(*(_QWORD *)v188 + 16))(v581);
      *(_DWORD *)(v187 + 28) = v189;
      *(JSC::ExecutableMemoryHandle **)(v187 + 32) = v581[0];
      if (*(_QWORD *)(v185 + v184))
      {
        LODWORD(v579) = *(_DWORD *)(v187 + 24);
        *(_QWORD *)(*(_QWORD *)v187 + 16) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)26432>(a2, (int *)&v579);
        LODWORD(v578) = *(_DWORD *)(v187 + 28);
        *(_QWORD *)(*(_QWORD *)v187 + 24) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)49594>(a2, (int *)&v578);
      }
      else
      {
        v190 = *(_DWORD *)(v187 + 20);
        if (v190 < 4)
          v191 = 0;
        else
          v191 = *(_DWORD *)((char *)a2[3] + (v190 & 0xFFFFFFFC) - 4);
        v192 = (v190 - v191);
        v193 = a2[23];
        v194 = (unint64_t)v193 + v192;
        if (v193 > (JSC::ExecutableAllocator *)((char *)v193 + v192)
          || (JSC::ExecutableAllocator *)((char *)a2[1] + (_QWORD)v193) < (JSC::ExecutableAllocator *)v194)
        {
          __break(0xC471u);
          JUMPOUT(0x19841D0B8);
        }
        JSC::JITInlineCacheGenerator::finalize(v185 + v184, a2, a2, v194);
      }
      v184 += 72;
    }
    while (v186 != v184);
  }
  v44 = *((unsigned int *)this + 181);
  if ((_DWORD)v44)
  {
    v292 = *((_QWORD *)this + 89);
    v293 = v44 << 6;
    do
    {
      v294 = *(_DWORD **)(v292 + 56);
      v295 = v294[4];
      (*(void (**)(JSC::ExecutableMemoryHandle **__return_ptr))(*(_QWORD *)v294 + 16))(v581);
      *(_DWORD *)(v292 + 28) = v295;
      *(JSC::ExecutableMemoryHandle **)(v292 + 32) = v581[0];
      if (*(_QWORD *)v292)
      {
        LODWORD(v579) = *(_DWORD *)(v292 + 24);
        *(_QWORD *)(*(_QWORD *)v292 + 16) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)26432>(a2, (int *)&v579);
        LODWORD(v578) = *(_DWORD *)(v292 + 28);
        *(_QWORD *)(*(_QWORD *)v292 + 24) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)49594>(a2, (int *)&v578);
      }
      else
      {
        v296 = *(_DWORD *)(v292 + 20);
        if (v296 < 4)
          v297 = 0;
        else
          v297 = *(_DWORD *)((char *)a2[3] + (v296 & 0xFFFFFFFC) - 4);
        v298 = (v296 - v297);
        v299 = a2[23];
        v300 = (unint64_t)v299 + v298;
        if (v299 > (JSC::ExecutableAllocator *)((char *)v299 + v298)
          || (JSC::ExecutableAllocator *)((char *)a2[1] + (_QWORD)v299) < (JSC::ExecutableAllocator *)v300)
        {
          __break(0xC471u);
          JUMPOUT(0x19841D424);
        }
        JSC::JITInlineCacheGenerator::finalize(v292, a2, a2, v300);
      }
      v292 += 64;
      v293 -= 64;
    }
    while (v293);
  }
  v45 = *((unsigned int *)this + 249);
  if ((_DWORD)v45)
  {
    v244 = *((_QWORD *)this + 123);
    v245 = v45 << 6;
    do
    {
      v246 = *(_DWORD **)(v244 + 56);
      v247 = v246[4];
      (*(void (**)(JSC::ExecutableMemoryHandle **__return_ptr))(*(_QWORD *)v246 + 16))(v581);
      *(_DWORD *)(v244 + 28) = v247;
      *(JSC::ExecutableMemoryHandle **)(v244 + 32) = v581[0];
      if (*(_QWORD *)v244)
      {
        LODWORD(v579) = *(_DWORD *)(v244 + 24);
        *(_QWORD *)(*(_QWORD *)v244 + 16) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)26432>(a2, (int *)&v579);
        LODWORD(v578) = *(_DWORD *)(v244 + 28);
        *(_QWORD *)(*(_QWORD *)v244 + 24) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)49594>(a2, (int *)&v578);
      }
      else
      {
        v248 = *(_DWORD *)(v244 + 20);
        if (v248 < 4)
          v249 = 0;
        else
          v249 = *(_DWORD *)((char *)a2[3] + (v248 & 0xFFFFFFFC) - 4);
        v250 = (v248 - v249);
        v251 = a2[23];
        v252 = (unint64_t)v251 + v250;
        if (v251 > (JSC::ExecutableAllocator *)((char *)v251 + v250)
          || (JSC::ExecutableAllocator *)((char *)a2[1] + (_QWORD)v251) < (JSC::ExecutableAllocator *)v252)
        {
          __break(0xC471u);
          JUMPOUT(0x19841D3BCLL);
        }
        JSC::JITInlineCacheGenerator::finalize(v244, a2, a2, v252);
      }
      v244 += 64;
      v245 -= 64;
    }
    while (v245);
  }
  v46 = *((unsigned int *)this + 317);
  if ((_DWORD)v46)
  {
    v369 = *((_QWORD *)this + 157);
    v370 = v46 << 6;
    do
    {
      v371 = *(_DWORD **)(v369 + 56);
      v372 = v371[4];
      (*(void (**)(JSC::ExecutableMemoryHandle **__return_ptr))(*(_QWORD *)v371 + 16))(v581);
      *(_DWORD *)(v369 + 28) = v372;
      *(JSC::ExecutableMemoryHandle **)(v369 + 32) = v581[0];
      if (*(_QWORD *)v369)
      {
        LODWORD(v579) = *(_DWORD *)(v369 + 24);
        *(_QWORD *)(*(_QWORD *)v369 + 16) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)26432>(a2, (int *)&v579);
        LODWORD(v578) = *(_DWORD *)(v369 + 28);
        *(_QWORD *)(*(_QWORD *)v369 + 24) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)49594>(a2, (int *)&v578);
      }
      else
      {
        v373 = *(_DWORD *)(v369 + 20);
        if (v373 < 4)
          v374 = 0;
        else
          v374 = *(_DWORD *)((char *)a2[3] + (v373 & 0xFFFFFFFC) - 4);
        v375 = (v373 - v374);
        v376 = a2[23];
        v377 = (unint64_t)v376 + v375;
        if (v376 > (JSC::ExecutableAllocator *)((char *)v376 + v375)
          || (JSC::ExecutableAllocator *)((char *)a2[1] + (_QWORD)v376) < (JSC::ExecutableAllocator *)v377)
        {
          __break(0xC471u);
          JUMPOUT(0x19841D954);
        }
        JSC::JITInlineCacheGenerator::finalize(v369, a2, a2, v377);
      }
      v369 += 64;
      v370 -= 64;
    }
    while (v370);
  }
  v47 = *((unsigned int *)this + 385);
  if ((_DWORD)v47)
  {
    v227 = *((_QWORD *)this + 191);
    v228 = v47 << 6;
    do
    {
      v229 = *(_DWORD **)(v227 + 56);
      v230 = v229[4];
      (*(void (**)(JSC::ExecutableMemoryHandle **__return_ptr))(*(_QWORD *)v229 + 16))(v581);
      *(_DWORD *)(v227 + 28) = v230;
      *(JSC::ExecutableMemoryHandle **)(v227 + 32) = v581[0];
      if (*(_QWORD *)v227)
      {
        LODWORD(v579) = *(_DWORD *)(v227 + 24);
        *(_QWORD *)(*(_QWORD *)v227 + 16) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)26432>(a2, (int *)&v579);
        LODWORD(v578) = *(_DWORD *)(v227 + 28);
        *(_QWORD *)(*(_QWORD *)v227 + 24) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)49594>(a2, (int *)&v578);
      }
      else
      {
        v231 = *(_DWORD *)(v227 + 20);
        if (v231 < 4)
          v232 = 0;
        else
          v232 = *(_DWORD *)((char *)a2[3] + (v231 & 0xFFFFFFFC) - 4);
        v233 = (v231 - v232);
        v234 = a2[23];
        v235 = (unint64_t)v234 + v233;
        if (v234 > (JSC::ExecutableAllocator *)((char *)v234 + v233)
          || (JSC::ExecutableAllocator *)((char *)a2[1] + (_QWORD)v234) < (JSC::ExecutableAllocator *)v235)
        {
          __break(0xC471u);
          JUMPOUT(0x19841D36CLL);
        }
        JSC::JITInlineCacheGenerator::finalize(v227, a2, a2, v235);
      }
      v227 += 64;
      v228 -= 64;
    }
    while (v228);
  }
  v48 = *((unsigned int *)this + 453);
  if ((_DWORD)v48)
  {
    v256 = *((_QWORD *)this + 225);
    v257 = v48 << 6;
    do
    {
      v258 = *(_DWORD **)(v256 + 56);
      v259 = v258[4];
      (*(void (**)(JSC::ExecutableMemoryHandle **__return_ptr))(*(_QWORD *)v258 + 16))(v581);
      *(_DWORD *)(v256 + 28) = v259;
      *(JSC::ExecutableMemoryHandle **)(v256 + 32) = v581[0];
      if (*(_QWORD *)v256)
      {
        LODWORD(v579) = *(_DWORD *)(v256 + 24);
        *(_QWORD *)(*(_QWORD *)v256 + 16) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)26432>(a2, (int *)&v579);
        LODWORD(v578) = *(_DWORD *)(v256 + 28);
        *(_QWORD *)(*(_QWORD *)v256 + 24) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)49594>(a2, (int *)&v578);
      }
      else
      {
        v260 = *(_DWORD *)(v256 + 20);
        if (v260 < 4)
          v261 = 0;
        else
          v261 = *(_DWORD *)((char *)a2[3] + (v260 & 0xFFFFFFFC) - 4);
        v262 = (v260 - v261);
        v263 = a2[23];
        v264 = (unint64_t)v263 + v262;
        if (v263 > (JSC::ExecutableAllocator *)((char *)v263 + v262)
          || (JSC::ExecutableAllocator *)((char *)a2[1] + (_QWORD)v263) < (JSC::ExecutableAllocator *)v264)
        {
          __break(0xC471u);
          JUMPOUT(0x19841D3FCLL);
        }
        JSC::JITInlineCacheGenerator::finalize(v256, a2, a2, v264);
      }
      v256 += 64;
      v257 -= 64;
    }
    while (v257);
  }
  v49 = *((unsigned int *)this + 521);
  if ((_DWORD)v49)
  {
    v431 = *((_QWORD *)this + 259);
    v432 = v49 << 6;
    do
    {
      JSC::DFG::InlineCacheWrapper<JSC::JITDelByIdGenerator>::finalize(v431, (JSC::LinkBuffer *)a2, (JSC::LinkBuffer *)a2);
      v431 += 64;
      v432 -= 64;
    }
    while (v432);
  }
  v50 = *((unsigned int *)this + 589);
  if ((_DWORD)v50)
  {
    v379 = *((_QWORD *)this + 293);
    v380 = v50 << 6;
    do
    {
      v381 = *(_DWORD **)(v379 + 56);
      v382 = v381[4];
      (*(void (**)(JSC::ExecutableMemoryHandle **__return_ptr))(*(_QWORD *)v381 + 16))(v581);
      *(_DWORD *)(v379 + 28) = v382;
      *(JSC::ExecutableMemoryHandle **)(v379 + 32) = v581[0];
      if (*(_QWORD *)v379)
      {
        LODWORD(v579) = *(_DWORD *)(v379 + 24);
        *(_QWORD *)(*(_QWORD *)v379 + 16) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)26432>(a2, (int *)&v579);
        LODWORD(v578) = *(_DWORD *)(v379 + 28);
        *(_QWORD *)(*(_QWORD *)v379 + 24) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)49594>(a2, (int *)&v578);
      }
      else
      {
        v383 = *(_DWORD *)(v379 + 20);
        if (v383 < 4)
          v384 = 0;
        else
          v384 = *(_DWORD *)((char *)a2[3] + (v383 & 0xFFFFFFFC) - 4);
        v385 = (v383 - v384);
        v386 = a2[23];
        v387 = (unint64_t)v386 + v385;
        if (v386 > (JSC::ExecutableAllocator *)((char *)v386 + v385)
          || (JSC::ExecutableAllocator *)((char *)a2[1] + (_QWORD)v386) < (JSC::ExecutableAllocator *)v387)
        {
          __break(0xC471u);
          JUMPOUT(0x19841D974);
        }
        JSC::JITInlineCacheGenerator::finalize(v379, a2, a2, v387);
      }
      v379 += 64;
      v380 -= 64;
    }
    while (v380);
  }
  v51 = *((unsigned int *)this + 657);
  if ((_DWORD)v51)
  {
    v322 = *((_QWORD *)this + 327);
    v323 = v51 << 6;
    do
    {
      v324 = *(_DWORD **)(v322 + 56);
      v325 = v324[4];
      (*(void (**)(JSC::ExecutableMemoryHandle **__return_ptr))(*(_QWORD *)v324 + 16))(v581);
      *(_DWORD *)(v322 + 28) = v325;
      *(JSC::ExecutableMemoryHandle **)(v322 + 32) = v581[0];
      if (*(_QWORD *)v322)
      {
        LODWORD(v579) = *(_DWORD *)(v322 + 24);
        *(_QWORD *)(*(_QWORD *)v322 + 16) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)26432>(a2, (int *)&v579);
        LODWORD(v578) = *(_DWORD *)(v322 + 28);
        *(_QWORD *)(*(_QWORD *)v322 + 24) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)49594>(a2, (int *)&v578);
      }
      else
      {
        v326 = *(_DWORD *)(v322 + 20);
        if (v326 < 4)
          v327 = 0;
        else
          v327 = *(_DWORD *)((char *)a2[3] + (v326 & 0xFFFFFFFC) - 4);
        v328 = (v326 - v327);
        v329 = a2[23];
        v330 = (unint64_t)v329 + v328;
        if (v329 > (JSC::ExecutableAllocator *)((char *)v329 + v328)
          || (JSC::ExecutableAllocator *)((char *)a2[1] + (_QWORD)v329) < (JSC::ExecutableAllocator *)v330)
        {
          __break(0xC471u);
          JUMPOUT(0x19841D904);
        }
        JSC::JITInlineCacheGenerator::finalize(v322, a2, a2, v330);
      }
      v322 += 64;
      v323 -= 64;
    }
    while (v323);
  }
  v52 = *((unsigned int *)this + 725);
  if ((_DWORD)v52)
  {
    v312 = *((_QWORD *)this + 361);
    v313 = v52 << 6;
    do
    {
      v314 = *(_DWORD **)(v312 + 56);
      v315 = v314[4];
      (*(void (**)(JSC::ExecutableMemoryHandle **__return_ptr))(*(_QWORD *)v314 + 16))(v581);
      *(_DWORD *)(v312 + 28) = v315;
      *(JSC::ExecutableMemoryHandle **)(v312 + 32) = v581[0];
      if (*(_QWORD *)v312)
      {
        LODWORD(v579) = *(_DWORD *)(v312 + 24);
        *(_QWORD *)(*(_QWORD *)v312 + 16) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)26432>(a2, (int *)&v579);
        LODWORD(v578) = *(_DWORD *)(v312 + 28);
        *(_QWORD *)(*(_QWORD *)v312 + 24) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)49594>(a2, (int *)&v578);
      }
      else
      {
        v316 = *(_DWORD *)(v312 + 20);
        if (v316 < 4)
          v317 = 0;
        else
          v317 = *(_DWORD *)((char *)a2[3] + (v316 & 0xFFFFFFFC) - 4);
        v318 = (v316 - v317);
        v319 = a2[23];
        v320 = (unint64_t)v319 + v318;
        if (v319 > (JSC::ExecutableAllocator *)((char *)v319 + v318)
          || (JSC::ExecutableAllocator *)((char *)a2[1] + (_QWORD)v319) < (JSC::ExecutableAllocator *)v320)
        {
          __break(0xC471u);
          JUMPOUT(0x19841D8DCLL);
        }
        JSC::JITInlineCacheGenerator::finalize(v312, a2, a2, v320);
      }
      v312 += 64;
      v313 -= 64;
    }
    while (v313);
  }
  v53 = *((unsigned int *)this + 793);
  if ((_DWORD)v53)
  {
    v302 = *((_QWORD *)this + 395);
    v303 = v53 << 6;
    do
    {
      v304 = *(_DWORD **)(v302 + 56);
      v305 = v304[4];
      (*(void (**)(JSC::ExecutableMemoryHandle **__return_ptr))(*(_QWORD *)v304 + 16))(v581);
      *(_DWORD *)(v302 + 28) = v305;
      *(JSC::ExecutableMemoryHandle **)(v302 + 32) = v581[0];
      if (*(_QWORD *)v302)
      {
        LODWORD(v579) = *(_DWORD *)(v302 + 24);
        *(_QWORD *)(*(_QWORD *)v302 + 16) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)26432>(a2, (int *)&v579);
        LODWORD(v578) = *(_DWORD *)(v302 + 28);
        *(_QWORD *)(*(_QWORD *)v302 + 24) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)49594>(a2, (int *)&v578);
      }
      else
      {
        v306 = *(_DWORD *)(v302 + 20);
        if (v306 < 4)
          v307 = 0;
        else
          v307 = *(_DWORD *)((char *)a2[3] + (v306 & 0xFFFFFFFC) - 4);
        v308 = (v306 - v307);
        v309 = a2[23];
        v310 = (unint64_t)v309 + v308;
        if (v309 > (JSC::ExecutableAllocator *)((char *)v309 + v308)
          || (JSC::ExecutableAllocator *)((char *)a2[1] + (_QWORD)v309) < (JSC::ExecutableAllocator *)v310)
        {
          __break(0xC471u);
          JUMPOUT(0x19841D444);
        }
        JSC::JITInlineCacheGenerator::finalize(v302, a2, a2, v310);
      }
      v302 += 64;
      v303 -= 64;
    }
    while (v303);
  }
  v54 = *((unsigned int *)this + 861);
  if ((_DWORD)v54)
  {
    v359 = *((_QWORD *)this + 429);
    v360 = v54 << 6;
    do
    {
      v361 = *(_DWORD **)(v359 + 56);
      v362 = v361[4];
      (*(void (**)(JSC::ExecutableMemoryHandle **__return_ptr))(*(_QWORD *)v361 + 16))(v581);
      *(_DWORD *)(v359 + 28) = v362;
      *(JSC::ExecutableMemoryHandle **)(v359 + 32) = v581[0];
      if (*(_QWORD *)v359)
      {
        LODWORD(v579) = *(_DWORD *)(v359 + 24);
        *(_QWORD *)(*(_QWORD *)v359 + 16) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)26432>(a2, (int *)&v579);
        LODWORD(v578) = *(_DWORD *)(v359 + 28);
        *(_QWORD *)(*(_QWORD *)v359 + 24) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)49594>(a2, (int *)&v578);
      }
      else
      {
        v363 = *(_DWORD *)(v359 + 20);
        if (v363 < 4)
          v364 = 0;
        else
          v364 = *(_DWORD *)((char *)a2[3] + (v363 & 0xFFFFFFFC) - 4);
        v365 = (v363 - v364);
        v366 = a2[23];
        v367 = (unint64_t)v366 + v365;
        if (v366 > (JSC::ExecutableAllocator *)((char *)v366 + v365)
          || (JSC::ExecutableAllocator *)((char *)a2[1] + (_QWORD)v366) < (JSC::ExecutableAllocator *)v367)
        {
          __break(0xC471u);
          JUMPOUT(0x19841D934);
        }
        JSC::JITInlineCacheGenerator::finalize(v359, a2, a2, v367);
      }
      v359 += 64;
      v360 -= 64;
    }
    while (v360);
  }
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 24) + 16) - 1) & 0xFFFFFFFD) == 0)
  {
    WTF::FixedVector<JSC::DFG::UnlinkedStructureStubInfo>::FixedVector(v581, *((_QWORD *)this + 484));
    WTF::FixedVector<JSC::DFG::UnlinkedStructureStubInfo>::operator=((unsigned int **)(*((_QWORD *)this + 46) + 296), (unsigned int **)v581, v437, v438, v439, v440, v441, v442);
    WTF::FixedVector<JSC::DFG::UnlinkedStructureStubInfo>::~FixedVector((unsigned int **)v581, v443, v444, v445, v446, v447, v448, v449);
    v450 = *(_DWORD **)(*((_QWORD *)this + 46) + 296);
    if (v450)
    {
      if (*v450)
        std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,WTF::SegmentedVectorIterator<JSC::DFG::UnlinkedStructureStubInfo,8ul>,WTF::SegmentedVectorIterator<JSC::DFG::UnlinkedStructureStubInfo,8ul>,JSC::DFG::UnlinkedStructureStubInfo*,0>(v581, (uint64_t)this + 3872, 0, (uint64_t)this + 3872, *((_QWORD *)this + 484), (uint64_t)(v450 + 2), v28, v29);
    }
  }
  v55 = *((unsigned int *)this + 929);
  if ((_DWORD)v55)
  {
    v175 = 16 * v55;
    v176 = (_QWORD *)(*((_QWORD *)this + 463) + 8);
    do
    {
      v177 = *((_DWORD *)v176 - 2);
      if (v177 < 4)
        v178 = 0;
      else
        v178 = *(_DWORD *)((char *)a2[3] + (v177 & 0xFFFFFFFC) - 4);
      v179 = (v177 - v178);
      v180 = a2[23];
      v181 = (JSC::ExecutableAllocator *)((char *)v180 + v179);
      if (v180 > v181 || (char *)a2[1] + (unint64_t)v180 < (char *)v181)
      {
        __break(0xC471u);
        JUMPOUT(0x19841D098);
      }
      v183 = *v176;
      v176 += 2;
      *(_QWORD *)(v183 + 48) = v181;
      v175 -= 16;
    }
    while (v175);
  }
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 24) + 16) - 1) & 0xFFFFFFFD) == 0)
  {
    WTF::FixedVector<JSC::DFG::UnlinkedCallLinkInfo>::FixedVector(v581, *((_QWORD *)this + 487));
    WTF::FixedVector<JSC::DFG::UnlinkedCallLinkInfo>::operator=((unsigned int **)(*((_QWORD *)this + 46) + 304), (unsigned int **)v581, v451, v452, v453, v454, v455, v456);
    WTF::FixedVector<JSC::DFG::UnlinkedCallLinkInfo>::~FixedVector((unsigned int **)v581, v457, v458, v459, v460, v461, v462, v463);
    v464 = *(_DWORD **)(*((_QWORD *)this + 46) + 304);
    if (v464)
    {
      if (*v464)
        std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,WTF::SegmentedVectorIterator<JSC::DFG::UnlinkedCallLinkInfo,8ul>,WTF::SegmentedVectorIterator<JSC::DFG::UnlinkedCallLinkInfo,8ul>,JSC::DFG::UnlinkedCallLinkInfo*,0>(v581, (uint64_t)this + 3896, 0, (uint64_t)this + 3896, *((_QWORD *)this + 487), (uint64_t)(v464 + 2), v28, v29);
    }
  }
  v56 = *((_QWORD *)this + 44);
  v57 = *(_QWORD *)(v56 + 24);
  if (((*(_DWORD *)(v57 + 16) - 1) & 0xFFFFFFFD) == 0)
    goto LABEL_102;
  JSC::JITThunks::ctiStub(*(_QWORD *)(*(_QWORD *)(v56 + 16) + 90440), *(_QWORD *)(v56 + 16), (void (*)(uint64_t *__return_ptr, uint64_t))JSC::DFG::osrExitGenerationThunkGenerator, v25, v26, v27, v28, v29, v581);
  v59 = v581[0];
  v579 = 0;
  v580 = 0;
  if (!*((_DWORD *)this + 963))
  {
    v95 = 0;
    v99 = 0;
    v97 = *((_QWORD *)this + 46);
    goto LABEL_91;
  }
  v60 = 0;
  v61 = 32;
  v62 = -721215457;
  v63 = &v578;
  v64 = 0x2000000;
  do
  {
    if (v60 >> 2 >= *((unsigned int *)this + 951))
    {
      __break(0xC471u);
      JUMPOUT(0x19841D99CLL);
    }
    v65 = *(_QWORD *)(*((_QWORD *)this + 474) + 8 * (v60 >> 2));
    v66 = v60 & 3;
    v67 = v65 + (v66 << 6);
    v70 = *(_DWORD *)(v67 + 48);
    v69 = (int *)(v67 + 48);
    v68 = v70;
    if (v70 < 4)
      v71 = 0;
    else
      v71 = *(_DWORD *)((char *)a2[3] + (v68 & 0xFFFFFFFC) - 4);
    v72 = (JSC::ExecutableAllocator *)((char *)a2[23] + (v68 - v71));
    if (*(_DWORD *)v72 == v62)
    {
      v25 = (unint64_t)v72 - 4;
      v237 = *((_DWORD *)v72 - 1);
      v238 = (int)(v237 << 8) >> 13;
      if (v237 >> 25 == 42)
      {
        JSC::ARM64Assembler::linkConditionalBranch<(JSC::ARM64Assembler::BranchTargetType)1,(JSC::MachineCodeCopyMode)1>(*((_DWORD *)v72 - 1) & 0xF ^ (v238 == 8), (unint64_t)v72 - 4, (uint64_t)v72 - 4, (unint64_t)v59);
        v63 = &v578;
        v62 = -721215457;
        v64 = 0x2000000;
        goto LABEL_49;
      }
      v24 = v237 & 0x1F;
      if ((v237 & 0x7E000000) == 0x34000000)
      {
        if (v238 == 8)
          v239 = !(v237 & 0x1000000);
        else
          v239 = HIBYTE(v237) & 1;
        JSC::ARM64Assembler::linkCompareAndBranch<(JSC::ARM64Assembler::BranchTargetType)1,(JSC::MachineCodeCopyMode)1>(v239, v237 >> 31, v237 & 0x1F, v25, (uint64_t)v72 - 4, (unint64_t)v59);
        v62 = -721215457;
        v63 = &v578;
        v64 = 0x2000000;
        goto LABEL_49;
      }
      v62 = -721215457;
      v63 = &v578;
      v64 = 0x2000000;
      if ((v237 & 0x7E000000) == 0x36000000)
      {
        JSC::ARM64Assembler::linkTestAndBranch<(JSC::ARM64Assembler::BranchTargetType)1,(JSC::MachineCodeCopyMode)1>(HIBYTE(v237) & 1 ^ ((v237 & 0x7FFE0) == 256), (v237 >> 26) & 0x20 | (v237 >> 19) & 0x1F, v237 & 0x1F, v25, (uint64_t)v72 - 4, (unint64_t)v59);
        v64 = 0x2000000;
        v63 = &v578;
        v62 = -721215457;
        goto LABEL_49;
      }
    }
    if ((unint64_t)(v64 + ((v59 - v72) >> 2)) >> 26)
    {
      v484 = (JSC::ExecutableAllocator *)JSC::ExecutableAllocator::singleton(JumpIslandToUsingJITMemcpy);
      JumpIslandToUsingJITMemcpy = (JSC::ExecutableAllocator *)JSC::ExecutableAllocator::getJumpIslandToUsingJITMemcpy(v484, (unint64_t)v72, (unint64_t)v59, v485, v486, v487, v488, v489);
      if ((unint64_t)(((JumpIslandToUsingJITMemcpy - v72) >> 2) + 0x2000000) >> 26)
      {
        __break(0xC471u);
        JUMPOUT(0x19841D9C4);
      }
      v73 = (JumpIslandToUsingJITMemcpy - v72) >> 2;
      v62 = -721215457;
      v63 = &v578;
      v64 = 0x2000000;
    }
    else
    {
      v73 = (v59 - v72) >> 2;
    }
    v74 = v73 & 0x3FFFFFF | 0x14000000;
    LODWORD(v578) = v74;
    if (v72 != (JSC *)(((unint64_t)v72 + 3) & 0xFFFFFFFFFFFFFFFCLL))
    {
      __break(0xC471u);
      JUMPOUT(0x19841CC08);
    }
    if (qword_1ECF4C1F8 > (unint64_t)v72 || qword_1ECF4C200 <= (unint64_t)v72)
      goto LABEL_48;
    if ((unint64_t)v63 - qword_1ECF4C028 < qword_1ECF4C030)
    {
      __break(0xC471u);
      JUMPOUT(0x19841CCF8);
    }
    if (!qword_1ECF4C1F0 || qword_1ECF4C200 < (unint64_t)v72 + 4)
    {
      __break(0xC471u);
      JUMPOUT(0x19841CD18);
    }
    if (qword_1ECF4C748)
    {
      JSC::dumpJITMemory(v72, &v578, (char *)4);
      v64 = 0x2000000;
      v63 = &v578;
      v62 = -721215457;
    }
    if (byte_1ECF4C1E4)
    {
      be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
      *(_DWORD *)v72 = v578;
      JumpIslandToUsingJITMemcpy = (JSC::ExecutableAllocator *)be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
    }
    else
    {
      if (!off_1ECF4C228)
      {
        v74 = v578;
LABEL_48:
        *(_DWORD *)v72 = v74;
        goto LABEL_49;
      }
      if (qword_1ECF4C1F0)
        v94 = qword_1ECF4C1F8;
      else
        v94 = 0;
      JumpIslandToUsingJITMemcpy = (JSC::ExecutableAllocator *)off_1ECF4C228((char *)v72 - v94, &v578, 4);
      v64 = 0x2000000;
      v63 = &v578;
      v62 = -721215457;
      if ((unint64_t)&v578 - qword_1ECF4C028 < qword_1ECF4C030)
      {
        __break(0xC471u);
        JUMPOUT(0x19841D078);
      }
    }
LABEL_49:
    if (v60 >= *((unsigned int *)this + 963))
    {
      __break(0xC471u);
      JUMPOUT(0x19841D9A4);
    }
    v76 = *v69;
    if (*v69 < 4)
      v77 = 0;
    else
      v77 = *(_DWORD *)((char *)a2[3] + (v76 & 0xFFFFFFFC) - 4);
    v78 = (v76 - v77);
    v79 = a2[23];
    v80 = (JSC::ExecutableAllocator *)((char *)v79 + v78);
    if (v79 > v80 || (char *)a2[1] + (unint64_t)v79 < (char *)v80)
    {
      __break(0xC471u);
      goto LABEL_631;
    }
    *(_QWORD *)(*((_QWORD *)this + 480) + v61) = v80;
    v82 = *(_DWORD *)(v65 + (v66 << 6) + 40);
    if (v82 != -1)
    {
      if (v82 < 4)
        v83 = 0;
      else
        v83 = *(_DWORD *)((char *)a2[3] + (v82 & 0xFFFFFFFC) - 4);
      v84 = (v82 - v83);
      v85 = a2[23];
      v86 = (unint64_t)v85 + v84;
      if ((unint64_t)v85 > v86 || (v87 = (char *)a2[1] + (_QWORD)v85, (unint64_t)v87 < v86))
      {
        __break(0xC471u);
        JUMPOUT(0x19841CCB8);
      }
      v88 = *(_DWORD *)(v65 + (v66 << 6) + 44);
      if (v88 < 4)
        v89 = 0;
      else
        v89 = *(_DWORD *)((char *)a2[3] + (v88 & 0xFFFFFFFC) - 4);
      v90 = (unint64_t)v85 + (v88 - v89);
      if ((unint64_t)v85 > v90 || (unint64_t)v87 < v90)
      {
        __break(0xC471u);
        JUMPOUT(0x19841CCD8);
      }
      *(_QWORD *)&v578 = v86;
      *((_QWORD *)&v578 + 1) = v90;
      v91 = HIDWORD(v580);
      if (HIDWORD(v580) == (_DWORD)v580)
      {
        JumpIslandToUsingJITMemcpy = (JSC::ExecutableAllocator *)WTF::Vector<JSC::DFG::JumpReplacement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v579, HIDWORD(v580) + 1, (unint64_t)&v578);
        v63 = &v578;
        v62 = -721215457;
        v91 = HIDWORD(v580);
        v92 = v579;
        v93 = *(_OWORD *)JumpIslandToUsingJITMemcpy;
      }
      else
      {
        v92 = v579;
        v93 = v578;
      }
      *((_OWORD *)v92 + v91) = v93;
      ++HIDWORD(v580);
      v64 = 0x2000000;
    }
    ++v60;
    v61 += 72;
  }
  while (v60 < *((unsigned int *)this + 963));
  v95 = v579;
  v96 = HIDWORD(v580);
  v97 = *((_QWORD *)this + 46);
  v579 = 0;
  v580 = 0;
  if ((_DWORD)v96)
  {
    v98 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * v96) | 8));
    v99 = v98;
    v100 = 0;
    *v98 = v96;
    do
    {
      *(_OWORD *)&v98[v100 + 2] = *(_OWORD *)((char *)v95 + v100 * 4);
      v100 += 4;
    }
    while (4 * v96 != v100);
    if (v95)
    {
      WTF::fastFree((unint64_t)v95, v23, v24, v25, v26, v27, v28, v29);
      v95 = 0;
    }
  }
  else
  {
    v99 = 0;
  }
LABEL_91:
  v101 = *(_QWORD *)(v97 + 168);
  *(_QWORD *)(v97 + 168) = v99;
  if (v101)
    WTF::fastFree(v101, v23, v24, v25, v26, v27, v28, v29);
  if (v95)
    WTF::fastFree((unint64_t)v95, v23, v24, v25, v26, v27, v28, v29);
  v102 = v579;
  if (v579)
  {
    v579 = 0;
    LODWORD(v580) = 0;
    WTF::fastFree((unint64_t)v102, v23, v24, v25, v26, v27, v28, v29);
  }
  v103 = (unsigned int *)v581[1];
  v581[1] = 0;
  if (v103)
  {
    do
    {
      v104 = __ldaxr(v103);
      v105 = v104 - 1;
    }
    while (__stlxr(v105, v103));
    if (!v105)
    {
      atomic_store(1u, v103);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v103, (uint64_t)v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v416, v417, v418, v419, v420, v421, v422, v423);
    }
  }
  v57 = *(_QWORD *)(*((_QWORD *)this + 44) + 24);
LABEL_102:
  v106 = *(JSC::Profiler::Compilation **)(v57 + 112);
  if (!v106)
  {
    v107 = (JSC::Profiler::Compilation **)(*((_QWORD *)this + 46) + 232);
    goto LABEL_104;
  }
  if (!*((_DWORD *)this + 955))
  {
    v107 = (JSC::Profiler::Compilation **)(*((_QWORD *)this + 46) + 232);
LABEL_444:
    ++*(_DWORD *)v106;
    goto LABEL_104;
  }
  v389 = 0;
  do
  {
    v390 = *((_QWORD *)this + 476) + 16 * v389;
    v581[0] = 0;
    v581[1] = 0;
    if (*(_DWORD *)(v390 + 12))
    {
      v576 = v389;
      v391 = 0;
      v392 = 0;
      v393 = 0;
      LODWORD(v394) = 0;
      do
      {
        v395 = *(_DWORD *)(*(_QWORD *)v390 + 4 * v392);
        if (v395 < 4)
          v396 = 0;
        else
          v396 = *(_DWORD *)((char *)a2[3] + (v395 & 0xFFFFFFFC) - 4);
        v397 = (v395 - v396);
        v398 = a2[23];
        v399 = (JSC::ExecutableAllocator *)((char *)v398 + v397);
        if (v398 > (JSC::ExecutableAllocator *)((char *)v398 + v397)
          || (char *)a2[1] + (unint64_t)v398 < (char *)v399)
        {
          __break(0xC471u);
          JUMPOUT(0x19841D34CLL);
        }
        if ((_DWORD)v392 == (_DWORD)v394)
        {
          v401 = v392 + ((unint64_t)v392 >> 2);
          if (v401 >= 0x10)
            v402 = v401 + 1;
          else
            v402 = 16;
          if (v402 <= (unint64_t)v392 + 1)
            v394 = v392 + 1;
          else
            v394 = v402;
          if (v394 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19841D9D4);
          }
          v403 = WTF::fastMalloc((WTF *)(8 * v394));
          if ((_DWORD)v392)
          {
            v411 = v391;
            v412 = (_QWORD *)v403;
            v413 = v393;
            do
            {
              v414 = *(_QWORD *)v413;
              v413 = (JSC::ExecutableMemoryHandle *)((char *)v413 + 8);
              *v412++ = v414;
              v411 -= 8;
            }
            while (v411);
          }
          if (v393)
          {
            if ((JSC::ExecutableMemoryHandle *)v403 == v393)
              v415 = 0;
            else
              v415 = (JSC::ExecutableMemoryHandle *)v403;
            if ((JSC::ExecutableMemoryHandle *)v403 == v393)
              LODWORD(v394) = 0;
            WTF::fastFree((unint64_t)v393, v404, v405, v406, v407, v408, v409, v410);
            v393 = v415;
          }
          else
          {
            v393 = (JSC::ExecutableMemoryHandle *)v403;
          }
        }
        *((_QWORD *)v393 + v392++) = v399;
        v391 += 8;
      }
      while (v392 < *(unsigned int *)(v390 + 12));
      v581[0] = v393;
      v581[1] = (JSC::ExecutableMemoryHandle *)__PAIR64__(v392, v394);
      v389 = v576;
    }
    else
    {
      v393 = 0;
    }
    JSC::Profiler::Compilation::addOSRExitSite(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 24) + 112), (uint64_t *)v581);
    if (v393)
    {
      v581[0] = 0;
      LODWORD(v581[1]) = 0;
      WTF::fastFree((unint64_t)v393, v23, v24, v25, v26, v27, v28, v29);
    }
    ++v389;
  }
  while (v389 < *((unsigned int *)this + 955));
  v106 = *(JSC::Profiler::Compilation **)(*(_QWORD *)(*((_QWORD *)this + 44) + 24) + 112);
  v107 = (JSC::Profiler::Compilation **)(*((_QWORD *)this + 46) + 232);
  if (v106)
    goto LABEL_444;
LABEL_104:
  v108 = *v107;
  *v107 = v106;
  if (v108)
  {
    if (*(_DWORD *)v108 == 1)
    {
      JSC::Profiler::Compilation::~Compilation(v108, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v199, v200, v201, v202, v203, v204, v205, v206);
    }
    else
    {
      --*(_DWORD *)v108;
    }
  }
  v109 = *((_QWORD *)this + 46);
  v110 = (unsigned int **)(v109 + 264);
  v111 = *((_QWORD *)this + 480);
  *((_QWORD *)this + 480) = 0;
  v112 = *((unsigned int *)this + 963);
  *((_QWORD *)this + 481) = 0;
  if ((_DWORD)v112)
  {
    v113 = (unsigned int *)WTF::fastMalloc((WTF *)(72 * v112 + 8));
    v121 = v113;
    v122 = 0;
    *v113 = v112;
    do
    {
      v123 = &v113[v122 / 4];
      v124 = (_QWORD *)(v111 + v122);
      v125 = *(_DWORD *)(v111 + v122);
      *((_WORD *)v123 + 6) = *(_WORD *)(v111 + v122 + 4);
      v123[2] = v125;
      v126 = *(_QWORD *)(v111 + v122 + 8);
      v124[1] = 0;
      *((_QWORD *)v123 + 2) = v126;
      v127 = *(_QWORD *)(v111 + v122 + 16);
      v124[2] = 0;
      *((_QWORD *)v123 + 3) = v127;
      *((_QWORD *)v123 + 4) = *(_QWORD *)(v111 + v122 + 24);
      v128 = *(_QWORD *)(v111 + v122 + 32);
      *(_QWORD *)((char *)v123 + 45) = *(_QWORD *)(v111 + v122 + 37);
      *((_QWORD *)v123 + 5) = v128;
      v129 = *(_QWORD *)(v111 + v122 + 48);
      v124[6] = 0;
      *((_QWORD *)v123 + 7) = v129;
      LODWORD(v129) = *(_DWORD *)(v111 + v122 + 56);
      *((_BYTE *)v123 + 68) = *(_BYTE *)(v111 + v122 + 60);
      v123[16] = v129;
      *((_QWORD *)v123 + 9) = *(_QWORD *)(v111 + v122 + 64);
      v122 += 72;
    }
    while (v124 + 9 != (_QWORD *)(v111 + 72 * v112));
    v130 = 0;
    v131 = 72 * v112;
    do
    {
      v132 = *(_QWORD *)(v111 + v130 + 48);
      if ((v132 & 1) != 0 && (v132 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v132 & 0xFFFFFFFF8, v114, v115, v116, v117, v118, v119, v120);
      v133 = *(_QWORD *)(v111 + v130 + 16);
      if ((v133 & 1) != 0 && (v133 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v133 & 0xFFFFFFFF8, v114, v115, v116, v117, v118, v119, v120);
      v134 = *(_QWORD *)(v111 + v130 + 8);
      if ((v134 & 1) != 0 && (v134 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v134 & 0xFFFFFFFF8, v114, v115, v116, v117, v118, v119, v120);
      v130 += 72;
    }
    while (v131 != v130);
    if (v111)
      WTF::fastFree(v111, v114, v115, v116, v117, v118, v119, v120);
    std::unique_ptr<WTF::EmbeddedFixedVector<JSC::DFG::OSRExit>>::reset[abi:sn180100](v110, v121, v115, v116, v117, v118, v119, v120);
  }
  else
  {
    std::unique_ptr<WTF::EmbeddedFixedVector<JSC::DFG::OSRExit>>::reset[abi:sn180100]((unsigned int **)(v109 + 264), 0, v24, v25, v26, v27, v28, v29);
    if (v111)
      WTF::fastFree(v111, v135, v136, v137, v138, v139, v140, v141);
  }
  v142 = *((_QWORD *)this + 46);
  v143 = *((_QWORD *)this + 482);
  *((_QWORD *)this + 482) = 0;
  v144 = *((unsigned int *)this + 967);
  *((_QWORD *)this + 483) = 0;
  if ((_DWORD)v144)
  {
    v145 = (_DWORD *)WTF::fastMalloc((WTF *)((8 * v144) | 4));
    v146 = v145;
    *v145 = v144;
    v147 = v145 + 1;
    v148 = (v144 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v148 < 5)
    {
      v149 = (uint64_t *)v143;
      goto LABEL_121;
    }
    v149 = (uint64_t *)v143;
    if ((unint64_t)v145 - v143 + 4 < 0x20)
      goto LABEL_683;
    v165 = v148 + 1;
    v147 += v165 & 0x3FFFFFFFFFFFFFFCLL;
    v149 = (uint64_t *)(v143 + 8 * (v165 & 0x3FFFFFFFFFFFFFFCLL));
    v166 = (__int128 *)(v143 + 16);
    v167 = v145 + 5;
    v168 = v165 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v169 = *v166;
      *(v167 - 1) = *(v166 - 1);
      *v167 = v169;
      v166 += 2;
      v167 += 2;
      v168 -= 4;
    }
    while (v168);
    if (v165 != (v165 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_683:
      do
      {
LABEL_121:
        v150 = *v149++;
        *v147++ = v150;
      }
      while (v149 != (uint64_t *)(v143 + 8 * v144));
    }
    if (v143)
    {
      WTF::fastFree(v143, v135, v136, v137, v138, v139, v140, v141);
      v143 = 0;
    }
  }
  else
  {
    v146 = 0;
  }
  v151 = *(_QWORD *)(v142 + 272);
  *(_QWORD *)(v142 + 272) = v146;
  if (v151)
    WTF::fastFree(v151, v135, v136, v137, v138, v139, v140, v141);
  if (v143)
    WTF::fastFree(v143, v135, v136, v137, v138, v139, v140, v141);
  v152 = *(_QWORD *)(*((_QWORD *)this + 42) + 224);
  if (v152 && *(_DWORD *)(v152 + 8))
  {
    if (*(_DWORD *)(v152 + 12))
      *(_DWORD *)(v152 + 12) = 0;
    v255 = *(_QWORD *)v152;
    if (*(_QWORD *)v152)
    {
      *(_QWORD *)v152 = 0;
      *(_DWORD *)(v152 + 8) = 0;
      WTF::fastFree(v255, v135, v136, v137, v138, v139, v140, v141);
    }
  }
  v153 = *((unsigned int *)this + 983);
  if ((_DWORD)v153)
  {
    v207 = 0;
    for (j = 0; j < v153; ++j)
    {
      v209 = *((_QWORD *)this + 490);
      v210 = *(_DWORD *)(*(_QWORD *)(v209 + v207) + 44);
      if (v210 != -1)
      {
        if (v210 < 4)
          v211 = 0;
        else
          v211 = *(_DWORD *)((char *)a2[3] + (v210 & 0xFFFFFFFC) - 4);
        v212 = (v210 - v211);
        v213 = a2[23];
        v214 = (JSC::ExecutableAllocator *)((char *)v213 + v212);
        if (v213 > v214 || (char *)a2[1] + (unint64_t)v213 < (char *)v214)
        {
          __break(0xC471u);
          JUMPOUT(0x19841D39CLL);
        }
        v216 = v209 + v207;
        v217 = *(_OWORD *)(v216 + 8);
        v582 = *(JSC::ExecutableAllocator **)(v216 + 24);
        *(_OWORD *)v581 = v217;
        LODWORD(v581[0]) = *(_DWORD *)(v216 + 32);
        HIDWORD(v581[0]) = LODWORD(v581[0]) + 1;
        v582 = v214;
        v218 = *((_QWORD *)this + 42);
        v221 = *(_QWORD *)(v218 + 224);
        v220 = (unint64_t *)(v218 + 224);
        v219 = v221;
        if (!v221)
        {
          v424 = (WTF::AtomStringImpl *)WTF::fastMalloc((WTF *)0x20);
          *(_OWORD *)v424 = 0u;
          *((_OWORD *)v424 + 1) = 0u;
          __dmb(0xAu);
          std::unique_ptr<JSC::CodeBlock::RareData>::reset[abi:sn180100](v220, v424, v425, v426, v427, v428, v429, v430);
          v219 = *v220;
        }
        v222 = *(unsigned int *)(v219 + 12);
        if ((_DWORD)v222 == *(_DWORD *)(v219 + 8))
        {
          v226 = WTF::Vector<JSC::HandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v219, v222 + 1, (unint64_t)v581);
          v223 = *(_QWORD *)v219 + 24 * *(unsigned int *)(v219 + 12);
          v224 = *(_OWORD *)v226;
          v225 = *(JSC::ExecutableAllocator **)(v226 + 16);
        }
        else
        {
          v223 = *(_QWORD *)v219 + 24 * v222;
          v224 = *(_OWORD *)v581;
          v225 = v582;
        }
        *(_QWORD *)(v223 + 16) = v225;
        *(_OWORD *)v223 = v224;
        ++*(_DWORD *)(v219 + 12);
        v153 = *((unsigned int *)this + 983);
      }
      v207 += 40;
    }
  }
  if (*((_BYTE *)this + 3952))
  {
    v465 = WTF::fastMalloc((WTF *)0x30);
    v581[0] = (JSC::ExecutableMemoryHandle *)JSC::PCToCodeOriginMap::PCToCodeOriginMap(v465, (_DWORD *)this + 984, (uint64_t)a2, v466, v467, v468, v469, v470);
    std::unique_ptr<JSC::PCToCodeOriginMap>::operator=[abi:sn180100]((unint64_t *)(*((_QWORD *)this + 46) + 152), (unint64_t *)v581, v471, v472, v473, v474, v475, v476);
    std::unique_ptr<JSC::PCToCodeOriginMap>::~unique_ptr[abi:sn180100]((unint64_t *)v581, v477, v478, v479, v480, v481, v482, v483);
  }
  v154 = *((_QWORD *)this + 44);
  v155 = *(_QWORD *)(v154 + 912);
  *(_QWORD *)(v154 + 912) = 0;
  v156 = *(unsigned int *)(v154 + 924);
  *(_QWORD *)(v154 + 920) = 0;
  if ((_DWORD)v156)
  {
    v157 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v156 + 8));
    v158 = v157;
    *v157 = v156;
    v159 = v157 + 2;
    v160 = (v156 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v160 < 5)
    {
      v161 = (uint64_t *)v155;
      goto LABEL_135;
    }
    v161 = (uint64_t *)v155;
    if ((unint64_t)v157 - v155 + 8 < 0x20)
      goto LABEL_684;
    v170 = v160 + 1;
    v159 += v170 & 0x3FFFFFFFFFFFFFFCLL;
    v161 = (uint64_t *)(v155 + 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL));
    v171 = (__int128 *)(v155 + 16);
    v172 = v157 + 6;
    v173 = v170 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v174 = *v171;
      *(v172 - 1) = *(v171 - 1);
      *v172 = v174;
      v171 += 2;
      v172 += 2;
      v173 -= 4;
    }
    while (v173);
    if (v170 != (v170 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_684:
      do
      {
LABEL_135:
        v162 = *v161++;
        *v159++ = v162;
      }
      while (v161 != (uint64_t *)(v155 + 8 * v156));
    }
  }
  else
  {
    v158 = 0;
  }
  if (v155)
    WTF::fastFree(v155, v135, v136, v137, v138, v139, v140, v141);
  v163 = *((_QWORD *)this + 46);
  v164 = *(_QWORD *)(v163 + 336);
  *(_QWORD *)(v163 + 336) = v158;
  if (v164)
    WTF::fastFree(v164, v135, v136, v137, v138, v139, v140, v141);
}

unsigned int **WTF::FixedVector<std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>::~FixedVector(unsigned int **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = WTF::TrailingArray<WTF::EmbeddedFixedVector<std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>::~TrailingArray(v9, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree((unint64_t)v10, v11, v12, v13, v14, v15, v16, v17);
  }
  return a1;
}

_QWORD *WTF::FixedVector<JSC::DFG::UnlinkedStructureStubInfo>::FixedVector(_QWORD *a1, uint64_t a2)
{
  unsigned int v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;

  if (a2)
  {
    v3 = a2;
    v4 = (_DWORD *)WTF::fastMalloc((WTF *)(((unint64_t)a2 << 6) | 8));
    *v4 = v3;
    if (v3)
    {
      v5 = 2;
      do
      {
        v6 = &v4[v5];
        *((_OWORD *)v6 + 2) = 0uLL;
        *((_OWORD *)v6 + 3) = 0uLL;
        *(_OWORD *)v6 = 0uLL;
        *((_OWORD *)v6 + 1) = 0uLL;
        *((_QWORD *)v6 + 4) = 2;
        *((_QWORD *)v6 + 6) = -1;
        v5 += 16;
        *((_BYTE *)v6 + 56) = -1;
      }
      while (v6 + 16 != &v4[16 * (unint64_t)v3 + 2]);
    }
  }
  else
  {
    v4 = 0;
  }
  *a1 = v4;
  return a1;
}

unsigned int **WTF::FixedVector<JSC::DFG::UnlinkedStructureStubInfo>::operator=(unsigned int **a1, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = v11 << 6;
      v13 = (uint64_t *)(v10 + 10);
      do
      {
        v15 = *v13;
        v13 += 8;
        v14 = v15;
        if ((v15 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        v12 -= 64;
      }
      while (v12);
    }
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

_QWORD *WTF::FixedVector<JSC::DFG::UnlinkedCallLinkInfo>::FixedVector(_QWORD *a1, uint64_t a2)
{
  unsigned int v3;
  _DWORD *v4;
  uint64_t v5;

  if (a2)
  {
    v3 = a2;
    v4 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * a2) | 8));
    *v4 = v3;
    if (v3)
    {
      v5 = 0;
      do
      {
        *(_OWORD *)&v4[v5 + 2] = xmmword_199155E60;
        v5 += 4;
      }
      while (4 * v3 != v5);
    }
  }
  else
  {
    v4 = 0;
  }
  *a1 = v4;
  return a1;
}

unsigned int **WTF::FixedVector<JSC::DFG::UnlinkedCallLinkInfo>::operator=(unsigned int **a1, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    v12 = (uint64_t *)(v10 + 2);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v13 = 16 * v11;
      do
      {
        v14 = *v12;
        if ((*v12 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        v12 += 2;
        v13 -= 16;
      }
      while (v13);
    }
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

unint64_t *std::unique_ptr<JSC::PCToCodeOriginMap>::operator=[abi:sn180100](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_QWORD *)(v10 + 24);
    if (v12)
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

unint64_t *std::unique_ptr<JSC::PCToCodeOriginMap>::~unique_ptr[abi:sn180100](unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    v11 = *(_QWORD *)(v9 + 24);
    if (v11)
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void JSC::DFG::JITCompiler::noticeCatchEntrypoint(uint64_t a1, uint64_t a2, int *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  unint64_t v27;
  WTF *v28;
  int v29;

  if (!*(_BYTE *)(a2 + 20))
  {
    __break(0xC471u);
    JUMPOUT(0x19841E574);
  }
  if (!*(_BYTE *)(a2 + 18)
    || ((v8 = *a3, *a3 < 4) ? (v9 = 0) : (v9 = *(_DWORD *)((v8 & 0xFFFFFFFC) + a4[3] - 4)),
        (v10 = (v8 - v9), v11 = a4[23], v12 = v10 + v11, v11 <= v12)
      ? (v13 = v11 + a4[1] >= v12)
      : (v13 = 0),
        !v13))
  {
    __break(0xC471u);
    JUMPOUT(0x19841E554);
  }
  v14 = *(_QWORD *)(a1 + 352);
  v15 = *(_DWORD *)(a2 + 4);
  v27 = v12;
  WTF::FixedVector<JSC::DFG::FlushFormat>::FixedVector<0ul,WTF::CrashOnOverflow>((unint64_t *)&v28, a5, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v29 = v15;
  v23 = *(_DWORD *)(v14 + 892);
  if (v23 == *(_DWORD *)(v14 + 888))
  {
    WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::CatchEntrypointData>(v14 + 880, (unint64_t)&v27);
  }
  else
  {
    v24 = *(_QWORD *)(v14 + 880) + 24 * v23;
    *(_QWORD *)v24 = v27;
    v25 = v28;
    v28 = 0;
    *(_QWORD *)(v24 + 8) = v25;
    *(_DWORD *)(v24 + 16) = v29;
    ++*(_DWORD *)(v14 + 892);
  }
  v26 = v28;
  v28 = 0;
  if (v26)
    WTF::fastFree((unint64_t)v26, v16, v17, v18, v19, v20, v21, v22);
}

void JSC::DFG::JITCompiler::noticeOSREntry(uint64_t a1, unint64_t a2, int *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  int v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int64x2_t *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  WTF *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  WTF *v68;
  WTF *v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  WTF *v93;
  WTF *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF *v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  WTF *v107;
  uint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  size_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  size_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  size_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  int64x2_t *v131;
  size_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t *v136;
  size_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t *v141;
  size_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  __int128 v149;
  WTF *v150;
  uint64_t v151;
  int64x2_t v152;
  WTF *v153;
  uint64_t v154;

  if (*(_BYTE *)(a2 + 20))
  {
    __break(0xC471u);
    JUMPOUT(0x19841E71CLL);
  }
  v8 = a2;
  if (*(_BYTE *)(a2 + 18))
  {
    *((_QWORD *)&v149 + 1) = 0;
    v150 = 0;
    v151 = 0;
    v152 = vdupq_n_s64(0x8000000000000000);
    v153 = 0;
    v154 = 0x8000000000000000;
    LODWORD(v149) = *(_DWORD *)(a2 + 4);
    v10 = *a3;
    if (*a3 < 4)
      v11 = 0;
    else
      v11 = *(_DWORD *)((v10 & 0xFFFFFFFC) + a4[3] - 4);
    v12 = (v10 - v11);
    v13 = a4[23];
    v14 = v12 + v13;
    if (v13 > v14 || v13 + a4[1] < v14)
    {
      __break(0xC471u);
      JUMPOUT(0x19841E6FCLL);
    }
    *((_QWORD *)&v149 + 1) = v14;
    v16 = *(unsigned int *)(a2 + 180);
    if ((_DWORD)v16)
    {
      v17 = (WTF *)WTF::fastMalloc((WTF *)((32 * v16) | 8));
      v18 = *(_QWORD *)(v8 + 168);
      v19 = *(unsigned int *)(v8 + 180);
      *(_DWORD *)v17 = v16;
      if ((_DWORD)v19)
      {
        v20 = 0;
        v21 = 32 * v19;
        do
        {
          *(_QWORD *)((char *)v17 + v20 + 8) = 0;
          v22 = (unint64_t *)((char *)v17 + v20 + 8);
          v23 = *(_QWORD *)(v18 + v20);
          if ((v23 & 1) == 0 || v23 == 4)
          {
            v24 = v23 & 0xFFFFFFFFFFFFFFFDLL;
            *v22 = v24;
          }
          else
          {
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)((char *)v17 + v20 + 8), (_QWORD *)(v18 + v20));
            v24 = *v22;
          }
          v25 = v24 & 0xFFFFFFFFFFFFFFFDLL;
          v26 = v24 | 2;
          if ((*(_BYTE *)(v18 + v20) & 2) == 0)
            v26 = v25;
          *v22 = v26;
          v27 = (char *)v17 + v20;
          v28 = *(_OWORD *)(v18 + v20 + 8);
          *((_QWORD *)v27 + 4) = *(_QWORD *)(v18 + v20 + 24);
          *((_OWORD *)v27 + 1) = v28;
          v20 += 32;
        }
        while (v21 != v20);
      }
    }
    else
    {
      v17 = 0;
    }
    v29 = *(_QWORD *)(v8 + 184);
    v147 = 0;
    v148 = 0;
    v30 = *(unsigned int *)(v8 + 88);
    if ((_DWORD)v30)
    {
      v31 = 0;
      v32 = (char *)v17 + 16;
      do
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v8 + 72) + 8 * v31);
        if (!v33 || !*(_DWORD *)(v33 + 52))
        {
          if (*(_DWORD *)v17 <= v31)
          {
            __break(0xC471u);
            JUMPOUT(0x19841EDA0);
          }
          *(_QWORD *)v32 = 0x3F73FFFFFFF7;
          *((_DWORD *)v32 + 2) = -21020677;
          v34 = *((_QWORD *)v32 - 1);
          if ((v34 & 1) != 0)
            WTF::fastFree(v34 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          *((_QWORD *)v32 - 1) = 4;
          *((_QWORD *)v32 + 2) = 0;
          v30 = *(unsigned int *)(v8 + 88);
        }
        ++v31;
        v32 += 32;
      }
      while (v31 < v30);
    }
    v145 = a1;
    if (*(_DWORD *)(v8 + 92))
    {
      v35 = 0;
      v36 = 0;
      v37 = 0;
      while (1)
      {
        v38 = *(_QWORD *)(*(_QWORD *)(v8 + 72) + 8 * (v37 + *(unsigned int *)(v8 + 88)));
        if (!v38 || !*(_DWORD *)(v38 + 52))
        {
          if (*(_DWORD *)v17 <= (v37 + v29))
          {
            __break(0xC471u);
            JUMPOUT(0x19841EDC0);
          }
          v44 = (uint64_t)v17 + 32 * (v37 + v29) + 8;
          *(_QWORD *)(v44 + 8) = 0x3F73FFFFFFF7;
          *(_DWORD *)(v44 + 16) = -21020677;
          if ((*(_QWORD *)v44 & 1) != 0)
          {
            v58 = v35;
            WTF::fastFree(*(_QWORD *)v44 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            v35 = v58;
          }
          *(_QWORD *)v44 = 4;
          *(_QWORD *)(v44 + 24) = 0;
          goto LABEL_75;
        }
        v39 = *(_QWORD **)(v38 + 72);
        v40 = v39;
        do
        {
          v41 = v40;
          v40 = (_QWORD *)*v40;
        }
        while (v40);
        if (v41 != v39)
          *v39 = v41;
        v42 = v154;
        if (v154 < 0)
          v43 = 63;
        else
          v43 = *(_QWORD *)(2 * v154);
        v45 = ~*((_DWORD *)v41 + 8);
        a2 = v45 + 1;
        if (v43 < v45 + 1)
        {
          v143 = v35;
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v154, a2, 0);
          v35 = v143;
          v42 = v154;
        }
        if (v42 >= 0)
          v46 = (uint64_t *)(2 * v42 + 8);
        else
          v46 = &v154;
        *(uint64_t *)((char *)v46 + ((v45 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v45;
        if (!*((_BYTE *)v41 + 40) && *((_BYTE *)v41 + 43))
        {
          if (*((_DWORD *)v41 + 14) == 1)
          {
            v56 = v152.i64[0];
            if (v152.i64[0] < 0)
              v57 = 63;
            else
              v57 = *(_QWORD *)(2 * v152.i64[0]);
            v59 = &v152;
            if (v57 <= v37)
            {
              v144 = v35;
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v152, v37 + 1, 0);
              v35 = v144;
              v56 = v152.i64[0];
              v59 = &v152;
            }
          }
          else
          {
            v47 = v41;
            do
            {
              v48 = v47;
              v47 = (_QWORD *)*v47;
            }
            while (v47);
            if (v48 != v41)
              *v41 = v48;
            if ((v48[2] & 0xFFFFFFFCFFFFFFFFLL) == 0 || !*((_DWORD *)v41 + 7))
              goto LABEL_70;
            v49 = v41;
            do
            {
              v50 = v49;
              v49 = (_QWORD *)*v49;
            }
            while (v49);
            if (v50 != v41)
              *v41 = v50;
            v51 = v50[2];
            if (!v51 || (v51 & 0xFFFFFFF0FFFFFFFFLL) != 0)
              goto LABEL_70;
            v61 = v35;
            v56 = v152.i64[1];
            if (v152.i64[1] < 0)
              v62 = 63;
            else
              v62 = *(_QWORD *)(2 * v152.i64[1]);
            v59 = (int64x2_t *)&v152.u64[1];
            if (v62 <= v37)
            {
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v152.u64[1], v37 + 1, 0);
              v35 = v61;
              v56 = v152.i64[1];
              v59 = (int64x2_t *)&v152.u64[1];
            }
          }
          if (v56 >= 0)
            v60 = 2 * v56 + 8;
          else
            v60 = (uint64_t)v59;
          *(_QWORD *)(v60 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v37;
        }
LABEL_70:
        v53 = *((_DWORD *)v41 + 8);
        if (v53 != *((_DWORD *)v41 + 6))
        {
          LODWORD(v146) = *((_DWORD *)v41 + 6);
          HIDWORD(v146) = v53;
          if (v36 == (_DWORD)v148)
          {
            v55 = (_QWORD *)WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v147, v36 + 1, (unint64_t)&v146);
            v54 = HIDWORD(v148);
            v35 = v147;
            *(_QWORD *)(v147 + 8 * HIDWORD(v148)) = *v55;
          }
          else
          {
            *(_QWORD *)(v35 + 8 * v36) = v146;
            v54 = HIDWORD(v148);
          }
          v36 = v54 + 1;
          HIDWORD(v148) = v54 + 1;
        }
LABEL_75:
        if (++v37 >= *(unsigned int *)(v8 + 92))
          goto LABEL_92;
      }
    }
    v36 = 0;
LABEL_92:
    v63 = v150;
    v150 = v17;
    if (v63)
    {
      v65 = (_QWORD *)((char *)v63 + 8);
      v64 = *(unsigned int *)v63;
      if ((_DWORD)v64)
      {
        v66 = 32 * v64;
        do
        {
          if ((*v65 & 1) != 0)
            WTF::fastFree(*v65 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          v65 += 4;
          v66 -= 32;
        }
        while (v66);
      }
      WTF::fastFree((unint64_t)v63, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    v151 = v29;
    v67 = v147;
    v147 = 0;
    v148 = 0;
    if (v36)
    {
      v68 = (WTF *)WTF::fastMalloc((WTF *)((8 * v36) | 4));
      v69 = v68;
      v70 = 0;
      *(_DWORD *)v68 = v36;
      do
      {
        *(_QWORD *)((char *)v68 + v70 + 4) = *(_QWORD *)(v67 + v70);
        v70 += 8;
      }
      while (8 * v36 != v70);
      v71 = v145;
      if (v67)
      {
        WTF::fastFree(v67, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v67 = 0;
      }
    }
    else
    {
      v69 = 0;
      v71 = v145;
    }
    v72 = v153;
    v153 = v69;
    if (v72)
      WTF::fastFree((unint64_t)v72, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (v67)
      WTF::fastFree(v67, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v73 = (uint64_t *)(v71 + 3824);
    v74 = *(unsigned int *)(v71 + 3836);
    if ((_DWORD)v74 == *(_DWORD *)(v71 + 3832))
    {
      v75 = WTF::Vector<JSC::DFG::OSREntryData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v73, v74 + 1, (unint64_t)&v149);
      v76 = *(unsigned int *)(v71 + 3836);
      v77 = *(_QWORD *)(v71 + 3824);
      v78 = v77 + (v76 << 6);
      *(_OWORD *)v78 = *(_OWORD *)v75;
      v79 = *(_QWORD *)(v75 + 16);
      *(_QWORD *)(v75 + 16) = 0;
      *(_QWORD *)(v78 + 16) = v79;
      v80 = *(_QWORD *)(v75 + 24);
      *(_QWORD *)(v78 + 32) = 0x8000000000000000;
      v81 = (unint64_t *)(v78 + 32);
      *(_QWORD *)(v78 + 24) = v80;
      v83 = (uint64_t *)(v75 + 32);
      v82 = *(_QWORD *)(v75 + 32);
      if ((v82 & 0x8000000000000000) == 0 && v82 >= 2)
      {
        v110 = *(_QWORD *)(2 * v82) + 63;
        v111 = v110 & 0xFFFFFFFFFFFFFFC0;
        v112 = WTF::fastMalloc((WTF *)(((v110 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
        *(_QWORD *)v112 = v111;
        v113 = (_QWORD *)(2 * *v83);
        v114 = *v83 >= 0 ? v113 + 1 : (_QWORD *)(v75 + 32);
        v115 = *v83 < 0 ? 8 : (unint64_t)(*v113 + 7) >> 3;
        memcpy((void *)(v112 + 8), v114, v115);
        v82 = v112 >> 1;
        if ((uint64_t)*v81 >= 2)
          WTF::fastFree(2 * *v81, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      *v81 = v82;
      *(_QWORD *)(v78 + 40) = 0x8000000000000000;
      v84 = (unint64_t *)(v78 + 40);
      v86 = (uint64_t *)(v75 + 40);
      v85 = *(_QWORD *)(v75 + 40);
      if ((v85 & 0x8000000000000000) == 0 && v85 >= 2)
      {
        v116 = *(_QWORD *)(2 * v85) + 63;
        v117 = v116 & 0xFFFFFFFFFFFFFFC0;
        v118 = WTF::fastMalloc((WTF *)(((v116 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
        *(_QWORD *)v118 = v117;
        v119 = (_QWORD *)(2 * *v86);
        v120 = *v86 >= 0 ? v119 + 1 : (_QWORD *)(v75 + 40);
        v121 = *v86 < 0 ? 8 : (unint64_t)(*v119 + 7) >> 3;
        memcpy((void *)(v118 + 8), v120, v121);
        v85 = v118 >> 1;
        if ((uint64_t)*v84 >= 2)
          WTF::fastFree(2 * *v84, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      v87 = v77 + (v76 << 6);
      *(_QWORD *)(v87 + 56) = 0x8000000000000000;
      v88 = (unint64_t *)(v87 + 56);
      *v84 = v85;
      v91 = *(_QWORD *)(v75 + 56);
      v90 = (uint64_t *)(v75 + 56);
      v89 = v91;
      v92 = *(v90 - 1);
      *(v90 - 1) = 0;
      *(v88 - 1) = v92;
      if ((v91 & 0x8000000000000000) == 0 && v89 >= 2)
      {
        v122 = *(_QWORD *)(2 * v89) + 63;
        v123 = v122 & 0xFFFFFFFFFFFFFFC0;
        v124 = WTF::fastMalloc((WTF *)(((v122 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
        *(_QWORD *)v124 = v123;
        v125 = (_QWORD *)(2 * *v90);
        v126 = *v90 >= 0 ? v125 + 1 : v90;
        v127 = *v90 < 0 ? 8 : (unint64_t)(*v125 + 7) >> 3;
        memcpy((void *)(v124 + 8), v126, v127);
        v89 = v124 >> 1;
        if ((uint64_t)*v88 >= 2)
          WTF::fastFree(2 * *v88, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      *v88 = v89;
    }
    else
    {
      v98 = *v73;
      v99 = *v73 + (v74 << 6);
      *(_OWORD *)v99 = v149;
      v100 = v150;
      v150 = 0;
      *(_QWORD *)(v99 + 16) = v100;
      v101 = v151;
      *(_QWORD *)(v99 + 32) = 0x8000000000000000;
      v102 = (uint64_t *)(v99 + 32);
      *(_QWORD *)(v99 + 24) = v101;
      v103 = v152.i64[0];
      if ((v152.i64[0] & 0x8000000000000000) == 0 && v152.i64[0] >= 2uLL)
      {
        v128 = *(_QWORD *)(2 * v152.i64[0]) + 63;
        v129 = v128 & 0xFFFFFFFFFFFFFFC0;
        v130 = WTF::fastMalloc((WTF *)(((v128 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
        *(_QWORD *)v130 = v129;
        v131 = v152.i64[0] >= 0 ? (int64x2_t *)(2 * v152.i64[0] + 8) : &v152;
        v132 = v152.i64[0] < 0 ? 8 : (unint64_t)(*(_QWORD *)(2 * v152.i64[0]) + 7) >> 3;
        memcpy((void *)(v130 + 8), v131, v132);
        v103 = v130 >> 1;
        if (*v102 >= 2)
          WTF::fastFree(2 * *v102, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      *v102 = v103;
      *(_QWORD *)(v99 + 40) = 0x8000000000000000;
      v104 = (uint64_t *)(v99 + 40);
      v105 = v152.u64[1];
      if ((v152.i64[1] & 0x8000000000000000) == 0 && v152.i64[1] >= 2uLL)
      {
        v133 = *(_QWORD *)(2 * v152.i64[1]) + 63;
        v134 = v133 & 0xFFFFFFFFFFFFFFC0;
        v135 = WTF::fastMalloc((WTF *)(((v133 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
        *(_QWORD *)v135 = v134;
        v136 = v152.i64[1] >= 0 ? (unint64_t *)(2 * v152.i64[1] + 8) : &v152.u64[1];
        v137 = v152.i64[1] < 0 ? 8 : (unint64_t)(*(_QWORD *)(2 * v152.i64[1]) + 7) >> 3;
        memcpy((void *)(v135 + 8), v136, v137);
        v105 = v135 >> 1;
        if (*v104 >= 2)
          WTF::fastFree(2 * *v104, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      *v104 = v105;
      v106 = v98 + (v74 << 6);
      v107 = v153;
      v153 = 0;
      *(_QWORD *)(v106 + 56) = 0x8000000000000000;
      v108 = (uint64_t *)(v106 + 56);
      *(v108 - 1) = (uint64_t)v107;
      v109 = v154;
      if ((v154 & 0x8000000000000000) == 0 && (unint64_t)v154 >= 2)
      {
        v138 = *(_QWORD *)(2 * v154) + 63;
        v139 = v138 & 0xFFFFFFFFFFFFFFC0;
        v140 = WTF::fastMalloc((WTF *)(((v138 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
        *(_QWORD *)v140 = v139;
        v141 = v154 >= 0 ? (uint64_t *)(2 * v154 + 8) : &v154;
        v142 = v154 < 0 ? 8 : (unint64_t)(*(_QWORD *)(2 * v154) + 7) >> 3;
        memcpy((void *)(v140 + 8), v141, v142);
        v109 = v140 >> 1;
        if (*v108 >= 2)
          WTF::fastFree(2 * *v108, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      *v108 = v109;
    }
    ++*(_DWORD *)(v71 + 3836);
    if ((v154 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v154, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v93 = v153;
    v153 = 0;
    if (v93)
      WTF::fastFree((unint64_t)v93, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if ((v152.i64[1] & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v152.i64[1], (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if ((v152.i64[0] & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v152.i64[0], (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v94 = v150;
    v150 = 0;
    if (v94)
    {
      v96 = (_QWORD *)((char *)v94 + 8);
      v95 = *(unsigned int *)v94;
      if ((_DWORD)v95)
      {
        v97 = 32 * v95;
        do
        {
          if ((*v96 & 1) != 0)
            WTF::fastFree(*v96 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          v96 += 4;
          v97 -= 32;
        }
        while (v97);
      }
      WTF::fastFree((unint64_t)v94, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    }
  }
}

void JSC::DFG::JITCompiler::appendExceptionHandlingOSRExit(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7, uint64_t a8)
{
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  WTF *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  unsigned int v69;
  int v70;
  _BYTE v71[24];
  uint64_t v72;
  int v73;
  char v74;
  int v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[2];
  uint64_t v81;
  int v82;
  char v83;
  _BYTE v84[32];
  uint64_t v85;
  __int128 v86;
  int v87;

  v72 = 2;
  v74 = 0;
  v73 = 0;
  JSC::DFG::OSRExit::OSRExit((uint64_t)&v75, a3, (JSC::DFG::Node *)0xFF80000000, (uint64_t)&v72, a2, a4, 0xFFFFFFFFLL, a8);
  if (&v77 != a5)
  {
    if ((v77 & 1) != 0 && (v77 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v77 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
    v20 = *a5;
    if ((*a5 & 1) != 0)
    {
      v63 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      if ((v20 & 2) != 0
        || ((v64 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v64 != 0x3FFFFFFF)
          ? (v65 = (_DWORD)v64 == -1)
          : (v65 = 1),
            v65))
      {
        v66 = 2;
      }
      else if (v64 >> 28)
      {
        v67 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v67 = v63;
        *(_DWORD *)(v67 + 8) = v64;
        v66 = 1;
        v63 = v67;
      }
      else
      {
        v66 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
        v63 = v64 << 36;
      }
      v20 = v63 | v66;
    }
    v77 = v20;
  }
  LODWORD(v79) = a7;
  v21 = *(unsigned int *)(a8 + 12);
  v68 = (WTF *)v71;
  v69 = 2;
  v70 = v21;
  if (v21 < 3)
  {
    v23 = v71;
  }
  else
  {
    if (v21 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x19841F50CLL);
    }
    v22 = 12 * v21;
    v23 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v21));
    v69 = (v22 & 0xFFFFFFFC) / 0xC;
    v68 = (WTF *)v23;
    LODWORD(v21) = *(_DWORD *)(a8 + 12);
  }
  if ((_DWORD)v21)
  {
    v24 = *(_QWORD *)a8;
    v25 = *(_QWORD *)a8 + 12 * v21;
    do
    {
      *(_DWORD *)v23 = *(_DWORD *)v24;
      *(_QWORD *)(v23 + 4) = *(_QWORD *)(v24 + 4);
      v24 += 12;
      v23 += 12;
    }
    while (v24 != v25);
  }
  *(_QWORD *)v84 = &v84[16];
  *(_QWORD *)&v84[8] = 2;
  v86 = xmmword_199123900;
  v87 = -16773311;
  WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unint64_t)v84, (unsigned int *)&v68, v14, v15, v16, v17, v18, v19);
  WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::append<JSC::DFG::OSRExitCompilationInfo&>(a1 + 3784, (uint64_t *)v84);
  v33 = *(_QWORD *)(a1 + 3784) - 1;
  if (v33 >> 2 >= *(unsigned int *)(a1 + 3804))
  {
    __break(0xC471u);
    JUMPOUT(0x19841F504);
  }
  v34 = *(_QWORD *)(*(_QWORD *)(a1 + 3792) + 8 * (v33 >> 2));
  v35 = *(_QWORD *)v84;
  if (&v84[16] != *(_BYTE **)v84 && *(_QWORD *)v84)
  {
    *(_QWORD *)v84 = 0;
    *(_DWORD *)&v84[8] = 0;
    WTF::fastFree(v35, v26, v27, v28, v29, v30, v31, v32);
  }
  v36 = v68;
  if (v71 != (_BYTE *)v68 && v68)
  {
    v68 = 0;
    v69 = 0;
    WTF::fastFree((unint64_t)v36, v26, v27, v28, v29, v30, v31, v32);
  }
  v37 = (_QWORD *)(a1 + 3840);
  v38 = *(unsigned int *)(a1 + 3852);
  if ((_DWORD)v38 == *(_DWORD *)(a1 + 3848))
  {
    v46 = (int *)WTF::Vector<JSC::DFG::OSRExit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, v38 + 1, (unint64_t)&v75);
    v57 = *(_QWORD *)(a1 + 3840) + 72 * *(unsigned int *)(a1 + 3852);
    v58 = *v46;
    *(_WORD *)(v57 + 4) = *((_WORD *)v46 + 2);
    *(_DWORD *)v57 = v58;
    v59 = *((_QWORD *)v46 + 1);
    *((_QWORD *)v46 + 1) = 0;
    *(_QWORD *)(v57 + 8) = v59;
    v60 = *((_QWORD *)v46 + 2);
    *((_QWORD *)v46 + 2) = 0;
    *(_QWORD *)(v57 + 16) = v60;
    *(_QWORD *)(v57 + 24) = *((_QWORD *)v46 + 3);
    v61 = *((_QWORD *)v46 + 4);
    *(_QWORD *)(v57 + 37) = *(_QWORD *)((char *)v46 + 37);
    *(_QWORD *)(v57 + 32) = v61;
    v62 = *((_QWORD *)v46 + 6);
    *((_QWORD *)v46 + 6) = 0;
    *(_QWORD *)(v57 + 48) = v62;
    LODWORD(v62) = v46[14];
    *(_BYTE *)(v57 + 60) = *((_BYTE *)v46 + 60);
    *(_DWORD *)(v57 + 56) = v62;
    v45 = (_QWORD *)(v57 + 64);
  }
  else
  {
    v39 = *v37 + 72 * v38;
    v40 = v75;
    *(_WORD *)(v39 + 4) = v76;
    *(_DWORD *)v39 = v40;
    v41 = v77;
    v77 = 0;
    *(_QWORD *)(v39 + 8) = v41;
    v42 = v78;
    v78 = 0;
    *(_QWORD *)(v39 + 16) = v42;
    *(_QWORD *)(v39 + 24) = v79;
    v43 = v80[0];
    *(_QWORD *)(v39 + 37) = *(_QWORD *)((char *)v80 + 5);
    *(_QWORD *)(v39 + 32) = v43;
    v44 = v81;
    v81 = 0;
    *(_QWORD *)(v39 + 48) = v44;
    LODWORD(v44) = v82;
    *(_BYTE *)(v39 + 60) = v83;
    *(_DWORD *)(v39 + 56) = v44;
    v45 = (_QWORD *)(v39 + 64);
    v46 = &v75;
  }
  *v45 = *((_QWORD *)v46 + 8);
  ++*(_DWORD *)(a1 + 3852);
  v47 = (_QWORD *)(a1 + 3920);
  *(_OWORD *)&v84[8] = *(_OWORD *)a6;
  v48 = *(_QWORD *)(a6 + 16);
  *(_QWORD *)v84 = v34 + ((v33 & 3) << 6);
  *(_QWORD *)&v84[24] = v48;
  LODWORD(v85) = a7;
  v49 = *(unsigned int *)(a1 + 3932);
  if ((_DWORD)v49 == *(_DWORD *)(a1 + 3928))
  {
    v53 = WTF::Vector<JSC::DFG::JITCompiler::ExceptionHandlingOSRExitInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, v49 + 1, (unint64_t)v84);
    v54 = *(_QWORD *)(a1 + 3920) + 40 * *(unsigned int *)(a1 + 3932);
    v55 = *(_QWORD *)(v53 + 32);
    v56 = *(_OWORD *)(v53 + 16);
    *(_OWORD *)v54 = *(_OWORD *)v53;
    *(_OWORD *)(v54 + 16) = v56;
    *(_QWORD *)(v54 + 32) = v55;
  }
  else
  {
    v50 = *v47 + 40 * v49;
    v51 = *(_OWORD *)v84;
    v52 = *(_OWORD *)&v84[16];
    *(_QWORD *)(v50 + 32) = v85;
    *(_OWORD *)v50 = v51;
    *(_OWORD *)(v50 + 16) = v52;
  }
  ++*(_DWORD *)(a1 + 3932);
  if ((v81 & 1) != 0 && (v81 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v81 & 0xFFFFFFFF8, v26, v27, v28, v29, v30, v31, v32);
  if ((v78 & 1) != 0 && (v78 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v78 & 0xFFFFFFFF8, v26, v27, v28, v29, v30, v31, v32);
  if ((v77 & 1) != 0 && (v77 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v77 & 0xFFFFFFFF8, v26, v27, v28, v29, v30, v31, v32);
}

void JSC::DFG::JITCompiler::loadLinkableConstant(_DWORD *a1, uint64_t a2, JSC::ARM64LogicalImmediate *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((_DWORD)a2 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a1, (uint64_t)this, a4, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)a1, (a2 << 35) + 0x380000001ALL, a4, a4, a5, a6, a7, a8);
}

void JSC::DFG::JITCompiler::LinkableConstant::store(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  char v11;
  uint64_t v12;

  v10 = *a1;
  if (*a1 == -1)
  {
    v12 = *((_QWORD *)a1 + 1);
    if (!v12)
    {
      v11 = 63;
      goto LABEL_9;
    }
    if (*(_BYTE *)(a2 + 212))
    {
      JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a2, v12, a2 + 264, a4, a5, a6, a7, a8);
      v11 = 16;
      goto LABEL_9;
    }
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x19841F614);
  }
  if (!*(_BYTE *)(a2 + 212))
    goto LABEL_12;
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  JSC::MacroAssemblerARM64::load64(a2, ((unint64_t)((8 * v10 + 56) >> 3) << 35) | 0x1A, *(char *)(a2 + 272), a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19841F634);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  v11 = *(_BYTE *)(a2 + 272);
LABEL_9:
  JSC::MacroAssemblerARM64::store64(a2, v11, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::DFG::JITCompiler::addToConstantPool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = a3 | (a2 << 48);
  v9 = (uint64_t *)(*(_QWORD *)(a1 + 352) + 928);
  v10 = *v9;
  if (*v9)
    LODWORD(v10) = *(_DWORD *)(v10 - 12);
  v16 = v10;
  WTF::HashMap<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,unsigned int,JSC::DFG::LinkerIR::ValueHash,JSC::DFG::LinkerIR::ValueTraits,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int>(v9, &v19, &v16, a4, a5, a6, a7, a8, (uint64_t)&v17);
  if (v18)
  {
    v11 = *(_QWORD *)(a1 + 352);
    v12 = (_QWORD *)(v11 + 912);
    v13 = *(unsigned int *)(v11 + 924);
    if ((_DWORD)v13 == *(_DWORD *)(v11 + 920))
    {
      v14 = (_QWORD *)WTF::Vector<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v13 + 1, (unint64_t)&v19);
      v13 = *(unsigned int *)(v11 + 924);
      *(_QWORD *)(*(_QWORD *)(v11 + 912) + 8 * v13) = *v14;
    }
    else
    {
      *(_QWORD *)(*v12 + 8 * v13) = v19;
    }
    *(_DWORD *)(v11 + 924) = v13 + 1;
  }
  return *(unsigned int *)(v17 + 8);
}

JSC::DFG::JITCompiler::LinkableConstant *JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant(JSC::DFG::JITCompiler::LinkableConstant *this, JSC::DFG::JITCompiler *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;

  *(_DWORD *)this = -1;
  *((_QWORD *)this + 1) = 0;
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*((_QWORD *)a2 + 44) + 24) + 280), a3, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)a2 + 44);
  if (((*(_DWORD *)(*(_QWORD *)(v16 + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    *((_QWORD *)this + 1) = a3;
  }
  else
  {
    v27 = a3 | 0x2000000000000;
    v18 = (uint64_t *)(v16 + 928);
    v19 = *(_QWORD *)(v16 + 928);
    if (v19)
      LODWORD(v19) = *(_DWORD *)(v19 - 12);
    v24 = v19;
    WTF::HashMap<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,unsigned int,JSC::DFG::LinkerIR::ValueHash,JSC::DFG::LinkerIR::ValueTraits,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int>(v18, (uint64_t *)&v27, &v24, v11, v12, v13, v14, v15, (uint64_t)&v25);
    if (v26)
    {
      v20 = *((_QWORD *)a2 + 44);
      v21 = (_QWORD *)(v20 + 912);
      v22 = *(unsigned int *)(v20 + 924);
      if ((_DWORD)v22 == *(_DWORD *)(v20 + 920))
      {
        v23 = (_QWORD *)WTF::Vector<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v22 + 1, (unint64_t)&v27);
        v22 = *(unsigned int *)(v20 + 924);
        *(_QWORD *)(*(_QWORD *)(v20 + 912) + 8 * v22) = *v23;
      }
      else
      {
        *(_QWORD *)(*v21 + 8 * v22) = v27;
      }
      *(_DWORD *)(v20 + 924) = v22 + 1;
    }
    *(_DWORD *)this = *(_DWORD *)(v25 + 8);
  }
  return this;
}

uint64_t JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  *(_DWORD *)a1 = -1;
  *(_QWORD *)(a1 + 8) = 0;
  v9 = a2[44];
  if (((*(_DWORD *)(*(_QWORD *)(v9 + 24) + 16) - 1) & 0xFFFFFFFD) == 0)
  {
    *(_DWORD *)a1 = JSC::DFG::JITCompiler::addToConstantPool((uint64_t)a2, 4, 0, (uint64_t)a4, a5, a6, a7, a8);
    return a1;
  }
  v10 = *a4;
  if ((*a4 & 1) == 0)
  {
    v11 = *(_QWORD *)(v9 + 32);
LABEL_4:
    v12 = (_QWORD *)(v10 & 0xFFFFFFFF8);
    v13 = 1;
    v14 = 1;
    goto LABEL_5;
  }
  v18 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v19 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v19 != 0x3FFFFFFF) ? (v20 = v19 == -1) : (v20 = 1), v20))
  {
    v21 = 2;
  }
  else if (v19 >> 28)
  {
    v27 = a2[44];
    v28 = WTF::fastMalloc((WTF *)0x10);
    v9 = v27;
    *(_QWORD *)v28 = v18;
    *(_DWORD *)(v28 + 8) = v19;
    v21 = 1;
    v18 = v28;
  }
  else
  {
    v21 = v18;
    v18 = 0;
  }
  v10 = v18 | v21;
  v11 = *(_QWORD *)(v9 + 32);
  if (((v18 | v21) & 1) == 0)
    goto LABEL_4;
  v22 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v23 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v23 != 0x3FFFFFFF) ? (v24 = v23 == -1) : (v24 = 1), v24))
  {
    v25 = 2;
  }
  else if (v23 >> 28)
  {
    v29 = v11;
    v30 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8);
    v31 = WTF::fastMalloc((WTF *)0x10);
    v11 = v29;
    *(_QWORD *)v31 = v22;
    *(_DWORD *)(v31 + 8) = v30;
    v25 = 1;
    v22 = v31;
  }
  else
  {
    v25 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v22 = 0;
  }
  v26 = v22 | v25;
  v12 = (_QWORD *)(v26 & 0xFFFFFFFF8);
  if ((v26 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_QWORD *)*v12;
    goto LABEL_6;
  }
  v14 = 0;
  v13 = 1;
LABEL_5:
  v15 = v12;
LABEL_6:
  if (v15)
    v11 = v15[1];
  v16 = *(_QWORD *)(v11 + 8);
  if ((v13 & 1) == 0 && v12)
    WTF::fastFree((unint64_t)v12, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 8) = v16;
  if ((v14 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  return a1;
}

uint64_t JSC::DFG::JITCompiler::addStructureStubInfo@<X0>(JSC::DFG::JITCompiler *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  int v11;

  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    v3 = *((_QWORD *)this + 46);
    if (v3)
    {
      v4 = (unsigned int *)(v3 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
    }
    result = WTF::fastMalloc((WTF *)0x90);
    v7 = result;
    *(_QWORD *)result = 2;
    *(_DWORD *)(result + 96) = 0;
    *(_OWORD *)(result + 12) = 0u;
    *(_OWORD *)(result + 28) = 0u;
    *(_DWORD *)(result + 44) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)(result + 112) = -1;
    *(_WORD *)(result + 120) = -1;
    *(_DWORD *)(result + 122) = 0x10000;
    *(_BYTE *)(result + 126) = 0;
    *(_BYTE *)(result + 127) = BYTE12(xmmword_1ECF4C260);
    *(_BYTE *)(result + 128) = 0;
    *(_WORD *)(result + 129) &= 0xFC00u;
    *(_QWORD *)(result + 136) = 0;
    *(_QWORD *)(result + 136) = *(_QWORD *)(v3 + 184);
    *(_QWORD *)(v3 + 184) = result;
    v8 = (unsigned int *)(v3 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (v9 == 1)
    {
      atomic_store(1u, (unsigned int *)(v3 + 8));
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    }
    v10 = 0;
    v11 = 0;
  }
  else
  {
    v11 = *((_DWORD *)this + 968);
    result = WTF::SegmentedVector<JSC::DFG::UnlinkedStructureStubInfo,8ul>::alloc<>((uint64_t)this + 3872);
    v7 = result;
    v10 = 2;
  }
  *(_QWORD *)a2 = v7;
  *(_DWORD *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 16) = v11;
  return result;
}

unint64_t WTF::SegmentedVector<JSC::DFG::UnlinkedStructureStubInfo,8ul>::alloc<>(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v2 = (*(_QWORD *)a1)++;
  v3 = v2 >> 3;
  v4 = *(unsigned int *)(a1 + 20);
  if (v2 >> 3 >= v4)
  {
    v5 = (_QWORD *)(a1 + 8);
    v6 = WTF::fastMalloc((WTF *)0x200);
    v12 = v6;
    v7 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v7 == *(_DWORD *)(a1 + 16))
    {
      v8 = WTF::Vector<WTF::SegmentedVector<JSC::DFG::UnlinkedStructureStubInfo,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 8), v7 + 1, (unint64_t)&v12);
      v7 = *(unsigned int *)(a1 + 20);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v7) = *(_QWORD *)v8;
    }
    else
    {
      *(_QWORD *)(*v5 + 8 * v7) = v6;
    }
    v4 = (v7 + 1);
    *(_DWORD *)(a1 + 20) = v4;
    v2 = *(_QWORD *)a1 - 1;
    v3 = v2 >> 3;
  }
  if (v3 >= v4)
    goto LABEL_9;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v3) + ((v2 & 7) << 6);
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = xmmword_199155E60;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_QWORD *)(v9 + 48) = -1;
  *(_BYTE *)(v9 + 56) = -1;
  v10 = *(_QWORD *)a1 - 1;
  if (v10 >> 3 >= *(unsigned int *)(a1 + 20))
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x19841FBF0);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v10 >> 3)) + ((v10 & 7) << 6);
}

uint64_t JSC::DFG::JITCompiler::addCallLinkInfo@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = a1[44];
  if (((*(_DWORD *)(*(_QWORD *)(v5 + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    v6 = a1[46];
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      v15 = WTF::Bag<JSC::OptimizingCallLinkInfo,WTF::RawPtrTraits<JSC::OptimizingCallLinkInfo>,WTF::FastMalloc>::add<JSC::CodeOrigin &,JSC::CodeBlock * const&>((uint64_t *)(v6 + 192), a2, (uint64_t *)(a1[44] + 32));
      do
      {
        v16 = __ldaxr(v7);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v7));
      if (!v17)
      {
        atomic_store(1u, (unsigned int *)(v6 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      }
    }
    else
    {
      v15 = WTF::Bag<JSC::OptimizingCallLinkInfo,WTF::RawPtrTraits<JSC::OptimizingCallLinkInfo>,WTF::FastMalloc>::add<JSC::CodeOrigin &,JSC::CodeBlock * const&>((uint64_t *)0xC0, a2, (uint64_t *)(v5 + 32));
    }
    result = JSC::DFG::JITCompiler::LinkableConstant::nonCellPointer<JSC::OptimizingCallLinkInfo>((uint64_t)a1, v15, v9, v10, v11, v12, v13, v14);
    *(_QWORD *)a3 = v15;
    *(_DWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = result;
    *(_QWORD *)(a3 + 24) = v19;
  }
  else
  {
    v20 = a1[487];
    v22 = (uint64_t *)WTF::SegmentedVector<JSC::DFG::UnlinkedCallLinkInfo,8ul>::alloc<>((uint64_t)(a1 + 487));
    JSC::CodeOrigin::operator=(v22, a2, v23, v24, v25, v26, v27, v28);
    result = JSC::DFG::JITCompiler::addToConstantPool((uint64_t)a1, 1, v20, v29, v30, v31, v32, v33);
    *(_QWORD *)a3 = v22;
    *(_DWORD *)(a3 + 8) = 2;
    *(_DWORD *)(a3 + 16) = result;
    *(_QWORD *)(a3 + 24) = 0;
  }
  return result;
}

uint64_t WTF::SegmentedVector<JSC::DFG::UnlinkedCallLinkInfo,8ul>::alloc<>(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v2 = (*(_QWORD *)a1)++;
  v3 = v2 >> 3;
  v4 = *(unsigned int *)(a1 + 20);
  if (v2 >> 3 >= v4)
  {
    v5 = (_QWORD *)(a1 + 8);
    v6 = WTF::fastMalloc((WTF *)0x80);
    v12 = v6;
    v7 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v7 == *(_DWORD *)(a1 + 16))
    {
      v8 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 8), v7 + 1, (unint64_t)&v12);
      v7 = *(unsigned int *)(a1 + 20);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v7) = *(_QWORD *)v8;
    }
    else
    {
      *(_QWORD *)(*v5 + 8 * v7) = v6;
    }
    v4 = (v7 + 1);
    *(_DWORD *)(a1 + 20) = v4;
    v2 = *(_QWORD *)a1 - 1;
    v3 = v2 >> 3;
  }
  if (v3 >= v4
    || (v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v3) + 16 * (v2 & 7),
        *(_OWORD *)v9 = xmmword_199155E60,
        *(_BYTE *)(v9 + 8) = 0,
        v10 = *(_QWORD *)a1 - 1,
        v10 >> 3 >= *(unsigned int *)(a1 + 20)))
  {
    __break(0xC471u);
    JUMPOUT(0x19841FE08);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v10 >> 3)) + 16 * (v10 & 7);
}

uint64_t WTF::Bag<JSC::OptimizingCallLinkInfo,WTF::RawPtrTraits<JSC::OptimizingCallLinkInfo>,WTF::FastMalloc>::add<JSC::CodeOrigin &,JSC::CodeBlock * const&>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v11 = WTF::fastMalloc((WTF *)0x68);
  v12 = *a2;
  if ((*a2 & 1) != 0)
  {
    v21 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v22 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v22 != 0x3FFFFFFF)
        ? (v23 = (_DWORD)v22 == -1)
        : (v23 = 1),
          v23))
    {
      v24 = 2;
    }
    else if (v22 >> 28)
    {
      v25 = v22;
      v26 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v26 = v21;
      *(_DWORD *)(v26 + 8) = v25;
      v24 = 1;
      v21 = v26;
    }
    else
    {
      v24 = v21;
      v21 = v22 << 36;
    }
    v12 = v21 | v24;
  }
  v27 = v12;
  JSC::OptimizingCallLinkInfo::OptimizingCallLinkInfo(v11, &v27, *a3, v6, v7, v8, v9, v10);
  if ((v27 & 1) != 0 && (v27 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v27 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(v11 + 96) = *a1;
  *a1 = v11;
  return v11;
}

uint64_t JSC::DFG::JITCompiler::LinkableConstant::nonCellPointer<JSC::OptimizingCallLinkInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v8 = *(_QWORD *)(a1 + 352);
  if (((*(_DWORD *)(*(_QWORD *)(v8 + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
    return 0xFFFFFFFFLL;
  v20 = a2 | 0x3000000000000;
  v11 = (uint64_t *)(v8 + 928);
  v12 = *(_QWORD *)(v8 + 928);
  if (v12)
    LODWORD(v12) = *(_DWORD *)(v12 - 12);
  v17 = v12;
  WTF::HashMap<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,unsigned int,JSC::DFG::LinkerIR::ValueHash,JSC::DFG::LinkerIR::ValueTraits,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int>(v11, &v20, &v17, a4, a5, a6, a7, a8, (uint64_t)&v18);
  if (v19)
  {
    v13 = *(_QWORD *)(a1 + 352);
    v14 = (_QWORD *)(v13 + 912);
    v15 = *(unsigned int *)(v13 + 924);
    if ((_DWORD)v15 == *(_DWORD *)(v13 + 920))
    {
      v16 = (_QWORD *)WTF::Vector<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v14, v15 + 1, (unint64_t)&v20);
      v15 = *(unsigned int *)(v13 + 924);
      *(_QWORD *)(*(_QWORD *)(v13 + 912) + 8 * v15) = *v16;
    }
    else
    {
      *(_QWORD *)(*v14 + 8 * v15) = v20;
    }
    *(_DWORD *)(v13 + 924) = v15 + 1;
  }
  return *(unsigned int *)(v18 + 8);
}

void JSC::DFG::JITFinalizer::~JITFinalizer(JSC::DFG::JITFinalizer *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 32))(v2);
    }
  }
}

void JSC::DFG::JITFinalizer::~JITFinalizer(JSC::DFG::JITFinalizer *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 32))(v9);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::DFG::JITFinalizer::codeSize(JSC::DFG::JITFinalizer *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = *(unsigned int **)(*((_QWORD *)this + 2) + 24);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = v8[1];
    do
    {
      v11 = __ldaxr(v8);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v8));
    if (!v12)
    {
      atomic_store(1u, v8);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  else
  {
    return 0;
  }
  return v10;
}

BOOL JSC::DFG::JITFinalizer::finalize(JSC::DFG::JITFinalizer *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned __int8 *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  JSC::DFG::JITData *v27;
  JSC::DFG::JITData *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  int v36;
  double v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint8x8_t v45;
  uint64_t v46;
  JSC::Profiler::Compilation *v47;
  JSC::DFG::JITData *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char **v59;
  uint64_t v60;
  unsigned __int8 **v61;
  unsigned __int8 **v62;
  unsigned __int8 *v63;
  uint64_t v64;
  int v65;
  uint64_t v67;
  uint64_t *v68;
  unsigned int **v69;
  uint64_t v70;
  unsigned int **v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  JSC::DFG::JITData *v86;
  int v87;
  double v88;
  double v89;

  v9 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  __isb(0xFu);
  v10 = *((_QWORD *)this + 1);
  v11 = *(_QWORD *)(v10 + 56);
  v12 = *(unsigned int *)(v10 + 68);
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 64) = 0;
  if ((_DWORD)v12)
  {
    v67 = 8 * v12;
    v68 = (uint64_t *)v11;
    v69 = (unsigned int **)(v11 + 8 * v12);
    do
    {
      v70 = *v68++;
      (*(void (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70);
      v67 -= 8;
    }
    while (v67);
    v71 = (unsigned int **)v11;
    do
    {
      v72 = *v71;
      *v71 = 0;
      if (v72)
      {
        v73 = v72 + 2;
        do
        {
          v74 = __ldaxr(v73);
          v75 = v74 - 1;
        }
        while (__stlxr(v75, v73));
        if (!v75)
        {
          atomic_store(1u, v72 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 8))(v72);
        }
      }
      ++v71;
    }
    while (v71 != v69);
  }
  if (v11)
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  v13 = (unsigned int *)*((_QWORD *)this + 2);
  v14 = *(unsigned __int8 **)(*((_QWORD *)this + 1) + 40);
  v15 = v13 + 2;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  if (*((_BYTE *)v13 + 13) != 1)
  {
    v17 = *((_QWORD *)v14 + 9);
    v18 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v13 + 128))(v13);
    if (v18 >= 0x101)
      JSC::Heap::reportExtraMemoryAllocatedSlowCase(v17 + 192, 0, (uint64_t)v14, v18, a5, a6, a7, a8);
  }
  v19 = v14 + 16;
  if (__ldaxr(v14 + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v19))
  {
    goto LABEL_12;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v14 + 16));
LABEL_12:
  __dmb(0xAu);
  v21 = (unsigned int *)*((_QWORD *)v14 + 15);
  *((_QWORD *)v14 + 15) = v13;
  if (v21)
  {
    v22 = v21 + 2;
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v21 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 32))(v21);
    }
  }
  v25 = __ldxr(v19);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_21;
  }
  if (__stlxr(0, v19))
LABEL_21:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v14 + 16, 0, a3, a4, a5, a6, a7, a8);
  JSC::DFG::Plan::tryFinalizeJITData(*((JSC::DFG::Plan **)this + 1), *((const JSC::DFG::JITCode **)this + 2), a4, a5, a6, a7, a8, &v86);
  v27 = v86;
  if (!v86)
    return v27 != 0;
  __dmb(0xAu);
  v28 = v86;
  v86 = 0;
  *((_QWORD *)v14 + 16) = v28;
  v29 = *((_QWORD *)this + 2);
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<JSC::CodeBlock,char [30],char [2]>((uint64_t)v14, ": FTL-optimizing after warm-up.", "\n");
  v30 = *((_QWORD *)v14 + 15);
  if (v30)
  {
    LODWORD(v30) = *(unsigned __int8 *)(v30 + 12);
    v31 = v30 & 0xFE;
    v32 = (uint64_t)v14;
    if (v31 == 2)
      goto LABEL_27;
  }
  else
  {
    v31 = 0;
  }
  v59 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C));
  if (v59 == &JSC::FunctionCodeBlock::s_info)
  {
    v60 = *((_QWORD *)v14 + 8);
    v61 = (unsigned __int8 **)(v60 + 96);
    v62 = (unsigned __int8 **)(v60 + 104);
    if (*(int *)(*((_QWORD *)v14 + 7) + 20) >= 0)
      v62 = v61;
  }
  else
  {
    if (v59 != &JSC::EvalCodeBlock::s_info
      && v59 != &JSC::ProgramCodeBlock::s_info
      && v59 != &JSC::ModuleProgramCodeBlock::s_info)
    {
      __break(0xC471u);
      JUMPOUT(0x1984205B8);
    }
    v62 = (unsigned __int8 **)(*((_QWORD *)v14 + 8) + 72);
  }
  v63 = *v62;
  if (v63 || (v63 = v14, v31 == 4))
  {
    if (*((_QWORD *)v63 + 24))
      v32 = *((_QWORD *)v63 + 24);
    else
      v32 = (uint64_t)v63;
    v64 = *(_QWORD *)(v32 + 120);
    if (v64)
    {
      v65 = *(unsigned __int8 *)(v64 + 12);
      if ((v65 & 0xFE) != 2 && v65 != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1984203F8);
      }
    }
  }
  else
  {
    v32 = (uint64_t)v14;
    if ((_DWORD)v30)
    {
      __break(0xC471u);
      JUMPOUT(0x19842061CLL);
    }
  }
LABEL_27:
  v33 = v29 + 348;
  v34 = (double)SHIDWORD(xmmword_1ECF4C4F4);
  LODWORD(v26) = *(_DWORD *)(v32 + 44);
  v89 = (double)v26;
  v35 = sqrt((double)v26 + 1.02406) * 0.061504 + 0.825914 + 0.0;
  if ((*(_WORD *)(*(_QWORD *)(v32 + 56) + 28) & 0x3000) == 0x1000)
  {
    v76 = DWORD1(xmmword_1ECF4C514);
    v35 = v35 * (double)SDWORD1(xmmword_1ECF4C514);
    v88 = v35;
    if (!BYTE1(qword_1ECF4C332))
      goto LABEL_29;
LABEL_73:
    v87 = v76;
    WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>(v32, ": bytecode cost is ", &v89, ", scaling execution counter by ", &v88, " * ", &v87, "\n");
    v35 = v88;
    goto LABEL_29;
  }
  v88 = v35;
  if (BYTE1(qword_1ECF4C332))
  {
    v76 = 1;
    goto LABEL_73;
  }
LABEL_29:
  v36 = 1;
  v37 = v35 * v34 * (double)(1 << *(_WORD *)(v32 + 106));
  if (v37 >= 1.0)
  {
    if (v37 > 2147483650.0)
      v36 = 0x7FFFFFFF;
    else
      v36 = (int)v37;
  }
  JSC::ExecutionCounter<(JSC::CountingVariant)1>::setNewThreshold(v33, v36, v32);
  v46 = *((_QWORD *)this + 1);
  v47 = *(JSC::Profiler::Compilation **)(v46 + 112);
  if (*(double *)&v47 != 0.0)
  {
    v77 = *(_QWORD *)(v9 + 93016);
    ++*(_DWORD *)v47;
    v89 = *(double *)&v47;
    JSC::Profiler::Database::addCompilation(v77, v14, (JSC::Profiler::Compilation **)&v89, v40, v41, v42, v43, v44);
    WTF::Ref<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>::~Ref((JSC::Profiler::Compilation **)&v89, v78, v79, v80, v81, v82, v83, v84);
    v46 = *((_QWORD *)this + 1);
  }
  if (!*(_BYTE *)(v46 + 106))
  {
    v85 = JSC::CodeBlock::baselineVersion((uint64_t)v14);
    *(_BYTE *)(v85 + 18) |= 8u;
  }
  if (*(_DWORD *)(v9 + 760) >= v14[7])
    JSC::Heap::writeBarrierSlowPath(v9 + 192, (unint64_t)v14);
  v48 = v86;
  v86 = 0;
  if (v48)
  {
    v49 = *(unsigned int *)v48;
    JSC::DFG::JITData::~JITData(v48, v38, v39, v40, v41, v42, v43, v44, v45);
    WTF::fastFree(v50 - 136 * v49, v51, v52, v53, v54, v55, v56, v57);
  }
  return v27 != 0;
}

JSC::Profiler::Compilation **WTF::Ref<JSC::Profiler::Compilation,WTF::RawPtrTraits<JSC::Profiler::Compilation>,WTF::DefaultRefDerefTraits<JSC::Profiler::Compilation>>::~Ref(JSC::Profiler::Compilation **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Profiler::Compilation *v9;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      JSC::Profiler::Compilation::~Compilation(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  return a1;
}

uint64_t JSC::JITCode::signature(JSC::JITCode *this)
{
  return 0;
}

uint64_t JSC::JITCode::canSwapCodeRefForDebugger(JSC::JITCode *this)
{
  return 0;
}

uint64_t JSC::DFG::JITCode::pcToCodeOriginMap(JSC::DFG::JITCode *this)
{
  return *((_QWORD *)this + 19);
}

uint64_t JSC::DFG::JITFinalizer::isFailed(JSC::DFG::JITFinalizer *this)
{
  return 0;
}

uint64_t JSC::DFG::JITFinalizer::jitCode@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(this + 16);
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *a2 = v2;
  return this;
}

uint64_t *WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::DFG::BasicBlock *>>,JSC::DFG::BasicBlock *>(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v10;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = (uint64_t *)(a1 + 88 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v10 = 1;
    while (v8)
    {
      v6 = (v6 + v10) & v2;
      v7 = (uint64_t *)(a1 + 88 * v6);
      v8 = *v7;
      ++v10;
      if (*v7 == a2)
        return v7;
    }
    return 0;
  }
  return v7;
}

void std::unique_ptr<WTF::EmbeddedFixedVector<JSC::DFG::OSRExit>>::reset[abi:sn180100](unsigned int **a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = *a1;
  *a1 = a2;
  if (v8)
  {
    v9 = *v8;
    if ((_DWORD)v9)
    {
      v10 = 72 * v9;
      v11 = (uint64_t *)(v8 + 14);
      do
      {
        v12 = *v11;
        if ((*v11 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        v13 = *(v11 - 4);
        if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        v14 = *(v11 - 5);
        if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        v11 += 9;
        v10 -= 72;
      }
      while (v10);
    }
    WTF::fastFree((unint64_t)v8, a2, a3, a4, a5, a6, a7, a8);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,JSC::DFG::JITCode::finalizeOSREntrypoints(WTF::Vector<JSC::DFG::OSREntryData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::OSREntryData*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t *v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unsigned int v26;
  uint64_t *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  unsigned int v33;
  uint64_t *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  WTF *v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  WTF *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t *v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  WTF *v85;
  unint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  uint64_t *v89;
  WTF *v90;
  uint64_t *v91;
  unsigned int v92;
  uint64_t *v93;
  uint64_t *v94;
  unsigned int v95;
  uint64_t *v96;
  unsigned int v97;
  unsigned int v98;
  WTF *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  const void *v107;
  size_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  const void *v113;
  size_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  const void *v119;
  size_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  const void *v125;
  size_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  const void *v131;
  size_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  const void *v137;
  size_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t *v141;
  unsigned int v142;
  unsigned int v143;
  _DWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t *v163;
  unint64_t v164;
  uint64_t *v165;
  WTF *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t *v169;
  unint64_t v170;
  uint64_t *v171;
  WTF *v172;
  unsigned int v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t v176;
  unsigned int *v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  _QWORD *v195;
  const void *v196;
  size_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  _QWORD *v201;
  const void *v202;
  size_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  _QWORD *v207;
  const void *v208;
  size_t v209;
  WTF *v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  _QWORD *v217;
  const void *v218;
  size_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  _QWORD *v223;
  const void *v224;
  size_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  _QWORD *v229;
  const void *v230;
  size_t v231;
  int64_t v232;
  int64_t v233;
  int64_t v234;
  uint64_t v235;
  uint64_t *v236;
  unsigned int v237;
  unsigned int v238;
  uint64_t *v239;
  uint64_t *v240;
  WTF *v241;
  unint64_t v242;
  uint64_t *v243;
  unint64_t v244;
  uint64_t *v245;
  unint64_t v246;
  uint64_t *v247;
  unint64_t v248;
  uint64_t *v249;
  unint64_t v250;
  WTF *v251;
  unsigned int v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  WTF *v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  unint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  _QWORD *v263;
  const void *v264;
  unint64_t v265;
  size_t v266;
  unint64_t v267;
  unint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t *v272;
  unint64_t v273;
  size_t v274;
  unint64_t v275;
  unint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t *v280;
  unint64_t v281;
  size_t v282;
  uint64_t v283;
  WTF *v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  WTF *v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unsigned int *v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t *v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  _QWORD *v313;
  const void *v314;
  size_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  _QWORD *v319;
  const void *v320;
  size_t v321;
  unint64_t v322;
  unint64_t v323;
  _QWORD *v324;
  const void *v325;
  size_t v326;
  uint64_t *v327;
  BOOL v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t *v337;
  WTF *v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  WTF *v342;
  unint64_t v343;
  unsigned int v344;
  uint64_t *v345;
  uint64_t v346;
  unsigned int *v347;
  uint64_t v348;
  _QWORD *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t *v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t *v360;
  uint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  _QWORD *v365;
  const void *v366;
  size_t v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  _QWORD *v371;
  const void *v372;
  size_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  _QWORD *v377;
  const void *v378;
  size_t v379;
  WTF *v380;
  uint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  WTF *v384;
  uint64_t v385;
  _QWORD *v386;
  uint64_t v387;
  unint64_t v389;
  unint64_t v390;
  unint64_t v391;
  _QWORD *v392;
  const void *v393;
  size_t v394;
  unint64_t v395;
  unint64_t v396;
  unint64_t v397;
  _QWORD *v398;
  const void *v399;
  size_t v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  _QWORD *v404;
  const void *v405;
  size_t v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  _QWORD *v410;
  const void *v411;
  size_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  _QWORD *v416;
  const void *v417;
  size_t v418;
  unint64_t v419;
  unint64_t v420;
  unint64_t v421;
  _QWORD *v422;
  const void *v423;
  size_t v424;
  uint64_t *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t *v428;
  uint64_t v429;
  unint64_t v430;
  uint64_t *v431;
  WTF *v432;
  uint64_t v433;
  unint64_t v434;
  uint64_t *v435;
  unint64_t v436;
  uint64_t *v437;
  unint64_t v438;
  WTF *v439;
  unsigned int v440;
  uint64_t v441;
  unsigned int *v442;
  uint64_t v443;
  _QWORD *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t *v449;
  uint64_t v450;
  uint64_t *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t *v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  unint64_t v460;
  unint64_t v461;
  unint64_t v462;
  _QWORD *v463;
  const void *v464;
  size_t v465;
  unint64_t v466;
  unint64_t v467;
  unint64_t v468;
  _QWORD *v469;
  uint64_t *v470;
  size_t v471;
  unint64_t v472;
  unint64_t v473;
  unint64_t v474;
  _QWORD *v475;
  const void *v476;
  size_t v477;
  WTF *v478;
  uint64_t v479;
  _QWORD *v480;
  uint64_t v481;
  unint64_t v482;
  unint64_t v483;
  unint64_t v484;
  _QWORD *v485;
  const void *v486;
  size_t v487;
  unint64_t v488;
  unint64_t v489;
  unint64_t v490;
  _QWORD *v491;
  const void *v492;
  size_t v493;
  unint64_t v494;
  unint64_t v495;
  unint64_t v496;
  _QWORD *v497;
  uint64_t *v498;
  size_t v499;
  uint64_t *v500;
  uint64_t *v501;
  uint64_t *v502;
  unint64_t v503;
  uint64_t *v504;
  unint64_t v505;
  unint64_t *v506;
  uint64_t *v507;
  uint64_t *v508;
  uint64_t *v509;
  __int128 v510;
  WTF *v511;
  uint64_t v512;
  unint64_t v513;
  unint64_t v514;
  WTF *v515;
  unint64_t v516;
  __int128 v517;
  WTF *v518;
  uint64_t v519;
  unint64_t v520;
  unint64_t v521;
  WTF *v522;
  unint64_t v523;

  v8 = a4;
  v9 = (uint64_t *)a3;
  v507 = a2;
LABEL_2:
  v11 = v507;
  v12 = v507 - 8;
  v502 = v507 - 24;
  v504 = v507 - 16;
  v13 = a1;
  while (2)
  {
    a1 = v13;
    v14 = (char *)v11 - (char *)v13;
    v15 = ((char *)v11 - (char *)v13) >> 6;
    switch(v15)
    {
      case 0:
      case 1:
        return;
      case 2:
        v139 = *((_DWORD *)v507 - 16);
        v508 = v507 - 8;
        if (v139 < *(_DWORD *)a1)
        {
          v140 = (uint64_t)a1;
          v141 = v508;
          goto LABEL_662;
        }
        return;
      case 3:
        v9 = a1 + 8;
        v142 = *((_DWORD *)a1 + 16);
        v50 = v507 - 8;
        v143 = *((_DWORD *)v507 - 16);
        if (v142 < *(_DWORD *)a1)
        {
          if (v143 >= v142)
            goto LABEL_660;
          v140 = (uint64_t)a1;
          v141 = v507 - 8;
          goto LABEL_662;
        }
        if (v143 < v142)
        {
          v158 = (uint64_t)(a1 + 8);
          v159 = v507 - 8;
          goto LABEL_560;
        }
        return;
      case 4:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::JITCode::finalizeOSREntrypoints(WTF::Vector<JSC::DFG::OSREntryData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::OSREntryData*>(a1, a1 + 8, a1 + 16, v12, a5, a6, a7, a8);
        return;
      case 5:
        v9 = a1 + 8;
        v144 = a1 + 16;
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::JITCode::finalizeOSREntrypoints(WTF::Vector<JSC::DFG::OSREntryData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::OSREntryData*>(a1, a1 + 8, a1 + 16, a1 + 24, a5, a6, a7, a8);
        v151 = *((_DWORD *)v507 - 16);
        v509 = v507 - 8;
        if (v151 < *((_DWORD *)a1 + 48))
        {
          std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)(a1 + 24), v509, v145, v146, v147, v148, v149, v150);
          if (*((_DWORD *)a1 + 48) < *v144)
          {
            std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)(a1 + 16), a1 + 24, v152, v153, v154, v155, v156, v157);
            if (*v144 < *(_DWORD *)v9)
            {
              v158 = (uint64_t)(a1 + 8);
              v159 = a1 + 16;
LABEL_560:
              std::swap[abi:sn180100]<JSC::DFG::OSREntryData>(v158, v159, a3, a4, a5, a6, a7, a8);
              if (*((_DWORD *)a1 + 16) < *(_DWORD *)a1)
              {
                v140 = (uint64_t)a1;
                v141 = v9;
                goto LABEL_662;
              }
            }
          }
        }
        return;
      default:
        if (v14 <= 1535)
        {
          if ((v8 & 1) != 0)
          {
            if (a1 != v11)
            {
              v160 = a1 + 8;
              if (a1 + 8 != v507)
              {
                v161 = a1;
                do
                {
                  v162 = v160;
                  v163 = v507;
                  if (*((_DWORD *)v161 + 16) < *(_DWORD *)v161)
                  {
                    v165 = v161 + 12;
                    v164 = v161[12];
                    v517 = *(_OWORD *)v162;
                    v166 = (WTF *)v161[10];
                    v167 = v161[11];
                    v161[10] = 0;
                    v518 = v166;
                    v519 = v167;
                    if ((v164 & 0x8000000000000000) == 0 && v164 >= 2)
                    {
                      v214 = *(_QWORD *)(2 * v164) + 63;
                      v215 = v214 & 0xFFFFFFFFFFFFFFC0;
                      v216 = WTF::fastMalloc((WTF *)(((v214 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                      *(_QWORD *)v216 = v215;
                      v217 = (_QWORD *)(2 * *v165);
                      if (*v165 >= 0)
                        v218 = v217 + 1;
                      else
                        v218 = v161 + 12;
                      if (*v165 < 0)
                        v219 = 8;
                      else
                        v219 = (unint64_t)(*v217 + 7) >> 3;
                      memcpy((void *)(v216 + 8), v218, v219);
                      v164 = v216 >> 1;
                    }
                    v520 = v164;
                    v169 = v161 + 13;
                    v168 = v161[13];
                    if ((v168 & 0x8000000000000000) == 0 && v168 >= 2)
                    {
                      v220 = *(_QWORD *)(2 * v168) + 63;
                      v221 = v220 & 0xFFFFFFFFFFFFFFC0;
                      v222 = WTF::fastMalloc((WTF *)(((v220 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                      *(_QWORD *)v222 = v221;
                      v223 = (_QWORD *)(2 * *v169);
                      if (*v169 >= 0)
                        v224 = v223 + 1;
                      else
                        v224 = v161 + 13;
                      if (*v169 < 0)
                        v225 = 8;
                      else
                        v225 = (unint64_t)(*v223 + 7) >> 3;
                      memcpy((void *)(v222 + 8), v224, v225);
                      v168 = v222 >> 1;
                    }
                    v171 = v161 + 15;
                    v170 = v161[15];
                    v172 = (WTF *)v161[14];
                    v161[14] = 0;
                    v521 = v168;
                    v522 = v172;
                    if ((v170 & 0x8000000000000000) == 0 && v170 >= 2)
                    {
                      v226 = *(_QWORD *)(2 * v170) + 63;
                      v227 = v226 & 0xFFFFFFFFFFFFFFC0;
                      v228 = WTF::fastMalloc((WTF *)(((v226 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                      *(_QWORD *)v228 = v227;
                      v229 = (_QWORD *)(2 * *v171);
                      if (*v171 >= 0)
                        v230 = v229 + 1;
                      else
                        v230 = v161 + 15;
                      if (*v171 < 0)
                        v231 = 8;
                      else
                        v231 = (unint64_t)(*v229 + 7) >> 3;
                      memcpy((void *)(v228 + 8), v230, v231);
                      v170 = v228 >> 1;
                    }
                    v523 = v170;
                    v173 = v517;
                    v174 = v162;
                    while (1)
                    {
                      v175 = v161;
                      *(_OWORD *)v174 = *(_OWORD *)v161;
                      v176 = v161[2];
                      v161[2] = 0;
                      v177 = (unsigned int *)v174[2];
                      v174[2] = v176;
                      if (v177)
                      {
                        v179 = v177 + 2;
                        v178 = *v177;
                        if ((_DWORD)v178)
                        {
                          v180 = 32 * v178;
                          do
                          {
                            if ((*v179 & 1) != 0)
                              WTF::fastFree(*v179 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                            v179 += 4;
                            v180 -= 32;
                          }
                          while (v180);
                        }
                        WTF::fastFree((unint64_t)v177, a2, a3, a4, a5, a6, a7, a8);
                      }
                      v174[3] = v175[3];
                      v182 = v175 + 4;
                      v181 = v175[4];
                      v183 = v174[4];
                      if ((v183 & 0x8000000000000000) == 0 || (v181 & 0x8000000000000000) == 0)
                      {
                        if (v181 >= 2)
                        {
                          v192 = *(_QWORD *)(2 * v181) + 63;
                          v193 = v192 & 0xFFFFFFFFFFFFFFC0;
                          v194 = WTF::fastMalloc((WTF *)(((v192 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                          *(_QWORD *)v194 = v193;
                          v195 = (_QWORD *)(2 * *v182);
                          if (*v182 >= 0)
                            v196 = v195 + 1;
                          else
                            v196 = v175 + 4;
                          if (*v182 < 0)
                            v197 = 8;
                          else
                            v197 = (unint64_t)(*v195 + 7) >> 3;
                          memcpy((void *)(v194 + 8), v196, v197);
                          v181 = v194 >> 1;
                          v183 = v174[4];
                        }
                        if (v183 >= 2)
                          WTF::fastFree(2 * v183, a2, a3, a4, a5, a6, a7, a8);
                      }
                      v174[4] = v181;
                      v185 = v175 + 5;
                      v184 = v175[5];
                      v186 = v174[5];
                      if ((v186 & 0x8000000000000000) == 0 || (v184 & 0x8000000000000000) == 0)
                      {
                        if (v184 >= 2)
                        {
                          v198 = *(_QWORD *)(2 * v184) + 63;
                          v199 = v198 & 0xFFFFFFFFFFFFFFC0;
                          v200 = WTF::fastMalloc((WTF *)(((v198 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                          *(_QWORD *)v200 = v199;
                          v201 = (_QWORD *)(2 * *v185);
                          if (*v185 >= 0)
                            v202 = v201 + 1;
                          else
                            v202 = v175 + 5;
                          if (*v185 < 0)
                            v203 = 8;
                          else
                            v203 = (unint64_t)(*v201 + 7) >> 3;
                          memcpy((void *)(v200 + 8), v202, v203);
                          v184 = v200 >> 1;
                          v186 = v174[5];
                        }
                        if (v186 >= 2)
                          WTF::fastFree(2 * v186, a2, a3, a4, a5, a6, a7, a8);
                      }
                      v174[5] = v184;
                      v187 = v175[6];
                      v175[6] = 0;
                      v188 = v174[6];
                      v174[6] = v187;
                      if (v188)
                        WTF::fastFree(v188, a2, a3, a4, a5, a6, a7, a8);
                      v190 = v175 + 7;
                      v189 = v175[7];
                      v191 = v174[7];
                      if ((v191 & 0x8000000000000000) == 0 || (v189 & 0x8000000000000000) == 0)
                      {
                        if (v189 >= 2)
                        {
                          v204 = *(_QWORD *)(2 * v189) + 63;
                          v205 = v204 & 0xFFFFFFFFFFFFFFC0;
                          v206 = WTF::fastMalloc((WTF *)(((v204 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                          *(_QWORD *)v206 = v205;
                          v207 = (_QWORD *)(2 * *v190);
                          if (*v190 >= 0)
                            v208 = v207 + 1;
                          else
                            v208 = v175 + 7;
                          if (*v190 < 0)
                            v209 = 8;
                          else
                            v209 = (unint64_t)(*v207 + 7) >> 3;
                          memcpy((void *)(v206 + 8), v208, v209);
                          v189 = v206 >> 1;
                          v191 = v174[7];
                        }
                        if (v191 >= 2)
                          WTF::fastFree(2 * v191, a2, a3, a4, a5, a6, a7, a8);
                      }
                      v174[7] = v189;
                      if (v175 == a1)
                        break;
                      v161 = v175 - 8;
                      v174 = v175;
                      if (v173 >= *((_DWORD *)v175 - 16))
                        goto LABEL_261;
                    }
                    v175 = a1;
LABEL_261:
                    JSC::DFG::OSREntryData::operator=((uint64_t)v175, (uint64_t *)&v517, a3, a4, a5, a6, a7, a8);
                    if ((v523 & 0x8000000000000000) == 0)
                      WTF::fastFree(2 * v523, a2, a3, a4, a5, a6, a7, a8);
                    v163 = v507;
                    if (v522)
                      WTF::fastFree((unint64_t)v522, a2, a3, a4, a5, a6, a7, a8);
                    if ((v521 & 0x8000000000000000) == 0)
                      WTF::fastFree(2 * v521, a2, a3, a4, a5, a6, a7, a8);
                    if ((v520 & 0x8000000000000000) == 0)
                      WTF::fastFree(2 * v520, a2, a3, a4, a5, a6, a7, a8);
                    v210 = v518;
                    if (v518)
                    {
                      v212 = (_QWORD *)((char *)v518 + 8);
                      v211 = *(unsigned int *)v518;
                      if ((_DWORD)v211)
                      {
                        v213 = 32 * v211;
                        do
                        {
                          if ((*v212 & 1) != 0)
                            WTF::fastFree(*v212 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                          v212 += 4;
                          v213 -= 32;
                        }
                        while (v213);
                      }
                      WTF::fastFree((unint64_t)v210, a2, a3, a4, a5, a6, a7, a8);
                    }
                  }
                  v160 = v162 + 8;
                  v161 = v162;
                }
                while (v162 + 8 != v163);
              }
            }
          }
          else if (a1 != v11)
          {
            v425 = a1 + 8;
            if (a1 + 8 != v507)
            {
              v426 = 0;
              v427 = 1;
              v428 = a1;
              while (1)
              {
                v429 = v427;
                if (*(_DWORD *)v425 < *(_DWORD *)v428)
                  break;
LABEL_633:
                v428 = &a1[8 * v429];
                v427 = v429 + 1;
                v425 = &a1[8 * v429 + 8];
                v426 = v429;
                if (v425 == v507)
                  return;
              }
              v431 = v428 + 12;
              v430 = v428[12];
              v517 = *(_OWORD *)v425;
              v432 = (WTF *)v428[10];
              v433 = v428[11];
              v428[10] = 0;
              v518 = v432;
              v519 = v433;
              if ((v430 & 0x8000000000000000) == 0 && v430 >= 2)
              {
                v482 = *(_QWORD *)(2 * v430) + 63;
                v483 = v482 & 0xFFFFFFFFFFFFFFC0;
                v484 = WTF::fastMalloc((WTF *)(((v482 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                *(_QWORD *)v484 = v483;
                v485 = (_QWORD *)(2 * *v431);
                if (*v431 >= 0)
                  v486 = v485 + 1;
                else
                  v486 = v428 + 12;
                if (*v431 < 0)
                  v487 = 8;
                else
                  v487 = (unint64_t)(*v485 + 7) >> 3;
                memcpy((void *)(v484 + 8), v486, v487);
                v430 = v484 >> 1;
              }
              v520 = v430;
              v435 = v428 + 13;
              v434 = v428[13];
              if ((v434 & 0x8000000000000000) == 0 && v434 >= 2)
              {
                v488 = *(_QWORD *)(2 * v434) + 63;
                v489 = v488 & 0xFFFFFFFFFFFFFFC0;
                v490 = WTF::fastMalloc((WTF *)(((v488 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                *(_QWORD *)v490 = v489;
                v491 = (_QWORD *)(2 * *v435);
                if (*v435 >= 0)
                  v492 = v491 + 1;
                else
                  v492 = v428 + 13;
                if (*v435 < 0)
                  v493 = 8;
                else
                  v493 = (unint64_t)(*v491 + 7) >> 3;
                memcpy((void *)(v490 + 8), v492, v493);
                v434 = v490 >> 1;
              }
              v438 = v428[15];
              v437 = v428 + 15;
              v436 = v438;
              v439 = (WTF *)*(v437 - 1);
              *(v437 - 1) = 0;
              v521 = v434;
              v522 = v439;
              if ((v438 & 0x8000000000000000) == 0 && v436 >= 2)
              {
                v494 = *(_QWORD *)(2 * v436) + 63;
                v495 = v494 & 0xFFFFFFFFFFFFFFC0;
                v496 = WTF::fastMalloc((WTF *)(((v494 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                *(_QWORD *)v496 = v495;
                v497 = (_QWORD *)(2 * *v437);
                if (*v437 >= 0)
                  v498 = v497 + 1;
                else
                  v498 = v437;
                if (*v437 < 0)
                  v499 = 8;
                else
                  v499 = (unint64_t)(*v497 + 7) >> 3;
                memcpy((void *)(v496 + 8), v498, v499);
                v436 = v496 >> 1;
              }
              v523 = v436;
              v440 = v517;
              while (1)
              {
                v9 = &a1[8 * v426];
                *(_OWORD *)v425 = *(_OWORD *)v9;
                v441 = v9[2];
                v9[2] = 0;
                v442 = (unsigned int *)v425[2];
                v425[2] = v441;
                if (v442)
                {
                  v444 = v442 + 2;
                  v443 = *v442;
                  if ((_DWORD)v443)
                  {
                    v445 = 32 * v443;
                    do
                    {
                      if ((*v444 & 1) != 0)
                        WTF::fastFree(*v444 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                      v444 += 4;
                      v445 -= 32;
                    }
                    while (v445);
                  }
                  WTF::fastFree((unint64_t)v442, a2, a3, a4, a5, a6, a7, a8);
                }
                v425[3] = v9[3];
                v447 = v9 + 4;
                v446 = v9[4];
                v448 = v425[4];
                if ((v448 & 0x8000000000000000) == 0 || (v446 & 0x8000000000000000) == 0)
                {
                  if (v446 >= 2)
                  {
                    v460 = *(_QWORD *)(2 * v446) + 63;
                    v461 = v460 & 0xFFFFFFFFFFFFFFC0;
                    v462 = WTF::fastMalloc((WTF *)(((v460 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                    *(_QWORD *)v462 = v461;
                    v463 = (_QWORD *)(2 * *v447);
                    if (*v447 >= 0)
                      v464 = v463 + 1;
                    else
                      v464 = v9 + 4;
                    if (*v447 < 0)
                      v465 = 8;
                    else
                      v465 = (unint64_t)(*v463 + 7) >> 3;
                    memcpy((void *)(v462 + 8), v464, v465);
                    v446 = v462 >> 1;
                    v448 = v425[4];
                  }
                  if (v448 >= 2)
                    WTF::fastFree(2 * v448, a2, a3, a4, a5, a6, a7, a8);
                }
                v425[4] = v446;
                v449 = &a1[8 * v426];
                v452 = v449[5];
                v451 = v449 + 5;
                v450 = v452;
                v453 = v425[5];
                if ((v453 & 0x8000000000000000) == 0 || (v450 & 0x8000000000000000) == 0)
                {
                  if (v450 >= 2)
                  {
                    v466 = *(_QWORD *)(2 * v450) + 63;
                    v467 = v466 & 0xFFFFFFFFFFFFFFC0;
                    v468 = WTF::fastMalloc((WTF *)(((v466 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                    *(_QWORD *)v468 = v467;
                    v469 = (_QWORD *)(2 * *v451);
                    if (*v451 >= 0)
                      v470 = v469 + 1;
                    else
                      v470 = v451;
                    if (*v451 < 0)
                      v471 = 8;
                    else
                      v471 = (unint64_t)(*v469 + 7) >> 3;
                    memcpy((void *)(v468 + 8), v470, v471);
                    v450 = v468 >> 1;
                    v453 = v425[5];
                  }
                  if (v453 >= 2)
                    WTF::fastFree(2 * v453, a2, a3, a4, a5, a6, a7, a8);
                }
                v425[5] = v450;
                v454 = &a1[8 * v426];
                v455 = v454[6];
                v454[6] = 0;
                v456 = v425[6];
                v425[6] = v455;
                if (v456)
                  WTF::fastFree(v456, a2, a3, a4, a5, a6, a7, a8);
                v458 = v454[7];
                v50 = v454 + 7;
                v457 = v458;
                v459 = v425[7];
                if ((v459 & 0x8000000000000000) == 0 || (v457 & 0x8000000000000000) == 0)
                {
                  if (v457 >= 2)
                  {
                    v472 = *(_QWORD *)(2 * v457) + 63;
                    v473 = v472 & 0xFFFFFFFFFFFFFFC0;
                    v474 = WTF::fastMalloc((WTF *)(((v472 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                    *(_QWORD *)v474 = v473;
                    v475 = (_QWORD *)(2 * *v50);
                    if (*v50 >= 0)
                      v476 = v475 + 1;
                    else
                      v476 = v50;
                    if (*v50 < 0)
                      v477 = 8;
                    else
                      v477 = (unint64_t)(*v475 + 7) >> 3;
                    memcpy((void *)(v474 + 8), v476, v477);
                    v457 = v474 >> 1;
                    v459 = v425[7];
                  }
                  if (v459 >= 2)
                    WTF::fastFree(2 * v459, a2, a3, a4, a5, a6, a7, a8);
                }
                v425[7] = v457;
                if (v426 == -1)
                  break;
                --v426;
                v425 = v9;
                if (v440 >= LODWORD(a1[8 * v426]))
                {
                  JSC::DFG::OSREntryData::operator=((uint64_t)v9, (uint64_t *)&v517, a3, a4, a5, a6, a7, a8);
                  if ((v523 & 0x8000000000000000) == 0)
                    WTF::fastFree(2 * v523, a2, a3, a4, a5, a6, a7, a8);
                  if (v522)
                    WTF::fastFree((unint64_t)v522, a2, a3, a4, a5, a6, a7, a8);
                  if ((v521 & 0x8000000000000000) == 0)
                    WTF::fastFree(2 * v521, a2, a3, a4, a5, a6, a7, a8);
                  if ((v520 & 0x8000000000000000) == 0)
                    WTF::fastFree(2 * v520, a2, a3, a4, a5, a6, a7, a8);
                  v478 = v518;
                  if (v518)
                  {
                    v480 = (_QWORD *)((char *)v518 + 8);
                    v479 = *(unsigned int *)v518;
                    if ((_DWORD)v479)
                    {
                      v481 = 32 * v479;
                      do
                      {
                        if ((*v480 & 1) != 0)
                          WTF::fastFree(*v480 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                        v480 += 4;
                        v481 -= 32;
                      }
                      while (v481);
                    }
                    WTF::fastFree((unint64_t)v478, a2, a3, a4, a5, a6, a7, a8);
                  }
                  goto LABEL_633;
                }
              }
LABEL_659:
              __break(1u);
LABEL_660:
              std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)a1, v9, a3, a4, a5, a6, a7, a8);
              if (*(_DWORD *)v50 < *((_DWORD *)a1 + 16))
              {
                v141 = v50;
                v140 = (uint64_t)v9;
LABEL_662:
                std::swap[abi:sn180100]<JSC::DFG::OSREntryData>(v140, v141, a3, a4, a5, a6, a7, a8);
              }
            }
          }
          return;
        }
        if (!v9)
        {
          if (a1 != v11)
          {
            v232 = (unint64_t)(v15 - 2) >> 1;
            v233 = v232;
            do
            {
              v234 = v233;
              if (v232 >= v233)
              {
                v235 = (2 * v233) | 1;
                v236 = &a1[8 * v235];
                if (2 * v233 + 2 >= v15)
                {
                  v237 = *(_DWORD *)v236;
                }
                else
                {
                  v237 = *(_DWORD *)v236;
                  v238 = *((_DWORD *)v236 + 16);
                  if (*(_DWORD *)v236 <= v238)
                    v237 = *((_DWORD *)v236 + 16);
                  if (*(_DWORD *)v236 < v238)
                  {
                    v236 += 8;
                    v235 = 2 * v234 + 2;
                  }
                }
                v239 = &a1[8 * v234];
                if (v237 >= *(_DWORD *)v239)
                {
                  v517 = *(_OWORD *)v239;
                  v240 = &a1[8 * v234];
                  v241 = (WTF *)v240[2];
                  v240[2] = 0;
                  v518 = v241;
                  v519 = v240[3];
                  v520 = 0x8000000000000000;
                  v243 = v240 + 4;
                  v242 = v240[4];
                  if ((v242 & 0x8000000000000000) == 0 && v242 >= 2)
                  {
                    v260 = *(_QWORD *)(2 * v242) + 63;
                    v505 = v260 & 0xFFFFFFFFFFFFFFC0;
                    v261 = (_QWORD *)WTF::fastMalloc((WTF *)(((v260 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                    *v261 = v505;
                    v262 = *v243;
                    v263 = (_QWORD *)(2 * *v243);
                    if (*v243 >= 0)
                      v264 = v263 + 1;
                    else
                      v264 = v240 + 4;
                    v265 = (unint64_t)v261;
                    if (v262 < 0)
                      v266 = 8;
                    else
                      v266 = (unint64_t)(*v263 + 7) >> 3;
                    memcpy(v261 + 1, v264, v266);
                    v242 = v265 >> 1;
                  }
                  v520 = v242;
                  v521 = 0x8000000000000000;
                  v246 = v240[5];
                  v245 = v240 + 5;
                  v244 = v246;
                  if ((v246 & 0x8000000000000000) == 0 && v244 >= 2)
                  {
                    v267 = *(_QWORD *)(2 * v244) + 63;
                    v268 = v267 & 0xFFFFFFFFFFFFFFC0;
                    v269 = (_QWORD *)WTF::fastMalloc((WTF *)(((v267 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                    *v269 = v268;
                    v270 = *v245;
                    v271 = (_QWORD *)(2 * *v245);
                    if (*v245 >= 0)
                      v272 = v271 + 1;
                    else
                      v272 = v245;
                    v273 = (unint64_t)v269;
                    if (v270 < 0)
                      v274 = 8;
                    else
                      v274 = (unint64_t)(*v271 + 7) >> 3;
                    memcpy(v269 + 1, v272, v274);
                    v244 = v273 >> 1;
                  }
                  v247 = &a1[8 * v234];
                  v521 = v244;
                  v523 = 0x8000000000000000;
                  v250 = v247[7];
                  v249 = v247 + 7;
                  v248 = v250;
                  v251 = (WTF *)*(v249 - 1);
                  *(v249 - 1) = 0;
                  v522 = v251;
                  if ((v250 & 0x8000000000000000) == 0 && v248 >= 2)
                  {
                    v275 = *(_QWORD *)(2 * v248) + 63;
                    v276 = v275 & 0xFFFFFFFFFFFFFFC0;
                    v277 = (_QWORD *)WTF::fastMalloc((WTF *)(((v275 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                    *v277 = v276;
                    v278 = *v249;
                    v279 = (_QWORD *)(2 * *v249);
                    if (*v249 >= 0)
                      v280 = v279 + 1;
                    else
                      v280 = v249;
                    v281 = (unint64_t)v277;
                    if (v278 < 0)
                      v282 = 8;
                    else
                      v282 = (unint64_t)(*v279 + 7) >> 3;
                    memcpy(v277 + 1, v280, v282);
                    v248 = v281 >> 1;
                  }
                  v523 = v248;
                  v252 = v517;
                  do
                  {
                    v253 = (uint64_t)v236;
                    JSC::DFG::OSREntryData::operator=((uint64_t)v239, v236, a3, a4, a5, a6, a7, a8);
                    if (v232 < v235)
                      break;
                    v236 = &a1[8 * ((2 * v235) | 1)];
                    if (2 * v235 + 2 >= v15)
                    {
                      v254 = *(_DWORD *)v236;
                      v235 = (2 * v235) | 1;
                    }
                    else
                    {
                      v254 = *(_DWORD *)v236;
                      v255 = *((_DWORD *)v236 + 16);
                      if (*(_DWORD *)v236 <= v255)
                        v254 = *((_DWORD *)v236 + 16);
                      if (*(_DWORD *)v236 >= v255)
                      {
                        v235 = (2 * v235) | 1;
                      }
                      else
                      {
                        v236 += 8;
                        v235 = 2 * v235 + 2;
                      }
                    }
                    v239 = (uint64_t *)v253;
                  }
                  while (v254 >= v252);
                  JSC::DFG::OSREntryData::operator=(v253, (uint64_t *)&v517, a3, a4, a5, a6, a7, a8);
                  if ((v523 & 0x8000000000000000) == 0)
                    WTF::fastFree(2 * v523, a2, a3, a4, a5, a6, a7, a8);
                  if (v522)
                    WTF::fastFree((unint64_t)v522, a2, a3, a4, a5, a6, a7, a8);
                  if ((v521 & 0x8000000000000000) == 0)
                    WTF::fastFree(2 * v521, a2, a3, a4, a5, a6, a7, a8);
                  if ((v520 & 0x8000000000000000) == 0)
                    WTF::fastFree(2 * v520, a2, a3, a4, a5, a6, a7, a8);
                  v256 = v518;
                  if (v518)
                  {
                    v258 = (_QWORD *)((char *)v518 + 8);
                    v257 = *(unsigned int *)v518;
                    if ((_DWORD)v257)
                    {
                      v259 = 32 * v257;
                      do
                      {
                        if ((*v258 & 1) != 0)
                          WTF::fastFree(*v258 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                        v258 += 4;
                        v259 -= 32;
                      }
                      while (v259);
                    }
                    WTF::fastFree((unint64_t)v256, a2, a3, a4, a5, a6, a7, a8);
                  }
                }
              }
              v233 = v234 - 1;
            }
            while (v234);
            v283 = (unint64_t)v14 >> 6;
            v506 = (unint64_t *)(a1 + 5);
            v500 = a1 + 7;
            v501 = a1 + 4;
            do
            {
              v510 = *(_OWORD *)a1;
              v284 = (WTF *)a1[2];
              v285 = a1[3];
              a1[2] = 0;
              v511 = v284;
              v512 = v285;
              v513 = 0x8000000000000000;
              v286 = a1[4];
              if ((v286 & 0x8000000000000000) == 0 && v286 >= 2)
              {
                v389 = *(_QWORD *)(2 * v286) + 63;
                v390 = v389 & 0xFFFFFFFFFFFFFFC0;
                v391 = WTF::fastMalloc((WTF *)(((v389 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                *(_QWORD *)v391 = v390;
                v392 = (_QWORD *)(2 * *v501);
                if (*v501 >= 0)
                  v393 = v392 + 1;
                else
                  v393 = a1 + 4;
                if (*v501 < 0)
                  v394 = 8;
                else
                  v394 = (unint64_t)(*v392 + 7) >> 3;
                memcpy((void *)(v391 + 8), v393, v394);
                v286 = v391 >> 1;
              }
              v513 = v286;
              v514 = 0x8000000000000000;
              v287 = *v506;
              if ((*v506 & 0x8000000000000000) == 0 && v287 >= 2)
              {
                v395 = *(_QWORD *)(2 * v287) + 63;
                v396 = v395 & 0xFFFFFFFFFFFFFFC0;
                v397 = WTF::fastMalloc((WTF *)(((v395 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                *(_QWORD *)v397 = v396;
                v398 = (_QWORD *)(2 * *v506);
                if ((*v506 & 0x8000000000000000) == 0)
                  v399 = v398 + 1;
                else
                  v399 = a1 + 5;
                if ((*v506 & 0x8000000000000000) != 0)
                  v400 = 8;
                else
                  v400 = (unint64_t)(*v398 + 7) >> 3;
                memcpy((void *)(v397 + 8), v399, v400);
                v287 = v397 >> 1;
              }
              v288 = (WTF *)a1[6];
              a1[6] = 0;
              v514 = v287;
              v515 = v288;
              v516 = 0x8000000000000000;
              v289 = a1[7];
              if ((v289 & 0x8000000000000000) == 0 && v289 >= 2)
              {
                v401 = *(_QWORD *)(2 * v289) + 63;
                v402 = v401 & 0xFFFFFFFFFFFFFFC0;
                v403 = WTF::fastMalloc((WTF *)(((v401 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                *(_QWORD *)v403 = v402;
                v404 = (_QWORD *)(2 * *v500);
                if (*v500 >= 0)
                  v405 = v404 + 1;
                else
                  v405 = a1 + 7;
                if (*v500 < 0)
                  v406 = 8;
                else
                  v406 = (unint64_t)(*v404 + 7) >> 3;
                memcpy((void *)(v403 + 8), v405, v406);
                v289 = v403 >> 1;
              }
              v290 = 0;
              v516 = v289;
              v291 = (uint64_t)a1;
              do
              {
                v292 = v291;
                v291 += (v290 << 6) + 64;
                v293 = 2 * v290;
                v290 = (2 * v290) | 1;
                if (v293 + 2 < v283 && *(_DWORD *)v291 < *(_DWORD *)(v291 + 64))
                {
                  v291 += 64;
                  v290 = v293 + 2;
                }
                *(_OWORD *)v292 = *(_OWORD *)v291;
                v294 = *(_QWORD *)(v291 + 16);
                *(_QWORD *)(v291 + 16) = 0;
                v295 = *(unsigned int **)(v292 + 16);
                *(_QWORD *)(v292 + 16) = v294;
                if (v295)
                {
                  v297 = v295 + 2;
                  v296 = *v295;
                  if ((_DWORD)v296)
                  {
                    v298 = 32 * v296;
                    do
                    {
                      if ((*v297 & 1) != 0)
                        WTF::fastFree(*v297 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                      v297 += 4;
                      v298 -= 32;
                    }
                    while (v298);
                  }
                  WTF::fastFree((unint64_t)v295, a2, a3, a4, a5, a6, a7, a8);
                }
                *(_QWORD *)(v292 + 24) = *(_QWORD *)(v291 + 24);
                v300 = (uint64_t *)(v291 + 32);
                v299 = *(_QWORD *)(v291 + 32);
                v301 = *(_QWORD *)(v292 + 32);
                if ((v301 & 0x8000000000000000) == 0 || (v299 & 0x8000000000000000) == 0)
                {
                  if (v299 >= 2)
                  {
                    v310 = *(_QWORD *)(2 * v299) + 63;
                    v311 = v310 & 0xFFFFFFFFFFFFFFC0;
                    v312 = WTF::fastMalloc((WTF *)(((v310 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                    *(_QWORD *)v312 = v311;
                    v313 = (_QWORD *)(2 * *v300);
                    if (*v300 >= 0)
                      v314 = v313 + 1;
                    else
                      v314 = (const void *)(v291 + 32);
                    if (*v300 < 0)
                      v315 = 8;
                    else
                      v315 = (unint64_t)(*v313 + 7) >> 3;
                    memcpy((void *)(v312 + 8), v314, v315);
                    v299 = v312 >> 1;
                    v301 = *(_QWORD *)(v292 + 32);
                  }
                  if (v301 >= 2)
                    WTF::fastFree(2 * v301, a2, a3, a4, a5, a6, a7, a8);
                }
                *(_QWORD *)(v292 + 32) = v299;
                v303 = (unint64_t *)(v291 + 40);
                v302 = *(_QWORD *)(v291 + 40);
                v304 = *(_QWORD *)(v292 + 40);
                if ((v304 & 0x8000000000000000) == 0 || (v302 & 0x8000000000000000) == 0)
                {
                  if (v302 >= 2)
                  {
                    v316 = *(_QWORD *)(2 * v302) + 63;
                    v317 = v316 & 0xFFFFFFFFFFFFFFC0;
                    v318 = WTF::fastMalloc((WTF *)(((v316 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                    *(_QWORD *)v318 = v317;
                    v319 = (_QWORD *)(2 * *v303);
                    if ((*v303 & 0x8000000000000000) == 0)
                      v320 = v319 + 1;
                    else
                      v320 = (const void *)(v291 + 40);
                    if ((*v303 & 0x8000000000000000) != 0)
                      v321 = 8;
                    else
                      v321 = (unint64_t)(*v319 + 7) >> 3;
                    memcpy((void *)(v318 + 8), v320, v321);
                    v302 = v318 >> 1;
                    v304 = *(_QWORD *)(v292 + 40);
                  }
                  if (v304 >= 2)
                    WTF::fastFree(2 * v304, a2, a3, a4, a5, a6, a7, a8);
                }
                *(_QWORD *)(v292 + 40) = v302;
                v305 = *(_QWORD *)(v291 + 48);
                *(_QWORD *)(v291 + 48) = 0;
                v306 = *(_QWORD *)(v292 + 48);
                *(_QWORD *)(v292 + 48) = v305;
                if (v306)
                  WTF::fastFree(v306, a2, a3, a4, a5, a6, a7, a8);
                v308 = (uint64_t *)(v291 + 56);
                v307 = *(_QWORD *)(v291 + 56);
                v309 = *(_QWORD *)(v292 + 56);
                if ((v309 & 0x8000000000000000) == 0 || (v307 & 0x8000000000000000) == 0)
                {
                  if (v307 >= 2)
                  {
                    v322 = *(_QWORD *)(2 * v307) + 63;
                    v323 = v322 & 0xFFFFFFFFFFFFFFC0;
                    v503 = WTF::fastMalloc((WTF *)(((v322 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                    *(_QWORD *)v503 = v323;
                    v324 = (_QWORD *)(2 * *v308);
                    if (*v308 >= 0)
                      v325 = v324 + 1;
                    else
                      v325 = (const void *)(v291 + 56);
                    if (*v308 < 0)
                      v326 = 8;
                    else
                      v326 = (unint64_t)(*v324 + 7) >> 3;
                    memcpy((void *)(v503 + 8), v325, v326);
                    v307 = v503 >> 1;
                    v309 = *(_QWORD *)(v292 + 56);
                  }
                  if (v309 >= 2)
                    WTF::fastFree(2 * v309, a2, a3, a4, a5, a6, a7, a8);
                }
                *(_QWORD *)(v292 + 56) = v307;
              }
              while (v290 <= (uint64_t)((unint64_t)(v283 - 2) >> 1));
              v327 = v507 - 8;
              v328 = v291 == (_QWORD)(v507 - 8);
              v507 -= 8;
              if (v328)
              {
                JSC::DFG::OSREntryData::operator=(v291, (uint64_t *)&v510, a3, a4, a5, a6, a7, a8);
              }
              else
              {
                JSC::DFG::OSREntryData::operator=(v291, v327, a3, a4, a5, a6, a7, a8);
                JSC::DFG::OSREntryData::operator=((uint64_t)v327, (uint64_t *)&v510, v329, v330, v331, v332, v333, v334);
                v335 = v291 - (_QWORD)a1 + 64;
                if (v335 >= 65)
                {
                  v336 = (((unint64_t)v335 >> 6) - 2) >> 1;
                  v337 = &a1[8 * v336];
                  if (*(_DWORD *)v337 < *(_DWORD *)v291)
                  {
                    v517 = *(_OWORD *)v291;
                    v338 = *(WTF **)(v291 + 16);
                    v339 = *(_QWORD *)(v291 + 24);
                    *(_QWORD *)(v291 + 16) = 0;
                    v518 = v338;
                    v519 = v339;
                    v520 = 0x8000000000000000;
                    v340 = *(_QWORD *)(v291 + 32);
                    if ((v340 & 0x8000000000000000) == 0 && v340 >= 2)
                    {
                      v407 = *(_QWORD *)(2 * v340) + 63;
                      v408 = v407 & 0xFFFFFFFFFFFFFFC0;
                      v409 = WTF::fastMalloc((WTF *)(((v407 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                      *(_QWORD *)v409 = v408;
                      v410 = (_QWORD *)(2 * *v300);
                      if (*v300 >= 0)
                        v411 = v410 + 1;
                      else
                        v411 = (const void *)(v291 + 32);
                      if (*v300 < 0)
                        v412 = 8;
                      else
                        v412 = (unint64_t)(*v410 + 7) >> 3;
                      memcpy((void *)(v409 + 8), v411, v412);
                      v340 = v409 >> 1;
                    }
                    v520 = v340;
                    v521 = 0x8000000000000000;
                    v341 = *v303;
                    if ((*v303 & 0x8000000000000000) == 0 && v341 >= 2)
                    {
                      v413 = *(_QWORD *)(2 * v341) + 63;
                      v414 = v413 & 0xFFFFFFFFFFFFFFC0;
                      v415 = WTF::fastMalloc((WTF *)(((v413 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                      *(_QWORD *)v415 = v414;
                      v416 = (_QWORD *)(2 * *v303);
                      if ((*v303 & 0x8000000000000000) == 0)
                        v417 = v416 + 1;
                      else
                        v417 = (const void *)(v291 + 40);
                      if ((*v303 & 0x8000000000000000) != 0)
                        v418 = 8;
                      else
                        v418 = (unint64_t)(*v416 + 7) >> 3;
                      memcpy((void *)(v415 + 8), v417, v418);
                      v341 = v415 >> 1;
                    }
                    v342 = *(WTF **)(v291 + 48);
                    *(_QWORD *)(v291 + 48) = 0;
                    v521 = v341;
                    v522 = v342;
                    v523 = 0x8000000000000000;
                    v343 = *(_QWORD *)(v291 + 56);
                    if ((v343 & 0x8000000000000000) == 0 && v343 >= 2)
                    {
                      v419 = *(_QWORD *)(2 * v343) + 63;
                      v420 = v419 & 0xFFFFFFFFFFFFFFC0;
                      v421 = WTF::fastMalloc((WTF *)(((v419 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                      *(_QWORD *)v421 = v420;
                      v422 = (_QWORD *)(2 * *v308);
                      if (*v308 >= 0)
                        v423 = v422 + 1;
                      else
                        v423 = (const void *)(v291 + 56);
                      if (*v308 < 0)
                        v424 = 8;
                      else
                        v424 = (unint64_t)(*v422 + 7) >> 3;
                      memcpy((void *)(v421 + 8), v423, v424);
                      v343 = v421 >> 1;
                    }
                    v523 = v343;
                    v344 = v517;
                    do
                    {
                      v345 = v337;
                      *(_OWORD *)v291 = *(_OWORD *)v337;
                      v346 = v337[2];
                      v337[2] = 0;
                      v347 = *(unsigned int **)(v291 + 16);
                      *(_QWORD *)(v291 + 16) = v346;
                      if (v347)
                      {
                        v349 = v347 + 2;
                        v348 = *v347;
                        if ((_DWORD)v348)
                        {
                          v350 = 32 * v348;
                          do
                          {
                            if ((*v349 & 1) != 0)
                              WTF::fastFree(*v349 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                            v349 += 4;
                            v350 -= 32;
                          }
                          while (v350);
                        }
                        WTF::fastFree((unint64_t)v347, a2, a3, a4, a5, a6, a7, a8);
                      }
                      *(_QWORD *)(v291 + 24) = v345[3];
                      v352 = v345 + 4;
                      v351 = v345[4];
                      v353 = *(_QWORD *)(v291 + 32);
                      if ((v353 & 0x8000000000000000) == 0 || (v351 & 0x8000000000000000) == 0)
                      {
                        if (v351 >= 2)
                        {
                          v362 = *(_QWORD *)(2 * v351) + 63;
                          v363 = v362 & 0xFFFFFFFFFFFFFFC0;
                          v364 = WTF::fastMalloc((WTF *)(((v362 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                          *(_QWORD *)v364 = v363;
                          v365 = (_QWORD *)(2 * *v352);
                          if (*v352 >= 0)
                            v366 = v365 + 1;
                          else
                            v366 = v345 + 4;
                          if (*v352 < 0)
                            v367 = 8;
                          else
                            v367 = (unint64_t)(*v365 + 7) >> 3;
                          memcpy((void *)(v364 + 8), v366, v367);
                          v351 = v364 >> 1;
                          v353 = *(_QWORD *)(v291 + 32);
                        }
                        if (v353 >= 2)
                          WTF::fastFree(2 * v353, a2, a3, a4, a5, a6, a7, a8);
                      }
                      *(_QWORD *)(v291 + 32) = v351;
                      v355 = v345 + 5;
                      v354 = v345[5];
                      v356 = *(_QWORD *)(v291 + 40);
                      if ((v356 & 0x8000000000000000) == 0 || (v354 & 0x8000000000000000) == 0)
                      {
                        if (v354 >= 2)
                        {
                          v368 = *(_QWORD *)(2 * v354) + 63;
                          v369 = v368 & 0xFFFFFFFFFFFFFFC0;
                          v370 = WTF::fastMalloc((WTF *)(((v368 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                          *(_QWORD *)v370 = v369;
                          v371 = (_QWORD *)(2 * *v355);
                          if (*v355 >= 0)
                            v372 = v371 + 1;
                          else
                            v372 = v345 + 5;
                          if (*v355 < 0)
                            v373 = 8;
                          else
                            v373 = (unint64_t)(*v371 + 7) >> 3;
                          memcpy((void *)(v370 + 8), v372, v373);
                          v354 = v370 >> 1;
                          v356 = *(_QWORD *)(v291 + 40);
                        }
                        if (v356 >= 2)
                          WTF::fastFree(2 * v356, a2, a3, a4, a5, a6, a7, a8);
                      }
                      *(_QWORD *)(v291 + 40) = v354;
                      v357 = v345[6];
                      v345[6] = 0;
                      v358 = *(_QWORD *)(v291 + 48);
                      *(_QWORD *)(v291 + 48) = v357;
                      if (v358)
                        WTF::fastFree(v358, a2, a3, a4, a5, a6, a7, a8);
                      v360 = v345 + 7;
                      v359 = v345[7];
                      v361 = *(_QWORD *)(v291 + 56);
                      if ((v361 & 0x8000000000000000) == 0 || (v359 & 0x8000000000000000) == 0)
                      {
                        if (v359 >= 2)
                        {
                          v374 = *(_QWORD *)(2 * v359) + 63;
                          v375 = v374 & 0xFFFFFFFFFFFFFFC0;
                          v376 = WTF::fastMalloc((WTF *)(((v374 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
                          *(_QWORD *)v376 = v375;
                          v377 = (_QWORD *)(2 * *v360);
                          if (*v360 >= 0)
                            v378 = v377 + 1;
                          else
                            v378 = v345 + 7;
                          if (*v360 < 0)
                            v379 = 8;
                          else
                            v379 = (unint64_t)(*v377 + 7) >> 3;
                          memcpy((void *)(v376 + 8), v378, v379);
                          v359 = v376 >> 1;
                          v361 = *(_QWORD *)(v291 + 56);
                        }
                        if (v361 >= 2)
                          WTF::fastFree(2 * v361, a2, a3, a4, a5, a6, a7, a8);
                      }
                      *(_QWORD *)(v291 + 56) = v359;
                      if (!v336)
                        break;
                      v336 = (v336 - 1) >> 1;
                      v337 = &a1[8 * v336];
                      v291 = (uint64_t)v345;
                    }
                    while (*(_DWORD *)v337 < v344);
                    JSC::DFG::OSREntryData::operator=((uint64_t)v345, (uint64_t *)&v517, a3, a4, a5, a6, a7, a8);
                    if ((v523 & 0x8000000000000000) == 0)
                      WTF::fastFree(2 * v523, a2, a3, a4, a5, a6, a7, a8);
                    if (v522)
                      WTF::fastFree((unint64_t)v522, a2, a3, a4, a5, a6, a7, a8);
                    if ((v521 & 0x8000000000000000) == 0)
                      WTF::fastFree(2 * v521, a2, a3, a4, a5, a6, a7, a8);
                    if ((v520 & 0x8000000000000000) == 0)
                      WTF::fastFree(2 * v520, a2, a3, a4, a5, a6, a7, a8);
                    v380 = v518;
                    if (v518)
                    {
                      v382 = (_QWORD *)((char *)v518 + 8);
                      v381 = *(unsigned int *)v518;
                      if ((_DWORD)v381)
                      {
                        v383 = 32 * v381;
                        do
                        {
                          if ((*v382 & 1) != 0)
                            WTF::fastFree(*v382 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                          v382 += 4;
                          v383 -= 32;
                        }
                        while (v383);
                      }
                      WTF::fastFree((unint64_t)v380, a2, a3, a4, a5, a6, a7, a8);
                    }
                  }
                }
              }
              if ((v516 & 0x8000000000000000) == 0)
                WTF::fastFree(2 * v516, a2, a3, a4, a5, a6, a7, a8);
              if (v515)
                WTF::fastFree((unint64_t)v515, a2, a3, a4, a5, a6, a7, a8);
              if ((v514 & 0x8000000000000000) == 0)
                WTF::fastFree(2 * v514, a2, a3, a4, a5, a6, a7, a8);
              if ((v513 & 0x8000000000000000) == 0)
                WTF::fastFree(2 * v513, a2, a3, a4, a5, a6, a7, a8);
              v384 = v511;
              if (v511)
              {
                v386 = (_QWORD *)((char *)v511 + 8);
                v385 = *(unsigned int *)v511;
                if ((_DWORD)v385)
                {
                  v387 = 32 * v385;
                  do
                  {
                    if ((*v386 & 1) != 0)
                      WTF::fastFree(*v386 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                    v386 += 4;
                    v387 -= 32;
                  }
                  while (v387);
                }
                WTF::fastFree((unint64_t)v384, a2, a3, a4, a5, a6, a7, a8);
              }
            }
            while (v283-- > 2);
          }
          return;
        }
        v16 = (unint64_t)v15 >> 1;
        v17 = &a1[8 * ((unint64_t)v15 >> 1)];
        v18 = *(_DWORD *)v12;
        if ((unint64_t)v14 > 0x2000)
        {
          v19 = *(_DWORD *)v17;
          if (*(_DWORD *)v17 >= *(_DWORD *)a1)
          {
            if (v18 < v19)
            {
              std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)v17, v12, a3, a4, a5, a6, a7, a8);
              if (*(_DWORD *)v17 < *(_DWORD *)a1)
              {
                v20 = (uint64_t)a1;
                v21 = v17;
                goto LABEL_20;
              }
            }
          }
          else
          {
            v20 = (uint64_t)a1;
            if (v18 < v19)
              goto LABEL_11;
            std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)a1, v17, a3, a4, a5, a6, a7, a8);
            if (*(_DWORD *)v12 < *(_DWORD *)v17)
            {
              v20 = (uint64_t)v17;
LABEL_11:
              v21 = v507 - 8;
LABEL_20:
              std::swap[abi:sn180100]<JSC::DFG::OSREntryData>(v20, v21, a3, a4, a5, a6, a7, a8);
            }
          }
          v25 = &a1[8 * v16];
          v28 = *((_DWORD *)v25 - 16);
          v27 = v25 - 8;
          v26 = v28;
          v29 = *(_DWORD *)v504;
          if (v28 >= *((_DWORD *)a1 + 16))
          {
            if (v29 < v26)
            {
              std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)v27, v504, a3, a4, a5, a6, a7, a8);
              if (*(_DWORD *)v27 < *((_DWORD *)a1 + 16))
              {
                v30 = (uint64_t)(a1 + 8);
                v31 = v27;
                goto LABEL_33;
              }
            }
          }
          else
          {
            v30 = (uint64_t)(a1 + 8);
            if (v29 < v26)
              goto LABEL_25;
            std::swap[abi:sn180100]<JSC::DFG::OSREntryData>(v30, v27, a3, a4, a5, a6, a7, a8);
            if (*(_DWORD *)v504 < *(_DWORD *)v27)
            {
              v30 = (uint64_t)v27;
LABEL_25:
              v31 = v507 - 16;
LABEL_33:
              std::swap[abi:sn180100]<JSC::DFG::OSREntryData>(v30, v31, a3, a4, a5, a6, a7, a8);
            }
          }
          v32 = &a1[8 * v16];
          v35 = *((_DWORD *)v32 + 16);
          v34 = v32 + 8;
          v33 = v35;
          v36 = *(_DWORD *)v502;
          if (v35 >= *((_DWORD *)a1 + 32))
          {
            if (v36 < v33)
            {
              std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)v34, v502, a3, a4, a5, a6, a7, a8);
              if (*(_DWORD *)v34 < *((_DWORD *)a1 + 32))
              {
                v37 = (uint64_t)(a1 + 16);
                v38 = v34;
                goto LABEL_42;
              }
            }
          }
          else
          {
            v37 = (uint64_t)(a1 + 16);
            if (v36 < v33)
              goto LABEL_38;
            std::swap[abi:sn180100]<JSC::DFG::OSREntryData>(v37, v34, a3, a4, a5, a6, a7, a8);
            if (*(_DWORD *)v502 < *(_DWORD *)v34)
            {
              v37 = (uint64_t)v34;
LABEL_38:
              v38 = v507 - 24;
LABEL_42:
              std::swap[abi:sn180100]<JSC::DFG::OSREntryData>(v37, v38, a3, a4, a5, a6, a7, a8);
            }
          }
          v39 = *(_DWORD *)v17;
          v40 = *(_DWORD *)v34;
          if (*(_DWORD *)v17 >= *(_DWORD *)v27)
          {
            if (v40 < v39)
            {
              std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)v17, v34, a3, a4, a5, a6, a7, a8);
              if (*(_DWORD *)v17 < *(_DWORD *)v27)
              {
                v41 = (uint64_t)v27;
                v42 = v17;
                goto LABEL_51;
              }
            }
          }
          else
          {
            v41 = (uint64_t)v27;
            if (v40 < v39)
              goto LABEL_47;
            std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)v27, v17, a3, a4, a5, a6, a7, a8);
            if (*(_DWORD *)v34 < *(_DWORD *)v17)
            {
              v41 = (uint64_t)v17;
LABEL_47:
              v42 = v34;
LABEL_51:
              std::swap[abi:sn180100]<JSC::DFG::OSREntryData>(v41, v42, a3, a4, a5, a6, a7, a8);
            }
          }
          std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)a1, v17, a3, a4, a5, a6, a7, a8);
          goto LABEL_53;
        }
        v22 = *(_DWORD *)a1;
        if (*(_DWORD *)a1 < *(_DWORD *)v17)
        {
          v23 = (uint64_t)v17;
          if (v18 >= v22)
          {
            std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)v17, a1, a3, a4, a5, a6, a7, a8);
            if (*(_DWORD *)v12 >= *(_DWORD *)a1)
              goto LABEL_53;
            v23 = (uint64_t)a1;
          }
          v24 = v507 - 8;
          goto LABEL_29;
        }
        if (v18 < v22)
        {
          std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)a1, v12, a3, a4, a5, a6, a7, a8);
          if (*(_DWORD *)a1 < *(_DWORD *)v17)
          {
            v23 = (uint64_t)v17;
            v24 = a1;
LABEL_29:
            std::swap[abi:sn180100]<JSC::DFG::OSREntryData>(v23, v24, a3, a4, a5, a6, a7, a8);
          }
        }
LABEL_53:
        v9 = (uint64_t *)((char *)v9 - 1);
        if ((v8 & 1) == 0 && *((_DWORD *)a1 - 16) >= *(_DWORD *)a1)
        {
          v517 = *(_OWORD *)a1;
          v82 = a1[3];
          v520 = 0x8000000000000000;
          v84 = a1 + 4;
          v83 = a1[4];
          v85 = (WTF *)a1[2];
          a1[2] = 0;
          v518 = v85;
          v519 = v82;
          if ((v83 & 0x8000000000000000) == 0 && v83 >= 2)
          {
            v121 = *(_QWORD *)(2 * v83) + 63;
            v122 = v121 & 0xFFFFFFFFFFFFFFC0;
            v123 = WTF::fastMalloc((WTF *)(((v121 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
            *(_QWORD *)v123 = v122;
            v124 = (_QWORD *)(2 * *v84);
            if (*v84 >= 0)
              v125 = v124 + 1;
            else
              v125 = a1 + 4;
            if (*v84 < 0)
              v126 = 8;
            else
              v126 = (unint64_t)(*v124 + 7) >> 3;
            memcpy((void *)(v123 + 8), v125, v126);
            v83 = v123 >> 1;
            v11 = v507;
          }
          v520 = v83;
          v521 = 0x8000000000000000;
          v87 = a1 + 5;
          v86 = a1[5];
          if ((v86 & 0x8000000000000000) == 0 && v86 >= 2)
          {
            v127 = *(_QWORD *)(2 * v86) + 63;
            v128 = v127 & 0xFFFFFFFFFFFFFFC0;
            v129 = WTF::fastMalloc((WTF *)(((v127 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
            *(_QWORD *)v129 = v128;
            v130 = (_QWORD *)(2 * *v87);
            if (*v87 >= 0)
              v131 = v130 + 1;
            else
              v131 = a1 + 5;
            if (*v87 < 0)
              v132 = 8;
            else
              v132 = (unint64_t)(*v130 + 7) >> 3;
            memcpy((void *)(v129 + 8), v131, v132);
            v86 = v129 >> 1;
            v11 = v507;
          }
          v523 = 0x8000000000000000;
          v89 = a1 + 7;
          v88 = a1[7];
          v90 = (WTF *)a1[6];
          a1[6] = 0;
          v521 = v86;
          v522 = v90;
          if ((v88 & 0x8000000000000000) == 0 && v88 >= 2)
          {
            v133 = *(_QWORD *)(2 * v88) + 63;
            v134 = v133 & 0xFFFFFFFFFFFFFFC0;
            v135 = WTF::fastMalloc((WTF *)(((v133 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
            *(_QWORD *)v135 = v134;
            v136 = (_QWORD *)(2 * *v89);
            if (*v89 >= 0)
              v137 = v136 + 1;
            else
              v137 = a1 + 7;
            if (*v89 < 0)
              v138 = 8;
            else
              v138 = (unint64_t)(*v136 + 7) >> 3;
            memcpy((void *)(v135 + 8), v137, v138);
            v88 = v135 >> 1;
            v11 = v507;
          }
          v523 = v88;
          v50 = (uint64_t *)v517;
          if (v517 >= *(_DWORD *)v12)
          {
            v93 = a1 + 8;
            do
            {
              v13 = v93;
              if (v93 >= v11)
                break;
              v93 += 8;
            }
            while (v517 >= *(_DWORD *)v13);
          }
          else
          {
            v91 = a1 + 8;
            do
            {
              if (v91 == v11)
                goto LABEL_659;
              v92 = *(_DWORD *)v91;
              v91 += 8;
            }
            while (v517 >= v92);
            v13 = v91 - 8;
          }
          v94 = v11;
          if (v13 < v11)
          {
            v94 = v11;
            while (v94 != a1)
            {
              v95 = *((_DWORD *)v94 - 16);
              v94 -= 8;
              if (v517 >= v95)
                goto LABEL_122;
            }
            goto LABEL_659;
          }
LABEL_122:
          if (v13 < v94)
          {
            std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)v13, v94, a3, a4, a5, a6, a7, a8);
            v96 = v13 + 8;
            while (v96 != v11)
            {
              v97 = *(_DWORD *)v96;
              v96 += 8;
              if (v50 < v97)
              {
                v13 = v96 - 8;
                while (v94 != a1)
                {
                  v98 = *((_DWORD *)v94 - 16);
                  v94 -= 8;
                  if (v50 >= v98)
                    goto LABEL_122;
                }
                goto LABEL_659;
              }
            }
            goto LABEL_659;
          }
          if (v13 - 8 != a1)
            JSC::DFG::OSREntryData::operator=((uint64_t)a1, v13 - 8, a3, a4, a5, a6, a7, a8);
          JSC::DFG::OSREntryData::operator=((uint64_t)(v13 - 8), (uint64_t *)&v517, a3, a4, a5, a6, a7, a8);
          if ((v523 & 0x8000000000000000) == 0)
            WTF::fastFree(2 * v523, a2, a3, a4, a5, a6, a7, a8);
          if (v522)
            WTF::fastFree((unint64_t)v522, a2, a3, a4, a5, a6, a7, a8);
          if ((v521 & 0x8000000000000000) == 0)
            WTF::fastFree(2 * v521, a2, a3, a4, a5, a6, a7, a8);
          if ((v520 & 0x8000000000000000) == 0)
            WTF::fastFree(2 * v520, a2, a3, a4, a5, a6, a7, a8);
          v99 = v518;
          if (v518)
          {
            v101 = (_QWORD *)((char *)v518 + 8);
            v100 = *(unsigned int *)v518;
            if ((_DWORD)v100)
            {
              v102 = 32 * v100;
              do
              {
                if ((*v101 & 1) != 0)
                  WTF::fastFree(*v101 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                v101 += 4;
                v102 -= 32;
              }
              while (v102);
            }
            WTF::fastFree((unint64_t)v99, a2, a3, a4, a5, a6, a7, a8);
          }
          v8 = 0;
          continue;
        }
        v517 = *(_OWORD *)a1;
        v43 = a1[3];
        v520 = 0x8000000000000000;
        v45 = a1 + 4;
        v44 = a1[4];
        v46 = (WTF *)a1[2];
        a1[2] = 0;
        v518 = v46;
        v519 = v43;
        if ((v44 & 0x8000000000000000) == 0 && v44 >= 2)
        {
          v103 = *(_QWORD *)(2 * v44) + 63;
          v104 = v103 & 0xFFFFFFFFFFFFFFC0;
          v105 = WTF::fastMalloc((WTF *)(((v103 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
          *(_QWORD *)v105 = v104;
          v106 = (_QWORD *)(2 * *v45);
          if (*v45 >= 0)
            v107 = v106 + 1;
          else
            v107 = a1 + 4;
          if (*v45 < 0)
            v108 = 8;
          else
            v108 = (unint64_t)(*v106 + 7) >> 3;
          memcpy((void *)(v105 + 8), v107, v108);
          v44 = v105 >> 1;
        }
        v520 = v44;
        v521 = 0x8000000000000000;
        v48 = a1 + 5;
        v47 = a1[5];
        if ((v47 & 0x8000000000000000) == 0 && v47 >= 2)
        {
          v109 = *(_QWORD *)(2 * v47) + 63;
          v110 = v109 & 0xFFFFFFFFFFFFFFC0;
          v111 = WTF::fastMalloc((WTF *)(((v109 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
          *(_QWORD *)v111 = v110;
          v112 = (_QWORD *)(2 * *v48);
          if (*v48 >= 0)
            v113 = v112 + 1;
          else
            v113 = a1 + 5;
          if (*v48 < 0)
            v114 = 8;
          else
            v114 = (unint64_t)(*v112 + 7) >> 3;
          memcpy((void *)(v111 + 8), v113, v114);
          v47 = v111 >> 1;
        }
        v523 = 0x8000000000000000;
        v50 = a1 + 7;
        v49 = a1[7];
        v51 = (WTF *)a1[6];
        a1[6] = 0;
        v521 = v47;
        v522 = v51;
        if ((v49 & 0x8000000000000000) == 0 && v49 >= 2)
        {
          v115 = *(_QWORD *)(2 * v49) + 63;
          v116 = v115 & 0xFFFFFFFFFFFFFFC0;
          v117 = WTF::fastMalloc((WTF *)(((v115 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
          *(_QWORD *)v117 = v116;
          v118 = (_QWORD *)(2 * *v50);
          if (*v50 >= 0)
            v119 = v118 + 1;
          else
            v119 = a1 + 7;
          if (*v50 < 0)
            v120 = 8;
          else
            v120 = (unint64_t)(*v118 + 7) >> 3;
          memcpy((void *)(v117 + 8), v119, v120);
          v49 = v117 >> 1;
        }
        v52 = 0;
        v523 = v49;
        v53 = v517;
        do
        {
          v54 = &a1[v52 + 8];
          if (v54 == v11)
            goto LABEL_659;
          v52 += 8;
        }
        while (*(_DWORD *)v54 < v517);
        v55 = &a1[v52];
        v50 = v11;
        if (v52 != 8)
        {
          while (v50 != a1)
          {
            v56 = *((_DWORD *)v50 - 16);
            v50 -= 8;
            if (v56 < v517)
              goto LABEL_68;
          }
          goto LABEL_659;
        }
        v50 = v11;
        do
        {
          if (v55 >= v50)
            break;
          v57 = *((_DWORD *)v50 - 16);
          v50 -= 8;
        }
        while (v57 >= v517);
LABEL_68:
        if (v55 >= v50)
        {
          v63 = v55 - 8;
        }
        else
        {
          v58 = (unint64_t)&a1[v52];
          v59 = v50;
          do
          {
            std::swap[abi:sn180100]<JSC::DFG::OSREntryData>(v58, v59, a3, a4, a5, a6, a7, a8);
            v60 = (uint64_t *)(v58 + 64);
            do
            {
              if (v60 == v11)
                goto LABEL_659;
              v61 = *(_DWORD *)v60;
              v60 += 8;
            }
            while (v61 < v53);
            v58 = (unint64_t)(v60 - 8);
            do
            {
              if (v59 == a1)
                goto LABEL_659;
              v62 = *((_DWORD *)v59 - 16);
              v59 -= 8;
            }
            while (v62 >= v53);
          }
          while (v58 < (unint64_t)v59);
          v63 = v60 - 16;
        }
        if (v63 != a1)
          JSC::DFG::OSREntryData::operator=((uint64_t)a1, v63, a3, a4, a5, a6, a7, a8);
        JSC::DFG::OSREntryData::operator=((uint64_t)v63, (uint64_t *)&v517, a3, a4, a5, a6, a7, a8);
        if ((v523 & 0x8000000000000000) == 0)
          WTF::fastFree(2 * v523, v64, v65, v66, v67, v68, v69, v70);
        if (v522)
          WTF::fastFree((unint64_t)v522, v64, v65, v66, v67, v68, v69, v70);
        if ((v521 & 0x8000000000000000) == 0)
          WTF::fastFree(2 * v521, v64, v65, v66, v67, v68, v69, v70);
        if ((v520 & 0x8000000000000000) == 0)
          WTF::fastFree(2 * v520, v64, v65, v66, v67, v68, v69, v70);
        v71 = v518;
        if (v518)
        {
          v73 = (_QWORD *)((char *)v518 + 8);
          v72 = *(unsigned int *)v518;
          if ((_DWORD)v72)
          {
            v74 = 32 * v72;
            do
            {
              if ((*v73 & 1) != 0)
                WTF::fastFree(*v73 & 0xFFFFFFFFFFFFFFFCLL, v64, v65, v66, v67, v68, v69, v70);
              v73 += 4;
              v74 -= 32;
            }
            while (v74);
          }
          WTF::fastFree((unint64_t)v71, v64, v65, v66, v67, v68, v69, v70);
          v11 = v507;
        }
        if (v55 < v50)
        {
LABEL_99:
          std::__introsort<std::_ClassicAlgPolicy,JSC::DFG::JITCode::finalizeOSREntrypoints(WTF::Vector<JSC::DFG::OSREntryData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::OSREntryData*,false>(a1, v63, v9, v8 & 1);
          v8 = 0;
          v13 = v63 + 8;
          continue;
        }
        v75 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::JITCode::finalizeOSREntrypoints(WTF::Vector<JSC::DFG::OSREntryData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::OSREntryData*>(a1, v63, v65, v66, v67, v68, v69, v70);
        v13 = v63 + 8;
        if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::JITCode::finalizeOSREntrypoints(WTF::Vector<JSC::DFG::OSREntryData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::OSREntryData*>(v63 + 8, v11, v76, v77, v78, v79, v80, v81))
        {
          if (v75)
            continue;
          goto LABEL_99;
        }
        v507 = v63;
        if (!v75)
          goto LABEL_2;
        return;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::JITCode::finalizeOSREntrypoints(WTF::Vector<JSC::DFG::OSREntryData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::OSREntryData*>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _BOOL8 result;
  uint64_t *v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  WTF *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  WTF *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  void *v56;
  WTF *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  const void *v65;
  size_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  const void *v71;
  size_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  const void *v77;
  size_t v78;
  __int128 v79;
  WTF *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  WTF *v84;
  unint64_t v85;

  v10 = ((char *)a2 - (char *)a1) >> 6;
  result = 1;
  switch(v10)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v12 = a2 - 8;
      if (*((_DWORD *)a2 - 16) < *(_DWORD *)a1)
        goto LABEL_11;
      return result;
    case 3:
      v19 = a1 + 8;
      v18 = *((_DWORD *)a1 + 16);
      v12 = a2 - 8;
      v20 = *((_DWORD *)a2 - 16);
      if (v18 >= *(_DWORD *)a1)
      {
        if (v20 >= v18)
          return result;
        v38 = (uint64_t)(a1 + 8);
        v39 = a2 - 8;
LABEL_78:
        std::swap[abi:sn180100]<JSC::DFG::OSREntryData>(v38, v39, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)a1 + 16) < *(_DWORD *)a1)
        {
          v21 = (uint64_t)a1;
          v22 = v19;
LABEL_13:
          std::swap[abi:sn180100]<JSC::DFG::OSREntryData>(v21, v22, a3, a4, a5, a6, a7, a8);
        }
      }
      else
      {
        if (v20 < v18)
        {
LABEL_11:
          v21 = (uint64_t)a1;
LABEL_12:
          v22 = v12;
          goto LABEL_13;
        }
        std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)a1, a1 + 8, a3, a4, a5, a6, a7, a8);
        if (*(_DWORD *)v12 < *((_DWORD *)a1 + 16))
        {
          v21 = (uint64_t)(a1 + 8);
          goto LABEL_12;
        }
      }
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::JITCode::finalizeOSREntrypoints(WTF::Vector<JSC::DFG::OSREntryData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::OSREntryData*>(a1, a1 + 8, a1 + 16, a2 - 8, a5, a6, a7, a8);
      return 1;
    case 5:
      v19 = a1 + 8;
      v23 = a1 + 16;
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::JITCode::finalizeOSREntrypoints(WTF::Vector<JSC::DFG::OSREntryData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::OSREntryData*>(a1, a1 + 8, a1 + 16, a1 + 24, a5, a6, a7, a8);
      v31 = *((_DWORD *)a2 - 16);
      v30 = a2 - 8;
      if (v31 >= *((_DWORD *)a1 + 48))
        return 1;
      std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)(a1 + 24), v30, v24, v25, v26, v27, v28, v29);
      if (*((_DWORD *)a1 + 48) >= *v23)
        return 1;
      std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)(a1 + 16), a1 + 24, v32, v33, v34, v35, v36, v37);
      if (*v23 >= *(_DWORD *)v19)
        return 1;
      v38 = (uint64_t)(a1 + 8);
      v39 = a1 + 16;
      goto LABEL_78;
    default:
      v14 = a1 + 16;
      v13 = *((_DWORD *)a1 + 32);
      v15 = *((_DWORD *)a1 + 16);
      if (v15 < *(_DWORD *)a1)
      {
        v16 = (uint64_t)a1;
        if (v13 >= v15)
        {
          std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)a1, a1 + 8, a3, a4, a5, a6, a7, a8);
          if (*((_DWORD *)a1 + 32) >= *((_DWORD *)a1 + 16))
            goto LABEL_23;
          v16 = (uint64_t)(a1 + 8);
        }
        v17 = a1 + 16;
        goto LABEL_22;
      }
      if (v13 < v15)
      {
        std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)(a1 + 8), a1 + 16, a3, a4, a5, a6, a7, a8);
        if (*((_DWORD *)a1 + 16) < *(_DWORD *)a1)
        {
          v16 = (uint64_t)a1;
          v17 = a1 + 8;
LABEL_22:
          std::swap[abi:sn180100]<JSC::DFG::OSREntryData>(v16, v17, a3, a4, a5, a6, a7, a8);
        }
      }
LABEL_23:
      v40 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v41 = 0;
      v42 = 0;
      while (1)
      {
        if (*(_DWORD *)v40 < *(_DWORD *)v14)
        {
          v79 = *(_OWORD *)v40;
          v43 = (WTF *)v40[2];
          v44 = v40[3];
          v40[2] = 0;
          v80 = v43;
          v81 = v44;
          v46 = v40 + 4;
          v45 = v40[4];
          if ((v45 & 0x8000000000000000) == 0 && v45 >= 2)
          {
            v61 = *(_QWORD *)(2 * v45) + 63;
            v62 = v61 & 0xFFFFFFFFFFFFFFC0;
            v63 = WTF::fastMalloc((WTF *)(((v61 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
            *(_QWORD *)v63 = v62;
            v64 = (_QWORD *)(2 * *v46);
            if (*v46 >= 0)
              v65 = v64 + 1;
            else
              v65 = v40 + 4;
            if (*v46 < 0)
              v66 = 8;
            else
              v66 = (unint64_t)(*v64 + 7) >> 3;
            memcpy((void *)(v63 + 8), v65, v66);
            v45 = v63 >> 1;
          }
          v82 = v45;
          v48 = v40 + 5;
          v47 = v40[5];
          if ((v47 & 0x8000000000000000) == 0 && v47 >= 2)
          {
            v67 = *(_QWORD *)(2 * v47) + 63;
            v68 = v67 & 0xFFFFFFFFFFFFFFC0;
            v69 = WTF::fastMalloc((WTF *)(((v67 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
            *(_QWORD *)v69 = v68;
            v70 = (_QWORD *)(2 * *v48);
            if (*v48 >= 0)
              v71 = v70 + 1;
            else
              v71 = v40 + 5;
            if (*v48 < 0)
              v72 = 8;
            else
              v72 = (unint64_t)(*v70 + 7) >> 3;
            memcpy((void *)(v69 + 8), v71, v72);
            v47 = v69 >> 1;
          }
          v50 = v40 + 7;
          v49 = v40[7];
          v51 = (WTF *)v40[6];
          v40[6] = 0;
          v83 = v47;
          v84 = v51;
          if ((v49 & 0x8000000000000000) == 0 && v49 >= 2)
          {
            v73 = *(_QWORD *)(2 * v49) + 63;
            v74 = v73 & 0xFFFFFFFFFFFFFFC0;
            v75 = WTF::fastMalloc((WTF *)(((v73 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
            *(_QWORD *)v75 = v74;
            v76 = (_QWORD *)(2 * *v50);
            if (*v50 >= 0)
              v77 = v76 + 1;
            else
              v77 = v40 + 7;
            if (*v50 < 0)
              v78 = 8;
            else
              v78 = (unint64_t)(*v76 + 7) >> 3;
            memcpy((void *)(v75 + 8), v77, v78);
            v49 = v75 >> 1;
          }
          v85 = v49;
          v52 = v79;
          v53 = v41;
          while (1)
          {
            JSC::DFG::OSREntryData::operator=((uint64_t)a1 + v53 + 192, (uint64_t *)((char *)a1 + v53 + 128), a3, a4, a5, a6, a7, a8);
            if (v53 == -128)
              break;
            v54 = *(_DWORD *)((char *)a1 + v53 + 64);
            v53 -= 64;
            if (v52 >= v54)
            {
              v55 = (uint64_t)a1 + v53 + 192;
              goto LABEL_34;
            }
          }
          v55 = (uint64_t)a1;
LABEL_34:
          JSC::DFG::OSREntryData::operator=(v55, (uint64_t *)&v79, a3, a4, a5, a6, a7, a8);
          if ((v85 & 0x8000000000000000) == 0)
            WTF::fastFree(2 * v85, v56, a3, a4, a5, a6, a7, a8);
          if (v84)
            WTF::fastFree((unint64_t)v84, v56, a3, a4, a5, a6, a7, a8);
          if ((v83 & 0x8000000000000000) == 0)
            WTF::fastFree(2 * v83, v56, a3, a4, a5, a6, a7, a8);
          if ((v82 & 0x8000000000000000) == 0)
            WTF::fastFree(2 * v82, v56, a3, a4, a5, a6, a7, a8);
          v57 = v80;
          if (v80)
          {
            v59 = (_QWORD *)((char *)v80 + 8);
            v58 = *(unsigned int *)v80;
            if ((_DWORD)v58)
            {
              v60 = 32 * v58;
              do
              {
                if ((*v59 & 1) != 0)
                  WTF::fastFree(*v59 & 0xFFFFFFFFFFFFFFFCLL, v56, a3, a4, a5, a6, a7, a8);
                v59 += 4;
                v60 -= 32;
              }
              while (v60);
            }
            WTF::fastFree((unint64_t)v57, v56, a3, a4, a5, a6, a7, a8);
          }
          if (++v42 == 8)
            return v40 + 8 == a2;
        }
        v14 = v40;
        v41 += 64;
        v40 += 8;
        if (v40 == a2)
          return 1;
      }
  }
}

void std::swap[abi:sn180100]<JSC::DFG::OSREntryData>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  size_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  const void *v46;
  size_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  const void *v52;
  size_t v53;
  __int128 v54;
  WTF *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  WTF *v59;
  unint64_t v60;

  v54 = *(_OWORD *)a1;
  v10 = *(WTF **)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  v55 = v10;
  v56 = v11;
  v13 = (uint64_t *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 32);
  if ((v12 & 0x8000000000000000) == 0 && v12 >= 2)
  {
    v36 = *(_QWORD *)(2 * v12) + 63;
    v37 = v36 & 0xFFFFFFFFFFFFFFC0;
    v38 = WTF::fastMalloc((WTF *)(((v36 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
    *(_QWORD *)v38 = v37;
    v39 = (_QWORD *)(2 * *v13);
    if (*v13 >= 0)
      v40 = v39 + 1;
    else
      v40 = v13;
    if (*v13 < 0)
      v41 = 8;
    else
      v41 = (unint64_t)(*v39 + 7) >> 3;
    memcpy((void *)(v38 + 8), v40, v41);
    v12 = v38 >> 1;
  }
  v57 = v12;
  v15 = (uint64_t *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 40);
  if ((v14 & 0x8000000000000000) == 0 && v14 >= 2)
  {
    v42 = *(_QWORD *)(2 * v14) + 63;
    v43 = v42 & 0xFFFFFFFFFFFFFFC0;
    v44 = WTF::fastMalloc((WTF *)(((v42 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
    *(_QWORD *)v44 = v43;
    v45 = (_QWORD *)(2 * *v15);
    if (*v15 >= 0)
      v46 = v45 + 1;
    else
      v46 = (const void *)(a1 + 40);
    if (*v15 < 0)
      v47 = 8;
    else
      v47 = (unint64_t)(*v45 + 7) >> 3;
    memcpy((void *)(v44 + 8), v46, v47);
    v14 = v44 >> 1;
  }
  v17 = (uint64_t *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 56);
  v18 = *(WTF **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  v58 = v14;
  v59 = v18;
  if ((v16 & 0x8000000000000000) == 0 && v16 >= 2)
  {
    v48 = *(_QWORD *)(2 * v16) + 63;
    v49 = v48 & 0xFFFFFFFFFFFFFFC0;
    v50 = WTF::fastMalloc((WTF *)(((v48 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
    *(_QWORD *)v50 = v49;
    v51 = (_QWORD *)(2 * *v17);
    if (*v17 >= 0)
      v52 = v51 + 1;
    else
      v52 = (const void *)(a1 + 56);
    if (*v17 < 0)
      v53 = 8;
    else
      v53 = (unint64_t)(*v51 + 7) >> 3;
    memcpy((void *)(v50 + 8), v52, v53);
    v16 = v50 >> 1;
  }
  v60 = v16;
  JSC::DFG::OSREntryData::operator=(a1, a2, a3, a4, a5, a6, a7, a8);
  JSC::DFG::OSREntryData::operator=((uint64_t)a2, (uint64_t *)&v54, v19, v20, v21, v22, v23, v24);
  if ((v60 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v60, v25, v26, v27, v28, v29, v30, v31);
  if (v59)
    WTF::fastFree((unint64_t)v59, v25, v26, v27, v28, v29, v30, v31);
  if ((v58 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v58, v25, v26, v27, v28, v29, v30, v31);
  if ((v57 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v57, v25, v26, v27, v28, v29, v30, v31);
  v32 = v55;
  if (v55)
  {
    v34 = (_QWORD *)((char *)v55 + 8);
    v33 = *(unsigned int *)v55;
    if ((_DWORD)v33)
    {
      v35 = 32 * v33;
      do
      {
        if ((*v34 & 1) != 0)
          WTF::fastFree(*v34 & 0xFFFFFFFFFFFFFFFCLL, v25, v26, v27, v28, v29, v30, v31);
        v34 += 4;
        v35 -= 32;
      }
      while (v35);
    }
    WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
  }
}

uint64_t JSC::DFG::OSREntryData::operator=(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  const void *v32;
  size_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  const void *v38;
  size_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  size_t v45;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v10 = a2[2];
  a2[2] = 0;
  v11 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  if (v11)
  {
    v13 = v11 + 2;
    v12 = *v11;
    if ((_DWORD)v12)
    {
      v14 = 32 * v12;
      do
      {
        if ((*v13 & 1) != 0)
          WTF::fastFree(*v13 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v13 += 4;
        v14 -= 32;
      }
      while (v14);
    }
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)(a1 + 24) = a2[3];
  v16 = a2 + 4;
  v15 = a2[4];
  v17 = *(_QWORD *)(a1 + 32);
  if ((v17 & 0x8000000000000000) == 0 || (v15 & 0x8000000000000000) == 0)
  {
    if (v15 >= 2)
    {
      v28 = *(_QWORD *)(2 * v15) + 63;
      v29 = v28 & 0xFFFFFFFFFFFFFFC0;
      v30 = WTF::fastMalloc((WTF *)(((v28 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
      *(_QWORD *)v30 = v29;
      v31 = (_QWORD *)(2 * *v16);
      if (*v16 >= 0)
        v32 = v31 + 1;
      else
        v32 = a2 + 4;
      if (*v16 < 0)
        v33 = 8;
      else
        v33 = (unint64_t)(*v31 + 7) >> 3;
      memcpy((void *)(v30 + 8), v32, v33);
      v15 = v30 >> 1;
      v17 = *(_QWORD *)(a1 + 32);
    }
    if (v17 >= 2)
      WTF::fastFree(2 * v17, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)(a1 + 32) = v15;
  v19 = a2 + 5;
  v18 = a2[5];
  v20 = *(_QWORD *)(a1 + 40);
  if ((v20 & 0x8000000000000000) == 0 || (v18 & 0x8000000000000000) == 0)
  {
    if (v18 >= 2)
    {
      v34 = *(_QWORD *)(2 * v18) + 63;
      v35 = v34 & 0xFFFFFFFFFFFFFFC0;
      v36 = WTF::fastMalloc((WTF *)(((v34 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
      *(_QWORD *)v36 = v35;
      v37 = (_QWORD *)(2 * *v19);
      if (*v19 >= 0)
        v38 = v37 + 1;
      else
        v38 = a2 + 5;
      if (*v19 < 0)
        v39 = 8;
      else
        v39 = (unint64_t)(*v37 + 7) >> 3;
      memcpy((void *)(v36 + 8), v38, v39);
      v18 = v36 >> 1;
      v20 = *(_QWORD *)(a1 + 40);
    }
    if (v20 >= 2)
      WTF::fastFree(2 * v20, a2, a3, a4, a5, a6, a7, a8);
  }
  v21 = a2[6];
  a2[6] = 0;
  v22 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v18;
  *(_QWORD *)(a1 + 48) = v21;
  if (v22)
    WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
  v25 = a2[7];
  v23 = a2 + 7;
  v24 = v25;
  v26 = *(_QWORD *)(a1 + 56);
  if ((v26 & 0x8000000000000000) == 0 || (v24 & 0x8000000000000000) == 0)
  {
    if (v24 >= 2)
    {
      v40 = *(_QWORD *)(2 * v24) + 63;
      v41 = v40 & 0xFFFFFFFFFFFFFFC0;
      v42 = WTF::fastMalloc((WTF *)(((v40 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
      *(_QWORD *)v42 = v41;
      v43 = (_QWORD *)(2 * *v23);
      if (*v23 >= 0)
        v44 = v43 + 1;
      else
        v44 = v23;
      if (*v23 < 0)
        v45 = 8;
      else
        v45 = (unint64_t)(*v43 + 7) >> 3;
      memcpy((void *)(v42 + 8), v44, v45);
      v24 = v42 >> 1;
      v26 = *(_QWORD *)(a1 + 56);
    }
    if (v26 >= 2)
      WTF::fastFree(2 * v26, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)(a1 + 56) = v24;
  return a1;
}

void std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::JITCode::finalizeOSREntrypoints(WTF::Vector<JSC::DFG::OSREntryData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::OSREntryData*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v11 = a1;
  v12 = *(_DWORD *)a2;
  v13 = *(_DWORD *)a3;
  if (*(_DWORD *)a2 >= *(_DWORD *)a1)
  {
    if (v13 < v12)
    {
      std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)a2, a3, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_DWORD *)a2 < *(_DWORD *)v11)
      {
        a1 = v11;
        v14 = a2;
        goto LABEL_9;
      }
    }
  }
  else
  {
    if (v13 < v12)
    {
LABEL_5:
      v14 = a3;
LABEL_9:
      std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)a1, v14, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_10;
    }
    std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      a1 = a2;
      goto LABEL_5;
    }
  }
LABEL_10:
  if (*(_DWORD *)a4 < *(_DWORD *)a3)
  {
    std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)a3, a4, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)a2, a3, v15, v16, v17, v18, v19, v20);
      if (*(_DWORD *)a2 < *(_DWORD *)v11)
        std::swap[abi:sn180100]<JSC::DFG::OSREntryData>((uint64_t)v11, a2, v21, v22, v23, v24, v25, v26);
    }
  }
}

void JSC::MacroAssemblerARM64::or64(uint64_t a1, int a2, char a3, int a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;

  v7 = a2;
  v8 = JSC::ARM64LogicalImmediate::create64(a2);
  if (v8 == -1)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      return;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v7, *(char *)(a1 + 272), v11, v12, v13, v14, v15);
    v16 = a4 & 0x1F | (32 * (a3 & 0x1F));
    v17 = -1441792000;
  }
  else
  {
    v16 = (32 * (a3 & 0x1F)) | (v8 << 10);
    v17 = a4 | 0xB2000000;
  }
  v18 = v16 | v17;
  v21 = *(_DWORD *)(a1 + 200);
  v20 = (unsigned int *)(a1 + 200);
  v19 = v21;
  if (v21 + 4 > *(v20 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v20 - 36), v9, v10, v11, v12, v13, v14, v15);
    v19 = *v20;
  }
  *(_DWORD *)(*((_QWORD *)v20 - 18) + v19) = v18;
  *v20 += 4;
}

void std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,WTF::SegmentedVectorIterator<JSC::DFG::UnlinkedStructureStubInfo,8ul>,WTF::SegmentedVectorIterator<JSC::DFG::UnlinkedStructureStubInfo,8ul>,JSC::DFG::UnlinkedStructureStubInfo*,0>(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  v8 = a6;
  v9 = a5;
  v10 = a3;
  if (a3 == a5 && a2 == a4)
  {
    v9 = a3;
LABEL_4:
    *a1 = a2;
    a1[1] = v9;
    a1[2] = v8;
  }
  else
  {
    if (a2 == a4)
    {
      while (v10 >> 3 < *(unsigned int *)(a2 + 20))
      {
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * (v10 >> 3)) + ((v10 & 7) << 6);
        v14 = *(_OWORD *)(v13 + 16);
        *(_OWORD *)v8 = *(_OWORD *)v13;
        *(_OWORD *)(v8 + 16) = v14;
        if (v8 != v13)
        {
          v15 = *(_QWORD *)(v8 + 32);
          if ((v15 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v15 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
          v16 = *(_QWORD *)(v13 + 32);
          *(_QWORD *)(v13 + 32) = 0;
          *(_QWORD *)(v8 + 32) = v16;
        }
        v17 = *(_OWORD *)(v13 + 40);
        *(_BYTE *)(v8 + 56) = *(_BYTE *)(v13 + 56);
        *(_OWORD *)(v8 + 40) = v17;
        ++v10;
        v8 += 64;
        if (v9 == v10)
          goto LABEL_4;
      }
    }
    else
    {
      v18 = a3 >> 3;
      if (a3 >> 3 < *(unsigned int *)(a2 + 20))
      {
        v19 = a6 + 32;
        do
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v18) + ((v10 & 7) << 6);
          v21 = *(_OWORD *)(v20 + 16);
          *(_OWORD *)(v19 - 32) = *(_OWORD *)v20;
          *(_OWORD *)(v19 - 16) = v21;
          if (v19 - 32 != v20)
          {
            v22 = *(_QWORD *)v19;
            if ((*(_QWORD *)v19 & 1) != 0 && (v22 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v22 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
            v23 = *(_QWORD *)(v20 + 32);
            *(_QWORD *)(v20 + 32) = 0;
            *(_QWORD *)v19 = v23;
          }
          v24 = *(_OWORD *)(v20 + 40);
          *(_BYTE *)(v19 + 24) = *(_BYTE *)(v20 + 56);
          *(_OWORD *)(v19 + 8) = v24;
          v18 = ++v10 >> 3;
          v19 += 64;
        }
        while (v10 >> 3 < *(unsigned int *)(a2 + 20));
      }
    }
    __break(0xC471u);
  }
}

void std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,WTF::SegmentedVectorIterator<JSC::DFG::UnlinkedCallLinkInfo,8ul>,WTF::SegmentedVectorIterator<JSC::DFG::UnlinkedCallLinkInfo,8ul>,JSC::DFG::UnlinkedCallLinkInfo*,0>(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = a6;
  v10 = a3;
  if (a3 == a5 && a2 == a4)
  {
LABEL_12:
    *a1 = a2;
    a1[1] = v10;
    a1[2] = v8;
  }
  else
  {
    if (a2 == a4)
    {
      while (v10 >> 3 < *(unsigned int *)(a2 + 20))
      {
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * (v10 >> 3)) + 16 * (v10 & 7);
        if (v8 != v13)
        {
          v14 = *(_QWORD *)v8;
          if ((*(_QWORD *)v8 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v14 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
          v15 = *(_QWORD *)v13;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)v8 = v15;
        }
        *(_BYTE *)(v8 + 8) = *(_BYTE *)(v13 + 8);
        ++v10;
        v8 += 16;
        if (a5 == v10)
        {
          v10 = a5;
          goto LABEL_12;
        }
      }
    }
    else
    {
      v16 = a3 >> 3;
      v17 = *(unsigned int *)(a2 + 20);
      while (v16 < v17)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v16) + 16 * (v10 & 7);
        if (v8 != v18)
        {
          v19 = *(_QWORD *)v8;
          if ((*(_QWORD *)v8 & 1) != 0 && (v19 & 0xFFFFFFFF8) != 0)
          {
            WTF::fastFree(v19 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
            v17 = *(unsigned int *)(a2 + 20);
          }
          v20 = *(_QWORD *)v18;
          *(_QWORD *)v18 = 0;
          *(_QWORD *)v8 = v20;
        }
        *(_BYTE *)(v8 + 8) = *(_BYTE *)(v18 + 8);
        ++v10;
        v8 += 16;
        v16 = v10 >> 3;
      }
    }
    __break(0xC471u);
  }
}

uint64_t WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::CatchEntrypointData>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12);
  *(_QWORD *)v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v4 + 8) = v5;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(v3 + 16);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1984239C8);
    }
    v3 = *(_QWORD **)a1;
    v4 = (_QWORD *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
    v5 = 24 * a2;
    v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,JSC::DFG::CatchEntrypointData>::move(v3, v4, v6, v7, v8, v9, v10, v11);
    if (v3)
    {
      if (*(_QWORD **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v12, v13, v14, v15, v16, v17, v18);
    }
  }
  return 1;
}

void WTF::VectorMover<false,JSC::DFG::CatchEntrypointData>::move(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;

  if (a1 != a2)
  {
    v8 = a3;
    v10 = a1;
    do
    {
      *(_QWORD *)v8 = *v10;
      v11 = v10[1];
      v10[1] = 0;
      *(_QWORD *)(v8 + 8) = v11;
      *(_DWORD *)(v8 + 16) = *((_DWORD *)v10 + 4);
      v12 = v10[1];
      v10[1] = 0;
      if (v12)
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      v10 += 3;
      v8 += 24;
    }
    while (v10 != a2);
  }
}

unint64_t *WTF::FixedVector<JSC::DFG::FlushFormat>::FixedVector<0ul,WTF::CrashOnOverflow>(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  WTF *v11;
  unint64_t v12;
  WTF *v13;
  WTF *v14;
  WTF *v16;
  WTF *v17;
  int v18;
  int v19;

  *a1 = 0;
  v17 = *(WTF **)a2;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v18 = v9;
  v19 = v10;
  if (v10)
  {
    WTF::EmbeddedFixedVector<JSC::DFG::FlushFormat>::createFromVector<0ul,WTF::CrashOnOverflow>((uint64_t)&v17, &v16);
    v11 = v16;
    v16 = 0;
  }
  else
  {
    v11 = 0;
  }
  v12 = *a1;
  *a1 = (unint64_t)v11;
  if (v12)
    WTF::fastFree(v12, (void *)a2, a3, a4, a5, a6, a7, a8);
  if (v10)
  {
    v13 = v16;
    v16 = 0;
    if (v13)
      WTF::fastFree((unint64_t)v13, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = v17;
  if (v17)
  {
    v17 = 0;
    v18 = 0;
    WTF::fastFree((unint64_t)v14, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::EmbeddedFixedVector<JSC::DFG::FlushFormat>::createFromVector<0ul,WTF::CrashOnOverflow>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  char v15;

  v3 = *(_QWORD *)a1;
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (_DWORD *)WTF::fastMalloc((WTF *)(v4 + 4));
  *v5 = v4;
  if ((_DWORD)v4)
  {
    v13 = v5 + 1;
    v14 = (char *)v3;
    do
    {
      v15 = *v14++;
      *v13++ = v15;
      --v4;
    }
    while (v4);
  }
  *a2 = v5;
  if (v3)
    WTF::fastFree(v3, v6, v7, v8, v9, v10, v11, v12);
}

void JSC::DFG::OSREntryData::~OSREntryData(JSC::DFG::OSREntryData *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v9 = *((_QWORD *)this + 7);
  if ((v9 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v9, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  v11 = *((_QWORD *)this + 5);
  if ((v11 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v11, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 4);
  if ((v12 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v12, a2, a3, a4, a5, a6, a7, a8);
  v13 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
  {
    v15 = v13 + 2;
    v14 = *v13;
    if ((_DWORD)v14)
    {
      v16 = 32 * v14;
      do
      {
        if ((*v15 & 1) != 0)
          WTF::fastFree(*v15 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v15 += 4;
        v16 -= 32;
      }
      while (v16);
    }
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::DFG::IntegerCheckCombiningPhase::Range::~Range(JSC::DFG::IntegerCheckCombiningPhase::Range *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *((_QWORD *)this + 2);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 1);
  if ((v10 & 1) != 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t JSC::DFG::IntegerCheckCombiningPhase::insertAdd(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t result;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  const void *v54;
  void *v55;
  uint64_t v56;
  __int128 *v57;
  int v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  char v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t inserted;
  uint64_t v119;
  __int16 v120;
  unsigned int v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int16 v128;
  __int128 v129;

  if (!a5)
    return a4 & 0xFF00FFFFFFFFFFFFLL;
  v121 = a6;
  LODWORD(v13) = *(_DWORD *)((a4 & 0xFF00FFFFFFFFFFFFLL) + 0x38);
  v14 = *(_QWORD *)a3;
  v125 = *(_QWORD *)((a4 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v58 = *(_DWORD *)((a4 & 0xFF00FFFFFFFFFFFFLL) + 0x38);
    v13 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v59 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v59 != 0x3FFFFFFF)
        ? (v60 = (_DWORD)v59 == -1)
        : (v60 = 1),
          v60))
    {
      v61 = 2;
    }
    else if (v59 >> 28)
    {
      v101 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v101 = v13;
      *(_DWORD *)(v101 + 8) = v59;
      v61 = 1;
      v13 = v101;
    }
    else
    {
      v61 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      v13 = v59 << 36;
    }
    v14 = v13 | v61;
    LOBYTE(v13) = v58;
  }
  v15 = *(_QWORD *)(a3 + 8);
  if ((v15 & 1) != 0)
  {
    v62 = v13;
    v13 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((v63 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v63 != 0x3FFFFFFF)
        ? (v64 = (_DWORD)v63 == -1)
        : (v64 = 1),
          v64))
    {
      v65 = 2;
    }
    else if (v63 >> 28)
    {
      v102 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v102 = v13;
      *(_DWORD *)(v102 + 8) = v63;
      v65 = 1;
      v13 = v102;
    }
    else
    {
      v65 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      v13 = v63 << 36;
    }
    v15 = v13 | v65;
    LOBYTE(v13) = v62;
  }
  v16 = a2;
  v120 = *(_WORD *)(a3 + 16);
  v17 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v66 = v13;
    v67 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
    if ((v17 & 2) != 0
      || ((v68 = *(unsigned int *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v68 != 0x3FFFFFFF)
        ? (v69 = (_DWORD)v68 == -1)
        : (v69 = 1),
          v69))
    {
      v70 = 2;
    }
    else if (v68 >> 28)
    {
      v103 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v103 = v67;
      *(_DWORD *)(v103 + 8) = v68;
      v70 = 1;
      v67 = v103;
    }
    else
    {
      v70 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
      v67 = v68 << 36;
    }
    v17 = v67 | v70;
    LOBYTE(v13) = v66;
  }
  v126 = v17;
  v18 = *(_QWORD *)(a3 + 8);
  if ((v18 & 1) != 0)
  {
    v111 = v13;
    v71 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
    if ((v18 & 2) != 0
      || ((v72 = *(unsigned int *)((v18 & 0xFFFFFFFF8) + 8), (_DWORD)v72 != 0x3FFFFFFF)
        ? (v73 = (_DWORD)v72 == -1)
        : (v73 = 1),
          v73))
    {
      v74 = 2;
    }
    else if (v72 >> 28)
    {
      v104 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v104 = v71;
      *(_DWORD *)(v104 + 8) = v72;
      v74 = 1;
      v71 = v104;
    }
    else
    {
      v74 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
      v71 = v72 << 36;
    }
    v18 = v71 | v74;
    LOBYTE(v13) = v111;
  }
  v127 = v18;
  v128 = *(_WORD *)(a3 + 16);
  v124 = v16;
  inserted = JSC::DFG::InsertionSet::insertConstantForUse((uint64_t *)(a1 + 80), v16, (uint64_t)&v126, a5 | 0xFFFE000000000000, (a4 >> 50) & 0x3F, a6, a7, a8);
  v19 = *(_QWORD *)(a1 + 80);
  v20 = v14;
  if ((v14 & 1) != 0)
  {
    v75 = v13;
    v76 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v77 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v77 != 0x3FFFFFFF)
        ? (v78 = (_DWORD)v77 == -1)
        : (v78 = 1),
          v78))
    {
      v79 = 2;
    }
    else if (v77 >> 28)
    {
      v105 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v105 = v76;
      *(_DWORD *)(v105 + 8) = v77;
      v79 = 1;
      v76 = v105;
    }
    else
    {
      v79 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      v76 = v77 << 36;
    }
    v20 = v76 | v79;
    LOBYTE(v13) = v75;
  }
  v21 = v15;
  if ((v15 & 1) != 0)
  {
    v80 = v13;
    v81 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || (v82 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v82 == 0x3FFFFFFF)
      || (_DWORD)v82 == -1)
    {
      v83 = 2;
    }
    else if (v82 >> 28)
    {
      v106 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v106 = v81;
      *(_DWORD *)(v106 + 8) = v82;
      v83 = 1;
      v81 = v106;
    }
    else
    {
      v83 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      v81 = v82 << 36;
    }
    v21 = v81 | v83;
    LOBYTE(v13) = v80;
  }
  v116 = v15;
  v117 = v14;
  v22 = v20;
  if ((v20 & 1) != 0)
  {
    v84 = v13;
    v13 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
    if ((v20 & 2) != 0
      || (v85 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v85 == 0x3FFFFFFF)
      || (_DWORD)v85 == -1)
    {
      v86 = 2;
    }
    else if (v85 >> 28)
    {
      v107 = v21;
      v108 = WTF::fastMalloc((WTF *)0x10);
      v21 = v107;
      *(_QWORD *)v108 = v13;
      *(_DWORD *)(v108 + 8) = v85;
      v86 = 1;
      v13 = v108;
    }
    else
    {
      v86 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v13 = v85 << 36;
    }
    v22 = v13 | v86;
    LOBYTE(v13) = v84;
  }
  v23 = v21;
  if ((v21 & 1) != 0)
  {
    v87 = v13;
    v13 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
    if ((v21 & 2) != 0
      || (v88 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v88 == 0x3FFFFFFF)
      || (_DWORD)v88 == -1)
    {
      v89 = 2;
    }
    else if (v88 >> 28)
    {
      v109 = v21;
      v110 = WTF::fastMalloc((WTF *)0x10);
      v21 = v109;
      *(_QWORD *)v110 = v13;
      *(_DWORD *)(v110 + 8) = v88;
      v89 = 1;
      v13 = v110;
    }
    else
    {
      v89 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
      v13 = v88 << 36;
    }
    v23 = v13 | v89;
    LOBYTE(v13) = v87;
  }
  v119 = v21;
  v115 = v20;
  result = WTF::fastMalloc((WTF *)0x68);
  v32 = result;
  v33 = v22;
  if ((v22 & 1) != 0)
  {
    v90 = v13;
    v13 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
    if ((v22 & 2) != 0
      || (v91 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v91 == 0x3FFFFFFF)
      || (_DWORD)v91 == -1)
    {
      v92 = 2;
    }
    else if (v91 >> 28)
    {
      result = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)result = v13;
      *(_DWORD *)(result + 8) = v91;
      v92 = 1;
      v13 = result;
    }
    else
    {
      v92 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
      v13 = v91 << 36;
    }
    v33 = v13 | v92;
    LOBYTE(v13) = v90;
  }
  v34 = a4;
  v35 = v23;
  if ((v23 & 1) != 0)
  {
    v112 = v13;
    v13 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
    if ((v23 & 2) != 0
      || (v93 = *(unsigned int *)((v23 & 0xFFFFFFFF8) + 8), (_DWORD)v93 == 0x3FFFFFFF)
      || (_DWORD)v93 == -1)
    {
      v94 = 2;
    }
    else if (v93 >> 28)
    {
      result = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)result = v13;
      *(_DWORD *)(result + 8) = v93;
      v94 = 1;
      v13 = result;
    }
    else
    {
      v94 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
      v13 = v93 << 36;
    }
    v35 = v13 | v94;
    LOBYTE(v13) = v112;
  }
  v36 = v121;
  v37 = v33;
  if ((v33 & 1) != 0)
  {
    v113 = v13;
    v95 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
    if ((v33 & 2) != 0
      || (v96 = *(unsigned int *)((v33 & 0xFFFFFFFF8) + 8), (_DWORD)v96 == 0x3FFFFFFF)
      || (_DWORD)v96 == -1)
    {
      v97 = 2;
    }
    else if (v96 >> 28)
    {
      v122 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
      result = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)result = v122;
      *(_DWORD *)(result + 8) = v96;
      v97 = 1;
      v95 = result;
    }
    else
    {
      v97 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
      v95 = v96 << 36;
    }
    v37 = v95 | v97;
    LOBYTE(v13) = v113;
  }
  v38 = v13 & 7;
  *(_QWORD *)v32 = v37;
  v39 = v35;
  if ((v35 & 1) != 0)
  {
    v98 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
    if ((v35 & 2) != 0
      || (v99 = *(unsigned int *)((v35 & 0xFFFFFFFF8) + 8), (_DWORD)v99 == 0x3FFFFFFF)
      || (_DWORD)v99 == -1)
    {
      v100 = 2;
    }
    else if (v99 >> 28)
    {
      v114 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
      v123 = *(_DWORD *)((v35 & 0xFFFFFFFF8) + 8);
      result = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)result = v114;
      *(_DWORD *)(result + 8) = v123;
      v100 = 1;
      v98 = result;
    }
    else
    {
      v100 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
      v98 = v99 << 36;
    }
    v39 = v98 | v100;
  }
  *(_QWORD *)(v32 + 8) = v39;
  *(_WORD *)(v32 + 16) = v120;
  *(_DWORD *)(v32 + 20) = -1;
  *(_QWORD *)(v32 + 24) = v34;
  *(_QWORD *)(v32 + 32) = inserted;
  *(_QWORD *)(v32 + 40) = 0;
  *(_QWORD *)(v32 + 48) = 0x13FFFFFFFLL;
  *(_QWORD *)(v32 + 64) = 0;
  *(_QWORD *)(v32 + 72) = v36;
  *(_QWORD *)(v32 + 88) = 0;
  *(_QWORD *)(v32 + 96) = 0;
  *(_QWORD *)(v32 + 80) = 0;
  *(_WORD *)(v32 + 18) = 62;
  *(_DWORD *)(v32 + 56) = v38 | 8;
  v40 = *(unsigned int *)(v19 + 1060);
  if ((_DWORD)v40)
  {
    v41 = *(_QWORD *)(*(_QWORD *)(v19 + 1048) + 8 * v40 - 8);
    *(_DWORD *)(v19 + 1060) = v40 - 1;
    v42 = *(_QWORD *)(v19 + 1032);
LABEL_17:
    *(_DWORD *)(v32 + 20) = v41;
    *(_QWORD *)(v42 + 8 * v41) = v32;
    if ((v35 & 1) != 0 && (v35 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v35 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
    if ((v33 & 1) != 0 && (v33 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v33 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
    if ((v23 & 1) != 0 && (v23 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v23 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
    if ((v22 & 1) != 0 && (v22 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v22 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
    *(_QWORD *)(v32 + 64) |= v125;
    *(_QWORD *)&v129 = v124;
    *((_QWORD *)&v129 + 1) = v32;
    v43 = (_QWORD *)(a1 + 88);
    v44 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v44 && *(_QWORD *)(*v43 + 16 * v44 - 16) > v124)
    {
      JSC::DFG::InsertionSet::insertSlow(a1 + 80, (unint64_t *)&v129, v26, v27, v28, v29, v30, v31);
      v46 = v116;
      v45 = v117;
      v47 = v115;
    }
    else
    {
      v46 = v116;
      v45 = v117;
      v47 = v115;
      if ((_DWORD)v44 == *(_DWORD *)(a1 + 96))
      {
        v57 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, (void *)(v44 + 1), (unint64_t)&v129, v27, v28, v29, v30, v31);
        v44 = *(unsigned int *)(a1 + 100);
        v48 = *(_QWORD *)(a1 + 88);
        v49 = *v57;
      }
      else
      {
        v48 = *(_QWORD *)(a1 + 88);
        v49 = v129;
      }
      *(_OWORD *)(v48 + 16 * v44) = v49;
      ++*(_DWORD *)(a1 + 100);
    }
    v50 = *((_QWORD *)&v129 + 1);
    if ((v119 & 1) != 0 && (v119 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v119 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
    if ((v47 & 1) != 0 && (v47 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v47 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
    if ((v127 & 1) != 0 && (v127 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v127 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
    if ((v126 & 1) != 0 && (v126 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v126 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
    if ((v46 & 1) != 0 && (v46 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v46 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
    if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v45 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
    return v50;
  }
  v41 = *(unsigned int *)(v19 + 1044);
  if ((_DWORD)v41 != *(_DWORD *)(v19 + 1040))
  {
    v42 = *(_QWORD *)(v19 + 1032);
    *(_QWORD *)(v42 + 8 * v41) = 0;
    *(_DWORD *)(v19 + 1044) = v41 + 1;
    goto LABEL_17;
  }
  v51 = v41 + (v41 >> 2);
  if (v51 >= 0x10)
    v52 = v51 + 1;
  else
    v52 = 16;
  if (v52 <= v41 + 1)
    v53 = v41 + 1;
  else
    v53 = v52;
  if (!(v53 >> 29))
  {
    v54 = *(const void **)(v19 + 1032);
    v55 = (void *)WTF::fastMalloc((WTF *)(8 * v53));
    *(_DWORD *)(v19 + 1040) = v53;
    *(_QWORD *)(v19 + 1032) = v55;
    memcpy(v55, v54, 8 * v41);
    if (v54)
    {
      if (*(const void **)(v19 + 1032) == v54)
      {
        *(_QWORD *)(v19 + 1032) = 0;
        *(_DWORD *)(v19 + 1040) = 0;
      }
      WTF::fastFree((unint64_t)v54, v25, v26, v27, v28, v29, v30, v31);
    }
    v56 = *(unsigned int *)(v19 + 1044);
    v42 = *(_QWORD *)(v19 + 1032);
    *(_QWORD *)(v42 + 8 * v56) = 0;
    *(_DWORD *)(v19 + 1044) = v56 + 1;
    goto LABEL_17;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>,WTF::KeyValuePair<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>,JSC::DFG::IntegerCheckCombiningPhase::Range>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>,JSC::DFG::IntegerCheckCombiningPhase::Range>>,WTF::DefaultHash<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashMap<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>,JSC::DFG::IntegerCheckCombiningPhase::Range,WTF::DefaultHash<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashTraits<JSC::DFG::IntegerCheckCombiningPhase::Range>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(72 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = v9 + 40;
    v19 = vdupq_n_s64(2uLL);
    do
    {
      *(_DWORD *)v18 = 1;
      *(_OWORD *)(v18 + 8) = 0uLL;
      *(_OWORD *)(v18 + 24) = 0uLL;
      *(int64x2_t *)(v18 + 16) = v19;
      *(_QWORD *)(v18 + 40) = 0;
      v18 += 72;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v22 = 0;
    v20 = 0;
    v23 = v7;
    while (1)
    {
      v24 = v6 + 72 * v22;
      v25 = *(_DWORD *)(v24 + 24);
      if (v25 == 1)
      {
        v53 = *(_QWORD *)(v6 + 72 * v22 + 48);
        if ((v53 & 1) != 0 && (v53 & 0xFFFFFFFF8) != 0)
        {
          v59 = v23;
          WTF::fastFree(v53 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
          v23 = v59;
        }
        v54 = *(_QWORD *)(v6 + 72 * v22 + 40);
        if ((v54 & 1) != 0)
        {
          v55 = v23;
          if ((v54 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v54 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
          v23 = v55;
        }
      }
      else if (v25 != 2)
      {
        v26 = *a1;
        if (*a1)
          v27 = *(_DWORD *)(v26 - 8);
        else
          v27 = 0;
        if (v25)
        {
          v60 = std::__throw_bad_variant_access[abi:sn180100]();
          return WTF::HashMap<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>,JSC::DFG::IntegerCheckCombiningPhase::Range,WTF::DefaultHash<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashTraits<JSC::DFG::IntegerCheckCombiningPhase::Range>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>,JSC::DFG::IntegerCheckCombiningPhase::Range,WTF::DefaultHash<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashTraits<JSC::DFG::IntegerCheckCombiningPhase::Range>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>>,WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>(v60);
        }
        v64 = a3;
        v28 = *(_QWORD *)(v24 + 8) + ~(*(_QWORD *)(v24 + 8) << 32);
        v29 = (v28 ^ (v28 >> 22)) + ~((v28 ^ (v28 >> 22)) << 13);
        v30 = (9 * (v29 ^ (v29 >> 8))) ^ ((9 * (v29 ^ (v29 >> 8))) >> 15);
        v31 = ~(*(_QWORD *)(v24 + 16) << 32) + *(_QWORD *)(v24 + 16);
        v32 = (v31 ^ (v31 >> 22)) + ~((v31 ^ (v31 >> 22)) << 13);
        v33 = (9 * (v32 ^ (v32 >> 8))) ^ ((9 * (v32 ^ (v32 >> 8))) >> 15);
        v34 = *(_DWORD *)v24
            + (((v30 + ~(v30 << 27)) >> 31) ^ (v30 + ~((_DWORD)v30 << 27)))
            + (((v33 + ~(v33 << 27)) >> 31) ^ (v33 + ~((_DWORD)v33 << 27)));
        do
        {
          v35 = v34 & v27;
          v36 = v26 + 72 * (v34 & v27);
          v34 = ++v25 + (v34 & v27);
        }
        while (*(_DWORD *)(v36 + 24) != 1);
        v37 = v26 + 72 * v35;
        v40 = *(_QWORD *)(v37 + 48);
        v39 = (_QWORD *)(v37 + 48);
        v38 = v40;
        if ((v40 & 1) != 0 && (v38 & 0xFFFFFFFF8) != 0)
        {
          v56 = *a1;
          v62 = v23;
          WTF::fastFree(v38 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
          v23 = v62;
          v26 = v56;
        }
        v41 = v26 + 72 * v35;
        v44 = *(_QWORD *)(v41 + 40);
        v43 = (_QWORD *)(v41 + 40);
        v42 = v44;
        if ((v44 & 1) != 0 && (v42 & 0xFFFFFFFF8) != 0)
        {
          v61 = v26;
          v63 = v23;
          WTF::fastFree(v42 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
          v26 = v61;
          v23 = v63;
        }
        v45 = *(_OWORD *)(v24 + 16);
        *(_OWORD *)v36 = *(_OWORD *)v24;
        *(_OWORD *)(v36 + 16) = v45;
        v46 = v26 + 72 * v35;
        v47 = v6 + 72 * v22;
        *(_QWORD *)(v46 + 32) = *(_QWORD *)(v47 + 32);
        v49 = *(_QWORD *)(v47 + 40);
        v48 = (uint64_t *)(v47 + 40);
        *v48 = 0;
        *v43 = v49;
        v50 = v48[1];
        v48[1] = 0;
        *v39 = v50;
        *(_OWORD *)(v46 + 56) = *((_OWORD *)v48 + 1);
        v51 = v48[1];
        if ((v51 & 1) != 0 && (v51 & 0xFFFFFFFF8) != 0)
        {
          v57 = v23;
          WTF::fastFree(v51 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
          v23 = v57;
        }
        v52 = *v48;
        a3 = v64;
        if ((*v48 & 1) != 0 && (v52 & 0xFFFFFFFF8) != 0)
        {
          v58 = v23;
          WTF::fastFree(v52 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
          v23 = v58;
        }
        if (v24 == v64)
          v20 = v36;
      }
      if (++v22 == v23)
        goto LABEL_31;
    }
  }
  v20 = 0;
  result = 0;
  if (v6)
  {
LABEL_31:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v20;
  }
  return result;
}

void WTF::HashMap<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>,JSC::DFG::IntegerCheckCombiningPhase::Range,WTF::DefaultHash<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashTraits<JSC::DFG::IntegerCheckCombiningPhase::Range>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>,JSC::DFG::IntegerCheckCombiningPhase::Range,WTF::DefaultHash<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>,WTF::HashTraits<JSC::DFG::IntegerCheckCombiningPhase::Range>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>>,WTF::GenericHashKey<JSC::DFG::IntegerCheckCombiningPhase::RangeKey,JSC::DFG::IntegerCheckCombiningPhase::RangeKey::Hash>>(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int i;
  unsigned int v18;
  char *v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  _OWORD v44[3];

  if (!a2)
  {
LABEL_31:
    memset(v44, 0, 40);
    *(_OWORD *)a1 = xmmword_199155E70;
    *(_QWORD *)(a1 + 16) = 2;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)((char *)&v44[1] + 8);
    JSC::DFG::IntegerCheckCombiningPhase::Range::~Range((JSC::DFG::IntegerCheckCombiningPhase::Range *)v44, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_DWORD *)(a3 + 24))
  {
    a1 = std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_37;
  }
  v8 = 0;
  v9 = *(_QWORD *)(a3 + 8);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  v15 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
  v16 = (9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8))) ^ ((9
                                                                     * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8))) >> 15);
  for (i = *(_DWORD *)a3 + v14 + (((v16 + ~(v16 << 27)) >> 31) ^ (v16 + ~((_DWORD)v16 << 27))); ; i = v8 + v18)
  {
    v18 = i & *((_DWORD *)a2 - 2);
    v19 = &a2[72 * v18];
    v20 = *((_DWORD *)v19 + 6);
    if (!v20)
      break;
    if (v20 == 1)
      goto LABEL_31;
LABEL_10:
    ++v8;
  }
  if (*(_DWORD *)v19 != *(_DWORD *)a3 || *((_QWORD *)v19 + 1) != v9 || *((_QWORD *)v19 + 2) != v10)
    goto LABEL_10;
  v21 = &a2[72 * v18];
  v22 = *((_QWORD *)v21 + 5);
  *(_QWORD *)a1 = *((_QWORD *)v21 + 4);
  if ((v22 & 1) == 0)
    goto LABEL_12;
  v24 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
  if ((v22 & 2) == 0)
  {
    v25 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8);
    if ((_DWORD)v25 != 0x3FFFFFFF && (_DWORD)v25 != -1)
    {
      if (!(v25 >> 28))
      {
        v27 = v24;
        v24 = v25 << 36;
        goto LABEL_22;
      }
LABEL_37:
      v38 = a2;
      v40 = a1;
      v42 = v18;
      v32 = v24;
      v33 = v25;
      v34 = WTF::fastMalloc((WTF *)0x10);
      a2 = v38;
      a1 = v40;
      *(_QWORD *)v34 = v32;
      *(_DWORD *)(v34 + 8) = v33;
      v27 = 1;
      v24 = v34;
      v18 = v42;
      goto LABEL_22;
    }
  }
  v27 = 2;
LABEL_22:
  v22 = v24 | v27;
LABEL_12:
  *(_QWORD *)(a1 + 8) = v22;
  v23 = *(_QWORD *)&a2[72 * v18 + 48];
  if ((v23 & 1) != 0)
  {
    v28 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
    if ((v23 & 2) != 0
      || ((v29 = *(unsigned int *)((v23 & 0xFFFFFFFF8) + 8), (_DWORD)v29 != 0x3FFFFFFF)
        ? (v30 = (_DWORD)v29 == -1)
        : (v30 = 1),
          v30))
    {
      v31 = 2;
    }
    else if (v29 >> 28)
    {
      v39 = a2;
      v41 = a1;
      v43 = v18;
      v35 = v28;
      v36 = v29;
      v37 = WTF::fastMalloc((WTF *)0x10);
      a2 = v39;
      a1 = v41;
      *(_QWORD *)v37 = v35;
      *(_DWORD *)(v37 + 8) = v36;
      v31 = 1;
      v28 = v37;
      v18 = v43;
    }
    else
    {
      v31 = v28;
      v28 = v29 << 36;
    }
    v23 = v28 | v31;
  }
  *(_QWORD *)(a1 + 16) = v23;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&a2[72 * v18 + 56];
}

void JSC::DFG::`anonymous namespace'::IntegerRangeOptimizationPhase::executeNode(JSC::DFG::_anonymous_namespace_::IntegerRangeOptimizationPhase *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t *v12;
  JSC::DFG::Node *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  JSC::DFG::Node *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v78;
  uint64_t v82;
  unint64_t v83;
  __int128 v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  JSC::DFG::Node *v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  signed int v98;
  signed int v99;
  _QWORD v100[3];
  _BYTE v101[24];
  _QWORD v102[2];
  int v103;
  int v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD v115[2];
  int v116;
  int v117;
  _BYTE v118[24];
  __int128 v119;
  uint64_t v120;
  _BYTE v121[24];
  unint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  int v128;
  int v129;

  v9 = (uint64_t *)this;
  v10 = *(unsigned __int16 *)(a2 + 18);
  if (v10 <= 0x1A)
  {
    if (v10 != 26)
      return;
    v14 = *(_QWORD *)(a2 + 72) | 1;
    v16 = (uint64_t *)((char *)this + 80);
    v15 = *((_QWORD *)this + 10);
    if (!v15)
      goto LABEL_28;
    v17 = *(_DWORD *)(v15 - 8);
    v18 = v17 & v14;
    v19 = (uint64_t *)(v15 + 24 * (v17 & v14));
    v20 = *v19;
    if (*v19 != v14)
    {
      v21 = 1;
      while (v20)
      {
        v18 = (v18 + v21) & v17;
        v19 = (uint64_t *)(v15 + 24 * v18);
        v20 = *v19;
        ++v21;
        if (*v19 == v14)
          goto LABEL_22;
      }
      v19 = (uint64_t *)(v15 + 24 * *(unsigned int *)(v15 - 4));
    }
LABEL_22:
    v22 = *(_DWORD *)(v15 - 4);
    if ((uint64_t *)(v15 + 24 * v22) == v19)
      goto LABEL_23;
    *v19 = 1;
    v74 = v19[1];
    if (v74)
    {
      v19[1] = 0;
      *((_DWORD *)v19 + 4) = 0;
      v90 = v14;
      WTF::fastFree(v74, (void *)a2, v14, a4, a5, a6, a7, a8);
      v14 = v90;
    }
    ++*(_DWORD *)(*v16 - 16);
    v75 = *v16;
    if (*v16)
      v76 = *(_DWORD *)(v75 - 12) - 1;
    else
      v76 = -1;
    *(_DWORD *)(v75 - 12) = v76;
    v15 = *v16;
    if (*v16)
    {
      v22 = *(_DWORD *)(v15 - 4);
      if (6 * *(_DWORD *)(v15 - 12) >= v22 || v22 < 9)
      {
LABEL_23:
        if (*(_DWORD *)(v15 - 12))
        {
          v23 = v15;
          if (v22)
          {
            v24 = 24 * v22;
            v23 = v15;
            while (*(_QWORD *)v23 <= 1uLL)
            {
              v23 += 24;
              v24 -= 24;
              if (!v24)
                goto LABEL_28;
            }
          }
          v26 = v15 + 24 * v22;
          while (v23 != v26)
          {
            v27 = *(unsigned int *)(v23 + 20);
            if ((_DWORD)v27)
            {
              v28 = 0;
              v29 = 0;
              v30 = 0;
              do
              {
                v31 = *(_QWORD *)(v23 + 8);
                v32 = (__int128 *)(v31 + v28);
                if (*(_QWORD *)(v31 + v28 + 8) != v14)
                {
                  if (v27 <= v30)
                    goto LABEL_162;
                  v33 = v31 + 24 * v30++;
                  v34 = *v32;
                  *(_QWORD *)(v33 + 16) = *((_QWORD *)v32 + 2);
                  *(_OWORD *)v33 = v34;
                  v27 = *(unsigned int *)(v23 + 20);
                }
                ++v29;
                v28 += 24;
              }
              while (v29 < v27);
            }
            else
            {
              LODWORD(v30) = 0;
            }
            *(_DWORD *)(v23 + 20) = v30;
            do
            {
              v23 += 24;
              if (v23 == v26)
                goto LABEL_28;
            }
            while (*(_QWORD *)v23 <= 1uLL);
          }
        }
        goto LABEL_28;
      }
      v78 = v14;
      v14 = v78;
      v15 = *v16;
      if (*v16)
      {
        v22 = *(_DWORD *)(v15 - 4);
        goto LABEL_23;
      }
    }
LABEL_28:
    v25 = *(_QWORD *)(a2 + 24) & 0xFF00FFFFFFFFFFFFLL;
    this = (JSC::DFG::_anonymous_namespace_::IntegerRangeOptimizationPhase *)v9;
LABEL_29:
    return;
  }
  if (*(unsigned __int16 *)(a2 + 18) > 0x9Du)
  {
    if (v10 != 187)
    {
      if (v10 - 158 < 2 || v10 == 161)
      {
        v13 = (JSC::DFG::Node *)*((_QWORD *)this + 9);
        v100[0] = a2;
        v100[1] = v13;
        v100[2] = 0xFFFFFFFF00000003;
        if (!v13)
        {
LABEL_162:
          __break(0xC471u);
          JUMPOUT(0x1984251F8);
        }
        if (v13 == (JSC::DFG::Node *)a2)
        {
          __break(0xC471u);
          JUMPOUT(0x198425218);
        }
        v12 = v100;
        goto LABEL_80;
      }
      return;
    }
    v65 = *(_QWORD *)(a2 + 24);
    v66 = v65 & 0xFF00FFFFFFFFFFFFLL;
    if ((v65 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_112;
    v67 = *(_QWORD *)(a2 + 32);
    v68 = v67 & 0xFF00FFFFFFFFFFFFLL;
    if ((v65 & 1) != 0)
    {
      if (*(_WORD *)((v65 & 0xFF00FFFFFFFFFFFELL) + 0x12) != 27 || v68 == 0)
        goto LABEL_112;
    }
    else if (!v68)
    {
      goto LABEL_112;
    }
    if ((v67 & 1) != 0)
    {
      if (*(_WORD *)((v67 & 0xFF00FFFFFFFFFFFELL) + 0x12) == 27 && v66 != v68)
        goto LABEL_72;
    }
    else if (v66 != v68)
    {
LABEL_72:
      v126 = v65 & 0xFF00FFFFFFFFFFFFLL;
      v127 = v67 & 0xFF00FFFFFFFFFFFFLL;
      v128 = 0;
      goto LABEL_73;
    }
LABEL_112:
    v126 = 0;
    v127 = 0;
    v128 = 1;
LABEL_73:
    v129 = 0;
    v69 = *(_QWORD *)(a2 + 24);
    if ((v69 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v70 = v9[9];
      if ((v69 & 1) != 0)
      {
        if (*(_WORD *)((v69 & 0xFF00FFFFFFFFFFFELL) + 0x12) != 27 || v70 == 0)
          goto LABEL_114;
      }
      else if (!v70)
      {
        goto LABEL_114;
      }
      if (((v70 & 1) == 0 || *(_WORD *)((v70 & 0xFFFFFFFFFFFFFFFELL) + 18) == 27)
        && (v69 & 0xFF00FFFFFFFFFFFFLL) != v70)
      {
        v122 = v69 & 0xFF00FFFFFFFFFFFFLL;
        v123 = v70;
        v124 = 3;
        v71 = -1;
LABEL_79:
        v125 = v71;
        v12 = &v122;
        goto LABEL_80;
      }
    }
LABEL_114:
    v71 = 0;
    v122 = 0;
    v123 = 0;
    v124 = 1;
    goto LABEL_79;
  }
  switch(v10)
  {
    case 0x1Bu:
      v25 = a2 | 1;
      v14 = a2;
      goto LABEL_29;
    case 0x3Eu:
      v35 = *(_QWORD *)(a2 + 24);
      if ((v35 & 0xFC000000000000) != 0x4000000000000)
        return;
      v36 = *(_QWORD *)(a2 + 32);
      if ((v36 & 0xFC000000000000) != 0x4000000000000)
        return;
      if (*(_DWORD *)(a2 + 72) != 2)
        return;
      v37 = v36 & 0xFF00FFFFFFFFFFFFLL;
      if (*(unsigned __int16 *)(v37 + 18) > 2u)
        return;
      v38 = **(_QWORD **)(v37 + 72);
      if (v38 < 0xFFFE000000000000)
        return;
      v116 = 1;
      v117 = v38;
      v39 = (JSC::DFG::Node *)(v35 & 0xFF00FFFFFFFFFFFFLL);
      v115[0] = a2;
      v115[1] = v39;
      if (!v39)
      {
        __break(0xC471u);
        JUMPOUT(0x1984252D0);
      }
      if (v39 == (JSC::DFG::Node *)a2)
      {
        __break(0xC471u);
        JUMPOUT(0x1984252F0);
      }
      v47 = v9[10];
      if (v47)
      {
        v48 = *(_QWORD *)(a2 + 24);
        v49 = v48 & 0xFF00FFFFFFFFFFFFLL;
        v50 = *(_DWORD *)(v47 - 8);
        v51 = v50 & v48;
        v52 = v47 + 24 * (v50 & v48);
        v53 = *(_QWORD *)v52;
        if (*(_QWORD *)v52 != v49)
        {
          v54 = 1;
          while (v53)
          {
            v51 = (v51 + v54) & v50;
            v52 = v47 + 24 * v51;
            v53 = *(_QWORD *)v52;
            ++v54;
            if (*(_QWORD *)v52 == v49)
              goto LABEL_56;
          }
          v52 = v47 + 24 * *(unsigned int *)(v47 - 4);
        }
LABEL_56:
        if (v52 != v47 + 24 * *(unsigned int *)(v47 - 4))
        {
          v113 = 0;
          v114 = 0;
          v55 = *(unsigned int *)(v52 + 20);
          if ((_DWORD)v55)
          {
            v56 = 0;
            v57 = 0;
            v58 = *(__int128 **)(v52 + 8);
            v59 = 24 * v55;
            do
            {
              v119 = *v58;
              v120 = *((_QWORD *)v58 + 2);
              v111 = v119;
              v112 = v120;
              if (*((_QWORD *)&v119 + 1) != a2)
              {
                *(_QWORD *)&v111 = a2;
                if (!__OFADD__(HIDWORD(v112), (_DWORD)v38))
                {
                  HIDWORD(v112) += v38;
                  if (v57 == (_DWORD)v114)
                  {
                    v56 = v113;
                    v57 = HIDWORD(v114);
                    v63 = v113 + 24 * HIDWORD(v114);
                    v64 = *(_QWORD *)(v62 + 16);
                    *(_OWORD *)v63 = *(_OWORD *)v62;
                    *(_QWORD *)(v63 + 16) = v64;
                  }
                  else
                  {
                    v60 = v111;
                    v61 = v56 + 24 * v57;
                    *(_QWORD *)(v61 + 16) = v112;
                    *(_OWORD *)v61 = v60;
                  }
                  HIDWORD(v114) = ++v57;
                }
              }
              v58 = (__int128 *)((char *)v58 + 24);
              v59 -= 24;
            }
            while (v59);
            if (v57)
            {
              v82 = 24 * v57;
              v83 = v56;
              do
              {
                v84 = *(_OWORD *)v83;
                v110 = *(_QWORD *)(v83 + 16);
                v109 = v84;
                v83 += 24;
                v82 -= 24;
              }
              while (v82);
            }
            if (v56)
            {
              v113 = 0;
              LODWORD(v114) = 0;
              WTF::fastFree(v56, v40, v41, v42, v43, v44, v45, v46);
            }
          }
        }
      }
      if ((int)v38 < 1)
      {
        if ((v38 & 0x7FFFFFFF) == 0 || __OFADD__(-(int)v38, 1) || 1 - (int)v38 > 0)
          return;
        v12 = (unint64_t *)v101;
LABEL_130:
        v72 = (uint64_t)v9;
        v73 = 0;
        goto LABEL_81;
      }
      v85 = *(_QWORD *)(a2 + 24);
      v86 = v85 & 0xFF00FFFFFFFFFFFFLL;
      if ((v85 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_144;
      v87 = v9[9];
      if ((v85 & 1) != 0)
      {
        if (*(_WORD *)((v85 & 0xFF00FFFFFFFFFFFELL) + 0x12) != 27 || v87 == 0)
          goto LABEL_144;
      }
      else if (!v87)
      {
        goto LABEL_144;
      }
      if (((v87 & 1) == 0 || *(_WORD *)((v87 & 0xFFFFFFFFFFFFFFFELL) + 18) == 27) && v86 != v87)
      {
        v88 = 0x80000000 - v38;
        v105 = v86;
        v106 = v87;
        v107 = 0;
LABEL_127:
        v108 = v88;
        v89 = (JSC::DFG::Node *)v9[9];
        v102[0] = a2;
        v102[1] = v89;
        v103 = 3;
        v104 = (v38 | 0x80000000) - 1;
        if (!v89)
        {
          __break(0xC471u);
          JUMPOUT(0x198425310);
        }
        if (v89 == (JSC::DFG::Node *)a2)
        {
          __break(0xC471u);
          JUMPOUT(0x198425330);
        }
        v12 = v102;
        goto LABEL_130;
      }
LABEL_144:
      v88 = 0;
      v105 = 0;
      v106 = 0;
      v107 = 1;
      goto LABEL_127;
    case 0x46u:
      v11 = *(_QWORD *)(a2 + 24);
      if ((v11 & 0xFC000000000000) == 0x4000000000000)
      {
        if (*(_DWORD *)(a2 + 72) != 1)
        {
          v12 = (unint64_t *)v121;
LABEL_80:
          v72 = (uint64_t)v9;
          v73 = 1;
LABEL_81:
          return;
        }
        v92 = *((_QWORD *)this + 10);
        if (v92)
          v94 = (uint64_t *)(v92 + 24 * *(unsigned int *)(v92 - 4));
        else
          v94 = 0;
        if (v94 != v93)
        {
          v95 = *((unsigned int *)v93 + 5);
          if ((_DWORD)v95)
          {
            v96 = v93[1];
            v97 = 24 * v95;
            v98 = 0x80000000;
            do
            {
              v119 = *(_OWORD *)v96;
              v120 = *(_QWORD *)(v96 + 16);
              if (v98 <= v99)
                v98 = v99;
              v96 += 24;
              v97 -= 24;
            }
            while (v97);
            if (v98 != 0x80000000)
            {
              v12 = (unint64_t *)v118;
              goto LABEL_80;
            }
          }
        }
      }
      break;
  }
}

