uint64_t JSC::DFG::BasicBlock::BasicBlock(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  int v9;
  int v10;
  void **v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t StatusReg;
  uint64_t v17;
  uint64_t v18;
  char *casual;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char **v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _OWORD *v57;
  _OWORD *v58;
  unint64_t v60;
  _OWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unint64_t *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int v108;
  uint64_t v109;
  void *v110;
  char *v111;
  unsigned int v112;
  uint64_t v113;
  void *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *__src;
  uint64_t v123;

  v9 = a4;
  v10 = a3;
  *(_DWORD *)a1 = 1;
  *(_DWORD *)(a1 + 4) = (_DWORD)a2;
  *(_QWORD *)(a1 + 8) = 0xFFFFFFFFLL;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 17) = 257;
  *(_BYTE *)(a1 + 21) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 56;
  *(_QWORD *)(a1 + 72) = 0;
  v13 = (void **)(a1 + 72);
  *(_QWORD *)(a1 + 48) = 2;
  v14 = a4 + (unint64_t)a3 + a5;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = v14;
  if (!v14)
  {
    *(_DWORD *)(a1 + 88) = a3;
    *(_DWORD *)(a1 + 92) = a4;
    *(_DWORD *)(a1 + 84) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = a3;
    *(_DWORD *)(a1 + 116) = a4;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_DWORD *)(a1 + 132) = 0;
    *(_DWORD *)(a1 + 136) = a3;
    *(_DWORD *)(a1 + 140) = a4;
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_DWORD *)(a1 + 156) = 0;
    *(_DWORD *)(a1 + 160) = a3;
    *(_DWORD *)(a1 + 164) = a4;
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_DWORD *)(a1 + 180) = 0;
    goto LABEL_65;
  }
  if (v14 >> 29)
    goto LABEL_146;
  v123 = 8 * v14;
  v15 = (8 * v14 + 15) >> 4;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v17 = *(_QWORD *)(StatusReg + 752);
  if (!v17)
    goto LABEL_7;
  if (v14 <= 0x34)
  {
    v18 = 23 * v15 + 7;
  }
  else if (v14 > 0x4E2
         || (v18 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v15 + 626),
             *(_DWORD *)(v17 + 8052) <= v18))
  {
LABEL_7:
    casual = (char *)bmalloc_allocate_casual(v123, 1);
    goto LABEL_12;
  }
  v20 = v17 + 8 * v18;
  v21 = v20 + 8064;
  *(_BYTE *)(v20 + 8064) = 1;
  v22 = *(unsigned int *)(v20 + 8080);
  if ((_DWORD)v22)
  {
    *(_DWORD *)(v21 + 16) = v22 - *(_DWORD *)(v21 + 20);
    casual = (char *)(*(_QWORD *)(v21 + 8) - v22);
  }
  else
  {
    v63 = *(_QWORD *)(v21 + 40);
    v64 = *(_QWORD *)(v21 + 24);
    if (!v63)
    {
      if (*(_BYTE *)(v21 + 5) == 6)
      {
        v78 = *(unsigned int *)(v21 + 32);
        v79 = *(_DWORD *)(v21 + 36);
        if (v78 < v79)
        {
          *(_QWORD *)(v21 + 8 * v78 + 56) = 0;
          v80 = (unint64_t *)(8 * v18 + 8 * v78 + v17 + 8128);
          v81 = v79 - 1 - v78;
          while (v81)
          {
            v64 += 1024;
            v83 = *v80++;
            v82 = v83;
            LODWORD(v78) = v78 + 1;
            --v81;
            if (v83)
            {
              v63 = __rbit64(v82);
              *(_DWORD *)(v21 + 32) = v78;
              *(_QWORD *)(v21 + 24) = v64;
              goto LABEL_71;
            }
          }
          *(_DWORD *)(v21 + 32) = v79;
        }
      }
      *(_BYTE *)v21 = 0;
      goto LABEL_7;
    }
LABEL_71:
    v65 = __clz(v63);
    *(_QWORD *)(v21 + 40) = v63 & ~(0x8000000000000000 >> v65);
    casual = (char *)(v64 + 16 * v65);
  }
  *(_BYTE *)v21 = 0;
LABEL_12:
  *(_DWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 72) = casual;
  v23 = *(unsigned int *)(a1 + 84);
  *(_DWORD *)(a1 + 88) = v10;
  *(_DWORD *)(a1 + 92) = v9;
  if (v23 > v14)
  {
    __src = casual;
    if ((_DWORD)v14)
    {
      *v13 = 0;
      v13[1] = 0;
      WTF::fastFree((unint64_t)casual, a2, a3, a4, a5, a6, a7, a8);
      v108 = *(_DWORD *)(a1 + 80);
      __src = *(char **)(a1 + 72);
    }
    else
    {
      v108 = 0;
    }
    if (v108 < v23)
    {
      if (v23 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1982F0C98);
      }
      v109 = *(unsigned int *)(a1 + 84);
      v110 = (void *)WTF::fastMalloc((WTF *)(8 * v23));
      *(_DWORD *)(a1 + 80) = v23;
      *(_QWORD *)(a1 + 72) = v110;
      memcpy(v110, __src, 8 * v109);
      v111 = *(char **)(a1 + 72);
      if (__src)
      {
        if (v111 == __src)
        {
          *(_QWORD *)(a1 + 72) = 0;
          *(_DWORD *)(a1 + 80) = 0;
        }
        WTF::fastFree((unint64_t)__src, a2, a3, a4, a5, a6, a7, a8);
        v111 = (char *)*v13;
      }
      __src = v111;
    }
    v24 = *(unsigned int *)(a1 + 84);
    v25 = *(_DWORD *)(a1 + 84);
    casual = __src;
  }
  else
  {
    v24 = v23;
    v25 = v23;
  }
  if (v25)
  {
    bzero(casual, 8 * (v24 - (v24 != 0)) + 8);
    casual = (char *)*v13;
  }
  if (v25 != (_DWORD)v23)
    bzero(&casual[8 * v24], 8 * (v23 - v24));
  *(_QWORD *)(a1 + 96) = 0;
  v26 = (char **)(a1 + 96);
  *(_DWORD *)(a1 + 84) = v23;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 108) = v14;
  v27 = *(_QWORD *)(StatusReg + 752);
  if (!v27)
    goto LABEL_22;
  if (v14 <= 0x34)
  {
    v28 = 23 * v15 + 7;
  }
  else if (v14 > 0x4E2
         || (v28 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v15 + 626),
             *(_DWORD *)(v27 + 8052) <= v28))
  {
LABEL_22:
    v29 = (char *)bmalloc_allocate_casual(v123, 1);
    goto LABEL_27;
  }
  v30 = v27 + 8 * v28;
  v31 = v30 + 8064;
  *(_BYTE *)(v30 + 8064) = 1;
  v32 = *(unsigned int *)(v30 + 8080);
  if ((_DWORD)v32)
  {
    *(_DWORD *)(v31 + 16) = v32 - *(_DWORD *)(v31 + 20);
    v29 = (char *)(*(_QWORD *)(v31 + 8) - v32);
  }
  else
  {
    v66 = *(_QWORD *)(v31 + 40);
    v67 = *(_QWORD *)(v31 + 24);
    if (!v66)
    {
      if (*(_BYTE *)(v31 + 5) == 6)
      {
        v84 = *(unsigned int *)(v31 + 32);
        v85 = *(_DWORD *)(v31 + 36);
        if (v84 < v85)
        {
          *(_QWORD *)(v31 + 8 * v84 + 56) = 0;
          v86 = (unint64_t *)(8 * v28 + 8 * v84 + v27 + 8128);
          v87 = v85 - 1 - v84;
          while (v87)
          {
            v67 += 1024;
            v89 = *v86++;
            v88 = v89;
            LODWORD(v84) = v84 + 1;
            --v87;
            if (v89)
            {
              v66 = __rbit64(v88);
              *(_DWORD *)(v31 + 32) = v84;
              *(_QWORD *)(v31 + 24) = v67;
              goto LABEL_73;
            }
          }
          *(_DWORD *)(v31 + 32) = v85;
        }
      }
      *(_BYTE *)v31 = 0;
      goto LABEL_22;
    }
LABEL_73:
    v68 = __clz(v66);
    *(_QWORD *)(v31 + 40) = v66 & ~(0x8000000000000000 >> v68);
    v29 = (char *)(v67 + 16 * v68);
  }
  *(_BYTE *)v31 = 0;
LABEL_27:
  *(_DWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 96) = v29;
  v33 = *(unsigned int *)(a1 + 108);
  *(_DWORD *)(a1 + 112) = v10;
  *(_DWORD *)(a1 + 116) = v9;
  if (v33 <= v14)
  {
    v34 = v33;
    v35 = v33;
    goto LABEL_29;
  }
  if ((_DWORD)v14)
  {
    *v26 = 0;
    *(_QWORD *)(a1 + 104) = 0;
    WTF::fastFree((unint64_t)v29, a2, a3, a4, a5, a6, a7, a8);
    v112 = *(_DWORD *)(a1 + 104);
    v29 = *(char **)(a1 + 96);
  }
  else
  {
    v112 = 0;
  }
  if (v112 < v33)
  {
    if (!(v33 >> 29))
    {
      v113 = *(unsigned int *)(a1 + 108);
      v114 = (void *)WTF::fastMalloc((WTF *)(8 * v33));
      *(_DWORD *)(a1 + 104) = v33;
      *(_QWORD *)(a1 + 96) = v114;
      memcpy(v114, v29, 8 * v113);
      if (v29)
      {
        if (*(char **)(a1 + 96) == v29)
        {
          *(_QWORD *)(a1 + 96) = 0;
          *(_DWORD *)(a1 + 104) = 0;
        }
        WTF::fastFree((unint64_t)v29, v115, v116, v117, v118, v119, v120, v121);
        v29 = *v26;
      }
      else
      {
        v29 = *(char **)(a1 + 96);
      }
      goto LABEL_139;
    }
LABEL_146:
    __break(0xC471u);
    JUMPOUT(0x1982F0C88);
  }
LABEL_139:
  v34 = *(unsigned int *)(a1 + 108);
  v35 = *(_DWORD *)(a1 + 108);
LABEL_29:
  if (v35)
  {
    bzero(v29, 8 * (v34 - (v34 != 0)) + 8);
    v29 = *v26;
  }
  if (v35 != (_DWORD)v33)
    bzero(&v29[8 * v34], 8 * (v33 - v34));
  *(_DWORD *)(a1 + 108) = v33;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 132) = v14;
  if (v14 >> 27)
  {
    __break(0xC471u);
    JUMPOUT(0x1982F0C90);
  }
  v36 = (32 * (v14 & 0x3FFFFFFFFLL)) | 0xF;
  v37 = *(_QWORD *)(StatusReg + 752);
  if (!v37)
    goto LABEL_38;
  if (v36 <= 0x1AF)
  {
    v38 = 46 * v14 + 7;
  }
  else if (v36 >> 5 > 0x138
         || (v38 = *((unsigned int *)&bmalloc_common_primitive_heap_support + 2 * v14 + 626),
             *(_DWORD *)(v37 + 8052) <= v38))
  {
LABEL_38:
    v39 = (void *)bmalloc_allocate_casual(32 * v14, 1);
    goto LABEL_43;
  }
  v40 = v37 + 8 * v38;
  v41 = v40 + 8064;
  *(_BYTE *)(v40 + 8064) = 1;
  v42 = *(unsigned int *)(v40 + 8080);
  if ((_DWORD)v42)
  {
    *(_DWORD *)(v41 + 16) = v42 - *(_DWORD *)(v41 + 20);
    v39 = (void *)(*(_QWORD *)(v41 + 8) - v42);
  }
  else
  {
    v69 = *(_QWORD *)(v41 + 40);
    v70 = *(_QWORD *)(v41 + 24);
    if (!v69)
    {
      if (*(_BYTE *)(v41 + 5) == 6)
      {
        v90 = *(unsigned int *)(v41 + 32);
        v91 = *(_DWORD *)(v41 + 36);
        if (v90 < v91)
        {
          *(_QWORD *)(v41 + 8 * v90 + 56) = 0;
          v92 = (unint64_t *)(8 * v38 + 8 * v90 + v37 + 8128);
          v93 = v91 - 1 - v90;
          while (v93)
          {
            v70 += 1024;
            v95 = *v92++;
            v94 = v95;
            LODWORD(v90) = v90 + 1;
            --v93;
            if (v95)
            {
              v69 = __rbit64(v94);
              *(_DWORD *)(v41 + 32) = v90;
              *(_QWORD *)(v41 + 24) = v70;
              goto LABEL_75;
            }
          }
          *(_DWORD *)(v41 + 32) = v91;
        }
      }
      *(_BYTE *)v41 = 0;
      goto LABEL_38;
    }
LABEL_75:
    v71 = __clz(v69);
    *(_QWORD *)(v41 + 40) = v69 & ~(0x8000000000000000 >> v71);
    v39 = (void *)(v70 + 16 * v71);
  }
  *(_BYTE *)v41 = 0;
LABEL_43:
  *(_DWORD *)(a1 + 128) = v14;
  *(_QWORD *)(a1 + 120) = v39;
  bzero(v39, 32 * *(unsigned int *)(a1 + 132));
  *(_DWORD *)(a1 + 136) = v10;
  *(_DWORD *)(a1 + 140) = v9;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 156) = v14;
  v43 = *(_QWORD *)(StatusReg + 752);
  if (!v43)
  {
LABEL_47:
    v45 = (void *)bmalloc_allocate_casual(32 * v14, 1);
    goto LABEL_52;
  }
  if (v36 <= 0x1AF)
  {
    v44 = 46 * v14 + 7;
  }
  else
  {
    if (v36 >> 5 > 0x138)
      goto LABEL_47;
    v44 = *((unsigned int *)&bmalloc_common_primitive_heap_support + 2 * v14 + 626);
    if (*(_DWORD *)(v43 + 8052) <= v44)
      goto LABEL_47;
  }
  v46 = v43 + 8 * v44;
  v47 = v46 + 8064;
  *(_BYTE *)(v46 + 8064) = 1;
  v48 = *(unsigned int *)(v46 + 8080);
  if ((_DWORD)v48)
  {
    *(_DWORD *)(v47 + 16) = v48 - *(_DWORD *)(v47 + 20);
    v45 = (void *)(*(_QWORD *)(v47 + 8) - v48);
  }
  else
  {
    v72 = *(_QWORD *)(v47 + 40);
    v73 = *(_QWORD *)(v47 + 24);
    if (!v72)
    {
      if (*(_BYTE *)(v47 + 5) == 6)
      {
        v96 = *(unsigned int *)(v47 + 32);
        v97 = *(_DWORD *)(v47 + 36);
        if (v96 < v97)
        {
          *(_QWORD *)(v47 + 8 * v96 + 56) = 0;
          v98 = (unint64_t *)(8 * v44 + 8 * v96 + v43 + 8128);
          v99 = v97 - 1 - v96;
          while (v99)
          {
            v73 += 1024;
            v101 = *v98++;
            v100 = v101;
            LODWORD(v96) = v96 + 1;
            --v99;
            if (v101)
            {
              v72 = __rbit64(v100);
              *(_DWORD *)(v47 + 32) = v96;
              *(_QWORD *)(v47 + 24) = v73;
              goto LABEL_77;
            }
          }
          *(_DWORD *)(v47 + 32) = v97;
        }
      }
      *(_BYTE *)v47 = 0;
      goto LABEL_47;
    }
LABEL_77:
    v74 = __clz(v72);
    *(_QWORD *)(v47 + 40) = v72 & ~(0x8000000000000000 >> v74);
    v45 = (void *)(v73 + 16 * v74);
  }
  *(_BYTE *)v47 = 0;
LABEL_52:
  *(_DWORD *)(a1 + 152) = v14;
  *(_QWORD *)(a1 + 144) = v45;
  bzero(v45, 32 * *(unsigned int *)(a1 + 156));
  *(_DWORD *)(a1 + 160) = v10;
  *(_DWORD *)(a1 + 164) = v9;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 180) = v14;
  v49 = *(_QWORD *)(StatusReg + 752);
  if (v49)
  {
    if (v36 <= 0x1AF)
    {
      v50 = 46 * v14 + 7;
    }
    else
    {
      if (v36 >> 5 > 0x138)
        goto LABEL_56;
      v50 = *((unsigned int *)&bmalloc_common_primitive_heap_support + 2 * v14 + 626);
      if (*(_DWORD *)(v49 + 8052) <= v50)
        goto LABEL_56;
    }
    v52 = v49 + 8 * v50;
    v53 = v52 + 8064;
    *(_BYTE *)(v52 + 8064) = 1;
    v54 = *(unsigned int *)(v52 + 8080);
    if ((_DWORD)v54)
    {
      *(_DWORD *)(v53 + 16) = v54 - *(_DWORD *)(v53 + 20);
      v51 = *(_QWORD *)(v53 + 8) - v54;
    }
    else
    {
      v75 = *(_QWORD *)(v53 + 40);
      v76 = *(_QWORD *)(v53 + 24);
      if (!v75)
      {
        if (*(_BYTE *)(v53 + 5) == 6)
        {
          v102 = *(unsigned int *)(v53 + 32);
          v103 = *(_DWORD *)(v53 + 36);
          if (v102 < v103)
          {
            *(_QWORD *)(v53 + 8 * v102 + 56) = 0;
            v104 = (unint64_t *)(8 * v50 + 8 * v102 + v49 + 8128);
            v105 = v103 - 1 - v102;
            while (v105)
            {
              v76 += 1024;
              v107 = *v104++;
              v106 = v107;
              LODWORD(v102) = v102 + 1;
              --v105;
              if (v107)
              {
                v75 = __rbit64(v106);
                *(_DWORD *)(v53 + 32) = v102;
                *(_QWORD *)(v53 + 24) = v76;
                goto LABEL_79;
              }
            }
            *(_DWORD *)(v53 + 32) = v103;
          }
        }
        *(_BYTE *)v53 = 0;
        goto LABEL_56;
      }
LABEL_79:
      v77 = __clz(v75);
      *(_QWORD *)(v53 + 40) = v75 & ~(0x8000000000000000 >> v77);
      v51 = v76 + 16 * v77;
    }
    *(_BYTE *)v53 = 0;
    goto LABEL_61;
  }
LABEL_56:
  v51 = bmalloc_allocate_casual(32 * v14, 1);
LABEL_61:
  *(_DWORD *)(a1 + 176) = v14;
  *(_QWORD *)(a1 + 168) = v51;
  v55 = *(unsigned int *)(a1 + 180);
  if ((_DWORD)v55)
  {
    v56 = (v55 - 1) & 0x7FFFFFFFFFFFFFFLL;
    v57 = (_OWORD *)v51;
    if (v56 < 3)
      goto LABEL_63;
    v60 = v56 + 1;
    v57 = (_OWORD *)(v51 + 32 * (v60 & 0xFFFFFFFFFFFFFFCLL));
    v61 = (_OWORD *)(v51 + 64);
    v62 = v60 & 0xFFFFFFFFFFFFFFCLL;
    do
    {
      *(v61 - 2) = xmmword_199154D60;
      *(v61 - 1) = xmmword_199123960;
      *(v61 - 4) = xmmword_199154D60;
      *(v61 - 3) = xmmword_199123960;
      v61[2] = xmmword_199154D60;
      v61[3] = xmmword_199123960;
      *v61 = xmmword_199154D60;
      v61[1] = xmmword_199123960;
      v61 += 8;
      v62 -= 4;
    }
    while (v62);
    if (v60 != (v60 & 0xFFFFFFFFFFFFFFCLL))
    {
LABEL_63:
      v58 = (_OWORD *)(v51 + 32 * v55);
      do
      {
        *v57 = xmmword_199154D60;
        v57[1] = xmmword_199123960;
        v57 += 2;
      }
      while (v57 != v58);
    }
  }
LABEL_65:
  *(_DWORD *)(a1 + 184) = v10;
  *(_DWORD *)(a1 + 188) = v9;
  *(float *)(a1 + 192) = a9;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = a1 + 224;
  *(_QWORD *)(a1 + 216) = 8;
  return a1;
}

void JSC::DFG::BasicBlock::~BasicBlock(JSC::DFG::BasicBlock *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::BasicBlock *v9;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  JSC::DFG::BasicBlock *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;

  v9 = (JSC::DFG::BasicBlock *)*((_QWORD *)this + 26);
  if ((JSC::DFG::BasicBlock *)((char *)this + 224) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 26) = 0;
    *((_DWORD *)this + 54) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v11)
  {
    v12 = *(unsigned int *)(v11 + 124);
    v13 = *(_QWORD *)(v11 + 112);
    if ((_DWORD)v12)
    {
      v41 = 40 * v12;
      v42 = (uint64_t *)(v13 + 8);
      do
      {
        v44 = *v42;
        v42 += 5;
        v43 = v44;
        if ((v44 & 1) != 0)
          WTF::fastFree(v43 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v41 -= 40;
      }
      while (v41);
      v13 = *(_QWORD *)(v11 + 112);
    }
    if (v13)
    {
      *(_QWORD *)(v11 + 112) = 0;
      *(_DWORD *)(v11 + 120) = 0;
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
    v14 = *(unsigned int *)(v11 + 108);
    v15 = *(_QWORD *)(v11 + 96);
    if ((_DWORD)v14)
    {
      v45 = 40 * v14;
      v46 = (uint64_t *)(v15 + 8);
      do
      {
        v48 = *v46;
        v46 += 5;
        v47 = v48;
        if ((v48 & 1) != 0)
          WTF::fastFree(v47 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v45 -= 40;
      }
      while (v45);
      v15 = *(_QWORD *)(v11 + 96);
    }
    if (v15)
    {
      *(_QWORD *)(v11 + 96) = 0;
      *(_DWORD *)(v11 + 104) = 0;
      WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
    }
    v16 = *(_QWORD *)(v11 + 80);
    if (v16)
    {
      *(_QWORD *)(v11 + 80) = 0;
      *(_DWORD *)(v11 + 88) = 0;
      WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
    }
    v17 = *(_QWORD *)(v11 + 64);
    if (v17)
    {
      *(_QWORD *)(v11 + 64) = 0;
      *(_DWORD *)(v11 + 72) = 0;
      WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
    }
    v18 = *(_QWORD *)(v11 + 56);
    if (v18)
      WTF::fastFree(v18 - 16, a2, a3, a4, a5, a6, a7, a8);
    v19 = *(_QWORD *)(v11 + 32);
    if (v19)
    {
      *(_QWORD *)(v11 + 32) = 0;
      *(_DWORD *)(v11 + 40) = 0;
      WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
    }
    v20 = *(_QWORD *)(v11 + 24);
    if (v20)
      WTF::fastFree(v20 - 16, a2, a3, a4, a5, a6, a7, a8);
    v21 = *(_QWORD *)v11;
    if (*(_QWORD *)v11)
    {
      *(_QWORD *)v11 = 0;
      *(_DWORD *)(v11 + 8) = 0;
      WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v22 = *((unsigned int *)this + 45);
  v23 = *((_QWORD *)this + 21);
  if ((_DWORD)v22)
  {
    v24 = 32 * v22;
    do
    {
      if ((*(_QWORD *)v23 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v23 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v23 += 32;
      v24 -= 32;
    }
    while (v24);
    v23 = *((_QWORD *)this + 21);
  }
  if (v23)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    v25 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v25)
    {
      pas_try_deallocate_slow_no_cache(v23, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_38;
    }
    if (!(v23 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v23 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v23)) & 1) != 0)
    {
      goto LABEL_36;
    }
    if (v23 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v23 >> 24)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v23 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v23) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
      {
LABEL_36:
        v26 = *(unsigned int *)(v25 + 8000);
        if (v26 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v25, v23, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v25 + 8 * v26) = v23 | 0x5000000000000;
          *(_DWORD *)(v25 + 8000) = v26 + 1;
        }
        goto LABEL_38;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v25, v23, 1, a4, a5, a6, a7, a8);
  }
LABEL_38:
  v27 = *((unsigned int *)this + 39);
  v28 = *((_QWORD *)this + 18);
  if ((_DWORD)v27)
  {
    v29 = 32 * v27;
    do
    {
      if ((*(_QWORD *)v28 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v28 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v28 += 32;
      v29 -= 32;
    }
    while (v29);
    v28 = *((_QWORD *)this + 18);
  }
  if (v28)
  {
    *((_QWORD *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    v30 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v30)
    {
      pas_try_deallocate_slow_no_cache(v28, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_50;
    }
    if (!(v28 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v28 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v28)) & 1) != 0)
    {
      goto LABEL_48;
    }
    if (v28 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v28 >> 24)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v28 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v28) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
      {
LABEL_48:
        v31 = *(unsigned int *)(v30 + 8000);
        if (v31 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v30, v28, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v30 + 8 * v31) = v28 | 0x5000000000000;
          *(_DWORD *)(v30 + 8000) = v31 + 1;
        }
        goto LABEL_50;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v30, v28, 1, a4, a5, a6, a7, a8);
  }
LABEL_50:
  v32 = *((unsigned int *)this + 33);
  v33 = *((_QWORD *)this + 15);
  if ((_DWORD)v32)
  {
    v34 = 32 * v32;
    do
    {
      if ((*(_QWORD *)v33 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v33 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v33 += 32;
      v34 -= 32;
    }
    while (v34);
    v33 = *((_QWORD *)this + 15);
  }
  if (v33)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    v35 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v35)
    {
      pas_try_deallocate_slow_no_cache(v33, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_62;
    }
    if (!(v33 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v33 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v33)) & 1) != 0)
    {
      goto LABEL_60;
    }
    if (v33 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v33 >> 24)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v33 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v33) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
      {
LABEL_60:
        v36 = *(unsigned int *)(v35 + 8000);
        if (v36 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v35, v33, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v35 + 8 * v36) = v33 | 0x5000000000000;
          *(_DWORD *)(v35 + 8000) = v36 + 1;
        }
        goto LABEL_62;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v35, v33, 1, a4, a5, a6, a7, a8);
  }
LABEL_62:
  v37 = *((_QWORD *)this + 12);
  if (v37)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v37, a2, a3, a4, a5, a6, a7, a8);
  }
  v38 = *((_QWORD *)this + 9);
  if (v38)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v38, a2, a3, a4, a5, a6, a7, a8);
  }
  v39 = (JSC::DFG::BasicBlock *)*((_QWORD *)this + 5);
  if ((JSC::DFG::BasicBlock *)((char *)this + 56) != v39 && v39)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree((unint64_t)v39, a2, a3, a4, a5, a6, a7, a8);
  }
  v40 = *((_QWORD *)this + 3);
  if (v40)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v40, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::DFG::BasicBlock::ensureLocals(JSC::DFG::BasicBlock *this, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;

  v3 = a2;
  *(_QWORD *)&v30 = 0;
  JSC::Operands<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::ensureLocals((uint64_t)this + 72, a2, &v30);
  *(_QWORD *)&v30 = 0;
  JSC::Operands<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::ensureLocals((uint64_t)this + 96, v3, &v30);
  v30 = 0u;
  v31 = 0u;
  JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::ensureLocals((uint64_t)this + 120, (char *)v3, (uint64_t)&v30, v4, v5, v6, v7, v8);
  if ((v30 & 1) != 0)
    WTF::fastFree(v30 & 0xFFFFFFFFFFFFFFFCLL, v9, v10, v11, v12, v13, v14, v15);
  v30 = 0u;
  v31 = 0u;
  JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::ensureLocals((uint64_t)this + 144, (char *)v3, (uint64_t)&v30, v11, v12, v13, v14, v15);
  if ((v30 & 1) != 0)
    WTF::fastFree(v30 & 0xFFFFFFFFFFFFFFFCLL, v16, v17, v18, v19, v20, v21, v22);
  v30 = xmmword_199154D60;
  v31 = xmmword_199123960;
  JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::ensureLocals((uint64_t)this + 168, (char *)v3, (uint64_t)&v30, v18, v19, v20, v21, v22);
  if ((v30 & 1) != 0)
    WTF::fastFree(v30 & 0xFFFFFFFFFFFFFFFCLL, v23, v24, v25, v26, v27, v28, v29);
}

void JSC::Operands<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::ensureLocals(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *casual;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;

  v3 = *(unsigned int *)(a1 + 20);
  if (a2 <= v3)
    return;
  v7 = *(unsigned int *)(a1 + 12);
  v8 = *(unsigned int *)(a1 + 16) + v3;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = a2 + v7 - v3;
  if (v10 > v9)
  {
    v11 = v9 + (v9 >> 2);
    if (v11 >= 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    if (v12 <= v10)
      v13 = a2 + v7 - v3;
    else
      v13 = v12;
    if (v13 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v14 = *(const void **)a1;
    v15 = 8 * v13;
    v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v16)
      goto LABEL_14;
    v17 = (unint64_t)(v15 + 15) >> 4;
    if (v13 <= 0x34)
    {
      v18 = 23 * v17 + 7;
    }
    else if (v13 > 0x4E2
           || (v18 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v17 + 626),
               *(_DWORD *)(v16 + 8052) <= v18))
    {
LABEL_14:
      casual = (void *)bmalloc_allocate_casual(v15, 1);
      goto LABEL_19;
    }
    v20 = v16 + 8 * v18;
    v21 = v20 + 8064;
    *(_BYTE *)(v20 + 8064) = 1;
    v22 = *(unsigned int *)(v20 + 8080);
    if ((_DWORD)v22)
    {
      *(_DWORD *)(v21 + 16) = v22 - *(_DWORD *)(v21 + 20);
      casual = (void *)(*(_QWORD *)(v21 + 8) - v22);
    }
    else
    {
      v32 = *(_QWORD *)(v21 + 40);
      v33 = *(_QWORD *)(v21 + 24);
      if (!v32)
      {
        if (*(_BYTE *)(v21 + 5) == 6)
        {
          v38 = *(unsigned int *)(v21 + 32);
          v39 = *(_DWORD *)(v21 + 36);
          if (v38 < v39)
          {
            *(_QWORD *)(v21 + 8 * v38 + 56) = 0;
            v40 = (unint64_t *)(8 * v18 + 8 * v38 + v16 + 8128);
            v41 = v39 - 1 - v38;
            while (v41)
            {
              v33 += 1024;
              v43 = *v40++;
              v42 = v43;
              LODWORD(v38) = v38 + 1;
              --v41;
              if (v43)
              {
                v32 = __rbit64(v42);
                *(_DWORD *)(v21 + 32) = v38;
                *(_QWORD *)(v21 + 24) = v33;
                goto LABEL_29;
              }
            }
            *(_DWORD *)(v21 + 32) = v39;
          }
        }
        *(_BYTE *)v21 = 0;
        goto LABEL_14;
      }
LABEL_29:
      v34 = __clz(v32);
      *(_QWORD *)(v21 + 40) = v32 & ~(0x8000000000000000 >> v34);
      casual = (void *)(v33 + 16 * v34);
    }
    *(_BYTE *)v21 = 0;
LABEL_19:
    *(_DWORD *)(a1 + 8) = v13;
    *(_QWORD *)a1 = casual;
    memcpy(casual, v14, 8 * v7);
    if (v14)
    {
      if (*(const void **)a1 == v14)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v14, v23, v24, v25, v26, v27, v28, v29);
    }
  }
  *(_DWORD *)(a1 + 12) = v10;
  if (v7 != v8)
  {
    if (v7 - v8 <= 1)
      v35 = 1;
    else
      v35 = v7 - v8;
    v36 = 8 * (~v8 + v7 + *(unsigned int *)(a1 + 16) + *(unsigned int *)(a1 + 20));
    v37 = 8 * (~v3 + a2 + v7);
    do
    {
      *(_QWORD *)(*(_QWORD *)a1 + v37) = *(_QWORD *)(*(_QWORD *)a1 + v36);
      v36 -= 8;
      v37 -= 8;
      --v35;
    }
    while (v35);
  }
  *(_DWORD *)(a1 + 20) = a2;
  v30 = a2 - v3;
  if (a2 != v3)
  {
    v31 = 8 * (v3 + *(unsigned int *)(a1 + 16));
    do
    {
      *(_QWORD *)(*(_QWORD *)a1 + v31) = *a3;
      v31 += 8;
      --v30;
    }
    while (v30);
  }
}

__n128 JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::ensureLocals(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t StatusReg;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t casual;
  __n128 result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;

  v8 = *(unsigned int *)(a1 + 20);
  if (v8 >= (unint64_t)a2)
    return result;
  v9 = a3;
  v10 = a2;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16) + v8;
  v14 = *(unsigned int *)(a1 + 8);
  v82 = v12 - v13;
  v15 = (unint64_t)&a2[v12 - v8];
  v16 = *(_QWORD *)a1;
  if (v15 <= v14)
    goto LABEL_40;
  v17 = v14 + (v14 >> 2);
  if (v17 >= 0x10)
    v18 = v17 + 1;
  else
    v18 = 16;
  if (v18 <= v15)
    v19 = (unint64_t)&a2[v12 - v8];
  else
    v19 = v18;
  if (v19 >> 27)
  {
    __break(0xC471u);
    JUMPOUT(0x1982F1A78);
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v21 = *(_QWORD *)(StatusReg + 752);
  if (!v21)
    goto LABEL_14;
  v22 = (32 * v19) | 0xF;
  if (v22 <= 0x1AF)
  {
    v23 = 46 * v19 + 7;
    goto LABEL_16;
  }
  if (v22 >> 5 <= 0x138)
  {
    v23 = *((unsigned int *)&bmalloc_common_primitive_heap_support + 2 * v19 + 626);
    if (*(_DWORD *)(v21 + 8052) > v23)
    {
LABEL_16:
      v28 = v21 + 8 * v23;
      v29 = v28 + 8064;
      *(_BYTE *)(v28 + 8064) = 1;
      v30 = *(unsigned int *)(v28 + 8080);
      if ((_DWORD)v30)
      {
        *(_DWORD *)(v29 + 16) = v30 - *(_DWORD *)(v29 + 20);
        v27 = *(_QWORD *)(v29 + 8) - v30;
      }
      else
      {
        v44 = StatusReg;
        v45 = *(_QWORD *)(v29 + 40);
        v46 = *(_QWORD *)(v29 + 24);
        if (!v45)
        {
          if (*(_BYTE *)(v29 + 5) == 6)
          {
            v65 = *(unsigned int *)(v29 + 32);
            v66 = *(_DWORD *)(v29 + 36);
            if (v65 < v66)
            {
              *(_QWORD *)(v29 + 8 * v65 + 56) = 0;
              v67 = (unint64_t *)(8 * v23 + 8 * v65 + v21 + 8128);
              v68 = v66 - 1 - v65;
              while (v68)
              {
                v46 += 1024;
                v70 = *v67++;
                v69 = v70;
                LODWORD(v65) = v65 + 1;
                --v68;
                if (v70)
                {
                  v45 = __rbit64(v69);
                  *(_DWORD *)(v29 + 32) = v65;
                  *(_QWORD *)(v29 + 24) = v46;
                  goto LABEL_53;
                }
              }
              *(_DWORD *)(v29 + 32) = v66;
            }
          }
          *(_BYTE *)v29 = 0;
          StatusReg = v44;
          goto LABEL_14;
        }
LABEL_53:
        v47 = __clz(v45);
        *(_QWORD *)(v29 + 40) = v45 & ~(0x8000000000000000 >> v47);
        v27 = v46 + 16 * v47;
        StatusReg = v44;
      }
      *(_BYTE *)v29 = 0;
      goto LABEL_19;
    }
  }
LABEL_14:
  v24 = StatusReg;
  casual = bmalloc_allocate_casual(32 * v19, 1);
  StatusReg = v24;
  v27 = casual;
LABEL_19:
  *(_DWORD *)(a1 + 8) = v19;
  *(_QWORD *)a1 = v27;
  if ((_DWORD)v12)
  {
    v85 = v9;
    v31 = v15;
    v32 = v10;
    v33 = v13;
    v34 = 32 * v12;
    v35 = v16;
    do
    {
      *(_QWORD *)v27 = 0;
      v36 = *(_QWORD *)v35;
      if ((*(_QWORD *)v35 & 1) == 0 || v36 == 4)
      {
        v37 = v36 & 0xFFFFFFFFFFFFFFFDLL;
        *(_QWORD *)v27 = v37;
      }
      else
      {
        v78 = StatusReg;
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v27, (_QWORD *)v35);
        StatusReg = v78;
        v37 = *(_QWORD *)v27;
      }
      v38 = v37 & 0xFFFFFFFFFFFFFFFDLL;
      v39 = v37 | 2;
      if ((*(_BYTE *)v35 & 2) == 0)
        v39 = v38;
      *(_QWORD *)v27 = v39;
      result = *(__n128 *)(v35 + 8);
      *(_QWORD *)(v27 + 24) = *(_QWORD *)(v35 + 24);
      *(__n128 *)(v27 + 8) = result;
      if ((*(_QWORD *)v35 & 1) != 0)
      {
        v79 = StatusReg;
        WTF::fastFree(*(_QWORD *)v35 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        StatusReg = v79;
      }
      v27 += 32;
      v35 += 32;
      v34 -= 32;
    }
    while (v34);
    v27 = *(_QWORD *)a1;
    v13 = v33;
    v10 = v32;
    v15 = v31;
    v9 = v85;
  }
  if (v16)
  {
    if (v27 == v16)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    v40 = *(_QWORD *)(StatusReg + 752);
    if (v40)
    {
      if (!(v16 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v16 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v16)) & 1) != 0)
      {
        goto LABEL_37;
      }
      if (v16 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v16 >> 24)
      {
        a4 = 0;
      }
      else
      {
        a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v16 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v16) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)a4 == 1)
        {
LABEL_37:
          v41 = *(unsigned int *)(v40 + 8000);
          if (v41 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v40, v16, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
          }
          else
          {
            *(_QWORD *)(v40 + 8 * v41) = v16 | 0x5000000000000;
            *(_DWORD *)(v40 + 8000) = v41 + 1;
          }
          goto LABEL_39;
        }
      }
      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v40, v16, 1, a4, a5, a6, a7, a8);
    }
    else
    {
      pas_try_deallocate_slow_no_cache(v16, (uint64_t)&bmalloc_heap_config, 1);
    }
LABEL_39:
    v16 = *(_QWORD *)a1;
    goto LABEL_40;
  }
  v16 = v27;
LABEL_40:
  if (v16)
    bzero((void *)(v16 + 32 * *(unsigned int *)(a1 + 12)), 32 * v15 - 32 * *(unsigned int *)(a1 + 12));
  *(_DWORD *)(a1 + 12) = v15;
  if (v12 != v13)
  {
    v48 = 0;
    v49 = v82;
    if (v82 <= 1)
      v49 = 1;
    v50 = -v49;
    v51 = 32 * ~v8;
    v52 = &v10[v12 + ~v8];
    v53 = ~v13 + v12;
    v54 = 32 * (_QWORD)v10 + 32 * v12;
    do
    {
      v55 = v53 + v48 + *(unsigned int *)(a1 + 16) + (unint64_t)*(unsigned int *)(a1 + 20);
      v56 = *(_QWORD *)a1;
      v57 = *(_QWORD *)a1 + 32 * v55;
      v58 = (uint64_t *)(*(_QWORD *)a1 + v54 + v51);
      v59 = *v58;
      if ((char *)v55 != &v52[v48])
      {
        if ((v59 & 1) != 0)
        {
          v84 = v52;
          v87 = v50;
          v81 = v53;
          WTF::fastFree(v59 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
          v53 = v81;
          v52 = v84;
          v50 = v87;
        }
        v60 = *(_QWORD *)v57;
        if ((*(_QWORD *)v57 & 1) == 0 || v60 == 4)
        {
          v61 = v60 & 0xFFFFFFFFFFFFFFFDLL;
          v59 = v60 | 2;
          if ((*(_BYTE *)v58 & 2) == 0)
            v59 = v61;
          *v58 = v59;
        }
        else
        {
          v83 = v52;
          v86 = v50;
          v80 = v53;
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v58, (_QWORD *)v57);
          v53 = v80;
          v52 = v83;
          v50 = v86;
          v59 = *v58;
        }
      }
      v62 = v59 & 0xFFFFFFFFFFFFFFFDLL;
      v63 = v59 | 2;
      if ((*(_BYTE *)v57 & 2) == 0)
        v63 = v62;
      *v58 = v63;
      v64 = v56 + v54 + v51;
      result = *(__n128 *)(v57 + 8);
      *(_QWORD *)(v64 + 24) = *(_QWORD *)(v57 + 24);
      *(__n128 *)(v64 + 8) = result;
      --v48;
      v51 -= 32;
    }
    while (v50 != v48);
  }
  *(_DWORD *)(a1 + 20) = (_DWORD)v10;
  result.n128_u64[0] = 0;
  v88 = 0u;
  v89 = 0u;
  if (*(_QWORD *)(v9 + 8) || *(_DWORD *)(v9 + 16))
    goto LABEL_93;
  v42 = *(_QWORD *)v9;
  if ((*(_QWORD *)v9 & 1) != 0)
  {
    if (v42 != 4)
    {
      if ((JSC::DFG::StructureAbstractValue::equalsSlow((uint64_t *)v9, (uint64_t *)&v88) & 1) == 0)
      {
        v42 = v88;
LABEL_91:
        if ((v42 & 1) != 0)
          WTF::fastFree(v42 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_93;
      }
      v43 = *((_QWORD *)&v89 + 1);
      v42 = v88;
LABEL_48:
      if (*(_QWORD *)(v9 + 24) == v43)
      {
        if ((v42 & 1) != 0)
          WTF::fastFree(v42 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        return result;
      }
      goto LABEL_91;
    }
  }
  else if (!v42)
  {
    v43 = 0;
    goto LABEL_48;
  }
LABEL_93:
  while (v10 != (char *)v8)
  {
    v71 = v8 + *(unsigned int *)(a1 + 16);
    v72 = *(_QWORD *)a1;
    v73 = (uint64_t *)(*(_QWORD *)a1 + 32 * v71);
    v74 = *v73;
    if (v73 != (uint64_t *)v9)
    {
      if ((v74 & 1) != 0)
        WTF::fastFree(v74 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v75 = *(_QWORD *)v9;
      if ((*(_QWORD *)v9 & 1) == 0 || v75 == 4)
      {
        if ((*(_BYTE *)v73 & 2) != 0)
          v74 = v75 | 2;
        else
          v74 = v75 & 0xFFFFFFFFFFFFFFFDLL;
        *v73 = v74;
      }
      else
      {
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v73, (_QWORD *)v9);
        v74 = *v73;
      }
    }
    if ((*(_BYTE *)v9 & 2) != 0)
      v76 = v74 | 2;
    else
      v76 = v74 & 0xFFFFFFFFFFFFFFFDLL;
    *v73 = v76;
    v77 = v72 + 32 * v71;
    result = *(__n128 *)(v9 + 8);
    *(_QWORD *)(v77 + 24) = *(_QWORD *)(v9 + 24);
    *(__n128 *)(v77 + 8) = result;
    ++v8;
  }
  return result;
}

void JSC::DFG::BasicBlock::ensureTmps(JSC::DFG::BasicBlock *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  const void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;

  v9 = a2;
  v10 = *((unsigned int *)this + 21);
  v11 = *((unsigned int *)this + 23) + (unint64_t)*((unsigned int *)this + 22);
  if (v10 - v11 < a2)
  {
    v12 = v11 + a2;
    v13 = *((unsigned int *)this + 20);
    if (v12 > v13)
    {
      v14 = v13 + (v13 >> 2);
      if (v14 >= 0x10)
        v15 = v14 + 1;
      else
        v15 = 16;
      if (v15 <= v12)
        v16 = v12;
      else
        v16 = v15;
      if (v16 >> 29)
        goto LABEL_38;
      v17 = (const void *)*((_QWORD *)this + 9);
      v18 = (void *)WTF::fastMalloc((WTF *)(8 * v16));
      *((_DWORD *)this + 20) = v16;
      *((_QWORD *)this + 9) = v18;
      memcpy(v18, v17, 8 * v10);
      if (v17)
      {
        if (*((const void **)this + 9) == v17)
        {
          *((_QWORD *)this + 9) = 0;
          *((_DWORD *)this + 20) = 0;
        }
        WTF::fastFree((unint64_t)v17, v19, v20, a4, a5, a6, a7, a8);
      }
    }
    for (*((_DWORD *)this + 21) = v12; v10 < v12; ++v10)
      *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v10) = 0;
  }
  v21 = *((unsigned int *)this + 27);
  v22 = *((unsigned int *)this + 29) + (unint64_t)*((unsigned int *)this + 28);
  if (v21 - v22 >= v9)
    goto LABEL_31;
  v23 = (char *)(v22 + v9);
  v24 = *((unsigned int *)this + 26);
  if ((unint64_t)v23 > v24)
  {
    v25 = v24 + (v24 >> 2);
    if (v25 >= 0x10)
      v26 = v25 + 1;
    else
      v26 = 16;
    if (v26 <= (unint64_t)v23)
      v27 = (unint64_t)v23;
    else
      v27 = v26;
    if (!(v27 >> 29))
    {
      v28 = (const void *)*((_QWORD *)this + 12);
      v29 = (void *)WTF::fastMalloc((WTF *)(8 * v27));
      *((_DWORD *)this + 26) = v27;
      *((_QWORD *)this + 12) = v29;
      memcpy(v29, v28, 8 * v21);
      if (v28)
      {
        if (*((const void **)this + 12) == v28)
        {
          *((_QWORD *)this + 12) = 0;
          *((_DWORD *)this + 26) = 0;
        }
        WTF::fastFree((unint64_t)v28, v30, v31, a4, a5, a6, a7, a8);
      }
      goto LABEL_29;
    }
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x1982F1D5CLL);
  }
LABEL_29:
  for (*((_DWORD *)this + 27) = (_DWORD)v23; v21 < (unint64_t)v23; ++v21)
    *(_QWORD *)(*((_QWORD *)this + 12) + 8 * v21) = 0;
LABEL_31:
  v53 = 0u;
  v54 = 0u;
  JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::ensureTmps((uint64_t)this + 120, (char *)v9, (uint64_t)&v53, a4, a5, a6, a7, a8);
  if ((v53 & 1) != 0)
    WTF::fastFree(v53 & 0xFFFFFFFFFFFFFFFCLL, v32, v33, v34, v35, v36, v37, v38);
  v53 = 0u;
  v54 = 0u;
  JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::ensureTmps((uint64_t)this + 144, (char *)v9, (uint64_t)&v53, v34, v35, v36, v37, v38);
  if ((v53 & 1) != 0)
    WTF::fastFree(v53 & 0xFFFFFFFFFFFFFFFCLL, v39, v40, v41, v42, v43, v44, v45);
  v53 = xmmword_199154D60;
  v54 = xmmword_199123960;
  JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::ensureTmps((uint64_t)this + 168, (char *)v9, (uint64_t)&v53, v41, v42, v43, v44, v45);
  if ((v53 & 1) != 0)
    WTF::fastFree(v53 & 0xFFFFFFFFFFFFFFFCLL, v46, v47, v48, v49, v50, v51, v52);
}

__n128 JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::ensureTmps(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __n128 result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;

  v8 = *(unsigned int *)(a1 + 12);
  v9 = *(unsigned int *)(a1 + 20) + (unint64_t)*(unsigned int *)(a1 + 16);
  if (v8 - v9 >= (unint64_t)a2)
    return result;
  v12 = (unint64_t)&a2[v9];
  v13 = *(unsigned int *)(a1 + 8);
  v14 = *(_QWORD *)a1;
  v15 = 32 * v8;
  if (v12 > v13)
  {
    v16 = v13 + (v13 >> 2);
    if (v16 >= 0x10)
      v17 = v16 + 1;
    else
      v17 = 16;
    if (v17 <= v12)
      v18 = v12;
    else
      v18 = v17;
    if (v18 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x1982F1F68);
    }
    v19 = WTF::fastMalloc((WTF *)(32 * v18));
    *(_DWORD *)(a1 + 8) = v18;
    *(_QWORD *)a1 = v19;
    if ((_DWORD)v8)
    {
      v21 = 32 * v8;
      v22 = v14;
      do
      {
        *(_QWORD *)v19 = 0;
        v23 = *(_QWORD *)v22;
        if ((*(_QWORD *)v22 & 1) == 0 || v23 == 4)
        {
          v24 = v23 & 0xFFFFFFFFFFFFFFFDLL;
          *(_QWORD *)v19 = v24;
        }
        else
        {
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v19, (_QWORD *)v22);
          v24 = *(_QWORD *)v19;
        }
        v25 = v24 & 0xFFFFFFFFFFFFFFFDLL;
        v26 = v24 | 2;
        if ((*(_BYTE *)v22 & 2) == 0)
          v26 = v25;
        *(_QWORD *)v19 = v26;
        result = *(__n128 *)(v22 + 8);
        *(_QWORD *)(v19 + 24) = *(_QWORD *)(v22 + 24);
        *(__n128 *)(v19 + 8) = result;
        if ((*(_QWORD *)v22 & 1) != 0)
          WTF::fastFree(*(_QWORD *)v22 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v19 += 32;
        v22 += 32;
        v21 -= 32;
      }
      while (v21);
      v19 = *(_QWORD *)a1;
    }
    if (v14)
    {
      if (v19 == v14)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      v14 = *(_QWORD *)a1;
    }
    else
    {
      v14 = v19;
    }
  }
  if (v14)
    bzero((void *)(v14 + 32 * *(unsigned int *)(a1 + 12)), 32 * v12 - 32 * *(unsigned int *)(a1 + 12));
  *(_DWORD *)(a1 + 12) = v12;
  result.n128_u64[0] = 0;
  v37 = 0u;
  v38 = 0u;
  v27 = 1;
  if (!*(_QWORD *)(a3 + 8) && !*(_DWORD *)(a3 + 16))
  {
    v28 = *(_QWORD *)a3;
    if ((*(_QWORD *)a3 & 1) != 0)
    {
      if (v28 == 4 || !JSC::DFG::StructureAbstractValue::equalsSlow((uint64_t *)a3, (uint64_t *)&v37))
        goto LABEL_33;
      v28 = *((_QWORD *)&v38 + 1);
      goto LABEL_32;
    }
    if (!v28)
LABEL_32:
      v27 = *(_QWORD *)(a3 + 24) != v28;
  }
LABEL_33:
  if ((v37 & 1) != 0)
    WTF::fastFree(v37 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
  v29 = !v27;
  if (v12 <= v8)
    v29 = 1;
  if ((v29 & 1) == 0)
  {
    do
    {
      v30 = *(_QWORD *)a1;
      v31 = (uint64_t *)(*(_QWORD *)a1 + v15);
      v32 = *v31;
      if (v31 != (uint64_t *)a3)
      {
        if ((v32 & 1) != 0)
          WTF::fastFree(v32 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v33 = *(_QWORD *)a3;
        if ((*(_QWORD *)a3 & 1) == 0 || v33 == 4)
        {
          v34 = v33 & 0xFFFFFFFFFFFFFFFDLL;
          v32 = v33 | 2;
          if ((*(_BYTE *)v31 & 2) == 0)
            v32 = v34;
          *v31 = v32;
        }
        else
        {
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v31, (_QWORD *)a3);
          v32 = *v31;
        }
      }
      if ((*(_BYTE *)a3 & 2) != 0)
        v35 = v32 | 2;
      else
        v35 = v32 & 0xFFFFFFFFFFFFFFFDLL;
      v36 = v30 + v15;
      *(_QWORD *)v36 = v35;
      result = *(__n128 *)(a3 + 8);
      *(_QWORD *)(v36 + 24) = *(_QWORD *)(a3 + 24);
      *(__n128 *)(v36 + 8) = result;
      ++v8;
      v15 += 32;
    }
    while (v8 < v12);
  }
  return result;
}

_QWORD *JSC::DFG::BasicBlock::append(JSC::DFG::BasicBlock *this, JSC::DFG::Node *a2)
{
  _QWORD *result;
  uint64_t v4;
  JSC::DFG::Node *v5;

  v5 = a2;
  result = (_QWORD *)((char *)this + 208);
  v4 = *((unsigned int *)this + 55);
  if ((_DWORD)v4 == *((_DWORD *)this + 54))
  {
    result = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v4 + 1, (unint64_t)&v5);
    v4 = *((unsigned int *)this + 55);
    *(_QWORD *)(*((_QWORD *)this + 26) + 8 * v4) = *result;
  }
  else
  {
    *(_QWORD *)(*result + 8 * v4) = a2;
  }
  *((_DWORD *)this + 55) = v4 + 1;
  return result;
}

JSC::DFG::BasicBlock::SSAData *JSC::DFG::BasicBlock::SSAData::SSAData(JSC::DFG::BasicBlock::SSAData *this, JSC::DFG::BasicBlock *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v10 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v10)
  {
    if (v10 >> 28)
      goto LABEL_16;
    v11 = WTF::fastMalloc((WTF *)(16 * v10));
    v12 = v11;
    do
    {
      *(_QWORD *)v12 = 0;
      *(_BYTE *)(v12 + 8) = 0;
      *(_DWORD *)(v12 + 12) = 0x3FFFFFFF;
      v12 += 16;
    }
    while (v12 != v11 + 16 * v10);
    v13 = *(_QWORD *)this;
    v14 = (uint64_t *)((char *)a2 + 88);
    v15 = *((_QWORD *)a2 + 11);
    if (*(_QWORD *)this)
    {
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 2) = 0;
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  else
  {
    v11 = 0;
    v14 = (uint64_t *)((char *)a2 + 88);
    v15 = *((_QWORD *)a2 + 11);
  }
  *(_QWORD *)this = v11;
  *((_DWORD *)this + 2) = v10;
  *((_DWORD *)this + 3) = v10;
  *((_QWORD *)this + 2) = v15;
  v16 = *((unsigned int *)a2 + 21);
  if (!(_DWORD)v16)
  {
    v17 = 0;
    goto LABEL_11;
  }
  if (v16 >> 28)
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x1982F21B8);
  }
  v17 = WTF::fastMalloc((WTF *)(16 * v16));
  v18 = v17;
  do
  {
    *(_QWORD *)v18 = 0;
    *(_BYTE *)(v18 + 8) = 0;
    *(_DWORD *)(v18 + 12) = 0x3FFFFFFF;
    v18 += 16;
  }
  while (v18 != v17 + 16 * v16);
LABEL_11:
  v19 = *v14;
  v20 = *((_QWORD *)this + 4);
  if (v20)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
  }
  *((_QWORD *)this + 4) = v17;
  *((_DWORD *)this + 10) = v16;
  *((_DWORD *)this + 11) = v16;
  *((_QWORD *)this + 6) = v19;
  return this;
}

void JSC::DFG::BasicBlock::SSAData::~SSAData(JSC::DFG::BasicBlock::SSAData *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v9 = *((unsigned int *)this + 31);
  v10 = *((_QWORD *)this + 14);
  if ((_DWORD)v9)
  {
    v19 = 40 * v9;
    v20 = (uint64_t *)(v10 + 8);
    do
    {
      v22 = *v20;
      v20 += 5;
      v21 = v22;
      if ((v22 & 1) != 0)
        WTF::fastFree(v21 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v19 -= 40;
    }
    while (v19);
    v10 = *((_QWORD *)this + 14);
  }
  if (v10)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((unsigned int *)this + 27);
  v12 = *((_QWORD *)this + 12);
  if ((_DWORD)v11)
  {
    v23 = 40 * v11;
    v24 = (uint64_t *)(v12 + 8);
    do
    {
      v26 = *v24;
      v24 += 5;
      v25 = v26;
      if ((v26 & 1) != 0)
        WTF::fastFree(v25 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v23 -= 40;
    }
    while (v23);
    v12 = *((_QWORD *)this + 12);
  }
  if (v12)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = *((_QWORD *)this + 10);
  if (v13)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)this + 8);
  if (v14)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *((_QWORD *)this + 7);
  if (v15)
    WTF::fastFree(v15 - 16, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 4);
  if (v16)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = *((_QWORD *)this + 3);
  if (v17)
    WTF::fastFree(v17 - 16, a2, a3, a4, a5, a6, a7, a8);
  v18 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
  }
}

double JSC::DFG::BlockInsertionSet::BlockInsertionSet(_QWORD *a1, uint64_t a2)
{
  double result;

  *a1 = a2;
  a1[1] = a1 + 3;
  *(_QWORD *)&result = 8;
  a1[2] = 8;
  return result;
}

void JSC::DFG::BlockInsertionSet::~BlockInsertionSet(JSC::DFG::BlockInsertionSet *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::DFG::BlockInsertionSet *v10;
  uint64_t v12;
  WTF **v13;
  WTF *v14;

  v9 = *((unsigned int *)this + 5);
  if ((_DWORD)v9)
  {
    v12 = 16 * v9;
    v13 = (WTF **)(*((_QWORD *)this + 1) + 8);
    do
    {
      v14 = *v13;
      *v13 = 0;
      if (v14)
        WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v14, a2, a3, a4, a5, a6, a7, a8);
      v13 += 2;
      v12 -= 16;
    }
    while (v12);
  }
  v10 = (JSC::DFG::BlockInsertionSet *)*((_QWORD *)this + 1);
  if ((JSC::DFG::BlockInsertionSet *)((char *)this + 24) != v10 && v10 != 0)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
}

WTF *JSC::DFG::BlockInsertionSet::insert(JSC::DFG::BlockInsertionSet *this, uint64_t a2, float a3)
{
  WTF *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  _DWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  WTF *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  WTF *v28;

  result = (WTF *)WTF::fastMalloc((WTF *)0x120);
  if (*(_DWORD *)(*(_QWORD *)this + 60))
  {
    v10 = result;
    v11 = **(_DWORD ***)(*(_QWORD *)this + 48);
    v12 = JSC::DFG::BasicBlock::BasicBlock((uint64_t)result, (void *)0xFFFFFFFFLL, v11[22], v11[23], (v11[21] - (v11[23] + v11[22])), v7, v8, v9, a3);
    *(_BYTE *)(v12 + 21) = 1;
    v27 = a2;
    v28 = (WTF *)v12;
    v20 = *((unsigned int *)this + 5);
    if ((_DWORD)v20 == *((_DWORD *)this + 4))
    {
      v23 = (_QWORD *)WTF::Vector<WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 8, v20 + 1, (unint64_t)&v27, v15, v16, v17, v18, v19);
      v24 = *((unsigned int *)this + 5);
      v25 = *((_QWORD *)this + 1);
      *(_QWORD *)(v25 + 16 * v24) = *v23;
      v26 = (_DWORD *)v23[1];
      if (v26)
        ++*v26;
      *(_QWORD *)(v25 + 16 * v24 + 8) = v26;
      v22 = v28;
      *((_DWORD *)this + 5) = v24 + 1;
      v28 = 0;
      if (!v22)
        return v10;
    }
    else
    {
      v21 = (_QWORD *)(*((_QWORD *)this + 1) + 16 * v20);
      *v21 = a2;
      ++*(_DWORD *)v10;
      v21[1] = v10;
      *((_DWORD *)this + 5) = v20 + 1;
      v28 = 0;
      v22 = v10;
    }
    WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v22, v13, v14, v15, v16, v17, v18, v19);
    return v10;
  }
  __break(0xC471u);
  return result;
}

BOOL JSC::DFG::BlockInsertionSet::execute(unint64_t **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  WTF *v30;
  int v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  int v45;
  BOOL v46;
  BOOL v47;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  _QWORD *v54;
  char v55;

  v8 = *((unsigned int *)this + 5);
  if ((_DWORD)v8)
  {
    v11 = (unsigned int *)(this + 1);
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *,false>(this[1], &this[1][2 * v8], (uint64_t)&v55, 126 - 2 * __clz(v8), 1, a6, a7, a8);
    WTF::executeInsertions<WTF::Vector<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)(*this + 6), v11, v12, v13, v14, v15, v16, v17);
    v25 = *this;
    LODWORD(v26) = *((_DWORD *)*this + 15);
    if ((_DWORD)v26)
    {
      v27 = 0;
      v28 = 0;
      do
      {
        v29 = v25[6];
        v30 = *(WTF **)(v29 + 8 * v27);
        if (v30)
        {
          v31 = (*(_DWORD *)v30)++;
          if (v26 <= v28)
          {
LABEL_39:
            __break(0xC471u);
            JUMPOUT(0x1982F26A0);
          }
          *(_DWORD *)v30 = v31 + 2;
          v32 = *(WTF **)(v29 + 8 * v28);
          *(_QWORD *)(v29 + 8 * v28) = v30;
          if (v32)
            WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v32, v18, v19, v20, v21, v22, v23, v24);
          ++v28;
          WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v30, v18, v19, v20, v21, v22, v23, v24);
          v25 = *this;
        }
        ++v27;
        v26 = *((unsigned int *)v25 + 15);
      }
      while (v27 < v26);
    }
    else
    {
      v28 = 0;
      v26 = 0;
    }
    WTF::VectorDestructor<true,WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>>::destruct((unint64_t *)(v25[6] + 8 * v28), (unint64_t *)(v25[6] + 8 * v26), v19, v20, v21, v22, v23, v24);
    *((_DWORD *)v25 + 15) = v28;
    v40 = *this;
    v41 = *((unsigned int *)*this + 15);
    if ((_DWORD)v41)
    {
      v42 = 0;
      v43 = v40[6];
      do
      {
        *(_DWORD *)(*(_QWORD *)(v43 + 8 * v42) + 8) = v42;
        ++v42;
      }
      while (v41 != v42);
    }
    JSC::DFG::Graph::invalidateCFG((JSC::DFG::Graph *)v40, v33, v34, v35, v36, v37, v38, v39);
    v44 = *this;
    v45 = *((_DWORD *)v44 + 236);
    if (v45)
      v46 = v45 == 2;
    else
      v46 = 1;
    if (!v46)
    {
      if ((_BYTE)qword_1ECF4C32A)
        v47 = 0;
      else
        v47 = byte_1ECF4C323 == 0;
      if (!v47 || BYTE2(qword_1ECF4C32A) != 0)
        WTF::dataLog<char [16]>("Dethreading DFG graph.\n");
      v49 = *((_DWORD *)v44 + 15);
      while (v49)
      {
        if (*((_DWORD *)v44 + 15) <= --v49)
          goto LABEL_39;
        v50 = *(_QWORD *)(v44[6] + 8 * v49);
        if (v50)
        {
          v51 = *(_DWORD *)(v50 + 36);
          if (v51)
          {
            v52 = v51 - 1;
            v53 = 8 * v52;
            do
            {
              if (*(_DWORD *)(v50 + 36) <= v52)
              {
                __break(0xC471u);
                JUMPOUT(0x1982F26A8);
              }
              v54 = *(_QWORD **)(*(_QWORD *)(v50 + 24) + v53);
              v54[3] = 0;
              v54[4] = 0;
              v54[5] = 0;
              v53 -= 8;
              --v52;
            }
            while (v52 != -1);
          }
        }
      }
      *((_DWORD *)v44 + 236) = 0;
    }
  }
  return (_DWORD)v8 != 0;
}

unint64_t WTF::executeInsertions<WTF::Vector<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  WTF **v36;
  WTF *v37;

  v8 = a2[3];
  if ((_DWORD)v8)
  {
    v11 = *(unsigned int *)(a1 + 8);
    v12 = *(unsigned int *)(a1 + 12);
    v13 = v12 + v8;
    if (v12 + v8 > v11)
    {
      v14 = v11 + (v11 >> 2);
      if (v14 >= 0x10)
        v15 = v14 + 1;
      else
        v15 = 16;
      if (v15 <= v13)
        v16 = v12 + v8;
      else
        v16 = v15;
      v17 = *(_QWORD **)a1;
      if (v16 < 9)
      {
        v18 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 8;
      }
      else
      {
        if (v16 >> 29)
        {
LABEL_47:
          __break(0xC471u);
          JUMPOUT(0x1982F28ACLL);
        }
        v18 = (void *)WTF::fastMalloc((WTF *)(8 * v16));
        *(_DWORD *)(a1 + 8) = v16;
        *(_QWORD *)a1 = v18;
      }
      memcpy(v18, v17, 8 * v12);
      if ((_QWORD *)(a1 + 16) != v17 && v17)
      {
        if (*(_QWORD **)a1 == v17)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    if (*(_QWORD *)a1)
      bzero((void *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)), 8 * v13 - 8 * *(unsigned int *)(a1 + 12));
    *(_DWORD *)(a1 + 12) = v13;
    v19 = (v12 + v8);
    v20 = ~v8;
    v21 = v8;
    do
    {
      --v21;
      v22 = a2[3];
      if (v21 >= v22)
      {
        __break(0xC471u);
        JUMPOUT(0x1982F28BCLL);
      }
      v23 = *(_QWORD *)(*(_QWORD *)a2 + 16 * v21) + v21;
      v24 = v19 - 1;
      if (v19 - 1 > v23)
      {
        v25 = v19 + v20;
        do
        {
          v26 = *(unsigned int *)(a1 + 12);
          if (v25 >= v26)
            goto LABEL_47;
          if (v24 >= v26)
          {
            __break(0xC471u);
            JUMPOUT(0x1982F28B4);
          }
          v27 = *(_QWORD **)a1;
          v28 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v25);
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = 0;
          v29 = (WTF *)v27[v24];
          v27[v24] = v28;
          if (v29)
            WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v29, a2, a3, a4, a5, a6, a7, a8);
          --v24;
          --v25;
        }
        while (v24 > v23);
        v22 = a2[3];
      }
      if (v21 >= v22)
      {
        __break(0xC471u);
        JUMPOUT(0x1982F28C4);
      }
      if (v23 >= *(unsigned int *)(a1 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x1982F28CCLL);
      }
      v19 = v23;
      v30 = *(_QWORD *)a2 + 16 * v21;
      v31 = *(_QWORD **)a1;
      v32 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      v33 = (WTF *)v31[v23];
      v31[v23] = v32;
      if (v33)
        WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v33, a2, a3, a4, a5, a6, a7, a8);
      ++v20;
    }
    while (v21);
    v34 = a2[3];
    if ((_DWORD)v34)
    {
      v35 = 16 * v34;
      v36 = (WTF **)(*(_QWORD *)a2 + 8);
      do
      {
        v37 = *v36;
        *v36 = 0;
        if (v37)
          WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v37, a2, a3, a4, a5, a6, a7, a8);
        v36 += 2;
        v35 -= 16;
      }
      while (v35);
    }
    a2[3] = 0;
  }
  return v8;
}

void WTF::HashTable<JSC::DFG::NodeFlowProjection,WTF::KeyValuePair<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue>>,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashMap<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::AbstractValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::NodeFlowProjection>>::deallocateTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;

  v9 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v9)
  {
    v10 = (_QWORD *)(a1 + 8);
    do
    {
      if (*(v10 - 1) != 1 && (*v10 & 1) != 0)
        WTF::fastFree(*v10 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v10 += 5;
      --v9;
    }
    while (v9);
  }
  WTF::fastFree(a1 - 16, a2, a3, a4, a5, a6, a7, a8);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  char v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;

  v8 = a2;
LABEL_2:
  v9 = 1 - a4;
  while (2)
  {
    v10 = (char *)v8 - (char *)a1;
    v11 = ((char *)v8 - (char *)a1) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v12 = *(v8 - 2);
        v13 = *a1;
        if (v12 < *a1)
        {
          v14 = a1[1];
          *a1 = v12;
          a1[1] = 0;
          v15 = *(v8 - 1);
          *(v8 - 1) = 0;
          v16 = (WTF *)a1[1];
          a1[1] = v15;
          if (v16)
            WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v16, a2, a3, a4, a5, a6, a7, a8);
          v17 = (WTF *)*(v8 - 1);
          *(v8 - 2) = v13;
          *(v8 - 1) = v14;
          if (v17)
            WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v17, a2, a3, a4, a5, a6, a7, a8);
        }
        return;
      case 3uLL:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(a1, a1 + 2, v8 - 2, a4, a5, a6, a7, a8);
        return;
      case 4uLL:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(a1, a1 + 2, a1 + 4, v8 - 2, a5, a6, a7, a8);
        return;
      case 5uLL:
        std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(a1, a1 + 2, a1 + 4, a1 + 6, v8 - 2, a6, a7, a8);
        return;
      default:
        if (v10 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(a1, v8, a3, a4, a5, a6, a7, a8);
          else
            std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>((WTF **)a1, (WTF **)v8, a3, a4, a5, a6, a7, a8);
          return;
        }
        v66 = a1;
        if (v9 != 1)
        {
          v18 = a5;
          v19 = a3;
          v20 = v9;
          v21 = v11 >> 1;
          v22 = &a1[2 * (v11 >> 1)];
          v23 = v8 - 2;
          if ((unint64_t)v10 >= 0x801)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(a1, &a1[2 * (v11 >> 1)], v23, a4, a5, a6, a7, a8);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(v66 + 2, v22 - 2, v8 - 4, v44, v45, v46, v47, v48);
            v49 = &v66[2 * v21 + 2];
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(v66 + 4, v49, v8 - 6, v50, v51, v52, v53, v54);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(v22 - 2, v22, v49, v55, v56, v57, v58, v59);
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *&,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>((uint64_t *)v66, (uint64_t *)v22, v60, v61, v62, v63, v64, v65);
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(&a1[2 * (v11 >> 1)], a1, v23, a4, a5, a6, a7, a8);
          }
          if ((v18 & 1) == 0 && *(v66 - 2) >= *v66)
          {
            std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *,std::__less<void,void> &>(v66, v8, v24, v25, v26, v27, v28, v29);
            goto LABEL_22;
          }
          std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *,std::__less<void,void> &>(v66, v8, v24, v25, v26, v27, v28, v29);
          v35 = v30;
          a3 = v19;
          LOBYTE(a5) = v18;
          if ((v36 & 1) == 0)
            goto LABEL_21;
          v37 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(v66, v30, v19, v31, v18, v32, v33, v34);
          if (std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(v35 + 2, v8, v38, v39, v40, v41, v42, v43))
          {
            v9 = v20 + 1;
            v8 = v35;
            a3 = v19;
            a1 = v66;
            a5 = v18;
            if (v37)
              return;
            continue;
          }
          a4 = -v20;
          a3 = v19;
          a5 = v18;
          a1 = v35 + 2;
          if (!v37)
          {
LABEL_21:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *,false>(v66, v35, a3, -v20, a5 & 1);
            a1 = v35 + 2;
LABEL_22:
            a5 = 0;
            a4 = -v20;
            a3 = v19;
            goto LABEL_2;
          }
          goto LABEL_2;
        }
        if (a1 != v8)
          std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(a1, v8, (uint64_t)v8, a4, a5, a6, a7, a8);
        return;
    }
  }
}

void std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  WTF *v20;
  unint64_t *v21;
  WTF *v22;

  if (a1 != a2)
  {
    v10 = a1 + 2;
    if (a1 + 2 != a2)
    {
      v11 = 0;
      v12 = a1;
      do
      {
        v13 = v12;
        v12 = v10;
        v14 = v13[2];
        v15 = *v13;
        if (v14 < *v13)
        {
          v16 = v13[3];
          v13[3] = 0;
          v17 = v11;
          while (1)
          {
            v18 = (unint64_t *)((char *)a1 + v17);
            v19 = *(unint64_t *)((char *)a1 + v17 + 8);
            v18[1] = 0;
            v18[2] = v15;
            v20 = *(WTF **)((char *)a1 + v17 + 24);
            v18[3] = v19;
            if (v20)
              WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v20, a2, a3, a4, a5, a6, a7, a8);
            if (!v17)
              break;
            v15 = *(unint64_t *)((char *)a1 + v17 - 16);
            v17 -= 16;
            if (v14 >= v15)
            {
              v21 = (unint64_t *)((char *)a1 + v17 + 16);
              goto LABEL_12;
            }
          }
          v21 = a1;
LABEL_12:
          v22 = (WTF *)v21[1];
          *v21 = v14;
          v21[1] = v16;
          if (v22)
            WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v22, a2, a3, a4, a5, a6, a7, a8);
        }
        v10 = v12 + 2;
        v11 += 16;
      }
      while (v12 + 2 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(WTF **a1, WTF **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF **v10;
  uint64_t v11;
  WTF **v12;
  uint64_t v13;
  uint64_t v14;
  WTF **v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  WTF **v21;
  WTF *v22;
  WTF *v23;
  WTF **v25;
  WTF *v26;

  if (a1 != a2)
  {
    v10 = a1 + 2;
    if (a1 + 2 != a2)
    {
      v11 = 0;
      v12 = a1 + 3;
      v13 = -2;
      v14 = 1;
      v15 = a1;
      do
      {
        v16 = v11;
        v11 = v14;
        v17 = *v10;
        if (*v10 < *v15)
        {
          v18 = v15[3];
          v15[3] = 0;
          v19 = a1[2 * v16];
          v20 = v13;
          v21 = v12;
          do
          {
            v22 = *(v21 - 2);
            *(v21 - 2) = 0;
            *(v21 - 1) = v19;
            v23 = *v21;
            *v21 = v22;
            if (v23)
              WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v23, a2, a3, a4, a5, a6, a7, a8);
            if (__CFADD__(v20++, 1))
            {
              __break(1u);
              return;
            }
            v25 = v21 - 2;
            v19 = *(v21 - 5);
            v21 -= 2;
          }
          while (v17 < v19);
          v26 = *v25;
          *(v25 - 1) = v17;
          *v25 = v18;
          if (v26)
            WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v26, a2, a3, a4, a5, a6, a7, a8);
        }
        v15 = &a1[2 * v11];
        v14 = v11 + 1;
        v10 = &a1[2 * v11 + 2];
        v12 += 2;
        --v13;
      }
      while (v10 != a2);
    }
  }
}

void std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  WTF *v16;
  WTF *v17;
  unint64_t v18;
  unint64_t v19;
  WTF *v20;
  WTF *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  WTF *v25;
  unint64_t v26;
  WTF *v27;
  WTF *v28;
  unint64_t v29;
  unint64_t v30;
  WTF *v31;

  v11 = *a2;
  v12 = *a1;
  v13 = *a3;
  if (*a2 >= *a1)
  {
    if (v13 < v11)
    {
      v18 = a2[1];
      *a2 = v13;
      a2[1] = 0;
      v19 = a3[1];
      a3[1] = 0;
      v20 = (WTF *)a2[1];
      a2[1] = v19;
      if (v20)
        WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v20, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v21 = (WTF *)a3[1];
      *a3 = v11;
      a3[1] = v18;
      if (v21)
        WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v21, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v22 = *a1;
      if (*a2 < *a1)
      {
        v23 = a1[1];
        *a1 = *a2;
        a1[1] = 0;
        v24 = a2[1];
        a2[1] = 0;
        v25 = (WTF *)a1[1];
        a1[1] = v24;
        if (v25)
          WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v25, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v17 = (WTF *)a2[1];
        *a2 = v22;
        a2[1] = v23;
        if (v17)
          goto LABEL_25;
      }
    }
  }
  else
  {
    v14 = a1[1];
    a1[1] = 0;
    if (v13 < v11)
    {
      v15 = a3[1];
      a3[1] = 0;
      v16 = (WTF *)a1[1];
      *a1 = v13;
      a1[1] = v15;
      if (v16)
        WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v17 = (WTF *)a3[1];
      *a3 = v12;
      a3[1] = v14;
      if (!v17)
        return;
LABEL_25:
      WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v17, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    }
    v26 = a2[1];
    a2[1] = 0;
    v27 = (WTF *)a1[1];
    *a1 = v11;
    a1[1] = v26;
    if (v27)
      WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v27, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v28 = (WTF *)a2[1];
    *a2 = v12;
    a2[1] = v14;
    if (v28)
    {
      WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v28, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v12 = *a2;
    }
    if (*a3 < v12)
    {
      v29 = a2[1];
      *a2 = *a3;
      a2[1] = 0;
      v30 = a3[1];
      a3[1] = 0;
      v31 = (WTF *)a2[1];
      a2[1] = v30;
      if (v31)
        WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v31, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v17 = (WTF *)a3[1];
      *a3 = v12;
      a3[1] = v29;
      if (v17)
        goto LABEL_25;
    }
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *&,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  WTF *v15;

  v11 = *a1;
  v10 = a1[1];
  a1[1] = 0;
  v12 = *a2;
  v13 = a2[1];
  a2[1] = 0;
  v14 = (WTF *)a1[1];
  *a1 = v12;
  a1[1] = v13;
  if (v14)
    WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v14, a2, a3, a4, a5, a6, a7, a8);
  v15 = (WTF *)a2[1];
  *a2 = v11;
  a2[1] = v10;
  if (v15)
    WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v15, a2, a3, a4, a5, a6, a7, a8);
}

void std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  WTF *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  WTF *v29;
  WTF *v30;

  v11 = *a1;
  v10 = a1[1];
  a1[1] = 0;
  if (v11 < *(a2 - 2))
  {
    v12 = a1 + 2;
    while (v12 != a2)
    {
      v13 = *v12;
      v12 += 2;
      if (v11 < v13)
      {
        v14 = (uint64_t *)(v12 - 2);
        goto LABEL_9;
      }
    }
    goto LABEL_32;
  }
  v15 = (uint64_t *)(a1 + 2);
  do
  {
    v14 = v15;
    if (v15 >= (uint64_t *)a2)
      break;
    v15 += 2;
  }
  while (v11 >= *v14);
LABEL_9:
  v16 = (uint64_t *)a2;
  if (v14 < (uint64_t *)a2)
  {
    v16 = (uint64_t *)a2;
    while (v16 != (uint64_t *)a1)
    {
      v17 = *(v16 - 2);
      v16 -= 2;
      if (v11 >= v17)
        goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_13:
  if (v14 < v16)
  {
    v18 = *v14;
    v19 = *v16;
LABEL_15:
    v20 = v14[1];
    *v14 = v19;
    v14[1] = 0;
    v21 = v16[1];
    v16[1] = 0;
    v22 = (WTF *)v14[1];
    v14[1] = v21;
    if (v22)
      WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v22, a2, a3, a4, a5, a6, a7, a8);
    v23 = (WTF *)v16[1];
    *v16 = v18;
    v16[1] = v20;
    if (v23)
      WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v23, a2, a3, a4, a5, a6, a7, a8);
    v24 = (unint64_t *)(v14 + 2);
    while (v24 != a2)
    {
      v25 = *v24;
      v24 += 2;
      v18 = v25;
      if (v11 < v25)
      {
        v14 = (uint64_t *)(v24 - 2);
        while (v16 != (uint64_t *)a1)
        {
          v26 = *(v16 - 2);
          v16 -= 2;
          v19 = v26;
          if (v11 >= v26)
          {
            if (v14 < v16)
              goto LABEL_15;
            goto LABEL_26;
          }
        }
        break;
      }
    }
LABEL_32:
    __break(1u);
    return;
  }
LABEL_26:
  if (v14 - 2 != (uint64_t *)a1)
  {
    v27 = *(v14 - 2);
    v28 = *(v14 - 1);
    *(v14 - 1) = 0;
    v29 = (WTF *)a1[1];
    *a1 = v27;
    a1[1] = v28;
    if (v29)
      WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v29, a2, a3, a4, a5, a6, a7, a8);
  }
  v30 = (WTF *)*(v14 - 1);
  *(v14 - 2) = v11;
  *(v14 - 1) = v10;
  if (v30)
    WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v30, a2, a3, a4, a5, a6, a7, a8);
}

void std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  WTF *v24;
  WTF *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  WTF *v31;
  WTF *v32;

  v10 = 0;
  v12 = *a1;
  v11 = a1[1];
  a1[1] = 0;
  do
  {
    v13 = &a1[v10 + 2];
    if (v13 == a2)
      goto LABEL_31;
    v14 = *v13;
    v10 += 2;
  }
  while (*v13 < v12);
  v15 = &a1[v10];
  v16 = a2;
  if (v10 != 2)
  {
    while (v16 != a1)
    {
      v17 = *(v16 - 2);
      v16 -= 2;
      if (v17 < v12)
        goto LABEL_10;
    }
    goto LABEL_31;
  }
  do
  {
    if (v15 >= v16)
      break;
    v18 = *(v16 - 2);
    v16 -= 2;
  }
  while (v18 >= v12);
LABEL_10:
  if (v15 < v16)
  {
    v19 = *v16;
    v20 = v15;
    v21 = v16;
LABEL_12:
    v22 = v20[1];
    *v20 = v19;
    v20[1] = 0;
    v23 = v21[1];
    v21[1] = 0;
    v24 = (WTF *)v20[1];
    v20[1] = v23;
    if (v24)
      WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v24, a2, a3, a4, a5, a6, a7, a8);
    v25 = (WTF *)v21[1];
    *v21 = v14;
    v21[1] = v22;
    if (v25)
      WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v25, a2, a3, a4, a5, a6, a7, a8);
    v26 = v20 + 2;
    while (v26 != a2)
    {
      v27 = *v26;
      v26 += 2;
      v14 = v27;
      if (v27 >= v12)
      {
        v20 = v26 - 2;
        while (v21 != a1)
        {
          v28 = *(v21 - 2);
          v21 -= 2;
          v19 = v28;
          if (v28 < v12)
          {
            if (v20 < v21)
              goto LABEL_12;
            goto LABEL_25;
          }
        }
        break;
      }
    }
LABEL_31:
    __break(1u);
    return;
  }
  v20 = &a1[v10];
LABEL_25:
  if (v20 - 2 != a1)
  {
    v29 = *(v20 - 2);
    v30 = *(v20 - 1);
    *(v20 - 1) = 0;
    v31 = (WTF *)a1[1];
    *a1 = v29;
    a1[1] = v30;
    if (v31)
      WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v31, a2, a3, a4, a5, a6, a7, a8);
  }
  v32 = (WTF *)*(v20 - 1);
  *(v20 - 2) = v12;
  *(v20 - 1) = v11;
  if (v32)
    WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v32, a2, a3, a4, a5, a6, a7, a8);
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _BOOL8 result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  WTF *v16;
  WTF *v17;
  unint64_t *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  WTF *v35;
  unint64_t *v36;
  WTF *v37;

  v10 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v10)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v12 = *(a2 - 2);
      v13 = *a1;
      if (v12 < *a1)
      {
        v14 = a1[1];
        *a1 = v12;
        a1[1] = 0;
        v15 = *(a2 - 1);
        *(a2 - 1) = 0;
        v16 = (WTF *)a1[1];
        a1[1] = v15;
        if (v16)
          WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v16, a2, a3, a4, a5, a6, a7, a8);
        v17 = (WTF *)*(a2 - 1);
        *(a2 - 2) = v13;
        *(a2 - 1) = v14;
        if (v17)
          WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v17, a2, a3, a4, a5, a6, a7, a8);
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(a1, a1 + 2, a2 - 2, a4, a5, a6, a7, a8);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(a1, a1 + 2, a1 + 4, a2 - 2, a5, a6, a7, a8);
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a6, a7, a8);
      return 1;
    default:
      v18 = a1 + 4;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(a1, a1 + 2, a1 + 4, a4, a5, a6, a7, a8);
      v26 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v27 = 0;
      v28 = 0;
      break;
  }
  while (1)
  {
    v29 = *v26;
    v30 = *v18;
    if (*v26 < *v18)
    {
      v31 = v26[1];
      v26[1] = 0;
      v32 = v27;
      while (1)
      {
        v33 = (unint64_t *)((char *)a1 + v32);
        v34 = *(unint64_t *)((char *)a1 + v32 + 40);
        v33[5] = 0;
        v33[6] = v30;
        v35 = *(WTF **)((char *)a1 + v32 + 56);
        v33[7] = v34;
        if (v35)
          WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v35, v19, v20, v21, v22, v23, v24, v25);
        if (v32 == -32)
          break;
        v30 = *(unint64_t *)((char *)a1 + v32 + 16);
        v32 -= 16;
        if (v29 >= v30)
        {
          v36 = (unint64_t *)((char *)a1 + v32 + 48);
          goto LABEL_17;
        }
      }
      v36 = a1;
LABEL_17:
      v37 = (WTF *)v36[1];
      *v36 = v29;
      v36[1] = v31;
      if (v37)
        WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v37, v19, v20, v21, v22, v23, v24, v25);
      if (++v28 == 8)
        return v26 + 2 == a2;
    }
    v18 = v26;
    v27 += 16;
    v26 += 2;
    if (v26 == a2)
      return 1;
  }
}

void std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  WTF *v22;
  WTF *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  WTF *v27;
  WTF *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  WTF *v32;
  WTF *v33;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v19 = *a3;
  if (*a4 < *a3)
  {
    v20 = a3[1];
    *a3 = *a4;
    a3[1] = 0;
    v21 = a4[1];
    a4[1] = 0;
    v22 = (WTF *)a3[1];
    a3[1] = v21;
    if (v22)
      WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v22, v12, v13, v14, v15, v16, v17, v18);
    v23 = (WTF *)a4[1];
    *a4 = v19;
    a4[1] = v20;
    if (v23)
      WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v23, v12, v13, v14, v15, v16, v17, v18);
    v24 = *a2;
    if (*a3 < *a2)
    {
      v25 = a2[1];
      *a2 = *a3;
      a2[1] = 0;
      v26 = a3[1];
      a3[1] = 0;
      v27 = (WTF *)a2[1];
      a2[1] = v26;
      if (v27)
        WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v27, v12, v13, v14, v15, v16, v17, v18);
      v28 = (WTF *)a3[1];
      *a3 = v24;
      a3[1] = v25;
      if (v28)
        WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v28, v12, v13, v14, v15, v16, v17, v18);
      v29 = *a1;
      if (*a2 < *a1)
      {
        v30 = a1[1];
        *a1 = *a2;
        a1[1] = 0;
        v31 = a2[1];
        a2[1] = 0;
        v32 = (WTF *)a1[1];
        a1[1] = v31;
        if (v32)
          WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v32, v12, v13, v14, v15, v16, v17, v18);
        v33 = (WTF *)a2[1];
        *a2 = v29;
        a2[1] = v30;
        if (v33)
          WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v33, v12, v13, v14, v15, v16, v17, v18);
      }
    }
  }
}

void std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  WTF *v23;
  WTF *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  WTF *v28;
  WTF *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  WTF *v33;
  WTF *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  WTF *v38;
  WTF *v39;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(a1, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  v20 = *a4;
  if (*a5 < *a4)
  {
    v21 = a4[1];
    *a4 = *a5;
    a4[1] = 0;
    v22 = a5[1];
    a5[1] = 0;
    v23 = (WTF *)a4[1];
    a4[1] = v22;
    if (v23)
      WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v23, v13, v14, v15, v16, v17, v18, v19);
    v24 = (WTF *)a5[1];
    *a5 = v20;
    a5[1] = v21;
    if (v24)
      WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v24, v13, v14, v15, v16, v17, v18, v19);
    v25 = *a3;
    if (*a4 < *a3)
    {
      v26 = a3[1];
      *a3 = *a4;
      a3[1] = 0;
      v27 = a4[1];
      a4[1] = 0;
      v28 = (WTF *)a3[1];
      a3[1] = v27;
      if (v28)
        WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v28, v13, v14, v15, v16, v17, v18, v19);
      v29 = (WTF *)a4[1];
      *a4 = v25;
      a4[1] = v26;
      if (v29)
        WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v29, v13, v14, v15, v16, v17, v18, v19);
      v30 = *a2;
      if (*a3 < *a2)
      {
        v31 = a2[1];
        *a2 = *a3;
        a2[1] = 0;
        v32 = a3[1];
        a3[1] = 0;
        v33 = (WTF *)a2[1];
        a2[1] = v32;
        if (v33)
          WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v33, v13, v14, v15, v16, v17, v18, v19);
        v34 = (WTF *)a3[1];
        *a3 = v30;
        a3[1] = v31;
        if (v34)
          WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v34, v13, v14, v15, v16, v17, v18, v19);
        v35 = *a1;
        if (*a2 < *a1)
        {
          v36 = a1[1];
          *a1 = *a2;
          a1[1] = 0;
          v37 = a2[1];
          a2[1] = 0;
          v38 = (WTF *)a1[1];
          a1[1] = v37;
          if (v38)
            WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v38, v13, v14, v15, v16, v17, v18, v19);
          v39 = (WTF *)a2[1];
          *a2 = v35;
          a2[1] = v36;
          if (v39)
            WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v39, v13, v14, v15, v16, v17, v18, v19);
        }
      }
    }
  }
}

void std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  WTF *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  WTF *v35;
  WTF *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  WTF *v45;
  WTF *v46;

  if (a1 != a2)
  {
    v9 = a2;
    v11 = (char *)a2 - (char *)a1;
    v12 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v13 = (unint64_t)(v12 - 2) >> 1;
      v14 = v13 + 1;
      v15 = &a1[2 * v13];
      do
      {
        std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>((uint64_t)a1, v12, v15, a4, a5, a6, a7, a8);
        v15 -= 2;
        --v14;
      }
      while (v14);
    }
    if (v9 != (unint64_t *)a3)
    {
      v16 = v9;
      do
      {
        v17 = *v16;
        if (*v16 < *a1)
        {
          v18 = v16[1];
          *v16 = *a1;
          v16[1] = 0;
          v19 = a1[1];
          a1[1] = 0;
          v20 = (WTF *)v16[1];
          v16[1] = v19;
          if (v20)
            WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v20, a2, a3, a4, a5, a6, a7, a8);
          v21 = (WTF *)a1[1];
          *a1 = v17;
          a1[1] = v18;
          if (v21)
            WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v21, a2, a3, a4, a5, a6, a7, a8);
          std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>((uint64_t)a1, v12, a1, a4, a5, a6, a7, a8);
        }
        v16 += 2;
      }
      while (v16 != (unint64_t *)a3);
    }
    if (v11 >= 17)
    {
      v22 = (unint64_t)v11 >> 4;
      while (1)
      {
        if (v22 <= 0)
        {
          __break(1u);
          return;
        }
        if (v22 == 1)
          return;
        v23 = 0;
        v25 = *a1;
        v24 = a1[1];
        a1[1] = 0;
        v26 = a1;
        do
        {
          v27 = &v26[2 * v23 + 2];
          if (2 * v23 + 2 >= v22)
          {
            v28 = *v27;
            v23 = (2 * v23) | 1;
          }
          else
          {
            v28 = *v27;
            v29 = v26[2 * v23 + 4];
            if (*v27 <= v29)
              v28 = v26[2 * v23 + 4];
            if (*v27 >= v29)
            {
              v23 = (2 * v23) | 1;
            }
            else
            {
              v27 = &v26[2 * v23 + 4];
              v23 = 2 * v23 + 2;
            }
          }
          v30 = v27[1];
          v27[1] = 0;
          v31 = (WTF *)v26[1];
          *v26 = v28;
          v26[1] = v30;
          if (v31)
            WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v31, a2, a3, a4, a5, a6, a7, a8);
          v26 = v27;
        }
        while (v23 <= (uint64_t)((unint64_t)(v22 - 2) >> 1));
        v32 = v9 - 2;
        if (v27 != v9 - 2)
          break;
        v46 = (WTF *)v27[1];
        *v27 = v25;
        v27[1] = v24;
        if (v46)
          goto LABEL_44;
LABEL_45:
        v9 = v32;
        if ((unint64_t)v22-- <= 2)
          return;
      }
      v33 = *(v9 - 2);
      v34 = *(v9 - 1);
      *(v9 - 1) = 0;
      v35 = (WTF *)v27[1];
      *v27 = v33;
      v27[1] = v34;
      if (v35)
        WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v35, a2, a3, a4, a5, a6, a7, a8);
      v36 = (WTF *)*(v9 - 1);
      *(v9 - 2) = v25;
      *(v9 - 1) = v24;
      if (v36)
        WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v36, a2, a3, a4, a5, a6, a7, a8);
      v37 = (char *)(v27 + 2) - (char *)a1;
      if (v37 < 17)
        goto LABEL_45;
      v38 = (((unint64_t)v37 >> 4) - 2) >> 1;
      v39 = &a1[2 * v38];
      v40 = *v39;
      v41 = *v27;
      if (*v39 >= *v27)
        goto LABEL_45;
      v42 = v27[1];
      v27[1] = 0;
      do
      {
        v43 = v27;
        v27 = v39;
        v44 = v39[1];
        v27[1] = 0;
        v45 = (WTF *)v43[1];
        *v43 = v40;
        v43[1] = v44;
        if (v45)
          WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v45, a2, a3, a4, a5, a6, a7, a8);
        if (!v38)
          break;
        v38 = (v38 - 1) >> 1;
        v39 = &a1[2 * v38];
        v40 = *v39;
      }
      while (*v39 < v41);
      v46 = (WTF *)v27[1];
      *v27 = v41;
      v27[1] = v42;
      if (!v46)
        goto LABEL_45;
LABEL_44:
      WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v46, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_45;
    }
  }
}

void std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>> *>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  WTF *v24;
  unint64_t v25;
  WTF *v26;

  v8 = a2 - 2;
  if (a2 >= 2)
  {
    v9 = a3;
    v11 = (uint64_t)a3 - a1;
    v12 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) >= ((uint64_t)a3 - a1) >> 4)
    {
      v14 = v11 >> 3;
      v15 = (v11 >> 3) + 1;
      v16 = (unint64_t *)(a1 + 16 * v15);
      v17 = v14 + 2;
      if (v14 + 2 >= a2)
      {
        v18 = *v16;
      }
      else
      {
        v18 = *v16;
        v19 = v16[2];
        if (*v16 <= v19)
          v18 = v16[2];
        if (*v16 < v19)
        {
          v16 += 2;
          v15 = v17;
        }
      }
      v20 = *a3;
      if (v18 >= *a3)
      {
        v21 = a3[1];
        a3[1] = 0;
        do
        {
          v22 = v9;
          v9 = v16;
          v23 = v16[1];
          v9[1] = 0;
          v24 = (WTF *)v22[1];
          *v22 = v18;
          v22[1] = v23;
          if (v24)
            WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v24, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (v12 < v15)
            break;
          v16 = (unint64_t *)(a1 + 16 * ((2 * v15) | 1));
          if (2 * v15 + 2 >= a2)
          {
            v18 = *v16;
            v15 = (2 * v15) | 1;
          }
          else
          {
            v18 = *v16;
            v25 = v16[2];
            if (*v16 <= v25)
              v18 = v16[2];
            if (*v16 >= v25)
            {
              v15 = (2 * v15) | 1;
            }
            else
            {
              v16 += 2;
              v15 = 2 * v15 + 2;
            }
          }
        }
        while (v18 >= v20);
        v26 = (WTF *)v9[1];
        *v9 = v20;
        v9[1] = v21;
        if (v26)
          WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v26, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
  }
}

uint64_t WTF::PrintStream::printImpl<JSC::DFG::Array::Type,char [2],JSC::DFG::Array::Class,char [2],JSC::DFG::Array::Speculation,char [2],JSC::DFG::Array::Conversion,char [2],JSC::DFG::Array::Action>(WTF::PrintStream *a1, char *a2, const char *a3, char *a4, const char *a5, char *a6, const char *a7, _BYTE *a8, const char *a9, _BYTE *a10)
{
  unint64_t v17;
  const char *v18;
  WTF::PrintStream *v19;
  unint64_t v20;
  const char *v21;
  WTF::PrintStream *v22;

  v17 = *a2;
  if (v17 > 0x19)
    v18 = "Unknown!";
  else
    v18 = off_1E358C470[v17];
  v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v19, "%s", v18);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%s", a3);
  v20 = *a4;
  if (v20 > 6)
    v21 = "Unknown!";
  else
    v21 = off_1E358C540[v20];
  v22 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v22, "%s", v21);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%s", a5);
  return WTF::PrintStream::printImpl<JSC::DFG::Array::Speculation,char [2],JSC::DFG::Array::Conversion,char [2],JSC::DFG::Array::Action>(a1, a6, a7, a8, a9, a10);
}

uint64_t WTF::PrintStream::printImpl<JSC::DFG::Array::Speculation,char [2],JSC::DFG::Array::Conversion,char [2],JSC::DFG::Array::Action>(WTF::PrintStream *a1, char *a2, const char *a3, _BYTE *a4, const char *a5, _BYTE *a6)
{
  unint64_t v11;
  const char *v12;
  WTF::PrintStream *v13;
  const char *v14;
  const char *v15;
  WTF::PrintStream *v16;
  const char *v17;
  const char *v18;
  WTF::PrintStream *v19;

  v11 = *a2;
  v12 = "Unknown!";
  if (v11 <= 4)
    v12 = off_1E358C578[v11];
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v13, "%s", v12);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%s", a3);
  v14 = "Convert";
  if (*a4 != 1)
    v14 = "Unknown!";
  if (*a4)
    v15 = v14;
  else
    v15 = "AsIs";
  v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v16, "%s", v15);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%s", a5);
  v17 = "Write";
  if (*a6 != 1)
    v17 = "Unknown!";
  if (*a6)
    v18 = v17;
  else
    v18 = "Read";
  v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v19, "%s", v18);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
}

_QWORD *WTF::HashTable<JSC::DFG::NodeFlowProjection,WTF::KeyValuePair<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue>>,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashMap<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::AbstractValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::NodeFlowProjection>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  unint64_t v10;

  v8 = *a1;
  if (*a1 && (v9 = *(_DWORD *)(v8 - 4)) != 0)
    v10 = (v9 << (6 * *(_DWORD *)(v8 - 12) >= (2 * v9)));
  else
    v10 = 8;
  return WTF::HashTable<JSC::DFG::NodeFlowProjection,WTF::KeyValuePair<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue>>,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashMap<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::AbstractValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::NodeFlowProjection>>::rehash(a1, v10, 0, a4, a5, a6, a7, a8);
}

_QWORD *WTF::HashTable<JSC::DFG::NodeFlowProjection,WTF::KeyValuePair<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue>>,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashMap<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::AbstractValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::NodeFlowProjection>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  _QWORD *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v8 = a2;
  v9 = *a1;
  if (*a1)
  {
    v10 = *(_DWORD *)(v9 - 4);
    v11 = *(_DWORD *)(v9 - 12);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = WTF::fastZeroedMalloc(40 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  v20 = a1;
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v11;
  if (v10)
  {
    v21 = 0;
    v22 = 0;
    v23 = v10;
    v24 = (uint64_t *)a3;
    do
    {
      v25 = (uint64_t *)(v9 + 40 * v21);
      v26 = *v25;
      if (*v25)
      {
        if (v26 != 1)
        {
          v27 = *v20;
          if (*v20)
            v28 = *(_DWORD *)(v27 - 8);
          else
            v28 = 0;
          v29 = v28 & v26;
          v30 = 1;
          do
          {
            v31 = v29;
            v32 = (_QWORD *)(v27 + 40 * v29);
            v29 = (v29 + v30++) & v28;
          }
          while (*v32);
          v33 = v31;
          v34 = v27 + 40 * v31;
          v37 = *(_QWORD *)(v34 + 8);
          v36 = (uint64_t *)(v34 + 8);
          v35 = v37;
          if ((v37 & 1) != 0)
          {
            v51 = v23;
            WTF::fastFree(v35 & 0xFFFFFFFFFFFFFFFCLL, v13, v14, v15, v16, v17, v18, v19);
            v23 = v51;
            v24 = (uint64_t *)a3;
            v20 = a1;
            v26 = *v25;
          }
          *v32 = v26;
          v38 = v9 + 40 * v21;
          *v36 = 0;
          v41 = *(_QWORD *)(v38 + 8);
          v40 = (_QWORD *)(v38 + 8);
          v39 = v41;
          if ((v41 & 1) == 0 || v39 == 4)
          {
            v42 = v39 & 0xFFFFFFFFFFFFFFFDLL;
            *v36 = v42;
          }
          else
          {
            v53 = v23;
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v36, v40);
            v23 = v53;
            v24 = (uint64_t *)a3;
            v20 = a1;
            v42 = *v36;
          }
          v43 = v42 & 0xFFFFFFFFFFFFFFFDLL;
          v44 = v42 | 2;
          if ((*(_BYTE *)v40 & 2) == 0)
            v44 = v43;
          *v36 = v44;
          v45 = v27 + 40 * v33;
          v46 = v9 + 40 * v21;
          v47 = *(_OWORD *)(v46 + 16);
          *(_QWORD *)(v45 + 32) = *(_QWORD *)(v46 + 32);
          *(_OWORD *)(v45 + 16) = v47;
          if ((*v40 & 1) != 0)
          {
            v52 = v23;
            WTF::fastFree(*v40 & 0xFFFFFFFFFFFFFFFCLL, v13, v14, v15, v16, v17, v18, v19);
            v23 = v52;
            v24 = (uint64_t *)a3;
            v20 = a1;
          }
          if (v25 == v24)
            v22 = v32;
        }
      }
      else
      {
        v48 = *(_QWORD *)(v9 + 40 * v21 + 8);
        if ((v48 & 1) != 0)
        {
          v49 = v23;
          WTF::fastFree(v48 & 0xFFFFFFFFFFFFFFFCLL, v13, v14, v15, v16, v17, v18, v19);
          v23 = v49;
          v24 = (uint64_t *)a3;
          v20 = a1;
        }
      }
      ++v21;
    }
    while (v21 != v23);
  }
  else
  {
    v22 = 0;
    result = 0;
    if (!v9)
      return result;
  }
  WTF::fastFree(v9 - 16, v13, v14, v15, v16, v17, v18, v19);
  return v22;
}

uint64_t WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v28;
  unsigned int v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int i;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = a2;
  v10 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v18 = (_QWORD *)(v10 + 40);
    do
    {
      *(v18 - 3) = 0;
      *(v18 - 2) = 0;
      *(v18 - 1) = 0;
      *v18 = 0x3FFFFFFF00000000;
      v18 += 4;
      --v9;
    }
    while (v9);
  }
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (uint64_t *)(v6 + 32 * v19);
      v22 = *((_DWORD *)v21 + 2);
      v23 = *((_DWORD *)v21 + 3);
      if (v22)
        v24 = 1;
      else
        v24 = v23 == 0;
      if (v24)
      {
        v25 = *v21;
        v26 = !v22 && v25 == 0;
        if (!v26 || v23 != 0)
        {
          v28 = *a1;
          if (*a1)
            v29 = *(_DWORD *)(v28 - 8);
          else
            v29 = 0;
          v30 = 0;
          v31 = v23 + v22;
          v32 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
          v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
          v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
          for (i = v31 + ((v34 >> 31) ^ v34); ; i = v30 + v36)
          {
            v36 = i & v29;
            v37 = v28 + 32 * v36;
            if (!*(_QWORD *)v37 && !*(_QWORD *)(v37 + 8))
              break;
            ++v30;
          }
          v38 = *((_OWORD *)v21 + 1);
          *(_OWORD *)v37 = *(_OWORD *)v21;
          *(_OWORD *)(v37 + 16) = v38;
          if (v21 == a3)
            v20 = v28 + 32 * v36;
        }
      }
      ++v19;
    }
    while (v19 != v7);
    goto LABEL_29;
  }
  v20 = 0;
  result = 0;
  if (v6)
  {
LABEL_29:
    WTF::fastFree(v6 - 16, v11, v12, v13, v14, v15, v16, v17);
    return v20;
  }
  return result;
}

uint64_t JSC::Operands<JSC::DFG::Availability,WTF::Vector<JSC::DFG::Availability,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::dump(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  JSC::DFG::Availability *v7;
  WTF::PrintStream *v8;
  unint64_t v9;
  unint64_t i;
  JSC::DFG::Availability *v11;
  WTF::PrintStream *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  JSC::DFG::Availability *v16;
  WTF::PrintStream *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  char v24;

  v3 = result;
  v23[0] = " ";
  v23[1] = 2;
  v23[2] = &str_90_2;
  v23[3] = 1;
  v24 = 0;
  v4 = *(unsigned int *)(result + 16);
  v22 = v4 - 1;
  if ((_DWORD)v4)
  {
    v5 = v4 - 2;
    v6 = 16 * v4 - 16;
    do
    {
      v7 = (JSC::DFG::Availability *)(*(_QWORD *)v3 + v6);
      if (*(_QWORD *)v7 != 1 || *((_BYTE *)v7 + 8) != 7)
      {
        v20 = "arg";
        v21 = 4;
        v18 = ":";
        v19 = 2;
        v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,JSC::DFG::Availability>(v8, (uint64_t)v23, (uint64_t)&v20, &v22, (uint64_t)&v18, v7);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      }
      v22 = v5--;
      v6 -= 16;
    }
    while (v5 != -2);
  }
  v22 = 0;
  v9 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v9)
  {
    for (i = 0; i < v9; v22 = i)
    {
      v11 = (JSC::DFG::Availability *)(*(_QWORD *)v3 + 16 * (i + *(unsigned int *)(v3 + 16)));
      if (*(_QWORD *)v11 != 1 || *((_BYTE *)v11 + 8) != 7)
      {
        v20 = "loc";
        v21 = 4;
        v18 = ":";
        v19 = 2;
        v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,JSC::DFG::Availability>(v12, (uint64_t)v23, (uint64_t)&v20, &v22, (uint64_t)&v18, v11);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
        v9 = *(unsigned int *)(v3 + 20);
      }
      ++i;
    }
  }
  else
  {
    v9 = 0;
  }
  v22 = 0;
  v13 = *(unsigned int *)(v3 + 12);
  v14 = *(unsigned int *)(v3 + 16);
  if (v14 + v9 != v13)
  {
    v15 = 0;
    do
    {
      v16 = (JSC::DFG::Availability *)(*(_QWORD *)v3 + 16 * (v15 + v9 + v14));
      if (*(_QWORD *)v16 != 1 || *((_BYTE *)v16 + 8) != 7)
      {
        v20 = "tmp";
        v21 = 4;
        v18 = ":";
        v19 = 2;
        v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,JSC::DFG::Availability>(v17, (uint64_t)v23, (uint64_t)&v20, &v22, (uint64_t)&v18, v16);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
        v13 = *(unsigned int *)(v3 + 12);
        v14 = *(unsigned int *)(v3 + 16);
        v9 = *(unsigned int *)(v3 + 20);
      }
      v22 = ++v15;
    }
    while (v15 < v13 - (v14 + v9));
  }
  return result;
}

uint64_t WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,JSC::DFG::Availability>(WTF::PrintStream *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, JSC::DFG::Availability *a6)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  WTF::PrintStream *v21;
  float v22;
  unsigned int v23;
  char *v24;
  uint64_t v25;
  WTF::PrintStream *v26;
  float v27;
  unsigned int v28;
  char *v29;
  uint64_t v30;
  WTF::PrintStream *v31;
  float v32;
  unsigned int v33;
  uint64_t v35;
  int v36;
  char v37;

  if (*(_BYTE *)(a2 + 32))
  {
    v12 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    v13 = *(char **)a2;
    v14 = *(_QWORD *)(a2 + 8);
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    if (v13)
    {
      v17 = v14 - 1;
      if (!v14)
        v17 = 0;
      WTF::StringImpl::utf8ForCharacters(v13, v17, (uint64_t)&v35, v16);
    }
    else
    {
      WTF::CString::CString(&v35, &str_25, 0);
      v36 = 0;
    }
    WTF::printExpectedCStringHelper(v15, "StringView", &v35);
    if (v36 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  }
  else
  {
    v18 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    v19 = *(char **)(a2 + 16);
    v20 = *(_QWORD *)(a2 + 24);
    v21 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    if (v19)
    {
      v23 = v20 - 1;
      if (!v20)
        v23 = 0;
      WTF::StringImpl::utf8ForCharacters(v19, v23, (uint64_t)&v35, v22);
    }
    else
    {
      WTF::CString::CString(&v35, &str_25, 0);
      v36 = 0;
    }
    WTF::printExpectedCStringHelper(v21, "StringView", &v35);
    if (v36 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
    *(_BYTE *)(a2 + 32) = 1;
  }
  v24 = *(char **)a3;
  v25 = *(_QWORD *)(a3 + 8);
  v26 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v24)
  {
    v28 = v25 - 1;
    if (!v25)
      v28 = 0;
    WTF::StringImpl::utf8ForCharacters(v24, v28, (uint64_t)&v35, v27);
  }
  else
  {
    WTF::CString::CString(&v35, &str_25, 0);
    v36 = 0;
  }
  WTF::printExpectedCStringHelper(v26, "StringView", &v35);
  if (v36 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%lu", *a4);
  v29 = *(char **)a5;
  v30 = *(_QWORD *)(a5 + 8);
  v31 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v29)
  {
    v33 = v30 - 1;
    if (!v30)
      v33 = 0;
    WTF::StringImpl::utf8ForCharacters(v29, v33, (uint64_t)&v35, v32);
  }
  else
  {
    WTF::CString::CString(&v35, &str_25, 0);
    v36 = 0;
  }
  WTF::printExpectedCStringHelper(v31, "StringView", &v35);
  if (v36 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  return JSC::DFG::Availability::dump(a6, a1);
}

uint64_t **WTF::MapDump<WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>>::dump(uint64_t **result, uint64_t a2)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  char *v13;
  uint64_t *v14;
  WTF::PrintStream *v15;
  float v16;
  unsigned int v17;
  char *v18;
  uint64_t *v19;
  WTF::PrintStream *v20;
  float v21;
  unsigned int v22;
  int v23;
  WTF::PrintStream *v24;
  uint64_t *v25;
  char *v26;
  WTF::PrintStream *v27;
  float v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  int v40;

  v3 = result;
  v4 = **result;
  if (!v4)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = v4 + 32 * v6;
    goto LABEL_4;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v7 = v4 + 32 * v6;
  if (!*(_DWORD *)(v4 - 12))
  {
    v5 = v4 + 32 * v6;
    goto LABEL_3;
  }
  v5 = **result;
  if ((_DWORD)v6)
  {
    v34 = 32 * v6;
    v5 = **result;
    while (1)
    {
      v35 = *(_DWORD *)(v5 + 8);
      if (*(_QWORD *)v5)
        break;
      v36 = *(_DWORD *)(v5 + 12);
      if (v35 | v36)
        goto LABEL_53;
LABEL_50:
      v5 += 32;
      v34 -= 32;
      if (!v34)
      {
        v5 = v7;
        goto LABEL_4;
      }
    }
    v36 = *(_DWORD *)(v5 + 12);
LABEL_53:
    if (v35)
      v37 = 1;
    else
      v37 = v36 == 0;
    if (v37)
      goto LABEL_4;
    goto LABEL_50;
  }
LABEL_4:
  if (v4)
    goto LABEL_43;
  while (v5 != v4)
  {
    v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v9 = *((unsigned __int8 *)v3 + 56);
    v10 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    v11 = v10;
    v12 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32);
    if (v9)
    {
      v13 = (char *)v3[3];
      v14 = v3[4];
      v15 = (WTF::PrintStream *)v12(v10);
      if (v13)
      {
        v17 = (_DWORD)v14 - 1;
        if (!v14)
          v17 = 0;
        WTF::StringImpl::utf8ForCharacters(v13, v17, (uint64_t)&v39, v16);
      }
      else
      {
        WTF::CString::CString(&v39, &str_25, 0);
        v40 = 0;
      }
      WTF::printExpectedCStringHelper(v15, "StringView", &v39);
      if (v40 != -1)
        ((void (*)(int *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v38, &v39);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
    }
    else
    {
      v18 = (char *)v3[5];
      v19 = v3[6];
      v20 = (WTF::PrintStream *)v12(v10);
      if (v18)
      {
        v22 = (_DWORD)v19 - 1;
        if (!v19)
          v22 = 0;
        WTF::StringImpl::utf8ForCharacters(v18, v22, (uint64_t)&v39, v21);
      }
      else
      {
        WTF::CString::CString(&v39, &str_25, 0);
        v40 = 0;
      }
      WTF::printExpectedCStringHelper(v20, "StringView", &v39);
      if (v40 != -1)
        ((void (*)(int *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v38, &v39);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
      *((_BYTE *)v3 + 56) = 1;
    }
    v23 = *(_DWORD *)(v5 + 8);
    v38 = *(_DWORD *)(v5 + 12);
    LODWORD(v39) = v23;
    v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printImpl<JSC::DFG::PromotedLocationKind,char [2],JSC::DFG::Node *,char [3],unsigned int,char [2]>(v24, (int *)&v39, "(", (uint64_t *)v5, ", ", &v38, ")");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
    v26 = (char *)v3[1];
    v25 = v3[2];
    v27 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    if (v26)
    {
      v29 = (_DWORD)v25 - 1;
      if (!v25)
        v29 = 0;
      WTF::StringImpl::utf8ForCharacters(v26, v29, (uint64_t)&v39, v28);
    }
    else
    {
      WTF::CString::CString(&v39, &str_25, 0);
      v40 = 0;
    }
    WTF::printExpectedCStringHelper(v27, "StringView", &v39);
    if (v40 != -1)
      ((void (*)(int *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v38, &v39);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
    JSC::DFG::Availability::dump((JSC::DFG::Availability *)(v5 + 16), v8);
    result = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v30 = v5 + 32;
    v5 = v7;
    if (v30 != v7)
    {
      v5 = v30;
      while (1)
      {
        v31 = *(_DWORD *)(v5 + 8);
        if (*(_QWORD *)v5)
          break;
        v32 = *(_DWORD *)(v5 + 12);
        if (v31 | v32)
          goto LABEL_37;
LABEL_34:
        v5 += 32;
        if (v5 == v7)
        {
          v5 = v7;
          goto LABEL_42;
        }
      }
      v32 = *(_DWORD *)(v5 + 12);
LABEL_37:
      if (v31)
        v33 = 1;
      else
        v33 = v32 == 0;
      if (v33)
        goto LABEL_42;
      goto LABEL_34;
    }
LABEL_42:
    v4 = **v3;
    if (v4)
LABEL_43:
      v4 += 32 * *(unsigned int *)(v4 - 4);
  }
  return result;
}

BOOL JSC::DFG::BackwardsPropagationPhase::isNotNegZero(JSC::DFG::BackwardsPropagationPhase *this, JSC::DFG::Node *a2, unsigned int a3)
{
  unint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unint64_t v7;
  double v8;

  if (!(_DWORD)a2)
    return 0;
  v4 = ((_DWORD)a2 - 1);
  while (1)
  {
    result = 0;
    v6 = *((unsigned __int16 *)this + 9);
    if (v6 <= 0x2A)
      break;
    if (v6 - 43 < 0xB)
      return 1;
    if (v6 != 85 && v6 != 62)
      return result;
    if ((JSC::DFG::BackwardsPropagationPhase::isNotNegZero((JSC::DFG::BackwardsPropagationPhase *)(*((_QWORD *)this + 3) & 0xFF00FFFFFFFFFFFFLL), (JSC::DFG::Node *)v4, a3) & 1) != 0)return 1;
    this = (JSC::DFG::BackwardsPropagationPhase *)(*((_QWORD *)this + 4) & 0xFF00FFFFFFFFFFFFLL);
    v4 = (v4 - 1);
    if ((_DWORD)v4 == -1)
      return 0;
  }
  if (v6 >= 3)
    return result;
  v7 = **((_QWORD **)this + 9);
  if (!(v7 >> 49))
    return 0;
  v8 = (double)(int)v7;
  if (v7 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v8 = v7 - 0x2000000000000;
  if (v8 != 0.0)
    return 1;
  return 1.0 / v8 > 0.0;
}

unint64_t WTF::Vector<WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v10 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v11 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v11 >= 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    if (v12 > a2)
      a2 = v12;
    WTF::Vector<WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v14 = a3 - v10;
    v15 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 > a2)
      a2 = v16;
    WTF::Vector<WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v14;
  }
  return v8;
}

void WTF::Vector<WTF::Insertion<WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v8 = a2;
    v10 = *(_QWORD *)a1;
    v11 = *(unsigned int *)(a1 + 12);
    if (a2 < 9)
    {
      v12 = (_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
    }
    else
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return;
      }
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = v8;
      *(_QWORD *)a1 = v12;
    }
    if ((_DWORD)v11)
    {
      v13 = (uint64_t *)(v10 + 16 * v11);
      v14 = (uint64_t *)v10;
      do
      {
        v15 = *v14;
        v16 = v14[1];
        v14[1] = 0;
        *v12 = v15;
        v12[1] = v16;
        v17 = (WTF *)v14[1];
        v14[1] = 0;
        if (v17)
          WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v17, (void *)a2, a3, a4, a5, a6, a7, a8);
        v14 += 2;
        v12 += 2;
      }
      while (v14 != v13);
    }
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void WTF::RefCounted<JSC::DFG::BasicBlock>::deref(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  WTF *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;

  if (*(_DWORD *)this == 1)
  {
    v9 = (WTF *)*((_QWORD *)this + 26);
    if ((WTF *)((char *)this + 224) != v9 && v9 != 0)
    {
      *((_QWORD *)this + 26) = 0;
      *((_DWORD *)this + 54) = 0;
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
    v11 = *((_QWORD *)this + 25);
    *((_QWORD *)this + 25) = 0;
    if (v11)
    {
      v12 = *(unsigned int *)(v11 + 124);
      v13 = *(_QWORD *)(v11 + 112);
      if ((_DWORD)v12)
      {
        v35 = 40 * v12;
        v36 = (uint64_t *)(v13 + 8);
        do
        {
          v38 = *v36;
          v36 += 5;
          v37 = v38;
          if ((v38 & 1) != 0)
            WTF::fastFree(v37 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
          v35 -= 40;
        }
        while (v35);
        v13 = *(_QWORD *)(v11 + 112);
      }
      if (v13)
      {
        *(_QWORD *)(v11 + 112) = 0;
        *(_DWORD *)(v11 + 120) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      v14 = *(unsigned int *)(v11 + 108);
      v15 = *(_QWORD *)(v11 + 96);
      if ((_DWORD)v14)
      {
        v39 = 40 * v14;
        v40 = (uint64_t *)(v15 + 8);
        do
        {
          v42 = *v40;
          v40 += 5;
          v41 = v42;
          if ((v42 & 1) != 0)
            WTF::fastFree(v41 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
          v39 -= 40;
        }
        while (v39);
        v15 = *(_QWORD *)(v11 + 96);
      }
      if (v15)
      {
        *(_QWORD *)(v11 + 96) = 0;
        *(_DWORD *)(v11 + 104) = 0;
        WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
      }
      v16 = *(_QWORD *)(v11 + 80);
      if (v16)
      {
        *(_QWORD *)(v11 + 80) = 0;
        *(_DWORD *)(v11 + 88) = 0;
        WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
      }
      v17 = *(_QWORD *)(v11 + 64);
      if (v17)
      {
        *(_QWORD *)(v11 + 64) = 0;
        *(_DWORD *)(v11 + 72) = 0;
        WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
      }
      v18 = *(_QWORD *)(v11 + 56);
      if (v18)
        WTF::fastFree(v18 - 16, a2, a3, a4, a5, a6, a7, a8);
      v19 = *(_QWORD *)(v11 + 32);
      if (v19)
      {
        *(_QWORD *)(v11 + 32) = 0;
        *(_DWORD *)(v11 + 40) = 0;
        WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
      }
      v20 = *(_QWORD *)(v11 + 24);
      if (v20)
        WTF::fastFree(v20 - 16, a2, a3, a4, a5, a6, a7, a8);
      v21 = *(_QWORD *)v11;
      if (*(_QWORD *)v11)
      {
        *(_QWORD *)v11 = 0;
        *(_DWORD *)(v11 + 8) = 0;
        WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
    v22 = *((unsigned int *)this + 45);
    v23 = (_QWORD *)*((_QWORD *)this + 21);
    if ((_DWORD)v22)
    {
      v24 = 32 * v22;
      do
      {
        if ((*v23 & 1) != 0)
          WTF::fastFree(*v23 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v23 += 4;
        v24 -= 32;
      }
      while (v24);
      v23 = (_QWORD *)*((_QWORD *)this + 21);
    }
    if (v23)
    {
      *((_QWORD *)this + 21) = 0;
      *((_DWORD *)this + 44) = 0;
      WTF::fastFree((unint64_t)v23, a2, a3, a4, a5, a6, a7, a8);
    }
    v25 = *((unsigned int *)this + 39);
    v26 = (_QWORD *)*((_QWORD *)this + 18);
    if ((_DWORD)v25)
    {
      v27 = 32 * v25;
      do
      {
        if ((*v26 & 1) != 0)
          WTF::fastFree(*v26 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v26 += 4;
        v27 -= 32;
      }
      while (v27);
      v26 = (_QWORD *)*((_QWORD *)this + 18);
    }
    if (v26)
    {
      *((_QWORD *)this + 18) = 0;
      *((_DWORD *)this + 38) = 0;
      WTF::fastFree((unint64_t)v26, a2, a3, a4, a5, a6, a7, a8);
    }
    v28 = *((unsigned int *)this + 33);
    v29 = (_QWORD *)*((_QWORD *)this + 15);
    if ((_DWORD)v28)
    {
      v30 = 32 * v28;
      do
      {
        if ((*v29 & 1) != 0)
          WTF::fastFree(*v29 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v29 += 4;
        v30 -= 32;
      }
      while (v30);
      v29 = (_QWORD *)*((_QWORD *)this + 15);
    }
    if (v29)
    {
      *((_QWORD *)this + 15) = 0;
      *((_DWORD *)this + 32) = 0;
      WTF::fastFree((unint64_t)v29, a2, a3, a4, a5, a6, a7, a8);
    }
    v31 = *((_QWORD *)this + 12);
    if (v31)
    {
      *((_QWORD *)this + 12) = 0;
      *((_DWORD *)this + 26) = 0;
      WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
    }
    v32 = *((_QWORD *)this + 9);
    if (v32)
    {
      *((_QWORD *)this + 9) = 0;
      *((_DWORD *)this + 20) = 0;
      WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
    }
    v33 = (WTF *)*((_QWORD *)this + 5);
    if ((WTF *)((char *)this + 56) != v33 && v33)
    {
      *((_QWORD *)this + 5) = 0;
      *((_DWORD *)this + 12) = 0;
      WTF::fastFree((unint64_t)v33, a2, a3, a4, a5, a6, a7, a8);
    }
    v34 = *((_QWORD *)this + 3);
    if (v34)
    {
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
      WTF::fastFree(v34, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    --*(_DWORD *)this;
  }
}

void WTF::VectorDestructor<true,WTF::RefPtr<JSC::DFG::BasicBlock,WTF::RawPtrTraits<JSC::DFG::BasicBlock>,WTF::DefaultRefDerefTraits<JSC::DFG::BasicBlock>>>::destruct(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = *v9;
      *v9 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          v11 = *(_QWORD *)(v10 + 208);
          if (v10 + 224 != v11 && v11 != 0)
          {
            *(_QWORD *)(v10 + 208) = 0;
            *(_DWORD *)(v10 + 216) = 0;
            WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
          }
          v13 = *(_QWORD *)(v10 + 200);
          *(_QWORD *)(v10 + 200) = 0;
          if (v13)
          {
            v14 = *(unsigned int *)(v13 + 124);
            v15 = *(_QWORD *)(v13 + 112);
            if ((_DWORD)v14)
            {
              v37 = 40 * v14;
              v38 = (uint64_t *)(v15 + 8);
              do
              {
                v40 = *v38;
                v38 += 5;
                v39 = v40;
                if ((v40 & 1) != 0)
                  WTF::fastFree(v39 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                v37 -= 40;
              }
              while (v37);
              v15 = *(_QWORD *)(v13 + 112);
            }
            if (v15)
            {
              *(_QWORD *)(v13 + 112) = 0;
              *(_DWORD *)(v13 + 120) = 0;
              WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
            }
            v16 = *(unsigned int *)(v13 + 108);
            v17 = *(_QWORD *)(v13 + 96);
            if ((_DWORD)v16)
            {
              v41 = 40 * v16;
              v42 = (uint64_t *)(v17 + 8);
              do
              {
                v44 = *v42;
                v42 += 5;
                v43 = v44;
                if ((v44 & 1) != 0)
                  WTF::fastFree(v43 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                v41 -= 40;
              }
              while (v41);
              v17 = *(_QWORD *)(v13 + 96);
            }
            if (v17)
            {
              *(_QWORD *)(v13 + 96) = 0;
              *(_DWORD *)(v13 + 104) = 0;
              WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
            }
            v18 = *(_QWORD *)(v13 + 80);
            if (v18)
            {
              *(_QWORD *)(v13 + 80) = 0;
              *(_DWORD *)(v13 + 88) = 0;
              WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
            }
            v19 = *(_QWORD *)(v13 + 64);
            if (v19)
            {
              *(_QWORD *)(v13 + 64) = 0;
              *(_DWORD *)(v13 + 72) = 0;
              WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
            }
            v20 = *(_QWORD *)(v13 + 56);
            if (v20)
              WTF::fastFree(v20 - 16, a2, a3, a4, a5, a6, a7, a8);
            v21 = *(_QWORD *)(v13 + 32);
            if (v21)
            {
              *(_QWORD *)(v13 + 32) = 0;
              *(_DWORD *)(v13 + 40) = 0;
              WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
            }
            v22 = *(_QWORD *)(v13 + 24);
            if (v22)
              WTF::fastFree(v22 - 16, a2, a3, a4, a5, a6, a7, a8);
            v23 = *(_QWORD *)v13;
            if (*(_QWORD *)v13)
            {
              *(_QWORD *)v13 = 0;
              *(_DWORD *)(v13 + 8) = 0;
              WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
            }
            WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
          }
          v24 = *(unsigned int *)(v10 + 180);
          v25 = *(_QWORD **)(v10 + 168);
          if ((_DWORD)v24)
          {
            v26 = 32 * v24;
            do
            {
              if ((*v25 & 1) != 0)
                WTF::fastFree(*v25 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
              v25 += 4;
              v26 -= 32;
            }
            while (v26);
            v25 = *(_QWORD **)(v10 + 168);
          }
          if (v25)
          {
            *(_QWORD *)(v10 + 168) = 0;
            *(_DWORD *)(v10 + 176) = 0;
            WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          }
          v27 = *(unsigned int *)(v10 + 156);
          v28 = *(_QWORD **)(v10 + 144);
          if ((_DWORD)v27)
          {
            v29 = 32 * v27;
            do
            {
              if ((*v28 & 1) != 0)
                WTF::fastFree(*v28 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
              v28 += 4;
              v29 -= 32;
            }
            while (v29);
            v28 = *(_QWORD **)(v10 + 144);
          }
          if (v28)
          {
            *(_QWORD *)(v10 + 144) = 0;
            *(_DWORD *)(v10 + 152) = 0;
            WTF::fastFree((unint64_t)v28, a2, a3, a4, a5, a6, a7, a8);
          }
          v30 = *(unsigned int *)(v10 + 132);
          v31 = *(_QWORD **)(v10 + 120);
          if ((_DWORD)v30)
          {
            v32 = 32 * v30;
            do
            {
              if ((*v31 & 1) != 0)
                WTF::fastFree(*v31 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
              v31 += 4;
              v32 -= 32;
            }
            while (v32);
            v31 = *(_QWORD **)(v10 + 120);
          }
          if (v31)
          {
            *(_QWORD *)(v10 + 120) = 0;
            *(_DWORD *)(v10 + 128) = 0;
            WTF::fastFree((unint64_t)v31, a2, a3, a4, a5, a6, a7, a8);
          }
          v33 = *(_QWORD *)(v10 + 96);
          if (v33)
          {
            *(_QWORD *)(v10 + 96) = 0;
            *(_DWORD *)(v10 + 104) = 0;
            WTF::fastFree(v33, a2, a3, a4, a5, a6, a7, a8);
          }
          v34 = *(_QWORD *)(v10 + 72);
          if (v34)
          {
            *(_QWORD *)(v10 + 72) = 0;
            *(_DWORD *)(v10 + 80) = 0;
            WTF::fastFree(v34, a2, a3, a4, a5, a6, a7, a8);
          }
          v35 = *(_QWORD *)(v10 + 40);
          if (v10 + 56 != v35 && v35)
          {
            *(_QWORD *)(v10 + 40) = 0;
            *(_DWORD *)(v10 + 48) = 0;
            WTF::fastFree(v35, a2, a3, a4, a5, a6, a7, a8);
          }
          v36 = *(_QWORD *)(v10 + 24);
          if (v36)
          {
            *(_QWORD *)(v10 + 24) = 0;
            *(_DWORD *)(v10 + 32) = 0;
            WTF::fastFree(v36, a2, a3, a4, a5, a6, a7, a8);
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
      ++v9;
    }
    while (v9 != a2);
  }
}

unint64_t *JSC::DFG::BlockSet::dump(unint64_t *this, WTF::PrintStream *a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  int v20;
  _QWORD v21[4];
  char v22;
  _QWORD v23[3];

  v3 = this;
  v21[0] = " ";
  v21[1] = 2;
  v21[2] = "";
  v21[3] = 1;
  v22 = 0;
  v4 = *this;
  if ((*this & 0x8000000000000000) == 0)
  {
    v5 = *(_QWORD *)(2 * v4);
    if (v5 + 63 < 0x40)
      goto LABEL_7;
    v6 = *(_QWORD *)(2 * v4 + 8);
    if (v6 && (v7 = __clz(__rbit64(v6)), v7 < 0x40))
    {
      v8 = 0;
    }
    else
    {
      if ((v5 + 63) >> 6 == 1)
        goto LABEL_7;
      v17 = 0;
      while (1)
      {
        v18 = *(_QWORD *)(2 * v4 + 0x10 + 8 * v17);
        if (v18)
        {
          v7 = __clz(__rbit64(v18));
          if (v7 <= 0x3F)
            break;
        }
        if (((v5 + 63) >> 6) - 1 == ++v17)
          goto LABEL_7;
      }
      v8 = v17 + 1;
    }
    LODWORD(v5) = v7 + (v8 << 6);
    goto LABEL_7;
  }
  v5 = __clz(__rbit64(v4));
  if (v5 >= 0x3F)
    LODWORD(v5) = 63;
LABEL_7:
  while (1)
  {
    v20 = v5;
    v9 = (v4 & 0x8000000000000000) != 0 ? 63 : *(_QWORD *)(2 * v4);
    if (v5 >= v9)
      return this;
    v19[0] = "#";
    v19[1] = 2;
    v23[0] = v21;
    v23[1] = v19;
    v23[2] = &v20;
    this = (unint64_t *)WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned int>(WTF::CommaPrinter,WTF::ASCIILiteral,unsigned int const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)a2, v23);
    v10 = (v20 + 1);
    v4 = *v3;
    if ((*v3 & 0x8000000000000000) != 0)
    {
      v5 = __clz(__rbit64(v4 >> (v20 + 1))) + v10;
      if (v5 >= 0x3F)
        LODWORD(v5) = 63;
    }
    else
    {
      v5 = *(_QWORD *)(2 * v4);
      v11 = v10 >> 6;
      if (v10 >> 6 < (v5 + 63) >> 6)
      {
        v12 = *(_QWORD *)(2 * v4 + 8 * v11 + 8);
        if (v12)
        {
          v13 = __clz(__rbit64(v12 >> (v20 + 1))) + ((v20 + 1) & 0x3FLL);
          if (v13 < 0x40)
            goto LABEL_15;
        }
        v14 = (v5 + 63) >> 6;
        if (v11 + 1 != v14)
        {
          v15 = v14 - 1;
          while (1)
          {
            v16 = *(_QWORD *)(2 * v4 + 0x10 + 8 * v11);
            if (v16)
            {
              v13 = __clz(__rbit64(v16));
              if (v13 <= 0x3F)
                break;
            }
            if (v15 == ++v11)
              goto LABEL_7;
          }
          LODWORD(v11) = v11 + 1;
LABEL_15:
          LODWORD(v5) = v13 + ((_DWORD)v11 << 6);
        }
      }
    }
  }
}

uint64_t JSC::DFG::ByteCodeParser::allocateUntargetableBlock(JSC::DFG::ByteCodeParser *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = WTF::fastMalloc((WTF *)0x120);
  result = JSC::DFG::BasicBlock::BasicBlock(v2, (void *)0xFFFFFFFFLL, *((unsigned int *)this + 64), *((unsigned int *)this + 65), *((unsigned int *)this + 66), v3, v4, v5, 1.0);
  v7 = *((_QWORD *)this + 3);
  v8 = *(_DWORD *)(v7 + 56);
  v9 = *(unsigned int *)(v7 + 60);
  *(_DWORD *)(result + 8) = v9;
  if ((_DWORD)v9 != v8)
  {
    v10 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 8 * v9);
LABEL_3:
    *v10 = v2;
    *(_DWORD *)(v7 + 60) = v9 + 1;
    return v2;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  v14 = *(const void **)(v7 + 48);
  if (v13 < 9)
  {
    v15 = (void *)(v7 + 64);
    *(_QWORD *)(v7 + 48) = v7 + 64;
    *(_DWORD *)(v7 + 56) = 8;
    goto LABEL_13;
  }
  if (!(v13 >> 29))
  {
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *(_DWORD *)(v7 + 56) = v13;
    *(_QWORD *)(v7 + 48) = v15;
LABEL_13:
    memcpy(v15, v14, 8 * v9);
    if ((const void *)(v7 + 64) != v14 && v14 != 0)
    {
      if (*(const void **)(v7 + 48) == v14)
      {
        *(_QWORD *)(v7 + 48) = 0;
        *(_DWORD *)(v7 + 56) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v9 = *(unsigned int *)(v7 + 60);
    v10 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 8 * v9);
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

_QWORD *JSC::DFG::ByteCodeParser::addToGraph(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  const JSC::CodeOrigin *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  void *v27;
  JSC::DFG::Node *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  _QWORD *result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  __int16 v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;

  v13 = *(_QWORD *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
  {
    v14 = *(unsigned int *)(a1 + 40);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
    if ((_DWORD)v14 == 0x3FFFFFFF || (_DWORD)v14 == -1)
    {
      v17 = 2;
    }
    else if (v14 >> 28)
    {
      v56 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v56 = v15;
      *(_DWORD *)(v56 + 8) = v14;
      v17 = 1;
      v15 = v56;
    }
    else
    {
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      v15 = v14 << 36;
    }
    v90 = v15 | v17;
  }
  else
  {
    JSC::CodeOrigin::CodeOrigin((uint64_t *)&v90, (const JSC::CodeOrigin *)(a1 + 48));
  }
  v18 = (const JSC::CodeOrigin *)(a1 + 56);
  if ((*(_BYTE *)(a1 + 56) & 2) != 0)
  {
    v19 = *(unsigned int *)(a1 + 40);
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
    if ((_DWORD)v19 == 0x3FFFFFFF || (_DWORD)v19 == -1)
    {
      v22 = 2;
    }
    else if (v19 >> 28)
    {
      v57 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v57 = v20;
      *(_DWORD *)(v57 + 8) = v19;
      v22 = 1;
      v20 = v57;
    }
    else
    {
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      v20 = v19 << 36;
    }
    v89 = v20 | v22;
  }
  else
  {
    JSC::CodeOrigin::CodeOrigin((uint64_t *)&v89, v18);
  }
  v23 = v90;
  if ((v90 & 1) != 0)
  {
    v40 = *(_QWORD *)(v90 & 0xFFFFFFFF8);
    if ((v90 & 2) != 0
      || ((v41 = *(unsigned int *)((v90 & 0xFFFFFFFF8) + 8), (_DWORD)v41 != 0x3FFFFFFF)
        ? (v42 = (_DWORD)v41 == -1)
        : (v42 = 1),
          v42))
    {
      v43 = 2;
    }
    else if (v41 >> 28)
    {
      v70 = *(_QWORD *)(v90 & 0xFFFFFFFF8);
      v40 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v40 = v70;
      *(_DWORD *)(v40 + 8) = v41;
      v43 = 1;
    }
    else
    {
      v43 = *(_QWORD *)(v90 & 0xFFFFFFFF8);
      v40 = v41 << 36;
    }
    v23 = v40 | v43;
  }
  v24 = v89;
  if ((v89 & 1) != 0)
  {
    v44 = *(_QWORD *)(v89 & 0xFFFFFFFF8);
    if ((v89 & 2) != 0
      || ((v45 = *(unsigned int *)((v89 & 0xFFFFFFFF8) + 8), (_DWORD)v45 != 0x3FFFFFFF)
        ? (v46 = (_DWORD)v45 == -1)
        : (v46 = 1),
          v46))
    {
      v47 = 2;
    }
    else if (v45 >> 28)
    {
      v71 = *(_QWORD *)(v89 & 0xFFFFFFFF8);
      v44 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v44 = v71;
      *(_DWORD *)(v44 + 8) = v45;
      v47 = 1;
    }
    else
    {
      v47 = *(_QWORD *)(v89 & 0xFFFFFFFF8);
      v44 = v45 << 36;
    }
    v24 = v44 | v47;
  }
  v25 = *(_BYTE *)(a1 + 64);
  v26 = v23;
  if ((v23 & 1) != 0)
  {
    v48 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
    if ((v23 & 2) != 0
      || ((v49 = *(unsigned int *)((v23 & 0xFFFFFFFF8) + 8), (_DWORD)v49 != 0x3FFFFFFF)
        ? (v50 = (_DWORD)v49 == -1)
        : (v50 = 1),
          v50))
    {
      v51 = 2;
    }
    else if (v49 >> 28)
    {
      v72 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
      v81 = *(_BYTE *)(a1 + 64);
      v80 = v24;
      v48 = WTF::fastMalloc((WTF *)0x10);
      v24 = v80;
      v25 = v81;
      *(_QWORD *)v48 = v72;
      *(_DWORD *)(v48 + 8) = v49;
      v51 = 1;
    }
    else
    {
      v51 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
      v48 = v49 << 36;
    }
    v26 = v48 | v51;
  }
  v83 = v26;
  if ((v24 & 1) != 0)
  {
    v52 = v24 & 0xFFFFFFFF8;
    v53 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
    if ((v24 & 2) != 0
      || (v54 = *(unsigned int *)((v24 & 0xFFFFFFFF8) + 8), (_DWORD)v54 == 0x3FFFFFFF)
      || (_DWORD)v54 == -1)
    {
      v55 = 2;
    }
    else if (v54 >> 28)
    {
      v73 = v52;
      v82 = v25;
      v74 = v53;
      v75 = v54;
      v76 = WTF::fastMalloc((WTF *)0x10);
      v52 = v73;
      *(_QWORD *)v76 = v74;
      *(_DWORD *)(v76 + 8) = v75;
      v55 = 1;
      v53 = v76;
      v25 = v82;
    }
    else
    {
      v55 = v53;
      v53 = v54 << 36;
    }
    v84 = v53 | v55;
    v85 = v25;
    v86 = 0;
    if (v52)
      WTF::fastFree(v52, v18, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v84 = v24;
    v85 = v25;
    v86 = 0;
  }
  if ((v23 & 1) != 0 && (v23 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v23 & 0xFFFFFFFF8, v18, a3, a4, a5, a6, a7, a8);
  if ((v89 & 1) != 0 && (v89 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v89 & 0xFFFFFFFF8, v18, a3, a4, a5, a6, a7, a8);
  if ((v90 & 1) != 0 && (v90 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v90 & 0xFFFFFFFF8, v18, a3, a4, a5, a6, a7, a8);
  v89 = a4 & 0xFF00FFFFFFFFFFFFLL;
  v90 = a3 & 0xFF00FFFFFFFFFFFFLL;
  v88 = a5 & 0xFF00FFFFFFFFFFFFLL;
  v87 = a2;
  v34 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(v13 + 1032, &v87, (uint64_t)&v83, (uint64_t *)&v90, (uint64_t *)&v89, (uint64_t *)&v88, a7, a8);
  if ((v84 & 1) != 0 && (v84 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v84 & 0xFFFFFFFF8, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
  if ((v83 & 1) != 0 && (v83 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v83 & 0xFFFFFFFF8, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
  v35 = *(unsigned __int16 *)(v34 + 18);
  *(_BYTE *)(a1 + 457) |= v35 == 379;
  v36 = *(_QWORD *)(a1 + 32);
  v90 = v34;
  result = (_QWORD *)(v36 + 208);
  v38 = *(unsigned int *)(v36 + 220);
  if ((_DWORD)v38 == *(_DWORD *)(v36 + 216))
  {
    result = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v38 + 1, (unint64_t)&v90);
    v38 = *(unsigned int *)(v36 + 220);
    *(_QWORD *)(*(_QWORD *)(v36 + 208) + 8 * v38) = *result;
    v35 = *(unsigned __int16 *)(v34 + 18);
  }
  else
  {
    *(_QWORD *)(*result + 8 * v38) = v34;
  }
  *(_DWORD *)(v36 + 220) = v38 + 1;
  v39 = *(_QWORD *)(a1 + 24);
  if (v35 == 386)
  {
    *(_DWORD *)(v34 + 48) = ~*(_DWORD *)(v39 + 308);
    v58 = *(unsigned int *)(v39 + 308);
    v59 = v58 + 2;
    v60 = *(unsigned int *)(v39 + 304);
    v61 = *(_QWORD *)(v39 + 296);
    if (v58 + 2 > v60)
    {
      v62 = v60 + (v60 >> 2);
      if (v62 >= 0x10)
        v63 = v62 + 1;
      else
        v63 = 16;
      if (v63 <= v59)
        v64 = v58 + 2;
      else
        v64 = v63;
      if (v64 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v65 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v64));
      *(_DWORD *)(v39 + 304) = v64;
      *(_QWORD *)(v39 + 296) = v65;
      if ((_DWORD)v58)
      {
        v77 = 8 * v58;
        v78 = (uint64_t *)v61;
        do
        {
          v79 = *v78++;
          *v65++ = v79;
          v77 -= 8;
        }
        while (v77);
        v65 = *(_QWORD **)(v39 + 296);
      }
      if (v61)
      {
        if (v65 == (_QWORD *)v61)
        {
          *(_QWORD *)(v39 + 296) = 0;
          *(_DWORD *)(v39 + 304) = 0;
        }
        WTF::fastFree(v61, v66, (uint64_t)v28, v29, v30, v31, v32, v33);
        v61 = *(_QWORD *)(v39 + 296);
      }
      else
      {
        v61 = (unint64_t)v65;
      }
    }
    if (v61)
    {
      v67 = *(unsigned int *)(v39 + 308);
      if (v59 != v67)
      {
        v68 = (_QWORD *)(v61 + 8 * v67);
        v69 = 8 * v58 - 8 * v67 + 16;
        do
        {
          *v68++ = 0x3FFFFFFF00000000;
          v69 -= 8;
        }
        while (v69);
      }
    }
    *(_DWORD *)(v39 + 308) = v59;
    v39 = *(_QWORD *)(a1 + 24);
  }
  if (JSC::DFG::clobbersExitState((JSC::DFG *)v39, (JSC::DFG::Graph *)v34, v28, v29, v30, v31, v32, v33))
    *(_BYTE *)(a1 + 64) = 0;
  return (_QWORD *)v34;
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  const JSC::CodeOrigin *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  JSC::DFG::Node *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _QWORD *result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  void *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  char v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  __int16 v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;

  v14 = *(_QWORD *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
  {
    v15 = *(unsigned int *)(a1 + 40);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
    if ((_DWORD)v15 == 0x3FFFFFFF || (_DWORD)v15 == -1)
    {
      v18 = 2;
    }
    else if (v15 >> 28)
    {
      v57 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v57 = v16;
      *(_DWORD *)(v57 + 8) = v15;
      v18 = 1;
      v16 = v57;
    }
    else
    {
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      v16 = v15 << 36;
    }
    v91 = v16 | v18;
  }
  else
  {
    JSC::CodeOrigin::CodeOrigin(&v91, (const JSC::CodeOrigin *)(a1 + 48));
  }
  v19 = (const JSC::CodeOrigin *)(a1 + 56);
  if ((*(_BYTE *)(a1 + 56) & 2) != 0)
  {
    v20 = *(unsigned int *)(a1 + 40);
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
    if ((_DWORD)v20 == 0x3FFFFFFF || (_DWORD)v20 == -1)
    {
      v23 = 2;
    }
    else if (v20 >> 28)
    {
      v58 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v58 = v21;
      *(_DWORD *)(v58 + 8) = v20;
      v23 = 1;
      v21 = v58;
    }
    else
    {
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      v21 = v20 << 36;
    }
    v90 = v21 | v23;
  }
  else
  {
    JSC::CodeOrigin::CodeOrigin((uint64_t *)&v90, v19);
  }
  v24 = v91;
  if ((v91 & 1) != 0)
  {
    v41 = *(_QWORD *)(v91 & 0xFFFFFFFF8);
    if ((v91 & 2) != 0
      || ((v42 = *(unsigned int *)((v91 & 0xFFFFFFFF8) + 8), (_DWORD)v42 != 0x3FFFFFFF)
        ? (v43 = (_DWORD)v42 == -1)
        : (v43 = 1),
          v43))
    {
      v44 = 2;
    }
    else if (v42 >> 28)
    {
      v71 = *(_QWORD *)(v91 & 0xFFFFFFFF8);
      v41 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v41 = v71;
      *(_DWORD *)(v41 + 8) = v42;
      v44 = 1;
    }
    else
    {
      v44 = *(_QWORD *)(v91 & 0xFFFFFFFF8);
      v41 = v42 << 36;
    }
    v24 = v41 | v44;
  }
  v25 = v90;
  if ((v90 & 1) != 0)
  {
    v45 = *(_QWORD *)(v90 & 0xFFFFFFFF8);
    if ((v90 & 2) != 0
      || ((v46 = *(unsigned int *)((v90 & 0xFFFFFFFF8) + 8), (_DWORD)v46 != 0x3FFFFFFF)
        ? (v47 = (_DWORD)v46 == -1)
        : (v47 = 1),
          v47))
    {
      v48 = 2;
    }
    else if (v46 >> 28)
    {
      v72 = *(_QWORD *)(v90 & 0xFFFFFFFF8);
      v45 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v45 = v72;
      *(_DWORD *)(v45 + 8) = v46;
      v48 = 1;
    }
    else
    {
      v48 = *(_QWORD *)(v90 & 0xFFFFFFFF8);
      v45 = v46 << 36;
    }
    v25 = v45 | v48;
  }
  v26 = *(_BYTE *)(a1 + 64);
  v27 = v24;
  if ((v24 & 1) != 0)
  {
    v49 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
    if ((v24 & 2) != 0
      || ((v50 = *(unsigned int *)((v24 & 0xFFFFFFFF8) + 8), (_DWORD)v50 != 0x3FFFFFFF)
        ? (v51 = (_DWORD)v50 == -1)
        : (v51 = 1),
          v51))
    {
      v52 = 2;
    }
    else if (v50 >> 28)
    {
      v73 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
      v81 = *(_BYTE *)(a1 + 64);
      v79 = v25;
      v49 = WTF::fastMalloc((WTF *)0x10);
      v25 = v79;
      v26 = v81;
      *(_QWORD *)v49 = v73;
      *(_DWORD *)(v49 + 8) = v50;
      v52 = 1;
    }
    else
    {
      v52 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
      v49 = v50 << 36;
    }
    v27 = v49 | v52;
  }
  v83 = v27;
  if ((v25 & 1) != 0)
  {
    v53 = v25 & 0xFFFFFFFF8;
    v54 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
    if ((v25 & 2) != 0
      || (v55 = *(unsigned int *)((v25 & 0xFFFFFFFF8) + 8), (_DWORD)v55 == 0x3FFFFFFF)
      || (_DWORD)v55 == -1)
    {
      v56 = 2;
    }
    else if (v55 >> 28)
    {
      v80 = v25 & 0xFFFFFFFF8;
      v82 = v26;
      v74 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
      v75 = WTF::fastMalloc((WTF *)0x10);
      v53 = v80;
      *(_QWORD *)v75 = v74;
      *(_DWORD *)(v75 + 8) = v55;
      v56 = 1;
      v54 = v75;
      v26 = v82;
    }
    else
    {
      v56 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
      v54 = v55 << 36;
    }
    v84 = v54 | v56;
    v85 = v26;
    v86 = 0;
    if (v53)
      WTF::fastFree(v53, v19, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v84 = v25;
    v85 = v26;
    v86 = 0;
  }
  if ((v24 & 1) != 0 && (v24 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v24 & 0xFFFFFFFF8, v19, a3, a4, a5, a6, a7, a8);
  if ((v90 & 1) != 0 && (v90 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v90 & 0xFFFFFFFF8, v19, a3, a4, a5, a6, a7, a8);
  if ((v91 & 1) != 0 && (v91 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v91 & 0xFFFFFFFF8, v19, a3, a4, a5, a6, a7, a8);
  v90 = a4 & 0xFF00FFFFFFFFFFFFLL;
  v91 = a3;
  v88 = a6 & 0xFF00FFFFFFFFFFFFLL;
  v89 = a5 & 0xFF00FFFFFFFFFFFFLL;
  v87 = a2;
  v35 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(v14 + 1032, &v87, (uint64_t)&v83, (uint64_t)&v91, (uint64_t *)&v90, (uint64_t *)&v89, &v88, a8);
  if ((v84 & 1) != 0 && (v84 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v84 & 0xFFFFFFFF8, v28, (uint64_t)v29, v30, v31, v32, v33, v34);
  if ((v83 & 1) != 0 && (v83 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v83 & 0xFFFFFFFF8, v28, (uint64_t)v29, v30, v31, v32, v33, v34);
  v36 = *(unsigned __int16 *)(v35 + 18);
  *(_BYTE *)(a1 + 457) |= v36 == 379;
  v37 = *(_QWORD *)(a1 + 32);
  v91 = v35;
  result = (_QWORD *)(v37 + 208);
  v39 = *(unsigned int *)(v37 + 220);
  if ((_DWORD)v39 == *(_DWORD *)(v37 + 216))
  {
    result = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v39 + 1, (unint64_t)&v91);
    v39 = *(unsigned int *)(v37 + 220);
    *(_QWORD *)(*(_QWORD *)(v37 + 208) + 8 * v39) = *result;
    v36 = *(unsigned __int16 *)(v35 + 18);
  }
  else
  {
    *(_QWORD *)(*result + 8 * v39) = v35;
  }
  *(_DWORD *)(v37 + 220) = v39 + 1;
  v40 = *(_QWORD *)(a1 + 24);
  if (v36 == 386)
  {
    *(_DWORD *)(v35 + 48) = ~*(_DWORD *)(v40 + 308);
    v59 = *(unsigned int *)(v40 + 308);
    v60 = v59 + 2;
    v61 = *(unsigned int *)(v40 + 304);
    v62 = *(_QWORD *)(v40 + 296);
    if (v59 + 2 > v61)
    {
      v63 = v61 + (v61 >> 2);
      if (v63 >= 0x10)
        v64 = v63 + 1;
      else
        v64 = 16;
      if (v64 <= v60)
        v65 = v59 + 2;
      else
        v65 = v64;
      if (v65 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v66 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v65));
      *(_DWORD *)(v40 + 304) = v65;
      *(_QWORD *)(v40 + 296) = v66;
      if ((_DWORD)v59)
      {
        v76 = 8 * v59;
        v77 = (uint64_t *)v62;
        do
        {
          v78 = *v77++;
          *v66++ = v78;
          v76 -= 8;
        }
        while (v76);
        v66 = *(_QWORD **)(v40 + 296);
      }
      if (v62)
      {
        if (v66 == (_QWORD *)v62)
        {
          *(_QWORD *)(v40 + 296) = 0;
          *(_DWORD *)(v40 + 304) = 0;
        }
        WTF::fastFree(v62, v67, (uint64_t)v29, v30, v31, v32, v33, v34);
        v62 = *(_QWORD *)(v40 + 296);
      }
      else
      {
        v62 = (unint64_t)v66;
      }
    }
    if (v62)
    {
      v68 = *(unsigned int *)(v40 + 308);
      if (v60 != v68)
      {
        v69 = (_QWORD *)(v62 + 8 * v68);
        v70 = 8 * v59 - 8 * v68 + 16;
        do
        {
          *v69++ = 0x3FFFFFFF00000000;
          v70 -= 8;
        }
        while (v70);
      }
    }
    *(_DWORD *)(v40 + 308) = v60;
    v40 = *(_QWORD *)(a1 + 24);
  }
  if (JSC::DFG::clobbersExitState((JSC::DFG *)v40, (JSC::DFG::Graph *)v35, v29, v30, v31, v32, v33, v34))
    *(_BYTE *)(a1 + 64) = 0;
  return (_QWORD *)v35;
}

{
  __int16 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  const JSC::CodeOrigin *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;
  JSC::DFG::Node *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _QWORD *result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  void *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int16 v104;
  __int16 v105;
  __int16 v106;
  __int16 v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  char v111;
  __int16 v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v13 = a2;
  v15 = *(_QWORD *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
  {
    v16 = *(unsigned int *)(a1 + 40);
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
    if ((_DWORD)v16 == 0x3FFFFFFF || (_DWORD)v16 == -1)
    {
      v19 = 2;
    }
    else if (v16 >> 28)
    {
      v67 = *(_QWORD *)(a1 + 24);
      v68 = WTF::fastMalloc((WTF *)0x10);
      v15 = v67;
      v13 = a2;
      *(_QWORD *)v68 = v17;
      *(_DWORD *)(v68 + 8) = v16;
      v19 = 1;
      v17 = v68;
    }
    else
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      v17 = v16 << 36;
    }
    v117 = v17 | v19;
  }
  else
  {
    v96 = *(_QWORD *)(a1 + 24);
    JSC::CodeOrigin::CodeOrigin(&v117, (const JSC::CodeOrigin *)(a1 + 48));
    v15 = v96;
    v13 = a2;
  }
  v20 = (const JSC::CodeOrigin *)(a1 + 56);
  if ((*(_BYTE *)(a1 + 56) & 2) != 0)
  {
    v21 = *(unsigned int *)(a1 + 40);
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
    if ((_DWORD)v21 == 0x3FFFFFFF || (_DWORD)v21 == -1)
    {
      v24 = 2;
    }
    else if (v21 >> 28)
    {
      v69 = v13;
      v70 = v15;
      v71 = WTF::fastMalloc((WTF *)0x10);
      v15 = v70;
      v13 = v69;
      *(_QWORD *)v71 = v22;
      *(_DWORD *)(v71 + 8) = v21;
      v24 = 1;
      v22 = v71;
    }
    else
    {
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      v22 = v21 << 36;
    }
    v116 = v22 | v24;
  }
  else
  {
    v97 = v13;
    v98 = v15;
    JSC::CodeOrigin::CodeOrigin(&v116, v20);
    v15 = v98;
    v13 = v97;
  }
  v25 = v117;
  if ((v117 & 1) != 0)
  {
    v42 = *(_QWORD *)(v117 & 0xFFFFFFFF8);
    if ((v117 & 2) != 0
      || ((v43 = *(unsigned int *)((v117 & 0xFFFFFFFF8) + 8), (_DWORD)v43 != 0x3FFFFFFF)
        ? (v44 = (_DWORD)v43 == -1)
        : (v44 = 1),
          v44))
    {
      v45 = 2;
    }
    else if (v43 >> 28)
    {
      v84 = v13;
      v85 = v15;
      v86 = WTF::fastMalloc((WTF *)0x10);
      v15 = v85;
      v13 = v84;
      *(_QWORD *)v86 = v42;
      *(_DWORD *)(v86 + 8) = v43;
      v45 = 1;
      v42 = v86;
    }
    else
    {
      v45 = *(_QWORD *)(v117 & 0xFFFFFFFF8);
      v42 = v43 << 36;
    }
    v25 = v42 | v45;
  }
  v26 = v116;
  if ((v116 & 1) != 0)
  {
    v46 = *(_QWORD *)(v116 & 0xFFFFFFFF8);
    if ((v116 & 2) != 0
      || ((v47 = *(unsigned int *)((v116 & 0xFFFFFFFF8) + 8), (_DWORD)v47 != 0x3FFFFFFF)
        ? (v48 = (_DWORD)v47 == -1)
        : (v48 = 1),
          v48))
    {
      v49 = 2;
    }
    else if (v47 >> 28)
    {
      v105 = v13;
      v87 = v15;
      v88 = WTF::fastMalloc((WTF *)0x10);
      v15 = v87;
      v13 = v105;
      *(_QWORD *)v88 = v46;
      *(_DWORD *)(v88 + 8) = v47;
      v49 = 1;
      v46 = v88;
    }
    else
    {
      v49 = *(_QWORD *)(v116 & 0xFFFFFFFF8);
      v46 = v47 << 36;
    }
    v26 = v46 | v49;
  }
  v27 = *(_BYTE *)(a1 + 64);
  v28 = v25;
  if ((v25 & 1) != 0)
  {
    v50 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
    if ((v25 & 2) != 0
      || ((v51 = *(unsigned int *)((v25 & 0xFFFFFFFF8) + 8), (_DWORD)v51 != 0x3FFFFFFF)
        ? (v52 = (_DWORD)v51 == -1)
        : (v52 = 1),
          v52))
    {
      v53 = 2;
    }
    else if (v51 >> 28)
    {
      v106 = v13;
      v100 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
      v102 = v15;
      v89 = WTF::fastMalloc((WTF *)0x10);
      v15 = v102;
      v13 = v106;
      *(_QWORD *)v89 = v100;
      *(_DWORD *)(v89 + 8) = v51;
      v53 = 1;
      v50 = v89;
    }
    else
    {
      v53 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
      v50 = v51 << 36;
    }
    v28 = v50 | v53;
  }
  v108 = v28;
  if ((v26 & 1) != 0)
  {
    v54 = v26 & 0xFFFFFFFF8;
    v55 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
    if ((v26 & 2) != 0
      || (v56 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v56 == 0x3FFFFFFF)
      || (_DWORD)v56 == -1)
    {
      v57 = 2;
    }
    else if (v56 >> 28)
    {
      v101 = v54;
      v103 = v15;
      v107 = v13;
      v99 = v55;
      v90 = WTF::fastMalloc((WTF *)0x10);
      v13 = v107;
      v91 = v90;
      v54 = v101;
      v15 = v103;
      *(_QWORD *)v91 = v99;
      *(_DWORD *)(v91 + 8) = v56;
      v57 = 1;
      v55 = v91;
    }
    else
    {
      v57 = v55;
      v55 = v56 << 36;
    }
    v26 = v55 | v57;
    v109 = v55 | v57;
    v110 = v27;
    v111 = 0;
    if (v54)
    {
      v104 = v13;
      v58 = v15;
      WTF::fastFree(v54, v20, a3, a4, a5, a6, a7, a8);
      v15 = v58;
      v13 = v104;
    }
  }
  else
  {
    v109 = v26;
    v110 = v27;
    v111 = 0;
  }
  if ((v25 & 1) != 0)
  {
    v59 = v25 & 0xFFFFFFFF8;
    if ((v25 & 0xFFFFFFFF8) != 0)
    {
      v60 = v13;
      v61 = v15;
      WTF::fastFree(v59, v20, a3, a4, a5, a6, a7, a8);
      v15 = v61;
      v13 = v60;
    }
  }
  if ((v116 & 1) != 0 && (v116 & 0xFFFFFFFF8) != 0)
  {
    v62 = v13;
    v63 = v15;
    WTF::fastFree(v116 & 0xFFFFFFFF8, v20, a3, a4, a5, a6, a7, a8);
    v15 = v63;
    v13 = v62;
  }
  if ((v117 & 1) != 0 && (v117 & 0xFFFFFFFF8) != 0)
  {
    v64 = v13;
    v65 = v15;
    WTF::fastFree(v117 & 0xFFFFFFFF8, v20, a3, a4, a5, a6, a7, a8);
    v15 = v65;
    v13 = v64;
  }
  v117 = a3;
  v115 = a5 & 0xFF00FFFFFFFFFFFFLL;
  v116 = a4;
  v113 = a7 & 0xFF00FFFFFFFFFFFFLL;
  v114 = a6 & 0xFF00FFFFFFFFFFFFLL;
  v112 = v13;
  v36 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(v15 + 1032, &v112, (uint64_t)&v108, &v117, &v116, (uint64_t *)&v115, (uint64_t *)&v114, &v113);
  if ((v26 & 1) != 0 && (v26 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v26 & 0xFFFFFFFF8, v29, (uint64_t)v30, v31, v32, v33, v34, v35);
  if ((v28 & 1) != 0 && (v28 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v28 & 0xFFFFFFFF8, v29, (uint64_t)v30, v31, v32, v33, v34, v35);
  v37 = *(unsigned __int16 *)(v36 + 18);
  *(_BYTE *)(a1 + 457) |= v37 == 379;
  v38 = *(_QWORD *)(a1 + 32);
  v117 = v36;
  result = (_QWORD *)(v38 + 208);
  v40 = *(unsigned int *)(v38 + 220);
  if ((_DWORD)v40 == *(_DWORD *)(v38 + 216))
  {
    result = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v40 + 1, (unint64_t)&v117);
    v40 = *(unsigned int *)(v38 + 220);
    *(_QWORD *)(*(_QWORD *)(v38 + 208) + 8 * v40) = *result;
    v37 = *(unsigned __int16 *)(v36 + 18);
  }
  else
  {
    *(_QWORD *)(*result + 8 * v40) = v36;
  }
  *(_DWORD *)(v38 + 220) = v40 + 1;
  v41 = *(_QWORD *)(a1 + 24);
  if (v37 == 386)
  {
    *(_DWORD *)(v36 + 48) = ~*(_DWORD *)(v41 + 308);
    v72 = *(unsigned int *)(v41 + 308);
    v73 = v72 + 2;
    v74 = *(unsigned int *)(v41 + 304);
    v75 = *(_QWORD *)(v41 + 296);
    if (v72 + 2 > v74)
    {
      v76 = v74 + (v74 >> 2);
      if (v76 >= 0x10)
        v77 = v76 + 1;
      else
        v77 = 16;
      if (v77 <= v73)
        v78 = v72 + 2;
      else
        v78 = v77;
      if (v78 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v79 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v78));
      *(_DWORD *)(v41 + 304) = v78;
      *(_QWORD *)(v41 + 296) = v79;
      if ((_DWORD)v72)
      {
        v92 = 8 * v72;
        v93 = (uint64_t *)v75;
        do
        {
          v94 = *v93++;
          *v79++ = v94;
          v92 -= 8;
        }
        while (v92);
        v79 = *(_QWORD **)(v41 + 296);
      }
      if (v75)
      {
        if (v79 == (_QWORD *)v75)
        {
          *(_QWORD *)(v41 + 296) = 0;
          *(_DWORD *)(v41 + 304) = 0;
        }
        WTF::fastFree(v75, v80, (uint64_t)v30, v31, v32, v33, v34, v35);
        v75 = *(_QWORD *)(v41 + 296);
      }
      else
      {
        v75 = (unint64_t)v79;
      }
    }
    if (v75)
    {
      v81 = *(unsigned int *)(v41 + 308);
      if (v73 != v81)
      {
        v82 = (_QWORD *)(v75 + 8 * v81);
        v83 = 8 * v72 - 8 * v81 + 16;
        do
        {
          *v82++ = 0x3FFFFFFF00000000;
          v83 -= 8;
        }
        while (v83);
      }
    }
    *(_DWORD *)(v41 + 308) = v73;
    v41 = *(_QWORD *)(a1 + 24);
  }
  if (JSC::DFG::clobbersExitState((JSC::DFG *)v41, (JSC::DFG::Graph *)v36, v30, v31, v32, v33, v34, v35))
    *(_BYTE *)(a1 + 64) = 0;
  return (_QWORD *)v36;
}

uint64_t JSC::DFG::ByteCodeParser::handleCall(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char **a8, uint64_t **__dst, uint64_t a10, uint64_t a11)
{
  unsigned int v14;
  unsigned int v15;
  unint64_t v17;
  JSC::RecordedStatuses *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x8_t v30;
  uint64_t result;
  BOOL v32;
  uint64_t v33;
  unsigned int v35;
  uint64_t v36;

  v14 = a5;
  v15 = a4;
  v35 = a3;
  if (*(unsigned __int16 *)(a6 + 18) <= 2u)
  {
    v17 = **(_QWORD **)(a6 + 72);
    if (v17 && (v17 & 0xFFFE000000000002) == 0)
      JSC::CallLinkStatus::setProvenConstantCallee(__dst, (void *)v17, a3, a4, a5, a6, a7, (uint64_t)a8);
  }
  if (*((_DWORD *)__dst + 3))
  {
    v19 = *(JSC::RecordedStatuses **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 344);
    JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&v36, *(_DWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24));
    v20 = JSC::RecordedStatuses::addCallLinkStatus(v19, (const JSC::CodeOrigin *)&v36, __dst);
    JSC::DFG::ByteCodeParser::addToGraph(a1, 420, (uint64_t)v20, a6, 0, 0, v21, v22);
    if ((v36 & 1) != 0 && (v36 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v36 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
    result = JSC::DFG::ByteCodeParser::handleInlining(a1, (WTF *)a6, a2, (uint64_t)__dst, a8, ((_DWORD)a8 + 5), a7, v14, v30, v35, v15, a10, a11);
    if ((result - 1) < 2)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 112);
      if (v33)
        ++*(_DWORD *)(v33 + 104);
      v32 = (_DWORD)result == 2;
      return !v32;
    }
    if (!(_DWORD)result)
      return result;
  }
  if (v15 == 7 && !(_BYTE)a11)
    JSC::DFG::ByteCodeParser::addToGraph(a1, 192, (uint64_t)&JSC::NullSetterFunction::s_info, a6, 0, 0, a7, (uint64_t)a8);
  v32 = *(unsigned __int16 *)(JSC::DFG::ByteCodeParser::addCall(a1, a2, v35, a6, a7, (uint64_t)a8, a10) + 18) == 369;
  return !v32;
}

unint64_t JSC::DFG::ByteCodeParser::currentCodeOrigin(unint64_t this, unsigned int a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t *v4;
  uint64_t v6;

  v3 = a3;
  v4 = (unint64_t *)this;
  if (a2 == 0x3FFFFFFF || a2 == -1)
  {
    v6 = 2;
  }
  else if (a2 >> 28)
  {
    this = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)this = v3;
    *(_DWORD *)(this + 8) = a2;
    v6 = 1;
    v3 = this;
  }
  else
  {
    v6 = a3;
    v3 = (unint64_t)a2 << 36;
  }
  *v4 = v3 | v6;
  return this;
}

uint64_t JSC::DFG::ByteCodeParser::handleInlining(uint64_t a1, WTF *a2, unint64_t a3, uint64_t a4, char **a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9, unsigned __int16 a10, unsigned int a11, uint64_t a12, char a13)
{
  unsigned int v15;
  unsigned int v20;
  _BOOL4 v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char **v26;
  BOOL v27;
  uint64_t v29;
  unsigned int v30;
  uint64_t result;
  char ***v32;
  int v33;
  char v34;
  uint64_t v35;
  _BOOL4 v36;
  char **v37;
  BOOL v38;
  __int128 *v40;
  char *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *Direct;
  int8x8_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _BOOL4 v72;
  char **v73;
  BOOL v74;
  uint64_t v76;
  _OWORD *v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  _BOOL4 v81;
  char **v82;
  BOOL v83;
  __int128 *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  JSC::DFG::BasicBlock *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  WTF *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int16 v161;
  _BOOL4 v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t UntargetableBlock;
  unint64_t v169;
  _QWORD *v170;
  __int128 v171;
  __int128 v172;
  _DWORD v173[3];

  if ((unint64_t)&v161 < *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8))
    return 3;
  v15 = a6;
  if (!a11)
    goto LABEL_3;
  if (a11 > 0xB)
  {
LABEL_143:
    __break(0xC471u);
    JUMPOUT(0x1982F6BD0);
  }
  if (((1 << a11) & 0xFEC) == 0)
  {
    if (((1 << a11) & 0x12) != 0)
    {
      v20 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 16) & 0xFFFFFFFE;
      v21 = v20 == 4;
      v40 = &xmmword_1ECF4C4A0;
      if (v20 != 4)
        v40 = (__int128 *)((char *)&xmmword_1ECF4C490 + 4);
      v22 = *(_DWORD *)v40;
      v41 = (char *)&xmmword_1ECF4C490 + 12;
      if (v20 == 4)
        v41 = (char *)&xmmword_1ECF4C4A0 + 8;
      v42 = *(_DWORD *)v41;
      if (v42 < v22)
        v22 = v42;
      goto LABEL_5;
    }
    goto LABEL_143;
  }
LABEL_3:
  v20 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 16) & 0xFFFFFFFE;
  if (v20 == 4)
  {
    v22 = xmmword_1ECF4C4A0;
    v21 = 1;
  }
  else
  {
    v21 = 0;
    v22 = DWORD1(xmmword_1ECF4C490);
  }
LABEL_5:
  v23 = *(_DWORD *)(a4 + 12);
  if (!v23)
  {
    v173[0] = v22;
    goto LABEL_29;
  }
  v24 = *(unsigned int *)(a4 + 12);
  while (1)
  {
    --v24;
    v25 = *(unsigned int *)(16 * (**(_DWORD **)(*(_QWORD *)a4 + 8 * v24) & 0xFFFFFFFE) + 0x4C);
    v26 = (char **)(16 * v25);
    v27 = !(_DWORD)v25 || v26 == &JSC::ExecutableBase::s_info;
    if (!v27)
      break;
    if ((_DWORD)v25)
      goto LABEL_20;
LABEL_17:
    if (!v24)
      goto LABEL_24;
  }
  do
    v26 = (char **)v26[2];
  while (v26 != &JSC::ExecutableBase::s_info && v26 != 0);
  if (!v26)
    goto LABEL_17;
LABEL_20:
  v27 = !v21;
  v29 = 1176;
  if (!v27)
    v29 = 1188;
  v30 = *(_DWORD *)((char *)g_config + v29);
  if (v30 < v22)
    v22 = v30;
LABEL_24:
  v173[0] = v22;
  if (!*(_BYTE *)(a4 + 24) && v23 == 1)
    return JSC::DFG::ByteCodeParser::handleCallVariant((_QWORD *)a1, a2, a3, **(char ****)a4, a5, a6, a7, a8, a9, a10, a11, a12, v173, 0, 1);
LABEL_29:
  result = 3;
  if (v20 == 4 && (_BYTE)word_1ECF4C438 && HIBYTE(word_1ECF4C438) | *(unsigned __int8 *)(a4 + 26))
  {
    v169 = a3;
    if (v23)
    {
      v32 = *(char ****)a4;
      v33 = 1;
      v34 = 1;
      do
      {
        v35 = *(unsigned int *)(16 * (*(_DWORD *)v32[--v23] & 0xFFFFFFFE) + 0x4C);
        v36 = *(_DWORD *)(16 * (*(_DWORD *)v32[v23] & 0xFFFFFFFE) + 0x4C) != 0;
        v37 = (char **)(16 * v35);
        if ((_DWORD)v35)
          v38 = v37 == &JSC::ExecutableBase::s_info;
        else
          v38 = 1;
        if (!v38)
        {
          do
          {
            v37 = (char **)v37[2];
            v36 = v37 != 0;
          }
          while (v37 != &JSC::ExecutableBase::s_info && v37 != 0);
        }
        v34 &= !v36;
        v33 &= v36;
      }
      while (v23);
      if ((v34 & 1) == 0)
      {
        if (v33)
        {
          v170 = JSC::DFG::ByteCodeParser::addToGraph(a1, 134, (uint64_t)a2, 0, 0, a6, a7, a8);
          v163 = 0;
          goto LABEL_59;
        }
        return 3;
      }
    }
    v163 = 1;
    v170 = a2;
LABEL_59:
    v166 = a8;
    v43 = (_DWORD)a5 + 3;
    v44 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
    if (v44)
      v43 += HIDWORD(*(_QWORD *)(v44 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v44 + 24) >> 28) >> 24 << 20);
    v167 = v43 | ((unint64_t)(v43 >> 31) << 32);
    JSC::DFG::ByteCodeParser::setDirect(a1, v167, (uint64_t)a2, 1, (uint64_t)a5, a6, a7, a8);
    *(_BYTE *)(a1 + 64) = 1;
    JSC::DFG::ByteCodeParser::addToGraph(a1, 22, 0, 0, 0, v45, v46, v47);
    v48 = *(_QWORD *)(a1 + 24);
    v49 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)(v49 + 8) = 0;
    *(_QWORD *)(v49 + 16) = 0;
    *(_QWORD *)v49 = 0;
    *(_DWORD *)(v49 + 24) = 2143289344;
    *(_QWORD *)(v49 + 32) = 0xFFFFFFFFLL;
    *(_BYTE *)(v49 + 44) = 0;
    *(_QWORD *)(v49 + 48) = 0;
    *(_QWORD *)(v49 + 48) = *(_QWORD *)(v48 + 528);
    *(_QWORD *)(v48 + 528) = v49;
    *(_DWORD *)(v49 + 40) = 3;
    JSC::DFG::ByteCodeParser::addToGraph(a1, 366, v49, (uint64_t)v170, 0, 0, v50, v51);
    UntargetableBlock = JSC::DFG::ByteCodeParser::allocateUntargetableBlock((JSC::DFG::ByteCodeParser *)a1);
    v162 = *(_BYTE *)(a4 + 24) != 0;
    LODWORD(v170) = *(_DWORD *)(a1 + 40);
    if (*(_DWORD *)(a4 + 12))
    {
      v52 = 0;
      v164 = v166;
      v165 = v15;
      while (1)
      {
        *(_DWORD *)(a1 + 40) = (_DWORD)v170;
        v53 = JSC::DFG::ByteCodeParser::allocateUntargetableBlock((JSC::DFG::ByteCodeParser *)a1);
        *(_QWORD *)(a1 + 32) = v53;
        *(_DWORD *)(a1 + 116) = 0;
        *(_BYTE *)(a1 + 64) = 1;
        Direct = (WTF *)JSC::DFG::ByteCodeParser::getDirect(a1, v167, v54, v55, v56, v57, v58, v59);
        if (v52 >= *(unsigned int *)(a4 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x1982F6BD8);
        }
        if (JSC::DFG::ByteCodeParser::handleCallVariant((_QWORD *)a1, Direct, v169, *(char ***)(*(_QWORD *)a4 + 8 * v52), a5, v165, a7, v164, v61, a10, a11, a12, v173, UntargetableBlock, 0) == 3)break;
        v68 = *(unsigned int *)(a4 + 12);
        if (v163)
        {
          if (v52 >= v68)
          {
            __break(0xC471u);
            JUMPOUT(0x1982F6BE8);
          }
          v70 = *(_QWORD *)(*(_QWORD *)a4 + 8 * v52);
          v71 = *(unsigned int *)(16 * (*(_DWORD *)v70 & 0xFFFFFFFE) + 0x4C);
          v72 = *(_DWORD *)(16 * (*(_DWORD *)v70 & 0xFFFFFFFE) + 0x4C) != 0;
          v73 = (char **)(16 * v71);
          if ((_DWORD)v71)
            v74 = v73 == &JSC::ExecutableBase::s_info;
          else
            v74 = 1;
          if (!v74)
          {
            do
            {
              v73 = (char **)v73[2];
              v72 = v73 != 0;
            }
            while (v73 != &JSC::ExecutableBase::s_info && v73 != 0);
          }
          if (v72)
            goto LABEL_147;
        }
        else
        {
          if (v52 >= v68)
          {
            __break(0xC471u);
            JUMPOUT(0x1982F6BE0);
          }
          v69 = *(_QWORD *)(*(_QWORD *)a4 + 8 * v52);
          if (v69 && *(_BYTE *)(v69 + 5) == 26)
          {
            v70 = *(_QWORD *)(v69 + 24);
            if ((v70 & 1) != 0)
              v70 = *(_QWORD *)((v70 & 0xFFFFFFFFFFFFFFFELL) + 48);
          }
          else
          {
            v80 = *(unsigned int *)(16 * (*(_DWORD *)v69 & 0xFFFFFFFE) + 0x4C);
            v81 = *(_DWORD *)(16 * (*(_DWORD *)v69 & 0xFFFFFFFE) + 0x4C) != 0;
            v82 = (char **)(16 * v80);
            if ((_DWORD)v80)
              v83 = v82 == &JSC::ExecutableBase::s_info;
            else
              v83 = 1;
            if (!v83)
            {
              do
              {
                v82 = (char **)v82[2];
                v81 = v82 != 0;
              }
              while (v82 != &JSC::ExecutableBase::s_info && v82 != 0);
            }
            if (v81)
              v70 = *(_QWORD *)(*(_QWORD *)a4 + 8 * v52);
            else
              v70 = 0;
          }
        }
        v171 = (unint64_t)JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 24), v70, v62, v63, v64, v65, v66, v67);
        *(_QWORD *)&v172 = v53;
        DWORD2(v172) = 2143289344;
        v76 = *(unsigned int *)(v49 + 12);
        if ((_DWORD)v76 == *(_DWORD *)(v49 + 8))
        {
          v85 = (__int128 *)WTF::Vector<JSC::DFG::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v49, v76 + 1, (unint64_t)&v171);
          v77 = (_OWORD *)(*(_QWORD *)v49 + 32 * *(unsigned int *)(v49 + 12));
          v78 = *v85;
          v79 = v85[1];
        }
        else
        {
          v77 = (_OWORD *)(*(_QWORD *)v49 + 32 * v76);
          v78 = v171;
          v79 = v172;
        }
        *v77 = v78;
        v77[1] = v79;
        ++*(_DWORD *)(v49 + 12);
        if (++v52 >= *(unsigned int *)(a4 + 12))
          goto LABEL_115;
      }
      JSC::DFG::Graph::killBlockAndItsContents(*(JSC::DFG::Graph **)(a1 + 24), *(JSC::DFG::BasicBlock::SSAData ***)(a1 + 32), v62, v63, v64, v65, v66, v67);
      v93 = *(_QWORD *)(a1 + 24);
      v94 = *(unsigned int *)(v93 + 60);
      if (!(_DWORD)v94)
      {
LABEL_147:
        __break(0xC471u);
        JUMPOUT(0x1982F6BA4);
      }
      v95 = v94 - 1;
      v96 = *(_QWORD *)(v93 + 48);
      v97 = *(JSC::DFG::BasicBlock **)(v96 + 8 * v95);
      *(_QWORD *)(v96 + 8 * v95) = 0;
      if (v97)
      {
        if (*(_DWORD *)v97 == 1)
        {
          JSC::DFG::BasicBlock::~BasicBlock(v97, v86, v87, v88, v89, v90, v91, v92);
          WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
        }
        else
        {
          --*(_DWORD *)v97;
        }
      }
      *(_DWORD *)(v93 + 60) = v95;
      v98 = 1;
    }
    else
    {
LABEL_115:
      v98 = v162;
    }
    v99 = JSC::DFG::ByteCodeParser::allocateUntargetableBlock((JSC::DFG::ByteCodeParser *)a1);
    *(_QWORD *)(a1 + 32) = v99;
    *(_DWORD *)(a1 + 40) = (_DWORD)v170;
    *(_BYTE *)(a1 + 64) = 1;
    *(_QWORD *)(v49 + 16) = v99;
    *(_DWORD *)(v49 + 24) = 2143289344;
    *(_DWORD *)(a1 + 116) = 0;
    v109 = JSC::DFG::ByteCodeParser::getDirect(a1, v167, v100, v101, v102, v103, v104, v105);
    v110 = v166;
    if (!v98)
    {
      JSC::DFG::ByteCodeParser::addToGraph(a1, 185, 0, 0, 0, v106, v107, v108);
      JSC::DFG::ByteCodeParser::addToGraph(a1, 23, v109, 0, 0, v135, v136, v137);
      if ((int)a7 >= 1)
      {
        v141 = (_DWORD)a5 + 5;
        v142 = a7;
        do
        {
          v143 = JSC::DFG::ByteCodeParser::get(a1, v141 | ((unint64_t)(v141 >> 31) << 32), v138, v139, v140, v111, v112, v113);
          JSC::DFG::ByteCodeParser::addToGraph(a1, 23, (uint64_t)v143, 0, 0, v144, v145, v146);
          ++v141;
          --v142;
        }
        while (v142);
      }
      v147 = v169;
      if (HIDWORD(v169) == 2)
      {
        v110 = v166;
        if ((v169 & 0x80000000) != 0)
          goto LABEL_107;
      }
      else
      {
        v110 = v166;
        if ((_DWORD)v169 == 0x3FFFFFFF)
          goto LABEL_107;
      }
      v148 = JSC::DFG::ByteCodeParser::addToGraph(a1, 380, 0, 0, 0, v111, v112, v113);
      JSC::DFG::ByteCodeParser::set(a1, v147, (uint64_t)v148, 0, v149, v150, v151, v152);
      goto LABEL_107;
    }
    if (a11 == 7 && !a13)
      JSC::DFG::ByteCodeParser::addToGraph(a1, 192, (uint64_t)&JSC::NullSetterFunction::s_info, v109, 0, 0, v107, v108);
    JSC::DFG::ByteCodeParser::addCall(a1, v169, a10, v109, a7, (uint64_t)a5, a12);
LABEL_107:
    *(_DWORD *)(a1 + 40) = v110;
    *(_BYTE *)(a1 + 64) = 1;
    if (*(_DWORD *)(a1 + 380))
    {
      v121 = 0;
      v122 = 0;
      do
      {
        v123 = *(_QWORD *)(a1 + 368) + v121;
        v124 = *(_QWORD *)(v123 + 8);
        v125 = *(_QWORD *)(v123 + 16);
        v126 = *(unsigned int *)(v123 + 24);
        if (*(_DWORD *)(v123 + 12))
          JSC::DFG::ByteCodeParser::setLocalOrTmp((JSC::CodeOrigin *)a1, (const JSC::CodeOrigin *)v123, v124, v125, v126, v111, v112, v113);
        else
          JSC::DFG::ByteCodeParser::setArgument((_QWORD *)a1, (uint64_t *)v123, v124, v125, v126, v111, v112, v113);
        ++v122;
        v131 = *(unsigned int *)(a1 + 380);
        v121 += 32;
      }
      while (v122 < v131);
      if ((_DWORD)v131)
      {
        v132 = *(uint64_t **)(a1 + 368);
        v133 = 32 * v131;
        do
        {
          v134 = *v132;
          if ((*v132 & 1) != 0 && (v134 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v134 & 0xFFFFFFFF8, v127, v128, v129, v130, v111, v112, v113);
          v132 += 4;
          v133 -= 32;
        }
        while (v133);
      }
    }
    *(_DWORD *)(a1 + 380) = 0;
    v114 = *(_QWORD *)(a1 + 32);
    v115 = *(unsigned int *)(v114 + 220);
    if ((_DWORD)v115)
    {
      v116 = *(_QWORD *)(v114 + 208);
      v117 = 8 * v115;
      v118 = v116 - 8;
      while (1)
      {
        v119 = *(unsigned __int16 *)(*(_QWORD *)(v118 + v117) + 18);
        if ((v119 - 364) < 0xC)
          break;
        if ((v119 - 28) < 2 || (v119 - 23) <= 2)
        {
          v117 -= 8;
          if (v117)
            continue;
        }
        goto LABEL_113;
      }
    }
    else
    {
LABEL_113:
      v120 = JSC::DFG::ByteCodeParser::addToGraph(a1, 364, 0, 0, 0, v111, v112, v113);
      v120[9] = UntargetableBlock;
    }
    *(_DWORD *)(a1 + 116) = 0;
    *(_DWORD *)(a1 + 40) = (_DWORD)v170;
    *(_QWORD *)(a1 + 32) = UntargetableBlock;
    result = 1;
    *(_BYTE *)(a1 + 64) = 1;
  }
  return result;
}

uint64_t JSC::DFG::ByteCodeParser::addCall(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  char v19;

  if (a3 != 369)
  {
LABEL_2:
    v13 = JSC::DFG::ByteCodeParser::addCallWithoutSettingResult(a1, a3, 0, a4, a5, a6, a7, 0, 0);
    if (HIDWORD(a2) == 2)
    {
      if ((a2 & 0x80000000) != 0)
        return v13;
    }
    else if ((_DWORD)a2 == 0x3FFFFFFF)
    {
      return v13;
    }
    JSC::DFG::ByteCodeParser::set(a1, a2, v13, 0, v9, v10, v11, v12);
    return v13;
  }
  v15 = *(_QWORD **)(*(_QWORD *)(a1 + 280) + 24);
  if (v15)
  {
    do
    {
      v16 = v15[2];
      v17 = v15[3] >> 60;
      v15 = (_QWORD *)(v16 & 0xFFFFFFFF8);
      if ((v16 & 1) != 0)
        v15 = (_QWORD *)*v15;
      v18 = (v17 < 0xC) & (0x824u >> v17);
      if (v15)
        v19 = v18;
      else
        v19 = 0;
    }
    while ((v19 & 1) != 0);
    if (!v18)
    {
      a3 = 249;
      goto LABEL_2;
    }
  }
  return JSC::DFG::ByteCodeParser::addCallWithoutSettingResult(a1, 0x171u, 0, a4, a5, a6, 0, 0, 0);
}

_QWORD *JSC::DFG::ByteCodeParser::emitFunctionChecks(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  WTF *v11;
  uint64_t v12;
  char **v13;
  BOOL v14;
  uint64_t v15;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = (_QWORD *)a3;
  if (a4 == 0x3FFFFFFFLL)
    v11 = 0;
  else
    v11 = JSC::DFG::ByteCodeParser::get(a1, a4 | (((a4 >> 31) & 1) << 32), a3, a4, a5, a6, a7, a8);
  v12 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v13 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v14 = v13 == &JSC::ExecutableBase::s_info;
  else
    v14 = 1;
  if (v14)
  {
    if (!(_DWORD)v12)
      goto LABEL_20;
    if (*(_BYTE *)(a2 + 5) != 26)
      goto LABEL_28;
    goto LABEL_26;
  }
  v15 = 16 * v12;
  do
    v15 = *(_QWORD *)(v15 + 16);
  while ((char **)v15 != &JSC::ExecutableBase::s_info && v15 != 0);
  if (v15)
  {
    if (*(_BYTE *)(a2 + 5) != 26)
    {
      do
        v13 = (char **)v13[2];
      while (v13 != &JSC::ExecutableBase::s_info && v13 != 0);
      if (!v13)
        a2 = 0;
      goto LABEL_28;
    }
LABEL_26:
    a2 = *(_QWORD *)(a2 + 24);
    if ((a2 & 1) != 0)
      a2 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFELL) + 48);
LABEL_28:
    v8 = JSC::DFG::ByteCodeParser::addToGraph(a1, 134, (uint64_t)v8, 0, 0, a6, a7, a8);
    goto LABEL_20;
  }
  do
    v13 = (char **)v13[2];
  while (v13 != &JSC::ExecutableBase::s_info && v13 != 0);
  if (v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1982F6E5CLL);
  }
LABEL_20:
  v18 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 24), a2, a3, a4, a5, a6, a7, a8);
  result = JSC::DFG::ByteCodeParser::addToGraph(a1, 182, (uint64_t)v18, (uint64_t)v8, 0, 0, v19, v20);
  if (v11)
    return JSC::DFG::ByteCodeParser::addToGraph(a1, 23, (uint64_t)v11, 0, 0, v22, v23, v24);
  return result;
}

WTF *JSC::DFG::ByteCodeParser::get(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  const void *v38;
  void *v39;
  void *v40;
  double v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  int v56;
  __int128 *v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const JSC::CodeOrigin *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  void *v71;
  JSC::DFG::Node *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  JSC::Structure *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  void *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  _QWORD *v143;
  char v144;
  __int16 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  char v153;

  v8 = a1;
  if ((int)a2 >= 0x40000000)
  {
    v12 = (a2 - 0x40000000);
    v13 = *(unsigned int *)(a1 + 116);
    if (v12 < v13)
    {
      result = *(WTF **)(*(_QWORD *)(a1 + 104) + 8 * v12);
      if (result)
        return result;
    }
    v14 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 8);
    if (*(_DWORD *)(v14 + 172) <= v12)
    {
      __break(0xC471u);
      JUMPOUT(0x1982F7990);
    }
    v15 = *(_QWORD *)(v14 + 160);
    v16 = *(_DWORD **)(*(_QWORD *)(v14 + 56) + 120);
    if (v16 && *v16 > v12)
      v17 = *((unsigned __int8 *)v16 + v12 + 4);
    else
      v17 = 0;
    v18 = *(_QWORD *)(v15 + 8 * v12);
    if (v12 >= v13)
    {
      v19 = (a2 - 0x3FFFFFFF);
      v20 = *(unsigned int *)(v8 + 112);
      if (v20 < v19)
      {
        v35 = v20 + (v20 >> 2);
        if (v35 >= 0x10)
          v36 = v35 + 1;
        else
          v36 = 16;
        if (v36 <= v19)
          v37 = (a2 - 0x3FFFFFFF);
        else
          v37 = v36;
        v38 = *(const void **)(v8 + 104);
        if (v37 < 0x11)
        {
          v39 = (void *)(v8 + 120);
          *(_QWORD *)(v8 + 104) = v8 + 120;
          *(_DWORD *)(v8 + 112) = 16;
        }
        else
        {
          if (v37 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1982F7A40);
          }
          v39 = (void *)WTF::fastMalloc((WTF *)(8 * v37));
          *(_DWORD *)(v8 + 112) = v37;
          *(_QWORD *)(v8 + 104) = v39;
        }
        memcpy(v39, v38, 8 * v13);
        if ((const void *)(v8 + 120) != v38 && v38)
        {
          if (*(const void **)(v8 + 104) == v38)
          {
            *(_QWORD *)(v8 + 104) = 0;
            *(_DWORD *)(v8 + 112) = 0;
          }
          WTF::fastFree((unint64_t)v38, v40, a3, a4, a5, a6, a7, a8);
        }
      }
      *(_DWORD *)(v8 + 116) = v19;
      if (v19 > v13)
      {
        do
          *(_QWORD *)(*(_QWORD *)(v8 + 104) + 8 * v13++) = 0;
        while (v19 != v13);
      }
    }
    v21 = *(_QWORD *)(v8 + 24);
    if (v17 == 2)
    {
      *(_QWORD *)&v41 = v18 - 0x2000000000000;
      if (v18 > 0xFFFDFFFFFFFFFFFFLL)
        v41 = (double)(int)v18;
      v42 = JSC::DFG::Graph::freezeStrong(*(_QWORD *)(v8 + 24), *(_QWORD *)&v41 + 0x2000000000000, a3, a4, a5, a6, a7, a8);
      v45 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v8, 1, (uint64_t)v42, 0, 0, 0, v43, v44);
      goto LABEL_56;
    }
    if (*(_BYTE *)(v21 + 964))
    {
      __break(0xC471u);
      JUMPOUT(0x1982F7428);
    }
    if (!v18)
    {
      v57 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
      }
      goto LABEL_69;
    }
    if ((v18 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v18 + 5) == 18)
    {
      __break(0xC471u);
      goto LABEL_222;
    }
    v46 = (uint64_t *)(v21 + 384);
    v47 = *(_QWORD *)(v21 + 384);
    if (v47
      || (WTF::HashTable<long long,WTF::KeyValuePair<long long,JSC::DFG::FrozenValue *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,JSC::DFG::FrozenValue *>>,WTF::IntHash<long long>,WTF::HashMap<long long,JSC::DFG::FrozenValue *,WTF::IntHash<long long>,JSC::EncodedJSValueHashTraits,WTF::HashTraits<JSC::DFG::FrozenValue *>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::EncodedJSValueHashTraits>::rehash((uint64_t *)(v21 + 384), 8uLL, 0, a4, a5, a6, a7, a8), (v47 = *v46) != 0))
    {
      v48 = *(_DWORD *)(v47 - 8);
    }
    else
    {
      v48 = 0;
    }
    v49 = (v18 + ~(v18 << 32)) ^ ((v18 + ~(v18 << 32)) >> 22);
    v50 = 9 * ((v49 + ~(v49 << 13)) ^ ((v49 + ~(v49 << 13)) >> 8));
    v51 = (v50 ^ (v50 >> 15)) + ~((v50 ^ (v50 >> 15)) << 27);
    v52 = v48 & ((v51 >> 31) ^ v51);
    v53 = (_QWORD *)(v47 + 16 * v52);
    v54 = *v53;
    if (*v53)
    {
      v55 = 0;
      v56 = 1;
      do
      {
        if (v54 == v18)
        {
          v57 = (__int128 *)v53[1];
          goto LABEL_69;
        }
        if (v54 == 4)
          v55 = v53;
        v52 = (v52 + v56) & v48;
        v53 = (_QWORD *)(v47 + 16 * v52);
        v54 = *v53;
        ++v56;
      }
      while (*v53);
      v143 = (_QWORD *)(v47 + 16 * v52);
      if (v55)
      {
        *v55 = 0;
        v55[1] = 0;
        --*(_DWORD *)(*v46 - 16);
        v143 = v55;
      }
    }
    else
    {
      v143 = (_QWORD *)(v47 + 16 * v52);
    }
    *v143 = v18;
    v143[1] = 0;
    v83 = *v46;
    if (*v46)
      v84 = *(_DWORD *)(v83 - 12) + 1;
    else
      v84 = 1;
    *(_DWORD *)(v83 - 12) = v84;
    v85 = *v46;
    if (*v46)
      v86 = *(_DWORD *)(v85 - 12);
    else
      v86 = 0;
    v87 = (*(_DWORD *)(v85 - 16) + v86);
    v88 = *(unsigned int *)(v85 - 4);
    if (v88 > 0x400)
    {
      if (v88 > 2 * v87)
      {
LABEL_115:
        if (v18 >= 0xFFFE000000000000 && (v18 & 0x80000000) == 0)
        {
          v103 = (_QWORD *)(v21 + 416);
          LODWORD(v150) = v18;
          v104 = *(unsigned int *)(v21 + 428);
          if ((_DWORD)v104 == *(_DWORD *)(v21 + 424))
            *(_DWORD *)(*(_QWORD *)(v21 + 416) + 4 * *(unsigned int *)(v21 + 428)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v103, v104 + 1, (unint64_t)&v150);
          else
            *(_DWORD *)(*v103 + 4 * v104) = v18;
          ++*(_DWORD *)(v21 + 428);
        }
        if ((v18 & 0xFFFE000000000002) != 0 || (v89 = *(_DWORD *)v18 & 0xFFFFFFFE, !(_DWORD)v89))
        {
          v90 = 0;
        }
        else
        {
          v90 = (JSC::Structure *)(16 * v89);
          JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(v21 + 24) + 280), 16 * v89, a3, a4, a5, a6, a7, a8);
          JSC::DFG::DesiredWatchpoints::consider((JSC::DFG::DesiredWatchpoints *)(*(_QWORD *)(v21 + 24) + 136), v90, v91, v92, v93, v94, v95, v96);
        }
        v97 = *(_QWORD *)(v21 + 392);
        *(_QWORD *)(v21 + 392) = v97 + 1;
        v98 = v97 >> 4;
        v99 = *(unsigned int *)(v21 + 412);
        if (v97 >> 4 >= v99)
        {
          v106 = WTF::fastMalloc((WTF *)0x180);
          v150 = v106;
          v107 = *(unsigned int *)(v21 + 412);
          if ((_DWORD)v107 == *(_DWORD *)(v21 + 408))
          {
            v108 = (_QWORD *)WTF::Vector<JSC::StatementNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21 + 400, v107 + 1, (unint64_t)&v150);
            v107 = *(unsigned int *)(v21 + 412);
            *(_QWORD *)(*(_QWORD *)(v21 + 400) + 8 * v107) = *v108;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v21 + 400) + 8 * v107) = v106;
          }
          v99 = (v107 + 1);
          *(_DWORD *)(v21 + 412) = v99;
          v97 = *(_QWORD *)(v21 + 392) - 1;
          v98 = v97 >> 4;
        }
        if (v98 >= v99)
        {
          __break(0xC471u);
          JUMPOUT(0x1982F7A50);
        }
        v100 = *(_QWORD *)(*(_QWORD *)(v21 + 400) + 8 * v98) + 24 * (v97 & 0xF);
        *(_QWORD *)v100 = v18;
        *(_QWORD *)(v100 + 8) = v90;
        *(_DWORD *)(v100 + 16) = 0;
        v101 = *(_QWORD *)(v21 + 392) - 1;
        if (v101 >> 4 >= *(unsigned int *)(v21 + 412))
        {
          __break(0xC471u);
          JUMPOUT(0x1982F7A58);
        }
        v57 = (__int128 *)(*(_QWORD *)(*(_QWORD *)(v21 + 400) + 8 * (v101 >> 4)) + 24 * (v101 & 0xF));
        v143[1] = v57;
LABEL_69:
        if (*(_QWORD *)v57)
          v58 = (*(_QWORD *)v57 & 0xFFFE000000000002) == 0;
        else
          v58 = 0;
        if (v58)
        {
          if (*((_DWORD *)v57 + 4) >= 2u)
          {
            __break(0xC471u);
            JUMPOUT(0x1982F7988);
          }
          *((_DWORD *)v57 + 4) = 1;
        }
        v59 = *(_QWORD *)(v8 + 24);
        if ((*(_BYTE *)(v8 + 48) & 2) != 0)
        {
          v60 = *(unsigned int *)(v8 + 40);
          v61 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 24);
          if ((_DWORD)v60 == 0x3FFFFFFF || (_DWORD)v60 == -1)
          {
            v62 = 2;
          }
          else if (v60 >> 28)
          {
            v122 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v122 = v61;
            *(_DWORD *)(v122 + 8) = v60;
            v62 = 1;
            v61 = v122;
          }
          else
          {
            v62 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 24);
            v61 = v60 << 36;
          }
          v149 = v61 | v62;
        }
        else
        {
          JSC::CodeOrigin::CodeOrigin(&v149, (const JSC::CodeOrigin *)(v8 + 48));
        }
        v63 = (const JSC::CodeOrigin *)(v8 + 56);
        if ((*(_BYTE *)(v8 + 56) & 2) != 0)
        {
          v64 = *(unsigned int *)(v8 + 40);
          v65 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 24);
          if ((_DWORD)v64 == 0x3FFFFFFF || (_DWORD)v64 == -1)
          {
            v66 = 2;
          }
          else if (v64 >> 28)
          {
            v123 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v123 = v65;
            *(_DWORD *)(v123 + 8) = v64;
            v66 = 1;
            v65 = v123;
          }
          else
          {
            v66 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 24);
            v65 = v64 << 36;
          }
          v148 = v65 | v66;
        }
        else
        {
          JSC::CodeOrigin::CodeOrigin(&v148, v63);
        }
        v67 = v149;
        if ((v149 & 1) != 0)
        {
          v109 = *(_QWORD *)(v149 & 0xFFFFFFFF8);
          if ((v149 & 2) != 0
            || (v110 = *(unsigned int *)((v149 & 0xFFFFFFFF8) + 8), (_DWORD)v110 == 0x3FFFFFFF)
            || (_DWORD)v110 == -1)
          {
            v111 = 2;
          }
          else if (v110 >> 28)
          {
            v136 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v136 = v109;
            *(_DWORD *)(v136 + 8) = v110;
            v111 = 1;
            v109 = v136;
          }
          else
          {
            v111 = *(_QWORD *)(v149 & 0xFFFFFFFF8);
            v109 = v110 << 36;
          }
          v67 = v109 | v111;
        }
        v68 = v148;
        if ((v148 & 1) != 0)
        {
          v112 = *(_QWORD *)(v148 & 0xFFFFFFFF8);
          if ((v148 & 2) != 0
            || (v113 = *(unsigned int *)((v148 & 0xFFFFFFFF8) + 8), (_DWORD)v113 == 0x3FFFFFFF)
            || (_DWORD)v113 == -1)
          {
            v114 = 2;
          }
          else if (v113 >> 28)
          {
            v137 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v137 = v112;
            *(_DWORD *)(v137 + 8) = v113;
            v114 = 1;
            v112 = v137;
          }
          else
          {
            v114 = *(_QWORD *)(v148 & 0xFFFFFFFF8);
            v112 = v113 << 36;
          }
          v68 = v112 | v114;
        }
        v69 = *(_BYTE *)(v8 + 64);
        v70 = v67;
        if ((v67 & 1) != 0)
        {
          v115 = *(_QWORD *)(v67 & 0xFFFFFFFF8);
          if ((v67 & 2) != 0
            || (v116 = *(unsigned int *)((v67 & 0xFFFFFFFF8) + 8), (_DWORD)v116 == 0x3FFFFFFF)
            || (_DWORD)v116 == -1)
          {
            v117 = 2;
          }
          else if (v116 >> 28)
          {
            v138 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v138 = v115;
            *(_DWORD *)(v138 + 8) = v116;
            v117 = 1;
            v115 = v138;
          }
          else
          {
            v117 = *(_QWORD *)(v67 & 0xFFFFFFFF8);
            v115 = v116 << 36;
          }
          v70 = v115 | v117;
        }
        v150 = v70;
        if ((v68 & 1) != 0)
        {
          v144 = v69;
          v118 = v68 & 0xFFFFFFFF8;
          v119 = *(_QWORD *)(v68 & 0xFFFFFFFF8);
          if ((v68 & 2) != 0
            || (v120 = *(unsigned int *)((v68 & 0xFFFFFFFF8) + 8), (_DWORD)v120 == 0x3FFFFFFF)
            || (_DWORD)v120 == -1)
          {
            v121 = 2;
          }
          else if (v120 >> 28)
          {
            v139 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v139 = v119;
            *(_DWORD *)(v139 + 8) = v120;
            v121 = 1;
            v119 = v139;
          }
          else
          {
            v121 = v119;
            v119 = v120 << 36;
          }
          v151 = v119 | v121;
          v152 = v144;
          v153 = 0;
          if (v118)
            WTF::fastFree(v118, v63, a3, a4, a5, a6, a7, a8);
        }
        else
        {
          v151 = v68;
          v152 = v69;
          v153 = 0;
        }
        if ((v67 & 1) != 0 && (v67 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v67 & 0xFFFFFFFF8, v63, a3, a4, a5, a6, a7, a8);
        if ((v148 & 1) != 0 && (v148 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v148 & 0xFFFFFFFF8, v63, a3, a4, a5, a6, a7, a8);
        if ((v149 & 1) != 0 && (v149 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v149 & 0xFFFFFFFF8, v63, a3, a4, a5, a6, a7, a8);
        v148 = 0;
        v149 = (uint64_t)v57;
        v146 = 0;
        v147 = 0;
        v145 = 0;
        v45 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(v59 + 1032, &v145, (uint64_t)&v150, (uint64_t)&v149, &v148, &v147, &v146, a8);
        if ((v151 & 1) != 0 && (v151 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v151 & 0xFFFFFFFF8, v71, (uint64_t)v72, v73, v74, v75, v76, v77);
        if ((v150 & 1) != 0 && (v150 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v150 & 0xFFFFFFFF8, v71, (uint64_t)v72, v73, v74, v75, v76, v77);
        v78 = *(unsigned __int16 *)(v45 + 18);
        *(_BYTE *)(v8 + 457) |= v78 == 379;
        v79 = *(_QWORD *)(v8 + 32);
        v149 = v45;
        v80 = (_QWORD *)(v79 + 208);
        v81 = *(unsigned int *)(v79 + 220);
        if ((_DWORD)v81 == *(_DWORD *)(v79 + 216))
        {
          v102 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v80, v81 + 1, (unint64_t)&v149);
          v81 = *(unsigned int *)(v79 + 220);
          *(_QWORD *)(*(_QWORD *)(v79 + 208) + 8 * v81) = *v102;
          v78 = *(unsigned __int16 *)(v45 + 18);
        }
        else
        {
          *(_QWORD *)(*v80 + 8 * v81) = v45;
        }
        *(_DWORD *)(v79 + 220) = v81 + 1;
        v82 = *(_QWORD *)(v8 + 24);
        if (v78 == 386)
        {
          *(_DWORD *)(v45 + 48) = ~*(_DWORD *)(v82 + 308);
          v124 = *(unsigned int *)(v82 + 308);
          v125 = v124 + 2;
          v126 = *(unsigned int *)(v82 + 304);
          v127 = *(_QWORD *)(v82 + 296);
          if (v124 + 2 > v126)
          {
            v128 = v126 + (v126 >> 2);
            if (v128 >= 0x10)
              v129 = v128 + 1;
            else
              v129 = 16;
            if (v129 <= v125)
              v130 = v124 + 2;
            else
              v130 = v129;
            if (v130 >> 29)
            {
              __break(0xC471u);
LABEL_222:
              JUMPOUT(0x1982F6FFCLL);
            }
            v131 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v130));
            *(_DWORD *)(v82 + 304) = v130;
            *(_QWORD *)(v82 + 296) = v131;
            if ((_DWORD)v124)
            {
              v140 = 8 * v124;
              v141 = (uint64_t *)v127;
              do
              {
                v142 = *v141++;
                *v131++ = v142;
                v140 -= 8;
              }
              while (v140);
              v131 = *(_QWORD **)(v82 + 296);
            }
            if (v127)
            {
              if (v131 == (_QWORD *)v127)
              {
                *(_QWORD *)(v82 + 296) = 0;
                *(_DWORD *)(v82 + 304) = 0;
              }
              WTF::fastFree(v127, v132, (uint64_t)v72, v73, v74, v75, v76, v77);
              v127 = *(_QWORD *)(v82 + 296);
            }
            else
            {
              v127 = (unint64_t)v131;
            }
          }
          if (v127)
          {
            v133 = *(unsigned int *)(v82 + 308);
            if (v125 != v133)
            {
              v134 = (_QWORD *)(v127 + 8 * v133);
              v135 = 8 * v124 - 8 * v133 + 16;
              do
              {
                *v134++ = 0x3FFFFFFF00000000;
                v135 -= 8;
              }
              while (v135);
            }
          }
          *(_DWORD *)(v82 + 308) = v125;
          v82 = *(_QWORD *)(v8 + 24);
        }
        if (JSC::DFG::clobbersExitState((JSC::DFG *)v82, (JSC::DFG::Graph *)v45, v72, v73, v74, v75, v76, v77))
          *(_BYTE *)(v8 + 64) = 0;
LABEL_56:
        if (*(_DWORD *)(v8 + 116) <= v12)
        {
          __break(0xC471u);
          JUMPOUT(0x1982F7A48);
        }
        *(_QWORD *)(*(_QWORD *)(v8 + 104) + 8 * v12) = v45;
        return *(WTF **)(*(_QWORD *)(v8 + 104) + 8 * v12);
      }
    }
    else
    {
      if (3 * v88 > 4 * v87)
        goto LABEL_115;
      if (!(_DWORD)v88)
      {
        v105 = 8;
LABEL_131:
        v143 = WTF::HashTable<long long,WTF::KeyValuePair<long long,JSC::DFG::FrozenValue *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,JSC::DFG::FrozenValue *>>,WTF::IntHash<long long>,WTF::HashMap<long long,JSC::DFG::FrozenValue *,WTF::IntHash<long long>,JSC::EncodedJSValueHashTraits,WTF::HashTraits<JSC::DFG::FrozenValue *>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::EncodedJSValueHashTraits>::rehash((uint64_t *)(v21 + 384), v105, (uint64_t)v143, a4, a5, a6, a7, a8);
        goto LABEL_115;
      }
    }
    v105 = ((_DWORD)v88 << (6 * *(_DWORD *)(v85 - 12) >= (2 * v88)));
    goto LABEL_131;
  }
  v9 = HIDWORD(a2);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
  if (v10)
  {
    if ((*(_BYTE *)(v10 + 32) & 1) != 0 || a2 != 3)
    {
      LODWORD(a2) = (HIDWORD(*(_QWORD *)(v10 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v10 + 24) >> 28) >> 24 << 20)) + a2;
      v9 = a2 >> 31;
      return (WTF *)JSC::DFG::ByteCodeParser::getDirect(a1, a2 | (v9 << 32), a3, a4, a5, a6, a7, a8);
    }
    if (*(_BYTE *)(v10 + 40) == 17)
      v34 = *(_QWORD *)(v10 + 41);
    else
      v34 = 0;
    return JSC::DFG::ByteCodeParser::weakJSConstant(a1, v34, a3, a4, a5, a6, a7, a8);
  }
  if (a2 != 3)
    return (WTF *)JSC::DFG::ByteCodeParser::getDirect(a1, a2 | (v9 << 32), a3, a4, a5, a6, a7, a8);
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64);
  if (v22)
    v23 = *(_BYTE *)(v22 + 5) == 12;
  else
    v23 = 0;
  if (v23)
  {
    v24 = *(_QWORD *)(v22 + 112);
    v25 = (v24 & 1) != 0 ? v24 & 0xFFFFFFFFFFFFFFF8 : *(_QWORD *)(v24 + 24);
    if (v25)
    {
      v26 = *(_QWORD *)(a1 + 24);
      v27 = *(_QWORD *)(v26 + 24);
      v149 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 64);
      JSC::DFG::Graph::freezeStrong(v26, v22, a3, a4, a5, a6, a7, a8);
      WTF::HashTable<JSC::FunctionExecutable *,JSC::FunctionExecutable *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::FunctionExecutable *>,WTF::HashTraits<JSC::FunctionExecutable *>,WTF::HashTraits<JSC::FunctionExecutable *>>::add((uint64_t *)(v27 + 184), &v149, v28, v29, v30, v31, v32, v33, (uint64_t)&v150);
      a1 = v8;
      v34 = v25;
      return JSC::DFG::ByteCodeParser::weakJSConstant(a1, v34, a3, a4, a5, a6, a7, a8);
    }
  }
  return (WTF *)JSC::DFG::ByteCodeParser::addToGraph(a1, 11, 0, 0, 0, a6, a7, a8);
}

WTF *JSC::DFG::ByteCodeParser::jsConstant(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9 = JSC::DFG::Graph::freezeStrong(a1[3], a2, a3, a4, a5, a6, a7, a8);
  return JSC::DFG::ByteCodeParser::jsConstant((JSC::DFG::ByteCodeParser *)a1, (JSC::DFG::FrozenValue *)v9, v10, v11, v12, v13, v14, v15);
}

unint64_t JSC::DFG::ByteCodeParser::inliningCost(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  char **v10;
  BOOL v11;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  unint64_t v30;

  if (a4 >= 0xC)
    goto LABEL_75;
  if (*(_BYTE *)(a1 + 456) || ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 16) - 1) & 0xFFFFFFFD) == 0)
    goto LABEL_64;
  if (a2 && *(_BYTE *)(a2 + 5) == 26)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if ((v7 & 1) != 0)
      v7 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 48);
  }
  else
  {
    v8 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v9 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v10 = (char **)(16 * v8);
    if ((_DWORD)v8)
      v11 = v10 == &JSC::ExecutableBase::s_info;
    else
      v11 = 1;
    if (!v11)
    {
      do
      {
        v10 = (char **)v10[2];
        v9 = v10 != 0;
      }
      while (v10 != &JSC::ExecutableBase::s_info && v10 != 0);
    }
    v7 = a2;
    if (!v9)
      goto LABEL_64;
  }
  if (!v7
    || *(_BYTE *)(v7 + 5) != 12
    || (v13 = (0x12u >> a4) & 1, (v14 = JSC::FunctionExecutable::baselineCodeBlockFor(v7, v13)) == 0)
    || (v15 = *(_QWORD *)(a1 + 8), (*(_DWORD *)(v15 + 32) ^ *(_DWORD *)(v14 + 32)) < 0)
    || !HIBYTE(word_1ECF4C45C) && *(_DWORD *)(v14 + 28) > a3)
  {
LABEL_64:
    v30 = 0;
LABEL_65:
    v29 = -1;
    return v30 | v29;
  }
  v16 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 16);
  if ((v16 - 2) < 2)
  {
    v17 = 1;
    goto LABEL_25;
  }
  v17 = 0;
  if (v16 != 1 && (v16 - 4) >= 2)
  {
    if (v16)
    {
      __break(0xC471u);
      JUMPOUT(0x1982F83A8);
    }
LABEL_75:
    __break(0xC471u);
    JUMPOUT(0x1982F82C8);
  }
LABEL_25:
  v18 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  if ((_DWORD)v18)
  {
    v20 = 16 * v18;
    if ((char **)v20 != &JSC::ExecutableBase::s_info)
    {
      do
      {
        v20 = *(_QWORD *)(v20 + 16);
        v19 = v20 != 0;
      }
      while ((char **)v20 != &JSC::ExecutableBase::s_info && v20 != 0);
    }
  }
  if (v19)
  {
    if (v13)
      goto LABEL_64;
    v22 = *(_QWORD *)(v14 + 64);
    v23 = *(unsigned __int8 *)(v22 + 5);
    if (v23 == 12 && (*(_WORD *)(*(_QWORD *)(v22 + 88) + 51) & 0x100) != 0)
      goto LABEL_69;
    v24 = *(_DWORD *)(v14 + 44);
    if (v17)
      v25 = DWORD2(xmmword_1ECF4C490);
    else
      v25 = DWORD1(xmmword_1ECF4C4A0);
  }
  else
  {
    v22 = *(_QWORD *)(v14 + 64);
    v23 = *(unsigned __int8 *)(v22 + 5);
    if (!v13)
    {
      if (v23 != 12 || (*(_WORD *)(*(_QWORD *)(v22 + 88) + 51) & 0x100) == 0)
      {
        v24 = *(_DWORD *)(v14 + 44);
        if (v17)
          v25 = DWORD1(xmmword_1ECF4C490);
        else
          v25 = xmmword_1ECF4C4A0;
        goto LABEL_38;
      }
LABEL_69:
      v23 = 12;
      goto LABEL_39;
    }
    if (v23 == 12 && (*(_WORD *)(*(_QWORD *)(v22 + 88) + 51) & 0x100) != 0)
      goto LABEL_69;
    v24 = *(_DWORD *)(v14 + 44);
    if (v17)
      v25 = HIDWORD(xmmword_1ECF4C490);
    else
      v25 = DWORD2(xmmword_1ECF4C4A0);
  }
LABEL_38:
  if (v24 > v25)
    goto LABEL_64;
LABEL_39:
  if ((*(_WORD *)(v22 + 70) & 2) != 0)
    goto LABEL_64;
  if (*(_DWORD *)(v15 + 44) > DWORD2(xmmword_1ECF4C4B0))
  {
    v30 = 0;
    *(_BYTE *)(v14 + 17) = 0;
    goto LABEL_65;
  }
  v26 = *(_QWORD *)(a1 + 280);
  if (v26)
  {
    v27 = 0;
    v28 = xmmword_1ECF4C4B0;
    if (xmmword_1ECF4C4B0 <= 1)
      v28 = 1;
    while (--v28)
    {
      if (*(_QWORD *)(*(_QWORD *)(v26 + 8) + 64) == v7 && ++v27 >= DWORD1(xmmword_1ECF4C4B0))
        break;
      v26 = *(_QWORD *)(v26 + 208);
      if (!v26)
        goto LABEL_47;
    }
    goto LABEL_64;
  }
LABEL_47:
  v29 = *(_DWORD *)(v14 + 44);
  if (v23 == 12)
    v30 = (unint64_t)(HIBYTE(*(unsigned __int16 *)(*(_QWORD *)(v22 + 88) + 51)) & 1) << 32;
  else
    v30 = 0;
  return v30 | v29;
}

uint64_t JSC::DFG::ByteCodeParser::handleCallVariant(_QWORD *a1, WTF *a2, unint64_t a3, char **a4, char **a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9, __int16 a10, unsigned int a11, uint64_t a12, _DWORD *a13, uint64_t a14, char a15)
{
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  unsigned int v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  char **v26;
  unsigned int v27;
  BOOL v28;
  char **v29;
  uint64_t v30;
  uint64_t v32;
  _BOOL4 v33;
  char **v34;
  BOOL v35;
  int v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL4 v40;
  char **v41;
  BOOL v42;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v54;
  unint64_t v55;
  int v56;
  char **v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned __int8 *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BOOL4 v74;
  char **v75;
  BOOL v76;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BOOL4 v107;
  char **v108;
  BOOL v109;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  _DWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t UntargetableBlock;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  unint64_t v171;
  unsigned int v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  int v176;
  unsigned int v177;
  int v178;
  uint64_t v179;
  unsigned int v180;
  unint64_t Direct;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  int v196;
  int v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  __int128 v205;
  WTF *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  __int16 v223;
  unint64_t v224;
  uint64_t v225;
  _BOOL4 v226;
  uint64_t v227;
  _QWORD *v229;
  uint64_t v230;
  int v231;
  int v232;
  int v233;
  uint64_t v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unsigned int v240;
  uint64_t v241;
  void *v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  __int128 v247;
  int v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unsigned int v253;
  WTF *v254;
  uint64_t v255;
  _QWORD *v256;
  unint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  __int16 v261;
  WTF *v262;
  uint64_t v263;
  unint64_t v264;
  __int128 *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  WTF *v272;
  uint64_t v273;
  uint64_t v274;
  __int16 v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  __int128 v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t *v300;
  uint64_t *v301;
  uint64_t *v303;
  uint64_t v304;
  unsigned __int8 v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  WTF *v312;
  uint64_t v313;
  uint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  char **v320;
  char **v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t i;
  WTF *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  _QWORD *v352;
  uint64_t j;
  unsigned int v354;
  int v355;
  uint64_t v356;
  unsigned int v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  BOOL v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  BOOL v372;
  uint64_t v373;
  unint64_t v374;
  uint64_t v375;
  BOOL v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  int v384;
  unint64_t v385;
  uint64_t v386;
  BOOL v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  unsigned int v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  unsigned int v407;
  unint64_t v408;
  _QWORD *v409;
  int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  _QWORD *v418;
  _QWORD *v419;
  int v420;
  uint64_t v421;
  int v422;
  _DWORD *v423;
  int v424;
  int v425;
  unint64_t v426;
  int v427;
  int v428;
  _QWORD v429[9];
  char *v430;
  _QWORD *v431;
  unint64_t *v432;
  uint64_t *v433;
  unsigned int *v434;
  char *v435;
  char *v436;
  char v437;
  char v438;
  char v439;
  unint64_t v440;
  WTF *v441;
  int v442;
  unsigned int v443;
  unint64_t v444;
  char v445;
  uint64_t v446;
  __int16 v447;
  unint64_t v448;
  char v449;
  uint64_t v450;
  int v451;
  unint64_t v452;
  unint64_t v453;
  _BYTE v454[24];
  int v455;
  unsigned __int8 *v456[11];
  _QWORD v457[2];
  uint64_t v458;
  uint64_t v459;

  v15 = a7;
  v16 = (int)a5;
  v17 = (unint64_t)a4;
  v18 = a3;
  v19 = (uint64_t)a2;
  v20 = (uint64_t)a1;
  v444 = (unint64_t)a4;
  v443 = a6;
  v442 = a8;
  v441 = a2;
  v440 = __PAIR64__(a5, a7);
  v439 = a15;
  v438 = 0;
  v437 = 0;
  v430 = &v439;
  v431 = a1;
  v432 = &v444;
  v433 = (uint64_t *)&v441;
  v434 = &v443;
  v435 = &v438;
  v436 = &v437;
  if (a11 != 2 || !byte_1ECF4C279 || (*(_DWORD *)(*(_QWORD *)(a1[3] + 24) + 16) & 0xFFFFFFFE) != 4)
  {
LABEL_3:
    v21 = a13;
    if (!*a13)
      return 3;
    if (a11 >= 0xC)
    {
      __break(0xC471u);
      JUMPOUT(0x1982FA2ACLL);
    }
    v22 = 0xFEDu >> a11;
    v429[0] = &v438;
    v429[1] = &v437;
    v429[2] = a1;
    v429[3] = &v441;
    v429[4] = (char *)&v440 + 4;
    v429[5] = &v440;
    v429[6] = a13;
    v429[7] = &a14;
    v429[8] = &v442;
    v23 = HIDWORD(a3);
    v24 = *((unsigned __int8 *)a4 + 5);
    if (!a4 || (v24 - 29) < 0xFFFFFFFD)
    {
LABEL_41:
      v426 = v23;
      if (v24 == 26)
      {
        v17 = *(_QWORD *)(v17 + 24);
        if ((v17 & 1) != 0)
          v17 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFFELL) + 48);
      }
      else
      {
        v32 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
        v33 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
        v34 = (char **)(16 * v32);
        if ((_DWORD)v32)
          v35 = v34 == &JSC::ExecutableBase::s_info;
        else
          v35 = 1;
        if (!v35)
        {
          do
          {
            v34 = (char **)v34[2];
            v33 = v34 != 0;
          }
          while (v34 != &JSC::ExecutableBase::s_info && v34 != 0);
        }
        if (!v33)
          goto LABEL_59;
      }
      if ((v22 & 1) != 0 && v17)
      {
        if (*(_BYTE *)(v17 + 5) == 8)
        {
          v58 = *(_QWORD *)(v17 + 8);
          v59 = (unsigned int *)(v58 + 8);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 + 1, v59));
          v37 = *(unsigned __int8 *)(v58 + 14);
          do
          {
            v61 = __ldaxr(v59);
            v62 = v61 - 1;
          }
          while (__stlxr(v62, v59));
          if (!v62)
          {
            atomic_store(1u, (unsigned int *)(v58 + 8));
            (*(void (**)(uint64_t))(*(_QWORD *)v58 + 32))(v58);
          }
        }
        else
        {
          v37 = *(unsigned __int8 *)(v17 + 64);
        }
        if (v37)
        {
          v452 = v444;
          v453 = v18;
          v451 = v442;
          v450 = (uint64_t)v441;
          v449 = v37;
          v448 = v440;
          v447 = a10;
          v446 = a12;
          v63 = *(unsigned __int8 **)(v20 + 448);
          v64 = *v63;
          if ((v64 | 2) == 0x82)
            v64 = v63[1];
          if (v64 <= 0x18 && ((1 << v64) & 0x1800E17) != 0)
          {
            v445 = 0;
            *(_QWORD *)v454 = &v445;
            *(_QWORD *)&v454[8] = &v453;
            *(_QWORD *)&v454[16] = v20;
            v456[0] = (unsigned __int8 *)&v449;
            v456[1] = (unsigned __int8 *)&v448;
            v456[2] = (unsigned __int8 *)&v430;
            v456[3] = v454;
            v456[4] = (unsigned __int8 *)v20;
            v456[5] = (unsigned __int8 *)&v448 + 4;
            v456[6] = (unsigned __int8 *)&v453;
            v456[7] = (unsigned __int8 *)&v445;
            v456[8] = (unsigned __int8 *)&v452;
            v456[9] = (unsigned __int8 *)&v446;
            v456[10] = (unsigned __int8 *)&v450;
            v457[0] = &v447;
            v457[1] = &v451;
            v65 = JSC::DFG::ByteCodeParser::handleIntrinsicCall<JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0>(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,JSC::Intrinsic,int,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,JSC::CodeSpecializationKind,unsigned long long,JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0 const&)::{lambda(void)#1}::operator()(v456, (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, a9);
            if ((_DWORD)v65 != 3)
            {
              if (!v445)
              {
                __break(0xC471u);
                JUMPOUT(0x1982F9EB8);
              }
              v30 = v65;
              JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_1::operator()((uint64_t)v429, v66, v67, v68, v69, v70, v71, v72);
              return v30;
            }
          }
          if (v438)
          {
            __break(0xC471u);
            JUMPOUT(0x1982F928CLL);
          }
        }
      }
LABEL_59:
      if (!byte_1ECF4C245)
        goto LABEL_85;
      v38 = v444;
      if (v444 && *(_BYTE *)(v444 + 5) == 26)
      {
        v38 = *(_QWORD *)(v444 + 24);
        if ((v38 & 1) != 0)
          v38 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFFFELL) + 48);
      }
      else
      {
        v39 = *(unsigned int *)(16 * (*(_DWORD *)v444 & 0xFFFFFFFE) + 0x4C);
        v40 = *(_DWORD *)(16 * (*(_DWORD *)v444 & 0xFFFFFFFE) + 0x4C) != 0;
        v41 = (char **)(16 * v39);
        if ((_DWORD)v39)
          v42 = v41 == &JSC::ExecutableBase::s_info;
        else
          v42 = 1;
        if (!v42)
        {
          do
          {
            v41 = (char **)v41[2];
            v40 = v41 != 0;
          }
          while (v41 != &JSC::ExecutableBase::s_info && v41 != 0);
        }
        if (!v40)
        {
LABEL_85:
          v51 = JSC::DFG::ByteCodeParser::inliningCost(v20, v444, v440, a11);
          if (!*v21)
            return 3;
          v52 = v51;
          if (!HIDWORD(v51) && *v21 < v51)
            return 3;
          v54 = v444;
          if (v444 && *(_BYTE *)(v444 + 5) == 26)
          {
            v55 = *(_QWORD *)(v444 + 24);
            if ((v55 & 1) != 0)
              v55 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFFFELL) + 48);
          }
          else
          {
            v73 = *(unsigned int *)(16 * (*(_DWORD *)v444 & 0xFFFFFFFE) + 0x4C);
            v74 = *(_DWORD *)(16 * (*(_DWORD *)v444 & 0xFFFFFFFE) + 0x4C) != 0;
            v75 = (char **)(16 * v73);
            if ((_DWORD)v73)
              v76 = v75 == &JSC::ExecutableBase::s_info;
            else
              v76 = 1;
            if (!v76)
            {
              do
              {
                v75 = (char **)v75[2];
                v74 = v75 != 0;
              }
              while (v75 != &JSC::ExecutableBase::s_info && v75 != 0);
            }
            v55 = v444;
            if (!v74)
              goto LABEL_413;
          }
          if (v55)
          {
            if (*(_BYTE *)(v55 + 5) == 12)
              v78 = v55;
            else
              v78 = 0;
LABEL_127:
            v79 = (uint64_t)v441;
            v425 = v440;
            v80 = HIDWORD(v440);
            v417 = a14;
            v413 = *(_QWORD *)(v20 + 448);
            v87 = JSC::FunctionExecutable::baselineCodeBlockFor(v78, byte_199154DE8[a11]);
            if (v439)
              JSC::DFG::ByteCodeParser::emitFunctionChecks(v20, v444, (uint64_t)v441, v443, v83, v84, v85, v86);
            v88 = *(_DWORD *)(v87 + 28);
            v424 = v88 - v425;
            if (v88 <= v425)
              v89 = 0;
            else
              v89 = (v88 & 0xFFFFFFFE) - (v425 & 0xFFFFFFFE);
            v410 = v80;
            v407 = v89;
            v90 = v80 - v89;
            v91 = *(_QWORD *)(v20 + 280);
            v92 = *(_QWORD *)(v91 + 24);
            v93 = v90;
            if (v92)
              v93 = v90 + (HIDWORD(*(_QWORD *)(v92 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v92 + 24) >> 28) >> 24 << 20));
            v94 = *(_DWORD *)(v87 + 20) - v93;
            if (*(_DWORD *)(v20 + 260) < v94)
            {
              *(_DWORD *)(v20 + 260) = v94;
              v95 = *(_QWORD *)(v20 + 24);
              LODWORD(v96) = *(_DWORD *)(v95 + 60);
              if ((_DWORD)v96)
              {
                v420 = v90;
                v414 = v87;
                v97 = v18;
                v18 = (unint64_t)v21;
                v98 = v79;
                v99 = v93;
                v100 = v54;
                v101 = v52;
                v102 = 0;
                do
                {
                  if (v96 <= v102)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1982FA4CCLL);
                  }
                  JSC::DFG::BasicBlock::ensureLocals(*(JSC::DFG::BasicBlock **)(*(_QWORD *)(v95 + 48) + 8 * v102++), v94);
                  v95 = *(_QWORD *)(v20 + 24);
                  v96 = *(unsigned int *)(v95 + 60);
                }
                while (v102 < v96);
                v91 = *(_QWORD *)(v20 + 280);
                v92 = *(_QWORD *)(v91 + 24);
                v52 = v101;
                v54 = v100;
                v93 = v99;
                v79 = v98;
                v21 = (_DWORD *)v18;
                LODWORD(v18) = v97;
                v87 = v414;
                v90 = v420;
              }
            }
            if (v92)
              LODWORD(v92) = *(_DWORD *)(v92 + 24) >> 22;
            v103 = ((2 * *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v91 + 8) + 56) + 30)) & 4)
                 + v92
                 + ((2 * *(unsigned __int8 *)(*(_QWORD *)(v87 + 56) + 30)) & 4);
            if (*(_DWORD *)(v20 + 264) < v103)
            {
              *(_DWORD *)(v20 + 264) = v103;
              v104 = *(_QWORD *)(v20 + 24);
              LODWORD(v278) = *(_DWORD *)(v104 + 60);
              if ((_DWORD)v278)
              {
                v279 = 0;
                v422 = v90;
                do
                {
                  if (v278 <= v279)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1982FA4D4);
                  }
                  v416 = v279;
                  JSC::DFG::BasicBlock::ensureTmps(*(JSC::DFG::BasicBlock **)(*(_QWORD *)(v104 + 48) + 8 * v279), v103, v81, v82, v83, v84, v85, v86);
                  v279 = v416 + 1;
                  v104 = *(_QWORD *)(v20 + 24);
                  v278 = *(unsigned int *)(v104 + 60);
                  v90 = v422;
                }
                while (v416 + 1 < v278);
              }
            }
            else
            {
              v104 = *(_QWORD *)(v20 + 24);
            }
            if ((_DWORD)v426 == 2)
            {
              if ((v18 & 0x80000000) != 0)
              {
                LODWORD(v426) = 2;
                goto LABEL_147;
              }
            }
            else if ((_DWORD)v18 == 0x3FFFFFFF)
            {
              LODWORD(v18) = 0x3FFFFFFF;
              goto LABEL_147;
            }
            v105 = *(_QWORD *)(*(_QWORD *)(v20 + 280) + 24);
            if (v105)
            {
              v171 = *(_QWORD *)(v105 + 24);
              if (v426 == 2)
              {
                LODWORD(v18) = v18 + (v171 >> 22);
                v172 = 2;
              }
              else
              {
                LODWORD(v18) = (HIDWORD(v171) & 0xFFFFF | ((int)(v171 >> 28) >> 24 << 20)) + v18;
                v172 = v18 >> 31;
              }
              LODWORD(v426) = v172;
            }
LABEL_147:
            v106 = *(unsigned int *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x4C);
            v107 = *(_DWORD *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x4C) != 0;
            v108 = (char **)(16 * v106);
            if ((_DWORD)v106)
              v109 = v108 == &JSC::ExecutableBase::s_info;
            else
              v109 = 1;
            if (!v109)
            {
              do
              {
                v108 = (char **)v108[2];
                v107 = v108 != 0;
              }
              while (v108 != &JSC::ExecutableBase::s_info && v108 != 0);
            }
            v415 = *(_QWORD *)(v104 + 488);
            if (v107)
            {
              v174 = *(_QWORD **)(JSC::DFG::ByteCodeParser::set(v20, (v90 + 3) | ((unint64_t)((v90 + 3) >> 31) << 32), v79, 2, v83, v84, v85, v86)+ 72);
              v175 = v174;
              do
              {
                v111 = v175;
                v175 = (_QWORD *)*v175;
              }
              while (v175);
              if (v111 != v174)
                *v174 = v111;
              if (!*((_BYTE *)v111 + 40))
                *((_BYTE *)v111 + 40) = 1;
            }
            else
            {
              v111 = 0;
            }
            v112 = *(_QWORD *)(v20 + 56);
            v423 = (_DWORD *)v54;
            v409 = v111;
            if ((v112 & 1) != 0)
            {
              v403 = v52;
              v364 = *(_QWORD *)(v112 & 0xFFFFFFFF8);
              if ((v112 & 2) != 0
                || ((v365 = *(unsigned int *)((v112 & 0xFFFFFFFF8) + 8), (_DWORD)v365 != 0x3FFFFFFF)
                  ? (v366 = (_DWORD)v365 == -1)
                  : (v366 = 1),
                    v366))
              {
                v367 = 2;
              }
              else if (v365 >> 28)
              {
                v395 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v395 = v364;
                *(_DWORD *)(v395 + 8) = v365;
                v367 = 1;
                v364 = v395;
              }
              else
              {
                v367 = *(_QWORD *)(v112 & 0xFFFFFFFF8);
                v364 = v365 << 36;
              }
              v421 = v364 | v367;
              v52 = v403;
              v54 = (unint64_t)v423;
            }
            else
            {
              v421 = *(_QWORD *)(v20 + 56);
            }
            v113 = (v93 + 5);
            JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)v456, *(_DWORD *)(v20 + 40), *(_QWORD *)(*(_QWORD *)(v20 + 280) + 24));
            v121 = *(_QWORD *)(v20 + 56);
            if ((v121 & 1) != 0 && (v121 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v121 & 0xFFFFFFFF8, v114, v115, v116, v117, v118, v119, v120);
            *(unsigned __int8 **)(v20 + 56) = v456[0];
            v412 = *(_QWORD *)(v20 + 280);
            if (*(_BYTE *)(v54 + 5) == 26)
              v122 = v54;
            else
              v122 = 0;
            JSC::DFG::ByteCodeParser::InlineStackEntry::InlineStackEntry((uint64_t)v456, (_QWORD *)v20, v87, v87, v122, v18 | ((unint64_t)v426 << 32), v113, v425, a11, v417);
            v130 = *(_DWORD *)(v20 + 40);
            *(_DWORD *)(v20 + 40) = 0;
            *(_BYTE *)(v20 + 64) = 0;
            if (a11 - 6 <= 5 && v425 >= 1)
            {
              v176 = 0;
              v177 = v410 + 5;
              v418 = (_QWORD *)(v20 + 368);
              v178 = v425;
              v427 = v130;
              do
              {
                v179 = *(_QWORD *)(v412 + 24);
                v180 = v177;
                if (v179)
                  v180 = v410
                       + 5
                       + v176
                       + (HIDWORD(*(_QWORD *)(v179 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v179 + 24) >> 28) >> 24 << 20));
                Direct = JSC::DFG::ByteCodeParser::getDirect(v20, v180 | ((unint64_t)(v180 >> 31) << 32), v124, v125, v126, v127, v128, v129);
                JSC::DFG::ByteCodeParser::addToGraph(v20, 20, v180 | ((unint64_t)(v180 >> 31) << 32), Direct, 0, 0, v182, v183);
                JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&v453, *(_DWORD *)(v20 + 40), *(_QWORD *)(*(_QWORD *)(v20 + 280) + 24));
                v184 = v453;
                v185 = v453;
                if ((v453 & 1) != 0)
                {
                  v401 = *(_QWORD *)(v453 & 0xFFFFFFFF8);
                  v404 = v52;
                  v400 = v453;
                  if ((v453 & 2) != 0
                    || ((v371 = *(unsigned int *)((v453 & 0xFFFFFFFF8) + 8), (_DWORD)v371 != 0x3FFFFFFF)
                      ? (v372 = (_DWORD)v371 == -1)
                      : (v372 = 1),
                        v372))
                  {
                    v373 = 2;
                  }
                  else if (v371 >> 28)
                  {
                    v397 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v397 = v401;
                    *(_DWORD *)(v397 + 8) = v371;
                    v373 = 1;
                    v401 = v397;
                  }
                  else
                  {
                    v373 = *(_QWORD *)(v453 & 0xFFFFFFFF8);
                    v401 = v371 << 36;
                  }
                  v52 = v404;
                  v185 = v401 | v373;
                  v184 = v400;
                }
                *(_QWORD *)v454 = v185;
                *(_QWORD *)&v454[8] = v180 | ((unint64_t)(v180 >> 31) << 32);
                *(_QWORD *)&v454[16] = Direct;
                v455 = 2;
                if (v180 == 0x3FFFFFFF)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1982F9F70);
                }
                v186 = *(unsigned int *)(v20 + 380);
                v130 = v427;
                if ((_DWORD)v186 == *(_DWORD *)(v20 + 376))
                {
                  v280 = v184;
                  v281 = WTF::Vector<JSC::DFG::ByteCodeParser::DelayedSetLocal,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v418, v186 + 1, (unint64_t)v454, v125, v126, v127, v128, v129);
                  v184 = v280;
                  v282 = *(_QWORD *)(v20 + 368) + 32 * *(unsigned int *)(v20 + 380);
                  v283 = *(_QWORD *)v281;
                  *(_QWORD *)v281 = 0;
                  *(_QWORD *)v282 = v283;
                  v284 = *(_OWORD *)(v281 + 8);
                  *(_DWORD *)(v282 + 24) = *(_DWORD *)(v281 + 24);
                  *(_OWORD *)(v282 + 8) = v284;
                }
                else
                {
                  v187 = *v418 + 32 * v186;
                  *(_QWORD *)v454 = 0;
                  *(_QWORD *)v187 = v185;
                  v188 = *(_OWORD *)&v454[8];
                  *(_DWORD *)(v187 + 24) = v455;
                  *(_OWORD *)(v187 + 8) = v188;
                }
                ++*(_DWORD *)(v20 + 380);
                if ((v454[0] & 1) != 0 && (*(_QWORD *)v454 & 0xFFFFFFFF8) != 0)
                {
                  v374 = v184;
                  WTF::fastFree(*(_QWORD *)v454 & 0xFFFFFFFF8, v123, v124, v125, v126, v127, v128, v129);
                  v184 = v374;
                }
                if ((v184 & 1) != 0 && (v184 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v184 & 0xFFFFFFFF8, v123, v124, v125, v126, v127, v128, v129);
                ++v176;
                ++v177;
                --v178;
              }
              while (v178);
            }
            v131 = v424;
            if (v424 >= 1)
            {
              v189 = JSC::DFG::ByteCodeParser::addToGraph(v20, 0, *(_QWORD *)(v20 + 72), 0, 0, 0, v128, v129);
              v194 = (uint64_t)v189;
              v428 = v130;
              if (v407 && v425 >= 1)
              {
                v231 = 0;
                v232 = 5;
                v419 = v189;
                do
                {
                  v233 = v231 + 5;
                  v234 = *(_QWORD *)(v412 + 24);
                  if (v234)
                    v235 = v233
                         + v410
                         + (HIDWORD(*(_QWORD *)(v234 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v234 + 24) >> 28) >> 24 << 20));
                  else
                    v235 = v410 + v232;
                  v238 = JSC::DFG::ByteCodeParser::getDirect(v20, v235 | ((unint64_t)(v235 >> 31) << 32), v190, v191, v192, v193, v128, v129);
                  v239 = *(_QWORD *)(*(_QWORD *)(v20 + 280) + 24);
                  if (v239)
                  {
                    v248 = HIDWORD(*(_QWORD *)(v239 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v239 + 24) >> 28) >> 24 << 20);
                    v240 = v233 + v248;
                    v239 = (v232 + v248) >> 31;
                  }
                  else
                  {
                    v240 = v232;
                  }
                  v241 = v240 | (unint64_t)(v239 << 32);
                  JSC::DFG::ByteCodeParser::addToGraph(v20, 20, v241, v238, 0, 0, v236, v237);
                  JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&v453, *(_DWORD *)(v20 + 40), *(_QWORD *)(*(_QWORD *)(v20 + 280) + 24));
                  v243 = v453;
                  v244 = v453;
                  if ((v453 & 1) != 0)
                  {
                    v402 = *(_QWORD *)(v453 & 0xFFFFFFFF8);
                    v406 = v52;
                    if ((v453 & 2) != 0
                      || ((v386 = *(unsigned int *)((v453 & 0xFFFFFFFF8) + 8), (_DWORD)v386 != 0x3FFFFFFF)
                        ? (v387 = (_DWORD)v386 == -1)
                        : (v387 = 1),
                          v387))
                    {
                      v388 = 2;
                    }
                    else if (v386 >> 28)
                    {
                      v399 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v399 = v402;
                      *(_DWORD *)(v399 + 8) = v386;
                      v388 = 1;
                      v402 = v399;
                    }
                    else
                    {
                      v388 = *(_QWORD *)(v453 & 0xFFFFFFFF8);
                      v402 = v386 << 36;
                    }
                    v52 = v406;
                    v244 = v402 | v388;
                  }
                  *(_QWORD *)v454 = v244;
                  *(_QWORD *)&v454[8] = v241;
                  *(_QWORD *)&v454[16] = v238;
                  v455 = 2;
                  v194 = (uint64_t)v419;
                  if (v240 == 0x3FFFFFFF)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1982FA1ACLL);
                  }
                  v245 = *(unsigned int *)(v20 + 380);
                  if ((_DWORD)v245 == *(_DWORD *)(v20 + 376))
                  {
                    WTF::Vector<JSC::DFG::ByteCodeParser::DelayedSetLocal,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::ByteCodeParser::DelayedSetLocal>(v20 + 368, (unint64_t)v454, v190, v191, v192, v193, v128, v129);
                    v194 = (uint64_t)v419;
                  }
                  else
                  {
                    v246 = *(_QWORD *)(v20 + 368) + 32 * v245;
                    *(_QWORD *)v454 = 0;
                    *(_QWORD *)v246 = v244;
                    v247 = *(_OWORD *)&v454[8];
                    *(_DWORD *)(v246 + 24) = v455;
                    *(_OWORD *)(v246 + 8) = v247;
                    ++*(_DWORD *)(v20 + 380);
                  }
                  if ((v454[0] & 1) != 0 && (*(_QWORD *)v454 & 0xFFFFFFFF8) != 0)
                  {
                    v389 = v194;
                    WTF::fastFree(*(_QWORD *)v454 & 0xFFFFFFFF8, v242, v190, v191, v192, v193, v128, v129);
                    v194 = v389;
                  }
                  if ((v243 & 1) != 0)
                  {
                    v390 = v243 & 0xFFFFFFFF8;
                    if ((v243 & 0xFFFFFFFF8) != 0)
                    {
                      v391 = v194;
                      WTF::fastFree(v390, v242, v190, v191, v192, v193, v128, v129);
                      v194 = v391;
                    }
                  }
                  ++v231;
                  ++v232;
                  v131 = v424;
                }
                while (v232 - v425 != 5);
              }
              v195 = 0;
              v196 = v425 + 5;
              v197 = v131 & ~(v131 >> 31);
              do
              {
                v198 = *(_QWORD *)(*(_QWORD *)(v20 + 280) + 24);
                v199 = v196;
                if (v198)
                  v199 = v425
                       + 5
                       + v195
                       + (HIDWORD(*(_QWORD *)(v198 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v198 + 24) >> 28) >> 24 << 20));
                v200 = v194;
                JSC::DFG::ByteCodeParser::addToGraph(v20, 20, v199 | ((unint64_t)(v199 >> 31) << 32), v194, 0, 0, v128, v129);
                JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&v453, *(_DWORD *)(v20 + 40), *(_QWORD *)(*(_QWORD *)(v20 + 280) + 24));
                v201 = v453;
                v202 = v453;
                if ((v453 & 1) != 0)
                {
                  v405 = v52;
                  v411 = *(_QWORD *)(v453 & 0xFFFFFFFF8);
                  v408 = v453;
                  if ((v453 & 2) != 0
                    || ((v375 = *(unsigned int *)((v453 & 0xFFFFFFFF8) + 8), (_DWORD)v375 != 0x3FFFFFFF)
                      ? (v376 = (_DWORD)v375 == -1)
                      : (v376 = 1),
                        v376))
                  {
                    v377 = 2;
                  }
                  else if (v375 >> 28)
                  {
                    v398 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v398 = v411;
                    *(_DWORD *)(v398 + 8) = v375;
                    v377 = 1;
                    v411 = v398;
                  }
                  else
                  {
                    v377 = *(_QWORD *)(v453 & 0xFFFFFFFF8);
                    v411 = v375 << 36;
                  }
                  v202 = v411 | v377;
                  v52 = v405;
                  v201 = v408;
                }
                *(_QWORD *)v454 = v202;
                *(_QWORD *)&v454[8] = v199 | ((unint64_t)(v199 >> 31) << 32);
                *(_QWORD *)&v454[16] = v200;
                v455 = 2;
                if (v199 == 0x3FFFFFFF)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1982FA04CLL);
                }
                v194 = v200;
                v203 = *(unsigned int *)(v20 + 380);
                v130 = v428;
                if ((_DWORD)v203 == *(_DWORD *)(v20 + 376))
                {
                  v292 = v194;
                  v293 = v201;
                  WTF::Vector<JSC::DFG::ByteCodeParser::DelayedSetLocal,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::ByteCodeParser::DelayedSetLocal>(v20 + 368, (unint64_t)v454, v124, v125, v126, v127, v128, v129);
                  v201 = v293;
                  v194 = v292;
                }
                else
                {
                  v204 = *(_QWORD *)(v20 + 368) + 32 * v203;
                  *(_QWORD *)v454 = 0;
                  *(_QWORD *)v204 = v202;
                  v205 = *(_OWORD *)&v454[8];
                  *(_DWORD *)(v204 + 24) = v455;
                  *(_OWORD *)(v204 + 8) = v205;
                  ++*(_DWORD *)(v20 + 380);
                }
                if ((v454[0] & 1) != 0 && (*(_QWORD *)v454 & 0xFFFFFFFF8) != 0)
                {
                  v378 = v194;
                  v379 = v201;
                  WTF::fastFree(*(_QWORD *)v454 & 0xFFFFFFFF8, v123, v124, v125, v126, v127, v128, v129);
                  v201 = v379;
                  v194 = v378;
                }
                if ((v201 & 1) != 0 && (v201 & 0xFFFFFFFF8) != 0)
                {
                  v380 = v194;
                  WTF::fastFree(v201 & 0xFFFFFFFF8, v123, v124, v125, v126, v127, v128, v129);
                  v194 = v380;
                }
                ++v195;
                ++v196;
                --v197;
              }
              while (v197);
            }
            v132 = *(_QWORD *)(v20 + 56);
            if ((v132 & 1) != 0 && (v132 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v132 & 0xFFFFFFFF8, v123, v124, v125, v126, v127, v128, v129);
            v134 = v421;
            v133 = v423;
            v135 = v421;
            if ((v421 & 1) != 0)
            {
              v368 = *(_QWORD *)(v421 & 0xFFFFFFFF8);
              if ((v421 & 2) != 0
                || (v369 = *(unsigned int *)((v421 & 0xFFFFFFFF8) + 8), (_DWORD)v369 == 0x3FFFFFFF)
                || (_DWORD)v369 == -1)
              {
                v370 = 2;
              }
              else if (v369 >> 28)
              {
                v396 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v396 = v368;
                *(_DWORD *)(v396 + 8) = v369;
                v370 = 1;
                v368 = v396;
              }
              else
              {
                v370 = *(_QWORD *)(v421 & 0xFFFFFFFF8);
                v368 = v369 << 36;
              }
              v135 = v368 | v370;
              v134 = v421;
              v133 = v423;
            }
            *(_QWORD *)(v20 + 56) = v135;
            *(_BYTE *)(v20 + 64) = 1;
            JSC::DFG::ByteCodeParser::addToGraph(v20, 22, 0, 0, 0, v127, v128, v129);
            JSC::DFG::ByteCodeParser::processSetLocalQueue((JSC::DFG::ByteCodeParser *)v20, v136, v137, v138, v139, v140, v141, v142);
            *(_QWORD *)v454 = *(_QWORD *)(*(_QWORD *)(v20 + 280) + 24);
            *(_DWORD *)&v454[8] = v415;
            *(_QWORD *)&v454[16] = 0;
            v143 = *(_BYTE *)(*(_QWORD *)v454 + 32);
            v144 = *(unsigned int *)(16 * (*v133 & 0xFFFFFFFE) + 0x4C);
            if (!(_DWORD)v144 || (v145 = 16 * v144, (char **)(16 * v144) == &JSC::ExecutableBase::s_info))
            {
              if ((v143 & 1) == ((_DWORD)v144 != 0))
              {
                if (!(_DWORD)v144)
                {
LABEL_184:
                  v149 = *(_QWORD *)(v20 + 24);
                  v150 = (_QWORD *)(v149 + 632);
                  v151 = *(unsigned int *)(v149 + 644);
                  if ((_DWORD)v151 == *(_DWORD *)(v149 + 640))
                  {
                    v173 = WTF::Vector<JSC::DFG::InlineVariableData,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v150, v151 + 1, (unint64_t)v454);
                    v152 = *(_QWORD *)(v149 + 632) + 24 * *(unsigned int *)(v149 + 644);
                    v153 = *(_OWORD *)v173;
                    v154 = *(_QWORD *)(v173 + 16);
                  }
                  else
                  {
                    v152 = *v150 + 24 * v151;
                    v153 = *(_OWORD *)v454;
                    v154 = *(_QWORD *)&v454[16];
                  }
                  *(_QWORD *)(v152 + 16) = v154;
                  *(_OWORD *)v152 = v153;
                  ++*(_DWORD *)(v149 + 644);
                  JSC::DFG::ByteCodeParser::parseCodeBlock((JSC::DFG::ByteCodeParser *)v20);
                  *(_DWORD *)(v20 + 116) = 0;
                  *(_DWORD *)(v20 + 40) = v130;
                  *(_BYTE *)(v20 + 64) = 0;
                  JSC::DFG::ByteCodeParser::linkBlocks((uint64_t)v457, (uint64_t)&v458);
                  UntargetableBlock = v459;
                  if (!v459)
                    UntargetableBlock = JSC::DFG::ByteCodeParser::allocateUntargetableBlock((JSC::DFG::ByteCodeParser *)v20);
                  *(_QWORD *)(v20 + 32) = UntargetableBlock;
                  *(_DWORD *)(v20 + 116) = 0;
                  *(_QWORD *)(v20 + 448) = v413;
                  JSC::DFG::ByteCodeParser::InlineStackEntry::~InlineStackEntry((JSC::DFG::ByteCodeParser::InlineStackEntry *)v456, v155, v156, v157, v158, v159, v160, v161);
                  if ((v134 & 1) != 0 && (v134 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v134 & 0xFFFFFFFF8, v163, v164, v165, v166, v167, v168, v169);
                  v170 = *v21 - v52;
                  if (*v21 < v52)
                    v170 = 0;
                  *v21 = v170;
                  return 1;
                }
LABEL_195:
                if (!v409)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1982FA0E8);
                }
                *(_QWORD *)&v454[16] = v409;
                goto LABEL_184;
              }
            }
            else
            {
              v146 = 16 * v144;
              do
                v146 = *(_QWORD *)(v146 + 16);
              while ((char **)v146 != &JSC::ExecutableBase::s_info && v146 != 0);
              if ((v143 & 1) == (v146 != 0))
              {
                do
                  v145 = *(_QWORD *)(v145 + 16);
                while ((char **)v145 != &JSC::ExecutableBase::s_info && v145 != 0);
                if (!v145)
                  goto LABEL_184;
                goto LABEL_195;
              }
            }
            __break(0xC471u);
            JUMPOUT(0x1982F9E60);
          }
LABEL_413:
          v78 = 0;
          goto LABEL_127;
        }
      }
      if (!v38 || *(_BYTE *)(v38 + 5) != 8)
        goto LABEL_85;
      v44 = 16;
      if ((v22 & 1) != 0)
        v44 = 8;
      v45 = *(unsigned int **)(v38 + v44);
      v46 = v45 + 2;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 + 1, v46));
      v48 = (**(uint64_t (***)(unsigned int *))v45)(v45);
      do
      {
        v49 = __ldaxr(v46);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v46));
      if (!v50)
      {
        atomic_store(1u, v45 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v45 + 32))(v45);
      }
      if (!v48)
        goto LABEL_85;
      v285 = v440;
      if (*(_DWORD *)(v48 + 40) + 1 != (_DWORD)v440
        || (v286 = (uint64_t)v441,
            v287 = HIDWORD(v440),
            JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(v20 + 280) + 32), *(_DWORD *)(v20 + 40), 1)))
      {
        if (v438)
        {
          __break(0xC471u);
          JUMPOUT(0x1982FA144);
        }
        goto LABEL_85;
      }
      if (*v430)
        JSC::DFG::ByteCodeParser::emitFunctionChecks((uint64_t)v431, *v432, *v433, *v434, v288, v289, v290, v291);
      *v435 = 1;
      *v436 = 0;
      a3 = JSC::DFG::ByteCodeParser::addCallWithoutSettingResult(v20, 0xF1u, v48, v286, v285, v287, a12, 0, 0);
      if (v426 == 2)
      {
        if ((v18 & 0x80000000) != 0)
          goto LABEL_288;
      }
      else if ((_DWORD)v18 == 0x3FFFFFFF)
      {
        goto LABEL_288;
      }
LABEL_287:
      JSC::DFG::ByteCodeParser::set(v20, v18, a3, 0, (uint64_t)a5, a6, a7, a8);
LABEL_288:
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_1::operator()((uint64_t)v429, (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
      return 1;
    }
    if (v23 == 2)
    {
      if ((a3 & 0x80000000) != 0)
        goto LABEL_36;
    }
    else if ((_DWORD)a3 == 0x3FFFFFFF)
    {
      goto LABEL_36;
    }
    if ((v22 & 1) == 0)
    {
      v21 = a13;
      v18 = a3;
      v23 = HIDWORD(a3);
      v16 = (int)a5;
      v20 = (uint64_t)a1;
      if (JSC::DFG::ByteCodeParser::get((uint64_t)a1, ((_DWORD)a5 + 5) | ((unint64_t)(((_DWORD)a5 + 5) >> 31) << 32), a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8) != a2)
      {
LABEL_36:
        if (v438)
        {
          __break(0xC471u);
          JUMPOUT(0x1982F98D4);
        }
        v17 = v444;
        v24 = *(unsigned __int8 *)(v444 + 5);
        if (v444 && (v24 - 29) > 0xFFFFFFFD)
          return 3;
        goto LABEL_41;
      }
    }
    v25 = 16 * (*(_DWORD *)v17 & 0xFFFFFFFE);
    v26 = (char **)(16 * *(unsigned int *)(v25 + 0x4C));
    if (v26 == &JSC::ArrayConstructor::s_info)
    {
      if (*(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x28) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 280)
                                                                                             + 8)
                                                                                 + 8))
        goto LABEL_36;
      if (*v430)
        JSC::DFG::ByteCodeParser::emitFunctionChecks((uint64_t)v431, *v432, *v433, *v434, (uint64_t)a5, a6, a7, a8);
      *v435 = 1;
      *v436 = 0;
      if (v15 != 2)
      {
        if (v15 >= 2)
        {
          v252 = v15 - 1;
          v253 = v16 + 6;
          do
          {
            v254 = JSC::DFG::ByteCodeParser::get(v20, v253 | ((unint64_t)(v253 >> 31) << 32), a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
            v255 = *(_QWORD *)(v20 + 24);
            v256 = (_QWORD *)(v255 + 152);
            v257 = (unint64_t)v254 & 0xFF00FFFFFFFFFFFFLL;
            v456[0] = (unsigned __int8 *)((unint64_t)v254 & 0xFF00FFFFFFFFFFFFLL);
            v258 = *(unsigned int *)(v255 + 164);
            if ((_DWORD)v258 == *(_DWORD *)(v255 + 160))
            {
              v259 = (_QWORD *)WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v256, (void *)(v258 + 1), (unint64_t)v456, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
              v258 = *(unsigned int *)(v255 + 164);
              *(_QWORD *)(*(_QWORD *)(v255 + 152) + 8 * v258) = *v259;
            }
            else
            {
              *(_QWORD *)(*v256 + 8 * v258) = v257;
            }
            *(_DWORD *)(v255 + 164) = v258 + 1;
            ++*(_DWORD *)(v20 + 272);
            ++v253;
            --v252;
          }
          while (v252);
        }
        v250 = JSC::DFG::ByteCodeParser::addToGraph(v20, 0x106u, 3, v15 - 1, (uint64_t)a5, a6, a7, a8);
        goto LABEL_286;
      }
      v219 = JSC::DFG::ByteCodeParser::get(v20, (v16 + 6) | ((unint64_t)((v16 + 6) >> 31) << 32), a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
      v222 = v20;
      v223 = 265;
      v224 = 3;
      goto LABEL_285;
    }
    if (v26 == &JSC::NumberConstructor::s_info)
    {
      if ((v22 & 1) == 0)
        goto LABEL_36;
      if (*v430)
        JSC::DFG::ByteCodeParser::emitFunctionChecks((uint64_t)v431, *v432, *v433, *v434, (uint64_t)a5, a6, a7, a8);
      *v435 = 1;
      *v436 = 0;
      if (v15 <= 1)
      {
        v250 = (uint64_t)JSC::DFG::ByteCodeParser::jsConstant((uint64_t *)v20, 0xFFFE000000000000, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
        goto LABEL_286;
      }
      v272 = JSC::DFG::ByteCodeParser::get(v20, (v16 + 6) | ((unint64_t)((v16 + 6) >> 31) << 32), a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
      v274 = v20;
      v275 = 326;
      v276 = 0;
      v277 = a12;
      goto LABEL_314;
    }
    if (v26 == &JSC::BooleanConstructor::s_info)
    {
      if ((v22 & 1) == 0)
        goto LABEL_36;
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(&v430, (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
      if (v15 <= 1)
      {
        v250 = (uint64_t)JSC::DFG::ByteCodeParser::jsConstant((uint64_t *)v20, 6uLL, v294, v295, v296, v297, v298, v299);
        goto LABEL_286;
      }
      v262 = JSC::DFG::ByteCodeParser::get(v20, (v16 + 6) | ((unint64_t)((v16 + 6) >> 31) << 32), v294, v295, v296, v297, v298, v299);
      v260 = v20;
      v261 = 313;
      goto LABEL_309;
    }
    if (v26 == &JSC::StringConstructor::s_info)
    {
      if (*v430)
        JSC::DFG::ByteCodeParser::emitFunctionChecks((uint64_t)v431, *v432, *v433, *v434, (uint64_t)a5, a6, a7, a8);
      *v435 = 1;
      *v436 = 0;
      if (v15 <= 1)
        v206 = JSC::DFG::ByteCodeParser::jsConstant((uint64_t *)v20, *(_QWORD *)(*(_QWORD *)v20 + 41968), a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
      else
        v206 = JSC::DFG::ByteCodeParser::get(v20, (v16 + 6) | ((unint64_t)((v16 + 6) >> 31) << 32), a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
      v212 = (uint64_t)v206;
      if ((v22 & 1) == 0)
      {
        v213 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x28) + 1160);
        if (v213)
          v214 = 16 * (v213 & 0xFFFFFFFE);
        else
          v214 = 0;
        v215 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(v20 + 24), v214, (int *)v456, v207, v208, v209, v210, v211);
        v219 = JSC::DFG::ByteCodeParser::addToGraph(v20, 318, v212, 0, 0, v216, v217, v218);
        v222 = v20;
        v223 = 272;
        v224 = v215;
        goto LABEL_285;
      }
      v260 = v20;
      v261 = 325;
      v262 = (WTF *)v212;
LABEL_309:
      v250 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v260, v261, (uint64_t)v262, 0, 0, v209, v210, v211);
      goto LABEL_286;
    }
    if ((v22 & 1) == 0 && v26 == &JSC::MapConstructor::s_info)
    {
      if ((*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x28) + 1520) & 1) != 0)
        v249 = 0;
      else
        v249 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x28) + 1520);
      if (v15 > 1 || !v249)
        goto LABEL_21;
      if (*v430)
        JSC::DFG::ByteCodeParser::emitFunctionChecks((uint64_t)v431, *v432, *v433, *v434, (uint64_t)a5, a6, a7, a8);
      *v435 = 1;
      *v436 = 0;
      v224 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(v20 + 24), v249, (int *)v456, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
      v222 = v20;
      v223 = 273;
    }
    else
    {
      if ((v22 & 1) != 0 || v26 != &JSC::SetConstructor::s_info)
      {
        if (v26 != &JSC::SymbolConstructor::s_info)
        {
          if (v26 != &JSC::ObjectConstructor::s_info)
          {
            if ((v22 & 1) != 0)
              goto LABEL_36;
            goto LABEL_21;
          }
          if (*v430)
          {
            JSC::DFG::ByteCodeParser::emitFunctionChecks((uint64_t)v431, *v432, *v433, *v434, (uint64_t)a5, a6, a7, a8);
            v25 = 16 * (*(_DWORD *)v17 & 0xFFFFFFFE);
          }
          *v435 = 1;
          *v436 = 0;
          v263 = *(_QWORD *)(v20 + 24);
          v264 = *(_QWORD *)(v25 + 40);
          if (v15 > 1)
          {
            v265 = JSC::DFG::Graph::freeze(v263, v264, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
            v272 = JSC::DFG::ByteCodeParser::get(v20, (v16 + 6) | ((unint64_t)((v16 + 6) >> 31) << 32), v266, v267, v268, v269, v270, v271);
            v274 = v20;
            v275 = 324;
            v276 = (uint64_t)v265;
            v277 = a12;
LABEL_314:
            v250 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v274, v275, v276, v277, (uint64_t)v272, 0, 0, v273);
            goto LABEL_286;
          }
          v384 = *(_DWORD *)(v264 + 848);
          if (v384)
            v385 = 16 * (v384 & 0xFFFFFFFE);
          else
            v385 = 0;
          v224 = JSC::DFG::Graph::registerStructure(v263, v385, (int *)v456, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
          v222 = v20;
          v223 = 259;
          goto LABEL_284;
        }
        if ((v22 & 1) != 0)
        {
          JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(&v430, (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
          if (v15 >= 2)
            v262 = JSC::DFG::ByteCodeParser::get(v20, (v16 + 6) | ((unint64_t)((v16 + 6) >> 31) << 32), v381, v382, v383, v209, v210, v211);
          else
            v262 = 0;
          v260 = v20;
          v261 = 271;
          goto LABEL_309;
        }
LABEL_21:
        if (v15 == 2)
        {
          v27 = 0;
          v28 = 1;
          a2 = (WTF *)&JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>::s_info;
          a3 = (unint64_t)&JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>::s_info;
          a4 = &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>::s_info;
          a5 = &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>::s_info;
          while (2)
          {
            v29 = &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>::s_info;
            switch((char)v27)
            {
              case 0:
                goto LABEL_34;
              case 1:
                v29 = &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>>::s_info;
                goto LABEL_34;
              case 2:
                v29 = &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>::s_info;
                goto LABEL_34;
              case 3:
                v29 = &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>::s_info;
                goto LABEL_34;
              case 4:
                v29 = &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>::s_info;
                goto LABEL_34;
              case 5:
                v29 = &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>::s_info;
                goto LABEL_34;
              case 6:
                v29 = &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>::s_info;
                goto LABEL_34;
              case 7:
                v29 = &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>::s_info;
                goto LABEL_34;
              case 8:
                v29 = &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>::s_info;
                goto LABEL_34;
              case 9:
                v29 = &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>::s_info;
                goto LABEL_34;
              case 10:
                v29 = &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>::s_info;
LABEL_34:
                if (v29 != v26)
                  goto LABEL_35;
                v300 = *(uint64_t **)(v25 + 40);
                a7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 280) + 8) + 8);
                if (v300 != (uint64_t *)a7)
                  goto LABEL_35;
                switch((char)v27)
                {
                  case 0:
                    v301 = v300 + 208;
                    break;
                  case 1:
                    v301 = v300 + 211;
                    break;
                  case 2:
                    v301 = v300 + 214;
                    break;
                  case 3:
                    v301 = v300 + 217;
                    break;
                  case 4:
                    v301 = v300 + 220;
                    break;
                  case 5:
                    v301 = v300 + 223;
                    break;
                  case 6:
                    v301 = v300 + 226;
                    break;
                  case 7:
                    v301 = v300 + 229;
                    break;
                  case 8:
                    v301 = v300 + 232;
                    break;
                  case 9:
                    v301 = v300 + 235;
                    break;
                  case 10:
                    v301 = v300 + 238;
                    break;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x1982FA4C4);
                }
                a7 = *v301;
                a8 = a7 & 1;
                if (!a7 || a8 != 0)
                  goto LABEL_35;
                a7 = v27;
                switch((char)v27)
                {
                  case 0:
                    v303 = v300 + 210;
                    break;
                  case 1:
                    v303 = v300 + 213;
                    break;
                  case 2:
                    v303 = v300 + 216;
                    break;
                  case 3:
                    v303 = v300 + 219;
                    break;
                  case 4:
                    v303 = v300 + 222;
                    break;
                  case 5:
                    v303 = v300 + 225;
                    break;
                  case 6:
                    v303 = v300 + 228;
                    break;
                  case 7:
                    v303 = v300 + 231;
                    break;
                  case 8:
                    v303 = v300 + 234;
                    break;
                  case 9:
                    v303 = v300 + 237;
                    break;
                  case 10:
                    v303 = v300 + 240;
                    break;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x1982FA45CLL);
                }
                v304 = *v303;
                if (!v304 || (v304 & 1) != 0)
                  goto LABEL_35;
                v305 = v27 + 1;
                JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(&v430, (uint64_t)&JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>::s_info, (uint64_t)&JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>::s_info, (uint64_t)&JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>::s_info, (uint64_t)&JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>::s_info, v304, v27, a8);
                v312 = JSC::DFG::ByteCodeParser::get(v20, (v16 + 6) | ((unint64_t)((v16 + 6) >> 31) << 32), v306, v307, v308, v309, v310, v311);
                v315 = JSC::DFG::ByteCodeParser::addToGraph(v20, 269, v305, (uint64_t)v312, 0, 0, v313, v314);
                JSC::DFG::ByteCodeParser::set(v20, v18, (uint64_t)v315, 0, v316, v317, v318, v319);
                if (!v28)
                  goto LABEL_36;
                goto LABEL_288;
              case 11:
LABEL_35:
                v28 = v27++ < 0xB;
                a6 = v27;
                if (v27 == 12)
                  goto LABEL_36;
                continue;
              default:
                __break(0xC471u);
                JUMPOUT(0x1982FA2ECLL);
            }
          }
        }
        goto LABEL_36;
      }
      if ((*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x28) + 1552) & 1) != 0)
        v251 = 0;
      else
        v251 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x28) + 1552);
      if (v15 > 1 || !v251)
        goto LABEL_21;
      if (*v430)
        JSC::DFG::ByteCodeParser::emitFunctionChecks((uint64_t)v431, *v432, *v433, *v434, (uint64_t)a5, a6, a7, a8);
      *v435 = 1;
      *v436 = 0;
      v224 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(v20 + 24), v251, (int *)v456, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
      v222 = v20;
      v223 = 274;
    }
LABEL_284:
    v219 = 0;
LABEL_285:
    v250 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v222, v223, v224, (uint64_t)v219, 0, 0, v220, v221);
LABEL_286:
    a3 = v250;
    goto LABEL_287;
  }
  v56 = *((unsigned __int8 *)a4 + 5);
  if (a4 && v56 == 26)
  {
    v57 = (char **)a4[3];
    if ((v57 & 1) != 0)
      v57 = *(char ***)(((unint64_t)v57 & 0xFFFFFFFFFFFFFFFELL) + 48);
  }
  else
  {
    v225 = *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C);
    v226 = *(_DWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C) != 0;
    if ((_DWORD)v225)
    {
      v227 = 16 * v225;
      if ((char **)v227 != &JSC::ExecutableBase::s_info)
      {
        do
        {
          v227 = *(_QWORD *)(v227 + 16);
          v226 = v227 != 0;
        }
        while ((char **)v227 != &JSC::ExecutableBase::s_info && v227 != 0);
      }
    }
    if (v226)
      v57 = a4;
    else
      v57 = 0;
  }
  v229 = (_QWORD *)a1[35];
  while (1)
  {
    v230 = v229[3];
    if (v57 != *(char ***)(v229[1] + 64))
    {
      if (!v230)
        goto LABEL_3;
      goto LABEL_258;
    }
    if (!v230)
      break;
    if ((*(_DWORD *)(v230 + 24) & 0x3FFFFF) == (_DWORD)a7 && (*(_QWORD *)(v230 + 24) >> 60) - 3 >= 3)
    {
      if ((*(_BYTE *)(v230 + 32) & 1) != 0)
        goto LABEL_367;
      v320 = *(_BYTE *)(v230 + 40) == 17 ? *(char ***)(v230 + 41) : 0;
      v321 = v56 == 26 ? a4 : 0;
      if (v320 == v321)
        goto LABEL_367;
    }
LABEL_258:
    if (*(_QWORD *)(v230 + 24) >> 60 == 2)
    {
      v229 = (_QWORD *)v229[26];
      if (v229)
        continue;
    }
    goto LABEL_3;
  }
  if (*(_DWORD *)(a1[1] + 28) < a7)
    goto LABEL_3;
LABEL_367:
  JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(&v430, (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  v322 = v20;
  JSC::DFG::ByteCodeParser::flushForTerminal((JSC::DFG::ByteCodeParser *)v20, v323, v324, v325, v326, v327, v328, v329);
  v336 = v229[3];
  if (v336)
  {
    if ((*(_BYTE *)(v336 + 32) & 1) != 0)
    {
      v392 = (HIDWORD(*(_QWORD *)(v336 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v336 + 24) >> 28) >> 24 << 20))
           + 3;
      JSC::DFG::ByteCodeParser::setDirect(v20, v392 | ((unint64_t)(v392 >> 31) << 32), v19, 0, v332, v333, v334, v335);
    }
  }
  else
  {
    JSC::DFG::ByteCodeParser::addToGraph(v20, 12, v19, 0, 0, v333, v334, v335);
  }
  if (!v229[3])
    JSC::DFG::ByteCodeParser::addToGraph(v20, 14, v15, 0, 0, 0, v334, v335);
  if (v15)
  {
    for (i = 0; i != v15; ++i)
    {
      v338 = JSC::DFG::ByteCodeParser::get(v20, (v16 + 5 + i) | ((unint64_t)((v16 + 5 + i) >> 31) << 32), v330, v331, v332, v333, v334, v335);
      v343 = v229[3];
      if (v343)
        v344 = i + 5 + (HIDWORD(*(_QWORD *)(v343 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v343 + 24) >> 28) >> 24 << 20));
      else
        v344 = i + 5;
      JSC::DFG::ByteCodeParser::setDirect(v20, v344 | ((unint64_t)(v344 >> 31) << 32), (uint64_t)v338, 0, v339, v340, v341, v342);
    }
  }
  v352 = JSC::DFG::ByteCodeParser::addToGraph(v20, 0, *(_QWORD *)(v20 + 72), 0, 0, 0, v334, v335);
  for (j = v229[1]; v15 < *(_DWORD *)(j + 28); j = v229[1])
  {
    v393 = v15 + 5;
    v394 = v229[3];
    if (v394)
      v393 += HIDWORD(*(_QWORD *)(v394 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v394 + 24) >> 28) >> 24 << 20);
    v20 = v322;
    JSC::DFG::ByteCodeParser::setDirect(v322, v393 | ((unint64_t)(v393 >> 31) << 32), (uint64_t)v352, 0, v348, v349, v350, v351);
    ++v15;
  }
  if (*(_DWORD *)(j + 24))
  {
    v354 = 0;
    v355 = -1;
    do
    {
      v356 = v229[3];
      v357 = v355;
      if (v356)
        v357 = (HIDWORD(*(_QWORD *)(v356 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v356 + 24) >> 28) >> 24 << 20)) + ~v354;
      JSC::DFG::ByteCodeParser::setDirect(v20, v357 | ((unint64_t)(v357 >> 31) << 32), (uint64_t)v352, 0, v348, v349, v350, v351);
      ++v354;
      --v355;
    }
    while (v354 < *(_DWORD *)(v229[1] + 24));
  }
  v358 = *(_DWORD *)(v20 + 40);
  v359 = *(_QWORD *)(v20 + 280);
  *(_QWORD *)(v20 + 280) = v229;
  *(_DWORD *)(v20 + 40) = 0;
  *(_BYTE *)(v20 + 64) = 1;
  JSC::DFG::ByteCodeParser::processSetLocalQueue((JSC::DFG::ByteCodeParser *)v20, v345, v346, v347, v348, v349, v350, v351);
  *(_DWORD *)(v20 + 40) = v358;
  *(_QWORD *)(v20 + 280) = v359;
  *(_BYTE *)(v20 + 64) = 0;
  v363 = v229[16];
  if (!v363)
  {
    __break(0xC471u);
    JUMPOUT(0x1982FA3C4);
  }
  JSC::DFG::ByteCodeParser::addToGraph(v20, 364, 0, 0, 0, v360, v361, v362)[9] = v363;
  if (!v438)
  {
    __break(0xC471u);
    JUMPOUT(0x1982FA3E4);
  }
  return 0;
}

void JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_1::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  if (!**(_BYTE **)a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1982FA640);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (!**(_BYTE **)(a1 + 8))
  {
    JSC::DFG::ByteCodeParser::addToGraph(*(_QWORD *)(a1 + 16), 23, **(_QWORD **)(a1 + 24), 0, 0, a6, a7, a8);
    v10 = **(unsigned int **)(a1 + 40);
    if ((int)v10 >= 1)
    {
      v11 = **(_DWORD **)(a1 + 32) + 5;
      do
      {
        v12 = JSC::DFG::ByteCodeParser::get(v9, v11 | ((unint64_t)(v11 >> 31) << 32), a3, a4, a5, a6, a7, a8);
        JSC::DFG::ByteCodeParser::addToGraph(v9, 23, (uint64_t)v12, 0, 0, v13, v14, v15);
        ++v11;
        --v10;
      }
      while (v10);
    }
  }
  v16 = *(_QWORD **)(a1 + 56);
  --**(_DWORD **)(a1 + 48);
  if (*v16)
  {
    *(_DWORD *)(v9 + 40) = **(_DWORD **)(a1 + 64);
    *(_BYTE *)(v9 + 64) = 1;
    JSC::DFG::ByteCodeParser::processSetLocalQueue((JSC::DFG::ByteCodeParser *)v9, a2, a3, a4, a5, a6, a7, a8);
    v20 = *(_QWORD *)(v9 + 32);
    v21 = *(unsigned int *)(v20 + 220);
    if ((_DWORD)v21)
    {
      v22 = *(_QWORD *)(v20 + 208);
      v23 = 8 * v21;
      v24 = v22 - 8;
      while (1)
      {
        v25 = *(unsigned __int16 *)(*(_QWORD *)(v24 + v23) + 18);
        if ((v25 - 364) < 0xC)
          break;
        if ((v25 - 28) < 2 || (v25 - 23) <= 2)
        {
          v23 -= 8;
          if (v23)
            continue;
        }
        goto LABEL_16;
      }
    }
    else
    {
LABEL_16:
      v26 = **(_QWORD **)(a1 + 56);
      JSC::DFG::ByteCodeParser::addToGraph(v9, 364, 0, 0, 0, v17, v18, v19)[9] = v26;
    }
  }
}

uint64_t JSC::DFG::ByteCodeParser::handleVarargsInlining(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, int a5, uint64_t a6, unint64_t a7, int a8, __int16 a9, unsigned int a10)
{
  unsigned int v11;
  BOOL v12;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  char **v24;
  BOOL v25;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  char **v35;
  char *v38;
  unsigned int v39;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  char **v47;
  BOOL v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t Direct;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  unint64_t i;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unsigned int *v166;
  unsigned int *v167;
  _QWORD *v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  __int16 v178;
  _QWORD *v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  BOOL v189;
  uint64_t v190;
  BOOL v191;
  uint64_t v192;
  unsigned int v193;
  int v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _BOOL4 v209;
  char **v210;
  BOOL v211;
  uint64_t *v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  int v241;
  int v242;
  unsigned int v243;
  uint64_t v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  __int128 v256;
  int v257;
  int v258;
  int v259;
  int v260;
  uint64_t v261;
  unsigned int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  __int128 v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  __int128 v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  _DWORD *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v289;
  unsigned int v290;
  uint64_t v291;
  __int128 v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t UntargetableBlock;
  void *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  __int128 *v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  const JSC::CodeOrigin *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char v328;
  uint64_t v329;
  void *v330;
  JSC::DFG::Node *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  int v338;
  uint64_t v339;
  _QWORD *v340;
  uint64_t v341;
  uint64_t v342;
  unsigned __int8 *v343;
  int v345;
  _QWORD *v346;
  _QWORD *v347;
  _QWORD *v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  _QWORD *v355;
  _QWORD *v356;
  _QWORD *v357;
  _QWORD *v358;
  _QWORD *v359;
  uint64_t v360;
  unsigned int v361;
  unint64_t v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unsigned __int8 *v368;
  int v369;
  _QWORD *v370;
  _QWORD *v371;
  uint64_t v372;
  uint64_t v373;
  BOOL v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  BOOL v381;
  uint64_t v382;
  unint64_t v383;
  unint64_t v384;
  _QWORD *v385;
  uint64_t v386;
  uint64_t v387;
  BOOL v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  _QWORD *v416;
  void *v417;
  uint64_t v418;
  _QWORD *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  int v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  WTF *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  uint64_t v446;
  uint64_t v447;
  unsigned int v448[2];
  uint64_t v449;
  uint64_t v450;
  _BYTE v451[24];
  int v452;
  __int16 v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  char v459;
  char v460;
  char v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;

  v446 = a6;
  v465 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)&v434 < *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8))
    return 0;
  v11 = *((unsigned __int8 *)a4 + 27);
  v12 = HIDWORD(xmmword_1ECF4C4B0) >= v11 && *((_BYTE *)a4 + 24) == 0;
  if (!v12 || *((_DWORD *)a4 + 3) != 1)
    return 0;
  v447 = a3;
  v19 = **a4;
  if (v19)
    v20 = *(_BYTE *)(v19 + 5) == 26;
  else
    v20 = 0;
  if (v20)
  {
    v21 = *(_QWORD *)(v19 + 24);
    if ((v21 & 1) != 0)
      v21 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFFELL) + 48);
  }
  else
  {
    v22 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
    v23 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
    v24 = (char **)(16 * v22);
    if ((_DWORD)v22)
      v25 = v24 == &JSC::ExecutableBase::s_info;
    else
      v25 = 1;
    if (!v25)
    {
      do
      {
        v24 = (char **)v24[2];
        v23 = v24 != 0;
      }
      while (v24 != &JSC::ExecutableBase::s_info && v24 != 0);
    }
    v21 = **a4;
    if (!v23)
      goto LABEL_418;
  }
  if (v21 && *(_BYTE *)(v21 + 5) == 12)
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v21 + 88) + 44) & 0x7FFFFFFF;
    goto LABEL_30;
  }
LABEL_418:
  v27 = 0;
LABEL_30:
  if (v27 + 1 > v11)
    v28 = (v27 + 1);
  else
    v28 = v11;
  if (a10 >= 0xC)
  {
    __break(0xC471u);
    JUMPOUT(0x1982FC3A8);
  }
  v29 = JSC::DFG::ByteCodeParser::inliningCost(a1, **a4, v28, a10);
  if (HIDWORD(v29))
    goto LABEL_58;
  v30 = 0x12u >> a10;
  v31 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 16) & 0xFFFFFFFE;
  if (v31 == 4)
  {
    v32 = xmmword_1ECF4C4A0;
    if ((v30 & 1) == 0)
      goto LABEL_37;
    v311 = (char *)&xmmword_1ECF4C4A0 + 8;
  }
  else
  {
    v32 = DWORD1(xmmword_1ECF4C490);
    if ((v30 & 1) == 0)
      goto LABEL_37;
    v311 = (char *)&xmmword_1ECF4C490 + 12;
  }
  v361 = *(_DWORD *)v311;
  if (v361 < v32)
    v32 = v361;
LABEL_37:
  v33 = *((unsigned int *)a4 + 3);
  if (!(_DWORD)v33)
    goto LABEL_56;
  while (1)
  {
    v34 = *(unsigned int *)(16 * (*(_DWORD *)(*a4)[--v33] & 0xFFFFFFFE) + 0x4C);
    v35 = (char **)(16 * v34);
    if ((_DWORD)v34 && v35 != &JSC::ExecutableBase::s_info)
      break;
    if ((_DWORD)v34)
      goto LABEL_51;
LABEL_48:
    if (!v33)
      goto LABEL_56;
  }
  do
    v35 = (char **)v35[2];
  while (v35 != &JSC::ExecutableBase::s_info && v35 != 0);
  if (!v35)
    goto LABEL_48;
LABEL_51:
  if (v31 == 4)
    v38 = (char *)&xmmword_1ECF4C4A0 + 4;
  else
    v38 = (char *)&xmmword_1ECF4C490 + 8;
  v39 = *(_DWORD *)v38;
  if (v39 < v32)
    v32 = v39;
LABEL_56:
  if (v32 < v29)
    return 0;
LABEL_58:
  v444 = a2;
  v41 = v28 - a5;
  LODWORD(v443) = (v28 - a5) & 0xFFFFFFFE;
  v448[0] = -6 - v443;
  v42 = byte_199154DE8[a10];
  v450 = v28;
  v43 = v446;
  if (v19 && *(_BYTE *)(v19 + 5) == 26)
  {
    v44 = *(_QWORD *)(v19 + 24);
    if ((v44 & 1) != 0)
      v44 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFFFFELL) + 48);
    goto LABEL_72;
  }
  v45 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
  v46 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
  v47 = (char **)(16 * v45);
  if ((_DWORD)v45)
    v48 = v47 == &JSC::ExecutableBase::s_info;
  else
    v48 = 1;
  if (!v48)
  {
    do
    {
      v47 = (char **)v47[2];
      v46 = v47 != 0;
    }
    while (v47 != &JSC::ExecutableBase::s_info && v47 != 0);
  }
  v44 = v19;
  if (!v46)
  {
LABEL_444:
    v50 = 0;
    goto LABEL_76;
  }
LABEL_72:
  if (!v44)
    goto LABEL_444;
  if (*(_BYTE *)(v44 + 5) == 12)
    v50 = v44;
  else
    v50 = 0;
LABEL_76:
  v439 = *(_QWORD *)(a1 + 448);
  v440 = a10;
  v51 = JSC::FunctionExecutable::baselineCodeBlockFor(v50, v42);
  v442 = v43;
  JSC::DFG::ByteCodeParser::emitFunctionChecks(a1, v19, v444, v43, v52, v53, v54, v55);
  v56 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
  v57 = v448[0];
  if (v56)
    v57 = v448[0] + (HIDWORD(*(_QWORD *)(v56 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v56 + 24) >> 28) >> 24 << 20));
  v445 = v19;
  if (*(_DWORD *)(a1 + 260) < ~v57)
  {
    *(_DWORD *)(a1 + 260) = ~v57;
    v58 = *(_QWORD *)(a1 + 24);
    LODWORD(v59) = *(_DWORD *)(v58 + 60);
    if ((_DWORD)v59)
    {
      v60 = 0;
      do
      {
        if (v59 <= v60)
        {
          __break(0xC471u);
          JUMPOUT(0x1982FC55CLL);
        }
        JSC::DFG::BasicBlock::ensureLocals(*(JSC::DFG::BasicBlock **)(*(_QWORD *)(v58 + 48) + 8 * v60++), ~v57);
        v58 = *(_QWORD *)(a1 + 24);
        v59 = *(unsigned int *)(v58 + 60);
      }
      while (v60 < v59);
      v56 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
    }
  }
  LODWORD(v449) = v27;
  v441 = ~(_DWORD)v443;
  v61 = v441;
  if (v56)
    v61 = (HIDWORD(*(_QWORD *)(v56 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v56 + 24) >> 28) >> 24 << 20)) - (v41 | 1u);
  v62 = *(_QWORD *)(a1 + 24);
  v69 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v69 + 24) = 0;
  *(_QWORD *)(v69 + 16) = 0;
  *(_QWORD *)(v69 + 8) = 0xC0000000C0000000;
  *(_QWORD *)(v69 + 32) = 0;
  *(_QWORD *)(v69 + 32) = *(_QWORD *)(v62 + 584);
  *(_QWORD *)(v62 + 584) = v69;
  *(_DWORD *)v69 = v61 + 1;
  *(_DWORD *)(v69 + 4) = v57 + 4;
  v70 = v450;
  *(_DWORD *)(v69 + 16) = a8;
  *(_DWORD *)(v69 + 20) = v449;
  *(_DWORD *)(v69 + 24) = v70;
  if (a9 == 372)
  {
    v71 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
    v72 = v444;
    if (v71)
    {
      v73 = *(_QWORD *)(v71 + 24);
      if ((v73 >> 60) - 3 > 2)
      {
        v308 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 24), v73 & 0x3FFFFF | 0xFFFE000000000000, v63, v64, v65, v66, v67, v68);
        Direct = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(a1, 0, (uint64_t)v308, 0, 0, 0, v309, v310);
      }
      else
      {
        v74 = (HIDWORD(v73) & 0xFFFFF | ((int)(v73 >> 28) >> 24 << 20)) + 4;
        Direct = JSC::DFG::ByteCodeParser::getDirect(a1, v74 | ((unint64_t)(v74 >> 31) << 32), v63, v64, v65, v66, v67, v68);
      }
    }
    else
    {
      Direct = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(a1, 13, 0, 0, 0, v66, v67, v68);
    }
    JSC::DFG::ByteCodeParser::addToGraph(a1, 100, v69, Direct, 0, 0, v76, v77);
    goto LABEL_102;
  }
  v80 = JSC::DFG::ByteCodeParser::get(a1, a7 | (((a7 >> 31) & 1) << 32), v63, v64, v65, v66, v67, v68);
  v81 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
  v82 = 0x200000000;
  if (v81)
    v82 = (*(_QWORD *)(v81 + 24) >> 22) | 0x200000000;
  v83 = JSC::DFG::ByteCodeParser::addToGraph(a1, 98, v69, (uint64_t)v80, 0, 0, v78, v79);
  JSC::DFG::ByteCodeParser::setDirect(a1, v82, (uint64_t)v83, 0, v84, v85, v86, v87);
  JSC::DFG::ByteCodeParser::progressToNextCheckpoint((JSC::DFG::ByteCodeParser *)a1, v88, v89, v90, v91, v92, v93, v94);
  v101 = *(_QWORD *)(a1 + 32);
  v102 = *(unsigned int *)(v101 + 112) + (unint64_t)v82 + *(unsigned int *)(v101 + 116);
  v103 = *(_QWORD *)(v101 + 96);
  v104 = *(_QWORD *)(v103 + 8 * v102);
  if (!v104)
  {
    v312 = *(_QWORD *)(a1 + 24);
    v313 = *(_QWORD *)(v312 + 464);
    *(_QWORD *)(v312 + 464) = v313 + 1;
    v314 = v313 >> 4;
    v315 = *(unsigned int *)(v312 + 484);
    if (v313 >> 4 >= v315)
    {
      v376 = v103;
      v377 = WTF::fastMalloc((WTF *)0x400);
      v457 = v377;
      v378 = *(unsigned int *)(v312 + 484);
      if ((_DWORD)v378 == *(_DWORD *)(v312 + 480))
      {
        v385 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v312 + 472, v378 + 1, (unint64_t)&v457);
        v378 = *(unsigned int *)(v312 + 484);
        *(_QWORD *)(*(_QWORD *)(v312 + 472) + 8 * v378) = *v385;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v312 + 472) + 8 * v378) = v377;
      }
      v315 = (v378 + 1);
      *(_DWORD *)(v312 + 484) = v315;
      v313 = *(_QWORD *)(v312 + 464) - 1;
      v314 = v313 >> 4;
      v103 = v376;
    }
    if (v314 >= v315)
    {
      __break(0xC471u);
      JUMPOUT(0x1982FC57CLL);
    }
    v316 = *(_QWORD *)(*(_QWORD *)(v312 + 472) + 8 * v314) + ((v313 & 0xF) << 6);
    *(_QWORD *)v316 = 0;
    *(_QWORD *)(v316 + 8) = 0;
    *(_QWORD *)(v316 + 16) = 0;
    *(_QWORD *)(v316 + 24) = v82;
    *(_DWORD *)(v316 + 32) = 0x3FFFFFFF;
    *(_DWORD *)(v316 + 56) = 0;
    *(_QWORD *)(v316 + 48) = 0;
    *(_QWORD *)(v316 + 36) = 0;
    *(_BYTE *)(v316 + 44) = 0;
    v317 = *(_QWORD *)(v312 + 464) - 1;
    if (v317 >> 4 >= *(unsigned int *)(v312 + 484))
    {
      __break(0xC471u);
      JUMPOUT(0x1982FC584);
    }
    v107 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v312 + 472) + 8 * (v317 >> 4)) + ((v317 & 0xF) << 6));
    goto LABEL_283;
  }
  v105 = *(_QWORD **)(v104 + 72);
  v106 = v105;
  do
  {
    v107 = v106;
    v106 = (_QWORD *)*v106;
  }
  while (v106);
  if (v107 != v105)
  {
    *v105 = v107;
    v104 = *(_QWORD *)(v103 + 8 * v102);
  }
  v108 = *(unsigned __int16 *)(v104 + 18);
  if (v108 != 16)
  {
    if (v108 == 15)
      goto LABEL_99;
LABEL_283:
    v437 = v102;
    v438 = v80;
    v318 = *(_QWORD *)(a1 + 24);
    if ((*(_BYTE *)(a1 + 48) & 2) != 0)
    {
      v319 = *(unsigned int *)(a1 + 40);
      v320 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      if ((_DWORD)v319 == 0x3FFFFFFF || (_DWORD)v319 == -1)
      {
        v321 = 2;
      }
      else if (v319 >> 28)
      {
        v405 = v103;
        v406 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v406 = v320;
        *(_DWORD *)(v406 + 8) = v319;
        v321 = 1;
        v320 = v406;
        v103 = v405;
      }
      else
      {
        v321 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
        v320 = v319 << 36;
      }
      *(_QWORD *)v451 = v320 | v321;
    }
    else
    {
      v432 = v103;
      JSC::CodeOrigin::CodeOrigin((uint64_t *)v451, (const JSC::CodeOrigin *)(a1 + 48));
      v103 = v432;
    }
    v322 = (const JSC::CodeOrigin *)(a1 + 56);
    if ((*(_BYTE *)(a1 + 56) & 2) != 0)
    {
      v323 = *(unsigned int *)(a1 + 40);
      v324 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      if ((_DWORD)v323 == 0x3FFFFFFF || (_DWORD)v323 == -1)
      {
        v325 = 2;
      }
      else if (v323 >> 28)
      {
        v407 = v103;
        v408 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v408 = v324;
        *(_DWORD *)(v408 + 8) = v323;
        v325 = 1;
        v324 = v408;
        v103 = v407;
      }
      else
      {
        v325 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
        v324 = v323 << 36;
      }
      v456 = v324 | v325;
    }
    else
    {
      v433 = v103;
      JSC::CodeOrigin::CodeOrigin(&v456, v322);
      v103 = v433;
    }
    v326 = *(_QWORD *)v451;
    if ((v451[0] & 1) != 0)
    {
      v393 = v103;
      v394 = *(_QWORD *)(*(_QWORD *)v451 & 0xFFFFFFFF8);
      if ((v451[0] & 2) != 0
        || (v395 = *(unsigned int *)((*(_QWORD *)v451 & 0xFFFFFFFF8) + 8), (_DWORD)v395 == 0x3FFFFFFF)
        || (_DWORD)v395 == -1)
      {
        v396 = 2;
      }
      else if (v395 >> 28)
      {
        v425 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v425 = v394;
        *(_DWORD *)(v425 + 8) = v395;
        v396 = 1;
        v394 = v425;
      }
      else
      {
        v396 = *(_QWORD *)(*(_QWORD *)v451 & 0xFFFFFFFF8);
        v394 = v395 << 36;
      }
      v326 = v394 | v396;
      v103 = v393;
    }
    v327 = v456;
    v436 = v103;
    if ((v456 & 1) != 0)
    {
      v397 = *(_QWORD *)(v456 & 0xFFFFFFFF8);
      if ((v456 & 2) != 0
        || (v398 = *(unsigned int *)((v456 & 0xFFFFFFFF8) + 8), (_DWORD)v398 == 0x3FFFFFFF)
        || (_DWORD)v398 == -1)
      {
        v399 = 2;
      }
      else if (v398 >> 28)
      {
        v426 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v426 = v397;
        *(_DWORD *)(v426 + 8) = v398;
        v399 = 1;
        v397 = v426;
      }
      else
      {
        v399 = *(_QWORD *)(v456 & 0xFFFFFFFF8);
        v397 = v398 << 36;
      }
      v327 = v397 | v399;
    }
    v328 = *(_BYTE *)(a1 + 64);
    v329 = v326;
    if ((v326 & 1) != 0)
    {
      v435 = *(_QWORD *)(v326 & 0xFFFFFFFF8);
      if ((v326 & 2) != 0
        || (v400 = *(unsigned int *)((v326 & 0xFFFFFFFF8) + 8), (_DWORD)v400 == 0x3FFFFFFF)
        || (_DWORD)v400 == -1)
      {
        v401 = 2;
      }
      else if (v400 >> 28)
      {
        v427 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v427 = v435;
        *(_DWORD *)(v427 + 8) = v400;
        v401 = 1;
        v435 = v427;
      }
      else
      {
        v401 = v435;
        v435 = v400 << 36;
      }
      v329 = v435 | v401;
    }
    v457 = v329;
    if ((v327 & 1) != 0)
    {
      v402 = v327 & 0xFFFFFFFF8;
      v435 = *(_QWORD *)(v327 & 0xFFFFFFFF8);
      if ((v327 & 2) != 0
        || (v403 = *(unsigned int *)((v327 & 0xFFFFFFFF8) + 8), (_DWORD)v403 == 0x3FFFFFFF)
        || (_DWORD)v403 == -1)
      {
        v404 = 2;
      }
      else if (v403 >> 28)
      {
        v428 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v428 = v435;
        *(_DWORD *)(v428 + 8) = v403;
        v404 = 1;
        v435 = v428;
      }
      else
      {
        v404 = v435;
        v435 = v403 << 36;
      }
      v458 = v435 | v404;
      v459 = v328;
      v460 = 0;
      if (v402)
        WTF::fastFree(v402, v322, v95, v96, v97, v98, v99, v100);
    }
    else
    {
      v458 = v327;
      v459 = v328;
      v460 = 0;
    }
    v43 = v446;
    v80 = v438;
    if ((v326 & 1) != 0 && (v326 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v326 & 0xFFFFFFFF8, v322, v95, v96, v97, v98, v99, v100);
    if ((v456 & 1) != 0 && (v456 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v456 & 0xFFFFFFFF8, v322, v95, v96, v97, v98, v99, v100);
    if ((v451[0] & 1) != 0 && (*(_QWORD *)v451 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(*(_QWORD *)v451 & 0xFFFFFFFF8, v322, v95, v96, v97, v98, v99, v100);
    *(_QWORD *)v451 = v107;
    v455 = 0;
    v456 = 0;
    v454 = 0;
    v453 = 15;
    v104 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(v318 + 1032, &v453, (uint64_t)&v457, (uint64_t)v451, &v456, &v455, &v454, v100);
    if ((v458 & 1) != 0 && (v458 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v458 & 0xFFFFFFFF8, v330, (uint64_t)v331, v332, v333, v334, v335, v336);
    v337 = v437;
    if ((v457 & 1) != 0 && (v457 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v457 & 0xFFFFFFFF8, v330, (uint64_t)v331, v332, v333, v334, v335, v336);
    v338 = *(unsigned __int16 *)(v104 + 18);
    *(_BYTE *)(a1 + 457) |= v338 == 379;
    v339 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)v451 = v104;
    v340 = (_QWORD *)(v339 + 208);
    v341 = *(unsigned int *)(v339 + 220);
    if ((_DWORD)v341 == *(_DWORD *)(v339 + 216))
    {
      v371 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v340, v341 + 1, (unint64_t)v451);
      v341 = *(unsigned int *)(v339 + 220);
      *(_QWORD *)(*(_QWORD *)(v339 + 208) + 8 * v341) = *v371;
      v338 = *(unsigned __int16 *)(v104 + 18);
    }
    else
    {
      *(_QWORD *)(*v340 + 8 * v341) = v104;
    }
    *(_DWORD *)(v339 + 220) = v341 + 1;
    v342 = *(_QWORD *)(a1 + 24);
    if (v338 == 386)
    {
      *(_DWORD *)(v104 + 48) = ~*(_DWORD *)(v342 + 308);
      v409 = *(unsigned int *)(v342 + 308);
      v410 = v409 + 2;
      v411 = *(unsigned int *)(v342 + 304);
      v412 = *(_QWORD *)(v342 + 296);
      if (v409 + 2 > v411)
      {
        v413 = v411 + (v411 >> 2);
        if (v413 >= 0x10)
          v414 = v413 + 1;
        else
          v414 = 16;
        if (v414 <= v410)
          v415 = v409 + 2;
        else
          v415 = v414;
        if (v415 >> 29)
          goto LABEL_535;
        v416 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v415));
        *(_DWORD *)(v342 + 304) = v415;
        *(_QWORD *)(v342 + 296) = v416;
        if ((_DWORD)v409)
        {
          v429 = 8 * v409;
          v430 = (uint64_t *)v412;
          do
          {
            v431 = *v430++;
            *v416++ = v431;
            v429 -= 8;
          }
          while (v429);
          v416 = *(_QWORD **)(v342 + 296);
        }
        if (v412)
        {
          if (v416 == (_QWORD *)v412)
          {
            *(_QWORD *)(v342 + 296) = 0;
            *(_DWORD *)(v342 + 304) = 0;
          }
          WTF::fastFree(v412, v417, (uint64_t)v331, v332, v333, v334, v335, v336);
          v412 = *(_QWORD *)(v342 + 296);
        }
        else
        {
          v412 = (unint64_t)v416;
        }
      }
      if (v412)
      {
        v418 = *(unsigned int *)(v342 + 308);
        if (v410 != v418)
        {
          v419 = (_QWORD *)(v412 + 8 * v418);
          v420 = 8 * v409 - 8 * v418 + 16;
          do
          {
            *v419++ = 0x3FFFFFFF00000000;
            v420 -= 8;
          }
          while (v420);
        }
      }
      *(_DWORD *)(v342 + 308) = v410;
      v342 = *(_QWORD *)(a1 + 24);
      v43 = v446;
      v337 = v437;
      v80 = v438;
    }
    if (JSC::DFG::clobbersExitState((JSC::DFG *)v342, (JSC::DFG::Graph *)v104, v331, v332, v333, v334, v335, v336))
      *(_BYTE *)(a1 + 64) = 0;
    v343 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 16) + 16);
    v461 = 0;
    v458 = (unint64_t)v343;
    v459 = 1;
    if (__ldaxr(v343))
    {
      __clrex();
    }
    else if (!__stxr(1u, v343))
    {
      goto LABEL_311;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v343);
LABEL_311:
    v461 = 1;
    v345 = *(_DWORD *)(a1 + 40);
    v346 = *(_QWORD **)(v104 + 72);
    v347 = v346;
    do
    {
      v348 = v347;
      v347 = (_QWORD *)*v347;
    }
    while (v347);
    if (v348 != v346)
      *v346 = v348;
    v349 = v348[3];
    *(_DWORD *)v451 = v345;
    *(_QWORD *)&v451[4] = v349;
    v350 = JSC::LazyOperandValueProfileParser::prediction((uint64_t *)(*(_QWORD *)(a1 + 280) + 144), (uint64_t)&v457, (int *)v451);
    v355 = *(_QWORD **)(v104 + 72);
    v356 = v355;
    do
    {
      v357 = v356;
      v356 = (_QWORD *)*v356;
    }
    while (v356);
    if (v357 != v355)
      *v355 = v357;
    v358 = v357;
    do
    {
      v359 = v358;
      v358 = (_QWORD *)*v358;
    }
    while (v358);
    if (v359 != v357)
      *v357 = v359;
    v360 = v359[1];
    v359[1] = v360 | v350;
    if ((v360 | v350) != v360)
      v357[2] |= v357[1];
    if (!v459)
      goto LABEL_326;
    v368 = (unsigned __int8 *)v458;
    v369 = __ldxr((unsigned __int8 *)v458);
    if (v369 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v458))
        goto LABEL_326;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v368, 0, v351, v352, v353, v354, v99, v100);
LABEL_326:
    *(_QWORD *)(v436 + 8 * v337) = v104;
    goto LABEL_99;
  }
  v104 = *(_QWORD *)(v104 + 24) & 0xFF00FFFFFFFFFFFFLL;
LABEL_99:
  JSC::DFG::ByteCodeParser::addToGraph(a1, 99, v69, v104, (uint64_t)v80, 0, v99, v100);
  v72 = v444;
LABEL_102:
  JSC::DFG::ByteCodeParser::addToGraph(a1, 23, v72, 0, 0, v109, v110, v111);
  v114 = *(unsigned int *)(v69 + 4);
  v115 = *(_QWORD *)(a1 + 24);
  v116 = *(_QWORD *)(v115 + 464);
  *(_QWORD *)(v115 + 464) = v116 + 1;
  v117 = v116 >> 4;
  v118 = *(unsigned int *)(v115 + 484);
  if (v116 >> 4 >= v118)
  {
    v364 = WTF::fastMalloc((WTF *)0x400);
    v457 = v364;
    v365 = *(unsigned int *)(v115 + 484);
    v119 = v447;
    if ((_DWORD)v365 == *(_DWORD *)(v115 + 480))
    {
      v370 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v115 + 472, v365 + 1, (unint64_t)&v457);
      v365 = *(unsigned int *)(v115 + 484);
      *(_QWORD *)(*(_QWORD *)(v115 + 472) + 8 * v365) = *v370;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v115 + 472) + 8 * v365) = v364;
    }
    v118 = (v365 + 1);
    *(_DWORD *)(v115 + 484) = v118;
    v116 = *(_QWORD *)(v115 + 464) - 1;
    v117 = v116 >> 4;
  }
  else
  {
    v119 = v447;
  }
  if (v117 >= v118)
  {
    __break(0xC471u);
    JUMPOUT(0x1982FC56CLL);
  }
  v120 = *(_QWORD *)(*(_QWORD *)(v115 + 472) + 8 * v117) + ((v116 & 0xF) << 6);
  *(_QWORD *)v120 = 0;
  *(_QWORD *)(v120 + 8) = 0;
  *(_QWORD *)(v120 + 16) = 0;
  *(_QWORD *)(v120 + 24) = v114 & 0xFFFFFFFEFFFFFFFFLL | (((v114 >> 31) & 1) << 32);
  *(_DWORD *)(v120 + 32) = 0x3FFFFFFF;
  *(_DWORD *)(v120 + 56) = 0;
  *(_QWORD *)(v120 + 48) = 0;
  *(_QWORD *)(v120 + 36) = 0;
  *(_BYTE *)(v120 + 44) = 0;
  v121 = *(_QWORD *)(v115 + 464) - 1;
  if (v121 >> 4 >= *(unsigned int *)(v115 + 484))
  {
    __break(0xC471u);
    JUMPOUT(0x1982FC574);
  }
  v122 = v441 | ((unint64_t)(v441 >> 31) << 32);
  v123 = HIDWORD(v119);
  v124 = *(_QWORD *)(*(_QWORD *)(v115 + 472) + 8 * (v121 >> 4));
  v125 = v121 & 0xF;
  v126 = (_QWORD *)(v124 + (v125 << 6));
  v127 = v126;
  LODWORD(v128) = v450;
  do
  {
    v129 = v127;
    v127 = (_QWORD *)*v127;
  }
  while (v127);
  if (v129 != v126)
    *v126 = v129;
  v130 = v129[1];
  v129[1] = v130 | 0x300000000;
  if ((v130 | 0x300000000) != v130)
    *(_QWORD *)(v124 + (v125 << 6) + 16) |= *(_QWORD *)(v124 + (v125 << 6) + 8);
  v131 = v124 + (v125 << 6);
  if (!*(_BYTE *)(v131 + 43))
    *(_BYTE *)(v131 + 43) = 1;
  v132 = JSC::DFG::ByteCodeParser::addToGraph(a1, 38, (uint64_t)v126, 0, 0, 0, v112, v113);
  v139 = *(_QWORD *)(a1 + 32);
  v140 = *(_QWORD *)(v131 + 24);
  v446 = v123;
  if (HIDWORD(v140) == 2)
  {
    v141 = *(unsigned int *)(v139 + 112) + (uint64_t)(int)v140 + *(unsigned int *)(v139 + 116);
  }
  else if ((v140 & 0x80000000) != 0)
  {
    v141 = (v140 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v139 + 112);
  }
  else
  {
    v141 = (int)v140 - 5;
  }
  v142 = v442;
  *(_QWORD *)(*(_QWORD *)(v139 + 96) + 8 * v141) = v132;
  v143 = JSC::DFG::ByteCodeParser::get(a1, v142 & 0xFFFFFFFEFFFFFFFFLL | (((v43 >> 31) & 1) << 32), v133, v134, v135, v136, v137, v138);
  JSC::DFG::ByteCodeParser::set(a1, v122, (uint64_t)v143, 2, v144, v145, v146, v147);
  if (v128 >= 2)
  {
    v154 = 0;
    for (i = 1; i != v128; ++i)
    {
      v156 = *(_QWORD *)(a1 + 24);
      v157 = *(_QWORD *)(v156 + 464);
      *(_QWORD *)(v156 + 464) = v157 + 1;
      v158 = v157 >> 4;
      v159 = *(unsigned int *)(v156 + 484);
      if (v157 >> 4 >= v159)
      {
        v186 = WTF::fastMalloc((WTF *)0x400);
        v457 = v186;
        v187 = *(unsigned int *)(v156 + 484);
        if ((_DWORD)v187 == *(_DWORD *)(v156 + 480))
        {
          v188 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v156 + 472, v187 + 1, (unint64_t)&v457);
          v187 = *(unsigned int *)(v156 + 484);
          *(_QWORD *)(*(_QWORD *)(v156 + 472) + 8 * v187) = *v188;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v156 + 472) + 8 * v187) = v186;
        }
        v159 = (v187 + 1);
        *(_DWORD *)(v156 + 484) = v159;
        v157 = *(_QWORD *)(v156 + 464) - 1;
        v158 = v157 >> 4;
      }
      if (v158 >= v159)
      {
        __break(0xC471u);
        JUMPOUT(0x1982FC504);
      }
      v160 = *(_QWORD *)(*(_QWORD *)(v156 + 472) + 8 * v158) + ((v157 & 0xF) << 6);
      *(_QWORD *)v160 = 0;
      *(_QWORD *)(v160 + 8) = 0;
      *(_QWORD *)(v160 + 16) = 0;
      *(_QWORD *)(v160 + 24) = (v61 + i) | ((unint64_t)((v61 + i) >> 31) << 32);
      *(_DWORD *)(v160 + 32) = 0x3FFFFFFF;
      *(_DWORD *)(v160 + 56) = 0;
      *(_QWORD *)(v160 + 48) = 0;
      *(_QWORD *)(v160 + 36) = 0;
      *(_BYTE *)(v160 + 44) = 0;
      v161 = *(_QWORD *)(v156 + 464) - 1;
      if (v161 >> 4 >= *(unsigned int *)(v156 + 484))
      {
        __break(0xC471u);
        JUMPOUT(0x1982FC50CLL);
      }
      v162 = v61;
      v163 = *(_QWORD *)(*(_QWORD *)(v156 + 472) + 8 * (v161 >> 4));
      v164 = v161 & 0xF;
      v165 = v163 + (v164 << 6);
      if (!*(_BYTE *)(v165 + 40))
        *(_BYTE *)(v165 + 40) = 1;
      v128 = v450;
      if (!v51 || i >= *(unsigned int *)(v51 + 28))
        goto LABEL_136;
      v166 = *(unsigned int **)(v51 + 152);
      if (i >= *v166)
      {
        __break(0xC471u);
        JUMPOUT(0x1982FBF98);
      }
      v167 = &v166[6 * i];
      v170 = *((_QWORD *)v167 + 1);
      v168 = v167 + 2;
      v169 = v170;
      if (!v170)
      {
        v171 = 0;
        goto LABEL_129;
      }
      if (v169 >= 0xFFFE000000000000)
      {
        v189 = (v169 & 0xFFFFFFFE) == 0;
        v171 = 0x200000000;
        v190 = 0x100000000;
        goto LABEL_168;
      }
      if (v169 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v366 = (uint64_t)COERCE_DOUBLE(v169 - 0x2000000000000);
        if ((double)v366 == COERCE_DOUBLE(v169 - 0x2000000000000))
        {
          if (v366)
          {
            if (!((unint64_t)(v366 + 0x8000000000000) >> 52))
              goto LABEL_372;
          }
          else if ((uint64_t)v169 >= 0x2000000000000)
          {
LABEL_372:
            v171 = 0x1000000000;
            goto LABEL_153;
          }
        }
        v171 = 0x2000000000;
      }
      else
      {
        if ((v169 & 0xFFFE000000000002) != 0)
        {
          v189 = (v169 & 0xFFFFFFFFFFFFFFFELL) == 6;
          v171 = 0x20000000000;
          v190 = 0x10000000000;
LABEL_168:
          if (v189)
            v171 = v190;
          goto LABEL_153;
        }
        if (qword_1ECF4C080 > v169)
        {
LABEL_515:
          v171 = 0;
          goto LABEL_153;
        }
        v171 = 0;
        if (v169 >> 36 || (v169 & 0xFFFFFFFFFLL) == 0)
          goto LABEL_153;
        v183 = *(unsigned __int8 *)(v169 + 5);
        if (v183 == 2)
        {
          v362 = *(_QWORD *)(v169 + 8);
          if (!v362)
            goto LABEL_368;
          v171 = 805306368;
          if ((v362 & 1) == 0)
          {
            if (v362 < qword_1ECF4C080)
              goto LABEL_515;
            v171 = 0;
            if (v362 >> 36 || (v362 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_153;
            if ((*(_BYTE *)(v362 + 16) & 0x10) == 0)
            {
LABEL_368:
              v171 = 805306368;
              goto LABEL_153;
            }
            v171 = 0x10000000;
          }
        }
        else
        {
          v171 = JSC::speculatedTypeMapping[v183];
        }
      }
LABEL_153:
      *v168 = 0;
LABEL_129:
      v172 = v168[1];
      if (!v172)
        goto LABEL_130;
      if (v172 >= 0xFFFE000000000000)
      {
        v191 = (v168[1] & 0xFFFFFFFELL) == 0;
        v184 = 0x200000000;
        v192 = 0x100000000;
        goto LABEL_172;
      }
      if (v172 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v367 = (uint64_t)COERCE_DOUBLE(v172 - 0x2000000000000);
        if ((double)v367 == COERCE_DOUBLE(v172 - 0x2000000000000))
        {
          if (v367)
          {
            if (!((unint64_t)(v367 + 0x8000000000000) >> 52))
              goto LABEL_375;
          }
          else if ((uint64_t)v172 >= 0x2000000000000)
          {
LABEL_375:
            v184 = 0x1000000000;
            goto LABEL_162;
          }
        }
        v184 = 0x2000000000;
      }
      else
      {
        if ((v172 & 0xFFFE000000000002) != 0)
        {
          v191 = (v172 & 0xFFFFFFFFFFFFFFFELL) == 6;
          v184 = 0x20000000000;
          v192 = 0x10000000000;
LABEL_172:
          if (v191)
            v184 = v192;
          goto LABEL_162;
        }
        if (qword_1ECF4C080 > v172)
        {
LABEL_516:
          v184 = 0;
          goto LABEL_162;
        }
        v184 = 0;
        if (v172 >> 36 || (v172 & 0xFFFFFFFFFLL) == 0)
          goto LABEL_162;
        v185 = *(unsigned __int8 *)(v172 + 5);
        if (v185 == 2)
        {
          v363 = *(_QWORD *)(v172 + 8);
          if (!v363)
            goto LABEL_369;
          v184 = 805306368;
          if ((v363 & 1) == 0)
          {
            if (v363 < qword_1ECF4C080)
              goto LABEL_516;
            v184 = 0;
            if (v363 >> 36 || (v363 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_162;
            if ((*(_BYTE *)(v363 + 16) & 0x10) == 0)
            {
LABEL_369:
              v184 = 805306368;
              goto LABEL_162;
            }
            v184 = 0x10000000;
          }
        }
        else
        {
          v184 = JSC::speculatedTypeMapping[v185];
        }
      }
LABEL_162:
      v171 |= v184;
      v168[1] = 0;
LABEL_130:
      v173 = v168[2] | v171;
      v168[2] = v173;
      v174 = (_QWORD *)v165;
      do
      {
        v175 = v174;
        v174 = (_QWORD *)*v174;
      }
      while (v174);
      if (v175 != (_QWORD *)v165)
        *(_QWORD *)v165 = v175;
      v176 = v175[1];
      v177 = v176 | v173;
      v175[1] = v177;
      if (v177 != v176)
        *(_QWORD *)(v163 + (v164 << 6) + 16) |= *(_QWORD *)(v163 + (v164 << 6) + 8);
LABEL_136:
      if (v154 < v449)
        v178 = 38;
      else
        v178 = 39;
      v179 = JSC::DFG::ByteCodeParser::addToGraph(a1, v178, v165, 0, 0, 0, v152, v153);
      v180 = *(_QWORD *)(a1 + 32);
      v181 = *(_QWORD *)(v163 + (v164 << 6) + 24);
      if (HIDWORD(v181) == 2)
      {
        v182 = *(unsigned int *)(v180 + 112) + (uint64_t)(int)v181 + *(unsigned int *)(v180 + 116);
        v61 = v162;
      }
      else
      {
        v61 = v162;
        if ((v181 & 0x80000000) != 0)
          v182 = (v181 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v180 + 112);
        else
          v182 = (uint64_t)(((unint64_t)v181 << 32) - 0x500000000) >> 32;
      }
      *(_QWORD *)(*(_QWORD *)(v180 + 96) + 8 * v182) = v179;
      ++v154;
    }
  }
  v193 = *(_DWORD *)(v51 + 28);
  LODWORD(v449) = v193 - v128;
  if (v193 <= v128)
    v194 = 0;
  else
    v194 = (v193 & 0xFFFFFFFE) - (v128 & 0xFFFFFFFE);
  v195 = v448[0] - v194;
  v196 = *(_QWORD *)(a1 + 280);
  v197 = *(_QWORD *)(v196 + 24);
  v198 = v448[0] - v194;
  if (v197)
    v198 = v195 + (HIDWORD(*(_QWORD *)(v197 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v197 + 24) >> 28) >> 24 << 20));
  v199 = *(_DWORD *)(v51 + 20) - v198;
  v200 = v447;
  if (*(_DWORD *)(a1 + 260) < v199)
  {
    *(_DWORD *)(a1 + 260) = v199;
    v201 = *(_QWORD *)(a1 + 24);
    LODWORD(v202) = *(_DWORD *)(v201 + 60);
    if ((_DWORD)v202)
    {
      v203 = 0;
      do
      {
        if (v202 <= v203)
        {
          __break(0xC471u);
          JUMPOUT(0x1982FC564);
        }
        JSC::DFG::BasicBlock::ensureLocals(*(JSC::DFG::BasicBlock **)(*(_QWORD *)(v201 + 48) + 8 * v203++), v199);
        v201 = *(_QWORD *)(a1 + 24);
        v202 = *(unsigned int *)(v201 + 60);
      }
      while (v203 < v202);
      v196 = *(_QWORD *)(a1 + 280);
      v197 = *(_QWORD *)(v196 + 24);
    }
  }
  if (v197)
    LODWORD(v197) = *(_DWORD *)(v197 + 24) >> 22;
  v204 = ((2 * *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v196 + 8) + 56) + 30)) & 4)
       + v197
       + ((2 * *(unsigned __int8 *)(*(_QWORD *)(v51 + 56) + 30)) & 4);
  v205 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(a1 + 264) < v204)
  {
    *(_DWORD *)(a1 + 264) = v204;
    LODWORD(v383) = *(_DWORD *)(v205 + 60);
    if ((_DWORD)v383)
    {
      v384 = 0;
      do
      {
        if (v383 <= v384)
        {
          __break(0xC471u);
          JUMPOUT(0x1982FC58CLL);
        }
        JSC::DFG::BasicBlock::ensureTmps(*(JSC::DFG::BasicBlock **)(*(_QWORD *)(v205 + 48) + 8 * v384++), v204, v148, v149, v150, v151, v152, v153);
        v205 = *(_QWORD *)(a1 + 24);
        v383 = *(unsigned int *)(v205 + 60);
      }
      while (v384 < v383);
    }
  }
  v206 = 0x3FFFFFFFLL;
  if (v200 != 0x3FFFFFFF)
  {
    v207 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
    if (v207)
    {
      v200 += HIDWORD(*(_QWORD *)(v207 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v207 + 24) >> 28) >> 24 << 20);
      v446 = v200 >> 31;
    }
    v206 = v200;
  }
  v208 = *(unsigned int *)(16 * (*(_DWORD *)v445 & 0xFFFFFFFE) + 0x4C);
  v209 = *(_DWORD *)(16 * (*(_DWORD *)v445 & 0xFFFFFFFE) + 0x4C) != 0;
  v210 = (char **)(16 * v208);
  if ((_DWORD)v208)
    v211 = v210 == &JSC::ExecutableBase::s_info;
  else
    v211 = 1;
  if (!v211)
  {
    do
    {
      v210 = (char **)v210[2];
      v209 = v210 != 0;
    }
    while (v210 != &JSC::ExecutableBase::s_info && v210 != 0);
  }
  v442 = *(_QWORD *)(v205 + 488);
  if (v209)
  {
    v213 = *(uint64_t **)(JSC::DFG::ByteCodeParser::set(a1, (v195 + 3) | ((unint64_t)((v195 + 3) >> 31) << 32), v444, 2, v150, v151, v152, v153)+ 72);
    v214 = v213;
    do
    {
      v215 = (uint64_t)v214;
      v214 = (uint64_t *)*v214;
    }
    while (v214);
    if ((uint64_t *)v215 != v213)
      *v213 = v215;
    if (!*(_BYTE *)(v215 + 40))
      *(_BYTE *)(v215 + 40) = 1;
  }
  else
  {
    v215 = 0;
  }
  v216 = *(_QWORD *)(a1 + 56);
  v444 = v215;
  if ((v216 & 1) != 0)
  {
    v386 = *(_QWORD *)(v216 & 0xFFFFFFFF8);
    if ((v216 & 2) != 0
      || ((v387 = *(unsigned int *)((v216 & 0xFFFFFFFF8) + 8), (_DWORD)v387 != 0x3FFFFFFF)
        ? (v388 = (_DWORD)v387 == -1)
        : (v388 = 1),
          v388))
    {
      v389 = 2;
    }
    else if (v387 >> 28)
    {
      v423 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v423 = v386;
      *(_DWORD *)(v423 + 8) = v387;
      v389 = 1;
      v386 = v423;
    }
    else
    {
      v389 = *(_QWORD *)(v216 & 0xFFFFFFFF8);
      v386 = v387 << 36;
    }
    v216 = v386 | v389;
  }
  v447 = v216;
  JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&v457, *(_DWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24));
  v224 = *(_QWORD *)(a1 + 56);
  if ((v224 & 1) != 0 && (v224 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v224 & 0xFFFFFFFF8, v217, v218, v219, v220, v221, v222, v223);
  *(_QWORD *)(a1 + 56) = v457;
  v225 = *(_QWORD *)(a1 + 280);
  if (*(_BYTE *)(v445 + 5) == 26)
    v226 = v445;
  else
    v226 = 0;
  v227 = v206 | (v446 << 32);
  v228 = v450;
  JSC::DFG::ByteCodeParser::InlineStackEntry::InlineStackEntry((uint64_t)&v457, (_QWORD *)a1, v51, v51, v226, v227, (v198 + 5), v450, v440, 0);
  LODWORD(v446) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  if ((int)v449 >= 1)
  {
    v240 = JSC::DFG::ByteCodeParser::addToGraph(a1, 0, *(_QWORD *)(a1 + 72), 0, 0, 0, v234, v235);
    if (v194 && v228 >= 1)
    {
      v241 = 0;
      v441 = a1 + 368;
      v242 = ~(_DWORD)v443;
      do
      {
        v243 = v241 + 5;
        v244 = *(_QWORD *)(v225 + 24);
        if (v244)
          v245 = v243
               + v448[0]
               + (HIDWORD(*(_QWORD *)(v244 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v244 + 24) >> 28) >> 24 << 20));
        else
          v245 = v242 + v241;
        v248 = JSC::DFG::ByteCodeParser::getDirect(a1, v245 | ((unint64_t)(v245 >> 31) << 32), v236, v237, v238, v239, v234, v235);
        v249 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
        if (v249)
        {
          v257 = HIDWORD(*(_QWORD *)(v249 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v249 + 24) >> 28) >> 24 << 20);
          v243 += v257;
          v249 = (v241 + v257 + 5) >> 31;
        }
        v250 = v243 | (unint64_t)(v249 << 32);
        JSC::DFG::ByteCodeParser::addToGraph(a1, 20, v250, v248, 0, 0, v246, v247);
        JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&v456, *(_DWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24));
        v252 = v456;
        v253 = v456;
        if ((v456 & 1) != 0)
        {
          v379 = *(_QWORD *)(v456 & 0xFFFFFFFF8);
          if ((v456 & 2) != 0
            || ((v380 = *(unsigned int *)((v456 & 0xFFFFFFFF8) + 8), (_DWORD)v380 != 0x3FFFFFFF)
              ? (v381 = (_DWORD)v380 == -1)
              : (v381 = 1),
                v381))
          {
            v382 = 2;
          }
          else if (v380 >> 28)
          {
            v440 = *(_QWORD *)(v456 & 0xFFFFFFFF8);
            v443 = v380;
            v422 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v422 = v440;
            *(_DWORD *)(v422 + 8) = v443;
            v382 = 1;
            v379 = v422;
          }
          else
          {
            v382 = *(_QWORD *)(v456 & 0xFFFFFFFF8);
            v379 = v380 << 36;
          }
          v253 = v379 | v382;
        }
        *(_QWORD *)v451 = v253;
        *(_QWORD *)&v451[8] = v250;
        *(_QWORD *)&v451[16] = v248;
        v452 = 2;
        if (v243 == 0x3FFFFFFF)
        {
          __break(0xC471u);
          JUMPOUT(0x1982FBEE4);
        }
        v254 = *(unsigned int *)(a1 + 380);
        if ((_DWORD)v254 == *(_DWORD *)(a1 + 376))
        {
          WTF::Vector<JSC::DFG::ByteCodeParser::DelayedSetLocal,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::ByteCodeParser::DelayedSetLocal>(v441, (unint64_t)v451, v236, v237, v238, v239, v234, v235);
        }
        else
        {
          v255 = *(_QWORD *)(a1 + 368) + 32 * v254;
          *(_QWORD *)v451 = 0;
          *(_QWORD *)v255 = v253;
          v256 = *(_OWORD *)&v451[8];
          *(_DWORD *)(v255 + 24) = v452;
          *(_OWORD *)(v255 + 8) = v256;
          ++*(_DWORD *)(a1 + 380);
        }
        if ((v451[0] & 1) != 0 && (*(_QWORD *)v451 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(*(_QWORD *)v451 & 0xFFFFFFFF8, v251, v236, v237, v238, v239, v234, v235);
        if ((v252 & 1) != 0 && (v252 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v252 & 0xFFFFFFFF8, v251, v236, v237, v238, v239, v234, v235);
        ++v241;
        v228 = v450;
      }
      while ((_DWORD)v450 != v241);
    }
    v258 = 0;
    v259 = v228 + 5;
    LODWORD(v450) = v228 + 5;
    v260 = v449 & ~((int)v449 >> 31);
    while (1)
    {
      v261 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      v262 = v259;
      if (v261)
        v262 = v450
             + v258
             + (HIDWORD(*(_QWORD *)(v261 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v261 + 24) >> 28) >> 24 << 20));
      JSC::DFG::ByteCodeParser::addToGraph(a1, 20, v262 | ((unint64_t)(v262 >> 31) << 32), (uint64_t)v240, 0, 0, v234, v235);
      JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&v456, *(_DWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24));
      v263 = v456;
      v264 = v456;
      if ((v456 & 1) != 0)
      {
        v372 = *(_QWORD *)(v456 & 0xFFFFFFFF8);
        if ((v456 & 2) != 0
          || ((v373 = *(unsigned int *)((v456 & 0xFFFFFFFF8) + 8), (_DWORD)v373 != 0x3FFFFFFF)
            ? (v374 = (_DWORD)v373 == -1)
            : (v374 = 1),
              v374))
        {
          v375 = 2;
        }
        else if (v373 >> 28)
        {
          *(_QWORD *)v448 = *(_QWORD *)(v456 & 0xFFFFFFFF8);
          v449 = v373;
          v421 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v421 = *(_QWORD *)v448;
          *(_DWORD *)(v421 + 8) = v449;
          v375 = 1;
          v372 = v421;
        }
        else
        {
          v375 = *(_QWORD *)(v456 & 0xFFFFFFFF8);
          v372 = v373 << 36;
        }
        v264 = v372 | v375;
      }
      *(_QWORD *)v451 = v264;
      *(_QWORD *)&v451[8] = v262 | ((unint64_t)(v262 >> 31) << 32);
      *(_QWORD *)&v451[16] = v240;
      v452 = 2;
      if (v262 == 0x3FFFFFFF)
        break;
      v265 = *(unsigned int *)(a1 + 380);
      if ((_DWORD)v265 == *(_DWORD *)(a1 + 376))
      {
        v268 = WTF::Vector<JSC::DFG::ByteCodeParser::DelayedSetLocal,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 368, v265 + 1, (unint64_t)v451, v231, v232, v233, v234, v235);
        v269 = *(_QWORD *)(a1 + 368) + 32 * *(unsigned int *)(a1 + 380);
        v270 = *(_QWORD *)v268;
        *(_QWORD *)v268 = 0;
        *(_QWORD *)v269 = v270;
        v271 = *(_OWORD *)(v268 + 8);
        *(_DWORD *)(v269 + 24) = *(_DWORD *)(v268 + 24);
        *(_OWORD *)(v269 + 8) = v271;
      }
      else
      {
        v266 = *(_QWORD *)(a1 + 368) + 32 * v265;
        *(_QWORD *)v451 = 0;
        *(_QWORD *)v266 = v264;
        v267 = *(_OWORD *)&v451[8];
        *(_DWORD *)(v266 + 24) = v452;
        *(_OWORD *)(v266 + 8) = v267;
      }
      ++*(_DWORD *)(a1 + 380);
      if ((v451[0] & 1) != 0 && (*(_QWORD *)v451 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(*(_QWORD *)v451 & 0xFFFFFFFF8, v229, v230, v231, v232, v233, v234, v235);
      if ((v263 & 1) != 0 && (v263 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v263 & 0xFFFFFFFF8, v229, v230, v231, v232, v233, v234, v235);
      ++v258;
      ++v259;
      if (!--v260)
        goto LABEL_247;
    }
LABEL_535:
    __break(0xC471u);
    JUMPOUT(0x1982FBE30);
  }
LABEL_247:
  v272 = *(_QWORD *)(a1 + 56);
  if ((v272 & 1) != 0 && (v272 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v272 & 0xFFFFFFFF8, v229, v230, v231, v232, v233, v234, v235);
  v273 = v447;
  v274 = v447;
  v275 = (_DWORD *)v445;
  if ((v447 & 1) != 0)
  {
    v390 = *(_QWORD *)(v447 & 0xFFFFFFFF8);
    if ((v447 & 2) != 0
      || (v391 = *(unsigned int *)((v447 & 0xFFFFFFFF8) + 8), (_DWORD)v391 == 0x3FFFFFFF)
      || (_DWORD)v391 == -1)
    {
      v392 = 2;
    }
    else
    {
      if (v391 >> 28)
      {
        v424 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v424 = v390;
        *(_DWORD *)(v424 + 8) = v391;
        v392 = 1;
        v390 = v424;
      }
      else
      {
        v392 = *(_QWORD *)(v447 & 0xFFFFFFFF8);
        v390 = v391 << 36;
      }
      v275 = (_DWORD *)v445;
      v273 = v447;
    }
    v274 = v390 | v392;
  }
  *(_QWORD *)(a1 + 56) = v274;
  *(_BYTE *)(a1 + 64) = 1;
  JSC::DFG::ByteCodeParser::addToGraph(a1, 22, 0, 0, 0, v233, v234, v235);
  JSC::DFG::ByteCodeParser::processSetLocalQueue((JSC::DFG::ByteCodeParser *)a1, v276, v277, v278, v279, v280, v281, v282);
  *(_QWORD *)v451 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
  *(_DWORD *)&v451[8] = v442;
  *(_QWORD *)&v451[16] = 0;
  v283 = *(_BYTE *)(*(_QWORD *)v451 + 32);
  v284 = *(unsigned int *)(16 * (*v275 & 0xFFFFFFFE) + 0x4C);
  if ((_DWORD)v284)
  {
    v285 = 16 * v284;
    if ((char **)(16 * v284) != &JSC::ExecutableBase::s_info)
    {
      v286 = 16 * v284;
      do
        v286 = *(_QWORD *)(v286 + 16);
      while ((char **)v286 != &JSC::ExecutableBase::s_info && v286 != 0);
      if ((v283 & 1) == (v286 != 0))
      {
        do
          v285 = *(_QWORD *)(v285 + 16);
        while ((char **)v285 != &JSC::ExecutableBase::s_info && v285 != 0);
        if (v285)
          goto LABEL_264;
        goto LABEL_266;
      }
LABEL_440:
      __break(0xC471u);
      JUMPOUT(0x1982FC084);
    }
  }
  if ((v283 & 1) != ((_DWORD)v284 != 0))
    goto LABEL_440;
  if ((_DWORD)v284)
  {
LABEL_264:
    if (!v444)
    {
      __break(0xC471u);
      JUMPOUT(0x1982FC0B4);
    }
    *(_QWORD *)&v451[16] = v444;
  }
LABEL_266:
  v289 = *(_QWORD *)(a1 + 24);
  v290 = *(_DWORD *)(v289 + 644);
  if (v290 == *(_DWORD *)(v289 + 640))
  {
    WTF::Vector<JSC::DFG::InlineVariableData,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::InlineVariableData&>(v289 + 632, (unint64_t)v451);
  }
  else
  {
    v291 = *(_QWORD *)(v289 + 632) + 24 * v290;
    v292 = *(_OWORD *)v451;
    *(_QWORD *)(v291 + 16) = *(_QWORD *)&v451[16];
    *(_OWORD *)v291 = v292;
    ++*(_DWORD *)(v289 + 644);
  }
  JSC::DFG::ByteCodeParser::parseCodeBlock((JSC::DFG::ByteCodeParser *)a1);
  *(_DWORD *)(a1 + 116) = 0;
  *(_DWORD *)(a1 + 40) = v446;
  *(_BYTE *)(a1 + 64) = 0;
  JSC::DFG::ByteCodeParser::linkBlocks((uint64_t)&v462, (uint64_t)&v463);
  UntargetableBlock = v464;
  if (!v464)
    UntargetableBlock = JSC::DFG::ByteCodeParser::allocateUntargetableBlock((JSC::DFG::ByteCodeParser *)a1);
  *(_QWORD *)(a1 + 32) = UntargetableBlock;
  *(_DWORD *)(a1 + 116) = 0;
  *(_QWORD *)(a1 + 448) = v439;
  JSC::DFG::ByteCodeParser::InlineStackEntry::~InlineStackEntry((JSC::DFG::ByteCodeParser::InlineStackEntry *)&v457, v293, v294, v295, v296, v297, v298, v299);
  if ((v273 & 1) != 0 && (v273 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v273 & 0xFFFFFFFF8, v301, v302, v303, v304, v305, v306, v307);
  return 1;
}

void JSC::DFG::ByteCodeParser::setDirect(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  const JSC::CodeOrigin *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  void *v26;
  JSC::DFG::Node *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  WTF *v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  void *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF *v113;
  uint64_t v114;
  uint64_t v115;
  WTF *v116;
  unsigned __int8 v117;
  unsigned __int8 v118;
  uint64_t v119;
  __int128 v120;
  int v121;
  __int16 v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;

  v8 = a4;
  v12 = *(_QWORD *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
  {
    v13 = *(unsigned int *)(a1 + 40);
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
    if ((_DWORD)v13 == 0x3FFFFFFF || (_DWORD)v13 == -1)
    {
      v16 = 2;
    }
    else if (v13 >> 28)
    {
      v88 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v88 = v14;
      *(_DWORD *)(v88 + 8) = v13;
      v16 = 1;
      v14 = v88;
    }
    else
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      v14 = v13 << 36;
    }
    v126 = v14 | v16;
  }
  else
  {
    JSC::CodeOrigin::CodeOrigin(&v126, (const JSC::CodeOrigin *)(a1 + 48));
  }
  v17 = (const JSC::CodeOrigin *)(a1 + 56);
  if ((*(_BYTE *)(a1 + 56) & 2) != 0)
  {
    v18 = *(unsigned int *)(a1 + 40);
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
    if ((_DWORD)v18 == 0x3FFFFFFF || (_DWORD)v18 == -1)
    {
      v21 = 2;
    }
    else if (v18 >> 28)
    {
      v89 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v89 = v19;
      *(_DWORD *)(v89 + 8) = v18;
      v21 = 1;
      v19 = v89;
    }
    else
    {
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      v19 = v18 << 36;
    }
    v125 = v19 | v21;
  }
  else
  {
    JSC::CodeOrigin::CodeOrigin((uint64_t *)&v125, v17);
  }
  v22 = v126;
  if ((v126 & 1) != 0)
  {
    v57 = *(_QWORD *)(v126 & 0xFFFFFFFF8);
    if ((v126 & 2) != 0
      || ((v58 = *(unsigned int *)((v126 & 0xFFFFFFFF8) + 8), (_DWORD)v58 != 0x3FFFFFFF)
        ? (v59 = (_DWORD)v58 == -1)
        : (v59 = 1),
          v59))
    {
      v60 = 2;
    }
    else if (v58 >> 28)
    {
      v105 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v105 = v57;
      *(_DWORD *)(v105 + 8) = v58;
      v60 = 1;
      v57 = v105;
    }
    else
    {
      v60 = *(_QWORD *)(v126 & 0xFFFFFFFF8);
      v57 = v58 << 36;
    }
    v22 = v57 | v60;
  }
  v23 = v125;
  if ((v125 & 1) != 0)
  {
    v61 = *(_QWORD *)(v125 & 0xFFFFFFFF8);
    if ((v125 & 2) != 0
      || ((v62 = *(unsigned int *)((v125 & 0xFFFFFFFF8) + 8), (_DWORD)v62 != 0x3FFFFFFF)
        ? (v63 = (_DWORD)v62 == -1)
        : (v63 = 1),
          v63))
    {
      v64 = 2;
    }
    else if (v62 >> 28)
    {
      v106 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v106 = v61;
      *(_DWORD *)(v106 + 8) = v62;
      v64 = 1;
      v61 = v106;
    }
    else
    {
      v64 = *(_QWORD *)(v125 & 0xFFFFFFFF8);
      v61 = v62 << 36;
    }
    v23 = v61 | v64;
  }
  v24 = *(_BYTE *)(a1 + 64);
  v25 = v22;
  if ((v22 & 1) != 0)
  {
    v65 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
    if ((v22 & 2) != 0
      || ((v66 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v66 != 0x3FFFFFFF)
        ? (v67 = (_DWORD)v66 == -1)
        : (v67 = 1),
          v67))
    {
      v68 = 2;
    }
    else if (v66 >> 28)
    {
      v117 = *(_BYTE *)(a1 + 64);
      v107 = *(_DWORD *)((v22 & 0xFFFFFFFF8) + 8);
      v108 = WTF::fastMalloc((WTF *)0x10);
      v24 = v117;
      *(_QWORD *)v108 = v65;
      *(_DWORD *)(v108 + 8) = v107;
      v68 = 1;
      v65 = v108;
    }
    else
    {
      v68 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
      v65 = v66 << 36;
    }
    v25 = v65 | v68;
  }
  v119 = v25;
  if ((v23 & 1) != 0)
  {
    v69 = v23 & 0xFFFFFFFF8;
    v70 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
    if ((v23 & 2) != 0
      || (v71 = *(unsigned int *)((v23 & 0xFFFFFFFF8) + 8), (_DWORD)v71 == 0x3FFFFFFF)
      || (_DWORD)v71 == -1)
    {
      v72 = 2;
    }
    else if (v71 >> 28)
    {
      v110 = v70;
      v118 = v24;
      v70 = WTF::fastMalloc((WTF *)0x10);
      v24 = v118;
      *(_QWORD *)v70 = v110;
      *(_DWORD *)(v70 + 8) = v71;
      v72 = 1;
    }
    else
    {
      v72 = v70;
      v70 = v71 << 36;
    }
    *(_QWORD *)&v120 = v70 | v72;
    WORD4(v120) = v24;
    if (v69)
      WTF::fastFree(v69, v17, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)&v120 = v23;
    WORD4(v120) = v24;
  }
  if ((v22 & 1) != 0 && (v22 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v22 & 0xFFFFFFFF8, v17, a3, a4, a5, a6, a7, a8);
  if ((v125 & 1) != 0 && (v125 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v125 & 0xFFFFFFFF8, v17, a3, a4, a5, a6, a7, a8);
  if ((v126 & 1) != 0 && (v126 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v126 & 0xFFFFFFFF8, v17, a3, a4, a5, a6, a7, a8);
  v125 = a3 & 0xFF00FFFFFFFFFFFFLL;
  v126 = a2;
  v123 = 0;
  v124 = 0;
  v122 = 20;
  v33 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(v12 + 1032, &v122, (uint64_t)&v119, (uint64_t)&v126, (uint64_t *)&v125, &v124, &v123, a8);
  if ((v120 & 1) != 0 && (v120 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v120 & 0xFFFFFFFF8, v26, (uint64_t)v27, v28, v29, v30, v31, v32);
  if ((v119 & 1) != 0 && (v119 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v119 & 0xFFFFFFFF8, v26, (uint64_t)v27, v28, v29, v30, v31, v32);
  v34 = *(unsigned __int16 *)(v33 + 18);
  *(_BYTE *)(a1 + 457) |= v34 == 379;
  v35 = *(_QWORD *)(a1 + 32);
  v126 = v33;
  v36 = (_QWORD *)(v35 + 208);
  v37 = *(unsigned int *)(v35 + 220);
  if ((_DWORD)v37 == *(_DWORD *)(v35 + 216))
  {
    v56 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v36, v37 + 1, (unint64_t)&v126);
    v37 = *(unsigned int *)(v35 + 220);
    *(_QWORD *)(*(_QWORD *)(v35 + 208) + 8 * v37) = *v56;
    v34 = *(unsigned __int16 *)(v33 + 18);
  }
  else
  {
    *(_QWORD *)(*v36 + 8 * v37) = v33;
  }
  *(_DWORD *)(v35 + 220) = v37 + 1;
  v38 = *(_QWORD *)(a1 + 24);
  if (v34 == 386)
  {
    *(_DWORD *)(v33 + 48) = ~*(_DWORD *)(v38 + 308);
    v90 = *(unsigned int *)(v38 + 308);
    v91 = v90 + 2;
    v92 = *(unsigned int *)(v38 + 304);
    v93 = *(WTF **)(v38 + 296);
    if (v90 + 2 > v92)
    {
      v116 = *(WTF **)(v38 + 296);
      v94 = v92 + (v92 >> 2);
      if (v94 >= 0x10)
        v95 = v94 + 1;
      else
        v95 = 16;
      if (v95 <= v91)
        v95 = v90 + 2;
      if (v95 >> 29)
        goto LABEL_175;
      v96 = v95;
      v93 = (WTF *)WTF::fastMalloc((WTF *)(8 * v95));
      *(_DWORD *)(v38 + 304) = v96;
      *(_QWORD *)(v38 + 296) = v93;
      if ((_DWORD)v90)
      {
        v112 = 8 * v90;
        v113 = v116;
        do
        {
          v114 = *(_QWORD *)v113;
          v113 = (WTF *)((char *)v113 + 8);
          *(_QWORD *)v93 = v114;
          v93 = (WTF *)((char *)v93 + 8);
          v112 -= 8;
        }
        while (v112);
        v93 = *(WTF **)(v38 + 296);
      }
      if (v116)
      {
        if (v93 == v116)
        {
          *(_QWORD *)(v38 + 296) = 0;
          *(_DWORD *)(v38 + 304) = 0;
        }
        WTF::fastFree((unint64_t)v116, v97, (uint64_t)v27, v28, v29, v30, v31, v32);
        v93 = *(WTF **)(v38 + 296);
      }
    }
    if (v93)
    {
      v98 = *(unsigned int *)(v38 + 308);
      if (v91 != v98)
      {
        v99 = (_QWORD *)((char *)v93 + 8 * v98);
        v100 = 8 * v90 - 8 * v98 + 16;
        do
        {
          *v99++ = 0x3FFFFFFF00000000;
          v100 -= 8;
        }
        while (v100);
      }
    }
    *(_DWORD *)(v38 + 308) = v91;
    v38 = *(_QWORD *)(a1 + 24);
  }
  JSC::DFG::clobbersExitState((JSC::DFG *)v38, (JSC::DFG::Graph *)v33, v27, v28, v29, v30, v31, v32);
  *(_BYTE *)(a1 + 64) = 0;
  v46 = *(unsigned int *)(a1 + 40);
  v47 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
  if ((_DWORD)v46 == 0x3FFFFFFF || (_DWORD)v46 == -1)
  {
    v49 = 2;
  }
  else if (v46 >> 28)
  {
    v87 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v87 = v47;
    *(_DWORD *)(v87 + 8) = v46;
    v49 = 1;
    v47 = v87;
  }
  else
  {
    v49 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
    v47 = v46 << 36;
  }
  v50 = v47 | v49;
  v51 = v50;
  if ((v50 & 1) != 0)
  {
    v73 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
    if ((v50 & 2) != 0
      || ((v74 = *(unsigned int *)((v50 & 0xFFFFFFFF8) + 8), (_DWORD)v74 != 0x3FFFFFFF)
        ? (v75 = (_DWORD)v74 == -1)
        : (v75 = 1),
          v75))
    {
      v76 = 2;
    }
    else if (v74 >> 28)
    {
      v109 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v109 = v73;
      *(_DWORD *)(v109 + 8) = v74;
      v76 = 1;
      v73 = v109;
    }
    else
    {
      v76 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
      v73 = v74 << 36;
    }
    v51 = v73 | v76;
  }
  v119 = v51;
  *(_QWORD *)&v120 = a2;
  *((_QWORD *)&v120 + 1) = a3;
  v121 = v8;
  if (HIDWORD(a2) == 2)
  {
    if ((a2 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_175:
    __break(0xC471u);
    JUMPOUT(0x1982FCA5CLL);
  }
  if ((_DWORD)a2 == 0x3FFFFFFF)
    goto LABEL_175;
LABEL_39:
  if ((v50 & 1) != 0 && (v50 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v50 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
  if (v8)
  {
    if (HIDWORD(a2))
      JSC::DFG::ByteCodeParser::setLocalOrTmp((JSC::CodeOrigin *)a1, (const JSC::CodeOrigin *)&v119, a2, a3, 1, v43, v44, v45);
    else
      JSC::DFG::ByteCodeParser::setArgument((_QWORD *)a1, &v119, a2, a3, 1, v43, v44, v45);
  }
  else
  {
    v52 = (_QWORD *)(a1 + 368);
    v53 = *(unsigned int *)(a1 + 380);
    if ((_DWORD)v53 == *(_DWORD *)(a1 + 376))
    {
      v77 = WTF::Vector<JSC::DFG::ByteCodeParser::DelayedSetLocal,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v52, v53 + 1, (unint64_t)&v119, v41, v42, v43, v44, v45);
      v78 = *(unsigned int *)(a1 + 380);
      v79 = *(_QWORD *)(a1 + 368);
      v80 = *(_QWORD *)v77;
      if ((*(_QWORD *)v77 & 1) != 0)
      {
        v101 = *(_QWORD *)(v80 & 0xFFFFFFFF8);
        if ((v80 & 2) != 0
          || ((v102 = *(unsigned int *)((v80 & 0xFFFFFFFF8) + 8), (_DWORD)v102 != 0x3FFFFFFF)
            ? (v103 = (_DWORD)v102 == -1)
            : (v103 = 1),
              v103))
        {
          v104 = 2;
        }
        else if (v102 >> 28)
        {
          v115 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v115 = v101;
          *(_DWORD *)(v115 + 8) = v102;
          v104 = 1;
          v101 = v115;
        }
        else
        {
          v104 = *(_QWORD *)(v80 & 0xFFFFFFFF8);
          v101 = v102 << 36;
        }
        v80 = v101 | v104;
      }
      v81 = v79 + 32 * v78;
      *(_QWORD *)v81 = v80;
      v82 = *(_OWORD *)(v77 + 8);
      *(_DWORD *)(v81 + 24) = *(_DWORD *)(v77 + 24);
      *(_OWORD *)(v81 + 8) = v82;
    }
    else
    {
      v54 = *v52 + 32 * v53;
      if ((v51 & 1) != 0)
      {
        v83 = *(_QWORD *)(v51 & 0xFFFFFFFF8);
        if ((v51 & 2) != 0
          || ((v84 = *(unsigned int *)((v51 & 0xFFFFFFFF8) + 8), (_DWORD)v84 != 0x3FFFFFFF)
            ? (v85 = (_DWORD)v84 == -1)
            : (v85 = 1),
              v85))
        {
          v86 = 2;
        }
        else if (v84 >> 28)
        {
          v111 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v111 = v83;
          *(_DWORD *)(v111 + 8) = v84;
          v86 = 1;
          v83 = v111;
        }
        else
        {
          v86 = *(_QWORD *)(v51 & 0xFFFFFFFF8);
          v83 = v84 << 36;
        }
        v51 = v83 | v86;
      }
      *(_QWORD *)v54 = v51;
      v55 = v120;
      *(_DWORD *)(v54 + 24) = v121;
      *(_OWORD *)(v54 + 8) = v55;
    }
    ++*(_DWORD *)(a1 + 380);
  }
  if ((v119 & 1) != 0 && (v119 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v119 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
}

uint64_t WTF::Bag<JSC::DFG::SwitchData,WTF::RawPtrTraits<JSC::DFG::SwitchData>,WTF::FastMalloc>::add<>(uint64_t *a1)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 24) = 2143289344;
  *(_QWORD *)(result + 32) = 0xFFFFFFFFLL;
  *(_DWORD *)(result + 40) = -1;
  *(_BYTE *)(result + 44) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 48) = *a1;
  *a1 = result;
  return result;
}

unint64_t JSC::DFG::ByteCodeParser::getDirect(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const JSC::CodeOrigin *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  void *v39;
  JSC::DFG::Node *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  int v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const JSC::CodeOrigin *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  void *v92;
  JSC::DFG::Node *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int8 *v110;
  int v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  int v124;
  uint64_t *v125;
  uint64_t *v126;
  int v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  int v136;
  int v137;
  int v138;
  _QWORD *v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  int i;
  int v144;
  unint64_t v145;
  int v146;
  BOOL v147;
  int v148;
  int v149;
  int v150;
  _QWORD *v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  int j;
  int v156;
  unint64_t v157;
  int v158;
  BOOL v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  _QWORD *v196;
  void *v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  _QWORD *v210;
  void *v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  unsigned int v215;
  unint64_t *v216;
  unint64_t v217;
  unsigned int v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char v238;
  char v239;
  __int16 v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;

  if (HIDWORD(a2))
  {
    v10 = *(_QWORD *)(a1 + 32);
    if (HIDWORD(a2) == 2)
    {
      v12 = *(unsigned int *)(v10 + 116);
      v11 = *(unsigned int *)(v10 + 112) + (uint64_t)(int)a2;
    }
    else
    {
      if ((a2 & 0x80000000) == 0)
      {
        v13 = (int)a2 - 5;
        goto LABEL_6;
      }
      v11 = a2 ^ 0xFFFFFFFFLL;
      v12 = *(unsigned int *)(v10 + 112);
    }
    v13 = v11 + v12;
LABEL_6:
    v14 = *(_QWORD *)(v10 + 96);
    v15 = *(_QWORD *)(v14 + 8 * v13);
    if (v15)
    {
      v16 = *(uint64_t **)(v15 + 72);
      v17 = v16;
      do
      {
        v18 = (uint64_t)v17;
        v17 = (uint64_t *)*v17;
      }
      while (v17);
      if ((uint64_t *)v18 != v16)
      {
        *v16 = v18;
        v15 = *(_QWORD *)(v14 + 8 * v13);
      }
      v19 = *(unsigned __int16 *)(v15 + 18);
      if (v19 == 16)
        return *(_QWORD *)(v15 + 24) & 0xFF00FFFFFFFFFFFFLL;
      if (v19 == 15)
        return v15;
LABEL_18:
      v27 = *(_QWORD *)(a1 + 24);
      if ((*(_BYTE *)(a1 + 48) & 2) != 0)
      {
        v28 = *(unsigned int *)(a1 + 40);
        v29 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
        if ((_DWORD)v28 == 0x3FFFFFFF || (_DWORD)v28 == -1)
        {
          v30 = 2;
        }
        else if (v28 >> 28)
        {
          v187 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v187 = v29;
          *(_DWORD *)(v187 + 8) = v28;
          v30 = 1;
          v29 = v187;
        }
        else
        {
          v30 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
          v29 = v28 << 36;
        }
        v244 = v29 | v30;
      }
      else
      {
        JSC::CodeOrigin::CodeOrigin(&v244, (const JSC::CodeOrigin *)(a1 + 48));
      }
      v31 = (const JSC::CodeOrigin *)(a1 + 56);
      if ((*(_BYTE *)(a1 + 56) & 2) != 0)
      {
        v32 = *(unsigned int *)(a1 + 40);
        v33 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
        if ((_DWORD)v32 == 0x3FFFFFFF || (_DWORD)v32 == -1)
        {
          v34 = 2;
        }
        else if (v32 >> 28)
        {
          v188 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v188 = v33;
          *(_DWORD *)(v188 + 8) = v32;
          v34 = 1;
          v33 = v188;
        }
        else
        {
          v34 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
          v33 = v32 << 36;
        }
        v243 = v33 | v34;
      }
      else
      {
        JSC::CodeOrigin::CodeOrigin(&v243, v31);
      }
      v35 = v244;
      if ((v244 & 1) != 0)
      {
        v160 = *(_QWORD *)(v244 & 0xFFFFFFFF8);
        if ((v244 & 2) != 0
          || (v161 = *(unsigned int *)((v244 & 0xFFFFFFFF8) + 8), (_DWORD)v161 == 0x3FFFFFFF)
          || (_DWORD)v161 == -1)
        {
          v162 = 2;
        }
        else if (v161 >> 28)
        {
          v221 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v221 = v160;
          *(_DWORD *)(v221 + 8) = v161;
          v162 = 1;
          v160 = v221;
        }
        else
        {
          v162 = *(_QWORD *)(v244 & 0xFFFFFFFF8);
          v160 = v161 << 36;
        }
        v35 = v160 | v162;
      }
      v36 = v243;
      if ((v243 & 1) != 0)
      {
        v163 = *(_QWORD *)(v243 & 0xFFFFFFFF8);
        if ((v243 & 2) != 0
          || (v164 = *(unsigned int *)((v243 & 0xFFFFFFFF8) + 8), (_DWORD)v164 == 0x3FFFFFFF)
          || (_DWORD)v164 == -1)
        {
          v165 = 2;
        }
        else if (v164 >> 28)
        {
          v222 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v222 = v163;
          *(_DWORD *)(v222 + 8) = v164;
          v165 = 1;
          v163 = v222;
        }
        else
        {
          v165 = *(_QWORD *)(v243 & 0xFFFFFFFF8);
          v163 = v164 << 36;
        }
        v36 = v163 | v165;
      }
      v37 = *(_BYTE *)(a1 + 64);
      v38 = v35;
      if ((v35 & 1) != 0)
      {
        v166 = v36;
        v167 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
        if ((v35 & 2) != 0
          || (v168 = *(unsigned int *)((v35 & 0xFFFFFFFF8) + 8), (_DWORD)v168 == 0x3FFFFFFF)
          || (_DWORD)v168 == -1)
        {
          v169 = 2;
        }
        else
        {
          v234 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
          if (v168 >> 28)
          {
            v167 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v167 = v234;
            *(_DWORD *)(v167 + 8) = v168;
            v169 = 1;
          }
          else
          {
            v169 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
            v167 = v168 << 36;
          }
        }
        v38 = v167 | v169;
        v36 = v166;
      }
      v236 = v38;
      if ((v36 & 1) != 0)
      {
        v170 = v36 & 0xFFFFFFFF8;
        v171 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
        if ((v36 & 2) != 0 || (v172 = *(_DWORD *)((v36 & 0xFFFFFFFF8) + 8), v172 == 0x3FFFFFFF) || v172 == -1)
        {
          v173 = 2;
        }
        else
        {
          v235 = *(unsigned int *)(v170 + 8);
          if (v172 >> 28)
          {
            v223 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v223 = v171;
            *(_DWORD *)(v223 + 8) = v235;
            v173 = 1;
            v171 = v223;
          }
          else
          {
            v173 = v171;
            v171 = v235 << 36;
          }
        }
        v237 = v171 | v173;
        v238 = v37;
        v239 = 0;
        if (v170)
          WTF::fastFree(v170, v31, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        v237 = v36;
        v238 = v37;
        v239 = 0;
      }
      if ((v35 & 1) != 0 && (v35 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v35 & 0xFFFFFFFF8, v31, a3, a4, a5, a6, a7, a8);
      if ((v243 & 1) != 0 && (v243 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v243 & 0xFFFFFFFF8, v31, a3, a4, a5, a6, a7, a8);
      if ((v244 & 1) != 0 && (v244 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v244 & 0xFFFFFFFF8, v31, a3, a4, a5, a6, a7, a8);
      v243 = 0;
      v244 = v18;
      v241 = 0;
      v242 = 0;
      v240 = 15;
      v15 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(v27 + 1032, &v240, (uint64_t)&v236, (uint64_t)&v244, &v243, &v242, &v241, a8);
      if ((v237 & 1) != 0 && (v237 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v237 & 0xFFFFFFFF8, v39, (uint64_t)v40, v41, v42, v43, v44, v45);
      if ((v236 & 1) != 0 && (v236 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v236 & 0xFFFFFFFF8, v39, (uint64_t)v40, v41, v42, v43, v44, v45);
      v46 = *(unsigned __int16 *)(v15 + 18);
      *(_BYTE *)(a1 + 457) |= v46 == 379;
      v47 = *(_QWORD *)(a1 + 32);
      v244 = v15;
      v48 = (_QWORD *)(v47 + 208);
      v49 = *(unsigned int *)(v47 + 220);
      if ((_DWORD)v49 == *(_DWORD *)(v47 + 216))
      {
        v128 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, v49 + 1, (unint64_t)&v244);
        v49 = *(unsigned int *)(v47 + 220);
        *(_QWORD *)(*(_QWORD *)(v47 + 208) + 8 * v49) = *v128;
        v46 = *(unsigned __int16 *)(v15 + 18);
      }
      else
      {
        *(_QWORD *)(*v48 + 8 * v49) = v15;
      }
      *(_DWORD *)(v47 + 220) = v49 + 1;
      v50 = *(_QWORD *)(a1 + 24);
      if (v46 == 386)
      {
        *(_DWORD *)(v15 + 48) = ~*(_DWORD *)(v50 + 308);
        v189 = *(unsigned int *)(v50 + 308);
        v190 = v189 + 2;
        v191 = *(unsigned int *)(v50 + 304);
        v192 = *(_QWORD *)(v50 + 296);
        if (v189 + 2 > v191)
        {
          v193 = v191 + (v191 >> 2);
          if (v193 >= 0x10)
            v194 = v193 + 1;
          else
            v194 = 16;
          if (v194 <= v190)
            v195 = v189 + 2;
          else
            v195 = v194;
          if (v195 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1982FDE5CLL);
          }
          v196 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v195));
          *(_DWORD *)(v50 + 304) = v195;
          *(_QWORD *)(v50 + 296) = v196;
          if ((_DWORD)v189)
          {
            v224 = 8 * v189;
            v225 = (uint64_t *)v192;
            do
            {
              v226 = *v225++;
              *v196++ = v226;
              v224 -= 8;
            }
            while (v224);
            v196 = *(_QWORD **)(v50 + 296);
          }
          if (v192)
          {
            if (v196 == (_QWORD *)v192)
            {
              *(_QWORD *)(v50 + 296) = 0;
              *(_DWORD *)(v50 + 304) = 0;
            }
            WTF::fastFree(v192, v197, (uint64_t)v40, v41, v42, v43, v44, v45);
            v192 = *(_QWORD *)(v50 + 296);
          }
          else
          {
            v192 = (unint64_t)v196;
          }
        }
        if (v192)
        {
          v198 = *(unsigned int *)(v50 + 308);
          if (v190 != v198)
          {
            v199 = (_QWORD *)(v192 + 8 * v198);
            v200 = 8 * v189 - 8 * v198 + 16;
            do
            {
              *v199++ = 0x3FFFFFFF00000000;
              v200 -= 8;
            }
            while (v200);
          }
        }
        *(_DWORD *)(v50 + 308) = v190;
        v50 = *(_QWORD *)(a1 + 24);
      }
      if (JSC::DFG::clobbersExitState((JSC::DFG *)v50, (JSC::DFG::Graph *)v15, v40, v41, v42, v43, v44, v45))
        *(_BYTE *)(a1 + 64) = 0;
      v57 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 16) + 16);
      if (__ldaxr(v57))
      {
        __clrex();
      }
      else if (!__stxr(1u, v57))
      {
        goto LABEL_46;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v57);
LABEL_46:
      v59 = *(_DWORD *)(a1 + 40);
      v60 = *(_QWORD **)(v15 + 72);
      v61 = v60;
      do
      {
        v62 = v61;
        v61 = (_QWORD *)*v61;
      }
      while (v61);
      if (v62 != v60)
        *v60 = v62;
      v63 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 144);
      if (v63)
      {
        v136 = 0;
        v139 = v62 + 3;
        v138 = *((_DWORD *)v62 + 6);
        v137 = *((_DWORD *)v139 + 1);
        v140 = *(_DWORD *)(v63 - 8);
        v141 = 9 * ((v59 + ~(v59 << 15)) ^ ((v59 + ~(v59 << 15)) >> 10));
        v142 = (v141 ^ (v141 >> 6)) + ~((v141 ^ (v141 >> 6)) << 11);
        for (i = (v142 ^ HIWORD(v142)) + v138 + v137; ; i = v136 + v144)
        {
          v144 = i & v140;
          v145 = v63 + 24 * (i & v140);
          if (*(_DWORD *)v145 == v59)
          {
            v146 = *(_DWORD *)(v145 + 8);
            if (v146 == v137)
            {
              v51 = *(unsigned int *)(v145 + 4);
              v146 = v137;
              if ((_DWORD)v51 == v138)
              {
                v215 = *(_DWORD *)(v63 - 4);
                goto LABEL_166;
              }
            }
          }
          else
          {
            v146 = *(_DWORD *)(v145 + 8);
          }
          v147 = *(_DWORD *)v145 == -1 && v146 == 0;
          if (v147 && *(_DWORD *)(v145 + 4) == 0x3FFFFFFF)
            break;
          ++v136;
        }
        v215 = *(_DWORD *)(v63 - 4);
        v145 = v63 + 24 * v215;
LABEL_166:
        if (v145 == v63 + 24 * v215 || (v216 = *(unint64_t **)(v145 + 16)) == 0)
        {
          v63 = 0;
        }
        else
        {
          v217 = *v216;
          if (*v216)
          {
            v217 = JSC::speculationFromValue(v217);
            *v216 = 0;
          }
          v63 = v216[1] | v217;
          v216[1] = v63;
        }
      }
      v64 = *(_QWORD **)(v15 + 72);
      v65 = v64;
      do
      {
        v66 = v65;
        v65 = (_QWORD *)*v65;
      }
      while (v65);
      if (v66 != v64)
        *v64 = v66;
      v67 = v66;
      do
      {
        v68 = v67;
        v67 = (_QWORD *)*v67;
      }
      while (v67);
      if (v68 != v66)
        *v66 = v68;
      v69 = v68[1];
      v70 = v69 | v63;
      v68[1] = v70;
      if (v70 != v69)
        v66[2] |= v66[1];
      v71 = __ldxr(v57);
      if (v71 == 1)
      {
        if (!__stlxr(0, v57))
          goto LABEL_118;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v57, 0, v51, v52, v53, v54, v55, v56);
LABEL_118:
      *(_QWORD *)(v14 + 8 * v13) = v15;
      return v15;
    }
    v21 = *(_QWORD *)(a1 + 24);
    v22 = *(_QWORD *)(v21 + 464);
    *(_QWORD *)(v21 + 464) = v22 + 1;
    v23 = v22 >> 4;
    v24 = *(unsigned int *)(v21 + 484);
    if (v22 >> 4 >= v24)
    {
      v129 = WTF::fastMalloc((WTF *)0x400);
      v236 = v129;
      v130 = *(unsigned int *)(v21 + 484);
      if ((_DWORD)v130 == *(_DWORD *)(v21 + 480))
      {
        v134 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21 + 472, v130 + 1, (unint64_t)&v236);
        v130 = *(unsigned int *)(v21 + 484);
        *(_QWORD *)(*(_QWORD *)(v21 + 472) + 8 * v130) = *v134;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v21 + 472) + 8 * v130) = v129;
      }
      v24 = (v130 + 1);
      *(_DWORD *)(v21 + 484) = v24;
      v22 = *(_QWORD *)(v21 + 464) - 1;
      v23 = v22 >> 4;
    }
    if (v23 < v24)
    {
      v25 = *(_QWORD *)(*(_QWORD *)(v21 + 472) + 8 * v23) + ((v22 & 0xF) << 6);
      *(_QWORD *)v25 = 0;
      *(_QWORD *)(v25 + 8) = 0;
      *(_QWORD *)(v25 + 16) = 0;
      *(_QWORD *)(v25 + 24) = a2;
      *(_DWORD *)(v25 + 32) = 0x3FFFFFFF;
      *(_DWORD *)(v25 + 56) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 36) = 0;
      *(_BYTE *)(v25 + 44) = 0;
      v26 = *(_QWORD *)(v21 + 464) - 1;
      if (v26 >> 4 >= *(unsigned int *)(v21 + 484))
      {
        __break(0xC471u);
        JUMPOUT(0x1982FDE44);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v21 + 472) + 8 * (v26 >> 4)) + ((v26 & 0xF) << 6);
      goto LABEL_18;
    }
LABEL_335:
    __break(0xC471u);
    JUMPOUT(0x1982FDE3CLL);
  }
  v72 = (a2 - 5);
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 96) + 8 * v72);
  if (!v15)
  {
    v73 = *(_QWORD *)(a1 + 24);
    v74 = *(_QWORD *)(v73 + 464);
    *(_QWORD *)(v73 + 464) = v74 + 1;
    v75 = v74 >> 4;
    v76 = *(unsigned int *)(v73 + 484);
    if (v74 >> 4 >= v76)
    {
      v132 = WTF::fastMalloc((WTF *)0x400);
      v236 = v132;
      v133 = *(unsigned int *)(v73 + 484);
      if ((_DWORD)v133 == *(_DWORD *)(v73 + 480))
      {
        v135 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v73 + 472, v133 + 1, (unint64_t)&v236);
        v133 = *(unsigned int *)(v73 + 484);
        *(_QWORD *)(*(_QWORD *)(v73 + 472) + 8 * v133) = *v135;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v73 + 472) + 8 * v133) = v132;
      }
      v76 = (v133 + 1);
      *(_DWORD *)(v73 + 484) = v76;
      v74 = *(_QWORD *)(v73 + 464) - 1;
      v75 = v74 >> 4;
    }
    if (v75 >= v76)
    {
      __break(0xC471u);
      JUMPOUT(0x1982FDE4CLL);
    }
    v77 = *(_QWORD *)(*(_QWORD *)(v73 + 472) + 8 * v75) + ((v74 & 0xF) << 6);
    *(_QWORD *)v77 = 0;
    *(_QWORD *)(v77 + 8) = 0;
    *(_QWORD *)(v77 + 16) = 0;
    *(_QWORD *)(v77 + 24) = (2 * a2) & 0x100000000 | a2;
    *(_DWORD *)(v77 + 32) = 0x3FFFFFFF;
    *(_DWORD *)(v77 + 56) = 0;
    *(_QWORD *)(v77 + 48) = 0;
    *(_QWORD *)(v77 + 36) = 0;
    *(_BYTE *)(v77 + 44) = 0;
    v78 = *(_QWORD *)(v73 + 464) - 1;
    if (v78 >> 4 >= *(unsigned int *)(v73 + 484))
    {
      __break(0xC471u);
      JUMPOUT(0x1982FDE54);
    }
    v79 = *(_QWORD *)(*(_QWORD *)(v73 + 472) + 8 * (v78 >> 4)) + ((v78 & 0xF) << 6);
    goto LABEL_69;
  }
  v125 = *(uint64_t **)(v15 + 72);
  v126 = v125;
  do
  {
    v79 = (uint64_t)v126;
    v126 = (uint64_t *)*v126;
  }
  while (v126);
  if ((uint64_t *)v79 != v125)
    *v125 = v79;
  v127 = *(unsigned __int16 *)(v15 + 18);
  if (v127 != 15)
  {
    if (v127 == 16)
      return *(_QWORD *)(v15 + 24) & 0xFF00FFFFFFFFFFFFLL;
LABEL_69:
    v80 = *(_QWORD *)(a1 + 24);
    if ((*(_BYTE *)(a1 + 48) & 2) != 0)
    {
      v81 = *(unsigned int *)(a1 + 40);
      v82 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      if ((_DWORD)v81 == 0x3FFFFFFF || (_DWORD)v81 == -1)
      {
        v83 = 2;
      }
      else if (v81 >> 28)
      {
        v201 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v201 = v82;
        *(_DWORD *)(v201 + 8) = v81;
        v83 = 1;
        v82 = v201;
      }
      else
      {
        v83 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
        v82 = v81 << 36;
      }
      v244 = v82 | v83;
    }
    else
    {
      JSC::CodeOrigin::CodeOrigin(&v244, (const JSC::CodeOrigin *)(a1 + 48));
    }
    v84 = (const JSC::CodeOrigin *)(a1 + 56);
    if ((*(_BYTE *)(a1 + 56) & 2) != 0)
    {
      v85 = *(unsigned int *)(a1 + 40);
      v86 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      if ((_DWORD)v85 == 0x3FFFFFFF || (_DWORD)v85 == -1)
      {
        v87 = 2;
      }
      else if (v85 >> 28)
      {
        v202 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v202 = v86;
        *(_DWORD *)(v202 + 8) = v85;
        v87 = 1;
        v86 = v202;
      }
      else
      {
        v87 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
        v86 = v85 << 36;
      }
      v243 = v86 | v87;
    }
    else
    {
      JSC::CodeOrigin::CodeOrigin(&v243, v84);
    }
    v88 = v244;
    if ((v244 & 1) != 0)
    {
      v174 = *(_QWORD *)(v244 & 0xFFFFFFFF8);
      if ((v244 & 2) != 0
        || (v175 = *(unsigned int *)((v244 & 0xFFFFFFFF8) + 8), (_DWORD)v175 == 0x3FFFFFFF)
        || (_DWORD)v175 == -1)
      {
        v176 = 2;
      }
      else if (v175 >> 28)
      {
        v227 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v227 = v174;
        *(_DWORD *)(v227 + 8) = v175;
        v176 = 1;
        v174 = v227;
      }
      else
      {
        v176 = *(_QWORD *)(v244 & 0xFFFFFFFF8);
        v174 = v175 << 36;
      }
      v88 = v174 | v176;
    }
    v89 = v243;
    if ((v243 & 1) != 0)
    {
      v177 = *(_QWORD *)(v243 & 0xFFFFFFFF8);
      if ((v243 & 2) != 0
        || (v178 = *(unsigned int *)((v243 & 0xFFFFFFFF8) + 8), (_DWORD)v178 == 0x3FFFFFFF)
        || (_DWORD)v178 == -1)
      {
        v179 = 2;
      }
      else if (v178 >> 28)
      {
        v228 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v228 = v177;
        *(_DWORD *)(v228 + 8) = v178;
        v179 = 1;
        v177 = v228;
      }
      else
      {
        v179 = *(_QWORD *)(v243 & 0xFFFFFFFF8);
        v177 = v178 << 36;
      }
      v89 = v177 | v179;
    }
    v90 = *(_BYTE *)(a1 + 64);
    v91 = v88;
    if ((v88 & 1) != 0)
    {
      v180 = *(_QWORD *)(v88 & 0xFFFFFFFF8);
      if ((v88 & 2) != 0
        || (v181 = *(unsigned int *)((v88 & 0xFFFFFFFF8) + 8), (_DWORD)v181 == 0x3FFFFFFF)
        || (_DWORD)v181 == -1)
      {
        v182 = 2;
      }
      else if (v181 >> 28)
      {
        v229 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v229 = v180;
        *(_DWORD *)(v229 + 8) = v181;
        v182 = 1;
        v180 = v229;
      }
      else
      {
        v182 = *(_QWORD *)(v88 & 0xFFFFFFFF8);
        v180 = v181 << 36;
      }
      v91 = v180 | v182;
    }
    v236 = v91;
    if ((v89 & 1) != 0)
    {
      v183 = v89 & 0xFFFFFFFF8;
      v184 = *(_QWORD *)(v89 & 0xFFFFFFFF8);
      if ((v89 & 2) != 0
        || (v185 = *(unsigned int *)((v89 & 0xFFFFFFFF8) + 8), (_DWORD)v185 == 0x3FFFFFFF)
        || (_DWORD)v185 == -1)
      {
        v186 = 2;
      }
      else if (v185 >> 28)
      {
        v230 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v230 = v184;
        *(_DWORD *)(v230 + 8) = v185;
        v186 = 1;
        v184 = v230;
      }
      else
      {
        v186 = v184;
        v184 = v185 << 36;
      }
      v237 = v184 | v186;
      v238 = v90;
      v239 = 0;
      if (v183)
        WTF::fastFree(v183, v84, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v237 = v89;
      v238 = v90;
      v239 = 0;
    }
    if ((v88 & 1) != 0 && (v88 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v88 & 0xFFFFFFFF8, v84, a3, a4, a5, a6, a7, a8);
    if ((v243 & 1) != 0 && (v243 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v243 & 0xFFFFFFFF8, v84, a3, a4, a5, a6, a7, a8);
    if ((v244 & 1) != 0 && (v244 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v244 & 0xFFFFFFFF8, v84, a3, a4, a5, a6, a7, a8);
    v243 = 0;
    v244 = v79;
    v241 = 0;
    v242 = 0;
    v240 = 15;
    v15 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(v80 + 1032, &v240, (uint64_t)&v236, (uint64_t)&v244, &v243, &v242, &v241, a8);
    if ((v237 & 1) != 0 && (v237 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v237 & 0xFFFFFFFF8, v92, (uint64_t)v93, v94, v95, v96, v97, v98);
    if ((v236 & 1) != 0 && (v236 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v236 & 0xFFFFFFFF8, v92, (uint64_t)v93, v94, v95, v96, v97, v98);
    v99 = *(unsigned __int16 *)(v15 + 18);
    *(_BYTE *)(a1 + 457) |= v99 == 379;
    v100 = *(_QWORD *)(a1 + 32);
    v244 = v15;
    v101 = (_QWORD *)(v100 + 208);
    v102 = *(unsigned int *)(v100 + 220);
    if ((_DWORD)v102 == *(_DWORD *)(v100 + 216))
    {
      v131 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v101, v102 + 1, (unint64_t)&v244);
      v102 = *(unsigned int *)(v100 + 220);
      *(_QWORD *)(*(_QWORD *)(v100 + 208) + 8 * v102) = *v131;
      v99 = *(unsigned __int16 *)(v15 + 18);
    }
    else
    {
      *(_QWORD *)(*v101 + 8 * v102) = v15;
    }
    *(_DWORD *)(v100 + 220) = v102 + 1;
    v103 = *(_QWORD *)(a1 + 24);
    if (v99 == 386)
    {
      *(_DWORD *)(v15 + 48) = ~*(_DWORD *)(v103 + 308);
      v203 = *(unsigned int *)(v103 + 308);
      v204 = v203 + 2;
      v205 = *(unsigned int *)(v103 + 304);
      v206 = *(_QWORD *)(v103 + 296);
      if (v203 + 2 > v205)
      {
        v207 = v205 + (v205 >> 2);
        if (v207 >= 0x10)
          v208 = v207 + 1;
        else
          v208 = 16;
        if (v208 <= v204)
          v209 = v203 + 2;
        else
          v209 = v208;
        if (v209 >> 29)
          goto LABEL_335;
        v210 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v209));
        *(_DWORD *)(v103 + 304) = v209;
        *(_QWORD *)(v103 + 296) = v210;
        if ((_DWORD)v203)
        {
          v231 = 8 * v203;
          v232 = (uint64_t *)v206;
          do
          {
            v233 = *v232++;
            *v210++ = v233;
            v231 -= 8;
          }
          while (v231);
          v210 = *(_QWORD **)(v103 + 296);
        }
        if (v206)
        {
          if (v210 == (_QWORD *)v206)
          {
            *(_QWORD *)(v103 + 296) = 0;
            *(_DWORD *)(v103 + 304) = 0;
          }
          WTF::fastFree(v206, v211, (uint64_t)v93, v94, v95, v96, v97, v98);
          v206 = *(_QWORD *)(v103 + 296);
        }
        else
        {
          v206 = (unint64_t)v210;
        }
      }
      if (v206)
      {
        v212 = *(unsigned int *)(v103 + 308);
        if (v204 != v212)
        {
          v213 = (_QWORD *)(v206 + 8 * v212);
          v214 = 8 * v203 - 8 * v212 + 16;
          do
          {
            *v213++ = 0x3FFFFFFF00000000;
            v214 -= 8;
          }
          while (v214);
        }
      }
      *(_DWORD *)(v103 + 308) = v204;
      v103 = *(_QWORD *)(a1 + 24);
    }
    if (JSC::DFG::clobbersExitState((JSC::DFG *)v103, (JSC::DFG::Graph *)v15, v93, v94, v95, v96, v97, v98))
      *(_BYTE *)(a1 + 64) = 0;
    v110 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 16) + 16);
    if (__ldaxr(v110))
    {
      __clrex();
    }
    else if (!__stxr(1u, v110))
    {
      goto LABEL_97;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v110);
LABEL_97:
    v112 = *(_DWORD *)(a1 + 40);
    v113 = *(_QWORD **)(v15 + 72);
    v114 = v113;
    do
    {
      v115 = v114;
      v114 = (_QWORD *)*v114;
    }
    while (v114);
    if (v115 != v113)
      *v113 = v115;
    v116 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 144);
    if (v116)
    {
      v148 = 0;
      v151 = v115 + 3;
      v150 = *((_DWORD *)v115 + 6);
      v149 = *((_DWORD *)v151 + 1);
      v152 = *(_DWORD *)(v116 - 8);
      v153 = 9 * ((v112 + ~(v112 << 15)) ^ ((v112 + ~(v112 << 15)) >> 10));
      v154 = (v153 ^ (v153 >> 6)) + ~((v153 ^ (v153 >> 6)) << 11);
      for (j = (v154 ^ HIWORD(v154)) + v150 + v149; ; j = v148 + v156)
      {
        v156 = j & v152;
        v157 = v116 + 24 * (j & v152);
        if (*(_DWORD *)v157 == v112)
        {
          v158 = *(_DWORD *)(v157 + 8);
          if (v158 == v149)
          {
            v104 = *(unsigned int *)(v157 + 4);
            v158 = v149;
            if ((_DWORD)v104 == v150)
            {
              v218 = *(_DWORD *)(v116 - 4);
              goto LABEL_180;
            }
          }
        }
        else
        {
          v158 = *(_DWORD *)(v157 + 8);
        }
        v159 = *(_DWORD *)v157 == -1 && v158 == 0;
        if (v159 && *(_DWORD *)(v157 + 4) == 0x3FFFFFFF)
          break;
        ++v148;
      }
      v218 = *(_DWORD *)(v116 - 4);
      v157 = v116 + 24 * v218;
LABEL_180:
      if (v157 == v116 + 24 * v218 || (v219 = *(unint64_t **)(v157 + 16)) == 0)
      {
        v116 = 0;
      }
      else
      {
        v220 = *v219;
        if (*v219)
        {
          v220 = JSC::speculationFromValue(v220);
          *v219 = 0;
        }
        v116 = v219[1] | v220;
        v219[1] = v116;
      }
    }
    v117 = *(_QWORD **)(v15 + 72);
    v118 = v117;
    do
    {
      v119 = v118;
      v118 = (_QWORD *)*v118;
    }
    while (v118);
    if (v119 != v117)
      *v117 = v119;
    v120 = v119;
    do
    {
      v121 = v120;
      v120 = (_QWORD *)*v120;
    }
    while (v120);
    if (v121 != v119)
      *v119 = v121;
    v122 = v121[1];
    v123 = v122 | v116;
    v121[1] = v123;
    if (v123 != v122)
      v119[2] |= v119[1];
    v124 = __ldxr(v110);
    if (v124 == 1)
    {
      if (!__stlxr(0, v110))
        goto LABEL_136;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v110, 0, v104, v105, v106, v107, v108, v109);
LABEL_136:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 96) + 8 * v72) = v15;
  }
  return v15;
}

uint64_t JSC::DFG::ByteCodeParser::set(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  const JSC::CodeOrigin *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  void *v26;
  JSC::DFG::Node *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  unsigned int v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  WTF *v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  void *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  WTF *v121;
  unsigned __int8 v122;
  unsigned __int8 v123;
  uint64_t v124;
  __int128 v125;
  int v126;
  __int16 v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;

  v10 = a2;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
  v13 = HIDWORD(a2);
  if (v12)
  {
    v60 = *(_QWORD *)(v12 + 24);
    v61 = (HIDWORD(v60) & 0xFFFFF | ((int)(v60 >> 28) >> 24 << 20)) + a2;
    v62 = a2 + (v60 >> 22);
    if (v13 == 2)
      v10 = v62;
    else
      v10 = v61;
    if (v13 == 2)
      v13 = 2;
    else
      v13 = v61 >> 31;
  }
  v14 = *(_QWORD *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
  {
    v15 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v15 == 0x3FFFFFFF || (_DWORD)v15 == -1)
    {
      v17 = 2;
    }
    else if (v15 >> 28)
    {
      v93 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v93 = v12;
      *(_DWORD *)(v93 + 8) = v15;
      v17 = 1;
      v12 = v93;
    }
    else
    {
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      v12 = v15 << 36;
    }
    v131 = v12 | v17;
  }
  else
  {
    JSC::CodeOrigin::CodeOrigin(&v131, (const JSC::CodeOrigin *)(a1 + 48));
  }
  v18 = (const JSC::CodeOrigin *)(a1 + 56);
  if ((*(_BYTE *)(a1 + 56) & 2) != 0)
  {
    v19 = *(unsigned int *)(a1 + 40);
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
    if ((_DWORD)v19 == 0x3FFFFFFF || (_DWORD)v19 == -1)
    {
      v21 = 2;
    }
    else if (v19 >> 28)
    {
      v94 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v94 = v20;
      *(_DWORD *)(v94 + 8) = v19;
      v21 = 1;
      v20 = v94;
    }
    else
    {
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      v20 = v19 << 36;
    }
    v130 = v20 | v21;
  }
  else
  {
    JSC::CodeOrigin::CodeOrigin((uint64_t *)&v130, v18);
  }
  v22 = v131;
  if ((v131 & 1) != 0)
  {
    v64 = *(_QWORD *)(v131 & 0xFFFFFFFF8);
    if ((v131 & 2) != 0
      || ((v65 = *(unsigned int *)((v131 & 0xFFFFFFFF8) + 8), (_DWORD)v65 != 0x3FFFFFFF)
        ? (v66 = (_DWORD)v65 == -1)
        : (v66 = 1),
          v66))
    {
      v67 = 2;
    }
    else if (v65 >> 28)
    {
      v110 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v110 = v64;
      *(_DWORD *)(v110 + 8) = v65;
      v67 = 1;
      v64 = v110;
    }
    else
    {
      v67 = *(_QWORD *)(v131 & 0xFFFFFFFF8);
      v64 = v65 << 36;
    }
    v22 = v64 | v67;
  }
  v23 = v130;
  if ((v130 & 1) != 0)
  {
    v68 = *(_QWORD *)(v130 & 0xFFFFFFFF8);
    if ((v130 & 2) != 0
      || (v69 = *(unsigned int *)((v130 & 0xFFFFFFFF8) + 8), (_DWORD)v69 == 0x3FFFFFFF)
      || (_DWORD)v69 == -1)
    {
      v70 = 2;
    }
    else if (v69 >> 28)
    {
      v112 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v112 = v68;
      *(_DWORD *)(v112 + 8) = v69;
      v70 = 1;
      v68 = v112;
    }
    else
    {
      v70 = *(_QWORD *)(v130 & 0xFFFFFFFF8);
      v68 = v69 << 36;
    }
    v23 = v68 | v70;
  }
  v24 = *(_BYTE *)(a1 + 64);
  v25 = v22;
  if ((v22 & 1) != 0)
  {
    v71 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
    if ((v22 & 2) != 0
      || (v72 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v72 == 0x3FFFFFFF)
      || (_DWORD)v72 == -1)
    {
      v73 = 2;
    }
    else if (v72 >> 28)
    {
      v122 = *(_BYTE *)(a1 + 64);
      v119 = v23;
      v113 = WTF::fastMalloc((WTF *)0x10);
      v23 = v119;
      v24 = v122;
      *(_QWORD *)v113 = v71;
      *(_DWORD *)(v113 + 8) = v72;
      v73 = 1;
      v71 = v113;
    }
    else
    {
      v73 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
      v71 = v72 << 36;
    }
    v25 = v71 | v73;
  }
  v124 = v25;
  if ((v23 & 1) != 0)
  {
    v74 = v23 & 0xFFFFFFFF8;
    v75 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
    if ((v23 & 2) != 0
      || (v76 = *(unsigned int *)((v23 & 0xFFFFFFFF8) + 8), (_DWORD)v76 == 0x3FFFFFFF)
      || (_DWORD)v76 == -1)
    {
      v77 = 2;
    }
    else if (v76 >> 28)
    {
      v120 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
      v123 = v24;
      v75 = WTF::fastMalloc((WTF *)0x10);
      v24 = v123;
      *(_QWORD *)v75 = v120;
      *(_DWORD *)(v75 + 8) = v76;
      v77 = 1;
    }
    else
    {
      v77 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
      v75 = v76 << 36;
    }
    *(_QWORD *)&v125 = v75 | v77;
    WORD4(v125) = v24;
    if (v74)
      WTF::fastFree(v74, v18, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)&v125 = v23;
    WORD4(v125) = v24;
  }
  if ((v22 & 1) != 0 && (v22 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v22 & 0xFFFFFFFF8, v18, a3, a4, a5, a6, a7, a8);
  if ((v130 & 1) != 0 && (v130 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v130 & 0xFFFFFFFF8, v18, a3, a4, a5, a6, a7, a8);
  if ((v131 & 1) != 0 && (v131 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v131 & 0xFFFFFFFF8, v18, a3, a4, a5, a6, a7, a8);
  v130 = a3 & 0xFF00FFFFFFFFFFFFLL;
  v131 = v10 | (unint64_t)(v13 << 32);
  v128 = 0;
  v129 = 0;
  v127 = 20;
  v33 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(v14 + 1032, &v127, (uint64_t)&v124, (uint64_t)&v131, (uint64_t *)&v130, &v129, &v128, a8);
  if ((v125 & 1) != 0 && (v125 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v125 & 0xFFFFFFFF8, v26, (uint64_t)v27, v28, v29, v30, v31, v32);
  if ((v124 & 1) != 0 && (v124 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v124 & 0xFFFFFFFF8, v26, (uint64_t)v27, v28, v29, v30, v31, v32);
  v34 = *(unsigned __int16 *)(v33 + 18);
  *(_BYTE *)(a1 + 457) |= v34 == 379;
  v35 = *(_QWORD *)(a1 + 32);
  v131 = v33;
  v36 = (_QWORD *)(v35 + 208);
  v37 = *(unsigned int *)(v35 + 220);
  if ((_DWORD)v37 == *(_DWORD *)(v35 + 216))
  {
    v63 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v36, v37 + 1, (unint64_t)&v131);
    v37 = *(unsigned int *)(v35 + 220);
    *(_QWORD *)(*(_QWORD *)(v35 + 208) + 8 * v37) = *v63;
    v34 = *(unsigned __int16 *)(v33 + 18);
  }
  else
  {
    *(_QWORD *)(*v36 + 8 * v37) = v33;
  }
  *(_DWORD *)(v35 + 220) = v37 + 1;
  v38 = *(_QWORD *)(a1 + 24);
  if (v34 == 386)
  {
    *(_DWORD *)(v33 + 48) = ~*(_DWORD *)(v38 + 308);
    v95 = *(unsigned int *)(v38 + 308);
    v96 = v95 + 2;
    v97 = *(unsigned int *)(v38 + 304);
    v98 = *(WTF **)(v38 + 296);
    if (v95 + 2 > v97)
    {
      v121 = *(WTF **)(v38 + 296);
      v99 = v97 + (v97 >> 2);
      if (v99 >= 0x10)
        v100 = v99 + 1;
      else
        v100 = 16;
      if (v100 > v96)
        v96 = v100;
      if (v96 >> 29)
        goto LABEL_175;
      v101 = v96;
      v98 = (WTF *)WTF::fastMalloc((WTF *)(8 * v96));
      *(_DWORD *)(v38 + 304) = v101;
      *(_QWORD *)(v38 + 296) = v98;
      if ((_DWORD)v95)
      {
        v115 = 8 * v95;
        v116 = v121;
        do
        {
          v117 = *(_QWORD *)v116;
          v116 = (WTF *)((char *)v116 + 8);
          *(_QWORD *)v98 = v117;
          v98 = (WTF *)((char *)v98 + 8);
          v115 -= 8;
        }
        while (v115);
        v98 = *(WTF **)(v38 + 296);
      }
      if (v121)
      {
        if (v98 == v121)
        {
          *(_QWORD *)(v38 + 296) = 0;
          *(_DWORD *)(v38 + 304) = 0;
        }
        WTF::fastFree((unint64_t)v121, v102, (uint64_t)v27, v28, v29, v30, v31, v32);
        v98 = *(WTF **)(v38 + 296);
      }
      v96 = v95 + 2;
    }
    if (v98)
    {
      v103 = *(unsigned int *)(v38 + 308);
      if (v96 != v103)
      {
        v104 = (_QWORD *)((char *)v98 + 8 * v103);
        v105 = 8 * v95 - 8 * v103 + 16;
        do
        {
          *v104++ = 0x3FFFFFFF00000000;
          v105 -= 8;
        }
        while (v105);
      }
    }
    *(_DWORD *)(v38 + 308) = v96;
    v38 = *(_QWORD *)(a1 + 24);
  }
  JSC::DFG::clobbersExitState((JSC::DFG *)v38, (JSC::DFG::Graph *)v33, v27, v28, v29, v30, v31, v32);
  *(_BYTE *)(a1 + 64) = 0;
  v46 = *(unsigned int *)(a1 + 40);
  v47 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
  if ((_DWORD)v46 == 0x3FFFFFFF || (_DWORD)v46 == -1)
  {
    v49 = 2;
  }
  else if (v46 >> 28)
  {
    v92 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v92 = v47;
    *(_DWORD *)(v92 + 8) = v46;
    v49 = 1;
    v47 = v92;
  }
  else
  {
    v49 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
    v47 = v46 << 36;
  }
  v50 = v47 | v49;
  v51 = v50;
  if ((v50 & 1) != 0)
  {
    v78 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
    if ((v50 & 2) != 0
      || ((v79 = *(unsigned int *)((v50 & 0xFFFFFFFF8) + 8), (_DWORD)v79 != 0x3FFFFFFF)
        ? (v80 = (_DWORD)v79 == -1)
        : (v80 = 1),
          v80))
    {
      v81 = 2;
    }
    else if (v79 >> 28)
    {
      v111 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v111 = v78;
      *(_DWORD *)(v111 + 8) = v79;
      v81 = 1;
      v78 = v111;
    }
    else
    {
      v81 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
      v78 = v79 << 36;
    }
    v51 = v78 | v81;
  }
  v124 = v51;
  *(_QWORD *)&v125 = v10 | (unint64_t)(v13 << 32);
  *((_QWORD *)&v125 + 1) = a3;
  v126 = a4;
  if ((_DWORD)v13 == 2)
  {
    if ((v10 & 0x80000000) == 0)
      goto LABEL_37;
LABEL_175:
    __break(0xC471u);
    JUMPOUT(0x1982FE388);
  }
  if (v10 == 0x3FFFFFFF)
    goto LABEL_175;
LABEL_37:
  if ((v50 & 1) != 0 && (v50 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v50 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
  if ((_DWORD)a4)
  {
    v58 = v10 | (unint64_t)(v13 << 32);
    if (HIDWORD(v58))
      v59 = JSC::DFG::ByteCodeParser::setLocalOrTmp((JSC::CodeOrigin *)a1, (const JSC::CodeOrigin *)&v124, v58, a3, a4, v43, v44, v45);
    else
      v59 = (uint64_t)JSC::DFG::ByteCodeParser::setArgument((_QWORD *)a1, &v124, v58, a3, a4, v43, v44, v45);
    v55 = v59;
  }
  else
  {
    v52 = (_QWORD *)(a1 + 368);
    v53 = *(unsigned int *)(a1 + 380);
    if ((_DWORD)v53 == *(_DWORD *)(a1 + 376))
    {
      v82 = WTF::Vector<JSC::DFG::ByteCodeParser::DelayedSetLocal,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v52, v53 + 1, (unint64_t)&v124, v41, v42, v43, v44, v45);
      v83 = *(unsigned int *)(a1 + 380);
      v84 = *(_QWORD *)(a1 + 368);
      v85 = *(_QWORD *)v82;
      if ((*(_QWORD *)v82 & 1) != 0)
      {
        v106 = *(_QWORD *)(v85 & 0xFFFFFFFF8);
        if ((v85 & 2) != 0
          || ((v107 = *(unsigned int *)((v85 & 0xFFFFFFFF8) + 8), (_DWORD)v107 != 0x3FFFFFFF)
            ? (v108 = (_DWORD)v107 == -1)
            : (v108 = 1),
              v108))
        {
          v109 = 2;
        }
        else if (v107 >> 28)
        {
          v118 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v118 = v106;
          *(_DWORD *)(v118 + 8) = v107;
          v109 = 1;
          v106 = v118;
        }
        else
        {
          v109 = *(_QWORD *)(v85 & 0xFFFFFFFF8);
          v106 = v107 << 36;
        }
        v85 = v106 | v109;
      }
      v55 = 0;
      v86 = v84 + 32 * v83;
      *(_QWORD *)v86 = v85;
      v87 = *(_OWORD *)(v82 + 8);
      *(_DWORD *)(v86 + 24) = *(_DWORD *)(v82 + 24);
      *(_OWORD *)(v86 + 8) = v87;
    }
    else
    {
      v54 = *v52 + 32 * v53;
      if ((v51 & 1) != 0)
      {
        v88 = *(_QWORD *)(v51 & 0xFFFFFFFF8);
        if ((v51 & 2) != 0
          || ((v89 = *(unsigned int *)((v51 & 0xFFFFFFFF8) + 8), (_DWORD)v89 != 0x3FFFFFFF)
            ? (v90 = (_DWORD)v89 == -1)
            : (v90 = 1),
              v90))
        {
          v91 = 2;
        }
        else if (v89 >> 28)
        {
          v114 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v114 = v88;
          *(_DWORD *)(v114 + 8) = v89;
          v91 = 1;
          v88 = v114;
        }
        else
        {
          v91 = *(_QWORD *)(v51 & 0xFFFFFFFF8);
          v88 = v89 << 36;
        }
        v51 = v88 | v91;
      }
      v55 = 0;
      *(_QWORD *)v54 = v51;
      v56 = v125;
      *(_DWORD *)(v54 + 24) = v126;
      *(_OWORD *)(v54 + 8) = v56;
    }
    ++*(_DWORD *)(a1 + 380);
  }
  if ((v124 & 1) != 0 && (v124 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v124 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
  return v55;
}

void JSC::DFG::ByteCodeParser::processSetLocalQueue(JSC::DFG::ByteCodeParser *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  if (*((_DWORD *)this + 95))
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *((_QWORD *)this + 46) + v9;
      v12 = *(_QWORD *)(v11 + 8);
      v13 = *(_QWORD *)(v11 + 16);
      v14 = *(unsigned int *)(v11 + 24);
      if (*(_DWORD *)(v11 + 12))
        JSC::DFG::ByteCodeParser::setLocalOrTmp(this, (const JSC::CodeOrigin *)v11, v12, v13, v14, a6, a7, a8);
      else
        JSC::DFG::ByteCodeParser::setArgument(this, (uint64_t *)v11, v12, v13, v14, a6, a7, a8);
      ++v10;
      v19 = *((unsigned int *)this + 95);
      v9 += 32;
    }
    while (v10 < v19);
    if ((_DWORD)v19)
    {
      v20 = (uint64_t *)*((_QWORD *)this + 46);
      v21 = 32 * v19;
      do
      {
        v22 = *v20;
        if ((*v20 & 1) != 0 && (v22 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v22 & 0xFFFFFFFF8, v15, v16, v17, v18, a6, a7, a8);
        v20 += 4;
        v21 -= 32;
      }
      while (v21);
    }
  }
  *((_DWORD *)this + 95) = 0;
}

void JSC::DFG::ByteCodeParser::check(JSC::DFG::Graph **this, const JSC::ObjectPropertyConditionSet *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const JSC::ObjectPropertyCondition *v9;
  const JSC::ObjectPropertyCondition *v10;
  int v11;

  if (a2)
    v9 = (const JSC::ObjectPropertyConditionSet *)((char *)a2 + 8);
  else
    v9 = 0;
  if (a2)
    v10 = (const JSC::ObjectPropertyConditionSet *)((char *)a2 + 24 * *((unsigned int *)a2 + 1) + 8);
  else
    v10 = 0;
  for (; v9 != v10; v9 = (const JSC::ObjectPropertyCondition *)((char *)v9 + 24))
  {
    JSC::DFG::ByteCodeParser::check(this, v9, a3, a4, a5, a6, a7, a8);
    if (!v11)
      break;
  }
}

BOOL JSC::DFG::ByteCodeParser::handleModuleNamespaceLoad(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, const JSC::GetByStatus *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 hasExitSite;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::RecordedStatuses *v21;
  JSC::GetByVariant *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t ConstantClosureVar;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;

  hasExitSite = JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(a1 + 280) + 32), *(_DWORD *)(a1 + 40), 2);
  if (!hasExitSite)
  {
    v17 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 24), *(_QWORD *)(*((_QWORD *)a5 + 10) + 8), v10, v11, v12, v13, v14, v15);
    JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)a1, 182, (uint64_t)v17, a4 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000, 0, v18, v19, v20);
    v21 = *(JSC::RecordedStatuses **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 344);
    JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&v55, *(_DWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24));
    v22 = JSC::RecordedStatuses::addGetByStatus(v21, (const JSC::CodeOrigin *)&v55, a5);
    JSC::DFG::ByteCodeParser::addToGraph(a1, 421, (uint64_t)v22, a4, 0, 0, v23, v24);
    if ((v55 & 1) != 0 && (v55 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v55 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
    JSC::DFG::ByteCodeParser::addToGraph(a1, 23, a4, 0, 0, v29, v30, v31);
    JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 24), *(_QWORD *)(*((_QWORD *)a5 + 10) + 16), v32, v33, v34, v35, v36, v37);
    ConstantClosureVar = JSC::DFG::Graph::tryGetConstantClosureVar(*(_QWORD *)(a1 + 24), *(_QWORD *)(*((_QWORD *)a5 + 10) + 16), *(_DWORD *)(*((_QWORD *)a5 + 10) + 24));
    if (ConstantClosureVar)
    {
      v49 = JSC::DFG::ByteCodeParser::weakJSConstant(a1, ConstantClosureVar, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      v45 = *((_QWORD *)a5 + 10);
      v46 = *(unsigned int *)(v45 + 24);
      v47 = JSC::DFG::ByteCodeParser::weakJSConstant(a1, *(_QWORD *)(v45 + 16), v39, v40, v41, v42, v43, v44);
      v49 = JSC::DFG::ByteCodeParser::addToGraph(a1, 171, v46, a3, (uint64_t)v47, 0, 0, v48);
    }
    JSC::DFG::ByteCodeParser::set(a1, a2 | (((a2 >> 31) & 1) << 32), (uint64_t)v49, 0, v50, v51, v52, v53);
  }
  return !hasExitSite;
}

BOOL JSC::DFG::QueryableExitProfile::hasExitSite(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int i;
  uint64_t v13;
  int *v14;
  int v15;
  unint64_t v16;
  int v17;
  BOOL v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  int *v24;
  int v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  int v31;
  int j;
  uint64_t v33;
  int *v34;
  int v35;
  unint64_t v36;
  int v37;
  BOOL v39;
  BOOL v40;
  int v41;
  int v42;
  uint64_t v43;
  int *v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v49;
  BOOL v50;
  BOOL v51;

  v3 = a3 << 32;
  if ((_DWORD)a3 != 17)
    v3 = a2 | ((unint64_t)a3 << 32);
  v4 = *a1;
  if (!*a1)
  {
    v5 = 0;
    return v5 != v4;
  }
  v7 = 0;
  v8 = *(_DWORD *)(v4 - 8);
  v9 = 9 * ((~((_DWORD)v3 << 15) + v3) ^ ((~((_DWORD)v3 << 15) + v3) >> 10));
  v10 = (v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11);
  v11 = (v10 ^ HIWORD(v10)) + HIDWORD(v3);
  for (i = v11 + 18; ; i = v7 + v13)
  {
    v13 = i & v8;
    v14 = (int *)(v4 + 8 * v13);
    v15 = *v14;
    LODWORD(v16) = *((unsigned __int8 *)v14 + 4);
    v17 = *((unsigned __int8 *)v14 + 5);
    if (v15 == (_DWORD)v3 && (_DWORD)v16 == HIDWORD(v3))
    {
      v16 = HIDWORD(v3);
      if (v17 == 1)
      {
        if (*(_BYTE *)(v4 + 8 * v13 + 6) != 1)
          goto LABEL_14;
        if ((_DWORD)v13 == *(_DWORD *)(v4 - 4))
          goto LABEL_27;
        return 1;
      }
    }
    v19 = !v15 && (_DWORD)v16 == 0;
    v20 = v19 && v17 == 0;
    if (v20 && !*(_BYTE *)(v4 + 8 * v13 + 6))
      break;
LABEL_14:
    ++v7;
  }
  LODWORD(v13) = *(_DWORD *)(v4 - 4);
LABEL_27:
  v21 = 0;
  v22 = v11 + 29;
  while (2)
  {
    v23 = v22 & v8;
    v24 = (int *)(v4 + 8 * v23);
    v25 = *v24;
    LODWORD(v26) = *((unsigned __int8 *)v24 + 4);
    v27 = *((unsigned __int8 *)v24 + 5);
    v28 = v25 == (_DWORD)v3 && (_DWORD)v26 == HIDWORD(v3);
    if (!v28 || (v26 = HIDWORD(v3), v27 != 1))
    {
      if (v25)
        v29 = 0;
      else
        v29 = (_DWORD)v26 == 0;
      v30 = v29 && v27 == 0;
      if (v30 && !*(_BYTE *)(v4 + 8 * v23 + 6))
        goto LABEL_47;
      goto LABEL_35;
    }
    if (*(_BYTE *)(v4 + 8 * v23 + 6) != 2)
    {
LABEL_35:
      v22 = ++v21 + v23;
      continue;
    }
    break;
  }
  if ((_DWORD)v23 != (_DWORD)v13)
    return 1;
LABEL_47:
  v31 = 0;
  for (j = v11 + 25; ; j = v31 + v33)
  {
    v33 = j & v8;
    v34 = (int *)(v4 + 8 * v33);
    v35 = *v34;
    LODWORD(v36) = *((unsigned __int8 *)v34 + 4);
    v37 = *((unsigned __int8 *)v34 + 5);
    if (v35 == (_DWORD)v3 && (_DWORD)v36 == HIDWORD(v3))
    {
      v36 = HIDWORD(v3);
      if (v37 == 2)
        break;
    }
    if (v35)
      v39 = 0;
    else
      v39 = (_DWORD)v36 == 0;
    v40 = v39 && v37 == 0;
    if (v40 && !*(_BYTE *)(v4 + 8 * v33 + 6))
      goto LABEL_67;
LABEL_55:
    ++v31;
  }
  if (*(_BYTE *)(v4 + 8 * v33 + 6) != 1)
    goto LABEL_55;
  if ((_DWORD)v33 != (_DWORD)v13)
    return 1;
LABEL_67:
  v41 = 0;
  v42 = v11 + 36;
  while (2)
  {
    v43 = v42 & v8;
    v44 = (int *)(v4 + 8 * v43);
    v45 = *v44;
    LODWORD(v46) = *((unsigned __int8 *)v44 + 4);
    v47 = *((unsigned __int8 *)v44 + 5);
    if (v45 == (_DWORD)v3 && (_DWORD)v46 == HIDWORD(v3))
    {
      v46 = HIDWORD(v3);
      if (v47 == 2)
      {
        if (*(_BYTE *)(v4 + 8 * v43 + 6) == 2)
        {
          v49 = v13;
          goto LABEL_77;
        }
        goto LABEL_75;
      }
    }
    if (v45)
      v50 = 0;
    else
      v50 = (_DWORD)v46 == 0;
    v51 = v50 && v47 == 0;
    if (!v51 || *(_BYTE *)(v4 + 8 * v43 + 6))
    {
LABEL_75:
      v42 = ++v41 + v43;
      continue;
    }
    break;
  }
  v49 = v13;
  v43 = v13;
LABEL_77:
  v5 = v4 + 8 * v43;
  v4 += 8 * v49;
  return v5 != v4;
}

JSC::DFG::Node *JSC::DFG::ByteCodeParser::addToGraph(JSC::DFG::ByteCodeParser *a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;
  JSC::DFG::Node *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::DFG::Node *v22;
  uint64_t v24;
  uint64_t v25;

  v13 = *((_QWORD *)a1 + 3);
  JSC::DFG::ByteCodeParser::currentNodeOrigin((JSC::DFG::ByteCodeParser *)&v24, (uint64_t)a1, a3, a4, a5, a6, a7, a8);
  v22 = (JSC::DFG::Node *)JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge,JSC::DFG::Edge>(v13, a2, (uint64_t)&v24, a3, a4, a5, 0, v14);
  if ((v25 & 1) != 0 && (v25 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v25 & 0xFFFFFFFF8, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
  if ((v24 & 1) != 0 && (v24 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v24 & 0xFFFFFFFF8, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
  JSC::DFG::ByteCodeParser::addToGraph(a1, v22, v16, v17, v18, v19, v20, v21);
  return v22;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  JSC::DFG::Node *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::DFG::Node *v23;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v13 = *((_QWORD *)a1 + 3);
  JSC::DFG::ByteCodeParser::currentNodeOrigin((JSC::DFG::ByteCodeParser *)&v25, (uint64_t)a1, a3, a4, a5, a6, a7, a8);
  v29 = a4;
  v30 = a3;
  v28 = a5;
  v27 = a2;
  v23 = (JSC::DFG::Node *)JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(v13 + 1032, &v27, (uint64_t)&v25, &v30, &v29, &v28, v14, v15);
  if ((v26 & 1) != 0 && (v26 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v26 & 0xFFFFFFFF8, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
  if ((v25 & 1) != 0 && (v25 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v25 & 0xFFFFFFFF8, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
  JSC::DFG::ByteCodeParser::addToGraph(a1, v23, v17, v18, v19, v20, v21, v22);
  return v23;
}

{
  uint64_t v14;
  void *v15;
  JSC::DFG::Node *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::DFG::Node *v22;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v14 = *((_QWORD *)a1 + 3);
  JSC::DFG::ByteCodeParser::currentNodeOrigin((JSC::DFG::ByteCodeParser *)&v24, (uint64_t)a1, a3, a4, a5, a6, a7, a8);
  v30 = a4;
  v31 = a3;
  v28 = a6;
  v29 = a5;
  v27 = 0;
  v26 = a2;
  v22 = (JSC::DFG::Node *)JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(v14 + 1032, &v26, (uint64_t)&v24, &v31, &v30, &v29, &v28, &v27);
  if ((v25 & 1) != 0 && (v25 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v25 & 0xFFFFFFFF8, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
  if ((v24 & 1) != 0 && (v24 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v24 & 0xFFFFFFFF8, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
  return JSC::DFG::ByteCodeParser::addToGraph(a1, v22, v16, v17, v18, v19, v20, v21);
}

WTF *JSC::DFG::ByteCodeParser::weakJSConstant(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  const JSC::CodeOrigin *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;
  JSC::DFG::Node *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  WTF *result;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  void *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  WTF *v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  char v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char v88;
  __int16 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v15 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 24), a2, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
  {
    v17 = *(unsigned int *)(a1 + 40);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
    if ((_DWORD)v17 == 0x3FFFFFFF || (_DWORD)v17 == -1)
    {
      v20 = 2;
    }
    else if (v17 >> 28)
    {
      v59 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v59 = v18;
      *(_DWORD *)(v59 + 8) = v17;
      v20 = 1;
      v18 = v59;
    }
    else
    {
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      v18 = v17 << 36;
    }
    v93 = v18 | v20;
  }
  else
  {
    JSC::CodeOrigin::CodeOrigin(&v93, (const JSC::CodeOrigin *)(a1 + 48));
  }
  v21 = (const JSC::CodeOrigin *)(a1 + 56);
  if ((*(_BYTE *)(a1 + 56) & 2) != 0)
  {
    v22 = *(unsigned int *)(a1 + 40);
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
    if ((_DWORD)v22 == 0x3FFFFFFF || (_DWORD)v22 == -1)
    {
      v24 = 2;
    }
    else if (v22 >> 28)
    {
      v60 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v60 = v23;
      *(_DWORD *)(v60 + 8) = v22;
      v24 = 1;
      v23 = v60;
    }
    else
    {
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      v23 = v22 << 36;
    }
    v92 = v23 | v24;
  }
  else
  {
    JSC::CodeOrigin::CodeOrigin(&v92, v21);
  }
  v25 = v93;
  if ((v93 & 1) != 0)
  {
    v44 = *(_QWORD *)(v93 & 0xFFFFFFFF8);
    if ((v93 & 2) != 0
      || ((v45 = *(unsigned int *)((v93 & 0xFFFFFFFF8) + 8), (_DWORD)v45 != 0x3FFFFFFF)
        ? (v46 = (_DWORD)v45 == -1)
        : (v46 = 1),
          v46))
    {
      v47 = 2;
    }
    else if (v45 >> 28)
    {
      v71 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v71 = v44;
      *(_DWORD *)(v71 + 8) = v45;
      v47 = 1;
      v44 = v71;
    }
    else
    {
      v47 = *(_QWORD *)(v93 & 0xFFFFFFFF8);
      v44 = v45 << 36;
    }
    v25 = v44 | v47;
  }
  v26 = v92;
  if ((v92 & 1) != 0)
  {
    v48 = *(_QWORD *)(v92 & 0xFFFFFFFF8);
    if ((v92 & 2) != 0
      || ((v49 = *(unsigned int *)((v92 & 0xFFFFFFFF8) + 8), (_DWORD)v49 != 0x3FFFFFFF)
        ? (v50 = (_DWORD)v49 == -1)
        : (v50 = 1),
          v50))
    {
      v51 = 2;
    }
    else if (v49 >> 28)
    {
      v72 = *(_DWORD *)((v92 & 0xFFFFFFFF8) + 8);
      v73 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v73 = v48;
      *(_DWORD *)(v73 + 8) = v72;
      v51 = 1;
      v48 = v73;
    }
    else
    {
      v51 = *(_QWORD *)(v92 & 0xFFFFFFFF8);
      v48 = v49 << 36;
    }
    v26 = v48 | v51;
  }
  v27 = *(_BYTE *)(a1 + 64);
  v28 = v25;
  if ((v25 & 1) != 0)
  {
    v52 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
    if ((v25 & 2) != 0
      || (v53 = *(unsigned int *)((v25 & 0xFFFFFFFF8) + 8), (_DWORD)v53 == 0x3FFFFFFF)
      || (_DWORD)v53 == -1)
    {
      v54 = 2;
    }
    else if (v53 >> 28)
    {
      v83 = *(_BYTE *)(a1 + 64);
      v81 = v26;
      v74 = *(_DWORD *)((v25 & 0xFFFFFFFF8) + 8);
      v75 = WTF::fastMalloc((WTF *)0x10);
      v26 = v81;
      v27 = v83;
      *(_QWORD *)v75 = v52;
      *(_DWORD *)(v75 + 8) = v74;
      v54 = 1;
      v52 = v75;
    }
    else
    {
      v54 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
      v52 = v53 << 36;
    }
    v28 = v52 | v54;
  }
  v85 = v28;
  if ((v26 & 1) != 0)
  {
    v55 = v26 & 0xFFFFFFFF8;
    v56 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
    if ((v26 & 2) != 0
      || (v57 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v57 == 0x3FFFFFFF)
      || (_DWORD)v57 == -1)
    {
      v58 = 2;
    }
    else if (v57 >> 28)
    {
      v76 = v56;
      v84 = v27;
      v77 = v57;
      v56 = WTF::fastMalloc((WTF *)0x10);
      v27 = v84;
      *(_QWORD *)v56 = v76;
      *(_DWORD *)(v56 + 8) = v77;
      v58 = 1;
    }
    else
    {
      v58 = v56;
      v56 = v57 << 36;
    }
    v86 = v56 | v58;
    v87 = v27;
    v88 = 0;
    if (v55)
      WTF::fastFree(v55, v21, v9, v10, v11, v12, v13, v14);
  }
  else
  {
    v86 = v26;
    v87 = v27;
    v88 = 0;
  }
  if ((v25 & 1) != 0 && (v25 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v25 & 0xFFFFFFFF8, v21, v9, v10, v11, v12, v13, v14);
  if ((v92 & 1) != 0 && (v92 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v92 & 0xFFFFFFFF8, v21, v9, v10, v11, v12, v13, v14);
  if ((v93 & 1) != 0 && (v93 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v93 & 0xFFFFFFFF8, v21, v9, v10, v11, v12, v13, v14);
  v92 = 0;
  v93 = (uint64_t)v15;
  v90 = 0;
  v91 = 0;
  v89 = 0;
  v36 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(v16 + 1032, &v89, (uint64_t)&v85, (uint64_t)&v93, &v92, &v91, &v90, v14);
  if ((v86 & 1) != 0 && (v86 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v86 & 0xFFFFFFFF8, v29, (uint64_t)v30, v31, v32, v33, v34, v35);
  if ((v85 & 1) != 0 && (v85 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v85 & 0xFFFFFFFF8, v29, (uint64_t)v30, v31, v32, v33, v34, v35);
  v37 = *(unsigned __int16 *)(v36 + 18);
  *(_BYTE *)(a1 + 457) |= v37 == 379;
  v38 = *(_QWORD *)(a1 + 32);
  v93 = v36;
  v39 = (_QWORD *)(v38 + 208);
  v40 = *(unsigned int *)(v38 + 220);
  if ((_DWORD)v40 == *(_DWORD *)(v38 + 216))
  {
    v43 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v39, v40 + 1, (unint64_t)&v93);
    v40 = *(unsigned int *)(v38 + 220);
    *(_QWORD *)(*(_QWORD *)(v38 + 208) + 8 * v40) = *v43;
    v37 = *(unsigned __int16 *)(v36 + 18);
  }
  else
  {
    *(_QWORD *)(*v39 + 8 * v40) = v36;
  }
  *(_DWORD *)(v38 + 220) = v40 + 1;
  v41 = *(_QWORD *)(a1 + 24);
  if (v37 == 386)
  {
    *(_DWORD *)(v36 + 48) = ~*(_DWORD *)(v41 + 308);
    v61 = *(unsigned int *)(v41 + 308);
    v62 = v61 + 2;
    v63 = *(unsigned int *)(v41 + 304);
    result = *(WTF **)(v41 + 296);
    if (v61 + 2 > v63)
    {
      v82 = *(WTF **)(v41 + 296);
      v64 = v63 + (v63 >> 2);
      if (v64 >= 0x10)
        v65 = v64 + 1;
      else
        v65 = 16;
      if (v65 <= v62)
        v65 = v61 + 2;
      if (v65 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v66 = v65;
      result = (WTF *)WTF::fastMalloc((WTF *)(8 * v65));
      *(_DWORD *)(v41 + 304) = v66;
      *(_QWORD *)(v41 + 296) = result;
      if ((_DWORD)v61)
      {
        v78 = 8 * v61;
        v79 = v82;
        do
        {
          v80 = *(_QWORD *)v79;
          v79 = (WTF *)((char *)v79 + 8);
          *(_QWORD *)result = v80;
          result = (WTF *)((char *)result + 8);
          v78 -= 8;
        }
        while (v78);
        result = *(WTF **)(v41 + 296);
      }
      if (v82)
      {
        if (result == v82)
        {
          *(_QWORD *)(v41 + 296) = 0;
          *(_DWORD *)(v41 + 304) = 0;
        }
        WTF::fastFree((unint64_t)v82, v67, (uint64_t)v30, v31, v32, v33, v34, v35);
        result = *(WTF **)(v41 + 296);
      }
    }
    if (result)
    {
      v68 = *(unsigned int *)(v41 + 308);
      if (v62 != v68)
      {
        v69 = (_QWORD *)((char *)result + 8 * v68);
        v70 = 8 * v61 - 8 * v68 + 16;
        do
        {
          *v69++ = 0x3FFFFFFF00000000;
          v70 -= 8;
        }
        while (v70);
      }
    }
    *(_DWORD *)(v41 + 308) = v62;
    v41 = *(_QWORD *)(a1 + 24);
  }
  if (JSC::DFG::clobbersExitState((JSC::DFG *)v41, (JSC::DFG::Graph *)v36, v30, v31, v32, v33, v34, v35))
    *(_BYTE *)(a1 + 64) = 0;
  return (WTF *)v36;
}

void JSC::DFG::ByteCodeParser::ensureLocals(JSC::DFG::ByteCodeParser *this, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (*((_DWORD *)this + 65) < a2)
  {
    *((_DWORD *)this + 65) = a2;
    v4 = *((_QWORD *)this + 3);
    LODWORD(v5) = *(_DWORD *)(v4 + 60);
    if ((_DWORD)v5)
    {
      v6 = 0;
      while (v5 > v6)
      {
        JSC::DFG::BasicBlock::ensureLocals(*(JSC::DFG::BasicBlock **)(*(_QWORD *)(v4 + 48) + 8 * v6++), a2);
        v4 = *((_QWORD *)this + 3);
        v5 = *(unsigned int *)(v4 + 60);
        if (v6 >= v5)
          return;
      }
      __break(0xC471u);
    }
  }
}

JSC::CallLinkStatus *JSC::CallLinkStatus::CallLinkStatus(JSC::CallLinkStatus *this, uint64_t **a2)
{
  uint64_t v4;
  JSC::CallLinkStatus *result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *((unsigned int *)a2 + 3);
  result = (JSC::CallLinkStatus *)((char *)this + 16);
  *(_QWORD *)this = result;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = v4;
  if (v4 >= 2)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = (JSC::CallLinkStatus *)WTF::fastMalloc((WTF *)(8 * v4));
    *((_DWORD *)this + 2) = v4;
    *(_QWORD *)this = result;
  }
  v6 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v6)
  {
    v7 = *a2;
    v8 = 8 * v6;
    do
    {
      v9 = *v7++;
      *(_QWORD *)result = v9;
      result = (JSC::CallLinkStatus *)((char *)result + 8);
      v8 -= 8;
    }
    while (v8);
  }
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  return this;
}

_QWORD *JSC::DFG::ByteCodeParser::handleGetByOffset(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = a6;
  v14 = (_QWORD *)a3;
  if (a5 >= 64)
    v14 = JSC::DFG::ByteCodeParser::addToGraph(a1, 138, a3, 0, 0, a6, a7, a8);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v15 + 432);
  *(_QWORD *)(v15 + 432) = v16;
  *(_DWORD *)v16 = a5;
  *(_DWORD *)(v16 + 4) = a4;
  return JSC::DFG::ByteCodeParser::addToGraph(a1, v8, v16, a2, (uint64_t)v14, a3, 0, v17);
}

void JSC::DFG::ByteCodeParser::check(JSC::DFG::Graph **this, const JSC::ObjectPropertyCondition *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v8 = (unint64_t *)((char *)a2 + 8);
  if ((*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFLL) != 0)
  {
    JSC::DFG::Graph::watchCondition(this[3], a2, a3, a4, a5, a6, a7, a8);
    if ((v15 & 1) == 0 && (unint64_t)*((unsigned __int8 *)v8 + 6) << 48 != 0x5000000000000)
    {
      v16 = 16 * (**(_DWORD **)a2 & 0xFFFFFFFE);
      JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint(v8, (void *)1, v16, 0, v11, v12, v13, v14);
      if (v23)
      {
        v24 = *((unsigned __int8 *)v8 + 6);
        if (v24 > 6)
          goto LABEL_9;
        if (((1 << v24) & 0x63) != 0)
        {
          if ((*(_WORD *)(v16 + 12) & 0x10) != 0)
            return;
          goto LABEL_9;
        }
        if (v24 != 2 || (*(_WORD *)(v16 + 12) & 0x90) == 0)
        {
LABEL_9:
          v25 = (uint64_t)this[3];
          v43 = v16;
          v26 = JSC::DFG::Graph::addStructureSet(v25, (unint64_t *)&v43, v17, v18, v19, v20, v21, v22);
          v33 = JSC::DFG::ByteCodeParser::weakJSConstant((uint64_t)this, *(_QWORD *)a2, v27, v28, v29, v30, v31, v32);
          JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 132, (uint64_t)v26, (uint64_t)v33, 0, 0, v34, v35);
          if ((v43 & 1) != 0)
            WTF::fastFree(v43 & 0xFFFFFFFFFFFFFFFCLL, v36, v37, v38, v39, v40, v41, v42);
        }
      }
    }
  }
}

unint64_t JSC::DFG::ByteCodeParser::promoteToConstant(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = result;
  if (*(_DWORD *)(a3 + 16) != 3
    || (v10 = *(uint64_t **)a3, v11 = *(_QWORD *)(*(_QWORD *)a3 + 8), (*(_BYTE *)(v11 + 19) & 0xC) != 0)
    || ((v13 = *(_QWORD *)(v11 + 96), (v13 & 1) != 0)
      ? (v14 = (v13 >> 1) & 3)
      : (v14 = *(unsigned __int8 *)(v13 + 4)),
        v14 == 2
     || (result = JSC::DFG::Graph::tryGetConstantProperty(*(_QWORD *)(a2 + 24), *v10, v11, *(unsigned int *)(a3 + 8), a5, a6, a7, a8)) == 0))
  {
    *(_OWORD *)v9 = *(_OWORD *)a3;
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(a3 + 16);
  }
  else
  {
    result = (unint64_t)JSC::DFG::Graph::freeze(*(_QWORD *)(a2 + 24), result, v15, v16, v17, v18, v19, v20);
    *(_DWORD *)(v9 + 16) = 1;
    *(_QWORD *)v9 = result;
  }
  return result;
}

BOOL JSC::DFG::ByteCodeParser::needsDynamicLookup(uint64_t a1, int a2)
{
  _BOOL8 result;

  result = 0;
  if (a2)
  {
    switch(a2)
    {
      case 1:
        goto LABEL_3;
      case 2:
      case 3:
      case 4:
      case 5:
        return result;
      case 6:
      case 7:
      case 8:
      case 9:
      case 11:
      case 12:
        if (*(_BYTE *)(*(_QWORD *)(a1 + 2056) + 4) == 2 || (a2 - 10) < 2 || a2 == 12)
          goto LABEL_9;
        if (a2 == 7)
LABEL_3:
          result = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2064) + 4) == 2;
        else
          result = 0;
        break;
      case 10:
LABEL_9:
        result = 1;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1982FF670);
    }
  }
  return result;
}

void JSC::DFG::ByteCodeParser::planLoad(JSC::DFG::ByteCodeParser *this, JSC::DFG::Graph **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t EquivalenceWithoutBarrier;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  __int128 *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t *v46;
  int v47;
  uint64_t v48;
  __int128 **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  int v62;
  int v63;
  uint64_t v64;
  __int128 *v65;
  int v66;
  int v67;
  __int128 *v68;
  int v69;
  int v70;
  JSC::JSObject *v71;
  uint64_t v72;
  unint64_t v73;

  if ((*(_QWORD *)(a3 + 8) & 0xFF000000000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1982FF7D8);
  }
  v11 = *(_QWORD *)(a3 + 16);
  v71 = *(JSC::JSObject **)(a3 + 8);
  v72 = v11;
  EquivalenceWithoutBarrier = JSC::PropertyCondition::attemptToMakeEquivalenceWithoutBarrier((JSC::PropertyCondition *)&v71, *(JSC::JSObject **)a3, a3, a4, a5, a6, a7, a8);
  if ((EquivalenceWithoutBarrier & 0xFFFFFFFFFFFFFFLL) != 0)
  {
    v71 = *(JSC::JSObject **)a3;
    v72 = EquivalenceWithoutBarrier;
    v73 = v13;
  }
  else
  {
    v71 = 0;
    v72 = 0;
    v73 = 0;
  }
  JSC::DFG::Graph::watchCondition(a2[3], (const JSC::ObjectPropertyCondition *)&v71, v14, v15, v16, v17, v18, v19);
  v27 = v26;
  v28 = (uint64_t)a2[3];
  if (v27)
  {
    v29 = JSC::DFG::Graph::freeze(v28, v73, v20, v21, v22, v23, v24, v25);
    *((_DWORD *)this + 4) = 1;
    *(_QWORD *)this = v29;
  }
  else
  {
    v30 = JSC::DFG::Graph::freeze(v28, *(_QWORD *)a3, v20, v21, v22, v23, v24, v25);
    v31 = *((_QWORD *)v30 + 1);
    JSC::ObjectPropertyCondition::structureEnsuresValidity(a3, (void *)1, v31, v32, v33, v34, v35, v36);
    if ((v43 & 1) != 0)
    {
      if ((*(_BYTE *)(v31 + 19) & 0xC) != 0
        || ((v44 = *(_QWORD *)(v31 + 96), (v44 & 1) != 0)
          ? (v45 = (v44 >> 1) & 3)
          : (v45 = *(unsigned __int8 *)(v44 + 4)),
            v45 == 2))
      {
        JSC::DFG::Graph::watchCondition(a2[3], (const JSC::ObjectPropertyCondition *)a3, v37, v38, v39, v40, v41, v42);
        if (v47)
        {
          v48 = *(_QWORD *)(a3 + 16);
          v65 = v30;
          v67 = 3;
          v66 = v48;
          v49 = &v65;
        }
        else
        {
          v51 = (uint64_t)a2[3];
          v64 = v31;
          v52 = JSC::DFG::Graph::addStructureSet(v51, (unint64_t *)&v64, v46, v38, v39, v40, v41, v42);
          v55 = JSC::DFG::ByteCodeParser::addToGraph((uint64_t)a2, 0, (uint64_t)v30, 0, 0, 0, v53, v54);
          JSC::DFG::ByteCodeParser::addToGraph((uint64_t)a2, 132, (uint64_t)v52, (uint64_t)v55, 0, 0, v56, v57);
          if ((v64 & 1) != 0)
            WTF::fastFree(v64 & 0xFFFFFFFFFFFFFFFCLL, v58, v59, v38, v39, v40, v41, v42);
          v60 = *(_QWORD *)(a3 + 16);
          v61 = v30;
          v63 = 3;
          v62 = v60;
          v49 = &v61;
        }
      }
      else
      {
        v50 = *(_QWORD *)(a3 + 16);
        v68 = v30;
        v70 = 3;
        v69 = v50;
        v49 = &v68;
      }
      JSC::DFG::ByteCodeParser::promoteToConstant((unint64_t)this, (uint64_t)a2, (uint64_t)v49, v38, v39, v40, v41, v42);
    }
    else
    {
      *((_DWORD *)this + 4) = 0;
    }
  }
}

_QWORD *JSC::DFG::ByteCodeParser::load(JSC::DFG::Graph **a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v14;
  const JSC::ObjectPropertyCondition *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  unsigned int v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;

  v14 = *a3;
  if (*a3)
    v15 = (const JSC::ObjectPropertyCondition *)(*a3 + 8);
  else
    v15 = 0;
  if (v14)
    v16 = *a3 + 8 + 24 * *(unsigned int *)(v14 + 4);
  else
    v16 = 0;
  if (v15 == (const JSC::ObjectPropertyCondition *)v16)
    goto LABEL_30;
  v17 = 0;
  do
  {
    if (*((_BYTE *)v15 + 14))
    {
      JSC::DFG::ByteCodeParser::check(a1, v15, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!v18)
        goto LABEL_15;
    }
    else
    {
      if (v17)
      {
        __break(0xC471u);
        JUMPOUT(0x1982FFB58);
      }
      JSC::DFG::ByteCodeParser::planLoad((JSC::DFG::ByteCodeParser *)&v45, a1, (uint64_t)v15, a4, a5, a6, a7, a8);
      v17 = v46;
      if (!(_DWORD)v46)
      {
LABEL_15:
        v19 = (uint64_t *)(*((_QWORD *)a1[3] + 3) + 240);
        JSC::ObjectPropertyConditionSet::slotBaseCondition(a3, &v45);
        JSC::DFG::DesiredIdentifiers::ensure(v19, *((_QWORD *)&v45 + 1) & 0xFFFFFFFFFFFFLL, v20, v21, v22, v23, v24, v25);
        return 0;
      }
      v8 = v45;
      v9 = DWORD2(v45);
    }
    v15 = (const JSC::ObjectPropertyCondition *)((char *)v15 + 24);
  }
  while (v15 != (const JSC::ObjectPropertyCondition *)v16);
  v14 = *a3;
  if (!v17)
  {
LABEL_30:
    v8 = (uint64_t)a1[9];
    v32 = *((_QWORD *)a1[3] + 3);
    v45 = 0uLL;
    v46 = 0;
    if (v14)
      v33 = v14 + 8;
    else
      v33 = 0;
    if (v14)
      v14 += 8 + 24 * *(unsigned int *)(v14 + 4);
    if (v33 == v14)
      goto LABEL_50;
    v34 = 0;
    v35 = (uint64_t *)(v32 + 240);
    do
    {
      v36 = *(unsigned __int8 *)(v33 + 14);
      if (v36 < 2 || v36 - 5 <= 1)
      {
        v37 = *(_OWORD *)v33;
        v46 = *(_QWORD *)(v33 + 16);
        v45 = v37;
        ++v34;
      }
      v33 += 24;
    }
    while (v33 != v14);
    if (v34 != 1)
    {
LABEL_50:
      __break(0xC471u);
      JUMPOUT(0x1982FFB38);
    }
    JSC::DFG::DesiredIdentifiers::ensure(v35, *((_QWORD *)&v45 + 1) & 0xFFFFFFFFFFFFLL, (uint64_t)a3, a4, a5, a6, a7, a8);
    return JSC::DFG::ByteCodeParser::addToGraph((uint64_t)a1, 0, v8, 0, 0, 0, v39, v40);
  }
  v27 = *((_QWORD *)a1[3] + 3);
  v45 = 0uLL;
  v46 = 0;
  if (v14)
    v28 = v14 + 8;
  else
    v28 = 0;
  if (v14)
    v14 += 8 + 24 * *(unsigned int *)(v14 + 4);
  if (v28 == v14)
    goto LABEL_56;
  v29 = 0;
  v30 = (uint64_t *)(v27 + 240);
  do
  {
    v31 = *(unsigned __int8 *)(v28 + 14);
    if (v31 < 2 || v31 - 5 <= 1)
    {
      v45 = *(_OWORD *)v28;
      v46 = *(_QWORD *)(v28 + 16);
      ++v29;
    }
    v28 += 24;
  }
  while (v28 != v14);
  if (v29 != 1)
  {
LABEL_56:
    __break(0xC471u);
    JUMPOUT(0x1982FFB18);
  }
  v38 = JSC::DFG::DesiredIdentifiers::ensure(v30, *((_QWORD *)&v45 + 1) & 0xFFFFFFFFFFFFLL, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (v17 == 1)
    return JSC::DFG::ByteCodeParser::addToGraph((uint64_t)a1, 0, v8, 0, 0, 0, v39, v40);
  if (v17 != 3)
  {
    if (v17 == 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1982FFBE0);
    }
    goto LABEL_56;
  }
  v41 = v38;
  v42 = JSC::DFG::ByteCodeParser::addToGraph((uint64_t)a1, 0, v8, 0, 0, 0, v39, v40);
  return JSC::DFG::ByteCodeParser::handleGetByOffset((uint64_t)a1, a2, (uint64_t)v42, v41, v9, a4, v43, v44);
}

unint64_t JSC::DFG::ByteCodeParser::presenceConditionIfConsistent(_QWORD *a1, _DWORD *a2, _DWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v13;
  unint64_t result;
  unsigned int *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int v21;

  v9 = a4;
  v13 = 16 * (*a2 & 0xFFFFFFFE);
  v21 = 0;
  result = JSC::Structure::getConcurrently(v13, a3, &v21, a4, (uint64_t)a5, a6, a7, a8);
  if ((_DWORD)result != v9)
    goto LABEL_12;
  v15 = (unsigned int *)(*a5 & 0xFFFFFFFFFFFFFFFCLL);
  if ((*a5 & 1) != 0)
  {
    v17 = *v15;
    if ((_DWORD)v17)
    {
      if (*((_QWORD *)v15 + 1) == v13)
        goto LABEL_4;
      v18 = 0;
      v19 = v15 + 4;
      while (v17 - 1 != v18)
      {
        v20 = *(_QWORD *)&v19[2 * v18++];
        if (v20 == v13)
        {
          if (v18 < v17)
            goto LABEL_4;
          break;
        }
      }
    }
LABEL_12:
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return result;
  }
  if (v15 != (unsigned int *)v13)
    goto LABEL_12;
LABEL_4:
  v16 = v9 | ((unint64_t)v21 << 32);
  *a1 = a2;
  a1[1] = a3;
  a1[2] = v16;
  return result;
}

_QWORD *JSC::DFG::ByteCodeParser::replace(JSC::DFG::ByteCodeParser *this, JSC::DFG::Node *a2, unsigned int a3, const JSC::PutByVariant *a4, JSC::DFG::Node *a5)
{
  _DWORD *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  JSC::DFG::Node *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (*(_DWORD *)a4 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1982FFF34);
  }
  v10 = (_DWORD *)JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*(_QWORD *)(*((_QWORD *)this + 3) + 24) + 240), a3);
  v17 = (_QWORD *)((char *)a4 + 8);
  if (*((unsigned __int16 *)a2 + 9) > 2u)
    goto LABEL_7;
  v18 = **((_QWORD **)a2 + 9);
  if (!v18 || (v18 & 0xFFFE000000000002) != 0)
    goto LABEL_7;
  if (*(unsigned __int8 *)(v18 + 5) < 0x17u)
    goto LABEL_7;
  v30 = (unint64_t)v10;
  v31 = *((unsigned int *)a4 + 1);
  v32 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
  LODWORD(v42) = 0;
  if (JSC::Structure::getConcurrently(v32, v10, &v42, v12, v13, v14, v15, v16) != (_DWORD)v31)
    goto LABEL_7;
  v33 = (unsigned int *)(*v17 & 0xFFFFFFFFFFFFFFFCLL);
  if ((*v17 & 1) == 0)
  {
    if (v33 == (unsigned int *)v32)
      goto LABEL_15;
LABEL_7:
    v20 = JSC::DFG::Graph::addStructureSet(*((_QWORD *)this + 3), (unint64_t *)a4 + 1, v11, v12, v13, v14, v15, v16);
    JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 132, (uint64_t)v20, (uint64_t)a2, 0, 0, v21, v22);
    goto LABEL_8;
  }
  v38 = *v33;
  if (!(_DWORD)v38)
    goto LABEL_7;
  if (*((_QWORD *)v33 + 1) != v32)
  {
    v39 = 0;
    v40 = v33 + 4;
    while (v38 - 1 != v39)
    {
      v41 = *(_QWORD *)&v40[2 * v39++];
      if (v41 == v32)
      {
        if (v39 < v38)
          goto LABEL_15;
        goto LABEL_7;
      }
    }
    goto LABEL_7;
  }
LABEL_15:
  if ((v30 & 0xFFFFFFFFFFFFFFLL) == 0)
    goto LABEL_7;
  if ((v30 & 0xFF000000000000) != 0
    || (v34 = v42,
        v35 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE),
        LODWORD(v42) = 0,
        v36 = v30 & 0xFFFFFFFFFFFFLL,
        JSC::Structure::getConcurrently(v35, (_DWORD *)v36, &v42, v12, v13, v14, v15, v16) != (_DWORD)v31)
    || (_DWORD)v42 != (_DWORD)v34
    || (v42 & 2) != 0)
  {
    v42 = 0;
    v43 = 0;
    v44 = 0;
  }
  else
  {
    v42 = v18;
    v43 = v36 | 0x1000000000000;
    v44 = v31 | (v34 << 32);
  }
  JSC::DFG::ByteCodeParser::check((JSC::DFG::Graph **)this, (const JSC::ObjectPropertyCondition *)&v42, (uint64_t)v11, v12, v13, v14, v15, v16);
  if ((v37 & 1) == 0)
    goto LABEL_7;
LABEL_8:
  v23 = *((_DWORD *)a4 + 1);
  v24 = a2;
  if (v23 >= 64)
    v24 = (JSC::DFG::Node *)JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 138, (uint64_t)a2, 0, 0, v14, v15, v16);
  v25 = *((_QWORD *)this + 3);
  v26 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v26 = 0;
  *(_QWORD *)(v26 + 8) = 0;
  *(_QWORD *)(v26 + 8) = *(_QWORD *)(v25 + 432);
  *(_QWORD *)(v25 + 432) = v26;
  *(_DWORD *)v26 = v23;
  *(_DWORD *)(v26 + 4) = a3;
  return JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 155, v26, (uint64_t)v24, (uint64_t)a2, (uint64_t)a5, v27, v28);
}

void JSC::DFG::ByteCodeParser::handleGetById(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  __int16 v20;
  __int16 v21;
  BOOL v22;
  __int16 v23;
  unsigned __int8 *v24;
  uint64_t v25;
  WTF *v26;
  unsigned int *v27;
  unsigned int v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  JSC::GetByVariant *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  JSC::RecordedStatuses *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  WTF *v79;
  uint64_t v81;
  void *v82;
  unint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  WTF *v89;
  unint64_t v90;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  JSC::RecordedStatuses *v96;
  JSC::GetByVariant *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF *v110;
  unint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  BOOL v140;
  uint64_t v142;
  __int16 v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  _BYTE *v158;
  uint64_t v159;
  unsigned int v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  char **v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  WTF *v177;
  WTF *v178;
  uint64_t *v180;
  BOOL v181;
  unint64_t v182;
  const JSC::ObjectPropertyCondition *v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  unsigned __int16 *v189;
  uint64_t v190;
  unsigned int v191;
  BOOL v192;
  char v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  JSC::RecordedStatuses *v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  JSC::GetByVariant *v207;
  unsigned int *v208;
  unsigned int v209;
  unsigned int v210;
  uint64_t *v211;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  WTF *v229;
  WTF *v230;
  unint64_t v231;
  unsigned int *v233;
  unsigned int v234;
  unsigned int v235;
  unint64_t v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  JSC::GetByVariant *v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  const void *v253;
  void *v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t *v257;
  unsigned int v258;
  unsigned int v259;
  uint64_t v260;
  JSC::RecordedStatuses *v261;
  JSC::GetByVariant *v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  unint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  const JSC::GetByVariant *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t *v276;
  void *v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t *v282;
  __int128 v283;
  WTF *v284;
  unint64_t v285;
  uint64_t v286;
  int v287;
  const JSC::ObjectPropertyCondition *v288;
  uint64_t v289;
  unint64_t v290;
  WTF *v291;
  int v292;
  WTF *v293;
  unint64_t v294;
  uint64_t *v295;
  void *v296;
  uint64_t v297;
  WTF *v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t *v301;
  unint64_t v302;
  __int128 v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  __int16 v318;
  _QWORD *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  unint64_t v327;
  uint64_t v328;
  JSC::DFG::Node *v329;
  JSC::DFG::Graph *v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unsigned int *v337;
  unsigned int v338;
  unsigned int v339;
  unsigned int v340;
  uint64_t v341;
  char v342;
  uint64_t v343;
  uint64_t v344;
  JSC::RecordedStatuses *v345;
  JSC::GetByVariant *v346;
  uint64_t v347;
  uint64_t v348;
  void *v349;
  unint64_t *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  _QWORD *v360;
  uint64_t v361;
  __int16 v362;
  _QWORD *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  const JSC::GetByVariant *v373;
  void *v374;
  uint64_t v375;
  void *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  int v384;
  uint64_t v385;
  unsigned int *v386;
  unsigned int v387;
  unsigned int v388;
  unsigned int v389;
  unsigned int *v390;
  unsigned int *v391;
  unsigned int v392;
  unsigned int v393;
  uint64_t v394;
  int v395;
  _BOOL4 hasExitSite;
  unint64_t v397;
  int v398;
  unsigned int v399;
  unsigned __int8 v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  char v408;
  unsigned int *v409;
  int v410;
  unsigned int v411;
  unsigned __int8 v412;
  uint64_t v413;
  unsigned int *v414;
  unsigned int v415;
  unsigned int v416;
  unsigned int v417;
  uint64_t v418;
  BOOL v419;
  unint64_t v420;
  void *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  _BOOL4 v428;
  unint64_t v429;
  int v430;
  unsigned int v431;
  unsigned __int8 v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  char v440;
  unsigned int *v441;
  int v442;
  unsigned int v443;
  unsigned __int8 v444;
  unint64_t v445;
  int v446;
  int v447;
  int v448;
  int v449;
  int v450;
  int v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  char v459;
  unsigned int *v460;
  int v461;
  unsigned int v462;
  unsigned __int8 v463;
  uint64_t v464;
  BOOL v465;
  unint64_t v466;
  void *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  unsigned int *v474;
  uint64_t v475;
  __int128 *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  __int16 v481;
  void *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  __int128 *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  BOOL v496;
  unsigned int *v497;
  unint64_t v498;
  unint64_t v499;
  uint64_t v500;
  int v501;
  unsigned int v502;
  unsigned __int8 v503;
  uint64_t v504;
  BOOL v505;
  unint64_t v506;
  void *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  __int128 *v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  __int16 v522;
  unint64_t v523;
  uint64_t v524;
  int v525;
  unsigned int v526;
  unsigned __int8 v527;
  uint64_t v528;
  BOOL v529;
  unint64_t v530;
  void *v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  __int128 *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t v551;
  int v552;
  unsigned int v553;
  unsigned __int8 v554;
  uint64_t v555;
  BOOL v556;
  unint64_t v557;
  void *v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  __int128 *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  __int16 v572;
  _QWORD *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  unsigned int *v580;
  uint64_t v581;
  __int128 *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  WTF *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t *v594;
  char v595;
  uint64_t v596;
  const JSC::ObjectPropertyCondition *v597;
  uint64_t v598;
  char v599;
  uint64_t *v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  unsigned __int8 *v607;
  unsigned int v608;
  WTF *v609;
  WTF *v610;
  int v611;
  int v612;
  unsigned int v613;
  unsigned int v614;
  WTF *v615;
  WTF *v616;
  int v617;
  uint64_t v618;
  unsigned int v619;
  unsigned int v620[2];
  int v621;
  int v622;
  unsigned int v623[2];
  int v624;
  JSC::RecordedStatuses *v625;
  JSC::RecordedStatuses *v626;
  JSC::RecordedStatuses *v627;
  JSC::RecordedStatuses *v628;
  JSC::RecordedStatuses *v629;
  int v630;
  char v631;
  const JSC::GetByVariant *v632;
  _BOOL4 v633;
  WTF *v634;
  int v635;
  int v636;
  _DWORD v637[4];
  unint64_t v638;
  __int128 v639;
  WTF *v640;
  uint64_t v641;
  WTF *v642;
  WTF *v643;
  int v644;
  unsigned int v645;
  _BYTE v646[64];
  WTF *v647;
  __int16 v648;
  _BYTE v649[96];
  unint64_t __dst;
  uint64_t v651;
  uint64_t v652;
  unint64_t v653;
  unint64_t v654;
  unint64_t v655;
  unsigned int *v656;
  char v657;
  char v658;
  _QWORD v659[2];

  v9 = a8;
  v11 = a6;
  v12 = a5;
  if (*(_WORD *)(a4 + 18) == 259)
  {
    v327 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 220) - 1;
    while (v327 != -1)
    {
      v328 = *(_QWORD *)(a1 + 32);
      if (v327 >= *(unsigned int *)(v328 + 220))
      {
        __break(0xC471u);
        JUMPOUT(0x1983022C0);
      }
      v329 = *(JSC::DFG::Node **)(*(_QWORD *)(v328 + 208) + 8 * v327);
      if (v329 == (JSC::DFG::Node *)a4)
        break;
      v330 = *(JSC::DFG::Graph **)(a1 + 24);
      __dst = 16394;
      LOBYTE(v651) = 0;
      JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::AbstractHeapOverlaps,JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::AbstractHeapOverlaps,JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::NoOpClobberize const&,JSC::DFG::AbstractHeapOverlaps const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>(v330, v329, (uint64_t)v659, (uint64_t)&__dst, (uint64_t)v659, (uint64_t)&v638, a7, a8);
      --v327;
      if ((_BYTE)v651)
        goto LABEL_2;
    }
    __dst = *(_QWORD *)(a4 + 72);
    JSC::GetByStatus::filter(a7, &__dst, a3, a4, a5, a6, a7, a8);
    if ((__dst & 1) != 0)
      WTF::fastFree(__dst & 0xFFFFFFFFFFFFFFFCLL, v374, a3, a4, a5, a6, a7, a8);
  }
LABEL_2:
  if (v9)
  {
    if (v9 == 3)
    {
      v20 = 109;
      goto LABEL_56;
    }
    v17 = *(unsigned __int8 *)(a7 + 88);
    if (v17 > 9)
    {
      __break(0xC471u);
      JUMPOUT(0x1983021D4);
    }
    if (v17 == 1)
    {
      v334 = ((unint64_t)*(unsigned int *)(a7 + 12) << 6) - 40;
      v20 = 115;
      while (v334 != -40)
      {
        v335 = *(_QWORD *)(*(_QWORD *)a7 + v334);
        v334 -= 64;
        if (v335)
          goto LABEL_53;
      }
      v20 = 114;
      goto LABEL_53;
    }
    v21 = 114;
    v22 = ((1 << v17) & 0xD5) == 0;
    v23 = 115;
  }
  else
  {
    v17 = *(unsigned __int8 *)(a7 + 88);
    if (v17 > 9)
    {
      __break(0xC471u);
      JUMPOUT(0x198301814);
    }
    if (v17 == 1)
    {
      v18 = ((unint64_t)*(unsigned int *)(a7 + 12) << 6) - 40;
      while (v18 != -40)
      {
        v19 = *(_QWORD *)(*(_QWORD *)a7 + v18);
        v18 -= 64;
        if (v19)
        {
          v20 = 111;
          goto LABEL_53;
        }
      }
      v20 = 110;
LABEL_53:
      v24 = (unsigned __int8 *)(a7 + 88);
      goto LABEL_54;
    }
    v21 = 110;
    v22 = ((1 << v17) & 0xD5) == 0;
    v23 = 111;
  }
  if (v22)
    v20 = v23;
  else
    v20 = v21;
  v24 = (unsigned __int8 *)(a7 + 88);
  if (v17 == 4)
  {
    JSC::GetByStatus::GetByStatus((JSC::GetByStatus *)v649, (const JSC::GetByStatus *)a7, a3, a4, a5, a6, a7, a8);
    LODWORD(v625) = JSC::DFG::ByteCodeParser::handleModuleNamespaceLoad(a1, a2, a3, a4, (const JSC::GetByStatus *)v649);
    JSC::GetByStatus::~GetByStatus((JSC::GetByStatus *)v649, v376, v377, v378, v379, v380, v381, v382);
    if ((_DWORD)v625)
    {
LABEL_50:
      v81 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 112);
      if (v81)
        ++*(_DWORD *)(v81 + 96);
      return;
    }
    v17 = *v24;
  }
  if (v17 == 5)
  {
    v25 = *(unsigned int *)(a7 + 12);
    v26 = (WTF *)v646;
    v643 = (WTF *)v646;
    v644 = 1;
    v645 = v25;
    if (v25 >= 2)
    {
      if (v25 >> 26)
      {
        __break(0xC471u);
        JUMPOUT(0x19830231CLL);
      }
      v630 = v25;
      v26 = (WTF *)WTF::fastMalloc((WTF *)(v25 << 6));
      v644 = v630;
      v643 = v26;
      v25 = *(unsigned int *)(a7 + 12);
    }
    if ((_DWORD)v25)
    {
      v373 = *(const JSC::GetByVariant **)a7;
      *(_QWORD *)v620 = v25 << 6;
      do
      {
        v629 = v373;
        v26 = (JSC::GetByVariant *)((char *)JSC::GetByVariant::GetByVariant(v26, v373, a3, a4, a5, a6, a7, a8) + 64);
        v373 = (JSC::RecordedStatuses *)((char *)v629 + 64);
        *(_QWORD *)v620 -= 64;
      }
      while (*(_QWORD *)v620);
    }
    v27 = *(unsigned int **)(a7 + 80);
    if (v27)
    {
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 + 1, v27));
    }
    v647 = (WTF *)v27;
    v648 = *(_WORD *)v24;
    v625 = *(JSC::RecordedStatuses **)(a1 + 280);
    if (JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)v625 + 4, *(_DWORD *)(a1 + 40), 1)
      || (v625 = *(JSC::RecordedStatuses **)(*(_QWORD *)(*((_QWORD *)v625 + 1) + 8) + 584)) == 0)
    {
      v75 = 0;
    }
    else
    {
      JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)a1, 24, a4 & 0xFF00FFFFFFFFFFFFLL | 0x44000000000000, 0, 0, a6, a7, a8);
      v610 = JSC::DFG::ByteCodeParser::weakJSConstant(a1, (unint64_t)v625, v30, v31, v32, v33, v34, v35);
      if (!v645)
      {
        __break(0xC471u);
        JUMPOUT(0x1983022ECLL);
      }
      v609 = JSC::DFG::ByteCodeParser::weakJSConstant(a1, *((_QWORD *)v643 + 7), v36, v37, v38, v39, v40, v41);
      v626 = *(JSC::RecordedStatuses **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 344);
      JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&__dst, *(_DWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24));
      v42 = JSC::RecordedStatuses::addGetByStatus(v626, (const JSC::CodeOrigin *)&__dst, (const JSC::GetByStatus *)&v643);
      JSC::DFG::ByteCodeParser::addToGraph(a1, 421, (uint64_t)v42, a4, 0, 0, v43, v44);
      if ((__dst & 1) != 0 && (__dst & 0xFFFFFFFF8) != 0)
        WTF::fastFree(__dst & 0xFFFFFFFF8, v45, v46, v47, v48, v49, v50, v51);
      v52 = *(_QWORD *)(a1 + 280);
      v53 = *(_QWORD *)(v52 + 24);
      v614 = *(_DWORD *)(*(_QWORD *)(v52 + 16) + 20) & 0xFFFFFFFE;
      v54 = -10 - v614;
      v613 = -10 - v614;
      if (v53)
        v54 = v613 + (HIDWORD(*(_QWORD *)(v53 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v53 + 24) >> 28) >> 24 << 20));
      v619 = ~v54;
      if (*(_DWORD *)(a1 + 260) < ~v54)
      {
        *(_DWORD *)(a1 + 260) = v619;
        v55 = *(_QWORD *)(a1 + 24);
        LODWORD(v56) = *(_DWORD *)(v55 + 60);
        if ((_DWORD)v56)
        {
          v57 = 0;
          do
          {
            if (v56 <= v57)
            {
              __break(0xC471u);
              JUMPOUT(0x1983022DCLL);
            }
            v627 = v57;
            JSC::DFG::BasicBlock::ensureLocals(*(JSC::DFG::BasicBlock **)(*(_QWORD *)(v55 + 48) + 8 * (_QWORD)v57), v619);
            v57 = (JSC::RecordedStatuses *)((char *)v627 + 1);
            v55 = *(_QWORD *)(a1 + 24);
            v56 = *(unsigned int *)(v55 + 60);
          }
          while ((unint64_t)v627 + 1 < v56);
        }
      }
      JSC::DFG::ByteCodeParser::set(a1, (-5 - v614) | ((unint64_t)((-5 - v614) >> 31) << 32), a4, 2, v48, v49, v50, v51);
      JSC::DFG::ByteCodeParser::set(a1, (-4 - v614) | ((unint64_t)((-4 - v614) >> 31) << 32), (uint64_t)v609, 2, v58, v59, v60, v61);
      JSC::DFG::ByteCodeParser::set(a1, (-3 - v614) | ((unint64_t)((-3 - v614) >> 31) << 32), a4, 2, v62, v63, v64, v65);
      *(_BYTE *)(a1 + 64) = 1;
      JSC::DFG::ByteCodeParser::addToGraph(a1, 22, 0, 0, 0, v66, v67, v68);
      if (!v645)
      {
        __break(0xC471u);
        JUMPOUT(0x1983022F4);
      }
      v69 = *((_QWORD *)v643 + 3);
      v70 = *(unsigned int *)(v69 + 12);
      v71 = &v652;
      __dst = (unint64_t)&v652;
      LODWORD(v651) = 1;
      HIDWORD(v651) = v70;
      v72 = (uint64_t)v610;
      v625 = (JSC::RecordedStatuses *)&v652;
      if (v70 >= 2)
      {
        *(_QWORD *)v623 = v69;
        if (v70 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x198302324);
        }
        v617 = v70;
        v71 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * v70));
        v69 = *(_QWORD *)v623;
        LODWORD(v651) = v617;
        __dst = (unint64_t)v71;
        v70 = *(unsigned int *)(*(_QWORD *)v623 + 12);
        v72 = (uint64_t)v610;
      }
      if ((_DWORD)v70)
      {
        v370 = *(uint64_t **)v69;
        v371 = 8 * v70;
        do
        {
          v372 = *v370++;
          *v71++ = v372;
          v371 -= 8;
        }
        while (v371);
      }
      LODWORD(v653) = *(_DWORD *)(v69 + 24);
      JSC::DFG::ByteCodeParser::handleCall(a1, a2 | ((((unint64_t)a2 >> 31) & 1) << 32), 241, 8, a9, v72, 3, (char **)v613, (uint64_t **)&__dst, a3, 0);
      v73 = (uint64_t *)__dst;
      if (&v652 != (uint64_t *)__dst && __dst != 0)
      {
        __dst = 0;
        LODWORD(v651) = 0;
        WTF::fastFree((unint64_t)v73, v29, a3, a4, a5, a6, a7, a8);
      }
      v75 = 1;
    }
    v76 = (unsigned int *)v647;
    v647 = 0;
    if (v76)
    {
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (!v78)
      {
        atomic_store(1u, v76);
        v624 = v75;
        WTF::fastFree((unint64_t)v76, v29, a3, a4, a5, a6, a7, a8);
        v75 = v624;
      }
    }
    v79 = v643;
    if (v645)
    {
      v621 = v75;
      v625 = (JSC::RecordedStatuses *)((unint64_t)v645 << 6);
      do
      {
        JSC::GetByVariant::~GetByVariant(v79, v29, a3, a4, a5, a6, a7, a8);
        v79 = (WTF *)(v375 + 64);
        v625 = (JSC::RecordedStatuses *)((char *)v625 - 64);
      }
      while (v625);
      v79 = v643;
      v75 = v621;
    }
    if (v646 != (_BYTE *)v79 && v79 != 0)
    {
      v643 = 0;
      v644 = 0;
      v622 = v75;
      WTF::fastFree((unint64_t)v79, v29, a3, a4, a5, a6, a7, a8);
      v75 = v622;
    }
    if (v75)
      goto LABEL_50;
  }
LABEL_54:
  if (v9 || *v24 != 3)
    goto LABEL_56;
  if ((v12 & 1) != 0)
    v157 = v12 & 0xFFFFFFFFFFFFFFFELL;
  else
    v157 = *(_QWORD *)(v12 + 8);
  v158 = *(_BYTE **)(v157 + 8);
  v159 = *(unsigned int *)(v157 + 4);
  if ((*(_BYTE *)(v157 + 16) & 4) != 0)
  {
    if ((_DWORD)v159)
    {
      v160 = *v158 - 48;
      if (v160 <= 9 && (v159 < 2 || *v158 != 48))
      {
        v606 = v159 - 1;
        v607 = v158 + 1;
        while (v606)
        {
          if (v160 <= 0x19999999)
          {
            v608 = *v607 - 48;
            if (v608 <= 9)
            {
              v192 = __CFADD__(v608, 10 * v160);
              v160 = v608 + 10 * v160;
              --v606;
              ++v607;
              if (!v192)
                continue;
            }
          }
          goto LABEL_129;
        }
LABEL_589:
        if (v160 != -1)
          goto LABEL_56;
      }
    }
  }
  else if ((_DWORD)v159)
  {
    v160 = *(unsigned __int16 *)v158 - 48;
    if (v160 <= 9 && (*(_WORD *)v158 != 48 || v159 <= 1))
    {
      v189 = (unsigned __int16 *)(v158 + 2);
      v190 = v159 - 1;
      while (v190)
      {
        if (v160 <= 0x19999999)
        {
          v191 = *v189 - 48;
          if (v191 <= 9)
          {
            v192 = __CFADD__(v191, 10 * v160);
            v160 = v191 + 10 * v160;
            ++v189;
            --v190;
            if (!v192)
              continue;
          }
        }
        goto LABEL_129;
      }
      goto LABEL_589;
    }
  }
LABEL_129:
  v161 = *(_QWORD **)(*(_QWORD *)a1 + 41952);
  if (v161[221] != v157 && v161[246] != v157 && v161[270] != v157 && v161[2] != v157)
  {
    v142 = a1;
    v143 = 116;
    goto LABEL_114;
  }
LABEL_56:
  if (*(_DWORD *)(a7 + 12) == 1)
  {
    JSC::GetByVariant::GetByVariant((JSC::GetByVariant *)&v638, *(const JSC::GetByVariant **)a7, a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(a7 + 88) == 2)
    {
      v180 = (uint64_t *)v642;
      if (byte_1ECF4C245)
        v181 = v642 == 0;
      else
        v181 = 1;
      if (v181)
      {
        JSC::DFG::ByteCodeParser::check((JSC::DFG::Graph **)a1, (const JSC::ObjectPropertyConditionSet *)v639, (uint64_t)v83, v84, v85, v86, v87, a8);
        if ((v342 & 1) != 0)
        {
          v343 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
          v344 = *(_QWORD *)(v343 + 112);
          if (v344)
            ++*(_DWORD *)(v344 + 96);
          v345 = *(JSC::RecordedStatuses **)(v343 + 344);
          JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&__dst, *(_DWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24));
          v346 = JSC::RecordedStatuses::addGetByStatus(v345, (const JSC::CodeOrigin *)&__dst, (const JSC::GetByStatus *)a7);
          JSC::DFG::ByteCodeParser::addToGraph(a1, 421, (uint64_t)v346, a4, 0, 0, v347, v348);
          if ((__dst & 1) != 0 && (__dst & 0xFFFFFFFF8) != 0)
            WTF::fastFree(__dst & 0xFFFFFFFF8, v349, (uint64_t)v350, v351, v352, v353, v354, v355);
          v356 = JSC::DFG::Graph::addStructureSet(*(_QWORD *)(a1 + 24), &v638, v350, v351, v352, v353, v354, v355);
          JSC::DFG::ByteCodeParser::addToGraph(a1, 132, (uint64_t)v356, a4, 0, 0, v357, v358);
          v359 = *(_QWORD *)(a1 + 24);
          v360 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          v360[1] = 0;
          v360[2] = 0;
          *v360 = 0;
          v360[2] = *(_QWORD *)(v359 + 616);
          *(_QWORD *)(v359 + 616) = v360;
          *v360 = v641;
          v360[1] = v12;
          v361 = a1;
          v362 = 255;
        }
        else
        {
          v361 = a1;
          v362 = v20;
          v360 = (_QWORD *)v12;
        }
        v363 = JSC::DFG::ByteCodeParser::addToGraph(v361, v362, (uint64_t)v360, a3, a4, 0, 0, v341);
        v368 = a2 | (((a2 >> 31) & 1) << 32);
        v369 = a1;
LABEL_331:
        JSC::DFG::ByteCodeParser::set(v369, v368, (uint64_t)v363, 0, v364, v365, v366, v367);
      }
      else
      {
        v182 = a2 | (((a2 >> 31) & 1) << 32);
        if ((_QWORD)v639)
          v183 = (const JSC::ObjectPropertyCondition *)(v639 + 8);
        else
          v183 = 0;
        if ((_QWORD)v639)
          v184 = v639 + 8 + 24 * *(unsigned int *)(v639 + 4);
        else
          v184 = 0;
        while (v183 != (const JSC::ObjectPropertyCondition *)v184)
        {
          JSC::DFG::ByteCodeParser::check((JSC::DFG::Graph **)a1, v183, (uint64_t)v83, v84, v85, v86, v87, a8);
          if ((v193 & 1) == 0)
          {
            v363 = JSC::DFG::ByteCodeParser::addToGraph(a1, v20, v12, a3, a4, 0, 0, a8);
            v369 = a1;
            v368 = v182;
            goto LABEL_331;
          }
          v183 = (const JSC::ObjectPropertyCondition *)((char *)v183 + 24);
        }
        v194 = JSC::DFG::Graph::addStructureSet(*(_QWORD *)(a1 + 24), &v638, v83, v84, v85, v86, v87, a8);
        JSC::DFG::ByteCodeParser::addToGraph(a1, 132, (uint64_t)v194, a4, 0, 0, v195, v196);
        JSC::DFG::ByteCodeParser::addToGraph(a1, 191, *v180, a4, 0, 0, v197, v198);
        v199 = *(JSC::RecordedStatuses **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 344);
        JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)v659, *(_DWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24));
        __dst = (unint64_t)&v652;
        v651 = 1;
        v656 = 0;
        v657 = 2;
        v658 = v658 & 0xFC | 1;
        v207 = JSC::RecordedStatuses::addGetByStatus(v199, (const JSC::CodeOrigin *)v659, (const JSC::GetByStatus *)&__dst);
        v208 = v656;
        v656 = 0;
        if (v208)
        {
          do
          {
            v209 = __ldaxr(v208);
            v210 = v209 - 1;
          }
          while (__stlxr(v210, v208));
          if (!v210)
          {
            atomic_store(1u, v208);
            WTF::fastFree((unint64_t)v208, v200, v201, v202, v203, v204, v205, v206);
          }
        }
        if (HIDWORD(v651))
        {
          v247 = (JSC::GetByVariant *)__dst;
          v248 = (unint64_t)HIDWORD(v651) << 6;
          do
          {
            JSC::GetByVariant::~GetByVariant(v247, v200, v201, v202, v203, v204, v205, v206);
            v247 = (JSC::GetByVariant *)(v249 + 64);
            v248 -= 64;
          }
          while (v248);
        }
        v211 = (uint64_t *)__dst;
        if (&v652 != (uint64_t *)__dst && __dst != 0)
        {
          __dst = 0;
          LODWORD(v651) = 0;
          WTF::fastFree((unint64_t)v211, v200, v201, v202, v203, v204, v205, v206);
        }
        if ((v659[0] & 1) != 0 && (v659[0] & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v659[0] & 0xFFFFFFFF8, v200, v201, v202, v203, v204, v205, v206);
        if ((JSC::GetByStatus::appendVariant((uint64_t)v207, &v638, v201, v202, v203, v204, v205, v206) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198301580);
        }
        JSC::DFG::ByteCodeParser::addToGraph(a1, 421, (uint64_t)v207, a4, 0, 0, v213, v214);
        v215 = *(_QWORD *)(a1 + 24);
        v216 = WTF::fastMalloc((WTF *)0x30);
        v218 = v216;
        *(_OWORD *)v216 = 0u;
        *(_OWORD *)(v216 + 16) = 0u;
        *(_OWORD *)(v216 + 32) = 0u;
        *(_QWORD *)(v216 + 40) = *(_QWORD *)(v215 + 608);
        *(_QWORD *)(v215 + 608) = v216;
        *(_QWORD *)v216 = v641;
        *(_QWORD *)(v216 + 32) = *v180;
        v219 = v180[1];
        if (v219)
        {
          *(_QWORD *)(v216 + 8) = v219;
          (*(void (**)(unint64_t *__return_ptr))(v219 + 8))(&__dst);
          v243 = __dst;
          *(_QWORD *)(v218 + 16) = __dst;
          v244 = *(_QWORD *)(a1 + 24);
          v245 = *(unsigned int *)(v244 + 772);
          if ((_DWORD)v245 == *(_DWORD *)(v244 + 768))
          {
            v250 = v245 + (v245 >> 2);
            if (v250 >= 0x10)
              v251 = v250 + 1;
            else
              v251 = 16;
            if (v251 <= v245 + 1)
              v252 = v245 + 1;
            else
              v252 = v251;
            if (v252 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1983022D4);
            }
            v253 = *(const void **)(v244 + 760);
            v254 = (void *)WTF::fastMalloc((WTF *)(8 * v252));
            *(_DWORD *)(v244 + 768) = v252;
            *(_QWORD *)(v244 + 760) = v254;
            memcpy(v254, v253, 8 * v245);
            if (v253)
            {
              if (*(const void **)(v244 + 760) == v253)
              {
                *(_QWORD *)(v244 + 760) = 0;
                *(_DWORD *)(v244 + 768) = 0;
              }
              WTF::fastFree((unint64_t)v253, v237, v238, v239, v240, v241, v242, v217);
            }
            v245 = *(unsigned int *)(v244 + 772);
            v255 = *(_QWORD *)(v244 + 760);
            v256 = __dst;
            __dst = 0;
            *(_QWORD *)(v255 + 8 * v245) = v256;
          }
          else
          {
            v246 = *(_QWORD *)(v244 + 760);
            __dst = 0;
            *(_QWORD *)(v246 + 8 * v245) = v243;
          }
          *(_DWORD *)(v244 + 772) = v245 + 1;
          v257 = (uint64_t *)__dst;
          __dst = 0;
          if (v257)
          {
            do
            {
              v258 = __ldaxr((unsigned int *)v257);
              v259 = v258 - 1;
            }
            while (__stlxr(v259, (unsigned int *)v257));
            if (!v259)
            {
              atomic_store(1u, (unsigned int *)v257);
              v390 = (unsigned int *)v257[1];
              v257[1] = 0;
              if (v390)
              {
                v391 = v390 + 2;
                do
                {
                  v392 = __ldaxr(v391);
                  v393 = v392 - 1;
                }
                while (__stlxr(v393, v391));
                if (!v393)
                {
                  atomic_store(1u, v390 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v390 + 8))(v390);
                }
              }
              WTF::fastFree((unint64_t)v257, v237, v238, v239, v240, v241, v242, v217);
            }
          }
          v260 = *(_QWORD *)(v218 + 16);
          *(_DWORD *)(v218 + 24) = v11;
          if (v260 && *(_BYTE *)(v260 + 16))
            v220 = JSC::DFG::ByteCodeParser::addToGraph(a1, 169, a4, 0, 0, v241, v242, v217);
          else
            v220 = 0;
        }
        else
        {
          v220 = 0;
          *(_DWORD *)(v216 + 24) = v11;
        }
        v221 = JSC::DFG::ByteCodeParser::addToGraph(a1, 416, v218, a3, a4, (uint64_t)v220, 0, v217);
        v226 = *(_QWORD *)(v221[9] + 16);
        if (v226)
        {
          if (*(unsigned __int16 *)(v226 + 24) == *(unsigned __int16 *)(v226 + 26))
          {
            v227 = *((_DWORD *)v221 + 14);
            if ((v227 & 0xFFFFFFF7) != v227)
              *((_DWORD *)v221 + 14) = v227 & 0xFFFFFFF7;
          }
        }
        JSC::DFG::ByteCodeParser::set(a1, v182, (uint64_t)v221, 0, v222, v223, v224, v225);
        v228 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 112);
        if (v228)
          ++*(_DWORD *)(v228 + 96);
      }
      v229 = v642;
      v642 = 0;
      if (v229)
        WTF::fastFree((unint64_t)v229, v122, v123, v124, v125, v126, v127, v128);
      v230 = v640;
      v640 = 0;
      if (v230)
      {
        v231 = *(_QWORD *)v230;
        if ((WTF *)((char *)v230 + 16) != *(WTF **)v230 && v231 != 0)
        {
          *(_QWORD *)v230 = 0;
          *((_DWORD *)v230 + 2) = 0;
          WTF::fastFree(v231, v122, v123, v124, v125, v126, v127, v128);
        }
        WTF::fastFree((unint64_t)v230, v122, v123, v124, v125, v126, v127, v128);
      }
      v233 = (unsigned int *)v639;
      *(_QWORD *)&v639 = 0;
      if (v233)
      {
        do
        {
          v234 = __ldaxr(v233);
          v235 = v234 - 1;
        }
        while (__stlxr(v235, v233));
        if (!v235)
        {
          atomic_store(1u, v233);
          WTF::fastFree((unint64_t)v233, v122, v123, v124, v125, v126, v127, v128);
        }
      }
      v136 = v638;
      if ((v638 & 1) != 0)
      {
LABEL_213:
        v236 = v136 & 0xFFFFFFFFFFFFFFFCLL;
LABEL_214:
        WTF::fastFree(v236, v122, v123, v124, v125, v126, v127, v128);
        return;
      }
      return;
    }
    v88 = v642;
    v642 = 0;
    if (v88)
      WTF::fastFree((unint64_t)v88, v82, (uint64_t)v83, v84, v85, v86, v87, a8);
    v89 = v640;
    v640 = 0;
    if (v89)
    {
      v90 = *(_QWORD *)v89;
      if ((WTF *)((char *)v89 + 16) != *(WTF **)v89 && v90 != 0)
      {
        *(_QWORD *)v89 = 0;
        *((_DWORD *)v89 + 2) = 0;
        WTF::fastFree(v90, v82, (uint64_t)v83, v84, v85, v86, v87, a8);
      }
      WTF::fastFree((unint64_t)v89, v82, (uint64_t)v83, v84, v85, v86, v87, a8);
    }
    v92 = (unsigned int *)v639;
    *(_QWORD *)&v639 = 0;
    if (v92)
    {
      do
      {
        v93 = __ldaxr(v92);
        v94 = v93 - 1;
      }
      while (__stlxr(v94, v92));
      if (!v94)
      {
        atomic_store(1u, v92);
        WTF::fastFree((unint64_t)v92, v82, (uint64_t)v83, v84, v85, v86, v87, a8);
      }
    }
    if ((v638 & 1) != 0)
      WTF::fastFree(v638 & 0xFFFFFFFFFFFFFFFCLL, v82, (uint64_t)v83, v84, v85, v86, v87, a8);
  }
  if (*(_BYTE *)(a7 + 88) != 1)
    goto LABEL_113;
  v95 = *(unsigned int *)(a7 + 12);
  if (!(_DWORD)v95 || !byte_1ECF4C42A)
    goto LABEL_113;
  if (v95 < 2)
  {
    v96 = *(JSC::RecordedStatuses **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 344);
    JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&__dst, *(_DWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24));
    v97 = JSC::RecordedStatuses::addGetByStatus(v96, (const JSC::CodeOrigin *)&__dst, (const JSC::GetByStatus *)a7);
    JSC::DFG::ByteCodeParser::addToGraph(a1, 421, (uint64_t)v97, a4, 0, 0, v98, v99);
    if ((__dst & 1) != 0 && (__dst & 0xFFFFFFFF8) != 0)
      WTF::fastFree(__dst & 0xFFFFFFFF8, v100, v101, v102, v103, v104, v105, v106);
    if (!*(_DWORD *)(a7 + 12))
    {
      __break(0xC471u);
      JUMPOUT(0x198302238);
    }
    JSC::GetByVariant::GetByVariant((JSC::GetByVariant *)&__dst, *(const JSC::GetByVariant **)a7, v101, v102, v103, v104, v105, v106);
    v110 = JSC::DFG::ByteCodeParser::load<JSC::GetByVariant>((JSC::DFG::Graph **)a1, a3, a4, v11, (uint64_t)&__dst, v107, v108, v109);
    if (!v110)
    {
      v121 = JSC::DFG::ByteCodeParser::addToGraph(a1, v20, v12, a3, a4, 0, 0, v116);
      v119 = a2 | (((a2 >> 31) & 1) << 32);
      v120 = a1;
      goto LABEL_85;
    }
    v117 = (uint64_t)v110;
    if (v654)
    {
      v331 = *(_QWORD *)(v654 + 24);
      if ((v331 & 1) != 0)
        v331 = *(_QWORD *)((v331 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v331 + 5) == 8)
      {
        v336 = *(_QWORD *)(v331 + 8);
        v337 = (unsigned int *)(v336 + 8);
        do
          v338 = __ldaxr(v337);
        while (__stlxr(v338 + 1, v337));
        v332 = *(unsigned __int8 *)(v336 + 14);
        do
        {
          v339 = __ldaxr(v337);
          v340 = v339 - 1;
        }
        while (__stlxr(v340, v337));
        if (!v340)
        {
          atomic_store(1u, (unsigned int *)(v336 + 8));
          (*(void (**)(uint64_t))(*(_QWORD *)v336 + 32))(v336);
        }
      }
      else
      {
        v332 = *(unsigned __int8 *)(v331 + 64);
      }
      if (v332)
      {
        v333 = a2 | (((a2 >> 31) & 1) << 32);
        if (v654)
        {
          v394 = *(_QWORD *)(v654 + 24);
          if ((v394 & 1) != 0)
            v394 = *(_QWORD *)((v394 & 0xFFFFFFFFFFFFFFFELL) + 48);
          if (*(_BYTE *)(v394 + 5) == 8)
          {
            v413 = *(_QWORD *)(v394 + 8);
            v414 = (unsigned int *)(v413 + 8);
            do
              v415 = __ldaxr(v414);
            while (__stlxr(v415 + 1, v414));
            v395 = *(unsigned __int8 *)(v413 + 14);
            do
            {
              v416 = __ldaxr(v414);
              v417 = v416 - 1;
            }
            while (__stlxr(v417, v414));
            if (!v417)
            {
              atomic_store(1u, (unsigned int *)(v413 + 8));
              (*(void (**)(uint64_t))(*(_QWORD *)v413 + 32))(v413);
            }
          }
          else
          {
            v395 = *(unsigned __int8 *)(v394 + 64);
          }
          switch(v395)
          {
            case 151:
              hasExitSite = 1;
              if (a3 && (a3 & 0xFFFFFFFCFFFFFFFFLL) == 0)
                hasExitSite = JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(a1 + 280) + 32), *(_DWORD *)(a1 + 40), 9);
              v397 = __dst & 0xFFFFFFFFFFFFFFFCLL;
              if ((__dst & 1) != 0)
                v397 = *(_QWORD *)(v397 + 8);
              v398 = *(unsigned __int8 *)(v397 + 9);
              v399 = v398 - 39;
              v400 = v398 - 38;
              if (v399 >= 0xC)
                v400 = 0;
              v401 = JSC::DFG::toArrayType(v400);
              v408 = JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(a1 + 280) + 32), *(_DWORD *)(a1 + 40), 29);
              v409 = (unsigned int *)(__dst & 0xFFFFFFFFFFFFFFFCLL);
              if ((__dst & 1) != 0)
              {
                if (*v409)
                {
                  v523 = 0;
                  do
                  {
                    v524 = *(_QWORD *)&v409[2 * v523 + 2];
                    v525 = *(unsigned __int8 *)(v524 + 9);
                    v526 = v525 - 39;
                    v527 = v525 - 38;
                    if (v526 >= 0xC)
                      v527 = 0;
                    LODWORD(v401) = JSC::DFG::refineTypedArrayType(v401, v527);
                    v408 |= *(_BYTE *)(16 * *(unsigned int *)(v524 + 76) + 0xF4);
                    ++v523;
                  }
                  while (v523 < *v409);
                }
              }
              else if (v409)
              {
                v410 = *((unsigned __int8 *)v409 + 9);
                v411 = v410 - 39;
                v412 = v410 - 38;
                if (v411 >= 0xC)
                  v412 = 0;
                LODWORD(v401) = JSC::DFG::refineTypedArrayType(v401, v412);
                v408 |= *(_BYTE *)(16 * v409[19] + 0xF4);
              }
              if (*(unsigned __int16 *)(v117 + 18) <= 2u
                && ((v528 = **(_QWORD **)(v117 + 72)) != 0 ? (v529 = (v528 & 0xFFFE000000000002) == 0) : (v529 = 0),
                    v529 && *(_BYTE *)(v528 + 5) == 5 && (v530 = *(_QWORD *)(v528 + 8)) != 0))
              {
                v531 = JSC::DFG::ByteCodeParser::weakJSConstant(a1, v530, v402, v403, v404, v405, v406, v407);
              }
              else
              {
                v531 = JSC::DFG::ByteCodeParser::addToGraph(a1, 150, v117, 0, 0, v405, v406, v407);
              }
              v538 = (uint64_t)v531;
              v539 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 24), v654, v532, v533, v534, v535, v536, v537);
              JSC::DFG::ByteCodeParser::addToGraph(a1, 182, (uint64_t)v539, v538, 0, 0, v540, v541);
              v542 = 0x10000;
              if (hasExitSite)
                v542 = 536936448;
              v521 = v542 | v401 | ((unint64_t)(v408 != 0) << 30);
              if (hasExitSite)
                v522 = 160;
              else
                v522 = 158;
              goto LABEL_512;
            case 152:
              v633 = 1;
              if (a3 && (a3 & 0xFFFFFFFCFFFFFFFFLL) == 0)
                v633 = JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(a1 + 280) + 32), *(_DWORD *)(a1 + 40), 9);
              v445 = __dst & 0xFFFFFFFFFFFFFFFCLL;
              if ((__dst & 1) != 0)
                v445 = *(_QWORD *)(v445 + 8);
              v446 = *(unsigned __int8 *)(v445 + 9) - 39;
              v631 = 0;
              v447 = 9;
              v448 = 6;
              v449 = 4;
              v450 = 1;
              v451 = 1;
              switch(v446)
              {
                case 0:
                  break;
                case 1:
                  v631 = 0;
                  v450 = 2;
                  break;
                case 2:
                  v631 = 0;
                  v450 = 3;
                  break;
                case 3:
                  goto LABEL_574;
                case 4:
                  v449 = 5;
LABEL_574:
                  v451 = 0;
                  v631 = 1;
                  v450 = v449;
                  break;
                case 5:
                  goto LABEL_576;
                case 6:
                  v448 = 7;
                  goto LABEL_576;
                case 7:
                  v448 = 8;
LABEL_576:
                  v451 = 0;
                  v631 = 2;
                  v450 = v448;
                  break;
                case 8:
                  goto LABEL_602;
                case 9:
                  v447 = 10;
                  goto LABEL_602;
                case 10:
                  v447 = 11;
LABEL_602:
                  v451 = 0;
                  v631 = 3;
                  v450 = v447;
                  break;
                case 11:
                  v631 = 0;
                  v450 = 12;
                  break;
                default:
                  v450 = 0;
                  v631 = 0;
                  v451 = 1;
                  break;
              }
              v452 = JSC::DFG::toArrayType(v450);
              v459 = JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(a1 + 280) + 32), *(_DWORD *)(a1 + 40), 29);
              v460 = (unsigned int *)(__dst & 0xFFFFFFFFFFFFFFFCLL);
              if ((__dst & 1) != 0)
              {
                if (*v460)
                {
                  v550 = 0;
                  do
                  {
                    v551 = *(_QWORD *)&v460[2 * v550 + 2];
                    v552 = *(unsigned __int8 *)(v551 + 9);
                    v553 = v552 - 39;
                    v554 = v552 - 38;
                    if (v553 >= 0xC)
                      v554 = 0;
                    LODWORD(v452) = JSC::DFG::refineTypedArrayType(v452, v554);
                    v459 |= *(_BYTE *)(16 * *(unsigned int *)(v551 + 76) + 0xF4);
                    ++v550;
                  }
                  while (v550 < *v460);
                }
              }
              else if (v460)
              {
                v461 = *((unsigned __int8 *)v460 + 9);
                v462 = v461 - 39;
                v463 = v461 - 38;
                if (v462 >= 0xC)
                  v463 = 0;
                LODWORD(v452) = JSC::DFG::refineTypedArrayType(v452, v463);
                v459 |= *(_BYTE *)(16 * v460[19] + 0xF4);
              }
              if (*(unsigned __int16 *)(v117 + 18) <= 2u
                && ((v555 = **(_QWORD **)(v117 + 72)) != 0 ? (v556 = (v555 & 0xFFFE000000000002) == 0) : (v556 = 0),
                    v556 && *(_BYTE *)(v555 + 5) == 5 && (v557 = *(_QWORD *)(v555 + 8)) != 0))
              {
                v558 = JSC::DFG::ByteCodeParser::weakJSConstant(a1, v557, v453, v454, v455, v456, v457, v458);
              }
              else
              {
                v558 = JSC::DFG::ByteCodeParser::addToGraph(a1, 150, v117, 0, 0, v456, v457, v458);
              }
              v565 = (uint64_t)v558;
              v566 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 24), v654, v559, v560, v561, v562, v563, v564);
              JSC::DFG::ByteCodeParser::addToGraph(a1, 182, (uint64_t)v566, v565, 0, 0, v567, v568);
              v571 = 0x10000;
              if (v633)
              {
                v571 = 536936448;
                v572 = 160;
              }
              else
              {
                v572 = 158;
              }
              v573 = JSC::DFG::ByteCodeParser::addToGraph(a1, v572, v571 | v452 | ((unint64_t)(v459 != 0) << 30), a4, 0, 0, v569, v570);
              *(_BYTE *)(a1 + 64) = 1;
              JSC::DFG::ByteCodeParser::addToGraph(a1, 22, 0, 0, 0, v574, v575, v576);
              if (v451)
              {
                v544 = a1;
                v545 = v333;
                v543 = (uint64_t)v573;
                goto LABEL_514;
              }
              v582 = JSC::DFG::Graph::freezeStrong(*(_QWORD *)(a1 + 24), (1 << v631) | 0xFFFE000000000000, v577, v578, v483, v484, v485, v486);
              v589 = JSC::DFG::ByteCodeParser::jsConstant((JSC::DFG::ByteCodeParser *)a1, (JSC::DFG::FrozenValue *)v582, v583, v584, v585, v586, v587, v588);
              v482 = JSC::DFG::ByteCodeParser::addToGraph(a1, 66, (uint64_t)v573, (uint64_t)v589, 0, v590, v591, v592);
              goto LABEL_513;
            case 153:
              v428 = 1;
              if (a3 && (a3 & 0xFFFFFFFCFFFFFFFFLL) == 0)
                v428 = JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(a1 + 280) + 32), *(_DWORD *)(a1 + 40), 9);
              v429 = __dst & 0xFFFFFFFFFFFFFFFCLL;
              if ((__dst & 1) != 0)
                v429 = *(_QWORD *)(v429 + 8);
              v430 = *(unsigned __int8 *)(v429 + 9);
              v431 = v430 - 39;
              v432 = v430 - 38;
              if (v431 >= 0xC)
                v432 = 0;
              v433 = JSC::DFG::toArrayType(v432);
              v440 = JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(a1 + 280) + 32), *(_DWORD *)(a1 + 40), 29);
              v441 = (unsigned int *)(__dst & 0xFFFFFFFFFFFFFFFCLL);
              if ((__dst & 1) != 0)
              {
                if (*v441)
                {
                  v499 = 0;
                  do
                  {
                    v500 = *(_QWORD *)&v441[2 * v499 + 2];
                    v501 = *(unsigned __int8 *)(v500 + 9);
                    v502 = v501 - 39;
                    v503 = v501 - 38;
                    if (v502 >= 0xC)
                      v503 = 0;
                    LODWORD(v433) = JSC::DFG::refineTypedArrayType(v433, v503);
                    v440 |= *(_BYTE *)(16 * *(unsigned int *)(v500 + 76) + 0xF4);
                    ++v499;
                  }
                  while (v499 < *v441);
                }
              }
              else if (v441)
              {
                v442 = *((unsigned __int8 *)v441 + 9);
                v443 = v442 - 39;
                v444 = v442 - 38;
                if (v443 >= 0xC)
                  v444 = 0;
                LODWORD(v433) = JSC::DFG::refineTypedArrayType(v433, v444);
                v440 |= *(_BYTE *)(16 * v441[19] + 0xF4);
              }
              if (*(unsigned __int16 *)(v117 + 18) <= 2u
                && ((v504 = **(_QWORD **)(v117 + 72)) != 0 ? (v505 = (v504 & 0xFFFE000000000002) == 0) : (v505 = 0),
                    v505 && *(_BYTE *)(v504 + 5) == 5 && (v506 = *(_QWORD *)(v504 + 8)) != 0))
              {
                v507 = JSC::DFG::ByteCodeParser::weakJSConstant(a1, v506, v434, v435, v436, v437, v438, v439);
              }
              else
              {
                v507 = JSC::DFG::ByteCodeParser::addToGraph(a1, 150, v117, 0, 0, v437, v438, v439);
              }
              v514 = (uint64_t)v507;
              v515 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 24), v654, v508, v509, v510, v511, v512, v513);
              JSC::DFG::ByteCodeParser::addToGraph(a1, 182, (uint64_t)v515, v514, 0, 0, v516, v517);
              v520 = 0x10000;
              if (v428)
                v520 = 536936448;
              v521 = v520 | v433 | ((unint64_t)(v440 != 0) << 30);
              if (v428)
                v522 = 163;
              else
                v522 = 162;
LABEL_512:
              v482 = JSC::DFG::ByteCodeParser::addToGraph(a1, v522, v521, a4, 0, 0, v518, v519);
              goto LABEL_513;
            case 154:
              if (*(unsigned __int16 *)(v117 + 18) <= 2u
                && ((v464 = **(_QWORD **)(v117 + 72)) != 0 ? (v465 = (v464 & 0xFFFE000000000002) == 0) : (v465 = 0),
                    v465 && *(_BYTE *)(v464 + 5) == 5 && (v466 = *(_QWORD *)(v464 + 8)) != 0))
              {
                v467 = JSC::DFG::ByteCodeParser::weakJSConstant(a1, v466, (uint64_t)v111, v112, v113, v114, v115, v116);
              }
              else
              {
                v467 = JSC::DFG::ByteCodeParser::addToGraph(a1, 150, v117, 0, 0, v114, v115, v116);
              }
              v487 = (uint64_t)v467;
              v488 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 24), v654, v468, v469, v470, v471, v472, v473);
              JSC::DFG::ByteCodeParser::addToGraph(a1, 182, (uint64_t)v488, v487, 0, 0, v489, v490);
              v496 = (__dst & 0xFFFFFFFFFFFFFFFDLL) != 0;
              v497 = (unsigned int *)(__dst & 0xFFFFFFFFFFFFFFFCLL);
              if ((__dst & 1) != 0)
              {
                v579 = *v497;
                if (!(_DWORD)v579)
                  goto LABEL_548;
                v498 = 0;
                v580 = v497 + 2;
                do
                {
                  if ((*(_WORD *)(*(_QWORD *)v580 + 12) & 0x800) != 0
                    || (v581 = *(_QWORD *)(*(_QWORD *)v580 + 48)) == 0)
                  {
                    v496 = 0;
                  }
                  else if (v498)
                  {
                    if (v498 != v581)
                      v496 = 0;
                  }
                  else
                  {
                    v498 = *(_QWORD *)(*(_QWORD *)v580 + 48);
                  }
                  v580 += 2;
                  --v579;
                }
                while (v579);
              }
              else
              {
                if (!v497)
                  goto LABEL_548;
                if ((v497[3] & 0x800) != 0)
                  goto LABEL_548;
                v498 = *((_QWORD *)v497 + 6);
                if (!v498)
                  goto LABEL_548;
              }
              if (v498 && v496)
              {
                v482 = JSC::DFG::ByteCodeParser::weakJSConstant(a1, v498, v491, v492, v493, v494, v495, v479);
                goto LABEL_513;
              }
LABEL_548:
              v480 = a1;
              v481 = 194;
LABEL_463:
              v482 = JSC::DFG::ByteCodeParser::addToGraph(v480, v481, 0, a3, a4, 0, 0, v479);
              goto LABEL_513;
            case 155:
              if (*(unsigned __int16 *)(v117 + 18) <= 2u
                && ((v418 = **(_QWORD **)(v117 + 72)) != 0 ? (v419 = (v418 & 0xFFFE000000000002) == 0) : (v419 = 0),
                    v419 && *(_BYTE *)(v418 + 5) == 5 && (v420 = *(_QWORD *)(v418 + 8)) != 0))
              {
                v421 = JSC::DFG::ByteCodeParser::weakJSConstant(a1, v420, (uint64_t)v111, v112, v113, v114, v115, v116);
              }
              else
              {
                v421 = JSC::DFG::ByteCodeParser::addToGraph(a1, 150, v117, 0, 0, v114, v115, v116);
              }
              v475 = (uint64_t)v421;
              v476 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 24), v654, v422, v423, v424, v425, v426, v427);
              JSC::DFG::ByteCodeParser::addToGraph(a1, 182, (uint64_t)v476, v475, 0, 0, v477, v478);
              v480 = a1;
              v481 = 6;
              goto LABEL_463;
            case 156:
              if ((__dst & 0xFFFFFFFFFFFFFFFDLL) == 0)
                goto LABEL_303;
              v474 = (unsigned int *)(__dst & 0xFFFFFFFFFFFFFFFCLL);
              if ((__dst & 1) != 0)
              {
                v593 = *v474;
                if ((_DWORD)v593)
                {
                  v594 = (uint64_t *)(v474 + 2);
                  v595 = 1;
                  do
                  {
                    v596 = *v594++;
                    if (*(_BYTE *)(v596 + 9) != 74)
                      v595 = 0;
                    --v593;
                  }
                  while (v593);
                  if (!v595)
                    goto LABEL_303;
                }
              }
              else if (v474 && *((_BYTE *)v474 + 9) != 74)
              {
                goto LABEL_303;
              }
              if (v651)
                v597 = (const JSC::ObjectPropertyCondition *)(v651 + 8);
              else
                v597 = 0;
              if (v651)
                v598 = v651 + 8 + 24 * *(unsigned int *)(v651 + 4);
              else
                v598 = 0;
              while (v597 != (const JSC::ObjectPropertyCondition *)v598)
              {
                JSC::DFG::ByteCodeParser::check((JSC::DFG::Graph **)a1, v597, (uint64_t)v111, v112, v113, v114, v115, v116);
                if ((v599 & 1) == 0)
                  goto LABEL_303;
                v597 = (const JSC::ObjectPropertyCondition *)((char *)v597 + 24);
              }
              v600 = JSC::DFG::Graph::addStructureSet(*(_QWORD *)(a1 + 24), &__dst, v111, v112, v113, v114, v115, v116);
              JSC::DFG::ByteCodeParser::addToGraph(a1, 132, (uint64_t)v600, a4, 0, 0, v601, v602);
              v482 = JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)a1, 164, a4 & 0xFF00FFFFFFFFFFFFLL | 0x24000000000000, 0, 0, v603, v604, v605);
LABEL_513:
              v543 = (uint64_t)v482;
              v544 = a1;
              v545 = v333;
LABEL_514:
              JSC::DFG::ByteCodeParser::set(v544, v545, v543, 0, v483, v484, v485, v486);
              v549 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 112);
              if (v549)
                ++*(_DWORD *)(v549 + 96);
              JSC::DFG::ByteCodeParser::addToGraph(a1, 23, a4, 0, 0, v546, v547, v548);
              break;
            default:
              goto LABEL_303;
          }
          goto LABEL_86;
        }
LABEL_303:
        if (!v653)
        {
          v121 = JSC::DFG::ByteCodeParser::addToGraph(a1, v20, v12, a3, a4, 0, 0, v116);
          v120 = a1;
          v119 = a2 | (((a2 >> 31) & 1) << 32);
          goto LABEL_85;
        }
      }
    }
    v118 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 112);
    if (v118)
      ++*(_DWORD *)(v118 + 96);
    if (!v653)
    {
      v119 = a2 | (((a2 >> 31) & 1) << 32);
      v120 = a1;
      v121 = (_QWORD *)v117;
LABEL_85:
      JSC::DFG::ByteCodeParser::set(v120, v119, (uint64_t)v121, 0, v113, v114, v115, v116);
      goto LABEL_86;
    }
    if (*(unsigned __int16 *)(v117 + 18) <= 2u
      && ((v149 = **(_QWORD **)(v117 + 72)) != 0 ? (v150 = (v149 & 0xFFFE000000000002) == 0) : (v150 = 0),
          v150 && *(_BYTE *)(v149 + 5) == 5 && (v151 = *(_QWORD *)(v149 + 8)) != 0))
    {
      v152 = JSC::DFG::ByteCodeParser::weakJSConstant(a1, v151, (uint64_t)v111, v112, v113, v114, v115, v116);
    }
    else
    {
      v152 = JSC::DFG::ByteCodeParser::addToGraph(a1, 150, v117, 0, 0, v114, v115, v116);
    }
    v162 = (uint64_t)v152;
    v163 = *(_QWORD *)(a1 + 280);
    v164 = *(_QWORD *)(v163 + 24);
    v165 = *(_DWORD *)(*(_QWORD *)(v163 + 16) + 20) & 0xFFFFFFFE;
    v166 = (char **)(-8 - v165);
    v167 = -8 - v165;
    if (v164)
      v167 = (_DWORD)v166
           + (HIDWORD(*(_QWORD *)(v164 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v164 + 24) >> 28) >> 24 << 20));
    v168 = ~v167;
    if (*(_DWORD *)(a1 + 260) < ~v167)
    {
      *(_DWORD *)(a1 + 260) = v168;
      v169 = *(_QWORD *)(a1 + 24);
      LODWORD(v170) = *(_DWORD *)(v169 + 60);
      if ((_DWORD)v170)
      {
        v171 = 0;
        do
        {
          if (v170 <= v171)
          {
            __break(0xC471u);
            JUMPOUT(0x1983022B8);
          }
          JSC::DFG::BasicBlock::ensureLocals(*(JSC::DFG::BasicBlock **)(*(_QWORD *)(v169 + 48) + 8 * v171++), v168);
          v169 = *(_QWORD *)(a1 + 24);
          v170 = *(unsigned int *)(v169 + 60);
        }
        while (v171 < v170);
      }
    }
    JSC::DFG::ByteCodeParser::set(a1, (-3 - v165) | ((unint64_t)((-3 - v165) >> 31) << 32), a4, 2, v153, v154, v155, v156);
    *(_BYTE *)(a1 + 64) = 1;
    JSC::DFG::ByteCodeParser::addToGraph(a1, 22, 0, 0, 0, v172, v173, v174);
    v175 = v653;
    v176 = *(unsigned int *)(v653 + 12);
    v634 = (WTF *)v637;
    v635 = 1;
    v636 = v176;
    if (v176 >= 2)
    {
      if (v176 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1983022E4);
      }
      v177 = (WTF *)WTF::fastMalloc((WTF *)(8 * v176));
      v635 = v176;
      v634 = v177;
      v176 = *(unsigned int *)(v175 + 12);
    }
    else
    {
      v177 = (WTF *)v637;
    }
    if ((_DWORD)v176)
    {
      v185 = *(uint64_t **)v175;
      v186 = 8 * v176;
      do
      {
        v187 = *v185++;
        *(_QWORD *)v177 = v187;
        v177 = (WTF *)((char *)v177 + 8);
        v186 -= 8;
      }
      while (v186);
    }
    v637[2] = *(_DWORD *)(v175 + 24);
    JSC::DFG::ByteCodeParser::handleCall(a1, a2 | (((a2 >> 31) & 1) << 32), 241, 6, a9, v162, 1, v166, (uint64_t **)&v634, a3, 0);
    v178 = v634;
    if (v637 != (_DWORD *)v634 && v634 != 0)
    {
      v634 = 0;
      v635 = 0;
      WTF::fastFree((unint64_t)v178, v122, v123, v124, v125, v126, v127, v128);
    }
LABEL_86:
    v129 = v655;
    v655 = 0;
    if (v129)
      WTF::fastFree(v129, v122, v123, v124, v125, v126, v127, v128);
    v130 = v653;
    v653 = 0;
    if (v130)
    {
      v131 = *(_QWORD *)v130;
      if (v130 + 16 != *(_QWORD *)v130 && v131 != 0)
      {
        *(_QWORD *)v130 = 0;
        *(_DWORD *)(v130 + 8) = 0;
        WTF::fastFree(v131, v122, v123, v124, v125, v126, v127, v128);
      }
      WTF::fastFree(v130, v122, v123, v124, v125, v126, v127, v128);
    }
    v133 = (unsigned int *)v651;
    v651 = 0;
    if (v133)
    {
      do
      {
        v134 = __ldaxr(v133);
        v135 = v134 - 1;
      }
      while (__stlxr(v135, v133));
      if (!v135)
      {
        atomic_store(1u, v133);
        WTF::fastFree((unint64_t)v133, v122, v123, v124, v125, v126, v127, v128);
      }
    }
    v136 = __dst;
    if ((__dst & 1) == 0)
      return;
    goto LABEL_213;
  }
  v137 = v95 << 6;
  while (v137)
  {
    v138 = *(_QWORD *)(*(_QWORD *)a7 - 40 + v137);
    v137 -= 64;
    if (v138)
      goto LABEL_113;
  }
  v139 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v140 = (*(_DWORD *)(v139 + 16) & 0xFFFFFFFE) != 4 || HIBYTE(word_1ECF4C430) == 0;
  if (v140 || v95 > dword_1ECF4C434)
  {
LABEL_113:
    v142 = a1;
    v143 = v20;
LABEL_114:
    v144 = JSC::DFG::ByteCodeParser::addToGraph(v142, v143, v12, a3, a4, 0, 0, a8);
    JSC::DFG::ByteCodeParser::set(a1, a2 | (((a2 >> 31) & 1) << 32), (uint64_t)v144, 0, v145, v146, v147, v148);
    return;
  }
  v261 = *(JSC::RecordedStatuses **)(v139 + 344);
  JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&__dst, *(_DWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24));
  v262 = JSC::RecordedStatuses::addGetByStatus(v261, (const JSC::CodeOrigin *)&__dst, (const JSC::GetByStatus *)a7);
  JSC::DFG::ByteCodeParser::addToGraph(a1, 421, (uint64_t)v262, a4, 0, 0, v263, v264);
  if ((__dst & 1) != 0 && (__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree(__dst & 0xFFFFFFFF8, v265, (uint64_t)v266, v267, v268, v269, v270, v271);
  __dst = (unint64_t)&v652;
  v651 = 2;
  v272 = *(unsigned int *)(a7 + 12);
  if ((_DWORD)v272)
  {
    v273 = *(const JSC::GetByVariant **)a7;
    v632 = (const JSC::GetByVariant *)((char *)v273 + 64 * v272);
    while (1)
    {
      v274 = *((_QWORD *)v273 + 4);
      if (v274)
      {
        v383 = *(_QWORD *)(v274 + 24);
        if ((v383 & 1) != 0)
          v383 = *(_QWORD *)((v383 & 0xFFFFFFFFFFFFFFFELL) + 48);
        if (*(_BYTE *)(v383 + 5) == 8)
        {
          v385 = *(_QWORD *)(v383 + 8);
          v386 = (unsigned int *)(v385 + 8);
          do
            v387 = __ldaxr(v386);
          while (__stlxr(v387 + 1, v386));
          v384 = *(unsigned __int8 *)(v385 + 14);
          do
          {
            v388 = __ldaxr(v386);
            v389 = v388 - 1;
          }
          while (__stlxr(v389, v386));
          if (!v389)
          {
            atomic_store(1u, (unsigned int *)(v385 + 8));
            (*(void (**)(uint64_t))(*(_QWORD *)v385 + 32))(v385);
          }
        }
        else
        {
          v384 = *(unsigned __int8 *)(v383 + 64);
        }
        if (v384)
        {
LABEL_359:
          v317 = a1;
          v318 = v20;
          goto LABEL_279;
        }
      }
      v275 = *((_QWORD *)v273 + 1);
      if (v275)
        break;
      v276 = JSC::DFG::Graph::addStructureSet(*(_QWORD *)(a1 + 24), (unint64_t *)v273, v266, v267, v268, v269, v270, v271);
      v278 = *((_DWORD *)v273 + 4);
      v638 = 0;
      v279 = *v276;
      if ((*v276 & 1) == 0 || v279 == 4)
        v638 = v279 & 0xFFFFFFFFFFFFFFFDLL;
      else
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v638, v276);
      DWORD2(v639) = v278;
      LODWORD(v640) = 2;
      v280 = HIDWORD(v651);
      if (HIDWORD(v651) == (_DWORD)v651)
      {
        v304 = WTF::Vector<JSC::DFG::MultiGetByOffsetCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__dst, HIDWORD(v651) + 1, (unint64_t)&v638, v267, v268, v269, v270, v271);
        v305 = HIDWORD(v651);
        v306 = __dst;
        v307 = (uint64_t *)(__dst + 32 * HIDWORD(v651));
        *v307 = 0;
        v308 = *(_QWORD *)v304;
        if ((*(_QWORD *)v304 & 1) == 0 || v308 == 4)
        {
          *v307 = v308 & 0xFFFFFFFFFFFFFFFDLL;
        }
        else
        {
          v618 = v305;
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v307, (_QWORD *)v304);
          v305 = v618;
        }
        v283 = *(_OWORD *)(v304 + 8);
        v284 = *(WTF **)(v304 + 24);
        v285 = v306 + 32 * v305;
      }
      else
      {
        v281 = __dst;
        v282 = (uint64_t *)(__dst + 32 * HIDWORD(v651));
        *v282 = 0;
        if ((v638 & 1) == 0 || v638 == 4)
          *v282 = v638 & 0xFFFFFFFFFFFFFFFDLL;
        else
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v282, &v638);
        v283 = v639;
        v284 = v640;
        v285 = v281 + 32 * v280;
      }
      *(_QWORD *)(v285 + 24) = v284;
      *(_OWORD *)(v285 + 8) = v283;
      ++HIDWORD(v651);
      if ((v638 & 1) != 0)
        WTF::fastFree(v638 & 0xFFFFFFFFFFFFFFFCLL, v277, (uint64_t)v266, v267, v268, v269, v270, v271);
LABEL_248:
      v273 = (const JSC::GetByVariant *)((char *)v273 + 64);
      if (v273 == v632)
        goto LABEL_276;
    }
    v286 = *(unsigned int *)(v275 + 4);
    if ((_DWORD)v286)
    {
      v287 = 0;
      v288 = (const JSC::ObjectPropertyCondition *)(v275 + 8);
      v289 = 24 * v286;
      v290 = (unint64_t)v625;
      v291 = v610;
      do
      {
        if (*((_BYTE *)v288 + 14))
        {
          v615 = v291;
          v611 = v287;
          v628 = (JSC::RecordedStatuses *)v290;
          JSC::DFG::ByteCodeParser::check((JSC::DFG::Graph **)a1, v288, (uint64_t)v266, v267, v268, v269, v270, v271);
          v290 = (unint64_t)v628;
          v287 = v611;
          v291 = v615;
          if (!v292)
            goto LABEL_359;
        }
        else
        {
          if (v287)
          {
            __break(0xC471u);
            JUMPOUT(0x198301870);
          }
          JSC::DFG::ByteCodeParser::planLoad((JSC::DFG::ByteCodeParser *)&v638, (JSC::DFG::Graph **)a1, (uint64_t)v288, v267, v268, v269, v270, v271);
          v287 = DWORD2(v639);
          if (!DWORD2(v639))
            goto LABEL_359;
          v290 = v638;
          v291 = (WTF *)v639;
        }
        v288 = (const JSC::ObjectPropertyCondition *)((char *)v288 + 24);
        v289 -= 24;
      }
      while (v289);
      v625 = (JSC::RecordedStatuses *)v290;
      v293 = v291;
      v612 = v287;
      if (v287)
        goto LABEL_264;
    }
    else
    {
      v290 = (unint64_t)v625;
      v291 = v610;
    }
    v293 = v291;
    v625 = (JSC::RecordedStatuses *)v290;
    v290 = *(_QWORD *)(a1 + 72);
    v612 = 1;
    v291 = v609;
LABEL_264:
    v294 = v290;
    v616 = v291;
    v295 = JSC::DFG::Graph::addStructureSet(*(_QWORD *)(a1 + 24), (unint64_t *)v273, v266, v267, v268, v269, v270, v271);
    v638 = 0;
    v297 = *v295;
    v610 = v293;
    if ((*v295 & 1) == 0 || v297 == 4)
      v638 = v297 & 0xFFFFFFFFFFFFFFFDLL;
    else
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v638, v295);
    v298 = v616;
    *(_QWORD *)&v639 = v294;
    *((_QWORD *)&v639 + 1) = v616;
    LODWORD(v640) = v612;
    v299 = HIDWORD(v651);
    if (HIDWORD(v651) == (_DWORD)v651)
    {
      WTF::Vector<JSC::DFG::MultiGetByOffsetCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::MultiGetByOffsetCase>((uint64_t)&__dst, (unint64_t)&v638, (uint64_t)v266, v267, v268, v269, v270, v271);
      v298 = v616;
    }
    else
    {
      v300 = __dst;
      v301 = (uint64_t *)(__dst + 32 * HIDWORD(v651));
      *v301 = 0;
      if ((v638 & 1) == 0 || v638 == 4)
      {
        *v301 = v638 & 0xFFFFFFFFFFFFFFFDLL;
      }
      else
      {
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v301, &v638);
        v298 = v616;
      }
      v302 = v300 + 32 * v299;
      v303 = v639;
      *(_QWORD *)(v302 + 24) = v640;
      *(_OWORD *)(v302 + 8) = v303;
      ++HIDWORD(v651);
    }
    if ((v638 & 1) != 0)
    {
      WTF::fastFree(v638 & 0xFFFFFFFFFFFFFFFCLL, v296, (uint64_t)v266, v267, v268, v269, v270, v271);
      v298 = v616;
    }
    v609 = v298;
    goto LABEL_248;
  }
LABEL_276:
  v309 = *(_QWORD *)(a1 + 24);
  v310 = *(_QWORD *)(*(_QWORD *)(v309 + 24) + 112);
  if (v310)
    ++*(_DWORD *)(v310 + 96);
  v12 = WTF::fastMalloc((WTF *)0x60);
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)(v12 + 8) = v12 + 24;
  *(_DWORD *)(v12 + 16) = 2;
  *(_QWORD *)(v12 + 88) = *(_QWORD *)(v309 + 536);
  *(_QWORD *)(v309 + 536) = v12;
  WTF::Vector<JSC::DFG::MultiGetByOffsetCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v12 + 8, (uint64_t **)&__dst, v311, v312, v313, v314, v315, v316);
  *(_DWORD *)v12 = v11;
  v317 = a1;
  v318 = 154;
LABEL_279:
  v319 = JSC::DFG::ByteCodeParser::addToGraph(v317, v318, v12, a3, a4, 0, 0, v271);
  JSC::DFG::ByteCodeParser::set(a1, a2 | (((a2 >> 31) & 1) << 32), (uint64_t)v319, 0, v320, v321, v322, v323);
  v324 = (uint64_t *)__dst;
  if (HIDWORD(v651))
  {
    v325 = 32 * HIDWORD(v651);
    do
    {
      if ((*v324 & 1) != 0)
        WTF::fastFree(*v324 & 0xFFFFFFFFFFFFFFFCLL, v122, v123, v124, v125, v126, v127, v128);
      v324 += 4;
      v325 -= 32;
    }
    while (v325);
    v324 = (uint64_t *)__dst;
  }
  if (&v652 != v324 && v324 != 0)
  {
    __dst = 0;
    LODWORD(v651) = 0;
    v236 = (unint64_t)v324;
    goto LABEL_214;
  }
}

JSC::GetByVariant *JSC::GetByStatus::GetByStatus(JSC::GetByStatus *this, const JSC::GetByStatus *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::GetByVariant *result;
  uint64_t v12;
  const JSC::GetByVariant *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;

  v10 = *((unsigned int *)a2 + 3);
  result = (JSC::GetByStatus *)((char *)this + 16);
  *(_QWORD *)this = result;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = v10;
  if (v10 >= 2)
  {
    if (v10 >> 26)
    {
      __break(0xC471u);
      return result;
    }
    result = (JSC::GetByVariant *)WTF::fastMalloc((WTF *)(v10 << 6));
    *((_DWORD *)this + 2) = v10;
    *(_QWORD *)this = result;
  }
  v12 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v12)
  {
    v13 = *(const JSC::GetByVariant **)a2;
    v14 = v12 << 6;
    do
    {
      result = (JSC::GetByVariant *)((char *)JSC::GetByVariant::GetByVariant(result, v13, a3, a4, a5, a6, a7, a8) + 64);
      v13 = (const JSC::GetByVariant *)((char *)v13 + 64);
      v14 -= 64;
    }
    while (v14);
  }
  v15 = (unsigned int *)*((_QWORD *)a2 + 10);
  if (v15)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  *((_QWORD *)this + 10) = v15;
  *((_WORD *)this + 44) = *((_WORD *)a2 + 44);
  return this;
}

BOOL JSC::canUseMegamorphicGetById(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;

  v2 = *(_BYTE **)(a2 + 8);
  v3 = *(unsigned int *)(a2 + 4);
  if ((*(_BYTE *)(a2 + 16) & 4) != 0)
  {
    if ((_DWORD)v3)
    {
      v4 = *v2 - 48;
      if (v4 <= 9 && (v3 < 2 || *v2 != 48))
      {
        v12 = v3 - 1;
        v13 = v2 + 1;
        while (v12)
        {
          if (v4 <= 0x19999999)
          {
            v14 = *v13 - 48;
            if (v14 <= 9)
            {
              v10 = __CFADD__(v14, 10 * v4);
              v4 = v14 + 10 * v4;
              --v12;
              ++v13;
              if (!v10)
                continue;
            }
          }
          goto LABEL_4;
        }
LABEL_32:
        if (v4 != -1)
          return 0;
      }
    }
  }
  else if ((_DWORD)v3)
  {
    v4 = *(unsigned __int16 *)v2 - 48;
    if (v4 <= 9 && (*(_WORD *)v2 != 48 || v3 <= 1))
    {
      v7 = (unsigned __int16 *)(v2 + 2);
      v8 = v3 - 1;
      while (v8)
      {
        if (v4 <= 0x19999999)
        {
          v9 = *v7 - 48;
          if (v9 <= 9)
          {
            v10 = __CFADD__(v9, 10 * v4);
            v4 = v9 + 10 * v4;
            ++v7;
            --v8;
            if (!v10)
              continue;
          }
        }
        goto LABEL_4;
      }
      goto LABEL_32;
    }
  }
LABEL_4:
  if (a1[221] != a2 && a1[246] != a2 && a1[270] != a2)
    return a1[2] != a2;
  return 0;
}

uint64_t JSC::DFG::MultiGetByOffsetCase::MultiGetByOffsetCase(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = 0;
  v5 = *a2;
  if ((*a2 & 1) == 0 || v5 == 4)
    *(_QWORD *)a1 = v5 & 0xFFFFFFFFFFFFFFFDLL;
  else
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)a1, a2);
  v6 = *a3;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 8) = v6;
  return a1;
}

uint64_t WTF::Vector<JSC::DFG::MultiGetByOffsetCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  void *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v29;

  if (a2 != (uint64_t **)a1)
  {
    v10 = *(_DWORD *)(a1 + 12);
    v11 = (void *)*((unsigned int *)a2 + 3);
    if (v10 > v11)
    {
      WTF::Vector<JSC::DFG::MultiGetByOffsetCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, v11, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 8);
      if (v11 > v12)
      {
        if (v12)
        {
          if (v10)
            WTF::Vector<JSC::DFG::MultiGetByOffsetCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, 0, a3, a4, a5, a6, a7, a8);
          v29 = *(_QWORD *)a1;
          if (a1 + 16 != *(_QWORD *)a1 && v29)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
            WTF::fastFree(v29, v11, a3, a4, a5, a6, a7, a8);
            v29 = *(_QWORD *)a1;
          }
          if (!v29)
          {
            *(_QWORD *)a1 = a1 + 16;
            *(_DWORD *)(a1 + 8) = 2;
          }
        }
        WTF::Vector<JSC::DFG::MultiGetByOffsetCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *((unsigned int *)a2 + 3), a3, a4, a5, a6, a7, a8);
      }
    }
    v13 = *a2;
    v14 = *(unsigned int *)(a1 + 12);
    v15 = *(_QWORD *)a1;
    if ((_DWORD)v14)
    {
      v16 = 32 * v14;
      do
      {
        if (v13 != (uint64_t *)v15)
        {
          if ((*(_QWORD *)v15 & 1) != 0)
            WTF::fastFree(*(_QWORD *)v15 & 0xFFFFFFFFFFFFFFFCLL, v11, a3, a4, a5, a6, a7, a8);
          v17 = *v13;
          if ((*v13 & 1) == 0 || v17 == 4)
          {
            v18 = v17 & 0xFFFFFFFFFFFFFFFDLL;
            v19 = v17 | 2;
            if ((*(_BYTE *)v15 & 2) == 0)
              v19 = v18;
            *(_QWORD *)v15 = v19;
          }
          else
          {
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v15, v13);
          }
        }
        v20 = *(_OWORD *)(v13 + 1);
        *(_DWORD *)(v15 + 24) = *((_DWORD *)v13 + 6);
        *(_OWORD *)(v15 + 8) = v20;
        v13 += 4;
        v15 += 32;
        v16 -= 32;
      }
      while (v16);
      v13 = *a2;
      LODWORD(v14) = *(_DWORD *)(a1 + 12);
      v15 = *(_QWORD *)a1;
    }
    v21 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v14 != (_DWORD)v21)
    {
      v22 = 32 * v14;
      v23 = 32 * v21;
      do
      {
        v24 = (uint64_t *)(v15 + v22);
        *(_QWORD *)(v15 + v22) = 0;
        v25 = v13[(unint64_t)v22 / 8];
        if ((v25 & 1) == 0 || v25 == 4)
          *v24 = v25 & 0xFFFFFFFFFFFFFFFDLL;
        else
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v24, &v13[(unint64_t)v22 / 8]);
        v26 = v15 + v22;
        v27 = *(_OWORD *)&v13[(unint64_t)v22 / 8 + 1];
        *(_QWORD *)(v26 + 24) = v13[(unint64_t)v22 / 8 + 3];
        *(_OWORD *)(v26 + 8) = v27;
        v15 += 32;
        v23 -= 32;
        v13 += 4;
      }
      while (v22 != v23);
      LODWORD(v14) = *((_DWORD *)a2 + 3);
    }
    *(_DWORD *)(a1 + 12) = v14;
  }
  return a1;
}

uint64_t WTF::Vector<JSC::DFG::MultiGetByOffsetCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v9 = *(unsigned int *)(a1 + 12);
  v10 = *(_QWORD **)a1;
  if ((_DWORD)v9)
  {
    v11 = 32 * v9;
    do
    {
      if ((*v10 & 1) != 0)
        WTF::fastFree(*v10 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v10 += 4;
      v11 -= 32;
    }
    while (v11);
    v10 = *(_QWORD **)a1;
  }
  if ((_QWORD *)(a1 + 16) != v10 && v10 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

WTF *JSC::DFG::ByteCodeParser::load<JSC::GetByVariant>(JSC::DFG::Graph **a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned __int16 v29;
  uint64_t *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t ConstantProperty;
  unint64_t v41;
  int v42;
  _QWORD *v43;
  JSC::DFG::Graph *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t EquivalenceWithoutBarrier;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  JSC::DFG::Graph *v64;
  uint64_t v65;
  uint64_t v66;
  const JSC::ObjectPropertyCondition *v67;
  uint64_t v68;
  char v69;
  __int128 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned __int8 *v95;
  uint64_t v96;
  unint64_t v97;
  unsigned __int8 *v98;
  uint64_t v99;
  unint64_t v100;
  _QWORD v101[2];

  JSC::DFG::ByteCodeParser::addToGraph((uint64_t)a1, 23, a3, 0, 0, a6, a7, a8);
  v13 = JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*((_QWORD *)a1[3] + 3) + 240), a4);
  if (*(unsigned __int16 *)(a3 + 18) > 2u)
    goto LABEL_6;
  v20 = *(_QWORD *)(a3 + 72);
  v21 = *(unsigned __int8 **)v20;
  v22 = *(_QWORD *)v20 && (*(_QWORD *)v20 & 0xFFFE000000000002) == 0;
  if (!v22 || v21[5] < 0x17u)
    goto LABEL_6;
  v48 = v13;
  v49 = *(_QWORD *)(v20 + 8);
  if ((*(_BYTE *)(v49 + 19) & 0xC) == 0)
  {
    v50 = *(_QWORD *)(v49 + 96);
    v51 = (v50 & 1) != 0 ? (v50 >> 1) & 3 : *(unsigned __int8 *)(v50 + 4);
    if (v51 != 2)
      goto LABEL_6;
  }
  if (*(_QWORD *)(a5 + 8))
  {
    v77 = *(_QWORD *)a5 & 0xFFFFFFFFFFFFFFFCLL;
    if ((*(_QWORD *)a5 & 1) != 0)
    {
      v86 = v77 + 8;
      v78 = *(_QWORD *)(*(_QWORD *)(v77 + 8) + 48);
      if (v78 == 2)
        v78 = 0;
      v87 = *(_DWORD *)v77;
      if (v87 <= 1)
        v87 = 1;
      v88 = 1;
      while (v87 != v88)
      {
        v89 = *(_QWORD *)(*(_QWORD *)(v86 + 8 * v88) + 48);
        if (v89 == 2)
          v89 = 0;
        ++v88;
        if (v89 != v78)
          goto LABEL_6;
      }
    }
    else
    {
      v78 = *(_QWORD *)(v77 + 48);
      if (v78 == 2)
        v78 = 0;
    }
    v98 = v21;
    v99 = v13 | 0x2000000000000;
    v100 = v78;
LABEL_59:
    JSC::DFG::ByteCodeParser::check(a1, (const JSC::ObjectPropertyCondition *)&v98, (uint64_t)v14, v15, v16, v17, v18, v19);
    v80 = v79 ^ 1;
    goto LABEL_60;
  }
  v52 = *(unsigned int *)(a5 + 16);
  v53 = 16 * (*(_DWORD *)v21 & 0xFFFFFFFE);
  LODWORD(v95) = 0;
  if (JSC::Structure::getConcurrently(v53, (_DWORD *)v13, &v95, v15, v16, v17, v18, v19) == (_DWORD)v52)
  {
    v54 = (unsigned int *)(*(_QWORD *)a5 & 0xFFFFFFFFFFFFFFFCLL);
    if ((*(_QWORD *)a5 & 1) != 0)
    {
      v81 = *v54;
      if (!(_DWORD)v81)
        goto LABEL_68;
      if (*((_QWORD *)v54 + 1) != v53)
      {
        v82 = 0;
        v83 = v54 + 4;
        while (v81 - 1 != v82)
        {
          v84 = *(_QWORD *)&v83[2 * v82++];
          if (v84 == v53)
          {
            if (v82 < v81)
              goto LABEL_39;
            goto LABEL_68;
          }
        }
        goto LABEL_68;
      }
    }
    else if (v54 != (unsigned int *)v53)
    {
      goto LABEL_68;
    }
LABEL_39:
    v98 = v21;
    v99 = v48;
    v100 = v52 | ((unint64_t)v95 << 32);
    if ((v48 & 0xFFFFFFFFFFFFFFLL) != 0)
    {
      v101[0] = v48;
      v101[1] = v52 | ((unint64_t)v95 << 32);
      EquivalenceWithoutBarrier = JSC::PropertyCondition::attemptToMakeEquivalenceWithoutBarrier((JSC::PropertyCondition *)v101, (JSC::JSObject *)v21, (uint64_t)v14, v15, v16, v17, v18, v19);
      if ((EquivalenceWithoutBarrier & 0xFFFFFFFFFFFFFFLL) != 0)
      {
        v95 = v98;
        v96 = EquivalenceWithoutBarrier;
        v97 = v56;
      }
      else
      {
        v95 = 0;
        v96 = 0;
        v97 = 0;
      }
      JSC::DFG::Graph::watchCondition(a1[3], (const JSC::ObjectPropertyCondition *)&v95, v57, v58, v59, v60, v61, v62);
      if ((v63 & 1) != 0)
      {
        v41 = v97;
        return JSC::DFG::ByteCodeParser::weakJSConstant((uint64_t)a1, v41, (uint64_t)v14, v15, v16, v17, v18, v19);
      }
      goto LABEL_59;
    }
  }
LABEL_68:
  v80 = 1;
LABEL_60:
  if (v80)
  {
LABEL_6:
    v23 = JSC::DFG::Graph::addStructureSet((uint64_t)a1[3], (unint64_t *)a5, v14, v15, v16, v17, v18, v19);
    JSC::DFG::ByteCodeParser::addToGraph((uint64_t)a1, 132, (uint64_t)v23, a3, 0, 0, v24, v25);
    v26 = 1;
    goto LABEL_7;
  }
  v26 = 0;
LABEL_7:
  if (*(_DWORD *)(a5 + 16) != -1)
  {
    if (*(_QWORD *)(a5 + 24))
    {
      v29 = 153;
      a2 = 0x80000000;
    }
    else
    {
      v27 = *(_QWORD *)(a5 + 32);
      if (v27)
      {
        v85 = *(_QWORD *)(v27 + 24);
        if ((v85 & 1) != 0)
          v85 = *(_QWORD *)((v85 & 0xFFFFFFFFFFFFFFFELL) + 48);
        if (*(_BYTE *)(v85 + 5) == 8)
        {
          v90 = *(_QWORD *)(v85 + 8);
          v91 = (unsigned int *)(v90 + 8);
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 + 1, v91));
          v28 = *(unsigned __int8 *)(v90 + 14);
          do
          {
            v93 = __ldaxr(v91);
            v94 = v93 - 1;
          }
          while (__stlxr(v94, v91));
          if (!v94)
          {
            atomic_store(1u, (unsigned int *)(v90 + 8));
            (*(void (**)(uint64_t))(*(_QWORD *)v90 + 32))(v90);
          }
        }
        else
        {
          v28 = *(unsigned __int8 *)(v85 + 64);
        }
      }
      else
      {
        v28 = 0;
      }
      if (v28)
      {
        a2 = 0x80000000;
        v29 = 153;
      }
      else
      {
        v29 = 152;
      }
    }
    v30 = (uint64_t *)(a5 + 8);
    if (*(_QWORD *)(a5 + 8))
      return (WTF *)JSC::DFG::ByteCodeParser::load(a1, a2, v30, v29, v16, v17, v18, v19);
    if (v26)
    {
      v31 = *(unsigned __int16 *)(a3 + 18);
      if (v31 > 0xB5)
      {
        if (v31 == 182 || v31 == 355 || v31 == 348)
        {
LABEL_18:
          v32 = (uint64_t)a1[3];
          if (v31 == 355 || v31 == 348)
          {
            v33 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
            {
              JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
              LODWORD(qword_1EE342DB8) = 0;
            }
          }
          else
          {
            v33 = *(uint64_t **)(a3 + 72);
          }
          v34 = *v33;
          v35 = JSC::DFG::Graph::addStructureSet(v32, (unint64_t *)a5, (unint64_t *)v30, v15, v16, v17, v18, v19);
          ConstantProperty = JSC::DFG::Graph::tryGetConstantProperty(v32, v34, (unint64_t *)v35, *(unsigned int *)(a5 + 16), v36, v37, v38, v39);
          if (ConstantProperty)
          {
            v41 = ConstantProperty;
            return JSC::DFG::ByteCodeParser::weakJSConstant((uint64_t)a1, v41, (uint64_t)v14, v15, v16, v17, v18, v19);
          }
        }
      }
      else if (v31 < 3)
      {
        goto LABEL_18;
      }
    }
    v42 = *(_DWORD *)(a5 + 16);
    v43 = (_QWORD *)a3;
    if (v42 >= 64)
      v43 = JSC::DFG::ByteCodeParser::addToGraph((uint64_t)a1, 138, a3, 0, 0, v17, v18, v19);
    v44 = a1[3];
    v45 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v45 = 0;
    *(_QWORD *)(v45 + 8) = 0;
    *(_QWORD *)(v45 + 8) = *((_QWORD *)v44 + 54);
    *((_QWORD *)v44 + 54) = v45;
    *(_DWORD *)v45 = v42;
    *(_DWORD *)(v45 + 4) = a4;
    return (WTF *)JSC::DFG::ByteCodeParser::addToGraph((uint64_t)a1, v29, v45, a2, (uint64_t)v43, a3, 0, v46);
  }
  v64 = a1[3];
  if (((*(_DWORD *)(*((_QWORD *)v64 + 3) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    v65 = *(_QWORD *)(a5 + 8);
    if (!v65)
    {
LABEL_54:
      v70 = JSC::DFG::Graph::freezeStrong((uint64_t)v64, 0xAuLL, (uint64_t)v14, v15, v16, v17, v18, v19);
      return JSC::DFG::ByteCodeParser::jsConstant((JSC::DFG::ByteCodeParser *)a1, (JSC::DFG::FrozenValue *)v70, v71, v72, v73, v74, v75, v76);
    }
    v66 = *(unsigned int *)(v65 + 4);
    if ((_DWORD)v66)
    {
      v67 = (const JSC::ObjectPropertyCondition *)(v65 + 8);
      v68 = 24 * v66;
      while (1)
      {
        JSC::DFG::Graph::watchCondition(v64, v67, (uint64_t)v14, v15, v16, v17, v18, v19);
        if ((v69 & 1) == 0)
          break;
        v67 = (const JSC::ObjectPropertyCondition *)((char *)v67 + 24);
        v68 -= 24;
        if (!v68)
        {
          v64 = a1[3];
          goto LABEL_54;
        }
      }
    }
  }
  return 0;
}

void JSC::DFG::ByteCodeParser::handleDeleteById(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int *a6, unsigned __int8 a7, uint64_t a8)
{
  unsigned int v12;
  int v15;
  unint64_t v16;
  unint64_t v17;
  JSC::RecordedStatuses *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  JSC::RecordedStatuses *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  int v115;
  int v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  WTF *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;

  if (*((_BYTE *)a6 + 56) != 1)
    goto LABEL_25;
  v12 = a6[3];
  if (!v12 || byte_1ECF4C42A == 0)
    goto LABEL_25;
  if (v12 < 2)
  {
    v15 = **(unsigned __int8 **)a6;
    v16 = *(_QWORD *)(*(_QWORD *)a6 + 8);
    v17 = *(_QWORD *)(*(_QWORD *)a6 + 16);
    v18 = *(JSC::RecordedStatuses **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 344);
    if (v17)
    {
      v54 = *(_DWORD *)(*(_QWORD *)a6 + 24);
      JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&v159, *(_DWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24));
      v55 = JSC::RecordedStatuses::addDeleteByStatus(v18, (const JSC::CodeOrigin *)&v159, (const JSC::DeleteByStatus *)a6);
      JSC::DFG::ByteCodeParser::addToGraph(a1, 424, v55, a3, 0, 0, v56, v57);
      if ((v159 & 1) != 0 && (v159 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v159 & 0xFFFFFFFF8, v58, (uint64_t)v59, v60, v61, v62, v63, v64);
      v65 = *(_QWORD *)(a1 + 24);
      v159 = v16;
      v66 = JSC::DFG::Graph::addStructureSet(v65, &v159, v59, v60, v61, v62, v63, v64);
      JSC::DFG::ByteCodeParser::addToGraph(a1, 132, (uint64_t)v66, a3, 0, 0, v67, v68);
      if ((v159 & 1) != 0)
        WTF::fastFree(v159 & 0xFFFFFFFFFFFFFFFCLL, v69, v70, v71, v72, v73, v74, v75);
      v76 = *(_QWORD *)(a1 + 24);
      v77 = JSC::DFG::Graph::registerStructure(v76, v16, (int *)&v159, v71, v72, v73, v74, v75);
      v83 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(a1 + 24), v17, (int *)&v159, v78, v79, v80, v81, v82);
      v87 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v87 = v77;
      v87[1] = v83;
      v87[2] = 0;
      v87[2] = *(_QWORD *)(v76 + 512);
      *(_QWORD *)(v76 + 512) = v87;
      v88 = (_QWORD *)a3;
      if (v54 >= 64)
        v88 = JSC::DFG::ByteCodeParser::addToGraph(a1, 138, a3, 0, 0, v84, v85, v86);
      v89 = *(_QWORD *)(a1 + 24);
      v90 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v90 = 0;
      *(_QWORD *)(v90 + 8) = 0;
      *(_QWORD *)(v90 + 8) = *(_QWORD *)(v89 + 432);
      *(_QWORD *)(v89 + 432) = v90;
      *(_DWORD *)v90 = v54;
      *(_DWORD *)(v90 + 4) = a5;
      v97 = JSC::DFG::ByteCodeParser::jsConstant((uint64_t *)a1, 0, v91, v92, v93, v94, v95, v96);
      JSC::DFG::ByteCodeParser::addToGraph(a1, 155, v90, (uint64_t)v88, a3, (uint64_t)v97, v98, v99);
      JSC::DFG::ByteCodeParser::addToGraph(a1, 135, (uint64_t)v87, a3, 0, 0, v100, v101);
    }
    else
    {
      JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&v159, *(_DWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24));
      v19 = JSC::RecordedStatuses::addDeleteByStatus(v18, (const JSC::CodeOrigin *)&v159, (const JSC::DeleteByStatus *)a6);
      JSC::DFG::ByteCodeParser::addToGraph(a1, 424, v19, a3, 0, 0, v20, v21);
      if ((v159 & 1) != 0 && (v159 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v159 & 0xFFFFFFFF8, v22, (uint64_t)v23, v24, v25, v26, v27, v28);
      v29 = *(_QWORD *)(a1 + 24);
      v159 = v16;
      v30 = JSC::DFG::Graph::addStructureSet(v29, &v159, v23, v24, v25, v26, v27, v28);
      JSC::DFG::ByteCodeParser::addToGraph(a1, 132, (uint64_t)v30, a3, 0, 0, v31, v32);
      if ((v159 & 1) != 0)
        WTF::fastFree(v159 & 0xFFFFFFFFFFFFFFFCLL, v33, v34, v35, v36, v37, v38, v39);
    }
    if (v15)
      v40 = 7;
    else
      v40 = 6;
    v41 = JSC::DFG::ByteCodeParser::jsConstant((uint64_t *)a1, v40, v34, v35, v36, v37, v38, v39);
    goto LABEL_15;
  }
  v46 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v47 = (*(_DWORD *)(v46 + 16) & 0xFFFFFFFE) != 4 || HIBYTE(word_1ECF4C430) == 0;
  if (v47 || v12 > dword_1ECF4C434)
  {
LABEL_25:
    v49 = JSC::DFG::ByteCodeParser::addToGraph(a1, 130, a4, a7, a3, 0, 0, a8);
    JSC::DFG::ByteCodeParser::set(a1, a2 | (((a2 >> 31) & 1) << 32), (uint64_t)v49, 0, v50, v51, v52, v53);
    return;
  }
  v102 = *(JSC::RecordedStatuses **)(v46 + 344);
  JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&v159, *(_DWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24));
  v103 = JSC::RecordedStatuses::addDeleteByStatus(v102, (const JSC::CodeOrigin *)&v159, (const JSC::DeleteByStatus *)a6);
  JSC::DFG::ByteCodeParser::addToGraph(a1, 424, v103, a3, 0, 0, v104, v105);
  if ((v159 & 1) != 0 && (v159 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v159 & 0xFFFFFFFF8, v106, v107, v108, v109, v110, v111, v112);
  v113 = a6[3];
  if (!(_DWORD)v113)
    goto LABEL_52;
  v114 = 0;
  v115 = 0;
  v116 = 0;
  v117 = 40 * v113;
  v118 = (unint64_t *)(*(_QWORD *)a6 + 16);
  do
  {
    JSC::DFG::Graph::registerStructure(*(_QWORD *)(a1 + 24), *(v118 - 1), (int *)&v159, v108, v109, v110, v111, v112);
    if (*v118)
    {
      JSC::DFG::Graph::registerStructure(*(_QWORD *)(a1 + 24), *v118, (int *)&v159, v108, v109, v110, v111, v112);
      v114 = 1;
    }
    else
    {
      v116 |= *((_BYTE *)v118 - 16) == 0;
      v115 |= *((_BYTE *)v118 - 16) != 0;
    }
    v118 += 5;
    v117 -= 40;
  }
  while (v117);
  if ((v114 & 1) != 0 || ((v116 ^ v115) & 1) == 0)
  {
LABEL_52:
    v127 = *(_QWORD *)(a1 + 24);
    v128 = WTF::fastMalloc((WTF *)0x70);
    *(_OWORD *)v128 = 0u;
    *(_OWORD *)(v128 + 16) = 0u;
    *(_OWORD *)(v128 + 32) = 0u;
    *(_OWORD *)(v128 + 48) = 0u;
    *(_OWORD *)(v128 + 64) = 0u;
    *(_OWORD *)(v128 + 80) = 0u;
    *(_QWORD *)(v128 + 96) = 0;
    *(_QWORD *)(v128 + 104) = 0;
    *(_QWORD *)(v128 + 8) = v128 + 24;
    *(_DWORD *)(v128 + 16) = 2;
    *(_QWORD *)(v128 + 104) = *(_QWORD *)(v127 + 552);
    *(_QWORD *)(v127 + 552) = v128;
    WTF::Vector<JSC::DeleteByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=<1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(v128 + 8, (uint64_t *)a6, v129, v130, v131, v132, v133, v134);
    *(_DWORD *)v128 = a5;
    v41 = JSC::DFG::ByteCodeParser::addToGraph(a1, 157, v128, a3, 0, 0, v135, v136);
LABEL_15:
    JSC::DFG::ByteCodeParser::set(a1, a2 | (((a2 >> 31) & 1) << 32), (uint64_t)v41, 0, v42, v43, v44, v45);
    return;
  }
  v159 = 0;
  v120 = a6[3];
  if ((_DWORD)v120)
  {
    v121 = 40 * v120;
    v122 = (uint64_t *)(*(_QWORD *)a6 + 8);
    do
    {
      v123 = *v122;
      if ((v159 & 1) != 0)
      {
        WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine((uint64_t *)&v159, *v122);
      }
      else if (v123 != (v159 & 0xFFFFFFFFFFFFFFFCLL))
      {
        if ((v159 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        {
          v125 = WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v125 = 0x400000002;
          v126 = v159;
          *(_QWORD *)(v125 + 8) = v159 & 0xFFFFFFFFFFFFFFFCLL;
          *(_QWORD *)(v125 + 16) = v123;
          v124 = v126 & 2 | (unint64_t)v125 | 1;
        }
        else
        {
          v124 = v159 & 2 | v123;
        }
        v159 = v124;
      }
      v122 += 5;
      v121 -= 40;
    }
    while (v121);
  }
  v137 = JSC::DFG::Graph::addStructureSet(*(_QWORD *)(a1 + 24), &v159, v119, v108, v109, v110, v111, v112);
  JSC::DFG::ByteCodeParser::addToGraph(a1, 132, (uint64_t)v137, a3, 0, 0, v138, v139);
  if (a6[3])
  {
    if (**(_BYTE **)a6)
      v146 = 7;
    else
      v146 = 6;
    v147 = JSC::DFG::ByteCodeParser::jsConstant((uint64_t *)a1, v146, v140, v141, v142, v143, v144, v145);
    JSC::DFG::ByteCodeParser::set(a1, a2 | (((a2 >> 31) & 1) << 32), (uint64_t)v147, 0, v148, v149, v150, v151);
    if ((v159 & 1) != 0)
      WTF::fastFree(v159 & 0xFFFFFFFFFFFFFFFCLL, v152, v153, v154, v155, v156, v157, v158);
  }
  else
  {
    __break(0xC471u);
  }
}

unint64_t WTF::Vector<JSC::DeleteByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=<1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(unint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v10 = *((_DWORD *)a2 + 3);
  if (*(_DWORD *)(a1 + 12) > v10)
  {
    *(_DWORD *)(a1 + 12) = v10;
  }
  else if (v10 <= *(_DWORD *)(a1 + 8))
  {
    v10 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    WTF::Vector<JSC::DeleteByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, a2, a3, a4, a5, a6, a7, a8);
    WTF::Vector<JSC::DeleteByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *((unsigned int *)a2 + 3));
    v10 = *(_DWORD *)(a1 + 12);
  }
  v11 = *a2;
  v12 = *(_QWORD *)a1;
  if (v10)
  {
    v13 = 40 * v10;
    do
    {
      JSC::DeleteByVariant::operator=(v12, v11);
      v11 += 40;
      v12 += 40;
      v13 -= 40;
    }
    while (v13);
    v11 = *a2;
    v14 = *(_DWORD *)(a1 + 12);
    v12 = *(_QWORD *)a1;
  }
  else
  {
    v14 = 0;
  }
  v15 = *((unsigned int *)a2 + 3);
  if (v14 != (_DWORD)v15)
  {
    v16 = 40 * v14;
    v17 = 40 * v15;
    do
    {
      v18 = v12 + v16;
      *(_QWORD *)(v18 + 32) = 0;
      *(_QWORD *)(v18 + 32) = *(_QWORD *)(v11 + v16 + 32);
      *(_BYTE *)v18 = *(_BYTE *)(v11 + v16);
      *(_OWORD *)(v18 + 8) = *(_OWORD *)(v11 + v16 + 8);
      *(_DWORD *)(v18 + 24) = *(_DWORD *)(v11 + v16 + 24);
      v12 += 40;
      v11 += 40;
      v17 -= 40;
    }
    while (v16 != v17);
    v14 = v15;
  }
  *(_DWORD *)(a1 + 12) = v14;
  return a1;
}

uint64_t JSC::DFG::ByteCodeParser::handleInByAsMatchStructure(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const JSC::ObjectPropertyCondition *v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 *v34;
  JSC::RecordedStatuses *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  int v52;

  if (*(_DWORD *)a4 != 1 || byte_1ECF4C42A == 0)
    return 0;
  v10 = *(_QWORD *)(a1 + 24);
  v11 = WTF::fastMalloc((WTF *)0x38);
  v18 = v11;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_QWORD *)v11 = v11 + 16;
  *(_QWORD *)(v11 + 8) = 2;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 48) = *(_QWORD *)(v10 + 560);
  *(_QWORD *)(v10 + 560) = v11;
  v19 = *(unsigned int *)(a4 + 20);
  if ((_DWORD)v19)
  {
    v20 = *(_QWORD *)(a4 + 8);
    v21 = v20 + 32 * v19;
    do
    {
      v22 = *(_QWORD *)(v20 + 8);
      if (v22)
        v23 = (const JSC::ObjectPropertyCondition *)(v22 + 8);
      else
        v23 = 0;
      if (v22)
        v24 = v22 + 8 + 24 * *(unsigned int *)(v22 + 4);
      else
        v24 = 0;
      while (v23 != (const JSC::ObjectPropertyCondition *)v24)
      {
        JSC::DFG::ByteCodeParser::check((JSC::DFG::Graph **)a1, v23, v12, v13, v14, v15, v16, v17);
        if ((v25 & 1) == 0)
          return 0;
        v23 = (const JSC::ObjectPropertyCondition *)((char *)v23 + 24);
      }
      v26 = *(_QWORD *)v20;
      if ((*(_QWORD *)v20 & 1) != 0)
        v27 = *(unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
      else
        v27 = v26 > 3;
      if (v27)
      {
        v28 = 0;
        v29 = 8 * v27;
        do
        {
          v30 = *(_QWORD *)v20 & 0xFFFFFFFFFFFFFFFCLL;
          if ((*(_QWORD *)v20 & 1) != 0)
            v30 = *(_QWORD *)(v30 + v28 + 8);
          *(_QWORD *)&v51 = 0;
          *(_QWORD *)&v51 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(a1 + 24), v30, &v52, v13, v14, v15, v16, v17);
          BYTE8(v51) = *(_DWORD *)(v20 + 16) != -1;
          v31 = *(unsigned int *)(v18 + 12);
          if ((_DWORD)v31 == *(_DWORD *)(v18 + 8))
          {
            v34 = (__int128 *)WTF::Vector<JSC::DFG::MatchStructureVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18, (void *)(v31 + 1), (unint64_t)&v51, v13, v14, v15, v16, v17);
            v31 = *(unsigned int *)(v18 + 12);
            v32 = *(_QWORD *)v18;
            v33 = *v34;
          }
          else
          {
            v32 = *(_QWORD *)v18;
            v33 = v51;
          }
          *(_OWORD *)(v32 + 16 * v31) = v33;
          ++*(_DWORD *)(v18 + 12);
          v28 += 8;
        }
        while (v29 != v28);
      }
      v20 += 32;
    }
    while (v20 != v21);
  }
  v35 = *(JSC::RecordedStatuses **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 344);
  JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&v51, *(_DWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24));
  v36 = JSC::RecordedStatuses::addInByStatus(v35, (const JSC::CodeOrigin *)&v51, (const JSC::InByStatus *)a4);
  JSC::DFG::ByteCodeParser::addToGraph(a1, 422, v36, a3, 0, 0, v37, v38);
  if ((v51 & 1) != 0 && (v51 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v51 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
  v46 = JSC::DFG::ByteCodeParser::addToGraph(a1, 294, v18, a3, 0, 0, v44, v45);
  JSC::DFG::ByteCodeParser::set(a1, a2 | (((a2 >> 31) & 1) << 32), (uint64_t)v46, 0, v47, v48, v49, v50);
  return 1;
}

void JSC::DFG::ByteCodeParser::handleInById(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char matched;
  WTF *v20;
  uint64_t v22;
  __int16 v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  WTF *v33;
  WTF *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  int v39;
  WTF *v40;
  int v41;
  unsigned int v42;
  _BYTE v43[32];

  v39 = *a5;
  v10 = a5[5];
  v40 = (WTF *)v43;
  v41 = 1;
  v42 = v10;
  if (v10 >= 2)
  {
    if (v10 >> 27)
    {
      __break(0xC471u);
      return;
    }
    v11 = (WTF *)WTF::fastMalloc((WTF *)(32 * v10));
    v41 = v10;
    v40 = v11;
    v10 = a5[5];
  }
  else
  {
    v11 = (WTF *)v43;
  }
  if ((_DWORD)v10)
  {
    v29 = *((_QWORD *)a5 + 1);
    v30 = v29 + 32 * v10;
    do
    {
      *(_QWORD *)v11 = 0;
      if ((*(_QWORD *)v29 & 1) != 0)
        WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v11, (_QWORD *)v29);
      else
        *(_QWORD *)v11 = *(_QWORD *)v29 & 0xFFFFFFFFFFFFFFFDLL;
      v31 = *(unsigned int **)(v29 + 8);
      if (v31)
      {
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 + 1, v31));
      }
      *((_QWORD *)v11 + 1) = v31;
      *((_OWORD *)v11 + 1) = *(_OWORD *)(v29 + 16);
      v11 = (WTF *)((char *)v11 + 32);
      v29 += 32;
    }
    while (v29 != v30);
  }
  matched = JSC::DFG::ByteCodeParser::handleInByAsMatchStructure((uint64_t)a1, a2, a3, (uint64_t)&v39);
  if (v42)
  {
    v33 = v40;
    v34 = (WTF *)((char *)v40 + 32 * v42);
    do
    {
      v35 = (unsigned int *)*((_QWORD *)v33 + 1);
      *((_QWORD *)v33 + 1) = 0;
      if (v35)
      {
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          atomic_store(1u, v35);
          WTF::fastFree((unint64_t)v35, v12, v13, v14, v15, v16, v17, v18);
        }
      }
      if ((*(_QWORD *)v33 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v33 & 0xFFFFFFFFFFFFFFFCLL, v12, v13, v14, v15, v16, v17, v18);
      v33 = (WTF *)((char *)v33 + 32);
    }
    while (v33 != v34);
  }
  v20 = v40;
  if (v43 != (_BYTE *)v40 && v40 != 0)
  {
    v40 = 0;
    v41 = 0;
    WTF::fastFree((unint64_t)v20, v12, v13, v14, v15, v16, v17, v18);
  }
  if ((matched & 1) == 0)
  {
    if (*a5 == 2
      && ((a4 & 1) == 0 ? (v38 = *(_QWORD *)(a4 + 8)) : (v38 = a4 & 0xFFFFFFFFFFFFFFFELL),
          JSC::canUseMegamorphicInById(*a1, v38)))
    {
      v22 = (uint64_t)a1;
      v23 = 336;
    }
    else
    {
      v22 = (uint64_t)a1;
      v23 = 335;
    }
    v24 = JSC::DFG::ByteCodeParser::addToGraph(v22, v23, a4, a3, 0, 0, v17, v18);
    JSC::DFG::ByteCodeParser::set((uint64_t)a1, a2 | (((a2 >> 31) & 1) << 32), (uint64_t)v24, 0, v25, v26, v27, v28);
  }
}

uint64_t JSC::InByStatus::InByStatus(uint64_t this, const JSC::InByStatus *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  v3 = this;
  *(_DWORD *)this = *(_DWORD *)a2;
  v4 = *((unsigned int *)a2 + 5);
  v5 = this + 24;
  *(_QWORD *)(this + 8) = this + 24;
  *(_DWORD *)(this + 16) = 1;
  *(_DWORD *)(this + 20) = v4;
  if (v4 >= 2)
  {
    if (v4 >> 27)
    {
      __break(0xC471u);
      return this;
    }
    v5 = WTF::fastMalloc((WTF *)(32 * v4));
    *(_DWORD *)(v3 + 16) = v4;
    *(_QWORD *)(v3 + 8) = v5;
  }
  v6 = *((unsigned int *)a2 + 5);
  if ((_DWORD)v6)
  {
    v7 = *((_QWORD *)a2 + 1);
    v8 = v7 + 32 * v6;
    do
    {
      *(_QWORD *)v5 = 0;
      if ((*(_QWORD *)v7 & 1) != 0)
        WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v5, (_QWORD *)v7);
      else
        *(_QWORD *)v5 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFFDLL;
      v9 = *(unsigned int **)(v7 + 8);
      if (v9)
      {
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
      }
      *(_QWORD *)(v5 + 8) = v9;
      *(_OWORD *)(v5 + 16) = *(_OWORD *)(v7 + 16);
      v5 += 32;
      v7 += 32;
    }
    while (v7 != v8);
  }
  return v3;
}

uint64_t JSC::DFG::ByteCodeParser::handleGetScope(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v10 = JSC::DFG::ByteCodeParser::get(a1, 3uLL, a3, a4, a5, a6, a7, a8);
  if (*((unsigned __int16 *)v10 + 9) <= 2u
    && ((v16 = **((_QWORD **)v10 + 9)) != 0 ? (v17 = (v16 & 0xFFFE000000000002) == 0) : (v17 = 0),
        v17 && *(_BYTE *)(v16 + 5) == 26))
  {
    v18 = JSC::DFG::ByteCodeParser::weakJSConstant(a1, *(_QWORD *)(v16 + 16), (uint64_t)v10, v11, v12, v13, v14, v15);
  }
  else
  {
    v18 = JSC::DFG::ByteCodeParser::addToGraph(a1, 165, (uint64_t)v10, 0, 0, v13, v14, v15);
  }
  return JSC::DFG::ByteCodeParser::set(a1, a2 | (((a2 >> 31) & 1) << 32), (uint64_t)v18, 0, v19, v20, v21, v22);
}

_QWORD *JSC::DFG::ByteCodeParser::handleCheckTraps(JSC::DFG::ByteCodeParser *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8;

  v8 = 381;
  if (!byte_1ECF4C6B4)
  {
    if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
      v8 = 40;
    else
      v8 = 381;
  }
  return JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, v8, 0, 0, 0, a6, a7, a8);
}

_QWORD *JSC::DFG::ByteCodeParser::emitPutById(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, unsigned __int8 a7, uint64_t a8)
{
  __int16 v9;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;

  if ((a6 & 1) != 0)
  {
    v9 = 119;
  }
  else
  {
    v9 = 117;
    switch(*(_DWORD *)a5)
    {
      case 0:
      case 4:
      case 5:
        return JSC::DFG::ByteCodeParser::addToGraph(a1, v9, a3, a7, a2, a4, 0, a8);
      case 1:
        v11 = (unint64_t)*(unsigned int *)(a5 + 20) << 6;
        v9 = 118;
        break;
      case 2:
      case 6:
      case 7:
        goto LABEL_44;
      case 3:
        if (a3)
        {
          if ((a3 & 1) != 0)
            v13 = a3 & 0xFFFFFFFFFFFFFFFELL;
          else
            v13 = *(_QWORD *)(a3 + 8);
        }
        else
        {
          v13 = 0;
        }
        v14 = *(_BYTE **)(v13 + 8);
        v15 = *(unsigned int *)(v13 + 4);
        if ((*(_BYTE *)(v13 + 16) & 4) != 0)
        {
          if (!(_DWORD)v15)
            goto LABEL_16;
          v16 = *v14 - 48;
          if (v16 > 9 || v15 >= 2 && *v14 == 48)
            goto LABEL_16;
          v22 = v15 - 1;
          v23 = v14 + 1;
          while (v22)
          {
            if (v16 <= 0x19999999)
            {
              v24 = *v23 - 48;
              if (v24 <= 9)
              {
                v21 = __CFADD__(v24, 10 * v16);
                v16 = v24 + 10 * v16;
                --v22;
                ++v23;
                if (!v21)
                  continue;
              }
            }
            goto LABEL_16;
          }
        }
        else
        {
          if (!(_DWORD)v15)
            goto LABEL_16;
          v16 = *(unsigned __int16 *)v14 - 48;
          if (v16 > 9)
            goto LABEL_16;
          if (*(_WORD *)v14 == 48 && v15 > 1)
            goto LABEL_16;
          v18 = (unsigned __int16 *)(v14 + 2);
          v19 = v15 - 1;
          while (v19)
          {
            if (v16 <= 0x19999999)
            {
              v20 = *v18 - 48;
              if (v20 <= 9)
              {
                v21 = __CFADD__(v20, 10 * v16);
                v16 = v20 + 10 * v16;
                ++v18;
                --v19;
                if (!v21)
                  continue;
              }
            }
            goto LABEL_16;
          }
        }
        if (v16 != -1)
          goto LABEL_44;
LABEL_16:
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 41952) + 16) != v13)
        {
          v9 = 121;
          return JSC::DFG::ByteCodeParser::addToGraph(a1, v9, a3, a7, a2, a4, 0, a8);
        }
LABEL_44:
        v9 = 118;
        return JSC::DFG::ByteCodeParser::addToGraph(a1, v9, a3, a7, a2, a4, 0, a8);
      default:
        __break(0xC471u);
        JUMPOUT(0x198303B94);
    }
    while (v11)
    {
      v12 = *(_DWORD *)(*(_QWORD *)(a5 + 8) - 64 + v11) - 3;
      v11 -= 64;
      if (v12 < 3)
        return JSC::DFG::ByteCodeParser::addToGraph(a1, v9, a3, a7, a2, a4, 0, a8);
    }
    v9 = 117;
  }
  return JSC::DFG::ByteCodeParser::addToGraph(a1, v9, a3, a7, a2, a4, 0, a8);
}

void JSC::DFG::ByteCodeParser::handlePutById(JSC::DFG::ByteCodeParser *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9;
  JSC::DFG::Node *v11;
  int v15;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  JSC::RecordedStatuses *v21;
  JSC::PutByVariant *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const JSC::ObjectPropertyCondition *v44;
  uint64_t v45;
  JSC::RecordedStatuses *v46;
  JSC::PutByVariant *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  JSC::DFG::ByteCodeParser *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  JSC::RecordedStatuses *v90;
  JSC::PutByVariant *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const JSC::ObjectPropertyCondition *v101;
  const JSC::ObjectPropertyCondition *v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  unint64_t v108;
  int v109;
  JSC::DFG::ByteCodeParser *v110;
  __int16 v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  unint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WTF *v134;
  WTF *v135;
  unint64_t v136;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t *v141;
  unsigned int *v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v150;
  const JSC::ObjectPropertyCondition *v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  unsigned int v155;
  JSC::RecordedStatuses *v156;
  JSC::PutByVariant *v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  JSC::PutByVariant *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  JSC::RecordedStatuses *v187;
  JSC::PutByVariant *v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  JSC::JSObject *v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  int v213;
  int v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unsigned __int16 *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  BOOL v225;
  unint64_t v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unsigned int v235;
  int v236;
  unsigned int v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  WTF *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  WTF *v276;
  JSC::RecordedStatuses *v277;
  JSC::PutByVariant *v278;
  uint64_t v279;
  uint64_t v280;
  void *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  JSC::JSObject *v315;
  uint64_t EquivalenceWithoutBarrier;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char v328;
  unint64_t v329;
  int v330;
  unint64_t v331;
  unsigned int v332;
  unsigned int v333;
  uint64_t v334;
  unsigned __int8 v335;
  JSC::DFG::ByteCodeParser *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  uint64_t *v342;
  uint64_t *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t ConstantProperty;
  uint64_t v349;
  int v350;
  int v351;
  uint64_t *v353;
  int v354;
  uint64_t v355;
  uint64_t *__dst;
  int v357;
  int v358;
  _DWORD v359[4];
  JSC::JSObject *v360;
  uint64_t v361;
  uint64_t v362;
  WTF *v363;
  WTF *v364;
  uint64_t v365;
  WTF *v366;
  JSC::JSObject *v367;
  uint64_t v368;
  unint64_t v369;
  _QWORD v370[3];

  v9 = a7;
  v11 = (JSC::DFG::Node *)a5;
  v15 = *(_DWORD *)a6;
  if (*(_DWORD *)a6 != 1)
  {
    if (v15)
    {
      if (v15 == 2 && *(_DWORD *)(a6 + 20) == 1)
      {
        JSC::PutByVariant::PutByVariant((JSC::PutByVariant *)&v360, *(const JSC::PutByVariant **)(a6 + 8), a3, a4, a5, a6, a7, a8);
        v88 = *(_QWORD *)(*((_QWORD *)this + 3) + 24);
        v89 = *(_QWORD *)(v88 + 112);
        if (v89)
          ++*(_DWORD *)(v89 + 100);
        v90 = *(JSC::RecordedStatuses **)(v88 + 344);
        JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&v367, *((_DWORD *)this + 10), *(_QWORD *)(*((_QWORD *)this + 35) + 24));
        v91 = JSC::RecordedStatuses::addPutByStatus(v90, (const JSC::CodeOrigin *)&v367, (const JSC::PutByStatus *)a6);
        JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 423, (uint64_t)v91, a2, 0, 0, v92, v93);
        if ((v367 & 1) != 0 && ((unint64_t)v367 & 0xFFFFFFFF8) != 0)
          WTF::fastFree((unint64_t)v367 & 0xFFFFFFFF8, v94, v95, v96, v97, v98, v99, v100);
        if (v363)
          v101 = (WTF *)((char *)v363 + 8);
        else
          v101 = 0;
        if (v363)
          v102 = (WTF *)((char *)v363 + 24 * *((unsigned int *)v363 + 1) + 8);
        else
          v102 = 0;
        v103 = (uint64_t)v11;
        while (1)
        {
          if (v101 == v102)
          {
            v115 = *((_QWORD *)this + 3);
            v116 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            v116[1] = 0;
            v116[2] = 0;
            *v116 = 0;
            v116[2] = *(_QWORD *)(v115 + 616);
            *(_QWORD *)(v115 + 616) = v116;
            *v116 = v365;
            v116[1] = a3;
            v123 = JSC::DFG::Graph::addStructureSet(*((_QWORD *)this + 3), (unint64_t *)&v361, v117, v118, v119, v120, v121, v122);
            JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 132, (uint64_t)v123, a2, 0, 0, v124, v125);
            JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 256, (uint64_t)v116, 0, a2, v103, 0, v126);
            goto LABEL_67;
          }
          JSC::DFG::ByteCodeParser::check((JSC::DFG::Graph **)this, v101, v95, v96, v97, v98, v99, v100);
          if ((v104 & 1) == 0)
            break;
          v101 = (const JSC::ObjectPropertyCondition *)((char *)v101 + 24);
        }
        JSC::DFG::ByteCodeParser::emitPutById((uint64_t)this, a2, a3, (uint64_t)v11, a6, v9, a9, v100);
LABEL_67:
        v134 = v366;
        v366 = 0;
        if (v134)
          WTF::fastFree((unint64_t)v134, v127, v128, v129, v130, v131, v132, v133);
        v135 = v364;
        v364 = 0;
        if (v135)
        {
          v136 = *(_QWORD *)v135;
          if ((WTF *)((char *)v135 + 16) != *(WTF **)v135 && v136 != 0)
          {
            *(_QWORD *)v135 = 0;
            *((_DWORD *)v135 + 2) = 0;
            WTF::fastFree(v136, v127, v128, v129, v130, v131, v132, v133);
          }
          WTF::fastFree((unint64_t)v135, v127, v128, v129, v130, v131, v132, v133);
        }
        v138 = (unsigned int *)v363;
        v363 = 0;
        if (v138)
        {
          do
          {
            v139 = __ldaxr(v138);
            v140 = v139 - 1;
          }
          while (__stlxr(v140, v138));
          if (!v140)
          {
            atomic_store(1u, v138);
            WTF::fastFree((unint64_t)v138, v127, v128, v129, v130, v131, v132, v133);
          }
        }
        if ((v361 & 1) != 0)
        {
          v141 = (uint64_t *)(v361 & 0xFFFFFFFFFFFFFFFCLL);
LABEL_82:
          WTF::fastFree((unint64_t)v141, v127, v128, v129, v130, v131, v132, v133);
        }
        return;
      }
    }
    else
    {
      JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 379, 0, 0, 0, a6, a7, a8);
    }
    goto LABEL_18;
  }
  v16 = *(unsigned int *)(a6 + 20);
  if ((_DWORD)v16)
    v17 = byte_1ECF4C42A == 0;
  else
    v17 = 1;
  if (v17)
  {
LABEL_18:
    v57 = a9;
    goto LABEL_19;
  }
  v18 = a4;
  if (v16 >= 2)
  {
    v105 = *(_QWORD *)(*((_QWORD *)this + 3) + 24);
    if ((*(_DWORD *)(v105 + 16) & 0xFFFFFFFE) == 4)
    {
      v145 = (_QWORD *)(a6 + 8);
      v146 = v16 << 6;
      while (v146)
      {
        v147 = *(_DWORD *)(*(_QWORD *)(a6 + 8) - 64 + v146) - 3;
        v146 -= 64;
        if (v147 < 3)
          goto LABEL_53;
      }
      if (HIBYTE(word_1ECF4C430) && v16 <= dword_1ECF4C434)
      {
        if ((a7 & 1) == 0)
        {
          do
          {
            LODWORD(v16) = v16 - 1;
            if (*(_DWORD *)(a6 + 20) <= v16)
            {
              __break(0xC471u);
              JUMPOUT(0x198304E70);
            }
            if (*(_DWORD *)(*v145 + ((unint64_t)v16 << 6)) == 2)
            {
              v150 = *(_QWORD *)(*v145 + ((unint64_t)v16 << 6) + 24);
              if (v150)
                v151 = (const JSC::ObjectPropertyCondition *)(v150 + 8);
              else
                v151 = 0;
              if (v150)
                v152 = v150 + 8 + 24 * *(unsigned int *)(v150 + 4);
              else
                v152 = 0;
              while (v151 != (const JSC::ObjectPropertyCondition *)v152)
              {
                JSC::DFG::ByteCodeParser::check((JSC::DFG::Graph **)this, v151, a3, a4, a5, a6, a7, a8);
                if ((v153 & 1) == 0)
                {
                  v57 = a9;
                  v58 = this;
                  v59 = a2;
                  v60 = a3;
                  v61 = a5;
                  v62 = a6;
                  v63 = 0;
                  goto LABEL_21;
                }
                v151 = (const JSC::ObjectPropertyCondition *)((char *)v151 + 24);
              }
            }
          }
          while ((_DWORD)v16);
          v105 = *(_QWORD *)(*((_QWORD *)this + 3) + 24);
          v11 = (JSC::DFG::Node *)a5;
        }
        v154 = *(_QWORD *)(v105 + 112);
        if (v154)
          ++*(_DWORD *)(v154 + 100);
        v155 = v18;
        v156 = *(JSC::RecordedStatuses **)(v105 + 344);
        JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&v360, *((_DWORD *)this + 10), *(_QWORD *)(*((_QWORD *)this + 35) + 24));
        v157 = JSC::RecordedStatuses::addPutByStatus(v156, (const JSC::CodeOrigin *)&v360, (const JSC::PutByStatus *)a6);
        JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 423, (uint64_t)v157, a2, 0, 0, v158, v159);
        if ((v360 & 1) != 0 && ((unint64_t)v360 & 0xFFFFFFFF8) != 0)
          WTF::fastFree((unint64_t)v360 & 0xFFFFFFFF8, v160, v161, v162, v163, v164, v165, v166);
        v167 = (uint64_t)v11;
        v168 = *(unsigned int *)(a6 + 20);
        if ((_DWORD)v168)
        {
          v169 = *(_QWORD *)(a6 + 8);
          v170 = v169 + (v168 << 6);
          do
          {
            v171 = *(_QWORD *)(v169 + 8);
            if ((v171 & 1) != 0)
              v172 = *(unsigned int *)(v171 & 0xFFFFFFFFFFFFFFFCLL);
            else
              v172 = v171 > 3;
            if (v172)
            {
              v173 = 0;
              v174 = 8 * v172;
              do
              {
                v175 = *(_QWORD *)(v169 + 8);
                v176 = v175 & 0xFFFFFFFFFFFFFFFCLL;
                if ((v175 & 1) != 0)
                  v176 = *(_QWORD *)(v176 + v173 + 8);
                JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 3), v176, (int *)&v360, v162, v163, v164, v165, v166);
                v173 += 8;
              }
              while (v174 != v173);
            }
            if (*(_DWORD *)v169 == 2)
              JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 3), *(_QWORD *)(v169 + 16), (int *)&v360, v162, v163, v164, v165, v166);
            v169 += 64;
          }
          while (v169 != v170);
        }
        v177 = *((_QWORD *)this + 3);
        v178 = WTF::fastMalloc((WTF *)0xA0);
        *(_OWORD *)v178 = 0u;
        *(_OWORD *)(v178 + 16) = 0u;
        *(_OWORD *)(v178 + 32) = 0u;
        *(_OWORD *)(v178 + 48) = 0u;
        *(_OWORD *)(v178 + 64) = 0u;
        *(_OWORD *)(v178 + 80) = 0u;
        *(_OWORD *)(v178 + 96) = 0u;
        *(_OWORD *)(v178 + 112) = 0u;
        *(_OWORD *)(v178 + 128) = 0u;
        *(_QWORD *)(v178 + 144) = 0;
        *(_QWORD *)(v178 + 152) = 0;
        *(_QWORD *)(v178 + 8) = v178 + 24;
        *(_DWORD *)(v178 + 16) = 2;
        *(_QWORD *)(v178 + 152) = *(_QWORD *)(v177 + 544);
        *(_QWORD *)(v177 + 544) = v178;
        WTF::Vector<JSC::PutByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=<1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(v178 + 8, (uint64_t)v145, v179, v180, v181, v182, v183, v184);
        *(_DWORD *)v178 = v155;
        JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 156, v178, a2, v167, 0, v185, v186);
        return;
      }
    }
LABEL_53:
    v57 = a9;
LABEL_19:
    v58 = this;
    v59 = a2;
    v60 = a3;
    v61 = (uint64_t)v11;
LABEL_20:
    v62 = a6;
    v63 = v9;
LABEL_21:
    JSC::DFG::ByteCodeParser::emitPutById((uint64_t)v58, v59, v60, v61, v62, v63, v57, a8);
    return;
  }
  v19 = *(_QWORD *)(a6 + 8);
  v20 = a8;
  switch(*(_DWORD *)v19)
  {
    case 1:
      v46 = *(JSC::RecordedStatuses **)(*(_QWORD *)(*((_QWORD *)this + 3) + 24) + 344);
      JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&v360, *((_DWORD *)this + 10), *(_QWORD *)(*((_QWORD *)this + 35) + 24));
      v47 = JSC::RecordedStatuses::addPutByStatus(v46, (const JSC::CodeOrigin *)&v360, (const JSC::PutByStatus *)a6);
      JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 423, (uint64_t)v47, a2, 0, 0, v48, v49);
      if ((v360 & 1) != 0 && ((unint64_t)v360 & 0xFFFFFFFF8) != 0)
        WTF::fastFree((unint64_t)v360 & 0xFFFFFFFF8, v50, v51, v52, v53, v54, v55, v56);
      JSC::DFG::ByteCodeParser::replace(this, (JSC::DFG::Node *)a2, v18, (const JSC::PutByVariant *)v19, v11);
      goto LABEL_35;
    case 2:
      v350 = a4;
      v21 = *(JSC::RecordedStatuses **)(*(_QWORD *)(*((_QWORD *)this + 3) + 24) + 344);
      JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&v360, *((_DWORD *)this + 10), *(_QWORD *)(*((_QWORD *)this + 35) + 24));
      v22 = JSC::RecordedStatuses::addPutByStatus(v21, (const JSC::CodeOrigin *)&v360, (const JSC::PutByStatus *)a6);
      JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 423, (uint64_t)v22, a2, 0, 0, v23, v24);
      if ((v360 & 1) != 0 && ((unint64_t)v360 & 0xFFFFFFFF8) != 0)
        WTF::fastFree((unint64_t)v360 & 0xFFFFFFFF8, v25, (uint64_t)v26, v27, v28, v29, v30, v31);
      v32 = (uint64_t)v11;
      v33 = (unint64_t *)(v19 + 8);
      v34 = JSC::DFG::Graph::addStructureSet(*((_QWORD *)this + 3), (unint64_t *)(v19 + 8), v26, v27, v28, v29, v30, v31);
      JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 132, (uint64_t)v34, a2, 0, 0, v35, v36);
      v43 = *(_QWORD *)(v19 + 24);
      if (v43)
        v44 = (const JSC::ObjectPropertyCondition *)(v43 + 8);
      else
        v44 = 0;
      if (v43)
        v45 = v43 + 8 + 24 * *(unsigned int *)(v43 + 4);
      else
        v45 = 0;
      while (2)
      {
        if (v44 == (const JSC::ObjectPropertyCondition *)v45)
        {
          if (*(_DWORD *)v19 != 2)
          {
            __break(0xC471u);
            JUMPOUT(0x198304A9CLL);
          }
          v65 = *((_QWORD *)this + 3);
          v66 = *v33;
          if ((*v33 & 1) != 0)
          {
            v142 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFFCLL);
            v143 = *v142;
            if (v143 >= 3)
            {
              __break(0xC471u);
              JUMPOUT(0x198304ABCLL);
            }
            v144 = 2 * v143;
            while (v144 * 4)
            {
              v67 = *(_QWORD *)&v142[v144];
              v144 -= 2;
              if (v67 != *(_QWORD *)(v19 + 16))
                goto LABEL_30;
            }
          }
          else if (v66 >= 4)
          {
            v67 = v66 & 0xFFFFFFFFFFFFFFFCLL;
            if (*(_QWORD *)(v19 + 16) != (v66 & 0xFFFFFFFFFFFFFFFCLL))
            {
LABEL_30:
              v68 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 3), v67, (int *)&v360, v38, v39, v40, v41, v42);
              v74 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 3), *(_QWORD *)(v19 + 16), (int *)&v360, v69, v70, v71, v72, v73);
              v75 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v75 = v68;
              v75[1] = v74;
              v75[2] = 0;
              v75[2] = *(_QWORD *)(v65 + 512);
              *(_QWORD *)(v65 + 512) = v75;
              if (!JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)v19))
              {
                v79 = a2;
                if (*(int *)(v19 + 4) < 64)
                  goto LABEL_32;
                v106 = JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 138, a2, 0, 0, v76, v77, v78);
LABEL_55:
                v79 = (uint64_t)v106;
LABEL_32:
                v80 = *((_QWORD *)this + 3);
                v81 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v81 = 0;
                *(_QWORD *)(v81 + 8) = 0;
                *(_QWORD *)(v81 + 8) = *(_QWORD *)(v80 + 432);
                *(_QWORD *)(v80 + 432) = v81;
                *(_DWORD *)v81 = *(_DWORD *)(v19 + 4);
                *(_DWORD *)(v81 + 4) = v350;
                JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 155, v81, v79, a2, v32, v82, v83);
                if (JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)v19))
                  JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 139, a2, v79, 0, v84, v85, v86);
                JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 135, (uint64_t)v75, a2, 0, 0, v85, v86);
LABEL_35:
                v87 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 24) + 112);
                if (v87)
                  ++*(_DWORD *)(v87 + 100);
                return;
              }
              if (*(_DWORD *)v19 != 2)
              {
                __break(0xC471u);
                JUMPOUT(0x198304C58);
              }
              v107 = *v33;
              if ((*v33 & 1) != 0)
              {
                v255 = v107 & 0xFFFFFFFFFFFFFFFCLL;
                v256 = *(unsigned int *)(v107 & 0xFFFFFFFFFFFFFFFCLL);
                if (v256 >= 3)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198304C78);
                }
                v257 = 8 * v256;
                while (v257)
                {
                  v108 = *(_QWORD *)(v255 + v257);
                  v257 -= 8;
                  if (v108 != *(_QWORD *)(v19 + 16))
                    goto LABEL_60;
                }
              }
              else if (v107 >= 4)
              {
                v108 = v107 & 0xFFFFFFFFFFFFFFFCLL;
                if (*(_QWORD *)(v19 + 16) != v108)
                {
LABEL_60:
                  v109 = *(unsigned __int16 *)(v108 + 24);
                  if (v109 == 65534)
                    goto LABEL_64;
                  if (v109 == 0xFFFF)
                    v109 = *(_DWORD *)(*(_QWORD *)(v108 + 64) + 84);
                  if (v109 < 64)
                  {
LABEL_64:
                    v110 = this;
                    v111 = 136;
                    v112 = (uint64_t)v75;
                    v113 = a2;
                    v114 = 0;
                  }
                  else
                  {
                    v114 = JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 138, a2, 0, 0, v76, v77, v78);
                    v110 = this;
                    v111 = 137;
                    v112 = (uint64_t)v75;
                    v113 = a2;
                  }
                  v106 = JSC::DFG::ByteCodeParser::addToGraph((uint64_t)v110, v111, v112, v113, (uint64_t)v114, 0, v77, v78);
                  goto LABEL_55;
                }
              }
              __break(0xC471u);
              JUMPOUT(0x198304DD0);
            }
          }
          __break(0xC471u);
          JUMPOUT(0x198304BACLL);
        }
        JSC::DFG::ByteCodeParser::check((JSC::DFG::Graph **)this, v44, v37, v38, v39, v40, v41, v42);
        if ((v64 & 1) != 0)
        {
          v44 = (const JSC::ObjectPropertyCondition *)((char *)v44 + 24);
          continue;
        }
        break;
      }
      v335 = a9;
      v336 = this;
      v337 = a2;
      v338 = a3;
      v339 = v32;
LABEL_230:
      JSC::DFG::ByteCodeParser::emitPutById((uint64_t)v336, v337, v338, v339, a6, v9, v335, v42);
      break;
    case 3:
      v187 = *(JSC::RecordedStatuses **)(*(_QWORD *)(*((_QWORD *)this + 3) + 24) + 344);
      JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&v360, *((_DWORD *)this + 10), *(_QWORD *)(*((_QWORD *)this + 35) + 24));
      v188 = JSC::RecordedStatuses::addPutByStatus(v187, (const JSC::CodeOrigin *)&v360, (const JSC::PutByStatus *)a6);
      JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 423, (uint64_t)v188, a2, 0, 0, v189, v190);
      if ((v360 & 1) != 0 && ((unint64_t)v360 & 0xFFFFFFFF8) != 0)
        WTF::fastFree((unint64_t)v360 & 0xFFFFFFFF8, v191, v192, v193, v194, v195, v196, v197);
      JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 23, a2, 0, 0, v195, v196, v197);
      v351 = v18;
      v198 = JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*(_QWORD *)(*((_QWORD *)this + 3) + 24) + 240), v18);
      if (*(unsigned __int16 *)(a2 + 18) > 2u)
        goto LABEL_143;
      v205 = *(_QWORD *)(a2 + 72);
      v206 = *(JSC::JSObject **)v205;
      if (!*(_QWORD *)v205
        || ((unint64_t)v206 & 0xFFFE000000000002) != 0
        || *((unsigned __int8 *)v206 + 5) < 0x17u)
      {
        goto LABEL_143;
      }
      v199 = (unint64_t *)v198;
      v207 = *(_QWORD *)(v205 + 8);
      if ((*(_BYTE *)(v207 + 19) & 0xC) == 0)
      {
        v208 = *(_QWORD *)(v207 + 96);
        v209 = (v208 & 1) != 0 ? (v208 >> 1) & 3 : *(unsigned __int8 *)(v208 + 4);
        if (v209 != 2)
          goto LABEL_143;
      }
      if (*(_QWORD *)(v19 + 24))
      {
        v210 = *(_QWORD *)(v19 + 8);
        v211 = v210 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v210 & 1) != 0)
        {
          v331 = v211 + 8;
          v212 = *(_QWORD *)(*(_QWORD *)(v211 + 8) + 48);
          if (v212 == 2)
            v212 = 0;
          v332 = *(_DWORD *)v211;
          if (v332 <= 1)
            v332 = 1;
          v333 = 1;
          while (v332 != v333)
          {
            v334 = *(_QWORD *)(*(_QWORD *)(v331 + 8 * v333) + 48);
            if (v334 == 2)
              v334 = 0;
            ++v333;
            if (v334 != v212)
              goto LABEL_143;
          }
        }
        else
        {
          v212 = *(_QWORD *)(v211 + 48);
          if (v212 == 2)
            v212 = 0;
        }
        v360 = v206;
        v361 = v198 | 0x2000000000000;
        v362 = v212;
        JSC::DFG::ByteCodeParser::check((JSC::DFG::Graph **)this, (const JSC::ObjectPropertyCondition *)&v360, v198, v200, v201, v202, v203, v204);
        v214 = v213 ^ 1;
      }
      else
      {
        JSC::DFG::ByteCodeParser::presenceConditionIfConsistent(&v360, v206, (_DWORD *)v198, *(unsigned int *)(v19 + 4), (_QWORD *)(v19 + 8), v202, v203, v204);
        if ((v361 & 0xFFFFFFFFFFFFFFLL) != 0)
        {
          v315 = v360;
          v370[0] = v361;
          v370[1] = v362;
          EquivalenceWithoutBarrier = JSC::PropertyCondition::attemptToMakeEquivalenceWithoutBarrier((JSC::PropertyCondition *)v370, v360, (uint64_t)v199, v200, v201, v202, v203, v204);
          if ((EquivalenceWithoutBarrier & 0xFFFFFFFFFFFFFFLL) != 0)
          {
            v367 = v315;
            v368 = EquivalenceWithoutBarrier;
            v369 = v317;
          }
          else
          {
            v367 = 0;
            v368 = 0;
            v369 = 0;
          }
          JSC::DFG::Graph::watchCondition(*((JSC::DFG::Graph **)this + 3), (const JSC::ObjectPropertyCondition *)&v367, v318, v319, v320, v321, v322, v323);
          if ((v328 & 1) != 0)
          {
            v329 = v369;
            goto LABEL_208;
          }
          JSC::DFG::ByteCodeParser::check((JSC::DFG::Graph **)this, (const JSC::ObjectPropertyCondition *)&v360, v324, v325, v326, v327, v203, v204);
          v214 = v330 ^ 1;
        }
        else
        {
          v214 = 1;
        }
      }
      if (!v214)
        goto LABEL_144;
LABEL_143:
      v215 = JSC::DFG::Graph::addStructureSet(*((_QWORD *)this + 3), (unint64_t *)(v19 + 8), v199, v200, v201, v202, v203, v204);
      JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 132, (uint64_t)v215, a2, 0, 0, v216, v217);
      v214 = 1;
LABEL_144:
      if (*(_QWORD *)(v19 + 32))
        v218 = 153;
      else
        v218 = 152;
      if (*(_QWORD *)(v19 + 24))
      {
        v219 = (unsigned __int16 *)JSC::DFG::ByteCodeParser::load((JSC::DFG::Graph **)this, 0x80000000, (uint64_t *)(v19 + 24), v218, v201, v202, v203, v204);
        goto LABEL_149;
      }
      if (!v214 || !JSC::DFG::Node::hasConstant((JSC::DFG::Node *)a2))
        goto LABEL_199;
      v340 = *((_QWORD *)this + 3);
      v341 = *(unsigned __int16 *)(a2 + 18);
      if (v341 == 355 || v341 == 348)
      {
        v342 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
        {
          JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
          LODWORD(qword_1EE342DB8) = 0;
        }
      }
      else
      {
        v342 = *(uint64_t **)(a2 + 72);
      }
      v349 = *v342;
      v343 = JSC::DFG::Graph::addStructureSet(v340, (unint64_t *)(v19 + 8), v311, v312, v313, v314, v203, v204);
      ConstantProperty = JSC::DFG::Graph::tryGetConstantProperty(v340, v349, (unint64_t *)v343, *(unsigned int *)(v19 + 4), v344, v345, v346, v347);
      if (!ConstantProperty)
      {
LABEL_199:
        v219 = (unsigned __int16 *)JSC::DFG::ByteCodeParser::handleGetByOffset((uint64_t)this, 0x80000000, a2, v351, *(_DWORD *)(v19 + 4), v218, v203, v204);
        goto LABEL_149;
      }
      v329 = ConstantProperty;
LABEL_208:
      v219 = (unsigned __int16 *)JSC::DFG::ByteCodeParser::weakJSConstant((uint64_t)this, v329, v324, v325, v326, v327, v203, v204);
LABEL_149:
      if (!v219)
      {
        v335 = a9;
        v336 = this;
        v337 = a2;
        v338 = a3;
        v339 = (uint64_t)v11;
        goto LABEL_230;
      }
      if (v219[9] <= 2u
        && ((v224 = **((_QWORD **)v219 + 9)) != 0 ? (v225 = (v224 & 0xFFFE000000000002) == 0) : (v225 = 0),
            v225 && *(_BYTE *)(v224 + 5) == 5 && (v226 = *(_QWORD *)(v224 + 16), __dmb(0xBu), v226)))
      {
        v227 = JSC::DFG::ByteCodeParser::weakJSConstant((uint64_t)this, v226, (uint64_t)v219, v220, v221, v222, v223, v42);
      }
      else
      {
        v227 = JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 151, (uint64_t)v219, 0, 0, v222, v223, v42);
      }
      v232 = (uint64_t)v227;
      v233 = *((_QWORD *)this + 35);
      v234 = *(_QWORD *)(v233 + 24);
      v235 = (*(_DWORD *)(*(_QWORD *)(v233 + 16) + 20) + 9) & 0xFFFFFFFE;
      v236 = -v235;
      if (v234)
        v236 = (HIDWORD(*(_QWORD *)(v234 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v234 + 24) >> 28) >> 24 << 20)) - v235;
      v237 = ~v236;
      if (*((_DWORD *)this + 65) < ~v236)
      {
        *((_DWORD *)this + 65) = v237;
        v238 = *((_QWORD *)this + 3);
        LODWORD(v239) = *(_DWORD *)(v238 + 60);
        if ((_DWORD)v239)
        {
          v240 = 0;
          do
          {
            if (v239 <= v240)
            {
              __break(0xC471u);
              JUMPOUT(0x198304E68);
            }
            JSC::DFG::BasicBlock::ensureLocals(*(JSC::DFG::BasicBlock **)(*(_QWORD *)(v238 + 48) + 8 * v240++), v237);
            v238 = *((_QWORD *)this + 3);
            v239 = *(unsigned int *)(v238 + 60);
          }
          while (v240 < v239);
        }
      }
      JSC::DFG::ByteCodeParser::set((uint64_t)this, (5 - v235) | ((unint64_t)((5 - v235) >> 31) << 32), a2, 2, v228, v229, v230, v231);
      JSC::DFG::ByteCodeParser::set((uint64_t)this, (6 - v235) | ((unint64_t)((6 - v235) >> 31) << 32), (uint64_t)v11, 2, v241, v242, v243, v244);
      *((_BYTE *)this + 64) = 1;
      JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 22, 0, 0, 0, v245, v246, v247);
      v248 = *(_QWORD *)(v19 + 32);
      v249 = *(unsigned int *)(v248 + 12);
      __dst = (uint64_t *)v359;
      v357 = 1;
      v358 = v249;
      if (v249 >= 2)
      {
        if (v249 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x198304E78);
        }
        v250 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * v249));
        v357 = v249;
        __dst = v250;
        v249 = *(unsigned int *)(v248 + 12);
      }
      else
      {
        v250 = (uint64_t *)v359;
      }
      if ((_DWORD)v249)
      {
        v252 = *(uint64_t **)v248;
        v253 = 8 * v249;
        do
        {
          v254 = *v252++;
          *v250++ = v254;
          v253 -= 8;
        }
        while (v253);
      }
      v359[2] = *(_DWORD *)(v248 + 24);
      JSC::DFG::ByteCodeParser::handleCall((uint64_t)this, 0x3FFFFFFFuLL, 241, 7, v20, v232, 2, (char **)-v235, &__dst, 0x20000000000, a9);
      v141 = __dst;
      if (v359 != (_DWORD *)__dst && __dst != 0)
      {
        __dst = 0;
        v357 = 0;
        goto LABEL_82;
      }
      return;
    case 5:
      v258 = *((_QWORD *)this + 35);
      if (JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(v258 + 32), *((_DWORD *)this + 10), 1))
      {
        v61 = a5;
        v57 = a9;
        v58 = this;
        v59 = a2;
        v60 = a3;
        goto LABEL_20;
      }
      v261 = 608;
      if (!(_BYTE)a9)
        v261 = 600;
      v262 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v258 + 8) + 8) + v261);
      if (!v262)
      {
        v58 = this;
        v59 = a2;
        v60 = a3;
        v61 = a5;
        v62 = a6;
        v63 = v9;
        v57 = a9;
        goto LABEL_21;
      }
      JSC::DFG::ByteCodeParser::addToGraph(this, 24, a2 & 0xFF00FFFFFFFFFFFFLL | 0x44000000000000, 0, 0, v259, v260, a8);
      v269 = JSC::DFG::ByteCodeParser::weakJSConstant((uint64_t)this, v262, v263, v264, v265, v266, v267, v268);
      v276 = JSC::DFG::ByteCodeParser::weakJSConstant((uint64_t)this, *(_QWORD *)(v19 + 56), v270, v271, v272, v273, v274, v275);
      v277 = *(JSC::RecordedStatuses **)(*(_QWORD *)(*((_QWORD *)this + 3) + 24) + 344);
      JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&v360, *((_DWORD *)this + 10), *(_QWORD *)(*((_QWORD *)this + 35) + 24));
      v278 = JSC::RecordedStatuses::addPutByStatus(v277, (const JSC::CodeOrigin *)&v360, (const JSC::PutByStatus *)a6);
      JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 423, (uint64_t)v278, a2, 0, 0, v279, v280);
      if ((v360 & 1) != 0 && ((unint64_t)v360 & 0xFFFFFFFF8) != 0)
        WTF::fastFree((unint64_t)v360 & 0xFFFFFFFF8, v281, v282, v283, v284, v285, v286, v287);
      v288 = *((_QWORD *)this + 35);
      v289 = *(_QWORD *)(v288 + 24);
      v290 = (*(_DWORD *)(*(_QWORD *)(v288 + 16) + 20) + 11) & 0xFFFFFFFE;
      v291 = -v290;
      if (v289)
        v291 = (HIDWORD(*(_QWORD *)(v289 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v289 + 24) >> 28) >> 24 << 20)) - v290;
      JSC::DFG::ByteCodeParser::ensureLocals(this, ~v291);
      JSC::DFG::ByteCodeParser::set((uint64_t)this, (5 - v290) | ((unint64_t)((5 - v290) >> 31) << 32), a2, 2, v292, v293, v294, v295);
      JSC::DFG::ByteCodeParser::set((uint64_t)this, (6 - v290) | ((unint64_t)((6 - v290) >> 31) << 32), (uint64_t)v276, 2, v296, v297, v298, v299);
      JSC::DFG::ByteCodeParser::set((uint64_t)this, (7 - v290) | ((unint64_t)((7 - v290) >> 31) << 32), a2, 2, v300, v301, v302, v303);
      JSC::DFG::ByteCodeParser::set((uint64_t)this, (8 - v290) | ((unint64_t)((8 - v290) >> 31) << 32), a5, 2, v304, v305, v306, v307);
      *((_BYTE *)this + 64) = 1;
      JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 22, 0, 0, 0, v308, v309, v310);
      JSC::CallLinkStatus::CallLinkStatus((JSC::CallLinkStatus *)&v353, *(uint64_t ***)(v19 + 32));
      JSC::DFG::ByteCodeParser::handleCall((uint64_t)this, 0x3FFFFFFFuLL, 241, 9, v20, (uint64_t)v269, 4, (char **)-v290, &v353, 0x20000000000, a9);
      v141 = v353;
      if (&v355 != v353 && v353)
      {
        v353 = 0;
        v354 = 0;
        goto LABEL_82;
      }
      return;
    default:
      goto LABEL_53;
  }
}

uint64_t WTF::Vector<JSC::PutByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=<1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(uint64_t a1, uint64_t a2, JSC::PutByVariant *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  JSC::PutByVariant *v16;
  const JSC::PutByVariant *v17;
  unint64_t v18;

  v10 = *(unsigned int *)(a1 + 12);
  v11 = *(unsigned int *)(a2 + 12);
  if (v10 > v11)
  {
    WTF::VectorDestructor<true,JSC::PutByVariant>::destruct((_QWORD *)(*(_QWORD *)a1 + (v11 << 6)), (_QWORD *)(*(_QWORD *)a1 + (v10 << 6)), (uint64_t)a3, a4, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 12) = v11;
    LODWORD(v10) = v11;
  }
  else if (v11 > *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<JSC::PutByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0, a3, a4, a5, a6, a7, a8);
    WTF::Vector<JSC::PutByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
    LODWORD(v10) = *(_DWORD *)(a1 + 12);
  }
  v12 = *(unsigned int ***)a2;
  v13 = *(_QWORD *)a1;
  if ((_DWORD)v10)
  {
    v14 = (unint64_t)v10 << 6;
    do
    {
      JSC::PutByVariant::operator=(v13, v12, (uint64_t)a3, a4, a5, a6, a7, a8);
      v12 += 8;
      v13 += 64;
      v14 -= 64;
    }
    while (v14);
    v12 = *(unsigned int ***)a2;
    LODWORD(v10) = *(_DWORD *)(a1 + 12);
    v13 = *(_QWORD *)a1;
  }
  v15 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v10 != (_DWORD)v15)
  {
    v16 = (JSC::PutByVariant *)(v13 + ((unint64_t)v10 << 6));
    v17 = (const JSC::PutByVariant *)&v12[8 * (unint64_t)v10];
    v18 = (v15 << 6) - ((unint64_t)v10 << 6);
    do
    {
      v16 = (JSC::PutByVariant *)((char *)JSC::PutByVariant::PutByVariant(v16, v17, (uint64_t)a3, a4, a5, a6, a7, a8) + 64);
      v17 = (const JSC::PutByVariant *)((char *)v17 + 64);
      v18 -= 64;
    }
    while (v18);
    LODWORD(v10) = *(_DWORD *)(a2 + 12);
  }
  *(_DWORD *)(a1 + 12) = v10;
  return a1;
}

_QWORD *JSC::DFG::ByteCodeParser::handlePutPrivateNameById(uint64_t a1, JSC::DFG::Node *a2, uint64_t a3, unsigned int a4, JSC::DFG::Node *a5, JSC::PutByStatus *this, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  unsigned int v14;
  BOOL v15;
  uint64_t v17;
  JSC::RecordedStatuses *v18;
  JSC::PutByVariant *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *result;
  JSC::RecordedStatuses *v30;
  JSC::PutByVariant *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const JSC::ObjectPropertyCondition *v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  JSC::Structure *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  JSC::RecordedStatuses *v93;
  JSC::PutByVariant *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  JSC::PutByVariant *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;

  v8 = a7;
  if (*(_DWORD *)this != 1)
  {
    if (!*(_DWORD *)this)
      JSC::DFG::ByteCodeParser::addToGraph(a1, 379, 0, 0, 0, (uint64_t)this, a7, a8);
    return JSC::DFG::ByteCodeParser::addToGraph(a1, 106, a3, v8, (uint64_t)a2, (uint64_t)a5, 0, a8);
  }
  v14 = *((_DWORD *)this + 5);
  if (v14)
    v15 = byte_1ECF4C42A == 0;
  else
    v15 = 1;
  if (v15)
    return JSC::DFG::ByteCodeParser::addToGraph(a1, 106, a3, v8, (uint64_t)a2, (uint64_t)a5, 0, a8);
  if (v14 < 2)
  {
    v17 = *((_QWORD *)this + 1);
    if (*(_DWORD *)v17 != 2)
    {
      if (*(_DWORD *)v17 != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198305384);
      }
      v18 = *(JSC::RecordedStatuses **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 344);
      JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&v125, *(_DWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24));
      v19 = JSC::RecordedStatuses::addPutByStatus(v18, (const JSC::CodeOrigin *)&v125, this);
      JSC::DFG::ByteCodeParser::addToGraph(a1, 423, (uint64_t)v19, (uint64_t)a2, 0, 0, v20, v21);
      if ((v125 & 1) != 0 && (v125 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v125 & 0xFFFFFFFF8, v22, v23, v24, v25, v26, v27, v28);
      result = JSC::DFG::ByteCodeParser::replace((JSC::DFG::ByteCodeParser *)a1, a2, a4, (const JSC::PutByVariant *)v17, a5);
LABEL_30:
      v77 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 112);
      if (v77)
        ++*(_DWORD *)(v77 + 100);
      return result;
    }
    v30 = *(JSC::RecordedStatuses **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 344);
    JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&v125, *(_DWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24));
    v31 = JSC::RecordedStatuses::addPutByStatus(v30, (const JSC::CodeOrigin *)&v125, this);
    JSC::DFG::ByteCodeParser::addToGraph(a1, 423, (uint64_t)v31, (uint64_t)a2, 0, 0, v32, v33);
    if ((v125 & 1) != 0 && (v125 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v125 & 0xFFFFFFFF8, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
    v41 = (unint64_t *)(v17 + 8);
    v42 = JSC::DFG::Graph::addStructureSet(*(_QWORD *)(a1 + 24), (unint64_t *)(v17 + 8), v35, v36, v37, v38, v39, v40);
    JSC::DFG::ByteCodeParser::addToGraph(a1, 132, (uint64_t)v42, (uint64_t)a2, 0, 0, v43, v44);
    v51 = *(_QWORD *)(v17 + 24);
    if (v51)
      v52 = (const JSC::ObjectPropertyCondition *)(v51 + 8);
    else
      v52 = 0;
    if (v51)
      v53 = v51 + 8 + 24 * *(unsigned int *)(v51 + 4);
    else
      v53 = 0;
    while (v52 != (const JSC::ObjectPropertyCondition *)v53)
    {
      JSC::DFG::ByteCodeParser::check((JSC::DFG::Graph **)a1, v52, v45, v46, v47, v48, v49, v50);
      if ((v54 & 1) == 0)
        return JSC::DFG::ByteCodeParser::addToGraph(a1, 106, a3, v8, (uint64_t)a2, (uint64_t)a5, 0, v50);
      v52 = (const JSC::ObjectPropertyCondition *)((char *)v52 + 24);
    }
    if (*(_DWORD *)v17 != 2)
    {
      __break(0xC471u);
      JUMPOUT(0x198305470);
    }
    v55 = *(_QWORD *)(a1 + 24);
    v56 = *v41;
    if ((*v41 & 1) != 0)
    {
      v78 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFFCLL);
      v79 = *v78;
      if (v79 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x198305490);
      }
      v80 = 2 * v79;
      while (v80 * 4)
      {
        v57 = *(_QWORD *)&v78[v80];
        v80 -= 2;
        if (v57 != *(_QWORD *)(v17 + 16))
          goto LABEL_25;
      }
    }
    else if (v56 >= 4)
    {
      v57 = v56 & 0xFFFFFFFFFFFFFFFCLL;
      if (*(_QWORD *)(v17 + 16) != (v56 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_25:
        v58 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(a1 + 24), v57, (int *)&v125, v46, v47, v48, v49, v50);
        v64 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(a1 + 24), *(_QWORD *)(v17 + 16), (int *)&v125, v59, v60, v61, v62, v63);
        v65 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v65 = v58;
        v65[1] = v64;
        v65[2] = 0;
        v65[2] = *(_QWORD *)(v55 + 512);
        *(_QWORD *)(v55 + 512) = v65;
        if (JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)v17))
        {
          v81 = (JSC::Structure *)JSC::PutByVariant::oldStructureForTransition((JSC::PutByVariant *)v17);
          if (JSC::Structure::outOfLineCapacity(v81))
          {
            v85 = JSC::DFG::ByteCodeParser::addToGraph(a1, 138, (uint64_t)a2, 0, 0, v82, v83, v84);
            v86 = a1;
            v87 = 137;
            v88 = (uint64_t)v65;
            v89 = (uint64_t)a2;
          }
          else
          {
            v86 = a1;
            v87 = 136;
            v88 = (uint64_t)v65;
            v89 = (uint64_t)a2;
            v85 = 0;
          }
          v90 = JSC::DFG::ByteCodeParser::addToGraph(v86, v87, v88, v89, (uint64_t)v85, 0, v83, v84);
        }
        else
        {
          v69 = (uint64_t)a2;
          if (*(int *)(v17 + 4) < 64)
          {
LABEL_27:
            v70 = *(_QWORD *)(a1 + 24);
            v71 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v71 = 0;
            *(_QWORD *)(v71 + 8) = 0;
            *(_QWORD *)(v71 + 8) = *(_QWORD *)(v70 + 432);
            *(_QWORD *)(v70 + 432) = v71;
            *(_DWORD *)v71 = *(_DWORD *)(v17 + 4);
            *(_DWORD *)(v71 + 4) = a4;
            JSC::DFG::ByteCodeParser::addToGraph(a1, 155, v71, v69, (uint64_t)a2, (uint64_t)a5, v72, v73);
            if (JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)v17))
              JSC::DFG::ByteCodeParser::addToGraph(a1, 139, (uint64_t)a2, v69, 0, v74, v75, v76);
            result = JSC::DFG::ByteCodeParser::addToGraph(a1, 135, (uint64_t)v65, (uint64_t)a2, 0, 0, v75, v76);
            goto LABEL_30;
          }
          v90 = JSC::DFG::ByteCodeParser::addToGraph(a1, 138, (uint64_t)a2, 0, 0, v66, v67, v68);
        }
        v69 = (uint64_t)v90;
        goto LABEL_27;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x198305618);
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 16) & 0xFFFFFFFE) != 4
    || (JSC::PutByStatus::makesCalls(this) & 1) != 0
    || !HIBYTE(word_1ECF4C430)
    || *((_DWORD *)this + 5) > dword_1ECF4C434)
  {
    return JSC::DFG::ByteCodeParser::addToGraph(a1, 106, a3, v8, (uint64_t)a2, (uint64_t)a5, 0, a8);
  }
  v91 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v92 = *(_QWORD *)(v91 + 112);
  if (v92)
    ++*(_DWORD *)(v92 + 100);
  v93 = *(JSC::RecordedStatuses **)(v91 + 344);
  JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&v125, *(_DWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24));
  v94 = JSC::RecordedStatuses::addPutByStatus(v93, (const JSC::CodeOrigin *)&v125, this);
  JSC::DFG::ByteCodeParser::addToGraph(a1, 423, (uint64_t)v94, (uint64_t)a2, 0, 0, v95, v96);
  if ((v125 & 1) != 0 && (v125 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v125 & 0xFFFFFFFF8, v97, v98, v99, v100, v101, v102, v103);
  v106 = *((_QWORD *)this + 1);
  v105 = (char *)this + 8;
  v104 = v106;
  v107 = *((unsigned int *)v105 + 3);
  if ((_DWORD)v107)
  {
    v108 = v104 + (v107 << 6);
    do
    {
      v109 = *(_QWORD *)(v104 + 8);
      if ((v109 & 1) != 0)
        v110 = *(unsigned int *)(v109 & 0xFFFFFFFFFFFFFFFCLL);
      else
        v110 = v109 > 3;
      if (v110)
      {
        v111 = 0;
        v112 = 8 * v110;
        do
        {
          v113 = *(_QWORD *)(v104 + 8);
          v114 = v113 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v113 & 1) != 0)
            v114 = *(_QWORD *)(v114 + v111 + 8);
          JSC::DFG::Graph::registerStructure(*(_QWORD *)(a1 + 24), v114, (int *)&v125, v99, v100, v101, v102, v103);
          v111 += 8;
        }
        while (v112 != v111);
      }
      if (*(_DWORD *)v104 == 2)
        JSC::DFG::Graph::registerStructure(*(_QWORD *)(a1 + 24), *(_QWORD *)(v104 + 16), (int *)&v125, v99, v100, v101, v102, v103);
      v104 += 64;
    }
    while (v104 != v108);
  }
  v115 = *(_QWORD *)(a1 + 24);
  v116 = WTF::fastMalloc((WTF *)0xA0);
  *(_OWORD *)v116 = 0u;
  *(_OWORD *)(v116 + 16) = 0u;
  *(_OWORD *)(v116 + 32) = 0u;
  *(_OWORD *)(v116 + 48) = 0u;
  *(_OWORD *)(v116 + 64) = 0u;
  *(_OWORD *)(v116 + 80) = 0u;
  *(_OWORD *)(v116 + 96) = 0u;
  *(_OWORD *)(v116 + 112) = 0u;
  *(_OWORD *)(v116 + 128) = 0u;
  *(_QWORD *)(v116 + 144) = 0;
  *(_QWORD *)(v116 + 152) = 0;
  *(_QWORD *)(v116 + 8) = v116 + 24;
  *(_DWORD *)(v116 + 16) = 2;
  *(_QWORD *)(v116 + 152) = *(_QWORD *)(v115 + 544);
  *(_QWORD *)(v115 + 544) = v116;
  WTF::Vector<JSC::PutByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=<1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(v116 + 8, (uint64_t)v105, v117, v118, v119, v120, v121, v122);
  *(_DWORD *)v116 = a4;
  return JSC::DFG::ByteCodeParser::addToGraph(a1, 156, v116, (uint64_t)a2, (uint64_t)a5, 0, v123, v124);
}

#error "19830563C: too big function (funcsize=0)"

void WTF::HashMap<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  void *v24;
  const void *v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  int v37;
  unsigned int v38;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::rehash(a2, 8u, 0), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = ~(*a3 << 32) + *a3;
  v17 = (v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13);
  v18 = (9 * (v17 ^ (v17 >> 8))) ^ ((9 * (v17 ^ (v17 >> 8))) >> 15);
  v19 = v14 & (((v18 + ~(v18 << 27)) >> 31) ^ (v18 + ~((_DWORD)v18 << 27)));
  v20 = (_QWORD *)(v12 + 88 * v19);
  v21 = *v20;
  if (*v20)
  {
    v36 = a3;
    v23 = 0;
    v37 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v38 = 0;
        else
          v38 = *(_DWORD *)(v12 - 4);
        v35 = 0;
        v34 = v12 + 88 * v38;
        goto LABEL_16;
      }
      if (v21 == -1)
        v23 = v20;
      v19 = (v19 + v37) & v14;
      v20 = (_QWORD *)(v12 + 88 * v19);
      v21 = *v20;
      ++v37;
    }
    while (*v20);
    if (!v23)
      goto LABEL_5;
    v22 = (unint64_t)(v23 + 3);
    *v23 = 0;
    v23[1] = v23 + 3;
    v23[2] = 8;
    --*(_DWORD *)(*a2 - 16);
    v15 = *v36;
  }
  else
  {
LABEL_5:
    v22 = v20[1];
    v23 = v20;
  }
  *v23 = v15;
  v24 = v23 + 3;
  if ((_QWORD *)v22 != v23 + 3)
  {
    if (v22)
    {
      v23[1] = 0;
      *((_DWORD *)v23 + 4) = 0;
      WTF::fastFree(v22, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v24 = v23 + 3;
    v23[1] = v23 + 3;
  }
  v25 = *(const void **)a4;
  if (*(_QWORD *)a4 == a4 + 16)
  {
    memcpy(v24, v25, 8 * *(unsigned int *)(a4 + 12));
    v26 = *(_DWORD *)(a4 + 8);
  }
  else
  {
    *(_QWORD *)a4 = a4 + 16;
    v23[1] = v25;
    v26 = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = 8;
  }
  *((_DWORD *)v23 + 4) = v26;
  v27 = *(_DWORD *)(a4 + 12);
  *(_DWORD *)(a4 + 12) = 0;
  *((_DWORD *)v23 + 5) = v27;
  v28 = *a2;
  if (*a2)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v30 = *a2;
  if (*a2)
    v31 = *(_DWORD *)(v30 - 12);
  else
    v31 = 0;
  v32 = (*(_DWORD *)(v30 - 16) + v31);
  v33 = *(unsigned int *)(v30 - 4);
  if (v33 > 0x400)
  {
    if (v33 > 2 * v32)
      goto LABEL_15;
LABEL_20:
    v23 = WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::expand(a2, (uint64_t)v23);
    v30 = *a2;
    if (*a2)
      LODWORD(v33) = *(_DWORD *)(v30 - 4);
    else
      LODWORD(v33) = 0;
    goto LABEL_15;
  }
  if (3 * v33 <= 4 * v32)
    goto LABEL_20;
LABEL_15:
  v34 = v30 + 88 * v33;
  v35 = 1;
  v20 = v23;
LABEL_16:
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v34;
  *(_BYTE *)(a1 + 16) = v35;
}

uint64_t JSC::DFG::ByteCodeParser::getPrediction(JSC::DFG::ByteCodeParser *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  BOOL v30;
  int v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unsigned int v38;
  char v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  char v54[32];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v10 = *((unsigned int *)this + 10);
  v53 = v10;
  v11 = (uint64_t *)*((_QWORD *)this + 35);
  v12 = v11[3];
  if ((_DWORD)v10 == 0x3FFFFFFF || (_DWORD)v10 == -1)
  {
    v14 = 2;
  }
  else if (v10 >> 28)
  {
    v49 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v49 = v12;
    *(_DWORD *)(v49 + 8) = v10;
    v14 = 1;
    v12 = v49;
  }
  else
  {
    v14 = v11[3];
    v12 = v10 << 36;
  }
  v15 = v12 | v14;
  v52 = v15;
  v16 = v11[2];
  v17 = v15 >> 36;
  if ((v15 & 2) != 0)
  {
    LODWORD(v18) = -1;
  }
  else if ((v15 & 1) != 0)
  {
    LODWORD(v18) = *(_DWORD *)((v15 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v18 = v15 >> 36;
  }
  v19 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v16 + 56) + 80) + ((unint64_t)v18 >> 2));
  v20 = *v19;
  if ((v20 | 2) == 0x82)
    v20 = v19[1];
  if (v20 != 24)
  {
    v21 = v11[19];
    if (v21)
    {
      v43 = *(_DWORD *)(v21 - 8);
      v44 = 9 * ((v10 + ~((_DWORD)v10 << 15)) ^ ((v10 + ~((_DWORD)v10 << 15)) >> 10));
      v45 = (v44 ^ (v44 >> 6)) + ~((v44 ^ (v44 >> 6)) << 11);
      v46 = v43 & (v45 ^ HIWORD(v45));
      v47 = *(_DWORD *)(v21 + 16 * v46);
      if (v47 == (_DWORD)v10)
      {
LABEL_53:
        v22 = *(unint64_t **)(v21 + 16 * v46 + 8);
        goto LABEL_15;
      }
      v48 = 1;
      while (v47 != -1)
      {
        v46 = ((_DWORD)v46 + v48) & v43;
        v47 = *(_DWORD *)(v21 + 16 * v46);
        ++v48;
        if (v47 == (_DWORD)v10)
          goto LABEL_53;
      }
    }
    v22 = 0;
LABEL_15:
    if ((v15 & 2) != 0)
    {
      LODWORD(v17) = -1;
    }
    else if ((v15 & 1) != 0)
    {
      LODWORD(v17) = *(_DWORD *)((v15 & 0xFFFFFFFF8) + 8);
    }
    v23 = JSC::CodeBlock::valueProfilePredictionForBytecodeIndex(v11[2], a9, (uint64_t)v54, v17, v22);
    v24 = *(_QWORD *)(*(_QWORD *)this + 93376);
    if (v24)
    {
      v23 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(*(_QWORD *)v24 + 16))(v24, v16, &v52, v23) & 0x3F73FFFFFFF7;
      v15 = v52;
    }
    goto LABEL_20;
  }
  v23 = 0x3FFFFFFFFFF7;
LABEL_20:
  if ((v15 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v15 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if (!v23)
  {
    v26 = (char *)this + 280;
    v27 = *((_QWORD *)this + 35);
    v28 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v27 + 16) + 56) + 80) + (v10 >> 2));
    v29 = *v28;
    if ((v29 | 2) == 0x82)
      v29 = v28[1];
    v30 = v29 > 0xB;
    v31 = (1 << v29) & 0xA01;
    if (v30 || v31 == 0)
      goto LABEL_32;
    v33 = *(_QWORD *)(v27 + 24);
    if (!v33)
      return 0x3FFFFFFFFFF7;
    do
    {
      v34 = v33;
      v35 = *(_QWORD *)(v33 + 16);
      v36 = *(_QWORD *)(v33 + 24) >> 60;
      v37 = (uint64_t *)(v35 & 0xFFFFFFFF8);
      v33 = v35 & 0xFFFFFFFF8;
      if ((v35 & 1) != 0)
        v33 = *v37;
      v38 = (v36 < 0xC) & (0x824u >> v36);
      if (v33)
        v39 = v38;
      else
        v39 = 0;
    }
    while ((v39 & 1) != 0);
    v23 = 0x3FFFFFFFFFF7;
    if ((v38 & 1) == 0)
    {
      v40 = (uint64_t *)(v34 + 16);
      if ((v35 & 1) != 0)
      {
        v50 = *v37;
        do
        {
          v41 = *(_QWORD *)v26;
          v51 = *(_QWORD *)(*(_QWORD *)v26 + 24);
          v26 = (char *)(*(_QWORD *)v26 + 208);
        }
        while (v51 != v50);
      }
      else
      {
        do
        {
          v41 = *(_QWORD *)v26;
          v42 = *(uint64_t **)(*(_QWORD *)v26 + 24);
          v26 = (char *)(*(_QWORD *)v26 + 208);
        }
        while (v42 != v37);
      }
      v23 = JSC::DFG::ByteCodeParser::getPredictionWithoutOSRExit(JSC::BytecodeIndex)::{lambda(JSC::DFG::ByteCodeParser::InlineStackEntry *,JSC::CodeOrigin const&)#1}::operator()(&v53, (uint64_t)this, v41, v40, a9);
      if (!v23)
      {
LABEL_32:
        JSC::DFG::ByteCodeParser::addToGraph((uint64_t)this, 379, 0, 0, 0, a6, a7, a8);
        return 0;
      }
    }
  }
  return v23;
}

void JSC::DFG::ByteCodeParser::currentNodeOrigin(JSC::DFG::ByteCodeParser *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const JSC::CodeOrigin *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  const JSC::CodeOrigin *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;

  v11 = *(_BYTE *)(a2 + 48);
  v10 = (const JSC::CodeOrigin *)(a2 + 48);
  if ((v11 & 2) != 0)
  {
    v12 = *(unsigned int *)(a2 + 40);
    v13 = *(_QWORD *)(*(_QWORD *)(a2 + 280) + 24);
    if ((_DWORD)v12 == 0x3FFFFFFF || (_DWORD)v12 == -1)
    {
      v15 = 2;
    }
    else if (v12 >> 28)
    {
      v41 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v41 = v13;
      *(_DWORD *)(v41 + 8) = v12;
      v15 = 1;
      v13 = v41;
    }
    else
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 280) + 24);
      v13 = v12 << 36;
    }
    v52 = v13 | v15;
  }
  else
  {
    JSC::CodeOrigin::CodeOrigin(&v52, v10);
  }
  v16 = (const JSC::CodeOrigin *)(a2 + 56);
  if ((*(_BYTE *)(a2 + 56) & 2) != 0)
  {
    v17 = *(unsigned int *)(a2 + 40);
    v18 = *(_QWORD *)(*(_QWORD *)(a2 + 280) + 24);
    if ((_DWORD)v17 == 0x3FFFFFFF || (_DWORD)v17 == -1)
    {
      v20 = 2;
    }
    else if (v17 >> 28)
    {
      v42 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v42 = v18;
      *(_DWORD *)(v42 + 8) = v17;
      v20 = 1;
      v18 = v42;
    }
    else
    {
      v20 = *(_QWORD *)(*(_QWORD *)(a2 + 280) + 24);
      v18 = v17 << 36;
    }
    v51 = v18 | v20;
  }
  else
  {
    JSC::CodeOrigin::CodeOrigin(&v51, v16);
  }
  v21 = v52;
  if ((v52 & 1) != 0)
  {
    v25 = *(_QWORD *)(v52 & 0xFFFFFFFF8);
    if ((v52 & 2) != 0
      || ((v26 = *(unsigned int *)((v52 & 0xFFFFFFFF8) + 8), (_DWORD)v26 != 0x3FFFFFFF)
        ? (v27 = (_DWORD)v26 == -1)
        : (v27 = 1),
          v27))
    {
      v28 = 2;
    }
    else if (v26 >> 28)
    {
      v43 = *(_QWORD *)(v52 & 0xFFFFFFFF8);
      v25 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v25 = v43;
      *(_DWORD *)(v25 + 8) = v26;
      v28 = 1;
    }
    else
    {
      v28 = *(_QWORD *)(v52 & 0xFFFFFFFF8);
      v25 = v26 << 36;
    }
    v21 = v25 | v28;
  }
  v22 = v51;
  if ((v51 & 1) != 0)
  {
    v29 = *(_QWORD *)(v51 & 0xFFFFFFFF8);
    if ((v51 & 2) != 0
      || ((v30 = *(unsigned int *)((v51 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v44 = *(_QWORD *)(v51 & 0xFFFFFFFF8);
      v29 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v29 = v44;
      *(_DWORD *)(v29 + 8) = v30;
      v32 = 1;
    }
    else
    {
      v32 = *(_QWORD *)(v51 & 0xFFFFFFFF8);
      v29 = v30 << 36;
    }
    v22 = v29 | v32;
  }
  v23 = *(_BYTE *)(a2 + 64);
  v24 = v21;
  if ((v21 & 1) != 0)
  {
    v33 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
    if ((v21 & 2) != 0
      || ((v34 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v34 != 0x3FFFFFFF)
        ? (v35 = (_DWORD)v34 == -1)
        : (v35 = 1),
          v35))
    {
      v36 = 2;
    }
    else if (v34 >> 28)
    {
      v50 = v23;
      v49 = v22;
      v45 = WTF::fastMalloc((WTF *)0x10);
      v22 = v49;
      v23 = v50;
      *(_QWORD *)v45 = v33;
      *(_DWORD *)(v45 + 8) = v34;
      v36 = 1;
      v33 = v45;
    }
    else
    {
      v36 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
      v33 = v34 << 36;
    }
    v24 = v33 | v36;
  }
  *(_QWORD *)this = v24;
  if ((v22 & 1) != 0)
  {
    v37 = v22 & 0xFFFFFFFF8;
    v38 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
    if ((v22 & 2) != 0
      || (v39 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v39 == 0x3FFFFFFF)
      || (_DWORD)v39 == -1)
    {
      v40 = 2;
    }
    else if (v39 >> 28)
    {
      v46 = v38;
      v47 = v23;
      v48 = *(_DWORD *)(v37 + 8);
      v38 = WTF::fastMalloc((WTF *)0x10);
      v23 = v47;
      *(_QWORD *)v38 = v46;
      *(_DWORD *)(v38 + 8) = v48;
      v40 = 1;
    }
    else
    {
      v40 = v38;
      v38 = v39 << 36;
    }
    *((_QWORD *)this + 1) = v38 | v40;
    *((_BYTE *)this + 16) = v23;
    *((_BYTE *)this + 17) = 0;
    if (v37)
      WTF::fastFree(v37, v16, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    *((_QWORD *)this + 1) = v22;
    *((_BYTE *)this + 16) = v23;
    *((_BYTE *)this + 17) = 0;
  }
  if ((v21 & 1) != 0 && (v21 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v21 & 0xFFFFFFFF8, v16, a3, a4, a5, a6, a7, a8);
  if ((v51 & 1) != 0 && (v51 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v51 & 0xFFFFFFFF8, v16, a3, a4, a5, a6, a7, a8);
  if ((v52 & 1) != 0 && (v52 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v52 & 0xFFFFFFFF8, v16, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::DFG::Node::dynamicCastConstant<JSC::JSPromiseConstructor *>(uint64_t a1)
{
  unint64_t v1;
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;

  if (*(unsigned __int16 *)(a1 + 18) > 2u)
    return 0;
  v1 = **(_QWORD **)(a1 + 72);
  if (!v1 || (v1 & 0xFFFE000000000002) != 0)
    return 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v1 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v1 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &JSC::JSPromiseConstructor::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &JSC::JSPromiseConstructor::s_info && v6 != 0);
  }
  if (v5)
    return **(_QWORD **)(a1 + 72);
  else
    return 0;
}

_QWORD *JSC::DFG::ByteCodeParser::handleCreateInternalFieldObject<JSC::OpCreateGenerator>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  JSC::InlineWatchpointSet *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 *v99;
  uint64_t v100;
  uint64_t v101;
  int v102[6];
  uint64_t v103;

  v8 = a3;
  v11 = HIDWORD(a2);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 8);
  v13 = *(_QWORD *)(a1 + 24);
  JSC::DFG::ByteCodeParser::currentNodeOrigin((JSC::DFG::ByteCodeParser *)v102, a1, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)v102;
  *(_QWORD *)v102 = 0;
  v103 = v14;
  v28 = JSC::DFG::Graph::globalObjectFor(v13, &v103, v15, v16, v17, v18, v19, v20);
  if ((v103 & 1) != 0 && (v103 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v103 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
  JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v102, v21, v22, v23, v24, v25, v26, v27);
  v35 = JSC::DFG::ByteCodeParser::get(a1, v11 | (a2 >> 63 << 32), v29, v30, v31, v32, v33, v34);
  v42 = (uint64_t)v35;
  if (*((unsigned __int16 *)v35 + 9) > 2u
    || ((v43 = **((_QWORD **)v35 + 9)) != 0 ? (v44 = (v43 & 0xFFFE000000000002) == 0) : (v44 = 0),
        !v44 || *(_BYTE *)(v43 + 5) != 26))
  {
    v89 = *(_QWORD *)(v12 + 136);
    v90 = *(unsigned __int16 *)(v89 + 24);
    if (!*(_WORD *)(v89 + 24))
      v90 = *(_DWORD *)(v89 + 144);
    v43 = *(_QWORD *)(((v89 + v90 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 * v8);
    if (v43 < 2
      || JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(a1 + 280) + 32), *(_DWORD *)(a1 + 40), 2))
    {
      goto LABEL_26;
    }
    v99 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 24), v43, v91, v92, v93, v39, v40, v41);
    JSC::DFG::ByteCodeParser::addToGraph(a1, 182, (uint64_t)v99, v42, 0, 0, v100, v101);
  }
  v45 = *(_QWORD *)(v43 + 24);
  if ((v45 & 1) == 0)
    goto LABEL_26;
  v46 = v45 & 0xFFFFFFFFFFFFFFFELL;
  if ((v45 & 0xFFFFFFFFFFFFFFFELL) == 0)
    goto LABEL_26;
  v48 = (JSC::InlineWatchpointSet *)(v46 + 32);
  v47 = *(_QWORD *)(v46 + 32);
  v49 = (v47 & 1) != 0 ? (v47 >> 1) & 3 : *(unsigned __int8 *)(v47 + 4);
  if (v49 == 2
    || ((v50 = *(_QWORD *)(v28 + 2336), (v50 & 1) != 0)
      ? (v51 = (v50 >> 1) & 3)
      : (v51 = *(unsigned __int8 *)(v50 + 4)),
        v51 == 2
     || (v52 = *(_DWORD *)(v46 + 40) & 0xFFFFFFFE, !(_DWORD)v52)
     || (v53 = 16 * v52, &JSC::JSGenerator::s_info != (char **)(16 * *(unsigned int *)(16 * v52 + 0x4C)))
     || *(_QWORD *)(16 * v52 + 0x28) != v28))
  {
LABEL_26:
    v94 = JSC::DFG::ByteCodeParser::addToGraph(a1, 9, v42, 0, 0, v39, v40, v41);
    return (_QWORD *)JSC::DFG::ByteCodeParser::set(a1, a2 | (((a2 >> 31) & 1) << 32), (uint64_t)v94, 0, v95, v96, v97, v98);
  }
  JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 24), v46, v36, v37, v38, v39, v40, v41);
  JSC::DFG::DesiredWatchpoints::addLazily((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 136), v48, v54, v55, v56, v57, v58, v59);
  JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 24), v28, v60, v61, v62, v63, v64, v65);
  JSC::DFG::DesiredWatchpoints::addLazily((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 136), (JSC::InlineWatchpointSet *)(v28 + 2336), v66, v67, v68, v69, v70, v71);
  v77 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(a1 + 24), v53, v102, v72, v73, v74, v75, v76);
  v80 = JSC::DFG::ByteCodeParser::addToGraph(a1, 260, v77, 0, 0, 0, v78, v79);
  JSC::DFG::ByteCodeParser::set(a1, a2 | (((a2 >> 31) & 1) << 32), (uint64_t)v80, 0, v81, v82, v83, v84);
  return JSC::DFG::ByteCodeParser::addToGraph(a1, 23, v42, 0, 0, v85, v86, v87);
}

_QWORD *JSC::DFG::ByteCodeParser::handleCreateInternalFieldObject<JSC::OpCreateAsyncGenerator>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  JSC::InlineWatchpointSet *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 *v99;
  uint64_t v100;
  uint64_t v101;
  int v102[6];
  uint64_t v103;

  v8 = a3;
  v11 = HIDWORD(a2);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 8);
  v13 = *(_QWORD *)(a1 + 24);
  JSC::DFG::ByteCodeParser::currentNodeOrigin((JSC::DFG::ByteCodeParser *)v102, a1, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)v102;
  *(_QWORD *)v102 = 0;
  v103 = v14;
  v28 = JSC::DFG::Graph::globalObjectFor(v13, &v103, v15, v16, v17, v18, v19, v20);
  if ((v103 & 1) != 0 && (v103 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v103 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
  JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v102, v21, v22, v23, v24, v25, v26, v27);
  v35 = JSC::DFG::ByteCodeParser::get(a1, v11 | (a2 >> 63 << 32), v29, v30, v31, v32, v33, v34);
  v42 = (uint64_t)v35;
  if (*((unsigned __int16 *)v35 + 9) > 2u
    || ((v43 = **((_QWORD **)v35 + 9)) != 0 ? (v44 = (v43 & 0xFFFE000000000002) == 0) : (v44 = 0),
        !v44 || *(_BYTE *)(v43 + 5) != 26))
  {
    v89 = *(_QWORD *)(v12 + 136);
    v90 = *(unsigned __int16 *)(v89 + 26);
    if (!*(_WORD *)(v89 + 26))
      v90 = *(_DWORD *)(v89 + 148);
    v43 = *(_QWORD *)(((v89 + v90 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 * v8);
    if (v43 < 2
      || JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(a1 + 280) + 32), *(_DWORD *)(a1 + 40), 2))
    {
      goto LABEL_25;
    }
    v99 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 24), v43, v91, v92, v93, v39, v40, v41);
    JSC::DFG::ByteCodeParser::addToGraph(a1, 182, (uint64_t)v99, v42, 0, 0, v100, v101);
  }
  v45 = *(_QWORD *)(v43 + 24);
  if ((v45 & 1) != 0)
  {
    v46 = v45 & 0xFFFFFFFFFFFFFFFELL;
    if ((v45 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      v48 = (JSC::InlineWatchpointSet *)(v46 + 32);
      v47 = *(_QWORD *)(v46 + 32);
      v49 = (v47 & 1) != 0 ? (v47 >> 1) & 3 : *(unsigned __int8 *)(v47 + 4);
      if (v49 != 2)
      {
        v50 = *(_QWORD *)(v28 + 2336);
        v51 = (v50 & 1) != 0 ? (v50 >> 1) & 3 : *(unsigned __int8 *)(v50 + 4);
        if (v51 != 2)
        {
          v52 = *(_DWORD *)(v46 + 40) & 0xFFFFFFFE;
          if ((_DWORD)v52)
          {
            v53 = 16 * v52;
            if (&JSC::JSAsyncGenerator::s_info == (char **)(16 * *(unsigned int *)(16 * v52 + 0x4C))
              && *(_QWORD *)(16 * v52 + 0x28) == v28)
            {
              JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 24), v46, v36, v37, v38, v39, v40, v41);
              JSC::DFG::DesiredWatchpoints::addLazily((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 136), v48, v54, v55, v56, v57, v58, v59);
              JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 24), v28, v60, v61, v62, v63, v64, v65);
              JSC::DFG::DesiredWatchpoints::addLazily((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 136), (JSC::InlineWatchpointSet *)(v28 + 2336), v66, v67, v68, v69, v70, v71);
              v77 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(a1 + 24), v53, v102, v72, v73, v74, v75, v76);
              v80 = JSC::DFG::ByteCodeParser::addToGraph(a1, 261, v77, 0, 0, 0, v78, v79);
              JSC::DFG::ByteCodeParser::set(a1, a2 | (((a2 >> 31) & 1) << 32), (uint64_t)v80, 0, v81, v82, v83, v84);
              return JSC::DFG::ByteCodeParser::addToGraph(a1, 23, v42, 0, 0, v85, v86, v87);
            }
          }
        }
      }
    }
  }
LABEL_25:
  v94 = JSC::DFG::ByteCodeParser::addToGraph(a1, 10, v42, 0, 0, v39, v40, v41);
  return (_QWORD *)JSC::DFG::ByteCodeParser::set(a1, a2 | (((a2 >> 31) & 1) << 32), (uint64_t)v94, 0, v95, v96, v97, v98);
}

_QWORD *JSC::DFG::ByteCodeParser::addVarArgChild(JSC::DFG::ByteCodeParser *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  unint64_t v12;

  v9 = *((_QWORD *)this + 3);
  result = (_QWORD *)(v9 + 152);
  v12 = a2 & 0xFF00FFFFFFFFFFFFLL;
  v11 = *(unsigned int *)(v9 + 164);
  if ((_DWORD)v11 == *(_DWORD *)(v9 + 160))
  {
    result = (_QWORD *)WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, (void *)(v11 + 1), (unint64_t)&v12, a4, a5, a6, a7, a8);
    v11 = *(unsigned int *)(v9 + 164);
    *(_QWORD *)(*(_QWORD *)(v9 + 152) + 8 * v11) = *result;
  }
  else
  {
    *(_QWORD *)(*result + 8 * v11) = a2 & 0xFF00FFFFFFFFFFFFLL;
  }
  *(_DWORD *)(v9 + 164) = v11 + 1;
  ++*((_DWORD *)this + 68);
  return result;
}

uint64_t JSC::DFG::ByteCodeParser::addToGraph(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  JSC::DFG::Node *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  void *v21;
  JSC::DFG::Node *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  const void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;

  v12 = *(_QWORD *)(a1 + 24);
  JSC::DFG::ByteCodeParser::currentNodeOrigin((JSC::DFG::ByteCodeParser *)&v50, a1, a3, a4, a5, a6, a7, a8);
  v13 = *(_DWORD *)(a1 + 272);
  v14 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 164) - v13;
  v15 = (JSC::DFG::Node *)WTF::fastMalloc((WTF *)0x68);
  v16 = v50;
  v17 = v50;
  if ((v50 & 1) != 0)
  {
    v37 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
    if ((v50 & 2) != 0
      || ((v38 = *(unsigned int *)((v50 & 0xFFFFFFFF8) + 8), (_DWORD)v38 != 0x3FFFFFFF)
        ? (v39 = (_DWORD)v38 == -1)
        : (v39 = 1),
          v39))
    {
      v40 = 2;
    }
    else if (v38 >> 28)
    {
      v48 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
      v45 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v45 = v48;
      *(_DWORD *)(v45 + 8) = v38;
      v40 = 1;
      v37 = v45;
    }
    else
    {
      v40 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
      v37 = v38 << 36;
    }
    v17 = v37 | v40;
  }
  v53 = v17;
  v18 = v51;
  v19 = v51;
  if ((v51 & 1) != 0)
  {
    v41 = *(_QWORD *)(v51 & 0xFFFFFFFF8);
    if ((v51 & 2) != 0
      || ((v42 = *(unsigned int *)((v51 & 0xFFFFFFFF8) + 8), (_DWORD)v42 != 0x3FFFFFFF)
        ? (v43 = (_DWORD)v42 == -1)
        : (v43 = 1),
          v43))
    {
      v44 = 2;
    }
    else if (v42 >> 28)
    {
      v47 = *(_QWORD *)(v51 & 0xFFFFFFFF8);
      v49 = *(_DWORD *)((v51 & 0xFFFFFFFF8) + 8);
      v46 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v46 = v47;
      *(_DWORD *)(v46 + 8) = v49;
      v44 = 1;
      v41 = v46;
    }
    else
    {
      v44 = *(_QWORD *)(v51 & 0xFFFFFFFF8);
      v41 = v42 << 36;
    }
    v19 = v41 | v44;
  }
  v54 = v19;
  v55 = v52;
  result = JSC::DFG::Node::Node((uint64_t)v15, 0, a2, (uint64_t)&v53, a3, a4, v14, v13);
  v28 = *(unsigned int *)(v12 + 1060);
  if ((_DWORD)v28)
  {
    v29 = *(_QWORD *)(*(_QWORD *)(v12 + 1048) + 8 * v28 - 8);
    *(_DWORD *)(v12 + 1060) = v28 - 1;
    v30 = *(_QWORD *)(v12 + 1032);
  }
  else
  {
    v29 = *(unsigned int *)(v12 + 1044);
    if ((_DWORD)v29 == *(_DWORD *)(v12 + 1040))
    {
      v31 = v29 + (v29 >> 2);
      if (v31 >= 0x10)
        v32 = v31 + 1;
      else
        v32 = 16;
      if (v32 <= v29 + 1)
        v33 = v29 + 1;
      else
        v33 = v32;
      if (v33 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v34 = *(const void **)(v12 + 1032);
      v35 = (void *)WTF::fastMalloc((WTF *)(8 * v33));
      *(_DWORD *)(v12 + 1040) = v33;
      *(_QWORD *)(v12 + 1032) = v35;
      memcpy(v35, v34, 8 * v29);
      if (v34)
      {
        if (*(const void **)(v12 + 1032) == v34)
        {
          *(_QWORD *)(v12 + 1032) = 0;
          *(_DWORD *)(v12 + 1040) = 0;
        }
        WTF::fastFree((unint64_t)v34, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
      }
      v36 = *(unsigned int *)(v12 + 1044);
      v30 = *(_QWORD *)(v12 + 1032);
      *(_QWORD *)(v30 + 8 * v36) = 0;
      *(_DWORD *)(v12 + 1044) = v36 + 1;
    }
    else
    {
      v30 = *(_QWORD *)(v12 + 1032);
      *(_QWORD *)(v30 + 8 * v29) = 0;
      *(_DWORD *)(v12 + 1044) = v29 + 1;
    }
  }
  *((_DWORD *)v15 + 5) = v29;
  *(_QWORD *)(v30 + 8 * v29) = v15;
  if ((v54 & 1) != 0 && (v54 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v54 & 0xFFFFFFFF8, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
  if ((v53 & 1) != 0 && (v53 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v53 & 0xFFFFFFFF8, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
  if ((v18 & 1) != 0 && (v18 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v18 & 0xFFFFFFFF8, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
  JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)a1, v15, v22, v23, v24, v25, v26, v27);
  *(_DWORD *)(a1 + 272) = 0;
  return (uint64_t)v15;
}

uint64_t JSC::DFG::ByteCodeParser::getArrayMode(uint64_t a1, int *a2, int a3, int8x8_t a4)
{
  unsigned __int8 *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  _BYTE v19[8];
  unsigned __int8 *v20;
  char v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v7 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 16) + 16);
  v22 = 0;
  v20 = v7;
  v21 = 1;
  if (__ldaxr(v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v7);
LABEL_4:
  v22 = 1;
  JSC::ArrayProfile::computeUpdatedPrediction(a2, *(_QWORD *)(*(_QWORD *)(a1 + 280) + 16), a4);
  v15 = JSC::DFG::ArrayMode::fromObserved((uint64_t)v19, (uint64_t)a2, a3, (a2[1] >> 1) & 1);
  if (v22 && v21)
  {
    v16 = v20;
    v17 = __ldxr(v20);
    if (v17 == 1)
    {
      if (!__stlxr(0, v20))
        return v15;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v16, 0, v9, v10, v11, v12, v13, v14);
  }
  return v15;
}

JSC::DFG::Node *JSC::DFG::ByteCodeParser::makeSafe(JSC::DFG::ByteCodeParser *this, JSC::DFG::Node *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  char v7;
  int v9;
  int v10;
  __int16 *v11;
  __int16 v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  char v17;
  __int16 *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;

  v4 = *((_QWORD *)this + 35);
  v5 = *((_DWORD *)this + 10);
  if (JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(v4 + 32), v5, 9))
  {
    v9 = *((_DWORD *)a2 + 14);
    if ((v9 | 0x100) != v9)
    {
      *((_DWORD *)a2 + 14) = v9 | 0x100;
      v5 = *((_DWORD *)this + 10);
    }
  }
  if (JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(v4 + 32), v5, 10))
  {
    v10 = *((_DWORD *)a2 + 14);
    if ((v10 | 0x400) != v10)
      *((_DWORD *)a2 + 14) = v10 | 0x400;
  }
  v6 = *((unsigned __int16 *)a2 + 9);
  v7 = v6 - 41;
  if ((v6 - 41) > 0x2E)
    goto LABEL_7;
  if (((1 << v7) & 0x100000A00FFCLL) != 0)
  {
    v16 = (char *)JSC::CodeBlock::binaryArithProfileForPC(*(_QWORD *)(v4 + 16), (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 56) + 80)+ ((unint64_t)*((unsigned int *)this + 10) >> 2)));
    if (!v16)
    {
      v16 = (char *)JSC::CodeBlock::unaryArithProfileForBytecodeIndex(*(_QWORD *)(*((_QWORD *)this + 35) + 16), *((_DWORD *)this + 10));
      if (!v16)
        return a2;
    }
    v17 = *v16;
    if ((*v16 & 3) != 0)
    {
      v23 = *((_DWORD *)a2 + 14);
      if ((v23 | 0x20) != v23)
        *((_DWORD *)a2 + 14) = v23 | 0x20;
    }
    if ((v17 & 4) != 0)
    {
      v24 = *((_DWORD *)a2 + 14);
      if ((v24 | 0x2000) != v24)
        *((_DWORD *)a2 + 14) = v24 | 0x2000;
    }
    if ((v17 & 0x40) != 0)
    {
      v28 = *((_DWORD *)a2 + 14);
      if ((v28 | 0x800) != v28)
        *((_DWORD *)a2 + 14) = v28 | 0x800;
    }
    if ((v17 & 0x20) == 0)
      goto LABEL_25;
    goto LABEL_26;
  }
  if (((1 << v7) & 0xE0001000003) != 0)
  {
LABEL_13:
    v11 = (__int16 *)JSC::CodeBlock::unaryArithProfileForBytecodeIndex(*(_QWORD *)(v4 + 16), *((_DWORD *)this + 10));
    if (!v11)
      return a2;
    v12 = *v11;
    if ((*v11 & 0x103) != 0)
    {
      v20 = *((_DWORD *)a2 + 14);
      if ((v20 | 0x20) != v20)
        *((_DWORD *)a2 + 14) = v20 | 0x20;
    }
    if ((v12 & 2) != 0
      || JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*((_QWORD *)this + 35) + 32), *((_DWORD *)this + 10), 10))
    {
      v25 = *((_DWORD *)a2 + 14);
      if ((v25 | 0x200) != v25)
        *((_DWORD *)a2 + 14) = v25 | 0x200;
    }
    if ((v12 & 8) != 0
      || JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*((_QWORD *)this + 35) + 32), *((_DWORD *)this + 10), 9))
    {
      v13 = *((_DWORD *)a2 + 14);
      v14 = v13 | 0x80;
      goto LABEL_20;
    }
    goto LABEL_22;
  }
  if (((1 << v7) & 0x400002000000) == 0)
  {
LABEL_7:
    if ((v6 - 319) >= 2)
      return a2;
    goto LABEL_13;
  }
  v18 = (__int16 *)JSC::CodeBlock::binaryArithProfileForPC(*(_QWORD *)(v4 + 16), (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 56) + 80)+ ((unint64_t)*((unsigned int *)this + 10) >> 2)));
  if (!v18)
    return a2;
  v12 = *v18;
  if ((*v18 & 0x10) != 0)
  {
    v19 = *((_DWORD *)a2 + 14);
    if ((v19 | 0x40) != v19)
      *((_DWORD *)a2 + 14) = v19 | 0x40;
  }
  if ((v12 & 8) != 0
    || JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*((_QWORD *)this + 35) + 32), *((_DWORD *)this + 10), 9))
  {
    v22 = *((_DWORD *)a2 + 14);
    if ((v22 | 0x80) != v22)
      *((_DWORD *)a2 + 14) = v22 | 0x80;
  }
  if ((v12 & 2) != 0
    || JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*((_QWORD *)this + 35) + 32), *((_DWORD *)this + 10), 10))
  {
    v21 = *((_DWORD *)a2 + 14);
    if ((v21 | 0x200) != v21)
      *((_DWORD *)a2 + 14) = v21 | 0x200;
  }
  if ((v12 & 3) != 0)
  {
    v13 = *((_DWORD *)a2 + 14);
    v14 = v13 | 0x20;
LABEL_20:
    if (v14 != v13)
      *((_DWORD *)a2 + 14) = v14;
  }
LABEL_22:
  if ((v12 & 4) != 0)
  {
    v26 = *((_DWORD *)a2 + 14);
    if ((v26 | 0x2000) != v26)
      *((_DWORD *)a2 + 14) = v26 | 0x2000;
  }
  if ((v12 & 0x40) != 0)
  {
    v27 = *((_DWORD *)a2 + 14);
    if ((v27 | 0x800) != v27)
      *((_DWORD *)a2 + 14) = v27 | 0x800;
  }
  if ((v12 & 0x20) == 0)
  {
LABEL_25:
    if (!JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*((_QWORD *)this + 35) + 32), *((_DWORD *)this + 10), 28))return a2;
  }
LABEL_26:
  v15 = *((_DWORD *)a2 + 14);
  if ((v15 | 0x1000) != v15)
    *((_DWORD *)a2 + 14) = v15 | 0x1000;
  return a2;
}

uint64_t JSC::DFG::ByteCodeParser::nextOpcodeIndex(JSC::DFG::ByteCodeParser *this, unsigned __int8 *a2)
{
  int v2;
  int v3;
  char v4;
  _BOOL4 v5;
  int v6;
  int v7;

  v2 = *a2;
  v3 = v2;
  if ((v2 | 2) == 0x82)
    v3 = a2[1];
  v4 = v2 == 128;
  if (v2 == 130)
    v4 = 2;
  v5 = v2 == 128 || v2 == 130;
  v6 = JSC::opcodeLengths[v3] << v4;
  if (v5)
    v7 = 2;
  else
    v7 = 1;
  return ((_DWORD)this + 4 * (v6 + v7)) & 0xFFFFFFFC;
}

WTF *JSC::DFG::ByteCodeParser::handlePutAccessorById<JSC::OpPutGetterById>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  WTF *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;

  v10 = HIDWORD(a2);
  result = JSC::DFG::ByteCodeParser::get(a1, a2 | (((a2 >> 31) & 1) << 32), a3, a4, a5, a6, a7, a8);
  v18 = *(_QWORD *)(a1 + 280);
  if (v10 >= *(unsigned int *)(v18 + 52))
  {
    __break(0xC471u);
  }
  else
  {
    v19 = (uint64_t)result;
    v20 = *(unsigned int *)(*(_QWORD *)(v18 + 40) + 4 * v10);
    v21 = JSC::DFG::ByteCodeParser::get(a1, (a3 >> 31) & 0x100000000 | HIDWORD(a3), v12, v13, v14, v15, v16, v17);
    return (WTF *)JSC::DFG::ByteCodeParser::addToGraph(a1, 123, v20, a3, v19, (uint64_t)v21, 0, v22);
  }
  return result;
}

WTF *JSC::DFG::ByteCodeParser::handlePutAccessorById<JSC::OpPutSetterById>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  WTF *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;

  v10 = HIDWORD(a2);
  result = JSC::DFG::ByteCodeParser::get(a1, a2 | (((a2 >> 31) & 1) << 32), a3, a4, a5, a6, a7, a8);
  v18 = *(_QWORD *)(a1 + 280);
  if (v10 >= *(unsigned int *)(v18 + 52))
  {
    __break(0xC471u);
  }
  else
  {
    v19 = (uint64_t)result;
    v20 = *(unsigned int *)(*(_QWORD *)(v18 + 40) + 4 * v10);
    v21 = JSC::DFG::ByteCodeParser::get(a1, (a3 >> 31) & 0x100000000 | HIDWORD(a3), v12, v13, v14, v15, v16, v17);
    return (WTF *)JSC::DFG::ByteCodeParser::addToGraph(a1, 124, v20, a3, v19, (uint64_t)v21, 0, v22);
  }
  return result;
}

_QWORD *JSC::DFG::ByteCodeParser::handlePutAccessorByVal<JSC::OpPutGetterByVal>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;

  v9 = HIDWORD(a2);
  v11 = a2 >> 31;
  v12 = JSC::DFG::ByteCodeParser::get(a1, a2 | (((a2 >> 31) & 1) << 32), a3, a4, a5, a6, a7, a8);
  v19 = JSC::DFG::ByteCodeParser::get(a1, v11 & 0x100000000 | v9, v13, v14, v15, v16, v17, v18);
  v26 = JSC::DFG::ByteCodeParser::get(a1, (a3 >> 31) & 0x100000000 | HIDWORD(a3), v20, v21, v22, v23, v24, v25);
  return JSC::DFG::ByteCodeParser::addToGraph(a1, 126, a3, (uint64_t)v12, (uint64_t)v19, (uint64_t)v26, v27, v28);
}

_QWORD *JSC::DFG::ByteCodeParser::handlePutAccessorByVal<JSC::OpPutSetterByVal>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;

  v9 = HIDWORD(a2);
  v11 = a2 >> 31;
  v12 = JSC::DFG::ByteCodeParser::get(a1, a2 | (((a2 >> 31) & 1) << 32), a3, a4, a5, a6, a7, a8);
  v19 = JSC::DFG::ByteCodeParser::get(a1, v11 & 0x100000000 | v9, v13, v14, v15, v16, v17, v18);
  v26 = JSC::DFG::ByteCodeParser::get(a1, (a3 >> 31) & 0x100000000 | HIDWORD(a3), v20, v21, v22, v23, v24, v25);
  return JSC::DFG::ByteCodeParser::addToGraph(a1, 127, a3, (uint64_t)v12, (uint64_t)v19, (uint64_t)v26, v27, v28);
}

void JSC::DFG::ByteCodeParser::flushForTerminal(JSC::DFG::ByteCodeParser *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::DFG::ByteCodeParser *v22;
  JSC::DFG::ByteCodeParser *v23;
  _QWORD v24[4];
  char v25;

  v22 = this;
  v23 = this;
  v9 = *((unsigned int *)this + 10);
  v10 = *(_QWORD *)(*((_QWORD *)this + 35) + 24);
  if ((_DWORD)v9 == 0x3FFFFFFF || (_DWORD)v9 == -1)
  {
    v12 = 2;
  }
  else if (v9 >> 28)
  {
    v21 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v21 = v10;
    *(_DWORD *)(v21 + 8) = v9;
    v12 = 1;
    v10 = v21;
  }
  else
  {
    v12 = *(_QWORD *)(*((_QWORD *)this + 35) + 24);
    v10 = v9 << 36;
  }
  v13 = v10 | v12;
  v25 = 0;
  v24[0] = &v23;
  v24[1] = this;
  v24[2] = &v25;
  v24[3] = &v22;
  JSC::CodeOrigin::walkUpInlineStack<void JSC::DFG::ByteCodeParser::flushForTerminalImpl<JSC::DFG::ByteCodeParser::flushForTerminal(void)::{lambda(JSC::InlineCallFrame *,JSC::Operand)#1},JSC::DFG::ByteCodeParser::flushForTerminal(void)::{lambda(JSC::InlineCallFrame *,JSC::Operand)#2}>(JSC::CodeOrigin,JSC::DFG::ByteCodeParser::flushForTerminal(void)::{lambda(JSC::InlineCallFrame *,JSC::Operand)#1} const&,JSC::DFG::ByteCodeParser::flushForTerminal(void)::{lambda(JSC::InlineCallFrame *,JSC::Operand)#2} const&)::{lambda(JSC::CodeOrigin)#1}>(v13, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
}

void JSC::DFG::ByteCodeParser::flushIfTerminal(JSC::DFG::ByteCodeParser *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t i;
  unsigned int v10;

  v8 = *((_DWORD *)this + 10) >> 2;
  if (v8 >= *(_DWORD *)(a2 + 16))
  {
    for (i = 32 * *(unsigned int *)(a2 + 12); i; i -= 32)
    {
      v10 = *(_DWORD *)(*(_QWORD *)a2 - 16 + i);
      if (v8 < v10)
        return;
    }
    JSC::DFG::ByteCodeParser::flushForTerminal(this, a2, a3, a4, a5, a6, a7, a8);
  }
}

unsigned __int8 *JSC::DFG::ByteCodeParser::keepUsesOfCurrentInstructionAlive(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  unint64_t v14;
  unsigned int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  _QWORD v18[3];

  v9 = a3;
  v10 = a2;
  v11 = *a2;
  if ((v11 | 2) == 0x82)
    v11 = a2[1];
  if (v11 != 131)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 16);
    if ((*(_BYTE *)(*(_QWORD *)(v12 + 56) + 43) & 1) != 0)
    {
      v14 = *(unsigned int *)(v12 + 48);
      if ((_DWORD)v14 != 0x3FFFFFFF)
      {
        v16 = v10;
        v17 = a1;
        v15 = a3;
        JSC::DFG::ByteCodeParser::get(a1, v14 & 0xFFFFFFFEFFFFFFFFLL | (((v14 >> 31) & 1) << 32), a3, a4, a5, a6, a7, a8);
        v10 = v16;
        a1 = v17;
        v9 = v15;
      }
    }
  }
  v18[0] = WTF::ScopedLambdaFunctor<void ()(JSC::VirtualRegister),JSC::DFG::ByteCodeParser::keepUsesOfCurrentInstructionAlive(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,unsigned char)::{lambda(JSC::VirtualRegister)#1}>::implFunction;
  v18[1] = v18;
  v18[2] = a1;
  return JSC::computeUsesForBytecodeIndexImpl(v10, (const unsigned __int8 *)v9, (uint64_t)v18, a9);
}

void JSC::DFG::ByteCodeParser::progressToNextCheckpoint(JSC::DFG::ByteCodeParser *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  *((_DWORD *)this + 10) = ((*((_DWORD *)this + 10) & 3) + 1) | *((_DWORD *)this + 10) & 0xFFFFFFFC;
  *((_BYTE *)this + 64) = 1;
  if (*((_DWORD *)this + 95))
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *((_QWORD *)this + 46) + v9;
      v12 = *(_QWORD *)(v11 + 8);
      v13 = *(_QWORD *)(v11 + 16);
      v14 = *(unsigned int *)(v11 + 24);
      if (*(_DWORD *)(v11 + 12))
        JSC::DFG::ByteCodeParser::setLocalOrTmp(this, (const JSC::CodeOrigin *)v11, v12, v13, v14, a6, a7, a8);
      else
        JSC::DFG::ByteCodeParser::setArgument(this, (uint64_t *)v11, v12, v13, v14, a6, a7, a8);
      ++v10;
      v19 = *((unsigned int *)this + 95);
      v9 += 32;
    }
    while (v10 < v19);
    if ((_DWORD)v19)
    {
      v20 = (uint64_t *)*((_QWORD *)this + 46);
      v21 = 32 * v19;
      do
      {
        v22 = *v20;
        if ((*v20 & 1) != 0 && (v22 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v22 & 0xFFFFFFFF8, v15, v16, v17, v18, a6, a7, a8);
        v20 += 4;
        v21 -= 32;
      }
      while (v21);
    }
  }
  *((_DWORD *)this + 95) = 0;
}

uint64_t JSC::DFG::ByteCodeParser::getPredictionWithoutOSRExit(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  unsigned int v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  BOOL v30;
  int v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unsigned int v38;
  char v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  char v54[32];
  uint64_t v55;

  v9 = a2;
  v55 = *MEMORY[0x1E0C80C00];
  v53 = (int)a2;
  v11 = (uint64_t *)a1[35];
  v12 = v11[3];
  if ((_DWORD)a2 == 0x3FFFFFFF || (_DWORD)a2 == -1)
  {
    v14 = 2;
  }
  else if (a2 >> 28)
  {
    v49 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v49 = v12;
    *(_DWORD *)(v49 + 8) = v9;
    v14 = 1;
    v12 = v49;
  }
  else
  {
    v14 = v11[3];
    v12 = (_QWORD)a2 << 36;
  }
  v15 = v12 | v14;
  v52 = v15;
  v16 = v11[2];
  v17 = v15 >> 36;
  if ((v15 & 2) != 0)
  {
    LODWORD(v18) = -1;
  }
  else if ((v15 & 1) != 0)
  {
    LODWORD(v18) = *(_DWORD *)((v15 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v18 = v15 >> 36;
  }
  v19 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v16 + 56) + 80) + ((unint64_t)v18 >> 2));
  v20 = *v19;
  if ((v20 | 2) == 0x82)
    v20 = v19[1];
  if (v20 == 24)
  {
    v23 = 0x3FFFFFFFFFF7;
    goto LABEL_20;
  }
  v21 = v11[19];
  if (v21)
  {
    v43 = *(_DWORD *)(v21 - 8);
    v44 = 9 * ((~(v9 << 15) + v9) ^ ((~(v9 << 15) + v9) >> 10));
    v45 = (v44 ^ (v44 >> 6)) + ~((v44 ^ (v44 >> 6)) << 11);
    v46 = v43 & (v45 ^ HIWORD(v45));
    v47 = *(_DWORD *)(v21 + 16 * v46);
    if (v47 == v9)
    {
LABEL_52:
      v22 = *(unint64_t **)(v21 + 16 * v46 + 8);
      goto LABEL_15;
    }
    v48 = 1;
    while (v47 != -1)
    {
      v46 = ((_DWORD)v46 + v48) & v43;
      v47 = *(_DWORD *)(v21 + 16 * v46);
      ++v48;
      if (v47 == v9)
        goto LABEL_52;
    }
  }
  v22 = 0;
LABEL_15:
  if ((v15 & 2) != 0)
  {
    LODWORD(v17) = -1;
  }
  else if ((v15 & 1) != 0)
  {
    LODWORD(v17) = *(_DWORD *)((v15 & 0xFFFFFFFF8) + 8);
  }
  v23 = JSC::CodeBlock::valueProfilePredictionForBytecodeIndex(v11[2], a9, (uint64_t)v54, v17, v22);
  v24 = *(_QWORD *)(*a1 + 93376);
  if (v24)
  {
    v23 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, unint64_t))(*(_QWORD *)v24 + 16))(v24, v16, &v52, v23) & 0x3F73FFFFFFF7;
    v15 = v52;
  }
LABEL_20:
  if ((v15 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v15 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if (!v23)
  {
    v26 = (uint64_t)(a1 + 35);
    v27 = a1[35];
    v28 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v27 + 16) + 56) + 80) + (v9 >> 2));
    v29 = *v28;
    if ((v29 | 2) == 0x82)
      v29 = v28[1];
    v30 = v29 > 0xB;
    v31 = (1 << v29) & 0xA01;
    if (v30 || v31 == 0)
    {
      return 0;
    }
    else
    {
      v33 = *(_QWORD *)(v27 + 24);
      if (v33)
      {
        do
        {
          v34 = v33;
          v35 = *(_QWORD *)(v33 + 16);
          v36 = *(_QWORD *)(v33 + 24) >> 60;
          v37 = (uint64_t *)(v35 & 0xFFFFFFFF8);
          v33 = v35 & 0xFFFFFFFF8;
          if ((v35 & 1) != 0)
            v33 = *v37;
          v38 = (v36 < 0xC) & (0x824u >> v36);
          if (v33)
            v39 = v38;
          else
            v39 = 0;
        }
        while ((v39 & 1) != 0);
        v23 = 0x3FFFFFFFFFF7;
        if ((v38 & 1) == 0)
        {
          v40 = (uint64_t *)(v34 + 16);
          if ((v35 & 1) != 0)
          {
            v50 = *v37;
            do
            {
              v41 = *(_QWORD *)v26;
              v51 = *(_QWORD *)(*(_QWORD *)v26 + 24);
              v26 = *(_QWORD *)v26 + 208;
            }
            while (v51 != v50);
          }
          else
          {
            do
            {
              v41 = *(_QWORD *)v26;
              v42 = *(uint64_t **)(*(_QWORD *)v26 + 24);
              v26 = *(_QWORD *)v26 + 208;
            }
            while (v42 != v37);
          }
          return JSC::DFG::ByteCodeParser::getPredictionWithoutOSRExit(JSC::BytecodeIndex)::{lambda(JSC::DFG::ByteCodeParser::InlineStackEntry *,JSC::CodeOrigin const&)#1}::operator()(&v53, (uint64_t)a1, v41, v40, a9);
        }
      }
      else
      {
        return 0x3FFFFFFFFFF7;
      }
    }
  }
  return v23;
}

WTF *JSC::DFG::ByteCodeParser::jsConstant(JSC::DFG::ByteCodeParser *this, JSC::DFG::FrozenValue *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  const JSC::CodeOrigin *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  JSC::DFG::Node *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *result;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  void *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  WTF *v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  char v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v10 = *((_QWORD *)this + 3);
  if ((*((_BYTE *)this + 48) & 2) != 0)
  {
    v11 = *((unsigned int *)this + 10);
    v12 = *(_QWORD *)(*((_QWORD *)this + 35) + 24);
    if ((_DWORD)v11 == 0x3FFFFFFF || (_DWORD)v11 == -1)
    {
      v14 = 2;
    }
    else if (v11 >> 28)
    {
      v55 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v55 = v12;
      *(_DWORD *)(v55 + 8) = v11;
      v14 = 1;
      v12 = v55;
    }
    else
    {
      v14 = *(_QWORD *)(*((_QWORD *)this + 35) + 24);
      v12 = v11 << 36;
    }
    v89 = v12 | v14;
  }
  else
  {
    JSC::CodeOrigin::CodeOrigin(&v89, (JSC::DFG::ByteCodeParser *)((char *)this + 48));
  }
  v15 = (JSC::DFG::ByteCodeParser *)((char *)this + 56);
  if ((*((_BYTE *)this + 56) & 2) != 0)
  {
    v16 = *((unsigned int *)this + 10);
    v17 = *(_QWORD *)(*((_QWORD *)this + 35) + 24);
    if ((_DWORD)v16 == 0x3FFFFFFF || (_DWORD)v16 == -1)
    {
      v19 = 2;
    }
    else if (v16 >> 28)
    {
      v56 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v56 = v17;
      *(_DWORD *)(v56 + 8) = v16;
      v19 = 1;
      v17 = v56;
    }
    else
    {
      v19 = *(_QWORD *)(*((_QWORD *)this + 35) + 24);
      v17 = v16 << 36;
    }
    v88 = v17 | v19;
  }
  else
  {
    JSC::CodeOrigin::CodeOrigin(&v88, v15);
  }
  v20 = v89;
  if ((v89 & 1) != 0)
  {
    v39 = *(_QWORD *)(v89 & 0xFFFFFFFF8);
    if ((v89 & 2) != 0
      || ((v40 = *(unsigned int *)((v89 & 0xFFFFFFFF8) + 8), (_DWORD)v40 != 0x3FFFFFFF)
        ? (v41 = (_DWORD)v40 == -1)
        : (v41 = 1),
          v41))
    {
      v42 = 2;
    }
    else if (v40 >> 28)
    {
      v67 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v67 = v39;
      *(_DWORD *)(v67 + 8) = v40;
      v42 = 1;
      v39 = v67;
    }
    else
    {
      v42 = *(_QWORD *)(v89 & 0xFFFFFFFF8);
      v39 = v40 << 36;
    }
    v20 = v39 | v42;
  }
  v21 = v88;
  if ((v88 & 1) != 0)
  {
    v43 = *(_QWORD *)(v88 & 0xFFFFFFFF8);
    if ((v88 & 2) != 0
      || ((v44 = *(unsigned int *)((v88 & 0xFFFFFFFF8) + 8), (_DWORD)v44 != 0x3FFFFFFF)
        ? (v45 = (_DWORD)v44 == -1)
        : (v45 = 1),
          v45))
    {
      v46 = 2;
    }
    else if (v44 >> 28)
    {
      v68 = *(_DWORD *)((v88 & 0xFFFFFFFF8) + 8);
      v69 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v69 = v43;
      *(_DWORD *)(v69 + 8) = v68;
      v46 = 1;
      v43 = v69;
    }
    else
    {
      v46 = *(_QWORD *)(v88 & 0xFFFFFFFF8);
      v43 = v44 << 36;
    }
    v21 = v43 | v46;
  }
  v22 = *((_BYTE *)this + 64);
  v23 = v20;
  if ((v20 & 1) != 0)
  {
    v47 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
    if ((v20 & 2) != 0
      || ((v48 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v48 != 0x3FFFFFFF)
        ? (v49 = (_DWORD)v48 == -1)
        : (v49 = 1),
          v49))
    {
      v50 = 2;
    }
    else if (v48 >> 28)
    {
      v79 = *((_BYTE *)this + 64);
      v77 = v21;
      v70 = *(_DWORD *)((v20 & 0xFFFFFFFF8) + 8);
      v71 = WTF::fastMalloc((WTF *)0x10);
      v21 = v77;
      v22 = v79;
      *(_QWORD *)v71 = v47;
      *(_DWORD *)(v71 + 8) = v70;
      v50 = 1;
      v47 = v71;
    }
    else
    {
      v50 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v47 = v48 << 36;
    }
    v23 = v47 | v50;
  }
  v81 = v23;
  if ((v21 & 1) != 0)
  {
    v51 = v21 & 0xFFFFFFFF8;
    v52 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
    if ((v21 & 2) != 0
      || (v53 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v53 == 0x3FFFFFFF)
      || (_DWORD)v53 == -1)
    {
      v54 = 2;
    }
    else if (v53 >> 28)
    {
      v72 = v52;
      v80 = v22;
      v73 = v53;
      v52 = WTF::fastMalloc((WTF *)0x10);
      v22 = v80;
      *(_QWORD *)v52 = v72;
      *(_DWORD *)(v52 + 8) = v73;
      v54 = 1;
    }
    else
    {
      v54 = v52;
      v52 = v53 << 36;
    }
    v82 = v52 | v54;
    v83 = v22;
    v84 = 0;
    if (v51)
      WTF::fastFree(v51, v15, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v82 = v21;
    v83 = v22;
    v84 = 0;
  }
  if ((v20 & 1) != 0 && (v20 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v20 & 0xFFFFFFFF8, v15, a3, a4, a5, a6, a7, a8);
  if ((v88 & 1) != 0 && (v88 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v88 & 0xFFFFFFFF8, v15, a3, a4, a5, a6, a7, a8);
  if ((v89 & 1) != 0 && (v89 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v89 & 0xFFFFFFFF8, v15, a3, a4, a5, a6, a7, a8);
  v88 = 0;
  v89 = (uint64_t)a2;
  v86 = 0;
  v87 = 0;
  v85 = 0;
  v31 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(v10 + 1032, &v85, (uint64_t)&v81, (uint64_t)&v89, &v88, &v87, &v86, a8);
  if ((v82 & 1) != 0 && (v82 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v82 & 0xFFFFFFFF8, v24, (uint64_t)v25, v26, v27, v28, v29, v30);
  if ((v81 & 1) != 0 && (v81 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v81 & 0xFFFFFFFF8, v24, (uint64_t)v25, v26, v27, v28, v29, v30);
  v32 = *(unsigned __int16 *)(v31 + 18);
  *((_BYTE *)this + 457) |= v32 == 379;
  v33 = *((_QWORD *)this + 4);
  v89 = v31;
  v34 = (_QWORD *)(v33 + 208);
  v35 = *(unsigned int *)(v33 + 220);
  if ((_DWORD)v35 == *(_DWORD *)(v33 + 216))
  {
    v38 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)&v89);
    v35 = *(unsigned int *)(v33 + 220);
    *(_QWORD *)(*(_QWORD *)(v33 + 208) + 8 * v35) = *v38;
    v32 = *(unsigned __int16 *)(v31 + 18);
  }
  else
  {
    *(_QWORD *)(*v34 + 8 * v35) = v31;
  }
  *(_DWORD *)(v33 + 220) = v35 + 1;
  v36 = *((_QWORD *)this + 3);
  if (v32 == 386)
  {
    *(_DWORD *)(v31 + 48) = ~*(_DWORD *)(v36 + 308);
    v57 = *(unsigned int *)(v36 + 308);
    v58 = v57 + 2;
    v59 = *(unsigned int *)(v36 + 304);
    result = *(WTF **)(v36 + 296);
    if (v57 + 2 > v59)
    {
      v78 = *(WTF **)(v36 + 296);
      v60 = v59 + (v59 >> 2);
      if (v60 >= 0x10)
        v61 = v60 + 1;
      else
        v61 = 16;
      if (v61 <= v58)
        v61 = v57 + 2;
      if (v61 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v62 = v61;
      result = (WTF *)WTF::fastMalloc((WTF *)(8 * v61));
      *(_DWORD *)(v36 + 304) = v62;
      *(_QWORD *)(v36 + 296) = result;
      if ((_DWORD)v57)
      {
        v74 = 8 * v57;
        v75 = v78;
        do
        {
          v76 = *(_QWORD *)v75;
          v75 = (WTF *)((char *)v75 + 8);
          *(_QWORD *)result = v76;
          result = (WTF *)((char *)result + 8);
          v74 -= 8;
        }
        while (v74);
        result = *(WTF **)(v36 + 296);
      }
      if (v78)
      {
        if (result == v78)
        {
          *(_QWORD *)(v36 + 296) = 0;
          *(_DWORD *)(v36 + 304) = 0;
        }
        WTF::fastFree((unint64_t)v78, v63, (uint64_t)v25, v26, v27, v28, v29, v30);
        result = *(WTF **)(v36 + 296);
      }
    }
    if (result)
    {
      v64 = *(unsigned int *)(v36 + 308);
      if (v58 != v64)
      {
        v65 = (_QWORD *)((char *)result + 8 * v64);
        v66 = 8 * v57 - 8 * v64 + 16;
        do
        {
          *v65++ = 0x3FFFFFFF00000000;
          v66 -= 8;
        }
        while (v66);
      }
    }
    *(_DWORD *)(v36 + 308) = v58;
    v36 = *((_QWORD *)this + 3);
  }
  if (JSC::DFG::clobbersExitState((JSC::DFG *)v36, (JSC::DFG::Graph *)v31, v25, v26, v27, v28, v29, v30))
    *((_BYTE *)this + 64) = 0;
  return (WTF *)v31;
}

uint64_t JSC::DFG::ByteCodeParser::handleNewFunc<JSC::OpNewAsyncGeneratorFunc>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;

  v8 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 16) + 176);
  if (*v8 <= a3)
  {
    result = 146;
    __break(0xC471u);
  }
  else
  {
    v11 = a2 >> 31;
    v12 = JSC::DFG::Graph::freezeStrong(*(_QWORD *)(a1 + 24), *(_QWORD *)&v8[2 * a3 + 2], a3, a4, a5, a6, a7, a8);
    v19 = JSC::DFG::ByteCodeParser::get(a1, v11 & 0x100000000 | HIDWORD(a2), v13, v14, v15, v16, v17, v18);
    v22 = JSC::DFG::ByteCodeParser::addToGraph(a1, 361, (uint64_t)v12, (uint64_t)v19, 0, 0, v20, v21);
    JSC::DFG::ByteCodeParser::set(a1, a2 | ((v11 & 1) << 32), (uint64_t)v22, 0, v23, v24, v25, v26);
    return (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(a1, 23, (uint64_t)v19, 0, 0, v27, v28, v29);
  }
  return result;
}

uint64_t JSC::DFG::ByteCodeParser::handleNewFunc<JSC::OpNewGeneratorFunc>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;

  v8 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 16) + 176);
  if (*v8 <= a3)
  {
    result = 146;
    __break(0xC471u);
  }
  else
  {
    v11 = a2 >> 31;
    v12 = JSC::DFG::Graph::freezeStrong(*(_QWORD *)(a1 + 24), *(_QWORD *)&v8[2 * a3 + 2], a3, a4, a5, a6, a7, a8);
    v19 = JSC::DFG::ByteCodeParser::get(a1, v11 & 0x100000000 | HIDWORD(a2), v13, v14, v15, v16, v17, v18);
    v22 = JSC::DFG::ByteCodeParser::addToGraph(a1, 360, (uint64_t)v12, (uint64_t)v19, 0, 0, v20, v21);
    JSC::DFG::ByteCodeParser::set(a1, a2 | ((v11 & 1) << 32), (uint64_t)v22, 0, v23, v24, v25, v26);
    return (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(a1, 23, (uint64_t)v19, 0, 0, v27, v28, v29);
  }
  return result;
}

uint64_t JSC::DFG::ByteCodeParser::handleNewFunc<JSC::OpNewAsyncFunc>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;

  v8 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 16) + 176);
  if (*v8 <= a3)
  {
    result = 146;
    __break(0xC471u);
  }
  else
  {
    v11 = a2 >> 31;
    v12 = JSC::DFG::Graph::freezeStrong(*(_QWORD *)(a1 + 24), *(_QWORD *)&v8[2 * a3 + 2], a3, a4, a5, a6, a7, a8);
    v19 = JSC::DFG::ByteCodeParser::get(a1, v11 & 0x100000000 | HIDWORD(a2), v13, v14, v15, v16, v17, v18);
    v22 = JSC::DFG::ByteCodeParser::addToGraph(a1, 362, (uint64_t)v12, (uint64_t)v19, 0, 0, v20, v21);
    JSC::DFG::ByteCodeParser::set(a1, a2 | ((v11 & 1) << 32), (uint64_t)v22, 0, v23, v24, v25, v26);
    return (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(a1, 23, (uint64_t)v19, 0, 0, v27, v28, v29);
  }
  return result;
}

uint64_t JSC::DFG::ByteCodeParser::handleNewFuncExp<JSC::OpNewGeneratorFuncExp>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;

  v8 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 16) + 184);
  if (*v8 <= a3)
  {
    result = 146;
    __break(0xC471u);
  }
  else
  {
    v11 = a2 >> 31;
    v12 = JSC::DFG::Graph::freezeStrong(*(_QWORD *)(a1 + 24), *(_QWORD *)&v8[2 * a3 + 2], a3, a4, a5, a6, a7, a8);
    v19 = JSC::DFG::ByteCodeParser::get(a1, v11 & 0x100000000 | HIDWORD(a2), v13, v14, v15, v16, v17, v18);
    v22 = JSC::DFG::ByteCodeParser::addToGraph(a1, 360, (uint64_t)v12, (uint64_t)v19, 0, 0, v20, v21);
    JSC::DFG::ByteCodeParser::set(a1, a2 | ((v11 & 1) << 32), (uint64_t)v22, 0, v23, v24, v25, v26);
    return (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(a1, 23, (uint64_t)v19, 0, 0, v27, v28, v29);
  }
  return result;
}

uint64_t JSC::DFG::ByteCodeParser::handleNewFuncExp<JSC::OpNewAsyncGeneratorFuncExp>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;

  v8 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 16) + 184);
  if (*v8 <= a3)
  {
    result = 146;
    __break(0xC471u);
  }
  else
  {
    v11 = a2 >> 31;
    v12 = JSC::DFG::Graph::freezeStrong(*(_QWORD *)(a1 + 24), *(_QWORD *)&v8[2 * a3 + 2], a3, a4, a5, a6, a7, a8);
    v19 = JSC::DFG::ByteCodeParser::get(a1, v11 & 0x100000000 | HIDWORD(a2), v13, v14, v15, v16, v17, v18);
    v22 = JSC::DFG::ByteCodeParser::addToGraph(a1, 361, (uint64_t)v12, (uint64_t)v19, 0, 0, v20, v21);
    JSC::DFG::ByteCodeParser::set(a1, a2 | ((v11 & 1) << 32), (uint64_t)v22, 0, v23, v24, v25, v26);
    return (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(a1, 23, (uint64_t)v19, 0, 0, v27, v28, v29);
  }
  return result;
}

uint64_t JSC::DFG::ByteCodeParser::handleNewFuncExp<JSC::OpNewAsyncFuncExp>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;

  v8 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 16) + 184);
  if (*v8 <= a3)
  {
    result = 146;
    __break(0xC471u);
  }
  else
  {
    v11 = a2 >> 31;
    v12 = JSC::DFG::Graph::freezeStrong(*(_QWORD *)(a1 + 24), *(_QWORD *)&v8[2 * a3 + 2], a3, a4, a5, a6, a7, a8);
    v19 = JSC::DFG::ByteCodeParser::get(a1, v11 & 0x100000000 | HIDWORD(a2), v13, v14, v15, v16, v17, v18);
    v22 = JSC::DFG::ByteCodeParser::addToGraph(a1, 362, (uint64_t)v12, (uint64_t)v19, 0, 0, v20, v21);
    JSC::DFG::ByteCodeParser::set(a1, a2 | ((v11 & 1) << 32), (uint64_t)v22, 0, v23, v24, v25, v26);
    return (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(a1, 23, (uint64_t)v19, 0, 0, v27, v28, v29);
  }
  return result;
}

uint64_t JSC::DFG::ByteCodeParser::linkBlocks(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  unsigned int v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = *(unsigned int *)(a2 + 12);
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)result + 8 * v3);
      v6 = *(unsigned int *)(v5 + 220);
      v7 = v6 - 1;
      do
      {
        if (v7 >= v6)
        {
          __break(0xC471u);
          JUMPOUT(0x19832A544);
        }
        v8 = *(_QWORD *)(*(_QWORD *)(v5 + 208) + 8 * v7);
        v9 = *(unsigned __int16 *)(v8 + 18);
        --v7;
      }
      while ((v9 - 364) > 0xB);
      switch(v9)
      {
        case 365:
          v10 = *(_DWORD **)(v8 + 72);
          v11 = *(_QWORD **)a2;
          if (v4 < 2)
          {
            v12 = 0;
LABEL_15:
            if (v12 >= v4)
            {
              __break(0xC471u);
              JUMPOUT(0x19832A54CLL);
            }
            v17 = v11[v12];
          }
          else
          {
            v12 = 0;
            v13 = 4 * *v10;
            v14 = v4;
            while (1)
            {
              v15 = v14 - 1;
              v16 = v12 + ((v14 - 1) >> 1);
              if (v16 >= v4)
              {
                __break(0xC471u);
                JUMPOUT(0x19832A52CLL);
              }
              v17 = v11[v16];
              v18 = *(_DWORD *)(v17 + 4);
              if (v18 == v13)
                break;
              v14 -= (v15 >> 1) + 1;
              if (v18 <= v13)
              {
                v19 = (v15 >> 1) + 1;
              }
              else
              {
                v14 = v15 >> 1;
                v19 = 0;
              }
              v12 += v19;
              if (v14 <= 1)
                goto LABEL_15;
            }
          }
          *(_QWORD *)v10 = v17;
          v20 = *(_QWORD **)a2;
          if (v4 >= 2)
          {
            v21 = 0;
            v22 = 4 * v10[4];
            v23 = v4;
            while (1)
            {
              v24 = v23 - 1;
              v25 = v21 + ((v23 - 1) >> 1);
              if (v25 >= v4)
              {
                __break(0xC471u);
                JUMPOUT(0x19832A534);
              }
              v26 = v20[v25];
              v27 = *(_DWORD *)(v26 + 4);
              if (v27 == v22)
                goto LABEL_27;
              v23 -= (v24 >> 1) + 1;
              if (v27 <= v22)
              {
                v28 = (v24 >> 1) + 1;
              }
              else
              {
                v23 = v24 >> 1;
                v28 = 0;
              }
              v21 += v28;
              if (v23 <= 1)
                goto LABEL_25;
            }
          }
          v21 = 0;
LABEL_25:
          if (v21 >= v4)
          {
            __break(0xC471u);
            JUMPOUT(0x19832A554);
          }
          break;
        case 364:
          v29 = *(_QWORD **)a2;
          if (v4 < 2)
          {
            v30 = 0;
LABEL_39:
            if (v30 >= v4)
            {
              __break(0xC471u);
              JUMPOUT(0x19832A55CLL);
            }
            v35 = v29[v30];
          }
          else
          {
            v30 = 0;
            v31 = 4 * *(_DWORD *)(v8 + 72);
            v32 = v4;
            while (1)
            {
              v33 = v32 - 1;
              v34 = v30 + ((v32 - 1) >> 1);
              if (v34 >= v4)
              {
                __break(0xC471u);
                JUMPOUT(0x19832A53CLL);
              }
              v35 = v29[v34];
              v36 = *(_DWORD *)(v35 + 4);
              if (v36 == v31)
                break;
              v32 -= (v33 >> 1) + 1;
              if (v36 <= v31)
              {
                v37 = (v33 >> 1) + 1;
              }
              else
              {
                v32 = v33 >> 1;
                v37 = 0;
              }
              v30 += v37;
              if (v32 <= 1)
                goto LABEL_39;
            }
          }
          *(_QWORD *)(v8 + 72) = v35;
          goto LABEL_28;
        case 366:
          v10 = *(_DWORD **)(v8 + 72);
          v39 = v10[3];
          if ((_DWORD)v39)
          {
            v57 = *(_QWORD *)v10;
            if (v4 >= 2)
            {
              while (1)
              {
                v38 = 0;
                LODWORD(v39) = v39 - 1;
                v40 = v57 + 32 * v39;
                v42 = *(_DWORD *)(v40 + 16);
                v41 = (_QWORD *)(v40 + 16);
                v43 = 4 * v42;
                v44 = *(_QWORD **)a2;
                v45 = v4;
                do
                {
                  v46 = v45 - 1;
                  v47 = v38 + ((v45 - 1) >> 1);
                  if (v47 >= v4)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19832A564);
                  }
                  v48 = v44[v47];
                  v49 = *(_DWORD *)(v48 + 4);
                  if (v49 == v43)
                    goto LABEL_54;
                  v45 -= (v46 >> 1) + 1;
                  if (v49 <= v43)
                  {
                    v50 = (v46 >> 1) + 1;
                  }
                  else
                  {
                    v45 = v46 >> 1;
                    v50 = 0;
                  }
                  v38 += v50;
                }
                while (v45 > 1);
                if (v38 >= v4)
                  break;
                v48 = v44[v38];
LABEL_54:
                *v41 = v48;
                if (!(_DWORD)v39)
                  goto LABEL_55;
              }
LABEL_84:
              __break(0xC471u);
              JUMPOUT(0x19832A4B0);
            }
            if (!(_DWORD)v4)
              goto LABEL_84;
            v58 = v39 - 1;
            do
            {
              v59 = v58;
              *(_QWORD *)(v57 + 32 * v58-- + 16) = **(_QWORD **)a2;
            }
            while (v59);
          }
LABEL_55:
          v20 = *(_QWORD **)a2;
          if (v4 >= 2)
          {
            v21 = 0;
            v51 = 4 * v10[4];
            v52 = v4;
            while (1)
            {
              v53 = v52 - 1;
              v54 = v21 + ((v52 - 1) >> 1);
              if (v54 >= v4)
              {
                __break(0xC471u);
                JUMPOUT(0x19832A56CLL);
              }
              v26 = v20[v54];
              v55 = *(_DWORD *)(v26 + 4);
              if (v55 == v51)
                goto LABEL_27;
              v52 -= (v53 >> 1) + 1;
              if (v55 <= v51)
              {
                v56 = (v53 >> 1) + 1;
              }
              else
              {
                v52 = v53 >> 1;
                v56 = 0;
              }
              v21 += v56;
              if (v52 <= 1)
                goto LABEL_63;
            }
          }
          v21 = 0;
LABEL_63:
          if (v21 >= v4)
            goto LABEL_84;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x19832A524);
      }
      v26 = v20[v21];
LABEL_27:
      *((_QWORD *)v10 + 2) = v26;
LABEL_28:
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t JSC::DFG::ByteCodeParser::InlineStackEntry::InlineStackEntry(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10)
{
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v31;
  int v32;
  char **v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  BOOL v40;
  unsigned __int8 *v41;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  _BYTE *v50;
  unsigned int *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  _BYTE *v57;
  unsigned int *v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t **v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  _DWORD *v78;
  unint64_t v79;
  unsigned int *v80;
  uint64_t v81;
  _BYTE *v82;
  unsigned int *v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t j;
  unsigned int *v88;
  uint64_t v89;
  _BYTE *v90;
  unsigned int *v91;
  int *v92;
  int v93;
  uint64_t *v94;
  int v95;
  _DWORD *v96;
  uint64_t v97;
  unint64_t v98;
  _DWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _DWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  const void **v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  const void *v118;
  void *v119;
  unint64_t k;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  WTF *v127;
  int v128;
  unint64_t v129;
  WTF *v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t *v135;
  int v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unsigned int v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t *v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  const void *v149;
  uint64_t v150;
  void *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  unint64_t v166;
  _QWORD *v168;
  int v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  const void *v174;
  void *v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  const void *v182;
  void *v183;
  unint64_t *v184;
  unsigned int v185;
  unsigned int *v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unsigned int *v197;
  uint64_t v198;
  _QWORD *v199;
  unsigned int *v200;
  uint64_t v201;
  _QWORD *v202;
  unsigned int *v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  const void *v209;
  void *v210;
  unsigned int *v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unsigned int *v223;
  uint64_t v224;
  _QWORD *v225;
  unsigned int *v226;
  uint64_t v227;
  unsigned int *v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  const void *v234;
  void *v235;
  char **v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t *v239;
  uint64_t v240;
  int v241;
  char v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t i;
  int *v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  int v254;
  _QWORD *v255;
  uint64_t v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  char *v262;
  unint64_t *v263;
  unint64_t v264;
  _QWORD *v265;
  unint64_t v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t v269;
  int v270;
  unint64_t *v272;
  const void **v273;
  uint64_t v275;
  int *v276;
  int v277;
  __int128 v278;
  WTF *v279;
  uint64_t v280;
  _QWORD v281[3];

  v281[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 32) = 0u;
  v12 = (uint64_t *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = a4;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a10;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a6;
  *(_OWORD *)(a1 + 144) = 0u;
  v13 = (uint64_t *)(a1 + 144);
  *(_OWORD *)(a1 + 160) = 0u;
  v14 = (uint64_t *)(a1 + 160);
  *(_OWORD *)(a1 + 192) = 0u;
  v273 = (const void **)(a1 + 192);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 208) = a2[35];
  v15 = *(_QWORD *)(a4 + 56);
  v16 = (unsigned __int8 *)(v15 + 31);
  v17 = __ldaxr((unsigned __int8 *)(v15 + 31));
  v270 = a7;
  v18 = a8;
  if (v17)
  {
    __clrex();
  }
  else if (!__stxr(1u, v16))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v15 + 31);
LABEL_4:
  v19 = *(_QWORD *)(v15 + 96);
  if (v19 && *(_DWORD *)(v19 + 12))
  {
    v176 = 0;
    v177 = 0;
    do
    {
      WTF::HashTable<JSC::DFG::FrequentExitSite,JSC::DFG::FrequentExitSite,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::FrequentExitSite>,WTF::HashTraits<JSC::DFG::FrequentExitSite>,WTF::HashTraits<JSC::DFG::FrequentExitSite>>::add(v12, (int *)(*(_QWORD *)v19 + v176), a4, a5, a6, a7, a8, (uint64_t)&v278);
      ++v177;
      v19 = *(_QWORD *)(v15 + 96);
      v176 += 8;
    }
    while (v177 < *(unsigned int *)(v19 + 12));
  }
  v20 = __ldxr(v16);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v16))
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v15 + 31), 0, a3, a4, a5, a6, a7, a8);
  v21 = *(_QWORD *)(a1 + 16);
  v22 = *(uint64_t **)(v21 + 144);
  if (!v22)
  {
    v275 = 0;
    goto LABEL_12;
  }
  v244 = *v22;
  if (*v22)
  {
    v250 = 0;
    do
    {
      v251 = *(_QWORD *)(v22[1] + (v250 & 0xFFFFFFFFFFFFFFF8) + 8) + 32 * (v250 & 7);
      v252 = *(_QWORD *)(v251 + 20);
      v253 = *(_DWORD *)(v251 + 28);
      v275 = v251;
      v276 = (int *)v252;
      v277 = v253;
      WTF::HashMap<JSC::LazyOperandValueProfileKey,JSC::LazyOperandValueProfile *,WTF::DefaultHash<JSC::LazyOperandValueProfileKey>,WTF::HashTraits<JSC::LazyOperandValueProfileKey>,WTF::HashTraits<JSC::LazyOperandValueProfile *>,WTF::HashTableTraits>::add<JSC::LazyOperandValueProfile *>(v13, (int *)&v276, &v275, (uint64_t)&v278);
      ++v250;
    }
    while (v244 != v250);
    v21 = *(_QWORD *)(a1 + 16);
    v22 = *(uint64_t **)(v21 + 144);
    v275 = 0;
    if (!v22)
      goto LABEL_12;
  }
  else
  {
    v275 = 0;
  }
  WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::JSValue *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::JSValue *>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::JSValue *,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::JSValue *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::reserveInitialCapacity(&v275, *((_DWORD *)v22 + 10));
  v245 = *(_QWORD *)(v21 + 144);
  v246 = *(_QWORD *)(v245 + 40);
  if (v246)
  {
    for (i = 0; i != v246; ++i)
    {
      v248 = (int *)(*(_QWORD *)(*(_QWORD *)(v245 + 48) + (i & 0xFFFFFFFFFFFFFFF8) + 8) + 16 * (i & 7));
      v276 = v248 + 2;
      WTF::HashMap<JSC::BytecodeIndex,JSC::JSValue *,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::JSValue *>,WTF::HashTableTraits>::add<JSC::JSValue *>(&v275, v248, (uint64_t *)&v276, (uint64_t)&v278);
    }
  }
LABEL_12:
  v23 = v275;
  v275 = 0;
  v24 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v23;
  if (v24)
  {
    WTF::fastFree(v24 - 16, a2, a3, a4, a5, a6, a7, a8);
    if (v275)
      WTF::fastFree(v275 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v25 = *(_QWORD *)(a1 + 16);
  v26 = *(_QWORD *)(v25 + 120);
  v27 = v18;
  if (v26)
  {
    v28 = a2;
    if (*(_BYTE *)(v26 + 12) != 3)
      goto LABEL_30;
    v29 = (unsigned __int8 *)(v25 + 16);
    LOBYTE(v280) = 0;
    *((_QWORD *)&v278 + 1) = v25 + 16;
    LOBYTE(v279) = 1;
    if (__ldaxr((unsigned __int8 *)(v25 + 16)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v29))
    {
      goto LABEL_18;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v29);
LABEL_18:
    LOBYTE(v280) = 1;
    JSC::CodeBlock::getICStatusMap(*(_QWORD **)(a1 + 16), (uint64_t)&v278, v14, a4, a5, a6, a7, a8);
    if (!(_BYTE)v280 || !(_BYTE)v279)
      goto LABEL_29;
    v31 = (unsigned __int8 *)*((_QWORD *)&v278 + 1);
    v32 = __ldxr(*((unsigned __int8 **)&v278 + 1));
    if (v32 == 1)
    {
      if (!__stlxr(0, *((unsigned __int8 **)&v278 + 1)))
        goto LABEL_29;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v31, 0, a3, a4, a5, a6, a7, a8);
LABEL_29:
    v25 = *(_QWORD *)(a1 + 16);
    goto LABEL_30;
  }
  v28 = a2;
LABEL_30:
  v33 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x4C));
  if (v33 == &JSC::FunctionCodeBlock::s_info)
  {
    v34 = *(_QWORD *)(v25 + 64);
    v35 = (uint64_t *)(v34 + 96);
    v36 = (uint64_t *)(v34 + 104);
    if (*(int *)(*(_QWORD *)(v25 + 56) + 20) < 0)
      v37 = v36;
    else
      v37 = v35;
  }
  else
  {
    if (v33 != &JSC::EvalCodeBlock::s_info
      && v33 != &JSC::ProgramCodeBlock::s_info
      && v33 != &JSC::ModuleProgramCodeBlock::s_info)
    {
      __break(0xC471u);
      JUMPOUT(0x19832B840);
    }
    v37 = (uint64_t *)(*(_QWORD *)(v25 + 64) + 72);
  }
  v38 = (uint64_t *)(a1 + 168);
  v39 = *v37;
  *(_QWORD *)(a1 + 176) = *v37;
  if ((_BYTE)word_1ECF4C430)
    v40 = v39 == 0;
  else
    v40 = 1;
  if (!v40)
  {
    v41 = (unsigned __int8 *)(v39 + 16);
    LOBYTE(v280) = 0;
    *((_QWORD *)&v278 + 1) = v39 + 16;
    LOBYTE(v279) = 1;
    if (__ldaxr((unsigned __int8 *)(v39 + 16)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v41))
    {
      goto LABEL_41;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v41);
LABEL_41:
    LOBYTE(v280) = 1;
    JSC::CodeBlock::getICStatusMap((_QWORD *)v39, (uint64_t)&v278, (uint64_t *)(a1 + 184), a4, a5, a6, a7, a8);
    if (!(_BYTE)v280 || !(_BYTE)v279)
      goto LABEL_50;
    v43 = (unsigned __int8 *)*((_QWORD *)&v278 + 1);
    v44 = __ldxr(*((unsigned __int8 **)&v278 + 1));
    if (v44 == 1)
    {
      if (!__stlxr(0, *((unsigned __int8 **)&v278 + 1)))
        goto LABEL_50;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v43, 0, a3, a4, a5, a6, a7, a8);
  }
LABEL_50:
  *(_QWORD *)&v278 = a1 + 168;
  v45 = *((unsigned int *)v28 + 75);
  if ((_DWORD)v45 == *((_DWORD *)v28 + 74))
  {
    WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ICStatusContext *>((uint64_t)(v28 + 36), (unint64_t)&v278);
  }
  else
  {
    *(_QWORD *)(v28[36] + 8 * v45) = v38;
    *((_DWORD *)v28 + 75) = v45 + 1;
  }
  v46 = *(_DWORD *)(a3 + 28);
  if ((int)v46 <= (int)v27)
    v47 = v27;
  else
    v47 = v46;
  if (*(_QWORD *)(a1 + 208))
  {
    v59 = *(_QWORD *)(*(_QWORD *)(v28[3] + 24) + 128);
    if (v59)
    {
      ++*(_DWORD *)v59;
      v60 = WTF::fastCompactMalloc((WTF *)0x40);
      *(_OWORD *)(v60 + 16) = 0u;
      *(_OWORD *)(v60 + 32) = 0u;
      *(_OWORD *)v60 = 0u;
      *(_QWORD *)(v60 + 48) = 0;
      *(_QWORD *)(v60 + 56) = 0;
      *(_QWORD *)(v60 + 16) = 2;
      *(_DWORD *)(v60 + 36) = 0x3FFFFFFF;
      *(_BYTE *)(v60 + 40) = 18;
      *(_QWORD *)(v60 + 56) = *(_QWORD *)(v59 + 8);
      *(_QWORD *)(v59 + 8) = v60;
      *(_QWORD *)(a1 + 24) = v60;
      v68 = (unint64_t **)(a1 + 24);
      if (*(_DWORD *)v59 == 1)
      {
        v184 = *(unint64_t **)(v59 + 8);
        if (v184)
        {
          do
          {
            v267 = (unint64_t *)v184[7];
            v268 = v184[2];
            if ((v268 & 1) != 0 && (v268 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v268 & 0xFFFFFFFF8, v61, v62, v63, v64, v65, v66, v67);
            v269 = *v184;
            *v184 = 0;
            if (v269)
              WTF::fastFree(v269, v61, v62, v63, v64, v65, v66, v67);
            WTF::fastFree((unint64_t)v184, v61, v62, v63, v64, v65, v66, v67);
            v184 = v267;
          }
          while (v267);
        }
        *(_QWORD *)(v59 + 8) = 0;
        WTF::fastFree(v59, v61, v62, v63, v64, v65, v66, v67);
        v60 = (uint64_t)*v68;
      }
      else
      {
        --*(_DWORD *)v59;
      }
    }
    else
    {
      v60 = WTF::fastCompactMalloc((WTF *)0x40);
      *(_OWORD *)(v60 + 16) = 0u;
      *(_OWORD *)(v60 + 32) = 0u;
      *(_OWORD *)v60 = 0u;
      *(_QWORD *)(v60 + 48) = 0;
      *(_QWORD *)(v60 + 56) = 0;
      *(_QWORD *)(v60 + 16) = 2;
      *(_DWORD *)(v60 + 36) = 0x3FFFFFFF;
      *(_BYTE *)(v60 + 40) = 18;
      *(_QWORD *)(v60 + 56) = MEMORY[8];
      MEMORY[8] = v60;
      *(_QWORD *)(a1 + 24) = v60;
      v68 = (unint64_t **)(a1 + 24);
    }
    *v38 = v60;
    v69 = *(_QWORD *)(a3 + 120);
    if (v69)
    {
      LODWORD(v69) = *(unsigned __int8 *)(v69 + 12);
      v70 = v69 & 0xFE;
      v71 = a3;
      if (v70 == 2)
      {
LABEL_77:
        *(_QWORD *)(v60 + 8) = v71;
        v72 = *(_QWORD *)(a1 + 208);
        v73 = *(_QWORD *)(v72 + 24);
        if (v73)
          LODWORD(v73) = *(_DWORD *)(v73 + 24) >> 22;
        v74 = ((2 * *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v72 + 8) + 56) + 30)) & 4) + v73;
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) & 0xFFFFFFFF003FFFFFLL | (v74 << 22);
        if (v74 >= 0x400)
        {
          __break(0xC471u);
          JUMPOUT(0x19832B8ACLL);
        }
        (*v68)[3] = (*v68)[3] & 0xF0000000FFFFFFFFLL | ((unint64_t)((v270 - 5) & 0xFFFFFFF) << 32);
        if (v270 - 5 != (16 * (v270 - 5)) >> 4)
        {
          __break(0xC471u);
          JUMPOUT(0x19832B8CCLL);
        }
        (*v68)[3] = (*v68)[3] & 0xFFFFFFFFFFC00000 | v27 & 0x3FFFFF;
        v75 = *v68;
        if (((*v68)[3] & 0x3FFFFF) != v27)
        {
          __break(0xC471u);
          JUMPOUT(0x19832B8ECLL);
        }
        if (a5)
        {
          LOBYTE(v278) = 17;
          *(_QWORD *)((char *)&v278 + 1) = a5;
          v75[5] = v278;
          *((_BYTE *)v75 + 48) = HIBYTE(a5);
          *((_BYTE *)*v68 + 32) &= ~1u;
        }
        else
        {
          v243 = *((_BYTE *)v75 + 32) | 1;
          v75[3] = (*v68)[3];
          *((_BYTE *)v75 + 32) = v243;
        }
        JSC::DFG::ByteCodeParser::currentCodeOrigin((unint64_t)&v278, *((_DWORD *)v28 + 10), *(_QWORD *)(v28[35] + 24));
        v76 = *v68;
        v77 = (*v68)[2];
        if ((v77 & 1) != 0 && (v77 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v77 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        v76[2] = v278;
        if ((_DWORD)v47)
        {
          v78 = (_DWORD *)WTF::fastMalloc((WTF *)(9 * v47 + 4));
          *v78 = v47;
          v261 = 4;
          do
          {
            v262 = (char *)v78 + v261;
            *v262 = 18;
            *(_QWORD *)(v262 + 1) = 0;
            v261 += 9;
          }
          while (v262 + 9 != (char *)v78 + 9 * v47 + 4);
          v28 = a2;
        }
        else
        {
          v78 = 0;
        }
        v79 = **v68;
        **v68 = (unint64_t)v78;
        if (v79)
          WTF::fastFree(v79, a2, a3, a4, a5, a6, a7, a8);
        (*v68)[3] = (*v68)[3] & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)a9 << 60);
        v80 = *(unsigned int **)(*(_QWORD *)(a3 + 56) + 104);
        if (v80)
          v81 = *v80;
        else
          v81 = 0;
        v82 = *(_BYTE **)(a3 + 120);
        if (v82 && (v82[12] & 0xFE) == 4)
        {
          v83 = *(unsigned int **)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v82 + 72))(v82) + 48);
          if (v83)
            v83 = (unsigned int *)*v83;
        }
        else
        {
          v83 = 0;
        }
        v84 = (char *)v83 + v81;
        v85 = *(unsigned int *)(a1 + 52);
        if ((unint64_t)v83 + v81 > v85)
        {
          v178 = *(unsigned int *)(a1 + 48);
          if ((unint64_t)v84 > v178)
          {
            v179 = v178 + (v178 >> 2);
            if (v179 >= 0x10)
              v180 = v179 + 1;
            else
              v180 = 16;
            if (v180 <= (unint64_t)v84)
              v181 = (unint64_t)v84;
            else
              v181 = v180;
            if (v181 >> 30)
            {
              __break(0xC471u);
              JUMPOUT(0x19832BBA0);
            }
            v182 = *(const void **)(a1 + 40);
            v183 = (void *)WTF::fastMalloc((WTF *)(4 * v181));
            *(_DWORD *)(a1 + 48) = v181;
            *(_QWORD *)(a1 + 40) = v183;
            memcpy(v183, v182, 4 * v85);
            if (v182)
            {
              if (*(const void **)(a1 + 40) == v182)
              {
                *(_QWORD *)(a1 + 40) = 0;
                *(_DWORD *)(a1 + 48) = 0;
              }
              WTF::fastFree((unint64_t)v182, a2, a3, a4, a5, a6, a7, a8);
            }
          }
        }
        v86 = 0;
        *(_DWORD *)(a1 + 52) = (_DWORD)v84;
        for (j = 2; ; j += 2)
        {
          v88 = *(unsigned int **)(*(_QWORD *)(a3 + 56) + 104);
          if (v88)
            v89 = *v88;
          else
            v89 = 0;
          v90 = *(_BYTE **)(a3 + 120);
          if (v90 && (v90[12] & 0xFE) == 4)
          {
            v91 = *(unsigned int **)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v90 + 72))(v90) + 48);
            if (v91)
              v91 = (unsigned int *)*v91;
          }
          else
          {
            v91 = 0;
          }
          if (v86 >= (unint64_t)v91 + v89)
            goto LABEL_111;
          v92 = *(int **)(*(_QWORD *)(a3 + 56) + 104);
          if (v92)
          {
            v93 = *v92;
            if (*v92 > v86)
            {
              v94 = (uint64_t *)&v92[j];
              goto LABEL_105;
            }
          }
          else
          {
            v93 = 0;
          }
          v96 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 120) + 72))(*(_QWORD *)(a3 + 120))
                           + 48);
          if (*v96 <= (v86 - v93))
          {
            __break(0xC471u);
            JUMPOUT(0x19832B91CLL);
          }
          v94 = (uint64_t *)&v96[2 * (v86 - v93) + 2];
LABEL_105:
          v95 = JSC::DFG::DesiredIdentifiers::ensure((uint64_t *)(*(_QWORD *)(v28[3] + 24) + 240), *v94, a3, a4, a5, a6, a7, a8);
          if (v86 >= *(unsigned int *)(a1 + 52))
          {
            __break(0xC471u);
            JUMPOUT(0x19832BB90);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v86++) = v95;
        }
      }
    }
    else
    {
      v70 = 0;
    }
    v236 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C));
    if (v236 == &JSC::FunctionCodeBlock::s_info)
    {
      v237 = *(_QWORD *)(a3 + 64);
      v238 = (uint64_t *)(v237 + 96);
      v239 = (uint64_t *)(v237 + 104);
      if (*(int *)(*(_QWORD *)(a3 + 56) + 20) >= 0)
        v239 = v238;
    }
    else if (v236 == &JSC::EvalCodeBlock::s_info || v236 == &JSC::ProgramCodeBlock::s_info)
    {
      v239 = (uint64_t *)(*(_QWORD *)(a3 + 64) + 72);
    }
    else
    {
      if (v236 != &JSC::ModuleProgramCodeBlock::s_info)
      {
        __break(0xC471u);
        JUMPOUT(0x19832B98CLL);
      }
      v239 = (uint64_t *)(*(_QWORD *)(a3 + 64) + 72);
      v28 = a2;
    }
    v71 = *v239;
    if (v71 || (v71 = a3, v70 == 4))
    {
      if (*(_QWORD *)(v71 + 192))
        v71 = *(_QWORD *)(v71 + 192);
      v240 = *(_QWORD *)(v71 + 120);
      if (v240)
      {
        v241 = *(unsigned __int8 *)(v240 + 12);
        if ((v241 & 0xFE) != 2 && v241 != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19832B614);
        }
      }
    }
    else
    {
      v71 = a3;
      if ((_DWORD)v69)
      {
        __break(0xC471u);
        JUMPOUT(0x19832BB58);
      }
    }
    goto LABEL_77;
  }
  *(_QWORD *)(a1 + 24) = 0;
  v48 = *(unsigned int **)(*(_QWORD *)(a3 + 56) + 104);
  if (v48)
    v49 = *v48;
  else
    v49 = 0;
  v50 = *(_BYTE **)(a3 + 120);
  if (v50 && (v50[12] & 0xFE) == 4)
  {
    v51 = *(unsigned int **)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v50 + 72))(v50) + 48);
    if (v51)
      v51 = (unsigned int *)*v51;
  }
  else
  {
    v51 = 0;
  }
  v52 = (char *)v51 + v49;
  v53 = *(unsigned int *)(a1 + 52);
  if ((unint64_t)v51 + v49 > v53)
  {
    v170 = *(unsigned int *)(a1 + 48);
    if ((unint64_t)v52 > v170)
    {
      v171 = v170 + (v170 >> 2);
      if (v171 >= 0x10)
        v172 = v171 + 1;
      else
        v172 = 16;
      if (v172 <= (unint64_t)v52)
        v173 = (unint64_t)v52;
      else
        v173 = v172;
      if (v173 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x19832BB98);
      }
      v174 = *(const void **)(a1 + 40);
      v175 = (void *)WTF::fastMalloc((WTF *)(4 * v173));
      *(_DWORD *)(a1 + 48) = v173;
      *(_QWORD *)(a1 + 40) = v175;
      memcpy(v175, v174, 4 * v53);
      if (v174)
      {
        if (*(const void **)(a1 + 40) == v174)
        {
          *(_QWORD *)(a1 + 40) = 0;
          *(_DWORD *)(a1 + 48) = 0;
        }
        WTF::fastFree((unint64_t)v174, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  v54 = 0;
  *(_DWORD *)(a1 + 52) = (_DWORD)v52;
  while (1)
  {
    v55 = *(unsigned int **)(*(_QWORD *)(a3 + 56) + 104);
    v56 = v55 ? *v55 : 0;
    v57 = *(_BYTE **)(a3 + 120);
    if (v57 && (v57[12] & 0xFE) == 4)
    {
      v58 = *(unsigned int **)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v57 + 72))(v57) + 48);
      if (v58)
        v58 = (unsigned int *)*v58;
    }
    else
    {
      v58 = 0;
    }
    if (v54 >= (unint64_t)v58 + v56)
      break;
    if (v54 >= *(unsigned int *)(a1 + 52))
    {
      __break(0xC471u);
      JUMPOUT(0x19832BB60);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v54) = v54;
    ++v54;
  }
LABEL_111:
  v97 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 152);
  if (v97 && (v203 = *(unsigned int **)(v97 + 8)) != 0)
  {
    v98 = *v203;
    v99 = (_DWORD *)(a1 + 68);
    v204 = *(unsigned int *)(a1 + 68);
    if (v204 < v98)
    {
      v205 = *(unsigned int *)(a1 + 64);
      if (v205 < v98)
      {
        v206 = v205 + (v205 >> 2);
        if (v206 >= 0x10)
          v207 = v206 + 1;
        else
          v207 = 16;
        if (v207 <= v98)
          v208 = v98;
        else
          v208 = v207;
        if (v208 >> 30)
        {
          __break(0xC471u);
          JUMPOUT(0x19832BBC8);
        }
        v209 = *(const void **)(a1 + 56);
        v210 = (void *)WTF::fastMalloc((WTF *)(4 * v208));
        *(_DWORD *)(a1 + 64) = v208;
        *(_QWORD *)(a1 + 56) = v210;
        memcpy(v210, v209, 4 * v204);
        if (v209)
        {
          if (*(const void **)(a1 + 56) == v209)
          {
            *(_QWORD *)(a1 + 56) = 0;
            *(_DWORD *)(a1 + 64) = 0;
          }
          WTF::fastFree((unint64_t)v209, a2, a3, a4, a5, a6, a7, a8);
        }
      }
    }
  }
  else
  {
    LODWORD(v98) = 0;
    v99 = (_DWORD *)(a1 + 68);
  }
  *v99 = v98;
  v100 = v28[3];
  v101 = *(unsigned int *)(v100 + 340);
  v102 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 152);
  if (v102 && (v211 = *(unsigned int **)(v102 + 8)) != 0)
  {
    v212 = *v211;
    v103 = v212 + v101;
    if ((_DWORD)v212)
    {
      v213 = *(unsigned int *)(v100 + 336);
      if (v103 > v213)
      {
        v214 = v213 + (v213 >> 2);
        if (v214 >= 0x10)
          v215 = v214 + 1;
        else
          v215 = 16;
        if (v215 <= v103)
          v216 = v103;
        else
          v216 = v215;
        if (v216 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x19832BBD0);
        }
        v217 = *(_QWORD *)(v100 + 328);
        v218 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v216));
        *(_DWORD *)(v100 + 336) = v216;
        *(_QWORD *)(v100 + 328) = v218;
        if ((_DWORD)v101)
        {
          v272 = (unint64_t *)(v217 + 16 * v101);
          v263 = (unint64_t *)v217;
          do
          {
            v264 = *v263;
            *v263 = 0;
            *v218 = v264;
            v265 = v218;
            v218[1] = v263[1];
            v266 = *v263;
            *v263 = 0;
            if (v266)
              WTF::fastFree(v266, a2, a3, a4, a5, a6, a7, a8);
            v263 += 2;
            v218 = v265 + 2;
            v28 = a2;
          }
          while (v263 != v272);
        }
        if (v217)
        {
          if (*(_QWORD *)(v100 + 328) == v217)
          {
            *(_QWORD *)(v100 + 328) = 0;
            *(_DWORD *)(v100 + 336) = 0;
          }
          WTF::fastFree(v217, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      v219 = *(_QWORD *)(v100 + 328);
      if (v219)
      {
        v220 = *(unsigned int *)(v100 + 340);
        if (v103 != v220)
          bzero((void *)(v219 + 16 * v220), ((16 * v103 - 16 * v220 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
      }
    }
  }
  else
  {
    LODWORD(v103) = *(_DWORD *)(v100 + 340);
  }
  *(_DWORD *)(v100 + 340) = v103;
  v104 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 152);
  if (!v104)
    goto LABEL_116;
  v221 = 0;
  v222 = 2;
  while (1)
  {
    v223 = *(unsigned int **)(v104 + 8);
    if (!v223 || v221 >= *v223)
      break;
    if (v221 >= *v99)
    {
      __break(0xC471u);
      JUMPOUT(0x19832BBB0);
    }
    v224 = v28[3];
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * v221) = *(_DWORD *)(v224 + 324);
    if (v221 >= *v223)
    {
      __break(0xC471u);
      JUMPOUT(0x19832BA2CLL);
    }
    v225 = (_QWORD *)(v224 + 312);
    v226 = &v223[v222];
    *(_QWORD *)&v278 = v226;
    v227 = *(unsigned int *)(v224 + 324);
    if ((_DWORD)v227 == *(_DWORD *)(v224 + 320))
    {
      v249 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v225, v227 + 1, (unint64_t)&v278);
      v227 = *(unsigned int *)(v224 + 324);
      *(_QWORD *)(*(_QWORD *)(v224 + 312) + 8 * v227) = *v249;
    }
    else
    {
      *(_QWORD *)(*v225 + 8 * v227) = v226;
    }
    *(_DWORD *)(v224 + 324) = v227 + 1;
    ++v221;
    v104 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 152);
    v222 += 4;
    if (!v104)
      goto LABEL_116;
  }
  v228 = *(unsigned int **)(v104 + 16);
  if (v228)
  {
    v105 = *v228;
    v106 = (_DWORD *)(a1 + 84);
    v229 = *(unsigned int *)(a1 + 84);
    if (v229 < v105)
    {
      v230 = *(unsigned int *)(a1 + 80);
      if (v230 < v105)
      {
        v231 = v230 + (v230 >> 2);
        if (v231 >= 0x10)
          v232 = v231 + 1;
        else
          v232 = 16;
        if (v232 <= v105)
          v233 = v105;
        else
          v233 = v232;
        if (v233 >> 30)
        {
          __break(0xC471u);
          JUMPOUT(0x19832BBB8);
        }
        v234 = *(const void **)(a1 + 72);
        v235 = (void *)WTF::fastMalloc((WTF *)(4 * v233));
        *(_DWORD *)(a1 + 80) = v233;
        *(_QWORD *)(a1 + 72) = v235;
        memcpy(v235, v234, 4 * v229);
        if (v234)
        {
          if (*(const void **)(a1 + 72) == v234)
          {
            *(_QWORD *)(a1 + 72) = 0;
            *(_DWORD *)(a1 + 80) = 0;
          }
          WTF::fastFree((unint64_t)v234, a2, a3, a4, a5, a6, a7, a8);
        }
      }
    }
  }
  else
  {
LABEL_116:
    LODWORD(v105) = 0;
    v106 = (_DWORD *)(a1 + 84);
  }
  *v106 = v105;
  v107 = v28[3];
  v108 = *(unsigned int *)(v107 + 372);
  v109 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 152);
  if (!v109 || (v186 = *(unsigned int **)(v109 + 16)) == 0)
  {
    LODWORD(v110) = *(_DWORD *)(v107 + 372);
LABEL_119:
    v111 = v273;
    goto LABEL_120;
  }
  v187 = *v186;
  v110 = v187 + v108;
  if (!(_DWORD)v187)
    goto LABEL_119;
  v188 = *(unsigned int *)(v107 + 368);
  v189 = *(_QWORD *)(v107 + 360);
  if (v110 <= v188)
  {
    v111 = v273;
  }
  else
  {
    v190 = v188 + (v188 >> 2);
    if (v190 >= 0x10)
      v191 = v190 + 1;
    else
      v191 = 16;
    if (v191 <= v110)
      v192 = v110;
    else
      v192 = v191;
    if (v192 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19832BBC0);
    }
    v193 = WTF::fastMalloc((WTF *)(8 * v192));
    *(_DWORD *)(v107 + 368) = v192;
    *(_QWORD *)(v107 + 360) = v193;
    if ((_DWORD)v108)
    {
      v255 = (_QWORD *)v193;
      v256 = 8 * v108;
      v257 = (unint64_t *)v189;
      do
      {
        v258 = *v257;
        *v257 = 0;
        *v255 = v258;
        v259 = *v257;
        *v257 = 0;
        if (v259)
          WTF::fastFree(v259, a2, a3, a4, a5, a6, a7, a8);
        ++v255;
        ++v257;
        v256 -= 8;
      }
      while (v256);
      v193 = *(_QWORD *)(v107 + 360);
      v28 = a2;
    }
    v111 = v273;
    if (v189)
    {
      if (v193 == v189)
      {
        *(_QWORD *)(v107 + 360) = 0;
        *(_DWORD *)(v107 + 368) = 0;
      }
      WTF::fastFree(v189, a2, a3, a4, a5, a6, a7, a8);
      v189 = *(_QWORD *)(v107 + 360);
    }
    else
    {
      v189 = v193;
    }
  }
  if (v189)
  {
    v194 = *(unsigned int *)(v107 + 372);
    if (v110 != v194)
      bzero((void *)(v189 + 8 * v194), ((8 * v110 - 8 * v194 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
  }
LABEL_120:
  *(_DWORD *)(v107 + 372) = v110;
  v112 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 152);
  if (v112)
  {
    v195 = 0;
    v196 = 2;
    do
    {
      v197 = *(unsigned int **)(v112 + 16);
      if (!v197 || v195 >= *v197)
        break;
      if (v195 >= *v106)
      {
        __break(0xC471u);
        JUMPOUT(0x19832BBA8);
      }
      v198 = v28[3];
      *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v195) = *(_DWORD *)(v198 + 356);
      if (v195 >= *v197)
      {
        __break(0xC471u);
        JUMPOUT(0x19832B9C8);
      }
      v199 = (_QWORD *)(v198 + 344);
      v200 = &v197[v196];
      *(_QWORD *)&v278 = &v197[v196];
      v201 = *(unsigned int *)(v198 + 356);
      if ((_DWORD)v201 == *(_DWORD *)(v198 + 352))
      {
        v202 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v199, v201 + 1, (unint64_t)&v278);
        v201 = *(unsigned int *)(v198 + 356);
        *(_QWORD *)(*(_QWORD *)(v198 + 344) + 8 * v201) = *v202;
      }
      else
      {
        *(_QWORD *)(*v199 + 8 * v201) = v200;
      }
      *(_DWORD *)(v198 + 356) = v201 + 1;
      ++v195;
      v112 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 152);
      v196 += 6;
    }
    while (v112);
  }
  v113 = *(unsigned int *)(a1 + 204);
  if (v113 < (int)v47)
  {
    v114 = *(unsigned int *)(a1 + 200);
    if (v114 < (int)v47)
    {
      v115 = v114 + (v114 >> 2);
      if (v115 >= 0x10)
        v116 = v115 + 1;
      else
        v116 = 16;
      if (v116 <= (int)v47)
        v117 = (int)v47;
      else
        v117 = v116;
      if (v117 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19832BB80);
      }
      v118 = *v111;
      v119 = (void *)WTF::fastMalloc((WTF *)(8 * v117));
      *(_DWORD *)(a1 + 200) = v117;
      *(_QWORD *)(a1 + 192) = v119;
      memcpy(v119, v118, 8 * v113);
      if (v118)
      {
        if (*v111 == v118)
        {
          *(_QWORD *)(a1 + 192) = 0;
          *(_DWORD *)(a1 + 200) = 0;
        }
        WTF::fastFree((unint64_t)v118, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  *(_DWORD *)(a1 + 204) = v47;
  if ((int)v47 >= 1)
  {
    for (k = 0; k != v47; ++k)
    {
      v121 = v28[3];
      *(_QWORD *)((char *)&v278 + 6) = 0;
      *(_QWORD *)&v278 = 0;
      v279 = (WTF *)v281;
      v280 = 2;
      v122 = *(_QWORD *)(v121 + 488);
      *(_QWORD *)(v121 + 488) = v122 + 1;
      v123 = v122 >> 3;
      v124 = *(unsigned int *)(v121 + 508);
      if (v122 >> 3 >= v124)
      {
        v131 = WTF::fastMalloc((WTF *)0x180);
        v276 = (int *)v131;
        v132 = *(unsigned int *)(v121 + 508);
        if ((_DWORD)v132 == *(_DWORD *)(v121 + 504))
        {
          v133 = (_QWORD *)WTF::Vector<JSC::StatementNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v121 + 496, v132 + 1, (unint64_t)&v276);
          v132 = *(unsigned int *)(v121 + 508);
          *(_QWORD *)(*(_QWORD *)(v121 + 496) + 8 * v132) = *v133;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v121 + 496) + 8 * v132) = v131;
        }
        v124 = (v132 + 1);
        *(_DWORD *)(v121 + 508) = v124;
        v122 = *(_QWORD *)(v121 + 488) - 1;
        v123 = v122 >> 3;
      }
      if (v123 >= v124)
      {
        __break(0xC471u);
        JUMPOUT(0x19832BB68);
      }
      v125 = *(_QWORD *)(*(_QWORD *)(v121 + 496) + 8 * v123) + 48 * (v122 & 7);
      v126 = v278;
      *(_QWORD *)(v125 + 6) = *(_QWORD *)((char *)&v278 + 6);
      *(_QWORD *)(v125 + 16) = v125 + 32;
      *(_QWORD *)v125 = v126;
      *(_QWORD *)(v125 + 24) = 2;
      v127 = v279;
      if (v279 == (WTF *)v281)
      {
        memcpy((void *)(v125 + 32), v281, 8 * HIDWORD(v280));
      }
      else
      {
        v279 = (WTF *)v281;
        *(_QWORD *)(v125 + 16) = v127;
        v254 = v280;
        LODWORD(v280) = 2;
        *(_DWORD *)(v125 + 24) = v254;
      }
      v128 = HIDWORD(v280);
      HIDWORD(v280) = 0;
      *(_DWORD *)(v125 + 28) = v128;
      v129 = *(_QWORD *)(v121 + 488) - 1;
      if (v129 >> 3 >= *(unsigned int *)(v121 + 508))
      {
        __break(0xC471u);
        JUMPOUT(0x19832BB70);
      }
      if (k >= *(unsigned int *)(a1 + 204))
      {
        __break(0xC471u);
        JUMPOUT(0x19832BB78);
      }
      *((_QWORD *)*v111 + k) = *(_QWORD *)(*(_QWORD *)(v121 + 496) + 8 * (v129 >> 3)) + 48 * (v129 & 7);
      v130 = v279;
      if (v281 != (_QWORD *)v279 && v279)
      {
        v279 = 0;
        LODWORD(v280) = 0;
        WTF::fastFree((unint64_t)v130, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  v135 = v28 + 31;
  v134 = v28[31];
  if (v134
    || (WTF::HashTable<JSC::InlineCallFrame *,WTF::KeyValuePair<JSC::InlineCallFrame *,WTF::Vector<JSC::DFG::ArgumentPosition *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::InlineCallFrame *,WTF::Vector<JSC::DFG::ArgumentPosition *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::HashMap<JSC::InlineCallFrame *,WTF::Vector<JSC::DFG::ArgumentPosition *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTraits<WTF::Vector<JSC::DFG::ArgumentPosition *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::NullableHashTraits<JSC::InlineCallFrame *>>::rehash(v28 + 31, 8u, 0), (v134 = *v135) != 0))
  {
    v136 = *(_DWORD *)(v134 - 8);
  }
  else
  {
    v136 = 0;
  }
  v137 = *(_QWORD *)(a1 + 24);
  v138 = (~(v137 << 32) + v137) ^ ((unint64_t)(~(v137 << 32) + v137) >> 22);
  v139 = 9 * ((v138 + ~(v138 << 13)) ^ ((v138 + ~(v138 << 13)) >> 8));
  v140 = (v139 ^ (v139 >> 15)) + ~((v139 ^ (v139 >> 15)) << 27);
  v141 = v136 & ((v140 >> 31) ^ v140);
  v142 = (_QWORD *)(v134 + 24 * v141);
  v143 = *v142;
  if (*v142 == 1)
  {
LABEL_151:
    *v142 = v137;
    v144 = v142 + 1;
    if (v142 + 1 != v111)
    {
      v145 = *((_DWORD *)v142 + 5);
      v146 = *(_DWORD *)(a1 + 204);
      if (v145 > v146)
      {
        *((_DWORD *)v142 + 5) = v146;
      }
      else
      {
        v147 = *((_DWORD *)v142 + 4);
        if (v146 > v147)
        {
          if (v147)
          {
            if (v145)
              *((_DWORD *)v142 + 5) = 0;
            v260 = *v144;
            v111 = v273;
            v28 = a2;
            if (*v144)
            {
              v142[1] = 0;
              *((_DWORD *)v142 + 4) = 0;
              WTF::fastFree(v260, a2, a3, a4, a5, a6, a7, a8);
              v147 = *((_DWORD *)v142 + 4);
            }
          }
          v148 = *(unsigned int *)(a1 + 204);
          if (v147 < v148)
          {
            if (v148 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x19832BB88);
            }
            v149 = (const void *)*v144;
            v150 = *((unsigned int *)v142 + 5);
            v151 = (void *)WTF::fastMalloc((WTF *)(8 * v148));
            *((_DWORD *)v142 + 4) = v148;
            v142[1] = v151;
            memcpy(v151, v149, 8 * v150);
            if (v149)
            {
              if ((const void *)*v144 == v149)
              {
                v142[1] = 0;
                *((_DWORD *)v142 + 4) = 0;
              }
              WTF::fastFree((unint64_t)v149, v152, v153, v154, v155, v156, v157, v158);
            }
          }
        }
        v146 = *((_DWORD *)v142 + 5);
      }
      v159 = (char *)*v144;
      if (v146)
      {
        memmove(v159, *v111, 8 * v146);
        v160 = *((unsigned int *)v142 + 5);
        v159 = (char *)v142[1];
      }
      else
      {
        v160 = 0;
      }
      memcpy(&v159[8 * v160], (const void *)(*(_QWORD *)(a1 + 192) + 8 * v160), 8 * *(unsigned int *)(a1 + 204) - 8 * v160);
      *((_DWORD *)v142 + 5) = *(_DWORD *)(a1 + 204);
    }
    v161 = *v135;
    if (*v135)
      v162 = *(_DWORD *)(v161 - 12) + 1;
    else
      v162 = 1;
    *(_DWORD *)(v161 - 12) = v162;
    v163 = *v135;
    if (*v135)
      v164 = *(_DWORD *)(v163 - 12);
    else
      v164 = 0;
    v165 = (*(_DWORD *)(v163 - 16) + v164);
    v166 = *(unsigned int *)(v163 - 4);
    if (v166 > 0x400)
    {
      if (v166 > 2 * v165)
        goto LABEL_168;
    }
    else
    {
      if (3 * v166 > 4 * v165)
        goto LABEL_168;
      if (!(_DWORD)v166)
      {
        v185 = 8;
        goto LABEL_316;
      }
    }
    v185 = (_DWORD)v166 << (6 * *(_DWORD *)(v163 - 12) >= (2 * v166));
LABEL_316:
    WTF::HashTable<JSC::InlineCallFrame *,WTF::KeyValuePair<JSC::InlineCallFrame *,WTF::Vector<JSC::DFG::ArgumentPosition *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::InlineCallFrame *,WTF::Vector<JSC::DFG::ArgumentPosition *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::HashMap<JSC::InlineCallFrame *,WTF::Vector<JSC::DFG::ArgumentPosition *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTraits<WTF::Vector<JSC::DFG::ArgumentPosition *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::NullableHashTraits<JSC::InlineCallFrame *>>::rehash(v135, v185, v142);
    goto LABEL_168;
  }
  v168 = 0;
  v169 = 1;
  while (v143 != v137)
  {
    if (v143 == -1)
      v168 = v142;
    v141 = (v141 + v169) & v136;
    v142 = (_QWORD *)(v134 + 24 * v141);
    v143 = *v142;
    ++v169;
    if (*v142 == 1)
    {
      if (v168)
      {
        v168[1] = 0;
        v168[2] = 0;
        *v168 = 1;
        --*(_DWORD *)(*v135 - 16);
        v137 = *(_QWORD *)(a1 + 24);
        v142 = v168;
      }
      goto LABEL_151;
    }
  }
LABEL_168:
  v28[35] = a1;
  return a1;
}

void JSC::DFG::ByteCodeParser::InlineStackEntry::~InlineStackEntry(JSC::DFG::ByteCodeParser::InlineStackEntry *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v8 = *(_QWORD *)this;
  *(_QWORD *)(v8 + 280) = *((_QWORD *)this + 26);
  v9 = *(unsigned int *)(v8 + 300);
  if (!(_DWORD)v9
    || *(JSC::DFG::ByteCodeParser::InlineStackEntry **)(*(_QWORD *)(v8 + 288) + 8 * v9 - 8) != (JSC::DFG::ByteCodeParser::InlineStackEntry *)((char *)this + 168))
  {
    __break(0xC471u);
    JUMPOUT(0x19832BDD0);
  }
  *(_DWORD *)(v8 + 300) = v9 - 1;
  v11 = *((_QWORD *)this + 24);
  if (v11)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *((_QWORD *)this + 23);
  if (v12)
  {
    v13 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v13)
    {
      v14 = (uint64_t *)*((_QWORD *)this + 23);
      do
      {
        v16 = *v14;
        v14 += 8;
        v15 = v16;
        v17 = v16 & 0xFFFFFFFF8;
        v18 = (v16 & 0xFFFFFFFF8) != 0;
        if ((v16 & 1) != 0 && (v18 & (v15 >> 1) & 1) == 0 && v17)
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
        --v13;
      }
      while (v13);
    }
    WTF::fastFree(v12 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v19 = *((_QWORD *)this + 20);
  if (v19)
  {
    v20 = *(unsigned int *)(v19 - 4);
    if ((_DWORD)v20)
    {
      v21 = (uint64_t *)*((_QWORD *)this + 20);
      do
      {
        v23 = *v21;
        v21 += 8;
        v22 = v23;
        v24 = v23 & 0xFFFFFFFF8;
        v25 = (v23 & 0xFFFFFFFF8) != 0;
        if ((v23 & 1) != 0 && (v25 & (v22 >> 1) & 1) == 0 && v24)
          WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
        --v20;
      }
      while (v20);
    }
    WTF::fastFree(v19 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v26 = *((_QWORD *)this + 19);
  if (v26)
    WTF::fastFree(v26 - 16, a2, a3, a4, a5, a6, a7, a8);
  v27 = *((_QWORD *)this + 18);
  if (v27)
    WTF::fastFree(v27 - 16, a2, a3, a4, a5, a6, a7, a8);
  v28 = *((_QWORD *)this + 13);
  if (v28)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
  }
  v29 = *((_QWORD *)this + 11);
  if (v29)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
  }
  v30 = *((_QWORD *)this + 9);
  if (v30)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v30, a2, a3, a4, a5, a6, a7, a8);
  }
  v31 = *((_QWORD *)this + 7);
  if (v31)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
  }
  v32 = *((_QWORD *)this + 5);
  if (v32)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
  }
  v33 = *((_QWORD *)this + 4);
  if (v33)
    WTF::fastFree(v33 - 16, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::ByteCodeParser::parseCodeBlock(JSC::DFG::ByteCodeParser *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  unint64_t StatusReg;
  unsigned int *v19;
  unsigned int v20;
  void *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t casual;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  const void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  int v57;
  int v58;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF **v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  JSC::CodeBlock *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  WTF *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF *v104;
  JSC::CodeBlock *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  JSC::CodeBlock *v112;
  _QWORD v113[4];
  char v114;
  WTF *v115;
  uint64_t v116;
  _BYTE v117[135];
  char v118;

  *((_DWORD *)this + 29) = 0;
  v9 = *((_QWORD *)this + 35);
  v112 = *(JSC::CodeBlock **)(v9 + 8);
  v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 24) + 112);
  if (v10)
    JSC::Profiler::Compilation::addProfiledBytecodes(v10, *(_QWORD *)(*(_QWORD *)this + 93016), *(JSC::CodeBlock **)(v9 + 16), a4, a5, a6, a7, a8);
  if (!byte_1ECF4C320)
    goto LABEL_4;
  v70 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 24) + 376);
  v73 = *(_QWORD *)(v70 + 16);
  v72 = (WTF **)(v70 + 16);
  v71 = v73;
  if (!v73)
  {
    v97 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v97 = 0;
    *((_QWORD *)v97 + 1) = 0;
    v104 = *v72;
    *v72 = v97;
    if (v104)
    {
      std::default_delete<WTF::Vector<JSC::DeferredSourceDump,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v72, v104, v98, v99, v100, v101, v102, v103);
      v71 = (uint64_t)*v72;
    }
    else
    {
      v71 = (uint64_t)v97;
    }
  }
  if (*(_QWORD *)(*((_QWORD *)this + 35) + 24))
  {
    v74 = JSC::CodeBlock::baselineVersion((uint64_t)v112);
    v78 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 35) + 24) + 16);
    if ((v78 & 2) != 0)
    {
      LODWORD(v78) = -1;
    }
    else if ((v78 & 1) != 0)
    {
      LODWORD(v78) = *(_DWORD *)((v78 & 0xFFFFFFFF8) + 8);
    }
    else
    {
      v78 >>= 36;
    }
    JSC::DeferredSourceDump::DeferredSourceDump((uint64_t)&v115, v74, *((_QWORD *)this + 1), 4, v78, v75, v76, v77);
    v85 = *(_DWORD *)(v71 + 12);
    if (v85 == *(_DWORD *)(v71 + 8))
      goto LABEL_73;
LABEL_91:
    JSC::DeferredSourceDump::DeferredSourceDump((_QWORD *)(*(_QWORD *)v71 + 24 * v85), (const JSC::DeferredSourceDump *)&v115, v79, v80, v81, v82, v83, v84);
    ++*(_DWORD *)(v71 + 12);
    goto LABEL_92;
  }
  v105 = (JSC::CodeBlock *)JSC::CodeBlock::baselineVersion((uint64_t)v112);
  JSC::DeferredSourceDump::DeferredSourceDump((uint64_t)&v115, v105, v106, v107, v108, v109, v110, v111);
  v85 = *(_DWORD *)(v71 + 12);
  if (v85 != *(_DWORD *)(v71 + 8))
    goto LABEL_91;
LABEL_73:
  WTF::Vector<JSC::DeferredSourceDump,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DeferredSourceDump&>(v71, (unint64_t)&v115);
LABEL_92:
  JSC::DeferredSourceDump::~DeferredSourceDump((JSC::DeferredSourceDump *)&v115);
LABEL_4:
  if (byte_1ECF4C321)
  {
    WTF::dataLog<char [9],JSC::CodeBlock>((uint64_t)v112);
    v86 = *(_QWORD *)(*((_QWORD *)this + 35) + 24);
    if (v86)
    {
      v115 = (WTF *)*((_QWORD *)this + 1);
      LOBYTE(v116) = 4;
      WTF::dataLog<char [18],JSC::CodeBlockWithJITType,char [2],JSC::CodeOrigin>((uint64_t *)&v115, (JSC::CodeOrigin *)(v86 + 16));
    }
    WTF::dataLog<char [16]>("\n");
    v93 = (JSC::CodeBlock *)JSC::CodeBlock::baselineVersion((uint64_t)v112);
    v94 = atomic_load(&WTF::initializeLogFile(void)::once);
    if (v94 != -1)
    {
      v115 = (WTF *)&v118;
      v113[0] = &v115;
      std::__call_once(&WTF::initializeLogFile(void)::once, v113, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
    }
    JSC::CodeBlock::dumpBytecode(v93, (WTF::PrintStream *)WTF::s_file, v87, v88, v89, v90, v91, v92);
  }
  v115 = (WTF *)v117;
  v116 = 32;
  JSC::computePreciseJumpTargetsInternal<(JSC::ComputePreciseJumpTargetsMode)0,JSC::CodeBlock,32ul>((uint64_t)v112, *(uint64_t **)(*((_QWORD *)v112 + 7) + 80), &v115);
  if (byte_1ECF4C321)
  {
    WTF::dataLog<char [16]>("Jump targets: ");
    v113[0] = ", ";
    v113[1] = 3;
    v113[2] = "";
    v113[3] = 1;
    v114 = 0;
    if (HIDWORD(v116))
    {
      v95 = 0;
      v96 = 0;
      do
      {
        WTF::dataLog<WTF::CommaPrinter,unsigned int>((uint64_t)v113, (WTF *)((char *)v115 + v95));
        ++v96;
        v95 += 4;
      }
      while (v96 < HIDWORD(v116));
    }
    WTF::dataLog<char [16]>("\n");
  }
  v14 = 0;
  v15 = 0;
  v16 = HIDWORD(v116);
  v17 = (_QWORD *)((char *)this + 32);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    if (v16 <= v15)
      v19 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)v112 + 7) + 80) + 12);
    else
      v19 = (unsigned int *)((char *)v115 + 4 * v14);
    v20 = *v19;
    do
    {
      if (*v17)
        goto LABEL_21;
      v21 = (void *)*((unsigned int *)this + 10);
      v22 = *(_QWORD *)(StatusReg + 752);
      if (!v22)
        goto LABEL_90;
      v23 = (_BYTE *)(v22 + 11432);
      *(_BYTE *)(v22 + 11432) = 1;
      v24 = *(unsigned int *)(v22 + 11448);
      if ((_DWORD)v24)
      {
        *(_DWORD *)(v22 + 11448) = v24 - *(_DWORD *)(v22 + 11452);
        casual = *(_QWORD *)(v22 + 11440) - v24;
      }
      else
      {
        v39 = *(_QWORD *)(v22 + 11472);
        v40 = *(_QWORD *)(v22 + 11456);
        if (!v39)
        {
          if (*(_BYTE *)(v22 + 11437) == 6)
          {
            v64 = *(_DWORD *)(v22 + 11468);
            v65 = *(unsigned int *)(v22 + 11464);
            if (v65 < v64)
            {
              *(_QWORD *)&v23[8 * v65 + 56] = 0;
              v66 = (unint64_t *)(v22 + 8 * v65 + 11496);
              v67 = v64 - 1 - v65;
              while (v67)
              {
                v40 += 1024;
                v69 = *v66++;
                v68 = v69;
                LODWORD(v65) = v65 + 1;
                --v67;
                if (v69)
                {
                  v39 = __rbit64(v68);
                  *(_DWORD *)(v22 + 11464) = v65;
                  *(_QWORD *)(v22 + 11456) = v40;
                  goto LABEL_26;
                }
              }
              *(_DWORD *)(v22 + 11464) = v64;
            }
          }
          *v23 = 0;
LABEL_90:
          casual = bmalloc_allocate_casual(288, 1);
          goto LABEL_15;
        }
LABEL_26:
        v41 = __clz(v39);
        *(_QWORD *)(v22 + 11472) = v39 & ~(0x8000000000000000 >> v41);
        casual = v40 + 16 * v41;
      }
      *v23 = 0;
LABEL_15:
      JSC::DFG::BasicBlock::BasicBlock(casual, v21, *((unsigned int *)this + 64), *((unsigned int *)this + 65), *((unsigned int *)this + 66), v11, v12, v13, 1.0);
      v113[0] = casual;
      v26 = *((_QWORD *)this + 35);
      v27 = (_QWORD *)(v26 + 104);
      v28 = *(unsigned int *)(v26 + 116);
      if ((_DWORD)v28 == *(_DWORD *)(v26 + 112))
      {
        v42 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v27, v28 + 1, (unint64_t)v113);
        v28 = *(unsigned int *)(v26 + 116);
        *(_QWORD *)(*(_QWORD *)(v26 + 104) + 8 * v28) = *v42;
      }
      else
      {
        *(_QWORD *)(*v27 + 8 * v28) = casual;
      }
      *(_DWORD *)(v26 + 116) = v28 + 1;
      v29 = *((_QWORD *)this + 3);
      v30 = *(unsigned int *)(v29 + 60);
      *(_DWORD *)(casual + 8) = v30;
      if ((_DWORD)v30 == *(_DWORD *)(v29 + 56))
      {
        v44 = v30 + (v30 >> 2);
        if (v44 >= 0x10)
          v45 = v44 + 1;
        else
          v45 = 16;
        if (v45 <= v30 + 1)
          v46 = v30 + 1;
        else
          v46 = v45;
        v47 = *(const void **)(v29 + 48);
        if (v46 < 9)
        {
          v48 = (void *)(v29 + 64);
          *(_QWORD *)(v29 + 48) = v29 + 64;
          *(_DWORD *)(v29 + 56) = 8;
        }
        else
        {
          if (v46 >> 29)
            goto LABEL_98;
          v48 = (void *)WTF::fastMalloc((WTF *)(8 * v46));
          *(_DWORD *)(v29 + 56) = v46;
          *(_QWORD *)(v29 + 48) = v48;
        }
        memcpy(v48, v47, 8 * v30);
        if ((const void *)(v29 + 64) != v47 && v47)
        {
          if (*(const void **)(v29 + 48) == v47)
          {
            *(_QWORD *)(v29 + 48) = 0;
            *(_DWORD *)(v29 + 56) = 0;
          }
          WTF::fastFree((unint64_t)v47, v49, v50, v51, v52, v53, v54, v55);
        }
        v30 = *(unsigned int *)(v29 + 60);
        v31 = (uint64_t *)(*(_QWORD *)(v29 + 48) + 8 * v30);
        v32 = *((_QWORD *)this + 3);
      }
      else
      {
        v31 = (uint64_t *)(*(_QWORD *)(v29 + 48) + 8 * v30);
        v32 = v29;
      }
      *v31 = casual;
      *(_DWORD *)(v29 + 60) = v30 + 1;
      v33 = v113[0];
      *v17 = v113[0];
      if (*(_DWORD *)(v32 + 60) == 1)
      {
        *(_BYTE *)(v33 + 19) = 1;
        v43 = *(unsigned int *)(v32 + 140);
        if ((_DWORD)v43 == *(_DWORD *)(v32 + 136))
        {
          WTF::Vector<JSC::DFG::BasicBlock *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>(v32 + 128, (unint64_t)this + 32);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v32 + 128) + 8 * v43) = v33;
          *(_DWORD *)(v32 + 140) = v43 + 1;
        }
      }
      *((_DWORD *)this + 29) = 0;
LABEL_21:
      JSC::DFG::ByteCodeParser::parseBlock(this, v20);
      v38 = *((_QWORD *)this + 4);
      if (*(_DWORD *)(v38 + 220))
      {
        *v17 = 0;
      }
      else
      {
        v57 = *((_DWORD *)this + 10);
        v113[0] = *((_QWORD *)this + 4);
        v58 = *(_DWORD *)(v38 + 4);
        if (v58 != -1 && v58 != 0x3FFFFFFF)
        {
LABEL_98:
          __break(0xC471u);
          JUMPOUT(0x19832C464);
        }
        *(_DWORD *)(v38 + 4) = v57;
        v60 = *((_QWORD *)this + 35);
        v61 = (_QWORD *)(v60 + 104);
        v62 = *(unsigned int *)(v60 + 116);
        if ((_DWORD)v62 == *(_DWORD *)(v60 + 112))
        {
          v63 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v62 + 1, (unint64_t)v113);
          v62 = *(unsigned int *)(v60 + 116);
          *(_QWORD *)(*(_QWORD *)(v60 + 104) + 8 * v62) = *v63;
        }
        else
        {
          *(_QWORD *)(*v61 + 8 * v62) = v38;
        }
        *(_DWORD *)(v60 + 116) = v62 + 1;
      }
    }
    while (v20 > *((_DWORD *)this + 10) >> 2);
    v14 = v15 + 1;
    v16 = HIDWORD(v116);
    v15 = v14;
  }
  while (HIDWORD(v116) >= v14);
  v56 = v115;
  if (v117 != (_BYTE *)v115)
  {
    if (v115)
    {
      v115 = 0;
      LODWORD(v116) = 0;
      WTF::fastFree((unint64_t)v56, v34, v35, v36, v37, v11, v12, v13);
    }
  }
}

void JSC::DeferredSourceDump::~DeferredSourceDump(JSC::DeferredSourceDump *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v2 = (uint64_t *)(v1 - 16);
    v3 = *(_QWORD *)(((v1 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v4 = *(uint64_t **)(v1 - 8);
    if (v4)
    {
      v5 = *v2;
      *v4 = *v2;
      *(_QWORD *)(v5 + 8) = v4;
      *v2 = 0;
      v2[1] = 0;
    }
    *v2 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v2;
    *((_QWORD *)this + 1) = 0;
  }
  v6 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v7 = (uint64_t *)(v6 - 16);
    v8 = *(_QWORD *)(((v6 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v9 = *(uint64_t **)(v6 - 8);
    if (v9)
    {
      v10 = *v7;
      *v9 = *v7;
      *(_QWORD *)(v10 + 8) = v9;
      *v7 = 0;
      v7[1] = 0;
    }
    *v7 = *(_QWORD *)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;
    *(_QWORD *)this = 0;
  }
}

uint64_t WTF::dataLog<char [9],JSC::CodeBlock>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Parsing ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [18],JSC::CodeBlockWithJITType,char [2],JSC::CodeOrigin>(uint64_t *a1, JSC::CodeOrigin *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", " for inlining at ");
  JSC::CodeBlock::dumpAssumingJITType(*a1);
  WTF::PrintStream::printf(v6, "%s", " ");
  JSC::CodeOrigin::dump(a2, v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<WTF::CommaPrinter,unsigned int>(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  char **v24;
  char *v25;
  int v26;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v25 = &v23;
    v24 = &v25;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v7 = (WTF::PrintStream *)v6;
  if (*(_BYTE *)(a1 + 32))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v9 = *(char **)a1;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    if (v9)
    {
      v13 = v10 - 1;
      if (!v10)
        v13 = 0;
      WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v25, v12);
    }
    else
    {
      v20 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = 0;
      *(_BYTE *)(v20 + 16) = 0;
      v25 = (char *)v20;
      v26 = 0;
    }
    WTF::printExpectedCStringHelper(v11, "StringView", &v25);
    if (v26 != -1)
      ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v26])(&v24, &v25);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
  }
  else
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v15 = *(char **)(a1 + 16);
    v16 = *(_QWORD *)(a1 + 24);
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    if (v15)
    {
      v19 = v16 - 1;
      if (!v16)
        v19 = 0;
      WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v25, v18);
    }
    else
    {
      v21 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_BYTE *)(v21 + 16) = 0;
      v25 = (char *)v21;
      v26 = 0;
    }
    WTF::printExpectedCStringHelper(v17, "StringView", &v25);
    if (v26 != -1)
      ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v26])(&v24, &v25);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
    *(_BYTE *)(a1 + 32) = 1;
  }
  WTF::PrintStream::printf(v7, "%u", *a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

void JSC::DFG::ByteCodeParser::pruneUnreachableNodes(JSC::DFG::ByteCodeParser *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  int v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v58;
  uint64_t v59;
  JSC::DFG::BasicBlock *v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t casual;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  WTF *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  WTF *v153;
  __int128 v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  __int128 *v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  int v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  WTF *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  WTF *v203;
  __int128 v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  int v229;
  unsigned int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  WTF *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  WTF *v253;
  __int128 v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unsigned int v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int v263;
  uint64_t v264;
  int v265;
  unsigned int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  WTF *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  WTF *v304;
  __int128 v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  __int128 *v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  unsigned int v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  _QWORD *v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  int v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  WTF *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  WTF *v365;
  __int128 v366;
  uint64_t *v367;
  uint64_t v368;
  uint64_t v369;
  unsigned int v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  unsigned int v378;
  unsigned int *v379;
  unint64_t v380;
  int v381;
  unsigned int *v382;
  uint64_t v383;
  unint64_t v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  unint64_t v390;
  _QWORD *v391;
  _QWORD *v392;
  unsigned __int8 *v393;
  unsigned int v394;
  int v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  uint64_t v401;
  unint64_t v402;
  _QWORD *v403;
  _QWORD *v404;
  _QWORD *v405;
  JSC::BytecodeLivenessAnalysis *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  int v414;
  __int128 *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  int v420;
  int v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  unint64_t v434;
  unint64_t v435;
  unint64_t v436;
  uint64_t v437;
  int v438;
  int v439;
  BOOL v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  int v444;
  unsigned int v445;
  uint64_t v446;
  int v447;
  unsigned int v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  uint64_t v462;
  int v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  unint64_t v467;
  uint64_t v468;
  uint64_t v469;
  _QWORD *v470;
  uint64_t v471;
  uint64_t v472;
  int v473;
  int v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  WTF *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  WTF *v486;
  __int128 v487;
  unint64_t v488;
  uint64_t v489;
  unint64_t v490;
  _QWORD *v491;
  uint64_t v492;
  uint64_t v493;
  int v494;
  __int128 *v495;
  _QWORD *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  int v502;
  unsigned int v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t v511;
  unint64_t v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  unint64_t v523;
  uint64_t v524;
  _QWORD *v525;
  uint64_t v526;
  uint64_t v527;
  int v528;
  int v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  WTF *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  WTF *v541;
  __int128 v542;
  unint64_t v543;
  uint64_t v544;
  unint64_t v545;
  _QWORD *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  int v554;
  __int128 *v555;
  unint64_t v556;
  uint64_t v557;
  unint64_t v558;
  JSC::DFG::BasicBlock *v559;
  unsigned __int8 *v560;
  int v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  WTF *v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  WTF *v572;
  __int128 v573;
  uint64_t *v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  unint64_t v578;
  unint64_t v579;
  _QWORD *v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  WTF *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  WTF *v591;
  __int128 v592;
  uint64_t v593;
  unint64_t v594;
  unint64_t v595;
  unint64_t v596;
  unint64_t v597;
  unint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  void *v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  unint64_t *v632;
  unint64_t v633;
  unint64_t v634;
  uint64_t v635;
  uint64_t v636;
  __int128 *v637;
  __int128 *v638;
  unint64_t *v639;
  unint64_t v640;
  unint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  _QWORD *v668;
  __int128 *v669;
  unint64_t *v670;
  unint64_t v671;
  unint64_t v672;
  uint64_t v673;
  uint64_t v674;
  unint64_t v675;
  uint64_t v676;
  unint64_t v677;
  _QWORD *v678;
  _QWORD *v679;
  uint64_t v680;
  uint64_t v681;
  _QWORD *v682;
  unsigned int v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  unsigned int v702;
  unint64_t *v703;
  unint64_t v704;
  unint64_t v705;
  uint64_t v706;
  uint64_t v707;
  unint64_t v708;
  __int128 *v709;
  uint64_t v710;
  uint64_t v711;
  BOOL v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  BOOL v717;
  unsigned int v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  _QWORD *v740;
  unsigned int v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  unint64_t v796;
  uint64_t v797;
  unsigned int v798;
  unint64_t *v799;
  uint64_t v800;
  unint64_t v801;
  unint64_t v802;
  uint64_t v803;
  unsigned int v804;
  unint64_t *v805;
  uint64_t v806;
  unint64_t v807;
  unint64_t v808;
  uint64_t v809;
  unsigned int v810;
  unint64_t *v811;
  uint64_t v812;
  unint64_t v813;
  unint64_t v814;
  uint64_t v815;
  unsigned int v816;
  unint64_t *v817;
  uint64_t v818;
  unint64_t v819;
  unint64_t v820;
  uint64_t v821;
  unsigned int v822;
  unint64_t *v823;
  uint64_t v824;
  unint64_t v825;
  unint64_t v826;
  uint64_t v827;
  unsigned int v828;
  unint64_t *v829;
  uint64_t v830;
  unint64_t v831;
  unint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  BOOL v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  BOOL v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  BOOL v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  _QWORD *v873;
  uint64_t v874;
  unsigned __int16 *v875;
  int v876;
  int v877;
  uint64_t v878;
  int v879;
  uint64_t *v880;
  uint64_t v881;
  _QWORD *v882;
  unsigned int v883;
  unint64_t v884;
  unint64_t v885;
  unint64_t v886;
  char *v887;
  void *v888;
  uint64_t v889;
  unsigned int v890;
  unint64_t *v891;
  uint64_t v892;
  unint64_t v893;
  unint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  unint64_t v902;
  unint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  int v972;
  WTF *v973;
  int v974;
  uint64_t v975;
  char v976;
  int v977;
  WTF *v978;
  WTF *v979;
  uint64_t v980;
  JSC::DFG::BasicBlock *v981;
  unsigned int v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  int v986;
  int v987;
  uint64_t v988;
  char v989;
  uint64_t v990;
  unint64_t v991;
  unsigned int v992;
  uint64_t v994;
  __int16 v995;
  unint64_t StatusReg;
  void *v997;
  void *v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  __int16 v1003;
  WTF *v1004;
  WTF *v1005;
  uint64_t v1006;
  _BYTE v1007[128];
  uint64_t v1008;
  __int128 v1009;
  __int16 v1010;
  void *v1011;
  uint64_t v1012[2];

  if (*((_BYTE *)this + 457))
  {
    v1008 = 0x8000000000000000;
    v8 = *((_QWORD *)this + 3);
    v9 = *(unsigned int *)(v8 + 60);
    if ((_DWORD)v9)
    {
      v10 = 0;
      v11 = *(_QWORD *)(v8 + 48);
      while (!*(_QWORD *)(v11 + 8 * v10))
      {
        if (v9 == ++v10)
          goto LABEL_24;
      }
      if ((_DWORD)v9 != (_DWORD)v10)
      {
        v10 = v10;
        while (1)
        {
          if (v9 <= v10)
          {
            __break(0xC471u);
            JUMPOUT(0x198332614);
          }
          v12 = *(_QWORD *)(v11 + 8 * v10);
          if (*(_BYTE *)(v12 + 19))
          {
            if (*(_DWORD *)(v12 + 4) == *(_DWORD *)(*(_QWORD *)(v8 + 24) + 108))
              break;
          }
          if (v9 > ++v10)
          {
            while (!*(_QWORD *)(v11 + 8 * v10))
            {
              if (v9 == ++v10)
                goto LABEL_24;
            }
            v10 = v10;
          }
          if (v9 == v10)
            goto LABEL_24;
        }
        v13 = *(unsigned int *)(v12 + 8);
        if (v13 < 0x3F
          || (WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v1008, v13 + 1, 0), v1008 < 0))
        {
          v14 = &v1008;
        }
        else
        {
          v14 = (uint64_t *)(2 * v1008 + 8);
        }
        *(uint64_t *)((char *)v14 + ((v13 >> 3) & 0x1FFFFFF8)) |= 1 << v13;
        v8 = *((_QWORD *)this + 3);
      }
    }
LABEL_24:
    JSC::DFG::Graph::blocksInPostOrder((JSC::DFG::Graph *)v8, 0, a3, a4, a5, a6, a7, a8, (uint64_t)&v1004);
    while (1)
    {
      v22 = v1004;
      if (!HIDWORD(v1005))
        goto LABEL_71;
      v23 = 0;
      v24 = (WTF *)((char *)v1004 + 8 * HIDWORD(v1005));
      do
      {
        v25 = *(unsigned int *)(*(_QWORD *)v22 + 220);
        v26 = *(_QWORD *)(*(_QWORD *)v22 + 208);
        v27 = *(_QWORD *)(v26 + 8 * v25 - 8);
        v28 = *(unsigned __int16 *)(v27 + 18);
        if ((v28 - 364) >= 0xC)
        {
          v48 = v26 - 16;
          do
          {
            v27 = *(_QWORD *)(v48 + 8 * v25);
            v28 = *(unsigned __int16 *)(v27 + 18);
            --v25;
          }
          while ((v28 - 364) > 0xB);
        }
        v29 = 1;
        switch(v28)
        {
          case 364:
            goto LABEL_30;
          case 365:
            v29 = 2;
            goto LABEL_30;
          case 366:
            v29 = *(_DWORD *)(*(_QWORD *)(v27 + 72) + 12) + 1;
            goto LABEL_67;
          case 367:
            v29 = *(_DWORD *)(*(_QWORD *)(v27 + 72) + 12);
LABEL_67:
            if (!v29)
              goto LABEL_57;
LABEL_30:
            v30 = 0;
            v31 = 0;
            v32 = (uint64_t *)(v27 + 72);
            v33 = v1008;
            v34 = (_QWORD *)(2 * v1008);
            v35 = (uint64_t *)(2 * v1008 + 8);
            if (v1008 < 0)
              v35 = &v1008;
            break;
          default:
            goto LABEL_57;
        }
        while (1)
        {
          if (v28 == 366)
          {
            v41 = (_QWORD *)*v32;
            v42 = *(_DWORD *)(*v32 + 12);
            if (v42 > v30)
            {
              v37 = *v41 + 32 * v31;
LABEL_39:
              v36 = (uint64_t *)(v37 + 16);
              goto LABEL_40;
            }
            if (v42 != v30)
            {
              __break(0xC471u);
              JUMPOUT(0x198331DECLL);
            }
            v36 = v41 + 2;
          }
          else if (v28 == 367)
          {
            if (*(_DWORD *)(*v32 + 12) <= v30)
            {
              __break(0xC471u);
              JUMPOUT(0x1983325DCLL);
            }
            v36 = (uint64_t *)(*(_QWORD *)*v32 + 8 * v31);
          }
          else
          {
            if (v30)
            {
              if (v30 != 1)
              {
                __break(0xC471u);
                JUMPOUT(0x198332420);
              }
              v37 = *v32;
              goto LABEL_39;
            }
            v36 = v32;
            if (v28 != 364)
              v36 = (uint64_t *)*v32;
          }
LABEL_40:
          v38 = *v36;
          if (v38)
          {
            v39 = v1008 < 0 ? 63 : *v34;
            v40 = *(unsigned int *)(v38 + 8);
            if (v39 > v40 && ((*(unint64_t *)((char *)v35 + ((v40 >> 3) & 0x1FFFFFF8)) >> v40) & 1) != 0)
              break;
          }
          v30 = v31 + 1;
          v31 = (v31 + 1);
          if (v29 == v30)
            goto LABEL_57;
        }
        if (v1008 < 0)
          v43 = 63;
        else
          v43 = *v34;
        v44 = *(unsigned int *)(*(_QWORD *)v22 + 8);
        if (v43 <= v44)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v1008, v44 + 1, 0);
          v33 = v1008;
          v34 = (_QWORD *)(2 * v1008);
        }
        v45 = v34 + 1;
        if (v33 < 0)
          v45 = &v1008;
        v46 = (v44 >> 3) & 0x1FFFFFF8;
        v47 = *(uint64_t *)((char *)v45 + v46);
        *(uint64_t *)((char *)v45 + v46) = v47 | (1 << v44);
        v23 |= (v47 & (1 << v44)) == 0;
LABEL_57:
        v22 = (WTF *)((char *)v22 + 8);
      }
      while (v22 != v24);
      if ((v23 & 1) == 0)
      {
        v22 = v1004;
LABEL_71:
        if (v22)
        {
          v1004 = 0;
          LODWORD(v1005) = 0;
          WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
        }
        v49 = *((_QWORD *)this + 3);
        v1004 = (WTF *)v49;
        v1005 = (WTF *)v1007;
        v1006 = 8;
        v50 = *(_DWORD *)(v49 + 60);
        if (!v50)
        {
          __break(0xC471u);
          JUMPOUT(0x19833261CLL);
        }
        v51 = *(uint64_t **)(v49 + 48);
        v52 = *v51;
        v53 = *(unsigned int *)(*v51 + 84);
        v973 = (WTF *)(8 * v53);
        if (!(_DWORD)v53)
        {
          v54 = 0;
          goto LABEL_78;
        }
        if (v53 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x198332624);
        }
        v54 = (void *)WTF::fastMalloc(v973);
        bzero(v54, (size_t)v973);
        v49 = *((_QWORD *)this + 3);
        v50 = *(_DWORD *)(v49 + 60);
        if (!v50)
          goto LABEL_82;
        v51 = *(uint64_t **)(v49 + 48);
LABEL_78:
        v55 = 0;
        v974 = v50;
        v1000 = *(unsigned int *)(v52 + 88);
        while (!v51[v55])
        {
          if (v50 == ++v55)
            goto LABEL_81;
        }
        if (v50 != (_DWORD)v55)
        {
          v980 = *(unsigned int *)(v52 + 92) + v1000;
          StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
          v997 = v54;
          LODWORD(v58) = v50;
          LODWORD(v59) = v55;
          v971 = v49;
          v972 = v53;
          while (1)
          {
            if (v58 <= v59)
            {
              __break(0xC471u);
              JUMPOUT(0x198332604);
            }
            v60 = *(JSC::DFG::BasicBlock **)(*(_QWORD *)(v49 + 48) + 8 * v59);
            if (!v60)
              goto LABEL_1757;
            v61 = (_QWORD *)(2 * v1008);
            v62 = v1008 < 0 ? 63 : *v61;
            v63 = *((unsigned int *)v60 + 2);
            if (v62 <= v63)
              goto LABEL_1757;
            v64 = v61 + 1;
            v65 = &v1008;
            if (v1008 >= 0)
              v65 = v64;
            if (((*(unint64_t *)((char *)v65 + ((v63 >> 3) & 0x1FFFFFF8)) >> v63) & 1) == 0)
            {
LABEL_1757:
              if ((_DWORD)v53)
                bzero(v54, (size_t)v973);
              if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
              {
                v872 = *((unsigned int *)v60 + 21);
                if ((_DWORD)v872)
                {
                  v873 = (_QWORD *)*((_QWORD *)v60 + 9);
                  do
                  {
                    if (*v873)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198332080);
                    }
                    ++v873;
                    --v872;
                  }
                  while (v872);
                }
              }
              v66 = *((unsigned int *)v60 + 55);
              if ((_DWORD)v66)
                break;
            }
LABEL_775:
            v59 = (v59 + 1);
            v58 = *(unsigned int *)(v49 + 60);
            if (v58 > v59)
            {
              while (!*(_QWORD *)(*(_QWORD *)(v49 + 48) + 8 * v59))
              {
                if (v58 == ++v59)
                {
                  LODWORD(v59) = *(_DWORD *)(v49 + 60);
                  break;
                }
              }
            }
            if (v974 == (_DWORD)v59)
              goto LABEL_81;
          }
          v67 = 0;
          while (2)
          {
            v68 = *(_QWORD *)(*((_QWORD *)v60 + 26) + 8 * v67);
            v69 = *(unsigned __int16 *)(v68 + 18);
            if (v69 <= 0x27)
            {
              if (((1 << v69) & 0xC030018000) != 0)
                goto LABEL_107;
              if (v69 == 27)
              {
                if (*(_DWORD *)(*((_QWORD *)this + 3) + 944) == 2)
                  goto LABEL_122;
LABEL_107:
                v70 = *(_QWORD **)(v68 + 72);
                v71 = v70;
                do
                {
                  v72 = v71;
                  v71 = (_QWORD *)*v71;
                }
                while (v71);
                if (v72 != v70)
                {
                  *v70 = v72;
                  v70 = *(_QWORD **)(v68 + 72);
                }
                v73 = v70;
                do
                {
                  v74 = v73;
                  v73 = (_QWORD *)*v73;
                }
                while (v73);
                if (v74 != v70)
                  *v70 = v74;
                v75 = v74[3];
                v76 = HIDWORD(v75);
                v77 = v980 + (int)v75;
                if ((v75 & 0x80000000) == 0)
                  v78 = (uint64_t)(((unint64_t)v75 << 32) - 0x500000000) >> 32;
                else
                  v78 = (v75 ^ 0xFFFFFFFFLL) + v1000;
                if (v76 == 2)
                  v78 = v77;
                *((_QWORD *)v54 + v78) = v72;
              }
            }
            if ((_DWORD)v69 != 379)
            {
LABEL_122:
              if (++v67 == v66)
                goto LABEL_775;
              continue;
            }
            break;
          }
          if (v66 <= v67)
          {
            __break(0xC471u);
            JUMPOUT(0x19833260CLL);
          }
          v79 = *(_QWORD *)(*((_QWORD *)v60 + 26) + 8 * v67);
          v80 = *(_QWORD *)v79;
          v977 = v59;
          if ((*(_QWORD *)v79 & 1) != 0)
          {
            v851 = *(_QWORD *)(v80 & 0xFFFFFFFF8);
            if ((v80 & 2) != 0
              || ((v852 = *(unsigned int *)((v80 & 0xFFFFFFFF8) + 8), (_DWORD)v852 != 0x3FFFFFFF)
                ? (v853 = (_DWORD)v852 == -1)
                : (v853 = 1),
                  v853))
            {
              v854 = 2;
            }
            else if (v852 >> 28)
            {
              v960 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v960 = v851;
              *(_DWORD *)(v960 + 8) = v852;
              v854 = 1;
              v851 = v960;
            }
            else
            {
              v854 = *(_QWORD *)(v80 & 0xFFFFFFFF8);
              v851 = v852 << 36;
            }
            v80 = v851 | v854;
          }
          v999 = v80;
          v81 = *(_QWORD *)(v79 + 8);
          if ((v81 & 1) != 0)
          {
            v855 = *(_QWORD *)(v81 & 0xFFFFFFFF8);
            if ((v81 & 2) != 0
              || ((v856 = *(unsigned int *)((v81 & 0xFFFFFFFF8) + 8), (_DWORD)v856 != 0x3FFFFFFF)
                ? (v857 = (_DWORD)v856 == -1)
                : (v857 = 1),
                  v857))
            {
              v858 = 2;
            }
            else if (v856 >> 28)
            {
              v961 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v961 = v855;
              *(_DWORD *)(v961 + 8) = v856;
              v858 = 1;
              v855 = v961;
            }
            else
            {
              v858 = *(_QWORD *)(v81 & 0xFFFFFFFF8);
              v855 = v856 << 36;
            }
            v81 = v855 | v858;
          }
          v995 = *(_WORD *)(v79 + 16);
          if (!(_BYTE)v995)
          {
            __break(0xC471u);
            JUMPOUT(0x198331668);
          }
          v82 = *((unsigned int *)v60 + 55);
          v981 = v60;
          if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
          {
            if ((_DWORD)v82)
            {
              v874 = 8 * v82;
              while (1)
              {
                v875 = *(unsigned __int16 **)(*((_QWORD *)v60 + 26) - 8 + v874);
                v876 = v875[9];
                if ((v876 - 364) < 0xC)
                  break;
                if ((v876 - 28) < 2 || (v876 - 23) <= 2)
                {
                  v874 -= 8;
                  if (v874)
                    continue;
                }
                goto LABEL_1512;
              }
            }
            else
            {
LABEL_1512:
              v875 = 0;
            }
            v877 = JSC::DFG::Node::SuccessorsIterable::end((JSC::DFG::Node::SuccessorsIterable *)v875);
            if (v877)
            {
              v878 = 0;
              v879 = v875[9];
              v880 = (uint64_t *)(v875 + 36);
              do
              {
                if (v879 == 366)
                {
                  v882 = (_QWORD *)*v880;
                  v883 = *(_DWORD *)(*v880 + 12);
                  if (v883 <= v878)
                  {
                    if (v883 != (_DWORD)v878)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198331A70);
                    }
                  }
                  else
                  {
                    v882 = (_QWORD *)(*v882 + 32 * v878);
                  }
                }
                else
                {
                  if (v879 == 367)
                  {
                    if (*(_DWORD *)(*v880 + 12) <= v878)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198332654);
                    }
                    v881 = *(_QWORD *)*v880 + 8 * v878;
                    v54 = v997;
                    v60 = v981;
                    goto LABEL_1523;
                  }
                  if (!(_DWORD)v878)
                  {
                    v881 = (uint64_t)(v875 + 36);
                    if (v879 != 364)
                      v881 = *v880;
                    goto LABEL_1523;
                  }
                  if ((_DWORD)v878 != 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198332644);
                  }
                  v882 = (_QWORD *)*v880;
                }
                v881 = (uint64_t)(v882 + 2);
LABEL_1523:
                if (*(_DWORD *)(*(_QWORD *)v881 + 52))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198332148);
                }
                v878 = (v878 + 1);
              }
              while ((_DWORD)v878 != v877);
            }
          }
          v83 = (v67 + 1);
          v998 = (void *)v83;
          if (v82 <= v67)
          {
            v708 = *((unsigned int *)v60 + 54);
            if (v708 <= v67)
            {
              v884 = v708 + (v708 >> 2);
              if (v884 >= 0x10)
                v885 = v884 + 1;
              else
                v885 = 16;
              if (v885 <= v83)
                v886 = (v67 + 1);
              else
                v886 = v885;
              v887 = (char *)*((_QWORD *)v60 + 26);
              if (v886 < 9)
              {
                v888 = (char *)v60 + 224;
                *((_QWORD *)v60 + 26) = (char *)v60 + 224;
                *((_DWORD *)v60 + 54) = 8;
              }
              else
              {
                if (v886 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19833264CLL);
                }
                v888 = (void *)WTF::fastMalloc((WTF *)(8 * v886));
                *((_DWORD *)v60 + 54) = v886;
                *((_QWORD *)v60 + 26) = v888;
              }
              memcpy(v888, v887, 8 * v82);
              LODWORD(v83) = (_DWORD)v998;
              if ((char *)v60 + 224 != v887 && v887)
              {
                if (*((char **)v60 + 26) == v887)
                {
                  *((_QWORD *)v60 + 26) = 0;
                  *((_DWORD *)v60 + 54) = 0;
                }
                WTF::fastFree((unint64_t)v887, v15, v16, v17, v18, v19, v20, v21);
                LODWORD(v83) = (_DWORD)v998;
              }
            }
          }
          *((_DWORD *)v60 + 55) = v83;
          v84 = v999;
          v979 = (WTF *)(v999 & 0xFFFFFFFF8);
          if ((v999 & 1) == 0)
          {
            v975 = v999 & 2;
            v976 = 1;
            v970 = v999;
            goto LABEL_134;
          }
          v859 = *(_QWORD *)v979;
          if ((v999 & 2) != 0
            || (v860 = *(unsigned int *)((v999 & 0xFFFFFFFF8) + 8), (_DWORD)v860 == 0x3FFFFFFF)
            || (_DWORD)v860 == -1)
          {
            v861 = 2;
          }
          else if (v860 >> 28)
          {
            v962 = WTF::fastMalloc((WTF *)0x10);
            LOBYTE(v84) = v999;
            *(_QWORD *)v962 = v859;
            *(_DWORD *)(v962 + 8) = v860;
            v861 = 1;
            v859 = v962;
          }
          else
          {
            v861 = *(_QWORD *)v979;
            v859 = v860 << 36;
          }
          v975 = v84 & 2;
          v84 = v859 | v861;
          v970 = v859 | v861;
          if (((v859 | v861) & 1) != 0)
          {
            v862 = *(_QWORD *)(v84 & 0xFFFFFFFF8);
            if ((v84 & 2) != 0
              || ((v863 = *(unsigned int *)((v84 & 0xFFFFFFFF8) + 8), (_DWORD)v863 != 0x3FFFFFFF)
                ? (v864 = (_DWORD)v863 == -1)
                : (v864 = 1),
                  v864))
            {
              v865 = 2;
            }
            else if (v863 >> 28)
            {
              v963 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v963 = v862;
              *(_DWORD *)(v963 + 8) = v863;
              v865 = 1;
              v862 = v963;
            }
            else
            {
              v865 = *(_QWORD *)(v84 & 0xFFFFFFFF8);
              v862 = v863 << 36;
            }
            v976 = 0;
            v85 = v862 | v865;
          }
          else
          {
            v976 = 1;
LABEL_134:
            v85 = v84;
          }
          v978 = (WTF *)(v81 & 0xFFFFFFFF8);
          v86 = 1;
          while (2)
          {
            v87 = v85;
            if ((v85 & 1) != 0)
            {
              v710 = *(_QWORD *)(v85 & 0xFFFFFFFF8);
              if ((v85 & 2) != 0
                || ((v711 = *(unsigned int *)((v85 & 0xFFFFFFFF8) + 8), (_DWORD)v711 != 0x3FFFFFFF)
                  ? (v712 = (_DWORD)v711 == -1)
                  : (v712 = 1),
                    v712))
              {
                v719 = 2;
              }
              else if (v711 >> 28)
              {
                v927 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v927 = v710;
                *(_DWORD *)(v927 + 8) = v711;
                v719 = 1;
                v710 = v927;
              }
              else
              {
                v719 = *(_QWORD *)(v85 & 0xFFFFFFFF8);
                v710 = v711 << 36;
              }
              v87 = v710 | v719;
            }
            if ((v87 & 2) != 0)
            {
              v89 = v87 & 0xFFFFFFFF8;
              LODWORD(v88) = -1;
              if ((v87 & 1) != 0)
                goto LABEL_1052;
            }
            else
            {
              if ((v87 & 1) == 0)
              {
                v88 = v87 >> 36;
                v89 = v87 & 0xFFFFFFFF8;
                goto LABEL_140;
              }
              v89 = v87 & 0xFFFFFFFF8;
              LODWORD(v88) = *(_DWORD *)((v87 & 0xFFFFFFFF8) + 8);
LABEL_1052:
              v89 = *(_QWORD *)v89;
            }
LABEL_140:
            v991 = v87;
            v992 = v88;
            v994 = v89;
            v988 = v85;
            v989 = v86;
            if (!v89)
            {
              v109 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 28);
              if (!(_DWORD)v109)
                goto LABEL_398;
              while (2)
              {
                v110 = (v109 + 4);
                v111 = (v110 ^ 0xFFFFFFFFLL) + v1000;
                if ((int)v109 + 4 >= 0)
                  v111 = ((v110 << 32) - 0x500000000) >> 32;
                v112 = *((_QWORD *)v54 + v111);
                if (v112)
                {
                  if ((int)v110 >= 5)
                    goto LABEL_162;
LABEL_192:
                  v144 = v999;
                  if ((v999 & 1) != 0)
                  {
                    v650 = *(_QWORD *)v979;
                    if (v975
                      || (v651 = *(unsigned int *)((v999 & 0xFFFFFFFF8) + 8), (_DWORD)v651 == 0x3FFFFFFF)
                      || (_DWORD)v651 == -1)
                    {
                      v652 = 2;
                    }
                    else if (v651 >> 28)
                    {
                      v915 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v915 = v650;
                      *(_DWORD *)(v915 + 8) = v651;
                      v652 = 1;
                      v650 = v915;
                    }
                    else
                    {
                      v652 = *(_QWORD *)v979;
                      v650 = v651 << 36;
                    }
                    v144 = v650 | v652;
                  }
                  v145 = v81;
                  if ((v81 & 1) != 0)
                  {
                    v653 = *(_QWORD *)v978;
                    if ((v81 & 2) != 0
                      || (v654 = *(unsigned int *)((v81 & 0xFFFFFFFF8) + 8), (_DWORD)v654 == 0x3FFFFFFF)
                      || (_DWORD)v654 == -1)
                    {
                      v655 = 2;
                    }
                    else if (v654 >> 28)
                    {
                      v916 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v916 = v653;
                      *(_DWORD *)(v916 + 8) = v654;
                      v655 = 1;
                      v653 = v916;
                    }
                    else
                    {
                      v655 = *(_QWORD *)v978;
                      v653 = v654 << 36;
                    }
                    v145 = v653 | v655;
                  }
                  v146 = v1004;
                  v147 = v144;
                  if ((v144 & 1) != 0)
                  {
                    v656 = *(_QWORD *)(v144 & 0xFFFFFFFF8);
                    if ((v144 & 2) != 0
                      || (v657 = *(unsigned int *)((v144 & 0xFFFFFFFF8) + 8), (_DWORD)v657 == 0x3FFFFFFF)
                      || (_DWORD)v657 == -1)
                    {
                      v658 = 2;
                    }
                    else if (v657 >> 28)
                    {
                      v917 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v917 = v656;
                      *(_DWORD *)(v917 + 8) = v657;
                      v658 = 1;
                      v656 = v917;
                    }
                    else
                    {
                      v658 = *(_QWORD *)(v144 & 0xFFFFFFFF8);
                      v656 = v657 << 36;
                    }
                    v147 = v656 | v658;
                  }
                  v148 = v145;
                  if ((v145 & 1) != 0)
                  {
                    v659 = *(_QWORD *)(v145 & 0xFFFFFFFF8);
                    if ((v145 & 2) != 0
                      || (v660 = *(unsigned int *)((v145 & 0xFFFFFFFF8) + 8), (_DWORD)v660 == 0x3FFFFFFF)
                      || (_DWORD)v660 == -1)
                    {
                      v661 = 2;
                    }
                    else if (v660 >> 28)
                    {
                      v918 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v918 = v659;
                      *(_DWORD *)(v918 + 8) = v660;
                      v661 = 1;
                      v659 = v918;
                    }
                    else
                    {
                      v661 = *(_QWORD *)(v145 & 0xFFFFFFFF8);
                      v659 = v660 << 36;
                    }
                    v148 = v659 | v661;
                  }
                  v149 = v147;
                  if ((v147 & 1) != 0)
                  {
                    v662 = *(_QWORD *)(v147 & 0xFFFFFFFF8);
                    if ((v147 & 2) != 0
                      || (v663 = *(unsigned int *)((v147 & 0xFFFFFFFF8) + 8), (_DWORD)v663 == 0x3FFFFFFF)
                      || (_DWORD)v663 == -1)
                    {
                      v664 = 2;
                    }
                    else if (v663 >> 28)
                    {
                      v919 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v919 = v662;
                      *(_DWORD *)(v919 + 8) = v663;
                      v664 = 1;
                      v662 = v919;
                    }
                    else
                    {
                      v664 = *(_QWORD *)(v147 & 0xFFFFFFFF8);
                      v662 = v663 << 36;
                    }
                    v149 = v662 | v664;
                  }
                  *(_QWORD *)&v1009 = v149;
                  v150 = v148;
                  if ((v148 & 1) != 0)
                  {
                    v665 = *(_QWORD *)(v148 & 0xFFFFFFFF8);
                    if ((v148 & 2) != 0
                      || (v666 = *(unsigned int *)((v148 & 0xFFFFFFFF8) + 8), (_DWORD)v666 == 0x3FFFFFFF)
                      || (_DWORD)v666 == -1)
                    {
                      v667 = 2;
                    }
                    else if (v666 >> 28)
                    {
                      v920 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v920 = v665;
                      *(_DWORD *)(v920 + 8) = v666;
                      v667 = 1;
                      v665 = v920;
                    }
                    else
                    {
                      v667 = *(_QWORD *)(v148 & 0xFFFFFFFF8);
                      v665 = v666 << 36;
                    }
                    v150 = v665 | v667;
                  }
                  *((_QWORD *)&v1009 + 1) = v150;
                  v1010 = v995;
                  v1012[0] = v112;
                  LOWORD(v1011) = 28;
                  v151 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>((uint64_t)v146 + 1032, (__int16 *)&v1011, (uint64_t)&v1009, v1012, v18, v19, v20, v21);
                  if ((BYTE8(v1009) & 1) != 0 && (*((_QWORD *)&v1009 + 1) & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(*((_QWORD *)&v1009 + 1) & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                  if ((v1009 & 1) != 0 && (v1009 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v1009 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                  *(_QWORD *)&v1009 = v998;
                  *((_QWORD *)&v1009 + 1) = v151;
                  v152 = HIDWORD(v1006);
                  if (HIDWORD(v1006) && *((_QWORD *)v1005 + 2 * HIDWORD(v1006) - 2) > (unint64_t)v998)
                  {
                    JSC::DFG::InsertionSet::insertSlow((uint64_t)&v1004, (unint64_t *)&v1009, v16, v17, v18, v19, v20, v21);
                  }
                  else
                  {
                    if (HIDWORD(v1006) == (_DWORD)v1006)
                    {
                      v167 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1005, (void *)(HIDWORD(v1006) + 1), (unint64_t)&v1009, v17, v18, v19, v20, v21);
                      v152 = HIDWORD(v1006);
                      v153 = v1005;
                      v154 = *v167;
                    }
                    else
                    {
                      v153 = v1005;
                      v154 = v1009;
                    }
                    *((_OWORD *)v153 + v152) = v154;
                    ++HIDWORD(v1006);
                  }
                  if ((v148 & 1) != 0 && (v148 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v148 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                  if ((v147 & 1) != 0 && (v147 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v147 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                  v54 = v997;
                  if ((v145 & 1) != 0 && (v145 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v145 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                  if ((v144 & 1) != 0 && (v144 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v144 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                  if (!(_DWORD)--v109)
                    goto LABEL_398;
                  continue;
                }
                break;
              }
              v123 = *((_QWORD *)this + 3);
              v124 = *(_QWORD *)(v123 + 464);
              *(_QWORD *)(v123 + 464) = v124 + 1;
              v125 = v124 >> 4;
              v126 = *(unsigned int *)(v123 + 484);
              if (v124 >> 4 < v126)
              {
LABEL_172:
                if (v125 >= v126)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19833251CLL);
                }
                v127 = *(_QWORD *)(*(_QWORD *)(v123 + 472) + 8 * v125) + ((v124 & 0xF) << 6);
                *(_QWORD *)v127 = 0;
                *(_QWORD *)(v127 + 8) = 0;
                *(_QWORD *)(v127 + 16) = 0;
                *(_QWORD *)(v127 + 24) = v110 | ((unint64_t)(v110 >> 31) << 32);
                *(_DWORD *)(v127 + 32) = 0x3FFFFFFF;
                *(_DWORD *)(v127 + 56) = 0;
                *(_QWORD *)(v127 + 48) = 0;
                *(_QWORD *)(v127 + 36) = 0;
                *(_BYTE *)(v127 + 44) = 0;
                v128 = *(_QWORD *)(v123 + 464) - 1;
                if (v128 >> 4 >= *(unsigned int *)(v123 + 484))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198332524);
                }
                if ((v110 & 0x80000000) != 0)
                  v129 = (v110 ^ 0xFFFFFFFFLL) + v1000;
                else
                  v129 = ((v110 << 32) - 0x500000000) >> 32;
                v112 = *(_QWORD *)(*(_QWORD *)(v123 + 472) + 8 * (v128 >> 4)) + ((v128 & 0xF) << 6);
                *((_QWORD *)v54 + v129) = v112;
                if ((int)v110 < 5)
                  goto LABEL_192;
LABEL_162:
                v113 = *((_QWORD *)this + 31);
                if (!v113)
                  goto LABEL_1646;
                v114 = *(_DWORD *)(v113 - 8);
                v115 = v114 & 0x9C352659;
                v116 = *(_QWORD *)(v113 + 24 * (v114 & 0x9C352659));
                if (v116)
                {
                  v166 = 1;
                  while (v116 != 1)
                  {
                    v115 = (v115 + v166) & v114;
                    v116 = *(_QWORD *)(v113 + 24 * v115);
                    ++v166;
                    if (!v116)
                      goto LABEL_164;
                  }
LABEL_1646:
                  __break(0xC471u);
                  JUMPOUT(0x198332358);
                }
LABEL_164:
                v117 = v113 + 24 * v115;
                v118 = *(unsigned int *)(v117 + 20);
                if (!(_DWORD)v118)
                  goto LABEL_1646;
                if (v118 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19833250CLL);
                }
                v119 = 8 * v118;
                v120 = *(_QWORD *)(StatusReg + 752);
                if (v120)
                {
                  v121 = (unint64_t)(v119 + 15) >> 4;
                  if (v118 <= 0x34)
                  {
                    v122 = 23 * v121 + 7;
                  }
                  else
                  {
                    if (v118 > 0x4E2)
                      goto LABEL_1022;
                    v122 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v121 + 626);
                    if (*(_DWORD *)(v120 + 8052) <= v122)
                      goto LABEL_1022;
                  }
                  v130 = v120 + 8 * v122;
                  v131 = v130 + 8064;
                  *(_BYTE *)(v130 + 8064) = 1;
                  v132 = *(unsigned int *)(v130 + 8080);
                  if ((_DWORD)v132)
                  {
                    *(_DWORD *)(v131 + 16) = v132 - *(_DWORD *)(v131 + 20);
                    casual = *(_QWORD *)(v131 + 8) - v132;
                    goto LABEL_181;
                  }
                  v155 = *(_QWORD *)(v131 + 40);
                  v156 = *(_QWORD *)(v131 + 24);
                  if (v155)
                  {
LABEL_212:
                    v157 = __clz(v155);
                    *(_QWORD *)(v131 + 40) = v155 & ~(0x8000000000000000 >> v157);
                    casual = v156 + 16 * v157;
LABEL_181:
                    *(_BYTE *)v131 = 0;
LABEL_182:
                    memcpy((void *)casual, *(const void **)(v117 + 8), 8 * *(unsigned int *)(v117 + 20));
                    v135 = (int)v109 - 1;
                    if (v135 >= v118)
                      goto LABEL_1646;
                    v136 = *(_QWORD *)(casual + 8 * v135);
                    *(_QWORD *)&v1009 = v112;
                    v137 = (_QWORD *)(v136 + 16);
                    v138 = *(unsigned int *)(v136 + 28);
                    if ((_DWORD)v138 == *(_DWORD *)(v136 + 24))
                    {
                      v158 = (_QWORD *)WTF::Vector<JSC::DFG::VariableAccessData *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v137, v138 + 1, (unint64_t)&v1009);
                      v138 = *(unsigned int *)(v136 + 28);
                      *(_QWORD *)(*(_QWORD *)(v136 + 16) + 8 * v138) = *v158;
                      v139 = v1009;
                    }
                    else
                    {
                      *(_QWORD *)(*v137 + 8 * v138) = v112;
                      v139 = v112;
                    }
                    *(_DWORD *)(v136 + 28) = v138 + 1;
                    v140 = *(unsigned __int8 *)(v139 + 40);
                    v141 = (v140 | *(_BYTE *)(v136 + 13));
                    if (v141 != v140)
                      *(_BYTE *)(v139 + 40) = v141;
                    v142 = *(_QWORD *)(StatusReg + 752);
                    if (!v142)
                    {
                      pas_try_deallocate_slow_no_cache(casual, (uint64_t)&bmalloc_heap_config, 1);
                      goto LABEL_192;
                    }
                    if (!(casual >> 43)
                      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((casual >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(casual)) & 1) != 0)
                    {
LABEL_190:
                      v143 = *(unsigned int *)(v142 + 8000);
                      if (v143 >= 0x3E7)
                      {
                        pas_thread_local_cache_append_deallocation_slow(v142, casual, (os_unfair_lock_s *)5, v134, v18, v19, v20, v21);
                      }
                      else
                      {
                        *(_QWORD *)(v142 + 8 * v143) = casual | 0x5000000000000;
                        *(_DWORD *)(v142 + 8000) = v143 + 1;
                      }
                      goto LABEL_192;
                    }
                    if (casual >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= casual >> 24)
                    {
                      v134 = 0;
                    }
                    else
                    {
                      v134 = (*(_DWORD *)((char *)off_1ECF425F8
                                        + ((((casual >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                        + 24) >> (2 * ((BYTE3(casual) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                      if ((_DWORD)v134 == 1)
                        goto LABEL_190;
                    }
                    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v142, casual, 1, v134, v18, v19, v20, v21);
                    goto LABEL_192;
                  }
                  if (*(_BYTE *)(v131 + 5) == 6)
                  {
                    v673 = *(unsigned int *)(v131 + 32);
                    v718 = *(_DWORD *)(v131 + 36);
                    if (v673 < v718)
                    {
                      *(_QWORD *)(v131 + 8 * v673 + 56) = 0;
                      v670 = (unint64_t *)(v120 + 8128 + 8 * v122 + 8 * v673);
                      v674 = v718 - 1 - v673;
                      while (v674)
                      {
                        v156 += 1024;
                        v672 = *v670++;
                        v671 = v672;
                        LODWORD(v673) = v673 + 1;
                        --v674;
                        if (v672)
                        {
                          v155 = __rbit64(v671);
                          *(_DWORD *)(v131 + 32) = v673;
                          *(_QWORD *)(v131 + 24) = v156;
                          goto LABEL_212;
                        }
                      }
                      *(_DWORD *)(v131 + 32) = v718;
                    }
                  }
                  *(_BYTE *)v131 = 0;
                }
LABEL_1022:
                casual = bmalloc_allocate_casual(v119, 1);
                goto LABEL_182;
              }
              v159 = *(_QWORD *)(StatusReg + 752);
              if (v159)
              {
                v160 = dword_1ECF548A0;
                if (*(_DWORD *)(v159 + 8052) > dword_1ECF548A0)
                {
                  v161 = v159 + 8 * dword_1ECF548A0;
                  v162 = v161 + 8064;
                  *(_BYTE *)(v161 + 8064) = 1;
                  v163 = *(unsigned int *)(v161 + 8080);
                  if ((_DWORD)v163)
                  {
                    *(_DWORD *)(v162 + 16) = v163 - *(_DWORD *)(v162 + 20);
                    v164 = *(_QWORD *)(v162 + 8) - v163;
                    goto LABEL_219;
                  }
                  v168 = *(_QWORD *)(v162 + 40);
                  v169 = *(_QWORD *)(v162 + 24);
                  if (v168)
                  {
LABEL_229:
                    v170 = __clz(v168);
                    *(_QWORD *)(v162 + 40) = v168 & ~(0x8000000000000000 >> v170);
                    v164 = v169 + 16 * v170;
LABEL_219:
                    *(_BYTE *)v162 = 0;
LABEL_220:
                    *(_QWORD *)&v1009 = v164;
                    v165 = *(unsigned int *)(v123 + 484);
                    if ((_DWORD)v165 == *(_DWORD *)(v123 + 480))
                    {
                      v171 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v123 + 472, v165 + 1, (unint64_t)&v1009);
                      v165 = *(unsigned int *)(v123 + 484);
                      *(_QWORD *)(*(_QWORD *)(v123 + 472) + 8 * v165) = *v171;
                    }
                    else
                    {
                      *(_QWORD *)(*(_QWORD *)(v123 + 472) + 8 * v165) = v164;
                    }
                    v126 = (v165 + 1);
                    *(_DWORD *)(v123 + 484) = v126;
                    v124 = *(_QWORD *)(v123 + 464) - 1;
                    v125 = v124 >> 4;
                    goto LABEL_172;
                  }
                  if (*(_BYTE *)(v162 + 5) == 6)
                  {
                    v815 = *(unsigned int *)(v162 + 32);
                    v816 = *(_DWORD *)(v162 + 36);
                    if (v815 < v816)
                    {
                      *(_QWORD *)(v162 + 8 * v815 + 56) = 0;
                      v817 = (unint64_t *)(v159 + 8128 + 8 * v160 + 8 * v815);
                      v818 = v816 - 1 - v815;
                      while (v818)
                      {
                        v169 += 1024;
                        v820 = *v817++;
                        v819 = v820;
                        LODWORD(v815) = v815 + 1;
                        --v818;
                        if (v820)
                        {
                          v168 = __rbit64(v819);
                          *(_DWORD *)(v162 + 32) = v815;
                          *(_QWORD *)(v162 + 24) = v169;
                          goto LABEL_229;
                        }
                      }
                      *(_DWORD *)(v162 + 32) = v816;
                    }
                  }
                  *(_BYTE *)v162 = 0;
                }
              }
              v164 = bmalloc_allocate_casual(1024, 1);
              goto LABEL_220;
            }
            if (*(_QWORD *)v89)
              v90 = **(_DWORD **)v89;
            else
              v90 = 0;
            v91 = *(_QWORD *)(v89 + 24);
            if ((*(_BYTE *)(v89 + 32) & 1) == 0)
              goto LABEL_272;
            v92 = HIDWORD(v91) & 0xFFFFF | ((int)(v91 >> 28) >> 24 << 20);
            v93 = (v92 + 3);
            v94 = (v93 ^ 0xFFFFFFFFLL) + v1000;
            if (v92 >= -3)
              v94 = ((v93 << 32) - 0x500000000) >> 32;
            v95 = *((_QWORD *)v54 + v94);
            if (!v95)
            {
              v172 = *((_QWORD *)this + 3);
              v173 = *(_QWORD *)(v172 + 464);
              *(_QWORD *)(v172 + 464) = v173 + 1;
              v174 = v173 >> 4;
              v175 = *(unsigned int *)(v172 + 484);
              if (v173 >> 4 >= v175)
              {
                v416 = WTF::fastMalloc((WTF *)0x400);
                *(_QWORD *)&v1009 = v416;
                v417 = *(unsigned int *)(v172 + 484);
                if ((_DWORD)v417 == *(_DWORD *)(v172 + 480))
                {
                  v678 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v172 + 472, v417 + 1, (unint64_t)&v1009);
                  v417 = *(unsigned int *)(v172 + 484);
                  *(_QWORD *)(*(_QWORD *)(v172 + 472) + 8 * v417) = *v678;
                }
                else
                {
                  *(_QWORD *)(*(_QWORD *)(v172 + 472) + 8 * v417) = v416;
                }
                v175 = (v417 + 1);
                *(_DWORD *)(v172 + 484) = v175;
                v173 = *(_QWORD *)(v172 + 464) - 1;
                v174 = v173 >> 4;
              }
              if (v174 >= v175)
              {
                __break(0xC471u);
                JUMPOUT(0x1983325B4);
              }
              v176 = *(_QWORD *)(*(_QWORD *)(v172 + 472) + 8 * v174) + ((v173 & 0xF) << 6);
              *(_QWORD *)v176 = 0;
              *(_QWORD *)(v176 + 8) = 0;
              *(_QWORD *)(v176 + 16) = 0;
              *(_QWORD *)(v176 + 24) = v93 | ((unint64_t)(v93 >> 31) << 32);
              *(_DWORD *)(v176 + 32) = 0x3FFFFFFF;
              *(_DWORD *)(v176 + 56) = 0;
              *(_QWORD *)(v176 + 48) = 0;
              *(_QWORD *)(v176 + 36) = 0;
              *(_BYTE *)(v176 + 44) = 0;
              v177 = *(_QWORD *)(v172 + 464) - 1;
              if (v177 >> 4 >= *(unsigned int *)(v172 + 484))
              {
                __break(0xC471u);
                JUMPOUT(0x1983325BCLL);
              }
              v178 = v92 >= -3 ? ((v93 << 32) - 0x500000000) >> 32 : (v93 ^ 0xFFFFFFFFLL) + v1000;
              v95 = *(_QWORD *)(*(_QWORD *)(v172 + 472) + 8 * (v177 >> 4)) + ((v177 & 0xF) << 6);
              *((_QWORD *)v54 + v178) = v95;
              v179 = v93 - (HIDWORD(*(_QWORD *)(v89 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v89 + 24) >> 28) >> 24 << 20));
              v180 = v179 - 5;
              if (v179 >= 5)
              {
                v96 = *((_QWORD *)this + 31);
                if (!v96)
                  goto LABEL_1676;
                v97 = *(_DWORD *)(v96 - 8);
                v98 = (~(v89 << 32) + v89) ^ ((unint64_t)(~(v89 << 32) + v89) >> 22);
                v99 = 9 * ((v98 + ~(v98 << 13)) ^ ((v98 + ~(v98 << 13)) >> 8));
                v100 = (v99 ^ (v99 >> 15)) + ~((v99 ^ (v99 >> 15)) << 27);
                v101 = v97 & ((v100 >> 31) ^ v100);
                v102 = *(_QWORD *)(v96 + 24 * v101);
                if (v102 == v89)
                {
LABEL_150:
                  v103 = v96 + 24 * v101;
                  v104 = *(unsigned int *)(v103 + 20);
                  if (!(_DWORD)v104)
                    goto LABEL_1676;
                  if (v104 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983325ACLL);
                  }
                  v105 = 8 * v104;
                  v106 = *(_QWORD *)(StatusReg + 752);
                  if (v106)
                  {
                    v107 = (unint64_t)(v105 + 15) >> 4;
                    if (v104 <= 0x34)
                    {
                      v108 = 23 * v107 + 7;
                    }
                    else
                    {
                      if (v104 > 0x4E2)
                        goto LABEL_1533;
                      v108 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v107 + 626);
                      if (*(_DWORD *)(v106 + 8052) <= v108)
                        goto LABEL_1533;
                    }
                    v181 = v106 + 8 * v108;
                    v182 = v181 + 8064;
                    *(_BYTE *)(v181 + 8064) = 1;
                    v183 = *(unsigned int *)(v181 + 8080);
                    if ((_DWORD)v183)
                    {
                      *(_DWORD *)(v182 + 16) = v183 - *(_DWORD *)(v182 + 20);
                      v184 = *(_QWORD *)(v182 + 8) - v183;
                      goto LABEL_243;
                    }
                    v397 = *(_QWORD *)(v182 + 40);
                    v398 = *(_QWORD *)(v182 + 24);
                    if (v397)
                    {
LABEL_485:
                      v399 = __clz(v397);
                      *(_QWORD *)(v182 + 40) = v397 & ~(0x8000000000000000 >> v399);
                      v184 = v398 + 16 * v399;
LABEL_243:
                      *(_BYTE *)v182 = 0;
LABEL_244:
                      memcpy((void *)v184, *(const void **)(v103 + 8), 8 * *(unsigned int *)(v103 + 20));
                      if (v104 > v180)
                      {
                        v186 = *(_QWORD *)(v184 + 8 * v180);
                        *(_QWORD *)&v1009 = v95;
                        v187 = (_QWORD *)(v186 + 16);
                        v188 = *(unsigned int *)(v186 + 28);
                        if ((_DWORD)v188 == *(_DWORD *)(v186 + 24))
                        {
                          v404 = (_QWORD *)WTF::Vector<JSC::DFG::VariableAccessData *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v187, v188 + 1, (unint64_t)&v1009);
                          v188 = *(unsigned int *)(v186 + 28);
                          *(_QWORD *)(*(_QWORD *)(v186 + 16) + 8 * v188) = *v404;
                          v189 = v1009;
                        }
                        else
                        {
                          *(_QWORD *)(*v187 + 8 * v188) = v95;
                          v189 = v95;
                        }
                        *(_DWORD *)(v186 + 28) = v188 + 1;
                        v190 = *(unsigned __int8 *)(v189 + 40);
                        v191 = (v190 | *(_BYTE *)(v186 + 13));
                        if (v191 != v190)
                          *(_BYTE *)(v189 + 40) = v191;
                        v192 = *(_QWORD *)(StatusReg + 752);
                        if (!v192)
                        {
                          pas_try_deallocate_slow_no_cache(v184, (uint64_t)&bmalloc_heap_config, 1);
                          goto LABEL_254;
                        }
                        if (!(v184 >> 43)
                          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v184 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v184)) & 1) != 0)
                        {
                          goto LABEL_252;
                        }
                        if (v184 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v184 >> 24)
                        {
                          v185 = 0;
                        }
                        else
                        {
                          v185 = (*(_DWORD *)((char *)off_1ECF425F8
                                            + ((((v184 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                            + 24) >> (2 * ((BYTE3(v184) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                          if ((_DWORD)v185 == 1)
                          {
LABEL_252:
                            v193 = *(unsigned int *)(v192 + 8000);
                            if (v193 >= 0x3E7)
                            {
                              pas_thread_local_cache_append_deallocation_slow(v192, v184, (os_unfair_lock_s *)5, v185, v18, v19, v20, v21);
                            }
                            else
                            {
                              *(_QWORD *)(v192 + 8 * v193) = v184 | 0x5000000000000;
                              *(_DWORD *)(v192 + 8000) = v193 + 1;
                            }
                            goto LABEL_254;
                          }
                        }
                        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v192, v184, 1, v185, v18, v19, v20, v21);
                        goto LABEL_254;
                      }
LABEL_1676:
                      __break(0xC471u);
                      JUMPOUT(0x198332570);
                    }
                    if (*(_BYTE *)(v182 + 5) == 6)
                    {
                      v821 = *(unsigned int *)(v182 + 32);
                      v822 = *(_DWORD *)(v182 + 36);
                      if (v821 < v822)
                      {
                        *(_QWORD *)(v182 + 8 * v821 + 56) = 0;
                        v823 = (unint64_t *)(v106 + 8128 + 8 * v108 + 8 * v821);
                        v824 = v822 - 1 - v821;
                        while (v824)
                        {
                          v398 += 1024;
                          v826 = *v823++;
                          v825 = v826;
                          LODWORD(v821) = v821 + 1;
                          --v824;
                          if (v826)
                          {
                            v397 = __rbit64(v825);
                            *(_DWORD *)(v182 + 32) = v821;
                            *(_QWORD *)(v182 + 24) = v398;
                            goto LABEL_485;
                          }
                        }
                        *(_DWORD *)(v182 + 32) = v822;
                      }
                    }
                    *(_BYTE *)v182 = 0;
                  }
LABEL_1533:
                  v184 = bmalloc_allocate_casual(v105, 1);
                  goto LABEL_244;
                }
                v420 = 1;
                while (v102 != 1)
                {
                  v101 = (v101 + v420) & v97;
                  v102 = *(_QWORD *)(v96 + 24 * v101);
                  ++v420;
                  if (v102 == v89)
                    goto LABEL_150;
                }
                goto LABEL_1676;
              }
            }
LABEL_254:
            v194 = v999;
            if ((v999 & 1) != 0)
            {
              v742 = *(_QWORD *)v979;
              if (v975
                || (v743 = *(unsigned int *)((v999 & 0xFFFFFFFF8) + 8), (_DWORD)v743 == 0x3FFFFFFF)
                || (_DWORD)v743 == -1)
              {
                v744 = 2;
              }
              else if (v743 >> 28)
              {
                v936 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v936 = v742;
                *(_DWORD *)(v936 + 8) = v743;
                v744 = 1;
                v742 = v936;
              }
              else
              {
                v744 = *(_QWORD *)v979;
                v742 = v743 << 36;
              }
              v194 = v742 | v744;
            }
            v195 = v81;
            if ((v81 & 1) != 0)
            {
              v745 = *(_QWORD *)v978;
              if ((v81 & 2) != 0
                || (v746 = *(unsigned int *)((v81 & 0xFFFFFFFF8) + 8), (_DWORD)v746 == 0x3FFFFFFF)
                || (_DWORD)v746 == -1)
              {
                v747 = 2;
              }
              else if (v746 >> 28)
              {
                v937 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v937 = v745;
                *(_DWORD *)(v937 + 8) = v746;
                v747 = 1;
                v745 = v937;
              }
              else
              {
                v747 = *(_QWORD *)v978;
                v745 = v746 << 36;
              }
              v195 = v745 | v747;
            }
            v196 = v1004;
            v197 = v194;
            if ((v194 & 1) != 0)
            {
              v748 = *(_QWORD *)(v194 & 0xFFFFFFFF8);
              if ((v194 & 2) != 0
                || (v749 = *(unsigned int *)((v194 & 0xFFFFFFFF8) + 8), (_DWORD)v749 == 0x3FFFFFFF)
                || (_DWORD)v749 == -1)
              {
                v750 = 2;
              }
              else if (v749 >> 28)
              {
                v938 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v938 = v748;
                *(_DWORD *)(v938 + 8) = v749;
                v750 = 1;
                v748 = v938;
              }
              else
              {
                v750 = *(_QWORD *)(v194 & 0xFFFFFFFF8);
                v748 = v749 << 36;
              }
              v197 = v748 | v750;
            }
            v198 = v195;
            if ((v195 & 1) != 0)
            {
              v751 = *(_QWORD *)(v195 & 0xFFFFFFFF8);
              if ((v195 & 2) != 0
                || (v752 = *(unsigned int *)((v195 & 0xFFFFFFFF8) + 8), (_DWORD)v752 == 0x3FFFFFFF)
                || (_DWORD)v752 == -1)
              {
                v753 = 2;
              }
              else if (v752 >> 28)
              {
                v939 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v939 = v751;
                *(_DWORD *)(v939 + 8) = v752;
                v753 = 1;
                v751 = v939;
              }
              else
              {
                v753 = *(_QWORD *)(v195 & 0xFFFFFFFF8);
                v751 = v752 << 36;
              }
              v198 = v751 | v753;
            }
            v199 = v197;
            if ((v197 & 1) != 0)
            {
              v754 = *(_QWORD *)(v197 & 0xFFFFFFFF8);
              if ((v197 & 2) != 0
                || (v755 = *(unsigned int *)((v197 & 0xFFFFFFFF8) + 8), (_DWORD)v755 == 0x3FFFFFFF)
                || (_DWORD)v755 == -1)
              {
                v756 = 2;
              }
              else if (v755 >> 28)
              {
                v940 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v940 = v754;
                *(_DWORD *)(v940 + 8) = v755;
                v756 = 1;
                v754 = v940;
              }
              else
              {
                v756 = *(_QWORD *)(v197 & 0xFFFFFFFF8);
                v754 = v755 << 36;
              }
              v199 = v754 | v756;
            }
            *(_QWORD *)&v1009 = v199;
            v200 = v198;
            if ((v198 & 1) != 0)
            {
              v757 = *(_QWORD *)(v198 & 0xFFFFFFFF8);
              if ((v198 & 2) != 0
                || (v758 = *(unsigned int *)((v198 & 0xFFFFFFFF8) + 8), (_DWORD)v758 == 0x3FFFFFFF)
                || (_DWORD)v758 == -1)
              {
                v759 = 2;
              }
              else if (v758 >> 28)
              {
                v941 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v941 = v757;
                *(_DWORD *)(v941 + 8) = v758;
                v759 = 1;
                v757 = v941;
              }
              else
              {
                v759 = *(_QWORD *)(v198 & 0xFFFFFFFF8);
                v757 = v758 << 36;
              }
              v200 = v757 | v759;
            }
            *((_QWORD *)&v1009 + 1) = v200;
            v1010 = v995;
            v1012[0] = v95;
            LOWORD(v1011) = 28;
            v201 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>((uint64_t)v196 + 1032, (__int16 *)&v1011, (uint64_t)&v1009, v1012, v18, v19, v20, v21);
            if ((BYTE8(v1009) & 1) != 0 && (*((_QWORD *)&v1009 + 1) & 0xFFFFFFFF8) != 0)
              WTF::fastFree(*((_QWORD *)&v1009 + 1) & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
            if ((v1009 & 1) != 0 && (v1009 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v1009 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
            *(_QWORD *)&v1009 = v998;
            *((_QWORD *)&v1009 + 1) = v201;
            v202 = HIDWORD(v1006);
            if (HIDWORD(v1006) && *((_QWORD *)v1005 + 2 * HIDWORD(v1006) - 2) > (unint64_t)v998)
            {
              JSC::DFG::InsertionSet::insertSlow((uint64_t)&v1004, (unint64_t *)&v1009, v16, v17, v18, v19, v20, v21);
            }
            else
            {
              if (HIDWORD(v1006) == (_DWORD)v1006)
              {
                v637 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1005, (void *)(HIDWORD(v1006) + 1), (unint64_t)&v1009, v17, v18, v19, v20, v21);
                v202 = HIDWORD(v1006);
                v203 = v1005;
                v204 = *v637;
              }
              else
              {
                v203 = v1005;
                v204 = v1009;
              }
              *((_OWORD *)v203 + v202) = v204;
              ++HIDWORD(v1006);
            }
            if ((v198 & 1) != 0 && (v198 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v198 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
            if ((v197 & 1) != 0 && (v197 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v197 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
            v54 = v997;
            if ((v195 & 1) != 0 && (v195 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v195 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
            if ((v194 & 1) != 0 && (v194 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v194 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
            v91 = *(_QWORD *)(v994 + 24);
LABEL_272:
            if ((v91 >> 60) - 3 <= 2)
            {
              v205 = HIDWORD(v91) & 0xFFFFF | ((int)(v91 >> 28) >> 24 << 20);
              v206 = (v205 + 4);
              v207 = (v206 ^ 0xFFFFFFFFLL) + v1000;
              if (v205 >= -4)
                v207 = ((v206 << 32) - 0x500000000) >> 32;
              v208 = *((_QWORD *)v54 + v207);
              if (v208)
                goto LABEL_307;
              v222 = *((_QWORD *)this + 3);
              v223 = *(_QWORD *)(v222 + 464);
              *(_QWORD *)(v222 + 464) = v223 + 1;
              v224 = v223 >> 4;
              v225 = *(unsigned int *)(v222 + 484);
              if (v223 >> 4 >= v225)
              {
                v418 = WTF::fastMalloc((WTF *)0x400);
                *(_QWORD *)&v1009 = v418;
                v419 = *(unsigned int *)(v222 + 484);
                if ((_DWORD)v419 == *(_DWORD *)(v222 + 480))
                {
                  v679 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v222 + 472, v419 + 1, (unint64_t)&v1009);
                  v419 = *(unsigned int *)(v222 + 484);
                  *(_QWORD *)(*(_QWORD *)(v222 + 472) + 8 * v419) = *v679;
                }
                else
                {
                  *(_QWORD *)(*(_QWORD *)(v222 + 472) + 8 * v419) = v418;
                }
                v225 = (v419 + 1);
                *(_DWORD *)(v222 + 484) = v225;
                v223 = *(_QWORD *)(v222 + 464) - 1;
                v224 = v223 >> 4;
              }
              if (v224 >= v225)
              {
                __break(0xC471u);
                JUMPOUT(0x1983325CCLL);
              }
              v226 = *(_QWORD *)(*(_QWORD *)(v222 + 472) + 8 * v224) + ((v223 & 0xF) << 6);
              *(_QWORD *)v226 = 0;
              *(_QWORD *)(v226 + 8) = 0;
              *(_QWORD *)(v226 + 16) = 0;
              *(_QWORD *)(v226 + 24) = v206 | ((unint64_t)(v206 >> 31) << 32);
              *(_DWORD *)(v226 + 32) = 0x3FFFFFFF;
              *(_DWORD *)(v226 + 56) = 0;
              *(_QWORD *)(v226 + 48) = 0;
              *(_QWORD *)(v226 + 36) = 0;
              *(_BYTE *)(v226 + 44) = 0;
              v227 = *(_QWORD *)(v222 + 464) - 1;
              if (v227 >> 4 >= *(unsigned int *)(v222 + 484))
              {
                __break(0xC471u);
                JUMPOUT(0x1983325D4);
              }
              v228 = v205 >= -4 ? ((v206 << 32) - 0x500000000) >> 32 : (v206 ^ 0xFFFFFFFFLL) + v1000;
              v208 = *(_QWORD *)(*(_QWORD *)(v222 + 472) + 8 * (v227 >> 4)) + ((v227 & 0xF) << 6);
              *((_QWORD *)v54 + v228) = v208;
              v229 = v206
                   - (HIDWORD(*(_QWORD *)(v994 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v994 + 24) >> 28) >> 24 << 20));
              v230 = v229 - 5;
              if (v229 < 5)
              {
LABEL_307:
                v244 = v999;
                if ((v999 & 1) != 0)
                {
                  v760 = *(_QWORD *)v979;
                  if (v975
                    || (v761 = *(unsigned int *)((v999 & 0xFFFFFFFF8) + 8), (_DWORD)v761 == 0x3FFFFFFF)
                    || (_DWORD)v761 == -1)
                  {
                    v762 = 2;
                  }
                  else if (v761 >> 28)
                  {
                    v942 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v942 = v760;
                    *(_DWORD *)(v942 + 8) = v761;
                    v762 = 1;
                    v760 = v942;
                  }
                  else
                  {
                    v762 = *(_QWORD *)v979;
                    v760 = v761 << 36;
                  }
                  v244 = v760 | v762;
                }
                v245 = v81;
                if ((v81 & 1) != 0)
                {
                  v763 = *(_QWORD *)v978;
                  if ((v81 & 2) != 0
                    || (v764 = *(unsigned int *)((v81 & 0xFFFFFFFF8) + 8), (_DWORD)v764 == 0x3FFFFFFF)
                    || (_DWORD)v764 == -1)
                  {
                    v765 = 2;
                  }
                  else if (v764 >> 28)
                  {
                    v943 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v943 = v763;
                    *(_DWORD *)(v943 + 8) = v764;
                    v765 = 1;
                    v763 = v943;
                  }
                  else
                  {
                    v765 = *(_QWORD *)v978;
                    v763 = v764 << 36;
                  }
                  v245 = v763 | v765;
                }
                v246 = v1004;
                v247 = v244;
                if ((v244 & 1) != 0)
                {
                  v766 = *(_QWORD *)(v244 & 0xFFFFFFFF8);
                  if ((v244 & 2) != 0
                    || (v767 = *(unsigned int *)((v244 & 0xFFFFFFFF8) + 8), (_DWORD)v767 == 0x3FFFFFFF)
                    || (_DWORD)v767 == -1)
                  {
                    v768 = 2;
                  }
                  else if (v767 >> 28)
                  {
                    v944 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v944 = v766;
                    *(_DWORD *)(v944 + 8) = v767;
                    v768 = 1;
                    v766 = v944;
                  }
                  else
                  {
                    v768 = *(_QWORD *)(v244 & 0xFFFFFFFF8);
                    v766 = v767 << 36;
                  }
                  v247 = v766 | v768;
                }
                v248 = v245;
                if ((v245 & 1) != 0)
                {
                  v769 = *(_QWORD *)(v245 & 0xFFFFFFFF8);
                  if ((v245 & 2) != 0
                    || (v770 = *(unsigned int *)((v245 & 0xFFFFFFFF8) + 8), (_DWORD)v770 == 0x3FFFFFFF)
                    || (_DWORD)v770 == -1)
                  {
                    v771 = 2;
                  }
                  else if (v770 >> 28)
                  {
                    v945 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v945 = v769;
                    *(_DWORD *)(v945 + 8) = v770;
                    v771 = 1;
                    v769 = v945;
                  }
                  else
                  {
                    v771 = *(_QWORD *)(v245 & 0xFFFFFFFF8);
                    v769 = v770 << 36;
                  }
                  v248 = v769 | v771;
                }
                v249 = v247;
                if ((v247 & 1) != 0)
                {
                  v772 = *(_QWORD *)(v247 & 0xFFFFFFFF8);
                  if ((v247 & 2) != 0
                    || (v773 = *(unsigned int *)((v247 & 0xFFFFFFFF8) + 8), (_DWORD)v773 == 0x3FFFFFFF)
                    || (_DWORD)v773 == -1)
                  {
                    v774 = 2;
                  }
                  else if (v773 >> 28)
                  {
                    v946 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v946 = v772;
                    *(_DWORD *)(v946 + 8) = v773;
                    v774 = 1;
                    v772 = v946;
                  }
                  else
                  {
                    v774 = *(_QWORD *)(v247 & 0xFFFFFFFF8);
                    v772 = v773 << 36;
                  }
                  v249 = v772 | v774;
                }
                *(_QWORD *)&v1009 = v249;
                v250 = v248;
                if ((v248 & 1) != 0)
                {
                  v775 = *(_QWORD *)(v248 & 0xFFFFFFFF8);
                  if ((v248 & 2) != 0
                    || (v776 = *(unsigned int *)((v248 & 0xFFFFFFFF8) + 8), (_DWORD)v776 == 0x3FFFFFFF)
                    || (_DWORD)v776 == -1)
                  {
                    v777 = 2;
                  }
                  else if (v776 >> 28)
                  {
                    v947 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v947 = v775;
                    *(_DWORD *)(v947 + 8) = v776;
                    v777 = 1;
                    v775 = v947;
                  }
                  else
                  {
                    v777 = *(_QWORD *)(v248 & 0xFFFFFFFF8);
                    v775 = v776 << 36;
                  }
                  v250 = v775 | v777;
                }
                *((_QWORD *)&v1009 + 1) = v250;
                v1010 = v995;
                v1012[0] = v208;
                LOWORD(v1011) = 28;
                v251 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>((uint64_t)v246 + 1032, (__int16 *)&v1011, (uint64_t)&v1009, v1012, v18, v19, v20, v21);
                if ((BYTE8(v1009) & 1) != 0 && (*((_QWORD *)&v1009 + 1) & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(*((_QWORD *)&v1009 + 1) & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                if ((v1009 & 1) != 0 && (v1009 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v1009 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                *(_QWORD *)&v1009 = v998;
                *((_QWORD *)&v1009 + 1) = v251;
                v252 = HIDWORD(v1006);
                if (HIDWORD(v1006) && *((_QWORD *)v1005 + 2 * HIDWORD(v1006) - 2) > (unint64_t)v998)
                {
                  JSC::DFG::InsertionSet::insertSlow((uint64_t)&v1004, (unint64_t *)&v1009, v16, v17, v18, v19, v20, v21);
                }
                else
                {
                  if (HIDWORD(v1006) == (_DWORD)v1006)
                  {
                    v638 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1005, (void *)(HIDWORD(v1006) + 1), (unint64_t)&v1009, v17, v18, v19, v20, v21);
                    v252 = HIDWORD(v1006);
                    v253 = v1005;
                    v254 = *v638;
                  }
                  else
                  {
                    v253 = v1005;
                    v254 = v1009;
                  }
                  *((_OWORD *)v253 + v252) = v254;
                  ++HIDWORD(v1006);
                }
                if ((v248 & 1) != 0 && (v248 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v248 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                if ((v247 & 1) != 0 && (v247 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v247 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                v54 = v997;
                if ((v245 & 1) != 0 && (v245 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v245 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                if ((v244 & 1) != 0 && (v244 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v244 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                goto LABEL_324;
              }
              v209 = *((_QWORD *)this + 31);
              if (!v209)
                goto LABEL_1677;
              v210 = *(_DWORD *)(v209 - 8);
              v211 = (~(v994 << 32) + v994) ^ ((unint64_t)(~(v994 << 32) + v994) >> 22);
              v212 = 9 * ((v211 + ~(v211 << 13)) ^ ((v211 + ~(v211 << 13)) >> 8));
              v213 = (v212 ^ (v212 >> 15)) + ~((v212 ^ (v212 >> 15)) << 27);
              v214 = v210 & ((v213 >> 31) ^ v213);
              v215 = *(_QWORD *)(v209 + 24 * v214);
              if (v215 != v994)
              {
                v421 = 1;
                while (v215 != 1)
                {
                  v214 = (v214 + v421) & v210;
                  v215 = *(_QWORD *)(v209 + 24 * v214);
                  ++v421;
                  if (v215 == v994)
                    goto LABEL_279;
                }
                goto LABEL_1677;
              }
LABEL_279:
              v216 = v209 + 24 * v214;
              v217 = *(unsigned int *)(v216 + 20);
              if (!(_DWORD)v217)
                goto LABEL_1677;
              if (v217 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x1983325C4);
              }
              v218 = 8 * v217;
              v219 = *(_QWORD *)(StatusReg + 752);
              if (v219)
              {
                v220 = (unint64_t)(v218 + 15) >> 4;
                if (v217 <= 0x34)
                {
                  v221 = 23 * v220 + 7;
                }
                else
                {
                  if (v217 > 0x4E2)
                    goto LABEL_1536;
                  v221 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v220 + 626);
                  if (*(_DWORD *)(v219 + 8052) <= v221)
                    goto LABEL_1536;
                }
                v231 = v219 + 8 * v221;
                v232 = v231 + 8064;
                *(_BYTE *)(v231 + 8064) = 1;
                v233 = *(unsigned int *)(v231 + 8080);
                if ((_DWORD)v233)
                {
                  *(_DWORD *)(v232 + 16) = v233 - *(_DWORD *)(v232 + 20);
                  v234 = *(_QWORD *)(v232 + 8) - v233;
                  goto LABEL_296;
                }
                v400 = *(_QWORD *)(v232 + 40);
                v401 = *(_QWORD *)(v232 + 24);
                if (v400)
                {
LABEL_487:
                  v402 = __clz(v400);
                  *(_QWORD *)(v232 + 40) = v400 & ~(0x8000000000000000 >> v402);
                  v234 = v401 + 16 * v402;
LABEL_296:
                  *(_BYTE *)v232 = 0;
LABEL_297:
                  memcpy((void *)v234, *(const void **)(v216 + 8), 8 * *(unsigned int *)(v216 + 20));
                  if (v217 > v230)
                  {
                    v236 = *(_QWORD *)(v234 + 8 * v230);
                    *(_QWORD *)&v1009 = v208;
                    v237 = (_QWORD *)(v236 + 16);
                    v238 = *(unsigned int *)(v236 + 28);
                    if ((_DWORD)v238 == *(_DWORD *)(v236 + 24))
                    {
                      v405 = (_QWORD *)WTF::Vector<JSC::DFG::VariableAccessData *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v237, v238 + 1, (unint64_t)&v1009);
                      v238 = *(unsigned int *)(v236 + 28);
                      *(_QWORD *)(*(_QWORD *)(v236 + 16) + 8 * v238) = *v405;
                      v239 = v1009;
                    }
                    else
                    {
                      *(_QWORD *)(*v237 + 8 * v238) = v208;
                      v239 = v208;
                    }
                    *(_DWORD *)(v236 + 28) = v238 + 1;
                    v240 = *(unsigned __int8 *)(v239 + 40);
                    v241 = (v240 | *(_BYTE *)(v236 + 13));
                    if (v241 != v240)
                      *(_BYTE *)(v239 + 40) = v241;
                    v242 = *(_QWORD *)(StatusReg + 752);
                    if (!v242)
                    {
                      pas_try_deallocate_slow_no_cache(v234, (uint64_t)&bmalloc_heap_config, 1);
                      goto LABEL_307;
                    }
                    if (!(v234 >> 43)
                      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v234 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v234)) & 1) != 0)
                    {
                      goto LABEL_305;
                    }
                    if (v234 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v234 >> 24)
                    {
                      v235 = 0;
                    }
                    else
                    {
                      v235 = (*(_DWORD *)((char *)off_1ECF425F8
                                        + ((((v234 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                        + 24) >> (2 * ((BYTE3(v234) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                      if ((_DWORD)v235 == 1)
                      {
LABEL_305:
                        v243 = *(unsigned int *)(v242 + 8000);
                        if (v243 >= 0x3E7)
                        {
                          pas_thread_local_cache_append_deallocation_slow(v242, v234, (os_unfair_lock_s *)5, v235, v18, v19, v20, v21);
                        }
                        else
                        {
                          *(_QWORD *)(v242 + 8 * v243) = v234 | 0x5000000000000;
                          *(_DWORD *)(v242 + 8000) = v243 + 1;
                        }
                        goto LABEL_307;
                      }
                    }
                    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v242, v234, 1, v235, v18, v19, v20, v21);
                    goto LABEL_307;
                  }
LABEL_1677:
                  __break(0xC471u);
                  JUMPOUT(0x198332578);
                }
                if (*(_BYTE *)(v232 + 5) == 6)
                {
                  v827 = *(unsigned int *)(v232 + 32);
                  v828 = *(_DWORD *)(v232 + 36);
                  if (v827 < v828)
                  {
                    *(_QWORD *)(v232 + 8 * v827 + 56) = 0;
                    v829 = (unint64_t *)(v219 + 8128 + 8 * v221 + 8 * v827);
                    v830 = v828 - 1 - v827;
                    while (v830)
                    {
                      v401 += 1024;
                      v832 = *v829++;
                      v831 = v832;
                      LODWORD(v827) = v827 + 1;
                      --v830;
                      if (v832)
                      {
                        v400 = __rbit64(v831);
                        *(_DWORD *)(v232 + 32) = v827;
                        *(_QWORD *)(v232 + 24) = v401;
                        goto LABEL_487;
                      }
                    }
                    *(_DWORD *)(v232 + 32) = v828;
                  }
                }
                *(_BYTE *)v232 = 0;
              }
LABEL_1536:
              v234 = bmalloc_allocate_casual(v218, 1);
              goto LABEL_297;
            }
LABEL_324:
            if (v90)
            {
              v255 = (~(v994 << 32) + v994) ^ ((unint64_t)(~(v994 << 32) + v994) >> 22);
              v256 = 9 * ((v255 + ~(v255 << 13)) ^ ((v255 + ~(v255 << 13)) >> 8));
              v257 = (v256 ^ (v256 >> 15)) + ~((v256 ^ (v256 >> 15)) << 27);
              v258 = (v257 >> 31) ^ v257;
              while (1)
              {
                v259 = HIDWORD(*(_QWORD *)(v994 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v994 + 24) >> 28) >> 24 << 20);
                v260 = (v90 + v259 + 4);
                v261 = (v260 ^ 0xFFFFFFFFLL) + v1000;
                if (v90 + v259 + 4 >= 0)
                  v261 = ((v260 << 32) - 0x500000000) >> 32;
                v262 = *((_QWORD *)v54 + v261);
                if (!v262)
                  break;
                v263 = v90 - 1;
                if (v90 + 4 < 5)
                  goto LABEL_360;
LABEL_330:
                v264 = *((_QWORD *)this + 31);
                if (!v264)
                  goto LABEL_1644;
                v265 = *(_DWORD *)(v264 - 8);
                v266 = v265 & v258;
                v267 = *(_QWORD *)(v264 + 24 * (v265 & v258));
                if (v267 != v994)
                {
                  v317 = 1;
                  while (v267 != 1)
                  {
                    v266 = (v266 + v317) & v265;
                    v267 = *(_QWORD *)(v264 + 24 * v266);
                    ++v317;
                    if (v267 == v994)
                      goto LABEL_332;
                  }
LABEL_1644:
                  __break(0xC471u);
                  JUMPOUT(0x198332348);
                }
LABEL_332:
                v268 = v264 + 24 * v266;
                v269 = *(unsigned int *)(v268 + 20);
                if (!(_DWORD)v269)
                  goto LABEL_1644;
                if (v269 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198332428);
                }
                v270 = 8 * v269;
                v271 = *(_QWORD *)(StatusReg + 752);
                if (!v271)
                  goto LABEL_515;
                v272 = (unint64_t)(v270 + 15) >> 4;
                if (v269 <= 0x34)
                {
                  v273 = 23 * v272 + 7;
                }
                else
                {
                  if (v269 > 0x4E2)
                    goto LABEL_515;
                  v273 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v272 + 626);
                  if (*(_DWORD *)(v271 + 8052) <= v273)
                    goto LABEL_515;
                }
                v282 = v271 + 8 * v273;
                v283 = v282 + 8064;
                *(_BYTE *)(v282 + 8064) = 1;
                v284 = *(unsigned int *)(v282 + 8080);
                if ((_DWORD)v284)
                {
                  *(_DWORD *)(v283 + 16) = v284 - *(_DWORD *)(v283 + 20);
                  v285 = *(_QWORD *)(v283 + 8) - v284;
LABEL_349:
                  *(_BYTE *)v283 = 0;
                  goto LABEL_350;
                }
                v306 = *(_QWORD *)(v283 + 40);
                v307 = *(_QWORD *)(v283 + 24);
                if (v306)
                {
LABEL_380:
                  v308 = __clz(v306);
                  *(_QWORD *)(v283 + 40) = v306 & ~(0x8000000000000000 >> v308);
                  v285 = v307 + 16 * v308;
                  goto LABEL_349;
                }
                if (*(_BYTE *)(v283 + 5) == 6)
                {
                  v635 = *(unsigned int *)(v283 + 32);
                  v683 = *(_DWORD *)(v283 + 36);
                  if (v635 < v683)
                  {
                    *(_QWORD *)(v283 + 8 * v635 + 56) = 0;
                    v632 = (unint64_t *)(v271 + 8128 + 8 * v273 + 8 * v635);
                    v636 = v683 - 1 - v635;
                    while (v636)
                    {
                      v307 += 1024;
                      v634 = *v632++;
                      v633 = v634;
                      LODWORD(v635) = v635 + 1;
                      --v636;
                      if (v634)
                      {
                        v306 = __rbit64(v633);
                        *(_DWORD *)(v283 + 32) = v635;
                        *(_QWORD *)(v283 + 24) = v307;
                        goto LABEL_380;
                      }
                    }
                    *(_DWORD *)(v283 + 32) = v683;
                  }
                }
                *(_BYTE *)v283 = 0;
LABEL_515:
                v285 = bmalloc_allocate_casual(v270, 1);
LABEL_350:
                memcpy((void *)v285, *(const void **)(v268 + 8), 8 * *(unsigned int *)(v268 + 20));
                if (v269 <= v263)
                  goto LABEL_1644;
                v287 = *(_QWORD *)(v285 + 8 * v263);
                *(_QWORD *)&v1009 = v262;
                v288 = (_QWORD *)(v287 + 16);
                v289 = *(unsigned int *)(v287 + 28);
                if ((_DWORD)v289 == *(_DWORD *)(v287 + 24))
                {
                  v309 = (_QWORD *)WTF::Vector<JSC::DFG::VariableAccessData *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v288, v289 + 1, (unint64_t)&v1009);
                  v289 = *(unsigned int *)(v287 + 28);
                  *(_QWORD *)(*(_QWORD *)(v287 + 16) + 8 * v289) = *v309;
                  v290 = v1009;
                }
                else
                {
                  *(_QWORD *)(*v288 + 8 * v289) = v262;
                  v290 = v262;
                }
                *(_DWORD *)(v287 + 28) = v289 + 1;
                v291 = *(unsigned __int8 *)(v290 + 40);
                v292 = (v291 | *(_BYTE *)(v287 + 13));
                if (v292 != v291)
                  *(_BYTE *)(v290 + 40) = v292;
                v293 = *(_QWORD *)(StatusReg + 752);
                if (v293)
                {
                  if (!(v285 >> 43)
                    && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v285 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v285)) & 1) != 0)
                  {
LABEL_358:
                    v294 = *(unsigned int *)(v293 + 8000);
                    if (v294 >= 0x3E7)
                    {
                      pas_thread_local_cache_append_deallocation_slow(v293, v285, (os_unfair_lock_s *)5, v286, v18, v19, v20, v21);
                    }
                    else
                    {
                      *(_QWORD *)(v293 + 8 * v294) = v285 | 0x5000000000000;
                      *(_DWORD *)(v293 + 8000) = v294 + 1;
                    }
                    goto LABEL_360;
                  }
                  if (v285 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v285 >> 24)
                  {
                    v286 = 0;
                  }
                  else
                  {
                    v286 = (*(_DWORD *)((char *)off_1ECF425F8
                                      + ((((v285 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                      + 24) >> (2 * ((BYTE3(v285) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                    if ((_DWORD)v286 == 1)
                      goto LABEL_358;
                  }
                  bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v293, v285, 1, v286, v18, v19, v20, v21);
                }
                else
                {
                  pas_try_deallocate_slow_no_cache(v285, (uint64_t)&bmalloc_heap_config, 1);
                }
LABEL_360:
                v295 = v999;
                if ((v999 & 1) != 0)
                {
                  v422 = *(_QWORD *)v979;
                  if (v975
                    || (v423 = *(unsigned int *)((v999 & 0xFFFFFFFF8) + 8), (_DWORD)v423 == 0x3FFFFFFF)
                    || (_DWORD)v423 == -1)
                  {
                    v644 = 2;
                  }
                  else if (v423 >> 28)
                  {
                    v895 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v895 = v422;
                    *(_DWORD *)(v895 + 8) = v423;
                    v644 = 1;
                    v422 = v895;
                  }
                  else
                  {
                    v644 = *(_QWORD *)v979;
                    v422 = v423 << 36;
                  }
                  v295 = v422 | v644;
                }
                v296 = v81;
                if ((v81 & 1) != 0)
                {
                  v424 = *(_QWORD *)v978;
                  if ((v81 & 2) != 0
                    || (v425 = *(unsigned int *)((v81 & 0xFFFFFFFF8) + 8), (_DWORD)v425 == 0x3FFFFFFF)
                    || (_DWORD)v425 == -1)
                  {
                    v645 = 2;
                  }
                  else if (v425 >> 28)
                  {
                    v896 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v896 = v424;
                    *(_DWORD *)(v896 + 8) = v425;
                    v645 = 1;
                    v424 = v896;
                  }
                  else
                  {
                    v645 = *(_QWORD *)v978;
                    v424 = v425 << 36;
                  }
                  v296 = v424 | v645;
                }
                v297 = v1004;
                v298 = v295;
                if ((v295 & 1) != 0)
                {
                  v426 = *(_QWORD *)(v295 & 0xFFFFFFFF8);
                  if ((v295 & 2) != 0
                    || (v427 = *(unsigned int *)((v295 & 0xFFFFFFFF8) + 8), (_DWORD)v427 == 0x3FFFFFFF)
                    || (_DWORD)v427 == -1)
                  {
                    v646 = 2;
                  }
                  else if (v427 >> 28)
                  {
                    v897 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v897 = v426;
                    *(_DWORD *)(v897 + 8) = v427;
                    v646 = 1;
                    v426 = v897;
                  }
                  else
                  {
                    v646 = *(_QWORD *)(v295 & 0xFFFFFFFF8);
                    v426 = v427 << 36;
                  }
                  v298 = v426 | v646;
                }
                v299 = v296;
                if ((v296 & 1) != 0)
                {
                  v428 = *(_QWORD *)(v296 & 0xFFFFFFFF8);
                  if ((v296 & 2) != 0
                    || (v429 = *(unsigned int *)((v296 & 0xFFFFFFFF8) + 8), (_DWORD)v429 == 0x3FFFFFFF)
                    || (_DWORD)v429 == -1)
                  {
                    v647 = 2;
                  }
                  else if (v429 >> 28)
                  {
                    v898 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v898 = v428;
                    *(_DWORD *)(v898 + 8) = v429;
                    v647 = 1;
                    v428 = v898;
                  }
                  else
                  {
                    v647 = *(_QWORD *)(v296 & 0xFFFFFFFF8);
                    v428 = v429 << 36;
                  }
                  v299 = v428 | v647;
                }
                v300 = v298;
                if ((v298 & 1) != 0)
                {
                  v430 = *(_QWORD *)(v298 & 0xFFFFFFFF8);
                  if ((v298 & 2) != 0
                    || (v431 = *(unsigned int *)((v298 & 0xFFFFFFFF8) + 8), (_DWORD)v431 == 0x3FFFFFFF)
                    || (_DWORD)v431 == -1)
                  {
                    v648 = 2;
                  }
                  else if (v431 >> 28)
                  {
                    v983 = *(_QWORD *)(v298 & 0xFFFFFFFF8);
                    v899 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v899 = v983;
                    *(_DWORD *)(v899 + 8) = v431;
                    v648 = 1;
                    v430 = v899;
                  }
                  else
                  {
                    v648 = *(_QWORD *)(v298 & 0xFFFFFFFF8);
                    v430 = v431 << 36;
                  }
                  v300 = v430 | v648;
                }
                *(_QWORD *)&v1009 = v300;
                v301 = v299;
                if ((v299 & 1) != 0)
                {
                  v432 = *(_QWORD *)(v299 & 0xFFFFFFFF8);
                  if ((v299 & 2) != 0
                    || (v433 = *(unsigned int *)((v299 & 0xFFFFFFFF8) + 8), (_DWORD)v433 == 0x3FFFFFFF)
                    || (_DWORD)v433 == -1)
                  {
                    v649 = 2;
                  }
                  else if (v433 >> 28)
                  {
                    v984 = *(_QWORD *)(v299 & 0xFFFFFFFF8);
                    v900 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v900 = v984;
                    *(_DWORD *)(v900 + 8) = v433;
                    v649 = 1;
                    v432 = v900;
                  }
                  else
                  {
                    v649 = *(_QWORD *)(v299 & 0xFFFFFFFF8);
                    v432 = v433 << 36;
                  }
                  v301 = v432 | v649;
                }
                *((_QWORD *)&v1009 + 1) = v301;
                v1010 = v995;
                v1012[0] = v262;
                LOWORD(v1011) = 28;
                v302 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>((uint64_t)v297 + 1032, (__int16 *)&v1011, (uint64_t)&v1009, v1012, v18, v19, v20, v21);
                if ((BYTE8(v1009) & 1) != 0 && (*((_QWORD *)&v1009 + 1) & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(*((_QWORD *)&v1009 + 1) & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                if ((v1009 & 1) != 0 && (v1009 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v1009 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                *(_QWORD *)&v1009 = v998;
                *((_QWORD *)&v1009 + 1) = v302;
                v303 = HIDWORD(v1006);
                if (HIDWORD(v1006) && *((_QWORD *)v1005 + 2 * HIDWORD(v1006) - 2) > (unint64_t)v998)
                {
                  JSC::DFG::InsertionSet::insertSlow((uint64_t)&v1004, (unint64_t *)&v1009, v16, v17, v18, v19, v20, v21);
                }
                else
                {
                  if (HIDWORD(v1006) == (_DWORD)v1006)
                  {
                    v318 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1005, (void *)(HIDWORD(v1006) + 1), (unint64_t)&v1009, v17, v18, v19, v20, v21);
                    v303 = HIDWORD(v1006);
                    v304 = v1005;
                    v305 = *v318;
                  }
                  else
                  {
                    v304 = v1005;
                    v305 = v1009;
                  }
                  *((_OWORD *)v304 + v303) = v305;
                  ++HIDWORD(v1006);
                }
                if ((v299 & 1) != 0 && (v299 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v299 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                if ((v298 & 1) != 0 && (v298 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v298 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                if ((v296 & 1) != 0 && (v296 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v296 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                if ((v295 & 1) != 0 && (v295 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v295 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                --v90;
                v54 = v997;
                if (!v90)
                  goto LABEL_398;
              }
              v274 = *((_QWORD *)this + 3);
              v275 = *(_QWORD *)(v274 + 464);
              *(_QWORD *)(v274 + 464) = v275 + 1;
              v276 = v275 >> 4;
              v277 = *(unsigned int *)(v274 + 484);
              if (v275 >> 4 < v277)
              {
LABEL_340:
                if (v276 >= v277)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983324ECLL);
                }
                v278 = *(_QWORD *)(*(_QWORD *)(v274 + 472) + 8 * v276) + ((v275 & 0xF) << 6);
                *(_QWORD *)v278 = 0;
                *(_QWORD *)(v278 + 8) = 0;
                *(_QWORD *)(v278 + 16) = 0;
                *(_QWORD *)(v278 + 24) = v260 | ((unint64_t)(v260 >> 31) << 32);
                *(_DWORD *)(v278 + 32) = 0x3FFFFFFF;
                *(_DWORD *)(v278 + 56) = 0;
                *(_QWORD *)(v278 + 48) = 0;
                *(_QWORD *)(v278 + 36) = 0;
                *(_BYTE *)(v278 + 44) = 0;
                v279 = *(_QWORD *)(v274 + 464) - 1;
                if (v279 >> 4 >= *(unsigned int *)(v274 + 484))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983324F4);
                }
                v262 = *(_QWORD *)(*(_QWORD *)(v274 + 472) + 8 * (v279 >> 4)) + ((v279 & 0xF) << 6);
                v280 = (v260 ^ 0xFFFFFFFFLL) + v1000;
                if ((int)v260 >= 0)
                  v280 = ((v260 << 32) - 0x500000000) >> 32;
                *((_QWORD *)v54 + v280) = v262;
                v281 = v260
                     - (HIDWORD(*(_QWORD *)(v994 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v994 + 24) >> 28) >> 24 << 20));
                v263 = v281 - 5;
                if (v281 < 5)
                  goto LABEL_360;
                goto LABEL_330;
              }
              v310 = *(_QWORD *)(StatusReg + 752);
              if (v310)
              {
                v311 = dword_1ECF548A0;
                if (*(_DWORD *)(v310 + 8052) > dword_1ECF548A0)
                {
                  v312 = v310 + 8 * dword_1ECF548A0;
                  v313 = v312 + 8064;
                  *(_BYTE *)(v312 + 8064) = 1;
                  v314 = *(unsigned int *)(v312 + 8080);
                  if ((_DWORD)v314)
                  {
                    *(_DWORD *)(v313 + 16) = v314 - *(_DWORD *)(v313 + 20);
                    v315 = *(_QWORD *)(v313 + 8) - v314;
                    goto LABEL_386;
                  }
                  v319 = *(_QWORD *)(v313 + 40);
                  v320 = *(_QWORD *)(v313 + 24);
                  if (v319)
                  {
LABEL_396:
                    v321 = __clz(v319);
                    *(_QWORD *)(v313 + 40) = v319 & ~(0x8000000000000000 >> v321);
                    v315 = v320 + 16 * v321;
LABEL_386:
                    *(_BYTE *)v313 = 0;
LABEL_387:
                    *(_QWORD *)&v1009 = v315;
                    v316 = *(unsigned int *)(v274 + 484);
                    if ((_DWORD)v316 == *(_DWORD *)(v274 + 480))
                    {
                      v322 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v274 + 472, v316 + 1, (unint64_t)&v1009);
                      v316 = *(unsigned int *)(v274 + 484);
                      *(_QWORD *)(*(_QWORD *)(v274 + 472) + 8 * v316) = *v322;
                    }
                    else
                    {
                      *(_QWORD *)(*(_QWORD *)(v274 + 472) + 8 * v316) = v315;
                    }
                    v277 = (v316 + 1);
                    *(_DWORD *)(v274 + 484) = v277;
                    v275 = *(_QWORD *)(v274 + 464) - 1;
                    v276 = v275 >> 4;
                    goto LABEL_340;
                  }
                  if (*(_BYTE *)(v313 + 5) == 6)
                  {
                    v797 = *(unsigned int *)(v313 + 32);
                    v798 = *(_DWORD *)(v313 + 36);
                    if (v797 < v798)
                    {
                      *(_QWORD *)(v313 + 8 * v797 + 56) = 0;
                      v799 = (unint64_t *)(v310 + 8128 + 8 * v311 + 8 * v797);
                      v800 = v798 - 1 - v797;
                      while (v800)
                      {
                        v320 += 1024;
                        v802 = *v799++;
                        v801 = v802;
                        LODWORD(v797) = v797 + 1;
                        --v800;
                        if (v802)
                        {
                          v319 = __rbit64(v801);
                          *(_DWORD *)(v313 + 32) = v797;
                          *(_QWORD *)(v313 + 24) = v320;
                          goto LABEL_396;
                        }
                      }
                      *(_DWORD *)(v313 + 32) = v798;
                    }
                  }
                  *(_BYTE *)v313 = 0;
                }
              }
              v315 = bmalloc_allocate_casual(1024, 1);
              goto LABEL_387;
            }
LABEL_398:
            v323 = *((_QWORD *)this + 3);
            if (!*(_BYTE *)(v323 + 960))
              goto LABEL_451;
            v324 = *(unsigned int *)(*(_QWORD *)(v323 + 32) + 48);
            v325 = (v324 ^ 0xFFFFFFFF) + v1000;
            if ((v324 & 0x80000000) == 0)
              v325 = (uint64_t)((v324 << 32) - 0x500000000) >> 32;
            v326 = *((_QWORD *)v54 + v325);
            if (!v326)
            {
              v337 = *(_QWORD *)(v323 + 464);
              *(_QWORD *)(v323 + 464) = v337 + 1;
              v338 = v337 >> 4;
              v339 = *(unsigned int *)(v323 + 484);
              if (v337 >> 4 >= v339)
              {
                v412 = WTF::fastMalloc((WTF *)0x400);
                *(_QWORD *)&v1009 = v412;
                v413 = *(unsigned int *)(v323 + 484);
                if ((_DWORD)v413 == *(_DWORD *)(v323 + 480))
                {
                  v668 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v323 + 472, v413 + 1, (unint64_t)&v1009);
                  v413 = *(unsigned int *)(v323 + 484);
                  *(_QWORD *)(*(_QWORD *)(v323 + 472) + 8 * v413) = *v668;
                }
                else
                {
                  *(_QWORD *)(*(_QWORD *)(v323 + 472) + 8 * v413) = v412;
                }
                v339 = (v413 + 1);
                *(_DWORD *)(v323 + 484) = v339;
                v337 = *(_QWORD *)(v323 + 464) - 1;
                v338 = v337 >> 4;
              }
              if (v338 >= v339)
              {
                __break(0xC471u);
                JUMPOUT(0x19833259CLL);
              }
              v340 = *(_QWORD *)(*(_QWORD *)(v323 + 472) + 8 * v338) + ((v337 & 0xF) << 6);
              *(_QWORD *)v340 = 0;
              *(_QWORD *)(v340 + 8) = 0;
              *(_QWORD *)(v340 + 16) = 0;
              *(_QWORD *)(v340 + 24) = v324 & 0xFFFFFFFEFFFFFFFFLL | (((v324 >> 31) & 1) << 32);
              *(_DWORD *)(v340 + 32) = 0x3FFFFFFF;
              *(_DWORD *)(v340 + 56) = 0;
              *(_QWORD *)(v340 + 48) = 0;
              *(_QWORD *)(v340 + 36) = 0;
              *(_BYTE *)(v340 + 44) = 0;
              v341 = *(_QWORD *)(v323 + 464) - 1;
              if (v341 >> 4 >= *(unsigned int *)(v323 + 484))
              {
                __break(0xC471u);
                JUMPOUT(0x1983325A4);
              }
              v326 = *(_QWORD *)(*(_QWORD *)(v323 + 472) + 8 * (v341 >> 4)) + ((v341 & 0xF) << 6);
              v342 = (v324 ^ 0xFFFFFFFF) + v1000;
              if ((v324 & 0x80000000) == 0)
                v342 = (uint64_t)((v324 << 32) - 0x500000000) >> 32;
              *((_QWORD *)v54 + v342) = v326;
              if ((int)v324 < 5)
                goto LABEL_433;
LABEL_403:
              v327 = *((_QWORD *)this + 31);
              if (!v327)
                goto LABEL_1671;
              v328 = *(_DWORD *)(v327 - 8);
              v329 = v328 & 0x9C352659;
              v330 = *(_QWORD *)(v327 + 24 * (v328 & 0x9C352659));
              if (v330)
              {
                v414 = 1;
                while (v330 != 1)
                {
                  v329 = (v329 + v414) & v328;
                  v330 = *(_QWORD *)(v327 + 24 * v329);
                  ++v414;
                  if (!v330)
                    goto LABEL_405;
                }
                goto LABEL_1671;
              }
LABEL_405:
              v331 = v327 + 24 * v329;
              v332 = *(unsigned int *)(v331 + 20);
              if (!(_DWORD)v332)
                goto LABEL_1671;
              if (v332 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x198332580);
              }
              v333 = 8 * v332;
              v334 = *(_QWORD *)(StatusReg + 752);
              if (v334)
              {
                v335 = (unint64_t)(v333 + 15) >> 4;
                if (v332 <= 0x34)
                {
                  v336 = 23 * v335 + 7;
                }
                else
                {
                  if (v332 > 0x4E2)
                    goto LABEL_1054;
                  v336 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v335 + 626);
                  if (*(_DWORD *)(v334 + 8052) <= v336)
                    goto LABEL_1054;
                }
                v343 = v334 + 8 * v336;
                v344 = v343 + 8064;
                *(_BYTE *)(v343 + 8064) = 1;
                v345 = *(unsigned int *)(v343 + 8080);
                if ((_DWORD)v345)
                {
                  *(_DWORD *)(v344 + 16) = v345 - *(_DWORD *)(v344 + 20);
                  v346 = *(_QWORD *)(v344 + 8) - v345;
                  goto LABEL_422;
                }
                v387 = *(_QWORD *)(v344 + 40);
                v388 = *(_QWORD *)(v344 + 24);
                if (v387)
                {
LABEL_466:
                  v389 = __clz(v387);
                  *(_QWORD *)(v344 + 40) = v387 & ~(0x8000000000000000 >> v389);
                  v346 = v388 + 16 * v389;
LABEL_422:
                  *(_BYTE *)v344 = 0;
LABEL_423:
                  memcpy((void *)v346, *(const void **)(v331 + 8), 8 * *(unsigned int *)(v331 + 20));
                  if (v332 > (int)v324 - 5)
                  {
                    v348 = *(_QWORD *)(v346 + 8 * (v324 - 5));
                    *(_QWORD *)&v1009 = v326;
                    v349 = (_QWORD *)(v348 + 16);
                    v350 = *(unsigned int *)(v348 + 28);
                    if ((_DWORD)v350 == *(_DWORD *)(v348 + 24))
                    {
                      v403 = (_QWORD *)WTF::Vector<JSC::DFG::VariableAccessData *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v349, v350 + 1, (unint64_t)&v1009);
                      v350 = *(unsigned int *)(v348 + 28);
                      *(_QWORD *)(*(_QWORD *)(v348 + 16) + 8 * v350) = *v403;
                      v351 = v1009;
                    }
                    else
                    {
                      *(_QWORD *)(*v349 + 8 * v350) = v326;
                      v351 = v326;
                    }
                    *(_DWORD *)(v348 + 28) = v350 + 1;
                    v352 = *(unsigned __int8 *)(v351 + 40);
                    v353 = (v352 | *(_BYTE *)(v348 + 13));
                    if (v353 != v352)
                      *(_BYTE *)(v351 + 40) = v353;
                    v354 = *(_QWORD *)(StatusReg + 752);
                    if (!v354)
                    {
                      pas_try_deallocate_slow_no_cache(v346, (uint64_t)&bmalloc_heap_config, 1);
                      goto LABEL_433;
                    }
                    if (!(v346 >> 43)
                      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v346 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v346)) & 1) != 0)
                    {
                      goto LABEL_431;
                    }
                    if (v346 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v346 >> 24)
                    {
                      v347 = 0;
                    }
                    else
                    {
                      v347 = (*(_DWORD *)((char *)off_1ECF425F8
                                        + ((((v346 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                        + 24) >> (2 * ((BYTE3(v346) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                      if ((_DWORD)v347 == 1)
                      {
LABEL_431:
                        v355 = *(unsigned int *)(v354 + 8000);
                        if (v355 >= 0x3E7)
                        {
                          pas_thread_local_cache_append_deallocation_slow(v354, v346, (os_unfair_lock_s *)5, v347, v18, v19, v20, v21);
                        }
                        else
                        {
                          *(_QWORD *)(v354 + 8 * v355) = v346 | 0x5000000000000;
                          *(_DWORD *)(v354 + 8000) = v355 + 1;
                        }
                        goto LABEL_433;
                      }
                    }
                    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v354, v346, 1, v347, v18, v19, v20, v21);
                    goto LABEL_433;
                  }
LABEL_1671:
                  __break(0xC471u);
                  JUMPOUT(0x198332534);
                }
                if (*(_BYTE *)(v344 + 5) == 6)
                {
                  v803 = *(unsigned int *)(v344 + 32);
                  v804 = *(_DWORD *)(v344 + 36);
                  if (v803 < v804)
                  {
                    *(_QWORD *)(v344 + 8 * v803 + 56) = 0;
                    v805 = (unint64_t *)(v334 + 8128 + 8 * v336 + 8 * v803);
                    v806 = v804 - 1 - v803;
                    while (v806)
                    {
                      v388 += 1024;
                      v808 = *v805++;
                      v807 = v808;
                      LODWORD(v803) = v803 + 1;
                      --v806;
                      if (v808)
                      {
                        v387 = __rbit64(v807);
                        *(_DWORD *)(v344 + 32) = v803;
                        *(_QWORD *)(v344 + 24) = v388;
                        goto LABEL_466;
                      }
                    }
                    *(_DWORD *)(v344 + 32) = v804;
                  }
                }
                *(_BYTE *)v344 = 0;
              }
LABEL_1054:
              v346 = bmalloc_allocate_casual(v333, 1);
              goto LABEL_423;
            }
            if ((int)v324 >= 5)
              goto LABEL_403;
LABEL_433:
            v356 = v999;
            if ((v999 & 1) != 0)
            {
              v721 = *(_QWORD *)v979;
              if (v975
                || (v722 = *(unsigned int *)((v999 & 0xFFFFFFFF8) + 8), (_DWORD)v722 == 0x3FFFFFFF)
                || (_DWORD)v722 == -1)
              {
                v723 = 2;
              }
              else if (v722 >> 28)
              {
                v930 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v930 = v721;
                *(_DWORD *)(v930 + 8) = v722;
                v723 = 1;
                v721 = v930;
              }
              else
              {
                v723 = *(_QWORD *)v979;
                v721 = v722 << 36;
              }
              v356 = v721 | v723;
            }
            v357 = v81;
            if ((v81 & 1) != 0)
            {
              v724 = *(_QWORD *)v978;
              if ((v81 & 2) != 0
                || (v725 = *(unsigned int *)((v81 & 0xFFFFFFFF8) + 8), (_DWORD)v725 == 0x3FFFFFFF)
                || (_DWORD)v725 == -1)
              {
                v726 = 2;
              }
              else if (v725 >> 28)
              {
                v931 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v931 = v724;
                *(_DWORD *)(v931 + 8) = v725;
                v726 = 1;
                v724 = v931;
              }
              else
              {
                v726 = *(_QWORD *)v978;
                v724 = v725 << 36;
              }
              v357 = v724 | v726;
            }
            v358 = v1004;
            v359 = v356;
            if ((v356 & 1) != 0)
            {
              v727 = *(_QWORD *)(v356 & 0xFFFFFFFF8);
              if ((v356 & 2) != 0
                || (v728 = *(unsigned int *)((v356 & 0xFFFFFFFF8) + 8), (_DWORD)v728 == 0x3FFFFFFF)
                || (_DWORD)v728 == -1)
              {
                v729 = 2;
              }
              else if (v728 >> 28)
              {
                v932 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v932 = v727;
                *(_DWORD *)(v932 + 8) = v728;
                v729 = 1;
                v727 = v932;
              }
              else
              {
                v729 = *(_QWORD *)(v356 & 0xFFFFFFFF8);
                v727 = v728 << 36;
              }
              v359 = v727 | v729;
            }
            v360 = v357;
            if ((v357 & 1) != 0)
            {
              v730 = *(_QWORD *)(v357 & 0xFFFFFFFF8);
              if ((v357 & 2) != 0
                || (v731 = *(unsigned int *)((v357 & 0xFFFFFFFF8) + 8), (_DWORD)v731 == 0x3FFFFFFF)
                || (_DWORD)v731 == -1)
              {
                v732 = 2;
              }
              else if (v731 >> 28)
              {
                v933 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v933 = v730;
                *(_DWORD *)(v933 + 8) = v731;
                v732 = 1;
                v730 = v933;
              }
              else
              {
                v732 = *(_QWORD *)(v357 & 0xFFFFFFFF8);
                v730 = v731 << 36;
              }
              v360 = v730 | v732;
            }
            v361 = v359;
            if ((v359 & 1) != 0)
            {
              v733 = *(_QWORD *)(v359 & 0xFFFFFFFF8);
              if ((v359 & 2) != 0
                || (v734 = *(unsigned int *)((v359 & 0xFFFFFFFF8) + 8), (_DWORD)v734 == 0x3FFFFFFF)
                || (_DWORD)v734 == -1)
              {
                v735 = 2;
              }
              else if (v734 >> 28)
              {
                v934 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v934 = v733;
                *(_DWORD *)(v934 + 8) = v734;
                v735 = 1;
                v733 = v934;
              }
              else
              {
                v735 = *(_QWORD *)(v359 & 0xFFFFFFFF8);
                v733 = v734 << 36;
              }
              v361 = v733 | v735;
              v54 = v997;
            }
            *(_QWORD *)&v1009 = v361;
            v362 = v360;
            if ((v360 & 1) != 0)
            {
              v736 = *(_QWORD *)(v360 & 0xFFFFFFFF8);
              if ((v360 & 2) != 0
                || (v737 = *(unsigned int *)((v360 & 0xFFFFFFFF8) + 8), (_DWORD)v737 == 0x3FFFFFFF)
                || (_DWORD)v737 == -1)
              {
                v738 = 2;
              }
              else if (v737 >> 28)
              {
                v935 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v935 = v736;
                *(_DWORD *)(v935 + 8) = v737;
                v738 = 1;
                v736 = v935;
              }
              else
              {
                v738 = *(_QWORD *)(v360 & 0xFFFFFFFF8);
                v736 = v737 << 36;
              }
              v362 = v736 | v738;
              v54 = v997;
            }
            *((_QWORD *)&v1009 + 1) = v362;
            v1010 = v995;
            v1012[0] = v326;
            LOWORD(v1011) = 28;
            v363 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>((uint64_t)v358 + 1032, (__int16 *)&v1011, (uint64_t)&v1009, v1012, v18, v19, v20, v21);
            if ((BYTE8(v1009) & 1) != 0 && (*((_QWORD *)&v1009 + 1) & 0xFFFFFFFF8) != 0)
              WTF::fastFree(*((_QWORD *)&v1009 + 1) & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
            if ((v1009 & 1) != 0 && (v1009 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v1009 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
            *(_QWORD *)&v1009 = v998;
            *((_QWORD *)&v1009 + 1) = v363;
            v364 = HIDWORD(v1006);
            if (HIDWORD(v1006) && *((_QWORD *)v1005 + 2 * HIDWORD(v1006) - 2) > (unint64_t)v998)
            {
              JSC::DFG::InsertionSet::insertSlow((uint64_t)&v1004, (unint64_t *)&v1009, v16, v17, v18, v19, v20, v21);
            }
            else
            {
              if (HIDWORD(v1006) == (_DWORD)v1006)
              {
                v415 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1005, (void *)(HIDWORD(v1006) + 1), (unint64_t)&v1009, v17, v18, v19, v20, v21);
                v364 = HIDWORD(v1006);
                v365 = v1005;
                v366 = *v415;
              }
              else
              {
                v365 = v1005;
                v366 = v1009;
              }
              *((_OWORD *)v365 + v364) = v366;
              ++HIDWORD(v1006);
            }
            if ((v360 & 1) != 0 && (v360 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v360 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
            if ((v359 & 1) != 0 && (v359 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v359 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
            if ((v357 & 1) != 0 && (v357 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v357 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
            if ((v356 & 1) != 0 && (v356 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v356 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
            v323 = *((_QWORD *)this + 3);
LABEL_451:
            v367 = (uint64_t *)(v994 + 8);
            if (!v994)
              v367 = (uint64_t *)(v323 + 40);
            v368 = *v367;
            v1012[0] = *v367;
            v369 = *(_QWORD *)(v323 + 744);
            if (!v369)
              goto LABEL_493;
            v370 = *(_DWORD *)(v369 - 8);
            v371 = (~(v368 << 32) + v368) ^ ((unint64_t)(~(v368 << 32) + v368) >> 22);
            v372 = 9 * ((v371 + ~(v371 << 13)) ^ ((v371 + ~(v371 << 13)) >> 8));
            v373 = (v372 ^ (v372 >> 15)) + ~((v372 ^ (v372 >> 15)) << 27);
            v374 = v370 & ((v373 >> 31) ^ v373);
            v375 = *(_QWORD *)(v369 + 16 * v374);
            if (v375 != v368)
            {
              v396 = 1;
              while (v375)
              {
                v374 = ((_DWORD)v374 + v396) & v370;
                v375 = *(_QWORD *)(v369 + 16 * v374);
                ++v396;
                if (v375 == v368)
                  goto LABEL_455;
              }
              v374 = *(unsigned int *)(v369 - 4);
            }
LABEL_455:
            if (v374 == *(_DWORD *)(v369 - 4))
            {
LABEL_493:
              v406 = *(JSC::BytecodeLivenessAnalysis **)(*(_QWORD *)(v368 + 56) + 88);
              if (!v406)
                v406 = (JSC::BytecodeLivenessAnalysis *)JSC::UnlinkedCodeBlock::livenessAnalysisSlow(*(JSC::UnlinkedCodeBlock **)(v368 + 56), (JSC::UnlinkedCodeBlock **)v368, v16, v17, v18, v19, v20, v21);
              JSC::BytecodeLivenessAnalysis::computeFullLiveness(v406, (JSC::CodeBlock *)v368, &v1011);
              v376 = (uint64_t)v1011;
              WTF::HashMap<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<std::unique_ptr<JSC::FullBytecodeLiveness>>,WTF::HashTableTraits>::add<std::unique_ptr<JSC::FullBytecodeLiveness>>((uint64_t *)(v323 + 744), v1012, (uint64_t *)&v1011, v407, v408, v409, v410, v411, (uint64_t)&v1009);
              v15 = v1011;
              v1011 = 0;
              if (v15)
                std::default_delete<JSC::FullBytecodeLiveness>::operator()[abi:sn180100]((int)&v1011, (WTF *)v15, v16, v17, v18, v19, v20, v21);
              v323 = *((_QWORD *)this + 3);
            }
            else
            {
              v376 = *(_QWORD *)(v369 + 16 * v374 + 8);
            }
            v377 = v991;
            if ((v991 & 1) != 0)
            {
              v713 = *(_QWORD *)(v991 & 0xFFFFFFFF8);
              if ((v991 & 2) != 0
                || (v714 = *(unsigned int *)((v991 & 0xFFFFFFFF8) + 8), (_DWORD)v714 == 0x3FFFFFFF)
                || (_DWORD)v714 == -1)
              {
                v739 = 2;
              }
              else if (v714 >> 28)
              {
                v928 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v928 = v713;
                *(_DWORD *)(v928 + 8) = v714;
                v739 = 1;
                v713 = v928;
              }
              else
              {
                v739 = *(_QWORD *)(v991 & 0xFFFFFFFF8);
                v713 = v714 << 36;
              }
              v377 = v713 | v739;
            }
            if ((v989 & 1) != 0)
            {
LABEL_459:
              v378 = (v992 & 3) + (v992 >> 2);
              v379 = *(unsigned int **)v376;
              if (*v379 <= v378)
              {
                __break(0xC471u);
                JUMPOUT(0x1983305D0);
              }
              v380 = v377 & 1;
              goto LABEL_461;
            }
            v380 = v377 & 1;
            if ((v377 & 2) != 0)
            {
              v391 = (_QWORD *)(v377 & 0xFFFFFFFF8);
              LODWORD(v390) = -1;
              if ((v377 & 1) == 0)
                goto LABEL_470;
LABEL_1313:
              v391 = (_QWORD *)*v391;
              goto LABEL_470;
            }
            if ((v377 & 1) != 0)
            {
              v391 = (_QWORD *)(v377 & 0xFFFFFFFF8);
              LODWORD(v390) = *(_DWORD *)((v377 & 0xFFFFFFFF8) + 8);
              goto LABEL_1313;
            }
            v390 = v377 >> 36;
            v391 = (_QWORD *)(v377 & 0xFFFFFFFF8);
LABEL_470:
            if (v391)
              v392 = v391 + 1;
            else
              v392 = (_QWORD *)(v323 + 40);
            v393 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(*v392 + 56) + 80)
                                     + ((unint64_t)v390 >> 2));
            v394 = *v393;
            if ((v394 | 2) == 0x82)
              v394 = v393[1];
            if (v394 > 3 || v394 == 2)
              goto LABEL_459;
            v378 = (v992 & 3) + (v992 >> 2);
            v379 = *(unsigned int **)(v376 + 8);
            if (*v379 <= v378)
            {
              __break(0xC471u);
              JUMPOUT(0x198331EB4);
            }
LABEL_461:
            if (v380 && (v377 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v377 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
            v990 = v368;
            v381 = *(_DWORD *)(v368 + 20);
            if (v381)
            {
              v382 = &v379[4 * v378 + 2];
              v383 = (v381 - 1);
              if (v994)
              {
                v384 = (~(v994 << 32) + v994) ^ ((unint64_t)(~(v994 << 32) + v994) >> 22);
                v385 = 9 * ((v384 + ~(v384 << 13)) ^ ((v384 + ~(v384 << 13)) >> 8));
                v386 = (v385 ^ (v385 >> 15)) + ~((v385 ^ (v385 >> 15)) << 27);
                v982 = (v386 >> 31) ^ v386;
                while (1)
                {
                  v438 = v381;
                  v381 = v383;
                  if (((*(_DWORD *)(*(_QWORD *)v382 + 4 * (v383 >> 5)) >> v383) & 1) != 0)
                    break;
LABEL_568:
                  LODWORD(v383) = v381 - 1;
                  if (!v381)
                    goto LABEL_708;
                }
                v439 = HIDWORD(*(_QWORD *)(v994 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v994 + 24) >> 28) >> 24 << 20);
                v441 = (v439 - v438);
                v440 = v439 - v438 < 0;
                v442 = (v441 ^ 0xFFFFFFFFLL) + v1000;
                if (!v440)
                  v442 = ((v441 << 32) - 0x500000000) >> 32;
                v443 = *((_QWORD *)v54 + v442);
                if (v443)
                {
                  v444 = v441 - v439;
                  v445 = v444 - 5;
                  if (v444 >= 5)
                    goto LABEL_574;
LABEL_604:
                  v477 = v999;
                  if ((v999 & 1) != 0)
                  {
                    v684 = *(_QWORD *)v979;
                    if (v975
                      || (v685 = *(unsigned int *)((v999 & 0xFFFFFFFF8) + 8), (_DWORD)v685 == 0x3FFFFFFF)
                      || (_DWORD)v685 == -1)
                    {
                      v686 = 2;
                    }
                    else if (v685 >> 28)
                    {
                      v921 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v921 = v684;
                      *(_DWORD *)(v921 + 8) = v685;
                      v686 = 1;
                      v684 = v921;
                    }
                    else
                    {
                      v686 = *(_QWORD *)v979;
                      v684 = v685 << 36;
                    }
                    v477 = v684 | v686;
                  }
                  v478 = v81;
                  if ((v81 & 1) != 0)
                  {
                    v687 = *(_QWORD *)v978;
                    if ((v81 & 2) != 0
                      || (v688 = *(unsigned int *)((v81 & 0xFFFFFFFF8) + 8), (_DWORD)v688 == 0x3FFFFFFF)
                      || (_DWORD)v688 == -1)
                    {
                      v689 = 2;
                    }
                    else if (v688 >> 28)
                    {
                      v922 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v922 = v687;
                      *(_DWORD *)(v922 + 8) = v688;
                      v689 = 1;
                      v687 = v922;
                    }
                    else
                    {
                      v689 = *(_QWORD *)v978;
                      v687 = v688 << 36;
                    }
                    v478 = v687 | v689;
                  }
                  v479 = v1004;
                  v480 = v477;
                  if ((v477 & 1) != 0)
                  {
                    v690 = *(_QWORD *)(v477 & 0xFFFFFFFF8);
                    if ((v477 & 2) != 0
                      || (v691 = *(unsigned int *)((v477 & 0xFFFFFFFF8) + 8), (_DWORD)v691 == 0x3FFFFFFF)
                      || (_DWORD)v691 == -1)
                    {
                      v692 = 2;
                    }
                    else if (v691 >> 28)
                    {
                      v923 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v923 = v690;
                      *(_DWORD *)(v923 + 8) = v691;
                      v692 = 1;
                      v690 = v923;
                    }
                    else
                    {
                      v692 = *(_QWORD *)(v477 & 0xFFFFFFFF8);
                      v690 = v691 << 36;
                    }
                    v480 = v690 | v692;
                  }
                  v481 = v478;
                  if ((v478 & 1) != 0)
                  {
                    v693 = *(_QWORD *)(v478 & 0xFFFFFFFF8);
                    if ((v478 & 2) != 0
                      || (v694 = *(unsigned int *)((v478 & 0xFFFFFFFF8) + 8), (_DWORD)v694 == 0x3FFFFFFF)
                      || (_DWORD)v694 == -1)
                    {
                      v695 = 2;
                    }
                    else if (v694 >> 28)
                    {
                      v924 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v924 = v693;
                      *(_DWORD *)(v924 + 8) = v694;
                      v695 = 1;
                      v693 = v924;
                    }
                    else
                    {
                      v695 = *(_QWORD *)(v478 & 0xFFFFFFFF8);
                      v693 = v694 << 36;
                    }
                    v481 = v693 | v695;
                    v54 = v997;
                  }
                  v482 = v480;
                  if ((v480 & 1) != 0)
                  {
                    v696 = *(_QWORD *)(v480 & 0xFFFFFFFF8);
                    if ((v480 & 2) != 0
                      || (v697 = *(unsigned int *)((v480 & 0xFFFFFFFF8) + 8), (_DWORD)v697 == 0x3FFFFFFF)
                      || (_DWORD)v697 == -1)
                    {
                      v698 = 2;
                    }
                    else if (v697 >> 28)
                    {
                      v968 = *(_QWORD *)(v480 & 0xFFFFFFFF8);
                      v925 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v925 = v968;
                      *(_DWORD *)(v925 + 8) = v697;
                      v698 = 1;
                      v696 = v925;
                    }
                    else
                    {
                      v698 = *(_QWORD *)(v480 & 0xFFFFFFFF8);
                      v696 = v697 << 36;
                    }
                    v482 = v696 | v698;
                    v54 = v997;
                  }
                  *(_QWORD *)&v1009 = v482;
                  v483 = v481;
                  if ((v481 & 1) != 0)
                  {
                    v699 = *(_QWORD *)(v481 & 0xFFFFFFFF8);
                    if ((v481 & 2) != 0
                      || (v700 = *(unsigned int *)((v481 & 0xFFFFFFFF8) + 8), (_DWORD)v700 == 0x3FFFFFFF)
                      || (_DWORD)v700 == -1)
                    {
                      v701 = 2;
                    }
                    else if (v700 >> 28)
                    {
                      v969 = *(_QWORD *)(v481 & 0xFFFFFFFF8);
                      v926 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v926 = v969;
                      *(_DWORD *)(v926 + 8) = v700;
                      v701 = 1;
                      v699 = v926;
                    }
                    else
                    {
                      v701 = *(_QWORD *)(v481 & 0xFFFFFFFF8);
                      v699 = v700 << 36;
                    }
                    v483 = v699 | v701;
                    v54 = v997;
                  }
                  *((_QWORD *)&v1009 + 1) = v483;
                  v1010 = v995;
                  v1012[0] = v443;
                  LOWORD(v1011) = 29;
                  v484 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>((uint64_t)v479 + 1032, (__int16 *)&v1011, (uint64_t)&v1009, v1012, v18, v19, v20, v21);
                  if ((BYTE8(v1009) & 1) != 0 && (*((_QWORD *)&v1009 + 1) & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(*((_QWORD *)&v1009 + 1) & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                  if ((v1009 & 1) != 0 && (v1009 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v1009 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                  *(_QWORD *)&v1009 = v998;
                  *((_QWORD *)&v1009 + 1) = v484;
                  v485 = HIDWORD(v1006);
                  if (HIDWORD(v1006) && *((_QWORD *)v1005 + 2 * HIDWORD(v1006) - 2) > (unint64_t)v998)
                  {
                    JSC::DFG::InsertionSet::insertSlow((uint64_t)&v1004, (unint64_t *)&v1009, v16, v17, v18, v19, v20, v21);
                  }
                  else
                  {
                    if (HIDWORD(v1006) == (_DWORD)v1006)
                    {
                      v495 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1005, (void *)(HIDWORD(v1006) + 1), (unint64_t)&v1009, v17, v18, v19, v20, v21);
                      v485 = HIDWORD(v1006);
                      v486 = v1005;
                      v487 = *v495;
                    }
                    else
                    {
                      v486 = v1005;
                      v487 = v1009;
                    }
                    *((_OWORD *)v486 + v485) = v487;
                    ++HIDWORD(v1006);
                  }
                  if ((v481 & 1) != 0 && (v481 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v481 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                  if ((v480 & 1) != 0 && (v480 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v480 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                  if ((v478 & 1) != 0 && (v478 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v478 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                  if ((v477 & 1) != 0 && (v477 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v477 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                  goto LABEL_568;
                }
                v456 = *((_QWORD *)this + 3);
                v457 = *(_QWORD *)(v456 + 464);
                *(_QWORD *)(v456 + 464) = v457 + 1;
                v458 = v457 >> 4;
                v459 = *(unsigned int *)(v456 + 484);
                if (v457 >> 4 >= v459)
                {
                  v492 = WTF::fastMalloc((WTF *)0x400);
                  *(_QWORD *)&v1009 = v492;
                  v493 = *(unsigned int *)(v456 + 484);
                  if ((_DWORD)v493 == *(_DWORD *)(v456 + 480))
                  {
                    v496 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v456 + 472, v493 + 1, (unint64_t)&v1009);
                    v493 = *(unsigned int *)(v456 + 484);
                    *(_QWORD *)(*(_QWORD *)(v456 + 472) + 8 * v493) = *v496;
                  }
                  else
                  {
                    *(_QWORD *)(*(_QWORD *)(v456 + 472) + 8 * v493) = v492;
                  }
                  v459 = (v493 + 1);
                  *(_DWORD *)(v456 + 484) = v459;
                  v457 = *(_QWORD *)(v456 + 464) - 1;
                  v458 = v457 >> 4;
                }
                if (v458 >= v459)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19833253CLL);
                }
                v460 = *(_QWORD *)(*(_QWORD *)(v456 + 472) + 8 * v458) + ((v457 & 0xF) << 6);
                *(_QWORD *)v460 = 0;
                *(_QWORD *)(v460 + 8) = 0;
                *(_QWORD *)(v460 + 16) = 0;
                *(_QWORD *)(v460 + 24) = v441 | ((unint64_t)(v441 >> 31) << 32);
                *(_DWORD *)(v460 + 32) = 0x3FFFFFFF;
                *(_DWORD *)(v460 + 56) = 0;
                *(_QWORD *)(v460 + 48) = 0;
                *(_QWORD *)(v460 + 36) = 0;
                *(_BYTE *)(v460 + 44) = 0;
                v461 = *(_QWORD *)(v456 + 464) - 1;
                if (v461 >> 4 >= *(unsigned int *)(v456 + 484))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198332544);
                }
                if ((v441 & 0x80000000) != 0)
                  v462 = (v441 ^ 0xFFFFFFFFLL) + v1000;
                else
                  v462 = ((v441 << 32) - 0x500000000) >> 32;
                v443 = *(_QWORD *)(*(_QWORD *)(v456 + 472) + 8 * (v461 >> 4)) + ((v461 & 0xF) << 6);
                *((_QWORD *)v54 + v462) = v443;
                v463 = v441
                     - (HIDWORD(*(_QWORD *)(v994 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v994 + 24) >> 28) >> 24 << 20));
                v445 = v463 - 5;
                if (v463 < 5)
                  goto LABEL_604;
LABEL_574:
                v446 = *((_QWORD *)this + 31);
                if (!v446)
                  goto LABEL_1667;
                v447 = *(_DWORD *)(v446 - 8);
                v448 = v447 & v982;
                v449 = *(_QWORD *)(v446 + 24 * (v447 & v982));
                if (v449 != v994)
                {
                  v494 = 1;
                  while (v449 != 1)
                  {
                    v448 = (v448 + v494) & v447;
                    v449 = *(_QWORD *)(v446 + 24 * v448);
                    ++v494;
                    if (v449 == v994)
                      goto LABEL_576;
                  }
LABEL_1667:
                  __break(0xC471u);
                  JUMPOUT(0x198332514);
                }
LABEL_576:
                v450 = v446 + 24 * v448;
                v451 = *(unsigned int *)(v450 + 20);
                if (!(_DWORD)v451)
                  goto LABEL_1667;
                if (v451 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19833252CLL);
                }
                v452 = 8 * v451;
                v453 = *(_QWORD *)(StatusReg + 752);
                if (v453)
                {
                  v454 = (unint64_t)(v452 + 15) >> 4;
                  if (v451 <= 0x34)
                  {
                    v455 = 23 * v454 + 7;
                  }
                  else
                  {
                    if (v451 > 0x4E2)
                      goto LABEL_944;
                    v455 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v454 + 626);
                    if (*(_DWORD *)(v453 + 8052) <= v455)
                      goto LABEL_944;
                  }
                  v464 = v453 + 8 * v455;
                  v465 = v464 + 8064;
                  *(_BYTE *)(v464 + 8064) = 1;
                  v466 = *(unsigned int *)(v464 + 8080);
                  if ((_DWORD)v466)
                  {
                    *(_DWORD *)(v465 + 16) = v466 - *(_DWORD *)(v465 + 20);
                    v467 = *(_QWORD *)(v465 + 8) - v466;
                    goto LABEL_593;
                  }
                  v488 = *(_QWORD *)(v465 + 40);
                  v489 = *(_QWORD *)(v465 + 24);
                  if (v488)
                  {
LABEL_623:
                    v490 = __clz(v488);
                    *(_QWORD *)(v465 + 40) = v488 & ~(0x8000000000000000 >> v490);
                    v467 = v489 + 16 * v490;
LABEL_593:
                    *(_BYTE *)v465 = 0;
LABEL_594:
                    memcpy((void *)v467, *(const void **)(v450 + 8), 8 * *(unsigned int *)(v450 + 20));
                    if (v451 <= v445)
                      goto LABEL_1667;
                    v469 = *(_QWORD *)(v467 + 8 * v445);
                    *(_QWORD *)&v1009 = v443;
                    v470 = (_QWORD *)(v469 + 16);
                    v471 = *(unsigned int *)(v469 + 28);
                    if ((_DWORD)v471 == *(_DWORD *)(v469 + 24))
                    {
                      v491 = (_QWORD *)WTF::Vector<JSC::DFG::VariableAccessData *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v470, v471 + 1, (unint64_t)&v1009);
                      v471 = *(unsigned int *)(v469 + 28);
                      *(_QWORD *)(*(_QWORD *)(v469 + 16) + 8 * v471) = *v491;
                      v472 = v1009;
                    }
                    else
                    {
                      *(_QWORD *)(*v470 + 8 * v471) = v443;
                      v472 = v443;
                    }
                    *(_DWORD *)(v469 + 28) = v471 + 1;
                    v473 = *(unsigned __int8 *)(v472 + 40);
                    v474 = (v473 | *(_BYTE *)(v469 + 13));
                    if (v474 != v473)
                      *(_BYTE *)(v472 + 40) = v474;
                    v475 = *(_QWORD *)(StatusReg + 752);
                    if (!v475)
                    {
                      pas_try_deallocate_slow_no_cache(v467, (uint64_t)&bmalloc_heap_config, 1);
                      goto LABEL_604;
                    }
                    if (!(v467 >> 43)
                      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v467 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v467)) & 1) != 0)
                    {
LABEL_602:
                      v476 = *(unsigned int *)(v475 + 8000);
                      if (v476 >= 0x3E7)
                      {
                        pas_thread_local_cache_append_deallocation_slow(v475, v467, (os_unfair_lock_s *)5, v468, v18, v19, v20, v21);
                      }
                      else
                      {
                        *(_QWORD *)(v475 + 8 * v476) = v467 | 0x5000000000000;
                        *(_DWORD *)(v475 + 8000) = v476 + 1;
                      }
                      goto LABEL_604;
                    }
                    if (v467 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v467 >> 24)
                    {
                      v468 = 0;
                    }
                    else
                    {
                      v468 = (*(_DWORD *)((char *)off_1ECF425F8
                                        + ((((v467 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                        + 24) >> (2 * ((BYTE3(v467) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                      if ((_DWORD)v468 == 1)
                        goto LABEL_602;
                    }
                    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v475, v467, 1, v468, v18, v19, v20, v21);
                    goto LABEL_604;
                  }
                  if (*(_BYTE *)(v465 + 5) == 6)
                  {
                    v706 = *(unsigned int *)(v465 + 32);
                    v741 = *(_DWORD *)(v465 + 36);
                    if (v706 < v741)
                    {
                      *(_QWORD *)(v465 + 8 * v706 + 56) = 0;
                      v703 = (unint64_t *)(v453 + 8128 + 8 * v455 + 8 * v706);
                      v707 = v741 - 1 - v706;
                      while (v707)
                      {
                        v489 += 1024;
                        v705 = *v703++;
                        v704 = v705;
                        LODWORD(v706) = v706 + 1;
                        --v707;
                        if (v705)
                        {
                          v488 = __rbit64(v704);
                          *(_DWORD *)(v465 + 32) = v706;
                          *(_QWORD *)(v465 + 24) = v489;
                          goto LABEL_623;
                        }
                      }
                      *(_DWORD *)(v465 + 32) = v741;
                    }
                  }
                  *(_BYTE *)v465 = 0;
                }
LABEL_944:
                v467 = bmalloc_allocate_casual(v452, 1);
                goto LABEL_594;
              }
              while (2)
              {
                v497 = v383;
                if (((*(_DWORD *)(*(_QWORD *)v382 + 4 * (v383 >> 5)) >> v383) & 1) == 0)
                  goto LABEL_635;
                v498 = -v381;
                v499 = (v498 ^ 0xFFFFFFFFLL) + v1000;
                if (v381 <= 0)
                  v499 = ((v498 << 32) - 0x500000000) >> 32;
                v500 = *((_QWORD *)v54 + v499);
                if (v500)
                {
                  if ((int)v498 >= 5)
                    goto LABEL_641;
LABEL_671:
                  v532 = v999;
                  if ((v999 & 1) != 0)
                  {
                    v614 = *(_QWORD *)v979;
                    if (v975
                      || (v615 = *(unsigned int *)((v999 & 0xFFFFFFFF8) + 8), (_DWORD)v615 == 0x3FFFFFFF)
                      || (_DWORD)v615 == -1)
                    {
                      v616 = 2;
                    }
                    else if (v615 >> 28)
                    {
                      v905 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v905 = v614;
                      *(_DWORD *)(v905 + 8) = v615;
                      v616 = 1;
                      v614 = v905;
                    }
                    else
                    {
                      v616 = *(_QWORD *)v979;
                      v614 = v615 << 36;
                    }
                    v532 = v614 | v616;
                  }
                  v533 = v81;
                  if ((v81 & 1) != 0)
                  {
                    v617 = *(_QWORD *)v978;
                    if ((v81 & 2) != 0
                      || (v618 = *(unsigned int *)((v81 & 0xFFFFFFFF8) + 8), (_DWORD)v618 == 0x3FFFFFFF)
                      || (_DWORD)v618 == -1)
                    {
                      v619 = 2;
                    }
                    else if (v618 >> 28)
                    {
                      v906 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v906 = v617;
                      *(_DWORD *)(v906 + 8) = v618;
                      v619 = 1;
                      v617 = v906;
                    }
                    else
                    {
                      v619 = *(_QWORD *)v978;
                      v617 = v618 << 36;
                    }
                    v533 = v617 | v619;
                  }
                  v534 = v1004;
                  v535 = v532;
                  if ((v532 & 1) != 0)
                  {
                    v620 = *(_QWORD *)(v532 & 0xFFFFFFFF8);
                    if ((v532 & 2) != 0
                      || (v621 = *(unsigned int *)((v532 & 0xFFFFFFFF8) + 8), (_DWORD)v621 == 0x3FFFFFFF)
                      || (_DWORD)v621 == -1)
                    {
                      v622 = 2;
                    }
                    else if (v621 >> 28)
                    {
                      v907 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v907 = v620;
                      *(_DWORD *)(v907 + 8) = v621;
                      v622 = 1;
                      v620 = v907;
                    }
                    else
                    {
                      v622 = *(_QWORD *)(v532 & 0xFFFFFFFF8);
                      v620 = v621 << 36;
                    }
                    v535 = v620 | v622;
                  }
                  v536 = v533;
                  if ((v533 & 1) != 0)
                  {
                    v623 = *(_QWORD *)(v533 & 0xFFFFFFFF8);
                    if ((v533 & 2) != 0
                      || (v624 = *(unsigned int *)((v533 & 0xFFFFFFFF8) + 8), (_DWORD)v624 == 0x3FFFFFFF)
                      || (_DWORD)v624 == -1)
                    {
                      v625 = 2;
                    }
                    else if (v624 >> 28)
                    {
                      v985 = *(_QWORD *)(v533 & 0xFFFFFFFF8);
                      v908 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v908 = v985;
                      *(_DWORD *)(v908 + 8) = v624;
                      v625 = 1;
                      v623 = v908;
                    }
                    else
                    {
                      v625 = *(_QWORD *)(v533 & 0xFFFFFFFF8);
                      v623 = v624 << 36;
                    }
                    v536 = v623 | v625;
                  }
                  v537 = v535;
                  if ((v535 & 1) != 0)
                  {
                    v626 = *(_QWORD *)(v535 & 0xFFFFFFFF8);
                    if ((v535 & 2) != 0
                      || (v627 = *(unsigned int *)((v535 & 0xFFFFFFFF8) + 8), (_DWORD)v627 == 0x3FFFFFFF)
                      || (_DWORD)v627 == -1)
                    {
                      v628 = 2;
                    }
                    else if (v627 >> 28)
                    {
                      v966 = *(_QWORD *)(v535 & 0xFFFFFFFF8);
                      v986 = *(_DWORD *)((v535 & 0xFFFFFFFF8) + 8);
                      v909 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v909 = v966;
                      *(_DWORD *)(v909 + 8) = v986;
                      v628 = 1;
                      v626 = v909;
                    }
                    else
                    {
                      v628 = *(_QWORD *)(v535 & 0xFFFFFFFF8);
                      v626 = v627 << 36;
                    }
                    v537 = v626 | v628;
                  }
                  *(_QWORD *)&v1009 = v537;
                  v538 = v536;
                  if ((v536 & 1) != 0)
                  {
                    v629 = *(_QWORD *)(v536 & 0xFFFFFFFF8);
                    if ((v536 & 2) != 0
                      || (v630 = *(unsigned int *)((v536 & 0xFFFFFFFF8) + 8), (_DWORD)v630 == 0x3FFFFFFF)
                      || (_DWORD)v630 == -1)
                    {
                      v631 = 2;
                    }
                    else if (v630 >> 28)
                    {
                      v967 = *(_QWORD *)(v536 & 0xFFFFFFFF8);
                      v987 = *(_DWORD *)((v536 & 0xFFFFFFFF8) + 8);
                      v910 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v910 = v967;
                      *(_DWORD *)(v910 + 8) = v987;
                      v631 = 1;
                      v629 = v910;
                    }
                    else
                    {
                      v631 = *(_QWORD *)(v536 & 0xFFFFFFFF8);
                      v629 = v630 << 36;
                    }
                    v538 = v629 | v631;
                  }
                  *((_QWORD *)&v1009 + 1) = v538;
                  v1010 = v995;
                  v1012[0] = v500;
                  LOWORD(v1011) = 29;
                  v539 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>((uint64_t)v534 + 1032, (__int16 *)&v1011, (uint64_t)&v1009, v1012, v18, v19, v20, v21);
                  if ((BYTE8(v1009) & 1) != 0 && (*((_QWORD *)&v1009 + 1) & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(*((_QWORD *)&v1009 + 1) & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                  v54 = v997;
                  if ((v1009 & 1) != 0 && (v1009 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v1009 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                  *(_QWORD *)&v1009 = v998;
                  *((_QWORD *)&v1009 + 1) = v539;
                  v540 = HIDWORD(v1006);
                  if (HIDWORD(v1006) && *((_QWORD *)v1005 + 2 * HIDWORD(v1006) - 2) > (unint64_t)v998)
                  {
                    JSC::DFG::InsertionSet::insertSlow((uint64_t)&v1004, (unint64_t *)&v1009, v16, v17, v18, v19, v20, v21);
                  }
                  else
                  {
                    if (HIDWORD(v1006) == (_DWORD)v1006)
                    {
                      v555 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1005, (void *)(HIDWORD(v1006) + 1), (unint64_t)&v1009, v17, v18, v19, v20, v21);
                      v540 = HIDWORD(v1006);
                      v541 = v1005;
                      v542 = *v555;
                    }
                    else
                    {
                      v541 = v1005;
                      v542 = v1009;
                    }
                    *((_OWORD *)v541 + v540) = v542;
                    ++HIDWORD(v1006);
                  }
                  if ((v536 & 1) != 0 && (v536 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v536 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                  if ((v535 & 1) != 0 && (v535 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v535 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                  if ((v533 & 1) != 0 && (v533 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v533 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                  if ((v532 & 1) != 0 && (v532 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v532 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
LABEL_635:
                  --v381;
                  v383 = v497 - 1;
                  if (!v497)
                    goto LABEL_708;
                  continue;
                }
                break;
              }
              v511 = *((_QWORD *)this + 3);
              v512 = *(_QWORD *)(v511 + 464);
              *(_QWORD *)(v511 + 464) = v512 + 1;
              v513 = v512 >> 4;
              v514 = *(unsigned int *)(v511 + 484);
              if (v512 >> 4 < v514)
              {
LABEL_651:
                if (v513 >= v514)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983324FCLL);
                }
                v515 = *(_QWORD *)(*(_QWORD *)(v511 + 472) + 8 * v513) + ((v512 & 0xF) << 6);
                *(_QWORD *)v515 = 0;
                *(_QWORD *)(v515 + 8) = 0;
                *(_QWORD *)(v515 + 16) = 0;
                *(_QWORD *)(v515 + 24) = -v381 | ((unint64_t)(v381 > 0) << 32);
                *(_DWORD *)(v515 + 32) = 0x3FFFFFFF;
                *(_DWORD *)(v515 + 56) = 0;
                *(_QWORD *)(v515 + 48) = 0;
                *(_QWORD *)(v515 + 36) = 0;
                *(_BYTE *)(v515 + 44) = 0;
                v516 = *(_QWORD *)(v511 + 464) - 1;
                if (v516 >> 4 >= *(unsigned int *)(v511 + 484))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198332504);
                }
                if ((v498 & 0x80000000) != 0)
                  v517 = (v498 ^ 0xFFFFFFFFLL) + v1000;
                else
                  v517 = ((v498 << 32) - 0x500000000) >> 32;
                v500 = *(_QWORD *)(*(_QWORD *)(v511 + 472) + 8 * (v516 >> 4)) + ((v516 & 0xF) << 6);
                *((_QWORD *)v997 + v517) = v500;
                if ((int)v498 < 5)
                  goto LABEL_671;
LABEL_641:
                v501 = *((_QWORD *)this + 31);
                if (!v501)
                  goto LABEL_1645;
                v502 = *(_DWORD *)(v501 - 8);
                v503 = v502 & 0x9C352659;
                v504 = *(_QWORD *)(v501 + 24 * (v502 & 0x9C352659));
                if (v504)
                {
                  v554 = 1;
                  while (v504 != 1)
                  {
                    v503 = (v503 + v554) & v502;
                    v504 = *(_QWORD *)(v501 + 24 * v503);
                    ++v554;
                    if (!v504)
                      goto LABEL_643;
                  }
LABEL_1645:
                  __break(0xC471u);
                  JUMPOUT(0x198332350);
                }
LABEL_643:
                v505 = v501 + 24 * v503;
                v506 = *(unsigned int *)(v505 + 20);
                if (!(_DWORD)v506)
                  goto LABEL_1645;
                if (v506 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983324A4);
                }
                v507 = 8 * v506;
                v508 = *(_QWORD *)(StatusReg + 752);
                if (v508)
                {
                  v509 = (unint64_t)(v507 + 15) >> 4;
                  if (v506 <= 0x34)
                  {
                    v510 = 23 * v509 + 7;
                  }
                  else
                  {
                    if (v506 > 0x4E2)
                      goto LABEL_763;
                    v510 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v509 + 626);
                    if (*(_DWORD *)(v508 + 8052) <= v510)
                      goto LABEL_763;
                  }
                  v518 = v508 + 8 * v510;
                  v519 = v518 + 8064;
                  *(_BYTE *)(v518 + 8064) = 1;
                  v520 = *(unsigned int *)(v518 + 8080);
                  if ((_DWORD)v520)
                  {
                    *(_DWORD *)(v519 + 16) = v520 - *(_DWORD *)(v519 + 20);
                    v521 = *(_QWORD *)(v519 + 8) - v520;
                    goto LABEL_660;
                  }
                  v543 = *(_QWORD *)(v519 + 40);
                  v544 = *(_QWORD *)(v519 + 24);
                  if (v543)
                  {
LABEL_690:
                    v545 = __clz(v543);
                    *(_QWORD *)(v519 + 40) = v543 & ~(0x8000000000000000 >> v545);
                    v521 = v544 + 16 * v545;
LABEL_660:
                    *(_BYTE *)v519 = 0;
LABEL_661:
                    memcpy((void *)v521, *(const void **)(v505 + 8), 8 * *(unsigned int *)(v505 + 20));
                    v523 = -5 - v381;
                    if (v506 <= v523)
                      goto LABEL_1645;
                    v524 = *(_QWORD *)(v521 + 8 * v523);
                    *(_QWORD *)&v1009 = v500;
                    v525 = (_QWORD *)(v524 + 16);
                    v526 = *(unsigned int *)(v524 + 28);
                    if ((_DWORD)v526 == *(_DWORD *)(v524 + 24))
                    {
                      v546 = (_QWORD *)WTF::Vector<JSC::DFG::VariableAccessData *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v525, v526 + 1, (unint64_t)&v1009);
                      v526 = *(unsigned int *)(v524 + 28);
                      *(_QWORD *)(*(_QWORD *)(v524 + 16) + 8 * v526) = *v546;
                      v527 = v1009;
                    }
                    else
                    {
                      *(_QWORD *)(*v525 + 8 * v526) = v500;
                      v527 = v500;
                    }
                    *(_DWORD *)(v524 + 28) = v526 + 1;
                    v528 = *(unsigned __int8 *)(v527 + 40);
                    v529 = (v528 | *(_BYTE *)(v524 + 13));
                    if (v529 != v528)
                      *(_BYTE *)(v527 + 40) = v529;
                    v530 = *(_QWORD *)(StatusReg + 752);
                    if (!v530)
                    {
                      pas_try_deallocate_slow_no_cache(v521, (uint64_t)&bmalloc_heap_config, 1);
                      goto LABEL_671;
                    }
                    if (!(v521 >> 43)
                      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v521 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v521)) & 1) != 0)
                    {
LABEL_669:
                      v531 = *(unsigned int *)(v530 + 8000);
                      if (v531 >= 0x3E7)
                      {
                        pas_thread_local_cache_append_deallocation_slow(v530, v521, (os_unfair_lock_s *)5, v522, v18, v19, v20, v21);
                      }
                      else
                      {
                        *(_QWORD *)(v530 + 8 * v531) = v521 | 0x5000000000000;
                        *(_DWORD *)(v530 + 8000) = v531 + 1;
                      }
                      goto LABEL_671;
                    }
                    if (v521 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v521 >> 24)
                    {
                      v522 = 0;
                    }
                    else
                    {
                      v522 = (*(_DWORD *)((char *)off_1ECF425F8
                                        + ((((v521 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                        + 24) >> (2 * ((BYTE3(v521) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                      if ((_DWORD)v522 == 1)
                        goto LABEL_669;
                    }
                    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v530, v521, 1, v522, v18, v19, v20, v21);
                    goto LABEL_671;
                  }
                  if (*(_BYTE *)(v519 + 5) == 6)
                  {
                    v642 = *(unsigned int *)(v519 + 32);
                    v702 = *(_DWORD *)(v519 + 36);
                    if (v642 < v702)
                    {
                      *(_QWORD *)(v519 + 8 * v642 + 56) = 0;
                      v639 = (unint64_t *)(v508 + 8128 + 8 * v510 + 8 * v642);
                      v643 = v702 - 1 - v642;
                      while (v643)
                      {
                        v544 += 1024;
                        v641 = *v639++;
                        v640 = v641;
                        LODWORD(v642) = v642 + 1;
                        --v643;
                        if (v641)
                        {
                          v543 = __rbit64(v640);
                          *(_DWORD *)(v519 + 32) = v642;
                          *(_QWORD *)(v519 + 24) = v544;
                          goto LABEL_690;
                        }
                      }
                      *(_DWORD *)(v519 + 32) = v702;
                    }
                  }
                  *(_BYTE *)v519 = 0;
                }
LABEL_763:
                v521 = bmalloc_allocate_casual(v507, 1);
                goto LABEL_661;
              }
              v547 = *(_QWORD *)(StatusReg + 752);
              if (v547)
              {
                v548 = dword_1ECF548A0;
                if (*(_DWORD *)(v547 + 8052) > dword_1ECF548A0)
                {
                  v549 = v547 + 8 * dword_1ECF548A0;
                  v550 = v549 + 8064;
                  *(_BYTE *)(v549 + 8064) = 1;
                  v551 = *(unsigned int *)(v549 + 8080);
                  if ((_DWORD)v551)
                  {
                    *(_DWORD *)(v550 + 16) = v551 - *(_DWORD *)(v550 + 20);
                    v552 = *(_QWORD *)(v550 + 8) - v551;
                    goto LABEL_697;
                  }
                  v556 = *(_QWORD *)(v550 + 40);
                  v557 = *(_QWORD *)(v550 + 24);
                  if (v556)
                  {
LABEL_707:
                    v558 = __clz(v556);
                    *(_QWORD *)(v550 + 40) = v556 & ~(0x8000000000000000 >> v558);
                    v552 = v557 + 16 * v558;
LABEL_697:
                    *(_BYTE *)v550 = 0;
LABEL_698:
                    *(_QWORD *)&v1009 = v552;
                    v553 = *(unsigned int *)(v511 + 484);
                    if ((_DWORD)v553 == *(_DWORD *)(v511 + 480))
                    {
                      v580 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v511 + 472, v553 + 1, (unint64_t)&v1009);
                      v553 = *(unsigned int *)(v511 + 484);
                      *(_QWORD *)(*(_QWORD *)(v511 + 472) + 8 * v553) = *v580;
                    }
                    else
                    {
                      *(_QWORD *)(*(_QWORD *)(v511 + 472) + 8 * v553) = v552;
                    }
                    v514 = (v553 + 1);
                    *(_DWORD *)(v511 + 484) = v514;
                    v512 = *(_QWORD *)(v511 + 464) - 1;
                    v513 = v512 >> 4;
                    goto LABEL_651;
                  }
                  if (*(_BYTE *)(v550 + 5) == 6)
                  {
                    v809 = *(unsigned int *)(v550 + 32);
                    v810 = *(_DWORD *)(v550 + 36);
                    if (v809 < v810)
                    {
                      *(_QWORD *)(v550 + 8 * v809 + 56) = 0;
                      v811 = (unint64_t *)(v547 + 8128 + 8 * v548 + 8 * v809);
                      v812 = v810 - 1 - v809;
                      while (v812)
                      {
                        v557 += 1024;
                        v814 = *v811++;
                        v813 = v814;
                        LODWORD(v809) = v809 + 1;
                        --v812;
                        if (v814)
                        {
                          v556 = __rbit64(v813);
                          *(_DWORD *)(v550 + 32) = v809;
                          *(_QWORD *)(v550 + 24) = v557;
                          goto LABEL_707;
                        }
                      }
                      *(_DWORD *)(v550 + 32) = v810;
                    }
                  }
                  *(_BYTE *)v550 = 0;
                }
              }
              v552 = bmalloc_allocate_casual(1024, 1);
              goto LABEL_698;
            }
LABEL_708:
            v559 = v981;
            if ((v992 & 3) == 0)
            {
LABEL_732:
              if ((v991 & 1) != 0 && (v991 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v991 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
              v574 = (uint64_t *)(v988 & 0xFFFFFFFF8);
              if ((v988 & 1) != 0)
              {
                v575 = *v574;
                v15 = v998;
                v576 = v999;
                if (*v574)
                {
                  if (v574)
                    WTF::fastFree((unint64_t)v574, v998, v16, v17, v18, v19, v20, v21);
LABEL_735:
                  v86 = 0;
                  v85 = *(_QWORD *)(v575 + 16);
                  if ((v85 & 1) != 0)
                  {
                    v715 = *(_QWORD *)(v85 & 0xFFFFFFFF8);
                    if ((v85 & 2) != 0
                      || ((v716 = *(unsigned int *)((v85 & 0xFFFFFFFF8) + 8), (_DWORD)v716 != 0x3FFFFFFF)
                        ? (v717 = (_DWORD)v716 == -1)
                        : (v717 = 1),
                          v717))
                    {
                      v720 = 2;
                    }
                    else if (v716 >> 28)
                    {
                      v929 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v929 = v715;
                      *(_DWORD *)(v929 + 8) = v716;
                      v720 = 1;
                      v715 = v929;
                    }
                    else
                    {
                      v720 = *(_QWORD *)(v85 & 0xFFFFFFFF8);
                      v715 = v716 << 36;
                    }
                    v86 = 0;
                    v85 = v715 | v720;
                  }
                  continue;
                }
                if (v574)
                {
                  WTF::fastFree((unint64_t)v574, v998, v16, v17, v18, v19, v20, v21);
                  v15 = v998;
                  v576 = v999;
                }
              }
              else
              {
                v575 = v988 & 0xFFFFFFFF8;
                v15 = v998;
                v576 = v999;
                if (v574)
                  goto LABEL_735;
              }
              if ((v976 & 1) == 0 && (v970 & 0xFFFFFFFF8) != 0)
              {
                WTF::fastFree(v970 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                v15 = v998;
                v576 = v999;
              }
              v605 = v576;
              if ((v576 & 1) != 0)
              {
                v866 = *(_QWORD *)v979;
                if (v975
                  || (v867 = *(unsigned int *)((v999 & 0xFFFFFFFF8) + 8), (_DWORD)v867 == 0x3FFFFFFF)
                  || (_DWORD)v867 == -1)
                {
                  v868 = 2;
                }
                else if (v867 >> 28)
                {
                  v964 = WTF::fastMalloc((WTF *)0x10);
                  v15 = v998;
                  *(_QWORD *)v964 = v866;
                  *(_DWORD *)(v964 + 8) = v867;
                  v868 = 1;
                  v866 = v964;
                }
                else
                {
                  v868 = *(_QWORD *)v979;
                  v866 = v867 << 36;
                }
                v605 = v866 | v868;
              }
              v1001 = v605;
              v606 = v81;
              if ((v81 & 1) != 0)
              {
                v869 = *(_QWORD *)v978;
                if ((v81 & 2) != 0
                  || (v870 = *(unsigned int *)((v81 & 0xFFFFFFFF8) + 8), (_DWORD)v870 == 0x3FFFFFFF)
                  || (_DWORD)v870 == -1)
                {
                  v871 = 2;
                }
                else if (v870 >> 28)
                {
                  v965 = WTF::fastMalloc((WTF *)0x10);
                  v15 = v998;
                  *(_QWORD *)v965 = v869;
                  *(_DWORD *)(v965 + 8) = v870;
                  v871 = 1;
                  v869 = v965;
                }
                else
                {
                  v871 = *(_QWORD *)v978;
                  v869 = v870 << 36;
                }
                v606 = v869 | v871;
              }
              v1002 = v606;
              v1003 = v995;
              JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin>((uint64_t)&v1004, (unint64_t)v15, 0, 373, (uint64_t)&v1001, v19, v20, v21);
              if ((v1002 & 1) != 0 && (v1002 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v1002 & 0xFFFFFFFF8, v607, v608, v609, v610, v611, v612, v613);
              if ((v1001 & 1) != 0 && (v1001 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v1001 & 0xFFFFFFFF8, v607, v608, v609, v610, v611, v612, v613);
              JSC::DFG::InsertionSet::execute((JSC::DFG::InsertionSet *)&v1004, v559);
              if ((v81 & 1) != 0 && v978)
                WTF::fastFree((unint64_t)v978, v15, v16, v17, v18, v19, v20, v21);
              v49 = v971;
              LODWORD(v53) = v972;
              LODWORD(v59) = v977;
              if ((v999 & 1) != 0 && v979)
                WTF::fastFree((unint64_t)v979, v15, v16, v17, v18, v19, v20, v21);
              goto LABEL_775;
            }
            break;
          }
          v560 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v990 + 56) + 80) + ((unint64_t)v992 >> 2));
          v561 = *v560;
          if ((v561 | 2) == 0x82)
            v561 = v560[1];
          switch(v561)
          {
            case 0:
            case 1:
            case 3:
              if ((v992 & 3) == 1)
                goto LABEL_713;
              goto LABEL_732;
            case 2:
LABEL_713:
              if (v994)
              {
                v581 = *(_QWORD *)(v994 + 24);
                v582 = v980 + (v581 >> 22);
                v583 = *((_QWORD *)v54 + v582);
                if (!v583)
                {
                  v593 = *((_QWORD *)this + 3);
                  v594 = *(_QWORD *)(v593 + 464);
                  *(_QWORD *)(v593 + 464) = v594 + 1;
                  v595 = v594 >> 4;
                  v596 = *(unsigned int *)(v593 + 484);
                  if (v594 >> 4 >= v596)
                  {
                    v680 = WTF::fastMalloc((WTF *)0x400);
                    *(_QWORD *)&v1009 = v680;
                    v681 = *(unsigned int *)(v593 + 484);
                    if ((_DWORD)v681 == *(_DWORD *)(v593 + 480))
                    {
                      v740 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v593 + 472, v681 + 1, (unint64_t)&v1009);
                      v681 = *(unsigned int *)(v593 + 484);
                      *(_QWORD *)(*(_QWORD *)(v593 + 472) + 8 * v681) = *v740;
                    }
                    else
                    {
                      *(_QWORD *)(*(_QWORD *)(v593 + 472) + 8 * v681) = v680;
                    }
                    v596 = (v681 + 1);
                    *(_DWORD *)(v593 + 484) = v596;
                    v594 = *(_QWORD *)(v593 + 464) - 1;
                    v595 = v594 >> 4;
                  }
                  if (v595 >= v596)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983325F4);
                  }
                  v597 = *(_QWORD *)(*(_QWORD *)(v593 + 472) + 8 * v595) + ((v594 & 0xF) << 6);
                  *(_QWORD *)v597 = 0;
                  *(_QWORD *)(v597 + 8) = 0;
                  *(_QWORD *)(v597 + 16) = 0;
                  *(_QWORD *)(v597 + 24) = (v581 >> 22) | 0x200000000;
                  *(_DWORD *)(v597 + 32) = 0x3FFFFFFF;
                  *(_DWORD *)(v597 + 56) = 0;
                  *(_QWORD *)(v597 + 48) = 0;
                  *(_QWORD *)(v597 + 36) = 0;
                  *(_BYTE *)(v597 + 44) = 0;
                  v598 = *(_QWORD *)(v593 + 464) - 1;
                  if (v598 >> 4 >= *(unsigned int *)(v593 + 484))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983325FCLL);
                  }
                  v583 = *(_QWORD *)(*(_QWORD *)(v593 + 472) + 8 * (v598 >> 4)) + ((v598 & 0xF) << 6);
                  *((_QWORD *)v54 + v582) = v583;
                }
                v563 = v999;
                if ((v999 & 1) != 0)
                {
                  v833 = *(_QWORD *)v979;
                  if (v975
                    || (v834 = *(unsigned int *)((v999 & 0xFFFFFFFF8) + 8), (_DWORD)v834 == 0x3FFFFFFF)
                    || (_DWORD)v834 == -1)
                  {
                    v835 = 2;
                  }
                  else if (v834 >> 28)
                  {
                    v954 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v954 = v833;
                    *(_DWORD *)(v954 + 8) = v834;
                    v835 = 1;
                    v833 = v954;
                  }
                  else
                  {
                    v835 = *(_QWORD *)v979;
                    v833 = v834 << 36;
                  }
                  v563 = v833 | v835;
                }
                v564 = v81;
                if ((v81 & 1) != 0)
                {
                  v836 = *(_QWORD *)v978;
                  if ((v81 & 2) != 0
                    || (v837 = *(unsigned int *)((v81 & 0xFFFFFFFF8) + 8), (_DWORD)v837 == 0x3FFFFFFF)
                    || (_DWORD)v837 == -1)
                  {
                    v838 = 2;
                  }
                  else if (v837 >> 28)
                  {
                    v955 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v955 = v836;
                    *(_DWORD *)(v955 + 8) = v837;
                    v838 = 1;
                    v836 = v955;
                  }
                  else
                  {
                    v838 = *(_QWORD *)v978;
                    v836 = v837 << 36;
                  }
                  v564 = v836 | v838;
                }
                v584 = v1004;
                v585 = v563;
                if ((v563 & 1) != 0)
                {
                  v839 = *(_QWORD *)(v563 & 0xFFFFFFFF8);
                  if ((v563 & 2) != 0
                    || (v840 = *(unsigned int *)((v563 & 0xFFFFFFFF8) + 8), (_DWORD)v840 == 0x3FFFFFFF)
                    || (_DWORD)v840 == -1)
                  {
                    v841 = 2;
                  }
                  else if (v840 >> 28)
                  {
                    v956 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v956 = v839;
                    *(_DWORD *)(v956 + 8) = v840;
                    v841 = 1;
                    v839 = v956;
                  }
                  else
                  {
                    v841 = *(_QWORD *)(v563 & 0xFFFFFFFF8);
                    v839 = v840 << 36;
                  }
                  v585 = v839 | v841;
                }
                v586 = v564;
                if ((v564 & 1) != 0)
                {
                  v842 = *(_QWORD *)(v564 & 0xFFFFFFFF8);
                  if ((v564 & 2) != 0
                    || (v843 = *(unsigned int *)((v564 & 0xFFFFFFFF8) + 8), (_DWORD)v843 == 0x3FFFFFFF)
                    || (_DWORD)v843 == -1)
                  {
                    v844 = 2;
                  }
                  else if (v843 >> 28)
                  {
                    v957 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v957 = v842;
                    *(_DWORD *)(v957 + 8) = v843;
                    v844 = 1;
                    v842 = v957;
                  }
                  else
                  {
                    v844 = *(_QWORD *)(v564 & 0xFFFFFFFF8);
                    v842 = v843 << 36;
                  }
                  v586 = v842 | v844;
                }
                v587 = v585;
                if ((v585 & 1) != 0)
                {
                  v845 = *(_QWORD *)(v585 & 0xFFFFFFFF8);
                  if ((v585 & 2) != 0
                    || (v846 = *(unsigned int *)((v585 & 0xFFFFFFFF8) + 8), (_DWORD)v846 == 0x3FFFFFFF)
                    || (_DWORD)v846 == -1)
                  {
                    v847 = 2;
                  }
                  else if (v846 >> 28)
                  {
                    v958 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v958 = v845;
                    *(_DWORD *)(v958 + 8) = v846;
                    v847 = 1;
                    v845 = v958;
                  }
                  else
                  {
                    v847 = *(_QWORD *)(v585 & 0xFFFFFFFF8);
                    v845 = v846 << 36;
                  }
                  v587 = v845 | v847;
                  v54 = v997;
                }
                *(_QWORD *)&v1009 = v587;
                v588 = v586;
                if ((v586 & 1) != 0)
                {
                  v848 = *(_QWORD *)(v586 & 0xFFFFFFFF8);
                  if ((v586 & 2) != 0
                    || (v849 = *(unsigned int *)((v586 & 0xFFFFFFFF8) + 8), (_DWORD)v849 == 0x3FFFFFFF)
                    || (_DWORD)v849 == -1)
                  {
                    v850 = 2;
                  }
                  else if (v849 >> 28)
                  {
                    v959 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v959 = v848;
                    *(_DWORD *)(v959 + 8) = v849;
                    v850 = 1;
                    v848 = v959;
                  }
                  else
                  {
                    v850 = *(_QWORD *)(v586 & 0xFFFFFFFF8);
                    v848 = v849 << 36;
                  }
                  v588 = v848 | v850;
                  v54 = v997;
                }
                *((_QWORD *)&v1009 + 1) = v588;
                v1010 = v995;
                v1012[0] = v583;
                LOWORD(v1011) = 29;
                v589 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>((uint64_t)v584 + 1032, (__int16 *)&v1011, (uint64_t)&v1009, v1012, v18, v19, v20, v21);
                if ((BYTE8(v1009) & 1) != 0 && (*((_QWORD *)&v1009 + 1) & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(*((_QWORD *)&v1009 + 1) & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                if ((v1009 & 1) != 0 && (v1009 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v1009 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                *(_QWORD *)&v1009 = v998;
                *((_QWORD *)&v1009 + 1) = v589;
                v590 = HIDWORD(v1006);
                if (HIDWORD(v1006) && *((_QWORD *)v1005 + 2 * HIDWORD(v1006) - 2) > (unint64_t)v998)
                {
                  JSC::DFG::InsertionSet::insertSlow((uint64_t)&v1004, (unint64_t *)&v1009, v16, v17, v18, v19, v20, v21);
                }
                else
                {
                  if (HIDWORD(v1006) == (_DWORD)v1006)
                  {
                    v709 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1005, (void *)(HIDWORD(v1006) + 1), (unint64_t)&v1009, v17, v18, v19, v20, v21);
                    v590 = HIDWORD(v1006);
                    v591 = v1005;
                    v592 = *v709;
                  }
                  else
                  {
                    v591 = v1005;
                    v592 = v1009;
                  }
                  *((_OWORD *)v591 + v590) = v592;
                  ++HIDWORD(v1006);
                }
                if ((v586 & 1) != 0 && (v586 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v586 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                if ((v585 & 1) != 0)
                {
                  v796 = v585 & 0xFFFFFFFF8;
                  if ((v585 & 0xFFFFFFFF8) != 0)
                  {
LABEL_1273:
                    WTF::fastFree(v796, v15, v16, v17, v18, v19, v20, v21);
                    goto LABEL_730;
                  }
                }
                goto LABEL_730;
              }
              v562 = *((_QWORD *)v54 + v980);
              if (v562)
                goto LABEL_715;
              v577 = *((_QWORD *)this + 3);
              v435 = *(_QWORD *)(v577 + 464);
              *(_QWORD *)(v577 + 464) = v435 + 1;
              v436 = v435 >> 4;
              v434 = *(unsigned int *)(v577 + 484);
              if (v435 >> 4 < v434)
                goto LABEL_738;
              v599 = *(_QWORD *)(StatusReg + 752);
              if (!v599)
                goto LABEL_1610;
              v600 = dword_1ECF548A0;
              if (*(_DWORD *)(v599 + 8052) <= dword_1ECF548A0)
                goto LABEL_1610;
              v601 = v599 + 8 * dword_1ECF548A0;
              v602 = v601 + 8064;
              *(_BYTE *)(v601 + 8064) = 1;
              v603 = *(unsigned int *)(v601 + 8080);
              if ((_DWORD)v603)
              {
                *(_DWORD *)(v602 + 16) = v603 - *(_DWORD *)(v602 + 20);
                v604 = *(_QWORD *)(v602 + 8) - v603;
              }
              else
              {
                v675 = *(_QWORD *)(v602 + 40);
                v676 = *(_QWORD *)(v602 + 24);
                if (!v675)
                {
                  if (*(_BYTE *)(v602 + 5) == 6)
                  {
                    v889 = *(unsigned int *)(v602 + 32);
                    v890 = *(_DWORD *)(v602 + 36);
                    if (v889 < v890)
                    {
                      *(_QWORD *)(v602 + 8 * v889 + 56) = 0;
                      v891 = (unint64_t *)(v599 + 8128 + 8 * v600 + 8 * v889);
                      v892 = v890 - 1 - v889;
                      while (v892)
                      {
                        v676 += 1024;
                        v894 = *v891++;
                        v893 = v894;
                        LODWORD(v889) = v889 + 1;
                        --v892;
                        if (v894)
                        {
                          v675 = __rbit64(v893);
                          *(_DWORD *)(v602 + 32) = v889;
                          *(_QWORD *)(v602 + 24) = v676;
                          v54 = v997;
                          v559 = v981;
                          goto LABEL_915;
                        }
                      }
                      *(_DWORD *)(v602 + 32) = v890;
                      v54 = v997;
                      v559 = v981;
                    }
                  }
                  *(_BYTE *)v602 = 0;
LABEL_1610:
                  v604 = bmalloc_allocate_casual(1024, 1);
LABEL_566:
                  *(_QWORD *)&v1009 = v604;
                  v437 = *(unsigned int *)(v577 + 484);
                  if ((_DWORD)v437 == *(_DWORD *)(v577 + 480))
                  {
                    v682 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v577 + 472, v437 + 1, (unint64_t)&v1009);
                    v437 = *(unsigned int *)(v577 + 484);
                    *(_QWORD *)(*(_QWORD *)(v577 + 472) + 8 * v437) = *v682;
                  }
                  else
                  {
                    *(_QWORD *)(*(_QWORD *)(v577 + 472) + 8 * v437) = v604;
                  }
                  v434 = (v437 + 1);
                  *(_DWORD *)(v577 + 484) = v434;
                  v435 = *(_QWORD *)(v577 + 464) - 1;
                  v436 = v435 >> 4;
LABEL_738:
                  if (v436 >= v434)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983325E4);
                  }
                  v578 = *(_QWORD *)(*(_QWORD *)(v577 + 472) + 8 * v436) + ((v435 & 0xF) << 6);
                  *(_QWORD *)v578 = 0;
                  *(_QWORD *)(v578 + 8) = 0;
                  *(_QWORD *)(v578 + 16) = 0;
                  *(_QWORD *)(v578 + 24) = 0x200000000;
                  *(_DWORD *)(v578 + 32) = 0x3FFFFFFF;
                  *(_DWORD *)(v578 + 56) = 0;
                  *(_QWORD *)(v578 + 48) = 0;
                  *(_QWORD *)(v578 + 36) = 0;
                  *(_BYTE *)(v578 + 44) = 0;
                  v579 = *(_QWORD *)(v577 + 464) - 1;
                  if (v579 >> 4 >= *(unsigned int *)(v577 + 484))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983325ECLL);
                  }
                  v562 = *(_QWORD *)(*(_QWORD *)(v577 + 472) + 8 * (v579 >> 4)) + ((v579 & 0xF) << 6);
                  *((_QWORD *)v54 + v980) = v562;
LABEL_715:
                  v563 = v999;
                  if ((v999 & 1) != 0)
                  {
                    v778 = *(_QWORD *)v979;
                    if (v975
                      || (v779 = *(unsigned int *)((v999 & 0xFFFFFFFF8) + 8), (_DWORD)v779 == 0x3FFFFFFF)
                      || (_DWORD)v779 == -1)
                    {
                      v780 = 2;
                    }
                    else if (v779 >> 28)
                    {
                      v948 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v948 = v778;
                      *(_DWORD *)(v948 + 8) = v779;
                      v780 = 1;
                      v778 = v948;
                    }
                    else
                    {
                      v780 = *(_QWORD *)v979;
                      v778 = v779 << 36;
                    }
                    v563 = v778 | v780;
                  }
                  v564 = v81;
                  if ((v81 & 1) != 0)
                  {
                    v781 = *(_QWORD *)v978;
                    if ((v81 & 2) != 0
                      || (v782 = *(unsigned int *)((v81 & 0xFFFFFFFF8) + 8), (_DWORD)v782 == 0x3FFFFFFF)
                      || (_DWORD)v782 == -1)
                    {
                      v783 = 2;
                    }
                    else if (v782 >> 28)
                    {
                      v949 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v949 = v781;
                      *(_DWORD *)(v949 + 8) = v782;
                      v783 = 1;
                      v781 = v949;
                    }
                    else
                    {
                      v783 = *(_QWORD *)v978;
                      v781 = v782 << 36;
                    }
                    v564 = v781 | v783;
                  }
                  v565 = v1004;
                  v566 = v563;
                  if ((v563 & 1) != 0)
                  {
                    v784 = *(_QWORD *)(v563 & 0xFFFFFFFF8);
                    if ((v563 & 2) != 0
                      || (v785 = *(unsigned int *)((v563 & 0xFFFFFFFF8) + 8), (_DWORD)v785 == 0x3FFFFFFF)
                      || (_DWORD)v785 == -1)
                    {
                      v786 = 2;
                    }
                    else if (v785 >> 28)
                    {
                      v950 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v950 = v784;
                      *(_DWORD *)(v950 + 8) = v785;
                      v786 = 1;
                      v784 = v950;
                    }
                    else
                    {
                      v786 = *(_QWORD *)(v563 & 0xFFFFFFFF8);
                      v784 = v785 << 36;
                    }
                    v566 = v784 | v786;
                  }
                  v567 = v564;
                  if ((v564 & 1) != 0)
                  {
                    v787 = *(_QWORD *)(v564 & 0xFFFFFFFF8);
                    if ((v564 & 2) != 0
                      || (v788 = *(unsigned int *)((v564 & 0xFFFFFFFF8) + 8), (_DWORD)v788 == 0x3FFFFFFF)
                      || (_DWORD)v788 == -1)
                    {
                      v789 = 2;
                    }
                    else if (v788 >> 28)
                    {
                      v951 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v951 = v787;
                      *(_DWORD *)(v951 + 8) = v788;
                      v789 = 1;
                      v787 = v951;
                    }
                    else
                    {
                      v789 = *(_QWORD *)(v564 & 0xFFFFFFFF8);
                      v787 = v788 << 36;
                    }
                    v567 = v787 | v789;
                  }
                  v568 = v566;
                  if ((v566 & 1) != 0)
                  {
                    v790 = *(_QWORD *)(v566 & 0xFFFFFFFF8);
                    if ((v566 & 2) != 0
                      || (v791 = *(unsigned int *)((v566 & 0xFFFFFFFF8) + 8), (_DWORD)v791 == 0x3FFFFFFF)
                      || (_DWORD)v791 == -1)
                    {
                      v792 = 2;
                    }
                    else if (v791 >> 28)
                    {
                      v952 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v952 = v790;
                      *(_DWORD *)(v952 + 8) = v791;
                      v792 = 1;
                      v790 = v952;
                    }
                    else
                    {
                      v792 = *(_QWORD *)(v566 & 0xFFFFFFFF8);
                      v790 = v791 << 36;
                    }
                    v568 = v790 | v792;
                    v54 = v997;
                  }
                  *(_QWORD *)&v1009 = v568;
                  v569 = v567;
                  if ((v567 & 1) != 0)
                  {
                    v793 = *(_QWORD *)(v567 & 0xFFFFFFFF8);
                    if ((v567 & 2) != 0
                      || (v794 = *(unsigned int *)((v567 & 0xFFFFFFFF8) + 8), (_DWORD)v794 == 0x3FFFFFFF)
                      || (_DWORD)v794 == -1)
                    {
                      v795 = 2;
                    }
                    else if (v794 >> 28)
                    {
                      v953 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v953 = v793;
                      *(_DWORD *)(v953 + 8) = v794;
                      v795 = 1;
                      v793 = v953;
                    }
                    else
                    {
                      v795 = *(_QWORD *)(v567 & 0xFFFFFFFF8);
                      v793 = v794 << 36;
                    }
                    v569 = v793 | v795;
                    v54 = v997;
                  }
                  *((_QWORD *)&v1009 + 1) = v569;
                  v1010 = v995;
                  v1012[0] = v562;
                  LOWORD(v1011) = 29;
                  v570 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>((uint64_t)v565 + 1032, (__int16 *)&v1011, (uint64_t)&v1009, v1012, v18, v19, v20, v21);
                  if ((BYTE8(v1009) & 1) != 0 && (*((_QWORD *)&v1009 + 1) & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(*((_QWORD *)&v1009 + 1) & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                  if ((v1009 & 1) != 0 && (v1009 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v1009 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                  *(_QWORD *)&v1009 = v998;
                  *((_QWORD *)&v1009 + 1) = v570;
                  v571 = HIDWORD(v1006);
                  if (HIDWORD(v1006) && *((_QWORD *)v1005 + 2 * HIDWORD(v1006) - 2) > (unint64_t)v998)
                  {
                    JSC::DFG::InsertionSet::insertSlow((uint64_t)&v1004, (unint64_t *)&v1009, v16, v17, v18, v19, v20, v21);
                  }
                  else
                  {
                    if (HIDWORD(v1006) == (_DWORD)v1006)
                    {
                      v669 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1005, (void *)(HIDWORD(v1006) + 1), (unint64_t)&v1009, v17, v18, v19, v20, v21);
                      v571 = HIDWORD(v1006);
                      v572 = v1005;
                      v573 = *v669;
                    }
                    else
                    {
                      v572 = v1005;
                      v573 = v1009;
                    }
                    *((_OWORD *)v572 + v571) = v573;
                    ++HIDWORD(v1006);
                  }
                  if ((v567 & 1) != 0 && (v567 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v567 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                  if ((v566 & 1) != 0)
                  {
                    v796 = v566 & 0xFFFFFFFF8;
                    if ((v566 & 0xFFFFFFFF8) != 0)
                      goto LABEL_1273;
                  }
LABEL_730:
                  if ((v564 & 1) != 0 && (v564 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v564 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                  if ((v563 & 1) != 0 && (v563 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v563 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
                  goto LABEL_732;
                }
LABEL_915:
                v677 = __clz(v675);
                *(_QWORD *)(v602 + 40) = v675 & ~(0x8000000000000000 >> v677);
                v604 = v676 + 16 * v677;
              }
              *(_BYTE *)v602 = 0;
              goto LABEL_566;
            case 4:
              goto LABEL_732;
            default:
              __break(0xC471u);
              JUMPOUT(0x1983312DCLL);
          }
        }
LABEL_81:
        if (v54)
LABEL_82:
          WTF::fastFree((unint64_t)v54, v15, v16, v17, v18, v19, v20, v21);
        v56 = v1005;
        if (v1007 != (_BYTE *)v1005 && v1005 != 0)
        {
          v1005 = 0;
          LODWORD(v1006) = 0;
          WTF::fastFree((unint64_t)v56, v15, v16, v17, v18, v19, v20, v21);
        }
        if ((v1008 & 0x8000000000000000) == 0)
          WTF::fastFree(2 * v1008, v15, v16, v17, v18, v19, v20, v21);
        return;
      }
    }
  }
  if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
  {
    v901 = *((_QWORD *)this + 3);
    v902 = *(unsigned int *)(v901 + 60);
    if ((_DWORD)v902)
    {
      v903 = 0;
      v904 = *(_QWORD *)(v901 + 48);
      while (!*(_QWORD *)(v904 + 8 * v903))
      {
        if (v902 == ++v903)
          return;
      }
      if ((_DWORD)v902 != (_DWORD)v903)
      {
        v903 = v903;
        do
        {
          if (v902 <= v903)
          {
            __break(0xC471u);
            JUMPOUT(0x198332668);
          }
          v911 = *(_QWORD *)(v904 + 8 * v903);
          v912 = *(unsigned int *)(v911 + 220);
          if ((_DWORD)v912)
          {
            v913 = *(_QWORD *)(v911 + 208);
            v914 = 8 * v912;
            do
            {
              if (*(_WORD *)(*(_QWORD *)v913 + 18) == 379)
              {
                __break(0xC471u);
                JUMPOUT(0x198332060);
              }
              v913 += 8;
              v914 -= 8;
            }
            while (v914);
          }
          if (v902 > ++v903)
          {
            while (!*(_QWORD *)(v904 + 8 * v903))
            {
              if (v902 == ++v903)
                return;
            }
            v903 = v903;
          }
        }
        while (v902 != v903);
      }
    }
  }
}

uint64_t JSC::DFG::Node::SuccessorsIterable::end(JSC::DFG::Node::SuccessorsIterable *this)
{
  unsigned int v1;
  uint64_t result;

  v1 = 1;
  switch(*((_WORD *)this + 9))
  {
    case 0x16C:
      goto LABEL_4;
    case 0x16D:
      result = 2;
      break;
    case 0x16E:
      result = (*(_DWORD *)(*((_QWORD *)this + 9) + 12) + 1);
      break;
    case 0x16F:
      result = *(unsigned int *)(*((_QWORD *)this + 9) + 12);
      break;
    default:
      v1 = 0;
LABEL_4:
      result = v1;
      break;
  }
  return result;
}

uint64_t JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  __int128 v62;
  __int16 v63;
  __int16 v64;

  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)a5;
  if ((*(_QWORD *)a5 & 1) != 0)
  {
    v32 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v33 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v33 != 0x3FFFFFFF)
        ? (v34 = (_DWORD)v33 == -1)
        : (v34 = 1),
          v34))
    {
      v35 = 2;
    }
    else if (v33 >> 28)
    {
      v58 = a4;
      v54 = a5;
      v48 = WTF::fastMalloc((WTF *)0x10);
      a5 = v54;
      a4 = v58;
      *(_QWORD *)v48 = v32;
      *(_DWORD *)(v48 + 8) = v33;
      v35 = 1;
      v32 = v48;
    }
    else
    {
      v35 = v32;
      v32 = v33 << 36;
    }
    v12 = v32 | v35;
  }
  v13 = *(_QWORD *)(a5 + 8);
  if ((v13 & 1) != 0)
  {
    v36 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v37 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v37 != 0x3FFFFFFF)
        ? (v38 = (_DWORD)v37 == -1)
        : (v38 = 1),
          v38))
    {
      v39 = 2;
    }
    else if (v37 >> 28)
    {
      v49 = v36;
      v59 = a4;
      v55 = a5;
      v36 = WTF::fastMalloc((WTF *)0x10);
      a5 = v55;
      a4 = v59;
      *(_QWORD *)v36 = v49;
      *(_DWORD *)(v36 + 8) = v37;
      v39 = 1;
    }
    else
    {
      v39 = v36;
      v36 = v37 << 36;
    }
    v13 = v36 | v39;
  }
  v14 = *(_WORD *)(a5 + 16);
  v15 = v12;
  if ((v12 & 1) != 0)
  {
    v40 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v41 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v41 != 0x3FFFFFFF)
        ? (v42 = (_DWORD)v41 == -1)
        : (v42 = 1),
          v42))
    {
      v43 = 2;
    }
    else if (v41 >> 28)
    {
      v50 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v60 = a4;
      v56 = *(_WORD *)(a5 + 16);
      v51 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8);
      v40 = WTF::fastMalloc((WTF *)0x10);
      v14 = v56;
      a4 = v60;
      *(_QWORD *)v40 = v50;
      *(_DWORD *)(v40 + 8) = v51;
      v43 = 1;
    }
    else
    {
      v43 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v40 = v41 << 36;
    }
    v15 = v40 | v43;
  }
  *(_QWORD *)&v62 = v15;
  v16 = v13;
  if ((v13 & 1) != 0)
  {
    v44 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v45 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v45 != 0x3FFFFFFF)
        ? (v46 = (_DWORD)v45 == -1)
        : (v46 = 1),
          v46))
    {
      v47 = 2;
    }
    else if (v45 >> 28)
    {
      v52 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      v61 = a4;
      v57 = v14;
      v53 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8);
      v44 = WTF::fastMalloc((WTF *)0x10);
      v14 = v57;
      a4 = v61;
      *(_QWORD *)v44 = v52;
      *(_DWORD *)(v44 + 8) = v53;
      v47 = 1;
    }
    else
    {
      v47 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      v44 = v45 << 36;
    }
    v16 = v44 | v47;
  }
  *((_QWORD *)&v62 + 1) = v16;
  v63 = v14;
  v64 = a4;
  v24 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &>(v11 + 1032, &v64, (uint64_t)&v62, a4, a5, a6, a7, a8);
  if ((BYTE8(v62) & 1) != 0 && (*((_QWORD *)&v62 + 1) & 0xFFFFFFFF8) != 0)
    WTF::fastFree(*((_QWORD *)&v62 + 1) & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  if ((v62 & 1) != 0 && (v62 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v62 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(v24 + 64) |= a3;
  *(_QWORD *)&v62 = a2;
  *((_QWORD *)&v62 + 1) = v24;
  v25 = (_QWORD *)(a1 + 8);
  v26 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v26 && *(_QWORD *)(*v25 + 16 * v26 - 16) > a2)
  {
    JSC::DFG::InsertionSet::insertSlow(a1, (unint64_t *)&v62, v18, v19, v20, v21, v22, v23);
  }
  else
  {
    if ((_DWORD)v26 == *(_DWORD *)(a1 + 16))
    {
      v31 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, (void *)(v26 + 1), (unint64_t)&v62, v19, v20, v21, v22, v23);
      v26 = *(unsigned int *)(a1 + 20);
      v27 = *(_QWORD *)(a1 + 8);
      v28 = *v31;
    }
    else
    {
      v27 = *(_QWORD *)(a1 + 8);
      v28 = v62;
    }
    *(_OWORD *)(v27 + 16 * v26) = v28;
    ++*(_DWORD *)(a1 + 20);
  }
  v29 = *((_QWORD *)&v62 + 1);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  return v29;
}

uint64_t JSC::DFG::ByteCodeParser::parse(JSC::DFG::ByteCodeParser *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  WTF *v19;
  uint64_t v20;
  uint64_t v22;
  unsigned __int8 *v23;
  WTF *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  int v48;
  char v49;
  __int16 v50;
  _BYTE v51[88];
  uint64_t v52;
  uint64_t v53;

  JSC::DFG::ByteCodeParser::InlineStackEntry::InlineStackEntry((uint64_t)v51, this, *((_QWORD *)this + 1), *((_QWORD *)this + 2), 0, 0x3FFFFFFFLL, 0x3FFFFFFFLL, *(unsigned int *)(*((_QWORD *)this + 1) + 28), 0, 0);
  JSC::DFG::ByteCodeParser::parseCodeBlock(this, v2, v3, v4, v5, v6, v7, v8);
  JSC::DFG::ByteCodeParser::linkBlocks((uint64_t)&v52, (uint64_t)&v53);
  if (!HIBYTE(word_1ECF4C328))
    goto LABEL_14;
  v50 = 256;
  JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v45, *((_QWORD *)this + 3), (uint64_t)&v50, 0);
  if (!v49)
    goto LABEL_48;
  v16 = *(_QWORD *)(v46 + 48);
  if (v16)
  {
    if (*(uint64_t **)(v16 + 64) != &v45)
    {
      __break(0xC471u);
      JUMPOUT(0x198332CD8);
    }
    v17 = (unsigned __int8 *)(v16 + 46);
    if (__ldaxr((unsigned __int8 *)(v16 + 46)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_8;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v17);
LABEL_8:
    *(_QWORD *)(v16 + 64) = 0;
  }
  v19 = v47;
  if (v47)
  {
    v47 = 0;
    v48 = 0;
    WTF::fastFree((unint64_t)v19, v9, v10, v11, v12, v13, v14, v15);
  }
  if ((_BYTE)v50)
    goto LABEL_12;
LABEL_14:
  v45 = *((_QWORD *)this + 3);
  JSC::DFG::LiveCatchVariablePreservationPhase::run((JSC::DFG::LiveCatchVariablePreservationPhase *)&v45, v9, v10, v11, v12, v13, v14, v15);
  if (!HIBYTE(word_1ECF4C328))
    goto LABEL_25;
  v50 = 256;
  JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v45, *((_QWORD *)this + 3), (uint64_t)&v50, 0);
  if (!v49)
  {
    __break(0xC471u);
    JUMPOUT(0x198332CF8);
  }
  v22 = *(_QWORD *)(v46 + 48);
  if (v22)
  {
    if (*(uint64_t **)(v22 + 64) != &v45)
    {
      __break(0xC471u);
      JUMPOUT(0x198332D18);
    }
    v23 = (unsigned __int8 *)(v22 + 46);
    if (__ldaxr((unsigned __int8 *)(v22 + 46)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v23))
    {
      goto LABEL_21;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v23);
LABEL_21:
    *(_QWORD *)(v22 + 64) = 0;
  }
  v25 = v47;
  if (v47)
  {
    v47 = 0;
    v48 = 0;
    WTF::fastFree((unint64_t)v25, v9, v10, v11, v12, v13, v14, v15);
  }
  if ((_BYTE)v50)
    goto LABEL_12;
LABEL_25:
  JSC::DFG::runPhase<JSC::DFG::BackwardsPropagationPhase>(*((_QWORD *)this + 3));
  if (!HIBYTE(word_1ECF4C328))
  {
LABEL_36:
    JSC::DFG::ByteCodeParser::pruneUnreachableNodes(this, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    JSC::DFG::Graph::determineReachability(*((JSC::DFG::Graph **)this + 3), v30, v31, v32, v33, v34, v35, v36);
    JSC::DFG::Graph::killUnreachableBlocks(*((JSC::DFG::Graph **)this + 3), v37, v38, v39, v40, v41, v42, v43);
    v44 = (_DWORD *)*((_QWORD *)this + 3);
    v44[212] = *((_DWORD *)this + 66);
    v44[213] = *((_DWORD *)this + 65);
    v44[215] = *((_DWORD *)this + 67);
    v20 = 1;
    goto LABEL_13;
  }
  v50 = 256;
  JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v45, *((_QWORD *)this + 3), (uint64_t)&v50, 0);
  if (!v49)
  {
    __break(0xC471u);
    JUMPOUT(0x198332D38);
  }
  v26 = *(_QWORD *)(v46 + 48);
  if (!v26)
    goto LABEL_33;
  if (*(uint64_t **)(v26 + 64) != &v45)
  {
LABEL_48:
    __break(0xC471u);
    JUMPOUT(0x198332CB8);
  }
  v27 = (unsigned __int8 *)(v26 + 46);
  if (__ldaxr((unsigned __int8 *)(v26 + 46)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v27))
  {
    goto LABEL_32;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v27);
LABEL_32:
  *(_QWORD *)(v26 + 64) = 0;
LABEL_33:
  v29 = v47;
  if (v47)
  {
    v47 = 0;
    v48 = 0;
    WTF::fastFree((unint64_t)v29, v9, v10, v11, v12, v13, v14, v15);
  }
  if (!(_BYTE)v50)
    goto LABEL_36;
LABEL_12:
  v20 = 0;
LABEL_13:
  JSC::DFG::ByteCodeParser::InlineStackEntry::~InlineStackEntry((JSC::DFG::ByteCodeParser::InlineStackEntry *)v51, v9, v10, v11, v12, v13, v14, v15);
  return v20;
}

uint64_t JSC::DFG::parse(JSC::DFG *this, JSC::DFG::Graph *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v36;
  __int128 v37;
  JSC::DFG *v38;
  uint64_t v39;
  int v40;
  int64x2_t v41;
  char v42;
  __int128 *v43;
  __int128 *v44;
  __int128 *v45;
  __int128 *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD v49[17];
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD v57[10];
  _QWORD v58[9];
  char v59;
  char v60;

  v36 = (uint64_t *)*((_QWORD *)this + 2);
  v37 = *((_OWORD *)this + 2);
  v38 = this;
  v39 = 0;
  v40 = 0;
  v41 = vdupq_n_s64(2uLL);
  v42 = 0;
  v43 = JSC::DFG::Graph::freeze((uint64_t)this, 0xAuLL, a3, a4, a5, a6, a7, a8);
  v44 = JSC::DFG::Graph::freeze((uint64_t)this, 2uLL, v9, v10, v11, v12, v13, v14);
  v45 = JSC::DFG::Graph::freeze((uint64_t)this, 0x7FFA000000000000uLL, v15, v16, v17, v18, v19, v20);
  v46 = JSC::DFG::Graph::freeze((uint64_t)this, 0xFFFE000000000001, v21, v22, v23, v24, v25, v26);
  v47 = v49;
  v48 = 16;
  v49[16] = 0;
  v50 = *(_DWORD *)(v37 + 28);
  v51 = *(_DWORD *)(v37 + 20);
  v52 = (2 * *(unsigned __int8 *)(*(_QWORD *)(v37 + 56) + 30)) & 4;
  v53 = 0;
  v54 = 0;
  v55 = v57;
  v56 = 8;
  v57[8] = v58;
  v57[9] = 2;
  v58[8] = 0;
  v59 = *((_BYTE *)this + 960);
  v60 = 0;
  v27 = JSC::DFG::ByteCodeParser::parse((JSC::DFG::ByteCodeParser *)&v36);
  JSC::DFG::ByteCodeParser::~ByteCodeParser(&v36, v28, v29, v30, v31, v32, v33, v34);
  return v27;
}

uint64_t JSC::DFG::performCFA(JSC::DFG **this, JSC::DFG::Graph *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::DFG *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::DFG *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  JSC::DFG *v34;
  int v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  int *v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int *v74;
  BOOL v75;
  unint64_t v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int *v91;
  uint64_t v92;
  unsigned int v93;
  _DWORD *v94;
  unsigned int *v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  BOOL v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF *v125;
  JSC::DFG::PhiChildren *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WTF *v134;
  WTF *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unsigned int v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  char v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  WTF *v158;
  JSC::DFG::Graph *v159;
  WTF::PrintStream *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  __int16 v167;
  JSC::DFG *v168;
  __int128 v169;
  char v170;
  WTF *v171;
  JSC::DFG *v172[2];
  uint64_t v173;
  int v174;
  unsigned int v175;
  uint64_t v176;
  void *v177;
  int v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  int v184;
  JSC::DFG *v185;
  JSC::DFG *v186;
  JSC::DFG *v187;
  JSC::DFG **v188;
  WTF *v189;
  uint64_t v190;
  unsigned __int8 v191;
  char v192;
  int v193;
  _OWORD v194[2];
  double v195;
  char v196;
  _BYTE v197[24];
  uint64_t v198;
  uint64_t v199[2];

  v164 = -1;
  v165 = -1;
  v166 = 0;
  v167 = 256;
  v168 = (JSC::DFG *)this;
  *(_QWORD *)&v169 = "control flow analysis";
  *((_QWORD *)&v169 + 1) = 22;
  v170 = 0;
  v171 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v164);
  v10 = this[123];
  v172[0] = (JSC::DFG *)this;
  v172[1] = v10;
  if (!*((_DWORD *)this + 15))
  {
    __break(0xC471u);
    JUMPOUT(0x198333DA0);
  }
  v11 = *(_QWORD *)this[6];
  memset(v194, 0, sizeof(v194));
  v12 = *(unsigned int *)(v11 + 84);
  v173 = 0;
  v174 = 0;
  v175 = v12;
  if ((_DWORD)v12)
  {
    if (v12 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x198333DA8);
    }
    v13 = WTF::fastMalloc((WTF *)(32 * v12));
    v174 = v12;
    v173 = v13;
    if (v175)
    {
      v14 = v13 + 32 * v175;
      do
      {
        *(_QWORD *)v13 = 0;
        *(_OWORD *)(v13 + 8) = *(_OWORD *)((char *)v194 + 8);
        *(_QWORD *)(v13 + 24) = *((_QWORD *)&v194[1] + 1);
        v13 += 32;
      }
      while (v13 != v14);
    }
  }
  v176 = *(_QWORD *)(v11 + 88);
  v15 = *((unsigned int *)this + 77);
  v177 = 0;
  v178 = 0;
  v179 = v15;
  if ((_DWORD)v15)
  {
    if (v15 >> 27)
    {
LABEL_257:
      __break(0xC471u);
      JUMPOUT(0x198333D40);
    }
    v16 = (void *)WTF::fastMalloc((WTF *)(32 * v15));
    v178 = v15;
    v177 = v16;
    bzero(v16, 32 * v179);
  }
  v183 = 0;
  v184 = 0;
  v181 = 0;
  v182 = 0;
  v180 = 0;
  v185 = this[4];
  v186 = (JSC::DFG *)this;
  v187 = this[2];
  v188 = v172;
  v189 = 0;
  if (*((_DWORD *)this + 236) == 2)
  {
    v127 = (JSC::DFG::PhiChildren *)WTF::fastMalloc((WTF *)8);
    v134 = JSC::DFG::PhiChildren::PhiChildren(v127, (JSC::DFG::Graph *)this, v128, v129, v130, v131, v132, v133);
    v135 = v189;
    v189 = v134;
    if (v135)
    {
      v136 = *(_QWORD *)v135;
      if (*(_QWORD *)v135)
      {
        v137 = *(unsigned int *)(v136 - 4);
        if ((_DWORD)v137)
        {
          v138 = v136 + 24;
          do
          {
            if (*(_QWORD *)(v138 - 24) != -1)
            {
              v139 = *(_QWORD *)(v138 - 16);
              if (v138 != v139 && v139 != 0)
              {
                *(_QWORD *)(v138 - 16) = 0;
                *(_DWORD *)(v138 - 8) = 0;
                WTF::fastFree(v139, v3, v4, v5, v6, v7, v8, v9);
              }
            }
            v138 += 48;
            --v137;
          }
          while (v137);
        }
        WTF::fastFree(v136 - 16, v3, v4, v5, v6, v7, v8, v9);
      }
      WTF::fastFree((unint64_t)v135, v3, v4, v5, v6, v7, v8, v9);
    }
  }
  v190 = 0x8000000000000000;
  v17 = byte_1ECF4C342;
  v191 = byte_1ECF4C342;
  *(_QWORD *)&v194[0] = "DFG";
  *((_QWORD *)&v194[0] + 1) = 4;
  v194[1] = v169;
  v195 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v146 = mach_absolute_time();
    v148 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v148 != -1)
    {
      *(_QWORD *)v197 = &v196;
      v199[0] = (uint64_t)v197;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v199, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v147) = dword_1ECF4400C;
    v195 = (double)(v146 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v147 * 1000000000.0);
    v17 = v191;
  }
  v193 = 0;
  if (v17)
  {
    v157 = (*(_DWORD *)(*((_QWORD *)v168 + 3) + 16) & 0xFFFFFFFE) == 4
         ? byte_1ECF4C325
         : byte_1ECF4C324;
    if (!(byte_1ECF4C323 | v157))
    {
      v158 = (WTF *)WTF::dataLog<char [16]>("Graph before CFA:\n");
      v159 = v168;
      v160 = (WTF::PrintStream *)WTF::dataFile(v158);
      JSC::DFG::Graph::dump(v159, v160, 0);
    }
  }
  JSC::DFG::InPlaceAbstractState::initialize(v172, v3, v4, v5, v6, v7, v8, v9);
  v25 = v168;
  if (*((_DWORD *)v168 + 236) != 2)
  {
    if (v191)
    {
      WTF::dataLog<char [16]>("   Widening state at OSR entry block.\n");
      v25 = v168;
    }
    v26 = *((_DWORD *)v25 + 15);
    if (v26)
    {
      v27 = v26 - 1;
      v28 = 8 * (v26 - 1);
      do
      {
        if (*((_DWORD *)v168 + 15) <= v27)
        {
          __break(0xC471u);
          JUMPOUT(0x198333D50);
        }
        v29 = *(_QWORD *)(*((_QWORD *)v168 + 6) + v28);
        if (v29 && *(_BYTE *)(v29 + 19) && *(_DWORD *)(v29 + 4) == *(_DWORD *)(*((_QWORD *)v168 + 3) + 108))
        {
          v30 = v190;
          if (v190 < 0)
            v31 = 63;
          else
            v31 = *(_QWORD *)(2 * v190);
          v32 = *(unsigned int *)(v29 + 8);
          if (v31 <= v32)
          {
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v190, v32 + 1, 0);
            v30 = v190;
          }
          v33 = (uint64_t *)(2 * v30 + 8);
          if (v30 < 0)
            v33 = &v190;
          *(uint64_t *)((char *)v33 + ((v32 >> 3) & 0x1FFFFFF8)) |= 1 << v32;
        }
        v28 -= 8;
        --v27;
      }
      while (v27 != -1);
    }
  }
  do
  {
    v192 = 0;
    JSC::DFG::CFAPhase::performForwardCFA((JSC::DFG::CFAPhase *)&v164, (char *)v18, v19, v20, v21, v22, v23, v24);
  }
  while (v192);
  v34 = v168;
  if (*((_DWORD *)v168 + 236) != 2)
  {
    v35 = *((_DWORD *)v168 + 15);
    if (v35)
    {
      v36 = 0;
      v37 = v35 - 1;
      v38 = 8 * (v35 - 1);
      do
      {
        if (*((_DWORD *)v168 + 15) <= v37)
          goto LABEL_257;
        v18 = *(_QWORD *)(*((_QWORD *)v168 + 6) + v38);
        if (v18)
        {
          v39 = (_QWORD *)(2 * v190);
          v40 = v190 < 0 ? 63 : *v39;
          v41 = *(unsigned int *)(v18 + 8);
          if (v40 > v41)
          {
            v42 = v39 + 1;
            v43 = v190 >= 0 ? v42 : &v190;
            v44 = (v41 >> 3) & 0x1FFFFFF8;
            v45 = 1 << v41;
            v46 = *(uint64_t *)((char *)v43 + v44);
            *(uint64_t *)((char *)v43 + v44) = v46 & ~v45;
            if ((v46 & v45) != 0)
            {
              v152 = JSC::DFG::CFAPhase::injectOSR((JSC::DFG::CFAPhase *)&v164, (JSC::DFG::BasicBlock *)v18, v19, v20, v21, v22, v23, v24);
              v36 = v192 | v152;
              v192 |= v152;
            }
          }
        }
        v38 -= 8;
        --v37;
      }
      while (v37 != -1);
      if (v36)
      {
        do
        {
          v192 = 0;
          JSC::DFG::CFAPhase::performForwardCFA((JSC::DFG::CFAPhase *)&v164, (char *)v18, v19, v20, v21, v22, v23, v24);
        }
        while (v192);
      }
    }
    v34 = v168;
    v47 = *((unsigned int *)v168 + 15);
    if ((_DWORD)v47)
    {
      do
      {
        if (*((_DWORD *)v168 + 15) <= --v47)
        {
          __break(0xC471u);
          JUMPOUT(0x198333D48);
        }
        v48 = *(_QWORD *)(*((_QWORD *)v168 + 6) + 8 * v47);
        if (v48)
        {
          *(_BYTE *)(v48 + 18) &= *(_BYTE *)(v48 + 15);
          v49 = *(_DWORD *)(v48 + 180);
          while (v49)
          {
            --v49;
            v50 = *(_QWORD *)(v48 + 120);
            v51 = (uint64_t *)(v50 + 32 * v49);
            *(_QWORD *)v197 = 0;
            v52 = *v51;
            if ((*v51 & 1) == 0 || v52 == 4)
            {
              v53 = v52 & 0xFFFFFFFFFFFFFFFDLL;
              *(_QWORD *)v197 = v53;
            }
            else
            {
              v83 = v47;
              WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v197, (_QWORD *)(v50 + 32 * v49));
              v47 = v83;
              v53 = *(_QWORD *)v197;
            }
            v54 = v53 & 0xFFFFFFFFFFFFFFFDLL;
            v55 = v53 | 2;
            if ((*(_BYTE *)v51 & 2) == 0)
              v55 = v54;
            *(_QWORD *)v197 = v55;
            v56 = v50 + 32 * v49;
            v57 = *(_OWORD *)(v56 + 8);
            v198 = *(_QWORD *)(v56 + 24);
            *(_OWORD *)&v197[8] = v57;
            v58 = v55 & 0xFFFFFFFFFFFFFFFDLL;
            *(_QWORD *)v197 = v55 & 0xFFFFFFFFFFFFFFFDLL;
            v59 = *(_QWORD *)(v48 + 168);
            v60 = v59 + 32 * v49;
            v61 = (uint64_t *)(v60 + 8);
            *(_QWORD *)(v60 + 8) &= v57;
            if ((v55 & 0xFFFFFFFFFFFFFFFDLL) != 4)
            {
              v62 = *(_QWORD *)v60;
              if (*(_QWORD *)v60 == 4)
              {
                if ((_BYTE *)v60 == v197)
                  goto LABEL_63;
                if ((v55 & 1) == 0)
                {
                  *(_QWORD *)v60 = v58;
                  goto LABEL_63;
                }
                v102 = v47;
                WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)(v59 + 32 * v49), v197);
                goto LABEL_147;
              }
              if ((v62 & 2) != 0)
              {
                if ((v55 & 1) != 0)
                  v153 = *(unsigned int *)(v55 & 0xFFFFFFFFFFFFFFFCLL);
                else
                  v153 = v58 > 3;
                if ((v62 & 1) != 0)
                  v154 = *(unsigned int *)(v62 & 0xFFFFFFFFFFFFFFFCLL);
                else
                  v154 = v62 > 3;
                if (v153 <= v154 + 2)
                {
                  v155 = v47;
                  JSC::DFG::RegisteredStructureSet::operator=((uint64_t *)(v59 + 32 * v49), (uint64_t *)v197, v47, 0x2800FFFFFFF7, (uint64_t)v197, 0xFFFFD7FF00000008, 0xFFFE000000000000, 1);
                  v47 = v155;
                  *(_QWORD *)v60 &= ~2uLL;
                }
              }
              else
              {
                v199[0] = 0;
                if ((v55 & 1) != 0)
                {
                  v99 = v47;
                  WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v199, v197);
                  v47 = v99;
                  v58 = v199[0];
                  v62 = *(_QWORD *)v60;
                }
                v73 = v58 & 0xFFFFFFFFFFFFFFFDLL;
                v199[0] = v58 & 0xFFFFFFFFFFFFFFFDLL;
                v74 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v62 & 1) == 0)
                {
                  if (v74)
                    v75 = v73 == 4;
                  else
                    v75 = 1;
                  if (v75)
                    goto LABEL_88;
                  v78 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFFFFCLL);
                  if ((v58 & 1) != 0)
                  {
                    v89 = *v78;
                    if (!(_DWORD)v89)
                      goto LABEL_167;
                    if (*((unsigned int **)v78 + 1) == v74)
                      goto LABEL_88;
                    v90 = 0;
                    while (v89 - 1 != v90)
                    {
                      v91 = *(unsigned int **)&v78[2 * v90++ + 4];
                      if (v91 == v74)
                      {
                        if (v90 < v89)
                          goto LABEL_88;
                        break;
                      }
                    }
                  }
                  else if (v78 == v74)
                  {
                    goto LABEL_88;
                  }
LABEL_167:
                  *(_QWORD *)v60 = v62 & 2;
                  goto LABEL_88;
                }
                v93 = *v74;
                if (!*v74)
                  goto LABEL_166;
                if (v73 != 4)
                {
                  v94 = v74 + 2;
                  v95 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFFFFCLL);
                  if ((v58 & 1) == 0)
                  {
                    v96 = 0;
                    do
                    {
                      if (*(unsigned int **)&v94[2 * v96] != v95)
                      {
                        v97 = v96;
                        *v74 = --v93;
                        --v96;
                        *(_QWORD *)&v94[2 * v97] = *(_QWORD *)&v94[2 * v93];
                      }
                      ++v96;
                    }
                    while (v96 < v93);
LABEL_165:
                    if (!v93)
                    {
LABEL_166:
                      v101 = v47;
                      WTF::fastFree((unint64_t)v74, (void *)v18, v47, 0x2800FFFFFFF7, (uint64_t)v197, 0xFFFFD7FF00000008, 0xFFFE000000000000, 1);
                      v47 = v101;
                      v62 = *(_QWORD *)v60;
                      v73 = v199[0];
                      goto LABEL_167;
                    }
LABEL_88:
                    if ((v73 & 1) == 0)
                      goto LABEL_63;
                    v102 = v47;
                    WTF::fastFree(v73 & 0xFFFFFFFFFFFFFFFCLL, (void *)v18, v47, 0x2800FFFFFFF7, (uint64_t)v197, 0xFFFFD7FF00000008, 0xFFFE000000000000, 1);
LABEL_147:
                    v47 = v102;
                    goto LABEL_63;
                  }
                  v141 = 0;
                  while (2)
                  {
                    v142 = *v95;
                    if ((_DWORD)v142)
                    {
                      v143 = *(_QWORD *)&v94[2 * v141];
                      if (*((_QWORD *)v95 + 1) != v143)
                      {
                        v144 = 0;
                        while (v142 - 1 != v144)
                        {
                          v18 = *(_QWORD *)&v95[2 * v144++ + 4];
                          if (v18 == v143)
                          {
                            if (v144 >= v142)
                              goto LABEL_224;
                            goto LABEL_222;
                          }
                        }
                        goto LABEL_224;
                      }
                    }
                    else
                    {
LABEL_224:
                      v145 = v141;
                      *v74 = --v93;
                      --v141;
                      *(_QWORD *)&v94[2 * v145] = *(_QWORD *)&v94[2 * v93];
                    }
LABEL_222:
                    if (++v141 >= v93)
                      goto LABEL_165;
                    continue;
                  }
                }
              }
            }
LABEL_63:
            v63 = v59 + 32 * v49;
            v65 = *(_DWORD *)(v63 + 16);
            v64 = (int *)(v63 + 16);
            *v64 = v65 & *(_DWORD *)&v197[16];
            v66 = *v61;
            v67 = *(_QWORD *)v60;
            if ((*v61 & 0x2800FFFFFFF7) != 0)
            {
              if (v67 <= 4 && ((1 << v67) & 0x15) != 0)
                goto LABEL_101;
              v77 = v67 & 0xFFFFFFFFFFFFFFFCLL;
              if ((v67 & 1) != 0)
              {
                v150 = *(_DWORD *)v77;
                if (*(_DWORD *)v77)
                {
                  v151 = 0;
                  v84 = v77 + 8;
                  do
                  {
                    if ((JSC::speculatedTypeMapping[*(unsigned __int8 *)(*(_QWORD *)(v84 + 8 * v151) + 9)] & v66) == 0)
                    {
                      v149 = v151;
                      *(_DWORD *)v77 = --v150;
                      --v151;
                      *(_QWORD *)(v84 + 8 * v149) = *(_QWORD *)(v84 + 8 * v150);
                    }
                    ++v151;
                  }
                  while (v151 < v150);
                  if (v150)
                    goto LABEL_101;
                }
                v86 = v47;
                WTF::fastFree(v77, (void *)v18, v47, 0x2800FFFFFFF7, (uint64_t)v197, 0xFFFFD7FF00000008, 0xFFFE000000000000, 1);
                v47 = v86;
                v67 = *(_QWORD *)v60;
              }
              else if (!v77 || (JSC::speculatedTypeMapping[*(unsigned __int8 *)(v77 + 9)] & v66) != 0)
              {
                goto LABEL_101;
              }
              v67 &= 2u;
            }
            else
            {
              if ((v67 & 1) != 0)
              {
                v87 = v67 & 0xFFFFFFFFFFFFFFFCLL;
                v88 = v47;
                WTF::fastFree(v87, (void *)v18, v47, 0x2800FFFFFFF7, (uint64_t)v197, 0xFFFFD7FF00000008, 0xFFFE000000000000, 1);
                v47 = v88;
              }
              v67 = 0;
            }
            *(_QWORD *)v60 = v67;
            v66 = *v61;
            if ((*v61 & 0x2800FFFFFFF7) == 0)
            {
              v68 = 0;
LABEL_69:
              *v64 = v68;
              goto LABEL_70;
            }
LABEL_101:
            if ((v66 & 0xFFFFFFFFFFFFFFFDLL) == 0)
            {
              v68 = *v64 & 0x2A02AAA;
              goto LABEL_69;
            }
LABEL_70:
            v69 = v59 + 32 * v49;
            v72 = *(_QWORD *)(v69 + 24);
            v71 = (_QWORD *)(v69 + 24);
            v70 = v72;
            if (!v72)
              goto LABEL_71;
            if ((v66 & 0xC00000000) != 0)
            {
              v162 = v47;
              v163 = v70;
              v156 = JSC::int52AwareSpeculationFromValue(v70);
              v47 = v162;
              v70 = v163;
              if ((v156 | v66) == v66)
                goto LABEL_90;
            }
            if (v70 >= 0xFFFE000000000000)
            {
              v81 = (v70 & 0xFFFFFFFE) == 0;
              v79 = 0x200000000;
              v82 = 0x100000000;
              goto LABEL_126;
            }
            if (v70 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
            {
              v100 = (uint64_t)COERCE_DOUBLE(v70 - 0x2000000000000);
              if ((double)v100 != COERCE_DOUBLE(v70 - 0x2000000000000))
                goto LABEL_164;
              if (v100)
              {
                if ((unint64_t)(v100 + 0x8000000000000) >> 52)
                  goto LABEL_164;
              }
              else if ((uint64_t)v70 < 0x2000000000000)
              {
LABEL_164:
                v79 = 0x2000000000;
                goto LABEL_119;
              }
              v79 = 0x1000000000;
            }
            else
            {
              if ((v70 & 0xFFFE000000000002) != 0)
              {
                v81 = (v70 & 0xFFFFFFFFFFFFFFFELL) == 6;
                v79 = 0x20000000000;
                v82 = 0x10000000000;
LABEL_126:
                if (v81)
                  v79 = v82;
                goto LABEL_119;
              }
              if (qword_1ECF4C080 > v70)
                goto LABEL_250;
              v79 = 0;
              if (!(v70 >> 36) && (v70 & 0xFFFFFFFFFLL) != 0)
              {
                v80 = *(unsigned __int8 *)(v70 + 5);
                if (v80 != 2)
                {
                  v79 = JSC::speculatedTypeMapping[v80];
                  goto LABEL_119;
                }
                v98 = *(_QWORD *)(v70 + 8);
                if (!v98)
                  goto LABEL_198;
                v79 = 805306368;
                if ((v98 & 1) != 0)
                  goto LABEL_119;
                if (v98 < qword_1ECF4C080)
                {
LABEL_250:
                  v79 = 0;
                  goto LABEL_119;
                }
                v79 = 0;
                if (!(v98 >> 36) && (v98 & 0xFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)(v98 + 16) & 0x10) != 0)
                  {
                    v79 = 0x10000000;
                    goto LABEL_119;
                  }
LABEL_198:
                  v79 = 805306368;
                }
              }
            }
LABEL_119:
            if ((v79 | v66) != v66)
            {
              v70 = 0;
              *v71 = 0;
            }
LABEL_71:
            if (!v66)
              goto LABEL_72;
LABEL_90:
            if ((v66 & 0xFFFFD7FF00000008) == 0 && (!*v64 || (v67 & 0xFFFFFFFFFFFFFFFDLL) == 0))
            {
LABEL_72:
              *v61 = 0;
              *v64 = 0;
              if ((v67 & 1) != 0)
              {
                v92 = v47;
                WTF::fastFree(v67 & 0xFFFFFFFFFFFFFFFCLL, (void *)v18, v47, 0x2800FFFFFFF7, (uint64_t)v197, 0xFFFFD7FF00000008, 0xFFFE000000000000, 1);
                v47 = v92;
              }
              *(_QWORD *)v60 = 0;
              *v71 = 0;
              goto LABEL_75;
            }
            if (v70 != v198)
            {
              if (v70)
              {
                if (v198)
                  goto LABEL_72;
              }
              else
              {
                *v71 = v198;
                v161 = v47;
                JSC::DFG::AbstractValue::filterValueByType(v60);
                v47 = v161;
              }
            }
LABEL_75:
            if ((v197[0] & 1) != 0)
            {
              v85 = v47;
              WTF::fastFree(*(_QWORD *)v197 & 0xFFFFFFFFFFFFFFFCLL, (void *)v18, v47, 0x2800FFFFFFF7, (uint64_t)v197, 0xFFFFD7FF00000008, 0xFFFE000000000000, 1);
              v47 = v85;
            }
          }
        }
      }
      while ((_DWORD)v47);
      v34 = v168;
    }
  }
  if (qword_1ECF4C32A | byte_1ECF4C323
    || (BYTE1(qword_1ECF4C32A) ? (v103 = (*(_DWORD *)(*((_QWORD *)v34 + 3) + 16) & 0xFFFFFFFE) == 4) : (v103 = 0),
        !v103 ? (v104 = BYTE2(qword_1ECF4C32A) == 0) : (v104 = 0),
        !v104))
  {
    *(_OWORD *)v197 = v169;
    WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v34 + 1088, "Phase ", (uint64_t)v197, " changed the IR.\n", "\n");
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v194);
  if ((v190 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v190, v105, v106, v107, v108, v109, v110, v111);
  v112 = v189;
  v189 = 0;
  if (v112)
  {
    v113 = *(_QWORD *)v112;
    if (*(_QWORD *)v112)
    {
      v114 = *(unsigned int *)(v113 - 4);
      if ((_DWORD)v114)
      {
        v115 = v113 + 24;
        do
        {
          if (*(_QWORD *)(v115 - 24) != -1)
          {
            v116 = *(_QWORD *)(v115 - 16);
            if (v115 != v116 && v116 != 0)
            {
              *(_QWORD *)(v115 - 16) = 0;
              *(_DWORD *)(v115 - 8) = 0;
              WTF::fastFree(v116, v105, v106, v107, v108, v109, v110, v111);
            }
          }
          v115 += 48;
          --v114;
        }
        while (v114);
      }
      WTF::fastFree(v113 - 16, v105, v106, v107, v108, v109, v110, v111);
    }
    WTF::fastFree((unint64_t)v112, v105, v106, v107, v108, v109, v110, v111);
  }
  JSC::DFG::InPlaceAbstractState::~InPlaceAbstractState((JSC::DFG::InPlaceAbstractState *)v172, v105, v106, v107, v108, v109, v110, v111);
  if (HIBYTE(qword_1ECF4C32A) && !v170)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v164, (uint64_t)v118, v119, v120, v121, v122, v123, v124);
  v125 = v171;
  v171 = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 1)
      WTF::fastFree((unint64_t)v125, v118, v119, v120, v121, v122, v123, v124);
    else
      --*(_DWORD *)v125;
  }
  return 1;
}

uint64_t JSC::DFG::performCFGSimplification(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  void *v2;
  const WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  JSC::DFG::Graph *v10;
  unint64_t v11;
  char v12;
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::DFG::Graph *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  _QWORD *v44;
  int v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  void *v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  _QWORD *v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  _QWORD *v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t *v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int i;
  uint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BOOL4 v87;
  int v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF *v96;
  BOOL v98;
  BOOL v99;
  uint64_t v100;
  uint64_t *v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  __int128 *v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t **v113;
  BOOL v114;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int16 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int16 v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  JSC::DFG::Graph *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t *v138;
  int v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  unsigned int v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  BOOL v152;
  JSC::DFG::Graph *v153;
  int v154;
  BOOL v155;
  uint64_t v156;
  WTF *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  WTF *v162;
  BOOL v163;
  unsigned int v165;
  uint64_t v166;
  int v167;
  unsigned int v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  JSC::DFG::Graph *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  JSC::DFG::Graph *v203;
  JSC::DFG::Graph *v204;
  uint64_t v205;
  uint64_t v206;
  BOOL v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  BOOL v211;
  uint64_t v212;
  __int16 v213;
  uint64_t v214;
  uint64_t v215;
  BOOL v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  BOOL v220;
  uint64_t v221;
  __int16 v222;
  uint64_t v223;
  uint64_t v224;
  BOOL v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  BOOL v229;
  uint64_t v230;
  uint64_t v231;
  _DWORD *v232;
  uint64_t v233;
  JSC::DFG::BasicBlock *v234;
  unint64_t v235;
  uint64_t v236;
  __int128 v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  BOOL v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  BOOL v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  __int128 *v256;
  __int16 v257;
  __int16 v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  __int16 v265;
  JSC::DFG::Graph *v266;
  __int128 v267;
  char v268;
  WTF *v269;
  _QWORD v270[2];
  __int128 v271;
  double v272;
  _BYTE v273[24];
  _QWORD v274[2];
  __int16 v275;
  uint64_t v276;
  uint64_t v277;
  __int16 v278;
  WTF *v279;
  int v280;
  int v281;
  uint64_t v282;
  void *__src;
  uint64_t v284;
  uint64_t v285;
  _QWORD v286[2];
  __int16 v287;
  _QWORD v288[2];
  __int16 v289;
  uint64_t *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  __int128 v296;
  _BYTE v297[16];

  v262 = -1;
  v263 = -1;
  v264 = 0;
  v265 = 256;
  v266 = this;
  *(_QWORD *)&v267 = "CFG simplification";
  *((_QWORD *)&v267 + 1) = 19;
  v268 = 0;
  v269 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v262);
  v270[0] = "DFG";
  v270[1] = 4;
  v271 = v267;
  v272 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v148 = mach_absolute_time();
    v150 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v150 != -1)
    {
      *(_QWORD *)&v296 = &v290;
      v293 = (uint64_t *)&v296;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v293, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v149) = dword_1ECF4400C;
    v272 = (double)(v148 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v149 * 1000000000.0);
  }
  v9 = 0;
  do
  {
    v10 = v266;
    if (!*((_DWORD *)v266 + 15))
    {
LABEL_5:
      v13 = 0;
      goto LABEL_6;
    }
    v11 = 0;
    v12 = 0;
    do
    {
      v35 = *(_QWORD *)(*((_QWORD *)v10 + 6) + 8 * v11);
      if (!v35)
        goto LABEL_28;
      v36 = *(unsigned int *)(v35 + 220);
      v37 = v36 - 1;
      v38 = v36 - 1;
      do
      {
        if (v38 >= v36)
        {
          __break(0xC471u);
          JUMPOUT(0x198334FBCLL);
        }
        v39 = *(_QWORD *)(v35 + 208);
        v40 = *(unsigned __int16 *)(*(_QWORD *)(v39 + 8 * v38--) + 18);
      }
      while ((v40 - 364) > 0xB);
      if (v40 == 365)
      {
        v53 = *(unsigned __int8 *)(v35 + 14);
        v54 = v36 - 1;
        if ((v53 - 1) < 2)
        {
          v81 = v36 - 1;
          do
          {
            if (v81 >= v36)
            {
              __break(0xC471u);
              JUMPOUT(0x198335150);
            }
            v82 = *(_QWORD *)(v39 + 8 * v81--);
          }
          while (*(unsigned __int16 *)(v82 + 18) - 364 > 0xB);
          v83 = *(_QWORD *)(*(_QWORD *)(v82 + 72) + 16 * (v53 != 1));
          do
          {
            if (v37 >= v36)
            {
              __break(0xC471u);
              JUMPOUT(0x198335158);
            }
            v84 = *(_QWORD *)(v39 + 8 * v37--);
          }
          while (*(unsigned __int16 *)(v84 + 18) - 364 > 0xB);
          v85 = *(_QWORD *)(*(_QWORD *)(v84 + 72) + 16 * (v53 == 1));
          v87 = v35 != v83 && *(_DWORD *)(v83 + 52) == 1;
          v88 = *((_DWORD *)v10 + 236);
          if (v88 && v88 != 2)
          {
            if ((_BYTE)qword_1ECF4C32A)
              v114 = 0;
            else
              v114 = byte_1ECF4C323 == 0;
            if (!v114 || BYTE2(qword_1ECF4C32A) != 0)
            {
              v204 = v10;
              WTF::dataLog<char [16]>("Dethreading DFG graph.\n");
              v10 = v204;
            }
            v69 = *((_DWORD *)v10 + 15);
            while (v69)
            {
              if (*((_DWORD *)v10 + 15) <= --v69)
              {
                __break(0xC471u);
                JUMPOUT(0x198335148);
              }
              v70 = *(_QWORD *)(*((_QWORD *)v10 + 6) + 8 * v69);
              if (v70)
              {
                v71 = *(_DWORD *)(v70 + 36);
                if (v71)
                {
                  v72 = v71 - 1;
                  v73 = 8 * v72;
                  do
                  {
                    if (*(_DWORD *)(v70 + 36) <= v72)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1983350A8);
                    }
                    v74 = *(_QWORD **)(*(_QWORD *)(v70 + 24) + v73);
                    v74[3] = 0;
                    v74[4] = 0;
                    v74[5] = 0;
                    v73 -= 8;
                    --v72;
                  }
                  while (v72 != -1);
                }
              }
            }
            *((_DWORD *)v10 + 236) = 0;
          }
          if (v87)
          {
            if (v83 == v85)
            {
              v293 = &v295;
              v294 = 1;
              JSC::DFG::CFGSimplificationPhase::mergeBlocks((uint64_t)&v262, v35, v83, (uint64_t)&v293, v5, v6, v7, v8);
              v235 = (unint64_t)v293;
              if (&v295 != v293 && v293)
              {
                v293 = 0;
                LODWORD(v294) = 0;
                WTF::fastFree(v235, v2, (uint64_t)v3, v4, v5, v6, v7, v8);
              }
              v12 = 1;
              v9 = 1;
            }
            else
            {
              v290 = &v292;
              v292 = v85;
              v291 = 0x100000001;
              JSC::DFG::CFGSimplificationPhase::mergeBlocks((uint64_t)&v262, v35, v83, (uint64_t)&v290, v5, v6, v7, v8);
              v52 = v290;
              if (&v292 != v290 && v290)
              {
                v290 = 0;
                LODWORD(v291) = 0;
LABEL_236:
                WTF::fastFree((unint64_t)v52, v2, (uint64_t)v3, v4, v5, v6, v7, v8);
              }
LABEL_115:
              v12 = 1;
              v9 = 1;
            }
          }
          else
          {
            v116 = *(unsigned int *)(v35 + 220);
            v117 = v116 - 1;
            do
            {
              if (v117 >= v116)
              {
                __break(0xC471u);
                JUMPOUT(0x198335160);
              }
              v118 = *(_QWORD *)(*(_QWORD *)(v35 + 208) + 8 * v117--);
            }
            while (*(unsigned __int16 *)(v118 + 18) - 364 > 0xB);
            v119 = *(_QWORD *)v118;
            if ((*(_QWORD *)v118 & 1) != 0)
            {
              v205 = *(_QWORD *)(v119 & 0xFFFFFFFF8);
              if ((v119 & 2) != 0
                || ((v206 = *(unsigned int *)((v119 & 0xFFFFFFFF8) + 8), (_DWORD)v206 != 0x3FFFFFFF)
                  ? (v207 = (_DWORD)v206 == -1)
                  : (v207 = 1),
                    v207))
              {
                v208 = 2;
              }
              else if (v206 >> 28)
              {
                v248 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v248 = v205;
                *(_DWORD *)(v248 + 8) = v206;
                v208 = 1;
                v205 = v248;
              }
              else
              {
                v208 = *(_QWORD *)(v119 & 0xFFFFFFFF8);
                v205 = v206 << 36;
              }
              v119 = v205 | v208;
            }
            v260 = v119;
            v120 = *(_QWORD *)(v118 + 8);
            if ((v120 & 1) != 0)
            {
              v209 = *(_QWORD *)(v120 & 0xFFFFFFFF8);
              if ((v120 & 2) != 0
                || ((v210 = *(unsigned int *)((v120 & 0xFFFFFFFF8) + 8), (_DWORD)v210 != 0x3FFFFFFF)
                  ? (v211 = (_DWORD)v210 == -1)
                  : (v211 = 1),
                    v211))
              {
                v212 = 2;
              }
              else if (v210 >> 28)
              {
                v249 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v249 = v209;
                *(_DWORD *)(v249 + 8) = v210;
                v212 = 1;
                v209 = v249;
              }
              else
              {
                v212 = *(_QWORD *)(v120 & 0xFFFFFFFF8);
                v209 = v210 << 36;
              }
              v120 = v209 | v212;
            }
            v121 = *(_WORD *)(v118 + 16);
            if (v83 != v85)
            {
              v122 = v260;
              if ((v260 & 1) != 0)
              {
                v222 = *(_WORD *)(v118 + 16);
                v223 = *(_QWORD *)(v260 & 0xFFFFFFFF8);
                if ((v260 & 2) != 0
                  || ((v224 = *(unsigned int *)((v260 & 0xFFFFFFFF8) + 8), (_DWORD)v224 != 0x3FFFFFFF)
                    ? (v225 = (_DWORD)v224 == -1)
                    : (v225 = 1),
                      v225))
                {
                  v226 = 2;
                }
                else if (v224 >> 28)
                {
                  v252 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v252 = v223;
                  *(_DWORD *)(v252 + 8) = v224;
                  v226 = 1;
                  v223 = v252;
                }
                else
                {
                  v226 = *(_QWORD *)(v260 & 0xFFFFFFFF8);
                  v223 = v224 << 36;
                }
                v122 = v223 | v226;
                v121 = v222;
              }
              v288[0] = v122;
              if ((v120 & 1) != 0)
              {
                v258 = v121;
                v227 = *(_QWORD *)(v120 & 0xFFFFFFFF8);
                if ((v120 & 2) != 0
                  || ((v228 = *(unsigned int *)((v120 & 0xFFFFFFFF8) + 8), (_DWORD)v228 != 0x3FFFFFFF)
                    ? (v229 = (_DWORD)v228 == -1)
                    : (v229 = 1),
                      v229))
                {
                  v230 = 2;
                }
                else if (v228 >> 28)
                {
                  v253 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v253 = v227;
                  *(_DWORD *)(v253 + 8) = v228;
                  v230 = 1;
                  v227 = v253;
                }
                else
                {
                  v230 = *(_QWORD *)(v120 & 0xFFFFFFFF8);
                  v227 = v228 << 36;
                }
                v124 = v227 | v230;
                v123 = (v227 | v230) & 1;
                v121 = v258;
              }
              else
              {
                v123 = 0;
                v124 = v120;
              }
              v288[1] = v124;
              v125 = v121;
              v289 = v121;
              JSC::DFG::CFGSimplificationPhase::jettisonBlock((uint64_t)&v262, (void *)v35, v85, (uint64_t)v288, v5, v6, v7, v8);
              if (v123 && (v124 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v124 & 0xFFFFFFFF8, v126, v127, v128, v5, v6, v7, v8);
              v121 = v125;
              if ((v122 & 1) != 0 && (v122 & 0xFFFFFFFF8) != 0)
              {
                WTF::fastFree(v122 & 0xFFFFFFFF8, v126, v127, v128, v5, v6, v7, v8);
                v121 = v125;
              }
            }
            v129 = v266;
            v130 = v260;
            v131 = v260;
            if ((v260 & 1) != 0)
            {
              v213 = v121;
              v214 = *(_QWORD *)(v260 & 0xFFFFFFFF8);
              if ((v260 & 2) != 0
                || ((v215 = *(unsigned int *)((v260 & 0xFFFFFFFF8) + 8), (_DWORD)v215 != 0x3FFFFFFF)
                  ? (v216 = (_DWORD)v215 == -1)
                  : (v216 = 1),
                    v216))
              {
                v217 = 2;
              }
              else if (v215 >> 28)
              {
                v250 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v250 = v214;
                *(_DWORD *)(v250 + 8) = v215;
                v217 = 1;
                v214 = v250;
              }
              else
              {
                v217 = *(_QWORD *)(v260 & 0xFFFFFFFF8);
                v214 = v215 << 36;
              }
              v131 = v214 | v217;
              v121 = v213;
              v130 = v260;
            }
            v286[0] = v131;
            if ((v120 & 1) != 0)
            {
              v257 = v121;
              v218 = *(_QWORD *)(v120 & 0xFFFFFFFF8);
              if ((v120 & 2) != 0
                || ((v219 = *(unsigned int *)((v120 & 0xFFFFFFFF8) + 8), (_DWORD)v219 != 0x3FFFFFFF)
                  ? (v220 = (_DWORD)v219 == -1)
                  : (v220 = 1),
                    v220))
              {
                v221 = 2;
              }
              else if (v219 >> 28)
              {
                v251 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v251 = v218;
                *(_DWORD *)(v251 + 8) = v219;
                v221 = 1;
                v218 = v251;
              }
              else
              {
                v221 = *(_QWORD *)(v120 & 0xFFFFFFFF8);
                v218 = v219 << 36;
              }
              v133 = v218 | v221;
              v132 = (v218 | v221) & 1;
              v121 = v257;
              v130 = v260;
            }
            else
            {
              v132 = 0;
              v133 = v120;
            }
            v286[1] = v133;
            v287 = v121;
            JSC::DFG::BasicBlock::replaceTerminal<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(v35, v129, (uint64_t)v286, v83, v5, v6, v7, v8);
            if (v132 && (v133 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v133 & 0xFFFFFFFF8, v2, (uint64_t)v3, v4, v5, v6, v7, v8);
            if ((v131 & 1) != 0 && (v131 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v131 & 0xFFFFFFFF8, v2, (uint64_t)v3, v4, v5, v6, v7, v8);
            if ((v120 & 1) != 0 && (v120 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v120 & 0xFFFFFFFF8, v2, (uint64_t)v3, v4, v5, v6, v7, v8);
            if ((v130 & 1) != 0 && (v130 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v130 & 0xFFFFFFFF8, v2, (uint64_t)v3, v4, v5, v6, v7, v8);
            v12 = 1;
            v9 = 1;
          }
          goto LABEL_28;
        }
        do
        {
          if (v54 >= v36)
          {
            __break(0xC471u);
            JUMPOUT(0x198335098);
          }
          v55 = *(_QWORD *)(v39 + 8 * v54);
          v56 = *(unsigned __int16 *)(v55 + 18);
          --v54;
        }
        while ((v56 - 364) > 0xB);
        if (v56 == 366)
        {
          v75 = *(uint64_t **)(v55 + 72);
          if (*((_DWORD *)v75 + 3))
            v75 = (uint64_t *)*v75;
          v57 = v75 + 2;
        }
        else if (v56 == 367)
        {
          v231 = *(_QWORD *)(v55 + 72);
          if (!*(_DWORD *)(v231 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x198335130);
          }
          v57 = *(_QWORD **)v231;
        }
        else
        {
          v57 = (_QWORD *)(v55 + 72);
          if (v56 != 364)
            v57 = (_QWORD *)*v57;
        }
        v58 = (_QWORD *)*v57;
        do
        {
          if (v37 >= v36)
          {
            __break(0xC471u);
            JUMPOUT(0x1983350A0);
          }
          v59 = *(_QWORD *)(v39 + 8 * v37);
          v60 = *(unsigned __int16 *)(v59 + 18);
          --v37;
        }
        while ((v60 - 364) > 0xB);
        if (v60 == 366)
        {
          v61 = *(_QWORD *)(v59 + 72);
          v76 = *(_DWORD *)(v61 + 12);
          if (v76 < 2)
          {
            if (v76 != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1983346A4);
            }
LABEL_69:
            v62 = (_QWORD *)(v61 + 16);
          }
          else
          {
            v62 = (_QWORD *)(*(_QWORD *)v61 + 48);
          }
        }
        else
        {
          if (v60 != 367)
          {
            v61 = *(_QWORD *)(v59 + 72);
            goto LABEL_69;
          }
          v232 = *(_DWORD **)(v59 + 72);
          if (v232[3] <= 1u)
          {
            __break(0xC471u);
            JUMPOUT(0x198335138);
          }
          v62 = (_QWORD *)(*(_QWORD *)v232 + 8);
        }
        if (v58 == (_QWORD *)*v62)
        {
          v234 = (JSC::DFG::BasicBlock *)*JSC::DFG::BasicBlock::successor((JSC::DFG::BasicBlock *)v35);
LABEL_201:
          JSC::DFG::CFGSimplificationPhase::convertToJump((JSC::DFG::CFGSimplificationPhase *)&v262, (JSC::DFG::BasicBlock *)v35, v234, v4, v5, v6, v7, v8);
          goto LABEL_115;
        }
        goto LABEL_28;
      }
      if (v40 == 364)
      {
        do
        {
          if (v37 >= v36)
          {
            __break(0xC471u);
            JUMPOUT(0x198335090);
          }
          v41 = *(_QWORD *)(v39 + 8 * v37);
          v42 = *(unsigned __int16 *)(v41 + 18);
          --v37;
        }
        while ((v42 - 364) > 0xB);
        if (v42 == 366)
        {
          v80 = *(uint64_t **)(v41 + 72);
          if (*((_DWORD *)v80 + 3))
            v80 = (uint64_t *)*v80;
          v43 = v80 + 2;
        }
        else if (v42 == 367)
        {
          v233 = *(_QWORD *)(v41 + 72);
          if (!*(_DWORD *)(v233 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x198335128);
          }
          v43 = *(_QWORD **)v233;
        }
        else
        {
          v43 = (_QWORD *)(v41 + 72);
          if (v42 != 364)
            v43 = (_QWORD *)*v43;
        }
        v44 = (_QWORD *)*v43;
        if ((_QWORD *)v35 != v44 && *((_DWORD *)v44 + 13) == 1)
        {
          v46 = *((_DWORD *)v10 + 236);
          if (v46 && v46 != 2)
          {
            if ((_BYTE)qword_1ECF4C32A || byte_1ECF4C323 || BYTE2(qword_1ECF4C32A))
            {
              v203 = v10;
              WTF::dataLog<char [16]>("Dethreading DFG graph.\n");
              v10 = v203;
            }
            v63 = *((_DWORD *)v10 + 15);
            while (v63)
            {
              if (*((_DWORD *)v10 + 15) <= --v63)
              {
                __break(0xC471u);
                JUMPOUT(0x198335120);
              }
              v64 = *(_QWORD *)(*((_QWORD *)v10 + 6) + 8 * v63);
              if (v64)
              {
                v65 = *(_DWORD *)(v64 + 36);
                if (v65)
                {
                  v66 = v65 - 1;
                  v67 = 8 * v66;
                  do
                  {
                    if (*(_DWORD *)(v64 + 36) <= v66)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198334FC4);
                    }
                    v68 = *(_QWORD **)(*(_QWORD *)(v64 + 24) + v67);
                    v68[3] = 0;
                    v68[4] = 0;
                    v68[5] = 0;
                    v67 -= 8;
                    --v66;
                  }
                  while (v66 != -1);
                }
              }
            }
            *((_DWORD *)v10 + 236) = 0;
            v36 = *(unsigned int *)(v35 + 220);
          }
          v47 = v36 - 1;
          do
          {
            if (v47 >= v36)
            {
              __break(0xC471u);
              JUMPOUT(0x198335118);
            }
            v48 = *(_QWORD *)(*(_QWORD *)(v35 + 208) + 8 * v47);
            v49 = *(unsigned __int16 *)(v48 + 18);
            --v47;
          }
          while ((v49 - 364) > 0xB);
          if (v49 == 366)
          {
            v134 = *(uint64_t **)(v48 + 72);
            if (*((_DWORD *)v134 + 3))
              v134 = (uint64_t *)*v134;
            v50 = v134 + 2;
          }
          else if (v49 == 367)
          {
            v239 = *(_QWORD *)(v48 + 72);
            if (!*(_DWORD *)(v239 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x198335140);
            }
            v50 = *(uint64_t **)v239;
          }
          else
          {
            v50 = (uint64_t *)(v48 + 72);
            if (v49 != 364)
              v50 = (uint64_t *)*v50;
          }
          v51 = *v50;
          *(_QWORD *)&v296 = v297;
          *((_QWORD *)&v296 + 1) = 1;
          JSC::DFG::CFGSimplificationPhase::mergeBlocks((uint64_t)&v262, v35, v51, (uint64_t)&v296, v5, v6, v7, v8);
          v52 = (void *)v296;
          if (v297 != (_BYTE *)v296 && (_QWORD)v296)
          {
            *(_QWORD *)&v296 = 0;
            DWORD2(v296) = 0;
            goto LABEL_236;
          }
          goto LABEL_115;
        }
        goto LABEL_28;
      }
      if (v40 != 366)
        goto LABEL_28;
      do
      {
        if (v37 >= v36)
        {
          __break(0xC471u);
          JUMPOUT(0x1983350B0);
        }
        v100 = *(_QWORD *)(v39 + 8 * v37--);
      }
      while (*(unsigned __int16 *)(v100 + 18) - 364 > 0xB);
      v101 = *(uint64_t **)(v100 + 72);
      v102 = *((_DWORD *)v101 + 3);
      if (!v102)
        goto LABEL_200;
      for (i = 0; i < v102; ++i)
      {
        v77 = *v101;
        v78 = *v101 + 32 * i;
        if (*(_QWORD *)(v78 + 16) == v101[2])
        {
          *((float *)v101 + 6) = *(float *)(v78 + 24) + *((float *)v101 + 6);
          v236 = v77 + 32 * v102;
          v237 = *(_OWORD *)(v236 - 16);
          *(_OWORD *)v78 = *(_OWORD *)(v236 - 32);
          *(_OWORD *)(v78 + 16) = v237;
          v238 = *((_DWORD *)v101 + 3);
          if (!v238)
          {
            __break(0xC471u);
            JUMPOUT(0x198335110);
          }
          --i;
          v102 = v238 - 1;
          *((_DWORD *)v101 + 3) = v102;
        }
      }
      if (!v102)
      {
LABEL_200:
        v234 = (JSC::DFG::BasicBlock *)v101[2];
        goto LABEL_201;
      }
      v103 = *(unsigned int *)(v35 + 220);
      if ((_DWORD)v103)
      {
        v104 = 8 * v103;
        while (1)
        {
          v105 = *(_QWORD *)(*(_QWORD *)(v35 + 208) - 8 + v104);
          v106 = *(unsigned __int16 *)(v105 + 18);
          if ((v106 - 364) < 0xC)
            break;
          if ((v106 - 28) < 2 || (v106 - 23) <= 2)
          {
            v104 -= 8;
            if (v104)
              continue;
          }
          goto LABEL_148;
        }
      }
      else
      {
LABEL_148:
        v105 = 0;
      }
      v107 = *(unsigned __int16 *)((*(_QWORD *)(v105 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v107 <= 0xB5)
      {
        if (v107 >= 3)
          goto LABEL_28;
LABEL_151:
        v108 = *(__int128 **)((*(_QWORD *)(v105 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        goto LABEL_152;
      }
      if (v107 == 182)
        goto LABEL_151;
      if (v107 != 355 && v107 != 348)
        goto LABEL_28;
      v108 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        LODWORD(qword_1EE342DB8) = 0;
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        v102 = *((_DWORD *)v101 + 3);
      }
LABEL_152:
      LOBYTE(v109) = 0;
      v110 = 0;
      v111 = v102;
LABEL_153:
      v112 = (32 * v111) | 0x10;
      while (!(_BYTE)v109)
      {
        if (!v111)
        {
          v110 = v101[2];
          goto LABEL_203;
        }
        v259 = v110;
        if (--v111 >= *((unsigned int *)v101 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x1983350B8);
        }
        v113 = (unint64_t **)(*v101 + v112 - 48);
        LODWORD(v284) = 0;
        __src = v108;
        v256 = v108;
        v109 = JSC::DFG::LazyJSValue::strictEqual(v113, (WTF **)&__src, v3);
        v108 = v256;
        v110 = v259;
        v112 -= 32;
        if (v109 == 1)
        {
          if (v111 >= *((unsigned int *)v101 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1983350C0);
          }
          v110 = *(_QWORD *)(*v101 + v112);
          goto LABEL_153;
        }
      }
      if (v109 != 2)
      {
LABEL_203:
        __src = &v285;
        v284 = 1;
        v261 = v110;
        v135 = 1;
        switch(*(_WORD *)(v105 + 18))
        {
          case 0x16C:
            goto LABEL_205;
          case 0x16D:
            v135 = 2;
            goto LABEL_205;
          case 0x16E:
            v135 = *(_DWORD *)(*(_QWORD *)(v105 + 72) + 12) + 1;
            goto LABEL_238;
          case 0x16F:
            v135 = *(_DWORD *)(*(_QWORD *)(v105 + 72) + 12);
LABEL_238:
            if (!v135)
              goto LABEL_239;
LABEL_205:
            v136 = 0;
            v137 = 0;
            v138 = (uint64_t *)(v105 + 72);
            break;
          default:
            goto LABEL_239;
        }
        while (1)
        {
          v276 = 0;
          v139 = *(unsigned __int16 *)(v105 + 18);
          if (v139 == 366)
          {
            v146 = (_QWORD *)*v138;
            v147 = *(_DWORD *)(*v138 + 12);
            if (v147 <= v136)
            {
              if (v147 != v136)
              {
                __break(0xC471u);
                JUMPOUT(0x198334F84);
              }
              v140 = v146 + 2;
              goto LABEL_214;
            }
            v141 = *v146 + 32 * v137;
          }
          else
          {
            if (v139 == 367)
            {
              if (*(_DWORD *)(*v138 + 12) <= v136)
              {
                __break(0xC471u);
                JUMPOUT(0x1983350E8);
              }
              v140 = (uint64_t *)(*(_QWORD *)*v138 + 8 * v137);
              v110 = v261;
              goto LABEL_214;
            }
            if (!v136)
            {
              v140 = (uint64_t *)(v105 + 72);
              if (v139 != 364)
                v140 = (uint64_t *)*v138;
              goto LABEL_214;
            }
            if (v136 != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1983350E0);
            }
            v141 = *v138;
          }
          v140 = (uint64_t *)(v141 + 16);
LABEL_214:
          v142 = *v140;
          v276 = v142;
          if (v142 != v110)
          {
            v143 = HIDWORD(v284);
            if (HIDWORD(v284))
            {
              v144 = __src;
              v145 = HIDWORD(v284);
              while (*v144 != v142)
              {
                ++v144;
                if (!--v145)
                  goto LABEL_219;
              }
            }
            else
            {
LABEL_219:
              if (HIDWORD(v284) == (_DWORD)v284)
              {
                WTF::Vector<JSC::DFG::BasicBlock *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>((uint64_t)&__src, (unint64_t)&v276);
                v110 = v261;
              }
              else
              {
                *((_QWORD *)__src + HIDWORD(v284)) = v142;
                HIDWORD(v284) = v143 + 1;
              }
            }
          }
          v136 = v137 + 1;
          v137 = (v137 + 1);
          if (v135 == v136)
          {
LABEL_239:
            v152 = v35 != v110 && *(_DWORD *)(v110 + 52) == 1;
            v153 = v266;
            v154 = *((_DWORD *)v266 + 236);
            if (v154)
              v155 = v154 == 2;
            else
              v155 = 1;
            if (!v155)
            {
              if ((_BYTE)qword_1ECF4C32A)
                v163 = 0;
              else
                v163 = byte_1ECF4C323 == 0;
              if (!v163 || BYTE2(qword_1ECF4C32A) != 0)
                WTF::dataLog<char [16]>("Dethreading DFG graph.\n");
              v165 = *((_DWORD *)v153 + 15);
              while (v165)
              {
                if (*((_DWORD *)v153 + 15) <= --v165)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983350F8);
                }
                v166 = *(_QWORD *)(*((_QWORD *)v153 + 6) + 8 * v165);
                if (v166)
                {
                  v167 = *(_DWORD *)(v166 + 36);
                  if (v167)
                  {
                    v168 = v167 - 1;
                    v169 = 8 * v168;
                    do
                    {
                      if (*(_DWORD *)(v166 + 36) <= v168)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198335100);
                      }
                      v170 = *(_QWORD **)(*(_QWORD *)(v166 + 24) + v169);
                      v170[3] = 0;
                      v170[4] = 0;
                      v170[5] = 0;
                      v169 -= 8;
                      --v168;
                    }
                    while (v168 != -1);
                  }
                }
              }
              *((_DWORD *)v153 + 236) = 0;
            }
            if (v152)
            {
              v156 = HIDWORD(v284);
              v279 = (WTF *)&v282;
              v280 = 1;
              v281 = HIDWORD(v284);
              if (HIDWORD(v284) < 2)
              {
                v157 = (WTF *)&v282;
              }
              else
              {
                if (HIDWORD(v284) >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983350F0);
                }
                v157 = (WTF *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v284)));
                v280 = v156;
                v279 = v157;
                v156 = HIDWORD(v284);
              }
              memcpy(v157, __src, 8 * v156);
              JSC::DFG::CFGSimplificationPhase::mergeBlocks((uint64_t)&v262, v35, v261, (uint64_t)&v279, v158, v159, v160, v161);
              v162 = v279;
              if (&v282 != (uint64_t *)v279 && v279)
              {
                v279 = 0;
                v280 = 0;
                WTF::fastFree((unint64_t)v162, v2, (uint64_t)v3, v4, v5, v6, v7, v8);
              }
            }
            else
            {
              JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)&v276, (const JSC::DFG::NodeOrigin *)v105);
              if (HIDWORD(v284))
              {
                v175 = HIDWORD(v284) - 1;
                v176 = 8 * (HIDWORD(v284) - 1);
                do
                {
                  if (HIDWORD(v284) <= v175)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198335108);
                  }
                  v177 = *(_QWORD *)((char *)__src + v176);
                  v178 = v276;
                  if ((v276 & 1) != 0)
                  {
                    v240 = *(_QWORD *)(v276 & 0xFFFFFFFF8);
                    if ((v276 & 2) != 0
                      || ((v241 = *(unsigned int *)((v276 & 0xFFFFFFFF8) + 8), (_DWORD)v241 != 0x3FFFFFFF)
                        ? (v242 = (_DWORD)v241 == -1)
                        : (v242 = 1),
                          v242))
                    {
                      v243 = 2;
                    }
                    else if (v241 >> 28)
                    {
                      v254 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v254 = v240;
                      *(_DWORD *)(v254 + 8) = v241;
                      v243 = 1;
                      v240 = v254;
                    }
                    else
                    {
                      v243 = *(_QWORD *)(v276 & 0xFFFFFFFF8);
                      v240 = v241 << 36;
                    }
                    v178 = v240 | v243;
                  }
                  v274[0] = v178;
                  v179 = v277;
                  if ((v277 & 1) != 0)
                  {
                    v244 = *(_QWORD *)(v277 & 0xFFFFFFFF8);
                    if ((v277 & 2) != 0
                      || ((v245 = *(unsigned int *)((v277 & 0xFFFFFFFF8) + 8), (_DWORD)v245 != 0x3FFFFFFF)
                        ? (v246 = (_DWORD)v245 == -1)
                        : (v246 = 1),
                          v246))
                    {
                      v247 = 2;
                    }
                    else if (v245 >> 28)
                    {
                      v255 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v255 = v244;
                      *(_DWORD *)(v255 + 8) = v245;
                      v247 = 1;
                      v244 = v255;
                    }
                    else
                    {
                      v247 = *(_QWORD *)(v277 & 0xFFFFFFFF8);
                      v244 = v245 << 36;
                    }
                    v179 = v244 | v247;
                    v180 = (v244 | v247) & 1;
                  }
                  else
                  {
                    v180 = 0;
                  }
                  v274[1] = v179;
                  v275 = v278;
                  JSC::DFG::CFGSimplificationPhase::jettisonBlock((uint64_t)&v262, (void *)v35, v177, (uint64_t)v274, v171, v172, v173, v174);
                  if (v180 && (v179 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v179 & 0xFFFFFFFF8, v181, v182, v183, v171, v172, v173, v174);
                  if ((v178 & 1) != 0 && (v178 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v178 & 0xFFFFFFFF8, v181, v182, v183, v171, v172, v173, v174);
                  v176 -= 8;
                  --v175;
                }
                while (v175 != -1);
              }
              v184 = v266;
              JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v273, (const JSC::DFG::NodeOrigin *)&v276);
              JSC::DFG::BasicBlock::replaceTerminal<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(v35, v184, (uint64_t)v273, v261, v185, v186, v187, v188);
              JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v273, v189, v190, v191, v192, v193, v194, v195);
              JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v276, v196, v197, v198, v199, v200, v201, v202);
            }
            v52 = __src;
            if (&v285 != __src && __src)
            {
              __src = 0;
              LODWORD(v284) = 0;
              goto LABEL_236;
            }
            goto LABEL_115;
          }
        }
      }
LABEL_28:
      ++v11;
      v10 = v266;
    }
    while (v11 < *((unsigned int *)v266 + 15));
    if ((v12 & 1) == 0)
      goto LABEL_5;
    JSC::DFG::Graph::invalidateCFG(v266, v2, (uint64_t)v3, v4, v5, v6, v7, v8);
    v21 = v266;
    v22 = *((_DWORD *)v266 + 15);
    if (v22)
    {
      v23 = v22 - 1;
      v24 = 8 * (v22 - 1);
      do
      {
        if (*((_DWORD *)v21 + 15) <= v23)
        {
          __break(0xC471u);
          JUMPOUT(0x198334FCCLL);
        }
        v25 = *(_QWORD *)(*((_QWORD *)v21 + 6) + v24);
        if (v25)
        {
          *(_BYTE *)(v25 + 21) = 0;
          if (*(_DWORD *)(v25 + 48))
          {
            if (*(_DWORD *)(v25 + 52))
              *(_DWORD *)(v25 + 52) = 0;
            v26 = *(_QWORD *)(v25 + 40);
            if (v25 + 56 != v26 && v26 != 0)
            {
              *(_QWORD *)(v25 + 40) = 0;
              *(_DWORD *)(v25 + 48) = 0;
              WTF::fastFree(v26, v14, v15, v16, v17, v18, v19, v20);
              v26 = *(_QWORD *)(v25 + 40);
            }
            if (!v26)
            {
              *(_QWORD *)(v25 + 40) = v25 + 56;
              *(_DWORD *)(v25 + 48) = 2;
            }
          }
        }
        v24 -= 8;
        --v23;
      }
      while (v23 != -1);
    }
    JSC::DFG::Graph::determineReachability(v21, v14, v15, v16, v17, v18, v19, v20);
    JSC::DFG::Graph::killUnreachableBlocks(v266, v28, v29, v30, v31, v32, v33, v34);
    v13 = 1;
LABEL_6:
    if (HIBYTE(qword_1ECF4C32A))
      JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v262, (uint64_t)v2, (uint64_t)v3, v4, v5, v6, v7, v8);
  }
  while ((v13 & 1) != 0);
  if ((v9 & 1) != 0)
  {
    if (qword_1ECF4C32A | byte_1ECF4C323
      || (BYTE1(qword_1ECF4C32A) ? (v98 = (*(_DWORD *)(*((_QWORD *)v266 + 3) + 16) & 0xFFFFFFFE) == 4) : (v98 = 0),
          !v98 ? (v99 = BYTE2(qword_1ECF4C32A) == 0) : (v99 = 0),
          !v99))
    {
      v296 = v267;
      WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v266 + 1088, "Phase ", (uint64_t)&v296, " changed the IR.\n", "\n");
    }
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v270);
  if (HIBYTE(qword_1ECF4C32A) && !v268)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v262, (uint64_t)v89, v90, v91, v92, v93, v94, v95);
  v96 = v269;
  v269 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 1)
      WTF::fastFree((unint64_t)v96, v89, v90, v91, v92, v93, v94, v95);
    else
      --*(_DWORD *)v96;
  }
  return v9 & 1;
}

BOOL JSC::DFG::performCPSRethreading(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD v29[386];
  _QWORD v30[386];
  _QWORD v31[386];
  uint64_t v32;

  v18 = -1;
  v19 = -1;
  v20 = 0;
  v21 = 256;
  v22 = MEMORY[0x1E0C80A78](this, a2);
  v23 = "CPS rethreading";
  v24 = 16;
  v25 = 0;
  v26 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v18);
  v27 = v29;
  v28 = 128;
  v29[384] = v30;
  v29[385] = 128;
  v30[384] = v31;
  v30[385] = 128;
  v31[384] = &v32;
  v31[385] = 128;
  v9 = JSC::DFG::runAndLog<JSC::DFG::CPSRethreadingPhase>((uint64_t)&v18, v2, v3, v4, v5, v6, v7, v8);
  JSC::DFG::CPSRethreadingPhase::~CPSRethreadingPhase((JSC::DFG::CPSRethreadingPhase *)&v18, v10, v11, v12, v13, v14, v15, v16);
  return v9;
}

uint64_t JSC::DFG::performLocalCSE(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  JSC::DFG::_anonymous_namespace_::ImpureMap *v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  int v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v101;
  unsigned int v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  BOOL v112;
  BOOL v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF *v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF *v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  WTF *v138;
  WTF *v139;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  void *v144;
  BOOL v145;
  JSC::DFG::_anonymous_namespace_::ImpureMap *v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  JSC::DFG::_anonymous_namespace_::ImpureMap *v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  int v169;
  int v170;
  unsigned int v171;
  int v172;
  uint64_t v173;
  uint64_t Replacement;
  unint64_t v175;
  unint64_t v176;
  unsigned int v177;
  uint64_t v178;
  int v179;
  int v180;
  int v181;
  unsigned int v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  int v188;
  uint64_t v189;
  void *__src;
  unint64_t __srca;
  unsigned int v192;
  int v193;
  uint64_t v194;
  JSC::DFG::_anonymous_namespace_::ImpureMap *v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  __int16 v199;
  uint64_t v200;
  __int128 v201;
  char v202;
  WTF *v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  _DWORD v208[1402];
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  int v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  int v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  int v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  int v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  int v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  int v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  int v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  int v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  int v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  int v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  int v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  int v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  int v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  int v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  int v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  int v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  int v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  int v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  int v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  int v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  int v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  int v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  int v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  int v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  int v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  int v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  int v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  int v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  int v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  int v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  int v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  int v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  int v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  int v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  int v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  int v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  int v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  int v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  int v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  int v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  int v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  int v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  int v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  int v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  int v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  int v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  int v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  int v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  int v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  int v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  int v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  int v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  int v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  int v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  int v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  int v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  int v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  int v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  int v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  int v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  int v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  int v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  int v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  int v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  int v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  int v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  int v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  int v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  int v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  int v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  int v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  int v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  int v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  int v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  int v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  int v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  int v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  int v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  int v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  int v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  int v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  int v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  int v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  int v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  int v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  int v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  int v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  int v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  int v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  int v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  int v663;
  __int128 v664;
  __int128 v665;
  __int128 v666;
  __int128 v667;
  int v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  int v673;
  __int128 v674;
  __int128 v675;
  __int128 v676;
  __int128 v677;
  int v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  int v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  int v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  int v693;
  __int128 v694;
  __int128 v695;
  __int128 v696;
  __int128 v697;
  int v698;
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  int v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  uint64_t v708;
  uint64_t v709;
  WTF *v710;
  uint64_t v711;
  _BYTE v712[128];
  uint64_t v713;
  char v714;
  uint64_t v715;
  uint64_t v716;
  _QWORD v717[4];
  uint64_t v718;
  WTF *v719;
  uint64_t v720;
  _BYTE v721[128];
  _QWORD v722[9];
  WTF *v723;
  uint64_t v724;
  _BYTE v725[128];
  _QWORD v726[2];
  __int128 v727;
  double v728;
  __int128 v729;
  uint64_t v730;
  __int128 v731;
  __int128 v732;
  __int128 v733;
  uint64_t v734;
  __int128 v735;
  __int128 v736;
  uint64_t *v737;

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v196 = -1;
  v197 = -1;
  v198 = 0;
  v199 = 256;
  v200 = v2;
  *(_QWORD *)&v201 = "local common subexpression elimination";
  *((_QWORD *)&v201 + 1) = 39;
  v202 = 0;
  v203 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v196);
  v204 = v2;
  v5 = -5600;
  do
  {
    v6 = (char *)&v196 + v5;
    *((_WORD *)v6 + 2852) = 433;
    *((_OWORD *)v6 + 357) = 0uLL;
    *((_OWORD *)v6 + 358) = 0uLL;
    *((_OWORD *)v6 + 359) = 0uLL;
    v5 += 56;
  }
  while (v5);
  v208[1400] = 0;
  v209 = 0u;
  v210 = 0u;
  v211 = 0u;
  v212 = 0u;
  v213 = 0;
  v214 = 0u;
  v215 = 0u;
  v216 = 0u;
  v217 = 0u;
  v218 = 0;
  v219 = 0u;
  v220 = 0u;
  v221 = 0u;
  v222 = 0u;
  v223 = 0;
  v224 = 0u;
  v225 = 0u;
  v226 = 0u;
  v227 = 0u;
  v228 = 0;
  v233 = 0;
  v232 = 0u;
  v231 = 0u;
  v230 = 0u;
  v229 = 0u;
  v237 = 0u;
  v236 = 0u;
  v235 = 0u;
  v234 = 0u;
  v238 = 0;
  v243 = 0;
  v242 = 0u;
  v241 = 0u;
  v240 = 0u;
  v239 = 0u;
  v247 = 0u;
  v246 = 0u;
  v245 = 0u;
  v244 = 0u;
  v248 = 0;
  v253 = 0;
  v252 = 0u;
  v251 = 0u;
  v250 = 0u;
  v249 = 0u;
  v254 = 0u;
  v255 = 0u;
  v256 = 0u;
  v257 = 0u;
  v258 = 0;
  v259 = 0u;
  v260 = 0u;
  v261 = 0u;
  v262 = 0u;
  v263 = 0;
  v264 = 0u;
  v265 = 0u;
  v266 = 0u;
  v267 = 0u;
  v268 = 0;
  v273 = 0;
  v272 = 0u;
  v271 = 0u;
  v270 = 0u;
  v269 = 0u;
  v277 = 0u;
  v276 = 0u;
  v275 = 0u;
  v274 = 0u;
  v278 = 0;
  v283 = 0;
  v282 = 0u;
  v281 = 0u;
  v280 = 0u;
  v279 = 0u;
  v287 = 0u;
  v286 = 0u;
  v285 = 0u;
  v284 = 0u;
  v288 = 0;
  v293 = 0;
  v292 = 0u;
  v291 = 0u;
  v290 = 0u;
  v289 = 0u;
  v297 = 0u;
  v296 = 0u;
  v295 = 0u;
  v294 = 0u;
  v298 = 0;
  v303 = 0;
  v302 = 0u;
  v301 = 0u;
  v300 = 0u;
  v299 = 0u;
  v307 = 0u;
  v306 = 0u;
  v305 = 0u;
  v304 = 0u;
  v308 = 0;
  v313 = 0;
  v312 = 0u;
  v311 = 0u;
  v310 = 0u;
  v309 = 0u;
  v317 = 0u;
  v316 = 0u;
  v315 = 0u;
  v314 = 0u;
  v318 = 0;
  v323 = 0;
  v322 = 0u;
  v321 = 0u;
  v320 = 0u;
  v319 = 0u;
  v327 = 0u;
  v326 = 0u;
  v325 = 0u;
  v324 = 0u;
  v328 = 0;
  v333 = 0;
  v332 = 0u;
  v331 = 0u;
  v330 = 0u;
  v329 = 0u;
  v337 = 0u;
  v336 = 0u;
  v335 = 0u;
  v334 = 0u;
  v338 = 0;
  v343 = 0;
  v342 = 0u;
  v341 = 0u;
  v340 = 0u;
  v339 = 0u;
  v347 = 0u;
  v346 = 0u;
  v345 = 0u;
  v344 = 0u;
  v348 = 0;
  v353 = 0;
  v352 = 0u;
  v351 = 0u;
  v350 = 0u;
  v349 = 0u;
  v357 = 0u;
  v356 = 0u;
  v355 = 0u;
  v354 = 0u;
  v358 = 0;
  v363 = 0;
  v362 = 0u;
  v361 = 0u;
  v360 = 0u;
  v359 = 0u;
  v367 = 0u;
  v366 = 0u;
  v365 = 0u;
  v364 = 0u;
  v368 = 0;
  v373 = 0;
  v372 = 0u;
  v371 = 0u;
  v370 = 0u;
  v369 = 0u;
  v377 = 0u;
  v376 = 0u;
  v375 = 0u;
  v374 = 0u;
  v378 = 0;
  v383 = 0;
  v382 = 0u;
  v381 = 0u;
  v380 = 0u;
  v379 = 0u;
  v387 = 0u;
  v386 = 0u;
  v385 = 0u;
  v384 = 0u;
  v388 = 0;
  v393 = 0;
  v392 = 0u;
  v391 = 0u;
  v390 = 0u;
  v389 = 0u;
  v397 = 0u;
  v396 = 0u;
  v395 = 0u;
  v394 = 0u;
  v398 = 0;
  v403 = 0;
  v402 = 0u;
  v401 = 0u;
  v400 = 0u;
  v399 = 0u;
  v407 = 0u;
  v406 = 0u;
  v405 = 0u;
  v404 = 0u;
  v408 = 0;
  v413 = 0;
  v412 = 0u;
  v411 = 0u;
  v410 = 0u;
  v409 = 0u;
  v417 = 0u;
  v416 = 0u;
  v415 = 0u;
  v414 = 0u;
  v418 = 0;
  v423 = 0;
  v422 = 0u;
  v421 = 0u;
  v420 = 0u;
  v419 = 0u;
  v427 = 0u;
  v426 = 0u;
  v425 = 0u;
  v424 = 0u;
  v428 = 0;
  v433 = 0;
  v432 = 0u;
  v431 = 0u;
  v430 = 0u;
  v429 = 0u;
  v437 = 0u;
  v436 = 0u;
  v435 = 0u;
  v434 = 0u;
  v438 = 0;
  v443 = 0;
  v442 = 0u;
  v441 = 0u;
  v440 = 0u;
  v439 = 0u;
  v447 = 0u;
  v446 = 0u;
  v445 = 0u;
  v444 = 0u;
  v448 = 0;
  v453 = 0;
  v452 = 0u;
  v451 = 0u;
  v450 = 0u;
  v449 = 0u;
  v457 = 0u;
  v456 = 0u;
  v455 = 0u;
  v461 = 0u;
  v460 = 0u;
  v459 = 0u;
  v467 = 0u;
  v466 = 0u;
  v465 = 0u;
  v464 = 0u;
  v468 = 0;
  v473 = 0;
  v472 = 0u;
  v471 = 0u;
  v470 = 0u;
  v469 = 0u;
  v477 = 0u;
  v476 = 0u;
  v475 = 0u;
  v474 = 0u;
  v478 = 0;
  v483 = 0;
  v482 = 0u;
  v481 = 0u;
  v480 = 0u;
  v479 = 0u;
  v487 = 0u;
  v486 = 0u;
  v485 = 0u;
  v484 = 0u;
  v488 = 0;
  v493 = 0;
  v492 = 0u;
  v491 = 0u;
  v490 = 0u;
  v489 = 0u;
  v497 = 0u;
  v496 = 0u;
  v495 = 0u;
  v494 = 0u;
  v498 = 0;
  v503 = 0;
  v502 = 0u;
  v501 = 0u;
  v500 = 0u;
  v499 = 0u;
  v507 = 0u;
  v506 = 0u;
  v505 = 0u;
  v504 = 0u;
  v508 = 0;
  v513 = 0;
  v512 = 0u;
  v511 = 0u;
  v510 = 0u;
  v509 = 0u;
  v517 = 0u;
  v516 = 0u;
  v515 = 0u;
  v514 = 0u;
  v518 = 0;
  v523 = 0;
  v522 = 0u;
  v521 = 0u;
  v520 = 0u;
  v519 = 0u;
  v527 = 0u;
  v526 = 0u;
  v525 = 0u;
  v524 = 0u;
  v528 = 0;
  v533 = 0;
  v532 = 0u;
  v531 = 0u;
  v530 = 0u;
  v529 = 0u;
  v537 = 0u;
  v536 = 0u;
  v535 = 0u;
  v534 = 0u;
  v538 = 0;
  v543 = 0;
  v542 = 0u;
  v541 = 0u;
  v540 = 0u;
  v539 = 0u;
  v547 = 0u;
  v546 = 0u;
  v545 = 0u;
  v544 = 0u;
  v548 = 0;
  v553 = 0;
  v552 = 0u;
  v551 = 0u;
  v550 = 0u;
  v549 = 0u;
  v557 = 0u;
  v556 = 0u;
  v555 = 0u;
  v554 = 0u;
  v558 = 0;
  v563 = 0;
  v562 = 0u;
  v561 = 0u;
  v560 = 0u;
  v559 = 0u;
  v567 = 0u;
  v566 = 0u;
  v565 = 0u;
  v564 = 0u;
  v568 = 0;
  v573 = 0;
  v572 = 0u;
  v571 = 0u;
  v570 = 0u;
  v569 = 0u;
  v577 = 0u;
  v576 = 0u;
  v575 = 0u;
  v574 = 0u;
  v578 = 0;
  v583 = 0;
  v582 = 0u;
  v581 = 0u;
  v580 = 0u;
  v579 = 0u;
  v587 = 0u;
  v586 = 0u;
  v585 = 0u;
  v584 = 0u;
  v588 = 0;
  v593 = 0;
  v592 = 0u;
  v591 = 0u;
  v590 = 0u;
  v589 = 0u;
  v597 = 0u;
  v596 = 0u;
  v595 = 0u;
  v594 = 0u;
  v598 = 0;
  v603 = 0;
  v602 = 0u;
  v601 = 0u;
  v600 = 0u;
  v599 = 0u;
  v607 = 0u;
  v606 = 0u;
  v605 = 0u;
  v604 = 0u;
  v608 = 0;
  v613 = 0;
  v612 = 0u;
  v611 = 0u;
  v610 = 0u;
  v609 = 0u;
  v617 = 0u;
  v616 = 0u;
  v615 = 0u;
  v614 = 0u;
  v618 = 0;
  v623 = 0;
  v622 = 0u;
  v621 = 0u;
  v620 = 0u;
  v619 = 0u;
  v627 = 0u;
  v626 = 0u;
  v625 = 0u;
  v624 = 0u;
  v628 = 0;
  v633 = 0;
  v632 = 0u;
  v631 = 0u;
  v630 = 0u;
  v629 = 0u;
  v637 = 0u;
  v636 = 0u;
  v635 = 0u;
  v634 = 0u;
  v638 = 0;
  v643 = 0;
  v642 = 0u;
  v641 = 0u;
  v640 = 0u;
  v639 = 0u;
  v647 = 0u;
  v646 = 0u;
  v645 = 0u;
  v644 = 0u;
  v648 = 0;
  v653 = 0;
  v652 = 0u;
  v651 = 0u;
  v650 = 0u;
  v649 = 0u;
  v657 = 0u;
  v656 = 0u;
  v655 = 0u;
  v654 = 0u;
  v658 = 0;
  v663 = 0;
  v662 = 0u;
  v661 = 0u;
  v660 = 0u;
  v659 = 0u;
  v667 = 0u;
  v666 = 0u;
  v665 = 0u;
  v664 = 0u;
  v668 = 0;
  v673 = 0;
  v672 = 0u;
  v671 = 0u;
  v670 = 0u;
  v669 = 0u;
  v677 = 0u;
  v676 = 0u;
  v675 = 0u;
  v674 = 0u;
  v678 = 0;
  v683 = 0;
  v682 = 0u;
  v681 = 0u;
  v680 = 0u;
  v679 = 0u;
  v687 = 0u;
  v686 = 0u;
  v685 = 0u;
  v684 = 0u;
  v688 = 0;
  v693 = 0;
  v692 = 0u;
  v691 = 0u;
  v690 = 0u;
  v689 = 0u;
  v697 = 0u;
  v696 = 0u;
  v695 = 0u;
  v694 = 0u;
  v698 = 0;
  v703 = 0;
  v702 = 0u;
  v701 = 0u;
  v700 = 0u;
  v699 = 0u;
  v707 = 0u;
  v706 = 0u;
  v705 = 0u;
  v704 = 0u;
  v708 = 0;
  v709 = v2;
  v710 = (WTF *)v712;
  v711 = 8;
  v713 = v2;
  memset(v717, 0, sizeof(v717));
  v718 = v2;
  v719 = (WTF *)v721;
  v720 = 8;
  v722[0] = v2;
  memset(&v722[4], 0, 32);
  v722[8] = v2;
  v723 = (WTF *)v725;
  v724 = 8;
  v726[0] = "DFG";
  v726[1] = 4;
  v454 = 0u;
  v458 = 0;
  v462 = 0u;
  v727 = v201;
  v728 = 0.0;
  v463 = 0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v160 = mach_absolute_time();
    v162 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v162 != -1)
    {
      *(_QWORD *)&v733 = &v737;
      *(_QWORD *)&v729 = &v733;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v729, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v161) = dword_1ECF4400C;
    v728 = (double)(v160 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v161 * 1000000000.0);
  }
  v7 = v200;
  v8 = *(unsigned int *)(v200 + 60);
  if (!(_DWORD)v8)
    goto LABEL_221;
  do
  {
    if (*(_DWORD *)(v7 + 60) <= --v8)
    {
      __break(0xC471u);
      JUMPOUT(0x198337008);
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v8);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 + 36);
      if (v10)
      {
        v11 = v10 - 1;
        v12 = 8 * v11;
        do
        {
          if (*(_DWORD *)(v9 + 36) <= v11)
          {
            __break(0xC471u);
            JUMPOUT(0x198336FF0);
          }
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 24) + v12) + 88) = 0;
          v12 -= 8;
          --v11;
        }
        while (v11 != -1);
      }
      v13 = *(_DWORD *)(v9 + 220);
      if (v13)
      {
        v14 = v13 - 1;
        v15 = 8 * v14;
        do
        {
          if (*(_DWORD *)(v9 + 220) <= v14)
          {
            __break(0xC471u);
            JUMPOUT(0x198336D84);
          }
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 208) + v15) + 88) = 0;
          v15 -= 8;
          --v14;
        }
        while (v14 != -1);
      }
    }
  }
  while ((_DWORD)v8);
  v16 = *(_DWORD *)(v7 + 60);
  if (v16)
  {
    v17 = 0;
    v18 = 16;
    v19 = 0x12400001800284;
    v20 = &v733;
    v21 = (JSC::DFG::_anonymous_namespace_::ImpureMap *)&v717[1];
    do
    {
      if (*(_DWORD *)(v200 + 60) <= --v16)
      {
        __break(0xC471u);
        JUMPOUT(0x198337010);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v200 + 48) + 8 * v16);
      if (v22)
      {
        v23 = *(_DWORD *)(v22 + 220);
        if (v23 > 0x64)
        {
          v58 = v17;
          if (v23 > dword_1ECF4C460)
          {
            v163 = v21;
            v21 = v163;
            v20 = &v733;
            v19 = 0x12400001800284;
            LODWORD(v17) = v58;
            v18 = 16;
          }
          else
          {
            v59 = v717[0];
            if (v717[0])
            {
              v717[0] = 0;
              v146 = v21;
              WTF::fastFree(v59 - 16, (void *)v3, v4, v17, 16, 0x12400001800284, (uint64_t)&v733, (uint64_t)v21);
              v21 = v146;
            }
            v60 = (uint64_t *)v21;
            v714 = 0;
            v716 = v22;
            if (*(_DWORD *)(v22 + 220))
            {
              v61 = 0;
              do
              {
                v62 = *(_QWORD *)(*(_QWORD *)(v22 + 208) + 8 * v61);
                v715 = v62;
                v63 = v713;
                v64 = *(_DWORD *)(v62 + 56);
                v65 = (unint64_t *)(v62 + 24);
                v66 = *(_QWORD *)(v62 + 24);
                if ((v64 & 0x10) != 0)
                {
                  v67 = *(_QWORD *)(v62 + 32);
                  if ((int)v67 + (int)v66 > v66)
                  {
                    LODWORD(v87) = *(_DWORD *)(v713 + 164);
                    v88 = *(_QWORD *)(v62 + 24);
                    if (v87 <= v66)
                      v87 = v66;
                    else
                      v87 = v87;
                    do
                    {
                      if (v87 == v88)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1983370D8);
                      }
                      v89 = *(_QWORD *)(v63 + 152);
                      v90 = *(_QWORD *)(v89 + 8 * v88);
                      if ((v90 & 0xFF00FFFFFFFFFFFFLL) != 0)
                      {
                        v91 = *(_QWORD *)((v90 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
                        if (v91)
                        {
                          *(_QWORD *)(v89 + 8 * v88) = v91 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v90) << 48);
                          v66 = *(_QWORD *)(v62 + 24);
                          v67 = *(_QWORD *)(v62 + 32);
                        }
                      }
                      ++v88;
                    }
                    while (v88 < (v66 + v67));
                  }
                }
                else
                {
                  if ((v66 & 0xFF00FFFFFFFFFFFFLL) != 0)
                  {
                    v80 = *(_QWORD *)((v66 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
                    if (v80)
                    {
                      v81 = v80 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v66) << 48);
                      *v65 = v81;
                      v66 = v81;
                    }
                  }
                  v67 = *(_QWORD *)(v62 + 32);
                  if ((v67 & 0xFF00FFFFFFFFFFFFLL) != 0)
                  {
                    v82 = *(_QWORD *)((v67 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
                    if (v82)
                    {
                      v83 = v82 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v67) << 48);
                      *(_QWORD *)(v62 + 32) = v83;
                      v67 = v83;
                    }
                  }
                  v68 = *(_QWORD *)(v62 + 40);
                  if ((v68 & 0xFF00FFFFFFFFFFFFLL) != 0)
                  {
                    v84 = *(_QWORD *)((v68 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
                    if (v84)
                      *(_QWORD *)(v62 + 40) = v84 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v68) << 48);
                  }
                }
                v69 = *(unsigned __int16 *)(v62 + 18);
                if ((v69 - 4) >= 2)
                {
                  if ((v69 - 101) < 2)
                  {
                    v177 = *(_DWORD *)(v63 + 164);
                    if (v177 <= v66)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198337118);
                    }
                    if (v177 <= (int)v66 + 1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198337120);
                    }
                    v178 = *(_QWORD *)(v63 + 152);
                    v189 = *(_QWORD *)(v178 + 8 * (v66 + 1));
                    __srca = *(_QWORD *)(v178 + 8 * v66);
                    v179 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(v64 & 7));
                    v62 = v715;
                    if (*(_WORD *)(v715 + 18) == 146)
                      v180 = *(_DWORD *)(v715 + 80);
                    else
                      v180 = *(_DWORD *)(v715 + 72);
                    v181 = v180 - 7;
                    v182 = BYTE2(v180);
                    switch(v181)
                    {
                      case 0:
                        if (v182 <= 1)
                        {
                          v183 = v179;
                          v184 = 16400;
                          goto LABEL_274;
                        }
                        break;
                      case 1:
                        if (v182 <= 1)
                        {
                          if (v182)
                            v183 = 13;
                          else
                            v183 = 14;
                          v184 = 16401;
                          goto LABEL_274;
                        }
                        break;
                      case 2:
                        if (v182 <= 1)
                        {
                          v183 = v179;
                          v184 = 16402;
                          goto LABEL_274;
                        }
                        break;
                      case 7:
                      case 8:
                      case 9:
                      case 10:
                      case 11:
                      case 12:
                      case 13:
                      case 14:
                      case 15:
                        if (v182 <= 1)
                        {
                          v183 = v179;
                          v184 = 16406;
LABEL_274:
                          JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v733, v183, v184, __srca & 0xFF00FFFFFFFFFFFFLL, v189 & 0xFF00FFFFFFFFFFFFLL, 0);
                          if ((WORD4(v733) & 0x7FFF) != 0)
                          {
                            v729 = v733;
                            v730 = v734;
                            v731 = v735;
                            v732 = v736;
                            v187 = v186;
                            v62 = v715;
                            if (v187 > 3 || v185)
                              *(_WORD *)(v715 + 18) = 103;
                          }
                          else
                          {
                            v62 = v715;
                          }
                        }
                        break;
                      default:
                        break;
                    }
                  }
                  *(_QWORD *)&v733 = &v713;
                  v737 = &v713;
                }
                else
                {
                  v70 = v66 & 0xFF00FFFFFFFFFFFFLL;
                  if ((v64 & 0x10) != 0)
                  {
                    if ((_DWORD)v67)
                    {
                      v98 = 0;
                      v102 = 0;
                      v158 = *(_DWORD *)(v63 + 164);
                      v159 = *(_QWORD *)(v63 + 152);
                      do
                      {
                        v94 = v98 + *(_DWORD *)v65;
                        if (v158 <= v94)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198337108);
                        }
                        v95 = *(_QWORD *)(v159 + 8 * v94);
                        if ((v95 & 0xFF00FFFFFFFFFFFFLL) != 0)
                        {
                          v96 = 0;
                          if ((v95 & 0x1000000000000) == 0)
                          {
                            v97 = (v95 >> 50) & 0x3F;
                            if ((_DWORD)v97)
                            {
                              v46 = v97 > 0x34;
                              v99 = (1 << v97) & 0x12400001800284;
                              if (v46 || v99 == 0)
                              {
                                v101 = v102 + *(_DWORD *)v65;
                                if (v158 <= v101)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x198337110);
                                }
                                ++v102;
                                v96 = *(_QWORD *)(v159 + 8 * v101);
                                *(_QWORD *)(v159 + 8 * v101) = v95;
                              }
                            }
                          }
                          *(_QWORD *)(v159 + 8 * v94) = v96;
                          v67 = *(_QWORD *)(v62 + 32);
                        }
                        ++v98;
                      }
                      while (v98 < v67);
                    }
                    else
                    {
                      v102 = 0;
                    }
                    *(_WORD *)(v62 + 18) = 25;
                    *(_DWORD *)(v62 + 56) = 24;
                    *(_QWORD *)(v62 + 32) = v102;
                  }
                  else
                  {
                    v733 = 0uLL;
                    v734 = 0;
                    if (v70)
                    {
                      v71 = 0;
                      if ((v66 & 0x1000000000000) == 0)
                      {
                        v72 = (v66 >> 50) & 0x3F;
                        if ((_DWORD)v72)
                        {
                          v46 = v72 > 0x34;
                          v85 = (1 << v72) & 0x12400001800284;
                          if (v46 || v85 == 0)
                          {
                            *(_QWORD *)&v733 = v66;
                            v71 = 1;
                          }
                        }
                      }
                      if ((v67 & 0xFF00FFFFFFFFFFFFLL) != 0)
                      {
                        if ((v67 & 0x1000000000000) == 0)
                        {
                          v73 = (v67 >> 50) & 0x3F;
                          if ((_DWORD)v73)
                          {
                            v46 = v73 > 0x34;
                            v92 = (1 << v73) & 0x12400001800284;
                            if (v46 || v92 == 0)
                              *((_QWORD *)&v733 + v71++) = v67;
                          }
                        }
                        v74 = *(_QWORD *)(v62 + 40);
                        v75 = (v74 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v74 & 0x1000000000000) == 0;
                        v76 = (v74 >> 50) & 0x3F;
                        if (v75 && (_DWORD)v76 != 0)
                        {
                          v46 = v76 > 0x34;
                          v78 = (1 << v76) & 0x12400001800284;
                          if (v46 || v78 == 0)
                            *((_QWORD *)&v733 + v71) = v74;
                        }
                      }
                    }
                    *(_OWORD *)v65 = v733;
                    *(_QWORD *)(v62 + 40) = v734;
                    *(_WORD *)(v62 + 18) = 24;
                    *(_DWORD *)(v62 + 56) = 8;
                  }
                  *(_QWORD *)(v62 + 88) = v70;
                  v714 = 1;
                }
                ++v61;
              }
              while (v61 < *(unsigned int *)(v22 + 220));
            }
            JSC::DFG::InsertionSet::execute((JSC::DFG::InsertionSet *)&v718, (JSC::DFG::BasicBlock *)v22);
            v20 = &v733;
            v19 = 0x12400001800284;
            v103 = v714 != 0;
            LODWORD(v17) = v58;
            v18 = 16;
            v21 = (JSC::DFG::_anonymous_namespace_::ImpureMap *)v60;
          }
        }
        else
        {
          v708 = 0;
          v205 = 0;
          v207 = v22;
          if (v23)
          {
            v24 = 0;
            do
            {
              v3 = *(_QWORD *)(*(_QWORD *)(v22 + 208) + 8 * v24);
              v206 = v3;
              v25 = v204;
              v26 = *(_DWORD *)(v3 + 56);
              v27 = (unint64_t *)(v3 + 24);
              v28 = *(_QWORD *)(v3 + 24);
              if ((v26 & 0x10) != 0)
              {
                v29 = *(_QWORD *)(v3 + 32);
                if ((int)v29 + (int)v28 > v28)
                {
                  LODWORD(v49) = *(_DWORD *)(v204 + 164);
                  v50 = *(_QWORD *)(v3 + 24);
                  if (v49 <= v28)
                    v49 = v28;
                  else
                    v49 = v49;
                  do
                  {
                    if (v49 == v50)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198337060);
                    }
                    v51 = *(_QWORD *)(v25 + 152);
                    v52 = *(_QWORD *)(v51 + 8 * v50);
                    if ((v52 & 0xFF00FFFFFFFFFFFFLL) != 0)
                    {
                      v53 = *(_QWORD *)((v52 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
                      if (v53)
                      {
                        *(_QWORD *)(v51 + 8 * v50) = v53 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v52) << 48);
                        v28 = *(_QWORD *)(v3 + 24);
                        v29 = *(_QWORD *)(v3 + 32);
                      }
                    }
                    ++v50;
                  }
                  while (v50 < (v28 + v29));
                }
              }
              else
              {
                if ((v28 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v41 = *(_QWORD *)((v28 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
                  if (v41)
                  {
                    v42 = v41 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v28) << 48);
                    *v27 = v42;
                    v28 = v42;
                  }
                }
                v29 = *(_QWORD *)(v3 + 32);
                if ((v29 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v43 = *(_QWORD *)((v29 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
                  if (v43)
                  {
                    v44 = v43 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v29) << 48);
                    *(_QWORD *)(v3 + 32) = v44;
                    v29 = v44;
                  }
                }
                v30 = *(_QWORD *)(v3 + 40);
                if ((v30 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v45 = *(_QWORD *)((v30 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
                  if (v45)
                    *(_QWORD *)(v3 + 40) = v45 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v30) << 48);
                }
              }
              v31 = *(unsigned __int16 *)(v3 + 18);
              if ((v31 - 4) >= 2)
              {
                v195 = v21;
                v193 = v17;
                if ((v31 - 101) < 2)
                {
                  v164 = *(_DWORD *)(v25 + 164);
                  if (v164 <= v28)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198337068);
                  }
                  if (v164 <= (int)v28 + 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198337078);
                  }
                  v165 = *(_QWORD *)(v25 + 152);
                  v166 = *(_QWORD *)(v165 + 8 * v28);
                  v167 = *(_QWORD *)(v165 + 8 * (v28 + 1));
                  v168 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(v26 & 7));
                  v3 = v206;
                  if (*(_WORD *)(v206 + 18) == 146)
                    v169 = *(_DWORD *)(v206 + 80);
                  else
                    v169 = *(_DWORD *)(v206 + 72);
                  v170 = v169 - 7;
                  v171 = BYTE2(v169);
                  switch(v170)
                  {
                    case 0:
                      if (v171 <= 1)
                      {
                        v172 = v168;
                        v173 = 16400;
                        goto LABEL_262;
                      }
                      break;
                    case 1:
                      if (v171 <= 1)
                      {
                        if (v171)
                          v172 = 13;
                        else
                          v172 = 14;
                        v173 = 16401;
                        goto LABEL_262;
                      }
                      break;
                    case 2:
                      if (v171 <= 1)
                      {
                        v172 = v168;
                        v173 = 16402;
                        goto LABEL_262;
                      }
                      break;
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                      if (v171 <= 1)
                      {
                        v172 = v168;
                        v173 = 16406;
LABEL_262:
                        JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v733, v172, v173, v166 & 0xFF00FFFFFFFFFFFFLL, v167 & 0xFF00FFFFFFFFFFFFLL, 0);
                        if ((WORD4(v733) & 0x7FFF) != 0)
                        {
                          v729 = v733;
                          v730 = v734;
                          v731 = v735;
                          v732 = v736;
                          v176 = v175;
                          v3 = v206;
                          if (v176 > 3 || Replacement)
                            *(_WORD *)(v206 + 18) = 103;
                        }
                        else
                        {
                          v3 = v206;
                        }
                      }
                      break;
                    default:
                      break;
                  }
                }
                *(_QWORD *)&v733 = &v204;
                v737 = &v204;
                LODWORD(v17) = v193;
                v18 = 16;
                v19 = 0x12400001800284;
                v20 = &v733;
                v21 = v195;
              }
              else
              {
                v32 = v28 & 0xFF00FFFFFFFFFFFFLL;
                if ((v26 & 0x10) != 0)
                {
                  if ((_DWORD)v29)
                  {
                    v147 = 0;
                    v148 = 0;
                    v149 = *(_DWORD *)(v25 + 164);
                    v150 = *(_QWORD *)(v25 + 152);
                    do
                    {
                      v151 = v147 + *(_DWORD *)v27;
                      if (v149 <= v151)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198337070);
                      }
                      v152 = *(_QWORD *)(v150 + 8 * v151);
                      if ((v152 & 0xFF00FFFFFFFFFFFFLL) != 0)
                      {
                        v153 = 0;
                        if ((v152 & 0x1000000000000) == 0)
                        {
                          v154 = (v152 >> 50) & 0x3F;
                          if ((_DWORD)v154)
                          {
                            v4 = (v152 >> 50) & 0x3F;
                            v46 = v154 > 0x34;
                            v155 = (1 << v154) & 0x12400001800284;
                            if (v46 || v155 == 0)
                            {
                              v157 = v148 + *(_DWORD *)v27;
                              if (v149 <= v157)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x198337080);
                              }
                              ++v148;
                              v153 = *(_QWORD *)(v150 + 8 * v157);
                              *(_QWORD *)(v150 + 8 * v157) = v152;
                            }
                          }
                        }
                        *(_QWORD *)(v150 + 8 * v151) = v153;
                        v29 = *(_QWORD *)(v3 + 32);
                      }
                      ++v147;
                    }
                    while (v147 < v29);
                  }
                  else
                  {
                    v148 = 0;
                  }
                  *(_WORD *)(v3 + 18) = 25;
                  *(_DWORD *)(v3 + 56) = 24;
                  *(_QWORD *)(v3 + 32) = v148;
                }
                else
                {
                  v733 = 0uLL;
                  v734 = 0;
                  if (v32)
                  {
                    v34 = 0;
                    if ((v28 & 0x1000000000000) == 0)
                    {
                      v35 = (v28 >> 50) & 0x3F;
                      if ((_DWORD)v35)
                      {
                        v46 = v35 > 0x34;
                        v47 = (1 << v35) & 0x12400001800284;
                        if (v46 || v47 == 0)
                        {
                          *(_QWORD *)&v733 = v28;
                          v34 = 1;
                        }
                      }
                    }
                    if ((v29 & 0xFF00FFFFFFFFFFFFLL) != 0)
                    {
                      if ((v29 & 0x1000000000000) == 0)
                      {
                        v36 = (v29 >> 50) & 0x3F;
                        if ((_DWORD)v36)
                        {
                          v46 = v36 > 0x34;
                          v54 = (1 << v36) & 0x12400001800284;
                          if (v46 || v54 == 0)
                            *((_QWORD *)&v733 + v34++) = v29;
                        }
                      }
                      v37 = *(_QWORD *)(v3 + 40);
                      v38 = (v37 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v37 & 0x1000000000000) == 0;
                      v39 = (v37 >> 50) & 0x3F;
                      if (v38 && (_DWORD)v39 != 0)
                      {
                        v46 = v39 > 0x34;
                        v56 = (1 << v39) & 0x12400001800284;
                        if (v46 || v56 == 0)
                          *((_QWORD *)&v733 + v34) = v37;
                      }
                    }
                  }
                  *(_OWORD *)v27 = v733;
                  *(_QWORD *)(v3 + 40) = v734;
                  *(_WORD *)(v3 + 18) = 24;
                  *(_DWORD *)(v3 + 56) = 8;
                }
                *(_QWORD *)(v3 + 88) = v32;
                v205 = 1;
              }
              ++v24;
              v33 = *(unsigned int *)(v22 + 220);
            }
            while (v24 < v33);
          }
          else
          {
            v33 = 0;
          }
          v104 = HIDWORD(v711);
          if (HIDWORD(v711))
          {
            v105 = v33 + HIDWORD(v711);
            v106 = *(unsigned int *)(v22 + 216);
            if (v105 > v106)
            {
              v141 = v106 + (v106 >> 2);
              if (v141 >= 0x10)
                v142 = v141 + 1;
              else
                v142 = 16;
              if (v142 <= v105)
                v143 = v33 + HIDWORD(v711);
              else
                v143 = v142;
              v192 = v17;
              v194 = (uint64_t)v21;
              __src = *(void **)(v22 + 208);
              if (v143 < 9)
              {
                v144 = (void *)(v22 + 224);
                *(_QWORD *)(v22 + 208) = v22 + 224;
                *(_DWORD *)(v22 + 216) = 8;
              }
              else
              {
                if (v143 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198337130);
                }
                v188 = v143;
                v144 = (void *)WTF::fastMalloc((WTF *)(8 * v143));
                *(_DWORD *)(v22 + 216) = v188;
                *(_QWORD *)(v22 + 208) = v144;
              }
              memcpy(v144, __src, 8 * v33);
              v145 = (void *)(v22 + 224) == __src || __src == 0;
              LODWORD(v17) = v192;
              v18 = 16;
              v19 = 0x12400001800284;
              v20 = &v733;
              v21 = (JSC::DFG::_anonymous_namespace_::ImpureMap *)v194;
              if (!v145)
              {
                if (*(void **)(v22 + 208) == __src)
                {
                  *(_QWORD *)(v22 + 208) = 0;
                  *(_DWORD *)(v22 + 216) = 0;
                }
                WTF::fastFree((unint64_t)__src, (void *)v3, v4, v192, 16, 0x12400001800284, (uint64_t)&v733, v194);
                LODWORD(v17) = v192;
                v18 = 16;
                v19 = 0x12400001800284;
                v20 = &v733;
                v21 = (JSC::DFG::_anonymous_namespace_::ImpureMap *)v194;
              }
            }
            *(_DWORD *)(v22 + 220) = v105;
            if (v104 - 1 >= (unint64_t)HIDWORD(v711))
            {
              __break(0xC471u);
              JUMPOUT(0x198337128);
            }
            v107 = ~v104;
            v108 = v105;
            do
            {
              --v104;
              v109 = *((_QWORD *)v710 + 2 * v104) + v104;
              v110 = v108 - 1;
              if (v108 - 1 > v109)
              {
                v111 = v108 + v107;
                do
                {
                  if (v105 <= v111)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198336FF8);
                  }
                  if (v105 <= v110)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198337000);
                  }
                  *(_QWORD *)(*(_QWORD *)(v22 + 208) + 8 * v110--) = *(_QWORD *)(*(_QWORD *)(v22 + 208) + 8 * v111--);
                }
                while (v110 > v109);
              }
              if (v105 <= v109)
              {
                __break(0xC471u);
                JUMPOUT(0x1983370E0);
              }
              *(_QWORD *)(*(_QWORD *)(v22 + 208) + 8 * v109) = *((_QWORD *)v710 + 2 * v104 + 1);
              ++v107;
              v108 = v109;
            }
            while (v104);
            HIDWORD(v711) = 0;
          }
          v103 = v205 != 0;
        }
        v17 = v17 | v103;
      }
    }
    while (v16);
    if ((v17 & 1) != 0)
    {
      if (qword_1ECF4C32A | byte_1ECF4C323
        || (BYTE1(qword_1ECF4C32A)
          ? (v112 = (*(_DWORD *)(*(_QWORD *)(v200 + 24) + 16) & 0xFFFFFFFE) == 4)
          : (v112 = 0),
            !v112 ? (v113 = BYTE2(qword_1ECF4C32A) == 0) : (v113 = 0),
            !v113))
      {
        v733 = v201;
        WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>(v200 + 1088, "Phase ", (uint64_t)&v733, " changed the IR.\n", "\n");
      }
      v114 = 1;
    }
    else
    {
      v114 = 0;
    }
  }
  else
  {
LABEL_221:
    v114 = 0;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v726);
  v122 = v723;
  if (v725 != (_BYTE *)v723 && v723)
  {
    v723 = 0;
    LODWORD(v724) = 0;
    WTF::fastFree((unint64_t)v122, v115, v116, v117, v118, v119, v120, v121);
  }
  if (v722[4])
    WTF::fastFree(v722[4] - 16, v123, v124, v125, v126, v127, v128, v129);
  v130 = v719;
  if (v721 != (_BYTE *)v719 && v719)
  {
    v719 = 0;
    LODWORD(v720) = 0;
    WTF::fastFree((unint64_t)v130, v123, v124, v125, v126, v127, v128, v129);
  }
  if (v717[0])
    WTF::fastFree(v717[0] - 16, v131, v132, v133, v134, v135, v136, v137);
  v138 = v710;
  if (v712 != (_BYTE *)v710 && v710)
  {
    v710 = 0;
    LODWORD(v711) = 0;
    WTF::fastFree((unint64_t)v138, v131, v132, v133, v134, v135, v136, v137);
  }
  if (HIBYTE(qword_1ECF4C32A) && !v202)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v196, (uint64_t)v131, v132, v133, v134, v135, v136, v137);
  v139 = v203;
  v203 = 0;
  if (v139)
  {
    if (*(_DWORD *)v139 == 1)
      WTF::fastFree((unint64_t)v139, v131, v132, v133, v134, v135, v136, v137);
    else
      --*(_DWORD *)v139;
  }
  return v114;
}

BOOL JSC::DFG::performGlobalCSE(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  WTF *v6;
  char *v7;
  uint64_t v8;
  JSC::DFG::Graph *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  JSC::DFG::BasicBlock *v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  JSC::DFG::Node *v39;
  JSC::DFG::Graph *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  JSC::DFG::BasicBlock *v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  JSC::DFG::Graph *v55;
  int v56;
  _DWORD *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  BOOL v82;
  uint64_t v83;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF *v97;
  WTF *v98;
  JSC::DFG::_anonymous_namespace_::ImpureMap *v99;
  uint64_t v100;
  uint64_t v101;
  WTF *v102;
  uint64_t v103;
  _DWORD *v104;
  WTF *v106;
  WTF *v107;
  BOOL v109;
  BOOL v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  __int16 v121;
  JSC::DFG::Graph *v122;
  __int128 v123;
  char v124;
  WTF *v125;
  WTF *v126[2];
  WTF *v127[2];
  uint64_t v128;
  JSC::DFG::BasicBlock *v129;
  uint64_t v130;
  int v131;
  char *v132;
  uint64_t v133;
  JSC::DFG *v134;
  WTF *v135;
  uint64_t v136;
  _BYTE v137[128];
  unsigned __int8 v138;
  _QWORD v139[2];
  __int128 v140;
  double v141;
  __int128 v142;
  uint64_t v143;
  uint64_t *v144;
  _BYTE v145[9];

  v118 = -1;
  v119 = -1;
  v120 = 0;
  v121 = 256;
  v122 = this;
  *(_QWORD *)&v123 = "global common subexpression elimination";
  *((_QWORD *)&v123 + 1) = 40;
  v124 = 0;
  v125 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v118);
  v128 = 0;
  *(_OWORD *)v127 = 0u;
  *(_OWORD *)v126 = 0u;
  v3 = *((unsigned int *)this + 15);
  if ((_DWORD)v3)
  {
    v4 = 16;
    if (v3 > 0x10)
      v4 = *((unsigned int *)this + 15);
    if (v4 >= 0x6666667)
      goto LABEL_174;
    v5 = 40 * v4;
    v6 = (WTF *)WTF::fastMalloc((WTF *)(40 * v4));
    LODWORD(v128) = (v5 & 0xFFFFFFF8) / 0x28;
    v127[1] = v6;
    if (HIDWORD(v128) != (_DWORD)v3)
    {
      v7 = (char *)v6 + 40 * HIDWORD(v128);
      v8 = 40 * v3 - 40 * HIDWORD(v128);
      do
      {
        v7[32] = 0;
        *(_OWORD *)v7 = 0uLL;
        *((_OWORD *)v7 + 1) = 0uLL;
        v7 += 40;
        v8 -= 40;
      }
      while (v8);
    }
  }
  HIDWORD(v128) = v3;
  v133 = 0;
  v134 = this;
  v135 = (WTF *)v137;
  v136 = 8;
  v139[0] = "DFG";
  v139[1] = 4;
  v140 = v123;
  v141 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v111 = mach_absolute_time();
    v113 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v113 != -1)
    {
      *(_QWORD *)&v142 = v145;
      v144 = (uint64_t *)&v142;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v144, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v112) = dword_1ECF4400C;
    v141 = (double)(v111 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v112 * 1000000000.0);
  }
  v9 = v122;
  v10 = *((_DWORD *)v122 + 15);
  if (v10)
  {
    v11 = *((_QWORD *)v122 + 6);
    do
    {
      v12 = *(_QWORD *)(v11 + 8 * --v10);
      if (v12)
      {
        v13 = *(unsigned int *)(v12 + 36);
        if ((_DWORD)v13)
        {
          v114 = *(_QWORD *)(v12 + 24);
          v115 = v13 - 1;
          do
            *(_QWORD *)(*(_QWORD *)(v114 + 8 * v115) + 96) = v12;
          while ((unint64_t)v115--);
        }
        v14 = *(unsigned int *)(v12 + 220);
        if ((_DWORD)v14)
        {
          v15 = *(_QWORD *)(v12 + 208);
          v16 = v14 - 1;
          do
            *(_QWORD *)(*(_QWORD *)(v15 + 8 * v16) + 96) = v12;
          while ((unint64_t)v16--);
        }
      }
    }
    while (v10);
  }
  JSC::DFG::Graph::ensureSSADominators(v9);
  JSC::DFG::Graph::blocksInPreOrder(v122, v18, v19, v20, v21, v22, v23, v24, (uint64_t)&v142);
  v32 = v126[0];
  if (v126[0])
  {
    v126[0] = 0;
    LODWORD(v126[1]) = 0;
    WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
  }
  *(_OWORD *)v126 = v142;
  v33 = HIDWORD(v142);
  if (HIDWORD(v142))
  {
    while (1)
    {
      if (--v33 >= (unint64_t)HIDWORD(v126[1]))
      {
        __break(0xC471u);
        JUMPOUT(0x198337B0CLL);
      }
      v34 = (JSC::DFG::BasicBlock *)*((_QWORD *)v126[0] + v33);
      v129 = v34;
      v35 = *((_DWORD *)v34 + 2);
      if (HIDWORD(v128) <= v35)
      {
        __break(0xC471u);
        JUMPOUT(0x198337B14);
      }
      v132 = (char *)v127[1] + 40 * v35;
      v36 = *((_DWORD *)v34 + 55);
      if (v36)
        break;
LABEL_26:
      if (!v33)
        goto LABEL_27;
    }
    v37 = v36 - 1;
    v38 = 8 * (v36 - 1);
    while (*((_DWORD *)v129 + 55) > v37)
    {
      v39 = *(JSC::DFG::Node **)(*((_QWORD *)v129 + 26) + v38);
      *(_QWORD *)&v142 = v132;
      JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::ClobberSetAdd,JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::ClobberSetAdd,JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::NoOpClobberize const&,JSC::DFG::ClobberSetAdd const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>(v122, v39, (uint64_t)v145, (uint64_t **)&v142, (uint64_t)v145, (uint64_t)&v144, v30, v31);
      v38 -= 8;
      if (--v37 == -1)
        goto LABEL_26;
    }
LABEL_174:
    __break(0xC471u);
    JUMPOUT(0x198337ABCLL);
  }
LABEL_27:
  v138 = 0;
  v40 = v122;
  v41 = *((unsigned int *)v122 + 15);
  while ((_DWORD)v41)
  {
    if (*((_DWORD *)v40 + 15) <= --v41)
    {
      __break(0xC471u);
      JUMPOUT(0x198337B1CLL);
    }
    v42 = *(_QWORD *)(*((_QWORD *)v40 + 6) + 8 * v41);
    if (v42)
    {
      v43 = *(_DWORD *)(v42 + 36);
      if (v43)
      {
        v44 = v43 - 1;
        v45 = 8 * v44;
        do
        {
          if (*(_DWORD *)(v42 + 36) <= v44)
          {
            __break(0xC471u);
            JUMPOUT(0x198337AE4);
          }
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 24) + v45) + 88) = 0;
          v45 -= 8;
          --v44;
        }
        while (v44 != -1);
      }
      v46 = *(_DWORD *)(v42 + 220);
      if (v46)
      {
        v47 = v46 - 1;
        v48 = 8 * v47;
        do
        {
          if (*(_DWORD *)(v42 + 220) <= v47)
          {
            __break(0xC471u);
            JUMPOUT(0x198337AC4);
          }
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 208) + v48) + 88) = 0;
          v48 -= 8;
          --v47;
        }
        while (v47 != -1);
      }
    }
  }
  if (HIDWORD(v126[1]))
  {
    v49 = 0;
    while (1)
    {
      v50 = (JSC::DFG::BasicBlock *)*((_QWORD *)v126[0] + v49);
      v129 = v50;
      v51 = *((_DWORD *)v50 + 2);
      if (HIDWORD(v128) <= v51)
      {
        __break(0xC471u);
        JUMPOUT(0x198337AECLL);
      }
      v52 = v133;
      v132 = (char *)v127[1] + 40 * v51;
      if (v133)
      {
        v133 = 0;
        WTF::fastFree(v52 - 16, v50, v26, v27, v28, v29, v30, v31);
        v50 = v129;
      }
      if (*((_DWORD *)v50 + 55))
        break;
LABEL_102:
      JSC::DFG::InsertionSet::execute((JSC::DFG::InsertionSet *)&v134, v50);
      v132[32] = 1;
      if (++v49 >= (unint64_t)HIDWORD(v126[1]))
        goto LABEL_113;
    }
    v53 = 0;
    while (1)
    {
      v131 = v53;
      v54 = *(_QWORD *)(*((_QWORD *)v50 + 26) + 8 * v53);
      v130 = v54;
      v55 = v122;
      v56 = *(_DWORD *)(v54 + 56);
      v57 = (_DWORD *)(v54 + 24);
      v58 = *(_QWORD *)(v54 + 24);
      if ((v56 & 0x10) != 0)
      {
        v59 = *(_QWORD *)(v54 + 32);
        if ((int)v59 + (int)v58 <= v58)
        {
          if ((*(_WORD *)(v54 + 18) & 0xFFFE) != 4)
          {
LABEL_161:
            *(_QWORD *)&v142 = &v118;
            v144 = &v118;
            goto LABEL_55;
          }
          v61 = v58 & 0xFF00FFFFFFFFFFFFLL;
LABEL_109:
          if ((_DWORD)v59)
          {
            v81 = 0;
            v86 = 0;
            v87 = *((_DWORD *)v55 + 41);
            v88 = *((_QWORD *)v55 + 19);
            do
            {
              v77 = v81 + *v57;
              if (v87 <= v77)
              {
                __break(0xC471u);
                JUMPOUT(0x198337AFCLL);
              }
              v78 = *(_QWORD *)(v88 + 8 * v77);
              if ((v78 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v79 = 0;
                if ((v78 & 0x1000000000000) == 0)
                {
                  v80 = (v78 >> 50) & 0x3F;
                  if ((_DWORD)v80)
                  {
                    v82 = v80 > 0x34;
                    v83 = (1 << v80) & 0x12400001800284;
                    if (v82 || v83 == 0)
                    {
                      v85 = v86 + *v57;
                      if (v87 <= v85)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198337B04);
                      }
                      ++v86;
                      v79 = *(_QWORD *)(v88 + 8 * v85);
                      *(_QWORD *)(v88 + 8 * v85) = v78;
                    }
                  }
                }
                *(_QWORD *)(v88 + 8 * v77) = v79;
                v59 = *(_QWORD *)(v54 + 32);
              }
              ++v81;
            }
            while (v81 < v59);
          }
          else
          {
            v86 = 0;
          }
          *(_WORD *)(v54 + 18) = 25;
          *(_DWORD *)(v54 + 56) = 24;
          *(_QWORD *)(v54 + 32) = v86;
          goto LABEL_54;
        }
        LODWORD(v72) = *((_DWORD *)v122 + 41);
        v73 = *(_QWORD *)(v54 + 24);
        if (v72 <= v58)
          v72 = v58;
        else
          v72 = v72;
        do
        {
          if (v72 == v73)
          {
            __break(0xC471u);
            JUMPOUT(0x198337AF4);
          }
          v74 = *((_QWORD *)v55 + 19);
          v75 = *(_QWORD *)(v74 + 8 * v73);
          if ((v75 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v76 = *(_QWORD *)((v75 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
            if (v76)
            {
              *(_QWORD *)(v74 + 8 * v73) = v76 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v75) << 48);
              v58 = *(_QWORD *)(v54 + 24);
              v59 = *(_QWORD *)(v54 + 32);
            }
          }
          ++v73;
        }
        while (v73 < (v58 + v59));
      }
      else
      {
        if ((v58 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v67 = *(_QWORD *)((v58 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
          if (v67)
          {
            v68 = v67 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v58) << 48);
            *(_QWORD *)v57 = v68;
            v58 = v68;
          }
        }
        v59 = *(_QWORD *)(v54 + 32);
        if ((v59 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v69 = *(_QWORD *)((v59 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
          if (v69)
          {
            v70 = v69 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v59) << 48);
            *(_QWORD *)(v54 + 32) = v70;
            v59 = v70;
          }
        }
        v60 = *(_QWORD *)(v54 + 40);
        if ((v60 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v71 = *(_QWORD *)((v60 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
          if (v71)
            *(_QWORD *)(v54 + 40) = v71 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v60) << 48);
        }
      }
      if ((*(_WORD *)(v54 + 18) & 0xFFFE) != 4)
        goto LABEL_161;
      v61 = v58 & 0xFF00FFFFFFFFFFFFLL;
      if ((v56 & 0x10) != 0)
        goto LABEL_109;
      v142 = 0uLL;
      v143 = 0;
      if (v61)
      {
        v62 = 0;
        if ((v58 & 0x1000000000000) == 0)
        {
          v63 = (v58 >> 50) & 0x3F;
          if ((_DWORD)v63)
          {
            if (v63 > 0x34 || ((1 << v63) & 0x12400001800284) == 0)
            {
              *(_QWORD *)&v142 = v58;
              v62 = 1;
            }
          }
        }
        if ((v59 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          if ((v59 & 0x1000000000000) == 0)
          {
            v64 = (v59 >> 50) & 0x3F;
            if ((_DWORD)v64)
            {
              if (v64 > 0x34 || ((1 << v64) & 0x12400001800284) == 0)
                *((_QWORD *)&v142 + v62++) = v59;
            }
          }
          v65 = *(_QWORD *)(v54 + 40);
          if ((v65 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v65 & 0x1000000000000) == 0)
          {
            v66 = (v65 >> 50) & 0x3F;
            if ((_DWORD)v66)
            {
              if (v66 > 0x34 || ((1 << v66) & 0x12400001800284) == 0)
                *((_QWORD *)&v142 + v62) = v65;
            }
          }
        }
      }
      *(_OWORD *)v57 = v142;
      *(_QWORD *)(v54 + 40) = v143;
      *(_WORD *)(v54 + 18) = 24;
      *(_DWORD *)(v54 + 56) = 8;
LABEL_54:
      *(_QWORD *)(v54 + 88) = v61;
      v138 = 1;
LABEL_55:
      ++v53;
      v50 = v129;
      if (v53 >= *((unsigned int *)v129 + 55))
        goto LABEL_102;
    }
  }
LABEL_113:
  v89 = v138;
  if (v138)
  {
    if (qword_1ECF4C32A | byte_1ECF4C323
      || (BYTE1(qword_1ECF4C32A) ? (v109 = (*(_DWORD *)(*((_QWORD *)v122 + 3) + 16) & 0xFFFFFFFE) == 4) : (v109 = 0),
          !v109 ? (v110 = BYTE2(qword_1ECF4C32A) == 0) : (v110 = 0),
          !v110))
    {
      v142 = v123;
      WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v122 + 1088, "Phase ", (uint64_t)&v142, " changed the IR.\n", "\n");
    }
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v139);
  v97 = v135;
  if (v137 != (_BYTE *)v135 && v135)
  {
    v135 = 0;
    LODWORD(v136) = 0;
    WTF::fastFree((unint64_t)v97, v90, v91, v92, v93, v94, v95, v96);
  }
  if (v133)
    WTF::fastFree(v133 - 16, v90, v91, v92, v93, v94, v95, v96);
  v98 = v127[1];
  if (HIDWORD(v128))
  {
    v99 = (WTF *)((char *)v127[1] + 8);
    v100 = 40 * HIDWORD(v128);
    do
    {
      v101 = *((_QWORD *)v99 - 1);
      if (v101)
        WTF::fastFree(v101 - 16, v90, v91, v92, v93, v94, v95, v96);
      v99 = (JSC::DFG::_anonymous_namespace_::ImpureMap *)((char *)v99 + 40);
      v100 -= 40;
    }
    while (v100);
    v98 = v127[1];
  }
  if (v98)
  {
    v127[1] = 0;
    LODWORD(v128) = 0;
    WTF::fastFree((unint64_t)v98, v90, v91, v92, v93, v94, v95, v96);
  }
  v102 = v127[0];
  if (v127[0])
  {
    v103 = *((unsigned int *)v127[0] - 1);
    if ((_DWORD)v103)
    {
      v104 = (_DWORD *)((char *)v127[0] + 56);
      do
      {
        if (*((_WORD *)v104 - 28) != 433 || *((_QWORD *)v104 - 3) == 0)
        {
          v117 = *((_QWORD *)v104 - 1);
          if (v117)
          {
            *((_QWORD *)v104 - 1) = 0;
            *v104 = 0;
            WTF::fastFree(v117, v90, v91, v92, v93, v94, v95, v96);
          }
        }
        v104 += 16;
        --v103;
      }
      while (v103);
    }
    WTF::fastFree((unint64_t)v102 - 16, v90, v91, v92, v93, v94, v95, v96);
  }
  v106 = v126[0];
  if (v126[0])
  {
    v126[0] = 0;
    LODWORD(v126[1]) = 0;
    WTF::fastFree((unint64_t)v106, v90, v91, v92, v93, v94, v95, v96);
  }
  if (HIBYTE(qword_1ECF4C32A) && !v124)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v118, (uint64_t)v90, v91, v92, v93, v94, v95, v96);
  v107 = v125;
  v125 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 1)
      WTF::fastFree((unint64_t)v107, v90, v91, v92, v93, v94, v95, v96);
    else
      --*(_DWORD *)v107;
  }
  return v89 != 0;
}

uint64_t JSC::DFG::canUseOSRExitFuzzing(JSC::DFG *this, JSC::CodeBlock *a2)
{
  return (*(unsigned __int16 *)(*((_QWORD *)this + 8) + 70) >> 5) & 1;
}

uint64_t JSC::DFG::performCleanUp(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  JSC::DFG *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  JSC::DFG *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  BOOL v51;
  uint64_t v52;
  JSC::DFG *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  const void *v58;
  void *v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v63;
  unint64_t v65;
  uint64_t v66;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  BOOL v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t *v75;
  char v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  const void *v86;
  void *v87;
  uint64_t v88;
  unint64_t StatusReg;
  uint64_t v90;
  int v91;
  uint64_t v92;
  __int16 v93;
  JSC::DFG *v94;
  __int128 v95;
  char v96;
  WTF *v97;
  _QWORD v98[2];
  __int128 v99;
  double v100;
  char v101;
  __int128 *v102;
  __int128 v103;
  uint64_t v104;

  v90 = -1;
  v91 = -1;
  v92 = 0;
  v93 = 256;
  v94 = this;
  *(_QWORD *)&v95 = "clean up";
  *((_QWORD *)&v95 + 1) = 9;
  v96 = 0;
  v97 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v90);
  v98[0] = "DFG";
  v98[1] = 4;
  v99 = v95;
  v100 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v80 = mach_absolute_time();
    v82 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v82 != -1)
    {
      *(_QWORD *)&v103 = &v101;
      v102 = &v103;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v102, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v81) = dword_1ECF4400C;
    v100 = (double)(v80 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v81 * 1000000000.0);
  }
  v9 = v94;
  v88 = *((unsigned int *)v94 + 15);
  if (!(_DWORD)v88)
    goto LABEL_6;
  v10 = 0;
  while (!*(_QWORD *)(*((_QWORD *)v94 + 6) + 8 * v10))
  {
    if (v88 == ++v10)
      goto LABEL_6;
  }
  if ((_DWORD)v88 == (_DWORD)v10)
    goto LABEL_6;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  LODWORD(v20) = v88;
  do
  {
    if (v20 <= v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1983383DCLL);
    }
    v21 = *(_QWORD *)(*((_QWORD *)v9 + 6) + 8 * v10);
    v22 = *(unsigned int *)(v21 + 220);
    if (!(_DWORD)v22)
    {
      LODWORD(v24) = 0;
      goto LABEL_70;
    }
    v23 = 0;
    v24 = 0;
    do
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v21 + 208) + 8 * v23);
      v34 = *(unsigned __int16 *)(v33 + 18);
      switch(v34)
      {
        case 24:
          v35 = *(_QWORD *)(v33 + 24);
          v103 = 0uLL;
          v104 = 0;
          if ((v35 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v46 = 0;
            if ((v35 & 0x1000000000000) == 0)
            {
              v47 = (v35 >> 50) & 0x3F;
              if ((_DWORD)v47)
              {
                v60 = v47 > 0x34;
                v61 = (1 << v47) & 0x12400001800284;
                if (v60 || v61 == 0)
                {
                  *(_QWORD *)&v103 = v35;
                  v46 = 1;
                }
              }
            }
            v48 = *(_QWORD *)(v33 + 32);
            if ((v48 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              if ((v48 & 0x1000000000000) == 0)
              {
                v49 = (v48 >> 50) & 0x3F;
                if ((_DWORD)v49)
                {
                  v60 = v49 > 0x34;
                  v63 = (1 << v49) & 0x12400001800284;
                  if (v60 || v63 == 0)
                    *((_QWORD *)&v103 + v46++) = v48;
                }
              }
              v50 = *(_QWORD *)(v33 + 40);
              v51 = (v50 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v50 & 0x1000000000000) == 0;
              v52 = (v50 >> 50) & 0x3F;
              if (v51 && (_DWORD)v52 != 0)
              {
                v60 = v52 > 0x34;
                v66 = (1 << v52) & 0x12400001800284;
                if (v60 || v66 == 0)
                  *((_QWORD *)&v103 + v46) = v50;
              }
            }
          }
          *(_OWORD *)(v33 + 24) = v103;
          *(_QWORD *)(v33 + 40) = v104;
LABEL_42:
          if ((*(_QWORD *)(v33 + 24) & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v22 = *(unsigned int *)(v21 + 220);
            break;
          }
          v36 = v94;
LABEL_44:
          if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
          {
            if (*((_DWORD *)v36 + 236) == 2)
            {
              v78 = *((unsigned int *)v36 + 15);
              if ((_DWORD)v78)
              {
                v32 = 0;
                v79 = *((_QWORD *)v36 + 6);
                while (!*(_QWORD *)(v79 + 8 * v32))
                {
                  if (v78 == ++v32)
                    goto LABEL_45;
                }
                if ((_DWORD)v78 != (_DWORD)v32)
                {
                  v32 = v32;
                  do
                  {
                    if (v78 <= v32)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1983383CCLL);
                    }
                    v25 = *(_QWORD *)(*(_QWORD *)(v79 + 8 * v32) + 200);
                    v26 = *(unsigned int *)(v25 + 76);
                    if ((_DWORD)v26)
                    {
                      v27 = *(uint64_t **)(v25 + 64);
                      do
                      {
                        v28 = *v27++;
                        if (v28 == v33)
                        {
                          JSC::DFG::Graph::logAssertionFailure(v36, (JSC::DFG::Node *)v33, (const WTF::CString *)"./dfg/DFGGraph.cpp", (const char *)0x2A1, "void JSC::DFG::Graph::deleteNode(Node *)", "!block->ssa->liveAtHead.contains(node)");
                          __break(0xC471u);
                          JUMPOUT(0x198338344);
                        }
                        --v26;
                      }
                      while (v26);
                    }
                    v29 = *(unsigned int *)(v25 + 92);
                    if ((_DWORD)v29)
                    {
                      v30 = *(uint64_t **)(v25 + 80);
                      do
                      {
                        v31 = *v30++;
                        if (v31 == v33)
                        {
                          JSC::DFG::Graph::logAssertionFailure(v36, (JSC::DFG::Node *)v33, (const WTF::CString *)"./dfg/DFGGraph.cpp", (const char *)0x2A2, "void JSC::DFG::Graph::deleteNode(Node *)", "!block->ssa->liveAtTail.contains(node)");
                          __break(0xC471u);
                          JUMPOUT(0x19833838CLL);
                        }
                        --v29;
                      }
                      while (v29);
                    }
                    if (v78 > ++v32)
                    {
                      while (!*(_QWORD *)(v79 + 8 * v32))
                      {
                        if (v78 == ++v32)
                          goto LABEL_45;
                      }
                      v32 = v32;
                    }
                  }
                  while (v78 != v32);
                }
              }
            }
          }
LABEL_45:
          v37 = *(unsigned int *)(v33 + 20);
          v38 = *((_QWORD *)v36 + 129);
          if (*(_QWORD *)(v38 + 8 * v37) != v33)
            goto LABEL_171;
          v39 = *((unsigned int *)v36 + 265);
          if ((_DWORD)v39 == *((_DWORD *)v36 + 264))
          {
            v54 = v9;
            v55 = v39 + (v39 >> 2);
            if (v55 >= 0x10)
              v56 = v55 + 1;
            else
              v56 = 16;
            if (v56 <= v39 + 1)
              v57 = v39 + 1;
            else
              v57 = v56;
            if (v57 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1983383D4);
            }
            v58 = (const void *)*((_QWORD *)v36 + 131);
            v59 = (void *)WTF::fastMalloc((WTF *)(8 * v57));
            *((_DWORD *)v36 + 264) = v57;
            *((_QWORD *)v36 + 131) = v59;
            memcpy(v59, v58, 8 * v39);
            v9 = v54;
            if (v58)
            {
              if (*((const void **)v36 + 131) == v58)
              {
                *((_QWORD *)v36 + 131) = 0;
                *((_DWORD *)v36 + 264) = 0;
              }
              WTF::fastFree((unint64_t)v58, v2, v3, v4, v5, v6, v7, v8);
            }
            v39 = *((unsigned int *)v36 + 265);
            *(_QWORD *)(*((_QWORD *)v36 + 131) + 8 * v39) = *(unsigned int *)(v33 + 20);
            v38 = *((_QWORD *)v36 + 129);
          }
          else
          {
            *(_QWORD *)(*((_QWORD *)v36 + 131) + 8 * v39) = v37;
          }
          *((_DWORD *)v36 + 265) = v39 + 1;
          v40 = 8 * *(unsigned int *)(v33 + 20);
          v41 = *(_QWORD *)(v38 + v40);
          *(_QWORD *)(v38 + v40) = 0;
          if (v41)
          {
            v42 = *(_QWORD *)(v41 + 8);
            if ((v42 & 1) != 0 && (v42 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v42 & 0xFFFFFFFF8, v2, v3, v4, v5, v6, v7, v8);
            v43 = *(_QWORD *)v41;
            if ((*(_QWORD *)v41 & 1) != 0 && (v43 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v43 & 0xFFFFFFFF8, v2, v3, v4, v5, v6, v7, v8);
            v44 = *(_QWORD *)(StatusReg + 752);
            if (v44)
            {
              if (!(v41 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v41 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v41)) & 1) != 0)
              {
                goto LABEL_54;
              }
              if (v41 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v41 >> 24)
              {
                v4 = 0;
              }
              else
              {
                v4 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v41 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v41) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v4 == 1)
                {
LABEL_54:
                  v45 = *(unsigned int *)(v44 + 8000);
                  if (v45 >= 0x3E7)
                  {
                    pas_thread_local_cache_append_deallocation_slow(v44, v41, (os_unfair_lock_s *)5, v4, v5, v6, v7, v8);
                  }
                  else
                  {
                    *(_QWORD *)(v44 + 8 * v45) = v41 | 0x5000000000000;
                    *(_DWORD *)(v44 + 8000) = v45 + 1;
                  }
                  goto LABEL_33;
                }
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v44, v41, 1, v4, v5, v6, v7, v8);
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v41, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
LABEL_33:
          v22 = *(unsigned int *)(v21 + 220);
          goto LABEL_34;
        case 25:
          v36 = v94;
          v68 = *(_QWORD *)(v33 + 24);
          if ((*(_BYTE *)(v33 + 56) & 0x10) != 0)
          {
            v69 = *(_DWORD *)(v33 + 32);
            v70 = (v69 + v68);
            if (v70 <= v68)
              goto LABEL_44;
            v71 = *((_DWORD *)v94 + 41);
            v72 = v71 >= v68;
            v73 = v71 - v68;
            if (!v72)
              v73 = 0;
            if (v73 <= v69 - 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1983383C4);
            }
            v74 = v70 - v68;
            v75 = (uint64_t *)(*((_QWORD *)v94 + 19) + 8 * v68);
            v76 = 1;
            do
            {
              v77 = *v75++;
              if ((v77 & 0xFF00FFFFFFFFFFFFLL) != 0)
                v76 = 0;
              --v74;
            }
            while (v74);
            if (v76)
              goto LABEL_44;
          }
          else if ((v68 & 0xFF00FFFFFFFFFFFFLL) == 0)
          {
            goto LABEL_44;
          }
          break;
        case 23:
          goto LABEL_42;
      }
      if (v22 <= v24)
      {
        __break(0xC471u);
        JUMPOUT(0x1983383A8);
      }
      *(_QWORD *)(*(_QWORD *)(v21 + 208) + 8 * v24++) = v33;
LABEL_34:
      ++v23;
    }
    while (v23 < v22);
    if (v22 < v24)
    {
      v65 = *(unsigned int *)(v21 + 216);
      if (v65 < v24)
      {
        v83 = v65 + (v65 >> 2);
        if (v83 >= 0x10)
          v84 = v83 + 1;
        else
          v84 = 16;
        if (v84 <= v24)
          v85 = v24;
        else
          v85 = v84;
        v86 = *(const void **)(v21 + 208);
        if (v85 < 9)
        {
          v87 = (void *)(v21 + 224);
          *(_QWORD *)(v21 + 208) = v21 + 224;
          *(_DWORD *)(v21 + 216) = 8;
        }
        else
        {
          if (v85 >> 29)
          {
LABEL_171:
            __break(0xC471u);
            JUMPOUT(0x19833813CLL);
          }
          v87 = (void *)WTF::fastMalloc((WTF *)(8 * v85));
          *(_DWORD *)(v21 + 216) = v85;
          *(_QWORD *)(v21 + 208) = v87;
        }
        memcpy(v87, v86, 8 * v22);
        if ((const void *)(v21 + 224) != v86 && v86)
        {
          if (*(const void **)(v21 + 208) == v86)
          {
            *(_QWORD *)(v21 + 208) = 0;
            *(_DWORD *)(v21 + 216) = 0;
          }
          WTF::fastFree((unint64_t)v86, v2, v3, v4, v5, v6, v7, v8);
        }
      }
    }
LABEL_70:
    *(_DWORD *)(v21 + 220) = v24;
    v10 = (v10 + 1);
    v20 = *((unsigned int *)v9 + 15);
    if (v20 > v10)
    {
      while (!*(_QWORD *)(*((_QWORD *)v9 + 6) + 8 * v10))
      {
        if (v20 == ++v10)
        {
          LODWORD(v10) = *((_DWORD *)v9 + 15);
          break;
        }
      }
    }
  }
  while ((_DWORD)v88 != (_DWORD)v10);
LABEL_6:
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v98);
  if (HIBYTE(qword_1ECF4C32A) && !v96)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v90, (uint64_t)v11, v12, v13, v14, v15, v16, v17);
  v18 = v97;
  v97 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      WTF::fastFree((unint64_t)v18, v11, v12, v13, v14, v15, v16, v17);
    else
      --*(_DWORD *)v18;
  }
  return 0;
}

JSC::DFG::Node *JSC::DFG::ByteCodeParser::addToGraph(JSC::DFG::ByteCodeParser *this, JSC::DFG::Node *a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  JSC::DFG::Node *result;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  JSC::DFG::Node *v31;

  v10 = *((unsigned __int16 *)a2 + 9);
  *((_BYTE *)this + 457) |= v10 == 379;
  v11 = *((_QWORD *)this + 4);
  v31 = a2;
  v12 = (_QWORD *)(v11 + 208);
  v13 = *(unsigned int *)(v11 + 220);
  if ((_DWORD)v13 == *(_DWORD *)(v11 + 216))
  {
    v15 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v13 + 1, (unint64_t)&v31);
    v13 = *(unsigned int *)(v11 + 220);
    *(_QWORD *)(*(_QWORD *)(v11 + 208) + 8 * v13) = *v15;
    v10 = *((unsigned __int16 *)a2 + 9);
  }
  else
  {
    *(_QWORD *)(*v12 + 8 * v13) = a2;
  }
  *(_DWORD *)(v11 + 220) = v13 + 1;
  if (v10 == 386)
  {
    v16 = *((_QWORD *)this + 3);
    *((_DWORD *)a2 + 12) = ~*(_DWORD *)(v16 + 308);
    v17 = *(unsigned int *)(v16 + 308);
    v18 = v17 + 2;
    v19 = *(unsigned int *)(v16 + 304);
    result = *(JSC::DFG::Node **)(v16 + 296);
    if (v17 + 2 > v19)
    {
      v30 = *(WTF **)(v16 + 296);
      v20 = v19 + (v19 >> 2);
      if (v20 >= 0x10)
        v21 = v20 + 1;
      else
        v21 = 16;
      if (v21 > v18)
        v18 = v21;
      if (v18 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v22 = v18;
      result = (JSC::DFG::Node *)WTF::fastMalloc((WTF *)(8 * v18));
      *(_DWORD *)(v16 + 304) = v22;
      *(_QWORD *)(v16 + 296) = result;
      if ((_DWORD)v17)
      {
        v27 = 8 * v17;
        v28 = v30;
        do
        {
          v29 = *(_QWORD *)v28;
          v28 = (WTF *)((char *)v28 + 8);
          *(_QWORD *)result = v29;
          result = (JSC::DFG::Node *)((char *)result + 8);
          v27 -= 8;
        }
        while (v27);
        result = *(JSC::DFG::Node **)(v16 + 296);
      }
      if (v30)
      {
        if (result == v30)
        {
          *(_QWORD *)(v16 + 296) = 0;
          *(_DWORD *)(v16 + 304) = 0;
        }
        WTF::fastFree((unint64_t)v30, v23, (uint64_t)a3, a4, a5, a6, a7, a8);
        result = *(JSC::DFG::Node **)(v16 + 296);
      }
      v18 = v17 + 2;
    }
    if (result)
    {
      v24 = *(unsigned int *)(v16 + 308);
      if (v18 != v24)
      {
        v25 = (_QWORD *)((char *)result + 8 * v24);
        v26 = 8 * v17 - 8 * v24 + 16;
        do
        {
          *v25++ = 0x3FFFFFFF00000000;
          v26 -= 8;
        }
        while (v26);
      }
    }
    *(_DWORD *)(v16 + 308) = v18;
  }
  if (JSC::DFG::clobbersExitState(*((JSC::DFG **)this + 3), a2, a3, a4, a5, a6, a7, a8))
    *((_BYTE *)this + 64) = 0;
  return a2;
}

uint64_t JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(uint64_t a1, __int16 *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t casual;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v14)
    goto LABEL_83;
  v15 = (_BYTE *)(v14 + 9408);
  *(_BYTE *)(v14 + 9408) = 1;
  v16 = *(unsigned int *)(v14 + 9424);
  if (!(_DWORD)v16)
  {
    v32 = *(_QWORD *)(v14 + 9448);
    v33 = *(_QWORD *)(v14 + 9432);
    if (v32)
    {
LABEL_17:
      v34 = __clz(v32);
      *(_QWORD *)(v14 + 9448) = v32 & ~(0x8000000000000000 >> v34);
      casual = v33 + 16 * v34;
      goto LABEL_4;
    }
    if (*(_BYTE *)(v14 + 9413) == 6)
    {
      v57 = *(_DWORD *)(v14 + 9444);
      v58 = *(unsigned int *)(v14 + 9440);
      if (v58 < v57)
      {
        *(_QWORD *)&v15[8 * v58 + 56] = 0;
        v59 = (unint64_t *)(v14 + 8 * v58 + 9472);
        v60 = v57 - 1 - v58;
        while (v60)
        {
          v33 += 1024;
          v62 = *v59++;
          v61 = v62;
          LODWORD(v58) = v58 + 1;
          --v60;
          if (v62)
          {
            v32 = __rbit64(v61);
            *(_DWORD *)(v14 + 9440) = v58;
            *(_QWORD *)(v14 + 9432) = v33;
            goto LABEL_17;
          }
        }
        *(_DWORD *)(v14 + 9440) = v57;
      }
    }
    *v15 = 0;
LABEL_83:
    casual = bmalloc_allocate_casual(104, 1);
    goto LABEL_5;
  }
  *(_DWORD *)(v14 + 9424) = v16 - *(_DWORD *)(v14 + 9428);
  casual = *(_QWORD *)(v14 + 9416) - v16;
LABEL_4:
  *v15 = 0;
LABEL_5:
  v18 = *a2;
  v19 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v41 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v42 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v42 != 0x3FFFFFFF)
        ? (v43 = (_DWORD)v42 == -1)
        : (v43 = 1),
          v43))
    {
      v44 = 2;
    }
    else if (v42 >> 28)
    {
      v71 = v18;
      v63 = WTF::fastMalloc((WTF *)0x10);
      v18 = v71;
      *(_QWORD *)v63 = v41;
      *(_DWORD *)(v63 + 8) = v42;
      v44 = 1;
      v41 = v63;
    }
    else
    {
      v44 = v41;
      v41 = v42 << 36;
    }
    v19 = v41 | v44;
  }
  v20 = *(_QWORD *)(a3 + 8);
  if ((v20 & 1) != 0)
  {
    v45 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
    if ((v20 & 2) != 0
      || ((v46 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v46 != 0x3FFFFFFF)
        ? (v47 = (_DWORD)v46 == -1)
        : (v47 = 1),
          v47))
    {
      v48 = 2;
    }
    else if (v46 >> 28)
    {
      v64 = v45;
      v72 = v18;
      v45 = WTF::fastMalloc((WTF *)0x10);
      v18 = v72;
      *(_QWORD *)v45 = v64;
      *(_DWORD *)(v45 + 8) = v46;
      v48 = 1;
    }
    else
    {
      v48 = v45;
      v45 = v46 << 36;
    }
    v20 = v45 | v48;
  }
  v21 = (unsigned __int16)v18;
  v22 = *(_WORD *)(a3 + 16);
  v23 = *a4;
  v24 = *a5;
  v25 = v19;
  v26 = *a6;
  if ((v19 & 1) != 0)
  {
    v49 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v50 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v50 != 0x3FFFFFFF)
        ? (v51 = (_DWORD)v50 == -1)
        : (v51 = 1),
          v51))
    {
      v52 = 2;
    }
    else if (v50 >> 28)
    {
      v65 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
      v73 = v18;
      v69 = (unsigned __int16)v18;
      v66 = *(_DWORD *)((v19 & 0xFFFFFFFF8) + 8);
      v49 = WTF::fastMalloc((WTF *)0x10);
      v21 = v69;
      v18 = v73;
      *(_QWORD *)v49 = v65;
      *(_DWORD *)(v49 + 8) = v66;
      v52 = 1;
    }
    else
    {
      v52 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
      v49 = v50 << 36;
    }
    v25 = v49 | v52;
  }
  *(_QWORD *)casual = v25;
  v27 = v20;
  if ((v20 & 1) != 0)
  {
    v53 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
    if ((v20 & 2) != 0
      || ((v54 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v54 != 0x3FFFFFFF)
        ? (v55 = (_DWORD)v54 == -1)
        : (v55 = 1),
          v55))
    {
      v56 = 2;
    }
    else if (v54 >> 28)
    {
      v67 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v74 = v18;
      v70 = v21;
      v68 = *(_DWORD *)((v20 & 0xFFFFFFFF8) + 8);
      v53 = WTF::fastMalloc((WTF *)0x10);
      v21 = v70;
      v18 = v74;
      *(_QWORD *)v53 = v67;
      *(_DWORD *)(v53 + 8) = v68;
      v56 = 1;
    }
    else
    {
      v56 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v53 = v54 << 36;
    }
    v27 = v53 | v56;
  }
  *(_QWORD *)(casual + 8) = v27;
  *(_WORD *)(casual + 16) = v22;
  *(_DWORD *)(casual + 20) = -1;
  *(_QWORD *)(casual + 24) = v23;
  *(_QWORD *)(casual + 32) = v24;
  *(_QWORD *)(casual + 40) = v26;
  *(_QWORD *)(casual + 48) = 0x13FFFFFFFLL;
  *(_DWORD *)(casual + 56) = 0;
  *(_OWORD *)(casual + 64) = 0u;
  *(_OWORD *)(casual + 80) = 0u;
  *(_QWORD *)(casual + 96) = 0;
  *(_WORD *)(casual + 18) = v21;
  if (v21 >= 0x1B1)
    goto LABEL_89;
  *(_DWORD *)(casual + 56) = dword_199154DF4[v18];
  v28 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v28)
  {
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v28 - 8);
    *(_DWORD *)(a1 + 28) = v28 - 1;
    v30 = *(_QWORD **)a1;
    goto LABEL_13;
  }
  v29 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v29 != *(_DWORD *)(a1 + 8))
  {
    v30 = *(_QWORD **)a1;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = 0;
    *(_DWORD *)(a1 + 12) = v29 + 1;
    goto LABEL_13;
  }
  v35 = v29 + (v29 >> 2);
  v36 = v35 >= 0x10 ? v35 + 1 : 16;
  v37 = v36 <= v29 + 1 ? v29 + 1 : v36;
  if (v37 >> 29)
  {
LABEL_89:
    __break(0xC471u);
    JUMPOUT(0x198338974);
  }
  v38 = *(_QWORD **)a1;
  v39 = (void *)WTF::fastMalloc((WTF *)(8 * v37));
  *(_DWORD *)(a1 + 8) = v37;
  *(_QWORD *)a1 = v39;
  memcpy(v39, v38, 8 * v29);
  if (v38)
  {
    if (*(_QWORD **)a1 == v38)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v38, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
  }
  v40 = *(unsigned int *)(a1 + 12);
  v30 = *(_QWORD **)a1;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = 0;
  *(_DWORD *)(a1 + 12) = v40 + 1;
LABEL_13:
  *(_DWORD *)(casual + 20) = v29;
  v30[v29] = casual;
  if ((v20 & 1) != 0 && (v20 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v20 & 0xFFFFFFFF8, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
  if ((v19 & 1) != 0 && (v19 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v19 & 0xFFFFFFFF8, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
  return casual;
}

uint64_t JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge,JSC::DFG::Edge>(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = a5;
  v13 = a4;
  v10 = a7;
  v11 = a6;
  v9 = a2;
  return JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(a1 + 1032, &v9, a3, (uint64_t)&v13, &v12, &v11, &v10, a8);
}

uint64_t JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(uint64_t a1, __int16 *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v13;
  unint64_t StatusReg;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t casual;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  _QWORD *v103;
  _QWORD *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v10 = (uint64_t *)a4;
  v13 = a1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v15 = *(_QWORD *)(StatusReg + 752);
  if (v15)
  {
    v16 = (_BYTE *)(v15 + 9408);
    *(_BYTE *)(v15 + 9408) = 1;
    v17 = *(unsigned int *)(v15 + 9424);
    if ((_DWORD)v17)
    {
      *(_DWORD *)(v15 + 9424) = v17 - *(_DWORD *)(v15 + 9428);
      v18 = *(_QWORD *)(v15 + 9416) - v17;
LABEL_4:
      *v16 = 0;
      goto LABEL_5;
    }
    v33 = *(_QWORD *)(v15 + 9448);
    v34 = *(_QWORD *)(v15 + 9432);
    if (v33)
    {
LABEL_17:
      v35 = __clz(v33);
      *(_QWORD *)(v15 + 9448) = v33 & ~(0x8000000000000000 >> v35);
      v18 = v34 + 16 * v35;
      goto LABEL_4;
    }
    if (*(_BYTE *)(v15 + 9413) == 6)
    {
      v74 = *(_DWORD *)(v15 + 9444);
      v75 = *(unsigned int *)(v15 + 9440);
      if (v75 < v74)
      {
        v76 = StatusReg;
        *(_QWORD *)&v16[8 * v75 + 56] = 0;
        v77 = (unint64_t *)(v15 + 8 * v75 + 9472);
        v78 = v74 - 1 - v75;
        while (v78)
        {
          v34 += 1024;
          v80 = *v77++;
          v79 = v80;
          LODWORD(v75) = v75 + 1;
          --v78;
          if (v80)
          {
            v33 = __rbit64(v79);
            *(_DWORD *)(v15 + 9440) = v75;
            *(_QWORD *)(v15 + 9432) = v34;
            v13 = a1;
            StatusReg = v76;
            goto LABEL_17;
          }
        }
        *(_DWORD *)(v15 + 9440) = v74;
        v13 = a1;
        StatusReg = v76;
      }
    }
    *v16 = 0;
  }
  v81 = v13;
  v82 = StatusReg;
  v83 = a7;
  casual = bmalloc_allocate_casual(104, 1);
  a7 = v83;
  StatusReg = v82;
  v13 = v81;
  v18 = casual;
LABEL_5:
  v19 = *a2;
  v20 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v58 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
    if ((v20 & 2) != 0
      || ((v59 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v59 != 0x3FFFFFFF)
        ? (v60 = (_DWORD)v59 == -1)
        : (v60 = 1),
          v60))
    {
      v61 = 2;
    }
    else if (v59 >> 28)
    {
      v92 = v13;
      v93 = StatusReg;
      v103 = a7;
      v94 = WTF::fastMalloc((WTF *)0x10);
      a7 = v103;
      StatusReg = v93;
      v13 = v92;
      *(_QWORD *)v94 = v58;
      *(_DWORD *)(v94 + 8) = v59;
      v61 = 1;
      v58 = v94;
    }
    else
    {
      v61 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v58 = v59 << 36;
    }
    v20 = v58 | v61;
  }
  v21 = *(_QWORD *)(a3 + 8);
  if ((v21 & 1) != 0)
  {
    v62 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
    if ((v21 & 2) != 0
      || ((v63 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v63 != 0x3FFFFFFF)
        ? (v64 = (_DWORD)v63 == -1)
        : (v64 = 1),
          v64))
    {
      v65 = 2;
    }
    else if (v63 >> 28)
    {
      v104 = a7;
      v107 = v13;
      v95 = StatusReg;
      v96 = WTF::fastMalloc((WTF *)0x10);
      a7 = v104;
      v13 = v107;
      StatusReg = v95;
      *(_QWORD *)v96 = v62;
      *(_DWORD *)(v96 + 8) = v63;
      v65 = 1;
      v62 = v96;
    }
    else
    {
      v65 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
      v62 = v63 << 36;
    }
    v21 = v62 | v65;
  }
  v22 = *(_WORD *)(a3 + 16);
  v23 = *v10;
  v24 = *a5;
  v25 = *a6;
  v26 = v20;
  v27 = *a7;
  if ((v20 & 1) != 0)
  {
    v66 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
    if ((v20 & 2) != 0
      || ((v67 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v67 != 0x3FFFFFFF)
        ? (v68 = (_DWORD)v67 == -1)
        : (v68 = 1),
          v68))
    {
      v69 = 2;
    }
    else if (v67 >> 28)
    {
      v105 = StatusReg;
      v108 = v13;
      v99 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v101 = *(_DWORD *)((v20 & 0xFFFFFFFF8) + 8);
      v97 = WTF::fastMalloc((WTF *)0x10);
      StatusReg = v105;
      v13 = v108;
      *(_QWORD *)v97 = v99;
      *(_DWORD *)(v97 + 8) = v101;
      v69 = 1;
      v66 = v97;
    }
    else
    {
      v69 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v66 = v67 << 36;
    }
    v26 = v66 | v69;
  }
  *(_QWORD *)v18 = v26;
  v28 = v21;
  if ((v21 & 1) != 0)
  {
    v70 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
    if ((v21 & 2) != 0
      || ((v71 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v71 != 0x3FFFFFFF)
        ? (v72 = (_DWORD)v71 == -1)
        : (v72 = 1),
          v72))
    {
      v73 = 2;
    }
    else if (v71 >> 28)
    {
      v106 = StatusReg;
      v109 = v13;
      v100 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
      v102 = *(_DWORD *)((v21 & 0xFFFFFFFF8) + 8);
      v98 = WTF::fastMalloc((WTF *)0x10);
      StatusReg = v106;
      v13 = v109;
      *(_QWORD *)v98 = v100;
      *(_DWORD *)(v98 + 8) = v102;
      v73 = 1;
      v70 = v98;
    }
    else
    {
      v73 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
      v70 = v71 << 36;
    }
    v28 = v70 | v73;
  }
  *(_QWORD *)(v18 + 8) = v28;
  *(_WORD *)(v18 + 16) = v22;
  *(_DWORD *)(v18 + 20) = -1;
  *(_QWORD *)(v18 + 24) = v24;
  *(_QWORD *)(v18 + 32) = v25;
  *(_QWORD *)(v18 + 40) = v27;
  *(_QWORD *)(v18 + 48) = 0x13FFFFFFFLL;
  *(_DWORD *)(v18 + 56) = 0;
  *(_QWORD *)(v18 + 64) = 0;
  *(_QWORD *)(v18 + 72) = v23;
  *(_QWORD *)(v18 + 88) = 0;
  *(_QWORD *)(v18 + 96) = 0;
  *(_QWORD *)(v18 + 80) = 0;
  *(_WORD *)(v18 + 18) = v19;
  if ((unsigned __int16)v19 >= 0x1B1u)
    goto LABEL_120;
  *(_DWORD *)(v18 + 56) = dword_199154DF4[v19];
  v29 = *(unsigned int *)(v13 + 28);
  if ((_DWORD)v29)
  {
    v30 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 8 * v29 - 8);
    *(_DWORD *)(v13 + 28) = v29 - 1;
    v31 = *(_QWORD *)v13;
    goto LABEL_13;
  }
  v30 = *(unsigned int *)(v13 + 12);
  if ((_DWORD)v30 == *(_DWORD *)(v13 + 8))
  {
    v36 = v30 + (v30 >> 2);
    if (v36 >= 0x10)
      v37 = v36 + 1;
    else
      v37 = 16;
    if (v37 <= v30 + 1)
      v38 = v30 + 1;
    else
      v38 = v37;
    if (!(v38 >> 29))
    {
      v39 = *(_QWORD *)v13;
      v40 = 8 * v38;
      v41 = *(_QWORD *)(StatusReg + 752);
      if (v41)
      {
        v42 = (unint64_t)(v40 + 15) >> 4;
        if (v38 <= 0x34)
        {
          v43 = 23 * v42 + 7;
        }
        else
        {
          if (v38 > 0x4E2)
            goto LABEL_30;
          v43 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v42 + 626);
          if (*(_DWORD *)(v41 + 8052) <= v43)
            goto LABEL_30;
        }
        v47 = v41 + 8 * v43;
        v48 = v47 + 8064;
        *(_BYTE *)(v47 + 8064) = 1;
        v49 = *(unsigned int *)(v47 + 8080);
        if ((_DWORD)v49)
        {
          *(_DWORD *)(v48 + 16) = v49 - *(_DWORD *)(v48 + 20);
          v46 = (void *)(*(_QWORD *)(v48 + 8) - v49);
        }
        else
        {
          v55 = *(_QWORD *)(v48 + 40);
          v56 = *(_QWORD *)(v48 + 24);
          if (!v55)
          {
            v85 = v13;
            if (*(_BYTE *)(v48 + 5) == 6)
            {
              v86 = *(unsigned int *)(v48 + 32);
              v87 = *(_DWORD *)(v48 + 36);
              if (v86 < v87)
              {
                *(_QWORD *)(v48 + 8 * v86 + 56) = 0;
                v88 = (unint64_t *)(8 * v43 + 8 * v86 + v41 + 8128);
                v89 = v87 - 1 - v86;
                while (v89)
                {
                  v56 += 1024;
                  v91 = *v88++;
                  v90 = v91;
                  LODWORD(v86) = v86 + 1;
                  --v89;
                  if (v91)
                  {
                    v55 = __rbit64(v90);
                    *(_DWORD *)(v48 + 32) = v86;
                    *(_QWORD *)(v48 + 24) = v56;
                    v13 = v85;
                    goto LABEL_45;
                  }
                }
                *(_DWORD *)(v48 + 32) = v87;
              }
            }
            *(_BYTE *)v48 = 0;
            v13 = v85;
            goto LABEL_30;
          }
LABEL_45:
          v57 = __clz(v55);
          *(_QWORD *)(v48 + 40) = v55 & ~(0x8000000000000000 >> v57);
          v46 = (void *)(v56 + 16 * v57);
        }
        v44 = StatusReg;
        *(_BYTE *)v48 = 0;
LABEL_35:
        *(_DWORD *)(v13 + 8) = v38;
        *(_QWORD *)v13 = v46;
        v50 = v13;
        memcpy(v46, (const void *)v39, 8 * v30);
        v51 = v50;
        if (!v39)
        {
LABEL_43:
          v54 = *(unsigned int *)(v51 + 12);
          v31 = *(_QWORD *)v51;
          *(_QWORD *)(*(_QWORD *)v51 + 8 * v54) = 0;
          *(_DWORD *)(v51 + 12) = v54 + 1;
          goto LABEL_13;
        }
        if (*(_QWORD *)v50 == v39)
        {
          *(_QWORD *)v50 = 0;
          *(_DWORD *)(v50 + 8) = 0;
        }
        v52 = *(_QWORD *)(v44 + 752);
        if (!v52)
        {
          pas_try_deallocate_slow_no_cache(v39, (uint64_t)&bmalloc_heap_config, 1);
          goto LABEL_100;
        }
        if (!(v39 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v39 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v39)) & 1) != 0)
        {
          goto LABEL_41;
        }
        if (v39 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v39 >> 24)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v39 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v39) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          v51 = v50;
          if ((_DWORD)a4 == 1)
          {
LABEL_41:
            v53 = *(unsigned int *)(v52 + 8000);
            if (v53 < 0x3E7)
            {
              *(_QWORD *)(v52 + 8 * v53) = v39 | 0x5000000000000;
              *(_DWORD *)(v52 + 8000) = v53 + 1;
              goto LABEL_43;
            }
            pas_thread_local_cache_append_deallocation_slow(v52, v39, (os_unfair_lock_s *)5, a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8);
LABEL_100:
            v51 = v50;
            goto LABEL_43;
          }
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v52, v39, 1, a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8);
        goto LABEL_100;
      }
LABEL_30:
      v44 = StatusReg;
      v45 = v13;
      v46 = (void *)bmalloc_allocate_casual(v40, 1);
      v13 = v45;
      goto LABEL_35;
    }
LABEL_120:
    __break(0xC471u);
    JUMPOUT(0x198339078);
  }
  v31 = *(_QWORD *)v13;
  *(_QWORD *)(*(_QWORD *)v13 + 8 * v30) = 0;
  *(_DWORD *)(v13 + 12) = v30 + 1;
LABEL_13:
  *(_DWORD *)(v18 + 20) = v30;
  *(_QWORD *)(v31 + 8 * v30) = v18;
  if ((v21 & 1) != 0 && (v21 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v21 & 0xFFFFFFFF8, a2, a3, a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8);
  if ((v20 & 1) != 0 && (v20 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v20 & 0xFFFFFFFF8, a2, a3, a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8);
  return v18;
}

uint64_t JSC::DFG::ByteCodeParser::addCallWithoutSettingResult(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v11;
  uint64_t v12;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v11 = a6;
  LODWORD(v12) = a5;
  v16 = *(_QWORD *)(a1 + 24);
  v17 = (_QWORD *)(v16 + 152);
  v35 = a4 & 0xFF00FFFFFFFFFFFFLL;
  v18 = *(unsigned int *)(v16 + 164);
  if ((_DWORD)v18 == *(_DWORD *)(v16 + 160))
  {
    v28 = (_QWORD *)WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v17, (void *)(v18 + 1), (unint64_t)&v35, a4, a5, a6, a7, a8);
    v18 = *(unsigned int *)(v16 + 164);
    *(_QWORD *)(*(_QWORD *)(v16 + 152) + 8 * v18) = *v28;
  }
  else
  {
    *(_QWORD *)(*v17 + 8 * v18) = a4 & 0xFF00FFFFFFFFFFFFLL;
  }
  *(_DWORD *)(v16 + 164) = v18 + 1;
  ++*(_DWORD *)(a1 + 272);
  v19 = (v12 & 0xFFFFFFFE) + 4;
  if (v19 > *(_DWORD *)(a1 + 268))
    *(_DWORD *)(a1 + 268) = v19;
  if ((int)v12 >= 1)
  {
    v20 = v11 + 5;
    v12 = v12;
    do
    {
      v21 = JSC::DFG::ByteCodeParser::get(a1, v20 | ((unint64_t)(v20 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v22 = *(_QWORD *)(a1 + 24);
      v23 = (_QWORD *)(v22 + 152);
      v24 = (unint64_t)v21 & 0xFF00FFFFFFFFFFFFLL;
      v35 = (unint64_t)v21 & 0xFF00FFFFFFFFFFFFLL;
      v25 = *(unsigned int *)(v22 + 164);
      if ((_DWORD)v25 == *(_DWORD *)(v22 + 160))
      {
        v26 = (_QWORD *)WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, (void *)(v25 + 1), (unint64_t)&v35, a4, a5, a6, a7, a8);
        v25 = *(unsigned int *)(v22 + 164);
        *(_QWORD *)(*(_QWORD *)(v22 + 152) + 8 * v25) = *v26;
      }
      else
      {
        *(_QWORD *)(*v23 + 8 * v25) = v24;
      }
      *(_DWORD *)(v22 + 164) = v25 + 1;
      ++*(_DWORD *)(a1 + 272);
      ++v20;
      --v12;
    }
    while (v12);
  }
  if (a2 == 253)
  {
    JSC::DFG::ByteCodeParser::addVarArgChild(a1, a8 & 0xFF00FFFFFFFFFFFFLL, a3, a4, a5, a6, a7, a8);
    JSC::DFG::ByteCodeParser::addVarArgChild(a1, a9 & 0xFF00FFFFFFFFFFFFLL | 0x24000000000000, v29, v30, v31, v32, v33, v34);
  }
  return JSC::DFG::ByteCodeParser::addToGraph(a1, a2, a3, a7, a5, a6, a7, a8);
}

uint64_t JSC::DFG::ByteCodeParser::addVarArgChild(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = result;
  v11 = a2;
  v9 = *(_QWORD *)(result + 24);
  v10 = *(unsigned int *)(v9 + 164);
  if ((_DWORD)v10 == *(_DWORD *)(v9 + 160))
  {
    result = WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v9 + 152, (unint64_t)&v11, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v9 + 152) + 8 * v10) = a2;
    *(_DWORD *)(v9 + 164) = v10 + 1;
  }
  ++*(_DWORD *)(v8 + 272);
  return result;
}

uint64_t JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(uint64_t a1, __int16 *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, _QWORD *a8)
{
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t casual;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v14)
    goto LABEL_83;
  v15 = (_BYTE *)(v14 + 9408);
  *(_BYTE *)(v14 + 9408) = 1;
  v16 = *(unsigned int *)(v14 + 9424);
  if (!(_DWORD)v16)
  {
    v34 = *(_QWORD *)(v14 + 9448);
    v35 = *(_QWORD *)(v14 + 9432);
    if (v34)
    {
LABEL_17:
      v36 = __clz(v34);
      *(_QWORD *)(v14 + 9448) = v34 & ~(0x8000000000000000 >> v36);
      v17 = v35 + 16 * v36;
      goto LABEL_4;
    }
    if (*(_BYTE *)(v14 + 9413) == 6)
    {
      v60 = *(_DWORD *)(v14 + 9444);
      v61 = *(unsigned int *)(v14 + 9440);
      if (v61 < v60)
      {
        *(_QWORD *)&v15[8 * v61 + 56] = 0;
        v62 = (unint64_t *)(v14 + 8 * v61 + 9472);
        v63 = v60 - 1 - v61;
        while (v63)
        {
          v35 += 1024;
          v65 = *v62++;
          v64 = v65;
          LODWORD(v61) = v61 + 1;
          --v63;
          if (v65)
          {
            v34 = __rbit64(v64);
            *(_DWORD *)(v14 + 9440) = v61;
            *(_QWORD *)(v14 + 9432) = v35;
            goto LABEL_17;
          }
        }
        *(_DWORD *)(v14 + 9440) = v60;
      }
    }
    *v15 = 0;
LABEL_83:
    v66 = a1;
    v67 = a8;
    casual = bmalloc_allocate_casual(104, 1);
    a8 = v67;
    v17 = casual;
    a1 = v66;
    goto LABEL_5;
  }
  *(_DWORD *)(v14 + 9424) = v16 - *(_DWORD *)(v14 + 9428);
  v17 = *(_QWORD *)(v14 + 9416) - v16;
LABEL_4:
  *v15 = 0;
LABEL_5:
  v18 = *a2;
  v19 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v44 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v45 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v45 != 0x3FFFFFFF)
        ? (v46 = (_DWORD)v45 == -1)
        : (v46 = 1),
          v46))
    {
      v47 = 2;
    }
    else if (v45 >> 28)
    {
      v83 = a1;
      v69 = v18;
      v70 = a8;
      v71 = WTF::fastMalloc((WTF *)0x10);
      a8 = v70;
      v18 = v69;
      *(_QWORD *)v71 = v44;
      *(_DWORD *)(v71 + 8) = v45;
      v47 = 1;
      v44 = v71;
      a1 = v83;
    }
    else
    {
      v47 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
      v44 = v45 << 36;
    }
    v19 = v44 | v47;
  }
  v20 = *(_QWORD *)(a3 + 8);
  if ((v20 & 1) != 0)
  {
    v48 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
    if ((v20 & 2) != 0
      || ((v49 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v49 != 0x3FFFFFFF)
        ? (v50 = (_DWORD)v49 == -1)
        : (v50 = 1),
          v50))
    {
      v51 = 2;
    }
    else if (v49 >> 28)
    {
      v80 = v18;
      v84 = a1;
      v72 = a8;
      v73 = WTF::fastMalloc((WTF *)0x10);
      a8 = v72;
      *(_QWORD *)v73 = v48;
      *(_DWORD *)(v73 + 8) = v49;
      v51 = 1;
      v48 = v73;
      v18 = v80;
      a1 = v84;
    }
    else
    {
      v51 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v48 = v49 << 36;
    }
    v20 = v48 | v51;
  }
  v21 = (unsigned __int16)v18;
  v22 = *(_WORD *)(a3 + 16);
  v23 = *a4;
  v24 = *a5;
  v25 = *a6;
  v26 = *a7;
  v27 = v19;
  v28 = *a8;
  if ((v19 & 1) != 0)
  {
    v52 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v53 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v53 != 0x3FFFFFFF)
        ? (v54 = (_DWORD)v53 == -1)
        : (v54 = 1),
          v54))
    {
      v55 = 2;
    }
    else if (v53 >> 28)
    {
      v81 = v18;
      v85 = a1;
      v76 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
      v78 = *(_DWORD *)((v19 & 0xFFFFFFFF8) + 8);
      v74 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v74 = v76;
      v18 = v81;
      *(_DWORD *)(v74 + 8) = v78;
      v55 = 1;
      v52 = v74;
      a1 = v85;
    }
    else
    {
      v55 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
      v52 = v53 << 36;
    }
    v27 = v52 | v55;
  }
  *(_QWORD *)v17 = v27;
  v29 = v20;
  if ((v20 & 1) != 0)
  {
    v56 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
    if ((v20 & 2) != 0
      || ((v57 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v57 != 0x3FFFFFFF)
        ? (v58 = (_DWORD)v57 == -1)
        : (v58 = 1),
          v58))
    {
      v59 = 2;
    }
    else if (v57 >> 28)
    {
      v82 = v18;
      v86 = a1;
      v77 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v79 = *(_DWORD *)((v20 & 0xFFFFFFFF8) + 8);
      v75 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v75 = v77;
      v18 = v82;
      *(_DWORD *)(v75 + 8) = v79;
      v59 = 1;
      v56 = v75;
      a1 = v86;
    }
    else
    {
      v59 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v56 = v57 << 36;
    }
    v29 = v56 | v59;
  }
  *(_QWORD *)(v17 + 8) = v29;
  *(_WORD *)(v17 + 16) = v22;
  *(_DWORD *)(v17 + 20) = -1;
  *(_QWORD *)(v17 + 24) = v25;
  *(_QWORD *)(v17 + 32) = v26;
  *(_QWORD *)(v17 + 40) = v28;
  *(_QWORD *)(v17 + 48) = 0x13FFFFFFFLL;
  *(_DWORD *)(v17 + 56) = 0;
  *(_QWORD *)(v17 + 64) = 0;
  *(_QWORD *)(v17 + 72) = v23;
  *(_QWORD *)(v17 + 88) = 0;
  *(_QWORD *)(v17 + 96) = 0;
  *(_QWORD *)(v17 + 80) = v24;
  *(_WORD *)(v17 + 18) = v21;
  if (v21 >= 0x1B1)
    goto LABEL_89;
  *(_DWORD *)(v17 + 56) = dword_199154DF4[v18];
  v30 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v30)
  {
    v31 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v30 - 8);
    *(_DWORD *)(a1 + 28) = v30 - 1;
    v32 = *(_QWORD **)a1;
    goto LABEL_13;
  }
  v31 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v31 != *(_DWORD *)(a1 + 8))
  {
    v32 = *(_QWORD **)a1;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = 0;
    *(_DWORD *)(a1 + 12) = v31 + 1;
    goto LABEL_13;
  }
  v37 = v31 + (v31 >> 2);
  v38 = v37 >= 0x10 ? v37 + 1 : 16;
  v39 = v38 <= v31 + 1 ? v31 + 1 : v38;
  if (v39 >> 29)
  {
LABEL_89:
    __break(0xC471u);
    JUMPOUT(0x19833974CLL);
  }
  v40 = *(_QWORD **)a1;
  v41 = a1;
  v42 = (void *)WTF::fastMalloc((WTF *)(8 * v39));
  *(_DWORD *)(v41 + 8) = v39;
  *(_QWORD *)v41 = v42;
  memcpy(v42, v40, 8 * v31);
  if (v40)
  {
    if (*(_QWORD **)v41 == v40)
    {
      *(_QWORD *)v41 = 0;
      *(_DWORD *)(v41 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v40, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
  }
  v43 = *(unsigned int *)(v41 + 12);
  v32 = *(_QWORD **)v41;
  *(_QWORD *)(*(_QWORD *)v41 + 8 * v43) = 0;
  *(_DWORD *)(v41 + 12) = v43 + 1;
LABEL_13:
  *(_DWORD *)(v17 + 20) = v31;
  v32[v31] = v17;
  if ((v20 & 1) != 0 && (v20 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v20 & 0xFFFFFFFF8, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
  if ((v19 & 1) != 0 && (v19 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v19 & 0xFFFFFFFF8, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
  return v17;
}

_QWORD *JSC::DFG::ByteCodeParser::setArgument(_QWORD *a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _BOOL4 hasExitSite;
  uint64_t v32;
  _BYTE *v33;
  int v34;
  int v35;
  int v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  int v42;
  int v43;
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  int v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v8 = a5;
  v13 = a1 + 6;
  v14 = a1[6];
  if ((v14 & 1) != 0)
  {
    v70 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v71 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v71 != 0x3FFFFFFF)
        ? (v72 = (_DWORD)v71 == -1)
        : (v72 = 1),
          v72))
    {
      v73 = 2;
    }
    else if (v71 >> 28)
    {
      v78 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v78 = v70;
      *(_DWORD *)(v78 + 8) = v71;
      v73 = 1;
      v70 = v78;
    }
    else
    {
      v73 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      v70 = v71 << 36;
    }
    v14 = v70 | v73;
  }
  if (v13 != a2)
  {
    v15 = *v13;
    if ((*v13 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v15 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v16 = *a2;
    if ((*a2 & 1) != 0)
    {
      v74 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
      if ((v16 & 2) != 0
        || ((v75 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v75 != 0x3FFFFFFF)
          ? (v76 = (_DWORD)v75 == -1)
          : (v76 = 1),
            v76))
      {
        v77 = 2;
      }
      else if (v75 >> 28)
      {
        v79 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v79 = v74;
        *(_DWORD *)(v79 + 8) = v75;
        v77 = 1;
        v74 = v79;
      }
      else
      {
        v77 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
        v74 = v75 << 36;
      }
      v16 = v74 | v77;
    }
    *v13 = v16;
  }
  v17 = a1[3];
  v18 = *(_QWORD *)(v17 + 464);
  *(_QWORD *)(v17 + 464) = v18 + 1;
  v19 = v18 >> 4;
  v20 = *(unsigned int *)(v17 + 484);
  if (v18 >> 4 >= v20)
  {
    v65 = WTF::fastMalloc((WTF *)0x400);
    v81 = v65;
    v66 = *(unsigned int *)(v17 + 484);
    if ((_DWORD)v66 == *(_DWORD *)(v17 + 480))
    {
      v69 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 472, v66 + 1, (unint64_t)&v81);
      v66 = *(unsigned int *)(v17 + 484);
      *(_QWORD *)(*(_QWORD *)(v17 + 472) + 8 * v66) = *v69;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v17 + 472) + 8 * v66) = v65;
    }
    v20 = (v66 + 1);
    *(_DWORD *)(v17 + 484) = v20;
    v18 = *(_QWORD *)(v17 + 464) - 1;
    v19 = v18 >> 4;
  }
  if (v19 >= v20)
    goto LABEL_87;
  v80 = v14;
  v21 = a3 | (((a3 >> 31) & 1) << 32);
  v22 = *(_QWORD *)(*(_QWORD *)(v17 + 472) + 8 * v19) + ((v18 & 0xF) << 6);
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  *(_QWORD *)(v22 + 24) = v21;
  *(_DWORD *)(v22 + 32) = 0x3FFFFFFF;
  *(_DWORD *)(v22 + 56) = 0;
  *(_QWORD *)(v22 + 48) = 0;
  *(_QWORD *)(v22 + 36) = 0;
  *(_BYTE *)(v22 + 44) = 0;
  v23 = *(_QWORD *)(v17 + 464) - 1;
  if (v23 >> 4 >= *(unsigned int *)(v17 + 484))
  {
    __break(0xC471u);
    JUMPOUT(0x198339C58);
  }
  v24 = *(_QWORD *)(*(_QWORD *)(v17 + 472) + 8 * (v23 >> 4));
  v25 = v23 & 0xF;
  v26 = a3 - 5;
  if ((_DWORD)a3 != 5)
  {
    if (v8 != 2)
      JSC::DFG::ByteCodeParser::flushDirect((uint64_t)a1, v21, a3, a4, a5, a6, a7, a8);
    goto LABEL_12;
  }
  if (v8 != 2)
  {
    v55 = (uint64_t)(a1 + 35);
    if (((2 * a3) & 0x100000000) == 0)
    {
      do
      {
        v56 = *(_QWORD *)v55;
        v57 = *(_QWORD *)(*(_QWORD *)v55 + 24);
        v55 = *(_QWORD *)v55 + 208;
      }
      while (v57);
      v58 = 0;
      if (!*(_DWORD *)(v56 + 204))
      {
        __break(0xC471u);
        JUMPOUT(0x198339C60);
      }
LABEL_34:
      v59 = *(_QWORD *)(*(_QWORD *)(v56 + 192) + 8 * v58);
LABEL_35:
      v60 = (uint64_t)a1;
      goto LABEL_36;
    }
    v56 = *(_QWORD *)v55;
    v64 = *(_QWORD *)(*(_QWORD *)v55 + 24);
    if (!v64)
    {
      v60 = (uint64_t)a1;
      v59 = 0;
LABEL_36:
      JSC::DFG::ByteCodeParser::addFlushOrPhantomLocal<(JSC::DFG::NodeType)29>(v60, v21, v59, a4, a5, a6, a7, a8);
      goto LABEL_37;
    }
    while (1)
    {
      v68 = HIDWORD(*(_QWORD *)(v64 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v64 + 24) >> 28) >> 24 << 20);
      if (v68 + 5 <= 5)
      {
        v67 = *(_DWORD **)v64;
        if (v67)
          LODWORD(v67) = *v67;
        if ((int)v67 + v68 + 5 > 5)
          break;
      }
      v59 = 0;
      v56 = *(_QWORD *)(v56 + 208);
      v64 = *(_QWORD *)(v56 + 24);
      if (!v64)
        goto LABEL_35;
    }
    LODWORD(v58) = -v68;
    if (*(unsigned int *)(v56 + 204) > (unint64_t)-v68)
    {
      v58 = (int)v58;
      goto LABEL_34;
    }
LABEL_87:
    __break(0xC471u);
    JUMPOUT(0x198339C50);
  }
LABEL_37:
  if ((*(_DWORD *)(*(_QWORD *)(a1[1] + 56) + 20) & 0x80000000) != 0)
  {
    v61 = v24 + (v25 << 6);
    v63 = *(unsigned __int8 *)(v61 + 40);
    v62 = (_BYTE *)(v61 + 40);
    if (!v63)
      *v62 = 1;
  }
LABEL_12:
  v27 = (uint64_t *)(a1[35] + 32);
  v28 = *a2;
  v29 = (unint64_t)*a2 >> 36;
  if ((*a2 & 2) != 0)
  {
    LODWORD(v30) = -1;
  }
  else if ((v28 & 1) != 0)
  {
    LODWORD(v30) = *(_DWORD *)((v28 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v30 = (unint64_t)*a2 >> 36;
  }
  hasExitSite = JSC::DFG::QueryableExitProfile::hasExitSite(v27, v30, 5);
  v32 = v24 + (v25 << 6);
  v35 = *(unsigned __int8 *)(v32 + 41);
  v33 = (_BYTE *)(v32 + 41);
  v34 = v35;
  if (v35)
    v36 = 1;
  else
    v36 = hasExitSite;
  if (v34 != v36)
    *v33 = v36;
  if ((v28 & 2) != 0)
  {
    LODWORD(v29) = -1;
  }
  else if ((v28 & 1) != 0)
  {
    LODWORD(v29) = *(_DWORD *)((v28 & 0xFFFFFFFF8) + 8);
  }
  v37 = JSC::DFG::QueryableExitProfile::hasExitSite(v27, v29, 7);
  v40 = v24 + (v25 << 6);
  v43 = *(unsigned __int8 *)(v40 + 42);
  v41 = (_BYTE *)(v40 + 42);
  v42 = v43;
  if (v43)
    v44 = 1;
  else
    v44 = v37;
  if (v42 != v44)
    *v41 = v44;
  v52 = JSC::DFG::ByteCodeParser::addToGraph((uint64_t)a1, 16, v24 + (v25 << 6), a4, 0, 0, v38, v39);
  *(_QWORD *)(*(_QWORD *)(a1[4] + 96) + 8 * v26) = v52;
  v53 = a1[6];
  if ((v53 & 1) != 0 && (v53 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v53 & 0xFFFFFFFF8, v45, v46, v47, v48, v49, v50, v51);
  *v13 = v80;
  return v52;
}

uint64_t JSC::DFG::ByteCodeParser::setLocalOrTmp(JSC::CodeOrigin *a1, const JSC::CodeOrigin *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  const JSC::CodeOrigin *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _BYTE *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  _BYTE *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const JSC::CodeOrigin *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  void *v58;
  JSC::DFG::Node *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  int i;
  uint64_t v89;
  int *v90;
  int v91;
  int v92;
  int v93;
  int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  int v100;
  uint64_t v101;
  int *v102;
  int v103;
  int v104;
  int v105;
  _DWORD *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v125;
  const JSC::CodeOrigin *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  uint64_t v134;
  void *v135;
  JSC::DFG::Node *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  int v151;
  int v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  BOOL v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  BOOL v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  JSC::InlineCallFrame *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  _QWORD *v194;
  void *v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  BOOL v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  BOOL v215;
  BOOL v216;
  int v217;
  int v218;
  uint64_t v219;
  int *v220;
  int v221;
  int v222;
  BOOL v224;
  BOOL v225;
  int v226;
  int v227;
  uint64_t v228;
  int *v229;
  int v230;
  int v231;
  int v232;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  _QWORD *v242;
  void *v243;
  char *v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  BOOL v265;
  BOOL v266;
  int v267;
  int j;
  uint64_t v269;
  int *v270;
  int v271;
  int v272;
  BOOL v274;
  BOOL v275;
  int v276;
  int m;
  uint64_t v278;
  int *v279;
  int v280;
  int v281;
  int v282;
  BOOL v284;
  BOOL v285;
  int v286;
  int k;
  uint64_t v288;
  int *v289;
  int v290;
  int v291;
  int v292;
  BOOL v294;
  BOOL v295;
  int v296;
  int n;
  uint64_t v298;
  int *v299;
  int v300;
  int v301;
  int v302;
  uint64_t v304;
  uint64_t v305;
  BOOL v306;
  BOOL v307;
  BOOL v308;
  BOOL v309;
  uint64_t v310;
  WTF *v311;
  WTF *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  char v333;
  char v334;
  __int16 v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;

  v8 = a5;
  v10 = a3;
  v330 = a3;
  v13 = (JSC::CodeOrigin *)((char *)a1 + 48);
  v14 = *((_QWORD *)a1 + 6);
  if ((v14 & 1) != 0)
  {
    v160 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v161 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v161 != 0x3FFFFFFF)
        ? (v162 = (_DWORD)v161 == -1)
        : (v162 = 1),
          v162))
    {
      v163 = 2;
    }
    else if (v161 >> 28)
    {
      v247 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v247 = v160;
      *(_DWORD *)(v247 + 8) = v161;
      v163 = 1;
      v160 = v247;
    }
    else
    {
      v163 = v160;
      v160 = v161 << 36;
    }
    v14 = v160 | v163;
  }
  if (v13 != a2)
  {
    v15 = *(_QWORD *)v13;
    if ((*(_QWORD *)v13 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v15 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v16 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 & 1) != 0)
    {
      v177 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
      if ((v16 & 2) != 0
        || ((v178 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v178 != 0x3FFFFFFF)
          ? (v179 = (_DWORD)v178 == -1)
          : (v179 = 1),
            v179))
      {
        v180 = 2;
      }
      else if (v178 >> 28)
      {
        v252 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v252 = v177;
        *(_DWORD *)(v252 + 8) = v178;
        v180 = 1;
        v177 = v252;
      }
      else
      {
        v180 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
        v177 = v178 << 36;
      }
      v16 = v177 | v180;
    }
    *(_QWORD *)v13 = v16;
  }
  if (HIDWORD(v10) == 2)
  {
    if (*((_DWORD *)a1 + 66) <= v10)
    {
      v184 = *(JSC::InlineCallFrame **)(*((_QWORD *)a1 + 35) + 24);
      if (v184)
        WTF::dataLog<JSC::InlineCallFrame,char [2]>(v184);
      LODWORD(v331) = (2 * *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 56) + 30)) & 4;
      WTF::dataLogLn<char [14],JSC::Operand,char [33],unsigned int,char [18],unsigned int,char [7]>(&v330, (char *)a1 + 264, &v331);
      __break(0xC471u);
      JUMPOUT(0x19833A750);
    }
  }
  else if (v8 != 2)
  {
    v17 = *((_QWORD *)a1 + 35);
    v18 = *(_QWORD *)(v17 + 24);
    if (!v18)
      goto LABEL_9;
    while (1)
    {
      v82 = HIDWORD(*(_QWORD *)(v18 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v18 + 24) >> 28) >> 24 << 20);
      if (v82 + 5 <= (int)v10)
      {
        v107 = *(_DWORD **)v18;
        if (v107)
          LODWORD(v107) = *v107;
        if ((int)v107 + v82 + 5 > (int)v10)
          break;
      }
      v17 = *(_QWORD *)(v17 + 208);
      v18 = *(_QWORD *)(v17 + 24);
      if (!v18)
        goto LABEL_9;
    }
    v108 = v10 - v82 - 5;
    if (*(unsigned int *)(v17 + 204) <= (unint64_t)v108)
    {
      __break(0xC471u);
      JUMPOUT(0x19833AEC8);
    }
    v109 = *(_QWORD *)(*(_QWORD *)(v17 + 192) + 8 * v108);
    if (v109)
    {
      v110 = *((_QWORD *)a1 + 4);
      if ((v10 & 0x80000000) != 0)
        v111 = (v10 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v110 + 112);
      else
        v111 = (int)v10 - 5;
      v112 = *(_QWORD *)(v110 + 96);
      v113 = *(_QWORD *)(v112 + 8 * v111);
      v323 = v112;
      v324 = v111;
      if (v113)
      {
        v157 = *(_QWORD **)(v113 + 72);
        v158 = v157;
        do
        {
          v120 = v158;
          v158 = (_QWORD *)*v158;
        }
        while (v158);
        if (v120 == v157)
          v120 = v157;
        else
          *v157 = v120;
      }
      else
      {
        v114 = *((_QWORD *)a1 + 3);
        v115 = *(_QWORD *)(v114 + 464);
        *(_QWORD *)(v114 + 464) = v115 + 1;
        v116 = v115 >> 4;
        v117 = *(unsigned int *)(v114 + 484);
        if (v115 >> 4 >= v117)
        {
          v182 = WTF::fastMalloc((WTF *)0x400);
          v331 = v182;
          v183 = *(unsigned int *)(v114 + 484);
          if ((_DWORD)v183 == *(_DWORD *)(v114 + 480))
          {
            v199 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v114 + 472, v183 + 1, (unint64_t)&v331);
            v183 = *(unsigned int *)(v114 + 484);
            *(_QWORD *)(*(_QWORD *)(v114 + 472) + 8 * v183) = *v199;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v114 + 472) + 8 * v183) = v182;
          }
          v117 = (v183 + 1);
          *(_DWORD *)(v114 + 484) = v117;
          v115 = *(_QWORD *)(v114 + 464) - 1;
          v116 = v115 >> 4;
        }
        if (v116 >= v117)
        {
          __break(0xC471u);
          JUMPOUT(0x19833AFB8);
        }
        v118 = *(_QWORD *)(*(_QWORD *)(v114 + 472) + 8 * v116) + ((v115 & 0xF) << 6);
        *(_QWORD *)v118 = 0;
        *(_QWORD *)(v118 + 8) = 0;
        *(_QWORD *)(v118 + 16) = 0;
        *(_QWORD *)(v118 + 24) = v10;
        *(_DWORD *)(v118 + 32) = 0x3FFFFFFF;
        *(_DWORD *)(v118 + 56) = 0;
        *(_QWORD *)(v118 + 48) = 0;
        *(_QWORD *)(v118 + 36) = 0;
        *(_BYTE *)(v118 + 44) = 0;
        v119 = *(_QWORD *)(v114 + 464) - 1;
        if (v119 >> 4 >= *(unsigned int *)(v114 + 484))
        {
          __break(0xC471u);
          JUMPOUT(0x19833AFC0);
        }
        v120 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v114 + 472) + 8 * (v119 >> 4)) + ((v119 & 0xF) << 6));
      }
      v121 = *((_QWORD *)a1 + 3);
      if ((*((_BYTE *)a1 + 48) & 2) != 0)
      {
        v122 = *((unsigned int *)a1 + 10);
        v123 = *(_QWORD *)(*((_QWORD *)a1 + 35) + 24);
        if ((_DWORD)v122 == 0x3FFFFFFF || (_DWORD)v122 == -1)
        {
          v125 = 2;
        }
        else if (v122 >> 28)
        {
          v320 = *((_QWORD *)a1 + 3);
          v234 = WTF::fastMalloc((WTF *)0x10);
          v121 = v320;
          *(_QWORD *)v234 = v123;
          *(_DWORD *)(v234 + 8) = v122;
          v125 = 1;
          v123 = v234;
        }
        else
        {
          v125 = *(_QWORD *)(*((_QWORD *)a1 + 35) + 24);
          v123 = v122 << 36;
        }
        v339 = v123 | v125;
      }
      else
      {
        v263 = *((_QWORD *)a1 + 3);
        JSC::CodeOrigin::CodeOrigin(&v339, v13);
        v121 = v263;
      }
      v126 = (JSC::CodeOrigin *)((char *)a1 + 56);
      v327 = (uint64_t)v120;
      if ((*((_BYTE *)a1 + 56) & 2) != 0)
      {
        v127 = *((unsigned int *)a1 + 10);
        v128 = *(_QWORD *)(*((_QWORD *)a1 + 35) + 24);
        if ((_DWORD)v127 == 0x3FFFFFFF || (_DWORD)v127 == -1)
        {
          v129 = 2;
        }
        else if (v127 >> 28)
        {
          v321 = v121;
          v235 = WTF::fastMalloc((WTF *)0x10);
          v121 = v321;
          *(_QWORD *)v235 = v128;
          *(_DWORD *)(v235 + 8) = v127;
          v129 = 1;
          v128 = v235;
        }
        else
        {
          v129 = *(_QWORD *)(*((_QWORD *)a1 + 35) + 24);
          v128 = v127 << 36;
        }
        v338 = v128 | v129;
      }
      else
      {
        v264 = v121;
        JSC::CodeOrigin::CodeOrigin((uint64_t *)&v338, v126);
        v121 = v264;
      }
      v130 = v339;
      if ((v339 & 1) != 0)
      {
        v316 = v121;
        v200 = *(_QWORD *)(v339 & 0xFFFFFFFF8);
        if ((v339 & 2) != 0
          || ((v201 = *(unsigned int *)((v339 & 0xFFFFFFFF8) + 8), (_DWORD)v201 != 0x3FFFFFFF)
            ? (v202 = (_DWORD)v201 == -1)
            : (v202 = 1),
              v202))
        {
          v203 = 2;
        }
        else if (v201 >> 28)
        {
          v256 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v256 = v200;
          *(_DWORD *)(v256 + 8) = v201;
          v203 = 1;
          v200 = v256;
        }
        else
        {
          v203 = *(_QWORD *)(v339 & 0xFFFFFFFF8);
          v200 = v201 << 36;
        }
        v130 = v200 | v203;
        v121 = v316;
      }
      v131 = v338;
      if ((v338 & 1) != 0)
      {
        v317 = v121;
        v204 = *(_QWORD *)(v338 & 0xFFFFFFFF8);
        if ((v338 & 2) != 0
          || (v205 = *(unsigned int *)((v338 & 0xFFFFFFFF8) + 8), (_DWORD)v205 == 0x3FFFFFFF)
          || (_DWORD)v205 == -1)
        {
          v206 = 2;
        }
        else if (v205 >> 28)
        {
          v257 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v257 = v204;
          *(_DWORD *)(v257 + 8) = v205;
          v206 = 1;
          v204 = v257;
        }
        else
        {
          v206 = *(_QWORD *)(v338 & 0xFFFFFFFF8);
          v204 = v205 << 36;
        }
        v131 = v204 | v206;
        v121 = v317;
      }
      v132 = *((_BYTE *)a1 + 64);
      v133 = v130;
      if ((v130 & 1) != 0)
      {
        v313 = v14;
        v318 = v121;
        v310 = *(_QWORD *)(v130 & 0xFFFFFFFF8);
        if ((v130 & 2) != 0
          || (v207 = *(unsigned int *)((v130 & 0xFFFFFFFF8) + 8), (_DWORD)v207 == 0x3FFFFFFF)
          || (_DWORD)v207 == -1)
        {
          v208 = 2;
        }
        else if (v207 >> 28)
        {
          v258 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v258 = v310;
          *(_DWORD *)(v258 + 8) = v207;
          v208 = 1;
          v310 = v258;
        }
        else
        {
          v208 = *(_QWORD *)(v130 & 0xFFFFFFFF8);
          v310 = v207 << 36;
        }
        v14 = v313;
        v133 = v310 | v208;
        v121 = v318;
      }
      v331 = v133;
      if ((v131 & 1) != 0)
      {
        v314 = v14;
        v319 = v121;
        v311 = (WTF *)(v131 & 0xFFFFFFFF8);
        v209 = *(_QWORD *)(v131 & 0xFFFFFFFF8);
        if ((v131 & 2) != 0
          || (v210 = *(unsigned int *)((v131 & 0xFFFFFFFF8) + 8), (_DWORD)v210 == 0x3FFFFFFF)
          || (_DWORD)v210 == -1)
        {
          v211 = 2;
        }
        else if (v210 >> 28)
        {
          v259 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v259 = v209;
          *(_DWORD *)(v259 + 8) = v210;
          v211 = 1;
          v209 = v259;
        }
        else
        {
          v211 = v209;
          v209 = v210 << 36;
        }
        v332 = v209 | v211;
        v333 = v132;
        v334 = 0;
        v14 = v314;
        v121 = v319;
        if (v311)
        {
          WTF::fastFree((unint64_t)v311, v126, a3, a4, a5, a6, a7, a8);
          v121 = v319;
        }
      }
      else
      {
        v332 = v131;
        v333 = v132;
        v334 = 0;
      }
      if ((v130 & 1) != 0 && (v130 & 0xFFFFFFFF8) != 0)
      {
        v212 = v121;
        WTF::fastFree(v130 & 0xFFFFFFFF8, v126, a3, a4, a5, a6, a7, a8);
        v121 = v212;
      }
      if ((v338 & 1) != 0 && (v338 & 0xFFFFFFFF8) != 0)
      {
        v213 = v121;
        WTF::fastFree(v338 & 0xFFFFFFFF8, v126, a3, a4, a5, a6, a7, a8);
        v121 = v213;
      }
      v134 = v327;
      if ((v339 & 1) != 0 && (v339 & 0xFFFFFFFF8) != 0)
      {
        v214 = v121;
        WTF::fastFree(v339 & 0xFFFFFFFF8, v126, a3, a4, a5, a6, a7, a8);
        v121 = v214;
      }
      v338 = 0;
      v339 = v327;
      v336 = 0;
      v337 = 0;
      v335 = 28;
      v142 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(v121 + 1032, &v335, (uint64_t)&v331, (uint64_t)&v339, (uint64_t *)&v338, &v337, &v336, a8);
      if ((v332 & 1) != 0 && (v332 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v332 & 0xFFFFFFFF8, v135, (uint64_t)v136, v137, v138, v139, v140, v141);
      if ((v331 & 1) != 0 && (v331 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v331 & 0xFFFFFFFF8, v135, (uint64_t)v136, v137, v138, v139, v140, v141);
      v143 = *(unsigned __int16 *)(v142 + 18);
      *((_BYTE *)a1 + 457) |= v143 == 379;
      v144 = *((_QWORD *)a1 + 4);
      v339 = v142;
      v145 = (_QWORD *)(v144 + 208);
      v146 = *(unsigned int *)(v144 + 220);
      if ((_DWORD)v146 == *(_DWORD *)(v144 + 216))
      {
        v181 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v145, v146 + 1, (unint64_t)&v339);
        v146 = *(unsigned int *)(v144 + 220);
        *(_QWORD *)(*(_QWORD *)(v144 + 208) + 8 * v146) = *v181;
        v143 = *(unsigned __int16 *)(v142 + 18);
      }
      else
      {
        *(_QWORD *)(*v145 + 8 * v146) = v142;
      }
      *(_DWORD *)(v144 + 220) = v146 + 1;
      v147 = *((_QWORD *)a1 + 3);
      if (v143 == 386)
      {
        *(_DWORD *)(v142 + 48) = ~*(_DWORD *)(v147 + 308);
        v312 = (WTF *)*(unsigned int *)(v147 + 308);
        v315 = v14;
        v236 = (char *)v312 + 2;
        v237 = *(unsigned int *)(v147 + 304);
        v322 = v147;
        v238 = *(_QWORD *)(v147 + 296);
        if ((unint64_t)v312 + 2 > v237)
        {
          v239 = v237 + (v237 >> 2);
          if (v239 >= 0x10)
            v240 = v239 + 1;
          else
            v240 = 16;
          if (v240 <= (unint64_t)v236)
            v241 = (unint64_t)v312 + 2;
          else
            v241 = v240;
          if (v241 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19833AFD0);
          }
          v242 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v241));
          *(_DWORD *)(v322 + 304) = v241;
          *(_QWORD *)(v322 + 296) = v242;
          if ((_DWORD)v312)
          {
            v260 = 8 * (_QWORD)v312;
            v261 = (uint64_t *)v238;
            do
            {
              v262 = *v261++;
              *v242++ = v262;
              v260 -= 8;
            }
            while (v260);
            v242 = *(_QWORD **)(v322 + 296);
          }
          if (v238)
          {
            if (v242 == (_QWORD *)v238)
            {
              *(_QWORD *)(v322 + 296) = 0;
              *(_DWORD *)(v322 + 304) = 0;
            }
            WTF::fastFree(v238, v243, (uint64_t)v136, v137, v138, v139, v140, v141);
            v238 = *(_QWORD *)(v322 + 296);
          }
          else
          {
            v238 = (unint64_t)v242;
          }
        }
        if (v238)
        {
          v244 = (char *)*(unsigned int *)(v322 + 308);
          if (v236 != v244)
          {
            v245 = (_QWORD *)(v238 + 8 * (_QWORD)v244);
            v246 = 8 * (_QWORD)v312 - 8 * (_QWORD)v244 + 16;
            do
            {
              *v245++ = 0x3FFFFFFF00000000;
              v246 -= 8;
            }
            while (v246);
          }
        }
        v14 = v315;
        *(_DWORD *)(v322 + 308) = (_DWORD)v236;
        v147 = *((_QWORD *)a1 + 3);
        v148 = v324;
        v134 = v327;
      }
      else
      {
        v148 = v324;
      }
      if (JSC::DFG::clobbersExitState((JSC::DFG *)v147, (JSC::DFG::Graph *)v142, v136, v137, v138, v139, v140, v141))
        *((_BYTE *)a1 + 64) = 0;
      *(_QWORD *)(v323 + 8 * v148) = v142;
      v331 = v134;
      v149 = (_QWORD *)(v109 + 16);
      v150 = *(unsigned int *)(v109 + 28);
      if ((_DWORD)v150 == *(_DWORD *)(v109 + 24))
      {
        v159 = (_QWORD *)WTF::Vector<JSC::DFG::VariableAccessData *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v149, v150 + 1, (unint64_t)&v331);
        v150 = *(unsigned int *)(v109 + 28);
        *(_QWORD *)(*(_QWORD *)(v109 + 16) + 8 * v150) = *v159;
        v134 = v331;
      }
      else
      {
        *(_QWORD *)(*v149 + 8 * v150) = v134;
      }
      *(_DWORD *)(v109 + 28) = v150 + 1;
      v151 = *(unsigned __int8 *)(v134 + 40);
      v152 = (v151 | *(_BYTE *)(v109 + 13));
      if (v152 != v151)
        *(_BYTE *)(v134 + 40) = v152;
    }
    else
    {
LABEL_9:
      if (*(_BYTE *)(*((_QWORD *)a1 + 3) + 960) && *(_DWORD *)(*((_QWORD *)a1 + 1) + 48) == (_DWORD)v10)
        JSC::DFG::ByteCodeParser::flush((uint64_t)a1, v10, a3, a4, a5, a6, a7, a8);
    }
  }
  v19 = *((_QWORD *)a1 + 3);
  v20 = *(_QWORD *)(v19 + 464);
  *(_QWORD *)(v19 + 464) = v20 + 1;
  v21 = v20 >> 4;
  v22 = *(unsigned int *)(v19 + 484);
  if (v20 >> 4 >= v22)
  {
    v154 = WTF::fastMalloc((WTF *)0x400);
    v331 = v154;
    v155 = *(unsigned int *)(v19 + 484);
    if ((_DWORD)v155 == *(_DWORD *)(v19 + 480))
    {
      v156 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v19 + 472, v155 + 1, (unint64_t)&v331);
      v155 = *(unsigned int *)(v19 + 484);
      *(_QWORD *)(*(_QWORD *)(v19 + 472) + 8 * v155) = *v156;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v19 + 472) + 8 * v155) = v154;
    }
    v22 = (v155 + 1);
    *(_DWORD *)(v19 + 484) = v22;
    v20 = *(_QWORD *)(v19 + 464) - 1;
    v21 = v20 >> 4;
  }
  if (v21 >= v22)
  {
    __break(0xC471u);
    JUMPOUT(0x19833ADF0);
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v19 + 472) + 8 * v21) + ((v20 & 0xF) << 6);
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = 0;
  *(_QWORD *)(v23 + 24) = v10;
  *(_DWORD *)(v23 + 32) = 0x3FFFFFFF;
  *(_DWORD *)(v23 + 56) = 0;
  *(_QWORD *)(v23 + 48) = 0;
  *(_QWORD *)(v23 + 36) = 0;
  *(_BYTE *)(v23 + 44) = 0;
  v24 = *(_QWORD *)(v19 + 464) - 1;
  if (v24 >> 4 >= *(unsigned int *)(v19 + 484))
  {
    __break(0xC471u);
    JUMPOUT(0x19833ADF8);
  }
  v25 = *((_QWORD *)a1 + 35);
  v26 = *(_QWORD *)a2;
  v27 = *(_QWORD *)a2 >> 36;
  if ((*(_QWORD *)a2 & 2) != 0)
  {
    LODWORD(v28) = -1;
  }
  else if ((v26 & 1) != 0)
  {
    LODWORD(v28) = *(_DWORD *)((v26 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v28 = *(_QWORD *)a2 >> 36;
  }
  v29 = *(_QWORD *)(*(_QWORD *)(v19 + 472) + 8 * (v24 >> 4));
  v30 = v24 & 0xF;
  v31 = *(_QWORD *)(v25 + 32);
  if (!v31)
  {
    v32 = 0;
    goto LABEL_18;
  }
  v83 = 0;
  v84 = *(_DWORD *)(v31 - 8);
  v85 = 9 * ((v28 + ~((_DWORD)v28 << 15)) ^ ((v28 + ~((_DWORD)v28 << 15)) >> 10));
  v86 = (v85 ^ (v85 >> 6)) + ~((v85 ^ (v85 >> 6)) << 11);
  v87 = v86 ^ HIWORD(v86);
  for (i = v87 + 23; ; i = v83 + v89)
  {
    v89 = i & v84;
    v90 = (int *)(v31 + 8 * v89);
    v91 = *v90;
    v92 = *((unsigned __int8 *)v90 + 4);
    v93 = *((unsigned __int8 *)v90 + 5);
    if (v91 != (_DWORD)v28 || v92 != 5)
      break;
    if (v93 == 1 && *(_BYTE *)(v31 + 8 * v89 + 6) == 1)
    {
      if ((_DWORD)v89 == *(_DWORD *)(v31 - 4))
        goto LABEL_295;
      goto LABEL_89;
    }
LABEL_78:
    ++v83;
  }
  if (v91)
    v215 = 0;
  else
    v215 = v92 == 0;
  v216 = v215 && v93 == 0;
  if (!v216 || *(_BYTE *)(v31 + 8 * v89 + 6))
    goto LABEL_78;
  LODWORD(v89) = *(_DWORD *)(v31 - 4);
LABEL_295:
  v217 = 0;
  v218 = v87 + 34;
  while (2)
  {
    v219 = v218 & v84;
    v220 = (int *)(v31 + 8 * v219);
    v221 = *v220;
    a3 = *((unsigned __int8 *)v220 + 4);
    v222 = *((unsigned __int8 *)v220 + 5);
    if (v221 != (_DWORD)v28 || (_DWORD)a3 != 5)
    {
      if (v221)
        v265 = 0;
      else
        v265 = (_DWORD)a3 == 0;
      v266 = v265 && v222 == 0;
      if (v266 && !*(_BYTE *)(v31 + 8 * v219 + 6))
        goto LABEL_390;
      goto LABEL_303;
    }
    if (v222 != 1 || *(_BYTE *)(v31 + 8 * v219 + 6) != 2)
    {
LABEL_303:
      v218 = ++v217 + v219;
      continue;
    }
    break;
  }
  if ((_DWORD)v219 != (_DWORD)v89)
    goto LABEL_89;
LABEL_390:
  v267 = 0;
  for (j = v87 + 30; ; j = v267 + v269)
  {
    v269 = j & v84;
    v270 = (int *)(v31 + 8 * v269);
    v271 = *v270;
    a3 = *((unsigned __int8 *)v270 + 4);
    v272 = *((unsigned __int8 *)v270 + 5);
    if (v271 == (_DWORD)v28 && (_DWORD)a3 == 5)
      break;
    if (v271)
      v284 = 0;
    else
      v284 = (_DWORD)a3 == 0;
    v285 = v284 && v272 == 0;
    if (v285 && !*(_BYTE *)(v31 + 8 * v269 + 6))
      goto LABEL_434;
LABEL_398:
    ++v267;
  }
  if (v272 != 2 || *(_BYTE *)(v31 + 8 * v269 + 6) != 1)
    goto LABEL_398;
  if ((_DWORD)v269 != (_DWORD)v89)
  {
LABEL_89:
    v33 = 1;
    goto LABEL_19;
  }
LABEL_434:
  v286 = 0;
  for (k = v87 + 41; ; k = v286 + v288)
  {
    v288 = k & v84;
    v289 = (int *)(v31 + 8 * v288);
    v290 = *v289;
    v291 = *((unsigned __int8 *)v289 + 4);
    v292 = *((unsigned __int8 *)v289 + 5);
    if (v290 != (_DWORD)v28 || v291 != 5)
      break;
    if (v292 == 2 && *(_BYTE *)(v31 + 8 * v288 + 6) == 2)
    {
      v304 = v89;
      goto LABEL_462;
    }
LABEL_442:
    ++v286;
  }
  if (v290)
    v306 = 0;
  else
    v306 = v291 == 0;
  v307 = v306 && v292 == 0;
  if (!v307 || *(_BYTE *)(v31 + 8 * v288 + 6))
    goto LABEL_442;
  v304 = v89;
  v288 = v89;
LABEL_462:
  v32 = v31 + 8 * v288;
  v31 += 8 * v304;
LABEL_18:
  v33 = v32 != v31;
LABEL_19:
  v34 = v29 + (v30 << 6);
  v37 = *(unsigned __int8 *)(v34 + 41);
  v35 = (_BYTE *)(v34 + 41);
  v36 = v37;
  if (v37)
    v33 = 1;
  if (v36 != v33)
    *v35 = v33;
  if ((v26 & 2) != 0)
  {
    LODWORD(v27) = -1;
  }
  else if ((v26 & 1) != 0)
  {
    LODWORD(v27) = *(_DWORD *)((v26 & 0xFFFFFFFF8) + 8);
  }
  v38 = *(_QWORD *)(v25 + 32);
  if (!v38)
  {
    v39 = 0;
    v40 = 0;
    goto LABEL_28;
  }
  v95 = 0;
  v96 = *(_DWORD *)(v38 - 8);
  v97 = 9 * ((v27 + ~((_DWORD)v27 << 15)) ^ ((v27 + ~((_DWORD)v27 << 15)) >> 10));
  v98 = (v97 ^ (v97 >> 6)) + ~((v97 ^ (v97 >> 6)) << 11);
  v99 = v98 ^ HIWORD(v98);
  v100 = v99 + 25;
  while (2)
  {
    v101 = v100 & v96;
    v102 = (int *)(v38 + 8 * v101);
    v103 = *v102;
    v104 = *((unsigned __int8 *)v102 + 4);
    v105 = *((unsigned __int8 *)v102 + 5);
    if (v103 == (_DWORD)v27 && v104 == 7)
    {
      if (v105 == 1 && *(_BYTE *)(v38 + 8 * v101 + 6) == 1)
      {
        if ((_DWORD)v101 == *(_DWORD *)(v38 - 4))
          goto LABEL_314;
        goto LABEL_91;
      }
LABEL_87:
      v100 = ++v95 + v101;
      continue;
    }
    break;
  }
  if (v103)
    v224 = 0;
  else
    v224 = v104 == 0;
  v225 = v224 && v105 == 0;
  if (!v225 || *(_BYTE *)(v38 + 8 * v101 + 6))
    goto LABEL_87;
  LODWORD(v101) = *(_DWORD *)(v38 - 4);
LABEL_314:
  v226 = 0;
  v227 = v99 + 36;
  while (2)
  {
    v228 = v227 & v96;
    v229 = (int *)(v38 + 8 * v228);
    v230 = *v229;
    v231 = *((unsigned __int8 *)v229 + 4);
    v232 = *((unsigned __int8 *)v229 + 5);
    if (v230 != (_DWORD)v27 || v231 != 7)
    {
      if (v230)
        v274 = 0;
      else
        v274 = v231 == 0;
      v275 = v274 && v232 == 0;
      if (v275 && !*(_BYTE *)(v38 + 8 * v228 + 6))
        goto LABEL_408;
      goto LABEL_322;
    }
    if (v232 != 1 || *(_BYTE *)(v38 + 8 * v228 + 6) != 2)
    {
LABEL_322:
      v227 = ++v226 + v228;
      continue;
    }
    break;
  }
  if ((_DWORD)v228 != (_DWORD)v101)
    goto LABEL_91;
LABEL_408:
  v276 = 0;
  for (m = v99 + 32; ; m = v276 + v278)
  {
    v278 = m & v96;
    v279 = (int *)(v38 + 8 * v278);
    v280 = *v279;
    v281 = *((unsigned __int8 *)v279 + 4);
    v282 = *((unsigned __int8 *)v279 + 5);
    if (v280 == (_DWORD)v27 && v281 == 7)
      break;
    if (v280)
      v294 = 0;
    else
      v294 = v281 == 0;
    v295 = v294 && v282 == 0;
    if (v295 && !*(_BYTE *)(v38 + 8 * v278 + 6))
      goto LABEL_452;
LABEL_416:
    ++v276;
  }
  if (v282 != 2 || *(_BYTE *)(v38 + 8 * v278 + 6) != 1)
    goto LABEL_416;
  if ((_DWORD)v278 != (_DWORD)v101)
  {
LABEL_91:
    v41 = 1;
    goto LABEL_29;
  }
LABEL_452:
  v296 = 0;
  for (n = v99 + 43; ; n = v296 + v298)
  {
    v298 = n & v96;
    v299 = (int *)(v38 + 8 * v298);
    v300 = *v299;
    v301 = *((unsigned __int8 *)v299 + 4);
    v302 = *((unsigned __int8 *)v299 + 5);
    if (v300 != (_DWORD)v27 || v301 != 7)
      break;
    if (v302 == 2 && *(_BYTE *)(v38 + 8 * v298 + 6) == 2)
    {
      v305 = v101;
      goto LABEL_464;
    }
LABEL_460:
    ++v296;
  }
  if (v300)
    v308 = 0;
  else
    v308 = v301 == 0;
  v309 = v308 && v302 == 0;
  if (!v309 || *(_BYTE *)(v38 + 8 * v298 + 6))
    goto LABEL_460;
  v305 = v101;
  v298 = v101;
LABEL_464:
  v39 = v38 + 8 * v298;
  v40 = v38 + 8 * v305;
LABEL_28:
  v41 = v39 != v40;
LABEL_29:
  v42 = v29 + (v30 << 6);
  v45 = *(unsigned __int8 *)(v42 + 42);
  v43 = (_BYTE *)(v42 + 42);
  v44 = v45;
  if (v45)
    v41 = 1;
  if (v44 != v41)
    *v43 = v41;
  v46 = *((_QWORD *)a1 + 3);
  if ((*((_BYTE *)a1 + 48) & 2) != 0)
  {
    v47 = *((unsigned int *)a1 + 10);
    v48 = *(_QWORD *)(v25 + 24);
    if ((_DWORD)v47 == 0x3FFFFFFF || (_DWORD)v47 == -1)
    {
      v49 = 2;
    }
    else if (v47 >> 28)
    {
      v185 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v185 = v48;
      *(_DWORD *)(v185 + 8) = v47;
      v49 = 1;
      v48 = v185;
    }
    else
    {
      v49 = *(_QWORD *)(v25 + 24);
      v48 = v47 << 36;
    }
    v339 = v48 | v49;
  }
  else
  {
    JSC::CodeOrigin::CodeOrigin(&v339, v13);
  }
  v50 = (JSC::CodeOrigin *)((char *)a1 + 56);
  if ((*((_BYTE *)a1 + 56) & 2) != 0)
  {
    v51 = *((unsigned int *)a1 + 10);
    v52 = *(_QWORD *)(*((_QWORD *)a1 + 35) + 24);
    if ((_DWORD)v51 == 0x3FFFFFFF || (_DWORD)v51 == -1)
    {
      v53 = 2;
    }
    else if (v51 >> 28)
    {
      v186 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v186 = v52;
      *(_DWORD *)(v186 + 8) = v51;
      v53 = 1;
      v52 = v186;
    }
    else
    {
      v53 = *(_QWORD *)(*((_QWORD *)a1 + 35) + 24);
      v52 = v51 << 36;
    }
    v338 = v52 | v53;
  }
  else
  {
    JSC::CodeOrigin::CodeOrigin((uint64_t *)&v338, v50);
  }
  v54 = v339;
  if ((v339 & 1) != 0)
  {
    v164 = *(_QWORD *)(v339 & 0xFFFFFFFF8);
    if ((v339 & 2) != 0
      || (v165 = *(unsigned int *)((v339 & 0xFFFFFFFF8) + 8), (_DWORD)v165 == 0x3FFFFFFF)
      || (_DWORD)v165 == -1)
    {
      v166 = 2;
    }
    else if (v165 >> 28)
    {
      v248 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v248 = v164;
      *(_DWORD *)(v248 + 8) = v165;
      v166 = 1;
      v164 = v248;
    }
    else
    {
      v166 = *(_QWORD *)(v339 & 0xFFFFFFFF8);
      v164 = v165 << 36;
    }
    v54 = v164 | v166;
  }
  v55 = v338;
  if ((v338 & 1) != 0)
  {
    v167 = *(_QWORD *)(v338 & 0xFFFFFFFF8);
    if ((v338 & 2) != 0
      || (v168 = *(unsigned int *)((v338 & 0xFFFFFFFF8) + 8), (_DWORD)v168 == 0x3FFFFFFF)
      || (_DWORD)v168 == -1)
    {
      v169 = 2;
    }
    else if (v168 >> 28)
    {
      v249 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v249 = v167;
      *(_DWORD *)(v249 + 8) = v168;
      v169 = 1;
      v167 = v249;
    }
    else
    {
      v169 = *(_QWORD *)(v338 & 0xFFFFFFFF8);
      v167 = v168 << 36;
    }
    v55 = v167 | v169;
  }
  v56 = *((_BYTE *)a1 + 64);
  v57 = v54;
  if ((v54 & 1) != 0)
  {
    v170 = *(_QWORD *)(v54 & 0xFFFFFFFF8);
    if ((v54 & 2) != 0
      || (v171 = *(unsigned int *)((v54 & 0xFFFFFFFF8) + 8), (_DWORD)v171 == 0x3FFFFFFF)
      || (_DWORD)v171 == -1)
    {
      v172 = 2;
    }
    else if (v171 >> 28)
    {
      v325 = *(_QWORD *)(v54 & 0xFFFFFFFF8);
      v328 = *(_DWORD *)((v54 & 0xFFFFFFFF8) + 8);
      v250 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v250 = v325;
      *(_DWORD *)(v250 + 8) = v328;
      v172 = 1;
      v170 = v250;
    }
    else
    {
      v172 = *(_QWORD *)(v54 & 0xFFFFFFFF8);
      v170 = v171 << 36;
    }
    v57 = v170 | v172;
  }
  v331 = v57;
  if ((v55 & 1) != 0)
  {
    v173 = v55 & 0xFFFFFFFF8;
    v174 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
    if ((v55 & 2) != 0
      || (v175 = *(unsigned int *)((v55 & 0xFFFFFFFF8) + 8), (_DWORD)v175 == 0x3FFFFFFF)
      || (_DWORD)v175 == -1)
    {
      v176 = 2;
    }
    else if (v175 >> 28)
    {
      v326 = v174;
      v329 = v173;
      v251 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v251 = v326;
      *(_DWORD *)(v251 + 8) = v175;
      v176 = 1;
      v174 = v251;
      v173 = v329;
    }
    else
    {
      v176 = v174;
      v174 = v175 << 36;
    }
    v332 = v174 | v176;
    v333 = v56;
    v334 = 0;
    if (v173)
      WTF::fastFree(v173, v50, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v332 = v55;
    v333 = v56;
    v334 = 0;
  }
  if ((v54 & 1) != 0 && (v54 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v54 & 0xFFFFFFFF8, v50, a3, a4, a5, a6, a7, a8);
  if ((v338 & 1) != 0 && (v338 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v338 & 0xFFFFFFFF8, v50, a3, a4, a5, a6, a7, a8);
  if ((v339 & 1) != 0 && (v339 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v339 & 0xFFFFFFFF8, v50, a3, a4, a5, a6, a7, a8);
  v338 = a4 & 0xFF00FFFFFFFFFFFFLL;
  v339 = v29 + (v30 << 6);
  v336 = 0;
  v337 = 0;
  v335 = 16;
  v65 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(v46 + 1032, &v335, (uint64_t)&v331, (uint64_t)&v339, (uint64_t *)&v338, &v337, &v336, a8);
  if ((v332 & 1) != 0 && (v332 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v332 & 0xFFFFFFFF8, v58, (uint64_t)v59, v60, v61, v62, v63, v64);
  if ((v331 & 1) != 0 && (v331 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v331 & 0xFFFFFFFF8, v58, (uint64_t)v59, v60, v61, v62, v63, v64);
  v66 = *(unsigned __int16 *)(v65 + 18);
  *((_BYTE *)a1 + 457) |= v66 == 379;
  v67 = *((_QWORD *)a1 + 4);
  v339 = v65;
  v68 = (_QWORD *)(v67 + 208);
  v69 = *(unsigned int *)(v67 + 220);
  if ((_DWORD)v69 == *(_DWORD *)(v67 + 216))
  {
    v153 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v68, v69 + 1, (unint64_t)&v339);
    v69 = *(unsigned int *)(v67 + 220);
    *(_QWORD *)(*(_QWORD *)(v67 + 208) + 8 * v69) = *v153;
    v66 = *(unsigned __int16 *)(v65 + 18);
  }
  else
  {
    *(_QWORD *)(*v68 + 8 * v69) = v65;
  }
  *(_DWORD *)(v67 + 220) = v69 + 1;
  v70 = *((_QWORD *)a1 + 3);
  if (v66 == 386)
  {
    *(_DWORD *)(v65 + 48) = ~*(_DWORD *)(v70 + 308);
    v187 = *(unsigned int *)(v70 + 308);
    v188 = v187 + 2;
    v189 = *(unsigned int *)(v70 + 304);
    v190 = *(_QWORD *)(v70 + 296);
    if (v187 + 2 > v189)
    {
      v191 = v189 + (v189 >> 2);
      if (v191 >= 0x10)
        v192 = v191 + 1;
      else
        v192 = 16;
      if (v192 <= v188)
        v193 = v187 + 2;
      else
        v193 = v192;
      if (v193 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19833AFC8);
      }
      v194 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v193));
      *(_DWORD *)(v70 + 304) = v193;
      *(_QWORD *)(v70 + 296) = v194;
      if ((_DWORD)v187)
      {
        v253 = 8 * v187;
        v254 = (uint64_t *)v190;
        do
        {
          v255 = *v254++;
          *v194++ = v255;
          v253 -= 8;
        }
        while (v253);
        v194 = *(_QWORD **)(v70 + 296);
      }
      if (v190)
      {
        if (v194 == (_QWORD *)v190)
        {
          *(_QWORD *)(v70 + 296) = 0;
          *(_DWORD *)(v70 + 304) = 0;
        }
        WTF::fastFree(v190, v195, (uint64_t)v59, v60, v61, v62, v63, v64);
        v190 = *(_QWORD *)(v70 + 296);
      }
      else
      {
        v190 = (unint64_t)v194;
      }
    }
    if (v190)
    {
      v196 = *(unsigned int *)(v70 + 308);
      if (v188 != v196)
      {
        v197 = (_QWORD *)(v190 + 8 * v196);
        v198 = 8 * v187 - 8 * v196 + 16;
        do
        {
          *v197++ = 0x3FFFFFFF00000000;
          v198 -= 8;
        }
        while (v198);
      }
    }
    *(_DWORD *)(v70 + 308) = v188;
    v70 = *((_QWORD *)a1 + 3);
  }
  if (JSC::DFG::clobbersExitState((JSC::DFG *)v70, (JSC::DFG::Graph *)v65, v59, v60, v61, v62, v63, v64))
    *((_BYTE *)a1 + 64) = 0;
  v78 = *((_QWORD *)a1 + 4);
  if (HIDWORD(v330) == 2)
  {
    v79 = *(unsigned int *)(v78 + 112) + (uint64_t)(int)v330 + *(unsigned int *)(v78 + 116);
  }
  else if ((v330 & 0x80000000) != 0)
  {
    v79 = (v330 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v78 + 112);
  }
  else
  {
    v79 = (int)v330 - 5;
  }
  *(_QWORD *)(*(_QWORD *)(v78 + 96) + 8 * v79) = v65;
  v80 = *(_QWORD *)v13;
  if ((*(_QWORD *)v13 & 1) != 0 && (v80 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v80 & 0xFFFFFFFF8, v71, v72, v73, v74, v75, v76, v77);
  *(_QWORD *)v13 = v14;
  return v65;
}

uint64_t JSC::DFG::ByteCodeParser::flushDirect(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  const JSC::CodeOrigin *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  void *v41;
  JSC::DFG::Node *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  _QWORD *v61;
  _DWORD *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  WTF *v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  void *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF *v100;
  uint64_t v101;
  WTF *v102;
  char v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  char v108;
  __int16 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  if (!HIDWORD(a2))
  {
    v10 = a1 + 280;
    do
    {
      v11 = *(_QWORD *)v10;
      v12 = *(_QWORD *)(*(_QWORD *)v10 + 24);
      v10 = *(_QWORD *)v10 + 208;
    }
    while (v12);
    v13 = (int)a2 - 5;
    if (v13 >= *(unsigned int *)(v11 + 204))
    {
      __break(0xC471u);
      JUMPOUT(0x19833B8CCLL);
    }
LABEL_5:
    v14 = *(_QWORD *)(*(_QWORD *)(v11 + 192) + 8 * v13);
    goto LABEL_6;
  }
  if (HIDWORD(a2) != 2)
  {
    v11 = *(_QWORD *)(a1 + 280);
    v58 = *(_QWORD *)(v11 + 24);
    if (v58)
    {
      while (1)
      {
        v63 = HIDWORD(*(_QWORD *)(v58 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v58 + 24) >> 28) >> 24 << 20);
        if (v63 + 5 <= (int)a2)
        {
          v62 = *(_DWORD **)v58;
          if (v62)
            LODWORD(v62) = *v62;
          if ((int)v62 + v63 + 5 > (int)a2)
            break;
        }
        v14 = 0;
        v11 = *(_QWORD *)(v11 + 208);
        v58 = *(_QWORD *)(v11 + 24);
        if (!v58)
          goto LABEL_6;
      }
      LODWORD(v13) = a2 - v63 - 5;
      if (*(unsigned int *)(v11 + 204) <= (unint64_t)(int)v13)
      {
        __break(0xC471u);
        JUMPOUT(0x19833B8D4);
      }
      v13 = (int)v13;
      goto LABEL_5;
    }
  }
  v14 = 0;
LABEL_6:
  v15 = *(_QWORD *)(a1 + 32);
  if (HIDWORD(a2) == 2)
  {
    v17 = *(unsigned int *)(v15 + 116);
    v16 = *(unsigned int *)(v15 + 112) + (uint64_t)(int)a2;
    goto LABEL_9;
  }
  if ((a2 & 0x80000000) != 0)
  {
    v16 = a2 ^ 0xFFFFFFFFLL;
    v17 = *(unsigned int *)(v15 + 112);
LABEL_9:
    v18 = v16 + v17;
    goto LABEL_10;
  }
  v18 = (int)a2 - 5;
LABEL_10:
  v19 = *(_QWORD *)(v15 + 96);
  v20 = *(_QWORD *)(v19 + 8 * v18);
  if (v20)
  {
    v59 = *(uint64_t **)(v20 + 72);
    v60 = v59;
    do
    {
      v27 = (uint64_t)v60;
      v60 = (uint64_t *)*v60;
    }
    while (v60);
    if ((uint64_t *)v27 == v59)
      v27 = (uint64_t)v59;
    else
      *v59 = v27;
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 24);
    v22 = *(_QWORD *)(v21 + 464);
    *(_QWORD *)(v21 + 464) = v22 + 1;
    v23 = v22 >> 4;
    v24 = *(unsigned int *)(v21 + 484);
    if (v22 >> 4 >= v24)
    {
      v64 = WTF::fastMalloc((WTF *)0x400);
      v105 = v64;
      v65 = *(unsigned int *)(v21 + 484);
      if ((_DWORD)v65 == *(_DWORD *)(v21 + 480))
      {
        v66 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21 + 472, v65 + 1, (unint64_t)&v105);
        v65 = *(unsigned int *)(v21 + 484);
        *(_QWORD *)(*(_QWORD *)(v21 + 472) + 8 * v65) = *v66;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v21 + 472) + 8 * v65) = v64;
      }
      v24 = (v65 + 1);
      *(_DWORD *)(v21 + 484) = v24;
      v22 = *(_QWORD *)(v21 + 464) - 1;
      v23 = v22 >> 4;
    }
    if (v23 >= v24)
      goto LABEL_152;
    v25 = *(_QWORD *)(*(_QWORD *)(v21 + 472) + 8 * v23) + ((v22 & 0xF) << 6);
    *(_QWORD *)v25 = 0;
    *(_QWORD *)(v25 + 8) = 0;
    *(_QWORD *)(v25 + 16) = 0;
    *(_QWORD *)(v25 + 24) = a2;
    *(_DWORD *)(v25 + 32) = 0x3FFFFFFF;
    *(_DWORD *)(v25 + 56) = 0;
    *(_QWORD *)(v25 + 48) = 0;
    *(_QWORD *)(v25 + 36) = 0;
    *(_BYTE *)(v25 + 44) = 0;
    v26 = *(_QWORD *)(v21 + 464) - 1;
    if (v26 >> 4 >= *(unsigned int *)(v21 + 484))
    {
      __break(0xC471u);
      JUMPOUT(0x19833B8C4);
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v21 + 472) + 8 * (v26 >> 4)) + ((v26 & 0xF) << 6);
  }
  v28 = *(_QWORD *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
  {
    v29 = *(unsigned int *)(a1 + 40);
    v30 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
    if ((_DWORD)v29 == 0x3FFFFFFF || (_DWORD)v29 == -1)
    {
      v32 = 2;
    }
    else if (v29 >> 28)
    {
      v81 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v81 = v30;
      *(_DWORD *)(v81 + 8) = v29;
      v32 = 1;
      v30 = v81;
    }
    else
    {
      v32 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      v30 = v29 << 36;
    }
    v113 = v30 | v32;
  }
  else
  {
    JSC::CodeOrigin::CodeOrigin(&v113, (const JSC::CodeOrigin *)(a1 + 48));
  }
  v33 = (const JSC::CodeOrigin *)(a1 + 56);
  if ((*(_BYTE *)(a1 + 56) & 2) != 0)
  {
    v34 = *(unsigned int *)(a1 + 40);
    v35 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
    if ((_DWORD)v34 == 0x3FFFFFFF || (_DWORD)v34 == -1)
    {
      v36 = 2;
    }
    else if (v34 >> 28)
    {
      v82 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v82 = v35;
      *(_DWORD *)(v82 + 8) = v34;
      v36 = 1;
      v35 = v82;
    }
    else
    {
      v36 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      v35 = v34 << 36;
    }
    v112 = v35 | v36;
  }
  else
  {
    JSC::CodeOrigin::CodeOrigin(&v112, v33);
  }
  v37 = v113;
  if ((v113 & 1) != 0)
  {
    v67 = *(_QWORD *)(v113 & 0xFFFFFFFF8);
    if ((v113 & 2) != 0
      || ((v68 = *(unsigned int *)((v113 & 0xFFFFFFFF8) + 8), (_DWORD)v68 != 0x3FFFFFFF)
        ? (v69 = (_DWORD)v68 == -1)
        : (v69 = 1),
          v69))
    {
      v70 = 2;
    }
    else if (v68 >> 28)
    {
      v94 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v94 = v67;
      *(_DWORD *)(v94 + 8) = v68;
      v70 = 1;
      v67 = v94;
    }
    else
    {
      v70 = *(_QWORD *)(v113 & 0xFFFFFFFF8);
      v67 = v68 << 36;
    }
    v37 = v67 | v70;
  }
  v38 = v112;
  if ((v112 & 1) != 0)
  {
    v71 = *(_QWORD *)(v112 & 0xFFFFFFFF8);
    if ((v112 & 2) != 0
      || (v72 = *(unsigned int *)((v112 & 0xFFFFFFFF8) + 8), (_DWORD)v72 == 0x3FFFFFFF)
      || (_DWORD)v72 == -1)
    {
      v73 = 2;
    }
    else if (v72 >> 28)
    {
      v95 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v95 = v71;
      *(_DWORD *)(v95 + 8) = v72;
      v73 = 1;
      v71 = v95;
    }
    else
    {
      v73 = *(_QWORD *)(v112 & 0xFFFFFFFF8);
      v71 = v72 << 36;
    }
    v38 = v71 | v73;
  }
  v39 = *(_BYTE *)(a1 + 64);
  v40 = v37;
  if ((v37 & 1) != 0)
  {
    v74 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
    if ((v37 & 2) != 0
      || (v75 = *(unsigned int *)((v37 & 0xFFFFFFFF8) + 8), (_DWORD)v75 == 0x3FFFFFFF)
      || (_DWORD)v75 == -1)
    {
      v76 = 2;
    }
    else if (v75 >> 28)
    {
      v103 = *(_BYTE *)(a1 + 64);
      v96 = *(_DWORD *)((v37 & 0xFFFFFFFF8) + 8);
      v97 = WTF::fastMalloc((WTF *)0x10);
      v39 = v103;
      *(_QWORD *)v97 = v74;
      *(_DWORD *)(v97 + 8) = v96;
      v76 = 1;
      v74 = v97;
    }
    else
    {
      v76 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
      v74 = v75 << 36;
    }
    v40 = v74 | v76;
  }
  v105 = v40;
  if ((v38 & 1) != 0)
  {
    v77 = v38 & 0xFFFFFFFF8;
    v78 = *(_QWORD *)(v38 & 0xFFFFFFFF8);
    if ((v38 & 2) != 0
      || (v79 = *(unsigned int *)((v38 & 0xFFFFFFFF8) + 8), (_DWORD)v79 == 0x3FFFFFFF)
      || (_DWORD)v79 == -1)
    {
      v80 = 2;
    }
    else if (v79 >> 28)
    {
      v98 = v78;
      v104 = v39;
      v78 = WTF::fastMalloc((WTF *)0x10);
      v39 = v104;
      *(_QWORD *)v78 = v98;
      *(_DWORD *)(v78 + 8) = v79;
      v80 = 1;
    }
    else
    {
      v80 = v78;
      v78 = v79 << 36;
    }
    v106 = v78 | v80;
    v107 = v39;
    v108 = 0;
    if (v77)
      WTF::fastFree(v77, v33, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v106 = v38;
    v107 = v39;
    v108 = 0;
  }
  if ((v37 & 1) != 0 && (v37 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v37 & 0xFFFFFFFF8, v33, a3, a4, a5, a6, a7, a8);
  if ((v112 & 1) != 0 && (v112 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v112 & 0xFFFFFFFF8, v33, a3, a4, a5, a6, a7, a8);
  if ((v113 & 1) != 0 && (v113 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v113 & 0xFFFFFFFF8, v33, a3, a4, a5, a6, a7, a8);
  v112 = 0;
  v113 = v27;
  v110 = 0;
  v111 = 0;
  v109 = 28;
  v48 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(v28 + 1032, &v109, (uint64_t)&v105, (uint64_t)&v113, &v112, &v111, &v110, a8);
  if ((v106 & 1) != 0 && (v106 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v106 & 0xFFFFFFFF8, v41, (uint64_t)v42, v43, v44, v45, v46, v47);
  if ((v105 & 1) != 0 && (v105 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v105 & 0xFFFFFFFF8, v41, (uint64_t)v42, v43, v44, v45, v46, v47);
  v49 = *(unsigned __int16 *)(v48 + 18);
  *(_BYTE *)(a1 + 457) |= v49 == 379;
  v50 = *(_QWORD *)(a1 + 32);
  v113 = v48;
  v51 = (_QWORD *)(v50 + 208);
  v52 = *(unsigned int *)(v50 + 220);
  if ((_DWORD)v52 == *(_DWORD *)(v50 + 216))
  {
    v61 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v51, v52 + 1, (unint64_t)&v113);
    v52 = *(unsigned int *)(v50 + 220);
    *(_QWORD *)(*(_QWORD *)(v50 + 208) + 8 * v52) = *v61;
    v49 = *(unsigned __int16 *)(v48 + 18);
  }
  else
  {
    *(_QWORD *)(*v51 + 8 * v52) = v48;
  }
  *(_DWORD *)(v50 + 220) = v52 + 1;
  v53 = *(_QWORD *)(a1 + 24);
  if (v49 == 386)
  {
    *(_DWORD *)(v48 + 48) = ~*(_DWORD *)(v53 + 308);
    v83 = *(unsigned int *)(v53 + 308);
    v84 = v83 + 2;
    v85 = *(unsigned int *)(v53 + 304);
    v86 = *(WTF **)(v53 + 296);
    if (v83 + 2 <= v85)
    {
LABEL_131:
      if (v86)
      {
        v91 = *(unsigned int *)(v53 + 308);
        if (v84 != v91)
        {
          v92 = (_QWORD *)((char *)v86 + 8 * v91);
          v93 = 8 * v83 - 8 * v91 + 16;
          do
          {
            *v92++ = 0x3FFFFFFF00000000;
            v93 -= 8;
          }
          while (v93);
        }
      }
      *(_DWORD *)(v53 + 308) = v84;
      v53 = *(_QWORD *)(a1 + 24);
      goto LABEL_41;
    }
    v102 = *(WTF **)(v53 + 296);
    v87 = v85 + (v85 >> 2);
    if (v87 >= 0x10)
      v88 = v87 + 1;
    else
      v88 = 16;
    if (v88 <= v84)
      v88 = v83 + 2;
    if (!(v88 >> 29))
    {
      v89 = v88;
      v86 = (WTF *)WTF::fastMalloc((WTF *)(8 * v88));
      *(_DWORD *)(v53 + 304) = v89;
      *(_QWORD *)(v53 + 296) = v86;
      if ((_DWORD)v83)
      {
        v99 = 8 * v83;
        v100 = v102;
        do
        {
          v101 = *(_QWORD *)v100;
          v100 = (WTF *)((char *)v100 + 8);
          *(_QWORD *)v86 = v101;
          v86 = (WTF *)((char *)v86 + 8);
          v99 -= 8;
        }
        while (v99);
        v86 = *(WTF **)(v53 + 296);
      }
      if (v102)
      {
        if (v86 == v102)
        {
          *(_QWORD *)(v53 + 296) = 0;
          *(_DWORD *)(v53 + 304) = 0;
        }
        WTF::fastFree((unint64_t)v102, v90, (uint64_t)v42, v43, v44, v45, v46, v47);
        v86 = *(WTF **)(v53 + 296);
      }
      goto LABEL_131;
    }
LABEL_152:
    __break(0xC471u);
    JUMPOUT(0x19833B8BCLL);
  }
LABEL_41:
  result = JSC::DFG::clobbersExitState((JSC::DFG *)v53, (JSC::DFG::Graph *)v48, v42, v43, v44, v45, v46, v47);
  if ((_DWORD)result)
    *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(v19 + 8 * v18) = v48;
  if (v14)
  {
    v105 = v27;
    result = v14 + 16;
    v55 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v55 == *(_DWORD *)(v14 + 24))
    {
      result = WTF::Vector<JSC::DFG::VariableAccessData *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v55 + 1, (unint64_t)&v105);
      v55 = *(unsigned int *)(v14 + 28);
      *(_QWORD *)(*(_QWORD *)(v14 + 16) + 8 * v55) = *(_QWORD *)result;
      v27 = v105;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)result + 8 * v55) = v27;
    }
    *(_DWORD *)(v14 + 28) = v55 + 1;
    v56 = *(unsigned __int8 *)(v27 + 40);
    v57 = (v56 | *(_BYTE *)(v14 + 13));
    if (v57 != v56)
      *(_BYTE *)(v27 + 40) = v57;
  }
  return result;
}

uint64_t WTF::Vector<JSC::DFG::VariableAccessData *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::VariableAccessData *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 3)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 2;
    goto LABEL_13;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_13:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::DFG::VariableAccessData *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v7 = *(const void **)a1;
    v8 = *(unsigned int *)(a1 + 12);
    if (v5 < 3)
    {
      v9 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
    }
    else
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
    }
    memcpy(v9, v7, 8 * v8);
    if ((const void *)(a1 + 16) != v7 && v7)
    {
      if (*(const void **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

_QWORD *JSC::DFG::ByteCodeParser::addFlushOrPhantomLocal<(JSC::DFG::NodeType)29>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *result;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  v11 = *(_QWORD *)(a1 + 32);
  if (HIDWORD(a2) == 2)
  {
    v13 = *(unsigned int *)(v11 + 116);
    v12 = *(unsigned int *)(v11 + 112) + (uint64_t)(int)a2;
    goto LABEL_4;
  }
  if ((a2 & 0x80000000) != 0)
  {
    v12 = a2 ^ 0xFFFFFFFFLL;
    v13 = *(unsigned int *)(v11 + 112);
LABEL_4:
    v14 = v12 + v13;
    goto LABEL_5;
  }
  v14 = (int)a2 - 5;
LABEL_5:
  v15 = *(_QWORD *)(v11 + 96);
  v16 = *(_QWORD *)(v15 + 8 * v14);
  if (v16)
  {
    v25 = *(uint64_t **)(v16 + 72);
    v26 = v25;
    do
    {
      v23 = (uint64_t)v26;
      v26 = (uint64_t *)*v26;
    }
    while (v26);
    if ((uint64_t *)v23 == v25)
      v23 = (uint64_t)v25;
    else
      *v25 = v23;
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 24);
    v18 = *(_QWORD *)(v17 + 464);
    *(_QWORD *)(v17 + 464) = v18 + 1;
    v19 = v18 >> 4;
    v20 = *(unsigned int *)(v17 + 484);
    if (v18 >> 4 >= v20)
    {
      v30 = WTF::fastMalloc((WTF *)0x400);
      v33 = v30;
      v31 = *(unsigned int *)(v17 + 484);
      if ((_DWORD)v31 == *(_DWORD *)(v17 + 480))
      {
        v32 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 472, v31 + 1, (unint64_t)&v33);
        v31 = *(unsigned int *)(v17 + 484);
        *(_QWORD *)(*(_QWORD *)(v17 + 472) + 8 * v31) = *v32;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v17 + 472) + 8 * v31) = v30;
      }
      v20 = (v31 + 1);
      *(_DWORD *)(v17 + 484) = v20;
      v18 = *(_QWORD *)(v17 + 464) - 1;
      v19 = v18 >> 4;
    }
    if (v19 >= v20)
      goto LABEL_28;
    v21 = *(_QWORD *)(*(_QWORD *)(v17 + 472) + 8 * v19) + ((v18 & 0xF) << 6);
    *(_QWORD *)v21 = 0;
    *(_QWORD *)(v21 + 8) = 0;
    *(_QWORD *)(v21 + 16) = 0;
    *(_QWORD *)(v21 + 24) = a2;
    *(_DWORD *)(v21 + 32) = 0x3FFFFFFF;
    *(_DWORD *)(v21 + 56) = 0;
    *(_QWORD *)(v21 + 48) = 0;
    *(_QWORD *)(v21 + 36) = 0;
    *(_BYTE *)(v21 + 44) = 0;
    v22 = *(_QWORD *)(v17 + 464) - 1;
    if (v22 >> 4 >= *(unsigned int *)(v17 + 484))
    {
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x19833BCE4);
    }
    v23 = *(_QWORD *)(*(_QWORD *)(v17 + 472) + 8 * (v22 >> 4)) + ((v22 & 0xF) << 6);
  }
  result = JSC::DFG::ByteCodeParser::addToGraph(a1, 29, v23, 0, 0, 0, a7, a8);
  *(_QWORD *)(v15 + 8 * v14) = result;
  if (a3)
  {
    v33 = v23;
    result = (_QWORD *)(a3 + 16);
    v27 = *(unsigned int *)(a3 + 28);
    if ((_DWORD)v27 == *(_DWORD *)(a3 + 24))
    {
      result = (_QWORD *)WTF::Vector<JSC::DFG::VariableAccessData *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v27 + 1, (unint64_t)&v33);
      v27 = *(unsigned int *)(a3 + 28);
      *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v27) = *result;
      v23 = v33;
    }
    else
    {
      *(_QWORD *)(*result + 8 * v27) = v23;
    }
    *(_DWORD *)(a3 + 28) = v27 + 1;
    v28 = *(unsigned __int8 *)(v23 + 40);
    v29 = (v28 | *(_BYTE *)(a3 + 13));
    if (v29 != v28)
      *(_BYTE *)(v23 + 40) = v29;
  }
  return result;
}

uint64_t JSC::DFG::ByteCodeParser::flush(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
  if (v8)
  {
    v10 = *(_QWORD *)(v8 + 24);
    if (HIDWORD(a2) == 2)
    {
      LODWORD(a2) = a2 + (v10 >> 22);
      v9 = 2;
    }
    else
    {
      LODWORD(a2) = (HIDWORD(v10) & 0xFFFFF | ((int)(v10 >> 28) >> 24 << 20)) + a2;
      v9 = a2 >> 31;
    }
  }
  else
  {
    v9 = HIDWORD(a2);
  }
  return JSC::DFG::ByteCodeParser::flushDirect(a1, a2 | (unint64_t)(v9 << 32), a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::dataLog<JSC::InlineCallFrame,char [2]>(JSC::InlineCallFrame *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::InlineCallFrame::dumpInContext(a1, v4, 0);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [14],JSC::Operand,char [33],unsigned int,char [18],unsigned int,char [7],char [2]>(int *a1, _DWORD *a2, _DWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  int v9;
  WTF::PrintStream *v10;
  WTF::PrintStream *v11;
  char v13;
  char **v14;
  char *v15;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "Bad operand: ");
  v9 = *a1;
  if (a1[1] == 2)
  {
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v10, "%s", "tmp");
    WTF::PrintStream::printf(v10, "%d", v9);
  }
  else
  {
    LODWORD(v15) = *a1;
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    JSC::VirtualRegister::dump((unsigned int *)&v15, v11);
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  WTF::PrintStream::printf(v8, "%s", " but current number of tmps is: ");
  WTF::PrintStream::printf(v8, "%u", *a2);
  WTF::PrintStream::printf(v8, "%s", " code block has: ");
  WTF::PrintStream::printf(v8, "%u", *a3);
  WTF::PrintStream::printf(v8, "%s", " tmps.");
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

void WTF::VectorTypeOperations<JSC::DFG::ByteCodeParser::DelayedSetLocal>::destruct(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = *v9;
      if ((*v9 & 1) != 0 && (v10 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v9 += 4;
    }
    while (v9 != a2);
  }
}

void JSC::CodeOrigin::walkUpInlineStack<void JSC::DFG::ByteCodeParser::flushForTerminalImpl<JSC::DFG::ByteCodeParser::flushForTerminal(void)::{lambda(JSC::InlineCallFrame *,JSC::Operand)#1},JSC::DFG::ByteCodeParser::flushForTerminal(void)::{lambda(JSC::InlineCallFrame *,JSC::Operand)#2}>(JSC::CodeOrigin,JSC::DFG::ByteCodeParser::flushForTerminal(void)::{lambda(JSC::InlineCallFrame *,JSC::Operand)#1} const&,JSC::DFG::ByteCodeParser::flushForTerminal(void)::{lambda(JSC::InlineCallFrame *,JSC::Operand)#2} const&)::{lambda(JSC::CodeOrigin)#1}>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  int i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  const JSC::CodeOrigin *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  void *v49;
  JSC::DFG::Node *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  _QWORD *v69;
  _QWORD *v70;
  _DWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  JSC::UnlinkedCodeBlock ***v78;
  JSC::UnlinkedCodeBlock **v79;
  void *v80;
  WTF *v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  unsigned int *v85;
  unint64_t v86;
  int v87;
  unsigned int *v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v114;
  const JSC::CodeOrigin *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  void *v123;
  JSC::DFG::Node *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t *v142;
  _QWORD *v143;
  _DWORD *v144;
  int v145;
  uint64_t *v146;
  uint64_t v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  unsigned __int8 *v153;
  unsigned int v154;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  unsigned __int8 *v161;
  int v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  BOOL v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  BOOL v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  BOOL v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  WTF *v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  void *v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  WTF *v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  void *v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  WTF *v238;
  uint64_t v239;
  uint64_t v240;
  WTF *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  WTF *v245;
  WTF *v246;
  WTF *v247;
  WTF *v248;
  WTF *v249;
  WTF *v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  unint64_t v254;
  int v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  JSC::UnlinkedCodeBlock **v259;
  unsigned int v260;
  unint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  _DWORD *v264;
  uint64_t v266;
  uint64_t v267;
  char v268;
  char v269;
  __int16 v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;

  v8 = a1;
  if ((a1 & 1) == 0)
    goto LABEL_10;
LABEL_2:
  v9 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
  if ((v8 & 2) != 0
    || ((v10 = *(unsigned int *)((v8 & 0xFFFFFFFF8) + 8), (_DWORD)v10 != 0x3FFFFFFF)
      ? (v11 = (_DWORD)v10 == -1)
      : (v11 = 1),
        v11))
  {
    v12 = 2;
  }
  else if (v10 >> 28)
  {
    v227 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v227 = v9;
    *(_DWORD *)(v227 + 8) = v10;
    v12 = 1;
    v9 = v227;
  }
  else
  {
    v12 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
    v9 = v10 << 36;
  }
  v8 = v9 | v12;
  while (1)
  {
LABEL_10:
    v13 = v8;
    if ((v8 & 1) != 0)
    {
      v193 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
      if ((v8 & 2) != 0
        || ((v194 = *(unsigned int *)((v8 & 0xFFFFFFFF8) + 8), (_DWORD)v194 != 0x3FFFFFFF)
          ? (v195 = (_DWORD)v194 == -1)
          : (v195 = 1),
            v195))
      {
        v196 = 2;
      }
      else if (v194 >> 28)
      {
        v243 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v243 = v193;
        *(_DWORD *)(v243 + 8) = v194;
        v196 = 1;
        v193 = v243;
      }
      else
      {
        v196 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
        v193 = v194 << 36;
      }
      v13 = v193 | v196;
    }
    if ((v13 & 2) != 0)
    {
      v15 = (_DWORD *)(v13 & 0xFFFFFFFF8);
      LODWORD(v14) = -1;
      if ((v13 & 1) == 0)
        goto LABEL_14;
    }
    else
    {
      if ((v13 & 1) == 0)
      {
        v14 = v13 >> 36;
        v15 = (_DWORD *)(v13 & 0xFFFFFFFF8);
        goto LABEL_14;
      }
      v15 = (_DWORD *)(v13 & 0xFFFFFFFF8);
      LODWORD(v14) = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8);
    }
    v15 = *(_DWORD **)v15;
LABEL_14:
    v261 = v13;
    v262 = *(uint64_t **)a2;
    v264 = v15;
    v257 = v8;
    v258 = *(_QWORD *)(a2 + 8);
    v260 = v14;
    if (v15)
    {
      if (*(_QWORD *)v15)
        v148 = **(_DWORD **)v15;
      else
        v148 = 0;
      v149 = *((_QWORD *)v15 + 3);
      if ((v15[8] & 1) != 0)
      {
        v164 = (HIDWORD(v149) & 0xFFFFF | ((int)(v149 >> 28) >> 24 << 20)) + 3;
        JSC::DFG::ByteCodeParser::flushDirect(*v262, v164 | ((unint64_t)(v164 >> 31) << 32), a3, a4, a5, a6, a7, a8);
        v149 = *((_QWORD *)v264 + 3);
      }
      if ((v149 >> 60) - 3 <= 2)
      {
        v200 = (HIDWORD(v149) & 0xFFFFF | ((int)(v149 >> 28) >> 24 << 20)) + 4;
        JSC::DFG::ByteCodeParser::flushDirect(*v262, v200 | ((unint64_t)(v200 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      }
      if (v148)
      {
        v76 = v148 + 4;
        do
        {
          v75 = v76
              + (HIDWORD(*((_QWORD *)v264 + 3)) & 0xFFFFF | ((int)(*((_QWORD *)v264 + 3) >> 28) >> 24 << 20));
          JSC::DFG::ByteCodeParser::flushDirect(*v262, v75 | ((unint64_t)(v75 >> 31) << 32), a3, a4, a5, a6, a7, a8);
          --v76;
        }
        while (v76 != 4);
      }
    }
    else
    {
      for (i = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 40) + 28); i; --i)
      {
        v17 = *v262;
        v18 = *v262 + 280;
        v19 = (i + 4);
        if (i + 4 < 0)
        {
          v20 = *(_QWORD *)v18;
          v66 = *(_QWORD *)(*(_QWORD *)v18 + 24);
          if (!v66)
          {
            v23 = 0;
            v24 = *(_QWORD *)(v17 + 32);
            v25 = (uint64_t *)(v24 + 96);
            goto LABEL_21;
          }
          while (1)
          {
            v72 = HIDWORD(*(_QWORD *)(v66 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v66 + 24) >> 28) >> 24 << 20);
            if (v72 + 5 <= (int)v19)
            {
              v71 = *(_DWORD **)v66;
              if (v71)
                LODWORD(v71) = *v71;
              if ((int)v71 + v72 + 5 > (int)v19)
                break;
            }
            v23 = 0;
            v20 = *(_QWORD *)(v20 + 208);
            v66 = *(_QWORD *)(v20 + 24);
            if (!v66)
              goto LABEL_20;
          }
          LODWORD(v22) = ~v72 + i;
          if (*(unsigned int *)(v20 + 204) <= (unint64_t)(int)v22)
          {
            __break(0xC471u);
            JUMPOUT(0x19833D4F8);
          }
          v22 = (int)v22;
        }
        else
        {
          do
          {
            v20 = *(_QWORD *)v18;
            v21 = *(_QWORD *)(*(_QWORD *)v18 + 24);
            v18 = *(_QWORD *)v18 + 208;
          }
          while (v21);
          v22 = ((v19 << 32) - 0x500000000) >> 32;
          if (v22 >= *(unsigned int *)(v20 + 204))
          {
            __break(0xC471u);
            JUMPOUT(0x19833D4C0);
          }
        }
        v23 = *(_QWORD *)(*(_QWORD *)(v20 + 192) + 8 * v22);
LABEL_20:
        v24 = *(_QWORD *)(v17 + 32);
        v25 = (uint64_t *)(v24 + 96);
        if ((v19 & 0x80000000) == 0)
        {
          v26 = ((v19 << 32) - 0x500000000) >> 32;
          goto LABEL_22;
        }
LABEL_21:
        v26 = (v19 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v24 + 112);
LABEL_22:
        v27 = *v25;
        v28 = *(_QWORD *)(*v25 + 8 * v26);
        if (v28)
        {
          v67 = *(uint64_t **)(v28 + 72);
          v68 = v67;
          do
          {
            v35 = (uint64_t)v68;
            v68 = (uint64_t *)*v68;
          }
          while (v68);
          if ((uint64_t *)v35 == v67)
            v35 = (uint64_t)v67;
          else
            *v67 = v35;
        }
        else
        {
          v29 = *(_QWORD *)(v17 + 24);
          v30 = *(_QWORD *)(v29 + 464);
          *(_QWORD *)(v29 + 464) = v30 + 1;
          v31 = v30 >> 4;
          v32 = *(unsigned int *)(v29 + 484);
          if (v30 >> 4 >= v32)
          {
            v73 = WTF::fastMalloc((WTF *)0x400);
            v266 = v73;
            v74 = *(unsigned int *)(v29 + 484);
            if ((_DWORD)v74 == *(_DWORD *)(v29 + 480))
            {
              v159 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29 + 472, v74 + 1, (unint64_t)&v266);
              v74 = *(unsigned int *)(v29 + 484);
              *(_QWORD *)(*(_QWORD *)(v29 + 472) + 8 * v74) = *v159;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)(v29 + 472) + 8 * v74) = v73;
            }
            v32 = (v74 + 1);
            *(_DWORD *)(v29 + 484) = v32;
            v30 = *(_QWORD *)(v29 + 464) - 1;
            v31 = v30 >> 4;
          }
          if (v31 >= v32)
          {
            __break(0xC471u);
            JUMPOUT(0x19833D4C8);
          }
          v33 = *(_QWORD *)(*(_QWORD *)(v29 + 472) + 8 * v31) + ((v30 & 0xF) << 6);
          *(_QWORD *)v33 = 0;
          *(_QWORD *)(v33 + 8) = 0;
          *(_QWORD *)(v33 + 16) = 0;
          *(_QWORD *)(v33 + 24) = v19 | ((unint64_t)(v19 >> 31) << 32);
          *(_DWORD *)(v33 + 32) = 0x3FFFFFFF;
          *(_DWORD *)(v33 + 56) = 0;
          *(_QWORD *)(v33 + 48) = 0;
          *(_QWORD *)(v33 + 36) = 0;
          *(_BYTE *)(v33 + 44) = 0;
          v34 = *(_QWORD *)(v29 + 464) - 1;
          if (v34 >> 4 >= *(unsigned int *)(v29 + 484))
          {
            __break(0xC471u);
            JUMPOUT(0x19833D4D0);
          }
          v35 = *(_QWORD *)(*(_QWORD *)(v29 + 472) + 8 * (v34 >> 4)) + ((v34 & 0xF) << 6);
        }
        v36 = *(_QWORD *)(v17 + 24);
        if ((*(_BYTE *)(v17 + 48) & 2) != 0)
        {
          v37 = *(unsigned int *)(v17 + 40);
          v38 = *(_QWORD *)(*(_QWORD *)(v17 + 280) + 24);
          if ((_DWORD)v37 == 0x3FFFFFFF || (_DWORD)v37 == -1)
          {
            v40 = 2;
          }
          else if (v37 >> 28)
          {
            v203 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v203 = v38;
            *(_DWORD *)(v203 + 8) = v37;
            v40 = 1;
            v38 = v203;
          }
          else
          {
            v40 = *(_QWORD *)(*(_QWORD *)(v17 + 280) + 24);
            v38 = v37 << 36;
          }
          v274 = v38 | v40;
        }
        else
        {
          JSC::CodeOrigin::CodeOrigin(&v274, (const JSC::CodeOrigin *)(v17 + 48));
        }
        v41 = (const JSC::CodeOrigin *)(v17 + 56);
        if ((*(_BYTE *)(v17 + 56) & 2) != 0)
        {
          v42 = *(unsigned int *)(v17 + 40);
          v43 = *(_QWORD *)(*(_QWORD *)(v17 + 280) + 24);
          if ((_DWORD)v42 == 0x3FFFFFFF || (_DWORD)v42 == -1)
          {
            v44 = 2;
          }
          else if (v42 >> 28)
          {
            v204 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v204 = v43;
            *(_DWORD *)(v204 + 8) = v42;
            v44 = 1;
            v43 = v204;
          }
          else
          {
            v44 = *(_QWORD *)(*(_QWORD *)(v17 + 280) + 24);
            v43 = v42 << 36;
          }
          v273 = v43 | v44;
        }
        else
        {
          JSC::CodeOrigin::CodeOrigin(&v273, v41);
        }
        v45 = v274;
        if ((v274 & 1) != 0)
        {
          v179 = *(_QWORD *)(v274 & 0xFFFFFFFF8);
          if ((v274 & 2) != 0
            || ((v180 = *(unsigned int *)((v274 & 0xFFFFFFFF8) + 8), (_DWORD)v180 != 0x3FFFFFFF)
              ? (v181 = (_DWORD)v180 == -1)
              : (v181 = 1),
                v181))
          {
            v182 = 2;
          }
          else if (v180 >> 28)
          {
            v233 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v233 = v179;
            *(_DWORD *)(v233 + 8) = v180;
            v182 = 1;
            v179 = v233;
          }
          else
          {
            v182 = *(_QWORD *)(v274 & 0xFFFFFFFF8);
            v179 = v180 << 36;
          }
          v45 = v179 | v182;
        }
        v46 = v273;
        if ((v273 & 1) != 0)
        {
          v183 = *(_QWORD *)(v273 & 0xFFFFFFFF8);
          if ((v273 & 2) != 0
            || (v184 = *(unsigned int *)((v273 & 0xFFFFFFFF8) + 8), (_DWORD)v184 == 0x3FFFFFFF)
            || (_DWORD)v184 == -1)
          {
            v185 = 2;
          }
          else if (v184 >> 28)
          {
            v234 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v234 = v183;
            *(_DWORD *)(v234 + 8) = v184;
            v185 = 1;
            v183 = v234;
          }
          else
          {
            v185 = *(_QWORD *)(v273 & 0xFFFFFFFF8);
            v183 = v184 << 36;
          }
          v46 = v183 | v185;
        }
        v47 = *(_BYTE *)(v17 + 64);
        v48 = v45;
        if ((v45 & 1) != 0)
        {
          v186 = *(_QWORD *)(v45 & 0xFFFFFFFF8);
          if ((v45 & 2) != 0
            || (v187 = *(unsigned int *)((v45 & 0xFFFFFFFF8) + 8), (_DWORD)v187 == 0x3FFFFFFF)
            || (_DWORD)v187 == -1)
          {
            v188 = 2;
          }
          else if (v187 >> 28)
          {
            v249 = *(WTF **)(v45 & 0xFFFFFFFF8);
            v255 = *(_DWORD *)((v45 & 0xFFFFFFFF8) + 8);
            v235 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v235 = v249;
            *(_DWORD *)(v235 + 8) = v255;
            v188 = 1;
            v186 = v235;
          }
          else
          {
            v188 = *(_QWORD *)(v45 & 0xFFFFFFFF8);
            v186 = v187 << 36;
          }
          v48 = v186 | v188;
        }
        v266 = v48;
        if ((v46 & 1) != 0)
        {
          v189 = v46 & 0xFFFFFFFF8;
          v190 = *(_QWORD *)(v46 & 0xFFFFFFFF8);
          if ((v46 & 2) != 0
            || (v191 = *(unsigned int *)((v46 & 0xFFFFFFFF8) + 8), (_DWORD)v191 == 0x3FFFFFFF)
            || (_DWORD)v191 == -1)
          {
            v192 = 2;
          }
          else if (v191 >> 28)
          {
            v250 = (WTF *)v190;
            v256 = v189;
            v236 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v236 = v250;
            *(_DWORD *)(v236 + 8) = v191;
            v192 = 1;
            v190 = v236;
            v189 = v256;
          }
          else
          {
            v192 = v190;
            v190 = v191 << 36;
          }
          v267 = v190 | v192;
          v268 = v47;
          v269 = 0;
          if (v189)
            WTF::fastFree(v189, v41, a3, a4, a5, a6, a7, a8);
        }
        else
        {
          v267 = v46;
          v268 = v47;
          v269 = 0;
        }
        if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v45 & 0xFFFFFFFF8, v41, a3, a4, a5, a6, a7, a8);
        if ((v273 & 1) != 0 && (v273 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v273 & 0xFFFFFFFF8, v41, a3, a4, a5, a6, a7, a8);
        if ((v274 & 1) != 0 && (v274 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v274 & 0xFFFFFFFF8, v41, a3, a4, a5, a6, a7, a8);
        v273 = 0;
        v274 = v35;
        v272 = 0;
        v271 = 0;
        v270 = 28;
        v56 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(v36 + 1032, &v270, (uint64_t)&v266, (uint64_t)&v274, &v273, &v272, &v271, a8);
        if ((v267 & 1) != 0 && (v267 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v267 & 0xFFFFFFFF8, v49, (uint64_t)v50, v51, v52, v53, v54, v55);
        if ((v266 & 1) != 0 && (v266 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v266 & 0xFFFFFFFF8, v49, (uint64_t)v50, v51, v52, v53, v54, v55);
        v57 = *(unsigned __int16 *)(v56 + 18);
        *(_BYTE *)(v17 + 457) |= v57 == 379;
        v58 = *(_QWORD *)(v17 + 32);
        v274 = v56;
        v59 = (_QWORD *)(v58 + 208);
        v60 = *(unsigned int *)(v58 + 220);
        if ((_DWORD)v60 == *(_DWORD *)(v58 + 216))
        {
          v70 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v59, v60 + 1, (unint64_t)&v274);
          v60 = *(unsigned int *)(v58 + 220);
          *(_QWORD *)(*(_QWORD *)(v58 + 208) + 8 * v60) = *v70;
          v57 = *(unsigned __int16 *)(v56 + 18);
        }
        else
        {
          *(_QWORD *)(*v59 + 8 * v60) = v56;
        }
        *(_DWORD *)(v58 + 220) = v60 + 1;
        v61 = *(_QWORD *)(v17 + 24);
        if (v57 == 386)
        {
          *(_DWORD *)(v56 + 48) = ~*(_DWORD *)(v61 + 308);
          v216 = *(unsigned int *)(v61 + 308);
          v217 = v216 + 2;
          v218 = *(unsigned int *)(v61 + 304);
          v219 = *(WTF **)(v61 + 296);
          if (v216 + 2 > v218)
          {
            v246 = *(WTF **)(v61 + 296);
            v252 = *(unsigned int *)(v61 + 308);
            v220 = v218 + (v218 >> 2);
            if (v220 >= 0x10)
              v221 = v220 + 1;
            else
              v221 = 16;
            if (v221 <= v217)
              v222 = v216 + 2;
            else
              v222 = v221;
            if (v222 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x19833D508);
            }
            v219 = (WTF *)WTF::fastMalloc((WTF *)(8 * v222));
            *(_DWORD *)(v61 + 304) = v222;
            *(_QWORD *)(v61 + 296) = v219;
            v216 = v252;
            if ((_DWORD)v252)
            {
              v240 = 8 * v252;
              v241 = v246;
              do
              {
                v242 = *(_QWORD *)v241;
                v241 = (WTF *)((char *)v241 + 8);
                *(_QWORD *)v219 = v242;
                v219 = (WTF *)((char *)v219 + 8);
                v240 -= 8;
              }
              while (v240);
              v219 = *(WTF **)(v61 + 296);
              v216 = v252;
            }
            if (v246)
            {
              if (v219 == v246)
              {
                *(_QWORD *)(v61 + 296) = 0;
                *(_DWORD *)(v61 + 304) = 0;
              }
              WTF::fastFree((unint64_t)v246, v223, (uint64_t)v50, v51, v52, v53, v54, v55);
              v219 = *(WTF **)(v61 + 296);
              v216 = v252;
            }
          }
          if (v219)
          {
            v224 = *(unsigned int *)(v61 + 308);
            if (v217 != v224)
            {
              v225 = (_QWORD *)((char *)v219 + 8 * v224);
              v226 = 8 * v216 - 8 * v224 + 16;
              do
              {
                *v225++ = 0x3FFFFFFF00000000;
                v226 -= 8;
              }
              while (v226);
            }
          }
          *(_DWORD *)(v61 + 308) = v217;
          v61 = *(_QWORD *)(v17 + 24);
        }
        if (JSC::DFG::clobbersExitState((JSC::DFG *)v61, (JSC::DFG::Graph *)v56, v50, v51, v52, v53, v54, v55))
          *(_BYTE *)(v17 + 64) = 0;
        *(_QWORD *)(v27 + 8 * v26) = v56;
        if (v23)
        {
          v266 = v35;
          v62 = (_QWORD *)(v23 + 16);
          v63 = *(unsigned int *)(v23 + 28);
          if ((_DWORD)v63 == *(_DWORD *)(v23 + 24))
          {
            v69 = (_QWORD *)WTF::Vector<JSC::DFG::VariableAccessData *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v62, v63 + 1, (unint64_t)&v266);
            v63 = *(unsigned int *)(v23 + 28);
            *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * v63) = *v69;
            v35 = v266;
          }
          else
          {
            *(_QWORD *)(*v62 + 8 * v63) = v35;
          }
          *(_DWORD *)(v23 + 28) = v63 + 1;
          v64 = *(unsigned __int8 *)(v35 + 40);
          v65 = (v64 | *(_BYTE *)(v23 + 13));
          if (v65 != v64)
            *(_BYTE *)(v35 + 40) = v65;
        }
      }
    }
    v77 = *(_QWORD *)(v258 + 24);
    if (*(_BYTE *)(v77 + 960))
    {
      v228 = *(unsigned int *)(*(_QWORD *)(v77 + 32) + 48);
      JSC::DFG::ByteCodeParser::flushDirect(*v262, v228 & 0xFFFFFFFEFFFFFFFFLL | (((v228 >> 31) & 1) << 32), a3, a4, a5, a6, a7, a8);
      v77 = *(_QWORD *)(v258 + 24);
    }
    v78 = (JSC::UnlinkedCodeBlock ***)(v264 + 2);
    if (!v264)
      v78 = (JSC::UnlinkedCodeBlock ***)(v77 + 40);
    v79 = *v78;
    v81 = JSC::DFG::Graph::livenessFor((JSC::DFG::Graph *)v77, *v78, a3, a4, a5, a6, a7, a8);
    v82 = *(_QWORD *)(v258 + 24);
    v83 = v261;
    if ((v261 & 1) != 0)
    {
      v197 = *(_QWORD *)(v261 & 0xFFFFFFFF8);
      if ((v261 & 2) != 0
        || (v198 = *(unsigned int *)((v261 & 0xFFFFFFFF8) + 8), (_DWORD)v198 == 0x3FFFFFFF)
        || (_DWORD)v198 == -1)
      {
        v199 = 2;
      }
      else if (v198 >> 28)
      {
        v244 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v244 = v197;
        *(_DWORD *)(v244 + 8) = v198;
        v199 = 1;
        v197 = v244;
      }
      else
      {
        v199 = *(_QWORD *)(v261 & 0xFFFFFFFF8);
        v197 = v198 << 36;
      }
      v83 = v197 | v199;
    }
    if (!**(_BYTE **)(a2 + 16))
    {
LABEL_93:
      v84 = (v260 & 3) + (v260 >> 2);
      v85 = *(unsigned int **)v81;
      if (**(_DWORD **)v81 <= v84)
      {
        __break(0xC471u);
        JUMPOUT(0x19833D204);
      }
      v86 = v83 & 1;
      goto LABEL_95;
    }
    v86 = v83 & 1;
    if ((v83 & 2) != 0)
    {
      v151 = (_QWORD *)(v83 & 0xFFFFFFFF8);
      LODWORD(v150) = -1;
      if ((v83 & 1) == 0)
        goto LABEL_187;
    }
    else
    {
      if ((v83 & 1) == 0)
      {
        v150 = v83 >> 36;
        v151 = (_QWORD *)(v83 & 0xFFFFFFFF8);
        goto LABEL_187;
      }
      v151 = (_QWORD *)(v83 & 0xFFFFFFFF8);
      LODWORD(v150) = *(_DWORD *)((v83 & 0xFFFFFFFF8) + 8);
    }
    v151 = (_QWORD *)*v151;
LABEL_187:
    if (v151)
      v152 = v151 + 1;
    else
      v152 = (_QWORD *)(v82 + 40);
    v153 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(*v152 + 56) + 80)
                             + ((unint64_t)v150 >> 2));
    v154 = *v153;
    if ((v154 | 2) == 0x82)
      v154 = v153[1];
    if (v154 > 3 || v154 == 2)
      goto LABEL_93;
    v84 = (v260 & 3) + (v260 >> 2);
    v85 = (unsigned int *)*((_QWORD *)v81 + 1);
    if (*v85 <= v84)
    {
      __break(0xC471u);
      JUMPOUT(0x19833CA74);
    }
LABEL_95:
    if (v86 && (v83 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v83 & 0xFFFFFFFF8, v80, a3, a4, a5, a6, a7, a8);
    v259 = v79;
    v87 = *((_DWORD *)v79 + 5);
    if (v87)
    {
      v88 = &v85[4 * v84 + 2];
      while (1)
      {
        v89 = v87 - 1;
        if (((*(_DWORD *)(*(_QWORD *)v88 + 4 * ((v87 - 1) >> 5)) >> (v87 - 1)) & 1) != 0)
          break;
LABEL_99:
        v87 = v89;
        if (!v89)
          goto LABEL_167;
      }
      v90 = (int)v264;
      if (v264)
        v90 = HIDWORD(*((_QWORD *)v264 + 3)) & 0xFFFFF | ((int)(*((_QWORD *)v264 + 3) >> 28) >> 24 << 20);
      v91 = **(_QWORD **)(a2 + 24);
      v92 = v91 + 280;
      v93 = (v90 - v87);
      if (v90 - v87 >= 0)
      {
        do
        {
          v94 = *(_QWORD *)v92;
          v95 = *(_QWORD *)(*(_QWORD *)v92 + 24);
          v92 = *(_QWORD *)v92 + 208;
        }
        while (v95);
        v96 = ((v93 << 32) - 0x500000000) >> 32;
        if (v96 >= *(unsigned int *)(v94 + 204))
        {
          __break(0xC471u);
          JUMPOUT(0x19833D4D8);
        }
        goto LABEL_106;
      }
      v94 = *(_QWORD *)v92;
      v140 = *(_QWORD *)(*(_QWORD *)v92 + 24);
      if (!v140)
      {
        v97 = 0;
        v98 = *(_QWORD *)(v91 + 32);
        v99 = (uint64_t *)(v98 + 96);
        goto LABEL_108;
      }
      while (1)
      {
        v145 = HIDWORD(*(_QWORD *)(v140 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v140 + 24) >> 28) >> 24 << 20);
        if (v145 + 5 <= (int)v93)
        {
          v144 = *(_DWORD **)v140;
          if (v144)
            LODWORD(v144) = *v144;
          if ((int)v144 + v145 + 5 > (int)v93)
            break;
        }
        v97 = 0;
        v94 = *(_QWORD *)(v94 + 208);
        v140 = *(_QWORD *)(v94 + 24);
        if (!v140)
          goto LABEL_107;
      }
      LODWORD(v96) = v93 - v145 - 5;
      if (*(unsigned int *)(v94 + 204) <= (unint64_t)(int)v96)
      {
        __break(0xC471u);
        JUMPOUT(0x19833D4F0);
      }
      v96 = (int)v96;
LABEL_106:
      v97 = *(_QWORD *)(*(_QWORD *)(v94 + 192) + 8 * v96);
LABEL_107:
      v98 = *(_QWORD *)(v91 + 32);
      v99 = (uint64_t *)(v98 + 96);
      if ((v93 & 0x80000000) != 0)
      {
LABEL_108:
        v263 = v97;
        v100 = (v93 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v98 + 112);
      }
      else
      {
        v263 = v97;
        v100 = ((v93 << 32) - 0x500000000) >> 32;
      }
      v101 = *v99;
      v102 = *(_QWORD *)(*v99 + 8 * v100);
      if (v102)
      {
        v141 = *(uint64_t **)(v102 + 72);
        v142 = v141;
        do
        {
          v109 = (uint64_t)v142;
          v142 = (uint64_t *)*v142;
        }
        while (v142);
        if ((uint64_t *)v109 == v141)
          v109 = (uint64_t)v141;
        else
          *v141 = v109;
      }
      else
      {
        v103 = *(_QWORD *)(v91 + 24);
        v104 = *(_QWORD *)(v103 + 464);
        *(_QWORD *)(v103 + 464) = v104 + 1;
        v105 = v104 >> 4;
        v106 = *(unsigned int *)(v103 + 484);
        if (v104 >> 4 >= v106)
        {
          v156 = WTF::fastMalloc((WTF *)0x400);
          v266 = v156;
          v157 = *(unsigned int *)(v103 + 484);
          if ((_DWORD)v157 == *(_DWORD *)(v103 + 480))
          {
            v160 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v103 + 472, v157 + 1, (unint64_t)&v266);
            v157 = *(unsigned int *)(v103 + 484);
            *(_QWORD *)(*(_QWORD *)(v103 + 472) + 8 * v157) = *v160;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v103 + 472) + 8 * v157) = v156;
          }
          v106 = (v157 + 1);
          *(_DWORD *)(v103 + 484) = v106;
          v104 = *(_QWORD *)(v103 + 464) - 1;
          v105 = v104 >> 4;
        }
        if (v105 >= v106)
        {
          __break(0xC471u);
          JUMPOUT(0x19833D4E0);
        }
        v107 = *(_QWORD *)(*(_QWORD *)(v103 + 472) + 8 * v105) + ((v104 & 0xF) << 6);
        *(_QWORD *)v107 = 0;
        *(_QWORD *)(v107 + 8) = 0;
        *(_QWORD *)(v107 + 16) = 0;
        *(_QWORD *)(v107 + 24) = v93 | ((unint64_t)(v93 >> 31) << 32);
        *(_DWORD *)(v107 + 32) = 0x3FFFFFFF;
        *(_DWORD *)(v107 + 56) = 0;
        *(_QWORD *)(v107 + 48) = 0;
        *(_QWORD *)(v107 + 36) = 0;
        *(_BYTE *)(v107 + 44) = 0;
        v108 = *(_QWORD *)(v103 + 464) - 1;
        if (v108 >> 4 >= *(unsigned int *)(v103 + 484))
        {
          __break(0xC471u);
          JUMPOUT(0x19833D4E8);
        }
        v109 = *(_QWORD *)(*(_QWORD *)(v103 + 472) + 8 * (v108 >> 4)) + ((v108 & 0xF) << 6);
      }
      v110 = *(_QWORD *)(v91 + 24);
      if ((*(_BYTE *)(v91 + 48) & 2) != 0)
      {
        v111 = *(unsigned int *)(v91 + 40);
        v112 = *(_QWORD *)(*(_QWORD *)(v91 + 280) + 24);
        if ((_DWORD)v111 == 0x3FFFFFFF || (_DWORD)v111 == -1)
        {
          v114 = 2;
        }
        else if (v111 >> 28)
        {
          v201 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v201 = v112;
          *(_DWORD *)(v201 + 8) = v111;
          v114 = 1;
          v112 = v201;
        }
        else
        {
          v114 = *(_QWORD *)(*(_QWORD *)(v91 + 280) + 24);
          v112 = v111 << 36;
        }
        v274 = v112 | v114;
      }
      else
      {
        JSC::CodeOrigin::CodeOrigin(&v274, (const JSC::CodeOrigin *)(v91 + 48));
      }
      v115 = (const JSC::CodeOrigin *)(v91 + 56);
      if ((*(_BYTE *)(v91 + 56) & 2) != 0)
      {
        v116 = *(unsigned int *)(v91 + 40);
        v117 = *(_QWORD *)(*(_QWORD *)(v91 + 280) + 24);
        if ((_DWORD)v116 == 0x3FFFFFFF || (_DWORD)v116 == -1)
        {
          v118 = 2;
        }
        else if (v116 >> 28)
        {
          v202 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v202 = v117;
          *(_DWORD *)(v202 + 8) = v116;
          v118 = 1;
          v117 = v202;
        }
        else
        {
          v118 = *(_QWORD *)(*(_QWORD *)(v91 + 280) + 24);
          v117 = v116 << 36;
        }
        v273 = v117 | v118;
      }
      else
      {
        JSC::CodeOrigin::CodeOrigin(&v273, v115);
      }
      v119 = v274;
      if ((v274 & 1) != 0)
      {
        v165 = *(_QWORD *)(v274 & 0xFFFFFFFF8);
        if ((v274 & 2) != 0
          || ((v166 = *(unsigned int *)((v274 & 0xFFFFFFFF8) + 8), (_DWORD)v166 != 0x3FFFFFFF)
            ? (v167 = (_DWORD)v166 == -1)
            : (v167 = 1),
              v167))
        {
          v168 = 2;
        }
        else if (v166 >> 28)
        {
          v229 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v229 = v165;
          *(_DWORD *)(v229 + 8) = v166;
          v168 = 1;
          v165 = v229;
        }
        else
        {
          v168 = *(_QWORD *)(v274 & 0xFFFFFFFF8);
          v165 = v166 << 36;
        }
        v119 = v165 | v168;
      }
      v120 = v273;
      if ((v273 & 1) != 0)
      {
        v169 = *(_QWORD *)(v273 & 0xFFFFFFFF8);
        if ((v273 & 2) != 0
          || (v170 = *(unsigned int *)((v273 & 0xFFFFFFFF8) + 8), (_DWORD)v170 == 0x3FFFFFFF)
          || (_DWORD)v170 == -1)
        {
          v171 = 2;
        }
        else if (v170 >> 28)
        {
          v230 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v230 = v169;
          *(_DWORD *)(v230 + 8) = v170;
          v171 = 1;
          v169 = v230;
        }
        else
        {
          v171 = *(_QWORD *)(v273 & 0xFFFFFFFF8);
          v169 = v170 << 36;
        }
        v120 = v169 | v171;
      }
      v121 = *(_BYTE *)(v91 + 64);
      v122 = v119;
      if ((v119 & 1) != 0)
      {
        v172 = *(_QWORD *)(v119 & 0xFFFFFFFF8);
        if ((v119 & 2) != 0
          || (v173 = *(unsigned int *)((v119 & 0xFFFFFFFF8) + 8), (_DWORD)v173 == 0x3FFFFFFF)
          || (_DWORD)v173 == -1)
        {
          v174 = 2;
        }
        else if (v173 >> 28)
        {
          v247 = *(WTF **)(v119 & 0xFFFFFFFF8);
          v253 = *(_DWORD *)((v119 & 0xFFFFFFFF8) + 8);
          v231 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v231 = v247;
          *(_DWORD *)(v231 + 8) = v253;
          v174 = 1;
          v172 = v231;
        }
        else
        {
          v174 = *(_QWORD *)(v119 & 0xFFFFFFFF8);
          v172 = v173 << 36;
        }
        v122 = v172 | v174;
      }
      v266 = v122;
      if ((v120 & 1) != 0)
      {
        v175 = v120 & 0xFFFFFFFF8;
        v176 = *(_QWORD *)(v120 & 0xFFFFFFFF8);
        if ((v120 & 2) != 0
          || (v177 = *(unsigned int *)((v120 & 0xFFFFFFFF8) + 8), (_DWORD)v177 == 0x3FFFFFFF)
          || (_DWORD)v177 == -1)
        {
          v178 = 2;
        }
        else if (v177 >> 28)
        {
          v248 = (WTF *)v176;
          v254 = v175;
          v232 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v232 = v248;
          *(_DWORD *)(v232 + 8) = v177;
          v178 = 1;
          v176 = v232;
          v175 = v254;
        }
        else
        {
          v178 = v176;
          v176 = v177 << 36;
        }
        v267 = v176 | v178;
        v268 = v121;
        v269 = 0;
        if (v175)
          WTF::fastFree(v175, v115, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        v267 = v120;
        v268 = v121;
        v269 = 0;
      }
      if ((v119 & 1) != 0 && (v119 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v119 & 0xFFFFFFFF8, v115, a3, a4, a5, a6, a7, a8);
      if ((v273 & 1) != 0 && (v273 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v273 & 0xFFFFFFFF8, v115, a3, a4, a5, a6, a7, a8);
      if ((v274 & 1) != 0 && (v274 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v274 & 0xFFFFFFFF8, v115, a3, a4, a5, a6, a7, a8);
      v273 = 0;
      v274 = v109;
      v272 = 0;
      v271 = 0;
      v270 = 29;
      v130 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(v110 + 1032, &v270, (uint64_t)&v266, (uint64_t)&v274, &v273, &v272, &v271, a8);
      if ((v267 & 1) != 0 && (v267 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v267 & 0xFFFFFFFF8, v123, (uint64_t)v124, v125, v126, v127, v128, v129);
      if ((v266 & 1) != 0 && (v266 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v266 & 0xFFFFFFFF8, v123, (uint64_t)v124, v125, v126, v127, v128, v129);
      v131 = *(unsigned __int16 *)(v130 + 18);
      *(_BYTE *)(v91 + 457) |= v131 == 379;
      v132 = *(_QWORD *)(v91 + 32);
      v274 = v130;
      v133 = (_QWORD *)(v132 + 208);
      v134 = *(unsigned int *)(v132 + 220);
      if ((_DWORD)v134 == *(_DWORD *)(v132 + 216))
      {
        v143 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v133, v134 + 1, (unint64_t)&v274);
        v134 = *(unsigned int *)(v132 + 220);
        *(_QWORD *)(*(_QWORD *)(v132 + 208) + 8 * v134) = *v143;
        v131 = *(unsigned __int16 *)(v130 + 18);
      }
      else
      {
        *(_QWORD *)(*v133 + 8 * v134) = v130;
      }
      *(_DWORD *)(v132 + 220) = v134 + 1;
      v135 = *(_QWORD *)(v91 + 24);
      if (v131 == 386)
      {
        *(_DWORD *)(v130 + 48) = ~*(_DWORD *)(v135 + 308);
        v205 = *(unsigned int *)(v135 + 308);
        v206 = v205 + 2;
        v207 = *(unsigned int *)(v135 + 304);
        v208 = *(WTF **)(v135 + 296);
        if (v205 + 2 > v207)
        {
          v245 = *(WTF **)(v135 + 296);
          v251 = *(unsigned int *)(v135 + 308);
          v209 = v207 + (v207 >> 2);
          if (v209 >= 0x10)
            v210 = v209 + 1;
          else
            v210 = 16;
          if (v210 <= v206)
            v211 = v205 + 2;
          else
            v211 = v210;
          if (v211 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19833D500);
          }
          v208 = (WTF *)WTF::fastMalloc((WTF *)(8 * v211));
          *(_DWORD *)(v135 + 304) = v211;
          *(_QWORD *)(v135 + 296) = v208;
          v205 = v251;
          if ((_DWORD)v251)
          {
            v237 = 8 * v251;
            v238 = v245;
            do
            {
              v239 = *(_QWORD *)v238;
              v238 = (WTF *)((char *)v238 + 8);
              *(_QWORD *)v208 = v239;
              v208 = (WTF *)((char *)v208 + 8);
              v237 -= 8;
            }
            while (v237);
            v208 = *(WTF **)(v135 + 296);
            v205 = v251;
          }
          if (v245)
          {
            if (v208 == v245)
            {
              *(_QWORD *)(v135 + 296) = 0;
              *(_DWORD *)(v135 + 304) = 0;
            }
            WTF::fastFree((unint64_t)v245, v212, (uint64_t)v124, v125, v126, v127, v128, v129);
            v208 = *(WTF **)(v135 + 296);
            v205 = v251;
          }
        }
        if (v208)
        {
          v213 = *(unsigned int *)(v135 + 308);
          if (v206 != v213)
          {
            v214 = (_QWORD *)((char *)v208 + 8 * v213);
            v215 = 8 * v205 - 8 * v213 + 16;
            do
            {
              *v214++ = 0x3FFFFFFF00000000;
              v215 -= 8;
            }
            while (v215);
          }
        }
        *(_DWORD *)(v135 + 308) = v206;
        v135 = *(_QWORD *)(v91 + 24);
      }
      if (JSC::DFG::clobbersExitState((JSC::DFG *)v135, (JSC::DFG::Graph *)v130, v124, v125, v126, v127, v128, v129))
        *(_BYTE *)(v91 + 64) = 0;
      *(_QWORD *)(v101 + 8 * v100) = v130;
      if (v263)
      {
        v266 = v109;
        v136 = (_QWORD *)(v263 + 16);
        v137 = *(unsigned int *)(v263 + 28);
        if ((_DWORD)v137 == *(_DWORD *)(v263 + 24))
        {
          v158 = (_QWORD *)WTF::Vector<JSC::DFG::VariableAccessData *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v136, v137 + 1, (unint64_t)&v266);
          v137 = *(unsigned int *)(v263 + 28);
          *(_QWORD *)(*(_QWORD *)(v263 + 16) + 8 * v137) = *v158;
          v109 = v266;
        }
        else
        {
          *(_QWORD *)(*v136 + 8 * v137) = v109;
        }
        *(_DWORD *)(v263 + 28) = v137 + 1;
        v138 = *(unsigned __int8 *)(v109 + 40);
        v139 = (v138 | *(_BYTE *)(v263 + 13));
        if (v139 != v138)
          *(_BYTE *)(v109 + 40) = v139;
      }
      goto LABEL_99;
    }
LABEL_167:
    if ((v260 & 3) != 0)
    {
      v161 = (unsigned __int8 *)(**((_QWORD **)v259[7] + 10) + ((unint64_t)v260 >> 2));
      v162 = *v161;
      if ((v162 | 2) == 0x82)
        v162 = v161[1];
      switch(v162)
      {
        case 0:
        case 1:
        case 3:
          if ((v260 & 3) == 1)
            goto LABEL_214;
          break;
        case 2:
LABEL_214:
          v163 = 0x200000000;
          if (v264)
            v163 = (*((_QWORD *)v264 + 3) >> 22) | 0x200000000;
          JSC::DFG::ByteCodeParser::addFlushOrPhantomLocal<(JSC::DFG::NodeType)29>(**(_QWORD **)(a2 + 24), v163, 0, a4, a5, a6, a7, a8);
          break;
        case 4:
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x19833D2F0);
      }
    }
    **(_BYTE **)(a2 + 16) = 1;
    if ((v261 & 1) != 0 && (v261 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v261 & 0xFFFFFFFF8, v80, a3, a4, a5, a6, a7, a8);
    v146 = (uint64_t *)(v257 & 0xFFFFFFFF8);
    if ((v257 & 1) == 0)
    {
      if (!v146)
        return;
      v147 = v257 & 0xFFFFFFFF8;
      goto LABEL_172;
    }
    v147 = *v146;
    if (!*v146)
      break;
    if (v146)
      WTF::fastFree((unint64_t)v146, v80, a3, a4, a5, a6, a7, a8);
LABEL_172:
    v8 = *(_QWORD *)(v147 + 16);
    if ((v8 & 1) != 0)
      goto LABEL_2;
  }
  if (v146)
    WTF::fastFree((unint64_t)v146, v80, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::DFG::ByteCodeParser::flushImpl<JSC::DFG::ByteCodeParser::flush(JSC::DFG::ByteCodeParser::InlineStackEntry *)::{lambda(JSC::InlineCallFrame *,JSC::Operand)#1}>(uint64_t result, int **a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int **v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  const JSC::CodeOrigin *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  void *v42;
  JSC::DFG::Node *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  _QWORD *v61;
  _DWORD *v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  WTF *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF *v104;
  uint64_t v105;
  WTF *v106;
  WTF *v107;
  WTF *v108;
  uint64_t v109;
  int v110;
  unint64_t v111;
  uint64_t v112;
  int **v113;
  uint64_t v115;
  uint64_t v116;
  char v117;
  char v118;
  __int16 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v8 = a2;
  v112 = result;
  if (a2)
  {
    if (*a2)
      v9 = **a2;
    else
      v9 = 0;
    v65 = (unint64_t)a2[3];
    if (((_BYTE)a2[4] & 1) != 0)
    {
      v69 = (HIDWORD(v65) & 0xFFFFF | ((int)(v65 >> 28) >> 24 << 20)) + 3;
      result = JSC::DFG::ByteCodeParser::flush(JSC::DFG::ByteCodeParser::InlineStackEntry *)::{lambda(JSC::InlineCallFrame *,JSC::Operand)#1}::operator()(*a3, v69 | ((unint64_t)(v69 >> 31) << 32), (uint64_t)a3, a4, a5, a6, a7, a8);
      v65 = (unint64_t)v8[3];
    }
    if ((v65 >> 60) - 3 <= 2)
    {
      v66 = (HIDWORD(v65) & 0xFFFFF | ((int)(v65 >> 28) >> 24 << 20)) + 4;
      result = JSC::DFG::ByteCodeParser::flush(JSC::DFG::ByteCodeParser::InlineStackEntry *)::{lambda(JSC::InlineCallFrame *,JSC::Operand)#1}::operator()(*a3, v66 | ((unint64_t)(v66 >> 31) << 32), (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  else
  {
    v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 40) + 28);
  }
  if (v9)
  {
    v113 = v8;
    do
    {
      v10 = v9 + 4;
      if (v8)
        v10 += ((unint64_t)v8[3] >> 32) & 0xFFFFF | ((int)((unint64_t)v8[3] >> 28) >> 24 << 20);
      v11 = *a3;
      v12 = *a3 + 280;
      if ((v10 & 0x80000000) != 0)
      {
        v13 = *(_QWORD *)v12;
        v58 = *(_QWORD *)(*(_QWORD *)v12 + 24);
        if (!v58)
        {
          v16 = 0;
          v17 = *(_QWORD *)(v11 + 32);
          v18 = (uint64_t *)(v17 + 96);
          goto LABEL_12;
        }
        while (1)
        {
          v63 = HIDWORD(*(_QWORD *)(v58 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v58 + 24) >> 28) >> 24 << 20);
          if (v63 + 5 <= (int)v10)
          {
            v62 = *(_DWORD **)v58;
            if (v62)
              LODWORD(v62) = *v62;
            if ((int)v62 + v63 + 5 > (int)v10)
              break;
          }
          v16 = 0;
          v13 = *(_QWORD *)(v13 + 208);
          v58 = *(_QWORD *)(v13 + 24);
          if (!v58)
            goto LABEL_11;
        }
        LODWORD(v15) = v10 - v63 - 5;
        if (*(unsigned int *)(v13 + 204) <= (unint64_t)(int)v15)
        {
          __break(0xC471u);
          JUMPOUT(0x19833DDFCLL);
        }
        v15 = (int)v15;
      }
      else
      {
        do
        {
          v13 = *(_QWORD *)v12;
          v14 = *(_QWORD *)(*(_QWORD *)v12 + 24);
          v12 = *(_QWORD *)v12 + 208;
        }
        while (v14);
        v15 = (uint64_t)(((unint64_t)v10 << 32) - 0x500000000) >> 32;
        if (v15 >= *(unsigned int *)(v13 + 204))
        {
LABEL_165:
          __break(0xC471u);
          JUMPOUT(0x19833DDE4);
        }
      }
      v16 = *(_QWORD *)(*(_QWORD *)(v13 + 192) + 8 * v15);
LABEL_11:
      v17 = *(_QWORD *)(v11 + 32);
      v18 = (uint64_t *)(v17 + 96);
      if ((v10 & 0x80000000) == 0)
      {
        v19 = (uint64_t)(((unint64_t)v10 << 32) - 0x500000000) >> 32;
        goto LABEL_13;
      }
LABEL_12:
      v19 = (v10 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v17 + 112);
LABEL_13:
      v20 = *v18;
      v21 = *(_QWORD *)(*v18 + 8 * v19);
      if (v21)
      {
        v59 = *(uint64_t **)(v21 + 72);
        v60 = v59;
        do
        {
          v28 = (uint64_t)v60;
          v60 = (uint64_t *)*v60;
        }
        while (v60);
        if ((uint64_t *)v28 == v59)
          v28 = (uint64_t)v59;
        else
          *v59 = v28;
      }
      else
      {
        v22 = *(_QWORD *)(v11 + 24);
        v23 = *(_QWORD *)(v22 + 464);
        *(_QWORD *)(v22 + 464) = v23 + 1;
        v24 = v23 >> 4;
        v25 = *(unsigned int *)(v22 + 484);
        if (v23 >> 4 >= v25)
        {
          v67 = WTF::fastMalloc((WTF *)0x400);
          v115 = v67;
          v68 = *(unsigned int *)(v22 + 484);
          if ((_DWORD)v68 == *(_DWORD *)(v22 + 480))
          {
            v70 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v22 + 472, v68 + 1, (unint64_t)&v115);
            v68 = *(unsigned int *)(v22 + 484);
            *(_QWORD *)(*(_QWORD *)(v22 + 472) + 8 * v68) = *v70;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v22 + 472) + 8 * v68) = v67;
          }
          v25 = (v68 + 1);
          *(_DWORD *)(v22 + 484) = v25;
          v23 = *(_QWORD *)(v22 + 464) - 1;
          v24 = v23 >> 4;
        }
        if (v24 >= v25)
        {
          __break(0xC471u);
          JUMPOUT(0x19833DDECLL);
        }
        v26 = *(_QWORD *)(*(_QWORD *)(v22 + 472) + 8 * v24) + ((v23 & 0xF) << 6);
        *(_QWORD *)v26 = 0;
        *(_QWORD *)(v26 + 8) = 0;
        *(_QWORD *)(v26 + 16) = 0;
        *(_QWORD *)(v26 + 24) = v10 | ((unint64_t)(v10 >> 31) << 32);
        *(_DWORD *)(v26 + 32) = 0x3FFFFFFF;
        *(_DWORD *)(v26 + 56) = 0;
        *(_QWORD *)(v26 + 48) = 0;
        *(_QWORD *)(v26 + 36) = 0;
        *(_BYTE *)(v26 + 44) = 0;
        v27 = *(_QWORD *)(v22 + 464) - 1;
        if (v27 >> 4 >= *(unsigned int *)(v22 + 484))
        {
          __break(0xC471u);
          JUMPOUT(0x19833DDF4);
        }
        v28 = *(_QWORD *)(*(_QWORD *)(v22 + 472) + 8 * (v27 >> 4)) + ((v27 & 0xF) << 6);
      }
      v29 = *(_QWORD *)(v11 + 24);
      if ((*(_BYTE *)(v11 + 48) & 2) != 0)
      {
        v30 = *(unsigned int *)(v11 + 40);
        v31 = *(_QWORD *)(*(_QWORD *)(v11 + 280) + 24);
        if ((_DWORD)v30 == 0x3FFFFFFF || (_DWORD)v30 == -1)
        {
          v33 = 2;
        }
        else if (v30 >> 28)
        {
          v85 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v85 = v31;
          *(_DWORD *)(v85 + 8) = v30;
          v33 = 1;
          v31 = v85;
        }
        else
        {
          v33 = *(_QWORD *)(*(_QWORD *)(v11 + 280) + 24);
          v31 = v30 << 36;
        }
        v123 = v31 | v33;
      }
      else
      {
        JSC::CodeOrigin::CodeOrigin(&v123, (const JSC::CodeOrigin *)(v11 + 48));
      }
      v34 = (const JSC::CodeOrigin *)(v11 + 56);
      if ((*(_BYTE *)(v11 + 56) & 2) != 0)
      {
        v35 = *(unsigned int *)(v11 + 40);
        v36 = *(_QWORD *)(*(_QWORD *)(v11 + 280) + 24);
        if ((_DWORD)v35 == 0x3FFFFFFF || (_DWORD)v35 == -1)
        {
          v37 = 2;
        }
        else if (v35 >> 28)
        {
          v86 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v86 = v36;
          *(_DWORD *)(v86 + 8) = v35;
          v37 = 1;
          v36 = v86;
        }
        else
        {
          v37 = *(_QWORD *)(*(_QWORD *)(v11 + 280) + 24);
          v36 = v35 << 36;
        }
        v122 = v36 | v37;
      }
      else
      {
        JSC::CodeOrigin::CodeOrigin(&v122, v34);
      }
      v38 = v123;
      if ((v123 & 1) != 0)
      {
        v71 = *(_QWORD *)(v123 & 0xFFFFFFFF8);
        if ((v123 & 2) != 0
          || ((v72 = *(unsigned int *)((v123 & 0xFFFFFFFF8) + 8), (_DWORD)v72 != 0x3FFFFFFF)
            ? (v73 = (_DWORD)v72 == -1)
            : (v73 = 1),
              v73))
        {
          v74 = 2;
        }
        else if (v72 >> 28)
        {
          v99 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v99 = v71;
          *(_DWORD *)(v99 + 8) = v72;
          v74 = 1;
          v71 = v99;
        }
        else
        {
          v74 = *(_QWORD *)(v123 & 0xFFFFFFFF8);
          v71 = v72 << 36;
        }
        v38 = v71 | v74;
      }
      v39 = v122;
      if ((v122 & 1) != 0)
      {
        v75 = *(_QWORD *)(v122 & 0xFFFFFFFF8);
        if ((v122 & 2) != 0
          || (v76 = *(unsigned int *)((v122 & 0xFFFFFFFF8) + 8), (_DWORD)v76 == 0x3FFFFFFF)
          || (_DWORD)v76 == -1)
        {
          v77 = 2;
        }
        else if (v76 >> 28)
        {
          v100 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v100 = v75;
          *(_DWORD *)(v100 + 8) = v76;
          v77 = 1;
          v75 = v100;
        }
        else
        {
          v77 = *(_QWORD *)(v122 & 0xFFFFFFFF8);
          v75 = v76 << 36;
        }
        v39 = v75 | v77;
      }
      v40 = *(_BYTE *)(v11 + 64);
      v41 = v38;
      if ((v38 & 1) != 0)
      {
        v78 = *(_QWORD *)(v38 & 0xFFFFFFFF8);
        if ((v38 & 2) != 0
          || (v79 = *(unsigned int *)((v38 & 0xFFFFFFFF8) + 8), (_DWORD)v79 == 0x3FFFFFFF)
          || (_DWORD)v79 == -1)
        {
          v80 = 2;
        }
        else if (v79 >> 28)
        {
          v107 = *(WTF **)(v38 & 0xFFFFFFFF8);
          v110 = *(_DWORD *)((v38 & 0xFFFFFFFF8) + 8);
          v101 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v101 = v107;
          *(_DWORD *)(v101 + 8) = v110;
          v80 = 1;
          v78 = v101;
        }
        else
        {
          v80 = *(_QWORD *)(v38 & 0xFFFFFFFF8);
          v78 = v79 << 36;
        }
        v41 = v78 | v80;
      }
      v115 = v41;
      if ((v39 & 1) != 0)
      {
        v81 = v39 & 0xFFFFFFFF8;
        v82 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
        if ((v39 & 2) != 0
          || (v83 = *(unsigned int *)((v39 & 0xFFFFFFFF8) + 8), (_DWORD)v83 == 0x3FFFFFFF)
          || (_DWORD)v83 == -1)
        {
          v84 = 2;
        }
        else if (v83 >> 28)
        {
          v108 = (WTF *)v82;
          v111 = v81;
          v102 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v102 = v108;
          *(_DWORD *)(v102 + 8) = v83;
          v84 = 1;
          v82 = v102;
          v81 = v111;
        }
        else
        {
          v84 = v82;
          v82 = v83 << 36;
        }
        v116 = v82 | v84;
        v117 = v40;
        v118 = 0;
        if (v81)
          WTF::fastFree(v81, v34, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      else
      {
        v116 = v39;
        v117 = v40;
        v118 = 0;
      }
      if ((v38 & 1) != 0 && (v38 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v38 & 0xFFFFFFFF8, v34, (uint64_t)a3, a4, a5, a6, a7, a8);
      if ((v122 & 1) != 0 && (v122 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v122 & 0xFFFFFFFF8, v34, (uint64_t)a3, a4, a5, a6, a7, a8);
      if ((v123 & 1) != 0 && (v123 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v123 & 0xFFFFFFFF8, v34, (uint64_t)a3, a4, a5, a6, a7, a8);
      v123 = v28;
      v121 = 0;
      v122 = 0;
      v120 = 0;
      v119 = 28;
      v49 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(v29 + 1032, &v119, (uint64_t)&v115, (uint64_t)&v123, &v122, &v121, &v120, a8);
      if ((v116 & 1) != 0 && (v116 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v116 & 0xFFFFFFFF8, v42, (uint64_t)v43, v44, v45, v46, v47, v48);
      if ((v115 & 1) != 0 && (v115 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v115 & 0xFFFFFFFF8, v42, (uint64_t)v43, v44, v45, v46, v47, v48);
      v50 = *(unsigned __int16 *)(v49 + 18);
      *(_BYTE *)(v11 + 457) |= v50 == 379;
      v51 = *(_QWORD *)(v11 + 32);
      v123 = v49;
      v52 = (_QWORD *)(v51 + 208);
      v53 = *(unsigned int *)(v51 + 220);
      if ((_DWORD)v53 == *(_DWORD *)(v51 + 216))
      {
        v61 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v52, v53 + 1, (unint64_t)&v123);
        v53 = *(unsigned int *)(v51 + 220);
        *(_QWORD *)(*(_QWORD *)(v51 + 208) + 8 * v53) = *v61;
        v50 = *(unsigned __int16 *)(v49 + 18);
      }
      else
      {
        *(_QWORD *)(*v52 + 8 * v53) = v49;
      }
      *(_DWORD *)(v51 + 220) = v53 + 1;
      v54 = *(_QWORD *)(v11 + 24);
      if (v50 == 386)
      {
        *(_DWORD *)(v49 + 48) = ~*(_DWORD *)(v54 + 308);
        v87 = *(unsigned int *)(v54 + 308);
        v88 = v87 + 2;
        v89 = *(unsigned int *)(v54 + 304);
        v90 = *(WTF **)(v54 + 296);
        if (v87 + 2 > v89)
        {
          v106 = *(WTF **)(v54 + 296);
          v109 = *(unsigned int *)(v54 + 308);
          v91 = v89 + (v89 >> 2);
          if (v91 >= 0x10)
            v92 = v91 + 1;
          else
            v92 = 16;
          if (v92 <= v88)
            v93 = v87 + 2;
          else
            v93 = v92;
          if (v93 >> 29)
            goto LABEL_165;
          v90 = (WTF *)WTF::fastMalloc((WTF *)(8 * v93));
          *(_DWORD *)(v54 + 304) = v93;
          *(_QWORD *)(v54 + 296) = v90;
          v87 = v109;
          if ((_DWORD)v109)
          {
            v103 = 8 * v109;
            v104 = v106;
            do
            {
              v105 = *(_QWORD *)v104;
              v104 = (WTF *)((char *)v104 + 8);
              *(_QWORD *)v90 = v105;
              v90 = (WTF *)((char *)v90 + 8);
              v103 -= 8;
            }
            while (v103);
            v90 = *(WTF **)(v54 + 296);
            v87 = v109;
          }
          if (v106)
          {
            if (v90 == v106)
            {
              *(_QWORD *)(v54 + 296) = 0;
              *(_DWORD *)(v54 + 304) = 0;
            }
            WTF::fastFree((unint64_t)v106, v94, (uint64_t)v43, v44, v45, v46, v47, v48);
            v90 = *(WTF **)(v54 + 296);
            v87 = v109;
          }
        }
        if (v90)
        {
          v95 = *(unsigned int *)(v54 + 308);
          if (v88 != v95)
          {
            v96 = (_QWORD *)((char *)v90 + 8 * v95);
            v97 = 8 * v87 - 8 * v95 + 16;
            do
            {
              *v96++ = 0x3FFFFFFF00000000;
              v97 -= 8;
            }
            while (v97);
          }
        }
        *(_DWORD *)(v54 + 308) = v88;
        v54 = *(_QWORD *)(v11 + 24);
      }
      result = JSC::DFG::clobbersExitState((JSC::DFG *)v54, (JSC::DFG::Graph *)v49, v43, v44, v45, v46, v47, v48);
      if ((_DWORD)result)
        *(_BYTE *)(v11 + 64) = 0;
      *(_QWORD *)(v20 + 8 * v19) = v49;
      v8 = v113;
      if (v16)
      {
        v115 = v28;
        result = v16 + 16;
        v55 = *(unsigned int *)(v16 + 28);
        if ((_DWORD)v55 == *(_DWORD *)(v16 + 24))
        {
          result = WTF::Vector<JSC::DFG::VariableAccessData *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v55 + 1, (unint64_t)&v115);
          v55 = *(unsigned int *)(v16 + 28);
          *(_QWORD *)(*(_QWORD *)(v16 + 16) + 8 * v55) = *(_QWORD *)result;
          v28 = v115;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)result + 8 * v55) = v28;
        }
        *(_DWORD *)(v16 + 28) = v55 + 1;
        v56 = *(unsigned __int8 *)(v28 + 40);
        v57 = (v56 | *(_BYTE *)(v16 + 13));
        if (v57 != v56)
          *(_BYTE *)(v28 + 40) = v57;
      }
      --v9;
    }
    while (v9);
  }
  v64 = *(_QWORD *)(v112 + 24);
  if (*(_BYTE *)(v64 + 960))
  {
    v98 = *(unsigned int *)(*(_QWORD *)(v64 + 32) + 48);
    return JSC::DFG::ByteCodeParser::flush(JSC::DFG::ByteCodeParser::InlineStackEntry *)::{lambda(JSC::InlineCallFrame *,JSC::Operand)#1}::operator()(*a3, v98 & 0xFFFFFFFEFFFFFFFFLL | (((v98 >> 31) & 1) << 32), (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  return result;
}

uint64_t JSC::DFG::ByteCodeParser::flush(JSC::DFG::ByteCodeParser::InlineStackEntry *)::{lambda(JSC::InlineCallFrame *,JSC::Operand)#1}::operator()(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  const JSC::CodeOrigin *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  void *v39;
  JSC::DFG::Node *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  _QWORD *v59;
  _DWORD *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  WTF *v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  void *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF *v98;
  uint64_t v99;
  WTF *v100;
  char v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  char v106;
  __int16 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v10 = a1 + 280;
  if (!HIDWORD(a2))
  {
    do
    {
      v11 = *(_QWORD *)v10;
      v12 = *(_QWORD *)(*(_QWORD *)v10 + 24);
      v10 = *(_QWORD *)v10 + 208;
    }
    while (v12);
    v13 = (int)a2 - 5;
    if (v13 >= *(unsigned int *)(v11 + 204))
    {
      __break(0xC471u);
      JUMPOUT(0x19833E5A4);
    }
LABEL_4:
    v14 = *(_QWORD *)(*(_QWORD *)(v11 + 192) + 8 * v13);
    goto LABEL_5;
  }
  v11 = *(_QWORD *)v10;
  v56 = *(_QWORD *)(*(_QWORD *)v10 + 24);
  if (v56)
  {
    while (1)
    {
      v61 = HIDWORD(*(_QWORD *)(v56 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v56 + 24) >> 28) >> 24 << 20);
      if (v61 + 5 <= (int)a2)
      {
        v60 = *(_DWORD **)v56;
        if (v60)
          LODWORD(v60) = *v60;
        if ((int)v60 + v61 + 5 > (int)a2)
          break;
      }
      v14 = 0;
      v11 = *(_QWORD *)(v11 + 208);
      v56 = *(_QWORD *)(v11 + 24);
      if (!v56)
        goto LABEL_5;
    }
    LODWORD(v13) = a2 - v61 - 5;
    if (*(unsigned int *)(v11 + 204) <= (unint64_t)(int)v13)
    {
      __break(0xC471u);
      JUMPOUT(0x19833E5ACLL);
    }
    v13 = (int)v13;
    goto LABEL_4;
  }
  v14 = 0;
LABEL_5:
  v15 = *(_QWORD *)(a1 + 32);
  if ((a2 & 0x80000000) != 0)
    v16 = (a2 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v15 + 112);
  else
    v16 = (int)a2 - 5;
  v17 = *(_QWORD *)(v15 + 96);
  v18 = *(_QWORD *)(v17 + 8 * v16);
  if (v18)
  {
    v57 = *(uint64_t **)(v18 + 72);
    v58 = v57;
    do
    {
      v25 = (uint64_t)v58;
      v58 = (uint64_t *)*v58;
    }
    while (v58);
    if ((uint64_t *)v25 == v57)
      v25 = (uint64_t)v57;
    else
      *v57 = v25;
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 24);
    v20 = *(_QWORD *)(v19 + 464);
    *(_QWORD *)(v19 + 464) = v20 + 1;
    v21 = v20 >> 4;
    v22 = *(unsigned int *)(v19 + 484);
    if (v20 >> 4 >= v22)
    {
      v62 = WTF::fastMalloc((WTF *)0x400);
      v103 = v62;
      v63 = *(unsigned int *)(v19 + 484);
      if ((_DWORD)v63 == *(_DWORD *)(v19 + 480))
      {
        v64 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v19 + 472, v63 + 1, (unint64_t)&v103);
        v63 = *(unsigned int *)(v19 + 484);
        *(_QWORD *)(*(_QWORD *)(v19 + 472) + 8 * v63) = *v64;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v19 + 472) + 8 * v63) = v62;
      }
      v22 = (v63 + 1);
      *(_DWORD *)(v19 + 484) = v22;
      v20 = *(_QWORD *)(v19 + 464) - 1;
      v21 = v20 >> 4;
    }
    if (v21 >= v22)
      goto LABEL_147;
    v23 = *(_QWORD *)(*(_QWORD *)(v19 + 472) + 8 * v21) + ((v20 & 0xF) << 6);
    *(_QWORD *)v23 = 0;
    *(_QWORD *)(v23 + 8) = 0;
    *(_QWORD *)(v23 + 16) = 0;
    *(_QWORD *)(v23 + 24) = a2;
    *(_DWORD *)(v23 + 32) = 0x3FFFFFFF;
    *(_DWORD *)(v23 + 56) = 0;
    *(_QWORD *)(v23 + 48) = 0;
    *(_QWORD *)(v23 + 36) = 0;
    *(_BYTE *)(v23 + 44) = 0;
    v24 = *(_QWORD *)(v19 + 464) - 1;
    if (v24 >> 4 >= *(unsigned int *)(v19 + 484))
    {
      __break(0xC471u);
      JUMPOUT(0x19833E59CLL);
    }
    v25 = *(_QWORD *)(*(_QWORD *)(v19 + 472) + 8 * (v24 >> 4)) + ((v24 & 0xF) << 6);
  }
  v26 = *(_QWORD *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
  {
    v27 = *(unsigned int *)(a1 + 40);
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
    if ((_DWORD)v27 == 0x3FFFFFFF || (_DWORD)v27 == -1)
    {
      v30 = 2;
    }
    else if (v27 >> 28)
    {
      v79 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v79 = v28;
      *(_DWORD *)(v79 + 8) = v27;
      v30 = 1;
      v28 = v79;
    }
    else
    {
      v30 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      v28 = v27 << 36;
    }
    v111 = v28 | v30;
  }
  else
  {
    JSC::CodeOrigin::CodeOrigin(&v111, (const JSC::CodeOrigin *)(a1 + 48));
  }
  v31 = (const JSC::CodeOrigin *)(a1 + 56);
  if ((*(_BYTE *)(a1 + 56) & 2) != 0)
  {
    v32 = *(unsigned int *)(a1 + 40);
    v33 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
    if ((_DWORD)v32 == 0x3FFFFFFF || (_DWORD)v32 == -1)
    {
      v34 = 2;
    }
    else if (v32 >> 28)
    {
      v80 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v80 = v33;
      *(_DWORD *)(v80 + 8) = v32;
      v34 = 1;
      v33 = v80;
    }
    else
    {
      v34 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
      v33 = v32 << 36;
    }
    v110 = v33 | v34;
  }
  else
  {
    JSC::CodeOrigin::CodeOrigin(&v110, v31);
  }
  v35 = v111;
  if ((v111 & 1) != 0)
  {
    v65 = *(_QWORD *)(v111 & 0xFFFFFFFF8);
    if ((v111 & 2) != 0
      || ((v66 = *(unsigned int *)((v111 & 0xFFFFFFFF8) + 8), (_DWORD)v66 != 0x3FFFFFFF)
        ? (v67 = (_DWORD)v66 == -1)
        : (v67 = 1),
          v67))
    {
      v68 = 2;
    }
    else if (v66 >> 28)
    {
      v92 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v92 = v65;
      *(_DWORD *)(v92 + 8) = v66;
      v68 = 1;
      v65 = v92;
    }
    else
    {
      v68 = *(_QWORD *)(v111 & 0xFFFFFFFF8);
      v65 = v66 << 36;
    }
    v35 = v65 | v68;
  }
  v36 = v110;
  if ((v110 & 1) != 0)
  {
    v69 = *(_QWORD *)(v110 & 0xFFFFFFFF8);
    if ((v110 & 2) != 0
      || (v70 = *(unsigned int *)((v110 & 0xFFFFFFFF8) + 8), (_DWORD)v70 == 0x3FFFFFFF)
      || (_DWORD)v70 == -1)
    {
      v71 = 2;
    }
    else if (v70 >> 28)
    {
      v93 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v93 = v69;
      *(_DWORD *)(v93 + 8) = v70;
      v71 = 1;
      v69 = v93;
    }
    else
    {
      v71 = *(_QWORD *)(v110 & 0xFFFFFFFF8);
      v69 = v70 << 36;
    }
    v36 = v69 | v71;
  }
  v37 = *(_BYTE *)(a1 + 64);
  v38 = v35;
  if ((v35 & 1) != 0)
  {
    v72 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
    if ((v35 & 2) != 0
      || (v73 = *(unsigned int *)((v35 & 0xFFFFFFFF8) + 8), (_DWORD)v73 == 0x3FFFFFFF)
      || (_DWORD)v73 == -1)
    {
      v74 = 2;
    }
    else if (v73 >> 28)
    {
      v101 = *(_BYTE *)(a1 + 64);
      v94 = *(_DWORD *)((v35 & 0xFFFFFFFF8) + 8);
      v95 = WTF::fastMalloc((WTF *)0x10);
      v37 = v101;
      *(_QWORD *)v95 = v72;
      *(_DWORD *)(v95 + 8) = v94;
      v74 = 1;
      v72 = v95;
    }
    else
    {
      v74 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
      v72 = v73 << 36;
    }
    v38 = v72 | v74;
  }
  v103 = v38;
  if ((v36 & 1) != 0)
  {
    v75 = v36 & 0xFFFFFFFF8;
    v76 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
    if ((v36 & 2) != 0
      || (v77 = *(unsigned int *)((v36 & 0xFFFFFFFF8) + 8), (_DWORD)v77 == 0x3FFFFFFF)
      || (_DWORD)v77 == -1)
    {
      v78 = 2;
    }
    else if (v77 >> 28)
    {
      v96 = v76;
      v102 = v37;
      v76 = WTF::fastMalloc((WTF *)0x10);
      v37 = v102;
      *(_QWORD *)v76 = v96;
      *(_DWORD *)(v76 + 8) = v77;
      v78 = 1;
    }
    else
    {
      v78 = v76;
      v76 = v77 << 36;
    }
    v104 = v76 | v78;
    v105 = v37;
    v106 = 0;
    if (v75)
      WTF::fastFree(v75, v31, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v104 = v36;
    v105 = v37;
    v106 = 0;
  }
  if ((v35 & 1) != 0 && (v35 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v35 & 0xFFFFFFFF8, v31, a3, a4, a5, a6, a7, a8);
  if ((v110 & 1) != 0 && (v110 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v110 & 0xFFFFFFFF8, v31, a3, a4, a5, a6, a7, a8);
  if ((v111 & 1) != 0 && (v111 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v111 & 0xFFFFFFFF8, v31, a3, a4, a5, a6, a7, a8);
  v110 = 0;
  v111 = v25;
  v108 = 0;
  v109 = 0;
  v107 = 28;
  v46 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(v26 + 1032, &v107, (uint64_t)&v103, (uint64_t)&v111, &v110, &v109, &v108, a8);
  if ((v104 & 1) != 0 && (v104 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v104 & 0xFFFFFFFF8, v39, (uint64_t)v40, v41, v42, v43, v44, v45);
  if ((v103 & 1) != 0 && (v103 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v103 & 0xFFFFFFFF8, v39, (uint64_t)v40, v41, v42, v43, v44, v45);
  v47 = *(unsigned __int16 *)(v46 + 18);
  *(_BYTE *)(a1 + 457) |= v47 == 379;
  v48 = *(_QWORD *)(a1 + 32);
  v111 = v46;
  v49 = (_QWORD *)(v48 + 208);
  v50 = *(unsigned int *)(v48 + 220);
  if ((_DWORD)v50 == *(_DWORD *)(v48 + 216))
  {
    v59 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v49, v50 + 1, (unint64_t)&v111);
    v50 = *(unsigned int *)(v48 + 220);
    *(_QWORD *)(*(_QWORD *)(v48 + 208) + 8 * v50) = *v59;
    v47 = *(unsigned __int16 *)(v46 + 18);
  }
  else
  {
    *(_QWORD *)(*v49 + 8 * v50) = v46;
  }
  *(_DWORD *)(v48 + 220) = v50 + 1;
  v51 = *(_QWORD *)(a1 + 24);
  if (v47 == 386)
  {
    *(_DWORD *)(v46 + 48) = ~*(_DWORD *)(v51 + 308);
    v81 = *(unsigned int *)(v51 + 308);
    v82 = v81 + 2;
    v83 = *(unsigned int *)(v51 + 304);
    v84 = *(WTF **)(v51 + 296);
    if (v81 + 2 <= v83)
    {
LABEL_126:
      if (v84)
      {
        v89 = *(unsigned int *)(v51 + 308);
        if (v82 != v89)
        {
          v90 = (_QWORD *)((char *)v84 + 8 * v89);
          v91 = 8 * v81 - 8 * v89 + 16;
          do
          {
            *v90++ = 0x3FFFFFFF00000000;
            v91 -= 8;
          }
          while (v91);
        }
      }
      *(_DWORD *)(v51 + 308) = v82;
      v51 = *(_QWORD *)(a1 + 24);
      goto LABEL_38;
    }
    v100 = *(WTF **)(v51 + 296);
    v85 = v83 + (v83 >> 2);
    if (v85 >= 0x10)
      v86 = v85 + 1;
    else
      v86 = 16;
    if (v86 <= v82)
      v86 = v81 + 2;
    if (!(v86 >> 29))
    {
      v87 = v86;
      v84 = (WTF *)WTF::fastMalloc((WTF *)(8 * v86));
      *(_DWORD *)(v51 + 304) = v87;
      *(_QWORD *)(v51 + 296) = v84;
      if ((_DWORD)v81)
      {
        v97 = 8 * v81;
        v98 = v100;
        do
        {
          v99 = *(_QWORD *)v98;
          v98 = (WTF *)((char *)v98 + 8);
          *(_QWORD *)v84 = v99;
          v84 = (WTF *)((char *)v84 + 8);
          v97 -= 8;
        }
        while (v97);
        v84 = *(WTF **)(v51 + 296);
      }
      if (v100)
      {
        if (v84 == v100)
        {
          *(_QWORD *)(v51 + 296) = 0;
          *(_DWORD *)(v51 + 304) = 0;
        }
        WTF::fastFree((unint64_t)v100, v88, (uint64_t)v40, v41, v42, v43, v44, v45);
        v84 = *(WTF **)(v51 + 296);
      }
      goto LABEL_126;
    }
LABEL_147:
    __break(0xC471u);
    JUMPOUT(0x19833E594);
  }
LABEL_38:
  result = JSC::DFG::clobbersExitState((JSC::DFG *)v51, (JSC::DFG::Graph *)v46, v40, v41, v42, v43, v44, v45);
  if ((_DWORD)result)
    *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(v17 + 8 * v16) = v46;
  if (v14)
  {
    v103 = v25;
    result = v14 + 16;
    v53 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v53 == *(_DWORD *)(v14 + 24))
    {
      result = WTF::Vector<JSC::DFG::VariableAccessData *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v53 + 1, (unint64_t)&v103);
      v53 = *(unsigned int *)(v14 + 28);
      *(_QWORD *)(*(_QWORD *)(v14 + 16) + 8 * v53) = *(_QWORD *)result;
      v25 = v103;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)result + 8 * v53) = v25;
    }
    *(_DWORD *)(v14 + 28) = v53 + 1;
    v54 = *(unsigned __int8 *)(v25 + 40);
    v55 = (v54 | *(_BYTE *)(v14 + 13));
    if (v55 != v54)
      *(_BYTE *)(v25 + 40) = v55;
  }
  return result;
}

WTF *WTF::ScopedLambdaFunctor<void ()(JSC::VirtualRegister),JSC::DFG::ByteCodeParser::keepUsesOfCurrentInstructionAlive(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,unsigned char)::{lambda(JSC::VirtualRegister)#1}>::implFunction(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::DFG::ByteCodeParser::get(*(_QWORD *)(a1 + 16), a2 | (((a2 >> 31) & 1) << 32), a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::DFG::ByteCodeParser::getPredictionWithoutOSRExit(JSC::BytecodeIndex)::{lambda(JSC::DFG::ByteCodeParser::InlineStackEntry *,JSC::CodeOrigin const&)#1}::operator()(int *a1, uint64_t a2, uint64_t a3, uint64_t *a4, int8x8_t a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  _BYTE v25[32];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *a4;
  v9 = (unint64_t)*a4 >> 36;
  if ((*a4 & 2) != 0)
  {
    LODWORD(v10) = -1;
  }
  else if ((v8 & 1) != 0)
  {
    LODWORD(v10) = *(_DWORD *)((v8 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v10 = (unint64_t)*a4 >> 36;
  }
  v11 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v7 + 56) + 80) + ((unint64_t)v10 >> 2));
  v12 = *v11;
  if ((v12 | 2) == 0x82)
    v12 = v11[1];
  if (v12 == 24)
    return 0x3FFFFFFFFFF7;
  v13 = *(_QWORD *)(a3 + 152);
  if (v13)
  {
    v18 = *(_DWORD *)(v13 - 8);
    v19 = *a1;
    v20 = 9 * ((v19 + ~(v19 << 15)) ^ ((v19 + ~(v19 << 15)) >> 10));
    v21 = (v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11);
    v22 = (v21 ^ HIWORD(v21)) & v18;
    v23 = *(_DWORD *)(v13 + 16 * v22);
    if (v23 == *a1)
    {
LABEL_22:
      v14 = *(unint64_t **)(v13 + 16 * v22 + 8);
      goto LABEL_9;
    }
    v24 = 1;
    while (v23 != -1)
    {
      v22 = ((_DWORD)v22 + v24) & v18;
      v23 = *(_DWORD *)(v13 + 16 * v22);
      ++v24;
      if (v23 == v19)
        goto LABEL_22;
    }
  }
  v14 = 0;
LABEL_9:
  if ((v8 & 2) != 0)
  {
    LODWORD(v9) = -1;
  }
  else if ((v8 & 1) != 0)
  {
    LODWORD(v9) = *(_DWORD *)((v8 & 0xFFFFFFFF8) + 8);
  }
  v15 = JSC::CodeBlock::valueProfilePredictionForBytecodeIndex(v7, a5, (uint64_t)v25, v9, v14);
  v16 = *(_QWORD *)(*(_QWORD *)a2 + 93376);
  if (v16)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v16 + 16))(v16, v7, a4, v15) & 0x3F73FFFFFFF7;
  return v15;
}

void JSC::DFG::ByteCodeParser::~ByteCodeParser(uint64_t **this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::DFG::ByteCodeParser *v10;
  JSC::DFG::ByteCodeParser *v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  JSC::DFG::ByteCodeParser *v18;
  unint64_t v20;
  unint64_t v21;

  v9 = *((unsigned int *)this + 95);
  if ((_DWORD)v9)
    WTF::VectorTypeOperations<JSC::DFG::ByteCodeParser::DelayedSetLocal>::destruct(this[46], &this[46][4 * v9], a3, a4, a5, a6, a7, a8);
  v10 = (JSC::DFG::ByteCodeParser *)this[46];
  if (this + 48 != (uint64_t **)v10 && v10 != 0)
  {
    this[46] = 0;
    *((_DWORD *)this + 94) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = (JSC::DFG::ByteCodeParser *)this[36];
  if (this + 38 != (uint64_t **)v12 && v12 != 0)
  {
    this[36] = 0;
    *((_DWORD *)this + 74) = 0;
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = this[31];
  if (v14)
  {
    v15 = *((unsigned int *)v14 - 1);
    if ((_DWORD)v15)
    {
      v16 = v14 + 1;
      do
      {
        if (*(v16 - 1) != -1)
        {
          v17 = *v16;
          if (*v16)
          {
            *v16 = 0;
            *((_DWORD *)v16 + 2) = 0;
            WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        v16 += 3;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree((unint64_t)(v14 - 2), a2, a3, a4, a5, a6, a7, a8);
  }
  v18 = (JSC::DFG::ByteCodeParser *)this[13];
  if (this + 15 != (uint64_t **)v18 && v18 != 0)
  {
    this[13] = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
  }
  v20 = (unint64_t)this[7];
  if ((v20 & 1) != 0 && (v20 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v20 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v21 = (unint64_t)this[6];
  if ((v21 & 1) != 0 && (v21 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v21 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned int>(WTF::CommaPrinter,WTF::ASCIILiteral,unsigned int const&)::{lambda(WTF::PrintStream&)#1}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  WTF::PrintStream *v18;
  float v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  WTF::PrintStream *v25;
  float v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v30;
  int v31;
  char v32;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = (WTF::PrintStream *)v4;
  v7 = *a2;
  v6 = a2[1];
  v8 = (_DWORD *)a2[2];
  if (*(_BYTE *)(*a2 + 32))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v10 = *(char **)v7;
    v11 = *(_QWORD *)(v7 + 8);
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    if (v10)
    {
      v14 = v11 - 1;
      if (!v11)
        v14 = 0;
      WTF::StringImpl::utf8ForCharacters(v10, v14, (uint64_t)&v30, v13);
    }
    else
    {
      v21 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_BYTE *)(v21 + 16) = 0;
      v30 = v21;
      v31 = 0;
    }
    WTF::printExpectedCStringHelper(v12, "StringView", &v30);
    if (v31 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v31])(&v32, &v30);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  }
  else
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v16 = *(char **)(v7 + 16);
    v17 = *(_QWORD *)(v7 + 24);
    v18 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
    if (v16)
    {
      v20 = v17 - 1;
      if (!v17)
        v20 = 0;
      WTF::StringImpl::utf8ForCharacters(v16, v20, (uint64_t)&v30, v19);
    }
    else
    {
      v22 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = 0;
      *(_BYTE *)(v22 + 16) = 0;
      v30 = v22;
      v31 = 0;
    }
    WTF::printExpectedCStringHelper(v18, "StringView", &v30);
    if (v31 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v31])(&v32, &v30);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
    *(_BYTE *)(v7 + 32) = 1;
  }
  v23 = *(char **)v6;
  v24 = *(_QWORD *)(v6 + 8);
  v25 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 32))(v5);
  if (v23)
  {
    v27 = v24 - 1;
    if (!v24)
      v27 = 0;
    WTF::StringImpl::utf8ForCharacters(v23, v27, (uint64_t)&v30, v26);
  }
  else
  {
    v28 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = 0;
    *(_BYTE *)(v28 + 16) = 0;
    v30 = v28;
    v31 = 0;
  }
  WTF::printExpectedCStringHelper(v25, "StringView", &v30);
  if (v31 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v31])(&v32, &v30);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  WTF::PrintStream::printf(v5, "%u", *v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

__n128 WTF::Vector<JSC::DFG::ByteCodeParser::DelayedSetLocal,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::ByteCodeParser::DelayedSetLocal&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v9 = WTF::Vector<JSC::DFG::ByteCodeParser::DelayedSetLocal,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2, a4, a5, a6, a7, a8);
  v10 = *(unsigned int *)(a1 + 12);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)v9;
  if ((*(_QWORD *)v9 & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v16 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v16 != 0x3FFFFFFF)
        ? (v17 = (_DWORD)v16 == -1)
        : (v17 = 1),
          v17))
    {
      v18 = 2;
    }
    else if (v16 >> 28)
    {
      v22 = v9;
      v23 = *(_QWORD *)a1;
      v24 = *(unsigned int *)(a1 + 12);
      v19 = v15;
      v20 = v16;
      v21 = WTF::fastMalloc((WTF *)0x10);
      v9 = v22;
      v11 = v23;
      *(_QWORD *)v21 = v19;
      *(_DWORD *)(v21 + 8) = v20;
      v18 = 1;
      v15 = v21;
      v10 = v24;
    }
    else
    {
      v18 = v15;
      v15 = v16 << 36;
    }
    v12 = v15 | v18;
  }
  v13 = v11 + 32 * v10;
  *(_QWORD *)v13 = v12;
  result = *(__n128 *)(v9 + 8);
  *(_DWORD *)(v13 + 24) = *(_DWORD *)(v9 + 24);
  *(__n128 *)(v13 + 8) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::DFG::ByteCodeParser::DelayedSetLocal,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v8 = a3;
  v9 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v9 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::DFG::ByteCodeParser::DelayedSetLocal,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v13 = a3 - v9;
    v14 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 > a2)
      a2 = v15;
    WTF::Vector<JSC::DFG::ByteCodeParser::DelayedSetLocal,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v13;
  }
  return v8;
}

void WTF::Vector<JSC::DFG::ByteCodeParser::DelayedSetLocal,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v8 = a2;
    v10 = *(_QWORD *)a1;
    v11 = *(unsigned int *)(a1 + 12);
    if (a2 < 3)
    {
      v12 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
    }
    else
    {
      if (a2 >> 27)
      {
        __break(0xC471u);
        return;
      }
      v12 = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(a1 + 8) = v8;
      *(_QWORD *)a1 = v12;
    }
    if ((_DWORD)v11)
    {
      v13 = v10 + 32 * v11;
      v14 = v10;
      do
      {
        v15 = *(_QWORD *)v14;
        *(_QWORD *)v14 = 0;
        *(_QWORD *)v12 = v15;
        v16 = *(_OWORD *)(v14 + 8);
        *(_DWORD *)(v12 + 24) = *(_DWORD *)(v14 + 24);
        *(_OWORD *)(v12 + 8) = v16;
        v17 = *(_QWORD *)v14;
        if ((*(_QWORD *)v14 & 1) != 0 && (v17 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v17 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
        v14 += 32;
        v12 += 32;
      }
      while (v14 != v13);
    }
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t WTF::Vector<JSC::DFG::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<JSC::DFG::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *casual;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = 8 * v9;
    v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v12)
    {
      v13 = (unint64_t)(v11 + 15) >> 4;
      if (v9 <= 0x34)
      {
        v14 = 23 * v13 + 7;
      }
      else
      {
        if (v9 > 0x4E2)
          goto LABEL_15;
        v14 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v13 + 626);
        if (*(_DWORD *)(v12 + 8052) <= v14)
          goto LABEL_15;
      }
      v16 = v12 + 8 * v14;
      v17 = v16 + 8064;
      *(_BYTE *)(v16 + 8064) = 1;
      v18 = *(unsigned int *)(v16 + 8080);
      if ((_DWORD)v18)
      {
        *(_DWORD *)(v17 + 16) = v18 - *(_DWORD *)(v17 + 20);
        casual = (void *)(*(_QWORD *)(v17 + 8) - v18);
      }
      else
      {
        v26 = *(_QWORD *)(v17 + 40);
        v27 = *(_QWORD *)(v17 + 24);
        if (!v26)
        {
          if (*(_BYTE *)(v17 + 5) == 6)
          {
            v29 = *(unsigned int *)(v17 + 32);
            v30 = *(_DWORD *)(v17 + 36);
            if (v29 < v30)
            {
              *(_QWORD *)(v17 + 8 * v29 + 56) = 0;
              v31 = (unint64_t *)(8 * v14 + 8 * v29 + v12 + 8128);
              v32 = v30 - 1 - v29;
              while (v32)
              {
                v27 += 1024;
                v34 = *v31++;
                v33 = v34;
                LODWORD(v29) = v29 + 1;
                --v32;
                if (v34)
                {
                  v26 = __rbit64(v33);
                  *(_DWORD *)(v17 + 32) = v29;
                  *(_QWORD *)(v17 + 24) = v27;
                  goto LABEL_26;
                }
              }
              *(_DWORD *)(v17 + 32) = v30;
            }
          }
          *(_BYTE *)v17 = 0;
          goto LABEL_15;
        }
LABEL_26:
        v28 = __clz(v26);
        *(_QWORD *)(v17 + 40) = v26 & ~(0x8000000000000000 >> v28);
        casual = (void *)(v27 + 16 * v28);
      }
      *(_BYTE *)v17 = 0;
LABEL_20:
      *(_DWORD *)(v4 + 8) = v9;
      *(_QWORD *)v4 = casual;
      memcpy(casual, v5, 8 * v10);
      if (v5)
      {
        if (*(const void **)v4 == v5)
        {
          *(_QWORD *)v4 = 0;
          *(_DWORD *)(v4 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v5, v19, v20, v21, v22, v23, v24, v25);
      }
      return v3;
    }
LABEL_15:
    casual = (void *)bmalloc_allocate_casual(v11, 1);
    goto LABEL_20;
  }
  __break(0xC471u);
  return result;
}

_QWORD *JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _BYTE *v9;

  v8 = result;
  if (*(_BYTE *)*result)
    result = JSC::DFG::ByteCodeParser::emitFunctionChecks(result[1], *(_QWORD *)result[2], *(_QWORD *)result[3], *(unsigned int *)result[4], a5, a6, a7, a8);
  v9 = (_BYTE *)v8[6];
  *(_BYTE *)v8[5] = 1;
  *v9 = 0;
  return result;
}

uint64_t JSC::DFG::ByteCodeParser::handleIntrinsicCall<JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0>(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,JSC::Intrinsic,int,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,JSC::CodeSpecializationKind,unsigned long long,JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0 const&)::{lambda(void)#1}::operator()(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  int v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int ArrayMode;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  _QWORD *v44;
  uint64_t v45;
  int *v46;
  int v47;
  unint64_t v48;
  uint64_t result;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  int v62;
  unsigned __int8 *v64;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 *v86;
  int v87;
  uint64_t v88;
  WTF *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 *v99;
  uint64_t v100;
  WTF *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 *v109;
  uint64_t v110;
  WTF *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF *v125;
  uint64_t v126;
  WTF *v127;
  __int16 v128;
  unint64_t v129;
  unsigned __int16 v130;
  unsigned __int8 *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  unsigned int v135;
  WTF *v136;
  uint64_t v137;
  _QWORD *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  _DWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  JSC::DFG::Node *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  JSC::DFG::Node *v202;
  uint64_t v203;
  unint64_t v204;
  __int128 *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  JSC::DFG::Node *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  JSC::DFG::Node *v221;
  unsigned __int8 *v222;
  uint64_t v223;
  WTF *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  WTF *v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  uint64_t v250;
  unsigned int v251;
  unsigned __int8 *v252;
  uint64_t v253;
  uint64_t v254;
  WTF *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  WTF *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  WTF *v271;
  uint64_t v272;
  unsigned __int8 *v273;
  uint64_t v274;
  WTF *v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  WTF *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unsigned __int8 *v292;
  uint64_t v293;
  WTF *v294;
  uint64_t v295;
  __int16 v296;
  unsigned __int8 *v297;
  uint64_t v298;
  WTF *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  WTF *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  JSC::DFG::Node *v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  BOOL v324;
  unsigned __int8 *v325;
  __int128 *v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  void *v336;
  JSC::DFG::Node *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  JSC::DFG::Node *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  int v354;
  int v355;
  int v356;
  unsigned int v357;
  uint64_t v358;
  unint64_t v359;
  unint64_t v360;
  WTF *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  int v368;
  uint64_t v369;
  int v370;
  uint64_t v371;
  WTF *v372;
  int v373;
  unsigned int v374;
  int v375;
  _QWORD *v376;
  int v377;
  uint64_t *v378;
  unsigned int v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unsigned __int8 *v386;
  int v387;
  uint64_t v388;
  uint64_t v389;
  WTF *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  WTF *v394;
  unsigned __int8 *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  WTF *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  WTF *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  _QWORD *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  _QWORD *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  int *v449;
  int v450;
  uint64_t v451;
  unsigned __int8 *v452;
  unsigned __int8 *v453;
  uint64_t v454;
  WTF *v455;
  uint64_t v456;
  uint64_t v457;
  _QWORD *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  int *v463;
  int v464;
  unsigned int v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  unsigned int v472;
  unsigned __int8 *v473;
  uint64_t v474;
  uint64_t v475;
  WTF *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  unsigned __int8 *v484;
  uint64_t v485;
  WTF *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  unsigned __int8 *v490;
  uint64_t v491;
  uint64_t v492;
  WTF *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t *v496;
  unsigned int v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  unsigned __int8 *v504;
  uint64_t v505;
  WTF *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  WTF *v520;
  WTF *v521;
  unsigned __int8 *v522;
  uint64_t v523;
  WTF *v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  int v528;
  uint64_t *v529;
  unsigned int v530;
  BOOL hasExitSite;
  int8x8_t v532;
  unsigned int v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  unsigned int v540;
  uint64_t v541;
  void *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  char v549;
  uint64_t v550;
  uint64_t *v551;
  char v552;
  unint64_t *v553;
  unint64_t v554;
  uint64_t v555;
  uint64_t v556;
  unsigned int v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  unsigned __int8 *v564;
  uint64_t v565;
  WTF *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  WTF *v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  WTF *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  unsigned __int8 *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  WTF *v616;
  uint64_t v617;
  WTF *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  unsigned __int8 *v622;
  uint64_t v623;
  WTF *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t *v628;
  unsigned int v629;
  int8x8_t v630;
  __int16 v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  void *v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  char v646;
  uint64_t v647;
  uint64_t *v648;
  char v649;
  unint64_t *v650;
  unint64_t v651;
  uint64_t v652;
  uint64_t v653;
  unsigned int v654;
  uint64_t v655;
  unsigned int v656;
  uint64_t *v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  unsigned __int8 *v675;
  uint64_t v676;
  unint64_t *v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  WTF *v683;
  uint64_t v684;
  uint64_t v685;
  int v686;
  WTF *v687;
  int v688;
  uint64_t v689;
  int v690;
  uint64_t v691;
  int v692;
  uint64_t v693;
  int v694;
  uint64_t v695;
  WTF *v696;
  uint64_t *v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  _QWORD *v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  void *v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  unsigned __int8 *v730;
  _BYTE *v731;
  uint64_t v732;
  int *v733;
  int v734;
  unsigned __int8 *v735;
  uint64_t v736;
  WTF *v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  WTF *v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  unsigned __int8 *v749;
  uint64_t v750;
  WTF *v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  unsigned __int8 *v755;
  uint64_t v756;
  WTF *v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  unsigned __int8 *v761;
  uint64_t v762;
  WTF *v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  int v767;
  uint64_t v768;
  WTF *v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  WTF *v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  __int16 v780;
  unsigned __int8 *v781;
  uint64_t v782;
  WTF *v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t *v787;
  unsigned int v788;
  int8x8_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  unsigned __int8 *v796;
  uint64_t v797;
  uint64_t v798;
  WTF *v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  WTF *v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  WTF *v815;
  uint64_t v816;
  unsigned __int8 *v817;
  uint64_t v818;
  WTF *v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  WTF *v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  unint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  JSC::DFG::Node *v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  WTF *v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  _QWORD *v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  unsigned __int8 *v861;
  int v862;
  uint64_t v863;
  WTF *v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  WTF *v871;
  uint64_t v872;
  uint64_t v873;
  unsigned __int8 *v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  WTF *v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  _QWORD *v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  _QWORD *v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  int v901;
  unsigned __int8 *v902;
  unsigned int v903;
  unsigned int v904;
  uint64_t v905;
  WTF *v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  int v913;
  int v914;
  int v915;
  WTF *v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v924;
  unsigned __int8 *v925;
  uint64_t v926;
  _QWORD *v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  WTF *v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  WTF *v943;
  uint64_t v944;
  unsigned __int8 *v945;
  uint64_t v946;
  uint64_t v947;
  WTF *v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  WTF *v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  WTF *v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  unsigned __int8 *v972;
  uint64_t v973;
  WTF *v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  unint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  unint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  JSC::DFG::Node *v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  WTF *v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  unsigned __int8 *v1005;
  uint64_t v1006;
  _QWORD *v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  WTF *v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  WTF *v1023;
  uint64_t v1024;
  unsigned __int8 *v1025;
  unsigned __int8 *v1026;
  _QWORD *v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  int *v1032;
  int v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  unsigned __int8 *v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  WTF *v1057;
  WTF *v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  unint64_t v1071;
  uint64_t v1072;
  int v1073;
  uint64_t v1074;
  unsigned int v1075;
  int v1076;
  unsigned int v1077;
  int v1078;
  unsigned int v1079;
  int v1080;
  unsigned __int8 *v1081;
  uint64_t v1082;
  WTF *v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  _QWORD *v1087;
  unint64_t *v1088;
  unint64_t v1089;
  __int128 *v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  WTF *v1097;
  int v1098;
  _QWORD *v1099;
  unsigned __int8 *v1100;
  uint64_t v1101;
  WTF *v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  WTF *v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  unint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  WTF *v1125;
  uint64_t v1126;
  unsigned __int8 *v1127;
  uint64_t v1128;
  WTF *v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  _QWORD *v1134;
  uint64_t *v1135;
  unsigned int v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  unsigned __int8 *v1143;
  int v1144;
  uint64_t v1145;
  unint64_t v1146;
  uint64_t v1147;
  WTF *v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  WTF *v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  unsigned __int8 *v1166;
  uint64_t v1167;
  WTF *v1168;
  uint64_t v1169;
  uint64_t v1170;
  unsigned __int8 *v1171;
  uint64_t v1172;
  WTF *v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  unsigned __int8 *v1177;
  uint64_t v1178;
  uint64_t v1179;
  WTF *v1180;
  uint64_t v1181;
  unsigned __int8 *v1182;
  uint64_t v1183;
  uint64_t v1184;
  WTF *v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  WTF *v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  WTF *v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  unint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  JSC::DFG::Node *v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  WTF *v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  void *v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  char v1234;
  uint64_t v1235;
  uint64_t *v1236;
  char v1237;
  unint64_t *v1238;
  unint64_t v1239;
  uint64_t v1240;
  int v1241;
  unint64_t v1242;
  unint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  _QWORD *v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  WTF *v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  int *v1262;
  int v1263;
  WTF *v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  WTF *v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  WTF *v1278;
  unsigned int v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  int v1289;
  int v1290;
  int v1291;
  int v1292;
  uint64_t v1293;
  void *v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  int v1301;
  WTF *v1302;
  WTF *v1303;
  unsigned __int8 *v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  WTF *v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  __int16 v1317;
  _QWORD *v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  _QWORD *v1325;
  uint64_t v1326;
  uint64_t v1327;
  __int16 v1328;
  uint64_t v1329;
  uint64_t v1330;
  WTF *v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  void *v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  __int16 v1352;
  uint64_t v1353;
  char v1354;
  uint64_t v1355;
  char v1356;
  uint64_t v1357;
  char v1358;
  uint64_t v1359;
  char v1360;
  uint64_t v1361;
  char v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  WTF *v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  unsigned __int8 *v1374;
  uint64_t v1375;
  __int16 v1376;
  WTF *v1377;
  _QWORD *v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  WTF *v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  __int16 v1390;
  uint64_t v1391;
  uint64_t *v1392;
  unsigned int v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  int v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  WTF *v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  WTF *v1423;
  uint64_t v1424;
  uint64_t v1425;
  _BOOL8 v1426;
  uint64_t v1427;
  unint64_t v1428;
  JSC::DFG::ByteCodeParser *v1429;
  __int16 v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  WTF *v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  WTF *v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  _BOOL8 v1454;
  unint64_t v1455;
  JSC::DFG::ByteCodeParser *v1456;
  __int16 v1457;
  unint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  WTF *v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  WTF *v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  WTF *v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  int v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  WTF *v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  int v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  __int16 v1547;
  __int16 v1548;
  uint64_t v1549;
  WTF *v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  int8x8_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  WTF *v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  WTF *v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  WTF *v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  __int128 *v1611;
  uint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  uint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  __int16 v1625;
  __int16 v1626;
  WTF *v1627;
  uint64_t v1628;
  __int16 v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  int v1633;
  JSC::JSValue **v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  int8x8_t v1642;
  uint64_t v1643;
  unsigned __int8 *v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  WTF *v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  WTF *v1656;
  uint64_t v1657;
  uint64_t v1658;
  unsigned int v1659;
  uint64_t v1660;
  unsigned int v1661;
  uint64_t *v1662;
  unsigned int v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  int v1677;
  int v1678;
  uint64_t v1679;
  WTF *v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  uint64_t v1704;
  WTF *v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  WTF *v1713;
  uint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  uint64_t v1725;
  uint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  uint64_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  uint64_t v1734;
  uint64_t v1735;
  WTF *v1736;
  uint64_t v1737;
  uint64_t v1738;
  uint64_t v1739;
  uint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  unint64_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  unint64_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  uint64_t v1755;
  unsigned __int8 v1756;
  JSC::DFG::Node *v1757;
  uint64_t v1758;
  uint64_t v1759;
  uint64_t v1760;
  uint64_t *v1761;
  unsigned int v1762;
  int8x8_t v1763;
  unsigned __int8 *v1764;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t v1767;
  uint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  uint64_t v1771;
  uint64_t v1772;
  uint64_t v1773;
  uint64_t v1774;
  uint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  uint64_t v1782;
  uint64_t v1783;
  uint64_t v1784;
  uint64_t v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  uint64_t v1789;
  uint64_t v1790;
  uint64_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  uint64_t v1794;
  uint64_t v1795;
  uint64_t v1796;
  uint64_t v1797;
  uint64_t v1798;
  uint64_t *v1799;
  unint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  uint64_t v1803;
  uint64_t v1804;
  uint64_t v1805;
  uint64_t v1806;
  unint64_t v1807;
  __int128 *v1808;
  uint64_t v1809;
  uint64_t v1810;
  uint64_t v1811;
  uint64_t v1812;
  uint64_t v1813;
  uint64_t v1814;
  uint64_t v1815;
  uint64_t v1816;
  uint64_t v1817;
  uint64_t *v1818;
  unint64_t v1819;
  uint64_t v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  uint64_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  uint64_t v1829;
  uint64_t v1830;
  uint64_t v1831;
  uint64_t v1832;
  uint64_t v1833;
  uint64_t v1834;
  WTF *v1835;
  uint64_t v1836;
  uint64_t v1837;
  uint64_t v1838;
  uint64_t v1839;
  uint64_t v1840;
  uint64_t v1841;
  int v1842;
  uint64_t v1843;
  WTF *v1844;
  int v1845;
  uint64_t *v1846;
  unsigned int v1847;
  uint64_t v1848;
  uint64_t v1849;
  uint64_t v1850;
  uint64_t v1851;
  uint64_t v1852;
  uint64_t v1853;
  uint64_t v1854;
  unint64_t v1855;
  uint64_t v1856;
  uint64_t v1857;
  uint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  uint64_t v1861;
  __int128 *v1862;
  uint64_t v1863;
  uint64_t v1864;
  uint64_t v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  unint64_t v1872;
  unsigned int v1873;
  WTF *v1874;
  uint64_t v1875;
  uint64_t v1876;
  uint64_t v1877;
  uint64_t v1878;
  uint64_t v1879;
  uint64_t v1880;
  uint64_t v1881;
  uint64_t v1882;
  uint64_t v1883;
  uint64_t v1884;
  uint64_t v1885;
  uint64_t v1886;
  uint64_t v1887;
  uint64_t v1888;
  uint64_t v1889;
  uint64_t v1890;
  uint64_t v1891;
  uint64_t v1892;
  uint64_t v1893;
  uint64_t v1894;
  uint64_t v1895;
  WTF *v1896;
  uint64_t v1897;
  uint64_t v1898;
  uint64_t v1899;
  uint64_t v1900;
  uint64_t v1901;
  uint64_t v1902;
  uint64_t v1903;
  uint64_t v1904;
  unint64_t v1905;
  uint64_t v1906;
  uint64_t v1907;
  uint64_t v1908;
  uint64_t v1909;
  uint64_t v1910;
  uint64_t v1911;
  unint64_t v1912;
  uint64_t v1913;
  uint64_t v1914;
  uint64_t v1915;
  uint64_t v1916;
  uint64_t v1917;
  uint64_t v1918;
  int v1919;
  uint64_t v1920;
  WTF *v1921;
  uint64_t v1922;
  uint64_t v1923;
  uint64_t v1924;
  int v1925;
  uint64_t v1926;
  uint64_t v1927;
  uint64_t v1928;
  uint64_t v1929;
  uint64_t v1930;
  uint64_t v1931;
  uint64_t v1932;
  uint64_t v1933;
  uint64_t v1934;
  uint64_t v1935;
  int v1936;
  uint64_t v1937;
  uint64_t v1938;
  uint64_t v1939;
  unint64_t v1940;
  uint64_t v1941;
  WTF *v1942;
  uint64_t v1943;
  uint64_t v1944;
  uint64_t v1945;
  uint64_t v1946;
  uint64_t v1947;
  uint64_t v1948;
  uint64_t (*v1949)(WTF **);
  WTF **v1950;
  uint64_t v1951;
  uint64_t (*v1952)(WTF **);
  WTF **v1953;
  int v1954;
  JSC::JSValue **v1955;
  uint64_t v1956;
  uint64_t v1957;
  uint64_t v1958;
  uint64_t v1959;
  uint64_t v1960;
  uint64_t v1961;
  uint64_t v1962;
  unsigned int v1963;
  uint64_t v1964;
  WTF *v1965;
  uint64_t v1966;
  uint64_t v1967;
  uint64_t v1968;
  uint64_t v1969;
  uint64_t v1970;
  uint64_t v1971;
  uint64_t v1972;
  uint64_t v1973;
  uint64_t v1974;
  WTF *v1975;
  uint64_t v1976;
  uint64_t v1977;
  uint64_t v1978;
  uint64_t v1979;
  void *v1980;
  uint64_t v1981;
  uint64_t v1982;
  uint64_t v1983;
  uint64_t v1984;
  uint64_t v1985;
  uint64_t v1986;
  char v1987;
  uint64_t v1988;
  uint64_t *v1989;
  char v1990;
  unint64_t *v1991;
  unint64_t v1992;
  uint64_t v1993;
  uint64_t v1994;
  unsigned __int8 *v1995;
  int v1996;
  unint64_t v1997;
  WTF *v1998;
  void *v1999;
  uint64_t v2000;
  uint64_t v2001;
  uint64_t v2002;
  uint64_t v2003;
  uint64_t v2004;
  uint64_t v2005;
  int8x8_t v2006;
  uint64_t Prediction;
  uint64_t v2008;
  uint64_t v2009;
  uint64_t v2010;
  uint64_t v2011;
  uint64_t v2012;
  uint64_t v2013;
  uint64_t v2014;
  WTF *v2015;
  uint64_t v2016;
  _QWORD *v2017;
  uint64_t v2018;
  uint64_t v2019;
  uint64_t v2020;
  uint64_t v2021;
  uint64_t v2022;
  uint64_t v2023;
  _QWORD *v2024;
  int v2025;
  unint64_t v2026;
  unint64_t v2027;
  uint64_t v2028;
  uint64_t v2029;
  _QWORD *v2030;
  uint64_t v2031;
  uint64_t v2032;
  uint64_t v2033;
  uint64_t v2034;
  int *v2035;
  int v2036;
  uint64_t v2037;
  uint64_t v2038;
  uint64_t v2039;
  uint64_t v2040;
  unsigned int v2041;
  uint64_t v2042;
  uint64_t v2043;
  uint64_t v2044;
  unsigned int v2045;
  uint64_t v2046;
  uint64_t v2047;
  uint64_t v2048;
  unsigned int v2049;
  uint64_t v2050;
  uint64_t v2051;
  uint64_t *v2052;
  uint64_t v2053;
  unsigned int v2054;
  BOOL v2055;
  uint64_t v2056;
  uint64_t v2057;
  uint64_t v2058;
  uint64_t v2059;
  uint64_t v2060;
  uint64_t v2061;
  int v2062;
  unint64_t v2063;
  WTF *__dst;
  uint64_t v2065;
  uint64_t v2066;
  int v2067;
  WTF *v2068;
  WTF *v2069;
  uint64_t v2070;
  uint64_t v2071;

  v9 = **a1;
  v10 = 3;
  v12 = (uint64_t)a1[4];
  switch(**a1)
  {
    case 1u:
      v292 = a1[2];
      if (*(_DWORD *)a1[1] == 1)
        goto LABEL_668;
      if (**(_BYTE **)v292)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v292 + 1), **((_QWORD **)v292 + 2), **((_QWORD **)v292 + 3), **((unsigned int **)v292 + 4), a5, a6, a7, a8);
      **((_BYTE **)v292 + 5) = 1;
      **((_BYTE **)v292 + 6) = 0;
      v597 = (*(_DWORD *)a1[5] + 6);
      v598 = JSC::DFG::ByteCodeParser::get(v12, v597 | ((unint64_t)(v597 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v277 = (unint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 70, (uint64_t)v598, 0, 0, v599, v600, v601);
      if (JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(v12 + 280) + 32), *(_DWORD *)(v12 + 40), 9))
      {
        v1936 = *(_DWORD *)(v277 + 56);
        if ((v1936 | 0x100) != v1936)
          *(_DWORD *)(v277 + 56) = v1936 | 0x100;
      }
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x198340B7CLL);
      }
      goto LABEL_170;
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 0xBu:
    case 0xCu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x38u:
    case 0x39u:
    case 0x3Au:
    case 0x3Bu:
    case 0x3Cu:
    case 0x3Du:
      if (*(_DWORD *)a1[1] == 1)
        goto LABEL_672;
      switch(**a1)
      {
        case '8':
          v451 = 16;
          break;
        case '9':
          v451 = 17;
          break;
        case ':':
          v451 = 12;
          break;
        case ';':
          v451 = 13;
          break;
        case '<':
          v451 = 18;
          break;
        case '=':
          v451 = 14;
          break;
        default:
          v451 = 0;
          switch(**a1)
          {
            case 2u:
              v451 = 8;
              break;
            case 3u:
              v451 = 6;
              break;
            case 4u:
              v451 = 10;
              break;
            case 5u:
              v451 = 9;
              break;
            case 6u:
              v451 = 7;
              break;
            case 7u:
              v451 = 11;
              break;
            case 0xBu:
              goto LABEL_176;
            case 0xCu:
              v451 = 15;
              break;
            case 0xEu:
              v451 = 2;
              break;
            case 0xFu:
              v451 = 4;
              break;
            case 0x10u:
              v451 = 3;
              break;
            case 0x11u:
              v451 = 1;
              break;
            case 0x12u:
              v451 = 5;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x19834485CLL);
          }
          return result;
      }
LABEL_176:
      v452 = a1[2];
      if (**(_BYTE **)v452)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v452 + 1), **((_QWORD **)v452 + 2), **((_QWORD **)v452 + 3), **((unsigned int **)v452 + 4), a5, a6, a7, a8);
      **((_BYTE **)v452 + 5) = 1;
      **((_BYTE **)v452 + 6) = 0;
      v453 = a1[3];
      v454 = (*(_DWORD *)a1[5] + 6);
      v455 = JSC::DFG::ByteCodeParser::get(v12, v454 | ((unint64_t)(v454 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v458 = JSC::DFG::ByteCodeParser::addToGraph(v12, 81, v451, (uint64_t)v455, 0, 0, v456, v457);
      v43 = *(unsigned __int8 **)v453;
      if (**(_BYTE **)v453)
      {
        __break(0xC471u);
        JUMPOUT(0x1983448A4);
      }
      goto LABEL_179;
    case 8u:
    case 9u:
      v129 = *(_QWORD *)a1[6];
      if (v9 == 8)
        v130 = 71;
      else
        v130 = 72;
      v131 = a1[2];
      v132 = *(unsigned int *)a1[1];
      if ((_DWORD)v132 == 1)
      {
        JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
        if (v9 == 8)
          v1807 = 0x7FF2000000000000;
        else
          v1807 = 0xFFF2000000000000;
        v1808 = JSC::DFG::Graph::freeze(*(_QWORD *)(v12 + 24), v1807, v1801, v1802, v1803, v1804, v1805, v1806);
        v141 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 0, (uint64_t)v1808, 0, 0, 0, v1809, v1810);
LABEL_69:
        v146 = v141;
        if (HIDWORD(v129) != 2)
        {
          if ((_DWORD)v129 == 0x3FFFFFFF)
            goto LABEL_73;
          goto LABEL_71;
        }
        if ((v129 & 0x80000000) == 0)
        {
LABEL_71:
          v147 = v12;
          v148 = v129;
LABEL_72:
          JSC::DFG::ByteCodeParser::set(v147, v148, v146, 0, v142, v143, v144, v145);
          goto LABEL_73;
        }
        goto LABEL_73;
      }
      v133 = *(_DWORD *)a1[5];
      if ((_DWORD)v132 != 2)
      {
        if (**(_BYTE **)v131)
          JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v131 + 1), **((_QWORD **)v131 + 2), **((_QWORD **)v131 + 3), **((unsigned int **)v131 + 4), a5, a6, a7, a8);
        **((_BYTE **)v131 + 5) = 1;
        **((_BYTE **)v131 + 6) = 0;
        if ((int)v132 >= 2)
        {
          v134 = v132 - 1;
          v135 = v133 + 6;
          do
          {
            v136 = JSC::DFG::ByteCodeParser::get(v12, v135 | ((unint64_t)(v135 >> 31) << 32), a3, a4, a5, a6, a7, a8);
            v137 = *(_QWORD *)(v12 + 24);
            v138 = (_QWORD *)(v137 + 152);
            v139 = (unint64_t)v136 & 0xFF00FFFFFFFFFFFFLL;
            v2069 = (WTF *)((unint64_t)v136 & 0xFF00FFFFFFFFFFFFLL);
            v140 = *(unsigned int *)(v137 + 164);
            if ((_DWORD)v140 == *(_DWORD *)(v137 + 160))
            {
              v1134 = (_QWORD *)WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v138, (void *)(v140 + 1), (unint64_t)&v2069, a4, a5, a6, a7, a8);
              v140 = *(unsigned int *)(v137 + 164);
              *(_QWORD *)(*(_QWORD *)(v137 + 152) + 8 * v140) = *v1134;
            }
            else
            {
              *(_QWORD *)(*v138 + 8 * v140) = v139;
            }
            *(_DWORD *)(v137 + 164) = v140 + 1;
            ++*(_DWORD *)(v12 + 272);
            ++v135;
            --v134;
          }
          while (v134);
        }
        v141 = JSC::DFG::ByteCodeParser::addToGraph(v12, v130, 0, 0, a5, a6, a7, a8);
        goto LABEL_69;
      }
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      v1932 = (uint64_t)JSC::DFG::ByteCodeParser::get(v12, (v133 + 6) | ((unint64_t)((v133 + 6) >> 31) << 32), v1926, v1927, v1928, v1929, v1930, v1931);
      JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 23, v1932 & 0xFF00FFFFFFFFFFFFLL | 0x10000000000000, 0, 0, v1933, v1934, v1935);
      if (HIDWORD(v129) == 2)
      {
        if ((v129 & 0x80000000) == 0)
          goto LABEL_738;
      }
      else if ((_DWORD)v129 != 0x3FFFFFFF)
      {
LABEL_738:
        v147 = v12;
        v148 = v129;
        v146 = v1932;
        goto LABEL_72;
      }
LABEL_73:
      v43 = a1[7];
      goto LABEL_15;
    case 0xAu:
    case 0x5Du:
      if (*(_DWORD *)a1[1] != 1)
      {
        if (v9 == 10)
        {
          v780 = 80;
        }
        else
        {
          if (v9 != 93)
          {
            __break(0xC471u);
            JUMPOUT(0x198344388);
          }
          v780 = 73;
        }
        v781 = a1[2];
        if (**(_BYTE **)v781)
          JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v781 + 1), **((_QWORD **)v781 + 2), **((_QWORD **)v781 + 3), **((unsigned int **)v781 + 4), a5, a6, a7, a8);
        **((_BYTE **)v781 + 5) = 1;
        **((_BYTE **)v781 + 6) = 0;
        v453 = a1[3];
        v782 = (*(_DWORD *)a1[5] + 6);
        v783 = JSC::DFG::ByteCodeParser::get(v12, v782 | ((unint64_t)(v782 >> 31) << 32), a3, a4, a5, a6, a7, a8);
        v458 = JSC::DFG::ByteCodeParser::addToGraph(v12, v780, (uint64_t)v783, 0, 0, v784, v785, v786);
        v43 = *(unsigned __int8 **)v453;
        if (**(_BYTE **)v453)
        {
          __break(0xC471u);
          JUMPOUT(0x1983414F8);
        }
LABEL_179:
        v463 = (int *)*((_QWORD *)v453 + 1);
        v464 = *v463;
        if (v463[1] == 2)
        {
          if (v464 < 0)
            goto LABEL_15;
        }
        else if (v464 == 0x3FFFFFFF)
        {
          goto LABEL_15;
        }
        JSC::DFG::ByteCodeParser::set(*((_QWORD *)v453 + 2), *(_QWORD *)v463, (uint64_t)v458, 0, v459, v460, v461, v462);
        v43 = *(unsigned __int8 **)v453;
        goto LABEL_15;
      }
LABEL_672:
      v1764 = a1[2];
LABEL_669:
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(v1764, a2, a3, a4, a5, a6, a7, a8);
      v1374 = a1[3];
      v1611 = *(__int128 **)(v12 + 88);
LABEL_619:
      v1378 = JSC::DFG::ByteCodeParser::addToGraph(v12, 0, (uint64_t)v1611, 0, 0, 0, v1609, v1610);
      goto LABEL_568;
    case 0xDu:
      v1171 = a1[2];
      if (**(_BYTE **)v1171)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v1171 + 1), **((_QWORD **)v1171 + 2), **((_QWORD **)v1171 + 3), **((unsigned int **)v1171 + 4), a5, a6, a7, a8);
      **((_BYTE **)v1171 + 5) = 1;
      **((_BYTE **)v1171 + 6) = 0;
      if (*(_DWORD *)a1[1] != 1)
      {
        v1172 = (*(_DWORD *)a1[5] + 6);
        v1173 = JSC::DFG::ByteCodeParser::get(v12, v1172 | ((unint64_t)(v1172 >> 31) << 32), a3, a4, a5, a6, a7, a8);
        v1026 = a1[3];
        v1027 = JSC::DFG::ByteCodeParser::addToGraph(v12, 63, (uint64_t)v1173, 0, 0, v1174, v1175, v1176);
        v43 = *(unsigned __int8 **)v1026;
        if (**(_BYTE **)v1026)
        {
          __break(0xC471u);
          JUMPOUT(0x1983428C4);
        }
LABEL_427:
        v1032 = (int *)*((_QWORD *)v1026 + 1);
        v1033 = *v1032;
        if (v1032[1] == 2)
        {
          if (v1033 < 0)
            goto LABEL_15;
        }
        else if (v1033 == 0x3FFFFFFF)
        {
          goto LABEL_15;
        }
        JSC::DFG::ByteCodeParser::set(*((_QWORD *)v1026 + 2), *(_QWORD *)v1032, (uint64_t)v1027, 0, v1028, v1029, v1030, v1031);
        v43 = *(unsigned __int8 **)v1026;
        goto LABEL_15;
      }
      v1374 = a1[3];
      v1611 = JSC::DFG::Graph::freeze(*(_QWORD *)(v12 + 24), 0xFFFE000000000020, a3, a4, a5, a6, a7, a8);
      goto LABEL_619;
    case 0x13u:
      if (*(_DWORD *)a1[1] >> 5 > 0xC34u)
        return v10;
      ArrayMode = JSC::DFG::ByteCodeParser::getArrayMode((uint64_t)a1[4], 1, a9);
      if (BYTE1(ArrayMode) - 2 > 3)
        return v10;
      v20 = ArrayMode;
      v21 = a1[2];
      if (**(_BYTE **)v21)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v21 + 1), **((_QWORD **)v21 + 2), **((_QWORD **)v21 + 3), **((unsigned int **)v21 + 4), v16, v17, v18, v19);
      **((_BYTE **)v21 + 5) = 1;
      **((_BYTE **)v21 + 6) = 0;
      JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, 0, v14, v15, v16, v17, v18, v19);
      if (*(int *)a1[1] >= 1)
      {
        v28 = 0;
        do
        {
          v29 = (v28 + *(_DWORD *)a1[5] + 5);
          v30 = JSC::DFG::ByteCodeParser::get(v12, v29 | ((unint64_t)(v29 >> 31) << 32), v22, v23, v24, v25, v26, v27);
          JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, (unint64_t)v30, v31, v32, v33, v34, v35, v36);
          ++v28;
        }
        while (v28 < *(_DWORD *)a1[1]);
      }
      v37 = JSC::DFG::ByteCodeParser::addToGraph(v12, 0xD4u, v20, *(_QWORD *)a1[9], v24, v25, v26, v27);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x198343C24);
      }
      goto LABEL_10;
    case 0x14u:
      v465 = JSC::DFG::ByteCodeParser::getArrayMode((uint64_t)a1[4], 1, a9);
      if (((BYTE1(v465) - 2) | (v465 - 7)) > 3u)
        return v10;
      v472 = v465;
      v473 = a1[2];
      if (**(_BYTE **)v473)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v473 + 1), **((_QWORD **)v473 + 2), **((_QWORD **)v473 + 3), **((unsigned int **)v473 + 4), v468, v469, v470, v471);
      **((_BYTE **)v473 + 5) = 1;
      **((_BYTE **)v473 + 6) = 0;
      v474 = *(_QWORD *)a1[9];
      v475 = (*(_DWORD *)a1[5] + 5);
      v476 = JSC::DFG::ByteCodeParser::get(v12, v475 | ((unint64_t)(v475 >> 31) << 32), v466, v467, v468, v469, v470, v471);
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 213, v472, v474, (uint64_t)v476, 0, 0, v477);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x198340584);
      }
      goto LABEL_10;
    case 0x15u:
      if (*(int *)a1[1] < 1)
        return v10;
      v628 = (uint64_t *)(*(_QWORD *)(v12 + 280) + 32);
      v629 = *(_DWORD *)(v12 + 40);
      if (JSC::DFG::QueryableExitProfile::hasExitSite(v628, v629, 6)
        || JSC::DFG::QueryableExitProfile::hasExitSite(v628, v629, 5))
      {
        return 3;
      }
      v631 = JSC::DFG::ByteCodeParser::getArrayMode(v12, 0, v630);
      v10 = 3;
      if (v631 - 7 > 2 || HIBYTE(v631) - 3 > 2)
        return v10;
      v638 = *(_QWORD *)(v12 + 24);
      JSC::DFG::ByteCodeParser::currentNodeOrigin((JSC::DFG::ByteCodeParser *)&v2069, v12, v632, v633, v634, v635, v636, v637);
      v646 = (char)v2069;
      v647 = *(_QWORD *)(v638 + 32);
      v648 = (uint64_t *)((unint64_t)v2069 & 0xFFFFFFFF8);
      if ((v2069 & 1) != 0)
      {
        v2044 = *v648;
        if ((v2069 & 2) != 0
          || (v2045 = *(_DWORD *)(((unint64_t)v2069 & 0xFFFFFFFF8) + 8), v2045 == 0x3FFFFFFF)
          || v2045 == -1)
        {
          v2046 = 2;
        }
        else if (v2045 >> 28)
        {
          v2059 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v2059 = v2044;
          *(_DWORD *)(v2059 + 8) = v2045;
          v2046 = 1;
          v2044 = v2059;
        }
        else
        {
          v2046 = *v648;
          v2044 = 0;
        }
        v2047 = v2044 | v2046;
        v650 = (unint64_t *)(v2047 & 0xFFFFFFFF8);
        if ((v2047 & 1) != 0)
        {
          v649 = 0;
          v651 = *v650;
        }
        else
        {
          v649 = 1;
          v651 = (unint64_t)v650;
        }
      }
      else
      {
        v649 = 1;
        v650 = (unint64_t *)((unint64_t)v2069 & 0xFFFFFFFF8);
        v651 = (unint64_t)v2069 & 0xFFFFFFFF8;
      }
      if (v651)
        v647 = *(_QWORD *)(v651 + 8);
      v652 = *(_QWORD *)(v647 + 8);
      if ((v649 & 1) == 0 && v650)
        WTF::fastFree((unint64_t)v650, v639, v640, v641, v642, v643, v644, v645);
      if ((v646 & 1) != 0 && v648)
        WTF::fastFree((unint64_t)v648, v639, v640, v641, v642, v643, v644, v645);
      if ((v2070 & 1) != 0 && (v2070 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v2070 & 0xFFFFFFFF8, v639, v640, v641, v642, v643, v644, v645);
      v653 = *(_QWORD *)(v652 + 2280);
      if ((v653 & 1) != 0)
        v654 = (v653 >> 1) & 3;
      else
        v654 = *(unsigned __int8 *)(v653 + 4);
      if (v654 != 1 || *(_BYTE *)(*(_QWORD *)(v652 + 2048) + 4) == 2)
        return 3;
      v655 = *(_QWORD *)(v652 + 2304);
      v656 = (v655 & 1) != 0 ? (v655 >> 1) & 3 : *(unsigned __int8 *)(v655 + 4);
      if (v656 != 1)
        return 3;
      JSC::DFG::DesiredWatchpoints::addLazily((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 24) + 136), (JSC::InlineWatchpointSet *)(v652 + 2280), v640, v641, v642, v643, v644, v645);
      v657 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 24) + 136);
      v2068 = *(WTF **)(v652 + 2048);
      WTF::HashTable<JSC::WatchpointSet *,JSC::WatchpointSet *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>>::add(v657, (uint64_t *)&v2068, v658, v659, v660, v661, v662, (uint64_t)&v2069);
      JSC::DFG::DesiredWatchpoints::addLazily((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 24) + 136), (JSC::InlineWatchpointSet *)(v652 + 2304), v663, v664, v665, v666, v667, v668);
      v675 = a1[2];
      if (**(_BYTE **)v675)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v675 + 1), **((_QWORD **)v675 + 2), **((_QWORD **)v675 + 3), **((unsigned int **)v675 + 4), v671, v672, v673, v674);
      **((_BYTE **)v675 + 5) = 1;
      **((_BYTE **)v675 + 6) = 0;
      v676 = (*(_DWORD *)a1[5] + 5);
      v683 = JSC::DFG::ByteCodeParser::get(v12, v676 | ((unint64_t)(v676 >> 31) << 32), v669, v670, v671, v672, v673, v674);
      v2069 = 0;
      v684 = *(_DWORD *)(v652 + 860) & 0xFFFFFFFE;
      if ((_DWORD)v684)
      {
        v685 = 16 * v684;
        v2069 = (WTF *)v685;
      }
      else
      {
        v685 = 0;
      }
      v686 = *(_DWORD *)(v652 + 868);
      if (v686)
        v687 = (WTF *)(16 * (v686 & 0xFFFFFFFE));
      else
        v687 = 0;
      if (v687 != (WTF *)v685)
      {
        if (v685)
        {
          v1353 = WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v1353 = 0x400000002;
          v1354 = (char)v2069;
          *(_QWORD *)(v1353 + 8) = (unint64_t)v2069 & 0xFFFFFFFFFFFFFFFCLL;
          *(_QWORD *)(v1353 + 16) = v687;
          v685 = v1354 & 2 | (unint64_t)v1353 | 1;
          v2069 = (WTF *)v685;
        }
        else
        {
          v2069 = v687;
          v685 = (uint64_t)v687;
        }
      }
      v688 = *(_DWORD *)(v652 + 864);
      if (v688)
        v689 = 16 * (v688 & 0xFFFFFFFE);
      else
        v689 = 0;
      if ((v685 & 1) != 0)
      {
        WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine((uint64_t *)&v2069, v689);
        v685 = (uint64_t)v2069;
      }
      else if (v689 != (v685 & 0xFFFFFFFFFFFFFFFCLL))
      {
        if ((v685 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        {
          v1355 = WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v1355 = 0x400000002;
          v1356 = (char)v2069;
          *(_QWORD *)(v1355 + 8) = (unint64_t)v2069 & 0xFFFFFFFFFFFFFFFCLL;
          *(_QWORD *)(v1355 + 16) = v689;
          v685 = v1356 & 2 | (unint64_t)v1355 | 1;
        }
        else
        {
          v685 = v685 & 2 | v689;
        }
        v2069 = (WTF *)v685;
      }
      v690 = *(_DWORD *)(v652 + 880);
      if (v690)
        v691 = 16 * (v690 & 0xFFFFFFFE);
      else
        v691 = 0;
      if ((v685 & 1) != 0)
      {
        WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine((uint64_t *)&v2069, v691);
        v685 = (uint64_t)v2069;
      }
      else if (v691 != (v685 & 0xFFFFFFFFFFFFFFFCLL))
      {
        if ((v685 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        {
          v1357 = WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v1357 = 0x400000002;
          v1358 = (char)v2069;
          *(_QWORD *)(v1357 + 8) = (unint64_t)v2069 & 0xFFFFFFFFFFFFFFFCLL;
          *(_QWORD *)(v1357 + 16) = v691;
          v685 = v1358 & 2 | (unint64_t)v1357 | 1;
        }
        else
        {
          v685 = v685 & 2 | v691;
        }
        v2069 = (WTF *)v685;
      }
      v692 = *(_DWORD *)(v652 + 888);
      if (v692)
        v693 = 16 * (v692 & 0xFFFFFFFE);
      else
        v693 = 0;
      if ((v685 & 1) != 0)
      {
        WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine((uint64_t *)&v2069, v693);
        v685 = (uint64_t)v2069;
      }
      else if (v693 != (v685 & 0xFFFFFFFFFFFFFFFCLL))
      {
        if ((v685 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        {
          v1359 = WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v1359 = 0x400000002;
          v1360 = (char)v2069;
          *(_QWORD *)(v1359 + 8) = (unint64_t)v2069 & 0xFFFFFFFFFFFFFFFCLL;
          *(_QWORD *)(v1359 + 16) = v693;
          v685 = v1360 & 2 | (unint64_t)v1359 | 1;
        }
        else
        {
          v685 = v685 & 2 | v693;
        }
        v2069 = (WTF *)v685;
      }
      v694 = *(_DWORD *)(v652 + 884);
      if (v694)
        v695 = 16 * (v694 & 0xFFFFFFFE);
      else
        v695 = 0;
      if ((v685 & 1) != 0)
      {
        WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine((uint64_t *)&v2069, v695);
      }
      else if (v695 != (v685 & 0xFFFFFFFFFFFFFFFCLL))
      {
        if ((v685 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        {
          v1361 = WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v1361 = 0x400000002;
          v1362 = (char)v2069;
          *(_QWORD *)(v1361 + 8) = (unint64_t)v2069 & 0xFFFFFFFFFFFFFFFCLL;
          *(_QWORD *)(v1361 + 16) = v695;
          v696 = (WTF *)(v1362 & 2 | (unint64_t)v1361 | 1);
        }
        else
        {
          v696 = (WTF *)(v685 & 2 | v695);
        }
        v2069 = v696;
      }
      v697 = JSC::DFG::Graph::addStructureSet(*(_QWORD *)(v12 + 24), (unint64_t *)&v2069, v677, v678, v679, v680, v681, v682);
      JSC::DFG::ByteCodeParser::addToGraph(v12, 132, (uint64_t)v697, (uint64_t)v683, 0, 0, v698, v699);
      JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, (unint64_t)v683, v700, v701, v702, v703, v704, v705);
      if (*(int *)a1[1] >= 2)
      {
        v1147 = (*(_DWORD *)a1[5] + 6);
        v1148 = JSC::DFG::ByteCodeParser::get(v12, v1147 | ((unint64_t)(v1147 >> 31) << 32), v706, v707, v708, v709, v710, v711);
        JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, (unint64_t)v1148, v1149, v1150, v1151, v1152, v1153, v1154);
        if (*(int *)a1[1] >= 3)
        {
          v1158 = (*(_DWORD *)a1[5] + 7);
          v1159 = JSC::DFG::ByteCodeParser::get(v12, v1158 | ((unint64_t)(v1158 >> 31) << 32), v1155, v1156, v1157, v709, v710, v711);
          JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, (unint64_t)v1159, v1160, v1161, v1162, v1163, v1164, v1165);
        }
      }
      v712 = JSC::DFG::ByteCodeParser::addToGraph(v12, 138, (uint64_t)v683, 0, 0, v709, v710, v711);
      JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, (unint64_t)v712, v713, v714, v715, v716, v717, v718);
      v723 = JSC::DFG::ByteCodeParser::addToGraph(v12, 0xD6u, 0, 0, v719, v720, v721, v722);
      v730 = a1[3];
      v731 = *(_BYTE **)v730;
      if (**(_BYTE **)v730)
      {
        __break(0xC471u);
        JUMPOUT(0x198344AE4);
      }
      v732 = v723;
      v733 = (int *)*((_QWORD *)v730 + 1);
      v734 = *v733;
      if (v733[1] == 2)
      {
        if (v734 < 0)
        {
LABEL_318:
          *v731 = 1;
          if ((v2069 & 1) != 0)
            WTF::fastFree((unint64_t)v2069 & 0xFFFFFFFFFFFFFFFCLL, v724, v732, v725, v726, v727, v728, v729);
          return 1;
        }
      }
      else if (v734 == 0x3FFFFFFF)
      {
        goto LABEL_318;
      }
      JSC::DFG::ByteCodeParser::set(*((_QWORD *)v730 + 2), *(_QWORD *)v733, v723, 0, v726, v727, v728, v729);
      v731 = *(_BYTE **)v730;
      goto LABEL_318;
    case 0x16u:
      if (*(_DWORD *)a1[1] != 3)
        return v10;
      v787 = (uint64_t *)(*(_QWORD *)(v12 + 280) + 32);
      v788 = *(_DWORD *)(v12 + 40);
      if (JSC::DFG::QueryableExitProfile::hasExitSite(v787, v788, 6)
        || JSC::DFG::QueryableExitProfile::hasExitSite(v787, v788, 5)
        || JSC::DFG::QueryableExitProfile::hasExitSite(v787, v788, 1)
        || ((unsigned __int16)JSC::DFG::ByteCodeParser::getArrayMode(v12, 0, v789) >> 8)
         - 2 > 3)
      {
        return 3;
      }
      v796 = a1[2];
      if (**(_BYTE **)v796)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v796 + 1), **((_QWORD **)v796 + 2), **((_QWORD **)v796 + 3), **((unsigned int **)v796 + 4), v792, v793, v794, v795);
      **((_BYTE **)v796 + 5) = 1;
      **((_BYTE **)v796 + 6) = 0;
      v797 = *(_QWORD *)a1[9];
      v798 = (*(_DWORD *)a1[5] + 5);
      v799 = JSC::DFG::ByteCodeParser::get(v12, v798 | ((unint64_t)(v798 >> 31) << 32), v790, v791, v792, v793, v794, v795);
      v800 = (*(_DWORD *)a1[5] + 6);
      v807 = JSC::DFG::ByteCodeParser::get(v12, v800 | ((unint64_t)(v800 >> 31) << 32), v801, v802, v803, v804, v805, v806);
      v808 = (*(_DWORD *)a1[5] + 7);
      v815 = JSC::DFG::ByteCodeParser::get(v12, v808 | ((unint64_t)(v808 >> 31) << 32), v809, v810, v811, v812, v813, v814);
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 216, 0, v797, (uint64_t)v799, (uint64_t)v807, (uint64_t)v815, v816);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x19834165CLL);
      }
      goto LABEL_10;
    case 0x17u:
      v528 = *(_DWORD *)a1[1];
      if (v528 < 2)
        return v10;
      v529 = (uint64_t *)(*(_QWORD *)(v12 + 280) + 32);
      v530 = *(_DWORD *)(v12 + 40);
      if (JSC::DFG::QueryableExitProfile::hasExitSite(v529, v530, 7))
        return 3;
      if (JSC::DFG::QueryableExitProfile::hasExitSite(v529, v530, 6))
        return 3;
      if (JSC::DFG::QueryableExitProfile::hasExitSite(v529, v530, 5))
        return 3;
      hasExitSite = JSC::DFG::QueryableExitProfile::hasExitSite(v529, v530, 1);
      if (v528 >= 3 && hasExitSite)
        return 3;
      v533 = JSC::DFG::ByteCodeParser::getArrayMode(v12, 0, v532);
      v10 = 3;
      if (v533 - 7 > 2)
        return v10;
      v540 = v533;
      if ((v533 & 0xF000000) != 0 || BYTE1(v533) - 3 > 2)
        return v10;
      v541 = *(_QWORD *)(v12 + 24);
      JSC::DFG::ByteCodeParser::currentNodeOrigin((JSC::DFG::ByteCodeParser *)&v2069, v12, v534, v535, v536, v537, v538, v539);
      v549 = (char)v2069;
      v550 = *(_QWORD *)(v541 + 32);
      v551 = (uint64_t *)((unint64_t)v2069 & 0xFFFFFFFF8);
      if ((v2069 & 1) != 0)
      {
        v2040 = *v551;
        if ((v2069 & 2) != 0
          || (v2041 = *(_DWORD *)(((unint64_t)v2069 & 0xFFFFFFFF8) + 8), v2041 == 0x3FFFFFFF)
          || v2041 == -1)
        {
          v2042 = 2;
        }
        else if (v2041 >> 28)
        {
          v2058 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v2058 = v2040;
          *(_DWORD *)(v2058 + 8) = v2041;
          v2042 = 1;
          v2040 = v2058;
        }
        else
        {
          v2042 = *v551;
          v2040 = 0;
        }
        v2043 = v2040 | v2042;
        v553 = (unint64_t *)(v2043 & 0xFFFFFFFF8);
        if ((v2043 & 1) != 0)
        {
          v552 = 0;
          v554 = *v553;
        }
        else
        {
          v552 = 1;
          v554 = (unint64_t)v553;
        }
      }
      else
      {
        v552 = 1;
        v553 = (unint64_t *)((unint64_t)v2069 & 0xFFFFFFFF8);
        v554 = (unint64_t)v2069 & 0xFFFFFFFF8;
      }
      if (v554)
        v550 = *(_QWORD *)(v554 + 8);
      v555 = *(_QWORD *)(v550 + 8);
      if ((v552 & 1) == 0 && v553)
        WTF::fastFree((unint64_t)v553, v542, v543, v544, v545, v546, v547, v548);
      if ((v549 & 1) != 0 && v551)
        WTF::fastFree((unint64_t)v551, v542, v543, v544, v545, v546, v547, v548);
      if ((v2070 & 1) != 0 && (v2070 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v2070 & 0xFFFFFFFF8, v542, v543, v544, v545, v546, v547, v548);
      v556 = *(_QWORD *)(v555 + 2304);
      if ((v556 & 1) != 0)
        v557 = (v556 >> 1) & 3;
      else
        v557 = *(unsigned __int8 *)(v556 + 4);
      if (v557 != 1)
        return 3;
      JSC::DFG::DesiredWatchpoints::addLazily((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 24) + 136), (JSC::InlineWatchpointSet *)(v555 + 2304), v543, v544, v545, v546, v547, v548);
      v564 = a1[2];
      if (**(_BYTE **)v564)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v564 + 1), **((_QWORD **)v564 + 2), **((_QWORD **)v564 + 3), **((unsigned int **)v564 + 4), v560, v561, v562, v563);
      **((_BYTE **)v564 + 5) = 1;
      **((_BYTE **)v564 + 6) = 0;
      v565 = (*(_DWORD *)a1[5] + 5);
      v566 = JSC::DFG::ByteCodeParser::get(v12, v565 | ((unint64_t)(v565 >> 31) << 32), v558, v559, v560, v561, v562, v563);
      JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, (unint64_t)v566, v567, v568, v569, v570, v571, v572);
      v573 = (*(_DWORD *)a1[5] + 6);
      v580 = JSC::DFG::ByteCodeParser::get(v12, v573 | ((unint64_t)(v573 >> 31) << 32), v574, v575, v576, v577, v578, v579);
      JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, (unint64_t)v580, v581, v582, v583, v584, v585, v586);
      if (*(int *)a1[1] >= 3)
      {
        v1941 = (*(_DWORD *)a1[5] + 7);
        v1942 = JSC::DFG::ByteCodeParser::get(v12, v1941 | ((unint64_t)(v1941 >> 31) << 32), v587, v588, v589, v590, v591, v592);
        JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, (unint64_t)v1942, v1943, v1944, v1945, v1946, v1947, v1948);
      }
      JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, 0, v587, v588, v589, v590, v591, v592);
      v37 = JSC::DFG::ByteCodeParser::addToGraph(v12, 0xD7u, v540, 0, v593, v594, v595, v596);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x198340AB4);
      }
      goto LABEL_10;
    case 0x18u:
    case 0x19u:
    case 0x1Au:
      goto LABEL_782;
    case 0x1Bu:
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      v1304 = a1[3];
      if (*(int *)a1[1] > 1)
      {
        v1481 = (*(_DWORD *)a1[5] + 6);
        v1312 = JSC::DFG::ByteCodeParser::get(v12, v1481 | ((unint64_t)(v1481 >> 31) << 32), v1475, v1476, v1477, v1478, v1479, v1480);
        v1316 = v12;
        v1317 = 313;
        goto LABEL_548;
      }
      v1818 = (uint64_t *)v12;
      v1819 = 6;
      goto LABEL_760;
    case 0x1Cu:
      if (*(int *)a1[1] < 2)
        return v10;
      v78 = (uint64_t *)(*(_QWORD *)(v12 + 280) + 32);
      v79 = *(_DWORD *)(v12 + 40);
      if (JSC::DFG::QueryableExitProfile::hasExitSite(v78, v79, 22)
        || JSC::DFG::QueryableExitProfile::hasExitSite(v78, v79, 1))
      {
        return 3;
      }
      v86 = a1[2];
      if (**(_BYTE **)v86)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v86 + 1), **((_QWORD **)v86 + 2), **((_QWORD **)v86 + 3), **((unsigned int **)v86 + 4), v82, v83, v84, v85);
      **((_BYTE **)v86 + 5) = 1;
      **((_BYTE **)v86 + 6) = 0;
      v87 = *(_DWORD *)a1[5];
      v88 = (v87 + 6);
      v89 = JSC::DFG::ByteCodeParser::get(v12, (v87 + 5) | ((unint64_t)((v87 + 5) >> 31) << 32), v80, v81, v82, v83, v84, v85);
      v96 = JSC::DFG::ByteCodeParser::get(v12, v88 | ((unint64_t)(v88 >> 31) << 32), v90, v91, v92, v93, v94, v95);
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 227, 65541, (uint64_t)v89, (uint64_t)v96, 0, v97, v98);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x19833F4DCLL);
      }
      goto LABEL_10;
    case 0x1Du:
      if (*(int *)a1[1] < 2
        || JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(v12 + 280) + 32), *(_DWORD *)(v12 + 40), 1))
      {
        return v10;
      }
      v861 = a1[2];
      if (**(_BYTE **)v861)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v861 + 1), **((_QWORD **)v861 + 2), **((_QWORD **)v861 + 3), **((unsigned int **)v861 + 4), v857, v858, v859, v860);
      **((_BYTE **)v861 + 5) = 1;
      **((_BYTE **)v861 + 6) = 0;
      v862 = *(_DWORD *)a1[5];
      v863 = (v862 + 6);
      v864 = JSC::DFG::ByteCodeParser::get(v12, (v862 + 5) | ((unint64_t)((v862 + 5) >> 31) << 32), v855, v856, v857, v858, v859, v860);
      v871 = JSC::DFG::ByteCodeParser::get(v12, v863 | ((unint64_t)(v863 >> 31) << 32), v865, v866, v867, v868, v869, v870);
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 229, 65541, (uint64_t)v864, (uint64_t)v871, 0, v872, v873);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x1983418A4);
      }
      goto LABEL_10;
    case 0x1Eu:
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      v1379 = (*(_DWORD *)a1[5] + 5);
      v1386 = JSC::DFG::ByteCodeParser::get(v12, v1379 | ((unint64_t)(v1379 >> 31) << 32), v1380, v1381, v1382, v1383, v1384, v1385);
      v1304 = a1[3];
      v1388 = **a1;
      v1389 = v12;
      v1390 = 431;
      v1391 = 0;
      goto LABEL_570;
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
      v99 = a1[2];
      if (**(_BYTE **)v99)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v99 + 1), **((_QWORD **)v99 + 2), **((_QWORD **)v99 + 3), **((unsigned int **)v99 + 4), a5, a6, a7, a8);
      **((_BYTE **)v99 + 5) = 1;
      **((_BYTE **)v99 + 6) = 0;
      v100 = (*(_DWORD *)a1[5] + 5);
      v101 = JSC::DFG::ByteCodeParser::get(v12, v100 | ((unint64_t)(v100 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v52 = a1[3];
      v56 = JSC::DFG::ByteCodeParser::addToGraph(v12, 430, **a1, *(_QWORD *)a1[9], (uint64_t)v101, 0, 0, v102);
      v43 = *(unsigned __int8 **)v52;
      if (**(_BYTE **)v52)
      {
        __break(0xC471u);
        JUMPOUT(0x19833F58CLL);
      }
      goto LABEL_21;
    case 0x31u:
      if (JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(v12 + 280) + 32), *(_DWORD *)(v12 + 40), 1)|| *(int *)a1[1] < 2)
      {
        return v10;
      }
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], v1691, v1692, v1693, v1694, v1695, v1696, v1697);
      v1698 = (*(_DWORD *)a1[5] + 5);
      v1705 = JSC::DFG::ByteCodeParser::get(v12, v1698 | ((unint64_t)(v1698 >> 31) << 32), v1699, v1700, v1701, v1702, v1703, v1704);
      v1706 = (*(_DWORD *)a1[5] + 6);
      v1713 = JSC::DFG::ByteCodeParser::get(v12, v1706 | ((unint64_t)(v1706 >> 31) << 32), v1707, v1708, v1709, v1710, v1711, v1712);
      v1374 = a1[3];
      v1378 = JSC::DFG::ByteCodeParser::addToGraph(v12, 432, 0, 0, (uint64_t)v1705, (uint64_t)v1713, 0, v1714);
      goto LABEL_568;
    case 0x32u:
      if (*(_DWORD *)a1[1] != 2)
        return v10;
      v622 = a1[2];
      if (**(_BYTE **)v622)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v622 + 1), **((_QWORD **)v622 + 2), **((_QWORD **)v622 + 3), **((unsigned int **)v622 + 4), a5, a6, a7, a8);
      **((_BYTE **)v622 + 5) = 1;
      **((_BYTE **)v622 + 6) = 0;
      v623 = (*(_DWORD *)a1[5] + 6);
      v624 = JSC::DFG::ByteCodeParser::get(v12, v623 | ((unint64_t)(v623 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 230, (uint64_t)v624, 0, 0, v625, v626, v627);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x198340D14);
      }
      goto LABEL_10;
    case 0x33u:
      if (*(int *)a1[1] < 2)
        return v10;
      v761 = a1[2];
      if (**(_BYTE **)v761)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v761 + 1), **((_QWORD **)v761 + 2), **((_QWORD **)v761 + 3), **((unsigned int **)v761 + 4), a5, a6, a7, a8);
      **((_BYTE **)v761 + 5) = 1;
      **((_BYTE **)v761 + 6) = 0;
      v52 = a1[3];
      v762 = (*(_DWORD *)a1[5] + 6);
      v763 = JSC::DFG::ByteCodeParser::get(v12, v762 | ((unint64_t)(v762 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v56 = JSC::DFG::ByteCodeParser::addToGraph(v12, 305, (uint64_t)v763, 0, 0, v764, v765, v766);
      v43 = *(unsigned __int8 **)v52;
      if (**(_BYTE **)v52)
      {
        __break(0xC471u);
        JUMPOUT(0x198341378);
      }
      goto LABEL_21;
    case 0x34u:
      v292 = a1[2];
      if (*(int *)a1[1] <= 2)
        goto LABEL_668;
      if (**(_BYTE **)v292)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v292 + 1), **((_QWORD **)v292 + 2), **((_QWORD **)v292 + 3), **((unsigned int **)v292 + 4), a5, a6, a7, a8);
      **((_BYTE **)v292 + 5) = 1;
      **((_BYTE **)v292 + 6) = 0;
      v767 = *(_DWORD *)a1[5];
      v768 = (v767 + 7);
      v52 = a1[3];
      v769 = JSC::DFG::ByteCodeParser::get(v12, (v767 + 6) | ((unint64_t)((v767 + 6) >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v776 = JSC::DFG::ByteCodeParser::get(v12, v768 | ((unint64_t)(v768 >> 31) << 32), v770, v771, v772, v773, v774, v775);
      v56 = JSC::DFG::ByteCodeParser::addToGraph(v12, 74, (uint64_t)v769, (uint64_t)v776, 0, v777, v778, v779);
      v43 = *(unsigned __int8 **)v52;
      if (**(_BYTE **)v52)
      {
        __break(0xC471u);
        JUMPOUT(0x19834143CLL);
      }
      goto LABEL_21;
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x60u:
      v292 = a1[2];
      if (*(_DWORD *)a1[1] == 1)
      {
LABEL_668:
        v1764 = v292;
        goto LABEL_669;
      }
      if (**(_BYTE **)v292)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v292 + 1), **((_QWORD **)v292 + 2), **((_QWORD **)v292 + 3), **((unsigned int **)v292 + 4), a5, a6, a7, a8);
      **((_BYTE **)v292 + 5) = 1;
      **((_BYTE **)v292 + 6) = 0;
      v293 = (*(_DWORD *)a1[5] + 6);
      v294 = JSC::DFG::ByteCodeParser::get(v12, v293 | ((unint64_t)(v293 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      if (**a1 - 53 >= 3)
        v296 = 79;
      else
        v296 = 0x4C004E004DuLL >> (16 * (**a1 - 53));
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, v296, 0, *(_QWORD *)a1[9], (uint64_t)v294, 0, 0, v295);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x19833FDE4);
      }
      goto LABEL_10;
    case 0x3Eu:
      if (*(int *)a1[1] < 2)
        return v10;
      v925 = a1[2];
      if (**(_BYTE **)v925)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v925 + 1), **((_QWORD **)v925 + 2), **((_QWORD **)v925 + 3), **((unsigned int **)v925 + 4), a5, a6, a7, a8);
      **((_BYTE **)v925 + 5) = 1;
      **((_BYTE **)v925 + 6) = 0;
      v926 = *(_QWORD *)a1[9];
      v927 = JSC::DFG::ByteCodeParser::addToGraph(v12, 169, *(_QWORD *)a1[10], 0, 0, a6, a7, a8);
      v928 = (*(_DWORD *)a1[5] + 5);
      v935 = JSC::DFG::ByteCodeParser::get(v12, v928 | ((unint64_t)(v928 >> 31) << 32), v929, v930, v931, v932, v933, v934);
      v936 = (*(_DWORD *)a1[5] + 6);
      v943 = JSC::DFG::ByteCodeParser::get(v12, v936 | ((unint64_t)(v936 >> 31) << 32), v937, v938, v939, v940, v941, v942);
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 217, 0, v926, (uint64_t)v927, (uint64_t)v935, (uint64_t)v943, v944);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x198341C1CLL);
      }
      goto LABEL_10;
    case 0x3Fu:
    case 0x40u:
      if (*(int *)a1[1] < 2)
        return v10;
      if (v9 != 63)
        goto LABEL_95;
      v149 = *(_QWORD *)(v12 + 280);
      if (JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(v149 + 32), *(_DWORD *)(v12 + 40), 2))
        return 3;
      v155 = *(_QWORD *)(*(_QWORD *)(v149 + 8) + 8);
      v156 = *(_DWORD *)(v155 + 976);
      if (v156)
        v157 = 16 * (v156 & 0xFFFFFFFE);
      else
        v157 = 0;
      JSC::DFG::Graph::registerStructure(*(_QWORD *)(v12 + 24), v157, (int *)&v2069, v150, v151, v152, v153, v154);
      v164 = JSC::DFG::Graph::freeze(*(_QWORD *)(v12 + 24), *(_QWORD *)(v157 + 48), v158, v159, v160, v161, v162, v163);
      v168 = *(_QWORD *)(v155 + 1960);
      if (*(_DWORD *)v168 <= 0xB1u)
      {
        __break(0xC471u);
        JUMPOUT(0x198344464);
      }
      v169 = *((_QWORD *)v164 + 1);
      v170 = *(_QWORD *)(v168 + 1424);
      if ((v170 & 1) != 0)
      {
        v1949 = *(uint64_t (**)(WTF **))(v170 & 0xFFFFFFFFFFFFFFFCLL);
        v1950 = (WTF **)(v155 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v155 & 8) != 0)
          v1950 = (WTF **)(v155 - 16);
        v2069 = *v1950;
        v2070 = v155;
        v2071 = v168 + 1424;
        v170 = v1949(&v2069);
      }
      v171 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)v12 + 41952) + 1264);
      v2069 = 0;
      v172 = *(_QWORD *)(v157 + 48) == 2 ? 0 : *(_QWORD *)(v157 + 48);
      if (!JSC::DFG::Graph::getRegExpPrototypeProperty(*(_QWORD *)(v12 + 24), v172, v169, v171, (uint64_t *)&v2069, v165, v166, v167)|| v2069 != (WTF *)v170)
      {
        return 3;
      }
      v180 = (*(_DWORD *)a1[5] + 5);
      v181 = (unint64_t)JSC::DFG::ByteCodeParser::get(v12, v180 | ((unint64_t)(v180 >> 31) << 32), v173, v174, v175, v176, v177, v178) & 0xFF00FFFFFFFFFFFFLL;
      JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 24, v181 | 0x40000000000000, 0, 0, v182, v183, v184);
      v185 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 41952) + 1264);
      JSC::DFG::DesiredIdentifiers::ensure((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 24) + 240), v185, v186, v187, v188, v189, v190, v191);
      v194 = JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 109, v185 | 1, 4, v181 | 0x20000000000000, 0, v192, v193);
      v201 = *(_QWORD *)(v155 + 1960);
      if (*(_DWORD *)v201 <= 0xB1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1983444C0);
      }
      v202 = v194;
      v203 = *(_QWORD *)(v12 + 24);
      v204 = *(_QWORD *)(v201 + 1424);
      if ((v204 & 1) != 0)
      {
        v1951 = v201 + 1424;
        v1952 = *(uint64_t (**)(WTF **))(v204 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v155 & 8) != 0)
          v1953 = (WTF **)(v155 - 16);
        else
          v1953 = (WTF **)(v155 & 0xFFFFFFFFFFFFC000 | 8);
        v2069 = *v1953;
        v2070 = v155;
        v2071 = v1951;
        v204 = v1952(&v2069);
      }
      v205 = JSC::DFG::Graph::freeze(v203, v204, v195, v196, v197, v198, v199, v200);
      v206 = *(_QWORD *)(v12 + 24);
      JSC::DFG::ByteCodeParser::currentNodeOrigin((JSC::DFG::ByteCodeParser *)&v2069, v12, v207, v208, v209, v210, v211, v212);
      v221 = (JSC::DFG::Node *)JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge,JSC::DFG::Edge>(v206, 182, (uint64_t)&v2069, (uint64_t)v205, (unint64_t)v202 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000, 0, 0, v213);
      if ((v2070 & 1) != 0 && (v2070 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v2070 & 0xFFFFFFFF8, v214, (uint64_t)v215, v216, v217, v218, v219, v220);
      if ((v2069 & 1) != 0 && ((unint64_t)v2069 & 0xFFFFFFFF8) != 0)
        WTF::fastFree((unint64_t)v2069 & 0xFFFFFFFF8, v214, (uint64_t)v215, v216, v217, v218, v219, v220);
      JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, v221, v215, v216, v217, v218, v219, v220);
LABEL_95:
      v222 = a1[2];
      if (**(_BYTE **)v222)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v222 + 1), **((_QWORD **)v222 + 2), **((_QWORD **)v222 + 3), **((unsigned int **)v222 + 4), a5, a6, a7, a8);
      **((_BYTE **)v222 + 5) = 1;
      **((_BYTE **)v222 + 6) = 0;
      v223 = (*(_DWORD *)a1[5] + 5);
      v224 = JSC::DFG::ByteCodeParser::get(v12, v223 | ((unint64_t)(v223 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v225 = *(_QWORD *)a1[9];
      v229 = JSC::DFG::ByteCodeParser::addToGraph(v12, 169, *(_QWORD *)a1[10], 0, 0, v226, v227, v228);
      v230 = (*(_DWORD *)a1[5] + 6);
      v237 = JSC::DFG::ByteCodeParser::get(v12, v230 | ((unint64_t)(v230 >> 31) << 32), v231, v232, v233, v234, v235, v236);
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 219, 0, v225, (uint64_t)v229, (uint64_t)v224, (uint64_t)v237, v238);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x19833FA80);
      }
      goto LABEL_10;
    case 0x41u:
      if (*(_DWORD *)a1[1] != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198344B04);
      }
      v1005 = a1[2];
      if (**(_BYTE **)v1005)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v1005 + 1), **((_QWORD **)v1005 + 2), **((_QWORD **)v1005 + 3), **((unsigned int **)v1005 + 4), a5, a6, a7, a8);
      **((_BYTE **)v1005 + 5) = 1;
      **((_BYTE **)v1005 + 6) = 0;
      v1006 = *(_QWORD *)a1[9];
      v1007 = JSC::DFG::ByteCodeParser::addToGraph(v12, 169, *(_QWORD *)a1[10], 0, 0, a6, a7, a8);
      v1008 = (*(_DWORD *)a1[5] + 5);
      v1015 = JSC::DFG::ByteCodeParser::get(v12, v1008 | ((unint64_t)(v1008 >> 31) << 32), v1009, v1010, v1011, v1012, v1013, v1014);
      v1016 = (*(_DWORD *)a1[5] + 6);
      v1023 = JSC::DFG::ByteCodeParser::get(v12, v1016 | ((unint64_t)(v1016 >> 31) << 32), v1017, v1018, v1019, v1020, v1021, v1022);
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 221, 0, v1006, (uint64_t)v1007, (uint64_t)v1015, (uint64_t)v1023, v1024);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x198341FC8);
      }
      goto LABEL_10;
    case 0x42u:
      if (*(_DWORD *)a1[1] != 3)
        return v10;
      v273 = a1[2];
      if (**(_BYTE **)v273)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v273 + 1), **((_QWORD **)v273 + 2), **((_QWORD **)v273 + 3), **((unsigned int **)v273 + 4), a5, a6, a7, a8);
      **((_BYTE **)v273 + 5) = 1;
      **((_BYTE **)v273 + 6) = 0;
      v274 = (*(_DWORD *)a1[5] + 6);
      v275 = JSC::DFG::ByteCodeParser::get(v12, v274 | ((unint64_t)(v274 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v277 = (unint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 321, 0xFFFFFFFFLL, 0, (uint64_t)v275, 0, 0, v276);
      *(_BYTE *)(v12 + 64) = 1;
      JSC::DFG::ByteCodeParser::addToGraph(v12, 22, 0, 0, 0, v278, v279, v280);
      v281 = (*(_DWORD *)a1[5] + 7);
      v288 = JSC::DFG::ByteCodeParser::get(v12, v281 | ((unint64_t)(v281 >> 31) << 32), v282, v283, v284, v285, v286, v287);
      JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 195, v277 & 0xFF00FFFFFFFFFFFFLL | 0x24000000000000, (unint64_t)v288 & 0xFF00FFFFFFFFFFFFLL, 0, v289, v290, v291);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x19833FCFCLL);
      }
      goto LABEL_170;
    case 0x43u:
      if (*(_DWORD *)a1[1] != 2)
        return v10;
      v755 = a1[2];
      if (**(_BYTE **)v755)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v755 + 1), **((_QWORD **)v755 + 2), **((_QWORD **)v755 + 3), **((unsigned int **)v755 + 4), a5, a6, a7, a8);
      **((_BYTE **)v755 + 5) = 1;
      **((_BYTE **)v755 + 6) = 0;
      v52 = a1[3];
      v756 = (*(_DWORD *)a1[5] + 6);
      v757 = JSC::DFG::ByteCodeParser::get(v12, v756 | ((unint64_t)(v756 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v56 = JSC::DFG::ByteCodeParser::addToGraph(v12, 196, (uint64_t)v757, 0, 0, v758, v759, v760);
      v43 = *(unsigned __int8 **)v52;
      if (**(_BYTE **)v52)
      {
        __break(0xC471u);
        JUMPOUT(0x1983412C8);
      }
      goto LABEL_21;
    case 0x44u:
      if (*(int *)a1[1] < 2)
        return v10;
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      v1304 = a1[3];
      v1811 = (*(_DWORD *)a1[5] + 6);
      v1312 = JSC::DFG::ByteCodeParser::get(v12, v1811 | ((unint64_t)(v1811 >> 31) << 32), v1812, v1813, v1814, v1815, v1816, v1817);
      v1316 = v12;
      v1317 = 198;
      goto LABEL_548;
    case 0x45u:
      if (*(int *)a1[1] < 2)
        return v10;
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      v1304 = a1[3];
      v1715 = (*(_DWORD *)a1[5] + 6);
      v1312 = JSC::DFG::ByteCodeParser::get(v12, v1715 | ((unint64_t)(v1715 >> 31) << 32), v1716, v1717, v1718, v1719, v1720, v1721);
      v1316 = v12;
      v1317 = 199;
      goto LABEL_548;
    case 0x46u:
      if (*(int *)a1[1] < 2)
        return v10;
      v1177 = a1[2];
      if (**(_BYTE **)v1177)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v1177 + 1), **((_QWORD **)v1177 + 2), **((_QWORD **)v1177 + 3), **((unsigned int **)v1177 + 4), a5, a6, a7, a8);
      **((_BYTE **)v1177 + 5) = 1;
      **((_BYTE **)v1177 + 6) = 0;
      v453 = a1[3];
      v1178 = *(_QWORD *)a1[9];
      v1179 = (*(_DWORD *)a1[5] + 6);
      v1180 = JSC::DFG::ByteCodeParser::get(v12, v1179 | ((unint64_t)(v1179 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v458 = JSC::DFG::ByteCodeParser::addToGraph(v12, 194, 0, v1178, (uint64_t)v1180, 0, 0, v1181);
      v43 = *(unsigned __int8 **)v453;
      if (**(_BYTE **)v453)
      {
        __break(0xC471u);
        JUMPOUT(0x198342984);
      }
      goto LABEL_179;
    case 0x47u:
      if (*(int *)a1[1] < 3)
        return v10;
      v735 = a1[2];
      if (**(_BYTE **)v735)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v735 + 1), **((_QWORD **)v735 + 2), **((_QWORD **)v735 + 3), **((unsigned int **)v735 + 4), a5, a6, a7, a8);
      **((_BYTE **)v735 + 5) = 1;
      **((_BYTE **)v735 + 6) = 0;
      v453 = a1[3];
      v736 = (*(_DWORD *)a1[5] + 6);
      v737 = JSC::DFG::ByteCodeParser::get(v12, v736 | ((unint64_t)(v736 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v738 = (*(_DWORD *)a1[5] + 7);
      v745 = JSC::DFG::ByteCodeParser::get(v12, v738 | ((unint64_t)(v738 >> 31) << 32), v739, v740, v741, v742, v743, v744);
      v458 = JSC::DFG::ByteCodeParser::addToGraph(v12, 240, (uint64_t)v737, (uint64_t)v745, 0, v746, v747, v748);
      v43 = *(unsigned __int8 **)v453;
      if (**(_BYTE **)v453)
      {
        __break(0xC471u);
        JUMPOUT(0x198341168);
      }
      goto LABEL_179;
    case 0x48u:
      if (*(int *)a1[1] < 2)
        return v10;
      v749 = a1[2];
      if (**(_BYTE **)v749)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v749 + 1), **((_QWORD **)v749 + 2), **((_QWORD **)v749 + 3), **((unsigned int **)v749 + 4), a5, a6, a7, a8);
      **((_BYTE **)v749 + 5) = 1;
      **((_BYTE **)v749 + 6) = 0;
      v52 = a1[3];
      v750 = (*(_DWORD *)a1[5] + 6);
      v751 = JSC::DFG::ByteCodeParser::get(v12, v750 | ((unint64_t)(v750 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v56 = JSC::DFG::ByteCodeParser::addToGraph(v12, 197, (uint64_t)v751, 0, 0, v752, v753, v754);
      v43 = *(unsigned __int8 **)v52;
      if (**(_BYTE **)v52)
      {
        __break(0xC471u);
        JUMPOUT(0x198341218);
      }
      goto LABEL_21;
    case 0x49u:
      v522 = a1[2];
      if (**(_BYTE **)v522)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v522 + 1), **((_QWORD **)v522 + 2), **((_QWORD **)v522 + 3), **((unsigned int **)v522 + 4), a5, a6, a7, a8);
      **((_BYTE **)v522 + 5) = 1;
      **((_BYTE **)v522 + 6) = 0;
      v52 = a1[3];
      v523 = (*(_DWORD *)a1[5] + 5);
      v524 = JSC::DFG::ByteCodeParser::get(v12, v523 | ((unint64_t)(v523 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v56 = JSC::DFG::ByteCodeParser::addToGraph(v12, 200, (uint64_t)v524, 0, 0, v525, v526, v527);
      v43 = *(unsigned __int8 **)v52;
      if (**(_BYTE **)v52)
      {
        __break(0xC471u);
        JUMPOUT(0x1983408A8);
      }
      goto LABEL_21;
    case 0x4Au:
      if (*(int *)a1[1] < 2)
        return v10;
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      v1304 = a1[3];
      v1827 = *(_QWORD *)a1[9];
      v1828 = (*(_DWORD *)a1[5] + 6);
      v1835 = JSC::DFG::ByteCodeParser::get(v12, v1828 | ((unint64_t)(v1828 >> 31) << 32), v1829, v1830, v1831, v1832, v1833, v1834);
      v1318 = JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 194, 0, v1827, (unint64_t)v1835 & 0xFF00FFFFFFFFFFFFLL | 0x2C000000000000, 0, v1836, v1837);
      goto LABEL_549;
    case 0x4Bu:
      if (*(int *)a1[1] < 2)
        return v10;
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      v1304 = a1[3];
      v1875 = (*(_DWORD *)a1[5] + 6);
      v1312 = JSC::DFG::ByteCodeParser::get(v12, v1875 | ((unint64_t)(v1875 >> 31) << 32), v1876, v1877, v1878, v1879, v1880, v1881);
      v1316 = v12;
      v1317 = 201;
      goto LABEL_548;
    case 0x4Cu:
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      v1304 = a1[3];
      if (*(int *)a1[1] <= 1)
      {
        v1819 = *(_QWORD *)(*(_QWORD *)v12 + 41968);
        v1818 = (uint64_t *)v12;
        goto LABEL_760;
      }
      v2039 = (*(_DWORD *)a1[5] + 6);
      v1312 = JSC::DFG::ByteCodeParser::get(v12, v2039 | ((unint64_t)(v2039 >> 31) << 32), v1475, v1476, v1477, v1478, v1479, v1480);
      v1316 = v12;
      v1317 = 325;
LABEL_548:
      v1318 = JSC::DFG::ByteCodeParser::addToGraph(v1316, v1317, (uint64_t)v1312, 0, 0, v1313, v1314, v1315);
      goto LABEL_549;
    case 0x4Du:
      if (*(int *)a1[1] < 2)
        return v10;
      v1392 = (uint64_t *)(*(_QWORD *)(v12 + 280) + 32);
      v1393 = *(_DWORD *)(v12 + 40);
      if (JSC::DFG::QueryableExitProfile::hasExitSite(v1392, v1393, 22)
        || JSC::DFG::QueryableExitProfile::hasExitSite(v1392, v1393, 1))
      {
        return 3;
      }
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], v1394, v1395, v1396, v1397, v1398, v1399, v1400);
      v1401 = *(_DWORD *)a1[5];
      v1402 = (v1401 + 6);
      v1409 = JSC::DFG::ByteCodeParser::get(v12, (v1401 + 5) | ((unint64_t)((v1401 + 5) >> 31) << 32), v1403, v1404, v1405, v1406, v1407, v1408);
      v1331 = JSC::DFG::ByteCodeParser::get(v12, v1402 | ((unint64_t)(v1402 >> 31) << 32), v1410, v1411, v1412, v1413, v1414, v1415);
      v1327 = v12;
      v1328 = 228;
      v1329 = 65541;
      v1330 = (uint64_t)v1409;
      goto LABEL_551;
    case 0x4Eu:
      if (*(int *)a1[1] < 2)
        return v10;
      v496 = (uint64_t *)(*(_QWORD *)(v12 + 280) + 32);
      v497 = *(_DWORD *)(v12 + 40);
      if (JSC::DFG::QueryableExitProfile::hasExitSite(v496, v497, 22)
        || JSC::DFG::QueryableExitProfile::hasExitSite(v496, v497, 1))
      {
        return 3;
      }
      v504 = a1[2];
      if (**(_BYTE **)v504)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v504 + 1), **((_QWORD **)v504 + 2), **((_QWORD **)v504 + 3), **((unsigned int **)v504 + 4), v500, v501, v502, v503);
      **((_BYTE **)v504 + 5) = 1;
      **((_BYTE **)v504 + 6) = 0;
      v505 = (*(_DWORD *)a1[5] + 5);
      v506 = JSC::DFG::ByteCodeParser::get(v12, v505 | ((unint64_t)(v505 >> 31) << 32), v498, v499, v500, v501, v502, v503);
      v507 = (*(_DWORD *)a1[5] + 6);
      v520 = JSC::DFG::ByteCodeParser::get(v12, v507 | ((unint64_t)(v507 >> 31) << 32), v508, v509, v510, v511, v512, v513);
      if (*(_DWORD *)a1[1] == 2)
      {
        v521 = 0;
      }
      else
      {
        v1512 = (*(_DWORD *)a1[5] + 7);
        v521 = JSC::DFG::ByteCodeParser::get(v12, v1512 | ((unint64_t)(v1512 >> 31) << 32), v514, v515, v516, v517, v518, v519);
      }
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 226, 65541, (uint64_t)v506, (uint64_t)v520, (uint64_t)v521, v518, v519);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x198340808);
      }
      goto LABEL_10;
    case 0x4Fu:
      if (*(_DWORD *)a1[1] != 2
        || JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(v12 + 280) + 32), *(_DWORD *)(v12 + 40), 1))
      {
        return v10;
      }
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], v1490, v1491, v1492, v1493, v1494, v1495, v1496);
      v1497 = *(_DWORD *)a1[5];
      v1498 = (v1497 + 6);
      v1374 = a1[3];
      v1505 = JSC::DFG::ByteCodeParser::get(v12, (v1497 + 5) | ((unint64_t)((v1497 + 5) >> 31) << 32), v1499, v1500, v1501, v1502, v1503, v1504);
      v1377 = JSC::DFG::ByteCodeParser::get(v12, v1498 | ((unint64_t)(v1498 >> 31) << 32), v1506, v1507, v1508, v1509, v1510, v1511);
      v1375 = v12;
      v1376 = 414;
      goto LABEL_594;
    case 0x50u:
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      v1363 = (*(_DWORD *)a1[5] + 5);
      v1370 = JSC::DFG::ByteCodeParser::get(v12, v1363 | ((unint64_t)(v1363 >> 31) << 32), v1364, v1365, v1366, v1367, v1368, v1369);
      v1374 = a1[3];
      v1375 = v12;
      v1376 = 411;
      goto LABEL_566;
    case 0x51u:
      if (*(int *)a1[1] < 3)
        return v10;
      v239 = *(_QWORD *)(v12 + 280);
      v240 = *(_DWORD *)(v12 + 40);
      if (JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(v239 + 32), v240, 1)
        || JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(v239 + 32), v240, 2))
      {
        return 3;
      }
      v247 = *(_QWORD *)(*(_QWORD *)(v239 + 8) + 8);
      v248 = *(_QWORD *)(v247 + 2248);
      v249 = (v248 & 1) != 0 ? (v248 >> 1) & 3 : *(unsigned __int8 *)(v248 + 4);
      if (v249 == 2)
        return 3;
      v250 = *(_QWORD *)(v247 + 2256);
      v251 = (v250 & 1) != 0 ? (v250 >> 1) & 3 : *(unsigned __int8 *)(v250 + 4);
      if (v251 == 2)
        return 3;
      v252 = a1[2];
      if (**(_BYTE **)v252)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v252 + 1), **((_QWORD **)v252 + 2), **((_QWORD **)v252 + 3), **((unsigned int **)v252 + 4), v243, v244, v245, v246);
      **((_BYTE **)v252 + 5) = 1;
      **((_BYTE **)v252 + 6) = 0;
      v253 = *(_QWORD *)a1[9];
      v254 = (*(_DWORD *)a1[5] + 5);
      v255 = JSC::DFG::ByteCodeParser::get(v12, v254 | ((unint64_t)(v254 >> 31) << 32), v241, v242, v243, v244, v245, v246);
      v256 = (*(_DWORD *)a1[5] + 6);
      v263 = JSC::DFG::ByteCodeParser::get(v12, v256 | ((unint64_t)(v256 >> 31) << 32), v257, v258, v259, v260, v261, v262);
      v264 = (*(_DWORD *)a1[5] + 7);
      v271 = JSC::DFG::ByteCodeParser::get(v12, v264 | ((unint64_t)(v264 >> 31) << 32), v265, v266, v267, v268, v269, v270);
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 223, 0, v253, (uint64_t)v255, (uint64_t)v263, (uint64_t)v271, v272);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x19833FBE4);
      }
      goto LABEL_10;
    case 0x52u:
      if (*(int *)a1[1] < 3)
        return v10;
      v945 = a1[2];
      if (**(_BYTE **)v945)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v945 + 1), **((_QWORD **)v945 + 2), **((_QWORD **)v945 + 3), **((unsigned int **)v945 + 4), a5, a6, a7, a8);
      **((_BYTE **)v945 + 5) = 1;
      **((_BYTE **)v945 + 6) = 0;
      v946 = *(_QWORD *)a1[9];
      v947 = (*(_DWORD *)a1[5] + 5);
      v948 = JSC::DFG::ByteCodeParser::get(v12, v947 | ((unint64_t)(v947 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v949 = (*(_DWORD *)a1[5] + 6);
      v956 = JSC::DFG::ByteCodeParser::get(v12, v949 | ((unint64_t)(v949 >> 31) << 32), v950, v951, v952, v953, v954, v955);
      v957 = (*(_DWORD *)a1[5] + 7);
      v964 = JSC::DFG::ByteCodeParser::get(v12, v957 | ((unint64_t)(v957 >> 31) << 32), v958, v959, v960, v961, v962, v963);
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 224, 0, v946, (uint64_t)v948, (uint64_t)v956, (uint64_t)v964, v965);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x198341D1CLL);
      }
      goto LABEL_10;
    case 0x53u:
      if (*(int *)a1[1] < 3)
        return v10;
      v1182 = a1[2];
      if (**(_BYTE **)v1182)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v1182 + 1), **((_QWORD **)v1182 + 2), **((_QWORD **)v1182 + 3), **((unsigned int **)v1182 + 4), a5, a6, a7, a8);
      **((_BYTE **)v1182 + 5) = 1;
      **((_BYTE **)v1182 + 6) = 0;
      v1183 = *(_QWORD *)a1[9];
      v1184 = (*(_DWORD *)a1[5] + 5);
      v1185 = JSC::DFG::ByteCodeParser::get(v12, v1184 | ((unint64_t)(v1184 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v1186 = (*(_DWORD *)a1[5] + 6);
      v1193 = JSC::DFG::ByteCodeParser::get(v12, v1186 | ((unint64_t)(v1186 >> 31) << 32), v1187, v1188, v1189, v1190, v1191, v1192);
      v1194 = (*(_DWORD *)a1[5] + 7);
      v1201 = JSC::DFG::ByteCodeParser::get(v12, v1194 | ((unint64_t)(v1194 >> 31) << 32), v1195, v1196, v1197, v1198, v1199, v1200);
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 225, 0, v1183, (uint64_t)v1185, (uint64_t)v1193, (uint64_t)v1201, v1202);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x198342AACLL);
      }
      goto LABEL_10;
    case 0x54u:
    case 0x55u:
      if (*(int *)a1[1] < 2
        || JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(v12 + 280) + 32), *(_DWORD *)(v12 + 40), 1))
      {
        return v10;
      }
      v109 = a1[2];
      if (**(_BYTE **)v109)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v109 + 1), **((_QWORD **)v109 + 2), **((_QWORD **)v109 + 3), **((unsigned int **)v109 + 4), v105, v106, v107, v108);
      **((_BYTE **)v109 + 5) = 1;
      **((_BYTE **)v109 + 6) = 0;
      v110 = (*(_DWORD *)a1[5] + 5);
      v111 = JSC::DFG::ByteCodeParser::get(v12, v110 | ((unint64_t)(v110 >> 31) << 32), v103, v104, v105, v106, v107, v108);
      v112 = (*(_DWORD *)a1[5] + 6);
      v125 = JSC::DFG::ByteCodeParser::get(v12, v112 | ((unint64_t)(v112 >> 31) << 32), v113, v114, v115, v116, v117, v118);
      if (*(int *)a1[1] < 3)
      {
        v127 = 0;
      }
      else
      {
        v126 = (*(_DWORD *)a1[5] + 7);
        v127 = JSC::DFG::ByteCodeParser::get(v12, v126 | ((unint64_t)(v126 >> 31) << 32), v119, v120, v121, v122, v123, v124);
      }
      if (**a1 == 85)
        v128 = 413;
      else
        v128 = 412;
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, v128, (uint64_t)v111, (uint64_t)v125, (uint64_t)v127, v122, v123, v124);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x19833F6B4);
      }
      goto LABEL_10;
    case 0x56u:
      if (JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(v12 + 280) + 32), *(_DWORD *)(v12 + 40), 1))
      {
        return v10;
      }
      v484 = a1[2];
      if (**(_BYTE **)v484)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v484 + 1), **((_QWORD **)v484 + 2), **((_QWORD **)v484 + 3), **((unsigned int **)v484 + 4), v480, v481, v482, v483);
      **((_BYTE **)v484 + 5) = 1;
      **((_BYTE **)v484 + 6) = 0;
      v485 = (*(_DWORD *)a1[5] + 5);
      v486 = JSC::DFG::ByteCodeParser::get(v12, v485 | ((unint64_t)(v485 >> 31) << 32), v478, v479, v480, v481, v482, v483);
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 415, (uint64_t)v486, 0, 0, v487, v488, v489);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x19834063CLL);
      }
      goto LABEL_10;
    case 0x57u:
      if (JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(v12 + 280) + 32), *(_DWORD *)(v12 + 40), 1))
      {
        return v10;
      }
      v608 = a1[2];
      if (**(_BYTE **)v608)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v608 + 1), **((_QWORD **)v608 + 2), **((_QWORD **)v608 + 3), **((unsigned int **)v608 + 4), v604, v605, v606, v607);
      **((_BYTE **)v608 + 5) = 1;
      **((_BYTE **)v608 + 6) = 0;
      v609 = (*(_DWORD *)a1[5] + 5);
      v616 = JSC::DFG::ByteCodeParser::get(v12, v609 | ((unint64_t)(v609 >> 31) << 32), v602, v603, v604, v605, v606, v607);
      if (*(_DWORD *)a1[1] != 1)
      {
        v617 = (*(_DWORD *)a1[5] + 6);
        v618 = JSC::DFG::ByteCodeParser::get(v12, v617 | ((unint64_t)(v617 >> 31) << 32), v610, v611, v612, v613, v614, v615);
        v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 327, (uint64_t)v616, (uint64_t)v618, 0, v619, v620, v621);
        v42 = a1[3];
        v43 = *(unsigned __int8 **)v42;
        if (**(_BYTE **)v42)
        {
          __break(0xC471u);
          JUMPOUT(0x198340C64);
        }
        goto LABEL_10;
      }
      v1327 = v12;
      v1328 = 328;
      v1329 = 10;
      v1330 = (uint64_t)v616;
      v1331 = 0;
LABEL_551:
      v1332 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v1327, v1328, v1329, v1330, (uint64_t)v1331, 0, v614, v615);
LABEL_552:
      v1325 = (_QWORD *)v1332;
      v1326 = (uint64_t)a1[3];
      goto LABEL_553;
    case 0x58u:
      if (*(int *)a1[1] < 2)
        return v10;
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      v1304 = a1[3];
      v1305 = (*(_DWORD *)a1[5] + 6);
      v1312 = JSC::DFG::ByteCodeParser::get(v12, v1305 | ((unint64_t)(v1305 >> 31) << 32), v1306, v1307, v1308, v1309, v1310, v1311);
      v1316 = v12;
      v1317 = 306;
      goto LABEL_548;
    case 0x59u:
      if (*(int *)a1[1] < 2)
        return v10;
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      v1513 = (*(_DWORD *)a1[5] + 6);
      v1347 = JSC::DFG::ByteCodeParser::get(v12, v1513 | ((unint64_t)(v1513 >> 31) << 32), v1514, v1515, v1516, v1517, v1518, v1519);
      v1351 = v12;
      v1352 = 307;
      goto LABEL_602;
    case 0x5Au:
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      v1304 = a1[3];
      if (*(int *)a1[1] > 1)
      {
        v2037 = *(_QWORD *)a1[9];
        v2038 = (*(_DWORD *)a1[5] + 6);
        v1386 = JSC::DFG::ByteCodeParser::get(v12, v2038 | ((unint64_t)(v2038 >> 31) << 32), v1475, v1476, v1477, v1478, v1479, v1480);
        v1389 = v12;
        v1390 = 326;
        v1388 = 0;
        v1391 = v2037;
LABEL_570:
        v1318 = JSC::DFG::ByteCodeParser::addToGraph(v1389, v1390, v1388, v1391, (uint64_t)v1386, 0, 0, v1387);
      }
      else
      {
        v1818 = (uint64_t *)v12;
        v1819 = 0xFFFE000000000000;
LABEL_760:
        v1318 = JSC::DFG::ByteCodeParser::jsConstant(v1818, v1819, v1475, v1476, v1477, v1478, v1479, v1480);
      }
LABEL_549:
      v1325 = v1318;
      v1326 = (uint64_t)v1304;
      goto LABEL_553;
    case 0x5Bu:
      if (*(int *)a1[1] < 3)
        return v10;
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      v1520 = *(_DWORD *)a1[5];
      v1521 = (v1520 + 7);
      v1505 = JSC::DFG::ByteCodeParser::get(v12, (v1520 + 6) | ((unint64_t)((v1520 + 6) >> 31) << 32), v1522, v1523, v1524, v1525, v1526, v1527);
      v1377 = JSC::DFG::ByteCodeParser::get(v12, v1521 | ((unint64_t)(v1521 >> 31) << 32), v1528, v1529, v1530, v1531, v1532, v1533);
      v1374 = a1[3];
      v1375 = v12;
      v1376 = 67;
LABEL_594:
      v1370 = v1505;
      goto LABEL_567;
    case 0x5Cu:
      v1025 = a1[2];
      if (**(_BYTE **)v1025)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v1025 + 1), **((_QWORD **)v1025 + 2), **((_QWORD **)v1025 + 3), **((unsigned int **)v1025 + 4), a5, a6, a7, a8);
      **((_BYTE **)v1025 + 5) = 1;
      **((_BYTE **)v1025 + 6) = 0;
      v1026 = a1[3];
      v1027 = JSC::DFG::ByteCodeParser::addToGraph(v12, 75, 0, 0, 0, a6, a7, a8);
      v43 = *(unsigned __int8 **)v1026;
      if (**(_BYTE **)v1026)
      {
        __break(0xC471u);
        JUMPOUT(0x198344B24);
      }
      goto LABEL_427;
    case 0x5Eu:
      v50 = a1[2];
      if (*(_DWORD *)a1[1] == 1)
        goto LABEL_676;
      if (**(_BYTE **)v50)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v50 + 1), **((_QWORD **)v50 + 2), **((_QWORD **)v50 + 3), **((unsigned int **)v50 + 4), a5, a6, a7, a8);
      **((_BYTE **)v50 + 5) = 1;
      **((_BYTE **)v50 + 6) = 0;
      v1123 = (*(_DWORD *)a1[5] + 6);
      v52 = a1[3];
      v1124 = *(_QWORD *)a1[9];
      v1125 = JSC::DFG::ByteCodeParser::get(v12, v1123 | ((unint64_t)(v1123 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v56 = JSC::DFG::ByteCodeParser::addToGraph(v12, 322, 0, v1124, (uint64_t)v1125, 0, 0, v1126);
      v43 = *(unsigned __int8 **)v52;
      if (**(_BYTE **)v52)
      {
        __break(0xC471u);
        JUMPOUT(0x198342590);
      }
      goto LABEL_21;
    case 0x5Fu:
      v50 = a1[2];
      if (*(_DWORD *)a1[1] != 1)
      {
        if (**(_BYTE **)v50)
          JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v50 + 1), **((_QWORD **)v50 + 2), **((_QWORD **)v50 + 3), **((unsigned int **)v50 + 4), a5, a6, a7, a8);
        **((_BYTE **)v50 + 5) = 1;
        **((_BYTE **)v50 + 6) = 0;
        v51 = (*(_DWORD *)a1[5] + 6);
        v52 = a1[3];
        v53 = *(_QWORD *)a1[9];
        v54 = JSC::DFG::ByteCodeParser::get(v12, v51 | ((unint64_t)(v51 >> 31) << 32), a3, a4, a5, a6, a7, a8);
        v56 = JSC::DFG::ByteCodeParser::addToGraph(v12, 323, 0, v53, (uint64_t)v54, 0, 0, v55);
        v43 = *(unsigned __int8 **)v52;
        if (**(_BYTE **)v52)
        {
          __break(0xC471u);
          JUMPOUT(0x198343D14);
        }
LABEL_21:
        v61 = (int *)*((_QWORD *)v52 + 1);
        v62 = *v61;
        if (v61[1] == 2)
        {
          if (v62 < 0)
            goto LABEL_15;
        }
        else if (v62 == 0x3FFFFFFF)
        {
          goto LABEL_15;
        }
        JSC::DFG::ByteCodeParser::set(*((_QWORD *)v52 + 2), *(_QWORD *)v61, (uint64_t)v56, 0, v57, v58, v59, v60);
        v43 = *(unsigned __int8 **)v52;
        goto LABEL_15;
      }
LABEL_676:
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(v50, a2, a3, a4, a5, a6, a7, a8);
      v1374 = a1[3];
      v1799 = (uint64_t *)v12;
      v1800 = 0xFFFE000000000000;
LABEL_731:
      v1378 = JSC::DFG::ByteCodeParser::jsConstant(v1799, v1800, v1793, v1794, v1795, v1796, v1797, v1798);
LABEL_568:
      v1325 = v1378;
      v1326 = (uint64_t)v1374;
LABEL_553:
      JSC::DFG::ByteCodeParser::handleIntrinsicCall<JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0>(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,JSC::Intrinsic,int,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,JSC::CodeSpecializationKind,unsigned long long,JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0 const&)::{lambda(JSC::DFG::Node *)#1}::operator()(v1326, (uint64_t)v1325, v1319, v1320, v1321, v1322, v1323, v1324);
      return 1;
    case 0x61u:
    case 0x62u:
    case 0x63u:
      v1761 = (uint64_t *)(*(_QWORD *)(v12 + 280) + 32);
      v1762 = *(_DWORD *)(v12 + 40);
      if (JSC::DFG::QueryableExitProfile::hasExitSite(v1761, v1762, 7)
        || JSC::DFG::QueryableExitProfile::hasExitSite(v1761, v1762, 1))
      {
        return 3;
      }
      v1963 = JSC::DFG::ByteCodeParser::getArrayMode(v12, 0, v1763);
      if (v1963 != 25)
      {
        v2062 = JSC::DFG::toTypedArrayType(v1963);
        v10 = 3;
        if (!v2062 || v2062 == 12)
          return v10;
      }
      if ((v1963 & 0x40000000) != 0)
        return 3;
      v1964 = (*(_DWORD *)a1[5] + 5);
      v1965 = JSC::DFG::ByteCodeParser::get(v12, v1964 | ((unint64_t)(v1964 >> 31) << 32), v1957, v1958, v1959, v1960, v1961, v1962);
      JSC::DFG::ByteCodeParser::addToGraph(v12, 140, v1963, (uint64_t)v1965, 0, 0, v1966, v1967);
      v1968 = (*(_DWORD *)a1[5] + 5);
      v1975 = JSC::DFG::ByteCodeParser::get(v12, v1968 | ((unint64_t)(v1968 >> 31) << 32), v1969, v1970, v1971, v1972, v1973, v1974);
      JSC::DFG::ByteCodeParser::addToGraph(v12, 144, (uint64_t)v1975, 0, 0, v1976, v1977, v1978);
LABEL_782:
      v1979 = *(_QWORD *)(v12 + 24);
      JSC::DFG::ByteCodeParser::currentNodeOrigin((JSC::DFG::ByteCodeParser *)&v2069, v12, a3, a4, a5, a6, a7, a8);
      v1987 = (char)v2069;
      v1988 = *(_QWORD *)(v1979 + 32);
      v1989 = (uint64_t *)((unint64_t)v2069 & 0xFFFFFFFF8);
      if ((v2069 & 1) != 0)
      {
        v2053 = *v1989;
        if ((v2069 & 2) != 0
          || ((v2054 = *(_DWORD *)(((unint64_t)v2069 & 0xFFFFFFFF8) + 8), v2054 != 0x3FFFFFFF)
            ? (v2055 = v2054 == -1)
            : (v2055 = 1),
              v2055))
        {
          v2056 = 2;
        }
        else if (v2054 >> 28)
        {
          v2061 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v2061 = v2053;
          *(_DWORD *)(v2061 + 8) = v2054;
          v2056 = 1;
          v2053 = v2061;
        }
        else
        {
          v2056 = *v1989;
          v2053 = 0;
        }
        v2057 = v2053 | v2056;
        v1991 = (unint64_t *)(v2057 & 0xFFFFFFFF8);
        if ((v2057 & 1) != 0)
        {
          v1990 = 0;
          v1992 = *v1991;
        }
        else
        {
          v1990 = 1;
          v1992 = (unint64_t)v1991;
        }
      }
      else
      {
        v1990 = 1;
        v1991 = (unint64_t *)((unint64_t)v2069 & 0xFFFFFFFF8);
        v1992 = (unint64_t)v2069 & 0xFFFFFFFF8;
      }
      if (v1992)
        v1988 = *(_QWORD *)(v1992 + 8);
      v1993 = *(_QWORD *)(v1988 + 8);
      if ((v1990 & 1) == 0 && v1991)
        WTF::fastFree((unint64_t)v1991, v1980, v1981, v1982, v1983, v1984, v1985, v1986);
      if ((v1987 & 1) != 0 && v1989)
        WTF::fastFree((unint64_t)v1989, v1980, v1981, v1982, v1983, v1984, v1985, v1986);
      if ((v2070 & 1) != 0 && (v2070 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v2070 & 0xFFFFFFFF8, v1980, v1981, v1982, v1983, v1984, v1985, v1986);
      v1994 = *(_QWORD *)a1[8];
      v10 = 3;
      if (!v1994 || *(_BYTE *)(v1994 + 5) != 26 || *(_QWORD *)(16 * (*(_DWORD *)v1994 & 0xFFFFFFFE) + 0x28) != v1993)
        return v10;
      v1995 = a1[2];
      if (**(_BYTE **)v1995)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v1995 + 1), **((_QWORD **)v1995 + 2), **((_QWORD **)v1995 + 3), **((unsigned int **)v1995 + 4), v1983, v1984, v1985, v1986);
      **((_BYTE **)v1995 + 5) = 1;
      **((_BYTE **)v1995 + 6) = 0;
      v1996 = **a1;
      v1997 = 0xFFFE000000000001;
      if (v1996 == 24)
        goto LABEL_795;
      if (**a1 <= 0x60u)
      {
        if (v1996 == 25)
          goto LABEL_810;
        if (v1996 != 26)
        {
LABEL_811:
          __break(0xC471u);
          JUMPOUT(0x19834483CLL);
        }
      }
      else
      {
        if (v1996 == 97)
          goto LABEL_795;
        if (v1996 != 99)
        {
          if (v1996 != 98)
            goto LABEL_811;
LABEL_810:
          v1997 = 0xFFFE000000000000;
LABEL_795:
          v1998 = JSC::DFG::ByteCodeParser::jsConstant((uint64_t *)v12, v1997, v1981, v1982, v1983, v1984, v1985, v1986);
          Prediction = JSC::DFG::ByteCodeParser::getPrediction((JSC::DFG::ByteCodeParser *)v12, v1999, v2000, v2001, v2002, v2003, v2004, v2005, v2006);
          v2008 = (*(_DWORD *)a1[5] + 5);
          v2015 = JSC::DFG::ByteCodeParser::get(v12, v2008 | ((unint64_t)(v2008 >> 31) << 32), v2009, v2010, v2011, v2012, v2013, v2014);
          v2017 = JSC::DFG::ByteCodeParser::addToGraph(v12, 6, 0, Prediction, (uint64_t)v2015, 0, 0, v2016);
          v2024 = JSC::DFG::ByteCodeParser::addToGraph(v12, 321, 0xFFFFFFFFLL, 0, (uint64_t)v2017, 0, 0, v2018);
          v2025 = *(_DWORD *)(v1993 + 1000);
          if (v2025)
            v2026 = 16 * (v2025 & 0xFFFFFFFE);
          else
            v2026 = 0;
          v2027 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(v12 + 24), v2026, (int *)&v2069, v2019, v2020, v2021, v2022, v2023);
          v2030 = JSC::DFG::ByteCodeParser::addToGraph(v12, 268, v2027, 0, 0, 0, v2028, v2029);
          JSC::DFG::ByteCodeParser::addToGraph(v12, 344, 1, (uint64_t)v2030, (uint64_t)v2024, 0, v2031, v2032);
          JSC::DFG::ByteCodeParser::addToGraph(v12, 344, 2, (uint64_t)v2030, (uint64_t)v1998, 0, v2033, v2034);
          v42 = a1[3];
          v43 = *(unsigned __int8 **)v42;
          if (**(_BYTE **)v42)
          {
            __break(0xC471u);
            JUMPOUT(0x198344C84);
          }
          v2035 = (int *)*((_QWORD *)v42 + 1);
          v45 = *((_QWORD *)v42 + 2);
          v2036 = *v2035;
          if (v2035[1] == 2)
          {
            if (v2036 < 0)
              goto LABEL_15;
          }
          else if (v2036 == 0x3FFFFFFF)
          {
            goto LABEL_15;
          }
          v48 = *(_QWORD *)v2035;
          v44 = v2030;
          goto LABEL_14;
        }
      }
      v1997 = 0xFFFE000000000002;
      goto LABEL_795;
    case 0x64u:
      v490 = a1[2];
      if (**(_BYTE **)v490)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v490 + 1), **((_QWORD **)v490 + 2), **((_QWORD **)v490 + 3), **((unsigned int **)v490 + 4), a5, a6, a7, a8);
      **((_BYTE **)v490 + 5) = 1;
      **((_BYTE **)v490 + 6) = 0;
      v453 = a1[3];
      v491 = *(_QWORD *)a1[9];
      v492 = (*(_DWORD *)a1[5] + 6);
      v493 = JSC::DFG::ByteCodeParser::get(v12, v492 | ((unint64_t)(v492 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v458 = JSC::DFG::ByteCodeParser::addToGraph(v12, 311, v491, (uint64_t)v493, 0, 0, v494, v495);
      v43 = *(unsigned __int8 **)v453;
      if (**(_BYTE **)v453)
      {
        __break(0xC471u);
        JUMPOUT(0x1983406E8);
      }
      goto LABEL_179;
    case 0x65u:
      v323 = *(_QWORD *)a1[8];
      if (v323)
        v324 = *(_BYTE *)(v323 + 5) == 26;
      else
        v324 = 0;
      if (!v324
        || &JSC::JSBoundFunction::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v323 & 0xFFFFFFFE) + 0x4C)))
      {
        return 3;
      }
      v325 = a1[2];
      if (**(_BYTE **)v325)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v325 + 1), **((_QWORD **)v325 + 2), **((_QWORD **)v325 + 3), **((unsigned int **)v325 + 4), a5, a6, a7, a8);
      **((_BYTE **)v325 + 5) = 1;
      **((_BYTE **)v325 + 6) = 1;
      v326 = JSC::DFG::Graph::freeze(*(_QWORD *)(v12 + 24), v323, a3, a4, a5, a6, a7, a8);
      v327 = *(_QWORD *)a1[10] & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000;
      v328 = *(_QWORD *)(v12 + 24);
      JSC::DFG::ByteCodeParser::currentNodeOrigin((JSC::DFG::ByteCodeParser *)&v2069, v12, v329, v330, v331, v332, v333, v334);
      v343 = (JSC::DFG::Node *)JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge,JSC::DFG::Edge>(v328, 182, (uint64_t)&v2069, (uint64_t)v326, v327, 0, 0, v335);
      if ((v2070 & 1) != 0 && (v2070 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v2070 & 0xFFFFFFFF8, v336, (uint64_t)v337, v338, v339, v340, v341, v342);
      if ((v2069 & 1) != 0 && ((unint64_t)v2069 & 0xFFFFFFFF8) != 0)
        WTF::fastFree((unint64_t)v2069 & 0xFFFFFFFF8, v336, (uint64_t)v337, v338, v339, v340, v341, v342);
      JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, v343, v337, v338, v339, v340, v341, v342);
      v350 = *(_QWORD *)(v12 + 280);
      v352 = *(_QWORD *)(v350 + 16);
      v351 = *(_QWORD *)(v350 + 24);
      v353 = *(_DWORD *)(v323 + 88) + *(_DWORD *)a1[1];
      v354 = v353 + *(_DWORD *)(v352 + 20) + 1;
      v355 = -6 - (v354 & 0xFFFFFFFE);
      v356 = v355;
      if (v351)
        v356 = v355 + (HIDWORD(*(_QWORD *)(v351 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v351 + 24) >> 28) >> 24 << 20));
      v357 = ~v356;
      if (*(_DWORD *)(v12 + 260) < ~v356)
      {
        *(_DWORD *)(v12 + 260) = v357;
        v358 = *(_QWORD *)(v12 + 24);
        LODWORD(v359) = *(_DWORD *)(v358 + 60);
        if ((_DWORD)v359)
        {
          v360 = 0;
          do
          {
            if (v359 <= v360)
            {
              __break(0xC471u);
              JUMPOUT(0x198344DC0);
            }
            JSC::DFG::BasicBlock::ensureLocals(*(JSC::DFG::BasicBlock **)(*(_QWORD *)(v358 + 48) + 8 * v360++), v357);
            v358 = *(_QWORD *)(v12 + 24);
            v359 = *(unsigned int *)(v358 + 60);
          }
          while (v360 < v359);
        }
      }
      v2069 = 0;
      v2070 = 0;
      v361 = JSC::DFG::ByteCodeParser::jsConstant((uint64_t *)v12, *(_QWORD *)(v323 + 40), v344, v345, v346, v347, v348, v349);
      v2068 = v361;
      v368 = HIDWORD(v2070);
      if (HIDWORD(v2070) == (_DWORD)v2070)
      {
        v1087 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2069, HIDWORD(v2070) + 1, (unint64_t)&v2068);
        v368 = HIDWORD(v2070);
        *((_QWORD *)v2069 + HIDWORD(v2070)) = *v1087;
      }
      else
      {
        *((_QWORD *)v2069 + HIDWORD(v2070)) = v361;
      }
      HIDWORD(v2070) = v368 + 1;
      v369 = *(unsigned int *)(v323 + 88);
      if ((_DWORD)v369)
      {
        v1088 = (unint64_t *)(v323 + 48);
        if (v369 > 3)
        {
          v1937 = 0;
          v1938 = 8 * v369;
          do
          {
            v1939 = *v1088 + v1937;
            if ((*(_BYTE *)(*v1088 + 4) & 0xE) == 6)
              v1940 = *(_QWORD *)(v1939 + 16) + 0x2000000000000;
            else
              v1940 = *(_QWORD *)(v1939 + 16);
            JSC::DFG::ByteCodeParser::CallOptimizationResult JSC::DFG::ByteCodeParser::handleIntrinsicCall<JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0>(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,JSC::Intrinsic,int,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,JSC::CodeSpecializationKind,unsigned long long,JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0 const&)::{lambda(void)#1}::operator() const(void)::{lambda(JSC::JSValue)#1}::operator()((uint64_t)&v2069, (uint64_t *)v12, v1940, v363, v364, v365, v366, v367);
            v1937 += 8;
          }
          while (v1938 != v1937);
        }
        else
        {
          do
          {
            v1089 = *v1088++;
            v1090 = JSC::DFG::Graph::freezeStrong(*(_QWORD *)(v12 + 24), v1089, v362, v363, v364, v365, v366, v367);
            v1097 = JSC::DFG::ByteCodeParser::jsConstant((JSC::DFG::ByteCodeParser *)v12, (JSC::DFG::FrozenValue *)v1090, v1091, v1092, v1093, v1094, v1095, v1096);
            v2068 = v1097;
            v1098 = HIDWORD(v2070);
            if (HIDWORD(v2070) == (_DWORD)v2070)
            {
              v1099 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2069, HIDWORD(v2070) + 1, (unint64_t)&v2068);
              v1098 = HIDWORD(v2070);
              *((_QWORD *)v2069 + HIDWORD(v2070)) = *v1099;
            }
            else
            {
              *((_QWORD *)v2069 + HIDWORD(v2070)) = v1097;
            }
            HIDWORD(v2070) = v1098 + 1;
            --v369;
          }
          while (v369);
        }
      }
      if (*(int *)a1[1] <= 1)
      {
        v374 = HIDWORD(v2070);
      }
      else
      {
        v370 = 6;
        do
        {
          v371 = (v370 + *(_DWORD *)a1[5]);
          v372 = JSC::DFG::ByteCodeParser::get(v12, v371 | ((unint64_t)(v371 >> 31) << 32), v362, v363, v364, v365, v366, v367);
          v2068 = v372;
          v373 = HIDWORD(v2070);
          if (HIDWORD(v2070) == (_DWORD)v2070)
          {
            v376 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2069, HIDWORD(v2070) + 1, (unint64_t)&v2068);
            v373 = HIDWORD(v2070);
            *((_QWORD *)v2069 + HIDWORD(v2070)) = *v376;
          }
          else
          {
            *((_QWORD *)v2069 + HIDWORD(v2070)) = v372;
          }
          v374 = v373 + 1;
          HIDWORD(v2070) = v374;
          v375 = v370 - 4;
          ++v370;
        }
        while (v375 < *(_DWORD *)a1[1]);
      }
      if (v374)
      {
        v1278 = v2069;
        v1279 = -(v354 | 1);
        v1280 = 8 * v374;
        do
        {
          v1281 = *(_QWORD *)v1278;
          v1278 = (WTF *)((char *)v1278 + 8);
          JSC::DFG::ByteCodeParser::set(v12, v1279 | ((unint64_t)(v1279 >> 31) << 32), v1281, 2, v364, v365, v366, v367);
          ++v1279;
          v1280 -= 8;
        }
        while (v1280);
      }
      *(_BYTE *)(v12 + 64) = 1;
      JSC::DFG::ByteCodeParser::addToGraph(v12, 22, 0, 0, 0, v365, v366, v367);
      v1288 = *(_QWORD *)a1[6];
      v1289 = *(unsigned __int16 *)a1[11];
      if (v1289 == 241)
        v1290 = 10;
      else
        v1290 = 11;
      v1291 = *(_DWORD *)a1[12];
      v1292 = JSC::DFG::ByteCodeParser::jsConstant((uint64_t *)v12, *(_QWORD *)(v323 + 32), v1282, v1283, v1284, v1285, v1286, v1287);
      v1293 = *(_QWORD *)(v323 + 32);
      __dst = (WTF *)&v2066;
      v2065 = 0x100000001;
      v2066 = v1293;
      v2067 = 0;
      v1301 = JSC::DFG::ByteCodeParser::handleCall(v12, v1288, v1289, v1290, v1291, v1292, v353, v355, &__dst, *(_QWORD *)a1[9], 0);
      v1302 = __dst;
      if (&v2066 != (uint64_t *)__dst && __dst)
      {
        __dst = 0;
        LODWORD(v2065) = 0;
        WTF::fastFree((unint64_t)v1302, v1294, v1295, v1296, v1297, v1298, v1299, v1300);
      }
      *a1[7] = 1;
      if (v1301)
        v10 = 1;
      else
        v10 = 2;
      v1303 = v2069;
      if (v2069)
      {
        v2069 = 0;
        LODWORD(v2070) = 0;
        WTF::fastFree((unint64_t)v1303, v1294, v1295, v1296, v1297, v1298, v1299, v1300);
      }
      return v10;
    case 0x67u:
      if (*(int *)a1[1] < 2)
        return v10;
      v297 = a1[2];
      if (**(_BYTE **)v297)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v297 + 1), **((_QWORD **)v297 + 2), **((_QWORD **)v297 + 3), **((unsigned int **)v297 + 4), a5, a6, a7, a8);
      **((_BYTE **)v297 + 5) = 1;
      **((_BYTE **)v297 + 6) = 0;
      v298 = (*(_DWORD *)a1[5] + 5);
      v299 = JSC::DFG::ByteCodeParser::get(v12, v298 | ((unint64_t)(v298 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v300 = (*(_DWORD *)a1[5] + 6);
      v307 = JSC::DFG::ByteCodeParser::get(v12, v300 | ((unint64_t)(v300 >> 31) << 32), v301, v302, v303, v304, v305, v306);
      v311 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 393, (uint64_t)v307, 0, 0, v308, v309, v310);
      v315 = (unint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 392, v311, 0, 0, v312, v313, v314);
      v316 = (unint64_t)v299 & 0xFF00FFFFFFFFFFFFLL | 0x78000000000000;
      v320 = JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 394, v316, v311 & 0xFF00FFFFFFFFFFFFLL, v315 & 0xFF00FFFFFFFFFFFFLL, v317, v318, v319);
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 395, 0, *(_QWORD *)a1[9], v316, (unint64_t)v320 & 0xFF00FFFFFFFFFFFFLL, v321, v322);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x19833FF10);
      }
      goto LABEL_10;
    case 0x68u:
    case 0x7Cu:
      if (*(int *)a1[1] < 2)
        return v10;
      v817 = a1[2];
      if (**(_BYTE **)v817)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v817 + 1), **((_QWORD **)v817 + 2), **((_QWORD **)v817 + 3), **((unsigned int **)v817 + 4), a5, a6, a7, a8);
      **((_BYTE **)v817 + 5) = 1;
      **((_BYTE **)v817 + 6) = 0;
      v818 = (*(_DWORD *)a1[5] + 5);
      v819 = JSC::DFG::ByteCodeParser::get(v12, v818 | ((unint64_t)(v818 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v820 = (*(_DWORD *)a1[5] + 6);
      v827 = JSC::DFG::ByteCodeParser::get(v12, v820 | ((unint64_t)(v820 >> 31) << 32), v821, v822, v823, v824, v825, v826);
      v831 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 393, (uint64_t)v827, 0, 0, v828, v829, v830);
      v835 = (unint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 392, v831, 0, 0, v832, v833, v834);
      v839 = 0x78000000000000;
      if (**a1 == 124)
        v839 = 0x7C000000000000;
      v840 = JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 394, v839 | (unint64_t)v819 & 0xFF00FFFFFFFFFFFFLL, v831 & 0xFF00FFFFFFFFFFFFLL, v835 & 0xFF00FFFFFFFFFFFFLL, v836, v837, v838);
      v847 = JSC::DFG::ByteCodeParser::jsConstant((uint64_t *)v12, 0xFFFE0000FFFFFFFFLL, v841, v842, v843, v844, v845, v846);
      v851 = JSC::DFG::ByteCodeParser::addToGraph(v12, 240, (uint64_t)v840, (uint64_t)v847, 0, v848, v849, v850);
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 314, (uint64_t)v851, 0, 0, v852, v853, v854);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x1983417BCLL);
      }
      goto LABEL_10;
    case 0x69u:
      if (*(int *)a1[1] < 3)
        return v10;
      v395 = a1[2];
      if (**(_BYTE **)v395)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v395 + 1), **((_QWORD **)v395 + 2), **((_QWORD **)v395 + 3), **((unsigned int **)v395 + 4), a5, a6, a7, a8);
      **((_BYTE **)v395 + 5) = 1;
      **((_BYTE **)v395 + 6) = 0;
      v396 = (*(_DWORD *)a1[5] + 5);
      v277 = (unint64_t)JSC::DFG::ByteCodeParser::get(v12, v396 | ((unint64_t)(v396 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v397 = (*(_DWORD *)a1[5] + 6);
      v404 = JSC::DFG::ByteCodeParser::get(v12, v397 | ((unint64_t)(v397 >> 31) << 32), v398, v399, v400, v401, v402, v403);
      v405 = (*(_DWORD *)a1[5] + 7);
      v412 = JSC::DFG::ByteCodeParser::get(v12, v405 | ((unint64_t)(v405 >> 31) << 32), v406, v407, v408, v409, v410, v411);
      v416 = JSC::DFG::ByteCodeParser::addToGraph(v12, 393, (uint64_t)v404, 0, 0, v413, v414, v415);
      v420 = JSC::DFG::ByteCodeParser::addToGraph(v12, 392, (uint64_t)v416, 0, 0, v417, v418, v419);
      JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, v277, v421, v422, v423, v424, v425, v426);
      JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, (unint64_t)v416, v427, v428, v429, v430, v431, v432);
      JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, (unint64_t)v412, v433, v434, v435, v436, v437, v438);
      JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, (unint64_t)v420, v439, v440, v441, v442, v443, v444);
      JSC::DFG::ByteCodeParser::addToGraph(v12, 0x195u, 0, 0, v445, v446, v447, v448);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x198344884);
      }
      goto LABEL_170;
    case 0x6Au:
    case 0x7Eu:
      if (*(int *)a1[1] < 2)
        return v10;
      v1100 = a1[2];
      if (**(_BYTE **)v1100)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v1100 + 1), **((_QWORD **)v1100 + 2), **((_QWORD **)v1100 + 3), **((unsigned int **)v1100 + 4), a5, a6, a7, a8);
      **((_BYTE **)v1100 + 5) = 1;
      **((_BYTE **)v1100 + 6) = 0;
      v1101 = (*(_DWORD *)a1[5] + 5);
      v1102 = JSC::DFG::ByteCodeParser::get(v12, v1101 | ((unint64_t)(v1101 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v1103 = (*(_DWORD *)a1[5] + 6);
      v1110 = JSC::DFG::ByteCodeParser::get(v12, v1103 | ((unint64_t)(v1103 >> 31) << 32), v1104, v1105, v1106, v1107, v1108, v1109);
      v1114 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 393, (uint64_t)v1110, 0, 0, v1111, v1112, v1113);
      v1118 = (unint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 392, v1114, 0, 0, v1115, v1116, v1117);
      v1122 = 0x78000000000000;
      if (**a1 == 126)
        v1122 = 0x7C000000000000;
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 406, v1122 | (unint64_t)v1102 & 0xFF00FFFFFFFFFFFFLL, v1114 & 0xFF00FFFFFFFFFFFFLL, v1118 & 0xFF00FFFFFFFFFFFFLL, v1119, v1120, v1121);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x1983424D4);
      }
      goto LABEL_10;
    case 0x6Bu:
    case 0x6Cu:
    case 0x6Du:
    case 0x7Fu:
    case 0x80u:
      v1135 = (uint64_t *)(*(_QWORD *)(v12 + 280) + 32);
      v1136 = *(_DWORD *)(v12 + 40);
      if (JSC::DFG::QueryableExitProfile::hasExitSite(v1135, v1136, 2)
        || JSC::DFG::QueryableExitProfile::hasExitSite(v1135, v1136, 1))
      {
        return 3;
      }
      v1143 = a1[2];
      if (**(_BYTE **)v1143)
      {
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v1143 + 1), **((_QWORD **)v1143 + 2), **((_QWORD **)v1143 + 3), **((unsigned int **)v1143 + 4), v1139, v1140, v1141, v1142);
        v9 = **a1;
      }
      v1144 = 1;
      **((_BYTE **)v1143 + 5) = 1;
      **((_BYTE **)v1143 + 6) = 0;
      if (v9 > 126)
      {
        if (v9 == 127)
        {
          v1144 = 0;
          v1146 = 0xFFFE000000000001;
          v1145 = 0x7C000000000000;
          goto LABEL_509;
        }
        if (v9 == 128)
        {
          v1144 = 0;
          v1145 = 0x7C000000000000;
          goto LABEL_483;
        }
      }
      else
      {
        switch(v9)
        {
          case 'm':
            v1145 = 0x78000000000000;
LABEL_483:
            v1146 = 0xFFFE000000000002;
LABEL_509:
            v1203 = (*(_DWORD *)a1[5] + 5);
            v1204 = (uint64_t)JSC::DFG::ByteCodeParser::get(v12, v1203 | ((unint64_t)(v1203 >> 31) << 32), v1137, v1138, v1139, v1140, v1141, v1142);
            v1205 = v1204 & 0xFF00FFFFFFFFFFFFLL | v1145;
            JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 24, v1205, 0, 0, v1206, v1207, v1208);
            v1212 = JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 399, v1205, 0, 0, v1209, v1210, v1211);
            v1219 = JSC::DFG::ByteCodeParser::jsConstant((uint64_t *)v12, v1146, v1213, v1214, v1215, v1216, v1217, v1218);
            v1220 = *(_QWORD *)(v12 + 24);
            JSC::DFG::ByteCodeParser::currentNodeOrigin((JSC::DFG::ByteCodeParser *)&v2069, v12, v1221, v1222, v1223, v1224, v1225, v1226);
            v1234 = (char)v2069;
            v1235 = *(_QWORD *)(v1220 + 32);
            v1236 = (uint64_t *)((unint64_t)v2069 & 0xFFFFFFFF8);
            if ((v2069 & 1) != 0)
            {
              v2063 = (unint64_t)v2069 & 0xFFFFFFFF8;
              v2048 = *v1236;
              if ((v2069 & 2) != 0
                || (v2049 = *(_DWORD *)(((unint64_t)v2069 & 0xFFFFFFFF8) + 8), v2049 == 0x3FFFFFFF)
                || v2049 == -1)
              {
                v2050 = 2;
              }
              else if (v2049 >> 28)
              {
                v2060 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v2060 = v2048;
                *(_DWORD *)(v2060 + 8) = v2049;
                v2050 = 1;
                v2048 = v2060;
              }
              else
              {
                v2050 = *v1236;
                v2048 = 0;
              }
              v2051 = v2048 | v2050;
              v1238 = (unint64_t *)(v2051 & 0xFFFFFFFF8);
              if ((v2051 & 1) != 0)
              {
                v1237 = 0;
                v1239 = *v1238;
              }
              else
              {
                v1237 = 1;
                v1239 = v2051 & 0xFFFFFFFF8;
              }
              v1236 = (uint64_t *)v2063;
            }
            else
            {
              v1237 = 1;
              v1238 = (unint64_t *)((unint64_t)v2069 & 0xFFFFFFFF8);
              v1239 = (unint64_t)v2069 & 0xFFFFFFFF8;
            }
            if (v1239)
              v1235 = *(_QWORD *)(v1239 + 8);
            v1240 = *(_QWORD *)(v1235 + 8);
            if ((v1237 & 1) == 0 && v1238)
            {
              v2052 = v1236;
              WTF::fastFree((unint64_t)v1238, v1227, v1228, v1229, v1230, v1231, v1232, v1233);
              v1236 = v2052;
            }
            if ((v1234 & 1) != 0 && v1236)
              WTF::fastFree((unint64_t)v1236, v1227, v1228, v1229, v1230, v1231, v1232, v1233);
            if ((v2070 & 1) != 0 && (v2070 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v2070 & 0xFFFFFFFF8, v1227, v1228, v1229, v1230, v1231, v1232, v1233);
            if (v1144)
              v1241 = *(_DWORD *)(v1240 + 1004);
            else
              v1241 = *(_DWORD *)(v1240 + 1008);
            if (v1241)
              v1242 = 16 * (v1241 & 0xFFFFFFFE);
            else
              v1242 = 0;
            v1243 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(v12 + 24), v1242, (int *)&v2069, v1229, v1230, v1231, v1232, v1233);
            v1246 = JSC::DFG::ByteCodeParser::addToGraph(v12, 268, v1243, 0, 0, 0, v1244, v1245);
            v1253 = JSC::DFG::ByteCodeParser::jsConstant((uint64_t *)v12, 0xFFFE000000000000, v1247, v1248, v1249, v1250, v1251, v1252);
            JSC::DFG::ByteCodeParser::addToGraph(v12, 344, 0, (uint64_t)v1246, (uint64_t)v1253, 0, v1254, v1255);
            JSC::DFG::ByteCodeParser::addToGraph(v12, 344, 1, (uint64_t)v1246, v1204, 0, v1256, v1257);
            JSC::DFG::ByteCodeParser::addToGraph(v12, 344, 2, (uint64_t)v1246, (uint64_t)v1212, 0, v1258, v1259);
            JSC::DFG::ByteCodeParser::addToGraph(v12, 344, 3, (uint64_t)v1246, (uint64_t)v1219, 0, v1260, v1261);
            v42 = a1[3];
            v43 = *(unsigned __int8 **)v42;
            if (**(_BYTE **)v42)
            {
              __break(0xC471u);
              JUMPOUT(0x198344BD0);
            }
            v1262 = (int *)*((_QWORD *)v42 + 1);
            v45 = *((_QWORD *)v42 + 2);
            v1263 = *v1262;
            if (v1262[1] == 2)
            {
              if (v1263 < 0)
                goto LABEL_15;
            }
            else if (v1263 == 0x3FFFFFFF)
            {
              goto LABEL_15;
            }
            v48 = *(_QWORD *)v1262;
            v44 = v1246;
            goto LABEL_14;
          case 'k':
            v1146 = 0xFFFE000000000001;
LABEL_559:
            v1145 = 0x78000000000000;
            goto LABEL_509;
          case 'l':
            v1146 = 0xFFFE000000000000;
            goto LABEL_559;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x198344408);
    case 0x6Eu:
    case 0x73u:
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      v1431 = (*(_DWORD *)a1[5] + 6);
      v1438 = JSC::DFG::ByteCodeParser::get(v12, v1431 | ((unint64_t)(v1431 >> 31) << 32), v1432, v1433, v1434, v1435, v1436, v1437);
      v1442 = 0x78000000000000;
      if (**a1 == 115)
        v1442 = 0x7C000000000000;
      v1332 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 399, v1442 | (unint64_t)v1438 & 0xFF00FFFFFFFFFFFFLL, 0, 0, v1439, v1440, v1441);
      goto LABEL_552;
    case 0x6Fu:
    case 0x74u:
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      v1459 = (*(_DWORD *)a1[5] + 6);
      v1466 = JSC::DFG::ByteCodeParser::get(v12, v1459 | ((unint64_t)(v1459 >> 31) << 32), v1460, v1461, v1462, v1463, v1464, v1465);
      v1467 = (*(_DWORD *)a1[5] + 7);
      v1474 = JSC::DFG::ByteCodeParser::get(v12, v1467 | ((unint64_t)(v1467 >> 31) << 32), v1468, v1469, v1470, v1471, v1472, v1473);
      v1454 = **a1 == 116;
      v1455 = (unint64_t)v1466 & 0xFF00FFFFFFFFFFFFLL;
      v1458 = (unint64_t)v1474 & 0xFF00FFFFFFFFFFFFLL;
      v1456 = (JSC::DFG::ByteCodeParser *)v12;
      v1457 = 400;
      goto LABEL_586;
    case 0x70u:
    case 0x75u:
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      v1443 = (*(_DWORD *)a1[5] + 6);
      v1450 = JSC::DFG::ByteCodeParser::get(v12, v1443 | ((unint64_t)(v1443 >> 31) << 32), v1444, v1445, v1446, v1447, v1448, v1449);
      v1454 = **a1 == 117;
      v1455 = (unint64_t)v1450 & 0xFF00FFFFFFFFFFFFLL;
      v1456 = (JSC::DFG::ByteCodeParser *)v12;
      v1457 = 401;
      v1458 = 0;
LABEL_586:
      v1332 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v1456, v1457, v1454, v1455, v1458, v1451, v1452, v1453);
      goto LABEL_552;
    case 0x71u:
    case 0x76u:
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      v1416 = (*(_DWORD *)a1[5] + 6);
      v1423 = JSC::DFG::ByteCodeParser::get(v12, v1416 | ((unint64_t)(v1416 >> 31) << 32), v1417, v1418, v1419, v1420, v1421, v1422);
      v1426 = **a1 == 118;
      v1427 = *(_QWORD *)a1[9];
      v1428 = (unint64_t)v1423 & 0xFF00FFFFFFFFFFFFLL;
      v1429 = (JSC::DFG::ByteCodeParser *)v12;
      v1430 = 402;
      goto LABEL_580;
    case 0x72u:
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      v1482 = (*(_DWORD *)a1[5] + 6);
      v1489 = JSC::DFG::ByteCodeParser::get(v12, v1482 | ((unint64_t)(v1482 >> 31) << 32), v1483, v1484, v1485, v1486, v1487, v1488);
      v1427 = *(_QWORD *)a1[9];
      v1428 = (unint64_t)v1489 & 0xFF00FFFFFFFFFFFFLL;
      v1429 = (JSC::DFG::ByteCodeParser *)v12;
      v1430 = 403;
      v1426 = 0;
LABEL_580:
      v1332 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v1429, v1430, v1426, v1427, v1428, 0, v1424, v1425);
      goto LABEL_552;
    case 0x77u:
    case 0x7Au:
      v1127 = a1[2];
      if (**(_BYTE **)v1127)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v1127 + 1), **((_QWORD **)v1127 + 2), **((_QWORD **)v1127 + 3), **((unsigned int **)v1127 + 4), a5, a6, a7, a8);
      **((_BYTE **)v1127 + 5) = 1;
      **((_BYTE **)v1127 + 6) = 0;
      v1128 = (*(_DWORD *)a1[5] + 6);
      v1129 = JSC::DFG::ByteCodeParser::get(v12, v1128 | ((unint64_t)(v1128 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v1133 = 0x84000000000000;
      if (**a1 == 119)
        v1133 = 0x80000000000000;
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 396, v1133 | (unint64_t)v1129 & 0xFF00FFFFFFFFFFFFLL, 0, 0, v1130, v1131, v1132);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x19834264CLL);
      }
      goto LABEL_10;
    case 0x78u:
    case 0x7Bu:
      v1081 = a1[2];
      if (**(_BYTE **)v1081)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v1081 + 1), **((_QWORD **)v1081 + 2), **((_QWORD **)v1081 + 3), **((unsigned int **)v1081 + 4), a5, a6, a7, a8);
      **((_BYTE **)v1081 + 5) = 1;
      **((_BYTE **)v1081 + 6) = 0;
      v1082 = (*(_DWORD *)a1[5] + 6);
      v1083 = JSC::DFG::ByteCodeParser::get(v12, v1082 | ((unint64_t)(v1082 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v1086 = 0x84000000000000;
      if (**a1 == 120)
        v1086 = 0x80000000000000;
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 397, 0, *(_QWORD *)a1[9], v1086 | (unint64_t)v1083 & 0xFF00FFFFFFFFFFFFLL, 0, v1084, v1085);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x19834231CLL);
      }
      goto LABEL_10;
    case 0x79u:
      v1166 = a1[2];
      if (**(_BYTE **)v1166)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v1166 + 1), **((_QWORD **)v1166 + 2), **((_QWORD **)v1166 + 3), **((unsigned int **)v1166 + 4), a5, a6, a7, a8);
      **((_BYTE **)v1166 + 5) = 1;
      **((_BYTE **)v1166 + 6) = 0;
      v1167 = (*(_DWORD *)a1[5] + 6);
      v1168 = JSC::DFG::ByteCodeParser::get(v12, v1167 | ((unint64_t)(v1167 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 398, 0, *(_QWORD *)a1[9], (unint64_t)v1168 & 0xFF00FFFFFFFFFFFFLL | 0x80000000000000, 0, v1169, v1170);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x198342814);
      }
      goto LABEL_10;
    case 0x7Du:
      if (*(int *)a1[1] < 2)
        return v10;
      v874 = a1[2];
      if (**(_BYTE **)v874)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v874 + 1), **((_QWORD **)v874 + 2), **((_QWORD **)v874 + 3), **((unsigned int **)v874 + 4), a5, a6, a7, a8);
      **((_BYTE **)v874 + 5) = 1;
      **((_BYTE **)v874 + 6) = 0;
      v875 = (*(_DWORD *)a1[5] + 5);
      v277 = (unint64_t)JSC::DFG::ByteCodeParser::get(v12, v875 | ((unint64_t)(v875 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v876 = (*(_DWORD *)a1[5] + 6);
      v883 = JSC::DFG::ByteCodeParser::get(v12, v876 | ((unint64_t)(v876 >> 31) << 32), v877, v878, v879, v880, v881, v882);
      v887 = JSC::DFG::ByteCodeParser::addToGraph(v12, 393, (uint64_t)v883, 0, 0, v884, v885, v886);
      v891 = JSC::DFG::ByteCodeParser::addToGraph(v12, 392, (uint64_t)v887, 0, 0, v888, v889, v890);
      JSC::DFG::ByteCodeParser::addToGraph(v12, 404, v277, (uint64_t)v887, (uint64_t)v891, v892, v893, v894);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x1983419D8);
      }
      goto LABEL_170;
    case 0x81u:
      if (*(int *)a1[1] < 2
        || JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(v12 + 280) + 32), *(_DWORD *)(v12 + 40), 1))
      {
        return v10;
      }
      v972 = a1[2];
      if (**(_BYTE **)v972)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v972 + 1), **((_QWORD **)v972 + 2), **((_QWORD **)v972 + 3), **((unsigned int **)v972 + 4), v968, v969, v970, v971);
      **((_BYTE **)v972 + 5) = 1;
      **((_BYTE **)v972 + 6) = 0;
      v973 = (*(_DWORD *)a1[5] + 5);
      v974 = JSC::DFG::ByteCodeParser::get(v12, v973 | ((unint64_t)(v973 >> 31) << 32), v966, v967, v968, v969, v970, v971);
      v975 = (*(_DWORD *)a1[5] + 6);
      v982 = (uint64_t)JSC::DFG::ByteCodeParser::get(v12, v975 | ((unint64_t)(v975 >> 31) << 32), v976, v977, v978, v979, v980, v981);
      v983 = v982 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000;
      JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 24, v983, 0, 0, v984, v985, v986);
      v990 = (unint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 392, v982, 0, 0, v987, v988, v989);
      v994 = JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 407, (unint64_t)v974 & 0xFF00FFFFFFFFFFFFLL | 0x88000000000000, v983, v990 & 0xFF00FFFFFFFFFFFFLL | 0x4000000000000, v991, v992, v993);
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 410, 0, *(_QWORD *)a1[9], (uint64_t)v994, 0, 0, v995);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x198341E70);
      }
      goto LABEL_10;
    case 0x82u:
      if (*(int *)a1[1] < 2
        || JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(v12 + 280) + 32), *(_DWORD *)(v12 + 40), 1))
      {
        return v10;
      }
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], v1722, v1723, v1724, v1725, v1726, v1727, v1728);
      v1729 = (*(_DWORD *)a1[5] + 5);
      v1736 = JSC::DFG::ByteCodeParser::get(v12, v1729 | ((unint64_t)(v1729 >> 31) << 32), v1730, v1731, v1732, v1733, v1734, v1735);
      v1737 = (*(_DWORD *)a1[5] + 6);
      v1744 = (uint64_t)JSC::DFG::ByteCodeParser::get(v12, v1737 | ((unint64_t)(v1737 >> 31) << 32), v1738, v1739, v1740, v1741, v1742, v1743);
      v1745 = v1744 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000;
      JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 24, v1745, 0, 0, v1746, v1747, v1748);
      v1752 = (unint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 392, v1744, 0, 0, v1749, v1750, v1751);
      v1756 = -120;
      goto LABEL_658;
    case 0x83u:
      if (*(int *)a1[1] < 3
        || JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(v12 + 280) + 32), *(_DWORD *)(v12 + 40), 1))
      {
        return v10;
      }
      v1040 = a1[2];
      if (**(_BYTE **)v1040)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v1040 + 1), **((_QWORD **)v1040 + 2), **((_QWORD **)v1040 + 3), **((unsigned int **)v1040 + 4), v1036, v1037, v1038, v1039);
      **((_BYTE **)v1040 + 5) = 1;
      **((_BYTE **)v1040 + 6) = 0;
      v1041 = (*(_DWORD *)a1[5] + 5);
      v277 = (unint64_t)JSC::DFG::ByteCodeParser::get(v12, v1041 | ((unint64_t)(v1041 >> 31) << 32), v1034, v1035, v1036, v1037, v1038, v1039);
      v1042 = (*(_DWORD *)a1[5] + 6);
      v1049 = (uint64_t)JSC::DFG::ByteCodeParser::get(v12, v1042 | ((unint64_t)(v1042 >> 31) << 32), v1043, v1044, v1045, v1046, v1047, v1048);
      v1050 = (*(_DWORD *)a1[5] + 7);
      v1057 = JSC::DFG::ByteCodeParser::get(v12, v1050 | ((unint64_t)(v1050 >> 31) << 32), v1051, v1052, v1053, v1054, v1055, v1056);
      v1058 = (WTF *)(v1049 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000);
      JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 24, (uint64_t)v1058, 0, 0, v1059, v1060, v1061);
      v1071 = (unint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 392, v1049, 0, 0, v1062, v1063, v1064);
      v2069 = (WTF *)(v277 & 0xFF00FFFFFFFFFFFFLL | 0x88000000000000);
      v1072 = *(_QWORD *)(v12 + 24);
      v1073 = *(_DWORD *)(v1072 + 160);
      v1074 = *(unsigned int *)(v1072 + 164);
      if ((_DWORD)v1074 == v1073)
      {
        WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v1072 + 152, (unint64_t)&v2069, v1065, v1066, v1067, v1068, v1069, v1070);
        v1072 = *(_QWORD *)(v12 + 24);
        v1073 = *(_DWORD *)(v1072 + 160);
        v1075 = *(_DWORD *)(v1072 + 164);
      }
      else
      {
        v1075 = v1074 + 1;
        *(_QWORD *)(*(_QWORD *)(v1072 + 152) + 8 * v1074) = v277 & 0xFF00FFFFFFFFFFFFLL | 0x88000000000000;
        *(_DWORD *)(v1072 + 164) = v1074 + 1;
      }
      v1076 = *(_DWORD *)(v12 + 272) + 1;
      *(_DWORD *)(v12 + 272) = v1076;
      v2069 = v1058;
      if (v1075 == v1073)
      {
        WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v1072 + 152, (unint64_t)&v2069, v1065, v1066, v1067, v1068, v1069, v1070);
        v1076 = *(_DWORD *)(v12 + 272);
        v1072 = *(_QWORD *)(v12 + 24);
        v1073 = *(_DWORD *)(v1072 + 160);
        v1077 = *(_DWORD *)(v1072 + 164);
      }
      else
      {
        v1077 = v1075 + 1;
        *(_QWORD *)(*(_QWORD *)(v1072 + 152) + 8 * v1075) = v1058;
        *(_DWORD *)(v1072 + 164) = v1075 + 1;
      }
      v1078 = v1076 + 1;
      *(_DWORD *)(v12 + 272) = v1078;
      v2069 = (WTF *)((unint64_t)v1057 & 0xFF00FFFFFFFFFFFFLL);
      if (v1077 == v1073)
      {
        WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v1072 + 152, (unint64_t)&v2069, v1065, v1066, v1067, v1068, v1069, v1070);
        v1078 = *(_DWORD *)(v12 + 272);
        v1072 = *(_QWORD *)(v12 + 24);
        v1073 = *(_DWORD *)(v1072 + 160);
        v1079 = *(_DWORD *)(v1072 + 164);
      }
      else
      {
        v1079 = v1077 + 1;
        *(_QWORD *)(*(_QWORD *)(v1072 + 152) + 8 * v1077) = (unint64_t)v1057 & 0xFF00FFFFFFFFFFFFLL;
        *(_DWORD *)(v1072 + 164) = v1077 + 1;
      }
      v1080 = v1078 + 1;
      *(_DWORD *)(v12 + 272) = v1080;
      v2069 = (WTF *)(v1071 & 0xFF00FFFFFFFFFFFFLL | 0x4000000000000);
      if (v1079 == v1073)
      {
        WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v1072 + 152, (unint64_t)&v2069, v1065, v1066, v1067, v1068, v1069, v1070);
        v1080 = *(_DWORD *)(v12 + 272);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v1072 + 152) + 8 * v1079) = v1071 & 0xFF00FFFFFFFFFFFFLL | 0x4000000000000;
        *(_DWORD *)(v1072 + 164) = v1079 + 1;
      }
      *(_DWORD *)(v12 + 272) = v1080 + 1;
      JSC::DFG::ByteCodeParser::addToGraph(v12, 0x199u, 0, 0, v1067, v1068, v1069, v1070);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x198342258);
      }
LABEL_170:
      v449 = (int *)*((_QWORD *)v42 + 1);
      v45 = *((_QWORD *)v42 + 2);
      v450 = *v449;
      if (v449[1] == 2)
      {
        if (v450 < 0)
          goto LABEL_15;
      }
      else if (v450 == 0x3FFFFFFF)
      {
        goto LABEL_15;
      }
      v48 = *(_QWORD *)v449;
      v44 = (_QWORD *)v277;
      goto LABEL_14;
    case 0x84u:
      if (*(int *)a1[1] < 2
        || JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(v12 + 280) + 32), *(_DWORD *)(v12 + 40), 1))
      {
        return v10;
      }
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], v1765, v1766, v1767, v1768, v1769, v1770, v1771);
      v1772 = (*(_DWORD *)a1[5] + 5);
      v1736 = JSC::DFG::ByteCodeParser::get(v12, v1772 | ((unint64_t)(v1772 >> 31) << 32), v1773, v1774, v1775, v1776, v1777, v1778);
      v1779 = (*(_DWORD *)a1[5] + 6);
      v1786 = (uint64_t)JSC::DFG::ByteCodeParser::get(v12, v1779 | ((unint64_t)(v1779 >> 31) << 32), v1780, v1781, v1782, v1783, v1784, v1785);
      v1745 = v1786 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000;
      JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 24, v1745, 0, 0, v1787, v1788, v1789);
      v1752 = (unint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 392, v1786, 0, 0, v1790, v1791, v1792);
      v1756 = -116;
LABEL_658:
      v1757 = JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 407, (unint64_t)v1736 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v1756 << 48), v1745, v1752 & 0xFF00FFFFFFFFFFFFLL | 0x4000000000000, v1753, v1754, v1755);
      v1347 = JSC::DFG::ByteCodeParser::addToGraph(v12, 296, (uint64_t)v1757, 0, 0, v1758, v1759, v1760);
      v1351 = v12;
      v1352 = 314;
      goto LABEL_602;
    case 0x85u:
      if (*(int *)a1[1] < 2
        || JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(v12 + 280) + 32), *(_DWORD *)(v12 + 40), 1))
      {
        return v10;
      }
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], v1882, v1883, v1884, v1885, v1886, v1887, v1888);
      v1889 = (*(_DWORD *)a1[5] + 5);
      v1896 = JSC::DFG::ByteCodeParser::get(v12, v1889 | ((unint64_t)(v1889 >> 31) << 32), v1890, v1891, v1892, v1893, v1894, v1895);
      v1897 = (*(_DWORD *)a1[5] + 6);
      v1904 = (uint64_t)JSC::DFG::ByteCodeParser::get(v12, v1897 | ((unint64_t)(v1897 >> 31) << 32), v1898, v1899, v1900, v1901, v1902, v1903);
      v1905 = v1904 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000;
      JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 24, v1905, 0, 0, v1906, v1907, v1908);
      v1912 = (unint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 392, v1904, 0, 0, v1909, v1910, v1911);
      JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 408, (unint64_t)v1896 & 0xFF00FFFFFFFFFFFFLL | 0x8C000000000000, v1905, v1912 & 0xFF00FFFFFFFFFFFFLL | 0x4000000000000, v1913, v1914, v1915);
      v1326 = (uint64_t)a1[3];
      v1325 = v1896;
      goto LABEL_553;
    case 0x86u:
      if (*(int *)a1[1] < 2)
        return v10;
      if (!*(_QWORD *)(*(_QWORD *)v12 + 93072) || (*(_QWORD *)(*(_QWORD *)v12 + 93072) & 1) != 0)
        return v10;
      v64 = a1[2];
      if (**(_BYTE **)v64)
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v64 + 1), **((_QWORD **)v64 + 2), **((_QWORD **)v64 + 3), **((unsigned int **)v64 + 4), a5, a6, a7, a8);
      **((_BYTE **)v64 + 5) = 1;
      **((_BYTE **)v64 + 6) = 0;
      v65 = (*(_DWORD *)a1[5] + 5);
      v66 = JSC::DFG::ByteCodeParser::get(v12, v65 | ((unint64_t)(v65 >> 31) << 32), a3, a4, a5, a6, a7, a8);
      v67 = (*(_DWORD *)a1[5] + 6);
      v74 = JSC::DFG::ByteCodeParser::get(v12, v67 | ((unint64_t)(v67 >> 31) << 32), v68, v69, v70, v71, v72, v73);
      v37 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v12, 342, (uint64_t)v66, (uint64_t)v74, 0, v75, v76, v77);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x19833F3D8);
      }
      goto LABEL_10;
    case 0x87u:
    case 0x88u:
    case 0x89u:
    case 0x8Au:
    case 0x8Bu:
    case 0x8Cu:
    case 0x8Eu:
    case 0x8Fu:
    case 0x90u:
    case 0x93u:
      LOBYTE(v1658) = v9 + 121;
      if ((v9 + 121) >= 0xDu || ((0x13BFu >> v1658) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198344D68);
      }
      v1658 = (char)v1658;
      v1659 = dword_1991554B8[(char)v1658];
      if (*(_DWORD *)a1[1] <= v1659)
        return v10;
      v1660 = qword_1991554F0[v1658];
      v1661 = word_199155558[v1658];
      v1662 = (uint64_t *)(*(_QWORD *)(v12 + 280) + 32);
      v1663 = *(_DWORD *)(v12 + 40);
      if (JSC::DFG::QueryableExitProfile::hasExitSite(v1662, v1663, 7)
        || JSC::DFG::QueryableExitProfile::hasExitSite(v1662, v1663, 6)
        || JSC::DFG::QueryableExitProfile::hasExitSite(v1662, v1663, 5)
        || JSC::DFG::QueryableExitProfile::hasExitSite(v1662, v1663, 1)
        || JSC::DFG::QueryableExitProfile::hasExitSite(v1662, v1663, 15))
      {
        return 3;
      }
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], v1664, v1665, v1666, v1667, v1668, v1669, v1670);
      v1677 = 0;
      do
      {
        v1678 = v1677 + 1;
        v1679 = (v1677 + *(_DWORD *)a1[5] + 6);
        v1680 = JSC::DFG::ByteCodeParser::get(v12, v1679 | ((unint64_t)(v1679 >> 31) << 32), v1671, v1672, v1673, v1674, v1675, v1676);
        JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, (unint64_t)v1680, v1681, v1682, v1683, v1684, v1685, v1686);
        v1677 = v1678;
      }
      while (v1659 != v1678);
      JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, 0, v1671, v1672, v1673, v1674, v1675, v1676);
      v1332 = JSC::DFG::ByteCodeParser::addToGraph(v12, v1661, v1660, *(_QWORD *)a1[9], v1687, v1688, v1689, v1690);
      goto LABEL_552;
    case 0x94u:
      v377 = *(_DWORD *)a1[1];
      if (v377 < 2)
        return v10;
      v378 = (uint64_t *)(*(_QWORD *)(v12 + 280) + 32);
      v379 = *(_DWORD *)(v12 + 40);
      if (JSC::DFG::QueryableExitProfile::hasExitSite(v378, v379, 2)
        || JSC::DFG::QueryableExitProfile::hasExitSite(v378, v379, 1))
      {
        return 3;
      }
      v386 = a1[2];
      if (**(_BYTE **)v386)
      {
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v386 + 1), **((_QWORD **)v386 + 2), **((_QWORD **)v386 + 3), **((unsigned int **)v386 + 4), v382, v383, v384, v385);
        v377 = *(_DWORD *)a1[1];
      }
      **((_BYTE **)v386 + 5) = 1;
      **((_BYTE **)v386 + 6) = 0;
      v387 = *(_DWORD *)a1[5];
      v388 = (v387 + 6);
      if (v377 == 2)
      {
        v389 = *(_QWORD *)a1[9];
        v390 = JSC::DFG::ByteCodeParser::get(v12, v388 | ((unint64_t)(v388 >> 31) << 32), v380, v381, v382, v383, v384, v385);
        v392 = v12;
        v393 = v389;
        v394 = 0;
      }
      else
      {
        v996 = (v387 + 7);
        v997 = *(_QWORD *)a1[9];
        v998 = JSC::DFG::ByteCodeParser::get(v12, v388 | ((unint64_t)(v388 >> 31) << 32), v380, v381, v382, v383, v384, v385);
        v394 = JSC::DFG::ByteCodeParser::get(v12, v996 | ((unint64_t)(v996 >> 31) << 32), v999, v1000, v1001, v1002, v1003, v1004);
        v392 = v12;
        v393 = v997;
        v390 = v998;
      }
      v44 = JSC::DFG::ByteCodeParser::addToGraph(v392, 193, 0, v393, (uint64_t)v390, (uint64_t)v394, 0, v391);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x19834024CLL);
      }
      goto LABEL_11;
    case 0x95u:
      if (JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(v12 + 280) + 32), *(_DWORD *)(v12 + 40), 1))
      {
        return v10;
      }
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], v1333, v1334, v1335, v1336, v1337, v1338, v1339);
      v1340 = (*(_DWORD *)a1[5] + 5);
      v1347 = JSC::DFG::ByteCodeParser::get(v12, v1340 | ((unint64_t)(v1340 >> 31) << 32), v1341, v1342, v1343, v1344, v1345, v1346);
      v1351 = v12;
      v1352 = 329;
LABEL_602:
      v1332 = (uint64_t)JSC::DFG::ByteCodeParser::addToGraph(v1351, v1352, (uint64_t)v1347, 0, 0, v1348, v1349, v1350);
      goto LABEL_552;
    case 0x96u:
      if (JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(v12 + 280) + 32), *(_DWORD *)(v12 + 40), 1))
      {
        return v10;
      }
      v901 = *(_DWORD *)a1[1];
      if (v901 > 5)
        return v10;
      v902 = a1[2];
      if (**(_BYTE **)v902)
      {
        JSC::DFG::ByteCodeParser::emitFunctionChecks(*((_QWORD *)v902 + 1), **((_QWORD **)v902 + 2), **((_QWORD **)v902 + 3), **((unsigned int **)v902 + 4), v897, v898, v899, v900);
        v901 = *(_DWORD *)a1[1];
      }
      **((_BYTE **)v902 + 5) = 1;
      **((_BYTE **)v902 + 6) = 0;
      if (v901 < 1)
      {
        v1264 = JSC::DFG::ByteCodeParser::jsConstant((uint64_t *)v12, 0xAuLL, v895, v896, v897, v898, v899, v900);
        JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, (unint64_t)v1264, v1265, v1266, v1267, v1268, v1269, v1270);
LABEL_529:
        v1271 = JSC::DFG::ByteCodeParser::jsConstant((uint64_t *)v12, 0xAuLL, v895, v896, v897, v898, v899, v900);
        JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, (unint64_t)v1271, v1272, v1273, v1274, v1275, v1276, v1277);
        v914 = 2;
        goto LABEL_391;
      }
      v903 = -1;
      do
      {
        v904 = v903;
        v905 = v903 + *(_DWORD *)a1[5] + 6;
        v906 = JSC::DFG::ByteCodeParser::get(v12, v905 | ((unint64_t)(v905 >> 31) << 32), v895, v896, v897, v898, v899, v900);
        JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, (unint64_t)v906, v907, v908, v909, v910, v911, v912);
        v913 = *(_DWORD *)a1[1];
        v903 = v904 + 1;
      }
      while ((int)(v904 + 2) < v913);
      if (v904 == -1)
        goto LABEL_529;
      if (v903 >= 4)
        goto LABEL_395;
      v914 = v904 + 2;
LABEL_391:
      v915 = v914 - 5;
      do
      {
        v916 = JSC::DFG::ByteCodeParser::jsConstant((uint64_t *)v12, 0, v895, v896, v897, v898, v899, v900);
        JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, (unint64_t)v916, v917, v918, v919, v920, v921, v922);
      }
      while (!__CFADD__(v915++, 1));
      v913 = *(_DWORD *)a1[1];
LABEL_395:
      if (v913 <= 1)
        v924 = 0;
      else
        v924 = (v913 - 2);
      v37 = JSC::DFG::ByteCodeParser::addToGraph(v12, 0x14Au, 0, v924, v897, v898, v899, v900);
      v42 = a1[3];
      v43 = *(unsigned __int8 **)v42;
      if (**(_BYTE **)v42)
      {
        __break(0xC471u);
        JUMPOUT(0x198341B20);
      }
LABEL_10:
      v44 = (_QWORD *)v37;
LABEL_11:
      v46 = (int *)*((_QWORD *)v42 + 1);
      v45 = *((_QWORD *)v42 + 2);
      v47 = *v46;
      if (v46[1] == 2)
      {
        if (v47 < 0)
          goto LABEL_15;
        goto LABEL_13;
      }
      if (v47 != 0x3FFFFFFF)
      {
LABEL_13:
        v48 = *(_QWORD *)v46;
LABEL_14:
        JSC::DFG::ByteCodeParser::set(v45, v48, (uint64_t)v44, 0, v38, v39, v40, v41);
        v43 = *(unsigned __int8 **)v42;
      }
LABEL_15:
      v10 = 1;
      *v43 = 1;
      return v10;
    case 0x9Du:
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_730;
    case 0x9Eu:
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      v1374 = a1[3];
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 24) + 16) & 0xFFFFFFFE) == 4)
        v1800 = 7;
      else
        v1800 = 6;
      goto LABEL_698;
    case 0x9Fu:
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      JSC::DFG::ByteCodeParser::addToGraph(v12, 379, 0, 0, 0, v1916, v1917, v1918);
      goto LABEL_618;
    case 0xA0u:
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      v1374 = a1[3];
      if (HIBYTE(qword_1ECF4C414) && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 24) + 16) & 0xFFFFFFFE) != 4)
        v1800 = 6;
      else
        v1800 = 7;
LABEL_698:
      v1799 = (uint64_t *)v12;
      goto LABEL_731;
    case 0xA1u:
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      if (*(int *)a1[1] >= 2)
      {
        v1842 = 6;
        do
        {
          v1843 = (v1842 + *(_DWORD *)a1[5]);
          v1844 = JSC::DFG::ByteCodeParser::get(v12, v1843 | ((unint64_t)(v1843 >> 31) << 32), v1838, v1839, v1840, v1841, v1609, v1610);
          if (JSC::DFG::Node::hasHeapPrediction(v1844))
            *((_QWORD *)v1844 + 10) = 0x300000000;
          v1845 = v1842 - 4;
          ++v1842;
        }
        while (v1845 < *(_DWORD *)a1[1]);
      }
      goto LABEL_618;
    case 0xA2u:
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      if (*(int *)a1[1] >= 2)
      {
        v1919 = 6;
        do
        {
          v1920 = (v1919 + *(_DWORD *)a1[5]);
          v1921 = JSC::DFG::ByteCodeParser::get(v12, v1920 | ((unint64_t)(v1920 >> 31) << 32), v1793, v1794, v1795, v1796, v1797, v1798);
          JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 23, (unint64_t)v1921 & 0xFF00FFFFFFFFFFFFLL | 0x4000000000000, 0, 0, v1922, v1923, v1924);
          v1925 = v1919 - 4;
          ++v1919;
        }
        while (v1925 < *(_DWORD *)a1[1]);
      }
LABEL_730:
      v1374 = a1[3];
      v1799 = (uint64_t *)v12;
      v1800 = 7;
      goto LABEL_731;
    case 0xA3u:
      if (*(int *)a1[1] < 2)
        return v10;
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], a2, a3, a4, a5, a6, a7, a8);
      v1820 = (*(_DWORD *)a1[5] + 6);
      v1374 = a1[3];
      v1370 = JSC::DFG::ByteCodeParser::get(v12, v1820 | ((unint64_t)(v1820 >> 31) << 32), v1821, v1822, v1823, v1824, v1825, v1826);
      v1375 = v12;
      v1376 = 61;
LABEL_566:
      v1377 = 0;
LABEL_567:
      v1378 = JSC::DFG::ByteCodeParser::addToGraph(v1375, v1376, (uint64_t)v1370, (uint64_t)v1377, 0, v1371, v1372, v1373);
      goto LABEL_568;
    case 0xA8u:
    case 0xA9u:
    case 0xAAu:
    case 0xABu:
    case 0xACu:
    case 0xADu:
    case 0xAEu:
    case 0xAFu:
      if (*(int *)a1[1] < 2
        || JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(v12 + 280) + 32), *(_DWORD *)(v12 + 40), 1))
      {
        return v10;
      }
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], v1612, v1613, v1614, v1615, v1616, v1617, v1618);
      v1625 = 0;
      v1626 = 0;
      v1627 = 0;
      v1628 = 0x200000000;
      v1629 = 427;
      v1630 = 2;
      v1631 = 1;
      switch(**a1)
      {
        case 0xA8u:
          v1627 = 0;
          v1626 = 256;
          v1631 = 1;
          goto LABEL_633;
        case 0xA9u:
          goto LABEL_633;
        case 0xAAu:
          v1630 = 2;
          v1626 = 256;
          break;
        case 0xABu:
          break;
        case 0xACu:
          v1625 = 256;
          goto LABEL_826;
        case 0xADu:
LABEL_826:
          v1630 = 4;
          v1626 = v1625;
          break;
        case 0xAEu:
          v1626 = 0;
          v1629 = 428;
          v1630 = 4;
          break;
        case 0xAFu:
          v1626 = 0;
          v1629 = 428;
          v1630 = 8;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198344964);
      }
      if (*(int *)a1[1] < 3)
      {
        v1627 = 0;
        v1628 = 0;
        goto LABEL_632;
      }
      v1632 = (*(_DWORD *)a1[5] + 7);
      v1627 = JSC::DFG::ByteCodeParser::get(v12, v1632 | ((unint64_t)(v1632 >> 31) << 32), v1619, v1620, v1621, v1622, v1623, v1624);
      if (!JSC::DFG::Node::hasConstant(v1627))
        goto LABEL_632;
      v1633 = *((unsigned __int16 *)v1627 + 9);
      if (v1633 == 355 || v1633 == 348)
      {
        v1634 = (JSC::JSValue **)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
        {
          JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
          LODWORD(qword_1EE342DB8) = 0;
          goto LABEL_632;
        }
      }
      else
      {
        v1634 = (JSC::JSValue **)*((_QWORD *)v1627 + 9);
      }
      if (*v1634)
      {
        v1635 = JSC::JSValue::pureToBoolean(*v1634);
        if ((_DWORD)v1635 != 2)
          v1627 = 0;
        v1628 = v1635 << 32;
      }
LABEL_632:
      v1631 = v1630;
LABEL_633:
      if (JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(v12 + 280) + 32), *(_DWORD *)(v12 + 40), 29))
      {
        v1643 = 0x10000;
      }
      else
      {
        v1643 = (JSC::DFG::ByteCodeParser::getArrayMode(v12, 0, v1642) >> 14) & 0x10000;
      }
      v1644 = a1[3];
      v1645 = v1626 & 0x100 | (unint64_t)v1643 | v1631 | v1628;
      v1646 = *(_QWORD *)a1[9];
      v1647 = (*(_DWORD *)a1[5] + 5);
      v1648 = JSC::DFG::ByteCodeParser::get(v12, v1647 | ((unint64_t)(v1647 >> 31) << 32), v1636, v1637, v1638, v1639, v1640, v1641);
      v1649 = (*(_DWORD *)a1[5] + 6);
      v1656 = JSC::DFG::ByteCodeParser::get(v12, v1649 | ((unint64_t)(v1649 >> 31) << 32), v1650, v1651, v1652, v1653, v1654, v1655);
      v1325 = JSC::DFG::ByteCodeParser::addToGraph(v12, v1629, v1645, v1646, (uint64_t)v1648, (uint64_t)v1656, (uint64_t)v1627, v1657);
      v1326 = (uint64_t)v1644;
      goto LABEL_553;
    case 0xB0u:
    case 0xB1u:
    case 0xB2u:
    case 0xB3u:
    case 0xB4u:
    case 0xB5u:
    case 0xB6u:
    case 0xB7u:
      if (*(int *)a1[1] < 3
        || JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(v12 + 280) + 32), *(_DWORD *)(v12 + 40), 1))
      {
        return v10;
      }
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], v1534, v1535, v1536, v1537, v1538, v1539, v1540);
      v1547 = 0;
      v1548 = 0;
      v1549 = 0;
      v1550 = 0;
      v1551 = 0x200000000;
      v1552 = 2;
      v1553 = 1;
      switch(**a1)
      {
        case 0xB0u:
          v1549 = 0;
          v1550 = 0;
          v1548 = 256;
          v1553 = 1;
          goto LABEL_615;
        case 0xB1u:
          goto LABEL_615;
        case 0xB2u:
          v1549 = 0;
          v1552 = 2;
          v1548 = 256;
          goto LABEL_612;
        case 0xB3u:
          goto LABEL_612;
        case 0xB4u:
          v1547 = 256;
          goto LABEL_820;
        case 0xB5u:
LABEL_820:
          v1549 = 0;
          v1552 = 4;
          v1548 = v1547;
          goto LABEL_612;
        case 0xB6u:
          v1548 = 0;
          v1552 = 4;
          goto LABEL_611;
        case 0xB7u:
          v1548 = 0;
          v1552 = 8;
LABEL_611:
          v1549 = 0x1000000;
LABEL_612:
          if (*(int *)a1[1] < 4)
          {
            v1550 = 0;
            v1551 = 0;
            goto LABEL_614;
          }
          v1554 = (*(_DWORD *)a1[5] + 8);
          v1550 = JSC::DFG::ByteCodeParser::get(v12, v1554 | ((unint64_t)(v1554 >> 31) << 32), v1541, v1542, v1543, v1544, v1545, v1546);
          if (!JSC::DFG::Node::hasConstant(v1550))
            goto LABEL_614;
          v1954 = *((unsigned __int16 *)v1550 + 9);
          if (v1954 == 355 || v1954 == 348)
          {
            v1955 = (JSC::JSValue **)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
            {
              JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
              LODWORD(qword_1EE342DB8) = 0;
              goto LABEL_614;
            }
          }
          else
          {
            v1955 = (JSC::JSValue **)*((_QWORD *)v1550 + 9);
          }
          if (*v1955)
          {
            v1956 = JSC::JSValue::pureToBoolean(*v1955);
            if ((_DWORD)v1956 != 2)
              v1550 = 0;
            v1551 = v1956 << 32;
          }
LABEL_614:
          v1553 = v1552;
LABEL_615:
          if (JSC::DFG::QueryableExitProfile::hasExitSite((uint64_t *)(*(_QWORD *)(v12 + 280) + 32), *(_DWORD *)(v12 + 40), 29))
          {
            v1562 = 0x10000;
          }
          else
          {
            v1562 = (JSC::DFG::ByteCodeParser::getArrayMode(v12, 0, v1561) >> 14) & 0x10000;
          }
          v1563 = (*(_DWORD *)a1[5] + 5);
          v1564 = JSC::DFG::ByteCodeParser::get(v12, v1563 | ((unint64_t)(v1563 >> 31) << 32), v1555, v1556, v1557, v1558, v1559, v1560);
          JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, (unint64_t)v1564, v1565, v1566, v1567, v1568, v1569, v1570);
          v1571 = (*(_DWORD *)a1[5] + 6);
          v1578 = JSC::DFG::ByteCodeParser::get(v12, v1571 | ((unint64_t)(v1571 >> 31) << 32), v1572, v1573, v1574, v1575, v1576, v1577);
          JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, (unint64_t)v1578, v1579, v1580, v1581, v1582, v1583, v1584);
          v1585 = (*(_DWORD *)a1[5] + 7);
          v1592 = JSC::DFG::ByteCodeParser::get(v12, v1585 | ((unint64_t)(v1585 >> 31) << 32), v1586, v1587, v1588, v1589, v1590, v1591);
          JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, (unint64_t)v1592, v1593, v1594, v1595, v1596, v1597, v1598);
          JSC::DFG::ByteCodeParser::addVarArgChild((JSC::DFG::ByteCodeParser *)v12, (unint64_t)v1550, v1599, v1600, v1601, v1602, v1603, v1604);
          JSC::DFG::ByteCodeParser::addToGraph(v12, 0x1ADu, v1549 | v1553 | v1548 & 0x100 | (unint64_t)v1551 | v1562, 0, v1605, v1606, v1607, v1608);
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198344908);
      }
LABEL_618:
      v1374 = a1[3];
      v1611 = *(__int128 **)(v12 + 72);
      goto LABEL_619;
    case 0xB8u:
      if (*(_WORD *)a1[11] != 241)
        return v10;
      v1846 = (uint64_t *)(*(_QWORD *)(v12 + 280) + 32);
      v1847 = *(_DWORD *)(v12 + 40);
      if (JSC::DFG::QueryableExitProfile::hasExitSite(v1846, v1847, 1)
        || JSC::DFG::QueryableExitProfile::hasExitSite(v1846, v1847, 2)
        || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 24) + 16) & 0xFFFFFFFE) != 4)
      {
        return 3;
      }
      v1855 = *(_QWORD *)a1[8];
      v10 = 3;
      if (!v1855 || *(_BYTE *)(v1855 + 5) != 26)
        return v10;
      JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0::operator()(a1[2], v1848, v1849, v1850, v1851, v1852, v1853, v1854);
      v1862 = JSC::DFG::Graph::freeze(*(_QWORD *)(v12 + 24), v1855, v1856, v1857, v1858, v1859, v1860, v1861);
      JSC::DFG::ByteCodeParser::addToGraph((JSC::DFG::ByteCodeParser *)v12, 182, (uint64_t)v1862, *(_QWORD *)a1[10] & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000, 0, v1863, v1864, v1865);
      if (*a1[7])
      {
        __break(0xC471u);
        JUMPOUT(0x198344D88);
      }
      v1872 = *(_QWORD *)a1[6];
      v1873 = *(unsigned __int16 *)a1[11];
      v1874 = JSC::DFG::ByteCodeParser::jsConstant((JSC::DFG::ByteCodeParser *)v12, (JSC::DFG::FrozenValue *)v1862, v1866, v1867, v1868, v1869, v1870, v1871);
      JSC::DFG::ByteCodeParser::addCall(v12, v1872, v1873, (uint64_t)v1874, *(unsigned int *)a1[1], *(unsigned int *)a1[5], *(_QWORD *)a1[9]);
      goto LABEL_73;
    default:
      return v10;
  }
}

uint64_t JSC::DFG::ByteCodeParser::handleIntrinsicCall<JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0>(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,JSC::Intrinsic,int,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,JSC::CodeSpecializationKind,unsigned long long,JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0 const&)::{lambda(JSC::DFG::Node *)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  uint64_t result;
  int *v11;
  int v12;

  v8 = *(_BYTE **)a1;
  if (**(_BYTE **)a1)
  {
    __break(0xC471u);
    JUMPOUT(0x19834521CLL);
  }
  result = *(_QWORD *)(a1 + 16);
  v11 = *(int **)(a1 + 8);
  v12 = *v11;
  if (v11[1] == 2)
  {
    if (v12 < 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (v12 != 0x3FFFFFFF)
  {
LABEL_4:
    result = JSC::DFG::ByteCodeParser::set(result, *(_QWORD *)v11, a2, 0, a5, a6, a7, a8);
    v8 = *(_BYTE **)a1;
  }
LABEL_5:
  *v8 = 1;
  return result;
}

uint64_t JSC::DFG::ByteCodeParser::getArrayMode(uint64_t a1, int a2, int8x8_t a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  int *ArrayProfile;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x8_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  unsigned __int8 *v27;
  int v28;
  _BYTE v30[8];
  unsigned __int8 *v31;
  char v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 16);
  v6 = (unsigned __int8 *)(v5 + 16);
  v33 = 0;
  v31 = (unsigned __int8 *)(v5 + 16);
  v32 = 1;
  if (__ldaxr((unsigned __int8 *)(v5 + 16)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v6);
    goto LABEL_4;
  }
  if (__stxr(1u, v6))
    goto LABEL_3;
LABEL_4:
  v33 = 1;
  v8 = *(_QWORD *)(a1 + 448);
  v9 = *(unint64_t **)(*(_QWORD *)(v5 + 56) + 80);
  v10 = *v9;
  v11 = *((unsigned int *)v9 + 3) + *v9;
  if (v10 > v8 || v8 >= v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198345398);
  }
  ArrayProfile = (int *)JSC::CodeBlock::getArrayProfile(v5, a3, (uint64_t)v30, 4 * ((int)v8 - (int)v10));
  if (ArrayProfile)
  {
    v21 = (uint64_t)ArrayProfile;
    JSC::ArrayProfile::computeUpdatedPrediction(ArrayProfile, *(_QWORD *)(*(_QWORD *)(a1 + 280) + 16), v20);
    v22 = JSC::DFG::ArrayMode::fromObserved((uint64_t)v30, v21, a2, (*(_DWORD *)(v21 + 4) >> 1) & 1);
    v23 = v22 & 0xFF000000;
    v24 = v22 & 0xFF0000;
    v25 = v22 & 0xFF00;
    v26 = v22;
  }
  else
  {
    v25 = 0;
    v26 = 0;
    v24 = 0x10000;
    v23 = 0x10000000;
  }
  if (v33 && v32)
  {
    v27 = v31;
    v28 = __ldxr(v31);
    if (v28 == 1)
    {
      if (!__stlxr(0, v31))
        return v24 | v23 | v25 | v26;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v27, 0, v14, v15, v16, v17, v18, v19);
  }
  return v24 | v23 | v25 | v26;
}

uint64_t JSC::DFG::Node::hasHeapPrediction(JSC::DFG::Node *this)
{
  int v1;
  uint64_t result;
  BOOL v4;
  BOOL v5;

  v1 = *((unsigned __int16 *)this + 9);
  result = 1;
  if (v1 <= 151)
  {
    v4 = (v1 - 92) <= 0x33 && ((1 << (v1 - 92)) & 0xC000001FE000FLL) != 0 || v1 == 6;
    if (v4 || (v1 - 76) < 4)
      return result;
    return 0;
  }
  if (v1 <= 263)
  {
    switch(v1)
    {
      case 152:
      case 154:
      case 171:
      case 173:
      case 174:
      case 176:
      case 193:
      case 194:
      case 202:
      case 203:
      case 204:
      case 205:
      case 207:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
      case 224:
      case 225:
      case 241:
      case 242:
      case 243:
      case 244:
      case 245:
      case 246:
      case 247:
      case 249:
      case 250:
      case 251:
      case 252:
      case 253:
      case 254:
      case 255:
        return result;
      default:
        return 0;
    }
    return result;
  }
  v5 = (v1 - 388) > 0x2A || ((1 << (v1 + 124)) & 0x5803040C6C1) == 0;
  if (v5
    && ((v1 - 321) > 0x25 || ((1 << (v1 - 65)) & 0x280040002FLL) == 0)
    && v1 != 264)
  {
    return 0;
  }
  return result;
}

uint64_t JSC::JSValue::pureToBoolean(JSC::JSValue *this)
{
  char *v2;
  BOOL v3;
  _BOOL4 v4;

  if ((unint64_t)this >= 0xFFFE000000000000)
    return (_DWORD)this != 0;
  v2 = (char *)this - 0x2000000000000;
  if ((unint64_t)this - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v3 = *(double *)&v2 <= 0.0;
    v4 = *(double *)&v2 < 0.0;
    return !v3 || v4;
  }
  else if (((unint64_t)this & 0xFFFE000000000002) != 0)
  {
    return this == (JSC::JSValue *)7;
  }
  else
  {
    return JSC::JSCell::pureToBoolean(this);
  }
}

_QWORD *JSC::DFG::ByteCodeParser::CallOptimizationResult JSC::DFG::ByteCodeParser::handleIntrinsicCall<JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0>(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,JSC::Intrinsic,int,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,JSC::CodeSpecializationKind,unsigned long long,JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *,JSC::Operand,JSC::CallVariant,int,JSC::VirtualRegister,int,JSC::BytecodeIndex,JSC::DFG::NodeType,JSC::InlineCallFrame::Kind,unsigned long long,unsigned int &,JSC::DFG::BasicBlock *,BOOL)::$_0 const&)::{lambda(void)#1}::operator() const(void)::{lambda(JSC::JSValue)#1}::operator()(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  _QWORD *v19;

  v10 = JSC::DFG::Graph::freezeStrong(a2[3], a3, a3, a4, a5, a6, a7, a8);
  result = JSC::DFG::ByteCodeParser::jsConstant((JSC::DFG::ByteCodeParser *)a2, (JSC::DFG::FrozenValue *)v10, v11, v12, v13, v14, v15, v16);
  v19 = result;
  v18 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
  {
    result = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v18 + 1, (unint64_t)&v19);
    v18 = *(unsigned int *)(a1 + 12);
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = *result;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = result;
  }
  *(_DWORD *)(a1 + 12) = v18 + 1;
  return result;
}

__n128 WTF::Vector<JSC::DFG::ByteCodeParser::DelayedSetLocal,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::ByteCodeParser::DelayedSetLocal>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;

  v9 = WTF::Vector<JSC::DFG::ByteCodeParser::DelayedSetLocal,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12);
  v11 = *(_QWORD *)v9;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)v10 = v11;
  result = *(__n128 *)(v9 + 8);
  *(_DWORD *)(v10 + 24) = *(_DWORD *)(v9 + 24);
  *(__n128 *)(v10 + 8) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

__n128 WTF::Vector<JSC::DFG::InlineVariableData,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::InlineVariableData&>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 *v4;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<JSC::DFG::InlineVariableData,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (__n128 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
  result = *v3;
  v4[1].n128_u64[0] = v3[1].n128_u64[0];
  *v4 = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::DFG::InlineVariableData,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::InlineVariableData,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  v9 = *(unsigned int *)(result + 12);
  if (v8 < 5)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 4;
    goto LABEL_11;
  }
  if (v8 < 0xAAAAAAB)
  {
    v10 = 24 * v8;
    v11 = (void *)WTF::fastMalloc((WTF *)(24 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v4 = v11;
LABEL_11:
    memcpy(v11, v5, 24 * v9);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::DFG::InlineVariableData,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  const void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    v6 = *(const void **)a1;
    v7 = *(unsigned int *)(a1 + 12);
    if (v4 < 5)
    {
      v9 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
    }
    else
    {
      if (v4 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return;
      }
      v8 = 24 * v4;
      v9 = (void *)WTF::fastMalloc((WTF *)(24 * v4));
      *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v9;
    }
    memcpy(v9, v6, 24 * v7);
    if ((const void *)(a1 + 16) != v6 && v6)
    {
      if (*(const void **)a1 == v6)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v6, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

__n128 WTF::Vector<JSC::DFG::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::SwitchCase>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  __n128 result;
  __int128 v6;

  v3 = WTF::Vector<JSC::DFG::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (_OWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
  result = *(__n128 *)v3;
  v6 = *(_OWORD *)(v3 + 16);
  *v4 = *(_OWORD *)v3;
  v4[1] = v6;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::DFG::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 32 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::B3::Air::Arg,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 27))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 32 * v10;
      v20 = (__int128 *)v5;
      do
      {
        v21 = *v20;
        v22 = v20[1];
        v20 += 2;
        *v11 = v21;
        v11[1] = v22;
        v11 += 2;
        v19 -= 32;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::DFG::MultiGetByOffsetCase::MultiGetByOffsetCase(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = 0;
  v4 = *a2;
  if ((*a2 & 1) == 0 || v4 == 4)
    *(_QWORD *)a1 = v4 & 0xFFFFFFFFFFFFFFFDLL;
  else
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)a1, a2);
  v5 = *(_OWORD *)(a2 + 1);
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_OWORD *)(a1 + 8) = v5;
  return a1;
}

uint64_t WTF::Vector<JSC::DFG::MultiGetByOffsetCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::MultiGetByOffsetCase>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v9 = WTF::Vector<JSC::DFG::MultiGetByOffsetCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2, a4, a5, a6, a7, a8);
  v10 = *(unsigned int *)(a1 + 12);
  v11 = *(_QWORD *)a1;
  v12 = (uint64_t *)(*(_QWORD *)a1 + 32 * v10);
  *v12 = 0;
  v13 = *(_QWORD *)v9;
  if ((*(_QWORD *)v9 & 1) == 0 || v13 == 4)
    *v12 = v13 & 0xFFFFFFFFFFFFFFFDLL;
  else
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v12, (_QWORD *)v9);
  v14 = v11 + 32 * v10;
  v15 = *(_OWORD *)(v9 + 8);
  *(_QWORD *)(v14 + 24) = *(_QWORD *)(v9 + 24);
  *(_OWORD *)(v14 + 8) = v15;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<JSC::DFG::MultiGetByOffsetCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v10 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v11 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v11 >= 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    if (v12 > a2)
      a2 = v12;
    WTF::Vector<JSC::DFG::MultiGetByOffsetCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v14 = a3 - v10;
    v15 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 > a2)
      a2 = v16;
    WTF::Vector<JSC::DFG::MultiGetByOffsetCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v14;
  }
  return v8;
}

uint64_t WTF::Vector<JSC::DFG::MultiGetByOffsetCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v8 = a2;
  v9 = result;
  v10 = *(_QWORD *)result;
  v11 = *(unsigned int *)(result + 12);
  if (a2 < 3)
  {
    v12 = result + 16;
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 2;
    goto LABEL_5;
  }
  if (!(a2 >> 27))
  {
    v12 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(v9 + 8) = v8;
    *(_QWORD *)v9 = v12;
LABEL_5:
    if ((_DWORD)v11)
    {
      v13 = 32 * v11;
      v14 = v10;
      do
      {
        *(_QWORD *)v12 = 0;
        v15 = *(_QWORD *)v14;
        if ((*(_QWORD *)v14 & 1) == 0 || v15 == 4)
          *(_QWORD *)v12 = v15 & 0xFFFFFFFFFFFFFFFDLL;
        else
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v12, (_QWORD *)v14);
        v16 = *(_OWORD *)(v14 + 8);
        *(_QWORD *)(v12 + 24) = *(_QWORD *)(v14 + 24);
        *(_OWORD *)(v12 + 8) = v16;
        if ((*(_QWORD *)v14 & 1) != 0)
          WTF::fastFree(*(_QWORD *)v14 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
        v12 += 32;
        v14 += 32;
        v13 -= 32;
      }
      while (v13);
    }
    if (v9 + 16 != v10 && v10 != 0)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::DFG::MultiGetByOffsetCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v8 = (int)a2;
  v10 = *(unsigned int *)(a1 + 12);
  if ((void *)v10 != a2)
  {
    v11 = (_QWORD *)(*(_QWORD *)a1 + 32 * (_QWORD)a2);
    v12 = 32 * v10 - 32 * (_QWORD)a2;
    do
    {
      if ((*v11 & 1) != 0)
        WTF::fastFree(*v11 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v11 += 4;
      v12 -= 32;
    }
    while (v12);
  }
  *(_DWORD *)(a1 + 12) = v8;
}

unint64_t WTF::Vector<JSC::DeleteByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  if (*(_DWORD *)(result + 8))
  {
    v8 = result;
    if (*(_DWORD *)(result + 12))
      *(_DWORD *)(result + 12) = 0;
    result = *(_QWORD *)result;
    if (v8 + 16 != *(_QWORD *)v8 && result != 0)
    {
      *(_QWORD *)v8 = 0;
      *(_DWORD *)(v8 + 8) = 0;
      WTF::fastFree(result, a2, a3, a4, a5, a6, a7, a8);
      result = *(_QWORD *)v8;
    }
    if (!result)
    {
      *(_QWORD *)v8 = v8 + 16;
      *(_DWORD *)(v8 + 8) = 2;
    }
  }
  return result;
}

uint64_t WTF::VectorBuffer<JSC::DeleteByVariant,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 3)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 2;
  }
  else if (a2 >= 0x6666667)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = 40 * a2;
    result = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(v2 + 8) = (v3 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v2 = result;
  }
  return result;
}

void WTF::Vector<JSC::DeleteByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(_QWORD *)a1;
    v4 = *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<JSC::DeleteByVariant,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    v12 = *(_QWORD *)a1;
    if ((_DWORD)v4)
    {
      v13 = 0;
      do
      {
        v14 = v12 + v13;
        *(_QWORD *)(v14 + 32) = 0;
        *(_QWORD *)(v14 + 32) = *(_QWORD *)(v3 + v13 + 32);
        *(_BYTE *)v14 = *(_BYTE *)(v3 + v13);
        *(_OWORD *)(v14 + 8) = *(_OWORD *)(v3 + v13 + 8);
        *(_DWORD *)(v14 + 24) = *(_DWORD *)(v3 + v13 + 24);
        v13 += 40;
      }
      while (40 * v4 != v13);
    }
    if (a1 + 16 != v3 && v3)
    {
      if (v12 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

uint64_t WTF::Vector<JSC::DFG::MatchStructureVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::MatchStructureVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  v15 = *(unsigned int *)(result + 12);
  if (v14 < 3)
  {
    v16 = (_OWORD *)(result + 16);
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 2;
    goto LABEL_13;
  }
  if (!(v14 >> 28))
  {
    v16 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v14));
    *(_DWORD *)(v9 + 8) = v14;
    *(_QWORD *)v9 = v16;
LABEL_13:
    if ((_DWORD)v15)
    {
      v17 = 16 * v15;
      v18 = (__int128 *)v10;
      do
      {
        v19 = *v18++;
        *v16++ = v19;
        v17 -= 16;
      }
      while (v17);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::DFG::MatchStructureVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v11 = (unint64_t)a2;
  else
    v11 = v10;
  if (v11 > v8)
  {
    v13 = *(_QWORD *)a1;
    v14 = *(unsigned int *)(a1 + 12);
    if (v11 < 3)
    {
      v15 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
    }
    else
    {
      if (v11 >> 28)
      {
        __break(0xC471u);
        return;
      }
      v15 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v11));
      *(_DWORD *)(a1 + 8) = v11;
      *(_QWORD *)a1 = v15;
    }
    if ((_DWORD)v14)
    {
      v16 = 16 * v14;
      v17 = (__int128 *)v13;
      do
      {
        v18 = *v17++;
        *v15++ = v18;
        v16 -= 16;
      }
      while (v16);
    }
    if (a1 + 16 != v13 && v13)
    {
      if (*(_QWORD *)a1 == v13)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void WTF::Vector<JSC::PutByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2, JSC::PutByVariant *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  JSC::PutByVariant *v11;
  JSC::PutByVariant *v12;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    v10 = *(unsigned int *)(a1 + 12);
    if (v10 > a2)
    {
      WTF::VectorDestructor<true,JSC::PutByVariant>::destruct((_QWORD *)(*(_QWORD *)a1 + (a2 << 6)), (_QWORD *)(*(_QWORD *)a1 + (v10 << 6)), (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 12) = a2;
      LODWORD(v10) = a2;
    }
    v11 = *(JSC::PutByVariant **)a1;
    v12 = *(JSC::PutByVariant **)a1;
    if (a2)
    {
      WTF::VectorBuffer<JSC::PutByVariant,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
      a3 = *(JSC::PutByVariant **)a1;
      v12 = v11;
      if (*(JSC::PutByVariant **)a1 != v11)
      {
        WTF::VectorTypeOperations<JSC::PutByVariant>::move(v11, (JSC::PutByVariant *)((char *)v11 + 64 * (unint64_t)v10), a3, a4, a5, a6, a7, a8);
        v12 = *(JSC::PutByVariant **)a1;
      }
    }
    if ((JSC::PutByVariant *)(a1 + 16) != v11 && v11 != 0)
    {
      if (v12 == v11)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v11, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v12 = *(JSC::PutByVariant **)a1;
    }
    if (!v12)
    {
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
    }
  }
}

uint64_t WTF::VectorBuffer<JSC::PutByVariant,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = result;
  if (a2 < 3)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 2;
    return 1;
  }
  v3 = a2;
  if (!(a2 >> 26))
  {
    v4 = WTF::fastMalloc((WTF *)(a2 << 6));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v4;
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::PutByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  JSC::PutByVariant *v3;
  JSC::PutByVariant *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(JSC::PutByVariant **)a1;
    v4 = (JSC::PutByVariant *)(*(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6));
    WTF::VectorBuffer<JSC::PutByVariant,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    WTF::VectorTypeOperations<JSC::PutByVariant>::move(v3, v4, *(JSC::PutByVariant **)a1, v5, v6, v7, v8, v9);
    if ((JSC::PutByVariant *)(a1 + 16) != v3 && v3 != 0)
    {
      if (*(JSC::PutByVariant **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  return 1;
}

_QWORD *WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *result;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v27;
  _QWORD *v28;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(88 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = v9 + 40;
    do
    {
      *(_QWORD *)(v18 - 24) = 0;
      *(_QWORD *)(v18 - 16) = v18;
      *(_QWORD *)(v18 - 8) = 8;
      v18 += 88;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v19 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v21 = v6;
    do
    {
      v28 = v19;
      if (*(_QWORD *)v21 != -1)
      {
        if (*(_QWORD *)v21)
        {
          v24 = WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::reinsert(a1, (uint64_t *)v21, v11, v12, v13, v14, v15, v16);
          v25 = *(_QWORD *)(v21 + 8);
          if (v21 + 24 != v25 && v25 != 0)
          {
            *(_QWORD *)(v21 + 8) = 0;
            *(_DWORD *)(v21 + 16) = 0;
            WTF::fastFree(v25, v10, v11, v12, v13, v14, v15, v16);
          }
          v27 = v28;
          if (v21 == a3)
            v27 = v24;
          v28 = v27;
        }
        else
        {
          v22 = *(_QWORD *)(v21 + 8);
          if (v21 + 24 != v22 && v22 != 0)
          {
            *(_QWORD *)(v21 + 8) = 0;
            *(_DWORD *)(v21 + 16) = 0;
            WTF::fastFree(v22, v10, v11, v12, v13, v14, v15, v16);
          }
        }
      }
      v21 += 88;
      --v7;
      v19 = v28;
    }
    while (v7);
    goto LABEL_27;
  }
  result = 0;
  if (v6)
  {
LABEL_27:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v19;
  }
  return result;
}

_QWORD *WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::reinsert(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t v25;
  _DWORD *v26;
  uint64_t *v27;
  int v28;
  int v29;

  v9 = *a1;
  if (*a1)
    v10 = *(_DWORD *)(v9 - 8);
  else
    v10 = 0;
  v11 = *a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = 1;
  do
  {
    v17 = v15;
    v18 = (_QWORD *)(v9 + 88 * v15);
    v15 = (v15 + v16++) & v10;
  }
  while (*v18);
  v19 = v17;
  v20 = v9 + 88 * v17;
  v23 = *(uint64_t ***)(v20 + 8);
  v22 = (uint64_t **)(v20 + 8);
  v21 = (unint64_t)v23;
  if (v22 + 2 != v23 && v21 != 0)
  {
    *v22 = 0;
    *(_DWORD *)(v9 + 88 * v17 + 16) = 0;
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
    v11 = *a2;
  }
  *v18 = v11;
  *v22 = (uint64_t *)(v22 + 2);
  v25 = v9 + 88 * v19;
  *(_QWORD *)(v25 + 16) = 8;
  v26 = (_DWORD *)(v25 + 16);
  v27 = (uint64_t *)a2[1];
  if (v27 == a2 + 3)
  {
    memcpy(v22 + 2, v27, 8 * *((unsigned int *)a2 + 5));
  }
  else
  {
    a2[1] = (uint64_t)(a2 + 3);
    *v22 = v27;
    v28 = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 8;
    *v26 = v28;
  }
  v29 = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(v9 + 88 * v19 + 20) = v29;
  return v18;
}

uint64_t WTF::Vector<JSC::DFG::BasicBlock *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

unint64_t WTF::Vector<JSC::DFG::BasicBlock *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::DFG::BasicBlock *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::DFG::BasicBlock *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

uint64_t WTF::Vector<JSC::DFG::BasicBlock *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  const void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(const void **)a1;
    v4 = *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<JSC::DFG::BasicBlock *,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    memcpy(*(void **)a1, v3, 8 * v4);
    if ((const void *)(a1 + 16) != v3 && v3 != 0)
    {
      if (*(const void **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  return 1;
}

uint64_t WTF::VectorBuffer<JSC::DFG::BasicBlock *,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = result;
  if (a2 < 2)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 1;
    return 1;
  }
  v3 = a2;
  if (!(a2 >> 29))
  {
    v4 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v4;
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned long long &>(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

unint64_t WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v7 = a3 - v5;
    WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v7;
  }
  else
  {
    WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<std::pair<JSC::VirtualRegister,JSC::DFG::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    v8 = a2;
    v10 = *(unsigned int *)(a1 + 12);
    if (v10 > a2)
    {
      *(_DWORD *)(a1 + 12) = a2;
      LODWORD(v10) = a2;
    }
    v11 = *(_QWORD *)a1;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return;
      }
      v12 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = v8;
      *(_QWORD *)a1 = v12;
      if ((_DWORD)v10 && v12 != (_OWORD *)v11)
      {
        v13 = 16 * v10;
        v14 = (__int128 *)v11;
        do
        {
          v15 = *v14++;
          *v12++ = v15;
          v13 -= 16;
        }
        while (v13);
      }
    }
    if (v11)
    {
      if (*(_QWORD *)a1 == v11)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v11, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

_QWORD *WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ICStatusContext *>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a3;
  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v10 < 9)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 8;
        goto LABEL_30;
      }
      if (!(v10 >> 29))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 8 * v6);
        if ((const void *)(a1 + 16) != v5 && v5)
        {
          if (*(const void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v25, v26, v27, v28, v29, v30, v31);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x1983469F4);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 9)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if ((const void *)(a1 + 16) != v5 && v5)
    {
      if (*(const void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return v3;
}

void WTF::HashTable<JSC::InlineCallFrame *,WTF::KeyValuePair<JSC::InlineCallFrame *,WTF::Vector<JSC::DFG::ArgumentPosition *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::InlineCallFrame *,WTF::Vector<JSC::DFG::ArgumentPosition *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::HashMap<JSC::InlineCallFrame *,WTF::Vector<JSC::DFG::ArgumentPosition *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTraits<WTF::Vector<JSC::DFG::ArgumentPosition *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::NullableHashTraits<JSC::InlineCallFrame *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  _QWORD *v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v9 + 24);
    do
    {
      *(v18 - 1) = 1;
      *v18 = 0;
      v18[1] = 0;
      v18 += 3;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    v21 = v7;
    v55 = a3;
    do
    {
      v22 = (uint64_t *)(v6 + 24 * v19);
      v23 = *v22;
      if (*v22 == 1)
      {
        v49 = v6 + 24 * v19;
        v52 = *(_QWORD *)(v49 + 8);
        v51 = (_QWORD *)(v49 + 8);
        v50 = v52;
        if (v52)
        {
          *v51 = 0;
          *(_DWORD *)(v6 + 24 * v19 + 16) = 0;
          v53 = v20;
          v54 = v21;
          WTF::fastFree(v50, v10, v11, v12, v13, v14, v15, v16);
          v21 = v54;
          v20 = v53;
        }
      }
      else if (v23 != -1)
      {
        v24 = *a1;
        if (*a1)
          v25 = *(_DWORD *)(v24 - 8);
        else
          v25 = 0;
        v26 = (~(v23 << 32) + v23) ^ ((unint64_t)(~(v23 << 32) + v23) >> 22);
        v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
        v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
        v29 = v25 & ((v28 >> 31) ^ v28);
        v30 = 1;
        do
        {
          v31 = v29;
          v32 = (_QWORD *)(v24 + 24 * v29);
          v29 = (v29 + v30++) & v25;
        }
        while (*v32 != 1);
        v33 = v31;
        v34 = v24 + 24 * v31;
        v37 = *(_QWORD *)(v34 + 8);
        v36 = (_QWORD *)(v34 + 8);
        v35 = v37;
        if (v37)
        {
          *v36 = 0;
          *(_DWORD *)(v24 + 24 * v31 + 16) = 0;
          v38 = v20;
          v39 = v21;
          WTF::fastFree(v35, v10, v11, v12, v13, v14, v15, v16);
          v21 = v39;
          v22 = (uint64_t *)(v6 + 24 * v19);
          v20 = v38;
          v23 = *v22;
        }
        *v32 = v23;
        v40 = v6 + 24 * v19;
        *v36 = 0;
        v36[1] = 0;
        v42 = *(_QWORD *)(v40 + 8);
        v41 = v40 + 8;
        *(_QWORD *)v41 = 0;
        *v36 = v42;
        v43 = *(_DWORD *)(v41 + 8);
        *(_DWORD *)(v41 + 8) = 0;
        v44 = v24 + 24 * v33;
        *(_DWORD *)(v44 + 16) = v43;
        v45 = *(_DWORD *)(v41 + 12);
        *(_DWORD *)(v41 + 12) = 0;
        *(_DWORD *)(v44 + 20) = v45;
        v46 = *(_QWORD *)v41;
        if (*(_QWORD *)v41)
        {
          *(_QWORD *)v41 = 0;
          *(_DWORD *)(v41 + 8) = 0;
          v47 = v20;
          v48 = v21;
          WTF::fastFree(v46, v10, v11, v12, v13, v14, v15, v16);
          v21 = v48;
          v20 = v47;
        }
        if (v22 == v55)
          v20 = v32;
      }
      ++v19;
    }
    while (v19 != v21);
    goto LABEL_26;
  }
  if (v6)
LABEL_26:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
}

_QWORD *WTF::Vector<JSC::DeferredSourceDump,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DeferredSourceDump&>(uint64_t a1, unint64_t a2)
{
  const JSC::DeferredSourceDump *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  v3 = (const JSC::DeferredSourceDump *)WTF::Vector<JSC::DeferredSourceDump,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = JSC::DeferredSourceDump::DeferredSourceDump((_QWORD *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12)), v3, v4, v5, v6, v7, v8, v9);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

_QWORD *JSC::DeferredSourceDump::DeferredSourceDump(_QWORD *this, const JSC::DeferredSourceDump *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::HandleSet *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  JSC::HandleSet *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  JSC::HandleSet *v27;
  JSC::HandleSet *v28;
  const JSC::DeferredSourceDump *v29;
  const JSC::DeferredSourceDump *v30;
  _QWORD *v31;
  _QWORD *v32;

  *this = 0;
  if (*(_QWORD *)a2)
  {
    v8 = *(JSC::HandleSet **)(((*(_QWORD *)a2 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v9 = (_QWORD *)*((_QWORD *)v8 + 5);
    if (!v9)
    {
      v31 = this;
      v27 = *(JSC::HandleSet **)(((*(_QWORD *)a2 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v29 = a2;
      JSC::HandleSet::grow(v8, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v8 = v27;
      a2 = v29;
      this = v31;
      v9 = (_QWORD *)*((_QWORD *)v27 + 5);
    }
    *((_QWORD *)v8 + 5) = *v9;
    v9[2] = 0;
    v10 = v9 + 2;
    *v9 = 0;
    v9[1] = 0;
    *this = v9 + 2;
    v11 = *(_QWORD **)a2;
    if (*(_QWORD *)a2)
      v11 = (_QWORD *)*v11;
    v12 = (unint64_t)(v10 - 2);
    if ((v11 != 0) != (*v10 != 0))
    {
      if (v11)
      {
        v13 = *(unint64_t **)((v12 & 0xFFFFFFFFFFFFF000) + 0x10);
        v14 = v13[3];
        v13 += 3;
        *(_QWORD *)v12 = v14;
        *(v10 - 1) = v13;
        *v13 = v12;
        *(_QWORD *)(v14 + 8) = v12;
      }
      else
      {
        v24 = *(_QWORD *)v12;
        v23 = (_QWORD *)*(v10 - 1);
        *v23 = *(_QWORD *)v12;
        *(_QWORD *)(v24 + 8) = v23;
        *(_QWORD *)v12 = 0;
        *(_QWORD *)(v12 + 8) = 0;
        v10 = (_QWORD *)*this;
      }
    }
    *v10 = v11;
  }
  this[1] = 0;
  v15 = *((_QWORD *)a2 + 1);
  if (v15)
  {
    v16 = *(JSC::HandleSet **)(((v15 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v17 = (_QWORD *)*((_QWORD *)v16 + 5);
    if (!v17)
    {
      v32 = this;
      v28 = v16;
      v30 = a2;
      JSC::HandleSet::grow(v16, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v16 = v28;
      a2 = v30;
      this = v32;
      v17 = (_QWORD *)*((_QWORD *)v28 + 5);
    }
    *((_QWORD *)v16 + 5) = *v17;
    v17[2] = 0;
    v18 = v17 + 2;
    *v17 = 0;
    v17[1] = 0;
    this[1] = v17 + 2;
    v19 = (_QWORD *)*((_QWORD *)a2 + 1);
    if (v19)
      v19 = (_QWORD *)*v19;
    v20 = (unint64_t)(v18 - 2);
    if ((v19 != 0) != (*v18 != 0))
    {
      if (v19)
      {
        v21 = *(unint64_t **)((v20 & 0xFFFFFFFFFFFFF000) + 0x10);
        v22 = v21[3];
        v21 += 3;
        *(_QWORD *)v20 = v22;
        *(v18 - 1) = v21;
        *v21 = v20;
        *(_QWORD *)(v22 + 8) = v20;
      }
      else
      {
        v26 = *(_QWORD *)v20;
        v25 = (_QWORD *)*(v18 - 1);
        *v25 = *(_QWORD *)v20;
        *(_QWORD *)(v26 + 8) = v25;
        *(_QWORD *)v20 = 0;
        *(_QWORD *)(v20 + 8) = 0;
        v18 = (_QWORD *)this[1];
      }
    }
    *v18 = v19;
  }
  this[2] = *((_QWORD *)a2 + 2);
  return this;
}

unint64_t WTF::Vector<JSC::DeferredSourceDump,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<JSC::DeferredSourceDump,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<JSC::DeferredSourceDump,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<JSC::DeferredSourceDump,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const JSC::DeferredSourceDump *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(_QWORD *)a1;
      v4 = *(unsigned int *)(a1 + 12);
      v5 = 24 * a2;
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v4)
      {
        v14 = 24 * v4;
        v15 = (const JSC::DeferredSourceDump *)v3;
        do
        {
          v16 = JSC::DeferredSourceDump::DeferredSourceDump(v6, v15, v8, v9, v10, v11, v12, v13);
          v17 = *((_QWORD *)v15 + 1);
          if (v17)
          {
            v18 = (uint64_t *)(v17 - 16);
            v19 = *(_QWORD *)(((v17 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v20 = *(uint64_t **)(v17 - 8);
            if (v20)
            {
              v21 = *v18;
              *v20 = *v18;
              *(_QWORD *)(v21 + 8) = v20;
              *v18 = 0;
              v18[1] = 0;
            }
            *v18 = *(_QWORD *)(v19 + 40);
            *(_QWORD *)(v19 + 40) = v18;
            *((_QWORD *)v15 + 1) = 0;
          }
          v22 = *(_QWORD *)v15;
          if (*(_QWORD *)v15)
          {
            v23 = (uint64_t *)(v22 - 16);
            v24 = *(_QWORD *)(((v22 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v25 = *(uint64_t **)(v22 - 8);
            if (v25)
            {
              v26 = *v23;
              *v25 = *v23;
              *(_QWORD *)(v26 + 8) = v25;
              *v23 = 0;
              v23[1] = 0;
            }
            *v23 = *(_QWORD *)(v24 + 40);
            *(_QWORD *)(v24 + 40) = v23;
            *(_QWORD *)v15 = 0;
          }
          v6 = v16 + 3;
          v15 = (const JSC::DeferredSourceDump *)((char *)v15 + 24);
          v14 -= 24;
        }
        while (v14);
      }
      if (v3)
      {
        if (*(_QWORD *)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

uint64_t JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  __int16 v45;
  uint64_t v46;

  v9 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 1) != 0)
  {
    v20 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v21 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v21 != 0x3FFFFFFF)
        ? (v22 = (_DWORD)v21 == -1)
        : (v22 = 1),
          v22))
    {
      v23 = 2;
    }
    else if (v21 >> 28)
    {
      v38 = a5;
      v40 = a1;
      v34 = a3;
      v36 = a4;
      v28 = v21;
      v29 = WTF::fastMalloc((WTF *)0x10);
      a4 = v36;
      a5 = v38;
      a3 = v34;
      v30 = v29;
      a1 = v40;
      *(_QWORD *)v30 = v20;
      *(_DWORD *)(v30 + 8) = v28;
      v23 = 1;
      v20 = v30;
    }
    else
    {
      v23 = v20;
      v20 = v21 << 36;
    }
    v9 = v20 | v23;
  }
  v42 = v9;
  v10 = *(_QWORD *)(a4 + 8);
  if ((v10 & 1) != 0)
  {
    v24 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    if ((v10 & 2) != 0
      || ((v25 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v25 != 0x3FFFFFFF)
        ? (v26 = (_DWORD)v25 == -1)
        : (v26 = 1),
          v26))
    {
      v27 = 2;
    }
    else if (v25 >> 28)
    {
      v39 = a5;
      v41 = a1;
      v35 = a3;
      v37 = a4;
      v31 = v25;
      v32 = WTF::fastMalloc((WTF *)0x10);
      a4 = v37;
      a5 = v39;
      a3 = v35;
      v33 = v32;
      a1 = v41;
      *(_QWORD *)v33 = v24;
      *(_DWORD *)(v33 + 8) = v31;
      v27 = 1;
      v24 = v33;
    }
    else
    {
      v27 = v24;
      v24 = v25 << 36;
    }
    v10 = v24 | v27;
  }
  v43 = v10;
  v44 = *(_WORD *)(a4 + 16);
  v46 = a5;
  v45 = a3;
  v18 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>(a1 + 1032, &v45, (uint64_t)&v42, &v46, a5, a6, a7, a8);
  if ((v43 & 1) != 0 && (v43 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v43 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  if ((v42 & 1) != 0 && (v42 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v42 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  *(_QWORD *)(v18 + 64) |= a2;
  return v18;
}

void JSC::DFG::CFAPhase::performForwardCFA(JSC::DFG::CFAPhase *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unsigned int v54;
  unsigned int *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  JSC::DFG::AbstractValue *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *casual;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int *v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  BOOL v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  unsigned int v136;
  unint64_t *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  WTF *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  WTF *v151;
  WTF *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  const char *v167;
  uint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  unsigned int v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t StatusReg;
  unint64_t v176;
  JSC::DFG::InPlaceAbstractState *v177;
  char *v178;
  WTF *v179;

  v9 = (*((_DWORD *)this + 55) + 1);
  *((_DWORD *)this + 55) = v9;
  if (*((_BYTE *)this + 216))
    WTF::dataLogF((WTF *)"CFA [%u]\n", a2, v9);
  v10 = *((_QWORD *)this + 4);
  if (!*(_DWORD *)(v10 + 60))
    return;
  v11 = 0;
  v12 = (uint64_t *)((char *)this + 208);
  v177 = (JSC::DFG::CFAPhase *)((char *)this + 72);
  v178 = (char *)this + 168;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (2)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v11);
    if (!v13 || !*(_BYTE *)(v13 + 16))
      goto LABEL_8;
    if (*((_BYTE *)this + 216))
      WTF::dataLog<char [10],JSC::DFG::BasicBlock,char [3]>(v13);
    v14 = *(unsigned int *)(v13 + 8);
    v15 = (unint64_t *)(2 * *v12);
    if (*v12 < 0)
      v16 = 63;
    else
      v16 = *v15;
    v176 = v11;
    if (v16 > v14)
    {
      v17 = (uint64_t *)(v15 + 1);
      v18 = *v12 >= 0 ? v17 : v12;
      v19 = (v14 >> 3) & 0x1FFFFFF8;
      v20 = 1 << v14;
      v21 = *(uint64_t *)((char *)v18 + v19);
      *(uint64_t *)((char *)v18 + v19) = v21 & ~v20;
      if ((v21 & v20) != 0)
        JSC::DFG::CFAPhase::injectOSR(this, (JSC::DFG::BasicBlock *)v13, a3, a4, a5, a6, a7, a8);
    }
    v22 = (_DWORD *)*((_QWORD *)this + 10);
    v23 = v22 + 2;
    v24 = *(unsigned int *)(*(_QWORD *)v22 + 1044);
    v25 = v22[5];
    if (v25 < v24)
    {
      if (v22[4] < v24)
        WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v22 + 2), (void *)*(unsigned int *)(*(_QWORD *)v22 + 1044), a3, a4, a5, a6, a7, a8);
      if (*v23)
        bzero((void *)(*v23 + 32 * v22[5]), 32 * v24 - 32 * v22[5]);
    }
    else if ((_DWORD)v25 != (_DWORD)v24)
    {
      v26 = (_QWORD *)(*v23 + 32 * v24);
      v27 = 32 * v25 - 32 * v24;
      do
      {
        if ((*v26 & 1) != 0)
          WTF::fastFree(*v26 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v26 += 4;
        v27 -= 32;
      }
      while (v27);
    }
    v22[5] = v24;
    if (*(_DWORD *)(*(_QWORD *)v22 + 944) == 2)
    {
      v90 = v22 + 6;
      v91 = *(unsigned int *)(*(_QWORD *)v22 + 1044);
      v92 = v22[9];
      if (v92 < v91)
      {
        if (v22[8] < v91)
          WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v22 + 6), (void *)*(unsigned int *)(*(_QWORD *)v22 + 1044), a3, a4, a5, a6, a7, a8);
        if (*v90)
          bzero((void *)(*v90 + 32 * v22[9]), 32 * v91 - 32 * v22[9]);
      }
      else if ((_DWORD)v92 != (_DWORD)v91)
      {
        v93 = (_QWORD *)(*v90 + 32 * v91);
        v94 = 32 * v92 - 32 * v91;
        do
        {
          if ((*v93 & 1) != 0)
            WTF::fastFree(*v93 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
          v93 += 4;
          v94 -= 32;
        }
        while (v94);
      }
      v22[9] = v91;
    }
    if (*(_BYTE *)(v13 + 12))
      v28 = 2;
    else
      v28 = 3;
    *((_DWORD *)this + 39) = v28;
    *((_DWORD *)this + 40) = v28;
    *((_QWORD *)this + 18) = v13;
    v29 = *((unsigned int *)this + 25);
    v30 = *((_QWORD *)this + 17);
    if (v30 < v29)
      v29 = *((_QWORD *)this + 17);
    if (v29 > 0x1F)
    {
      v33 = v29 & 0xFFFFFFE0;
      v34 = (char *)*((_QWORD *)this + 16);
      if (v33 < v29)
      {
        do
        {
          *(_DWORD *)&v34[(v33 >> 3) & 0x1FFFFFFFFFFFFFFCLL] &= ~(1 << v33);
          ++v33;
        }
        while (v29 != v33);
      }
      bzero(v34, (v29 >> 3) & 0x1FFFFFFC);
    }
    else if (v29)
    {
      v31 = 0;
      v32 = *((_QWORD *)this + 16);
      do
      {
        *(_DWORD *)(v32 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) &= ~(1 << v31);
        ++v31;
      }
      while (v29 != v31);
    }
    v35 = *((unsigned int *)this + 25);
    if (v30 >= v35)
      goto LABEL_42;
    v95 = v30 + 31;
    v96 = v35 + 31;
    if (((v35 + 31) ^ (v30 + 31)) >= 0x20)
    {
      v97 = v96 >> 5;
      if (v96 >> 5 < v95 >> 5)
      {
        __break(0xC471u);
        JUMPOUT(0x198347FD8);
      }
      v98 = 4 * v97;
      v99 = *(_QWORD *)(StatusReg + 752);
      if (!v99)
        goto LABEL_315;
      v100 = (unint64_t)(v98 + 15) >> 4;
      if (v35 <= 0xD00)
      {
        v101 = 23 * v100 + 7;
      }
      else if (v35 > 0x13880
             || (v101 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v100 + 626),
                 *(_DWORD *)(v99 + 8052) <= v101))
      {
LABEL_315:
        casual = (char *)bmalloc_allocate_casual(v98, 1);
        goto LABEL_152;
      }
      v103 = v99 + 8 * v101;
      v104 = v103 + 8064;
      *(_BYTE *)(v103 + 8064) = 1;
      v105 = *(unsigned int *)(v103 + 8080);
      if ((_DWORD)v105)
      {
        *(_DWORD *)(v104 + 16) = v105 - *(_DWORD *)(v104 + 20);
        casual = (char *)(*(_QWORD *)(v104 + 8) - v105);
      }
      else
      {
        v109 = *(_QWORD *)(v104 + 40);
        v110 = *(_QWORD *)(v104 + 24);
        if (!v109)
        {
          if (*(_BYTE *)(v104 + 5) == 6)
          {
            v135 = *(unsigned int *)(v104 + 32);
            v136 = *(_DWORD *)(v104 + 36);
            if (v135 < v136)
            {
              *(_QWORD *)(v104 + 8 * v135 + 56) = 0;
              v137 = (unint64_t *)(v99 + 8128 + 8 * v101 + 8 * v135);
              v138 = v136 - 1 - v135;
              while (v138)
              {
                v110 += 1024;
                v140 = *v137++;
                v139 = v140;
                LODWORD(v135) = v135 + 1;
                --v138;
                if (v140)
                {
                  v109 = __rbit64(v139);
                  *(_DWORD *)(v104 + 32) = v135;
                  *(_QWORD *)(v104 + 24) = v110;
                  goto LABEL_159;
                }
              }
              *(_DWORD *)(v104 + 32) = v136;
            }
          }
          *(_BYTE *)v104 = 0;
          goto LABEL_315;
        }
LABEL_159:
        v111 = __clz(v109);
        *(_QWORD *)(v104 + 40) = v109 & ~(0x8000000000000000 >> v111);
        casual = (char *)(v110 + 16 * v111);
      }
      *(_BYTE *)v104 = 0;
LABEL_152:
      v107 = v95 >> 5;
      memcpy(casual, *((const void **)this + 16), 4 * v107);
      bzero(&casual[4 * v107], 4 * (v97 - v107));
      v108 = *((_QWORD *)this + 16);
      if (v108)
        WTF::fastFree(v108, a2, a3, a4, a5, a6, a7, a8);
      *((_QWORD *)this + 16) = casual;
    }
    *((_QWORD *)this + 17) = v35;
LABEL_42:
    if (*(_DWORD *)(*(_QWORD *)v177 + 944) == 2)
    {
      v77 = *(_QWORD *)(v13 + 200);
      v78 = *(unsigned int *)(v77 + 108);
      if ((_DWORD)v78)
      {
        v79 = *(_QWORD *)(v77 + 96) + 8;
        for (i = 40 * v78; i; i -= 40)
        {
          v81 = *(_QWORD *)(v79 - 8);
          if (v81)
          {
            v82 = v81 & 0xFFFFFFFFFFFFFFFELL;
            if ((v81 & 1) == 0)
            {
              v83 = (_QWORD *)(*((_QWORD *)this + 10) + 8);
LABEL_103:
              v84 = *v83 + 32 * *(unsigned int *)(v82 + 20);
              v85 = *(_QWORD *)v84;
              if (v79 != v84)
              {
                if ((v85 & 1) != 0)
                  WTF::fastFree(v85 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                v86 = *(_QWORD *)v79;
                if ((*(_QWORD *)v79 & 1) == 0 || v86 == 4)
                {
                  if ((*(_BYTE *)v84 & 2) != 0)
                    v85 = v86 | 2;
                  else
                    v85 = v86 & 0xFFFFFFFFFFFFFFFDLL;
                  *(_QWORD *)v84 = v85;
                }
                else
                {
                  WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v84, (_QWORD *)v79);
                  v85 = *(_QWORD *)v84;
                }
              }
              v87 = v85 & 0xFFFFFFFFFFFFFFFDLL;
              v88 = v85 | 2;
              if ((*(_BYTE *)v79 & 2) == 0)
                v88 = v87;
              *(_QWORD *)v84 = v88;
              v89 = *(_QWORD *)(v79 + 24);
              *(_OWORD *)(v84 + 8) = *(_OWORD *)(v79 + 8);
              *(_QWORD *)(v84 + 24) = v89;
              *(_DWORD *)(v84 + 20) = v28;
              goto LABEL_113;
            }
            if (*(_WORD *)(v82 + 18) == 27)
            {
              v83 = (_QWORD *)(*((_QWORD *)this + 10) + 24);
              goto LABEL_103;
            }
          }
LABEL_113:
          v79 += 40;
        }
      }
    }
    *(_WORD *)(v13 + 15) = 1;
    *((_BYTE *)this + 152) = 1;
    *((_BYTE *)this + 164) = 0;
    *((_BYTE *)this + 154) = *(_BYTE *)(v13 + 12);
    if (*((_BYTE *)this + 216))
    {
      WTF::dataLog<char [18],JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>,char [2]>("      head vars: ", v13 + 120);
      if (*(_DWORD *)(*((_QWORD *)this + 4) + 944) == 2)
      {
        JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)(*(_QWORD *)(v13 + 200) + 96), 0, a6, a7, a8, (uint64_t *)&v179);
        WTF::dataLog<char [18],WTF::CString,char [2]>(&v179);
        v152 = v179;
        v179 = 0;
        if (v152)
        {
          if (*(_DWORD *)v152 == 1)
            WTF::fastFree((unint64_t)v152, a2, a3, a4, a5, a6, a7, a8);
          else
            --*(_DWORD *)v152;
        }
      }
    }
    if (!*(_DWORD *)(v13 + 220))
    {
LABEL_5:
      if (*((_BYTE *)this + 216))
      {
        v142 = (WTF *)WTF::dataLogF((WTF *)"      tail regs: ", a2);
        v143 = (void *)WTF::dataFile(v142);
        JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::dump((uint64_t)v178, v143, v144, v145, v146, v147, v148, v149);
        WTF::dataLogF((WTF *)"\n", v150);
      }
      goto LABEL_7;
    }
    v36 = 0;
    while (1)
    {
      if (*((_BYTE *)this + 216))
      {
        v153 = *(_QWORD *)(*(_QWORD *)(v13 + 208) + 8 * v36);
        WTF::dataLogF((WTF *)"      %s @%u: ", a2, (&JSC::DFG::dfgOpNames)[2 * *(unsigned __int16 *)(v153 + 18)], *(unsigned int *)(v153 + 20));
        if ((JSC::DFG::safeToExecute<JSC::DFG::InPlaceAbstractState>((uint64_t)v177, *((JSC::DFG::Graph **)this + 4), (JSC::DFG::Node *)v153, v154, v155, v156, v157, v158) & 1) == 0)WTF::dataLog<char [16]>("(UNSAFE) ");
        v166 = JSC::DFG::InPlaceAbstractState::variablesForDebugging(v177, v159, v160, v161, v162, v163, v164, v165);
        WTF::dataLog<JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>,char [2],JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>>(v166, (uint64_t)v178);
        WTF::dataLogF((WTF *)"\n", v167);
      }
      v37 = *((_QWORD *)this + 24);
      v38 = *(_QWORD *)(v37 + 72);
      if (v36 >= *(unsigned int *)(v38 + 220))
      {
        __break(0xC471u);
        JUMPOUT(0x198348330);
      }
      v39 = *(_QWORD *)(*(_QWORD *)(v38 + 208) + 8 * v36);
      *(_BYTE *)(v37 + 81) = 0;
      if ((*(_BYTE *)(v39 + 56) & 0x10) == 0)
      {
        v40 = 0;
        v41 = v39 + 24;
        while (1)
        {
          v42 = *(_QWORD *)(v41 + 8 * v40);
          if ((v42 & 0xFF00FFFFFFFFFFFFLL) == 0)
            goto LABEL_91;
          v43 = (v42 >> 50) & 0x3F;
          if (!(_DWORD)v43)
            goto LABEL_52;
          v44 = 0x300000000;
          switch((int)v43)
          {
            case 1:
            case 2:
              break;
            case 3:
              v44 = 0x1300000000;
              break;
            case 4:
              v44 = 0x7300000000;
              break;
            case 5:
              v44 = 0x3300000000;
              break;
            case 6:
            case 7:
              v44 = 0x10000000000;
              break;
            case 8:
            case 9:
              v44 = 0x2C00FFFFFFF7;
              break;
            case 10:
              v44 = 0x2E00FFFFFFF7;
              break;
            case 11:
              v44 = 0x20000FFFFFF7;
              break;
            case 12:
              v44 = 2;
              break;
            case 13:
              v44 = 4;
              break;
            case 14:
              v44 = 1;
              break;
            case 15:
              v44 = 0x100000;
              break;
            case 16:
              v44 = 0x40000;
              break;
            case 17:
              v44 = 0x2000000;
              break;
            case 18:
              v44 = 0x4000000;
              break;
            case 19:
              v44 = 0x22000FFFFFF7;
              break;
            case 20:
              v44 = 0x10000000;
              break;
            case 21:
            case 23:
              v44 = 805306368;
              break;
            case 22:
              v44 = 0x20030000000;
              break;
            case 24:
              v44 = 0x1B73F0000000;
              break;
            case 25:
              v44 = 0x40000000;
              break;
            case 26:
            case 27:
              v44 = 0x80000000000;
              break;
            case 28:
              v44 = 0x100000000000;
              break;
            case 29:
              v44 = 0x80000;
              break;
            case 30:
              v44 = 0x200000;
              break;
            case 31:
              v44 = 0x400000;
              break;
            case 32:
            case 33:
              v44 = 0x8000000;
              break;
            case 34:
              v44 = 0x800000;
              break;
            case 35:
              v44 = 0x1000000;
              break;
            case 36:
              v44 = 0x200000000000;
              break;
            case 37:
              v44 = 0x20000;
              break;
            case 38:
              v44 = 805437440;
              break;
            case 39:
              v44 = -536870913;
              break;
            case 40:
              v44 = -1073741825;
              break;
            case 41:
            case 42:
              v44 = 0xFFFFD3FF00000008;
              break;
            case 43:
              v44 = 0xFFFFFF0FFFFFFFFFLL;
              break;
            case 44:
              v44 = 0xFFFFF70FFFFFFFFFLL;
              break;
            case 45:
              v44 = 0xFFFFF70FCFFFFFFFLL;
              break;
            case 46:
            case 47:
              v44 = 0x20000000000;
              break;
            case 48:
              v44 = 0x30000000000;
              break;
            case 49:
              v44 = 0xF000000000;
              break;
            case 50:
              v44 = 0x3000000000;
              break;
            case 51:
              v44 = 0x1000000000;
              break;
            case 52:
              v44 = 0xC00000000;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x198348308);
          }
          v45 = *((_QWORD *)this + 24);
          v46 = *(_QWORD *)(v45 + 8);
          v47 = *(unsigned int *)((v42 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v48 = (uint64_t *)(v46 + 24);
          v49 = (uint64_t *)(v46 + 8);
          if ((v42 & 1) != 0)
            v49 = v48;
          v50 = *v49;
          v51 = (unint64_t *)(*v49 + 32 * v47);
          v53 = v51 + 1;
          v52 = v51[1];
          if ((v52 & ~v44) == 0)
          {
            *(_QWORD *)(v41 + 8 * v40) = v42 | 0x1000000000000;
            goto LABEL_52;
          }
          *(_QWORD *)(v41 + 8 * v40) = v42 & 0xFFFEFFFFFFFFFFFFLL;
          v54 = *(_DWORD *)(v45 + 88);
          v55 = (unsigned int *)v51 + 5;
          if ((v52 & 0x2800FFFFFFF7) == 0)
          {
            *v55 = v54;
            *v53 = v52 & v44;
            if ((v52 & v44) == 0)
            {
              *v53 = 0;
              v120 = v50 + 32 * v47;
              *(_DWORD *)(v120 + 16) = 0;
              if ((*v51 & 1) != 0)
                WTF::fastFree(*v51 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
              *v51 = 0;
              *(_QWORD *)(v120 + 24) = 0;
            }
            goto LABEL_52;
          }
          if (*v55 != v54)
          {
            if ((*v55 ^ v54) >= 2)
            {
              v113 = *v51;
              if (*v51 != 4)
              {
                *v51 = v113 | 2;
                v117 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v113 & 1) != 0)
                {
                  v131 = 2 * *v117;
                  while (v131 * 4)
                  {
                    v132 = *(_QWORD *)&v117[v131];
                    if ((*(_BYTE *)(v132 + 19) & 0xC) == 0)
                    {
                      v133 = *(_QWORD *)(v132 + 96);
                      v134 = (v133 & 1) != 0 ? (v133 >> 1) & 3 : *(unsigned __int8 *)(v133 + 4);
                      v131 -= 2;
                      if (v134 != 2)
                        continue;
                    }
                    v173 = v47;
                    v171 = v54;
                    WTF::fastFree((unint64_t)v117, a2, a3, a4, a5, a6, a7, a8);
                    v55 = (unsigned int *)v51 + 5;
                    v54 = v171;
                    v47 = v173;
                    goto LABEL_204;
                  }
                }
                else if (v117)
                {
                  if ((*((_BYTE *)v117 + 19) & 0xC) != 0
                    || ((v118 = *((_QWORD *)v117 + 12), (v118 & 1) != 0)
                      ? (v119 = (v118 >> 1) & 3)
                      : (v119 = *(unsigned __int8 *)(v118 + 4)),
                        v119 == 2))
                  {
LABEL_204:
                    *v51 = 4;
                  }
                }
              }
              *(_DWORD *)(v50 + 32 * v47 + 16) = -21020677;
            }
            if ((v54 & 1) != 0)
              *v51 &= ~2uLL;
            *v55 = v54;
            v52 = *v53;
          }
          v56 = v52 & v44;
          *v53 = v56;
          v57 = *v51;
          if ((v56 & 0x2800FFFFFFF7) == 0)
            break;
          if (v57 > 4 || ((1 << v57) & 0x15) == 0)
          {
            v114 = v57 & 0xFFFFFFFFFFFFFFFCLL;
            if ((v57 & 1) != 0)
            {
              v123 = *(_DWORD *)v114;
              if (!*(_DWORD *)v114)
                goto LABEL_238;
              v124 = 0;
              v125 = v114 + 8;
              do
              {
                if ((JSC::speculatedTypeMapping[*(unsigned __int8 *)(*(_QWORD *)(v125 + 8 * v124) + 9)] & v56) == 0)
                {
                  v141 = v124;
                  *(_DWORD *)v114 = --v123;
                  --v124;
                  *(_QWORD *)(v125 + 8 * v141) = *(_QWORD *)(v125 + 8 * v123);
                }
                ++v124;
              }
              while (v124 < v123);
              if (!v123)
              {
LABEL_238:
                v126 = v47;
                WTF::fastFree(v114, a2, a3, a4, a5, a6, a7, a8);
                v47 = v126;
                v57 = *v51;
LABEL_239:
                v57 &= 2u;
LABEL_66:
                *v51 = v57;
                v56 = *v53;
              }
            }
            else if (v114 && (JSC::speculatedTypeMapping[*(unsigned __int8 *)(v114 + 9)] & v56) == 0)
            {
              goto LABEL_239;
            }
          }
          if ((v56 & 0x2800FFFFFFF7) != 0)
          {
            if ((v56 & 0xFFFFFFFFFFFFFFFDLL) == 0)
              *(_DWORD *)(v50 + 32 * v47 + 16) &= 0x2A02AAAu;
          }
          else
          {
            *(_DWORD *)(v50 + 32 * v47 + 16) = 0;
          }
          v58 = v50 + 32 * v47;
          v61 = *(_QWORD *)(v58 + 24);
          v60 = (_QWORD *)(v58 + 24);
          v59 = v61;
          if (v61)
          {
            if ((v56 & 0xC00000000) != 0)
            {
              v172 = v59;
              v174 = v47;
              v169 = v60;
              v170 = v57;
              v168 = JSC::int52AwareSpeculationFromValue(v59);
              v60 = v169;
              v57 = v170;
              v59 = v172;
              v47 = v174;
              if ((v168 | v56) == v56)
                goto LABEL_131;
            }
            if (v59 >= 0xFFFE000000000000)
            {
              v121 = (v59 & 0xFFFFFFFE) == 0;
              v115 = 0x200000000;
              v122 = 0x100000000;
              goto LABEL_224;
            }
            if (v59 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              if ((v59 & 0xFFFE000000000002) == 0)
              {
                if (qword_1ECF4C080 > v59)
                  goto LABEL_352;
                v115 = 0;
                if (!(v59 >> 36) && (v59 & 0xFFFFFFFFFLL) != 0)
                {
                  v116 = *(unsigned __int8 *)(v59 + 5);
                  if (v116 != 2)
                  {
                    v115 = JSC::speculatedTypeMapping[v116];
                    goto LABEL_192;
                  }
                  v129 = *(_QWORD *)(v59 + 8);
                  v115 = 805306368;
                  if (v129)
                  {
                    if ((v129 & 1) == 0)
                    {
                      if (v129 >= qword_1ECF4C080)
                      {
                        v115 = 0;
                        if (!(v129 >> 36) && (v129 & 0xFFFFFFFFFLL) != 0)
                        {
                          if ((*(_BYTE *)(v129 + 16) & 0x10) != 0)
                            v115 = 0x10000000;
                          else
                            v115 = 805306368;
                        }
                        goto LABEL_192;
                      }
LABEL_352:
                      v115 = 0;
                    }
                  }
                }
LABEL_192:
                if ((v115 | v56) != v56)
                  *v60 = 0;
                goto LABEL_70;
              }
              v121 = (v59 & 0xFFFFFFFFFFFFFFFELL) == 6;
              v115 = 0x20000000000;
              v122 = 0x10000000000;
LABEL_224:
              if (v121)
                v115 = v122;
              goto LABEL_192;
            }
            v130 = (uint64_t)COERCE_DOUBLE(v59 - 0x2000000000000);
            if ((double)v130 != COERCE_DOUBLE(v59 - 0x2000000000000))
            {
LABEL_256:
              v115 = 0x2000000000;
              goto LABEL_192;
            }
            if (v130)
            {
              if ((unint64_t)(v130 + 0x8000000000000) >> 52)
                goto LABEL_256;
            }
            else if ((uint64_t)v59 < 0x2000000000000)
            {
              goto LABEL_256;
            }
            v115 = 0x1000000000;
            goto LABEL_192;
          }
LABEL_70:
          if (!v56)
            goto LABEL_71;
LABEL_131:
          if ((v56 & 0xFFFFD7FF00000008) == 0
            && (!*(_DWORD *)(v50 + 32 * v47 + 16) || (v57 & 0xFFFFFFFFFFFFFFFDLL) == 0))
          {
LABEL_71:
            *v53 = 0;
            *(_DWORD *)(v50 + 32 * v47 + 16) = 0;
            if ((v57 & 1) != 0)
            {
              v128 = v60;
              WTF::fastFree(v57 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
              v60 = v128;
            }
            *v51 = 0;
            *v60 = 0;
          }
LABEL_52:
          if (++v40 == 3)
            goto LABEL_91;
        }
        if ((v57 & 1) != 0)
        {
          v127 = v47;
          WTF::fastFree(v57 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
          v47 = v127;
        }
        v57 = 0;
        goto LABEL_66;
      }
      if (*(_DWORD *)(v39 + 32) + *(_QWORD *)(v39 + 24) > *(_QWORD *)(v39 + 24))
      {
        v62 = *((_QWORD *)this + 22);
        v63 = *(_QWORD *)(v39 + 24);
        do
        {
          if (v63 >= *(unsigned int *)(v62 + 164))
          {
            __break(0xC471u);
            JUMPOUT(0x198348378);
          }
          v64 = *(_QWORD *)(v62 + 152);
          v65 = *(_QWORD *)(v64 + 8 * v63);
          v66 = (v65 >> 50) & 0x3F;
          if ((v65 & 0xFF00FFFFFFFFFFFFLL) != 0 && (_DWORD)v66 != 0)
          {
            v68 = 0x300000000;
            switch((int)v66)
            {
              case 1:
              case 2:
                break;
              case 3:
                v68 = 0x1300000000;
                break;
              case 4:
                v68 = 0x7300000000;
                break;
              case 5:
                v68 = 0x3300000000;
                break;
              case 6:
              case 7:
                v68 = 0x10000000000;
                break;
              case 8:
              case 9:
                v68 = 0x2C00FFFFFFF7;
                break;
              case 10:
                v68 = 0x2E00FFFFFFF7;
                break;
              case 11:
                v68 = 0x20000FFFFFF7;
                break;
              case 12:
                v68 = 2;
                break;
              case 13:
                v68 = 4;
                break;
              case 14:
                v68 = 1;
                break;
              case 15:
                v68 = 0x100000;
                break;
              case 16:
                v68 = 0x40000;
                break;
              case 17:
                v68 = 0x2000000;
                break;
              case 18:
                v68 = 0x4000000;
                break;
              case 19:
                v68 = 0x22000FFFFFF7;
                break;
              case 20:
                v68 = 0x10000000;
                break;
              case 21:
              case 23:
                v68 = 805306368;
                break;
              case 22:
                v68 = 0x20030000000;
                break;
              case 24:
                v68 = 0x1B73F0000000;
                break;
              case 25:
                v68 = 0x40000000;
                break;
              case 26:
              case 27:
                v68 = 0x80000000000;
                break;
              case 28:
                v68 = 0x100000000000;
                break;
              case 29:
                v68 = 0x80000;
                break;
              case 30:
                v68 = 0x200000;
                break;
              case 31:
                v68 = 0x400000;
                break;
              case 32:
              case 33:
                v68 = 0x8000000;
                break;
              case 34:
                v68 = 0x800000;
                break;
              case 35:
                v68 = 0x1000000;
                break;
              case 36:
                v68 = 0x200000000000;
                break;
              case 37:
                v68 = 0x20000;
                break;
              case 38:
                v68 = 805437440;
                break;
              case 39:
                v68 = -536870913;
                break;
              case 40:
                v68 = -1073741825;
                break;
              case 41:
              case 42:
                v68 = 0xFFFFD3FF00000008;
                break;
              case 43:
                v68 = 0xFFFFFF0FFFFFFFFFLL;
                break;
              case 44:
                v68 = 0xFFFFF70FFFFFFFFFLL;
                break;
              case 45:
                v68 = 0xFFFFF70FCFFFFFFFLL;
                break;
              case 46:
              case 47:
                v68 = 0x20000000000;
                break;
              case 48:
                v68 = 0x30000000000;
                break;
              case 49:
                v68 = 0xF000000000;
                break;
              case 50:
                v68 = 0x3000000000;
                break;
              case 51:
                v68 = 0x1000000000;
                break;
              case 52:
                v68 = 0xC00000000;
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x198348370);
            }
            v69 = *((_QWORD *)this + 24);
            v70 = *(_QWORD *)(v69 + 8);
            v71 = *(unsigned int *)((v65 & 0xFF00FFFFFFFFFFFELL) + 0x14);
            v72 = (uint64_t *)(v70 + 24);
            v73 = (uint64_t *)(v70 + 8);
            if ((v65 & 1) != 0)
              v73 = v72;
            v74 = *v73;
            v75 = (JSC::DFG::AbstractValue *)(*v73 + 32 * v71);
            v76 = *((_QWORD *)v75 + 1);
            if ((v76 & ~v68) != 0)
            {
              *(_QWORD *)(v64 + 8 * v63) = v65 & 0xFFFEFFFFFFFFFFFFLL;
              v112 = *(unsigned int *)(v69 + 88);
              if ((v76 & 0x2800FFFFFFF7) != 0)
              {
                JSC::DFG::AbstractValue::fastForwardToAndFilterSlow((uint64_t)v75, (void *)v112, v68, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_DWORD *)(v74 + 32 * v71 + 20) = v112;
                *((_QWORD *)v75 + 1) = v76 & v68;
                if ((v76 & v68) == 0)
                  JSC::DFG::AbstractValue::clear(v75, v112, v68, a4, a5, a6, a7, a8);
              }
            }
            else
            {
              *(_QWORD *)(v64 + 8 * v63) = v65 | 0x1000000000000;
            }
          }
          ++v63;
        }
        while (v63 < (*(_DWORD *)(v39 + 32) + *(_DWORD *)(v39 + 24)));
      }
LABEL_91:
      if ((JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(v178, v36, v39) & 1) == 0)
        break;
      if (++v36 >= *(unsigned int *)(v13 + 220))
        goto LABEL_5;
    }
    if (*((_BYTE *)this + 216))
    {
      WTF::dataLogF((WTF *)"         Expect OSR exit.\n", a2);
      goto LABEL_5;
    }
LABEL_7:
    *((_BYTE *)this + 217) |= JSC::DFG::InPlaceAbstractState::endBasicBlock(v177, (unint64_t)a2, a3, a4, a5, a6, a7, a8);
    v12 = (uint64_t *)((char *)this + 208);
    v11 = v176;
    if (*((_BYTE *)this + 216))
    {
      WTF::dataLog<char [18],JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>,char [2]>("      tail vars: ", v13 + 144);
      if (*(_DWORD *)(*((_QWORD *)this + 4) + 944) == 2)
      {
        JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)(*(_QWORD *)(v13 + 200) + 112), 0, a6, a7, a8, (uint64_t *)&v179);
        WTF::dataLog<char [18],WTF::CString,char [2]>(&v179);
        v151 = v179;
        v179 = 0;
        if (v151)
        {
          if (*(_DWORD *)v151 == 1)
            WTF::fastFree((unint64_t)v151, a2, a3, a4, a5, a6, a7, a8);
          else
            --*(_DWORD *)v151;
        }
        v12 = (uint64_t *)((char *)this + 208);
        v11 = v176;
      }
    }
LABEL_8:
    ++v11;
    v10 = *((_QWORD *)this + 4);
    if (v11 < *(unsigned int *)(v10 + 60))
      continue;
    break;
  }
}

uint64_t JSC::DFG::CFAPhase::injectOSR(JSC::DFG::CFAPhase *this, JSC::DFG::BasicBlock *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::DFG::Node *v19;
  uint64_t v20;
  uint64_t v21;
  JSC::DFG::Graph *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t result;
  unint64_t v28;
  int v29;
  JSC::DFG::Node *v30;
  __int128 v31;
  unint64_t v32;

  if (*((_BYTE *)this + 216))
    WTF::dataLog<char [29],JSC::DFG::BasicBlock,char [2]>((uint64_t)a2);
  v10 = *(_QWORD *)(*((_QWORD *)this + 4) + 24);
  v11 = *(unsigned int *)(v10 + 92);
  if ((_DWORD)v11)
  {
    v12 = 0;
    while (1)
    {
      --v11;
      v13 = *(unsigned int *)(v10 + 96);
      if (v11 < v13)
      {
        LODWORD(v14) = v11 + 5;
        v13 = (v11 + 5) >> 31;
      }
      else
      {
        v14 = *(unsigned int *)(v10 + 100) + v13;
        v15 = v13 + ~(_DWORD)v11;
        LODWORD(v13) = v15 >> 31;
        v13 = v11 < v14 ? v13 : 2;
        LODWORD(v14) = v11 < v14 ? v15 : v11 - v14;
      }
      v14 = v14;
      v32 = v14 | (v13 << 32);
      v31 = *(_OWORD *)(*(_QWORD *)(v10 + 80) + 16 * v11);
      if (BYTE8(v31))
        break;
      if (*((_BYTE *)this + 216))
        WTF::dataLog<char [26],JSC::Operand,char [2]>((int *)&v32);
LABEL_15:
      if (!v11)
      {
        if ((v12 & 1) == 0)
          goto LABEL_34;
LABEL_36:
        result = 1;
        *((_BYTE *)a2 + 16) = 1;
        return result;
      }
    }
    if ((_DWORD)v13 == 2)
    {
      v17 = *((unsigned int *)a2 + 23);
      v16 = *((unsigned int *)a2 + 22) + (uint64_t)(int)v14;
    }
    else
    {
      if ((v14 & 0x80000000) == 0)
      {
        v18 = (int)v14 - 5;
LABEL_21:
        v19 = *(JSC::DFG::Node **)(*((_QWORD *)a2 + 9) + 8 * v18);
        if (v19)
        {
          if (*((_BYTE *)this + 216))
          {
            v29 = v13;
            v30 = *(JSC::DFG::Node **)(*((_QWORD *)a2 + 9) + 8 * v18);
            v28 = v14;
            WTF::dataLog<char [13],JSC::Operand,char [7],JSC::JSValue,char [2]>((int *)&v32, (JSC::JSValue *)&v31);
            v14 = v28;
            LODWORD(v13) = v29;
            v19 = v30;
          }
          if ((_DWORD)v13 == 2)
          {
            v20 = *((unsigned int *)a2 + 34) + (uint64_t)(int)v14 + *((unsigned int *)a2 + 35);
          }
          else if ((v14 & 0x80000000) != 0)
          {
            v20 = (v14 ^ 0xFFFFFFFF) + *((unsigned int *)a2 + 34);
          }
          else
          {
            v20 = (int)v14 - 5;
          }
          v21 = *((_QWORD *)a2 + 15);
          v22 = (JSC::DFG::Graph *)*((_QWORD *)this + 4);
          v23 = v31;
          v24 = (uint64_t *)*((_QWORD *)v19 + 9);
          v25 = v24;
          do
          {
            v26 = (uint64_t)v25;
            v25 = (uint64_t *)*v25;
          }
          while (v25);
          if ((uint64_t *)v26 != v24)
            *v24 = v26;
          v12 |= JSC::DFG::AbstractValue::mergeOSREntryValue(v21 + 32 * v20, v22, v23, v26, v19, a6, a7, a8);
        }
        else if (*((_BYTE *)this + 216))
        {
          WTF::dataLog<char [14],JSC::Operand,char [2]>((int *)&v32);
        }
        goto LABEL_15;
      }
      v16 = v14 ^ 0xFFFFFFFFLL;
      v17 = *((unsigned int *)a2 + 22);
    }
    v18 = v16 + v17;
    goto LABEL_21;
  }
LABEL_34:
  if (!*((_BYTE *)a2 + 15))
    goto LABEL_36;
  return 0;
}

JSC::DFG::AbstractValue *JSC::DFG::AbstractValue::AbstractValue(JSC::DFG::AbstractValue *this, const JSC::DFG::AbstractValue *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)this = 0;
  v4 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) == 0 || v4 == 4)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFDLL;
    *(_QWORD *)this = v5;
  }
  else
  {
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)this, a2);
    v5 = *(_QWORD *)this;
  }
  v6 = v5 & 0xFFFFFFFFFFFFFFFDLL;
  v7 = v5 | 2;
  if ((*(_BYTE *)a2 & 2) == 0)
    v7 = v6;
  *(_QWORD *)this = v7;
  v8 = *(_OWORD *)((char *)a2 + 8);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *(_OWORD *)((char *)this + 8) = v8;
  return this;
}

uint64_t WTF::dataLog<char [10],JSC::DFG::BasicBlock,char [3]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  char v7;
  char **v8;
  char *v9;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "   Block ");
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v5, "%s", "#");
  WTF::PrintStream::printf(v5, "%u", *(_DWORD *)(a1 + 8));
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", ":\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [18],JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>,char [2]>(const char *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", a1);
  JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::dump(a2, (uint64_t)v6);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [18],WTF::CString,char [2]>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  const char *v5;
  char v7;
  char **v8;
  char *v9;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "      head regs: ");
  if (*a1)
    v5 = (const char *)(*a1 + 16);
  else
    v5 = 0;
  WTF::PrintStream::printf(v4, "%s", v5);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t *a1@<X0>, JSC::DFG::AbstractValue *a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t *a6@<X8>)
{
  unint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::DFG::AbstractValue *v25;
  JSC::DFG::NodeFlowProjection *v26;
  WTF::PrintStream *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  JSC::DFG::AbstractValue *v45[2];
  _QWORD v46[2];
  _QWORD v47[4];
  char v48;
  void (**v49)(WTF::StringPrintStream *__hidden);
  WTF *v50;
  __int128 v51;
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v8 = *((unsigned int *)a1 + 3);
  if ((_DWORD)v8)
  {
    if (v8 >= 0x6666667)
    {
      __break(0xC471u);
      goto LABEL_40;
    }
    v10 = (uint64_t *)WTF::fastMalloc((WTF *)(40 * v8));
    v11 = *((unsigned int *)a1 + 3);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = *a1;
      v14 = 40 * v11;
      do
      {
        v10[v12 / 8] = *(_QWORD *)(v13 + v12);
        v10[v12 / 8 + 1] = 0;
        v15 = (unint64_t *)&v10[v12 / 8 + 1];
        v16 = *(_QWORD *)(v13 + v12 + 8);
        if ((v16 & 1) == 0 || v16 == 4)
        {
          v17 = v16 & 0xFFFFFFFFFFFFFFFDLL;
          *v15 = v17;
        }
        else
        {
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(&v10[v12 / 8 + 1], (_QWORD *)(v13 + v12 + 8));
          v17 = *v15;
        }
        v18 = v17 & 0xFFFFFFFFFFFFFFFDLL;
        v19 = v17 | 2;
        if ((*(_BYTE *)(v13 + v12 + 8) & 2) == 0)
          v19 = v18;
        *v15 = v19;
        v20 = &v10[v12 / 8];
        v21 = *(_OWORD *)(v13 + v12 + 16);
        v20[4] = *(_QWORD *)(v13 + v12 + 32);
        *((_OWORD *)v20 + 1) = v21;
        v12 += 40;
      }
      while (v14 != v12);
    }
  }
  else
  {
    v10 = 0;
  }
  v22 = 126 - 2 * __clz(v8);
  if ((_DWORD)v8)
    v23 = v22;
  else
    v23 = 0;
  std::__introsort<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*,false>(v10, &v10[5 * v8], &v49, v23, 1, a3, a4, a5);
  v49 = off_1E3572250;
  v50 = (WTF *)v52;
  v51 = xmmword_199122F80;
  v52[0] = 0;
  v47[0] = ", ";
  v47[1] = 3;
  v47[2] = "";
  v47[3] = 1;
  v48 = 0;
  if ((_DWORD)v8)
  {
    v24 = 40 * v8;
    v25 = (JSC::DFG::AbstractValue *)(v10 + 1);
    v26 = (JSC::DFG::NodeFlowProjection *)v10;
    do
    {
      v46[0] = "=>";
      v46[1] = 3;
      v45[0] = v25;
      v45[1] = a2;
      v27 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v49[4])(&v49);
      WTF::PrintStream::printImpl<WTF::CommaPrinter,JSC::DFG::NodeFlowProjection,WTF::ASCIILiteral,WTF::ValueInContext<JSC::DFG::AbstractValue,JSC::DumpContext>>(v27, (uint64_t)v47, v26, (uint64_t)v46, v45);
      v49[5]((WTF::StringPrintStream *)&v49);
      v26 = (JSC::DFG::NodeFlowProjection *)((char *)v26 + 40);
      v25 = (JSC::DFG::AbstractValue *)((char *)v25 + 40);
      v24 -= 40;
    }
    while (v24);
    v36 = v50;
    v35 = v51;
    *a6 = 0;
    if (!v36)
    {
      v39 = 0;
      goto LABEL_31;
    }
    if (v35 >= 0xFFFFFFFFFFFFFFF0)
    {
      __break(0xC471u);
      JUMPOUT(0x198348D3CLL);
    }
    if (v35 != -17)
    {
      v37 = WTF::fastMalloc((WTF *)(v35 + 17));
      *(_DWORD *)v37 = 1;
      *(_QWORD *)(v37 + 8) = v35;
      *a6 = v37;
      v38 = v37 + 16;
      memcpy((void *)(v37 + 16), v36, v35);
      *(_BYTE *)(v38 + v35) = 0;
      v39 = v50;
      if (v50 == (WTF *)v52)
      {
LABEL_32:
        v41 = 40 * v8;
        v42 = v10 + 1;
        do
        {
          v44 = *v42;
          v42 += 5;
          v43 = v44;
          if ((v44 & 1) != 0)
            WTF::fastFree(v43 & 0xFFFFFFFFFFFFFFFCLL, v28, v29, v30, v31, v32, v33, v34);
          v41 -= 40;
        }
        while (v41);
        goto LABEL_27;
      }
LABEL_31:
      WTF::fastFree((unint64_t)v39, v28, v29, v30, v31, v32, v33, v34);
      goto LABEL_32;
    }
    __break(0xC471u);
LABEL_40:
    JUMPOUT(0x198348D34);
  }
  v40 = WTF::fastMalloc((WTF *)0x11);
  *(_DWORD *)v40 = 1;
  *(_QWORD *)(v40 + 8) = 0;
  *a6 = v40;
  *(_BYTE *)(v40 + 16) = 0;
  if (v50 != (WTF *)v52)
    WTF::fastFree((unint64_t)v50, v28, v29, v30, v31, v32, v33, v34);
LABEL_27:
  if (v10)
    WTF::fastFree((unint64_t)v10, v28, v29, v30, v31, v32, v33, v34);
}

uint64_t JSC::DFG::safeToExecute<JSC::DFG::InPlaceAbstractState>(uint64_t a1, JSC::DFG::Graph *a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int *v29;
  int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  unint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t *v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  int v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v110;
  int v111;
  unsigned int v112;
  uint64_t *v113;
  uint64_t v114;
  int v115;
  int v117;
  uint64_t *v118;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  int v137;
  unint64_t v138;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  int *v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _DWORD *v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int *v169;
  int v170;
  unint64_t v171;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t *v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  unsigned int v191;
  uint64_t *v192;
  uint64_t v193;
  int v194;
  int v196;
  uint64_t *v197;
  unint64_t v199;
  unsigned int *v200;
  BOOL v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  unsigned int *v210;
  int v211;
  uint64_t v212;
  unsigned int *v213;
  uint64_t v214;
  uint64_t v215;
  BOOL v216;
  uint64_t v218;
  uint64_t v219;
  unsigned int *v220;
  uint64_t v221;
  uint64_t v222;
  _BOOL4 v223;
  uint64_t v224;
  BOOL v225;
  uint64_t v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t *v230;
  uint64_t *v231;
  uint64_t v232;
  unsigned int v233;
  int v234;
  uint64_t v235;
  unsigned int *v236;
  uint64_t v237;
  unsigned int v238;
  uint64_t v239;
  unsigned int *v240;
  uint64_t v241;
  unsigned int v242;
  uint64_t v243;
  unsigned int *v244;
  uint64_t v245;
  unsigned int v246;
  uint64_t v247;
  unsigned int *v248;
  uint64_t v249;
  unsigned int v250;
  unsigned int v251;
  unint64_t v252;
  unint64_t v254;
  uint64_t v255;
  unsigned int *v256;
  uint64_t v257;
  unsigned int v258;
  uint64_t v259;
  unsigned int *v260;
  uint64_t v261;
  unsigned int v262;
  uint64_t v263;
  unsigned int *v264;
  uint64_t v265;
  unsigned int v266;
  unint64_t v267;
  unsigned int *v268;
  uint64_t v269;
  unsigned int v270;
  unint64_t v271;
  unsigned int *v272;
  uint64_t v273;
  unsigned int v274;
  uint64_t v275;
  unsigned int *v276;
  uint64_t v277;
  unsigned int v278;
  unsigned int *v279;
  uint64_t v280;
  int v281;
  unsigned int *v282;
  _DWORD *v283;
  uint64_t v284;
  unsigned int v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unsigned int *v296;
  uint64_t v297;
  unint64_t v298;
  unsigned int *v299;
  uint64_t v300;
  unsigned int v301;
  uint64_t v302;
  unsigned int *v303;
  uint64_t v304;
  unsigned int v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t *v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t v313;
  unsigned int v314;
  int v315;
  unint64_t v316;
  unsigned int v318;
  unint64_t v319;
  unsigned int v320;
  unint64_t v321;
  int v322;
  uint64_t v324;
  unint64_t v325;
  int v326;
  unint64_t v327;
  unsigned int *v328;
  uint64_t v329;
  unsigned int v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unsigned int v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unsigned int v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unsigned int v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unsigned int v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unsigned int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unsigned int v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unsigned int v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unsigned int v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unsigned int v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unsigned int v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unsigned int v386;
  unsigned int v387;
  unsigned int v388;
  unsigned int v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  __int16 v406;
  uint64_t v407;
  uint64_t v408;

  v405 = a1;
  v406 = 1;
  v12 = (char *)a3 + 24;
  v11 = *((_QWORD *)a3 + 3);
  if ((*((_BYTE *)a3 + 56) & 0x10) != 0)
  {
    v13 = *((_QWORD *)a3 + 4);
    if ((int)v13 + (int)v11 > v11)
    {
      v14 = *((_QWORD *)a3 + 3);
      do
      {
        if (v14 >= *((unsigned int *)a2 + 41))
        {
          __break(0xC471u);
          JUMPOUT(0x19834A860);
        }
        if ((*(_QWORD *)(*((_QWORD *)a2 + 19) + 8 * v14) & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          JSC::DFG::SafeToExecuteEdge<JSC::DFG::InPlaceAbstractState>::operator()(&v405, *(_QWORD *)(*((_QWORD *)a2 + 19) + 8 * v14), (uint64_t)a3, a4, a5, a6, a7, a8);
          v11 = *((_QWORD *)a3 + 3);
          v13 = *((_QWORD *)a3 + 4);
        }
        ++v14;
      }
      while (v14 < (v11 + v13));
    }
  }
  else if ((v11 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    JSC::DFG::SafeToExecuteEdge<JSC::DFG::InPlaceAbstractState>::operator()(&v405, v11, (uint64_t)a3, a4, a5, a6, a7, a8);
    v11 = *((_QWORD *)a3 + 4);
    if ((v11 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      JSC::DFG::SafeToExecuteEdge<JSC::DFG::InPlaceAbstractState>::operator()(&v405, v11, (uint64_t)a3, a4, a5, a6, a7, a8);
      v11 = *((_QWORD *)a3 + 5);
      if ((v11 & 0xFF00FFFFFFFFFFFFLL) != 0)
        JSC::DFG::SafeToExecuteEdge<JSC::DFG::InPlaceAbstractState>::operator()(&v405, v11, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  if (!(_BYTE)v406)
    return 0;
  v15 = *((unsigned __int16 *)a3 + 9);
  if (HIBYTE(v406))
  {
    v16 = (v15 - 133) > 0x32 || ((1 << (v15 + 123)) & 0x4000000000101) == 0;
    if (v16)
      return 0;
  }
  v17 = 1;
  switch(*((_WORD *)a3 + 9))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 0xB:
    case 0xD:
    case 0xF:
    case 0x13:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x20:
    case 0x21:
    case 0x2A:
    case 0x2C:
    case 0x2E:
    case 0x30:
    case 0x31:
    case 0x33:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x5B:
    case 0x60:
    case 0x61:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x8C:
    case 0x8D:
    case 0x94:
    case 0x95:
    case 0xA5:
    case 0xA6:
    case 0xA9:
    case 0xAA:
    case 0xAB:
    case 0xAD:
    case 0xAE:
    case 0xB3:
    case 0xB6:
    case 0xB7:
    case 0xB8:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBE:
    case 0xBF:
    case 0xC0:
    case 0xC1:
    case 0xC2:
    case 0xCE:
    case 0xE2:
    case 0xE6:
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
    case 0xEB:
    case 0xEC:
    case 0xED:
    case 0xEE:
    case 0xEF:
    case 0xF0:
    case 0x113:
    case 0x118:
    case 0x123:
    case 0x126:
    case 0x127:
    case 0x128:
    case 0x129:
    case 0x12A:
    case 0x12B:
    case 0x12C:
    case 0x12D:
    case 0x12E:
    case 0x12F:
    case 0x130:
    case 0x132:
    case 0x133:
    case 0x134:
    case 0x135:
    case 0x136:
    case 0x137:
    case 0x138:
    case 0x139:
    case 0x13A:
    case 0x13E:
    case 0x142:
    case 0x143:
    case 0x145:
    case 0x148:
    case 0x149:
    case 0x14B:
    case 0x14C:
    case 0x164:
    case 0x166:
    case 0x180:
    case 0x188:
    case 0x189:
    case 0x18A:
    case 0x18B:
    case 0x18C:
    case 0x18D:
    case 0x18E:
    case 0x18F:
    case 0x190:
    case 0x191:
    case 0x192:
    case 0x193:
    case 0x197:
    case 0x19A:
    case 0x19C:
    case 0x19D:
    case 0x19F:
    case 0x1AB:
    case 0x1AC:
    case 0x1AE:
    case 0x1AF:
      return v17;
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xC:
    case 0xE:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x14:
    case 0x15:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x43:
    case 0x4B:
    case 0x54:
    case 0x5E:
    case 0x5F:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x87:
    case 0x8B:
    case 0x8E:
    case 0x8F:
    case 0x91:
    case 0x92:
    case 0x9C:
    case 0x9D:
    case 0xA7:
    case 0xA8:
    case 0xAC:
    case 0xAF:
    case 0xB0:
    case 0xB1:
    case 0xB2:
    case 0xB4:
    case 0xB5:
    case 0xB9:
    case 0xC3:
    case 0xC4:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
    case 0xD6:
    case 0xD7:
    case 0xD8:
    case 0xD9:
    case 0xDA:
    case 0xDB:
    case 0xDC:
    case 0xDD:
    case 0xDE:
    case 0xDF:
    case 0xE0:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
    case 0x100:
    case 0x101:
    case 0x102:
    case 0x103:
    case 0x104:
    case 0x105:
    case 0x106:
    case 0x107:
    case 0x108:
    case 0x109:
    case 0x10A:
    case 0x10B:
    case 0x10C:
    case 0x10D:
    case 0x10E:
    case 0x10F:
    case 0x110:
    case 0x111:
    case 0x112:
    case 0x114:
    case 0x115:
    case 0x116:
    case 0x117:
    case 0x119:
    case 0x11A:
    case 0x11B:
    case 0x11C:
    case 0x11D:
    case 0x11E:
    case 0x11F:
    case 0x120:
    case 0x121:
    case 0x122:
    case 0x124:
    case 0x125:
    case 0x13B:
    case 0x13C:
    case 0x13D:
    case 0x13F:
    case 0x140:
    case 0x141:
    case 0x144:
    case 0x146:
    case 0x147:
    case 0x14A:
    case 0x14D:
    case 0x14E:
    case 0x14F:
    case 0x150:
    case 0x151:
    case 0x152:
    case 0x153:
    case 0x154:
    case 0x155:
    case 0x156:
    case 0x157:
    case 0x158:
    case 0x159:
    case 0x15A:
    case 0x15B:
    case 0x15C:
    case 0x15D:
    case 0x15E:
    case 0x15F:
    case 0x160:
    case 0x161:
    case 0x162:
    case 0x163:
    case 0x165:
    case 0x167:
    case 0x168:
    case 0x169:
    case 0x16A:
    case 0x16B:
    case 0x16C:
    case 0x16D:
    case 0x16E:
    case 0x16F:
    case 0x170:
    case 0x171:
    case 0x172:
    case 0x173:
    case 0x174:
    case 0x175:
    case 0x176:
    case 0x177:
    case 0x178:
    case 0x179:
    case 0x17A:
    case 0x17B:
    case 0x17C:
    case 0x17D:
    case 0x17E:
    case 0x17F:
    case 0x181:
    case 0x182:
    case 0x183:
    case 0x185:
    case 0x186:
    case 0x187:
    case 0x194:
    case 0x195:
    case 0x196:
    case 0x198:
    case 0x199:
    case 0x19B:
    case 0x19E:
    case 0x1A2:
    case 0x1A3:
    case 0x1A4:
    case 0x1A5:
    case 0x1A6:
    case 0x1A7:
    case 0x1A8:
    case 0x1A9:
    case 0x1AA:
    case 0x1AD:
    case 0x1B0:
      return 0;
    case 0x29:
      return ((*(_QWORD *)v12 >> 50) & 0x3F) - 26 < 3;
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x32:
    case 0x34:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
      v38 = (*(_QWORD *)v12 >> 50) & 0x3FLL;
      switch((_DWORD)v38)
      {
        case 0x1A:
          v39 = *((_QWORD *)a3 + 4) & 0xFC000000000000;
          v40 = 0x68000000000000;
          break;
        case 0x1C:
          v39 = *((_QWORD *)a3 + 4) & 0xFC000000000000;
          v40 = 0x70000000000000;
          break;
        case 0x1B:
          v39 = *((_QWORD *)a3 + 4) & 0xFC000000000000;
          v40 = 0x6C000000000000;
          break;
        default:
          return 0;
      }
      return v39 == v40;
    case 0x52:
    case 0x53:
      return (v12[6] & 0xFC) != 0;
    case 0x5C:
    case 0x5D:
    case 0x93:
    case 0x9E:
    case 0x9F:
    case 0xA0:
    case 0xA1:
    case 0xD5:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0x184:
      if (v15 == 146)
        v19 = *((_DWORD *)a3 + 20);
      else
        v19 = *((_DWORD *)a3 + 18);
      LODWORD(v407) = v19;
      if ((*((_BYTE *)a3 + 56) & 0x10) != 0)
      {
        if (*((_DWORD *)a2 + 41) <= *(_QWORD *)v12)
        {
          __break(0xC471u);
          JUMPOUT(0x19834A8F8);
        }
        v12 = (char *)(*((_QWORD *)a2 + 19) + 8 * *(_QWORD *)v12);
      }
      v20 = *(_QWORD *)v12;
      v21 = *(_QWORD *)(a1 + 8);
      v22 = *(unsigned int *)((*(_QWORD *)v12 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v23 = (uint64_t *)(v21 + 24);
      v24 = (uint64_t *)(v21 + 8);
      if ((v20 & 1) != 0)
        v25 = v23;
      else
        v25 = v24;
      v26 = *v25;
      v27 = *v25 + 32 * v22;
      v28 = *(_DWORD *)(a1 + 88);
      v29 = (unsigned int *)(v27 + 20);
      v30 = *(_DWORD *)(v27 + 20);
      if (v28 == v30)
        return JSC::DFG::ArrayMode::alreadyChecked((JSC::DFG::ArrayMode *)&v407, a2, a3, (const JSC::DFG::AbstractValue *)v27, a5, a6, a7, a8);
      if ((*(_QWORD *)(v27 + 8) & 0x2800FFFFFFF7) == 0)
        goto LABEL_64;
      if ((v30 ^ v28) < 2)
        goto LABEL_62;
      v31 = *(_QWORD *)v27;
      if (*(_QWORD *)v27 == 4)
        goto LABEL_61;
      *(_QWORD *)v27 = v31 | 2;
      v32 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v31 & 1) == 0)
        goto LABEL_56;
      v397 = v26;
      v33 = (unsigned int *)(v27 + 20);
      v34 = 2 * *v32;
      while (1)
      {
        v29 = (unsigned int *)(v27 + 20);
        v26 = v397;
        if (!(v34 * 4))
          break;
        v35 = *(_QWORD *)&v32[v34];
        if ((*(_BYTE *)(v35 + 19) & 0xC) == 0)
        {
          v36 = *(_QWORD *)(v35 + 96);
          v37 = (v36 & 1) != 0 ? (v36 >> 1) & 3 : *(unsigned __int8 *)(v36 + 4);
          v34 -= 2;
          if (v37 != 2)
            continue;
        }
LABEL_523:
        WTF::fastFree((unint64_t)v32, (void *)v11, (uint64_t)a3, a4, a5, a6, a7, a8);
        v29 = v33;
        v26 = v397;
LABEL_524:
        *(_QWORD *)v27 = 4;
        break;
      }
LABEL_61:
      *(_DWORD *)(v26 + 32 * v22 + 16) = -21020677;
LABEL_62:
      if ((v28 & 1) != 0)
        goto LABEL_63;
      goto LABEL_64;
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
      v41 = *((_DWORD *)a3 + 18);
      if (v41 <= 0xDu && ((1 << v41) & 0x3020) != 0)
        v41 = 4;
      LODWORD(v407) = v41;
      if (*((_DWORD *)a2 + 41) <= *(_QWORD *)v12)
      {
        __break(0xC471u);
        JUMPOUT(0x19834A8E8);
      }
      v42 = *(_QWORD *)(*((_QWORD *)a2 + 19) + 8 * *(_QWORD *)v12);
      v43 = *(_QWORD *)(a1 + 8);
      v22 = *(unsigned int *)((v42 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v44 = (uint64_t *)(v43 + 24);
      v45 = (uint64_t *)(v43 + 8);
      if ((v42 & 1) != 0)
        v46 = v44;
      else
        v46 = v45;
      v26 = *v46;
      v27 = *v46 + 32 * v22;
      v28 = *(_DWORD *)(a1 + 88);
      v29 = (unsigned int *)(v27 + 20);
      v47 = *(_DWORD *)(v27 + 20);
      if (v28 == v47)
        return JSC::DFG::ArrayMode::alreadyChecked((JSC::DFG::ArrayMode *)&v407, a2, a3, (const JSC::DFG::AbstractValue *)v27, a5, a6, a7, a8);
      if ((*(_QWORD *)(v27 + 8) & 0x2800FFFFFFF7) == 0)
        goto LABEL_64;
      if ((v47 ^ v28) < 2)
        goto LABEL_62;
      v48 = *(_QWORD *)v27;
      if (*(_QWORD *)v27 == 4)
        goto LABEL_61;
      *(_QWORD *)v27 = v48 | 2;
      v32 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v48 & 1) != 0)
      {
        v397 = v26;
        v33 = (unsigned int *)(v27 + 20);
        v331 = 2 * *v32;
        do
        {
          v29 = (unsigned int *)(v27 + 20);
          v26 = v397;
          if (!(v331 * 4))
            goto LABEL_61;
          v332 = *(_QWORD *)&v32[v331];
          if ((*(_BYTE *)(v332 + 19) & 0xC) != 0)
            break;
          v333 = *(_QWORD *)(v332 + 96);
          v334 = (v333 & 1) != 0 ? (v333 >> 1) & 3 : *(unsigned __int8 *)(v333 + 4);
          v331 -= 2;
        }
        while (v334 != 2);
        goto LABEL_523;
      }
LABEL_56:
      if (v32)
      {
        if ((*((_BYTE *)v32 + 19) & 0xC) != 0)
          goto LABEL_524;
        v49 = *((_QWORD *)v32 + 12);
        v50 = (v49 & 1) != 0 ? (v49 >> 1) & 3 : *(unsigned __int8 *)(v49 + 4);
        if (v50 == 2)
          goto LABEL_524;
      }
      goto LABEL_61;
    case 0x88:
    case 0x89:
      v61 = *(_QWORD *)(a1 + 8);
      v62 = *(unsigned int *)((*(_QWORD *)v12 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v63 = (uint64_t *)(v61 + 24);
      v64 = (uint64_t *)(v61 + 8);
      if ((*(_QWORD *)v12 & 1) != 0)
        v65 = v63;
      else
        v65 = v64;
      v66 = *v65;
      v67 = (uint64_t *)(v66 + 32 * v62);
      v68 = *(_DWORD *)(a1 + 88);
      v69 = *((_DWORD *)v67 + 5);
      if (v68 == v69)
        goto LABEL_74;
      if ((v67[1] & 0x2800FFFFFFF7) == 0)
        goto LABEL_279;
      v398 = v66;
      if ((v69 ^ v68) < 2)
        goto LABEL_277;
      v239 = *v67;
      if (*v67 == 4)
        goto LABEL_276;
      *v67 = v239 | 2;
      v240 = (unsigned int *)(v239 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v239 & 1) != 0)
      {
        v339 = 2 * *v240;
        do
        {
          if (!(v339 * 4))
            goto LABEL_276;
          v340 = *(_QWORD *)&v240[v339];
          if ((*(_BYTE *)(v340 + 19) & 0xC) != 0)
            break;
          v341 = *(_QWORD *)(v340 + 96);
          v342 = (v341 & 1) != 0 ? (v341 >> 1) & 3 : *(unsigned __int8 *)(v341 + 4);
          v339 -= 2;
        }
        while (v342 != 2);
        WTF::fastFree((unint64_t)v240, (void *)v11, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      else if (!v240
             || (*((_BYTE *)v240 + 19) & 0xC) == 0
             && ((v241 = *((_QWORD *)v240 + 12), (v241 & 1) != 0)
               ? (v242 = (v241 >> 1) & 3)
               : (v242 = *(unsigned __int8 *)(v241 + 4)),
                 v242 != 2))
      {
LABEL_276:
        *(_DWORD *)(v398 + 32 * v62 + 16) = -21020677;
LABEL_277:
        if ((v68 & 1) != 0)
          *v67 &= ~2uLL;
LABEL_279:
        *((_DWORD *)v67 + 5) = v68;
LABEL_74:
        v70 = **((_QWORD **)a3 + 9);
        v71 = *v67;
        if (*v67 == 4 || (*v67 & 2) != 0)
          goto LABEL_78;
        if ((v71 & 1) != 0)
        {
          if ((v70 & 1) != 0)
          {
            v282 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFFCLL);
            v285 = *v282;
            v283 = v282 + 2;
            v284 = v285;
            if (v285)
            {
              v286 = v70 & 0xFFFFFFFFFFFFFFFCLL;
              v287 = *(unsigned int *)(v70 & 0xFFFFFFFFFFFFFFFCLL);
              if ((_DWORD)v287)
              {
                v288 = 0;
                v289 = *(_QWORD *)(v286 + 8);
                v290 = v286 + 16;
                v17 = 1;
                while (1)
                {
                  v291 = *(_QWORD *)&v283[2 * v288];
                  if (v289 != v291)
                    break;
LABEL_409:
                  if (++v288 == v284)
                    goto LABEL_209;
                }
                v292 = 0;
                while (v287 - 1 != v292)
                {
                  v293 = *(_QWORD *)(v290 + 8 * v292++);
                  if (v293 == v291)
                  {
                    if (v292 >= v287)
                      goto LABEL_78;
                    goto LABEL_409;
                  }
                }
              }
              goto LABEL_78;
            }
            goto LABEL_417;
          }
          if ((v70 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          {
            v306 = v71 & 0xFFFFFFFFFFFFFFFCLL;
            if (*(_DWORD *)v306 <= 1u)
            {
              v201 = *(_QWORD *)(v306 + 8) == (v70 & 0xFFFFFFFFFFFFFFFCLL);
LABEL_206:
              v17 = v201;
LABEL_209:
              if ((v70 & 1) != 0)
                WTF::fastFree(v70 & 0xFFFFFFFFFFFFFFFCLL, (void *)v11, (uint64_t)a3, a4, a5, a6, a7, a8);
              return v17;
            }
          }
        }
        else
        {
          v199 = v71 & 0xFFFFFFFFFFFFFFFCLL;
          if (!v199)
          {
LABEL_417:
            v17 = 1;
            goto LABEL_209;
          }
          v200 = (unsigned int *)(v70 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v70 & 1) == 0)
          {
            v201 = v200 == (unsigned int *)v199;
            goto LABEL_206;
          }
          v294 = *v200;
          if ((_DWORD)v294)
          {
            if (*((_QWORD *)v200 + 1) != v199)
            {
              v295 = 0;
              v296 = v200 + 4;
              while (v294 - 1 != v295)
              {
                v297 = *(_QWORD *)&v296[2 * v295++];
                if (v297 == v199)
                  goto LABEL_416;
              }
              v295 = v294;
LABEL_416:
              v17 = v295 < v294;
              goto LABEL_209;
            }
            goto LABEL_417;
          }
        }
LABEL_78:
        v17 = 0;
        goto LABEL_209;
      }
      *v67 = 4;
      goto LABEL_276;
    case 0x8A:
      v174 = *(_QWORD *)(a1 + 8);
      v175 = *(unsigned int *)((*(_QWORD *)v12 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v176 = (uint64_t *)(v174 + 24);
      v177 = (uint64_t *)(v174 + 8);
      if ((*(_QWORD *)v12 & 1) != 0)
        v178 = v176;
      else
        v178 = v177;
      v179 = *v178;
      v180 = *v178 + 32 * v175;
      v181 = *(_DWORD *)(a1 + 88);
      v182 = *(_DWORD *)(v180 + 20);
      if (v181 == v182)
        return (*(_QWORD *)(v180 + 8) & 0xFFFFDFFFF0000008) == 0;
      if ((*(_QWORD *)(v180 + 8) & 0x2800FFFFFFF7) == 0)
        goto LABEL_356;
      if ((v182 ^ v181) < 2)
        goto LABEL_354;
      v263 = *(_QWORD *)v180;
      if (*(_QWORD *)v180 == 4)
        goto LABEL_353;
      *(_QWORD *)v180 = v263 | 2;
      v264 = (unsigned int *)(v263 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v263 & 1) != 0)
      {
        v363 = 2 * *v264;
        do
        {
          if (!(v363 * 4))
            goto LABEL_353;
          v364 = *(_QWORD *)&v264[v363];
          if ((*(_BYTE *)(v364 + 19) & 0xC) != 0)
            break;
          v365 = *(_QWORD *)(v364 + 96);
          v366 = (v365 & 1) != 0 ? (v365 >> 1) & 3 : *(unsigned __int8 *)(v365 + 4);
          v363 -= 2;
        }
        while (v366 != 2);
        WTF::fastFree((unint64_t)v264, (void *)v11, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      else if (!v264
             || (*((_BYTE *)v264 + 19) & 0xC) == 0
             && ((v265 = *((_QWORD *)v264 + 12), (v265 & 1) != 0)
               ? (v266 = (v265 >> 1) & 3)
               : (v266 = *(unsigned __int8 *)(v265 + 4)),
                 v266 != 2))
      {
LABEL_353:
        *(_DWORD *)(v179 + 32 * v175 + 16) = -21020677;
LABEL_354:
        if ((v181 & 1) != 0)
          *(_QWORD *)v180 &= ~2uLL;
LABEL_356:
        *(_DWORD *)(v180 + 20) = v181;
        return (*(_QWORD *)(v180 + 8) & 0xFFFFDFFFF0000008) == 0;
      }
      *(_QWORD *)v180 = 4;
      goto LABEL_353;
    case 0x90:
    case 0xA2:
    case 0xA3:
      v51 = *(_QWORD *)(a1 + 8);
      v52 = *(unsigned int *)((*(_QWORD *)v12 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v53 = (uint64_t *)(v51 + 24);
      v54 = (uint64_t *)(v51 + 8);
      if ((*(_QWORD *)v12 & 1) != 0)
        v55 = v53;
      else
        v55 = v54;
      v56 = *v55;
      v57 = *v55 + 32 * v52;
      v58 = *(_DWORD *)(a1 + 88);
      v59 = *(_DWORD *)(v57 + 20);
      if (v58 == v59)
        return (*(_QWORD *)(v57 + 8) & 0xFFFFFFFFFFFF800FLL) == 0;
      if ((*(_QWORD *)(v57 + 8) & 0x2800FFFFFFF7) == 0)
        goto LABEL_266;
      if ((v59 ^ v58) < 2)
        goto LABEL_264;
      v235 = *(_QWORD *)v57;
      if (*(_QWORD *)v57 == 4)
        goto LABEL_263;
      *(_QWORD *)v57 = v235 | 2;
      v236 = (unsigned int *)(v235 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v235 & 1) != 0)
      {
        v335 = 2 * *v236;
        do
        {
          if (!(v335 * 4))
            goto LABEL_263;
          v336 = *(_QWORD *)&v236[v335];
          if ((*(_BYTE *)(v336 + 19) & 0xC) != 0)
            break;
          v337 = *(_QWORD *)(v336 + 96);
          v338 = (v337 & 1) != 0 ? (v337 >> 1) & 3 : *(unsigned __int8 *)(v337 + 4);
          v335 -= 2;
        }
        while (v338 != 2);
        WTF::fastFree((unint64_t)v236, (void *)v11, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      else if (!v236
             || (*((_BYTE *)v236 + 19) & 0xC) == 0
             && ((v237 = *((_QWORD *)v236 + 12), (v237 & 1) != 0)
               ? (v238 = (v237 >> 1) & 3)
               : (v238 = *(unsigned __int8 *)(v237 + 4)),
                 v238 != 2))
      {
LABEL_263:
        *(_DWORD *)(v56 + 32 * v52 + 16) = -21020677;
LABEL_264:
        if ((v58 & 1) != 0)
          *(_QWORD *)v57 &= ~2uLL;
LABEL_266:
        *(_DWORD *)(v57 + 20) = v58;
        return (*(_QWORD *)(v57 + 8) & 0xFFFFFFFFFFFF800FLL) == 0;
      }
      *(_QWORD *)v57 = 4;
      goto LABEL_263;
    case 0x96:
    case 0x97:
      v73 = *(_QWORD *)(a1 + 8);
      v74 = (uint64_t *)(v73 + 24);
      v75 = (uint64_t *)(v73 + 8);
      if ((*(_QWORD *)v12 & 1) != 0)
        v76 = v74;
      else
        v76 = v75;
      v77 = *v76;
      v78 = *v76 + 32 * *(unsigned int *)((*(_QWORD *)v12 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v79 = *(_DWORD *)(a1 + 88);
      v80 = (unsigned int *)(v78 + 20);
      v81 = *(_DWORD *)(v78 + 20);
      if (v79 == v81)
        goto LABEL_83;
      if ((*(_QWORD *)(v78 + 8) & 0x2800FFFFFFF7) == 0)
        goto LABEL_292;
      v392 = *(unsigned int *)((*(_QWORD *)v12 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v399 = v77;
      if ((v81 ^ v79) < 2)
        goto LABEL_290;
      v243 = *(_QWORD *)v78;
      if (*(_QWORD *)v78 == 4)
        goto LABEL_289;
      v387 = *(_DWORD *)(a1 + 88);
      *(_QWORD *)v78 = v243 | 2;
      v244 = (unsigned int *)(v243 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v243 & 1) != 0)
      {
        v343 = 2 * *v244;
        do
        {
          v79 = v387;
          v80 = (unsigned int *)(v78 + 20);
          if (!(v343 * 4))
            goto LABEL_289;
          v344 = *(_QWORD *)&v244[v343];
          if ((*(_BYTE *)(v344 + 19) & 0xC) != 0)
            break;
          v345 = *(_QWORD *)(v344 + 96);
          v346 = (v345 & 1) != 0 ? (v345 >> 1) & 3 : *(unsigned __int8 *)(v345 + 4);
          v343 -= 2;
        }
        while (v346 != 2);
        WTF::fastFree((unint64_t)v244, (void *)v11, (uint64_t)a3, a4, a5, a6, a7, a8);
        v79 = v387;
        v80 = (unsigned int *)(v78 + 20);
      }
      else if (!v244
             || (*((_BYTE *)v244 + 19) & 0xC) == 0
             && ((v245 = *((_QWORD *)v244 + 12), (v245 & 1) != 0)
               ? (v246 = (v245 >> 1) & 3)
               : (v246 = *(unsigned __int8 *)(v245 + 4)),
                 v16 = v246 == 2,
                 v80 = (unsigned int *)(v78 + 20),
                 !v16))
      {
LABEL_289:
        *(_DWORD *)(v399 + 32 * v392 + 16) = -21020677;
LABEL_290:
        if ((v79 & 1) != 0)
          *(_QWORD *)v78 &= ~2uLL;
LABEL_292:
        *v80 = v79;
LABEL_83:
        if ((*(_QWORD *)(v78 + 8) & 0xFFFFD7FF00000008) != 0)
          return 0;
        v82 = *(_QWORD *)(a1 + 8);
        v83 = *(unsigned int *)((*(_QWORD *)v12 & 0xFF00FFFFFFFFFFFELL) + 0x14);
        v84 = (uint64_t *)(v82 + 24);
        v85 = (uint64_t *)(v82 + 8);
        if ((*(_QWORD *)v12 & 1) != 0)
          v86 = v84;
        else
          v86 = v85;
        v87 = *v86;
        v88 = *v86 + 32 * v83;
        v89 = *(_DWORD *)(a1 + 88);
        v90 = *(_DWORD *)(v88 + 20);
        if (v89 != v90)
        {
          v402 = v87;
          if ((*(_QWORD *)(v88 + 8) & 0x2800FFFFFFF7) != 0)
          {
            if ((v90 ^ v89) >= 2)
            {
              v271 = *(_QWORD *)v88;
              if (*(_QWORD *)v88 != 4)
              {
                *(_QWORD *)v88 = v271 | 2;
                v272 = (unsigned int *)(v271 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v271 & 1) != 0)
                {
                  v371 = 2 * *v272;
                  while (v371 * 4)
                  {
                    v372 = *(_QWORD *)&v272[v371];
                    if ((*(_BYTE *)(v372 + 19) & 0xC) == 0)
                    {
                      v373 = *(_QWORD *)(v372 + 96);
                      v374 = (v373 & 1) != 0 ? (v373 >> 1) & 3 : *(unsigned __int8 *)(v373 + 4);
                      v371 -= 2;
                      if (v374 != 2)
                        continue;
                    }
                    WTF::fastFree((unint64_t)v272, (void *)v11, (uint64_t)a3, a4, a5, a6, a7, a8);
                    goto LABEL_634;
                  }
                }
                else if (v272)
                {
                  if ((*((_BYTE *)v272 + 19) & 0xC) != 0
                    || ((v273 = *((_QWORD *)v272 + 12), (v273 & 1) != 0)
                      ? (v274 = (v273 >> 1) & 3)
                      : (v274 = *(unsigned __int8 *)(v273 + 4)),
                        v274 == 2))
                  {
LABEL_634:
                    *(_QWORD *)v88 = 4;
                  }
                }
              }
              *(_DWORD *)(v402 + 32 * v83 + 16) = -21020677;
            }
            if ((v89 & 1) != 0)
              *(_QWORD *)v88 &= ~2uLL;
          }
          *(_DWORD *)(v88 + 20) = v89;
        }
        v91 = *(_QWORD *)v88;
        if (*(_QWORD *)v88 == 4 || (*(_QWORD *)v88 & 2) != 0)
          return 0;
        if ((v91 & 1) != 0)
        {
          v254 = v91 & 0xFFFFFFFFFFFFFFFCLL;
          if (*(_DWORD *)v254 == 1)
          {
            v39 = *(_QWORD *)(v254 + 8);
LABEL_318:
            v40 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 41528);
            return v39 == v40;
          }
        }
        else if (v91 > 3)
        {
          v39 = v91 & 0xFFFFFFFFFFFFFFFCLL;
          goto LABEL_318;
        }
        return 0;
      }
      *(_QWORD *)v78 = 4;
      goto LABEL_289;
    case 0x98:
    case 0x9B:
      v106 = *((_QWORD *)a3 + 4);
      if ((*((_QWORD *)a3 + 3) & 0xFF00FFFFFFFFFFFFLL) != (v106 & 0xFF00FFFFFFFFFFFFLL))
        goto LABEL_110;
      v202 = *(_QWORD *)(a1 + 8);
      v203 = *(unsigned int *)((v106 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v204 = (uint64_t *)(v202 + 24);
      v205 = (uint64_t *)(v202 + 8);
      if ((v106 & 1) != 0)
        v206 = v204;
      else
        v206 = v205;
      v207 = *v206;
      v208 = *v206 + 32 * v203;
      v209 = *(_DWORD *)(a1 + 88);
      v210 = (unsigned int *)(v208 + 20);
      v211 = *(_DWORD *)(v208 + 20);
      if (v209 == v211)
        goto LABEL_215;
      v395 = v203;
      v403 = v207;
      if ((*(_QWORD *)(v208 + 8) & 0x2800FFFFFFF7) == 0)
        goto LABEL_395;
      v388 = *(_DWORD *)(a1 + 88);
      if ((v211 ^ v209) < 2)
        goto LABEL_393;
      v275 = *(_QWORD *)v208;
      if (*(_QWORD *)v208 == 4)
        goto LABEL_392;
      *(_QWORD *)v208 = v275 | 2;
      v276 = (unsigned int *)(v275 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v275 & 1) != 0)
      {
        v375 = 2 * *v276;
        do
        {
          if (!(v375 * 4))
            goto LABEL_392;
          v376 = *(_QWORD *)&v276[v375];
          if ((*(_BYTE *)(v376 + 19) & 0xC) != 0)
            break;
          v377 = *(_QWORD *)(v376 + 96);
          v378 = (v377 & 1) != 0 ? (v377 >> 1) & 3 : *(unsigned __int8 *)(v377 + 4);
          v375 -= 2;
        }
        while (v378 != 2);
        WTF::fastFree((unint64_t)v276, (void *)v11, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      else if (!v276
             || (*((_BYTE *)v276 + 19) & 0xC) == 0
             && ((v277 = *((_QWORD *)v276 + 12), (v277 & 1) != 0)
               ? (v278 = (v277 >> 1) & 3)
               : (v278 = *(unsigned __int8 *)(v277 + 4)),
                 v278 != 2))
      {
LABEL_392:
        *(_DWORD *)(v403 + 32 * v395 + 16) = -21020677;
LABEL_393:
        v209 = v388;
        v210 = (unsigned int *)(v208 + 20);
        if ((v388 & 1) != 0)
          *(_QWORD *)v208 &= ~2uLL;
LABEL_395:
        *v210 = v209;
LABEL_215:
        if ((*(_QWORD *)(v208 + 8) & 0xFFFFD7FF00000008) != 0)
          return 0;
        v106 = *((_QWORD *)a3 + 4);
LABEL_110:
        v107 = **((unsigned int **)a3 + 9);
        if (!*(_BYTE *)(a1 + 82) && *(unsigned __int16 *)((v106 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u)
        {
          v108 = **(_QWORD **)((v106 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
          if (v108 && (v108 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v108 + 5) >= 0x17u)
          {
            v407 = **(_QWORD **)((v106 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
            v408 = v107;
            v110 = *((_QWORD *)a2 + 94);
            if (v110)
            {
              v111 = *(_DWORD *)(v110 - 8);
              v112 = WTF::IdentityHashTranslator<WTF::HashTraits<std::pair<JSC::JSObject *,int>>,WTF::DefaultHash<std::pair<JSC::JSObject *,int>>>::hash<std::pair<JSC::JSObject *,int>>((uint64_t)&v407) & v111;
              v113 = (uint64_t *)(v110 + 16 * v112);
              v114 = *v113;
              v115 = *((_DWORD *)v113 + 2);
              if (*v113 == v407 && v115 == (_DWORD)v408)
                return 1;
              v117 = 1;
              while (v114 || v115)
              {
                v112 = (v112 + v117) & v111;
                v118 = (uint64_t *)(v110 + 16 * v112);
                v114 = *v118;
                v115 = *((_DWORD *)v118 + 2);
                ++v117;
                if (v114 == v407 && v115 == (_DWORD)v408)
                  return 1;
              }
              v106 = *((_QWORD *)a3 + 4);
            }
          }
        }
        v307 = *(_QWORD *)(a1 + 8);
        v308 = *(unsigned int *)((v106 & 0xFF00FFFFFFFFFFFELL) + 0x14);
        v309 = (uint64_t *)(v307 + 24);
        v310 = (uint64_t *)(v307 + 8);
        if ((v106 & 1) != 0)
          v311 = v309;
        else
          v311 = v310;
        v312 = *v311;
        v313 = v312 + 32 * v308;
        v314 = *(_DWORD *)(a1 + 88);
        v315 = *(_DWORD *)(v313 + 20);
        if (v314 != v315)
        {
          if ((*(_QWORD *)(v313 + 8) & 0x2800FFFFFFF7) != 0)
          {
            v404 = v312;
            if ((v315 ^ v314) >= 2)
            {
              v327 = *(_QWORD *)v313;
              if (*(_QWORD *)v313 != 4)
              {
                *(_QWORD *)v313 = v327 | 2;
                v328 = (unsigned int *)(v327 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v327 & 1) != 0)
                {
                  v351 = 2 * *v328;
                  while (v351 * 4)
                  {
                    v352 = *(_QWORD *)&v328[v351];
                    if ((*(_BYTE *)(v352 + 19) & 0xC) == 0)
                    {
                      v353 = *(_QWORD *)(v352 + 96);
                      v354 = (v353 & 1) != 0 ? (v353 >> 1) & 3 : *(unsigned __int8 *)(v353 + 4);
                      v351 -= 2;
                      if (v354 != 2)
                        continue;
                    }
                    WTF::fastFree((unint64_t)v328, (void *)v11, (uint64_t)a3, a4, a5, a6, a7, a8);
                    goto LABEL_576;
                  }
                }
                else if (v328)
                {
                  if ((*((_BYTE *)v328 + 19) & 0xC) != 0
                    || ((v329 = *((_QWORD *)v328 + 12), (v329 & 1) != 0)
                      ? (v330 = (v329 >> 1) & 3)
                      : (v330 = *(unsigned __int8 *)(v329 + 4)),
                        v330 == 2))
                  {
LABEL_576:
                    *(_QWORD *)v313 = 4;
                  }
                }
              }
              *(_DWORD *)(v404 + 32 * v308 + 16) = -21020677;
            }
            if ((v314 & 1) != 0)
              *(_QWORD *)v313 &= ~2uLL;
          }
          *(_DWORD *)(v313 + 20) = v314;
        }
        v316 = *(_QWORD *)v313;
        if (*(_QWORD *)v313 == 4 || (*(_QWORD *)v313 & 2) != 0)
          return 0;
        if ((v316 & 1) != 0)
        {
          v319 = v316 & 0xFFFFFFFFFFFFFFFCLL;
          v318 = *(_DWORD *)(v316 & 0xFFFFFFFFFFFFFFFCLL);
        }
        else
        {
          v318 = v316 > 3;
          v319 = v316 & 0xFFFFFFFFFFFFFFFCLL;
        }
        if ((_DWORD)v107 != -1)
        {
          if ((int)v107 > 63)
          {
            if (v318)
            {
              v320 = v318 - 1;
              v17 = 1;
              while (1)
              {
                v321 = v319;
                if ((v316 & 1) != 0)
                  v321 = *(_QWORD *)(v319 + 8 + 8 * v320);
                if ((*(_DWORD *)(v321 + 16) & 3) == 2)
                  break;
                v322 = *(unsigned __int16 *)(v321 + 24);
                if (v322 == 65534)
                {
                  v322 = -1;
                }
                else if (v322 == 0xFFFF)
                {
                  v322 = *(_DWORD *)(*(_QWORD *)(v321 + 64) + 84);
                }
                if (v322 < (int)v107)
                  break;
                if (!v320--)
                  return v17;
              }
              return 0;
            }
            return 1;
          }
          v324 = 8 * v318;
          do
          {
            v17 = v324 == 0;
            if (!v324)
              break;
            v325 = v319;
            if ((v316 & 1) != 0)
              v325 = *(_QWORD *)(v319 + v324);
            if ((*(_DWORD *)(v325 + 16) & 3) == 2)
              break;
            v326 = *(unsigned __int16 *)(v325 + 24);
            if (v326 == 65534)
            {
              v326 = -1;
            }
            else if (v326 == 0xFFFF)
            {
              v326 = *(_DWORD *)(*(_QWORD *)(v325 + 64) + 84);
            }
            if (v326 < (int)v107)
              break;
            v324 -= 8;
          }
          while ((int)v107 < *(unsigned __int8 *)(v325 + 14));
          return v17;
        }
        return v318 == 0;
      }
      *(_QWORD *)v208 = 4;
      goto LABEL_392;
    case 0x99:
      v149 = *((_QWORD *)a3 + 4);
      if ((*((_QWORD *)a3 + 3) & 0xFF00FFFFFFFFFFFFLL) != (v149 & 0xFF00FFFFFFFFFFFFLL))
        goto LABEL_159;
      v227 = *(_QWORD *)(a1 + 8);
      v228 = *(unsigned int *)((v149 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v229 = (uint64_t *)(v227 + 24);
      v230 = (uint64_t *)(v227 + 8);
      if ((v149 & 1) != 0)
        v231 = v229;
      else
        v231 = v230;
      v232 = *v231 + 32 * v228;
      v233 = *(_DWORD *)(a1 + 88);
      v234 = *(_DWORD *)(v232 + 20);
      if (v233 == v234)
        goto LABEL_252;
      v391 = *v231;
      v396 = v228;
      if ((*(_QWORD *)(v232 + 8) & 0x2800FFFFFFF7) == 0)
        goto LABEL_443;
      v389 = *(_DWORD *)(a1 + 88);
      if ((v234 ^ v233) < 2)
        goto LABEL_441;
      v302 = *(_QWORD *)v232;
      if (*(_QWORD *)v232 == 4)
        goto LABEL_440;
      *(_QWORD *)v232 = v302 | 2;
      v303 = (unsigned int *)(v302 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v302 & 1) != 0)
      {
        v383 = 2 * *v303;
        do
        {
          if (!(v383 * 4))
            goto LABEL_440;
          v384 = *(_QWORD *)&v303[v383];
          if ((*(_BYTE *)(v384 + 19) & 0xC) != 0)
            break;
          v385 = *(_QWORD *)(v384 + 96);
          v386 = (v385 & 1) != 0 ? (v385 >> 1) & 3 : *(unsigned __int8 *)(v385 + 4);
          v383 -= 2;
        }
        while (v386 != 2);
        WTF::fastFree((unint64_t)v303, (void *)v11, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_656;
      }
      if (v303)
      {
        if ((*((_BYTE *)v303 + 19) & 0xC) != 0
          || ((v304 = *((_QWORD *)v303 + 12), (v304 & 1) != 0)
            ? (v305 = (v304 >> 1) & 3)
            : (v305 = *(unsigned __int8 *)(v304 + 4)),
              v305 == 2))
        {
LABEL_656:
          *(_QWORD *)v232 = 4;
        }
      }
LABEL_440:
      *(_DWORD *)(v391 + 32 * v396 + 16) = -21020677;
LABEL_441:
      v233 = v389;
      if ((v389 & 1) != 0)
        *(_QWORD *)v232 &= ~2uLL;
LABEL_443:
      *(_DWORD *)(v232 + 20) = v233;
LABEL_252:
      if ((*(_QWORD *)(v232 + 8) & 0xFFFFD7FF00000008) != 0)
        return 0;
LABEL_159:
      v150 = (int *)*((_QWORD *)a3 + 9);
      v158 = (_DWORD *)JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*((_QWORD *)a2 + 3) + 240), v150[1]);
      v159 = *v150;
      v160 = *((_QWORD *)a3 + 4);
      v161 = *(_QWORD *)(a1 + 8);
      v162 = *(unsigned int *)((v160 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v163 = (uint64_t *)(v161 + 24);
      v164 = (uint64_t *)(v161 + 8);
      if ((v160 & 1) != 0)
        v165 = v163;
      else
        v165 = v164;
      v166 = *v165;
      v167 = *v165 + 32 * v162;
      v168 = *(_DWORD *)(a1 + 88);
      v169 = (unsigned int *)(v167 + 20);
      v170 = *(_DWORD *)(v167 + 20);
      if (v168 != v170)
      {
        v401 = v166;
        if ((*(_QWORD *)(v167 + 8) & 0x2800FFFFFFF7) != 0)
        {
          if ((v170 ^ v168) >= 2)
          {
            v267 = *(_QWORD *)v167;
            if (*(_QWORD *)v167 != 4)
            {
              *(_QWORD *)v167 = v267 | 2;
              v268 = (unsigned int *)(v267 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v267 & 1) != 0)
              {
                v367 = 2 * *v268;
                while (v367 * 4)
                {
                  v368 = *(_QWORD *)&v268[v367];
                  if ((*(_BYTE *)(v368 + 19) & 0xC) == 0)
                  {
                    v369 = *(_QWORD *)(v368 + 96);
                    v370 = (v369 & 1) != 0 ? (v369 >> 1) & 3 : *(unsigned __int8 *)(v369 + 4);
                    v367 -= 2;
                    if (v370 != 2)
                      continue;
                  }
                  WTF::fastFree((unint64_t)v268, v151, v152, v153, v154, v155, v156, v157);
                  goto LABEL_632;
                }
              }
              else if (v268)
              {
                if ((*((_BYTE *)v268 + 19) & 0xC) != 0
                  || ((v269 = *((_QWORD *)v268 + 12), (v269 & 1) != 0)
                    ? (v270 = (v269 >> 1) & 3)
                    : (v270 = *(unsigned __int8 *)(v269 + 4)),
                      v270 == 2))
                {
LABEL_632:
                  *(_QWORD *)v167 = 4;
                }
              }
            }
            *(_DWORD *)(v401 + 32 * v162 + 16) = -21020677;
          }
          v169 = (unsigned int *)(v167 + 20);
          if ((v168 & 1) != 0)
            *(_QWORD *)v167 &= ~2uLL;
        }
        *v169 = v168;
      }
      v171 = *(_QWORD *)v167;
      if (*(_QWORD *)v167 == 4 || (*(_QWORD *)v167 & 2) != 0)
        return 0;
      if ((v171 & 1) != 0)
        v173 = *(_DWORD *)(v171 & 0xFFFFFFFFFFFFFFFCLL);
      else
        v173 = v171 > 3;
      if (!v173)
        return 1;
      v251 = v173 - 1;
      do
      {
        v252 = *(_QWORD *)v167 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_QWORD *)v167 & 1) != 0)
          v252 = *(_QWORD *)(v252 + 8 * v251 + 8);
        v17 = (*(_DWORD *)(v252 + 16) & 3) != 2;
        if ((*(_DWORD *)(v252 + 16) & 3) == 2)
          break;
        LODWORD(v407) = 0;
        if (JSC::Structure::getConcurrently(v252, v158, &v407, v153, v154, v155, v156, v157) != v159
          || (v407 & 0x10) == 0)
        {
          return 0;
        }
      }
      while (v251--);
      return v17;
    case 0x9A:
      v183 = *((_QWORD *)a3 + 9);
      v184 = *(unsigned int *)(v183 + 20);
      if (!(_DWORD)v184)
        return v17;
      v185 = *(_QWORD *)(v183 + 8);
      v186 = v185 + 32 * v184;
      while (2)
      {
        v187 = *(_DWORD *)(v185 + 24);
        if (v187 == 3)
        {
          if (*(_BYTE *)(a1 + 82))
            return 0;
          v188 = *(unsigned int *)(v185 + 16);
          v407 = **(_QWORD **)(v185 + 8);
          v408 = v188;
          v189 = *((_QWORD *)a2 + 94);
          if (!v189)
            return 0;
          v190 = *(_DWORD *)(v189 - 8);
          v191 = WTF::IdentityHashTranslator<WTF::HashTraits<std::pair<JSC::JSObject *,int>>,WTF::DefaultHash<std::pair<JSC::JSObject *,int>>>::hash<std::pair<JSC::JSObject *,int>>((uint64_t)&v407) & v190;
          v192 = (uint64_t *)(v189 + 16 * v191);
          v193 = *v192;
          v194 = *((_DWORD *)v192 + 2);
          if (*v192 != v407 || v194 != (_DWORD)v408)
          {
            v196 = 1;
            while (v193 || v194)
            {
              v191 = (v191 + v196) & v190;
              v197 = (uint64_t *)(v189 + 16 * v191);
              v193 = *v197;
              v194 = *((_DWORD *)v197 + 2);
              ++v196;
              if (v193 == v407 && v194 == (_DWORD)v408)
                goto LABEL_195;
            }
            return 0;
          }
        }
        else if (!v187)
        {
          __break(0xC471u);
          JUMPOUT(0x19834A880);
        }
LABEL_195:
        v185 += 32;
        v17 = 1;
        if (v185 == v186)
          return v17;
        continue;
      }
    case 0xA4:
      v120 = *(_QWORD *)(a1 + 8);
      v121 = (uint64_t *)(v120 + 24);
      v122 = (uint64_t *)(v120 + 8);
      if ((*(_QWORD *)v12 & 1) != 0)
        v123 = v121;
      else
        v123 = v122;
      v124 = *v123;
      v125 = *v123 + 32 * *(unsigned int *)((*(_QWORD *)v12 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v126 = *(_DWORD *)(a1 + 88);
      v127 = (unsigned int *)(v125 + 20);
      v128 = *(_DWORD *)(v125 + 20);
      if (v126 == v128)
        goto LABEL_138;
      if ((*(_QWORD *)(v125 + 8) & 0x2800FFFFFFF7) == 0)
        goto LABEL_331;
      v390 = v124;
      v393 = *(unsigned int *)((*(_QWORD *)v12 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      if ((v128 ^ v126) < 2)
        goto LABEL_329;
      v255 = *(_QWORD *)v125;
      if (*(_QWORD *)v125 == 4)
        goto LABEL_328;
      *(_QWORD *)v125 = v255 | 2;
      v256 = (unsigned int *)(v255 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v255 & 1) != 0)
      {
        v355 = 2 * *v256;
        do
        {
          if (!(v355 * 4))
            goto LABEL_328;
          v356 = *(_QWORD *)&v256[v355];
          if ((*(_BYTE *)(v356 + 19) & 0xC) != 0)
            break;
          v357 = *(_QWORD *)(v356 + 96);
          v358 = (v357 & 1) != 0 ? (v357 >> 1) & 3 : *(unsigned __int8 *)(v357 + 4);
          v355 -= 2;
        }
        while (v358 != 2);
        WTF::fastFree((unint64_t)v256, (void *)v11, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      else if (!v256
             || (*((_BYTE *)v256 + 19) & 0xC) == 0
             && ((v257 = *((_QWORD *)v256 + 12), (v257 & 1) != 0)
               ? (v258 = (v257 >> 1) & 3)
               : (v258 = *(unsigned __int8 *)(v257 + 4)),
                 v258 != 2))
      {
LABEL_328:
        *(_DWORD *)(v390 + 32 * v393 + 16) = -21020677;
LABEL_329:
        v127 = (unsigned int *)(v125 + 20);
        if ((v126 & 1) != 0)
          *(_QWORD *)v125 &= ~2uLL;
LABEL_331:
        *v127 = v126;
LABEL_138:
        if ((*(_QWORD *)(v125 + 8) & 0xFFFFD7FF00000008) != 0)
          return 0;
        v129 = *(_QWORD *)(a1 + 8);
        v130 = *(unsigned int *)((*(_QWORD *)v12 & 0xFF00FFFFFFFFFFFELL) + 0x14);
        v131 = (uint64_t *)(v129 + 24);
        v132 = (uint64_t *)(v129 + 8);
        if ((*(_QWORD *)v12 & 1) != 0)
          v133 = v131;
        else
          v133 = v132;
        v134 = *v133;
        v135 = *v133 + 32 * v130;
        v136 = *(_DWORD *)(a1 + 88);
        v137 = *(_DWORD *)(v135 + 20);
        if (v136 != v137)
        {
          if ((*(_QWORD *)(v135 + 8) & 0x2800FFFFFFF7) != 0)
          {
            if ((v137 ^ v136) >= 2)
            {
              v298 = *(_QWORD *)v135;
              if (*(_QWORD *)v135 != 4)
              {
                *(_QWORD *)v135 = v298 | 2;
                v299 = (unsigned int *)(v298 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v298 & 1) != 0)
                {
                  v379 = 2 * *v299;
                  while (v379 * 4)
                  {
                    v380 = *(_QWORD *)&v299[v379];
                    if ((*(_BYTE *)(v380 + 19) & 0xC) == 0)
                    {
                      v381 = *(_QWORD *)(v380 + 96);
                      v382 = (v381 & 1) != 0 ? (v381 >> 1) & 3 : *(unsigned __int8 *)(v381 + 4);
                      v379 -= 2;
                      if (v382 != 2)
                        continue;
                    }
                    WTF::fastFree((unint64_t)v299, (void *)v11, (uint64_t)a3, a4, a5, a6, a7, a8);
                    goto LABEL_654;
                  }
                }
                else if (v299)
                {
                  if ((*((_BYTE *)v299 + 19) & 0xC) != 0
                    || ((v300 = *((_QWORD *)v299 + 12), (v300 & 1) != 0)
                      ? (v301 = (v300 >> 1) & 3)
                      : (v301 = *(unsigned __int8 *)(v300 + 4)),
                        v301 == 2))
                  {
LABEL_654:
                    *(_QWORD *)v135 = 4;
                  }
                }
              }
              *(_DWORD *)(v134 + 32 * v130 + 16) = -21020677;
            }
            if ((v136 & 1) != 0)
              *(_QWORD *)v135 &= ~2uLL;
          }
          *(_DWORD *)(v135 + 20) = v136;
        }
        v138 = *(_QWORD *)v135;
        if (*(_QWORD *)v135 == 4 || (*(_QWORD *)v135 & 2) != 0)
          return 0;
        if ((v138 & 1) != 0)
        {
          v279 = (unsigned int *)(v138 & 0xFFFFFFFFFFFFFFFCLL);
          v280 = 2 * *v279;
          do
          {
            v17 = v280 == 0;
            if (!(v280 * 4))
              break;
            v281 = *(unsigned __int8 *)(*(_QWORD *)&v279[v280] + 9);
            v280 -= 2;
          }
          while (v281 == 74);
          return v17;
        }
        if (v138 < 4)
          return 1;
        return *(_BYTE *)((v138 & 0xFFFFFFFFFFFFFFFCLL) + 9) == 74;
      }
      *(_QWORD *)v125 = 4;
      goto LABEL_328;
    case 0xD4:
      LODWORD(v407) = *((_DWORD *)a3 + 18);
      v140 = *((_DWORD *)a3 + 6) + 1;
      if (*((_DWORD *)a2 + 41) <= v140)
      {
        __break(0xC471u);
        JUMPOUT(0x19834A8F0);
      }
      v141 = *(_QWORD *)(*((_QWORD *)a2 + 19) + 8 * v140);
      v142 = *(_QWORD *)(a1 + 8);
      v143 = *(unsigned int *)((v141 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v144 = (uint64_t *)(v142 + 24);
      v145 = (uint64_t *)(v142 + 8);
      if ((v141 & 1) != 0)
        v146 = v144;
      else
        v146 = v145;
      v147 = *v146;
      v27 = *v146 + 32 * v143;
      v28 = *(_DWORD *)(a1 + 88);
      v29 = (unsigned int *)(v27 + 20);
      v148 = *(_DWORD *)(v27 + 20);
      if (v28 == v148)
        return JSC::DFG::ArrayMode::alreadyChecked((JSC::DFG::ArrayMode *)&v407, a2, a3, (const JSC::DFG::AbstractValue *)v27, a5, a6, a7, a8);
      if ((*(_QWORD *)(v27 + 8) & 0x2800FFFFFFF7) == 0)
        goto LABEL_64;
      v394 = v147;
      if ((v148 ^ v28) < 2)
        goto LABEL_342;
      v259 = *(_QWORD *)v27;
      if (*(_QWORD *)v27 == 4)
        goto LABEL_341;
      *(_QWORD *)v27 = v259 | 2;
      v260 = (unsigned int *)(v259 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v259 & 1) != 0)
      {
        v359 = 2 * *v260;
        do
        {
          if (!(v359 * 4))
            goto LABEL_341;
          v360 = *(_QWORD *)&v260[v359];
          if ((*(_BYTE *)(v360 + 19) & 0xC) != 0)
            break;
          v361 = *(_QWORD *)(v360 + 96);
          v362 = (v361 & 1) != 0 ? (v361 >> 1) & 3 : *(unsigned __int8 *)(v361 + 4);
          v359 -= 2;
        }
        while (v362 != 2);
        WTF::fastFree((unint64_t)v260, (void *)v11, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      else if (!v260
             || (*((_BYTE *)v260 + 19) & 0xC) == 0
             && ((v261 = *((_QWORD *)v260 + 12), (v261 & 1) != 0)
               ? (v262 = (v261 >> 1) & 3)
               : (v262 = *(unsigned __int8 *)(v261 + 4)),
                 v262 != 2))
      {
LABEL_341:
        *(_DWORD *)(v394 + 32 * v143 + 16) = -21020677;
LABEL_342:
        v29 = (unsigned int *)(v27 + 20);
        if ((v28 & 1) != 0)
LABEL_63:
          *(_QWORD *)v27 &= ~2uLL;
LABEL_64:
        *v29 = v28;
        return JSC::DFG::ArrayMode::alreadyChecked((JSC::DFG::ArrayMode *)&v407, a2, a3, (const JSC::DFG::AbstractValue *)v27, a5, a6, a7, a8);
      }
      *(_QWORD *)v27 = 4;
      goto LABEL_341;
    case 0xE1:
      v39 = *((_QWORD *)a3 + 5) & 0xFC000000000000;
      v40 = 0x54000000000000;
      return v39 == v40;
    case 0x131:
      v39 = *(_QWORD *)v12 & 0xFC000000000000;
      v40 = 0xC4000000000000;
      return v39 == v40;
    case 0x1A0:
    case 0x1A1:
      v93 = *(_QWORD *)(a1 + 8);
      v94 = *(unsigned int *)((*(_QWORD *)v12 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v95 = (uint64_t *)(v93 + 24);
      v96 = (uint64_t *)(v93 + 8);
      if ((*(_QWORD *)v12 & 1) != 0)
        v97 = v95;
      else
        v97 = v96;
      v98 = *v97;
      v99 = (uint64_t *)(v98 + 32 * v94);
      v100 = *(_DWORD *)(a1 + 88);
      v101 = *((_DWORD *)v99 + 5);
      if (v100 == v101)
        goto LABEL_100;
      if ((v99[1] & 0x2800FFFFFFF7) == 0)
        goto LABEL_305;
      v400 = v98;
      if ((v101 ^ v100) < 2)
        goto LABEL_303;
      v247 = *v99;
      if (*v99 == 4)
        goto LABEL_302;
      *v99 = v247 | 2;
      v248 = (unsigned int *)(v247 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v247 & 1) != 0)
      {
        v347 = 2 * *v248;
        do
        {
          if (!(v347 * 4))
            goto LABEL_302;
          v348 = *(_QWORD *)&v248[v347];
          if ((*(_BYTE *)(v348 + 19) & 0xC) != 0)
            break;
          v349 = *(_QWORD *)(v348 + 96);
          v350 = (v349 & 1) != 0 ? (v349 >> 1) & 3 : *(unsigned __int8 *)(v349 + 4);
          v347 -= 2;
        }
        while (v350 != 2);
        WTF::fastFree((unint64_t)v248, (void *)v11, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      else if (!v248
             || (*((_BYTE *)v248 + 19) & 0xC) == 0
             && ((v249 = *((_QWORD *)v248 + 12), (v249 & 1) != 0)
               ? (v250 = (v249 >> 1) & 3)
               : (v250 = *(unsigned __int8 *)(v249 + 4)),
                 v250 != 2))
      {
LABEL_302:
        *(_DWORD *)(v400 + 32 * v94 + 16) = -21020677;
LABEL_303:
        if ((v100 & 1) != 0)
          *v99 &= ~2uLL;
LABEL_305:
        *((_DWORD *)v99 + 5) = v100;
LABEL_100:
        v102 = *v99;
        if (*v99 == 4 || (*v99 & 2) != 0)
          return 0;
        v104 = *((unsigned __int16 *)a3 + 9);
        if (v104 == 417)
        {
          v105 = (uint64_t *)(*((_QWORD *)a3 + 9) + 8);
        }
        else
        {
          if (v104 != 416)
          {
            __break(0xC471u);
            JUMPOUT(0x19834A8C0);
          }
          v105 = (uint64_t *)(*((_QWORD *)a3 + 9) + 32);
        }
        v212 = *v105;
        v213 = (unsigned int *)(v102 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v102 & 1) != 0)
        {
          v218 = *v213;
          if (!(_DWORD)v218)
            return 1;
          v219 = 0;
          v220 = v213 + 2;
          LOBYTE(v17) = 1;
          do
          {
            v221 = *(_QWORD *)&v220[2 * v219];
            v222 = *(unsigned int *)(v221 + 76);
            v223 = *(_DWORD *)(v221 + 76) != 0;
            v224 = 16 * v222;
            if ((_DWORD)v222)
              v225 = v212 == v224;
            else
              v225 = 1;
            if (!v225)
            {
              do
              {
                v224 = *(_QWORD *)(v224 + 16);
                v223 = v224 != 0;
              }
              while (v224 != v212 && v224 != 0);
            }
            if ((_BYTE)v17)
              v17 = v223;
            else
              v17 = 0;
            ++v219;
          }
          while (v219 != v218);
        }
        else
        {
          if (!v213)
            return 1;
          v214 = v213[19];
          v17 = v213[19] != 0;
          v215 = 16 * v214;
          if ((_DWORD)v214)
            v216 = v212 == v215;
          else
            v216 = 1;
          if (!v216)
          {
            do
            {
              v215 = *(_QWORD *)(v215 + 16);
              v17 = v215 != 0;
            }
            while (v215 != v212 && v215 != 0);
          }
        }
        return v17;
      }
      *v99 = 4;
      goto LABEL_302;
    case 0x1B1:
      __break(0xC471u);
      JUMPOUT(0x19834A8A0);
    default:
      __break(0xC471u);
      JUMPOUT(0x19834A8E0);
  }
}

uint64_t WTF::dataLog<JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>,char [2],JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  char **v15;
  char *v16;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::dump(a1, (uint64_t)v6);
  WTF::PrintStream::printf(v6, "%s", " ");
  JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::dump(a2, v6, v7, v8, v9, v10, v11, v12);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::dump(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  uint64_t v86;
  unsigned int *v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  _QWORD v95[4];
  char v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t *v101;
  const char **v102;
  uint64_t v103;

  v95[0] = " ";
  v95[1] = 2;
  v95[2] = "";
  v95[3] = 1;
  v96 = 0;
  v94 = 0;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 944) == 2)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 72) + 200);
    v11 = *(unsigned int *)(v10 + 76);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)(v10 + 64);
      v13 = &v12[v11];
      do
      {
        v99 = *v12;
        WTF::HashTable<JSC::DFG::NodeFlowProjection,JSC::DFG::NodeFlowProjection,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>>::add(&v100, &v94, &v99, a4, a5, a6, a7, a8);
        v14 = *(_QWORD *)(a1 + 24);
        v15 = *(_QWORD *)(v14 + 8);
        v16 = *(unsigned int *)((v99 & 0xFFFFFFFFFFFFFFFELL) + 20);
        v17 = (uint64_t *)(v15 + 24);
        v18 = (uint64_t *)(v15 + 8);
        if ((v99 & 1) != 0)
          v19 = v17;
        else
          v19 = v18;
        v20 = *v19;
        v21 = *v19 + 32 * v16;
        v22 = *(_DWORD *)(v14 + 88);
        v23 = *(_DWORD *)(v21 + 20);
        if (v22 != v23)
        {
          if ((*(_QWORD *)(v21 + 8) & 0x2800FFFFFFF7) != 0)
          {
            if ((v23 ^ v22) >= 2)
            {
              v24 = *(_QWORD *)v21;
              if (*(_QWORD *)v21 != 4)
              {
                *(_QWORD *)v21 = v24 | 2;
                v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v24 & 1) != 0)
                {
                  v28 = 2 * *v25;
                  while (v28 * 4)
                  {
                    v29 = *(_QWORD *)&v25[v28];
                    if ((*(_BYTE *)(v29 + 19) & 0xC) == 0)
                    {
                      v30 = *(_QWORD *)(v29 + 96);
                      v31 = (v30 & 1) != 0 ? (v30 >> 1) & 3 : *(unsigned __int8 *)(v30 + 4);
                      v28 -= 2;
                      if (v31 != 2)
                        continue;
                    }
                    WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
                    goto LABEL_35;
                  }
                }
                else if (v25)
                {
                  if ((*((_BYTE *)v25 + 19) & 0xC) != 0
                    || ((v26 = *((_QWORD *)v25 + 12), (v26 & 1) != 0)
                      ? (v27 = (v26 >> 1) & 3)
                      : (v27 = *(unsigned __int8 *)(v26 + 4)),
                        v27 == 2))
                  {
LABEL_35:
                    *(_QWORD *)v21 = 4;
                  }
                }
              }
              *(_DWORD *)(v20 + 32 * v16 + 16) = -21020677;
            }
            if ((v22 & 1) != 0)
              *(_QWORD *)v21 &= ~2uLL;
          }
          *(_DWORD *)(v21 + 20) = v22;
        }
        if (*(_QWORD *)(v21 + 8))
        {
          v97 = ":";
          v98 = 2;
          v100 = v95;
          v101 = &v99;
          v102 = &v97;
          v103 = v21;
          WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,JSC::DFG::NodeFlowProjection,WTF::ASCIILiteral,JSC::DFG::AbstractValue>(WTF::CommaPrinter,JSC::DFG::NodeFlowProjection,WTF::ASCIILiteral,JSC::DFG::AbstractValue const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)a2, (uint64_t *)&v100);
        }
        ++v12;
      }
      while (v12 != v13);
    }
  }
  v32 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 72);
  if (*(_DWORD *)(v32 + 220))
  {
    v33 = 0;
    do
    {
      v99 = *(_QWORD *)(*(_QWORD *)(v32 + 208) + 8 * v33);
      v34 = v99;
      WTF::HashTable<JSC::DFG::NodeFlowProjection,JSC::DFG::NodeFlowProjection,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>>::add(&v100, &v94, &v99, a4, a5, a6, a7, a8);
      v35 = *(_QWORD *)(a1 + 24);
      v36 = *(_QWORD *)(v35 + 8);
      v37 = *(unsigned int *)((v34 & 0xFFFFFFFFFFFFFFFELL) + 20);
      v38 = (uint64_t *)(v36 + 24);
      v39 = (uint64_t *)(v36 + 8);
      if ((v34 & 1) != 0)
        v39 = v38;
      v40 = *v39;
      v41 = *v39 + 32 * v37;
      v42 = *(_DWORD *)(v35 + 88);
      v43 = *(_DWORD *)(v41 + 20);
      if (v42 != v43)
      {
        if ((*(_QWORD *)(v41 + 8) & 0x2800FFFFFFF7) != 0)
        {
          if ((v43 ^ v42) >= 2)
          {
            v50 = *(_QWORD *)v41;
            if (*(_QWORD *)v41 != 4)
            {
              *(_QWORD *)v41 = v50 | 2;
              v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v50 & 1) != 0)
              {
                v58 = 2 * *v51;
                while (v58 * 4)
                {
                  v59 = *(_QWORD *)&v51[v58];
                  if ((*(_BYTE *)(v59 + 19) & 0xC) == 0)
                  {
                    v60 = *(_QWORD *)(v59 + 96);
                    v61 = (v60 & 1) != 0 ? (v60 >> 1) & 3 : *(unsigned __int8 *)(v60 + 4);
                    v58 -= 2;
                    if (v61 != 2)
                      continue;
                  }
                  WTF::fastFree((unint64_t)v51, a2, a3, a4, a5, a6, a7, a8);
                  goto LABEL_86;
                }
              }
              else if (v51)
              {
                if ((*((_BYTE *)v51 + 19) & 0xC) != 0
                  || ((v52 = *((_QWORD *)v51 + 12), (v52 & 1) != 0)
                    ? (v53 = (v52 >> 1) & 3)
                    : (v53 = *(unsigned __int8 *)(v52 + 4)),
                      v53 == 2))
                {
LABEL_86:
                  *(_QWORD *)v41 = 4;
                }
              }
            }
            *(_DWORD *)(v40 + 32 * v37 + 16) = -21020677;
          }
          if ((v42 & 1) != 0)
            *(_QWORD *)v41 &= ~2uLL;
        }
        *(_DWORD *)(v41 + 20) = v42;
      }
      if (*(_QWORD *)(v41 + 8))
      {
        v97 = ":";
        v98 = 2;
        v100 = v95;
        v101 = &v99;
        v102 = &v97;
        v103 = v41;
        WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,JSC::DFG::NodeFlowProjection,WTF::ASCIILiteral,JSC::DFG::AbstractValue>(WTF::CommaPrinter,JSC::DFG::NodeFlowProjection,WTF::ASCIILiteral,JSC::DFG::AbstractValue const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)a2, (uint64_t *)&v100);
      }
      if (*(_WORD *)(v34 + 18) == 27)
      {
        v99 = v34 | 1;
        WTF::HashTable<JSC::DFG::NodeFlowProjection,JSC::DFG::NodeFlowProjection,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>>::add(&v100, &v94, &v99, a4, a5, a6, a7, a8);
        v44 = *(_QWORD *)(a1 + 24);
        v45 = *(unsigned int *)((v34 & 0xFFFFFFFFFFFFFFFELL) + 20);
        v46 = *(_QWORD *)(*(_QWORD *)(v44 + 8) + 24);
        v47 = (uint64_t *)(v46 + 32 * v45);
        v48 = *(_DWORD *)(v44 + 88);
        v49 = *((_DWORD *)v47 + 5);
        if (v48 != v49)
        {
          if ((v47[1] & 0x2800FFFFFFF7) != 0)
          {
            if ((v49 ^ v48) >= 2)
            {
              v54 = *v47;
              if (*v47 != 4)
              {
                *v47 = v54 | 2;
                v55 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v54 & 1) != 0)
                {
                  v62 = 2 * *v55;
                  while (v62 * 4)
                  {
                    v63 = *(_QWORD *)&v55[v62];
                    if ((*(_BYTE *)(v63 + 19) & 0xC) == 0)
                    {
                      v64 = *(_QWORD *)(v63 + 96);
                      v65 = (v64 & 1) != 0 ? (v64 >> 1) & 3 : *(unsigned __int8 *)(v64 + 4);
                      v62 -= 2;
                      if (v65 != 2)
                        continue;
                    }
                    WTF::fastFree((unint64_t)v55, a2, a3, a4, a5, a6, a7, a8);
                    goto LABEL_96;
                  }
                }
                else if (v55)
                {
                  if ((*((_BYTE *)v55 + 19) & 0xC) != 0
                    || ((v56 = *((_QWORD *)v55 + 12), (v56 & 1) != 0)
                      ? (v57 = (v56 >> 1) & 3)
                      : (v57 = *(unsigned __int8 *)(v56 + 4)),
                        v57 == 2))
                  {
LABEL_96:
                    *v47 = 4;
                  }
                }
              }
              *(_DWORD *)(v46 + 32 * v45 + 16) = -21020677;
            }
            if ((v48 & 1) != 0)
              *v47 &= ~2uLL;
          }
          *((_DWORD *)v47 + 5) = v48;
        }
        if (v47[1])
        {
          v97 = ":";
          v98 = 2;
          v100 = v95;
          v101 = &v99;
          v102 = &v97;
          v103 = v46 + 32 * v45;
          WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,JSC::DFG::NodeFlowProjection,WTF::ASCIILiteral,JSC::DFG::AbstractValue>(WTF::CommaPrinter,JSC::DFG::NodeFlowProjection,WTF::ASCIILiteral,JSC::DFG::AbstractValue const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)a2, (uint64_t *)&v100);
        }
      }
      ++v33;
      v32 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 72);
    }
    while (v33 < *(unsigned int *)(v32 + 220));
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 944) == 2)
  {
    v66 = *(_QWORD *)(v32 + 200);
    v67 = *(unsigned int *)(v66 + 92);
    v68 = v94;
    if ((_DWORD)v67)
    {
      v69 = *(uint64_t **)(v66 + 80);
      v70 = &v69[v67];
      while (1)
      {
        v71 = *v69;
        v99 = *v69;
        if (!v68)
          goto LABEL_106;
        v72 = *(_DWORD *)(v68 - 8);
        v73 = v72 & v71;
        v74 = *(_QWORD *)(v68 + 8 * (v72 & v71));
        if (v74 != v71)
          break;
LABEL_112:
        if (++v69 == v70)
          goto LABEL_138;
      }
      v75 = 1;
      while (v74)
      {
        v73 = (v73 + v75) & v72;
        v74 = *(_QWORD *)(v68 + 8 * v73);
        ++v75;
        if (v74 == v71)
          goto LABEL_112;
      }
LABEL_106:
      v76 = *(_QWORD *)(a1 + 24);
      v77 = *(_QWORD *)(v76 + 8);
      v78 = *(unsigned int *)((v71 & 0xFFFFFFFFFFFFFFFELL) + 20);
      v79 = (uint64_t *)(v77 + 24);
      v80 = (uint64_t *)(v77 + 8);
      if ((v71 & 1) != 0)
        v81 = v79;
      else
        v81 = v80;
      v82 = *v81;
      v83 = *v81 + 32 * v78;
      v84 = *(_DWORD *)(v76 + 88);
      v85 = *(_DWORD *)(v83 + 20);
      if (v84 != v85)
      {
        if ((*(_QWORD *)(v83 + 8) & 0x2800FFFFFFF7) != 0)
        {
          if ((v85 ^ v84) >= 2)
          {
            v86 = *(_QWORD *)v83;
            if (*(_QWORD *)v83 != 4)
            {
              *(_QWORD *)v83 = v86 | 2;
              v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v86 & 1) != 0)
              {
                v90 = 2 * *v87;
                while (v90 * 4)
                {
                  v91 = *(_QWORD *)&v87[v90];
                  if ((*(_BYTE *)(v91 + 19) & 0xC) == 0)
                  {
                    v92 = *(_QWORD *)(v91 + 96);
                    v93 = (v92 & 1) != 0 ? (v92 >> 1) & 3 : *(unsigned __int8 *)(v92 + 4);
                    v90 -= 2;
                    if (v93 != 2)
                      continue;
                  }
                  WTF::fastFree((unint64_t)v87, a2, a3, a4, a5, a6, a7, a8);
                  goto LABEL_136;
                }
              }
              else if (v87)
              {
                if ((*((_BYTE *)v87 + 19) & 0xC) != 0
                  || ((v88 = *((_QWORD *)v87 + 12), (v88 & 1) != 0)
                    ? (v89 = (v88 >> 1) & 3)
                    : (v89 = *(unsigned __int8 *)(v88 + 4)),
                      v89 == 2))
                {
LABEL_136:
                  *(_QWORD *)v83 = 4;
                }
              }
            }
            *(_DWORD *)(v82 + 32 * v78 + 16) = -21020677;
          }
          if ((v84 & 1) != 0)
            *(_QWORD *)v83 &= ~2uLL;
        }
        *(_DWORD *)(v83 + 20) = v84;
      }
      if (*(_QWORD *)(v83 + 8))
      {
        v97 = ":";
        v98 = 2;
        v100 = v95;
        v101 = &v99;
        v102 = &v97;
        v103 = v83;
        WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,JSC::DFG::NodeFlowProjection,WTF::ASCIILiteral,JSC::DFG::AbstractValue>(WTF::CommaPrinter,JSC::DFG::NodeFlowProjection,WTF::ASCIILiteral,JSC::DFG::AbstractValue const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)a2, (uint64_t *)&v100);
      }
      goto LABEL_112;
    }
  }
  else
  {
    v68 = v94;
  }
LABEL_138:
  if (v68)
    WTF::fastFree(v68 - 16, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::Operands<JSC::DFG::AbstractValue,WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::dump(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  JSC::DFG::AbstractValue *v8;
  WTF::PrintStream *v9;
  unint64_t v10;
  unint64_t i;
  JSC::DFG::AbstractValue *v12;
  WTF::PrintStream *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  JSC::DFG::AbstractValue *v17;
  WTF::PrintStream *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  char v25;

  v3 = result;
  v24[0] = " ";
  v24[1] = 2;
  v24[2] = "";
  v24[3] = 1;
  v25 = 0;
  v4 = *(unsigned int *)(result + 16);
  v23 = v4 - 1;
  if ((_DWORD)v4)
  {
    v5 = v4 - 2;
    v6 = 32 * v4;
    do
    {
      v7 = *(_QWORD *)v3 + v6;
      if (*(_QWORD *)(v7 - 24))
      {
        v8 = (JSC::DFG::AbstractValue *)(v7 - 32);
        v21 = "arg";
        v22 = 4;
        v19 = ":";
        v20 = 2;
        v9 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,JSC::DFG::AbstractValue>(v9, (uint64_t)v24, (uint64_t)&v21, &v23, (uint64_t)&v19, v8);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      }
      v23 = v5--;
      v6 -= 32;
    }
    while (v5 != -2);
  }
  v23 = 0;
  v10 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v10)
  {
    for (i = 0; i < v10; v23 = i)
    {
      v12 = (JSC::DFG::AbstractValue *)(*(_QWORD *)v3 + 32 * (i + *(unsigned int *)(v3 + 16)));
      if (*((_QWORD *)v12 + 1))
      {
        v21 = "loc";
        v22 = 4;
        v19 = ":";
        v20 = 2;
        v13 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,JSC::DFG::AbstractValue>(v13, (uint64_t)v24, (uint64_t)&v21, &v23, (uint64_t)&v19, v12);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
        v10 = *(unsigned int *)(v3 + 20);
      }
      ++i;
    }
  }
  else
  {
    v10 = 0;
  }
  v23 = 0;
  v14 = *(unsigned int *)(v3 + 12);
  v15 = *(unsigned int *)(v3 + 16);
  if (v15 + v10 != v14)
  {
    v16 = 0;
    do
    {
      v17 = (JSC::DFG::AbstractValue *)(*(_QWORD *)v3 + 32 * (v16 + v10 + v15));
      if (*((_QWORD *)v17 + 1))
      {
        v21 = "tmp";
        v22 = 4;
        v19 = ":";
        v20 = 2;
        v18 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,JSC::DFG::AbstractValue>(v18, (uint64_t)v24, (uint64_t)&v21, &v23, (uint64_t)&v19, v17);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
        v14 = *(unsigned int *)(v3 + 12);
        v15 = *(unsigned int *)(v3 + 16);
        v10 = *(unsigned int *)(v3 + 20);
      }
      v23 = ++v16;
    }
    while (v16 < v14 - (v15 + v10));
  }
  return result;
}

uint64_t WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,JSC::DFG::AbstractValue>(WTF::PrintStream *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, JSC::DFG::AbstractValue *a6)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  WTF::PrintStream *v21;
  float v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  WTF::PrintStream *v28;
  float v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  WTF::PrintStream *v34;
  float v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v39;
  int v40;
  char v41;

  if (*(_BYTE *)(a2 + 32))
  {
    v12 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    v13 = *(char **)a2;
    v14 = *(_QWORD *)(a2 + 8);
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    if (v13)
    {
      v17 = v14 - 1;
      if (!v14)
        v17 = 0;
      WTF::StringImpl::utf8ForCharacters(v13, v17, (uint64_t)&v39, v16);
    }
    else
    {
      v24 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = 0;
      *(_BYTE *)(v24 + 16) = 0;
      v39 = v24;
      v40 = 0;
    }
    WTF::printExpectedCStringHelper(v15, "StringView", &v39);
    if (v40 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v41, &v39);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  }
  else
  {
    v18 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    v19 = *(char **)(a2 + 16);
    v20 = *(_QWORD *)(a2 + 24);
    v21 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    if (v19)
    {
      v23 = v20 - 1;
      if (!v20)
        v23 = 0;
      WTF::StringImpl::utf8ForCharacters(v19, v23, (uint64_t)&v39, v22);
    }
    else
    {
      v25 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = 0;
      *(_BYTE *)(v25 + 16) = 0;
      v39 = v25;
      v40 = 0;
    }
    WTF::printExpectedCStringHelper(v21, "StringView", &v39);
    if (v40 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v41, &v39);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
    *(_BYTE *)(a2 + 32) = 1;
  }
  v26 = *(char **)a3;
  v27 = *(_QWORD *)(a3 + 8);
  v28 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v26)
  {
    v30 = v27 - 1;
    if (!v27)
      v30 = 0;
    WTF::StringImpl::utf8ForCharacters(v26, v30, (uint64_t)&v39, v29);
  }
  else
  {
    v31 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v31 = 1;
    *(_QWORD *)(v31 + 8) = 0;
    *(_BYTE *)(v31 + 16) = 0;
    v39 = v31;
    v40 = 0;
  }
  WTF::printExpectedCStringHelper(v28, "StringView", &v39);
  if (v40 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v41, &v39);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%lu", *a4);
  v32 = *(char **)a5;
  v33 = *(_QWORD *)(a5 + 8);
  v34 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v32)
  {
    v36 = v33 - 1;
    if (!v33)
      v36 = 0;
    WTF::StringImpl::utf8ForCharacters(v32, v36, (uint64_t)&v39, v35);
  }
  else
  {
    v37 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)(v37 + 8) = 0;
    *(_BYTE *)(v37 + 16) = 0;
    v39 = v37;
    v40 = 0;
  }
  WTF::printExpectedCStringHelper(v34, "StringView", &v39);
  if (v40 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v41, &v39);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  return JSC::DFG::AbstractValue::dumpInContext(a6, a1, 0);
}

void std::__introsort<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*,false>(uint64_t *a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  char v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;

  v8 = a5;
LABEL_2:
  v12 = a1;
LABEL_3:
  v13 = 1 - a4;
  while (2)
  {
    a1 = v12;
    v14 = v13;
    v15 = (char *)a2 - (char *)v12;
    v16 = 0xCCCCCCCCCCCCCCCDLL * (v15 >> 3);
    switch(v16)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v59 = *(a2 - 5);
        v58 = a2 - 5;
        if (*(_DWORD *)((v59 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFFELL) + 20))
        {
          v60 = (uint64_t)a1;
          v61 = v58;
          goto LABEL_29;
        }
        return;
      case 3uLL:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(a1, a1 + 5, a2 - 5, (uint64_t)a3, a5, a6, a7, a8);
        return;
      case 4uLL:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(a1, a1 + 5, a1 + 10, (uint64_t)a3, a5, a6, a7, a8);
        v69 = *(a2 - 5);
        v68 = a2 - 5;
        if (*(_DWORD *)((v69 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((a1[10] & 0xFFFFFFFFFFFFFFFELL) + 20))
        {
          std::swap[abi:sn180100]<JSC::DFG::NodeAbstractValuePair>((uint64_t)(a1 + 10), v68, v62, v63, v64, v65, v66, v67);
          if (*(_DWORD *)((a1[10] & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((a1[5] & 0xFFFFFFFFFFFFFFFELL) + 20))
          {
            std::swap[abi:sn180100]<JSC::DFG::NodeAbstractValuePair>((uint64_t)(a1 + 5), a1 + 10, v70, v71, v72, v73, v74, v75);
            if (*(_DWORD *)((a1[5] & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFFELL) + 20))
            {
              v60 = (uint64_t)a1;
              v61 = a1 + 5;
LABEL_29:
              std::swap[abi:sn180100]<JSC::DFG::NodeAbstractValuePair>(v60, v61, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
          }
        }
        return;
      case 5uLL:
        std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(a1, a1 + 5, a1 + 10, a1 + 15, a2 - 5, (uint64_t)a3, a7, a8);
        return;
      default:
        if (v15 <= 959)
        {
          if ((v8 & 1) != 0)
            std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          else
            std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          return;
        }
        if (v13 != 1)
        {
          v17 = v16 >> 1;
          v18 = &a1[5 * (v16 >> 1)];
          if ((unint64_t)v15 < 0x1401)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(v18, a1, a2 - 5, (uint64_t)a3, a5, a6, a7, a8);
            if ((v8 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(a1, v18, a2 - 5, (uint64_t)a3, a5, a6, a7, a8);
            v19 = 5 * v17;
            v20 = &a1[5 * v17 - 5];
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(a1 + 5, v20, a2 - 10, (uint64_t)a3, v21, v22, v23, v24);
            v25 = &a1[v19 + 5];
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(a1 + 10, v25, a2 - 15, (uint64_t)a3, v26, v27, v28, v29);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(v20, v18, v25, (uint64_t)a3, v30, v31, v32, v33);
            std::swap[abi:sn180100]<JSC::DFG::NodeAbstractValuePair>((uint64_t)a1, v18, v34, v35, v36, v37, v38, v39);
            if ((v8 & 1) != 0)
              goto LABEL_12;
          }
          if (*(_DWORD *)((*(a1 - 5) & 0xFFFFFFFFFFFFFFFELL) + 20) >= *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFFELL) + 20))
          {
            v12 = std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::NodeAbstractValuePair *,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &>((uint64_t)a1, a2, (uint64_t)a3, v40, v41, v42, v43, v44);
            goto LABEL_17;
          }
LABEL_12:
          v50 = std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::NodeAbstractValuePair *,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &>((uint64_t)a1, a2, (uint64_t)a3, v40, v41, v42, v43, v44);
          if ((v51 & 1) == 0)
            goto LABEL_15;
          v52 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(a1, v50, (uint64_t)a3, v45, v46, v47, v48, v49);
          v12 = v50 + 5;
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(v50 + 5, a2, (uint64_t)a3, v53, v54, v55, v56, v57))
          {
            v13 = v14 + 1;
            if (v52)
              continue;
LABEL_15:
            std::__introsort<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*,false>(a1, v50, a3, -v14, v8 & 1);
            v12 = v50 + 5;
LABEL_17:
            v8 = 0;
            a4 = -v14;
            goto LABEL_3;
          }
          a4 = -v14;
          a2 = v50;
          if (v52)
            return;
          goto LABEL_2;
        }
        if (a1 != a2)
        {
          v76 = (v16 - 2) >> 1;
          v77 = v76 + 1;
          v78 = &a1[5 * v76];
          do
          {
            std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>((uint64_t)a1, (uint64_t)a3, 0xCCCCCCCCCCCCCCCDLL * (v15 >> 3), v78, a5, a6, a7, a8);
            v78 -= 5;
            --v77;
          }
          while (v77);
          v79 = ((unint64_t)v15 * (unsigned __int128)0xCCCCCCCCCCCCCCCDLL) >> 64;
          v80 = v15 / 0x28uLL;
          do
          {
            std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1},JSC::DFG::NodeAbstractValuePair*>((uint64_t)a1, (char *)a2, a3, v80, a5, a6, a7, a8, v79);
            a2 -= 5;
            v79 = v80 - 1;
          }
          while (v80-- > 2);
        }
        return;
    }
  }
}

void std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (a1 != a2)
  {
    v42 = v8;
    v43 = v9;
    v12 = a1 + 5;
    if (a1 + 5 != a2)
    {
      v13 = 0;
      v14 = a1;
      do
      {
        v15 = v12;
        if (*(_DWORD *)((v14[5] & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*v14 & 0xFFFFFFFFFFFFFFFELL) + 20))
        {
          v16 = v14[6];
          v38 = v14[5];
          v39 = 0;
          if ((v16 & 1) == 0 || v16 == 4)
          {
            v17 = v16 & 0xFFFFFFFFFFFFFFFDLL;
          }
          else
          {
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(&v39, v14 + 6);
            v17 = v39;
            v16 = v14[6];
          }
          v18 = v17 & 0xFFFFFFFFFFFFFFFDLL;
          v19 = v17 | 2;
          if ((v16 & 2) != 0)
            v20 = v19;
          else
            v20 = v18;
          v39 = v20;
          v40 = *(_OWORD *)(v14 + 7);
          v41 = v14[9];
          v21 = *v14;
          v22 = v13;
          while (1)
          {
            v24 = (_QWORD *)((char *)a1 + v22 + 48);
            v23 = *v24;
            *(_QWORD *)((char *)a1 + v22 + 40) = v21;
            if ((v23 & 1) != 0)
              WTF::fastFree(v23 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
            v25 = *(_QWORD *)((char *)a1 + v22 + 8);
            if ((v25 & 1) == 0 || v25 == 4)
            {
              v26 = (*(_BYTE *)v24 & 2) != 0 ? v25 | 2 : v25 & 0xFFFFFFFFFFFFFFFDLL;
            }
            else
            {
              WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((_QWORD *)((char *)a1 + v22 + 48), (_QWORD *)((char *)a1 + v22 + 8));
              v26 = *v24;
              v25 = *(_QWORD *)((char *)a1 + v22 + 8);
            }
            v27 = v26 & 0xFFFFFFFFFFFFFFFDLL;
            v28 = v26 | 2;
            v29 = (v25 & 2) != 0 ? v28 : v27;
            *v24 = v29;
            v30 = (char *)a1 + v22;
            *(_OWORD *)(v30 + 56) = *(_OWORD *)((char *)a1 + v22 + 16);
            *((_QWORD *)v30 + 9) = *(_QWORD *)((char *)a1 + v22 + 32);
            if (!v22)
              break;
            v21 = *((_QWORD *)v30 - 5);
            v22 -= 40;
            if (*(_DWORD *)((v38 & 0xFFFFFFFFFFFFFFFELL) + 20) >= *(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFFELL) + 20))
            {
              v31 = (_QWORD *)((char *)a1 + v22 + 40);
              goto LABEL_26;
            }
          }
          v31 = a1;
LABEL_26:
          *v31 = v38;
          v34 = *((_QWORD *)v30 + 1);
          v33 = v30 + 8;
          v32 = v34;
          if (v31 != &v38)
          {
            if ((v32 & 1) != 0)
              WTF::fastFree(v32 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
            if ((v39 & 1) == 0 || v39 == 4)
            {
              v32 = v39 | 2;
              if ((*v33 & 2) == 0)
                v32 = v39 & 0xFFFFFFFFFFFFFFFDLL;
              *(_QWORD *)v33 = v32;
            }
            else
            {
              WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v33, &v39);
              v32 = *(_QWORD *)v33;
            }
          }
          v35 = v39;
          v36 = v32 & 0xFFFFFFFFFFFFFFFDLL;
          v37 = v32 | 2;
          if ((v39 & 2) == 0)
            v37 = v36;
          *(_QWORD *)v33 = v37;
          *(_OWORD *)(v33 + 8) = v40;
          *((_QWORD *)v33 + 3) = v41;
          if ((v35 & 1) != 0)
            WTF::fastFree(v35 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        }
        v12 = v15 + 5;
        v13 += 40;
        v14 = v15;
      }
      while (v15 + 5 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v34;
  unsigned int v35;
  uint64_t *v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;

  if (a1 != a2)
  {
    v10 = a1 + 5;
    if (a1 + 5 != a2)
    {
      v11 = 0;
      v12 = a1 - 5;
      v13 = -2;
      v14 = 1;
      v15 = a1;
      do
      {
        v16 = v14;
        v17 = *v10;
        if (*(_DWORD *)((*v10 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*v15 & 0xFFFFFFFFFFFFFFFELL) + 20))
        {
          v18 = v15[6];
          v42 = v17;
          v43 = 0;
          if ((v18 & 1) == 0 || v18 == 4)
          {
            v19 = v18 & 0xFFFFFFFFFFFFFFFDLL;
          }
          else
          {
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(&v43, v15 + 6);
            v19 = v43;
            v18 = v15[6];
          }
          v20 = v19 & 0xFFFFFFFFFFFFFFFDLL;
          v21 = v19 | 2;
          if ((v18 & 2) != 0)
            v22 = v21;
          else
            v22 = v20;
          v43 = v22;
          v44 = *(_OWORD *)(v15 + 7);
          v45 = v15[9];
          v23 = a1[5 * v11];
          v24 = v13;
          v25 = v12;
          do
          {
            v27 = v25 + 11;
            v26 = v25[11];
            v25[10] = v23;
            if ((v26 & 1) != 0)
              WTF::fastFree(v26 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
            v28 = v25[6];
            if ((v28 & 1) == 0 || v28 == 4)
            {
              v29 = v28 & 0xFFFFFFFFFFFFFFFDLL;
              v30 = v28 | 2;
              if ((*v27 & 2) == 0)
                v30 = v29;
              *(_QWORD *)v27 = v30;
            }
            else
            {
              WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v25 + 11, v25 + 6);
              v30 = *(_QWORD *)v27;
            }
            v31 = v30 & 0xFFFFFFFFFFFFFFFDLL;
            v32 = v30 | 2;
            if ((v25[6] & 2) == 0)
              v32 = v31;
            v25[11] = v32;
            *((_OWORD *)v25 + 6) = *(_OWORD *)(v25 + 7);
            v25[14] = v25[9];
            if (__CFADD__(v24++, 1))
            {
              __break(1u);
              return;
            }
            v34 = v25 - 5;
            v23 = *v25;
            v35 = *(_DWORD *)((*v25 & 0xFFFFFFFFFFFFFFFELL) + 20);
            v25 -= 5;
          }
          while (*(_DWORD *)((v42 & 0xFFFFFFFFFFFFFFFELL) + 20) < v35);
          v34[10] = v42;
          v36 = v34 + 10;
          v38 = v36 + 1;
          v37 = v36[1];
          if (v36 != &v42)
          {
            if ((v37 & 1) != 0)
              WTF::fastFree(v37 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
            if ((v43 & 1) == 0 || v43 == 4)
            {
              v37 = v43 | 2;
              if ((*v38 & 2) == 0)
                v37 = v43 & 0xFFFFFFFFFFFFFFFDLL;
            }
            else
            {
              WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v36 + 1, &v43);
              v37 = *(_QWORD *)v38;
            }
          }
          v39 = v43;
          v40 = v37 & 0xFFFFFFFFFFFFFFFDLL;
          v41 = v37 | 2;
          if ((v43 & 2) == 0)
            v41 = v40;
          *(_QWORD *)v38 = v41;
          *((_OWORD *)v36 + 1) = v44;
          v36[4] = v45;
          if ((v39 & 1) != 0)
            WTF::fastFree(v39 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        }
        v15 = &a1[5 * v16];
        v14 = v16 + 1;
        v10 = v15 + 5;
        v12 += 5;
        --v13;
        v11 = v16;
      }
      while (v15 + 5 != a2);
    }
  }
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v11 = *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 20);
  v12 = *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 20);
  if (v11 < *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFFELL) + 20))
  {
    if (v12 < v11)
    {
      std::swap[abi:sn180100]<JSC::DFG::NodeAbstractValuePair>((uint64_t)a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
      return 1;
    }
    std::swap[abi:sn180100]<JSC::DFG::NodeAbstractValuePair>((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 20) >= *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 20))
      return 1;
    v19 = (uint64_t)a2;
    v20 = a3;
LABEL_9:
    std::swap[abi:sn180100]<JSC::DFG::NodeAbstractValuePair>(v19, v20, v13, v14, v15, v16, v17, v18);
    return 2;
  }
  if (v12 < v11)
  {
    std::swap[abi:sn180100]<JSC::DFG::NodeAbstractValuePair>((uint64_t)a2, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 20) >= *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFFELL) + 20))
      return 1;
    v19 = (uint64_t)a1;
    v20 = a2;
    goto LABEL_9;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::NodeAbstractValuePair *,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;

  v11 = (uint64_t *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 8);
  v44 = *(_QWORD *)a1;
  v45 = 0;
  if ((v10 & 1) != 0)
    goto LABEL_55;
LABEL_2:
  v12 = v10 & 0xFFFFFFFFFFFFFFFDLL;
  while (1)
  {
    v13 = v12 & 0xFFFFFFFFFFFFFFFDLL;
    v14 = v12 | 2;
    if ((v10 & 2) != 0)
      v15 = v14;
    else
      v15 = v13;
    v45 = v15;
    v46 = *(_OWORD *)(a1 + 16);
    v47 = *(_QWORD *)(a1 + 32);
    v10 = v44;
    v16 = *(_DWORD *)((v44 & 0xFFFFFFFFFFFFFFFELL) + 20);
    if (v16 < *(_DWORD *)((*(a2 - 5) & 0xFFFFFFFFFFFFFFFELL) + 20))
    {
      v17 = (uint64_t *)(a1 + 40);
      while (v17 != a2)
      {
        v18 = *v17;
        v17 += 5;
        if (v16 < *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFFELL) + 20))
        {
          v19 = v17 - 5;
          goto LABEL_14;
        }
      }
      goto LABEL_54;
    }
    v20 = (uint64_t *)(a1 + 40);
    do
    {
      v19 = v20;
      if (v20 >= a2)
        break;
      v20 += 5;
    }
    while (v16 >= *(_DWORD *)((*v19 & 0xFFFFFFFFFFFFFFFELL) + 20));
LABEL_14:
    v21 = a2;
    if (v19 < a2)
    {
      v21 = a2;
      while (v21 != (uint64_t *)a1)
      {
        v22 = *(v21 - 5);
        v21 -= 5;
        if (v16 >= *(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFFELL) + 20))
          goto LABEL_18;
      }
      goto LABEL_54;
    }
LABEL_18:
    if (v19 >= v21)
      break;
LABEL_19:
    std::swap[abi:sn180100]<JSC::DFG::NodeAbstractValuePair>((uint64_t)v19, v21, a3, a4, a5, a6, a7, a8);
    v23 = v19 + 5;
    if (v19 + 5 != a2)
    {
      v10 = v44;
      v24 = *(_DWORD *)((v44 & 0xFFFFFFFFFFFFFFFELL) + 20);
      if (v24 < *(_DWORD *)((*v23 & 0xFFFFFFFFFFFFFFFELL) + 20))
        goto LABEL_25;
      v25 = v19 + 10;
      while (v25 != a2)
      {
        v26 = *v25;
        v25 += 5;
        if (v24 < *(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFFELL) + 20))
        {
          v23 = v25 - 5;
LABEL_25:
          while (v21 != (uint64_t *)a1)
          {
            v27 = *(v21 - 5);
            v21 -= 5;
            if (v24 >= *(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFFELL) + 20))
            {
              v19 = v23;
              if (v23 < v21)
                goto LABEL_19;
              goto LABEL_30;
            }
          }
          break;
        }
      }
    }
LABEL_54:
    __break(1u);
LABEL_55:
    if (v10 == 4)
      goto LABEL_2;
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v45, v11);
    v12 = v45;
    v10 = *v11;
  }
  v23 = v19;
LABEL_30:
  if (v23 - 5 != (uint64_t *)a1)
  {
    *(_QWORD *)a1 = *(v23 - 5);
    v28 = v23 - 4;
    v29 = *(_QWORD *)(a1 + 8);
    if ((v29 & 1) != 0)
      WTF::fastFree(v29 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v30 = a1 + 16;
    v31 = *v28;
    if ((*v28 & 1) == 0 || v31 == 4)
    {
      v32 = v31 & 0xFFFFFFFFFFFFFFFDLL;
      v33 = v31 | 2;
      if ((*(_BYTE *)v11 & 2) == 0)
        v33 = v32;
      *v11 = v33;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v11, v23 - 4);
      v33 = *v11;
    }
    v34 = v33 & 0xFFFFFFFFFFFFFFFDLL;
    v35 = v33 | 2;
    if ((*(_BYTE *)v28 & 2) == 0)
      v35 = v34;
    *v11 = v35;
    v36 = *(_OWORD *)(v23 - 3);
    *(_QWORD *)(v30 + 16) = *(v23 - 1);
    *(_OWORD *)v30 = v36;
    v10 = v44;
  }
  v38 = v23 - 4;
  v37 = *(v23 - 4);
  *(v23 - 5) = v10;
  if (v23 - 5 != &v44)
  {
    if ((v37 & 1) != 0)
      WTF::fastFree(v37 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    if ((v45 & 1) == 0 || v45 == 4)
    {
      if ((*(_BYTE *)v38 & 2) != 0)
        v37 = v45 | 2;
      else
        v37 = v45 & 0xFFFFFFFFFFFFFFFDLL;
      *v38 = v37;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v23 - 4, &v45);
      v37 = *v38;
    }
  }
  v39 = v37 & 0xFFFFFFFFFFFFFFFDLL;
  v40 = v37 | 2;
  if ((v45 & 2) != 0)
    v41 = v40;
  else
    v41 = v39;
  *(v23 - 4) = v41;
  v42 = v46;
  *(v23 - 1) = v47;
  *(_OWORD *)(v23 - 3) = v42;
  if ((v45 & 1) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
  return v23;
}

uint64_t *std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::NodeAbstractValuePair *,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  __int128 v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  uint64_t v49;

  v11 = (uint64_t *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 8);
  v46 = *(_QWORD *)a1;
  v47 = 0;
  if ((v10 & 1) != 0)
    goto LABEL_55;
LABEL_2:
  v12 = v10 & 0xFFFFFFFFFFFFFFFDLL;
  while (1)
  {
    v13 = v12 & 0xFFFFFFFFFFFFFFFDLL;
    v14 = v12 | 2;
    v15 = (v10 & 2) != 0 ? v14 : v13;
    v47 = v15;
    v48 = *(_OWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 32);
    v49 = v10;
    v16 = (uint64_t *)(a1 + 40);
    if ((uint64_t *)(a1 + 40) != a2)
      break;
LABEL_54:
    __break(1u);
LABEL_55:
    if (v10 == 4)
      goto LABEL_2;
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v47, v11);
    v12 = v47;
    v10 = *v11;
  }
  v10 = v46;
  v17 = *(_DWORD *)((v46 & 0xFFFFFFFFFFFFFFFELL) + 20);
  if (*(_DWORD *)((*v16 & 0xFFFFFFFFFFFFFFFELL) + 20) < v17)
  {
    v18 = 0;
    while (1)
    {
      v19 = (uint64_t *)(a1 + v18 + 80);
      if (v19 == a2)
        goto LABEL_54;
      v18 += 40;
      if (*(_DWORD *)((*v19 & 0xFFFFFFFFFFFFFFFELL) + 20) >= v17)
      {
        v16 = (uint64_t *)(a1 + v18 + 40);
        if (!v18)
          break;
        v20 = a2;
        while (v20 != (uint64_t *)a1)
        {
          v21 = *(v20 - 5);
          v20 -= 5;
          if (*(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFFELL) + 20) < v17)
            goto LABEL_19;
        }
        goto LABEL_54;
      }
    }
  }
  v20 = a2;
  do
  {
    if (v16 >= v20)
      break;
    v22 = *(v20 - 5);
    v20 -= 5;
  }
  while (*(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFFELL) + 20) >= v17);
LABEL_19:
  v23 = v16;
  if (v16 < v20)
  {
    v24 = (uint64_t)v16;
    v25 = v20;
LABEL_21:
    std::swap[abi:sn180100]<JSC::DFG::NodeAbstractValuePair>(v24, v25, a3, a4, a5, a6, a7, a8);
    v23 = (uint64_t *)(v24 + 40);
    if ((uint64_t *)(v24 + 40) != a2)
    {
      v10 = v46;
      v26 = *(_DWORD *)((v46 & 0xFFFFFFFFFFFFFFFELL) + 20);
      if (*(_DWORD *)((*v23 & 0xFFFFFFFFFFFFFFFELL) + 20) >= v26)
        goto LABEL_27;
      v27 = (uint64_t *)(v24 + 80);
      while (v27 != a2)
      {
        v28 = *v27;
        v27 += 5;
        if (*(_DWORD *)((v28 & 0xFFFFFFFFFFFFFFFELL) + 20) >= v26)
        {
          v23 = v27 - 5;
LABEL_27:
          while (v25 != (uint64_t *)a1)
          {
            v29 = *(v25 - 5);
            v25 -= 5;
            if (*(_DWORD *)((v29 & 0xFFFFFFFFFFFFFFFELL) + 20) < v26)
            {
              v24 = (uint64_t)v23;
              if (v23 < v25)
                goto LABEL_21;
              goto LABEL_30;
            }
          }
          goto LABEL_54;
        }
      }
    }
    goto LABEL_54;
  }
LABEL_30:
  if (v23 - 5 != (uint64_t *)a1)
  {
    *(_QWORD *)a1 = *(v23 - 5);
    v30 = v23 - 4;
    v31 = *(_QWORD *)(a1 + 8);
    if ((v31 & 1) != 0)
      WTF::fastFree(v31 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v32 = a1 + 16;
    v33 = *v30;
    if ((*v30 & 1) == 0 || v33 == 4)
    {
      v34 = v33 & 0xFFFFFFFFFFFFFFFDLL;
      v35 = v33 | 2;
      if ((*(_BYTE *)v11 & 2) == 0)
        v35 = v34;
      *v11 = v35;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v11, v23 - 4);
      v35 = *v11;
    }
    v36 = v35 & 0xFFFFFFFFFFFFFFFDLL;
    v37 = v35 | 2;
    if ((*(_BYTE *)v30 & 2) == 0)
      v37 = v36;
    *v11 = v37;
    v38 = *(_OWORD *)(v23 - 3);
    *(_QWORD *)(v32 + 16) = *(v23 - 1);
    *(_OWORD *)v32 = v38;
    v10 = v46;
  }
  v40 = v23 - 4;
  v39 = *(v23 - 4);
  *(v23 - 5) = v10;
  if (v23 - 5 != &v46)
  {
    if ((v39 & 1) != 0)
      WTF::fastFree(v39 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    if ((v47 & 1) == 0 || v47 == 4)
    {
      if ((*(_BYTE *)v40 & 2) != 0)
        v39 = v47 | 2;
      else
        v39 = v47 & 0xFFFFFFFFFFFFFFFDLL;
      *v40 = v39;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v23 - 4, &v47);
      v39 = *v40;
    }
  }
  v41 = v39 & 0xFFFFFFFFFFFFFFFDLL;
  v42 = v39 | 2;
  if ((v47 & 2) != 0)
    v43 = v42;
  else
    v43 = v41;
  *(v23 - 4) = v43;
  v44 = v48;
  *(v23 - 1) = v49;
  *(_OWORD *)(v23 - 3) = v44;
  if ((v47 & 1) != 0)
    WTF::fastFree(v47 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
  return v23 - 5;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v11;
  _BOOL8 result;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;

  v8 = a3;
  v11 = 0xCCCCCCCCCCCCCCCDLL * (a2 - a1);
  result = 1;
  switch(v11)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)((*(a2 - 5) & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFFELL) + 20))
      {
        v13 = (uint64_t)a1;
        v14 = a2 - 5;
        goto LABEL_50;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(a1, a1 + 5, a2 - 5, a3, a5, a3, a7, a8);
      return 1;
    case 4uLL:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(a1, a1 + 5, a1 + 10, a3, a5, a3, a7, a8);
      v53 = *(a2 - 5);
      v52 = a2 - 5;
      if (*(_DWORD *)((v53 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((a1[10] & 0xFFFFFFFFFFFFFFFELL) + 20))
      {
        std::swap[abi:sn180100]<JSC::DFG::NodeAbstractValuePair>((uint64_t)(a1 + 10), v52, v46, v47, v48, v49, v50, v51);
        if (*(_DWORD *)((a1[10] & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((a1[5] & 0xFFFFFFFFFFFFFFFELL) + 20))
        {
          std::swap[abi:sn180100]<JSC::DFG::NodeAbstractValuePair>((uint64_t)(a1 + 5), a1 + 10, v54, v55, v56, v57, v58, v59);
          if (*(_DWORD *)((a1[5] & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFFELL) + 20))
          {
            v13 = (uint64_t)a1;
            v14 = a1 + 5;
LABEL_50:
            std::swap[abi:sn180100]<JSC::DFG::NodeAbstractValuePair>(v13, v14, a3, a4, a5, v8, a7, a8);
          }
        }
      }
      return 1;
    case 5uLL:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(a1, a1 + 5, a1 + 10, a1 + 15, a2 - 5, a3, a7, a8);
      return 1;
    default:
      v15 = a1 + 10;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(a1, a1 + 5, a1 + 10, a3, a5, a3, a7, a8);
      v23 = a1 + 15;
      if (a1 + 15 == a2)
        return 1;
      v24 = 0;
      v25 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)((*v23 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*v15 & 0xFFFFFFFFFFFFFFFELL) + 20))
    {
      v26 = v23[1];
      v60 = *v23;
      v61 = 0;
      if ((v26 & 1) == 0 || v26 == 4)
      {
        v27 = v26 & 0xFFFFFFFFFFFFFFFDLL;
      }
      else
      {
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v61, v23 + 1);
        v27 = v61;
        v26 = v23[1];
      }
      v28 = v27 & 0xFFFFFFFFFFFFFFFDLL;
      v29 = v27 | 2;
      v30 = (v26 & 2) != 0 ? v29 : v28;
      v61 = v30;
      v62 = *((_OWORD *)v23 + 1);
      v63 = v23[4];
      v31 = *v15;
      v32 = v24;
      while (1)
      {
        v34 = (_QWORD *)((char *)a1 + v32 + 128);
        v33 = *v34;
        *(_QWORD *)((char *)a1 + v32 + 120) = v31;
        if ((v33 & 1) != 0)
          WTF::fastFree(v33 & 0xFFFFFFFFFFFFFFFCLL, v16, v17, v18, v19, v20, v21, v22);
        v35 = *(_QWORD *)((char *)a1 + v32 + 88);
        if ((v35 & 1) == 0 || v35 == 4)
        {
          v36 = v35 & 0xFFFFFFFFFFFFFFFDLL;
          v37 = v35 | 2;
          if ((*(_BYTE *)v34 & 2) == 0)
            v37 = v36;
        }
        else
        {
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((_QWORD *)((char *)a1 + v32 + 128), (_QWORD *)((char *)a1 + v32 + 88));
          v37 = *v34;
        }
        v38 = v37 & 0xFFFFFFFFFFFFFFFDLL;
        v39 = v37 | 2;
        if ((*((_BYTE *)a1 + v32 + 88) & 2) == 0)
          v39 = v38;
        *v34 = v39;
        v40 = (char *)a1 + v32;
        *(_OWORD *)(v40 + 136) = *(_OWORD *)((char *)a1 + v32 + 96);
        *((_QWORD *)v40 + 19) = *(_QWORD *)((char *)a1 + v32 + 112);
        if (v32 == -80)
          break;
        v31 = *((_QWORD *)v40 + 5);
        v32 -= 40;
        if (*(_DWORD *)((v60 & 0xFFFFFFFFFFFFFFFELL) + 20) >= *(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 20))
        {
          v41 = (_QWORD *)((char *)a1 + v32 + 120);
          goto LABEL_26;
        }
      }
      v41 = a1;
LABEL_26:
      *v41 = v60;
      v44 = *((_QWORD *)v40 + 11);
      v43 = v40 + 88;
      v42 = v44;
      if (v41 != &v60)
      {
        if ((v42 & 1) != 0)
          WTF::fastFree(v42 & 0xFFFFFFFFFFFFFFFCLL, v16, v17, v18, v19, v20, v21, v22);
        if ((v61 & 1) == 0 || v61 == 4)
        {
          v42 = v61 | 2;
          if ((*v43 & 2) == 0)
            v42 = v61 & 0xFFFFFFFFFFFFFFFDLL;
          *(_QWORD *)v43 = v42;
        }
        else
        {
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v43, &v61);
          v42 = *(_QWORD *)v43;
        }
      }
      v45 = (v61 & 2) != 0 ? v42 | 2 : v42 & 0xFFFFFFFFFFFFFFFDLL;
      *(_QWORD *)v43 = v45;
      *(_OWORD *)(v43 + 8) = v62;
      *((_QWORD *)v43 + 3) = v63;
      if ((v61 & 1) != 0)
        WTF::fastFree(v61 & 0xFFFFFFFFFFFFFFFCLL, v16, v17, v18, v19, v20, v21, v22);
      if (++v25 == 8)
        return v23 + 5 == a2;
    }
    v15 = v23;
    v24 += 40;
    v23 += 5;
    if (v23 == a2)
      return 1;
  }
}

void std::swap[abi:sn180100]<JSC::DFG::NodeAbstractValuePair>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v11 = (uint64_t *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 8);
  v25 = *(_QWORD *)a1;
  v26 = 0;
  if ((v10 & 1) == 0 || v10 == 4)
  {
    v12 = v10 & 0xFFFFFFFFFFFFFFFDLL;
  }
  else
  {
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(&v26, v11);
    v12 = v26;
    v10 = *v11;
  }
  v13 = v12 & 0xFFFFFFFFFFFFFFFDLL;
  v14 = v12 | 2;
  if ((v10 & 2) == 0)
    v14 = v13;
  v26 = v14;
  v27 = *(_OWORD *)(a1 + 16);
  v28 = *(_QWORD *)(a1 + 32);
  v15 = (unint64_t *)(a2 + 1);
  *(_QWORD *)a1 = *a2;
  if ((uint64_t *)a1 != a2)
  {
    if ((v10 & 1) != 0)
      WTF::fastFree(v10 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v16 = *v15;
    if ((*v15 & 1) == 0 || v16 == 4)
    {
      v17 = v16 & 0xFFFFFFFFFFFFFFFDLL;
      v10 = v16 | 2;
      if ((*(_BYTE *)v11 & 2) == 0)
        v10 = v17;
      *v11 = v10;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v11, a2 + 1);
      v10 = *v11;
    }
  }
  v18 = v10 & 0xFFFFFFFFFFFFFFFDLL;
  v19 = v10 | 2;
  if ((*(_BYTE *)v15 & 2) == 0)
    v19 = v18;
  *v11 = v19;
  v20 = *((_OWORD *)a2 + 1);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_OWORD *)(a1 + 16) = v20;
  *a2 = v25;
  v21 = a2[1];
  if (&v25 != a2)
  {
    if ((v21 & 1) != 0)
      WTF::fastFree(v21 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    if ((v26 & 1) == 0 || v26 == 4)
    {
      v21 = v26 | 2;
      if ((*(_BYTE *)v15 & 2) == 0)
        v21 = v26 & 0xFFFFFFFFFFFFFFFDLL;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(a2 + 1, &v26);
      v21 = *v15;
    }
  }
  v22 = v26;
  v23 = v21 & 0xFFFFFFFFFFFFFFFDLL;
  v24 = v21 | 2;
  if ((v26 & 2) == 0)
    v24 = v23;
  *v15 = v24;
  *((_OWORD *)a2 + 1) = v27;
  a2[4] = v28;
  if ((v22 & 1) != 0)
    WTF::fastFree(v22 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
}

void std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(a1, a2, a3, a6, (uint64_t)a5, a6, a7, a8);
  if (*(_DWORD *)((*a4 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 20))
  {
    std::swap[abi:sn180100]<JSC::DFG::NodeAbstractValuePair>((uint64_t)a3, a4, v13, v14, v15, v16, v17, v18);
    if (*(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 20))
    {
      std::swap[abi:sn180100]<JSC::DFG::NodeAbstractValuePair>((uint64_t)a2, a3, v13, v14, v15, v16, v17, v18);
      if (*(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFFELL) + 20))
        std::swap[abi:sn180100]<JSC::DFG::NodeAbstractValuePair>((uint64_t)a1, a2, v13, v14, v15, v16, v17, v18);
    }
  }
  if (*(_DWORD *)((*a5 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*a4 & 0xFFFFFFFFFFFFFFFELL) + 20))
  {
    std::swap[abi:sn180100]<JSC::DFG::NodeAbstractValuePair>((uint64_t)a4, a5, v13, v14, v15, v16, v17, v18);
    if (*(_DWORD *)((*a4 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 20))
    {
      std::swap[abi:sn180100]<JSC::DFG::NodeAbstractValuePair>((uint64_t)a3, a4, v19, v20, v21, v22, v23, v24);
      if (*(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 20))
      {
        std::swap[abi:sn180100]<JSC::DFG::NodeAbstractValuePair>((uint64_t)a2, a3, v25, v26, v27, v28, v29, v30);
        if (*(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFFELL) + 20))
          std::swap[abi:sn180100]<JSC::DFG::NodeAbstractValuePair>((uint64_t)a1, a2, v31, v32, v33, v34, v35, v36);
      }
    }
  }
}

void std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _BYTE *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v10 = a3 - 2;
  if (a3 < 2)
    return;
  v45 = v8;
  v46 = v9;
  v11 = a4;
  v13 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) < (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    return;
  v15 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
  v16 = (uint64_t *)(a1 + 40 * v15);
  if ((uint64_t)(0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2) >= a3)
  {
    v17 = *v16;
  }
  else
  {
    v17 = *v16;
    if (*(_DWORD *)((*v16 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((v16[5] & 0xFFFFFFFFFFFFFFFELL) + 20))
    {
      v17 = v16[5];
      v16 += 5;
      v15 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
    }
  }
  if (*(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*a4 & 0xFFFFFFFFFFFFFFFELL) + 20))
    return;
  v19 = a4 + 1;
  v18 = a4[1];
  v20 = (uint64_t *)&v42;
  v41 = *a4;
  v42 = 0;
  if ((v18 & 1) != 0 && v18 != 4)
  {
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v42, a4 + 1);
    v20 = (uint64_t *)&v42;
    v21 = v42;
    if ((*v19 & 2) != 0)
      goto LABEL_47;
LABEL_11:
    v22 = v21 & 0xFFFFFFFFFFFFFFFDLL;
    goto LABEL_12;
  }
  v21 = v18 & 0xFFFFFFFFFFFFFFFDLL;
  if ((v18 & 2) == 0)
    goto LABEL_11;
LABEL_47:
  v22 = v21 | 2;
LABEL_12:
  v42 = v22;
  v43 = *((_OWORD *)v11 + 1);
  v44 = v11[4];
  v23 = *v16;
  while (1)
  {
    v24 = v16;
    *v11 = v23;
    v26 = v11 + 1;
    v25 = v11[1];
    v27 = (unint64_t *)(v24 + 1);
    if (v11 != v24)
    {
      if ((v25 & 1) != 0)
      {
        v40 = v20;
        WTF::fastFree(v25 & 0xFFFFFFFFFFFFFFFCLL, v20, a3, (uint64_t)a4, a5, a6, a7, a8);
        v20 = v40;
      }
      v28 = *v27;
      if ((*v27 & 1) == 0 || v28 == 4)
      {
        v29 = v28 & 0xFFFFFFFFFFFFFFFDLL;
        v25 = v28 | 2;
        if ((*v26 & 2) == 0)
          v25 = v29;
        *(_QWORD *)v26 = v25;
      }
      else
      {
        v39 = v20;
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v11 + 1, v24 + 1);
        v20 = v39;
        v25 = *(_QWORD *)v26;
      }
    }
    v30 = v25 & 0xFFFFFFFFFFFFFFFDLL;
    v31 = v25 | 2;
    if ((*(_BYTE *)v27 & 2) == 0)
      v31 = v30;
    v11[1] = v31;
    v32 = *((_OWORD *)v24 + 1);
    v11[4] = v24[4];
    *((_OWORD *)v11 + 1) = v32;
    if (v13 < v15)
      break;
    v16 = (uint64_t *)(a1 + 40 * ((2 * v15) | 1));
    if (2 * v15 + 2 >= a3)
    {
      v23 = *v16;
      v15 = (2 * v15) | 1;
    }
    else
    {
      v23 = *v16;
      if (*(_DWORD *)((*v16 & 0xFFFFFFFFFFFFFFFELL) + 20) >= *(_DWORD *)((v16[5] & 0xFFFFFFFFFFFFFFFELL) + 20))
      {
        v15 = (2 * v15) | 1;
      }
      else
      {
        v23 = v16[5];
        v16 += 5;
        v15 = 2 * v15 + 2;
      }
    }
    v33 = v41;
    v11 = v24;
    if (*(_DWORD *)((v23 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((v41 & 0xFFFFFFFFFFFFFFFELL) + 20))
      goto LABEL_33;
  }
  v33 = v41;
LABEL_33:
  *v24 = v33;
  v34 = v24[1];
  if (v24 != &v41)
  {
    if ((v34 & 1) != 0)
    {
      v38 = v20;
      WTF::fastFree(v34 & 0xFFFFFFFFFFFFFFFCLL, v20, a3, (uint64_t)a4, a5, a6, a7, a8);
      v20 = v38;
    }
    if ((v42 & 1) == 0 || v42 == 4)
    {
      v34 = v42 | 2;
      if ((*(_BYTE *)v27 & 2) == 0)
        v34 = v42 & 0xFFFFFFFFFFFFFFFDLL;
      *v27 = v34;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v24 + 1, v20);
      v34 = *v27;
    }
  }
  v35 = v34 & 0xFFFFFFFFFFFFFFFDLL;
  v36 = v34 | 2;
  if ((v42 & 2) == 0)
    v36 = v35;
  *v27 = v36;
  v37 = v43;
  v24[4] = v44;
  *((_OWORD *)v24 + 1) = v37;
  if ((v42 & 1) != 0)
    WTF::fastFree(v42 & 0xFFFFFFFFFFFFFFFCLL, v20, a3, (uint64_t)a4, a5, a6, a7, a8);
}

void std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1},JSC::DFG::NodeAbstractValuePair*>(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unint64_t a9@<X8>)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;

  if (a4 <= 0)
  {
    __break(1u);
    goto LABEL_51;
  }
  v42 = v12;
  v43 = v11;
  v44 = v10;
  v45 = v9;
  v46 = v13;
  v47 = v14;
  if (a4 == 1)
    return;
  v20 = (uint64_t *)(a1 + 8);
  v19 = *(_QWORD *)(a1 + 8);
  v9 = (uint64_t *)&v39;
  v38 = *(_QWORD *)a1;
  v39 = 0;
  if ((v19 & 1) == 0 || v19 == 4)
  {
    v21 = v19 & 0xFFFFFFFFFFFFFFFDLL;
  }
  else
  {
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v39, v20);
    v21 = v39;
    v19 = *v20;
  }
  v22 = v21 & 0xFFFFFFFFFFFFFFFDLL;
  v23 = v21 | 2;
  if ((v19 & 2) != 0)
    v24 = v23;
  else
    v24 = v22;
  v39 = v24;
  v12 = &v40;
  v40 = *(_OWORD *)(a1 + 16);
  v41 = *(_QWORD *)(a1 + 32);
  v25 = std::__floyd_sift_down[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>((uint64_t *)a1, a3, a4, a4, a5, a6, a7, a8);
  v10 = v25;
  v11 = v25 + 1;
  if (v25 == (uint64_t *)(a2 - 40))
  {
    *v25 = v38;
    a9 = v25[1];
    if (v25 == &v38)
    {
LABEL_32:
      v35 = a9 & 0xFFFFFFFFFFFFFFFDLL;
      v36 = a9 | 2;
      if ((v39 & 2) == 0)
        v36 = v35;
      v10[1] = v36;
      v37 = *v12;
      v10[4] = *((_QWORD *)v12 + 2);
      *((_OWORD *)v10 + 1) = v37;
      goto LABEL_35;
    }
    if ((a9 & 1) == 0)
    {
LABEL_28:
      if ((v39 & 1) == 0 || v39 == 4)
      {
        a9 = v39 | 2;
        if ((*(_BYTE *)v11 & 2) == 0)
          a9 = v39 & 0xFFFFFFFFFFFFFFFDLL;
        *v11 = a9;
      }
      else
      {
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v11, v9);
        a9 = *v11;
      }
      goto LABEL_32;
    }
LABEL_51:
    WTF::fastFree(a9 & 0xFFFFFFFFFFFFFFFCLL, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    goto LABEL_28;
  }
  *v25 = *((_QWORD *)a2 - 5);
  v26 = (unint64_t *)(a2 - 32);
  v27 = v25[1];
  if ((v27 & 1) != 0)
    WTF::fastFree(v27 & 0xFFFFFFFFFFFFFFFCLL, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v28 = *v26;
  if ((*v26 & 1) == 0 || v28 == 4)
  {
    if ((*(_BYTE *)v11 & 2) != 0)
      v29 = v28 | 2;
    else
      v29 = v28 & 0xFFFFFFFFFFFFFFFDLL;
    *v11 = v29;
  }
  else
  {
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v11, (_QWORD *)a2 - 4);
    v29 = *v11;
  }
  if ((*(_BYTE *)v26 & 2) != 0)
    v30 = v29 | 2;
  else
    v30 = v29 & 0xFFFFFFFFFFFFFFFDLL;
  v10[1] = v30;
  v31 = *(_OWORD *)(a2 - 24);
  v10[4] = *((_QWORD *)a2 - 1);
  *((_OWORD *)v10 + 1) = v31;
  v32 = v10 + 5;
  *((_QWORD *)a2 - 5) = v38;
  v33 = *((_QWORD *)a2 - 4);
  if (a2 - 40 != (char *)&v38)
  {
    if ((v33 & 1) != 0)
      WTF::fastFree(v33 & 0xFFFFFFFFFFFFFFFCLL, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    if ((v39 & 1) == 0 || v39 == 4)
    {
      if ((*(_BYTE *)v26 & 2) != 0)
        v33 = v39 | 2;
      else
        v33 = v39 & 0xFFFFFFFFFFFFFFFDLL;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)a2 - 4, &v39);
      v33 = *v26;
    }
  }
  if ((v39 & 2) != 0)
    v34 = v33 | 2;
  else
    v34 = v33 & 0xFFFFFFFFFFFFFFFDLL;
  *v26 = v34;
  *(_OWORD *)(a2 - 24) = v40;
  *((_QWORD *)a2 - 1) = v41;
  std::__sift_up[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(a1, v32, (uint64_t)a3, 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v32 - a1) >> 3), a5, a6, a7, a8);
LABEL_35:
  if ((v39 & 1) != 0)
    WTF::fastFree(v39 & 0xFFFFFFFFFFFFFFFCLL, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

uint64_t *std::__floyd_sift_down[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;

  v10 = 0;
  v11 = a3 - 2;
  if (a3 < 2)
    v11 = a3 - 1;
  v12 = v11 >> 1;
  do
  {
    v13 = a1;
    a1 += 5 * v10 + 5;
    if (2 * v10 + 2 >= a3)
    {
      v14 = *a1;
      v10 = (2 * v10) | 1;
    }
    else
    {
      v14 = *a1;
      if (*(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFFELL) + 20) >= *(_DWORD *)((a1[5] & 0xFFFFFFFFFFFFFFFELL) + 20))
      {
        v10 = (2 * v10) | 1;
      }
      else
      {
        v14 = a1[5];
        a1 += 5;
        v10 = 2 * v10 + 2;
      }
    }
    *v13 = v14;
    v16 = v13 + 1;
    v15 = v13[1];
    v17 = a1 + 1;
    if (v13 != a1)
    {
      if ((v15 & 1) != 0)
        WTF::fastFree(v15 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v18 = *v17;
      if ((*v17 & 1) == 0 || v18 == 4)
      {
        v19 = v18 & 0xFFFFFFFFFFFFFFFDLL;
        v15 = v18 | 2;
        if ((*v16 & 2) == 0)
          v15 = v19;
        *(_QWORD *)v16 = v15;
      }
      else
      {
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v13 + 1, a1 + 1);
        v15 = *(_QWORD *)v16;
      }
    }
    v20 = v15 & 0xFFFFFFFFFFFFFFFDLL;
    v21 = v15 | 2;
    if ((*(_BYTE *)v17 & 2) == 0)
      v21 = v20;
    v13[1] = v21;
    v22 = *((_OWORD *)a1 + 1);
    v13[4] = a1[4];
    *((_OWORD *)v13 + 1) = v22;
  }
  while (v10 <= v12);
  return a1;
}

void std::__sift_up[abi:sn180100]<std::_ClassicAlgPolicy,WTF::CString JSC::DFG::nodeValuePairListDump<WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::DFG::NodeAbstractValuePair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::DumpContext *)::{lambda(JSC::DFG::NodeAbstractValuePair const&,JSC::DFG::NodeAbstractValuePair const&)#1} &,JSC::DFG::NodeAbstractValuePair*>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v10 = a4 - 2;
  if (a4 >= 2)
  {
    v40 = v8;
    v41 = v9;
    v13 = v10 >> 1;
    v14 = (char *)(a1 + 40 * (v10 >> 1));
    v15 = (char *)(a2 - 5);
    if (*(_DWORD *)((*(_QWORD *)v14 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((*(a2 - 5) & 0xFFFFFFFFFFFFFFFELL) + 20))
    {
      v17 = a2 - 4;
      v16 = *(a2 - 4);
      v36 = *(a2 - 5);
      v37 = 0;
      if ((v16 & 1) == 0 || v16 == 4)
      {
        v18 = v16 & 0xFFFFFFFFFFFFFFFDLL;
      }
      else
      {
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(&v37, a2 - 4);
        v18 = v37;
        v16 = *v17;
      }
      v19 = v18 & 0xFFFFFFFFFFFFFFFDLL;
      v20 = v18 | 2;
      if ((v16 & 2) != 0)
        v21 = v20;
      else
        v21 = v19;
      v37 = v21;
      v38 = *(_OWORD *)(a2 - 3);
      v39 = *(a2 - 1);
      v22 = *(_QWORD *)v14;
      do
      {
        v23 = v14;
        *(_QWORD *)v15 = v22;
        v25 = v15 + 8;
        v24 = *((_QWORD *)v15 + 1);
        v26 = (uint64_t *)(v14 + 8);
        if (v15 != v14)
        {
          if ((v24 & 1) != 0)
            WTF::fastFree(v24 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
          v27 = *v26;
          if ((*v26 & 1) == 0 || v27 == 4)
          {
            v28 = v27 & 0xFFFFFFFFFFFFFFFDLL;
            v24 = v27 | 2;
            if ((*v25 & 2) == 0)
              v24 = v28;
            *(_QWORD *)v25 = v24;
          }
          else
          {
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v15 + 1, (_QWORD *)v14 + 1);
            v24 = *(_QWORD *)v25;
          }
        }
        v29 = v24 & 0xFFFFFFFFFFFFFFFDLL;
        v30 = v24 | 2;
        if ((*(_BYTE *)v26 & 2) == 0)
          v30 = v29;
        *((_QWORD *)v15 + 1) = v30;
        v31 = *((_OWORD *)v14 + 1);
        *((_QWORD *)v15 + 4) = *((_QWORD *)v14 + 4);
        *((_OWORD *)v15 + 1) = v31;
        if (!v13)
          break;
        v13 = (v13 - 1) >> 1;
        v14 = (char *)(a1 + 40 * v13);
        v22 = *(_QWORD *)v14;
        v15 = v23;
      }
      while (*(_DWORD *)((*(_QWORD *)v14 & 0xFFFFFFFFFFFFFFFELL) + 20) < *(_DWORD *)((v36 & 0xFFFFFFFFFFFFFFFELL) + 20));
      *(_QWORD *)v23 = v36;
      v32 = *((_QWORD *)v23 + 1);
      if (v23 != (char *)&v36)
      {
        if ((v32 & 1) != 0)
          WTF::fastFree(v32 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        if ((v37 & 1) == 0 || v37 == 4)
        {
          v32 = v37 | 2;
          if ((*(_BYTE *)v26 & 2) == 0)
            v32 = v37 & 0xFFFFFFFFFFFFFFFDLL;
          *v26 = v32;
        }
        else
        {
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v26, &v37);
          v32 = *v26;
        }
      }
      v33 = v37;
      v34 = v32 & 0xFFFFFFFFFFFFFFFDLL;
      v35 = v32 | 2;
      if ((v37 & 2) == 0)
        v35 = v34;
      *v26 = v35;
      *((_OWORD *)v23 + 1) = v38;
      *((_QWORD *)v23 + 4) = v39;
      if ((v33 & 1) != 0)
        WTF::fastFree(v33 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t WTF::PrintStream::printImpl<WTF::CommaPrinter,JSC::DFG::NodeFlowProjection,WTF::ASCIILiteral,WTF::ValueInContext<JSC::DFG::AbstractValue,JSC::DumpContext>>(WTF::PrintStream *a1, uint64_t a2, JSC::DFG::NodeFlowProjection *a3, uint64_t a4, JSC::DFG::AbstractValue **a5)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  WTF::PrintStream *v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  WTF::PrintStream *v19;
  float v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  WTF::PrintStream *v26;
  float v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v31;
  int v32;
  char v33;

  if (*(_BYTE *)(a2 + 32))
  {
    v10 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    v11 = *(char **)a2;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    if (v11)
    {
      v15 = v12 - 1;
      if (!v12)
        v15 = 0;
      WTF::StringImpl::utf8ForCharacters(v11, v15, (uint64_t)&v31, v14);
    }
    else
    {
      v22 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = 0;
      *(_BYTE *)(v22 + 16) = 0;
      v31 = v22;
      v32 = 0;
    }
    WTF::printExpectedCStringHelper(v13, "StringView", &v31);
    if (v32 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  }
  else
  {
    v16 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    v17 = *(char **)(a2 + 16);
    v18 = *(_QWORD *)(a2 + 24);
    v19 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
    if (v17)
    {
      v21 = v18 - 1;
      if (!v18)
        v21 = 0;
      WTF::StringImpl::utf8ForCharacters(v17, v21, (uint64_t)&v31, v20);
    }
    else
    {
      v23 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = 0;
      *(_BYTE *)(v23 + 16) = 0;
      v31 = v23;
      v32 = 0;
    }
    WTF::printExpectedCStringHelper(v19, "StringView", &v31);
    if (v32 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
    *(_BYTE *)(a2 + 32) = 1;
  }
  JSC::DFG::NodeFlowProjection::dump(a3, a1);
  v24 = *(char **)a4;
  v25 = *(_QWORD *)(a4 + 8);
  v26 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v24)
  {
    v28 = v25 - 1;
    if (!v25)
      v28 = 0;
    WTF::StringImpl::utf8ForCharacters(v24, v28, (uint64_t)&v31, v27);
  }
  else
  {
    v29 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v29 = 1;
    *(_QWORD *)(v29 + 8) = 0;
    *(_BYTE *)(v29 + 16) = 0;
    v31 = v29;
    v32 = 0;
  }
  WTF::printExpectedCStringHelper(v26, "StringView", &v31);
  if (v32 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  return JSC::DFG::AbstractValue::dumpInContext(*a5, a1, a5[1]);
}

void JSC::DFG::SafeToExecuteEdge<JSC::DFG::InPlaceAbstractState>::operator()(_BYTE *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  unsigned int *v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int *v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;

  v10 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v11 = a2 & 0xFF00FFFFFFFFFFFELL;
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v10 + 24);
  v14 = (uint64_t *)(v10 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(*(_QWORD *)a1 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v19 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v19 | 2;
          v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v19 & 1) != 0)
          {
            v97 = 2 * *v20;
            while (v97 * 4)
            {
              v98 = *(_QWORD *)&v20[v97];
              if ((*(_BYTE *)(v98 + 19) & 0xC) == 0)
              {
                v99 = *(_QWORD *)(v98 + 96);
                v100 = (v99 & 1) != 0 ? (v99 >> 1) & 3 : *(unsigned __int8 *)(v99 + 4);
                v97 -= 2;
                if (v100 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v20, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_137;
            }
          }
          else if (v20)
          {
            if ((*((_BYTE *)v20 + 19) & 0xC) != 0
              || ((v21 = *((_QWORD *)v20 + 12), (v21 & 1) != 0)
                ? (v22 = (v21 >> 1) & 3)
                : (v22 = *(unsigned __int8 *)(v21 + 4)),
                  v22 == 2))
            {
LABEL_137:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  a1[9] |= (*(_QWORD *)(v16 + 8) & 0x40000000000) != 0;
  switch((a2 >> 50) & 0x3F)
  {
    case 0uLL:
    case 1uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 8uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x20uLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
      return;
    case 2uLL:
      v23 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      v24 = *(unsigned int *)(v11 + 20);
      v25 = (uint64_t *)(v23 + 24);
      v26 = (uint64_t *)(v23 + 8);
      if ((a2 & 1) != 0)
        v26 = v25;
      v27 = *v26;
      v28 = *v26 + 32 * v24;
      v29 = *(_DWORD *)(*(_QWORD *)a1 + 88);
      v30 = *(_DWORD *)(v28 + 20);
      if (v29 == v30)
        goto LABEL_22;
      if ((*(_QWORD *)(v28 + 8) & 0x2800FFFFFFF7) == 0)
        goto LABEL_62;
      if ((v30 ^ v29) < 2)
        goto LABEL_60;
      v73 = *(_QWORD *)v28;
      if (*(_QWORD *)v28 == 4)
        goto LABEL_59;
      *(_QWORD *)v28 = v73 | 2;
      v74 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v73 & 1) != 0)
      {
        v101 = 2 * *v74;
        do
        {
          if (!(v101 * 4))
            goto LABEL_59;
          v102 = *(_QWORD *)&v74[v101];
          if ((*(_BYTE *)(v102 + 19) & 0xC) != 0)
            break;
          v103 = *(_QWORD *)(v102 + 96);
          v104 = (v103 & 1) != 0 ? (v103 >> 1) & 3 : *(unsigned __int8 *)(v103 + 4);
          v101 -= 2;
        }
        while (v104 != 2);
        WTF::fastFree((unint64_t)v74, (void *)a2, a3, a4, a5, a6, a7, a8);
      }
      else if (!v74
             || (*((_BYTE *)v74 + 19) & 0xC) == 0
             && ((v75 = *((_QWORD *)v74 + 12), (v75 & 1) != 0)
               ? (v76 = (v75 >> 1) & 3)
               : (v76 = *(unsigned __int8 *)(v75 + 4)),
                 v76 != 2))
      {
LABEL_59:
        *(_DWORD *)(v27 + 32 * v24 + 16) = -21020677;
LABEL_60:
        if ((v29 & 1) != 0)
          *(_QWORD *)v28 &= ~2uLL;
LABEL_62:
        *(_DWORD *)(v28 + 20) = v29;
LABEL_22:
        if ((*(_QWORD *)(v28 + 8) & 0xFFFFFFFCFFFFFFFFLL) == 0)
          return;
LABEL_48:
        a1[8] = 0;
        return;
      }
      *(_QWORD *)v28 = 4;
      goto LABEL_59;
    case 7uLL:
      v31 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      v32 = *(unsigned int *)(v11 + 20);
      v33 = (uint64_t *)(v31 + 24);
      v34 = (uint64_t *)(v31 + 8);
      if ((a2 & 1) != 0)
        v34 = v33;
      v35 = *v34;
      v36 = *v34 + 32 * v32;
      v37 = *(_DWORD *)(*(_QWORD *)a1 + 88);
      v38 = *(_DWORD *)(v36 + 20);
      if (v37 == v38)
        goto LABEL_27;
      if ((*(_QWORD *)(v36 + 8) & 0x2800FFFFFFF7) == 0)
        goto LABEL_75;
      if ((v38 ^ v37) < 2)
        goto LABEL_73;
      v77 = *(_QWORD *)v36;
      if (*(_QWORD *)v36 == 4)
        goto LABEL_72;
      *(_QWORD *)v36 = v77 | 2;
      v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v77 & 1) != 0)
      {
        v105 = 2 * *v78;
        do
        {
          if (!(v105 * 4))
            goto LABEL_72;
          v106 = *(_QWORD *)&v78[v105];
          if ((*(_BYTE *)(v106 + 19) & 0xC) != 0)
            break;
          v107 = *(_QWORD *)(v106 + 96);
          v108 = (v107 & 1) != 0 ? (v107 >> 1) & 3 : *(unsigned __int8 *)(v107 + 4);
          v105 -= 2;
        }
        while (v108 != 2);
        WTF::fastFree((unint64_t)v78, (void *)a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_195;
      }
      if (v78)
      {
        if ((*((_BYTE *)v78 + 19) & 0xC) != 0
          || ((v79 = *((_QWORD *)v78 + 12), (v79 & 1) != 0)
            ? (v80 = (v79 >> 1) & 3)
            : (v80 = *(unsigned __int8 *)(v79 + 4)),
              v80 == 2))
        {
LABEL_195:
          *(_QWORD *)v36 = 4;
        }
      }
LABEL_72:
      *(_DWORD *)(v35 + 32 * v32 + 16) = -21020677;
LABEL_73:
      if ((v37 & 1) != 0)
        *(_QWORD *)v36 &= ~2uLL;
LABEL_75:
      *(_DWORD *)(v36 + 20) = v37;
LABEL_27:
      if ((*(_QWORD *)(v36 + 8) & 0xFFFFFEFFFFFFFFFFLL) != 0)
        goto LABEL_48;
      return;
    case 9uLL:
      v39 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      v40 = *(unsigned int *)(v11 + 20);
      v41 = (uint64_t *)(v39 + 24);
      v42 = (uint64_t *)(v39 + 8);
      if ((a2 & 1) != 0)
        v42 = v41;
      v43 = *v42;
      v44 = *v42 + 32 * v40;
      v45 = *(_DWORD *)(*(_QWORD *)a1 + 88);
      v46 = *(_DWORD *)(v44 + 20);
      if (v45 == v46)
        goto LABEL_32;
      if ((*(_QWORD *)(v44 + 8) & 0x2800FFFFFFF7) == 0)
        goto LABEL_88;
      if ((v46 ^ v45) < 2)
        goto LABEL_86;
      v81 = *(_QWORD *)v44;
      if (*(_QWORD *)v44 == 4)
        goto LABEL_85;
      *(_QWORD *)v44 = v81 | 2;
      v82 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v81 & 1) != 0)
      {
        v109 = 2 * *v82;
        do
        {
          if (!(v109 * 4))
            goto LABEL_85;
          v110 = *(_QWORD *)&v82[v109];
          if ((*(_BYTE *)(v110 + 19) & 0xC) != 0)
            break;
          v111 = *(_QWORD *)(v110 + 96);
          v112 = (v111 & 1) != 0 ? (v111 >> 1) & 3 : *(unsigned __int8 *)(v111 + 4);
          v109 -= 2;
        }
        while (v112 != 2);
        WTF::fastFree((unint64_t)v82, (void *)a2, a3, a4, a5, a6, a7, a8);
      }
      else if (!v82
             || (*((_BYTE *)v82 + 19) & 0xC) == 0
             && ((v83 = *((_QWORD *)v82 + 12), (v83 & 1) != 0)
               ? (v84 = (v83 >> 1) & 3)
               : (v84 = *(unsigned __int8 *)(v83 + 4)),
                 v84 != 2))
      {
LABEL_85:
        *(_DWORD *)(v43 + 32 * v40 + 16) = -21020677;
LABEL_86:
        if ((v45 & 1) != 0)
          *(_QWORD *)v44 &= ~2uLL;
LABEL_88:
        *(_DWORD *)(v44 + 20) = v45;
LABEL_32:
        v47 = *(_QWORD *)(v44 + 8);
        v48 = 0xFFFFD7FF00000008;
        goto LABEL_42;
      }
      *(_QWORD *)v44 = 4;
      goto LABEL_85;
    case 0x17uLL:
      v49 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      v50 = *(unsigned int *)(v11 + 20);
      v51 = (uint64_t *)(v49 + 24);
      v52 = (uint64_t *)(v49 + 8);
      if ((a2 & 1) != 0)
        v52 = v51;
      v53 = *v52;
      v54 = *v52 + 32 * v50;
      v55 = *(_DWORD *)(*(_QWORD *)a1 + 88);
      v56 = *(_DWORD *)(v54 + 20);
      if (v55 == v56)
        goto LABEL_36;
      if ((*(_QWORD *)(v54 + 8) & 0x2800FFFFFFF7) == 0)
        goto LABEL_101;
      if ((v56 ^ v55) < 2)
        goto LABEL_99;
      v85 = *(_QWORD *)v54;
      if (*(_QWORD *)v54 == 4)
        goto LABEL_98;
      *(_QWORD *)v54 = v85 | 2;
      v86 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v85 & 1) != 0)
      {
        v113 = 2 * *v86;
        do
        {
          if (!(v113 * 4))
            goto LABEL_98;
          v114 = *(_QWORD *)&v86[v113];
          if ((*(_BYTE *)(v114 + 19) & 0xC) != 0)
            break;
          v115 = *(_QWORD *)(v114 + 96);
          v116 = (v115 & 1) != 0 ? (v115 >> 1) & 3 : *(unsigned __int8 *)(v115 + 4);
          v113 -= 2;
        }
        while (v116 != 2);
        WTF::fastFree((unint64_t)v86, (void *)a2, a3, a4, a5, a6, a7, a8);
      }
      else if (!v86
             || (*((_BYTE *)v86 + 19) & 0xC) == 0
             && ((v87 = *((_QWORD *)v86 + 12), (v87 & 1) != 0)
               ? (v88 = (v87 >> 1) & 3)
               : (v88 = *(unsigned __int8 *)(v87 + 4)),
                 v88 != 2))
      {
LABEL_98:
        *(_DWORD *)(v53 + 32 * v50 + 16) = -21020677;
LABEL_99:
        if ((v55 & 1) != 0)
          *(_QWORD *)v54 &= ~2uLL;
LABEL_101:
        *(_DWORD *)(v54 + 20) = v55;
LABEL_36:
        if ((*(_QWORD *)(v54 + 8) & 0xFFFFFFFFCFFFFFFFLL) != 0)
          goto LABEL_48;
        return;
      }
      *(_QWORD *)v54 = 4;
      goto LABEL_98;
    case 0x18uLL:
      v57 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      v58 = *(unsigned int *)(v11 + 20);
      v59 = (uint64_t *)(v57 + 24);
      v60 = (uint64_t *)(v57 + 8);
      if ((a2 & 1) != 0)
        v60 = v59;
      v61 = *v60;
      v62 = *v60 + 32 * v58;
      v63 = *(_DWORD *)(*(_QWORD *)a1 + 88);
      v64 = *(_DWORD *)(v62 + 20);
      if (v63 == v64)
        goto LABEL_41;
      if ((*(_QWORD *)(v62 + 8) & 0x2800FFFFFFF7) == 0)
        goto LABEL_114;
      if ((v64 ^ v63) < 2)
        goto LABEL_112;
      v89 = *(_QWORD *)v62;
      if (*(_QWORD *)v62 == 4)
        goto LABEL_111;
      *(_QWORD *)v62 = v89 | 2;
      v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v89 & 1) != 0)
      {
        v117 = 2 * *v90;
        do
        {
          if (!(v117 * 4))
            goto LABEL_111;
          v118 = *(_QWORD *)&v90[v117];
          if ((*(_BYTE *)(v118 + 19) & 0xC) != 0)
            break;
          v119 = *(_QWORD *)(v118 + 96);
          v120 = (v119 & 1) != 0 ? (v119 >> 1) & 3 : *(unsigned __int8 *)(v119 + 4);
          v117 -= 2;
        }
        while (v120 != 2);
        WTF::fastFree((unint64_t)v90, (void *)a2, a3, a4, a5, a6, a7, a8);
      }
      else if (!v90
             || (*((_BYTE *)v90 + 19) & 0xC) == 0
             && ((v91 = *((_QWORD *)v90 + 12), (v91 & 1) != 0)
               ? (v92 = (v91 >> 1) & 3)
               : (v92 = *(unsigned __int8 *)(v91 + 4)),
                 v92 != 2))
      {
LABEL_111:
        *(_DWORD *)(v61 + 32 * v58 + 16) = -21020677;
LABEL_112:
        if ((v63 & 1) != 0)
          *(_QWORD *)v62 &= ~2uLL;
LABEL_114:
        *(_DWORD *)(v62 + 20) = v63;
LABEL_41:
        v47 = *(_QWORD *)(v62 + 8);
        v48 = 0xFFFFE48C0FFFFFFFLL;
LABEL_42:
        if ((v47 & v48) == 0)
          return;
        goto LABEL_48;
      }
      *(_QWORD *)v62 = 4;
      goto LABEL_111;
    case 0x2EuLL:
      v65 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      v66 = *(unsigned int *)(v11 + 20);
      v67 = (uint64_t *)(v65 + 24);
      v68 = (uint64_t *)(v65 + 8);
      if ((a2 & 1) != 0)
        v68 = v67;
      v69 = *v68;
      v70 = *v68 + 32 * v66;
      v71 = *(_DWORD *)(*(_QWORD *)a1 + 88);
      v72 = *(_DWORD *)(v70 + 20);
      if (v71 == v72)
        goto LABEL_47;
      if ((*(_QWORD *)(v70 + 8) & 0x2800FFFFFFF7) == 0)
        goto LABEL_127;
      if ((v72 ^ v71) < 2)
        goto LABEL_125;
      v93 = *(_QWORD *)v70;
      if (*(_QWORD *)v70 == 4)
        goto LABEL_124;
      *(_QWORD *)v70 = v93 | 2;
      v94 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v93 & 1) != 0)
      {
        v121 = 2 * *v94;
        do
        {
          if (!(v121 * 4))
            goto LABEL_124;
          v122 = *(_QWORD *)&v94[v121];
          if ((*(_BYTE *)(v122 + 19) & 0xC) != 0)
            break;
          v123 = *(_QWORD *)(v122 + 96);
          v124 = (v123 & 1) != 0 ? (v123 >> 1) & 3 : *(unsigned __int8 *)(v123 + 4);
          v121 -= 2;
        }
        while (v124 != 2);
        WTF::fastFree((unint64_t)v94, (void *)a2, a3, a4, a5, a6, a7, a8);
      }
      else if (!v94
             || (*((_BYTE *)v94 + 19) & 0xC) == 0
             && ((v95 = *((_QWORD *)v94 + 12), (v95 & 1) != 0)
               ? (v96 = (v95 >> 1) & 3)
               : (v96 = *(unsigned __int8 *)(v95 + 4)),
                 v96 != 2))
      {
LABEL_124:
        *(_DWORD *)(v69 + 32 * v66 + 16) = -21020677;
LABEL_125:
        if ((v71 & 1) != 0)
          *(_QWORD *)v70 &= ~2uLL;
LABEL_127:
        *(_DWORD *)(v70 + 20) = v71;
LABEL_47:
        if ((*(_QWORD *)(v70 + 8) & 0xFFFFFDFFFFFFFFFFLL) != 0)
          goto LABEL_48;
        return;
      }
      *(_QWORD *)v70 = 4;
      goto LABEL_124;
    case 0x35uLL:
      __break(0xC471u);
      JUMPOUT(0x19834E9F8);
    default:
      __break(0xC471u);
      JUMPOUT(0x19834E9D8);
  }
}

_QWORD *WTF::HashTable<JSC::DFG::NodeFlowProjection,JSC::DFG::NodeFlowProjection,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>>::add(_QWORD *result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;

  v10 = result;
  v11 = *a2;
  if (*a2
    || (result = WTF::HashTable<JSC::DFG::NodeFlowProjection,JSC::DFG::NodeFlowProjection,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>>::expand(a2, 0, (uint64_t)a3, a4, a5, a6, a7, a8), (v11 = *a2) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = *a3;
  v15 = v13 & *a3;
  v16 = (_QWORD *)(v11 + 8 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v14)
      {
        if ((v12 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v11 - 4);
        v27 = 0;
        v28 = v11 + 8 * v22;
        goto LABEL_29;
      }
      if (v17 == 1)
        v18 = v16;
      v15 = (v15 + v19) & v13;
      v16 = (_QWORD *)(v11 + 8 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = *a3;
      v16 = v18;
    }
  }
  *v16 = v14;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_22:
      result = WTF::HashTable<JSC::DFG::NodeFlowProjection,JSC::DFG::NodeFlowProjection,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>>::expand(a2, (unint64_t)v16, (uint64_t)a3, a4, a5, a6, a7, a8);
      v16 = result;
      v23 = *a2;
      if (*a2)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_22;
  }
  v28 = v23 + 8 * v26;
  v27 = 1;
LABEL_29:
  *v10 = v16;
  v10[1] = v28;
  *((_BYTE *)v10 + 16) = v27;
  return result;
}

_QWORD *WTF::HashTable<JSC::DFG::NodeFlowProjection,JSC::DFG::NodeFlowProjection,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>>::expand(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;

  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
    if (v11)
    {
      v13 = v11 << (6 * v12 >= (2 * v11));
      goto LABEL_6;
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = 8;
LABEL_6:
  v14 = WTF::fastZeroedMalloc(8 * v13 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v13;
  *(_DWORD *)(*a1 - 8) = v13 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (!v11)
  {
    v23 = 0;
    if (!v10)
      return v23;
    goto LABEL_18;
  }
  v22 = 0;
  v23 = 0;
  do
  {
    v24 = (uint64_t *)(v10 + 8 * v22);
    v25 = *v24;
    if ((unint64_t)*v24 >= 2)
    {
      v26 = *a1;
      if (*a1)
        v27 = *(_DWORD *)(v26 - 8);
      else
        v27 = 0;
      v28 = v27 & v25;
      v29 = 1;
      do
      {
        v30 = v28;
        v31 = *(_QWORD *)(v26 + 8 * v28);
        v28 = (v28 + v29++) & v27;
      }
      while (v31);
      v32 = (_QWORD *)(v26 + 8 * v30);
      *v32 = v25;
      if (v24 == (uint64_t *)a2)
        v23 = v32;
    }
    ++v22;
  }
  while (v22 != v11);
  if (v10)
LABEL_18:
    WTF::fastFree(v10 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

uint64_t WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,JSC::DFG::NodeFlowProjection,WTF::ASCIILiteral,JSC::DFG::AbstractValue>(WTF::CommaPrinter,JSC::DFG::NodeFlowProjection,WTF::ASCIILiteral,JSC::DFG::AbstractValue const&)::{lambda(WTF::PrintStream&)#1}>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::PrintStream *v5;
  JSC::DFG::NodeFlowProjection *v6;
  uint64_t v7;
  JSC::DFG::AbstractValue *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  WTF::PrintStream *v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  WTF::PrintStream *v19;
  float v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  WTF::PrintStream *v26;
  float v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v31;
  int v32;
  char v33;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = (WTF::PrintStream *)v4;
  v7 = *a2;
  v6 = (JSC::DFG::NodeFlowProjection *)a2[1];
  v9 = a2[2];
  v8 = (JSC::DFG::AbstractValue *)a2[3];
  if (*(_BYTE *)(v7 + 32))
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v11 = *(char **)v7;
    v12 = *(_QWORD *)(v7 + 8);
    v13 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    if (v11)
    {
      v15 = v12 - 1;
      if (!v12)
        v15 = 0;
      WTF::StringImpl::utf8ForCharacters(v11, v15, (uint64_t)&v31, v14);
    }
    else
    {
      v22 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = 0;
      *(_BYTE *)(v22 + 16) = 0;
      v31 = v22;
      v32 = 0;
    }
    WTF::printExpectedCStringHelper(v13, "StringView", &v31);
    if (v32 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  }
  else
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v17 = *(char **)(v7 + 16);
    v18 = *(_QWORD *)(v7 + 24);
    v19 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
    if (v17)
    {
      v21 = v18 - 1;
      if (!v18)
        v21 = 0;
      WTF::StringImpl::utf8ForCharacters(v17, v21, (uint64_t)&v31, v20);
    }
    else
    {
      v23 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = 0;
      *(_BYTE *)(v23 + 16) = 0;
      v31 = v23;
      v32 = 0;
    }
    WTF::printExpectedCStringHelper(v19, "StringView", &v31);
    if (v32 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
    *(_BYTE *)(v7 + 32) = 1;
  }
  JSC::DFG::NodeFlowProjection::dump(v6, v5);
  v24 = *(char **)v9;
  v25 = *(_QWORD *)(v9 + 8);
  v26 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 32))(v5);
  if (v24)
  {
    v28 = v25 - 1;
    if (!v25)
      v28 = 0;
    WTF::StringImpl::utf8ForCharacters(v24, v28, (uint64_t)&v31, v27);
  }
  else
  {
    v29 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v29 = 1;
    *(_QWORD *)(v29 + 8) = 0;
    *(_BYTE *)(v29 + 16) = 0;
    v31 = v29;
    v32 = 0;
  }
  WTF::printExpectedCStringHelper(v26, "StringView", &v31);
  if (v32 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  JSC::DFG::AbstractValue::dumpInContext(v8, v5, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::dataLog<char [29],JSC::DFG::BasicBlock,char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  char v7;
  char **v8;
  char *v9;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "   Found must-handle block: ");
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v5, "%s", "#");
  WTF::PrintStream::printf(v5, "%u", *(_DWORD *)(a1 + 8));
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [26],JSC::Operand,char [2]>(int *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  int v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  char v9;
  char **v10;
  char *v11;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "   Not live in bytecode: ");
  if (a1[1] == 2)
  {
    v5 = *a1;
    v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printf(v6, "%s", "tmp");
    WTF::PrintStream::printf(v6, "%d", v5);
  }
  else
  {
    LODWORD(v11) = *a1;
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    JSC::VirtualRegister::dump((unsigned int *)&v11, v7);
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [14],JSC::Operand,char [2]>(int *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  int v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  char v9;
  char **v10;
  char *v11;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "   Not live: ");
  if (a1[1] == 2)
  {
    v5 = *a1;
    v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printf(v6, "%s", "tmp");
    WTF::PrintStream::printf(v6, "%d", v5);
  }
  else
  {
    LODWORD(v11) = *a1;
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    JSC::VirtualRegister::dump((unsigned int *)&v11, v7);
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [13],JSC::Operand,char [7],JSC::JSValue,char [2]>(int *a1, JSC::JSValue *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  int v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  JSC::Structure *v10;
  unint64_t v11;
  char v13;
  char **v14;
  char *v15;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "   Widening ");
  v7 = *a1;
  if (a1[1] == 2)
  {
    v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    WTF::PrintStream::printf(v8, "%s", "tmp");
    WTF::PrintStream::printf(v8, "%d", v7);
  }
  else
  {
    LODWORD(v15) = *a1;
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    JSC::VirtualRegister::dump((unsigned int *)&v15, v9);
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", " with ");
  v10 = 0;
  v11 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 && (v11 & 0xFFFE000000000002) == 0)
    v10 = (JSC::Structure *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE));
  JSC::JSValue::dumpInContextAssumingStructure(a2, v6, 0, v10);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t *JSC::DFG::BasicBlock::successor(JSC::DFG::BasicBlock *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t *result;
  uint64_t *v6;
  _DWORD *v7;

  v1 = *((unsigned int *)this + 55);
  v2 = v1 - 1;
  do
  {
    if (v2 >= v1)
      goto LABEL_14;
    v3 = *(_QWORD *)(*((_QWORD *)this + 26) + 8 * v2);
    v4 = *(unsigned __int16 *)(v3 + 18);
    --v2;
  }
  while ((v4 - 364) > 0xB);
  if (v4 == 366)
  {
    v6 = *(uint64_t **)(v3 + 72);
    if (*((_DWORD *)v6 + 3))
      v6 = (uint64_t *)*v6;
    return v6 + 2;
  }
  else if (v4 == 367)
  {
    v7 = *(_DWORD **)(v3 + 72);
    if (!v7[3])
    {
LABEL_14:
      __break(0xC471u);
      JUMPOUT(0x19834F5F4);
    }
    return *(uint64_t **)v7;
  }
  else
  {
    result = (uint64_t *)(v3 + 72);
    if (v4 != 364)
      return (uint64_t *)*result;
  }
  return result;
}

void JSC::DFG::CFGSimplificationPhase::mergeBlocks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  unsigned int i;
  void *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  JSC::DFG::BasicBlock *v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  JSC::DFG::AbstractValue *v120;
  const JSC::DFG::AbstractValue *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int16 v141;
  uint64_t v142;
  uint64_t v144;
  uint64_t v145;
  __int16 v146;

  if (a3 == a2 || *(_DWORD *)(a3 + 52) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19834FD0CLL);
  }
  v9 = a4;
  v11 = *(unsigned int *)(a2 + 220);
  if ((_DWORD)v11)
  {
    v12 = 8 * v11;
    while (1)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a2 + 208) - 8 + v12);
      v14 = *(unsigned __int16 *)(v13 + 18);
      if ((v14 - 364) < 0xC)
        break;
      if ((v14 - 28) < 2 || (v14 - 23) <= 2)
      {
        v12 -= 8;
        if (v12)
          continue;
      }
      goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    v13 = 0;
  }
  v15 = *(_QWORD *)v13;
  if ((*(_QWORD *)v13 & 1) != 0)
  {
    v105 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((v106 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v106 != 0x3FFFFFFF)
        ? (v107 = (_DWORD)v106 == -1)
        : (v107 = 1),
          v107))
    {
      v108 = 2;
    }
    else if (v106 >> 28)
    {
      v127 = v13;
      v128 = WTF::fastMalloc((WTF *)0x10);
      v13 = v127;
      *(_QWORD *)v128 = v105;
      *(_DWORD *)(v128 + 8) = v106;
      v108 = 1;
      v105 = v128;
    }
    else
    {
      v108 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      v105 = v106 << 36;
    }
    v15 = v105 | v108;
  }
  v16 = *(_QWORD *)(v13 + 8);
  v142 = v15;
  if ((v16 & 1) != 0)
  {
    v109 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || ((v110 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v110 != 0x3FFFFFFF)
        ? (v111 = (_DWORD)v110 == -1)
        : (v111 = 1),
          v111))
    {
      v112 = 2;
    }
    else if (v110 >> 28)
    {
      v129 = v13;
      v130 = WTF::fastMalloc((WTF *)0x10);
      v13 = v129;
      v15 = v142;
      *(_QWORD *)v130 = v109;
      *(_DWORD *)(v130 + 8) = v110;
      v112 = 1;
      v109 = v130;
    }
    else
    {
      v112 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
      v109 = v110 << 36;
    }
    v16 = v109 | v112;
  }
  v141 = *(_WORD *)(v13 + 16);
  JSC::DFG::Node::remove((JSC::DFG::Node *)v13, *(JSC::DFG::Graph **)(a1 + 32), (unint64_t *)a3, a4, a5, a6, a7, a8);
  v24 = *(unsigned int *)(v9 + 12);
  if ((_DWORD)v24)
  {
    v139 = v9;
    while (1)
    {
      v48 = v24 - 1;
      if (*(_DWORD *)(v9 + 12) <= v48)
      {
        __break(0xC471u);
        JUMPOUT(0x19834FF70);
      }
      v140 = v48;
      v49 = *(_QWORD *)(*(_QWORD *)v9 + 8 * v48);
      if (*(_DWORD *)(v49 + 84))
        break;
LABEL_82:
      v9 = v139;
      v24 = v140;
      if (!(_DWORD)v140)
        goto LABEL_12;
    }
    v50 = 0;
    while (1)
    {
      v51 = v15;
      if ((v15 & 1) != 0)
      {
        v91 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
        if ((v15 & 2) != 0
          || ((v92 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v92 != 0x3FFFFFFF)
            ? (v93 = (_DWORD)v92 == -1)
            : (v93 = 1),
              v93))
        {
          v94 = 2;
        }
        else if (v92 >> 28)
        {
          v123 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v123 = v91;
          *(_DWORD *)(v123 + 8) = v92;
          v94 = 1;
          v91 = v123;
        }
        else
        {
          v94 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
          v91 = v92 << 36;
        }
        v51 = v91 | v94;
      }
      v52 = v16;
      if ((v16 & 1) != 0)
      {
        v95 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
        if ((v16 & 2) != 0
          || ((v96 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v96 != 0x3FFFFFFF)
            ? (v97 = (_DWORD)v96 == -1)
            : (v97 = 1),
              v97))
        {
          v98 = 2;
        }
        else if (v96 >> 28)
        {
          v124 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v124 = v95;
          *(_DWORD *)(v124 + 8) = v96;
          v98 = 1;
          v95 = v124;
        }
        else
        {
          v98 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
          v95 = v96 << 36;
        }
        v52 = v95 | v98;
      }
      v53 = *(unsigned int *)(v49 + 88);
      if (v50 < v53)
        break;
      v54 = *(unsigned int *)(v49 + 92) + v53;
      if (v50 < v54)
      {
        v55 = v53 + ~(_DWORD)v50;
        goto LABEL_60;
      }
      v56 = v54 + (int)v50 - (int)v54;
LABEL_62:
      v57 = *(_QWORD *)(*(_QWORD *)(v49 + 72) + 8 * v56);
      if (v57)
      {
        if ((*(_BYTE *)(v57 + 58) & 0x10) != 0)
          v59 = 28;
        else
          v59 = 29;
        v60 = *(_QWORD *)(a1 + 32);
        v61 = v51;
        if ((v51 & 1) != 0)
        {
          v99 = *(_QWORD *)(v51 & 0xFFFFFFFF8);
          if ((v51 & 2) != 0
            || (v100 = *(unsigned int *)((v51 & 0xFFFFFFFF8) + 8), (_DWORD)v100 == 0x3FFFFFFF)
            || (_DWORD)v100 == -1)
          {
            v101 = 2;
          }
          else if (v100 >> 28)
          {
            v135 = *(_QWORD *)(v51 & 0xFFFFFFFF8);
            v137 = *(_QWORD *)(a1 + 32);
            v125 = WTF::fastMalloc((WTF *)0x10);
            v60 = v137;
            *(_QWORD *)v125 = v135;
            *(_DWORD *)(v125 + 8) = v100;
            v101 = 1;
            v99 = v125;
          }
          else
          {
            v101 = *(_QWORD *)(v51 & 0xFFFFFFFF8);
            v99 = v100 << 36;
          }
          v61 = v99 | v101;
        }
        v144 = v61;
        v62 = v52;
        if ((v52 & 1) != 0)
        {
          v102 = *(_QWORD *)(v52 & 0xFFFFFFFF8);
          if ((v52 & 2) != 0
            || (v103 = *(unsigned int *)((v52 & 0xFFFFFFFF8) + 8), (_DWORD)v103 == 0x3FFFFFFF)
            || (_DWORD)v103 == -1)
          {
            v104 = 2;
          }
          else if (v103 >> 28)
          {
            v136 = *(_QWORD *)(v52 & 0xFFFFFFFF8);
            v138 = v60;
            v126 = WTF::fastMalloc((WTF *)0x10);
            v60 = v138;
            *(_QWORD *)v126 = v136;
            *(_DWORD *)(v126 + 8) = v103;
            v104 = 1;
            v102 = v126;
          }
          else
          {
            v104 = *(_QWORD *)(v52 & 0xFFFFFFFF8);
            v102 = v103 << 36;
          }
          v62 = v102 | v104;
        }
        v58 = v52 & 1;
        v145 = v62;
        v146 = v141;
        v63 = *(uint64_t **)(v57 + 72);
        v64 = v63;
        do
        {
          v65 = (uint64_t)v64;
          v64 = (uint64_t *)*v64;
        }
        while (v64);
        if ((uint64_t *)v65 != v63)
          *v63 = v65;
        JSC::DFG::BasicBlock::appendNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(a2, v60, 0, v59, (uint64_t)&v144, v65, v22, v23);
        if ((v145 & 1) != 0 && (v145 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v145 & 0xFFFFFFFF8, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
        v15 = v142;
        if ((v144 & 1) != 0 && (v144 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v144 & 0xFFFFFFFF8, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
      }
      else
      {
        v58 = v52 & 1;
      }
      if (v58 && (v52 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v52 & 0xFFFFFFFF8, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
      if ((v51 & 1) != 0 && (v51 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v51 & 0xFFFFFFFF8, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
      if (++v50 >= *(unsigned int *)(v49 + 84))
        goto LABEL_82;
    }
    v55 = v50 + 5;
LABEL_60:
    v56 = (v55 ^ 0xFFFFFFFFLL) + v53;
    if (v55 >= 0)
      v56 = v55 - 5;
    goto LABEL_62;
  }
LABEL_12:
  if (*(_DWORD *)(a3 + 36))
  {
    v25 = 0;
    v26 = 0;
    LODWORD(v27) = *(_DWORD *)(a2 + 36);
    do
    {
      v18 = (_QWORD *)(*(_QWORD *)(a3 + 24) + v25);
      if ((_DWORD)v27 == *(_DWORD *)(a2 + 32))
      {
        v18 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 24, v27 + 1, (unint64_t)v18);
        v27 = *(unsigned int *)(a2 + 36);
        v28 = (_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v27);
      }
      else
      {
        v28 = (_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v27);
      }
      *v28 = *v18;
      LODWORD(v27) = v27 + 1;
      *(_DWORD *)(a2 + 36) = v27;
      ++v26;
      v25 += 8;
    }
    while (v26 < *(unsigned int *)(a3 + 36));
  }
  LODWORD(v29) = *(_DWORD *)(a2 + 220);
  if (*(_DWORD *)(a3 + 220))
  {
    v30 = 0;
    do
    {
      v31 = *(_QWORD *)(*(_QWORD *)(a3 + 208) + 8 * v30);
      v144 = v31;
      if ((_DWORD)v29 == *(_DWORD *)(a2 + 216))
      {
        v32 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 208, v29 + 1, (unint64_t)&v144);
        v29 = *(unsigned int *)(a2 + 220);
        *(_QWORD *)(*(_QWORD *)(a2 + 208) + 8 * v29) = *v32;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(a2 + 208) + 8 * v29) = v31;
      }
      LODWORD(v29) = v29 + 1;
      *(_DWORD *)(a2 + 220) = v29;
      ++v30;
    }
    while (v30 < *(unsigned int *)(a3 + 220));
  }
  v33 = v29 - 1;
  do
  {
    if (v33 >= v29)
    {
      __break(0xC471u);
      JUMPOUT(0x19834FF58);
    }
    v34 = *(_QWORD *)(*(_QWORD *)(a2 + 208) + 8 * v33--);
  }
  while (*(unsigned __int16 *)(v34 + 18) - 364 > 0xB);
  v35 = 1;
  switch(*(_WORD *)(v34 + 18))
  {
    case 0x16C:
      goto LABEL_31;
    case 0x16D:
      v35 = 2;
      goto LABEL_31;
    case 0x16E:
      v35 = *(_DWORD *)(*(_QWORD *)(v34 + 72) + 12) + 1;
      goto LABEL_89;
    case 0x16F:
      v35 = *(_DWORD *)(*(_QWORD *)(v34 + 72) + 12);
LABEL_89:
      if (!v35)
        goto LABEL_90;
      break;
    default:
      goto LABEL_90;
  }
  do
  {
LABEL_31:
    v36 = v35--;
    v37 = v29 - 1;
    do
    {
      if (v37 >= v29)
      {
        __break(0xC471u);
        JUMPOUT(0x19834FF50);
      }
      v38 = *(_QWORD *)(*(_QWORD *)(a2 + 208) + 8 * v37);
      v39 = *(unsigned __int16 *)(v38 + 18);
      --v37;
    }
    while ((v39 - 364) > 0xB);
    if (v39 == 366)
    {
      v41 = *(_QWORD *)(v38 + 72);
      v47 = *(_DWORD *)(v41 + 12);
      if (v47 <= v35)
      {
        if (v47 != v35)
        {
          __break(0xC471u);
          JUMPOUT(0x19834FA54);
        }
      }
      else
      {
        v41 = *(_QWORD *)v41 + 32 * v35;
      }
      goto LABEL_41;
    }
    if (v39 != 367)
    {
      if (v36 == 1)
      {
        v40 = (_QWORD *)(v38 + 72);
        if (v39 != 364)
          v40 = (_QWORD *)*v40;
        goto LABEL_42;
      }
      if (v36 != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x19834FF48);
      }
      v41 = *(_QWORD *)(v38 + 72);
LABEL_41:
      v40 = (_QWORD *)(v41 + 16);
      goto LABEL_42;
    }
    v113 = *(_QWORD *)(v38 + 72);
    if (*(_DWORD *)(v113 + 12) <= v35)
    {
      __break(0xC471u);
      JUMPOUT(0x19834FF68);
    }
    v40 = (_QWORD *)(*(_QWORD *)v113 + 8 * v35);
LABEL_42:
    v42 = (_QWORD *)*v40;
    v43 = *((unsigned int *)v42 + 13);
    if ((_DWORD)v43)
    {
      v44 = 0;
      v45 = 8 * v43;
      do
      {
        v46 = v42[5];
        if (*(_QWORD *)(v46 + v44) == a3)
          *(_QWORD *)(v46 + v44) = a2;
        v44 += 8;
      }
      while (v45 != v44);
    }
  }
  while (v35);
LABEL_90:
  for (i = *(_DWORD *)(v9 + 12); i; *(_DWORD *)(v131 + 52) = v132 - 1)
  {
    if (*(_DWORD *)(v9 + 12) <= --i)
    {
      __break(0xC471u);
      JUMPOUT(0x19834FFF8);
    }
    v131 = *(_QWORD *)(*(_QWORD *)v9 + 8 * i);
    v132 = *(unsigned int *)(v131 + 52);
    if (!(_DWORD)v132)
    {
LABEL_211:
      __break(0xC471u);
      JUMPOUT(0x19834FFF0);
    }
    v133 = *(unsigned int *)(v131 + 52);
    v134 = *(_QWORD **)(v131 + 40);
    while (*v134 != a2)
    {
      ++v134;
      if (!--v133)
        goto LABEL_211;
    }
    *v134 = *(_QWORD *)(*(_QWORD *)(v131 + 40) + 8 * v132 - 8);
  }
  v67 = (void *)*(unsigned int *)(a3 + 156);
  if (*(_DWORD *)(a2 + 156) > v67)
  {
    WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::shrink(a2 + 144, v67, (uint64_t)v18, v19, v20, v21, v22, v23);
  }
  else if (v67 > *(_DWORD *)(a2 + 152))
  {
    WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::clear(a2 + 144, v67, (uint64_t)v18, v19, v20, v21, v22, v23);
    WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a2 + 144, *(unsigned int *)(a3 + 156), v114, v115, v116, v117, v118, v119);
  }
  v68 = *(uint64_t **)(a3 + 144);
  v69 = *(unsigned int *)(a2 + 156);
  v70 = *(_QWORD *)(a2 + 144);
  if ((_DWORD)v69)
  {
    v71 = 32 * v69;
    do
    {
      v72 = *(_QWORD *)v70;
      if (v68 != (uint64_t *)v70)
      {
        if ((v72 & 1) != 0)
          WTF::fastFree(v72 & 0xFFFFFFFFFFFFFFFCLL, v67, (uint64_t)v18, v19, v20, v21, v22, v23);
        v73 = *v68;
        if ((*v68 & 1) == 0 || v73 == 4)
        {
          v74 = v73 & 0xFFFFFFFFFFFFFFFDLL;
          v72 = v73 | 2;
          if ((*(_BYTE *)v70 & 2) == 0)
            v72 = v74;
          *(_QWORD *)v70 = v72;
        }
        else
        {
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v70, v68);
          v72 = *(_QWORD *)v70;
        }
      }
      v75 = v72 & 0xFFFFFFFFFFFFFFFDLL;
      v76 = v72 | 2;
      if ((*(_BYTE *)v68 & 2) == 0)
        v76 = v75;
      *(_QWORD *)v70 = v76;
      v77 = *(_OWORD *)(v68 + 1);
      *(_QWORD *)(v70 + 24) = v68[3];
      *(_OWORD *)(v70 + 8) = v77;
      v68 += 4;
      v70 += 32;
      v71 -= 32;
    }
    while (v71);
    v68 = *(uint64_t **)(a3 + 144);
    LODWORD(v69) = *(_DWORD *)(a2 + 156);
    v70 = *(_QWORD *)(a2 + 144);
  }
  v78 = *(unsigned int *)(a3 + 156);
  if ((_DWORD)v69 != (_DWORD)v78)
  {
    v120 = (JSC::DFG::AbstractValue *)(v70 + 32 * v69);
    v121 = (const JSC::DFG::AbstractValue *)&v68[4 * v69];
    v122 = 32 * v78 - 32 * v69;
    do
    {
      v120 = (JSC::DFG::AbstractValue *)((char *)JSC::DFG::AbstractValue::AbstractValue(v120, v121) + 32);
      v121 = (const JSC::DFG::AbstractValue *)((char *)v121 + 32);
      v122 -= 32;
    }
    while (v122);
    LODWORD(v69) = *(_DWORD *)(a3 + 156);
  }
  *(_DWORD *)(a2 + 156) = v69;
  *(_QWORD *)(a2 + 160) = *(_QWORD *)(a3 + 160);
  *(_BYTE *)(a2 + 14) = *(_BYTE *)(a3 + 14);
  v79 = *(_QWORD *)(a1 + 32);
  v80 = *(unsigned int *)(a3 + 8);
  if (*(_DWORD *)(v79 + 60) <= v80)
  {
    __break(0xC471u);
    JUMPOUT(0x19834FF60);
  }
  v81 = *(_QWORD *)(v79 + 48);
  v82 = *(JSC::DFG::BasicBlock **)(v81 + 8 * v80);
  *(_QWORD *)(v81 + 8 * v80) = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 1)
    {
      JSC::DFG::BasicBlock::~BasicBlock(v82, v67, (uint64_t)v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      --*(_DWORD *)v82;
    }
  }
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, v67, (uint64_t)v18, v19, v20, v21, v22, v23);
  if ((v142 & 1) != 0 && (v142 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v142 & 0xFFFFFFFF8, v67, (uint64_t)v18, v19, v20, v21, v22, v23);
}

void JSC::DFG::CFGSimplificationPhase::jettisonBlock(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;

  if (*(_DWORD *)(a3 + 84))
  {
    v12 = 0;
    while (1)
    {
      v13 = *(_QWORD *)a4;
      if ((*(_QWORD *)a4 & 1) != 0)
      {
        v32 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
        if ((v13 & 2) != 0
          || ((v33 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v33 != 0x3FFFFFFF)
            ? (v34 = (_DWORD)v33 == -1)
            : (v34 = 1),
              v34))
        {
          v35 = 2;
        }
        else if (v33 >> 28)
        {
          v47 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v47 = v32;
          *(_DWORD *)(v47 + 8) = v33;
          v35 = 1;
          v32 = v47;
        }
        else
        {
          v35 = v32;
          v32 = v33 << 36;
        }
        v13 = v32 | v35;
      }
      v14 = *(_QWORD *)(a4 + 8);
      if ((v14 & 1) != 0)
      {
        v36 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
        if ((v14 & 2) != 0
          || ((v37 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v37 != 0x3FFFFFFF)
            ? (v38 = (_DWORD)v37 == -1)
            : (v38 = 1),
              v38))
        {
          v39 = 2;
        }
        else if (v37 >> 28)
        {
          v48 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v48 = v36;
          *(_DWORD *)(v48 + 8) = v37;
          v39 = 1;
          v36 = v48;
        }
        else
        {
          v39 = v36;
          v36 = v37 << 36;
        }
        v14 = v36 | v39;
      }
      v15 = *(_WORD *)(a4 + 16);
      v16 = *(unsigned int *)(a3 + 88);
      if (v12 < v16)
        break;
      v17 = *(unsigned int *)(a3 + 92);
      if (v12 < v17 + v16)
      {
        v18 = v16 + ~(_DWORD)v12;
        goto LABEL_8;
      }
      v19 = v16 + (int)v12 - ((int)v17 + (int)v16) + v17;
LABEL_10:
      v20 = *(_QWORD *)(*(_QWORD *)(a3 + 72) + 8 * v19);
      if (v20)
      {
        if ((*(_BYTE *)(v20 + 58) & 0x10) != 0)
          v22 = 28;
        else
          v22 = 29;
        v23 = *(_QWORD *)(a1 + 32);
        v24 = v13;
        if ((v13 & 1) != 0)
        {
          v40 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
          if ((v13 & 2) != 0
            || ((v41 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v41 != 0x3FFFFFFF)
              ? (v42 = (_DWORD)v41 == -1)
              : (v42 = 1),
                v42))
          {
            v43 = 2;
          }
          else if (v41 >> 28)
          {
            v59 = *(_QWORD *)(a1 + 32);
            v55 = *(_WORD *)(a4 + 16);
            v57 = v22;
            v51 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
            v53 = v20;
            v49 = WTF::fastMalloc((WTF *)0x10);
            v20 = v53;
            v15 = v55;
            v22 = v57;
            v23 = v59;
            *(_QWORD *)v49 = v51;
            *(_DWORD *)(v49 + 8) = v41;
            v43 = 1;
            v40 = v49;
          }
          else
          {
            v43 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
            v40 = v41 << 36;
          }
          v24 = v40 | v43;
        }
        v61 = v24;
        v25 = v14;
        if ((v14 & 1) != 0)
        {
          v44 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
          if ((v14 & 2) != 0
            || (v45 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v45 == 0x3FFFFFFF)
            || (_DWORD)v45 == -1)
          {
            v46 = 2;
          }
          else if (v45 >> 28)
          {
            v60 = v23;
            v56 = v15;
            v58 = v22;
            v52 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
            v54 = v20;
            v50 = WTF::fastMalloc((WTF *)0x10);
            v20 = v54;
            v15 = v56;
            v22 = v58;
            v23 = v60;
            *(_QWORD *)v50 = v52;
            *(_DWORD *)(v50 + 8) = v45;
            v46 = 1;
            v44 = v50;
          }
          else
          {
            v46 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
            v44 = v45 << 36;
          }
          v25 = v44 | v46;
        }
        v21 = v14 & 1;
        v62 = v25;
        v63 = v15;
        v26 = *(uint64_t **)(v20 + 72);
        v27 = v26;
        do
        {
          v28 = (uint64_t)v27;
          v27 = (uint64_t *)*v27;
        }
        while (v27);
        if ((uint64_t *)v28 != v26)
          *v26 = v28;
        JSC::DFG::BasicBlock::appendNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>((uint64_t)a2, v23, 0, v22, (uint64_t)&v61, v28, a7, a8);
        if ((v62 & 1) != 0 && (v62 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v62 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        if ((v61 & 1) != 0 && (v61 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v61 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        v21 = v14 & 1;
      }
      if (v21 && (v14 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      if (++v12 >= *(unsigned int *)(a3 + 84))
        goto LABEL_30;
    }
    v18 = v12 + 5;
LABEL_8:
    v19 = (v18 ^ 0xFFFFFFFFLL) + v16;
    if (v18 >= 0)
      v19 = v18 - 5;
    goto LABEL_10;
  }
LABEL_30:
  v29 = *(unsigned int *)(a3 + 52);
  if (!(_DWORD)v29)
  {
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x1983501E0);
  }
  v30 = *(unsigned int *)(a3 + 52);
  v31 = *(void ***)(a3 + 40);
  while (*v31 != a2)
  {
    ++v31;
    if (!--v30)
      goto LABEL_35;
  }
  *v31 = *(void **)(*(_QWORD *)(a3 + 40) + 8 * v29 - 8);
  *(_DWORD *)(a3 + 52) = v29 - 1;
}

void JSC::DFG::BasicBlock::replaceTerminal<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(uint64_t a1, JSC::DFG::Graph *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::DFG::Node *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  JSC::DFG::Node *v52;

  v8 = a4;
  v11 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v35 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v36 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v36 != 0x3FFFFFFF)
        ? (v37 = (_DWORD)v36 == -1)
        : (v37 = 1),
          v37))
    {
      v38 = 2;
    }
    else if (v36 >> 28)
    {
      v43 = a3;
      v44 = WTF::fastMalloc((WTF *)0x10);
      a3 = v43;
      v8 = a4;
      *(_QWORD *)v44 = v35;
      *(_DWORD *)(v44 + 8) = v36;
      v38 = 1;
      v35 = v44;
    }
    else
    {
      v38 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v35 = v36 << 36;
    }
    v11 = v35 | v38;
  }
  v49 = v11;
  v12 = *(_QWORD *)(a3 + 8);
  if ((v12 & 1) != 0)
  {
    v39 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v40 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v40 != 0x3FFFFFFF)
        ? (v41 = (_DWORD)v40 == -1)
        : (v41 = 1),
          v41))
    {
      v42 = 2;
    }
    else if (v40 >> 28)
    {
      v48 = v8;
      v45 = a3;
      v46 = WTF::fastMalloc((WTF *)0x10);
      a3 = v45;
      v8 = v48;
      *(_QWORD *)v46 = v39;
      *(_DWORD *)(v46 + 8) = v40;
      v42 = 1;
      v39 = v46;
    }
    else
    {
      v42 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v39 = v40 << 36;
    }
    v12 = v39 | v42;
  }
  v50 = v12;
  v51 = *(_WORD *)(a3 + 16);
  v20 = (JSC::DFG::Node *)JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>((uint64_t)a2, 0, 364, (uint64_t)&v49, v8, a6, a7, a8);
  if ((v50 & 1) != 0 && (v50 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v50 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  if ((v49 & 1) != 0 && (v49 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v49 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  v52 = v20;
  v21 = *(unsigned int *)(a1 + 220);
  if ((_DWORD)v21)
  {
    v22 = *(_QWORD *)(a1 + 208);
    v23 = *(unsigned int *)(a1 + 220);
    while (1)
    {
      v24 = *(unsigned __int16 **)(v22 + 8 * v23 - 8);
      v25 = v24[9];
      if ((v25 - 364) < 0xC)
        break;
      if ((v25 - 28) < 2 || (v25 - 23) <= 2)
      {
        if (--v23)
          continue;
      }
      goto LABEL_10;
    }
    v26 = v23;
    if ((_DWORD)v21 == *(_DWORD *)(a1 + 216))
    {
      v27 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 208, v21 + 1, (unint64_t)&v52);
      v21 = *(unsigned int *)(a1 + 220);
      v22 = *(_QWORD *)(a1 + 208);
    }
    else
    {
      v27 = &v52;
    }
    v28 = (_QWORD *)(v22 + 8 * v26);
    memmove(v28 + 1, v28, v22 + 8 * v21 - (_QWORD)v28);
    *v28 = *v27;
    ++*(_DWORD *)(a1 + 220);
    JSC::DFG::Node::remove((JSC::DFG::Node *)v24, a2, v29, v30, v31, v32, v33, v34);
  }
  else
  {
LABEL_10:
    JSC::DFG::BasicBlock::append((JSC::DFG::BasicBlock *)a1, v20);
  }
}

void JSC::DFG::CFGSimplificationPhase::convertToJump(JSC::DFG::CFGSimplificationPhase *this, JSC::DFG::BasicBlock *a2, JSC::DFG::BasicBlock *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  BOOL v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  BOOL v21;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int16 *v31;
  JSC::DFG::Graph *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  JSC::DFG::CFGSimplificationPhase *v44;
  _BYTE v45[24];
  WTF *v46;
  uint64_t v47;
  uint64_t v48;

  if (a3 == a2 || *((_DWORD *)a3 + 13) != 1)
  {
    v29 = *((unsigned int *)a2 + 55);
    v30 = v29 - 1;
    do
    {
      if (v30 >= v29)
        goto LABEL_36;
      v31 = *(unsigned __int16 **)(*((_QWORD *)a2 + 26) + 8 * v30--);
    }
    while (v31[9] - 364 > 0xB);
    v32 = (JSC::DFG::Graph *)*((_QWORD *)this + 4);
    JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v45, (const JSC::DFG::NodeOrigin *)v31);
    JSC::DFG::BasicBlock::replaceTerminal<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>((uint64_t)a2, v32, (uint64_t)v45, (uint64_t)a3, v33, v34, v35, v36);
    JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v45, v37, v38, v39, v40, v41, v42, v43);
  }
  else
  {
    v10 = *((_QWORD *)this + 4);
    v11 = *(_DWORD *)(v10 + 944);
    if (v11)
      v12 = v11 == 2;
    else
      v12 = 1;
    if (!v12)
    {
      if ((_BYTE)qword_1ECF4C32A)
        v21 = 0;
      else
        v21 = byte_1ECF4C323 == 0;
      if (!v21 || BYTE2(qword_1ECF4C32A) != 0)
      {
        v44 = this;
        WTF::dataLog<char [16]>("Dethreading DFG graph.\n");
        this = v44;
      }
      v23 = *(_DWORD *)(v10 + 60);
LABEL_19:
      while (v23)
      {
        if (*(_DWORD *)(v10 + 60) <= --v23)
        {
          __break(0xC471u);
          JUMPOUT(0x1983507B8);
        }
        v24 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v23);
        if (v24)
        {
          v25 = *(_DWORD *)(v24 + 36);
          if (v25)
          {
            v26 = v25 - 1;
            v27 = 8 * v26;
            while (*(_DWORD *)(v24 + 36) > v26)
            {
              v28 = *(_QWORD **)(*(_QWORD *)(v24 + 24) + v27);
              v28[3] = 0;
              v28[4] = 0;
              v28[5] = 0;
              v27 -= 8;
              if (--v26 == -1)
                goto LABEL_19;
            }
LABEL_36:
            __break(0xC471u);
            JUMPOUT(0x1983507B0);
          }
        }
      }
      *(_DWORD *)(v10 + 944) = 0;
    }
    v46 = (WTF *)&v48;
    v47 = 1;
    JSC::DFG::CFGSimplificationPhase::mergeBlocks((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)&v46, a5, a6, a7, a8);
    v20 = v46;
    if (&v48 != (uint64_t *)v46 && v46)
    {
      v46 = 0;
      LODWORD(v47) = 0;
      WTF::fastFree((unint64_t)v20, v13, v14, v15, v16, v17, v18, v19);
    }
  }
}

uint64_t JSC::DFG::BasicBlock::appendNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;

  v8 = a4;
  v10 = *(_QWORD *)a5;
  if ((*(_QWORD *)a5 & 1) != 0)
  {
    v24 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    if ((v10 & 2) != 0
      || ((v25 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v25 != 0x3FFFFFFF)
        ? (v26 = (_DWORD)v25 == -1)
        : (v26 = 1),
          v26))
    {
      v27 = 2;
    }
    else if (v25 >> 28)
    {
      v42 = a3;
      v44 = a6;
      v36 = a2;
      v40 = a5;
      v32 = v25;
      v33 = WTF::fastMalloc((WTF *)0x10);
      a5 = v40;
      a3 = v42;
      a2 = v36;
      v8 = a4;
      a6 = v44;
      *(_QWORD *)v33 = v24;
      *(_DWORD *)(v33 + 8) = v32;
      v27 = 1;
      v24 = v33;
    }
    else
    {
      v27 = v24;
      v24 = v25 << 36;
    }
    v10 = v24 | v27;
  }
  v46 = v10;
  v11 = *(_QWORD *)(a5 + 8);
  if ((v11 & 1) != 0)
  {
    v28 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v29 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v29 != 0x3FFFFFFF)
        ? (v30 = (_DWORD)v29 == -1)
        : (v30 = 1),
          v30))
    {
      v31 = 2;
    }
    else if (v29 >> 28)
    {
      v43 = a3;
      v45 = a6;
      v39 = v8;
      v37 = a2;
      v41 = a5;
      v34 = v29;
      v35 = WTF::fastMalloc((WTF *)0x10);
      a5 = v41;
      a3 = v43;
      a2 = v37;
      v8 = v39;
      a6 = v45;
      *(_QWORD *)v35 = v28;
      *(_DWORD *)(v35 + 8) = v34;
      v31 = 1;
      v28 = v35;
    }
    else
    {
      v31 = v28;
      v28 = v29 << 36;
    }
    v11 = v28 | v31;
  }
  v47 = v11;
  v48 = *(_WORD *)(a5 + 16);
  v19 = JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(a2, a3, v8, (uint64_t)&v46, a6, a6, a7, a8);
  if ((v47 & 1) != 0 && (v47 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v47 & 0xFFFFFFFF8, v12, v13, v14, v15, v16, v17, v18);
  if ((v46 & 1) != 0 && (v46 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v46 & 0xFFFFFFFF8, v12, v13, v14, v15, v16, v17, v18);
  v49 = v19;
  v20 = (_QWORD *)(a1 + 208);
  v21 = *(unsigned int *)(a1 + 220);
  if ((_DWORD)v21 == *(_DWORD *)(a1 + 216))
  {
    v23 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v49);
    v21 = *(unsigned int *)(a1 + 220);
    *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * v21) = *v23;
  }
  else
  {
    *(_QWORD *)(*v20 + 8 * v21) = v19;
  }
  *(_DWORD *)(a1 + 220) = v21 + 1;
  return v19;
}

void WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v8 = (int)a2;
  v10 = *(unsigned int *)(a1 + 12);
  if ((void *)v10 != a2)
  {
    v11 = (_QWORD *)(*(_QWORD *)a1 + 32 * (_QWORD)a2);
    v12 = 32 * v10 - 32 * (_QWORD)a2;
    do
    {
      if ((*v11 & 1) != 0)
        WTF::fastFree(*v11 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v11 += 4;
      v12 -= 32;
    }
    while (v12);
  }
  *(_DWORD *)(a1 + 12) = v8;
}

void WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::clear(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  if (*(_DWORD *)(a1 + 8))
  {
    v9 = *(unsigned int *)(a1 + 12);
    v10 = *(_QWORD **)a1;
    if ((_DWORD)v9)
    {
      v11 = 32 * v9;
      do
      {
        if ((*v10 & 1) != 0)
          WTF::fastFree(*v10 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v10 += 4;
        v11 -= 32;
      }
      while (v11);
      *(_DWORD *)(a1 + 12) = 0;
      v10 = *(_QWORD **)a1;
    }
    if (v10)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t StatusReg;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t casual;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;

  if (*(unsigned int *)(a1 + 8) >= a2)
    return;
  v8 = a2;
  if (a2 >> 27)
  {
    __break(0xC471u);
    return;
  }
  v10 = *(_QWORD *)a1;
  v11 = *(unsigned int *)(a1 + 12);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v13 = *(_QWORD *)(StatusReg + 752);
  if (!v13)
    goto LABEL_7;
  v14 = (32 * a2) | 0xF;
  if (v14 <= 0x1AF)
  {
    v15 = 46 * a2 + 7;
  }
  else if (v14 >> 5 > 0x138
         || (v15 = *((unsigned int *)&bmalloc_common_primitive_heap_support + 2 * a2 + 626),
             *(_DWORD *)(v13 + 8052) <= v15))
  {
LABEL_7:
    casual = bmalloc_allocate_casual(32 * a2, 1);
    goto LABEL_12;
  }
  v17 = v13 + 8 * v15;
  v18 = v17 + 8064;
  *(_BYTE *)(v17 + 8064) = 1;
  v19 = *(unsigned int *)(v17 + 8080);
  if ((_DWORD)v19)
  {
    *(_DWORD *)(v18 + 16) = v19 - *(_DWORD *)(v18 + 20);
    casual = *(_QWORD *)(v18 + 8) - v19;
  }
  else
  {
    v29 = *(_QWORD *)(v18 + 40);
    v30 = *(_QWORD *)(v18 + 24);
    if (!v29)
    {
      if (*(_BYTE *)(v18 + 5) == 6)
      {
        v32 = *(unsigned int *)(v18 + 32);
        v33 = *(_DWORD *)(v18 + 36);
        if (v32 < v33)
        {
          *(_QWORD *)(v18 + 8 * v32 + 56) = 0;
          v34 = (unint64_t *)(8 * v15 + 8 * v32 + v13 + 8128);
          v35 = v33 - 1 - v32;
          while (v35)
          {
            v30 += 1024;
            v37 = *v34++;
            v36 = v37;
            LODWORD(v32) = v32 + 1;
            --v35;
            if (v37)
            {
              v29 = __rbit64(v36);
              *(_DWORD *)(v18 + 32) = v32;
              *(_QWORD *)(v18 + 24) = v30;
              goto LABEL_34;
            }
          }
          *(_DWORD *)(v18 + 32) = v33;
        }
      }
      *(_BYTE *)v18 = 0;
      goto LABEL_7;
    }
LABEL_34:
    v31 = __clz(v29);
    *(_QWORD *)(v18 + 40) = v29 & ~(0x8000000000000000 >> v31);
    casual = v30 + 16 * v31;
  }
  *(_BYTE *)v18 = 0;
LABEL_12:
  *(_DWORD *)(a1 + 8) = v8;
  *(_QWORD *)a1 = casual;
  if ((_DWORD)v11)
  {
    v20 = 32 * v11;
    v21 = v10;
    do
    {
      *(_QWORD *)casual = 0;
      v22 = *(_QWORD *)v21;
      if ((*(_QWORD *)v21 & 1) == 0 || v22 == 4)
      {
        v23 = v22 & 0xFFFFFFFFFFFFFFFDLL;
        *(_QWORD *)casual = v23;
      }
      else
      {
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)casual, (_QWORD *)v21);
        v23 = *(_QWORD *)casual;
      }
      v24 = v23 & 0xFFFFFFFFFFFFFFFDLL;
      v25 = v23 | 2;
      if ((*(_BYTE *)v21 & 2) == 0)
        v25 = v24;
      *(_QWORD *)casual = v25;
      v26 = *(_OWORD *)(v21 + 8);
      *(_QWORD *)(casual + 24) = *(_QWORD *)(v21 + 24);
      *(_OWORD *)(casual + 8) = v26;
      if ((*(_QWORD *)v21 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v21 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
      casual += 32;
      v21 += 32;
      v20 -= 32;
    }
    while (v20);
  }
  if (v10)
  {
    if (*(_QWORD *)a1 == v10)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    v27 = *(_QWORD *)(StatusReg + 752);
    if (!v27)
    {
      pas_try_deallocate_slow_no_cache(v10, (uint64_t)&bmalloc_heap_config, 1);
      return;
    }
    if (!(v10 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v10 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v10)) & 1) != 0)
    {
      goto LABEL_30;
    }
    if (v10 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v10 >> 24)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v10 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v10) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
      {
LABEL_30:
        v28 = *(unsigned int *)(v27 + 8000);
        if (v28 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v27, v10, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v27 + 8 * v28) = v10 | 0x5000000000000;
          *(_DWORD *)(v27 + 8000) = v28 + 1;
        }
        return;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v27, v10, 1, a4, a5, a6, a7, a8);
  }
}

BOOL JSC::DFG::runAndLog<JSC::DFG::CPSRethreadingPhase>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 v9;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;
  double v20;
  char v21;
  __int128 *v22;

  v18[0] = "DFG";
  v18[1] = 4;
  v19 = *(_OWORD *)(a1 + 40);
  v20 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v14 = mach_absolute_time();
    v16 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v16 != -1)
    {
      *(_QWORD *)&v17 = &v21;
      v22 = &v17;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v15) = dword_1ECF4400C;
    v20 = (double)(v14 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v15 * 1000000000.0);
  }
  v9 = JSC::DFG::CPSRethreadingPhase::run((JSC::DFG::CPSRethreadingPhase *)a1, a2, a3, a4, a5, a6, a7, a8);
  if (v9)
  {
    v11 = *(_QWORD *)(a1 + 32);
    if (qword_1ECF4C32A | byte_1ECF4C323
      || (BYTE1(qword_1ECF4C32A) ? (v12 = (*(_DWORD *)(*(_QWORD *)(v11 + 24) + 16) & 0xFFFFFFFE) == 4) : (v12 = 0),
          !v12 ? (v13 = BYTE2(qword_1ECF4C32A) == 0) : (v13 = 0),
          !v13))
    {
      v17 = *(_OWORD *)(a1 + 40);
      WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>(v11 + 1088, "Phase ", (uint64_t)&v17, " changed the IR.\n", "\n");
    }
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v18);
  return v9;
}

BOOL JSC::DFG::CPSRethreadingPhase::run(JSC::DFG::CPSRethreadingPhase *this, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t StatusReg;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v25;
  unsigned int v26;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  const void *v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int **v49;
  unsigned int *v50;
  uint64_t v51;
  unsigned int **v52;
  unsigned int *v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t *v114;
  uint64_t v115;
  int64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  _QWORD *v141;
  unsigned int v142;
  BOOL v143;
  int v144;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t *v163;
  unsigned int v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  BOOL v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  BOOL v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  BOOL v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  BOOL v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  BOOL v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  BOOL v222;
  uint64_t v223;
  unsigned int v224;
  _QWORD *v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  const void *v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  BOOL v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  BOOL v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  BOOL v242;
  uint64_t v243;
  uint64_t v244;
  BOOL v245;
  uint64_t v246;
  uint64_t v247;
  BOOL v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  BOOL v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t *v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unsigned int v275;
  int v276;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  void *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  __int128 v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  void *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  _QWORD *v299;
  uint64_t v300;
  uint64_t v301;
  __int128 v302;
  unsigned int v303;
  _QWORD *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  BOOL v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  BOOL v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  BOOL v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t *v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t *v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  unsigned int v333;
  int v334;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  void *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  _QWORD *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  __int128 v347;
  uint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  void *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  uint64_t v360;
  __int128 v361;
  unsigned int v362;
  uint64_t v363;
  unsigned int v364;
  uint64_t v365;
  unsigned int v366;
  uint64_t v367;
  int v368;
  uint64_t v369;
  unsigned int v370;
  uint64_t v371;
  int v372;
  int v374;
  uint64_t v375;
  unsigned int v376;
  uint64_t v377;
  int v378;
  uint64_t v380;
  uint64_t v381;
  int v382;
  unsigned int v383;
  uint64_t v384;
  uint64_t v385;
  int v386;
  uint64_t v387;
  uint64_t v388;
  _QWORD *v389;
  _QWORD *v390;
  uint64_t v391;
  _QWORD *v392;
  char *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  _QWORD *v397;
  uint64_t *v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  __int128 *v402;
  unint64_t v403;
  uint64_t v404;
  unint64_t v405;
  unsigned int v406;
  int v407;
  uint64_t v409;
  uint64_t v410;
  BOOL v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  BOOL v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  BOOL v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  void *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unsigned int v444;
  uint64_t v445;
  __int128 v446;
  char *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  void *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  __int128 v461;
  uint64_t v462;
  uint64_t v464;
  uint64_t v465;
  unsigned int v466;
  uint64_t v467;
  unint64_t v468;
  int v469;
  unint64_t v470;
  int v471;
  unint64_t v472;
  int v473;
  _QWORD *v474;
  _QWORD *v475;
  _QWORD *v476;
  uint64_t v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  int v481;
  int v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  int v487;
  int v488;
  uint64_t v489;
  uint64_t v490;
  int v491;
  int v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  unint64_t v507;
  unint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  int v523;
  int v524;
  int v525;
  int v526;
  int v527;
  uint64_t *v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  _QWORD *v537;
  _QWORD *v538;
  _QWORD *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  __int128 v543;
  uint64_t v544;
  uint64_t v545;
  __int16 v546;
  unint64_t v547;

  v8 = *((_QWORD *)this + 4);
  if (*(_DWORD *)(v8 + 956))
  {
    __break(0xC471u);
    JUMPOUT(0x19835241CLL);
  }
  v9 = *(_DWORD *)(v8 + 944);
  if (v9 != 1)
  {
    v527 = *(_DWORD *)(v8 + 944);
    v12 = *(_QWORD *)(v8 + 464);
    if (v12)
    {
      v13 = 0;
      v14 = *(unsigned int *)(v8 + 484);
      v15 = 1;
      do
      {
        if (v13 >> 4 >= v14)
        {
          __break(0xC471u);
          JUMPOUT(0x1983529E8);
        }
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 472) + 8 * (v13 >> 4)) + ((v13 & 0xF) << 6) + 44) = 0;
        v13 = v15++;
      }
      while (v12 > v13);
    }
    v16 = *(_DWORD *)(v8 + 60);
    if (v16)
    {
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (1)
      {
        --v16;
        v18 = *((_QWORD *)this + 4);
        if (*(_DWORD *)(v18 + 60) <= v16)
        {
          __break(0xC471u);
          JUMPOUT(0x198352A1CLL);
        }
        v19 = *(_QWORD *)(*(_QWORD *)(v18 + 48) + 8 * v16);
        if (!v19)
          goto LABEL_52;
        v20 = *(unsigned int *)(v19 + 220);
        if (!(_DWORD)v20)
        {
          LODWORD(v22) = 0;
          goto LABEL_36;
        }
        v21 = 0;
        v22 = 0;
        do
        {
          a2 = *(_QWORD *)(*(_QWORD *)(v19 + 208) + 8 * v21);
          v23 = *(unsigned __int16 *)(a2 + 18);
          if ((v23 - 28) < 2 || v23 == 15)
          {
            *(_QWORD *)(a2 + 24) = 0;
          }
          else if (v23 == 23)
          {
            v25 = *(_QWORD *)(a2 + 24) & 0xFF00FFFFFFFFFFFFLL;
            if (!v25)
            {
              JSC::DFG::Graph::deleteNode(*((JSC::DFG::Graph **)this + 4), (JSC::DFG::Node *)a2, a3, a4, a5, a6, a7, a8);
              v20 = *(unsigned int *)(v19 + 220);
              goto LABEL_21;
            }
            v26 = *(unsigned __int16 *)((*(_QWORD *)(a2 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
            if (v26 > 0x25)
            {
              if (v26 != 38)
              {
                if (v26 == 39)
                {
                  JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 4), (JSC::DFG::Node *)a2, (const WTF::CString *)"./dfg/DFGCPSRethreadingPhase.cpp", (const char *)0x63, "void JSC::DFG::CPSRethreadingPhase::freeUnnecessaryNodes()", "Invalid Phantom(@SetArgumentMaybe)");
                  __break(0xC471u);
                  JUMPOUT(0x198352630);
                }
                goto LABEL_19;
              }
            }
            else if (v26 != 16 && v26 != 27)
            {
              goto LABEL_19;
            }
            *(_WORD *)(a2 + 18) = 29;
            *(_QWORD *)(a2 + 72) = *(_QWORD *)(v25 + 72);
            *(_QWORD *)(a2 + 24) = 0;
            v20 = *(unsigned int *)(v19 + 220);
          }
LABEL_19:
          if (v20 <= v22)
          {
            __break(0xC471u);
            JUMPOUT(0x1983529D8);
          }
          *(_QWORD *)(*(_QWORD *)(v19 + 208) + 8 * v22++) = a2;
LABEL_21:
          ++v21;
        }
        while (v21 < v20);
        if (v20 < v22)
        {
          v46 = *(unsigned int *)(v19 + 216);
          if (v46 < v22)
          {
            v227 = v46 + (v46 >> 2);
            if (v227 >= 0x10)
              v228 = v227 + 1;
            else
              v228 = 16;
            if (v228 <= v22)
              v229 = v22;
            else
              v229 = v228;
            v230 = *(const void **)(v19 + 208);
            if (v229 < 9)
            {
              v231 = (void *)(v19 + 224);
              *(_QWORD *)(v19 + 208) = v19 + 224;
              *(_DWORD *)(v19 + 216) = 8;
            }
            else
            {
              if (v229 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x198352A8CLL);
              }
              v231 = (void *)WTF::fastMalloc((WTF *)(8 * v229));
              *(_DWORD *)(v19 + 216) = v229;
              *(_QWORD *)(v19 + 208) = v231;
            }
            memcpy(v231, v230, 8 * v20);
            if ((const void *)(v19 + 224) != v230 && v230)
            {
              if (*(const void **)(v19 + 208) == v230)
              {
                *(_QWORD *)(v19 + 208) = 0;
                *(_DWORD *)(v19 + 216) = 0;
              }
              WTF::fastFree((unint64_t)v230, (void *)a2, a3, a4, a5, a6, a7, a8);
            }
          }
        }
LABEL_36:
        *(_DWORD *)(v19 + 220) = v22;
        v28 = *(_DWORD *)(v19 + 36);
        if (v28)
        {
          while (2)
          {
            while (2)
            {
              if (*(_DWORD *)(v19 + 36) <= --v28)
              {
                __break(0xC471u);
                JUMPOUT(0x198352A04);
              }
              v29 = *((_QWORD *)this + 4);
              v30 = *(unsigned int **)(*(_QWORD *)(v19 + 24) + 8 * v28);
              if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
              {
                if (*(_DWORD *)(v29 + 944) == 2)
                {
                  v200 = *(unsigned int *)(v29 + 60);
                  if ((_DWORD)v200)
                  {
                    v54 = 0;
                    v201 = *(_QWORD *)(v29 + 48);
                    while (!*(_QWORD *)(v201 + 8 * v54))
                    {
                      if (v200 == ++v54)
                        goto LABEL_39;
                    }
                    if ((_DWORD)v200 != (_DWORD)v54)
                    {
                      v54 = v54;
                      do
                      {
                        if (v200 <= v54)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198352A34);
                        }
                        v47 = *(_QWORD *)(*(_QWORD *)(v201 + 8 * v54) + 200);
                        v48 = *(unsigned int *)(v47 + 76);
                        if ((_DWORD)v48)
                        {
                          v49 = *(unsigned int ***)(v47 + 64);
                          do
                          {
                            v50 = *v49++;
                            if (v50 == v30)
                            {
                              JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v29, (JSC::DFG::Node *)v30, (const WTF::CString *)"./dfg/DFGGraph.cpp", (const char *)0x2A1, "void JSC::DFG::Graph::deleteNode(Node *)", "!block->ssa->liveAtHead.contains(node)");
                              __break(0xC471u);
                              JUMPOUT(0x1983528E8);
                            }
                            --v48;
                          }
                          while (v48);
                        }
                        v51 = *(unsigned int *)(v47 + 92);
                        if ((_DWORD)v51)
                        {
                          v52 = *(unsigned int ***)(v47 + 80);
                          do
                          {
                            v53 = *v52++;
                            if (v53 == v30)
                            {
                              JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v29, (JSC::DFG::Node *)v30, (const WTF::CString *)"./dfg/DFGGraph.cpp", (const char *)0x2A2, "void JSC::DFG::Graph::deleteNode(Node *)", "!block->ssa->liveAtTail.contains(node)");
                              __break(0xC471u);
                              JUMPOUT(0x198352930);
                            }
                            --v51;
                          }
                          while (v51);
                        }
                        if (v200 > ++v54)
                        {
                          while (!*(_QWORD *)(v201 + 8 * v54))
                          {
                            if (v200 == ++v54)
                              goto LABEL_39;
                          }
                          v54 = v54;
                        }
                      }
                      while (v200 != v54);
                    }
                  }
                }
              }
LABEL_39:
              v31 = v30[5];
              v32 = *(_QWORD *)(v29 + 1032);
              if (*(unsigned int **)(v32 + 8 * v31) != v30)
              {
                __break(0xC471u);
                JUMPOUT(0x198351DACLL);
              }
              v33 = *(unsigned int *)(v29 + 1060);
              if ((_DWORD)v33 == *(_DWORD *)(v29 + 1056))
              {
                v40 = StatusReg;
                v41 = v33 + (v33 >> 2);
                if (v41 >= 0x10)
                  v42 = v41 + 1;
                else
                  v42 = 16;
                if (v42 <= v33 + 1)
                  v43 = v33 + 1;
                else
                  v43 = v42;
                if (v43 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198352A3CLL);
                }
                v44 = *(const void **)(v29 + 1048);
                v45 = (void *)WTF::fastMalloc((WTF *)(8 * v43));
                *(_DWORD *)(v29 + 1056) = v43;
                *(_QWORD *)(v29 + 1048) = v45;
                memcpy(v45, v44, 8 * v33);
                StatusReg = v40;
                if (v44)
                {
                  if (*(const void **)(v29 + 1048) == v44)
                  {
                    *(_QWORD *)(v29 + 1048) = 0;
                    *(_DWORD *)(v29 + 1056) = 0;
                  }
                  WTF::fastFree((unint64_t)v44, (void *)a2, a3, a4, a5, a6, a7, a8);
                }
                v33 = *(unsigned int *)(v29 + 1060);
                *(_QWORD *)(*(_QWORD *)(v29 + 1048) + 8 * v33) = v30[5];
                v32 = *(_QWORD *)(v29 + 1032);
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)(v29 + 1048) + 8 * v33) = v31;
              }
              *(_DWORD *)(v29 + 1060) = v33 + 1;
              v34 = 8 * v30[5];
              v35 = *(_QWORD *)(v32 + v34);
              *(_QWORD *)(v32 + v34) = 0;
              if (!v35)
                goto LABEL_50;
              v36 = *(_QWORD *)(v35 + 8);
              if ((v36 & 1) != 0 && (v36 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v36 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
              v37 = *(_QWORD *)v35;
              if ((*(_QWORD *)v35 & 1) != 0 && (v37 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v37 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
              v38 = *(_QWORD *)(StatusReg + 752);
              if (v38)
              {
                if (v35 >> 43
                  || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v35 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v35)) & 1) == 0)
                {
                  if (v35 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v35 >> 24)
                  {
                    a4 = 0;
                  }
                  else
                  {
                    a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                    + ((((v35 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                    + 24) >> (2 * ((BYTE3(v35) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                    if ((_DWORD)a4 == 1)
                      goto LABEL_48;
                  }
                  bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v38, v35, 1, a4, a5, a6, a7, a8);
                }
                else
                {
LABEL_48:
                  v39 = *(unsigned int *)(v38 + 8000);
                  if (v39 < 0x3E7)
                  {
                    *(_QWORD *)(v38 + 8 * v39) = v35 | 0x5000000000000;
                    *(_DWORD *)(v38 + 8000) = v39 + 1;
LABEL_50:
                    if (!v28)
                      goto LABEL_51;
                    continue;
                  }
                  pas_thread_local_cache_append_deallocation_slow(v38, v35, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                }
              }
              else
              {
                pas_try_deallocate_slow_no_cache(v35, (uint64_t)&bmalloc_heap_config, 1);
              }
              break;
            }
            if (!v28)
              break;
            continue;
          }
        }
LABEL_51:
        *(_DWORD *)(v19 + 36) = 0;
LABEL_52:
        if (!v16)
        {
          v8 = *((_QWORD *)this + 4);
          break;
        }
      }
    }
    v55 = *(_DWORD *)(v8 + 60);
    if (v55)
    {
      do
      {
        if (*(_DWORD *)(v8 + 60) <= --v55)
        {
          __break(0xC471u);
          JUMPOUT(0x198352A2CLL);
        }
        v56 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v55);
        if (v56)
        {
          v57 = *(_DWORD *)(v56 + 36);
          if (v57)
          {
            v58 = v57 - 1;
            v59 = 8 * v58;
            do
            {
              if (*(_DWORD *)(v56 + 36) <= v58)
              {
                __break(0xC471u);
                JUMPOUT(0x198352A0CLL);
              }
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 + 24) + v59) + 88) = 0;
              v59 -= 8;
              --v58;
            }
            while (v58 != -1);
          }
          v60 = *(_DWORD *)(v56 + 220);
          if (v60)
          {
            v61 = v60 - 1;
            v62 = 8 * v61;
            do
            {
              if (*(_DWORD *)(v56 + 220) <= v61)
              {
                __break(0xC471u);
                JUMPOUT(0x1983529E0);
              }
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 + 208) + v62) + 88) = 0;
              v62 -= 8;
              --v61;
            }
            while (v61 != -1);
          }
        }
      }
      while (v55);
      v8 = *((_QWORD *)this + 4);
    }
    v63 = *(_DWORD *)(v8 + 60);
    if (v63)
    {
      v528 = (uint64_t *)((char *)this + 80);
      v537 = (_QWORD *)((char *)this + 3168);
      while (1)
      {
        --v63;
        v64 = *((_QWORD *)this + 4);
        if (*(_DWORD *)(v64 + 60) <= v63)
        {
          __break(0xC471u);
          JUMPOUT(0x198352A24);
        }
        v65 = *(_QWORD *)(*(_QWORD *)(v64 + 48) + 8 * v63);
        *((_QWORD *)this + 9) = v65;
        if (v65)
        {
          v66 = *(unsigned int *)(v65 + 88);
          if ((_DWORD)v66)
          {
            v67 = v66 - 1;
            do
            {
              v68 = v67;
              v69 = 8 * v67;
              *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 72) + v69) = 0;
              *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 96) + v69) = 0;
              --v67;
            }
            while (v68);
            v65 = *((_QWORD *)this + 9);
          }
          v70 = *(unsigned int *)(v65 + 92);
          if ((_DWORD)v70)
          {
            v71 = v70 - 1;
            do
            {
              v72 = v71;
              *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 72)
                        + 8 * (v71 + (unint64_t)*(unsigned int *)(*((_QWORD *)this + 9) + 88))) = 0;
              *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 96)
                        + 8 * (v71-- + (unint64_t)*(unsigned int *)(*((_QWORD *)this + 9) + 112))) = 0;
            }
            while (v72);
            v65 = *((_QWORD *)this + 9);
            LODWORD(v70) = *(_DWORD *)(v65 + 92);
          }
          v73 = (*(_DWORD *)(v65 + 84) - (*(_DWORD *)(v65 + 88) + v70));
          if ((_DWORD)v73)
          {
            v77 = v73 - 1;
            do
            {
              *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 72)
                        + 8
                        * (*(unsigned int *)(*((_QWORD *)this + 9) + 88)
                         + (unint64_t)v77
                         + *(unsigned int *)(*((_QWORD *)this + 9) + 92))) = 0;
              *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 96)
                        + 8
                        * (*(unsigned int *)(*((_QWORD *)this + 9) + 112)
                         + (unint64_t)v77
                         + *(unsigned int *)(*((_QWORD *)this + 9) + 116))) = 0;
            }
            while ((unint64_t)v77--);
            v65 = *((_QWORD *)this + 9);
          }
          v74 = *(unsigned int *)(v65 + 220);
          if ((_DWORD)v74)
            break;
        }
LABEL_221:
        if (!v63)
        {
          v8 = *((_QWORD *)this + 4);
          goto LABEL_239;
        }
      }
      v75 = *(uint64_t **)(v65 + 208);
      v76 = &v75[v74];
      while (1)
      {
        v80 = *v75;
        v81 = *((_QWORD *)this + 4);
        v82 = *(_QWORD *)(*v75 + 24);
        if ((*(_BYTE *)(*v75 + 56) & 0x10) != 0)
        {
          v146 = *(_QWORD *)(v80 + 32);
          if ((int)v146 + (int)v82 > v82)
          {
            LODWORD(v147) = *(_DWORD *)(v81 + 164);
            v148 = *(_QWORD *)(*v75 + 24);
            if (v147 <= v82)
              v147 = v82;
            else
              v147 = v147;
            do
            {
              if (v147 == v148)
              {
                __break(0xC471u);
                JUMPOUT(0x198352A14);
              }
              v149 = *(_QWORD *)(v81 + 152);
              v150 = *(_QWORD *)(v149 + 8 * v148);
              if ((v150 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v151 = *(_QWORD *)((v150 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
                if (v151)
                {
                  *(_QWORD *)(v149 + 8 * v148) = v151 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v150) << 48);
                  v82 = *(_QWORD *)(v80 + 24);
                  v146 = *(_QWORD *)(v80 + 32);
                }
              }
              ++v148;
            }
            while (v148 < (v82 + v146));
          }
        }
        else
        {
          if ((v82 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v85 = *(_QWORD *)((v82 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
            if (v85)
              *(_QWORD *)(v80 + 24) = v85 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v82) << 48);
          }
          v83 = *(_QWORD *)(v80 + 32);
          if ((v83 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v86 = *(_QWORD *)((v83 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
            if (v86)
              *(_QWORD *)(v80 + 32) = v86 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v83) << 48);
          }
          v84 = *(_QWORD *)(v80 + 40);
          if ((v84 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v87 = *(_QWORD *)((v84 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
            if (v87)
              *(_QWORD *)(v80 + 40) = v87 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v84) << 48);
          }
        }
        switch(*(_WORD *)(v80 + 18))
        {
          case 0xF:
            v95 = *(uint64_t **)(v80 + 72);
            v96 = v95;
            do
            {
              v97 = (uint64_t)v96;
              v96 = (uint64_t *)*v96;
            }
            while (v96);
            if ((uint64_t *)v97 != v95)
              *v95 = v97;
            v98 = *(_QWORD *)(v97 + 24);
            if (HIDWORD(v98) == 1)
            {
              v99 = ~(_DWORD)v98;
              v100 = *((_QWORD *)this + 9);
              v101 = *(unsigned int *)(v100 + 112) + (uint64_t)v99;
              v102 = *(_QWORD *)(v100 + 96);
              a3 = *(_QWORD *)(v102 + 8 * v101);
              if (a3)
                goto LABEL_236;
LABEL_145:
              *(_BYTE *)(v97 + 44) = 1;
              v545 = 0;
              v103 = *(_QWORD *)v80;
              if ((*(_QWORD *)v80 & 1) != 0)
              {
                v192 = *(_QWORD *)(v103 & 0xFFFFFFFF8);
                if ((v103 & 2) != 0
                  || ((v193 = *(unsigned int *)((v103 & 0xFFFFFFFF8) + 8), (_DWORD)v193 != 0x3FFFFFFF)
                    ? (v194 = (_DWORD)v193 == -1)
                    : (v194 = 1),
                      v194))
                {
                  v195 = 2;
                }
                else if (v193 >> 28)
                {
                  v501 = *(_QWORD *)(v103 & 0xFFFFFFFF8);
                  v515 = v81;
                  v487 = *(_DWORD *)((v103 & 0xFFFFFFFF8) + 8);
                  v192 = WTF::fastMalloc((WTF *)0x10);
                  v81 = v515;
                  *(_QWORD *)v192 = v501;
                  *(_DWORD *)(v192 + 8) = v487;
                  v195 = 1;
                }
                else
                {
                  v195 = *(_QWORD *)(v103 & 0xFFFFFFFF8);
                  v192 = v193 << 36;
                }
                v103 = v192 | v195;
              }
              *(_QWORD *)&v543 = v103;
              v104 = *(_QWORD *)(v80 + 8);
              if ((v104 & 1) != 0)
              {
                v196 = *(_QWORD *)(v104 & 0xFFFFFFFF8);
                if ((v104 & 2) != 0
                  || ((v197 = *(unsigned int *)((v104 & 0xFFFFFFFF8) + 8), (_DWORD)v197 != 0x3FFFFFFF)
                    ? (v198 = (_DWORD)v197 == -1)
                    : (v198 = 1),
                      v198))
                {
                  v199 = 2;
                }
                else if (v197 >> 28)
                {
                  v502 = *(_QWORD *)(v104 & 0xFFFFFFFF8);
                  v516 = v81;
                  v488 = *(_DWORD *)((v104 & 0xFFFFFFFF8) + 8);
                  v196 = WTF::fastMalloc((WTF *)0x10);
                  v81 = v516;
                  *(_QWORD *)v196 = v502;
                  *(_DWORD *)(v196 + 8) = v488;
                  v199 = 1;
                }
                else
                {
                  v199 = *(_QWORD *)(v104 & 0xFFFFFFFF8);
                  v196 = v197 << 36;
                }
                v104 = v196 | v199;
              }
              *((_QWORD *)&v543 + 1) = v104;
              LOWORD(v544) = *(_WORD *)(v80 + 16);
              v547 = v97;
LABEL_148:
              v546 = 27;
              v106 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>(v81 + 1032, &v546, (uint64_t)&v543, (uint64_t *)&v547, a5, a6, a7, a8);
              if ((BYTE8(v543) & 1) != 0 && (*((_QWORD *)&v543 + 1) & 0xFFFFFFFF8) != 0)
                WTF::fastFree(*((_QWORD *)&v543 + 1) & 0xFFFFFFFF8, v105, a3, a4, a5, a6, a7, a8);
              if ((v543 & 1) != 0 && (v543 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v543 & 0xFFFFFFFF8, v105, a3, a4, a5, a6, a7, a8);
              v545 = v106;
              v107 = (_QWORD *)(v100 + 24);
              v108 = *(unsigned int *)(v100 + 36);
              if ((_DWORD)v108 == *(_DWORD *)(v100 + 32))
              {
                v157 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v107, v108 + 1, (unint64_t)&v545);
                v108 = *(unsigned int *)(v100 + 36);
                *(_QWORD *)(*(_QWORD *)(v100 + 24) + 8 * v108) = *v157;
                v106 = v545;
              }
              else
              {
                *(_QWORD *)(*v107 + 8 * v108) = v106;
              }
              *(_DWORD *)(v100 + 36) = v108 + 1;
              *(_QWORD *)&v543 = v100;
              *((_QWORD *)&v543 + 1) = v99;
              v544 = v106;
              v109 = *((unsigned int *)this + 795);
              if ((_DWORD)v109 == *((_DWORD *)this + 794))
              {
                v178 = WTF::Vector<JSC::DFG::CPSRethreadingPhase::PhiStackEntry,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v537, (void *)(v109 + 1), (unint64_t)&v543, a4, a5, a6, a7, a8);
                v110 = *((_QWORD *)this + 396) + 24 * *((unsigned int *)this + 795);
                v111 = *(_OWORD *)v178;
                v112 = *(_QWORD *)(v178 + 16);
              }
              else
              {
                v110 = *v537 + 24 * v109;
                v111 = v543;
                v112 = v544;
              }
              *(_QWORD *)(v110 + 16) = v112;
              *(_OWORD *)v110 = v111;
              ++*((_DWORD *)this + 795);
              *(_QWORD *)(v80 + 24) = v106 & 0xFF00FFFFFFFFFFFFLL;
              *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 72)
                        + 8 * (v99 + (unint64_t)*(unsigned int *)(*((_QWORD *)this + 9) + 88))) = v106;
              v88 = *((_QWORD *)this + 9);
              v79 = v99 + (unint64_t)*(unsigned int *)(v88 + 112);
LABEL_117:
              *(_QWORD *)(*(_QWORD *)(v88 + 96) + 8 * v79) = v80;
              if (++v75 == v76)
                goto LABEL_221;
            }
            else
            {
              if (HIDWORD(v98))
              {
                if (HIDWORD(v98) != 2)
                  goto LABEL_123;
                v180 = *((_QWORD *)this + 9);
                v101 = *(unsigned int *)(v180 + 112) + (uint64_t)(int)v98 + *(unsigned int *)(v180 + 116);
                v102 = *(_QWORD *)(v180 + 96);
                a3 = *(_QWORD *)(v102 + 8 * v101);
                if (!a3)
                {
                  *(_BYTE *)(v97 + 44) = 1;
                  v545 = 0;
                  v181 = *(_QWORD *)v80;
                  if ((*(_QWORD *)v80 & 1) != 0)
                  {
                    v497 = v180;
                    v511 = v81;
                    v483 = *(_QWORD *)(v181 & 0xFFFFFFFF8);
                    if ((v181 & 2) != 0
                      || ((v247 = *(unsigned int *)((v181 & 0xFFFFFFFF8) + 8), (_DWORD)v247 != 0x3FFFFFFF)
                        ? (v248 = (_DWORD)v247 == -1)
                        : (v248 = 1),
                          v248))
                    {
                      v249 = 2;
                    }
                    else if (v247 >> 28)
                    {
                      v259 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v259 = v483;
                      *(_DWORD *)(v259 + 8) = v247;
                      v249 = 1;
                      v483 = v259;
                    }
                    else
                    {
                      v249 = *(_QWORD *)(v181 & 0xFFFFFFFF8);
                      v483 = v247 << 36;
                    }
                    v180 = v497;
                    v181 = v483 | v249;
                    v81 = v511;
                  }
                  *(_QWORD *)&v543 = v181;
                  v182 = *(_QWORD *)(v80 + 8);
                  if ((v182 & 1) != 0)
                  {
                    v498 = v180;
                    v512 = v81;
                    v484 = *(_QWORD *)(v182 & 0xFFFFFFFF8);
                    if ((v182 & 2) != 0
                      || (v250 = *(unsigned int *)((v182 & 0xFFFFFFFF8) + 8), (_DWORD)v250 == 0x3FFFFFFF)
                      || (_DWORD)v250 == -1)
                    {
                      v251 = 2;
                    }
                    else if (v250 >> 28)
                    {
                      v260 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v260 = v484;
                      *(_DWORD *)(v260 + 8) = v250;
                      v251 = 1;
                      v484 = v260;
                    }
                    else
                    {
                      v251 = *(_QWORD *)(v182 & 0xFFFFFFFF8);
                      v484 = v250 << 36;
                    }
                    v180 = v498;
                    v182 = v484 | v251;
                    v81 = v512;
                  }
                  *((_QWORD *)&v543 + 1) = v182;
                  LOWORD(v544) = *(_WORD *)(v80 + 16);
                  v547 = v97;
                  v546 = 27;
                  v184 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>(v81 + 1032, &v546, (uint64_t)&v543, (uint64_t *)&v547, a5, a6, a7, a8);
                  if ((BYTE8(v543) & 1) != 0 && (*((_QWORD *)&v543 + 1) & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(*((_QWORD *)&v543 + 1) & 0xFFFFFFFF8, v183, a3, a4, a5, a6, a7, a8);
                  if ((v543 & 1) != 0 && (v543 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v543 & 0xFFFFFFFF8, v183, a3, a4, a5, a6, a7, a8);
                  v545 = v184;
                  v185 = (_QWORD *)(v180 + 24);
                  v186 = *(unsigned int *)(v180 + 36);
                  if ((_DWORD)v186 == *(_DWORD *)(v180 + 32))
                  {
                    v240 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v185, v186 + 1, (unint64_t)&v545);
                    v186 = *(unsigned int *)(v180 + 36);
                    v187 = v180;
                    *(_QWORD *)(*(_QWORD *)(v180 + 24) + 8 * v186) = *v240;
                    v184 = v545;
                  }
                  else
                  {
                    v187 = v180;
                    *(_QWORD *)(*v185 + 8 * v186) = v184;
                  }
                  v188 = (int)v98;
                  *(_DWORD *)(v187 + 36) = v186 + 1;
                  *(_QWORD *)&v543 = v187;
                  goto LABEL_309;
                }
LABEL_236:
                v162 = *(unsigned __int16 *)(a3 + 18);
                if ((v162 & 0xFFFE) != 0x1C
                  || (a3 = *(_QWORD *)(a3 + 24) & 0xFF00FFFFFFFFFFFFLL, v162 = *(unsigned __int16 *)(a3 + 18),
                                                                        v162 != 27))
                {
                  if (v162 != 15)
                  {
                    if (v162 == 38)
                    {
                      *(_BYTE *)(v97 + 44) = 1;
                      *(_QWORD *)(v80 + 24) = a3 & 0xFF00FFFFFFFFFFFFLL;
                      *(_QWORD *)(v102 + 8 * v101) = v80;
                      goto LABEL_123;
                    }
LABEL_264:
                    a3 = *(_QWORD *)(a3 + 24) & 0xFF00FFFFFFFFFFFFLL;
                  }
LABEL_265:
                  JSC::DFG::Node::replaceWith(v80, (JSC::DFG::Graph *)v81, (JSC::DFG::Node *)a3, a4, a5, a6, a7, a8);
                  goto LABEL_123;
                }
                *(_QWORD *)(v80 + 24) = a3;
                *(_QWORD *)(v102 + 8 * v101) = v80;
                goto LABEL_123;
              }
              v136 = (v98 << 32) - 0x500000000;
              v125 = v136 >> 32;
              v117 = *((_QWORD *)this + 9);
              v137 = *(_QWORD *)(v117 + 96);
              a3 = *(_QWORD *)(v137 + (v136 >> 29));
              if (!a3)
              {
                *(_BYTE *)(v97 + 44) = 1;
                v545 = 0;
                v138 = *(_QWORD *)v80;
                if ((*(_QWORD *)v80 & 1) != 0)
                {
                  v216 = *(_QWORD *)(v138 & 0xFFFFFFFF8);
                  if ((v138 & 2) != 0
                    || ((v217 = *(unsigned int *)((v138 & 0xFFFFFFFF8) + 8), (_DWORD)v217 != 0x3FFFFFFF)
                      ? (v218 = (_DWORD)v217 == -1)
                      : (v218 = 1),
                        v218))
                  {
                    v219 = 2;
                  }
                  else if (v217 >> 28)
                  {
                    v505 = *(_QWORD *)(v138 & 0xFFFFFFFF8);
                    v519 = v81;
                    v491 = *(_DWORD *)((v138 & 0xFFFFFFFF8) + 8);
                    v216 = WTF::fastMalloc((WTF *)0x10);
                    v81 = v519;
                    *(_QWORD *)v216 = v505;
                    *(_DWORD *)(v216 + 8) = v491;
                    v219 = 1;
                  }
                  else
                  {
                    v219 = *(_QWORD *)(v138 & 0xFFFFFFFF8);
                    v216 = v217 << 36;
                  }
                  v138 = v216 | v219;
                }
                *(_QWORD *)&v543 = v138;
                v139 = *(_QWORD *)(v80 + 8);
                if ((v139 & 1) != 0)
                {
                  v220 = *(_QWORD *)(v139 & 0xFFFFFFFF8);
                  if ((v139 & 2) != 0
                    || ((v221 = *(unsigned int *)((v139 & 0xFFFFFFFF8) + 8), (_DWORD)v221 != 0x3FFFFFFF)
                      ? (v222 = (_DWORD)v221 == -1)
                      : (v222 = 1),
                        v222))
                  {
                    v223 = 2;
                  }
                  else if (v221 >> 28)
                  {
                    v506 = *(_QWORD *)(v139 & 0xFFFFFFFF8);
                    v520 = v81;
                    v492 = *(_DWORD *)((v139 & 0xFFFFFFFF8) + 8);
                    v220 = WTF::fastMalloc((WTF *)0x10);
                    v81 = v520;
                    *(_QWORD *)v220 = v506;
                    *(_DWORD *)(v220 + 8) = v492;
                    v223 = 1;
                  }
                  else
                  {
                    v223 = *(_QWORD *)(v139 & 0xFFFFFFFF8);
                    v220 = v221 << 36;
                  }
                  v139 = v220 | v223;
                }
                *((_QWORD *)&v543 + 1) = v139;
                LOWORD(v544) = *(_WORD *)(v80 + 16);
                v547 = v97;
                v546 = 27;
                v122 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>(v81 + 1032, &v546, (uint64_t)&v543, (uint64_t *)&v547, a5, a6, a7, a8);
                if ((BYTE8(v543) & 1) != 0 && (*((_QWORD *)&v543 + 1) & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(*((_QWORD *)&v543 + 1) & 0xFFFFFFFF8, v140, a3, a4, a5, a6, a7, a8);
                if ((v543 & 1) != 0 && (v543 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v543 & 0xFFFFFFFF8, v140, a3, a4, a5, a6, a7, a8);
                v545 = v122;
                v141 = (_QWORD *)(v117 + 24);
                v124 = *(unsigned int *)(v117 + 36);
                if ((_DWORD)v124 == *(_DWORD *)(v117 + 32))
                {
                  v159 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v141, v124 + 1, (unint64_t)&v545);
                  v124 = *(unsigned int *)(v117 + 36);
                  *(_QWORD *)(*(_QWORD *)(v117 + 24) + 8 * v124) = *v159;
                  v122 = v545;
                }
                else
                {
                  *(_QWORD *)(*v141 + 8 * v124) = v122;
                }
LABEL_168:
                *(_DWORD *)(v117 + 36) = v124 + 1;
                *(_QWORD *)&v543 = v117;
                *((_QWORD *)&v543 + 1) = v125;
                v544 = v122;
                v126 = *((unsigned int *)this + 23);
                if ((_DWORD)v126 != *((_DWORD *)this + 22))
                {
                  v127 = *v528;
                  goto LABEL_170;
                }
                v179 = WTF::Vector<JSC::DFG::CPSRethreadingPhase::PhiStackEntry,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v528, (void *)(v126 + 1), (unint64_t)&v543, a4, a5, a6, a7, a8);
                v128 = *((_QWORD *)this + 10) + 24 * *((unsigned int *)this + 23);
                v129 = *(_OWORD *)v179;
                v130 = *(_QWORD *)(v179 + 16);
LABEL_171:
                *(_QWORD *)(v128 + 16) = v130;
                *(_OWORD *)v128 = v129;
                ++*((_DWORD *)this + 23);
LABEL_172:
                *(_QWORD *)(v80 + 24) = v122 & 0xFF00FFFFFFFFFFFFLL;
                *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 72) + 8 * v125) = v122;
                *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 96) + 8 * v125) = v80;
                goto LABEL_123;
              }
              v156 = *(unsigned __int16 *)(a3 + 18);
              if ((v156 & 0xFFFE) == 0x1C)
              {
                a3 = *(_QWORD *)(a3 + 24) & 0xFF00FFFFFFFFFFFFLL;
                v156 = *(unsigned __int16 *)(a3 + 18);
                if (v156 == 27)
                {
                  *(_QWORD *)(v80 + 24) = a3;
                  *(_QWORD *)(v137 + 8 * v125) = v80;
                  goto LABEL_123;
                }
              }
              if (v156 != 38)
              {
                if (v156 != 15)
                  goto LABEL_264;
                goto LABEL_265;
              }
              *(_BYTE *)(v97 + 44) = 1;
              *(_QWORD *)(v80 + 24) = a3 & 0xFF00FFFFFFFFFFFFLL;
              *(_QWORD *)(v137 + 8 * v125) = v80;
LABEL_123:
              if (++v75 == v76)
                goto LABEL_221;
            }
            break;
          case 0x10:
            v88 = *((_QWORD *)this + 9);
            v89 = *(_QWORD **)(v80 + 72);
            v90 = v89;
            do
            {
              v91 = v90;
              v90 = (_QWORD *)*v90;
            }
            while (v90);
            goto LABEL_133;
          case 0x1C:
            v113 = *(unint64_t **)(v80 + 72);
            v114 = v113;
            do
            {
              a3 = (unint64_t)v114;
              v114 = (unint64_t *)*v114;
            }
            while (v114);
            if ((unint64_t *)a3 != v113)
              *v113 = a3;
            v115 = *(_QWORD *)(a3 + 24);
            if (HIDWORD(v115))
            {
              if (HIDWORD(v115) != 1)
              {
                if (HIDWORD(v115) == 2)
                  JSC::DFG::CPSRethreadingPhase::canonicalizeFlushOrPhantomLocalFor<(JSC::DFG::NodeType)28,(JSC::OperandKind)2>((uint64_t)this, (JSC::DFG::NodeOrigin *)v80, a3, (int)v115);
                goto LABEL_123;
              }
              v99 = ~(_DWORD)v115;
              v100 = *((_QWORD *)this + 9);
              v118 = *(_QWORD *)(*(_QWORD *)(v100 + 96)
                               + 8 * (*(unsigned int *)(v100 + 112) + (uint64_t)~*(_DWORD *)(a3 + 24)));
              if (!v118)
              {
                *(_BYTE *)(a3 + 44) = 1;
                v545 = 0;
                v154 = *(_QWORD *)v80;
                if ((*(_QWORD *)v80 & 1) != 0)
                {
                  v232 = *(_QWORD *)(v154 & 0xFFFFFFFF8);
                  if ((v154 & 2) != 0
                    || ((v233 = *(unsigned int *)((v154 & 0xFFFFFFFF8) + 8), (_DWORD)v233 != 0x3FFFFFFF)
                      ? (v234 = (_DWORD)v233 == -1)
                      : (v234 = 1),
                        v234))
                  {
                    v235 = 2;
                  }
                  else if (v233 >> 28)
                  {
                    v493 = *(_QWORD *)(v154 & 0xFFFFFFFF8);
                    v507 = a3;
                    v521 = v81;
                    v232 = WTF::fastMalloc((WTF *)0x10);
                    a3 = v507;
                    v81 = v521;
                    *(_QWORD *)v232 = v493;
                    *(_DWORD *)(v232 + 8) = v233;
                    v235 = 1;
                  }
                  else
                  {
                    v235 = *(_QWORD *)(v154 & 0xFFFFFFFF8);
                    v232 = v233 << 36;
                  }
                  v154 = v232 | v235;
                }
                *(_QWORD *)&v543 = v154;
                v155 = *(_QWORD *)(v80 + 8);
                if ((v155 & 1) != 0)
                {
                  v236 = *(_QWORD *)(v155 & 0xFFFFFFFF8);
                  if ((v155 & 2) != 0
                    || ((v237 = *(unsigned int *)((v155 & 0xFFFFFFFF8) + 8), (_DWORD)v237 != 0x3FFFFFFF)
                      ? (v238 = (_DWORD)v237 == -1)
                      : (v238 = 1),
                        v238))
                  {
                    v239 = 2;
                  }
                  else if (v237 >> 28)
                  {
                    v494 = *(_QWORD *)(v155 & 0xFFFFFFFF8);
                    v508 = a3;
                    v522 = v81;
                    v236 = WTF::fastMalloc((WTF *)0x10);
                    a3 = v508;
                    v81 = v522;
                    *(_QWORD *)v236 = v494;
                    *(_DWORD *)(v236 + 8) = v237;
                    v239 = 1;
                  }
                  else
                  {
                    v239 = *(_QWORD *)(v155 & 0xFFFFFFFF8);
                    v236 = v237 << 36;
                  }
                  v155 = v236 | v239;
                }
                *((_QWORD *)&v543 + 1) = v155;
                LOWORD(v544) = *(_WORD *)(v80 + 16);
                v547 = a3;
                goto LABEL_148;
              }
              v142 = *(unsigned __int16 *)(v118 + 18);
              v143 = v142 > 0x1D;
              v144 = (1 << v142) & 0x30008000;
              if (!v143 && v144 != 0)
LABEL_215:
                v118 = *(_QWORD *)(v118 + 24) & 0xFF00FFFFFFFFFFFFLL;
LABEL_216:
              *(_BYTE *)(a3 + 44) = 1;
              goto LABEL_217;
            }
            v116 = ((unint64_t)v115 << 32) - 0x500000000;
            v117 = *((_QWORD *)this + 9);
            v118 = *(_QWORD *)(*(_QWORD *)(v117 + 96) + (v116 >> 29));
            if (v118)
            {
              v153 = *(unsigned __int16 *)(v118 + 18);
              if (v153 == 15 || (v153 - 28) <= 1)
                goto LABEL_215;
              goto LABEL_216;
            }
            *(_BYTE *)(a3 + 44) = 1;
            v545 = 0;
            v119 = *(_QWORD *)v80;
            if ((*(_QWORD *)v80 & 1) != 0)
            {
              v208 = *(_QWORD *)(v119 & 0xFFFFFFFF8);
              if ((v119 & 2) != 0
                || ((v209 = *(unsigned int *)((v119 & 0xFFFFFFFF8) + 8), (_DWORD)v209 != 0x3FFFFFFF)
                  ? (v210 = (_DWORD)v209 == -1)
                  : (v210 = 1),
                    v210))
              {
                v211 = 2;
              }
              else if (v209 >> 28)
              {
                v489 = *(_QWORD *)(v119 & 0xFFFFFFFF8);
                v503 = a3;
                v517 = v81;
                v208 = WTF::fastMalloc((WTF *)0x10);
                a3 = v503;
                v81 = v517;
                *(_QWORD *)v208 = v489;
                *(_DWORD *)(v208 + 8) = v209;
                v211 = 1;
              }
              else
              {
                v211 = *(_QWORD *)(v119 & 0xFFFFFFFF8);
                v208 = v209 << 36;
              }
              v119 = v208 | v211;
            }
            *(_QWORD *)&v543 = v119;
            v120 = *(_QWORD *)(v80 + 8);
            if ((v120 & 1) != 0)
            {
              v212 = *(_QWORD *)(v120 & 0xFFFFFFFF8);
              if ((v120 & 2) != 0
                || ((v213 = *(unsigned int *)((v120 & 0xFFFFFFFF8) + 8), (_DWORD)v213 != 0x3FFFFFFF)
                  ? (v214 = (_DWORD)v213 == -1)
                  : (v214 = 1),
                    v214))
              {
                v215 = 2;
              }
              else if (v213 >> 28)
              {
                v490 = *(_QWORD *)(v120 & 0xFFFFFFFF8);
                v504 = a3;
                v518 = v81;
                v212 = WTF::fastMalloc((WTF *)0x10);
                a3 = v504;
                v81 = v518;
                *(_QWORD *)v212 = v490;
                *(_DWORD *)(v212 + 8) = v213;
                v215 = 1;
              }
              else
              {
                v215 = *(_QWORD *)(v120 & 0xFFFFFFFF8);
                v212 = v213 << 36;
              }
              v120 = v212 | v215;
            }
            *((_QWORD *)&v543 + 1) = v120;
            LOWORD(v544) = *(_WORD *)(v80 + 16);
            v547 = a3;
            v546 = 27;
            v122 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>(v81 + 1032, &v546, (uint64_t)&v543, (uint64_t *)&v547, a5, a6, a7, a8);
            if ((BYTE8(v543) & 1) != 0 && (*((_QWORD *)&v543 + 1) & 0xFFFFFFFF8) != 0)
              WTF::fastFree(*((_QWORD *)&v543 + 1) & 0xFFFFFFFF8, v121, a3, a4, a5, a6, a7, a8);
            if ((v543 & 1) != 0 && (v543 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v543 & 0xFFFFFFFF8, v121, a3, a4, a5, a6, a7, a8);
            v545 = v122;
            v123 = (_QWORD *)(v117 + 24);
            v124 = *(unsigned int *)(v117 + 36);
            if ((_DWORD)v124 == *(_DWORD *)(v117 + 32))
            {
              v158 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v123, v124 + 1, (unint64_t)&v545);
              v124 = *(unsigned int *)(v117 + 36);
              *(_QWORD *)(*(_QWORD *)(v117 + 24) + 8 * v124) = *v158;
              v122 = v545;
            }
            else
            {
              *(_QWORD *)(*v123 + 8 * v124) = v122;
            }
            v125 = v116 >> 32;
            goto LABEL_168;
          case 0x1D:
            v131 = *(uint64_t **)(v80 + 72);
            v132 = v131;
            do
            {
              v97 = (uint64_t)v132;
              v132 = (uint64_t *)*v132;
            }
            while (v132);
            if ((uint64_t *)v97 != v131)
              *v131 = v97;
            v133 = *(_QWORD *)(v97 + 24);
            if (HIDWORD(v133) == 1)
            {
              v99 = ~(_DWORD)v133;
              v100 = *((_QWORD *)this + 9);
              v118 = *(_QWORD *)(*(_QWORD *)(v100 + 96) + 8 * (*(unsigned int *)(v100 + 112) + (uint64_t)v99));
              if (!v118)
                goto LABEL_145;
              v134 = *(unsigned __int16 *)(v118 + 18);
              if (v134 <= 0x1D && ((1 << v134) & 0x30008000) != 0)
              {
LABEL_235:
                v118 = *(_QWORD *)(v118 + 24) & 0xFF00FFFFFFFFFFFFLL;
                v134 = *(unsigned __int16 *)(v118 + 18);
              }
LABEL_184:
              if (v134 == 16)
                goto LABEL_227;
              *(_BYTE *)(v97 + 44) = 1;
LABEL_217:
              *(_QWORD *)(v80 + 24) = v118 & 0xFF00FFFFFFFFFFFFLL;
              goto LABEL_123;
            }
            if (HIDWORD(v133))
            {
              if (HIDWORD(v133) != 2)
                goto LABEL_123;
              v202 = *((_QWORD *)this + 9);
              v118 = *(_QWORD *)(*(_QWORD *)(v202 + 96)
                               + 8
                               * (*(unsigned int *)(v202 + 112) + (uint64_t)(int)v133 + *(unsigned int *)(v202 + 116)));
              if (!v118)
              {
                *(_BYTE *)(v97 + 44) = 1;
                v545 = 0;
                v203 = *(_QWORD *)v80;
                if ((*(_QWORD *)v80 & 1) != 0)
                {
                  v499 = v202;
                  v513 = v81;
                  v485 = *(_QWORD *)(v203 & 0xFFFFFFFF8);
                  if ((v203 & 2) != 0
                    || ((v252 = *(unsigned int *)((v203 & 0xFFFFFFFF8) + 8), (_DWORD)v252 != 0x3FFFFFFF)
                      ? (v253 = (_DWORD)v252 == -1)
                      : (v253 = 1),
                        v253))
                  {
                    v254 = 2;
                  }
                  else if (v252 >> 28)
                  {
                    v261 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v261 = v485;
                    *(_DWORD *)(v261 + 8) = v252;
                    v254 = 1;
                    v485 = v261;
                  }
                  else
                  {
                    v254 = *(_QWORD *)(v203 & 0xFFFFFFFF8);
                    v485 = v252 << 36;
                  }
                  v202 = v499;
                  v203 = v485 | v254;
                  v81 = v513;
                }
                *(_QWORD *)&v543 = v203;
                v204 = *(_QWORD *)(v80 + 8);
                if ((v204 & 1) != 0)
                {
                  v500 = v202;
                  v514 = v81;
                  v486 = *(_QWORD *)(v204 & 0xFFFFFFFF8);
                  if ((v204 & 2) != 0
                    || (v255 = *(unsigned int *)((v204 & 0xFFFFFFFF8) + 8), (_DWORD)v255 == 0x3FFFFFFF)
                    || (_DWORD)v255 == -1)
                  {
                    v256 = 2;
                  }
                  else if (v255 >> 28)
                  {
                    v262 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v262 = v486;
                    *(_DWORD *)(v262 + 8) = v255;
                    v256 = 1;
                    v486 = v262;
                  }
                  else
                  {
                    v256 = *(_QWORD *)(v204 & 0xFFFFFFFF8);
                    v486 = v255 << 36;
                  }
                  v202 = v500;
                  v204 = v486 | v256;
                  v81 = v514;
                }
                *((_QWORD *)&v543 + 1) = v204;
                LOWORD(v544) = *(_WORD *)(v80 + 16);
                v547 = v97;
                v546 = 27;
                v184 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>(v81 + 1032, &v546, (uint64_t)&v543, (uint64_t *)&v547, a5, a6, a7, a8);
                if ((BYTE8(v543) & 1) != 0 && (*((_QWORD *)&v543 + 1) & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(*((_QWORD *)&v543 + 1) & 0xFFFFFFFF8, v205, a3, a4, a5, a6, a7, a8);
                if ((v543 & 1) != 0 && (v543 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v543 & 0xFFFFFFFF8, v205, a3, a4, a5, a6, a7, a8);
                v545 = v184;
                v206 = *(unsigned int *)(v202 + 36);
                if ((_DWORD)v206 == *(_DWORD *)(v202 + 32))
                {
                  WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Node *>(v202 + 24, (unint64_t)&v545);
                  v184 = v545;
                }
                else
                {
                  *(_QWORD *)(*(_QWORD *)(v202 + 24) + 8 * v206) = v184;
                  *(_DWORD *)(v202 + 36) = v206 + 1;
                }
                v207 = v202;
                v188 = (int)v133;
                *(_QWORD *)&v543 = v207;
LABEL_309:
                *((_QWORD *)&v543 + 1) = v188;
                v544 = v184;
                v189 = *((_DWORD *)this + 1567);
                if (v189 == *((_DWORD *)this + 1566))
                {
                  WTF::Vector<JSC::DFG::CPSRethreadingPhase::PhiStackEntry,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::CPSRethreadingPhase::PhiStackEntry>((uint64_t)this + 6256, (unint64_t)&v543, a3, a4, a5, a6, a7, a8);
                }
                else
                {
                  v190 = *((_QWORD *)this + 782) + 24 * v189;
                  v191 = v543;
                  *(_QWORD *)(v190 + 16) = v544;
                  *(_OWORD *)v190 = v191;
                  ++*((_DWORD *)this + 1567);
                }
                *(_QWORD *)(v80 + 24) = v184 & 0xFF00FFFFFFFFFFFFLL;
                *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 72)
                          + 8
                          * (v188
                           + *(unsigned int *)(*((_QWORD *)this + 9) + 88)
                           + *(unsigned int *)(*((_QWORD *)this + 9) + 92))) = v184;
                v88 = *((_QWORD *)this + 9);
                v94 = *(unsigned int *)(v88 + 116);
                v93 = v188 + *(unsigned int *)(v88 + 112);
LABEL_138:
                v79 = v93 + v94;
                goto LABEL_117;
              }
              v224 = *(unsigned __int16 *)(v118 + 18);
              if (v224 <= 0x1D && ((1 << v224) & 0x30008000) != 0)
              {
                v118 = *(_QWORD *)(v118 + 24) & 0xFF00FFFFFFFFFFFFLL;
                v224 = *(unsigned __int16 *)(v118 + 18);
              }
              if (v224 == 16)
              {
LABEL_227:
                JSC::DFG::Node::remove((JSC::DFG::Node *)v80, (JSC::DFG::Graph *)v81, (unint64_t *)a3, a4, a5, a6, a7, a8);
                goto LABEL_123;
              }
              *(_BYTE *)(v97 + 44) = 1;
              goto LABEL_217;
            }
            v160 = (v133 << 32) - 0x500000000;
            v161 = *((_QWORD *)this + 9);
            v118 = *(_QWORD *)(*(_QWORD *)(v161 + 96) + (v160 >> 29));
            if (v118)
            {
              v134 = *(unsigned __int16 *)(v118 + 18);
              if (v134 == 15 || v134 - 28 <= 1)
                goto LABEL_235;
              goto LABEL_184;
            }
            *(_BYTE *)(v97 + 44) = 1;
            v545 = 0;
            v174 = *(_QWORD *)v80;
            if ((*(_QWORD *)v80 & 1) != 0)
            {
              v495 = *(_QWORD *)(v174 & 0xFFFFFFFF8);
              v509 = v81;
              if ((v174 & 2) != 0
                || ((v241 = *(unsigned int *)((v174 & 0xFFFFFFFF8) + 8), v481 = v241, (_DWORD)v241 != 0x3FFFFFFF)
                  ? (v242 = (_DWORD)v241 == -1)
                  : (v242 = 1),
                    v242))
              {
                v243 = 2;
              }
              else if (v241 >> 28)
              {
                v257 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v257 = v495;
                *(_DWORD *)(v257 + 8) = v481;
                v243 = 1;
                v495 = v257;
              }
              else
              {
                v243 = *(_QWORD *)(v174 & 0xFFFFFFFF8);
                v495 = v241 << 36;
              }
              v81 = v509;
              v174 = v495 | v243;
            }
            *(_QWORD *)&v543 = v174;
            v175 = *(_QWORD *)(v80 + 8);
            if ((v175 & 1) != 0)
            {
              v496 = *(_QWORD *)(v175 & 0xFFFFFFFF8);
              v510 = v81;
              if ((v175 & 2) != 0
                || ((v244 = *(unsigned int *)((v175 & 0xFFFFFFFF8) + 8), v482 = v244, (_DWORD)v244 != 0x3FFFFFFF)
                  ? (v245 = (_DWORD)v244 == -1)
                  : (v245 = 1),
                    v245))
              {
                v246 = 2;
              }
              else if (v244 >> 28)
              {
                v258 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v258 = v496;
                *(_DWORD *)(v258 + 8) = v482;
                v246 = 1;
                v496 = v258;
              }
              else
              {
                v246 = *(_QWORD *)(v175 & 0xFFFFFFFF8);
                v496 = v244 << 36;
              }
              v81 = v510;
              v175 = v496 | v246;
            }
            *((_QWORD *)&v543 + 1) = v175;
            LOWORD(v544) = *(_WORD *)(v80 + 16);
            v547 = v97;
            v546 = 27;
            v122 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>(v81 + 1032, &v546, (uint64_t)&v543, (uint64_t *)&v547, a5, a6, a7, a8);
            if ((BYTE8(v543) & 1) != 0 && (*((_QWORD *)&v543 + 1) & 0xFFFFFFFF8) != 0)
              WTF::fastFree(*((_QWORD *)&v543 + 1) & 0xFFFFFFFF8, v176, a3, a4, a5, a6, a7, a8);
            if ((v543 & 1) != 0 && (v543 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v543 & 0xFFFFFFFF8, v176, a3, a4, a5, a6, a7, a8);
            v545 = v122;
            v177 = (_QWORD *)(v161 + 24);
            v126 = *(unsigned int *)(v161 + 36);
            if ((_DWORD)v126 == *(_DWORD *)(v161 + 32))
            {
              v226 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v177, v126 + 1, (unint64_t)&v545);
              v126 = *(unsigned int *)(v161 + 36);
              *(_QWORD *)(*(_QWORD *)(v161 + 24) + 8 * v126) = *v226;
              v122 = v545;
            }
            else
            {
              *(_QWORD *)(*v177 + 8 * v126) = v122;
            }
            v125 = v160 >> 32;
            *(_DWORD *)(v161 + 36) = v126 + 1;
            *(_QWORD *)&v543 = v161;
            *((_QWORD *)&v543 + 1) = v125;
            v544 = v122;
            LODWORD(v126) = *((_DWORD *)this + 23);
            if ((_DWORD)v126 != *((_DWORD *)this + 22))
            {
              v127 = *((_QWORD *)this + 10);
LABEL_170:
              v128 = v127 + 24 * v126;
              v129 = v543;
              v130 = v544;
              goto LABEL_171;
            }
            WTF::Vector<JSC::DFG::CPSRethreadingPhase::PhiStackEntry,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::CPSRethreadingPhase::PhiStackEntry>((uint64_t)v528, (unint64_t)&v543, a3, a4, a5, a6, a7, a8);
            goto LABEL_172;
          case 0x26:
          case 0x27:
            v88 = *((_QWORD *)this + 9);
            v89 = *(_QWORD **)(v80 + 72);
            v152 = v89;
            do
            {
              v91 = v152;
              v152 = (_QWORD *)*v152;
            }
            while (v152);
LABEL_133:
            if (v91 != v89)
              *v89 = v91;
            v92 = v91[3];
            if (HIDWORD(v92) == 2)
            {
              v79 = *(unsigned int *)(v88 + 112) + (uint64_t)(int)v92 + *(unsigned int *)(v88 + 116);
              goto LABEL_117;
            }
            if ((v92 & 0x80000000) == 0)
            {
              v79 = (uint64_t)(((unint64_t)v92 << 32) - 0x500000000) >> 32;
              goto LABEL_117;
            }
            v93 = v91[3] ^ 0xFFFFFFFFLL;
            v94 = *(unsigned int *)(v88 + 112);
            goto LABEL_138;
          default:
            goto LABEL_123;
        }
      }
    }
LABEL_239:
    v163 = *(uint64_t **)(v8 + 440);
    if (v163)
    {
      v164 = *((_DWORD *)v163 - 1);
      v165 = &v163[11 * v164];
      if (*((_DWORD *)v163 - 3))
      {
        v166 = v163;
        if (v164)
        {
          v167 = 88 * v164;
          v166 = v163;
          while ((unint64_t)(*v166 + 1) <= 1)
          {
            v166 += 11;
            v167 -= 88;
            if (!v167)
            {
              v166 = v165;
              goto LABEL_246;
            }
          }
        }
        goto LABEL_246;
      }
      v166 = &v163[11 * v164];
    }
    else
    {
      v166 = 0;
      v164 = 0;
    }
    v165 = &v163[11 * v164];
LABEL_246:
    if (v163)
      v163 += 11 * *((unsigned int *)v163 - 1);
    while (v166 != v163)
    {
      v168 = *((unsigned int *)v166 + 5);
      if ((_DWORD)v168)
      {
        v169 = *v166;
        v170 = v168 - 1;
        do
          *(_QWORD *)(*(_QWORD *)(v169 + 72) + 8 * v170) = *(_QWORD *)(v166[1] + 8
                                                                                               * v170);
        while ((unint64_t)v170--);
      }
      v172 = v166 + 11;
      v166 = v165;
      if (v172 != v165)
      {
        v166 = v172;
        while ((unint64_t)(*v166 + 1) <= 1)
        {
          v166 += 11;
          if (v166 == v165)
          {
            v166 = v165;
            break;
          }
        }
      }
    }
    *((_QWORD *)this + 9) = 0;
    v173 = *((_DWORD *)this + 795);
    if (v173)
    {
      v538 = (_QWORD *)((char *)this + 3168);
      while (1)
      {
        v263 = *((_QWORD *)this + 396) + 24 * v173;
        v264 = *(_QWORD *)(v263 - 24);
        v265 = *(_QWORD *)(v263 - 16);
        v266 = *(_QWORD *)(v263 - 8);
        *((_DWORD *)this + 795) = --v173;
        v267 = *(uint64_t **)(v266 + 72);
        v268 = v267;
        do
        {
          v269 = (uint64_t)v268;
          v268 = (uint64_t *)*v268;
        }
        while (v268);
        if ((uint64_t *)v269 != v267)
          break;
        v270 = *(unsigned int *)(v264 + 52);
        if ((_DWORD)v270)
          goto LABEL_553;
LABEL_548:
        if (!v173)
          goto LABEL_589;
      }
      *v267 = v269;
      v270 = *(unsigned int *)(v264 + 52);
      if (!(_DWORD)v270)
        goto LABEL_548;
LABEL_553:
      v271 = (unint64_t *)(v266 + 24);
      v272 = v270 - 1;
      while (1)
      {
        while (1)
        {
          if (v272 >= *(unsigned int *)(v264 + 52))
          {
            __break(0xC471u);
            JUMPOUT(0x198353018);
          }
          v273 = *(_QWORD *)(*(_QWORD *)(v264 + 40) + 8 * v272);
          v274 = *(_QWORD *)(*(_QWORD *)(v273 + 96) + 8 * (v265 + *(unsigned int *)(v273 + 112)));
          if (v274)
            break;
          v545 = 0;
          v278 = *((_QWORD *)this + 4);
          v279 = *(_QWORD *)v266;
          if ((*(_QWORD *)v266 & 1) != 0)
          {
            v306 = *(_QWORD *)(v279 & 0xFFFFFFFF8);
            if ((v279 & 2) != 0
              || ((v307 = *(unsigned int *)((v279 & 0xFFFFFFFF8) + 8), (_DWORD)v307 != 0x3FFFFFFF)
                ? (v308 = (_DWORD)v307 == -1)
                : (v308 = 1),
                  v308))
            {
              v309 = 2;
            }
            else if (v307 >> 28)
            {
              v529 = *(_QWORD *)(v279 & 0xFFFFFFFF8);
              v306 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v306 = v529;
              *(_DWORD *)(v306 + 8) = v307;
              v309 = 1;
            }
            else
            {
              v309 = *(_QWORD *)(v279 & 0xFFFFFFFF8);
              v306 = v307 << 36;
            }
            v279 = v306 | v309;
          }
          *(_QWORD *)&v543 = v279;
          v280 = *(_QWORD *)(v266 + 8);
          if ((v280 & 1) != 0)
          {
            v310 = *(_QWORD *)(v280 & 0xFFFFFFFF8);
            if ((v280 & 2) != 0
              || ((v311 = *(unsigned int *)((v280 & 0xFFFFFFFF8) + 8), (_DWORD)v311 != 0x3FFFFFFF)
                ? (v312 = (_DWORD)v311 == -1)
                : (v312 = 1),
                  v312))
            {
              v313 = 2;
            }
            else if (v311 >> 28)
            {
              v530 = *(_QWORD *)(v280 & 0xFFFFFFFF8);
              v310 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v310 = v530;
              *(_DWORD *)(v310 + 8) = v311;
              v313 = 1;
            }
            else
            {
              v313 = *(_QWORD *)(v280 & 0xFFFFFFFF8);
              v310 = v311 << 36;
            }
            v280 = v310 | v313;
          }
          *((_QWORD *)&v543 + 1) = v280;
          LOWORD(v544) = *(_WORD *)(v266 + 16);
          v547 = v269;
          v546 = 27;
          v284 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>(v278 + 1032, &v546, (uint64_t)&v543, (uint64_t *)&v547, a5, a6, a7, a8);
          if ((BYTE8(v543) & 1) != 0 && (*((_QWORD *)&v543 + 1) & 0xFFFFFFFF8) != 0)
            WTF::fastFree(*((_QWORD *)&v543 + 1) & 0xFFFFFFFF8, v281, v282, v283, a5, a6, a7, a8);
          if ((v543 & 1) != 0 && (v543 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v543 & 0xFFFFFFFF8, v281, v282, v283, a5, a6, a7, a8);
          v545 = v284;
          v285 = (_QWORD *)(v273 + 24);
          v286 = *(unsigned int *)(v273 + 36);
          if ((_DWORD)v286 == *(_DWORD *)(v273 + 32))
          {
            v291 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v285, v286 + 1, (unint64_t)&v545);
            v286 = *(unsigned int *)(v273 + 36);
            *(_QWORD *)(*(_QWORD *)(v273 + 24) + 8 * v286) = *v291;
          }
          else
          {
            *(_QWORD *)(*v285 + 8 * v286) = v284;
          }
          *(_DWORD *)(v273 + 36) = v286 + 1;
          v274 = v545;
          *(_QWORD *)&v543 = v273;
          *((_QWORD *)&v543 + 1) = v265;
          v544 = v545;
          v287 = *((unsigned int *)this + 795);
          if ((_DWORD)v287 == *((_DWORD *)this + 794))
          {
            v305 = WTF::Vector<JSC::DFG::CPSRethreadingPhase::PhiStackEntry,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v538, (void *)(v287 + 1), (unint64_t)&v543, v283, a5, a6, a7, a8);
            v288 = *((_QWORD *)this + 396) + 24 * *((unsigned int *)this + 795);
            v289 = *(_OWORD *)v305;
            v290 = *(_QWORD *)(v305 + 16);
          }
          else
          {
            v288 = *v538 + 24 * v287;
            v289 = v543;
            v290 = v544;
          }
          *(_QWORD *)(v288 + 16) = v290;
          *(_OWORD *)v288 = v289;
          ++*((_DWORD *)this + 795);
          *(_QWORD *)(*(_QWORD *)(v273 + 96) + 8 * (v265 + *(unsigned int *)(v273 + 112))) = v274;
          *(_QWORD *)(*(_QWORD *)(v273 + 72) + 8 * (v265 + *(unsigned int *)(v273 + 88))) = v274;
          if ((*v271 & 0xFF00FFFFFFFFFFFFLL) == 0)
            goto LABEL_562;
LABEL_574:
          if ((*(_QWORD *)(v266 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            if ((*(_QWORD *)(v266 + 40) & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v545 = 0;
              v292 = *((_QWORD *)this + 4);
              v293 = *(_QWORD *)v266;
              if ((*(_QWORD *)v266 & 1) != 0)
              {
                v314 = *(_QWORD *)(v293 & 0xFFFFFFFF8);
                if ((v293 & 2) != 0
                  || ((v315 = *(unsigned int *)((v293 & 0xFFFFFFFF8) + 8), (_DWORD)v315 != 0x3FFFFFFF)
                    ? (v316 = (_DWORD)v315 == -1)
                    : (v316 = 1),
                      v316))
                {
                  v317 = 2;
                }
                else if (v315 >> 28)
                {
                  v531 = *(_QWORD *)(v293 & 0xFFFFFFFF8);
                  v314 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v314 = v531;
                  *(_DWORD *)(v314 + 8) = v315;
                  v317 = 1;
                }
                else
                {
                  v317 = *(_QWORD *)(v293 & 0xFFFFFFFF8);
                  v314 = v315 << 36;
                }
                v293 = v314 | v317;
              }
              *(_QWORD *)&v543 = v293;
              v294 = *(_QWORD *)(v266 + 8);
              if ((v294 & 1) != 0)
              {
                v318 = *(_QWORD *)(v294 & 0xFFFFFFFF8);
                if ((v294 & 2) != 0
                  || (v319 = *(unsigned int *)((v294 & 0xFFFFFFFF8) + 8), (_DWORD)v319 == 0x3FFFFFFF)
                  || (_DWORD)v319 == -1)
                {
                  v320 = 2;
                }
                else if (v319 >> 28)
                {
                  v532 = *(_QWORD *)(v294 & 0xFFFFFFFF8);
                  v318 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v318 = v532;
                  *(_DWORD *)(v318 + 8) = v319;
                  v320 = 1;
                }
                else
                {
                  v320 = *(_QWORD *)(v294 & 0xFFFFFFFF8);
                  v318 = v319 << 36;
                }
                v294 = v318 | v320;
              }
              *((_QWORD *)&v543 + 1) = v294;
              LOWORD(v544) = *(_WORD *)(v266 + 16);
              v547 = v269;
              v546 = 27;
              v298 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>(v292 + 1032, &v546, (uint64_t)&v543, (uint64_t *)&v547, a5, a6, a7, a8);
              if ((BYTE8(v543) & 1) != 0 && (*((_QWORD *)&v543 + 1) & 0xFFFFFFFF8) != 0)
                WTF::fastFree(*((_QWORD *)&v543 + 1) & 0xFFFFFFFF8, v295, v296, v297, a5, a6, a7, a8);
              if ((v543 & 1) != 0 && (v543 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v543 & 0xFFFFFFFF8, v295, v296, v297, a5, a6, a7, a8);
              v299 = (_QWORD *)(v264 + 24);
              v545 = v298;
              v300 = *(unsigned int *)(v264 + 36);
              if ((_DWORD)v300 == *(_DWORD *)(v264 + 32))
              {
                v304 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v299, v300 + 1, (unint64_t)&v545);
                v300 = *(unsigned int *)(v264 + 36);
                *(_QWORD *)(*(_QWORD *)(v264 + 24) + 8 * v300) = *v304;
              }
              else
              {
                *(_QWORD *)(*v299 + 8 * v300) = v298;
              }
              *(_DWORD *)(v264 + 36) = v300 + 1;
              v301 = v545;
              v302 = *(_OWORD *)v271;
              *(_QWORD *)(v545 + 40) = *(_QWORD *)(v266 + 40);
              *(_OWORD *)(v301 + 24) = v302;
              *(_QWORD *)(v266 + 24) = v301 & 0xFF00FFFFFFFFFFFFLL;
              *(_QWORD *)(v266 + 32) = v274 & 0xFF00FFFFFFFFFFFFLL;
              *(_QWORD *)(v266 + 40) = 0;
            }
            else
            {
              *(_QWORD *)(v266 + 40) = v274 & 0xFF00FFFFFFFFFFFFLL;
            }
            goto LABEL_563;
          }
          *(_QWORD *)(v266 + 32) = v274 & 0xFF00FFFFFFFFFFFFLL;
          if (--v272 == -1)
          {
LABEL_547:
            v173 = *((_DWORD *)this + 795);
            goto LABEL_548;
          }
        }
        v275 = *(unsigned __int16 *)(v274 + 18);
        v143 = v275 > 0x1D;
        v276 = (1 << v275) & 0x30008000;
        if (!v143 && v276 != 0)
          v274 = *(_QWORD *)(v274 + 24) & 0xFF00FFFFFFFFFFFFLL;
        if ((*v271 & 0xFF00FFFFFFFFFFFFLL) != 0)
          goto LABEL_574;
LABEL_562:
        *v271 = v274 & 0xFF00FFFFFFFFFFFFLL;
LABEL_563:
        if (--v272 == -1)
          goto LABEL_547;
      }
    }
LABEL_589:
    *((_QWORD *)this + 9) = 0;
    v303 = *((_DWORD *)this + 23);
    if (v303)
    {
      v539 = (_QWORD *)((char *)this + 80);
      while (1)
      {
        v321 = *((_QWORD *)this + 10) + 24 * v303;
        v322 = *(_QWORD *)(v321 - 24);
        v323 = *(_QWORD *)(v321 - 16);
        v324 = *(_QWORD *)(v321 - 8);
        *((_DWORD *)this + 23) = --v303;
        v325 = *(uint64_t **)(v324 + 72);
        v326 = v325;
        do
        {
          v327 = (uint64_t)v326;
          v326 = (uint64_t *)*v326;
        }
        while (v326);
        if ((uint64_t *)v327 != v325)
          break;
        v328 = *(unsigned int *)(v322 + 52);
        if ((_DWORD)v328)
          goto LABEL_649;
LABEL_644:
        if (!v303)
          goto LABEL_685;
      }
      *v325 = v327;
      v328 = *(unsigned int *)(v322 + 52);
      if (!(_DWORD)v328)
        goto LABEL_644;
LABEL_649:
      v329 = (unint64_t *)(v324 + 24);
      v330 = v328 - 1;
      while (1)
      {
        while (1)
        {
          if (v330 >= *(unsigned int *)(v322 + 52))
          {
            __break(0xC471u);
            JUMPOUT(0x19835396CLL);
          }
          v331 = *(_QWORD *)(*(_QWORD *)(v322 + 40) + 8 * v330);
          v332 = *(_QWORD *)(*(_QWORD *)(v331 + 96) + 8 * v323);
          if (v332)
          {
            v333 = *(unsigned __int16 *)(v332 + 18);
            v143 = v333 > 0x1D;
            v334 = (1 << v333) & 0x30008000;
            if (!v143 && v334 != 0)
              v332 = *(_QWORD *)(v332 + 24) & 0xFF00FFFFFFFFFFFFLL;
          }
          else
          {
            v545 = 0;
            v336 = *((_QWORD *)this + 4);
            v337 = *(_QWORD *)v324;
            if ((*(_QWORD *)v324 & 1) != 0)
            {
              v409 = *(_QWORD *)(v337 & 0xFFFFFFFF8);
              if ((v337 & 2) != 0
                || ((v410 = *(unsigned int *)((v337 & 0xFFFFFFFF8) + 8), (_DWORD)v410 != 0x3FFFFFFF)
                  ? (v411 = (_DWORD)v410 == -1)
                  : (v411 = 1),
                    v411))
              {
                v412 = 2;
              }
              else if (v410 >> 28)
              {
                v535 = *(_QWORD *)(v337 & 0xFFFFFFFF8);
                v525 = *(_DWORD *)((v337 & 0xFFFFFFFF8) + 8);
                v409 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v409 = v535;
                *(_DWORD *)(v409 + 8) = v525;
                v412 = 1;
              }
              else
              {
                v412 = *(_QWORD *)(v337 & 0xFFFFFFFF8);
                v409 = v410 << 36;
              }
              v337 = v409 | v412;
            }
            *(_QWORD *)&v543 = v337;
            v338 = *(_QWORD *)(v324 + 8);
            if ((v338 & 1) != 0)
            {
              v413 = *(_QWORD *)(v338 & 0xFFFFFFFF8);
              if ((v338 & 2) != 0
                || ((v414 = *(unsigned int *)((v338 & 0xFFFFFFFF8) + 8), (_DWORD)v414 != 0x3FFFFFFF)
                  ? (v415 = (_DWORD)v414 == -1)
                  : (v415 = 1),
                    v415))
              {
                v416 = 2;
              }
              else if (v414 >> 28)
              {
                v536 = *(_QWORD *)(v338 & 0xFFFFFFFF8);
                v526 = *(_DWORD *)((v338 & 0xFFFFFFFF8) + 8);
                v413 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v413 = v536;
                *(_DWORD *)(v413 + 8) = v526;
                v416 = 1;
              }
              else
              {
                v416 = *(_QWORD *)(v338 & 0xFFFFFFFF8);
                v413 = v414 << 36;
              }
              v338 = v413 | v416;
            }
            *((_QWORD *)&v543 + 1) = v338;
            LOWORD(v544) = *(_WORD *)(v324 + 16);
            v547 = v327;
            v546 = 27;
            v342 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>(v336 + 1032, &v546, (uint64_t)&v543, (uint64_t *)&v547, a5, a6, a7, a8);
            if ((BYTE8(v543) & 1) != 0 && (*((_QWORD *)&v543 + 1) & 0xFFFFFFFF8) != 0)
              WTF::fastFree(*((_QWORD *)&v543 + 1) & 0xFFFFFFFF8, v339, v340, v341, a5, a6, a7, a8);
            if ((v543 & 1) != 0 && (v543 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v543 & 0xFFFFFFFF8, v339, v340, v341, a5, a6, a7, a8);
            v545 = v342;
            v343 = (_QWORD *)(v331 + 24);
            v344 = *(unsigned int *)(v331 + 36);
            if ((_DWORD)v344 == *(_DWORD *)(v331 + 32))
            {
              v350 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v343, v344 + 1, (unint64_t)&v545);
              v344 = *(unsigned int *)(v331 + 36);
              *(_QWORD *)(*(_QWORD *)(v331 + 24) + 8 * v344) = *v350;
            }
            else
            {
              *(_QWORD *)(*v343 + 8 * v344) = v342;
            }
            *(_DWORD *)(v331 + 36) = v344 + 1;
            v332 = v545;
            *(_QWORD *)&v543 = v331;
            *((_QWORD *)&v543 + 1) = v323;
            v544 = v545;
            v345 = *((unsigned int *)this + 23);
            if ((_DWORD)v345 == *((_DWORD *)this + 22))
            {
              v391 = WTF::Vector<JSC::DFG::CPSRethreadingPhase::PhiStackEntry,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v539, (void *)(v345 + 1), (unint64_t)&v543, v341, a5, a6, a7, a8);
              v346 = *((_QWORD *)this + 10) + 24 * *((unsigned int *)this + 23);
              v347 = *(_OWORD *)v391;
              v348 = *(_QWORD *)(v391 + 16);
            }
            else
            {
              v346 = *v539 + 24 * v345;
              v347 = v543;
              v348 = v544;
            }
            *(_QWORD *)(v346 + 16) = v348;
            *(_OWORD *)v346 = v347;
            ++*((_DWORD *)this + 23);
            v349 = 8 * v323;
            *(_QWORD *)(*(_QWORD *)(v331 + 96) + v349) = v332;
            *(_QWORD *)(*(_QWORD *)(v331 + 72) + v349) = v332;
          }
          if ((*v329 & 0xFF00FFFFFFFFFFFFLL) != 0)
            break;
          *v329 = v332 & 0xFF00FFFFFFFFFFFFLL;
LABEL_668:
          if (--v330 == -1)
            goto LABEL_643;
        }
        if ((*(_QWORD *)(v324 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          if ((*(_QWORD *)(v324 + 40) & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v545 = 0;
            v351 = *((_QWORD *)this + 4);
            v352 = *(_QWORD *)v324;
            if ((*(_QWORD *)v324 & 1) != 0)
            {
              v417 = *(_QWORD *)(v352 & 0xFFFFFFFF8);
              if ((v352 & 2) != 0
                || ((v418 = *(unsigned int *)((v352 & 0xFFFFFFFF8) + 8), (_DWORD)v418 != 0x3FFFFFFF)
                  ? (v419 = (_DWORD)v418 == -1)
                  : (v419 = 1),
                    v419))
              {
                v420 = 2;
              }
              else
              {
                v533 = *(_QWORD *)(v352 & 0xFFFFFFFF8);
                v523 = *(_DWORD *)((v352 & 0xFFFFFFFF8) + 8);
                if (v418 >> 28)
                {
                  v417 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v417 = v533;
                  *(_DWORD *)(v417 + 8) = v523;
                  v420 = 1;
                }
                else
                {
                  v420 = *(_QWORD *)(v352 & 0xFFFFFFFF8);
                  v417 = v418 << 36;
                }
              }
              v352 = v417 | v420;
            }
            *(_QWORD *)&v543 = v352;
            v353 = *(_QWORD *)(v324 + 8);
            if ((v353 & 1) != 0)
            {
              v421 = *(_QWORD *)(v353 & 0xFFFFFFFF8);
              if ((v353 & 2) != 0
                || (v422 = *(unsigned int *)((v353 & 0xFFFFFFFF8) + 8), (_DWORD)v422 == 0x3FFFFFFF)
                || (_DWORD)v422 == -1)
              {
                v423 = 2;
              }
              else
              {
                v534 = *(_QWORD *)(v353 & 0xFFFFFFFF8);
                v524 = *(_DWORD *)((v353 & 0xFFFFFFFF8) + 8);
                if (v422 >> 28)
                {
                  v421 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v421 = v534;
                  *(_DWORD *)(v421 + 8) = v524;
                  v423 = 1;
                }
                else
                {
                  v423 = *(_QWORD *)(v353 & 0xFFFFFFFF8);
                  v421 = v422 << 36;
                }
              }
              v353 = v421 | v423;
            }
            *((_QWORD *)&v543 + 1) = v353;
            LOWORD(v544) = *(_WORD *)(v324 + 16);
            v547 = v327;
            v546 = 27;
            v357 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>(v351 + 1032, &v546, (uint64_t)&v543, (uint64_t *)&v547, a5, a6, a7, a8);
            if ((BYTE8(v543) & 1) != 0 && (*((_QWORD *)&v543 + 1) & 0xFFFFFFFF8) != 0)
              WTF::fastFree(*((_QWORD *)&v543 + 1) & 0xFFFFFFFF8, v354, v355, v356, a5, a6, a7, a8);
            if ((v543 & 1) != 0 && (v543 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v543 & 0xFFFFFFFF8, v354, v355, v356, a5, a6, a7, a8);
            v358 = (_QWORD *)(v322 + 24);
            v545 = v357;
            v359 = *(unsigned int *)(v322 + 36);
            if ((_DWORD)v359 == *(_DWORD *)(v322 + 32))
            {
              v390 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v358, v359 + 1, (unint64_t)&v545);
              v359 = *(unsigned int *)(v322 + 36);
              *(_QWORD *)(*(_QWORD *)(v322 + 24) + 8 * v359) = *v390;
            }
            else
            {
              *(_QWORD *)(*v358 + 8 * v359) = v357;
            }
            *(_DWORD *)(v322 + 36) = v359 + 1;
            v360 = v545;
            v361 = *(_OWORD *)v329;
            *(_QWORD *)(v545 + 40) = *(_QWORD *)(v324 + 40);
            *(_OWORD *)(v360 + 24) = v361;
            *(_QWORD *)(v324 + 24) = v360 & 0xFF00FFFFFFFFFFFFLL;
            *(_QWORD *)(v324 + 32) = v332 & 0xFF00FFFFFFFFFFFFLL;
            *(_QWORD *)(v324 + 40) = 0;
          }
          else
          {
            *(_QWORD *)(v324 + 40) = v332 & 0xFF00FFFFFFFFFFFFLL;
          }
          goto LABEL_668;
        }
        *(_QWORD *)(v324 + 32) = v332 & 0xFF00FFFFFFFFFFFFLL;
        if (--v330 == -1)
        {
LABEL_643:
          v303 = *((_DWORD *)this + 23);
          goto LABEL_644;
        }
      }
    }
LABEL_685:
    *((_QWORD *)this + 9) = 0;
    v362 = *((_DWORD *)this + 1567);
    if (v362)
    {
      v393 = (char *)this + 6256;
      do
      {
        v394 = *((_QWORD *)this + 782) + 24 * v362;
        v395 = *(_QWORD *)(v394 - 24);
        v396 = *(_QWORD *)(v394 - 16);
        v397 = *(_QWORD **)(v394 - 8);
        *((_DWORD *)this + 1567) = --v362;
        v398 = (uint64_t *)v397[9];
        v399 = v398;
        do
        {
          v400 = (uint64_t)v399;
          v399 = (uint64_t *)*v399;
        }
        while (v399);
        if ((uint64_t *)v400 != v398)
          *v398 = v400;
        v401 = *(unsigned int *)(v395 + 52);
        if ((_DWORD)v401)
        {
          v402 = (__int128 *)(v397 + 3);
          v403 = v401 - 1;
          do
          {
            if (v403 >= *(unsigned int *)(v395 + 52))
            {
              __break(0xC471u);
              JUMPOUT(0x19835397CLL);
            }
            v404 = *(_QWORD *)(*(_QWORD *)(v395 + 40) + 8 * v403);
            v405 = *(_QWORD *)(*(_QWORD *)(v404 + 96)
                             + 8 * (v396 + *(unsigned int *)(v404 + 112) + *(unsigned int *)(v404 + 116)));
            if (v405)
            {
              v406 = *(unsigned __int16 *)(v405 + 18);
              v143 = v406 > 0x1D;
              v407 = (1 << v406) & 0x30008000;
              if (!v143 && v407 != 0)
                v405 = *(_QWORD *)(v405 + 24) & 0xFF00FFFFFFFFFFFFLL;
            }
            else
            {
              v540 = (uint64_t)v393;
              v545 = 0;
              v424 = *((_QWORD *)this + 4);
              JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)&v543, (const JSC::DFG::NodeOrigin *)v397);
              v547 = v400;
              v546 = 27;
              v429 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>(v424 + 1032, &v546, (uint64_t)&v543, (uint64_t *)&v547, v425, v426, v427, v428);
              JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v543, v430, v431, v432, v433, v434, v435, v436);
              v545 = v429;
              v443 = *(unsigned int *)(v404 + 36);
              if ((_DWORD)v443 == *(_DWORD *)(v404 + 32))
              {
                WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Node *>(v404 + 24, (unint64_t)&v545);
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)(v404 + 24) + 8 * v443) = v429;
                *(_DWORD *)(v404 + 36) = v443 + 1;
              }
              v405 = v545;
              *(_QWORD *)&v543 = v404;
              *((_QWORD *)&v543 + 1) = v396;
              v544 = v545;
              v444 = *((_DWORD *)this + 1567);
              if (v444 == *((_DWORD *)this + 1566))
              {
                WTF::Vector<JSC::DFG::CPSRethreadingPhase::PhiStackEntry,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::CPSRethreadingPhase::PhiStackEntry>(v540, (unint64_t)&v543, v437, v438, v439, v440, v441, v442);
              }
              else
              {
                v445 = *((_QWORD *)this + 782) + 24 * v444;
                v446 = v543;
                *(_QWORD *)(v445 + 16) = v544;
                *(_OWORD *)v445 = v446;
                ++*((_DWORD *)this + 1567);
              }
              *(_QWORD *)(*(_QWORD *)(v404 + 96)
                        + 8 * (v396 + *(unsigned int *)(v404 + 112) + *(unsigned int *)(v404 + 116))) = v405;
              *(_QWORD *)(*(_QWORD *)(v404 + 72)
                        + 8 * (v396 + *(unsigned int *)(v404 + 88) + *(unsigned int *)(v404 + 92))) = v405;
              v393 = (char *)v540;
            }
            if ((*(_QWORD *)v402 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v447 = v393;
              if ((v397[4] & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                if ((v397[5] & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v545 = 0;
                  v541 = *((_QWORD *)this + 4);
                  JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)&v543, (const JSC::DFG::NodeOrigin *)v397);
                  v547 = v400;
                  v546 = 27;
                  v542 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>(v541 + 1032, &v546, (uint64_t)&v543, (uint64_t *)&v547, v448, v449, v450, v451);
                  JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v543, v452, v453, v454, v455, v456, v457, v458);
                  v545 = v542;
                  v459 = *(unsigned int *)(v395 + 36);
                  if ((_DWORD)v459 == *(_DWORD *)(v395 + 32))
                  {
                    WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Node *>(v395 + 24, (unint64_t)&v545);
                  }
                  else
                  {
                    *(_QWORD *)(*(_QWORD *)(v395 + 24) + 8 * v459) = v542;
                    *(_DWORD *)(v395 + 36) = v459 + 1;
                  }
                  v460 = v545;
                  v461 = *v402;
                  *(_QWORD *)(v545 + 40) = v397[5];
                  *(_OWORD *)(v460 + 24) = v461;
                  v397[3] = v460 & 0xFF00FFFFFFFFFFFFLL;
                  v397[4] = v405 & 0xFF00FFFFFFFFFFFFLL;
                  v397[5] = 0;
                }
                else
                {
                  v397[5] = v405 & 0xFF00FFFFFFFFFFFFLL;
                }
              }
              else
              {
                v397[4] = v405 & 0xFF00FFFFFFFFFFFFLL;
              }
              v393 = v447;
            }
            else
            {
              *(_QWORD *)v402 = v405 & 0xFF00FFFFFFFFFFFFLL;
            }
            --v403;
          }
          while (v403 != -1);
          v362 = *((_DWORD *)this + 1567);
        }
      }
      while (v362);
    }
    v363 = *((_QWORD *)this + 4);
    v364 = *(_DWORD *)(v363 + 60);
    if (v364)
    {
      v365 = *(_QWORD *)(v363 + 48);
      v366 = v364;
      do
      {
        v367 = *(_QWORD *)(v365 + 8 * --v366);
        if (v367)
        {
          v368 = *(_DWORD *)(v367 + 36);
          if (v368)
          {
            v369 = *(_QWORD *)(v367 + 24);
            v370 = v368 - 1;
            do
            {
              v371 = *(_QWORD *)(v369 + 8 * v370);
              v372 = *(_DWORD *)(v371 + 56);
              if ((v372 & 0xFFEFFFFF) != v372)
                *(_DWORD *)(v371 + 56) = v372 & 0xFFEFFFFF;
            }
            while ((unint64_t)v370--);
          }
          v374 = *(_DWORD *)(v367 + 220);
          if (v374)
          {
            v375 = *(_QWORD *)(v367 + 208);
            v376 = v374 - 1;
            do
            {
              v377 = *(_QWORD *)(v375 + 8 * v376);
              v378 = *(_DWORD *)(v377 + 56);
              if ((v378 & 0xFFEFFFFF) != v378)
                *(_DWORD *)(v377 + 56) = v378 & 0xFFEFFFFF;
            }
            while ((unint64_t)v376--);
          }
        }
      }
      while (v366);
      do
      {
        --v364;
        v380 = *((_QWORD *)this + 4);
        if (*(_DWORD *)(v380 + 60) <= v364)
        {
          __break(0xC471u);
          JUMPOUT(0x198353974);
        }
        v381 = *(_QWORD *)(*(_QWORD *)(v380 + 48) + 8 * v364);
        if (v381)
        {
          v382 = *(_DWORD *)(v381 + 220);
          if (v382)
          {
            v383 = v382 - 1;
            v384 = 8 * (v382 - 1);
            do
            {
              if (*(_DWORD *)(v381 + 220) <= v383)
              {
                __break(0xC471u);
                JUMPOUT(0x198353924);
              }
              v385 = *(_QWORD *)(*(_QWORD *)(v381 + 208) + v384);
              if (*(_WORD *)(v385 + 18) == 28)
              {
                *(_QWORD *)&v543 = *(_QWORD *)(*(_QWORD *)(v381 + 208) + v384);
                v386 = *(_DWORD *)(v385 + 56);
                if ((v386 | 0x100000) != v386)
                {
                  *(_DWORD *)(v385 + 56) = v386 | 0x100000;
                  v387 = *((unsigned int *)this + 2339);
                  if ((_DWORD)v387 == *((_DWORD *)this + 2338))
                  {
                    v392 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 9344, v387 + 1, (unint64_t)&v543);
                    v387 = *((unsigned int *)this + 2339);
                    *(_QWORD *)(*((_QWORD *)this + 1168) + 8 * v387) = *v392;
                  }
                  else
                  {
                    *(_QWORD *)(*((_QWORD *)this + 1168) + 8 * v387) = v385;
                  }
                  *((_DWORD *)this + 2339) = v387 + 1;
                }
              }
              v384 -= 8;
              --v383;
            }
            while (v383 != -1);
          }
        }
      }
      while (v364);
    }
    LODWORD(v388) = *((_DWORD *)this + 2339);
    if (!(_DWORD)v388)
    {
LABEL_830:
      *(_DWORD *)(*((_QWORD *)this + 4) + 944) = 1;
      v9 = v527;
      return v9 != 1;
    }
    v389 = (_QWORD *)((char *)this + 9344);
    while (1)
    {
      v464 = *((_QWORD *)this + 1168);
      v465 = *(_QWORD *)(v464 + 8 * v388 - 8);
      v388 = (v388 - 1);
      *((_DWORD *)this + 2339) = v388;
      v466 = *(unsigned __int16 *)(v465 + 18);
      if (v466 - 27 >= 2)
      {
        v143 = v466 > 0x27;
        v462 = (1 << v466) & 0xC000010000;
        if (v143 || v462 == 0)
        {
          JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 4), (JSC::DFG::Node *)v465, (const WTF::CString *)"./dfg/DFGCPSRethreadingPhase.cpp", (const char *)0x21D, "void JSC::DFG::CPSRethreadingPhase::computeIsFlushed()", "Invalid node in flush graph");
          __break(0xC471u);
          JUMPOUT(0x198353BBCLL);
        }
        goto LABEL_811;
      }
      v467 = *(_QWORD *)(v465 + 24);
      if ((*(_BYTE *)(v465 + 56) & 0x10) != 0)
      {
        v477 = *(_QWORD *)(v465 + 32);
        if ((int)v477 + (int)v467 > v467)
        {
          v478 = *(_QWORD *)(v465 + 24);
          do
          {
            v479 = *((_QWORD *)this + 4);
            if (v478 >= *(unsigned int *)(v479 + 164))
            {
              __break(0xC471u);
              JUMPOUT(0x198353BC4);
            }
            v480 = *(_QWORD *)(*(_QWORD *)(v479 + 152) + 8 * v478);
            if ((v480 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              JSC::DFG::CPSRethreadingPhase::addFlushedLocalEdge(this, v480);
              v467 = *(_QWORD *)(v465 + 24);
              v477 = *(_QWORD *)(v465 + 32);
            }
            ++v478;
          }
          while (v478 < (v467 + v477));
          LODWORD(v388) = *((_DWORD *)this + 2339);
        }
        goto LABEL_811;
      }
      v468 = v467 & 0xFF00FFFFFFFFFFFFLL;
      if (v468)
      {
        *(_QWORD *)&v543 = v468;
        v469 = *(_DWORD *)(v468 + 56);
        if ((v469 | 0x100000) == v469)
        {
          v470 = *(_QWORD *)(v465 + 32) & 0xFF00FFFFFFFFFFFFLL;
          if (v470)
            goto LABEL_817;
        }
        else
        {
          *(_DWORD *)(v468 + 56) = v469 | 0x100000;
          if ((_DWORD)v388 == *((_DWORD *)this + 2338))
          {
            v474 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 9344, v388 + 1, (unint64_t)&v543);
            v388 = *((unsigned int *)this + 2339);
            *(_QWORD *)(*((_QWORD *)this + 1168) + 8 * v388) = *v474;
          }
          else
          {
            *(_QWORD *)(v464 + 8 * v388) = v468;
          }
          LODWORD(v388) = v388 + 1;
          *((_DWORD *)this + 2339) = v388;
          v470 = *(_QWORD *)(v465 + 32) & 0xFF00FFFFFFFFFFFFLL;
          if (v470)
          {
LABEL_817:
            *(_QWORD *)&v543 = v470;
            v471 = *(_DWORD *)(v470 + 56);
            if ((v471 | 0x100000) != v471)
            {
              *(_DWORD *)(v470 + 56) = v471 | 0x100000;
              if ((_DWORD)v388 == *((_DWORD *)this + 2338))
              {
                v475 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 9344, v388 + 1, (unint64_t)&v543);
                v388 = *((unsigned int *)this + 2339);
                *(_QWORD *)(*((_QWORD *)this + 1168) + 8 * v388) = *v475;
              }
              else
              {
                *(_QWORD *)(*v389 + 8 * v388) = v470;
              }
              LODWORD(v388) = v388 + 1;
              *((_DWORD *)this + 2339) = v388;
            }
            v472 = *(_QWORD *)(v465 + 40) & 0xFF00FFFFFFFFFFFFLL;
            if (v472)
            {
              *(_QWORD *)&v543 = *(_QWORD *)(v465 + 40) & 0xFF00FFFFFFFFFFFFLL;
              v473 = *(_DWORD *)(v472 + 56);
              if ((v473 | 0x100000) != v473)
              {
                *(_DWORD *)(v472 + 56) = v473 | 0x100000;
                if ((_DWORD)v388 == *((_DWORD *)this + 2338))
                {
                  v476 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 9344, v388 + 1, (unint64_t)&v543);
                  v388 = *((unsigned int *)this + 2339);
                  *(_QWORD *)(*((_QWORD *)this + 1168) + 8 * v388) = *v476;
                }
                else
                {
                  *(_QWORD *)(*v389 + 8 * v388) = v472;
                }
                LODWORD(v388) = v388 + 1;
                *((_DWORD *)this + 2339) = v388;
              }
            }
          }
        }
      }
LABEL_811:
      if (!(_DWORD)v388)
        goto LABEL_830;
    }
  }
  return v9 != 1;
}

__n128 WTF::Vector<JSC::DFG::CPSRethreadingPhase::PhiStackEntry,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::CPSRethreadingPhase::PhiStackEntry>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v9;
  __n128 *v10;
  __n128 result;

  v9 = (__n128 *)WTF::Vector<JSC::DFG::CPSRethreadingPhase::PhiStackEntry,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  v10 = (__n128 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
  result = *v9;
  v10[1].n128_u64[0] = v9[1].n128_u64[0];
  *v10 = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::DFG::CPSRethreadingPhase::PhiStackEntry,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::CPSRethreadingPhase::PhiStackEntry,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v13 = (unint64_t)a2;
  if (v13 <= v11)
    return v8;
  v14 = *(unsigned int *)(result + 12);
  if (v13 < 0x81)
  {
    v16 = result + 16;
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 128;
    goto LABEL_11;
  }
  if (v13 < 0xAAAAAAB)
  {
    v15 = 24 * v13;
    v16 = WTF::fastMalloc((WTF *)(24 * v13));
    *(_DWORD *)(v9 + 8) = (v15 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v9 = v16;
LABEL_11:
    if ((_DWORD)v14)
    {
      v17 = 24 * v14;
      v18 = v10;
      do
      {
        v19 = *(_OWORD *)v18;
        *(_QWORD *)(v16 + 16) = *(_QWORD *)(v18 + 16);
        *(_OWORD *)v16 = v19;
        v16 += 24;
        v18 += 24;
        v17 -= 24;
      }
      while (v17);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::DFG::CPSRethreadingPhase::PhiStackEntry,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v10 = (unint64_t)a2;
  if (v10 > v8)
  {
    v12 = *(_QWORD *)a1;
    v13 = *(unsigned int *)(a1 + 12);
    if (v10 < 0x81)
    {
      v15 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 128;
    }
    else
    {
      if (v10 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return;
      }
      v14 = 24 * v10;
      v15 = WTF::fastMalloc((WTF *)(24 * v10));
      *(_DWORD *)(a1 + 8) = (v14 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v15;
    }
    if ((_DWORD)v13)
    {
      v16 = 24 * v13;
      v17 = v12;
      do
      {
        v18 = *(_OWORD *)v17;
        *(_QWORD *)(v15 + 16) = *(_QWORD *)(v17 + 16);
        *(_OWORD *)v15 = v18;
        v15 += 24;
        v17 += 24;
        v16 -= 24;
      }
      while (v16);
    }
    if (a1 + 16 != v12 && v12)
    {
      if (*(_QWORD *)a1 == v12)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::DFG::CPSRethreadingPhase::canonicalizeFlushOrPhantomLocalFor<(JSC::DFG::NodeType)28,(JSC::OperandKind)2>(uint64_t a1, JSC::DFG::NodeOrigin *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;
  BOOL v34;
  int v35;
  __int128 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;

  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8 * (*(unsigned int *)(v6 + 112) + a4 + *(unsigned int *)(v6 + 116)));
  if (v7)
  {
    v33 = *(unsigned __int16 *)(v7 + 18);
    v34 = v33 > 0x1D;
    v35 = (1 << v33) & 0x30008000;
    if (!v34 && v35 != 0)
      v7 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
    *(_BYTE *)(a3 + 44) = 1;
    *((_QWORD *)a2 + 3) = v7 & 0xFF00FFFFFFFFFFFFLL;
  }
  else
  {
    *(_BYTE *)(a3 + 44) = 1;
    v10 = *(_QWORD *)(a1 + 32);
    JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)&v37, a2);
    v40 = a3;
    v39 = 27;
    v15 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>(v10 + 1032, &v39, (uint64_t)&v37, &v40, v11, v12, v13, v14);
    JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v37, v16, v17, v18, v19, v20, v21, v22);
    v40 = v15;
    v29 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v6 + 32))
    {
      WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Node *>(v6 + 24, (unint64_t)&v40);
      v15 = v40;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v29) = v15;
      *(_DWORD *)(v6 + 36) = v29 + 1;
    }
    *(_QWORD *)&v37 = v6;
    *((_QWORD *)&v37 + 1) = a4;
    v38 = v15;
    v30 = *(_DWORD *)(a1 + 6268);
    if (v30 == *(_DWORD *)(a1 + 6264))
    {
      WTF::Vector<JSC::DFG::CPSRethreadingPhase::PhiStackEntry,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::CPSRethreadingPhase::PhiStackEntry>(a1 + 6256, (unint64_t)&v37, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      v31 = *(_QWORD *)(a1 + 6256) + 24 * v30;
      v32 = v37;
      *(_QWORD *)(v31 + 16) = v38;
      *(_OWORD *)v31 = v32;
      ++*(_DWORD *)(a1 + 6268);
    }
    *((_QWORD *)a2 + 3) = v15 & 0xFF00FFFFFFFFFFFFLL;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 72)
              + 8
              * (*(unsigned int *)(*(_QWORD *)(a1 + 72) + 88) + a4 + *(unsigned int *)(*(_QWORD *)(a1 + 72) + 92))) = v15;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 96)
              + 8
              * (*(unsigned int *)(*(_QWORD *)(a1 + 72) + 112) + a4 + *(unsigned int *)(*(_QWORD *)(a1 + 72) + 116))) = a2;
  }
}

_QWORD *JSC::DFG::CPSRethreadingPhase::addFlushedLocalEdge(_QWORD *result, uint64_t a2)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;

  v5 = a2 & 0xFF00FFFFFFFFFFFFLL;
  v2 = *(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x38);
  if ((v2 | 0x100000) != v2)
  {
    v3 = result;
    *(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x38) = v2 | 0x100000;
    result += 1168;
    v4 = *((unsigned int *)v3 + 2339);
    if ((_DWORD)v4 == *((_DWORD *)v3 + 2338))
    {
      result = (_QWORD *)WTF::Vector<JSC::DFG::Node *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v4 + 1, (unint64_t)&v5);
      v4 = *((unsigned int *)v3 + 2339);
      *(_QWORD *)(v3[1168] + 8 * v4) = *result;
    }
    else
    {
      *(_QWORD *)(*result + 8 * v4) = a2 & 0xFF00FFFFFFFFFFFFLL;
    }
    *((_DWORD *)v3 + 2339) = v4 + 1;
  }
  return result;
}

uint64_t WTF::Vector<JSC::DFG::Node *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::Node *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 0x81)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 128;
    goto LABEL_13;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_13:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::DFG::Node *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  v6 = result;
  v7 = *(const void **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 < 0x81)
  {
    v9 = (void *)(result + 16);
    *(_QWORD *)v6 = v6 + 16;
    *(_DWORD *)(v6 + 8) = 128;
    goto LABEL_11;
  }
  if (!(v5 >> 29))
  {
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
LABEL_11:
    memcpy(v9, v7, 8 * v8);
    if ((const void *)(v6 + 16) != v7 && v7)
    {
      if (*(const void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void JSC::DFG::CPSRethreadingPhase::~CPSRethreadingPhase(JSC::DFG::CPSRethreadingPhase *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::CPSRethreadingPhase *v9;
  JSC::DFG::CPSRethreadingPhase *v11;
  JSC::DFG::CPSRethreadingPhase *v13;
  JSC::DFG::CPSRethreadingPhase *v15;
  _DWORD *v16;

  v9 = (JSC::DFG::CPSRethreadingPhase *)*((_QWORD *)this + 1168);
  if ((JSC::DFG::CPSRethreadingPhase *)((char *)this + 9360) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 1168) = 0;
    *((_DWORD *)this + 2338) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = (JSC::DFG::CPSRethreadingPhase *)*((_QWORD *)this + 782);
  if ((JSC::DFG::CPSRethreadingPhase *)((char *)this + 6272) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 782) = 0;
    *((_DWORD *)this + 1566) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = (JSC::DFG::CPSRethreadingPhase *)*((_QWORD *)this + 396);
  if ((JSC::DFG::CPSRethreadingPhase *)((char *)this + 3184) != v13 && v13 != 0)
  {
    *((_QWORD *)this + 396) = 0;
    *((_DWORD *)this + 794) = 0;
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = (JSC::DFG::CPSRethreadingPhase *)*((_QWORD *)this + 10);
  if ((JSC::DFG::CPSRethreadingPhase *)((char *)this + 96) != v15 && v15)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
  }
  if (HIBYTE(qword_1ECF4C32A) && !*((_BYTE *)this + 56))
    JSC::DFG::Phase::validate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v16 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v16)
  {
    if (*v16 == 1)
      WTF::fastFree((unint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v16;
  }
}

uint64_t JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::HugeMaps>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
  {
    *(_QWORD *)(a1 + 32) = 0;
    WTF::fastFree(v10 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  if (*(_DWORD *)(a2 + 220))
  {
    v16 = 0;
    while (1)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 208) + 8 * v16);
      *(_QWORD *)(a1 + 16) = v17;
      v18 = *(_QWORD *)a1;
      v19 = *(_DWORD *)(v17 + 56);
      v20 = *(_QWORD *)(v17 + 24);
      if ((v19 & 0x10) != 0)
      {
        v46 = *(_QWORD *)(v17 + 32);
        if ((int)v46 + (int)v20 > v20)
        {
          LODWORD(v47) = *(_DWORD *)(v18 + 164);
          v48 = *(_QWORD *)(v17 + 24);
          if (v47 <= v20)
            v47 = v20;
          else
            v47 = v47;
          do
          {
            if (v47 == v48)
            {
              __break(0xC471u);
              JUMPOUT(0x1983548B0);
            }
            v49 = *(_QWORD *)(v18 + 152);
            v50 = *(_QWORD *)(v49 + 8 * v48);
            if ((v50 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v51 = *(_QWORD *)((v50 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
              if (v51)
              {
                *(_QWORD *)(v49 + 8 * v48) = v51 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v50) << 48);
                v20 = *(_QWORD *)(v17 + 24);
                v46 = *(_QWORD *)(v17 + 32);
              }
            }
            ++v48;
          }
          while (v48 < (v20 + v46));
        }
      }
      else
      {
        if ((v20 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v21 = *(_QWORD *)((v20 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
          if (v21)
          {
            v52 = v21 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v20) << 48);
            *(_QWORD *)(v17 + 24) = v52;
            v20 = v52;
          }
        }
        v22 = *(_QWORD *)(v17 + 32);
        if ((v22 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v23 = *(_QWORD *)((v22 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
          if (v23)
            *(_QWORD *)(v17 + 32) = v23 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v22) << 48);
        }
        v24 = *(_QWORD *)(v17 + 40);
        if ((v24 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v25 = *(_QWORD *)((v24 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
          if (v25)
            *(_QWORD *)(v17 + 40) = v25 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v24) << 48);
        }
      }
      v26 = *(unsigned __int16 *)(v17 + 18);
      if ((v26 - 101) < 2)
        break;
      if ((v26 - 4) > 1)
        goto LABEL_56;
      JSC::DFG::Node::replaceWith(v17, (JSC::DFG::Graph *)v18, (JSC::DFG::Node *)(v20 & 0xFF00FFFFFFFFFFFFLL), v11, v12, v13, v14, v15);
      *(_BYTE *)(a1 + 8) = 1;
LABEL_57:
      if (++v16 >= (unint64_t)*(unsigned int *)(a2 + 220))
        goto LABEL_87;
    }
    v27 = *(_DWORD *)(v18 + 164);
    if (v27 <= v20)
    {
      __break(0xC471u);
      JUMPOUT(0x198354840);
    }
    if (v27 <= (int)v20 + 1)
    {
      __break(0xC471u);
      JUMPOUT(0x198354848);
    }
    v28 = *(_QWORD *)(v18 + 152);
    v29 = *(_QWORD *)(v28 + 8 * v20);
    v30 = v19 & 7;
    if (v30 >= 2)
    {
      switch(v30)
      {
        case 3u:
          v31 = 13;
          break;
        case 4u:
          v31 = 17;
          break;
        case 5u:
          v31 = 19;
          break;
        case 7u:
          __break(0xC471u);
          JUMPOUT(0x1983547F8);
        default:
          __break(0xC471u);
          JUMPOUT(0x198354818);
      }
    }
    else
    {
      v31 = 21;
    }
    v32 = *(_QWORD *)(v28 + 8 * (v20 + 1)) & 0xFF00FFFFFFFFFFFFLL;
    v33 = BYTE2(*(_DWORD *)(v17 + 72));
    v34 = *(_DWORD *)(v17 + 72);
    if ((v34 - 14) >= 9)
    {
      if (v34 == 9)
      {
        if (v33 <= 1)
        {
          if (v32 && (v43 = *(unsigned __int16 *)(v32 + 18), v43 <= 2))
          {
            v36 = *(_QWORD *)(v32 + 72);
            if (*(_WORD *)(v32 + 18))
            {
              if ((_DWORD)v43 != 1)
                v43 = 2;
              v36 |= v43;
            }
          }
          else
          {
            v36 = 0;
          }
          v37 = 16402;
          goto LABEL_28;
        }
      }
      else
      {
        if (v34 != 8)
        {
          if (v34 != 7 || v33 > 1)
            goto LABEL_56;
          if (v32 && (v42 = *(unsigned __int16 *)(v32 + 18), v42 <= 2))
          {
            v36 = *(_QWORD *)(v32 + 72);
            if (*(_WORD *)(v32 + 18))
            {
              if ((_DWORD)v42 != 1)
                v42 = 2;
              v36 |= v42;
            }
          }
          else
          {
            v36 = 0;
          }
          v37 = 16400;
          goto LABEL_28;
        }
        if (v33 <= 1)
        {
          if (BYTE2(*(_DWORD *)(v17 + 72)))
            v31 = 13;
          else
            v31 = 14;
          if (v32 && (v44 = *(unsigned __int16 *)(v32 + 18), v44 <= 2))
          {
            v36 = *(_QWORD *)(v32 + 72);
            if (*(_WORD *)(v32 + 18))
            {
              if ((_DWORD)v44 != 1)
                v44 = 2;
              v36 |= v44;
            }
          }
          else
          {
            v36 = 0;
          }
          v37 = 16401;
          goto LABEL_28;
        }
      }
    }
    else if (v33 <= 1)
    {
      if (v32 && (v35 = *(unsigned __int16 *)(v32 + 18), v35 <= 2))
      {
        v36 = *(_QWORD *)(v32 + 72);
        if (*(_WORD *)(v32 + 18))
        {
          if ((_DWORD)v35 != 1)
            v35 = 2;
          v36 |= v35;
        }
      }
      else
      {
        v36 = 0;
      }
      v37 = 16406;
LABEL_28:
      v54 = v31;
      v55 = v37;
      v56 = v29 & 0xFF00FFFFFFFFFFFFLL;
      v57 = v32;
      v58 = v36;
      v59 = 0;
      v60 = 0;
      v40 = v39;
      v17 = *(_QWORD *)(a1 + 16);
      if (v40 > 3 || v38)
        *(_WORD *)(v17 + 18) = 103;
    }
LABEL_56:
    v45 = *(_QWORD *)a1;
    v61 = a1;
    v62 = a1;
    goto LABEL_57;
  }
LABEL_87:
  JSC::DFG::InsertionSet::execute((JSC::DFG::InsertionSet *)(a1 + 64), (JSC::DFG::BasicBlock *)a2);
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t JSC::DFG::`anonymous namespace'::LocalCSEPhase::SmallMaps::findReplacement(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int i;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *(_DWORD *)(a1 + 12804);
  if (!v2)
    return 0;
  for (i = v2 - 1; ; --i)
  {
    v4 = i;
    v5 = a1 + 72 * i;
    if (*(_DWORD *)(v5 + 5600) == *(_DWORD *)a2)
    {
      v6 = (_QWORD *)(v5 + 5600);
      if (v6[1] == *(_QWORD *)(a2 + 8) && v6[2] == *(_QWORD *)(a2 + 16))
      {
        v7 = v6[4];
        v8 = *(_QWORD *)(a2 + 32);
        if (v7 <= 3 && v8 < 4)
        {
          v7 = v6[3];
          v8 = *(_QWORD *)(a2 + 24);
        }
        if (v7 == v8 && v6[5] == *(_QWORD *)(a2 + 40) && v6[6] == *(_QWORD *)(a2 + 48))
          break;
      }
    }
    if (!v4)
      return 0;
  }
  return *(_QWORD *)(a1 + 72 * i + 5656);
}

void JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::SmallMaps>>,JSC::DFG::WriteMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::SmallMaps>>,JSC::DFG::DefMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::SmallMaps>>,void JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::SmallMaps>>,JSC::DFG::WriteMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::SmallMaps>>,JSC::DFG::DefMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::SmallMaps>>>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::ReadMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::SmallMaps>> const&,JSC::DFG::WriteMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::SmallMaps>> const&,JSC::DFG::DefMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::SmallMaps>> const&)::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  JSC::DFG::Node *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  uint64_t v35;
  _QWORD *v36;
  JSC::DFG::Node *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  _QWORD *v89;
  unsigned int v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  int *v108;
  unint64_t v109;
  uint64_t v110;
  __int16 *v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  int v155;
  int v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unsigned int v167;
  unsigned int i32;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  unsigned int v183;
  unsigned int i33;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  unsigned int v199;
  unsigned int i34;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t *v231;
  uint64_t v233;
  uint64_t v234;
  int v235;
  unint64_t v236;
  uint64_t v237;
  unsigned int v238;
  unsigned int i51;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  unsigned int v248;
  uint64_t v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  int v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unsigned int v265;
  unsigned int jj;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int v275;
  uint64_t v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unsigned int v283;
  unsigned int i50;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  uint64_t v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  unsigned int v293;
  uint64_t v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  uint64_t v298;
  unsigned int v299;
  unsigned int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  unsigned int v307;
  uint64_t v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int v318;
  uint64_t v319;
  unsigned int v320;
  unsigned int i63;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  unsigned int v330;
  uint64_t v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unsigned int v340;
  unsigned int v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  unsigned int v348;
  uint64_t v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  uint64_t v353;
  int v354;
  uint64_t v355;
  unsigned int v356;
  unsigned int i52;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  uint64_t v362;
  int v363;
  uint64_t v364;
  unsigned int v365;
  uint64_t v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  uint64_t v370;
  uint64_t *v371;
  uint64_t v372;
  __int128 *v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  int v384;
  int v385;
  unsigned __int8 v386;
  uint64_t v387;
  int v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  __int128 *v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  unsigned int v404;
  uint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  unsigned int v408;
  unsigned int v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  int v413;
  uint64_t v414;
  uint64_t v415;
  unsigned int v416;
  uint64_t v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  uint64_t v421;
  int v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  unint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unint64_t v430;
  unint64_t v431;
  uint64_t v432;
  uint64_t *v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unsigned int v438;
  unsigned int v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  int v443;
  uint64_t v444;
  uint64_t v445;
  unsigned int v446;
  uint64_t v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  uint64_t v451;
  int v452;
  uint64_t v453;
  unsigned int v454;
  uint64_t v455;
  unsigned int v456;
  unsigned int i60;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  int v461;
  uint64_t v462;
  int v463;
  uint64_t v464;
  uint64_t v465;
  unsigned int v466;
  uint64_t v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  uint64_t v471;
  int v472;
  unsigned int v473;
  uint64_t v474;
  unsigned int v475;
  unsigned int v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  unint64_t v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  unsigned int v486;
  unsigned int v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  int v491;
  uint64_t v492;
  uint64_t v493;
  unsigned int v494;
  uint64_t v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  uint64_t v499;
  int v500;
  uint64_t v501;
  unsigned int v502;
  unsigned int v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t v506;
  uint64_t v507;
  unint64_t v508;
  unint64_t v509;
  int v510;
  uint64_t v511;
  unsigned int v512;
  unsigned int v513;
  uint64_t v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t v518;
  unsigned int v519;
  unsigned int i;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  int v524;
  uint64_t v525;
  int v526;
  uint64_t v527;
  uint64_t v528;
  unsigned int v529;
  uint64_t v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  uint64_t v534;
  unsigned int v535;
  unsigned int i38;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  int v540;
  uint64_t v541;
  int v542;
  uint64_t v543;
  uint64_t v544;
  unsigned int v545;
  uint64_t v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  uint64_t v550;
  unsigned int v551;
  unsigned int i39;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  int v556;
  uint64_t v557;
  int v558;
  uint64_t v559;
  uint64_t v560;
  unsigned int v561;
  uint64_t v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  uint64_t v566;
  unsigned int v567;
  unsigned int i40;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  int v572;
  uint64_t v573;
  int v574;
  uint64_t v575;
  uint64_t v576;
  unsigned int v577;
  uint64_t v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  uint64_t v582;
  unsigned int v583;
  unsigned int i41;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  int v588;
  uint64_t v589;
  uint64_t v590;
  unsigned int v591;
  uint64_t v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  int v596;
  uint64_t v597;
  unint64_t v598;
  unint64_t v599;
  uint64_t v600;
  int v601;
  uint64_t v602;
  unsigned int v603;
  unsigned int v604;
  uint64_t v605;
  uint64_t v606;
  unint64_t v607;
  uint64_t v608;
  uint64_t v609;
  unint64_t v610;
  unint64_t v611;
  uint64_t v612;
  uint64_t v613;
  int v614;
  unsigned int v615;
  uint64_t v616;
  _QWORD *v617;
  uint64_t v618;
  unsigned int v619;
  int v620;
  unsigned int v621;
  unsigned int v622;
  unint64_t v624;
  uint64_t v625;
  uint64_t v626;
  int *v627;
  unint64_t v628;
  unint64_t v629;
  uint64_t v630;
  uint64_t v631;
  unint64_t v632;
  uint64_t v633;
  unsigned int v634;
  unsigned int v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  int v639;
  uint64_t v640;
  uint64_t v641;
  unsigned int v642;
  uint64_t v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  uint64_t v647;
  int v648;
  unsigned int v649;
  uint64_t v650;
  unsigned int v651;
  unsigned int v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  int v656;
  uint64_t v657;
  uint64_t v658;
  unsigned int v659;
  uint64_t v660;
  __int128 v661;
  __int128 v662;
  __int128 v663;
  uint64_t v664;
  int v665;
  uint64_t v666;
  unint64_t v667;
  int v668;
  unint64_t v669;
  uint64_t v670;
  unint64_t v671;
  unint64_t v672;
  unint64_t v673;
  uint64_t v674;
  uint64_t v675;
  unsigned int v676;
  unsigned int v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  int v681;
  uint64_t v682;
  uint64_t v683;
  unsigned int v684;
  uint64_t v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  uint64_t v689;
  int v690;
  uint64_t v691;
  unsigned int v692;
  unsigned int v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  int v697;
  uint64_t v698;
  uint64_t v699;
  unsigned int v700;
  uint64_t v701;
  __int128 v702;
  __int128 v703;
  __int128 v704;
  uint64_t v705;
  int v706;
  uint64_t v707;
  unsigned int v708;
  unsigned int v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  int v713;
  uint64_t v714;
  uint64_t v715;
  unsigned int v716;
  uint64_t v717;
  __int128 v718;
  __int128 v719;
  __int128 v720;
  uint64_t v721;
  int v722;
  unint64_t v723;
  unsigned int v724;
  unsigned int i62;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  int v729;
  uint64_t v730;
  uint64_t v731;
  unsigned int v732;
  uint64_t v733;
  __int128 v734;
  __int128 v735;
  __int128 v736;
  int v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  unint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t *v748;
  unsigned int n;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  int v753;
  uint64_t v754;
  int v755;
  uint64_t v756;
  uint64_t v757;
  unsigned int v758;
  uint64_t v759;
  __int128 v760;
  __int128 v761;
  __int128 v762;
  int v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  unint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  int *v773;
  uint64_t v774;
  unsigned int v775;
  unsigned int i35;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  int v780;
  uint64_t v781;
  int v782;
  uint64_t v783;
  uint64_t v784;
  unsigned int v785;
  uint64_t v786;
  __int128 v787;
  __int128 v788;
  __int128 v789;
  uint64_t v790;
  unsigned int v791;
  unsigned int i36;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  int v796;
  uint64_t v797;
  int v798;
  uint64_t v799;
  uint64_t v800;
  unsigned int v801;
  uint64_t v802;
  __int128 v803;
  __int128 v804;
  __int128 v805;
  uint64_t v806;
  unsigned int v807;
  unsigned int i37;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  int v812;
  uint64_t v813;
  int v814;
  uint64_t v815;
  uint64_t v816;
  unsigned int v817;
  uint64_t v818;
  __int128 v819;
  __int128 v820;
  __int128 v821;
  uint64_t v822;
  unint64_t v823;
  uint64_t v824;
  uint64_t v825;
  unsigned int v826;
  unsigned int i54;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  int v831;
  uint64_t v832;
  int v833;
  uint64_t v834;
  uint64_t v835;
  unsigned int v836;
  uint64_t v837;
  __int128 v838;
  __int128 v839;
  __int128 v840;
  uint64_t v841;
  unint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  unsigned int v846;
  unsigned int v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  int v851;
  uint64_t v852;
  uint64_t v853;
  unsigned int v854;
  uint64_t v855;
  __int128 v856;
  __int128 v857;
  __int128 v858;
  uint64_t v859;
  int v860;
  uint64_t *v861;
  uint64_t v862;
  unint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  unint64_t v869;
  uint64_t v870;
  unsigned int v871;
  unsigned int i61;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  int v876;
  uint64_t v877;
  int v878;
  uint64_t v879;
  uint64_t v880;
  unsigned int v881;
  uint64_t v882;
  __int128 v883;
  __int128 v884;
  __int128 v885;
  unsigned int *v886;
  unint64_t v887;
  unint64_t v888;
  uint64_t v889;
  unsigned int v890;
  unsigned int v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  int v895;
  uint64_t v896;
  uint64_t v897;
  unsigned int v898;
  uint64_t v899;
  __int128 v900;
  __int128 v901;
  __int128 v902;
  uint64_t v903;
  int v904;
  uint64_t v905;
  unint64_t v906;
  unint64_t v907;
  uint64_t v908;
  uint64_t v909;
  unint64_t v910;
  uint64_t v911;
  unsigned int v912;
  uint64_t v913;
  unsigned int v914;
  uint64_t *v915;
  unsigned int k;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  int v920;
  uint64_t v921;
  int v922;
  uint64_t v923;
  uint64_t v924;
  unsigned int v925;
  uint64_t v926;
  __int128 v927;
  __int128 v928;
  __int128 v929;
  int v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  unint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  unint64_t v938;
  unint64_t v939;
  uint64_t *v940;
  uint64_t v941;
  unsigned int v942;
  unsigned int i55;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  int v947;
  uint64_t v948;
  int v949;
  uint64_t v950;
  unsigned int v951;
  uint64_t v952;
  __int128 v953;
  __int128 v954;
  __int128 v955;
  uint64_t v956;
  uint64_t v957;
  __int128 *v958;
  uint64_t v959;
  unint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  unint64_t v964;
  unint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  unsigned int v969;
  unsigned int v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  int v974;
  uint64_t v975;
  uint64_t v976;
  unsigned int v977;
  uint64_t v978;
  __int128 v979;
  __int128 v980;
  __int128 v981;
  uint64_t v982;
  int v983;
  uint64_t v984;
  unint64_t v985;
  uint64_t v986;
  uint64_t v987;
  unsigned int v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  unsigned int v993;
  unsigned int i66;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  int v998;
  int v999;
  uint64_t v1000;
  unsigned int v1001;
  uint64_t v1002;
  __int128 v1003;
  __int128 v1004;
  __int128 v1005;
  uint64_t v1006;
  unint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  unsigned int v1011;
  unsigned int v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  int v1016;
  uint64_t v1017;
  uint64_t v1018;
  unsigned int v1019;
  uint64_t v1020;
  __int128 v1021;
  __int128 v1022;
  __int128 v1023;
  uint64_t v1024;
  int v1025;
  uint64_t v1026;
  unsigned int v1027;
  unsigned int i48;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  int v1032;
  uint64_t v1033;
  int v1034;
  uint64_t v1035;
  uint64_t v1036;
  unsigned int v1037;
  uint64_t v1038;
  __int128 v1039;
  __int128 v1040;
  __int128 v1041;
  uint64_t v1042;
  unsigned int v1043;
  unsigned int i49;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  int v1048;
  uint64_t v1049;
  int v1050;
  uint64_t v1051;
  uint64_t v1052;
  unsigned int v1053;
  uint64_t v1054;
  __int128 v1055;
  __int128 v1056;
  __int128 v1057;
  int v1058;
  uint64_t v1059;
  unsigned int v1060;
  unsigned int v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  int v1065;
  uint64_t v1066;
  uint64_t v1067;
  unsigned int v1068;
  uint64_t v1069;
  __int128 v1070;
  __int128 v1071;
  __int128 v1072;
  uint64_t v1073;
  int v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  unsigned int v1084;
  unsigned int i65;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  int v1089;
  uint64_t v1090;
  int v1091;
  uint64_t v1092;
  uint64_t v1093;
  unsigned int v1094;
  uint64_t v1095;
  __int128 v1096;
  __int128 v1097;
  __int128 v1098;
  uint64_t v1099;
  unint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  unsigned int v1105;
  unsigned int v1106;
  uint64_t v1107;
  uint64_t v1108;
  unint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  unsigned int v1112;
  unsigned int i44;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  int v1117;
  uint64_t v1118;
  int v1119;
  uint64_t v1120;
  uint64_t v1121;
  unsigned int v1122;
  uint64_t v1123;
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  unsigned int v1131;
  unsigned int v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  int v1136;
  uint64_t v1137;
  uint64_t v1138;
  unsigned int v1139;
  uint64_t v1140;
  __int128 v1141;
  __int128 v1142;
  __int128 v1143;
  uint64_t v1144;
  int v1145;
  unint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  unsigned int v1150;
  unsigned int i46;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  int v1155;
  uint64_t v1156;
  int v1157;
  uint64_t v1158;
  uint64_t v1159;
  unsigned int v1160;
  uint64_t v1161;
  __int128 v1162;
  __int128 v1163;
  __int128 v1164;
  uint64_t v1165;
  unsigned int v1166;
  unsigned int i47;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  int v1171;
  uint64_t v1172;
  int v1173;
  uint64_t v1174;
  uint64_t v1175;
  unsigned int v1176;
  uint64_t v1177;
  __int128 v1178;
  __int128 v1179;
  __int128 v1180;
  char isWatchingHavingABadTimeWatchpoint;
  unsigned int v1182;
  unsigned int i58;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  int v1187;
  uint64_t v1188;
  int v1189;
  uint64_t v1190;
  uint64_t v1191;
  unsigned int v1192;
  uint64_t v1193;
  __int128 v1194;
  __int128 v1195;
  __int128 v1196;
  uint64_t v1197;
  unsigned int v1198;
  unsigned int v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  int v1203;
  uint64_t v1204;
  uint64_t v1205;
  unsigned int v1206;
  uint64_t v1207;
  __int128 v1208;
  __int128 v1209;
  __int128 v1210;
  uint64_t v1211;
  int v1212;
  uint64_t v1213;
  uint64_t v1214;
  unsigned int v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t *v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  unsigned int v1222;
  unsigned int i67;
  uint64_t v1224;
  uint64_t v1225;
  int v1226;
  uint64_t v1227;
  unsigned int v1228;
  uint64_t v1229;
  __int128 v1230;
  __int128 v1231;
  __int128 v1232;
  uint64_t v1233;
  unint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  unint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  unsigned int v1241;
  unsigned int i43;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  int v1246;
  uint64_t v1247;
  uint64_t v1248;
  unsigned int v1249;
  uint64_t v1250;
  __int128 v1251;
  __int128 v1252;
  __int128 v1253;
  int v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  unint64_t v1259;
  unint64_t v1260;
  unint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  unint64_t v1264;
  uint64_t v1265;
  unint64_t v1266;
  uint64_t *v1267;
  unsigned int v1268;
  unsigned int m;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  int v1273;
  uint64_t v1274;
  int v1275;
  uint64_t v1276;
  uint64_t v1277;
  unsigned int v1278;
  uint64_t v1279;
  __int128 v1280;
  __int128 v1281;
  __int128 v1282;
  int v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  unint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  unint64_t v1293;
  uint64_t v1294;
  unsigned int v1295;
  unsigned int j;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  int v1300;
  uint64_t v1301;
  int v1302;
  uint64_t v1303;
  uint64_t v1304;
  unsigned int v1305;
  uint64_t v1306;
  __int128 v1307;
  __int128 v1308;
  __int128 v1309;
  uint64_t v1310;
  uint64_t v1311;
  unsigned int *v1312;
  uint64_t v1313;
  uint64_t v1314;
  unsigned int v1315;
  uint64_t v1316;
  uint64_t v1317;
  __int128 *v1318;
  uint64_t v1319;
  unint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  unint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  unsigned int v1328;
  unsigned int v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  int v1333;
  uint64_t v1334;
  uint64_t v1335;
  unsigned int v1336;
  uint64_t v1337;
  __int128 v1338;
  __int128 v1339;
  __int128 v1340;
  uint64_t v1341;
  int v1342;
  uint64_t v1343;
  unsigned int v1344;
  unsigned int v1345;
  uint64_t v1346;
  uint64_t v1347;
  unint64_t v1348;
  uint64_t v1349;
  unint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  unsigned int v1356;
  unsigned int i56;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  int v1361;
  int v1362;
  uint64_t v1363;
  unsigned int v1364;
  uint64_t v1365;
  __int128 v1366;
  __int128 v1367;
  __int128 v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  __int128 *v1372;
  uint64_t v1373;
  unint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  void *v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  int v1384;
  int v1385;
  char v1386;
  uint64_t v1387;
  uint64_t v1388;
  unsigned int *v1389;
  uint64_t v1390;
  unsigned int v1391;
  uint64_t *v1392;
  unint64_t v1393;
  unint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  unint64_t v1397;
  uint64_t v1398;
  unsigned int v1399;
  unsigned int i45;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  int v1404;
  uint64_t v1405;
  int v1406;
  uint64_t v1407;
  uint64_t v1408;
  unsigned int v1409;
  uint64_t v1410;
  __int128 v1411;
  __int128 v1412;
  __int128 v1413;
  unint64_t v1414;
  unint64_t v1415;
  unint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  unsigned int v1420;
  unsigned int v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  int v1425;
  uint64_t v1426;
  uint64_t v1427;
  unsigned int v1428;
  uint64_t v1429;
  __int128 v1430;
  __int128 v1431;
  __int128 v1432;
  uint64_t v1433;
  int v1434;
  unsigned int v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  int v1439;
  uint64_t v1440;
  uint64_t v1441;
  unsigned int v1442;
  uint64_t v1443;
  __int128 v1444;
  __int128 v1445;
  __int128 v1446;
  uint64_t v1447;
  int v1448;
  uint64_t v1449;
  unsigned int v1450;
  unsigned int v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  int v1455;
  uint64_t v1456;
  uint64_t v1457;
  unsigned int v1458;
  uint64_t v1459;
  __int128 v1460;
  __int128 v1461;
  __int128 v1462;
  uint64_t v1463;
  int v1464;
  unsigned int v1465;
  uint64_t v1466;
  unsigned int v1467;
  unsigned int ii;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  int v1472;
  uint64_t v1473;
  int v1474;
  uint64_t v1475;
  uint64_t v1476;
  unsigned int v1477;
  uint64_t v1478;
  __int128 v1479;
  __int128 v1480;
  __int128 v1481;
  uint64_t v1482;
  uint64_t v1483;
  unsigned int v1484;
  unsigned int i57;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  int v1489;
  uint64_t v1490;
  int v1491;
  uint64_t v1492;
  uint64_t v1493;
  unsigned int v1494;
  uint64_t v1495;
  __int128 v1496;
  __int128 v1497;
  __int128 v1498;
  uint64_t v1499;
  unsigned int v1500;
  unsigned int i64;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  int v1505;
  uint64_t v1506;
  int v1507;
  uint64_t v1508;
  uint64_t v1509;
  unsigned int v1510;
  uint64_t v1511;
  __int128 v1512;
  __int128 v1513;
  __int128 v1514;
  uint64_t *v1515;
  uint64_t v1516;
  uint64_t v1517;
  unint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  unsigned int v1524;
  uint64_t v1525;
  unsigned int v1526;
  unsigned int i42;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  int v1531;
  uint64_t v1532;
  int v1533;
  uint64_t v1534;
  uint64_t v1535;
  unsigned int v1536;
  uint64_t v1537;
  __int128 v1538;
  __int128 v1539;
  __int128 v1540;
  uint64_t v1541;
  uint64_t v1542;
  _BOOL4 v1543;
  uint64_t v1544;
  uint64_t v1545;
  unint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  unint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  unsigned int v1553;
  unsigned int kk;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  int v1558;
  uint64_t v1559;
  int v1560;
  uint64_t v1561;
  uint64_t v1562;
  unsigned int v1563;
  uint64_t v1564;
  __int128 v1565;
  __int128 v1566;
  __int128 v1567;
  unsigned int v1568;
  unsigned int mm;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  int v1573;
  uint64_t v1574;
  int v1575;
  uint64_t v1576;
  uint64_t v1577;
  unsigned int v1578;
  uint64_t v1579;
  __int128 v1580;
  __int128 v1581;
  __int128 v1582;
  unsigned int v1583;
  unsigned int nn;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  int v1588;
  uint64_t v1589;
  int v1590;
  uint64_t v1591;
  uint64_t v1592;
  unsigned int v1593;
  uint64_t v1594;
  __int128 v1595;
  __int128 v1596;
  __int128 v1597;
  unsigned int v1598;
  unsigned int i1;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  int v1603;
  uint64_t v1604;
  int v1605;
  uint64_t v1606;
  uint64_t v1607;
  unsigned int v1608;
  uint64_t v1609;
  __int128 v1610;
  __int128 v1611;
  __int128 v1612;
  unsigned int v1613;
  unsigned int i2;
  uint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  int v1618;
  uint64_t v1619;
  int v1620;
  uint64_t v1621;
  uint64_t v1622;
  unsigned int v1623;
  uint64_t v1624;
  __int128 v1625;
  __int128 v1626;
  __int128 v1627;
  unsigned int v1628;
  unsigned int i3;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  int v1633;
  uint64_t v1634;
  int v1635;
  uint64_t v1636;
  uint64_t v1637;
  unsigned int v1638;
  uint64_t v1639;
  __int128 v1640;
  __int128 v1641;
  __int128 v1642;
  unsigned int v1643;
  unsigned int i4;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  int v1648;
  uint64_t v1649;
  int v1650;
  uint64_t v1651;
  uint64_t v1652;
  unsigned int v1653;
  uint64_t v1654;
  __int128 v1655;
  __int128 v1656;
  __int128 v1657;
  unsigned int v1658;
  unsigned int i5;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  int v1663;
  uint64_t v1664;
  int v1665;
  uint64_t v1666;
  uint64_t v1667;
  unsigned int v1668;
  uint64_t v1669;
  __int128 v1670;
  __int128 v1671;
  __int128 v1672;
  unsigned int v1673;
  unsigned int i6;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  int v1678;
  uint64_t v1679;
  int v1680;
  uint64_t v1681;
  uint64_t v1682;
  unsigned int v1683;
  uint64_t v1684;
  __int128 v1685;
  __int128 v1686;
  __int128 v1687;
  unsigned int v1688;
  unsigned int i7;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  int v1693;
  uint64_t v1694;
  int v1695;
  uint64_t v1696;
  uint64_t v1697;
  unsigned int v1698;
  uint64_t v1699;
  __int128 v1700;
  __int128 v1701;
  __int128 v1702;
  unsigned int v1703;
  unsigned int i8;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  int v1708;
  uint64_t v1709;
  int v1710;
  uint64_t v1711;
  uint64_t v1712;
  unsigned int v1713;
  uint64_t v1714;
  __int128 v1715;
  __int128 v1716;
  __int128 v1717;
  unsigned int v1718;
  unsigned int i9;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  int v1723;
  uint64_t v1724;
  int v1725;
  uint64_t v1726;
  uint64_t v1727;
  unsigned int v1728;
  uint64_t v1729;
  __int128 v1730;
  __int128 v1731;
  __int128 v1732;
  unsigned int v1733;
  unsigned int i10;
  uint64_t v1735;
  uint64_t v1736;
  uint64_t v1737;
  int v1738;
  uint64_t v1739;
  int v1740;
  uint64_t v1741;
  uint64_t v1742;
  unsigned int v1743;
  uint64_t v1744;
  __int128 v1745;
  __int128 v1746;
  __int128 v1747;
  unsigned int v1748;
  unsigned int i11;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  int v1753;
  uint64_t v1754;
  int v1755;
  uint64_t v1756;
  uint64_t v1757;
  unsigned int v1758;
  uint64_t v1759;
  __int128 v1760;
  __int128 v1761;
  __int128 v1762;
  unsigned int v1763;
  unsigned int i12;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t v1767;
  int v1768;
  uint64_t v1769;
  int v1770;
  uint64_t v1771;
  uint64_t v1772;
  unsigned int v1773;
  uint64_t v1774;
  __int128 v1775;
  __int128 v1776;
  __int128 v1777;
  unsigned int v1778;
  unsigned int i13;
  uint64_t v1780;
  uint64_t v1781;
  uint64_t v1782;
  int v1783;
  uint64_t v1784;
  int v1785;
  uint64_t v1786;
  uint64_t v1787;
  unsigned int v1788;
  uint64_t v1789;
  __int128 v1790;
  __int128 v1791;
  __int128 v1792;
  unsigned int v1793;
  unsigned int i14;
  uint64_t v1795;
  uint64_t v1796;
  uint64_t v1797;
  int v1798;
  uint64_t v1799;
  int v1800;
  uint64_t v1801;
  uint64_t v1802;
  unsigned int v1803;
  uint64_t v1804;
  __int128 v1805;
  __int128 v1806;
  __int128 v1807;
  unsigned int v1808;
  unsigned int i15;
  uint64_t v1810;
  uint64_t v1811;
  uint64_t v1812;
  int v1813;
  uint64_t v1814;
  int v1815;
  uint64_t v1816;
  uint64_t v1817;
  unsigned int v1818;
  uint64_t v1819;
  __int128 v1820;
  __int128 v1821;
  __int128 v1822;
  unsigned int v1823;
  unsigned int i16;
  uint64_t v1825;
  uint64_t v1826;
  uint64_t v1827;
  int v1828;
  uint64_t v1829;
  int v1830;
  uint64_t v1831;
  uint64_t v1832;
  unsigned int v1833;
  uint64_t v1834;
  __int128 v1835;
  __int128 v1836;
  __int128 v1837;
  unsigned int v1838;
  unsigned int i17;
  uint64_t v1840;
  uint64_t v1841;
  uint64_t v1842;
  int v1843;
  uint64_t v1844;
  int v1845;
  uint64_t v1846;
  uint64_t v1847;
  unsigned int v1848;
  uint64_t v1849;
  __int128 v1850;
  __int128 v1851;
  __int128 v1852;
  unsigned int v1853;
  unsigned int i18;
  uint64_t v1855;
  uint64_t v1856;
  uint64_t v1857;
  int v1858;
  uint64_t v1859;
  int v1860;
  uint64_t v1861;
  uint64_t v1862;
  unsigned int v1863;
  uint64_t v1864;
  __int128 v1865;
  __int128 v1866;
  __int128 v1867;
  unsigned int v1868;
  unsigned int i19;
  uint64_t v1870;
  uint64_t v1871;
  uint64_t v1872;
  int v1873;
  uint64_t v1874;
  int v1875;
  uint64_t v1876;
  uint64_t v1877;
  unsigned int v1878;
  uint64_t v1879;
  __int128 v1880;
  __int128 v1881;
  __int128 v1882;
  unsigned int v1883;
  unsigned int i20;
  uint64_t v1885;
  uint64_t v1886;
  uint64_t v1887;
  int v1888;
  uint64_t v1889;
  int v1890;
  uint64_t v1891;
  uint64_t v1892;
  unsigned int v1893;
  uint64_t v1894;
  __int128 v1895;
  __int128 v1896;
  __int128 v1897;
  unsigned int v1898;
  unsigned int i21;
  uint64_t v1900;
  uint64_t v1901;
  uint64_t v1902;
  int v1903;
  uint64_t v1904;
  int v1905;
  uint64_t v1906;
  uint64_t v1907;
  unsigned int v1908;
  uint64_t v1909;
  __int128 v1910;
  __int128 v1911;
  __int128 v1912;
  unsigned int v1913;
  unsigned int i22;
  uint64_t v1915;
  uint64_t v1916;
  uint64_t v1917;
  int v1918;
  uint64_t v1919;
  int v1920;
  uint64_t v1921;
  uint64_t v1922;
  unsigned int v1923;
  uint64_t v1924;
  __int128 v1925;
  __int128 v1926;
  __int128 v1927;
  unsigned int v1928;
  unsigned int i23;
  uint64_t v1930;
  uint64_t v1931;
  uint64_t v1932;
  int v1933;
  uint64_t v1934;
  int v1935;
  uint64_t v1936;
  uint64_t v1937;
  unsigned int v1938;
  uint64_t v1939;
  __int128 v1940;
  __int128 v1941;
  __int128 v1942;
  unsigned int v1943;
  unsigned int i24;
  uint64_t v1945;
  uint64_t v1946;
  uint64_t v1947;
  int v1948;
  uint64_t v1949;
  int v1950;
  uint64_t v1951;
  uint64_t v1952;
  unsigned int v1953;
  uint64_t v1954;
  __int128 v1955;
  __int128 v1956;
  __int128 v1957;
  unsigned int v1958;
  unsigned int i25;
  uint64_t v1960;
  uint64_t v1961;
  uint64_t v1962;
  int v1963;
  uint64_t v1964;
  uint64_t v1965;
  unsigned int v1966;
  uint64_t v1967;
  __int128 v1968;
  __int128 v1969;
  __int128 v1970;
  int v1971;
  uint64_t v1972;
  unint64_t v1973;
  unsigned int *v1974;
  uint64_t v1975;
  uint64_t v1976;
  uint64_t v1977;
  uint64_t v1978;
  __int128 *v1979;
  uint64_t v1980;
  uint64_t v1981;
  uint64_t v1982;
  uint64_t v1983;
  uint64_t v1984;
  uint64_t v1985;
  unint64_t v1986;
  uint64_t v1987;
  uint64_t v1988;
  unint64_t v1989;
  uint64_t v1990;
  uint64_t v1991;
  uint64_t v1992;
  uint64_t *v1993;
  uint64_t v1994;
  int v1995;
  unint64_t v1996;
  uint64_t v1997;
  unsigned int v1998;
  BOOL v1999;
  uint64_t v2000;
  uint64_t v2001;
  int v2002;
  BOOL v2003;
  uint64_t v2004;
  unsigned int v2005;
  unsigned int i53;
  uint64_t v2007;
  uint64_t v2008;
  uint64_t v2009;
  int v2010;
  uint64_t v2011;
  int v2012;
  uint64_t v2013;
  uint64_t v2014;
  unsigned int v2015;
  uint64_t v2016;
  __int128 v2017;
  __int128 v2018;
  __int128 v2019;
  unsigned int v2020;
  unsigned int i59;
  uint64_t v2022;
  uint64_t v2023;
  uint64_t v2024;
  int v2025;
  uint64_t v2026;
  uint64_t v2027;
  unsigned int v2028;
  uint64_t v2029;
  __int128 v2030;
  __int128 v2031;
  __int128 v2032;
  int v2033;
  uint64_t v2034;
  unsigned int v2035;
  unsigned int i26;
  uint64_t v2037;
  uint64_t v2038;
  uint64_t v2039;
  int v2040;
  uint64_t v2041;
  uint64_t v2042;
  unsigned int v2043;
  uint64_t v2044;
  __int128 v2045;
  __int128 v2046;
  __int128 v2047;
  int v2048;
  uint64_t v2049;
  unsigned int v2050;
  unsigned int i27;
  uint64_t v2052;
  uint64_t v2053;
  uint64_t v2054;
  int v2055;
  uint64_t v2056;
  uint64_t v2057;
  unsigned int v2058;
  uint64_t v2059;
  __int128 v2060;
  __int128 v2061;
  __int128 v2062;
  int v2063;
  uint64_t v2064;
  unsigned int v2065;
  unsigned int i28;
  uint64_t v2067;
  uint64_t v2068;
  uint64_t v2069;
  int v2070;
  uint64_t v2071;
  uint64_t v2072;
  unsigned int v2073;
  uint64_t v2074;
  __int128 v2075;
  __int128 v2076;
  __int128 v2077;
  int v2078;
  uint64_t v2079;
  unsigned int v2080;
  unsigned int i29;
  uint64_t v2082;
  uint64_t v2083;
  uint64_t v2084;
  int v2085;
  uint64_t v2086;
  uint64_t v2087;
  unsigned int v2088;
  uint64_t v2089;
  __int128 v2090;
  __int128 v2091;
  __int128 v2092;
  int v2093;
  uint64_t v2094;
  uint64_t v2095;
  unsigned int v2096;
  unsigned int i30;
  uint64_t v2098;
  uint64_t v2099;
  uint64_t v2100;
  int v2101;
  uint64_t v2102;
  uint64_t v2103;
  unsigned int v2104;
  uint64_t v2105;
  __int128 v2106;
  __int128 v2107;
  __int128 v2108;
  int v2109;
  uint64_t v2110;
  uint64_t v2111;
  unsigned int v2112;
  unsigned int i31;
  uint64_t v2114;
  uint64_t v2115;
  uint64_t v2116;
  int v2117;
  uint64_t v2118;
  uint64_t v2119;
  unsigned int v2120;
  uint64_t v2121;
  __int128 v2122;
  __int128 v2123;
  __int128 v2124;
  int v2125;
  uint64_t v2126;
  uint64_t v2127;
  uint64_t v2128;
  uint64_t v2129;
  uint64_t v2130;
  uint64_t v2131;
  uint64_t v2132;
  unsigned int v2133;
  unsigned int v2134;
  uint64_t v2135;
  uint64_t v2136;
  uint64_t v2137;
  int v2138;
  uint64_t v2139;
  uint64_t v2140;
  unsigned int v2141;
  uint64_t v2142;
  __int128 v2143;
  __int128 v2144;
  __int128 v2145;
  uint64_t v2146;
  int v2147;
  uint64_t v2148;
  unsigned int v2149;
  unsigned int v2150;
  uint64_t v2151;
  uint64_t v2152;
  uint64_t v2153;
  int v2154;
  uint64_t v2155;
  uint64_t v2156;
  unsigned int v2157;
  uint64_t v2158;
  __int128 v2159;
  __int128 v2160;
  __int128 v2161;
  uint64_t v2162;
  int v2163;
  unint64_t v2164;
  uint64_t v2165;
  uint64_t v2166;
  uint64_t v2167;
  uint64_t v2168;
  uint64_t v2169;
  uint64_t v2170;
  uint64_t v2171;
  uint64_t v2172;
  unint64_t v2173;
  uint64_t v2174;
  unsigned int v2175;
  unsigned int v2176;
  uint64_t v2177;
  uint64_t v2178;
  uint64_t v2179;
  int v2180;
  uint64_t v2181;
  uint64_t v2182;
  unsigned int v2183;
  uint64_t v2184;
  __int128 v2185;
  __int128 v2186;
  __int128 v2187;
  uint64_t v2188;
  int v2189;
  uint64_t v2190;
  unsigned int v2191;
  unsigned int v2192;
  uint64_t v2193;
  uint64_t v2194;
  uint64_t v2195;
  int v2196;
  uint64_t v2197;
  uint64_t v2198;
  unsigned int v2199;
  uint64_t v2200;
  __int128 v2201;
  __int128 v2202;
  __int128 v2203;
  uint64_t v2204;
  int v2205;
  uint64_t v2206;
  unsigned int v2207;
  unsigned int v2208;
  uint64_t v2209;
  uint64_t v2210;
  uint64_t v2211;
  int v2212;
  uint64_t v2213;
  uint64_t v2214;
  unsigned int v2215;
  uint64_t v2216;
  __int128 v2217;
  __int128 v2218;
  __int128 v2219;
  uint64_t v2220;
  int v2221;
  uint64_t v2222;
  uint64_t v2223;
  unint64_t v2224;
  uint64_t *v2225;
  uint64_t v2226;
  unint64_t v2227;
  uint64_t v2228;
  uint64_t v2229;
  unint64_t v2230;
  uint64_t v2231;
  uint64_t v2232;
  uint64_t *v2233;
  uint64_t v2234;
  unint64_t v2235;
  uint64_t v2236;
  unint64_t v2237;
  uint64_t v2238;
  uint64_t v2239;
  uint64_t v2240;
  uint64_t v2241;
  uint64_t v2242;
  __int128 *v2243;
  uint64_t v2244;
  uint64_t v2245;
  uint64_t v2246;
  uint64_t v2247;
  uint64_t v2248;
  uint64_t v2249;
  unint64_t v2250;
  uint64_t v2251;
  uint64_t v2252;
  unint64_t v2253;
  uint64_t v2254;
  uint64_t v2255;
  uint64_t v2256;
  uint64_t v2257;
  unsigned int v2258;
  unsigned int v2259;
  uint64_t v2260;
  uint64_t v2261;
  uint64_t v2262;
  int v2263;
  uint64_t v2264;
  uint64_t v2265;
  unsigned int v2266;
  uint64_t v2267;
  __int128 v2268;
  __int128 v2269;
  __int128 v2270;
  uint64_t v2271;
  int v2272;
  _DWORD *v2273;
  int v2274;
  int v2275;
  unint64_t v2276;
  uint64_t *v2277;
  uint64_t v2278;
  unint64_t v2279;
  uint64_t v2280;
  uint64_t v2281;
  uint64_t *v2282;
  uint64_t v2283;
  unint64_t v2284;
  uint64_t v2285;
  unint64_t v2286;
  uint64_t v2287;
  uint64_t v2288;
  _DWORD *v2289;
  int v2290;
  int v2291;
  uint64_t v2292;
  unsigned int v2293;
  unsigned int v2294;
  uint64_t v2295;
  uint64_t v2296;
  uint64_t v2297;
  int v2298;
  uint64_t v2299;
  uint64_t v2300;
  unsigned int v2301;
  uint64_t v2302;
  __int128 v2303;
  __int128 v2304;
  __int128 v2305;
  uint64_t v2306;
  int v2307;
  unint64_t v2308;
  unint64_t v2309;
  unsigned int v2310;
  uint64_t v2311;
  _DWORD *v2312;
  _QWORD *v2313;
  unint64_t v2314;
  uint64_t *v2315;
  uint64_t v2316;
  unint64_t v2317;
  uint64_t v2318;
  uint64_t v2319;
  uint64_t v2320;
  unint64_t v2321;
  uint64_t *v2322;
  uint64_t v2323;
  unint64_t v2324;
  uint64_t v2325;
  uint64_t v2326;
  uint64_t v2327;
  unint64_t v2328;
  uint64_t *v2329;
  uint64_t v2330;
  unint64_t v2331;
  uint64_t v2332;
  uint64_t v2333;
  unint64_t v2334;
  uint64_t v2335;
  unint64_t v2336;
  uint64_t *v2337;
  uint64_t v2338;
  unint64_t v2339;
  uint64_t v2340;
  uint64_t v2341;
  uint64_t *v2342;
  int v2343;
  uint64_t v2344;
  unint64_t v2345;
  uint64_t v2346;
  uint64_t v2347;
  uint64_t v2348;
  int hasArrayMode;
  unsigned int v2350;
  unsigned int v2351;
  uint64_t v2352;
  unsigned int v2353;
  uint64_t *v2354;
  uint64_t v2355;
  unint64_t v2356;
  uint64_t v2357;
  uint64_t v2358;
  uint64_t *v2359;
  uint64_t v2360;
  unint64_t v2361;
  uint64_t v2362;
  uint64_t v2363;
  uint64_t v2364;
  uint64_t v2365;
  unint64_t v2366;
  uint64_t v2367;
  uint64_t v2368;
  uint64_t *v2369;
  unint64_t v2370;
  uint64_t v2371;
  unint64_t v2372;
  uint64_t v2373;
  uint64_t v2374;
  uint64_t v2375;
  unsigned int v2376;
  uint64_t *v2377;
  uint64_t v2378;
  unint64_t v2379;
  uint64_t v2380;
  uint64_t v2381;
  BOOL v2382;
  uint64_t v2383;
  unint64_t v2384;
  uint64_t v2385;
  uint64_t *v2386;
  uint64_t v2387;
  unint64_t v2388;
  uint64_t v2389;
  uint64_t v2390;
  int v2391;
  uint64_t *v2392;
  unint64_t v2393;
  uint64_t v2394;
  unint64_t v2395;
  uint64_t v2396;
  uint64_t v2397;
  uint64_t *v2398;
  unint64_t v2399;
  uint64_t v2400;
  unint64_t v2401;
  uint64_t v2402;
  uint64_t v2403;
  uint64_t *v2404;
  int v2405;
  int v2406;
  unint64_t v2407;
  uint64_t v2408;
  unint64_t v2409;
  uint64_t v2410;
  uint64_t v2411;
  uint64_t *v2412;
  int v2413;
  int v2414;
  unint64_t v2415;
  uint64_t v2416;
  unint64_t v2417;
  uint64_t v2418;
  uint64_t v2419;
  unint64_t v2420;
  uint64_t v2421;
  unint64_t v2422;
  uint64_t v2423;
  const char *v2424;
  void *v2425;
  uint64_t v2426;
  uint64_t v2427;
  uint64_t v2428;
  uint64_t v2429;
  uint64_t v2430;
  uint64_t v2431;
  uint64_t *v2432;
  uint64_t v2433;
  unint64_t v2434;
  uint64_t v2435;
  uint64_t v2436;
  unint64_t v2437;
  uint64_t *v2438;
  uint64_t v2439;
  unint64_t v2440;
  uint64_t v2441;
  uint64_t v2442;
  _QWORD *v2443;
  _QWORD *v2444;
  unint64_t v2445;
  uint64_t *v2446;
  uint64_t v2447;
  unint64_t v2448;
  uint64_t v2449;
  uint64_t v2450;
  uint64_t v2451;
  uint64_t *v2452;
  uint64_t v2453;
  unint64_t v2454;
  uint64_t v2455;
  uint64_t v2456;
  uint64_t v2457;
  uint64_t v2458;
  unint64_t v2459;
  uint64_t v2460;
  uint64_t v2461;
  unsigned int v2462;
  int v2463;
  char v2464;
  int v2465;
  uint64_t v2466;
  int v2467;
  uint64_t v2468;
  int v2469;
  int v2470;
  int v2471;
  uint64_t *v2472;
  uint64_t *v2473;
  int v2474;
  uint64_t v2475;
  uint64_t v2476[2];
  uint64_t v2477[7];
  int v2478;
  unint64_t v2479;
  unint64_t v2480;
  __int128 v2481;
  __int128 v2482;
  unsigned __int16 v2483;
  int8x16_t v2484;
  unint64_t v2485;
  uint64_t v2486;
  uint64_t v2487;
  unsigned __int16 v2488;
  int8x16_t v2489;
  unint64_t v2490;
  uint64_t v2491;
  uint64_t v2492;
  unsigned __int16 v2493;
  int8x16_t v2494;
  unint64_t v2495;
  uint64_t v2496;
  uint64_t v2497;
  unsigned __int16 v2498;
  int8x16_t v2499;
  unint64_t v2500;
  uint64_t v2501;
  uint64_t v2502;
  uint64_t v2503[7];
  uint64_t v2504[2];
  uint64_t v2505[7];
  int v2506;
  uint64_t v2507;
  unint64_t v2508;
  unint64_t v2509;
  uint64_t v2510;
  uint64_t v2511;
  uint64_t v2512;
  int v2513;
  uint64_t v2514;
  unint64_t v2515;
  unint64_t v2516;
  uint64_t v2517;
  uint64_t v2518;
  uint64_t v2519;
  int v2520;
  uint64_t v2521;
  unint64_t v2522;
  unint64_t v2523;
  uint64_t v2524;
  uint64_t v2525;
  uint64_t v2526;
  uint64_t v2527[2];
  uint64_t v2528[3];
  __int128 v2529;
  __int128 v2530;
  uint64_t v2531[2];
  uint64_t v2532[3];
  __int128 v2533;
  __int128 v2534;
  uint64_t v2535[2];
  uint64_t v2536[3];
  __int128 v2537;
  __int128 v2538;
  uint64_t v2539[2];
  uint64_t v2540[7];
  int v2541;
  uint64_t v2542;
  unint64_t v2543;
  __int128 v2544;
  __int128 v2545;
  int v2546;
  uint64_t v2547;
  unint64_t v2548;
  __int128 v2549;
  __int128 v2550;
  int v2551;
  uint64_t v2552;
  unint64_t v2553;
  __int128 v2554;
  __int128 v2555;
  int v2556;
  unint64_t v2557;
  unint64_t v2558;
  __int128 v2559;
  __int128 v2560;
  int v2561;
  uint64_t v2562;
  unint64_t v2563;
  unint64_t v2564;
  uint64_t v2565;
  uint64_t v2566;
  uint64_t v2567;
  int v2568;
  uint64_t v2569;
  unint64_t v2570;
  unint64_t v2571;
  uint64_t v2572;
  unint64_t v2573;
  uint64_t v2574;
  unsigned __int16 v2575;
  int8x16_t v2576;
  unint64_t v2577;
  uint64_t v2578;
  uint64_t v2579;
  unsigned __int16 v2580;
  int8x16_t v2581;
  unint64_t v2582;
  uint64_t v2583;
  uint64_t v2584;
  unsigned __int16 v2585;
  int8x16_t v2586;
  unint64_t v2587;
  uint64_t v2588;
  uint64_t v2589;
  unsigned __int16 v2590;
  unint64_t v2591;
  int8x16_t v2592;
  uint64_t v2593;
  uint64_t v2594;
  unsigned __int16 v2595;
  unint64_t v2596;
  unint64_t v2597;
  unint64_t v2598;
  uint64_t v2599;
  uint64_t v2600;
  unsigned __int16 v2601;
  int8x16_t v2602;
  unint64_t v2603;
  uint64_t v2604;
  uint64_t v2605;
  unsigned __int16 v2606;
  int8x16_t v2607;
  unint64_t v2608;
  uint64_t v2609;
  uint64_t v2610;
  uint64_t v2611[7];
  uint64_t v2612[7];
  uint64_t v2613[3];
  __int128 v2614;
  __int128 v2615;
  uint64_t v2616[7];
  uint64_t v2617[7];
  uint64_t v2618[3];
  __int128 v2619;
  __int128 v2620;
  uint64_t v2621[3];
  __int128 v2622;
  __int128 v2623;
  uint64_t v2624[2];
  __int128 v2625;
  __int128 v2626;
  uint64_t v2627;
  int v2628;
  uint64_t v2629;
  __int128 v2630;
  __int128 v2631;
  uint64_t v2632;
  uint64_t v2633[2];
  uint64_t v2634[3];
  __int128 v2635;
  __int128 v2636;
  int v2637;
  unint64_t v2638;
  unint64_t v2639;
  __int128 v2640;
  __int128 v2641;
  uint64_t v2642[2];
  uint64_t v2643[3];
  __int128 v2644;
  __int128 v2645;
  int v2646;
  uint64_t v2647;
  unint64_t v2648;
  __int128 v2649;
  __int128 v2650;
  uint64_t v2651[3];
  __int128 v2652;
  __int128 v2653;
  int v2654;
  unint64_t v2655;
  unint64_t v2656;
  __int128 v2657;
  __int128 v2658;
  uint64_t v2659[3];
  __int128 v2660;
  __int128 v2661;
  int v2662;
  unint64_t v2663;
  unint64_t v2664;
  __int128 v2665;
  __int128 v2666;
  uint64_t v2667[2];
  uint64_t v2668[3];
  __int128 v2669;
  __int128 v2670;
  uint64_t v2671[2];
  uint64_t v2672[3];
  __int128 v2673;
  __int128 v2674;
  unsigned __int16 v2675;
  int8x16_t v2676;
  unint64_t v2677;
  uint64_t v2678;
  uint64_t v2679;
  uint64_t v2680[2];
  uint64_t v2681[3];
  __int128 v2682;
  __int128 v2683;
  int v2684;
  uint64_t v2685;
  unint64_t v2686;
  __int128 v2687;
  __int128 v2688;
  unsigned __int16 v2689;
  int8x16_t v2690;
  unint64_t v2691;
  uint64_t v2692;
  uint64_t v2693;
  int v2694;
  uint64_t v2695;
  unint64_t v2696;
  __int128 v2697;
  __int128 v2698;
  uint64_t v2699[3];
  __int128 v2700;
  __int128 v2701;
  uint64_t v2702[2];
  uint64_t v2703[7];
  uint64_t v2704[3];
  __int128 v2705;
  __int128 v2706;
  uint64_t v2707[2];
  uint64_t v2708[7];
  int v2709;
  unint64_t v2710;
  unint64_t v2711;
  __int128 v2712;
  __int128 v2713;
  uint64_t v2714[2];
  uint64_t v2715[7];
  int v2716;
  unint64_t v2717;
  unint64_t v2718;
  __int128 v2719;
  __int128 v2720;
  uint64_t v2721[2];
  uint64_t v2722[7];
  int v2723;
  uint64_t v2724;
  unint64_t v2725;
  __int128 v2726;
  __int128 v2727;
  unsigned __int16 v2728;
  int8x16_t v2729;
  unint64_t v2730;
  uint64_t v2731;
  uint64_t v2732;
  uint64_t v2733[2];
  uint64_t v2734[3];
  __int128 v2735;
  __int128 v2736;
  uint64_t v2737[2];
  uint64_t v2738[3];
  __int128 v2739;
  __int128 v2740;
  unsigned __int16 v2741;
  int8x16_t v2742;
  unint64_t v2743;
  uint64_t v2744;
  uint64_t v2745;
  int v2746;
  uint64_t v2747;
  unint64_t v2748;
  __int128 v2749;
  __int128 v2750;
  int v2751;
  unint64_t v2752;
  unint64_t v2753;
  __int128 v2754;
  __int128 v2755;
  unsigned __int16 v2756;
  int8x16_t v2757;
  unint64_t v2758;
  uint64_t v2759;
  uint64_t v2760;
  unsigned __int16 v2761;
  int8x16_t v2762;
  unint64_t v2763;
  uint64_t v2764;
  uint64_t v2765;
  int v2766;
  uint64_t v2767;
  unint64_t v2768;
  __int128 v2769;
  __int128 v2770;
  uint64_t v2771[3];
  __int128 v2772;
  __int128 v2773;
  uint64_t v2774[2];
  uint64_t v2775[3];
  __int128 v2776;
  __int128 v2777;
  unsigned __int16 v2778;
  unint64_t v2779;
  int8x16_t v2780;
  uint64_t v2781;
  uint64_t v2782;
  unsigned __int16 v2783;
  unint64_t v2784;
  unint64_t v2785;
  unint64_t v2786;
  uint64_t v2787;
  uint64_t v2788;
  uint64_t v2789[2];
  uint64_t v2790[3];
  __int128 v2791;
  __int128 v2792;
  int v2793;
  uint64_t v2794;
  unint64_t v2795;
  unint64_t v2796;
  uint64_t v2797;
  uint64_t v2798;
  uint64_t v2799;
  uint64_t v2800[7];
  int v2801;
  uint64_t v2802;
  unint64_t v2803;
  unint64_t v2804;
  uint64_t v2805;
  uint64_t v2806;
  uint64_t v2807;
  uint64_t v2808[7];
  uint64_t v2809[7];
  int v2810;
  uint64_t v2811;
  unint64_t v2812;
  unint64_t v2813;
  uint64_t v2814;
  uint64_t v2815;
  uint64_t v2816;
  uint64_t v2817[7];
  int v2818;
  uint64_t v2819;
  unint64_t v2820;
  unint64_t v2821;
  uint64_t v2822;
  uint64_t v2823;
  uint64_t v2824;
  __int16 v2825;
  __int128 v2826;
  uint64_t v2827;
  uint64_t v2828;
  uint64_t v2829;
  int v2830;
  uint64_t v2831;
  unint64_t v2832;
  unint64_t v2833;
  uint64_t v2834;
  uint64_t v2835;
  uint64_t v2836;
  int v2837;
  uint64_t v2838;
  unint64_t v2839;
  unint64_t v2840;
  uint64_t v2841;
  uint64_t v2842;
  uint64_t v2843;
  int v2844;
  uint64_t v2845;
  unint64_t v2846;
  unint64_t v2847;
  uint64_t v2848;
  uint64_t v2849;
  uint64_t v2850;
  uint64_t v2851[2];
  uint64_t v2852[7];
  int v2853;
  uint64_t v2854;
  unint64_t v2855;
  unint64_t v2856;
  uint64_t v2857;
  uint64_t v2858;
  uint64_t v2859;
  __int16 v2860;
  __int128 v2861;
  uint64_t v2862;
  uint64_t v2863;
  uint64_t v2864;
  uint64_t v2865[2];
  uint64_t v2866[2];
  __int128 v2867;
  __int128 v2868;
  uint64_t v2869;
  uint64_t v2870[2];
  uint64_t v2871[2];
  __int128 v2872;
  __int128 v2873;
  uint64_t v2874;
  int v2875;
  unint64_t v2876;
  __int128 v2877;
  __int128 v2878;
  uint64_t v2879;
  int v2880;
  uint64_t v2881;
  __int128 v2882;
  __int128 v2883;
  uint64_t v2884;
  uint64_t v2885[2];
  uint64_t v2886[3];
  __int128 v2887;
  __int128 v2888;
  int v2889;
  uint64_t v2890;
  unint64_t v2891;
  __int128 v2892;
  __int128 v2893;
  __int16 v2894;
  unint64_t v2895;
  unint64_t v2896;
  unint64_t v2897;
  uint64_t v2898;
  uint64_t v2899;
  __int16 v2900;
  unint64_t v2901;
  int8x16_t v2902;
  uint64_t v2903;
  uint64_t v2904;
  __int16 v2905;
  unint64_t v2906;
  int8x16_t v2907;
  uint64_t v2908;
  uint64_t v2909;
  __int16 v2910;
  unint64_t v2911;
  int8x16_t v2912;
  uint64_t v2913;
  uint64_t v2914;
  int v2915;
  uint64_t v2916;
  unint64_t v2917;
  __int128 v2918;
  __int128 v2919;
  int v2920;
  uint64_t v2921;
  unint64_t v2922;
  __int128 v2923;
  __int128 v2924;
  int v2925;
  uint64_t v2926;
  unint64_t v2927;
  __int128 v2928;
  __int128 v2929;
  int v2930;
  uint64_t v2931;
  unint64_t v2932;
  __int128 v2933;
  __int128 v2934;
  int v2935;
  uint64_t v2936;
  __int128 v2937;
  __int128 v2938;
  uint64_t v2939;
  __int16 v2940;
  int8x16_t v2941;
  unint64_t v2942;
  uint64_t v2943;
  uint64_t v2944;
  __int16 v2945;
  unint64_t v2946;
  uint64_t v2947;
  uint64_t v2948;
  uint64_t v2949;
  uint64_t v2950;
  __int16 v2951;
  unint64_t v2952;
  __int128 v2953;
  __int128 v2954;
  __int16 v2955;
  unint64_t v2956;
  uint64_t v2957;
  uint64_t v2958;
  uint64_t v2959;
  uint64_t v2960;
  __int16 v2961;
  unint64_t v2962;
  int8x16_t v2963;
  uint64_t v2964;
  uint64_t v2965;
  __int16 v2966;
  unint64_t v2967;
  int8x16_t v2968;
  uint64_t v2969;
  uint64_t v2970;
  __int16 v2971;
  int8x16_t v2972;
  unint64_t v2973;
  uint64_t v2974;
  uint64_t v2975;
  __int16 v2976;
  unint64_t v2977;
  int8x16_t v2978;
  uint64_t v2979;
  uint64_t v2980;
  int v2981;
  uint64_t v2982;
  unint64_t v2983;
  unint64_t v2984;
  uint64_t v2985;
  uint64_t v2986;
  uint64_t v2987;
  int v2988;
  uint64_t v2989;
  unint64_t v2990;
  unint64_t v2991;
  uint64_t v2992;
  uint64_t v2993;
  uint64_t v2994;
  uint64_t v2995[2];
  uint64_t v2996[7];
  __int16 v2997;
  int8x16_t v2998;
  unint64_t v2999;
  uint64_t v3000;
  uint64_t v3001;
  __int16 v3002;
  int8x16_t v3003;
  unint64_t v3004;
  uint64_t v3005;
  uint64_t v3006;
  __int16 v3007;
  unint64_t v3008;
  unint64_t v3009;
  unint64_t v3010;
  uint64_t v3011;
  uint64_t v3012;
  __int16 v3013;
  unint64_t v3014;
  int8x16_t v3015;
  uint64_t v3016;
  uint64_t v3017;
  __int16 v3018;
  unint64_t v3019;
  int8x16_t v3020;
  uint64_t v3021;
  uint64_t v3022;
  __int16 v3023;
  int8x16_t v3024;
  unint64_t v3025;
  uint64_t v3026;
  uint64_t v3027;
  __int16 v3028;
  unint64_t v3029;
  int8x16_t v3030;
  uint64_t v3031;
  uint64_t v3032;
  __int16 v3033;
  unint64_t v3034;
  int8x16_t v3035;
  uint64_t v3036;
  uint64_t v3037;
  __int16 v3038;
  unint64_t v3039;
  int8x16_t v3040;
  uint64_t v3041;
  uint64_t v3042;
  __int16 v3043;
  unint64_t v3044;
  int8x16_t v3045;
  uint64_t v3046;
  uint64_t v3047;
  __int16 v3048;
  unint64_t v3049;
  int8x16_t v3050;
  uint64_t v3051;
  uint64_t v3052;
  __int16 v3053;
  __int128 v3054;
  uint64_t v3055;
  uint64_t v3056;
  uint64_t v3057;
  __int16 v3058;
  __int128 v3059;
  uint64_t v3060;
  uint64_t v3061;
  uint64_t v3062;
  __int16 v3063;
  int8x16_t v3064;
  unint64_t v3065;
  uint64_t v3066;
  uint64_t v3067;
  __int16 v3068;
  unint64_t v3069;
  int8x16_t v3070;
  uint64_t v3071;
  uint64_t v3072;
  __int16 v3073;
  int8x16_t v3074;
  unint64_t v3075;
  uint64_t v3076;
  uint64_t v3077;
  __int16 v3078;
  int8x16_t v3079;
  unint64_t v3080;
  uint64_t v3081;
  uint64_t v3082;
  __int16 v3083;
  int8x16_t v3084;
  unint64_t v3085;
  uint64_t v3086;
  uint64_t v3087;
  _OWORD v3088[2];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = v4;
  v2473 = v9;
  v10 = (uint64_t)v3;
  v11 = v2;
  if (*(int *)(v2 + 952) <= 0)
  {
    v2348 = v4;
    hasArrayMode = JSC::DFG::Node::hasArrayMode(v3);
    v8 = v2348;
    if (hasArrayMode)
    {
      v2350 = *(unsigned __int16 *)(v10 + 18);
      if (v2350 > 0xC9)
      {
        if (v2350 - 202 > 0x3E || ((1 << (v2350 + 54)) & 0x400000000E002FEFLL) == 0)
        {
          v2351 = v2350 - 333;
          if (v2351 > 0x3A || ((1 << v2351) & 0x7A8000000000003) == 0)
          {
LABEL_3813:
            JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Unhandled ArrayMode opcode.");
            __break(0xC471u);
            JUMPOUT(0x19835F2ECLL);
          }
        }
        goto LABEL_3556;
      }
      v2464 = v2350 - 101;
      if (v2350 - 101 > 0x3E)
        goto LABEL_3812;
      if (((1 << v2464) & 0x7E0070000000000FLL) != 0)
      {
LABEL_3556:
        v214 = *v2473;
LABEL_3557:
        v215 = 16387;
LABEL_2067:
        return;
      }
      v8 = v2348;
      if (((1 << v2464) & 0x18000000000) == 0)
      {
LABEL_3812:
        if (v2350 - 92 >= 2)
          goto LABEL_3813;
        goto LABEL_3556;
      }
    }
  }
  v12 = *(unsigned __int16 *)(v10 + 18);
  v13 = (uint64_t)v2775;
  v14 = (uint64_t)&v2483;
  switch(*(_WORD *)(v10 + 18))
  {
    case 0:
    case 1:
    case 2:
      v22 = *(_QWORD *)(v10 + 72);
      v23 = *(_QWORD *)(v10 + 32);
      v24 = *(_QWORD *)(v10 + 24) & 0xFFFCFFFFFFFFFFFFLL;
      v25 = v23 & 0xFFFCFFFFFFFFFFFFLL;
      v26 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v27 = *(_QWORD *)v8;
      v28 = *(_QWORD *)v8 + 32;
      v29 = *(_QWORD *)(*(_QWORD *)v8 + 16);
      v30 = *(_DWORD *)(*(_QWORD *)v8 + 12832);
      if (v30)
      {
        v31 = v30 - 1;
        if ((_DWORD)v23)
        {
          while (1)
          {
            v32 = v31;
            v33 = (_QWORD *)(v28 + 56 * v31);
            if (!v33[5]
              && *(unsigned __int16 *)v33 == (_DWORD)v12
              && v33[4] == v22
              && v33[1] == v24
              && v33[2] == v25
              && v33[3] == v26)
            {
              break;
            }
            --v31;
            if (!v32)
              goto LABEL_19;
          }
LABEL_28:
          v37 = *(JSC::DFG::Node **)(v28 + 56 * v32 + 48);
          if (v37)
          {
            JSC::DFG::Node::replaceWith(v29, *(JSC::DFG::Graph **)v27, v37, (uint64_t)&v2483, v5, v6, v8, v7);
            *(_BYTE *)(v27 + 8) = 1;
          }
          return;
        }
        do
        {
          v32 = v31;
          v36 = (_QWORD *)(v28 + 56 * v31);
          if (!v36[5]
            && *(unsigned __int16 *)v36 == (_DWORD)v12
            && v36[4] == v22
            && v36[1] == v24
            && v36[2] == v25
            && v36[3] == v26)
          {
            goto LABEL_28;
          }
          --v31;
        }
        while (v32);
LABEL_19:
        v34 = *(_DWORD *)(*(_QWORD *)v8 + 12832);
        if (v30 >= 0x64)
        {
          __break(0xC471u);
          JUMPOUT(0x19835838CLL);
        }
      }
      else
      {
        v34 = 0;
      }
      *(_DWORD *)(v27 + 12832) = v30 + 1;
      v35 = v28 + 56 * v34;
      *(_WORD *)v35 = v12;
      *(_QWORD *)(v35 + 8) = v24;
      *(_QWORD *)(v35 + 16) = v25;
      *(_QWORD *)(v35 + 24) = v26;
      *(_QWORD *)(v35 + 32) = v22;
      *(_QWORD *)(v35 + 40) = 0;
      *(_QWORD *)(v35 + 48) = v29;
      return;
    case 3:
    case 4:
    case 5:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1D:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x60:
    case 0x61:
    case 0x84:
    case 0x85:
    case 0x8C:
    case 0x8D:
    case 0x90:
    case 0xAA:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0x101:
    case 0x102:
    case 0x113:
    case 0x117:
    case 0x118:
    case 0x126:
    case 0x129:
    case 0x153:
    case 0x154:
    case 0x166:
    case 0x16C:
    case 0x16D:
    case 0x16E:
    case 0x16F:
    case 0x170:
    case 0x171:
    case 0x172:
    case 0x173:
    case 0x174:
    case 0x175:
    case 0x176:
    case 0x177:
    case 0x17B:
    case 0x1A2:
    case 0x1A3:
    case 0x1A4:
    case 0x1A5:
    case 0x1A6:
    case 0x1A7:
    case 0x1A8:
    case 0x1A9:
    case 0x1AA:
      return;
    case 6:
      v518 = *v2473;
      v519 = *(_DWORD *)(*v2473 + 12836);
      if (!v519)
        return;
      for (i = 0; i < v519; ++i)
      {
        v521 = v518 + 72 * i;
        v522 = *(_QWORD *)(v521 + 5640);
        if (v522 == 16407)
        {
LABEL_708:
          v528 = v521 + 5632;
          v529 = v519 - 1;
          *(_DWORD *)(v518 + 12836) = v529;
          v530 = v518 + 72 * v529;
          --i;
          *(_OWORD *)v528 = *(_OWORD *)(v530 + 5632);
          v531 = *(_OWORD *)(v530 + 5648);
          v532 = *(_OWORD *)(v530 + 5664);
          v533 = *(_OWORD *)(v530 + 5680);
          *(_QWORD *)(v528 + 64) = *(_QWORD *)(v530 + 5696);
          *(_OWORD *)(v528 + 32) = v532;
          *(_OWORD *)(v528 + 48) = v533;
          *(_OWORD *)(v528 + 16) = v531;
          v519 = *(_DWORD *)(v518 + 12836);
        }
        else
        {
          LOWORD(v523) = 16407;
          while (1)
          {
            v524 = v523 & 0x3FFF;
            if (v524 == 1)
              break;
            if (v524 == 2)
              v525 = 16385;
            else
              v525 = 16387;
            if (v524 == 3)
              v523 = 16385;
            else
              v523 = v525;
            if (v523 == v522)
              goto LABEL_708;
          }
          while (1)
          {
            v526 = v522 & 0x3FFF;
            if (v526 == 1)
              break;
            if (v526 == 2)
              v527 = 16385;
            else
              v527 = 16387;
            if ((v522 & 0x4000) != 0)
              v522 = v527;
            else
              v522 = v526 | 0x4000u;
            if (v526 == 40)
              v522 = 16385;
            if (v526 == 3)
              v522 = 16385;
            if (v522 == 16407)
              goto LABEL_708;
          }
        }
      }
      return;
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0x54:
    case 0x5E:
    case 0x5F:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x8E:
    case 0x8F:
    case 0xA7:
    case 0xA8:
    case 0xB0:
    case 0xB1:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xD4:
    case 0xD5:
    case 0xD8:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
    case 0x100:
    case 0x124:
    case 0x125:
    case 0x13B:
    case 0x13C:
    case 0x13D:
    case 0x140:
    case 0x141:
    case 0x147:
    case 0x14D:
    case 0x14E:
    case 0x14F:
    case 0x150:
    case 0x151:
    case 0x152:
    case 0x155:
    case 0x156:
    case 0x181:
    case 0x185:
    case 0x186:
    case 0x19B:
      v112 = *v2473;
      v113 = *(_DWORD *)(*v2473 + 12836);
      if (!v113)
        return;
      v114 = 0;
      while (1)
      {
        v115 = v112 + 72 * v114;
        v116 = *(_QWORD *)(v115 + 5640);
        if (v116 != 16387)
          break;
LABEL_134:
        v120 = v115 + 5632;
        v121 = v113 - 1;
        *(_DWORD *)(v112 + 12836) = v121;
        v122 = v112 + 72 * v121;
        --v114;
        *(_OWORD *)v120 = *(_OWORD *)(v122 + 5632);
        v123 = *(_OWORD *)(v122 + 5648);
        v124 = *(_OWORD *)(v122 + 5664);
        v125 = *(_OWORD *)(v122 + 5680);
        *(_QWORD *)(v120 + 64) = *(_QWORD *)(v122 + 5696);
        *(_OWORD *)(v120 + 32) = v124;
        *(_OWORD *)(v120 + 48) = v125;
        *(_OWORD *)(v120 + 16) = v123;
        v113 = *(_DWORD *)(v112 + 12836);
LABEL_135:
        if (++v114 >= v113)
          return;
      }
      LOWORD(v117) = 16387;
      while (1)
      {
        v118 = v117 & 0x3FFF;
        if (v118 == 1)
          break;
        if (v118 == 2)
          v119 = 16385;
        else
          v119 = 16387;
        if (v118 == 3)
          v117 = 16385;
        else
          v117 = v119;
        if (v117 == v116)
          goto LABEL_134;
      }
      while (1)
      {
        v127 = v116 & 0x3FFF;
        if (v127 == 1)
          goto LABEL_135;
        if (v127 == 3)
          goto LABEL_143;
        v126 = 16385;
        if (v127 != 40)
        {
          if ((v116 & 0x4000) != 0)
          {
            if (v127 != 2)
              goto LABEL_134;
LABEL_143:
            v126 = 16385;
            goto LABEL_144;
          }
          v126 = v127 | 0x4000u;
        }
LABEL_144:
        LOWORD(v116) = v126;
        if (v126 == 16387)
          goto LABEL_134;
      }
    case 0xB:
      v2880 = 36;
      v2882 = 0u;
      v2883 = 0u;
      v2881 = 98306;
      v2884 = 0;
      v107 = *(_QWORD *)v8;
      v108 = &v2880;
      goto LABEL_119;
    case 0xC:
      return;
    case 0xD:
      v905 = *(_QWORD *)(v10 + 72);
      if (v905)
      {
        v1465 = (HIDWORD(*(_QWORD *)(v905 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v905 + 24) >> 28) >> 24 << 20)) + 4;
        v906 = ((unint64_t)v1465 << 15) | ((unint64_t)(v1465 >> 31) << 47) | 2;
      }
      else
      {
        v906 = 131074;
      }
      v2875 = 37;
      v2876 = v906;
      v2877 = 0u;
      v2878 = 0u;
      v2879 = 0;
      v107 = *(_QWORD *)v8;
      v108 = &v2875;
      goto LABEL_119;
    case 0xE:
      return;
    case 0xF:
      v78 = *(_QWORD **)(v10 + 72);
      v79 = v78;
      do
      {
        v80 = v79;
        v79 = (_QWORD *)*v79;
      }
      while (v79);
      if (v80 != v78)
      {
        *v78 = v80;
        v78 = *(_QWORD **)(v10 + 72);
      }
      v81 = v78;
      do
      {
        v82 = v81;
        v81 = (_QWORD *)*v81;
      }
      while (v81);
      if (v82 != v78)
        *v78 = v82;
      v83 = (v82[3] << 15) | 2;
      v84 = *(uint64_t **)v8;
      v85 = *(unsigned int *)(*(_QWORD *)v8 + 12836);
      if ((_DWORD)v85)
      {
        v86 = v85 - 1;
        while (1)
        {
          v87 = v86;
          v88 = &v84[9 * v86];
          if (*((_DWORD *)v88 + 1408) == 36)
          {
            v89 = v88 + 704;
            if (v89[1] == v83 && !v89[2] && v89[4] <= 3uLL && !v89[3] && !v89[5] && !v89[6])
              break;
          }
          --v86;
          if (!v87)
            goto LABEL_99;
        }
        v231 = &v84[9 * v86];
        v92 = v231[711];
        v91 = v231[712];
        if (v91 > 3 || v92 != 0)
        {
LABEL_101:
          *(_QWORD *)&v3088[0] = v92;
          *((_QWORD *)&v3088[0] + 1) = v91;
          if (v91 > 3 || v92)
          {
            v94 = v84[2];
            if (*(_WORD *)(v94 + 18) == 15)
            {
              *(_QWORD *)(v94 + 24) = 0;
              v95 = *v84;
              v96 = *(_DWORD *)(*v84 + 944);
              if (v96 && v96 != 2)
              {
                if ((_BYTE)qword_1ECF4C32A || byte_1ECF4C323 || BYTE2(qword_1ECF4C32A))
                  WTF::dataLog<char [16]>("Dethreading DFG graph.\n");
                v612 = *(unsigned int *)(v95 + 60);
                while ((_DWORD)v612)
                {
                  if (*(_DWORD *)(v95 + 60) <= --v612)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19835F7D8);
                  }
                  v613 = *(_QWORD *)(*(_QWORD *)(v95 + 48) + 8 * v612);
                  if (v613)
                  {
                    v614 = *(_DWORD *)(v613 + 36);
                    if (v614)
                    {
                      v615 = v614 - 1;
                      v616 = 8 * v615;
                      do
                      {
                        if (*(_DWORD *)(v613 + 36) <= v615)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19835F708);
                        }
                        v617 = *(_QWORD **)(*(_QWORD *)(v613 + 24) + v616);
                        v617[3] = 0;
                        v617[4] = 0;
                        v617[5] = 0;
                        v616 -= 8;
                        --v615;
                      }
                      while (v615 != -1);
                    }
                  }
                }
                *(_DWORD *)(v95 + 944) = 0;
              }
            }
            if (v10 && v84[2] == v10)
            {
              v98 = v84[3];
              *(_QWORD *)(JSC::DFG::LazyNode::ensureIsNode((uint64_t *)v3088, (uint64_t)(v84 + 1605), v98, 0, v5, v6, v8, v7)+ 96) = v98;
              JSC::DFG::Node::replaceWith(v84[2], (JSC::DFG::Graph *)*v84, *(JSC::DFG::Node **)&v3088[0], v99, v100, v101, v102, v103);
              *((_BYTE *)v84 + 8) = 1;
            }
          }
          return;
        }
LABEL_99:
        v90 = *(_DWORD *)(*(_QWORD *)v8 + 12836);
        if (v85 >= 0x64)
        {
          __break(0xC471u);
          JUMPOUT(0x19835B180);
        }
      }
      else
      {
        v90 = 0;
      }
      v91 = 0;
      v92 = 0;
      *((_DWORD *)v84 + 3209) = v85 + 1;
      v93 = &v84[9 * v90];
      *((_DWORD *)v93 + 1408) = 36;
      v93[705] = v83;
      *((_OWORD *)v93 + 353) = 0u;
      *((_OWORD *)v93 + 354) = 0u;
      v93[710] = 0;
      v93[711] = v10;
      v93[712] = 0;
      goto LABEL_101;
    case 0x10:
      v15 = *(_QWORD **)(v10 + 72);
      v16 = v15;
      do
      {
        v17 = v16;
        v16 = (_QWORD *)*v16;
      }
      while (v16);
      if (v17 != v15)
        *v15 = v17;
      v18 = *v2473;
      v19 = *(_DWORD *)(*v2473 + 12836);
      if (!v19)
        goto LABEL_47;
      v20 = 0;
      v21 = (v17[3] << 15) | 2;
      do
      {
        v44 = v18 + 72 * v20;
        v45 = *(_QWORD *)(v44 + 5640);
        if (v45 == v21)
        {
LABEL_30:
          v38 = v44 + 5632;
          v39 = v19 - 1;
          *(_DWORD *)(v18 + 12836) = v39;
          v40 = v18 + 72 * v39;
          --v20;
          *(_OWORD *)v38 = *(_OWORD *)(v40 + 5632);
          v41 = *(_OWORD *)(v40 + 5648);
          v42 = *(_OWORD *)(v40 + 5664);
          v43 = *(_OWORD *)(v40 + 5680);
          *(_QWORD *)(v38 + 64) = *(_QWORD *)(v40 + 5696);
          *(_OWORD *)(v38 + 32) = v42;
          *(_OWORD *)(v38 + 48) = v43;
          *(_OWORD *)(v38 + 16) = v41;
          v19 = *(_DWORD *)(v18 + 12836);
        }
        else
        {
          LOWORD(v46) = v21;
          while (1)
          {
            v47 = v46 & 0x3FFF;
            if (v47 == 1)
              break;
            if (v47 == 2)
              v48 = 16385;
            else
              v48 = 16387;
            if ((v46 & 0x4000) != 0)
              v46 = v48;
            else
              v46 = v47 | 0x4000u;
            if (v47 == 40)
              v46 = 16385;
            if (v47 == 3)
              v46 = 16385;
            if (v46 == v45)
              goto LABEL_30;
          }
        }
        ++v20;
      }
      while (v20 < v19);
LABEL_47:
      v49 = *(_QWORD **)(v10 + 72);
      v50 = v49;
      do
      {
        v51 = v50;
        v50 = (_QWORD *)*v50;
      }
      while (v50);
      if (v51 != v49)
        *v49 = v51;
      v52 = v51[3];
      v53 = *(_QWORD *)(v10 + 24);
      v54 = v53 & 0xFF00FFFFFFFFFFFFLL;
      if ((v53 & 0xFF00FFFFFFFFFFFFLL) != 0
        && (v77 = *(unsigned __int16 *)((v53 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v77 <= 2))
      {
        v55 = *(_QWORD *)((v53 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        if ((_DWORD)v77)
        {
          if ((_DWORD)v77 != 1)
            v77 = 2;
          v55 |= v77;
        }
      }
      else
      {
        v55 = 0;
      }
      v56 = (v52 << 15) | 2;
      v57 = *(_QWORD *)v8;
      v58 = *(_DWORD *)(*(_QWORD *)v8 + 12836);
      if (v58)
      {
        v59 = v58 - 1;
        while (1)
        {
          v60 = v59;
          v61 = v57 + 72 * v59;
          if (*(_DWORD *)(v61 + 5632) == 36)
          {
            v62 = (_QWORD *)(v61 + 5632);
            if (v62[1] == v56 && !v62[2] && v62[4] <= 3uLL && !v62[3] && !v62[5] && !v62[6])
              break;
          }
          --v59;
          if (!v60)
            goto LABEL_63;
        }
        v140 = v57 + 72 * v59;
        v65 = *(_QWORD *)(v140 + 5688);
        v64 = *(_QWORD *)(v140 + 5696);
        if (v64 > 3 || v65 != 0)
          goto LABEL_65;
LABEL_63:
        v63 = *(_DWORD *)(*(_QWORD *)v8 + 12836);
        if (v58 >= 0x64)
        {
          __break(0xC471u);
          JUMPOUT(0x198359108);
        }
      }
      else
      {
        v63 = 0;
      }
      v64 = 0;
      v65 = 0;
      *(_DWORD *)(v57 + 12836) = v58 + 1;
      v66 = v57 + 72 * v63;
      *(_DWORD *)(v66 + 5632) = 36;
      *(_QWORD *)(v66 + 5640) = v56;
      *(_OWORD *)(v66 + 5648) = 0u;
      *(_OWORD *)(v66 + 5664) = 0u;
      *(_QWORD *)(v66 + 5680) = 0;
      *(_QWORD *)(v66 + 5688) = v54;
      *(_QWORD *)(v66 + 5696) = v55;
LABEL_65:
      *(_QWORD *)&v3088[0] = v65;
      *((_QWORD *)&v3088[0] + 1) = v64;
      if (v64 > 3 || v65)
      {
        v67 = *(_QWORD *)(v57 + 16);
        if (*(_WORD *)(v67 + 18) == 15)
        {
          *(_QWORD *)(v67 + 24) = 0;
          v68 = *(_QWORD *)v57;
          v69 = *(_DWORD *)(*(_QWORD *)v57 + 944);
          if (v69 && v69 != 2)
          {
            if ((_BYTE)qword_1ECF4C32A || byte_1ECF4C323 || BYTE2(qword_1ECF4C32A))
              WTF::dataLog<char [16]>("Dethreading DFG graph.\n");
            v401 = *(unsigned int *)(v68 + 60);
            while ((_DWORD)v401)
            {
              if (*(_DWORD *)(v68 + 60) <= --v401)
              {
                __break(0xC471u);
                JUMPOUT(0x19835F750);
              }
              v402 = *(_QWORD *)(*(_QWORD *)(v68 + 48) + 8 * v401);
              if (v402)
              {
                v403 = *(_DWORD *)(v402 + 36);
                if (v403)
                {
                  v404 = v403 - 1;
                  v405 = 8 * v404;
                  do
                  {
                    if (*(_DWORD *)(v402 + 36) <= v404)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19835F5D8);
                    }
                    v406 = *(_QWORD **)(*(_QWORD *)(v402 + 24) + v405);
                    v406[3] = 0;
                    v406[4] = 0;
                    v406[5] = 0;
                    v405 -= 8;
                    --v404;
                  }
                  while (v404 != -1);
                }
              }
            }
            *(_DWORD *)(v68 + 944) = 0;
          }
        }
        if (v54 && *(_QWORD *)(v57 + 16) == v54)
        {
          v71 = *(_QWORD *)(v57 + 24);
          *(_QWORD *)(JSC::DFG::LazyNode::ensureIsNode((uint64_t *)v3088, v57 + 12840, v71, 0, v5, v6, v8, v7) + 96) = v71;
          JSC::DFG::Node::replaceWith(*(_QWORD *)(v57 + 16), *(JSC::DFG::Graph **)v57, *(JSC::DFG::Node **)&v3088[0], v72, v73, v74, v75, v76);
          *(_BYTE *)(v57 + 8) = 1;
        }
      }
      return;
    case 0x11:
      v2445 = (**(_QWORD **)(v10 + 72) << 15) | 2;
      v2446 = (uint64_t *)v8;
      LODWORD(v2866[0]) = 36;
      v2866[1] = v2445;
      v2867 = 0u;
      v2868 = 0u;
      v2869 = 0;
      JSC::DFG::LazyNode::LazyNode(v2865, (JSC::DFG::Node *)(*(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0x12:
      v1417 = *(_QWORD *)(v10 + 72);
      v1418 = 2;
      goto LABEL_3791;
    case 0x13:
      v2451 = (**(_QWORD **)(v10 + 72) << 15) | 2;
      LODWORD(v2871[0]) = 36;
      v2872 = 0u;
      v2873 = 0u;
      v2871[1] = v2451;
      v2874 = 0;
      v2452 = (uint64_t *)v8;
      JSC::DFG::LazyNode::LazyNode(v2870, (JSC::DFG::Node *)v10);
      return;
    case 0x1C:
      v104 = *(_QWORD **)(v10 + 72);
      v105 = v104;
      do
      {
        v106 = v105;
        v105 = (_QWORD *)*v105;
      }
      while (v105);
      if (v106 != v104)
        *v104 = v106;
      return;
    case 0x1E:
      v631 = *(unsigned int *)(v10 + 72);
      v2997 = 30;
      v632 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v2998 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v2999 = v632;
      v3000 = v631;
      v3001 = 0;
      v110 = *(_QWORD *)v8;
      v111 = &v2997;
      goto LABEL_121;
    case 0x22:
      return;
    case 0x28:
      v2935 = 23;
      v2936 = 16422;
      v2937 = 0u;
      v2938 = 0u;
      v2939 = 0;
      v107 = *(_QWORD *)v8;
      v108 = &v2935;
      goto LABEL_119;
    case 0x29:
      v2334 = *(_QWORD *)(v10 + 24);
      if (((v2334 >> 50) & 0x3F) - 26 > 2)
        goto LABEL_3556;
      v3018 = 41;
      v3019 = v2334 & 0xFFFCFFFFFFFFFFFFLL;
      v3020 = vandq_s8(*(int8x16_t *)(v10 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v3022 = 0;
      v3021 = 0;
      v110 = *(_QWORD *)v8;
      v111 = &v3018;
      goto LABEL_121;
    case 0x2A:
      v1127 = *(_QWORD *)(v10 + 24);
      if ((v1127 & 0xFC000000000000) == 0)
        goto LABEL_3556;
      v3013 = 42;
      v3014 = v1127 & 0xFFFCFFFFFFFFFFFFLL;
      v3015 = vandq_s8(*(int8x16_t *)(v10 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v3017 = 0;
      v3016 = 0;
      v110 = *(_QWORD *)v8;
      v111 = &v3013;
      goto LABEL_121;
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x32:
    case 0x34:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
      v673 = *(_QWORD *)(v10 + 24);
      v674 = (v673 >> 50) & 0x3F;
      switch((_DWORD)v674)
      {
        case 0x1A:
          v1256 = *(_QWORD *)(v10 + 32);
          v1257 = v1256 & 0xFC000000000000;
          v1258 = 0x68000000000000;
          break;
        case 0x1C:
          v1256 = *(_QWORD *)(v10 + 32);
          v1257 = v1256 & 0xFC000000000000;
          v1258 = 0x70000000000000;
          break;
        case 0x1B:
          v1256 = *(_QWORD *)(v10 + 32);
          v1257 = v1256 & 0xFC000000000000;
          v1258 = 0x6C000000000000;
          break;
        default:
          goto LABEL_928;
      }
      if (v1257 != v1258)
      {
LABEL_928:
        v675 = *v2473;
        v676 = *(_DWORD *)(*v2473 + 12836);
        if (!v676)
          return;
        v677 = 0;
        while (1)
        {
          v678 = v675 + 72 * v677;
          v679 = *(_QWORD *)(v678 + 5640);
          if (v679 != 16387)
            break;
LABEL_940:
          v683 = v678 + 5632;
          v684 = v676 - 1;
          *(_DWORD *)(v675 + 12836) = v684;
          v685 = v675 + 72 * v684;
          --v677;
          *(_OWORD *)v683 = *(_OWORD *)(v685 + 5632);
          v686 = *(_OWORD *)(v685 + 5648);
          v687 = *(_OWORD *)(v685 + 5664);
          v688 = *(_OWORD *)(v685 + 5680);
          *(_QWORD *)(v683 + 64) = *(_QWORD *)(v685 + 5696);
          *(_OWORD *)(v683 + 32) = v687;
          *(_OWORD *)(v683 + 48) = v688;
          *(_OWORD *)(v683 + 16) = v686;
          v676 = *(_DWORD *)(v675 + 12836);
LABEL_941:
          if (++v677 >= v676)
            return;
        }
        LOWORD(v680) = 16387;
        while (1)
        {
          v681 = v680 & 0x3FFF;
          if (v681 == 1)
            break;
          if (v681 == 2)
            v682 = 16385;
          else
            v682 = 16387;
          if (v681 == 3)
            v680 = 16385;
          else
            v680 = v682;
          if (v680 == v679)
            goto LABEL_940;
        }
        while (1)
        {
          v690 = v679 & 0x3FFF;
          if (v690 == 1)
            goto LABEL_941;
          if (v690 == 3)
            goto LABEL_949;
          v689 = 16385;
          if (v690 != 40)
          {
            if ((v679 & 0x4000) != 0)
            {
              if (v690 != 2)
                goto LABEL_940;
LABEL_949:
              v689 = 16385;
              goto LABEL_950;
            }
            v689 = v690 | 0x4000u;
          }
LABEL_950:
          LOWORD(v679) = v689;
          if (v689 == 16387)
            goto LABEL_940;
        }
      }
      v2894 = *(_WORD *)(v10 + 18);
      v1259 = v673 & 0xFFFCFFFFFFFFFFFFLL;
      v1260 = v1256 & 0xFFFCFFFFFFFFFFFFLL;
      v1261 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v2895 = v1259;
      v2896 = v1260;
      v2899 = 0;
      v2897 = v1261;
      v2898 = 0;
      v110 = *(_QWORD *)v8;
      v111 = &v2894;
      goto LABEL_121;
    case 0x2C:
    case 0x2E:
    case 0x30:
    case 0x31:
    case 0x33:
    case 0x35:
      v216 = *(_QWORD *)(v10 + 24);
      if ((v216 & 0xFC000000000000) == 0)
        goto LABEL_3556;
      v217 = *(_QWORD *)(v10 + 32);
      if ((v217 & 0xFC000000000000) == 0)
        goto LABEL_3556;
      v3007 = *(_WORD *)(v10 + 18);
      v218 = v216 & 0xFFFCFFFFFFFFFFFFLL;
      v219 = v217 & 0xFFFCFFFFFFFFFFFFLL;
      v220 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v3008 = v218;
      v3009 = v219;
      v3012 = 0;
      v3010 = v220;
      v3011 = 0;
      v110 = *(_QWORD *)v8;
      v111 = &v3007;
      goto LABEL_121;
    case 0x36:
    case 0x38:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x43:
    case 0x4A:
    case 0x5B:
    case 0x86:
    case 0xA5:
    case 0xA6:
    case 0xA9:
    case 0xBB:
    case 0xBC:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xEE:
    case 0xF0:
    case 0x128:
    case 0x12A:
    case 0x12D:
    case 0x12E:
    case 0x12F:
    case 0x130:
    case 0x133:
    case 0x134:
    case 0x137:
    case 0x138:
    case 0x139:
    case 0x13A:
    case 0x14B:
    case 0x14C:
    case 0x17C:
      v3078 = *(_WORD *)(v10 + 18);
      v109 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v3079 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v3081 = 0;
      v3082 = 0;
      v3080 = v109;
      v110 = *(_QWORD *)v8;
      v111 = &v3078;
      goto LABEL_121;
    case 0x37:
    case 0x39:
    case 0x3E:
    case 0x45:
      v164 = *(unsigned int *)(v10 + 72);
      v2971 = *(_WORD *)(v10 + 18);
      v165 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v2972 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v2973 = v165;
      v2974 = v164;
      v2975 = 0;
      v110 = *(_QWORD *)v8;
      v111 = &v2971;
      goto LABEL_121;
    case 0x3F:
      v2164 = *(_QWORD *)(v10 + 24);
      if (((v2164 >> 50) & 0x3F) - 1 > 1)
        goto LABEL_3556;
      v3033 = 63;
      v3034 = v2164 & 0xFFFCFFFFFFFFFFFFLL;
      v3035 = vandq_s8(*(int8x16_t *)(v10 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v3037 = 0;
      v3036 = 0;
      v110 = *(_QWORD *)v8;
      v111 = &v3033;
      goto LABEL_121;
    case 0x40:
    case 0x42:
    case 0x44:
      v280 = *(_QWORD *)(v10 + 24);
      v281 = (v280 >> 50) & 0x3F;
      if (((v280 >> 50) & 0x3F) > 0x30)
      {
        if ((_DWORD)v281 != 49 && (_DWORD)v281 != 52)
        {
LABEL_3721:
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x19835E840);
        }
        goto LABEL_625;
      }
      if ((_DWORD)v281 == 1)
      {
LABEL_625:
        v471 = *(unsigned int *)(v10 + 72);
        v2966 = *(_WORD *)(v10 + 18);
        v2968 = vandq_s8(*(int8x16_t *)(v10 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
        v2967 = v280 & 0xFFFCFFFFFFFFFFFFLL;
        v2969 = v471;
        v2970 = 0;
        v110 = *(_QWORD *)v8;
        v111 = &v2966;
LABEL_121:
        return;
      }
      if ((_DWORD)v281)
        goto LABEL_3721;
      goto LABEL_3556;
    case 0x41:
      v934 = *(_QWORD *)(v10 + 24);
      v935 = (v934 >> 50) & 0x3F;
      if (v935 > 0x34 || ((1 << v935) & 0x12000000000002) == 0)
        goto LABEL_3556;
      v936 = *(unsigned int *)(v10 + 72);
      v3028 = 65;
      v3029 = v934 & 0xFFFCFFFFFFFFFFFFLL;
      v3030 = vandq_s8(*(int8x16_t *)(v10 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v3031 = v936;
      v3032 = 0;
      v110 = *(_QWORD *)v8;
      v111 = &v3028;
      goto LABEL_121;
    case 0x46:
      v1146 = *(_QWORD *)(v10 + 24);
      v1147 = (v1146 >> 50) & 0x3F;
      if ((_DWORD)v1147 != 49 && (_DWORD)v1147 != 1)
        goto LABEL_3556;
      v1148 = *(unsigned int *)(v10 + 72);
      v3038 = 70;
      v3039 = v1146 & 0xFFFCFFFFFFFFFFFFLL;
      v3040 = vandq_s8(*(int8x16_t *)(v10 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v3041 = v1148;
      v3042 = 0;
      v110 = *(_QWORD *)v8;
      v111 = &v3038;
      goto LABEL_121;
    case 0x47:
    case 0x48:
      v3058 = *(_WORD *)(v10 + 18);
      v3059 = *(_OWORD *)(v10 + 24);
      v3060 = *(_QWORD *)(v10 + 40);
      v3061 = 0;
      v3062 = v11;
      v110 = *(_QWORD *)v8;
      v111 = &v3058;
      goto LABEL_121;
    case 0x49:
    case 0x50:
      v1213 = *(_QWORD *)(v10 + 24);
      if ((v1213 & 0xFC000000000000) != 0xC4000000000000)
        goto LABEL_3556;
      v3043 = *(_WORD *)(v10 + 18);
      v3044 = v1213 & 0xFFFCFFFFFFFFFFFFLL;
      v3045 = vandq_s8(*(int8x16_t *)(v10 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v3047 = 0;
      v3046 = 0;
      v110 = *(_QWORD *)v8;
      v111 = &v3043;
      goto LABEL_121;
    case 0x4B:
      v1294 = *v2473;
      v1295 = *(_DWORD *)(*v2473 + 12836);
      if (!v1295)
        return;
      for (j = 0; j < v1295; ++j)
      {
        v1297 = v1294 + 72 * j;
        v1298 = *(_QWORD *)(v1297 + 5640);
        if (v1298 == 16409)
        {
LABEL_1950:
          v1304 = v1297 + 5632;
          v1305 = v1295 - 1;
          *(_DWORD *)(v1294 + 12836) = v1305;
          v1306 = v1294 + 72 * v1305;
          --j;
          *(_OWORD *)v1304 = *(_OWORD *)(v1306 + 5632);
          v1307 = *(_OWORD *)(v1306 + 5648);
          v1308 = *(_OWORD *)(v1306 + 5664);
          v1309 = *(_OWORD *)(v1306 + 5680);
          *(_QWORD *)(v1304 + 64) = *(_QWORD *)(v1306 + 5696);
          *(_OWORD *)(v1304 + 32) = v1308;
          *(_OWORD *)(v1304 + 48) = v1309;
          *(_OWORD *)(v1304 + 16) = v1307;
          v1295 = *(_DWORD *)(v1294 + 12836);
        }
        else
        {
          LOWORD(v1299) = 16409;
          while (1)
          {
            v1300 = v1299 & 0x3FFF;
            if (v1300 == 1)
              break;
            if (v1300 == 2)
              v1301 = 16385;
            else
              v1301 = 16387;
            if (v1300 == 3)
              v1299 = 16385;
            else
              v1299 = v1301;
            if (v1299 == v1298)
              goto LABEL_1950;
          }
          while (1)
          {
            v1302 = v1298 & 0x3FFF;
            if (v1302 == 1)
              break;
            if (v1302 == 2)
              v1303 = 16385;
            else
              v1303 = 16387;
            if ((v1298 & 0x4000) != 0)
              v1298 = v1303;
            else
              v1298 = v1302 | 0x4000u;
            if (v1302 == 40)
              v1298 = 16385;
            if (v1302 == 3)
              v1298 = 16385;
            if (v1298 == 16409)
              goto LABEL_1950;
          }
        }
      }
      return;
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
      v1075 = *(_QWORD *)(v10 + 24);
      if ((v1075 & 0xFC000000000000) != 0xC4000000000000)
        goto LABEL_3556;
      v1076 = *(int *)(v10 + 72);
      v2961 = *(_WORD *)(v10 + 18);
      v2963 = vandq_s8(*(int8x16_t *)(v10 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v2962 = v1075 & 0xFFFCFFFFFFFFFFFFLL;
      v2964 = v1076;
      v2965 = 0;
      v110 = *(_QWORD *)v8;
      v111 = &v2961;
      goto LABEL_121;
    case 0x51:
      v1128 = *(_QWORD *)(v10 + 24);
      if ((v1128 & 0xFC000000000000) == 0xC4000000000000)
      {
        v1129 = *(unsigned int *)(v10 + 72);
        v3048 = 81;
        v3049 = v1128 & 0xFFFCFFFFFFFFFFFFLL;
        v3050 = vandq_s8(*(int8x16_t *)(v10 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
        v3051 = v1129;
        v3052 = 0;
        v110 = *(_QWORD *)v8;
        v111 = &v3048;
        goto LABEL_121;
      }
      v1449 = *v2473;
      v1450 = *(_DWORD *)(*v2473 + 12836);
      if (!v1450)
        return;
      v1451 = 0;
      while (1)
      {
        v1452 = v1449 + 72 * v1451;
        v1453 = *(_QWORD *)(v1452 + 5640);
        if (v1453 != 16387)
          break;
LABEL_2180:
        v1457 = v1452 + 5632;
        v1458 = v1450 - 1;
        *(_DWORD *)(v1449 + 12836) = v1458;
        v1459 = v1449 + 72 * v1458;
        --v1451;
        *(_OWORD *)v1457 = *(_OWORD *)(v1459 + 5632);
        v1460 = *(_OWORD *)(v1459 + 5648);
        v1461 = *(_OWORD *)(v1459 + 5664);
        v1462 = *(_OWORD *)(v1459 + 5680);
        *(_QWORD *)(v1457 + 64) = *(_QWORD *)(v1459 + 5696);
        *(_OWORD *)(v1457 + 32) = v1461;
        *(_OWORD *)(v1457 + 48) = v1462;
        *(_OWORD *)(v1457 + 16) = v1460;
        v1450 = *(_DWORD *)(v1449 + 12836);
LABEL_2181:
        if (++v1451 >= v1450)
          return;
      }
      LOWORD(v1454) = 16387;
      while (1)
      {
        v1455 = v1454 & 0x3FFF;
        if (v1455 == 1)
          break;
        if (v1455 == 2)
          v1456 = 16385;
        else
          v1456 = 16387;
        if (v1455 == 3)
          v1454 = 16385;
        else
          v1454 = v1456;
        if (v1454 == v1453)
          goto LABEL_2180;
      }
      while (1)
      {
        v1464 = v1453 & 0x3FFF;
        if (v1464 == 1)
          goto LABEL_2181;
        if (v1464 == 3)
          goto LABEL_2189;
        v1463 = 16385;
        if (v1464 != 40)
        {
          if ((v1453 & 0x4000) != 0)
          {
            if (v1464 != 2)
              goto LABEL_2180;
LABEL_2189:
            v1463 = 16385;
            goto LABEL_2190;
          }
          v1463 = v1464 | 0x4000u;
        }
LABEL_2190:
        LOWORD(v1453) = v1463;
        if (v1463 == 16387)
          goto LABEL_2180;
      }
    case 0x52:
    case 0x53:
      v1325 = *(_QWORD *)(v10 + 24);
      v1326 = (v1325 >> 50) & 0x3F;
      if ((_DWORD)v1326)
      {
        if (v1326 > 0x34 || ((1 << v1326) & 0x1200001C000002) == 0)
        {
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x19835F180);
        }
        v2900 = *(_WORD *)(v10 + 18);
        v2901 = v1325 & 0xFFFCFFFFFFFFFFFFLL;
        v2902 = vandq_s8(*(int8x16_t *)(v10 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
        v2904 = 0;
        v2903 = 0;
        v110 = *(_QWORD *)v8;
        v111 = &v2900;
        goto LABEL_121;
      }
      v1327 = *v2473;
      v1328 = *(_DWORD *)(*v2473 + 12836);
      if (!v1328)
        return;
      v1329 = 0;
      while (1)
      {
        v1330 = v1327 + 72 * v1329;
        v1331 = *(_QWORD *)(v1330 + 5640);
        if (v1331 != 16387)
          break;
LABEL_1986:
        v1335 = v1330 + 5632;
        v1336 = v1328 - 1;
        *(_DWORD *)(v1327 + 12836) = v1336;
        v1337 = v1327 + 72 * v1336;
        --v1329;
        *(_OWORD *)v1335 = *(_OWORD *)(v1337 + 5632);
        v1338 = *(_OWORD *)(v1337 + 5648);
        v1339 = *(_OWORD *)(v1337 + 5664);
        v1340 = *(_OWORD *)(v1337 + 5680);
        *(_QWORD *)(v1335 + 64) = *(_QWORD *)(v1337 + 5696);
        *(_OWORD *)(v1335 + 32) = v1339;
        *(_OWORD *)(v1335 + 48) = v1340;
        *(_OWORD *)(v1335 + 16) = v1338;
        v1328 = *(_DWORD *)(v1327 + 12836);
LABEL_1987:
        if (++v1329 >= v1328)
          return;
      }
      LOWORD(v1332) = 16387;
      while (1)
      {
        v1333 = v1332 & 0x3FFF;
        if (v1333 == 1)
          break;
        if (v1333 == 2)
          v1334 = 16385;
        else
          v1334 = 16387;
        if (v1333 == 3)
          v1332 = 16385;
        else
          v1332 = v1334;
        if (v1332 == v1331)
          goto LABEL_1986;
      }
      while (1)
      {
        v1342 = v1331 & 0x3FFF;
        if (v1342 == 1)
          goto LABEL_1987;
        if (v1342 == 3)
          goto LABEL_1995;
        v1341 = 16385;
        if (v1342 != 40)
        {
          if ((v1331 & 0x4000) != 0)
          {
            if (v1342 != 2)
              goto LABEL_1986;
LABEL_1995:
            v1341 = 16385;
            goto LABEL_1996;
          }
          v1341 = v1342 | 0x4000u;
        }
LABEL_1996:
        LOWORD(v1331) = v1341;
        if (v1341 == 16387)
          goto LABEL_1986;
      }
    case 0x5C:
    case 0x5D:
      v153 = *(unsigned int *)(v10 + 72);
      v154 = *(_DWORD *)(v10 + 56) & 7;
      if (v154 >= 2)
      {
        switch(v154)
        {
          case 3u:
            v155 = 13;
            break;
          case 4u:
            v155 = 17;
            break;
          case 5u:
            v155 = 19;
            break;
          case 7u:
            __break(0xC471u);
            JUMPOUT(0x19835F33CLL);
          default:
            __break(0xC471u);
            JUMPOUT(0x19835F36CLL);
        }
      }
      else
      {
        v155 = 21;
      }
      switch(*(_DWORD *)(v10 + 72))
      {
        case 0u:
        case 1u:
        case 2u:
          goto LABEL_3556;
        case 3u:
          return;
        case 4u:
        case 0x17u:
        case 0x18u:
          v339 = *v2473;
          v340 = *(_DWORD *)(*v2473 + 12836);
          if (!v340)
            return;
          v341 = 0;
          while (1)
          {
            v342 = v339 + 72 * v341;
            v343 = *(_QWORD *)(v342 + 5640);
            if (v343 != 16387)
              break;
LABEL_461:
            v347 = v342 + 5632;
            v348 = v340 - 1;
            *(_DWORD *)(v339 + 12836) = v348;
            v349 = v339 + 72 * v348;
            --v341;
            *(_OWORD *)v347 = *(_OWORD *)(v349 + 5632);
            v350 = *(_OWORD *)(v349 + 5648);
            v351 = *(_OWORD *)(v349 + 5664);
            v352 = *(_OWORD *)(v349 + 5680);
            *(_QWORD *)(v347 + 64) = *(_QWORD *)(v349 + 5696);
            *(_OWORD *)(v347 + 32) = v351;
            *(_OWORD *)(v347 + 48) = v352;
            *(_OWORD *)(v347 + 16) = v350;
            v340 = *(_DWORD *)(v339 + 12836);
LABEL_462:
            if (++v341 >= v340)
              return;
          }
          LOWORD(v344) = 16387;
          while (1)
          {
            v345 = v344 & 0x3FFF;
            if (v345 == 1)
              break;
            if (v345 == 2)
              v346 = 16385;
            else
              v346 = 16387;
            if (v345 == 3)
              v344 = 16385;
            else
              v344 = v346;
            if (v344 == v343)
              goto LABEL_461;
          }
          while (1)
          {
            v354 = v343 & 0x3FFF;
            if (v354 == 1)
              goto LABEL_462;
            if (v354 == 3)
              goto LABEL_470;
            v353 = 16385;
            if (v354 != 40)
            {
              if ((v343 & 0x4000) != 0)
              {
                if (v354 != 2)
                  goto LABEL_461;
LABEL_470:
                v353 = 16385;
                goto LABEL_471;
              }
              v353 = v354 | 0x4000u;
            }
LABEL_471:
            LOWORD(v343) = v353;
            if (v353 == 16387)
              goto LABEL_461;
          }
        case 5u:
          if (BYTE2(v153) - 3 <= 1)
            goto LABEL_3556;
          v2860 = *(_WORD *)(v10 + 18);
          v2861 = *(_OWORD *)(v10 + 24);
          v2862 = *(_QWORD *)(v10 + 40);
          v2863 = v153;
          v2864 = v11;
          v110 = *(_QWORD *)v8;
          v111 = &v2860;
          goto LABEL_121;
        case 6u:
          v2825 = *(_WORD *)(v10 + 18);
          v2826 = *(_OWORD *)(v10 + 24);
          v2827 = *(_QWORD *)(v10 + 40);
          v2828 = 0;
          v2829 = v11;
          v110 = *(_QWORD *)v8;
          v111 = &v2825;
          goto LABEL_121;
        case 7u:
          if (BYTE2(v153) <= 3u && BYTE2(v153) != 2)
          {
            if (BYTE2(v153) == 3)
              v510 = 18;
            else
              v510 = v155;
            v511 = *(_QWORD *)(v10 + 24);
            v512 = *(_DWORD *)(v11 + 164);
            if (v512 <= v511)
            {
              __break(0xC471u);
              JUMPOUT(0x19835FC28);
            }
            v513 = v511 + 1;
            if (v512 <= (int)v511 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19835FC30);
            }
            v514 = *(_QWORD *)(v11 + 152);
            v515 = *(_QWORD *)(v514 + 8 * *(_QWORD *)(v10 + 24));
            v516 = *(_QWORD *)(v514 + 8 * v513) & 0xFF00FFFFFFFFFFFFLL;
            if (v516
              && (v844 = *(unsigned __int16 *)((*(_QWORD *)(v514 + 8 * v513) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                  v844 <= 2))
            {
              v517 = *(_QWORD *)(v516 + 72);
              if ((_DWORD)v844)
              {
                if ((_DWORD)v844 != 1)
                  v844 = 2;
                v517 |= v844;
              }
            }
            else
            {
              v517 = 0;
            }
            v2844 = v510;
            v2845 = 16400;
            v2846 = v515 & 0xFF00FFFFFFFFFFFFLL;
            v2847 = v516;
            v2848 = v517;
            v2850 = 0;
            v2849 = 0;
            v107 = *(_QWORD *)v8;
            v108 = &v2844;
LABEL_119:
            return;
          }
          v889 = *v2473;
          v890 = *(_DWORD *)(*v2473 + 12836);
          if (!v890)
            return;
          v891 = 0;
          while (1)
          {
            v892 = v889 + 72 * v891;
            v893 = *(_QWORD *)(v892 + 5640);
            if (v893 != 16387)
              break;
LABEL_1282:
            v897 = v892 + 5632;
            v898 = v890 - 1;
            *(_DWORD *)(v889 + 12836) = v898;
            v899 = v889 + 72 * v898;
            --v891;
            *(_OWORD *)v897 = *(_OWORD *)(v899 + 5632);
            v900 = *(_OWORD *)(v899 + 5648);
            v901 = *(_OWORD *)(v899 + 5664);
            v902 = *(_OWORD *)(v899 + 5680);
            *(_QWORD *)(v897 + 64) = *(_QWORD *)(v899 + 5696);
            *(_OWORD *)(v897 + 32) = v901;
            *(_OWORD *)(v897 + 48) = v902;
            *(_OWORD *)(v897 + 16) = v900;
            v890 = *(_DWORD *)(v889 + 12836);
LABEL_1283:
            if (++v891 >= v890)
              return;
          }
          LOWORD(v894) = 16387;
          while (1)
          {
            v895 = v894 & 0x3FFF;
            if (v895 == 1)
              break;
            if (v895 == 2)
              v896 = 16385;
            else
              v896 = 16387;
            if (v895 == 3)
              v894 = 16385;
            else
              v894 = v896;
            if (v894 == v893)
              goto LABEL_1282;
          }
          while (1)
          {
            v904 = v893 & 0x3FFF;
            if (v904 == 1)
              goto LABEL_1283;
            if (v904 == 3)
              goto LABEL_1291;
            v903 = 16385;
            if (v904 != 40)
            {
              if ((v893 & 0x4000) != 0)
              {
                if (v904 != 2)
                  goto LABEL_1282;
LABEL_1291:
                v903 = 16385;
                goto LABEL_1292;
              }
              v903 = v904 | 0x4000u;
            }
LABEL_1292:
            LOWORD(v893) = v903;
            if (v903 == 16387)
              goto LABEL_1282;
          }
        case 8u:
          if (BYTE2(v153) >= 2u)
          {
            if (BYTE2(v153) != 3)
              goto LABEL_3556;
            if (v154 == 3)
              goto LABEL_3693;
          }
          else if (v154 == 3)
          {
            if (!BYTE2(v153))
            {
              v601 = 14;
              goto LABEL_833;
            }
LABEL_3693:
            if (BYTE2(v153) == 3)
              v601 = 15;
            else
              v601 = 13;
LABEL_833:
            v602 = *(_QWORD *)(v10 + 24);
            v603 = *(_DWORD *)(v11 + 164);
            if (v603 <= v602)
            {
              __break(0xC471u);
              JUMPOUT(0x19835FBF8);
            }
            v604 = v602 + 1;
            if (v603 <= (int)v602 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19835FC00);
            }
            v605 = *(_QWORD *)(v11 + 152);
            v606 = *(_QWORD *)(v605 + 8 * *(_QWORD *)(v10 + 24));
            v607 = *(_QWORD *)(v605 + 8 * v604) & 0xFF00FFFFFFFFFFFFLL;
            if (v607
              && (v747 = *(unsigned __int16 *)((*(_QWORD *)(v605 + 8 * v604) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                  v747 <= 2))
            {
              v608 = *(_QWORD *)(v607 + 72);
              if ((_DWORD)v747)
              {
                if ((_DWORD)v747 != 1)
                  v747 = 2;
                v608 |= v747;
              }
            }
            else
            {
              v608 = 0;
            }
            v2837 = v601;
            v2838 = 16401;
            v2839 = v606 & 0xFF00FFFFFFFFFFFFLL;
            v2840 = v607;
            v2841 = v608;
            v2843 = 0;
            v2842 = 0;
            v107 = *(_QWORD *)v8;
            v108 = &v2837;
            goto LABEL_119;
          }
          v601 = 16;
          goto LABEL_833;
        case 9u:
          if (BYTE2(v153) <= 3u && BYTE2(v153) != 2)
          {
            if (BYTE2(v153) == 3)
              v156 = 20;
            else
              v156 = v155;
            v157 = *(_QWORD *)(v10 + 24);
            v158 = *(_DWORD *)(v11 + 164);
            if (v158 <= v157)
            {
              __break(0xC471u);
              JUMPOUT(0x19835F880);
            }
            v159 = v157 + 1;
            if (v158 <= (int)v157 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19835F888);
            }
            v160 = *(_QWORD *)(v11 + 152);
            v161 = *(_QWORD *)(v160 + 8 * *(_QWORD *)(v10 + 24));
            v162 = *(_QWORD *)(v160 + 8 * v159) & 0xFF00FFFFFFFFFFFFLL;
            if (v162
              && (v338 = *(unsigned __int16 *)((*(_QWORD *)(v160 + 8 * v159) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                  v338 <= 2))
            {
              v163 = *(_QWORD *)(v162 + 72);
              if ((_DWORD)v338)
              {
                if ((_DWORD)v338 != 1)
                  v338 = 2;
                v163 |= v338;
              }
            }
            else
            {
              v163 = 0;
            }
            v2830 = v156;
            v2831 = 16402;
            v2832 = v161 & 0xFF00FFFFFFFFFFFFLL;
            v2833 = v162;
            v2834 = v163;
            v2836 = 0;
            v2835 = 0;
            v107 = *(_QWORD *)v8;
            v108 = &v2830;
            goto LABEL_119;
          }
          v407 = *v2473;
          v408 = *(_DWORD *)(*v2473 + 12836);
          if (!v408)
            return;
          v409 = 0;
          while (1)
          {
            v410 = v407 + 72 * v409;
            v411 = *(_QWORD *)(v410 + 5640);
            if (v411 != 16387)
              break;
LABEL_549:
            v415 = v410 + 5632;
            v416 = v408 - 1;
            *(_DWORD *)(v407 + 12836) = v416;
            v417 = v407 + 72 * v416;
            --v409;
            *(_OWORD *)v415 = *(_OWORD *)(v417 + 5632);
            v418 = *(_OWORD *)(v417 + 5648);
            v419 = *(_OWORD *)(v417 + 5664);
            v420 = *(_OWORD *)(v417 + 5680);
            *(_QWORD *)(v415 + 64) = *(_QWORD *)(v417 + 5696);
            *(_OWORD *)(v415 + 32) = v419;
            *(_OWORD *)(v415 + 48) = v420;
            *(_OWORD *)(v415 + 16) = v418;
            v408 = *(_DWORD *)(v407 + 12836);
LABEL_550:
            if (++v409 >= v408)
              return;
          }
          LOWORD(v412) = 16387;
          while (1)
          {
            v413 = v412 & 0x3FFF;
            if (v413 == 1)
              break;
            if (v413 == 2)
              v414 = 16385;
            else
              v414 = 16387;
            if (v413 == 3)
              v412 = 16385;
            else
              v412 = v414;
            if (v412 == v411)
              goto LABEL_549;
          }
          while (1)
          {
            v422 = v411 & 0x3FFF;
            if (v422 == 1)
              goto LABEL_550;
            if (v422 == 3)
              goto LABEL_558;
            v421 = 16385;
            if (v422 != 40)
            {
              if ((v411 & 0x4000) != 0)
              {
                if (v422 != 2)
                  goto LABEL_549;
LABEL_558:
                v421 = 16385;
                goto LABEL_559;
              }
              v421 = v422 | 0x4000u;
            }
LABEL_559:
            LOWORD(v411) = v421;
            if (v421 == 16387)
              goto LABEL_549;
          }
        case 0xAu:
        case 0xBu:
          if (BYTE2(v153) < 2u)
            return;
          v2148 = *v2473;
          v2149 = *(_DWORD *)(*v2473 + 12836);
          if (!v2149)
            return;
          v2150 = 0;
          while (1)
          {
            v2151 = v2148 + 72 * v2150;
            v2152 = *(_QWORD *)(v2151 + 5640);
            if (v2152 != 16387)
              break;
LABEL_3424:
            v2156 = v2151 + 5632;
            v2157 = v2149 - 1;
            *(_DWORD *)(v2148 + 12836) = v2157;
            v2158 = v2148 + 72 * v2157;
            --v2150;
            *(_OWORD *)v2156 = *(_OWORD *)(v2158 + 5632);
            v2159 = *(_OWORD *)(v2158 + 5648);
            v2160 = *(_OWORD *)(v2158 + 5664);
            v2161 = *(_OWORD *)(v2158 + 5680);
            *(_QWORD *)(v2156 + 64) = *(_QWORD *)(v2158 + 5696);
            *(_OWORD *)(v2156 + 32) = v2160;
            *(_OWORD *)(v2156 + 48) = v2161;
            *(_OWORD *)(v2156 + 16) = v2159;
            v2149 = *(_DWORD *)(v2148 + 12836);
LABEL_3425:
            if (++v2150 >= v2149)
              return;
          }
          LOWORD(v2153) = 16387;
          while (1)
          {
            v2154 = v2153 & 0x3FFF;
            if (v2154 == 1)
              break;
            if (v2154 == 2)
              v2155 = 16385;
            else
              v2155 = 16387;
            if (v2154 == 3)
              v2153 = 16385;
            else
              v2153 = v2155;
            if (v2153 == v2152)
              goto LABEL_3424;
          }
          break;
        case 0xCu:
          if (BYTE2(v153) > 1u)
            goto LABEL_3556;
          v1343 = *(_QWORD *)(v10 + 24);
          v1344 = *(_DWORD *)(v11 + 164);
          if (v1344 <= v1343)
          {
            __break(0xC471u);
            JUMPOUT(0x19835FD10);
          }
          v1345 = v1343 + 1;
          if (v1344 <= (int)v1343 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19835FD18);
          }
          v1346 = *(_QWORD *)(v11 + 152);
          v1347 = *(_QWORD *)(v1346 + 8 * *(_QWORD *)(v10 + 24));
          v1348 = *(_QWORD *)(v1346 + 8 * v1345) & 0xFF00FFFFFFFFFFFFLL;
          if (v1348
            && (v2171 = *(unsigned __int16 *)((*(_QWORD *)(v1346 + 8 * v1345) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                v2171 <= 2))
          {
            v1349 = *(_QWORD *)(v1348 + 72);
            if ((_DWORD)v2171)
            {
              if ((_DWORD)v2171 != 1)
                v2171 = 2;
              v1349 |= v2171;
            }
          }
          else
          {
            v1349 = 0;
          }
          v2853 = v155;
          v2854 = 16404;
          v2855 = v1347 & 0xFF00FFFFFFFFFFFFLL;
          v2856 = v1348;
          v2857 = v1349;
          v2859 = 0;
          v2858 = 0;
          v107 = *(_QWORD *)v8;
          v108 = &v2853;
          goto LABEL_119;
        case 0xDu:
          v2375 = *(_QWORD *)(v10 + 24);
          v2376 = *(_DWORD *)(v11 + 164);
          if (v2376 <= v2375)
          {
            __break(0xC471u);
            JUMPOUT(0x19835FDFCLL);
          }
          if (v2376 <= (int)v2375 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19835FE04);
          }
          v2377 = (uint64_t *)v8;
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v2852, v155, 16405, *(_QWORD *)(*(_QWORD *)(v11 + 152) + 8 * *(_QWORD *)(v10 + 24)), *(_QWORD *)(*(_QWORD *)(v11 + 152) + 8 * (*(_QWORD *)(v10 + 24) + 1)), 0);
          JSC::DFG::LazyNode::LazyNode(v2851, (JSC::DFG::Node *)v10);
          return;
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          if ((v153 & 0x40000000) != 0)
            goto LABEL_3717;
          v501 = *(_QWORD *)(v10 + 24);
          v502 = *(_DWORD *)(v11 + 164);
          if (v502 <= v501)
          {
            __break(0xC471u);
            JUMPOUT(0x19835FBE8);
          }
          v503 = v501 + 1;
          if (v502 <= (int)v501 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19835FBF0);
          }
          v504 = *(_QWORD *)(v11 + 152);
          v505 = *(_QWORD *)(v504 + 8 * *(_QWORD *)(v10 + 24));
          v506 = *(_QWORD *)(v504 + 8 * v503) & 0xFF00FFFFFFFFFFFFLL;
          if (v506
            && (v739 = *(unsigned __int16 *)((*(_QWORD *)(v504 + 8 * v503) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                v739 <= 2))
          {
            v507 = *(_QWORD *)(v506 + 72);
            if ((_DWORD)v739)
            {
              if ((_DWORD)v739 != 1)
                v739 = 2;
              v507 |= v739;
            }
          }
          else
          {
            v507 = 0;
          }
          v2818 = v155;
          v2819 = 16406;
          v2820 = v505 & 0xFF00FFFFFFFFFFFFLL;
          v2821 = v506;
          v2822 = v507;
          v2824 = 0;
          v2823 = 0;
          v107 = *(_QWORD *)v8;
          v108 = &v2818;
          goto LABEL_119;
        case 0x19u:
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for get");
          __break(0xC471u);
          JUMPOUT(0x19835EAFCLL);
        default:
          __break(0xC471u);
          JUMPOUT(0x19835EB54);
      }
      while (1)
      {
        v2163 = v2152 & 0x3FFF;
        if (v2163 == 1)
          goto LABEL_3425;
        if (v2163 == 3)
          goto LABEL_3433;
        v2162 = 16385;
        if (v2163 != 40)
        {
          if ((v2152 & 0x4000) != 0)
          {
            if (v2163 != 2)
              goto LABEL_3424;
LABEL_3433:
            v2162 = 16385;
            goto LABEL_3434;
          }
          v2162 = v2163 | 0x4000u;
        }
LABEL_3434:
        LOWORD(v2152) = v2162;
        if (v2162 == 16387)
          goto LABEL_3424;
      }
    case 0x62:
      goto LABEL_3556;
    case 0x63:
      v2273 = *(_DWORD **)(v10 + 72);
      v2274 = v2273[6];
      if (v2274)
      {
        v2275 = v2274 - 1;
        do
        {
          --v2275;
        }
        while (v2275 != -1);
      }
      return;
    case 0x64:
      v2289 = *(_DWORD **)(v10 + 72);
      v2290 = v2289[6];
      if (v2290)
      {
        v2291 = v2290 - 1;
        do
        {
          --v2291;
        }
        while (v2291 != -1);
      }
      return;
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
      v253 = *(_QWORD *)(v10 + 24);
      v254 = *(_DWORD *)(v11 + 164);
      if (v254 <= v253)
      {
        __break(0xC471u);
        JUMPOUT(0x19835F990);
      }
      if (v254 <= (int)v253 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19835F998);
      }
      v255 = v253 + 2;
      if (v254 <= (int)v253 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x19835F9A0);
      }
      v256 = *(_QWORD *)(v11 + 152);
      v257 = *(_QWORD *)(v256 + 8 * (v253 + 1));
      v258 = *(_DWORD *)(v10 + 72);
      v259 = *(_QWORD *)(v256 + 8 * v255);
      if ((*(_DWORD *)(v10 + 56) & 7u) >= 2)
      {
        switch(*(_DWORD *)(v10 + 56) & 7)
        {
          case 3:
            v260 = 13;
            break;
          case 4:
            v260 = 17;
            break;
          case 5:
            v260 = 19;
            break;
          case 7:
            __break(0xC471u);
            JUMPOUT(0x19835F3F0);
          default:
            __break(0xC471u);
            JUMPOUT(0x19835F420);
        }
      }
      else
      {
        v260 = 21;
      }
      v261 = *(_QWORD *)(v256 + 8 * *(_QWORD *)(v10 + 24)) & 0xFF00FFFFFFFFFFFFLL;
      v262 = v257 & 0xFF00FFFFFFFFFFFFLL;
      v263 = v259 & 0xFF00FFFFFFFFFFFFLL;
      switch(*(_DWORD *)(v10 + 72))
      {
        case 0u:
        case 1u:
        case 2u:
        case 6u:
          goto LABEL_3556;
        case 3u:
          return;
        case 4u:
        case 5u:
        case 0xCu:
        case 0xDu:
        case 0x17u:
        case 0x18u:
          v485 = *v2473;
          v486 = *(_DWORD *)(*v2473 + 12836);
          if (!v486)
            return;
          v487 = 0;
          while (1)
          {
            v488 = v485 + 72 * v487;
            v489 = *(_QWORD *)(v488 + 5640);
            if (v489 != 16387)
              break;
LABEL_651:
            v493 = v488 + 5632;
            v494 = v486 - 1;
            *(_DWORD *)(v485 + 12836) = v494;
            v495 = v485 + 72 * v494;
            --v487;
            *(_OWORD *)v493 = *(_OWORD *)(v495 + 5632);
            v496 = *(_OWORD *)(v495 + 5648);
            v497 = *(_OWORD *)(v495 + 5664);
            v498 = *(_OWORD *)(v495 + 5680);
            *(_QWORD *)(v493 + 64) = *(_QWORD *)(v495 + 5696);
            *(_OWORD *)(v493 + 32) = v497;
            *(_OWORD *)(v493 + 48) = v498;
            *(_OWORD *)(v493 + 16) = v496;
            v486 = *(_DWORD *)(v485 + 12836);
LABEL_652:
            if (++v487 >= v486)
              return;
          }
          LOWORD(v490) = 16387;
          while (1)
          {
            v491 = v490 & 0x3FFF;
            if (v491 == 1)
              break;
            if (v491 == 2)
              v492 = 16385;
            else
              v492 = 16387;
            if (v491 == 3)
              v490 = 16385;
            else
              v490 = v492;
            if (v490 == v489)
              goto LABEL_651;
          }
          while (1)
          {
            v500 = v489 & 0x3FFF;
            if (v500 == 1)
              goto LABEL_652;
            if (v500 == 3)
              goto LABEL_660;
            v499 = 16385;
            if (v500 != 40)
            {
              if ((v489 & 0x4000) != 0)
              {
                if (v500 != 2)
                  goto LABEL_651;
LABEL_660:
                v499 = 16385;
                goto LABEL_661;
              }
              v499 = v500 | 0x4000u;
            }
LABEL_661:
            LOWORD(v489) = v499;
            if (v499 == 16387)
              goto LABEL_651;
          }
        case 7u:
          v912 = BYTE2(v258) - 3;
          v913 = *v2473;
          v914 = *(_DWORD *)(*v2473 + 12836);
          if (v912 > 1)
          {
            v915 = (uint64_t *)v8;
            if (v914)
            {
              for (k = 0; k < v914; ++k)
              {
                v917 = v913 + 72 * k;
                v918 = *(_QWORD *)(v917 + 5640);
                if (v918 == 16400)
                {
LABEL_1331:
                  v924 = v917 + 5632;
                  v925 = v914 - 1;
                  *(_DWORD *)(v913 + 12836) = v925;
                  v926 = v913 + 72 * v925;
                  --k;
                  *(_OWORD *)v924 = *(_OWORD *)(v926 + 5632);
                  v927 = *(_OWORD *)(v926 + 5648);
                  v928 = *(_OWORD *)(v926 + 5664);
                  v929 = *(_OWORD *)(v926 + 5680);
                  *(_QWORD *)(v924 + 64) = *(_QWORD *)(v926 + 5696);
                  *(_OWORD *)(v924 + 32) = v928;
                  *(_OWORD *)(v924 + 48) = v929;
                  *(_OWORD *)(v924 + 16) = v927;
                  v914 = *(_DWORD *)(v913 + 12836);
                }
                else
                {
                  LOWORD(v919) = 16400;
                  while (1)
                  {
                    v920 = v919 & 0x3FFF;
                    if (v920 == 1)
                      break;
                    if (v920 == 2)
                      v921 = 16385;
                    else
                      v921 = 16387;
                    if (v920 == 3)
                      v919 = 16385;
                    else
                      v919 = v921;
                    if (v919 == v918)
                      goto LABEL_1331;
                  }
                  while (1)
                  {
                    v922 = v918 & 0x3FFF;
                    if (v922 == 1)
                      break;
                    if (v922 == 2)
                      v923 = 16385;
                    else
                      v923 = 16387;
                    if ((v918 & 0x4000) != 0)
                      v918 = v923;
                    else
                      v918 = v922 | 0x4000u;
                    if (v922 == 40)
                      v918 = 16385;
                    if (v922 == 3)
                      v918 = 16385;
                    if (v918 == 16400)
                      goto LABEL_1331;
                  }
                }
              }
              LODWORD(v12) = *(unsigned __int16 *)(v10 + 18);
            }
            if ((_DWORD)v12 == 146)
              v930 = *(_DWORD *)(v10 + 80);
            else
              v930 = *(_DWORD *)(v10 + 72);
            if ((v930 & 0xFE0000) != 0)
            if (v262 && (v1351 = *(unsigned __int16 *)(v262 + 18), v1351 <= 2))
            {
              v931 = *(_QWORD *)(v262 + 72);
              if (*(_WORD *)(v262 + 18))
              {
                if ((_DWORD)v1351 != 1)
                  v1351 = 2;
                v931 |= v1351;
              }
            }
            else
            {
              v931 = 0;
            }
            v932 = 0;
            LODWORD(v2817[0]) = v260;
            v2817[1] = 16400;
            v2817[2] = v261;
            v2817[3] = v262;
            v2817[4] = v931;
            v2817[6] = 0;
            v2817[5] = 0;
            if (v263)
            {
              v1352 = *(unsigned __int16 *)(v263 + 18);
              if (v1352 <= 2)
              {
                v932 = *(_QWORD *)(v263 + 72);
                if (*(_WORD *)(v263 + 18))
                {
                  if ((_DWORD)v1352 != 1)
                    v1352 = 2;
                  v932 |= v1352;
                }
              }
              else
              {
                v932 = 0;
              }
            }
            if (v262 && (v1353 = *(unsigned __int16 *)(v262 + 18), v1353 <= 2))
            {
              v933 = *(_QWORD *)(v262 + 72);
              if (*(_WORD *)(v262 + 18))
              {
                if ((_DWORD)v1353 != 1)
                  v1353 = 2;
                v933 |= v1353;
              }
            }
            else
            {
              v933 = 0;
            }
            v771 = 0;
            v2810 = 18;
            v2811 = 16400;
            v2812 = v261;
            v2813 = v262;
            v2814 = v933;
            v2816 = 0;
            v2815 = 0;
            if (v263)
            {
              v1354 = *(unsigned __int16 *)(v263 + 18);
              if (v1354 <= 2)
              {
                v771 = *(_QWORD *)(v263 + 72);
                if (*(_WORD *)(v263 + 18))
                {
                  if ((_DWORD)v1354 != 1)
                    v1354 = 2;
                  v771 |= v1354;
                }
              }
              else
              {
                v771 = 0;
              }
            }
            v772 = *v915;
            v773 = &v2810;
LABEL_1090:
            return;
          }
          if (!v914)
            return;
          v1435 = 0;
          while (1)
          {
            v1436 = v913 + 72 * v1435;
            v1437 = *(_QWORD *)(v1436 + 5640);
            if (v1437 != 16387)
              break;
LABEL_2151:
            v1441 = v1436 + 5632;
            v1442 = v914 - 1;
            *(_DWORD *)(v913 + 12836) = v1442;
            v1443 = v913 + 72 * v1442;
            --v1435;
            *(_OWORD *)v1441 = *(_OWORD *)(v1443 + 5632);
            v1444 = *(_OWORD *)(v1443 + 5648);
            v1445 = *(_OWORD *)(v1443 + 5664);
            v1446 = *(_OWORD *)(v1443 + 5680);
            *(_QWORD *)(v1441 + 64) = *(_QWORD *)(v1443 + 5696);
            *(_OWORD *)(v1441 + 32) = v1445;
            *(_OWORD *)(v1441 + 48) = v1446;
            *(_OWORD *)(v1441 + 16) = v1444;
            v914 = *(_DWORD *)(v913 + 12836);
LABEL_2152:
            if (++v1435 >= v914)
              return;
          }
          LOWORD(v1438) = 16387;
          while (1)
          {
            v1439 = v1438 & 0x3FFF;
            if (v1439 == 1)
              break;
            if (v1439 == 2)
              v1440 = 16385;
            else
              v1440 = 16387;
            if (v1439 == 3)
              v1438 = 16385;
            else
              v1438 = v1440;
            if (v1438 == v1437)
              goto LABEL_2151;
          }
          while (1)
          {
            v1448 = v1437 & 0x3FFF;
            if (v1448 == 1)
              goto LABEL_2152;
            if (v1448 == 3)
              goto LABEL_2160;
            v1447 = 16385;
            if (v1448 != 40)
            {
              if ((v1437 & 0x4000) != 0)
              {
                if (v1448 != 2)
                  goto LABEL_2151;
LABEL_2160:
                v1447 = 16385;
                goto LABEL_2161;
              }
              v1447 = v1448 | 0x4000u;
            }
LABEL_2161:
            LOWORD(v1437) = v1447;
            if (v1447 == 16387)
              goto LABEL_2151;
          }
        case 8u:
          v214 = *v2473;
          if (BYTE2(v258) - 3 <= 1)
            goto LABEL_3557;
          v1267 = (uint64_t *)v8;
          v1268 = *(_DWORD *)(v214 + 12836);
          if (!v1268)
            goto LABEL_1910;
          for (m = 0; m < v1268; ++m)
          {
            v1270 = v214 + 72 * m;
            v1271 = *(_QWORD *)(v1270 + 5640);
            if (v1271 == 16401)
            {
LABEL_1907:
              v1277 = v1270 + 5632;
              v1278 = v1268 - 1;
              *(_DWORD *)(v214 + 12836) = v1278;
              v1279 = v214 + 72 * v1278;
              --m;
              *(_OWORD *)v1277 = *(_OWORD *)(v1279 + 5632);
              v1280 = *(_OWORD *)(v1279 + 5648);
              v1281 = *(_OWORD *)(v1279 + 5664);
              v1282 = *(_OWORD *)(v1279 + 5680);
              *(_QWORD *)(v1277 + 64) = *(_QWORD *)(v1279 + 5696);
              *(_OWORD *)(v1277 + 32) = v1281;
              *(_OWORD *)(v1277 + 48) = v1282;
              *(_OWORD *)(v1277 + 16) = v1280;
              v1268 = *(_DWORD *)(v214 + 12836);
            }
            else
            {
              LOWORD(v1272) = 16401;
              while (1)
              {
                v1273 = v1272 & 0x3FFF;
                if (v1273 == 1)
                  break;
                if (v1273 == 2)
                  v1274 = 16385;
                else
                  v1274 = 16387;
                if (v1273 == 3)
                  v1272 = 16385;
                else
                  v1272 = v1274;
                if (v1272 == v1271)
                  goto LABEL_1907;
              }
              while (1)
              {
                v1275 = v1271 & 0x3FFF;
                if (v1275 == 1)
                  break;
                if (v1275 == 2)
                  v1276 = 16385;
                else
                  v1276 = 16387;
                if ((v1271 & 0x4000) != 0)
                  v1271 = v1276;
                else
                  v1271 = v1275 | 0x4000u;
                if (v1275 == 40)
                  v1271 = 16385;
                if (v1275 == 3)
                  v1271 = 16385;
                if (v1271 == 16401)
                  goto LABEL_1907;
              }
            }
          }
          LODWORD(v12) = *(unsigned __int16 *)(v10 + 18);
LABEL_1910:
          if ((_DWORD)v12 == 146)
            v1283 = *(_DWORD *)(v10 + 80);
          else
            v1283 = *(_DWORD *)(v10 + 72);
          if ((v1283 & 0xFE0000) != 0)
          if (v262 && (v2165 = *(unsigned __int16 *)(v262 + 18), v2165 <= 2))
          {
            v1284 = *(_QWORD *)(v262 + 72);
            if (*(_WORD *)(v262 + 18))
            {
              if ((_DWORD)v2165 != 1)
                v2165 = 2;
              v1284 |= v2165;
            }
          }
          else
          {
            v1284 = 0;
          }
          v1285 = 0;
          LODWORD(v2809[0]) = 13;
          v2809[1] = 16401;
          v2809[2] = v261;
          v2809[3] = v262;
          v2809[4] = v1284;
          v2809[6] = 0;
          v2809[5] = 0;
          if (v263)
          {
            v2166 = *(unsigned __int16 *)(v263 + 18);
            if (v2166 <= 2)
            {
              v1285 = *(_QWORD *)(v263 + 72);
              if (*(_WORD *)(v263 + 18))
              {
                if ((_DWORD)v2166 != 1)
                  v2166 = 2;
                v1285 |= v2166;
              }
            }
            else
            {
              v1285 = 0;
            }
          }
          if (v262 && (v2167 = *(unsigned __int16 *)(v262 + 18), v2167 <= 2))
          {
            v1290 = *(_QWORD *)(v262 + 72);
            if (*(_WORD *)(v262 + 18))
            {
              if ((_DWORD)v2167 != 1)
                v2167 = 2;
              v1290 |= v2167;
            }
          }
          else
          {
            v1290 = 0;
          }
          v1291 = 0;
          LODWORD(v2808[0]) = 14;
          v2808[1] = 16401;
          v2808[2] = v261;
          v2808[3] = v262;
          v2808[4] = v1290;
          v2808[6] = 0;
          v2808[5] = 0;
          if (v263)
          {
            v2168 = *(unsigned __int16 *)(v263 + 18);
            if (v2168 <= 2)
            {
              v1291 = *(_QWORD *)(v263 + 72);
              if (*(_WORD *)(v263 + 18))
              {
                if ((_DWORD)v2168 != 1)
                  v2168 = 2;
                v1291 |= v2168;
              }
            }
            else
            {
              v1291 = 0;
            }
          }
          if (v262 && (v2169 = *(unsigned __int16 *)(v262 + 18), v2169 <= 2))
          {
            v1292 = *(_QWORD *)(v262 + 72);
            if (*(_WORD *)(v262 + 18))
            {
              if ((_DWORD)v2169 != 1)
                v2169 = 2;
              v1292 |= v2169;
            }
          }
          else
          {
            v1292 = 0;
          }
          v771 = 0;
          v2801 = 15;
          v2802 = 16401;
          v2803 = v261;
          v2804 = v262;
          v2805 = v1292;
          v2807 = 0;
          v2806 = 0;
          if (v263)
          {
            v2170 = *(unsigned __int16 *)(v263 + 18);
            if (v2170 <= 2)
            {
              v771 = *(_QWORD *)(v263 + 72);
              if (*(_WORD *)(v263 + 18))
              {
                if ((_DWORD)v2170 != 1)
                  v2170 = 2;
                v771 |= v2170;
              }
            }
            else
            {
              v771 = 0;
            }
          }
          v772 = *v1267;
          v773 = &v2801;
          goto LABEL_1090;
        case 9u:
          v649 = BYTE2(v258) - 3;
          v650 = *v2473;
          v651 = *(_DWORD *)(*v2473 + 12836);
          if (v649 > 1)
          {
            v748 = (uint64_t *)v8;
            if (v651)
            {
              for (n = 0; n < v651; ++n)
              {
                v750 = v650 + 72 * n;
                v751 = *(_QWORD *)(v750 + 5640);
                if (v751 == 16402)
                {
LABEL_1077:
                  v757 = v750 + 5632;
                  v758 = v651 - 1;
                  *(_DWORD *)(v650 + 12836) = v758;
                  v759 = v650 + 72 * v758;
                  --n;
                  *(_OWORD *)v757 = *(_OWORD *)(v759 + 5632);
                  v760 = *(_OWORD *)(v759 + 5648);
                  v761 = *(_OWORD *)(v759 + 5664);
                  v762 = *(_OWORD *)(v759 + 5680);
                  *(_QWORD *)(v757 + 64) = *(_QWORD *)(v759 + 5696);
                  *(_OWORD *)(v757 + 32) = v761;
                  *(_OWORD *)(v757 + 48) = v762;
                  *(_OWORD *)(v757 + 16) = v760;
                  v651 = *(_DWORD *)(v650 + 12836);
                }
                else
                {
                  LOWORD(v752) = 16402;
                  while (1)
                  {
                    v753 = v752 & 0x3FFF;
                    if (v753 == 1)
                      break;
                    if (v753 == 2)
                      v754 = 16385;
                    else
                      v754 = 16387;
                    if (v753 == 3)
                      v752 = 16385;
                    else
                      v752 = v754;
                    if (v752 == v751)
                      goto LABEL_1077;
                  }
                  while (1)
                  {
                    v755 = v751 & 0x3FFF;
                    if (v755 == 1)
                      break;
                    if (v755 == 2)
                      v756 = 16385;
                    else
                      v756 = 16387;
                    if ((v751 & 0x4000) != 0)
                      v751 = v756;
                    else
                      v751 = v755 | 0x4000u;
                    if (v755 == 40)
                      v751 = 16385;
                    if (v755 == 3)
                      v751 = 16385;
                    if (v751 == 16402)
                      goto LABEL_1077;
                  }
                }
              }
              LODWORD(v12) = *(unsigned __int16 *)(v10 + 18);
            }
            if ((_DWORD)v12 == 146)
              v763 = *(_DWORD *)(v10 + 80);
            else
              v763 = *(_DWORD *)(v10 + 72);
            if ((v763 & 0xFE0000) != 0)
            {
              v1466 = *v2473;
              v1467 = *(_DWORD *)(*v2473 + 12836);
              if (v1467)
              {
                for (ii = 0; ii < v1467; ++ii)
                {
                  v1469 = v1466 + 72 * ii;
                  v1470 = *(_QWORD *)(v1469 + 5640);
                  if (v1470 == 16388)
                  {
LABEL_2218:
                    v1476 = v1469 + 5632;
                    v1477 = v1467 - 1;
                    *(_DWORD *)(v1466 + 12836) = v1477;
                    v1478 = v1466 + 72 * v1477;
                    --ii;
                    *(_OWORD *)v1476 = *(_OWORD *)(v1478 + 5632);
                    v1479 = *(_OWORD *)(v1478 + 5648);
                    v1480 = *(_OWORD *)(v1478 + 5664);
                    v1481 = *(_OWORD *)(v1478 + 5680);
                    *(_QWORD *)(v1476 + 64) = *(_QWORD *)(v1478 + 5696);
                    *(_OWORD *)(v1476 + 32) = v1480;
                    *(_OWORD *)(v1476 + 48) = v1481;
                    *(_OWORD *)(v1476 + 16) = v1479;
                    v1467 = *(_DWORD *)(v1466 + 12836);
                  }
                  else
                  {
                    LOWORD(v1471) = 16388;
                    while (1)
                    {
                      v1472 = v1471 & 0x3FFF;
                      if (v1472 == 1)
                        break;
                      if (v1472 == 2)
                        v1473 = 16385;
                      else
                        v1473 = 16387;
                      if (v1472 == 3)
                        v1471 = 16385;
                      else
                        v1471 = v1473;
                      if (v1471 == v1470)
                        goto LABEL_2218;
                    }
                    while (1)
                    {
                      v1474 = v1470 & 0x3FFF;
                      if (v1474 == 1)
                        break;
                      if (v1474 == 2)
                        v1475 = 16385;
                      else
                        v1475 = 16387;
                      if ((v1470 & 0x4000) != 0)
                        v1470 = v1475;
                      else
                        v1470 = v1474 | 0x4000u;
                      if (v1474 == 40)
                        v1470 = 16385;
                      if (v1474 == 3)
                        v1470 = 16385;
                      if (v1470 == 16388)
                        goto LABEL_2218;
                    }
                  }
                }
              }
            }
            if (v262 && (v1077 = *(unsigned __int16 *)(v262 + 18), v1077 <= 2))
            {
              v764 = *(_QWORD *)(v262 + 72);
              if (*(_WORD *)(v262 + 18))
              {
                if ((_DWORD)v1077 != 1)
                  v1077 = 2;
                v764 |= v1077;
              }
            }
            else
            {
              v764 = 0;
            }
            v765 = 0;
            LODWORD(v2800[0]) = v260;
            v2800[1] = 16402;
            v2800[2] = v261;
            v2800[3] = v262;
            v2800[4] = v764;
            v2800[6] = 0;
            v2800[5] = 0;
            if (v263)
            {
              v1078 = *(unsigned __int16 *)((v259 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
              if (v1078 <= 2)
              {
                v765 = *(_QWORD *)((v259 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                if (*(_WORD *)((v259 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
                {
                  if ((_DWORD)v1078 != 1)
                    v1078 = 2;
                  v765 |= v1078;
                }
              }
              else
              {
                v765 = 0;
              }
            }
            if (v262 && (v1079 = *(unsigned __int16 *)(v262 + 18), v1079 <= 2))
            {
              v770 = *(_QWORD *)(v262 + 72);
              if (*(_WORD *)(v262 + 18))
              {
                if ((_DWORD)v1079 != 1)
                  v1079 = 2;
                v770 |= v1079;
              }
            }
            else
            {
              v770 = 0;
            }
            v771 = 0;
            v2793 = 20;
            v2794 = 16402;
            v2795 = v261;
            v2796 = v262;
            v2797 = v770;
            v2799 = 0;
            v2798 = 0;
            if (v263)
            {
              v1080 = *(unsigned __int16 *)(v263 + 18);
              if (v1080 <= 2)
              {
                v771 = *(_QWORD *)(v263 + 72);
                if (*(_WORD *)(v263 + 18))
                {
                  if ((_DWORD)v1080 != 1)
                    v1080 = 2;
                  v771 |= v1080;
                }
              }
              else
              {
                v771 = 0;
              }
            }
            v772 = *v748;
            v773 = &v2793;
            goto LABEL_1090;
          }
          if (!v651)
            return;
          v652 = 0;
          while (1)
          {
            v653 = v650 + 72 * v652;
            v654 = *(_QWORD *)(v653 + 5640);
            if (v654 != 16387)
              break;
LABEL_905:
            v658 = v653 + 5632;
            v659 = v651 - 1;
            *(_DWORD *)(v650 + 12836) = v659;
            v660 = v650 + 72 * v659;
            --v652;
            *(_OWORD *)v658 = *(_OWORD *)(v660 + 5632);
            v661 = *(_OWORD *)(v660 + 5648);
            v662 = *(_OWORD *)(v660 + 5664);
            v663 = *(_OWORD *)(v660 + 5680);
            *(_QWORD *)(v658 + 64) = *(_QWORD *)(v660 + 5696);
            *(_OWORD *)(v658 + 32) = v662;
            *(_OWORD *)(v658 + 48) = v663;
            *(_OWORD *)(v658 + 16) = v661;
            v651 = *(_DWORD *)(v650 + 12836);
LABEL_906:
            if (++v652 >= v651)
              return;
          }
          LOWORD(v655) = 16387;
          while (1)
          {
            v656 = v655 & 0x3FFF;
            if (v656 == 1)
              break;
            if (v656 == 2)
              v657 = 16385;
            else
              v657 = 16387;
            if (v656 == 3)
              v655 = 16385;
            else
              v655 = v657;
            if (v655 == v654)
              goto LABEL_905;
          }
          while (1)
          {
            v665 = v654 & 0x3FFF;
            if (v665 == 1)
              goto LABEL_906;
            if (v665 == 3)
              goto LABEL_914;
            v664 = 16385;
            if (v665 != 40)
            {
              if ((v654 & 0x4000) != 0)
              {
                if (v665 != 2)
                  goto LABEL_905;
LABEL_914:
                v664 = 16385;
                goto LABEL_915;
              }
              v664 = v665 | 0x4000u;
            }
LABEL_915:
            LOWORD(v654) = v664;
            if (v664 == 16387)
              goto LABEL_905;
          }
        case 0xAu:
          v2257 = *v2473;
          if (BYTE2(v258) - 3 > 1)
          {
            if (*(_WORD *)(v10 + 18) == 146)
              v2463 = *(_DWORD *)(v10 + 80);
            else
              v2463 = *(_DWORD *)(v10 + 72);
            if ((v2463 & 0xFE0000) != 0)
            return;
          }
          v2258 = *(_DWORD *)(v2257 + 12836);
          if (!v2258)
            return;
          v2259 = 0;
          while (1)
          {
            v2260 = v2257 + 72 * v2259;
            v2261 = *(_QWORD *)(v2260 + 5640);
            if (v2261 != 16387)
              break;
LABEL_3602:
            v2265 = v2260 + 5632;
            v2266 = v2258 - 1;
            *(_DWORD *)(v2257 + 12836) = v2266;
            v2267 = v2257 + 72 * v2266;
            --v2259;
            *(_OWORD *)v2265 = *(_OWORD *)(v2267 + 5632);
            v2268 = *(_OWORD *)(v2267 + 5648);
            v2269 = *(_OWORD *)(v2267 + 5664);
            v2270 = *(_OWORD *)(v2267 + 5680);
            *(_QWORD *)(v2265 + 64) = *(_QWORD *)(v2267 + 5696);
            *(_OWORD *)(v2265 + 32) = v2269;
            *(_OWORD *)(v2265 + 48) = v2270;
            *(_OWORD *)(v2265 + 16) = v2268;
            v2258 = *(_DWORD *)(v2257 + 12836);
LABEL_3603:
            if (++v2259 >= v2258)
              return;
          }
          LOWORD(v2262) = 16387;
          while (1)
          {
            v2263 = v2262 & 0x3FFF;
            if (v2263 == 1)
              break;
            if (v2263 == 2)
              v2264 = 16385;
            else
              v2264 = 16387;
            if (v2263 == 3)
              v2262 = 16385;
            else
              v2262 = v2264;
            if (v2262 == v2261)
              goto LABEL_3602;
          }
          break;
        case 0xBu:
          v214 = *v2473;
          if ((v258 & 0xFE0000) != 0)
            goto LABEL_3557;
          v215 = 16403;
          goto LABEL_2067;
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          v264 = *v2473;
          v265 = *(_DWORD *)(*v2473 + 12836);
          if (!v265)
            goto LABEL_345;
          for (jj = 0; jj < v265; ++jj)
          {
            v267 = v264 + 72 * jj;
            v268 = *(_QWORD *)(v267 + 5640);
            if (v268 == 16406)
            {
LABEL_343:
              v274 = v267 + 5632;
              v275 = v265 - 1;
              *(_DWORD *)(v264 + 12836) = v275;
              v276 = v264 + 72 * v275;
              --jj;
              *(_OWORD *)v274 = *(_OWORD *)(v276 + 5632);
              v277 = *(_OWORD *)(v276 + 5648);
              v278 = *(_OWORD *)(v276 + 5664);
              v279 = *(_OWORD *)(v276 + 5680);
              *(_QWORD *)(v274 + 64) = *(_QWORD *)(v276 + 5696);
              *(_OWORD *)(v274 + 32) = v278;
              *(_OWORD *)(v274 + 48) = v279;
              *(_OWORD *)(v274 + 16) = v277;
              v265 = *(_DWORD *)(v264 + 12836);
            }
            else
            {
              LOWORD(v269) = 16406;
              while (1)
              {
                v270 = v269 & 0x3FFF;
                if (v270 == 1)
                  break;
                if (v270 == 2)
                  v271 = 16385;
                else
                  v271 = 16387;
                if (v270 == 3)
                  v269 = 16385;
                else
                  v269 = v271;
                if (v269 == v268)
                  goto LABEL_343;
              }
              while (1)
              {
                v272 = v268 & 0x3FFF;
                if (v272 == 1)
                  break;
                if (v272 == 2)
                  v273 = 16385;
                else
                  v273 = 16387;
                if ((v268 & 0x4000) != 0)
                  v268 = v273;
                else
                  v268 = v272 | 0x4000u;
                if (v272 == 40)
                  v268 = 16385;
                if (v272 == 3)
                  v268 = 16385;
                if (v268 == 16406)
                  goto LABEL_343;
              }
            }
          }
LABEL_345:
          if ((v258 & 0x40000000) != 0)
LABEL_346:
          return;
        case 0x19u:
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for put");
          __break(0xC471u);
          JUMPOUT(0x19835E7F4);
        default:
          __break(0xC471u);
          JUMPOUT(0x19835F1E8);
      }
      while (1)
      {
        v2272 = v2261 & 0x3FFF;
        if (v2272 == 1)
          goto LABEL_3603;
        if (v2272 == 3)
          goto LABEL_3611;
        v2271 = 16385;
        if (v2272 != 40)
        {
          if ((v2261 & 0x4000) != 0)
          {
            if (v2272 != 2)
              goto LABEL_3602;
LABEL_3611:
            v2271 = 16385;
            goto LABEL_3612;
          }
          v2271 = v2272 | 0x4000u;
        }
LABEL_3612:
        LOWORD(v2261) = v2271;
        if (v2271 == 16387)
          goto LABEL_3602;
      }
    case 0x6D:
      v1552 = *v2473;
      v1553 = *(_DWORD *)(*v2473 + 12836);
      if (!v1553)
        goto LABEL_3312;
      for (kk = 0; kk < v1553; ++kk)
      {
        v1555 = v1552 + 72 * kk;
        v1556 = *(_QWORD *)(v1555 + 5640);
        if (v1556 == 16388)
        {
LABEL_2356:
          v1562 = v1555 + 5632;
          v1563 = v1553 - 1;
          *(_DWORD *)(v1552 + 12836) = v1563;
          v1564 = v1552 + 72 * v1563;
          --kk;
          *(_OWORD *)v1562 = *(_OWORD *)(v1564 + 5632);
          v1565 = *(_OWORD *)(v1564 + 5648);
          v1566 = *(_OWORD *)(v1564 + 5664);
          v1567 = *(_OWORD *)(v1564 + 5680);
          *(_QWORD *)(v1562 + 64) = *(_QWORD *)(v1564 + 5696);
          *(_OWORD *)(v1562 + 32) = v1566;
          *(_OWORD *)(v1562 + 48) = v1567;
          *(_OWORD *)(v1562 + 16) = v1565;
          v1553 = *(_DWORD *)(v1552 + 12836);
        }
        else
        {
          LOWORD(v1557) = 16388;
          while (1)
          {
            v1558 = v1557 & 0x3FFF;
            if (v1558 == 1)
              break;
            if (v1558 == 2)
              v1559 = 16385;
            else
              v1559 = 16387;
            if (v1558 == 3)
              v1557 = 16385;
            else
              v1557 = v1559;
            if (v1557 == v1556)
              goto LABEL_2356;
          }
          while (1)
          {
            v1560 = v1556 & 0x3FFF;
            if (v1560 == 1)
              break;
            if (v1560 == 2)
              v1561 = 16385;
            else
              v1561 = 16387;
            if ((v1556 & 0x4000) != 0)
              v1556 = v1561;
            else
              v1556 = v1560 | 0x4000u;
            if (v1560 == 40)
              v1556 = 16385;
            if (v1560 == 3)
              v1556 = 16385;
            if (v1556 == 16388)
              goto LABEL_2356;
          }
        }
      }
      v1552 = *v2473;
      v1568 = *(_DWORD *)(*v2473 + 12836);
      if (v1568)
      {
        for (mm = 0; mm < v1568; ++mm)
        {
          v1570 = v1552 + 72 * mm;
          v1571 = *(_QWORD *)(v1570 + 5640);
          if (v1571 == 16389)
          {
LABEL_2383:
            v1577 = v1570 + 5632;
            v1578 = v1568 - 1;
            *(_DWORD *)(v1552 + 12836) = v1578;
            v1579 = v1552 + 72 * v1578;
            --mm;
            *(_OWORD *)v1577 = *(_OWORD *)(v1579 + 5632);
            v1580 = *(_OWORD *)(v1579 + 5648);
            v1581 = *(_OWORD *)(v1579 + 5664);
            v1582 = *(_OWORD *)(v1579 + 5680);
            *(_QWORD *)(v1577 + 64) = *(_QWORD *)(v1579 + 5696);
            *(_OWORD *)(v1577 + 32) = v1581;
            *(_OWORD *)(v1577 + 48) = v1582;
            *(_OWORD *)(v1577 + 16) = v1580;
            v1568 = *(_DWORD *)(v1552 + 12836);
          }
          else
          {
            LOWORD(v1572) = 16389;
            while (1)
            {
              v1573 = v1572 & 0x3FFF;
              if (v1573 == 1)
                break;
              if (v1573 == 2)
                v1574 = 16385;
              else
                v1574 = 16387;
              if (v1573 == 3)
                v1572 = 16385;
              else
                v1572 = v1574;
              if (v1572 == v1571)
                goto LABEL_2383;
            }
            while (1)
            {
              v1575 = v1571 & 0x3FFF;
              if (v1575 == 1)
                break;
              if (v1575 == 2)
                v1576 = 16385;
              else
                v1576 = 16387;
              if ((v1571 & 0x4000) != 0)
                v1571 = v1576;
              else
                v1571 = v1575 | 0x4000u;
              if (v1575 == 40)
                v1571 = 16385;
              if (v1575 == 3)
                v1571 = 16385;
              if (v1571 == 16389)
                goto LABEL_2383;
            }
          }
        }
        v1552 = *v2473;
        v1583 = *(_DWORD *)(*v2473 + 12836);
        if (v1583)
        {
          for (nn = 0; nn < v1583; ++nn)
          {
            v1585 = v1552 + 72 * nn;
            v1586 = *(_QWORD *)(v1585 + 5640);
            if (v1586 == 16390)
            {
LABEL_2410:
              v1592 = v1585 + 5632;
              v1593 = v1583 - 1;
              *(_DWORD *)(v1552 + 12836) = v1593;
              v1594 = v1552 + 72 * v1593;
              --nn;
              *(_OWORD *)v1592 = *(_OWORD *)(v1594 + 5632);
              v1595 = *(_OWORD *)(v1594 + 5648);
              v1596 = *(_OWORD *)(v1594 + 5664);
              v1597 = *(_OWORD *)(v1594 + 5680);
              *(_QWORD *)(v1592 + 64) = *(_QWORD *)(v1594 + 5696);
              *(_OWORD *)(v1592 + 32) = v1596;
              *(_OWORD *)(v1592 + 48) = v1597;
              *(_OWORD *)(v1592 + 16) = v1595;
              v1583 = *(_DWORD *)(v1552 + 12836);
            }
            else
            {
              LOWORD(v1587) = 16390;
              while (1)
              {
                v1588 = v1587 & 0x3FFF;
                if (v1588 == 1)
                  break;
                if (v1588 == 2)
                  v1589 = 16385;
                else
                  v1589 = 16387;
                if (v1588 == 3)
                  v1587 = 16385;
                else
                  v1587 = v1589;
                if (v1587 == v1586)
                  goto LABEL_2410;
              }
              while (1)
              {
                v1590 = v1586 & 0x3FFF;
                if (v1590 == 1)
                  break;
                if (v1590 == 2)
                  v1591 = 16385;
                else
                  v1591 = 16387;
                if ((v1586 & 0x4000) != 0)
                  v1586 = v1591;
                else
                  v1586 = v1590 | 0x4000u;
                if (v1590 == 40)
                  v1586 = 16385;
                if (v1590 == 3)
                  v1586 = 16385;
                if (v1586 == 16390)
                  goto LABEL_2410;
              }
            }
          }
          v1552 = *v2473;
          v1598 = *(_DWORD *)(*v2473 + 12836);
          if (v1598)
          {
            for (i1 = 0; i1 < v1598; ++i1)
            {
              v1600 = v1552 + 72 * i1;
              v1601 = *(_QWORD *)(v1600 + 5640);
              if (v1601 == 16391)
              {
LABEL_2437:
                v1607 = v1600 + 5632;
                v1608 = v1598 - 1;
                *(_DWORD *)(v1552 + 12836) = v1608;
                v1609 = v1552 + 72 * v1608;
                --i1;
                *(_OWORD *)v1607 = *(_OWORD *)(v1609 + 5632);
                v1610 = *(_OWORD *)(v1609 + 5648);
                v1611 = *(_OWORD *)(v1609 + 5664);
                v1612 = *(_OWORD *)(v1609 + 5680);
                *(_QWORD *)(v1607 + 64) = *(_QWORD *)(v1609 + 5696);
                *(_OWORD *)(v1607 + 32) = v1611;
                *(_OWORD *)(v1607 + 48) = v1612;
                *(_OWORD *)(v1607 + 16) = v1610;
                v1598 = *(_DWORD *)(v1552 + 12836);
              }
              else
              {
                LOWORD(v1602) = 16391;
                while (1)
                {
                  v1603 = v1602 & 0x3FFF;
                  if (v1603 == 1)
                    break;
                  if (v1603 == 2)
                    v1604 = 16385;
                  else
                    v1604 = 16387;
                  if (v1603 == 3)
                    v1602 = 16385;
                  else
                    v1602 = v1604;
                  if (v1602 == v1601)
                    goto LABEL_2437;
                }
                while (1)
                {
                  v1605 = v1601 & 0x3FFF;
                  if (v1605 == 1)
                    break;
                  if (v1605 == 2)
                    v1606 = 16385;
                  else
                    v1606 = 16387;
                  if ((v1601 & 0x4000) != 0)
                    v1601 = v1606;
                  else
                    v1601 = v1605 | 0x4000u;
                  if (v1605 == 40)
                    v1601 = 16385;
                  if (v1605 == 3)
                    v1601 = 16385;
                  if (v1601 == 16391)
                    goto LABEL_2437;
                }
              }
            }
            v1552 = *v2473;
            v1613 = *(_DWORD *)(*v2473 + 12836);
            if (v1613)
            {
              for (i2 = 0; i2 < v1613; ++i2)
              {
                v1615 = v1552 + 72 * i2;
                v1616 = *(_QWORD *)(v1615 + 5640);
                if (v1616 == 16392)
                {
LABEL_2464:
                  v1622 = v1615 + 5632;
                  v1623 = v1613 - 1;
                  *(_DWORD *)(v1552 + 12836) = v1623;
                  v1624 = v1552 + 72 * v1623;
                  --i2;
                  *(_OWORD *)v1622 = *(_OWORD *)(v1624 + 5632);
                  v1625 = *(_OWORD *)(v1624 + 5648);
                  v1626 = *(_OWORD *)(v1624 + 5664);
                  v1627 = *(_OWORD *)(v1624 + 5680);
                  *(_QWORD *)(v1622 + 64) = *(_QWORD *)(v1624 + 5696);
                  *(_OWORD *)(v1622 + 32) = v1626;
                  *(_OWORD *)(v1622 + 48) = v1627;
                  *(_OWORD *)(v1622 + 16) = v1625;
                  v1613 = *(_DWORD *)(v1552 + 12836);
                }
                else
                {
                  LOWORD(v1617) = 16392;
                  while (1)
                  {
                    v1618 = v1617 & 0x3FFF;
                    if (v1618 == 1)
                      break;
                    if (v1618 == 2)
                      v1619 = 16385;
                    else
                      v1619 = 16387;
                    if (v1618 == 3)
                      v1617 = 16385;
                    else
                      v1617 = v1619;
                    if (v1617 == v1616)
                      goto LABEL_2464;
                  }
                  while (1)
                  {
                    v1620 = v1616 & 0x3FFF;
                    if (v1620 == 1)
                      break;
                    if (v1620 == 2)
                      v1621 = 16385;
                    else
                      v1621 = 16387;
                    if ((v1616 & 0x4000) != 0)
                      v1616 = v1621;
                    else
                      v1616 = v1620 | 0x4000u;
                    if (v1620 == 40)
                      v1616 = 16385;
                    if (v1620 == 3)
                      v1616 = 16385;
                    if (v1616 == 16392)
                      goto LABEL_2464;
                  }
                }
              }
              v1552 = *v2473;
              v1628 = *(_DWORD *)(*v2473 + 12836);
              if (v1628)
              {
                for (i3 = 0; i3 < v1628; ++i3)
                {
                  v1630 = v1552 + 72 * i3;
                  v1631 = *(_QWORD *)(v1630 + 5640);
                  if (v1631 == 16393)
                  {
LABEL_2491:
                    v1637 = v1630 + 5632;
                    v1638 = v1628 - 1;
                    *(_DWORD *)(v1552 + 12836) = v1638;
                    v1639 = v1552 + 72 * v1638;
                    --i3;
                    *(_OWORD *)v1637 = *(_OWORD *)(v1639 + 5632);
                    v1640 = *(_OWORD *)(v1639 + 5648);
                    v1641 = *(_OWORD *)(v1639 + 5664);
                    v1642 = *(_OWORD *)(v1639 + 5680);
                    *(_QWORD *)(v1637 + 64) = *(_QWORD *)(v1639 + 5696);
                    *(_OWORD *)(v1637 + 32) = v1641;
                    *(_OWORD *)(v1637 + 48) = v1642;
                    *(_OWORD *)(v1637 + 16) = v1640;
                    v1628 = *(_DWORD *)(v1552 + 12836);
                  }
                  else
                  {
                    LOWORD(v1632) = 16393;
                    while (1)
                    {
                      v1633 = v1632 & 0x3FFF;
                      if (v1633 == 1)
                        break;
                      if (v1633 == 2)
                        v1634 = 16385;
                      else
                        v1634 = 16387;
                      if (v1633 == 3)
                        v1632 = 16385;
                      else
                        v1632 = v1634;
                      if (v1632 == v1631)
                        goto LABEL_2491;
                    }
                    while (1)
                    {
                      v1635 = v1631 & 0x3FFF;
                      if (v1635 == 1)
                        break;
                      if (v1635 == 2)
                        v1636 = 16385;
                      else
                        v1636 = 16387;
                      if ((v1631 & 0x4000) != 0)
                        v1631 = v1636;
                      else
                        v1631 = v1635 | 0x4000u;
                      if (v1635 == 40)
                        v1631 = 16385;
                      if (v1635 == 3)
                        v1631 = 16385;
                      if (v1631 == 16393)
                        goto LABEL_2491;
                    }
                  }
                }
                v1552 = *v2473;
                v1643 = *(_DWORD *)(*v2473 + 12836);
                if (v1643)
                {
                  for (i4 = 0; i4 < v1643; ++i4)
                  {
                    v1645 = v1552 + 72 * i4;
                    v1646 = *(_QWORD *)(v1645 + 5640);
                    if (v1646 == 16394)
                    {
LABEL_2518:
                      v1652 = v1645 + 5632;
                      v1653 = v1643 - 1;
                      *(_DWORD *)(v1552 + 12836) = v1653;
                      v1654 = v1552 + 72 * v1653;
                      --i4;
                      *(_OWORD *)v1652 = *(_OWORD *)(v1654 + 5632);
                      v1655 = *(_OWORD *)(v1654 + 5648);
                      v1656 = *(_OWORD *)(v1654 + 5664);
                      v1657 = *(_OWORD *)(v1654 + 5680);
                      *(_QWORD *)(v1652 + 64) = *(_QWORD *)(v1654 + 5696);
                      *(_OWORD *)(v1652 + 32) = v1656;
                      *(_OWORD *)(v1652 + 48) = v1657;
                      *(_OWORD *)(v1652 + 16) = v1655;
                      v1643 = *(_DWORD *)(v1552 + 12836);
                    }
                    else
                    {
                      LOWORD(v1647) = 16394;
                      while (1)
                      {
                        v1648 = v1647 & 0x3FFF;
                        if (v1648 == 1)
                          break;
                        if (v1648 == 2)
                          v1649 = 16385;
                        else
                          v1649 = 16387;
                        if (v1648 == 3)
                          v1647 = 16385;
                        else
                          v1647 = v1649;
                        if (v1647 == v1646)
                          goto LABEL_2518;
                      }
                      while (1)
                      {
                        v1650 = v1646 & 0x3FFF;
                        if (v1650 == 1)
                          break;
                        if (v1650 == 2)
                          v1651 = 16385;
                        else
                          v1651 = 16387;
                        if ((v1646 & 0x4000) != 0)
                          v1646 = v1651;
                        else
                          v1646 = v1650 | 0x4000u;
                        if (v1650 == 40)
                          v1646 = 16385;
                        if (v1650 == 3)
                          v1646 = 16385;
                        if (v1646 == 16394)
                          goto LABEL_2518;
                      }
                    }
                  }
                  v1552 = *v2473;
                  v1658 = *(_DWORD *)(*v2473 + 12836);
                  if (v1658)
                  {
                    for (i5 = 0; i5 < v1658; ++i5)
                    {
                      v1660 = v1552 + 72 * i5;
                      v1661 = *(_QWORD *)(v1660 + 5640);
                      if (v1661 == 16395)
                      {
LABEL_2545:
                        v1667 = v1660 + 5632;
                        v1668 = v1658 - 1;
                        *(_DWORD *)(v1552 + 12836) = v1668;
                        v1669 = v1552 + 72 * v1668;
                        --i5;
                        *(_OWORD *)v1667 = *(_OWORD *)(v1669 + 5632);
                        v1670 = *(_OWORD *)(v1669 + 5648);
                        v1671 = *(_OWORD *)(v1669 + 5664);
                        v1672 = *(_OWORD *)(v1669 + 5680);
                        *(_QWORD *)(v1667 + 64) = *(_QWORD *)(v1669 + 5696);
                        *(_OWORD *)(v1667 + 32) = v1671;
                        *(_OWORD *)(v1667 + 48) = v1672;
                        *(_OWORD *)(v1667 + 16) = v1670;
                        v1658 = *(_DWORD *)(v1552 + 12836);
                      }
                      else
                      {
                        LOWORD(v1662) = 16395;
                        while (1)
                        {
                          v1663 = v1662 & 0x3FFF;
                          if (v1663 == 1)
                            break;
                          if (v1663 == 2)
                            v1664 = 16385;
                          else
                            v1664 = 16387;
                          if (v1663 == 3)
                            v1662 = 16385;
                          else
                            v1662 = v1664;
                          if (v1662 == v1661)
                            goto LABEL_2545;
                        }
                        while (1)
                        {
                          v1665 = v1661 & 0x3FFF;
                          if (v1665 == 1)
                            break;
                          if (v1665 == 2)
                            v1666 = 16385;
                          else
                            v1666 = 16387;
                          if ((v1661 & 0x4000) != 0)
                            v1661 = v1666;
                          else
                            v1661 = v1665 | 0x4000u;
                          if (v1665 == 40)
                            v1661 = 16385;
                          if (v1665 == 3)
                            v1661 = 16385;
                          if (v1661 == 16395)
                            goto LABEL_2545;
                        }
                      }
                    }
                    v1552 = *v2473;
                    v1673 = *(_DWORD *)(*v2473 + 12836);
                    if (v1673)
                    {
                      for (i6 = 0; i6 < v1673; ++i6)
                      {
                        v1675 = v1552 + 72 * i6;
                        v1676 = *(_QWORD *)(v1675 + 5640);
                        if (v1676 == 16396)
                        {
LABEL_2572:
                          v1682 = v1675 + 5632;
                          v1683 = v1673 - 1;
                          *(_DWORD *)(v1552 + 12836) = v1683;
                          v1684 = v1552 + 72 * v1683;
                          --i6;
                          *(_OWORD *)v1682 = *(_OWORD *)(v1684 + 5632);
                          v1685 = *(_OWORD *)(v1684 + 5648);
                          v1686 = *(_OWORD *)(v1684 + 5664);
                          v1687 = *(_OWORD *)(v1684 + 5680);
                          *(_QWORD *)(v1682 + 64) = *(_QWORD *)(v1684 + 5696);
                          *(_OWORD *)(v1682 + 32) = v1686;
                          *(_OWORD *)(v1682 + 48) = v1687;
                          *(_OWORD *)(v1682 + 16) = v1685;
                          v1673 = *(_DWORD *)(v1552 + 12836);
                        }
                        else
                        {
                          LOWORD(v1677) = 16396;
                          while (1)
                          {
                            v1678 = v1677 & 0x3FFF;
                            if (v1678 == 1)
                              break;
                            if (v1678 == 2)
                              v1679 = 16385;
                            else
                              v1679 = 16387;
                            if (v1678 == 3)
                              v1677 = 16385;
                            else
                              v1677 = v1679;
                            if (v1677 == v1676)
                              goto LABEL_2572;
                          }
                          while (1)
                          {
                            v1680 = v1676 & 0x3FFF;
                            if (v1680 == 1)
                              break;
                            if (v1680 == 2)
                              v1681 = 16385;
                            else
                              v1681 = 16387;
                            if ((v1676 & 0x4000) != 0)
                              v1676 = v1681;
                            else
                              v1676 = v1680 | 0x4000u;
                            if (v1680 == 40)
                              v1676 = 16385;
                            if (v1680 == 3)
                              v1676 = 16385;
                            if (v1676 == 16396)
                              goto LABEL_2572;
                          }
                        }
                      }
                      v1552 = *v2473;
                      v1688 = *(_DWORD *)(*v2473 + 12836);
                      if (v1688)
                      {
                        for (i7 = 0; i7 < v1688; ++i7)
                        {
                          v1690 = v1552 + 72 * i7;
                          v1691 = *(_QWORD *)(v1690 + 5640);
                          if (v1691 == 16397)
                          {
LABEL_2599:
                            v1697 = v1690 + 5632;
                            v1698 = v1688 - 1;
                            *(_DWORD *)(v1552 + 12836) = v1698;
                            v1699 = v1552 + 72 * v1698;
                            --i7;
                            *(_OWORD *)v1697 = *(_OWORD *)(v1699 + 5632);
                            v1700 = *(_OWORD *)(v1699 + 5648);
                            v1701 = *(_OWORD *)(v1699 + 5664);
                            v1702 = *(_OWORD *)(v1699 + 5680);
                            *(_QWORD *)(v1697 + 64) = *(_QWORD *)(v1699 + 5696);
                            *(_OWORD *)(v1697 + 32) = v1701;
                            *(_OWORD *)(v1697 + 48) = v1702;
                            *(_OWORD *)(v1697 + 16) = v1700;
                            v1688 = *(_DWORD *)(v1552 + 12836);
                          }
                          else
                          {
                            LOWORD(v1692) = 16397;
                            while (1)
                            {
                              v1693 = v1692 & 0x3FFF;
                              if (v1693 == 1)
                                break;
                              if (v1693 == 2)
                                v1694 = 16385;
                              else
                                v1694 = 16387;
                              if (v1693 == 3)
                                v1692 = 16385;
                              else
                                v1692 = v1694;
                              if (v1692 == v1691)
                                goto LABEL_2599;
                            }
                            while (1)
                            {
                              v1695 = v1691 & 0x3FFF;
                              if (v1695 == 1)
                                break;
                              if (v1695 == 2)
                                v1696 = 16385;
                              else
                                v1696 = 16387;
                              if ((v1691 & 0x4000) != 0)
                                v1691 = v1696;
                              else
                                v1691 = v1695 | 0x4000u;
                              if (v1695 == 40)
                                v1691 = 16385;
                              if (v1695 == 3)
                                v1691 = 16385;
                              if (v1691 == 16397)
                                goto LABEL_2599;
                            }
                          }
                        }
                        v1552 = *v2473;
                        v1703 = *(_DWORD *)(*v2473 + 12836);
                        if (v1703)
                        {
                          for (i8 = 0; i8 < v1703; ++i8)
                          {
                            v1705 = v1552 + 72 * i8;
                            v1706 = *(_QWORD *)(v1705 + 5640);
                            if (v1706 == 16399)
                            {
LABEL_2626:
                              v1712 = v1705 + 5632;
                              v1713 = v1703 - 1;
                              *(_DWORD *)(v1552 + 12836) = v1713;
                              v1714 = v1552 + 72 * v1713;
                              --i8;
                              *(_OWORD *)v1712 = *(_OWORD *)(v1714 + 5632);
                              v1715 = *(_OWORD *)(v1714 + 5648);
                              v1716 = *(_OWORD *)(v1714 + 5664);
                              v1717 = *(_OWORD *)(v1714 + 5680);
                              *(_QWORD *)(v1712 + 64) = *(_QWORD *)(v1714 + 5696);
                              *(_OWORD *)(v1712 + 32) = v1716;
                              *(_OWORD *)(v1712 + 48) = v1717;
                              *(_OWORD *)(v1712 + 16) = v1715;
                              v1703 = *(_DWORD *)(v1552 + 12836);
                            }
                            else
                            {
                              LOWORD(v1707) = 16399;
                              while (1)
                              {
                                v1708 = v1707 & 0x3FFF;
                                if (v1708 == 1)
                                  break;
                                if (v1708 == 2)
                                  v1709 = 16385;
                                else
                                  v1709 = 16387;
                                if (v1708 == 3)
                                  v1707 = 16385;
                                else
                                  v1707 = v1709;
                                if (v1707 == v1706)
                                  goto LABEL_2626;
                              }
                              while (1)
                              {
                                v1710 = v1706 & 0x3FFF;
                                if (v1710 == 1)
                                  break;
                                if (v1710 == 2)
                                  v1711 = 16385;
                                else
                                  v1711 = 16387;
                                if ((v1706 & 0x4000) != 0)
                                  v1706 = v1711;
                                else
                                  v1706 = v1710 | 0x4000u;
                                if (v1710 == 40)
                                  v1706 = 16385;
                                if (v1710 == 3)
                                  v1706 = 16385;
                                if (v1706 == 16399)
                                  goto LABEL_2626;
                              }
                            }
                          }
                          v1552 = *v2473;
                          v1718 = *(_DWORD *)(*v2473 + 12836);
                          if (v1718)
                          {
                            for (i9 = 0; i9 < v1718; ++i9)
                            {
                              v1720 = v1552 + 72 * i9;
                              v1721 = *(_QWORD *)(v1720 + 5640);
                              if (v1721 == 16400)
                              {
LABEL_2653:
                                v1727 = v1720 + 5632;
                                v1728 = v1718 - 1;
                                *(_DWORD *)(v1552 + 12836) = v1728;
                                v1729 = v1552 + 72 * v1728;
                                --i9;
                                *(_OWORD *)v1727 = *(_OWORD *)(v1729 + 5632);
                                v1730 = *(_OWORD *)(v1729 + 5648);
                                v1731 = *(_OWORD *)(v1729 + 5664);
                                v1732 = *(_OWORD *)(v1729 + 5680);
                                *(_QWORD *)(v1727 + 64) = *(_QWORD *)(v1729 + 5696);
                                *(_OWORD *)(v1727 + 32) = v1731;
                                *(_OWORD *)(v1727 + 48) = v1732;
                                *(_OWORD *)(v1727 + 16) = v1730;
                                v1718 = *(_DWORD *)(v1552 + 12836);
                              }
                              else
                              {
                                LOWORD(v1722) = 16400;
                                while (1)
                                {
                                  v1723 = v1722 & 0x3FFF;
                                  if (v1723 == 1)
                                    break;
                                  if (v1723 == 2)
                                    v1724 = 16385;
                                  else
                                    v1724 = 16387;
                                  if (v1723 == 3)
                                    v1722 = 16385;
                                  else
                                    v1722 = v1724;
                                  if (v1722 == v1721)
                                    goto LABEL_2653;
                                }
                                while (1)
                                {
                                  v1725 = v1721 & 0x3FFF;
                                  if (v1725 == 1)
                                    break;
                                  if (v1725 == 2)
                                    v1726 = 16385;
                                  else
                                    v1726 = 16387;
                                  if ((v1721 & 0x4000) != 0)
                                    v1721 = v1726;
                                  else
                                    v1721 = v1725 | 0x4000u;
                                  if (v1725 == 40)
                                    v1721 = 16385;
                                  if (v1725 == 3)
                                    v1721 = 16385;
                                  if (v1721 == 16400)
                                    goto LABEL_2653;
                                }
                              }
                            }
                            v1552 = *v2473;
                            v1733 = *(_DWORD *)(*v2473 + 12836);
                            if (v1733)
                            {
                              for (i10 = 0; i10 < v1733; ++i10)
                              {
                                v1735 = v1552 + 72 * i10;
                                v1736 = *(_QWORD *)(v1735 + 5640);
                                if (v1736 == 16401)
                                {
LABEL_2680:
                                  v1742 = v1735 + 5632;
                                  v1743 = v1733 - 1;
                                  *(_DWORD *)(v1552 + 12836) = v1743;
                                  v1744 = v1552 + 72 * v1743;
                                  --i10;
                                  *(_OWORD *)v1742 = *(_OWORD *)(v1744 + 5632);
                                  v1745 = *(_OWORD *)(v1744 + 5648);
                                  v1746 = *(_OWORD *)(v1744 + 5664);
                                  v1747 = *(_OWORD *)(v1744 + 5680);
                                  *(_QWORD *)(v1742 + 64) = *(_QWORD *)(v1744 + 5696);
                                  *(_OWORD *)(v1742 + 32) = v1746;
                                  *(_OWORD *)(v1742 + 48) = v1747;
                                  *(_OWORD *)(v1742 + 16) = v1745;
                                  v1733 = *(_DWORD *)(v1552 + 12836);
                                }
                                else
                                {
                                  LOWORD(v1737) = 16401;
                                  while (1)
                                  {
                                    v1738 = v1737 & 0x3FFF;
                                    if (v1738 == 1)
                                      break;
                                    if (v1738 == 2)
                                      v1739 = 16385;
                                    else
                                      v1739 = 16387;
                                    if (v1738 == 3)
                                      v1737 = 16385;
                                    else
                                      v1737 = v1739;
                                    if (v1737 == v1736)
                                      goto LABEL_2680;
                                  }
                                  while (1)
                                  {
                                    v1740 = v1736 & 0x3FFF;
                                    if (v1740 == 1)
                                      break;
                                    if (v1740 == 2)
                                      v1741 = 16385;
                                    else
                                      v1741 = 16387;
                                    if ((v1736 & 0x4000) != 0)
                                      v1736 = v1741;
                                    else
                                      v1736 = v1740 | 0x4000u;
                                    if (v1740 == 40)
                                      v1736 = 16385;
                                    if (v1740 == 3)
                                      v1736 = 16385;
                                    if (v1736 == 16401)
                                      goto LABEL_2680;
                                  }
                                }
                              }
                              v1552 = *v2473;
                              v1748 = *(_DWORD *)(*v2473 + 12836);
                              if (v1748)
                              {
                                for (i11 = 0; i11 < v1748; ++i11)
                                {
                                  v1750 = v1552 + 72 * i11;
                                  v1751 = *(_QWORD *)(v1750 + 5640);
                                  if (v1751 == 16402)
                                  {
LABEL_2707:
                                    v1757 = v1750 + 5632;
                                    v1758 = v1748 - 1;
                                    *(_DWORD *)(v1552 + 12836) = v1758;
                                    v1759 = v1552 + 72 * v1758;
                                    --i11;
                                    *(_OWORD *)v1757 = *(_OWORD *)(v1759 + 5632);
                                    v1760 = *(_OWORD *)(v1759 + 5648);
                                    v1761 = *(_OWORD *)(v1759 + 5664);
                                    v1762 = *(_OWORD *)(v1759 + 5680);
                                    *(_QWORD *)(v1757 + 64) = *(_QWORD *)(v1759 + 5696);
                                    *(_OWORD *)(v1757 + 32) = v1761;
                                    *(_OWORD *)(v1757 + 48) = v1762;
                                    *(_OWORD *)(v1757 + 16) = v1760;
                                    v1748 = *(_DWORD *)(v1552 + 12836);
                                  }
                                  else
                                  {
                                    LOWORD(v1752) = 16402;
                                    while (1)
                                    {
                                      v1753 = v1752 & 0x3FFF;
                                      if (v1753 == 1)
                                        break;
                                      if (v1753 == 2)
                                        v1754 = 16385;
                                      else
                                        v1754 = 16387;
                                      if (v1753 == 3)
                                        v1752 = 16385;
                                      else
                                        v1752 = v1754;
                                      if (v1752 == v1751)
                                        goto LABEL_2707;
                                    }
                                    while (1)
                                    {
                                      v1755 = v1751 & 0x3FFF;
                                      if (v1755 == 1)
                                        break;
                                      if (v1755 == 2)
                                        v1756 = 16385;
                                      else
                                        v1756 = 16387;
                                      if ((v1751 & 0x4000) != 0)
                                        v1751 = v1756;
                                      else
                                        v1751 = v1755 | 0x4000u;
                                      if (v1755 == 40)
                                        v1751 = 16385;
                                      if (v1755 == 3)
                                        v1751 = 16385;
                                      if (v1751 == 16402)
                                        goto LABEL_2707;
                                    }
                                  }
                                }
                                v1552 = *v2473;
                                v1763 = *(_DWORD *)(*v2473 + 12836);
                                if (v1763)
                                {
                                  for (i12 = 0; i12 < v1763; ++i12)
                                  {
                                    v1765 = v1552 + 72 * i12;
                                    v1766 = *(_QWORD *)(v1765 + 5640);
                                    if (v1766 == 16403)
                                    {
LABEL_2734:
                                      v1772 = v1765 + 5632;
                                      v1773 = v1763 - 1;
                                      *(_DWORD *)(v1552 + 12836) = v1773;
                                      v1774 = v1552 + 72 * v1773;
                                      --i12;
                                      *(_OWORD *)v1772 = *(_OWORD *)(v1774 + 5632);
                                      v1775 = *(_OWORD *)(v1774 + 5648);
                                      v1776 = *(_OWORD *)(v1774 + 5664);
                                      v1777 = *(_OWORD *)(v1774 + 5680);
                                      *(_QWORD *)(v1772 + 64) = *(_QWORD *)(v1774 + 5696);
                                      *(_OWORD *)(v1772 + 32) = v1776;
                                      *(_OWORD *)(v1772 + 48) = v1777;
                                      *(_OWORD *)(v1772 + 16) = v1775;
                                      v1763 = *(_DWORD *)(v1552 + 12836);
                                    }
                                    else
                                    {
                                      LOWORD(v1767) = 16403;
                                      while (1)
                                      {
                                        v1768 = v1767 & 0x3FFF;
                                        if (v1768 == 1)
                                          break;
                                        if (v1768 == 2)
                                          v1769 = 16385;
                                        else
                                          v1769 = 16387;
                                        if (v1768 == 3)
                                          v1767 = 16385;
                                        else
                                          v1767 = v1769;
                                        if (v1767 == v1766)
                                          goto LABEL_2734;
                                      }
                                      while (1)
                                      {
                                        v1770 = v1766 & 0x3FFF;
                                        if (v1770 == 1)
                                          break;
                                        if (v1770 == 2)
                                          v1771 = 16385;
                                        else
                                          v1771 = 16387;
                                        if ((v1766 & 0x4000) != 0)
                                          v1766 = v1771;
                                        else
                                          v1766 = v1770 | 0x4000u;
                                        if (v1770 == 40)
                                          v1766 = 16385;
                                        if (v1770 == 3)
                                          v1766 = 16385;
                                        if (v1766 == 16403)
                                          goto LABEL_2734;
                                      }
                                    }
                                  }
                                  v1552 = *v2473;
                                  v1778 = *(_DWORD *)(*v2473 + 12836);
                                  if (v1778)
                                  {
                                    for (i13 = 0; i13 < v1778; ++i13)
                                    {
                                      v1780 = v1552 + 72 * i13;
                                      v1781 = *(_QWORD *)(v1780 + 5640);
                                      if (v1781 == 16404)
                                      {
LABEL_2761:
                                        v1787 = v1780 + 5632;
                                        v1788 = v1778 - 1;
                                        *(_DWORD *)(v1552 + 12836) = v1788;
                                        v1789 = v1552 + 72 * v1788;
                                        --i13;
                                        *(_OWORD *)v1787 = *(_OWORD *)(v1789 + 5632);
                                        v1790 = *(_OWORD *)(v1789 + 5648);
                                        v1791 = *(_OWORD *)(v1789 + 5664);
                                        v1792 = *(_OWORD *)(v1789 + 5680);
                                        *(_QWORD *)(v1787 + 64) = *(_QWORD *)(v1789 + 5696);
                                        *(_OWORD *)(v1787 + 32) = v1791;
                                        *(_OWORD *)(v1787 + 48) = v1792;
                                        *(_OWORD *)(v1787 + 16) = v1790;
                                        v1778 = *(_DWORD *)(v1552 + 12836);
                                      }
                                      else
                                      {
                                        LOWORD(v1782) = 16404;
                                        while (1)
                                        {
                                          v1783 = v1782 & 0x3FFF;
                                          if (v1783 == 1)
                                            break;
                                          if (v1783 == 2)
                                            v1784 = 16385;
                                          else
                                            v1784 = 16387;
                                          if (v1783 == 3)
                                            v1782 = 16385;
                                          else
                                            v1782 = v1784;
                                          if (v1782 == v1781)
                                            goto LABEL_2761;
                                        }
                                        while (1)
                                        {
                                          v1785 = v1781 & 0x3FFF;
                                          if (v1785 == 1)
                                            break;
                                          if (v1785 == 2)
                                            v1786 = 16385;
                                          else
                                            v1786 = 16387;
                                          if ((v1781 & 0x4000) != 0)
                                            v1781 = v1786;
                                          else
                                            v1781 = v1785 | 0x4000u;
                                          if (v1785 == 40)
                                            v1781 = 16385;
                                          if (v1785 == 3)
                                            v1781 = 16385;
                                          if (v1781 == 16404)
                                            goto LABEL_2761;
                                        }
                                      }
                                    }
                                    v1552 = *v2473;
                                    v1793 = *(_DWORD *)(*v2473 + 12836);
                                    if (v1793)
                                    {
                                      for (i14 = 0; i14 < v1793; ++i14)
                                      {
                                        v1795 = v1552 + 72 * i14;
                                        v1796 = *(_QWORD *)(v1795 + 5640);
                                        if (v1796 == 16405)
                                        {
LABEL_2788:
                                          v1802 = v1795 + 5632;
                                          v1803 = v1793 - 1;
                                          *(_DWORD *)(v1552 + 12836) = v1803;
                                          v1804 = v1552 + 72 * v1803;
                                          --i14;
                                          *(_OWORD *)v1802 = *(_OWORD *)(v1804 + 5632);
                                          v1805 = *(_OWORD *)(v1804 + 5648);
                                          v1806 = *(_OWORD *)(v1804 + 5664);
                                          v1807 = *(_OWORD *)(v1804 + 5680);
                                          *(_QWORD *)(v1802 + 64) = *(_QWORD *)(v1804 + 5696);
                                          *(_OWORD *)(v1802 + 32) = v1806;
                                          *(_OWORD *)(v1802 + 48) = v1807;
                                          *(_OWORD *)(v1802 + 16) = v1805;
                                          v1793 = *(_DWORD *)(v1552 + 12836);
                                        }
                                        else
                                        {
                                          LOWORD(v1797) = 16405;
                                          while (1)
                                          {
                                            v1798 = v1797 & 0x3FFF;
                                            if (v1798 == 1)
                                              break;
                                            if (v1798 == 2)
                                              v1799 = 16385;
                                            else
                                              v1799 = 16387;
                                            if (v1798 == 3)
                                              v1797 = 16385;
                                            else
                                              v1797 = v1799;
                                            if (v1797 == v1796)
                                              goto LABEL_2788;
                                          }
                                          while (1)
                                          {
                                            v1800 = v1796 & 0x3FFF;
                                            if (v1800 == 1)
                                              break;
                                            if (v1800 == 2)
                                              v1801 = 16385;
                                            else
                                              v1801 = 16387;
                                            if ((v1796 & 0x4000) != 0)
                                              v1796 = v1801;
                                            else
                                              v1796 = v1800 | 0x4000u;
                                            if (v1800 == 40)
                                              v1796 = 16385;
                                            if (v1800 == 3)
                                              v1796 = 16385;
                                            if (v1796 == 16405)
                                              goto LABEL_2788;
                                          }
                                        }
                                      }
                                      v1552 = *v2473;
                                      v1808 = *(_DWORD *)(*v2473 + 12836);
                                      if (v1808)
                                      {
                                        for (i15 = 0; i15 < v1808; ++i15)
                                        {
                                          v1810 = v1552 + 72 * i15;
                                          v1811 = *(_QWORD *)(v1810 + 5640);
                                          if (v1811 == 16406)
                                          {
LABEL_2815:
                                            v1817 = v1810 + 5632;
                                            v1818 = v1808 - 1;
                                            *(_DWORD *)(v1552 + 12836) = v1818;
                                            v1819 = v1552 + 72 * v1818;
                                            --i15;
                                            *(_OWORD *)v1817 = *(_OWORD *)(v1819 + 5632);
                                            v1820 = *(_OWORD *)(v1819 + 5648);
                                            v1821 = *(_OWORD *)(v1819 + 5664);
                                            v1822 = *(_OWORD *)(v1819 + 5680);
                                            *(_QWORD *)(v1817 + 64) = *(_QWORD *)(v1819 + 5696);
                                            *(_OWORD *)(v1817 + 32) = v1821;
                                            *(_OWORD *)(v1817 + 48) = v1822;
                                            *(_OWORD *)(v1817 + 16) = v1820;
                                            v1808 = *(_DWORD *)(v1552 + 12836);
                                          }
                                          else
                                          {
                                            LOWORD(v1812) = 16406;
                                            while (1)
                                            {
                                              v1813 = v1812 & 0x3FFF;
                                              if (v1813 == 1)
                                                break;
                                              if (v1813 == 2)
                                                v1814 = 16385;
                                              else
                                                v1814 = 16387;
                                              if (v1813 == 3)
                                                v1812 = 16385;
                                              else
                                                v1812 = v1814;
                                              if (v1812 == v1811)
                                                goto LABEL_2815;
                                            }
                                            while (1)
                                            {
                                              v1815 = v1811 & 0x3FFF;
                                              if (v1815 == 1)
                                                break;
                                              if (v1815 == 2)
                                                v1816 = 16385;
                                              else
                                                v1816 = 16387;
                                              if ((v1811 & 0x4000) != 0)
                                                v1811 = v1816;
                                              else
                                                v1811 = v1815 | 0x4000u;
                                              if (v1815 == 40)
                                                v1811 = 16385;
                                              if (v1815 == 3)
                                                v1811 = 16385;
                                              if (v1811 == 16406)
                                                goto LABEL_2815;
                                            }
                                          }
                                        }
                                        v1552 = *v2473;
                                        v1823 = *(_DWORD *)(*v2473 + 12836);
                                        if (v1823)
                                        {
                                          for (i16 = 0; i16 < v1823; ++i16)
                                          {
                                            v1825 = v1552 + 72 * i16;
                                            v1826 = *(_QWORD *)(v1825 + 5640);
                                            if (v1826 == 16407)
                                            {
LABEL_2842:
                                              v1832 = v1825 + 5632;
                                              v1833 = v1823 - 1;
                                              *(_DWORD *)(v1552 + 12836) = v1833;
                                              v1834 = v1552 + 72 * v1833;
                                              --i16;
                                              *(_OWORD *)v1832 = *(_OWORD *)(v1834 + 5632);
                                              v1835 = *(_OWORD *)(v1834 + 5648);
                                              v1836 = *(_OWORD *)(v1834 + 5664);
                                              v1837 = *(_OWORD *)(v1834 + 5680);
                                              *(_QWORD *)(v1832 + 64) = *(_QWORD *)(v1834 + 5696);
                                              *(_OWORD *)(v1832 + 32) = v1836;
                                              *(_OWORD *)(v1832 + 48) = v1837;
                                              *(_OWORD *)(v1832 + 16) = v1835;
                                              v1823 = *(_DWORD *)(v1552 + 12836);
                                            }
                                            else
                                            {
                                              LOWORD(v1827) = 16407;
                                              while (1)
                                              {
                                                v1828 = v1827 & 0x3FFF;
                                                if (v1828 == 1)
                                                  break;
                                                if (v1828 == 2)
                                                  v1829 = 16385;
                                                else
                                                  v1829 = 16387;
                                                if (v1828 == 3)
                                                  v1827 = 16385;
                                                else
                                                  v1827 = v1829;
                                                if (v1827 == v1826)
                                                  goto LABEL_2842;
                                              }
                                              while (1)
                                              {
                                                v1830 = v1826 & 0x3FFF;
                                                if (v1830 == 1)
                                                  break;
                                                if (v1830 == 2)
                                                  v1831 = 16385;
                                                else
                                                  v1831 = 16387;
                                                if ((v1826 & 0x4000) != 0)
                                                  v1826 = v1831;
                                                else
                                                  v1826 = v1830 | 0x4000u;
                                                if (v1830 == 40)
                                                  v1826 = 16385;
                                                if (v1830 == 3)
                                                  v1826 = 16385;
                                                if (v1826 == 16407)
                                                  goto LABEL_2842;
                                              }
                                            }
                                          }
                                          v1552 = *v2473;
                                          v1838 = *(_DWORD *)(*v2473 + 12836);
                                          if (v1838)
                                          {
                                            for (i17 = 0; i17 < v1838; ++i17)
                                            {
                                              v1840 = v1552 + 72 * i17;
                                              v1841 = *(_QWORD *)(v1840 + 5640);
                                              if (v1841 == 16408)
                                              {
LABEL_2869:
                                                v1847 = v1840 + 5632;
                                                v1848 = v1838 - 1;
                                                *(_DWORD *)(v1552 + 12836) = v1848;
                                                v1849 = v1552 + 72 * v1848;
                                                --i17;
                                                *(_OWORD *)v1847 = *(_OWORD *)(v1849 + 5632);
                                                v1850 = *(_OWORD *)(v1849 + 5648);
                                                v1851 = *(_OWORD *)(v1849 + 5664);
                                                v1852 = *(_OWORD *)(v1849 + 5680);
                                                *(_QWORD *)(v1847 + 64) = *(_QWORD *)(v1849 + 5696);
                                                *(_OWORD *)(v1847 + 32) = v1851;
                                                *(_OWORD *)(v1847 + 48) = v1852;
                                                *(_OWORD *)(v1847 + 16) = v1850;
                                                v1838 = *(_DWORD *)(v1552 + 12836);
                                              }
                                              else
                                              {
                                                LOWORD(v1842) = 16408;
                                                while (1)
                                                {
                                                  v1843 = v1842 & 0x3FFF;
                                                  if (v1843 == 1)
                                                    break;
                                                  if (v1843 == 2)
                                                    v1844 = 16385;
                                                  else
                                                    v1844 = 16387;
                                                  if (v1843 == 3)
                                                    v1842 = 16385;
                                                  else
                                                    v1842 = v1844;
                                                  if (v1842 == v1841)
                                                    goto LABEL_2869;
                                                }
                                                while (1)
                                                {
                                                  v1845 = v1841 & 0x3FFF;
                                                  if (v1845 == 1)
                                                    break;
                                                  if (v1845 == 2)
                                                    v1846 = 16385;
                                                  else
                                                    v1846 = 16387;
                                                  if ((v1841 & 0x4000) != 0)
                                                    v1841 = v1846;
                                                  else
                                                    v1841 = v1845 | 0x4000u;
                                                  if (v1845 == 40)
                                                    v1841 = 16385;
                                                  if (v1845 == 3)
                                                    v1841 = 16385;
                                                  if (v1841 == 16408)
                                                    goto LABEL_2869;
                                                }
                                              }
                                            }
                                            v1552 = *v2473;
                                            v1853 = *(_DWORD *)(*v2473 + 12836);
                                            if (v1853)
                                            {
                                              for (i18 = 0; i18 < v1853; ++i18)
                                              {
                                                v1855 = v1552 + 72 * i18;
                                                v1856 = *(_QWORD *)(v1855 + 5640);
                                                if (v1856 == 16409)
                                                {
LABEL_2896:
                                                  v1862 = v1855 + 5632;
                                                  v1863 = v1853 - 1;
                                                  *(_DWORD *)(v1552 + 12836) = v1863;
                                                  v1864 = v1552 + 72 * v1863;
                                                  --i18;
                                                  *(_OWORD *)v1862 = *(_OWORD *)(v1864 + 5632);
                                                  v1865 = *(_OWORD *)(v1864 + 5648);
                                                  v1866 = *(_OWORD *)(v1864 + 5664);
                                                  v1867 = *(_OWORD *)(v1864 + 5680);
                                                  *(_QWORD *)(v1862 + 64) = *(_QWORD *)(v1864 + 5696);
                                                  *(_OWORD *)(v1862 + 32) = v1866;
                                                  *(_OWORD *)(v1862 + 48) = v1867;
                                                  *(_OWORD *)(v1862 + 16) = v1865;
                                                  v1853 = *(_DWORD *)(v1552 + 12836);
                                                }
                                                else
                                                {
                                                  LOWORD(v1857) = 16409;
                                                  while (1)
                                                  {
                                                    v1858 = v1857 & 0x3FFF;
                                                    if (v1858 == 1)
                                                      break;
                                                    if (v1858 == 2)
                                                      v1859 = 16385;
                                                    else
                                                      v1859 = 16387;
                                                    if (v1858 == 3)
                                                      v1857 = 16385;
                                                    else
                                                      v1857 = v1859;
                                                    if (v1857 == v1856)
                                                      goto LABEL_2896;
                                                  }
                                                  while (1)
                                                  {
                                                    v1860 = v1856 & 0x3FFF;
                                                    if (v1860 == 1)
                                                      break;
                                                    if (v1860 == 2)
                                                      v1861 = 16385;
                                                    else
                                                      v1861 = 16387;
                                                    if ((v1856 & 0x4000) != 0)
                                                      v1856 = v1861;
                                                    else
                                                      v1856 = v1860 | 0x4000u;
                                                    if (v1860 == 40)
                                                      v1856 = 16385;
                                                    if (v1860 == 3)
                                                      v1856 = 16385;
                                                    if (v1856 == 16409)
                                                      goto LABEL_2896;
                                                  }
                                                }
                                              }
                                              v1552 = *v2473;
                                              v1868 = *(_DWORD *)(*v2473 + 12836);
                                              if (v1868)
                                              {
                                                for (i19 = 0; i19 < v1868; ++i19)
                                                {
                                                  v1870 = v1552 + 72 * i19;
                                                  v1871 = *(_QWORD *)(v1870 + 5640);
                                                  if (v1871 == 16410)
                                                  {
LABEL_2923:
                                                    v1877 = v1870 + 5632;
                                                    v1878 = v1868 - 1;
                                                    *(_DWORD *)(v1552 + 12836) = v1878;
                                                    v1879 = v1552 + 72 * v1878;
                                                    --i19;
                                                    *(_OWORD *)v1877 = *(_OWORD *)(v1879 + 5632);
                                                    v1880 = *(_OWORD *)(v1879 + 5648);
                                                    v1881 = *(_OWORD *)(v1879 + 5664);
                                                    v1882 = *(_OWORD *)(v1879 + 5680);
                                                    *(_QWORD *)(v1877 + 64) = *(_QWORD *)(v1879 + 5696);
                                                    *(_OWORD *)(v1877 + 32) = v1881;
                                                    *(_OWORD *)(v1877 + 48) = v1882;
                                                    *(_OWORD *)(v1877 + 16) = v1880;
                                                    v1868 = *(_DWORD *)(v1552 + 12836);
                                                  }
                                                  else
                                                  {
                                                    LOWORD(v1872) = 16410;
                                                    while (1)
                                                    {
                                                      v1873 = v1872 & 0x3FFF;
                                                      if (v1873 == 1)
                                                        break;
                                                      if (v1873 == 2)
                                                        v1874 = 16385;
                                                      else
                                                        v1874 = 16387;
                                                      if (v1873 == 3)
                                                        v1872 = 16385;
                                                      else
                                                        v1872 = v1874;
                                                      if (v1872 == v1871)
                                                        goto LABEL_2923;
                                                    }
                                                    while (1)
                                                    {
                                                      v1875 = v1871 & 0x3FFF;
                                                      if (v1875 == 1)
                                                        break;
                                                      if (v1875 == 2)
                                                        v1876 = 16385;
                                                      else
                                                        v1876 = 16387;
                                                      if ((v1871 & 0x4000) != 0)
                                                        v1871 = v1876;
                                                      else
                                                        v1871 = v1875 | 0x4000u;
                                                      if (v1875 == 40)
                                                        v1871 = 16385;
                                                      if (v1875 == 3)
                                                        v1871 = 16385;
                                                      if (v1871 == 16410)
                                                        goto LABEL_2923;
                                                    }
                                                  }
                                                }
                                                v1552 = *v2473;
                                                v1883 = *(_DWORD *)(*v2473 + 12836);
                                                if (v1883)
                                                {
                                                  for (i20 = 0; i20 < v1883; ++i20)
                                                  {
                                                    v1885 = v1552 + 72 * i20;
                                                    v1886 = *(_QWORD *)(v1885 + 5640);
                                                    if (v1886 == 16411)
                                                    {
LABEL_2950:
                                                      v1892 = v1885 + 5632;
                                                      v1893 = v1883 - 1;
                                                      *(_DWORD *)(v1552 + 12836) = v1893;
                                                      v1894 = v1552 + 72 * v1893;
                                                      --i20;
                                                      *(_OWORD *)v1892 = *(_OWORD *)(v1894 + 5632);
                                                      v1895 = *(_OWORD *)(v1894 + 5648);
                                                      v1896 = *(_OWORD *)(v1894 + 5664);
                                                      v1897 = *(_OWORD *)(v1894 + 5680);
                                                      *(_QWORD *)(v1892 + 64) = *(_QWORD *)(v1894 + 5696);
                                                      *(_OWORD *)(v1892 + 32) = v1896;
                                                      *(_OWORD *)(v1892 + 48) = v1897;
                                                      *(_OWORD *)(v1892 + 16) = v1895;
                                                      v1883 = *(_DWORD *)(v1552 + 12836);
                                                    }
                                                    else
                                                    {
                                                      LOWORD(v1887) = 16411;
                                                      while (1)
                                                      {
                                                        v1888 = v1887 & 0x3FFF;
                                                        if (v1888 == 1)
                                                          break;
                                                        if (v1888 == 2)
                                                          v1889 = 16385;
                                                        else
                                                          v1889 = 16387;
                                                        if (v1888 == 3)
                                                          v1887 = 16385;
                                                        else
                                                          v1887 = v1889;
                                                        if (v1887 == v1886)
                                                          goto LABEL_2950;
                                                      }
                                                      while (1)
                                                      {
                                                        v1890 = v1886 & 0x3FFF;
                                                        if (v1890 == 1)
                                                          break;
                                                        if (v1890 == 2)
                                                          v1891 = 16385;
                                                        else
                                                          v1891 = 16387;
                                                        if ((v1886 & 0x4000) != 0)
                                                          v1886 = v1891;
                                                        else
                                                          v1886 = v1890 | 0x4000u;
                                                        if (v1890 == 40)
                                                          v1886 = 16385;
                                                        if (v1890 == 3)
                                                          v1886 = 16385;
                                                        if (v1886 == 16411)
                                                          goto LABEL_2950;
                                                      }
                                                    }
                                                  }
                                                  v1552 = *v2473;
                                                  v1898 = *(_DWORD *)(*v2473 + 12836);
                                                  if (v1898)
                                                  {
                                                    for (i21 = 0; i21 < v1898; ++i21)
                                                    {
                                                      v1900 = v1552 + 72 * i21;
                                                      v1901 = *(_QWORD *)(v1900 + 5640);
                                                      if (v1901 == 16412)
                                                      {
LABEL_2977:
                                                        v1907 = v1900 + 5632;
                                                        v1908 = v1898 - 1;
                                                        *(_DWORD *)(v1552 + 12836) = v1908;
                                                        v1909 = v1552 + 72 * v1908;
                                                        --i21;
                                                        *(_OWORD *)v1907 = *(_OWORD *)(v1909 + 5632);
                                                        v1910 = *(_OWORD *)(v1909 + 5648);
                                                        v1911 = *(_OWORD *)(v1909 + 5664);
                                                        v1912 = *(_OWORD *)(v1909 + 5680);
                                                        *(_QWORD *)(v1907 + 64) = *(_QWORD *)(v1909 + 5696);
                                                        *(_OWORD *)(v1907 + 32) = v1911;
                                                        *(_OWORD *)(v1907 + 48) = v1912;
                                                        *(_OWORD *)(v1907 + 16) = v1910;
                                                        v1898 = *(_DWORD *)(v1552 + 12836);
                                                      }
                                                      else
                                                      {
                                                        LOWORD(v1902) = 16412;
                                                        while (1)
                                                        {
                                                          v1903 = v1902 & 0x3FFF;
                                                          if (v1903 == 1)
                                                            break;
                                                          if (v1903 == 2)
                                                            v1904 = 16385;
                                                          else
                                                            v1904 = 16387;
                                                          if (v1903 == 3)
                                                            v1902 = 16385;
                                                          else
                                                            v1902 = v1904;
                                                          if (v1902 == v1901)
                                                            goto LABEL_2977;
                                                        }
                                                        while (1)
                                                        {
                                                          v1905 = v1901 & 0x3FFF;
                                                          if (v1905 == 1)
                                                            break;
                                                          if (v1905 == 2)
                                                            v1906 = 16385;
                                                          else
                                                            v1906 = 16387;
                                                          if ((v1901 & 0x4000) != 0)
                                                            v1901 = v1906;
                                                          else
                                                            v1901 = v1905 | 0x4000u;
                                                          if (v1905 == 40)
                                                            v1901 = 16385;
                                                          if (v1905 == 3)
                                                            v1901 = 16385;
                                                          if (v1901 == 16412)
                                                            goto LABEL_2977;
                                                        }
                                                      }
                                                    }
                                                    v1552 = *v2473;
                                                    v1913 = *(_DWORD *)(*v2473 + 12836);
                                                    if (v1913)
                                                    {
                                                      for (i22 = 0; i22 < v1913; ++i22)
                                                      {
                                                        v1915 = v1552 + 72 * i22;
                                                        v1916 = *(_QWORD *)(v1915 + 5640);
                                                        if (v1916 == 16413)
                                                        {
LABEL_3004:
                                                          v1922 = v1915 + 5632;
                                                          v1923 = v1913 - 1;
                                                          *(_DWORD *)(v1552 + 12836) = v1923;
                                                          v1924 = v1552 + 72 * v1923;
                                                          --i22;
                                                          *(_OWORD *)v1922 = *(_OWORD *)(v1924 + 5632);
                                                          v1925 = *(_OWORD *)(v1924 + 5648);
                                                          v1926 = *(_OWORD *)(v1924 + 5664);
                                                          v1927 = *(_OWORD *)(v1924 + 5680);
                                                          *(_QWORD *)(v1922 + 64) = *(_QWORD *)(v1924 + 5696);
                                                          *(_OWORD *)(v1922 + 32) = v1926;
                                                          *(_OWORD *)(v1922 + 48) = v1927;
                                                          *(_OWORD *)(v1922 + 16) = v1925;
                                                          v1913 = *(_DWORD *)(v1552 + 12836);
                                                        }
                                                        else
                                                        {
                                                          LOWORD(v1917) = 16413;
                                                          while (1)
                                                          {
                                                            v1918 = v1917 & 0x3FFF;
                                                            if (v1918 == 1)
                                                              break;
                                                            if (v1918 == 2)
                                                              v1919 = 16385;
                                                            else
                                                              v1919 = 16387;
                                                            if (v1918 == 3)
                                                              v1917 = 16385;
                                                            else
                                                              v1917 = v1919;
                                                            if (v1917 == v1916)
                                                              goto LABEL_3004;
                                                          }
                                                          while (1)
                                                          {
                                                            v1920 = v1916 & 0x3FFF;
                                                            if (v1920 == 1)
                                                              break;
                                                            if (v1920 == 2)
                                                              v1921 = 16385;
                                                            else
                                                              v1921 = 16387;
                                                            if ((v1916 & 0x4000) != 0)
                                                              v1916 = v1921;
                                                            else
                                                              v1916 = v1920 | 0x4000u;
                                                            if (v1920 == 40)
                                                              v1916 = 16385;
                                                            if (v1920 == 3)
                                                              v1916 = 16385;
                                                            if (v1916 == 16413)
                                                              goto LABEL_3004;
                                                          }
                                                        }
                                                      }
                                                      v1552 = *v2473;
                                                      v1928 = *(_DWORD *)(*v2473 + 12836);
                                                      if (v1928)
                                                      {
                                                        for (i23 = 0; i23 < v1928; ++i23)
                                                        {
                                                          v1930 = v1552 + 72 * i23;
                                                          v1931 = *(_QWORD *)(v1930 + 5640);
                                                          if (v1931 == 16414)
                                                          {
LABEL_3031:
                                                            v1937 = v1930 + 5632;
                                                            v1938 = v1928 - 1;
                                                            *(_DWORD *)(v1552 + 12836) = v1938;
                                                            v1939 = v1552 + 72 * v1938;
                                                            --i23;
                                                            *(_OWORD *)v1937 = *(_OWORD *)(v1939 + 5632);
                                                            v1940 = *(_OWORD *)(v1939 + 5648);
                                                            v1941 = *(_OWORD *)(v1939 + 5664);
                                                            v1942 = *(_OWORD *)(v1939 + 5680);
                                                            *(_QWORD *)(v1937 + 64) = *(_QWORD *)(v1939 + 5696);
                                                            *(_OWORD *)(v1937 + 32) = v1941;
                                                            *(_OWORD *)(v1937 + 48) = v1942;
                                                            *(_OWORD *)(v1937 + 16) = v1940;
                                                            v1928 = *(_DWORD *)(v1552 + 12836);
                                                          }
                                                          else
                                                          {
                                                            LOWORD(v1932) = 16414;
                                                            while (1)
                                                            {
                                                              v1933 = v1932 & 0x3FFF;
                                                              if (v1933 == 1)
                                                                break;
                                                              if (v1933 == 2)
                                                                v1934 = 16385;
                                                              else
                                                                v1934 = 16387;
                                                              if (v1933 == 3)
                                                                v1932 = 16385;
                                                              else
                                                                v1932 = v1934;
                                                              if (v1932 == v1931)
                                                                goto LABEL_3031;
                                                            }
                                                            while (1)
                                                            {
                                                              v1935 = v1931 & 0x3FFF;
                                                              if (v1935 == 1)
                                                                break;
                                                              if (v1935 == 2)
                                                                v1936 = 16385;
                                                              else
                                                                v1936 = 16387;
                                                              if ((v1931 & 0x4000) != 0)
                                                                v1931 = v1936;
                                                              else
                                                                v1931 = v1935 | 0x4000u;
                                                              if (v1935 == 40)
                                                                v1931 = 16385;
                                                              if (v1935 == 3)
                                                                v1931 = 16385;
                                                              if (v1931 == 16414)
                                                                goto LABEL_3031;
                                                            }
                                                          }
                                                        }
                                                        v1552 = *v2473;
                                                        v1943 = *(_DWORD *)(*v2473 + 12836);
                                                        if (v1943)
                                                        {
                                                          for (i24 = 0; i24 < v1943; ++i24)
                                                          {
                                                            v1945 = v1552 + 72 * i24;
                                                            v1946 = *(_QWORD *)(v1945 + 5640);
                                                            if (v1946 == 16415)
                                                            {
LABEL_3058:
                                                              v1952 = v1945 + 5632;
                                                              v1953 = v1943 - 1;
                                                              *(_DWORD *)(v1552 + 12836) = v1953;
                                                              v1954 = v1552 + 72 * v1953;
                                                              --i24;
                                                              *(_OWORD *)v1952 = *(_OWORD *)(v1954 + 5632);
                                                              v1955 = *(_OWORD *)(v1954 + 5648);
                                                              v1956 = *(_OWORD *)(v1954 + 5664);
                                                              v1957 = *(_OWORD *)(v1954 + 5680);
                                                              *(_QWORD *)(v1952 + 64) = *(_QWORD *)(v1954 + 5696);
                                                              *(_OWORD *)(v1952 + 32) = v1956;
                                                              *(_OWORD *)(v1952 + 48) = v1957;
                                                              *(_OWORD *)(v1952 + 16) = v1955;
                                                              v1943 = *(_DWORD *)(v1552 + 12836);
                                                            }
                                                            else
                                                            {
                                                              LOWORD(v1947) = 16415;
                                                              while (1)
                                                              {
                                                                v1948 = v1947 & 0x3FFF;
                                                                if (v1948 == 1)
                                                                  break;
                                                                if (v1948 == 2)
                                                                  v1949 = 16385;
                                                                else
                                                                  v1949 = 16387;
                                                                if (v1948 == 3)
                                                                  v1947 = 16385;
                                                                else
                                                                  v1947 = v1949;
                                                                if (v1947 == v1946)
                                                                  goto LABEL_3058;
                                                              }
                                                              while (1)
                                                              {
                                                                v1950 = v1946 & 0x3FFF;
                                                                if (v1950 == 1)
                                                                  break;
                                                                if (v1950 == 2)
                                                                  v1951 = 16385;
                                                                else
                                                                  v1951 = 16387;
                                                                if ((v1946 & 0x4000) != 0)
                                                                  v1946 = v1951;
                                                                else
                                                                  v1946 = v1950 | 0x4000u;
                                                                if (v1950 == 40)
                                                                  v1946 = 16385;
                                                                if (v1950 == 3)
                                                                  v1946 = 16385;
                                                                if (v1946 == 16415)
                                                                  goto LABEL_3058;
                                                              }
                                                            }
                                                          }
                                                          v1552 = *v2473;
                                                          v1958 = *(_DWORD *)(*v2473 + 12836);
                                                          if (v1958)
                                                          {
                                                            for (i25 = 0; i25 < v1958; ++i25)
                                                            {
                                                              v1960 = v1552 + 72 * i25;
                                                              v1961 = *(_QWORD *)(v1960 + 5640);
                                                              if (v1961 == 16416)
                                                              {
LABEL_3074:
                                                                v1965 = v1960 + 5632;
                                                                v1966 = v1958 - 1;
                                                                *(_DWORD *)(v1552 + 12836) = v1966;
                                                                v1967 = v1552 + 72 * v1966;
                                                                --i25;
                                                                *(_OWORD *)v1965 = *(_OWORD *)(v1967 + 5632);
                                                                v1968 = *(_OWORD *)(v1967 + 5648);
                                                                v1969 = *(_OWORD *)(v1967 + 5664);
                                                                v1970 = *(_OWORD *)(v1967 + 5680);
                                                                *(_QWORD *)(v1965 + 64) = *(_QWORD *)(v1967 + 5696);
                                                                *(_OWORD *)(v1965 + 32) = v1969;
                                                                *(_OWORD *)(v1965 + 48) = v1970;
                                                                *(_OWORD *)(v1965 + 16) = v1968;
                                                                v1958 = *(_DWORD *)(v1552 + 12836);
                                                              }
                                                              else
                                                              {
                                                                LOWORD(v1962) = 16416;
                                                                while (1)
                                                                {
                                                                  v1963 = v1962 & 0x3FFF;
                                                                  if (v1963 == 1)
                                                                    break;
                                                                  if (v1963 == 2)
                                                                    v1964 = 16385;
                                                                  else
                                                                    v1964 = 16387;
                                                                  if (v1963 == 40)
                                                                    v1964 = 16385;
                                                                  if (v1963 == 3)
                                                                    v1962 = 16385;
                                                                  else
                                                                    v1962 = v1964;
                                                                  if (v1962 == v1961)
                                                                    goto LABEL_3074;
                                                                }
                                                                while (1)
                                                                {
                                                                  v1971 = v1961 & 0x3FFF;
                                                                  if (v1971 == 1)
                                                                    break;
                                                                  if (v1971 == 2)
                                                                    v1972 = 16385;
                                                                  else
                                                                    v1972 = 16387;
                                                                  if ((v1961 & 0x4000) != 0)
                                                                    v1961 = v1972;
                                                                  else
                                                                    v1961 = v1971 | 0x4000u;
                                                                  if (v1971 == 40)
                                                                    v1961 = 16385;
                                                                  if (v1971 == 3)
                                                                    v1961 = 16385;
                                                                  if (v1961 == 16416)
                                                                    goto LABEL_3074;
                                                                }
                                                              }
                                                            }
                                                            v1552 = *v2473;
                                                            v2035 = *(_DWORD *)(*v2473 + 12836);
                                                            if (v2035)
                                                            {
                                                              for (i26 = 0; i26 < v2035; ++i26)
                                                              {
                                                                v2037 = v1552 + 72 * i26;
                                                                v2038 = *(_QWORD *)(v2037 + 5640);
                                                                if (v2038 == 16417)
                                                                {
LABEL_3206:
                                                                  v2042 = v2037 + 5632;
                                                                  v2043 = v2035 - 1;
                                                                  *(_DWORD *)(v1552 + 12836) = v2043;
                                                                  v2044 = v1552 + 72 * v2043;
                                                                  --i26;
                                                                  *(_OWORD *)v2042 = *(_OWORD *)(v2044 + 5632);
                                                                  v2045 = *(_OWORD *)(v2044 + 5648);
                                                                  v2046 = *(_OWORD *)(v2044 + 5664);
                                                                  v2047 = *(_OWORD *)(v2044 + 5680);
                                                                  *(_QWORD *)(v2042 + 64) = *(_QWORD *)(v2044 + 5696);
                                                                  *(_OWORD *)(v2042 + 32) = v2046;
                                                                  *(_OWORD *)(v2042 + 48) = v2047;
                                                                  *(_OWORD *)(v2042 + 16) = v2045;
                                                                  v2035 = *(_DWORD *)(v1552 + 12836);
                                                                }
                                                                else
                                                                {
                                                                  LOWORD(v2039) = 16417;
                                                                  while (1)
                                                                  {
                                                                    v2040 = v2039 & 0x3FFF;
                                                                    if (v2040 == 1)
                                                                      break;
                                                                    if (v2040 == 2)
                                                                      v2041 = 16385;
                                                                    else
                                                                      v2041 = 16387;
                                                                    if (v2040 == 40)
                                                                      v2041 = 16385;
                                                                    if (v2040 == 3)
                                                                      v2039 = 16385;
                                                                    else
                                                                      v2039 = v2041;
                                                                    if (v2039 == v2038)
                                                                      goto LABEL_3206;
                                                                  }
                                                                  while (1)
                                                                  {
                                                                    v2048 = v2038 & 0x3FFF;
                                                                    if (v2048 == 1)
                                                                      break;
                                                                    if (v2048 == 2)
                                                                      v2049 = 16385;
                                                                    else
                                                                      v2049 = 16387;
                                                                    if ((v2038 & 0x4000) != 0)
                                                                      v2038 = v2049;
                                                                    else
                                                                      v2038 = v2048 | 0x4000u;
                                                                    if (v2048 == 40)
                                                                      v2038 = 16385;
                                                                    if (v2048 == 3)
                                                                      v2038 = 16385;
                                                                    if (v2038 == 16417)
                                                                      goto LABEL_3206;
                                                                  }
                                                                }
                                                              }
                                                              v1552 = *v2473;
                                                              v2050 = *(_DWORD *)(*v2473 + 12836);
                                                              if (v2050)
                                                              {
                                                                for (i27 = 0; i27 < v2050; ++i27)
                                                                {
                                                                  v2052 = v1552 + 72 * i27;
                                                                  v2053 = *(_QWORD *)(v2052 + 5640);
                                                                  if (v2053 == 16418)
                                                                  {
LABEL_3236:
                                                                    v2057 = v2052 + 5632;
                                                                    v2058 = v2050 - 1;
                                                                    *(_DWORD *)(v1552 + 12836) = v2058;
                                                                    v2059 = v1552 + 72 * v2058;
                                                                    --i27;
                                                                    *(_OWORD *)v2057 = *(_OWORD *)(v2059 + 5632);
                                                                    v2060 = *(_OWORD *)(v2059 + 5648);
                                                                    v2061 = *(_OWORD *)(v2059 + 5664);
                                                                    v2062 = *(_OWORD *)(v2059 + 5680);
                                                                    *(_QWORD *)(v2057 + 64) = *(_QWORD *)(v2059 + 5696);
                                                                    *(_OWORD *)(v2057 + 32) = v2061;
                                                                    *(_OWORD *)(v2057 + 48) = v2062;
                                                                    *(_OWORD *)(v2057 + 16) = v2060;
                                                                    v2050 = *(_DWORD *)(v1552 + 12836);
                                                                  }
                                                                  else
                                                                  {
                                                                    LOWORD(v2054) = 16418;
                                                                    while (1)
                                                                    {
                                                                      v2055 = v2054 & 0x3FFF;
                                                                      if (v2055 == 1)
                                                                        break;
                                                                      if (v2055 == 2)
                                                                        v2056 = 16385;
                                                                      else
                                                                        v2056 = 16387;
                                                                      if (v2055 == 40)
                                                                        v2056 = 16385;
                                                                      if (v2055 == 3)
                                                                        v2054 = 16385;
                                                                      else
                                                                        v2054 = v2056;
                                                                      if (v2054 == v2053)
                                                                        goto LABEL_3236;
                                                                    }
                                                                    while (1)
                                                                    {
                                                                      v2063 = v2053 & 0x3FFF;
                                                                      if (v2063 == 1)
                                                                        break;
                                                                      if (v2063 == 2)
                                                                        v2064 = 16385;
                                                                      else
                                                                        v2064 = 16387;
                                                                      if ((v2053 & 0x4000) != 0)
                                                                        v2053 = v2064;
                                                                      else
                                                                        v2053 = v2063 | 0x4000u;
                                                                      if (v2063 == 40)
                                                                        v2053 = 16385;
                                                                      if (v2063 == 3)
                                                                        v2053 = 16385;
                                                                      if (v2053 == 16418)
                                                                        goto LABEL_3236;
                                                                    }
                                                                  }
                                                                }
                                                                v1552 = *v2473;
                                                                v2065 = *(_DWORD *)(*v2473 + 12836);
                                                                if (v2065)
                                                                {
                                                                  for (i28 = 0; i28 < v2065; ++i28)
                                                                  {
                                                                    v2067 = v1552 + 72 * i28;
                                                                    v2068 = *(_QWORD *)(v2067 + 5640);
                                                                    if (v2068 == 16419)
                                                                    {
LABEL_3266:
                                                                      v2072 = v2067 + 5632;
                                                                      v2073 = v2065 - 1;
                                                                      *(_DWORD *)(v1552 + 12836) = v2073;
                                                                      v2074 = v1552 + 72 * v2073;
                                                                      --i28;
                                                                      *(_OWORD *)v2072 = *(_OWORD *)(v2074 + 5632);
                                                                      v2075 = *(_OWORD *)(v2074 + 5648);
                                                                      v2076 = *(_OWORD *)(v2074 + 5664);
                                                                      v2077 = *(_OWORD *)(v2074 + 5680);
                                                                      *(_QWORD *)(v2072 + 64) = *(_QWORD *)(v2074 + 5696);
                                                                      *(_OWORD *)(v2072 + 32) = v2076;
                                                                      *(_OWORD *)(v2072 + 48) = v2077;
                                                                      *(_OWORD *)(v2072 + 16) = v2075;
                                                                      v2065 = *(_DWORD *)(v1552 + 12836);
                                                                    }
                                                                    else
                                                                    {
                                                                      LOWORD(v2069) = 16419;
                                                                      while (1)
                                                                      {
                                                                        v2070 = v2069 & 0x3FFF;
                                                                        if (v2070 == 1)
                                                                          break;
                                                                        if (v2070 == 2)
                                                                          v2071 = 16385;
                                                                        else
                                                                          v2071 = 16387;
                                                                        if (v2070 == 40)
                                                                          v2071 = 16385;
                                                                        if (v2070 == 3)
                                                                          v2069 = 16385;
                                                                        else
                                                                          v2069 = v2071;
                                                                        if (v2069 == v2068)
                                                                          goto LABEL_3266;
                                                                      }
                                                                      while (1)
                                                                      {
                                                                        v2078 = v2068 & 0x3FFF;
                                                                        if (v2078 == 1)
                                                                          break;
                                                                        if (v2078 == 2)
                                                                          v2079 = 16385;
                                                                        else
                                                                          v2079 = 16387;
                                                                        if ((v2068 & 0x4000) != 0)
                                                                          v2068 = v2079;
                                                                        else
                                                                          v2068 = v2078 | 0x4000u;
                                                                        if (v2078 == 40)
                                                                          v2068 = 16385;
                                                                        if (v2078 == 3)
                                                                          v2068 = 16385;
                                                                        if (v2068 == 16419)
                                                                          goto LABEL_3266;
                                                                      }
                                                                    }
                                                                  }
                                                                  v1552 = *v2473;
                                                                  v2080 = *(_DWORD *)(*v2473 + 12836);
                                                                  if (v2080)
                                                                  {
                                                                    for (i29 = 0; i29 < v2080; ++i29)
                                                                    {
                                                                      v2082 = v1552 + 72 * i29;
                                                                      v2083 = *(_QWORD *)(v2082 + 5640);
                                                                      if (v2083 == 16420)
                                                                      {
LABEL_3296:
                                                                        v2087 = v2082 + 5632;
                                                                        v2088 = v2080 - 1;
                                                                        *(_DWORD *)(v1552 + 12836) = v2088;
                                                                        v2089 = v1552 + 72 * v2088;
                                                                        --i29;
                                                                        *(_OWORD *)v2087 = *(_OWORD *)(v2089 + 5632);
                                                                        v2090 = *(_OWORD *)(v2089 + 5648);
                                                                        v2091 = *(_OWORD *)(v2089 + 5664);
                                                                        v2092 = *(_OWORD *)(v2089 + 5680);
                                                                        *(_QWORD *)(v2087 + 64) = *(_QWORD *)(v2089 + 5696);
                                                                        *(_OWORD *)(v2087 + 32) = v2091;
                                                                        *(_OWORD *)(v2087 + 48) = v2092;
                                                                        *(_OWORD *)(v2087 + 16) = v2090;
                                                                        v2080 = *(_DWORD *)(v1552 + 12836);
                                                                      }
                                                                      else
                                                                      {
                                                                        LOWORD(v2084) = 16420;
                                                                        while (1)
                                                                        {
                                                                          v2085 = v2084 & 0x3FFF;
                                                                          if (v2085 == 1)
                                                                            break;
                                                                          if (v2085 == 2)
                                                                            v2086 = 16385;
                                                                          else
                                                                            v2086 = 16387;
                                                                          if (v2085 == 40)
                                                                            v2086 = 16385;
                                                                          if (v2085 == 3)
                                                                            v2084 = 16385;
                                                                          else
                                                                            v2084 = v2086;
                                                                          if (v2084 == v2083)
                                                                            goto LABEL_3296;
                                                                        }
                                                                        while (1)
                                                                        {
                                                                          v2093 = v2083 & 0x3FFF;
                                                                          if (v2093 == 1)
                                                                            break;
                                                                          if (v2093 == 2)
                                                                            v2094 = 16385;
                                                                          else
                                                                            v2094 = 16387;
                                                                          if ((v2083 & 0x4000) != 0)
                                                                            v2083 = v2094;
                                                                          else
                                                                            v2083 = v2093 | 0x4000u;
                                                                          if (v2093 == 40)
                                                                            v2083 = 16385;
                                                                          if (v2093 == 3)
                                                                            v2083 = 16385;
                                                                          if (v2083 == 16420)
                                                                            goto LABEL_3296;
                                                                        }
                                                                      }
                                                                    }
                                                                    v1552 = *v2473;
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_3312:
      v2095 = *v2473;
      v2096 = *(_DWORD *)(*v2473 + 12836);
      if (v2096)
      {
        for (i30 = 0; i30 < v2096; ++i30)
        {
          v2098 = v2095 + 72 * i30;
          v2099 = *(_QWORD *)(v2098 + 5640);
          if (v2099 == 16422)
          {
LABEL_3326:
            v2103 = v2098 + 5632;
            v2104 = v2096 - 1;
            *(_DWORD *)(v2095 + 12836) = v2104;
            v2105 = v2095 + 72 * v2104;
            --i30;
            *(_OWORD *)v2103 = *(_OWORD *)(v2105 + 5632);
            v2106 = *(_OWORD *)(v2105 + 5648);
            v2107 = *(_OWORD *)(v2105 + 5664);
            v2108 = *(_OWORD *)(v2105 + 5680);
            *(_QWORD *)(v2103 + 64) = *(_QWORD *)(v2105 + 5696);
            *(_OWORD *)(v2103 + 32) = v2107;
            *(_OWORD *)(v2103 + 48) = v2108;
            *(_OWORD *)(v2103 + 16) = v2106;
            v2096 = *(_DWORD *)(v2095 + 12836);
          }
          else
          {
            LOWORD(v2100) = 16422;
            while (1)
            {
              v2101 = v2100 & 0x3FFF;
              if (v2101 == 1)
                break;
              if (v2101 == 2)
                v2102 = 16385;
              else
                v2102 = 16387;
              if (v2101 == 40)
                v2102 = 16385;
              if (v2101 == 3)
                v2100 = 16385;
              else
                v2100 = v2102;
              if (v2100 == v2099)
                goto LABEL_3326;
            }
            while (1)
            {
              v2109 = v2099 & 0x3FFF;
              if (v2109 == 1)
                break;
              if (v2109 == 2)
                v2110 = 16385;
              else
                v2110 = 16387;
              if ((v2099 & 0x4000) != 0)
                v2099 = v2110;
              else
                v2099 = v2109 | 0x4000u;
              if (v2109 == 40)
                v2099 = 16385;
              if (v2109 == 3)
                v2099 = 16385;
              if (v2099 == 16422)
                goto LABEL_3326;
            }
          }
        }
        v2111 = *v2473;
        v2112 = *(_DWORD *)(*v2473 + 12836);
        if (v2112)
        {
          for (i31 = 0; i31 < v2112; ++i31)
          {
            v2114 = v2111 + 72 * i31;
            v2115 = *(_QWORD *)(v2114 + 5640);
            if (v2115 == 16423)
            {
LABEL_3356:
              v2119 = v2114 + 5632;
              v2120 = v2112 - 1;
              *(_DWORD *)(v2111 + 12836) = v2120;
              v2121 = v2111 + 72 * v2120;
              --i31;
              *(_OWORD *)v2119 = *(_OWORD *)(v2121 + 5632);
              v2122 = *(_OWORD *)(v2121 + 5648);
              v2123 = *(_OWORD *)(v2121 + 5664);
              v2124 = *(_OWORD *)(v2121 + 5680);
              *(_QWORD *)(v2119 + 64) = *(_QWORD *)(v2121 + 5696);
              *(_OWORD *)(v2119 + 32) = v2123;
              *(_OWORD *)(v2119 + 48) = v2124;
              *(_OWORD *)(v2119 + 16) = v2122;
              v2112 = *(_DWORD *)(v2111 + 12836);
            }
            else
            {
              LOWORD(v2116) = 16423;
              while (1)
              {
                v2117 = v2116 & 0x3FFF;
                if (v2117 == 1)
                  break;
                if (v2117 == 2)
                  v2118 = 16385;
                else
                  v2118 = 16387;
                if (v2117 == 40)
                  v2118 = 16385;
                if (v2117 == 3)
                  v2116 = 16385;
                else
                  v2116 = v2118;
                if (v2116 == v2115)
                  goto LABEL_3356;
              }
              while (1)
              {
                v2125 = v2115 & 0x3FFF;
                if (v2125 == 1)
                  break;
                if (v2125 == 2)
                  v2126 = 16385;
                else
                  v2126 = 16387;
                if ((v2115 & 0x4000) != 0)
                  v2115 = v2126;
                else
                  v2115 = v2125 | 0x4000u;
                if (v2125 == 40)
                  v2115 = 16385;
                if (v2125 == 3)
                  v2115 = 16385;
                if (v2115 == 16423)
                  goto LABEL_3356;
              }
            }
          }
        }
      }
      return;
    case 0x87:
      v166 = *v2473;
      v167 = *(_DWORD *)(*v2473 + 12836);
      if (!v167)
        goto LABEL_260;
      for (i32 = 0; i32 < v167; ++i32)
      {
        v169 = v166 + 72 * i32;
        v170 = *(_QWORD *)(v169 + 5640);
        if (v170 == 16394)
        {
LABEL_204:
          v176 = v169 + 5632;
          v177 = v167 - 1;
          *(_DWORD *)(v166 + 12836) = v177;
          v178 = v166 + 72 * v177;
          --i32;
          *(_OWORD *)v176 = *(_OWORD *)(v178 + 5632);
          v179 = *(_OWORD *)(v178 + 5648);
          v180 = *(_OWORD *)(v178 + 5664);
          v181 = *(_OWORD *)(v178 + 5680);
          *(_QWORD *)(v176 + 64) = *(_QWORD *)(v178 + 5696);
          *(_OWORD *)(v176 + 32) = v180;
          *(_OWORD *)(v176 + 48) = v181;
          *(_OWORD *)(v176 + 16) = v179;
          v167 = *(_DWORD *)(v166 + 12836);
        }
        else
        {
          LOWORD(v171) = 16394;
          while (1)
          {
            v172 = v171 & 0x3FFF;
            if (v172 == 1)
              break;
            if (v172 == 2)
              v173 = 16385;
            else
              v173 = 16387;
            if (v172 == 3)
              v171 = 16385;
            else
              v171 = v173;
            if (v171 == v170)
              goto LABEL_204;
          }
          while (1)
          {
            v174 = v170 & 0x3FFF;
            if (v174 == 1)
              break;
            if (v174 == 2)
              v175 = 16385;
            else
              v175 = 16387;
            if ((v170 & 0x4000) != 0)
              v170 = v175;
            else
              v170 = v174 | 0x4000u;
            if (v174 == 40)
              v170 = 16385;
            if (v174 == 3)
              v170 = 16385;
            if (v170 == 16394)
              goto LABEL_204;
          }
        }
      }
      v182 = *v2473;
      v183 = *(_DWORD *)(*v2473 + 12836);
      if (v183)
      {
        for (i33 = 0; i33 < v183; ++i33)
        {
          v185 = v182 + 72 * i33;
          v186 = *(_QWORD *)(v185 + 5640);
          if (v186 == 16395)
          {
LABEL_231:
            v192 = v185 + 5632;
            v193 = v183 - 1;
            *(_DWORD *)(v182 + 12836) = v193;
            v194 = v182 + 72 * v193;
            --i33;
            *(_OWORD *)v192 = *(_OWORD *)(v194 + 5632);
            v195 = *(_OWORD *)(v194 + 5648);
            v196 = *(_OWORD *)(v194 + 5664);
            v197 = *(_OWORD *)(v194 + 5680);
            *(_QWORD *)(v192 + 64) = *(_QWORD *)(v194 + 5696);
            *(_OWORD *)(v192 + 32) = v196;
            *(_OWORD *)(v192 + 48) = v197;
            *(_OWORD *)(v192 + 16) = v195;
            v183 = *(_DWORD *)(v182 + 12836);
          }
          else
          {
            LOWORD(v187) = 16395;
            while (1)
            {
              v188 = v187 & 0x3FFF;
              if (v188 == 1)
                break;
              if (v188 == 2)
                v189 = 16385;
              else
                v189 = 16387;
              if (v188 == 3)
                v187 = 16385;
              else
                v187 = v189;
              if (v187 == v186)
                goto LABEL_231;
            }
            while (1)
            {
              v190 = v186 & 0x3FFF;
              if (v190 == 1)
                break;
              if (v190 == 2)
                v191 = 16385;
              else
                v191 = 16387;
              if ((v186 & 0x4000) != 0)
                v186 = v191;
              else
                v186 = v190 | 0x4000u;
              if (v190 == 40)
                v186 = 16385;
              if (v190 == 3)
                v186 = 16385;
              if (v186 == 16395)
                goto LABEL_231;
            }
          }
        }
        v198 = *v2473;
        v199 = *(_DWORD *)(*v2473 + 12836);
        if (v199)
        {
          for (i34 = 0; i34 < v199; ++i34)
          {
            v201 = v198 + 72 * i34;
            v202 = *(_QWORD *)(v201 + 5640);
            if (v202 == 16393)
            {
LABEL_258:
              v208 = v201 + 5632;
              v209 = v199 - 1;
              *(_DWORD *)(v198 + 12836) = v209;
              v210 = v198 + 72 * v209;
              --i34;
              *(_OWORD *)v208 = *(_OWORD *)(v210 + 5632);
              v211 = *(_OWORD *)(v210 + 5648);
              v212 = *(_OWORD *)(v210 + 5664);
              v213 = *(_OWORD *)(v210 + 5680);
              *(_QWORD *)(v208 + 64) = *(_QWORD *)(v210 + 5696);
              *(_OWORD *)(v208 + 32) = v212;
              *(_OWORD *)(v208 + 48) = v213;
              *(_OWORD *)(v208 + 16) = v211;
              v199 = *(_DWORD *)(v198 + 12836);
            }
            else
            {
              LOWORD(v203) = 16393;
              while (1)
              {
                v204 = v203 & 0x3FFF;
                if (v204 == 1)
                  break;
                if (v204 == 2)
                  v205 = 16385;
                else
                  v205 = 16387;
                if (v204 == 3)
                  v203 = 16385;
                else
                  v203 = v205;
                if (v203 == v202)
                  goto LABEL_258;
              }
              while (1)
              {
                v206 = v202 & 0x3FFF;
                if (v206 == 1)
                  break;
                if (v206 == 2)
                  v207 = 16385;
                else
                  v207 = 16387;
                if ((v202 & 0x4000) != 0)
                  v202 = v207;
                else
                  v202 = v206 | 0x4000u;
                if (v206 == 40)
                  v202 = 16385;
                if (v206 == 3)
                  v202 = 16385;
                if (v202 == 16393)
                  goto LABEL_258;
              }
            }
          }
        }
      }
LABEL_260:
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 72) + 8) + 16) & 0x3E000) != 0x4000)
        return;
      v214 = *v2473;
LABEL_262:
      v215 = 16399;
      goto LABEL_2067;
    case 0x88:
    case 0x89:
      v774 = *v2473;
      v775 = *(_DWORD *)(*v2473 + 12836);
      if (!v775)
        return;
      for (i35 = 0; i35 < v775; ++i35)
      {
        v777 = v774 + 72 * i35;
        v778 = *(_QWORD *)(v777 + 5640);
        if (v778 == 16407)
        {
LABEL_1116:
          v784 = v777 + 5632;
          v785 = v775 - 1;
          *(_DWORD *)(v774 + 12836) = v785;
          v786 = v774 + 72 * v785;
          --i35;
          *(_OWORD *)v784 = *(_OWORD *)(v786 + 5632);
          v787 = *(_OWORD *)(v786 + 5648);
          v788 = *(_OWORD *)(v786 + 5664);
          v789 = *(_OWORD *)(v786 + 5680);
          *(_QWORD *)(v784 + 64) = *(_QWORD *)(v786 + 5696);
          *(_OWORD *)(v784 + 32) = v788;
          *(_OWORD *)(v784 + 48) = v789;
          *(_OWORD *)(v784 + 16) = v787;
          v775 = *(_DWORD *)(v774 + 12836);
        }
        else
        {
          LOWORD(v779) = 16407;
          while (1)
          {
            v780 = v779 & 0x3FFF;
            if (v780 == 1)
              break;
            if (v780 == 2)
              v781 = 16385;
            else
              v781 = 16387;
            if (v780 == 3)
              v779 = 16385;
            else
              v779 = v781;
            if (v779 == v778)
              goto LABEL_1116;
          }
          while (1)
          {
            v782 = v778 & 0x3FFF;
            if (v782 == 1)
              break;
            if (v782 == 2)
              v783 = 16385;
            else
              v783 = 16387;
            if ((v778 & 0x4000) != 0)
              v778 = v783;
            else
              v778 = v782 | 0x4000u;
            if (v782 == 40)
              v778 = 16385;
            if (v782 == 3)
              v778 = 16385;
            if (v778 == 16407)
              goto LABEL_1116;
          }
        }
      }
      return;
    case 0x8A:
      v131 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v2766 = 4;
      v2767 = 16396;
      v2768 = v131;
      v2769 = 0u;
      v2770 = 0u;
      v107 = *(_QWORD *)v8;
      v108 = &v2766;
      goto LABEL_119;
    case 0x8B:
      v790 = *v2473;
      v791 = *(_DWORD *)(*v2473 + 12836);
      if (!v791)
        goto LABEL_1173;
      for (i36 = 0; i36 < v791; ++i36)
      {
        v793 = v790 + 72 * i36;
        v794 = *(_QWORD *)(v793 + 5640);
        if (v794 == 16396)
        {
LABEL_1144:
          v800 = v793 + 5632;
          v801 = v791 - 1;
          *(_DWORD *)(v790 + 12836) = v801;
          v802 = v790 + 72 * v801;
          --i36;
          *(_OWORD *)v800 = *(_OWORD *)(v802 + 5632);
          v803 = *(_OWORD *)(v802 + 5648);
          v804 = *(_OWORD *)(v802 + 5664);
          v805 = *(_OWORD *)(v802 + 5680);
          *(_QWORD *)(v800 + 64) = *(_QWORD *)(v802 + 5696);
          *(_OWORD *)(v800 + 32) = v804;
          *(_OWORD *)(v800 + 48) = v805;
          *(_OWORD *)(v800 + 16) = v803;
          v791 = *(_DWORD *)(v790 + 12836);
        }
        else
        {
          LOWORD(v795) = 16396;
          while (1)
          {
            v796 = v795 & 0x3FFF;
            if (v796 == 1)
              break;
            if (v796 == 2)
              v797 = 16385;
            else
              v797 = 16387;
            if (v796 == 3)
              v795 = 16385;
            else
              v795 = v797;
            if (v795 == v794)
              goto LABEL_1144;
          }
          while (1)
          {
            v798 = v794 & 0x3FFF;
            if (v798 == 1)
              break;
            if (v798 == 2)
              v799 = 16385;
            else
              v799 = 16387;
            if ((v794 & 0x4000) != 0)
              v794 = v799;
            else
              v794 = v798 | 0x4000u;
            if (v798 == 40)
              v794 = 16385;
            if (v798 == 3)
              v794 = 16385;
            if (v794 == 16396)
              goto LABEL_1144;
          }
        }
      }
      v806 = *v2473;
      v807 = *(_DWORD *)(*v2473 + 12836);
      if (v807)
      {
        for (i37 = 0; i37 < v807; ++i37)
        {
          v809 = v806 + 72 * i37;
          v810 = *(_QWORD *)(v809 + 5640);
          if (v810 == 16394)
          {
LABEL_1171:
            v816 = v809 + 5632;
            v817 = v807 - 1;
            *(_DWORD *)(v806 + 12836) = v817;
            v818 = v806 + 72 * v817;
            --i37;
            *(_OWORD *)v816 = *(_OWORD *)(v818 + 5632);
            v819 = *(_OWORD *)(v818 + 5648);
            v820 = *(_OWORD *)(v818 + 5664);
            v821 = *(_OWORD *)(v818 + 5680);
            *(_QWORD *)(v816 + 64) = *(_QWORD *)(v818 + 5696);
            *(_OWORD *)(v816 + 32) = v820;
            *(_OWORD *)(v816 + 48) = v821;
            *(_OWORD *)(v816 + 16) = v819;
            v807 = *(_DWORD *)(v806 + 12836);
          }
          else
          {
            LOWORD(v811) = 16394;
            while (1)
            {
              v812 = v811 & 0x3FFF;
              if (v812 == 1)
                break;
              if (v812 == 2)
                v813 = 16385;
              else
                v813 = 16387;
              if (v812 == 3)
                v811 = 16385;
              else
                v811 = v813;
              if (v811 == v810)
                goto LABEL_1171;
            }
            while (1)
            {
              v814 = v810 & 0x3FFF;
              if (v814 == 1)
                break;
              if (v814 == 2)
                v815 = 16385;
              else
                v815 = 16387;
              if ((v810 & 0x4000) != 0)
                v810 = v815;
              else
                v810 = v814 | 0x4000u;
              if (v814 == 40)
                v810 = 16385;
              if (v814 == 3)
                v810 = 16385;
              if (v810 == 16394)
                goto LABEL_1171;
            }
          }
        }
      }
LABEL_1173:
      v822 = *(_QWORD *)(v10 + 32);
      v823 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      LODWORD(v2771[0]) = 4;
      v2771[1] = 16396;
      v2771[2] = v823;
      v2772 = 0u;
      v2773 = 0u;
      if ((v822 & 0xFF00FFFFFFFFFFFFLL) != 0
        && (v1081 = *(unsigned __int16 *)((v822 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v1081 <= 2))
      {
        v824 = *(_QWORD *)((v822 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        if (*(_WORD *)((v822 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
        {
          if ((_DWORD)v1081 != 1)
            v1081 = 2;
          v824 |= v1081;
        }
      }
      else
      {
        v824 = 0;
      }
      return;
    case 0x91:
    case 0x92:
      v534 = *v2473;
      v535 = *(_DWORD *)(*v2473 + 12836);
      if (!v535)
        return;
      for (i38 = 0; i38 < v535; ++i38)
      {
        v537 = v534 + 72 * i38;
        v538 = *(_QWORD *)(v537 + 5640);
        if (v538 == 16394)
        {
LABEL_736:
          v544 = v537 + 5632;
          v545 = v535 - 1;
          *(_DWORD *)(v534 + 12836) = v545;
          v546 = v534 + 72 * v545;
          --i38;
          *(_OWORD *)v544 = *(_OWORD *)(v546 + 5632);
          v547 = *(_OWORD *)(v546 + 5648);
          v548 = *(_OWORD *)(v546 + 5664);
          v549 = *(_OWORD *)(v546 + 5680);
          *(_QWORD *)(v544 + 64) = *(_QWORD *)(v546 + 5696);
          *(_OWORD *)(v544 + 32) = v548;
          *(_OWORD *)(v544 + 48) = v549;
          *(_OWORD *)(v544 + 16) = v547;
          v535 = *(_DWORD *)(v534 + 12836);
        }
        else
        {
          LOWORD(v539) = 16394;
          while (1)
          {
            v540 = v539 & 0x3FFF;
            if (v540 == 1)
              break;
            if (v540 == 2)
              v541 = 16385;
            else
              v541 = 16387;
            if (v540 == 3)
              v539 = 16385;
            else
              v539 = v541;
            if (v539 == v538)
              goto LABEL_736;
          }
          while (1)
          {
            v542 = v538 & 0x3FFF;
            if (v542 == 1)
              break;
            if (v542 == 2)
              v543 = 16385;
            else
              v543 = 16387;
            if ((v538 & 0x4000) != 0)
              v538 = v543;
            else
              v538 = v542 | 0x4000u;
            if (v542 == 40)
              v538 = 16385;
            if (v542 == 3)
              v538 = 16385;
            if (v538 == 16394)
              goto LABEL_736;
          }
        }
      }
      v550 = *v2473;
      v551 = *(_DWORD *)(*v2473 + 12836);
      if (v551)
      {
        for (i39 = 0; i39 < v551; ++i39)
        {
          v553 = v550 + 72 * i39;
          v554 = *(_QWORD *)(v553 + 5640);
          if (v554 == 16393)
          {
LABEL_763:
            v560 = v553 + 5632;
            v561 = v551 - 1;
            *(_DWORD *)(v550 + 12836) = v561;
            v562 = v550 + 72 * v561;
            --i39;
            *(_OWORD *)v560 = *(_OWORD *)(v562 + 5632);
            v563 = *(_OWORD *)(v562 + 5648);
            v564 = *(_OWORD *)(v562 + 5664);
            v565 = *(_OWORD *)(v562 + 5680);
            *(_QWORD *)(v560 + 64) = *(_QWORD *)(v562 + 5696);
            *(_OWORD *)(v560 + 32) = v564;
            *(_OWORD *)(v560 + 48) = v565;
            *(_OWORD *)(v560 + 16) = v563;
            v551 = *(_DWORD *)(v550 + 12836);
          }
          else
          {
            LOWORD(v555) = 16393;
            while (1)
            {
              v556 = v555 & 0x3FFF;
              if (v556 == 1)
                break;
              if (v556 == 2)
                v557 = 16385;
              else
                v557 = 16387;
              if (v556 == 3)
                v555 = 16385;
              else
                v555 = v557;
              if (v555 == v554)
                goto LABEL_763;
            }
            while (1)
            {
              v558 = v554 & 0x3FFF;
              if (v558 == 1)
                break;
              if (v558 == 2)
                v559 = 16385;
              else
                v559 = 16387;
              if ((v554 & 0x4000) != 0)
                v554 = v559;
              else
                v554 = v558 | 0x4000u;
              if (v558 == 40)
                v554 = 16385;
              if (v558 == 3)
                v554 = 16385;
              if (v554 == 16393)
                goto LABEL_763;
            }
          }
        }
        v566 = *v2473;
        v567 = *(_DWORD *)(*v2473 + 12836);
        if (v567)
        {
          for (i40 = 0; i40 < v567; ++i40)
          {
            v569 = v566 + 72 * i40;
            v570 = *(_QWORD *)(v569 + 5640);
            if (v570 == 16396)
            {
LABEL_790:
              v576 = v569 + 5632;
              v577 = v567 - 1;
              *(_DWORD *)(v566 + 12836) = v577;
              v578 = v566 + 72 * v577;
              --i40;
              *(_OWORD *)v576 = *(_OWORD *)(v578 + 5632);
              v579 = *(_OWORD *)(v578 + 5648);
              v580 = *(_OWORD *)(v578 + 5664);
              v581 = *(_OWORD *)(v578 + 5680);
              *(_QWORD *)(v576 + 64) = *(_QWORD *)(v578 + 5696);
              *(_OWORD *)(v576 + 32) = v580;
              *(_OWORD *)(v576 + 48) = v581;
              *(_OWORD *)(v576 + 16) = v579;
              v567 = *(_DWORD *)(v566 + 12836);
            }
            else
            {
              LOWORD(v571) = 16396;
              while (1)
              {
                v572 = v571 & 0x3FFF;
                if (v572 == 1)
                  break;
                if (v572 == 2)
                  v573 = 16385;
                else
                  v573 = 16387;
                if (v572 == 3)
                  v571 = 16385;
                else
                  v571 = v573;
                if (v571 == v570)
                  goto LABEL_790;
              }
              while (1)
              {
                v574 = v570 & 0x3FFF;
                if (v574 == 1)
                  break;
                if (v574 == 2)
                  v575 = 16385;
                else
                  v575 = 16387;
                if ((v570 & 0x4000) != 0)
                  v570 = v575;
                else
                  v570 = v574 | 0x4000u;
                if (v574 == 40)
                  v570 = 16385;
                if (v574 == 3)
                  v570 = 16385;
                if (v570 == 16396)
                  goto LABEL_790;
              }
            }
          }
          v582 = *v2473;
          v583 = *(_DWORD *)(*v2473 + 12836);
          if (v583)
          {
            for (i41 = 0; i41 < v583; ++i41)
            {
              v585 = v582 + 72 * i41;
              v586 = *(_QWORD *)(v585 + 5640);
              if (v586 == 16422)
              {
LABEL_806:
                v590 = v585 + 5632;
                v591 = v583 - 1;
                *(_DWORD *)(v582 + 12836) = v591;
                v592 = v582 + 72 * v591;
                --i41;
                *(_OWORD *)v590 = *(_OWORD *)(v592 + 5632);
                v593 = *(_OWORD *)(v592 + 5648);
                v594 = *(_OWORD *)(v592 + 5664);
                v595 = *(_OWORD *)(v592 + 5680);
                *(_QWORD *)(v590 + 64) = *(_QWORD *)(v592 + 5696);
                *(_OWORD *)(v590 + 32) = v594;
                *(_OWORD *)(v590 + 48) = v595;
                *(_OWORD *)(v590 + 16) = v593;
                v583 = *(_DWORD *)(v582 + 12836);
              }
              else
              {
                LOWORD(v587) = 16422;
                while (1)
                {
                  v588 = v587 & 0x3FFF;
                  if (v588 == 1)
                    break;
                  if (v588 == 2)
                    v589 = 16385;
                  else
                    v589 = 16387;
                  if (v588 == 40)
                    v589 = 16385;
                  if (v588 == 3)
                    v587 = 16385;
                  else
                    v587 = v589;
                  if (v587 == v586)
                    goto LABEL_806;
                }
                while (1)
                {
                  v596 = v586 & 0x3FFF;
                  if (v596 == 1)
                    break;
                  if (v596 == 2)
                    v597 = 16385;
                  else
                    v597 = 16387;
                  if ((v586 & 0x4000) != 0)
                    v586 = v597;
                  else
                    v586 = v596 | 0x4000u;
                  if (v596 == 40)
                    v586 = 16385;
                  if (v596 == 3)
                    v586 = 16385;
                  if (v586 == 16422)
                    goto LABEL_806;
                }
              }
            }
          }
        }
      }
      return;
    case 0x93:
      v628 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v2746 = 22;
      v2747 = 16423;
      v2748 = v628;
      v2749 = 0u;
      v2750 = 0u;
      v107 = *(_QWORD *)v8;
      v108 = &v2746;
      goto LABEL_119;
    case 0x94:
      v2741 = 148;
      v598 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v2742 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v2745 = 0;
      v2743 = v598;
      v2744 = 0;
      return;
    case 0x95:
      v609 = *(_QWORD *)(v10 + 72);
      v2940 = 149;
      v610 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v2941 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v2942 = v610;
      v2943 = v609;
      v2944 = 0;
      v110 = *(_QWORD *)v8;
      v111 = &v2940;
      goto LABEL_121;
    case 0x96:
      v1350 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v2889 = 9;
      v2890 = 16390;
      v2891 = v1350;
      v2892 = 0u;
      v2893 = 0u;
      v107 = *(_QWORD *)v8;
      v108 = &v2889;
      goto LABEL_119;
    case 0x97:
      v2314 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      LODWORD(v2886[0]) = 30;
      v2886[1] = 16391;
      v2886[2] = v2314;
      v2887 = 0u;
      v2888 = 0u;
      v2315 = (uint64_t *)v8;
      JSC::DFG::LazyNode::LazyNode(v2885, (JSC::DFG::Node *)v10);
      return;
    case 0x98:
    case 0x99:
      v128 = *(_QWORD *)(v10 + 72);
      v129 = ((unint64_t)*(unsigned int *)(v128 + 4) << 15) | 0xF;
      v130 = *(_QWORD *)(v10 + 32) & 0xFF00FFFFFFFFFFFFLL;
      if (*(int *)(v11 + 952) < 2)
      {
        v2716 = 28;
        v2717 = v129;
        v2718 = v130;
        v2719 = 0u;
        v2720 = 0u;
        v107 = *(_QWORD *)v8;
        v108 = &v2716;
        goto LABEL_119;
      }
      LODWORD(v2722[0]) = 28;
      v2722[1] = v129;
      v2722[2] = v130;
      memset(&v2722[3], 0, 24);
      v2722[6] = v128;
      v2359 = (uint64_t *)v8;
      JSC::DFG::LazyNode::LazyNode(v2721, (JSC::DFG::Node *)v10);
      return;
    case 0x9A:
      v886 = *(unsigned int **)(v10 + 72);
      v887 = ((unint64_t)*v886 << 15) | 0xF;
      v888 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      if (*(int *)(v11 + 952) < 2)
      {
        v2709 = 28;
        v2710 = v887;
        v2711 = v888;
        v2712 = 0u;
        v2713 = 0u;
        v107 = *(_QWORD *)v8;
        v108 = &v2709;
        goto LABEL_119;
      }
      LODWORD(v2715[0]) = 28;
      v2715[1] = v887;
      v2715[2] = v888;
      memset(&v2715[3], 0, 24);
      v2715[6] = (uint64_t)v886;
      v2386 = (uint64_t *)v8;
      JSC::DFG::LazyNode::LazyNode(v2714, (JSC::DFG::Node *)v10);
      return;
    case 0x9B:
      v142 = (uint64_t *)v8;
      v143 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(v10 + 72) + 4) << 15) | 0xF;
      v148 = *(_QWORD *)(v10 + 32);
      if (*(int *)(v11 + 952) >= 2)
      {
        v2364 = *(_QWORD *)(v10 + 72);
        LODWORD(v2703[0]) = 28;
        v2703[1] = v143;
        v2703[2] = v148 & 0xFF00FFFFFFFFFFFFLL;
        memset(&v2703[3], 0, 24);
        v2703[6] = v2364;
        JSC::DFG::LazyNode::LazyNode(v2702, (JSC::DFG::Node *)(*(_QWORD *)(v10 + 40) & 0xFF00FFFFFFFFFFFFLL));
      }
      else
      {
        LODWORD(v2699[0]) = 28;
        v2699[1] = v143;
        v2699[2] = v148 & 0xFF00FFFFFFFFFFFFLL;
        v2700 = 0u;
        v2701 = 0u;
        v149 = *(_QWORD *)(v10 + 40);
        v150 = v149 & 0xFF00FFFFFFFFFFFFLL;
        v151 = v142;
        if ((v149 & 0xFF00FFFFFFFFFFFFLL) != 0
          && (v233 = *(unsigned __int16 *)((v149 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v233 <= 2))
        {
          v152 = *(_QWORD *)(v150 + 72);
          if ((_DWORD)v233)
          {
            if ((_DWORD)v233 != 1)
              v233 = 2;
            v152 |= v233;
            v151 = v142;
          }
        }
        else
        {
          v152 = 0;
        }
      }
      return;
    case 0x9C:
      v1515 = (uint64_t *)v8;
      v1516 = ((unint64_t)**(unsigned int **)(v10 + 72) << 15) | 0xF;
      v1521 = *(_QWORD *)(v10 + 72);
      v1522 = *(unsigned int *)(v1521 + 20);
      v1523 = (v1522 << 6) - 64;
      while (v1523 != -64)
      {
        v1524 = *(_DWORD *)(*(_QWORD *)(v1521 + 8) + v1523) - 2;
        v1523 -= 64;
        if (v1524 <= 3)
        {
          v1525 = *v2473;
          v1526 = *(_DWORD *)(*v2473 + 12836);
          if (v1526)
          {
            for (i42 = 0; i42 < v1526; ++i42)
            {
              v1528 = v1525 + 72 * i42;
              v1529 = *(_QWORD *)(v1528 + 5640);
              if (v1529 == 16394)
              {
LABEL_2308:
                v1535 = v1528 + 5632;
                v1536 = v1526 - 1;
                *(_DWORD *)(v1525 + 12836) = v1536;
                v1537 = v1525 + 72 * v1536;
                --i42;
                *(_OWORD *)v1535 = *(_OWORD *)(v1537 + 5632);
                v1538 = *(_OWORD *)(v1537 + 5648);
                v1539 = *(_OWORD *)(v1537 + 5664);
                v1540 = *(_OWORD *)(v1537 + 5680);
                *(_QWORD *)(v1535 + 64) = *(_QWORD *)(v1537 + 5696);
                *(_OWORD *)(v1535 + 32) = v1539;
                *(_OWORD *)(v1535 + 48) = v1540;
                *(_OWORD *)(v1535 + 16) = v1538;
                v1526 = *(_DWORD *)(v1525 + 12836);
              }
              else
              {
                LOWORD(v1530) = 16394;
                while (1)
                {
                  v1531 = v1530 & 0x3FFF;
                  if (v1531 == 1)
                    break;
                  if (v1531 == 2)
                    v1532 = 16385;
                  else
                    v1532 = 16387;
                  if (v1531 == 3)
                    v1530 = 16385;
                  else
                    v1530 = v1532;
                  if (v1530 == v1529)
                    goto LABEL_2308;
                }
                while (1)
                {
                  v1533 = v1529 & 0x3FFF;
                  if (v1533 == 1)
                    break;
                  if (v1533 == 2)
                    v1534 = 16385;
                  else
                    v1534 = 16387;
                  if ((v1529 & 0x4000) != 0)
                    v1529 = v1534;
                  else
                    v1529 = v1533 | 0x4000u;
                  if (v1533 == 40)
                    v1529 = 16385;
                  if (v1533 == 3)
                    v1529 = 16385;
                  if (v1529 == 16394)
                    goto LABEL_2308;
                }
              }
            }
            v1521 = *(_QWORD *)(v10 + 72);
            v1522 = *(unsigned int *)(v1521 + 20);
          }
          break;
        }
      }
      v1541 = (v1522 << 6) - 64;
      while (v1522)
      {
        if (--v1522 >= (unint64_t)*(unsigned int *)(v1521 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x19835FD28);
        }
        v1542 = v1541 - 64;
        v1543 = JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)(*(_QWORD *)(v1521 + 8) + v1541));
        v1541 = v1542;
        if (v1543)
        {
          break;
        }
      }
      v1544 = *(_QWORD *)(v10 + 24);
      if (*(int *)(v11 + 952) >= 2)
      {
        v2457 = *(_QWORD *)(v10 + 72);
        LODWORD(v2708[0]) = 28;
        v2708[1] = v1516;
        v2708[2] = v1544 & 0xFF00FFFFFFFFFFFFLL;
        memset(&v2708[3], 0, 24);
        v2708[6] = v2457;
        JSC::DFG::LazyNode::LazyNode(v2707, (JSC::DFG::Node *)(*(_QWORD *)(v10 + 32) & 0xFF00FFFFFFFFFFFFLL));
      }
      else
      {
        LODWORD(v2704[0]) = 28;
        v2704[1] = v1516;
        v2704[2] = v1544 & 0xFF00FFFFFFFFFFFFLL;
        v2705 = 0u;
        v2706 = 0u;
        v1545 = *(_QWORD *)(v10 + 32);
        v1546 = v1545 & 0xFF00FFFFFFFFFFFFLL;
        if ((v1545 & 0xFF00FFFFFFFFFFFFLL) != 0
          && (v2222 = *(unsigned __int16 *)((v1545 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v2222 <= 2))
        {
          v1547 = *(_QWORD *)(v1546 + 72);
          if ((_DWORD)v2222)
          {
            if ((_DWORD)v2222 != 1)
              v2222 = 2;
            v1547 |= v2222;
          }
        }
        else
        {
          v1547 = 0;
        }
      }
      return;
    case 0x9D:
      if (!JSC::DFG::MultiDeleteByOffsetData::writesStructures(*(_QWORD *)(v10 + 72)))
        return;
      v214 = *v2473;
      goto LABEL_262;
    case 0x9E:
      v234 = *(unsigned int *)(v10 + 72);
      v235 = *(_DWORD *)(v10 + 72);
      if ((v235 - 6) < 6)
      {
        v236 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
        v2694 = 1;
        v2695 = 16388;
        v2696 = v236;
        v2697 = 0u;
        v2698 = 0u;
        v107 = *(_QWORD *)v8;
        v108 = &v2694;
        goto LABEL_119;
      }
      if (*(_DWORD *)(v10 + 72) > 0xBu)
      {
        if ((v235 - 12) < 2)
        {
          v1973 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
          v2684 = 1;
          v2685 = 16423;
          v2686 = v1973;
          v2687 = 0u;
          v2688 = 0u;
          v107 = *(_QWORD *)v8;
          v108 = &v2684;
          goto LABEL_119;
        }
        if (v235 == 25)
        {
LABEL_3741:
          if ((v234 & 0x40000000) != 0)
            goto LABEL_346;
          v2369 = (uint64_t *)v8;
          v2370 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
          LODWORD(v2681[0]) = 1;
          v2681[1] = 16423;
          v2681[2] = v2370;
          v2682 = 0u;
          v2683 = 0u;
          JSC::DFG::LazyNode::LazyNode(v2680, (JSC::DFG::Node *)v10);
          return;
        }
      }
      else
      {
        if (v235 == 5)
        {
          v2689 = 158;
          v508 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
          v2690 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
          v2691 = v508;
          v2692 = v234;
          v2693 = 0;
          return;
        }
        if (v235 == 3)
          return;
      }
      v2466 = v8;
      v2467 = JSC::DFG::toTypedArrayType(*(_DWORD *)(v10 + 72));
      if (v2467 == 12 || (v8 = v2466, !v2467))
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
        __break(0xC471u);
        JUMPOUT(0x19835FDF4);
      }
      goto LABEL_3741;
    case 0x9F:
      v1993 = (uint64_t *)v8;
      v1994 = *(unsigned int *)(v10 + 72);
      v1995 = *(_DWORD *)(v10 + 72);
      if (v1995 != 25)
      {
        v2465 = JSC::DFG::toTypedArrayType(v1995);
        if (v2465 == 12 || !v2465)
        {
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x19835FD80);
        }
      }
      if ((v1994 & 0x40000000) != 0)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
        __break(0xC471u);
        JUMPOUT(0x19835F138);
      }
      v2675 = *(_WORD *)(v10 + 18);
      v1996 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v2676 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v2677 = v1996;
      v2678 = v1994;
      v2679 = 0;
      return;
    case 0xA0:
      v2391 = *(_DWORD *)(v10 + 72);
      if (v2391 == 25)
        goto LABEL_3757;
      v2468 = v8;
      v2469 = JSC::DFG::toTypedArrayType(*(_DWORD *)(v10 + 72));
      if (v2469 != 12 && v2469)
      {
        v8 = v2468;
        if (v2391 != 3)
        {
LABEL_3757:
          if ((v2391 & 0x40000000) != 0)
            goto LABEL_346;
          v2392 = (uint64_t *)v8;
          v2393 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
          LODWORD(v2672[0]) = 34;
          v2672[1] = 16423;
          v2672[2] = v2393;
          v2673 = 0u;
          v2674 = 0u;
          JSC::DFG::LazyNode::LazyNode(v2671, (JSC::DFG::Node *)v10);
        }
      }
      else if (v2391 != 3)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
        __break(0xC471u);
        JUMPOUT(0x19835FE6CLL);
      }
      return;
    case 0xA1:
      if ((*(_DWORD *)(v10 + 72) & 0xFE) != 0xA)
      {
        __break(0xC471u);
        JUMPOUT(0x19835FC90);
      }
      v2398 = (uint64_t *)v8;
      v2399 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      LODWORD(v2668[0]) = 3;
      v2668[1] = 16389;
      v2668[2] = v2399;
      v2669 = 0u;
      v2670 = 0u;
      JSC::DFG::LazyNode::LazyNode(v2667, (JSC::DFG::Node *)v10);
      return;
    case 0xA2:
      v2404 = (uint64_t *)v8;
      v2405 = *(_DWORD *)(v10 + 72);
      v2406 = v2405;
      if (v2405 == 25)
        goto LABEL_3762;
      v2470 = JSC::DFG::toTypedArrayType(*(_DWORD *)(v10 + 72));
      if (v2470 == 12 || !v2470)
      {
        if (v2406 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x19835FED0);
        }
        return;
      }
      if (v2406 == 3)
        return;
      if (*(_WORD *)(v10 + 18) == 146)
        v2405 = *(_DWORD *)(v10 + 80);
      else
        v2405 = *(_DWORD *)(v10 + 72);
LABEL_3762:
      if ((v2405 & 0x40000000) == 0)
      {
        v2407 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
        LODWORD(v2738[0]) = 32;
        v2738[1] = 16423;
        v2738[2] = v2407;
        v2739 = 0u;
        v2740 = 0u;
        JSC::DFG::LazyNode::LazyNode(v2737, (JSC::DFG::Node *)v10);
        return;
      }
      goto LABEL_346;
    case 0xA3:
      v2412 = (uint64_t *)v8;
      v2413 = *(_DWORD *)(v10 + 72);
      v2414 = v2413;
      if (v2413 == 25)
        goto LABEL_3765;
      v2471 = JSC::DFG::toTypedArrayType(*(_DWORD *)(v10 + 72));
      if (v2471 == 12 || !v2471)
      {
        if (v2414 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x19835FF34);
        }
        return;
      }
      if (v2414 == 3)
        return;
      if (*(_WORD *)(v10 + 18) == 146)
        v2413 = *(_DWORD *)(v10 + 80);
      else
        v2413 = *(_DWORD *)(v10 + 72);
LABEL_3765:
      if ((v2413 & 0x40000000) == 0)
      {
        v2415 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
        LODWORD(v2734[0]) = 33;
        v2734[1] = 16423;
        v2734[2] = v2415;
        v2735 = 0u;
        v2736 = 0u;
        JSC::DFG::LazyNode::LazyNode(v2733, (JSC::DFG::Node *)v10);
        return;
      }
      goto LABEL_346;
    case 0xA4:
      v2728 = 164;
      v2420 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v2729 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v2732 = 0;
      v2730 = v2420;
      v2731 = 0;
      return;
    case 0xAB:
      v132 = ((unint64_t)*(unsigned int *)(v10 + 72) << 15) | 0x15;
      v133 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v2662 = 7;
      v2663 = v132;
      v2664 = v133;
      v2665 = 0u;
      v2666 = 0u;
      v107 = *(_QWORD *)v8;
      v108 = &v2662;
      goto LABEL_119;
    case 0xAC:
      v221 = (uint64_t *)v8;
      v226 = ((unint64_t)*(unsigned int *)(v10 + 72) << 15) | 0x15;
      v227 = *(_QWORD *)(v10 + 32);
      v228 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      LODWORD(v2659[0]) = 7;
      v2659[1] = v226;
      v2659[2] = v228;
      v2660 = 0u;
      v2661 = 0u;
      if ((v227 & 0xFF00FFFFFFFFFFFFLL) != 0
        && (v335 = *(unsigned __int16 *)((v227 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v335 <= 2))
      {
        v229 = *(_QWORD *)((v227 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        v230 = v221;
        if (!*(_WORD *)((v227 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
        {
LABEL_269:
          return;
        }
        if ((_DWORD)v335 != 1)
          v335 = 2;
        v229 |= v335;
      }
      else
      {
        v229 = 0;
      }
      v230 = v221;
      goto LABEL_269;
    case 0xAD:
    case 0xAE:
      v670 = (*(_QWORD *)(v10 + 72) << 15) | 0x24;
      v2628 = 10;
      v2629 = v670;
      v2630 = 0u;
      v2631 = 0u;
      v2632 = 0;
      v107 = *(_QWORD *)v8;
      v108 = &v2628;
      goto LABEL_119;
    case 0xAF:
      v861 = (uint64_t *)v8;
      v866 = 0;
      v867 = (*(_QWORD *)(v10 + 72) << 15) | 0x24;
      LODWORD(v2624[0]) = 10;
      v2625 = 0u;
      v2626 = 0u;
      v2624[1] = v867;
      v2627 = 0;
      v868 = *(_QWORD *)(v10 + 32);
      v869 = v868 & 0xFF00FFFFFFFFFFFFLL;
      if ((v868 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v1103 = *(unsigned __int16 *)((v868 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
        if (v1103 <= 2)
        {
          v866 = *(_QWORD *)(v869 + 72);
          if ((_DWORD)v1103)
          {
            if ((_DWORD)v1103 != 1)
              v1103 = 2;
            v866 |= v1103;
          }
        }
        else
        {
          v866 = 0;
        }
      }
      return;
    case 0xB2:
      v1240 = *v2473;
      v1241 = *(_DWORD *)(*v2473 + 12836);
      if (!v1241)
        return;
      for (i43 = 0; i43 < v1241; ++i43)
      {
        v1243 = v1240 + 72 * i43;
        v1244 = *(_QWORD *)(v1243 + 5640);
        if (v1244 == 16422)
        {
LABEL_1850:
          v1248 = v1243 + 5632;
          v1249 = v1241 - 1;
          *(_DWORD *)(v1240 + 12836) = v1249;
          v1250 = v1240 + 72 * v1249;
          --i43;
          *(_OWORD *)v1248 = *(_OWORD *)(v1250 + 5632);
          v1251 = *(_OWORD *)(v1250 + 5648);
          v1252 = *(_OWORD *)(v1250 + 5664);
          v1253 = *(_OWORD *)(v1250 + 5680);
          *(_QWORD *)(v1248 + 64) = *(_QWORD *)(v1250 + 5696);
          *(_OWORD *)(v1248 + 32) = v1252;
          *(_OWORD *)(v1248 + 48) = v1253;
          *(_OWORD *)(v1248 + 16) = v1251;
          v1241 = *(_DWORD *)(v1240 + 12836);
        }
        else
        {
          LOWORD(v1245) = 16422;
          while (1)
          {
            v1246 = v1245 & 0x3FFF;
            if (v1246 == 1)
              break;
            if (v1246 == 2)
              v1247 = 16385;
            else
              v1247 = 16387;
            if (v1246 == 40)
              v1247 = 16385;
            if (v1246 == 3)
              v1245 = 16385;
            else
              v1245 = v1247;
            if (v1245 == v1244)
              goto LABEL_1850;
          }
          while (1)
          {
            v1254 = v1244 & 0x3FFF;
            if (v1254 == 1)
              break;
            if (v1254 == 2)
              v1255 = 16385;
            else
              v1255 = 16387;
            if ((v1244 & 0x4000) != 0)
              v1244 = v1255;
            else
              v1244 = v1254 | 0x4000u;
            if (v1254 == 40)
              v1244 = 16385;
            if (v1254 == 3)
              v1244 = 16385;
            if (v1244 == 16422)
              goto LABEL_1850;
          }
        }
      }
      return;
    case 0xB3:
      v669 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v2646 = 29;
      v2647 = 16398;
      v2648 = v669;
      v2649 = 0u;
      v2650 = 0u;
      v107 = *(_QWORD *)v8;
      v108 = &v2646;
      goto LABEL_119;
    case 0xB4:
      v2282 = (uint64_t *)v8;
      v2283 = *(_QWORD *)(v10 + 32);
      v2284 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      LODWORD(v2643[0]) = 29;
      v2643[1] = 16398;
      v2643[2] = v2284;
      v2644 = 0u;
      v2645 = 0u;
      JSC::DFG::LazyNode::LazyNode(v2642, (JSC::DFG::Node *)(v2283 & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0xB5:
      return;
    case 0xB6:
      v314 = *(_QWORD *)(v10 + 24);
      v315 = *(_QWORD *)(v10 + 72);
      v2955 = 182;
      v2956 = v314 & 0xFFFCFFFFFFFFFFFFLL;
      v2957 = 0;
      v2958 = 0;
      v2959 = v315;
      v2960 = 0;
      v110 = *(_QWORD *)v8;
      v111 = &v2955;
      goto LABEL_121;
    case 0xB7:
      v316 = *(_QWORD *)(v10 + 24);
      v2951 = 183;
      v2952 = v316 & 0xFFFCFFFFFFFFFFFFLL;
      v2953 = 0u;
      v2954 = 0u;
      v110 = *(_QWORD *)v8;
      v111 = &v2951;
      goto LABEL_121;
    case 0xBD:
      v745 = *(_QWORD *)(v10 + 24);
      v746 = *(_QWORD *)(v10 + 72);
      v2945 = 189;
      v2946 = v745 & 0xFFFCFFFFFFFFFFFFLL;
      v2947 = 0;
      v2948 = 0;
      v2949 = v746;
      v2950 = 0;
      v110 = *(_QWORD *)v8;
      v111 = &v2945;
      goto LABEL_121;
    case 0xBE:
      v2437 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      LODWORD(v2790[0]) = 5;
      v2790[1] = 16395;
      v2790[2] = v2437;
      v2791 = 0u;
      v2792 = 0u;
      v2438 = (uint64_t *)v8;
      JSC::DFG::LazyNode::LazyNode(v2789, (JSC::DFG::Node *)v10);
      return;
    case 0xBF:
    case 0xC0:
      v2172 = *(_QWORD *)(v10 + 72);
      v2761 = *(_WORD *)(v10 + 18);
      v2173 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v2762 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v2763 = v2173;
      v2764 = v2172;
      v2765 = 0;
      return;
    case 0xC1:
      v907 = *(_QWORD *)(v10 + 24);
      v908 = (v907 >> 50) & 0x3F;
      if (v908 <= 0x31 && ((1 << v908) & 0x2000000200002) != 0)
      {
        v909 = *(_QWORD *)(v10 + 32);
        if ((v909 & 0xFF00FFFFFFFFFFFFLL) == 0 || (v909 & 0xFC000000000000) == 0x4000000000000)
        {
          v2783 = 193;
          v910 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
          v2784 = v907 & 0xFFFCFFFFFFFFFFFFLL;
          v2785 = v909 & 0xFFFCFFFFFFFFFFFFLL;
          v2788 = 0;
          v2786 = v910;
          v2787 = 0;
          return;
        }
      }
      v2174 = *v2473;
      v2175 = *(_DWORD *)(*v2473 + 12836);
      if (!v2175)
        return;
      v2176 = 0;
      while (1)
      {
        v2177 = v2174 + 72 * v2176;
        v2178 = *(_QWORD *)(v2177 + 5640);
        if (v2178 != 16387)
          break;
LABEL_3485:
        v2182 = v2177 + 5632;
        v2183 = v2175 - 1;
        *(_DWORD *)(v2174 + 12836) = v2183;
        v2184 = v2174 + 72 * v2183;
        --v2176;
        *(_OWORD *)v2182 = *(_OWORD *)(v2184 + 5632);
        v2185 = *(_OWORD *)(v2184 + 5648);
        v2186 = *(_OWORD *)(v2184 + 5664);
        v2187 = *(_OWORD *)(v2184 + 5680);
        *(_QWORD *)(v2182 + 64) = *(_QWORD *)(v2184 + 5696);
        *(_OWORD *)(v2182 + 32) = v2186;
        *(_OWORD *)(v2182 + 48) = v2187;
        *(_OWORD *)(v2182 + 16) = v2185;
        v2175 = *(_DWORD *)(v2174 + 12836);
LABEL_3486:
        if (++v2176 >= v2175)
          return;
      }
      LOWORD(v2179) = 16387;
      while (1)
      {
        v2180 = v2179 & 0x3FFF;
        if (v2180 == 1)
          break;
        if (v2180 == 2)
          v2181 = 16385;
        else
          v2181 = 16387;
        if (v2180 == 3)
          v2179 = 16385;
        else
          v2179 = v2181;
        if (v2179 == v2178)
          goto LABEL_3485;
      }
      while (1)
      {
        v2189 = v2178 & 0x3FFF;
        if (v2189 == 1)
          goto LABEL_3486;
        if (v2189 == 3)
          goto LABEL_3494;
        v2188 = 16385;
        if (v2189 != 40)
        {
          if ((v2178 & 0x4000) != 0)
          {
            if (v2189 != 2)
              goto LABEL_3485;
LABEL_3494:
            v2188 = 16385;
            goto LABEL_3495;
          }
          v2188 = v2189 | 0x4000u;
        }
LABEL_3495:
        LOWORD(v2178) = v2188;
        if (v2188 == 16387)
          goto LABEL_3485;
      }
    case 0xC2:
      v1549 = *(_QWORD *)(v10 + 24);
      if (((v1549 >> 50) & 0x3F) - 12 <= 2)
      {
        v2723 = 35;
        v2724 = 16399;
        v2725 = v1549 & 0xFF00FFFFFFFFFFFFLL;
        v2726 = 0u;
        v2727 = 0u;
        v107 = *(_QWORD *)v8;
        v108 = &v2723;
        goto LABEL_119;
      }
      v2190 = *v2473;
      v2191 = *(_DWORD *)(*v2473 + 12836);
      if (!v2191)
        return;
      v2192 = 0;
      while (1)
      {
        v2193 = v2190 + 72 * v2192;
        v2194 = *(_QWORD *)(v2193 + 5640);
        if (v2194 != 16387)
          break;
LABEL_3509:
        v2198 = v2193 + 5632;
        v2199 = v2191 - 1;
        *(_DWORD *)(v2190 + 12836) = v2199;
        v2200 = v2190 + 72 * v2199;
        --v2192;
        *(_OWORD *)v2198 = *(_OWORD *)(v2200 + 5632);
        v2201 = *(_OWORD *)(v2200 + 5648);
        v2202 = *(_OWORD *)(v2200 + 5664);
        v2203 = *(_OWORD *)(v2200 + 5680);
        *(_QWORD *)(v2198 + 64) = *(_QWORD *)(v2200 + 5696);
        *(_OWORD *)(v2198 + 32) = v2202;
        *(_OWORD *)(v2198 + 48) = v2203;
        *(_OWORD *)(v2198 + 16) = v2201;
        v2191 = *(_DWORD *)(v2190 + 12836);
LABEL_3510:
        if (++v2192 >= v2191)
          return;
      }
      LOWORD(v2195) = 16387;
      while (1)
      {
        v2196 = v2195 & 0x3FFF;
        if (v2196 == 1)
          break;
        if (v2196 == 2)
          v2197 = 16385;
        else
          v2197 = 16387;
        if (v2196 == 3)
          v2195 = 16385;
        else
          v2195 = v2197;
        if (v2195 == v2194)
          goto LABEL_3509;
      }
      while (1)
      {
        v2205 = v2194 & 0x3FFF;
        if (v2205 == 1)
          goto LABEL_3510;
        if (v2205 == 3)
          goto LABEL_3518;
        v2204 = 16385;
        if (v2205 != 40)
        {
          if ((v2194 & 0x4000) != 0)
          {
            if (v2205 != 2)
              goto LABEL_3509;
LABEL_3518:
            v2204 = 16385;
            goto LABEL_3519;
          }
          v2204 = v2205 | 0x4000u;
        }
LABEL_3519:
        LOWORD(v2194) = v2204;
        if (v2204 == 16387)
          goto LABEL_3509;
      }
    case 0xC3:
      v1197 = *v2473;
      v1198 = *(_DWORD *)(*v2473 + 12836);
      if (!v1198)
        return;
      v1199 = 0;
      while (1)
      {
        v1200 = v1197 + 72 * v1199;
        v1201 = *(_QWORD *)(v1200 + 5640);
        if (v1201 != 16387)
          break;
LABEL_1785:
        v1205 = v1200 + 5632;
        v1206 = v1198 - 1;
        *(_DWORD *)(v1197 + 12836) = v1206;
        v1207 = v1197 + 72 * v1206;
        --v1199;
        *(_OWORD *)v1205 = *(_OWORD *)(v1207 + 5632);
        v1208 = *(_OWORD *)(v1207 + 5648);
        v1209 = *(_OWORD *)(v1207 + 5664);
        v1210 = *(_OWORD *)(v1207 + 5680);
        *(_QWORD *)(v1205 + 64) = *(_QWORD *)(v1207 + 5696);
        *(_OWORD *)(v1205 + 32) = v1209;
        *(_OWORD *)(v1205 + 48) = v1210;
        *(_OWORD *)(v1205 + 16) = v1208;
        v1198 = *(_DWORD *)(v1197 + 12836);
LABEL_1786:
        if (++v1199 >= v1198)
          return;
      }
      LOWORD(v1202) = 16387;
      while (1)
      {
        v1203 = v1202 & 0x3FFF;
        if (v1203 == 1)
          break;
        if (v1203 == 2)
          v1204 = 16385;
        else
          v1204 = 16387;
        if (v1203 == 3)
          v1202 = 16385;
        else
          v1202 = v1204;
        if (v1202 == v1201)
          goto LABEL_1785;
      }
      while (1)
      {
        v1212 = v1201 & 0x3FFF;
        if (v1212 == 1)
          goto LABEL_1786;
        if (v1212 == 3)
          goto LABEL_1794;
        v1211 = 16385;
        if (v1212 != 40)
        {
          if ((v1201 & 0x4000) != 0)
          {
            if (v1212 != 2)
              goto LABEL_1785;
LABEL_1794:
            v1211 = 16385;
            goto LABEL_1795;
          }
          v1211 = v1212 | 0x4000u;
        }
LABEL_1795:
        LOWORD(v1201) = v1211;
        if (v1211 == 16387)
          goto LABEL_1785;
      }
    case 0xC4:
      v2223 = (*(_QWORD *)(v10 + 24) >> 50) & 0x3FLL;
      if (!(_DWORD)v2223)
        goto LABEL_3556;
      if ((_DWORD)v2223 != 11)
      {
        __break(0xC471u);
        JUMPOUT(0x19835F1A0);
      }
      return;
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
      v2310 = v12 - 202;
      if (v2310 >= 0xA || ((0x3EFu >> v2310) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19835F838);
      }
      v2311 = dword_199155574[(__int16)v2310];
      v2312 = (_DWORD *)(v10 + 24);
      if ((*(_BYTE *)(v10 + 56) & 0x10) != 0)
      {
        v2462 = v2311 + *v2312;
        if (*(_DWORD *)(v11 + 164) <= v2462)
        {
          __break(0xC471u);
          JUMPOUT(0x19835FF3CLL);
        }
        v2313 = (_QWORD *)(*(_QWORD *)(v11 + 152) + 8 * v2462);
      }
      else
      {
        v2313 = &v2312[2 * v2311];
      }
      v214 = *v2473;
      if ((*v2313 & 0xFF00FFFFFFFFFFFFLL) != 0)
        goto LABEL_3679;
      goto LABEL_3557;
    case 0xCE:
      v2443 = (_QWORD *)(v10 + 24);
      v2444 = (_QWORD *)(v10 + 24);
      if ((*(_BYTE *)(v10 + 56) & 0x10) != 0)
      {
        if (*(_DWORD *)(v11 + 164) <= *v2443)
        {
          __break(0xC471u);
          JUMPOUT(0x19835FF9CLL);
        }
        v2444 = (_QWORD *)(*(_QWORD *)(v11 + 152) + 8 * *v2443);
      }
      if ((*v2444 & 0xFC000000000000) != 0x4000000000000)
        goto LABEL_3556;
      v3053 = 206;
      v3054 = *(_OWORD *)v2443;
      v3055 = *(_QWORD *)(v10 + 40);
      v3056 = 0;
      v3057 = v11;
      v110 = *(_QWORD *)v8;
      v111 = &v3053;
      goto LABEL_121;
    case 0xD6:
      v1111 = *v2473;
      v1112 = *(_DWORD *)(*v2473 + 12836);
      if (!v1112)
        return;
      for (i44 = 0; i44 < v1112; ++i44)
      {
        v1114 = v1111 + 72 * i44;
        v1115 = *(_QWORD *)(v1114 + 5640);
        if (v1115 == 16407)
        {
LABEL_1654:
          v1121 = v1114 + 5632;
          v1122 = v1112 - 1;
          *(_DWORD *)(v1111 + 12836) = v1122;
          v1123 = v1111 + 72 * v1122;
          --i44;
          *(_OWORD *)v1121 = *(_OWORD *)(v1123 + 5632);
          v1124 = *(_OWORD *)(v1123 + 5648);
          v1125 = *(_OWORD *)(v1123 + 5664);
          v1126 = *(_OWORD *)(v1123 + 5680);
          *(_QWORD *)(v1121 + 64) = *(_QWORD *)(v1123 + 5696);
          *(_OWORD *)(v1121 + 32) = v1125;
          *(_OWORD *)(v1121 + 48) = v1126;
          *(_OWORD *)(v1121 + 16) = v1124;
          v1112 = *(_DWORD *)(v1111 + 12836);
        }
        else
        {
          LOWORD(v1116) = 16407;
          while (1)
          {
            v1117 = v1116 & 0x3FFF;
            if (v1117 == 1)
              break;
            if (v1117 == 2)
              v1118 = 16385;
            else
              v1118 = 16387;
            if (v1117 == 3)
              v1116 = 16385;
            else
              v1116 = v1118;
            if (v1116 == v1115)
              goto LABEL_1654;
          }
          while (1)
          {
            v1119 = v1115 & 0x3FFF;
            if (v1119 == 1)
              break;
            if (v1119 == 2)
              v1120 = 16385;
            else
              v1120 = 16387;
            if ((v1115 & 0x4000) != 0)
              v1115 = v1120;
            else
              v1115 = v1119 | 0x4000u;
            if (v1119 == 40)
              v1115 = 16385;
            if (v1119 == 3)
              v1115 = 16385;
            if (v1115 == 16407)
              goto LABEL_1654;
          }
        }
      }
      return;
    case 0xD7:
      if (*(unsigned __int8 *)(v10 + 72) - 7 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x198358CF8);
      }
      return;
    case 0xD9:
    case 0xDB:
    case 0xDC:
      v707 = *v2473;
      v708 = *(_DWORD *)(*v2473 + 12836);
      if (!v708)
        return;
      v709 = 0;
      while (1)
      {
        v710 = v707 + 72 * v709;
        v711 = *(_QWORD *)(v710 + 5640);
        if (v711 != 16387)
          break;
LABEL_989:
        v715 = v710 + 5632;
        v716 = v708 - 1;
        *(_DWORD *)(v707 + 12836) = v716;
        v717 = v707 + 72 * v716;
        --v709;
        *(_OWORD *)v715 = *(_OWORD *)(v717 + 5632);
        v718 = *(_OWORD *)(v717 + 5648);
        v719 = *(_OWORD *)(v717 + 5664);
        v720 = *(_OWORD *)(v717 + 5680);
        *(_QWORD *)(v715 + 64) = *(_QWORD *)(v717 + 5696);
        *(_OWORD *)(v715 + 32) = v719;
        *(_OWORD *)(v715 + 48) = v720;
        *(_OWORD *)(v715 + 16) = v718;
        v708 = *(_DWORD *)(v707 + 12836);
LABEL_990:
        if (++v709 >= v708)
          return;
      }
      LOWORD(v712) = 16387;
      while (1)
      {
        v713 = v712 & 0x3FFF;
        if (v713 == 1)
          break;
        if (v713 == 2)
          v714 = 16385;
        else
          v714 = 16387;
        if (v713 == 3)
          v712 = 16385;
        else
          v712 = v714;
        if (v712 == v711)
          goto LABEL_989;
      }
      while (1)
      {
        v722 = v711 & 0x3FFF;
        if (v722 == 1)
          goto LABEL_990;
        if (v722 == 3)
          goto LABEL_998;
        v721 = 16385;
        if (v722 != 40)
        {
          if ((v711 & 0x4000) != 0)
          {
            if (v722 != 2)
              goto LABEL_989;
LABEL_998:
            v721 = 16385;
            goto LABEL_999;
          }
          v721 = v722 | 0x4000u;
        }
LABEL_999:
        LOWORD(v711) = v721;
        if (v721 == 16387)
          goto LABEL_989;
      }
    case 0xDA:
    case 0xDE:
      v1398 = *v2473;
      v1399 = *(_DWORD *)(*v2473 + 12836);
      if (!v1399)
        return;
      for (i45 = 0; i45 < v1399; ++i45)
      {
        v1401 = v1398 + 72 * i45;
        v1402 = *(_QWORD *)(v1401 + 5640);
        if (v1402 == 16408)
        {
LABEL_2106:
          v1408 = v1401 + 5632;
          v1409 = v1399 - 1;
          *(_DWORD *)(v1398 + 12836) = v1409;
          v1410 = v1398 + 72 * v1409;
          --i45;
          *(_OWORD *)v1408 = *(_OWORD *)(v1410 + 5632);
          v1411 = *(_OWORD *)(v1410 + 5648);
          v1412 = *(_OWORD *)(v1410 + 5664);
          v1413 = *(_OWORD *)(v1410 + 5680);
          *(_QWORD *)(v1408 + 64) = *(_QWORD *)(v1410 + 5696);
          *(_OWORD *)(v1408 + 32) = v1412;
          *(_OWORD *)(v1408 + 48) = v1413;
          *(_OWORD *)(v1408 + 16) = v1411;
          v1399 = *(_DWORD *)(v1398 + 12836);
        }
        else
        {
          LOWORD(v1403) = 16408;
          while (1)
          {
            v1404 = v1403 & 0x3FFF;
            if (v1404 == 1)
              break;
            if (v1404 == 2)
              v1405 = 16385;
            else
              v1405 = 16387;
            if (v1404 == 3)
              v1403 = 16385;
            else
              v1403 = v1405;
            if (v1403 == v1402)
              goto LABEL_2106;
          }
          while (1)
          {
            v1406 = v1402 & 0x3FFF;
            if (v1406 == 1)
              break;
            if (v1406 == 2)
              v1407 = 16385;
            else
              v1407 = 16387;
            if ((v1402 & 0x4000) != 0)
              v1402 = v1407;
            else
              v1402 = v1406 | 0x4000u;
            if (v1406 == 40)
              v1402 = 16385;
            if (v1406 == 3)
              v1402 = 16385;
            if (v1402 == 16408)
              goto LABEL_2106;
          }
        }
      }
      return;
    case 0xDD:
      v1149 = *v2473;
      v1150 = *(_DWORD *)(*v2473 + 12836);
      if (!v1150)
        return;
      for (i46 = 0; i46 < v1150; ++i46)
      {
        v1152 = v1149 + 72 * i46;
        v1153 = *(_QWORD *)(v1152 + 5640);
        if (v1153 == 16408)
        {
LABEL_1714:
          v1159 = v1152 + 5632;
          v1160 = v1150 - 1;
          *(_DWORD *)(v1149 + 12836) = v1160;
          v1161 = v1149 + 72 * v1160;
          --i46;
          *(_OWORD *)v1159 = *(_OWORD *)(v1161 + 5632);
          v1162 = *(_OWORD *)(v1161 + 5648);
          v1163 = *(_OWORD *)(v1161 + 5664);
          v1164 = *(_OWORD *)(v1161 + 5680);
          *(_QWORD *)(v1159 + 64) = *(_QWORD *)(v1161 + 5696);
          *(_OWORD *)(v1159 + 32) = v1163;
          *(_OWORD *)(v1159 + 48) = v1164;
          *(_OWORD *)(v1159 + 16) = v1162;
          v1150 = *(_DWORD *)(v1149 + 12836);
        }
        else
        {
          LOWORD(v1154) = 16408;
          while (1)
          {
            v1155 = v1154 & 0x3FFF;
            if (v1155 == 1)
              break;
            if (v1155 == 2)
              v1156 = 16385;
            else
              v1156 = 16387;
            if (v1155 == 3)
              v1154 = 16385;
            else
              v1154 = v1156;
            if (v1154 == v1153)
              goto LABEL_1714;
          }
          while (1)
          {
            v1157 = v1153 & 0x3FFF;
            if (v1157 == 1)
              break;
            if (v1157 == 2)
              v1158 = 16385;
            else
              v1158 = 16387;
            if ((v1153 & 0x4000) != 0)
              v1153 = v1158;
            else
              v1153 = v1157 | 0x4000u;
            if (v1157 == 40)
              v1153 = 16385;
            if (v1157 == 3)
              v1153 = 16385;
            if (v1153 == 16408)
              goto LABEL_1714;
          }
        }
      }
      v1165 = *v2473;
      v1166 = *(_DWORD *)(*v2473 + 12836);
      if (v1166)
      {
        for (i47 = 0; i47 < v1166; ++i47)
        {
          v1168 = v1165 + 72 * i47;
          v1169 = *(_QWORD *)(v1168 + 5640);
          if (v1169 == 16398)
          {
LABEL_1741:
            v1175 = v1168 + 5632;
            v1176 = v1166 - 1;
            *(_DWORD *)(v1165 + 12836) = v1176;
            v1177 = v1165 + 72 * v1176;
            --i47;
            *(_OWORD *)v1175 = *(_OWORD *)(v1177 + 5632);
            v1178 = *(_OWORD *)(v1177 + 5648);
            v1179 = *(_OWORD *)(v1177 + 5664);
            v1180 = *(_OWORD *)(v1177 + 5680);
            *(_QWORD *)(v1175 + 64) = *(_QWORD *)(v1177 + 5696);
            *(_OWORD *)(v1175 + 32) = v1179;
            *(_OWORD *)(v1175 + 48) = v1180;
            *(_OWORD *)(v1175 + 16) = v1178;
            v1166 = *(_DWORD *)(v1165 + 12836);
          }
          else
          {
            LOWORD(v1170) = 16398;
            while (1)
            {
              v1171 = v1170 & 0x3FFF;
              if (v1171 == 1)
                break;
              if (v1171 == 2)
                v1172 = 16385;
              else
                v1172 = 16387;
              if (v1171 == 3)
                v1170 = 16385;
              else
                v1170 = v1172;
              if (v1170 == v1169)
                goto LABEL_1741;
            }
            while (1)
            {
              v1173 = v1169 & 0x3FFF;
              if (v1173 == 1)
                break;
              if (v1173 == 2)
                v1174 = 16385;
              else
                v1174 = 16387;
              if ((v1169 & 0x4000) != 0)
                v1169 = v1174;
              else
                v1169 = v1173 | 0x4000u;
              if (v1173 == 40)
                v1169 = 16385;
              if (v1173 == 3)
                v1169 = 16385;
              if (v1169 == 16398)
                goto LABEL_1741;
            }
          }
        }
      }
      return;
    case 0xDF:
    case 0xE0:
      if ((*(_QWORD *)(v10 + 24) & 0xFC000000000000) == 0x54000000000000
        && (*(_QWORD *)(v10 + 32) & 0xFC000000000000) == 0x40000000000000
        && (*(_QWORD *)(v10 + 40) & 0xFC000000000000) == 0x54000000000000)
      {
        v1026 = *v2473;
        v1027 = *(_DWORD *)(*v2473 + 12836);
        if (v1027)
        {
          for (i48 = 0; i48 < v1027; ++i48)
          {
            v1029 = v1026 + 72 * i48;
            v1030 = *(_QWORD *)(v1029 + 5640);
            if (v1030 == 16408)
            {
LABEL_1506:
              v1036 = v1029 + 5632;
              v1037 = v1027 - 1;
              *(_DWORD *)(v1026 + 12836) = v1037;
              v1038 = v1026 + 72 * v1037;
              --i48;
              *(_OWORD *)v1036 = *(_OWORD *)(v1038 + 5632);
              v1039 = *(_OWORD *)(v1038 + 5648);
              v1040 = *(_OWORD *)(v1038 + 5664);
              v1041 = *(_OWORD *)(v1038 + 5680);
              *(_QWORD *)(v1036 + 64) = *(_QWORD *)(v1038 + 5696);
              *(_OWORD *)(v1036 + 32) = v1040;
              *(_OWORD *)(v1036 + 48) = v1041;
              *(_OWORD *)(v1036 + 16) = v1039;
              v1027 = *(_DWORD *)(v1026 + 12836);
            }
            else
            {
              LOWORD(v1031) = 16408;
              while (1)
              {
                v1032 = v1031 & 0x3FFF;
                if (v1032 == 1)
                  break;
                if (v1032 == 2)
                  v1033 = 16385;
                else
                  v1033 = 16387;
                if (v1032 == 3)
                  v1031 = 16385;
                else
                  v1031 = v1033;
                if (v1031 == v1030)
                  goto LABEL_1506;
              }
              while (1)
              {
                v1034 = v1030 & 0x3FFF;
                if (v1034 == 1)
                  break;
                if (v1034 == 2)
                  v1035 = 16385;
                else
                  v1035 = 16387;
                if ((v1030 & 0x4000) != 0)
                  v1030 = v1035;
                else
                  v1030 = v1034 | 0x4000u;
                if (v1034 == 40)
                  v1030 = 16385;
                if (v1034 == 3)
                  v1030 = 16385;
                if (v1030 == 16408)
                  goto LABEL_1506;
              }
            }
          }
          v1042 = *v2473;
          v1043 = *(_DWORD *)(*v2473 + 12836);
          if (v1043)
          {
            for (i49 = 0; i49 < v1043; ++i49)
            {
              v1045 = v1042 + 72 * i49;
              v1046 = *(_QWORD *)(v1045 + 5640);
              if (v1046 == 16398)
              {
LABEL_1533:
                v1052 = v1045 + 5632;
                v1053 = v1043 - 1;
                *(_DWORD *)(v1042 + 12836) = v1053;
                v1054 = v1042 + 72 * v1053;
                --i49;
                *(_OWORD *)v1052 = *(_OWORD *)(v1054 + 5632);
                v1055 = *(_OWORD *)(v1054 + 5648);
                v1056 = *(_OWORD *)(v1054 + 5664);
                v1057 = *(_OWORD *)(v1054 + 5680);
                *(_QWORD *)(v1052 + 64) = *(_QWORD *)(v1054 + 5696);
                *(_OWORD *)(v1052 + 32) = v1056;
                *(_OWORD *)(v1052 + 48) = v1057;
                *(_OWORD *)(v1052 + 16) = v1055;
                v1043 = *(_DWORD *)(v1042 + 12836);
              }
              else
              {
                LOWORD(v1047) = 16398;
                while (1)
                {
                  v1048 = v1047 & 0x3FFF;
                  if (v1048 == 1)
                    break;
                  if (v1048 == 2)
                    v1049 = 16385;
                  else
                    v1049 = 16387;
                  if (v1048 == 3)
                    v1047 = 16385;
                  else
                    v1047 = v1049;
                  if (v1047 == v1046)
                    goto LABEL_1533;
                }
                while (1)
                {
                  v1050 = v1046 & 0x3FFF;
                  if (v1050 == 1)
                    break;
                  if (v1050 == 2)
                    v1051 = 16385;
                  else
                    v1051 = 16387;
                  if ((v1046 & 0x4000) != 0)
                    v1046 = v1051;
                  else
                    v1046 = v1050 | 0x4000u;
                  if (v1050 == 40)
                    v1046 = 16385;
                  if (v1050 == 3)
                    v1046 = 16385;
                  if (v1046 == 16398)
                    goto LABEL_1533;
                }
              }
            }
          }
        }
        return;
      }
      v845 = *v2473;
      v846 = *(_DWORD *)(*v2473 + 12836);
      if (!v846)
        return;
      v847 = 0;
      while (1)
      {
        v848 = v845 + 72 * v847;
        v849 = *(_QWORD *)(v848 + 5640);
        if (v849 != 16387)
          break;
LABEL_1225:
        v853 = v848 + 5632;
        v854 = v846 - 1;
        *(_DWORD *)(v845 + 12836) = v854;
        v855 = v845 + 72 * v854;
        --v847;
        *(_OWORD *)v853 = *(_OWORD *)(v855 + 5632);
        v856 = *(_OWORD *)(v855 + 5648);
        v857 = *(_OWORD *)(v855 + 5664);
        v858 = *(_OWORD *)(v855 + 5680);
        *(_QWORD *)(v853 + 64) = *(_QWORD *)(v855 + 5696);
        *(_OWORD *)(v853 + 32) = v857;
        *(_OWORD *)(v853 + 48) = v858;
        *(_OWORD *)(v853 + 16) = v856;
        v846 = *(_DWORD *)(v845 + 12836);
LABEL_1226:
        if (++v847 >= v846)
          return;
      }
      LOWORD(v850) = 16387;
      while (1)
      {
        v851 = v850 & 0x3FFF;
        if (v851 == 1)
          break;
        if (v851 == 2)
          v852 = 16385;
        else
          v852 = 16387;
        if (v851 == 3)
          v850 = 16385;
        else
          v850 = v852;
        if (v850 == v849)
          goto LABEL_1225;
      }
      while (1)
      {
        v860 = v849 & 0x3FFF;
        if (v860 == 1)
          goto LABEL_1226;
        if (v860 == 3)
          goto LABEL_1234;
        v859 = 16385;
        if (v860 != 40)
        {
          if ((v849 & 0x4000) != 0)
          {
            if (v860 != 2)
              goto LABEL_1225;
LABEL_1234:
            v859 = 16385;
            goto LABEL_1235;
          }
          v859 = v860 | 0x4000u;
        }
LABEL_1235:
        LOWORD(v849) = v859;
        if (v859 == 16387)
          goto LABEL_1225;
      }
    case 0xE1:
      if ((*(_QWORD *)(v10 + 40) & 0xFC000000000000) != 0x54000000000000)
        goto LABEL_3556;
      return;
    case 0xE5:
      v2606 = 229;
      v1397 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v2607 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v2610 = 0;
      v2608 = v1397;
      v2609 = 0;
      return;
    case 0xE6:
      v965 = *(_QWORD *)(v10 + 24);
      v966 = (v965 >> 50) & 0x3F;
      if ((v966 - 1) < 2)
      {
        v2976 = 230;
        v2978 = vandq_s8(*(int8x16_t *)(v10 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
        v2980 = 0;
        v2977 = v965 & 0xFFFCFFFFFFFFFFFFLL;
        v2979 = 0;
        v110 = *(_QWORD *)v8;
        v111 = &v2976;
        goto LABEL_121;
      }
      if ((_DWORD)v966)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x19835E4A4);
      }
      goto LABEL_3556;
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
    case 0xED:
      v134 = *(_QWORD *)(v10 + 24);
      v135 = (v134 >> 50) & 0x3F;
      if ((_DWORD)v135 != 21)
      {
        if ((_DWORD)v135)
        {
          v136 = *(_QWORD *)(v10 + 32);
LABEL_154:
          v2595 = *(_WORD *)(v10 + 18);
          v137 = v134 & 0xFFFCFFFFFFFFFFFFLL;
          v138 = v136 & 0xFFFCFFFFFFFFFFFFLL;
          v139 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
          v2596 = v137;
          v2597 = v138;
          v2600 = 0;
          v2598 = v139;
          v2599 = 0;
          return;
        }
        v136 = *(_QWORD *)(v10 + 32);
        if ((v136 & 0xFC000000000000) != 0)
          goto LABEL_154;
        v298 = *v2473;
        v299 = *(_DWORD *)(*v2473 + 12836);
        if (!v299)
          return;
        v300 = 0;
        while (1)
        {
          v301 = v298 + 72 * v300;
          v302 = *(_QWORD *)(v301 + 5640);
          if (v302 != 16387)
            break;
LABEL_393:
          v306 = v301 + 5632;
          v307 = v299 - 1;
          *(_DWORD *)(v298 + 12836) = v307;
          v308 = v298 + 72 * v307;
          --v300;
          *(_OWORD *)v306 = *(_OWORD *)(v308 + 5632);
          v309 = *(_OWORD *)(v308 + 5648);
          v310 = *(_OWORD *)(v308 + 5664);
          v311 = *(_OWORD *)(v308 + 5680);
          *(_QWORD *)(v306 + 64) = *(_QWORD *)(v308 + 5696);
          *(_OWORD *)(v306 + 32) = v310;
          *(_OWORD *)(v306 + 48) = v311;
          *(_OWORD *)(v306 + 16) = v309;
          v299 = *(_DWORD *)(v298 + 12836);
LABEL_394:
          if (++v300 >= v299)
            return;
        }
        LOWORD(v303) = 16387;
        while (1)
        {
          v304 = v303 & 0x3FFF;
          if (v304 == 1)
            break;
          if (v304 == 2)
            v305 = 16385;
          else
            v305 = 16387;
          if (v304 == 3)
            v303 = 16385;
          else
            v303 = v305;
          if (v303 == v302)
            goto LABEL_393;
        }
        while (1)
        {
          v313 = v302 & 0x3FFF;
          if (v313 == 1)
            goto LABEL_394;
          if (v313 == 3)
            goto LABEL_402;
          v312 = 16385;
          if (v313 != 40)
          {
            if ((v302 & 0x4000) != 0)
            {
              if (v313 != 2)
                goto LABEL_393;
LABEL_402:
              v312 = 16385;
              goto LABEL_403;
            }
            v312 = v313 | 0x4000u;
          }
LABEL_403:
          LOWORD(v302) = v312;
          if (v312 == 16387)
            goto LABEL_393;
        }
      }
      v136 = *(_QWORD *)(v10 + 32);
      if ((v136 & 0xFC000000000000) != 0x54000000000000)
        goto LABEL_154;
      v282 = *v2473;
      v283 = *(_DWORD *)(*v2473 + 12836);
      if (v283)
      {
        for (i50 = 0; i50 < v283; ++i50)
        {
          v285 = v282 + 72 * i50;
          v286 = *(_QWORD *)(v285 + 5640);
          if (v286 == 16407)
          {
LABEL_377:
            v292 = v285 + 5632;
            v293 = v283 - 1;
            *(_DWORD *)(v282 + 12836) = v293;
            v294 = v282 + 72 * v293;
            --i50;
            *(_OWORD *)v292 = *(_OWORD *)(v294 + 5632);
            v295 = *(_OWORD *)(v294 + 5648);
            v296 = *(_OWORD *)(v294 + 5664);
            v297 = *(_OWORD *)(v294 + 5680);
            *(_QWORD *)(v292 + 64) = *(_QWORD *)(v294 + 5696);
            *(_OWORD *)(v292 + 32) = v296;
            *(_OWORD *)(v292 + 48) = v297;
            *(_OWORD *)(v292 + 16) = v295;
            v283 = *(_DWORD *)(v282 + 12836);
          }
          else
          {
            LOWORD(v287) = 16407;
            while (1)
            {
              v288 = v287 & 0x3FFF;
              if (v288 == 1)
                break;
              if (v288 == 2)
                v289 = 16385;
              else
                v289 = 16387;
              if (v288 == 3)
                v287 = 16385;
              else
                v287 = v289;
              if (v287 == v286)
                goto LABEL_377;
            }
            while (1)
            {
              v290 = v286 & 0x3FFF;
              if (v290 == 1)
                break;
              if (v290 == 2)
                v291 = 16385;
              else
                v291 = 16387;
              if ((v286 & 0x4000) != 0)
                v286 = v291;
              else
                v286 = v290 | 0x4000u;
              if (v290 == 40)
                v286 = 16385;
              if (v290 == 3)
                v286 = 16385;
              if (v286 == 16407)
                goto LABEL_377;
            }
          }
        }
      }
      return;
    case 0xEB:
    case 0xEC:
      v2601 = *(_WORD *)(v10 + 18);
      v1293 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v2602 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v2605 = 0;
      v2603 = v1293;
      v2604 = 0;
      return;
    case 0xEF:
      v481 = **(_QWORD **)(v10 + 72);
      v3083 = 239;
      v482 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v3084 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v3085 = v482;
      v3086 = v481;
      v3087 = 0;
      v110 = *(_QWORD *)v8;
      v111 = &v3083;
      goto LABEL_121;
    case 0x103:
    case 0x104:
    case 0x105:
    case 0x10C:
    case 0x10E:
    case 0x110:
    case 0x111:
    case 0x112:
    case 0x116:
    case 0x119:
    case 0x11A:
    case 0x11B:
    case 0x11C:
    case 0x11D:
    case 0x11E:
    case 0x11F:
    case 0x120:
    case 0x121:
    case 0x122:
      v237 = *v2473;
      v238 = *(_DWORD *)(*v2473 + 12836);
      if (!v238)
        return;
      for (i51 = 0; i51 < v238; ++i51)
      {
        v240 = v237 + 72 * i51;
        v241 = *(_QWORD *)(v240 + 5640);
        if (v241 == 16407)
        {
LABEL_309:
          v247 = v240 + 5632;
          v248 = v238 - 1;
          *(_DWORD *)(v237 + 12836) = v248;
          v249 = v237 + 72 * v248;
          --i51;
          *(_OWORD *)v247 = *(_OWORD *)(v249 + 5632);
          v250 = *(_OWORD *)(v249 + 5648);
          v251 = *(_OWORD *)(v249 + 5664);
          v252 = *(_OWORD *)(v249 + 5680);
          *(_QWORD *)(v247 + 64) = *(_QWORD *)(v249 + 5696);
          *(_OWORD *)(v247 + 32) = v251;
          *(_OWORD *)(v247 + 48) = v252;
          *(_OWORD *)(v247 + 16) = v250;
          v238 = *(_DWORD *)(v237 + 12836);
        }
        else
        {
          LOWORD(v242) = 16407;
          while (1)
          {
            v243 = v242 & 0x3FFF;
            if (v243 == 1)
              break;
            if (v243 == 2)
              v244 = 16385;
            else
              v244 = 16387;
            if (v243 == 3)
              v242 = 16385;
            else
              v242 = v244;
            if (v242 == v241)
              goto LABEL_309;
          }
          while (1)
          {
            v245 = v241 & 0x3FFF;
            if (v245 == 1)
              break;
            if (v245 == 2)
              v246 = 16385;
            else
              v246 = 16387;
            if ((v241 & 0x4000) != 0)
              v241 = v246;
            else
              v241 = v245 | 0x4000u;
            if (v245 == 40)
              v241 = 16385;
            if (v245 == 3)
              v241 = 16385;
            if (v241 == 16407)
              goto LABEL_309;
          }
        }
      }
      return;
    case 0x106:
      v355 = *v2473;
      v356 = *(_DWORD *)(*v2473 + 12836);
      if (!v356)
        goto LABEL_500;
      for (i52 = 0; i52 < v356; ++i52)
      {
        v358 = v355 + 72 * i52;
        v359 = *(_QWORD *)(v358 + 5640);
        if (v359 == 16407)
        {
LABEL_498:
          v364 = v358 + 5632;
          v365 = v356 - 1;
          *(_DWORD *)(v355 + 12836) = v365;
          v366 = v355 + 72 * v365;
          --i52;
          *(_OWORD *)v364 = *(_OWORD *)(v366 + 5632);
          v367 = *(_OWORD *)(v366 + 5648);
          v368 = *(_OWORD *)(v366 + 5664);
          v369 = *(_OWORD *)(v366 + 5680);
          *(_QWORD *)(v364 + 64) = *(_QWORD *)(v366 + 5696);
          *(_OWORD *)(v364 + 32) = v368;
          *(_OWORD *)(v364 + 48) = v369;
          *(_OWORD *)(v364 + 16) = v367;
          v356 = *(_DWORD *)(v355 + 12836);
        }
        else
        {
          LOWORD(v360) = 16407;
          while (1)
          {
            v361 = v360 & 0x3FFF;
            if (v361 == 1)
              break;
            if (v361 == 2)
              v362 = 16385;
            else
              v362 = 16387;
            if (v361 == 3)
              v360 = 16385;
            else
              v360 = v362;
            if (v360 == v359)
              goto LABEL_498;
          }
          while (1)
          {
            v363 = v359 & 0x3FFF;
            if (v363 == 1)
              break;
            if (v363 == 2)
              v13 = 16385;
            else
              v13 = 16387;
            if ((v359 & 0x4000) != 0)
              v359 = v13;
            else
              v359 = v363 | 0x4000u;
            if (v363 == 40)
              v359 = 16385;
            if (v363 == 3)
              v359 = 16385;
            if (v359 == 16407)
              goto LABEL_498;
          }
        }
      }
LABEL_500:
      v370 = *(_QWORD *)(v10 + 32);
      LODWORD(v2618[0]) = 1;
      v2618[1] = 16388;
      v2618[2] = v10;
      v2619 = 0u;
      v2620 = 0u;
      v371 = (uint64_t *)v8;
      if ((v370 & 0x80000000) != 0)
        v372 = COERCE__INT64((double)v370) + 0x2000000000000;
      else
        v372 = v370 | 0xFFFE000000000000;
      v373 = JSC::DFG::Graph::freeze(v11, v372, v13, (uint64_t)&v2483, v5, v6, v8, v7);
      if (!(_DWORD)v370)
        return;
      v384 = *(unsigned __int16 *)(v10 + 18);
      switch(v384)
      {
        case 267:
          goto LABEL_2163;
        case 264:
          v385 = *(_DWORD *)(v10 + 76) & 0xF;
          break;
        case 352:
LABEL_2163:
          v385 = *(_DWORD *)(v10 + 84) & 0xF;
          break;
        default:
          v385 = *(_DWORD *)(v10 + 72);
          break;
      }
      v386 = v385 - 4;
      if (v386 <= 0x15u && ((0x2A003Fu >> v386) & 1) != 0)
      {
        v387 = qword_1991555A0[(char)v386];
        v388 = dword_199155650[(char)v386];
        v389 = *(unsigned int *)(v11 + 428);
        if (v370 >= v389)
        {
          if ((_DWORD)v389)
          {
            v1312 = *(unsigned int **)(v11 + 416);
            v1313 = 4 * v389;
            do
            {
              v1314 = *v1312;
              if (v1314 < v370)
              {
                v1315 = v1314 + *(_DWORD *)(v10 + 24);
                if (*(_DWORD *)(v11 + 164) <= v1315)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19835FCF0);
                }
                v1316 = *(_QWORD *)(*(_QWORD *)(v11 + 152) + 8 * v1315);
                if ((int)v1314 < 0)
                  v1317 = COERCE__INT64((double)v1314) + 0x2000000000000;
                else
                  v1317 = v1314 | 0xFFFE000000000000;
                v1318 = JSC::DFG::Graph::freeze(v11, v1317, v378, v379, v380, v381, v382, v383);
                v1323 = 0;
                LODWORD(v2616[0]) = v388;
                v2616[1] = v387;
                v2616[2] = v10;
                v2616[3] = 0;
                v2616[4] = (uint64_t)v1318;
                v2616[5] = 0;
                v2616[6] = 0;
                if ((v1316 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v1324 = *(unsigned __int16 *)((v1316 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                  if (v1324 <= 2)
                  {
                    v1323 = *(_QWORD *)((v1316 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                    if (*(_WORD *)((v1316 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
                    {
                      if ((_DWORD)v1324 != 1)
                        v1324 = 2;
                      v1323 |= v1324;
                    }
                  }
                  else
                  {
                    v1323 = 0;
                  }
                }
              }
              ++v1312;
              v1313 -= 4;
            }
            while (v1313);
          }
        }
        else
        {
          v390 = 0;
          do
          {
            v391 = v390 + *(_QWORD *)(v10 + 24);
            if (*(_DWORD *)(v11 + 164) <= v391)
            {
              __break(0xC471u);
              JUMPOUT(0x19835FC70);
            }
            v392 = *(_QWORD *)(*(_QWORD *)(v11 + 152) + 8 * v391);
            if ((int)v390 < 0)
              v393 = COERCE__INT64((double)v390) + 0x2000000000000;
            else
              v393 = v390 | 0xFFFE000000000000;
            v394 = JSC::DFG::Graph::freeze(v11, v393, v378, v379, v380, v381, v382, v383);
            v399 = 0;
            LODWORD(v2617[0]) = v388;
            v2617[1] = v387;
            v2617[2] = v10;
            v2617[3] = 0;
            v2617[4] = (uint64_t)v394;
            v2617[5] = 0;
            v2617[6] = 0;
            if ((v392 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v400 = *(unsigned __int16 *)((v392 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
              if (v400 <= 2)
              {
                v399 = *(_QWORD *)((v392 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                if (*(_WORD *)((v392 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
                {
                  if ((_DWORD)v400 != 1)
                    v400 = 2;
                  v399 |= v400;
                }
              }
              else
              {
                v399 = 0;
              }
            }
            ++v390;
          }
          while (v370 != v390);
        }
      }
      return;
    case 0x107:
      if (*(_DWORD *)(v10 + 32))
      {
        v1997 = *(_QWORD *)(v10 + 24);
        v1998 = *(_DWORD *)(v11 + 164);
        v1999 = v1998 >= v1997;
        LODWORD(v2000) = v1998 - v1997;
        if (v1999)
          v2000 = v2000;
        else
          v2000 = 0;
        v2001 = *(unsigned int *)(v10 + 32) - 1;
        do
        {
          if (!v2000)
          {
            __break(0xC471u);
            JUMPOUT(0x19835FD20);
          }
          v2002 = *(unsigned __int16 *)((*(_QWORD *)(*(_QWORD *)(v11 + 152) + 8 * v1997++) & 0xFF00FFFFFFFFFFFFLL)
                                      + 0x12);
          v2003 = v2002 == 350 || v2001-- == 0;
          --v2000;
        }
        while (!v2003);
      }
      v2004 = *v2473;
      v2005 = *(_DWORD *)(*v2473 + 12836);
      if (!v2005)
        return;
      for (i53 = 0; i53 < v2005; ++i53)
      {
        v2007 = v2004 + 72 * i53;
        v2008 = *(_QWORD *)(v2007 + 5640);
        if (v2008 == 16407)
        {
LABEL_3151:
          v2014 = v2007 + 5632;
          v2015 = v2005 - 1;
          *(_DWORD *)(v2004 + 12836) = v2015;
          v2016 = v2004 + 72 * v2015;
          --i53;
          *(_OWORD *)v2014 = *(_OWORD *)(v2016 + 5632);
          v2017 = *(_OWORD *)(v2016 + 5648);
          v2018 = *(_OWORD *)(v2016 + 5664);
          v2019 = *(_OWORD *)(v2016 + 5680);
          *(_QWORD *)(v2014 + 64) = *(_QWORD *)(v2016 + 5696);
          *(_OWORD *)(v2014 + 32) = v2018;
          *(_OWORD *)(v2014 + 48) = v2019;
          *(_OWORD *)(v2014 + 16) = v2017;
          v2005 = *(_DWORD *)(v2004 + 12836);
        }
        else
        {
          LOWORD(v2009) = 16407;
          while (1)
          {
            v2010 = v2009 & 0x3FFF;
            if (v2010 == 1)
              break;
            if (v2010 == 2)
              v2011 = 16385;
            else
              v2011 = 16387;
            if (v2010 == 3)
              v2009 = 16385;
            else
              v2009 = v2011;
            if (v2009 == v2008)
              goto LABEL_3151;
          }
          while (1)
          {
            v2012 = v2008 & 0x3FFF;
            if (v2012 == 1)
              break;
            if (v2012 == 2)
              v2013 = 16385;
            else
              v2013 = 16387;
            if ((v2008 & 0x4000) != 0)
              v2008 = v2013;
            else
              v2008 = v2012 | 0x4000u;
            if (v2012 == 40)
              v2008 = 16385;
            if (v2012 == 3)
              v2008 = 16385;
            if (v2008 == 16407)
              goto LABEL_3151;
          }
        }
      }
      return;
    case 0x108:
      v1419 = *v2473;
      v1420 = *(_DWORD *)(*v2473 + 12836);
      if (!v1420)
        return;
      v1421 = 0;
      while (1)
      {
        v1422 = v1419 + 72 * v1421;
        v1423 = *(_QWORD *)(v1422 + 5640);
        if (v1423 != 16387)
          break;
LABEL_2127:
        v1427 = v1422 + 5632;
        v1428 = v1420 - 1;
        *(_DWORD *)(v1419 + 12836) = v1428;
        v1429 = v1419 + 72 * v1428;
        --v1421;
        *(_OWORD *)v1427 = *(_OWORD *)(v1429 + 5632);
        v1430 = *(_OWORD *)(v1429 + 5648);
        v1431 = *(_OWORD *)(v1429 + 5664);
        v1432 = *(_OWORD *)(v1429 + 5680);
        *(_QWORD *)(v1427 + 64) = *(_QWORD *)(v1429 + 5696);
        *(_OWORD *)(v1427 + 32) = v1431;
        *(_OWORD *)(v1427 + 48) = v1432;
        *(_OWORD *)(v1427 + 16) = v1430;
        v1420 = *(_DWORD *)(v1419 + 12836);
LABEL_2128:
        if (++v1421 >= v1420)
          return;
      }
      LOWORD(v1424) = 16387;
      while (1)
      {
        v1425 = v1424 & 0x3FFF;
        if (v1425 == 1)
          break;
        if (v1425 == 2)
          v1426 = 16385;
        else
          v1426 = 16387;
        if (v1425 == 3)
          v1424 = 16385;
        else
          v1424 = v1426;
        if (v1424 == v1423)
          goto LABEL_2127;
      }
      while (1)
      {
        v1434 = v1423 & 0x3FFF;
        if (v1434 == 1)
          goto LABEL_2128;
        if (v1434 == 3)
          goto LABEL_2136;
        v1433 = 16385;
        if (v1434 != 40)
        {
          if ((v1423 & 0x4000) != 0)
          {
            if (v1434 != 2)
              goto LABEL_2127;
LABEL_2136:
            v1433 = 16385;
            goto LABEL_2137;
          }
          v1433 = v1434 | 0x4000u;
        }
LABEL_2137:
        LOWORD(v1423) = v1433;
        if (v1433 == 16387)
          goto LABEL_2127;
      }
    case 0x109:
      v825 = *v2473;
      v826 = *(_DWORD *)(*v2473 + 12836);
      if (!v826)
        return;
      for (i54 = 0; i54 < v826; ++i54)
      {
        v828 = v825 + 72 * i54;
        v829 = *(_QWORD *)(v828 + 5640);
        if (v829 == 16407)
        {
LABEL_1201:
          v835 = v828 + 5632;
          v836 = v826 - 1;
          *(_DWORD *)(v825 + 12836) = v836;
          v837 = v825 + 72 * v836;
          --i54;
          *(_OWORD *)v835 = *(_OWORD *)(v837 + 5632);
          v838 = *(_OWORD *)(v837 + 5648);
          v839 = *(_OWORD *)(v837 + 5664);
          v840 = *(_OWORD *)(v837 + 5680);
          *(_QWORD *)(v835 + 64) = *(_QWORD *)(v837 + 5696);
          *(_OWORD *)(v835 + 32) = v839;
          *(_OWORD *)(v835 + 48) = v840;
          *(_OWORD *)(v835 + 16) = v838;
          v826 = *(_DWORD *)(v825 + 12836);
        }
        else
        {
          LOWORD(v830) = 16407;
          while (1)
          {
            v831 = v830 & 0x3FFF;
            if (v831 == 1)
              break;
            if (v831 == 2)
              v832 = 16385;
            else
              v832 = 16387;
            if (v831 == 3)
              v830 = 16385;
            else
              v830 = v832;
            if (v830 == v829)
              goto LABEL_1201;
          }
          while (1)
          {
            v833 = v829 & 0x3FFF;
            if (v833 == 1)
              break;
            if (v833 == 2)
              v834 = 16385;
            else
              v834 = 16387;
            if ((v829 & 0x4000) != 0)
              v829 = v834;
            else
              v829 = v833 | 0x4000u;
            if (v833 == 40)
              v829 = 16385;
            if (v833 == 3)
              v829 = 16385;
            if (v829 == 16407)
              goto LABEL_1201;
          }
        }
      }
      return;
    case 0x10A:
      v940 = (uint64_t *)v8;
      v941 = *v2473;
      v942 = *(_DWORD *)(*v2473 + 12836);
      if (!v942)
        goto LABEL_1379;
      for (i55 = 0; i55 < v942; ++i55)
      {
        v944 = v941 + 72 * i55;
        v945 = *(_QWORD *)(v944 + 5640);
        if (v945 == 16407)
        {
LABEL_1377:
          v950 = v944 + 5632;
          v951 = v942 - 1;
          *(_DWORD *)(v941 + 12836) = v951;
          v952 = v941 + 72 * v951;
          --i55;
          *(_OWORD *)v950 = *(_OWORD *)(v952 + 5632);
          v953 = *(_OWORD *)(v952 + 5648);
          v954 = *(_OWORD *)(v952 + 5664);
          v955 = *(_OWORD *)(v952 + 5680);
          *(_QWORD *)(v950 + 64) = *(_QWORD *)(v952 + 5696);
          *(_OWORD *)(v950 + 32) = v954;
          *(_OWORD *)(v950 + 48) = v955;
          *(_OWORD *)(v950 + 16) = v953;
          v942 = *(_DWORD *)(v941 + 12836);
        }
        else
        {
          LOWORD(v946) = 16407;
          while (1)
          {
            v947 = v946 & 0x3FFF;
            if (v947 == 1)
              break;
            if (v947 == 2)
              v948 = 16385;
            else
              v948 = 16387;
            if (v947 == 3)
              v946 = 16385;
            else
              v946 = v948;
            if (v946 == v945)
              goto LABEL_1377;
          }
          while (1)
          {
            v949 = v945 & 0x3FFF;
            if (v949 == 1)
              break;
            if (v949 == 2)
              v13 = 16385;
            else
              v13 = 16387;
            if ((v945 & 0x4000) != 0)
              v945 = v13;
            else
              v945 = v949 | 0x4000u;
            if (v949 == 40)
              v945 = 16385;
            if (v949 == 3)
              v945 = 16385;
            if (v945 == 16407)
              goto LABEL_1377;
          }
        }
      }
LABEL_1379:
      LODWORD(v2621[0]) = 1;
      v2621[1] = 16388;
      v2621[2] = v10;
      v2622 = 0u;
      v2623 = 0u;
      v956 = *(unsigned int *)(v10 + 80);
      if ((v956 & 0x80000000) != 0)
        v957 = COERCE__INT64((double)v956) + 0x2000000000000;
      else
        v957 = v956 | 0xFFFE000000000000;
      v958 = JSC::DFG::Graph::freeze(v11, v957, v13, (uint64_t)&v2483, v5, v6, v8, v7);
      return;
    case 0x10B:
      v2472 = (uint64_t *)v8;
      v1355 = *v2473;
      v1356 = *(_DWORD *)(*v2473 + 12836);
      if (!v1356)
        goto LABEL_2046;
      for (i56 = 0; i56 < v1356; ++i56)
      {
        v1358 = v1355 + 72 * i56;
        v1359 = *(_QWORD *)(v1358 + 5640);
        if (v1359 == 16407)
        {
LABEL_2044:
          v1363 = v1358 + 5632;
          v1364 = v1356 - 1;
          *(_DWORD *)(v1355 + 12836) = v1364;
          v1365 = v1355 + 72 * v1364;
          --i56;
          *(_OWORD *)v1363 = *(_OWORD *)(v1365 + 5632);
          v1366 = *(_OWORD *)(v1365 + 5648);
          v1367 = *(_OWORD *)(v1365 + 5664);
          v1368 = *(_OWORD *)(v1365 + 5680);
          *(_QWORD *)(v1363 + 64) = *(_QWORD *)(v1365 + 5696);
          *(_OWORD *)(v1363 + 32) = v1367;
          *(_OWORD *)(v1363 + 48) = v1368;
          *(_OWORD *)(v1363 + 16) = v1366;
          v1356 = *(_DWORD *)(v1355 + 12836);
        }
        else
        {
          LOWORD(v1360) = 16407;
          while (1)
          {
            v1361 = v1360 & 0x3FFF;
            if (v1361 == 1)
              break;
            if (v1361 == 2)
              v13 = 16385;
            else
              v13 = 16387;
            if (v1361 == 3)
              v1360 = 16385;
            else
              v1360 = v13;
            if (v1360 == v1359)
              goto LABEL_2044;
          }
          while (1)
          {
            v1362 = v1359 & 0x3FFF;
            if (v1362 == 1)
              break;
            v13 = v1362 | 0x4000u;
            if (v1362 == 2)
              v14 = 16385;
            else
              v14 = 16387;
            if ((v1359 & 0x4000) != 0)
              v1359 = v14;
            else
              v1359 = v1362 | 0x4000u;
            if (v1362 == 40)
              v1359 = 16385;
            if (v1362 == 3)
              v1359 = 16385;
            if (v1359 == 16407)
              goto LABEL_2044;
          }
        }
      }
LABEL_2046:
      v1369 = **(_QWORD **)(v10 + 72);
      v1370 = *(unsigned int *)(v1369 + 8);
      LODWORD(v2613[0]) = 1;
      v2613[1] = 16388;
      v2613[2] = v10;
      v2614 = 0u;
      v2615 = 0u;
      if ((v1370 & 0x80000000) != 0)
        v1371 = COERCE__INT64((double)v1370) + 0x2000000000000;
      else
        v1371 = v1370 | 0xFFFE000000000000;
      v1372 = JSC::DFG::Graph::freeze(v11, v1371, v13, v14, v5, v6, v8, v7);
      v1384 = *(unsigned __int16 *)(v10 + 18);
      switch(v1384)
      {
        case 267:
          goto LABEL_3646;
        case 264:
          LOBYTE(v1385) = *(_DWORD *)(v10 + 76) & 0xF;
          break;
        case 352:
LABEL_3646:
          LOBYTE(v1385) = *(_DWORD *)(v10 + 84) & 0xF;
          break;
        default:
          v1385 = *(_DWORD *)(v10 + 72);
          break;
      }
      if (v1385 - 8 < 2)
        goto LABEL_2053;
      if (v1385 > 0x19u)
        return;
      if (((1 << v1385) & 0x200030) != 0)
      {
        v2474 = 21;
        v1386 = 1;
        v1387 = 16400;
      }
      else if (((1 << v1385) & 0x8000C0) != 0)
      {
        v1386 = 0;
        v2474 = 13;
        v1387 = 16401;
      }
      else
      {
        if (v1385 != 25)
          return;
LABEL_2053:
        v2474 = 21;
        v1386 = 1;
        v1387 = 16402;
      }
      v1388 = *(unsigned int *)(v11 + 428);
      if (v1388 > v1370)
      {
        if ((_DWORD)v1370)
        {
          v2240 = 0;
          v2241 = v1369 + 16;
          do
          {
            if ((v2240 & 0x80000000) != 0)
              v2242 = COERCE__INT64((double)v2240) + 0x2000000000000;
            else
              v2242 = v2240 | 0xFFFE000000000000;
            v2243 = JSC::DFG::Graph::freeze(v11, v2242, v1378, v1379, v1380, v1381, v1382, v1383);
            LODWORD(v2612[0]) = v2474;
            v2612[1] = v1387;
            v2612[2] = v10;
            v2612[3] = 0;
            v2612[4] = (uint64_t)v2243;
            v2612[5] = 0;
            v2612[6] = 0;
            if ((*(_BYTE *)(v1369 + 4) & 0xE) == 6)
              v2250 = *(_QWORD *)(v2241 + 8 * v2240) + 0x2000000000000;
            else
              v2250 = *(_QWORD *)(v2241 + 8 * v2240);
            v2251 = (uint64_t)JSC::DFG::Graph::freeze(v11, v2250, v2244, v2245, v2246, v2247, v2248, v2249);
            v2256 = v2251;
            if ((v1386 & 1) == 0)
              v2256 = v2251 | 1;
            ++v2240;
          }
          while (v1370 != v2240);
        }
      }
      else
      {
        v3088[0] = 0uLL;
        if ((_DWORD)v1388)
        {
          v1389 = *(unsigned int **)(v11 + 416);
          v1390 = 4 * v1388;
          do
          {
            v1391 = *v1389;
            LODWORD(v2475) = v1391;
            if (v1391 < v1370)
            {
              if (HIDWORD(v3088[0]) == DWORD2(v3088[0]))
              {
                WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)v3088, (unint64_t)&v2475);
              }
              else
              {
                *(_DWORD *)(*(_QWORD *)&v3088[0] + 4 * HIDWORD(v3088[0])) = v1391;
                ++HIDWORD(v3088[0]);
              }
            }
            ++v1389;
            v1390 -= 4;
          }
          while (v1390);
          v1974 = *(unsigned int **)&v3088[0];
          if (HIDWORD(v3088[0]))
          {
            v1975 = v1369 + 16;
            v1976 = 4 * HIDWORD(v3088[0]);
            do
            {
              v1977 = *v1974;
              if ((v1977 & 0x80000000) != 0)
                v1978 = COERCE__INT64((double)v1977) + 0x2000000000000;
              else
                v1978 = v1977 | 0xFFFE000000000000;
              v1979 = JSC::DFG::Graph::freeze(v11, v1978, v1378, v1379, v1380, v1381, v1382, v1383);
              LODWORD(v2611[0]) = v2474;
              v2611[1] = v1387;
              v2611[2] = v10;
              v2611[3] = 0;
              v2611[4] = (uint64_t)v1979;
              v2611[5] = 0;
              v2611[6] = 0;
              if ((*(_BYTE *)(v1369 + 4) & 0xE) == 6)
                v1986 = *(_QWORD *)(v1975 + 8 * v1977) + 0x2000000000000;
              else
                v1986 = *(_QWORD *)(v1975 + 8 * v1977);
              v1987 = (uint64_t)JSC::DFG::Graph::freeze(v11, v1986, v1980, v1981, v1982, v1983, v1984, v1985);
              v1992 = v1987;
              if ((v1386 & 1) == 0)
                v1992 = v1987 | 1;
              ++v1974;
              v1976 -= 4;
            }
            while (v1976);
            v1974 = *(unsigned int **)&v3088[0];
          }
          if (v1974)
          {
            *(_QWORD *)&v3088[0] = 0;
            DWORD2(v3088[0]) = 0;
            WTF::fastFree((unint64_t)v1974, v1377, v1378, v1379, v1380, v1381, v1382, v1383);
          }
        }
      }
      return;
    case 0x10D:
      v1482 = (*(_QWORD *)(v10 + 24) >> 50) & 0x3FLL;
      if ((_DWORD)v1482 == 1)
        goto LABEL_2222;
      if (!(_DWORD)v1482)
        goto LABEL_3556;
      if ((_DWORD)v1482 != 52)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x19835E1D0);
      }
LABEL_2222:
      v1483 = *v2473;
      v1484 = *(_DWORD *)(*v2473 + 12836);
      if (!v1484)
        return;
      for (i57 = 0; i57 < v1484; ++i57)
      {
        v1486 = v1483 + 72 * i57;
        v1487 = *(_QWORD *)(v1486 + 5640);
        if (v1487 == 16407)
        {
LABEL_2247:
          v1493 = v1486 + 5632;
          v1494 = v1484 - 1;
          *(_DWORD *)(v1483 + 12836) = v1494;
          v1495 = v1483 + 72 * v1494;
          --i57;
          *(_OWORD *)v1493 = *(_OWORD *)(v1495 + 5632);
          v1496 = *(_OWORD *)(v1495 + 5648);
          v1497 = *(_OWORD *)(v1495 + 5664);
          v1498 = *(_OWORD *)(v1495 + 5680);
          *(_QWORD *)(v1493 + 64) = *(_QWORD *)(v1495 + 5696);
          *(_OWORD *)(v1493 + 32) = v1497;
          *(_OWORD *)(v1493 + 48) = v1498;
          *(_OWORD *)(v1493 + 16) = v1496;
          v1484 = *(_DWORD *)(v1483 + 12836);
        }
        else
        {
          LOWORD(v1488) = 16407;
          while (1)
          {
            v1489 = v1488 & 0x3FFF;
            if (v1489 == 1)
              break;
            if (v1489 == 2)
              v1490 = 16385;
            else
              v1490 = 16387;
            if (v1489 == 3)
              v1488 = 16385;
            else
              v1488 = v1490;
            if (v1488 == v1487)
              goto LABEL_2247;
          }
          while (1)
          {
            v1491 = v1487 & 0x3FFF;
            if (v1491 == 1)
              break;
            if (v1491 == 2)
              v1492 = 16385;
            else
              v1492 = 16387;
            if ((v1487 & 0x4000) != 0)
              v1487 = v1492;
            else
              v1487 = v1491 | 0x4000u;
            if (v1491 == 40)
              v1487 = 16385;
            if (v1491 == 3)
              v1487 = 16385;
            if (v1487 == 16407)
              goto LABEL_2247;
          }
        }
      }
      return;
    case 0x10F:
      v2421 = *(_QWORD *)(v10 + 24);
      v214 = *v2473;
      if ((v2421 & 0xFF00FFFFFFFFFFFFLL) == 0 || (v2421 & 0xFC000000000000) == 0x54000000000000)
        goto LABEL_3573;
      goto LABEL_3557;
    case 0x114:
      isWatchingHavingABadTimeWatchpoint = JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (uint64_t)v2775, (uint64_t)&v2483, v5, v6, v8, v7);
      v214 = *v2473;
      if ((isWatchingHavingABadTimeWatchpoint & 1) == 0)
        goto LABEL_3557;
      v1182 = *(_DWORD *)(v214 + 12836);
      if (!v1182)
        return;
      for (i58 = 0; i58 < v1182; ++i58)
      {
        v1184 = v214 + 72 * i58;
        v1185 = *(_QWORD *)(v1184 + 5640);
        if (v1185 == 16407)
        {
LABEL_1770:
          v1191 = v1184 + 5632;
          v1192 = v1182 - 1;
          *(_DWORD *)(v214 + 12836) = v1192;
          v1193 = v214 + 72 * v1192;
          --i58;
          *(_OWORD *)v1191 = *(_OWORD *)(v1193 + 5632);
          v1194 = *(_OWORD *)(v1193 + 5648);
          v1195 = *(_OWORD *)(v1193 + 5664);
          v1196 = *(_OWORD *)(v1193 + 5680);
          *(_QWORD *)(v1191 + 64) = *(_QWORD *)(v1193 + 5696);
          *(_OWORD *)(v1191 + 32) = v1195;
          *(_OWORD *)(v1191 + 48) = v1196;
          *(_OWORD *)(v1191 + 16) = v1194;
          v1182 = *(_DWORD *)(v214 + 12836);
        }
        else
        {
          LOWORD(v1186) = 16407;
          while (1)
          {
            v1187 = v1186 & 0x3FFF;
            if (v1187 == 1)
              break;
            if (v1187 == 2)
              v1188 = 16385;
            else
              v1188 = 16387;
            if (v1187 == 3)
              v1186 = 16385;
            else
              v1186 = v1188;
            if (v1186 == v1185)
              goto LABEL_1770;
          }
          while (1)
          {
            v1189 = v1185 & 0x3FFF;
            if (v1189 == 1)
              break;
            if (v1189 == 2)
              v1190 = 16385;
            else
              v1190 = 16387;
            if ((v1185 & 0x4000) != 0)
              v1185 = v1190;
            else
              v1185 = v1189 | 0x4000u;
            if (v1189 == 40)
              v1185 = 16385;
            if (v1189 == 3)
              v1185 = 16385;
            if (v1185 == 16407)
              goto LABEL_1770;
          }
        }
      }
      return;
    case 0x115:
      v1058 = *(unsigned __int16 *)((*(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v1058 == 352)
        return;
      if (v1058 == 349)
      {
LABEL_3572:
        v214 = *v2473;
LABEL_3573:
        v215 = 16407;
        goto LABEL_2067;
      }
      v1059 = *v2473;
      v1060 = *(_DWORD *)(*v2473 + 12836);
      if (!v1060)
        return;
      v1061 = 0;
      while (1)
      {
        v1062 = v1059 + 72 * v1061;
        v1063 = *(_QWORD *)(v1062 + 5640);
        if (v1063 != 16387)
          break;
LABEL_1550:
        v1067 = v1062 + 5632;
        v1068 = v1060 - 1;
        *(_DWORD *)(v1059 + 12836) = v1068;
        v1069 = v1059 + 72 * v1068;
        --v1061;
        *(_OWORD *)v1067 = *(_OWORD *)(v1069 + 5632);
        v1070 = *(_OWORD *)(v1069 + 5648);
        v1071 = *(_OWORD *)(v1069 + 5664);
        v1072 = *(_OWORD *)(v1069 + 5680);
        *(_QWORD *)(v1067 + 64) = *(_QWORD *)(v1069 + 5696);
        *(_OWORD *)(v1067 + 32) = v1071;
        *(_OWORD *)(v1067 + 48) = v1072;
        *(_OWORD *)(v1067 + 16) = v1070;
        v1060 = *(_DWORD *)(v1059 + 12836);
LABEL_1551:
        if (++v1061 >= v1060)
          return;
      }
      LOWORD(v1064) = 16387;
      while (1)
      {
        v1065 = v1064 & 0x3FFF;
        if (v1065 == 1)
          break;
        if (v1065 == 2)
          v1066 = 16385;
        else
          v1066 = 16387;
        if (v1065 == 3)
          v1064 = 16385;
        else
          v1064 = v1066;
        if (v1064 == v1063)
          goto LABEL_1550;
      }
      while (1)
      {
        v1074 = v1063 & 0x3FFF;
        if (v1074 == 1)
          goto LABEL_1551;
        if (v1074 == 3)
          goto LABEL_1559;
        v1073 = 16385;
        if (v1074 != 40)
        {
          if ((v1063 & 0x4000) != 0)
          {
            if (v1074 != 2)
              goto LABEL_1550;
LABEL_1559:
            v1073 = 16385;
            goto LABEL_1560;
          }
          v1073 = v1074 | 0x4000u;
        }
LABEL_1560:
        LOWORD(v1063) = v1073;
        if (v1073 == 16387)
          goto LABEL_1550;
      }
    case 0x123:
      v2224 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      LODWORD(v2775[0]) = 6;
      v2775[1] = 16395;
      v2775[2] = v2224;
      v2776 = 0u;
      v2777 = 0u;
      v2225 = (uint64_t *)v8;
      JSC::DFG::LazyNode::LazyNode(v2774, (JSC::DFG::Node *)v10);
      return;
    case 0x127:
      v336 = *(unsigned __int8 *)(v10 + 72);
      v3023 = 295;
      v337 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v3024 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v3025 = v337;
      v3026 = v336;
      v3027 = 0;
      v110 = *(_QWORD *)v8;
      v111 = &v3023;
      goto LABEL_121;
    case 0x12B:
      v611 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v2930 = 26;
      v2931 = 16423;
      v2932 = v611;
      v2933 = 0u;
      v2934 = 0u;
      v107 = *(_QWORD *)v8;
      v108 = &v2930;
      goto LABEL_119;
    case 0x12C:
      v509 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v2925 = 27;
      v2926 = 16423;
      v2927 = v509;
      v2928 = 0u;
      v2929 = 0u;
      v107 = *(_QWORD *)v8;
      v108 = &v2925;
      goto LABEL_119;
    case 0x131:
      v1239 = *(_QWORD *)(v10 + 24);
      if ((v1239 & 0xFC000000000000) != 0xC4000000000000)
        goto LABEL_3556;
      v3068 = 305;
      v3069 = v1239 & 0xFFFCFFFFFFFFFFFFLL;
      v3070 = vandq_s8(*(int8x16_t *)(v10 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v3072 = 0;
      v3071 = 0;
      v110 = *(_QWORD *)v8;
      v111 = &v3068;
      goto LABEL_121;
    case 0x132:
      v3073 = 306;
      v2230 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v3074 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v3076 = 0;
      v3077 = 0;
      v3075 = v2230;
      v110 = *(_QWORD *)v8;
      v111 = &v3073;
      goto LABEL_121;
    case 0x135:
      v629 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v2920 = 24;
      v2921 = 16423;
      v2922 = v629;
      v2923 = 0u;
      v2924 = 0u;
      v107 = *(_QWORD *)v8;
      v108 = &v2920;
      goto LABEL_119;
    case 0x136:
      v1414 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v2915 = 25;
      v2916 = 16423;
      v2917 = v1414;
      v2918 = 0u;
      v2919 = 0u;
      v107 = *(_QWORD *)v8;
      v108 = &v2915;
      goto LABEL_119;
    case 0x13E:
    case 0x145:
      v483 = *(_QWORD *)(v10 + 24);
      v484 = (v483 >> 50) & 0x3F;
      if (v484 > 0x34)
        goto LABEL_2251;
      if (((1 << v484) & 0x12026000400002) != 0)
      {
        v2590 = *(_WORD *)(v10 + 18);
        v2591 = v483 & 0xFFFCFFFFFFFFFFFFLL;
        v2592 = vandq_s8(*(int8x16_t *)(v10 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
        v2594 = 0;
        v2593 = 0;
        return;
      }
      if (((1 << v484) & 0x101) == 0)
      {
        if (v484 != 24)
        {
LABEL_2251:
          __break(0xC471u);
          JUMPOUT(0x19835AEA0);
        }
        return;
      }
      v691 = *v2473;
      v692 = *(_DWORD *)(*v2473 + 12836);
      if (!v692)
        return;
      v693 = 0;
      while (1)
      {
        v694 = v691 + 72 * v693;
        v695 = *(_QWORD *)(v694 + 5640);
        if (v695 != 16387)
          break;
LABEL_965:
        v699 = v694 + 5632;
        v700 = v692 - 1;
        *(_DWORD *)(v691 + 12836) = v700;
        v701 = v691 + 72 * v700;
        --v693;
        *(_OWORD *)v699 = *(_OWORD *)(v701 + 5632);
        v702 = *(_OWORD *)(v701 + 5648);
        v703 = *(_OWORD *)(v701 + 5664);
        v704 = *(_OWORD *)(v701 + 5680);
        *(_QWORD *)(v699 + 64) = *(_QWORD *)(v701 + 5696);
        *(_OWORD *)(v699 + 32) = v703;
        *(_OWORD *)(v699 + 48) = v704;
        *(_OWORD *)(v699 + 16) = v702;
        v692 = *(_DWORD *)(v691 + 12836);
LABEL_966:
        if (++v693 >= v692)
          return;
      }
      LOWORD(v696) = 16387;
      while (1)
      {
        v697 = v696 & 0x3FFF;
        if (v697 == 1)
          break;
        if (v697 == 2)
          v698 = 16385;
        else
          v698 = 16387;
        if (v697 == 3)
          v696 = 16385;
        else
          v696 = v698;
        if (v696 == v695)
          goto LABEL_965;
      }
      while (1)
      {
        v706 = v695 & 0x3FFF;
        if (v706 == 1)
          goto LABEL_966;
        if (v706 == 3)
          goto LABEL_974;
        v705 = 16385;
        if (v706 != 40)
        {
          if ((v695 & 0x4000) != 0)
          {
            if (v706 != 2)
              goto LABEL_965;
LABEL_974:
            v705 = 16385;
            goto LABEL_975;
          }
          v705 = v706 | 0x4000u;
        }
LABEL_975:
        LOWORD(v695) = v705;
        if (v705 == 16387)
          goto LABEL_965;
      }
    case 0x13F:
      v967 = *(_QWORD *)(v10 + 24);
      if ((v967 & 0xFC000000000000) == 0x54000000000000)
      {
        v2910 = 319;
        v2911 = v967 & 0xFFFCFFFFFFFFFFFFLL;
        v2912 = vandq_s8(*(int8x16_t *)(v10 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
        v2914 = 0;
        v2913 = 0;
        v110 = *(_QWORD *)v8;
        v111 = &v2910;
        goto LABEL_121;
      }
      v968 = *v2473;
      v969 = *(_DWORD *)(*v2473 + 12836);
      if (!v969)
        return;
      v970 = 0;
      while (1)
      {
        v971 = v968 + 72 * v970;
        v972 = *(_QWORD *)(v971 + 5640);
        if (v972 != 16387)
          break;
LABEL_1402:
        v976 = v971 + 5632;
        v977 = v969 - 1;
        *(_DWORD *)(v968 + 12836) = v977;
        v978 = v968 + 72 * v977;
        --v970;
        *(_OWORD *)v976 = *(_OWORD *)(v978 + 5632);
        v979 = *(_OWORD *)(v978 + 5648);
        v980 = *(_OWORD *)(v978 + 5664);
        v981 = *(_OWORD *)(v978 + 5680);
        *(_QWORD *)(v976 + 64) = *(_QWORD *)(v978 + 5696);
        *(_OWORD *)(v976 + 32) = v980;
        *(_OWORD *)(v976 + 48) = v981;
        *(_OWORD *)(v976 + 16) = v979;
        v969 = *(_DWORD *)(v968 + 12836);
LABEL_1403:
        if (++v970 >= v969)
          return;
      }
      LOWORD(v973) = 16387;
      while (1)
      {
        v974 = v973 & 0x3FFF;
        if (v974 == 1)
          break;
        if (v974 == 2)
          v975 = 16385;
        else
          v975 = 16387;
        if (v974 == 3)
          v973 = 16385;
        else
          v973 = v975;
        if (v973 == v972)
          goto LABEL_1402;
      }
      while (1)
      {
        v983 = v972 & 0x3FFF;
        if (v983 == 1)
          goto LABEL_1403;
        if (v983 == 3)
          goto LABEL_1411;
        v982 = 16385;
        if (v983 != 40)
        {
          if ((v972 & 0x4000) != 0)
          {
            if (v983 != 2)
              goto LABEL_1402;
LABEL_1411:
            v982 = 16385;
            goto LABEL_1412;
          }
          v982 = v983 | 0x4000u;
        }
LABEL_1412:
        LOWORD(v972) = v982;
        if (v982 == 16387)
          goto LABEL_1402;
      }
    case 0x142:
    case 0x143:
      v630 = *(_QWORD *)(v10 + 24);
      if ((v630 & 0xFC000000000000) != 0)
      {
        v2778 = *(_WORD *)(v10 + 18);
        v2779 = v630 & 0xFFFCFFFFFFFFFFFFLL;
        v2780 = vandq_s8(*(int8x16_t *)(v10 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
        v2782 = 0;
        v2781 = 0;
        return;
      }
      v2132 = *v2473;
      v2133 = *(_DWORD *)(*v2473 + 12836);
      if (!v2133)
        return;
      v2134 = 0;
      while (1)
      {
        v2135 = v2132 + 72 * v2134;
        v2136 = *(_QWORD *)(v2135 + 5640);
        if (v2136 != 16387)
          break;
LABEL_3399:
        v2140 = v2135 + 5632;
        v2141 = v2133 - 1;
        *(_DWORD *)(v2132 + 12836) = v2141;
        v2142 = v2132 + 72 * v2141;
        --v2134;
        *(_OWORD *)v2140 = *(_OWORD *)(v2142 + 5632);
        v2143 = *(_OWORD *)(v2142 + 5648);
        v2144 = *(_OWORD *)(v2142 + 5664);
        v2145 = *(_OWORD *)(v2142 + 5680);
        *(_QWORD *)(v2140 + 64) = *(_QWORD *)(v2142 + 5696);
        *(_OWORD *)(v2140 + 32) = v2144;
        *(_OWORD *)(v2140 + 48) = v2145;
        *(_OWORD *)(v2140 + 16) = v2143;
        v2133 = *(_DWORD *)(v2132 + 12836);
LABEL_3400:
        if (++v2134 >= v2133)
          return;
      }
      LOWORD(v2137) = 16387;
      while (1)
      {
        v2138 = v2137 & 0x3FFF;
        if (v2138 == 1)
          break;
        if (v2138 == 2)
          v2139 = 16385;
        else
          v2139 = 16387;
        if (v2138 == 3)
          v2137 = 16385;
        else
          v2137 = v2139;
        if (v2137 == v2136)
          goto LABEL_3399;
      }
      while (1)
      {
        v2147 = v2136 & 0x3FFF;
        if (v2147 == 1)
          goto LABEL_3400;
        if (v2147 == 3)
          goto LABEL_3408;
        v2146 = 16385;
        if (v2147 != 40)
        {
          if ((v2136 & 0x4000) != 0)
          {
            if (v2147 != 2)
              goto LABEL_3399;
LABEL_3408:
            v2146 = 16385;
            goto LABEL_3409;
          }
          v2146 = v2147 | 0x4000u;
        }
LABEL_3409:
        LOWORD(v2136) = v2146;
        if (v2146 == 16387)
          goto LABEL_3399;
      }
    case 0x144:
    case 0x15A:
    case 0x15C:
    case 0x15D:
    case 0x15E:
    case 0x15F:
    case 0x160:
    case 0x163:
      goto LABEL_3572;
    case 0x146:
      v2422 = *(_QWORD *)(v10 + 24);
      v2423 = (v2422 >> 50) & 0x3F;
      if (!(_DWORD)v2423)
        goto LABEL_3556;
      if ((_DWORD)v2423 != 28)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x19835FCD8);
      }
      v2905 = 326;
      v2906 = v2422 & 0xFFFCFFFFFFFFFFFFLL;
      v2907 = vandq_s8(*(int8x16_t *)(v10 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v2909 = 0;
      v2908 = 0;
      v110 = *(_QWORD *)v8;
      v111 = &v2905;
      goto LABEL_121;
    case 0x148:
      v984 = *(int *)(v10 + 72);
      v2483 = 328;
      v985 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v2484 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v2485 = v985;
      v2486 = v984;
      v2487 = 0;
      return;
    case 0x149:
      v2585 = 329;
      v2309 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v2586 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v2589 = 0;
      v2587 = v2309;
      v2588 = 0;
      return;
    case 0x14A:
      v2206 = *v2473;
      v2207 = *(_DWORD *)(*v2473 + 12836);
      if (!v2207)
        return;
      v2208 = 0;
      while (1)
      {
        v2209 = v2206 + 72 * v2208;
        v2210 = *(_QWORD *)(v2209 + 5640);
        if (v2210 != 16387)
          break;
LABEL_3534:
        v2214 = v2209 + 5632;
        v2215 = v2207 - 1;
        *(_DWORD *)(v2206 + 12836) = v2215;
        v2216 = v2206 + 72 * v2215;
        --v2208;
        *(_OWORD *)v2214 = *(_OWORD *)(v2216 + 5632);
        v2217 = *(_OWORD *)(v2216 + 5648);
        v2218 = *(_OWORD *)(v2216 + 5664);
        v2219 = *(_OWORD *)(v2216 + 5680);
        *(_QWORD *)(v2214 + 64) = *(_QWORD *)(v2216 + 5696);
        *(_OWORD *)(v2214 + 32) = v2218;
        *(_OWORD *)(v2214 + 48) = v2219;
        *(_OWORD *)(v2214 + 16) = v2217;
        v2207 = *(_DWORD *)(v2206 + 12836);
LABEL_3535:
        if (++v2208 >= v2207)
          return;
      }
      LOWORD(v2211) = 16387;
      while (1)
      {
        v2212 = v2211 & 0x3FFF;
        if (v2212 == 1)
          break;
        if (v2212 == 2)
          v2213 = 16385;
        else
          v2213 = 16387;
        if (v2212 == 3)
          v2211 = 16385;
        else
          v2211 = v2213;
        if (v2211 == v2210)
          goto LABEL_3534;
      }
      while (1)
      {
        v2221 = v2210 & 0x3FFF;
        if (v2221 == 1)
          goto LABEL_3535;
        if (v2221 == 3)
          goto LABEL_3543;
        v2220 = 16385;
        if (v2221 != 40)
        {
          if ((v2210 & 0x4000) != 0)
          {
            if (v2221 != 2)
              goto LABEL_3534;
LABEL_3543:
            v2220 = 16385;
            goto LABEL_3544;
          }
          v2220 = v2221 | 0x4000u;
        }
LABEL_3544:
        LOWORD(v2210) = v2220;
        if (v2220 == 16387)
          goto LABEL_3534;
      }
    case 0x157:
      v434 = ((unint64_t)*(unsigned int *)(v10 + 72) << 15) | 0x21;
      v435 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v2654 = 56;
      v2655 = v434;
      v2656 = v435;
      v2657 = 0u;
      v2658 = 0u;
      v107 = *(_QWORD *)v8;
      v108 = &v2654;
      goto LABEL_119;
    case 0x158:
      v423 = (uint64_t *)v8;
      v424 = ((unint64_t)*(unsigned int *)(v10 + 72) << 15) | 0x21;
      v429 = *(_QWORD *)(v10 + 32);
      v430 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      LODWORD(v2651[0]) = 56;
      v2651[1] = v424;
      v2651[2] = v430;
      v2652 = 0u;
      v2653 = 0u;
      v431 = v429 & 0xFF00FFFFFFFFFFFFLL;
      if ((v429 & 0xFF00FFFFFFFFFFFFLL) != 0
        && (v600 = *(unsigned __int16 *)((v429 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v600 <= 2))
      {
        v432 = *(_QWORD *)((v429 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        v433 = v423;
        if (!(_DWORD)v600)
        {
LABEL_564:
          return;
        }
        if ((_DWORD)v600 != 1)
          v600 = 2;
        v432 |= v600;
      }
      else
      {
        v432 = 0;
      }
      v433 = v423;
      goto LABEL_564;
    case 0x159:
      v453 = *(_QWORD *)(**(_QWORD **)(v10 + 72) + 40);
      if ((v453 & 1) != 0)
        v454 = (v453 >> 1) & 3;
      else
        v454 = *(unsigned __int8 *)(v453 + 4);
      v455 = *v2473;
      if (v454 == 2)
        goto LABEL_594;
      v2020 = *(_DWORD *)(v455 + 12836);
      if (!v2020)
        goto LABEL_594;
      for (i59 = 0; i59 < v2020; ++i59)
      {
        v2022 = v455 + 72 * i59;
        v2023 = *(_QWORD *)(v2022 + 5640);
        if (v2023 == 16422)
        {
LABEL_3172:
          v2027 = v2022 + 5632;
          v2028 = v2020 - 1;
          *(_DWORD *)(v455 + 12836) = v2028;
          v2029 = v455 + 72 * v2028;
          --i59;
          *(_OWORD *)v2027 = *(_OWORD *)(v2029 + 5632);
          v2030 = *(_OWORD *)(v2029 + 5648);
          v2031 = *(_OWORD *)(v2029 + 5664);
          v2032 = *(_OWORD *)(v2029 + 5680);
          *(_QWORD *)(v2027 + 64) = *(_QWORD *)(v2029 + 5696);
          *(_OWORD *)(v2027 + 32) = v2031;
          *(_OWORD *)(v2027 + 48) = v2032;
          *(_OWORD *)(v2027 + 16) = v2030;
          v2020 = *(_DWORD *)(v455 + 12836);
        }
        else
        {
          LOWORD(v2024) = 16422;
          while (1)
          {
            v2025 = v2024 & 0x3FFF;
            if (v2025 == 1)
              break;
            if (v2025 == 2)
              v2026 = 16385;
            else
              v2026 = 16387;
            if (v2025 == 40)
              v2026 = 16385;
            if (v2025 == 3)
              v2024 = 16385;
            else
              v2024 = v2026;
            if (v2024 == v2023)
              goto LABEL_3172;
          }
          while (1)
          {
            v2033 = v2023 & 0x3FFF;
            if (v2033 == 1)
              break;
            if (v2033 == 2)
              v2034 = 16385;
            else
              v2034 = 16387;
            if ((v2023 & 0x4000) != 0)
              v2023 = v2034;
            else
              v2023 = v2033 | 0x4000u;
            if (v2033 == 40)
              v2023 = 16385;
            if (v2033 == 3)
              v2023 = 16385;
            if (v2023 == 16422)
              goto LABEL_3172;
          }
        }
      }
      v455 = *v2473;
LABEL_594:
      v456 = *(_DWORD *)(v455 + 12836);
      if (v456)
      {
        for (i60 = 0; i60 < v456; ++i60)
        {
          v458 = v455 + 72 * i60;
          v459 = *(_QWORD *)(v458 + 5640);
          if (v459 == 16407)
          {
LABEL_619:
            v465 = v458 + 5632;
            v466 = v456 - 1;
            *(_DWORD *)(v455 + 12836) = v466;
            v467 = v455 + 72 * v466;
            --i60;
            *(_OWORD *)v465 = *(_OWORD *)(v467 + 5632);
            v468 = *(_OWORD *)(v467 + 5648);
            v469 = *(_OWORD *)(v467 + 5664);
            v470 = *(_OWORD *)(v467 + 5680);
            *(_QWORD *)(v465 + 64) = *(_QWORD *)(v467 + 5696);
            *(_OWORD *)(v465 + 32) = v469;
            *(_OWORD *)(v465 + 48) = v470;
            *(_OWORD *)(v465 + 16) = v468;
            v456 = *(_DWORD *)(v455 + 12836);
          }
          else
          {
            LOWORD(v460) = 16407;
            while (1)
            {
              v461 = v460 & 0x3FFF;
              if (v461 == 1)
                break;
              if (v461 == 2)
                v462 = 16385;
              else
                v462 = 16387;
              if (v461 == 3)
                v460 = 16385;
              else
                v460 = v462;
              if (v460 == v459)
                goto LABEL_619;
            }
            while (1)
            {
              v463 = v459 & 0x3FFF;
              if (v463 == 1)
                break;
              if (v463 == 2)
                v464 = 16385;
              else
                v464 = 16387;
              if ((v459 & 0x4000) != 0)
                v459 = v464;
              else
                v459 = v463 | 0x4000u;
              if (v463 == 40)
                v459 = 16385;
              if (v463 == 3)
                v459 = 16385;
              if (v459 == 16407)
                goto LABEL_619;
            }
          }
        }
      }
      return;
    case 0x15B:
    case 0x161:
    case 0x162:
      v870 = *v2473;
      v871 = *(_DWORD *)(*v2473 + 12836);
      if (!v871)
        return;
      for (i61 = 0; i61 < v871; ++i61)
      {
        v873 = v870 + 72 * i61;
        v874 = *(_QWORD *)(v873 + 5640);
        if (v874 == 16407)
        {
LABEL_1264:
          v880 = v873 + 5632;
          v881 = v871 - 1;
          *(_DWORD *)(v870 + 12836) = v881;
          v882 = v870 + 72 * v881;
          --i61;
          *(_OWORD *)v880 = *(_OWORD *)(v882 + 5632);
          v883 = *(_OWORD *)(v882 + 5648);
          v884 = *(_OWORD *)(v882 + 5664);
          v885 = *(_OWORD *)(v882 + 5680);
          *(_QWORD *)(v880 + 64) = *(_QWORD *)(v882 + 5696);
          *(_OWORD *)(v880 + 32) = v884;
          *(_OWORD *)(v880 + 48) = v885;
          *(_OWORD *)(v880 + 16) = v883;
          v871 = *(_DWORD *)(v870 + 12836);
        }
        else
        {
          LOWORD(v875) = 16407;
          while (1)
          {
            v876 = v875 & 0x3FFF;
            if (v876 == 1)
              break;
            if (v876 == 2)
              v877 = 16385;
            else
              v877 = 16387;
            if (v876 == 3)
              v875 = 16385;
            else
              v875 = v877;
            if (v875 == v874)
              goto LABEL_1264;
          }
          while (1)
          {
            v878 = v874 & 0x3FFF;
            if (v878 == 1)
              break;
            if (v878 == 2)
              v879 = 16385;
            else
              v879 = 16387;
            if ((v874 & 0x4000) != 0)
              v874 = v879;
            else
              v874 = v878 | 0x4000u;
            if (v878 == 40)
              v874 = 16385;
            if (v878 == 3)
              v874 = 16385;
            if (v874 == 16407)
              goto LABEL_1264;
          }
        }
      }
      return;
    case 0x164:
      v1415 = ((unint64_t)*(unsigned int *)(v10 + 72) << 15) | 0x14;
      v1416 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v2637 = 8;
      v2638 = v1415;
      v2639 = v1416;
      v2640 = 0u;
      v2641 = 0u;
      v107 = *(_QWORD *)v8;
      v108 = &v2637;
      goto LABEL_119;
    case 0x165:
      v2232 = ((unint64_t)*(unsigned int *)(v10 + 72) << 15) | 0x14;
      v2233 = (uint64_t *)v8;
      v2234 = *(_QWORD *)(v10 + 32);
      v2235 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      LODWORD(v2634[0]) = 8;
      v2634[1] = v2232;
      v2634[2] = v2235;
      v2635 = 0u;
      v2636 = 0u;
      JSC::DFG::LazyNode::LazyNode(v2633, (JSC::DFG::Node *)(v2234 & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0x167:
    case 0x168:
    case 0x169:
    case 0x16A:
      v317 = *(_QWORD *)(**(_QWORD **)(v10 + 72) + 112);
      if ((v317 & 1) != 0)
        v318 = (v317 >> 1) & 3;
      else
        v318 = *(unsigned __int8 *)(v317 + 4);
      v319 = *v2473;
      if (v318 == 2)
        goto LABEL_410;
      v724 = *(_DWORD *)(v319 + 12836);
      if (!v724)
        goto LABEL_410;
      for (i62 = 0; i62 < v724; ++i62)
      {
        v726 = v319 + 72 * i62;
        v727 = *(_QWORD *)(v726 + 5640);
        if (v727 == 16422)
        {
LABEL_1016:
          v731 = v726 + 5632;
          v732 = v724 - 1;
          *(_DWORD *)(v319 + 12836) = v732;
          v733 = v319 + 72 * v732;
          --i62;
          *(_OWORD *)v731 = *(_OWORD *)(v733 + 5632);
          v734 = *(_OWORD *)(v733 + 5648);
          v735 = *(_OWORD *)(v733 + 5664);
          v736 = *(_OWORD *)(v733 + 5680);
          *(_QWORD *)(v731 + 64) = *(_QWORD *)(v733 + 5696);
          *(_OWORD *)(v731 + 32) = v735;
          *(_OWORD *)(v731 + 48) = v736;
          *(_OWORD *)(v731 + 16) = v734;
          v724 = *(_DWORD *)(v319 + 12836);
        }
        else
        {
          LOWORD(v728) = 16422;
          while (1)
          {
            v729 = v728 & 0x3FFF;
            if (v729 == 1)
              break;
            if (v729 == 2)
              v730 = 16385;
            else
              v730 = 16387;
            if (v729 == 40)
              v730 = 16385;
            if (v729 == 3)
              v728 = 16385;
            else
              v728 = v730;
            if (v728 == v727)
              goto LABEL_1016;
          }
          while (1)
          {
            v737 = v727 & 0x3FFF;
            if (v737 == 1)
              break;
            if (v737 == 2)
              v738 = 16385;
            else
              v738 = 16387;
            if ((v727 & 0x4000) != 0)
              v727 = v738;
            else
              v727 = v737 | 0x4000u;
            if (v737 == 40)
              v727 = 16385;
            if (v737 == 3)
              v727 = 16385;
            if (v727 == 16422)
              goto LABEL_1016;
          }
        }
      }
      v319 = *v2473;
LABEL_410:
      v320 = *(_DWORD *)(v319 + 12836);
      if (v320)
      {
        for (i63 = 0; i63 < v320; ++i63)
        {
          v322 = v319 + 72 * i63;
          v323 = *(_QWORD *)(v322 + 5640);
          if (v323 == 16407)
          {
LABEL_435:
            v329 = v322 + 5632;
            v330 = v320 - 1;
            *(_DWORD *)(v319 + 12836) = v330;
            v331 = v319 + 72 * v330;
            --i63;
            *(_OWORD *)v329 = *(_OWORD *)(v331 + 5632);
            v332 = *(_OWORD *)(v331 + 5648);
            v333 = *(_OWORD *)(v331 + 5664);
            v334 = *(_OWORD *)(v331 + 5680);
            *(_QWORD *)(v329 + 64) = *(_QWORD *)(v331 + 5696);
            *(_OWORD *)(v329 + 32) = v333;
            *(_OWORD *)(v329 + 48) = v334;
            *(_OWORD *)(v329 + 16) = v332;
            v320 = *(_DWORD *)(v319 + 12836);
          }
          else
          {
            LOWORD(v324) = 16407;
            while (1)
            {
              v325 = v324 & 0x3FFF;
              if (v325 == 1)
                break;
              if (v325 == 2)
                v326 = 16385;
              else
                v326 = 16387;
              if (v325 == 3)
                v324 = 16385;
              else
                v324 = v326;
              if (v324 == v323)
                goto LABEL_435;
            }
            while (1)
            {
              v327 = v323 & 0x3FFF;
              if (v327 == 1)
                break;
              if (v327 == 2)
                v328 = 16385;
              else
                v328 = 16387;
              if ((v323 & 0x4000) != 0)
                v323 = v328;
              else
                v323 = v327 | 0x4000u;
              if (v327 == 40)
                v323 = 16385;
              if (v327 == 3)
                v323 = 16385;
              if (v323 == 16407)
                goto LABEL_435;
            }
          }
        }
      }
      return;
    case 0x16B:
      v1499 = *v2473;
      v1500 = *(_DWORD *)(*v2473 + 12836);
      if (!v1500)
        return;
      for (i64 = 0; i64 < v1500; ++i64)
      {
        v1502 = v1499 + 72 * i64;
        v1503 = *(_QWORD *)(v1502 + 5640);
        if (v1503 == 16407)
        {
LABEL_2277:
          v1509 = v1502 + 5632;
          v1510 = v1500 - 1;
          *(_DWORD *)(v1499 + 12836) = v1510;
          v1511 = v1499 + 72 * v1510;
          --i64;
          *(_OWORD *)v1509 = *(_OWORD *)(v1511 + 5632);
          v1512 = *(_OWORD *)(v1511 + 5648);
          v1513 = *(_OWORD *)(v1511 + 5664);
          v1514 = *(_OWORD *)(v1511 + 5680);
          *(_QWORD *)(v1509 + 64) = *(_QWORD *)(v1511 + 5696);
          *(_OWORD *)(v1509 + 32) = v1513;
          *(_OWORD *)(v1509 + 48) = v1514;
          *(_OWORD *)(v1509 + 16) = v1512;
          v1500 = *(_DWORD *)(v1499 + 12836);
        }
        else
        {
          LOWORD(v1504) = 16407;
          while (1)
          {
            v1505 = v1504 & 0x3FFF;
            if (v1505 == 1)
              break;
            if (v1505 == 2)
              v1506 = 16385;
            else
              v1506 = 16387;
            if (v1505 == 3)
              v1504 = 16385;
            else
              v1504 = v1506;
            if (v1504 == v1503)
              goto LABEL_2277;
          }
          while (1)
          {
            v1507 = v1503 & 0x3FFF;
            if (v1507 == 1)
              break;
            if (v1507 == 2)
              v1508 = 16385;
            else
              v1508 = 16387;
            if ((v1503 & 0x4000) != 0)
              v1503 = v1508;
            else
              v1503 = v1507 | 0x4000u;
            if (v1507 == 40)
              v1503 = 16385;
            if (v1507 == 3)
              v1503 = 16385;
            if (v1503 == 16407)
              goto LABEL_2277;
          }
        }
      }
      return;
    case 0x178:
    case 0x179:
    case 0x17A:
    case 0x17D:
      return;
    case 0x17E:
    case 0x17F:
      return;
    case 0x180:
    case 0x182:
      if ((_DWORD)v12 != 386)
      {
        v472 = 12;
LABEL_628:
        v473 = BYTE2(*(_DWORD *)(v10 + 72));
        if (*(_DWORD *)(v10 + 72) != 9)
        {
          switch(*(_DWORD *)(v10 + 72))
          {
            case 3u:
              return;
            case 7u:
              if (v473 > 1)
                goto LABEL_3648;
              v2352 = *(_QWORD *)(v10 + 24);
              v2353 = *(_DWORD *)(v11 + 164);
              if (v2353 <= v2352)
              {
                __break(0xC471u);
                JUMPOUT(0x19835FF44);
              }
              if (v2353 <= (int)v2352 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19835FF4CLL);
              }
              v2354 = (uint64_t *)v8;
              JSC::DFG::HeapLocation::HeapLocation((uint64_t)v2996, v472, 16400, *(_QWORD *)(*(_QWORD *)(v11 + 152) + 8 * *(_QWORD *)(v10 + 24)), *(_QWORD *)(*(_QWORD *)(v11 + 152) + 8 * (*(_QWORD *)(v10 + 24) + 1)), 0);
              JSC::DFG::LazyNode::LazyNode(v2995, (JSC::DFG::Node *)v10);
              return;
            case 8u:
              if (v473 > 1)
                goto LABEL_3648;
              v1104 = *(_QWORD *)(v10 + 24);
              v1105 = *(_DWORD *)(v11 + 164);
              if (v1105 <= v1104)
              {
                __break(0xC471u);
                JUMPOUT(0x19835FD88);
              }
              v1106 = v1104 + 1;
              if (v1105 <= (int)v1104 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19835FD90);
              }
              v1107 = *(_QWORD *)(v11 + 152);
              v1108 = *(_QWORD *)(v1107 + 8 * *(_QWORD *)(v10 + 24));
              v1109 = *(_QWORD *)(v1107 + 8 * v1106) & 0xFF00FFFFFFFFFFFFLL;
              if (v1109
                && (v2231 = *(unsigned __int16 *)((*(_QWORD *)(v1107 + 8 * v1106) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                    v2231 <= 2))
              {
                v1110 = *(_QWORD *)(v1109 + 72);
                if ((_DWORD)v2231)
                {
                  if ((_DWORD)v2231 != 1)
                    v2231 = 2;
                  v1110 |= v2231;
                }
              }
              else
              {
                v1110 = 0;
              }
              v2988 = v472;
              v2989 = 16401;
              v2990 = v1108 & 0xFF00FFFFFFFFFFFFLL;
              v2991 = v1109;
              v2992 = v1110;
              v2994 = 0;
              v2993 = 0;
              v107 = *(_QWORD *)v8;
              v108 = &v2988;
              goto LABEL_119;
            case 0xAu:
              if (v473 >= 2)
                goto LABEL_3648;
              return;
            default:
              goto LABEL_3648;
          }
        }
        if (v473 <= 1)
        {
          v474 = *(_QWORD *)(v10 + 24);
          v475 = *(_DWORD *)(v11 + 164);
          if (v475 <= v474)
          {
            __break(0xC471u);
            JUMPOUT(0x19835FC38);
          }
          v476 = v474 + 1;
          if (v475 <= (int)v474 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19835FC40);
          }
          v477 = *(_QWORD *)(v11 + 152);
          v478 = *(_QWORD *)(v477 + 8 * *(_QWORD *)(v10 + 24));
          v479 = *(_QWORD *)(v477 + 8 * v476) & 0xFF00FFFFFFFFFFFFLL;
          if (v479)
          {
            v911 = *(unsigned __int16 *)((*(_QWORD *)(v477 + 8 * v476) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
            if (v911 <= 2)
            {
              v480 = *(_QWORD *)(v479 + 72);
              if ((_DWORD)v911)
              {
                if ((_DWORD)v911 != 1)
                  v911 = 2;
                v480 |= v911;
              }
            }
            else
            {
              v480 = 0;
            }
          }
          else
          {
            v480 = 0;
          }
          v2981 = v472;
          v2982 = 16402;
          v2983 = v478 & 0xFF00FFFFFFFFFFFFLL;
          v2984 = v479;
          v2985 = v480;
          v2987 = 0;
          v2986 = 0;
          v107 = *(_QWORD *)v8;
          v108 = &v2981;
          goto LABEL_119;
        }
LABEL_3648:
        v2292 = *v2473;
        v2293 = *(_DWORD *)(*v2473 + 12836);
        if (!v2293)
          return;
        v2294 = 0;
        while (1)
        {
          v2295 = v2292 + 72 * v2294;
          v2296 = *(_QWORD *)(v2295 + 5640);
          if (v2296 != 16387)
            break;
LABEL_3660:
          v2300 = v2295 + 5632;
          v2301 = v2293 - 1;
          *(_DWORD *)(v2292 + 12836) = v2301;
          v2302 = v2292 + 72 * v2301;
          --v2294;
          *(_OWORD *)v2300 = *(_OWORD *)(v2302 + 5632);
          v2303 = *(_OWORD *)(v2302 + 5648);
          v2304 = *(_OWORD *)(v2302 + 5664);
          v2305 = *(_OWORD *)(v2302 + 5680);
          *(_QWORD *)(v2300 + 64) = *(_QWORD *)(v2302 + 5696);
          *(_OWORD *)(v2300 + 32) = v2304;
          *(_OWORD *)(v2300 + 48) = v2305;
          *(_OWORD *)(v2300 + 16) = v2303;
          v2293 = *(_DWORD *)(v2292 + 12836);
LABEL_3661:
          if (++v2294 >= v2293)
            return;
        }
        LOWORD(v2297) = 16387;
        while (1)
        {
          v2298 = v2297 & 0x3FFF;
          if (v2298 == 1)
            break;
          if (v2298 == 2)
            v2299 = 16385;
          else
            v2299 = 16387;
          if (v2298 == 3)
            v2297 = 16385;
          else
            v2297 = v2299;
          if (v2297 == v2296)
            goto LABEL_3660;
        }
        while (1)
        {
          v2307 = v2296 & 0x3FFF;
          if (v2307 == 1)
            goto LABEL_3661;
          if (v2307 == 3)
            goto LABEL_3669;
          v2306 = 16385;
          if (v2307 != 40)
          {
            if ((v2296 & 0x4000) != 0)
            {
              if (v2307 != 2)
                goto LABEL_3660;
LABEL_3669:
              v2306 = 16385;
              goto LABEL_3670;
            }
            v2306 = v2307 | 0x4000u;
          }
LABEL_3670:
          LOWORD(v2296) = v2306;
          if (v2306 == 16387)
            goto LABEL_3660;
        }
      }
      v668 = *(unsigned __int8 *)(v10 + 80);
      if (v668 == 2)
      {
        if (*(_DWORD *)(v11 + 164) <= *(_QWORD *)(v10 + 24))
        {
          __break(0xC471u);
          JUMPOUT(0x19835FC48);
        }
        if ((*(_QWORD *)(*(_QWORD *)(v11 + 152) + 8 * *(_QWORD *)(v10 + 24)) & 0xFC000000000000) == 0x20000000000000)
          return;
      }
      else if (v668 == 1)
      {
        v472 = 11;
        goto LABEL_628;
      }
      v1130 = *v2473;
      v1131 = *(_DWORD *)(*v2473 + 12836);
      if (!v1131)
        return;
      v1132 = 0;
      while (1)
      {
        v1133 = v1130 + 72 * v1132;
        v1134 = *(_QWORD *)(v1133 + 5640);
        if (v1134 != 16387)
          break;
LABEL_1674:
        v1138 = v1133 + 5632;
        v1139 = v1131 - 1;
        *(_DWORD *)(v1130 + 12836) = v1139;
        v1140 = v1130 + 72 * v1139;
        --v1132;
        *(_OWORD *)v1138 = *(_OWORD *)(v1140 + 5632);
        v1141 = *(_OWORD *)(v1140 + 5648);
        v1142 = *(_OWORD *)(v1140 + 5664);
        v1143 = *(_OWORD *)(v1140 + 5680);
        *(_QWORD *)(v1138 + 64) = *(_QWORD *)(v1140 + 5696);
        *(_OWORD *)(v1138 + 32) = v1142;
        *(_OWORD *)(v1138 + 48) = v1143;
        *(_OWORD *)(v1138 + 16) = v1141;
        v1131 = *(_DWORD *)(v1130 + 12836);
LABEL_1675:
        if (++v1132 >= v1131)
          return;
      }
      LOWORD(v1135) = 16387;
      while (1)
      {
        v1136 = v1135 & 0x3FFF;
        if (v1136 == 1)
          break;
        if (v1136 == 2)
          v1137 = 16385;
        else
          v1137 = 16387;
        if (v1136 == 3)
          v1135 = 16385;
        else
          v1135 = v1137;
        if (v1135 == v1134)
          goto LABEL_1674;
      }
      while (1)
      {
        v1145 = v1134 & 0x3FFF;
        if (v1145 == 1)
          goto LABEL_1675;
        if (v1145 == 3)
          goto LABEL_1683;
        v1144 = 16385;
        if (v1145 != 40)
        {
          if ((v1134 & 0x4000) != 0)
          {
            if (v1145 != 2)
              goto LABEL_1674;
LABEL_1683:
            v1144 = 16385;
            goto LABEL_1684;
          }
          v1144 = v1145 | 0x4000u;
        }
LABEL_1684:
        LOWORD(v1134) = v1144;
        if (v1144 == 16387)
          goto LABEL_1674;
      }
    case 0x183:
      v666 = *(unsigned __int8 *)(v10 + 80);
      v3002 = 387;
      v667 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v3003 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v3004 = v667;
      v3005 = v666;
      v3006 = 0;
      v110 = *(_QWORD *)v8;
      v111 = &v3002;
      goto LABEL_121;
    case 0x184:
      v633 = *v2473;
      v634 = *(_DWORD *)(*v2473 + 12836);
      if (!v634)
        return;
      v635 = 0;
      while (1)
      {
        v636 = v633 + 72 * v635;
        v637 = *(_QWORD *)(v636 + 5640);
        if (v637 != 16387)
          break;
LABEL_880:
        v641 = v636 + 5632;
        v642 = v634 - 1;
        *(_DWORD *)(v633 + 12836) = v642;
        v643 = v633 + 72 * v642;
        --v635;
        *(_OWORD *)v641 = *(_OWORD *)(v643 + 5632);
        v644 = *(_OWORD *)(v643 + 5648);
        v645 = *(_OWORD *)(v643 + 5664);
        v646 = *(_OWORD *)(v643 + 5680);
        *(_QWORD *)(v641 + 64) = *(_QWORD *)(v643 + 5696);
        *(_OWORD *)(v641 + 32) = v645;
        *(_OWORD *)(v641 + 48) = v646;
        *(_OWORD *)(v641 + 16) = v644;
        v634 = *(_DWORD *)(v633 + 12836);
LABEL_881:
        if (++v635 >= v634)
          return;
      }
      LOWORD(v638) = 16387;
      while (1)
      {
        v639 = v638 & 0x3FFF;
        if (v639 == 1)
          break;
        if (v639 == 2)
          v640 = 16385;
        else
          v640 = 16387;
        if (v639 == 3)
          v638 = 16385;
        else
          v638 = v640;
        if (v638 == v637)
          goto LABEL_880;
      }
      while (1)
      {
        v648 = v637 & 0x3FFF;
        if (v648 == 1)
          goto LABEL_881;
        if (v648 == 3)
          goto LABEL_889;
        v647 = 16385;
        if (v648 != 40)
        {
          if ((v637 & 0x4000) != 0)
          {
            if (v648 != 2)
              goto LABEL_880;
LABEL_889:
            v647 = 16385;
            goto LABEL_890;
          }
          v647 = v648 | 0x4000u;
        }
LABEL_890:
        LOWORD(v637) = v647;
        if (v647 == 16387)
          goto LABEL_880;
      }
    case 0x187:
      v1010 = *v2473;
      v1011 = *(_DWORD *)(*v2473 + 12836);
      if (!v1011)
        return;
      v1012 = 0;
      while (1)
      {
        v1013 = v1010 + 72 * v1012;
        v1014 = *(_QWORD *)(v1013 + 5640);
        if (v1014 != 16387)
          break;
LABEL_1467:
        v1018 = v1013 + 5632;
        v1019 = v1011 - 1;
        *(_DWORD *)(v1010 + 12836) = v1019;
        v1020 = v1010 + 72 * v1019;
        --v1012;
        *(_OWORD *)v1018 = *(_OWORD *)(v1020 + 5632);
        v1021 = *(_OWORD *)(v1020 + 5648);
        v1022 = *(_OWORD *)(v1020 + 5664);
        v1023 = *(_OWORD *)(v1020 + 5680);
        *(_QWORD *)(v1018 + 64) = *(_QWORD *)(v1020 + 5696);
        *(_OWORD *)(v1018 + 32) = v1022;
        *(_OWORD *)(v1018 + 48) = v1023;
        *(_OWORD *)(v1018 + 16) = v1021;
        v1011 = *(_DWORD *)(v1010 + 12836);
LABEL_1468:
        if (++v1012 >= v1011)
          return;
      }
      LOWORD(v1015) = 16387;
      while (1)
      {
        v1016 = v1015 & 0x3FFF;
        if (v1016 == 1)
          break;
        if (v1016 == 2)
          v1017 = 16385;
        else
          v1017 = 16387;
        if (v1016 == 3)
          v1015 = 16385;
        else
          v1015 = v1017;
        if (v1015 == v1014)
          goto LABEL_1467;
      }
      while (1)
      {
        v1025 = v1014 & 0x3FFF;
        if (v1025 == 1)
          goto LABEL_1468;
        if (v1025 == 3)
          goto LABEL_1476;
        v1024 = 16385;
        if (v1025 != 40)
        {
          if ((v1014 & 0x4000) != 0)
          {
            if (v1025 != 2)
              goto LABEL_1467;
LABEL_1476:
            v1024 = 16385;
            goto LABEL_1477;
          }
          v1024 = v1025 | 0x4000u;
        }
LABEL_1477:
        LOWORD(v1014) = v1024;
        if (v1024 == 16387)
          goto LABEL_1467;
      }
    case 0x188:
      v2580 = 392;
      v599 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v2581 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v2584 = 0;
      v2582 = v599;
      v2583 = 0;
      return;
    case 0x189:
      v2575 = 393;
      v939 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v2576 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v2579 = 0;
      v2577 = v939;
      v2578 = 0;
      return;
    case 0x18A:
      v740 = *(_QWORD *)(v10 + 24);
      v741 = 16411;
      if ((v740 & 0xFC000000000000) != 0x78000000000000)
        v741 = 16412;
      v742 = *(_QWORD *)(v10 + 40);
      v743 = *(_QWORD *)(v10 + 32) & 0xFF00FFFFFFFFFFFFLL;
      if (v743
        && (v986 = *(unsigned __int16 *)((*(_QWORD *)(v10 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12), v986 <= 2))
      {
        v744 = *(_QWORD *)((*(_QWORD *)(v10 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        if (*(_WORD *)((*(_QWORD *)(v10 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
        {
          if ((_DWORD)v986 != 1)
            v986 = 2;
          v744 |= v986;
        }
      }
      else
      {
        v744 = 0;
      }
      v2568 = 52;
      v2569 = v741;
      v2570 = v740 & 0xFF00FFFFFFFFFFFFLL;
      v2571 = v743;
      v2572 = v744;
      v2573 = v742 & 0xFF00FFFFFFFFFFFFLL;
      v2574 = 0;
      v107 = *(_QWORD *)v8;
      v108 = &v2568;
      goto LABEL_119;
    case 0x18B:
      v841 = *(_QWORD *)(v10 + 24);
      v842 = *(_QWORD *)(v10 + 32) & 0xFF00FFFFFFFFFFFFLL;
      if (v842
        && (v1082 = *(unsigned __int16 *)((*(_QWORD *)(v10 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
            v1082 <= 2))
      {
        v843 = *(_QWORD *)((*(_QWORD *)(v10 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        if (*(_WORD *)((*(_QWORD *)(v10 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
        {
          if ((_DWORD)v1082 != 1)
            v1082 = 2;
          v843 |= v1082;
        }
      }
      else
      {
        v843 = 0;
      }
      v2561 = 54;
      v2562 = 16411;
      v2563 = v841 & 0xFF00FFFFFFFFFFFFLL;
      v2564 = v842;
      v2565 = v843;
      v2567 = 0;
      v2566 = 0;
      v107 = *(_QWORD *)v8;
      v108 = &v2561;
      goto LABEL_119;
    case 0x18C:
      v1392 = (uint64_t *)v8;
      if ((*(_QWORD *)(v10 + 24) & 0xFC000000000000) == 0x80000000000000)
        v1393 = 16413;
      else
        v1393 = 16414;
      v1394 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v2556 = 44;
      v2557 = v1393;
      v2558 = v1394;
      v2559 = 0u;
      v2560 = 0u;
      v1395 = *(unsigned __int16 *)(v10 + 18);
      if (v1395 <= 2)
      {
        v625 = *(_QWORD *)(v10 + 72);
        if (*(_WORD *)(v10 + 18))
        {
          if ((_DWORD)v1395 != 1)
            v1395 = 2;
          v625 |= v1395;
        }
      }
      else
      {
        v625 = 0;
      }
      v626 = *v1392;
      v627 = &v2556;
      goto LABEL_862;
    case 0x18D:
      v1310 = *(_QWORD *)(v10 + 24);
      v1311 = 16413;
      if ((v1310 & 0xFC000000000000) != 0x80000000000000)
        v1311 = 16414;
      v2551 = 45;
      v2552 = v1311;
      v2553 = v1310 & 0xFF00FFFFFFFFFFFFLL;
      v2554 = 0u;
      v2555 = 0u;
      v107 = *(_QWORD *)v8;
      v108 = &v2551;
      goto LABEL_119;
    case 0x18E:
      v2129 = *(_QWORD *)(v10 + 24);
      v2130 = 16413;
      if ((v2129 & 0xFC000000000000) != 0x80000000000000)
        v2130 = 16414;
      v2546 = 46;
      v2547 = v2130;
      v2548 = v2129 & 0xFF00FFFFFFFFFFFFLL;
      v2549 = 0u;
      v2550 = 0u;
      v107 = *(_QWORD *)v8;
      v108 = &v2546;
      goto LABEL_119;
    case 0x18F:
      v1550 = *(_QWORD *)(v10 + 24);
      v1551 = 16411;
      if ((v1550 & 0xFC000000000000) != 0x78000000000000)
        v1551 = 16412;
      v2541 = 47;
      v2542 = v1551;
      v2543 = v1550 & 0xFF00FFFFFFFFFFFFLL;
      v2544 = 0u;
      v2545 = 0u;
      v107 = *(_QWORD *)v8;
      v108 = &v2541;
      goto LABEL_119;
    case 0x190:
      if (*(_DWORD *)(v10 + 72))
        v2276 = 16412;
      else
        v2276 = 16411;
      v2277 = (uint64_t *)v8;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v2540, 48, v2276, *(_QWORD *)(v10 + 24), *(_QWORD *)(v10 + 32), 0);
      JSC::DFG::LazyNode::LazyNode(v2539, (JSC::DFG::Node *)v10);
      return;
    case 0x191:
      v2327 = 16411;
      if (*(_DWORD *)(v10 + 72))
        v2327 = 16412;
      v2328 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      LODWORD(v2536[0]) = 49;
      v2536[1] = v2327;
      v2536[2] = v2328;
      v2537 = 0u;
      v2538 = 0u;
      v2329 = (uint64_t *)v8;
      JSC::DFG::LazyNode::LazyNode(v2535, (JSC::DFG::Node *)v10);
      return;
    case 0x192:
      v2320 = 16411;
      if (*(_DWORD *)(v10 + 72))
        v2320 = 16412;
      v2321 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      LODWORD(v2532[0]) = 50;
      v2532[1] = v2320;
      v2532[2] = v2321;
      v2533 = 0u;
      v2534 = 0u;
      v2322 = (uint64_t *)v8;
      JSC::DFG::LazyNode::LazyNode(v2531, (JSC::DFG::Node *)v10);
      return;
    case 0x193:
      v2335 = 16411;
      if (*(_DWORD *)(v10 + 72))
        v2335 = 16412;
      v2336 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      LODWORD(v2528[0]) = 51;
      v2528[1] = v2335;
      v2528[2] = v2336;
      v2529 = 0u;
      v2530 = 0u;
      v2337 = (uint64_t *)v8;
      JSC::DFG::LazyNode::LazyNode(v2527, (JSC::DFG::Node *)v10);
      return;
    case 0x194:
      v1083 = *v2473;
      v1084 = *(_DWORD *)(*v2473 + 12836);
      if (!v1084)
        goto LABEL_1616;
      for (i65 = 0; i65 < v1084; ++i65)
      {
        v1086 = v1083 + 72 * i65;
        v1087 = *(_QWORD *)(v1086 + 5640);
        if (v1087 == 16412)
        {
LABEL_1614:
          v1093 = v1086 + 5632;
          v1094 = v1084 - 1;
          *(_DWORD *)(v1083 + 12836) = v1094;
          v1095 = v1083 + 72 * v1094;
          --i65;
          *(_OWORD *)v1093 = *(_OWORD *)(v1095 + 5632);
          v1096 = *(_OWORD *)(v1095 + 5648);
          v1097 = *(_OWORD *)(v1095 + 5664);
          v1098 = *(_OWORD *)(v1095 + 5680);
          *(_QWORD *)(v1093 + 64) = *(_QWORD *)(v1095 + 5696);
          *(_OWORD *)(v1093 + 32) = v1097;
          *(_OWORD *)(v1093 + 48) = v1098;
          *(_OWORD *)(v1093 + 16) = v1096;
          v1084 = *(_DWORD *)(v1083 + 12836);
        }
        else
        {
          LOWORD(v1088) = 16412;
          while (1)
          {
            v1089 = v1088 & 0x3FFF;
            if (v1089 == 1)
              break;
            if (v1089 == 2)
              v1090 = 16385;
            else
              v1090 = 16387;
            if (v1089 == 3)
              v1088 = 16385;
            else
              v1088 = v1090;
            if (v1088 == v1087)
              goto LABEL_1614;
          }
          while (1)
          {
            v1091 = v1087 & 0x3FFF;
            if (v1091 == 1)
              break;
            if (v1091 == 2)
              v1092 = 16385;
            else
              v1092 = 16387;
            if ((v1087 & 0x4000) != 0)
              v1087 = v1092;
            else
              v1087 = v1091 | 0x4000u;
            if (v1091 == 40)
              v1087 = 16385;
            if (v1091 == 3)
              v1087 = 16385;
            if (v1087 == 16412)
              goto LABEL_1614;
          }
        }
      }
LABEL_1616:
      v1099 = *(_QWORD *)(v10 + 24);
      v1100 = *(_QWORD *)(v10 + 32) & 0xFF00FFFFFFFFFFFFLL;
      if (v1100
        && (v1548 = *(unsigned __int16 *)((*(_QWORD *)(v10 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
            v1548 <= 2))
      {
        v1101 = *(_QWORD *)((*(_QWORD *)(v10 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        if (*(_WORD *)((*(_QWORD *)(v10 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
        {
          if ((_DWORD)v1548 != 1)
            v1548 = 2;
          v1101 |= v1548;
        }
      }
      else
      {
        v1101 = 0;
      }
      v625 = 0;
      v2513 = 53;
      v2514 = 16412;
      v2515 = v1099 & 0xFF00FFFFFFFFFFFFLL;
      v2516 = v1100;
      v2517 = v1101;
      v2519 = 0;
      v2518 = 0;
      v1102 = *(unsigned __int16 *)(v10 + 18);
      if (v1102 <= 2)
      {
        v625 = *(_QWORD *)(v10 + 72);
        if (*(_WORD *)(v10 + 18))
        {
          if ((_DWORD)v1102 != 1)
            v1102 = 2;
          v625 |= v1102;
        }
      }
      v626 = *(_QWORD *)v8;
      v627 = &v2513;
      goto LABEL_862;
    case 0x195:
      v987 = *(_QWORD *)(v10 + 24);
      v988 = *(_DWORD *)(v11 + 164);
      if (v988 <= v987)
      {
        __break(0xC471u);
        JUMPOUT(0x19835FCE0);
      }
      v989 = (v987 + 1);
      if (v988 <= v989)
      {
        __break(0xC471u);
        JUMPOUT(0x19835FCE8);
      }
      v990 = *(_QWORD *)(v10 + 24);
      v991 = *(_QWORD *)(v11 + 152);
      v992 = *v2473;
      v993 = *(_DWORD *)(*v2473 + 12836);
      if (!v993)
        goto LABEL_1449;
      for (i66 = 0; i66 < v993; ++i66)
      {
        v995 = v992 + 72 * i66;
        v996 = *(_QWORD *)(v995 + 5640);
        if (v996 == 16411)
        {
LABEL_1447:
          v1000 = v995 + 5632;
          v1001 = v993 - 1;
          *(_DWORD *)(v992 + 12836) = v1001;
          v1002 = v992 + 72 * v1001;
          --i66;
          *(_OWORD *)v1000 = *(_OWORD *)(v1002 + 5632);
          v1003 = *(_OWORD *)(v1002 + 5648);
          v1004 = *(_OWORD *)(v1002 + 5664);
          v1005 = *(_OWORD *)(v1002 + 5680);
          *(_QWORD *)(v1000 + 64) = *(_QWORD *)(v1002 + 5696);
          *(_OWORD *)(v1000 + 32) = v1004;
          *(_OWORD *)(v1000 + 48) = v1005;
          *(_OWORD *)(v1000 + 16) = v1003;
          v993 = *(_DWORD *)(v992 + 12836);
        }
        else
        {
          LOWORD(v997) = 16411;
          while (1)
          {
            v998 = v997 & 0x3FFF;
            if (v998 == 1)
              break;
            if (v998 == 2)
              v5 = 16385;
            else
              v5 = 16387;
            if (v998 == 3)
              v997 = 16385;
            else
              v997 = v5;
            if (v997 == v996)
              goto LABEL_1447;
          }
          while (1)
          {
            v999 = v996 & 0x3FFF;
            if (v999 == 1)
              break;
            v5 = v999 | 0x4000u;
            if (v999 == 2)
              v6 = 16385;
            else
              v6 = 16387;
            if ((v996 & 0x4000) != 0)
              v996 = v6;
            else
              v996 = v999 | 0x4000u;
            if (v999 == 40)
              v996 = 16385;
            if (v999 == 3)
              v996 = 16385;
            if (v996 == 16411)
              goto LABEL_1447;
          }
        }
      }
LABEL_1449:
      v1006 = *(_QWORD *)(v991 + 8 * v990);
      v1007 = *(_QWORD *)(v991 + 8 * v989) & 0xFF00FFFFFFFFFFFFLL;
      if (v1007 && (v1396 = *(unsigned __int16 *)(v1007 + 18), v1396 <= 2))
      {
        v1008 = *(_QWORD *)(v1007 + 72);
        if (*(_WORD *)(v1007 + 18))
        {
          if ((_DWORD)v1396 != 1)
            v1396 = 2;
          v1008 |= v1396;
        }
      }
      else
      {
        v1008 = 0;
      }
      v625 = 0;
      v2506 = 53;
      v2507 = 16411;
      v2508 = v1006 & 0xFF00FFFFFFFFFFFFLL;
      v2509 = v1007;
      v2510 = v1008;
      v2512 = 0;
      v2511 = 0;
      v1009 = *(unsigned __int16 *)(v10 + 18);
      if (v1009 <= 2)
      {
        v625 = *(_QWORD *)(v10 + 72);
        if (*(_WORD *)(v10 + 18))
        {
          if ((_DWORD)v1009 != 1)
            v1009 = 2;
          v625 |= v1009;
        }
      }
      v626 = *(_QWORD *)v8;
      v627 = &v2506;
      goto LABEL_862;
    case 0x196:
      if ((*(_QWORD *)(v10 + 24) & 0xFC000000000000) == 0x78000000000000)
        v215 = 16411;
      else
        v215 = 16412;
      goto LABEL_2066;
    case 0x197:
      v1262 = *(_QWORD *)(v10 + 24);
      v1263 = 16415;
      if ((v1262 & 0xFC000000000000) != 0x88000000000000)
        v1263 = 16416;
      v1264 = *(_QWORD *)(v10 + 32) & 0xFF00FFFFFFFFFFFFLL;
      if (v1264
        && (v2131 = *(unsigned __int16 *)((*(_QWORD *)(v10 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
            v2131 <= 2))
      {
        v1265 = *(_QWORD *)((*(_QWORD *)(v10 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        if (*(_WORD *)((*(_QWORD *)(v10 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
        {
          if ((_DWORD)v2131 != 1)
            v2131 = 2;
          v1265 |= v2131;
        }
      }
      else
      {
        v1265 = 0;
      }
      v2520 = 55;
      v2521 = v1263;
      v2522 = v1262 & 0xFF00FFFFFFFFFFFFLL;
      v2523 = v1264;
      v2524 = v1265;
      v2526 = 0;
      v2525 = 0;
      v107 = *(_QWORD *)v8;
      v108 = &v2520;
      goto LABEL_119;
    case 0x198:
      v2432 = (uint64_t *)v8;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v2505, 55, 16416, *(_QWORD *)(v10 + 24), *(_QWORD *)(v10 + 32), 0);
      JSC::DFG::LazyNode::LazyNode(v2504, (JSC::DFG::Node *)(*(_QWORD *)(v10 + 32) & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0x199:
      v1214 = *(_QWORD *)(v10 + 24);
      v1215 = *(_DWORD *)(v11 + 164);
      if (v1215 <= v1214)
      {
        __break(0xC471u);
        JUMPOUT(0x19835FCF8);
      }
      v1216 = (v1214 + 1);
      if (v1215 <= v1216)
      {
        __break(0xC471u);
        JUMPOUT(0x19835FD00);
      }
      v1217 = (v1214 + 2);
      if (v1215 <= v1217)
      {
        __break(0xC471u);
        JUMPOUT(0x19835FD08);
      }
      v1218 = (uint64_t *)v8;
      v1219 = *(_QWORD *)(v10 + 24);
      v1220 = *(_QWORD *)(v11 + 152);
      v1221 = *v2473;
      v1222 = *(_DWORD *)(*v2473 + 12836);
      if (!v1222)
        goto LABEL_1830;
      for (i67 = 0; i67 < v1222; ++i67)
      {
        v1224 = v1221 + 72 * i67;
        v1225 = *(_QWORD *)(v1224 + 5640);
        if (v1225 == 16415)
        {
LABEL_1828:
          v1227 = v1224 + 5632;
          v1228 = v1222 - 1;
          *(_DWORD *)(v1221 + 12836) = v1228;
          v1229 = v1221 + 72 * v1228;
          --i67;
          *(_OWORD *)v1227 = *(_OWORD *)(v1229 + 5632);
          v1230 = *(_OWORD *)(v1229 + 5648);
          v1231 = *(_OWORD *)(v1229 + 5664);
          v1232 = *(_OWORD *)(v1229 + 5680);
          *(_QWORD *)(v1227 + 64) = *(_QWORD *)(v1229 + 5696);
          *(_OWORD *)(v1227 + 32) = v1231;
          *(_OWORD *)(v1227 + 48) = v1232;
          *(_OWORD *)(v1227 + 16) = v1230;
          v1222 = *(_DWORD *)(v1221 + 12836);
        }
        else
        {
          LOWORD(v5) = 16415;
          while (1)
          {
            v1226 = v5 & 0x3FFF;
            if (v1226 == 1)
              break;
            if (v1226 == 2)
              v6 = 16385;
            else
              v6 = 16387;
            if (v1226 == 3)
              v5 = 16385;
            else
              v5 = v6;
            if (v5 == v1225)
              goto LABEL_1828;
          }
          while (1)
          {
            v5 = v1225 & 0x3FFF;
            if ((_DWORD)v5 == 1)
              break;
            v6 = v5 | 0x4000;
            if ((_DWORD)v5 == 2)
              v8 = 16385;
            else
              v8 = 16387;
            if ((v1225 & 0x4000) != 0)
              v1225 = v8;
            else
              v1225 = v5 | 0x4000;
            if ((_DWORD)v5 == 40)
              v1225 = 16385;
            if ((_DWORD)v5 == 3)
              v1225 = 16385;
            if (v1225 == 16415)
              goto LABEL_1828;
          }
        }
      }
LABEL_1830:
      v1233 = *(_QWORD *)(v1220 + 8 * v1219);
      v1234 = *(_QWORD *)(v1220 + 8 * v1216) & 0xFF00FFFFFFFFFFFFLL;
      if (v1234 && (v2127 = *(unsigned __int16 *)(v1234 + 18), v2127 <= 2))
      {
        v1235 = *(_QWORD *)(v1234 + 72);
        if (*(_WORD *)(v1234 + 18))
        {
          if ((_DWORD)v2127 != 1)
            v2127 = 2;
          v1235 |= v2127;
        }
      }
      else
      {
        v1235 = 0;
      }
      v1236 = 0;
      LODWORD(v2503[0]) = 55;
      v2503[1] = 16415;
      v2503[2] = v1233 & 0xFF00FFFFFFFFFFFFLL;
      v2503[3] = v1234;
      v2503[4] = v1235;
      v2503[5] = 0;
      v2503[6] = 0;
      v1237 = *(_QWORD *)(v1220 + 8 * v1217);
      v1238 = v1237 & 0xFF00FFFFFFFFFFFFLL;
      if ((v1237 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v2128 = *(unsigned __int16 *)((v1237 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
        if (v2128 <= 2)
        {
          v1236 = *(_QWORD *)(v1238 + 72);
          if ((_DWORD)v2128)
          {
            if ((_DWORD)v2128 != 1)
              v2128 = 2;
            v1236 |= v2128;
          }
        }
        else
        {
          v1236 = 0;
        }
      }
      return;
    case 0x19A:
      v2498 = 410;
      v1266 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v2499 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v2501 = 0;
      v2502 = 0;
      v2500 = v1266;
      return;
    case 0x19C:
    case 0x19D:
      v2493 = *(_WORD *)(v10 + 18);
      v723 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v2494 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v2496 = 0;
      v2497 = 0;
      v2495 = v723;
      return;
    case 0x19E:
      v3063 = 414;
      v2308 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v3064 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v3067 = 0;
      v3065 = v2308;
      v3066 = 0;
      v110 = *(_QWORD *)v8;
      v111 = &v3063;
      goto LABEL_121;
    case 0x19F:
      v2488 = 415;
      v964 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v2489 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v2491 = 0;
      v2492 = 0;
      v2490 = v964;
      return;
    case 0x1A0:
      v436 = *(_QWORD *)(*(_QWORD *)(v10 + 72) + 16);
      if (!v436)
      {
        v437 = *v2473;
        v438 = *(_DWORD *)(*v2473 + 12836);
        if (!v438)
          return;
        v439 = 0;
        while (1)
        {
          v440 = v437 + 72 * v439;
          v441 = *(_QWORD *)(v440 + 5640);
          if (v441 != 16387)
            break;
LABEL_579:
          v445 = v440 + 5632;
          v446 = v438 - 1;
          *(_DWORD *)(v437 + 12836) = v446;
          v447 = v437 + 72 * v446;
          --v439;
          *(_OWORD *)v445 = *(_OWORD *)(v447 + 5632);
          v448 = *(_OWORD *)(v447 + 5648);
          v449 = *(_OWORD *)(v447 + 5664);
          v450 = *(_OWORD *)(v447 + 5680);
          *(_QWORD *)(v445 + 64) = *(_QWORD *)(v447 + 5696);
          *(_OWORD *)(v445 + 32) = v449;
          *(_OWORD *)(v445 + 48) = v450;
          *(_OWORD *)(v445 + 16) = v448;
          v438 = *(_DWORD *)(v437 + 12836);
LABEL_580:
          if (++v439 >= v438)
            return;
        }
        LOWORD(v442) = 16387;
        while (1)
        {
          v443 = v442 & 0x3FFF;
          if (v443 == 1)
            break;
          if (v443 == 2)
            v444 = 16385;
          else
            v444 = 16387;
          if (v443 == 3)
            v442 = 16385;
          else
            v442 = v444;
          if (v442 == v441)
            goto LABEL_579;
        }
        while (1)
        {
          v452 = v441 & 0x3FFF;
          if (v452 == 1)
            goto LABEL_580;
          if (v452 == 3)
            goto LABEL_588;
          v451 = 16385;
          if (v452 != 40)
          {
            if ((v441 & 0x4000) != 0)
            {
              if (v452 != 2)
                goto LABEL_579;
LABEL_588:
              v451 = 16385;
              goto LABEL_589;
            }
            v451 = v452 | 0x4000u;
          }
LABEL_589:
          LOWORD(v441) = v451;
          if (v451 == 16387)
            goto LABEL_579;
        }
      }
      v618 = *(unsigned int *)(v436 + 24);
      v619 = *(_DWORD *)(v436 + 28);
      v620 = (unsigned __int16)*(_DWORD *)(v436 + 24);
      if (v620 != WORD1(v618))
      {
        v2382 = WORD1(v618) == 0xFFFF && v620 == 0;
        v2383 = (v618 << 15) | 0x25;
        if (v2382)
          v2384 = 16387;
        else
          v2384 = v2383;
        v2385 = v8;
        v8 = v2385;
      }
      if ((_WORD)v619)
      {
        v621 = HIWORD(v619);
        v622 = *(unsigned __int16 *)(v10 + 18);
        if ((unsigned __int16)v619 == 0xFFFF && v621 == 0xFFFF)
        {
          v937 = **(_QWORD **)(v10 + 72);
          v2756 = *(_WORD *)(v10 + 18);
          v938 = *(_QWORD *)(v10 + 40) & 0xFFFCFFFFFFFFFFFFLL;
          v2757 = vandq_s8(*(int8x16_t *)(v10 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
          v2758 = v938;
          v2759 = v937;
          v2760 = 0;
          return;
        }
      }
      else
      {
        if (v619 > 0xFFFEFFFF)
          return;
        v621 = HIWORD(v619);
        v622 = *(unsigned __int16 *)(v10 + 18);
      }
      v624 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v2751 = 57;
      v2752 = ((unint64_t)((unsigned __int16)v619 | ((unsigned __int16)v621 << 16)) << 15) | 0x25;
      v2753 = v624;
      v2754 = 0u;
      v2755 = 0u;
      if (v622 <= 2)
      {
        v625 = *(_QWORD *)(v10 + 72);
        if (v622)
        {
          if (v622 == 1)
            v963 = 1;
          else
            v963 = 2;
          v625 |= v963;
        }
      }
      else
      {
        v625 = 0;
      }
      v626 = *(_QWORD *)v8;
      v627 = &v2751;
LABEL_862:
      return;
    case 0x1A1:
      v1417 = *(unsigned int *)(*(_QWORD *)(v10 + 72) + 48);
      if ((unsigned __int16)*(_DWORD *)(*(_QWORD *)(v10 + 72) + 48) == WORD1(v1417))
        return;
      if (!(unsigned __int16)*(_DWORD *)(*(_QWORD *)(v10 + 72) + 48) && WORD1(v1417) == 0xFFFF)
        goto LABEL_3556;
      v1418 = 37;
LABEL_3791:
      v215 = v1418 | (v1417 << 15);
LABEL_2066:
      v214 = *v2473;
      goto LABEL_2067;
    case 0x1AB:
    case 0x1AC:
      if ((*(_BYTE *)(v10 + 74) & 1) == 0)
      {
        v2342 = (uint64_t *)v8;
        v2343 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*(_DWORD *)(v10 + 56) & 7));
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v2477, v2343, (*(_QWORD *)(v10 + 72) << 15) | 0x16, *(_QWORD *)(v10 + 24), *(_QWORD *)(v10 + 32), *(_QWORD *)(v10 + 40));
        JSC::DFG::LazyNode::LazyNode(v2476, (JSC::DFG::Node *)v10);
        return;
      }
LABEL_3717:
      v214 = *v2473;
LABEL_3679:
      v215 = 16406;
      goto LABEL_2067;
    case 0x1AD:
      if ((*(_BYTE *)(v10 + 74) & 1) != 0)
      v214 = *v2473;
      goto LABEL_3679;
    case 0x1AE:
    case 0x1AF:
      v671 = ((unint64_t)*(_DWORD *)(v10 + 72) << 15) | 0x1A;
      v672 = *(_QWORD *)(v10 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v2478 = 38;
      v2479 = v671;
      v2480 = v672;
      v2481 = 0u;
      v2482 = 0u;
      v107 = *(_QWORD *)v8;
      v108 = &v2478;
      goto LABEL_119;
    case 0x1B0:
      return;
    case 0x1B1:
      __break(0xC471u);
      JUMPOUT(0x19835EE1CLL);
    default:
      v3088[0] = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * v12];
      WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)v3088, &v2475);
      if (v2475)
        v2424 = (const char *)(v2475 + 16);
      else
        v2424 = 0;
      JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", v2424);
      WTF::CString::~CString((WTF::CString *)&v2475, v2425, v2426, v2427, v2428, v2429, v2430, v2431);
      __break(0xC471u);
      JUMPOUT(0x19835EE98);
  }
}

uint64_t JSC::DFG::DefMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::SmallMaps>>::operator()(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BOOL8 a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  JSC::DFG::Node *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned __int16 v34;
  uint64_t v35;

  v9 = *a2;
  v10 = *((_QWORD *)a2 + 1);
  v11 = *((_QWORD *)a2 + 2);
  v12 = *((_QWORD *)a2 + 3);
  v13 = *((_QWORD *)a2 + 4);
  v14 = *((_QWORD *)a2 + 5);
  v15 = a1 + 32;
  result = *(_QWORD *)(a1 + 16);
  v17 = *(_DWORD *)(a1 + 12832);
  if (v17)
  {
    if (!(_DWORD)v11)
    {
      v18 = v17 - 1;
      while (1)
      {
        v19 = v18;
        v20 = (unsigned __int16 *)(v15 + 56 * v18);
        v21 = *((_QWORD *)v20 + 5);
        a7 = v21 != 0;
        if ((v14 != 0) == (v21 != 0) && *v20 == v9)
        {
          v22 = *((_QWORD *)v20 + 4);
          if (v22 == v13)
          {
            if (v21)
            {
              v23 = *((unsigned int *)v20 + 4);
              if (!(_DWORD)v23)
                goto LABEL_11;
            }
            else if (*((_QWORD *)v20 + 1) == v10)
            {
              v21 = *((_QWORD *)v20 + 2);
              if (v21 == v11)
              {
                v23 = *((_QWORD *)v20 + 3);
                if (v23 == v12)
                  goto LABEL_11;
              }
            }
          }
        }
        --v18;
        if (!v19)
          goto LABEL_35;
      }
    }
    v26 = *(_DWORD *)(a1 + 12832);
    while (1)
    {
      LODWORD(v19) = --v26;
      a8 = v15 + 56 * v26;
      v23 = *(_QWORD *)(a8 + 40);
      v22 = v23 != 0;
      if ((v14 != 0) == (v23 != 0) && *(unsigned __int16 *)a8 == v9)
      {
        v21 = *(_QWORD *)(a8 + 32);
        if (v21 == v13)
        {
          if (v23)
          {
            v27 = *(_QWORD *)(a8 + 16);
            if ((_DWORD)v27 == (_DWORD)v11)
            {
              v21 = 0;
              a7 = 0;
              v22 = *(_QWORD *)(a8 + 16);
              a8 = *(_QWORD *)(a8 + 8);
              v28 = a8;
              v29 = *(_DWORD *)(v23 + 164);
              v30 = v29 >= a8;
              LODWORD(a8) = v29 - a8;
              a8 = v30 ? a8 : 0;
              v30 = v29 >= v10;
              LODWORD(v31) = v29 - v10;
              v31 = v30 ? v31 : 0;
              v32 = 8 * v28;
              do
              {
                if (a8 == v21)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983609F0);
                }
                if (v31 == v21)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983609F8);
                }
                if (((*(_QWORD *)(*(_QWORD *)(v23 + 152) + 8 * (v10 + v21)) ^ *(_QWORD *)(*(_QWORD *)(v23 + 152) + v32 + 8 * v21)) & 0xFFFCFFFFFFFFFFFFLL) != 0)
                  break;
                a7 = ++v21 >= v22;
              }
              while (v27 != v21);
              if (a7)
              {
LABEL_11:
                v24 = *(JSC::DFG::Node **)(v15 + 56 * v19 + 48);
                if (v24)
                {
                  result = JSC::DFG::Node::replaceWith(result, *(JSC::DFG::Graph **)a1, v24, v23, v21, v22, a7, a8);
                  *(_BYTE *)(a1 + 8) = 1;
                }
                return result;
              }
            }
          }
          else if (*(_QWORD *)(a8 + 8) == v10 && *(_QWORD *)(a8 + 16) == v11)
          {
            v23 = *(_QWORD *)(a8 + 24);
            if (v23 == v12)
              goto LABEL_11;
          }
        }
      }
      if (!v26)
      {
LABEL_35:
        v25 = *(_DWORD *)(a1 + 12832);
        if (v17 >= 0x64)
        {
          __break(0xC471u);
          JUMPOUT(0x1983609C0);
        }
        goto LABEL_36;
      }
    }
  }
  v25 = 0;
LABEL_36:
  v33 = a2 + 1;
  v34 = a2[3];
  LODWORD(v33) = *v33;
  *(_DWORD *)(a1 + 12832) = v17 + 1;
  v35 = v15 + 56 * v25;
  *(_WORD *)v35 = v9;
  *(_DWORD *)(v35 + 2) = (_DWORD)v33;
  *(_WORD *)(v35 + 6) = v34;
  *(_QWORD *)(v35 + 8) = v10;
  *(_QWORD *)(v35 + 16) = v11;
  *(_QWORD *)(v35 + 24) = v12;
  *(_QWORD *)(v35 + 32) = v13;
  *(_QWORD *)(v35 + 40) = v14;
  *(_QWORD *)(v35 + 48) = result;
  return result;
}

uint64_t JSC::DFG::WriteMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::SmallMaps>>::operator()(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;

  v2 = a2 & 0x3FFF;
  if (v2 != 40)
  {
    v3 = *(_DWORD *)(result + 12836);
    if (v3)
    {
      for (i = 0; i < v3; ++i)
      {
        v5 = result + 72 * i;
        v6 = *(_QWORD *)(v5 + 5640);
        if (v6 == a2)
          goto LABEL_19;
        LOWORD(v7) = a2;
        if (v2 == 37 && (LOWORD(v7) = a2, (*(_QWORD *)(v5 + 5640) & 0x3FFFLL) == 0x25))
        {
          if ((a2 & 0x4000) != 0)
          {
            v16 = 0;
          }
          else
          {
            if ((v6 & 0x4000) != 0)
              goto LABEL_19;
            v16 = 0;
            v19 = (unsigned __int16)(a2 >> 15);
            if (v19 != (unsigned __int16)(a2 >> 31))
            {
              v20 = (unsigned __int16)(v6 >> 15);
              v21 = (unsigned __int16)(v6 >> 31);
              if (v20 != v21)
              {
                v22 = (unsigned __int16)(a2 >> 31);
                v23 = v22 > v21;
                v24 = v22 == v21 && v19 == v20;
                v25 = v23 || v20 > v19;
                if (v25 || v24)
                {
LABEL_55:
                  v26 = (unsigned __int16)(a2 >> 15);
                  if (v26 == (unsigned __int16)(a2 >> 31) || v20 == v21)
                    continue;
                  v27 = (unsigned __int16)(a2 >> 31);
                  v28 = v21 == v27;
                  if (v20 != v26)
                    v28 = 0;
                  if (v21 > v27 || v20 < v26 || v28)
                    continue;
                }
                goto LABEL_19;
              }
            }
          }
        }
        else
        {
          while (1)
          {
            v8 = v7 & 0x3FFF;
            if (v8 == 1)
              break;
            if (v8 == 2)
              v9 = 16385;
            else
              v9 = 16387;
            if ((v7 & 0x4000) != 0)
              v7 = v9;
            else
              v7 = v8 | 0x4000u;
            if (v8 == 40)
              v7 = 16385;
            if (v8 == 3)
              v7 = 16385;
            if (v7 == v6)
              goto LABEL_19;
          }
          v16 = (*(_QWORD *)(v5 + 5640) & 0x3FFFLL) != 37;
        }
        if (v2 != 37 || v16)
        {
          while (1)
          {
            v17 = v6 & 0x3FFF;
            if (v17 == 1)
              goto LABEL_20;
            if (v17 == 2)
              v18 = 16385;
            else
              v18 = 16387;
            if ((v6 & 0x4000) != 0)
              v6 = v18;
            else
              v6 = v17 | 0x4000u;
            if (v17 == 40)
              v6 = 16385;
            if (v17 == 3)
              v6 = 16385;
            if (v6 == a2)
              goto LABEL_19;
          }
        }
        if ((v6 & 0x4000) == 0)
        {
          if ((a2 & 0x4000) == 0)
          {
            v20 = (unsigned __int16)(v6 >> 15);
            v21 = (unsigned __int16)(v6 >> 31);
            goto LABEL_55;
          }
LABEL_19:
          v10 = v5 + 5632;
          v11 = v3 - 1;
          *(_DWORD *)(result + 12836) = v11;
          v12 = result + 72 * v11;
          --i;
          *(_OWORD *)v10 = *(_OWORD *)(v12 + 5632);
          v13 = *(_OWORD *)(v12 + 5648);
          v14 = *(_OWORD *)(v12 + 5664);
          v15 = *(_OWORD *)(v12 + 5680);
          *(_QWORD *)(v10 + 64) = *(_QWORD *)(v12 + 5696);
          *(_OWORD *)(v10 + 32) = v14;
          *(_OWORD *)(v10 + 48) = v15;
          *(_OWORD *)(v10 + 16) = v13;
          v3 = *(_DWORD *)(result + 12836);
        }
LABEL_20:
        ;
      }
    }
  }
  return result;
}

uint64_t JSC::DFG::DefMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::SmallMaps>>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  JSC::DFG::Node *v20;
  JSC::DFG::Node *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  unsigned int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v44;
  JSC::DFG::Node *v45[2];

  v8 = result;
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = a2[6];
  if (v13 < 4)
  {
    v16 = *(_DWORD *)(result + 12836);
    if (v16)
    {
      v17 = v16 - 1;
      result = 72;
      while (1)
      {
        v18 = v17;
        a5 = v8 + 72 * v17;
        a6 = *(unsigned int *)(a5 + 5632);
        if ((_DWORD)a6 == (_DWORD)v9)
        {
          a5 += 5632;
          a6 = *(_QWORD *)(a5 + 8);
          if (a6 == v10)
          {
            a6 = *(_QWORD *)(a5 + 16);
            if (a6 == v11)
            {
              a6 = *(_QWORD *)(a5 + 32);
              if (a6 <= 3)
              {
                a6 = *(_QWORD *)(a5 + 24);
                if (a6 == v12)
                {
                  a6 = *(_QWORD *)(a5 + 40);
                  if (a6 == v14)
                  {
                    a5 = *(_QWORD *)(a5 + 48);
                    if (a5 == v15)
                      goto LABEL_59;
                  }
                }
              }
            }
          }
        }
        --v17;
        if (!v18)
          goto LABEL_12;
      }
    }
LABEL_58:
    v19 = 0;
    v16 = 0;
LABEL_14:
    v20 = 0;
    v21 = 0;
    *(_DWORD *)(v8 + 12836) = v19 + 1;
    v22 = (_QWORD *)(v8 + 72 * v16);
    v22[705] = v10;
    v22[704] = v9;
    v22[706] = v11;
    v22[707] = v12;
    v22[708] = v13;
    v22[709] = v14;
    v22[710] = v15;
    v22[711] = a3;
    v22[712] = a4;
    goto LABEL_15;
  }
  if (!v12)
  {
    v20 = 0;
    v21 = 0;
    goto LABEL_15;
  }
  v16 = *(_DWORD *)(result + 12836);
  if (!v16)
    goto LABEL_58;
  v41 = v16 - 1;
  result = 72;
  while (1)
  {
    v18 = v41;
    a5 = v8 + 72 * v41;
    a6 = *(unsigned int *)(a5 + 5632);
    if ((_DWORD)a6 == (_DWORD)v9)
    {
      a5 += 5632;
      a6 = *(_QWORD *)(a5 + 8);
      if (a6 == v10)
      {
        a6 = *(_QWORD *)(a5 + 16);
        if (a6 == v11)
        {
          a6 = *(_QWORD *)(a5 + 32);
          if (a6 == v13)
          {
            a6 = *(_QWORD *)(a5 + 40);
            if (a6 == v14)
            {
              a5 = *(_QWORD *)(a5 + 48);
              if (a5 == v15)
                break;
            }
          }
        }
      }
    }
    --v41;
    if (!v18)
    {
LABEL_12:
      v19 = v16;
      goto LABEL_13;
    }
  }
LABEL_59:
  v19 = v16;
  v42 = v8 + 72 * v18;
  v21 = *(JSC::DFG::Node **)(v42 + 5688);
  v20 = *(JSC::DFG::Node **)(v42 + 5696);
  if ((unint64_t)v20 <= 3 && v21 == 0)
  {
LABEL_13:
    if (v19 >= 0x64)
    {
LABEL_66:
      __break(0xC471u);
      JUMPOUT(0x198360E44);
    }
    goto LABEL_14;
  }
LABEL_15:
  v45[0] = v21;
  v45[1] = v20;
  if ((unint64_t)v20 > 3 || v21)
  {
    v23 = *(_QWORD *)(v8 + 16);
    if (*(_WORD *)(v23 + 18) == 15)
    {
      *(_QWORD *)(v23 + 24) = 0;
      v24 = *(_QWORD *)v8;
      v25 = *(_DWORD *)(*(_QWORD *)v8 + 944);
      if (v25 && v25 != 2)
      {
        if ((_BYTE)qword_1ECF4C32A)
          v33 = 0;
        else
          v33 = byte_1ECF4C323 == 0;
        if (!v33 || BYTE2(qword_1ECF4C32A) != 0)
        {
          v44 = a3;
          result = WTF::dataLog<char [16]>("Dethreading DFG graph.\n");
          a3 = v44;
        }
        v35 = *(_DWORD *)(v24 + 60);
        while (v35)
        {
          if (*(_DWORD *)(v24 + 60) <= --v35)
            goto LABEL_66;
          v36 = *(_QWORD *)(*(_QWORD *)(v24 + 48) + 8 * v35);
          if (v36)
          {
            v37 = *(_DWORD *)(v36 + 36);
            if (v37)
            {
              v38 = v37 - 1;
              v39 = 8 * v38;
              do
              {
                if (*(_DWORD *)(v36 + 36) <= v38)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198360F0CLL);
                }
                v40 = *(_QWORD **)(*(_QWORD *)(v36 + 24) + v39);
                v40[3] = 0;
                v40[4] = 0;
                v40[5] = 0;
                v39 -= 8;
                --v38;
              }
              while (v38 != -1);
            }
          }
        }
        *(_DWORD *)(v24 + 944) = 0;
      }
    }
    if (a3 && *(_QWORD *)(v8 + 16) == a3)
    {
      v27 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(JSC::DFG::LazyNode::ensureIsNode((uint64_t *)v45, v8 + 12840, v27, 0, a5, a6, a7, a8) + 96) = v27;
      result = JSC::DFG::Node::replaceWith(*(_QWORD *)(v8 + 16), *(JSC::DFG::Graph **)v8, v45[0], v28, v29, v30, v31, v32);
      *(_BYTE *)(v8 + 8) = 1;
    }
  }
  return result;
}

uint64_t JSC::DFG::LazyNode::ensureIsNode(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  __int16 v40;

  if (*a1)
    return *a1;
  if (*(_DWORD *)(a3 + 220) <= a4)
    goto LABEL_38;
  v10 = a4;
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 208) + 8 * a4);
  v12 = *(_QWORD *)v11;
  if ((*(_QWORD *)v11 & 1) != 0)
  {
    v35 = a4;
    v37 = *(_QWORD *)(*(_QWORD *)(a3 + 208) + 8 * a4);
    v23 = a2;
    v24 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v25 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v25 != 0x3FFFFFFF)
        ? (v26 = (_DWORD)v25 == -1)
        : (v26 = 1),
          v26))
    {
      v27 = 2;
    }
    else if (v25 >> 28)
    {
      v32 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v32 = v24;
      *(_DWORD *)(v32 + 8) = v25;
      v27 = 1;
      v24 = v32;
    }
    else
    {
      v27 = v24;
      v24 = v25 << 36;
    }
    v12 = v24 | v27;
    a2 = v23;
    v10 = v35;
    v11 = v37;
  }
  v39[0] = v12;
  v13 = *(_QWORD *)(v11 + 8);
  if ((v13 & 1) != 0)
  {
    v36 = v10;
    v38 = v11;
    v34 = a2;
    v28 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v29 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v29 != 0x3FFFFFFF)
        ? (v30 = (_DWORD)v29 == -1)
        : (v30 = 1),
          v30))
    {
      v31 = 2;
    }
    else if (v29 >> 28)
    {
      v33 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v33 = v28;
      *(_DWORD *)(v33 + 8) = v29;
      v31 = 1;
      v28 = v33;
    }
    else
    {
      v31 = v28;
      v28 = v29 << 36;
    }
    v13 = v28 | v31;
    a2 = v34;
    v10 = v36;
    v11 = v38;
  }
  v39[1] = v13;
  v40 = *(_WORD *)(v11 + 16);
  v14 = a1[1];
  if (!*a1)
  {
    v15 = v14 & 3;
    if ((a1[1] & 3) != 3)
      goto LABEL_8;
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x1983610A0);
  }
  v15 = *(_WORD *)(*a1 + 18);
LABEL_8:
  *a1 = JSC::DFG::InsertionSet::insertConstant(a2, v10, (uint64_t)v39, (unint64_t *)(v14 & 0xFFFFFFFFFFFFFFFCLL), v15, a6, a7, a8);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, v16, v17, v18, v19, v20, v21, v22);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, v16, v17, v18, v19, v20, v21, v22);
  return *a1;
}

void JSC::DFG::`anonymous namespace'::ImpureMap::clear(JSC::DFG::_anonymous_namespace_::ImpureMap *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  v9 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    v12 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v12)
    {
      v13 = (unint64_t *)(v9 + 8);
      do
      {
        if (*(v13 - 1) != 0x7FFFFFFFFFFFFFFFLL)
        {
          v14 = *v13;
          *v13 = 0;
          if (v14)
            WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
        }
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = (unint64_t *)*((_QWORD *)this + 1);
  if (v10)
  {
    *((_QWORD *)this + 1) = 0;
    v15 = *((unsigned int *)v10 - 1);
    if ((_DWORD)v15)
    {
      v16 = v10;
      do
      {
        v17 = *v16;
        if (*v16 != -1)
        {
          *v16 = 0;
          if (v17)
            WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
        }
        ++v16;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree((unint64_t)(v10 - 2), a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = (unint64_t *)*((_QWORD *)this + 2);
  if (v11)
  {
    *((_QWORD *)this + 2) = 0;
    v18 = *((unsigned int *)v11 - 1);
    if ((_DWORD)v18)
    {
      v19 = v11;
      do
      {
        v20 = *v19;
        if (*v19 != -1)
        {
          *v19 = 0;
          if (v20)
            WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
        }
        ++v19;
        --v18;
      }
      while (v18);
    }
    WTF::fastFree((unint64_t)(v11 - 2), a2, a3, a4, a5, a6, a7, a8);
  }
}

void WTF::HashSet<std::unique_ptr<JSC::DFG::`anonymous namespace'::ImpureDataSlot>,JSC::DFG::`anonymous namespace'::ImpureDataSlotHash,WTF::HashTraits<std::unique_ptr<JSC::DFG::`anonymous namespace'::ImpureDataSlot>>,WTF::HashTableTraits>::clear(unint64_t **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v8 = *a1;
  if (*a1)
  {
    *a1 = 0;
    v9 = *((unsigned int *)v8 - 1);
    if ((_DWORD)v9)
    {
      v10 = v8;
      do
      {
        v11 = *v10;
        if (*v10 != -1)
        {
          *v10 = 0;
          if (v11)
            WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
        }
        ++v10;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((unint64_t)(v8 - 2), a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::DFG::`anonymous namespace'::ImpureMap::get(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = v2 & 0x3FFF;
  if (v3 == 2)
  {
    v7 = *a1;
    if (*a1)
    {
      v8 = *(_DWORD *)(v7 - 8);
      v9 = (v2 >> 15) + ~(v2 >> 15 << 32);
      v10 = 9
          * (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) ^ (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      v13 = *(_QWORD *)(v7 + 16 * v12);
      if (v13 != v2 >> 15)
      {
        v14 = 1;
        while (v13 != 0x8000000000000000)
        {
          v12 = ((_DWORD)v12 + v14) & v8;
          v13 = *(_QWORD *)(v7 + 16 * v12);
          ++v14;
          if (v13 == v2 >> 15)
            goto LABEL_16;
        }
        v12 = *(unsigned int *)(v7 - 4);
      }
LABEL_16:
      if (v12 != *(_DWORD *)(v7 - 4))
      {
        v15 = *(_QWORD *)(v7 + 16 * v12 + 8);
        if (*(_DWORD *)v15 == *(_DWORD *)a2
          && *(_QWORD *)(v15 + 8) == v2
          && *(_QWORD *)(v15 + 16) == *(_QWORD *)(a2 + 16))
        {
          v16 = *(_QWORD *)(v15 + 32);
          v17 = *(_QWORD *)(a2 + 32);
          if (v16 <= 3 && v17 < 4)
          {
            v16 = *(_QWORD *)(v15 + 24);
            v17 = *(_QWORD *)(a2 + 24);
          }
          if (v16 == v17
            && *(_QWORD *)(v15 + 40) == *(_QWORD *)(a2 + 40)
            && *(_QWORD *)(v15 + 48) == *(_QWORD *)(a2 + 48))
          {
            return *(_QWORD *)(v15 + 56);
          }
        }
      }
    }
    v5 = a1[1];
  }
  else
  {
    if (v3 == 40 || v3 == 1)
    {
      result = 252;
      __break(0xC471u);
      return result;
    }
    v5 = a1[2];
  }
}

uint64_t JSC::DFG::`anonymous namespace'::ImpureMap::get(uint64_t result, int *a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int i;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int j;
  uint64_t v25;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = *a2;
    v4 = *((_QWORD *)a2 + 1);
    v5 = *((_QWORD *)a2 + 2);
    v6 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = (v8 >> 31) ^ v8;
    v11 = *((_QWORD *)a2 + 3);
    v10 = *((_QWORD *)a2 + 4);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v10 & 0xFFFFFFFFFFFFFFFCLL) == 0)
      v12 = *((_QWORD *)a2 + 3);
    v13 = (~(v12 << 32) + v12) ^ ((~(v12 << 32) + v12) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = (v15 >> 31) ^ v15;
    v17 = *((_QWORD *)a2 + 5);
    v18 = *((_QWORD *)a2 + 6);
    v19 = v3 + v5 + v17 + v18 + v9 + v16;
    if (v10 < 4)
    {
      for (i = 0; ; v19 = i + v21)
      {
        v21 = v19 & v2;
        v22 = *(_QWORD *)(result + 8 * v21);
        if (!v22)
          goto LABEL_26;
        if (v22 != -1 && *(_DWORD *)v22 == v3 && *(_QWORD *)(v22 + 8) == v4 && *(_QWORD *)(v22 + 16) == v5)
        {
          v23 = *(_QWORD *)(v22 + 32);
          if (v23 >= 4)
          {
            if (v23 != v10)
              goto LABEL_15;
          }
          else if (*(_QWORD *)(v22 + 24) != v11)
          {
            goto LABEL_15;
          }
          if (*(_QWORD *)(v22 + 40) == v17 && *(_QWORD *)(v22 + 48) == v18)
            goto LABEL_27;
        }
LABEL_15:
        ++i;
      }
    }
    for (j = 0; ; v19 = j + v21)
    {
      v21 = v19 & v2;
      v25 = *(_QWORD *)(result + 8 * v21);
      if (!v25)
        break;
      if (v25 != -1
        && *(_DWORD *)v25 == v3
        && *(_QWORD *)(v25 + 8) == v4
        && *(_QWORD *)(v25 + 16) == v5
        && *(_QWORD *)(v25 + 32) == v10
        && *(_QWORD *)(v25 + 40) == v17
        && *(_QWORD *)(v25 + 48) == v18)
      {
        goto LABEL_27;
      }
      ++j;
    }
LABEL_26:
    v21 = *(unsigned int *)(result - 4);
LABEL_27:
    if (v21 == *(_DWORD *)(result - 4))
      return 0;
    else
      return *(_QWORD *)(*(_QWORD *)(result + 8 * v21) + 56);
  }
  return result;
}

void JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::LargeMaps>>,JSC::DFG::WriteMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::LargeMaps>>,JSC::DFG::DefMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::LargeMaps>>,void JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::LargeMaps>>,JSC::DFG::WriteMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::LargeMaps>>,JSC::DFG::DefMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::LargeMaps>>>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::ReadMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::LargeMaps>> const&,JSC::DFG::WriteMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::LargeMaps>> const&,JSC::DFG::DefMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::LargeMaps>> const&)::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t **v2;
  JSC::DFG::Node *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 *v9;
  int *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  unsigned __int16 *v42;
  int v43;
  unsigned int v44;
  unsigned __int16 *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  BOOL v52;
  BOOL v54;
  BOOL v57;
  JSC::DFG::Node *v59;
  uint64_t v60;
  JSC::DFG::Graph *v61;
  int v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  BOOL v67;
  BOOL v69;
  BOOL v70;
  BOOL v71;
  BOOL v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  BOOL v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unsigned int v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *v113;
  int v114;
  unint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t StatusReg;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t casual;
  __int128 v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  JSC::DFG::Graph *v134;
  int v135;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  unsigned int v149;
  unsigned int v150;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  int v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t *v171;
  int *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  __int16 *v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t **v185;
  unint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unsigned int v209;
  int v210;
  int v211;
  uint64_t v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t **v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unsigned int v235;
  BOOL v236;
  uint64_t v238;
  uint64_t v239;
  int v240;
  unsigned int v241;
  uint64_t v242;
  _QWORD *v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unsigned int v249;
  uint64_t v250;
  int v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  int v256;
  uint64_t v257;
  unsigned int v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int v265;
  unsigned int v266;
  unint64_t v267;
  double v268;
  double v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  int v274;
  unint64_t v275;
  uint64_t v276;
  unsigned int v277;
  unsigned int v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t **v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  __int128 *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  int v307;
  unsigned __int8 v308;
  uint64_t v309;
  int v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  __int128 *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  uint64_t v326;
  unsigned int v327;
  unsigned int v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t **v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t **v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t **v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  __int128 *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  void *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  int v405;
  int v406;
  int v407;
  char v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int *v411;
  unsigned int v412;
  unsigned int *v413;
  uint64_t v414;
  unsigned int v415;
  _DWORD *v416;
  unint64_t v417;
  unint64_t v418;
  uint64_t v419;
  unint64_t v420;
  uint64_t *v421;
  uint64_t v422;
  unsigned int v423;
  int v424;
  unsigned int v425;
  unsigned int v426;
  unint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  char isWatchingHavingABadTimeWatchpoint;
  uint64_t v434;
  _DWORD *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  int v448;
  int v449;
  uint64_t v450;
  uint64_t **v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  unint64_t v462;
  int v463;
  uint64_t v464;
  uint64_t **v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  __int128 *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unsigned int v491;
  unsigned int v492;
  uint64_t **v493;
  unint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  unint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  __int128 *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  unint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  uint64_t v526;
  uint64_t v527;
  unint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t **v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t v534;
  unint64_t v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  unint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  unint64_t v543;
  uint64_t v544;
  unsigned int v545;
  uint64_t v546;
  unint64_t *v547;
  uint64_t v548;
  unint64_t v549;
  unint64_t v550;
  unint64_t v551;
  uint64_t v552;
  unint64_t v553;
  uint64_t v554;
  unint64_t v555;
  uint64_t v556;
  unint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t **v560;
  unsigned int *v561;
  unint64_t v562;
  unint64_t v563;
  unint64_t v564;
  unint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t **v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  int v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t **v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  int v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  unint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  unsigned int *v602;
  uint64_t v603;
  uint64_t v604;
  unsigned int v605;
  uint64_t v606;
  uint64_t v607;
  __int128 *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  unint64_t v615;
  uint64_t v616;
  uint64_t v617;
  unint64_t v618;
  uint64_t v619;
  uint64_t v620;
  unint64_t v621;
  uint64_t **v622;
  unint64_t v623;
  _QWORD *v624;
  uint64_t v625;
  uint64_t v626;
  _QWORD *v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  unsigned int v631;
  uint64_t v632;
  uint64_t v633;
  _BOOL4 v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  unint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  _DWORD *v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  int v863;
  int v864;
  uint64_t v865;
  unint64_t v866;
  uint64_t **v867;
  uint64_t *v868;
  uint64_t v869;
  unint64_t v870;
  uint64_t **v871;
  unint64_t v872;
  uint64_t v873;
  JSC::DFG::Node *v874;
  uint64_t v875;
  unsigned int v876;
  uint64_t **v877;
  unint64_t v878;
  uint64_t **v879;
  uint64_t v880;
  uint64_t v881;
  unint64_t v882;
  uint64_t **v883;
  uint64_t v884;
  JSC::DFG::Node *v885;
  uint64_t v886;
  unint64_t v887;
  uint64_t **v888;
  uint64_t v889;
  unint64_t v890;
  uint64_t **v891;
  uint64_t v892;
  unint64_t v893;
  uint64_t **v894;
  uint64_t v895;
  unint64_t v896;
  uint64_t **v897;
  unint64_t v898;
  uint64_t v899;
  unsigned int v900;
  uint64_t v901;
  uint64_t v902;
  int v903;
  BOOL v904;
  unint64_t v905;
  uint64_t **v906;
  unint64_t v907;
  uint64_t v908;
  unint64_t v909;
  unint64_t v910;
  uint64_t **v911;
  uint64_t v912;
  _DWORD *v913;
  _QWORD *v914;
  unint64_t v915;
  uint64_t v916;
  uint64_t v917;
  int v918;
  unint64_t v919;
  JSC::DFG::Node *v920;
  uint64_t **v921;
  int v922;
  unsigned int v923;
  uint64_t v924;
  unint64_t v925;
  uint64_t **v926;
  uint64_t *v927;
  int v928;
  uint64_t v929;
  unint64_t v930;
  unint64_t v931;
  uint64_t **v932;
  uint64_t *v933;
  uint64_t v934;
  uint64_t v935;
  int v936;
  unint64_t v937;
  uint64_t v938;
  unsigned __int16 *v939;
  int hasArrayMode;
  unsigned int v941;
  unsigned int v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  unint64_t v950;
  unint64_t v951;
  uint64_t **v952;
  unint64_t v953;
  uint64_t **v954;
  uint64_t v955;
  uint64_t **v956;
  JSC::DFG::Node *v957;
  unint64_t v958;
  int v959;
  uint64_t v960;
  unsigned int v961;
  unsigned int v962;
  unsigned int v963;
  uint64_t **v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t **v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t **v971;
  uint64_t v972;
  unint64_t v973;
  uint64_t v974;
  uint64_t **v975;
  uint64_t *v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t **v979;
  _QWORD *v980;
  _QWORD *v981;
  unint64_t v982;
  uint64_t v983;
  uint64_t v984;
  unint64_t v985;
  unint64_t v986;
  uint64_t **v987;
  uint64_t v988;
  uint64_t v989;
  unint64_t v990;
  int v991;
  uint64_t **v992;
  unint64_t v993;
  uint64_t **v994;
  unint64_t v995;
  uint64_t **v996;
  uint64_t v997;
  int v998;
  int v999;
  unint64_t v1000;
  uint64_t **v1001;
  uint64_t v1002;
  int v1003;
  int v1004;
  unint64_t v1005;
  unint64_t v1006;
  uint64_t v1007;
  unint64_t v1008;
  unint64_t v1009;
  uint64_t **v1010;
  uint64_t v1011;
  unint64_t v1012;
  uint64_t v1013;
  uint64_t **v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t **v1017;
  uint64_t **v1018;
  uint64_t v1019;
  uint64_t v1020;
  unsigned int v1021;
  uint64_t **v1022;
  JSC::DFG::Node *v1023;
  uint64_t **v1024;
  unint64_t v1025;
  BOOL v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  JSC::DFG::Node *v1030;
  const char *v1031;
  void *v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  unsigned int v1039;
  uint64_t v1040;
  unsigned int v1041;
  uint64_t v1042;
  unsigned int v1043;
  uint64_t v1044;
  unsigned int v1045;
  char v1046;
  unsigned int v1047;
  unint64_t v1048;
  int v1049;
  uint64_t v1050;
  JSC::DFG::Node *v1051;
  int v1052;
  JSC::DFG::Node *v1053;
  uint64_t v1054;
  int v1055;
  int v1056;
  int v1057;
  uint64_t v1058;
  uint64_t **v1059;
  JSC::DFG::Graph *v1060;
  uint64_t **v1061;
  _QWORD v1062[2];
  _BYTE v1063[56];
  int v1064;
  unint64_t v1065;
  unint64_t v1066;
  __int128 v1067;
  __int128 v1068;
  __int16 v1069;
  int8x16_t v1070;
  unint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  __int16 v1074;
  int8x16_t v1075;
  unint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  __int16 v1079;
  int8x16_t v1080;
  unint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  __int16 v1084;
  int8x16_t v1085;
  unint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  _QWORD v1089[2];
  _BYTE v1090[56];
  _QWORD v1091[2];
  _BYTE v1092[56];
  int v1093;
  uint64_t v1094;
  unint64_t v1095;
  unint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  _QWORD v1100[2];
  _BYTE v1101[56];
  _QWORD v1102[2];
  _BYTE v1103[56];
  _QWORD v1104[2];
  int v1105;
  uint64_t v1106;
  unint64_t v1107;
  __int128 v1108;
  __int128 v1109;
  _QWORD v1110[2];
  int v1111;
  uint64_t v1112;
  unint64_t v1113;
  __int128 v1114;
  __int128 v1115;
  _QWORD v1116[2];
  int v1117;
  uint64_t v1118;
  unint64_t v1119;
  __int128 v1120;
  __int128 v1121;
  _QWORD v1122[2];
  _BYTE v1123[56];
  int v1124;
  uint64_t v1125;
  unint64_t v1126;
  __int128 v1127;
  __int128 v1128;
  _QWORD v1129[2];
  int v1130;
  uint64_t v1131;
  unint64_t v1132;
  __int128 v1133;
  __int128 v1134;
  _QWORD v1135[2];
  int v1136;
  uint64_t v1137;
  unint64_t v1138;
  __int128 v1139;
  __int128 v1140;
  _QWORD v1141[2];
  int v1142;
  uint64_t v1143;
  unint64_t v1144;
  __int128 v1145;
  __int128 v1146;
  int v1147;
  uint64_t v1148;
  unint64_t v1149;
  unint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  int v1154;
  uint64_t v1155;
  unint64_t v1156;
  unint64_t v1157;
  uint64_t v1158;
  unint64_t v1159;
  uint64_t v1160;
  __int16 v1161;
  int8x16_t v1162;
  unint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  __int16 v1166;
  int8x16_t v1167;
  unint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  __int16 v1171;
  int8x16_t v1172;
  unint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  __int16 v1176;
  unint64_t v1177;
  int8x16_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  __int16 v1181;
  unint64_t v1182;
  unint64_t v1183;
  unint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  __int16 v1187;
  int8x16_t v1188;
  unint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  __int16 v1192;
  int8x16_t v1193;
  unint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  __int128 v1197;
  uint64_t v1198;
  uint64_t v1199;
  __int128 *v1200;
  uint64_t v1201;
  uint64_t v1202;
  __int128 v1203;
  uint64_t v1204;
  uint64_t v1205;
  __int128 *v1206;
  uint64_t v1207;
  uint64_t v1208;
  __int128 v1209;
  uint64_t v1210;
  __int128 v1211;
  __int128 v1212;
  __int128 v1213;
  uint64_t v1214;
  uint64_t v1215;
  __int128 *v1216;
  uint64_t v1217;
  uint64_t v1218;
  __int128 v1219;
  uint64_t v1220;
  uint64_t v1221;
  __int128 *v1222;
  uint64_t v1223;
  uint64_t v1224;
  __int128 v1225;
  uint64_t v1226;
  __int128 v1227;
  __int128 v1228;
  int v1229;
  uint64_t v1230;
  uint64_t v1231;
  __int128 v1232;
  __int128 v1233;
  int v1234;
  uint64_t v1235;
  __int128 v1236;
  __int128 v1237;
  uint64_t v1238;
  int v1239;
  uint64_t v1240;
  __int128 v1241;
  __int128 v1242;
  uint64_t v1243;
  _QWORD v1244[2];
  int v1245;
  unint64_t v1246;
  unint64_t v1247;
  __int128 v1248;
  __int128 v1249;
  _QWORD v1250[2];
  int v1251;
  unint64_t v1252;
  unint64_t v1253;
  __int128 v1254;
  __int128 v1255;
  int v1256;
  uint64_t v1257;
  unint64_t v1258;
  __int128 v1259;
  __int128 v1260;
  int v1261;
  uint64_t v1262;
  unint64_t v1263;
  __int128 v1264;
  __int128 v1265;
  int v1266;
  unint64_t v1267;
  unint64_t v1268;
  __int128 v1269;
  __int128 v1270;
  int v1271;
  unint64_t v1272;
  unint64_t v1273;
  __int128 v1274;
  __int128 v1275;
  int v1276;
  unint64_t v1277;
  unint64_t v1278;
  __int128 v1279;
  __int128 v1280;
  int v1281;
  unint64_t v1282;
  unint64_t v1283;
  __int128 v1284;
  __int128 v1285;
  _QWORD v1286[2];
  int v1287;
  uint64_t v1288;
  unint64_t v1289;
  __int128 v1290;
  __int128 v1291;
  _QWORD v1292[2];
  int v1293;
  uint64_t v1294;
  unint64_t v1295;
  __int128 v1296;
  __int128 v1297;
  __int16 v1298;
  int8x16_t v1299;
  unint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  _QWORD v1303[2];
  int v1304;
  uint64_t v1305;
  unint64_t v1306;
  __int128 v1307;
  __int128 v1308;
  _QWORD v1309[2];
  int v1310;
  uint64_t v1311;
  unint64_t v1312;
  __int128 v1313;
  __int128 v1314;
  __int16 v1315;
  int8x16_t v1316;
  unint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  int v1320;
  uint64_t v1321;
  unint64_t v1322;
  __int128 v1323;
  __int128 v1324;
  int v1325;
  unint64_t v1326;
  unint64_t v1327;
  __int128 v1328;
  __int128 v1329;
  _QWORD v1330[2];
  int v1331;
  unint64_t v1332;
  unint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  int v1338;
  unint64_t v1339;
  unint64_t v1340;
  __int128 v1341;
  __int128 v1342;
  _QWORD v1343[2];
  int v1344;
  unint64_t v1345;
  unint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  int v1351;
  unint64_t v1352;
  unint64_t v1353;
  __int128 v1354;
  __int128 v1355;
  _QWORD v1356[2];
  int v1357;
  unint64_t v1358;
  unint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  unsigned int *v1363;
  int v1364;
  unint64_t v1365;
  unint64_t v1366;
  __int128 v1367;
  __int128 v1368;
  _QWORD v1369[2];
  int v1370;
  unint64_t v1371;
  unint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  int v1377;
  uint64_t v1378;
  unint64_t v1379;
  __int128 v1380;
  __int128 v1381;
  __int16 v1382;
  int8x16_t v1383;
  unint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  _QWORD v1387[2];
  int v1388;
  uint64_t v1389;
  unint64_t v1390;
  __int128 v1391;
  __int128 v1392;
  _QWORD v1393[2];
  int v1394;
  uint64_t v1395;
  unint64_t v1396;
  __int128 v1397;
  __int128 v1398;
  __int16 v1399;
  int8x16_t v1400;
  unint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  int v1404;
  uint64_t v1405;
  unint64_t v1406;
  __int128 v1407;
  __int128 v1408;
  int v1409;
  unint64_t v1410;
  unint64_t v1411;
  __int128 v1412;
  __int128 v1413;
  __int16 v1414;
  int8x16_t v1415;
  unint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  __int16 v1419;
  int8x16_t v1420;
  unint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  int v1424;
  uint64_t v1425;
  unint64_t v1426;
  __int128 v1427;
  __int128 v1428;
  int v1429;
  uint64_t v1430;
  unint64_t v1431;
  __int128 v1432;
  __int128 v1433;
  _QWORD v1434[2];
  int v1435;
  uint64_t v1436;
  unint64_t v1437;
  __int128 v1438;
  __int128 v1439;
  __int16 v1440;
  unint64_t v1441;
  int8x16_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  __int16 v1445;
  unint64_t v1446;
  unint64_t v1447;
  unint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  _QWORD v1451[2];
  int v1452;
  uint64_t v1453;
  unint64_t v1454;
  __int128 v1455;
  __int128 v1456;
  int v1457;
  uint64_t v1458;
  unint64_t v1459;
  unint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  __int128 v1464;
  unint64_t v1465;
  unint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  int v1470;
  uint64_t v1471;
  unint64_t v1472;
  unint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  __int128 v1477;
  unint64_t v1478;
  unint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t v1482;
  __int128 v1483;
  unint64_t v1484;
  unint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  int v1489;
  uint64_t v1490;
  unint64_t v1491;
  unint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  __int128 v1496;
  unint64_t v1497;
  unint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  int v1502;
  uint64_t v1503;
  unint64_t v1504;
  unint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  __int16 v1509;
  __int128 v1510;
  uint64_t v1511;
  uint64_t v1512;
  JSC::DFG::Graph *v1513;
  int v1514;
  uint64_t v1515;
  unint64_t v1516;
  unint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  int v1521;
  uint64_t v1522;
  unint64_t v1523;
  unint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  int v1528;
  uint64_t v1529;
  unint64_t v1530;
  unint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  _QWORD v1535[2];
  _BYTE v1536[56];
  _QWORD v1537[2];
  _BYTE v1538[56];
  __int16 v1539;
  __int128 v1540;
  uint64_t v1541;
  uint64_t v1542;
  JSC::DFG::Graph *v1543;
  _QWORD v1544[2];
  int v1545;
  uint64_t v1546;
  __int128 v1547;
  __int128 v1548;
  uint64_t v1549;
  _QWORD v1550[2];
  int v1551;
  uint64_t v1552;
  __int128 v1553;
  __int128 v1554;
  uint64_t v1555;
  __int128 v1556;
  __int128 v1557;
  __int128 v1558;
  uint64_t v1559;
  int v1560;
  uint64_t v1561;
  __int128 v1562;
  __int128 v1563;
  uint64_t v1564;
  _QWORD v1565[2];
  int v1566;
  unint64_t v1567;
  __int128 v1568;
  __int128 v1569;
  uint64_t v1570;
  int v1571;
  uint64_t v1572;
  __int128 v1573;
  __int128 v1574;
  uint64_t v1575;
  _QWORD v1576[2];
  int v1577;
  uint64_t v1578;
  unint64_t v1579;
  __int128 v1580;
  __int128 v1581;
  _QWORD v1582[2];
  int v1583;
  uint64_t v1584;
  unint64_t v1585;
  __int128 v1586;
  __int128 v1587;
  __int16 v1588;
  unint64_t v1589;
  unint64_t v1590;
  unint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  __int16 v1594;
  unint64_t v1595;
  int8x16_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  __int16 v1599;
  unint64_t v1600;
  int8x16_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  __int16 v1604;
  unint64_t v1605;
  int8x16_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  _QWORD v1609[2];
  int v1610;
  uint64_t v1611;
  unint64_t v1612;
  __int128 v1613;
  __int128 v1614;
  _QWORD v1615[2];
  int v1616;
  uint64_t v1617;
  unint64_t v1618;
  __int128 v1619;
  __int128 v1620;
  int v1621;
  uint64_t v1622;
  unint64_t v1623;
  __int128 v1624;
  __int128 v1625;
  int v1626;
  uint64_t v1627;
  unint64_t v1628;
  __int128 v1629;
  __int128 v1630;
  int v1631;
  uint64_t v1632;
  __int128 v1633;
  __int128 v1634;
  uint64_t v1635;
  __int16 v1636;
  int8x16_t v1637;
  unint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  __int16 v1641;
  unint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  __int16 v1647;
  unint64_t v1648;
  __int128 v1649;
  __int128 v1650;
  __int16 v1651;
  unint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  __int16 v1657;
  unint64_t v1658;
  int8x16_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  __int16 v1662;
  unint64_t v1663;
  int8x16_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  __int16 v1667;
  int8x16_t v1668;
  unint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  __int16 v1672;
  unint64_t v1673;
  int8x16_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  _QWORD v1677[2];
  _BYTE v1678[56];
  _QWORD v1679[2];
  _BYTE v1680[56];
  _QWORD v1681[2];
  _BYTE v1682[56];
  __int16 v1683;
  int8x16_t v1684;
  unint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  __int16 v1688;
  int8x16_t v1689;
  unint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  __int16 v1693;
  unint64_t v1694;
  unint64_t v1695;
  unint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  __int16 v1699;
  unint64_t v1700;
  int8x16_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  __int16 v1704;
  unint64_t v1705;
  int8x16_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  __int16 v1709;
  int8x16_t v1710;
  unint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  __int16 v1714;
  unint64_t v1715;
  int8x16_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  __int16 v1719;
  unint64_t v1720;
  int8x16_t v1721;
  uint64_t v1722;
  uint64_t v1723;
  __int16 v1724;
  unint64_t v1725;
  int8x16_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  __int16 v1729;
  unint64_t v1730;
  int8x16_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  __int16 v1734;
  unint64_t v1735;
  int8x16_t v1736;
  uint64_t v1737;
  uint64_t v1738;
  __int16 v1739;
  __int128 v1740;
  uint64_t v1741;
  uint64_t v1742;
  JSC::DFG::Graph *v1743;
  __int16 v1744;
  __int128 v1745;
  uint64_t v1746;
  uint64_t v1747;
  JSC::DFG::Graph *v1748;
  __int16 v1749;
  int8x16_t v1750;
  unint64_t v1751;
  uint64_t v1752;
  uint64_t v1753;
  __int16 v1754;
  unint64_t v1755;
  int8x16_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  __int16 v1759;
  int8x16_t v1760;
  unint64_t v1761;
  uint64_t v1762;
  uint64_t v1763;
  __int16 v1764;
  int8x16_t v1765;
  unint64_t v1766;
  uint64_t v1767;
  uint64_t v1768;
  __int16 v1769;
  int8x16_t v1770;
  unint64_t v1771;
  uint64_t v1772;
  uint64_t v1773;
  __n128 v1774;
  _OWORD v1775[2];

  v1060 = (JSC::DFG::Graph *)MEMORY[0x1E0C80A78](a1, a2);
  v1061 = v2;
  v7 = (uint64_t)v3;
  if (*((int *)v1060 + 238) <= 0)
  {
    v938 = v4;
    v939 = (unsigned __int16 *)v3;
    hasArrayMode = JSC::DFG::Node::hasArrayMode(v3);
    v7 = (uint64_t)v939;
    v4 = v938;
    if (hasArrayMode)
    {
      v941 = v939[9];
      if (v941 > 0xC9)
      {
        if (v941 - 202 > 0x3E || ((1 << (v941 + 54)) & 0x400000000E002FEFLL) == 0)
        {
          v942 = v941 - 333;
          if (v942 > 0x3A || ((1 << v942) & 0x7A8000000000003) == 0)
          {
LABEL_1064:
            JSC::DFG::Graph::logAssertionFailure(v1060, (JSC::DFG::Node *)v939, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Unhandled ArrayMode opcode.");
            __break(0xC471u);
            JUMPOUT(0x198366714);
          }
        }
        goto LABEL_280;
      }
      v1046 = v941 - 101;
      if (v941 - 101 > 0x3E)
        goto LABEL_1063;
      if (((1 << v1046) & 0x7E0070000000000FLL) != 0)
        goto LABEL_280;
      v4 = v938;
      v7 = (uint64_t)v939;
      if (((1 << v1046) & 0x18000000000) == 0)
      {
LABEL_1063:
        if (v941 - 92 >= 2)
          goto LABEL_1064;
        goto LABEL_280;
      }
    }
  }
  v8 = *(unsigned __int16 *)(v7 + 18);
  v9 = &v1539;
  v10 = &v1388;
  switch(*(_WORD *)(v7 + 18))
  {
    case 0:
    case 1:
    case 2:
      v26 = *(_QWORD *)(v7 + 72);
      v28 = *(_QWORD *)(v7 + 24);
      v27 = *(_QWORD *)(v7 + 32);
      v29 = *(_QWORD *)(v7 + 40);
      v30 = *(uint64_t **)v4;
      v32 = (uint64_t *)(*(_QWORD *)v4 + 32);
      v31 = *v32;
      v33 = *(_QWORD *)(*(_QWORD *)v4 + 16);
      if (*v32
        || (WTF::HashTable<JSC::DFG::PureValue,WTF::KeyValuePair<JSC::DFG::PureValue,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PureValue,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashMap<JSC::DFG::PureValue,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PureValue>>::rehash((uint64_t *)(*(_QWORD *)v4 + 32), 8u, 0), (v31 = *v32) != 0))
      {
        v34 = *(_DWORD *)(v31 - 8);
      }
      else
      {
        v34 = 0;
      }
      v35 = v28 & 0xFFFCFFFFFFFFFFFFLL;
      v36 = v27 & 0xFFFCFFFFFFFFFFFFLL;
      v37 = v29 & 0xFFFCFFFFFFFFFFFFLL;
      v38 = 9 * ((~((_DWORD)v8 << 15) + v8) ^ ((~((_DWORD)v8 << 15) + v8) >> 10));
      v39 = (((v38 ^ (v38 >> 6)) + ~((v38 ^ (v38 >> 6)) << 11)) ^ (((v38 ^ (v38 >> 6)) + ~((v38 ^ (v38 >> 6)) << 11)) >> 16))
          + v26;
      if ((v28 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v155 = (v35 + ~(v28 << 32)) ^ ((v35 + ~(v28 << 32)) >> 22);
        v156 = 9 * ((v155 + ~(v155 << 13)) ^ ((v155 + ~(v155 << 13)) >> 8));
        v157 = (v156 ^ (v156 >> 15)) + ~((v156 ^ (v156 >> 15)) << 27);
        v40 = (v157 >> 31) ^ v157;
        if ((v27 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v158 = (v36 + ~(v27 << 32)) ^ ((v36 + ~(v27 << 32)) >> 22);
          v159 = 9 * ((v158 + ~(v158 << 13)) ^ ((v158 + ~(v158 << 13)) >> 8));
          v160 = (v159 ^ (v159 >> 15)) + ~((v159 ^ (v159 >> 15)) << 27);
          v40 = 3 * v40 + ((v160 >> 31) ^ v160);
          if ((v29 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v161 = 3 * v40;
            v162 = (v37 + ~(v29 << 32)) ^ ((v37 + ~(v29 << 32)) >> 22);
            v163 = 9 * ((v162 + ~(v162 << 13)) ^ ((v162 + ~(v162 << 13)) >> 8));
            v164 = (v163 ^ (v163 >> 15)) + ~((v163 ^ (v163 >> 15)) << 27);
            v40 = v161 + ((v164 >> 31) ^ v164);
          }
        }
      }
      else
      {
        v40 = 0;
      }
      v41 = v40 ^ v39;
      v42 = 0;
      v43 = 1;
      if (!(_DWORD)v27)
      {
        while (1)
        {
          v44 = v41 & v34;
          v45 = (unsigned __int16 *)(v31 + 56 * v44);
          v63 = *v45;
          v64 = *((_QWORD *)v45 + 4);
          v48 = *((_QWORD *)v45 + 5);
          v65 = *((_QWORD *)v45 + 1);
          v50 = *((_QWORD *)v45 + 2);
          if (!v48)
          {
            v66 = v63 == 433 && v64 == 0;
            v67 = v66 && v65 == 0;
            if (v67 && v50 == 0)
            {
              v5 = *((_QWORD *)v45 + 3);
              if (!v5)
                goto LABEL_88;
            }
          }
          v69 = !v48 && v63 == (_DWORD)v8;
          v70 = v69 && v64 == v26;
          v71 = v70 && v65 == v35;
          v72 = v71 && v50 == v36;
          if (v72 && *((_QWORD *)v45 + 3) == v37)
            break;
          if (v63 == 433 && v64 != 0)
            v42 = (unsigned __int16 *)(v31 + 56 * v44);
          v41 = v43 + v44;
          ++v43;
        }
LABEL_52:
        v59 = *(JSC::DFG::Node **)(v31 + 56 * v44 + 48);
        if (!v59)
          return;
        v60 = v30[2];
        v61 = (JSC::DFG::Graph *)*v30;
        goto LABEL_174;
      }
      while (1)
      {
        v44 = v41 & v34;
        v45 = (unsigned __int16 *)(v31 + 56 * v44);
        v46 = *v45;
        v47 = *((_QWORD *)v45 + 4);
        v48 = *((_QWORD *)v45 + 5);
        v49 = *((_QWORD *)v45 + 1);
        v50 = *((_QWORD *)v45 + 2);
        if (!v48)
        {
          v51 = v46 == 433 && v47 == 0;
          v52 = v51 && v49 == 0;
          if (v52 && v50 == 0)
          {
            v5 = *((_QWORD *)v45 + 3);
            if (!v5)
              break;
          }
        }
        if (v48)
          v54 = 0;
        else
          v54 = v46 == (_DWORD)v8;
        v57 = v54 && v47 == v26 && v49 == v35 && v50 == v36;
        if (v57 && *((_QWORD *)v45 + 3) == v37)
          goto LABEL_52;
        if (v46 == 433 && v47 != 0)
          v42 = (unsigned __int16 *)(v31 + 56 * v44);
        v41 = v43 + v44;
        ++v43;
      }
LABEL_88:
      if (v42)
      {
        *v42 = 433;
        *(_OWORD *)(v42 + 4) = 0u;
        *(_OWORD *)(v42 + 12) = 0u;
        *(_OWORD *)(v42 + 20) = 0u;
        --*(_DWORD *)(*v32 - 16);
        v45 = v42;
      }
      *v45 = v8;
      v73 = v1775[0];
      v45[3] = WORD2(v1775[0]);
      *(_DWORD *)(v45 + 1) = v73;
      *((_QWORD *)v45 + 1) = v35;
      *((_QWORD *)v45 + 2) = v36;
      *((_QWORD *)v45 + 3) = v37;
      *((_QWORD *)v45 + 4) = v26;
      *((_QWORD *)v45 + 5) = 0;
      *((_QWORD *)v45 + 6) = v33;
      v74 = *v32;
      if (*v32)
        v75 = *(_DWORD *)(v74 - 12) + 1;
      else
        v75 = 1;
      *(_DWORD *)(v74 - 12) = v75;
      v76 = *v32;
      if (*v32)
        v77 = *(_DWORD *)(v76 - 12);
      else
        v77 = 0;
      v78 = (*(_DWORD *)(v76 - 16) + v77);
      v79 = *(unsigned int *)(v76 - 4);
      if (v79 <= 0x400)
      {
        if (3 * v79 > 4 * v78)
          return;
        if (!(_DWORD)v79)
        {
          v80 = 8;
LABEL_98:
          WTF::HashTable<JSC::DFG::PureValue,WTF::KeyValuePair<JSC::DFG::PureValue,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PureValue,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashMap<JSC::DFG::PureValue,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PureValue>>::rehash(v32, v80, v45);
          return;
        }
LABEL_242:
        v80 = (_DWORD)v79 << (6 * *(_DWORD *)(v76 - 12) >= (2 * v79));
        goto LABEL_98;
      }
      if (v79 <= 2 * v78)
        goto LABEL_242;
      return;
    case 3:
    case 4:
    case 5:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1D:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x60:
    case 0x61:
    case 0x84:
    case 0x85:
    case 0x8C:
    case 0x8D:
    case 0x90:
    case 0xAA:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0x101:
    case 0x102:
    case 0x113:
    case 0x117:
    case 0x118:
    case 0x126:
    case 0x129:
    case 0x153:
    case 0x154:
    case 0x166:
    case 0x16C:
    case 0x16D:
    case 0x16E:
    case 0x16F:
    case 0x170:
    case 0x171:
    case 0x172:
    case 0x173:
    case 0x174:
    case 0x175:
    case 0x176:
    case 0x177:
    case 0x17B:
    case 0x1A2:
    case 0x1A3:
    case 0x1A4:
    case 0x1A5:
    case 0x1A6:
    case 0x1A7:
    case 0x1A8:
    case 0x1A9:
    case 0x1AA:
      return;
    case 6:
    case 0x88:
    case 0x89:
    case 0xD6:
    case 0x103:
    case 0x104:
    case 0x105:
    case 0x109:
    case 0x10C:
    case 0x10E:
    case 0x110:
    case 0x111:
    case 0x112:
    case 0x116:
    case 0x119:
    case 0x11A:
    case 0x11B:
    case 0x11C:
    case 0x11D:
    case 0x11E:
    case 0x11F:
    case 0x120:
    case 0x121:
    case 0x122:
    case 0x144:
    case 0x15A:
    case 0x15B:
    case 0x15C:
    case 0x15D:
    case 0x15E:
    case 0x15F:
    case 0x160:
    case 0x161:
    case 0x162:
    case 0x163:
    case 0x16B:
      goto LABEL_288;
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0x54:
    case 0x5E:
    case 0x5F:
    case 0x62:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x8E:
    case 0x8F:
    case 0xA7:
    case 0xA8:
    case 0xB0:
    case 0xB1:
    case 0xC3:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xD4:
    case 0xD5:
    case 0xD8:
    case 0xD9:
    case 0xDB:
    case 0xDC:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
    case 0x100:
    case 0x108:
    case 0x124:
    case 0x125:
    case 0x13B:
    case 0x13C:
    case 0x13D:
    case 0x140:
    case 0x141:
    case 0x147:
    case 0x14A:
    case 0x14D:
    case 0x14E:
    case 0x14F:
    case 0x150:
    case 0x151:
    case 0x152:
    case 0x155:
    case 0x156:
    case 0x181:
    case 0x184:
    case 0x185:
    case 0x186:
    case 0x187:
    case 0x19B:
      break;
    case 0xB:
      v1571 = 36;
      v1572 = 98306;
      v1573 = 0u;
      v1574 = 0u;
      v1575 = 0;
      v171 = *(uint64_t **)v4;
      v172 = &v1571;
      goto LABEL_210;
    case 0xC:
      v204 = *v1061;
      v205 = 98306;
      goto LABEL_282;
    case 0xD:
      v1010 = (uint64_t **)v4;
      v1011 = *(_QWORD *)(v7 + 72);
      if (v1011)
      {
        v1047 = (HIDWORD(*(_QWORD *)(v1011 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v1011 + 24) >> 28) >> 24 << 20)) + 4;
        v1012 = ((unint64_t)v1047 << 15) | ((unint64_t)(v1047 >> 31) << 47) | 2;
      }
      else
      {
        v1012 = 131074;
      }
      v1566 = 37;
      v1568 = 0u;
      v1569 = 0u;
      v1567 = v1012;
      v1570 = 0;
      JSC::DFG::LazyNode::LazyNode(v1565, (JSC::DFG::Node *)v7);
      v173 = v1565[0];
      v174 = v1565[1];
      v171 = *v1010;
      v172 = &v1566;
      goto LABEL_212;
    case 0xE:
      v204 = *v1061;
      v205 = 131074;
      goto LABEL_282;
    case 0xF:
      v165 = *(_QWORD **)(v7 + 72);
      v166 = v165;
      do
      {
        v167 = v166;
        v166 = (_QWORD *)*v166;
      }
      while (v166);
      if (v167 != v165)
      {
        *v165 = v167;
        v165 = *(_QWORD **)(v7 + 72);
      }
      v168 = v165;
      do
      {
        v169 = v168;
        v168 = (_QWORD *)*v168;
      }
      while (v168);
      if (v169 != v165)
        *v165 = v169;
      v170 = (v169[3] << 15) | 2;
      v1560 = 36;
      v1561 = v170;
      v1562 = 0u;
      v1563 = 0u;
      v1564 = 0;
      v171 = *(uint64_t **)v4;
      v172 = &v1560;
      goto LABEL_210;
    case 0x10:
      v11 = *(_QWORD **)(v7 + 72);
      v12 = v11;
      do
      {
        v13 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
      if (v13 != v11)
        *v11 = v13;
      v14 = v13[3];
      v15 = *v1061;
      v17 = *v1061 + 5;
      v16 = *v17;
      if (!*v17)
        goto LABEL_101;
      v18 = v14 << 15 >> 15;
      v19 = *(_DWORD *)(v16 - 8);
      v20 = (v18 + ~(v14 << 32)) ^ ((unint64_t)(v18 + ~(v14 << 32)) >> 22);
      v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
      v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
      v23 = v19 & ((v22 >> 31) ^ v22);
      v24 = *(_QWORD *)(v16 + 16 * v23);
      if (v24 == v18)
        goto LABEL_100;
      v25 = 1;
      while (v24 != 0x8000000000000000)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(_QWORD *)(v16 + 16 * v23);
        ++v25;
        if (v24 == v18)
          goto LABEL_100;
      }
      v23 = *(unsigned int *)(v16 - 4);
LABEL_100:
      if (v23 != *(_DWORD *)(v16 - 4))
      {
        v142 = v7;
        v143 = v4;
        v144 = (_QWORD *)(v16 + 16 * v23);
        v145 = v144[1];
        *v144 = 0x7FFFFFFFFFFFFFFFLL;
        v144[1] = 0;
        if (v145)
          WTF::fastFree(v145, v3, (uint64_t)&v1539, v4, (uint64_t)&v1388, v5, v7, v6);
        ++*(_DWORD *)(*v17 - 16);
        v146 = *v17;
        if (*v17)
          v147 = *(_DWORD *)(v146 - 12) - 1;
        else
          v147 = -1;
        v4 = v143;
        v7 = v142;
        v9 = &v1539;
        *(_DWORD *)(v146 - 12) = v147;
        v148 = *v17;
        if (*v17)
        {
          v149 = 6 * *(_DWORD *)(v148 - 12);
          v150 = *(_DWORD *)(v148 - 4);
          if (v149 < v150 && v150 >= 9)
          {
            v9 = &v1539;
            v7 = v142;
            v4 = v143;
          }
        }
      }
LABEL_101:
      v83 = v15[6];
      v81 = v15 + 6;
      v82 = v83;
      if (!v83)
        goto LABEL_129;
      v84 = *(unsigned int *)(v82 - 4);
      if (!(_DWORD)v84)
        goto LABEL_129;
      v85 = 0;
      do
      {
        v86 = *(_QWORD *)(v82 + 8 * --v84);
        if (v86 + 1 >= 2)
        {
          v87 = *(_QWORD *)(v86 + 8);
          if (v87 == ((v14 << 15) | 2))
          {
LABEL_121:
            *(_QWORD *)(v82 + 8 * v84) = -1;
            v1058 = v4;
            v91 = v7;
            WTF::fastFree(v86, v3, (uint64_t)&v1539, v4, (uint64_t)v10, v5, v7, v6);
            v9 = &v1539;
            v7 = v91;
            v4 = v1058;
            ++v85;
          }
          else
          {
            LOWORD(v88) = ((_WORD)v14 << 15) | 2;
            while (1)
            {
              v89 = v88 & 0x3FFF;
              if (v89 == 1)
                break;
              if (v89 == 2)
                v90 = 16385;
              else
                v90 = 16387;
              if ((v88 & 0x4000) != 0)
                v88 = v90;
              else
                v88 = v89 | 0x4000u;
              if (v89 == 40)
                v88 = 16385;
              if (v89 == 3)
                v88 = 16385;
              if (v88 == v87)
                goto LABEL_121;
            }
          }
        }
      }
      while ((_DWORD)v84);
      v92 = *v81;
      if (v85)
      {
        *(_DWORD *)(v92 - 16) += v85;
        v183 = *v81;
        if (*v81)
          v184 = *(_DWORD *)(v183 - 12);
        else
          v184 = 0;
        *(_DWORD *)(v183 - 12) = v184 - v85;
        v92 = *v81;
      }
      if (!v92)
        goto LABEL_129;
      v93 = *(_DWORD *)(v92 - 4);
      v94 = *(unsigned int *)(v92 - 12);
      v95 = v93 < 9 || 6 * (int)v94 >= v93;
      if (v95)
        goto LABEL_129;
      v265 = (v94 - 1) | ((v94 - 1) >> 1) | ((((_DWORD)v94 - 1) | ((v94 - 1) >> 1)) >> 2);
      v266 = v265 | (v265 >> 4) | ((v265 | (v265 >> 4)) >> 8);
      v267 = (v266 | HIWORD(v266)) + 1;
      if (v267 > 0x400)
      {
        if (v267 > 2 * v94)
          goto LABEL_576;
      }
      else if (3 * v267 > 4 * v94)
      {
LABEL_339:
        v268 = (double)v94;
        v269 = (double)v267 * 0.604166667;
        v270 = v7;
        v271 = v4;
        goto LABEL_340;
      }
      LODWORD(v267) = 2 * v267;
      if (v267 <= 0x400)
        goto LABEL_339;
LABEL_576:
      v270 = v7;
      v271 = v4;
      v268 = (double)v94;
      v269 = (double)v267 * 0.416666667;
LABEL_340:
      if (v269 <= v268)
        LODWORD(v267) = 2 * v267;
      if (v267 <= 8)
        v272 = 8;
      else
        v272 = v267;
      v4 = v271;
      v7 = v270;
      v9 = &v1539;
LABEL_129:
      v96 = *(_QWORD **)(v7 + 72);
      v97 = v96;
      do
      {
        v98 = v97;
        v97 = (_QWORD *)*v97;
      }
      while (v97);
      if (v98 != v96)
        *v96 = v98;
      v99 = 0;
      v100 = v98[3];
      LODWORD(v1556) = 36;
      v1557 = 0u;
      v1558 = 0u;
      *((_QWORD *)&v1556 + 1) = (v100 << 15) | 2;
      v1559 = 0;
      v101 = *(_QWORD *)(v7 + 24);
      v102 = v101 & 0xFF00FFFFFFFFFFFFLL;
      if ((v101 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v138 = *(unsigned __int16 *)((v101 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
        if (v138 <= 2)
        {
          v99 = *(_QWORD *)(v102 + 72);
          if ((_DWORD)v138)
          {
            if ((_DWORD)v138 != 1)
              v138 = 2;
            v99 |= v138;
          }
        }
        else
        {
          v99 = 0;
        }
      }
      v30 = *(uint64_t **)v4;
      v1774.n128_u64[0] = v102;
      v1774.n128_u64[1] = v99;
      v104 = v30 + 5;
      v103 = v30[5];
      v105 = v100 << 15 >> 15;
      if (v103
      {
        v106 = *(_DWORD *)(v103 - 8);
      }
      else
      {
        v106 = 0;
      }
      v107 = (v105 + ~(v100 << 32)) ^ ((unint64_t)(v105 + ~(v100 << 32)) >> 22);
      v108 = 9 * ((v107 + ~(v107 << 13)) ^ ((v107 + ~(v107 << 13)) >> 8));
      v109 = (v108 ^ (v108 >> 15)) + ~((v108 ^ (v108 >> 15)) << 27);
      v110 = v106 & ((v109 >> 31) ^ v109);
      v111 = (uint64_t *)(v103 + 16 * v110);
      v112 = *v111;
      if (*v111 != 0x8000000000000000)
      {
        v113 = 0;
        v114 = 1;
        while (v112 != v105)
        {
          if (v112 == 0x7FFFFFFFFFFFFFFFLL)
            v113 = v111;
          v110 = (v110 + v114) & v106;
          v111 = (uint64_t *)(v103 + 16 * v110);
          v112 = *v111;
          ++v114;
          if (*v111 == 0x8000000000000000)
          {
            if (!v113)
              goto LABEL_144;
            *v113 = 0x8000000000000000;
            v113[1] = 0;
            --*(_DWORD *)(*v104 - 16);
            *v113 = v105;
            v113[1] = 0;
            goto LABEL_147;
          }
        }
        v182 = v111[1];
        if (*(_DWORD *)v182 == 36
          && *(_QWORD *)(v182 + 8) == ((v100 << 15) | 2)
          && !*(_QWORD *)(v182 + 16)
          && *(_QWORD *)(v182 + 32) <= 3uLL
          && !*(_QWORD *)(v182 + 24)
          && !*(_QWORD *)(v182 + 40)
          && !*(_QWORD *)(v182 + 48))
        {
          v132 = *(_QWORD *)(v182 + 56);
          v131 = *(_QWORD *)(v182 + 64);
          goto LABEL_163;
        }
        if (v350)
        {
          v132 = *(_QWORD *)(v350 + 56);
          v131 = *(_QWORD *)(v350 + 64);
          goto LABEL_163;
        }
        goto LABEL_420;
      }
LABEL_144:
      v115 = v111[1];
      *v111 = v105;
      v111[1] = 0;
      if (v115)
        WTF::fastFree(v115, v3, (uint64_t)v9, v4, (uint64_t)v10, v5, v7, v6);
      v113 = v111;
LABEL_147:
      v116 = *v104;
      if (*v104)
        v117 = *(_DWORD *)(v116 - 12) + 1;
      else
        v117 = 1;
      *(_DWORD *)(v116 - 12) = v117;
      v118 = *v104;
      if (*v104)
        v119 = *(_DWORD *)(v118 - 12);
      else
        v119 = 0;
      v120 = (*(_DWORD *)(v118 - 16) + v119);
      v121 = *(unsigned int *)(v118 - 4);
      if (v121 > 0x400)
      {
        if (v121 > 2 * v120)
          goto LABEL_153;
      }
      else
      {
        if (3 * v121 > 4 * v120)
          goto LABEL_153;
        if (!(_DWORD)v121)
        {
          v181 = 8;
          goto LABEL_222;
        }
      }
      v181 = (_DWORD)v121 << (6 * *(_DWORD *)(v118 - 12) >= (2 * v121));
LABEL_222:
LABEL_153:
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v123 = *(_QWORD *)(StatusReg + 752);
      if (v123)
      {
        v124 = (_BYTE *)(v123 + 9040);
        *(_BYTE *)(v123 + 9040) = 1;
        v125 = *(unsigned int *)(v123 + 9056);
        if ((_DWORD)v125)
        {
          *(_DWORD *)(v123 + 9056) = v125 - *(_DWORD *)(v123 + 9060);
          casual = *(_QWORD *)(v123 + 9048) - v125;
LABEL_156:
          *v124 = 0;
          goto LABEL_157;
        }
        v139 = *(_QWORD *)(v123 + 9080);
        v140 = *(_QWORD *)(v123 + 9064);
        if (v139)
        {
LABEL_178:
          v141 = __clz(v139);
          *(_QWORD *)(v123 + 9080) = v139 & ~(0x8000000000000000 >> v141);
          casual = v140 + 16 * v141;
          goto LABEL_156;
        }
        if (*(_BYTE *)(v123 + 9045) == 6)
        {
          v545 = *(_DWORD *)(v123 + 9076);
          v546 = *(unsigned int *)(v123 + 9072);
          if (v546 < v545)
          {
            *(_QWORD *)&v124[8 * v546 + 56] = 0;
            v547 = (unint64_t *)(v123 + 8 * v546 + 9104);
            v548 = v545 - 1 - v546;
            while (v548)
            {
              v140 += 1024;
              v550 = *v547++;
              v549 = v550;
              LODWORD(v546) = v546 + 1;
              --v548;
              if (v550)
              {
                v139 = __rbit64(v549);
                *(_DWORD *)(v123 + 9072) = v546;
                *(_QWORD *)(v123 + 9064) = v140;
                goto LABEL_178;
              }
            }
            *(_DWORD *)(v123 + 9072) = v545;
          }
        }
        *v124 = 0;
      }
      casual = bmalloc_allocate_casual(80, 1);
LABEL_157:
      v127 = v1557;
      *(_OWORD *)casual = v1556;
      *(_OWORD *)(casual + 16) = v127;
      *(_OWORD *)(casual + 32) = v1558;
      *(_QWORD *)(casual + 48) = v1559;
      *(_QWORD *)(casual + 56) = v102;
      *(_QWORD *)(casual + 64) = v99;
      *(_DWORD *)(casual + 72) = 0;
      v128 = v113[1];
      v113[1] = casual;
      if (!v128)
        goto LABEL_420;
      v129 = *(_QWORD *)(StatusReg + 752);
      if (!v129)
      {
        pas_try_deallocate_slow_no_cache(v128, (uint64_t)&bmalloc_heap_config, 1);
        goto LABEL_420;
      }
      if (!(v128 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v128 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v128)) & 1) != 0)
      {
LABEL_161:
        v130 = *(unsigned int *)(v129 + 8000);
        if (v130 < 0x3E7)
        {
          v131 = 0;
          v132 = 0;
          *(_QWORD *)(v129 + 8 * v130) = v128 | 0x5000000000000;
          *(_DWORD *)(v129 + 8000) = v130 + 1;
LABEL_163:
          *(_QWORD *)&v1775[0] = v132;
          *((_QWORD *)&v1775[0] + 1) = v131;
          if (v131 <= 3 && !v132)
            return;
          v133 = v30[2];
          if (*(_WORD *)(v133 + 18) == 15)
          {
            *(_QWORD *)(v133 + 24) = 0;
            v134 = (JSC::DFG::Graph *)*v30;
            v135 = *(_DWORD *)(*v30 + 944);
            if (v135 && v135 != 2)
            {
              if ((_BYTE)qword_1ECF4C32A)
                v236 = 0;
              else
                v236 = byte_1ECF4C323 == 0;
              if (!v236 || BYTE2(qword_1ECF4C32A) != 0)
                WTF::dataLog<char [16]>("Dethreading DFG graph.\n");
              v238 = *((unsigned int *)v134 + 15);
              while ((_DWORD)v238)
              {
                if (*((_DWORD *)v134 + 15) <= --v238)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198366AFCLL);
                }
                v239 = *(_QWORD *)(*((_QWORD *)v134 + 6) + 8 * v238);
                if (v239)
                {
                  v240 = *(_DWORD *)(v239 + 36);
                  if (v240)
                  {
                    v241 = v240 - 1;
                    v242 = 8 * v241;
                    do
                    {
                      if (*(_DWORD *)(v239 + 36) <= v241)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19836695CLL);
                      }
                      v243 = *(_QWORD **)(*(_QWORD *)(v239 + 24) + v242);
                      v243[3] = 0;
                      v243[4] = 0;
                      v243[5] = 0;
                      v242 -= 8;
                      --v241;
                    }
                    while (v241 != -1);
                  }
                }
              }
              *((_DWORD *)v134 + 236) = 0;
            }
          }
          if (!v102 || v30[2] != v102)
            return;
          v137 = v30[3];
          *(_QWORD *)(JSC::DFG::LazyNode::ensureIsNode((uint64_t *)v1775, (uint64_t)(v30 + 8), v137, 0, (uint64_t)v10, v5, v7, v6)+ 96) = v137;
          v60 = v30[2];
          v61 = (JSC::DFG::Graph *)*v30;
          v59 = *(JSC::DFG::Node **)&v1775[0];
LABEL_174:
          JSC::DFG::Node::replaceWith(v60, v61, v59, v50, v48, v5, v7, v6);
          *((_BYTE *)v30 + 8) = 1;
          return;
        }
        pas_thread_local_cache_append_deallocation_slow(v129, v128, (os_unfair_lock_s *)5, v4, (uint64_t)v10, v5, v7, v6);
LABEL_420:
        v131 = 0;
        v132 = 0;
        goto LABEL_163;
      }
      if (v128 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v128 >> 24)
      {
        v4 = 0;
      }
      else
      {
        v4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v128 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v128) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)v4 == 1)
          goto LABEL_161;
      }
      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v129, v128, 1, v4, (uint64_t)v10, v5, v7, v6);
      goto LABEL_420;
    case 0x11:
      v1013 = (**(_QWORD **)(v7 + 72) << 15) | 2;
      v1014 = (uint64_t **)v4;
      v1015 = v7;
      v1545 = 36;
      v1547 = 0u;
      v1548 = 0u;
      v1546 = v1013;
      v1549 = 0;
      JSC::DFG::LazyNode::LazyNode(v1544, (JSC::DFG::Node *)(*(_QWORD *)(v1015 + 24) & 0xFF00FFFFFFFFFFFFLL));
      v173 = v1544[0];
      v174 = v1544[1];
      v171 = *v1014;
      v172 = &v1545;
      goto LABEL_212;
    case 0x12:
      v880 = *(_QWORD *)(v7 + 72);
      v881 = 2;
      goto LABEL_1010;
    case 0x13:
      v1016 = (**(_QWORD **)(v7 + 72) << 15) | 2;
      v1551 = 36;
      v1552 = v1016;
      v1553 = 0u;
      v1554 = 0u;
      v1555 = 0;
      v1017 = (uint64_t **)v4;
      JSC::DFG::LazyNode::LazyNode(v1550, (JSC::DFG::Node *)v7);
      v173 = v1550[0];
      v174 = v1550[1];
      v171 = *v1017;
      v172 = &v1551;
      goto LABEL_212;
    case 0x1C:
      v152 = *(_QWORD **)(v7 + 72);
      v153 = v152;
      do
      {
        v154 = v153;
        v153 = (_QWORD *)*v153;
      }
      while (v153);
      if (v154 != v152)
        *v152 = v154;
      return;
    case 0x1E:
      v1007 = *(unsigned int *)(v7 + 72);
      v1683 = 30;
      v1008 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1684 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1685 = v1008;
      v1686 = v1007;
      v1687 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1683;
      goto LABEL_217;
    case 0x22:
      v204 = *v1061;
      v205 = 16419;
      goto LABEL_282;
    case 0x28:
      v1631 = 23;
      v1633 = 0u;
      v1634 = 0u;
      v1632 = 16422;
      v1635 = 0;
      v171 = *(uint64_t **)v4;
      v172 = &v1631;
      goto LABEL_210;
    case 0x29:
      v1009 = *(_QWORD *)(v7 + 24);
      if (((v1009 >> 50) & 0x3F) - 26 > 2)
        break;
      v1704 = 41;
      v1706 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1708 = 0;
      v1705 = v1009 & 0xFFFCFFFFFFFFFFFFLL;
      v1707 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1704;
      goto LABEL_217;
    case 0x2A:
      v600 = *(_QWORD *)(v7 + 24);
      if ((v600 & 0xFC000000000000) == 0)
        break;
      v1699 = 42;
      v1701 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1703 = 0;
      v1700 = v600 & 0xFFFCFFFFFFFFFFFFLL;
      v1702 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1699;
      goto LABEL_217;
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x32:
    case 0x34:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
      v518 = *(_QWORD *)(v7 + 24);
      v519 = (v518 >> 50) & 0x3F;
      switch((_DWORD)v519)
      {
        case 0x1A:
          v520 = *(_QWORD *)(v7 + 32);
          v521 = v520 & 0xFC000000000000;
          v522 = 0x68000000000000;
          break;
        case 0x1C:
          v520 = *(_QWORD *)(v7 + 32);
          v521 = v520 & 0xFC000000000000;
          v522 = 0x70000000000000;
          break;
        case 0x1B:
          v520 = *(_QWORD *)(v7 + 32);
          v521 = v520 & 0xFC000000000000;
          v522 = 0x6C000000000000;
          break;
        default:
          goto LABEL_280;
      }
      if (v521 != v522)
        break;
      v1588 = *(_WORD *)(v7 + 18);
      v845 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1589 = v518 & 0xFFFCFFFFFFFFFFFFLL;
      v1590 = v520 & 0xFFFCFFFFFFFFFFFFLL;
      v1593 = 0;
      v1591 = v845;
      v1592 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1588;
      goto LABEL_217;
    case 0x2C:
    case 0x2E:
    case 0x30:
    case 0x31:
    case 0x33:
    case 0x35:
      v230 = *(_QWORD *)(v7 + 24);
      if ((v230 & 0xFC000000000000) == 0)
        break;
      v231 = *(_QWORD *)(v7 + 32);
      if ((v231 & 0xFC000000000000) == 0)
        break;
      v1693 = *(_WORD *)(v7 + 18);
      v1048 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1694 = v230 & 0xFFFCFFFFFFFFFFFFLL;
      v1695 = v231 & 0xFFFCFFFFFFFFFFFFLL;
      v1698 = 0;
      v1696 = v1048;
      v1697 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1693;
      goto LABEL_217;
    case 0x36:
    case 0x38:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x43:
    case 0x4A:
    case 0x5B:
    case 0x86:
    case 0xA5:
    case 0xA6:
    case 0xA9:
    case 0xBB:
    case 0xBC:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xEE:
    case 0xF0:
    case 0x128:
    case 0x12A:
    case 0x12D:
    case 0x12E:
    case 0x12F:
    case 0x130:
    case 0x133:
    case 0x134:
    case 0x137:
    case 0x138:
    case 0x139:
    case 0x13A:
    case 0x14B:
    case 0x14C:
    case 0x17C:
      v1764 = *(_WORD *)(v7 + 18);
      v178 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1765 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1767 = 0;
      v1768 = 0;
      v1766 = v178;
      v179 = *(_QWORD *)v4;
      v180 = &v1764;
      goto LABEL_217;
    case 0x37:
    case 0x39:
    case 0x3E:
    case 0x45:
      v219 = *(unsigned int *)(v7 + 72);
      v1667 = *(_WORD *)(v7 + 18);
      v220 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1668 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1669 = v220;
      v1670 = v219;
      v1671 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1667;
      goto LABEL_217;
    case 0x3F:
      v898 = *(_QWORD *)(v7 + 24);
      if (((v898 >> 50) & 0x3F) - 1 > 1)
        break;
      v1719 = 63;
      v1721 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1723 = 0;
      v1720 = v898 & 0xFFFCFFFFFFFFFFFFLL;
      v1722 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1719;
      goto LABEL_217;
    case 0x40:
    case 0x42:
    case 0x44:
      v227 = *(_QWORD *)(v7 + 24);
      v228 = (v227 >> 50) & 0x3F;
      if ((_DWORD)v228 == 49 || (_DWORD)v228 == 1 || (_DWORD)v228 == 52)
      {
        v229 = *(unsigned int *)(v7 + 72);
        v1662 = *(_WORD *)(v7 + 18);
        v1663 = v227 & 0xFFFCFFFFFFFFFFFFLL;
        v1664 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
        v1665 = v229;
        v1666 = 0;
        v179 = *(_QWORD *)v4;
        v180 = &v1662;
        goto LABEL_217;
      }
      if ((_DWORD)v228)
      {
        JSC::DFG::Graph::logAssertionFailure(v1060, (JSC::DFG::Node *)v7, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x198362C30);
      }
      break;
    case 0x41:
      v528 = *(_QWORD *)(v7 + 24);
      v529 = (v528 >> 50) & 0x3F;
      if ((_DWORD)v529 != 49 && (_DWORD)v529 != 1 && (_DWORD)v529 != 52)
        break;
      v530 = *(unsigned int *)(v7 + 72);
      v1714 = 65;
      v1716 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1715 = v528 & 0xFFFCFFFFFFFFFFFFLL;
      v1717 = v530;
      v1718 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1714;
      goto LABEL_217;
    case 0x46:
      v525 = *(_QWORD *)(v7 + 24);
      v526 = (v525 >> 50) & 0x3F;
      if ((_DWORD)v526 != 49 && (_DWORD)v526 != 1)
        break;
      v527 = *(unsigned int *)(v7 + 72);
      v1724 = 70;
      v1726 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1725 = v525 & 0xFFFCFFFFFFFFFFFFLL;
      v1727 = v527;
      v1728 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1724;
      goto LABEL_217;
    case 0x47:
    case 0x48:
      v1744 = *(_WORD *)(v7 + 18);
      v1745 = *(_OWORD *)(v7 + 24);
      v1746 = *(_QWORD *)(v7 + 40);
      v1747 = 0;
      v1748 = v1060;
      v179 = *(_QWORD *)v4;
      v180 = &v1744;
      goto LABEL_217;
    case 0x49:
    case 0x50:
      v559 = *(_QWORD *)(v7 + 24);
      if ((v559 & 0xFC000000000000) != 0xC4000000000000)
        break;
      v1729 = *(_WORD *)(v7 + 18);
      v1731 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1733 = 0;
      v1730 = v559 & 0xFFFCFFFFFFFFFFFFLL;
      v1732 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1729;
      goto LABEL_217;
    case 0x4B:
      v204 = *v1061;
      v205 = 16409;
      goto LABEL_282;
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
      v429 = *(_QWORD *)(v7 + 24);
      if ((v429 & 0xFC000000000000) != 0xC4000000000000)
        break;
      v430 = *(int *)(v7 + 72);
      v1657 = *(_WORD *)(v7 + 18);
      v1658 = v429 & 0xFFFCFFFFFFFFFFFFLL;
      v1659 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1660 = v430;
      v1661 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1657;
      goto LABEL_217;
    case 0x51:
      v469 = *(_QWORD *)(v7 + 24);
      if ((v469 & 0xFC000000000000) != 0xC4000000000000)
        break;
      v470 = *(unsigned int *)(v7 + 72);
      v1734 = 81;
      v1736 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1735 = v469 & 0xFFFCFFFFFFFFFFFFLL;
      v1737 = v470;
      v1738 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1734;
      goto LABEL_217;
    case 0x52:
    case 0x53:
      v915 = *(_QWORD *)(v7 + 24);
      v916 = (v915 >> 50) & 0x3F;
      if (v916 > 0x34)
        goto LABEL_1040;
      if (!v916)
        break;
      if (((1 << v916) & 0x1200001C000002) == 0)
      {
LABEL_1040:
        JSC::DFG::Graph::logAssertionFailure(v1060, (JSC::DFG::Node *)v7, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x198366498);
      }
      v1594 = *(_WORD *)(v7 + 18);
      v1596 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1598 = 0;
      v1595 = v915 & 0xFFFCFFFFFFFFFFFFLL;
      v1597 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1594;
      goto LABEL_217;
    case 0x5C:
    case 0x5D:
      v208 = *(unsigned int *)(v7 + 72);
      v209 = *(_DWORD *)(v7 + 56) & 7;
      if (v209 >= 2)
      {
        switch(v209)
        {
          case 3u:
            v210 = 13;
            break;
          case 4u:
            v210 = 17;
            break;
          case 5u:
            v210 = 19;
            break;
          case 7u:
            __break(0xC471u);
            JUMPOUT(0x198366804);
          default:
            __break(0xC471u);
            JUMPOUT(0x198366834);
        }
      }
      else
      {
        v210 = 21;
      }
      switch(*(_DWORD *)(v7 + 72))
      {
        case 0u:
        case 1u:
        case 2u:
        case 4u:
        case 0x17u:
        case 0x18u:
          goto LABEL_280;
        case 3u:
          return;
        case 5u:
          if (BYTE2(v208) - 3 <= 1)
            goto LABEL_280;
          v1539 = *(_WORD *)(v7 + 18);
          v1540 = *(_OWORD *)(v7 + 24);
          v1541 = *(_QWORD *)(v7 + 40);
          v1542 = v208;
          v1543 = v1060;
          v179 = *(_QWORD *)v4;
          v180 = &v1539;
          goto LABEL_217;
        case 6u:
          v1509 = *(_WORD *)(v7 + 18);
          v1510 = *(_OWORD *)(v7 + 24);
          v1511 = *(_QWORD *)(v7 + 40);
          v1512 = 0;
          v1513 = v1060;
          v179 = *(_QWORD *)v4;
          v180 = &v1509;
          goto LABEL_217;
        case 7u:
          if (BYTE2(v208) > 3u || BYTE2(v208) == 2)
            goto LABEL_280;
          if (BYTE2(v208) == 3)
            v325 = 18;
          else
            v325 = v210;
          v326 = *(_QWORD *)(v7 + 24);
          v327 = *((_DWORD *)v1060 + 41);
          if (v327 <= v326)
          {
            __break(0xC471u);
            JUMPOUT(0x198366F34);
          }
          v328 = v326 + 1;
          if (v327 <= (int)v326 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198366F3CLL);
          }
          v329 = *((_QWORD *)v1060 + 19);
          v330 = *(_QWORD *)(v329 + 8 * *(_QWORD *)(v7 + 24));
          v331 = *(_QWORD *)(v329 + 8 * v328) & 0xFF00FFFFFFFFFFFFLL;
          if (v331
            && (v431 = *(unsigned __int16 *)((*(_QWORD *)(v329 + 8 * v328) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                v431 <= 2))
          {
            v332 = *(_QWORD *)(v331 + 72);
            if ((_DWORD)v431)
            {
              if ((_DWORD)v431 != 1)
                v431 = 2;
              v332 |= v431;
            }
          }
          else
          {
            v332 = 0;
          }
          v1528 = v325;
          v1529 = 16400;
          v1530 = v330 & 0xFF00FFFFFFFFFFFFLL;
          v1531 = v331;
          v1532 = v332;
          v1534 = 0;
          v1533 = 0;
          v171 = *(uint64_t **)v4;
          v172 = &v1528;
          goto LABEL_210;
        case 8u:
          if (BYTE2(v208) >= 2u)
          {
            if (BYTE2(v208) != 3)
              goto LABEL_280;
            if (v209 == 3)
            {
LABEL_907:
              if (BYTE2(v208) == 3)
                v256 = 15;
              else
                v256 = 13;
LABEL_330:
              v257 = *(_QWORD *)(v7 + 24);
              v258 = *((_DWORD *)v1060 + 41);
              if (v258 <= v257)
              {
                __break(0xC471u);
                JUMPOUT(0x198366CF4);
              }
              v259 = v257 + 1;
              if (v258 <= (int)v257 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x198366CFCLL);
              }
              v260 = *((_QWORD *)v1060 + 19);
              v261 = *(_QWORD *)(v260 + 8 * *(_QWORD *)(v7 + 24));
              v262 = *(_QWORD *)(v260 + 8 * v259) & 0xFF00FFFFFFFFFFFFLL;
              if (v262
                && (v335 = *(unsigned __int16 *)((*(_QWORD *)(v260 + 8 * v259) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                    v335 <= 2))
              {
                v263 = *(_QWORD *)(v262 + 72);
                if ((_DWORD)v335)
                {
                  if ((_DWORD)v335 != 1)
                    v335 = 2;
                  v263 |= v335;
                }
              }
              else
              {
                v263 = 0;
              }
              v1521 = v256;
              v1522 = 16401;
              v1523 = v261 & 0xFF00FFFFFFFFFFFFLL;
              v1524 = v262;
              v1525 = v263;
              v1527 = 0;
              v1526 = 0;
              v171 = *(uint64_t **)v4;
              v172 = &v1521;
LABEL_210:
              v173 = v7;
LABEL_211:
              v174 = 0;
LABEL_212:
              return;
            }
          }
          else if (v209 == 3)
          {
            if (!BYTE2(v208))
            {
              v256 = 14;
              goto LABEL_330;
            }
            goto LABEL_907;
          }
          v256 = 16;
          goto LABEL_330;
        case 9u:
          if (BYTE2(v208) > 3u || BYTE2(v208) == 2)
            goto LABEL_280;
          if (BYTE2(v208) == 3)
            v211 = 20;
          else
            v211 = v210;
          v212 = *(_QWORD *)(v7 + 24);
          v213 = *((_DWORD *)v1060 + 41);
          if (v213 <= v212)
          {
            __break(0xC471u);
            JUMPOUT(0x198366C84);
          }
          v214 = v212 + 1;
          if (v213 <= (int)v212 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198366C8CLL);
          }
          v215 = *((_QWORD *)v1060 + 19);
          v216 = *(_QWORD *)(v215 + 8 * *(_QWORD *)(v7 + 24));
          v217 = *(_QWORD *)(v215 + 8 * v214) & 0xFF00FFFFFFFFFFFFLL;
          if (v217
            && (v324 = *(unsigned __int16 *)((*(_QWORD *)(v215 + 8 * v214) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                v324 <= 2))
          {
            v218 = *(_QWORD *)(v217 + 72);
            if ((_DWORD)v324)
            {
              if ((_DWORD)v324 != 1)
                v324 = 2;
              v218 |= v324;
            }
          }
          else
          {
            v218 = 0;
          }
          v1514 = v211;
          v1515 = 16402;
          v1516 = v216 & 0xFF00FFFFFFFFFFFFLL;
          v1517 = v217;
          v1518 = v218;
          v1520 = 0;
          v1519 = 0;
          v171 = *(uint64_t **)v4;
          v172 = &v1514;
          goto LABEL_210;
        case 0xAu:
        case 0xBu:
          if (BYTE2(v208) < 2u)
            return;
          goto LABEL_280;
        case 0xCu:
          if (BYTE2(v208) > 1u)
            goto LABEL_280;
          v874 = (JSC::DFG::Node *)v7;
          v875 = *(_QWORD *)(v7 + 24);
          v876 = *((_DWORD *)v1060 + 41);
          if (v876 <= v875)
          {
            __break(0xC471u);
            JUMPOUT(0x198367000);
          }
          if (v876 <= (int)v875 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198367008);
          }
          v877 = (uint64_t **)v4;
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1538, v210, 16404, *(_QWORD *)(*((_QWORD *)v1060 + 19) + 8 * *(_QWORD *)(v7 + 24)), *(_QWORD *)(*((_QWORD *)v1060 + 19) + 8 * (*(_QWORD *)(v7 + 24) + 1)), 0);
          JSC::DFG::LazyNode::LazyNode(v1537, v874);
          v173 = v1537[0];
          v174 = v1537[1];
          v171 = *v877;
          v172 = (int *)v1538;
          goto LABEL_212;
        case 0xDu:
          v1020 = *(_QWORD *)(v7 + 24);
          v1021 = *((_DWORD *)v1060 + 41);
          if (v1021 <= v1020)
          {
            __break(0xC471u);
            JUMPOUT(0x198367220);
          }
          if (v1021 <= (int)v1020 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198367228);
          }
          v1022 = (uint64_t **)v4;
          v1023 = (JSC::DFG::Node *)v7;
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1536, v210, 16405, *(_QWORD *)(*((_QWORD *)v1060 + 19) + 8 * *(_QWORD *)(v7 + 24)), *(_QWORD *)(*((_QWORD *)v1060 + 19) + 8 * (*(_QWORD *)(v7 + 24) + 1)), 0);
          JSC::DFG::LazyNode::LazyNode(v1535, v1023);
          v173 = v1535[0];
          v174 = v1535[1];
          v171 = *v1022;
          v172 = (int *)v1536;
          goto LABEL_212;
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          if ((v208 & 0x40000000) != 0)
            goto LABEL_934;
          v276 = *(_QWORD *)(v7 + 24);
          v277 = *((_DWORD *)v1060 + 41);
          if (v277 <= v276)
          {
            __break(0xC471u);
            JUMPOUT(0x198366D64);
          }
          v278 = v276 + 1;
          if (v277 <= (int)v276 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198366D6CLL);
          }
          v279 = *((_QWORD *)v1060 + 19);
          v280 = *(_QWORD *)(v279 + 8 * *(_QWORD *)(v7 + 24));
          v281 = *(_QWORD *)(v279 + 8 * v278) & 0xFF00FFFFFFFFFFFFLL;
          if (v281
            && (v349 = *(unsigned __int16 *)((*(_QWORD *)(v279 + 8 * v278) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                v349 <= 2))
          {
            v282 = *(_QWORD *)(v281 + 72);
            if ((_DWORD)v349)
            {
              if ((_DWORD)v349 != 1)
                v349 = 2;
              v282 |= v349;
            }
          }
          else
          {
            v282 = 0;
          }
          v1502 = v210;
          v1503 = 16406;
          v1504 = v280 & 0xFF00FFFFFFFFFFFFLL;
          v1505 = v281;
          v1506 = v282;
          v1508 = 0;
          v1507 = 0;
          v171 = *(uint64_t **)v4;
          v172 = &v1502;
          goto LABEL_210;
        case 0x19u:
          JSC::DFG::Graph::logAssertionFailure(v1060, (JSC::DFG::Node *)v7, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for get");
          __break(0xC471u);
          JUMPOUT(0x1983661D8);
        default:
          __break(0xC471u);
          JUMPOUT(0x1983661F8);
      }
    case 0x63:
      v434 = v7;
      v435 = *(_DWORD **)(v434 + 72);
      v448 = v435[6];
      if (v448)
      {
        v449 = v448 - 1;
        do
        {
          --v449;
        }
        while (v449 != -1);
      }
      return;
    case 0x64:
      v856 = *(_DWORD **)(v7 + 72);
      v863 = v856[6];
      if (v863)
      {
        v864 = v863 - 1;
        do
        {
          --v864;
        }
        while (v864 != -1);
      }
      return;
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
      v248 = *(_QWORD *)(v7 + 24);
      v249 = *((_DWORD *)v1060 + 41);
      if (v249 <= v248)
      {
        __break(0xC471u);
        JUMPOUT(0x198366C6CLL);
      }
      if (v249 <= (int)v248 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198366C74);
      }
      if (v249 <= (int)v248 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198366C7CLL);
      }
      v250 = *((_QWORD *)v1060 + 19);
      v251 = *(_DWORD *)(v7 + 72);
      if ((*(_DWORD *)(v7 + 56) & 7u) >= 2)
      {
        switch(*(_DWORD *)(v7 + 56) & 7)
        {
          case 3:
            v252 = 13;
            break;
          case 4:
            v252 = 17;
            break;
          case 5:
            v252 = 19;
            break;
          case 7:
            __break(0xC471u);
            JUMPOUT(0x198366884);
          default:
            __break(0xC471u);
            JUMPOUT(0x1983668B4);
        }
      }
      else
      {
        v252 = 21;
      }
      if (*(_DWORD *)(v7 + 72) - 14 >= 9)
      {
        v363 = *(_QWORD *)(v250 + 8 * *(_QWORD *)(v7 + 24)) & 0xFF00FFFFFFFFFFFFLL;
        v364 = *(_QWORD *)(v250 + 8 * (v248 + 1)) & 0xFF00FFFFFFFFFFFFLL;
        v365 = *(_QWORD *)(v250 + 8 * (v248 + 2)) & 0xFF00FFFFFFFFFFFFLL;
        switch(*(_DWORD *)(v7 + 72))
        {
          case 0u:
          case 1u:
          case 2u:
          case 4u:
          case 5u:
          case 6u:
          case 0xCu:
          case 0xDu:
          case 0x17u:
          case 0x18u:
            goto LABEL_280;
          case 3u:
            return;
          case 7u:
            v204 = *v1061;
            if (BYTE2(v251) - 3 <= 1)
              goto LABEL_281;
            v567 = v7;
            v568 = (uint64_t **)v4;
            if (*(_WORD *)(v567 + 18) == 146)
              v575 = *(_DWORD *)(v567 + 80);
            else
              v575 = *(_DWORD *)(v567 + 72);
            if ((v575 & 0xFE0000) != 0)
            if (v364 && (v852 = *(unsigned __int16 *)(v364 + 18), v852 <= 2))
            {
              v576 = *(_QWORD *)(v364 + 72);
              if (*(_WORD *)(v364 + 18))
              {
                if ((_DWORD)v852 != 1)
                  v852 = 2;
                v576 |= v852;
              }
            }
            else
            {
              v576 = 0;
            }
            v577 = 0;
            LODWORD(v1496) = v252;
            *((_QWORD *)&v1496 + 1) = 16400;
            v1497 = v363;
            v1498 = v364;
            v1499 = v576;
            v1501 = 0;
            v1500 = 0;
            if (v365)
            {
              v853 = *(unsigned __int16 *)(v365 + 18);
              if (v853 <= 2)
              {
                v577 = *(_QWORD *)(v365 + 72);
                if (*(_WORD *)(v365 + 18))
                {
                  if ((_DWORD)v853 != 1)
                    v853 = 2;
                  v577 |= v853;
                }
              }
              else
              {
                v577 = 0;
              }
            }
            if (v364 && (v854 = *(unsigned __int16 *)(v364 + 18), v854 <= 2))
            {
              v578 = *(_QWORD *)(v364 + 72);
              if (*(_WORD *)(v364 + 18))
              {
                if ((_DWORD)v854 != 1)
                  v854 = 2;
                v578 |= v854;
              }
            }
            else
            {
              v578 = 0;
            }
            v174 = 0;
            v1489 = 18;
            v1490 = 16400;
            v1491 = v363;
            v1492 = v364;
            v1493 = v578;
            v1495 = 0;
            v1494 = 0;
            if (v365)
            {
              v855 = *(unsigned __int16 *)(v365 + 18);
              if (v855 <= 2)
              {
                v174 = *(_QWORD *)(v365 + 72);
                if (*(_WORD *)(v365 + 18))
                {
                  if ((_DWORD)v855 != 1)
                    v855 = 2;
                  v174 |= v855;
                }
              }
              else
              {
                v174 = 0;
              }
            }
            v171 = *v568;
            v172 = &v1489;
            goto LABEL_446;
          case 8u:
            v204 = *v1061;
            if (BYTE2(v251) - 3 <= 1)
              goto LABEL_281;
            v579 = v7;
            v580 = (uint64_t **)v4;
            if (*(_WORD *)(v579 + 18) == 146)
              v587 = *(_DWORD *)(v579 + 80);
            else
              v587 = *(_DWORD *)(v579 + 72);
            if ((v587 & 0xFE0000) != 0)
            if (v364 && (v846 = *(unsigned __int16 *)(v364 + 18), v846 <= 2))
            {
              v588 = *(_QWORD *)(v364 + 72);
              if (*(_WORD *)(v364 + 18))
              {
                if ((_DWORD)v846 != 1)
                  v846 = 2;
                v588 |= v846;
              }
            }
            else
            {
              v588 = 0;
            }
            v589 = 0;
            LODWORD(v1483) = 13;
            *((_QWORD *)&v1483 + 1) = 16401;
            v1484 = v363;
            v1485 = v364;
            v1486 = v588;
            v1488 = 0;
            v1487 = 0;
            if (v365)
            {
              v847 = *(unsigned __int16 *)(v365 + 18);
              if (v847 <= 2)
              {
                v589 = *(_QWORD *)(v365 + 72);
                if (*(_WORD *)(v365 + 18))
                {
                  if ((_DWORD)v847 != 1)
                    v847 = 2;
                  v589 |= v847;
                }
              }
              else
              {
                v589 = 0;
              }
            }
            if (v364 && (v848 = *(unsigned __int16 *)(v364 + 18), v848 <= 2))
            {
              v594 = *(_QWORD *)(v364 + 72);
              if (*(_WORD *)(v364 + 18))
              {
                if ((_DWORD)v848 != 1)
                  v848 = 2;
                v594 |= v848;
              }
            }
            else
            {
              v594 = 0;
            }
            v595 = 0;
            LODWORD(v1477) = 14;
            *((_QWORD *)&v1477 + 1) = 16401;
            v1478 = v363;
            v1479 = v364;
            v1480 = v594;
            v1482 = 0;
            v1481 = 0;
            if (v365)
            {
              v849 = *(unsigned __int16 *)(v365 + 18);
              if (v849 <= 2)
              {
                v595 = *(_QWORD *)(v365 + 72);
                if (*(_WORD *)(v365 + 18))
                {
                  if ((_DWORD)v849 != 1)
                    v849 = 2;
                  v595 |= v849;
                }
              }
              else
              {
                v595 = 0;
              }
            }
            if (v364 && (v850 = *(unsigned __int16 *)(v364 + 18), v850 <= 2))
            {
              v596 = *(_QWORD *)(v364 + 72);
              if (*(_WORD *)(v364 + 18))
              {
                if ((_DWORD)v850 != 1)
                  v850 = 2;
                v596 |= v850;
              }
            }
            else
            {
              v596 = 0;
            }
            v174 = 0;
            v1470 = 15;
            v1471 = 16401;
            v1472 = v363;
            v1473 = v364;
            v1474 = v596;
            v1476 = 0;
            v1475 = 0;
            if (v365)
            {
              v851 = *(unsigned __int16 *)(v365 + 18);
              if (v851 <= 2)
              {
                v174 = *(_QWORD *)(v365 + 72);
                if (*(_WORD *)(v365 + 18))
                {
                  if ((_DWORD)v851 != 1)
                    v851 = 2;
                  v174 |= v851;
                }
              }
              else
              {
                v174 = 0;
              }
            }
            v171 = *v580;
            v172 = &v1470;
            goto LABEL_446;
          case 9u:
            v204 = *v1061;
            if (BYTE2(v251) - 3 <= 1)
              goto LABEL_281;
            v366 = v7;
            v367 = (uint64_t **)v4;
            if (*(_WORD *)(v366 + 18) == 146)
              v374 = *(_DWORD *)(v366 + 80);
            else
              v374 = *(_DWORD *)(v366 + 72);
            if ((v374 & 0xFE0000) != 0)
            if (v364 && (v841 = *(unsigned __int16 *)(v364 + 18), v841 <= 2))
            {
              v375 = *(_QWORD *)(v364 + 72);
              if (*(_WORD *)(v364 + 18))
              {
                if ((_DWORD)v841 != 1)
                  v841 = 2;
                v375 |= v841;
              }
            }
            else
            {
              v375 = 0;
            }
            v376 = 0;
            LODWORD(v1464) = v252;
            *((_QWORD *)&v1464 + 1) = 16402;
            v1465 = v363;
            v1466 = v364;
            v1467 = v375;
            v1469 = 0;
            v1468 = 0;
            if (v365)
            {
              v842 = *(unsigned __int16 *)(v365 + 18);
              if (v842 <= 2)
              {
                v376 = *(_QWORD *)(v365 + 72);
                if (*(_WORD *)(v365 + 18))
                {
                  if ((_DWORD)v842 != 1)
                    v842 = 2;
                  v376 |= v842;
                }
              }
              else
              {
                v376 = 0;
              }
            }
            if (v364 && (v843 = *(unsigned __int16 *)(v364 + 18), v843 <= 2))
            {
              v377 = *(_QWORD *)(v364 + 72);
              if (*(_WORD *)(v364 + 18))
              {
                if ((_DWORD)v843 != 1)
                  v843 = 2;
                v377 |= v843;
              }
            }
            else
            {
              v377 = 0;
            }
            v174 = 0;
            v1457 = 20;
            v1458 = 16402;
            v1459 = v363;
            v1460 = v364;
            v1461 = v377;
            v1463 = 0;
            v1462 = 0;
            if (v365)
            {
              v844 = *(unsigned __int16 *)(v365 + 18);
              if (v844 <= 2)
              {
                v174 = *(_QWORD *)(v365 + 72);
                if (*(_WORD *)(v365 + 18))
                {
                  if ((_DWORD)v844 != 1)
                    v844 = 2;
                  v174 |= v844;
                }
              }
              else
              {
                v174 = 0;
              }
            }
            v171 = *v367;
            v172 = &v1457;
LABEL_446:
            v173 = v365;
            goto LABEL_212;
          case 0xAu:
            v204 = *v1061;
            if (BYTE2(v251) - 3 <= 1)
              goto LABEL_281;
            v917 = v7;
            if (*(_WORD *)(v917 + 18) == 146)
              v918 = *(_DWORD *)(v917 + 80);
            else
              v918 = *(_DWORD *)(v917 + 72);
            if ((v918 & 0xFE0000) == 0)
              return;
            v204 = *v1061;
            v205 = 16388;
            break;
          case 0xBu:
            v204 = *v1061;
            if ((v251 & 0xFE0000) != 0)
              goto LABEL_281;
            v205 = 16403;
            goto LABEL_282;
          case 0x19u:
            JSC::DFG::Graph::logAssertionFailure(v1060, (JSC::DFG::Node *)v7, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for put");
            __break(0xC471u);
            JUMPOUT(0x1983663F8);
          default:
            __break(0xC471u);
            JUMPOUT(0x19836674CLL);
        }
        goto LABEL_282;
      }
      if ((v251 & 0x40000000) == 0)
        return;
      goto LABEL_319;
    case 0x6D:
      v204 = *v1061;
      goto LABEL_719;
    case 0x87:
      v191 = v7;
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v191 + 72) + 8) + 16) & 0x3E000) != 0x4000)
        return;
      v204 = *v1061;
      goto LABEL_245;
    case 0x8A:
      v190 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1424 = 4;
      v1425 = 16396;
      v1426 = v190;
      v1427 = 0u;
      v1428 = 0u;
      v171 = *(uint64_t **)v4;
      v172 = &v1424;
      goto LABEL_210;
    case 0x8B:
      v351 = (uint64_t **)v4;
      v352 = v7;
      v359 = *(_QWORD *)(v352 + 32);
      v360 = *(_QWORD *)(v352 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1429 = 4;
      v1430 = 16396;
      v1431 = v360;
      v1432 = 0u;
      v1433 = 0u;
      v173 = v359 & 0xFF00FFFFFFFFFFFFLL;
      if ((v359 & 0xFF00FFFFFFFFFFFFLL) != 0
        && (v464 = *(unsigned __int16 *)((v359 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v464 <= 2))
      {
        v174 = *(_QWORD *)((v359 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        if (*(_WORD *)((v359 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
        {
          if ((_DWORD)v464 != 1)
            v464 = 2;
          v174 |= v464;
        }
      }
      else
      {
        v174 = 0;
      }
      v171 = *v351;
      v172 = &v1429;
      goto LABEL_212;
    case 0x91:
    case 0x92:
      v204 = *v1061;
      goto LABEL_413;
    case 0x93:
      v362 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1404 = 22;
      v1405 = 16423;
      v1406 = v362;
      v1407 = 0u;
      v1408 = 0u;
      v171 = *(uint64_t **)v4;
      v172 = &v1404;
      goto LABEL_210;
    case 0x94:
      v1399 = 148;
      v432 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1400 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1403 = 0;
      v1401 = v432;
      v1402 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1399;
      goto LABEL_217;
    case 0x95:
      v254 = *(_QWORD *)(v7 + 72);
      v1636 = 149;
      v255 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1637 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1638 = v255;
      v1639 = v254;
      v1640 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1636;
      goto LABEL_217;
    case 0x96:
      v887 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1583 = 9;
      v1584 = 16390;
      v1585 = v887;
      v1586 = 0u;
      v1587 = 0u;
      v888 = (uint64_t **)v4;
      JSC::DFG::LazyNode::LazyNode(v1582, (JSC::DFG::Node *)v7);
      v173 = v1582[0];
      v174 = v1582[1];
      v171 = *v888;
      v172 = &v1583;
      goto LABEL_212;
    case 0x97:
      v905 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1577 = 30;
      v1578 = 16391;
      v1579 = v905;
      v1580 = 0u;
      v1581 = 0u;
      v906 = (uint64_t **)v4;
      JSC::DFG::LazyNode::LazyNode(v1576, (JSC::DFG::Node *)v7);
      v173 = v1576[0];
      v174 = v1576[1];
      v171 = *v906;
      v172 = &v1577;
      goto LABEL_212;
    case 0x98:
    case 0x99:
      v175 = *(_QWORD *)(v7 + 72);
      v176 = ((unint64_t)*(unsigned int *)(v175 + 4) << 15) | 0xF;
      v177 = *(_QWORD *)(v7 + 32) & 0xFF00FFFFFFFFFFFFLL;
      if (*((int *)v1060 + 238) < 2)
      {
        v1364 = 28;
        v1365 = v176;
        v1366 = v177;
        v1367 = 0u;
        v1368 = 0u;
        v171 = *(uint64_t **)v4;
        v172 = &v1364;
        goto LABEL_210;
      }
      v1370 = 28;
      v1371 = v176;
      v1372 = v177;
      v1373 = 0;
      v1374 = 0;
      v1375 = 0;
      v1376 = v175;
      v1018 = (uint64_t **)v4;
      JSC::DFG::LazyNode::LazyNode(v1369, (JSC::DFG::Node *)v7);
      v173 = v1369[0];
      v174 = v1369[1];
      v171 = *v1018;
      v172 = &v1370;
      goto LABEL_212;
    case 0x9A:
      v560 = (uint64_t **)v4;
      v561 = *(unsigned int **)(v7 + 72);
      v562 = ((unint64_t)*v561 << 15) | 0xF;
      v173 = v7;
      v563 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      if (*((int *)v1060 + 238) < 2)
      {
        v1351 = 28;
        v1352 = v562;
        v1353 = v563;
        v1354 = 0u;
        v1355 = 0u;
        v171 = *(uint64_t **)v4;
        v172 = &v1351;
        goto LABEL_211;
      }
      v1357 = 28;
      v1358 = v562;
      v1359 = v563;
      v1360 = 0;
      v1361 = 0;
      v1362 = 0;
      v1363 = v561;
      JSC::DFG::LazyNode::LazyNode(v1356, (JSC::DFG::Node *)v7);
      v173 = v1356[0];
      v174 = v1356[1];
      v171 = *v560;
      v172 = &v1357;
      goto LABEL_212;
    case 0x9B:
      v185 = (uint64_t **)v4;
      v186 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(v7 + 72) + 4) << 15) | 0xF;
      v187 = (_QWORD *)v7;
      v188 = v187[4];
      if (*((int *)v1060 + 238) >= 2)
      {
        v1019 = v187[9];
        v1331 = 28;
        v1332 = v186;
        v1333 = v188 & 0xFF00FFFFFFFFFFFFLL;
        v1334 = 0;
        v1335 = 0;
        v1336 = 0;
        v1337 = v1019;
        JSC::DFG::LazyNode::LazyNode(v1330, (JSC::DFG::Node *)(v187[5] & 0xFF00FFFFFFFFFFFFLL));
        v173 = v1330[0];
        v174 = v1330[1];
        v171 = *v185;
        v172 = &v1331;
      }
      else
      {
        v1325 = 28;
        v1326 = v186;
        v1327 = v188 & 0xFF00FFFFFFFFFFFFLL;
        v1328 = 0u;
        v1329 = 0u;
        v189 = v187[5];
        v173 = v189 & 0xFF00FFFFFFFFFFFFLL;
        if ((v189 & 0xFF00FFFFFFFFFFFFLL) != 0
          && (v221 = *(unsigned __int16 *)((v189 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v221 <= 2))
        {
          v174 = *(_QWORD *)(v173 + 72);
          if ((_DWORD)v221)
          {
            if ((_DWORD)v221 != 1)
              v221 = 2;
            v174 |= v221;
          }
        }
        else
        {
          v174 = 0;
        }
        v171 = *v185;
        v172 = &v1325;
      }
      goto LABEL_212;
    case 0x9C:
      v622 = (uint64_t **)v4;
      v623 = ((unint64_t)**(unsigned int **)(v7 + 72) << 15) | 0xF;
      v624 = (_QWORD *)v7;
      v627 = v624;
      v628 = v624[9];
      v629 = *(unsigned int *)(v628 + 20);
      v630 = (v629 << 6) - 64;
      while (v630 != -64)
      {
        v631 = *(_DWORD *)(*(_QWORD *)(v628 + 8) + v630) - 2;
        v630 -= 64;
        if (v631 <= 3)
        {
          v628 = v627[9];
          v629 = *(unsigned int *)(v628 + 20);
          break;
        }
      }
      v632 = (v629 << 6) - 64;
      while (v629)
      {
        if (--v629 >= (unint64_t)*(unsigned int *)(v628 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x198366FF0);
        }
        v633 = v632 - 64;
        v634 = JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)(*(_QWORD *)(v628 + 8) + v632));
        v632 = v633;
        if (v634)
        {
          break;
        }
      }
      v637 = v627[3];
      if (*((int *)v1060 + 238) >= 2)
      {
        v1029 = v627[9];
        v1344 = 28;
        v1345 = v623;
        v1346 = v637 & 0xFF00FFFFFFFFFFFFLL;
        v1347 = 0;
        v1348 = 0;
        v1349 = 0;
        v1350 = v1029;
        JSC::DFG::LazyNode::LazyNode(v1343, (JSC::DFG::Node *)(v627[4] & 0xFF00FFFFFFFFFFFFLL));
        v173 = v1343[0];
        v174 = v1343[1];
        v171 = *v622;
        v172 = &v1344;
      }
      else
      {
        v1338 = 28;
        v1339 = v623;
        v1340 = v637 & 0xFF00FFFFFFFFFFFFLL;
        v1341 = 0u;
        v1342 = 0u;
        v638 = v627[4];
        v173 = v638 & 0xFF00FFFFFFFFFFFFLL;
        if ((v638 & 0xFF00FFFFFFFFFFFFLL) != 0
          && (v873 = *(unsigned __int16 *)((v638 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v873 <= 2))
        {
          v174 = *(_QWORD *)(v173 + 72);
          if ((_DWORD)v873)
          {
            if ((_DWORD)v873 != 1)
              v873 = 2;
            v174 |= v873;
          }
        }
        else
        {
          v174 = 0;
        }
        v171 = *v622;
        v172 = &v1338;
      }
      goto LABEL_212;
    case 0x9D:
      v943 = v7;
      if (!JSC::DFG::MultiDeleteByOffsetData::writesStructures(*(_QWORD *)(v943 + 72)))
        return;
      v204 = *v1061;
LABEL_245:
      v205 = 16399;
      goto LABEL_282;
    case 0x9E:
      v273 = *(unsigned int *)(v7 + 72);
      v274 = *(_DWORD *)(v7 + 72);
      if ((v274 - 6) < 6)
      {
        v275 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
        v1320 = 1;
        v1321 = 16388;
        v1322 = v275;
        v1323 = 0u;
        v1324 = 0u;
        v171 = *(uint64_t **)v4;
        v172 = &v1320;
        goto LABEL_210;
      }
      if (*(_DWORD *)(v7 + 72) > 0xBu)
      {
        v871 = (uint64_t **)v4;
        if ((v274 - 12) < 2)
        {
          v872 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
          v1310 = 1;
          v1311 = 16423;
          v1312 = v872;
          v1313 = 0u;
          v1314 = 0u;
          JSC::DFG::LazyNode::LazyNode(v1309, (JSC::DFG::Node *)v7);
          v173 = v1309[0];
          v174 = v1309[1];
          v171 = *v871;
          v172 = &v1310;
          goto LABEL_212;
        }
        if (v274 == 25)
        {
LABEL_1022:
          if ((v273 & 0x40000000) != 0)
            goto LABEL_319;
          v1024 = (uint64_t **)v4;
          v1025 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
          v1304 = 1;
          v1305 = 16423;
          v1306 = v1025;
          v1307 = 0u;
          v1308 = 0u;
          JSC::DFG::LazyNode::LazyNode(v1303, (JSC::DFG::Node *)v7);
          v173 = v1303[0];
          v174 = v1303[1];
          v171 = *v1024;
          v172 = &v1304;
          goto LABEL_212;
        }
      }
      else
      {
        if (v274 == 5)
        {
          v1315 = 158;
          v361 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
          v1316 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
          v1317 = v361;
          v1318 = v273;
          v1319 = 0;
          v179 = *(_QWORD *)v4;
          v180 = &v1315;
          goto LABEL_217;
        }
        if (v274 == 3)
          return;
      }
      v1050 = v4;
      v1051 = (JSC::DFG::Node *)v7;
      v1052 = JSC::DFG::toTypedArrayType(*(_DWORD *)(v7 + 72));
      v7 = (uint64_t)v1051;
      if (v1052 == 12 || (v4 = v1050, !v1052))
      {
        JSC::DFG::Graph::logAssertionFailure(v1060, v1051, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
        __break(0xC471u);
        JUMPOUT(0x1983670CCLL);
      }
      goto LABEL_1022;
    case 0x9F:
      v933 = (uint64_t *)v4;
      v934 = v7;
      v935 = *(unsigned int *)(v7 + 72);
      v936 = *(_DWORD *)(v7 + 72);
      if (v936 != 25)
      {
        v1049 = JSC::DFG::toTypedArrayType(v936);
        if (v1049 == 12 || !v1049)
        {
          JSC::DFG::Graph::logAssertionFailure(v1060, (JSC::DFG::Node *)v934, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x198367060);
        }
      }
      if ((v935 & 0x40000000) != 0)
      {
        JSC::DFG::Graph::logAssertionFailure(v1060, (JSC::DFG::Node *)v934, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
        __break(0xC471u);
        JUMPOUT(0x198366454);
      }
      v1298 = *(_WORD *)(v934 + 18);
      v937 = *(_QWORD *)(v934 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1299 = vandq_s8(*(int8x16_t *)(v934 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1300 = v937;
      v1301 = v935;
      v1302 = 0;
      v179 = *v933;
      v180 = &v1298;
      goto LABEL_217;
    case 0xA0:
      v991 = *(_DWORD *)(v7 + 72);
      if (v991 == 25)
        goto LABEL_991;
      v1053 = (JSC::DFG::Node *)v7;
      v1054 = v4;
      v1055 = JSC::DFG::toTypedArrayType(*(_DWORD *)(v7 + 72));
      if (v1055 == 12 || !v1055)
      {
        if (v991 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(v1060, v1053, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x198367150);
        }
        return;
      }
      v4 = v1054;
      v7 = (uint64_t)v1053;
      if (v991 == 3)
        return;
LABEL_991:
      if ((v991 & 0x40000000) != 0)
        goto LABEL_319;
      v992 = (uint64_t **)v4;
      v993 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1293 = 34;
      v1294 = 16423;
      v1295 = v993;
      v1296 = 0u;
      v1297 = 0u;
      JSC::DFG::LazyNode::LazyNode(v1292, (JSC::DFG::Node *)v7);
      v173 = v1292[0];
      v174 = v1292[1];
      v171 = *v992;
      v172 = &v1293;
      goto LABEL_212;
    case 0xA1:
      if ((*(_DWORD *)(v7 + 72) & 0xFE) != 0xA)
      {
        __break(0xC471u);
        JUMPOUT(0x198366F5CLL);
      }
      v994 = (uint64_t **)v4;
      v995 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1287 = 3;
      v1288 = 16389;
      v1289 = v995;
      v1290 = 0u;
      v1291 = 0u;
      JSC::DFG::LazyNode::LazyNode(v1286, (JSC::DFG::Node *)v7);
      v173 = v1286[0];
      v174 = v1286[1];
      v171 = *v994;
      v172 = &v1287;
      goto LABEL_212;
    case 0xA2:
      v996 = (uint64_t **)v4;
      v997 = v7;
      v998 = *(_DWORD *)(v7 + 72);
      v999 = v998;
      if (v998 == 25)
        goto LABEL_996;
      v1056 = JSC::DFG::toTypedArrayType(*(_DWORD *)(v7 + 72));
      if (v1056 == 12 || !v1056)
      {
        if (v999 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(v1060, (JSC::DFG::Node *)v997, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x1983671B4);
        }
        return;
      }
      if (v999 == 3)
        return;
      if (*(_WORD *)(v997 + 18) == 146)
        v998 = *(_DWORD *)(v997 + 80);
      else
        v998 = *(_DWORD *)(v997 + 72);
LABEL_996:
      if ((v998 & 0x40000000) == 0)
      {
        v1000 = *(_QWORD *)(v997 + 24) & 0xFF00FFFFFFFFFFFFLL;
        v1394 = 32;
        v1395 = 16423;
        v1396 = v1000;
        v1397 = 0u;
        v1398 = 0u;
        JSC::DFG::LazyNode::LazyNode(v1393, (JSC::DFG::Node *)v997);
        v173 = v1393[0];
        v174 = v1393[1];
        v171 = *v996;
        v172 = &v1394;
        goto LABEL_212;
      }
      goto LABEL_319;
    case 0xA3:
      v1001 = (uint64_t **)v4;
      v1002 = v7;
      v1003 = *(_DWORD *)(v7 + 72);
      v1004 = v1003;
      if (v1003 == 25)
        goto LABEL_999;
      v1057 = JSC::DFG::toTypedArrayType(*(_DWORD *)(v7 + 72));
      if (v1057 == 12 || !v1057)
      {
        if (v1004 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(v1060, (JSC::DFG::Node *)v1002, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x198367218);
        }
        return;
      }
      if (v1004 == 3)
        return;
      if (*(_WORD *)(v1002 + 18) == 146)
        v1003 = *(_DWORD *)(v1002 + 80);
      else
        v1003 = *(_DWORD *)(v1002 + 72);
LABEL_999:
      if ((v1003 & 0x40000000) == 0)
      {
        v1005 = *(_QWORD *)(v1002 + 24) & 0xFF00FFFFFFFFFFFFLL;
        v1388 = 33;
        v1389 = 16423;
        v1390 = v1005;
        v1391 = 0u;
        v1392 = 0u;
        JSC::DFG::LazyNode::LazyNode(v1387, (JSC::DFG::Node *)v1002);
        v173 = v1387[0];
        v174 = v1387[1];
        v171 = *v1001;
        v172 = &v1388;
        goto LABEL_212;
      }
LABEL_319:
      v204 = *v1061;
LABEL_719:
      v205 = 16423;
      goto LABEL_282;
    case 0xA4:
      v1382 = 164;
      v1006 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1383 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1386 = 0;
      v1384 = v1006;
      v1385 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1382;
      goto LABEL_217;
    case 0xAB:
      v206 = ((unint64_t)*(unsigned int *)(v7 + 72) << 15) | 0x15;
      v207 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1281 = 7;
      v1282 = v206;
      v1283 = v207;
      v1284 = 0u;
      v1285 = 0u;
      v171 = *(uint64_t **)v4;
      v172 = &v1281;
      goto LABEL_210;
    case 0xAC:
      v222 = (uint64_t **)v4;
      v223 = v7;
      v224 = ((unint64_t)*(unsigned int *)(v223 + 72) << 15) | 0x15;
      v225 = *(_QWORD *)(v223 + 32);
      v226 = *(_QWORD *)(v223 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1276 = 7;
      v1277 = v224;
      v1278 = v226;
      v1279 = 0u;
      v1280 = 0u;
      v173 = v225 & 0xFF00FFFFFFFFFFFFLL;
      if ((v225 & 0xFF00FFFFFFFFFFFFLL) != 0
        && (v253 = *(unsigned __int16 *)((v225 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v253 <= 2))
      {
        v174 = *(_QWORD *)((v225 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        if (*(_WORD *)((v225 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
        {
          if ((_DWORD)v253 != 1)
            v253 = 2;
          v174 |= v253;
        }
      }
      else
      {
        v174 = 0;
      }
      v171 = *v222;
      v172 = &v1276;
      goto LABEL_212;
    case 0xAD:
    case 0xAE:
      v471 = (*(_QWORD *)(v7 + 72) << 15) | 0x24;
      v1239 = 10;
      v1241 = 0u;
      v1242 = 0u;
      v1240 = v471;
      v1243 = 0;
      v171 = *(uint64_t **)v4;
      v172 = &v1239;
      goto LABEL_210;
    case 0xAF:
      v465 = (uint64_t **)v4;
      v466 = v7;
      v174 = 0;
      v467 = (*(_QWORD *)(v466 + 72) << 15) | 0x24;
      v1234 = 10;
      v1235 = v467;
      v1236 = 0u;
      v1237 = 0u;
      v1238 = 0;
      v468 = *(_QWORD *)(v466 + 32);
      v173 = v468 & 0xFF00FFFFFFFFFFFFLL;
      if ((v468 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v558 = *(unsigned __int16 *)((v468 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
        if (v558 <= 2)
        {
          v174 = *(_QWORD *)(v173 + 72);
          if ((_DWORD)v558)
          {
            if ((_DWORD)v558 != 1)
              v558 = 2;
            v174 |= v558;
          }
        }
        else
        {
          v174 = 0;
        }
      }
      v171 = *v465;
      v172 = &v1234;
      goto LABEL_212;
    case 0xB2:
      v204 = *v1061;
LABEL_413:
      v205 = 16422;
      goto LABEL_282;
    case 0xB3:
      v336 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1261 = 29;
      v1262 = 16398;
      v1263 = v336;
      v1264 = 0u;
      v1265 = 0u;
      v171 = *(uint64_t **)v4;
      v172 = &v1261;
      goto LABEL_210;
    case 0xB4:
      v531 = (uint64_t **)v4;
      v532 = v7;
      v533 = *(_QWORD *)(v532 + 32);
      v534 = *(_QWORD *)(v532 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1256 = 29;
      v1257 = 16398;
      v1258 = v534;
      v1259 = 0u;
      v1260 = 0u;
      v173 = v533 & 0xFF00FFFFFFFFFFFFLL;
      if ((v533 & 0xFF00FFFFFFFFFFFFLL) != 0
        && (v597 = *(unsigned __int16 *)((v533 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v597 <= 2))
      {
        v174 = *(_QWORD *)((v533 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        if (*(_WORD *)((v533 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
        {
          if ((_DWORD)v597 != 1)
            v597 = 2;
          v174 |= v597;
        }
      }
      else
      {
        v174 = 0;
      }
      v171 = *v531;
      v172 = &v1256;
      goto LABEL_212;
    case 0xB5:
    case 0xDA:
    case 0xDE:
      v204 = *v1061;
      v205 = 16408;
      goto LABEL_282;
    case 0xB6:
      v232 = *(_QWORD *)(v7 + 24);
      v233 = *(_QWORD *)(v7 + 72);
      v1651 = 182;
      v1652 = v232 & 0xFFFCFFFFFFFFFFFFLL;
      v1653 = 0;
      v1654 = 0;
      v1655 = v233;
      v1656 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1651;
      goto LABEL_217;
    case 0xB7:
      v264 = *(_QWORD *)(v7 + 24);
      v1647 = 183;
      v1648 = v264 & 0xFFFCFFFFFFFFFFFFLL;
      v1649 = 0u;
      v1650 = 0u;
      v179 = *(_QWORD *)v4;
      v180 = &v1647;
      goto LABEL_217;
    case 0xBD:
      v536 = *(_QWORD *)(v7 + 24);
      v537 = *(_QWORD *)(v7 + 72);
      v1641 = 189;
      v1642 = v536 & 0xFFFCFFFFFFFFFFFFLL;
      v1643 = 0;
      v1644 = 0;
      v1645 = v537;
      v1646 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1641;
      goto LABEL_217;
    case 0xBE:
      v951 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1452 = 5;
      v1453 = 16395;
      v1454 = v951;
      v1455 = 0u;
      v1456 = 0u;
      v952 = (uint64_t **)v4;
      JSC::DFG::LazyNode::LazyNode(v1451, (JSC::DFG::Node *)v7);
      v173 = v1451[0];
      v174 = v1451[1];
      v171 = *v952;
      v172 = &v1452;
      goto LABEL_212;
    case 0xBF:
    case 0xC0:
      v924 = *(_QWORD *)(v7 + 72);
      v1419 = *(_WORD *)(v7 + 18);
      v925 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1420 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1421 = v925;
      v1422 = v924;
      v1423 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1419;
      goto LABEL_217;
    case 0xC1:
      v615 = *(_QWORD *)(v7 + 24);
      v616 = (v615 >> 50) & 0x3F;
      if ((_DWORD)v616 != 21 && (_DWORD)v616 != 49 && (_DWORD)v616 != 1)
        break;
      v617 = *(_QWORD *)(v7 + 32);
      if ((v617 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v617 & 0xFC000000000000) != 0x4000000000000)
        break;
      v1445 = 193;
      v618 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1446 = v615 & 0xFFFCFFFFFFFFFFFFLL;
      v1447 = v617 & 0xFFFCFFFFFFFFFFFFLL;
      v1450 = 0;
      v1448 = v618;
      v1449 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1445;
      goto LABEL_217;
    case 0xC2:
      v535 = *(_QWORD *)(v7 + 24);
      if (((v535 >> 50) & 0x3F) - 12 > 2)
        break;
      v173 = v7;
      v1377 = 35;
      v1378 = 16399;
      v1379 = v535 & 0xFF00FFFFFFFFFFFFLL;
      v1380 = 0u;
      v1381 = 0u;
      v171 = *(uint64_t **)v4;
      v172 = &v1377;
      goto LABEL_211;
    case 0xC4:
      v601 = (*(_QWORD *)(v7 + 24) >> 50) & 0x3FLL;
      if ((_DWORD)v601 == 11)
      {
        v204 = *v1061;
        v205 = 16394;
        goto LABEL_282;
      }
      if ((_DWORD)v601)
      {
        __break(0xC471u);
        JUMPOUT(0x198364E08);
      }
      break;
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
      if ((v8 - 202) >= 0xA || ((0x3EFu >> (v8 + 54)) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198366B8CLL);
      }
      v912 = dword_199155574[(__int16)(v8 - 202)];
      v913 = (_DWORD *)(v7 + 24);
      if ((*(_BYTE *)(v7 + 56) & 0x10) != 0)
      {
        v1039 = v912 + *v913;
        if (*((_DWORD *)v1060 + 41) <= v1039)
        {
          __break(0xC471u);
          JUMPOUT(0x198367230);
        }
        v914 = (_QWORD *)(*((_QWORD *)v1060 + 19) + 8 * v1039);
      }
      else
      {
        v914 = &v913[2 * v912];
      }
      v204 = *v1061;
      if ((*v914 & 0xFF00FFFFFFFFFFFFLL) != 0)
        goto LABEL_890;
      goto LABEL_281;
    case 0xCE:
      v980 = (_QWORD *)(v7 + 24);
      v981 = (_QWORD *)(v7 + 24);
      if ((*(_BYTE *)(v7 + 56) & 0x10) != 0)
      {
        if (*((_DWORD *)v1060 + 41) <= *v980)
        {
          __break(0xC471u);
          JUMPOUT(0x1983672C4);
        }
        v981 = (_QWORD *)(*((_QWORD *)v1060 + 19) + 8 * *v980);
      }
      if ((*v981 & 0xFC000000000000) != 0x4000000000000)
        break;
      v1739 = 206;
      v1740 = *(_OWORD *)v980;
      v1741 = *(_QWORD *)(v7 + 40);
      v1742 = 0;
      v1743 = v1060;
      v179 = *(_QWORD *)v4;
      v180 = &v1739;
      goto LABEL_217;
    case 0xD7:
      if (*(unsigned __int8 *)(v7 + 72) - 7 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1983643CCLL);
      }
      return;
    case 0xDD:
      goto LABEL_555;
    case 0xDF:
    case 0xE0:
      if ((*(_QWORD *)(v7 + 24) & 0xFC000000000000) != 0x54000000000000
        || (*(_QWORD *)(v7 + 32) & 0xFC000000000000) != 0x40000000000000
        || (*(_QWORD *)(v7 + 40) & 0xFC000000000000) != 0x54000000000000)
      {
        break;
      }
LABEL_555:
      v204 = *v1061;
      v205 = 16398;
      goto LABEL_282;
    case 0xE1:
      if ((*(_QWORD *)(v7 + 40) & 0xFC000000000000) != 0x54000000000000)
        break;
      return;
    case 0xE5:
      v1192 = 229;
      v539 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1193 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1196 = 0;
      v1194 = v539;
      v1195 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1192;
      goto LABEL_217;
    case 0xE6:
      v907 = *(_QWORD *)(v7 + 24);
      v908 = (v907 >> 50) & 0x3F;
      if ((v908 - 1) < 2)
      {
        v1672 = 230;
        v1673 = v907 & 0xFFFCFFFFFFFFFFFFLL;
        v1674 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
        v1676 = 0;
        v1675 = 0;
        v179 = *(_QWORD *)v4;
        v180 = &v1672;
        goto LABEL_217;
      }
      if ((_DWORD)v908)
      {
        JSC::DFG::Graph::logAssertionFailure(v1060, (JSC::DFG::Node *)v7, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x19836566CLL);
      }
      break;
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
    case 0xED:
      v244 = *(_QWORD *)(v7 + 24);
      v245 = (v244 >> 50) & 0x3F;
      if ((_DWORD)v245 == 21)
      {
        v246 = *(_QWORD *)(v7 + 32);
        if ((v246 & 0xFC000000000000) == 0x54000000000000)
        {
LABEL_288:
          v204 = *v1061;
LABEL_289:
          v205 = 16407;
          goto LABEL_282;
        }
LABEL_311:
        v1181 = *(_WORD *)(v7 + 18);
        v247 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
        v1182 = v244 & 0xFFFCFFFFFFFFFFFFLL;
        v1183 = v246 & 0xFFFCFFFFFFFFFFFFLL;
        v1186 = 0;
        v1184 = v247;
        v1185 = 0;
        v179 = *(_QWORD *)v4;
        v180 = &v1181;
        goto LABEL_217;
      }
      if ((_DWORD)v245)
      {
        v246 = *(_QWORD *)(v7 + 32);
        goto LABEL_311;
      }
      v246 = *(_QWORD *)(v7 + 32);
      if ((v246 & 0xFC000000000000) != 0)
        goto LABEL_311;
      break;
    case 0xEB:
    case 0xEC:
      v1187 = *(_WORD *)(v7 + 18);
      v870 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1188 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1191 = 0;
      v1189 = v870;
      v1190 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1187;
      goto LABEL_217;
    case 0xEF:
      v620 = **(_QWORD **)(v7 + 72);
      v1769 = 239;
      v621 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1770 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1771 = v621;
      v1772 = v620;
      v1773 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1769;
      goto LABEL_217;
    case 0x106:
      v283 = (uint64_t **)v4;
      v284 = v7;
      v291 = *(_QWORD *)(v284 + 32);
      v292 = v291;
      LODWORD(v1225) = 1;
      *((_QWORD *)&v1225 + 1) = 16388;
      v1226 = v284;
      v1227 = 0u;
      v1228 = 0u;
      if ((v291 & 0x80000000) != 0)
        v293 = COERCE__INT64((double)v291) + 0x2000000000000;
      else
        v293 = v291 | 0xFFFE000000000000;
      v294 = JSC::DFG::Graph::freeze((uint64_t)v1060, v293, v285, v286, v287, v288, v289, v290);
      if (!(_DWORD)v291)
        return;
      v305 = v284;
      v306 = *(unsigned __int16 *)(v284 + 18);
      switch(v306)
      {
        case 267:
          goto LABEL_659;
        case 264:
          v307 = *(_DWORD *)(v284 + 76) & 0xF;
          break;
        case 352:
LABEL_659:
          v307 = *(_DWORD *)(v284 + 84) & 0xF;
          break;
        default:
          v307 = *(_DWORD *)(v284 + 72);
          break;
      }
      v308 = v307 - 4;
      if (v308 <= 0x15u && ((0x2A003Fu >> v308) & 1) != 0)
      {
        v309 = qword_1991555A0[(char)v308];
        v310 = dword_199155650[(char)v308];
        v311 = *((unsigned int *)v1060 + 107);
        if (v291 >= v311)
        {
          if ((_DWORD)v311)
          {
            v602 = (unsigned int *)*((_QWORD *)v1060 + 52);
            v603 = 4 * v311;
            do
            {
              v604 = *v602;
              if (v604 < v291)
              {
                v605 = v604 + *(_DWORD *)(v284 + 24);
                if (*((_DWORD *)v1060 + 41) <= v605)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198366FE8);
                }
                v606 = *(_QWORD *)(*((_QWORD *)v1060 + 19) + 8 * v605);
                if ((int)v604 < 0)
                  v607 = COERCE__INT64((double)v604) + 0x2000000000000;
                else
                  v607 = v604 | 0xFFFE000000000000;
                v608 = JSC::DFG::Graph::freeze((uint64_t)v1060, v607, v299, v300, v301, v302, v303, v304);
                v613 = 0;
                LODWORD(v1213) = v310;
                *((_QWORD *)&v1213 + 1) = v309;
                v1214 = v284;
                v1215 = 0;
                v1216 = v608;
                v1217 = 0;
                v1218 = 0;
                if ((v606 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v614 = *(unsigned __int16 *)((v606 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                  if (v614 <= 2)
                  {
                    v613 = *(_QWORD *)((v606 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                    if (*(_WORD *)((v606 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
                    {
                      if ((_DWORD)v614 != 1)
                        v614 = 2;
                      v613 |= v614;
                    }
                  }
                  else
                  {
                    v613 = 0;
                  }
                }
              }
              ++v602;
              v603 -= 4;
            }
            while (v603);
          }
        }
        else
        {
          v312 = 0;
          do
          {
            v313 = v312 + *(_QWORD *)(v305 + 24);
            if (*((_DWORD *)v1060 + 41) <= v313)
            {
              __break(0xC471u);
              JUMPOUT(0x198366F8CLL);
            }
            v314 = v305;
            v315 = *(_QWORD *)(*((_QWORD *)v1060 + 19) + 8 * v313);
            if ((int)v312 < 0)
              v316 = COERCE__INT64((double)v312) + 0x2000000000000;
            else
              v316 = v312 | 0xFFFE000000000000;
            v317 = JSC::DFG::Graph::freeze((uint64_t)v1060, v316, v299, v300, v301, v302, v303, v304);
            v322 = 0;
            LODWORD(v1219) = v310;
            *((_QWORD *)&v1219 + 1) = v309;
            v1220 = v314;
            v1221 = 0;
            v1222 = v317;
            v1223 = 0;
            v1224 = 0;
            if ((v315 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v323 = *(unsigned __int16 *)((v315 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
              if (v323 <= 2)
              {
                v322 = *(_QWORD *)((v315 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                if (*(_WORD *)((v315 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
                {
                  if ((_DWORD)v323 != 1)
                    v323 = 2;
                  v322 |= v323;
                }
              }
              else
              {
                v322 = 0;
              }
            }
            ++v312;
            v305 = v284;
          }
          while (v292 != v312);
        }
      }
      return;
    case 0x107:
      if (*(_DWORD *)(v7 + 32))
      {
        v899 = *(_QWORD *)(v7 + 24);
        v900 = *((_DWORD *)v1060 + 41);
        v95 = v900 >= v899;
        LODWORD(v901) = v900 - v899;
        if (v95)
          v901 = v901;
        else
          v901 = 0;
        v902 = *(unsigned int *)(v7 + 32) - 1;
        do
        {
          if (!v901)
          {
            __break(0xC471u);
            JUMPOUT(0x198366FF8);
          }
          v903 = *(unsigned __int16 *)((*(_QWORD *)(*((_QWORD *)v1060 + 19) + 8 * v899++) & 0xFF00FFFFFFFFFFFFLL)
                                     + 0x12);
          v904 = v903 == 350 || v902-- == 0;
          --v901;
        }
        while (!v904);
      }
      goto LABEL_288;
    case 0x10A:
      v451 = (uint64_t **)v4;
      v452 = v7;
      v1229 = 1;
      v1230 = 16388;
      v1231 = v452;
      v1232 = 0u;
      v1233 = 0u;
      v459 = *(unsigned int *)(v452 + 80);
      if ((v459 & 0x80000000) != 0)
        v460 = COERCE__INT64((double)v459) + 0x2000000000000;
      else
        v460 = v459 | 0xFFFE000000000000;
      v174 = (uint64_t)JSC::DFG::Graph::freeze((uint64_t)v1060, v460, v453, v454, v455, v456, v457, v458);
      v171 = *v451;
      v172 = &v1229;
      v173 = 0;
      goto LABEL_212;
    case 0x10B:
      v1059 = (uint64_t **)v4;
      v383 = v7;
      v390 = **(_QWORD **)(v383 + 72);
      v391 = *(unsigned int *)(v390 + 8);
      LODWORD(v1209) = 1;
      *((_QWORD *)&v1209 + 1) = 16388;
      v1210 = v383;
      v1211 = 0u;
      v1212 = 0u;
      if ((v391 & 0x80000000) != 0)
        v392 = COERCE__INT64((double)v391) + 0x2000000000000;
      else
        v392 = v391 | 0xFFFE000000000000;
      v393 = JSC::DFG::Graph::freeze((uint64_t)v1060, v392, v384, v385, v386, v387, v388, v389);
      v405 = *(unsigned __int16 *)(v383 + 18);
      switch(v405)
      {
        case 267:
          goto LABEL_785;
        case 264:
          LOBYTE(v406) = *(_DWORD *)(v383 + 76) & 0xF;
          break;
        case 352:
LABEL_785:
          LOBYTE(v406) = *(_DWORD *)(v383 + 84) & 0xF;
          break;
        default:
          v406 = *(_DWORD *)(v383 + 72);
          break;
      }
      if (v406 - 8 < 2)
        goto LABEL_457;
      if (v406 > 0x19u)
        return;
      if (((1 << v406) & 0x200030) != 0)
      {
        v407 = 21;
        v408 = 1;
        v409 = 16400;
      }
      else if (((1 << v406) & 0x8000C0) != 0)
      {
        v408 = 0;
        v407 = 13;
        v409 = 16401;
      }
      else
      {
        if (v406 != 25)
          return;
LABEL_457:
        v407 = 21;
        v408 = 1;
        v409 = 16402;
      }
      v410 = *((unsigned int *)v1060 + 107);
      if (v410 > v391)
      {
        if ((_DWORD)v391)
        {
          v501 = 0;
          v502 = v390 + 16;
          do
          {
            if ((v501 & 0x80000000) != 0)
              v503 = COERCE__INT64((double)v501) + 0x2000000000000;
            else
              v503 = v501 | 0xFFFE000000000000;
            v504 = JSC::DFG::Graph::freeze((uint64_t)v1060, v503, v399, v400, v401, v402, v403, v404);
            LODWORD(v1203) = v407;
            *((_QWORD *)&v1203 + 1) = v409;
            v1204 = v383;
            v1205 = 0;
            v1206 = v504;
            v1207 = 0;
            v1208 = 0;
            if ((*(_BYTE *)(v390 + 4) & 0xE) == 6)
              v511 = *(_QWORD *)(v502 + 8 * v501) + 0x2000000000000;
            else
              v511 = *(_QWORD *)(v502 + 8 * v501);
            v512 = (uint64_t)JSC::DFG::Graph::freeze((uint64_t)v1060, v511, v505, v506, v507, v508, v509, v510);
            v517 = v512;
            if ((v408 & 1) == 0)
              v517 = v512 | 1;
            ++v501;
          }
          while (v391 != v501);
        }
      }
      else
      {
        v1775[0] = 0uLL;
        if ((_DWORD)v410)
        {
          v411 = 0;
          v412 = 0;
          v413 = (unsigned int *)*((_QWORD *)v1060 + 52);
          v414 = 4 * v410;
          do
          {
            v415 = *v413;
            v1774.n128_u32[0] = v415;
            if (v415 < v391)
            {
              if (v412 == DWORD2(v1775[0]))
              {
                v416 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1775, v412 + 1, (unint64_t)&v1774);
                v411 = *(unsigned int **)&v1775[0];
                *(_DWORD *)(*(_QWORD *)&v1775[0] + 4 * HIDWORD(v1775[0])) = *v416;
              }
              else
              {
                v411[v412] = v415;
              }
              v412 = ++HIDWORD(v1775[0]);
            }
            ++v413;
            v414 -= 4;
          }
          while (v414);
          if (v412)
          {
            v472 = v390 + 16;
            v473 = 4 * v412;
            do
            {
              v474 = *v411;
              if ((v474 & 0x80000000) != 0)
                v475 = COERCE__INT64((double)v474) + 0x2000000000000;
              else
                v475 = v474 | 0xFFFE000000000000;
              v476 = JSC::DFG::Graph::freeze((uint64_t)v1060, v475, v399, v400, v401, v402, v403, v404);
              LODWORD(v1197) = v407;
              *((_QWORD *)&v1197 + 1) = v409;
              v1198 = v383;
              v1199 = 0;
              v1200 = v476;
              v1201 = 0;
              v1202 = 0;
              if ((*(_BYTE *)(v390 + 4) & 0xE) == 6)
                v483 = *(_QWORD *)(v472 + 8 * v474) + 0x2000000000000;
              else
                v483 = *(_QWORD *)(v472 + 8 * v474);
              v484 = (uint64_t)JSC::DFG::Graph::freeze((uint64_t)v1060, v483, v477, v478, v479, v480, v481, v482);
              v489 = v484;
              if ((v408 & 1) == 0)
                v489 = v484 | 1;
              ++v411;
              v473 -= 4;
            }
            while (v473);
            v411 = *(unsigned int **)&v1775[0];
          }
          if (v411)
          {
            *(_QWORD *)&v1775[0] = 0;
            DWORD2(v1775[0]) = 0;
            WTF::fastFree((unint64_t)v411, v398, v399, v400, v401, v402, v403, v404);
          }
        }
      }
      return;
    case 0x10D:
      v599 = (*(_QWORD *)(v7 + 24) >> 50) & 0x3FLL;
      if (!(_DWORD)v599)
        break;
      if ((_DWORD)v599 != 1 && (_DWORD)v599 != 52)
      {
        JSC::DFG::Graph::logAssertionFailure(v1060, (JSC::DFG::Node *)v7, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x1983641A0);
      }
      goto LABEL_288;
    case 0x10F:
      v984 = *(_QWORD *)(v7 + 24);
      v204 = *v1061;
      if ((v984 & 0xFF00FFFFFFFFFFFFLL) == 0 || (v984 & 0xFC000000000000) == 0x54000000000000)
        goto LABEL_289;
      goto LABEL_281;
    case 0x114:
      isWatchingHavingABadTimeWatchpoint = JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(v1060, (JSC::DFG::Node *)v7, (uint64_t)&v1539, v4, (uint64_t)&v1388, v5, v7, v6);
      v204 = *v1061;
      if ((isWatchingHavingABadTimeWatchpoint & 1) == 0)
        goto LABEL_281;
      goto LABEL_289;
    case 0x115:
      v463 = *(unsigned __int16 *)((*(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v463 == 352)
        return;
      if (v463 == 349)
        goto LABEL_288;
      break;
    case 0x123:
      v953 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1435 = 6;
      v1436 = 16395;
      v1437 = v953;
      v1438 = 0u;
      v1439 = 0u;
      v954 = (uint64_t **)v4;
      JSC::DFG::LazyNode::LazyNode(v1434, (JSC::DFG::Node *)v7);
      v173 = v1434[0];
      v174 = v1434[1];
      v171 = *v954;
      v172 = &v1435;
      goto LABEL_212;
    case 0x127:
      v556 = *(unsigned __int8 *)(v7 + 72);
      v1709 = 295;
      v557 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1710 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1711 = v557;
      v1712 = v556;
      v1713 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1709;
      goto LABEL_217;
    case 0x12B:
      v538 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1626 = 26;
      v1627 = 16423;
      v1628 = v538;
      v1629 = 0u;
      v1630 = 0u;
      v171 = *(uint64_t **)v4;
      v172 = &v1626;
      goto LABEL_210;
    case 0x12C:
      v551 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1621 = 27;
      v1622 = 16423;
      v1623 = v551;
      v1624 = 0u;
      v1625 = 0u;
      v171 = *(uint64_t **)v4;
      v172 = &v1621;
      goto LABEL_210;
    case 0x131:
      v639 = *(_QWORD *)(v7 + 24);
      if ((v639 & 0xFC000000000000) != 0xC4000000000000)
        break;
      v1754 = 305;
      v1756 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1758 = 0;
      v1755 = v639 & 0xFFFCFFFFFFFFFFFFLL;
      v1757 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1754;
      goto LABEL_217;
    case 0x132:
      v1759 = 306;
      v950 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1760 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1763 = 0;
      v1761 = v950;
      v1762 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1759;
      goto LABEL_217;
    case 0x135:
      v931 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1616 = 24;
      v1617 = 16423;
      v1618 = v931;
      v1619 = 0u;
      v1620 = 0u;
      v932 = (uint64_t **)v4;
      JSC::DFG::LazyNode::LazyNode(v1615, (JSC::DFG::Node *)v7);
      v173 = v1615[0];
      v174 = v1615[1];
      v171 = *v932;
      v172 = &v1616;
      goto LABEL_212;
    case 0x136:
      v878 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1610 = 25;
      v1611 = 16423;
      v1612 = v878;
      v1613 = 0u;
      v1614 = 0u;
      v879 = (uint64_t **)v4;
      JSC::DFG::LazyNode::LazyNode(v1609, (JSC::DFG::Node *)v7);
      v173 = v1609[0];
      v174 = v1609[1];
      v171 = *v879;
      v172 = &v1610;
      goto LABEL_212;
    case 0x13E:
    case 0x145:
      v333 = *(_QWORD *)(v7 + 24);
      v334 = (v333 >> 50) & 0x3F;
      if (v334 > 0x34)
        goto LABEL_681;
      if (((1 << v334) & 0x12026000400002) != 0)
      {
        v1176 = *(_WORD *)(v7 + 18);
        v1178 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
        v1180 = 0;
        v1177 = v333 & 0xFFFCFFFFFFFFFFFFLL;
        v1179 = 0;
        v179 = *(_QWORD *)v4;
        v180 = &v1176;
        goto LABEL_217;
      }
      if (v334 == 24)
        return;
      if (((1 << v334) & 0x101) == 0)
      {
LABEL_681:
        __break(0xC471u);
        JUMPOUT(0x198364330);
      }
      break;
    case 0x13F:
      v523 = *(_QWORD *)(v7 + 24);
      if ((v523 & 0xFC000000000000) != 0x54000000000000)
        break;
      v1604 = 319;
      v1606 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1608 = 0;
      v1605 = v523 & 0xFFFCFFFFFFFFFFFFLL;
      v1607 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1604;
      goto LABEL_217;
    case 0x142:
    case 0x143:
      v450 = *(_QWORD *)(v7 + 24);
      if ((v450 & 0xFC000000000000) == 0)
        break;
      v1440 = *(_WORD *)(v7 + 18);
      v1442 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1444 = 0;
      v1441 = v450 & 0xFFFCFFFFFFFFFFFFLL;
      v1443 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1440;
      goto LABEL_217;
    case 0x146:
      v982 = *(_QWORD *)(v7 + 24);
      v983 = (v982 >> 50) & 0x3F;
      if (!(_DWORD)v983)
        break;
      if ((_DWORD)v983 != 28)
      {
        JSC::DFG::Graph::logAssertionFailure(v1060, (JSC::DFG::Node *)v7, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x198366FD0);
      }
      v1599 = 326;
      v1601 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1603 = 0;
      v1600 = v982 & 0xFFFCFFFFFFFFFFFFLL;
      v1602 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1599;
      goto LABEL_217;
    case 0x148:
      v929 = *(int *)(v7 + 72);
      v1069 = 328;
      v930 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1070 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1071 = v930;
      v1072 = v929;
      v1073 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1069;
      goto LABEL_217;
    case 0x149:
      v1171 = 329;
      v985 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1172 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1175 = 0;
      v1173 = v985;
      v1174 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1171;
      goto LABEL_217;
    case 0x157:
      v564 = ((unint64_t)*(unsigned int *)(v7 + 72) << 15) | 0x21;
      v565 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1271 = 56;
      v1272 = v564;
      v1273 = v565;
      v1274 = 0u;
      v1275 = 0u;
      v171 = *(uint64_t **)v4;
      v172 = &v1271;
      goto LABEL_210;
    case 0x158:
      v378 = (uint64_t **)v4;
      v379 = ((unint64_t)*(unsigned int *)(v7 + 72) << 15) | 0x21;
      v380 = v7;
      v381 = *(_QWORD *)(v380 + 32);
      v382 = *(_QWORD *)(v380 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1266 = 56;
      v1267 = v379;
      v1268 = v382;
      v1269 = 0u;
      v1270 = 0u;
      v173 = v381 & 0xFF00FFFFFFFFFFFFLL;
      if ((v381 & 0xFF00FFFFFFFFFFFFLL) != 0
        && (v524 = *(unsigned __int16 *)((v381 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v524 <= 2))
      {
        v174 = *(_QWORD *)((v381 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        if (*(_WORD *)((v381 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
        {
          if ((_DWORD)v524 != 1)
            v524 = 2;
          v174 |= v524;
        }
      }
      else
      {
        v174 = 0;
      }
      v171 = *v378;
      v172 = &v1266;
      goto LABEL_212;
    case 0x159:
      v234 = *(_QWORD *)(**(_QWORD **)(v7 + 72) + 40);
      if ((v234 & 1) == 0)
        goto LABEL_347;
      goto LABEL_285;
    case 0x164:
      v909 = ((unint64_t)*(unsigned int *)(v7 + 72) << 15) | 0x14;
      v910 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1251 = 8;
      v1252 = v909;
      v1253 = v910;
      v1254 = 0u;
      v1255 = 0u;
      v911 = (uint64_t **)v4;
      JSC::DFG::LazyNode::LazyNode(v1250, (JSC::DFG::Node *)v7);
      v173 = v1250[0];
      v174 = v1250[1];
      v171 = *v911;
      v172 = &v1251;
      goto LABEL_212;
    case 0x165:
      v986 = ((unint64_t)*(unsigned int *)(v7 + 72) << 15) | 0x14;
      v987 = (uint64_t **)v4;
      v988 = v7;
      v989 = *(_QWORD *)(v988 + 32);
      v990 = *(_QWORD *)(v988 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1245 = 8;
      v1246 = v986;
      v1247 = v990;
      v1248 = 0u;
      v1249 = 0u;
      JSC::DFG::LazyNode::LazyNode(v1244, (JSC::DFG::Node *)(v989 & 0xFF00FFFFFFFFFFFFLL));
      v173 = v1244[0];
      v174 = v1244[1];
      v171 = *v987;
      v172 = &v1245;
      goto LABEL_212;
    case 0x167:
    case 0x168:
    case 0x169:
    case 0x16A:
      v234 = *(_QWORD *)(**(_QWORD **)(v7 + 72) + 112);
      if ((v234 & 1) != 0)
LABEL_285:
        v235 = (v234 >> 1) & 3;
      else
LABEL_347:
        v235 = *(unsigned __int8 *)(v234 + 4);
      if (v235 != 2)
      goto LABEL_288;
    case 0x178:
    case 0x179:
    case 0x17A:
    case 0x17D:
      v204 = *v1061;
      v205 = 16418;
      goto LABEL_282;
    case 0x17E:
    case 0x17F:
      v204 = *v1061;
      v205 = 16392;
      goto LABEL_282;
    case 0x180:
    case 0x182:
      v920 = (JSC::DFG::Node *)v7;
      v921 = (uint64_t **)v4;
      if ((_DWORD)v8 != 386)
      {
        v922 = 12;
LABEL_915:
        v923 = BYTE2(*(_DWORD *)(v7 + 72));
        switch(*(_DWORD *)(v7 + 72))
        {
          case 3u:
            return;
          case 7u:
            if (v923 > 1)
              goto LABEL_280;
            v1040 = *(_QWORD *)(v7 + 24);
            v1041 = *((_DWORD *)v1060 + 41);
            if (v1041 <= v1040)
            {
              __break(0xC471u);
              JUMPOUT(0x198367294);
            }
            if (v1041 <= (int)v1040 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19836729CLL);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1682, v922, 16400, *(_QWORD *)(*((_QWORD *)v1060 + 19) + 8 * *(_QWORD *)(v7 + 24)), *(_QWORD *)(*((_QWORD *)v1060 + 19) + 8 * (*(_QWORD *)(v7 + 24) + 1)), 0);
            JSC::DFG::LazyNode::LazyNode(v1681, v920);
            v173 = v1681[0];
            v174 = v1681[1];
            v171 = *v921;
            v172 = (int *)v1682;
            goto LABEL_212;
          case 8u:
            if (v923 > 1)
              goto LABEL_280;
            v1042 = *(_QWORD *)(v7 + 24);
            v1043 = *((_DWORD *)v1060 + 41);
            if (v1043 <= v1042)
            {
              __break(0xC471u);
              JUMPOUT(0x1983672A4);
            }
            if (v1043 <= (int)v1042 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1983672ACLL);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1680, v922, 16401, *(_QWORD *)(*((_QWORD *)v1060 + 19) + 8 * *(_QWORD *)(v7 + 24)), *(_QWORD *)(*((_QWORD *)v1060 + 19) + 8 * (*(_QWORD *)(v7 + 24) + 1)), 0);
            JSC::DFG::LazyNode::LazyNode(v1679, v920);
            v173 = v1679[0];
            v174 = v1679[1];
            v171 = *v921;
            v172 = (int *)v1680;
            goto LABEL_212;
          case 9u:
            if (v923 > 1)
              goto LABEL_280;
            v1044 = *(_QWORD *)(v7 + 24);
            v1045 = *((_DWORD *)v1060 + 41);
            if (v1045 <= v1044)
            {
              __break(0xC471u);
              JUMPOUT(0x1983672B4);
            }
            if (v1045 <= (int)v1044 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1983672BCLL);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1678, v922, 16402, *(_QWORD *)(*((_QWORD *)v1060 + 19) + 8 * *(_QWORD *)(v7 + 24)), *(_QWORD *)(*((_QWORD *)v1060 + 19) + 8 * (*(_QWORD *)(v7 + 24) + 1)), 0);
            JSC::DFG::LazyNode::LazyNode(v1677, v920);
            v173 = v1677[0];
            v174 = v1677[1];
            v171 = *v921;
            v172 = (int *)v1678;
            goto LABEL_212;
          case 0xAu:
            if (v923 >= 2)
              goto LABEL_280;
            return;
          default:
            goto LABEL_280;
        }
      }
      v959 = *(unsigned __int8 *)(v7 + 80);
      if (v959 == 1)
      {
        v922 = 11;
        goto LABEL_915;
      }
      if (v959 == 2)
      {
        if (*((_DWORD *)v1060 + 41) <= *(_QWORD *)(v7 + 24))
        {
          __break(0xC471u);
          JUMPOUT(0x198367238);
        }
        if ((*(_QWORD *)(*((_QWORD *)v1060 + 19) + 8 * *(_QWORD *)(v7 + 24)) & 0xFC000000000000) == 0x20000000000000)
          return;
      }
      break;
    case 0x183:
      v972 = *(unsigned __int8 *)(v7 + 80);
      v1688 = 387;
      v973 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1689 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1690 = v973;
      v1691 = v972;
      v1692 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1688;
      goto LABEL_217;
    case 0x188:
      v1166 = 392;
      v462 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1167 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1170 = 0;
      v1168 = v462;
      v1169 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1166;
      goto LABEL_217;
    case 0x189:
      v1161 = 393;
      v555 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1162 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1165 = 0;
      v1163 = v555;
      v1164 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1161;
      goto LABEL_217;
    case 0x18A:
      v540 = *(_QWORD *)(v7 + 24);
      v541 = 16411;
      if ((v540 & 0xFC000000000000) != 0x78000000000000)
        v541 = 16412;
      v173 = v7;
      v542 = *(_QWORD *)(v7 + 40);
      v543 = *(_QWORD *)(v7 + 32) & 0xFF00FFFFFFFFFFFFLL;
      if (v543
        && (v619 = *(unsigned __int16 *)((*(_QWORD *)(v7 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12), v619 <= 2))
      {
        v544 = *(_QWORD *)((*(_QWORD *)(v7 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        if (*(_WORD *)((*(_QWORD *)(v7 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
        {
          if ((_DWORD)v619 != 1)
            v619 = 2;
          v544 |= v619;
        }
      }
      else
      {
        v544 = 0;
      }
      v1154 = 52;
      v1155 = v541;
      v1156 = v540 & 0xFF00FFFFFFFFFFFFLL;
      v1157 = v543;
      v1158 = v544;
      v1159 = v542 & 0xFF00FFFFFFFFFFFFLL;
      v1160 = 0;
      v171 = *(uint64_t **)v4;
      v172 = &v1154;
      goto LABEL_211;
    case 0x18B:
      v552 = *(_QWORD *)(v7 + 24);
      v173 = v7;
      v553 = *(_QWORD *)(v7 + 32) & 0xFF00FFFFFFFFFFFFLL;
      if (v553
        && (v640 = *(unsigned __int16 *)((*(_QWORD *)(v7 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12), v640 <= 2))
      {
        v554 = *(_QWORD *)((*(_QWORD *)(v7 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        if (*(_WORD *)((*(_QWORD *)(v7 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
        {
          if ((_DWORD)v640 != 1)
            v640 = 2;
          v554 |= v640;
        }
      }
      else
      {
        v554 = 0;
      }
      v1147 = 54;
      v1148 = 16411;
      v1149 = v552 & 0xFF00FFFFFFFFFFFFLL;
      v1150 = v553;
      v1151 = v554;
      v1153 = 0;
      v1152 = 0;
      v171 = *(uint64_t **)v4;
      v172 = &v1147;
      goto LABEL_211;
    case 0x18C:
      if ((*(_QWORD *)(v7 + 24) & 0xFC000000000000) == 0x80000000000000)
        v955 = 16413;
      else
        v955 = 16414;
      v956 = (uint64_t **)v4;
      v957 = (JSC::DFG::Node *)v7;
      v958 = *((_QWORD *)v957 + 3) & 0xFF00FFFFFFFFFFFFLL;
      v1142 = 44;
      v1143 = v955;
      v1144 = v958;
      v1145 = 0u;
      v1146 = 0u;
      JSC::DFG::LazyNode::LazyNode(v1141, v957);
      v173 = v1141[0];
      v174 = v1141[1];
      v171 = *v956;
      v172 = &v1142;
      goto LABEL_212;
    case 0x18D:
      v977 = *(_QWORD *)(v7 + 24);
      v978 = 16413;
      if ((v977 & 0xFC000000000000) != 0x80000000000000)
        v978 = 16414;
      v1136 = 45;
      v1137 = v978;
      v1138 = v977 & 0xFF00FFFFFFFFFFFFLL;
      v1139 = 0u;
      v1140 = 0u;
      v979 = (uint64_t **)v4;
      JSC::DFG::LazyNode::LazyNode(v1135, (JSC::DFG::Node *)v7);
      v173 = v1135[0];
      v174 = v1135[1];
      v171 = *v979;
      v172 = &v1136;
      goto LABEL_212;
    case 0x18E:
      v969 = *(_QWORD *)(v7 + 24);
      v970 = 16413;
      if ((v969 & 0xFC000000000000) != 0x80000000000000)
        v970 = 16414;
      v1130 = 46;
      v1131 = v970;
      v1132 = v969 & 0xFF00FFFFFFFFFFFFLL;
      v1133 = 0u;
      v1134 = 0u;
      v971 = (uint64_t **)v4;
      JSC::DFG::LazyNode::LazyNode(v1129, (JSC::DFG::Node *)v7);
      v173 = v1129[0];
      v174 = v1129[1];
      v171 = *v971;
      v172 = &v1130;
      goto LABEL_212;
    case 0x18F:
      v641 = *(_QWORD *)(v7 + 24);
      v642 = 16411;
      if ((v641 & 0xFC000000000000) != 0x78000000000000)
        v642 = 16412;
      v1124 = 47;
      v1125 = v642;
      v1126 = v641 & 0xFF00FFFFFFFFFFFFLL;
      v1127 = 0u;
      v1128 = 0u;
      v171 = *(uint64_t **)v4;
      v172 = &v1124;
      goto LABEL_210;
    case 0x190:
      if (*(_DWORD *)(v7 + 72))
        v974 = 16412;
      else
        v974 = 16411;
      v975 = (uint64_t **)v4;
      v976 = (uint64_t *)v7;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1123, 48, v974, v976[3], v976[4], 0);
      JSC::DFG::LazyNode::LazyNode(v1122, (JSC::DFG::Node *)v976);
      v173 = v1122[0];
      v174 = v1122[1];
      v171 = *v975;
      v172 = (int *)v1123;
      goto LABEL_212;
    case 0x191:
      v889 = 16411;
      if (*(_DWORD *)(v7 + 72))
        v889 = 16412;
      v890 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1117 = 49;
      v1118 = v889;
      v1119 = v890;
      v1120 = 0u;
      v1121 = 0u;
      v891 = (uint64_t **)v4;
      JSC::DFG::LazyNode::LazyNode(v1116, (JSC::DFG::Node *)v7);
      v173 = v1116[0];
      v174 = v1116[1];
      v171 = *v891;
      v172 = &v1117;
      goto LABEL_212;
    case 0x192:
      v892 = 16411;
      if (*(_DWORD *)(v7 + 72))
        v892 = 16412;
      v893 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1111 = 50;
      v1112 = v892;
      v1113 = v893;
      v1114 = 0u;
      v1115 = 0u;
      v894 = (uint64_t **)v4;
      JSC::DFG::LazyNode::LazyNode(v1110, (JSC::DFG::Node *)v7);
      v173 = v1110[0];
      v174 = v1110[1];
      v171 = *v894;
      v172 = &v1111;
      goto LABEL_212;
    case 0x193:
      v895 = 16411;
      if (*(_DWORD *)(v7 + 72))
        v895 = 16412;
      v896 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1105 = 51;
      v1106 = v895;
      v1107 = v896;
      v1108 = 0u;
      v1109 = 0u;
      v897 = (uint64_t **)v4;
      JSC::DFG::LazyNode::LazyNode(v1104, (JSC::DFG::Node *)v7);
      v173 = v1104[0];
      v174 = v1104[1];
      v171 = *v897;
      v172 = &v1105;
      goto LABEL_212;
    case 0x194:
      v867 = (uint64_t **)v4;
      v868 = (uint64_t *)v7;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1101, 53, 16412, v868[3], v868[4], 0);
      JSC::DFG::LazyNode::LazyNode(v1100, (JSC::DFG::Node *)v868);
      v173 = v1100[0];
      v174 = v1100[1];
      v171 = *v867;
      v172 = (int *)v1101;
      goto LABEL_212;
    case 0x195:
      v490 = *(_QWORD *)(v7 + 24);
      v491 = *((_DWORD *)v1060 + 41);
      if (v491 <= v490)
      {
        __break(0xC471u);
        JUMPOUT(0x198366FD8);
      }
      v492 = v490 + 1;
      if (v491 <= (int)v490 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198366FE0);
      }
      v493 = (uint64_t **)v4;
      v494 = v7;
      v495 = *(_QWORD *)(v7 + 24);
      v496 = *((_QWORD *)v1060 + 19);
      v497 = *(_QWORD *)(v496 + 8 * v495);
      v498 = *(_QWORD *)(v496 + 8 * v492) & 0xFF00FFFFFFFFFFFFLL;
      if (v498
        && (v566 = *(unsigned __int16 *)((*(_QWORD *)(v496 + 8 * v492) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
            v566 <= 2))
      {
        v499 = *(_QWORD *)((*(_QWORD *)(v496 + 8 * v492) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        if (*(_WORD *)((*(_QWORD *)(v496 + 8 * v492) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
        {
          if ((_DWORD)v566 != 1)
            v566 = 2;
          v499 |= v566;
        }
      }
      else
      {
        v499 = 0;
      }
      v174 = 0;
      v1093 = 53;
      v1094 = 16411;
      v1095 = v497 & 0xFF00FFFFFFFFFFFFLL;
      v1096 = v498;
      v1097 = v499;
      v1099 = 0;
      v1098 = 0;
      v173 = v494;
      v500 = *(unsigned __int16 *)(v494 + 18);
      if (v500 <= 2)
      {
        v174 = *(_QWORD *)(v494 + 72);
        if (*(_WORD *)(v494 + 18))
        {
          if ((_DWORD)v500 != 1)
            v500 = 2;
          v174 |= v500;
          v173 = v494;
        }
      }
      v171 = *v493;
      v172 = &v1093;
      goto LABEL_212;
    case 0x196:
      if ((*(_QWORD *)(v7 + 24) & 0xFC000000000000) == 0x78000000000000)
        v205 = 16411;
      else
        v205 = 16412;
      goto LABEL_927;
    case 0x197:
      v883 = (uint64_t **)v4;
      v884 = *(_QWORD *)(v7 + 24);
      v885 = (JSC::DFG::Node *)v7;
      if ((v884 & 0xFC000000000000) == 0x88000000000000)
        v886 = 16415;
      else
        v886 = 16416;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1103, 55, v886, v884, *(_QWORD *)(v7 + 32), 0);
      JSC::DFG::LazyNode::LazyNode(v1102, v885);
      v173 = v1102[0];
      v174 = v1102[1];
      v171 = *v883;
      v172 = (int *)v1103;
      goto LABEL_212;
    case 0x198:
      v967 = (uint64_t **)v4;
      v968 = v7;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1092, 55, 16416, *(_QWORD *)(v968 + 24), *(_QWORD *)(v968 + 32), 0);
      JSC::DFG::LazyNode::LazyNode(v1091, (JSC::DFG::Node *)(*(_QWORD *)(v968 + 32) & 0xFF00FFFFFFFFFFFFLL));
      v173 = v1091[0];
      v174 = v1091[1];
      v171 = *v967;
      v172 = (int *)v1092;
      goto LABEL_212;
    case 0x199:
      v960 = *(_QWORD *)(v7 + 24);
      v961 = *((_DWORD *)v1060 + 41);
      if (v961 <= v960)
      {
        __break(0xC471u);
        JUMPOUT(0x1983670D4);
      }
      v962 = v960 + 1;
      if (v961 <= (int)v960 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1983670DCLL);
      }
      v963 = v960 + 2;
      if (v961 <= (int)v960 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1983670E4);
      }
      v964 = (uint64_t **)v4;
      v965 = *(_QWORD *)(v7 + 24);
      v966 = *((_QWORD *)v1060 + 19);
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1090, 55, 16415, *(_QWORD *)(v966 + 8 * v965), *(_QWORD *)(v966 + 8 * v962), 0);
      JSC::DFG::LazyNode::LazyNode(v1089, (JSC::DFG::Node *)(*(_QWORD *)(v966 + 8 * v963) & 0xFF00FFFFFFFFFFFFLL));
      v173 = v1089[0];
      v174 = v1089[1];
      v171 = *v964;
      v172 = (int *)v1090;
      goto LABEL_212;
    case 0x19A:
      v1084 = 410;
      v882 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1085 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1087 = 0;
      v1088 = 0;
      v1086 = v882;
      v179 = *(_QWORD *)v4;
      v180 = &v1084;
      goto LABEL_217;
    case 0x19C:
    case 0x19D:
      v1079 = *(_WORD *)(v7 + 18);
      v461 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1080 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1082 = 0;
      v1083 = 0;
      v1081 = v461;
      v179 = *(_QWORD *)v4;
      v180 = &v1079;
      goto LABEL_217;
    case 0x19E:
      v1749 = 414;
      v919 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1750 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1753 = 0;
      v1751 = v919;
      v1752 = 0;
      v179 = *(_QWORD *)v4;
      v180 = &v1749;
      goto LABEL_217;
    case 0x19F:
      v1074 = 415;
      v598 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1075 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1077 = 0;
      v1078 = 0;
      v1076 = v598;
      v179 = *(_QWORD *)v4;
      v180 = &v1074;
      goto LABEL_217;
    case 0x1A0:
      v419 = *(_QWORD *)(*(_QWORD *)(v7 + 72) + 16);
      if (!v419)
        break;
      v420 = v7;
      v421 = (uint64_t *)v4;
      v422 = *(unsigned int *)(v419 + 24);
      v423 = *(_DWORD *)(v419 + 28);
      v424 = (unsigned __int16)*(_DWORD *)(v419 + 24);
      if (v424 != WORD1(v422))
      {
        v1026 = WORD1(v422) == 0xFFFF && v424 == 0;
        v1027 = (v422 << 15) | 0x25;
        if (v1026)
          v1028 = 16387;
        else
          v1028 = v1027;
      }
      if ((_WORD)v423)
      {
        v425 = HIWORD(v423);
        v426 = *(unsigned __int16 *)(v420 + 18);
        if ((unsigned __int16)v423 == 0xFFFF && v425 == 0xFFFF)
        {
          v865 = **(_QWORD **)(v420 + 72);
          v1414 = *(_WORD *)(v420 + 18);
          v866 = *(_QWORD *)(v420 + 40) & 0xFFFCFFFFFFFFFFFFLL;
          v1415 = vandq_s8(*(int8x16_t *)(v420 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
          v1416 = v866;
          v1417 = v865;
          v1418 = 0;
          v179 = *v421;
          v180 = &v1414;
LABEL_217:
          return;
        }
      }
      else
      {
        if (v423 > 0xFFFEFFFF)
          return;
        v425 = HIWORD(v423);
        v426 = *(unsigned __int16 *)(v420 + 18);
      }
      v428 = *(_QWORD *)(v420 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1409 = 57;
      v1410 = ((unint64_t)((unsigned __int16)v423 | ((unsigned __int16)v425 << 16)) << 15) | 0x25;
      v1411 = v428;
      v1412 = 0u;
      v1413 = 0u;
      if (v426 <= 2)
      {
        v174 = *(_QWORD *)(v420 + 72);
        if (v426)
        {
          if (v426 == 1)
            v869 = 1;
          else
            v869 = 2;
          v174 |= v869;
        }
      }
      else
      {
        v174 = 0;
      }
      v171 = (uint64_t *)*v421;
      v172 = &v1409;
      v173 = v420;
      goto LABEL_212;
    case 0x1A1:
      v880 = *(unsigned int *)(*(_QWORD *)(v7 + 72) + 48);
      if ((unsigned __int16)*(_DWORD *)(*(_QWORD *)(v7 + 72) + 48) == WORD1(v880))
        return;
      if (!(unsigned __int16)*(_DWORD *)(*(_QWORD *)(v7 + 72) + 48) && WORD1(v880) == 0xFFFF)
        break;
      v881 = 37;
LABEL_1010:
      v205 = v881 | (v880 << 15);
LABEL_927:
      v204 = *v1061;
      goto LABEL_282;
    case 0x1AB:
    case 0x1AC:
      if ((*(_BYTE *)(v7 + 74) & 1) == 0)
      {
        v926 = (uint64_t **)v4;
        v927 = (uint64_t *)v7;
        v928 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*(_DWORD *)(v7 + 56) & 7));
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1063, v928, (v927[9] << 15) | 0x16, v927[3], v927[4], v927[5]);
        JSC::DFG::LazyNode::LazyNode(v1062, (JSC::DFG::Node *)v927);
        v173 = v1062[0];
        v174 = v1062[1];
        v171 = *v926;
        v172 = (int *)v1063;
        goto LABEL_212;
      }
LABEL_934:
      v204 = *v1061;
LABEL_890:
      v205 = 16406;
      goto LABEL_282;
    case 0x1AD:
      if ((*(_BYTE *)(v7 + 74) & 1) != 0)
      v204 = *v1061;
      goto LABEL_890;
    case 0x1AE:
    case 0x1AF:
      v417 = ((unint64_t)*(_DWORD *)(v7 + 72) << 15) | 0x1A;
      v418 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1064 = 38;
      v1065 = v417;
      v1066 = v418;
      v1067 = 0u;
      v1068 = 0u;
      v171 = *(uint64_t **)v4;
      v172 = &v1064;
      goto LABEL_210;
    case 0x1B0:
      v204 = *v1061;
      v205 = 16410;
      goto LABEL_282;
    case 0x1B1:
      __break(0xC471u);
      JUMPOUT(0x198365944);
    default:
      v1775[0] = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * v8];
      v1030 = (JSC::DFG::Node *)v7;
      WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)v1775, (uint64_t *)&v1774);
      if (v1774.n128_u64[0])
        v1031 = (const char *)(v1774.n128_u64[0] + 16);
      else
        v1031 = 0;
      JSC::DFG::Graph::logAssertionFailure(v1060, v1030, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", v1031);
      WTF::CString::~CString((WTF::CString *)&v1774, v1032, v1033, v1034, v1035, v1036, v1037, v1038);
      __break(0xC471u);
      JUMPOUT(0x198366398);
  }
LABEL_280:
  v204 = *v1061;
LABEL_281:
  v205 = 16387;
LABEL_282:
  return;
}

